import {
  Button,
  CheckBox,
  ContextMenu,
  DataManager,
  DataUtil,
  DatePicker,
  DateTimePicker,
  Deferred,
  Dialog,
  FormValidator,
  Input,
  JsonAdaptor,
  ListBase,
  MaskedDateTime,
  MaskedTextBox,
  NumericTextBox,
  PdfBitmap,
  PdfBorders,
  PdfColor,
  PdfCompositeField,
  PdfDocument,
  PdfFontFamily,
  PdfFontStyle,
  PdfGrid,
  PdfGridLayoutFormat,
  PdfLayoutBreakType,
  PdfLayoutType,
  PdfPaddings,
  PdfPageCountField,
  PdfPageNumberField,
  PdfPageOrientation,
  PdfPageSettings,
  PdfPageTemplateElement,
  PdfPen,
  PdfSolidBrush,
  PdfStandardFont,
  PdfStringFormat,
  PdfTextAlignment,
  PdfTextWebLink,
  PdfTrueTypeFont,
  PdfVerticalAlignment,
  PointF,
  Popup,
  Predicate,
  Query,
  RadioButton,
  RectangleF,
  RemoteSaveAdaptor,
  SizeF,
  Sortable,
  Switch,
  TextBox,
  TimePicker,
  Toolbar,
  Tooltip,
  TreeView,
  UrlAdaptor,
  Workbook,
  calculatePosition,
  calculateRelativeBasedPosition,
  createCheckBox,
  createSpinner,
  cssClass,
  getZindexPartial,
  hideSpinner,
  isCollide,
  moveTo,
  showSpinner
} from "./chunk-LIV5E5HL.js";
import {
  Animation,
  Browser,
  ChildProperty,
  Collection,
  Complex,
  Component,
  Draggable,
  Droppable,
  Event as Event2,
  EventHandler,
  Internationalization,
  KeyboardEvents,
  L10n,
  NotifyPropertyChanges,
  Property,
  SanitizeHtmlHelper,
  Touch,
  addClass,
  animationMode,
  append,
  attributes,
  blazorTemplates,
  classList,
  closest,
  compile,
  createElement,
  debounce,
  defaultCurrencyCode,
  detach,
  extend,
  formatUnit,
  getComponent,
  getEnumValue,
  getUniqueID,
  getValue,
  initializeCSPTemplate,
  isBlazor,
  isNullOrUndefined,
  isObject,
  isUndefined,
  matches,
  merge,
  prepend,
  print,
  remove,
  removeClass,
  resetBlazorTemplate,
  rippleEffect,
  select,
  selectAll,
  setCulture,
  setStyleAttribute,
  setValue,
  updateBlazorTemplate,
  updateCSSText
} from "./chunk-J6KMUI6T.js";

// node_modules/@syncfusion/ej2-grids/src/grid/services/value-formatter.js
var ValueFormatter = (
  /** @class */
  function() {
    function ValueFormatter2(cultureName) {
      this.intl = new Internationalization();
      if (!isNullOrUndefined(cultureName)) {
        this.intl.culture = cultureName;
      }
    }
    ValueFormatter2.prototype.getFormatFunction = function(format) {
      if (!isNullOrUndefined(format) && (format.type === "dateTime" || format.type === "datetime" || format.type === "date" || format.type === "time")) {
        return this.intl.getDateFormat(format);
      } else {
        return this.intl.getNumberFormat(format);
      }
    };
    ValueFormatter2.prototype.getParserFunction = function(format) {
      if (format.type) {
        return this.intl.getDateParser(format);
      } else {
        return this.intl.getNumberParser(format);
      }
    };
    ValueFormatter2.prototype.fromView = function(value, format, type) {
      if ((type === "date" || type === "datetime" || type === "number") && !isNullOrUndefined(format) && !isNullOrUndefined(value)) {
        return format(value);
      } else {
        return value;
      }
    };
    ValueFormatter2.prototype.toView = function(value, format) {
      var result = value;
      if (!isNullOrUndefined(format) && !isNullOrUndefined(value)) {
        result = format(value);
      }
      return result;
    };
    ValueFormatter2.prototype.setCulture = function(cultureName) {
      if (!isNullOrUndefined(cultureName)) {
        setCulture(cultureName);
      }
    };
    return ValueFormatter2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/base/constant.js
var created = "create";
var destroyed = "destroy";
var load = "load";
var rowDataBound = "rowDataBound";
var queryCellInfo = "queryCellInfo";
var headerCellInfo = "headerCellInfo";
var actionBegin = "actionBegin";
var actionComplete = "actionComplete";
var actionFailure = "actionFailure";
var dataBound = "dataBound";
var rowSelecting = "rowSelecting";
var rowSelected = "rowSelected";
var rowDeselecting = "rowDeselecting";
var rowDeselected = "rowDeselected";
var cellSelecting = "cellSelecting";
var cellSelected = "cellSelected";
var cellDeselecting = "cellDeselecting";
var cellDeselected = "cellDeselected";
var columnSelecting = "columnSelecting";
var columnSelected = "columnSelected";
var columnDeselecting = "columnDeselecting";
var columnDeselected = "columnDeselected";
var columnDragStart = "columnDragStart";
var columnDrag = "columnDrag";
var columnDrop = "columnDrop";
var rowDragStartHelper = "rowDragStartHelper";
var rowDragStart = "rowDragStart";
var rowDrag = "rowDrag";
var rowDrop = "rowDrop";
var beforePrint = "beforePrint";
var printComplete = "printComplete";
var detailDataBound = "detailDataBound";
var toolbarClick = "toolbarClick";
var batchAdd = "batchAdd";
var batchCancel = "batchCancel";
var batchDelete = "batchDelete";
var beforeBatchAdd = "beforeBatchAdd";
var beforeBatchDelete = "beforeBatchDelete";
var beforeBatchSave = "beforeBatchSave";
var beginEdit = "beginEdit";
var cellEdit = "cellEdit";
var cellSave = "cellSave";
var cellSaved = "cellSaved";
var endAdd = "endAdd";
var endDelete = "endDelete";
var endEdit = "endEdit";
var recordDoubleClick = "recordDoubleClick";
var recordClick = "recordClick";
var beforeDataBound = "beforeDataBound";
var beforeOpenColumnChooser = "beforeOpenColumnChooser";
var beforeOpenAdaptiveDialog = "beforeOpenAdaptiveDialog";
var resizeStart = "resizeStart";
var onResize = "resizing";
var resizeStop = "resizeStop";
var checkBoxChange = "checkBoxChange";
var beforeCopy = "beforeCopy";
var beforePaste = "beforePaste";
var beforeAutoFill = "beforeAutoFill";
var filterChoiceRequest = "filterchoicerequest";
var filterAfterOpen = "filterAfterOpen";
var filterBeforeOpen = "filterBeforeOpen";
var filterSearchBegin = "filterSearchBegin";
var commandClick = "commandClick";
var exportGroupCaption = "exportGroupCaption";
var lazyLoadGroupExpand = "lazyLoadGroupExpand";
var lazyLoadGroupCollapse = "lazyLoadGroupCollapse";
var initialLoad = "initial-load";
var initialEnd = "initial-end";
var dataReady = "data-ready";
var contentReady = "content-ready";
var uiUpdate = "ui-update";
var onEmpty = "on-empty";
var inBoundModelChanged = "inbound-model-changed";
var modelChanged = "model-changed";
var colGroupRefresh = "colgroup-refresh";
var headerRefreshed = "header-refreshed";
var pageBegin = "paging-begin";
var pageComplete = "paging-complete";
var sortBegin = "sorting-begin";
var sortComplete = "sorting-complete";
var filterBegin = "filtering-begin";
var filterComplete = "filtering-complete";
var searchBegin = "searching-begin";
var searchComplete = "searching-complete";
var reorderBegin = "reorder-begin";
var reorderComplete = "reorder-complete";
var rowDragAndDropBegin = "rowdraganddrop-begin";
var rowDragAndDropComplete = "rowdraganddrop-complete";
var groupBegin = "grouping-begin";
var groupComplete = "grouping-complete";
var ungroupBegin = "ungrouping-begin";
var ungroupComplete = "ungrouping-complete";
var groupAggregates = "group-aggregates";
var refreshFooterRenderer = "refresh-footer-rendered";
var refreshAggregateCell = "refresh-aggregate-cell";
var refreshAggregates = "refresh-aggregates";
var rowSelectionBegin = "rowselecting";
var rowSelectionComplete = "rowselected";
var columnSelectionBegin = "columnselecting";
var columnSelectionComplete = "columnselected";
var cellSelectionBegin = "cellselecting";
var cellSelectionComplete = "cellselected";
var destroyAutoFillElements = "destroy-autofill-elements";
var beforeCellFocused = "beforecellfocused";
var cellFocused = "cellfocused";
var keyPressed = "key-pressed";
var click = "click";
var destroy = "destroy";
var columnVisibilityChanged = "column-visible-changed";
var scroll = "scroll";
var columnWidthChanged = "column-width-changed";
var columnPositionChanged = "column-position-changed";
var rowDragAndDrop = "row-drag-and-drop";
var rowsAdded = "rows-added";
var rowsRemoved = "rows-removed";
var columnDragStop = "column-drag-stop";
var headerDrop = "header-drop";
var dataSourceModified = "datasource-modified";
var refreshComplete = "refresh-complete";
var refreshVirtualBlock = "refresh-virtual-block";
var dblclick = "dblclick";
var toolbarRefresh = "toolbar-refresh";
var bulkSave = "bulk-save";
var autoCol = "auto-col";
var tooltipDestroy = "tooltip-destroy";
var updateData = "update-data";
var editBegin = "edit-begin";
var editComplete = "edit-complete";
var addBegin = "add-begin";
var addComplete = "add-complete";
var saveComplete = "save-complete";
var deleteBegin = "delete-begin";
var deleteComplete = "delete-complete";
var preventBatch = "prevent-batch";
var dialogDestroy = "dialog-destroy";
var crudAction = "crud-Action";
var addDeleteAction = "add-delete-Action";
var destroyForm = "destroy-form";
var doubleTap = "double-tap";
var beforeExcelExport = "beforeExcelExport";
var excelExportComplete = "excelExportComplete";
var excelQueryCellInfo = "excelQueryCellInfo";
var excelHeaderQueryCellInfo = "excelHeaderQueryCellInfo";
var exportDetailDataBound = "exportDetailDataBound";
var exportDetailTemplate = "exportDetailTemplate";
var beforePdfExport = "beforePdfExport";
var pdfExportComplete = "pdfExportComplete";
var pdfQueryCellInfo = "pdfQueryCellInfo";
var pdfHeaderQueryCellInfo = "pdfHeaderQueryCellInfo";
var accessPredicate = "access-predicate";
var contextMenuClick = "contextMenuClick";
var freezeRender = "freezerender";
var freezeRefresh = "freezerefresh";
var contextMenuOpen = "contextMenuOpen";
var columnMenuClick = "columnMenuClick";
var columnMenuOpen = "columnMenuOpen";
var filterOpen = "filterOpen";
var filterDialogCreated = "filterDialogCreated";
var filterMenuClose = "filter-menu-close";
var initForeignKeyColumn = "initForeignKeyColumn";
var getForeignKeyData = "getForeignKeyData";
var generateQuery = "generateQuery";
var showEmptyGrid = "showEmptyGrid";
var foreignKeyData = "foreignKeyData";
var columnDataStateChange = "columnDataStateChange";
var dataStateChange = "dataStateChange";
var dataSourceChanged = "dataSourceChanged";
var rtlUpdated = "rtl-updated";
var beforeFragAppend = "beforeFragAppend";
var frozenHeight = "frozenHeight";
var textWrapRefresh = "textWrapRefresh";
var recordAdded = "recordAdded";
var cancelBegin = "cancel-Begin";
var editNextValCell = "editNextValCell";
var hierarchyPrint = "hierarchyprint";
var expandChildGrid = "expandchildgrid";
var printGridInit = "printGrid-Init";
var exportRowDataBound = "export-RowDataBound";
var exportDataBound = "export-DataBound";
var rowPositionChanged = "row-position-changed";
var columnChooserOpened = "columnChooserOpened";
var batchForm = "batchedit-form";
var beforeStartEdit = "edit-form";
var beforeBatchCancel = "before-batch-cancel";
var batchEditFormRendered = "batcheditform-rendered";
var partialRefresh = "partial-refresh";
var beforeCustomFilterOpen = "beforeCustomFilterOpen";
var selectVirtualRow = "select-virtual-Row";
var columnsPrepared = "columns-prepared";
var cBoxFltrBegin = "cbox-filter-begin";
var cBoxFltrComplete = "cbox-filter-complete";
var fltrPrevent = "filter-Prevent";
var beforeFltrcMenuOpen = "before-filter-cmenu-open";
var valCustomPlacement = "validation-custom-placement";
var filterCboxValue = "filter-cbox-value";
var componentRendered = "component-rendered";
var restoreFocus = "restore-Focus";
var detailStateChange = "detail-state-change";
var detailIndentCellInfo = "detail-indentcell-info";
var virtaulKeyHandler = "virtaul-key-handler";
var virtaulCellFocus = "virtaul-cell-focus";
var virtualScrollEditActionBegin = "virtual-scroll-edit-action-begin";
var virtualScrollEditSuccess = "virtual-scroll-edit-success";
var virtualScrollEditCancel = "virtual-scroll-edit-cancel";
var virtualScrollEdit = "virtual-scroll-edit";
var refreshVirtualCache = "refresh-virtual-cache";
var editReset = "edit-reset";
var virtualScrollAddActionBegin = "virtual-scroll-add-action-begin";
var getVirtualData = "get-virtual-data";
var refreshInfiniteModeBlocks = "refresh-infinite-mode-blocks";
var resetInfiniteBlocks = "reset-infinite-blocks";
var infiniteScrollHandler = "infinite-scroll-handler";
var infinitePageQuery = "infinite-page-query";
var infiniteShowHide = "infinite-show-hide";
var appendInfiniteContent = "append-infinite-content";
var removeInfiniteRows = "remove-infinite-rows";
var setInfiniteCache = "set-infinite-cache";
var infiniteEditHandler = "infinite-edit-handler";
var initialCollapse = "initial-collapse";
var getAggregateQuery = "get-aggregate-query";
var closeFilterDialog = "close-filter-dialog";
var columnChooserCancelBtnClick = "columnChooserCancelBtnClick";
var getFilterBarOperator = "get-filterbar-operator";
var resetColumns = "reset-columns";
var pdfAggregateQueryCellInfo = "pdfAggregateQueryCellInfo";
var excelAggregateQueryCellInfo = "excelAggregateQueryCellInfo";
var setGroupCache = "group-cache";
var lazyLoadScrollHandler = "lazy-load-scroll-handler";
var groupCollapse = "group-collapse";
var beforeCheckboxRenderer = "beforeCheckboxRenderer";
var refreshHandlers = "refreshResizeHandlers";
var refreshFrozenColumns = "refresh-frozen-columns";
var setReorderDestinationElement = "set-reorder-destination-element";
var refreshVirtualFrozenHeight = "refresh-virtual-frozen-height";
var setFreezeSelection = "set-freeze-selection";
var setInfiniteFrozenHeight = "set-infinite-frozen-height";
var setInfiniteColFrozenHeight = "set-infinite-col-frozen-height";
var beforeRefreshOnDataChange = "before-refresh-on-data-change";
var immutableBatchCancel = "immutable-batch-cancel";
var refreshVirtualFrozenRows = "refresh-virtual-frozenrows";
var checkScrollReset = "check-scroll-reset";
var refreshFrozenHeight = "refresh-frozen-height";
var setHeightToFrozenElement = "set-height-to-frozen-element";
var preventFrozenScrollRefresh = "prevent-frozen-scroll-refresh";
var nextCellIndex = "next-cell-index";
var refreshInfiniteCurrentViewData = "refresh-infinite-current-view-data";
var infiniteCrudCancel = "infinite-crud-cancel";
var filterDialogClose = "filter-dialog-close";
var refreshCustomFilterOkBtn = "refresh-cutsom-filter-ok-button";
var refreshCustomFilterClearBtn = "refresh-cutsom-filter-clear-button";
var renderResponsiveCmenu = "render-responsive-cmenu";
var filterCmenuSelect = "filter-cmenu-select";
var customFilterClose = "custom-filter-close";
var setFullScreenDialog = "set-fullscreen-dialog";
var refreshExpandandCollapse = "refresh-Expand-and-Collapse";
var rowModeChange = "row-mode-change";
var enterKeyHandler = "enter-key-handler";
var refreshVirtualMaxPage = "refresh-virtual-max-page";
var setVirtualPageQuery = "set-virtual-page-query";
var selectRowOnContextOpen = "select-row-on-context-open";
var pagerRefresh = "pager-refresh";
var closeInline = "closeinline";
var closeBatch = "closebatch";
var closeEdit = "close-edit";
var resetVirtualFocus = "reset-virtual-focus";
var afterContentRender = "after-content-renderer";
var refreshVirtualEditFormCells = "refresh-virtual-editform-cells";
var scrollToEdit = "scroll-to-edit";
var beforeCheckboxRendererQuery = "before-checkbox-renderer-query";
var createVirtualValidationForm = "create-virtual-validation-form";
var validateVirtualForm = "validate-virtual-form";
var destroyChildGrid = "destroy-child-grid";
var stickyScrollComplete = "sticky-scroll-complete";
var captionActionComplete = "infinite-group-collapse";
var refreshInfinitePersistSelection = "refresh-infinite-persist-selection";
var refreshInfiniteEditrowindex = "refresh-infinite-editrowindex";
var afterFilterColumnMenuClose = "after-filter-column-menu-close";
var beforeCheckboxfilterRenderer = "beforeCheckboxfilterRenderer";
var commandColumnDestroy = "commandColumnDestroy";
var batchCnfrmDlgCancel = "cancelcnfrmDlg";
var refreshVirtualLazyLoadCache = "refresh-Virtual-LazyLoad-Cache";
var refreshFrozenPosition = "refresh-Frozen-Position";
var refreshResizePosition = "refresh-Resize-Position";
var refreshSplitFrozenColumn = "refresh-Split-Frozen-Column";
var renderResponsiveChangeAction = "render-Responsive-Change-Action";
var renderResponsiveColumnChooserDiv = "render-Responsive-Column-Chooser-Div";
var showAddNewRowFocus = "show-Add-New-Row-Focus";
var infiniteScrollComplete = "infinitescroll-complete";
var lastRowCellBorderUpdated = "last-rowcell-border-updated";
var columnChooserSearch = "columnChooserSearch";
var columnChooserClose = "columnChooserClose";
var columnChooserUpdate = "columnChooserUpdate";
var destroyEditForm = "destroy-edit-form";
var beforeDetailTemplateDetach = "beforeDetailTemplateDetach";
var detachDetailTemplate = "detach-detail-template";

// node_modules/@syncfusion/ej2-grids/src/grid/base/enum.js
var CellType;
(function(CellType2) {
  CellType2[CellType2["Data"] = 0] = "Data";
  CellType2[CellType2["Header"] = 1] = "Header";
  CellType2[CellType2["Summary"] = 2] = "Summary";
  CellType2[CellType2["GroupSummary"] = 3] = "GroupSummary";
  CellType2[CellType2["CaptionSummary"] = 4] = "CaptionSummary";
  CellType2[CellType2["Filter"] = 5] = "Filter";
  CellType2[CellType2["Indent"] = 6] = "Indent";
  CellType2[CellType2["GroupCaption"] = 7] = "GroupCaption";
  CellType2[CellType2["GroupCaptionEmpty"] = 8] = "GroupCaptionEmpty";
  CellType2[CellType2["Expand"] = 9] = "Expand";
  CellType2[CellType2["HeaderIndent"] = 10] = "HeaderIndent";
  CellType2[CellType2["StackedHeader"] = 11] = "StackedHeader";
  CellType2[CellType2["DetailHeader"] = 12] = "DetailHeader";
  CellType2[CellType2["DetailExpand"] = 13] = "DetailExpand";
  CellType2[CellType2["CommandColumn"] = 14] = "CommandColumn";
  CellType2[CellType2["DetailFooterIntent"] = 15] = "DetailFooterIntent";
  CellType2[CellType2["RowDragIcon"] = 16] = "RowDragIcon";
  CellType2[CellType2["RowDragHIcon"] = 17] = "RowDragHIcon";
})(CellType || (CellType = {}));
var RenderType;
(function(RenderType2) {
  RenderType2[RenderType2["Header"] = 0] = "Header";
  RenderType2[RenderType2["Content"] = 1] = "Content";
  RenderType2[RenderType2["Summary"] = 2] = "Summary";
})(RenderType || (RenderType = {}));
var ToolbarItem;
(function(ToolbarItem2) {
  ToolbarItem2[ToolbarItem2["Add"] = 0] = "Add";
  ToolbarItem2[ToolbarItem2["Edit"] = 1] = "Edit";
  ToolbarItem2[ToolbarItem2["Update"] = 2] = "Update";
  ToolbarItem2[ToolbarItem2["Delete"] = 3] = "Delete";
  ToolbarItem2[ToolbarItem2["Cancel"] = 4] = "Cancel";
  ToolbarItem2[ToolbarItem2["Print"] = 5] = "Print";
  ToolbarItem2[ToolbarItem2["Search"] = 6] = "Search";
  ToolbarItem2[ToolbarItem2["ColumnChooser"] = 7] = "ColumnChooser";
  ToolbarItem2[ToolbarItem2["PdfExport"] = 8] = "PdfExport";
  ToolbarItem2[ToolbarItem2["ExcelExport"] = 9] = "ExcelExport";
  ToolbarItem2[ToolbarItem2["CsvExport"] = 10] = "CsvExport";
  ToolbarItem2[ToolbarItem2["WordExport"] = 11] = "WordExport";
})(ToolbarItem || (ToolbarItem = {}));
var ResponsiveDialogAction;
(function(ResponsiveDialogAction2) {
  ResponsiveDialogAction2[ResponsiveDialogAction2["isEdit"] = 0] = "isEdit";
  ResponsiveDialogAction2[ResponsiveDialogAction2["isAdd"] = 1] = "isAdd";
  ResponsiveDialogAction2[ResponsiveDialogAction2["isSort"] = 2] = "isSort";
  ResponsiveDialogAction2[ResponsiveDialogAction2["isFilter"] = 3] = "isFilter";
  ResponsiveDialogAction2[ResponsiveDialogAction2["isColMenu"] = 4] = "isColMenu";
  ResponsiveDialogAction2[ResponsiveDialogAction2["isColumnChooser"] = 5] = "isColumnChooser";
})(ResponsiveDialogAction || (ResponsiveDialogAction = {}));
var ResponsiveToolbarAction;
(function(ResponsiveToolbarAction2) {
  ResponsiveToolbarAction2[ResponsiveToolbarAction2["isInitial"] = 0] = "isInitial";
  ResponsiveToolbarAction2[ResponsiveToolbarAction2["isSearch"] = 1] = "isSearch";
})(ResponsiveToolbarAction || (ResponsiveToolbarAction = {}));

// node_modules/@syncfusion/ej2-grids/src/grid/common/checkbox-filter-base.js
var CheckBoxFilterBase = (
  /** @class */
  function() {
    function CheckBoxFilterBase2(parent) {
      this.searchInputArgs = null;
      this.isExecuteLocal = false;
      this.queryFilteredColumn = [];
      this.existingPredicate = {};
      this.foreignKeyQuery = new Query();
      this.filterState = true;
      this.values = {};
      this.renderEmpty = false;
      this.isCheckboxFilterTemplate = false;
      this.infiniteRenderMod = false;
      this.infiniteInitialLoad = false;
      this.infiniteSearchValChange = false;
      this.infinitePermenantLocalData = [];
      this.infiniteQueryExecutionPending = false;
      this.infiniteSkipCnt = 0;
      this.infiniteScrollAppendDiff = 0;
      this.prevInfiniteScrollDirection = "";
      this.infiniteLoadedElem = [];
      this.infiniteDataCount = 0;
      this.infiniteLocalSelectAll = true;
      this.localInfiniteSelectAllClicked = false;
      this.localInfiniteSelectionInteracted = false;
      this.infiniteManualSelectMaintainPred = [];
      this.parent = parent;
      this.id = this.parent.element.id;
      this.valueFormatter = new ValueFormatter(this.parent.locale);
      this.cBoxTrue = createCheckBox(this.parent.createElement, false, {
        checked: true,
        label: " "
      });
      this.cBoxFalse = createCheckBox(this.parent.createElement, false, {
        checked: false,
        label: " "
      });
      this.cBoxTrue.insertBefore(this.parent.createElement("input", {
        className: "e-chk-hidden",
        attrs: {
          type: "checkbox"
        }
      }), this.cBoxTrue.firstChild);
      this.cBoxFalse.insertBefore(this.parent.createElement("input", {
        className: "e-chk-hidden",
        attrs: {
          "type": "checkbox"
        }
      }), this.cBoxFalse.firstChild);
      this.cBoxFalse.querySelector(".e-frame").classList.add("e-uncheck");
      if (this.parent.enableRtl) {
        addClass([this.cBoxTrue, this.cBoxFalse], ["e-rtl"]);
      }
      if (this.parent.cssClass) {
        if (this.parent.cssClass.indexOf(" ") !== -1) {
          addClass([this.cBoxTrue, this.cBoxFalse], this.parent.cssClass.split(" "));
        } else {
          addClass([this.cBoxTrue, this.cBoxFalse], [this.parent.cssClass]);
        }
      }
    }
    CheckBoxFilterBase2.prototype.destroy = function() {
      this.closeDialog();
    };
    CheckBoxFilterBase2.prototype.wireEvents = function() {
      EventHandler.add(this.dlg, "click", this.clickHandler, this);
      EventHandler.add(this.dlg, "keyup", this.keyupHandler, this);
      this.searchHandler = debounce(this.searchBoxKeyUp, 200);
      var elem = this.dialogObj.element.querySelector(".e-searchinput");
      if (elem) {
        EventHandler.add(elem, "keyup", this.searchHandler, this);
        EventHandler.add(elem, "input", this.searchHandler, this);
      }
    };
    CheckBoxFilterBase2.prototype.unWireEvents = function() {
      EventHandler.remove(this.dlg, "click", this.clickHandler);
      EventHandler.remove(this.dlg, "keyup", this.keyupHandler);
      var elem = this.dialogObj.element.querySelector(".e-searchinput");
      if (elem) {
        EventHandler.remove(elem, "keyup", this.searchHandler);
        EventHandler.remove(elem, "input", this.searchHandler);
      }
    };
    CheckBoxFilterBase2.prototype.foreignKeyFilter = function(args, fColl, mPredicate) {
      var _this = this;
      var fPredicate = {};
      var filterCollection = [];
      var query = this.foreignKeyQuery.clone();
      this.options.column.dataSource.executeQuery(query.where(mPredicate)).then(function(e) {
        _this.options.column.columnData = e.result;
        _this.parent.notify(generateQuery, {
          predicate: fPredicate,
          column: _this.options.column
        });
        args.ejpredicate = fPredicate.predicate.predicates;
        var fpred = fPredicate.predicate.predicates;
        for (var i = 0; i < fpred.length; i++) {
          filterCollection.push({
            field: fpred[parseInt(i.toString(), 10)].field,
            predicate: "or",
            matchCase: fpred[parseInt(i.toString(), 10)].ignoreCase,
            ignoreAccent: fpred[parseInt(i.toString(), 10)].ignoreAccent,
            operator: fpred[parseInt(i.toString(), 10)].operator,
            value: fpred[parseInt(i.toString(), 10)].value,
            type: _this.options.type
          });
        }
        args.filterCollection = filterCollection.length ? filterCollection : fColl.filter(function(col) {
          return col.field = _this.options.field;
        });
        _this.options.handler(args);
      });
    };
    CheckBoxFilterBase2.prototype.searchBoxClick = function(e) {
      var target = e.target;
      if (target.classList.contains("e-searchclear")) {
        this.sInput.value = target.classList.contains("e-chkcancel-icon") ? "" : this.sInput.value;
        if (this.isCheckboxFilterTemplate) {
          this.parent.notify("refreshCheckbox", {
            event: e
          });
        } else {
          this.refreshCheckboxes();
        }
        this.updateSearchIcon();
        this.sInput.focus();
      }
    };
    CheckBoxFilterBase2.prototype.searchBoxKeyUp = function(e) {
      if (isNullOrUndefined(this.sInput)) {
        return;
      }
      if (isNullOrUndefined(e) || e.key !== "ArrowUp" && e.key !== "ArrowDown" && e.key !== "Tab" && !(e.key === "Tab" && e.shiftKey)) {
        if (!isNullOrUndefined(this.parent.loadingIndicator) && this.parent.loadingIndicator.indicatorType === "Shimmer") {
          this.parent.showMaskRow(void 0, this.dialogObj.element);
        }
        if (this.isCheckboxFilterTemplate) {
          this.parent.notify("refreshCheckbox", {
            event: e
          });
        } else {
          this.refreshCheckboxes();
        }
        this.updateSearchIcon();
      }
    };
    CheckBoxFilterBase2.prototype.updateSearchIcon = function() {
      if (this.sInput.value.length) {
        classList(this.sIcon, ["e-chkcancel-icon"], ["e-search-icon"]);
        if (!isNullOrUndefined(document.body.querySelector(".e-chkcancel-icon"))) {
          document.body.querySelector(".e-chkcancel-icon").setAttribute("title", this.localeObj.getConstant("Clear"));
        }
      } else {
        classList(this.sIcon, ["e-search-icon"], ["e-chkcancel-icon"]);
        if (!isNullOrUndefined(document.body.querySelector(".e-searchclear.e-search-icon"))) {
          document.body.querySelector(".e-searchclear.e-search-icon").setAttribute("title", this.localeObj.getConstant("Search"));
        }
      }
    };
    CheckBoxFilterBase2.prototype.getLocalizedLabel = function(key) {
      return this.localeObj.getConstant(key);
    };
    CheckBoxFilterBase2.prototype.updateDataSource = function() {
      var dataSource = this.options.dataSource;
      var str = "object";
      if (!(dataSource instanceof DataManager)) {
        for (var i = 0; i < dataSource.length; i++) {
          if (typeof dataSource !== str) {
            var obj = {};
            obj[this.options.field] = dataSource[parseInt(i.toString(), 10)];
            dataSource[parseInt(i.toString(), 10)] = obj;
          }
        }
      }
    };
    CheckBoxFilterBase2.prototype.updateModel = function(options) {
      this.options = options;
      this.existingPredicate = options.actualPredicate || {};
      this.options.dataSource = options.dataSource;
      this.options.dataManager = options.dataManager ? options.dataManager : options.dataSource;
      this.updateDataSource();
      this.options.type = options.type;
      this.options.format = options.format || "";
      this.options.ignoreAccent = options.ignoreAccent || false;
      this.options.filteredColumns = options.filteredColumns || this.parent.filterSettings.columns;
      this.options.query = options.query || new Query();
      this.options.allowCaseSensitive = options.allowCaseSensitive || false;
      this.options.uid = options.column.uid;
      this.options.disableHtmlEncode = options.column.disableHtmlEncode || false;
      this.values = {};
      this.localeObj = options.localeObj;
      this.isFiltered = options.filteredColumns.length;
      this.infiniteRenderMod = this.parent.filterSettings && this.parent.filterSettings.enableInfiniteScrolling ? true : false;
      this.infiniteUnloadParentExistPred = this.infiniteRenderMod && this.existingPredicate[this.options.column.field] ? this.existingPredicate[this.options.column.field].slice() : [];
    };
    CheckBoxFilterBase2.prototype.getAndSetChkElem = function(options) {
      this.dlg = this.parent.createElement("div", {
        id: this.id + this.options.type + "_excelDlg",
        attrs: {
          uid: this.options.column.uid
        },
        className: "e-checkboxfilter e-filter-popup"
      });
      this.sBox = this.parent.createElement("div", {
        className: "e-searchcontainer"
      });
      if (!options.hideSearchbox) {
        this.sInput = this.parent.createElement("input", {
          id: this.id + "_SearchBox",
          className: "e-searchinput"
        });
        this.sIcon = this.parent.createElement("span", {
          className: "e-searchclear e-search-icon e-icons e-input-group-icon",
          attrs: {
            type: "text",
            title: this.getLocalizedLabel("Search")
          }
        });
        this.searchBox = this.parent.createElement("span", {
          className: "e-searchbox e-fields"
        });
        this.searchBox.appendChild(this.sInput);
        this.sBox.appendChild(this.searchBox);
        this.searchInputArgs = {
          element: this.sInput,
          floatLabelType: "Never",
          properties: {
            placeholder: this.getLocalizedLabel("Search"),
            cssClass: this.parent.cssClass
          }
        };
        Input.createInput(this.searchInputArgs, this.parent.createElement);
        this.searchBox.querySelector(".e-input-group").appendChild(this.sIcon);
      }
      this.spinner = this.parent.createElement("div", {
        className: "e-spinner"
      });
      this.cBox = this.parent.createElement("div", {
        id: this.id + this.options.type + "_CheckBoxList",
        className: "e-checkboxlist e-fields"
      });
      this.spinner.appendChild(this.cBox);
      this.sBox.appendChild(this.spinner);
      return this.sBox;
    };
    CheckBoxFilterBase2.prototype.showDialog = function(options) {
      var args = {
        requestType: filterBeforeOpen,
        columnName: this.options.field,
        columnType: this.options.type,
        cancel: false
      };
      var filterModel = "filterModel";
      args["" + filterModel] = this;
      this.parent.notify(cBoxFltrBegin, args);
      if (args.cancel) {
        options.cancel = args.cancel;
        return;
      }
      this.dialogObj = new Dialog({
        visible: false,
        content: this.sBox,
        close: this.closeDialog.bind(this),
        enableRtl: this.parent.enableRtl,
        width: !isNullOrUndefined(parentsUntil(options.target, "e-bigger")) || this.parent.element.classList.contains("e-device") ? 260 : 255,
        target: this.parent.element,
        animationSettings: {
          effect: "None"
        },
        buttons: [{
          click: this.btnClick.bind(this),
          buttonModel: {
            content: this.getLocalizedLabel(this.isExcel ? "OKButton" : "FilterButton"),
            cssClass: this.parent.cssClass ? "e-primary " + this.parent.cssClass : "e-primary",
            isPrimary: true
          }
        }, {
          click: this.btnClick.bind(this),
          buttonModel: {
            cssClass: this.parent.cssClass ? "e-flat " + this.parent.cssClass : "e-flat",
            content: this.getLocalizedLabel(this.isExcel ? "CancelButton" : "ClearButton")
          }
        }],
        created: this.dialogCreated.bind(this),
        open: this.dialogOpen.bind(this),
        cssClass: this.parent.cssClass ? this.parent.cssClass : ""
      });
      var isStringTemplate = "isStringTemplate";
      this.dialogObj["" + isStringTemplate] = true;
      this.renderResponsiveFilter(options);
      var dialogLabel = this.parent.filterSettings && this.parent.filterSettings.type === "CheckBox" ? this.getLocalizedLabel("CheckBoxFilterDialogARIA") : this.getLocalizedLabel("ExcelFilterDialogARIA");
      this.dlg.setAttribute("aria-label", dialogLabel);
      if (options.isResponsiveFilter) {
        var responsiveCnt = document.querySelector(".e-responsive-dialog > .e-dlg-content > .e-mainfilterdiv");
        responsiveCnt.appendChild(this.dlg);
      } else {
        this.parent.element.appendChild(this.dlg);
      }
      this.dialogObj.appendTo(this.dlg);
      this.dialogObj.element.style.maxHeight = options.isResponsiveFilter ? "none" : this.options.height + "px";
      this.dialogObj.show();
      if (this.parent && this.parent.filterSettings && (this.parent.filterSettings.type === "CheckBox" || this.options.column && this.options.column.filter && this.options.column.filter.type === "CheckBox") && this.parent.getContent().firstElementChild.offsetHeight < this.dialogObj.element.offsetHeight && !parentsUntil(this.parent.element, "e-gantt-dialog")) {
        resetDialogAppend(this.parent, this.dialogObj);
      }
      var content2 = this.dialogObj.element.querySelector(".e-dlg-content");
      content2.appendChild(this.sBox);
      this.wireEvents();
      if (!this.parent.enableAdaptiveUI) {
        if (!isNullOrUndefined(this.parent.loadingIndicator) && this.parent.loadingIndicator.indicatorType === "Shimmer" && !this.infiniteRenderMod) {
          this.parent.showMaskRow(void 0, this.dialogObj.element);
        }
        if (this.infiniteRenderMod && this.parent.filterSettings && this.parent.filterSettings.loadingIndicator === "Shimmer") {
          this.showMask();
        }
      } else {
        if (this.infiniteRenderMod && this.parent.filterSettings && this.parent.filterSettings.loadingIndicator === "Shimmer") {
          this.getAllData();
          return;
        }
        if (this.infiniteRenderMod) {
          this.cBox.style.marginTop = getListHeight(this.cBox) + "px";
        }
      }
      if (!(this.infiniteRenderMod && this.parent.filterSettings && this.parent.filterSettings.loadingIndicator === "Shimmer")) {
        createSpinner({
          target: this.spinner,
          cssClass: this.parent.cssClass ? this.parent.cssClass : null
        }, this.parent.createElement);
        showSpinner(this.spinner);
      }
      this.getAllData();
    };
    CheckBoxFilterBase2.prototype.renderResponsiveFilter = function(options) {
      if (options.isResponsiveFilter) {
        this.dialogObj.buttons = [{}];
        this.dialogObj.position = {
          X: "",
          Y: ""
        };
        this.dialogObj.target = document.querySelector(".e-resfilter > .e-dlg-content > .e-mainfilterdiv");
        this.dialogObj.width = "100%";
      }
    };
    CheckBoxFilterBase2.prototype.dialogCreated = function(e) {
      if (this.options.isResponsiveFilter) {
        this.dialogObj.element.style.left = "0px";
      } else {
        if (!Browser.isDevice) {
          getFilterMenuPostion(this.options.target, this.dialogObj);
        } else {
          this.dialogObj.position = {
            X: "center",
            Y: "center"
          };
        }
      }
      if (this.options.column.showColumnMenu) {
        this.parent.notify(filterDialogCreated, e);
      }
    };
    CheckBoxFilterBase2.prototype.openDialog = function(options) {
      this.updateModel(options);
      this.getAndSetChkElem(options);
      this.showDialog(options);
    };
    CheckBoxFilterBase2.prototype.closeDialog = function() {
      if (this.infiniteRenderMod && this.infinitePermenantLocalData.length && !this.options.isRemote) {
        this.options.dataSource.dataSource.json = this.infinitePermenantLocalData;
      }
      if (this.dialogObj && !this.dialogObj.isDestroyed) {
        this.isBlanks = false;
        var filterTemplateCol = this.options.columns.filter(function(col) {
          return col.getFilterItemTemplate();
        });
        var registeredTemplate = this.parent.registeredTemplate;
        if (filterTemplateCol.length && !isNullOrUndefined(registeredTemplate) && registeredTemplate.filterItemTemplate) {
          this.parent.destroyTemplate(["filterItemTemplate"]);
        }
        if ((this.parent.isReact || this.parent.isVue) && this.parent.destroyTemplate !== void 0) {
          clearReactVueTemplates(this.parent, ["filterItemTemplate"]);
        }
        this.parent.notify(filterMenuClose, {
          field: this.options.field
        });
        this.unWireEvents();
        if (this.searchInputArgs && this.searchInputArgs.element && this.searchInputArgs.element.parentElement) {
          Input.destroy(this.searchInputArgs);
          remove(this.searchInputArgs.element);
        }
        this.searchInputArgs = null;
        this.sInput = null;
        if (this.parent.isReact && this.options.column.filter && typeof this.options.column.filter.itemTemplate !== "string" && (this.options.column.filter.type === "CheckBox" || this.options.column.filter.type === "Excel")) {
          this.dialogObj.element.querySelector(".e-dlg-content").innerHTML = "";
        }
        this.dialogObj.destroy();
        if (this.dialogObj["dlgClosedBy"] === "escape") {
          this.parent.isColumnMenuFilterClosing = true;
        }
        if (this.dlg && this.dlg.parentElement) {
          remove(this.dlg);
          var gridPopup = document.getElementById(this.parent.element.id + "_e-popup");
          if (!isNullOrUndefined(gridPopup)) {
            remove(gridPopup);
            gridPopup = null;
          }
        }
        this.dlg = null;
        this.parent.notify(filterDialogClose, {});
      }
    };
    CheckBoxFilterBase2.prototype.clearFilter = function(col) {
      var args = {
        instance: this,
        handler: this.clearFilter,
        cancel: false
      };
      this.parent.notify(fltrPrevent, args);
      if (args.cancel) {
        return;
      }
      this.options.handler({
        action: "clear-filter",
        field: col ? col.field : this.options.field
      });
    };
    CheckBoxFilterBase2.prototype.btnClick = function(e) {
      if (this.filterState) {
        if (e.target.tagName.toLowerCase() === "input" && e.target.classList.contains("e-searchinput") || e.keyCode === 13) {
          if (!this.isCheckboxFilterTemplate) {
            this.fltrBtnHandler();
          }
        } else {
          var text = e.target.firstChild.textContent.toLowerCase();
          if (this.getLocalizedLabel(this.isExcel ? "OKButton" : "FilterButton").toLowerCase() === text) {
            if (!this.isCheckboxFilterTemplate) {
              this.fltrBtnHandler();
            }
          } else if (this.getLocalizedLabel("ClearButton").toLowerCase() === text) {
            this.clearFilter();
          }
        }
        this.closeDialog();
      } else if (e.target && e.target.firstChild && e.target.firstChild.textContent.toLowerCase() === this.getLocalizedLabel("CancelButton").toLowerCase()) {
        this.closeDialog();
      } else if (!(e.target.tagName.toLowerCase() === "input")) {
        this.clearFilter();
        this.closeDialog();
      }
      if (this.options.column.showColumnMenu) {
        this.parent.notify(afterFilterColumnMenuClose, {});
      }
      if (!isNullOrUndefined(this.parent.focusModule)) {
        this.parent.focusModule.filterfocus();
      }
    };
    CheckBoxFilterBase2.prototype.fltrBtnHandler = function() {
      var _this = this;
      if (this.infiniteRenderMod) {
        this.cBox.innerHTML = "";
        appendChildren(this.cBox, this.infiniteLoadedElem.slice());
      }
      var checked = [].slice.call(this.cBox.querySelectorAll(".e-check:not(.e-selectall):not(.e-add-current)"));
      var check = checked;
      var optr = "equal";
      var ddlValue = this.dialogObj.element.querySelector(".e-dropdownlist");
      if (ddlValue) {
        this.options.operator = optr = ddlValue.ej2_instances[0].value;
      }
      this.isMenuNotEqual = this.options.operator === "notequal";
      var searchInput;
      if (!this.options.hideSearchbox) {
        searchInput = this.searchBox.querySelector(".e-searchinput");
      }
      var caseSen = this.options.allowCaseSensitive;
      var defaults = {
        field: this.options.field,
        predicate: this.isMenuNotEqual ? "and" : "or",
        uid: this.options.uid,
        operator: optr,
        type: this.options.type,
        matchCase: caseSen,
        ignoreAccent: this.options.ignoreAccent
      };
      var isNotEqual = this.itemsCnt !== checked.length && this.itemsCnt - checked.length < checked.length;
      if (isNotEqual && searchInput && searchInput.value === "") {
        optr = this.isMenuNotEqual ? "equal" : "notequal";
        checked = [].slice.call(this.cBox.querySelectorAll(".e-uncheck:not(.e-selectall)"));
        defaults.predicate = this.isMenuNotEqual ? "or" : "and";
        defaults.operator = optr;
      }
      var val;
      var length;
      var coll = [];
      if (checked.length !== this.itemsCnt || searchInput && searchInput.value && searchInput.value !== "" || this.infiniteRenderMod) {
        if (!this.infiniteRenderMod) {
          coll = this.complexQueryPredicate(checked, defaults, isNotEqual);
          if (isNullOrUndefined(coll)) {
            return;
          }
          coll = this.filterPreventColumns ? this.filterPreventColumns : coll;
        } else if (this.infiniteRenderMod && (!this.infiniteSearchPred || this.infiniteSearchPred && !this.infiniteSearchPred.isComplex)) {
          this.infiniteFltrBtnHandler(coll);
        } else {
          if (this.infiniteSearchPred.isComplex) {
            coll = this.complexQueryPredicate(checked, defaults, isNotEqual);
          }
        }
        if ((this.options.type === "date" || this.options.type === "dateonly" || this.options.type === "datetime") && check.length) {
          length = check.length - 1;
          val = this.values[parentsUntil(check[parseInt(length.toString(), 10)], "e-ftrchk").getAttribute("uid")];
          if (isNullOrUndefined(val) && isNotEqual) {
            coll.push({
              field: defaults.field,
              matchCase: defaults.matchCase,
              operator: "equal",
              predicate: "or",
              value: null
            });
          }
        }
        var addCurrSelection = this.infiniteRenderMod ? this.sBox.querySelector(".e-add-current") : this.cBox.querySelector(".e-add-current");
        if (addCurrSelection && addCurrSelection.classList.contains("e-check")) {
          var existingPredicate_1 = this.existingPredicate[this.options.field];
          if (existingPredicate_1) {
            var _loop_1 = function(j2) {
              if (!coll.some(function(data) {
                return data.value === existingPredicate_1[parseInt(j2.toString(), 10)].value;
              })) {
                coll.push(existingPredicate_1[parseInt(j2.toString(), 10)]);
              }
            };
            for (var j = 0; j < existingPredicate_1.length; j++) {
              _loop_1(j);
            }
          } else {
            return;
          }
        }
        if (!this.infiniteRenderMod) {
          this.initiateFilter(coll);
        } else if (coll.length) {
          this.initiateFilter(coll);
        } else if (this.sBox.querySelector(".e-selectall").classList.contains("e-check") && !coll.length) {
          var isClearFilter = this.options.filteredColumns.some(function(value) {
            return _this.options.field === value.field;
          });
          if (isClearFilter) {
            this.clearFilter();
          }
        }
      } else {
        var isClearFilter = this.options.filteredColumns.some(function(value) {
          return _this.options.field === value.field;
        });
        if (isClearFilter) {
          this.clearFilter();
        }
      }
    };
    CheckBoxFilterBase2.prototype.complexQueryPredicate = function(checkBoxChecked, defaults, isNotEqual) {
      var value;
      var fObj;
      var coll = [];
      for (var i = 0; i < checkBoxChecked.length; i++) {
        value = this.values[parentsUntil(checkBoxChecked[parseInt(i.toString(), 10)], "e-ftrchk").getAttribute("uid")];
        fObj = extend({}, {
          value
        }, defaults);
        if (value && !value.toString().length) {
          fObj.operator = isNotEqual ? "notequal" : "equal";
        }
        if (value === "" || isNullOrUndefined(value)) {
          coll = coll.concat(CheckBoxFilterBase2.generateNullValuePredicates(defaults));
        } else {
          coll.push(fObj);
        }
      }
      var filterColumns = this.filterPreventColumns && this.filterPreventColumns.length ? this.filterPreventColumns[0] : fObj;
      if (filterColumns && !this.notifyFilterPrevEvent(filterColumns)) {
        this.filterPreventColumns = coll;
        return null;
      } else {
        return coll;
      }
    };
    CheckBoxFilterBase2.prototype.infiniteFltrBtnHandler = function(coll) {
      var value;
      if (this.infiniteManualSelectMaintainPred.length) {
        for (var i = 0; i < this.infiniteManualSelectMaintainPred.length; i++) {
          var pred = this.infiniteManualSelectMaintainPred[i];
          value = pred.value + "";
          if (value === "" || isNullOrUndefined(value)) {
            var dummyDefaults = {
              predicate: pred.predicate,
              field: pred.field,
              type: pred.type,
              uid: pred.uid,
              operator: pred.operator,
              matchCase: pred.matchCase,
              ignoreAccent: pred.ignoreAccent
            };
            coll.push.apply(coll, CheckBoxFilterBase2.generateNullValuePredicates(dummyDefaults));
          } else {
            coll.push(this.infiniteManualSelectMaintainPred[i]);
          }
          this.notifyFilterPrevEvent(this.infiniteManualSelectMaintainPred[i]);
        }
      }
      if (!this.localInfiniteSelectAllClicked && this.sInput.value === "" && !(!this.options.parentCurrentViewDataCount && coll.length)) {
        for (var i = 0; i < this.infiniteUnloadParentExistPred.length; i++) {
          coll.unshift(this.infiniteUnloadParentExistPred[i]);
          this.notifyFilterPrevEvent(this.existingPredicate[this.options.field][i]);
        }
      }
      if (this.sInput.value !== "" && (!this.localInfiniteSelectAllClicked || this.infiniteLocalSelectAll)) {
        this.infiniteSearchPred["predicate"] = "or";
        coll.unshift(this.infiniteSearchPred);
        this.notifyFilterPrevEvent(this.infiniteSearchPred);
      }
    };
    CheckBoxFilterBase2.prototype.notifyFilterPrevEvent = function(predicate) {
      var args = {
        instance: this,
        handler: this.fltrBtnHandler,
        arg1: predicate.field,
        arg2: predicate.predicate,
        arg3: predicate.operator,
        arg4: predicate.matchCase,
        arg5: predicate.ignoreAccent,
        arg6: predicate.value,
        cancel: false
      };
      this.parent.notify(fltrPrevent, args);
      if (args.cancel) {
        return false;
      }
      return true;
    };
    CheckBoxFilterBase2.generateNullValuePredicates = function(defaults) {
      var coll = [];
      if (defaults.type === "string") {
        coll.push({
          field: defaults.field,
          ignoreAccent: defaults.ignoreAccent,
          matchCase: defaults.matchCase,
          operator: defaults.operator,
          predicate: defaults.predicate,
          value: ""
        });
      }
      coll.push({
        field: defaults.field,
        matchCase: defaults.matchCase,
        operator: defaults.operator,
        predicate: defaults.predicate,
        value: null
      });
      coll.push({
        field: defaults.field,
        matchCase: defaults.matchCase,
        operator: defaults.operator,
        predicate: defaults.predicate,
        value: void 0
      });
      return coll;
    };
    CheckBoxFilterBase2.prototype.initiateFilter = function(fColl) {
      var firstVal = fColl[0];
      var predicate;
      if (!isNullOrUndefined(firstVal)) {
        predicate = firstVal.ejpredicate ? firstVal.ejpredicate : new Predicate(firstVal.field, firstVal.operator, firstVal.value, !firstVal.matchCase, firstVal.ignoreAccent);
        for (var j = 1; j < fColl.length; j++) {
          predicate = fColl[parseInt(j.toString(), 10)].ejpredicate !== void 0 ? predicate[fColl[parseInt(j.toString(), 10)].predicate](fColl[parseInt(j.toString(), 10)].ejpredicate) : predicate[fColl[parseInt(j.toString(), 10)].predicate](fColl[parseInt(j.toString(), 10)].field, fColl[parseInt(j.toString(), 10)].operator, fColl[parseInt(j.toString(), 10)].value, !fColl[parseInt(j.toString(), 10)].matchCase, fColl[parseInt(j.toString(), 10)].ignoreAccent);
        }
        var args = {
          action: "filtering",
          filterCollection: fColl,
          field: this.options.field,
          ejpredicate: Predicate.or(predicate)
        };
        this.options.handler(args);
      }
    };
    CheckBoxFilterBase2.prototype.isForeignColumn = function(col) {
      return col.isForeignColumn ? col.isForeignColumn() : false;
    };
    CheckBoxFilterBase2.prototype.refreshCheckboxes = function() {
      var _this = this;
      var val = this.sInput.value;
      var column = this.options.column;
      var query = this.isForeignColumn(column) ? this.foreignKeyQuery.clone() : this.options.query.clone();
      var foreignQuery = this.options.query.clone();
      var pred = query.queries.filter(function(e) {
        return e && e.fn === "onWhere";
      })[0];
      query.queries = [];
      foreignQuery.queries = [];
      var parsed = this.options.type !== "string" && parseFloat(val) ? parseFloat(val) : val;
      var operator = this.options.isRemote ? this.options.type === "string" ? "contains" : "equal" : this.options.type ? "contains" : "equal";
      var matchCase = true;
      var ignoreAccent = this.options.ignoreAccent;
      var field = this.isForeignColumn(column) ? column.foreignKeyValue : column.field;
      parsed = parsed === "" || parsed === void 0 ? void 0 : parsed;
      var coll = [];
      var defaults = {
        field,
        predicate: "or",
        uid: this.options.uid,
        operator: "equal",
        type: this.options.type,
        matchCase,
        ignoreAccent
      };
      var predicte;
      var moduleName = this.options.dataManager.adaptor.getModuleName;
      if (this.options.type === "boolean") {
        if (parsed !== void 0 && this.getLocalizedLabel("FilterTrue").toLowerCase().indexOf(parsed.toLowerCase()) !== -1) {
          parsed = "true";
        } else if (parsed !== void 0 && this.getLocalizedLabel("FilterFalse").toLowerCase().indexOf(parsed.toLowerCase()) !== -1) {
          parsed = "false";
        }
        if (parsed !== void 0 && this.getLocalizedLabel("FilterTrue").toLowerCase().indexOf(parsed.toLowerCase()) !== -1 && moduleName) {
          parsed = moduleName() === "ODataAdaptor" || "ODataV4Adaptor" ? true : "true";
        } else if (parsed !== void 0 && this.getLocalizedLabel("FilterFalse").toLowerCase().indexOf(parsed.toLowerCase()) !== -1 && moduleName) {
          parsed = moduleName() === "ODataAdaptor" || "ODataV4Adaptor" ? false : "false";
        }
        operator = "equal";
      }
      if ((this.options.type === "date" || this.options.type === "datetime" || this.options.type === "dateonly") && this.options.format) {
        var intl = new Internationalization();
        var format = typeof this.options.format === "string" ? this.options.format : this.options.format.format;
        if (format) {
          parsed = intl.parseDate(val, {
            format
          }) || new Date(val);
        } else {
          parsed = new Date(val);
        }
        if (this.options.type === "dateonly") {
          parsed = parsed.getFullYear() + "-" + padZero(parsed.getMonth() + 1) + "-" + padZero(parsed.getDate());
        }
      }
      this.infiniteSearchValChange = true;
      this.infiniteLoadedElem = [];
      this.infiniteLocalSelectAll = true;
      this.localInfiniteSelectAllClicked = false;
      this.localInfiniteSelectionInteracted = false;
      this.infiniteSkipCnt = 0;
      this.infiniteDataCount = 0;
      this.infiniteManualSelectMaintainPred = [];
      if (this.sInput.value === "") {
        this.infiniteUnloadParentExistPred = this.infiniteRenderMod && this.existingPredicate[this.options.column.field] ? this.existingPredicate[this.options.column.field].slice() : [];
      } else {
        this.infiniteUnloadParentExistPred = [];
      }
      if (!this.isForeignColumn(column)) {
        this.addDistinct(query);
      }
      var args = {
        requestType: filterSearchBegin,
        filterModel: this,
        columnName: field,
        column,
        operator,
        matchCase,
        ignoreAccent,
        filterChoiceCount: null,
        query,
        value: parsed,
        cancel: false
      };
      if (this.infiniteRenderMod && this.parent.filterSettings.itemsCount) {
        args.filterChoiceCount = this.parent.filterSettings.itemsCount;
      }
      this.parent.trigger(actionBegin, args, function(filterargs) {
        if (filterargs.cancel) {
          return;
        }
        filterargs.operator = filterargs.operator;
        predicte = new Predicate(field, filterargs.operator, args.value, filterargs.matchCase, filterargs.ignoreAccent);
        if (_this.options.type === "date" || _this.options.type === "datetime" || _this.options.type === "dateonly") {
          operator = "equal";
          var filterObj = {
            field,
            operator,
            value: parsed,
            matchCase,
            ignoreAccent
          };
          if (!isNullOrUndefined(parsed)) {
            predicte = getDatePredicate(filterObj, _this.options.type);
          }
        }
        if (val && typeof val === "string" && _this.isBlanks && _this.getLocalizedLabel("Blanks").toLowerCase().indexOf(val.toLowerCase()) >= 0) {
          coll = coll.concat(CheckBoxFilterBase2.generateNullValuePredicates(defaults));
          var emptyValPredicte = CheckBoxFilterBase2.generatePredicate(coll);
          emptyValPredicte.predicates.push(predicte);
          predicte = emptyValPredicte;
          query.where(emptyValPredicte);
        } else if (val.length) {
          predicte = !isNullOrUndefined(pred) ? predicte.and(pred.e) : predicte;
          query.where(predicte);
        } else if (!isNullOrUndefined(pred)) {
          predicte = pred.e;
          query.where(pred.e);
        }
        _this.infiniteSearchPred = predicte;
        filterargs.filterChoiceCount = !isNullOrUndefined(filterargs.filterChoiceCount) ? filterargs.filterChoiceCount : 1e3;
        if (_this.infiniteRenderMod && _this.parent.filterSettings.itemsCount !== filterargs.filterChoiceCount) {
          _this.parent.filterSettings.itemsCount = args.filterChoiceCount;
        }
        var fPredicate = {};
        showSpinner(_this.spinner);
        _this.renderEmpty = false;
        if (_this.isForeignColumn(column) && val.length) {
          var colData = "result" in column.dataSource ? new DataManager(column.dataSource.result) : column.dataSource;
          colData.executeQuery(query).then(function(e) {
            var columnData = _this.options.column.columnData;
            _this.options.column.columnData = e.result;
            _this.parent.notify(generateQuery, {
              predicate: fPredicate,
              column
            });
            if (fPredicate.predicate.predicates.length) {
              foreignQuery.where(fPredicate.predicate);
            } else {
              _this.renderEmpty = true;
            }
            _this.options.column.columnData = columnData;
            if (_this.infiniteRenderMod) {
              _this.infiniteInitialLoad = isNullOrUndefined(_this.fullData) ? true : false;
              _this.makeInfiniteScrollRequest(foreignQuery);
              foreignQuery.requiresCount();
            } else {
              foreignQuery.take(filterargs.filterChoiceCount);
            }
            _this.search(filterargs, foreignQuery);
          });
        } else {
          if (_this.infiniteRenderMod && _this.parent.filterSettings.itemsCount) {
            _this.infiniteInitialLoad = isNullOrUndefined(_this.fullData) ? true : false;
            _this.makeInfiniteScrollRequest(query);
            query.requiresCount();
          } else {
            query.take(filterargs.filterChoiceCount);
          }
          _this.search(filterargs, query);
        }
      });
    };
    CheckBoxFilterBase2.prototype.search = function(args, query) {
      if (this.parent.dataSource && "result" in this.parent.dataSource) {
        this.filterEvent(args, query);
      } else {
        this.processSearch(query);
      }
    };
    CheckBoxFilterBase2.prototype.getPredicateFromCols = function(columns, isExecuteLocal) {
      var predicates = CheckBoxFilterBase2.getPredicate(columns, isExecuteLocal);
      var predicateList = [];
      var fPredicate = {};
      var isGrid = this.parent.getForeignKeyColumns !== void 0;
      var foreignColumn = isGrid ? this.parent.getForeignKeyColumns() : [];
      for (var _i = 0, _a = Object.keys(predicates); _i < _a.length; _i++) {
        var prop = _a[_i];
        var col = void 0;
        if (isGrid && !this.parent.getColumnByField(prop)) {
          col = getColumnByForeignKeyValue(prop, foreignColumn);
        }
        if (col) {
          this.parent.notify(generateQuery, {
            predicate: fPredicate,
            column: col
          });
          if (fPredicate.predicate.predicates.length) {
            predicateList.push(Predicate.or(fPredicate.predicate.predicates));
          }
        } else {
          predicateList.push(predicates["" + prop]);
        }
      }
      return predicateList.length && Predicate.and(predicateList);
    };
    CheckBoxFilterBase2.prototype.getQuery = function() {
      return this.parent.getQuery ? this.parent.getQuery().clone() : new Query();
    };
    CheckBoxFilterBase2.prototype.getAllData = function() {
      var _this = this;
      this.customQuery = false;
      var query = this.getQuery();
      var moduleName = this.options.dataManager.adaptor.getModuleName;
      if (!(!isNullOrUndefined(this.parent.getDataModule) && moduleName && moduleName() === "ODataV4Adaptor")) {
        query.requiresCount();
      }
      this.addDistinct(query);
      var args = {
        requestType: filterChoiceRequest,
        query,
        filterChoiceCount: null
      };
      var filterModel = "filterModel";
      args["" + filterModel] = this;
      if (this.infiniteRenderMod && this.parent.filterSettings.itemsCount) {
        args.filterChoiceCount = this.parent.filterSettings.itemsCount;
      }
      this.parent.trigger(actionBegin, args, function(args2) {
        args2.filterChoiceCount = !isNullOrUndefined(args2.filterChoiceCount) ? args2.filterChoiceCount : 1e3;
        if (_this.infiniteRenderMod && _this.parent.filterSettings.itemsCount !== args2.filterChoiceCount) {
          _this.parent.filterSettings.itemsCount = args2.filterChoiceCount;
        }
        if (!_this.infiniteRenderMod) {
          query.take(args2.filterChoiceCount);
        }
        if (!args2.query.distincts.length || _this.infiniteRenderMod) {
          _this.customQuery = true;
          _this.queryGenerate(query);
        }
        if (_this.infiniteRenderMod) {
          _this.infiniteInitialLoad = isNullOrUndefined(_this.fullData) ? true : false;
          _this.makeInfiniteScrollRequest(query);
        }
        if (_this.parent.dataSource && "result" in _this.parent.dataSource) {
          _this.filterEvent(args2, query);
        } else {
          _this.processDataOperation(query, true);
        }
      });
    };
    CheckBoxFilterBase2.prototype.addDistinct = function(query) {
      var _this = this;
      var filteredColumn = DataUtil.distinct(this.options.filteredColumns, "field");
      if (filteredColumn.indexOf(this.options.column.field) <= -1) {
        filteredColumn = filteredColumn.concat(this.options.column.field);
      }
      var moduleName = this.options.dataManager.adaptor.getModuleName;
      if (moduleName && moduleName() === "ODataV4Adaptor" && this.parent && this.parent.query instanceof Query) {
        var gridQuery = this.parent.query;
        for (var i = 0; i < gridQuery.queries.length; i++) {
          var queryOptions = gridQuery.queries[parseInt(i.toString(), 10)];
          if (queryOptions.fn === "onWhere") {
            this.getPredicateFields(queryOptions.e);
            this.queryFilteredColumn.map(function(field) {
              if (filteredColumn.indexOf(field) === -1) {
                filteredColumn.push(field);
              }
            });
            this.queryFilteredColumn = [];
          }
        }
      }
      if (!this.infiniteRenderMod) {
        query.distinct(filteredColumn);
      }
      if (this.infiniteRenderMod && !this.options.isRemote && this.sInput.value === "") {
        this.options.dataSource = this.options.dataSource instanceof DataManager ? this.options.dataSource : new DataManager(this.options.dataSource);
        this.infinitePermenantLocalData = this.options.dataSource.dataSource.json.slice();
        var query1 = new Query();
        this.queryGenerate(query1);
        var result = new DataManager(this.options.dataSource.dataSource).executeLocal(query1);
        this.options.dataSource = new DataManager(DataUtil.distinct(result, this.options.column.field, true));
        if (this.isForeignColumn(this.options.column)) {
          this.options.column.dataSource = this.options.column.dataSource instanceof DataManager ? this.options.column.dataSource : new DataManager(this.options.column.dataSource);
          this.options.dataSource.dataSource.json = this.options.dataSource.dataSource.json.map(function(item, i2) {
            return Object.assign({}, item, _this.options.column.dataSource.dataSource.json[i2]);
          });
        }
      } else if (this.infiniteRenderMod && this.options.isRemote) {
        query.select(this.options.column.field);
        query.sortBy(this.options.column.field, "ascending");
        var moduleName_1 = this.options.dataManager.adaptor.getModuleName;
        if (moduleName_1 && moduleName_1() && (moduleName_1() === "ODataV4Adaptor" || moduleName_1() === "WebApiAdaptor" || moduleName_1() === "CustomDataAdaptor" || moduleName_1() === "GraphQLAdaptor" || moduleName_1() === "ODataAdaptor")) {
          query.distinct(filteredColumn);
        }
      }
      return query;
    };
    CheckBoxFilterBase2.prototype.getPredicateFields = function(query) {
      var _this = this;
      if (query.isComplex && query.predicates) {
        query.predicates.forEach(function(predicate) {
          if (Array.isArray(predicate)) {
            predicate.forEach(function(p) {
              return _this.getPredicateFields(p);
            });
          } else {
            _this.getPredicateFields(predicate);
          }
        });
      } else {
        if (query.field && !query.isComplex) {
          if (this.queryFilteredColumn.indexOf(query.field) <= -1) {
            this.queryFilteredColumn = this.queryFilteredColumn.concat(DataUtil.distinct([query.field], "field"));
          }
        }
      }
    };
    CheckBoxFilterBase2.prototype.filterEvent = function(args, query) {
      var _this = this;
      var defObj = eventPromise(args, query);
      this.parent.trigger(dataStateChange, defObj.state);
      this.addInfiniteScrollEvent(query);
      var def = defObj.deffered;
      def.promise.then(function(e) {
        _this.infiniteDataCount = _this.infiniteRenderMod && !_this.infiniteDataCount ? e["count"] : _this.infiniteDataCount;
        var dataResult = _this.infiniteRenderMod ? e["result"] : e;
        _this.dataSuccess(dataResult);
      });
    };
    CheckBoxFilterBase2.prototype.addInfiniteScrollEvent = function(query) {
      if (this.infiniteRenderMod) {
        this.infiniteQuery = query.clone();
        if (this.infiniteInitialLoad) {
          this.cBox.classList.add("e-checkbox-infinitescroll");
          EventHandler.add(this.cBox, "scroll", this.infiniteScrollHandler, this);
          EventHandler.add(this.cBox, "mouseup", this.infiniteScrollMouseKeyUpHandler, this);
          EventHandler.add(this.cBox, "mousedown", this.infiniteScrollMouseKeyDownHandler, this);
        } else if (this.infiniteSearchValChange) {
          this.cBox.innerHTML = "";
        }
      }
    };
    CheckBoxFilterBase2.prototype.infiniteScrollMouseKeyDownHandler = function() {
      EventHandler.remove(this.cBox, "scroll", this.infiniteScrollHandler);
    };
    CheckBoxFilterBase2.prototype.infiniteScrollMouseKeyUpHandler = function(e) {
      var _this = this;
      EventHandler.add(this.cBox, "scroll", this.infiniteScrollHandler, this);
      var target = this.cBox;
      if (target.children.length > 1 && (target.scrollTop >= target.scrollHeight - target.offsetHeight || target.scrollTop <= 0)) {
        this.infiniteScrollHandler();
      }
      Global.timer = setTimeout(function() {
        _this.clickHandler(e);
        Global.timer = null;
      }, 0);
    };
    CheckBoxFilterBase2.prototype.getShimmerTemplate = function() {
      return '<span class="e-mask e-skeleton e-skeleton-text e-shimmer-wave"></span>';
    };
    CheckBoxFilterBase2.prototype.showMask = function() {
      var maskRowCount = 5;
      var maskItemHeight;
      var maskList = this.parent.createElement("div", {
        id: this.id + this.options.type + "_CheckBoxMaskList",
        className: "e-checkboxlist e-fields e-infinite-list e-masklist"
      });
      maskList.style.zIndex = "10";
      var wrapperElem = this.cBox;
      this.removeMask();
      if (wrapperElem) {
        var computedStyle = getComputedStyle(wrapperElem);
        var liHeight = getListHeight(wrapperElem);
        var height = wrapperElem.children.length ? parseInt(computedStyle.height, 10) : Math.floor(parseInt(computedStyle.height.split("px")[0], 10)) - 5;
        if (this.parent.enableAdaptiveUI && this.infiniteRenderMod) {
          maskList.style.height = height - liHeight + "px";
          this.dlg.querySelector(".e-dlg-content").style.overflow = "hidden";
        }
        var backgroundColor = this.isExcel && !wrapperElem.children.length && !this.dlg.classList.contains("e-excelfilter") ? "" : getComputedStyle(this.dlg.querySelector(".e-dlg-content")).backgroundColor;
        maskList.style.cssText = "width: " + computedStyle.width + "; min-height: " + computedStyle.minHeight + "; height: " + height + "px; margin: " + computedStyle.margin + "; border-style: " + computedStyle.borderStyle + "; border-width: " + computedStyle.borderWidth + "; border-color: " + computedStyle.borderColor + "; position: absolute; background-color: " + backgroundColor + ";";
        maskRowCount = Math.floor(height / liHeight);
        maskRowCount = wrapperElem.children.length > maskRowCount ? wrapperElem.children.length : maskRowCount;
        maskItemHeight = liHeight + "px";
      }
      var maskTemplate = '<div class="e-ftrchk e-mask-ftrchk"><div class="e-checkbox-wrapper"><input class="e-chk-hidden">' + this.getShimmerTemplate() + this.getShimmerTemplate() + "</div></div>";
      maskList.innerHTML = "";
      if (!wrapperElem.children.length) {
        this.spinner.insertAdjacentHTML("beforebegin", maskTemplate);
        this.spinner.parentElement.querySelector(".e-ftrchk.e-mask-ftrchk").style.cssText = "width: 100%; height: " + maskItemHeight + ";";
        this.spinner.parentElement.querySelector(".e-checkbox-wrapper").style.width = "100%";
        var maskSpan = [].slice.call(this.spinner.parentElement.querySelectorAll(".e-mask:not(.e-mask-checkbox-filter-intent):not(.e-mask-checkbox-filter-span-intent)"));
        maskSpan[0].classList.add("e-mask-checkbox-filter-intent");
        maskSpan[1].classList.add("e-mask-checkbox-filter-span-intent");
      }
      this.spinner.insertBefore(maskList, this.cBox);
      for (var i = 0; maskRowCount && i < maskRowCount; i++) {
        maskList.innerHTML += maskTemplate;
        maskList.lastElementChild.style.cssText = "width: 100%; height: " + maskItemHeight + ";";
        maskList.lastElementChild.querySelector(".e-checkbox-wrapper").style.width = "100%";
        var maskSpan = [].slice.call(maskList.querySelectorAll(".e-mask:not(.e-mask-checkbox-filter-intent):not(.e-mask-checkbox-filter-span-intent)"));
        maskSpan[0].classList.add("e-mask-checkbox-filter-intent");
        maskSpan[1].classList.add("e-mask-checkbox-filter-span-intent");
      }
      if (this.cBox) {
        maskList.scrollTop = this.cBox.scrollTop;
      }
    };
    CheckBoxFilterBase2.prototype.removeMask = function() {
      var maskLists = this.dialogObj.element.querySelectorAll(".e-mask-ftrchk");
      if (maskLists.length) {
        for (var i = 0; i < maskLists.length; i++) {
          remove(maskLists[i]);
        }
      }
      var maskParent = this.dialogObj.element.querySelector(".e-checkboxlist.e-masklist");
      if (maskParent) {
        remove(this.dialogObj.element.querySelector(".e-checkboxlist.e-masklist"));
      }
    };
    CheckBoxFilterBase2.prototype.infiniteScrollHandler = function() {
      var target = this.cBox;
      if (target.scrollTop >= target.scrollHeight - target.offsetHeight && !this.infiniteQueryExecutionPending && this.infiniteLoadedElem.length <= this.infiniteSkipCnt + this.parent.filterSettings.itemsCount && this.cBox.children.length === this.parent.filterSettings.itemsCount * 3 && (!this.infiniteDataCount || this.infiniteDataCount > this.infiniteSkipCnt + this.parent.filterSettings.itemsCount)) {
        this.makeInfiniteScrollRequest();
        this.prevInfiniteScrollDirection = "down";
      } else if (target.scrollTop >= target.scrollHeight - target.offsetHeight && !this.infiniteQueryExecutionPending && this.infiniteLoadedElem.length > this.infiniteSkipCnt + this.parent.filterSettings.itemsCount && this.cBox.children.length === this.parent.filterSettings.itemsCount * 3) {
        infiniteRemoveElements([].slice.call(this.cBox.children).splice(0, this.parent.filterSettings.itemsCount));
        this.infiniteSkipCnt += this.prevInfiniteScrollDirection === "down" ? this.parent.filterSettings.itemsCount : this.parent.filterSettings.itemsCount * 3;
        appendChildren(this.cBox, this.infiniteLoadedElem.slice(this.infiniteSkipCnt, this.parent.filterSettings.itemsCount + this.infiniteSkipCnt));
        this.prevInfiniteScrollDirection = "down";
      } else if (target.scrollTop === 0 && !this.infiniteInitialLoad && !this.infiniteSearchValChange && this.infiniteSkipCnt && this.infiniteLoadedElem.length && this.infiniteLoadedElem.length > this.parent.filterSettings.itemsCount * 3 && this.cBox.children.length === this.parent.filterSettings.itemsCount * 3) {
        infiniteRemoveElements([].slice.call(this.cBox.children).splice(this.parent.filterSettings.itemsCount * 2, this.parent.filterSettings.itemsCount));
        this.infiniteSkipCnt -= this.prevInfiniteScrollDirection === "up" ? this.parent.filterSettings.itemsCount : this.parent.filterSettings.itemsCount * 3;
        infiniteAppendElements([].slice.call(this.infiniteLoadedElem.slice(this.infiniteSkipCnt, this.infiniteSkipCnt + this.parent.filterSettings.itemsCount)), this.cBox);
        this.cBox.scrollTop = this.infiniteScrollAppendDiff;
        this.prevInfiniteScrollDirection = "up";
      } else if (target.scrollTop === 0 && !this.infiniteInitialLoad && !this.infiniteSearchValChange && this.infiniteSkipCnt && this.infiniteLoadedElem.length && this.cBox.children.length < this.parent.filterSettings.itemsCount * 3) {
        infiniteRemoveElements([].slice.call(this.cBox.children).splice(this.parent.filterSettings.itemsCount * 2, this.infiniteDataCount % this.parent.filterSettings.itemsCount));
        this.infiniteSkipCnt = (Math.floor(this.infiniteDataCount / this.parent.filterSettings.itemsCount) - 3) * this.parent.filterSettings.itemsCount;
        infiniteAppendElements([].slice.call(this.infiniteLoadedElem.slice(this.infiniteSkipCnt, this.infiniteSkipCnt + this.parent.filterSettings.itemsCount)), this.cBox);
        this.cBox.scrollTop = this.infiniteScrollAppendDiff;
        this.prevInfiniteScrollDirection = "up";
      }
    };
    CheckBoxFilterBase2.prototype.makeInfiniteScrollRequest = function(query) {
      var _this = this;
      if (!this.infiniteInitialLoad && this.parent.filterSettings && this.parent.filterSettings.loadingIndicator === "Shimmer") {
        setTimeout(function() {
          if (_this.infiniteQueryExecutionPending) {
            _this.showMask();
          }
        }, 500);
      } else if (!this.infiniteInitialLoad) {
        createSpinner({
          target: this.spinner,
          cssClass: this.parent.cssClass ? this.parent.cssClass : null
        }, this.parent.createElement);
        showSpinner(this.spinner);
      }
      var fName = "fn";
      if (this.infiniteQuery && this.infiniteQuery.queries && this.infiniteQuery.queries.length) {
        for (var i = 0; i < this.infiniteQuery.queries.length; i++) {
          if (this.infiniteQuery.queries[i]["" + fName] === "onTake" || this.infiniteQuery.queries[i]["" + fName] === "onSkip") {
            this.infiniteQuery.queries.splice(i, 1);
            i--;
          }
        }
      }
      var existQuery = query ? true : false;
      query = query ? query : this.infiniteQuery;
      if (this.infiniteInitialLoad || this.infiniteSearchValChange) {
        this.infiniteSkipCnt = 0;
      } else {
        this.infiniteSkipCnt += this.parent.filterSettings.itemsCount;
      }
      query.skip(this.infiniteSkipCnt);
      if (this.infiniteInitialLoad || this.infiniteSearchValChange) {
        query.take(this.parent.filterSettings.itemsCount * 3);
        this.infiniteSkipCnt += this.parent.filterSettings.itemsCount * 2;
      } else {
        query.take(this.parent.filterSettings.itemsCount);
      }
      if (!existQuery) {
        if (this.parent.dataSource && "result" in this.parent.dataSource) {
          var args = {
            requestType: filterChoiceRequest,
            query,
            filterChoiceCount: null,
            filterModel: this
          };
          if (this.infiniteRenderMod && this.parent.filterSettings.itemsCount) {
            args.filterChoiceCount = this.parent.filterSettings.itemsCount;
          }
          this.filterEvent(args, query);
        } else {
          this.processDataOperation(query);
          this.infiniteQueryExecutionPending = true;
        }
      }
    };
    CheckBoxFilterBase2.prototype.processDataOperation = function(query, isInitial) {
      var _this = this;
      this.options.dataSource = this.options.dataSource instanceof DataManager ? this.options.dataSource : new DataManager(this.options.dataSource);
      var allPromise = [];
      var runArray = [];
      if (this.isForeignColumn(this.options.column) && isInitial) {
        var colData = "result" in this.options.column.dataSource ? new DataManager(this.options.column.dataSource.result) : this.options.column.dataSource;
        this.foreignKeyQuery.params = query.params;
        allPromise.push(colData.executeQuery(this.foreignKeyQuery));
        runArray.push(function(data) {
          return _this.foreignKeyData = data;
        });
      }
      this.addInfiniteScrollEvent(query);
      if (this.infiniteRenderMod && this.infiniteInitialLoad && !this.options.isRemote) {
        var field = this.isForeignColumn(this.options.column) ? this.options.foreignKeyValue : this.options.column.field;
        this.options.dataSource.executeQuery(new Query().sortBy(field, DataUtil.fnAscending)).then(function(e) {
          _this.options.dataSource.dataSource.json = e.result;
          _this.executeQueryOperations(query, allPromise, runArray);
        });
      } else {
        this.executeQueryOperations(query, allPromise, runArray);
      }
    };
    CheckBoxFilterBase2.prototype.executeQueryOperations = function(query, allPromise, runArray) {
      var _this = this;
      allPromise.push(this.options.dataSource.executeQuery(query));
      runArray.push(this.dataSuccess.bind(this));
      var i = 0;
      Promise.all(allPromise).then(function(e) {
        _this.infiniteQueryExecutionPending = _this.infiniteRenderMod ? false : _this.infiniteQueryExecutionPending;
        for (var j = 0; j < e.length; j++) {
          _this.infiniteDataCount = _this.infiniteRenderMod && !_this.infiniteDataCount ? e[j].count : _this.infiniteDataCount;
          runArray[i++](e[parseInt(j.toString(), 10)].result);
        }
      }).catch(function() {
        if (_this.infiniteRenderMod && _this.parent.filterSettings && _this.parent.filterSettings.loadingIndicator === "Shimmer") {
          _this.parent.showMaskRow(void 0, _this.dialogObj.element);
        }
      });
    };
    CheckBoxFilterBase2.prototype.dataSuccess = function(e) {
      if (!this.infiniteInitialLoad && this.infiniteDataCount && (this.infiniteSkipCnt >= this.infiniteDataCount && !this.infiniteSearchValChange || e.length === 0)) {
        return;
      }
      this.fullData = e;
      var args1 = {
        dataSource: this.fullData,
        executeQuery: true,
        field: this.options.field
      };
      this.parent.notify(beforeCheckboxRenderer, args1);
      if (args1.executeQuery) {
        var query = new Query();
        if (!this.customQuery) {
          this.isExecuteLocal = true;
          this.queryGenerate(query);
          this.isExecuteLocal = false;
        }
        var result = new DataManager(args1.dataSource).executeLocal(query);
        var col = this.options.column;
        this.filteredData = CheckBoxFilterBase2.getDistinct(result, this.options.field, col, this.foreignKeyData, this).records || [];
      }
      var data = args1.executeQuery ? this.filteredData : args1.dataSource;
      this.processDataSource(null, true, data, args1);
      if (this.infiniteRenderMod && this.infiniteInitialLoad || !this.infiniteRenderMod) {
        if (this.sInput) {
          this.sInput.focus();
        } else if (this.dlg.querySelector(".e-chk-hidden") && this.dlg.querySelector(".e-ftrchk")) {
          this.dlg.querySelector(".e-chk-hidden").focus();
          this.dlg.querySelector(".e-ftrchk").classList.add("e-chkfocus");
        }
      }
      if (this.infiniteInitialLoad || this.infiniteSearchValChange) {
        this.infiniteInitialLoad = false;
        this.infiniteSearchValChange = false;
      }
      var args = {
        requestType: filterAfterOpen,
        columnName: this.options.field,
        columnType: this.options.type
      };
      var filterModel = "filterModel";
      args["" + filterModel] = this;
      this.parent.notify(cBoxFltrComplete, args);
      if (this.isCheckboxFilterTemplate) {
        hideSpinner(this.spinner);
      }
    };
    CheckBoxFilterBase2.prototype.queryGenerate = function(query) {
      if (this.parent.searchSettings && this.parent.searchSettings.key.length) {
        var moduleName = this.options.dataManager.adaptor.getModuleName;
        if (!isNullOrUndefined(this.parent.getDataModule) && moduleName && moduleName() === "ODataV4Adaptor") {
          this.parent.getDataModule().searchQuery(query);
        } else {
          var searchSettings = this.parent.searchSettings;
          var fields = searchSettings.fields.length ? searchSettings.fields : this.options.columns.map(function(f) {
            return f.field;
          });
          query.search(searchSettings.key, fields, searchSettings.operator, searchSettings.ignoreCase, searchSettings.ignoreAccent);
        }
      }
      if (this.options.filteredColumns.length) {
        var cols = [];
        for (var i = 0; i < this.options.filteredColumns.length; i++) {
          var filterColumn = this.options.filteredColumns[parseInt(i.toString(), 10)];
          if (this.options.uid) {
            filterColumn.uid = filterColumn.uid || this.parent.getColumnByField(filterColumn.field).uid;
            if (filterColumn.uid !== this.options.uid) {
              cols.push(this.options.filteredColumns[parseInt(i.toString(), 10)]);
            }
          } else {
            if (filterColumn.field !== this.options.field) {
              cols.push(this.options.filteredColumns[parseInt(i.toString(), 10)]);
            }
          }
        }
        var predicate = this.getPredicateFromCols(cols, this.isExecuteLocal);
        if (predicate) {
          query.where(predicate);
        }
      }
    };
    CheckBoxFilterBase2.prototype.processDataSource = function(query, isInitial, dataSource, args) {
      showSpinner(this.spinner);
      this.isExecuteLocal = true;
      this.updateResult();
      this.isExecuteLocal = false;
      var args1 = {
        dataSource: this.fullData,
        isCheckboxFilterTemplate: false,
        column: this.options.column,
        element: this.cBox,
        type: this.options.type,
        format: this.options.type,
        btnObj: this.options.isResponsiveFilter ? null : this.dialogObj.btnObj[0],
        searchBox: this.searchBox
      };
      this.parent.notify(beforeCheckboxfilterRenderer, args1);
      this.isCheckboxFilterTemplate = args1.isCheckboxFilterTemplate;
      if (!this.isCheckboxFilterTemplate) {
        this.createFilterItems(dataSource, isInitial, args);
      } else if (this.infiniteRenderMod && this.parent.filterSettings && this.parent.filterSettings.loadingIndicator === "Shimmer") {
        this.removeMask();
      }
    };
    CheckBoxFilterBase2.prototype.processSearch = function(query) {
      this.processDataOperation(query);
    };
    CheckBoxFilterBase2.prototype.updateResult = function() {
      this.result = {};
      var predicate = this.infiniteRenderMod && this.existingPredicate[this.options.field] ? this.getPredicateFromCols(this.existingPredicate[this.options.field], this.isExecuteLocal) : this.getPredicateFromCols(this.options.filteredColumns, this.isExecuteLocal);
      var query = new Query();
      if (predicate) {
        query.where(predicate);
      }
      this.parent.notify(beforeCheckboxRendererQuery, {
        query
      });
      var result = new DataManager(this.fullData).executeLocal(query);
      for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {
        var res = result_1[_i];
        this.result[getObject(this.options.field, res)] = true;
      }
    };
    CheckBoxFilterBase2.prototype.clickHandler = function(e) {
      var _a;
      if (!isNullOrUndefined(Global.timer)) {
        clearTimeout(Global.timer);
      }
      var target = e.target;
      if (!isNullOrUndefined(this.parent.loadingIndicator) && this.parent.loadingIndicator.indicatorType === "Shimmer" && parentsUntil(target, "e-mask-ftrchk")) {
        return;
      }
      var elem = parentsUntil(target, "e-checkbox-wrapper");
      if (parentsUntil(target, "e-searchbox")) {
        this.searchBoxClick(e);
      }
      if (elem && !this.isCheckboxFilterTemplate) {
        var selectAll2 = elem.querySelector(".e-selectall");
        if (selectAll2) {
          this.updateAllCBoxes(!selectAll2.classList.contains("e-check"));
        } else {
          toogleCheckbox(elem.parentElement);
          if (this.infiniteRenderMod && !elem.parentElement.querySelector(".e-add-current")) {
            this.localInfiniteSelectionInteracted = true;
            var caseSen = this.options.allowCaseSensitive;
            var span = elem.parentElement.querySelector(".e-frame");
            var input = span.previousSibling;
            var optr = input.checked ? "equal" : "notequal";
            var pred = input.checked ? "or" : "and";
            var defaults = {
              field: this.options.field,
              predicate: pred,
              uid: this.options.uid,
              operator: optr,
              type: this.options.type,
              matchCase: caseSen,
              ignoreAccent: this.options.ignoreAccent
            };
            var value = this.values[parentsUntil(input, "e-ftrchk").getAttribute("uid")];
            this.updateInfiniteManualSelectPred(defaults, value);
            if (this.infiniteRenderMod && !this.options.isRemote && this.options.parentTotalDataCount && this.infiniteUnloadParentExistPred.length) {
              var predicate = this.getPredicateFromCols((_a = this.options.filteredColumns).concat.apply(_a, this.infiniteManualSelectMaintainPred), true);
              var query = new Query();
              if (predicate) {
                query.where(predicate);
              }
              var result = new DataManager(this.infinitePermenantLocalData).executeLocal(query);
              if (this.options.parentTotalDataCount !== result.length) {
                this.options.parentTotalDataCount = result.length;
              }
              if (!this.options.parentTotalDataCount && this.infiniteUnloadParentExistPred.length) {
                this.infiniteUnloadParentExistPred = [];
              }
            }
            if (this.infiniteUnloadParentExistPred.length && (this.options.parentTotalDataCount === this.infiniteDataCount || !this.options.parentTotalDataCount)) {
              this.infiniteUnloadParentExistPred = [];
            }
          }
        }
        this.updateIndeterminatenBtn();
        elem.querySelector(".e-chk-hidden").focus();
      }
      this.setFocus(parentsUntil(elem, "e-ftrchk"));
    };
    CheckBoxFilterBase2.prototype.updateInfiniteManualSelectPred = function(defaults, value) {
      for (var i = 0; i < this.infiniteManualSelectMaintainPred.length; i++) {
        var predmdl = this.infiniteManualSelectMaintainPred[i];
        if (predmdl.value + "" === value + "" && (predmdl.operator === "equal" || predmdl.operator === "notequal")) {
          this.infiniteManualSelectMaintainPred.splice(i, 1);
          break;
        }
      }
      if (defaults.predicate === "or" && (!this.localInfiniteSelectAllClicked || !this.infiniteLocalSelectAll) || defaults.predicate === "and" && (!this.localInfiniteSelectAllClicked || this.infiniteLocalSelectAll)) {
        this.infiniteManualSelectMaintainPred.push(extend({}, {
          value
        }, defaults));
        if (defaults.predicate === "or") {
          this.options.parentTotalDataCount++;
        } else {
          this.options.parentTotalDataCount--;
        }
      }
    };
    CheckBoxFilterBase2.prototype.focusNextOrPrev = function(e, focusableElements) {
      var nextIndex = e.key === "ArrowUp" ? focusableElements.indexOf(document.activeElement) - 1 : focusableElements.indexOf(document.activeElement) + 1;
      var nextElement = focusableElements[(nextIndex + focusableElements.length) % focusableElements.length];
      if (nextElement) {
        nextElement.focus();
        var target = nextElement.classList.contains("e-chk-hidden") ? parentsUntil(nextElement, "e-ftrchk") : nextElement;
        this.setFocus(target);
      }
    };
    CheckBoxFilterBase2.prototype.keyupHandler = function(e) {
      if (e.key === "Tab" || (e.key === "ArrowUp" || e.key === "ArrowDown") && !e.altKey) {
        this.setFocus(parentsUntil(e.target, "e-ftrchk"));
      }
      if ((e.key === "ArrowUp" || e.key === "ArrowDown") && !e.altKey && this.parent.filterSettings && this.parent.filterSettings.type === "CheckBox") {
        e.preventDefault();
        var focusableElements = Array.from(this.dlg.querySelectorAll('input, button, [tabindex]:not([tabindex="-1"])'));
        this.focusNextOrPrev(e, focusableElements);
      }
    };
    CheckBoxFilterBase2.prototype.setFocus = function(elem) {
      var prevElem = this.dlg.querySelector(".e-chkfocus");
      if (prevElem) {
        prevElem.classList.remove("e-chkfocus");
      }
      if (elem && elem !== prevElem) {
        elem.classList.add("e-chkfocus");
      }
    };
    CheckBoxFilterBase2.prototype.updateAllCBoxes = function(checked) {
      if (this.infiniteRenderMod) {
        this.localInfiniteSelectAllClicked = true;
        this.infiniteLocalSelectAll = checked;
        this.infiniteUnloadParentExistPred = [];
        this.infiniteManualSelectMaintainPred = [];
      }
      var cBoxes = this.infiniteRenderMod ? this.infiniteLoadedElem.map(function(arr) {
        return arr.querySelector(".e-frame");
      }) : [].slice.call(this.cBox.querySelectorAll(".e-frame:not(.e-add-current)"));
      for (var _i = 0, cBoxes_1 = cBoxes; _i < cBoxes_1.length; _i++) {
        var cBox = cBoxes_1[_i];
        removeAddCboxClasses(cBox, checked);
        setChecked(cBox.previousSibling, checked);
      }
    };
    CheckBoxFilterBase2.prototype.dialogOpen = function() {
      if (this.parent.element.classList.contains("e-device")) {
        this.dialogObj.element.querySelector(".e-input-group").classList.remove("e-input-focus");
        if (!this.options.isResponsiveFilter) {
          this.dialogObj.element.querySelector(".e-btn").focus();
        }
      }
    };
    CheckBoxFilterBase2.prototype.createCheckbox = function(value, checked, data) {
      var elem = checked ? this.cBoxTrue.cloneNode(true) : this.cBoxFalse.cloneNode(true);
      setChecked(elem.querySelector("input"), checked);
      var label = elem.querySelector(".e-label");
      var dummyData = extendObjWithFn({}, data, {
        column: this.options.column,
        parent: this.parent
      });
      var innerText = this.options.disableHtmlEncode ? "textContent" : "innerHTML";
      label["" + innerText] = !isNullOrUndefined(value) && value.toString().length ? this.parent.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(value) : value : this.getLocalizedLabel("Blanks");
      var checkboxUid = getUid("cbox");
      label.setAttribute("id", checkboxUid + "cboxLabel");
      elem.querySelector("input").setAttribute("aria-labelledby", label.id);
      if (label.innerHTML === this.getLocalizedLabel("Blanks")) {
        this.isBlanks = true;
      }
      if (typeof value === "boolean") {
        label.innerHTML = value === true ? this.getLocalizedLabel("FilterTrue") : this.getLocalizedLabel("FilterFalse");
      }
      addClass([label], ["e-checkboxfiltertext"]);
      if (this.options.template && data[this.options.column.field] !== this.getLocalizedLabel("SelectAll") && data[this.options.column.field] !== this.getLocalizedLabel("AddCurrentSelection")) {
        label.innerHTML = "";
        var isReactCompiler = this.parent.isReact && this.options.column.filter && typeof this.options.column.filter.itemTemplate !== "string" && !(this.options.column.filter.itemTemplate.prototype && this.options.column.filter.itemTemplate.prototype.CSPTemplate);
        var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.parent.parentDetails.parentInstObj.isReact;
        if (isReactCompiler || isReactChild) {
          this.options.template(dummyData, this.parent, "filterItemTemplate", null, null, null, label);
          this.parent.renderTemplates();
        } else {
          appendChildren(label, this.options.template(dummyData, this.parent, "filterItemTemplate", null, null, null, null, this.parent.root));
        }
      }
      return elem;
    };
    CheckBoxFilterBase2.prototype.updateIndeterminatenBtn = function() {
      var cnt = this.infiniteRenderMod ? this.infiniteLoadedElem.length : this.cBox.children.length - 1;
      var className = [];
      var disabled = false;
      var elem = this.infiniteRenderMod ? this.sBox.querySelector(".e-selectall") : this.cBox.querySelector(".e-selectall");
      var selected = this.infiniteRenderMod ? this.infiniteLoadedElem.filter(function(arr) {
        return arr.querySelector(".e-check");
      }).length : this.cBox.querySelectorAll(".e-check:not(.e-selectall):not(.e-add-current)").length;
      if (this.cBox.querySelector(".e-add-current")) {
        cnt -= 1;
      }
      var btn;
      if (!this.options.isResponsiveFilter) {
        btn = this.dialogObj.btnObj[0];
        btn.disabled = false;
      }
      var input = elem.previousSibling;
      setChecked(input, false);
      input.indeterminate = false;
      if (this.infiniteRenderMod && this.sInput.value === "" && !this.options.parentCurrentViewDataCount && !this.localInfiniteSelectionInteracted && (!this.localInfiniteSelectAllClicked || !this.infiniteLocalSelectAll && !selected) && (cnt !== selected || cnt === selected)) {
        selected = 0;
      } else if (this.infiniteRenderMod && this.infiniteLoadedElem.length < this.infiniteDataCount && this.infiniteUnloadParentExistPred.length && (!selected || cnt === selected) && this.infiniteLocalSelectAll) {
        if (!selected) {
          selected += this.infiniteUnloadParentExistPred.length;
        } else {
          cnt += this.infiniteUnloadParentExistPred.length;
        }
      }
      if (cnt === selected) {
        if (this.infiniteRenderMod) {
          this.infiniteLocalSelectAll = true;
          this.localInfiniteSelectAllClicked = true;
          this.infiniteManualSelectMaintainPred = [];
        }
        className = ["e-check"];
        setChecked(input, true);
      } else if (selected) {
        className = ["e-stop"];
        input.indeterminate = true;
      } else {
        if (this.infiniteRenderMod) {
          this.infiniteLocalSelectAll = false;
          this.localInfiniteSelectAllClicked = true;
          this.infiniteManualSelectMaintainPred = [];
        }
        className = ["e-uncheck"];
        disabled = true;
        if (btn) {
          btn.disabled = true;
        }
      }
      if (btn) {
        this.filterState = !btn.disabled;
        btn.dataBind();
      }
      removeClass([elem], ["e-check", "e-stop", "e-uncheck"]);
      addClass([elem], className);
      this.parent.notify(refreshCustomFilterOkBtn, {
        disabled
      });
    };
    CheckBoxFilterBase2.prototype.createFilterItems = function(data, isInitial, args1) {
      var _a, _b, _c;
      var cBoxes = this.parent.createElement("div");
      var btn;
      var disabled = false;
      if (!this.options.isResponsiveFilter) {
        btn = this.dialogObj.btnObj[0];
      }
      var nullCounter = -1;
      var key = "ejValue";
      if (!args1.executeQuery) {
        key = args1.field;
      }
      for (var i = 0; i < data.length; i++) {
        var val = getValue(key, data[parseInt(i.toString(), 10)]);
        if (val === "" || isNullOrUndefined(val)) {
          nullCounter = nullCounter + 1;
        }
      }
      if (!this.infiniteRenderMod) {
        this.itemsCnt = nullCounter !== -1 ? data.length - nullCounter : data.length;
      }
      if (this.infiniteRenderMod && this.parent.filterSettings && this.parent.filterSettings.loadingIndicator === "Shimmer") {
        this.removeMask();
      }
      if (data.length && !this.renderEmpty) {
        var selectAllValue = this.getLocalizedLabel("SelectAll");
        var innerDiv = this.cBox.querySelector(".e-checkfltrnmdiv");
        if (innerDiv) {
          innerDiv.classList.remove("e-checkfltrnmdiv");
        }
        var checkBox = this.createCheckbox(selectAllValue, false, (_a = {}, _a[this.options.field] = selectAllValue, _a));
        if (this.parent.cssClass) {
          if (this.parent.cssClass.indexOf(" ") !== -1) {
            addClass([checkBox], this.parent.cssClass.split(" "));
          } else {
            addClass([checkBox], [this.parent.cssClass]);
          }
        }
        if (this.infiniteInitialLoad || !this.infiniteRenderMod) {
          var selectAll2 = createCboxWithWrap(getUid("cbox"), checkBox, "e-ftrchk");
          selectAll2.querySelector(".e-frame").classList.add("e-selectall");
          if (this.infiniteRenderMod) {
            selectAll2.classList.add("e-infinitescroll");
            if (this.parent.enableAdaptiveUI) {
              this.spinner.style.height = this.spinner.offsetHeight - getListHeight(this.cBox) + "px";
            }
            this.sBox.insertBefore(selectAll2, this.spinner);
          } else {
            cBoxes.appendChild(selectAll2);
          }
        } else if (this.sBox.querySelector(".e-ftrchk .e-selectall")) {
          this.sBox.querySelector(".e-ftrchk .e-selectall").previousSibling.disabled = false;
          this.sBox.querySelector(".e-ftrchk .e-selectall").parentElement.classList.remove("e-checkbox-disabled");
        }
        var predicate = new Predicate("field", "equal", this.options.field);
        if (this.options.foreignKeyValue) {
          predicate = predicate.or("field", "equal", this.options.foreignKeyValue);
        }
        var isColFiltered = new DataManager(this.options.filteredColumns).executeLocal(new Query().where(predicate)).length;
        if (this.sInput && this.sInput.value) {
          var predicateCheckBox = this.createCheckbox(this.getLocalizedLabel("AddCurrentSelection"), false, (_b = {}, _b[this.options.field] = this.getLocalizedLabel("AddCurrentSelection"), _b));
          if (this.parent.cssClass) {
            if (this.parent.cssClass.indexOf(" ") !== -1) {
              addClass([predicateCheckBox], this.parent.cssClass.split(" "));
            } else {
              addClass([predicateCheckBox], [this.parent.cssClass]);
            }
          }
          if (this.infiniteRenderMod && !isNullOrUndefined(this.sBox.children[2]) && this.sBox.children[2].innerText !== this.getLocalizedLabel("AddCurrentSelection") || !this.infiniteRenderMod) {
            var predicateElement = createCboxWithWrap(getUid("cbox"), predicateCheckBox, "e-ftrchk");
            predicateElement.querySelector(".e-frame").classList.add("e-add-current");
            if (this.infiniteRenderMod) {
              predicateElement.classList.add("e-infinitescroll");
              this.sBox.insertBefore(predicateElement, this.spinner);
              var checkBoxListElem = this.spinner.querySelector(".e-checkboxlist");
              var reduceHeight = Math.ceil(predicateElement.getBoundingClientRect().height);
              checkBoxListElem.style.height = parseInt(getComputedStyle(checkBoxListElem).height.split("px")[0], 10) - reduceHeight + "px";
              checkBoxListElem.style.minHeight = checkBoxListElem.style.height;
            } else {
              cBoxes.appendChild(predicateElement);
            }
          } else if (this.sBox.querySelector(".e-ftrchk .e-add-current")) {
            this.sBox.querySelector(".e-ftrchk .e-add-current").previousSibling.disabled = false;
            this.sBox.querySelector(".e-ftrchk .e-add-current").parentElement.classList.remove("e-checkbox-disabled");
          }
        } else if (this.infiniteRenderMod && !isNullOrUndefined(this.sBox.children[2]) && this.sBox.children[2].innerText === this.getLocalizedLabel("AddCurrentSelection")) {
          var checkBoxListElem = this.spinner.querySelector(".e-checkboxlist");
          var increaseHeight = Math.ceil(this.sBox.children[2].getBoundingClientRect().height);
          checkBoxListElem.style.height = parseInt(getComputedStyle(checkBoxListElem).height.split("px")[0], 10) + increaseHeight + "px";
          checkBoxListElem.style.minHeight = checkBoxListElem.style.height;
          remove(this.sBox.children[2]);
        }
        var isRndere = void 0;
        for (var i = 0; i < data.length; i++) {
          var uid2 = getUid("cbox");
          this.values["" + uid2] = getValue(key, data[parseInt(i.toString(), 10)]);
          var value = getValue(this.options.field, data[parseInt(i.toString(), 10)]);
          if (this.options.formatFn) {
            value = this.valueFormatter.toView(value, this.options.formatFn);
          }
          var args_1 = {
            value,
            column: this.options.column,
            data: data[parseInt(i.toString(), 10)]
          };
          this.parent.notify(filterCboxValue, args_1);
          value = args_1.value;
          if (value === "" || isNullOrUndefined(value)) {
            if (isRndere) {
              continue;
            }
            isRndere = true;
          }
          if (this.infiniteRenderMod) {
            this.updateInfiniteUnLoadedCheckboxExistPred(value, this.infiniteUnloadParentExistPred);
          }
          var checkbox = this.localInfiniteSelectAllClicked ? this.createCheckbox(value, this.infiniteLocalSelectAll, getValue("dataObj", data[i])) : this.createCheckbox(value, this.getCheckedState(isColFiltered, this.values["" + uid2]), getValue("dataObj", data[i]));
          cBoxes.appendChild(createCboxWithWrap(uid2, checkbox, "e-ftrchk"));
          if (this.infiniteRenderMod) {
            cBoxes.lastChild.style.height = getListHeight(this.cBox) + "px";
          }
        }
        var scrollTop = this.cBox.scrollTop;
        if (!this.infiniteRenderMod || this.infiniteSearchValChange) {
          this.cBox.innerHTML = "";
        } else if (this.infiniteRenderMod && this.cBox.children.length) {
          infiniteRemoveElements([].slice.call(this.cBox.children).splice(0, this.parent.filterSettings.itemsCount));
        }
        if (this.infiniteRenderMod) {
          (_c = this.infiniteLoadedElem).push.apply(_c, [].slice.call(cBoxes.children));
          this.itemsCnt = nullCounter !== -1 ? this.infiniteLoadedElem.length - nullCounter : this.infiniteLoadedElem.length;
        }
        if (this.infiniteUnloadParentExistPred.length && (this.infiniteLoadedElem.length >= this.infiniteDataCount || !this.options.parentCurrentViewDataCount || this.options.parentTotalDataCount === this.infiniteDataCount && this.options.parentCurrentViewDataCount)) {
          this.infiniteUnloadParentExistPred = [];
        }
        appendChildren(this.cBox, [].slice.call(cBoxes.children));
        if (this.infiniteRenderMod && !this.infiniteScrollAppendDiff) {
          this.infiniteScrollAppendDiff = Math.round(scrollTop - this.cBox.scrollTop);
        }
        this.updateIndeterminatenBtn();
        if (!this.infiniteRenderMod) {
          if (btn) {
            btn.disabled = false;
          }
          disabled = false;
        } else {
          if (btn && btn.disabled) {
            disabled = true;
          } else {
            disabled = false;
          }
        }
      } else {
        cBoxes.appendChild(this.parent.createElement("span", {
          innerHTML: this.getLocalizedLabel("NoResult")
        }));
        this.cBox.innerHTML = "";
        if (this.infiniteRenderMod) {
          var selectAll2 = this.sBox.querySelector(".e-ftrchk .e-selectall");
          if (selectAll2) {
            var selectAllParent = selectAll2.parentElement.parentElement;
            if (selectAll2.classList.contains("e-check")) {
              toogleCheckbox(selectAllParent);
            } else if (selectAll2.classList.contains("e-stop")) {
              toogleCheckbox(selectAllParent);
              selectAll2.classList.remove("e-stop");
              toogleCheckbox(selectAllParent);
            }
            selectAll2.previousSibling.disabled = true;
            selectAll2.parentElement.classList.add("e-checkbox-disabled");
          }
          var addCurrSelection = this.sBox.querySelector(".e-ftrchk .e-add-current");
          if (addCurrSelection) {
            var addCurrSelectionParent = addCurrSelection.parentElement.parentElement;
            if (addCurrSelection.classList.contains("e-check")) {
              toogleCheckbox(addCurrSelectionParent);
            }
            addCurrSelection.previousSibling.disabled = true;
            addCurrSelection.parentElement.classList.add("e-checkbox-disabled");
          }
        }
        this.cBox.appendChild(this.parent.createElement("div", {
          className: "e-checkfltrnmdiv"
        }));
        appendChildren(this.cBox.children[0], [].slice.call(cBoxes.children));
        if (btn) {
          btn.disabled = true;
        }
        disabled = true;
        this.filterState = !disabled;
      }
      if (btn && data.length) {
        this.filterState = !btn.disabled;
        btn.dataBind();
      }
      var args = {
        requestType: filterChoiceRequest,
        dataSource: this.renderEmpty ? [] : data
      };
      var filterModel = "filterModel";
      args["" + filterModel] = this;
      this.parent.notify(cBoxFltrComplete, args);
      this.parent.notify(refreshCustomFilterOkBtn, {
        disabled
      });
      if (this.infiniteRenderMod && this.infiniteInitialLoad) {
        this.cBox.style.marginTop = "0px";
      }
      hideSpinner(this.spinner);
    };
    CheckBoxFilterBase2.prototype.updateInfiniteUnLoadedCheckboxExistPred = function(value, updatePredArr) {
      for (var j = 0; j < updatePredArr.length; j++) {
        var pred = updatePredArr[j];
        var predValue = pred.value instanceof Date ? this.valueFormatter.toView(pred.value, this.options.formatFn) : pred.value;
        var column = this.options.column;
        if (column.isForeignColumn()) {
          var foreignDataObj = getForeignData(column, {}, predValue, this.foreignKeyData)[0];
          value = getValue(column.foreignKeyField, foreignDataObj);
        }
        if (value === predValue && (pred.operator === "equal" || pred.operator === "notequal")) {
          this.infiniteManualSelectMaintainPred.push(updatePredArr[j]);
          updatePredArr.splice(j, 1);
          j--;
        }
      }
    };
    CheckBoxFilterBase2.prototype.getCheckedState = function(isColFiltered, value) {
      if (!this.isFiltered || !isColFiltered) {
        return true;
      } else {
        var checkState = this.sInput && this.sInput.value ? true : this.result["" + value];
        if (this.infiniteRenderMod) {
          return checkState;
        } else {
          return this.options.operator === "notequal" ? !checkState : checkState;
        }
      }
    };
    CheckBoxFilterBase2.getDistinct = function(json, field, column, foreignKeyData2, checkboxFilter) {
      var len = json.length;
      var result = [];
      var value;
      var ejValue = "ejValue";
      var lookup = {};
      var isForeignKey = column && column.isForeignColumn ? column.isForeignColumn() : false;
      while (len--) {
        value = json[parseInt(len.toString(), 10)];
        if (column && column.type === "dateonly" && typeof value["" + field] === "string" && value["" + field]) {
          var arr = value["" + field].split(/[^0-9.]/);
          value["" + field] = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10));
        }
        value = getObject(field, value);
        var currentFilterValue = typeof value === "string" && !isNullOrUndefined(checkboxFilter) && // eslint-disable-next-line @typescript-eslint/no-explicit-any
        !isNullOrUndefined(checkboxFilter.parent) && !isNullOrUndefined(checkboxFilter.parent.filterSettings) && // eslint-disable-next-line @typescript-eslint/no-explicit-any
        !isNullOrUndefined(checkboxFilter.parent.filterSettings.enableCaseSensitivity) ? value.toLowerCase() : value;
        if (!(currentFilterValue in lookup)) {
          var obj = {};
          obj["" + ejValue] = value;
          lookup["" + currentFilterValue] = true;
          if (isForeignKey) {
            var foreignDataObj = getForeignData(column, {}, value, foreignKeyData2)[0];
            setValue(foreignKeyData, foreignDataObj, json[parseInt(len.toString(), 10)]);
            value = getValue(column.foreignKeyValue, foreignDataObj);
          }
          setValue(field, isNullOrUndefined(value) ? null : value, obj);
          setValue("dataObj", json[parseInt(len.toString(), 10)], obj);
          result.push(obj);
        }
      }
      return DataUtil.group(DataUtil.sort(result, field, DataUtil.fnAscending), "ejValue");
    };
    CheckBoxFilterBase2.getPredicate = function(columns, isExecuteLocal) {
      var cols = DataUtil.distinct(columns, "field", true) || [];
      var collection = [];
      var pred = {};
      for (var i = 0; i < cols.length; i++) {
        collection = new DataManager(columns).executeLocal(new Query().where("field", "equal", cols[parseInt(i.toString(), 10)].field));
        if (collection.length !== 0) {
          pred[cols[parseInt(i.toString(), 10)].field] = CheckBoxFilterBase2.generatePredicate(collection, isExecuteLocal);
        }
      }
      return pred;
    };
    CheckBoxFilterBase2.generatePredicate = function(cols, isExecuteLocal) {
      var len = cols ? cols.length : 0;
      var predicate;
      var operate = "or";
      var first = CheckBoxFilterBase2.updateDateFilter(cols[0]);
      first.ignoreAccent = !isNullOrUndefined(first.ignoreAccent) ? first.ignoreAccent : false;
      if (first.type === "date" || first.type === "datetime" || first.type === "dateonly") {
        predicate = getDatePredicate(first, first.type, isExecuteLocal);
      } else {
        predicate = first.ejpredicate ? first.ejpredicate : new Predicate(first.field, first.operator, first.value, !CheckBoxFilterBase2.getCaseValue(first), first.ignoreAccent);
      }
      for (var p = 1; p < len; p++) {
        cols[parseInt(p.toString(), 10)] = CheckBoxFilterBase2.updateDateFilter(cols[parseInt(p.toString(), 10)]);
        if (len > 2 && p > 1 && (cols[p].predicate === "or" && cols[p - 1].predicate === "or" || cols[p].predicate === "and" && cols[p - 1].predicate === "and")) {
          if (cols[p].type === "date" || cols[p].type === "datetime" || cols[p].type === "dateonly") {
            predicate.predicates.push(getDatePredicate(cols[parseInt(p.toString(), 10)], cols[p].type, isExecuteLocal));
          } else {
            predicate.predicates.push(new Predicate(cols[p].field, cols[parseInt(p.toString(), 10)].operator, cols[parseInt(p.toString(), 10)].value, !CheckBoxFilterBase2.getCaseValue(cols[parseInt(p.toString(), 10)]), cols[parseInt(p.toString(), 10)].ignoreAccent));
          }
        } else {
          if (cols[p].type === "date" || cols[p].type === "datetime" || cols[p].type === "dateonly") {
            if (cols[parseInt(p.toString(), 10)].predicate === "and" && cols[parseInt(p.toString(), 10)].operator === "equal") {
              predicate = predicate["" + operate](getDatePredicate(cols[parseInt(p.toString(), 10)], cols[parseInt(p.toString(), 10)].type, isExecuteLocal), cols[parseInt(p.toString(), 10)].type, cols[parseInt(p.toString(), 10)].ignoreAccent);
            } else {
              predicate = predicate[cols[parseInt(p.toString(), 10)].predicate](getDatePredicate(cols[parseInt(p.toString(), 10)], cols[parseInt(p.toString(), 10)].type, isExecuteLocal), cols[parseInt(p.toString(), 10)].type, cols[parseInt(p.toString(), 10)].ignoreAccent);
            }
          } else {
            predicate = cols[parseInt(p.toString(), 10)].ejpredicate ? predicate[cols[parseInt(p.toString(), 10)].predicate](cols[parseInt(p.toString(), 10)].ejpredicate) : predicate[cols[parseInt(p.toString(), 10)].predicate](cols[parseInt(p.toString(), 10)].field, cols[parseInt(p.toString(), 10)].operator, cols[parseInt(p.toString(), 10)].value, !CheckBoxFilterBase2.getCaseValue(cols[parseInt(p.toString(), 10)]), cols[parseInt(p.toString(), 10)].ignoreAccent);
          }
        }
      }
      return predicate || null;
    };
    CheckBoxFilterBase2.getCaseValue = function(filter) {
      if (isNullOrUndefined(filter.matchCase)) {
        if (filter.type === "string" || isNullOrUndefined(filter.type) && typeof filter.value === "string") {
          return false;
        } else {
          return true;
        }
      } else {
        return filter.matchCase;
      }
    };
    CheckBoxFilterBase2.updateDateFilter = function(filter) {
      if (filter.type === "date" || filter.type === "datetime" || filter.type === "dateonly" || filter.value instanceof Date) {
        filter.type = filter.type || "date";
      }
      return filter;
    };
    return CheckBoxFilterBase2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/data.js
var Data = (
  /** @class */
  function() {
    function Data2(parent, serviceLocator) {
      this.dataState = {
        isPending: false,
        resolver: null,
        group: []
      };
      this.foreignKeyDataState = {
        isPending: false,
        resolver: null
      };
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      this.initDataManager();
      if (this.parent.isDestroyed || this.getModuleName() === "foreignKey") {
        return;
      }
      this.parent.on(rowsAdded, this.addRows, this);
      this.parent.on(rowPositionChanged, this.reorderRows, this);
      this.parent.on(rowsRemoved, this.removeRows, this);
      this.parent.on(dataSourceModified, this.initDataManager, this);
      this.parent.on(destroy, this.destroy, this);
      this.parent.on(updateData, this.crudActions, this);
      this.parent.on(addDeleteAction, this.getData, this);
      this.parent.on(autoCol, this.refreshFilteredCols, this);
      this.parent.on(columnsPrepared, this.refreshFilteredCols, this);
    }
    Data2.prototype.reorderRows = function(e) {
      if (this.parent.getDataModule().isRemote()) {
        this.parent.getCurrentViewRecords().splice(e.toIndex, 0, this.parent.getCurrentViewRecords().splice(e.fromIndex, 1)[0]);
      } else {
        this.dataManager.dataSource.json.splice(e.toIndex, 0, this.dataManager.dataSource.json.splice(e.fromIndex, 1)[0]);
      }
    };
    Data2.prototype.getModuleName = function() {
      return "data";
    };
    Data2.prototype.initDataManager = function() {
      var gObj = this.parent;
      this.dataManager = gObj.dataSource instanceof DataManager ? gObj.dataSource : isNullOrUndefined(gObj.dataSource) ? new DataManager() : new DataManager(gObj.dataSource);
      if (gObj.isAngular && !(gObj.query instanceof Query)) {
        gObj.setProperties({
          query: new Query()
        }, true);
      } else {
        this.isQueryInvokedFromData = true;
        if (!(gObj.query instanceof Query)) {
          gObj.query = new Query();
        }
      }
    };
    Data2.prototype.generateQuery = function(skipPage, skipGroup) {
      var gObj = this.parent;
      var query = !isNullOrUndefined(gObj.getQuery()) ? gObj.getQuery().clone() : new Query();
      if (this.parent.columnQueryMode === "ExcludeHidden") {
        query.select(this.parent.getColumns().filter(function(column) {
          return !(column.isPrimaryKey !== true && column.visible === false || column.field === void 0);
        }).map(function(column) {
          return column.field;
        }));
      } else if (this.parent.columnQueryMode === "Schema") {
        var selectQueryFields = [];
        var columns = this.parent.columns;
        for (var i = 0; i < columns.length; i++) {
          selectQueryFields.push(columns[parseInt(i.toString(), 10)].field);
        }
        query.select(selectQueryFields);
      }
      this.filterQuery(query);
      this.searchQuery(query);
      this.aggregateQuery(query);
      this.sortQuery(query);
      if (isGroupAdaptive(this.parent)) {
        this.virtualGroupPageQuery(query);
      } else {
        this.pageQuery(query, skipPage);
      }
      if (isNullOrUndefined(skipGroup) || !skipGroup) {
        this.groupQuery(query);
      }
      return query;
    };
    Data2.prototype.aggregateQuery = function(query) {
      var rows = this.parent.aggregates;
      for (var i = 0; i < rows.length; i++) {
        var row2 = rows[parseInt(i.toString(), 10)];
        for (var j = 0; j < row2.columns.length; j++) {
          var cols = row2.columns[parseInt(j.toString(), 10)];
          var types = cols.type instanceof Array ? cols.type : [cols.type];
          for (var k = 0; k < types.length; k++) {
            query.aggregate(types[parseInt(k.toString(), 10)].toLowerCase(), cols.field);
          }
        }
      }
      return query;
    };
    Data2.prototype.virtualGroupPageQuery = function(query) {
      var fName = "fn";
      if (query.queries.length) {
        for (var i = 0; i < query.queries.length; i++) {
          if (query.queries[parseInt(i.toString(), 10)]["" + fName] === "onPage") {
            query.queries.splice(i, 1);
          }
        }
      }
      return query;
    };
    Data2.prototype.pageQuery = function(query, skipPage) {
      var gObj = this.parent;
      var fName = "fn";
      var args = {
        query,
        skipPage: false
      };
      gObj.notify(setVirtualPageQuery, args);
      if (args.skipPage) {
        return query;
      }
      if ((gObj.allowPaging || gObj.enableVirtualization || gObj.enableInfiniteScrolling) && skipPage !== true) {
        gObj.pageSettings.currentPage = Math.max(1, gObj.pageSettings.currentPage);
        if (gObj.pageSettings.pageCount <= 0) {
          gObj.pageSettings.pageCount = 8;
        }
        if (gObj.pageSettings.pageSize <= 0) {
          gObj.pageSettings.pageSize = 12;
        }
        if (query.queries.length) {
          for (var i = 0; i < query.queries.length; i++) {
            if (query.queries[parseInt(i.toString(), 10)]["" + fName] === "onPage") {
              query.queries.splice(i, 1);
            }
          }
        }
        if (!isNullOrUndefined(gObj.infiniteScrollModule) && gObj.enableInfiniteScrolling) {
          this.parent.notify(infinitePageQuery, query);
        } else {
          query.page(gObj.pageSettings.currentPage, gObj.allowPaging && gObj.pagerModule && gObj.pagerModule.pagerObj.isAllPage && !gObj.isManualRefresh && !this.dataManager.dataSource.offline && !(this.dataManager.adaptor instanceof RemoteSaveAdaptor) ? null : gObj.pageSettings.pageSize);
        }
      }
      return query;
    };
    Data2.prototype.groupQuery = function(query) {
      var gObj = this.parent;
      if (gObj.allowGrouping && gObj.groupSettings.columns.length) {
        if (this.parent.groupSettings.enableLazyLoading) {
          query.lazyLoad.push({
            key: "isLazyLoad",
            value: this.parent.groupSettings.enableLazyLoading
          });
        }
        var columns = gObj.groupSettings.columns;
        for (var i = 0, len = columns.length; i < len; i++) {
          var column = this.getColumnByField(columns[parseInt(i.toString(), 10)]);
          if (!column) {
            this.parent.log("initial_action", {
              moduleName: "group",
              columnName: columns[parseInt(i.toString(), 10)]
            });
          }
          var isGrpFmt = column.enableGroupByFormat;
          var format = column.format;
          if (isGrpFmt) {
            query.group(columns[parseInt(i.toString(), 10)], this.formatGroupColumn.bind(this), format);
          } else {
            query.group(columns[parseInt(i.toString(), 10)], null);
          }
        }
      }
      return query;
    };
    Data2.prototype.sortQuery = function(query) {
      var gObj = this.parent;
      if ((gObj.allowSorting || gObj.allowGrouping) && gObj.sortSettings.columns.length) {
        var columns = gObj.sortSettings.columns;
        var sortGrp = [];
        for (var i = columns.length - 1; i > -1; i--) {
          var col = this.getColumnByField(columns[parseInt(i.toString(), 10)].field);
          if (col) {
            col.setSortDirection(columns[parseInt(i.toString(), 10)].direction);
          } else {
            this.parent.log("initial_action", {
              moduleName: "sort",
              columnName: columns[parseInt(i.toString(), 10)].field
            });
            return query;
          }
          var fn = columns[parseInt(i.toString(), 10)].direction;
          if (col.sortComparer) {
            this.parent.log("grid_sort_comparer");
            fn = !this.isRemote() ? col.sortComparer.bind(col) : columns[parseInt(i.toString(), 10)].direction;
          }
          if (gObj.groupSettings.columns.indexOf(columns[parseInt(i.toString(), 10)].field) === -1) {
            if (col.isForeignColumn() || col.sortComparer) {
              query.sortByForeignKey(col.field, fn, void 0, columns[parseInt(i.toString(), 10)].direction.toLowerCase());
            } else {
              query.sortBy(col.field, fn);
            }
          } else {
            sortGrp.push({
              direction: fn,
              field: col.field
            });
          }
        }
        for (var i = 0, len = sortGrp.length; i < len; i++) {
          if (typeof sortGrp[parseInt(i.toString(), 10)].direction === "string") {
            query.sortBy(sortGrp[parseInt(i.toString(), 10)].field, sortGrp[parseInt(i.toString(), 10)].direction);
          } else {
            var col = this.getColumnByField(sortGrp[parseInt(i.toString(), 10)].field);
            query.sortByForeignKey(sortGrp[parseInt(i.toString(), 10)].field, sortGrp[parseInt(i.toString(), 10)].direction, void 0, col.getSortDirection().toLowerCase());
          }
        }
      }
      return query;
    };
    Data2.prototype.searchQuery = function(query, fcolumn, isForeignKey) {
      var sSettings = this.parent.searchSettings;
      var fields = !isNullOrUndefined(sSettings.fields) && sSettings.fields.length ? sSettings.fields : this.getSearchColumnFieldNames();
      var predicateList = [];
      var needForeignKeySearch = false;
      if (!isNullOrUndefined(this.parent.searchSettings.key) && this.parent.searchSettings.key.length) {
        needForeignKeySearch = this.parent.getForeignKeyColumns().some(function(col) {
          return fields.indexOf(col.field) > -1;
        });
        var adaptor = !isForeignKey ? this.dataManager.adaptor : fcolumn.dataSource.adaptor;
        if (needForeignKeySearch || adaptor.getModuleName && adaptor.getModuleName() === "ODataV4Adaptor") {
          fields = isForeignKey ? [fcolumn.foreignKeyValue] : fields;
          for (var i = 0; i < fields.length; i++) {
            var column = isForeignKey ? fcolumn : this.getColumnByField(fields[parseInt(i.toString(), 10)]);
            if (column.isForeignColumn() && !isForeignKey) {
              predicateList = this.fGeneratePredicate(column, predicateList);
            } else {
              predicateList.push(new Predicate(fields[parseInt(i.toString(), 10)], sSettings.operator, sSettings.key, sSettings.ignoreCase, sSettings.ignoreAccent));
            }
          }
          var predList = Predicate.or(predicateList);
          predList.key = sSettings.key;
          query.where(predList);
        } else {
          query.search(sSettings.key, fields, sSettings.operator, sSettings.ignoreCase, sSettings.ignoreAccent);
        }
      }
      return query;
    };
    Data2.prototype.filterQuery = function(query, column, skipFoerign) {
      var gObj = this.parent;
      var predicateList = [];
      var actualFilter = [];
      var foreignColumn = this.parent.getForeignKeyColumns();
      var foreignColEmpty;
      if (gObj.allowFiltering && gObj.filterSettings.columns.length) {
        var columns = column ? column : gObj.filterSettings.columns;
        var colType = {};
        for (var _i = 0, _a = gObj.getColumns(); _i < _a.length; _i++) {
          var col = _a[_i];
          colType[col.field] = col.filter.type ? col.filter.type : gObj.filterSettings.type;
        }
        var foreignCols = [];
        var defaultFltrCols = [];
        for (var _b = 0, columns_1 = columns; _b < columns_1.length; _b++) {
          var col = columns_1[_b];
          var gridColumn = col.isForeignKey ? gObj.getColumnByUid(col.uid) : gObj.getColumnByField(col.field);
          if (isNullOrUndefined(col.type) && gridColumn && (gridColumn.type === "date" || gridColumn.type === "datetime" || gridColumn.type === "dateonly")) {
            col.type = col.isForeignKey ? gObj.getColumnByUid(col.uid).type : gObj.getColumnByField(col.field).type;
          }
          if (col.isForeignKey) {
            foreignCols.push(col);
          } else {
            defaultFltrCols.push(col);
          }
        }
        if (defaultFltrCols.length) {
          for (var i = 0, len = defaultFltrCols.length; i < len; i++) {
            defaultFltrCols[parseInt(i.toString(), 10)].uid = defaultFltrCols[parseInt(i.toString(), 10)].uid || this.parent.grabColumnByFieldFromAllCols(defaultFltrCols[parseInt(i.toString(), 10)].field, defaultFltrCols[parseInt(i.toString(), 10)].isForeignKey).uid;
          }
          var excelPredicate = CheckBoxFilterBase.getPredicate(defaultFltrCols);
          for (var _c = 0, _d = Object.keys(excelPredicate); _c < _d.length; _c++) {
            var prop = _d[_c];
            predicateList.push(excelPredicate["" + prop]);
          }
        }
        if (foreignCols.length) {
          for (var _e = 0, foreignCols_1 = foreignCols; _e < foreignCols_1.length; _e++) {
            var col = foreignCols_1[_e];
            col.uid = col.uid || this.parent.grabColumnByFieldFromAllCols(col.field, col.isForeignKey).uid;
            var column_1 = this.parent.grabColumnByUidFromAllCols(col.uid);
            if (!column_1) {
              this.parent.log("initial_action", {
                moduleName: "filter",
                columnName: col.field
              });
            }
            if (column_1.isForeignColumn() && getColumnByForeignKeyValue(col.field, foreignColumn) && !skipFoerign) {
              actualFilter.push(col);
              if (!column_1.columnData.length) {
                foreignColEmpty = true;
              }
              predicateList = this.fGeneratePredicate(column_1, predicateList);
            } else {
              var excelPredicate = CheckBoxFilterBase.getPredicate(columns);
              for (var _f = 0, _g = Object.keys(excelPredicate); _f < _g.length; _f++) {
                var prop = _g[_f];
                predicateList.push(excelPredicate["" + prop]);
              }
            }
          }
        }
        if (predicateList.length && !foreignColEmpty) {
          query.where(Predicate.and(predicateList));
        } else {
          this.parent.notify(showEmptyGrid, {});
        }
      }
      return query;
    };
    Data2.prototype.fGeneratePredicate = function(col, predicateList) {
      var fPredicate = {};
      if (col) {
        this.parent.notify(generateQuery, {
          predicate: fPredicate,
          column: col
        });
        if (fPredicate.predicate.predicates.length) {
          predicateList.push(fPredicate.predicate);
        }
      }
      return predicateList;
    };
    Data2.prototype.getData = function(args, query) {
      var _this = this;
      if (args === void 0) {
        args = {
          requestType: ""
        };
      }
      var key = this.getKey(args.foreignKeyData && Object.keys(args.foreignKeyData).length ? args.foreignKeyData : this.parent.getPrimaryKeyFieldNames());
      this.parent.log("datasource_syntax_mismatch", {
        dataState: this.parent
      });
      if (this.parent.dataSource && "result" in this.parent.dataSource) {
        var def = this.eventPromise(args, query, key);
        return def.promise;
      } else {
        var crud = void 0;
        switch (args.requestType) {
          case "delete":
            query = query ? query : this.generateQuery();
            var len = Object.keys(args.data).length;
            if (len === 1) {
              crud = this.dataManager.remove(key, args.data[0], query.fromTable, query);
            } else {
              var changes = {
                addedRecords: [],
                deletedRecords: [],
                changedRecords: []
              };
              changes.deletedRecords = args.data;
              crud = this.dataManager.saveChanges(changes, key, query.fromTable, query.requiresCount());
            }
            break;
          case "save":
            query = query ? query : this.generateQuery();
            args.index = isNullOrUndefined(args.index) ? 0 : args.index;
            crud = this.dataManager.insert(args.data, query.fromTable, query, args.index);
            break;
        }
        var promise = "promise";
        args["" + promise] = crud;
        if (crud && !Array.isArray(crud) && !crud.hasOwnProperty("deletedRecords")) {
          return crud.then(function() {
            return _this.insert(query, args);
          });
        } else {
          return this.insert(query, args);
        }
      }
    };
    Data2.prototype.insert = function(query, args) {
      if (args.requestType === "save") {
        args.query = query;
        this.parent.notify(recordAdded, args);
      }
      return this.executeQuery(query);
    };
    Data2.prototype.executeQuery = function(query) {
      var _this = this;
      if (this.dataManager.ready) {
        var deferred_1 = new Deferred();
        var ready = this.dataManager.ready;
        ready.then(function() {
          _this.dataManager.executeQuery(query).then(function(result) {
            deferred_1.resolve(result);
          });
        }).catch(function(e) {
          deferred_1.reject(e);
        });
        return deferred_1.promise;
      } else {
        return this.dataManager.executeQuery(query);
      }
    };
    Data2.prototype.formatGroupColumn = function(value, field) {
      var serviceLocator = this.serviceLocator;
      var column = this.getColumnByField(field);
      var date = value;
      if (!column.type) {
        column.type = date.getDay ? date.getHours() > 0 || date.getMinutes() > 0 || date.getSeconds() > 0 || date.getMilliseconds() > 0 ? "datetime" : "date" : typeof value;
      }
      if (isNullOrUndefined(column.getFormatter())) {
        setFormatter(serviceLocator, column);
      }
      var formatVal = ValueFormatter.prototype.toView(value, column.getFormatter());
      return formatVal;
    };
    Data2.prototype.crudActions = function(args) {
      var query = this.generateQuery();
      var promise = null;
      var pr = "promise";
      var key = this.getKey(args.foreignKeyData && Object.keys(args.foreignKeyData).length ? args.foreignKeyData : this.parent.getPrimaryKeyFieldNames());
      if (this.parent.dataSource && "result" in this.parent.dataSource) {
        this.eventPromise(args, query, key);
      }
      switch (args.requestType) {
        case "save":
          promise = this.dataManager.update(key, args.data, query.fromTable, query, args.previousData);
          break;
      }
      args["" + pr] = promise ? promise : args["" + pr];
      this.parent.notify(crudAction, args);
    };
    Data2.prototype.saveChanges = function(changes, key, original, query) {
      if (query === void 0) {
        query = this.generateQuery();
      }
      query.requiresCount();
      if ("result" in this.parent.dataSource) {
        var deff = new Deferred();
        var args = {
          requestType: "batchsave",
          changes,
          key,
          query,
          endEdit: deff.resolve
        };
        this.setState({
          isPending: true,
          resolver: deff.resolve
        });
        this.parent.trigger(dataSourceChanged, args);
        return deff.promise;
      } else {
        var promise = this.dataManager.saveChanges(changes, key, query.fromTable, query, original);
        return promise;
      }
    };
    Data2.prototype.getKey = function(keys) {
      if (keys && keys.length) {
        return keys[0];
      }
      return void 0;
    };
    Data2.prototype.isRemote = function() {
      return this.dataManager.dataSource.offline !== true && this.dataManager.dataSource.url !== void 0 && this.dataManager.dataSource.url !== "";
    };
    Data2.prototype.addRows = function(e) {
      for (var i = e.records.length; i > 0; i--) {
        if (this.parent.dataSource instanceof DataManager && this.dataManager.dataSource.offline) {
          this.dataManager.dataSource.json.splice(e.toIndex, 0, e.records[i - 1]);
        } else if (!this.parent.getDataModule().isRemote() && !isNullOrUndefined(this.parent.dataSource) && !this.parent.dataSource.result) {
          this.parent.dataSource["splice"](e.toIndex, 0, e.records[i - 1]);
        }
      }
    };
    Data2.prototype.removeRows = function(e) {
      var json = this.dataManager.dataSource.json;
      if (this.parent.dataSource instanceof DataManager && this.dataManager.dataSource.offline) {
        this.dataManager.dataSource.json = json.filter(function(value) {
          return e.records.indexOf(value) === -1;
        });
      } else if (!this.parent.getDataModule().isRemote() && !isNullOrUndefined(this.parent.dataSource) && !this.parent.dataSource.result) {
        this.parent.dataSource = json.filter(function(value) {
          return e.records.indexOf(value) === -1;
        });
      }
    };
    Data2.prototype.getColumnByField = function(field) {
      var col;
      return this.parent.columnModel.some(function(column) {
        col = column;
        return column.field === field;
      }) && col;
    };
    Data2.prototype.destroy = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(rowsAdded, this.addRows);
      this.parent.off(rowsRemoved, this.removeRows);
      this.parent.off(dataSourceModified, this.initDataManager);
      this.parent.off(destroy, this.destroy);
      this.parent.off(updateData, this.crudActions);
      this.parent.off(addDeleteAction, this.getData);
      this.parent.off(autoCol, this.refreshFilteredCols);
      this.parent.off(columnsPrepared, this.refreshFilteredCols);
    };
    Data2.prototype.getState = function() {
      return this.dataState;
    };
    Data2.prototype.setState = function(state) {
      return this.dataState = state;
    };
    Data2.prototype.getForeignKeyDataState = function() {
      return this.foreignKeyDataState;
    };
    Data2.prototype.setForeignKeyDataState = function(state) {
      this.foreignKeyDataState = state;
    };
    Data2.prototype.getStateEventArgument = function(query) {
      var adaptr = new UrlAdaptor();
      var dm = new DataManager({
        url: "",
        adaptor: new UrlAdaptor()
      });
      var state = adaptr.processQuery(dm, query);
      var data = JSON.parse(state.data);
      return extend(data, state.pvtData);
    };
    Data2.prototype.eventPromise = function(args, query, key) {
      var _this = this;
      var dataArgs = args;
      var state = this.getStateEventArgument(query);
      var def = new Deferred();
      var deff = new Deferred();
      if ((args.requestType !== void 0 || this.parent.groupSettings.disablePageWiseAggregates && query.queries.some(function(query2) {
        return query2.fn === "onGroup";
      })) && this.dataState.isDataChanged !== false) {
        state.action = args;
        if (args.requestType === "save" || args.requestType === "delete" || args.requestType === "batchsave") {
          var editArgs_1 = args;
          editArgs_1.key = key;
          var promise = "promise";
          editArgs_1["" + promise] = deff.promise;
          editArgs_1.state = state;
          this.setState({
            isPending: true,
            resolver: deff.resolve
          });
          dataArgs.endEdit = deff.resolve;
          dataArgs.cancelEdit = deff.reject;
          this.parent.trigger(dataSourceChanged, editArgs_1);
          deff.promise.then(function() {
            _this.setState({
              isPending: true,
              resolver: def.resolve,
              group: state.group,
              aggregates: state.aggregates
            });
            if (editArgs_1.requestType === "save") {
              _this.parent.notify(recordAdded, editArgs_1);
            }
            _this.parent.trigger(dataStateChange, state);
          }).catch(function() {
            return void 0;
          });
        } else {
          this.setState({
            isPending: true,
            resolver: def.resolve,
            group: state.group,
            aggregates: state.aggregates
          });
          this.parent.trigger(dataStateChange, state);
        }
      } else {
        this.setState({});
        def.resolve(this.parent.dataSource);
      }
      return def;
    };
    Data2.prototype.getSearchColumnFieldNames = function() {
      var colFieldNames = [];
      var columns = this.parent.getColumns();
      for (var _i = 0, columns_2 = columns; _i < columns_2.length; _i++) {
        var col = columns_2[_i];
        if (col.allowSearching && !isNullOrUndefined(col.field)) {
          colFieldNames.push(col.field);
        }
      }
      return colFieldNames;
    };
    Data2.prototype.refreshFilteredCols = function() {
      if (this.parent.allowFiltering && this.parent.filterSettings.columns.length) {
        refreshFilteredColsUid(this.parent, this.parent.filterSettings.columns);
      }
    };
    return Data2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/models/row.js
var Row = (
  /** @class */
  function() {
    function Row2(options, parent) {
      merge(this, options);
      this.parent = parent;
    }
    Row2.prototype.clone = function() {
      var row2 = new Row2({});
      merge(row2, this);
      row2.cells = this.cells.map(function(cell) {
        return cell.clone();
      });
      return row2;
    };
    Row2.prototype.setRowValue = function(data) {
      if (!this.parent) {
        return;
      }
      var key = this.data[this.parent.getPrimaryKeyFieldNames()[0]];
      this.parent.setRowData(key, data);
    };
    Row2.prototype.setCellValue = function(field, value) {
      if (!this.parent) {
        return;
      }
      var isValDiff = !(this.data["" + field].toString() === value.toString());
      if (isValDiff) {
        var pKeyField = this.parent.getPrimaryKeyFieldNames()[0];
        var key = this.data["" + pKeyField];
        this.parent.setCellValue(key, field, value);
        this.makechanges(pKeyField, this.data);
      } else {
        return;
      }
    };
    Row2.prototype.makechanges = function(key, data) {
      if (!this.parent) {
        return;
      }
      var gObj = this.parent;
      var dataManager = gObj.getDataModule().dataManager;
      dataManager.update(key, data);
    };
    return Row2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/models/cell.js
var Cell = (
  /** @class */
  function() {
    function Cell2(options) {
      this.isSpanned = false;
      this.isRowSpanned = false;
      merge(this, options);
    }
    Cell2.prototype.clone = function() {
      var cell = new Cell2({});
      merge(cell, this);
      return cell;
    };
    return Cell2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/cell-merge-renderer.js
var CellMergeRender = (
  /** @class */
  function() {
    function CellMergeRender2(serviceLocator, parent) {
      this.serviceLocator = serviceLocator;
      this.parent = parent;
    }
    CellMergeRender2.prototype.render = function(cellArgs, row2, i, td) {
      var cellRendererFact = this.serviceLocator.getService("cellRendererFactory");
      var cellRenderer = cellRendererFact.getCellRenderer(row2.cells[parseInt(i.toString(), 10)].cellType || CellType.Data);
      var colSpan = row2.cells[parseInt(i.toString(), 10)].cellSpan ? row2.cells[parseInt(i.toString(), 10)].cellSpan : cellArgs.colSpan ? cellArgs.colSpan + i <= row2.cells.length ? cellArgs.colSpan : row2.cells.length - i : 1;
      var rowSpan = cellArgs.rowSpan;
      var visible = 0;
      var spannedCell;
      if (row2.index > 0) {
        var rowsObject = this.parent.getRowsObject();
        var cells = this.parent.groupSettings.columns.length > 0 && !rowsObject[row2.index - 1].isDataRow ? rowsObject[row2.index].cells : rowsObject[row2.index - 1].cells;
        var targetCell_1 = row2.cells[parseInt(i.toString(), 10)];
        var uid_1 = "uid";
        spannedCell = cells.filter(function(cell) {
          return cell.column.uid === targetCell_1.column["" + uid_1];
        })[0];
      }
      var colSpanLen = spannedCell && spannedCell.colSpanRange > 1 && spannedCell.rowSpanRange > 1 ? spannedCell.colSpanRange : colSpan;
      for (var j = i + 1; j < i + colSpanLen && j < row2.cells.length; j++) {
        if (row2.cells[parseInt(j.toString(), 10)].visible === false) {
          visible++;
        } else {
          row2.cells[parseInt(j.toString(), 10)].isSpanned = true;
        }
      }
      if (visible > 0) {
        for (var j = i + colSpan; j < i + colSpan + visible && j < row2.cells.length; j++) {
          row2.cells[parseInt(j.toString(), 10)].isSpanned = true;
        }
        if (i + colSpan + visible >= row2.cells.length) {
          colSpan -= i + colSpan + visible - row2.cells.length;
        }
      }
      if (row2.cells[parseInt(i.toString(), 10)].cellSpan) {
        row2.data[cellArgs.column.field] = row2.cells[parseInt(i.toString(), 10)].spanText;
        td = cellRenderer.render(row2.cells[parseInt(i.toString(), 10)], row2.data, {
          "index": !isNullOrUndefined(row2.index) ? row2.index.toString() : ""
        });
      }
      if (colSpan > 1) {
        attributes(td, {
          "colSpan": colSpan.toString(),
          "aria-colSpan": colSpan.toString()
        });
      }
      if (rowSpan > 1) {
        attributes(td, {
          "rowspan": rowSpan.toString(),
          "aria-rowspan": rowSpan.toString()
        });
        row2.cells[parseInt(i.toString(), 10)].isRowSpanned = true;
        row2.cells[parseInt(i.toString(), 10)].rowSpanRange = Number(rowSpan);
        if (colSpan > 1) {
          row2.cells[parseInt(i.toString(), 10)].colSpanRange = Number(colSpan);
        }
      }
      if (row2.index > 0 && spannedCell.rowSpanRange > 1) {
        row2.cells[parseInt(i.toString(), 10)].isSpanned = true;
        row2.cells[parseInt(i.toString(), 10)].rowSpanRange = Number(spannedCell.rowSpanRange - 1);
        row2.cells[parseInt(i.toString(), 10)].colSpanRange = spannedCell.rowSpanRange > 0 ? spannedCell.colSpanRange : 1;
      }
      if (this.parent.enableColumnVirtualization && !row2.cells[parseInt(i.toString(), 10)].cellSpan && !this.containsKey(cellArgs.column.field, cellArgs.data[cellArgs.column.field])) {
        this.backupMergeCells(cellArgs.column.field, cellArgs.data[cellArgs.column.field], cellArgs.colSpan);
      }
      return td;
    };
    CellMergeRender2.prototype.backupMergeCells = function(fName, data, span) {
      this.setMergeCells(this.generteKey(fName, data), span);
    };
    CellMergeRender2.prototype.generteKey = function(fname, data) {
      return fname + "__" + data.toString();
    };
    CellMergeRender2.prototype.splitKey = function(key) {
      return key.split("__");
    };
    CellMergeRender2.prototype.containsKey = function(fname, data) {
      return this.getMergeCells().hasOwnProperty(this.generteKey(fname, data));
    };
    CellMergeRender2.prototype.getMergeCells = function() {
      return this.parent.mergeCells;
    };
    CellMergeRender2.prototype.setMergeCells = function(key, span) {
      this.parent.mergeCells["" + key] = span;
    };
    CellMergeRender2.prototype.updateVirtualCells = function(rows) {
      var mCells = this.getMergeCells();
      for (var _i = 0, _a = Object.keys(mCells); _i < _a.length; _i++) {
        var key = _a[_i];
        var value = mCells["" + key];
        var merge2 = this.splitKey(key);
        var columnIndex = this.getIndexFromAllColumns(merge2[0]);
        var vColumnIndices = this.parent.getColumnIndexesInView();
        var span = value - (vColumnIndices[0] - columnIndex);
        if (columnIndex < vColumnIndices[0] && span > 1) {
          for (var _b = 0, rows_1 = rows; _b < rows_1.length; _b++) {
            var row2 = rows_1[_b];
            if (row2.data[merge2[0]].toString() === merge2[1].toString()) {
              row2.cells[0].cellSpan = span;
              row2.cells[0].spanText = merge2[1];
              break;
            }
          }
        }
      }
      return rows;
    };
    CellMergeRender2.prototype.getIndexFromAllColumns = function(field) {
      var index = iterateArrayOrObject(this.parent.getVisibleColumns(), function(item, index2) {
        if (item.field === field) {
          return index2;
        }
        return void 0;
      })[0];
      return index;
    };
    return CellMergeRender2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/base/string-literals.js
var rowCell = "e-rowcell";
var gridHeader = "e-gridheader";
var gridContent = "e-gridcontent";
var gridFooter = "e-gridfooter";
var headerContent = "e-headercontent";
var movableContent = "e-movablecontent";
var movableHeader = "e-movableheader";
var frozenContent = "e-frozencontent";
var frozenHeader = "e-frozenheader";
var content = "e-content";
var table = "e-table";
var row = "e-row";
var gridChkBox = "e-gridchkbox";
var editedRow = "e-editedrow";
var addedRow = "e-addedrow";
var groupCaptionRow = "e-groupcaptionrow";
var changedRecords = "changedRecords";
var addedRecords = "addedRecords";
var deletedRecords = "deletedRecords";
var leftRight = "Left-Right";
var frozenRight = "frozen-right";
var frozenLeft = "frozen-left";
var ariaColIndex = "aria-colindex";
var ariaRowIndex = "aria-rowindex";
var tbody = "tbody";
var colGroup = "colgroup";
var open = "open";
var change = "change";
var focus = "focus";
var create = "created";
var beforeOpen = "beforeOpen";
var downArrow = "downArrow";
var upArrow = "upArrow";
var pageUp = "PageUp";
var pageDown = "PageDown";
var enter = "enter";
var shiftEnter = "shiftEnter";
var tab = "tab";
var shiftTab = "shiftTab";
var initialFrozenColumnIndex = "initialFrozenColumnIndex";

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/row-renderer.js
var RowRenderer = (
  /** @class */
  function() {
    function RowRenderer2(serviceLocator, cellType, parent) {
      this.isSpan = false;
      this.cellType = cellType;
      this.serviceLocator = serviceLocator;
      this.parent = parent;
      this.element = this.parent.createElement("tr", {
        attrs: {
          role: "row"
        }
      });
    }
    RowRenderer2.prototype.render = function(row2, columns, attributes2, rowTemplate, cloneNode) {
      return this.refreshRow(row2, columns, attributes2, rowTemplate, cloneNode);
    };
    RowRenderer2.prototype.refresh = function(row2, columns, isChanged, attributes2, rowTemplate) {
      var _this = this;
      if (isChanged) {
        row2.data = extendObjWithFn({}, row2.changes);
        this.refreshMergeCells(row2);
      }
      var node = this.parent.element.querySelector("[data-uid=" + row2.uid + "]");
      var tr = this.refreshRow(row2, columns, attributes2, rowTemplate, null, isChanged);
      var cells = [].slice.call(tr.cells);
      var tempCells = [].slice.call(node.querySelectorAll(".e-templatecell"));
      if (this.parent.isReact && tempCells.length) {
        var _loop_1 = function(col2) {
          if (col2.template) {
            setTimeout(function() {
              _this.parent.refreshReactColumnTemplateByUid(col2.uid, true);
            }, 0);
            return "break";
          }
        };
        for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
          var col = columns_1[_i];
          var state_1 = _loop_1(col);
          if (state_1 === "break") break;
        }
      }
      var attr = [].slice.call(tr.attributes);
      attr.map(function(item) {
        node.setAttribute(item["name"], item["value"]);
      });
      node.innerHTML = "";
      for (var _a = 0, cells_1 = cells; _a < cells_1.length; _a++) {
        var cell = cells_1[_a];
        node.appendChild(cell);
      }
    };
    RowRenderer2.prototype.refreshRow = function(row2, columns, attributes2, rowTemplate, cloneNode, isEdit) {
      var tr = !isNullOrUndefined(cloneNode) ? cloneNode : this.element.cloneNode();
      var rowArgs = {
        data: row2.data
      };
      var cellArgs = {
        data: row2.data
      };
      var chekBoxEnable = this.parent.getColumns().filter(function(col) {
        return col.type === "checkbox" && col.field;
      })[0];
      var value = false;
      var isFrozen = this.parent.isFrozenGrid();
      var isFirstVisibleCell = true;
      if (chekBoxEnable) {
        value = getObject(chekBoxEnable.field, rowArgs.data);
      }
      var selIndex = this.parent.getSelectedRowIndexes();
      if (row2.isDataRow) {
        row2.isSelected = selIndex.indexOf(row2.index) > -1 || value;
      }
      if (row2.isDataRow && this.parent.isCheckBoxSelection && this.parent.checkAllRows === "Check" && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling)) {
        row2.isSelected = true;
        if (selIndex.indexOf(row2.index) === -1) {
          selIndex.push(row2.index);
        }
      }
      this.buildAttributeFromRow(tr, row2);
      attributes(tr, extend({}, attributes2, {}));
      setStyleAndAttributes(tr, row2.attributes);
      var cellRendererFact = this.serviceLocator.getService("cellRendererFactory");
      var _loop_2 = function(i2, len2) {
        var cell = row2.cells[parseInt(i2.toString(), 10)];
        cell.isSelected = row2.isSelected;
        cell.isColumnSelected = cell.column.isSelected;
        var cellRenderer = cellRendererFact.getCellRenderer(row2.cells[parseInt(i2.toString(), 10)].cellType || CellType.Data);
        var attrs = {
          "index": !isNullOrUndefined(row2.index) ? row2.index.toString() : ""
        };
        if (row2.isExpand && row2.cells[parseInt(i2.toString(), 10)].cellType === CellType.DetailExpand) {
          attrs["class"] = this_1.parent.isPrinting ? "e-detailrowcollapse" : "e-detailrowexpand";
        }
        var isGroupFirstCell = !this_1.parent.enableRtl && this_1.parent.groupSettings && isFirstVisibleCell && this_1.parent.groupSettings.columns.length && (this_1.parent.gridLines === "Vertical" || this_1.parent.gridLines === "Both");
        var td2 = cellRenderer.render(row2.cells[parseInt(i2.toString(), 10)], row2.data, attrs, row2.isExpand, isEdit);
        if (row2.cells[parseInt(i2.toString(), 10)].cellType !== CellType.Filter) {
          if (row2.cells[parseInt(i2.toString(), 10)].cellType === CellType.Data || row2.cells[parseInt(i2.toString(), 10)].cellType === CellType.CommandColumn) {
            if (cell.visible && isGroupFirstCell) {
              td2.classList.add("e-grid-group-first-cell");
              isFirstVisibleCell = false;
            }
            var isReactChild2 = this_1.parent.parentDetails && this_1.parent.parentDetails.parentInstObj && this_1.parent.parentDetails.parentInstObj.isReact;
            var isReactPrintGrid = this_1.parent.printGridParent && this_1.parent.printGridParent.isReact;
            if ((this_1.parent.isReact && this_1.parent.requireTemplateRef || isReactChild2 && this_1.parent.parentDetails.parentInstObj.requireTemplateRef || isReactPrintGrid && this_1.parent.printGridParent.requireTemplateRef) && cell.isTemplate) {
              var thisRef_1 = this_1;
              thisRef_1.parent.renderTemplates(function() {
                if (typeof cell.column.template !== "string") {
                  var ariaAttr = td2.getAttribute("aria-label");
                  td2.setAttribute("aria-label", td2.innerText + ariaAttr);
                }
                thisRef_1.parent.trigger(queryCellInfo, extend(cellArgs, {
                  cell: td2,
                  column: cell.column,
                  colSpan: 1,
                  rowSpan: 1,
                  foreignKeyData: row2.cells[parseInt(i2.toString(), 10)].foreignKeyData,
                  requestType: thisRef_1.parent.requestTypeAction
                }));
              });
            } else {
              this_1.parent.trigger(queryCellInfo, extend(cellArgs, {
                cell: td2,
                column: cell.column,
                colSpan: 1,
                rowSpan: 1,
                foreignKeyData: row2.cells[parseInt(i2.toString(), 10)].foreignKeyData,
                requestType: this_1.parent.requestTypeAction
              }));
            }
            var isRowSpanned = false;
            if (row2.index > 0 && (this_1.isSpan || this_1.parent.isSpan && isEdit)) {
              var rowsObject = this_1.parent.getRowsObject();
              var prevRowCells = this_1.parent.groupSettings.columns.length > 0 && !rowsObject[row2.index - 1].isDataRow ? rowsObject[row2.index].cells : rowsObject[row2.index - 1].cells;
              var uid_1 = "uid";
              var prevRowCell = prevRowCells.filter(function(cell2) {
                return cell2.column.uid === row2.cells[parseInt(i2.toString(), 10)].column["" + uid_1];
              })[0];
              isRowSpanned = prevRowCell.isRowSpanned ? prevRowCell.isRowSpanned : prevRowCell.rowSpanRange > 1;
            }
            if (cellArgs.rowSpan > 1 || cellArgs.colSpan > 1) {
              this_1.resetrowSpanvalue(this_1.parent.frozenRows > row2.index ? this_1.parent.frozenRows : this_1.parent.currentViewData.length, cellArgs, row2.index);
              if (cellArgs.column.visible === false) {
                cellArgs.colSpan = 1;
              } else {
                if (isFrozen) {
                  var columns_2 = this_1.parent.getColumns();
                  var right = this_1.parent.getFrozenRightColumnsCount();
                  var left = this_1.parent.getFrozenLeftCount();
                  var movableCount = columns_2.length - right;
                  var cellIdx = cellArgs.column.index;
                  if (left > cellIdx && left < cellIdx + cellArgs.colSpan) {
                    var colSpan = cellIdx + cellArgs.colSpan - left;
                    cellArgs.colSpan = cellArgs.colSpan - colSpan;
                  } else if (movableCount <= cellIdx && columns_2.length < cellIdx + cellArgs.colSpan) {
                    var colSpan = cellIdx + cellArgs.colSpan - columns_2.length;
                    cellArgs.colSpan = cellArgs.colSpan - colSpan;
                  } else if (cellArgs.column.freeze === "Fixed") {
                    var colSpan = 1;
                    var index = cellIdx;
                    for (var j2 = index + 1; j2 < index + cellArgs.colSpan; j2++) {
                      if (columns_2[parseInt(j2.toString(), 10)].freeze === "Fixed") {
                        colSpan++;
                      } else {
                        break;
                      }
                    }
                    cellArgs.colSpan = colSpan;
                  } else if (movableCount > cellIdx && movableCount < cellIdx + cellArgs.colSpan) {
                    var colSpan = cellIdx + cellArgs.colSpan - movableCount;
                    cellArgs.colSpan = cellArgs.colSpan - colSpan;
                  }
                }
              }
            }
            if (cellArgs.colSpan > 1 || row2.cells[parseInt(i2.toString(), 10)].cellSpan > 1 || cellArgs.rowSpan > 1 || isRowSpanned) {
              this_1.parent.isSpan = true;
              this_1.isSpan = true;
              var cellMerge = new CellMergeRender(this_1.serviceLocator, this_1.parent);
              td2 = cellMerge.render(cellArgs, row2, i2, td2);
              if (isFrozen) {
                resetColandRowSpanStickyPosition(this_1.parent, cellArgs.column, td2, cellArgs.colSpan);
              }
            }
          }
          if ((cell.cellType === CellType.Header || cell.cellType === CellType.StackedHeader) && isGroupFirstCell && (cell.visible || cell.cellType === CellType.StackedHeader)) {
            var visibleColumns = this_1.parent.getVisibleColumns();
            var field = "field";
            var type = "type";
            if (cell.column["" + type] && cell.column["" + type] === "checkbox" || cell.cellType === CellType.Header && cell.column["" + field] && visibleColumns.length && visibleColumns[0].field === cell.column["" + field] || cell.cellType === CellType.StackedHeader) {
              td2.classList.add("e-grid-group-first-cell");
              isFirstVisibleCell = false;
            }
          }
          if (cell.cellType === CellType.Header && (row2.cells[parseInt(i2.toString(), 10)].colSpan > 1 || row2.cells[parseInt(i2.toString(), 10)].rowSpan > 1)) {
            var cellMerge = new CellMergeRender(this_1.serviceLocator, this_1.parent);
            td2 = cellMerge.render(row2.cells[parseInt(i2.toString(), 10)], row2, i2, td2);
          }
          if (this_1.isSpan) {
            var rowsObject = this_1.parent.getRowsObject();
            var isRtl = this_1.parent.enableRtl;
            if (rowsObject[row2.index - 1]) {
              var prevRowCells = rowsObject[row2.index - 1].cells;
              var prevRowCell = prevRowCells[i2 - 1];
              var currentRowCell = prevRowCells[parseInt(i2.toString(), 10)];
              var nextRowCell = prevRowCells[i2 + 1];
              var direction = prevRowCells[parseInt(i2.toString(), 10)].column.freeze;
              if (prevRowCell && (prevRowCell.isRowSpanned || prevRowCell.rowSpanRange > 1) && prevRowCell.visible) {
                if (!isRtl && (!currentRowCell.isRowSpanned || prevRowCell.rowSpanRange > currentRowCell.rowSpanRange)) {
                  td2.classList.add("e-rowcell-firstchild");
                }
                if (isFrozen) {
                  if (prevRowCell.column.freeze === "Fixed" && direction === "Fixed") {
                    td2.classList.add(isRtl ? "e-removefreezerightborder" : "e-removefreezeleftborder");
                  } else if (!isRtl && i2 === 1 && direction === "Left") {
                    td2.classList.add("e-addfreezefirstchildborder");
                  }
                }
              }
              if (nextRowCell && (nextRowCell.isRowSpanned || nextRowCell.rowSpanRange > 1) && nextRowCell.visible) {
                if (isRtl && (!currentRowCell.isRowSpanned || nextRowCell.rowSpanRange > currentRowCell.rowSpanRange)) {
                  td2.classList.add("e-rowcell-lastchild");
                }
                if (isFrozen && nextRowCell.column.freeze === "Fixed" && direction === "Fixed" && cellArgs.colSpan < 2) {
                  td2.classList.add(isRtl ? "e-removefreezeleftborder" : "e-removefreezerightborder");
                }
              }
            }
          }
          if (cellArgs.rowSpan > 1 && this_1.parent.currentViewData.length - row2.index === cellArgs.rowSpan) {
            td2.classList.add("e-row-span-lastrowcell");
          }
          if (!row2.cells[parseInt(i2.toString(), 10)].isSpanned) {
            tr.appendChild(td2);
          }
        }
      };
      var this_1 = this;
      for (var i = 0, len = row2.cells.length; i < len; i++) {
        _loop_2(i, len);
      }
      var emptyColspan = 0;
      if (this.parent.groupSettings.columns.length && this.parent.getFrozenLeftColumnsCount()) {
        if (tr.classList.contains("e-groupcaptionrow")) {
          var freezeCells = [].slice.call(tr.querySelectorAll(".e-leftfreeze,.e-unfreeze,.e-rightfreeze,.e-fixedfreeze,.e-freezerightborder,.e-freezeleftborder"));
          if (freezeCells.length) {
            removeClass(freezeCells, ["e-leftfreeze", "e-unfreeze", "e-rightfreeze", "e-fixedfreeze", "e-freezerightborder", "e-freezeleftborder"]);
          }
          if (tr.querySelector(".e-summarycell")) {
            groupCaptionRowLeftRightPos(tr, this.parent);
          } else {
            for (var j = 0; j < tr.childNodes.length; j++) {
              var td = tr.childNodes[parseInt(j.toString(), 10)];
              td.classList.add("e-leftfreeze");
              applyStickyLeftRightPosition(td, j * 30, this.parent.enableRtl, "Left");
              if (td.classList.contains("e-groupcaption")) {
                var oldColspan = parseInt(td.getAttribute("colspan"), 10);
                var colspan = resetColspanGroupCaption(this.parent, j);
                td.setAttribute("colspan", colspan.toString());
                emptyColspan = oldColspan - colspan;
              }
            }
            if (emptyColspan) {
              var td = this.parent.createElement("TD", {
                className: "e-groupcaption",
                attrs: {
                  colspan: emptyColspan.toString(),
                  id: this.parent.element.id + "captioncell",
                  tabindex: "-1"
                }
              });
              tr.appendChild(td);
            }
          }
        }
        if ((tr.querySelectorAll(".e-leftfreeze").length || tr.classList.contains("e-columnheader")) && (tr.querySelectorAll(".e-indentcell").length || tr.querySelectorAll(".e-grouptopleftcell").length)) {
          var td = tr.querySelectorAll(".e-indentcell, .e-grouptopleftcell");
          for (var i = 0; i < td.length; i++) {
            td[parseInt(i.toString(), 10)].classList.add("e-leftfreeze");
            applyStickyLeftRightPosition(td[parseInt(i.toString(), 10)], i * 30, this.parent.enableRtl, "Left");
          }
        }
      }
      var args = {
        row: tr,
        rowHeight: this.parent.rowHeight
      };
      if (row2.isDataRow) {
        var eventArg_1 = extend(rowArgs, args);
        eventArg_1.isSelectable = true;
        var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
        var cellTemplate = eventArg_1.row.querySelectorAll(".e-templatecell");
        if ((this.parent.isReact && this.parent.requireTemplateRef || isReactChild && this.parent.parentDetails.parentInstObj.requireTemplateRef) && cellTemplate.length) {
          var thisRef_2 = this;
          thisRef_2.parent.renderTemplates(function() {
            thisRef_2.parent.trigger(rowDataBound, eventArg_1);
            if (!eventArg_1.isSelectable) {
              row2.isSelectable = eventArg_1.isSelectable;
              thisRef_2.disableRowSelection(thisRef_2, row2, args, eventArg_1);
            }
          });
        } else {
          this.parent.trigger(rowDataBound, eventArg_1);
        }
        row2.isSelectable = eventArg_1.isSelectable;
        var isDraggable = this.parent.isRowDragable();
        if (this.parent.allowPaging && this.parent.selectionSettings.persistSelection) {
          var primaryKey_1 = this.parent.getPrimaryKeyFieldNames()[0];
          var pKey_1 = row2.data ? row2.data["" + primaryKey_1] : null;
          var SelectedRecords = eventArg_1.isSelectable ? this.parent.partialSelectedRecords : this.parent.disableSelectedRecords;
          if (!SelectedRecords.some(function(data) {
            return data["" + primaryKey_1] === pKey_1;
          })) {
            SelectedRecords.push(row2.data);
          }
        }
        if (!eventArg_1.isSelectable) {
          this.disableRowSelection(this, row2, args, eventArg_1);
        }
        if (this.parent.childGrid || isDraggable || this.parent.detailTemplate) {
          var td = tr.querySelectorAll(".e-rowcell:not(.e-hide)")[0];
          if (td) {
            td.classList.add("e-detailrowvisible");
          }
        }
      }
      if (this.parent.enableVirtualization) {
        rowArgs.rowHeight = this.parent.rowHeight;
      }
      if (rowArgs.rowHeight) {
        tr.style.height = rowArgs.rowHeight + "px";
      } else if (this.parent.rowHeight && (tr.querySelector(".e-headercell") || tr.querySelector(".e-groupcaption"))) {
        tr.style.height = this.parent.rowHeight + "px";
      }
      if (row2.cssClass) {
        tr.classList.add(row2.cssClass);
      }
      if (row2.lazyLoadCssClass) {
        tr.classList.add(row2.lazyLoadCssClass);
      }
      if (this.parent.rowRenderingMode === "Vertical" && this.parent.allowTextWrap && (this.parent.textWrapSettings.wrapMode === "Header" || this.parent.textWrapSettings.wrapMode === "Both")) {
        tr.classList.add("e-verticalwrap");
      }
      var vFTable = this.parent.enableColumnVirtualization;
      if (!vFTable && this.parent.aggregates.length && this.parent.element.scrollHeight > this.parent.height) {
        for (var i = 0; i < this.parent.aggregates.length; i++) {
          var property = "properties";
          var column = "columns";
          if (this.parent.aggregates[parseInt(i.toString(), 10)]["" + property]["" + column][0].footerTemplate) {
            var summarycell = [].slice.call(tr.getElementsByClassName("e-summarycell"));
            if (summarycell.length) {
              var lastSummaryCell = summarycell[summarycell.length - 1];
              addClass([lastSummaryCell], ["e-lastsummarycell"]);
              var firstSummaryCell = summarycell[0];
              addClass([firstSummaryCell], ["e-firstsummarycell"]);
            }
          }
        }
      }
      return tr;
    };
    RowRenderer2.prototype.resetrowSpanvalue = function(rowCount, cellArgs, rowIndex) {
      if (rowCount > rowIndex && rowCount < rowIndex + cellArgs.rowSpan) {
        var rowSpan = rowIndex + cellArgs.rowSpan - rowCount;
        cellArgs.rowSpan = cellArgs.rowSpan - rowSpan;
      }
    };
    RowRenderer2.prototype.disableRowSelection = function(thisRef, row2, args, eventArg) {
      var selIndex = this.parent.getSelectedRowIndexes();
      this.parent.selectionModule.isPartialSelection = true;
      row2.isSelected = false;
      var selRowIndex = selIndex.indexOf(row2.index);
      if (selRowIndex > -1) {
        selIndex.splice(selRowIndex, 1);
      }
      var chkBox = args.row.querySelectorAll(".e-rowcell.e-gridchkbox");
      var isDrag = eventArg.row.querySelector(".e-rowdragdrop");
      var cellIdx = thisRef.parent.groupSettings.columns.length + (isDrag || thisRef.parent.isDetail() ? 1 : 0);
      for (var i = 0; i < chkBox.length; i++) {
        chkBox[parseInt(i.toString(), 10)].firstElementChild.classList.add("e-checkbox-disabled");
        chkBox[parseInt(i.toString(), 10)].querySelector(".e-frame").classList.remove("e-check");
      }
      if (row2.cells.length) {
        for (var i = cellIdx; i < row2.cells.length; i++) {
          var cell = eventArg.row.querySelector('.e-rowcell[aria-colindex="' + (row2.cells[parseInt(i.toString(), 10)].index + 1) + '"]');
          if (cell) {
            removeClass([cell], ["e-selectionbackground", "e-active"]);
          }
        }
      }
      if (isDrag) {
        removeClass([isDrag], ["e-selectionbackground", "e-active"]);
      }
    };
    RowRenderer2.prototype.refreshMergeCells = function(row2) {
      for (var _i = 0, _a = row2.cells; _i < _a.length; _i++) {
        var cell = _a[_i];
        cell.isSpanned = false;
      }
      return row2;
    };
    RowRenderer2.prototype.buildAttributeFromRow = function(tr, row2) {
      var attr = {};
      var prop = {
        "dataUID": "data-uid",
        "ariaSelected": "aria-selected"
      };
      var classes = [];
      if (row2.isDataRow) {
        classes.push(row);
      }
      if (row2.isAltRow) {
        classes.push("e-altrow");
      }
      if (row2.isCaptionRow) {
        classes.push("e-groupcaptionrow");
      }
      if (row2.isAggregateRow && row2.parentUid) {
        classes.push("e-groupfooterrow");
      }
      if (!isNullOrUndefined(row2.index)) {
        attr[ariaRowIndex] = row2.index + 1;
      }
      if (row2.rowSpan) {
        attr.rowSpan = row2.rowSpan;
      }
      if (row2.uid) {
        attr[prop.dataUID] = row2.uid;
      }
      if (row2.isSelected) {
        attr[prop.ariaSelected] = true;
      }
      if (row2.visible === false) {
        classes.push("e-hide");
      }
      attr.class = classes;
      setStyleAndAttributes(tr, attr);
    };
    return RowRenderer2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/services/row-model-generator.js
var RowModelGenerator = (
  /** @class */
  function() {
    function RowModelGenerator2(parent) {
      this.parent = parent;
    }
    RowModelGenerator2.prototype.generateRows = function(data, args) {
      var rows = [];
      var startIndex = this.parent.enableVirtualization && args ? args.startIndex : 0;
      startIndex = this.parent.enableInfiniteScrolling && args ? this.getInfiniteIndex(args) : startIndex;
      if (this.parent.enableImmutableMode && args && args.startIndex) {
        startIndex = args.startIndex;
      }
      for (var i = 0, len = Object.keys(data).length; i < len; i++, startIndex++) {
        rows[parseInt(i.toString(), 10)] = this.generateRow(data[parseInt(i.toString(), 10)], startIndex);
      }
      return rows;
    };
    RowModelGenerator2.prototype.ensureColumns = function() {
      var cols = [];
      if (this.parent.detailTemplate || this.parent.childGrid) {
        var args = {};
        this.parent.notify(detailIndentCellInfo, args);
        cols.push(this.generateCell(args, null, CellType.DetailExpand));
      }
      if (this.parent.isRowDragable()) {
        cols.push(this.generateCell({}, null, CellType.RowDragIcon));
      }
      return cols;
    };
    RowModelGenerator2.prototype.generateRow = function(data, index, cssClass2, indent, pid, tIndex, parentUid) {
      var options = {};
      options.foreignKeyData = {};
      options.uid = getUid("grid-row");
      options.data = data;
      options.index = index;
      options.indent = indent;
      options.tIndex = tIndex;
      options.isDataRow = true;
      options.parentGid = pid;
      options.parentUid = parentUid;
      if (this.parent.isPrinting) {
        if (this.parent.hierarchyPrintMode === "All") {
          options.isExpand = true;
        } else if (this.parent.hierarchyPrintMode === "Expanded" && this.parent.expandedRows && this.parent.expandedRows[parseInt(index.toString(), 10)]) {
          options.isExpand = this.parent.expandedRows[parseInt(index.toString(), 10)].isExpand;
        }
      }
      options.cssClass = cssClass2;
      options.isAltRow = this.parent.enableAltRow ? index % 2 !== 0 : false;
      options.isAltRow = this.parent.enableAltRow ? index % 2 !== 0 : false;
      options.isSelected = this.parent.getSelectedRowIndexes().indexOf(index) > -1;
      this.refreshForeignKeyRow(options);
      var cells = this.ensureColumns();
      var row2 = new Row(options, this.parent);
      row2.cells = this.parent.getFrozenMode() === "Right" ? this.generateCells(options).concat(cells) : cells.concat(this.generateCells(options));
      return row2;
    };
    RowModelGenerator2.prototype.refreshForeignKeyRow = function(options) {
      var foreignKeyColumns = this.parent.getForeignKeyColumns();
      for (var i = 0; i < foreignKeyColumns.length; i++) {
        setValue(foreignKeyColumns[parseInt(i.toString(), 10)].field, getForeignData(foreignKeyColumns[parseInt(i.toString(), 10)], options.data), options.foreignKeyData);
      }
    };
    RowModelGenerator2.prototype.generateCells = function(options) {
      var dummies = this.parent.getColumns();
      var tmp = [];
      for (var i = 0; i < dummies.length; i++) {
        tmp.push(this.generateCell(dummies[parseInt(i.toString(), 10)], options.uid, isNullOrUndefined(dummies[parseInt(i.toString(), 10)].commands) ? void 0 : CellType.CommandColumn, null, i, options.foreignKeyData));
      }
      return tmp;
    };
    RowModelGenerator2.prototype.generateCell = function(column, rowId, cellType, colSpan, oIndex, foreignKeyData2) {
      var opt = {
        "visible": column.visible,
        "isDataCell": !isNullOrUndefined(column.field || column.template),
        "isTemplate": !isNullOrUndefined(column.template),
        "rowID": rowId,
        "column": column,
        "cellType": !isNullOrUndefined(cellType) ? cellType : CellType.Data,
        "colSpan": colSpan,
        "commands": column.commands,
        "isForeignKey": column.isForeignColumn && column.isForeignColumn(),
        "foreignKeyData": column.isForeignColumn && column.isForeignColumn() && getValue(column.field, foreignKeyData2)
      };
      if (opt.isDataCell || opt.column.type === "checkbox" || opt.commands) {
        opt.index = oIndex;
      }
      return new Cell(opt);
    };
    RowModelGenerator2.prototype.refreshRows = function(input) {
      for (var i = 0; i < input.length; i++) {
        this.refreshForeignKeyRow(input[parseInt(i.toString(), 10)]);
        input[parseInt(i.toString(), 10)].cells = this.generateCells(input[parseInt(i.toString(), 10)]);
      }
      return input;
    };
    RowModelGenerator2.prototype.getInfiniteIndex = function(args) {
      return args.requestType === "infiniteScroll" || args.requestType === "delete" || args.action === "add" ? isNullOrUndefined(args.startIndex) ? args["index"] : args.startIndex : 0;
    };
    return RowModelGenerator2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/services/summary-model-generator.js
var __extends = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var SummaryModelGenerator = (
  /** @class */
  function() {
    function SummaryModelGenerator2(parent) {
      this.parent = parent;
    }
    SummaryModelGenerator2.prototype.getData = function() {
      var _this = this;
      var rows = [];
      var row2 = this.parent.aggregates.slice();
      for (var i = 0; i < row2.length; i++) {
        var columns = row2[parseInt(i.toString(), 10)].columns.filter(function(column) {
          return !(column.footerTemplate || column.groupFooterTemplate || column.groupCaptionTemplate) || _this.columnSelector(column);
        });
        if (columns.length) {
          rows.push({
            columns
          });
        }
      }
      return rows;
    };
    SummaryModelGenerator2.prototype.columnSelector = function(column) {
      return column.footerTemplate !== void 0;
    };
    SummaryModelGenerator2.prototype.getColumns = function(start) {
      var columns = [];
      if (this.parent.detailTemplate || !isNullOrUndefined(this.parent.childGrid)) {
        columns.push(new Column({}));
      }
      if (this.parent.allowGrouping) {
        for (var i = 0; i < this.parent.groupSettings.columns.length; i++) {
          columns.push(new Column({}));
        }
      }
      if (this.parent.isRowDragable() && !start) {
        columns.push(new Column({}));
      }
      columns.push.apply(columns, this.parent.getColumns());
      return columns;
    };
    SummaryModelGenerator2.prototype.generateRows = function(input, args, start, end, columns) {
      if (input.length === 0) {
        if (args === void 0 || !(args.count || args.loadSummaryOnEmpty)) {
          return [];
        }
      }
      var data = this.buildSummaryData(input, args);
      var rows = [];
      var row2 = this.getData();
      for (var i = 0; i < row2.length; i++) {
        rows.push(this.getGeneratedRow(row2[parseInt(i.toString(), 10)], data[parseInt(i.toString(), 10)], args ? args.level : void 0, start, end, args ? args.parentUid : void 0, columns));
      }
      return rows;
    };
    SummaryModelGenerator2.prototype.getGeneratedRow = function(summaryRow, data, raw, start, end, parentUid, columns) {
      var tmp = [];
      var indents = this.getIndentByLevel();
      var isDetailGridAlone = !isNullOrUndefined(this.parent.childGrid);
      var indentLength = this.parent.getIndentCount();
      if (this.parent.groupSettings.columns.length && this.parent.allowRowDragAndDrop) {
        indents.push("e-indentcelltop");
      } else if (this.parent.isRowDragable() && !start) {
        indents = ["e-indentcelltop"];
      }
      var values = columns ? columns : this.getColumns(start);
      for (var i = 0; i < values.length; i++) {
        tmp.push(this.getGeneratedCell(values[parseInt(i.toString(), 10)], summaryRow, i >= indentLength ? this.getCellType() : i === 0 && this.parent.childGrid ? CellType.DetailFooterIntent : CellType.Indent, indents[parseInt(i.toString(), 10)], isDetailGridAlone));
      }
      var row2 = new Row({
        data,
        attributes: {
          class: "e-summaryrow"
        }
      });
      row2.cells = tmp;
      row2.uid = getUid("grid-row");
      row2.parentUid = parentUid;
      row2.isAggregateRow = true;
      row2.visible = tmp.some(function(cell) {
        return cell.isDataCell && cell.visible;
      });
      return row2;
    };
    SummaryModelGenerator2.prototype.getGeneratedCell = function(column, summaryRow, cellType, indent, isDetailGridAlone) {
      var sColumn = summaryRow.columns.filter(function(scolumn) {
        return scolumn.columnName === column.field;
      })[0];
      var attrs = {
        "e-mappinguid": column.uid,
        index: column.index
      };
      if (column.textAlign) {
        var alignmentClassMap = {
          right: "e-rightalign",
          left: "e-leftalign",
          center: "e-centeralign",
          justify: "e-justifyalign"
        };
        if (alignmentClassMap[column.textAlign.toLowerCase()]) {
          attrs.class = alignmentClassMap[column.textAlign.toLowerCase()];
        }
      }
      if (indent) {
        attrs.class = indent;
      }
      if (isNullOrUndefined(indent) && isDetailGridAlone) {
        attrs.class = "e-detailindentcelltop";
      }
      var opt = {
        "visible": column.visible,
        "isDataCell": !isNullOrUndefined(sColumn),
        "isTemplate": sColumn && !isNullOrUndefined(sColumn.footerTemplate || sColumn.groupFooterTemplate || sColumn.groupCaptionTemplate),
        "column": sColumn || {},
        "attributes": attrs,
        "cellType": cellType
      };
      opt.column.headerText = column.headerText;
      return new Cell(opt);
    };
    SummaryModelGenerator2.prototype.buildSummaryData = function(data, args) {
      var dummy = [];
      var summaryRows = this.getData();
      var single = {};
      for (var i = 0; i < summaryRows.length; i++) {
        single = {};
        var column = summaryRows[parseInt(i.toString(), 10)].columns;
        for (var j = 0; j < column.length; j++) {
          single = this.setTemplate(column[parseInt(j.toString(), 10)], args && args.aggregates ? args : data, single);
        }
        dummy.push(single);
      }
      return dummy;
    };
    SummaryModelGenerator2.prototype.getIndentByLevel = function() {
      return this.parent.groupSettings.columns.map(function() {
        return "e-indentcelltop";
      });
    };
    SummaryModelGenerator2.prototype.setTemplate = function(column, data, single) {
      var types = column.type;
      var helper = {};
      var formatFn = column.getFormatter() || /* @__PURE__ */ function() {
        return function(a) {
          return a;
        };
      }();
      var group = data;
      if (!(types instanceof Array)) {
        types = [column.type];
      }
      for (var i = 0; i < types.length; i++) {
        var key = column.field + " - " + types[parseInt(i.toString(), 10)].toLowerCase();
        var disp = column.columnName;
        var disablePageWiseAggregatesGroup = this.parent.groupSettings.disablePageWiseAggregates && this.parent.groupSettings.columns.length && group.items ? true : false;
        var val = (types[parseInt(i.toString(), 10)] !== "Custom" || disablePageWiseAggregatesGroup) && group.aggregates && key in group.aggregates ? group.aggregates["" + key] : calculateAggregate(types[parseInt(i.toString(), 10)], group.aggregates ? group : data, column, this.parent);
        single["" + disp] = single["" + disp] || {};
        single["" + disp]["" + key] = val;
        single["" + disp][types[parseInt(i.toString(), 10)]] = !isNullOrUndefined(val) ? formatFn(val) : " ";
        if (group.field) {
          single["" + disp].field = group.field;
          single["" + disp].key = group.key;
        }
      }
      helper.format = column.getFormatter();
      column.setTemplate(helper);
      return single;
    };
    SummaryModelGenerator2.prototype.getCellType = function() {
      return CellType.Summary;
    };
    return SummaryModelGenerator2;
  }()
);
var GroupSummaryModelGenerator = (
  /** @class */
  function(_super) {
    __extends(GroupSummaryModelGenerator2, _super);
    function GroupSummaryModelGenerator2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    GroupSummaryModelGenerator2.prototype.columnSelector = function(column) {
      return column.groupFooterTemplate !== void 0;
    };
    GroupSummaryModelGenerator2.prototype.getIndentByLevel = function(level) {
      if (level === void 0) {
        level = this.parent.groupSettings.columns.length;
      }
      if (this.parent.allowRowDragAndDrop && this.parent.groupSettings.columns.length) {
        level -= 1;
      }
      return this.parent.groupSettings.columns.map(function(v, indx) {
        return indx <= level - 1 ? "" : "e-indentcelltop";
      });
    };
    GroupSummaryModelGenerator2.prototype.getCellType = function() {
      return CellType.GroupSummary;
    };
    return GroupSummaryModelGenerator2;
  }(SummaryModelGenerator)
);
var CaptionSummaryModelGenerator = (
  /** @class */
  function(_super) {
    __extends(CaptionSummaryModelGenerator2, _super);
    function CaptionSummaryModelGenerator2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    CaptionSummaryModelGenerator2.prototype.columnSelector = function(column) {
      return column.groupCaptionTemplate !== void 0;
    };
    CaptionSummaryModelGenerator2.prototype.getData = function() {
      var initVal = {
        columns: []
      };
      return [_super.prototype.getData.call(this).reduce(function(prev, cur) {
        prev.columns = prev.columns.concat(cur.columns);
        return prev;
      }, initVal)];
    };
    CaptionSummaryModelGenerator2.prototype.isEmpty = function() {
      return (this.getData()[0].columns || []).length === 0;
    };
    CaptionSummaryModelGenerator2.prototype.getCellType = function() {
      return CellType.CaptionSummary;
    };
    return CaptionSummaryModelGenerator2;
  }(SummaryModelGenerator)
);

// node_modules/@syncfusion/ej2-grids/src/grid/services/group-model-generator.js
var __extends2 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var GroupModelGenerator = (
  /** @class */
  function(_super) {
    __extends2(GroupModelGenerator2, _super);
    function GroupModelGenerator2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.rows = [];
      _this.index = 0;
      _this.infiniteChildCount = 0;
      _this.renderInfiniteAgg = true;
      _this.parent = parent;
      _this.summaryModelGen = new GroupSummaryModelGenerator(parent);
      _this.captionModelGen = new CaptionSummaryModelGenerator(parent);
      return _this;
    }
    GroupModelGenerator2.prototype.generateRows = function(data, args) {
      if (this.parent.groupSettings.columns.length === 0) {
        return _super.prototype.generateRows.call(this, data, args);
      }
      this.isInfiniteScroll = args.requestType === "infiniteScroll";
      this.rows = [];
      this.index = this.parent.enableVirtualization || this.isInfiniteScroll ? args.startIndex : 0;
      for (var i = 0, len = data.length; i < len; i++) {
        this.infiniteChildCount = 0;
        this.renderInfiniteAgg = true;
        this.getGroupedRecords(0, data[parseInt(i.toString(), 10)], data.level, i, void 0, this.rows.length);
      }
      this.index = 0;
      if (this.parent.isCollapseStateEnabled()) {
        this.ensureRowVisibility();
      }
      return this.rows;
    };
    GroupModelGenerator2.prototype.getGroupedRecords = function(index, data, raw, parentid, childId, tIndex, parentUid) {
      var _a;
      var level = raw;
      if (isNullOrUndefined(data.items)) {
        if (isNullOrUndefined(data.GroupGuid)) {
          this.rows = this.rows.concat(this.generateDataRows(data, index, parentid, this.rows.length, parentUid));
        } else {
          for (var j = 0, len = data.length; j < len; j++) {
            this.getGroupedRecords(index, data[parseInt(j.toString(), 10)], data.level, parentid, index, this.rows.length, parentUid);
          }
        }
      } else {
        var preCaption = void 0;
        var captionRow = this.generateCaptionRow(data, index, parentid, childId, tIndex, parentUid);
        if (this.isInfiniteScroll) {
          preCaption = this.getPreCaption(index, captionRow.data.key);
        }
        if (!preCaption) {
          this.rows = this.rows.concat(captionRow);
        } else {
          captionRow.uid = preCaption.uid;
        }
        if (data.items && data.items.length) {
          this.getGroupedRecords(index + 1, data.items, data.items.level, parentid, index + 1, this.rows.length, captionRow.uid);
        }
        if (this.parent.aggregates.length && this.isRenderAggregate(captionRow)) {
          var rowCnt = this.rows.length;
          (_a = this.rows).push.apply(_a, this.summaryModelGen.generateRows(data, {
            level,
            parentUid: captionRow.uid
          }));
          for (var i = rowCnt - 1; i >= 0; i--) {
            if (this.rows[parseInt(i.toString(), 10)].isCaptionRow) {
              this.rows[parseInt(i.toString(), 10)].aggregatesCount = this.rows.length - rowCnt;
            } else if (!this.rows[parseInt(i.toString(), 10)].isCaptionRow && !this.rows[parseInt(i.toString(), 10)].isDataRow) {
              break;
            }
          }
        }
        if (preCaption) {
          this.setInfiniteRowVisibility(preCaption);
        }
      }
    };
    GroupModelGenerator2.prototype.isRenderAggregate = function(data) {
      if (this.parent.enableInfiniteScrolling) {
        if (!this.renderInfiniteAgg) {
          return false;
        }
        this.getPreCaption(data.indent, data.data.key);
        this.renderInfiniteAgg = data.data.count === this.infiniteChildCount;
        return this.renderInfiniteAgg;
      }
      return !this.parent.enableInfiniteScrolling;
    };
    GroupModelGenerator2.prototype.getPreCaption = function(indent, key) {
      var rowObj = this.parent.getRowsObject().concat(this.rows);
      var preCap;
      this.infiniteChildCount = 0;
      var i = rowObj.length;
      while (i--) {
        if (rowObj[parseInt(i.toString(), 10)].isCaptionRow && rowObj[parseInt(i.toString(), 10)].indent === indent) {
          var groupKey = rowObj[parseInt(i.toString(), 10)].data.key;
          if (groupKey && groupKey.toString() === key.toString() && groupKey instanceof Date || groupKey === key) {
            preCap = rowObj[parseInt(i.toString(), 10)];
          }
        }
        if (rowObj[parseInt(i.toString(), 10)].indent === indent || rowObj[parseInt(i.toString(), 10)].indent < indent) {
          break;
        }
        if (rowObj[parseInt(i.toString(), 10)].indent === indent + 1) {
          this.infiniteChildCount++;
        }
      }
      return preCap;
    };
    GroupModelGenerator2.prototype.getCaptionRowCells = function(field, indent, data) {
      var cells = [];
      var visibles = [];
      var column = this.parent.getColumnByField(field);
      var indexes = this.parent.getColumnIndexesInView();
      if (this.parent.enableColumnVirtualization) {
        column = this.parent.columns.filter(function(c) {
          return c.field === field;
        })[0];
      }
      var groupedLen = this.parent.groupSettings.columns.length;
      var gObj = this.parent;
      if (!this.parent.enableColumnVirtualization || indexes.indexOf(indent) !== -1) {
        for (var i = 0; i < indent; i++) {
          cells.push(this.generateIndentCell());
        }
        cells.push(this.generateCell({}, null, CellType.Expand));
      }
      indent = this.parent.enableColumnVirtualization ? 1 : this.parent.getVisibleColumns().length + groupedLen + (gObj.detailTemplate || gObj.childGrid ? 1 : 0) - indent + (this.parent.getVisibleColumns().length ? -1 : 0);
      if (this.parent.aggregates.length && !this.captionModelGen.isEmpty()) {
        var captionCells = this.captionModelGen.generateRows(data)[0];
        extend(data, captionCells.data);
        var cIndex_1 = 0;
        captionCells.cells.some(function(cell, index) {
          cIndex_1 = index;
          return cell.visible && cell.isDataCell;
        });
        visibles = captionCells.cells.slice(cIndex_1).filter(function(cell) {
          return cell.visible;
        });
        if (captionCells.visible && visibles[0].column.field === this.parent.getVisibleColumns()[0].field) {
          visibles = visibles.slice(1);
        }
        if (this.parent.getVisibleColumns().length === 1) {
          visibles = [];
        }
        indent = indent - visibles.length;
      }
      var cols = !this.parent.enableColumnVirtualization ? [column] : this.parent.getColumns();
      var wFlag = true;
      for (var j = 0; j < cols.length; j++) {
        var tmpFlag = wFlag && indexes.indexOf(indent) !== -1;
        if (tmpFlag) {
          wFlag = false;
        }
        var cellType = !this.parent.enableColumnVirtualization || tmpFlag ? CellType.GroupCaption : CellType.GroupCaptionEmpty;
        indent = this.parent.enableColumnVirtualization && cellType === CellType.GroupCaption ? indent + groupedLen : indent;
        if (gObj.isRowDragable()) {
          indent++;
        }
        cells.push(this.generateCell(column, null, cellType, indent));
      }
      cells.push.apply(cells, visibles);
      return cells;
    };
    GroupModelGenerator2.prototype.generateCaptionRow = function(data, indent, parentID, childID, tIndex, parentUid) {
      var options = {};
      var records = "records";
      var col = this.parent.getColumnByField(data.field);
      options.data = extend({}, data);
      if (col) {
        options.data.field = data.field;
      }
      options.isDataRow = false;
      options.isExpand = !this.parent.groupSettings.enableLazyLoading && !this.parent.isCollapseStateEnabled();
      options.parentGid = parentID;
      options.childGid = childID;
      options.tIndex = tIndex;
      options.isCaptionRow = true;
      options.parentUid = parentUid;
      options.gSummary = !isNullOrUndefined(data.items["" + records]) ? data.items["" + records].length : data.items.length;
      options.uid = getUid("grid-row");
      var row2 = new Row(options);
      row2.indent = indent;
      this.getForeignKeyData(row2);
      row2.cells = this.getCaptionRowCells(data.field, indent, row2.data);
      return row2;
    };
    GroupModelGenerator2.prototype.getForeignKeyData = function(row2) {
      var data = row2.data;
      var col = this.parent.getColumnByField(data.field);
      if (col && col.isForeignColumn && col.isForeignColumn()) {
        var fkValue = isNullOrUndefined(data.key) ? "" : col.valueAccessor(col.foreignKeyValue, getForeignData(col, {}, data.key)[0], col);
        setValue("foreignKey", fkValue, row2.data);
      }
    };
    GroupModelGenerator2.prototype.generateDataRows = function(data, indent, childID, tIndex, parentUid) {
      var rows = [];
      var indexes = this.parent.getColumnIndexesInView();
      for (var i = 0, len = data.length; i < len; i++, tIndex++) {
        rows[parseInt(i.toString(), 10)] = this.generateRow(data[parseInt(i.toString(), 10)], this.index, i ? void 0 : "e-firstchildrow", indent, childID, tIndex, parentUid);
        for (var j = 0; j < indent; j++) {
          if (this.parent.enableColumnVirtualization && indexes.indexOf(indent) === -1) {
            continue;
          }
          rows[parseInt(i.toString(), 10)].cells.unshift(this.generateIndentCell());
        }
        this.index++;
      }
      return rows;
    };
    GroupModelGenerator2.prototype.generateIndentCell = function() {
      return this.generateCell({}, null, CellType.Indent);
    };
    GroupModelGenerator2.prototype.refreshRows = function(input) {
      var indexes = this.parent.getColumnIndexesInView();
      for (var i = 0; i < input.length; i++) {
        if (input[parseInt(i.toString(), 10)].isDataRow) {
          input[parseInt(i.toString(), 10)].cells = this.generateCells(input[parseInt(i.toString(), 10)]);
          for (var j = 0; j < input[parseInt(i.toString(), 10)].indent; j++) {
            if (this.parent.enableColumnVirtualization && indexes.indexOf(input[parseInt(i.toString(), 10)].indent) === -1) {
              continue;
            }
            input[parseInt(i.toString(), 10)].cells.unshift(this.generateIndentCell());
          }
        } else {
          var cRow = this.generateCaptionRow(input[parseInt(i.toString(), 10)].data, input[parseInt(i.toString(), 10)].indent);
          input[parseInt(i.toString(), 10)].cells = cRow.cells;
        }
      }
      return input;
    };
    GroupModelGenerator2.prototype.setInfiniteRowVisibility = function(caption) {
      if (!caption.isExpand || caption.visible === false) {
        for (var _i = 0, _a = this.rows; _i < _a.length; _i++) {
          var row2 = _a[_i];
          if (row2.parentUid === caption.uid) {
            row2.visible = false;
            if (row2.isCaptionRow) {
              this.setInfiniteRowVisibility(row2);
            }
          }
        }
      }
    };
    GroupModelGenerator2.prototype.ensureRowVisibility = function() {
      for (var i = 0; i < this.rows.length; i++) {
        var row2 = this.rows[parseInt(i.toString(), 10)];
        if (!row2.isCaptionRow) {
          continue;
        }
        for (var j = i + 1; j < this.rows.length; j++) {
          var childRow = this.rows[parseInt(j.toString(), 10)];
          if (row2.uid === childRow.parentUid) {
            this.rows[parseInt(j.toString(), 10)].visible = row2.isExpand;
          }
        }
      }
    };
    return GroupModelGenerator2;
  }(RowModelGenerator)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/content-renderer.js
var ContentRender = (
  /** @class */
  function() {
    function ContentRender2(parent, serviceLocator) {
      var _this = this;
      this.rows = [];
      this.freezeRows = [];
      this.movableRows = [];
      this.freezeRowElements = [];
      this.currentInfo = {};
      this.prevCurrentView = [];
      this.isLoaded = true;
      this.drop = function(e) {
        _this.parent.notify(columnDrop, {
          target: e.target,
          droppedElement: e.droppedElement
        });
        remove(e.droppedElement);
      };
      this.infiniteCache = {};
      this.visibleRows = [];
      this.visibleFrozenRows = [];
      this.rightFreezeRows = [];
      this.isAddRows = false;
      this.isInfiniteFreeze = false;
      this.useGroupCache = false;
      this.tempFreezeRows = [];
      this.rafCallback = function(args) {
        var arg = args;
        return function() {
          _this.ariaService.setBusy(_this.getPanel().querySelector("." + content), false);
          if (_this.parent.isDestroyed) {
            return;
          }
          var rows = _this.rows.slice(0);
          if (_this.parent.enableInfiniteScrolling) {
            if (_this.parent.groupSettings.enableLazyLoading) {
              for (var i = 0; i < _this.visibleRows.length; i++) {
                _this.setRowsInLazyGroup(_this.visibleRows[parseInt(i.toString(), 10)], i);
              }
            }
            rows = _this.parent.getRowsObject();
            var prevPage = arg.prevPage;
            if (_this.parent.infiniteScrollSettings.enableCache && prevPage) {
              var maxBlock = _this.parent.infiniteScrollSettings.maxBlocks;
              rows = [];
              var rowIdx = parseInt(_this.rowElements[0].getAttribute("aria-rowindex"), 10);
              var startIdx = Math.ceil(rowIdx / _this.parent.pageSettings.pageSize);
              for (var i = 0, count2 = startIdx; i < maxBlock; i++, count2++) {
                if (_this.infiniteCache[parseInt(count2.toString(), 10)]) {
                  rows = rows.concat(_this.infiniteCache[parseInt(count2.toString(), 10)]);
                }
              }
            }
          }
          _this.parent.notify(contentReady, {
            rows,
            args: arg
          });
          if (_this.parent.editSettings.showAddNewRow && _this.parent.addNewRowFocus) {
            _this.parent.notify(showAddNewRowFocus, {});
            _this.parent.addNewRowFocus = false;
          }
          if (_this.parent.autoFit) {
            _this.parent.preventAdjustColumns();
          }
          if (!_this.parent.isInitialLoad) {
            _this.parent.focusModule.setFirstFocusableTabIndex();
          }
          if (_this.isLoaded) {
            _this.parent.isManualRefresh = false;
            if (_this.parent.enableInfiniteScrolling && _this.parent.groupSettings.enableLazyLoading && args.requestType === "sorting") {
              _this.parent.infiniteScrollModule["groupCaptionAction"] = void 0;
            }
            var isReactChild = _this.parent.parentDetails && _this.parent.parentDetails.parentInstObj && _this.parent.parentDetails.parentInstObj.isReact;
            if ((_this.parent.isReact || isReactChild) && _this.parent.element.querySelectorAll(".e-templatecell").length) {
              var thisRef_1 = _this;
              thisRef_1.parent.renderTemplates(function() {
                thisRef_1.parent.trigger(dataBound, {}, function() {
                  if (thisRef_1.parent.allowTextWrap) {
                    thisRef_1.parent.notify(freezeRender, {
                      case: "textwrap"
                    });
                  }
                });
              });
            } else {
              _this.parent.trigger(dataBound, {}, function() {
                if (_this.parent.allowTextWrap) {
                  _this.parent.notify(freezeRender, {
                    case: "textwrap"
                  });
                }
              });
            }
            if (_this.parent.allowTextWrap && _this.parent.height === "auto") {
              if (_this.parent.getContentTable().scrollHeight > _this.parent.getContent().clientHeight) {
                _this.parent.scrollModule.setPadding();
              } else {
                _this.parent.scrollModule.removePadding();
              }
            }
          }
          if (arg) {
            var action = (arg.requestType || "").toLowerCase() + "-complete";
            _this.parent.notify(action, arg);
            if (args.requestType === "batchsave") {
              args.cancel = false;
              _this.parent.trigger(actionComplete, args);
            }
          }
          if (_this.isLoaded) {
            _this.parent.hideSpinner();
          }
        };
      };
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      this.widthService = serviceLocator.getService("widthService");
      this.ariaService = this.serviceLocator.getService("ariaService");
      this.parent.enableDeepCompare = this.parent.getDataModule().isRemote();
      this.generator = this.getModelGenerator();
      if (this.parent.isDestroyed) {
        return;
      }
      if (!this.parent.enableColumnVirtualization && !this.parent.enableVirtualization && !this.parent.groupSettings.enableLazyLoading) {
        this.parent.on(columnVisibilityChanged, this.setVisible, this);
      }
      this.parent.on(colGroupRefresh, this.colGroupRefresh, this);
      this.parent.on(uiUpdate, this.enableAfterRender, this);
      this.parent.on(refreshInfiniteModeBlocks, this.refreshContentRows, this);
      this.parent.on(beforeCellFocused, this.beforeCellFocused, this);
      this.parent.on(destroy, this.droppableDestroy, this);
    }
    ContentRender2.prototype.beforeCellFocused = function(e) {
      if (e.byKey && (e.keyArgs.action === "upArrow" || e.keyArgs.action === "downArrow")) {
        this.pressedKey = e.keyArgs.action;
      } else {
        this.pressedKey = void 0;
      }
    };
    ContentRender2.prototype.renderPanel = function() {
      var gObj = this.parent;
      var div = this.parent.element.querySelector("." + gridContent);
      if (div) {
        this.ariaService.setOptions(this.parent.element.querySelector("." + content), {
          busy: false
        });
        this.setPanel(div);
        return;
      }
      div = this.parent.createElement("div", {
        className: gridContent
      });
      var innerDiv = this.parent.createElement("div", {
        className: content
      });
      this.ariaService.setOptions(innerDiv, {
        busy: false
      });
      if (this.parent.enableColumnVirtualization && this.parent.isFrozenGrid()) {
        this.renderHorizontalScrollbar(div);
        innerDiv.classList.add("e-virtual-content");
      }
      div.appendChild(innerDiv);
      this.setPanel(div);
      gObj.element.appendChild(div);
    };
    ContentRender2.prototype.renderHorizontalScrollbar = function(element) {
      var parent = this.parent.createElement("div", {
        className: "e-movablescrollbar"
      });
      var child = this.parent.createElement("div", {
        className: "e-movablechild"
      });
      var scrollbarHeight = getScrollBarWidth().toString();
      this.setScrollbarHeight(child, scrollbarHeight);
      this.setScrollbarHeight(parent, scrollbarHeight);
      parent.appendChild(child);
      element.appendChild(parent);
    };
    ContentRender2.prototype.setScrollbarHeight = function(ele, height) {
      ele.style.minHeight = height + "px";
      ele.style.maxHeight = height + "px";
    };
    ContentRender2.prototype.renderTable = function() {
      var contentDiv = this.getPanel();
      var virtualTable = contentDiv.querySelector(".e-virtualtable");
      var virtualTrack = contentDiv.querySelector(".e-virtualtrack");
      if (this.parent.enableVirtualization && !isNullOrUndefined(virtualTable) && !isNullOrUndefined(virtualTrack)) {
        remove(virtualTable);
        remove(virtualTrack);
      }
      contentDiv.appendChild(this.createContentTable("_content_table"));
      this.setTable(contentDiv.querySelector("." + table));
      if (this.parent.selectionSettings.type === "Multiple") {
        this.ariaService.setOptions(this.parent.element, {
          multiselectable: true
        });
      }
      this.initializeContentDrop();
      if (this.parent.frozenRows) {
        this.parent.getHeaderContent().classList.add("e-frozenhdr");
      }
    };
    ContentRender2.prototype.createContentTable = function(id) {
      var innerDiv = this.getPanel().firstElementChild;
      if (this.getTable()) {
        remove(this.getTable());
      }
      var table2 = innerDiv.querySelector("." + table) ? innerDiv.querySelector("." + table) : this.parent.createElement("table", {
        className: table,
        attrs: {
          role: "presentation",
          id: this.parent.element.id + id
        }
      });
      table2.style.cssText = "border-collapse: separate; border-spacing: .25px;";
      this.setColGroup(this.parent.getHeaderTable().querySelector(colGroup).cloneNode(true));
      table2.appendChild(this.getColGroup());
      table2.appendChild(this.parent.createElement(tbody, {
        attrs: {
          role: "rowgroup"
        }
      }));
      innerDiv.appendChild(table2);
      return innerDiv;
    };
    ContentRender2.prototype.refreshContentRows = function(args) {
      var _this = this;
      if (args === void 0) {
        args = {};
      }
      var gObj = this.parent;
      if (gObj.currentViewData.length === 0) {
        return;
      }
      if (gObj.editSettings && gObj.editModule && gObj.editSettings.mode === "Batch" && gObj.editModule.formObj && gObj.editSettings.showConfirmDialog === false) {
        gObj.editModule.destroyForm();
      }
      var dataSource = this.currentMovableRows || gObj.currentViewData;
      var isReact = gObj.isReact && !isNullOrUndefined(gObj.rowTemplate);
      var isReactPrintGrid = this.parent.printGridParent && this.parent.printGridParent.isReact;
      var frag = isReact || isReactPrintGrid ? gObj.createElement(tbody, {
        attrs: {
          role: "rowgroup"
        }
      }) : document.createDocumentFragment();
      if (!this.initialPageRecords) {
        this.initialPageRecords = extend([], dataSource);
      }
      var hdrfrag = isReact ? gObj.createElement(tbody, {
        attrs: {
          role: "rowgroup"
        }
      }) : document.createDocumentFragment();
      var refFrag;
      var refHdrfrag;
      if ((gObj.isReact || isReactPrintGrid) && gObj.rowTemplate) {
        refFrag = frag;
        refHdrfrag = hdrfrag;
      }
      var columns = gObj.getColumns();
      var tr;
      var hdrTbody;
      var trElement;
      var row2 = new RowRenderer(this.serviceLocator, null, this.parent);
      var isInfiniteScroll = this.parent.enableInfiniteScrolling && args.requestType === "infiniteScroll";
      var isColumnVirtualInfiniteProcess = this.isInfiniteColumnvirtualization() && args.requestType !== "virtualscroll";
      var infiniteDetail = gObj.enableInfiniteScrolling && (gObj.childGrid || gObj.detailTemplate) ? true : false;
      var infiniteDetailModified = infiniteDetail && (args.action === "add" && args.requestType === "save" || args.requestType === "delete");
      if (infiniteDetailModified) {
        args.startIndex = 0;
        gObj.notify(detachDetailTemplate, {});
      }
      if (!(isInfiniteScroll && (gObj.childGrid || gObj.detailTemplate) && !gObj.infiniteScrollSettings.enableCache)) {
        if (infiniteDetail) {
          this.parent.infiniteScrollModule.infiniteDetailDestroy = true;
        }
        gObj.notify(destroyChildGrid, isInfiniteScroll && (gObj.childGrid || gObj.detailTemplate) && gObj.infiniteScrollSettings.enableCache ? args : {});
      }
      this.rowElements = [];
      this.rows = [];
      this.tempFreezeRows = [];
      var tbdy;
      var tableName;
      var isGroupFrozenHdr = this.parent.frozenRows && this.parent.groupSettings.columns.length ? true : false;
      if (isGroupAdaptive(gObj)) {
        if (["sorting", "filtering", "searching", "grouping", "ungrouping", "reorder", "save", "delete"].some(function(value) {
          return args.requestType === value;
        })) {
          this.emptyVcRows();
        }
      }
      var modelData;
      modelData = this.checkCache(modelData, args);
      if (!this.isAddRows && !this.useGroupCache) {
        modelData = this.generator.generateRows(dataSource, args);
      }
      this.setGroupCache(modelData, args);
      this.parent.notify(setInfiniteCache, {
        isInfiniteScroll,
        modelData,
        args
      });
      var isFrozenLeft = false;
      var registeredTemplates = this.parent.registeredTemplate;
      if (!(args.requestType === "infiniteScroll" && !this.parent.infiniteScrollSettings.enableCache) && registeredTemplates && registeredTemplates.template && !args.isFrozen && !isFrozenLeft) {
        var templatetoclear = [];
        for (var i = 0; i < registeredTemplates.template.length; i++) {
          for (var j = 0; j < registeredTemplates.template[parseInt(i.toString(), 10)].rootNodes.length; j++) {
            if (isNullOrUndefined(registeredTemplates.template[parseInt(i.toString(), 10)].rootNodes[parseInt(j.toString(), 10)].parentNode)) {
              templatetoclear.push(registeredTemplates.template[parseInt(i.toString(), 10)]);
            }
          }
        }
        this.parent.destroyTemplate(["template"], templatetoclear);
      }
      if ((this.parent.isReact || this.parent.isVue) && !(args.requestType === "infiniteScroll" && !this.parent.infiniteScrollSettings.enableCache) && !args.isFrozen) {
        var templates = [this.parent.isVue ? "template" : "columnTemplate", "rowTemplate", "detailTemplate", "captionTemplate", "commandsTemplate", "groupFooterTemplate", "groupCaptionTemplate"];
        if (args.requestType === "infiniteScroll" && this.parent.infiniteScrollSettings.enableCache) {
          templates = [this.parent.isVue ? "template" : "columnTemplate", "commandsTemplate"];
        }
        clearReactVueTemplates(this.parent, templates);
      }
      if (this.parent.enableColumnVirtualization) {
        var cellMerge = new CellMergeRender(this.serviceLocator, this.parent);
        cellMerge.updateVirtualCells(modelData);
      }
      this.tbody = this.getTable().querySelector(tbody);
      var startIndex = 0;
      var blockLoad = true;
      if (isGroupAdaptive(gObj) && gObj.vcRows.length) {
        var top_1 = "top";
        var scrollTop = !isNullOrUndefined(args.virtualInfo.offsets) ? args.virtualInfo.offsets.top : !isNullOrUndefined(args.scrollTop) ? args.scrollTop["" + top_1] : 0;
        if (scrollTop !== 0) {
          var offsets_1 = gObj.vGroupOffsets;
          var bSize = gObj.pageSettings.pageSize / 2;
          var values = Object.keys(offsets_1).map(function(key) {
            return offsets_1["" + key];
          });
          for (var m = 0; m < values.length; m++) {
            if (scrollTop < values[parseInt(m.toString(), 10)]) {
              if (!isNullOrUndefined(args.virtualInfo) && args.virtualInfo.direction === "up") {
                startIndex = m > 0 ? (m - 1) * bSize : m * bSize;
                break;
              } else {
                startIndex = m * bSize;
                if (this.parent.contentModule.isEndBlock(m) || this.parent.contentModule.isEndBlock(m + 1)) {
                  args.virtualInfo.blockIndexes = [m, m + 1];
                }
                break;
              }
            }
          }
          if (Math.round(scrollTop + this.contentPanel.firstElementChild.offsetHeight) >= this.contentPanel.firstElementChild.scrollHeight && !args.rowObject) {
            blockLoad = false;
          }
        }
      }
      var isVFFrozenOnly = gObj.frozenRows && this.parent.enableVirtualization && args.requestType === "reorder";
      if (gObj.frozenRows && args.requestType === "virtualscroll" && args.virtualInfo.sentinelInfo.axis === "X" || isVFFrozenOnly) {
        var bIndex = args.virtualInfo.blockIndexes;
        var page = args.virtualInfo.page;
        args.virtualInfo.blockIndexes = [1, 2];
        if (isVFFrozenOnly) {
          args.virtualInfo.page = 1;
        }
        var data = isVFFrozenOnly ? this.initialPageRecords : dataSource;
        var mhdrData = this.vgenerator.generateRows(data, args);
        mhdrData.splice(this.parent.frozenRows);
        for (var i = 0; i < this.parent.frozenRows; i++) {
          tr = row2.render(mhdrData[parseInt(i.toString(), 10)], columns);
          addFixedColumnBorder(tr);
          hdrfrag.appendChild(tr);
        }
        args.virtualInfo.blockIndexes = bIndex;
        args.virtualInfo.page = page;
        if (isVFFrozenOnly && args.virtualInfo.page === 1) {
          modelData.splice(0, this.parent.frozenRows);
        }
      }
      this.virtualFrozenHdrRefresh(hdrfrag, modelData, row2, args, dataSource, columns);
      if (this.parent.groupSettings.enableLazyLoading && !this.useGroupCache && this.parent.groupSettings.columns.length) {
        (this.parent.enableVirtualization ? this.parent.lazyLoadRender : this.parent.contentModule).refRowsObj[this.parent.pageSettings.currentPage] = [];
      }
      if (this.parent.enableInfiniteScrolling && this.parent.groupSettings.enableLazyLoading && args.requestType === "delete" || infiniteDetailModified) {
        this.visibleRows = [];
      }
      var _loop_1 = function(i2, len2) {
        this_1.rows.push(modelData[parseInt(i2.toString(), 10)]);
        if (this_1.parent.groupSettings.enableLazyLoading && !this_1.useGroupCache && this_1.parent.groupSettings.columns.length) {
          (this_1.parent.enableVirtualization ? this_1.parent.lazyLoadRender : this_1.parent.contentModule).refRowsObj[this_1.parent.pageSettings.currentPage].push(modelData[parseInt(i2.toString(), 10)]);
          this_1.setRowsInLazyGroup(modelData[parseInt(i2.toString(), 10)], i2);
          if (isNullOrUndefined(modelData[parseInt(i2.toString(), 10)].indent)) {
            return "continue";
          }
        }
        this_1.setInfiniteVisibleRows(args, modelData[parseInt(i2.toString(), 10)]);
        if (isGroupAdaptive(gObj) && args.virtualInfo && args.virtualInfo.blockIndexes && this_1.rowElements.length >= args.virtualInfo.blockIndexes.length * this_1.parent.contentModule.getBlockSize() && blockLoad) {
          this_1.parent.currentViewData["records"] = this_1.rows.map(function(m2) {
            return m2.data;
          });
          return "break";
        }
        if (!gObj.rowTemplate) {
          tr = row2.render(modelData[parseInt(i2.toString(), 10)], columns);
          addFixedColumnBorder(tr);
          var isVFreorder = this_1.ensureFrozenHeaderRender(args);
          if (gObj.frozenRows && (i2 < gObj.frozenRows || isGroupFrozenHdr) && !isInfiniteScroll && args.requestType !== "virtualscroll" && isVFreorder && this_1.ensureVirtualFrozenHeaderRender(args)) {
            hdrfrag.appendChild(tr);
          } else {
            frag.appendChild(tr);
          }
          var rowIdx = parseInt(tr.getAttribute("aria-rowindex"), 10) - 1;
          if (rowIdx + 1 === gObj.frozenRows) {
            isGroupFrozenHdr = false;
          }
          if (modelData[parseInt(i2.toString(), 10)].isExpand) {
            gObj.notify(expandChildGrid, tr.cells[gObj.groupSettings.columns.length]);
          }
        } else {
          var rowTemplateID = gObj.element.id + "rowTemplate";
          var elements = void 0;
          if (gObj.isReact || isReactPrintGrid) {
            var isHeader = gObj.frozenRows && i2 < gObj.frozenRows;
            var copied = extend({
              index: i2
            }, dataSource[parseInt(i2.toString(), 10)]);
            gObj.getRowTemplate()(copied, gObj, "rowTemplate", rowTemplateID, null, null, isHeader ? hdrfrag : frag);
            if (gObj.requireTemplateRef) {
              var thisRef_2 = this_1;
              thisRef_2.parent.renderTemplates(function() {
                if (gObj.frozenRows && i2 < gObj.frozenRows) {
                  tr = refHdrfrag.childNodes[parseInt(i2.toString(), 10)];
                } else {
                  trElement = refFrag.childNodes[parseInt(i2.toString(), 10)];
                }
                var arg2 = {
                  data: modelData[parseInt(i2.toString(), 10)].data,
                  row: trElement ? trElement : tr
                };
                thisRef_2.parent.trigger(rowDataBound, arg2);
                if (modelData[parseInt(i2.toString(), 10)].isDataRow || thisRef_2.parent.enableVirtualization && thisRef_2.parent.groupSettings.enableLazyLoading) {
                  thisRef_2.rowElements.push(arg2.row);
                }
                thisRef_2.ariaService.setOptions(thisRef_2.parent.element, {
                  colcount: gObj.getColumns().length.toString()
                });
                if (i2 === modelData.length - 1) {
                  refFrag = null;
                  refHdrfrag = null;
                }
              });
              return "continue";
            }
          } else {
            elements = gObj.getRowTemplate()(extend({
              index: i2
            }, dataSource[parseInt(i2.toString(), 10)]), gObj, "rowTemplate", rowTemplateID, void 0, void 0, void 0, this_1.parent["root"]);
          }
          if (!gObj.isReact && elements[0].tagName === "TBODY") {
            for (var j2 = 0; j2 < elements.length; j2++) {
              var isTR = elements[parseInt(j2.toString(), 10)].nodeName.toLowerCase() === "tr";
              if (isTR || elements[parseInt(j2.toString(), 10)].querySelectorAll && elements[parseInt(j2.toString(), 10)].querySelectorAll("tr").length) {
                tr = isTR ? elements[parseInt(j2.toString(), 10)] : elements[parseInt(j2.toString(), 10)].querySelector("tr");
              }
            }
            if (gObj.frozenRows && i2 < gObj.frozenRows) {
              hdrfrag.appendChild(tr);
            } else {
              frag.appendChild(tr);
            }
          } else {
            if (gObj.frozenRows && i2 < gObj.frozenRows) {
              tr = !gObj.isReact ? appendChildren(hdrfrag, elements) : hdrfrag.lastElementChild;
            } else {
              if (!gObj.isReact) {
                tr = appendChildren(frag, elements);
              }
              trElement = gObj.isReact ? frag.lastElementChild : tr.lastElementChild;
            }
          }
          var arg = {
            data: modelData[parseInt(i2.toString(), 10)].data,
            row: trElement ? trElement : tr
          };
          this_1.parent.trigger(rowDataBound, arg);
        }
        if (modelData[parseInt(i2.toString(), 10)].isDataRow || this_1.parent.enableVirtualization && this_1.parent.groupSettings.enableLazyLoading) {
          if (!isNullOrUndefined(gObj.rowTemplate) && (gObj.isAngular || gObj.isVue3 || gObj.isVue)) {
            this_1.rowElements.push(trElement ? trElement : tr);
          } else {
            this_1.rowElements.push(tr);
          }
        }
        this_1.ariaService.setOptions(this_1.parent.element, {
          colcount: gObj.getColumns().length.toString()
        });
      };
      var this_1 = this;
      for (var i = startIndex, len = modelData.length; i < len; i++) {
        var state_1 = _loop_1(i, len);
        if (state_1 === "break") break;
      }
      var isReactChild = gObj.parentDetails && gObj.parentDetails.parentInstObj && gObj.parentDetails.parentInstObj.isReact;
      if ((gObj.isReact || isReactChild) && !gObj.requireTemplateRef) {
        gObj.renderTemplates();
      }
      if (this.parent.enableInfiniteScrolling && this.parent.groupSettings.enableLazyLoading) {
        this.parent.contentModule.refRowsObj[this.parent.pageSettings.currentPage] = this.parent.contentModule["groupCache"][this.parent.pageSettings.currentPage];
      }
      if (this.parent.groupSettings.enableLazyLoading && !this.useGroupCache && this.parent.groupSettings.columns.length) {
        this.parent.notify(refreshExpandandCollapse, {
          rows: (this.parent.enableVirtualization ? this.parent.lazyLoadRender : this.parent.contentModule).refRowsObj[this.parent.pageSettings.currentPage]
        });
      }
      gObj.removeMaskRow();
      this.parent.notify("removeGanttShimmer", {
        requestType: "hideShimmer"
      });
      if (gObj.frozenRows && args.requestType !== "virtualscroll" && !isInfiniteScroll && this.ensureVirtualFrozenHeaderRender(args) || args.requestType === "virtualscroll" && args.virtualInfo.sentinelInfo && args.virtualInfo.sentinelInfo.axis === "X") {
        hdrTbody = gObj.getHeaderTable().querySelector(tbody);
        if (isReact) {
          var parentTable = hdrTbody.parentElement;
          remove(hdrTbody);
          parentTable.appendChild(hdrfrag);
        } else {
          hdrTbody.innerHTML = "";
          hdrTbody.appendChild(hdrfrag);
        }
        if (!gObj.isInitialLoad) {
          gObj.scrollModule.setHeight();
        }
      }
      args.rows = this.rows.slice(0);
      getUpdateUsingRaf(function() {
        _this.parent.notify(beforeFragAppend, args);
        if (!_this.parent.enableVirtualization && (!_this.parent.enableColumnVirtualization || isColumnVirtualInfiniteProcess) && !isInfiniteScroll) {
          if (!gObj.isReact) {
            _this.tbody.innerHTML = "";
          }
          if (!isNullOrUndefined(_this.tbody.parentElement)) {
            remove(_this.tbody);
          } else {
            remove(gObj.getContentTable().querySelector(tbody));
          }
          _this.tbody = _this.parent.createElement(tbody, {
            attrs: {
              role: "rowgroup"
            }
          });
        }
        if (gObj.rowTemplate) {
          updateBlazorTemplate(gObj.element.id + "rowTemplate", "RowTemplate", gObj);
        }
        if (!isNullOrUndefined(_this.parent.infiniteScrollModule) && (_this.parent.enableInfiniteScrolling && !_this.isInfiniteColumnvirtualization() || isColumnVirtualInfiniteProcess)) {
          _this.isAddRows = false;
          _this.parent.notify(removeInfiniteRows, {
            args
          });
          _this.parent.notify(appendInfiniteContent, {
            tbody: tbdy ? tbdy : _this.tbody,
            frag,
            args,
            rows: _this.rows,
            rowElements: _this.rowElements,
            visibleRows: _this.visibleRows,
            tableName
          });
          if (_this.isInfiniteColumnvirtualization() && _this.parent.isFrozenGrid()) {
            var virtualTable = _this.parent.getContent().querySelector(".e-virtualtable");
            var transform = getTransformValues(virtualTable);
            _this.parent.contentModule.resetStickyLeftPos(transform.width);
            _this.widthService.refreshFrozenScrollbar();
          }
        } else {
          _this.useGroupCache = false;
          _this.appendContent(_this.tbody, frag, args);
        }
        if (_this.parent.editSettings.showAddNewRow && (_this.parent.enableVirtualization || _this.parent.enableInfiniteScrolling)) {
          var newRow = _this.parent.element.querySelector(".e-addrow-removed");
          if (newRow) {
            remove(newRow);
          }
        }
        var startAdd = !_this.parent.element.querySelector("." + addedRow);
        if (_this.parent.editSettings.showAddNewRow && _this.parent.editSettings.mode === "Normal") {
          if (startAdd) {
            if (_this.parent.enableVirtualization || _this.parent.enableInfiniteScrolling) {
              _this.parent.isAddNewRow = true;
            }
            _this.parent.isEdit = false;
            _this.parent.addRecord();
          }
          if (startAdd || (_this.parent.enableVirtualization || _this.parent.enableInfiniteScrolling) && ["sorting", "filtering", "searching", "grouping", "ungrouping", "reorder"].some(function(value) {
            return args.requestType === value;
          })) {
            _this.parent.notify(showAddNewRowFocus, {});
          }
        }
        if (_this.parent.getVisibleFrozenRightCount() && _this.parent.getContent() && getScrollWidth(_this.parent) > 0) {
          _this.parent.element.classList.add("e-right-shadow");
        }
        frag = null;
      }, this.rafCallback(extend({}, args)));
    };
    ContentRender2.prototype.isInfiniteColumnvirtualization = function() {
      return this.parent.enableColumnVirtualization && this.parent.enableInfiniteScrolling;
    };
    ContentRender2.prototype.enableCacheOnInfiniteColumnVirtual = function() {
      return this.isInfiniteColumnvirtualization() && this.parent.infiniteScrollSettings.enableCache;
    };
    ContentRender2.prototype.emptyVcRows = function() {
      this.parent.vcRows = [];
      this.parent.vRows = [];
    };
    ContentRender2.prototype.appendContent = function(tbody2, frag, args, tableName) {
      var isReact = this.parent.isReact && !isNullOrUndefined(this.parent.rowTemplate);
      if (isReact) {
        this.getTable().appendChild(frag);
      } else {
        tbody2.appendChild(frag);
        this.getTable().appendChild(tbody2);
      }
      if (this.parent.rowRenderingMode === "Vertical" && this.parent.allowTextWrap && (this.parent.textWrapSettings.wrapMode === "Header" || this.parent.textWrapSettings.wrapMode === "Both")) {
        var cells = tbody2.querySelectorAll("td");
        for (var i = 0; i < cells.length; i++) {
          var headerCellHeight = parseFloat(document.defaultView.getComputedStyle(cells[parseInt(i.toString(), 10)], "::before").getPropertyValue("height"));
          var cellHeight = cells[parseInt(i.toString(), 10)].offsetHeight;
          if (headerCellHeight > cellHeight) {
            cells[parseInt(i.toString(), 10)].style.height = headerCellHeight + "px";
            cells[parseInt(i.toString(), 10)].style.boxSizing = "content-box";
          }
        }
      }
      if (this.parent.getVisibleFrozenLeftCount() && this.parent.enableColumnVirtualization) {
        this.widthService.refreshFrozenScrollbar();
      }
    };
    ContentRender2.prototype.setRowsInLazyGroup = function(row2, index) {
      if (this.parent.groupSettings.enableLazyLoading && !this.useGroupCache && this.parent.groupSettings.columns.length) {
        (this.parent.enableVirtualization ? this.parent.lazyLoadRender : this.parent.contentModule).maintainRows(row2, index);
      }
    };
    ContentRender2.prototype.setGroupCache = function(data, args) {
      if (!this.useGroupCache && this.parent.groupSettings.enableLazyLoading) {
        this.parent.notify(setGroupCache, {
          args,
          data
        });
      }
    };
    ContentRender2.prototype.ensureFrozenHeaderRender = function(args) {
      return !(this.parent.enableVirtualization && (args.requestType === "reorder" || args.requestType === "refresh") || this.parent.infiniteScrollSettings.enableCache && this.parent.frozenRows && this.parent.infiniteScrollModule.requestType === "delete" && this.parent.pageSettings.currentPage !== 1);
    };
    ContentRender2.prototype.ensureVirtualFrozenHeaderRender = function(args) {
      return !(this.parent.enableVirtualization && args.requestType === "delete");
    };
    ContentRender2.prototype.checkCache = function(modelData, args) {
      if (this.parent.infiniteScrollSettings.enableCache && args.requestType === "infiniteScroll") {
        this.isAddRows = !isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage]);
        if (this.isAddRows) {
          var data = this.infiniteCache[this.parent.pageSettings.currentPage];
          modelData = this.parent.pageSettings.currentPage === 1 ? data.slice(this.parent.frozenRows) : data;
        }
        return modelData;
      }
      if (this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length && (args.requestType === "paging" || args.requestType === "columnstate" || args.requestType === "reorder" || args.requestType === "virtualscroll") && (this.parent.enableVirtualization ? this.parent.lazyLoadRender : this.parent.contentModule).getGroupCache()[this.parent.pageSettings.currentPage]) {
        if (!this.parent.enableVirtualization) {
          this.useGroupCache = true;
        }
        return this.parent.enableVirtualization ? this.parent.getRowsObject() : this.parent.contentModule.initialGroupRows(args.requestType === "reorder");
      }
      return null;
    };
    ContentRender2.prototype.setInfiniteVisibleRows = function(args, data) {
      if (this.parent.enableInfiniteScrolling && !this.parent.infiniteScrollSettings.enableCache && !(this.isInfiniteColumnvirtualization() && args.requestType === "virtualscroll")) {
        this.visibleRows.push(data);
      }
    };
    ContentRender2.prototype.getCurrentBlockInfiniteRecords = function() {
      var data = [];
      if (this.parent.infiniteScrollSettings.enableCache) {
        if (!Object.keys(this.infiniteCache).length) {
          return [];
        }
        var rows = this.parent.getRows();
        var index = parseInt(rows[this.parent.frozenRows].getAttribute(ariaRowIndex), 10) - 1;
        var first = Math.ceil((index + 1) / this.parent.pageSettings.pageSize);
        index = parseInt(rows[rows.length - 1].getAttribute(ariaRowIndex), 10) - 1;
        var last = Math.ceil((index + (rows.length ? 1 : 0)) / this.parent.pageSettings.pageSize);
        for (var i = first; i <= last; i++) {
          data = !data.length ? this.infiniteCache[parseInt(i.toString(), 10)] : data.concat(this.infiniteCache[parseInt(i.toString(), 10)]);
        }
        if (this.parent.frozenRows && this.parent.pageSettings.currentPage > 1) {
          data = this.infiniteCache[1].slice(0, this.parent.frozenRows).concat(data);
        }
      }
      return data;
    };
    ContentRender2.prototype.getReorderedRows = function(args) {
      return this.parent.contentModule.getReorderedFrozenRows(args);
    };
    ContentRender2.prototype.virtualFrozenHdrRefresh = function(hdrfrag, modelData, row2, args, dataSource, columns) {
      if (this.parent.frozenRows && this.parent.enableVirtualization && (args.requestType === "reorder" || args.requestType === "refresh")) {
        var tr = void 0;
        var fhdrData = this.getReorderedRows(args);
        for (var i = 0; i < fhdrData.length; i++) {
          tr = row2.render(fhdrData[parseInt(i.toString(), 10)], columns);
          hdrfrag.appendChild(tr);
        }
        if (args.virtualInfo.page === 1) {
          modelData.splice(0, this.parent.frozenRows);
        }
      }
    };
    ContentRender2.prototype.getInfiniteRows = function() {
      var rows = [];
      if (this.parent.enableInfiniteScrolling) {
        if (this.parent.infiniteScrollSettings.enableCache) {
          var keys = Object.keys(this.infiniteCache);
          for (var i = 0; i < keys.length; i++) {
            rows = rows.concat(this.infiniteCache[keys[parseInt(i.toString(), 10)]]);
          }
        } else {
          rows = this.visibleRows;
        }
      }
      return rows;
    };
    ContentRender2.prototype.getInfiniteMovableRows = function() {
      var infiniteCacheRows = this.getCurrentBlockInfiniteRecords();
      var infiniteRows = this.parent.enableInfiniteScrolling ? infiniteCacheRows.length ? infiniteCacheRows : this.visibleRows : [];
      return infiniteRows;
    };
    ContentRender2.prototype.getPanel = function() {
      return this.contentPanel;
    };
    ContentRender2.prototype.setPanel = function(panel) {
      this.contentPanel = panel;
    };
    ContentRender2.prototype.getTable = function() {
      return this.contentTable;
    };
    ContentRender2.prototype.setTable = function(table2) {
      this.contentTable = table2;
    };
    ContentRender2.prototype.getRows = function() {
      var infiniteRows = this.getInfiniteRows();
      return infiniteRows.length ? infiniteRows : this.rows;
    };
    ContentRender2.prototype.getRowElements = function() {
      return this.rowElements;
    };
    ContentRender2.prototype.setRowElements = function(elements) {
      this.rowElements = elements;
    };
    ContentRender2.prototype.getColGroup = function() {
      return this.colgroup;
    };
    ContentRender2.prototype.setColGroup = function(colGroup2) {
      if (!isNullOrUndefined(colGroup2)) {
        colGroup2.id = "content-" + colGroup2.id;
      }
      return this.colgroup = colGroup2;
    };
    ContentRender2.prototype.setVisible = function(columns) {
      var gObj = this.parent;
      var rows = this.getRows();
      var testRow;
      rows.some(function(r) {
        if (r.isDataRow) {
          testRow = r;
        }
        return r.isDataRow;
      });
      var needFullRefresh = true;
      if (!gObj.groupSettings.columns.length && testRow) {
        needFullRefresh = false;
      }
      var tr = gObj.getDataRows();
      var args = {};
      var infiniteData = this.infiniteRowVisibility();
      var contentrows = infiniteData ? infiniteData : this.rows.filter(function(row2) {
        return !row2.isDetailRow;
      });
      for (var c = 0, clen = columns.length; c < clen; c++) {
        var column = columns[parseInt(c.toString(), 10)];
        var idx = this.parent.getNormalizedColumnIndex(column.uid);
        var colIdx = this.parent.getColumnIndexByUid(column.uid);
        var displayVal = column.visible === true ? "" : "none";
        if (idx !== -1 && testRow && idx < testRow.cells.length) {
          setStyleAttribute(this.getColGroup().childNodes[parseInt(idx.toString(), 10)], {
            "display": displayVal
          });
        }
        if (!needFullRefresh) {
          this.setDisplayNone(tr, colIdx, displayVal, contentrows);
        }
        if (!this.parent.invokedFromMedia && column.hideAtMedia) {
          this.parent.updateMediaColumns(column);
        }
        this.parent.invokedFromMedia = false;
      }
      if (needFullRefresh) {
        this.refreshContentRows({
          requestType: "refresh"
        });
      } else {
        this.parent.notify(partialRefresh, {
          rows: contentrows,
          args
        });
        if (this.parent.editSettings.showAddNewRow && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling)) {
          this.parent.notify(showAddNewRowFocus, {});
        }
      }
    };
    ContentRender2.prototype.setDisplayNone = function(tr, idx, displayVal, rows) {
      setDisplayValue(tr, idx, displayVal, rows, this.parent, this.parent.isRowDragable());
      this.parent.notify(infiniteShowHide, {
        visible: displayVal,
        index: idx,
        isFreeze: this.isInfiniteFreeze
      });
    };
    ContentRender2.prototype.infiniteRowVisibility = function(isFreeze) {
      var infiniteData;
      if (this.parent.enableInfiniteScrolling) {
        this.isInfiniteFreeze = isFreeze;
        if (this.parent.infiniteScrollSettings.enableCache) {
          infiniteData = this.getCurrentBlockInfiniteRecords();
        } else {
          infiniteData = isFreeze ? this.visibleFrozenRows : this.visibleRows;
        }
      }
      return infiniteData;
    };
    ContentRender2.prototype.colGroupRefresh = function() {
      if (this.getColGroup()) {
        var colGroup2 = this.getHeaderColGroup();
        this.getTable().replaceChild(colGroup2, this.getColGroup());
        this.setColGroup(colGroup2);
      }
    };
    ContentRender2.prototype.getHeaderColGroup = function() {
      return this.parent.element.querySelector("." + gridHeader).querySelector(colGroup + ":not(.e-masked-colgroup)").cloneNode(true);
    };
    ContentRender2.prototype.initializeContentDrop = function() {
      var gObj = this.parent;
      this.droppable = new Droppable(gObj.element, {
        accept: ".e-dragclone",
        drop: this.drop
      });
    };
    ContentRender2.prototype.droppableDestroy = function() {
      if (this.droppable && !this.droppable.isDestroyed) {
        this.droppable.destroy();
      }
    };
    ContentRender2.prototype.canSkip = function(column, row2, index) {
      return isNullOrUndefined(row2) || //(1)
      isNullOrUndefined(column.visible) || //(2)
      row2.cells[parseInt(index.toString(), 10)].visible === column.visible;
    };
    ContentRender2.prototype.getModelGenerator = function() {
      return this.generator = this.parent.allowGrouping ? new GroupModelGenerator(this.parent) : new RowModelGenerator(this.parent);
    };
    ContentRender2.prototype.renderEmpty = function(tbody2) {
      this.getTable().appendChild(tbody2);
      if (this.parent.frozenRows) {
        this.parent.getHeaderContent().querySelector(tbody).innerHTML = "";
      }
    };
    ContentRender2.prototype.setSelection = function(uid2, set, clearAll) {
      this.parent.notify(setFreezeSelection, {
        uid: uid2,
        set,
        clearAll
      });
      var row2 = this.getRows().filter(function(row3) {
        return clearAll || uid2 === row3.uid;
      });
      for (var j = 0; j < row2.length; j++) {
        row2[parseInt(j.toString(), 10)].isSelected = set;
        var cells = row2[parseInt(j.toString(), 10)].cells;
        for (var k = 0; k < cells.length; k++) {
          cells[parseInt(k.toString(), 10)].isSelected = set;
        }
      }
    };
    ContentRender2.prototype.getRowByIndex = function(index) {
      index = this.getInfiniteRowIndex(index);
      return !isNullOrUndefined(index) ? this.parent.getDataRows()[parseInt(index.toString(), 10)] : void 0;
    };
    ContentRender2.prototype.getInfiniteRowIndex = function(index) {
      if (this.parent.infiniteScrollSettings.enableCache && !isNullOrUndefined(index)) {
        var fRows = this.parent.frozenRows;
        var idx = fRows > index ? 0 : fRows;
        var firstRowIndex = parseInt(this.parent.getRows()[parseInt(idx.toString(), 10)].getAttribute(ariaRowIndex), 10) - 1;
        index = fRows > index ? index : index - firstRowIndex + fRows;
      }
      return index;
    };
    ContentRender2.prototype.getVirtualRowIndex = function(index) {
      return index;
    };
    ContentRender2.prototype.enableAfterRender = function(e) {
      if (e.module === "group" && e.enable) {
        this.generator = this.getModelGenerator();
      }
    };
    ContentRender2.prototype.setRowObjects = function(rows) {
      this.rows = rows;
    };
    ContentRender2.prototype.immutableModeRendering = function(args) {
      var _this = this;
      if (args === void 0) {
        args = {};
      }
      var gObj = this.parent;
      gObj.hideSpinner();
      var key = gObj.getPrimaryKeyFieldNames()[0];
      var oldKeys = {};
      var newKeys = {};
      var newRowObjs = [];
      var oldIndexes = {};
      var oldRowObjs = gObj.getRowsObject().slice();
      var batchChangeKeys = this.getBatchEditedRecords(key, oldRowObjs);
      var newIndexes = {};
      var hasBatch = Object.keys(batchChangeKeys).length !== 0;
      if (gObj.getContent().querySelector(".e-emptyrow") || args.requestType === "reorder" || this.parent.groupSettings.columns.length) {
        this.refreshContentRows(args);
      } else {
        if (gObj.currentViewData.length === 0) {
          return;
        }
        var oldRowElements = {};
        var tbody2 = gObj.createElement(tbody, {
          attrs: {
            role: "rowgroup"
          }
        });
        var dataSource = gObj.currentViewData;
        var trs = [].slice.call(this.getTable().querySelector(tbody).children);
        if (this.prevCurrentView.length) {
          var prevLen = this.prevCurrentView.length;
          var currentLen = dataSource.length;
          if (prevLen === currentLen) {
            for (var i = 0; i < currentLen; i++) {
              if (this.parent.editSettings.mode === "Batch" && trs[parseInt(i.toString(), 10)].classList.contains("e-insertedrow")) {
                trs.splice(i, 1);
                --i;
                continue;
              }
              newKeys[dataSource[parseInt(i.toString(), 10)]["" + key]] = oldKeys[this.prevCurrentView[parseInt(i.toString(), 10)]["" + key]] = i;
              newIndexes[parseInt(i.toString(), 10)] = dataSource[parseInt(i.toString(), 10)]["" + key];
              oldRowElements[oldRowObjs[parseInt(i.toString(), 10)].uid] = trs[parseInt(i.toString(), 10)];
              oldIndexes[parseInt(i.toString(), 10)] = this.prevCurrentView[parseInt(i.toString(), 10)]["" + key];
            }
          } else {
            for (var i = 0; i < currentLen; i++) {
              newKeys[dataSource[parseInt(i.toString(), 10)]["" + key]] = i;
              newIndexes[parseInt(i.toString(), 10)] = dataSource[parseInt(i.toString(), 10)]["" + key];
            }
            for (var i = 0; i < prevLen; i++) {
              if (this.parent.editSettings.mode === "Batch" && trs[parseInt(i.toString(), 10)].classList.contains("e-insertedrow")) {
                trs.splice(i, 1);
                --i;
                continue;
              }
              oldRowElements[oldRowObjs[parseInt(i.toString(), 10)].uid] = trs[parseInt(i.toString(), 10)];
              oldKeys[this.prevCurrentView[parseInt(i.toString(), 10)]["" + key]] = i;
              oldIndexes[parseInt(i.toString(), 10)] = this.prevCurrentView[parseInt(i.toString(), 10)]["" + key];
            }
          }
        }
        for (var i = 0; i < dataSource.length; i++) {
          var oldIndex = oldKeys[dataSource[parseInt(i.toString(), 10)]["" + key]];
          if (!isNullOrUndefined(oldIndex)) {
            var isEqual = false;
            if (this.parent.enableDeepCompare) {
              isEqual = this.objectEqualityChecker(this.prevCurrentView[parseInt(oldIndex.toString(), 10)], dataSource[parseInt(i.toString(), 10)]);
            }
            var tr = oldRowElements[oldRowObjs[parseInt(oldIndex.toString(), 10)].uid];
            newRowObjs.push(oldRowObjs[parseInt(oldIndex.toString(), 10)]);
            if (this.rowElements[parseInt(oldIndex.toString(), 10)] && this.rowElements[parseInt(oldIndex.toString(), 10)].getAttribute("data-uid") === newRowObjs[parseInt(i.toString(), 10)].uid && (hasBatch && isNullOrUndefined(batchChangeKeys[newIndexes[parseInt(i.toString(), 10)]]) || !hasBatch && (isEqual || this.prevCurrentView[parseInt(oldIndex.toString(), 10)] === dataSource[parseInt(i.toString(), 10)]))) {
              if (oldIndex !== i) {
                this.refreshImmutableContent(i, tr, newRowObjs[parseInt(i.toString(), 10)]);
              }
              tbody2.appendChild(tr);
              continue;
            }
            if (hasBatch && !isNullOrUndefined(batchChangeKeys[newIndexes[parseInt(i.toString(), 10)]]) || !this.parent.enableDeepCompare && dataSource[parseInt(i.toString(), 10)] !== this.prevCurrentView[parseInt(oldIndex.toString(), 10)] || this.parent.enableDeepCompare && !isEqual) {
              oldRowObjs[parseInt(oldIndex.toString(), 10)].setRowValue(dataSource[parseInt(i.toString(), 10)]);
            }
            tbody2.appendChild(tr);
            this.refreshImmutableContent(i, tr, newRowObjs[parseInt(i.toString(), 10)]);
          } else {
            var row2 = new RowRenderer(this.serviceLocator, null, gObj);
            var args_1 = {
              startIndex: i
            };
            var modelData = this.generator.generateRows([dataSource[parseInt(i.toString(), 10)]], args_1);
            newRowObjs.push(modelData[0]);
            var tr = row2.render(modelData[0], gObj.getColumns());
            tbody2.appendChild(tr);
            this.refreshImmutableContent(i, tr, newRowObjs[parseInt(i.toString(), 10)]);
          }
        }
        this.rows = newRowObjs;
        this.rowElements = [].slice.call(tbody2.children);
        remove(this.getTable().querySelector(tbody));
        this.getTable().appendChild(tbody2);
        this.parent.trigger(dataBound, {}, function() {
          if (_this.parent.allowTextWrap) {
            _this.parent.notify(freezeRender, {
              case: "textwrap"
            });
          }
        });
        if (args) {
          var action = (args.requestType || "").toLowerCase() + "-complete";
          this.parent.notify(action, args);
        }
      }
    };
    ContentRender2.prototype.objectEqualityChecker = function(old, next) {
      var keys = Object.keys(old);
      var isEqual = true;
      for (var i = 0; i < keys.length; i++) {
        if (old[keys[parseInt(i.toString(), 10)]] !== next[keys[parseInt(i.toString(), 10)]]) {
          var isDate = old[keys[parseInt(i.toString(), 10)]] instanceof Date && next[keys[parseInt(i.toString(), 10)]] instanceof Date;
          if (!isDate || old[keys[parseInt(i.toString(), 10)]].getTime() !== next[keys[parseInt(i.toString(), 10)]].getTime()) {
            isEqual = false;
            break;
          }
        }
      }
      return isEqual;
    };
    ContentRender2.prototype.getBatchEditedRecords = function(primaryKey, rows) {
      var keys = {};
      var changes = this.parent.getBatchChanges();
      var changedRecords2 = [];
      var addedRecords2 = [];
      if (Object.keys(changes).length) {
        changedRecords2 = changes.changedRecords;
        addedRecords2 = changes.addedRecords;
      }
      var args = {
        cancel: false
      };
      this.parent.notify(immutableBatchCancel, {
        rows,
        args
      });
      if (addedRecords2.length) {
        if (this.parent.editSettings.newRowPosition === "Bottom") {
          rows.splice(rows.length - 1, addedRecords2.length);
        } else {
          if (!args.cancel) {
            rows.splice(0, addedRecords2.length);
          }
        }
      }
      for (var i = 0; i < changedRecords2.length; i++) {
        keys[changedRecords2[parseInt(i.toString(), 10)]["" + primaryKey]] = i;
      }
      return keys;
    };
    ContentRender2.prototype.refreshImmutableContent = function(index, tr, row2) {
      row2.isAltRow = this.parent.enableAltRow ? index % 2 !== 0 : false;
      if (row2.isAltRow) {
        tr.classList.add("e-altrow");
      } else {
        tr.classList.remove("e-altrow");
      }
      row2.index = index;
      row2.edit = void 0;
      row2.isDirty = false;
      tr.setAttribute(ariaRowIndex, (index + 1).toString());
      this.updateCellIndex(tr, index);
    };
    ContentRender2.prototype.updateCellIndex = function(rowEle, index) {
      for (var i = 0; i < rowEle.cells.length; i++) {
        rowEle.cells[parseInt(i.toString(), 10)].setAttribute("index", index.toString());
      }
    };
    return ContentRender2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/header-renderer.js
var HeaderRender = (
  /** @class */
  function() {
    function HeaderRender2(parent, serviceLocator) {
      var _this = this;
      this.frzIdx = 0;
      this.notfrzIdx = 0;
      this.isFirstCol = false;
      this.isReplaceDragEle = true;
      this.helper = function(e) {
        var gObj = _this.parent;
        var target = _this.draggable.currentStateTarget;
        var parentEle = parentsUntil(target, "e-headercell");
        if (!(gObj.allowReordering || gObj.allowGrouping) || !isNullOrUndefined(parentEle) && parentEle.getElementsByClassName("e-checkselectall").length > 0) {
          return false;
        }
        var visualElement = _this.parent.createElement("div", {
          className: "e-cloneproperties e-dragclone e-headerclone"
        });
        var element = target.classList.contains("e-headercell") ? target : parentEle;
        if (!element || !gObj.allowReordering && element.classList.contains("e-stackedheadercell")) {
          return false;
        }
        var height = element.offsetHeight;
        var headercelldiv = element.querySelector(".e-headercelldiv") || element.querySelector(".e-stackedheadercelldiv");
        var col;
        if (headercelldiv) {
          if (element.querySelector(".e-stackedheadercelldiv")) {
            col = gObj.getStackedHeaderColumnByHeaderText(headercelldiv.innerText.trim(), gObj.columns);
          } else {
            col = gObj.getColumnByUid(headercelldiv.getAttribute("e-mappinguid"));
          }
          _this.column = col;
          if (_this.column.lockColumn) {
            return false;
          }
          visualElement.setAttribute("e-mappinguid", _this.column.uid);
        }
        if (col && !isNullOrUndefined(col.headerTemplate)) {
          if (!isNullOrUndefined(col.headerTemplate)) {
            var colIndex = gObj.getColumnIndexByField(col.field);
            var result = col.getHeaderTemplate()(extend({
              "index": colIndex
            }, col), gObj, "headerTemplate", null, null, null, null, gObj.root);
            var isReactCompiler = gObj.isReact && typeof col.headerTemplate !== "string";
            var isReactChild = gObj.parentDetails && gObj.parentDetails.parentInstObj && gObj.parentDetails.parentInstObj.isReact;
            if (isReactCompiler || isReactChild) {
              gObj.renderTemplates();
            }
            appendChildren(visualElement, result);
          } else {
            visualElement.innerHTML = col.headerTemplate;
          }
          if (!isNullOrUndefined(visualElement.firstChild) && visualElement.firstChild.nodeType === 1) {
            visualElement.firstChild.style.pointerEvents = "none";
          }
        } else {
          visualElement.innerHTML = headercelldiv ? col.headerText : element.firstElementChild.innerHTML;
        }
        visualElement.style.width = element.offsetWidth + "px";
        visualElement.style.height = element.offsetHeight + "px";
        visualElement.style.lineHeight = (height - 6).toString() + "px";
        gObj.element.appendChild(visualElement);
        return visualElement;
      };
      this.dragStart = function(e) {
        var gObj = _this.parent;
        gObj.element.querySelector(".e-gridpopup").style.display = "none";
        gObj.notify(columnDragStart, {
          target: _this.draggable.currentStateTarget,
          column: _this.column,
          event: e.event
        });
      };
      this.drag = function(e) {
        var gObj = _this.parent;
        var target = e.target;
        if (target) {
          var closest2 = closest(target, ".e-grid");
          var cloneElement = _this.parent.element.querySelector(".e-cloneproperties");
          if (!closest2 || closest2.getAttribute("id") !== gObj.element.getAttribute("id")) {
            classList(cloneElement, ["e-notallowedcur"], ["e-defaultcur"]);
            if (gObj.allowReordering) {
              gObj.element.querySelector(".e-reorderuparrow").style.display = "none";
              gObj.element.querySelector(".e-reorderdownarrow").style.display = "none";
            }
            if (!gObj.groupSettings.allowReordering) {
              return;
            }
          }
          gObj.notify(columnDrag, {
            target: e.target,
            column: _this.column,
            event: e.event
          });
        }
      };
      this.dragStop = function(e) {
        var gObj = _this.parent;
        var cancel;
        gObj.element.querySelector(".e-gridpopup").style.display = "none";
        if (!parentsUntil(e.target, "e-headercell") && !parentsUntil(e.target, "e-groupdroparea") || !gObj.allowReordering && parentsUntil(e.target, "e-headercell") || !e.helper.getAttribute("e-mappinguid") && parentsUntil(e.target, "e-groupdroparea")) {
          remove(e.helper);
          cancel = true;
        }
        gObj.notify(columnDragStop, {
          target: e.target,
          event: e.event,
          column: _this.column,
          cancel
        });
      };
      this.drop = function(e) {
        var gObj = _this.parent;
        var uid2 = e.droppedElement.getAttribute("e-mappinguid");
        var closest2 = closest(e.target, ".e-grid");
        remove(e.droppedElement);
        if (closest2 && closest2.getAttribute("id") !== gObj.element.getAttribute("id") || !(gObj.allowReordering || gObj.allowGrouping)) {
          return;
        }
        gObj.notify(headerDrop, {
          target: e.target,
          uid: uid2,
          droppedElement: e.droppedElement
        });
      };
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      this.ariaService = this.serviceLocator.getService("ariaService");
      this.widthService = this.serviceLocator.getService("widthService");
      if (this.parent.isDestroyed) {
        return;
      }
      if (!this.parent.enableColumnVirtualization) {
        this.parent.on(columnVisibilityChanged, this.setVisible, this);
      }
      this.parent.on(columnPositionChanged, this.colPosRefresh, this);
      this.parent.on(initialEnd, this.renderCustomToolbar, this);
      if (this.parent.rowRenderingMode === "Vertical") {
        this.parent.on(uiUpdate, this.updateCustomResponsiveToolbar, this);
      }
    }
    HeaderRender2.prototype.renderPanel = function() {
      var div = this.parent.element.querySelector("." + gridHeader);
      var isRendered = div != null;
      div = isRendered ? div : this.parent.createElement("div", {
        className: "e-gridheader"
      });
      var innerDiv = isRendered ? div.querySelector("." + headerContent) : this.parent.createElement("div", {
        className: headerContent
      });
      this.toggleStackClass(div);
      div.appendChild(innerDiv);
      this.setPanel(div);
      if (!isRendered) {
        this.parent.element.appendChild(div);
      }
    };
    HeaderRender2.prototype.renderTable = function() {
      var headerDiv = this.getPanel();
      headerDiv.appendChild(this.createHeaderTable());
      this.setTable(headerDiv.querySelector("." + table));
      this.initializeHeaderDrag();
      this.initializeHeaderDrop();
      this.parent.notify(headerRefreshed, {
        rows: this.rows
      });
    };
    HeaderRender2.prototype.getPanel = function() {
      return this.headerPanel;
    };
    HeaderRender2.prototype.setPanel = function(panel) {
      this.headerPanel = panel;
    };
    HeaderRender2.prototype.getTable = function() {
      return this.headerTable;
    };
    HeaderRender2.prototype.setTable = function(table2) {
      this.headerTable = table2;
    };
    HeaderRender2.prototype.getColGroup = function() {
      return this.colgroup;
    };
    HeaderRender2.prototype.setColGroup = function(colGroup2) {
      return this.colgroup = colGroup2;
    };
    HeaderRender2.prototype.getRows = function() {
      var table2 = this.getTable();
      return table2.tHead.rows;
    };
    HeaderRender2.prototype.createHeaderTable = function() {
      var table2 = this.createTable();
      var innerDiv = this.getPanel().querySelector("." + headerContent);
      innerDiv.appendChild(table2);
      return innerDiv;
    };
    HeaderRender2.prototype.createHeader = function(tableEle, tableName) {
      if (tableEle === void 0) {
        tableEle = null;
      }
      var gObj = this.parent;
      if (this.getTable()) {
        remove(this.getTable());
      }
      var table2 = this.parent.createElement("table", {
        className: table,
        attrs: {
          role: "presentation"
        }
      });
      table2.style.cssText = "border-collapse: separate; border-spacing: .25px;";
      var findHeaderRow = this.createHeaderContent(tableName);
      var thead = findHeaderRow.thead;
      var tbody2 = this.parent.createElement(tbody, {
        className: this.parent.frozenRows || (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) && this.parent.editSettings.showAddNewRow ? "" : "e-hide",
        attrs: {
          role: "rowgroup"
        }
      });
      this.caption = this.parent.createElement("caption", {
        innerHTML: this.parent.element.id + "_header_table",
        className: "e-hide"
      });
      var colGroup2 = this.parent.createElement(colGroup);
      var rowBody = this.parent.createElement("tr", {
        attrs: {
          role: "row"
        },
        className: (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) && this.parent.editSettings.showAddNewRow ? "e-hide" : ""
      });
      var bodyCell;
      var rows = this.rows = findHeaderRow.rows;
      for (var i = 0, len = rows.length; i < len; i++) {
        for (var j = 0, len_1 = rows[parseInt(i.toString(), 10)].cells.length; j < len_1; j++) {
          bodyCell = this.parent.createElement("td");
          rowBody.appendChild(bodyCell);
        }
      }
      if (gObj.allowFiltering || gObj.allowSorting || gObj.allowGrouping) {
        table2.classList.add("e-sortfilter");
      }
      this.updateColGroup(colGroup2);
      tbody2.appendChild(rowBody);
      table2.appendChild(this.setColGroup(colGroup2));
      table2.appendChild(thead);
      table2.appendChild(tbody2);
      table2.appendChild(this.caption);
      return table2;
    };
    HeaderRender2.prototype.createTable = function(tableEle) {
      if (tableEle === void 0) {
        tableEle = null;
      }
      return this.createHeader(tableEle);
    };
    HeaderRender2.prototype.createHeaderContent = function(tableName) {
      var gObj = this.parent;
      var columns = gObj.getColumns();
      var thead = this.parent.createElement("thead", {
        attrs: {
          "role": "rowgroup"
        }
      });
      var colHeader = this.parent.createElement("tr", {
        className: "e-columnheader",
        attrs: {
          role: "row"
        }
      });
      var rowRenderer = new RowRenderer(this.serviceLocator, CellType.Header, gObj);
      rowRenderer.element = colHeader;
      var rows = [];
      var headerRow;
      this.colDepth = measureColumnDepth(gObj.columns);
      for (var i = 0, len = this.colDepth; i < len; i++) {
        rows[parseInt(i.toString(), 10)] = this.generateRow(i);
        rows[parseInt(i.toString(), 10)].cells = [];
      }
      rows = this.ensureColumns(rows);
      rows = this.getHeaderCells(rows, tableName);
      if (gObj.isRowDragable() && this.parent.getFrozenMode() === "Right") {
        for (var i = 0, len = rows.length; i < len; i++) {
          rows[parseInt(i.toString(), 10)].cells.push(this.generateCell({}, CellType.RowDragHIcon));
        }
      }
      var headerTemplateColumn = columns.filter(function(a) {
        return a.headerTemplate;
      });
      if (headerTemplateColumn.length && (this.parent.isReact || this.parent.isVue)) {
        clearReactVueTemplates(this.parent, ["headerTemplate"]);
      }
      for (var i = 0, len = this.colDepth; i < len; i++) {
        headerRow = rowRenderer.render(rows[parseInt(i.toString(), 10)], columns);
        if (this.parent.rowHeight && headerRow.querySelector(".e-headercell")) {
          headerRow.style.height = this.parent.rowHeight + "px";
        }
        addFixedColumnBorder(headerRow);
        thead.appendChild(headerRow);
      }
      var findHeaderRow = {
        thead,
        rows
      };
      return findHeaderRow;
    };
    HeaderRender2.prototype.updateColGroup = function(colGroup2) {
      var cols = this.parent.getColumns();
      var col;
      var indexes = this.parent.getColumnIndexesInView();
      colGroup2.id = this.parent.element.id + colGroup;
      if (this.parent.allowGrouping) {
        for (var i = 0, len = this.parent.groupSettings.columns.length; i < len; i++) {
          if (this.parent.enableColumnVirtualization && indexes.indexOf(i) === -1) {
            continue;
          }
          col = this.parent.createElement("col", {
            className: "e-group-intent"
          });
          colGroup2.appendChild(col);
        }
      }
      if (this.parent.detailTemplate || this.parent.childGrid) {
        col = this.parent.createElement("col", {
          className: "e-detail-intent"
        });
        colGroup2.appendChild(col);
      }
      if (this.parent.isRowDragable() && this.parent.getFrozenMode() !== "Right") {
        col = this.parent.createElement("col", {
          className: "e-drag-intent"
        });
        colGroup2.appendChild(col);
      }
      for (var i = 0, len = cols.length; i < len; i++) {
        col = this.parent.createElement("col");
        if (cols[parseInt(i.toString(), 10)].visible === false) {
          setStyleAttribute(col, {
            "display": "none"
          });
        }
        colGroup2.appendChild(col);
      }
      if (this.parent.isRowDragable() && this.parent.getFrozenMode() === "Right") {
        col = this.parent.createElement("col", {
          className: "e-drag-intent"
        });
        colGroup2.appendChild(col);
      }
      return colGroup2;
    };
    HeaderRender2.prototype.ensureColumns = function(rows) {
      var gObj = this.parent;
      var indexes = this.parent.getColumnIndexesInView();
      for (var i = 0, len = rows.length; i < len; i++) {
        if (gObj.allowGrouping) {
          for (var c = 0, len_2 = gObj.groupSettings.columns.length; c < len_2; c++) {
            if (this.parent.enableColumnVirtualization && indexes.indexOf(c) === -1) {
              continue;
            }
            rows[parseInt(i.toString(), 10)].cells.push(this.generateCell({}, CellType.HeaderIndent));
          }
        }
        if (gObj.detailTemplate || gObj.childGrid) {
          var args = {};
          this.parent.notify(detailIndentCellInfo, args);
          rows[parseInt(i.toString(), 10)].cells.push(this.generateCell(args, CellType.DetailHeader));
        }
        if (gObj.isRowDragable() && this.parent.getFrozenMode() !== "Right") {
          rows[parseInt(i.toString(), 10)].cells.push(this.generateCell({}, CellType.RowDragHIcon));
        }
      }
      return rows;
    };
    HeaderRender2.prototype.getHeaderCells = function(rows, tableName) {
      var thead = this.parent.getHeaderTable() && this.parent.getHeaderTable().querySelector("thead");
      var cols = this.parent.enableColumnVirtualization ? this.parent.getColumns(this.parent.enablePersistence) : this.parent.columns;
      this.frzIdx = 0;
      this.notfrzIdx = 0;
      if (this.parent.lockcolPositionCount) {
        for (var i = 0; i < (!isNullOrUndefined(cols) ? cols.length : 0); i++) {
          this.lockColsRendered = false;
          rows = this.appendCells(cols[parseInt(i.toString(), 10)], rows, 0, i === 0, false, i === cols.length - 1, thead, tableName, false);
        }
      }
      for (var i = 0, len = !isNullOrUndefined(cols) ? cols.length : 0; i < len; i++) {
        this.notfrzIdx = 0;
        this.lockColsRendered = true;
        rows = this.appendCells(cols[parseInt(i.toString(), 10)], rows, 0, i === 0, false, i === len - 1, thead, tableName, false);
      }
      return rows;
    };
    HeaderRender2.prototype.appendCells = function(cols, rows, index, isFirstObj, isFirstCol, isLastCol, isMovable, tableName, isStackLastCol) {
      var lastCol = isLastCol ? isStackLastCol ? "e-laststackcell" : "e-lastcell" : "";
      var isLockColumn = !this.parent.lockcolPositionCount || cols.lockColumn && !this.lockColsRendered || !cols.lockColumn && this.lockColsRendered;
      if (!cols.columns) {
        if (isLockColumn) {
          rows[parseInt(index.toString(), 10)].cells.push(this.generateCell(cols, CellType.Header, this.colDepth - index, (isFirstObj ? "" : isFirstCol ? "e-firstcell" : "") + lastCol, index, this.parent.getColumnIndexByUid(cols.uid)));
        }
        if (this.parent.lockcolPositionCount) {
          if (this.frzIdx + this.notfrzIdx < this.parent.frozenColumns && (cols.lockColumn && !this.lockColsRendered || !cols.lockColumn && this.lockColsRendered)) {
            this.frzIdx++;
          } else {
            this.notfrzIdx++;
          }
        } else {
          this.frzIdx++;
        }
      } else {
        this.isFirstCol = false;
        var colSpan = this.getCellCnt(cols, 0);
        if (colSpan) {
          var stackedLockColsCount = this.getStackedLockColsCount(cols, 0);
          var isStackedLockColumn = this.parent.lockcolPositionCount === 0 || !this.lockColsRendered && stackedLockColsCount !== 0 || this.lockColsRendered && colSpan - stackedLockColsCount !== 0;
          if (isStackedLockColumn) {
            rows[parseInt(index.toString(), 10)].cells.push(new Cell({
              cellType: CellType.StackedHeader,
              column: cols,
              colSpan: this.getColSpan(colSpan, stackedLockColsCount),
              className: isFirstObj ? "" : isFirstCol ? "e-firstcell" : ""
            }));
          }
        }
        if (this.parent.lockcolPositionCount && !this.lockColsRendered) {
          for (var i = 0; i < cols.columns.length; i++) {
            rows = this.appendCells(cols.columns[parseInt(i.toString(), 10)], rows, index + 1, isFirstObj, i === 0, i === cols.columns.length - 1 && isLastCol, isMovable, tableName, false);
          }
        }
        if (this.lockColsRendered) {
          for (var i = 0, len = cols.columns.length; i < len; i++) {
            isFirstObj = isFirstObj && i === 0;
            var isFirstCol_1 = this.isFirstCol = cols.columns[parseInt(i.toString(), 10)].visible && !isFirstObj;
            var isLaststackedCol = i === len - 1 && isLastCol;
            rows = this.appendCells(cols.columns[parseInt(i.toString(), 10)], rows, index + 1, isFirstObj, isFirstCol_1 && !isLaststackedCol, isLaststackedCol, isMovable, tableName, true);
          }
        }
      }
      return rows;
    };
    HeaderRender2.prototype.getStackedLockColsCount = function(col, lockColsCount) {
      if (col.columns) {
        for (var i = 0; i < col.columns.length; i++) {
          lockColsCount = this.getStackedLockColsCount(col.columns[parseInt(i.toString(), 10)], lockColsCount);
        }
      } else if (col.lockColumn) {
        lockColsCount++;
      }
      return lockColsCount;
    };
    HeaderRender2.prototype.getColSpan = function(colSpan, stackedLockColsCount) {
      colSpan = !this.lockColsRendered ? stackedLockColsCount : colSpan - stackedLockColsCount;
      return colSpan;
    };
    HeaderRender2.prototype.generateRow = function(index) {
      return new Row({});
    };
    HeaderRender2.prototype.generateCell = function(column, cellType, rowSpan, className, rowIndex, colIndex) {
      var opt = {
        "visible": column.visible,
        "isDataCell": false,
        "isTemplate": !isNullOrUndefined(column.headerTemplate),
        "rowID": "",
        "column": column,
        "cellType": cellType,
        "rowSpan": rowSpan,
        "className": className,
        "index": rowIndex,
        "colIndex": colIndex
      };
      if (!opt.rowSpan || opt.rowSpan < 2) {
        delete opt.rowSpan;
      }
      return new Cell(opt);
    };
    HeaderRender2.prototype.setVisible = function(columns) {
      var gObj = this.parent;
      var displayVal;
      var idx;
      for (var c = 0, clen = columns.length; c < clen; c++) {
        var column = columns[parseInt(c.toString(), 10)];
        idx = gObj.getNormalizedColumnIndex(column.uid);
        displayVal = column.visible ? "" : "none";
        setStyleAttribute(this.getColGroup().children[parseInt(idx.toString(), 10)], {
          "display": displayVal
        });
        if (gObj.editSettings.showAddNewRow && gObj.element.querySelector(".e-addedrow")) {
          setStyleAttribute(gObj.element.querySelector(".e-addedrow").querySelector("colgroup").childNodes[parseInt(idx.toString(), 10)], {
            "display": displayVal
          });
        }
      }
      this.refreshUI();
      if (this.parent.editSettings.showAddNewRow) {
        this.parent.isAddNewRow = true;
      }
    };
    HeaderRender2.prototype.colPosRefresh = function() {
      this.refreshUI();
    };
    HeaderRender2.prototype.refreshUI = function() {
      var headerDiv = this.getPanel();
      this.toggleStackClass(headerDiv);
      var table2 = this.getTable();
      var tableName = void 0;
      if (table2) {
        remove(table2);
        if (this.parent.editSettings.showAddNewRow && !this.parent.isAddNewRow && table2.querySelector(".e-addedrow") && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling)) {
          table2.querySelector(".e-addedrow").classList.add("e-addrow-removed");
          this.parent.isAddNewRow = true;
        }
        table2.removeChild(table2.firstChild);
        table2.removeChild(table2.childNodes[0]);
        var colGroup2 = this.parent.createElement(colGroup);
        var findHeaderRow = this.createHeaderContent(tableName);
        this.rows = findHeaderRow.rows;
        table2.insertBefore(findHeaderRow.thead, table2.firstChild);
        this.updateColGroup(colGroup2);
        table2.insertBefore(this.setColGroup(colGroup2), table2.firstChild);
        this.appendContent(table2);
        this.parent.notify(colGroupRefresh, {});
        this.widthService.setWidthToColumns();
        this.parent.updateDefaultCursor();
        this.initializeHeaderDrag();
        var rows = [].slice.call(headerDiv.querySelectorAll("tr.e-columnheader"));
        for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
          var row2 = rows_1[_i];
          var gCells = [].slice.call(row2.getElementsByClassName("e-grouptopleftcell"));
          if (gCells.length) {
            gCells[gCells.length - 1].classList.add("e-lastgrouptopleftcell");
          }
        }
        this.parent.notify(headerRefreshed, {
          rows: this.rows
        });
        if (this.parent.enableColumnVirtualization && parentsUntil(table2, movableHeader)) {
          this.parent.notify(headerRefreshed, {
            rows: this.rows,
            args: {
              isFrozen: false,
              isXaxis: true
            }
          });
        }
        if (this.parent.allowTextWrap && this.parent.textWrapSettings.wrapMode === "Header") {
          wrap(rows, true);
        }
      }
      var firstHeaderCell = this.parent.getHeaderContent().querySelector(".e-headercell:not(.e-hide)");
      if (!isNullOrUndefined(firstHeaderCell)) {
        firstHeaderCell.tabIndex = 0;
      }
    };
    HeaderRender2.prototype.toggleStackClass = function(div) {
      var column = this.parent.columns;
      var stackedHdr = !isNullOrUndefined(column) ? column.some(function(column2) {
        return !isNullOrUndefined(column2.columns);
      }) : false;
      if (stackedHdr) {
        div.classList.add("e-stackedheader");
      } else {
        div.classList.remove("e-stackedheader");
      }
    };
    HeaderRender2.prototype.appendContent = function(table2) {
      this.getPanel().querySelector("." + headerContent).appendChild(table2);
    };
    HeaderRender2.prototype.getCellCnt = function(col, cnt) {
      if (col.columns) {
        for (var i = 0, len = col.columns.length; i < len; i++) {
          cnt = this.getCellCnt(col.columns[parseInt(i.toString(), 10)], cnt);
        }
      } else {
        if (col.visible) {
          cnt++;
        }
      }
      return cnt;
    };
    HeaderRender2.prototype.initializeHeaderDrag = function() {
      var gObj = this.parent;
      if (!(this.parent.allowReordering || this.parent.allowGrouping && this.parent.groupSettings.showDropArea)) {
        return;
      }
      this.draggable = new Draggable(gObj.getHeaderContent(), {
        dragTarget: ".e-headercell",
        distance: 5,
        helper: this.helper,
        dragStart: this.dragStart,
        drag: this.drag,
        dragStop: this.dragStop,
        abort: ".e-rhandler",
        isReplaceDragEle: this.isReplaceDragEle
      });
      this.parent.on(destroy, this.droppableDestroy, this);
    };
    HeaderRender2.prototype.initializeHeaderDrop = function() {
      var gObj = this.parent;
      this.droppable = new Droppable(gObj.getHeaderContent(), {
        accept: ".e-dragclone",
        drop: this.drop
      });
      this.parent.on(destroy, this.droppableDestroy, this);
    };
    HeaderRender2.prototype.droppableDestroy = function() {
      if (this.droppable && !this.droppable.isDestroyed) {
        this.droppable.destroy();
      }
      if (this.draggable && !this.draggable.isDestroyed) {
        this.draggable.destroy();
      }
    };
    HeaderRender2.prototype.renderCustomToolbar = function() {
      var _this = this;
      var gObj = this.parent;
      if (gObj.rowRenderingMode === "Vertical" && !gObj.toolbar && (gObj.allowSorting || gObj.allowFiltering && gObj.filterSettings.type !== "FilterBar")) {
        var div = gObj.createElement("div", {
          className: "e-res-toolbar e-toolbar"
        });
        var toolbarItems = gObj.createElement("div", {
          className: "e-toolbar-items"
        });
        var toolbarLeft = gObj.createElement("div", {
          className: "e-toolbar-left"
        });
        var count2 = this.parent.allowFiltering && this.parent.allowSorting ? 2 : 1;
        for (var i = 0; i < count2; i++) {
          var toolbarItem = gObj.createElement("div", {
            className: "e-toolbar-item e-gridresponsiveicons e-icons e-tbtn-align"
          });
          var cls = count2 === 1 ? this.parent.allowSorting ? "sort" : "filter" : i === 1 ? "sort" : "filter";
          var button = gObj.createElement("button", {
            className: "e-tbar-btn e-control e-btn e-lib e-icon-btn"
          });
          var span = gObj.createElement("span", {
            className: "e-btn-icon e-res" + cls + "-icon e-icons"
          });
          button.appendChild(span);
          var btnObj = new Button({
            cssClass: this.parent.cssClass ? this.parent.cssClass : ""
          });
          btnObj.appendTo(button);
          button.onclick = function(e) {
            if (e.target.classList.contains("e-ressort-btn") || e.target.classList.contains("e-ressort-icon") || e.target.querySelector(".e-ressort-icon")) {
              _this.parent.showResponsiveCustomSort();
            } else {
              _this.parent.showResponsiveCustomFilter();
            }
          };
          toolbarItem.appendChild(button);
          toolbarLeft.appendChild(toolbarItem);
        }
        toolbarItems.appendChild(toolbarLeft);
        div.appendChild(toolbarItems);
        gObj.element.insertBefore(div, this.parent.element.querySelector("." + gridHeader));
      } else {
        if (gObj.enableAdaptiveUI && !gObj.toolbar) {
          gObj.getContent().classList.add("e-responsive-header");
        }
      }
    };
    HeaderRender2.prototype.updateCustomResponsiveToolbar = function(args) {
      var resToolbar = this.parent.element.querySelector(".e-responsive-toolbar");
      if (args.module === "toolbar") {
        if (resToolbar) {
          remove(resToolbar);
        } else {
          this.renderCustomToolbar();
        }
      }
    };
    return HeaderRender2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/cell-renderer.js
var CellRenderer = (
  /** @class */
  function() {
    function CellRenderer2(parent, locator) {
      this.localizer = locator.getService("localization");
      this.formatter = locator.getService("valueFormatter");
      this.parent = parent;
      this.element = this.parent.createElement("TD", {
        className: rowCell,
        attrs: {
          role: "gridcell",
          tabindex: "-1"
        }
      });
      this.rowChkBox = this.parent.createElement("input", {
        className: "e-checkselect",
        attrs: {
          "type": "checkbox",
          "aria-label": this.localizer.getConstant("SelectRow")
        }
      });
    }
    CellRenderer2.prototype.getGui = function() {
      return "";
    };
    CellRenderer2.prototype.format = function(column, value, data) {
      if (!isNullOrUndefined(column.format)) {
        if (column.type === "number" && isNaN(parseInt(value, 10))) {
          value = null;
        }
        if (column.type === "dateonly" && typeof value === "string" && value) {
          var arr = value.split(/[^0-9.]/);
          value = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10));
        }
        value = this.formatter.toView(value, column.getFormatter());
      }
      return isNullOrUndefined(value) ? "" : value.toString();
    };
    CellRenderer2.prototype.evaluate = function(node, cell, data, attributes2, fData, isEdit) {
      var _a;
      var result;
      if (cell.column.template) {
        var isReactCompiler = this.parent.isReact && typeof cell.column.template !== "string" && !(cell.column.template.prototype && cell.column.template.prototype.CSPTemplate);
        var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
        var isReactPrintGrid = this.parent.printGridParent && this.parent.printGridParent.isReact;
        var literals_1 = ["index"];
        var dummyData = extendObjWithFn({}, data, (_a = {}, _a[foreignKeyData] = fData, _a.column = cell.column, _a));
        var templateID = this.parent.element.id + cell.column.uid;
        var str = "isStringTemplate";
        if (isReactCompiler || isReactChild || isReactPrintGrid) {
          var copied = {
            "index": attributes2[literals_1[0]]
          };
          cell.column.getColumnTemplate()(extend(copied, dummyData), this.parent, "columnTemplate", templateID, this.parent["" + str], null, node);
        } else {
          result = cell.column.getColumnTemplate()(extend({
            "index": attributes2[literals_1[0]]
          }, dummyData), this.parent, "template", templateID, this.parent["" + str], void 0, void 0, this.parent["root"]);
        }
        if (!isReactCompiler && !isReactChild && !isReactPrintGrid) {
          appendChildren(node, result);
        }
        this.parent.notify("template-result", {
          template: result
        });
        result = null;
        if (cell.column.templateOptions.enableAriaLabel) {
          node.setAttribute("aria-label", node.innerText + this.localizer.getConstant("TemplateCell") + this.localizer.getConstant("ColumnHeader") + cell.column.headerText);
        }
        return false;
      }
      return true;
    };
    CellRenderer2.prototype.invokeFormatter = function(column, value, data) {
      if (!isNullOrUndefined(column.formatter)) {
        if (doesImplementInterface(column.formatter, "getValue")) {
          var formatter = column.formatter;
          value = new formatter().getValue(column, data);
        } else if (typeof column.formatter === "function") {
          value = column.formatter(column, data);
        } else {
          value = column.formatter.getValue(column, data);
        }
      }
      return value;
    };
    CellRenderer2.prototype.render = function(cell, data, attributes2, isExpand, isEdit) {
      return this.refreshCell(cell, data, attributes2, isEdit);
    };
    CellRenderer2.prototype.refreshTD = function(td, cell, data, attributes2) {
      var isEdit = this.parent.editSettings.mode === "Batch" && td.classList.contains("e-editedbatchcell");
      if (this.parent.isReact) {
        var cellIndex = td.cellIndex;
        var parentRow = td.parentElement;
        remove(td);
        var newTD = this.refreshCell(cell, data, attributes2, isEdit);
        this.cloneAttributes(newTD, td);
        if (parentRow.cells.length !== cellIndex - 1) {
          parentRow.insertBefore(newTD, parentRow.cells[parseInt(cellIndex.toString(), 10)]);
        } else {
          parentRow.appendChild(newTD);
        }
      } else {
        var node = this.refreshCell(cell, data, attributes2, isEdit);
        td.innerHTML = "";
        var arialabelText = node.getAttribute("aria-label");
        arialabelText ? td.setAttribute("aria-label", arialabelText) : null;
        var elements = [].slice.call(node.childNodes);
        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
          var elem = elements_1[_i];
          td.appendChild(elem);
        }
      }
    };
    CellRenderer2.prototype.cloneAttributes = function(target, source) {
      var attrs = source.attributes;
      var i = attrs.length;
      var attr;
      while (i--) {
        attr = attrs[parseInt(i.toString(), 10)];
        target.setAttribute(attr.name, attr.value);
      }
    };
    CellRenderer2.prototype.refreshCell = function(cell, data, attributes2, isEdit) {
      var _a;
      var node = this.element.cloneNode();
      var column = cell.column;
      var fData;
      if (cell.isForeignKey) {
        fData = cell.foreignKeyData[0] || (_a = {}, _a[column.foreignKeyValue] = column.format ? null : "", _a);
      }
      var innerHtml = this.getGui();
      var value = cell.isForeignKey ? this.getValue(column.foreignKeyValue, fData, column) : this.getValue(column.field, data, column);
      if ((column.type === "date" || column.type === "datetime") && !isNullOrUndefined(value)) {
        value = new Date(value);
      }
      if (column.type === "dateonly" && !isNullOrUndefined(value) && typeof value === "string") {
        var arr = value.split(/[^0-9.]/);
        value = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10));
      }
      value = this.format(column, value, data);
      innerHtml = value.toString();
      if (column.type === "boolean" && !column.displayAsCheckBox) {
        var localeStr = value !== "true" && value !== "false" ? null : value === "true" ? "True" : "False";
        innerHtml = localeStr ? this.localizer.getConstant(localeStr) : innerHtml;
      }
      var fromFormatter = this.invokeFormatter(column, value, data);
      innerHtml = !isNullOrUndefined(column.formatter) ? isNullOrUndefined(fromFormatter) ? "" : fromFormatter.toString() : innerHtml;
      if (this.evaluate(node, cell, data, attributes2, fData, isEdit) && column.type !== "checkbox") {
        this.appendHtml(node, this.parent.sanitize(innerHtml), column.getDomSetter ? column.getDomSetter() : "innerHTML");
      } else if (column.type === "checkbox") {
        node.classList.add(gridChkBox);
        if (this.parent.selectionSettings.persistSelection) {
          value = value === "true";
        } else {
          value = false;
        }
        var checkWrap = createCheckBox(this.parent.createElement, false, {
          checked: value,
          label: " "
        });
        if (this.parent.cssClass) {
          addClass([checkWrap], [this.parent.cssClass]);
        }
        this.rowChkBox.id = "checkbox-" + cell.rowID;
        checkWrap.insertBefore(this.rowChkBox.cloneNode(), checkWrap.firstChild);
        node.appendChild(checkWrap);
      }
      if (this.parent.checkAllRows === "Check" && this.parent.enableVirtualization) {
        cell.isSelected = true;
      }
      this.setAttributes(node, cell, attributes2);
      if (column.type === "boolean" && column.displayAsCheckBox) {
        var checked = isNaN(parseInt(value.toString(), 10)) ? value === "true" : parseInt(value.toString(), 10) > 0;
        var checkWrap = createCheckBox(this.parent.createElement, false, {
          checked,
          label: " "
        });
        node.innerHTML = "";
        node.classList.add("e-gridchkbox-cell");
        checkWrap.classList.add("e-checkbox-disabled");
        if (this.parent.cssClass) {
          addClass([checkWrap], [this.parent.cssClass]);
        }
        node.appendChild(checkWrap);
      }
      if (node.classList.contains("e-summarycell") && !data.key) {
        var uid2 = node.getAttribute("e-mappinguid");
        column = this.parent.getColumnByUid(uid2);
        node.setAttribute("aria-label", innerHtml + this.localizer.getConstant("ColumnHeader") + cell.column.headerText);
      }
      if (this.parent.isFrozenGrid() && (!data || data && !data.key)) {
        addStickyColumnPosition(this.parent, column, node);
      }
      return node;
    };
    CellRenderer2.prototype.appendHtml = function(node, innerHtml, property) {
      if (property === void 0) {
        property = "innerHTML";
      }
      node["" + property] = innerHtml;
      return node;
    };
    CellRenderer2.prototype.setAttributes = function(node, cell, attributes2) {
      var column = cell.column;
      this.buildAttributeFromCell(node, cell, column.type === "checkbox");
      setStyleAndAttributes(node, attributes2);
      setStyleAndAttributes(node, cell.attributes);
      if (column.customAttributes) {
        setStyleAndAttributes(node, column.customAttributes);
      }
      if (this.parent.rowRenderingMode === "Vertical") {
        setStyleAndAttributes(node, {
          "data-cell": column.headerText
        });
      }
      if (column.textAlign) {
        var alignmentClassMap = {
          right: "e-rightalign",
          left: "e-leftalign",
          center: "e-centeralign",
          justify: "e-justifyalign"
        };
        if (alignmentClassMap[column.textAlign.toLowerCase()]) {
          node.classList.add(alignmentClassMap[column.textAlign.toLowerCase()]);
        }
      }
      if (column.clipMode === "Clip" || !column.clipMode && this.parent.clipMode === "Clip") {
        node.classList.add("e-gridclip");
      } else if (column.clipMode === "EllipsisWithTooltip" || !column.clipMode && this.parent.clipMode === "EllipsisWithTooltip" && !(this.parent.allowTextWrap && (this.parent.textWrapSettings.wrapMode === "Content" || this.parent.textWrapSettings.wrapMode === "Both"))) {
        if (column.type !== "checkbox") {
          node.classList.add("e-ellipsistooltip");
        }
      }
    };
    CellRenderer2.prototype.buildAttributeFromCell = function(node, cell, isCheckBoxType) {
      var attr = {};
      var classes = [];
      if (cell.colSpan) {
        attr.colSpan = cell.colSpan;
      }
      if (cell.rowSpan) {
        attr.rowSpan = cell.rowSpan;
      }
      if (cell.isTemplate) {
        classes.push("e-templatecell");
      }
      if (cell.isSelected) {
        classes.push.apply(classes, ["e-selectionbackground", "e-active"]);
        if (isCheckBoxType) {
          node.querySelector(".e-frame").classList.add("e-check");
        }
      }
      if (cell.isColumnSelected) {
        classes.push.apply(classes, ["e-columnselection"]);
      }
      if (cell.cellType === CellType.Header) {
        attr[ariaColIndex] = cell.colIndex + 1;
      } else if (!isNullOrUndefined(cell.index)) {
        attr[ariaColIndex] = cell.index + 1;
      }
      if (!cell.visible) {
        classes.push("e-hide");
      }
      attr.class = classes;
      setStyleAndAttributes(node, attr);
    };
    CellRenderer2.prototype.getValue = function(field, data, column) {
      return column.valueAccessor(field, data, column);
    };
    return CellRenderer2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/services/aria-service.js
var AriaService = (
  /** @class */
  function() {
    function AriaService2() {
    }
    AriaService2.prototype.setOptions = function(target, options) {
      var props = Object.keys(options);
      for (var i = 0; i < props.length; i++) {
        setStateAndProperties(target, config[props[parseInt(i.toString(), 10)]], options[props[parseInt(i.toString(), 10)]]);
      }
    };
    AriaService2.prototype.setExpand = function(target, expand) {
      setStateAndProperties(target, config.expand, expand);
    };
    AriaService2.prototype.setSort = function(target, direction) {
      setStateAndProperties(target, config.sort, direction, typeof direction === "boolean");
    };
    AriaService2.prototype.setBusy = function(target, isBusy) {
      setStateAndProperties(target, config.busy, isBusy);
      setStateAndProperties(target, config.invalid, null, true);
    };
    AriaService2.prototype.setGrabbed = function(target, isGrabbed, remove2) {
      setStateAndProperties(target, config.grabbed, isGrabbed, remove2);
    };
    AriaService2.prototype.setDropTarget = function(target, isTarget) {
      setStateAndProperties(target, config.dropeffect, "copy", !isTarget);
    };
    return AriaService2;
  }()
);
function setStateAndProperties(target, attribute, value, remove2) {
  if (remove2 && target) {
    target.removeAttribute(attribute);
    return;
  }
  if (target) {
    target.setAttribute(attribute, value);
  }
}
var config = {
  expand: "aria-expanded",
  role: "role",
  datarole: "data-role",
  selected: "aria-selected",
  multiselectable: "aria-multiselectable",
  sort: "aria-sort",
  busy: "aria-busy",
  invalid: "aria-invalid",
  grabbed: "aria-grabbed",
  dropeffect: "aria-dropeffect",
  haspopup: "aria-haspopup",
  level: "aria-level",
  colcount: "aria-colcount",
  rowcount: "aria-rowcount"
};

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/header-cell-renderer.js
var __extends3 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var HeaderCellRenderer = (
  /** @class */
  function(_super) {
    __extends3(HeaderCellRenderer2, _super);
    function HeaderCellRenderer2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.element = _this.parent.createElement("TH", {
        className: "e-headercell",
        attrs: {
          tabindex: "-1",
          role: "columnheader"
        }
      });
      _this.ariaService = new AriaService();
      _this.hTxtEle = _this.parent.createElement("span", {
        className: "e-headertext"
      });
      _this.sortEle = _this.parent.createElement("div", {
        className: "e-sortfilterdiv e-icons",
        attrs: {
          "aria-hidden": "true"
        }
      });
      _this.gui = _this.parent.createElement("div");
      _this.chkAllBox = _this.parent.createElement("input", {
        className: "e-checkselectall",
        attrs: {
          "type": "checkbox",
          "aria-label": _this.localizer.getConstant("SelectAllCheckbox")
        }
      });
      return _this;
    }
    HeaderCellRenderer2.prototype.getGui = function() {
      return this.gui.cloneNode();
    };
    HeaderCellRenderer2.prototype.render = function(cell, data, attributes2) {
      var node = this.element.cloneNode();
      var fltrMenuEle = this.parent.createElement("div", {
        className: "e-filtermenudiv e-icons e-icon-filter",
        attrs: {
          "aria-hidden": "true"
        }
      });
      return this.prepareHeader(cell, node, fltrMenuEle);
    };
    HeaderCellRenderer2.prototype.refresh = function(cell, node) {
      this.clean(node);
      var fltrMenuEle = this.parent.createElement("div", {
        className: "e-filtermenudiv e-icons e-icon-filter",
        attrs: {
          "aria-hidden": "true"
        }
      });
      return this.prepareHeader(cell, node, fltrMenuEle);
    };
    HeaderCellRenderer2.prototype.clean = function(node) {
      node.innerHTML = "";
    };
    HeaderCellRenderer2.prototype.prepareHeader = function(cell, node, fltrMenuEle) {
      var column = cell.column;
      var ariaAttr = {};
      var elementDesc = "";
      var innerDIV = this.getGui();
      var hValueAccer;
      attributes(innerDIV, {
        "e-mappinguid": column.uid,
        "class": "e-headercelldiv"
      });
      if (!isNullOrUndefined(column.headerValueAccessor)) {
        hValueAccer = this.getValue(column.headerText, column);
      }
      if (this.parent.rowHeight && this.parent.allowSorting && column.allowSorting && !isNullOrUndefined(column.field)) {
        node.classList.add("e-sort-icon");
      }
      if (column.type !== "checkbox") {
        var value = column.headerText;
        if (!isNullOrUndefined(hValueAccer)) {
          value = hValueAccer;
        }
        var headerText = this.hTxtEle.cloneNode();
        headerText[column.getDomSetter()] = this.parent.sanitize(value);
        innerDIV.appendChild(headerText);
      } else {
        column.editType = "booleanedit";
        var checkAllWrap = createCheckBox(this.parent.createElement, false, {
          checked: false,
          label: " "
        });
        this.chkAllBox.id = "checkbox-" + column.uid;
        checkAllWrap.insertBefore(this.chkAllBox.cloneNode(), checkAllWrap.firstChild);
        if (this.parent.cssClass) {
          addClass([checkAllWrap], [this.parent.cssClass]);
        }
        innerDIV.appendChild(checkAllWrap);
        innerDIV.classList.add("e-headerchkcelldiv");
      }
      this.buildAttributeFromCell(node, cell);
      this.appendHtml(node, innerDIV);
      node.appendChild(this.sortEle.cloneNode());
      if (this.parent.allowFiltering && this.parent.filterSettings.type !== "FilterBar" && column.allowFiltering && !isNullOrUndefined(column.field) && !(this.parent.showColumnMenu && column.showColumnMenu)) {
        attributes(fltrMenuEle, {
          "e-mappinguid": "e-flmenu-" + column.uid
        });
        elementDesc = elementDesc.length ? elementDesc + ". " + this.localizer.getConstant("FilterDescription") : this.localizer.getConstant("FilterDescription");
        node.classList.add("e-fltr-icon");
        var matchFlColumns = [];
        if (this.parent.filterSettings.columns.length && this.parent.filterSettings.columns.length !== matchFlColumns.length) {
          var foreignColumn = this.parent.getForeignKeyColumns();
          for (var index = 0; index < this.parent.columns.length; index++) {
            for (var count2 = 0; count2 < this.parent.filterSettings.columns.length; count2++) {
              if (this.parent.filterSettings.columns[parseInt(count2.toString(), 10)].field === column.field || foreignColumn.length && column.foreignKeyValue === this.parent.filterSettings.columns[parseInt(count2.toString(), 10)].field) {
                fltrMenuEle.classList.add("e-filtered");
                matchFlColumns.push(column.field);
                break;
              }
            }
          }
        }
        node.appendChild(fltrMenuEle.cloneNode());
      }
      if (cell.className) {
        node.classList.add(cell.className);
      }
      if (column.customAttributes) {
        setStyleAndAttributes(node, column.customAttributes);
      }
      if (this.parent.allowSorting && column.allowSorting) {
        ariaAttr.sort = "none";
        elementDesc = elementDesc.length ? elementDesc + ". " + this.localizer.getConstant("SortDescription") : this.localizer.getConstant("SortDescription");
      }
      if (this.parent.allowGrouping && column.allowGrouping || this.parent.allowReordering && column.allowReordering) {
        ariaAttr.grabbed = false;
        elementDesc = elementDesc.length ? elementDesc + ". " + this.localizer.getConstant("GroupDescription") : this.localizer.getConstant("GroupDescription");
      }
      if (this.parent.showColumnMenu && column.type !== "checkbox" && !column.template) {
        elementDesc = elementDesc.length ? elementDesc + ". " + this.localizer.getConstant("ColumnMenuDescription") : this.localizer.getConstant("ColumnMenuDescription");
      }
      node = this.extendPrepareHeader(column, node);
      var result;
      var gridObj = this.parent;
      var colIndex = gridObj.getColumnIndexByField(column.field);
      if (!isNullOrUndefined(column.headerTemplate)) {
        var headerTempID = gridObj.element.id + column.uid + "headerTemplate";
        var str = "isStringTemplate";
        var col = column;
        var isReactCompiler = this.parent.isReact && typeof column.headerTemplate !== "string" && !(column.headerTemplate.prototype && column.headerTemplate.prototype.CSPTemplate);
        var isReactChild_1 = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
        var isReactPrintGrid = this.parent.printGridParent && this.parent.printGridParent.isReact;
        if (isReactCompiler || isReactChild_1 || isReactPrintGrid) {
          var copied = {
            "index": colIndex
          };
          node.firstElementChild.innerHTML = "";
          column.getHeaderTemplate()(extend(copied, col), gridObj, "headerTemplate", headerTempID, this.parent["" + str], null, node.firstElementChild);
          this.parent.renderTemplates();
        } else {
          result = column.getHeaderTemplate()(extend({
            "index": colIndex
          }, col), gridObj, "headerTemplate", headerTempID, this.parent["" + str], void 0, void 0, this.parent["root"]);
          node.firstElementChild.innerHTML = "";
          appendChildren(node.firstElementChild, result);
        }
      }
      this.ariaService.setOptions(node, ariaAttr);
      if (!isNullOrUndefined(column.headerTextAlign) || !isNullOrUndefined(column.textAlign)) {
        var alignment = column.headerTextAlign || column.textAlign;
        if (alignment.toLowerCase() === "right" || alignment.toLowerCase() === "left") {
          node.classList.add(alignment.toLowerCase() === "right" ? "e-rightalign" : "e-leftalign");
        } else if (alignment.toLowerCase() === "center") {
          node.classList.add("e-centeralign");
        } else if (alignment.toLowerCase() === "justify") {
          node.classList.add("e-justifyalign");
        }
      }
      if (column.clipMode === "Clip" || !column.clipMode && this.parent.clipMode === "Clip") {
        node.classList.add("e-gridclip");
      } else if ((column.clipMode === "EllipsisWithTooltip" || !column.clipMode && this.parent.clipMode === "EllipsisWithTooltip") && !(gridObj.allowTextWrap && (gridObj.textWrapSettings.wrapMode === "Header" || gridObj.textWrapSettings.wrapMode === "Both"))) {
        if (column.type !== "checkbox") {
          node.classList.add("e-ellipsistooltip");
        }
      }
      if (elementDesc) {
        var titleElem = this.parent.createElement("span", {
          id: "headerTitle-" + column.uid,
          innerHTML: elementDesc
        });
        titleElem.style.display = "none";
        node.appendChild(titleElem);
        node.setAttribute("aria-describedby", titleElem.id);
      }
      node.setAttribute("aria-rowspan", (!isNullOrUndefined(cell.rowSpan) ? cell.rowSpan : 1).toString());
      node.setAttribute("aria-colspan", "1");
      var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
      if ((this.parent.isReact && this.parent.requireTemplateRef || isReactChild && this.parent.parentDetails.parentInstObj.requireTemplateRef) && !isNullOrUndefined(column.headerTemplate)) {
        var thisRef_1 = this;
        thisRef_1.parent.renderTemplates(function() {
          thisRef_1.parent.trigger(headerCellInfo, {
            cell,
            node
          });
        });
      } else {
        this.parent.trigger(headerCellInfo, {
          cell,
          node
        });
      }
      if (this.parent.isFrozenGrid()) {
        addStickyColumnPosition(this.parent, column, node);
      }
      return node;
    };
    HeaderCellRenderer2.prototype.getValue = function(field, column) {
      return column.headerValueAccessor(field, column);
    };
    HeaderCellRenderer2.prototype.extendPrepareHeader = function(column, node) {
      if (this.parent.showColumnMenu && column.showColumnMenu && !isNullOrUndefined(column.field)) {
        var element = this.parent.createElement("div", {
          className: "e-icons e-columnmenu",
          attrs: {
            "aria-hidden": "true"
          }
        });
        var matchFilteredColumns = [];
        if (this.parent.filterSettings.columns.length && this.parent.filterSettings.columns.length !== matchFilteredColumns.length) {
          for (var i = 0; i < this.parent.columns.length; i++) {
            for (var j = 0; j < this.parent.filterSettings.columns.length; j++) {
              if (this.parent.filterSettings.columns[parseInt(j.toString(), 10)].field === column.field) {
                element.classList.add("e-filtered");
                matchFilteredColumns.push(column.field);
                break;
              }
            }
          }
        }
        node.classList.add("e-fltr-icon");
        node.appendChild(element);
      }
      if (this.parent.allowResizing) {
        var handler = this.parent.createElement("div");
        handler.className = column.allowResizing ? "e-rhandler e-rcursor" : "e-rsuppress";
        node.appendChild(handler);
      }
      return node;
    };
    HeaderCellRenderer2.prototype.appendHtml = function(node, innerHtml) {
      node.appendChild(innerHtml);
      return node;
    };
    return HeaderCellRenderer2;
  }(CellRenderer)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/stacked-cell-renderer.js
var __extends4 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var StackedHeaderCellRenderer = (
  /** @class */
  function(_super) {
    __extends4(StackedHeaderCellRenderer2, _super);
    function StackedHeaderCellRenderer2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.element = _this.parent.createElement("TH", {
        className: "e-headercell e-stackedheadercell",
        attrs: {
          tabindex: "-1",
          role: "columnheader"
        }
      });
      return _this;
    }
    StackedHeaderCellRenderer2.prototype.render = function(cell, data, attributes2) {
      var node = this.element.cloneNode();
      var div = this.parent.createElement("div", {
        className: "e-stackedheadercelldiv",
        attrs: {
          "e-mappinguid": cell.column.uid
        }
      });
      var column = cell.column;
      node.appendChild(div);
      if (!isNullOrUndefined(column.headerTemplate)) {
        appendChildren(div, column.getHeaderTemplate()(column, this.parent, "headerTemplate", null, null, null, null, this.parent.root));
      } else {
        this.appendHtml(div, this.parent.sanitize(column.headerText), column.getDomSetter());
      }
      if (cell.column.toolTip) {
        node.setAttribute("title", cell.column.toolTip);
      }
      if (column.clipMode === "Clip" || !column.clipMode && this.parent.clipMode === "Clip") {
        node.classList.add("e-gridclip");
      } else if (column.clipMode === "EllipsisWithTooltip" || !column.clipMode && this.parent.clipMode === "EllipsisWithTooltip") {
        node.classList.add("e-ellipsistooltip");
      }
      if (!isNullOrUndefined(cell.column.textAlign)) {
        var alignmentClassMap = {
          right: "e-rightalign",
          left: "e-leftalign",
          center: "e-centeralign",
          justify: "e-justifyalign"
        };
        if (alignmentClassMap[cell.column.textAlign.toLowerCase()]) {
          node.classList.add(alignmentClassMap[cell.column.textAlign.toLowerCase()]);
        }
      }
      if (cell.column.customAttributes) {
        setStyleAndAttributes(node, cell.column.customAttributes);
      }
      node.setAttribute("colspan", cell.colSpan.toString());
      node.setAttribute("aria-colspan", cell.colSpan.toString());
      node.setAttribute("aria-rowspan", "1");
      if (this.parent.allowResizing) {
        var handler = this.parent.createElement("div");
        handler.className = cell.column.allowResizing ? "e-rhandler e-rcursor" : "e-rsuppress";
        node.appendChild(handler);
      }
      if (cell.className) {
        node.classList.add(cell.className);
      }
      this.parent.trigger(headerCellInfo, {
        cell,
        node
      });
      if (frozenDirection(column) === "Left") {
        node.classList.add("e-leftfreeze");
        if (column.border === "Left") {
          node.classList.add("e-freezeleftborder");
        }
        if (column.index === 0) {
          applyStickyLeftRightPosition(node, this.parent.getIndentCount() * 30, this.parent.enableRtl, "Left");
        } else {
          var cols = this.parent.getColumns();
          var width = this.parent.getIndentCount() * 30;
          for (var i = 0; i < cols.length; i++) {
            if (column.index < cols[parseInt(i.toString(), 10)].index) {
              break;
            }
            if (cols[parseInt(i.toString(), 10)].visible) {
              width += parseFloat(cols[parseInt(i.toString(), 10)].width.toString());
            }
          }
          applyStickyLeftRightPosition(node, width, this.parent.enableRtl, "Left");
        }
      } else if (frozenDirection(column) === "Right") {
        node.classList.add("e-rightfreeze");
        var cols = this.parent.getColumns();
        var width = this.parent.getFrozenMode() === "Right" && this.parent.isRowDragable() ? 30 : 0;
        for (var i = cols.length - 1; i >= 0; i--) {
          if (isChildColumn(column, cols[parseInt(i.toString(), 10)].uid) || column.index > cols[parseInt(i.toString(), 10)].index) {
            break;
          }
          if (cols[parseInt(i.toString(), 10)].visible) {
            width += parseFloat(cols[parseInt(i.toString(), 10)].width.toString());
          }
        }
        applyStickyLeftRightPosition(node, width, this.parent.enableRtl, "Right");
        if (column.border === "Right") {
          node.classList.add("e-freezerightborder");
        }
      } else if (frozenDirection(column) === "Fixed") {
        node.classList.add("e-fixedfreeze");
        var cols = this.parent.getColumns();
        var width = 0;
        if (this.parent.getVisibleFrozenLeftCount()) {
          width = this.parent.getIndentCount() * 30;
        } else if (this.parent.getFrozenMode() === "Right") {
          width = this.parent.groupSettings.columns.length * 30;
        }
        for (var i = 0; i < cols.length; i++) {
          if (column.index > cols[parseInt(i.toString(), 10)].index) {
            if (cols[parseInt(i.toString(), 10)].freeze === "Left" || cols[parseInt(i.toString(), 10)].isFrozen || cols[parseInt(i.toString(), 10)].freeze === "Fixed") {
              if (cols[parseInt(i.toString(), 10)].visible) {
                width += parseFloat(cols[parseInt(i.toString(), 10)].width.toString());
              }
            }
          }
        }
        applyStickyLeftRightPosition(node, width - 1, this.parent.enableRtl, "Left");
        width = this.parent.getFrozenMode() === "Right" && this.parent.isRowDragable() ? 30 : 0;
        for (var i = cols.length - 1; i >= 0; i--) {
          if (column.index < cols[parseInt(i.toString(), 10)].index) {
            if (isChildColumn(column, cols[parseInt(i.toString(), 10)].uid) || column.index > cols[parseInt(i.toString(), 10)].index) {
              break;
            }
            if (cols[parseInt(i.toString(), 10)].freeze === "Right" || cols[parseInt(i.toString(), 10)].freeze === "Fixed") {
              if (cols[parseInt(i.toString(), 10)].visible) {
                width += parseFloat(cols[parseInt(i.toString(), 10)].width.toString());
              }
            }
          }
        }
        applyStickyLeftRightPosition(node, width - 1, this.parent.enableRtl, "Right");
      } else {
        node.classList.add("e-unfreeze");
      }
      return node;
    };
    return StackedHeaderCellRenderer2;
  }(CellRenderer)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/indent-cell-renderer.js
var __extends5 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var IndentCellRenderer = (
  /** @class */
  function(_super) {
    __extends5(IndentCellRenderer2, _super);
    function IndentCellRenderer2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.element = _this.parent.createElement("TD", {
        className: "e-indentcell"
      });
      return _this;
    }
    IndentCellRenderer2.prototype.render = function(cell, data) {
      var node = this.element.cloneNode();
      setStyleAndAttributes(node, cell.attributes);
      return node;
    };
    return IndentCellRenderer2;
  }(CellRenderer)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/caption-cell-renderer.js
var __extends6 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var GroupCaptionCellRenderer = (
  /** @class */
  function(_super) {
    __extends6(GroupCaptionCellRenderer2, _super);
    function GroupCaptionCellRenderer2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.cellUid = 0;
      _this.element = _this.parent.createElement("TD", {
        className: "e-groupcaption",
        attrs: {
          id: _this.parent.element.id + "captioncell",
          tabindex: "-1"
        }
      });
      return _this;
    }
    GroupCaptionCellRenderer2.prototype.render = function(cell, data) {
      this.element.id = this.parent.element.id + "captioncell" + this.cellUid++;
      var node = this.element.cloneNode();
      var gObj = this.parent;
      var column = cell.column;
      var domSetter = column.getDomSetter ? column.getDomSetter() : "innerHTML";
      var result;
      var fKeyValue;
      var gTemplateValue;
      data.headerText = cell.column.headerText;
      if (cell.isForeignKey) {
        fKeyValue = this.format(cell.column, cell.column.valueAccessor("foreignKey", data, cell.column));
      }
      var value = cell.isForeignKey ? fKeyValue : cell.column.enableGroupByFormat ? data.key : this.format(cell.column, cell.column.valueAccessor("key", data, cell.column));
      for (var j = 0; j < gObj.aggregates.length; j++) {
        var _loop_1 = function(i2) {
          if (gObj.getVisibleColumns()[0].field === gObj.aggregates[parseInt(j.toString(), 10)].columns[parseInt(i2.toString(), 10)].field && gObj.aggregates[parseInt(j.toString(), 10)].columns[parseInt(i2.toString(), 10)].groupCaptionTemplate) {
            var gCaptionTemp = gObj.aggregates[parseInt(j.toString(), 10)].columns[parseInt(i2.toString(), 10)].groupCaptionTemplate;
            if (typeof gCaptionTemp === "string" && gCaptionTemp.includes("$")) {
              gTemplateValue = gObj.aggregates[parseInt(j.toString(), 10)].columns[parseInt(i2.toString(), 10)].groupCaptionTemplate.split("$")[0] + data[gObj.getVisibleColumns()[0].field][gObj.aggregates[parseInt(j.toString(), 10)].columns[parseInt(i2.toString(), 10)].type] + gObj.aggregates[parseInt(j.toString(), 10)].columns[parseInt(i2.toString(), 10)].groupCaptionTemplate.split("}")[1];
            } else {
              var column_1 = gObj.aggregates[parseInt(j.toString(), 10)].columns[parseInt(i2.toString(), 10)];
              var tempObj = column_1.getTemplate(CellType.CaptionSummary);
              var tempID2 = "";
              if (!isNullOrUndefined(tempObj)) {
                var tempValue_1 = tempObj.fn(data[column_1.columnName], this_1.parent, tempObj.property, tempID2);
                var isReactPrintGrid2 = this_1.parent.printGridParent && this_1.parent.printGridParent.isReact;
                if ((this_1.parent.isReact || isReactPrintGrid2) && typeof column_1.groupCaptionTemplate !== "string") {
                  this_1.parent.renderTemplates(function() {
                    if (tempValue_1 && tempValue_1.length) {
                      if (!isNullOrUndefined(gObj.groupSettings.captionTemplate)) {
                        node.appendChild(tempValue_1[0]);
                      } else {
                        node.innerText += " " + tempValue_1[0].textContent;
                      }
                    }
                  });
                } else {
                  if (tempValue_1 && tempValue_1.length) {
                    if (!isNullOrUndefined(gObj.groupSettings.captionTemplate)) {
                      gTemplateValue = tempValue_1;
                    } else {
                      gTemplateValue = tempValue_1[0].textContent;
                    }
                  }
                }
              }
            }
            return "break";
          }
        };
        var this_1 = this;
        for (var i = 0; i < gObj.aggregates[parseInt(j.toString(), 10)].columns.length; i++) {
          var state_1 = _loop_1(i);
          if (state_1 === "break") break;
        }
      }
      if (!isNullOrUndefined(gObj.groupSettings.captionTemplate)) {
        var isReactCompiler = this.parent.isReact && typeof gObj.groupSettings.captionTemplate !== "string" && !(gObj.groupSettings.captionTemplate.prototype && gObj.groupSettings.captionTemplate.prototype.CSPTemplate);
        var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
        var isReactPrintGrid = this.parent.printGridParent && this.parent.printGridParent.isReact;
        if (isReactCompiler || isReactChild || isReactPrintGrid) {
          var tempID = gObj.element.id + "captionTemplate";
          var groupKey = "groupKey";
          var key = "key";
          data["" + groupKey] = data["" + key];
          templateCompiler(gObj.groupSettings.captionTemplate)(data, this.parent, "captionTemplate", tempID, null, null, node);
          this.parent.renderTemplates();
        } else if (this.parent.isVue || gObj.parentDetails && gObj.parentDetails.parentInstObj && gObj.parentDetails.parentInstObj.isVue) {
          result = templateCompiler(gObj.groupSettings.captionTemplate)(data, this.parent, "captionTemplate", null, null, null, null, gObj.root);
        } else {
          result = templateCompiler(gObj.groupSettings.captionTemplate)(data);
        }
        if (!isReactCompiler && !isReactChild && !isReactPrintGrid) {
          appendChildren(node, result);
          if (gTemplateValue && gTemplateValue.length && gTemplateValue[0].textContent) {
            node.appendChild(gTemplateValue[0]);
          }
        }
      } else {
        if (gObj.groupSettings.enableLazyLoading) {
          node["" + domSetter] = this.parent.sanitize(cell.column.headerText) + ": " + this.parent.sanitize(value) + (gTemplateValue ? "   " + gTemplateValue : "");
        } else {
          node["" + domSetter] = this.parent.sanitize(cell.column.headerText) + ": " + this.parent.sanitize(value) + " - " + data.count + " " + (data.count < 2 ? this.localizer.getConstant("Item") : this.localizer.getConstant("Items")) + (gTemplateValue ? "   " + gTemplateValue : "");
        }
      }
      node.setAttribute("colspan", cell.colSpan.toString());
      node.setAttribute("aria-label", node.innerHTML + this.localizer.getConstant("GroupCaption"));
      node.setAttribute("title", node.textContent);
      return node;
    };
    return GroupCaptionCellRenderer2;
  }(CellRenderer)
);
var GroupCaptionEmptyCellRenderer = (
  /** @class */
  function(_super) {
    __extends6(GroupCaptionEmptyCellRenderer2, _super);
    function GroupCaptionEmptyCellRenderer2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.element = _this.parent.createElement("TD", {
        className: "e-groupcaption"
      });
      return _this;
    }
    GroupCaptionEmptyCellRenderer2.prototype.render = function(cell, data) {
      var node = this.element.cloneNode();
      node.innerHTML = "&nbsp;";
      node.setAttribute("colspan", cell.colSpan.toString());
      return node;
    };
    return GroupCaptionEmptyCellRenderer2;
  }(CellRenderer)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/expand-cell-renderer.js
var __extends7 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ExpandCellRenderer = (
  /** @class */
  function(_super) {
    __extends7(ExpandCellRenderer2, _super);
    function ExpandCellRenderer2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ExpandCellRenderer2.prototype.render = function(cell, data, attr, isExpand) {
      var node = this.element.cloneNode();
      node.setAttribute("ej-mappingname", data.field);
      node.setAttribute("ej-mappingvalue", data.key);
      node.setAttribute("aria-expanded", isExpand ? "true" : "false");
      node.setAttribute("tabindex", "-1");
      if (this.parent.infiniteScrollSettings && this.parent.infiniteScrollSettings.enableCache && !this.parent.groupSettings.enableLazyLoading) {
        cell.cellType = CellType.Indent;
        node.className = isExpand ? "e-recordplusexpand e-disablepointer" : "e-recordpluscollapse e-disablepointer";
      } else {
        node.className = isExpand ? "e-recordplusexpand" : "e-recordpluscollapse";
        node.appendChild(this.parent.createElement("a", {
          className: isExpand ? "e-icons e-gdiagonaldown e-icon-gdownarrow" : "e-icons e-gnextforward e-icon-grightarrow",
          attrs: {
            href: "#",
            "title": isExpand ? this.localizer.getConstant("Expanded") : this.localizer.getConstant("Collapsed")
          }
        }));
      }
      return node;
    };
    return ExpandCellRenderer2;
  }(IndentCellRenderer)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/header-indent-renderer.js
var __extends8 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var HeaderIndentCellRenderer = (
  /** @class */
  function(_super) {
    __extends8(HeaderIndentCellRenderer2, _super);
    function HeaderIndentCellRenderer2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.element = _this.parent.createElement("TH", {
        className: "e-grouptopleftcell"
      });
      return _this;
    }
    HeaderIndentCellRenderer2.prototype.render = function(cell, data) {
      var node = this.element.cloneNode();
      node.appendChild(this.parent.createElement("div", {
        className: "e-headercelldiv e-emptycell",
        innerHTML: ""
      }));
      return node;
    };
    return HeaderIndentCellRenderer2;
  }(CellRenderer)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/detail-header-indent-renderer.js
var __extends9 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var DetailHeaderIndentCellRenderer = (
  /** @class */
  function(_super) {
    __extends9(DetailHeaderIndentCellRenderer2, _super);
    function DetailHeaderIndentCellRenderer2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.element = _this.parent.createElement("TH", {
        className: "e-detailheadercell"
      });
      return _this;
    }
    DetailHeaderIndentCellRenderer2.prototype.render = function(cell, data) {
      var node = this.element.cloneNode();
      node.appendChild(this.parent.createElement("div", {
        className: "e-emptycell"
      }));
      return node;
    };
    return DetailHeaderIndentCellRenderer2;
  }(CellRenderer)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/detail-expand-cell-renderer.js
var __extends10 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var DetailExpandCellRenderer = (
  /** @class */
  function(_super) {
    __extends10(DetailExpandCellRenderer2, _super);
    function DetailExpandCellRenderer2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.element = _this.parent.createElement("TD", {
        className: "e-detailrowcollapse",
        attrs: {
          "aria-expanded": "false",
          tabindex: "-1"
        }
      });
      return _this;
    }
    DetailExpandCellRenderer2.prototype.render = function(cell, data, attributes2) {
      var node = this.element.cloneNode();
      if (attributes2 && !isNullOrUndefined(attributes2["class"])) {
        node.className = "";
        node.className = attributes2["class"];
        node.appendChild(this.parent.createElement("a", {
          className: "e-icons e-dtdiagonaldown e-icon-gdownarrow",
          attrs: {
            href: "#",
            "title": this.localizer.getConstant("Expanded")
          }
        }));
      } else {
        node.appendChild(this.parent.createElement("a", {
          className: "e-icons e-dtdiagonalright e-icon-grightarrow",
          attrs: {
            href: "#",
            "title": this.localizer.getConstant("Collapsed")
          }
        }));
      }
      if (cell.isSelected) {
        node.classList.add("e-selectionbackground", "e-active");
      }
      return node;
    };
    return DetailExpandCellRenderer2;
  }(CellRenderer)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/row-drag-drop-renderer.js
var __extends11 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var RowDragDropRenderer = (
  /** @class */
  function(_super) {
    __extends11(RowDragDropRenderer2, _super);
    function RowDragDropRenderer2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.element = _this.parent.createElement("TD", {
        className: "e-rowdragdrop e-rowdragdropcell",
        attrs: {
          tabindex: "-1",
          role: "gridcell"
        }
      });
      return _this;
    }
    RowDragDropRenderer2.prototype.render = function(cell, data) {
      var nodeElement = this.element.cloneNode();
      nodeElement.appendChild(this.parent.createElement("div", {
        className: "e-icons e-rowcelldrag e-dtdiagonalright e-icon-rowdragicon",
        attrs: {
          "aria-hidden": "true"
        }
      }));
      if (cell.isSelected) {
        nodeElement.classList.add("e-selectionbackground");
        nodeElement.classList.add("e-active");
      }
      if (this.parent.getVisibleFrozenRightCount() || this.parent.getVisibleFrozenLeftCount()) {
        nodeElement.classList.add("e-leftfreeze");
        var width = this.parent.getFrozenMode() === "Right" ? 0 : this.parent.groupSettings.columns.length * 30;
        applyStickyLeftRightPosition(nodeElement, width, this.parent.enableRtl, this.parent.getFrozenMode() === "Right" ? "Right" : "Left");
      }
      return nodeElement;
    };
    return RowDragDropRenderer2;
  }(CellRenderer)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/row-drag-header-indent-render.js
var __extends12 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var RowDragDropHeaderRenderer = (
  /** @class */
  function(_super) {
    __extends12(RowDragDropHeaderRenderer2, _super);
    function RowDragDropHeaderRenderer2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.element = _this.parent.createElement("TH", {
        className: "e-rowdragheader"
      });
      return _this;
    }
    RowDragDropHeaderRenderer2.prototype.render = function(cell, data) {
      var node = this.element.cloneNode();
      node.appendChild(createElement("div", {
        className: "e-emptycell"
      }));
      if (this.parent.getVisibleFrozenRightCount() || this.parent.getVisibleFrozenLeftCount()) {
        node.classList.add("e-leftfreeze");
        var width = this.parent.getFrozenMode() === "Right" ? 0 : this.parent.groupSettings.columns.length * 30;
        applyStickyLeftRightPosition(node, width, this.parent.enableRtl, this.parent.getFrozenMode() === "Right" ? "Right" : "Left");
      }
      return node;
    };
    return RowDragDropHeaderRenderer2;
  }(CellRenderer)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/render.js
var Render = (
  /** @class */
  function() {
    function Render2(parent, locator) {
      this.emptyGrid = false;
      this.counter = 0;
      this.parent = parent;
      this.locator = locator;
      this.data = new Data(parent, locator);
      this.l10n = locator.getService("localization");
      this.ariaService = this.locator.getService("ariaService");
      this.renderer = this.locator.getService("rendererFactory");
      this.addEventListener();
    }
    Render2.prototype.render = function() {
      var gObj = this.parent;
      this.headerRenderer = this.renderer.getRenderer(RenderType.Header);
      this.contentRenderer = this.renderer.getRenderer(RenderType.Content);
      this.headerRenderer.renderPanel();
      this.contentRenderer.renderPanel();
      if (gObj.getColumns().length) {
        this.isLayoutRendered = true;
        this.headerRenderer.renderTable();
        this.contentRenderer.renderTable();
        this.emptyRow(false);
      }
      this.parent.scrollModule.setWidth();
      this.parent.scrollModule.setHeight();
      if (this.parent.height !== "auto") {
        this.parent.scrollModule.setPadding();
      }
      this.refreshDataManager();
    };
    Render2.prototype.refresh = function(e) {
      var _this = this;
      if (e === void 0) {
        e = {
          requestType: "refresh"
        };
      }
      var gObj = this.parent;
      gObj.notify(e.requestType + "-begin", e);
      gObj.trigger(actionBegin, e, function(args) {
        if (args === void 0) {
          args = {
            requestType: "refresh"
          };
        }
        if (args.cancel) {
          gObj.notify(cancelBegin, args);
          if (args.action === "clearFilter" && _this.parent.filterSettings.type === "Menu") {
            _this.parent.filterSettings.columns[_this.parent.filterModule.filterObjIndex] = _this.parent.filterModule.prevFilterObject;
            var iconClass = _this.parent.showColumnMenu && _this.parent.filterModule["column"].showColumnMenu ? ".e-columnmenu" : ".e-icon-filter";
            var col = _this.parent.element.querySelector('[e-mappinguid="' + _this.parent.filterModule["column"].uid + '"]').parentElement;
            var flIcon = col.querySelector(iconClass);
            if (!isNullOrUndefined(_this.parent.filterModule.prevFilterObject)) {
              flIcon.classList.add("e-filtered");
            }
          }
          if (args.action === "clear-filter" && (_this.parent.filterSettings.type === "CheckBox" || _this.parent.filterSettings.type === "Excel")) {
            _this.parent.filterSettings.columns = _this.parent.filterModule.checkboxPrevFilterObject;
          }
          if (args.requestType === "grouping") {
            var index = gObj.groupSettings.columns.indexOf(args.columnName);
            if (index !== -1) {
              gObj.setProperties({
                groupSettings: {
                  Columns: gObj.groupSettings.columns.splice(index, 1)
                }
              }, true);
              gObj.setProperties({
                sortSettings: {
                  Columns: gObj.sortSettings.columns.splice(index, 1)
                }
              }, true);
              var column = gObj.getColumnByField(args.columnName);
              var headerCell = gObj.getColumnHeaderByField(column.field);
              column.visible = !isNullOrUndefined(headerCell) && !headerCell.classList.contains("e-hide");
            }
          }
          return;
        }
        _this.parent.notify(destroyEditForm, args);
        if (args.requestType === "virtualscroll" && (_this.parent.getDataModule().isRemote() || "result" in _this.parent.dataSource) && args.virtualInfo && args.virtualInfo.direction === "down") {
          _this.parent.contentModule.prevInfo = args.virtualInfo;
        }
        if (_this.parent.groupModule && args.preventFocusOnGroup) {
          _this.parent.groupModule.preventFocusOnGroup = args.preventFocusOnGroup;
        }
        if (gObj.allowSelection && (args.action === "clearFilter" || args.action === "clear-filter" || args.requestType === "searching" && args.searchString === "" || args.action === "add")) {
          gObj.selectionModule["rmtHdrChkbxClicked"] = false;
          if (gObj.selectionModule.isPartialSelection) {
            gObj.selectionModule["isHdrSelectAllClicked"] = false;
          }
        }
        if (gObj.allowPaging && gObj.pageSettings.pageSizes && gObj.pagerModule.pagerObj.isAllPage && args.action === "add" && args.requestType === "save" && gObj.pagerModule.pagerObj.checkAll) {
          gObj.setProperties({
            pageSettings: {
              pageSize: gObj.pageSettings.pageSize + 1
            }
          }, true);
        }
        if (args.requestType === "delete" && gObj.allowPaging) {
          var dataLength = args.data.length;
          var count2 = gObj.pageSettings.totalRecordsCount - dataLength;
          var currentViewData = gObj.getCurrentViewRecords().length;
          if (!(currentViewData - dataLength) && count2 && (gObj.pageSettings.currentPage - 1) * gObj.pageSettings.pageSize === count2 || count2 && count2 <= dataLength) {
            gObj.prevPageMoving = true;
            gObj.setProperties({
              pageSettings: {
                totalRecordsCount: count2,
                currentPage: Math.ceil(count2 / gObj.pageSettings.pageSize)
              }
            }, true);
            gObj.pagerModule.pagerObj.totalRecordsCount = count2;
          }
        }
        if (args.requestType === "reorder" && _this.parent.dataSource && "result" in _this.parent.dataSource) {
          _this.contentRenderer.refreshContentRows(args);
        } else if ((args.requestType === "paging" || args.requestType === "columnstate" || args.requestType === "reorder") && _this.parent.groupSettings.enableLazyLoading && _this.parent.groupSettings.columns.length && (_this.parent.enableVirtualization ? _this.parent.lazyLoadRender : _this.parent.contentModule).getGroupCache()[_this.parent.pageSettings.currentPage]) {
          _this.contentRenderer.refreshContentRows(args);
        } else {
          _this.refreshDataManager(args);
        }
      });
    };
    Render2.prototype.resetTemplates = function() {
      var gObj = this.parent;
      var gridColumns = gObj.getColumns();
      if (gObj.detailTemplate) {
        var detailTemplateID = gObj.element.id + "detailTemplate";
        blazorTemplates["" + detailTemplateID] = [];
        resetBlazorTemplate(detailTemplateID, "DetailTemplate");
      }
      if (gObj.groupSettings.captionTemplate) {
        resetBlazorTemplate(gObj.element.id + "captionTemplate", "CaptionTemplate");
      }
      if (gObj.rowTemplate) {
        resetBlazorTemplate(gObj.element.id + "rowTemplate", "RowTemplate");
      }
      if (gObj.toolbarTemplate) {
        resetBlazorTemplate(gObj.element.id + "toolbarTemplate", "ToolbarTemplate");
      }
      if (gObj.pageSettings.template) {
        resetBlazorTemplate(gObj.element.id + "_template", "pageSettings");
      }
      for (var i = 0; i < gridColumns.length; i++) {
        if (gridColumns[parseInt(i.toString(), 10)].template) {
          blazorTemplates[gObj.element.id + gridColumns[parseInt(i.toString(), 10)].uid] = [];
          resetBlazorTemplate(gObj.element.id + gridColumns[parseInt(i.toString(), 10)].uid, "Template");
        }
        if (gridColumns[parseInt(i.toString(), 10)].headerTemplate) {
          resetBlazorTemplate(gObj.element.id + gridColumns[parseInt(i.toString(), 10)].uid + "headerTemplate", "HeaderTemplate");
        }
        if (gridColumns[parseInt(i.toString(), 10)].filterTemplate) {
          resetBlazorTemplate(gObj.element.id + gridColumns[parseInt(i.toString(), 10)].uid + "filterTemplate", "FilterTemplate");
        }
      }
      var guid = "guid";
      for (var k = 0; k < gObj.aggregates.length; k++) {
        for (var j = 0; j < gObj.aggregates[parseInt(k.toString(), 10)].columns.length; j++) {
          if (gObj.aggregates[parseInt(k.toString(), 10)].columns[parseInt(j.toString(), 10)].footerTemplate) {
            var tempID = gObj.element.id + gObj.aggregates[parseInt(k.toString(), 10)].columns[parseInt(j.toString(), 10)]["" + guid] + "footerTemplate";
            resetBlazorTemplate(tempID, "FooterTemplate");
          }
          if (gObj.aggregates[parseInt(k.toString(), 10)].columns[parseInt(j.toString(), 10)].groupFooterTemplate) {
            var tempID = gObj.element.id + gObj.aggregates[parseInt(k.toString(), 10)].columns[parseInt(j.toString(), 10)]["" + guid] + "groupFooterTemplate";
            resetBlazorTemplate(tempID, "GroupFooterTemplate");
          }
          if (gObj.aggregates[parseInt(k.toString(), 10)].columns[parseInt(j.toString(), 10)].groupCaptionTemplate) {
            var tempID = gObj.element.id + gObj.aggregates[parseInt(k.toString(), 10)].columns[parseInt(j.toString(), 10)]["" + guid] + "groupCaptionTemplate";
            resetBlazorTemplate(tempID, "GroupCaptionTemplate");
          }
        }
      }
    };
    Render2.prototype.refreshComplete = function(e) {
      this.parent.trigger(actionComplete, e);
    };
    Render2.prototype.refreshDataManager = function(args) {
      var _this = this;
      if (args === void 0) {
        args = {};
      }
      var gObj = this.parent;
      var maskRow = gObj.loadingIndicator.indicatorType === "Shimmer" && args.requestType !== "virtualscroll" && args.requestType !== "infiniteScroll" || (args.requestType === "virtualscroll" || args.requestType === "infiniteScroll") && gObj.enableVirtualMaskRow;
      if (args.requestType !== "virtualscroll" && !args.isCaptionCollapse && !maskRow) {
        this.parent.showSpinner();
      }
      if (maskRow) {
        gObj.showMaskRow(args.requestType === "virtualscroll" ? args.virtualInfo.sentinelInfo.axis : args.requestType === "infiniteScroll" ? args.direction : void 0);
      }
      this.parent.notify(resetInfiniteBlocks, args);
      this.emptyGrid = false;
      var dataManager;
      var isFActon = this.isNeedForeignAction();
      this.ariaService.setBusy(this.parent.getContent().querySelector("." + content), true);
      if (isFActon) {
        var deffered = new Deferred();
        dataManager = this.getFData(deffered, args);
      }
      if (!dataManager) {
        if (gObj.allowPaging && !gObj.getDataModule().dataManager.dataSource.offline && gObj.pageSettings && gObj.pageSettings.pageSizes && gObj.pagerModule && gObj.pagerModule.pagerObj && gObj.pagerModule.pagerObj.isAllPage) {
          gObj.pagerModule.pagerObj.isAllPage = void 0;
        }
        dataManager = this.data.getData(args, this.data.generateQuery().requiresCount());
      } else {
        dataManager = dataManager.then(function(e) {
          var query = _this.data.generateQuery().requiresCount();
          if (_this.emptyGrid) {
            var def = new Deferred();
            def.resolve({
              result: [],
              count: 0
            });
            return def.promise;
          }
          return _this.data.getData(args, query);
        });
      }
      var foreignKeyColumns = this.parent.getForeignKeyColumns();
      var foreignKeyLength = foreignKeyColumns.length;
      if (this.parent.columnQueryMode === "ExcludeHidden" && foreignKeyLength) {
        foreignKeyLength = foreignKeyColumns.filter(function(col) {
          return col.visible !== false;
        }).length;
      }
      if (foreignKeyLength && (!isFActon || this.parent.searchSettings.key.length)) {
        var deffered_1 = new Deferred();
        dataManager = dataManager.then(function(e) {
          _this.parent.notify(getForeignKeyData, {
            dataManager,
            result: e,
            promise: deffered_1,
            action: args
          });
          return deffered_1.promise;
        });
      }
      if (this.parent.groupSettings.disablePageWiseAggregates && this.parent.groupSettings.columns.length) {
        dataManager = dataManager.then(function(e) {
          return _this.validateGroupRecords(e);
        });
      }
      dataManager.then(function(e) {
        return _this.dataManagerSuccess(e, args);
      }).catch(function(e) {
        return _this.dataManagerFailure(e, args);
      });
    };
    Render2.prototype.getFData = function(deferred, args) {
      this.parent.notify(getForeignKeyData, {
        isComplex: true,
        promise: deferred,
        action: args
      });
      return deferred.promise;
    };
    Render2.prototype.isNeedForeignAction = function() {
      var gObj = this.parent;
      return !!(gObj.allowFiltering && gObj.filterSettings.columns.length || !isNullOrUndefined(gObj.searchSettings.key) && gObj.searchSettings.key.length) && this.foreignKey(this.parent.getForeignKeyColumns());
    };
    Render2.prototype.foreignKey = function(columns) {
      var _this = this;
      return columns.some(function(col) {
        var fbool = false;
        fbool = _this.parent.filterSettings.columns.some(function(value) {
          return col.uid === value.uid;
        });
        return !!(fbool || _this.parent.searchSettings.key.length);
      });
    };
    Render2.prototype.sendBulkRequest = function(args) {
      var _this = this;
      args.requestType = "batchsave";
      var gObj = this.parent;
      if (gObj.allowPaging && gObj.pageSettings.pageSizes && gObj.pagerModule.pagerObj.isAllPage && gObj.pagerModule.pagerObj.checkAll) {
        var dataLength = args["changes"].addedRecords.length;
        if (dataLength) {
          gObj.setProperties({
            pageSettings: {
              pageSize: gObj.pageSettings.pageSize + dataLength
            }
          }, true);
        }
      }
      if (gObj.allowPaging && (args.changes.addedRecords.length || args.changes.deletedRecords.length || args.changes.changedRecords.length) && gObj.pageSettings && gObj.pageSettings.pageSizes && gObj.pagerModule && gObj.pagerModule.pagerObj && !gObj.getDataModule().dataManager.dataSource.offline && gObj.pagerModule.pagerObj.isAllPage) {
        gObj.pagerModule.pagerObj.isAllPage = void 0;
      }
      var promise = this.data.saveChanges(args.changes, this.parent.getPrimaryKeyFieldNames()[0], args.original);
      var query = this.data.generateQuery().requiresCount();
      if (this.data.dataManager.dataSource.offline) {
        this.refreshDataManager({
          requestType: "batchsave"
        });
        return;
      } else {
        promise.then(function(e) {
          _this.data.getData(args, query).then(function(e2) {
            return _this.dmSuccess(e2, args);
          }).catch(function(e2) {
            return _this.dmFailure(e2, args);
          });
        }).catch(function(e) {
          return _this.dmFailure(e, args);
        });
      }
    };
    Render2.prototype.dmSuccess = function(e, args) {
      this.dataManagerSuccess(e, args);
    };
    Render2.prototype.dmFailure = function(e, args) {
      this.dataManagerFailure(e, args);
    };
    Render2.prototype.renderEmptyRow = function() {
      this.emptyRow(true);
    };
    Render2.prototype.emptyRow = function(isTrigger) {
      var gObj = this.parent;
      var tbody2 = this.contentRenderer.getTable().querySelector(tbody);
      if (!isNullOrUndefined(tbody2)) {
        remove(tbody2);
      }
      tbody2 = this.parent.createElement(tbody, {
        attrs: {
          role: "rowgroup"
        }
      });
      var spanCount = gObj.allowRowDragAndDrop && isNullOrUndefined(gObj.rowDropSettings.targetID) ? 1 : 0;
      if (gObj.detailTemplate || gObj.childGrid) {
        ++spanCount;
      }
      var className = gObj.editSettings.showAddNewRow && gObj.editSettings.newRowPosition === "Bottom" ? "e-emptyrow e-show-added-row" : "e-emptyrow";
      var tr = this.parent.createElement("tr", {
        className,
        attrs: {
          role: "row"
        }
      });
      var td;
      if (gObj.emptyRecordTemplate) {
        var emptyRecordTemplateID = gObj.element.id + "emptyRecordTemplate";
        td = this.parent.createElement("td", {
          attrs: {
            colspan: (gObj.getVisibleColumns().length + spanCount + gObj.groupSettings.columns.length).toString()
          }
        });
        if (gObj.isVue || gObj.parentDetails && gObj.parentDetails.parentInstObj && gObj.parentDetails.parentInstObj.isVue) {
          td.appendChild(gObj.getEmptyRecordTemplate()(gObj.dataSource, gObj, "emptyRecordTemplate", emptyRecordTemplateID, void 0, void 0, void 0, this.parent["root"])[1]);
        } else {
          td.appendChild(gObj.getEmptyRecordTemplate()(gObj.dataSource, gObj, "emptyRecordTemplate", emptyRecordTemplateID, void 0, void 0, void 0, this.parent["root"])[0]);
        }
        if (gObj.isReact) {
          this.parent.renderTemplates();
        }
      } else {
        td = this.parent.createElement("td", {
          innerHTML: this.l10n.getConstant("EmptyRecord"),
          attrs: {
            colspan: (gObj.getVisibleColumns().length + spanCount + (!isNullOrUndefined(gObj.groupSettings.columns) ? gObj.groupSettings.columns.length : 0)).toString()
          }
        });
      }
      if (gObj.isFrozenGrid()) {
        td.classList.add("e-leftfreeze");
        td.style.left = "0px";
      }
      if (gObj.frozenRows && gObj.element.querySelector(".e-frozenrow-border")) {
        this.parent.element.querySelector(".e-frozenrow-border").classList.add("e-frozenrow-empty");
      }
      tr.appendChild(td);
      tbody2.appendChild(tr);
      this.contentRenderer.renderEmpty(tbody2);
      if (isTrigger) {
        if (!this.parent.isInitialLoad) {
          this.parent.focusModule.setFirstFocusableTabIndex();
        }
        this.parent.trigger(dataBound, {});
        this.parent.notify(onEmpty, {
          rows: [new Row({
            isDataRow: true,
            cells: [new Cell({
              isDataCell: true,
              visible: true
            })]
          })]
        });
        if (gObj.editSettings.showAddNewRow) {
          gObj.addRecord();
          this.parent.notify(showAddNewRowFocus, {});
        }
      }
    };
    Render2.prototype.dynamicColumnChange = function() {
      if (this.parent.getCurrentViewRecords().length) {
        this.updateColumnType(this.parent.getCurrentViewRecords()[0]);
      }
    };
    Render2.prototype.updateColumnType = function(record) {
      var columns = this.parent.getColumns();
      var value;
      var cFormat = "customFormat";
      var equalTo = "equalTo";
      var data = record && record.items ? record.items[0] : record;
      var fmtr = this.locator.getService("valueFormatter");
      for (var i = 0, len = columns.length; i < len; i++) {
        value = getObject(columns[parseInt(i.toString(), 10)].field || "", data);
        if (!isNullOrUndefined(columns[parseInt(i.toString(), 10)]["" + cFormat])) {
          columns[parseInt(i.toString(), 10)].format = columns[parseInt(i.toString(), 10)]["" + cFormat];
        }
        if (!isNullOrUndefined(columns[parseInt(i.toString(), 10)].validationRules) && !isNullOrUndefined(columns[parseInt(i.toString(), 10)].validationRules["" + equalTo])) {
          columns[parseInt(i.toString(), 10)].validationRules["" + equalTo][0] = this.parent.element.id + columns[parseInt(i.toString(), 10)].validationRules["" + equalTo][0];
        }
        if (columns[parseInt(i.toString(), 10)].isForeignColumn() && columns[parseInt(i.toString(), 10)].columnData) {
          value = getObject(columns[parseInt(i.toString(), 10)].foreignKeyValue || "", columns[parseInt(i.toString(), 10)].columnData[0]);
        }
        if (!isNullOrUndefined(value)) {
          this.isColTypeDef = true;
          if (!columns[parseInt(i.toString(), 10)].type) {
            columns[parseInt(i.toString(), 10)].type = value.getDay ? value.getHours() > 0 || value.getMinutes() > 0 || value.getSeconds() > 0 || value.getMilliseconds() > 0 ? "datetime" : "date" : typeof value;
          }
        } else {
          columns[parseInt(i.toString(), 10)].type = columns[parseInt(i.toString(), 10)].type || null;
        }
        var valueFormatter = new ValueFormatter();
        if (columns[parseInt(i.toString(), 10)].format && (columns[parseInt(i.toString(), 10)].format.skeleton || columns[parseInt(i.toString(), 10)].format.format && typeof columns[parseInt(i.toString(), 10)].format.format === "string")) {
          columns[parseInt(i.toString(), 10)].setFormatter(valueFormatter.getFormatFunction(extend({}, columns[parseInt(i.toString(), 10)].format)));
          columns[parseInt(i.toString(), 10)].setParser(valueFormatter.getParserFunction(columns[parseInt(i.toString(), 10)].format));
        }
        if (typeof columns[parseInt(i.toString(), 10)].format === "string") {
          setFormatter(this.locator, columns[parseInt(i.toString(), 10)]);
        } else if (!columns[parseInt(i.toString(), 10)].format && columns[parseInt(i.toString(), 10)].type === "number") {
          columns[parseInt(i.toString(), 10)].setParser(fmtr.getParserFunction({
            format: "n2"
          }));
        }
        if (columns[parseInt(i.toString(), 10)].type === "dateonly" && !columns[parseInt(i.toString(), 10)].format) {
          columns[parseInt(i.toString(), 10)].format = "yMd";
          setFormatter(this.locator, columns[parseInt(i.toString(), 10)]);
        }
      }
    };
    Render2.prototype.dataManagerSuccess = function(e, args) {
      var _this = this;
      var gObj = this.parent;
      this.contentRenderer = this.renderer.getRenderer(RenderType.Content);
      this.headerRenderer = this.renderer.getRenderer(RenderType.Header);
      e.actionArgs = args;
      var detailGrid = gObj.childGrid || gObj.detailTemplate ? true : false;
      var isInfiniteDelete = this.parent.enableInfiniteScrolling && !this.parent.infiniteScrollSettings.enableCache && !gObj.groupSettings.enableLazyLoading && (args.requestType === "delete" && !detailGrid || args.requestType === "save" && this.parent.infiniteScrollModule.requestType === "add" && !(gObj.sortSettings.columns.length || gObj.filterSettings.columns.length || this.parent.groupSettings.columns.length || gObj.searchSettings.key || detailGrid));
      gObj.trigger(beforeDataBound, e, function(dataArgs) {
        if (dataArgs.cancel) {
          return;
        }
        dataArgs.result = isNullOrUndefined(dataArgs.result) ? [] : dataArgs.result;
        var len = Object.keys(dataArgs.result).length;
        if (_this.parent.isDestroyed) {
          return;
        }
        if (!gObj.getColumns().length && !len && !(gObj.columns.length && gObj.columns[0] instanceof Column)) {
          gObj.hideSpinner();
          return;
        }
        if (_this.isInfiniteEnd(args) && !len) {
          _this.parent.notify(infiniteEditHandler, {
            e: args,
            result: e.result,
            count: e.count,
            agg: e.aggregates
          });
          return;
        }
        _this.parent.isEdit = false;
        _this.parent.notify(editReset, {});
        _this.parent.notify(tooltipDestroy, {});
        if (args && !((args.requestType === "infiniteScroll" || args.requestType === "delete" || args.action === "add") && gObj.enableInfiniteScrolling)) {
          _this.parent.notify(commandColumnDestroy, {
            type: "refreshCommandColumn"
          });
        }
        _this.contentRenderer.prevCurrentView = !isNullOrUndefined(_this.parent.currentViewData) && _this.parent.currentViewData.slice();
        gObj.currentViewData = dataArgs.result;
        gObj.notify(refreshInfiniteCurrentViewData, {
          args,
          data: dataArgs.result
        });
        if (dataArgs.count && !gObj.allowPaging && (gObj.enableVirtualization || gObj.enableInfiniteScrolling)) {
          gObj.totalDataRecordsCount = dataArgs.count;
        }
        if (!len && dataArgs.count && gObj.allowPaging && args && args.requestType !== "delete") {
          if (_this.parent.groupSettings.enableLazyLoading && (args.requestType === "grouping" || args.requestType === "ungrouping")) {
            _this.parent.notify(groupComplete, args);
          }
          gObj.prevPageMoving = true;
          gObj.pageSettings.totalRecordsCount = dataArgs.count;
          if (args.requestType !== "paging") {
            gObj.pageSettings.currentPage = Math.ceil(dataArgs.count / gObj.pageSettings.pageSize);
          }
          gObj.dataBind();
          return;
        }
        if ((!gObj.getColumns().length && len || !_this.isLayoutRendered) && !isGroupAdaptive(gObj)) {
          gObj.removeMaskRow();
          _this.updatesOnInitialRender(dataArgs);
        }
        if (!_this.isColTypeDef && gObj.getCurrentViewRecords()) {
          if (_this.data.dataManager.dataSource.offline && gObj.dataSource && gObj.dataSource.length) {
            _this.updateColumnType(gObj.dataSource[0]);
          } else {
            _this.updateColumnType(gObj.getCurrentViewRecords()[0]);
          }
        }
        if (!_this.parent.isInitialLoad && _this.parent.groupSettings.disablePageWiseAggregates && !_this.parent.groupSettings.columns.length) {
          dataArgs.result = _this.parent.dataSource instanceof Array ? _this.parent.dataSource : _this.parent.currentViewData;
        }
        if ((_this.parent.isReact || _this.parent.isVue) && !isNullOrUndefined(args) && args.requestType !== "infiniteScroll" && !args.isFrozen) {
          clearReactVueTemplates(_this.parent, ["footerTemplate"]);
        }
        if (_this.parent.isAngular && _this.parent.allowGrouping && _this.parent.groupSettings.captionTemplate && !(!isNullOrUndefined(args) && args.requestType === "infiniteScroll")) {
          _this.parent.destroyTemplate(["groupSettings_captionTemplate"]);
        }
        _this.parent.notify(dataReady, extend({
          count: dataArgs.count,
          result: dataArgs.result,
          aggregates: dataArgs.aggregates,
          loadSummaryOnEmpty: false
        }, args));
        if ((gObj.groupSettings.columns.length || args && args.requestType === "ungrouping") && args && args.requestType !== "filtering") {
          _this.headerRenderer.refreshUI();
        }
        if (len) {
          if (isGroupAdaptive(gObj)) {
            var content2 = "content";
            args.scrollTop = {
              top: _this.contentRenderer["" + content2].scrollTop
            };
          }
          if (!isInfiniteDelete) {
            if (_this.parent.enableImmutableMode) {
              _this.contentRenderer.immutableModeRendering(args);
            } else {
              _this.contentRenderer.refreshContentRows(args);
            }
          } else {
            _this.parent.notify(infiniteEditHandler, {
              e: args,
              result: e.result,
              count: e.count,
              agg: e.aggregates
            });
          }
        } else {
          if (args && args.isCaptionCollapse) {
            return;
          }
          if (!gObj.getColumns().length) {
            gObj.element.innerHTML = "";
            alert(_this.l10n.getConstant("EmptyDataSourceError"));
            return;
          }
          _this.contentRenderer.setRowElements([]);
          _this.contentRenderer.setRowObjects([]);
          _this.ariaService.setBusy(_this.parent.getContent().querySelector("." + content), false);
          gObj.removeMaskRow();
          _this.renderEmptyRow();
          if (gObj.enableColumnVirtualization && !len) {
            _this.parent.notify(contentReady, {
              rows: gObj.getRowsObject(),
              args: {}
            });
          }
          if (args) {
            var action = (args.requestType || "").toLowerCase() + "-complete";
            _this.parent.notify(action, args);
            if (args.requestType === "batchsave") {
              args.cancel = false;
              args.rows = [];
              args.isFrozen = !args.isFrozen;
              _this.parent.trigger(actionComplete, args);
            }
          }
          if (_this.parent.autoFit) {
            _this.parent.preventAdjustColumns();
          }
          _this.parent.hideSpinner();
        }
        _this.parent.notify(toolbarRefresh, {});
        _this.setRowCount(_this.parent.getCurrentViewRecords().length);
        if ("query" in e) {
          _this.parent.getDataModule().isQueryInvokedFromData = false;
        }
      });
    };
    Render2.prototype.dataManagerFailure = function(e, args) {
      if (!isNullOrUndefined(this.parent.contentModule)) {
        this.ariaService.setOptions(this.parent.getContent().querySelector("." + content), {
          busy: false,
          invalid: true
        });
        this.setRowCount(1);
      }
      this.parent.trigger(actionFailure, e && e.error ? e : {
        error: e
      });
      this.parent.hideSpinner();
      this.parent.removeMaskRow();
      if (args.requestType === "save" || args.requestType === "delete" || args.name === "bulk-save") {
        return;
      }
      this.parent.currentViewData = [];
      this.renderEmptyRow();
      if (!this.parent.isInitialLoad) {
        this.parent.focusModule.setFirstFocusableTabIndex();
      }
      this.parent.log("actionfailure", {
        error: e
      });
    };
    Render2.prototype.setRowCount = function(dataRowCount) {
      this.ariaService.setOptions(this.parent.element, {
        rowcount: dataRowCount ? dataRowCount.toString() : "1"
      });
    };
    Render2.prototype.isInfiniteEnd = function(args) {
      return this.parent.enableInfiniteScrolling && !this.parent.infiniteScrollSettings.enableCache && args.requestType === "delete";
    };
    Render2.prototype.updatesOnInitialRender = function(e) {
      this.isLayoutRendered = true;
      var isEmptyCol = false;
      if (this.parent.columns.length < 1) {
        this.buildColumns(e.result[0]);
        isEmptyCol = true;
      }
      prepareColumns(this.parent.columns, null, this.parent);
      if (isEmptyCol) {
        this.parent.notify(refreshSplitFrozenColumn, {});
      }
      this.headerRenderer.renderTable();
      this.contentRenderer.renderTable();
      this.parent.isAutoGen = true;
      this.parent.notify(autoCol, {});
    };
    Render2.prototype.iterateComplexColumns = function(obj, field, split) {
      var keys = Object.keys(obj);
      for (var i = 0; i < keys.length; i++) {
        var childKeys = typeof obj[keys[parseInt(i.toString(), 10)]] === "object" && obj[keys[parseInt(i.toString(), 10)]] && !(obj[keys[parseInt(i.toString(), 10)]] instanceof Date) ? Object.keys(obj[keys[parseInt(i.toString(), 10)]]) : [];
        if (childKeys.length) {
          this.iterateComplexColumns(obj[keys[parseInt(i.toString(), 10)]], field + (keys[parseInt(i.toString(), 10)] + "."), split);
        } else {
          split[this.counter] = field + keys[parseInt(i.toString(), 10)];
          this.counter++;
        }
      }
    };
    Render2.prototype.buildColumns = function(record) {
      var cols = [];
      var complexCols = {};
      this.iterateComplexColumns(record, "", complexCols);
      var columns = Object.keys(complexCols).filter(function(e) {
        return complexCols["" + e] !== "BlazId";
      }).map(function(field) {
        return complexCols["" + field];
      });
      for (var i = 0, len = columns.length; i < len; i++) {
        cols[parseInt(i.toString(), 10)] = {
          "field": columns[parseInt(i.toString(), 10)]
        };
        if (this.parent.enableColumnVirtualization) {
          cols[parseInt(i.toString(), 10)].width = !isNullOrUndefined(cols[parseInt(i.toString(), 10)].width) ? cols[parseInt(i.toString(), 10)].width : 200;
        }
      }
      this.parent.setProperties({
        "columns": cols
      }, true);
    };
    Render2.prototype.instantiateRenderer = function() {
      this.renderer.addRenderer(RenderType.Header, new HeaderRender(this.parent, this.locator));
      this.renderer.addRenderer(RenderType.Content, new ContentRender(this.parent, this.locator));
      var cellrender = this.locator.getService("cellRendererFactory");
      cellrender.addCellRenderer(CellType.Header, new HeaderCellRenderer(this.parent, this.locator));
      cellrender.addCellRenderer(CellType.Data, new CellRenderer(this.parent, this.locator));
      cellrender.addCellRenderer(CellType.StackedHeader, new StackedHeaderCellRenderer(this.parent, this.locator));
      cellrender.addCellRenderer(CellType.Indent, new IndentCellRenderer(this.parent, this.locator));
      cellrender.addCellRenderer(CellType.GroupCaption, new GroupCaptionCellRenderer(this.parent, this.locator));
      cellrender.addCellRenderer(CellType.GroupCaptionEmpty, new GroupCaptionEmptyCellRenderer(this.parent, this.locator));
      cellrender.addCellRenderer(CellType.Expand, new ExpandCellRenderer(this.parent, this.locator));
      cellrender.addCellRenderer(CellType.HeaderIndent, new HeaderIndentCellRenderer(this.parent, this.locator));
      cellrender.addCellRenderer(CellType.StackedHeader, new StackedHeaderCellRenderer(this.parent, this.locator));
      cellrender.addCellRenderer(CellType.DetailHeader, new DetailHeaderIndentCellRenderer(this.parent, this.locator));
      cellrender.addCellRenderer(CellType.RowDragHIcon, new RowDragDropHeaderRenderer(this.parent, this.locator));
      cellrender.addCellRenderer(CellType.DetailExpand, new DetailExpandCellRenderer(this.parent, this.locator));
      cellrender.addCellRenderer(CellType.DetailFooterIntent, new IndentCellRenderer(this.parent, this.locator));
      cellrender.addCellRenderer(CellType.RowDragIcon, new RowDragDropRenderer(this.parent, this.locator));
    };
    Render2.prototype.addEventListener = function() {
      var _this = this;
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(initialLoad, this.instantiateRenderer, this);
      this.parent.on("refreshdataSource", this.dataManagerSuccess, this);
      this.parent.on(modelChanged, this.refresh, this);
      this.parent.on(refreshComplete, this.refreshComplete, this);
      this.parent.on(bulkSave, this.sendBulkRequest, this);
      this.parent.on(showEmptyGrid, function() {
        _this.emptyGrid = true;
      }, this);
      this.parent.on(autoCol, this.dynamicColumnChange, this);
    };
    Render2.prototype.validateGroupRecords = function(e) {
      var _this = this;
      var index = e.result.length - 1;
      if (index < 0) {
        return Promise.resolve(e);
      }
      var group0 = e.result[0];
      var groupN = e.result[parseInt(index.toString(), 10)];
      var predicate = [];
      var addWhere = function(input) {
        var groups2 = [group0, groupN];
        for (var i2 = 0; i2 < groups2.length; i2++) {
          predicate.push(new Predicate("field", "==", groups2[parseInt(i2.toString(), 10)].field).and(_this.getPredicate("key", "equal", groups2[parseInt(i2.toString(), 10)].key)));
        }
        input.where(Predicate.or(predicate));
      };
      var query = new Query();
      addWhere(query);
      var curDm = new DataManager(e.result);
      var curFilter = curDm.executeLocal(query);
      var newQuery = this.data.generateQuery(true);
      var rPredicate = [];
      if (this.data.isRemote()) {
        var groups = [group0, groupN];
        for (var i = 0; i < groups.length; i++) {
          rPredicate.push(this.getPredicate(groups[parseInt(i.toString(), 10)].field, "equal", groups[parseInt(i.toString(), 10)].key));
        }
        newQuery.where(Predicate.or(rPredicate));
      } else {
        addWhere(newQuery);
      }
      var deferred = new Deferred();
      this.data.getData({}, newQuery).then(function(r) {
        _this.updateGroupInfo(curFilter, r.result);
        deferred.resolve(e);
      }).catch(function(e2) {
        return deferred.reject(e2);
      });
      return deferred.promise;
    };
    Render2.prototype.getPredicate = function(key, operator, value) {
      if (value instanceof Date) {
        return getDatePredicate({
          field: key,
          operator,
          value
        });
      }
      return new Predicate(key, operator, value);
    };
    Render2.prototype.updateGroupInfo = function(current, untouched) {
      var dm = new DataManager(untouched);
      var elements = current;
      for (var i = 0; i < elements.length; i++) {
        var updatedGroup = dm.executeLocal(new Query().where(new Predicate("field", "==", elements[parseInt(i.toString(), 10)].field).and(this.getPredicate("key", "equal", elements[parseInt(i.toString(), 10)].key))))[0];
        if (!isNullOrUndefined(updatedGroup)) {
          elements[parseInt(i.toString(), 10)].count = updatedGroup.count;
          var itemGroup = elements[parseInt(i.toString(), 10)].items;
          var updatedGroupItem = updatedGroup.items;
          if (itemGroup.GroupGuid) {
            elements[parseInt(i.toString(), 10)].items = this.updateGroupInfo(elements[parseInt(i.toString(), 10)].items, updatedGroup.items);
          }
          var rows = this.parent.aggregates;
          for (var j = 0; j < rows.length; j++) {
            var row2 = rows[parseInt(j.toString(), 10)];
            for (var k = 0; k < row2.columns.length; k++) {
              var column = row2.columns[parseInt(k.toString(), 10)];
              var types = column.type instanceof Array ? column.type : [column.type];
              for (var l = 0; l < types.length; l++) {
                var key = column.field + " - " + types[parseInt(l.toString(), 10)].toLowerCase();
                var data = itemGroup.level ? updatedGroupItem.records : updatedGroup.items;
                var context = this.parent;
                if (types[parseInt(l.toString(), 10)] === "Custom") {
                  var data_1 = itemGroup.level ? updatedGroupItem : updatedGroup;
                  var temp = column.customAggregate;
                  if (typeof temp === "string") {
                    temp = getValue(temp, window);
                  }
                  elements[parseInt(i.toString(), 10)].aggregates["" + key] = temp ? temp.call(context, data_1, row2.columns[parseInt(k.toString(), 10)]) : "";
                } else {
                  elements[parseInt(i.toString(), 10)].aggregates["" + key] = DataUtil.aggregates[types[parseInt(l.toString(), 10)].toLowerCase()](data, row2.columns[parseInt(k.toString(), 10)].field);
                }
              }
            }
          }
        }
      }
      return current;
    };
    return Render2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/services/cell-render-factory.js
var CellRendererFactory = (
  /** @class */
  function() {
    function CellRendererFactory2() {
      this.cellRenderMap = {};
    }
    CellRendererFactory2.prototype.addCellRenderer = function(name, type) {
      name = typeof name === "string" ? name : getEnumValue(CellType, name);
      if (isNullOrUndefined(this.cellRenderMap["" + name])) {
        this.cellRenderMap["" + name] = type;
      }
    };
    CellRendererFactory2.prototype.getCellRenderer = function(name) {
      name = typeof name === "string" ? name : getEnumValue(CellType, name);
      if (isNullOrUndefined(this.cellRenderMap["" + name])) {
        throw "The cellRenderer " + name + " is not found";
      } else {
        return this.cellRenderMap["" + name];
      }
    };
    return CellRendererFactory2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/responsive-dialog-renderer.js
var ResponsiveDialogRenderer = (
  /** @class */
  function() {
    function ResponsiveDialogRenderer2(parent, serviceLocator) {
      this.sortedCols = [];
      this.sortPredicate = [];
      this.isCustomDialog = false;
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      this.addEventListener();
    }
    ResponsiveDialogRenderer2.prototype.addEventListener = function() {
      this.evtHandlers = [{
        event: filterDialogClose,
        handler: this.closeCustomDialog
      }, {
        event: refreshCustomFilterOkBtn,
        handler: this.refreshCustomFilterOkBtn
      }, {
        event: renderResponsiveCmenu,
        handler: this.renderResponsiveContextMenu
      }, {
        event: filterCmenuSelect,
        handler: this.renderCustomFilterDiv
      }, {
        event: customFilterClose,
        handler: this.customExFilterClose
      }, {
        event: refreshCustomFilterClearBtn,
        handler: this.refreshCustomFilterClearBtn
      }];
      addRemoveEventListener(this.parent, this.evtHandlers, true, this);
      this.onActionCompleteFn = this.editComplate.bind(this);
      this.parent.addEventListener(actionComplete, this.onActionCompleteFn);
    };
    ResponsiveDialogRenderer2.prototype.customExFilterClose = function() {
      this.isCustomDlgRender = false;
    };
    ResponsiveDialogRenderer2.prototype.renderCustomFilterDiv = function() {
      var header = this.customResponsiveDlg.element.querySelector(".e-dlg-header-content");
      var title = header.querySelector(".e-dlg-custom-header");
      var closeBtn = header.querySelector(".e-dlg-closeicon-btn");
      this.isCustomDlgRender = true;
      this.parent.filterModule.filterModule.closeDialog();
      this.saveBtn.element.style.display = "";
      this.refreshCustomFilterOkBtn({
        disabled: false
      });
      this.backBtn.element.style.display = "none";
      closeBtn.style.display = "";
      title.innerHTML = this.parent.localeObj.getConstant("CustomFilter");
      var content2 = this.customResponsiveDlg.element.querySelector(".e-dlg-content");
      this.customExcelFilterParent = this.parent.createElement("div", {
        className: "e-xl-customfilterdiv e-default-filter"
      });
      content2.appendChild(this.customExcelFilterParent);
    };
    ResponsiveDialogRenderer2.prototype.renderResponsiveContextMenu = function(args) {
      if (this.action === ResponsiveDialogAction.isFilter) {
        var content2 = this.customResponsiveDlg.element.querySelector(".e-dlg-content");
        var header = this.customResponsiveDlg.element.querySelector(".e-dlg-header-content");
        var closeBtn = header.querySelector(".e-dlg-closeicon-btn");
        var text = header.querySelector(".e-dlg-custom-header");
        if (args.isOpen) {
          content2.firstChild.style.display = "none";
          content2.appendChild(args.target);
          closeBtn.style.display = "none";
          this.saveBtn.element.style.display = "none";
          this.filterClearBtn.element.style.display = "none";
          text.innerHTML = args.header;
          var backBtn = this.parent.createElement("button");
          var span = this.parent.createElement("span", {
            className: "e-btn-icon e-resfilterback e-icons"
          });
          backBtn.appendChild(span);
          this.backBtn = new Button({
            cssClass: this.parent.cssClass ? "e-res-back-btn " + this.parent.cssClass : "e-res-back-btn"
          });
          this.backBtn.appendTo(backBtn);
          text.parentElement.insertBefore(backBtn, text);
        } else if (this.backBtn && !this.isCustomDlgRender) {
          content2.firstChild.style.display = "";
          remove(this.backBtn.element);
          closeBtn.style.display = "";
          this.saveBtn.element.style.display = "";
          if (this.isFiltered) {
            this.filterClearBtn.element.style.display = "";
          }
          text.innerHTML = this.getHeaderTitle({
            action: ResponsiveDialogAction.isFilter
          }, args.col);
        }
      }
    };
    ResponsiveDialogRenderer2.prototype.refreshCustomFilterClearBtn = function(args) {
      if (this.filterClearBtn) {
        this.isFiltered = args.isFiltered;
        this.filterClearBtn.element.style.display = args.isFiltered ? "" : "none";
      }
    };
    ResponsiveDialogRenderer2.prototype.refreshCustomFilterOkBtn = function(args) {
      if (this.saveBtn) {
        this.saveBtn.disabled = args.disabled;
      }
      if (this.parent.columnChooserModule && this.parent.columnChooserModule.responsiveDialogRenderer.saveBtn) {
        this.parent.columnChooserModule.responsiveDialogRenderer.saveBtn.disabled = args.disabled;
      }
    };
    ResponsiveDialogRenderer2.prototype.columnMenuResponsiveContent = function(str, locale, disabled) {
      var cDiv = this.parent.createElement("div", {
        className: "e-responsivecoldiv e-responsive" + str.toLowerCase() + "div" + (disabled ? " e-disabled" : "")
      });
      var span = this.parent.createElement("span", {
        className: "e-icons e-res" + str.toLowerCase() + "-icon e-btn-icon"
      });
      var icon = this.parent.createElement("span", {
        innerHTML: locale,
        className: "e-rescolumn-menu e-res-header-text"
      });
      cDiv.appendChild(span);
      cDiv.appendChild(icon);
      this.customColumnDiv.appendChild(cDiv);
    };
    ResponsiveDialogRenderer2.prototype.renderResponsiveContent = function(col, column) {
      var _this = this;
      var gObj = this.parent;
      var isColumnChooser = this.action === ResponsiveDialogAction.isColumnChooser;
      if (col || isColumnChooser) {
        this.filterParent = this.parent.createElement("div", {
          className: (isColumnChooser ? "e-maincolumnchooserdiv " : "") + "e-mainfilterdiv e-default-filter",
          id: (isColumnChooser ? "columchooser" : col.uid) + "-main-filter"
        });
        return this.filterParent;
      } else {
        this.customColumnDiv = gObj.createElement("div", {
          className: "columndiv columnmenudiv"
        });
        this.customColumnDiv.style.width = "100%";
        if (this.parent.showColumnMenu && this.parent.rowRenderingMode === "Horizontal" && this.action === ResponsiveDialogAction.isColMenu) {
          this.columnMenuResponsiveContent("AutoFitAll", gObj.localeObj.getConstant("AutoFitAll"));
          this.columnMenuResponsiveContent("AutoFit", gObj.localeObj.getConstant("AutoFit"));
          if (column.allowGrouping && gObj.allowGrouping) {
            this.columnMenuResponsiveContent("Group", gObj.localeObj.getConstant("Group"), gObj.groupSettings.columns.indexOf(column.field) >= 0);
            this.columnMenuResponsiveContent("UnGroup", gObj.localeObj.getConstant("Ungroup"), gObj.groupSettings.columns.indexOf(column.field) < 0);
          }
          if (column.allowSorting && gObj.allowSorting) {
            var direction = "None";
            var sortColumns = this.parent.sortSettings.columns;
            for (var i = 0; i < sortColumns.length; i++) {
              if (sortColumns[parseInt(i.toString(), 10)].field === column.field) {
                direction = sortColumns[parseInt(i.toString(), 10)].direction;
                break;
              }
            }
            this.columnMenuResponsiveContent("ascending", gObj.localeObj.getConstant("SortAscending"), direction === "Ascending");
            this.columnMenuResponsiveContent("descending", gObj.localeObj.getConstant("SortDescending"), direction === "Descending");
          }
          if (gObj.showColumnChooser) {
            this.columnMenuResponsiveContent("Column", gObj.localeObj.getConstant("Columnchooser"));
          }
          if (column.allowFiltering && gObj.allowFiltering) {
            this.columnMenuResponsiveContent("Filter", gObj.localeObj.getConstant("FilterMenu"));
          }
        } else {
          var cols = gObj.getColumns();
          var sortBtnParent = gObj.createElement("div", {
            className: "e-ressortbutton-parent"
          });
          var filteredCols = [];
          var isSort = this.action === ResponsiveDialogAction.isSort;
          var isFilter = this.action === ResponsiveDialogAction.isFilter;
          if (isFilter) {
            for (var i = 0; i < gObj.filterSettings.columns.length; i++) {
              filteredCols.push(gObj.filterSettings.columns[parseInt(i.toString(), 10)].field);
            }
          }
          for (var i = 0; i < cols.length; i++) {
            if (!cols[parseInt(i.toString(), 10)].visible || !cols[parseInt(i.toString(), 10)].allowSorting && isSort || !cols[parseInt(i.toString(), 10)].allowFiltering && isFilter) {
              continue;
            }
            var cDiv = gObj.createElement("div", {
              className: "e-responsivecoldiv"
            });
            cDiv.setAttribute("data-e-mappingname", cols[parseInt(i.toString(), 10)].field);
            cDiv.setAttribute("data-e-mappinguid", cols[parseInt(i.toString(), 10)].uid);
            var span = gObj.createElement("span", {
              innerHTML: cols[parseInt(i.toString(), 10)].headerText,
              className: "e-res-header-text"
            });
            cDiv.appendChild(span);
            this.customColumnDiv.appendChild(cDiv);
            if (isSort) {
              var fields = this.getSortedFieldsAndDirections("field");
              var index = fields.indexOf(cols[parseInt(i.toString(), 10)].field);
              var button = gObj.createElement("button", {
                id: gObj.element.id + cols[parseInt(i.toString(), 10)].field + "sortbutton"
              });
              var clone = sortBtnParent.cloneNode();
              clone.appendChild(button);
              cDiv.appendChild(clone);
              var btnObj = new Button({
                cssClass: this.parent.cssClass ? "e-ressortbutton " + this.parent.cssClass : "e-ressortbutton"
              });
              btnObj.appendTo(button);
              var buttonInnerText = void 0;
              if (!isNullOrUndefined(this.parent.sortSettings.columns[parseInt(index.toString(), 10)])) {
                buttonInnerText = this.parent.sortSettings.columns[parseInt(index.toString(), 10)].direction === "Ascending" ? this.parent.localeObj.getConstant("AscendingText") : this.parent.localeObj.getConstant("DescendingText");
              }
              button.innerHTML = index > -1 ? buttonInnerText : this.parent.localeObj.getConstant("NoneText");
              button.onclick = function(e) {
                _this.sortButtonClickHandler(e.target);
              };
            }
            if (isFilter && filteredCols.indexOf(cols[parseInt(i.toString(), 10)].field) > -1) {
              var divIcon = gObj.createElement("div", {
                className: "e-icons e-res-icon e-filtersetdiv"
              });
              var iconSpan = gObj.createElement("span", {
                className: "e-icons e-res-icon e-filterset"
              });
              iconSpan.setAttribute("colType", cols[parseInt(i.toString(), 10)].type);
              divIcon.appendChild(iconSpan);
              cDiv.appendChild(divIcon);
            }
          }
        }
        EventHandler.add(this.customColumnDiv, Browser.isDevice ? "touchend" : "click", this.customFilterColumnClickHandler, this);
        return this.customColumnDiv;
      }
    };
    ResponsiveDialogRenderer2.prototype.getSortedFieldsAndDirections = function(name) {
      var fields = [];
      for (var i = 0; i < this.parent.sortSettings.columns.length; i++) {
        fields.push(this.parent.sortSettings.columns[parseInt(i.toString(), 10)]["" + name]);
      }
      return fields;
    };
    ResponsiveDialogRenderer2.prototype.sortButtonClickHandler = function(target) {
      if (target) {
        var columndiv = parentsUntil(target, "e-responsivecoldiv");
        var field = columndiv.getAttribute("data-e-mappingname");
        if (!this.parent.allowMultiSorting) {
          this.sortPredicate = [];
          this.sortedCols = [];
          this.isSortApplied = false;
          this.resetSortButtons(target);
        }
        var txt = target.textContent;
        var directionTxt = txt === this.parent.localeObj.getConstant("NoneText") ? this.parent.localeObj.getConstant("AscendingText") : txt === this.parent.localeObj.getConstant("AscendingText") ? this.parent.localeObj.getConstant("DescendingText") : this.parent.localeObj.getConstant("NoneText");
        var direction = directionTxt === this.parent.localeObj.getConstant("AscendingText") ? "Ascending" : directionTxt === this.parent.localeObj.getConstant("DescendingText") ? "Descending" : "None";
        target.innerHTML = directionTxt;
        this.setSortedCols(field, direction);
      }
    };
    ResponsiveDialogRenderer2.prototype.resetSortButtons = function(target) {
      var buttons = [].slice.call(this.customColumnDiv.getElementsByClassName("e-ressortbutton"));
      for (var i = 0; i < buttons.length; i++) {
        if (buttons[parseInt(i.toString(), 10)] !== target) {
          buttons[parseInt(i.toString(), 10)].innerHTML = this.parent.localeObj.getConstant("NoneText");
        }
      }
    };
    ResponsiveDialogRenderer2.prototype.setSortedCols = function(field, direction) {
      var fields = this.getCurrentSortedFields();
      var index = fields.indexOf(field);
      if (this.parent.allowMultiSorting && index > -1) {
        this.sortedCols.splice(index, 1);
        this.sortPredicate.splice(index, 1);
      }
      this.isSortApplied = true;
      if (direction !== "None") {
        this.sortedCols.push(field);
        this.sortPredicate.push({
          field,
          direction
        });
      }
    };
    ResponsiveDialogRenderer2.prototype.getCurrentSortedFields = function() {
      var fields = [];
      for (var i = 0; i < this.sortedCols.length; i++) {
        fields.push(this.sortedCols[parseInt(i.toString(), 10)]);
      }
      return fields;
    };
    ResponsiveDialogRenderer2.prototype.customFilterColumnClickHandler = function(e) {
      var gObj = this.parent;
      var target = e.target;
      if (parentsUntil(target, "columnmenudiv") && this.action === ResponsiveDialogAction.isColMenu && !parentsUntil(target, "e-disabled")) {
        var column = this.menuCol ? this.menuCol : this.filteredCol;
        if (parentsUntil(target, "e-responsiveautofitalldiv")) {
          gObj.autoFitColumns([]);
          this.closeCustomFilter();
        } else if (parentsUntil(target, "e-responsiveautofitdiv")) {
          gObj.autoFitColumns(column.field);
          this.closeCustomFilter();
        } else if (parentsUntil(target, "e-responsivegroupdiv")) {
          gObj.groupColumn(column.field);
          this.closeCustomFilter();
        } else if (parentsUntil(target, "e-responsiveungroupdiv")) {
          gObj.ungroupColumn(column.field);
          this.closeCustomFilter();
        } else if (parentsUntil(target, "e-responsiveascendingdiv")) {
          gObj.sortColumn(column.field, "Ascending");
          this.closeCustomFilter();
        } else if (parentsUntil(target, "e-responsivedescendingdiv")) {
          gObj.sortColumn(column.field, "Descending");
          this.closeCustomFilter();
        } else if (parentsUntil(target, "e-responsivecolumndiv")) {
          gObj.notify(renderResponsiveChangeAction, {
            action: 5
          });
          gObj.showResponsiveCustomColumnChooser();
        } else if (parentsUntil(target, "e-responsivefilterdiv")) {
          gObj.notify(renderResponsiveChangeAction, {
            action: 3
          });
          this.isRowResponsive = true;
          this.isCustomDialog = false;
          if (gObj.filterModule) {
            gObj.filterModule.responsiveDialogRenderer.showResponsiveDialog(column);
          }
        }
        e.preventDefault();
      }
      if (this.action !== ResponsiveDialogAction.isFilter) {
        return;
      }
      if (gObj.filterSettings.type !== "FilterBar") {
        if (target.classList.contains("e-responsivecoldiv") || target.parentElement.classList.contains("e-responsivecoldiv")) {
          var field = target.getAttribute("data-e-mappingname");
          if (!field) {
            field = target.parentElement.getAttribute("data-e-mappingname");
          }
          if (field) {
            var col = gObj.getColumnByField(field);
            this.isRowResponsive = true;
            this.showResponsiveDialog(col);
          }
        } else if (target.classList.contains("e-filterset") || target.parentElement.classList.contains("e-filtersetdiv")) {
          var colDiv = parentsUntil(target, "e-responsivecoldiv");
          if (colDiv) {
            var field = colDiv.getAttribute("data-e-mappingname");
            var col = gObj.getColumnByField(field);
            if (col.filter.type === "Menu" || !col.filter.type && gObj.filterSettings.type === "Menu") {
              this.isDialogClose = true;
            }
            this.parent.filterModule.filterModule.clearCustomFilter(col);
            this.removeCustomDlgFilterEle(target);
          }
        }
      }
    };
    ResponsiveDialogRenderer2.prototype.showResponsiveDialog = function(col, column) {
      if (this.isCustomDialog && this.action === ResponsiveDialogAction.isFilter && !this.isRowResponsive || column && this.action === ResponsiveDialogAction.isColMenu) {
        this.menuCol = column;
        this.renderCustomFilterDialog(null, column);
      } else {
        this.filteredCol = col;
        this.renderResponsiveDialog(col);
        if (this.parent.enableAdaptiveUI && col) {
          this.parent.filterModule.setFilterModel(col);
          this.parent.filterModule.filterModule.openDialog(this.parent.filterModule.createOptions(col, void 0));
        }
        if (this.action === ResponsiveDialogAction.isColumnChooser) {
          this.parent.notify(renderResponsiveColumnChooserDiv, {
            action: "open"
          });
        }
        if (this.action === ResponsiveDialogAction.isSort) {
          var args = {
            cancel: false,
            dialogObj: this.customResponsiveDlg,
            requestType: "beforeOpenAptiveSortDialog"
          };
          this.parent.trigger(beforeOpenAdaptiveDialog, args);
          if (args.cancel) {
            return;
          }
        }
        this.customResponsiveDlg.show(true);
        this.customResponsiveDlg.element.style.maxHeight = "100%";
        this.setTopToChildDialog(this.customResponsiveDlg.element);
        if (this.parent.enableAdaptiveUI && this.parent.filterSettings && (this.parent.filterSettings.type === "CheckBox" || this.parent.filterSettings.type === "Excel") && this.parent.filterSettings.enableInfiniteScrolling && this.parent.filterSettings.loadingIndicator === "Shimmer") {
          var filterBase = this.parent.filterSettings.type === "CheckBox" ? this.parent.filterModule.filterModule.checkBoxBase : this.parent.filterModule.filterModule.excelFilterBase;
          filterBase.showMask();
        }
      }
    };
    ResponsiveDialogRenderer2.prototype.setTopToChildDialog = function(dialogEle) {
      var child = dialogEle.querySelector(".e-dialog");
      if (child) {
        var top_1 = dialogEle.querySelector(".e-dlg-header-content").getBoundingClientRect().height;
        child.style.top = top_1 + "px";
      }
    };
    ResponsiveDialogRenderer2.prototype.renderCustomFilterDialog = function(col, column) {
      var gObj = this.parent;
      var isColMenu = this.action === ResponsiveDialogAction.isColMenu;
      if (this.action === ResponsiveDialogAction.isFilter && gObj.filterSettings.type === "FilterBar") {
        return;
      }
      var colMenu = isColMenu ? "e-customcolumnmenudiv " : "";
      var outerDiv = this.parent.createElement("div", {
        id: gObj.element.id + (isColMenu ? "customcolumnmenu" : "customfilter"),
        className: this.parent.cssClass ? colMenu + "e-customfilterdiv e-responsive-dialog " + this.parent.cssClass : colMenu + "e-customfilterdiv e-responsive-dialog"
      });
      this.parent.element.appendChild(outerDiv);
      this.customFilterDlg = this.getDialogOptions(col, true, null, column);
      var args = {
        cancel: false,
        dialogObj: this.customFilterDlg,
        requestType: "beforeOpenAptiveFilterDialog"
      };
      this.parent.trigger(beforeOpenAdaptiveDialog, args);
      if (args.cancel) {
        return;
      }
      this.customFilterDlg.appendTo(outerDiv);
      this.customFilterDlg.show(true);
      this.customFilterDlg.element.style.maxHeight = "100%";
    };
    ResponsiveDialogRenderer2.prototype.getDialogOptions = function(col, isCustomFilter, id, column) {
      var options = new Dialog({
        isModal: true,
        showCloseIcon: id === "columnchooser" && this.parent.columnChooserSettings.headerTemplate && !this.parent.enableColumnVirtualization ? false : true,
        closeOnEscape: false,
        locale: this.parent.locale,
        target: this.parent.adaptiveDlgTarget ? this.parent.adaptiveDlgTarget : document.body,
        visible: false,
        enableRtl: this.parent.enableRtl,
        content: this.renderResponsiveContent(col, column),
        open: this.dialogOpen.bind(this),
        created: this.dialogCreated.bind(this),
        close: this.beforeDialogClose.bind(this),
        width: "100%",
        height: "100%",
        animationSettings: {
          effect: "None"
        },
        cssClass: this.parent.cssClass ? this.parent.cssClass : ""
      });
      var isStringTemplate = "isStringTemplate";
      options["" + isStringTemplate] = true;
      if (isCustomFilter) {
        options.header = this.renderResponsiveHeader(col, void 0, true);
        var colMenu = this.action === ResponsiveDialogAction.isColMenu ? "e-customcolumnmenu " : "";
        options.cssClass = colMenu + "e-customfilter";
      } else {
        options.header = this.renderResponsiveHeader(col);
        options.cssClass = this.parent.rowRenderingMode === "Vertical" && this.action === ResponsiveDialogAction.isFilter ? "e-res" + id + " e-row-responsive-filter" : "e-res" + id;
      }
      return options;
    };
    ResponsiveDialogRenderer2.prototype.renderResponsiveDialog = function(col) {
      var gObj = this.parent;
      if (this.action === ResponsiveDialogAction.isFilter && gObj.filterSettings.type === "FilterBar") {
        return;
      }
      var id = this.action === ResponsiveDialogAction.isFilter ? "filter" : "sort";
      id = this.action === ResponsiveDialogAction.isColumnChooser ? "columnchooser" : id;
      var outerDiv = this.parent.createElement("div", {
        id: gObj.element.id + "responsive" + id,
        className: this.parent.cssClass ? "e-res" + id + "div e-responsive-dialog " + this.parent.cssClass : "e-res" + id + "div e-responsive-dialog"
      });
      this.parent.element.appendChild(outerDiv);
      this.customResponsiveDlg = this.getDialogOptions(col, false, id);
      this.customResponsiveDlg.appendTo(outerDiv);
    };
    ResponsiveDialogRenderer2.prototype.dialogCreated = function() {
      addBiggerDialog(this.parent);
    };
    ResponsiveDialogRenderer2.prototype.dialogOpen = function() {
      if (this.action === ResponsiveDialogAction.isSort && this.parent.allowMultiSorting) {
        for (var i = 0; i < this.parent.sortSettings.columns.length; i++) {
          this.sortedCols.push(this.parent.sortSettings.columns[parseInt(i.toString(), 10)].field);
          var sortField = this.parent.sortSettings.columns[parseInt(i.toString(), 10)].field;
          var sortDirection = this.parent.sortSettings.columns[parseInt(i.toString(), 10)].direction;
          this.sortPredicate.push({
            field: sortField,
            direction: sortDirection
          });
        }
      }
    };
    ResponsiveDialogRenderer2.prototype.beforeDialogClose = function(args) {
      this.isDialogClose = args.element && !args.element.querySelector(".e-xl-customfilterdiv") && args.element.classList.contains("e-resfilterdiv");
      if (this.action === ResponsiveDialogAction.isFilter) {
        if (args.element.classList.contains("e-resfilterdiv")) {
          this.parent.filterModule.filterModule.closeResponsiveDialog(this.isCustomDlgRender);
        } else if (args.element.classList.contains("e-customfilterdiv")) {
          this.closeCustomFilter();
        }
        if (this.parent.rowRenderingMode === "Horizontal" && this.parent.showColumnMenu) {
          this.parent.notify(renderResponsiveChangeAction, {
            action: 4
          });
          var custom = document.querySelector(".e-resfilter");
          if (custom) {
            remove(custom);
          }
        }
      } else if (this.action === ResponsiveDialogAction.isSort) {
        this.closeCustomDialog();
      } else if (this.action === ResponsiveDialogAction.isColMenu) {
        this.closeCustomFilter();
        var custom = document.querySelector(".e-rescolummenu");
        if (custom) {
          remove(custom);
        }
      } else if (this.action === ResponsiveDialogAction.isColumnChooser) {
        this.parent.notify(renderResponsiveColumnChooserDiv, {
          action: "clear"
        });
        var custom = document.querySelector(".e-rescolumnchooser");
        if (custom) {
          remove(custom);
        }
        if (this.parent.rowRenderingMode === "Horizontal" && this.parent.showColumnMenu) {
          this.parent.notify(renderResponsiveChangeAction, {
            action: 4
          });
        }
        this.isCustomDialog = false;
        this.isDialogClose = false;
      }
      this.parent.off(enterKeyHandler, this.keyHandler);
    };
    ResponsiveDialogRenderer2.prototype.sortColumn = function() {
      if (!this.isSortApplied) {
        this.closeCustomDialog();
        return;
      }
      if (this.sortPredicate.length) {
        this.parent.setProperties({
          sortSettings: {
            columns: []
          }
        }, true);
      }
      for (var i = 0; i < this.sortPredicate.length; i++) {
        this.parent.sortColumn(this.sortPredicate[parseInt(i.toString(), 10)].field, this.sortPredicate[parseInt(i.toString(), 10)].direction, this.parent.allowMultiSorting);
      }
      if (!this.sortPredicate.length) {
        this.parent.clearSorting();
      }
      this.closeCustomDialog();
    };
    ResponsiveDialogRenderer2.prototype.getHeaderTitle = function(args, col) {
      var gObj = this.parent;
      var title;
      if (this.action === ResponsiveDialogAction.isEdit) {
        title = gObj.localeObj.getConstant("EditFormTitle") + args.primaryKeyValue[0];
      } else if (this.action === ResponsiveDialogAction.isAdd) {
        title = gObj.localeObj.getConstant("AddFormTitle");
      } else if (this.action === ResponsiveDialogAction.isFilter) {
        title = col ? col.headerText || col.field : gObj.localeObj.getConstant("FilterTitle");
      } else if (this.action === ResponsiveDialogAction.isSort) {
        title = gObj.localeObj.getConstant("Sort");
      } else if (this.action === ResponsiveDialogAction.isColMenu) {
        title = gObj.localeObj.getConstant("ColumnMenu");
      } else if (this.action === ResponsiveDialogAction.isColumnChooser) {
        title = gObj.localeObj.getConstant("ChooseColumns");
      }
      return title;
    };
    ResponsiveDialogRenderer2.prototype.getDialogName = function(action) {
      var name;
      if (action === ResponsiveDialogAction.isAdd || action === ResponsiveDialogAction.isEdit) {
        name = "dialogEdit_wrapper_title";
      } else if (action === ResponsiveDialogAction.isFilter) {
        name = "responsive_filter_dialog_wrapper";
      } else if (action === ResponsiveDialogAction.isColumnChooser) {
        name = "responsive_column_chooser_dialog_wrapper";
      }
      return name;
    };
    ResponsiveDialogRenderer2.prototype.getButtonText = function(action) {
      var text;
      if (action === ResponsiveDialogAction.isAdd || action === ResponsiveDialogAction.isEdit) {
        text = "Save";
      } else if (action === ResponsiveDialogAction.isFilter || this.action === ResponsiveDialogAction.isSort || action === ResponsiveDialogAction.isColumnChooser || this.action === ResponsiveDialogAction.isColumnChooser) {
        text = "OKButton";
      }
      return text;
    };
    ResponsiveDialogRenderer2.prototype.renderResponsiveHeader = function(col, args, isCustomFilter) {
      var _this = this;
      var gObj = this.parent;
      gObj.on(enterKeyHandler, this.keyHandler, this);
      var id = gObj.element.id + this.getDialogName(this.action);
      if (this.parent.columnChooserSettings.headerTemplate && !this.parent.enableColumnVirtualization && this.getHeaderTitle(args, col) === gObj.localeObj.getConstant("ChooseColumns")) {
        var headerTempteElement = this.parent.columnChooserModule.renderHeader();
        return headerTempteElement;
      }
      var header = gObj.createElement("div", {
        className: "e-res-custom-element"
      });
      var titleDiv = gObj.createElement("div", {
        className: "e-dlg-custom-header",
        id
      });
      titleDiv.innerHTML = this.getHeaderTitle(args, col);
      header.appendChild(titleDiv);
      var saveBtn = gObj.createElement("button");
      if (!isCustomFilter) {
        this.saveBtn = new Button({
          cssClass: this.parent.cssClass ? "e-primary e-flat e-res-apply-btn " + this.parent.cssClass : "e-primary e-flat e-res-apply-btn"
        });
        saveBtn.innerHTML = gObj.localeObj.getConstant(this.getButtonText(this.action));
        this.saveBtn.appendTo(saveBtn);
        saveBtn.onclick = function(e) {
          _this.dialogHdrBtnClickHandler();
        };
      }
      var isSort = this.action === ResponsiveDialogAction.isSort;
      var isFilter = this.action === ResponsiveDialogAction.isFilter;
      if (isFilter || isSort) {
        var id_1 = isSort ? "sort" : "filter";
        var clearBtn = gObj.createElement("button");
        this.filterClearBtn = new Button({
          cssClass: this.parent.cssClass ? "e-primary e-flat e-res-" + id_1 + "-clear-btn " + this.parent.cssClass : "e-primary e-flat e-res-" + id_1 + "-clear-btn"
        });
        if (isFilter) {
          var span = gObj.createElement("span", {
            className: "e-btn-icon e-icon-filter-clear e-icons"
          });
          clearBtn.appendChild(span);
        } else {
          clearBtn.innerHTML = gObj.localeObj.getConstant("Clear");
        }
        header.appendChild(clearBtn);
        this.filterClearBtn.appendTo(clearBtn);
        clearBtn.onclick = function(e) {
          if (parentsUntil(e.target, "e-customfilter")) {
            _this.parent.filterModule.clearFiltering();
            _this.removeCustomDlgFilterEle();
          } else {
            if (isFilter) {
              _this.filterClear();
            } else {
              _this.resetSortButtons();
              _this.sortedCols = [];
              _this.sortPredicate = [];
              _this.isSortApplied = true;
            }
          }
        };
        header.appendChild(clearBtn);
      }
      if (!isCustomFilter) {
        header.appendChild(saveBtn);
      }
      return header;
    };
    ResponsiveDialogRenderer2.prototype.filterClear = function() {
      this.parent.filterModule.filterModule.clearCustomFilter(this.filteredCol);
      this.parent.filterModule.filterModule.closeResponsiveDialog();
    };
    ResponsiveDialogRenderer2.prototype.removeCustomFilterElement = function() {
      var elem = document.getElementById(this.parent.element.id + "customcolumnmenu");
      if (elem) {
        remove(elem);
        var custom = document.querySelector(".e-customfilter");
        if (custom) {
          remove(custom);
        }
      }
      var custommenu = document.querySelector(".e-rescolumnchooser");
      if (custommenu) {
        remove(custommenu);
      }
    };
    ResponsiveDialogRenderer2.prototype.hideResponsiveColumnChooser = function() {
      var columnChooserElement = document.querySelector(".e-rescolumnchooser");
      if (columnChooserElement) {
        remove(columnChooserElement);
        this.isCustomDialog = false;
        this.isDialogClose = false;
      }
    };
    ResponsiveDialogRenderer2.prototype.dialogHdrBtnClickHandler = function() {
      if (this.action === ResponsiveDialogAction.isEdit || this.action === ResponsiveDialogAction.isAdd) {
        this.parent.endEdit();
      } else if (this.action === ResponsiveDialogAction.isFilter) {
        this.parent.filterModule.filterModule.applyCustomFilter({
          col: this.filteredCol,
          isCustomFilter: this.isCustomDlgRender
        });
        this.removeCustomFilterElement();
      } else if (this.action === ResponsiveDialogAction.isSort) {
        this.sortColumn();
        this.removeCustomFilterElement();
      } else if (this.action === ResponsiveDialogAction.isColumnChooser) {
        this.parent.notify(renderResponsiveColumnChooserDiv, {
          action: "confirm"
        });
        this.removeCustomFilterElement();
        this.isCustomDialog = false;
        this.isDialogClose = false;
      }
    };
    ResponsiveDialogRenderer2.prototype.closeCustomDialog = function() {
      if (this.isCustomDlgRender) {
        var mainfilterdiv = this.customResponsiveDlg.element.querySelector(".e-mainfilterdiv");
        remove(mainfilterdiv);
        return;
      }
      this.isRowResponsive = false;
      this.isCustomDlgRender = false;
      this.destroyCustomFilterDialog();
    };
    ResponsiveDialogRenderer2.prototype.destroyCustomFilterDialog = function() {
      if (!this.customResponsiveDlg) {
        return;
      }
      var elem = document.getElementById(this.customResponsiveDlg.element.id);
      if (this.customResponsiveDlg && !this.customResponsiveDlg.isDestroyed && elem) {
        this.customResponsiveDlg.destroy();
        remove(elem);
      }
      this.closeCustomFilter();
      if (this.action === ResponsiveDialogAction.isSort) {
        this.sortPredicate = [];
        this.sortedCols = [];
        this.isSortApplied = false;
      }
    };
    ResponsiveDialogRenderer2.prototype.closeCustomFilter = function() {
      if (!this.isDialogClose && this.customFilterDlg) {
        var customEle = document.getElementById(this.customFilterDlg.element.id);
        if (this.customFilterDlg && !this.customFilterDlg.isDestroyed && customEle) {
          this.customFilterDlg.destroy();
          remove(customEle);
        }
      }
      this.isCustomDialog = false;
      this.isDialogClose = false;
    };
    ResponsiveDialogRenderer2.prototype.removeCustomDlgFilterEle = function(target) {
      if (target) {
        if (target.parentElement.classList.contains("e-filtersetdiv")) {
          remove(target.parentElement);
        } else {
          remove(target);
        }
      } else {
        var child = this.customColumnDiv.children;
        for (var i = 0; i < child.length; i++) {
          target = child[parseInt(i.toString(), 10)].querySelector(".e-filtersetdiv");
          if (target) {
            remove(target);
            i--;
          }
        }
      }
    };
    ResponsiveDialogRenderer2.prototype.keyHandler = function(e) {
      if (e.keyCode === 13 && (this.action === ResponsiveDialogAction.isFilter && e.target.classList.contains("e-searchinput") || this.action === ResponsiveDialogAction.isEdit || this.action === ResponsiveDialogAction.isAdd)) {
        this.dialogHdrBtnClickHandler();
      }
    };
    ResponsiveDialogRenderer2.prototype.editComplate = function(args) {
      if (args.requestType === "save" || args.requestType === "cancel") {
        this.parent.off(enterKeyHandler, this.keyHandler);
      }
    };
    ResponsiveDialogRenderer2.prototype.removeEventListener = function() {
      if (this.customColumnDiv) {
        EventHandler.remove(this.customColumnDiv, Browser.isDevice ? "touchend" : "click", this.customFilterColumnClickHandler);
      }
      addRemoveEventListener(this.parent, this.evtHandlers, true, this);
      this.parent.removeEventListener(actionComplete, this.onActionCompleteFn);
    };
    return ResponsiveDialogRenderer2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/services/service-locator.js
var ServiceLocator = (
  /** @class */
  function() {
    function ServiceLocator2() {
      this.services = {};
    }
    ServiceLocator2.prototype.register = function(name, type) {
      if (isNullOrUndefined(this.services["" + name])) {
        this.services["" + name] = type;
      }
    };
    ServiceLocator2.prototype.getService = function(name) {
      if (isNullOrUndefined(this.services["" + name])) {
        throw "The service " + name + " is not registered";
      }
      return this.services["" + name];
    };
    ServiceLocator2.prototype.registerAdaptiveService = function(type, isAdaptiveUI, action) {
      if (isAdaptiveUI) {
        type.responsiveDialogRenderer = new ResponsiveDialogRenderer(type.parent, type.serviceLocator);
        type.responsiveDialogRenderer.action = action;
      } else {
        if (type.responsiveDialogRenderer) {
          type.responsiveDialogRenderer.removeEventListener();
          type.responsiveDialogRenderer = void 0;
        }
      }
    };
    return ServiceLocator2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/services/renderer-factory.js
var RendererFactory = (
  /** @class */
  function() {
    function RendererFactory2() {
      this.rendererMap = {};
    }
    RendererFactory2.prototype.addRenderer = function(name, type) {
      var rName = getEnumValue(RenderType, name);
      if (isNullOrUndefined(this.rendererMap["" + rName])) {
        this.rendererMap["" + rName] = type;
      }
    };
    RendererFactory2.prototype.getRenderer = function(name) {
      var rName = getEnumValue(RenderType, name);
      if (isNullOrUndefined(this.rendererMap["" + rName])) {
        throw "The renderer " + rName + " is not found";
      } else {
        return this.rendererMap["" + rName];
      }
    };
    return RendererFactory2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/services/width-controller.js
var ColumnWidthService = (
  /** @class */
  function() {
    function ColumnWidthService2(parent) {
      this.parent = parent;
    }
    ColumnWidthService2.prototype.setWidthToColumns = function() {
      var i = 0;
      var indexes = this.parent.getColumnIndexesInView();
      var wFlag = true;
      var totalColumnsWidth = 0;
      if (this.parent.allowGrouping) {
        for (var len = this.parent.groupSettings.columns.length; i < len; i++) {
          if (this.parent.enableColumnVirtualization && indexes.indexOf(i) === -1) {
            wFlag = false;
            continue;
          }
          this.setColumnWidth(new Column({
            width: "30px"
          }), i);
        }
      }
      if (this.parent.detailTemplate || this.parent.childGrid) {
        this.setColumnWidth(new Column({
          width: "30px"
        }), i);
        i++;
      }
      if (this.parent.isRowDragable() && this.parent.getFrozenMode() !== "Right") {
        this.setColumnWidth(new Column({
          width: "30px"
        }), i);
        i++;
      }
      var columns = this.parent.getColumns();
      for (var j = 0; j < columns.length; j++) {
        this.setColumnWidth(columns[parseInt(j.toString(), 10)], wFlag && this.parent.enableColumnVirtualization ? void 0 : j + i);
      }
      if (this.parent.isRowDragable() && this.parent.getFrozenMode() === "Right") {
        this.setColumnWidth(new Column({
          width: "30px"
        }), this.parent.groupSettings.columns.length + columns.length);
      }
      totalColumnsWidth = this.getTableWidth(this.parent.getColumns());
      if (totalColumnsWidth !== "auto") {
        if (this.parent.width !== "auto" && this.parent.width.toString().indexOf("%") === -1) {
          this.setMinwidthBycalculation(totalColumnsWidth);
        }
        var maxWidthColumns = columns.filter(function(a) {
          return !isNullOrUndefined(a.maxWidth);
        });
        var header = this.parent.getHeaderTable();
        var content2 = this.parent.getContentTable();
        if (this.parent.allowResizing && this.parent.element.getBoundingClientRect().width > totalColumnsWidth && maxWidthColumns.length === columns.length && header && content2) {
          addClass([header, content2], ["e-tableborder"]);
        }
      }
    };
    ColumnWidthService2.prototype.setMinwidthBycalculation = function(tWidth) {
      var _this = this;
      var difference = 0;
      var collection = this.parent.getColumns().filter(function(a) {
        if (_this.parent.allowResizing) {
          return (isNullOrUndefined(a.width) || a.width === "auto") && isNullOrUndefined(a.maxWidth);
        } else {
          return isNullOrUndefined(a.width) || a.width === "auto";
        }
      });
      if (collection.length) {
        if (!isNullOrUndefined(this.parent.width) && this.parent.width !== "auto" && typeof this.parent.width === "string" && this.parent.width.indexOf("%") === -1) {
          difference = parseInt(this.parent.width, 10) - tWidth;
        } else {
          difference = this.parent.element.getBoundingClientRect().width - tWidth;
        }
        var tmWidth = 0;
        for (var _i = 0, collection_1 = collection; _i < collection_1.length; _i++) {
          var cols = collection_1[_i];
          tmWidth += !isNullOrUndefined(cols.minWidth) ? typeof cols.minWidth === "string" ? parseInt(cols.minWidth, 10) : cols.minWidth : 0;
        }
        for (var i = 0; i < collection.length; i++) {
          if (tWidth === 0 && this.parent.allowResizing && this.isWidthUndefined() && i !== collection.length - 1) {
            this.setUndefinedColumnWidth(collection);
          }
          var index = this.parent.getColumnIndexByField(collection[parseInt(i.toString(), 10)].field) + this.parent.getIndentCount();
          if (tWidth !== 0 && difference < tmWidth) {
            this.setWidth(collection[parseInt(i.toString(), 10)].minWidth, index);
          } else if (tWidth !== 0 && difference > tmWidth) {
            this.setWidth("", index, true);
          }
        }
      }
    };
    ColumnWidthService2.prototype.setUndefinedColumnWidth = function(collection) {
      for (var k = 0; k < collection.length; k++) {
        if (k !== collection.length - 1) {
          collection[parseInt(k.toString(), 10)].width = 200;
          this.setWidth(200, this.parent.getColumnIndexByField(collection[parseInt(k.toString(), 10)].field));
        }
      }
    };
    ColumnWidthService2.prototype.setColumnWidth = function(column, index, module) {
      if (this.parent.getColumns().length < 1) {
        return;
      }
      var columnIndex = isNullOrUndefined(index) ? this.parent.getNormalizedColumnIndex(column.uid) : index;
      var cWidth = this.getWidth(column);
      var tgridWidth = this.getTableWidth(this.parent.getColumns());
      if (cWidth !== null) {
        this.setWidth(cWidth, columnIndex);
        if (this.parent.width !== "auto" && this.parent.width.toString().indexOf("%") === -1 && tgridWidth !== "auto") {
          this.setMinwidthBycalculation(tgridWidth);
        }
        if (this.parent.allowResizing && (module === "resize" || this.parent.getFrozenColumns())) {
          var contentTable = this.parent.getContentTable();
          this.setWidthToTable(this.parent.getFrozenColumns() && contentTable.style.width.indexOf("px") === -1 && tgridWidth < contentTable.clientWidth);
        }
        this.parent.notify(columnWidthChanged, {
          index: columnIndex,
          width: cWidth,
          column,
          module
        });
      }
    };
    ColumnWidthService2.prototype.setWidth = function(width, index, clear) {
      if (this.parent.groupSettings.columns.length > index && ispercentageWidth(this.parent) && !(this.parent.resizeModule && this.parent.resizeModule.resizeProcess)) {
        var elementWidth = this.parent.element.offsetWidth;
        width = (30 / elementWidth * 100).toFixed(1) + "%";
      }
      var header = this.parent.getHeaderTable();
      var content2 = this.parent.getContentTable();
      var fWidth = formatUnit(width);
      var headerCol = header.querySelector(colGroup).children[parseInt(index.toString(), 10)];
      if (headerCol && !clear) {
        headerCol.style.width = fWidth;
      } else if (headerCol && clear) {
        headerCol.style.width = "";
      }
      var contentCol = content2.querySelector(colGroup).children[parseInt(index.toString(), 10)];
      if (contentCol && !clear) {
        contentCol.style.width = fWidth;
      } else if (contentCol && clear) {
        contentCol.style.width = "";
      }
      if (!this.parent.enableColumnVirtualization && this.parent.isEdit) {
        var edit = this.parent.element.querySelectorAll(".e-table.e-inline-edit");
        var editTableCol = [];
        for (var i = 0; i < edit.length; i++) {
          if (parentsUntil(edit[parseInt(i.toString(), 10)], "e-grid").id === this.parent.element.id) {
            for (var j = 0; j < edit[parseInt(i.toString(), 10)].querySelector("colgroup").children.length; j++) {
              editTableCol.push(edit[parseInt(i.toString(), 10)].querySelector("colgroup").children[parseInt(j.toString(), 10)]);
            }
          }
        }
        if (edit.length && editTableCol.length && editTableCol[parseInt(index.toString(), 10)]) {
          editTableCol[parseInt(index.toString(), 10)].style.width = fWidth;
        }
      }
      if (this.parent.isFrozenGrid() && this.parent.enableColumnVirtualization) {
        this.refreshFrozenScrollbar();
      }
    };
    ColumnWidthService2.prototype.refreshFrozenScrollbar = function() {
      var args = {
        cancel: false
      };
      this.parent.notify(preventFrozenScrollRefresh, args);
      if (args.cancel) {
        return;
      }
      var scrollWidth2 = getScrollBarWidth();
      var movableScrollbar = this.parent.element.querySelector(".e-movablescrollbar");
      var movableWidth = this.parent.getContent().firstElementChild.getBoundingClientRect().width;
      if (this.parent.enableColumnVirtualization) {
        var placeHolder = this.parent.getContent().querySelector(".e-virtualtrack");
        if (placeHolder) {
          movableWidth = placeHolder.scrollWidth;
        }
      }
      if (this.parent.height !== "auto") {
        movableWidth = movableWidth + scrollWidth2;
      }
      movableScrollbar.firstElementChild.style.width = movableWidth + "px";
    };
    ColumnWidthService2.prototype.getSiblingsHeight = function(element) {
      var previous = this.getHeightFromDirection(element, "previous");
      var next = this.getHeightFromDirection(element, "next");
      return previous + next;
    };
    ColumnWidthService2.prototype.getHeightFromDirection = function(element, direction) {
      var sibling = element[direction + "ElementSibling"];
      var result = 0;
      var classList2 = [gridHeader, gridFooter, "e-groupdroparea", "e-gridpager", "e-toolbar", "e-temp-toolbar"];
      while (sibling) {
        if (classList2.some(function(value) {
          return sibling.classList.contains(value);
        })) {
          result += sibling.offsetHeight;
        }
        sibling = sibling[direction + "ElementSibling"];
      }
      return result;
    };
    ColumnWidthService2.prototype.isWidthUndefined = function() {
      var isWidUndefCount = this.parent.getColumns().filter(function(col) {
        return isNullOrUndefined(col.width) && isNullOrUndefined(col.minWidth);
      }).length;
      return this.parent.getColumns().length === isWidUndefCount;
    };
    ColumnWidthService2.prototype.getWidth = function(column) {
      if (this.parent.allowResizing && isNullOrUndefined(column.width)) {
        if (isNullOrUndefined(column.minWidth) && isNullOrUndefined(column.maxWidth) && !this.isWidthUndefined()) {
          column.width = 200;
        } else if (column.maxWidth) {
          column.width = column.maxWidth;
        }
      }
      if (!column.width) {
        return null;
      }
      var width = parseInt(column.width.toString(), 10);
      if (column.minWidth && width < parseInt(column.minWidth.toString(), 10)) {
        return column.minWidth;
      } else if (column.maxWidth && width > parseInt(column.maxWidth.toString(), 10)) {
        return column.maxWidth;
      } else {
        return column.width;
      }
    };
    ColumnWidthService2.prototype.getTableWidth = function(columns, resetIndentWidth) {
      var tWidth = 0;
      var isAutoColumn = false;
      for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
        var column = columns_1[_i];
        if (column.visible !== false) {
          var cWidth = this.getWidth(column);
          if (column.width === "auto" || !column.width) {
            if (this.parent.allowResizing && !resetIndentWidth) {
              if (!column.maxWidth) {
                isAutoColumn = true;
              }
            } else {
              cWidth = 0;
            }
          }
          if (cWidth !== null) {
            tWidth += parseInt(cWidth.toString(), 10);
          }
        }
      }
      tWidth = isAutoColumn ? "auto" : tWidth;
      return tWidth;
    };
    ColumnWidthService2.prototype.setWidthToTable = function(isMaxWidth) {
      var tWidth = formatUnit(this.getTableWidth(this.parent.getColumns()));
      if (this.parent.detailTemplate || this.parent.childGrid) {
        this.setColumnWidth(new Column({
          width: "30px"
        }));
      }
      tWidth = this.isAutoResize() || tWidth === "auto" || isMaxWidth ? "100%" : tWidth;
      this.parent.getHeaderTable().style.width = tWidth;
      this.parent.getContentTable().style.width = tWidth;
      var edit = this.parent.element.querySelector(".e-table.e-inline-edit");
      if (edit) {
        edit.style.width = tWidth;
      }
    };
    ColumnWidthService2.prototype.isAutoResize = function() {
      return this.parent.allowResizing && this.parent.resizeSettings.mode === "Auto";
    };
    return ColumnWidthService2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/services/focus-strategy.js
var __extends13 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var FocusStrategy = (
  /** @class */
  function() {
    function FocusStrategy2(parent) {
      this.currentInfo = {};
      this.oneTime = true;
      this.swap = {};
      this.isInfiniteScroll = false;
      this.virtualSelectionInfo = {};
      this.forget = false;
      this.skipFocus = true;
      this.focusByClick = false;
      this.firstHeaderCellClick = false;
      this.prevIndexes = {};
      this.refMatrix = this.refreshMatrix(true);
      this.actions = ["downArrow", "upArrow"];
      this.isVirtualScroll = false;
      this.groupedFrozenRow = 0;
      this.parent = parent;
      this.rowModelGen = new RowModelGenerator(this.parent);
      this.addEventListener();
    }
    FocusStrategy2.prototype.focusCheck = function(e) {
      var target = e.target;
      this.focusByClick = true;
      this.firstHeaderCellClick = true;
      this.skipFocus = target.classList.contains("e-grid");
    };
    FocusStrategy2.prototype.onFocus = function(e) {
      if (this.parent.isDestroyed || Browser.isDevice || this.parent.enableVirtualization || this.parent.element.querySelector(".e-masked-table") || !this.parent.isInitialLoad && e && e.target === this.parent.element && this.parent.element.querySelector(".e-spin-show")) {
        return;
      }
      this.setActive(!this.parent.enableHeaderFocus && this.parent.frozenRows === 0);
      if (!this.parent.enableHeaderFocus && !this.parent.getCurrentViewRecords().length && (this.parent.editSettings.mode !== "Batch" || this.parent.editSettings.mode === "Batch" && this.parent.editModule && !this.parent.editModule.getBatchChanges()[addedRecords].length)) {
        this.getContent().matrix.generate(this.rowModelGen.generateRows({
          rows: [new Row({
            isDataRow: true
          })]
        }), this.getContent().selector, false);
      }
      var current = this.getContent().matrix.get(0, -1, [0, 1], null, this.getContent().validator(), this.active);
      this.getContent().matrix.select(current[0], current[1]);
      if (this.skipFocus && !(e && e.target === this.parent.element)) {
        this.focus(e);
        this.skipFocus = false;
      }
    };
    FocusStrategy2.prototype.passiveFocus = function(e) {
      if (this.parent.isDestroyed) {
        return;
      }
      var firstHeaderCell = this.parent.getHeaderContent().querySelector(".e-headercell:not(.e-hide)");
      if (e.target === firstHeaderCell && e.relatedTarget && !parentsUntil(e.relatedTarget, "e-grid") && !this.firstHeaderCellClick) {
        var firstHeaderCellIndex = [0, 0];
        if (this.active.matrix.matrix[firstHeaderCellIndex[0]][firstHeaderCellIndex[1]] === 0) {
          firstHeaderCellIndex = findCellIndex(this.active.matrix.matrix, firstHeaderCellIndex, true);
        }
        this.active.matrix.current = firstHeaderCellIndex;
        this.currentInfo.element = e.target;
        this.currentInfo.elementToFocus = e.target;
        if (this.currentInfo.element.querySelector(".e-checkselectall")) {
          this.removeFocus();
          this.addFocus(this.getContent().getFocusInfo(), e);
        } else {
          addClass([this.currentInfo.element], ["e-focused", "e-focus"]);
        }
      }
      this.firstHeaderCellClick = false;
      if (e.target && e.target.classList.contains("e-detailcell")) {
        this.currentInfo.skipAction = false;
        addClass([this.currentInfo.element], ["e-focused", "e-focus"]);
      }
    };
    FocusStrategy2.prototype.onBlur = function(e) {
      if (this.parent.allowPaging && this.parent.pagerModule.pagerObj.element.querySelector(".e-pagercontainer")) {
        this.parent.pagerModule.pagerObj.element.querySelector(".e-pagercontainer").removeAttribute("aria-hidden");
      }
      var isGantt = parentsUntil(e.target, "e-gantt") && e.target.classList.contains("e-rowcell") && !isNullOrUndefined(e.target.nextElementSibling) && e.target.nextElementSibling.classList.contains("e-rowcell") ? true : false;
      if ((this.parent.isEdit || e && (!e.relatedTarget || closest(e.relatedTarget, ".e-grid") || closest(e.relatedTarget, ".e-grid-popup")) && !(this.parent.element.classList.contains("e-childgrid") && !this.parent.element.matches(":focus-within"))) && !(!isGantt && isNullOrUndefined(e.relatedTarget) && parseInt(e.target.getAttribute("aria-colindex"), 10) - 1 === 0 && parseInt(e.target.getAttribute("index"), 10) === 0) && !(!isGantt && isNullOrUndefined(e.relatedTarget) && !closest(document.activeElement, ".e-grid") && !isNullOrUndefined(e["sourceCapabilities"]))) {
        return;
      }
      this.removeFocus();
      this.skipFocus = true;
      this.currentInfo.skipAction = false;
      this.setLastContentCellTabIndex();
      this.setFirstFocusableTabIndex();
      this.firstHeaderCellClick = false;
    };
    FocusStrategy2.prototype.setFirstFocusableTabIndex = function() {
      var gObj = this.parent;
      gObj.element.tabIndex = -1;
      if (gObj.allowGrouping && gObj.groupSettings.showDropArea) {
        var groupModule = gObj.groupModule;
        var focusableGroupedItems = groupModule.getFocusableGroupedItems();
        if (focusableGroupedItems.length > 0) {
          groupModule.element.tabIndex = -1;
          focusableGroupedItems[0].tabIndex = 0;
        } else {
          groupModule.element.tabIndex = 0;
        }
        return;
      }
      if (gObj.toolbar || gObj.toolbarTemplate) {
        var toolbarElement = gObj.toolbarModule.element;
        var focusableToolbarItems = this.parent.toolbarModule.getFocusableToolbarItems();
        if (focusableToolbarItems.length > 0 && focusableToolbarItems[0].querySelector(".e-toolbar-item-focus,.e-btn,.e-input")) {
          toolbarElement.tabIndex = -1;
          focusableToolbarItems[0].querySelector(".e-toolbar-item-focus,.e-btn,.e-input").tabIndex = 0;
        } else {
          toolbarElement.tabIndex = 0;
        }
        return;
      }
      if (gObj.getColumns().length) {
        var firstHeaderCell = gObj.getHeaderContent().querySelector(".e-headercell:not(.e-hide)");
        firstHeaderCell.tabIndex = 0;
        this.setActive(false);
        if (!isNullOrUndefined(this.active) && (isNullOrUndefined(this.active.target) || !this.active.target.classList.contains("e-columnmenu"))) {
          var firstHeaderCellIndex = [0, 0];
          if (this.active.matrix.matrix[firstHeaderCellIndex[0]][firstHeaderCellIndex[1]] === 0) {
            firstHeaderCellIndex = findCellIndex(this.active.matrix.matrix, firstHeaderCellIndex, true);
          }
          this.active.matrix.current = firstHeaderCellIndex;
        }
        return;
      }
    };
    FocusStrategy2.prototype.setLastContentCellTabIndex = function() {
      var contentTable = this.parent.getContentTable();
      if (contentTable.rows[contentTable.rows.length - 1]) {
        var lastCell = contentTable.rows[contentTable.rows.length - 1].lastElementChild;
        lastCell.tabIndex = 0;
      }
    };
    FocusStrategy2.prototype.onClick = function(e, force, isFocusFirstCell) {
      if (parentsUntil(e.target, "e-filterbarcell") && (parentsUntil(e.target, "e-multiselect") || e.target.classList.contains("e-input-group-icon"))) {
        return;
      }
      var isContent = !isNullOrUndefined(closest(e.target, "." + gridContent));
      var isHeader = !isNullOrUndefined(closest(e.target, "." + gridHeader));
      isContent = isContent && isHeader ? !isContent : isContent;
      if (!isContent && isNullOrUndefined(closest(e.target, "." + gridHeader)) || e.target.classList.contains(content) || e.target.classList.contains(headerContent) || !isNullOrUndefined(closest(e.target, ".e-unboundcell")) && !force) {
        return;
      }
      this.setActive(isContent);
      var beforeArgs = {
        cancel: false,
        byKey: false,
        byClick: !isNullOrUndefined(e.target),
        clickArgs: e
      };
      this.parent.notify(beforeCellFocused, beforeArgs);
      if (beforeArgs.cancel || closest(e.target, ".e-inline-edit") && !this.parent.editSettings.showAddNewRow && this.parent.editSettings.showAddNewRow && !this.parent.element.querySelector(".e-editedrow")) {
        return;
      }
      this.setActive(isContent);
      if (this.getContent()) {
        var returnVal = this.getContent().onClick(e, force);
        if (returnVal === false) {
          return;
        }
        this.focus();
        if (this.currentInfo.element.classList.contains("e-rowcell") && e.type && e.type === "click" && !isFocusFirstCell) {
          addClass([this.currentInfo.element], ["e-focused", "e-focus"]);
        }
        if (isFocusFirstCell && e && e.target) {
          addClass([e.target], ["e-focused", "e-focus"]);
        }
      }
    };
    FocusStrategy2.prototype.handleFilterNavigation = function(e, inputSelector, buttonSelector) {
      if (e.target === document.querySelector(inputSelector) && e.key === "Tab" && e.shiftKey) {
        e.preventDefault();
        document.querySelector(buttonSelector).focus();
      } else if (e.target === document.querySelector(buttonSelector) && e.key === "Tab" && !e.shiftKey && document.activeElement === document.querySelector(buttonSelector)) {
        e.preventDefault();
        document.querySelector(inputSelector).focus();
      }
    };
    FocusStrategy2.prototype.onKeyPress = function(e) {
      if (this.content && this.content.target) {
        this.content.target = null;
      }
      if (this.parent.allowPaging) {
        var pagerElement = this.parent.pagerModule.pagerObj.element;
        var focusablePagerElements = this.parent.pagerModule.pagerObj.getFocusablePagerElements(pagerElement, []);
        if (this.parent.childGrid && !parentsUntil(e.target, "e-gridpager") && this.allowToPaging(e) && focusablePagerElements.length) {
          focusablePagerElements[0].tabIndex = 0;
        }
        if (this.parent.pagerModule.pagerObj.checkPagerHasFocus()) {
          if (e.action === "shiftTab" && focusablePagerElements.length && focusablePagerElements[0] === e.target) {
            this.setActive(true);
            var lastHeaderCellIndex = [this.active.matrix.matrix.length - 1, this.active.matrix.matrix[this.active.matrix.matrix.length - 1].length - 1];
            if (this.active.matrix.matrix[lastHeaderCellIndex[0]][lastHeaderCellIndex[1]] === 0) {
              lastHeaderCellIndex = findCellIndex(this.active.matrix.matrix, lastHeaderCellIndex, false);
            }
            this.active.matrix.current = this.parent.editSettings.mode === "Batch" ? this.isValidBatchEditCell(lastHeaderCellIndex) ? lastHeaderCellIndex : this.findBatchEditCell(lastHeaderCellIndex, false) : lastHeaderCellIndex;
            e.preventDefault();
            this.focus(e);
            return;
          }
          if (!(e.action === "tab" && this.parent.element.classList.contains("e-childgrid") && (!this.parent.pageSettings.pageSizes && focusablePagerElements.length && focusablePagerElements[focusablePagerElements.length - 1] === e.target || this.parent.pagerModule.pagerObj.getDropDownPage() === e.target))) {
            this.parent.pagerModule.pagerObj.changePagerFocus(e);
            return;
          } else {
            var parentCell = parentsUntil(this.parent.element, "e-detailcell");
            removeClass([this.parent.element], ["e-focus"]);
            removeClass([parentCell], ["e-focused"]);
            parentCell.tabIndex = -1;
          }
        }
        if (this.parent.pagerModule.pagerObj.element.tabIndex === 0 && (e.keyCode === 38 || e.shiftKey && e.keyCode === 9)) {
          e.preventDefault();
          this.focus(e);
          return;
        } else if (this.parent.pagerModule.pagerObj.element.tabIndex === 0 && e.keyCode === 9) {
          e.preventDefault();
          this.parent.pagerModule.pagerObj.setPagerFocus();
          return;
        }
        if (this.parent.pagerModule.pagerObj.checkFirstPagerFocus()) {
          var lastRow = this.getContent().matrix.rows;
          var lastColumn = this.getContent().matrix.columns;
          this.getContent().matrix.current = [lastRow, lastColumn];
        }
      }
      if (this.parent.filterSettings.type === "Excel") {
        this.handleFilterNavigation(e, ".e-excelfilter .e-menu-item:not(.e-disabled)", ".e-excelfilter .e-footer-content button:nth-child(2)");
      }
      if (this.parent.filterSettings.type === "CheckBox") {
        var focusedColumn = this.parent.getColumnByUid(this.focusedColumnUid);
        var focusTarget = focusedColumn && focusedColumn.filter && focusedColumn.filter.hideSearchbox ? ".e-chk-hidden" : ".e-searchinput.e-input";
        this.handleFilterNavigation(e, focusTarget, ".e-checkboxfilter .e-footer-content button:nth-child(2)");
      }
      if (this.parent.filterSettings.type === "Menu") {
        this.handleFilterNavigation(e, ".e-flmenu .e-input-group.e-popup-flmenu", ".e-flmenu .e-footer-content button:nth-child(2)");
      }
      if (this.parent.showColumnChooser) {
        this.handleFilterNavigation(e, ".e-ccdlg .e-ccsearch.e-cc.e-input", ".e-ccdlg .e-footer-content button:nth-child(2)");
      }
      if (this.skipOn(e)) {
        return;
      }
      if (e.target && parentsUntil(e.target, "e-gridcontent")) {
        var rows = [].slice.call(this.parent.getContentTable().rows);
        var lastCell = rows[rows.length - 1].lastElementChild;
        if (e.target === lastCell) {
          this.setActive(true);
          this.setLastContentCellActive();
        }
      }
      if (e.action === "shiftTab" && e.target && (e.target === this.parent.element || parentsUntil(e.target, "e-toolbar") || parentsUntil(e.target, "e-groupdroparea"))) {
        if (e.target === this.parent.element) {
          if (this.parent.element.classList.contains("e-childgrid")) {
            this.focusOutFromChildGrid(e);
          }
          return;
        }
        if (parentsUntil(e.target, "e-groupdroparea")) {
          if (this.parent.element.classList.contains("e-childgrid")) {
            e.preventDefault();
            this.parent.element.focus();
          }
          return;
        }
        if (parentsUntil(e.target, "e-toolbar")) {
          if (this.parent.allowGrouping && this.parent.groupSettings.showDropArea) {
            var groupModule = this.parent.groupModule;
            var focusableGroupedItems = groupModule.getFocusableGroupedItems();
            e.preventDefault();
            if (focusableGroupedItems.length > 0) {
              focusableGroupedItems[focusableGroupedItems.length - 1].focus();
            } else {
              groupModule.element.focus();
            }
          } else if (this.parent.element.classList.contains("e-childgrid")) {
            e.preventDefault();
            this.parent.element.focus();
          }
          return;
        }
      }
      var focusFirstHeaderCell = false;
      if (e.action === "tab" && e.target && (e.target === this.parent.element || parentsUntil(e.target, "e-toolbar") || parentsUntil(e.target, "e-groupdroparea"))) {
        if (this.parent.allowGrouping && this.parent.groupSettings.showDropArea && (e.target === this.parent.element || e.target.classList.contains("e-groupdroparea"))) {
          var groupModule = this.parent.groupModule;
          var focusableGroupedItems = groupModule.getFocusableGroupedItems();
          if (focusableGroupedItems.length > 0) {
            e.preventDefault();
            focusableGroupedItems[0].focus();
            return;
          }
          if (!e.target.classList.contains("e-groupdroparea")) {
            e.preventDefault();
            groupModule.element.focus();
            return;
          }
        }
        if ((this.parent.toolbar || this.parent.toolbarTemplate) && (e.target === this.parent.element || parentsUntil(e.target, "e-groupdroparea") || e.target.classList.contains("e-toolbar"))) {
          var toolbarElement = this.parent.toolbarModule.element;
          var focusableToolbarItems = this.parent.toolbarModule.getFocusableToolbarItems();
          if (focusableToolbarItems.length > 0) {
            e.preventDefault();
            focusableToolbarItems[0].querySelector(".e-toolbar-item-focus,.e-btn,.e-input").focus();
            return;
          }
          if (!e.target.classList.contains("e-toolbar")) {
            e.preventDefault();
            toolbarElement.focus();
            return;
          }
        }
        if (e.target === this.parent.element || parentsUntil(e.target, "e-toolbar") || parentsUntil(e.target, "e-groupdroparea")) {
          focusFirstHeaderCell = true;
        }
      }
      if (focusFirstHeaderCell) {
        if (this.parent.allowGrouping && !isNullOrUndefined(this.parent.groupSettings.columns) && this.parent.groupSettings.columns.length === this.parent.columns.length) {
          this.setActive(true);
        } else {
          this.setActive(false);
        }
        this.active.matrix.current = [0, -1];
      }
      this.activeKey = e.action;
      var beforeArgs = {
        cancel: false,
        byKey: true,
        byClick: false,
        keyArgs: e
      };
      this.parent.notify(beforeCellFocused, beforeArgs);
      if (beforeArgs.cancel) {
        return;
      }
      var bValue = this.getContent().matrix.current;
      var prevBatchValue = this.active && this.active.matrix.current ? [this.active.matrix.current[0], this.active.matrix.current[1]] : void 0;
      this.currentInfo.outline = true;
      var swapInfo = this.getContent().jump(e.action, bValue);
      this.swap = swapInfo;
      if (swapInfo.swap && !(this.parent.editSettings.mode === "Batch" && (e.action === "tab" || e.action === "shiftTab"))) {
        this.setActive(!swapInfo.toHeader);
        this.getContent().matrix.current = this.getContent().getNextCurrent(bValue, swapInfo, this.active, e.action);
        this.prevIndexes = {};
      }
      this.setActiveByKey(e.action, this.getContent());
      var returnVal = this.content.lastIdxCell ? false : this.getContent().onKeyPress(e);
      if (e.target && parentsUntil(e.target, "e-gridheader")) {
        if (e.action === "tab" && bValue.toString() === this.active.matrix.current.toString()) {
          var nextHeaderCellIndex = findCellIndex(this.active.matrix.matrix, this.active.matrix.current, true);
          var lastHeaderCellIndex = [this.active.matrix.matrix.length - 1, this.active.matrix.matrix[this.active.matrix.matrix.length - 1].length - 1];
          if (this.active.matrix.matrix[lastHeaderCellIndex[0]][lastHeaderCellIndex[1]] === 0) {
            lastHeaderCellIndex = findCellIndex(this.active.matrix.matrix, lastHeaderCellIndex, false);
          }
          var nextCell = getValue(nextHeaderCellIndex[0] + ".cells." + nextHeaderCellIndex[1], this.active.matrix.getRowsFromIndex(nextHeaderCellIndex[0], this.active));
          if (nextCell && nextCell.getBoundingClientRect().width === 0 && this.active.matrix.matrix.length - 1 === nextHeaderCellIndex[0]) {
            lastHeaderCellIndex = this.active.matrix.nextVisibleCellFocus(nextHeaderCellIndex[0], nextHeaderCellIndex[1], e.action, this.active.keyActions[e.action], this.active, this.active.matrix.current[1]);
          }
          if (this.active.matrix.current.toString() === lastHeaderCellIndex.toString() && this.content.matrix.matrix.length) {
            returnVal = true;
            this.setActive(true);
            var firstContentCellIndex = [0, 0];
            if (this.parent.allowPaging && this.parent.pagerModule.pagerObj.element.querySelector(".e-pagercontainer")) {
              this.parent.pagerModule.pagerObj.element.querySelector(".e-pagercontainer").setAttribute("aria-hidden", "true");
            }
            if (this.active.matrix.matrix[firstContentCellIndex[0]][firstContentCellIndex[1]] === 0) {
              firstContentCellIndex = findCellIndex(this.active.matrix.matrix, [0, 0], true);
            }
            var firstCell = getValue(firstContentCellIndex[0] + ".cells." + firstContentCellIndex[1], this.active.matrix.getRowsFromIndex(firstContentCellIndex[0], this.active));
            if (firstCell && firstCell.getBoundingClientRect().width === 0) {
              firstContentCellIndex = this.active.matrix.nextVisibleCellFocus(firstContentCellIndex[0], firstContentCellIndex[1], e.action, this.active.keyActions[e.action], this.active, this.active.matrix.current[1]);
            }
            this.active.matrix.current = this.parent.editSettings.mode === "Batch" ? this.isValidBatchEditCell(firstContentCellIndex) ? firstContentCellIndex : this.findBatchEditCell(firstContentCellIndex, true) : firstContentCellIndex;
            if (this.parent.enableVirtualization && !this.parent.enableColumnVirtualization && this.parent.contentModule.prevInfo.blockIndexes[0] !== 1) {
              e.preventDefault();
              this.removeFocus();
              var virtual = this.parent.contentModule;
              virtual.firstCellFocus = true;
              virtual.content.scrollTop = 0;
              return;
            }
          } else if (this.active.matrix.current.toString() !== nextHeaderCellIndex.toString()) {
            this.active.matrix.current = nextHeaderCellIndex;
          }
        }
        if (e.action === "shiftTab" && bValue.toString() === this.active.matrix.current.toString()) {
          var previousCellIndex = findCellIndex(this.active.matrix.matrix, this.active.matrix.current, false);
          var prevCell = getValue(previousCellIndex[0] + ".cells." + previousCellIndex[1], this.active.matrix.getRowsFromIndex(previousCellIndex[0], this.active));
          if (prevCell && prevCell.getBoundingClientRect().width === 0 && previousCellIndex[0] === 0) {
            previousCellIndex = this.active.matrix.nextVisibleCellFocus(previousCellIndex[0], previousCellIndex[1], e.action, this.active.keyActions[e.action], this.active, this.active.matrix.current[1]);
          }
          if (previousCellIndex.toString() === this.active.matrix.current.toString()) {
            this.focusOutFromHeader(e);
            return;
          }
          if (this.active.matrix.current.toString() !== previousCellIndex.toString() && !returnVal) {
            returnVal = true;
            var prevCell_1 = getValue(previousCellIndex[0] + ".cells." + previousCellIndex[1], this.active.matrix.getRowsFromIndex(previousCellIndex[0], this.active));
            if (prevCell_1 && prevCell_1.getBoundingClientRect().width === 0 && previousCellIndex[0] === 0) {
              previousCellIndex = this.active.matrix.nextVisibleCellFocus(previousCellIndex[0], previousCellIndex[1], e.action, this.active.keyActions[e.action], this.active, this.active.matrix.current[1]);
            }
            this.active.matrix.current = previousCellIndex;
          }
        }
      }
      if (e.target && parentsUntil(e.target, "e-gridcontent")) {
        if (this.parent.allowPaging && this.parent.pagerModule.pagerObj.element.querySelector(".e-pagercontainer")) {
          this.parent.pagerModule.pagerObj.element.querySelector(".e-pagercontainer").removeAttribute("aria-hidden");
        }
        if (this.parent.editSettings.mode === "Batch" && (e.action === "tab" || e.action === "shiftTab")) {
          this.active.matrix.current = this.findBatchEditCell(prevBatchValue, e.action === "tab" ? true : false);
          if (e.action === "tab" && prevBatchValue.toString() === this.active.matrix.current.toString()) {
            this.parent.editModule.editModule.addBatchRow = true;
          }
        }
        if (e.action === "shiftTab" && bValue.toString() === this.active.matrix.current.toString()) {
          if (this.parent.allowGrouping && !isNullOrUndefined(this.parent.groupSettings.columns) && this.parent.groupSettings.columns.length === this.parent.columns.length) {
            this.focusOutFromHeader(e);
            return;
          }
          var firstContentCellIndex = [0, 0];
          if (this.active.matrix.matrix[firstContentCellIndex[0]][firstContentCellIndex[1]] === 0) {
            firstContentCellIndex = findCellIndex(this.active.matrix.matrix, [0, 0], true);
          }
          var firstCell = getValue(firstContentCellIndex[0] + ".cells." + firstContentCellIndex[1], this.active.matrix.getRowsFromIndex(firstContentCellIndex[0], this.active));
          if (firstCell && firstCell.getBoundingClientRect().width === 0) {
            firstContentCellIndex = this.active.matrix.nextVisibleCellFocus(firstContentCellIndex[0], firstContentCellIndex[1], e.action, this.active.keyActions[e.action], this.active, this.active.matrix.current[1]);
          }
          if (!returnVal && (firstContentCellIndex.toString() === this.active.matrix.current.toString() || this.parent.editSettings.mode === "Batch" && prevBatchValue.toString() === this.active.matrix.current.toString())) {
            returnVal = true;
            this.setActive(false);
            this.setLastContentCellActive();
          }
        }
      }
      if (returnVal === false) {
        this.clearIndicator();
        if (e.action === "shiftTab" && bValue.toString() === [0, 0].toString()) {
          this.parent.element.tabIndex = -1;
        }
        if (this.parent.allowPaging && !this.parent.pagerModule.pagerObj.checkPagerHasFocus() && this.allowToPaging(e) && bValue.toString() !== [0, 0].toString()) {
          e.preventDefault();
          if (e.keyCode === 40) {
            this.parent.pagerModule.pagerObj.setPagerContainerFocus();
            return;
          } else if (e.keyCode === 9) {
            this.parent.pagerModule.pagerObj.setPagerFocus();
            return;
          }
        }
        if (this.parent.element.classList.contains("e-childgrid")) {
          this.focusOutFromChildGrid(e);
        }
        return;
      }
      this.header.action = e.action;
      this.header.currentTarget = null;
      this.header.focusType = "key";
      if (e.target && parentsUntil(e.target, "e-fltrtemp") && (e.action === "tab" || e.action === "shiftTab")) {
        var target = e.target;
        var focusElement = [].slice.call(closest(target, "th").querySelectorAll(".e-fltrtemp-focus"));
        if (focusElement.length) {
          var elementIndex = focusElement.indexOf(target);
          var resetActive = e.action === "tab" && elementIndex < focusElement.length - 1 || e.action === "shiftTab" && elementIndex > 0 ? true : false;
          if (resetActive) {
            this.setActive(false);
            this.active.matrix.current = bValue;
            this.active.currentTarget = target;
          }
        }
      }
      if (focusFirstHeaderCell && parentsUntil(this.active.getTable(), "e-gridheader") && e.target && e.target.id === this.parent.element.id + "_searchbar") {
        this.parent.searchModule.headerFocus = true;
      }
      e.preventDefault();
      this.focus(e);
    };
    FocusStrategy2.prototype.isValidBatchEditCell = function(cellIndex) {
      var cell = this.active.getTable().rows[cellIndex[0]].cells[cellIndex[1]];
      var tr = closest(cell, "tr");
      var cellColIndex = parseInt(cell.getAttribute("aria-colindex"), 10) - 1;
      var cellCol = this.parent.getColumns()[parseInt(cellColIndex.toString(), 10)];
      if (this.active.matrix.matrix[cellIndex[0]][cellIndex[1]] === 1 && (!tr.classList.contains("e-row") || (tr.classList.contains("e-insertedrow") || !cellCol.isPrimaryKey) && cellCol.allowEditing)) {
        return true;
      }
      return false;
    };
    FocusStrategy2.prototype.findBatchEditCell = function(currentCellIndex, next, limitRow) {
      var cellIndex = currentCellIndex;
      var tempCellIndex = currentCellIndex;
      var cellIndexObtain = false;
      while (!cellIndexObtain) {
        var prevTempCellIndex = tempCellIndex;
        tempCellIndex = findCellIndex(this.active.matrix.matrix, tempCellIndex, next);
        var tempCell = getValue(tempCellIndex[0] + ".cells." + tempCellIndex[1], this.active.getTable().rows);
        if (tempCell && tempCell.getBoundingClientRect().width === 0) {
          tempCellIndex = this.active.matrix.nextVisibleCellFocus(tempCellIndex[0], tempCellIndex[1], this.activeKey, this.active.keyActions[this.activeKey], this.active, this.active.matrix.current[1]);
        }
        if (prevTempCellIndex.toString() === tempCellIndex.toString() || limitRow && prevTempCellIndex[0] !== tempCellIndex[0]) {
          cellIndexObtain = true;
          continue;
        }
        if (this.isValidBatchEditCell(tempCellIndex)) {
          cellIndex = tempCellIndex;
          cellIndexObtain = true;
        }
      }
      return cellIndex;
    };
    FocusStrategy2.prototype.setLastContentCellActive = function() {
      var lastContentCellIndex = [this.active.matrix.matrix.length - 1, this.active.matrix.matrix[this.active.matrix.matrix.length - 1].length - 1];
      if (this.active.matrix.matrix[lastContentCellIndex[0]][lastContentCellIndex[1]] === 0) {
        lastContentCellIndex = findCellIndex(this.active.matrix.matrix, lastContentCellIndex, false);
      }
      var lastCell = getValue(lastContentCellIndex[0] + ".cells." + lastContentCellIndex[1], this.active.matrix.getRowsFromIndex(lastContentCellIndex[0], this.active));
      if (lastCell && lastCell.getBoundingClientRect().width === 0) {
        lastContentCellIndex = this.active.matrix.nextVisibleCellFocus(lastContentCellIndex[0], lastContentCellIndex[1], this.activeKey, this.active.keyActions[this.activeKey], this.active, this.active.matrix.current[1]);
      }
      this.active.matrix.current = lastContentCellIndex;
    };
    FocusStrategy2.prototype.focusOutFromChildGrid = function(e) {
      var parentTable = parentsUntil(this.parent.element, "e-table");
      var parentGrid = parentsUntil(parentTable, "e-grid").ej2_instances[0];
      var parentCell = parentsUntil(this.parent.element, "e-detailcell");
      var uid2 = parentsUntil(this.parent.element, "e-detailrow").getAttribute("data-uid");
      var parentRows = [].slice.call(parentGrid.getContentTable().rows);
      var parentRowIndex = parentRows.map(function(m) {
        return m.getAttribute("data-uid");
      }).indexOf(uid2);
      if (e.action === "tab" && parentRowIndex >= parentRows.length - 1) {
        return;
      }
      removeClass([this.parent.element], ["e-focus"]);
      removeClass([parentCell], ["e-focused"]);
      parentCell.tabIndex = -1;
      e.preventDefault();
      var nextFocusCell;
      parentGrid.focusModule.removeFocus();
      if (e.action === "shiftTab") {
        var previousRow = parentRows[parentRowIndex - 1];
        var rowCells = previousRow.cells;
        for (var i = rowCells.length - 1; i >= 0; i--) {
          nextFocusCell = rowCells[parseInt(i.toString(), 10)];
          if (!nextFocusCell.classList.contains("e-hide")) {
            parentGrid.focusModule.active.matrix.current = [parentRowIndex - 1, i];
            break;
          }
        }
      } else {
        nextFocusCell = parentRows[parentRowIndex + 1].cells[0];
        parentGrid.focusModule.active.matrix.current = [parentRowIndex + 1, 0];
      }
      parentGrid.focusModule.currentInfo.element = nextFocusCell;
      parentGrid.focusModule.currentInfo.elementToFocus = nextFocusCell;
      addClass([nextFocusCell], ["e-focused", "e-focus"]);
      nextFocusCell.tabIndex = 0;
      nextFocusCell.focus();
    };
    FocusStrategy2.prototype.focusOutFromHeader = function(e) {
      this.removeFocus();
      if (this.parent.toolbar || this.parent.toolbarTemplate) {
        var toolbarElement = this.parent.toolbarModule.element;
        var focusableToolbarItems = this.parent.toolbarModule.getFocusableToolbarItems();
        e.preventDefault();
        if (focusableToolbarItems.length > 0) {
          focusableToolbarItems[focusableToolbarItems.length - 1].querySelector(".e-toolbar-item-focus,.e-btn,.e-input").focus();
        } else {
          toolbarElement.focus();
        }
        return;
      }
      if (this.parent.allowGrouping && this.parent.groupSettings.showDropArea) {
        var groupModule = this.parent.groupModule;
        var focusableGroupedItems = groupModule.getFocusableGroupedItems();
        e.preventDefault();
        if (focusableGroupedItems.length > 0) {
          focusableGroupedItems[focusableGroupedItems.length - 1].focus();
        } else {
          groupModule.element.focus();
        }
        return;
      }
      if (this.parent.element.classList.contains("e-childgrid")) {
        e.preventDefault();
        this.parent.element.focus();
      }
    };
    FocusStrategy2.prototype.allowToPaging = function(e) {
      if (this.parent.editSettings.mode === "Batch" && this.parent.editSettings.allowAdding && e.keyCode !== 40) {
        return false;
      }
      return true;
    };
    FocusStrategy2.prototype.skipOn = function(e) {
      var target = e.target;
      if (!target) {
        return false;
      }
      if (!this.parent.isEdit && target && target.closest(".e-unboundcell") && this.currentInfo.skipAction && (e.action === "shiftTab" && this.commandColumnFocusElement(target.closest(".e-unboundcell"), false) === target || e.action === "tab" && this.commandColumnFocusElement(target.closest(".e-unboundcell"), true) === target)) {
        return this.currentInfo.skipAction = false;
      }
      if (this.currentInfo.skipAction) {
        this.clearIndicator();
        return true;
      }
      if (["pageUp", "pageDown", "altDownArrow"].indexOf(e.action) > -1) {
        this.clearIndicator();
        return true;
      }
      if (this.parent.allowGrouping) {
        var focusableGroupedItems = this.parent.groupModule.getFocusableGroupedItems();
        if (parentsUntil(e.target, "e-groupheadercell") && !(e.target === focusableGroupedItems[0] && e.action === "shiftTab" || e.target === focusableGroupedItems[focusableGroupedItems.length - 1] && e.action === "tab")) {
          return true;
        }
      }
      if (this.parent.toolbar || this.parent.toolbarTemplate) {
        var toolbarElement = this.parent.toolbarModule.element;
        var focusableToolbarItems = toolbarElement.querySelectorAll(".e-toolbar-item:not(.e-overlay):not(.e-hidden)");
        if (parentsUntil(e.target, "e-toolbar-item") && !(focusableToolbarItems.length > 0 && (parentsUntil(e.target, "e-toolbar-item") === focusableToolbarItems[0] && e.action === "shiftTab" || parentsUntil(e.target, "e-toolbar-item") === focusableToolbarItems[focusableToolbarItems.length - 1] && e.action === "tab"))) {
          return true;
        }
      }
      var th = closest(target, "th") && !closest(target, "th").tabIndex;
      if (e.target.classList.contains("e-filterbaroperator") && (e.keyCode === 13 || e.keyCode === 27)) {
        var inputTarget = closest(e.target, ".e-filterbarcell");
        inputTarget.querySelector("input").focus();
      }
      var addNewRow = this.parent.editSettings.showAddNewRow && closest(document.activeElement, ".e-addedrow") !== null;
      if (th && closest(document.activeElement, ".e-filterbarcell") !== null || addNewRow) {
        this.removeFocus();
      }
      var filterCell = closest(document.activeElement, ".e-filterbarcell") !== null;
      if (this.parent.enableHeaderFocus && filterCell) {
        var matrix = this.active.matrix;
        var current = matrix.current;
        filterCell = matrix.matrix[current[0]].lastIndexOf(1) !== current[1];
      }
      if (this.parent.isEdit && (e.action === "tab" || e.action === "shiftTab") && this.parent.editSettings.mode === "Normal" && !this.parent.editSettings.showAddNewRow && !isNullOrUndefined(parentsUntil(target, "e-addedrow"))) {
        var inputElements = this.parent.editModule.formObj.element.querySelectorAll('input:not([type="hidden"],.e-numeric-hidden,.e-disabled), select:not([aria-hidden="true"]), button:not(.e-hide), textarea:not(.e-hide,.e-disabled,[disabled])');
        var inputTarget = target.classList.contains("e-ddl") ? target.querySelector("input") : target;
        var firstEditCell = e.action === "tab" && inputTarget === inputElements[inputElements.length - 1];
        var lastEditCell = e.action === "shiftTab" && inputTarget === inputElements[0];
        if (firstEditCell || lastEditCell) {
          e.preventDefault();
          var focusElement = inputElements[firstEditCell ? 0 : inputElements.length - 1];
          focusElement = focusElement.parentElement.classList.contains("e-ddl") ? focusElement.parentElement : focusElement;
          focusElement.focus();
        }
      }
      return e.action === "delete" || this.parent.editSettings.mode !== "Batch" && (this.parent.isEdit && (!this.parent.editSettings.showAddNewRow || this.parent.editSettings.showAddNewRow && (!isNullOrUndefined(this.parent.element.querySelector(".e-editedrow")) || !isNullOrUndefined(parentsUntil(target, "e-addedrow")) && !isNullOrUndefined(closest(e.target, "input")) && !isNullOrUndefined(document.querySelector(".e-popup-open")) || !isNullOrUndefined(parentsUntil(target, "e-addedrow")) && target && !target.querySelector(".e-cancel-icon") && !isNullOrUndefined(parentsUntil(target, "e-unboundcell")))) || ["insert", "f2"].indexOf(e.action) > -1) || filterCell && this.parent.enableHeaderFocus || (filterCell || addNewRow) && e.action !== "tab" && e.action !== "shiftTab" || closest(document.activeElement, "#" + this.parent.element.id + "_searchbar") !== null && ["enter", "leftArrow", "rightArrow", "shiftLeft", "shiftRight", "ctrlPlusA"].indexOf(e.action) > -1 || closest(target, "." + gridContent) === null && closest(target, "." + gridHeader) === null && !(e.target === this.parent.element || parentsUntil(e.target, "e-toolbar") || parentsUntil(e.target, "e-groupdroparea")) || e.action === "space" && !target.classList.contains(gridChkBox) && closest(target, "." + gridChkBox) === null && closest(target, ".e-headerchkcelldiv") === null || closest(target, ".e-filter-popup") !== null;
    };
    FocusStrategy2.prototype.focusVirtualElement = function(e) {
      var _this = this;
      if (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) {
        var data = {
          virtualData: {},
          isAdd: false,
          isCancel: false
        };
        this.parent.notify(getVirtualData, data);
        var isKeyFocus = this.actions.some(function(value) {
          return value === _this.activeKey;
        });
        var isSelected = this.parent.contentModule ? this.parent.contentModule.selectedRowIndex > -1 : false;
        if (data.isAdd || Object.keys(data.virtualData).length || isKeyFocus || data.isCancel || isSelected) {
          this.parent.notify(resetVirtualFocus, {
            isCancel: false
          });
          data.isCancel = false;
          if (this.parent.enableVirtualization && !this.parent.selectVirtualRowOnAdd && (!e || e && e.action !== "ctrlHome" && e.action !== "ctrlEnd") || !this.parent.enableVirtualization) {
            this.parent.contentModule.selectedRowIndex = -1;
          }
          this.parent.selectVirtualRowOnAdd = false;
          if (isKeyFocus) {
            this.activeKey = this.empty;
            this.parent.notify("virtaul-key-handler", e);
          }
          this.currentInfo.elementToFocus.focus({
            preventScroll: true
          });
        } else {
          if (this.isVirtualScroll || this.isInfiniteScroll) {
            this.currentInfo.elementToFocus.focus({
              preventScroll: true
            });
          } else {
            this.currentInfo.elementToFocus.focus();
          }
        }
      }
      this.isVirtualScroll = this.isInfiniteScroll = false;
    };
    FocusStrategy2.prototype.getFocusedElement = function() {
      return this.currentInfo.elementToFocus;
    };
    FocusStrategy2.prototype.getContent = function() {
      return this.active || this.content;
    };
    FocusStrategy2.prototype.setActive = function(content2) {
      this.active = content2 ? this.content : this.header;
    };
    FocusStrategy2.prototype.setFocusedElement = function(element, e) {
      var _this = this;
      this.currentInfo.elementToFocus = element;
      setTimeout(function() {
        if (!isNullOrUndefined(_this.currentInfo.elementToFocus)) {
          var filterMenuElement = isNullOrUndefined(_this.parent.element.querySelector(".e-flmenu")) ? document.querySelector(".e-grid-popup .e-flmenu") : _this.parent.element.querySelector(".e-flmenu");
          if ((_this.parent.enableVirtualization || _this.parent.enableInfiniteScrolling) && isNullOrUndefined(filterMenuElement)) {
            _this.focusVirtualElement(e);
          } else if (isNullOrUndefined(filterMenuElement) || parentsUntil(document.activeElement, "e-flmenu-valuediv") !== filterMenuElement.querySelector(".e-flmenu-valuediv")) {
            _this.currentInfo.elementToFocus.focus();
          }
        }
      }, 0);
    };
    FocusStrategy2.prototype.focus = function(e) {
      this.parent.notify(virtaulCellFocus, e);
      this.removeFocus();
      this.addFocus(this.getContent().getFocusInfo(), e);
    };
    FocusStrategy2.prototype.removeFocus = function(e) {
      if (!this.currentInfo.element) {
        return;
      }
      if (this.parent.isReact && !this.parent.isEdit && this.currentInfo.element.classList.contains("e-rowcell") && !this.currentInfo.element.parentElement && !(this.parent.allowGrouping && !isNullOrUndefined(this.parent.groupSettings.columns) && this.parent.groupSettings.columns.length) && this.parent.getRowByIndex(this.prevIndexes.rowIndex)) {
        var cellElem = this.parent.getCellFromIndex(this.prevIndexes.rowIndex, this.prevIndexes.cellIndex);
        this.currentInfo.element = cellElem ? cellElem : this.currentInfo.element;
      }
      removeClass([this.currentInfo.element, this.currentInfo.elementToFocus], ["e-focused", "e-focus"]);
      this.currentInfo.element.tabIndex = -1;
    };
    FocusStrategy2.prototype.addOutline = function() {
      var info = this.getContent().getFocusInfo();
      if (info.element) {
        addClass([info.element], ["e-focused"]);
        addClass([info.elementToFocus], ["e-focus"]);
      }
    };
    FocusStrategy2.prototype.focusHeader = function() {
      this.setActive(false);
      this.resetFocus();
    };
    FocusStrategy2.prototype.focusContent = function() {
      this.setActive(true);
      this.resetFocus();
    };
    FocusStrategy2.prototype.resetFocus = function() {
      var current = this.getContent().matrix.get(0, -1, [0, 1], null, this.getContent().validator());
      this.getContent().matrix.select(current[0], current[1]);
      this.focus();
    };
    FocusStrategy2.prototype.addFocus = function(info, e) {
      this.currentInfo = info;
      this.currentInfo.outline = info.outline && (!isNullOrUndefined(e) || this.isVirtualScroll);
      if (this.isInfiniteScroll) {
        this.currentInfo.outline = true;
      }
      if (!info.element) {
        return;
      }
      var isFocused = info.elementToFocus.classList.contains("e-focus");
      if (isFocused) {
        return;
      }
      if (this.currentInfo.outline) {
        addClass([info.element], ["e-focused"]);
      }
      addClass([info.elementToFocus], ["e-focus"]);
      info.element.tabIndex = 0;
      if (!isFocused) {
        this.setFocusedElement(info.elementToFocus, e);
      }
      this.parent.notify(cellFocused, {
        element: info.elementToFocus,
        parent: info.element,
        indexes: this.getContent().matrix.current,
        byKey: !isNullOrUndefined(e),
        byClick: isNullOrUndefined(e),
        keyArgs: e,
        isJump: this.swap.swap,
        container: this.getContent().getInfo(e),
        outline: !isNullOrUndefined(e),
        swapInfo: this.swap
      });
      var _a = this.getContent().matrix.current, rowIndex = _a[0], cellIndex = _a[1];
      this.prevIndexes = {
        rowIndex,
        cellIndex
      };
      this.focusedColumnUid = this.parent.getColumnByIndex(cellIndex).uid;
      this.focusByClick = false;
    };
    FocusStrategy2.prototype.refreshMatrix = function(content2) {
      var _this = this;
      return function(e) {
        if (content2 && !_this.content) {
          _this.content = new ContentFocus(_this.parent);
        }
        if (!content2 && !_this.header) {
          _this.header = new HeaderFocus(_this.parent);
        }
        var cFocus = content2 ? _this.content : _this.header;
        var frozenRow = _this.parent.frozenRows;
        var batchLen = 0;
        if (frozenRow && _this.parent.editSettings.mode === "Batch") {
          batchLen = _this.parent.getHeaderContent().querySelectorAll(".e-insertedrow").length + _this.parent.getHeaderContent().querySelectorAll(".e-hiddenrow").length;
        }
        if (!isNullOrUndefined(_this.parent.groupSettings.columns) && _this.parent.groupSettings.columns.length && frozenRow && content2) {
          frozenRow = 0;
          for (var i = 0; i < e.rows.length; i++) {
            frozenRow++;
            if (e.rows[parseInt(i.toString(), 10)].index + 1 === _this.parent.frozenRows) {
              break;
            }
          }
          _this.groupedFrozenRow = frozenRow;
        }
        var rows = content2 ? e.rows.slice(frozenRow + batchLen) : e.rows;
        var updateRow = content2 ? e.rows.slice(0, frozenRow + batchLen) : e.rows;
        if (_this.parent.isCollapseStateEnabled() && content2) {
          rows = rows.filter(function(x) {
            return x.visible !== false;
          });
        }
        var isRowTemplate = !isNullOrUndefined(_this.parent.rowTemplate);
        if (frozenRow && (_this.parent.editSettings.mode === "Batch" && content2 && (e.name === "batchDelete" || e.name === "batchAdd" || e.name === "batchCancel" || e.args && e.args.requestType === "batchsave") || e.args && (e.args.requestType === "delete" || e.args.requestType === "save"))) {
          var matrixcs = _this.header.matrix.matrix;
          var hdrLen = _this.parent.headerModule.rows.length;
          matrixcs.splice(hdrLen, matrixcs.length - hdrLen);
        }
        var matrix = cFocus.matrix.generate(updateRow, cFocus.selector, isRowTemplate);
        cFocus.matrix.generate(rows, cFocus.selector, isRowTemplate);
        var isScroll = _this.parent.enableVirtualization || _this.parent.enableInfiniteScrolling;
        if (_this.parent.editSettings.showAddNewRow && content2 && _this.header && _this.header.matrix && (!isScroll || isScroll && _this.parent.isAddNewRow)) {
          var tempMatrix = _this.header.matrix.matrix;
          var lastRowHeaderIdx = _this.parent.allowFiltering && _this.parent.filterSettings.type === "FilterBar" ? 2 : 1;
          cFocus.matrix.rows = _this.parent.frozenRows && _this.parent.editSettings.newRowPosition === "Top" ? cFocus.matrix.rows : ++cFocus.matrix.rows;
          if (_this.parent.editSettings.newRowPosition === "Top") {
            (_this.parent.frozenRows || isScroll ? matrix : cFocus.matrix.matrix).unshift(_this.refreshAddNewRowMatrix(tempMatrix[tempMatrix.length - lastRowHeaderIdx]));
          } else {
            cFocus.matrix.matrix.push(_this.refreshAddNewRowMatrix(tempMatrix[tempMatrix.length - lastRowHeaderIdx]));
          }
          _this.parent.isAddNewRow = false;
        }
        if (!(_this.parent.isFrozenGrid() && e.args && (e.args.requestType === "sorting" || e.args.requestType === "batchsave" || e.args.requestType === "paging")) || frozenRow && _this.parent.editSettings.mode === "Batch" && content2 && (e.name === "batchDelete" || e.name === "batchAdd" || e.name === "batchCancel" || e.args.requestType === "batchsave")) {
          cFocus.generateRows(updateRow, {
            matrix,
            handlerInstance: _this.header
          });
        }
        if (!Browser.isDevice && e && e.args) {
          if (!_this.focusByClick && e.args.requestType === "paging" && !_this.parent.pagerModule.pagerObj.checkPagerHasFocus()) {
            _this.skipFocus = false;
            _this.parent.element.focus();
          }
          if (e.args.requestType === "grouping") {
            _this.skipFocus = true;
          }
        }
        if (e && e.args && e.args.requestType === "virtualscroll") {
          if (_this.currentInfo.uid) {
            var index_1;
            var bool = e.rows.some(function(row2, i2) {
              index_1 = i2;
              return row2.uid === _this.currentInfo.uid;
            });
            if (bool) {
              _this.content.matrix.current[0] = index_1;
              _this.content.matrix.current[1] = _this.parent.getColumnIndexByUid(_this.focusedColumnUid) || 0;
              var frzLeftCount = _this.parent.getVisibleFrozenLeftCount();
              var frzRightCount = _this.parent.getVisibleFrozenRightCount();
              if (_this.parent.enableColumnVirtualization && !(frzLeftCount && frzRightCount) && _this.parent.isFrozenGrid() && e.args.virtualInfo.direction === "right") {
                _this.content.matrix.current[1] = _this.content.matrix.current[1] - (frzLeftCount + (frzRightCount ? frzRightCount + 1 : 0));
              }
              var isGroup = _this.parent.allowGrouping && _this.parent.groupSettings.columns.length ? true : false;
              if (isGroup) {
                _this.content.matrix.current[1] = _this.prevIndexes.cellIndex;
                if (_this.virtualSelectionInfo.isPending) {
                  _this.content.matrix.current[0] = _this.virtualSelectionInfo.direction === "downArrow" ? _this.content.matrix.current[0] + 1 : _this.content.matrix.current[0] - 1;
                }
              }
              var focusElement = _this.getContent().getFocusInfo().elementToFocus;
              if (focusElement) {
                var cellPosition = focusElement.getBoundingClientRect();
                var gridPosition = _this.parent.element.getBoundingClientRect();
                var freezeLeftColWidth = 0;
                var freezeRightColWidth = 0;
                if (_this.parent.enableColumnVirtualization && !(frzLeftCount && frzRightCount) && _this.parent.isFrozenGrid() && e.args.virtualInfo.direction === "right") {
                  if (frzLeftCount) {
                    freezeLeftColWidth = _this.parent.leftrightColumnWidth("left");
                  } else {
                    freezeRightColWidth = _this.parent.leftrightColumnWidth("right");
                  }
                }
                if (cellPosition.top >= 0 && cellPosition.left >= 0 && cellPosition.right - freezeLeftColWidth - freezeRightColWidth <= Math.min(gridPosition.right, window.innerWidth || document.documentElement.clientWidth) + freezeRightColWidth && cellPosition.bottom <= Math.min(gridPosition.bottom, window.innerHeight || document.documentElement.clientHeight) || isGroup) {
                  _this.isVirtualScroll = true;
                  _this.focus(isGroup && _this.virtualSelectionInfo.isPending ? _this.virtualSelectionInfo.event : void 0);
                }
              }
            }
          } else if (e.args.focusElement && e.args.focusElement.classList.contains("e-filtertext")) {
            var focusElement = _this.parent.element.querySelector("#" + e.args.focusElement.id);
            if (focusElement) {
              focusElement.focus();
            }
          }
          _this.virtualSelectionInfo = {};
        }
        if (e && e.args && e.args.requestType === "infiniteScroll") {
          _this.isInfiniteScroll = true;
        }
      };
    };
    FocusStrategy2.prototype.refreshAddNewRowMatrix = function(matrix) {
      var cols = this.parent.getColumns();
      var indent = this.parent.getIndentCount();
      for (var i = indent; i < matrix.length - 1; i++) {
        if (cols[i - indent] && cols[i - indent].visible && cols[i - indent].allowEditing) {
          matrix[parseInt(i.toString(), 10)] = 1;
        } else {
          matrix[parseInt(i.toString(), 10)] = 0;
        }
      }
      return matrix;
    };
    FocusStrategy2.prototype.addEventListener = function() {
      var _this = this;
      if (this.parent.isDestroyed) {
        return;
      }
      EventHandler.add(this.parent.element, "mousedown", this.focusCheck, this);
      EventHandler.add(this.parent.element, "touchstart", this.focusCheck, this);
      EventHandler.add(this.parent.element, "focus", this.onFocus, this);
      this.parent.element.addEventListener("focus", this.passiveHandler = function(e) {
        return _this.passiveFocus(e);
      }, true);
      EventHandler.add(this.parent.element, "focusout", this.onBlur, this);
      this.evtHandlers = [{
        event: keyPressed,
        handler: this.onKeyPress
      }, {
        event: click,
        handler: this.onClick
      }, {
        event: contentReady,
        handler: this.refMatrix
      }, {
        event: partialRefresh,
        handler: this.refMatrix
      }, {
        event: refreshExpandandCollapse,
        handler: this.refMatrix
      }, {
        event: showAddNewRowFocus,
        handler: this.showAddNewRowFocus
      }, {
        event: headerRefreshed,
        handler: this.refreshMatrix()
      }, {
        event: closeEdit,
        handler: this.restoreFocus
      }, {
        event: restoreFocus,
        handler: this.restoreFocus
      }, {
        event: "start-edit",
        handler: this.clearIndicator
      }, {
        event: "start-add",
        handler: this.clearIndicator
      }, {
        event: "sorting-complete",
        handler: this.restoreFocus
      }, {
        event: "filtering-complete",
        handler: this.filterfocus
      }, {
        event: "custom-filter-close",
        handler: this.filterfocus
      }, {
        event: "grouping-complete",
        handler: this.restoreFocusWithAction
      }, {
        event: "ungrouping-complete",
        handler: this.restoreFocusWithAction
      }, {
        event: batchAdd,
        handler: this.refMatrix
      }, {
        event: batchCancel,
        handler: this.refMatrix
      }, {
        event: batchDelete,
        handler: this.refMatrix
      }, {
        event: detailDataBound,
        handler: this.refMatrix
      }, {
        event: onEmpty,
        handler: this.refMatrix
      }, {
        event: cellFocused,
        handler: this.internalCellFocus
      }];
      addRemoveEventListener(this.parent, this.evtHandlers, true, this);
    };
    FocusStrategy2.prototype.showAddNewRowFocus = function() {
      if (this.parent.editSettings.showAddNewRow) {
        var startIdx = this.parent.editSettings.newRowPosition === "Top" ? 0 : this.content.matrix.matrix.length - 1;
        var startCellIdx = this.parent.getIndentCount();
        if (this.parent.editSettings.newRowPosition === "Top" && (this.parent.frozenRows || this.parent.enableVirtualization || this.parent.enableInfiniteScrolling)) {
          var headrIdx = this.header.matrix.matrix.length - (this.groupedFrozenRow ? this.groupedFrozenRow : this.parent.frozenRows);
          startCellIdx = this.findNextCellFocus(this.header.matrix.matrix[headrIdx - 1], startCellIdx);
          this.header.matrix.current = [headrIdx - 1, startCellIdx];
          this.active = this.header;
        } else {
          startCellIdx = this.findNextCellFocus(this.content.matrix.matrix[parseInt(startIdx.toString(), 10)], startCellIdx);
          this.content.matrix.current = [startIdx, startCellIdx];
          this.active = this.content;
        }
        var addedrow = this.parent.element.querySelector(".e-addedrow");
        if (addedrow && addedrow.querySelectorAll("tr") && addedrow.querySelector("tr").cells[parseInt(startCellIdx.toString(), 10)].querySelector("input")) {
          addedrow.querySelector("tr").cells[parseInt(startCellIdx.toString(), 10)].querySelector("input").select();
        }
      }
    };
    FocusStrategy2.prototype.findNextCellFocus = function(matrix, cellIndex) {
      for (var i = cellIndex; i < matrix.length; i++) {
        if (matrix[parseInt(i.toString(), 10)] === 1) {
          return i;
        }
      }
      return cellIndex;
    };
    FocusStrategy2.prototype.filterfocus = function() {
      if (this.parent.filterSettings.type !== "FilterBar") {
        this.removeFocus();
        this.restoreFocus();
      }
    };
    FocusStrategy2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      EventHandler.remove(this.parent.element, "mousedown", this.focusCheck);
      EventHandler.remove(this.parent.element, "touchstart", this.focusCheck);
      EventHandler.remove(this.parent.element, "focus", this.onFocus);
      EventHandler.remove(this.parent.element, "focusout", this.onBlur);
      this.parent.element.removeEventListener("focus", this.passiveHandler, true);
      addRemoveEventListener(this.parent, this.evtHandlers, false);
    };
    FocusStrategy2.prototype.destroy = function() {
      this.removeEventListener();
    };
    FocusStrategy2.prototype.restoreFocus = function(arg) {
      if (arg && arg.requestType === "sorting" && isNullOrUndefined(arg.target)) {
        return;
      }
      var groupModule = this.parent.groupModule;
      if (this.parent.allowGrouping && groupModule && (groupModule.groupSortFocus || groupModule.groupTextFocus)) {
        groupModule.groupSortFocus = false;
        groupModule.groupTextFocus = false;
        return;
      }
      this.firstHeaderCellClick = true;
      this.addFocus(this.getContent().getFocusInfo());
      var requestTypes = ["add", "save", "delete", "cancel", "batchsave", "batchDelete", "batchCancel"];
      var focusInfo = this.getContent().getFocusInfo();
      if (arg && requestTypes.indexOf(arg.requestType) > -1 && focusInfo && focusInfo.elementToFocus && focusInfo.elementToFocus.matches(".e-rowcell.e-focus")) {
        addClass([focusInfo.elementToFocus], ["e-focused", "e-focus"]);
      }
    };
    FocusStrategy2.prototype.restoreFocusWithAction = function(e) {
      if (!this.parent.enableInfiniteScrolling && !(this.parent.groupModule && this.parent.groupModule.preventFocusOnGroup)) {
        var matrix = this.getContent().matrix;
        var current = matrix.current;
        switch (e.requestType) {
          case "grouping":
          case "ungrouping":
            current[1] = current.length && !this.parent.groupSettings.showGroupedColumn && !isNullOrUndefined(matrix.matrix[current[0]]) ? matrix.matrix[current[0]].indexOf(1) : e.requestType === "grouping" ? current[1] + 1 : current[1] - 1;
            break;
        }
        this.getContent().matrix.current = current;
        this.prevIndexes = {
          rowIndex: current[0],
          cellIndex: current[1]
        };
        var groupModule = this.parent.groupModule;
        if (this.parent.allowGrouping && groupModule && groupModule.groupCancelFocus) {
          var focusableGroupedItems = groupModule.getFocusableGroupedItems();
          if (focusableGroupedItems.length) {
            if (focusableGroupedItems[0].parentElement.getAttribute("ej-mappingname") === e.columnName) {
              focusableGroupedItems[3].focus();
            } else {
              focusableGroupedItems[0].focus();
            }
          } else {
            groupModule.element.focus();
          }
          groupModule.groupCancelFocus = false;
          return;
        }
        this.addFocus(this.getContent().getFocusInfo());
      }
    };
    FocusStrategy2.prototype.clearIndicator = function() {
      if (!this.currentInfo.element || !this.currentInfo.elementToFocus) {
        return;
      }
      removeClass([this.currentInfo.element, this.currentInfo.elementToFocus], ["e-focus", "e-focused"]);
    };
    FocusStrategy2.prototype.getPrevIndexes = function() {
      var forget = this.forget;
      this.forget = false;
      return forget || !Object.keys(this.prevIndexes).length ? {
        rowIndex: null,
        cellIndex: null
      } : this.prevIndexes;
    };
    FocusStrategy2.prototype.forgetPrevious = function() {
      this.forget = true;
    };
    FocusStrategy2.prototype.setActiveByKey = function(action, active) {
      if (this.parent.frozenRows === 0) {
        return;
      }
      var info;
      var actions = {
        "home": function() {
          return {
            toHeader: !info.isContent,
            toFrozen: true
          };
        },
        "end": function() {
          return {
            toHeader: !info.isContent,
            toFrozen: false
          };
        },
        "ctrlHome": function() {
          return {
            toHeader: true,
            toFrozen: false
          };
        },
        "ctrlEnd": function() {
          return {
            toHeader: false,
            toFrozen: false
          };
        }
      };
      if (!(action in actions)) {
        return;
      }
      info = active.getInfo();
      var swap = actions["" + action]();
      this.setActive(!swap.toHeader);
      this.getContent().matrix.current = active.matrix.current;
    };
    FocusStrategy2.prototype.internalCellFocus = function(e) {
      if (!(e.byKey && e.container.isContent && (e.keyArgs.action === "enter" && e.parent.classList.contains("e-detailcell") || (e.keyArgs.action === "tab" || e.keyArgs.action === "shiftTab") && e.parent.classList.contains("e-unboundcell")))) {
        return;
      }
      this.clearIndicator();
      var focusEle;
      if (e.parent && e.parent.closest(".e-unboundcell") && e.keyArgs.action === "shiftTab") {
        focusEle = this.commandColumnFocusElement(e.parent, true);
      } else {
        focusEle = this.getContent().getFocusable(this.getFocusedElement());
      }
      this.setFocusedElement(focusEle);
      this.currentInfo.skipAction = true;
    };
    FocusStrategy2.prototype.commandColumnFocusElement = function(cell, isLast) {
      var commandButtons = cell.querySelectorAll("button:not(.e-hide)");
      return isLast ? commandButtons[commandButtons.length - 1] : commandButtons[0];
    };
    return FocusStrategy2;
  }()
);
var Matrix = (
  /** @class */
  function() {
    function Matrix2() {
      this.matrix = [];
      this.current = [];
    }
    Matrix2.prototype.set = function(rowIndex, columnIndex, allow) {
      rowIndex = Math.max(0, Math.min(rowIndex, this.rows));
      columnIndex = Math.max(0, Math.min(columnIndex, this.columns));
      this.matrix[parseInt(rowIndex.toString(), 10)] = this.matrix[parseInt(rowIndex.toString(), 10)] || [];
      this.matrix[parseInt(rowIndex.toString(), 10)][parseInt(columnIndex.toString(), 10)] = allow ? 1 : 0;
    };
    Matrix2.prototype.get = function(rowIndex, columnIndex, navigator2, action, validator, active) {
      var tmp = columnIndex;
      if (rowIndex + navigator2[0] < 0) {
        return [rowIndex, columnIndex];
      }
      rowIndex = Math.max(0, Math.min(rowIndex + navigator2[0], this.rows));
      var emptyTable = true;
      if (isNullOrUndefined(this.matrix[parseInt(rowIndex.toString(), 10)])) {
        return null;
      }
      columnIndex = Math.max(0, Math.min(columnIndex + navigator2[1], this.matrix[parseInt(rowIndex.toString(), 10)].length - 1));
      if (tmp + navigator2[1] > this.matrix[parseInt(rowIndex.toString(), 10)].length - 1 && validator(rowIndex, columnIndex, action)) {
        return [rowIndex, tmp];
      }
      var first = this.first(this.matrix[parseInt(rowIndex.toString(), 10)], columnIndex, navigator2, true, action);
      columnIndex = first === null ? tmp : first;
      var val = getValue(rowIndex + "." + columnIndex, this.matrix);
      if (rowIndex === this.rows && (action === "downArrow" || action === "enter")) {
        navigator2[0] = -1;
      }
      var cell;
      if (active) {
        var rows = this.getRowsFromIndex(rowIndex, active);
        cell = getValue(rowIndex + ".cells." + columnIndex, rows);
      }
      if (cell && cell.getBoundingClientRect().width === 0) {
        var current = this.nextVisibleCellFocus(rowIndex, columnIndex, action, navigator2, active, tmp);
        rowIndex = current[0];
        columnIndex = current[1];
      }
      if (first === null) {
        for (var i = 0; i < this.rows; i++) {
          if (this.matrix[parseInt(i.toString(), 10)].some(function(v) {
            return v === 1;
          })) {
            emptyTable = false;
            break;
          }
        }
        if (emptyTable) {
          rowIndex = this.current.length ? this.current[0] : 0;
          return [rowIndex, columnIndex];
        }
      }
      return this.inValid(val) || !validator(rowIndex, columnIndex, action) ? this.get(rowIndex, tmp, navigator2, action, validator) : [rowIndex, columnIndex];
    };
    Matrix2.prototype.getRowsFromIndex = function(rowIndex, active) {
      return active.getTable().rows[parseInt(rowIndex.toString(), 10)].classList.contains("e-addedrow") ? active.getTable().rows[parseInt(rowIndex.toString(), 10)].querySelector("table").rows : active.getTable().rows;
    };
    Matrix2.prototype.nextVisibleCellFocus = function(rowIndex, columnIndex, action, navigator2, active, tmp) {
      var rows = this.getRowsFromIndex(rowIndex, active);
      var cell = getValue(rowIndex + ".cells." + columnIndex, rows);
      var rowMatrix = active.matrix.matrix;
      var maxRow = rowMatrix.length - 1;
      var isTab = action === "tab";
      var isShiftTab = action === "shiftTab";
      var skipAction = action === "enter" || action === "shiftEnter" || action === "downArrow" || action === "upArrow";
      if (skipAction) {
        return [rowIndex, columnIndex];
      }
      while (cell && cell.getBoundingClientRect().width === 0) {
        if (isTab && rowIndex === maxRow && columnIndex === rowMatrix[parseInt(rowIndex.toString(), 10)].lastIndexOf(1) || isShiftTab && rowIndex === 0 && columnIndex === rowMatrix[parseInt(rowIndex.toString(), 10)].indexOf(1)) {
          columnIndex = tmp;
          return [rowIndex, columnIndex];
        }
        if (isTab) {
          if (columnIndex === rowMatrix[parseInt(rowIndex.toString(), 10)].lastIndexOf(1)) {
            rowIndex++;
            columnIndex = rowMatrix[parseInt(rowIndex.toString(), 10)].indexOf(1);
            columnIndex = this.first(this.matrix[parseInt(rowIndex.toString(), 10)], columnIndex, navigator2, true, action);
            rows = this.getRowsFromIndex(rowIndex, active);
          } else {
            columnIndex++;
            columnIndex = this.first(this.matrix[parseInt(rowIndex.toString(), 10)], columnIndex, navigator2, true, action);
          }
        } else if (isShiftTab) {
          if (columnIndex === rowMatrix[parseInt(rowIndex.toString(), 10)].indexOf(1)) {
            rowIndex--;
            columnIndex = rowMatrix[parseInt(rowIndex.toString(), 10)].lastIndexOf(1);
            columnIndex = this.first(this.matrix[parseInt(rowIndex.toString(), 10)], columnIndex, navigator2, true, action);
            rows = this.getRowsFromIndex(rowIndex, active);
          } else {
            columnIndex--;
            columnIndex = this.first(this.matrix[parseInt(rowIndex.toString(), 10)], columnIndex, navigator2, true, action);
          }
        } else if (action === "rightArrow" || action === "shiftRight") {
          if (columnIndex === rowMatrix[parseInt(rowIndex.toString(), 10)].lastIndexOf(1)) {
            columnIndex = tmp;
          } else {
            columnIndex++;
            columnIndex = this.first(this.matrix[parseInt(rowIndex.toString(), 10)], columnIndex, navigator2, true, action);
          }
        } else if (action === "leftArrow" || action === "shiftLeft") {
          if (columnIndex === rowMatrix[parseInt(rowIndex.toString(), 10)].indexOf(1)) {
            columnIndex = tmp;
          } else {
            columnIndex--;
            columnIndex = this.first(this.matrix[parseInt(rowIndex.toString(), 10)], columnIndex, navigator2, true, action);
          }
        } else if (action === null) {
          columnIndex++;
          columnIndex = this.first(this.matrix[parseInt(rowIndex.toString(), 10)], columnIndex, navigator2, true, action);
        }
        cell = getValue(rowIndex + ".cells." + columnIndex, rows);
      }
      return [rowIndex, columnIndex];
    };
    Matrix2.prototype.first = function(vector, index, navigator2, moveTo2, action) {
      if ((index < 0 || index === vector.length) && this.inValid(vector[parseInt(index.toString(), 10)]) && action !== "upArrow" && action !== "downArrow" || !vector.some(function(v) {
        return v === 1;
      })) {
        return null;
      }
      return !this.inValid(vector[parseInt(index.toString(), 10)]) ? index : this.first(vector, ["upArrow", "downArrow", "shiftUp", "shiftDown", "enter", "shiftEnter"].indexOf(action) !== -1 ? moveTo2 ? 0 : ++index : index + navigator2[1], navigator2, false, action);
    };
    Matrix2.prototype.select = function(rowIndex, columnIndex) {
      rowIndex = Math.max(0, Math.min(rowIndex, this.rows));
      columnIndex = Math.max(0, Math.min(columnIndex, this.matrix[parseInt(rowIndex.toString(), 10)].length - 1));
      this.current = [rowIndex, columnIndex];
    };
    Matrix2.prototype.generate = function(rows, selector, isRowTemplate) {
      this.rows = rows.length - 1;
      this.matrix = [];
      for (var i = 0; i < rows.length; i++) {
        var cells = rows[parseInt(i.toString(), 10)].cells.filter(function(c) {
          return c.isSpanned !== true;
        });
        this.columns = Math.max(cells.length - 1, this.columns | 0);
        var incrementNumber = 0;
        for (var j = 0; j < cells.length; j++) {
          if (cells[parseInt(j.toString(), 10)].column && cells[parseInt(j.toString(), 10)].column.columns) {
            incrementNumber = this.columnsCount(cells[parseInt(j.toString(), 10)].column.columns, incrementNumber);
          } else {
            incrementNumber++;
          }
          this.set(i, j, rows[parseInt(i.toString(), 10)].visible === false ? false : selector(rows[parseInt(i.toString(), 10)], cells[parseInt(j.toString(), 10)], isRowTemplate));
        }
        this.columns = Math.max(incrementNumber - 1, this.columns | 0);
      }
      return this.matrix;
    };
    Matrix2.prototype.columnsCount = function(rowColumns, currentColumnCount) {
      var columns = rowColumns;
      var incrementNumber = currentColumnCount;
      for (var i = 0; i < columns.length; i++) {
        if (columns[parseInt(i.toString(), 10)].columns) {
          incrementNumber = this.columnsCount(columns[parseInt(i.toString(), 10)].columns, incrementNumber);
        } else {
          incrementNumber++;
        }
      }
      return incrementNumber;
    };
    Matrix2.prototype.inValid = function(value) {
      return value === 0 || value === void 0;
    };
    return Matrix2;
  }()
);
var ContentFocus = (
  /** @class */
  function() {
    function ContentFocus2(parent) {
      var _this = this;
      this.matrix = new Matrix();
      this.lastIdxCell = false;
      this.parent = parent;
      this.keyActions = {
        "rightArrow": [0, 1],
        "tab": [0, 1],
        "leftArrow": [0, -1],
        "shiftTab": [0, -1],
        "upArrow": [-1, 0],
        "downArrow": [1, 0],
        "shiftUp": [-1, 0],
        "shiftDown": [1, 0],
        "shiftRight": [0, 1],
        "shiftLeft": [0, -1],
        "enter": [1, 0],
        "shiftEnter": [-1, 0]
      };
      this.indexesByKey = function(action) {
        var opt = {
          "home": [_this.matrix.current[0], -1, 0, 1],
          "end": [_this.matrix.current[0], _this.matrix.columns + 1, 0, -1],
          "ctrlHome": [0, -1, 0, 1],
          "ctrlEnd": [_this.matrix.rows, _this.matrix.columns + 1, 0, -1]
        };
        return opt["" + action] || null;
      };
    }
    ContentFocus2.prototype.getTable = function() {
      return this.parent.getContentTable();
    };
    ContentFocus2.prototype.onKeyPress = function(e) {
      var isMacLike = /(Mac)/i.test(navigator.platform);
      if (isMacLike && e.metaKey) {
        if (e.action === "home") {
          e.action = "ctrlHome";
        } else if (e.action === "end") {
          e.action = "ctrlEnd";
        } else if (["downArrow", "upArrow", "leftArrow", "rightArrow"].indexOf(e.action) !== -1) {
          return;
        }
      }
      var navigators = this.keyActions[e.action];
      var current = this.getCurrentFromAction(e.action, navigators, e.action in this.keyActions, e);
      if (!current) {
        return;
      }
      if ((["tab", "shiftTab"].indexOf(e.action) > -1 && this.matrix.current || []).toString() === current.toString() || this.parent.allowPaging && !this.parent.pagerModule.pagerObj.checkPagerHasFocus() && this.matrix.current[0] === this.matrix.rows && (this.parent.editSettings.mode === "Batch" && this.parent.editSettings.allowAdding && e.keyCode === 40 || e.keyCode === 40)) {
        if (current.toString() === [this.matrix.rows, this.matrix.columns].toString() || current.toString() === [0, 0].toString() || this.matrix.current[0] === this.matrix.rows && this.matrix.current.toString() === current.toString() || this.parent.allowGrouping && this.parent.infiniteScrollSettings.enableCache && current.toString() === [0, 1].toString()) {
          return false;
        } else {
          current = this.editNextRow(current[0], current[1], e.action);
        }
      }
      this.matrix.select(current[0], current[1]);
    };
    ContentFocus2.prototype.editNextRow = function(rowIndex, cellIndex, action) {
      var gObj = this.parent;
      var editNextRow = gObj.editSettings.allowNextRowEdit && (gObj.isEdit || gObj.isLastCellPrimaryKey);
      var visibleIndex = gObj.getColumnIndexByField(gObj.getVisibleColumns()[0].field);
      var row2 = this.getTable().rows[parseInt(rowIndex.toString(), 10)];
      var cell = gObj.editSettings.showAddNewRow && row2.classList.contains("e-addedrow") ? row2.querySelectorAll("td:not(.e-editcell)")[parseInt(cellIndex.toString(), 10)] : row2.cells[parseInt(cellIndex.toString(), 10)];
      if (action === "tab" && editNextRow) {
        rowIndex++;
        var index = this.getTable().rows[parseInt(rowIndex.toString(), 10)].getElementsByClassName("e-indentcell").length + this.getTable().rows[parseInt(rowIndex.toString(), 10)].getElementsByClassName("e-detailrowcollapse").length;
        cellIndex = visibleIndex + index;
      }
      if (action === "shiftTab" && editNextRow) {
        rowIndex--;
        cellIndex = gObj.getColumnIndexByField(gObj.getVisibleColumns()[gObj.getVisibleColumns().length - 1].field);
      }
      return !cell.classList.contains(rowCell) && !cell.classList.contains("e-headercell") && !cell.classList.contains("e-groupcaption") && !cell.classList.contains("e-filterbarcell") ? this.editNextRow(rowIndex, cellIndex, action) : [rowIndex, cellIndex];
    };
    ContentFocus2.prototype.getCurrentFromAction = function(action, navigator2, isPresent, e) {
      if (navigator2 === void 0) {
        navigator2 = [0, 0];
      }
      if (!isPresent && !this.indexesByKey(action) || this.matrix.current.length === 0) {
        return null;
      }
      if (!this.shouldFocusChange(e)) {
        return this.matrix.current;
      }
      var _a = this.indexesByKey(action) || this.matrix.current.concat(navigator2), rowIndex = _a[0], cellIndex = _a[1], rN = _a[2], cN = _a[3];
      if (this.parent.allowGrouping && !isNullOrUndefined(this.parent.groupSettings.columns) && this.parent.groupSettings.columns.length && this.parent.aggregates.length && action === "enter") {
        for (var i = rowIndex; i < this.matrix.matrix.length; i++) {
          var row2 = this.getTable().rows[i + 1];
          if (row2 && row2.cells[parseInt(cellIndex.toString(), 10)] && row2.cells[parseInt(cellIndex.toString(), 10)].classList.contains("e-rowcell")) {
            return [i + 1, cellIndex];
          }
          if (i === this.matrix.matrix.length - 1) {
            return [rowIndex, cellIndex];
          }
        }
      }
      if (action === "ctrlEnd" || action === "end") {
        var lastContentCellIndex = [this.matrix.matrix.length - 1, this.matrix.matrix[this.matrix.matrix.length - 1].length - 1];
        if (action === "end") {
          lastContentCellIndex = [rowIndex, this.matrix.matrix[parseInt(rowIndex.toString(), 10)].length - 1];
        }
        if (this.matrix.matrix[lastContentCellIndex[0]][lastContentCellIndex[1]] === 0) {
          lastContentCellIndex = findCellIndex(this.matrix.matrix, lastContentCellIndex, false);
        }
        rowIndex = lastContentCellIndex[0];
        cellIndex = lastContentCellIndex[1] + 1;
      }
      var current = this.matrix.get(rowIndex, cellIndex, [rN, cN], action, this.validator(), this);
      return current;
    };
    ContentFocus2.prototype.checkRowCellFocus = function(target) {
      return target.classList.contains(rowCell) ? target.classList.contains("e-focused") : true;
    };
    ContentFocus2.prototype.onClick = function(e, force) {
      var target = e.target;
      this.target = target;
      target = target.classList.contains(rowCell) ? target : closest(target, "td");
      target = target ? target : closest(e.target, "td.e-detailrowcollapse") || closest(e.target, "td.e-detailrowexpand");
      target = closest(e.target, "td.e-detailcell") ? isNullOrUndefined(closest(closest(e.target, ".e-grid"), "td.e-detailcell")) ? null : target : target;
      target = target && closest(target, "table").classList.contains(table) ? target : null;
      if (!target) {
        return false;
      }
      var rowIdx = target.parentElement.rowIndex;
      if (this.parent.editSettings.showAddNewRow && parentsUntil(target, "e-addedrow")) {
        rowIdx = parentsUntil(target, "e-addedrow").rowIndex;
      }
      var _a = [rowIdx, target.cellIndex], rowIndex = _a[0], cellIndex = _a[1];
      var _b = this.matrix.current, oRowIndex = _b[0], oCellIndex = _b[1];
      var val = getValue(rowIndex + "." + cellIndex, this.matrix.matrix);
      if (this.matrix.inValid(val) || !force && oRowIndex === rowIndex && oCellIndex === cellIndex && this.checkRowCellFocus(target) || !parentsUntil(e.target, rowCell) && !parentsUntil(e.target, "e-groupcaption") && !parentsUntil(e.target, "e-recordpluscollapse") && !parentsUntil(e.target, "e-recordplusexpand") && !parentsUntil(e.target, "e-detailrowcollapse") && !parentsUntil(e.target, "e-detailrowexpand") && !parentsUntil(e.target, "e-templatecell")) {
        return false;
      }
      this.matrix.select(rowIndex, cellIndex);
    };
    ContentFocus2.prototype.getFocusInfo = function() {
      var info = {};
      var _a = this.matrix.current, _b = _a[0], rowIndex = _b === void 0 ? 0 : _b, _c = _a[1], cellIndex = _c === void 0 ? 0 : _c;
      this.matrix.current = [rowIndex, cellIndex];
      var row2 = this.getTable().rows[parseInt(rowIndex.toString(), 10)];
      info.element = !isNullOrUndefined(row2) ? this.parent.editSettings.showAddNewRow && row2.classList.contains("e-addedrow") ? row2.querySelectorAll("td:not(.e-editcell)")[parseInt(cellIndex.toString(), 10)] : row2.cells[parseInt(cellIndex.toString(), 10)] : null;
      if (!info.element) {
        return info;
      }
      info.elementToFocus = (!info.element.classList.contains("e-unboundcell") || this.parent.editSettings.showAddNewRow && info.element.classList.contains("e-unboundcell") && parentsUntil(info.element, "e-addedrow")) && !info.element.classList.contains("e-detailcell") ? this.getFocusable(info.element) : info.element;
      info.elementToFocus = info.element.classList.contains("e-detailcell") && info.element.querySelector(".e-childgrid") ? info.element.querySelector(".e-childgrid") : info.elementToFocus;
      if (this.parent.editSettings.mode === "Batch" && this.parent.isEdit && info.elementToFocus.tagName.toLowerCase() === "input" && info.elementToFocus.classList.contains("e-dropdownlist")) {
        info.elementToFocus = info.elementToFocus.parentElement;
      }
      info.outline = true;
      info.uid = info.element.parentElement.getAttribute("data-uid");
      return info;
    };
    ContentFocus2.prototype.getFocusable = function(element) {
      var query = 'button, [href], input:not([type="hidden"]), select, textarea, [tabindex]:not([tabindex="-1"])';
      var isTemplate = !isNullOrUndefined(closest(element, ".e-templatecell"));
      if (this.parent.isEdit) {
        var commandCellQuery = this.parent.editSettings.showAddNewRow && parentsUntil(element, "e-addedrow") ? ", button:not(.e-hide)" : "";
        query = 'input:not([type="hidden"]), select:not([aria-hidden="true"]), textarea' + commandCellQuery;
      }
      var child = [].slice.call(element.querySelectorAll(query));
      if (element.classList.contains("e-fltrtemp")) {
        var focusElement = [].slice.call(element.querySelectorAll(".e-fltrtemp-focus"));
        if (this.focusType === "click" && this.target && this.target.classList.contains("e-fltrtemp-focus")) {
          return this.target;
        } else if (this.focusType === "key" && focusElement.length && (this.action === "tab" || this.action === "shiftTab")) {
          var elementIndex = focusElement.indexOf(this.currentTarget);
          return elementIndex === -1 ? focusElement[this.action === "tab" ? 0 : focusElement.length - 1] : focusElement[this.action === "tab" ? elementIndex + 1 : elementIndex - 1];
        }
      }
      return child.length ? isTemplate && child.length > 1 && !(this.parent.editSettings.mode === "Batch" && this.parent.isEdit && this.target) ? this.target ? this.target : element : child[0] : element;
    };
    ContentFocus2.prototype.selector = function(row2, cell, isRowTemplate) {
      var types = [CellType.Expand, CellType.GroupCaption, CellType.CaptionSummary, CellType.GroupSummary];
      return (row2.isDataRow && cell.visible && (cell.isDataCell || cell.isTemplate) || row2.isDataRow && cell.cellType === CellType.DetailExpand && isNullOrUndefined(cell.visible) || !row2.isDataRow && types.indexOf(cell.cellType) > -1 && !((cell.cellType === CellType.GroupSummary || cell.cellType === CellType.CaptionSummary) && !(cell.isDataCell && cell.visible)) || cell.column && cell.visible && cell.column.type === "checkbox" || cell.cellType === CellType.CommandColumn || row2.isDataRow && isRowTemplate) && !(row2.edit === "delete" && row2.isDirty);
    };
    ContentFocus2.prototype.nextRowFocusValidate = function(index) {
      var lastIndex = index;
      for (var i = index, len = this.matrix.rows; i <= len; i++) {
        if (this.matrix.matrix[parseInt(index.toString(), 10)].indexOf(1) === -1) {
          index = index + 1;
        } else {
          return index;
        }
      }
      this.lastIdxCell = true;
      return lastIndex;
    };
    ContentFocus2.prototype.previousRowFocusValidate = function(index) {
      var firstIndex = index;
      for (var i = index, len = 0; i >= len; i--) {
        if (this.matrix.matrix[parseInt(index.toString(), 10)].indexOf(1) === -1) {
          index = index - 1;
          if (index < 0) {
            this.lastIdxCell = true;
            return firstIndex;
          }
        } else {
          return index;
        }
      }
      return firstIndex;
    };
    ContentFocus2.prototype.jump = function(action, current) {
      this.lastIdxCell = false;
      var enterFrozen = this.parent.frozenRows !== 0 && action === "shiftEnter";
      var headerSwap = (action === "upArrow" || enterFrozen) && current[0] === 0;
      if (this.matrix.matrix[current[0]]) {
        if (action === "tab" && this.matrix.matrix.length && current[1] === this.matrix.matrix[current[0]].lastIndexOf(1) && this.matrix.matrix.length - 1 !== current[0]) {
          this.matrix.current[0] = this.nextRowFocusValidate(this.matrix.current[0] + 1);
          this.matrix.current[1] = -1;
        }
      }
      if (action === "shiftTab" && current[0] !== 0 && this.matrix.matrix[current[0]].indexOf(1) === current[1]) {
        this.matrix.current[0] = this.previousRowFocusValidate(this.matrix.current[0] - 1);
        this.matrix.current[1] = this.matrix.matrix[current[0]].length;
      }
      var isHeaderFocus = false;
      var row2 = parentsUntil(document.activeElement, "e-addedrow") && this.parent.editSettings.showAddNewRow ? parentsUntil(document.activeElement, "e-addedrow") : document.activeElement.parentElement;
      if ((this.parent.enableVirtualization || this.parent.infiniteScrollSettings.enableCache) && !isNullOrUndefined(row2) && row2.classList.contains(row)) {
        var rowIndex = parseInt(row2.getAttribute(ariaRowIndex), 10) - 1;
        isHeaderFocus = rowIndex > 0;
      }
      var info = {
        swap: !isHeaderFocus ? (action === "upArrow" || enterFrozen) && current[0] === 0 : false,
        toHeader: headerSwap
      };
      return info;
    };
    ContentFocus2.prototype.getNextCurrent = function(previous, swap, active, action) {
      if (previous === void 0) {
        previous = [];
      }
      var current = [];
      if (action === "rightArrow" || action === "tab") {
        current[0] = previous[0];
        current[1] = -1;
      }
      if (action === "downArrow" || action === "enter") {
        current[0] = -1;
        current[1] = previous[1];
      }
      return current;
    };
    ContentFocus2.prototype.generateRows = function(rows, optionals) {
      var _a;
      var matrix = optionals.matrix, handlerInstance = optionals.handlerInstance;
      var len = handlerInstance.matrix.matrix.length;
      var defaultLen = this.parent.allowFiltering && this.parent.filterSettings.type === "FilterBar" ? len + 1 : len;
      handlerInstance.matrix.matrix = handlerInstance.matrix.matrix.slice(0, defaultLen);
      handlerInstance.matrix.rows = defaultLen;
      (_a = handlerInstance.matrix.matrix).push.apply(_a, matrix);
      handlerInstance.matrix.rows += matrix.length;
    };
    ContentFocus2.prototype.getInfo = function(e) {
      var info = this.getFocusInfo();
      var _a = this.matrix.current, rIndex = _a[0], cIndex = _a[1];
      var isData = info.element.classList.contains(rowCell);
      var isSelectable = isData || e && e.action !== "enter" && (info.element.classList.contains("e-detailrowcollapse") || info.element.classList.contains("e-detailrowexpand"));
      var _b = [Math.min(parseInt(info.element.parentElement.getAttribute(ariaRowIndex), 10) - 1, rIndex), Math.min(parseInt(info.element.getAttribute(ariaColIndex), 10) - 1, cIndex)], rowIndex = _b[0], cellIndex = _b[1];
      if (this.parent.allowGrouping && this.parent.groupSettings.enableLazyLoading && isData) {
        rowIndex = this.parent.getDataRows().indexOf(info.element.parentElement);
      }
      if (this.parent.enableVirtualization && this.parent.groupSettings.columns.length) {
        rowIndex = rIndex;
        cellIndex = cIndex;
      }
      if (this.parent.editSettings.showAddNewRow && this.parent.editSettings.newRowPosition === "Top" && !this.parent.enableVirtualization && !this.parent.enableInfiniteScrolling && e && e.action === "downArrow") {
        rowIndex++;
      }
      return {
        isContent: true,
        isDataCell: isData,
        indexes: [rowIndex, cellIndex],
        isSelectable
      };
    };
    ContentFocus2.prototype.validator = function() {
      var table2 = this.getTable();
      return function(rowIndex, cellIndex, action) {
        if (!isNullOrUndefined(table2.rows[parseInt(rowIndex.toString(), 10)])) {
          var cell = void 0;
          cellIndex = table2.querySelector(".e-emptyrow") ? 0 : cellIndex;
          if (table2.rows[parseInt(rowIndex.toString(), 10)].cells[0].classList.contains("e-editcell")) {
            cell = table2.rows[parseInt(rowIndex.toString(), 10)].cells[0].querySelectorAll("td")[parseInt(cellIndex.toString(), 10)];
          } else {
            cell = table2.rows[parseInt(rowIndex.toString(), 10)].cells[parseInt(cellIndex.toString(), 10)];
          }
          var isCellWidth = cell.getBoundingClientRect().width !== 0;
          if (action === "enter" || action === "shiftEnter") {
            return isCellWidth && cell.classList.contains(rowCell);
          }
          if ((action === "shiftUp" || action === "shiftDown") && cell.classList.contains(rowCell)) {
            return isCellWidth;
          } else if (action !== "shiftUp" && action !== "shiftDown") {
            return isCellWidth;
          }
        }
        return false;
      };
    };
    ContentFocus2.prototype.shouldFocusChange = function(e) {
      var _a = this.matrix.current, _b = _a[0], rIndex = _b === void 0 ? -1 : _b, _c = _a[1], cIndex = _c === void 0 ? -1 : _c;
      if (rIndex < 0 || cIndex < 0) {
        return true;
      }
      var cell = getValue(rIndex + ".cells." + cIndex, this.getTable().rows);
      if (!cell) {
        return true;
      }
      return e.action === "enter" || e.action === "shiftEnter" ? cell.classList.contains(rowCell) && !cell.classList.contains("e-unboundcell") || cell.classList.contains("e-editedbatchcell") && !cell.classList.contains("e-detailcell") : true;
    };
    ContentFocus2.prototype.getGridSeletion = function() {
      return this.parent.allowSelection && this.parent.selectionSettings.allowColumnSelection;
    };
    return ContentFocus2;
  }()
);
var HeaderFocus = (
  /** @class */
  function(_super) {
    __extends13(HeaderFocus2, _super);
    function HeaderFocus2(parent) {
      return _super.call(this, parent) || this;
    }
    HeaderFocus2.prototype.getTable = function() {
      return this.parent.getHeaderTable();
    };
    HeaderFocus2.prototype.onClick = function(e) {
      this.focusType = "click";
      var target = e.target;
      this.target = target;
      target = target.classList.contains("e-headercell") ? target : closest(target, "th");
      if (!target && (this.parent.frozenRows !== 0 || (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) && this.parent.editSettings.showAddNewRow)) {
        target = e.target.classList.contains(rowCell) ? e.target : closest(e.target, "td");
      }
      if (e.target.classList.contains("e-columnheader") || e.target.querySelector(".e-stackedheadercell")) {
        return false;
      }
      if (!target) {
        return;
      }
      var rowIdx = target.parentElement.rowIndex;
      if (this.parent.editSettings.showAddNewRow && parentsUntil(target, "e-addedrow")) {
        rowIdx = parentsUntil(target, "e-addedrow").rowIndex;
      }
      var _a = [rowIdx, target.cellIndex], rowIndex = _a[0], cellIndex = _a[1];
      var val = getValue(rowIndex + "." + cellIndex, this.matrix.matrix);
      if (this.matrix.inValid(val)) {
        return false;
      }
      this.matrix.select(rowIdx, target.cellIndex);
    };
    HeaderFocus2.prototype.getFocusInfo = function() {
      var info = {};
      var _a = this.matrix.current, _b = _a[0], rowIndex = _b === void 0 ? 0 : _b, _c = _a[1], cellIndex = _c === void 0 ? 0 : _c;
      var row2 = this.getTable().rows[parseInt(rowIndex.toString(), 10)];
      info.element = !isNullOrUndefined(row2) ? this.parent.editSettings.showAddNewRow && row2.classList.contains("e-addedrow") ? row2.querySelectorAll("td:not(.e-editcell)")[parseInt(cellIndex.toString(), 10)] : row2.cells[parseInt(cellIndex.toString(), 10)] : null;
      if (!isNullOrUndefined(info.element)) {
        info.elementToFocus = this.getFocusable(info.element);
        info.outline = !info.element.classList.contains("e-filterbarcell");
      }
      return info;
    };
    HeaderFocus2.prototype.selector = function(row2, cell) {
      return cell.visible && (cell.column.field !== void 0 || cell.isTemplate || !isNullOrUndefined(cell.column.template) || !isNullOrUndefined(cell.column.commands) || cell.column.type === "checkbox") || cell.cellType === CellType.StackedHeader;
    };
    HeaderFocus2.prototype.jump = function(action, current) {
      var enterFrozen = this.parent.frozenRows !== 0 && action === "enter";
      var isLastCell;
      var lastRow;
      if (this.parent.enableHeaderFocus && action === "tab") {
        lastRow = this.matrix.matrix.length - 1 === current[0];
        isLastCell = current[1] === this.matrix.matrix[current[0]].lastIndexOf(1);
        if (isLastCell) {
          if (!lastRow) {
            this.matrix.current[0] = this.matrix.current[0] + 1;
          } else {
            this.matrix.current[0] = 0;
          }
          this.matrix.current[1] = -1;
        }
      }
      return {
        swap: (action === "downArrow" || enterFrozen) && current[0] === this.matrix.matrix.length - 1 || action === "tab" && lastRow && isLastCell
      };
    };
    HeaderFocus2.prototype.getNextCurrent = function(previous, swap, active, action) {
      if (previous === void 0) {
        previous = [];
      }
      var current1 = [];
      if (action === "rightArrow" || action === "shiftRight" && this.getGridSeletion() || action === "tab") {
        current1[0] = previous[0];
        current1[1] = -1;
      }
      if (action === "upArrow" || action === "shiftEnter") {
        current1[0] = this.matrix.matrix.length;
        current1[1] = previous[1];
      }
      return current1;
    };
    HeaderFocus2.prototype.generateRows = function(rows) {
      var length = this.matrix.matrix.length;
      if (this.parent.allowFiltering && this.parent.filterSettings.type === "FilterBar") {
        this.matrix.rows = ++this.matrix.rows;
        var cells = rows[0].cells;
        var incrementNumber = 0;
        for (var i = 0; i < cells.length; i++) {
          if (cells[parseInt(i.toString(), 10)].column && cells[parseInt(i.toString(), 10)].column.columns) {
            incrementNumber = this.checkFilterColumn(cells[parseInt(i.toString(), 10)].column.columns, length, incrementNumber);
          } else {
            this.matrix.set(length, incrementNumber, cells[parseInt(i.toString(), 10)].visible && cells[parseInt(i.toString(), 10)].column.allowFiltering !== false);
            incrementNumber++;
          }
        }
      }
    };
    HeaderFocus2.prototype.checkFilterColumn = function(rowColumns, rowIndex, columnIndex) {
      var columns = rowColumns;
      var incrementNumber = columnIndex;
      for (var i = 0; i < columns.length; i++) {
        if (columns[parseInt(i.toString(), 10)].columns) {
          incrementNumber = this.checkFilterColumn(columns[parseInt(i.toString(), 10)].columns, rowIndex, incrementNumber);
        } else {
          this.matrix.set(rowIndex, incrementNumber, columns[parseInt(i.toString(), 10)].visible && columns[parseInt(i.toString(), 10)].allowFiltering !== false);
          incrementNumber++;
        }
      }
      return incrementNumber;
    };
    HeaderFocus2.prototype.getInfo = function(e) {
      return extend(_super.prototype.getInfo.call(this, e), {
        isContent: false,
        isHeader: true
      });
    };
    HeaderFocus2.prototype.validator = function() {
      return function() {
        return true;
      };
    };
    HeaderFocus2.prototype.shouldFocusChange = function(e) {
      var _a = this.matrix.current, rowIndex = _a[0], columnIndex = _a[1];
      if (rowIndex < 0 || columnIndex < 0) {
        return true;
      }
      var cell = getValue(rowIndex + ".cells." + columnIndex, this.getTable().rows);
      if (!cell) {
        return true;
      }
      return e.action === "enter" || e.action === "altDownArrow" ? !cell.classList.contains("e-headercell") : true;
    };
    HeaderFocus2.prototype.getHeaderType = function() {
      return "HeaderFocus";
    };
    return HeaderFocus2;
  }(ContentFocus)
);
var SearchBox = (
  /** @class */
  function() {
    function SearchBox2(searchBox, serviceLocator) {
      this.searchBox = searchBox;
      this.serviceLocator = serviceLocator;
      this.l10n = this.serviceLocator.getService("localization");
    }
    SearchBox2.prototype.searchFocus = function(args) {
      args.target.parentElement.classList.add("e-input-focus");
      if (args.target.classList.contains("e-input") && args.target.classList.contains("e-search") && args.target.value) {
        var sIcon = args.target.parentElement.querySelector(".e-sicon");
        sIcon.classList.add("e-clear-icon");
        sIcon.setAttribute("title", this.l10n.getConstant("Clear"));
        sIcon.style.cursor = "pointer";
      }
    };
    SearchBox2.prototype.searchBlur = function(args) {
      var relatedTarget = args.relatedTarget ? args.relatedTarget : null;
      if (relatedTarget && relatedTarget.classList.contains("e-sicon")) {
        if (relatedTarget.classList.contains("e-clear-icon")) {
          args.target.parentElement.classList.remove("e-input-focus");
        }
      } else {
        args.target.parentElement.classList.remove("e-input-focus");
      }
      if (args.target.classList.contains("e-search") && (relatedTarget && !relatedTarget.classList.contains("e-sicon e-clear-icon") && !relatedTarget.classList.contains("e-sicon") || isNullOrUndefined(relatedTarget))) {
        var sIcon = args.target.parentElement.querySelector(".e-sicon");
        sIcon.classList.remove("e-clear-icon");
        sIcon.removeAttribute("title");
        sIcon.style.cursor = "default";
      }
    };
    SearchBox2.prototype.wireEvent = function() {
      if (this.searchBox) {
        EventHandler.add(this.searchBox, "focus", this.searchFocus, this);
        EventHandler.add(this.searchBox, "blur", this.searchBlur, this);
      }
    };
    SearchBox2.prototype.unWireEvent = function() {
      if (this.searchBox) {
        EventHandler.remove(this.searchBox, "focus", this.searchFocus);
        EventHandler.remove(this.searchBox, "blur", this.searchBlur);
      }
    };
    return SearchBox2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/models/page-settings.js
var __extends14 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PageSettings = (
  /** @class */
  function(_super) {
    __extends14(PageSettings2, _super);
    function PageSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([Property(12)], PageSettings2.prototype, "pageSize", void 0);
    __decorate([Property(8)], PageSettings2.prototype, "pageCount", void 0);
    __decorate([Property(1)], PageSettings2.prototype, "currentPage", void 0);
    __decorate([Property()], PageSettings2.prototype, "totalRecordsCount", void 0);
    __decorate([Property(false)], PageSettings2.prototype, "enableQueryString", void 0);
    __decorate([Property(false)], PageSettings2.prototype, "pageSizes", void 0);
    __decorate([Property(null)], PageSettings2.prototype, "template", void 0);
    return PageSettings2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-grids/src/grid/models/column-chooser-settings.js
var __extends15 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate2 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ColumnChooserSettings = (
  /** @class */
  function(_super) {
    __extends15(ColumnChooserSettings2, _super);
    function ColumnChooserSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate2([Property("startsWith")], ColumnChooserSettings2.prototype, "operator", void 0);
    __decorate2([Property(false)], ColumnChooserSettings2.prototype, "ignoreAccent", void 0);
    __decorate2([Property(null)], ColumnChooserSettings2.prototype, "headerTemplate", void 0);
    __decorate2([Property(null)], ColumnChooserSettings2.prototype, "template", void 0);
    __decorate2([Property(null)], ColumnChooserSettings2.prototype, "footerTemplate", void 0);
    __decorate2([Property(true)], ColumnChooserSettings2.prototype, "enableSearching", void 0);
    __decorate2([Property(null)], ColumnChooserSettings2.prototype, "renderCustomColumnChooser", void 0);
    return ColumnChooserSettings2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/selection.js
var Selection = (
  /** @class */
  function() {
    function Selection2(parent, selectionSettings, locator) {
      this.selectedRowIndexes = [];
      this.selectedRowCellIndexes = [];
      this.selectedRecords = [];
      this.preventFocus = false;
      this.selectedColumnsIndexes = [];
      this.checkBoxState = false;
      this.isMultiShiftRequest = false;
      this.isMultiCtrlRequest = false;
      this.isMultiCtrlRequestCell = false;
      this.enableSelectMultiTouch = false;
      this.clearRowCheck = false;
      this.selectRowCheck = false;
      this.selectedRowState = {};
      this.unSelectedRowState = {};
      this.totalRecordsCount = 0;
      this.chkAllCollec = [];
      this.isCheckedOnAdd = false;
      this.persistSelectedData = [];
      this.virtualSelectedData = [];
      this.deSelectedData = [];
      this.isHdrSelectAllClicked = false;
      this.needColumnSelection = false;
      this.isCancelDeSelect = false;
      this.isPreventCellSelect = false;
      this.disableUI = false;
      this.isPersisted = false;
      this.cmdKeyPressed = false;
      this.cellselected = false;
      this.isMultiSelection = false;
      this.isAddRowsToSelection = false;
      this.initialRowSelection = false;
      this.isPrevRowSelection = false;
      this.isKeyAction = false;
      this.isRowDragSelected = false;
      this.isPartialSelection = false;
      this.rmtHdrChkbxClicked = false;
      this.isCheckboxReset = false;
      this.isRowDeselect = false;
      this.autoFillRLselection = true;
      this.isFocusLastCell = false;
      this.bottom = "0 0 2px 0";
      this.top = "2px 0 0 0";
      this.right_bottom = "0 2px 2px 0";
      this.bottom_left = "0 0 2px 2px";
      this.top_right = "2px 2px 0 0";
      this.top_left = "2px 0 0 2px";
      this.top_bottom = "2px 0 2px 0";
      this.top_right_bottom = "2px 2px 2px 0";
      this.top_bottom_left = "2px 0 2px 2px";
      this.top_right_left = "2px 2px 0 2px";
      this.right_bottom_left = "0 2px 2px 2px";
      this.all_border = "2px";
      this.parent = parent;
      this.selectionSettings = selectionSettings;
      this.factory = locator.getService("rendererFactory");
      this.focus = locator.getService("focus");
      this.addEventListener();
      this.wireEvents();
    }
    Selection2.prototype.initializeSelection = function() {
      this.parent.log("selection_key_missing");
      this.render();
    };
    Selection2.prototype.onActionBegin = function(args, type) {
      this.parent.trigger(type, this.fDataUpdate(args));
    };
    Selection2.prototype.fDataUpdate = function(args) {
      if (!this.isMultiSelection && (!isNullOrUndefined(args.cellIndex) || !isNullOrUndefined(args.rowIndex))) {
        var rowObj = this.getRowObj(isNullOrUndefined(args.rowIndex) ? isNullOrUndefined(args.cellIndex) ? this.currentIndex : args.cellIndex.rowIndex : args.rowIndex);
        args.foreignKeyData = rowObj.foreignKeyData;
      }
      return args;
    };
    Selection2.prototype.onActionComplete = function(args, type) {
      this.parent.trigger(type, this.fDataUpdate(args));
      this.isMultiSelection = false;
    };
    Selection2.prototype.getModuleName = function() {
      return "selection";
    };
    Selection2.prototype.destroy = function() {
      var gridElement = this.parent.element;
      if (!gridElement || !gridElement.querySelector("." + gridHeader) && !gridElement.querySelector("." + gridContent)) {
        return;
      }
      this.hidePopUp();
      this.clearSelection();
      this.destroyAutoFillElements();
      this.removeEventListener();
      this.unWireEvents();
      EventHandler.remove(this.parent.getContent(), "mousedown", this.mouseDownHandler);
      EventHandler.remove(this.parent.getHeaderContent(), "mousedown", this.mouseDownHandler);
    };
    Selection2.prototype.isEditing = function() {
      return (this.parent.editSettings.mode === "Normal" || this.parent.editSettings.mode === "Batch" && this.parent.editModule && this.parent.editModule.formObj && !this.parent.editModule.formObj.validate()) && this.parent.isEdit && !this.parent.editSettings.showAddNewRow && !this.parent.isPersistSelection;
    };
    Selection2.prototype.getCurrentBatchRecordChanges = function() {
      var gObj = this.parent;
      if (gObj.editSettings.mode === "Batch" && gObj.editModule) {
        var currentRecords = iterateExtend(this.parent.getCurrentViewRecords());
        currentRecords = gObj.editSettings.newRowPosition === "Bottom" ? currentRecords.concat(this.parent.editModule.getBatchChanges()[addedRecords]) : this.parent.editModule.getBatchChanges()[addedRecords].concat(currentRecords);
        var deletedRecords2 = this.parent.editModule.getBatchChanges()[deletedRecords];
        var primaryKey = this.parent.getPrimaryKeyFieldNames()[0];
        for (var i = 0; i < deletedRecords2.length; i++) {
          for (var j = 0; j < currentRecords.length; j++) {
            if (deletedRecords2[parseInt(i.toString(), 10)]["" + primaryKey] === currentRecords[parseInt(j.toString(), 10)]["" + primaryKey]) {
              currentRecords.splice(j, 1);
              break;
            }
          }
        }
        return currentRecords;
      } else if (this.parent.enableVirtualization && this.parent.groupSettings.columns.length && !this.parent.isPersistSelection) {
        var selectedGroupedData = gObj.getCurrentViewRecords().filter(function(col) {
          return col["key"] === void 0;
        });
        return selectedGroupedData;
      } else {
        return gObj.getCurrentViewRecords();
      }
    };
    Selection2.prototype.selectRow = function(index, isToggle) {
      if (this.selectedRowIndexes.length && this.selectionSettings.enableSimpleMultiRowSelection) {
        this.addRowsToSelection([index]);
        return;
      }
      var gObj = this.parent;
      var selectedRow = gObj.getRowByIndex(index);
      var rowObj = selectedRow && gObj.getRowObjectFromUID(selectedRow.getAttribute("data-uid"));
      if (this.isPartialSelection && rowObj && rowObj.isDataRow && !rowObj.isSelectable) {
        return;
      }
      var selectData;
      var isRemoved = false;
      if (gObj.enableVirtualization && index > -1) {
        var e = {
          selectedIndex: index,
          isAvailable: true
        };
        this.parent.notify(selectVirtualRow, e);
        if (selectedRow && gObj.getRowObjectFromUID(selectedRow.getAttribute("data-uid"))) {
          selectData = gObj.getRowObjectFromUID(selectedRow.getAttribute("data-uid")).data;
        } else {
          if (e.isAvailable && !gObj.selectionSettings.persistSelection) {
            var prevSelectedData = this.parent.getSelectedRecords();
            if (prevSelectedData.length > 0) {
              this.clearRowSelection();
            }
          }
          return;
        }
      } else {
        selectData = this.getRowObj(index).data;
      }
      if (!this.isRowType() || !selectedRow || this.isEditing()) {
        return;
      }
      var isRowSelected = selectedRow.hasAttribute("aria-selected");
      this.activeTarget();
      if (!isToggle || !this.selectedRowIndexes.length) {
        isToggle = false;
      } else {
        var isCheckboxModeResetOnRowClick = this.selectionSettings.checkboxMode === "ResetOnRowClick";
        var isSelectionTypeMultiple = !this.parent.isCheckBoxSelection && this.selectionSettings.type === "Multiple";
        if (!isCheckboxModeResetOnRowClick && !isSelectionTypeMultiple || this.selectedRowIndexes.length === 1 && (isCheckboxModeResetOnRowClick || isSelectionTypeMultiple)) {
          isToggle = !(this.isKeyAction && this.parent.isCheckBoxSelection) ? this.selectedRowIndexes.indexOf(index) !== -1 : false;
        } else {
          isToggle = false;
        }
      }
      this.isKeyAction = false;
      var args;
      var can = "cancel";
      if (!isToggle) {
        args = {
          data: selectData,
          rowIndex: index,
          isCtrlPressed: this.isMultiCtrlRequest,
          isShiftPressed: this.isMultiShiftRequest,
          row: selectedRow,
          previousRow: gObj.getRowByIndex(this.prevRowIndex),
          previousRowIndex: this.prevRowIndex,
          target: this.actualTarget,
          cancel: false,
          isInteracted: this.isInteracted,
          isHeaderCheckboxClicked: this.isHeaderCheckboxClicked
        };
        this.parent.trigger(rowSelecting, this.fDataUpdate(args), this.rowSelectingCallBack(args, isToggle, index, selectData, isRemoved, isRowSelected, can));
      } else {
        if (this.selectionSettings.checkboxMode !== "ResetOnRowClick" && this.selectionSettings.persistSelection) {
          this.rowDeselect(rowDeselecting, [rowObj.index], [rowObj.data], [selectedRow], [rowObj.foreignKeyData], this.actualTarget);
          if (this.isCancelDeSelect) {
            return;
          }
          if (!this.parent.isCheckBoxSelection) {
            this.selectedRowIndexes = [];
            this.selectedRecords = [];
            this.isRowSelected = false;
            this.selectRowIndex(-1);
          }
          this.rowDeselect(rowDeselected, [rowObj.index], [rowObj.data], [selectedRow], [rowObj.foreignKeyData], this.actualTarget, void 0, void 0, void 0);
        }
        this.rowSelectingCallBack(args, isToggle, index, selectData, isRemoved, isRowSelected, can)(args);
      }
    };
    Selection2.prototype.rowSelectingCallBack = function(args, isToggle, index, selectData, isRemoved, isRowSelected, can) {
      var _this = this;
      return function(args2) {
        if (!isNullOrUndefined(args2) && args2["" + can] === true) {
          _this.disableInteracted();
          return;
        }
        _this.index = index;
        _this.toggle = isToggle;
        _this.data = selectData;
        _this.removed = isRemoved;
        if (isRowSelected && _this.selectionSettings.persistSelection && !(_this.selectionSettings.checkboxMode === "ResetOnRowClick")) {
          _this.clearSelectedRow(index);
          _this.selectRowCallBack();
        } else if (!isRowSelected && _this.selectionSettings.persistSelection && _this.parent.isCheckBoxSelection && _this.selectionSettings.checkboxMode !== "ResetOnRowClick") {
          _this.selectRowCallBack();
        }
        if (_this.selectionSettings.checkboxMode === "ResetOnRowClick") {
          _this.isCheckboxReset = true;
          _this.clearSelection();
        }
        if (!_this.selectionSettings.persistSelection || _this.selectionSettings.checkboxMode === "ResetOnRowClick" || !_this.parent.isCheckBoxSelection && _this.selectionSettings.persistSelection) {
          _this.selectRowCheck = true;
          _this.clearRow();
        }
      };
    };
    Selection2.prototype.selectRowCallBack = function() {
      var gObj = this.parent;
      var args;
      var index = this.index;
      var isToggle = this.toggle;
      var selectData = this.data;
      var isRemoved = this.removed;
      var selectedRow = gObj.getRowByIndex(index);
      if (!isToggle && !isRemoved) {
        if (this.selectedRowIndexes.indexOf(index) <= -1) {
          this.updateRowSelection(selectedRow, index);
        }
        this.selectRowIndex(index);
      }
      if (!isToggle) {
        args = {
          data: selectData,
          rowIndex: index,
          row: selectedRow,
          previousRow: gObj.getRowByIndex(this.prevRowIndex),
          previousRowIndex: this.prevRowIndex,
          target: this.actualTarget,
          isInteracted: this.isInteracted,
          isHeaderCheckBoxClicked: this.isHeaderCheckboxClicked,
          rowIndexes: index
        };
        this.onActionComplete(args, rowSelected);
      }
      this.isInteracted = false;
      this.updateRowProps(index);
    };
    Selection2.prototype.selectRowsByRange = function(startIndex, endIndex) {
      this.selectRows(this.getCollectionFromIndexes(startIndex, endIndex));
      this.selectRowIndex(endIndex);
    };
    Selection2.prototype.selectedDataUpdate = function(selectedData, foreignKeyData2, selectedRows, rowIndexes, selectableRowIndex) {
      for (var i = 0, len = rowIndexes.length; i < len; i++) {
        var currentRow = this.parent.getDataRows()[rowIndexes[parseInt(i.toString(), 10)]];
        if (this.parent.enableVirtualization) {
          currentRow = this.parent.getRowByIndex(rowIndexes[parseInt(i.toString(), 10)]);
        }
        var rowObj = this.getRowObj(currentRow);
        if (rowObj && rowObj.isDataRow && rowObj.isSelectable) {
          selectedData.push(rowObj.data);
          selectedRows.push(currentRow);
          foreignKeyData2.push(rowObj.foreignKeyData);
        } else {
          if (this.isPartialSelection && selectableRowIndex) {
            selectableRowIndex.splice(selectableRowIndex.indexOf(rowIndexes[parseInt(i.toString(), 10)]), 1);
          }
        }
      }
    };
    Selection2.prototype.selectRows = function(rowIndexes) {
      var _this = this;
      var gObj = this.parent;
      var selectableRowIndex = rowIndexes.slice();
      var rowIndex = !this.isSingleSel() ? rowIndexes[0] : rowIndexes[rowIndexes.length - 1];
      this.isMultiSelection = true;
      var selectedRows = [];
      var foreignKeyData2 = [];
      var can = "cancel";
      var selectedData = [];
      if (!this.isRowType() || this.isEditing()) {
        return;
      }
      this.selectedDataUpdate(selectedData, foreignKeyData2, selectedRows, rowIndexes, selectableRowIndex);
      this.activeTarget();
      var args = {
        cancel: false,
        rowIndexes: selectableRowIndex,
        row: selectedRows,
        rowIndex,
        target: this.actualTarget,
        prevRow: gObj.getRows()[this.prevRowIndex],
        previousRowIndex: this.prevRowIndex,
        isInteracted: this.isInteracted,
        isCtrlPressed: this.isMultiCtrlRequest,
        isShiftPressed: this.isMultiShiftRequest,
        data: selectedData,
        isHeaderCheckboxClicked: this.isHeaderCheckboxClicked,
        foreignKeyData: foreignKeyData2
      };
      this.parent.trigger(rowSelecting, this.fDataUpdate(args), function(args2) {
        if (!isNullOrUndefined(args2) && args2["" + can] === true) {
          _this.disableInteracted();
          return;
        }
        if (!(_this.selectionSettings.persistSelection && gObj.allowRowDragAndDrop && _this.isDragged)) {
          _this.clearRow();
        }
        _this.selectRowIndex(selectableRowIndex.slice(-1)[0]);
        var selectRowFn = function(index, preventFocus) {
          _this.updateRowSelection(gObj.getRowByIndex(index), index, preventFocus);
          _this.updateRowProps(rowIndex);
        };
        if (!_this.isSingleSel()) {
          for (var _i = 0, selectableRowIndex_1 = selectableRowIndex; _i < selectableRowIndex_1.length; _i++) {
            var rowIdx = selectableRowIndex_1[_i];
            selectRowFn(rowIdx, gObj.enableVirtualization ? true : false);
          }
        } else {
          selectRowFn(rowIndex);
        }
        if (_this.checkVirtualCheckBox() && !_this.parent.isPersistSelection) {
          if (selectableRowIndex.length === _this.totalRecordsCount) {
            _this.virtualSelectedData = _this.virtualCheckBoxData().slice();
            _this.selectedRowIndexes = Object.keys(_this.virtualSelectedData).map(function(key) {
              return parseInt(key, 10);
            });
            _this.setCheckAllState();
          } else {
            var selectionData = selectableRowIndex.filter(function(index) {
              return _this.selectedRowIndexes.indexOf(index) === -1;
            });
            if (selectionData.length > 0) {
              var allData = _this.virtualCheckBoxData().slice();
              for (var i = 0; i < selectionData.length; i++) {
                var record = allData[selectionData[i]];
                if (!isNullOrUndefined(record)) {
                  _this.virtualSelectedData.push(record);
                  _this.selectedRowIndexes.push(selectionData[i]);
                }
              }
              _this.setCheckAllState();
            }
          }
        }
        args2 = {
          rowIndexes: selectableRowIndex,
          row: selectedRows,
          rowIndex,
          target: _this.actualTarget,
          prevRow: gObj.getRows()[_this.prevRowIndex],
          previousRowIndex: _this.prevRowIndex,
          data: _this.getSelectedRecords(),
          isInteracted: _this.isInteracted,
          isHeaderCheckboxClicked: _this.isHeaderCheckboxClicked,
          foreignKeyData: foreignKeyData2
        };
        if (_this.isRowSelected) {
          _this.onActionComplete(args2, rowSelected);
        }
        _this.isInteracted = false;
      });
    };
    Selection2.prototype.addRowsToSelection = function(rowIndexes) {
      var gObj = this.parent;
      var can = "cancel";
      var target = this.target;
      this.isMultiSelection = true;
      var selectedRows = [];
      var foreignKeyData2 = [];
      var selectedData = [];
      var indexes = gObj.getSelectedRowIndexes().concat(rowIndexes);
      var selectedRow = !this.isSingleSel() ? gObj.getRowByIndex(rowIndexes[0]) : gObj.getRowByIndex(rowIndexes[rowIndexes.length - 1]);
      if ((!this.isRowType() || this.isEditing()) && !this.selectionSettings.checkboxOnly) {
        return;
      }
      var args;
      var checkboxColumn = this.parent.getColumns().filter(function(col) {
        return col.type === "checkbox";
      });
      if (this.isMultiCtrlRequest && !checkboxColumn.length) {
        this.selectedDataUpdate(selectedData, foreignKeyData2, selectedRows, indexes);
      }
      for (var _i = 0, rowIndexes_1 = rowIndexes; _i < rowIndexes_1.length; _i++) {
        var rowIndex = rowIndexes_1[_i];
        var rowObj = this.getRowObj(rowIndex);
        var isUnSelected = this.selectedRowIndexes.indexOf(rowIndex) > -1;
        if (this.isPartialSelection && rowObj && rowObj.isDataRow && !rowObj.isSelectable) {
          continue;
        }
        this.selectRowIndex(rowIndex);
        if (isUnSelected && ((checkboxColumn.length ? true : this.selectionSettings.enableToggle) || this.isMultiCtrlRequest)) {
          this.isAddRowsToSelection = true;
          this.rowDeselect(rowDeselecting, [rowIndex], [rowObj.data], [selectedRow], [rowObj.foreignKeyData], target);
          if (this.isCancelDeSelect) {
            return;
          }
          if (this.checkVirtualCheckBox() && !this.parent.isPersistSelection) {
            this.virtualSelectedData.splice(this.virtualSelectedData.indexOf(rowObj.data), 1);
          }
          this.selectedRowIndexes.splice(this.selectedRowIndexes.indexOf(rowIndex), 1);
          this.selectedRecords.splice(this.selectedRecords.indexOf(selectedRow), 1);
          this.selectRowIndex(this.selectedRowIndexes.length ? this.selectedRowIndexes[this.selectedRowIndexes.length - 1] : -1);
          selectedRow.removeAttribute("aria-selected");
          this.addRemoveClassesForRow(selectedRow, false, null, "e-selectionbackground", "e-active");
          this.rowDeselect(rowDeselected, [rowIndex], [rowObj.data], [selectedRow], [rowObj.foreignKeyData], target, void 0, void 0, void 0);
          this.isInteracted = false;
          this.isMultiSelection = false;
          this.isAddRowsToSelection = false;
          this.isHdrSelectAllClicked = false;
        } else {
          this.activeTarget();
          args = {
            cancel: false,
            data: selectedData.length ? selectedData : rowObj.data,
            rowIndex,
            row: selectedRows.length ? selectedRows : selectedRow,
            target: this.actualTarget,
            prevRow: gObj.getRows()[this.prevRowIndex],
            previousRowIndex: this.prevRowIndex,
            isCtrlPressed: this.isMultiCtrlRequest,
            isShiftPressed: this.isMultiShiftRequest,
            foreignKeyData: foreignKeyData2.length ? foreignKeyData2 : rowObj.foreignKeyData,
            isInteracted: this.isInteracted,
            isHeaderCheckboxClicked: this.isHeaderCheckboxClicked,
            rowIndexes: indexes
          };
          this.parent.trigger(rowSelecting, this.fDataUpdate(args));
          if (!isNullOrUndefined(args) && args["" + can] === true) {
            this.disableInteracted();
            return;
          }
          if (this.isSingleSel()) {
            this.clearRow();
          }
          this.updateRowSelection(selectedRow, rowIndex);
        }
        if (!isUnSelected) {
          args = {
            data: selectedData.length ? selectedData : rowObj.data,
            rowIndex,
            row: selectedRows.length ? selectedRows : selectedRow,
            target: this.actualTarget,
            prevRow: gObj.getRows()[this.prevRowIndex],
            previousRowIndex: this.prevRowIndex,
            foreignKeyData: foreignKeyData2.length ? foreignKeyData2 : rowObj.foreignKeyData,
            isInteracted: this.isInteracted,
            isHeaderCheckboxClicked: this.isHeaderCheckboxClicked,
            rowIndexes: indexes
          };
          this.onActionComplete(args, rowSelected);
        }
        this.isInteracted = false;
        this.updateRowProps(rowIndex);
        if (this.isSingleSel()) {
          break;
        }
      }
    };
    Selection2.prototype.getCollectionFromIndexes = function(startIndex, endIndex) {
      var indexes = [];
      var _a = startIndex <= endIndex ? {
        i: startIndex,
        max: endIndex
      } : {
        i: endIndex,
        max: startIndex
      }, i = _a.i, max = _a.max;
      for (; i <= max; i++) {
        indexes.push(i);
      }
      if (startIndex > endIndex) {
        indexes.reverse();
      }
      return indexes;
    };
    Selection2.prototype.clearRow = function() {
      this.clearRowCheck = true;
      this.clearRowSelection();
    };
    Selection2.prototype.clearRowCallBack = function() {
      if (this.isCancelDeSelect && this.parent.checkAllRows !== "Check") {
        return;
      }
      this.selectedRowIndexes = [];
      this.selectedRecords = [];
      this.selectRowIndex(-1);
      if (this.isSingleSel() && this.parent.isPersistSelection) {
        this.selectedRowState = {};
      }
    };
    Selection2.prototype.clearSelectedRow = function(index) {
      if (this.toggle) {
        var selectedEle = this.parent.getRowByIndex(index);
        if (!this.disableUI) {
          selectedEle.removeAttribute("aria-selected");
          this.addRemoveClassesForRow(selectedEle, false, true, "e-selectionbackground", "e-active");
        }
        this.removed = true;
        this.updatePersistCollection(selectedEle, false);
        this.updateCheckBoxes(selectedEle);
        this.selectedRowIndexes.splice(this.selectedRowIndexes.indexOf(index), 1);
        this.selectedRecords.splice(this.selectedRecords.indexOf(this.parent.getRowByIndex(index)), 1);
      }
    };
    Selection2.prototype.updateRowProps = function(startIndex) {
      this.prevRowIndex = startIndex;
      this.isRowSelected = this.selectedRowIndexes.length && true;
    };
    Selection2.prototype.getPkValue = function(pkField, data) {
      return pkField ? isComplexField(pkField) ? getObject(pkField, data) : data["" + pkField] : data["" + pkField];
    };
    Selection2.prototype.updatePersistCollection = function(selectedRow, chkState) {
      var _this = this;
      if ((this.parent.isPersistSelection || this.parent.selectionSettings.persistSelection && this.parent.getPrimaryKeyFieldNames().length > 0) && !isNullOrUndefined(selectedRow)) {
        if (!this.parent.isPersistSelection) {
          this.ensureCheckboxFieldSelection();
        }
        var rowObj = this.getRowObj(selectedRow);
        var pKey_1 = rowObj.data ? this.getPkValue(this.primaryKey, rowObj.data) : null;
        if (pKey_1 === null) {
          return;
        }
        rowObj.isSelected = chkState;
        if (chkState && !this.isPartialSelection || this.isPartialSelection && rowObj.isSelectable && rowObj.isSelected) {
          this.selectedRowState["" + pKey_1] = chkState;
          delete this.unSelectedRowState["" + pKey_1];
          if (!this.persistSelectedData.some(function(data) {
            return _this.getPkValue(_this.primaryKey, data) === pKey_1;
          })) {
            this.persistSelectedData.push(rowObj.data);
          }
        } else {
          this.updatePersistDelete(pKey_1);
        }
      }
    };
    Selection2.prototype.updatePersistDelete = function(pKey, isPartialSelection) {
      var _this = this;
      delete this.selectedRowState["" + pKey];
      if (this.rmtHdrChkbxClicked) {
        this.unSelectedRowState["" + pKey] = true;
      }
      var index;
      var isPresent = this.persistSelectedData.some(function(data, i) {
        index = i;
        return _this.getPkValue(_this.primaryKey, data) === pKey;
      });
      if (isPresent) {
        this.persistSelectedData.splice(index, 1);
        if (isPartialSelection) {
          this.parent.partialSelectedRecords.splice(index, 1);
        }
      }
    };
    Selection2.prototype.updateCheckBoxes = function(row2, chkState, rowIndex) {
      if (!isNullOrUndefined(row2)) {
        var chkBox = row2.querySelector(".e-checkselect");
        if (!isNullOrUndefined(chkBox)) {
          removeAddCboxClasses(chkBox.nextElementSibling, chkState);
          setChecked(chkBox, chkState);
          if (isNullOrUndefined(this.checkedTarget) || !isNullOrUndefined(this.checkedTarget) && !this.checkedTarget.classList.contains("e-checkselectall")) {
            this.setCheckAllState(rowIndex);
          }
        }
      }
    };
    Selection2.prototype.updateRowSelection = function(selectedRow, startIndex, preventFocus) {
      if (!selectedRow) {
        return;
      }
      if (this.selectedRowIndexes.indexOf(startIndex) === -1) {
        if (this.checkVirtualCheckBox() && !this.parent.isPersistSelection) {
          this.virtualSelectedData.push(this.parent.getRowObjectFromUID(selectedRow.getAttribute("data-uid")).data);
        }
        this.selectedRowIndexes.push(startIndex);
        this.selectedRecords.push(selectedRow);
      }
      selectedRow.setAttribute("aria-selected", "true");
      this.updatePersistCollection(selectedRow, true);
      this.updateCheckBoxes(selectedRow, true);
      this.addRemoveClassesForRow(selectedRow, true, null, "e-selectionbackground", "e-active");
      if (!this.preventFocus || this.parent.isFocusFirstCell || this.isFocusLastCell) {
        var target = this.focus.getPrevIndexes().cellIndex ? selectedRow.cells[this.focus.getPrevIndexes().cellIndex] : selectedRow.querySelector(".e-selectionbackground:not(.e-hide, .e-detailrowcollapse, .e-detailrowexpand, .e-rowdragdrop)");
        if (this.parent.contextMenuModule && this.mouseButton === 2) {
          target = this.parent.contextMenuModule.cell;
        }
        if (this.parent.isFocusFirstCell || this.isFocusLastCell) {
          this.parent.isFocusFirstCell = false;
          var selector = this.isFocusLastCell ? "last-child" : "first-child";
          target = selectedRow.querySelector(".e-selectionbackground.e-rowcell:not(.e-hide, .e-detailrowcollapse, .e-detailrowexpand, .e-rowdragdrop, .e-gridchkbox):" + selector);
          this.isFocusLastCell = false;
        }
        if (!target || preventFocus) {
          return;
        }
        this.focus.onClick({
          target
        }, true, true);
      }
    };
    Selection2.prototype.clearSelection = function() {
      this.checkSelectAllClicked = true;
      if (this.selectionSettings.persistSelection && this.persistSelectedData.length) {
        this.deSelectedData = iterateExtend(this.persistSelectedData);
      }
      if (!this.parent.isPersistSelection || this.parent.isPersistSelection && !this.parent.isEdit || !isNullOrUndefined(this.checkedTarget) && this.checkedTarget.classList.contains("e-checkselectall")) {
        var span = this.parent.element.querySelector(".e-gridpopup").querySelector("span");
        if (span.classList.contains("e-rowselect")) {
          span.classList.remove("e-spanclicked");
        }
        if (this.parent.isPersistSelection) {
          this.persistSelectedData = [];
          this.selectedRowState = {};
          this.parent.partialSelectedRecords = [];
          this.parent.disableSelectedRecords = [];
          var rowObjects = this.parent.getRowsObject();
          for (var i = 0; i < rowObjects.length; i++) {
            if (rowObjects[i].isDataRow) {
              if (rowObjects[i].isSelectable) {
                this.parent.partialSelectedRecords.push(rowObjects[i].data);
              } else {
                this.parent.disableSelectedRecords.push(rowObjects[i].data);
              }
            }
          }
        }
        this.clearRowSelection();
        this.clearCellSelection();
        this.clearColumnSelection();
        this.prevRowIndex = void 0;
        this.prevCIdxs = void 0;
        this.prevECIdxs = void 0;
        this.enableSelectMultiTouch = false;
        this.isInteracted = false;
        this.checkSelectAllClicked = false;
        this.isHdrSelectAllClicked = false;
      }
    };
    Selection2.prototype.clearRowSelection = function() {
      var _this = this;
      if (this.isRowSelected) {
        var rows_1 = this.parent.getDataRows();
        var data_1 = [];
        var row_1 = [];
        var rowIndex_1 = [];
        var foreignKeyData_1 = [];
        var target_1 = this.target;
        this.isRowDeselect = true;
        for (var i = 0, len = this.selectedRowIndexes.length; i < len; i++) {
          var currentRow = void 0;
          if (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache) {
            currentRow = this.parent.getRowByIndex(this.selectedRowIndexes[parseInt(i.toString(), 10)]);
          } else {
            currentRow = this.parent.editSettings.mode === "Batch" ? this.parent.getRows()[this.selectedRowIndexes[parseInt(i.toString(), 10)]] : this.parent.getDataRows()[this.selectedRowIndexes[parseInt(i.toString(), 10)]];
          }
          var rowObj = this.getRowObj(currentRow);
          if (rowObj) {
            data_1.push(rowObj.data);
            row_1.push(currentRow);
            rowIndex_1.push(this.selectedRowIndexes[parseInt(i.toString(), 10)]);
            foreignKeyData_1.push(rowObj.foreignKeyData);
          }
        }
        if (this.selectionSettings.persistSelection && this.selectionSettings.checkboxMode !== "ResetOnRowClick") {
          this.isRowClicked = this.checkSelectAllClicked ? true : false;
        }
        this.rowDeselect(rowDeselecting, rowIndex_1, data_1, row_1, foreignKeyData_1, target_1, null, function() {
          if (_this.isCancelDeSelect && (_this.isRowClicked || _this.checkSelectAllClicked || _this.isInteracted && !_this.parent.isPersistSelection)) {
            if (_this.parent.isPersistSelection) {
              if (_this.getCheckAllStatus(_this.parent.element.querySelector(".e-checkselectall")) === "Intermediate" || _this.parent.isPersistSelection) {
                for (var i2 = 0; i2 < _this.selectedRecords.length; i2++) {
                  _this.updatePersistCollection(_this.selectedRecords[parseInt(i2.toString(), 10)], true);
                }
              } else {
                _this.parent.checkAllRows = "Check";
                _this.updatePersistSelectedData(true);
              }
            }
            if (_this.clearRowCheck) {
              _this.clearRowCallBack();
              _this.clearRowCheck = false;
              if (_this.selectRowCheck) {
                _this.selectRowCallBack();
                _this.selectRowCheck = false;
              }
            }
            return;
          }
          var element = [].slice.call(rows_1.filter(function(record) {
            return record.hasAttribute("aria-selected");
          }));
          for (var j = 0; j < element.length; j++) {
            if (!_this.disableUI) {
              element[parseInt(j.toString(), 10)].removeAttribute("aria-selected");
              _this.addRemoveClassesForRow(element[parseInt(j.toString(), 10)], false, true, "e-selectionbackground", "e-active");
            }
            if (!_this.isPrevRowSelection) {
              _this.updatePersistCollection(element[parseInt(j.toString(), 10)], false);
            }
            _this.updateCheckBoxes(element[parseInt(j.toString(), 10)]);
          }
          if ((_this.parent.enableVirtualization || _this.parent.enableInfiniteScrolling && _this.parent.infiniteScrollSettings.enableCache) && _this.selectedRecords.length && !element.length && !_this.parent.selectionSettings.persistSelection && !_this.disableUI && !_this.parent.isCheckBoxSelection) {
            _this.addRemoveClassesForRow(null, false, true);
          }
          _this.virtualSelectedData = [];
          _this.selectedRowIndexes = [];
          _this.selectedRecords = [];
          _this.isRowSelected = false;
          _this.selectRowIndex(-1);
          _this.isPrevRowSelection = false;
          _this.rowDeselect(rowDeselected, rowIndex_1, data_1, row_1, foreignKeyData_1, target_1, null, void 0, null);
          if (_this.clearRowCheck) {
            _this.clearRowCallBack();
            _this.clearRowCheck = false;
            if (_this.selectRowCheck) {
              _this.selectRowCallBack();
              _this.selectRowCheck = false;
            }
          }
        }, null);
        this.isRowDeselect = false;
      } else {
        if (this.clearRowCheck) {
          this.clearRowCallBack();
          this.clearRowCheck = false;
          if (this.selectRowCheck) {
            this.selectRowCallBack();
            this.selectRowCheck = false;
          }
        }
      }
    };
    Selection2.prototype.rowDeselect = function(type, rowIndex, data, row2, foreignKeyData2, target, mRow, rowDeselectCallBack, frozenRightRow) {
      var _this = this;
      if (this.selectionSettings.persistSelection && (this.isRowClicked || !this.isRowDeselect || this.checkSelectAllClicked || this.focus["activeKey"] && this.focus.currentInfo.element.classList.contains("e-gridchkbox") && this.focus["activeKey"] === "space") || !this.selectionSettings.persistSelection) {
        var cancl_1 = "cancel";
        var isSingleDeSel = rowIndex.length === 1 && this.deSelectedData.length === 1;
        var rowDeselectObj = {
          rowIndex: rowIndex[0],
          data: this.selectionSettings.persistSelection && this.parent.checkAllRows === "Uncheck" && !isSingleDeSel && this.selectionSettings.checkboxMode !== "ResetOnRowClick" ? this.deSelectedData : data,
          foreignKeyData: foreignKeyData2,
          cancel: false,
          isInteracted: this.isInteracted,
          isHeaderCheckboxClicked: this.isHeaderCheckboxClicked
        };
        if (type === "rowDeselected") {
          delete rowDeselectObj.cancel;
        }
        var rowInString = "row";
        var target_2 = "target";
        var rowidx = "rowIndex";
        var rowidxex = "rowIndexes";
        var dataTxt = "data";
        var foreignKey = "foreignKeyData";
        rowDeselectObj["" + rowInString] = row2;
        rowDeselectObj["" + target_2] = this.actualTarget;
        var isHeaderCheckBxClick = this.actualTarget && !isNullOrUndefined(closest(this.actualTarget, "thead"));
        if (isHeaderCheckBxClick || rowIndex.length > 1) {
          rowDeselectObj["" + rowidx] = rowIndex[0];
          rowDeselectObj["" + rowidxex] = rowIndex;
        } else if (rowIndex.length === 1) {
          rowDeselectObj["" + dataTxt] = rowDeselectObj["" + dataTxt][0];
          rowDeselectObj["" + rowInString] = rowDeselectObj["" + rowInString][0];
          rowDeselectObj["" + foreignKey] = rowDeselectObj["" + foreignKey][0];
          if (this.isAddRowsToSelection) {
            rowDeselectObj["" + rowidxex] = rowIndex;
          }
        }
        this.parent.trigger(type, rowDeselectObj, function(args) {
          _this.isCancelDeSelect = args["" + cancl_1];
          if (!_this.isCancelDeSelect || !_this.isRowClicked && !_this.isInteracted && !_this.checkSelectAllClicked) {
            _this.updatePersistCollection(row2[0], false);
            _this.updateCheckBoxes(row2[0], void 0, rowIndex[0]);
          }
          if (rowDeselectCallBack !== void 0) {
            rowDeselectCallBack();
          }
        });
      } else if (this.selectionSettings.persistSelection && !this.isInteracted) {
        if (rowDeselectCallBack !== void 0) {
          rowDeselectCallBack();
        }
      }
    };
    Selection2.prototype.getRowObj = function(row2) {
      if (row2 === void 0) {
        row2 = this.currentIndex;
      }
      if (isNullOrUndefined(row2)) {
        return {};
      }
      if (typeof row2 === "number") {
        row2 = this.parent.getRowByIndex(row2);
      }
      if (row2) {
        return this.parent.getRowObjectFromUID(row2.getAttribute("data-uid")) || {};
      }
      return {};
    };
    Selection2.prototype.selectCell = function(cellIndex, isToggle) {
      if (!this.isCellType() || this.isCellType() && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache)) {
        return;
      }
      var gObj = this.parent;
      var args;
      var selectedCell = gObj.getCellFromIndex(cellIndex.rowIndex, this.getColIndex(cellIndex.rowIndex, cellIndex.cellIndex));
      this.currentIndex = cellIndex.rowIndex;
      var selectedData = this.getCurrentBatchRecordChanges()[this.currentIndex];
      if (!this.isCellType() || !selectedCell || this.isEditing()) {
        return;
      }
      var isCellSelected = selectedCell.classList.contains("e-cellselectionbackground");
      isToggle = !isToggle ? isToggle : !isUndefined(this.prevCIdxs) && cellIndex.rowIndex === this.prevCIdxs.rowIndex && cellIndex.cellIndex === this.prevCIdxs.cellIndex && isCellSelected;
      if (!isToggle) {
        args = {
          data: selectedData,
          cellIndex,
          isCtrlPressed: this.isMultiCtrlRequest,
          isShiftPressed: this.isMultiShiftRequest,
          previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : void 0,
          cancel: false
        };
        var currentCell = "currentCell";
        args["" + currentCell] = selectedCell;
        var previousRowCellIndex = "previousRowCellIndex";
        args["" + previousRowCellIndex] = this.prevECIdxs;
        this.parent.trigger(cellSelecting, this.fDataUpdate(args), this.successCallBack(args, isToggle, cellIndex, selectedCell, selectedData));
        this.cellselected = true;
      } else {
        this.successCallBack(args, isToggle, cellIndex, selectedCell, selectedData)(args);
      }
    };
    Selection2.prototype.successCallBack = function(cellSelectingArgs, isToggle, cellIndex, selectedCell, selectedData) {
      var _this = this;
      return function(cellSelectingArgs2) {
        var cncl = "cancel";
        var currentCell = "currentCell";
        if (!isNullOrUndefined(cellSelectingArgs2) && cellSelectingArgs2["" + cncl] === true) {
          return;
        }
        if (!isToggle) {
          cellSelectingArgs2["" + currentCell] = cellSelectingArgs2["" + currentCell] ? cellSelectingArgs2["" + currentCell] : selectedCell;
        }
        _this.clearCell();
        if (!isToggle) {
          _this.updateCellSelection(selectedCell, cellIndex.rowIndex, cellIndex.cellIndex);
        }
        if (!isToggle) {
          var args = {
            data: selectedData,
            cellIndex,
            currentCell: selectedCell,
            selectedRowCellIndex: _this.selectedRowCellIndexes,
            previousRowCell: _this.prevECIdxs ? _this.getCellIndex(_this.prevECIdxs.rowIndex, _this.prevECIdxs.cellIndex) : void 0
          };
          var previousRowCellIndex = "previousRowCellIndex";
          args["" + previousRowCellIndex] = _this.prevECIdxs;
          _this.updateCellProps(cellIndex, cellIndex);
          _this.onActionComplete(args, cellSelected);
        }
      };
    };
    Selection2.prototype.getCellIndex = function(rIdx, cIdx) {
      return this.parent.getCellFromIndex(rIdx, cIdx);
    };
    Selection2.prototype.selectCellsByRange = function(startIndex, endIndex) {
      var _this = this;
      if (!this.isCellType()) {
        return;
      }
      var gObj = this.parent;
      var selectedCell = this.parent.isSpan ? getCellFromRow(this.parent, startIndex.rowIndex, startIndex.cellIndex) : gObj.getCellFromIndex(startIndex.rowIndex, startIndex.cellIndex);
      var min;
      var max;
      var stIndex = startIndex;
      var edIndex = endIndex = endIndex ? endIndex : startIndex;
      var cellIndexes;
      this.currentIndex = startIndex.rowIndex;
      var cncl = "cancel";
      var selectedData = this.getCurrentBatchRecordChanges()[this.currentIndex];
      if (this.isSingleSel() || !this.isCellType() || this.isEditing()) {
        return;
      }
      var args = {
        data: selectedData,
        cellIndex: startIndex,
        currentCell: selectedCell,
        isCtrlPressed: this.isMultiCtrlRequest,
        isShiftPressed: this.isMultiShiftRequest,
        previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : void 0
      };
      var previousRowCellIndex = "previousRowCellIndex";
      args["" + previousRowCellIndex] = this.prevECIdxs;
      this.parent.trigger(cellSelecting, this.fDataUpdate(args), function(cellSelectingArgs) {
        if (!isNullOrUndefined(cellSelectingArgs) && cellSelectingArgs["" + cncl] === true) {
          return;
        }
        _this.clearCell();
        if (startIndex.rowIndex > endIndex.rowIndex) {
          var temp = startIndex;
          startIndex = endIndex;
          endIndex = temp;
        }
        for (var i = startIndex.rowIndex; i <= endIndex.rowIndex; i++) {
          if (_this.selectionSettings.cellSelectionMode.indexOf("Box") < 0) {
            min = i === startIndex.rowIndex ? startIndex.cellIndex : 0;
            max = i === endIndex.rowIndex ? endIndex.cellIndex : _this.getLastColIndex(i);
          } else {
            min = startIndex.cellIndex;
            max = endIndex.cellIndex;
          }
          cellIndexes = [];
          for (var j = min < max ? min : max, len = min > max ? min : max; j <= len; j++) {
            selectedCell = _this.parent.isSpan ? getCellFromRow(gObj, i, j) : gObj.getCellFromIndex(i, j);
            if (!selectedCell) {
              continue;
            }
            cellIndexes.push(j);
            _this.updateCellSelection(selectedCell);
            _this.addAttribute(selectedCell);
          }
          _this.selectedRowCellIndexes.push({
            rowIndex: i,
            cellIndexes
          });
        }
        var cellSelectedArgs = {
          data: selectedData,
          cellIndex: edIndex,
          currentCell: gObj.getCellFromIndex(edIndex.rowIndex, edIndex.cellIndex),
          selectedRowCellIndex: _this.selectedRowCellIndexes,
          previousRowCell: _this.prevECIdxs ? _this.getCellIndex(_this.prevECIdxs.rowIndex, _this.prevECIdxs.cellIndex) : void 0
        };
        var previousRowCellIndex2 = "previousRowCellIndex";
        cellSelectedArgs["" + previousRowCellIndex2] = _this.prevECIdxs;
        if (!_this.isDragged) {
          _this.onActionComplete(cellSelectedArgs, cellSelected);
          _this.cellselected = true;
        }
        _this.updateCellProps(stIndex, edIndex);
      });
    };
    Selection2.prototype.selectCells = function(rowCellIndexes) {
      if (!this.isCellType()) {
        return;
      }
      var gObj = this.parent;
      var selectedCell = gObj.getCellFromIndex(rowCellIndexes[0].rowIndex, rowCellIndexes[0].cellIndexes[0]);
      this.currentIndex = rowCellIndexes[0].rowIndex;
      var selectedData = this.getCurrentBatchRecordChanges()[this.currentIndex];
      if (this.isSingleSel() || !this.isCellType() || this.isEditing()) {
        return;
      }
      var cellSelectArgs = {
        data: selectedData,
        cellIndex: rowCellIndexes[0].cellIndexes[0],
        currentCell: selectedCell,
        isCtrlPressed: this.isMultiCtrlRequest,
        isShiftPressed: this.isMultiShiftRequest,
        previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : void 0
      };
      var previousRowCellIndex = "previousRowCellIndex";
      cellSelectArgs["" + previousRowCellIndex] = this.prevECIdxs;
      this.onActionBegin(cellSelectArgs, cellSelecting);
      for (var i = 0, len = rowCellIndexes.length; i < len; i++) {
        for (var j = 0, cellLen = rowCellIndexes[parseInt(i.toString(), 10)].cellIndexes.length; j < cellLen; j++) {
          selectedCell = gObj.getCellFromIndex(rowCellIndexes[parseInt(i.toString(), 10)].rowIndex, rowCellIndexes[parseInt(i.toString(), 10)].cellIndexes[parseInt(j.toString(), 10)]);
          if (!selectedCell) {
            continue;
          }
          this.updateCellSelection(selectedCell);
          this.addAttribute(selectedCell);
          this.addRowCellIndex({
            rowIndex: rowCellIndexes[parseInt(i.toString(), 10)].rowIndex,
            cellIndex: rowCellIndexes[parseInt(i.toString(), 10)].cellIndexes[parseInt(j.toString(), 10)]
          });
        }
      }
      this.updateCellProps({
        rowIndex: rowCellIndexes[0].rowIndex,
        cellIndex: rowCellIndexes[0].cellIndexes[0]
      }, {
        rowIndex: rowCellIndexes[0].rowIndex,
        cellIndex: rowCellIndexes[0].cellIndexes[0]
      });
      var cellSelectedArgs = {
        data: selectedData,
        cellIndex: rowCellIndexes[0].cellIndexes[0],
        currentCell: selectedCell,
        selectedRowCellIndex: this.selectedRowCellIndexes,
        previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : void 0
      };
      var prvRowCellIndex = "previousRowCellIndex";
      cellSelectedArgs["" + prvRowCellIndex] = this.prevECIdxs;
      this.onActionComplete(cellSelectedArgs, cellSelected);
    };
    Selection2.prototype.addCellsToSelection = function(cellIndexes) {
      if (!this.isCellType() || this.isCellType() && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache)) {
        return;
      }
      var gObj = this.parent;
      var selectedCell;
      var index;
      this.currentIndex = cellIndexes[0].rowIndex;
      var cncl = "cancel";
      var selectedData = this.getCurrentBatchRecordChanges()[this.currentIndex];
      if (this.isSingleSel() || !this.isCellType() || this.isEditing()) {
        return;
      }
      this.hideAutoFill();
      var rowObj;
      rowObj = gObj.getRowsObject()[cellIndexes[0].rowIndex];
      if (gObj.groupSettings.columns.length > 0) {
        rowObj = gObj.getRowObjectFromUID(this.target.parentElement.getAttribute("data-uid"));
      }
      var foreignKeyData2 = [];
      for (var _i = 0, cellIndexes_1 = cellIndexes; _i < cellIndexes_1.length; _i++) {
        var cellIndex = cellIndexes_1[_i];
        for (var i = 0, len = this.selectedRowCellIndexes.length; i < len; i++) {
          if (this.selectedRowCellIndexes[parseInt(i.toString(), 10)].rowIndex === cellIndex.rowIndex) {
            index = i;
            break;
          }
        }
        selectedCell = gObj.getCellFromIndex(cellIndex.rowIndex, this.getColIndex(cellIndex.rowIndex, cellIndex.cellIndex));
        var idx = cellIndex.cellIndex;
        if (gObj.groupSettings.columns.length > 0) {
          foreignKeyData2.push(rowObj.cells[idx + gObj.groupSettings.columns.length].foreignKeyData);
        } else {
          foreignKeyData2.push(rowObj.cells[parseInt(idx.toString(), 10)].foreignKeyData);
        }
        var args = {
          cancel: false,
          data: selectedData,
          cellIndex: cellIndexes[0],
          isShiftPressed: this.isMultiShiftRequest,
          currentCell: selectedCell,
          isCtrlPressed: this.isMultiCtrlRequest,
          previousRowCell: this.prevECIdxs ? gObj.getCellFromIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : void 0
        };
        var prvRowCellIndex = "previousRowCellIndex";
        args["" + prvRowCellIndex] = this.prevECIdxs;
        var isUnSelected = index > -1;
        if (isUnSelected) {
          var selectedCellIdx = this.selectedRowCellIndexes[parseInt(index.toString(), 10)].cellIndexes;
          if (selectedCellIdx.indexOf(cellIndex.cellIndex) > -1 || this.selectionSettings.mode === "Both" && selectedCell.classList.contains("e-gridchkbox") && !selectedCell.getAttribute("aria-selected")) {
            this.cellDeselect(cellDeselecting, [{
              rowIndex: cellIndex.rowIndex,
              cellIndexes: [cellIndex.cellIndex]
            }], selectedData, [selectedCell], foreignKeyData2);
            selectedCellIdx.splice(selectedCellIdx.indexOf(cellIndex.cellIndex), 1);
            if (selectedCellIdx.length === 0) {
              this.selectedRowCellIndexes.splice(index, 1);
            }
            selectedCell.classList.remove("e-cellselectionbackground");
            selectedCell.removeAttribute("aria-selected");
            this.cellDeselect(cellDeselected, [{
              rowIndex: cellIndex.rowIndex,
              cellIndexes: [cellIndex.cellIndex]
            }], selectedData, [selectedCell], foreignKeyData2);
          } else {
            isUnSelected = false;
            this.onActionBegin(args, cellSelecting);
            this.addRowCellIndex({
              rowIndex: cellIndex.rowIndex,
              cellIndex: cellIndex.cellIndex
            });
            this.updateCellSelection(selectedCell);
            this.addAttribute(selectedCell);
          }
        } else {
          this.onActionBegin(args, cellSelecting);
          if (!isNullOrUndefined(args) && args["" + cncl] === true) {
            return;
          }
          this.updateCellSelection(selectedCell, cellIndex.rowIndex, cellIndex.cellIndex);
        }
        if (!isUnSelected) {
          var cellSelectedArgs = {
            data: selectedData,
            cellIndex: cellIndexes[0],
            currentCell: selectedCell,
            previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : void 0,
            selectedRowCellIndex: this.selectedRowCellIndexes
          };
          cellSelectedArgs["" + prvRowCellIndex] = this.prevECIdxs;
          this.onActionComplete(cellSelectedArgs, cellSelected);
          this.cellselected = true;
        }
        this.updateCellProps(cellIndex, cellIndex);
      }
    };
    Selection2.prototype.getColIndex = function(rowIndex, index) {
      var col = this.parent.getColumnByIndex(index);
      var cells = getCellsByTableName(this.parent, col, rowIndex);
      if (cells) {
        for (var m = 0; m < cells.length; m++) {
          var colIndex = parseInt(cells[parseInt(m.toString(), 10)].getAttribute(ariaColIndex), 10) - 1;
          if (colIndex === index) {
            return m;
          }
        }
      }
      return -1;
    };
    Selection2.prototype.getLastColIndex = function(rowIndex) {
      var cells = this.parent.getDataRows()[parseInt(rowIndex.toString(), 10)].querySelectorAll("td.e-rowcell");
      return parseInt(cells[cells.length - 1].getAttribute(ariaColIndex), 10) - 1;
    };
    Selection2.prototype.clearCell = function() {
      this.clearCellSelection();
    };
    Selection2.prototype.cellDeselect = function(type, cellIndexes, data, cells, foreignKeyData2) {
      var cancl = "cancel";
      if (cells && cells.length > 0) {
        for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {
          var cell = cells_1[_i];
          if (cell && cell.classList.contains(gridChkBox)) {
            this.updateCheckBoxes(closest(cell, "tr"));
          }
        }
      }
      var args = {
        cells,
        data,
        cellIndexes,
        foreignKeyData: foreignKeyData2,
        cancel: false
      };
      this.parent.trigger(type, args);
      this.isPreventCellSelect = args["" + cancl];
    };
    Selection2.prototype.updateCellSelection = function(selectedCell, rowIndex, cellIndex) {
      if (!isNullOrUndefined(rowIndex)) {
        this.addRowCellIndex({
          rowIndex,
          cellIndex
        });
      }
      selectedCell.classList.add("e-cellselectionbackground");
      if (selectedCell.classList.contains(gridChkBox)) {
        this.updateCheckBoxes(closest(selectedCell, "tr"), true);
      }
      this.addAttribute(selectedCell);
    };
    Selection2.prototype.addAttribute = function(cell) {
      this.target = cell;
      if (!isNullOrUndefined(cell)) {
        cell.setAttribute("aria-selected", "true");
        if (!this.preventFocus) {
          this.focus.onClick({
            target: cell
          }, true, true);
        }
      }
    };
    Selection2.prototype.updateCellProps = function(startIndex, endIndex) {
      this.prevCIdxs = startIndex;
      this.prevECIdxs = endIndex;
      this.isCellSelected = this.selectedRowCellIndexes.length && true;
    };
    Selection2.prototype.addRowCellIndex = function(rowCellIndex) {
      var isRowAvail;
      var index;
      for (var i = 0, len = this.selectedRowCellIndexes.length; i < len; i++) {
        if (this.selectedRowCellIndexes[parseInt(i.toString(), 10)].rowIndex === rowCellIndex.rowIndex) {
          isRowAvail = true;
          index = i;
          break;
        }
      }
      if (isRowAvail) {
        if (this.selectedRowCellIndexes[parseInt(index.toString(), 10)].cellIndexes.indexOf(rowCellIndex.cellIndex) < 0) {
          this.selectedRowCellIndexes[parseInt(index.toString(), 10)].cellIndexes.push(rowCellIndex.cellIndex);
        }
      } else {
        this.selectedRowCellIndexes.push({
          rowIndex: rowCellIndex.rowIndex,
          cellIndexes: [rowCellIndex.cellIndex]
        });
      }
    };
    Selection2.prototype.clearCellSelection = function() {
      if (this.isCellSelected) {
        var gObj = this.parent;
        var selectedCells = this.getSelectedCellsElement();
        var rowCell2 = this.selectedRowCellIndexes;
        var data = [];
        var cells = [];
        var foreignKeyData2 = [];
        var currentViewData = this.getCurrentBatchRecordChanges();
        this.hideAutoFill();
        for (var i = 0, len = rowCell2.length; i < len; i++) {
          data.push(currentViewData[rowCell2[parseInt(i.toString(), 10)].rowIndex]);
          var rowObj = this.getRowObj(rowCell2[parseInt(i.toString(), 10)].rowIndex);
          for (var j = 0, cLen = rowCell2[parseInt(i.toString(), 10)].cellIndexes.length; j < cLen; j++) {
            if (rowObj.cells) {
              foreignKeyData2.push(rowObj.cells[rowCell2[parseInt(i.toString(), 10)].cellIndexes[parseInt(j.toString(), 10)]].foreignKeyData);
            }
            cells.push(gObj.getCellFromIndex(rowCell2[parseInt(i.toString(), 10)].rowIndex, rowCell2[parseInt(i.toString(), 10)].cellIndexes[parseInt(j.toString(), 10)]));
          }
        }
        this.cellDeselect(cellDeselecting, rowCell2, data, cells, foreignKeyData2);
        if (this.isPreventCellSelect === true) {
          return;
        }
        for (var i = 0, len = selectedCells.length; i < len; i++) {
          selectedCells[parseInt(i.toString(), 10)].classList.remove("e-cellselectionbackground");
          selectedCells[parseInt(i.toString(), 10)].removeAttribute("aria-selected");
        }
        if (this.bdrElement) {
          this.showHideBorders("none");
        }
        this.selectedRowCellIndexes = [];
        this.isCellSelected = false;
        if (!this.isDragged && this.cellselected) {
          this.cellDeselect(cellDeselected, rowCell2, data, cells, foreignKeyData2);
        }
      }
    };
    Selection2.prototype.getSelectedCellsElement = function() {
      var gObj = this.parent;
      var rows = gObj.getDataRows();
      var cells = [];
      for (var i = 0, len = rows.length; i < len; i++) {
        cells = cells.concat([].slice.call(rows[parseInt(i.toString(), 10)].getElementsByClassName("e-cellselectionbackground")));
      }
      return cells;
    };
    Selection2.prototype.mouseMoveHandler = function(e) {
      e.preventDefault();
      this.stopTimer();
      var gBRect = this.parent.element.getBoundingClientRect();
      var x1 = this.x;
      var y1 = this.y;
      var position = getPosition(e);
      var x2 = position.x - gBRect.left;
      var y2 = position.y - gBRect.top;
      var tmp;
      var target = closest(e.target, "tr");
      this.isDragged = true;
      if (!this.isCellDrag) {
        if (!target) {
          target = closest(document.elementFromPoint(this.parent.element.offsetLeft + 2, e.clientY), "tr");
        }
        if (x1 > x2) {
          tmp = x2;
          x2 = x1;
          x1 = tmp;
        }
        if (y1 > y2) {
          tmp = y2;
          y2 = y1;
          y1 = tmp;
        }
        this.element.style.left = x1 + "px";
        this.element.style.top = y1 + "px";
        this.element.style.width = x2 - x1 + "px";
        this.element.style.height = y2 - y1 + "px";
      }
      if (target && !e.ctrlKey && !e.shiftKey) {
        var rowIndex = parseInt(target.getAttribute(ariaRowIndex), 10) - 1;
        if (!this.isCellDrag) {
          this.hideAutoFill();
          this.selectRowsByRange(this.startDIndex, rowIndex);
          this.isRowDragSelected = true;
        } else {
          var td = parentsUntil(e.target, rowCell);
          if (td) {
            this.startAFCell = this.startCell;
            this.endAFCell = parentsUntil(e.target, rowCell);
            if (rowIndex > -1) {
              this.selectLikeExcel(e, rowIndex, parseInt(td.getAttribute(ariaColIndex), 10) - 1);
            }
          }
        }
      }
      if (!e.ctrlKey && !e.shiftKey && !this.parent.enableVirtualization && !this.parent.enableInfiniteScrolling && !this.parent.enableColumnVirtualization && !this.parent.groupSettings.columns.length && this.isCellDrag) {
        this.updateScrollPosition(e, position, this.parent.getContent());
      }
    };
    Selection2.prototype.updateScrollPosition = function(mouseEvent, position, scrollElement) {
      var _this = this;
      var clientRect = scrollElement.getBoundingClientRect();
      if (clientRect.left >= position.x - 20 - (this.parent.enableRtl && this.parent.height !== "auto" ? getScrollBarWidth() : 0)) {
        this.timer1 = window.setInterval(function() {
          _this.setScrollPosition(scrollElement.firstElementChild, _this.parent.enableRtl ? "right" : "left", mouseEvent);
        }, 200);
      } else if (clientRect.left + scrollElement.clientWidth - 20 - (!this.parent.enableRtl && this.parent.height !== "auto" ? getScrollBarWidth() : 0) < position.x) {
        this.timer1 = window.setInterval(function() {
          _this.setScrollPosition(scrollElement.firstElementChild, _this.parent.enableRtl ? "left" : "right", mouseEvent);
        }, 200);
      }
      if (clientRect.top >= position.y - this.parent.getRowHeight() * 0.5) {
        this.timer2 = window.setInterval(function() {
          _this.setScrollPosition(scrollElement.firstElementChild, "up", mouseEvent);
        }, 200);
      } else if (clientRect.top + scrollElement.clientHeight - this.parent.getRowHeight() * 0.5 - (scrollElement.firstElementChild.scrollWidth > scrollElement.firstElementChild.offsetWidth ? getScrollBarWidth() : 0) <= position.y) {
        this.timer2 = window.setInterval(function() {
          _this.setScrollPosition(scrollElement.firstElementChild, "down", mouseEvent);
        }, 200);
      }
    };
    Selection2.prototype.stopTimer = function() {
      if (this.timer1) {
        window.clearInterval(this.timer1);
        this.timer1 = null;
      }
      if (this.timer2) {
        window.clearInterval(this.timer2);
        this.timer2 = null;
      }
      this.preventFocus = false;
    };
    Selection2.prototype.setScrollPosition = function(scrollElement, direction, mouseEvent) {
      var rowIndex = -1;
      var columnIndex = -1;
      if (this.endAFCell || this.prevECIdxs) {
        rowIndex = this.endAFCell ? parseInt(this.endAFCell.getAttribute("index"), 10) : this.prevECIdxs.rowIndex;
        columnIndex = this.endAFCell ? parseInt(this.endAFCell.getAttribute("aria-colindex"), 10) - 1 : this.prevECIdxs.cellIndex;
      }
      switch (direction) {
        case "up":
          if (mouseEvent && closest(mouseEvent.target, ".e-headercontent")) {
            return;
          }
          if (this.isAutoFillSel && this.startAFCell && this.selectedRowCellIndexes.length && (this.selectedRowCellIndexes.length === 1 && this.startAFCell !== this.startCell || this.selectedRowCellIndexes.length > 1 && this.startAFCell.getBoundingClientRect().top > 0)) {
            rowIndex = parseInt(this.startAFCell.getAttribute("index"), 10);
          }
          rowIndex -= 1;
          if (this.parent.frozenRows) {
            rowIndex += this.parent.frozenRows + 1;
          }
          rowIndex < 1 ? scrollElement.scrollTop = 0 : scrollElement.scrollTop -= this.parent.getRowByIndex(rowIndex).offsetHeight;
          break;
        case "down":
          if (this.isAutoFillSel && this.startAFCell && this.startAFCell !== this.startCell) {
            rowIndex = parseInt(this.startAFCell.getAttribute("index"), 10);
          }
          if (rowIndex < this.parent.getRows().length - 1) {
            rowIndex += 1;
            if (this.isAutoFillSel && this.startAFCell && this.startAFCell !== this.startCell) {
              this.startAFCell = this.parent.getCellFromIndex(rowIndex, this.selectedRowCellIndexes[0].cellIndexes[0]);
            }
            scrollElement.scrollTop += this.parent.getRowByIndex(rowIndex).offsetHeight;
          } else {
            scrollElement.scrollTop = scrollElement.scrollHeight;
          }
          break;
        case "left":
          if (columnIndex > 0 && rowIndex > -1) {
            if (this.isAutoFillSel && this.startAFCell && this.selectedRowCellIndexes.length && (this.selectedRowCellIndexes[0].cellIndexes.length > 0 && this.startAFCell !== this.startCell || this.selectedRowCellIndexes[0].cellIndexes.length > 1 && (!this.parent.enableRtl && this.startAFCell.getBoundingClientRect().left > 0 || this.parent.enableRtl && this.startAFCell.getBoundingClientRect().left < this.parent.element.offsetWidth))) {
              columnIndex = parseInt(this.startAFCell.getAttribute("aria-colindex"), 10) - 1;
            }
            var nextElement_1 = this.findNextCell(scrollElement, direction, columnIndex, rowIndex);
            columnIndex = nextElement_1 ? parseInt(nextElement_1.getAttribute("aria-colindex"), 10) - 1 : -1;
            if (this.parent.enableRtl && nextElement_1) {
              columnIndex < 1 ? scrollElement.scrollLeft = scrollElement.scrollWidth : scrollElement.scrollLeft += nextElement_1.offsetWidth;
            } else if (nextElement_1) {
              columnIndex < 1 ? scrollElement.scrollLeft = 0 : scrollElement.scrollLeft -= nextElement_1.offsetWidth;
            }
          }
          break;
        case "right":
          if (this.isAutoFillSel && this.startAFCell && this.startAFCell !== this.startCell) {
            columnIndex = parseInt(this.startAFCell.getAttribute("aria-colindex"), 10) - 1;
          }
          var currentElement = this.parent.getCellFromIndex(rowIndex, columnIndex);
          var nextElement = this.findNextCell(scrollElement, direction, columnIndex, rowIndex);
          if (nextElement && this.isAutoFillSel && this.startAFCell && this.startAFCell !== this.startCell) {
            this.startAFCell = this.parent.getCellFromIndex(this.selectedRowCellIndexes[0].rowIndex, parseInt(nextElement.getAttribute("aria-colindex"), 10) - 1);
          }
          columnIndex = nextElement ? parseInt(nextElement.getAttribute("aria-colindex"), 10) - 1 : -1;
          if (this.parent.enableRtl && nextElement) {
            columnIndex < this.parent.columns.length - 1 ? scrollElement.scrollLeft -= currentElement.offsetWidth : scrollElement.scrollLeft = -scrollElement.scrollWidth;
          } else if (nextElement) {
            columnIndex < this.parent.columns.length - 1 ? scrollElement.scrollLeft += currentElement.offsetWidth : scrollElement.scrollLeft = scrollElement.scrollWidth;
          }
          if (this.isAutoFillSel && (columnIndex === this.parent.columns.length - 1 || columnIndex === -1) && this.startAFCell && this.endAFCell) {
            this.positionAFBorders();
            scrollElement.scrollLeft = this.parent.enableRtl ? -scrollElement.scrollWidth : scrollElement.scrollWidth;
          }
          break;
      }
      if (rowIndex > -1 && rowIndex < this.parent.getRows().length && columnIndex > -1) {
        var mouseEvent_1 = {
          target: this.parent.getCellFromIndex(rowIndex, columnIndex)
        };
        if (this.isAutoFillSel && mouseEvent_1.target.classList.contains("e-cellselectionbackground") && (direction === "down" && parseInt(mouseEvent_1.target.getAttribute("index"), 10) === this.parent.getRows().length - 1 || direction === "right" && parseInt(mouseEvent_1.target.getAttribute("aria-colindex"), 10) - 1 === this.parent.columns.length - 1)) {
          return;
        }
        this.endAFCell = mouseEvent_1.target;
        this.preventFocus = true;
        this.selectLikeExcel(mouseEvent_1, rowIndex, columnIndex);
      }
    };
    Selection2.prototype.findNextCell = function(scrollElement, direction, columnIndex, rowIndex) {
      var nextElement = this.parent.getCellFromIndex(rowIndex, direction === "left" ? columnIndex - 1 : columnIndex + 1);
      if (nextElement && nextElement.classList.contains("e-hide")) {
        var siblingEles = nextElement.closest("tr").querySelectorAll(".e-rowcell:not(.e-hide)");
        var nextEleInd = Array.from(siblingEles).indexOf(nextElement.nextElementSibling);
        if (nextEleInd > 0 && nextEleInd < siblingEles.length - 1) {
          nextElement = siblingEles[nextEleInd + (direction === "left" ? -1 : 1)];
          return nextElement;
        } else {
          scrollElement.scrollLeft = 0;
          return null;
        }
      }
      return nextElement;
    };
    Selection2.prototype.selectLikeExcel = function(e, rowIndex, cellIndex) {
      if (!this.isAutoFillSel) {
        this.clearCellSelection();
        this.selectCellsByRange({
          rowIndex: this.startDIndex,
          cellIndex: this.startDCellIndex
        }, {
          rowIndex,
          cellIndex
        });
        this.drawBorders();
      } else {
        this.showAFBorders();
        this.selectLikeAutoFill(e);
      }
    };
    Selection2.prototype.setFrozenBorders = function(parentEle, border, bdrStr) {
      var width = border.style.borderWidth.toString().split(" ");
      var strCell = ["", "e-leftfreeze", "e-unfreeze", "e-leftfreeze", "e-unfreeze", "e-rightfreeze", "e-rightfreeze"];
      var cells = [].slice.call(parentEle.querySelectorAll(".e-cellselectionbackground." + strCell["" + bdrStr])).filter(function(ele) {
        return ele.style.display === "";
      });
      var fixedCells = [].slice.call(parentEle.querySelectorAll(".e-cellselectionbackground.e-fixedfreeze")).filter(function(ele) {
        return ele.style.display === "";
      });
      var isRtl = this.parent.enableRtl;
      if (cells.length) {
        var firstRowIdx = cells[0].getAttribute("index");
        var firstColIdx = cells[0].getAttribute("aria-colindex");
        var lastRowIdx = cells[cells.length - 1].getAttribute("index");
        var lastColIdx = cells[cells.length - 1].getAttribute("aria-colindex");
        for (var i = 0; i < cells.length; i++) {
          if (cells[parseInt(i.toString(), 10)].getAttribute("index") === firstRowIdx && (width.length === 1 || width.length === 3 && parseInt(width[0], 10) === 2 || width.length === 4 && parseInt(width[0], 10) === 2)) {
            cells[parseInt(i.toString(), 10)].classList.add("e-xlsel-top-border");
          }
          if (cells[parseInt(i.toString(), 10)].getAttribute("aria-colindex") === firstColIdx && (width.length === 1 || width.length === 3 && parseInt(width[1], 10) === 2 || width.length === 4 && (!isRtl && parseInt(width[3], 10) === 2 || isRtl && parseInt(width[1], 10) === 2))) {
            cells[parseInt(i.toString(), 10)].classList.add(isRtl ? "e-xlsel-right-border" : "e-xlsel-left-border");
          }
          if (cells[parseInt(i.toString(), 10)].getAttribute("index") === lastRowIdx && (width.length === 1 || width.length === 3 && parseInt(width[2], 10) === 2 || width.length === 4 && parseInt(width[2], 10) === 2)) {
            cells[parseInt(i.toString(), 10)].classList.add("e-xlsel-bottom-border");
          }
          if (cells[parseInt(i.toString(), 10)].getAttribute("aria-colindex") === lastColIdx && (width.length === 1 || width.length === 3 && parseInt(width[1], 10) === 2 || width.length === 4 && !isRtl && parseInt(width[1], 10) === 2 || isRtl && parseInt(width[3], 10) === 2)) {
            cells[parseInt(i.toString(), 10)].classList.add(isRtl ? "e-xlsel-left-border" : "e-xlsel-right-border");
          }
        }
      }
      if (fixedCells.length) {
        var firstRowIdx = fixedCells[0].getAttribute("index");
        var firstColIdx = (parseInt(fixedCells[0].getAttribute("aria-colindex"), 10) - 1).toString();
        var lastRowIdx = fixedCells[fixedCells.length - 1].getAttribute("index");
        var lastColIdx = (parseInt(fixedCells[fixedCells.length - 1].getAttribute("aria-colindex"), 10) - 1).toString();
        for (var i = 0; i < fixedCells.length; i++) {
          var idx = fixedCells[parseInt(i.toString(), 10)].getAttribute("index");
          var colIdx = (parseInt(fixedCells[parseInt(i.toString(), 10)].getAttribute("aria-colindex"), 10) - 1).toString();
          if (idx === firstRowIdx && (!this.parent.getHeaderContent().querySelector(".e-cellselectionbackground.e-fixedfreeze") && parentsUntil(parentEle, "e-content") || !parentsUntil(parentEle, "e-content"))) {
            fixedCells[parseInt(i.toString(), 10)].classList.add("e-xlsel-top-border");
          }
          if (idx === lastRowIdx && (!this.parent.getContent().querySelector(".e-cellselectionbackground.e-fixedfreeze") && parentsUntil(parentEle, "e-headercontent") || !parentsUntil(parentEle, "e-headercontent"))) {
            fixedCells[parseInt(i.toString(), 10)].classList.add("e-xlsel-bottom-border");
          }
          var preCell = fixedCells[parseInt(i.toString(), 10)].parentElement.children[parseInt(colIdx, 10) - 1];
          if (colIdx === firstColIdx && (!preCell || preCell && !preCell.classList.contains("e-cellselectionbackground"))) {
            fixedCells[parseInt(i.toString(), 10)].classList.add(isRtl ? "e-xlsel-right-border" : "e-xlsel-left-border");
          }
          var nextCell = fixedCells[parseInt(i.toString(), 10)].parentElement.children[parseInt(colIdx, 10) + 1];
          if (colIdx === lastColIdx && (!nextCell || nextCell && !nextCell.classList.contains("e-cellselectionbackground"))) {
            fixedCells[parseInt(i.toString(), 10)].classList.add(isRtl ? "e-xlsel-left-border" : "e-xlsel-right-border");
          }
        }
      }
    };
    Selection2.prototype.refreshFrozenBorders = function() {
      if (this.bdrElement) {
        this.setFrozenBorders(this.parent.getContentTable(), this.bdrElement, "1");
        if (this.parent.isFrozenGrid() && this.parent.getFrozenMode() === leftRight) {
          this.setFrozenBorders(this.parent.getContentTable(), this.frcBdrElement, "5");
        }
        if (this.parent.frozenRows) {
          this.setFrozenBorders(this.parent.getHeaderTable(), this.fhBdrElement, "3");
          if (this.parent.isFrozenGrid() && this.parent.getFrozenMode() === leftRight) {
            this.setFrozenBorders(this.parent.getHeaderTable(), this.frhBdrElement, "6");
          }
        }
      }
    };
    Selection2.prototype.drawBorders = function() {
      if (this.selectionSettings.cellSelectionMode === "BoxWithBorder" && this.selectedRowCellIndexes.length && !this.parent.isEdit) {
        this.parent.element.classList.add("e-enabledboxbdr");
        if (!this.bdrElement) {
          this.createBorders();
        }
        this.positionBorders();
        if (this.parent.isFrozenGrid()) {
          this.showHideBorders("none", true);
          this.refreshFrozenBorders();
        }
      } else {
        this.showHideBorders("none");
      }
    };
    Selection2.prototype.isLastCell = function(cell) {
      var cells = [].slice.call(cell.parentElement.querySelectorAll(".e-rowcell:not(.e-hide)"));
      return cells[cells.length - 1] === cell;
    };
    Selection2.prototype.isLastRow = function(cell) {
      var rows = [].slice.call(closest(cell, tbody).querySelectorAll(".e-row:not(.e-hiddenrow)"));
      return cell.parentElement === rows[rows.length - 1];
    };
    Selection2.prototype.isFirstRow = function(cell) {
      var rows = [].slice.call(closest(cell, tbody).querySelectorAll(".e-row:not(.e-hiddenrow)"));
      return cell.parentElement === rows[0];
    };
    Selection2.prototype.isFirstCell = function(cell) {
      var cells = [].slice.call(cell.parentElement.querySelectorAll(".e-rowcell:not(.e-hide)"));
      return cells[0] === cell;
    };
    Selection2.prototype.setBorders = function(parentEle, border, bdrStr) {
      var cells = [].slice.call(parentEle.getElementsByClassName("e-cellselectionbackground")).filter(function(ele) {
        return ele.style.display === "";
      });
      if (cells.length && this.parent.isFrozenGrid()) {
        var strCell = ["", "e-leftfreeze", "e-unfreeze", "e-leftfreeze", "e-unfreeze", "e-rightfreeze", "e-rightfreeze"];
        cells = [].slice.call(parentEle.querySelectorAll(".e-cellselectionbackground." + strCell["" + bdrStr] + ":not(.e-hide)")).filter(function(ele) {
          return ele.style.display === "";
        });
      }
      if (cells.length) {
        var isFrozen = this.parent.isFrozenGrid();
        var start = cells[0];
        var end = cells[cells.length - 1];
        var stOff = start.getBoundingClientRect();
        var endOff = end.getBoundingClientRect();
        var parentOff = start.offsetParent.getBoundingClientRect();
        if (start.offsetParent.classList.contains("e-content") || start.offsetParent.classList.contains("e-headercontent")) {
          parentOff = start.offsetParent.querySelector("table").getBoundingClientRect();
        }
        var rowHeight2 = !isFrozen && this.isLastRow(end) && (bdrStr === "1" || bdrStr === "2" || bdrStr === "5") ? 2 : 0;
        var topOffSet = 0;
        var leftOffset = isFrozen && (bdrStr === "2" || bdrStr === "4") && this.isFirstCell(start) ? 1 : 0;
        var rightOffset = (this.parent.getFrozenMode() === "Right" && (bdrStr === "1" || bdrStr === "3") || this.parent.getFrozenMode() === leftRight && (bdrStr === "5" || bdrStr === "6")) && this.isFirstCell(start) ? 1 : 0;
        if (this.parent.enableRtl) {
          border.style.right = parentOff.right - stOff.right - leftOffset + "px";
          border.style.width = stOff.right - endOff.left + leftOffset + 1 + "px";
        } else {
          border.style.left = stOff.left - parentOff.left - leftOffset - rightOffset + "px";
          border.style.width = endOff.right - stOff.left + leftOffset - rightOffset + 1 + "px";
        }
        border.style.top = stOff.top - parentOff.top - topOffSet + "px";
        border.style.height = endOff.top - stOff.top > 0 ? endOff.top - parentOff.top + endOff.height + (isFrozen ? 0 : 1) - (stOff.top - parentOff.top) - rowHeight2 + topOffSet + "px" : endOff.height + topOffSet - rowHeight2 + (isFrozen ? 0 : 1) + "px";
        this.selectDirection += bdrStr;
      } else {
        border.style.display = "none";
      }
    };
    Selection2.prototype.positionBorders = function() {
      this.updateStartEndCells();
      if (!this.startCell || !this.bdrElement || !this.selectedRowCellIndexes.length) {
        return;
      }
      this.selectDirection = "";
      this.showHideBorders("");
      this.setBorders(this.parent.getContentTable(), this.bdrElement, "1");
      if (this.parent.isFrozenGrid()) {
        this.setBorders(this.parent.getContentTable(), this.mcBdrElement, "2");
        if (this.parent.getFrozenMode() === leftRight) {
          this.setBorders(this.parent.getContentTable(), this.frcBdrElement, "5");
        }
      }
      if (this.parent.frozenRows) {
        this.setBorders(this.parent.getHeaderTable(), this.fhBdrElement, "3");
        if (this.parent.isFrozenGrid()) {
          this.setBorders(this.parent.getHeaderTable(), this.mhBdrElement, "4");
          if (this.parent.getFrozenMode() === leftRight) {
            this.setBorders(this.parent.getHeaderTable(), this.frhBdrElement, "6");
          }
        }
      }
      this.applyBorders(this.selectDirection);
    };
    Selection2.prototype.applyBothFrozenBorders = function(str) {
      var rtl = this.parent.enableRtl;
      switch (str.length) {
        case 6:
          {
            this.bdrElement.style.borderWidth = rtl ? this.right_bottom : this.bottom_left;
            this.mcBdrElement.style.borderWidth = this.bottom;
            this.fhBdrElement.style.borderWidth = rtl ? this.top_right : this.top_left;
            this.mhBdrElement.style.borderWidth = this.top;
            this.frcBdrElement.style.borderWidth = rtl ? this.bottom_left : this.right_bottom;
            this.frhBdrElement.style.borderWidth = rtl ? this.top_left : this.top_right;
          }
          break;
        case 4:
          {
            if (str.includes("1") && str.includes("2") && str.includes("3") && str.includes("4")) {
              this.fhBdrElement.style.borderWidth = rtl ? this.top_right : this.top_left;
              this.mhBdrElement.style.borderWidth = rtl ? this.top_left : this.top_right;
              this.bdrElement.style.borderWidth = rtl ? this.right_bottom : this.bottom_left;
              this.mcBdrElement.style.borderWidth = rtl ? this.bottom_left : this.right_bottom;
            }
            if (str.includes("2") && str.includes("4") && str.includes("5") && str.includes("6")) {
              this.mcBdrElement.style.borderWidth = rtl ? this.right_bottom : this.bottom_left;
              this.mhBdrElement.style.borderWidth = rtl ? this.top_right : this.top_left;
              this.frcBdrElement.style.borderWidth = rtl ? this.bottom_left : this.right_bottom;
              this.frhBdrElement.style.borderWidth = rtl ? this.top_left : this.top_right;
            }
          }
          break;
        case 3:
          {
            this.bdrElement.style.borderWidth = rtl ? this.top_right_bottom : this.top_bottom_left;
            this.mcBdrElement.style.borderWidth = this.top_bottom;
            this.frcBdrElement.style.borderWidth = rtl ? this.top_bottom_left : this.top_right_bottom;
            if (this.parent.frozenRows) {
              this.fhBdrElement.style.borderWidth = rtl ? this.top_right_bottom : this.top_bottom_left;
              this.mhBdrElement.style.borderWidth = this.top_bottom;
              this.frcBdrElement.style.borderWidth = rtl ? this.top_bottom_left : this.top_right_bottom;
            }
          }
          break;
        case 2:
          {
            if (str.includes("1")) {
              this.mcBdrElement.style.borderWidth = rtl ? this.top_bottom_left : this.top_right_bottom;
              if (this.parent.frozenRows) {
                this.fhBdrElement.style.borderWidth = this.top_right_left;
              }
            }
            if (str.includes("2")) {
              this.bdrElement.style.borderWidth = rtl ? this.top_right_bottom : this.top_bottom_left;
              this.frcBdrElement.style.borderWidth = rtl ? this.top_bottom_left : this.top_right_bottom;
              if (this.parent.frozenRows) {
                this.mhBdrElement.style.borderWidth = this.top_right_left;
              }
            }
            if (str.includes("3")) {
              this.mhBdrElement.style.borderWidth = rtl ? this.top_bottom_left : this.top_right_bottom;
              this.bdrElement.style.borderWidth = this.right_bottom_left;
            }
            if (str.includes("4")) {
              this.fhBdrElement.style.borderWidth = rtl ? this.top_right_bottom : this.top_bottom_left;
              this.frhBdrElement.style.borderWidth = rtl ? this.top_bottom_left : this.top_right_bottom;
              this.mcBdrElement.style.borderWidth = this.right_bottom_left;
            }
            if (str.includes("5")) {
              this.mcBdrElement.style.borderWidth = rtl ? this.top_right_bottom : this.top_bottom_left;
              if (this.parent.frozenRows) {
                this.frhBdrElement.style.borderWidth = this.top_right_left;
              }
            }
            if (str.includes("6")) {
              this.mhBdrElement.style.borderWidth = rtl ? this.top_right_bottom : this.top_bottom_left;
              this.frcBdrElement.style.borderWidth = this.right_bottom_left;
            }
          }
          break;
        default:
          this.bdrElement.style.borderWidth = this.all_border;
          this.mcBdrElement.style.borderWidth = this.all_border;
          this.frcBdrElement.style.borderWidth = this.all_border;
          if (this.parent.frozenRows) {
            this.fhBdrElement.style.borderWidth = this.all_border;
            this.mhBdrElement.style.borderWidth = this.all_border;
            this.frhBdrElement.style.borderWidth = this.all_border;
          }
          break;
      }
    };
    Selection2.prototype.applyBorders = function(str) {
      var rtl = this.parent.enableRtl;
      if (this.parent.getFrozenMode() === leftRight) {
        this.applyBothFrozenBorders(str);
      } else {
        switch (str.length) {
          case 4:
            {
              if (this.parent.getFrozenMode() === "Right") {
                this.bdrElement.style.borderWidth = rtl ? this.bottom_left : this.right_bottom;
                this.mcBdrElement.style.borderWidth = rtl ? this.right_bottom : this.bottom_left;
                this.fhBdrElement.style.borderWidth = rtl ? this.top_left : this.top_right;
                this.mhBdrElement.style.borderWidth = rtl ? this.top_right : this.top_left;
              } else {
                this.bdrElement.style.borderWidth = rtl ? this.right_bottom : this.bottom_left;
                this.mcBdrElement.style.borderWidth = rtl ? this.bottom_left : this.right_bottom;
                this.fhBdrElement.style.borderWidth = rtl ? this.top_right : this.top_left;
                this.mhBdrElement.style.borderWidth = rtl ? this.top_left : this.top_right;
              }
            }
            break;
          case 2:
            {
              if (this.parent.getFrozenMode() === "Right") {
                this.bdrElement.style.borderWidth = str.includes("2") ? rtl ? this.top_bottom_left : this.top_right_bottom : this.right_bottom_left;
                this.mcBdrElement.style.borderWidth = str.includes("1") ? rtl ? this.top_right_bottom : this.top_bottom_left : this.right_bottom_left;
                if (this.parent.frozenRows) {
                  this.fhBdrElement.style.borderWidth = str.includes("1") ? this.top_right_left : rtl ? this.top_bottom_left : this.top_right_bottom;
                  this.mhBdrElement.style.borderWidth = str.includes("2") ? this.top_right_left : rtl ? this.top_right_bottom : this.top_bottom_left;
                }
              } else {
                this.bdrElement.style.borderWidth = str.includes("2") ? rtl ? this.top_right_bottom : this.top_bottom_left : this.right_bottom_left;
                if (this.parent.isFrozenGrid()) {
                  this.mcBdrElement.style.borderWidth = str.includes("1") ? rtl ? this.top_bottom_left : this.top_right_bottom : this.right_bottom_left;
                }
                if (this.parent.frozenRows) {
                  this.fhBdrElement.style.borderWidth = str.includes("1") ? this.top_right_left : rtl ? this.top_right_bottom : this.top_bottom_left;
                  if (this.parent.isFrozenGrid()) {
                    this.mhBdrElement.style.borderWidth = str.includes("2") ? this.top_right_left : rtl ? this.top_bottom_left : this.top_right_bottom;
                  }
                }
              }
            }
            break;
          default:
            this.bdrElement.style.borderWidth = this.all_border;
            if (this.parent.isFrozenGrid()) {
              this.mcBdrElement.style.borderWidth = this.all_border;
            }
            if (this.parent.frozenRows) {
              this.fhBdrElement.style.borderWidth = this.all_border;
              if (this.parent.isFrozenGrid()) {
                this.mhBdrElement.style.borderWidth = this.all_border;
              }
            }
            break;
        }
      }
    };
    Selection2.prototype.createBorders = function() {
      if (!this.bdrElement) {
        var selectionBorder = createElement("div", {
          className: "e-xlsel",
          id: this.parent.element.id + "_bdr"
        });
        selectionBorder.style.cssText = "width: 2px; border-width: 0;";
        this.bdrElement = this.parent.getContentTable().parentElement.appendChild(selectionBorder);
        if (this.parent.isFrozenGrid()) {
          var middleContentBorder = createElement("div", {
            className: "e-xlsel",
            id: this.parent.element.id + "_mcbdr"
          });
          middleContentBorder.style.cssText = "height: 2px; border-width: 0;";
          this.mcBdrElement = this.parent.getContentTable().parentElement.appendChild(middleContentBorder);
          if (this.parent.getFrozenMode() === leftRight) {
            var frozenRightContentBorder = createElement("div", {
              className: "e-xlsel",
              id: this.parent.element.id + "_frcbdr"
            });
            frozenRightContentBorder.style.cssText = "height: 2px; border-width: 0;";
            this.frcBdrElement = this.parent.getContentTable().parentElement.appendChild(frozenRightContentBorder);
          }
        }
        if (this.parent.frozenRows) {
          var frozenHeaderBorder = createElement("div", {
            className: "e-xlsel",
            id: this.parent.element.id + "_fhbdr"
          });
          frozenHeaderBorder.style.height = "2px";
          this.fhBdrElement = this.parent.getHeaderTable().parentElement.appendChild(frozenHeaderBorder);
        }
        if (this.parent.frozenRows && this.parent.isFrozenGrid()) {
          var middleHeaderBorder = createElement("div", {
            className: "e-xlsel",
            id: this.parent.element.id + "_mhbdr"
          });
          middleHeaderBorder.style.height = "2px";
          this.mhBdrElement = this.parent.getHeaderTable().parentElement.appendChild(middleHeaderBorder);
          if (this.parent.getFrozenMode() === leftRight) {
            var frozenRightHeaderBorder = createElement("div", {
              className: "e-xlsel",
              id: this.parent.element.id + "_frhbdr"
            });
            frozenRightHeaderBorder.style.height = "2px";
            this.frhBdrElement = this.parent.getHeaderTable().parentElement.appendChild(frozenRightHeaderBorder);
          }
        }
      }
    };
    Selection2.prototype.showHideBorders = function(display, freeze) {
      if (this.bdrElement) {
        this.bdrElement.style.display = display;
        if (this.parent.isFrozenGrid()) {
          var parentEle = this.parent.getContentTable();
          removeClass(parentEle.querySelectorAll(".e-xlsel-top-border"), "e-xlsel-top-border");
          removeClass(parentEle.querySelectorAll(".e-xlsel-left-border"), "e-xlsel-left-border");
          removeClass(parentEle.querySelectorAll(".e-xlsel-right-border"), "e-xlsel-right-border");
          removeClass(parentEle.querySelectorAll(".e-xlsel-bottom-border"), "e-xlsel-bottom-border");
          if (!freeze) {
            this.mcBdrElement.style.display = display;
          }
          if (this.parent.getFrozenMode() === leftRight) {
            this.frcBdrElement.style.display = display;
          }
        }
        if (this.parent.frozenRows) {
          var parentEle = this.parent.getHeaderTable();
          removeClass(parentEle.querySelectorAll(".e-xlsel-top-border"), "e-xlsel-top-border");
          removeClass(parentEle.querySelectorAll(".e-xlsel-left-border"), "e-xlsel-left-border");
          removeClass(parentEle.querySelectorAll(".e-xlsel-right-border"), "e-xlsel-right-border");
          removeClass(parentEle.querySelectorAll(".e-xlsel-bottom-border"), "e-xlsel-bottom-border");
          this.fhBdrElement.style.display = display;
        }
        if (this.parent.frozenRows && this.parent.isFrozenGrid()) {
          if (!freeze) {
            this.mhBdrElement.style.display = display;
          }
          if (this.parent.getFrozenMode() === leftRight) {
            this.frhBdrElement.style.display = display;
          }
        }
      }
    };
    Selection2.prototype.drawAFBorders = function() {
      if (!this.bdrAFBottom) {
        this.createAFBorders();
      }
      this.positionAFBorders();
    };
    Selection2.prototype.positionAFBorders = function() {
      if (!this.startCell || !this.bdrAFLeft) {
        return;
      }
      var stOff = this.startAFCell.getBoundingClientRect();
      var endOff = this.endAFCell.getBoundingClientRect();
      var top = endOff.top - stOff.top > 0 ? 1 : 0;
      var firstCellTop = endOff.top - stOff.top >= 0 && (parentsUntil(this.startAFCell, movableContent) || parentsUntil(this.startAFCell, "e-frozencontent")) && this.isFirstRow(this.startAFCell) ? 1.5 : 0;
      var firstCellLeft = (parentsUntil(this.startAFCell, movableContent) || parentsUntil(this.startAFCell, movableHeader)) && this.isFirstCell(this.startAFCell) ? 1 : 0;
      var rowHeight2 = this.isLastRow(this.endAFCell) && (parentsUntil(this.endAFCell, movableContent) || parentsUntil(this.endAFCell, "e-frozencontent")) ? 2 : 0;
      var parentOff = this.startAFCell.offsetParent.getBoundingClientRect();
      var parentRect = this.parent.element.getBoundingClientRect();
      var sTop = this.startAFCell.offsetParent.parentElement.scrollTop;
      var sLeft = this.startAFCell.offsetParent.parentElement.scrollLeft;
      var scrollTop = sTop - this.startAFCell.offsetTop;
      var scrollLeft = sLeft - this.startAFCell.offsetLeft;
      var totalHeight = this.parent.element.clientHeight - getScrollBarWidth();
      if (this.parent.allowPaging) {
        totalHeight -= this.parent.element.querySelector(".e-pager").offsetHeight;
      }
      if (this.parent.aggregates.length) {
        totalHeight -= this.parent.getFooterContent().offsetHeight;
      }
      var totalWidth = this.parent.element.clientWidth - (this.parent.height !== "auto" ? getScrollBarWidth() : 0);
      scrollTop = scrollTop > 0 ? Math.floor(scrollTop) - 1 : 0;
      scrollLeft = scrollLeft > 0 ? scrollLeft : 0;
      var left = stOff.left - parentRect.left;
      if (!this.parent.enableRtl) {
        this.bdrAFLeft.style.left = left - firstCellLeft + scrollLeft - 1 + "px";
        this.bdrAFRight.style.left = endOff.left - parentRect.left - 2 + endOff.width + "px";
        this.bdrAFRight.style.width = totalWidth <= parseInt(this.bdrAFRight.style.left, 10) ? "0px" : "2px";
        this.bdrAFTop.style.left = left + scrollLeft - 0.5 + "px";
        this.bdrAFTop.style.width = parseInt(this.bdrAFRight.style.left, 10) - parseInt(this.bdrAFLeft.style.left, 10) - firstCellLeft + 1 + "px";
        if (totalWidth <= parseInt(this.bdrAFTop.style.width, 10) + parseInt(this.bdrAFTop.style.left, 10)) {
          var leftRemove = parseInt(this.bdrAFTop.style.width, 10) + parseInt(this.bdrAFTop.style.left, 10) - totalWidth;
          this.bdrAFTop.style.width = parseInt(this.bdrAFTop.style.width, 10) - leftRemove + "px";
        }
      } else {
        var scrolloffSet = parentsUntil(this.startAFCell, movableContent) || parentsUntil(this.startAFCell, movableHeader) ? stOff.right - this.startAFCell.offsetParent.parentElement.getBoundingClientRect().width - parentRect.left : 0;
        this.bdrAFLeft.style.right = parentRect.right - endOff.right - 2 + endOff.width + "px";
        this.bdrAFLeft.style.width = totalWidth <= parseInt(this.bdrAFLeft.style.right, 10) ? "0px" : "2px";
        var borderAFRightValue = parentRect.right - stOff.right - firstCellLeft + scrolloffSet - 1;
        borderAFRightValue > 0 ? this.bdrAFRight.style.right = borderAFRightValue + "px" : this.bdrAFRight.style.right = "0px";
        this.bdrAFTop.style.left = endOff.left - parentRect.left - 0.5 + "px";
        this.bdrAFTop.style.width = parseInt(this.bdrAFLeft.style.right, 10) - parseInt(this.bdrAFRight.style.right, 10) - firstCellLeft + 1 + "px";
        if (parseInt(this.bdrAFTop.style.left, 10) < 0) {
          this.bdrAFTop.style.width = parseInt(this.bdrAFTop.style.width, 10) + parseInt(this.bdrAFTop.style.left, 10) + "px";
          if (this.parent.height !== "auto" && getScrollBarWidth()) {
            this.bdrAFTop.style.left = getScrollBarWidth() + "px";
            this.bdrAFTop.style.width = parseInt(this.bdrAFTop.style.width, 10) - getScrollBarWidth() + "px";
          } else {
            this.bdrAFTop.style.left = "0px";
          }
        }
      }
      this.bdrAFLeft.style.top = stOff.top - parentRect.top - firstCellTop + scrollTop + "px";
      this.bdrAFLeft.style.height = endOff.top - stOff.top > 0 ? endOff.top - parentOff.top + endOff.height + 1 - (stOff.top - parentOff.top) + firstCellTop - rowHeight2 - scrollTop + "px" : endOff.height + firstCellTop - rowHeight2 - scrollTop + "px";
      this.bdrAFRight.style.top = this.bdrAFLeft.style.top;
      this.bdrAFRight.style.height = parseInt(this.bdrAFLeft.style.height, 10) + "px";
      this.bdrAFTop.style.top = this.bdrAFRight.style.top;
      this.bdrAFBottom.style.left = this.bdrAFTop.style.left;
      this.bdrAFBottom.style.top = parseFloat(this.bdrAFLeft.style.top) + parseFloat(this.bdrAFLeft.style.height) - top - 1 + "px";
      this.bdrAFBottom.style.width = totalHeight <= parseFloat(this.bdrAFBottom.style.top) ? "0px" : this.bdrAFTop.style.width;
      if (totalHeight <= parseInt(this.bdrAFLeft.style.height, 10) + parseInt(this.bdrAFLeft.style.top, 10)) {
        var topRemove = parseInt(this.bdrAFLeft.style.height, 10) + parseInt(this.bdrAFLeft.style.top, 10) - totalHeight;
        this.bdrAFLeft.style.height = parseInt(this.bdrAFLeft.style.height, 10) - topRemove + "px";
        this.bdrAFRight.style.height = parseInt(this.bdrAFLeft.style.height, 10) + "px";
      }
    };
    Selection2.prototype.createAFBorders = function() {
      if (!this.bdrAFLeft) {
        var leftSelectionBorder = createElement("div", {
          className: "e-xlselaf",
          id: this.parent.element.id + "_bdrafleft"
        });
        leftSelectionBorder.style.width = "2px";
        this.bdrAFLeft = this.parent.element.appendChild(leftSelectionBorder);
        var rightSelectionBorder = createElement("div", {
          className: "e-xlselaf",
          id: this.parent.element.id + "_bdrafright"
        });
        rightSelectionBorder.style.width = "2px";
        this.bdrAFRight = this.parent.element.appendChild(rightSelectionBorder);
        var bottomSelectionBorder = createElement("div", {
          className: "e-xlselaf",
          id: this.parent.element.id + "_bdrafbottom"
        });
        bottomSelectionBorder.style.height = "2px";
        this.bdrAFBottom = this.parent.element.appendChild(bottomSelectionBorder);
        var topSelectionBorder = createElement("div", {
          className: "e-xlselaf",
          id: this.parent.element.id + "_bdraftop"
        });
        topSelectionBorder.style.height = "2px";
        this.bdrAFTop = this.parent.element.appendChild(topSelectionBorder);
      }
    };
    Selection2.prototype.destroyAutoFillElements = function() {
      if (this.bdrAFLeft) {
        this.bdrAFLeft.remove();
        this.bdrAFRight.remove();
        this.bdrAFBottom.remove();
        this.bdrAFTop.remove();
        this.bdrAFLeft = this.bdrAFRight = this.bdrAFBottom = this.bdrAFTop = null;
      }
      if (this.autofill) {
        this.autofill.remove();
        this.autofill = null;
      }
    };
    Selection2.prototype.showAFBorders = function() {
      if (this.bdrAFLeft) {
        this.bdrAFLeft.style.display = "";
        this.bdrAFRight.style.display = "";
        this.bdrAFBottom.style.display = "";
        this.bdrAFTop.style.display = "";
      }
    };
    Selection2.prototype.hideAFBorders = function() {
      if (this.bdrAFLeft) {
        this.bdrAFLeft.style.display = "none";
        this.bdrAFRight.style.display = "none";
        this.bdrAFBottom.style.display = "none";
        this.bdrAFTop.style.display = "none";
      }
    };
    Selection2.prototype.updateValue = function(rIdx, cIdx, cell) {
      var args = this.createBeforeAutoFill(rIdx, cIdx, cell);
      if (!args.cancel) {
        var col = this.parent.getColumnByIndex(cIdx);
        if (this.parent.editModule && cell) {
          if (col.type === "number") {
            this.parent.editModule.updateCell(rIdx, col.field, parseFloat(args.value));
          } else {
            this.parent.editModule.updateCell(rIdx, col.field, args.value);
          }
        }
      }
    };
    Selection2.prototype.createBeforeAutoFill = function(rowIndex, colIndex, cell) {
      var col = this.parent.getColumnByIndex(colIndex);
      var args = {
        column: col,
        value: cell.innerText
      };
      this.parent.trigger(beforeAutoFill, args);
      return args;
    };
    Selection2.prototype.getAutoFillCells = function(rowIndex, startCellIdx) {
      var cls = ".e-cellselectionbackground";
      var cells = [].slice.call(this.parent.getDataRows()[parseInt(rowIndex.toString(), 10)].querySelectorAll(cls));
      return cells;
    };
    Selection2.prototype.selectLikeAutoFill = function(e, isApply) {
      var startrowIdx = parseInt(parentsUntil(this.startAFCell, row).getAttribute(ariaRowIndex), 10) - 1;
      var startCellIdx = parseInt(this.startAFCell.getAttribute(ariaColIndex), 10) - 1;
      var endrowIdx = parseInt(parentsUntil(this.endAFCell, row).getAttribute(ariaRowIndex), 10) - 1;
      var endCellIdx = parseInt(this.endAFCell.getAttribute(ariaColIndex), 10) - 1;
      var rowLen = this.selectedRowCellIndexes.length - 1;
      var colLen = this.selectedRowCellIndexes[0].cellIndexes.length - 1;
      switch (true) {
        //direction
        case (!isApply && this.endAFCell.classList.contains("e-cellselectionbackground") && !!parentsUntil(e.target, rowCell)):
          this.startAFCell = this.parent.getCellFromIndex(startrowIdx, startCellIdx);
          this.endAFCell = this.parent.getCellFromIndex(startrowIdx + rowLen, startCellIdx + colLen);
          this.drawAFBorders();
          break;
        case (this.autoFillRLselection && startCellIdx + colLen < endCellIdx && //right
        endCellIdx - startCellIdx - colLen + 1 > endrowIdx - startrowIdx - rowLen && endCellIdx - startCellIdx - colLen + 1 > startrowIdx - endrowIdx):
          this.endAFCell = this.parent.getCellFromIndex(startrowIdx + rowLen, endCellIdx);
          endrowIdx = parseInt(parentsUntil(this.endAFCell, row).getAttribute(ariaRowIndex), 10) - 1;
          endCellIdx = parseInt(this.endAFCell.getAttribute(ariaColIndex), 10) - 1;
          if (!isApply) {
            this.drawAFBorders();
          } else {
            var cellIdx = parseInt(this.endCell.getAttribute(ariaColIndex), 10) - 1;
            for (var i = startrowIdx; i <= endrowIdx; i++) {
              var cells = this.getAutoFillCells(i, startCellIdx);
              var c = 0;
              for (var j = cellIdx + 1; j <= endCellIdx; j++) {
                if (c > colLen) {
                  c = 0;
                }
                this.updateValue(i, j, cells[parseInt(c.toString(), 10)]);
                c++;
              }
            }
            this.selectCellsByRange({
              rowIndex: startrowIdx,
              cellIndex: this.startCellIndex
            }, {
              rowIndex: endrowIdx,
              cellIndex: endCellIdx
            });
          }
          break;
        case (this.autoFillRLselection && startCellIdx > endCellIdx && // left
        startCellIdx - endCellIdx + 1 > endrowIdx - startrowIdx - rowLen && //left top
        startCellIdx - endCellIdx + 1 > startrowIdx - endrowIdx):
          this.startAFCell = this.parent.getCellFromIndex(startrowIdx, endCellIdx);
          this.endAFCell = this.endCell;
          if (!isApply) {
            this.drawAFBorders();
          } else {
            for (var i = startrowIdx; i <= startrowIdx + rowLen; i++) {
              var cells = this.getAutoFillCells(i, startCellIdx);
              cells.reverse();
              var c = 0;
              for (var j = this.startCellIndex - 1; j >= endCellIdx; j--) {
                if (c > colLen) {
                  c = 0;
                }
                this.updateValue(i, j, cells[parseInt(c.toString(), 10)]);
                c++;
              }
            }
            this.selectCellsByRange({
              rowIndex: startrowIdx,
              cellIndex: endCellIdx
            }, {
              rowIndex: startrowIdx + rowLen,
              cellIndex: this.startCellIndex + colLen
            });
          }
          break;
        case startrowIdx > endrowIdx:
          this.startAFCell = this.parent.getCellFromIndex(endrowIdx, startCellIdx);
          this.endAFCell = this.endCell;
          if (!isApply) {
            this.drawAFBorders();
          } else {
            var trIdx = parseInt(this.endCell.parentElement.getAttribute(ariaRowIndex), 10) - 1;
            var r = trIdx;
            for (var i = startrowIdx - 1; i >= endrowIdx; i--) {
              if (r === this.startIndex - 1) {
                r = trIdx;
              }
              var cells = this.getAutoFillCells(r, startCellIdx);
              var c = 0;
              r--;
              for (var j = this.startCellIndex; j <= this.startCellIndex + colLen; j++) {
                this.updateValue(i, j, cells[parseInt(c.toString(), 10)]);
                c++;
              }
            }
            this.selectCellsByRange({
              rowIndex: endrowIdx,
              cellIndex: startCellIdx + colLen
            }, {
              rowIndex: startrowIdx + rowLen,
              cellIndex: startCellIdx
            });
          }
          break;
        default:
          this.endAFCell = this.parent.getCellFromIndex(endrowIdx, startCellIdx + colLen);
          if (!isApply) {
            this.drawAFBorders();
          } else {
            var trIdx = parseInt(this.endCell.parentElement.getAttribute(ariaRowIndex), 10) - 1;
            var r = this.startIndex;
            for (var i = trIdx + 1; i <= endrowIdx; i++) {
              if (r === trIdx + 1) {
                r = this.startIndex;
              }
              var cells = this.getAutoFillCells(r, startCellIdx);
              r++;
              var c = 0;
              for (var m = this.startCellIndex; m <= this.startCellIndex + colLen; m++) {
                this.updateValue(i, m, cells[parseInt(c.toString(), 10)]);
                c++;
              }
            }
            this.selectCellsByRange({
              rowIndex: trIdx - rowLen,
              cellIndex: startCellIdx
            }, {
              rowIndex: endrowIdx,
              cellIndex: startCellIdx + colLen
            });
          }
          break;
      }
    };
    Selection2.prototype.mouseUpHandler = function(e) {
      this.stopTimer();
      document.body.classList.remove("e-disableuserselect");
      if (this.element && !isNullOrUndefined(this.element.parentElement)) {
        remove(this.element);
      }
      if (this.isDragged && this.selectedRowCellIndexes.length === 1 && this.selectedRowCellIndexes[0].cellIndexes.length === 1) {
        this.mUPTarget = parentsUntil(e.target, rowCell);
      } else {
        this.mUPTarget = null;
      }
      var closeRowCell = closest(e.target, ".e-rowcell");
      if (this.isDragged && !this.isAutoFillSel && this.selectionSettings.mode === "Cell" && closeRowCell && closeRowCell.classList.contains(rowCell)) {
        var rowIndex = parseInt(closeRowCell.parentElement.getAttribute(ariaRowIndex), 10) - 1;
        var cellIndex = parseInt(closeRowCell.getAttribute(ariaColIndex), 10) - 1;
        this.isDragged = false;
        this.clearCellSelection();
        this.selectCellsByRange({
          rowIndex: this.startDIndex,
          cellIndex: this.startDCellIndex
        }, {
          rowIndex,
          cellIndex
        });
      }
      this.isDragged = false;
      this.updateAutoFillPosition();
      if (this.isAutoFillSel) {
        this.preventFocus = true;
        var lastCell = parentsUntil(e.target, rowCell);
        this.endAFCell = lastCell ? lastCell : this.endCell === this.endAFCell ? this.startAFCell : this.endAFCell;
        this.startAFCell = this.startCell;
        if (!isNullOrUndefined(this.endAFCell) && !isNullOrUndefined(this.startAFCell)) {
          this.updateStartCellsIndex();
          this.selectLikeAutoFill(e, true);
          this.updateAutoFillPosition();
          this.hideAFBorders();
          this.positionBorders();
          if (this.parent.isFrozenGrid()) {
            this.showHideBorders("none", true);
            this.refreshFrozenBorders();
          }
          if (this.parent.aggregates.length > 0) {
            this.parent.notify(refreshFooterRenderer, {});
          }
        }
        this.isAutoFillSel = false;
        this.preventFocus = false;
      }
      EventHandler.remove(this.parent.getContent(), "mousemove", this.mouseMoveHandler);
      if (this.parent.frozenRows) {
        EventHandler.remove(this.parent.getHeaderContent(), "mousemove", this.mouseMoveHandler);
      }
      EventHandler.remove(document, "mouseup", this.mouseUpHandler);
    };
    Selection2.prototype.hideAutoFill = function() {
      if (this.autofill) {
        this.autofill.style.display = "none";
      }
    };
    Selection2.prototype.updateAutoFillPosition = function() {
      if (this.parent.enableAutoFill && !this.parent.isEdit && this.selectionSettings.cellSelectionMode.indexOf("Box") > -1 && !this.isRowType() && !this.isSingleSel() && this.selectedRowCellIndexes.length) {
        var index = parseInt(this.target.getAttribute(ariaColIndex), 10) - 1;
        var rindex = parseInt(this.target.getAttribute("index"), 10);
        var rowIndex = this.selectedRowCellIndexes[this.selectedRowCellIndexes.length - 1].rowIndex;
        var cells = this.getAutoFillCells(rowIndex, index).filter(function(ele) {
          return ele.style.display === "";
        });
        var col = this.parent.getColumnByIndex(index);
        var isFrozenCol = col.getFreezeTableName() === "movable";
        var isFrozenRow = rindex < this.parent.frozenRows;
        var isFrozenRight = this.parent.getFrozenMode() === leftRight && col.getFreezeTableName() === frozenRight;
        if (!select("#" + this.parent.element.id + "_autofill", parentsUntil(this.target, table))) {
          if (select("#" + this.parent.element.id + "_autofill", this.parent.element)) {
            select("#" + this.parent.element.id + "_autofill", this.parent.element).remove();
          }
          this.autofill = createElement("div", {
            className: "e-autofill",
            id: this.parent.element.id + "_autofill"
          });
          this.autofill.style.display = "none";
          if (this.target.classList.contains("e-leftfreeze") || this.target.classList.contains("e-rightfreeze") || this.target.classList.contains("e-fixedfreeze")) {
            this.autofill.classList.add("e-freeze-autofill");
          }
          if (!isFrozenRow) {
            if (!isFrozenCol) {
              this.parent.getContentTable().parentElement.appendChild(this.autofill);
            } else {
              this.parent.getContentTable().parentElement.appendChild(this.autofill);
            }
          } else {
            if (!isFrozenCol) {
              this.parent.getHeaderTable().parentElement.appendChild(this.autofill);
            } else {
              this.parent.getHeaderTable().parentElement.appendChild(this.autofill);
            }
          }
          if (isFrozenRight) {
            if (isFrozenRow) {
              this.parent.getHeaderTable().parentElement.appendChild(this.autofill);
            } else {
              this.parent.getContentTable().parentElement.appendChild(this.autofill);
            }
          }
        }
        var cell = cells[cells.length - 1];
        if (cell && cell.offsetParent) {
          var clientRect = cell.getBoundingClientRect();
          var parentOff = cell.offsetParent.getBoundingClientRect();
          if (cell.offsetParent.classList.contains("e-content") || cell.offsetParent.classList.contains("e-headercontent")) {
            parentOff = cell.offsetParent.querySelector("table").getBoundingClientRect();
          }
          var colWidth = this.isLastCell(cell) ? 4 : 0;
          var rowHeight2 = this.isLastRow(cell) ? 3 : 0;
          if (!this.parent.enableRtl) {
            this.autofill.style.left = clientRect.left - parentOff.left + clientRect.width - 4 - colWidth + "px";
          } else {
            this.autofill.style.right = parentOff.right - clientRect.right + clientRect.width - 4 - colWidth + "px";
          }
          this.autofill.style.top = clientRect.top - parentOff.top + clientRect.height - 5 - rowHeight2 + "px";
        }
        this.autofill.style.display = "";
      } else {
        this.hideAutoFill();
      }
    };
    Selection2.prototype.mouseDownHandler = function(e) {
      this.mouseButton = e.button;
      var target = e.target;
      var gObj = this.parent;
      var isDrag;
      var gridElement = parentsUntil(target, "e-grid");
      if (gridElement && gridElement.id !== gObj.element.id || parentsUntil(target, headerContent) && !this.parent.frozenRows || parentsUntil(target, "e-editedbatchcell") || parentsUntil(target, editedRow)) {
        return;
      }
      if (e.shiftKey || e.ctrlKey) {
        e.preventDefault();
      }
      if (parentsUntil(target, rowCell) && !e.shiftKey && !e.ctrlKey) {
        if (gObj.selectionSettings.cellSelectionMode.indexOf("Box") > -1 && !this.isRowType() && !this.isSingleSel()) {
          this.isCellDrag = true;
          isDrag = true;
        } else if (gObj.allowRowDragAndDrop && !gObj.isEdit && !this.parent.selectionSettings.checkboxOnly) {
          this.isRowDragSelected = false;
          if (!this.isRowType() || this.isSingleSel() || closest(target, "td").classList.contains("e-selectionbackground")) {
            this.isDragged = false;
            return;
          }
          isDrag = true;
          this.element = this.parent.createElement("div", {
            className: "e-griddragarea"
          });
          gObj.getContent().appendChild(this.element);
        }
        if (isDrag) {
          this.enableDrag(e, true);
        }
      }
      this.updateStartEndCells();
      if (target.classList.contains("e-autofill") || target.classList.contains("e-xlsel")) {
        this.isCellDrag = true;
        this.isAutoFillSel = true;
        this.enableDrag(e);
      }
    };
    Selection2.prototype.updateStartEndCells = function() {
      var cells = [].slice.call(this.parent.element.getElementsByClassName("e-cellselectionbackground"));
      this.startCell = cells[0];
      this.endCell = cells[cells.length - 1];
      if (this.startCell) {
        this.startIndex = parseInt(this.startCell.parentElement.getAttribute(ariaRowIndex), 10) - 1;
        this.startCellIndex = parseInt(parentsUntil(this.startCell, rowCell).getAttribute(ariaColIndex), 10) - 1;
      }
    };
    Selection2.prototype.updateStartCellsIndex = function() {
      if (this.startCell) {
        this.startIndex = parseInt(this.startCell.parentElement.getAttribute(ariaRowIndex), 10) - 1;
        this.startCellIndex = parseInt(parentsUntil(this.startCell, rowCell).getAttribute(ariaColIndex), 10) - 1;
      }
    };
    Selection2.prototype.enableDrag = function(e, isUpdate) {
      var gObj = this.parent;
      if (isUpdate) {
        var tr = closest(e.target, "tr");
        this.startDIndex = parseInt(tr.getAttribute(ariaRowIndex), 10) - 1;
        this.startDCellIndex = parseInt(parentsUntil(e.target, rowCell).getAttribute(ariaColIndex), 10) - 1;
      }
      document.body.classList.add("e-disableuserselect");
      var gBRect = gObj.element.getBoundingClientRect();
      var postion = getPosition(e);
      this.x = postion.x - gBRect.left;
      this.y = postion.y - gBRect.top;
      EventHandler.add(gObj.getContent(), "mousemove", this.mouseMoveHandler, this);
      if (this.parent.frozenRows) {
        EventHandler.add(gObj.getHeaderContent(), "mousemove", this.mouseMoveHandler, this);
      }
      EventHandler.add(document, "mouseup", this.mouseUpHandler, this);
    };
    Selection2.prototype.clearSelAfterRefresh = function(e) {
      var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.requestType === "infiniteScroll";
      if (e.requestType !== "virtualscroll" && !this.parent.isPersistSelection && !isInfiniteScroll) {
        this.clearSelection();
      }
      if ((e.requestType === "virtualscroll" || isInfiniteScroll) && this.parent.isPersistSelection && this.isPartialSelection && this.isHdrSelectAllClicked) {
        var rowObj = this.parent.getRowsObject().filter(function(e2) {
          return e2.isSelectable;
        });
        var indexes = [];
        this.selectedRowState = {};
        this.persistSelectedData = [];
        for (var i = 0; i < rowObj.length; i++) {
          indexes.push(rowObj[parseInt(i.toString(), 10)].index);
          var pkValue = this.getPkValue(this.primaryKey, rowObj[parseInt(i.toString(), 10)].data);
          this.selectedRowState["" + pkValue] = true;
          this.persistSelectedData.push(rowObj[parseInt(i.toString(), 10)].data);
        }
        this.selectedRowIndexes = indexes;
      }
    };
    Selection2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.evtHandlers = [{
        event: uiUpdate,
        handler: this.enableAfterRender
      }, {
        event: initialEnd,
        handler: this.initializeSelection
      }, {
        event: rowSelectionComplete,
        handler: this.onActionComplete
      }, {
        event: cellSelectionComplete,
        handler: this.onActionComplete
      }, {
        event: inBoundModelChanged,
        handler: this.onPropertyChanged
      }, {
        event: cellFocused,
        handler: this.onCellFocused
      }, {
        event: beforeFragAppend,
        handler: this.clearSelAfterRefresh
      }, {
        event: columnPositionChanged,
        handler: this.columnPositionChanged
      }, {
        event: contentReady,
        handler: this.initialEnd
      }, {
        event: rowsRemoved,
        handler: this.rowsRemoved
      }, {
        event: headerRefreshed,
        handler: this.refreshHeader
      }, {
        event: destroyAutoFillElements,
        handler: this.destroyAutoFillElements
      }, {
        event: destroy,
        handler: this.destroy
      }];
      addRemoveEventListener(this.parent, this.evtHandlers, true, this);
      this.actionBeginFunction = this.actionBegin.bind(this);
      this.actionCompleteFunction = this.actionComplete.bind(this);
      this.parent.addEventListener(actionBegin, this.actionBeginFunction);
      this.parent.addEventListener(actionComplete, this.actionCompleteFunction);
      this.addEventListener_checkbox();
    };
    Selection2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      EventHandler.remove(document, "mouseup", this.mouseUpHandler);
      EventHandler.remove(this.parent.getContent(), "mousedown", this.mouseDownHandler);
      EventHandler.remove(this.parent.getHeaderContent(), "mousedown", this.mouseDownHandler);
      addRemoveEventListener(this.parent, this.evtHandlers, false);
      this.parent.removeEventListener(actionBegin, this.actionBeginFunction);
      this.parent.removeEventListener(actionComplete, this.actionCompleteFunction);
      this.removeEventListener_checkbox();
      this.parent.off(destroyAutoFillElements, this.destroyAutoFillElements);
    };
    Selection2.prototype.wireEvents = function() {
      this.isMacOS = navigator.userAgent.indexOf("Mac OS") !== -1;
      if (this.isMacOS) {
        EventHandler.add(this.parent.element, "keydown", this.keyDownHandler, this);
        EventHandler.add(this.parent.element, "keyup", this.keyUpHandler, this);
      } else {
        if (!this.parent.allowKeyboard) {
          EventHandler.add(this.parent.element, "keydown", this.keyDownHandler, this);
        }
      }
    };
    Selection2.prototype.unWireEvents = function() {
      if (this.isMacOS) {
        EventHandler.remove(this.parent.element, "keydown", this.keyDownHandler);
        EventHandler.remove(this.parent.element, "keyup", this.keyUpHandler);
      } else {
        if (!this.parent.allowKeyboard) {
          EventHandler.remove(this.parent.element, "keydown", this.keyDownHandler);
        }
      }
    };
    Selection2.prototype.columnPositionChanged = function() {
      if (!this.parent.isPersistSelection) {
        this.clearSelection();
      }
    };
    Selection2.prototype.refreshHeader = function() {
      var checkboxColumn = this.parent.getColumns().filter(function(col) {
        return col.type === "checkbox";
      });
      if (checkboxColumn.length && !this.parent.getDataModule().isRemote()) {
        this.gridCurrentRecord = this.getData();
      }
      this.setCheckAllState();
    };
    Selection2.prototype.rowsRemoved = function(e) {
      for (var i = 0; i < e.records.length; i++) {
        var pkValue = this.getPkValue(this.primaryKey, e.records[parseInt(i.toString(), 10)]);
        delete this.selectedRowState["" + pkValue];
        --this.totalRecordsCount;
      }
      this.setCheckAllState();
    };
    Selection2.prototype.beforeFragAppend = function(e) {
      if (e.requestType !== "virtualscroll" && !this.parent.isPersistSelection) {
        this.clearSelection();
      }
    };
    Selection2.prototype.getCheckAllBox = function() {
      return this.parent.getHeaderContent().querySelector(".e-checkselectall");
    };
    Selection2.prototype.enableAfterRender = function(e) {
      if (e.module === this.getModuleName() && e.enable) {
        this.render();
        this.initPerisistSelection();
      }
    };
    Selection2.prototype.render = function(e) {
      EventHandler.add(this.parent.getContent(), "mousedown", this.mouseDownHandler, this);
      EventHandler.add(this.parent.getHeaderContent(), "mousedown", this.mouseDownHandler, this);
    };
    Selection2.prototype.onPropertyChanged = function(e) {
      if (e.module !== this.getModuleName()) {
        return;
      }
      var gObj = this.parent;
      if (!isNullOrUndefined(e.properties.type)) {
        if (this.selectionSettings.type === "Single") {
          gObj.element.removeAttribute("aria-multiselectable");
          if (this.selectedRowCellIndexes.length > 1) {
            this.clearCellSelection();
            this.prevCIdxs = void 0;
          }
          if (this.selectedRowIndexes.length > 1) {
            this.clearRowSelection();
            this.prevRowIndex = void 0;
          }
          if (this.selectedColumnsIndexes.length > 1) {
            this.clearColumnSelection();
            this.prevColIndex = void 0;
          }
          this.enableSelectMultiTouch = false;
          this.hidePopUp();
        } else if (this.selectionSettings.type === "Multiple") {
          gObj.element.setAttribute("aria-multiselectable", "true");
        }
      }
      if (!isNullOrUndefined(e.properties.mode) || !isNullOrUndefined(e.properties.cellSelectionMode)) {
        this.clearSelection();
        this.prevRowIndex = void 0;
        this.prevCIdxs = void 0;
        this.prevColIndex = void 0;
      }
      this.isPersisted = true;
      this.checkBoxSelectionChanged();
      this.isPersisted = false;
      if (!this.parent.isCheckBoxSelection) {
        this.initPerisistSelection();
      }
      var checkboxColumn = this.parent.getColumns().filter(function(col) {
        return col.type === "checkbox";
      });
      if (checkboxColumn.length) {
        gObj.isCheckBoxSelection = !(this.selectionSettings.checkboxMode === "ResetOnRowClick");
      }
      this.drawBorders();
    };
    Selection2.prototype.hidePopUp = function() {
      if (this.parent.element.querySelector(".e-gridpopup").getElementsByClassName("e-rowselect").length) {
        this.parent.element.querySelector(".e-gridpopup").style.display = "none";
      }
    };
    Selection2.prototype.initialEnd = function() {
      if (!this.selectedRowIndexes.length) {
        this.parent.off(contentReady, this.initialEnd);
        this.selectRow(this.parent.selectedRowIndex);
      }
    };
    Selection2.prototype.checkBoxSelectionChanged = function() {
      var gobj = this.parent;
      gobj.off(contentReady, this.checkBoxSelectionChanged);
      var checkboxColumn = gobj.getColumns().filter(function(col) {
        return col.type === "checkbox";
      });
      if (checkboxColumn.length > 0) {
        gobj.isCheckBoxSelection = true;
        this.chkField = checkboxColumn[0].field;
        this.totalRecordsCount = this.parent.pageSettings.totalRecordsCount;
        if (isNullOrUndefined(this.totalRecordsCount)) {
          this.totalRecordsCount = this.getCurrentBatchRecordChanges().length;
        }
        if (this.isSingleSel()) {
          gobj.selectionSettings.type = "Multiple";
          gobj.dataBind();
        } else {
          this.initPerisistSelection();
        }
      }
      if (!gobj.isCheckBoxSelection && !this.isPersisted) {
        this.chkField = null;
        this.initPerisistSelection();
      }
    };
    Selection2.prototype.initPerisistSelection = function() {
      var gobj = this.parent;
      if (this.parent.selectionSettings.persistSelection && this.parent.getPrimaryKeyFieldNames().length > 0) {
        gobj.isPersistSelection = true;
        this.ensureCheckboxFieldSelection();
      } else if (this.parent.getPrimaryKeyFieldNames().length > 0) {
        gobj.isPersistSelection = false;
        this.ensureCheckboxFieldSelection();
      } else {
        gobj.isPersistSelection = false;
        this.selectedRowState = {};
      }
    };
    Selection2.prototype.ensureCheckboxFieldSelection = function() {
      var gobj = this.parent;
      this.primaryKey = this.parent.getPrimaryKeyFieldNames()[0];
      if (!gobj.enableVirtualization && this.chkField && (gobj.isPersistSelection && Object.keys(this.selectedRowState).length === 0 || !gobj.isPersistSelection)) {
        this.dataSuccess(!isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result || this.parent.getDataModule().isRemote() ? this.parent.getCurrentViewRecords() : this.parent.renderModule.data.dataManager.dataSource.json);
      }
    };
    Selection2.prototype.dataSuccess = function(res) {
      for (var i = 0; i < res.length; i++) {
        var pkValue = this.getPkValue(this.primaryKey, res[parseInt(i.toString(), 10)]);
        var checkedFieldData = res[parseInt(i.toString(), 10)][this.chkField];
        if (isNullOrUndefined(this.selectedRowState["" + pkValue]) && checkedFieldData && typeof checkedFieldData === "boolean") {
          this.selectedRowState["" + pkValue] = checkedFieldData;
          if (this.parent.isPersistSelection) {
            this.persistSelectedData.push(res[parseInt(i.toString(), 10)]);
          }
        }
      }
    };
    Selection2.prototype.setRowSelection = function(state) {
      if (!(this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result)) {
        if (state) {
          if (this.isPartialSelection && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling)) {
            var rowObj = this.parent.getRowsObject().filter(function(e) {
              return e.isSelectable;
            });
            for (var _i = 0, rowObj_1 = rowObj; _i < rowObj_1.length; _i++) {
              var row2 = rowObj_1[_i];
              this.selectedRowState[this.getPkValue(this.primaryKey, row2.data)] = true;
            }
          } else {
            var selectedData = this.isPartialSelection ? this.parent.partialSelectedRecords : this.getData();
            if (this.parent.groupSettings.columns.length) {
              for (var _a = 0, _b = this.isPartialSelection ? selectedData : selectedData.records; _a < _b.length; _a++) {
                var data = _b[_a];
                this.selectedRowState[this.getPkValue(this.primaryKey, data)] = true;
              }
            } else {
              for (var _c = 0, selectedData_1 = selectedData; _c < selectedData_1.length; _c++) {
                var data = selectedData_1[_c];
                this.selectedRowState[this.getPkValue(this.primaryKey, data)] = true;
              }
            }
          }
        } else {
          this.selectedRowState = {};
        }
      } else {
        if (state) {
          var selectedStateKeys = Object.keys(this.selectedRowState);
          var unSelectedRowStateKeys = Object.keys(this.unSelectedRowState);
          if (!this.isCheckboxReset) {
            var rowData = this.parent.groupSettings.columns.length && this.parent.isPersistSelection ? this.parent.currentViewData["records"] : this.parent.currentViewData;
            for (var _d = 0, rowData_1 = rowData; _d < rowData_1.length; _d++) {
              var data = rowData_1[_d];
              if (!isNullOrUndefined(data[this.primaryKey])) {
                var key = data[this.primaryKey].toString();
                if (selectedStateKeys.indexOf(key) === -1 && unSelectedRowStateKeys.indexOf(key) === -1) {
                  this.selectedRowState[data[this.primaryKey]] = true;
                }
              }
            }
          }
        } else {
          this.selectedRowState = {};
          this.unSelectedRowState = {};
          this.rmtHdrChkbxClicked = false;
        }
      }
    };
    Selection2.prototype.getData = function() {
      return this.parent.getDataModule().dataManager.executeLocal(this.parent.getDataModule().generateQuery(true));
    };
    Selection2.prototype.getAvailableSelectedData = function(data) {
      var filteredSearchedSelectedData = new DataManager(data).executeLocal(this.parent.getDataModule().generateQuery(true));
      if (this.parent.groupSettings.columns.length && filteredSearchedSelectedData && filteredSearchedSelectedData.records) {
        filteredSearchedSelectedData = filteredSearchedSelectedData.records.slice();
      }
      return filteredSearchedSelectedData;
    };
    Selection2.prototype.refreshPersistSelection = function() {
      var rows = this.parent.getRows();
      this.totalRecordsCount = this.parent.getCurrentViewRecords().length;
      if (this.parent.allowPaging) {
        this.totalRecordsCount = this.parent.pageSettings.totalRecordsCount;
      }
      if (!isNullOrUndefined(rows) && rows.length > 0 && (this.parent.isPersistSelection || this.chkField)) {
        var indexes = [];
        for (var j = 0; j < rows.length; j++) {
          var rowObj = this.getRowObj(rows[parseInt(j.toString(), 10)]);
          var pKey = rowObj ? rowObj.data ? this.getPkValue(this.primaryKey, rowObj.data) : null : null;
          if (pKey === null) {
            return;
          }
          if (this.isPartialSelection && !rowObj.isSelectable) {
            continue;
          }
          var checkState = void 0;
          var chkBox = rows[parseInt(j.toString(), 10)].querySelector(".e-checkselect");
          if (this.selectedRowState["" + pKey] || this.parent.checkAllRows === "Check" && this.selectedRowState["" + pKey] && this.totalRecordsCount === Object.keys(this.selectedRowState).length && this.chkAllCollec.indexOf(pKey) < 0 || this.parent.checkAllRows === "Uncheck" && this.chkAllCollec.indexOf(pKey) > 0 && !this.parent.selectedRowIndex || this.parent.checkAllRows === "Intermediate" && !isNullOrUndefined(this.chkField) && rowObj.data[this.chkField]) {
            indexes.push(parseInt(rows[parseInt(j.toString(), 10)].getAttribute(ariaRowIndex), 10) - 1);
            checkState = true;
          } else {
            checkState = false;
            if (this.checkedTarget !== chkBox && this.parent.isCheckBoxSelection && chkBox) {
              removeAddCboxClasses(chkBox.nextElementSibling, checkState);
            }
          }
          this.updatePersistCollection(rows[parseInt(j.toString(), 10)], checkState);
        }
        if (this.isSingleSel() && indexes.length > 0) {
          this.selectRow(indexes[0], true);
        } else {
          this.selectRows(indexes);
        }
      }
      if ((this.parent.isCheckBoxSelection || this.parent.selectionSettings.checkboxMode === "ResetOnRowClick") && this.getCurrentBatchRecordChanges().length > 0) {
        this.setCheckAllState();
      }
    };
    Selection2.prototype.actionBegin = function(e) {
      if (e.requestType === "save" && this.parent.isPersistSelection) {
        var editChkBox = this.parent.element.querySelector(".e-edit-checkselect");
        if (!isNullOrUndefined(editChkBox)) {
          var row2 = closest(editChkBox, "." + editedRow);
          if (row2) {
            if (this.parent.editSettings.mode === "Dialog") {
              row2 = this.parent.element.querySelector(".e-dlgeditrow");
            }
            var rowObj = this.getRowObj(row2);
            if (!rowObj) {
              return;
            }
            this.selectedRowState[this.getPkValue(this.primaryKey, rowObj.data)] = rowObj.isSelected = editChkBox.checked;
          } else {
            this.isCheckedOnAdd = editChkBox.checked;
          }
        }
      }
      if (this.parent.isPersistSelection && this.isPartialSelection) {
        if (e.requestType === "paging" && (this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result)) {
          this.selectedRowIndexes = [];
        }
      }
    };
    Selection2.prototype.actionComplete = function(e) {
      if (e.requestType === "save" && this.parent.isPersistSelection) {
        if (e.action === "add") {
          if (this.isCheckedOnAdd) {
            var rowObj = this.parent.getRowObjectFromUID(this.parent.getRows()[e.selectedRow].getAttribute("data-uid"));
            this.selectedRowState[this.getPkValue(this.primaryKey, rowObj.data)] = rowObj.isSelected = this.isCheckedOnAdd;
          }
          this.isHdrSelectAllClicked = false;
          this.setCheckAllState();
        }
        this.refreshPersistSelection();
      }
      if (e.requestType === "delete" && this.parent.isPersistSelection) {
        var records = e.data;
        var data = records.slice();
        for (var i = 0; i < data.length; i++) {
          var pkValue = this.getPkValue(this.primaryKey, data[parseInt(i.toString(), 10)]);
          if (!isNullOrUndefined(pkValue)) {
            this.updatePersistDelete(pkValue, this.isPartialSelection);
          }
        }
        this.isHdrSelectAllClicked = false;
        this.setCheckAllState();
        this.totalRecordsCount = this.parent.pageSettings.totalRecordsCount;
      }
      if (e.requestType === "paging") {
        if (this.parent.isPersistSelection && this.isPartialSelection && this.isHdrSelectAllClicked) {
          var rows = this.parent.getRowsObject();
          var indexes = [];
          for (var i = 0; i < rows.length; i++) {
            if (rows[parseInt(i.toString(), 10)].isSelectable) {
              indexes.push(rows[parseInt(i.toString(), 10)].index);
            }
          }
          if (indexes.length) {
            this.selectRows(indexes);
          }
        }
        this.prevRowIndex = void 0;
        this.prevCIdxs = void 0;
        this.prevECIdxs = void 0;
      }
    };
    Selection2.prototype.onDataBound = function() {
      var checkboxColumn = this.parent.getColumns().filter(function(col) {
        return col.type === "checkbox";
      });
      if (checkboxColumn.length && !this.parent.getDataModule().isRemote()) {
        this.gridCurrentRecord = this.getData();
      }
      if (!this.parent.enableVirtualization && this.parent.isPersistSelection) {
        if (this.selectedRecords.length) {
          this.isPrevRowSelection = true;
        }
      }
      if ((this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) && this.rmtHdrChkbxClicked || this.isPartialSelection && this.parent.isPersistSelection && this.isHdrSelectAllClicked) {
        if (this.parent.checkAllRows === "Intermediate") {
          this.setRowSelection(true);
        } else if (this.parent.checkAllRows === "Uncheck") {
          this.setRowSelection(false);
        }
      }
      if (this.parent.enableVirtualization) {
        this.setCheckAllState();
      }
      if (this.parent.isPersistSelection) {
        this.refreshPersistSelection();
      }
      this.initialRowSelection = this.isRowType() && this.parent.element.querySelectorAll(".e-selectionbackground") && this.parent.getSelectedRows().length ? true : false;
      if (this.parent.isCheckBoxSelection && !this.initialRowSelection) {
        var totalRecords = this.parent.getRowsObject();
        var indexes = [];
        for (var i = 0; i < totalRecords.length; i++) {
          if (totalRecords[parseInt(i.toString(), 10)].isSelected) {
            indexes.push(i);
          }
        }
        if (indexes.length) {
          this.selectRows(indexes);
        }
        this.initialRowSelection = true;
      }
    };
    Selection2.prototype.updatePersistSelectedData = function(checkState) {
      if (this.parent.isPersistSelection) {
        var rows = this.parent.getRows();
        for (var i = 0; i < rows.length; i++) {
          this.updatePersistCollection(rows[parseInt(i.toString(), 10)], checkState);
        }
        if (this.parent.checkAllRows === "Uncheck") {
          this.setRowSelection(false);
          this.persistSelectedData = this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result ? this.persistSelectedData : [];
        } else if (this.parent.checkAllRows === "Check") {
          this.setRowSelection(true);
          this.persistSelectedData = !(this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) && !this.isPartialSelection ? this.parent.groupSettings.columns.length ? this.getData().records.slice() : this.getData().slice() : this.persistSelectedData;
        }
      }
    };
    Selection2.prototype.checkSelectAllAction = function(checkState) {
      var cRenderer = this.getRenderer();
      var editForm = this.parent.element.querySelector(".e-gridform");
      this.checkedTarget = this.getCheckAllBox();
      if (checkState && this.getCurrentBatchRecordChanges().length) {
        this.parent.checkAllRows = "Check";
        this.updatePersistSelectedData(checkState);
        this.selectRowsByRange(cRenderer.getVirtualRowIndex(0), cRenderer.getVirtualRowIndex(this.getCurrentBatchRecordChanges().length - 1));
        if (this.checkVirtualCheckBox() && !this.parent.isPersistSelection) {
          this.virtualSelectedData = this.virtualCheckBoxData().slice();
          this.selectedRowIndexes = Object.keys(this.virtualSelectedData).map(function(key) {
            return parseInt(key, 10);
          });
        }
      } else {
        this.parent.checkAllRows = "Uncheck";
        this.updatePersistSelectedData(checkState);
        this.clearSelection();
      }
      this.chkAllCollec = [];
      if (!isNullOrUndefined(editForm)) {
        var editChkBox = editForm.querySelector(".e-edit-checkselect");
        if (!isNullOrUndefined(editChkBox)) {
          removeAddCboxClasses(editChkBox.nextElementSibling, checkState);
        }
      }
    };
    Selection2.prototype.checkSelectAll = function(checkBox) {
      var _this = this;
      var stateStr = this.getCheckAllStatus(checkBox);
      var state = stateStr === "Check";
      this.isHeaderCheckboxClicked = true;
      if ((this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) && (stateStr === "Uncheck" || this.isCheckboxReset || stateStr === "Intermediate" && this.parent.isPersistSelection)) {
        this.rmtHdrChkbxClicked = true;
      } else {
        this.rmtHdrChkbxClicked = false;
      }
      if (this.rmtHdrChkbxClicked && this.isCheckboxReset) {
        this.unSelectedRowState = {};
      }
      this.isCheckboxReset = false;
      if (stateStr === "Intermediate") {
        if (!this.chkField && !this.parent.isPersistSelection) {
          state = this.getCurrentBatchRecordChanges().some(function(data) {
            return _this.getPkValue(_this.primaryKey, data) in _this.selectedRowState;
          });
        }
        if (this.parent.isPersistSelection) {
          if (this.parent.allowPaging && this.isPartialSelection) {
            var rowObjects = this.parent.getRowsObject();
            for (var i = 0; i < rowObjects.length; i++) {
              if (rowObjects[i].isDataRow && rowObjects[i].isSelectable && !rowObjects[i].isSelected) {
                state = false;
                break;
              } else {
                state = true;
              }
            }
          } else if (this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) {
            for (var i = 0; i < this.getCurrentBatchRecordChanges().length; i++) {
              if (!isNullOrUndefined(this.getPkValue(this.primaryKey, this.getCurrentBatchRecordChanges()["" + i]))) {
                if (Object.keys(this.selectedRowState).includes(this.getPkValue(this.primaryKey, this.getCurrentBatchRecordChanges()["" + i]).toString())) {
                  state = true;
                } else {
                  state = false;
                  break;
                }
              }
            }
          }
        }
      }
      if (this.parent.isPersistSelection && this.parent.allowPaging) {
        this.totalRecordsCount = this.parent.pageSettings.totalRecordsCount;
      }
      this.checkSelectAllAction(!state);
      this.target = null;
      if (this.getCurrentBatchRecordChanges().length > 0) {
        this.setCheckAllState();
        this.updateSelectedRowIndexes();
      }
      this.triggerChkChangeEvent(checkBox, !state);
    };
    Selection2.prototype.getCheckAllStatus = function(ele) {
      var classes;
      if (!isNullOrUndefined(ele)) {
        classes = ele.nextElementSibling.classList;
      } else {
        if (!isNullOrUndefined(this.getCheckAllBox())) {
          classes = this.getCheckAllBox().nextElementSibling.classList;
        }
      }
      var status = "None";
      if (classes instanceof DOMTokenList) {
        if (classes.contains("e-check")) {
          status = "Check";
        } else if (classes.contains("e-uncheck")) {
          status = "Uncheck";
        } else if (classes.contains("e-stop")) {
          status = "Intermediate";
        }
      }
      return status;
    };
    Selection2.prototype.checkSelect = function(checkBox) {
      var target = closest(this.checkedTarget, "." + rowCell);
      var gObj = this.parent;
      this.isMultiCtrlRequest = true;
      var rIndex = 0;
      this.isHeaderCheckboxClicked = false;
      if (isGroupAdaptive(gObj)) {
        var uid2 = target.parentElement.getAttribute("data-uid");
        if (this.parent.enableVirtualization && this.parent.groupSettings.columns.length) {
          rIndex = parseInt(target.parentElement.getAttribute(ariaRowIndex), 10) - 1;
        } else {
          rIndex = gObj.getRows().map(function(m) {
            return m.getAttribute("data-uid");
          }).indexOf(uid2);
        }
      } else {
        rIndex = parseInt(target.parentElement.getAttribute(ariaRowIndex), 10) - 1;
      }
      if (this.parent.isPersistSelection && this.parent.element.getElementsByClassName(addedRow).length > 0 && this.parent.editSettings.newRowPosition === "Top" && !this.parent.editSettings.showAddNewRow) {
        ++rIndex;
      }
      this.rowCellSelectionHandler(rIndex, parseInt(target.getAttribute(ariaColIndex), 10) - 1);
      this.moveIntoUncheckCollection(closest(target, "." + row));
      this.setCheckAllState();
      this.isMultiCtrlRequest = false;
      this.triggerChkChangeEvent(checkBox, checkBox.nextElementSibling.classList.contains("e-check"));
    };
    Selection2.prototype.moveIntoUncheckCollection = function(row2) {
      if (this.parent.checkAllRows === "Check" || this.parent.checkAllRows === "Uncheck") {
        var rowObj = this.getRowObj(row2);
        var pKey = rowObj && rowObj.data ? this.getPkValue(this.primaryKey, rowObj.data) : null;
        if (!pKey) {
          return;
        }
        if (this.chkAllCollec.indexOf(pKey) < 0) {
          this.chkAllCollec.push(pKey);
        } else {
          this.chkAllCollec.splice(this.chkAllCollec.indexOf(pKey), 1);
        }
      }
    };
    Selection2.prototype.triggerChkChangeEvent = function(checkBox, checkState) {
      this.parent.trigger(checkBoxChange, {
        checked: checkState,
        selectedRowIndexes: this.parent.getSelectedRowIndexes(),
        target: checkBox
      });
      if (!this.parent.isEdit) {
        this.checkedTarget = null;
      }
    };
    Selection2.prototype.updateSelectedRowIndexes = function() {
      if (this.parent.isCheckBoxSelection && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) && this.isPartialSelection && !(this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) && this.parent.selectionSettings.persistSelection) {
        if (this.parent.checkAllRows !== "Uncheck") {
          var rowObj = this.parent.getRowsObject().filter(function(e) {
            return e.isSelectable;
          });
          for (var _i = 0, rowObj_2 = rowObj; _i < rowObj_2.length; _i++) {
            var row2 = rowObj_2[_i];
            this.selectedRowIndexes.push(row2.index);
          }
        }
      }
      if (this.parent.isCheckBoxSelection && this.parent.enableVirtualization && !this.isPartialSelection && (this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) && !this.parent.isPersistSelection && this.parent.checkAllRows === "Check") {
        var rowObj = this.parent.getRowsObject().filter(function(e) {
          return e.isSelectable;
        });
        if (rowObj.length !== this.selectedRowIndexes.length) {
          for (var _a = 0, rowObj_3 = rowObj; _a < rowObj_3.length; _a++) {
            var row2 = rowObj_3[_a];
            if (this.selectedRowIndexes.indexOf(row2.index) <= -1) {
              this.selectedRowIndexes.push(row2.index);
            }
          }
        }
      }
    };
    Selection2.prototype.updateSelectedRowIndex = function(index) {
      if (this.parent.isCheckBoxSelection && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) && !(this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) && !this.isPartialSelection) {
        if (this.parent.checkAllRows === "Check") {
          this.selectedRowIndexes = [];
          var dataLength = this.parent.groupSettings.columns.length ? this.getData()["records"].length : this.getData().length;
          for (var data = 0; data < dataLength; data++) {
            this.selectedRowIndexes.push(data);
          }
        } else if (this.parent.checkAllRows === "Uncheck") {
          this.selectedRowIndexes = [];
        } else {
          var row2 = this.parent.getRowByIndex(index);
          if (index && row2 && row2.getAttribute("aria-selected") === "false") {
            var selectedVal = this.selectedRowIndexes.indexOf(index);
            this.selectedRowIndexes.splice(selectedVal, 1);
          }
        }
      }
    };
    Selection2.prototype.isAllSelected = function(count2) {
      if (this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) {
        return this.getAvailableSelectedData(this.persistSelectedData).length === (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling ? this.parent.totalDataRecordsCount : this.totalRecordsCount);
      } else {
        if (this.isPartialSelection) {
          if (this.parent.allowPaging && !this.selectionSettings.persistSelection && this.parent.pageSettings.pageSize < this.parent.pageSettings.totalRecordsCount) {
            var data = this.parent.partialSelectedRecords;
            for (var i = 0; i < data.length; i++) {
              var pKey = this.getPkValue(this.primaryKey, data[parseInt(i.toString(), 10)]);
              if (!this.selectedRowState["" + pKey]) {
                return false;
              }
            }
            return true;
          } else {
            return this.isSelectAllRowCount(count2);
          }
        } else {
          var data = this.getData();
          if (this.parent.groupSettings.columns.length && data["records"]) {
            data = data["records"];
          }
          for (var i = 0; i < data.length; i++) {
            var pKey = this.getPkValue(this.primaryKey, data[parseInt(i.toString(), 10)]);
            if (!this.selectedRowState["" + pKey]) {
              return false;
            }
          }
          return true;
        }
      }
    };
    Selection2.prototype.someDataSelected = function() {
      if ((this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) && (this.parent.searchSettings.key.length || this.parent.filterSettings.columns.length)) {
        var filteredSearchedSelectedData = this.getAvailableSelectedData(this.persistSelectedData);
        for (var i = 0; i < filteredSearchedSelectedData.length; i++) {
          var pKey = this.getPkValue(this.primaryKey, filteredSearchedSelectedData[parseInt(i.toString(), 10)]);
          if (this.selectedRowState["" + pKey]) {
            return false;
          }
        }
      }
      var data = this.isPartialSelection ? this.getAvailableSelectedData(this.parent.partialSelectedRecords) : this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result ? [] : this.getData();
      for (var i = 0; i < data.length; i++) {
        var pKey = this.getPkValue(this.primaryKey, data[parseInt(i.toString(), 10)]);
        if (this.selectedRowState["" + pKey]) {
          return false;
        }
      }
      return true;
    };
    Selection2.prototype.setCheckAllState = function(index, isInteraction) {
      if (this.parent.isCheckBoxSelection || this.parent.selectionSettings.checkboxMode === "ResetOnRowClick") {
        var checkToSelectAll = false;
        var isFiltered = false;
        var checkedLen = Object.keys(this.selectedRowState).length;
        if (this.parent.element.classList.contains("e-treelistgrid") && this.parent.isPersistSelection && !this.parent.enableVirtualization && !this.parent.getDataModule().isRemote() && Array.isArray(this.parent.dataSource) && checkedLen === this.parent.dataSource.length && checkedLen > this.totalRecordsCount) {
          checkedLen = this.totalRecordsCount;
        }
        if (!this.parent.isPersistSelection) {
          checkedLen = this.selectedRowIndexes.length;
          this.totalRecordsCount = this.getCurrentBatchRecordChanges().length;
        }
        if (this.parent.isPersistSelection && !((this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) && this.isPartialSelection) && (this.parent.searchSettings.key.length || this.parent.filterSettings.columns.length)) {
          isFiltered = true;
          checkToSelectAll = this.isAllSelected(checkedLen);
        }
        var input = this.getCheckAllBox();
        if (input) {
          var spanEle = input.nextElementSibling;
          removeClass([spanEle], ["e-check", "e-stop", "e-uncheck"]);
          setChecked(input, false);
          input.indeterminate = false;
          var getRecord = this.parent.getDataModule().isRemote() ? [] : this.gridCurrentRecord;
          if (this.parent.groupSettings.columns.length && getRecord["records"]) {
            getRecord = getRecord["records"];
          }
          this.totalRecordsCount = this.checkVirtualCheckBox() ? getRecord.length : this.totalRecordsCount;
          if (checkToSelectAll && isFiltered && (this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result || getRecord.length) || !isFiltered && (checkedLen === this.totalRecordsCount && this.totalRecordsCount && !this.isPartialSelection && (!(this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) || this.parent.allowPaging) || !this.parent.enableVirtualization && !this.parent.enableInfiniteScrolling && this.isPartialSelection && (this.isSelectAllRowCount(checkedLen) || this.isHdrSelectAllClicked && !this.parent.isPersistSelection) || (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) && !this.parent.allowPaging && (!(this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) && getRecord.length && checkedLen === getRecord.length || (this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) && !this.isPartialSelection && (checkedLen === this.parent.totalDataRecordsCount || (this.isSelectAllRowCount(checkedLen) || checkedLen === this.totalRecordsCount) && !this.parent.isPersistSelection) || this.isPartialSelection && (this.isHdrSelectAllClicked || this.isSelectAllRowCount(checkedLen))) || checkedLen === this.totalRecordsCount && this.totalRecordsCount && !this.isPartialSelection && !this.parent.allowPaging && !this.parent.enableVirtualization && !this.parent.enableInfiniteScrolling)) {
            addClass([spanEle], ["e-check"]);
            setChecked(input, true);
            if (isInteraction) {
              this.getRenderer().setSelection(null, true, true);
            }
            this.parent.checkAllRows = "Check";
          } else if ((!this.selectedRowIndexes.length && (!this.parent.enableVirtualization || !this.persistSelectedData.length && !isFiltered || isFiltered && this.someDataSelected()) || checkedLen === 0 && this.getCurrentBatchRecordChanges().length === 0) && !this.parent.allowPaging || this.parent.allowPaging && (checkedLen === 0 || checkedLen && isFiltered && this.someDataSelected())) {
            addClass([spanEle], ["e-uncheck"]);
            if (isInteraction) {
              this.getRenderer().setSelection(null, false, true);
            }
            this.parent.checkAllRows = "Uncheck";
          } else {
            addClass([spanEle], ["e-stop"]);
            this.parent.checkAllRows = "Intermediate";
            input.indeterminate = true;
          }
          if (checkedLen === 0 && this.getCurrentBatchRecordChanges().length === 0) {
            addClass([spanEle.parentElement], ["e-checkbox-disabled"]);
          } else {
            removeClass([spanEle.parentElement], ["e-checkbox-disabled"]);
          }
          if (this.isPartialSelection) {
            var rowCount = this.parent.getRowsObject().filter(function(e) {
              return e.isSelectable;
            }).length;
            if (rowCount === 0 && spanEle.parentElement.querySelector(".e-frame").classList.contains("e-uncheck")) {
              addClass([spanEle.parentElement], ["e-checkbox-disabled"]);
            } else {
              removeClass([spanEle.parentElement], ["e-checkbox-disabled"]);
            }
          }
          if ((this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) && !this.parent.allowPaging && !(this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result)) {
            this.updateSelectedRowIndex(index);
          }
        }
      }
    };
    Selection2.prototype.checkVirtualCheckBox = function() {
      return this.parent.enableVirtualization && !(this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) && this.parent.isCheckBoxSelection && !this.isPartialSelection;
    };
    Selection2.prototype.virtualCheckBoxData = function() {
      var data = this.getData();
      if (this.parent.groupSettings.columns.length && data["records"]) {
        data = data["records"];
      }
      return data;
    };
    Selection2.prototype.isSelectAllRowCount = function(count2) {
      var rowCount = 0;
      var rowObj = this.parent.getRowsObject();
      if (this.parent.selectionSettings.persistSelection && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling)) {
        var dataLen = this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result ? this.parent.totalDataRecordsCount : this.getData() && this.getData().length;
        if (dataLen === rowObj.length) {
          rowCount = rowObj.filter(function(e) {
            return e.isSelectable;
          }).length;
          return rowCount && count2 === rowCount;
        } else {
          return false;
        }
      } else {
        if (this.parent.allowPaging && this.parent.selectionSettings.persistSelection) {
          var disableSelectedRecordsCount = this.getAvailableSelectedData(this.parent.disableSelectedRecords).length;
          var partialSelectedRecordsCount = this.getAvailableSelectedData(this.parent.partialSelectedRecords).length;
          var selectedRowCount = this.getAvailableSelectedData(this.persistSelectedData).length;
          rowCount = disableSelectedRecordsCount + partialSelectedRecordsCount;
          return rowCount === this.totalRecordsCount && selectedRowCount !== 0 && selectedRowCount === partialSelectedRecordsCount;
        } else {
          rowCount = rowObj.filter(function(e) {
            return e.isSelectable;
          }).length;
          return rowCount && count2 === rowCount;
        }
      }
    };
    Selection2.prototype.keyDownHandler = function(e) {
      if (Browser.info.name === "opera" && e.keyCode === 17 || Browser.info.name === "mozilla" && e.keyCode === 224 || (Browser.info.name === "safari" || Browser.info.name === "chrome") && (e.keyCode === 91 || e.keyCode === 93)) {
        this.cmdKeyPressed = true;
      }
      var targetHeadCell = parentsUntil(e.target, "e-headercell");
      var targetRowCell = parentsUntil(e.target, rowCell);
      var isCheckBox = targetHeadCell ? targetHeadCell.children[0].classList.contains("e-headerchkcelldiv") : targetRowCell ? targetRowCell.classList.contains("e-gridchkbox") : false;
      if (isCheckBox && !this.parent.allowKeyboard && e.keyCode === 32) {
        e.preventDefault();
      }
    };
    Selection2.prototype.keyUpHandler = function(e) {
      if (Browser.info.name === "opera" && e.keyCode === 17 || Browser.info.name === "mozilla" && e.keyCode === 224 || (Browser.info.name === "safari" || Browser.info.name === "chrome") && (e.keyCode === 91 || e.keyCode === 93)) {
        this.cmdKeyPressed = false;
      }
    };
    Selection2.prototype.clickHandler = function(e) {
      var target = e.target;
      this.actualTarget = target;
      if (!this.isAutoFillSel && !e.ctrlKey && !e.shiftKey) {
        this.startAFCell = this.endAFCell = null;
      }
      if (this.selectionSettings.persistSelection) {
        this.deSelectedData = iterateExtend(this.persistSelectedData);
      }
      if (parentsUntil(target, row) || parentsUntil(target, "e-headerchkcelldiv") || this.selectionSettings.allowColumnSelection && target.classList.contains("e-headercell")) {
        this.isInteracted = true;
      }
      this.cmdKeyPressed = e.metaKey;
      this.isMultiCtrlRequest = e.ctrlKey || this.enableSelectMultiTouch || this.isMacOS && this.cmdKeyPressed;
      if (!this.parent.allowKeyboard) {
        this.isMultiShiftRequest = false;
        this.isMultiCtrlRequest = false;
      } else {
        this.isMultiShiftRequest = e.shiftKey;
      }
      this.isMultiCtrlRequestCell = this.isMultiCtrlRequest;
      this.popUpClickHandler(e);
      var chkSelect = false;
      this.preventFocus = true;
      var checkBox;
      var checkWrap = parentsUntil(target, "e-checkbox-wrapper");
      this.checkSelectAllClicked = checkWrap && checkWrap.getElementsByClassName("e-checkselectall") || this.selectionSettings.persistSelection && parentsUntil(target, row) ? true : false;
      if (this.selectionSettings.persistSelection && this.isPartialSelection && parentsUntil(target, "e-headerchkcelldiv") && !target.querySelector(".e-checkbox-disabled")) {
        this.isHdrSelectAllClicked = true;
      }
      if (checkWrap && checkWrap.querySelectorAll(".e-checkselect,.e-checkselectall").length > 0) {
        checkBox = checkWrap.querySelector('input[type="checkbox"]');
        chkSelect = true;
      }
      this.drawBorders();
      this.updateAutoFillPosition();
      target = parentsUntil(target, rowCell);
      if (this.parent.isReact && target && !target.parentElement && target.classList.contains("e-rowcell")) {
        target = this.parent.getCellFromIndex(parseInt(target.getAttribute("index"), 10), parseInt(target.getAttribute("aria-colindex"), 10) - 1);
      }
      if (this.isRowDragSelected && isNullOrUndefined(target) && this.parent.allowRowDragAndDrop && this.selectionSettings.persistSelection && this.checkSelectAllClicked) {
        this.isRowDragSelected = false;
      }
      if ((target && target.parentElement.classList.contains(row) && !this.parent.selectionSettings.checkboxOnly || chkSelect) && !this.isRowDragSelected) {
        if (this.parent.isCheckBoxSelection) {
          this.isMultiCtrlRequest = true;
        }
        this.target = target;
        if (!isNullOrUndefined(checkBox)) {
          this.checkedTarget = checkBox;
          if (checkBox.classList.contains("e-checkselectall")) {
            this.checkSelectAll(checkBox);
          } else {
            this.checkSelect(checkBox);
          }
        } else {
          var rIndex = 0;
          rIndex = parseInt(target.parentElement.getAttribute(ariaRowIndex), 10) - 1;
          if (this.parent.isPersistSelection && !this.parent.editSettings.showAddNewRow && this.parent.element.getElementsByClassName(addedRow).length > 0) {
            ++rIndex;
          }
          if (!this.mUPTarget || !this.mUPTarget.isEqualNode(target)) {
            this.rowCellSelectionHandler(rIndex, parseInt(target.getAttribute(ariaColIndex), 10) - 1);
          }
          if (this.parent.isCheckBoxSelection) {
            this.moveIntoUncheckCollection(closest(target, "." + row));
            this.setCheckAllState();
          }
        }
        if (!this.parent.isCheckBoxSelection && Browser.isDevice && !this.isSingleSel()) {
          this.showPopup(e);
        }
      } else if (e.target.classList.contains("e-headercell") && !e.target.classList.contains("e-stackedheadercell")) {
        var uid2 = e.target.querySelector(".e-headercelldiv").getAttribute("e-mappinguid");
        this.headerSelectionHandler(this.parent.getColumnIndexByUid(uid2));
      }
      this.isMultiCtrlRequest = false;
      this.isMultiCtrlRequestCell = this.isMultiCtrlRequest;
      this.isMultiShiftRequest = false;
      if (isNullOrUndefined(closest(e.target, ".e-unboundcell"))) {
        this.preventFocus = false;
      }
    };
    Selection2.prototype.popUpClickHandler = function(e) {
      var target = e.target;
      if (closest(target, ".e-headercell") || e.target.classList.contains(rowCell) || closest(target, ".e-gridpopup")) {
        if (target.classList.contains("e-rowselect")) {
          if (!target.classList.contains("e-spanclicked")) {
            target.classList.add("e-spanclicked");
            this.enableSelectMultiTouch = true;
          } else {
            target.classList.remove("e-spanclicked");
            this.enableSelectMultiTouch = false;
            this.parent.element.querySelector(".e-gridpopup").style.display = "none";
          }
        }
      } else {
        this.parent.element.querySelector(".e-gridpopup").style.display = "none";
      }
    };
    Selection2.prototype.showPopup = function(e) {
      if (!this.selectionSettings.enableSimpleMultiRowSelection) {
        setCssInGridPopUp(this.parent.element.querySelector(".e-gridpopup"), e, "e-rowselect e-icons e-icon-rowselect" + (!this.isSingleSel() && (this.selectedRecords.length > 1 || this.selectedRowCellIndexes.length > 1) ? " e-spanclicked" : ""));
      }
    };
    Selection2.prototype.rowCellSelectionHandler = function(rowIndex, cellIndex) {
      if (!this.isMultiCtrlRequest && !this.isMultiShiftRequest || this.isSingleSel()) {
        if (!this.isDragged) {
          this.selectRow(rowIndex, this.selectionSettings.enableToggle);
        }
        this.selectCell({
          rowIndex,
          cellIndex
        }, this.selectionSettings.enableToggle);
        if (this.selectedRowCellIndexes.length) {
          this.updateAutoFillPosition();
        }
        this.drawBorders();
      } else if (this.isMultiShiftRequest) {
        var isChkBox = closest(this.target, "." + rowCell).classList.contains(gridChkBox);
        if (this.parent.isCheckBoxSelection || !this.parent.isCheckBoxSelection && !isChkBox || this.parent.getColumns().some(function(col) {
          return col.type === "checkbox";
        }) && this.selectionSettings.checkboxMode === "ResetOnRowClick" && isChkBox) {
          this.selectRowsByRange(isUndefined(this.prevRowIndex) ? rowIndex : this.prevRowIndex, rowIndex);
        } else {
          this.addRowsToSelection([rowIndex]);
        }
        this.selectCellsByRange(isUndefined(this.prevCIdxs) ? {
          rowIndex,
          cellIndex
        } : this.prevCIdxs, {
          rowIndex,
          cellIndex
        });
        this.updateAutoFillPosition();
        this.drawBorders();
      } else {
        this.addRowsToSelection([rowIndex]);
        if (this.selectionSettings.mode === "Both") {
          var checkboxColumn = this.parent.getColumns().find(function(col) {
            return col.type === "checkbox";
          });
          var checkboxColumnIndexCheck = checkboxColumn && checkboxColumn.index !== cellIndex;
          if (checkboxColumnIndexCheck && !this.isMultiCtrlRequestCell) {
            this.selectCell({
              rowIndex,
              cellIndex
            }, this.selectionSettings.enableToggle);
          } else if (!checkboxColumn || checkboxColumnIndexCheck) {
            this.addCellsToSelection([{
              rowIndex,
              cellIndex
            }]);
          }
        } else {
          this.addCellsToSelection([{
            rowIndex,
            cellIndex
          }]);
        }
        this.showHideBorders("none");
      }
      this.isDragged = false;
    };
    Selection2.prototype.onCellFocused = function(e) {
      if (this.parent.frozenRows && e.container.isHeader && e.byKey) {
        if (e.keyArgs.action === "upArrow") {
          if (this.parent.allowFiltering) {
            e.isJump = e.element.tagName === "INPUT" ? true : false;
          } else {
            e.isJump = e.element.tagName === "TH" ? true : false;
          }
        } else {
          if (e.keyArgs.action === "downArrow") {
            var rIdx = Number(e.element.parentElement.getAttribute(ariaRowIndex)) - 1;
            e.isJump = rIdx === 0 ? true : false;
          } else {
            if (e.keyArgs.action === "ctrlHome") {
              e.isJump = true;
            }
          }
        }
      }
      var clear = (e.container.isHeader && e.isJump || e.container.isContent && !e.container.isSelectable) && !(e.byKey && e.keyArgs.action === "space") && !(e.element.classList.contains("e-detailrowexpand") || e.element.classList.contains("e-detailrowcollapse"));
      var headerAction = e.container.isHeader && e.element.tagName !== "TD" && !closest(e.element, "." + rowCell) && !(e.byKey && e.keyArgs.action === "space");
      if (!e.byKey || clear) {
        if (clear && !(this.parent.isCheckBoxSelection || this.selectionSettings.persistSelection && (e.parent.classList.contains("e-recordplusexpand") || e.parent.classList.contains("e-recordpluscollapse") || e.parent.classList.contains("e-groupcaption")))) {
          this.clearSelection();
        }
        return;
      }
      var _a = e.container.isContent ? e.container.indexes : e.indexes, rowIndex = _a[0], cellIndex = _a[1];
      var prev = this.focus.getPrevIndexes();
      if (e.element.parentElement.querySelector(".e-rowcelldrag") || e.element.parentElement.querySelector(".e-dtdiagonalright") || e.element.parentElement.querySelector(".e-dtdiagonaldown")) {
        prev.cellIndex = prev.cellIndex - 1;
      }
      if (this.parent.frozenRows) {
        if (e.container.isHeader && (e.element.tagName === "TD" || closest(e.element, "." + rowCell))) {
          var hdrLength = this.parent.getHeaderTable().querySelector("thead").childElementCount;
          if (this.parent.editSettings.showAddNewRow && this.parent.editSettings.newRowPosition === "Top" && e.keyArgs.action === "upArrow") {
            hdrLength++;
          }
          rowIndex -= hdrLength;
          prev.rowIndex = !isNullOrUndefined(prev.rowIndex) ? prev.rowIndex - hdrLength : null;
        } else {
          rowIndex += this.parent.frozenRows;
          prev.rowIndex = prev.rowIndex === 0 || !isNullOrUndefined(prev.rowIndex) ? prev.rowIndex + this.parent.frozenRows : null;
        }
      }
      if (this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache) {
        rowIndex = parseInt(e.element.parentElement.getAttribute("aria-rowindex"), 10) - 1;
      }
      if ((headerAction || ["ctrlPlusA", "escape"].indexOf(e.keyArgs.action) === -1 && e.keyArgs.action !== "space" && rowIndex === prev.rowIndex && cellIndex === prev.cellIndex) && !this.selectionSettings.allowColumnSelection) {
        return;
      }
      if (this.parent.enableVirtualization) {
        rowIndex = parseInt(e.element.parentElement.getAttribute("aria-rowindex"), 10) - 1;
        if (!this.parent.enableColumnVirtualization && !this.parent.groupSettings.columns.length && this.parent.totalDataRecordsCount >= 1) {
          if (e.keyArgs.action === "ctrlHome") {
            rowIndex = 0;
            this.parent.isFocusFirstCell = true;
          } else if (e.keyArgs.action === "ctrlEnd") {
            rowIndex = this.parent.totalDataRecordsCount - 1;
            this.isFocusLastCell = true;
          }
        }
      }
      if (this.parent.editSettings.showAddNewRow && this.parent.editSettings.newRowPosition === "Top" && !this.parent.enableVirtualization && !this.parent.enableInfiniteScrolling && e.keyArgs.action === "downArrow") {
        rowIndex--;
      }
      this.preventFocus = true;
      var columnIndex = this.getKeyColIndex(e);
      if (this.needColumnSelection) {
        cellIndex = columnIndex;
      }
      if (this.parent.element.classList.contains("e-gridcell-read") && (e.keyArgs.action === "tab" || e.keyArgs.action === "shiftTab" || e.keyArgs.action === "rightArrow" || e.keyArgs.action === "leftArrow")) {
        var targetLabel = this.target.getAttribute("aria-label");
        targetLabel = this.target.innerHTML + " column header " + this.parent.getColumnByIndex(cellIndex).field;
        this.target.setAttribute("aria-label", targetLabel);
      }
      switch (e.keyArgs.action) {
        case "downArrow":
        case "upArrow":
        case "enter":
        case "shiftEnter":
          this.target = e.element;
          this.isKeyAction = true;
          this.applyDownUpKey(rowIndex, cellIndex);
          break;
        case "rightArrow":
        case "leftArrow":
          this.applyRightLeftKey(rowIndex, cellIndex);
          break;
        case "shiftDown":
        case "shiftUp":
          this.shiftDownKey(rowIndex, cellIndex);
          break;
        case "shiftLeft":
        case "shiftRight":
          this.applyShiftLeftRightKey(rowIndex, cellIndex);
          break;
        case "home":
        case "end":
          cellIndex = e.keyArgs.action === "end" ? this.getLastColIndex(rowIndex) : 0;
          this.applyHomeEndKey(rowIndex, cellIndex);
          break;
        case "ctrlHome":
        case "ctrlEnd":
          this.applyCtrlHomeEndKey(rowIndex, cellIndex);
          break;
        case "escape":
          this.clearSelection();
          if (this.parent.clipboardModule) {
            window.navigator["clipboard"].writeText("");
          }
          break;
        case "ctrlPlusA":
          this.ctrlPlusA();
          break;
        case "space":
          this.applySpaceSelection(e.element);
          break;
        case "tab":
          if (this.parent.editSettings.allowNextRowEdit) {
            this.selectRow(rowIndex);
          }
          break;
      }
      this.needColumnSelection = false;
      this.preventFocus = false;
      this.positionBorders();
      if (this.parent.isFrozenGrid()) {
        this.showHideBorders("none", true);
        this.refreshFrozenBorders();
      }
      this.updateAutoFillPosition();
    };
    Selection2.prototype.getKeyColIndex = function(e) {
      var uid2;
      var index = null;
      var stackedHeader = e.element.querySelector(".e-stackedheadercelldiv");
      if (this.selectionSettings.allowColumnSelection && parentsUntil(e.element, "e-columnheader")) {
        this.needColumnSelection = e.container.isHeader ? true : false;
        if (stackedHeader) {
          if (e.keyArgs.action === "rightArrow" || e.keyArgs.action === "leftArrow") {
            return index;
          }
          uid2 = stackedHeader.getAttribute("e-mappinguid");
          var innerColumn = this.getstackedColumns(this.parent.getColumnByUid(uid2).columns);
          var lastIndex = this.parent.getColumnIndexByUid(innerColumn[innerColumn.length - 1].uid);
          var firstIndex = this.parent.getColumnIndexByUid(innerColumn[0].uid);
          index = this.prevColIndex >= lastIndex ? firstIndex : lastIndex;
        } else {
          index = this.parent.getColumnIndexByUid(e.element.querySelector(".e-headercelldiv").getAttribute("e-mappinguid"));
        }
      }
      return index;
    };
    Selection2.prototype.ctrlPlusA = function() {
      if (this.isRowType() && !this.isSingleSel()) {
        var rowObj = this.parent.getRowsObject();
        this.selectRowsByRange(rowObj[0].index, rowObj[rowObj.length - 1].index);
      }
      if (this.isCellType() && !this.isSingleSel()) {
        this.selectCellsByRange({
          rowIndex: 0,
          cellIndex: 0
        }, {
          rowIndex: this.parent.getRows().length - 1,
          cellIndex: this.parent.getColumns().length - 1
        });
      }
    };
    Selection2.prototype.applySpaceSelection = function(target) {
      if (target.classList.contains("e-checkselectall")) {
        this.checkedTarget = target;
        this.checkSelectAll(this.checkedTarget);
      } else {
        if (target.classList.contains("e-checkselect")) {
          this.checkedTarget = target;
          this.checkSelect(this.checkedTarget);
        }
      }
    };
    Selection2.prototype.applyDownUpKey = function(rowIndex, cellIndex) {
      var gObj = this.parent;
      if (this.parent.isCheckBoxSelection && this.parent.checkAllRows === "Check" && !this.selectionSettings.persistSelection && !this.selectionSettings.checkboxOnly) {
        this.checkSelectAllAction(false);
        this.checkedTarget = null;
      }
      if (this.isRowType() && !this.selectionSettings.checkboxOnly) {
        if (this.parent.frozenRows) {
          this.selectRow(rowIndex, true);
          this.applyUpDown(gObj.selectedRowIndex);
        } else {
          this.selectRow(rowIndex, true);
          this.applyUpDown(gObj.selectedRowIndex);
        }
      }
      if (this.isCellType()) {
        this.selectCell({
          rowIndex,
          cellIndex
        }, true);
      }
      if (this.selectionSettings.allowColumnSelection && this.needColumnSelection) {
        this.selectColumn(cellIndex);
      }
    };
    Selection2.prototype.applyUpDown = function(rowIndex) {
      if (rowIndex < 0) {
        return;
      }
      if (!this.target) {
        this.target = this.parent.getRows()[0].children[this.parent.groupSettings.columns.length || 0];
      }
      var cIndex = parseInt(this.target.getAttribute(ariaColIndex), 10) - 1;
      var row2 = this.contentRenderer.getRowByIndex(rowIndex);
      if (row2) {
        this.target = row2.getElementsByClassName(rowCell)[parseInt(cIndex.toString(), 10)];
      }
      this.addAttribute(this.target);
      if (this.parent.element.classList.contains("e-gridcell-read")) {
        var targetLabel = this.target.getAttribute("aria-label");
        targetLabel = this.target.innerHTML;
        this.target.setAttribute("aria-label", targetLabel);
      }
    };
    Selection2.prototype.applyRightLeftKey = function(rowIndex, cellIndex) {
      if (this.selectionSettings.allowColumnSelection && this.needColumnSelection) {
        this.selectColumn(cellIndex);
      } else if (this.isCellType()) {
        this.selectCell({
          rowIndex,
          cellIndex
        }, true);
        this.addAttribute(this.target);
      }
    };
    Selection2.prototype.applyHomeEndKey = function(rowIndex, cellIndex) {
      if (this.isCellType()) {
        this.selectCell({
          rowIndex,
          cellIndex
        }, true);
      } else {
        this.addAttribute(this.parent.getCellFromIndex(rowIndex, cellIndex));
      }
    };
    Selection2.prototype.shiftDownKey = function(rowIndex, cellIndex) {
      this.isMultiShiftRequest = true;
      if (this.isRowType() && !this.isSingleSel()) {
        if (!isUndefined(this.prevRowIndex)) {
          this.selectRowsByRange(this.prevRowIndex, rowIndex);
          this.applyUpDown(rowIndex);
        } else if (this.isPartialSelection) {
          this.selectRow(rowIndex, true);
        } else {
          this.selectRow(0, true);
        }
      }
      if (this.isCellType() && !this.isSingleSel()) {
        this.selectCellsByRange(this.prevCIdxs || {
          rowIndex: 0,
          cellIndex: 0
        }, {
          rowIndex,
          cellIndex
        });
      }
      this.isMultiShiftRequest = false;
    };
    Selection2.prototype.applyShiftLeftRightKey = function(rowIndex, cellIndex) {
      this.isMultiShiftRequest = true;
      if (this.selectionSettings.allowColumnSelection && this.needColumnSelection) {
        this.selectColumnsByRange(this.prevColIndex, cellIndex);
      } else {
        this.selectCellsByRange(this.prevCIdxs, {
          rowIndex,
          cellIndex
        });
      }
      this.isMultiShiftRequest = false;
    };
    Selection2.prototype.getstackedColumns = function(column) {
      var innerColumnIndexes = [];
      for (var i = 0, len = column.length; i < len; i++) {
        if (column[parseInt(i.toString(), 10)].columns) {
          this.getstackedColumns(column[parseInt(i.toString(), 10)].columns);
        } else {
          innerColumnIndexes.push(column[parseInt(i.toString(), 10)]);
        }
      }
      return innerColumnIndexes;
    };
    Selection2.prototype.applyCtrlHomeEndKey = function(rowIndex, cellIndex) {
      if (this.isRowType()) {
        this.selectRow(rowIndex, true);
        if (!(this.parent.enableVirtualization || this.parent.enableColumnVirtualization)) {
          this.addAttribute(this.parent.getCellFromIndex(rowIndex, cellIndex));
        }
      }
      if (this.isCellType()) {
        this.selectCell({
          rowIndex,
          cellIndex
        }, true);
      }
    };
    Selection2.prototype.addRemoveClassesForRow = function(row2, isAdd, clearAll) {
      var args = [];
      for (var _i = 3; _i < arguments.length; _i++) {
        args[_i - 3] = arguments[_i];
      }
      if (row2) {
        var cells = [].slice.call(row2.getElementsByClassName(rowCell));
        var detailIndentCell = row2.querySelector(".e-detailrowcollapse") || row2.querySelector(".e-detailrowexpand");
        var dragdropIndentCell = row2.querySelector(".e-rowdragdrop");
        if (detailIndentCell) {
          cells.push(detailIndentCell);
        }
        if (dragdropIndentCell) {
          cells.push(dragdropIndentCell);
        }
        addRemoveActiveClasses.apply(void 0, [cells, isAdd].concat(args));
      }
      this.getRenderer().setSelection(row2 ? row2.getAttribute("data-uid") : null, isAdd, clearAll);
    };
    Selection2.prototype.isRowType = function() {
      return this.selectionSettings.mode === "Row" || this.selectionSettings.mode === "Both";
    };
    Selection2.prototype.isCellType = function() {
      return this.selectionSettings.mode === "Cell" || this.selectionSettings.mode === "Both";
    };
    Selection2.prototype.isSingleSel = function() {
      return this.selectionSettings.type === "Single";
    };
    Selection2.prototype.getRenderer = function() {
      if (isNullOrUndefined(this.contentRenderer)) {
        this.contentRenderer = this.factory.getRenderer(RenderType.Content);
      }
      return this.contentRenderer;
    };
    Selection2.prototype.getSelectedRecords = function() {
      var selectedData = [];
      if (!this.selectionSettings.persistSelection && this.selectedRecords.length) {
        selectedData = this.parent.getRowsObject().filter(function(row2) {
          return row2.isSelected;
        }).map(function(m) {
          return m.data;
        });
      } else {
        selectedData = this.persistSelectedData;
      }
      if (this.checkVirtualCheckBox() && !this.parent.isPersistSelection) {
        selectedData = this.virtualSelectedData;
      }
      return selectedData;
    };
    Selection2.prototype.selectColumn = function(index) {
      var gObj = this.parent;
      if (isNullOrUndefined(gObj.getColumns()[parseInt(index.toString(), 10)])) {
        return;
      }
      var column = gObj.getColumnByIndex(index);
      var selectedCol = gObj.getColumnHeaderByUid(column.uid);
      var isColSelected = selectedCol.classList.contains("e-columnselection");
      if (!gObj.selectionSettings.allowColumnSelection) {
        return;
      }
      var isMultiColumns = this.selectedColumnsIndexes.length > 1 && this.selectedColumnsIndexes.indexOf(index) > -1;
      this.clearColDependency();
      if (!this.selectionSettings.enableToggle || isMultiColumns || !isColSelected) {
        var args = {
          columnIndex: index,
          headerCell: selectedCol,
          column,
          cancel: false,
          target: this.actualTarget,
          isInteracted: this.isInteracted,
          previousColumnIndex: this.prevColIndex,
          isCtrlPressed: this.isMultiCtrlRequest,
          isShiftPressed: this.isMultiShiftRequest
        };
        this.onActionBegin(args, columnSelecting);
        if (args.cancel) {
          this.disableInteracted();
          return;
        }
        if (isMultiColumns || !(isColSelected && gObj.selectionSettings.enableToggle && index === this.prevColIndex)) {
          this.updateColSelection(selectedCol, index);
        }
        var selectedArgs = {
          columnIndex: index,
          headerCell: selectedCol,
          column,
          target: this.actualTarget,
          isInteracted: this.isInteracted,
          previousColumnIndex: this.prevColIndex
        };
        this.onActionComplete(selectedArgs, columnSelected);
      }
      this.updateColProps(index);
    };
    Selection2.prototype.selectColumnsByRange = function(startIndex, endIndex) {
      var gObj = this.parent;
      if (isNullOrUndefined(gObj.getColumns()[parseInt(startIndex.toString(), 10)])) {
        return;
      }
      var indexes = [];
      if (gObj.selectionSettings.type === "Single" || isNullOrUndefined(endIndex)) {
        indexes[0] = startIndex;
      } else {
        var min = startIndex < endIndex;
        for (var i = startIndex; min ? i <= endIndex : i >= endIndex; min ? i++ : i--) {
          indexes.push(i);
        }
      }
      this.selectColumns(indexes);
    };
    Selection2.prototype.selectColumns = function(columnIndexes) {
      var gObj = this.parent;
      var selectedCol = this.getselectedCols();
      if (gObj.selectionSettings.type === "Single") {
        columnIndexes = [columnIndexes[0]];
      }
      if (!gObj.selectionSettings.allowColumnSelection) {
        return;
      }
      this.clearColDependency();
      var selectingArgs = {
        columnIndex: columnIndexes[0],
        headerCell: selectedCol,
        columnIndexes,
        column: gObj.getColumnByIndex(columnIndexes[0]),
        cancel: false,
        target: this.actualTarget,
        isInteracted: this.isInteracted,
        previousColumnIndex: this.prevColIndex,
        isCtrlPressed: this.isMultiCtrlRequest,
        isShiftPressed: this.isMultiShiftRequest
      };
      this.onActionBegin(selectingArgs, columnSelecting);
      if (selectingArgs.cancel) {
        this.disableInteracted();
        return;
      }
      for (var i = 0, len = columnIndexes.length; i < len; i++) {
        this.updateColSelection(gObj.getColumnHeaderByUid(gObj.getColumnByIndex(columnIndexes[parseInt(i.toString(), 10)]).uid), columnIndexes[parseInt(i.toString(), 10)]);
      }
      selectedCol = this.getselectedCols();
      var selectedArgs = {
        columnIndex: columnIndexes[0],
        headerCell: selectedCol,
        columnIndexes,
        column: gObj.getColumnByIndex(columnIndexes[0]),
        target: this.actualTarget,
        isInteracted: this.isInteracted,
        previousColumnIndex: this.prevColIndex
      };
      this.onActionComplete(selectedArgs, columnSelected);
      this.updateColProps(columnIndexes[0]);
    };
    Selection2.prototype.selectColumnWithExisting = function(startIndex) {
      var gObj = this.parent;
      if (isNullOrUndefined(gObj.getColumns()[parseInt(startIndex.toString(), 10)])) {
        return;
      }
      var newCol = gObj.getColumnHeaderByUid(gObj.getColumnByIndex(startIndex).uid);
      var selectedCol = this.getselectedCols();
      if (gObj.selectionSettings.type === "Single") {
        this.clearColDependency();
      }
      if (!gObj.selectionSettings.allowColumnSelection) {
        return;
      }
      if (this.selectedColumnsIndexes.indexOf(startIndex) > -1) {
        this.clearColumnSelection(startIndex);
      } else {
        var selectingArgs = {
          columnIndex: startIndex,
          headerCell: selectedCol,
          columnIndexes: this.selectedColumnsIndexes,
          column: gObj.getColumnByIndex(startIndex),
          cancel: false,
          target: this.actualTarget,
          isInteracted: this.isInteracted,
          previousColumnIndex: this.prevColIndex,
          isCtrlPressed: this.isMultiCtrlRequest,
          isShiftPressed: this.isMultiShiftRequest
        };
        this.onActionBegin(selectingArgs, columnSelecting);
        if (selectingArgs.cancel) {
          this.disableInteracted();
          return;
        }
        this.updateColSelection(newCol, startIndex);
        selectedCol = this.getselectedCols();
        var selectedArgs = {
          columnIndex: startIndex,
          headerCell: selectedCol,
          column: gObj.getColumnByIndex(startIndex),
          columnIndexes: this.selectedColumnsIndexes,
          target: this.actualTarget,
          isInteracted: this.isInteracted,
          previousColumnIndex: this.prevColIndex
        };
        this.onActionComplete(selectedArgs, columnSelected);
      }
      this.updateColProps(startIndex);
    };
    Selection2.prototype.clearColumnSelection = function(clearIndex) {
      if (this.isColumnSelected) {
        var gObj = this.parent;
        if (!isNullOrUndefined(clearIndex) && this.selectedColumnsIndexes.indexOf(clearIndex) === -1) {
          return;
        }
        var index = !isNullOrUndefined(clearIndex) ? clearIndex : this.selectedColumnsIndexes[this.selectedColumnsIndexes.length - 1];
        var column = gObj.getColumnByIndex(index);
        var selectedCol = gObj.getColumnHeaderByUid(column.uid);
        var deselectedArgs = {
          columnIndex: index,
          headerCell: selectedCol,
          columnIndexes: this.selectedColumnsIndexes,
          column,
          cancel: false,
          target: this.actualTarget,
          isInteracted: this.isInteracted
        };
        var isCanceled = this.columnDeselect(deselectedArgs, columnDeselecting);
        if (isCanceled) {
          this.disableInteracted();
          return;
        }
        var selectedHeader = !isNullOrUndefined(clearIndex) ? [selectedCol] : [].slice.call(gObj.getHeaderContent().getElementsByClassName("e-columnselection"));
        var selectedCells = this.getSelectedColumnCells(clearIndex);
        for (var i = 0, len = selectedHeader.length; i < len; i++) {
          addRemoveActiveClasses([selectedHeader[parseInt(i.toString(), 10)]], false, "e-columnselection");
        }
        for (var i = 0, len = selectedCells.length; i < len; i++) {
          addRemoveActiveClasses([selectedCells[parseInt(i.toString(), 10)]], false, "e-columnselection");
        }
        if (!isNullOrUndefined(clearIndex)) {
          this.selectedColumnsIndexes.splice(this.selectedColumnsIndexes.indexOf(clearIndex), 1);
          this.parent.getColumns()[parseInt(clearIndex.toString(), 10)].isSelected = false;
        } else {
          this.columnDeselect(deselectedArgs, columnDeselected);
          this.selectedColumnsIndexes = [];
          this.isColumnSelected = false;
          this.parent.getColumns().filter(function(col) {
            return col.isSelected = false;
          });
        }
      }
    };
    Selection2.prototype.getselectedCols = function() {
      var gObj = this.parent;
      var selectedCol;
      if (this.selectedColumnsIndexes.length > 1) {
        selectedCol = [];
        for (var i = 0; i < this.selectedColumnsIndexes.length; i++) {
          selectedCol.push(gObj.getColumnHeaderByUid(gObj.getColumnByIndex(this.selectedColumnsIndexes[parseInt(i.toString(), 10)]).uid));
        }
      } else {
        selectedCol = gObj.getColumnHeaderByUid(gObj.getColumnByIndex(this.selectedColumnsIndexes[0]).uid);
      }
      return selectedCol;
    };
    Selection2.prototype.getSelectedColumnCells = function(clearIndex) {
      var gObj = this.parent;
      var isRowTemplate = !isNullOrUndefined(this.parent.rowTemplate);
      var rows = isRowTemplate ? gObj.getRows() : gObj.getDataRows();
      var seletedcells = [];
      var selectionString = !isNullOrUndefined(clearIndex) ? '[aria-colindex="' + (clearIndex + 1) + '"]' : ".e-columnselection";
      for (var i = 0, len = rows.length; i < len; i++) {
        seletedcells = seletedcells.concat([].slice.call(rows[parseInt(i.toString(), 10)].querySelectorAll(selectionString)));
      }
      return seletedcells;
    };
    Selection2.prototype.columnDeselect = function(args, event2) {
      if (event2 === "columnDeselected") {
        delete args.cancel;
      }
      this.onActionComplete(args, event2);
      return args.cancel;
    };
    Selection2.prototype.updateColProps = function(startIndex) {
      this.prevColIndex = startIndex;
      this.isColumnSelected = this.selectedColumnsIndexes.length && true;
    };
    Selection2.prototype.clearColDependency = function() {
      this.clearColumnSelection();
      this.selectedColumnsIndexes = [];
    };
    Selection2.prototype.updateColSelection = function(selectedCol, startIndex) {
      if (isNullOrUndefined(this.parent.getColumns()[parseInt(startIndex.toString(), 10)])) {
        return;
      }
      var isRowTemplate = !isNullOrUndefined(this.parent.rowTemplate);
      var rows = isRowTemplate ? this.parent.getRows() : this.parent.getDataRows();
      this.selectedColumnsIndexes.push(startIndex);
      this.parent.getColumns()[parseInt(startIndex.toString(), 10)].isSelected = true;
      startIndex = startIndex + this.parent.getIndentCount();
      addRemoveActiveClasses([selectedCol], true, "e-columnselection");
      for (var j = 0, len = rows.length; j < len; j++) {
        if (rows[parseInt(j.toString(), 10)].classList.contains(row)) {
          if ((rows[parseInt(j.toString(), 10)].classList.contains(editedRow) || rows[parseInt(j.toString(), 10)].classList.contains(addedRow)) && this.parent.editSettings.mode === "Normal" && !isNullOrUndefined(rows[parseInt(j.toString(), 10)].querySelector("tr").childNodes[parseInt(startIndex.toString(), 10)])) {
            addRemoveActiveClasses([rows[parseInt(j.toString(), 10)].querySelector("tr").childNodes[parseInt(startIndex.toString(), 10)]], true, "e-columnselection");
          } else {
            if (this.parent.isSpan && this.parent.isFrozenGrid()) {
              var cells = rows[parseInt(j.toString(), 10)].querySelectorAll(".e-rowcell");
              for (var i = 0; i < cells.length; i++) {
                if (cells[parseInt(i.toString(), 10)].getAttribute("aria-colindex") === selectedCol.getAttribute("aria-colindex")) {
                  addRemoveActiveClasses([cells[parseInt(i.toString(), 10)]], true, "e-columnselection");
                }
              }
            } else if (!isNullOrUndefined(rows[parseInt(j.toString(), 10)].childNodes[parseInt(startIndex.toString(), 10)])) {
              addRemoveActiveClasses([rows[parseInt(j.toString(), 10)].childNodes[parseInt(startIndex.toString(), 10)]], true, "e-columnselection");
            }
          }
        }
      }
    };
    Selection2.prototype.headerSelectionHandler = function(colIndex) {
      if (!this.isMultiCtrlRequest && !this.isMultiShiftRequest || this.isSingleSel()) {
        this.selectColumn(colIndex);
      } else if (this.isMultiShiftRequest) {
        this.selectColumnsByRange(isUndefined(this.prevColIndex) ? colIndex : this.prevColIndex, colIndex);
      } else {
        this.selectColumnWithExisting(colIndex);
      }
    };
    Selection2.prototype.addEventListener_checkbox = function() {
      var _this = this;
      this.parent.on(dataReady, this.dataReady, this);
      this.onDataBoundFunction = this.onDataBound.bind(this);
      this.parent.addEventListener(dataBound, this.onDataBoundFunction);
      this.parent.on(refreshInfinitePersistSelection, this.onDataBoundFunction);
      this.parent.on(contentReady, this.checkBoxSelectionChanged, this);
      this.parent.on(beforeRefreshOnDataChange, this.initPerisistSelection, this);
      this.parent.on(onEmpty, this.setCheckAllForEmptyGrid, this);
      this.actionCompleteFunc = this.actionCompleteHandler.bind(this);
      this.parent.addEventListener(actionComplete, this.actionCompleteFunc);
      this.parent.on(click, this.clickHandler, this);
      this.resizeEndFn = function() {
        _this.updateAutoFillPosition();
        _this.drawBorders();
      };
      this.resizeEndFn.bind(this);
      this.parent.addEventListener(resizeStop, this.resizeEndFn);
    };
    Selection2.prototype.removeEventListener_checkbox = function() {
      this.parent.off(dataReady, this.dataReady);
      this.parent.removeEventListener(dataBound, this.onDataBoundFunction);
      this.parent.removeEventListener(actionComplete, this.actionCompleteFunc);
      this.parent.off(refreshInfinitePersistSelection, this.onDataBoundFunction);
      this.parent.off(onEmpty, this.setCheckAllForEmptyGrid);
      this.parent.off(click, this.clickHandler);
      this.parent.removeEventListener(resizeStop, this.resizeEndFn);
      this.parent.off(beforeRefreshOnDataChange, this.initPerisistSelection);
    };
    Selection2.prototype.setCheckAllForEmptyGrid = function() {
      var checkAllBox = this.getCheckAllBox();
      if (checkAllBox) {
        this.parent.isCheckBoxSelection = true;
        var spanEle = checkAllBox.nextElementSibling;
        removeClass([spanEle], ["e-check", "e-stop", "e-uncheck"]);
        addClass([spanEle.parentElement], ["e-checkbox-disabled"]);
      }
    };
    Selection2.prototype.dataReady = function(e) {
      this.isHeaderCheckboxClicked = false;
      var isInfinitecroll = this.parent.enableInfiniteScrolling && e.requestType === "infiniteScroll";
      if (e.requestType !== "virtualscroll" && !this.parent.isPersistSelection && !isInfinitecroll) {
        this.disableUI = !this.parent.enableImmutableMode && !(e.requestType === "save" && e["action"] === "add");
        this.clearSelection();
        this.setCheckAllState();
        this.disableUI = false;
      }
    };
    Selection2.prototype.actionCompleteHandler = function(e) {
      if (e.requestType === "save" && this.parent.isPersistSelection) {
        this.refreshPersistSelection();
      }
    };
    Selection2.prototype.selectRowIndex = function(index) {
      this.parent.isSelectedRowIndexUpdating = true;
      if (isNullOrUndefined(this.parent.selectedRowIndex) || this.parent.selectedRowIndex === -1 || !this.parent.enablePersistence) {
        this.parent.selectedRowIndex = index;
      } else {
        this.parent.selectedRowIndex = -1;
      }
    };
    Selection2.prototype.disableInteracted = function() {
      this.isInteracted = false;
    };
    Selection2.prototype.activeTarget = function() {
      this.actualTarget = this.isInteracted ? this.actualTarget : null;
    };
    return Selection2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/search.js
var Search = (
  /** @class */
  function() {
    function Search3(parent) {
      this.headerFocus = false;
      this.parent = parent;
      this.addEventListener();
    }
    Search3.prototype.hasNonNumericCharacters = function(searchString) {
      var decimalFound = false;
      for (var _i = 0, searchString_1 = searchString; _i < searchString_1.length; _i++) {
        var char = searchString_1[_i];
        if ((char < "0" || char > "9") && char !== ".") {
          return true;
        }
        if (char === ".") {
          if (decimalFound) {
            return true;
          }
          decimalFound = true;
        }
      }
      return false;
    };
    Search3.prototype.search = function(searchString) {
      var gObj = this.parent;
      searchString = isNullOrUndefined(searchString) ? "" : searchString;
      if (isActionPrevent(gObj)) {
        gObj.notify(preventBatch, {
          instance: this,
          handler: this.search,
          arg1: searchString
        });
        return;
      }
      if (searchString !== gObj.searchSettings.key) {
        this.headerFocus = false;
        if (searchString !== "" && !this.hasNonNumericCharacters(searchString)) {
          var parts = searchString.split(".");
          if (searchString === "." || searchString.indexOf(".") === -1 || parts[0].startsWith("0") && parts[0].length > 1) {
            gObj.searchSettings.key = searchString.toString();
          } else {
            gObj.searchSettings.key = parseFloat(searchString).toString();
          }
        } else {
          gObj.searchSettings.key = searchString.toString();
        }
        gObj.dataBind();
      } else if (this.refreshSearch) {
        gObj.refresh();
      } else {
        this.headerFocus = false;
      }
    };
    Search3.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(inBoundModelChanged, this.onPropertyChanged, this);
      this.parent.on(searchComplete, this.onSearchComplete, this);
      this.parent.on(destroy, this.destroy, this);
      this.actionCompleteFunc = this.onActionComplete.bind(this);
      this.parent.addEventListener(actionComplete, this.actionCompleteFunc);
      this.parent.on(cancelBegin, this.cancelBeginEvent, this);
    };
    Search3.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(inBoundModelChanged, this.onPropertyChanged);
      this.parent.off(searchComplete, this.onSearchComplete);
      this.parent.off(destroy, this.destroy);
      this.parent.removeEventListener(actionComplete, this.actionCompleteFunc);
      this.parent.off(cancelBegin, this.cancelBeginEvent);
    };
    Search3.prototype.destroy = function() {
      this.removeEventListener();
    };
    Search3.prototype.onPropertyChanged = function(e) {
      if (e.module !== this.getModuleName()) {
        return;
      }
      if (!isNullOrUndefined(e.properties.key)) {
        this.parent.notify(modelChanged, {
          requestType: "searching",
          type: actionBegin,
          searchString: this.parent.searchSettings.key
        });
      } else {
        this.parent.notify(modelChanged, {
          requestType: "searching",
          type: actionBegin
        });
      }
    };
    Search3.prototype.onSearchComplete = function(e) {
      this.parent.trigger(actionComplete, extend(e, {
        searchString: this.parent.searchSettings.key,
        requestType: "searching",
        type: actionComplete
      }));
    };
    Search3.prototype.onActionComplete = function(e) {
      if (this.refreshSearch && e.requestType === "refresh" && this.headerFocus) {
        this.headerFocus = false;
        this.parent.focusModule.focus();
        addClass([this.parent.focusModule.currentInfo.element], ["e-focused"]);
      }
      this.refreshSearch = e.requestType !== "searching";
    };
    Search3.prototype.cancelBeginEvent = function(e) {
      if (e.requestType === "searching") {
        this.parent.setProperties({
          searchSettings: {
            key: ""
          }
        }, true);
      }
    };
    Search3.prototype.getModuleName = function() {
      return "search";
    };
    return Search3;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/show-hide.js
var ShowHide = (
  /** @class */
  function() {
    function ShowHide2(parent) {
      this.colName = [];
      this.isShowHide = false;
      this.parent = parent;
      this.addEventListener();
      this.widthService = new ColumnWidthService(parent);
    }
    ShowHide2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.evtHandlers = [{
        event: batchCancel,
        handler: this.batchChanges
      }, {
        event: batchCnfrmDlgCancel,
        handler: this.resetColumnState
      }];
      addRemoveEventListener(this.parent, this.evtHandlers, true, this);
    };
    ShowHide2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      addRemoveEventListener(this.parent, this.evtHandlers, false);
    };
    ShowHide2.prototype.batchChanges = function() {
      if (this.isShowHide) {
        this.isShowHide = false;
        this.setVisible(this.colName, this.changedCol);
        this.changedCol = this.colName = [];
      }
    };
    ShowHide2.prototype.show = function(columnName, showBy) {
      var keys = this.getToggleFields(columnName);
      var columns = this.getColumns(keys, showBy);
      this.parent.notify(tooltipDestroy, {
        module: "edit"
      });
      for (var i = 0; i < columns.length; i++) {
        columns[parseInt(i.toString(), 10)].visible = true;
      }
      this.setVisible(columns);
    };
    ShowHide2.prototype.hide = function(columnName, hideBy) {
      var keys = this.getToggleFields(columnName);
      var columns = this.getColumns(keys, hideBy);
      this.parent.notify(tooltipDestroy, {
        module: "edit"
      });
      for (var i = 0; i < columns.length; i++) {
        columns[parseInt(i.toString(), 10)].visible = false;
      }
      this.setVisible(columns);
    };
    ShowHide2.prototype.getToggleFields = function(key) {
      var finalized = [];
      if (typeof key === "string") {
        finalized = [key];
      } else {
        finalized = key;
      }
      return finalized;
    };
    ShowHide2.prototype.getColumns = function(keys, getKeyBy) {
      var _this = this;
      var columns = iterateArrayOrObject(keys, function(key) {
        return iterateArrayOrObject(_this.parent.columnModel, function(item) {
          if (item["" + getKeyBy] === key) {
            return item;
          }
          return void 0;
        })[0];
      });
      return columns;
    };
    ShowHide2.prototype.batchActionPrevent = function(columns, changedStateColumns) {
      if (changedStateColumns === void 0) {
        changedStateColumns = [];
      }
      if (isActionPrevent(this.parent)) {
        this.colName = columns;
        this.changedCol = changedStateColumns;
        this.parent.closeEdit();
        return false;
      }
      return true;
    };
    ShowHide2.prototype.resetColumnState = function() {
      if (this.isShowHide) {
        for (var i = 0; i < this.colName.length; i++) {
          this.colName[parseInt(i.toString(), 10)].visible = !this.colName[parseInt(i.toString(), 10)].visible;
        }
      }
    };
    ShowHide2.prototype.setVisible = function(columns, changedStateColumns) {
      var _this = this;
      if (changedStateColumns === void 0) {
        changedStateColumns = [];
      }
      this.isShowHide = true;
      if (!this.batchActionPrevent(columns, changedStateColumns)) {
        return;
      }
      changedStateColumns = changedStateColumns.length > 0 ? changedStateColumns : columns;
      var args = {
        requestType: "columnstate",
        cancel: false,
        columns: changedStateColumns
      };
      var cancel = "cancel";
      if (this.parent.enableInfiniteScrolling && this.parent.allowGrouping && this.parent.groupModule.groupSettings.columns.length > 0) {
        this.parent.contentModule.visibleRows = [];
      }
      this.parent.trigger(actionBegin, args, function(showHideArgs) {
        var currentViewCols = _this.parent.getColumns();
        columns = isNullOrUndefined(columns) ? currentViewCols : columns;
        if (showHideArgs["" + cancel]) {
          _this.parent.notify(resetColumns, {
            showHideArgs
          });
          if (columns.length > 0) {
            columns[0].visible = true;
          }
          return;
        }
        _this.parent.notify(destroyEditForm, args);
        if (isGroupAdaptive(_this.parent)) {
          _this.parent.contentModule.emptyVcRows();
        }
        var addedRow2 = _this.parent.element.querySelector(".e-addedrow");
        if (_this.parent.editSettings.showAddNewRow && addedRow2) {
          remove(addedRow2);
          if (_this.parent.enableVirtualization || _this.parent.enableInfiniteScrolling) {
            _this.parent.isAddNewRow = true;
          }
          _this.parent.addNewRowFocus = true;
          _this.parent.isEdit = false;
        }
        if (_this.parent.allowSelection && _this.parent.getSelectedRecords().length && !_this.parent.selectionSettings.persistSelection) {
          _this.parent.clearSelection();
        }
        if (_this.parent.enableColumnVirtualization) {
          _this.parent.notify(refreshFrozenPosition, {
            isModeChg: true
          });
        } else {
          if (_this.parent.isFrozenGrid() && columns.length) {
            _this.parent.notify(refreshFrozenPosition, {
              isModeChg: true
            });
          } else {
            _this.parent.notify(columnVisibilityChanged, columns);
          }
        }
        var params = {
          requestType: "columnstate",
          columns: changedStateColumns
        };
        _this.parent.trigger(actionComplete, params);
        var startAdd = !_this.parent.element.querySelector(".e-addedrow");
        if (_this.parent.editSettings.showAddNewRow && startAdd) {
          _this.parent.isEdit = false;
          _this.parent.addRecord();
          if (!(_this.parent.enableVirtualization || _this.parent.enableInfiniteScrolling)) {
            _this.parent.notify(showAddNewRowFocus, {});
          }
        }
        if (_this.parent.columnQueryMode !== "All") {
          _this.parent.refresh();
        }
      });
      if (!this.parent.groupSettings.columns.length) {
        if (this.parent.autoFit) {
          this.parent.preventAdjustColumns();
        } else if (this.parent.allowResizing && this.parent.resizeSettings.mode === "Normal") {
          var isMaxWidth = this.parent.getHeaderTable().style.width.indexOf("px") === -1;
          this.widthService.setWidthToTable(isMaxWidth);
        }
      }
    };
    return ShowHide2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/scroll.js
var Scroll = (
  /** @class */
  function() {
    function Scroll2(parent) {
      this.previousValues = {
        top: 0,
        left: 0
      };
      this.oneTimeReady = true;
      this.parent = parent;
      this.widthService = new ColumnWidthService(parent);
      this.addEventListener();
    }
    Scroll2.prototype.getModuleName = function() {
      return "scroll";
    };
    Scroll2.prototype.setWidth = function(uiupdate) {
      this.parent.element.style.width = formatUnit(this.parent.width);
      if (uiupdate) {
        this.widthService.setWidthToColumns();
      }
      if (this.parent.toolbarModule && this.parent.toolbarModule.toolbar && this.parent.toolbarModule.toolbar.element) {
        var tlbrElement = this.parent.toolbarModule.toolbar.element;
        var tlbrLeftElement = tlbrElement.querySelector(".e-toolbar-left");
        var tlbrCenterElement = tlbrElement.querySelector(".e-toolbar-center");
        var tlbrRightElement = tlbrElement.querySelector(".e-toolbar-right");
        var tlbrItems = tlbrElement.querySelector(".e-toolbar-items");
        var tlbrLeftWidth = tlbrLeftElement ? tlbrLeftElement.clientWidth : 0;
        var tlbrCenterWidth = tlbrCenterElement ? tlbrCenterElement.clientWidth : 0;
        var tlbrRightWidth = tlbrRightElement ? tlbrRightElement.clientWidth : 0;
        var tlbrItemsWidth = tlbrItems ? tlbrItems.clientWidth : 0;
        var tlbrWidth = tlbrElement ? tlbrElement.clientWidth : 0;
        if (!this.parent.enableAdaptiveUI || tlbrLeftWidth > tlbrWidth || tlbrCenterWidth > tlbrWidth || tlbrRightWidth > tlbrWidth || tlbrItemsWidth > tlbrWidth) {
          this.parent.toolbarModule.toolbar.refreshOverflow();
        }
      }
    };
    Scroll2.prototype.setHeight = function() {
      var mHdrHeight = 0;
      var content2 = this.parent.getContent().querySelector("." + content);
      var height = this.parent.height;
      if (this.parent.enableColumnVirtualization && this.parent.isFrozenGrid() && this.parent.height !== "auto" && this.parent.height.toString().indexOf("%") < 0) {
        height = parseInt(height, 10) - Scroll2.getScrollBarWidth();
      }
      if (!this.parent.enableVirtualization && this.parent.frozenRows && this.parent.height !== "auto" && this.parent.height !== "100%") {
        var tbody2 = this.parent.getHeaderContent().querySelector(tbody + ":not(.e-masked-tbody)");
        mHdrHeight = tbody2 ? tbody2.offsetHeight : 0;
        if (tbody2 && mHdrHeight) {
          var add = tbody2.getElementsByClassName(addedRow).length;
          var height_1 = add * this.parent.getRowHeight();
          mHdrHeight -= height_1;
        } else if (!this.parent.isInitialLoad && this.parent.loadingIndicator.indicatorType === "Shimmer" && this.parent.getHeaderContent().querySelector(".e-masked-table")) {
          height = parseInt(height, 10) - this.parent.frozenRows * this.parent.getRowHeight();
        }
        content2.style.height = formatUnit(parseInt(height, 10) - mHdrHeight);
      } else {
        content2.style.height = formatUnit(height);
      }
      this.ensureOverflow(content2);
      if (this.parent.isFrozenGrid()) {
        this.refresh();
      }
    };
    Scroll2.prototype.setPadding = function() {
      var content2 = this.parent.getHeaderContent();
      var scrollWidth2 = Scroll2.getScrollBarWidth() - this.getThreshold();
      var cssProps = this.getCssProperties();
      content2.querySelector("." + headerContent).style[cssProps.border] = scrollWidth2 > 0 ? "1px" : "0px";
      content2.style[cssProps.padding] = scrollWidth2 > 0 ? scrollWidth2 + "px" : "0px";
    };
    Scroll2.prototype.removePadding = function(rtl) {
      var cssProps = this.getCssProperties(rtl);
      var hDiv = this.parent.getHeaderContent().querySelector("." + headerContent);
      hDiv.style[cssProps.border] = "";
      hDiv.parentElement.style[cssProps.padding] = "";
      var footerDiv = this.parent.getFooterContent();
      if (footerDiv && footerDiv.classList.contains("e-footerpadding")) {
        footerDiv.classList.remove("e-footerpadding");
      }
    };
    Scroll2.prototype.refresh = function() {
      if (this.parent.height !== "100%") {
        return;
      }
      var content2 = this.parent.getContent();
      this.parent.element.style.height = "100%";
      var height = this.widthService.getSiblingsHeight(content2);
      content2.style.height = "calc(100% - " + height + "px)";
    };
    Scroll2.prototype.getThreshold = function() {
      var appName = Browser.info.name;
      if (appName === "mozilla") {
        return 0.5;
      }
      return 1;
    };
    Scroll2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(onEmpty, this.wireEvents, this);
      this.parent.on(contentReady, this.wireEvents, this);
      this.parent.on(uiUpdate, this.onPropertyChanged, this);
      this.parent.on(textWrapRefresh, this.wireEvents, this);
      this.parent.on(headerRefreshed, this.setScrollLeft, this);
    };
    Scroll2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(onEmpty, this.wireEvents);
      this.parent.off(contentReady, this.wireEvents);
      this.parent.off(uiUpdate, this.onPropertyChanged);
      this.parent.off(textWrapRefresh, this.wireEvents);
      this.parent.off(headerRefreshed, this.setScrollLeft);
      this.unwireEvents();
    };
    Scroll2.prototype.unwireEvents = function() {
      if (this.parent.frozenRows && this.header) {
        EventHandler.remove(this.header, "touchstart pointerdown", this.setPageXY);
        EventHandler.remove(this.header, "touchmove pointermove", this.onTouchScroll);
      }
      var mScrollBar = this.parent.getContent() ? this.parent.getContent().querySelector(".e-movablescrollbar") : null;
      if (this.parent.isFrozenGrid() && this.parent.enableColumnVirtualization) {
        if (mScrollBar) {
          EventHandler.remove(mScrollBar, "scroll", this.onCustomScrollbarScroll);
        }
        if (this.content) {
          EventHandler.remove(this.content, "scroll", this.onCustomScrollbarScroll);
          EventHandler.remove(this.content, "touchstart pointerdown", this.setPageXY);
          if (!(/macintosh|ipad/.test(Browser.userAgent.toLowerCase()) && Browser.isDevice)) {
            EventHandler.remove(this.content, "touchmove pointermove", this.onTouchScroll);
          }
        }
        if (this.header) {
          EventHandler.remove(this.header, "scroll", this.onCustomScrollbarScroll);
          EventHandler.remove(this.header, "touchstart pointerdown", this.setPageXY);
          EventHandler.remove(this.header, "touchmove pointermove", this.onTouchScroll);
        }
      }
      if (this.content) {
        EventHandler.remove(this.content, "scroll", this.contentScrollHandler);
      }
      if (this.header) {
        EventHandler.remove(this.header, "scroll", this.headerScrollHandler);
      }
      this.contentScrollHandler = null;
      this.headerScrollHandler = null;
      if (this.parent.aggregates.length && this.parent.getFooterContent()) {
        EventHandler.remove(this.parent.getFooterContent().firstChild, "scroll", this.onContentScroll);
      }
    };
    Scroll2.prototype.setScrollLeft = function() {
      this.parent.getHeaderContent().querySelector("." + headerContent).scrollLeft = this.previousValues.left;
    };
    Scroll2.prototype.onContentScroll = function(scrollTarget) {
      var _this = this;
      var element = scrollTarget;
      var isHeader = element.classList.contains(headerContent);
      return function(e) {
        if (_this.content.querySelector(tbody) === null || _this.parent.isPreventScrollEvent) {
          return;
        }
        var target = e.target;
        if (_this.parent.frozenRows) {
          if (_this.content.scrollTop > 0 && _this.parent.frozenRows) {
            addClass([_this.parent.element], "e-top-shadow");
          } else {
            removeClass([_this.parent.element], "e-top-shadow");
          }
        }
        if (_this.parent.element.querySelectorAll(".e-leftfreeze,.e-fixedfreeze,.e-rightfreeze").length) {
          var errorFreeze = _this.parent.getContent().querySelectorAll('.e-freezeerror:not([style*="display: none"])');
          var errorFixed = _this.parent.getContent().querySelectorAll('.e-fixederror:not([style*="display: none"])');
          var scrollLeft = _this.parent.enableRtl ? Math.abs(target.scrollLeft) : target.scrollLeft;
          var isStartOfScroll = scrollLeft <= 1;
          if (!isStartOfScroll && _this.parent.getVisibleFrozenLeftCount()) {
            addClass([_this.parent.element], "e-left-shadow");
          } else {
            removeClass([_this.parent.element], "e-left-shadow");
          }
          var scrollRight = _this.parent.enableRtl ? Math.abs(target.scrollLeft) : target.scrollLeft;
          var isEndOfScroll = Math.round(scrollRight + target.clientWidth) >= target.scrollWidth - 1;
          if (isEndOfScroll && _this.parent.getVisibleFrozenRightCount()) {
            removeClass([_this.parent.element], "e-right-shadow");
          } else {
            addClass([_this.parent.element], "e-right-shadow");
          }
          var rows = [].slice.call(_this.parent.getContent().querySelectorAll(".e-row:not(.e-hiddenrow)"));
          if ((rows.length === 1 && errorFreeze.length || _this.parent.element.querySelector('.e-freeze-autofill:not([style*="display: none"])') || errorFixed.length) && target.scrollLeft !== _this.previousValues.left) {
            target.scrollLeft = _this.previousValues.left;
            return;
          }
          if (rows.length !== 1 && (errorFreeze.length || errorFixed.length) && target.scrollTop !== _this.previousValues.top) {
            target.scrollTop = _this.previousValues.top;
            return;
          }
        }
        var left = target.scrollLeft;
        if (!isNullOrUndefined(_this.parent.infiniteScrollModule) && _this.parent.enableInfiniteScrolling && (!_this.parent.isEdit || _this.parent.editSettings.showAddNewRow && !_this.parent.element.querySelector(".e-editedrow"))) {
          _this.parent.notify(infiniteScrollHandler, {
            target: e.target,
            isLeft: _this.previousValues.left !== left
          });
        }
        if (_this.parent.groupSettings.columns.length && _this.parent.groupSettings.enableLazyLoading) {
          var isDown = _this.previousValues.top < _this.parent.getContent().firstElementChild.scrollTop;
          _this.parent.notify(lazyLoadScrollHandler, {
            scrollDown: isDown
          });
        }
        _this.parent.notify(virtualScrollEdit, {});
        var isFooter = target.classList.contains("e-summarycontent");
        if (_this.previousValues.left === left) {
          _this.previousValues.top = !isHeader ? _this.previousValues.top : target.scrollTop;
          return;
        }
        _this.parent.notify(closeFilterDialog, e);
        element.scrollLeft = left;
        if (isFooter) {
          _this.header.scrollLeft = left;
        }
        _this.previousValues.left = left;
        _this.parent.notify(scroll, {
          left
        });
      };
    };
    Scroll2.prototype.onCustomScrollbarScroll = function(cont, hdr) {
      var _this = this;
      var content2 = cont;
      var header = hdr;
      return function(e) {
        if (_this.content.querySelector(tbody) === null) {
          return;
        }
        var target = e.target;
        var left = target.scrollLeft;
        if (_this.previousValues.left === left) {
          return;
        }
        content2.scrollLeft = left;
        header.scrollLeft = left;
        _this.previousValues.left = left;
        _this.parent.notify(scroll, {
          left
        });
        if (_this.parent.isDestroyed) {
          return;
        }
      };
    };
    Scroll2.prototype.onTouchScroll = function(scrollTarget) {
      var _this = this;
      var element = scrollTarget;
      return function(e) {
        if (e.pointerType === "mouse") {
          return;
        }
        var isFrozen = _this.parent.isFrozenGrid();
        var pageXY = _this.getPointXY(e);
        var left = element.scrollLeft + (_this.pageXY.x - pageXY.x);
        var mHdr = _this.parent.getHeaderContent().querySelector("." + headerContent);
        var mCont = _this.parent.getContent().querySelector("." + content);
        if (_this.previousValues.left === left || left < 0 || mHdr.scrollWidth - mHdr.clientWidth < left) {
          return;
        }
        e.preventDefault();
        mHdr.scrollLeft = left;
        mCont.scrollLeft = left;
        if (isFrozen && _this.parent.enableColumnVirtualization) {
          var scrollBar = _this.parent.getContent().querySelector(".e-movablescrollbar");
          scrollBar.scrollLeft = left;
        }
        _this.pageXY.x = pageXY.x;
        _this.previousValues.left = left;
      };
    };
    Scroll2.prototype.setPageXY = function() {
      var _this = this;
      return function(e) {
        if (e.pointerType === "mouse") {
          return;
        }
        _this.pageXY = _this.getPointXY(e);
      };
    };
    Scroll2.prototype.getPointXY = function(e) {
      var pageXY = {
        x: 0,
        y: 0
      };
      if (e.touches && e.touches.length) {
        pageXY.x = e.touches[0].pageX;
        pageXY.y = e.touches[0].pageY;
      } else {
        pageXY.x = e.pageX;
        pageXY.y = e.pageY;
      }
      return pageXY;
    };
    Scroll2.prototype.getScrollbleParent = function(node) {
      if (node === null) {
        return null;
      }
      var parent = isNullOrUndefined(node.tagName) ? node.scrollingElement : node;
      var overflowY = document.defaultView.getComputedStyle(parent, null).overflowY;
      if (parent.scrollHeight > parent.clientHeight && overflowY !== "hidden" && overflowY !== "visible" || node.tagName === "HTML" || node.tagName === "BODY") {
        return node;
      } else {
        return this.getScrollbleParent(node.parentNode);
      }
    };
    Scroll2.prototype.addStickyListener = function(isAdd) {
      this.parentElement = this.getScrollbleParent(this.parent.element.parentElement);
      if (isAdd && this.parentElement) {
        this.eventElement = this.parentElement.tagName === "HTML" || this.parentElement.tagName === "BODY" ? document : this.parentElement;
        EventHandler.add(this.eventElement, "scroll", this.makeStickyHeader, this);
      } else if (this.eventElement) {
        EventHandler.remove(this.eventElement, "scroll", this.makeStickyHeader);
        this.eventElement = null;
      }
    };
    Scroll2.prototype.resizeFrozenRowBorder = function() {
      var div;
      if (!this.parent.element.querySelector(".e-frozenrow-border")) {
        div = this.parent.createElement("div", {
          className: "e-frozenrow-border"
        });
        this.parent.element.insertBefore(div, this.parent.element.querySelector(".e-gridcontent"));
      } else {
        div = this.parent.element.querySelector(".e-frozenrow-border");
      }
      var scrollWidth2 = this.parent.height !== "auto" ? Scroll2.getScrollBarWidth() : 0;
      div.style.width = this.parent.element.offsetWidth - scrollWidth2 - 0.5 + "px";
    };
    Scroll2.prototype.wireEvents = function() {
      var _this = this;
      if (this.oneTimeReady) {
        var frzCols = this.parent.isFrozenGrid();
        this.content = this.parent.getContent().querySelector("." + content);
        this.header = this.parent.getHeaderContent().querySelector("." + headerContent);
        var mScrollBar = this.parent.getContent().querySelector(".e-movablescrollbar");
        if (this.parent.frozenRows && this.header && this.content) {
          EventHandler.add(this.header, "touchstart pointerdown", this.setPageXY(), this);
          EventHandler.add(this.header, "touchmove pointermove", this.onTouchScroll(this.content), this);
        }
        if (frzCols && mScrollBar && this.parent.enableColumnVirtualization) {
          EventHandler.add(mScrollBar, "scroll", this.onCustomScrollbarScroll(this.content, this.header), this);
          EventHandler.add(this.content, "scroll", this.onCustomScrollbarScroll(mScrollBar, this.header), this);
          EventHandler.add(this.header, "scroll", this.onCustomScrollbarScroll(mScrollBar, this.content), this);
          EventHandler.add(this.header, "touchstart pointerdown", this.setPageXY(), this);
          EventHandler.add(this.header, "touchmove pointermove", this.onTouchScroll(this.content), this);
          EventHandler.add(this.content, "touchstart pointerdown", this.setPageXY(), this);
          if (!(/macintosh|ipad/.test(Browser.userAgent.toLowerCase()) && Browser.isDevice)) {
            EventHandler.add(this.content, "touchmove pointermove", this.onTouchScroll(this.header), this);
          }
        }
        this.contentScrollHandler = this.onContentScroll(this.header);
        this.headerScrollHandler = this.onContentScroll(this.content);
        EventHandler.add(this.content, "scroll", this.contentScrollHandler, this);
        EventHandler.add(this.header, "scroll", this.headerScrollHandler, this);
        if (this.parent.aggregates.length) {
          EventHandler.add(this.parent.getFooterContent().firstChild, "scroll", this.onContentScroll(this.content), this);
        }
        if (this.parent.enableStickyHeader) {
          this.addStickyListener(true);
        }
        this.refresh();
        this.oneTimeReady = false;
      }
      var table2 = this.parent.getContentTable();
      var sLeft;
      var sHeight;
      var clientHeight;
      getUpdateUsingRaf(function() {
        sLeft = _this.header.scrollLeft;
        sHeight = table2.scrollHeight;
        clientHeight = _this.parent.getContent().clientHeight;
      }, function() {
        var args = {
          cancel: false
        };
        _this.parent.notify(checkScrollReset, args);
        if (sHeight < clientHeight && _this.parent.height !== "auto") {
          _this.setLastRowCell();
          _this.parent.notify(lastRowCellBorderUpdated, args);
        }
        if (_this.parent.frozenRows) {
          _this.resizeFrozenRowBorder();
        }
        if (!_this.parent.enableVirtualization && !_this.parent.enableInfiniteScrolling) {
          if (!args.cancel) {
            _this.header.scrollLeft = _this.previousValues.left;
            _this.content.scrollLeft = _this.previousValues.left;
            _this.content.scrollTop = _this.previousValues.top;
          }
        }
        if (!_this.parent.enableColumnVirtualization) {
          _this.content.scrollLeft = sLeft;
          if (_this.parent.isFrozenGrid()) {
            _this.previousValues.left = sLeft;
          }
        }
      });
      this.parent.isPreventScrollEvent = false;
    };
    Scroll2.prototype.setLastRowCell = function() {
      var table2 = this.parent.getContentTable();
      removeClass(table2.querySelectorAll("td"), "e-lastrowcell");
      if (table2.querySelector("tr:nth-last-child(2)")) {
        if (this.parent.editSettings.showAddNewRow && this.parent.editSettings.newRowPosition === "Bottom") {
          addClass(table2.querySelector("tr:nth-last-child(2)").querySelectorAll("td"), "e-lastrowcell");
        }
      }
      addClass(table2.querySelectorAll("tr:last-child td"), "e-lastrowcell");
      if (this.parent.isSpan) {
        addClass(table2.querySelectorAll(".e-row-span-lastrowcell"), "e-lastrowcell");
      }
    };
    Scroll2.prototype.getCssProperties = function(rtl) {
      var css = {};
      var enableRtl = isNullOrUndefined(rtl) ? this.parent.enableRtl : rtl;
      css.border = enableRtl ? "borderLeftWidth" : "borderRightWidth";
      css.padding = enableRtl ? "paddingLeft" : "paddingRight";
      return css;
    };
    Scroll2.prototype.ensureOverflow = function(content2) {
      content2.style.overflowY = this.parent.height === "auto" ? "auto" : "scroll";
    };
    Scroll2.prototype.onPropertyChanged = function(e) {
      if (e.module !== this.getModuleName()) {
        return;
      }
      this.setPadding();
      this.oneTimeReady = true;
      if (this.parent.height === "auto") {
        this.removePadding();
      }
      this.wireEvents();
      this.setHeight();
      var width = "width";
      this.setWidth(!isNullOrUndefined(e.properties["" + width]));
    };
    Scroll2.prototype.makeStickyHeader = function() {
      if (this.parent.enableStickyHeader && this.parent.element && this.parent.getContent()) {
        var contentRect = this.parent.getContent().getClientRects()[0];
        if (contentRect) {
          var windowScale = window.devicePixelRatio;
          var headerEle = this.parent.getHeaderContent();
          var toolbarEle = this.parent.element.querySelector(".e-toolbar");
          var groupHeaderEle = this.parent.element.querySelector(".e-groupdroparea");
          var height = headerEle.offsetHeight + (toolbarEle ? toolbarEle.offsetHeight : 0) + (groupHeaderEle ? groupHeaderEle.offsetHeight : 0);
          var parentTop = this.parentElement.getClientRects()[0].top;
          var top_1 = contentRect.top - (parentTop < 0 ? 0 : parentTop);
          var left = contentRect.left;
          var colMenuEle = document.body.querySelector("#" + this.parent.element.id + "_columnmenu");
          if (windowScale !== 1) {
            top_1 = Math.ceil(top_1);
          }
          if (top_1 < height && contentRect.bottom > 0) {
            headerEle.classList.add("e-sticky");
            var elemTop = 0;
            if (groupHeaderEle && this.parent.groupSettings.showDropArea) {
              this.setSticky(groupHeaderEle, elemTop, contentRect.width, left, true);
              elemTop += groupHeaderEle.getClientRects()[0].height;
            }
            if (toolbarEle) {
              this.setSticky(toolbarEle, elemTop, contentRect.width, left, true);
              elemTop += toolbarEle.getClientRects()[0].height;
            }
            this.setSticky(headerEle, elemTop, contentRect.width, left, true);
            if (!isNullOrUndefined(colMenuEle)) {
              colMenuEle.style.position = "fixed";
              colMenuEle.style.top = height + "px";
            }
          } else {
            if (headerEle.classList.contains("e-sticky")) {
              this.setSticky(headerEle, null, null, null, false);
              if (toolbarEle) {
                this.setSticky(toolbarEle, null, null, null, false);
              }
              if (groupHeaderEle) {
                this.setSticky(groupHeaderEle, null, null, null, false);
              }
              var ccDlg = this.parent.element.querySelector(".e-ccdlg");
              if (ccDlg) {
                ccDlg.classList.remove("e-sticky");
              }
              if (!isNullOrUndefined(colMenuEle)) {
                colMenuEle.style.position = "absolute";
                var topStyle = contentRect.top - parentTop;
                colMenuEle.style.top = topStyle + "px";
              }
            }
          }
          this.parent.notify(stickyScrollComplete, {});
        }
      }
    };
    Scroll2.prototype.setSticky = function(ele, top, width, left, isAdd) {
      if (isAdd) {
        ele.classList.add("e-sticky");
      } else {
        ele.classList.remove("e-sticky");
      }
      ele.style.width = width != null ? width + "px" : "";
      ele.style.top = top != null ? top + "px" : "";
      ele.style.left = left !== null ? parseInt(ele.style.left, 10) !== left ? left + "px" : ele.style.left : "";
    };
    Scroll2.prototype.destroy = function() {
      var gridElement = this.parent.element;
      if (!gridElement || !gridElement.querySelector("." + gridHeader) && !gridElement.querySelector("." + gridContent)) {
        return;
      }
      this.removeEventListener();
      var cont = this.parent.getContent().querySelector("." + content);
      EventHandler.remove(cont, "scroll", this.onContentScroll);
      if (this.parent.enableStickyHeader) {
        this.addStickyListener(false);
      }
      this.removePadding();
      removeClass([this.parent.getHeaderContent().querySelector("." + headerContent)], headerContent);
      removeClass([cont], content);
      cont.style.height = "";
      this.parent.element.style.width = "";
    };
    Scroll2.getScrollBarWidth = function() {
      return getScrollBarWidth();
    };
    return Scroll2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/models/aggregate.js
var __extends16 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate3 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AggregateColumn = (
  /** @class */
  function(_super) {
    __extends16(AggregateColumn2, _super);
    function AggregateColumn2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.templateFn = {};
      return _this;
    }
    AggregateColumn2.prototype.setFormatter = function(value) {
      this.formatFn = value;
    };
    AggregateColumn2.prototype.getFormatter = function() {
      return this.formatFn;
    };
    AggregateColumn2.prototype.setTemplate = function(helper) {
      if (helper === void 0) {
        helper = {};
      }
      if (this.footerTemplate !== void 0) {
        this.templateFn[getEnumValue(CellType, CellType.Summary)] = {
          fn: compile(this.footerTemplate, helper),
          property: "footerTemplate"
        };
      }
      if (this.groupFooterTemplate !== void 0) {
        this.templateFn[getEnumValue(CellType, CellType.GroupSummary)] = {
          fn: compile(this.groupFooterTemplate, helper),
          property: "groupFooterTemplate"
        };
      }
      if (this.groupCaptionTemplate !== void 0) {
        this.templateFn[getEnumValue(CellType, CellType.CaptionSummary)] = {
          fn: compile(this.groupCaptionTemplate, helper),
          property: "groupCaptionTemplate"
        };
      }
    };
    AggregateColumn2.prototype.getTemplate = function(type) {
      return this.templateFn[getEnumValue(CellType, type)];
    };
    AggregateColumn2.prototype.setPropertiesSilent = function(prop) {
      this.setProperties(prop, true);
    };
    __decorate3([Property()], AggregateColumn2.prototype, "type", void 0);
    __decorate3([Property()], AggregateColumn2.prototype, "field", void 0);
    __decorate3([Property()], AggregateColumn2.prototype, "columnName", void 0);
    __decorate3([Property()], AggregateColumn2.prototype, "format", void 0);
    __decorate3([Property()], AggregateColumn2.prototype, "footerTemplate", void 0);
    __decorate3([Property()], AggregateColumn2.prototype, "groupFooterTemplate", void 0);
    __decorate3([Property()], AggregateColumn2.prototype, "groupCaptionTemplate", void 0);
    __decorate3([Property()], AggregateColumn2.prototype, "customAggregate", void 0);
    return AggregateColumn2;
  }(ChildProperty)
);
var AggregateRow = (
  /** @class */
  function(_super) {
    __extends16(AggregateRow2, _super);
    function AggregateRow2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate3([Collection([], AggregateColumn)], AggregateRow2.prototype, "columns", void 0);
    return AggregateRow2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/clipboard.js
var Clipboard = (
  /** @class */
  function() {
    function Clipboard2(parent, serviceLocator) {
      this.copyContent = "";
      this.isSelect = false;
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      this.addEventListener();
    }
    Clipboard2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(contentReady, this.initialEnd, this);
      this.parent.on(keyPressed, this.keyDownHandler, this);
      this.parent.on(click, this.clickHandler, this);
      this.parent.on(onEmpty, this.initialEnd, this);
      EventHandler.add(this.parent.element, "keydown", this.pasteHandler, this);
    };
    Clipboard2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(keyPressed, this.keyDownHandler);
      this.parent.off(contentReady, this.initialEnd);
      this.parent.off(click, this.clickHandler);
      this.parent.off(onEmpty, this.initialEnd);
      EventHandler.remove(this.parent.element, "keydown", this.pasteHandler);
    };
    Clipboard2.prototype.clickHandler = function(e) {
      var target = e.target;
      target = parentsUntil(target, "e-rowcell");
    };
    Clipboard2.prototype.pasteHandler = function(e) {
      var _this = this;
      var grid = this.parent;
      var isMacLike = /(Mac)/i.test(navigator.platform);
      var selectedRowCellIndexes = this.parent.getSelectedRowCellIndexes();
      if (!grid.isEdit && e.keyCode === 67 && isMacLike && e.metaKey) {
        this.copy();
      }
      if (selectedRowCellIndexes.length && e.keyCode === 86 && (!isMacLike && e.ctrlKey || isMacLike && e.metaKey) && !grid.isEdit) {
        var target = closest(document.activeElement, "." + rowCell);
        if (!this.clipBoardTextArea || !target || !grid.editSettings.allowEditing || grid.editSettings.mode !== "Batch" || grid.selectionSettings.mode !== "Cell" || grid.selectionSettings.cellSelectionMode === "Flow") {
          return;
        }
        this.activeElement = document.activeElement;
        var x_1 = window.scrollX;
        var y_1 = window.scrollY;
        this.clipBoardTextArea.focus();
        setTimeout(function() {
          _this.activeElement.focus();
          window.scrollTo(x_1, y_1);
          _this.paste(_this.clipBoardTextArea.value, selectedRowCellIndexes[0].rowIndex, selectedRowCellIndexes[0].cellIndexes[0]);
        }, isMacLike ? 100 : 10);
      }
    };
    Clipboard2.prototype.paste = function(data, rowIndex, colIndex) {
      var grid = this.parent;
      var cIdx = colIndex;
      var rIdx = rowIndex;
      var col;
      var value;
      var isAvail;
      var rows = data.split("\n");
      var cols;
      for (var r = 0; r < rows.length; r++) {
        cols = rows[parseInt(r.toString(), 10)].split("	");
        cIdx = colIndex;
        if (r === rows.length - 1 && rows[parseInt(r.toString(), 10)] === "" || isUndefined(grid.getRowByIndex(rIdx))) {
          cIdx++;
          break;
        }
        for (var c = 0; c < cols.length; c++) {
          isAvail = grid.getCellFromIndex(rIdx, cIdx);
          if (!isAvail) {
            cIdx++;
            break;
          }
          col = grid.getColumnByIndex(cIdx);
          value = col.getParser() ? col.getParser()(cols[parseInt(c.toString(), 10)]) : cols[parseInt(c.toString(), 10)];
          if (col.allowEditing && !col.isPrimaryKey) {
            var args = {
              column: col,
              data: value,
              rowIndex: rIdx
            };
            this.parent.trigger(beforePaste, args);
            rIdx = args.rowIndex;
            if (!args.cancel) {
              if (grid.editModule) {
                if (col.type === "number") {
                  this.parent.editModule.updateCell(rIdx, col.field, parseFloat(args.data));
                } else {
                  grid.editModule.updateCell(rIdx, col.field, args.data);
                }
              }
            }
          }
          cIdx++;
        }
        rIdx++;
      }
      grid.selectionModule.selectCellsByRange({
        rowIndex,
        cellIndex: colIndex
      }, {
        rowIndex: rIdx - 1,
        cellIndex: cIdx - 1
      });
      var cell = this.parent.getCellFromIndex(rIdx - 1, cIdx - 1);
      if (cell) {
        classList(cell, ["e-focus", "e-focused"], []);
      }
      this.clipBoardTextArea.value = "";
    };
    Clipboard2.prototype.initialEnd = function() {
      this.l10n = this.serviceLocator.getService("localization");
      this.parent.off(contentReady, this.initialEnd);
      this.clipBoardTextArea = this.parent.createElement("textarea", {
        className: "e-clipboard",
        attrs: {
          tabindex: "-1",
          "aria-label": this.l10n.getConstant("ClipBoard")
        }
      });
      this.clipBoardTextArea.style.opacity = "0";
      this.parent.element.appendChild(this.clipBoardTextArea);
    };
    Clipboard2.prototype.keyDownHandler = function(e) {
      if (e.action === "ctrlPlusC") {
        this.copy();
      } else if (e.action === "ctrlShiftPlusH") {
        this.copy(true);
      }
    };
    Clipboard2.prototype.setCopyData = function(withHeader) {
      if (window.getSelection().toString() === "") {
        this.clipBoardTextArea.value = this.copyContent = "";
        var rows = this.parent.getDataRows();
        if (this.parent.selectionSettings && this.parent.selectionSettings.allowColumnSelection && this.parent.selectionModule && this.parent.selectionModule.selectedColumnsIndexes.length) {
          if (withHeader) {
            var selectedColumns = this.parent.selectionModule.selectedColumnsIndexes;
            var headerColumns = [];
            for (var i = 0; i < selectedColumns.length; i++) {
              var colIndex = selectedColumns[parseInt(i.toString(), 10)];
              var headerCell = this.parent.getColumnHeaderByIndex(colIndex);
              if (headerCell && !headerCell.classList.contains("e-hide")) {
                headerColumns.push(headerCell);
              }
            }
            this.getCopyData(headerColumns, false, "	", withHeader);
            this.copyContent += "\n";
          }
          for (var j = 0; j < rows.length; j++) {
            var columnCells = [];
            if (j > 0) {
              this.copyContent += "\n";
            }
            columnCells.push.apply(columnCells, [].slice.call(rows[parseInt(j.toString(), 10)].querySelectorAll(".e-columnselection:not(.e-hide)")));
            this.getCopyData(columnCells, false, "	", withHeader);
          }
        } else {
          if (this.parent.selectionSettings.mode !== "Cell") {
            var selectedIndexes = this.parent.getSelectedRowIndexes().sort(function(a, b) {
              return a - b;
            });
            if (withHeader) {
              var headerTextArray = [];
              for (var i = 0; i < this.parent.getVisibleColumns().length; i++) {
                headerTextArray[parseInt(i.toString(), 10)] = this.parent.getVisibleColumns()[parseInt(i.toString(), 10)].headerText;
              }
              this.getCopyData(headerTextArray, false, "	", withHeader);
              this.copyContent += "\n";
            }
            if ((this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) && selectedIndexes.length > rows.length) {
              selectedIndexes = [];
              for (var i = 0; i < rows.length; i++) {
                var row2 = rows[parseInt(i.toString(), 10)];
                if (row2.getAttribute("aria-selected") === "true") {
                  selectedIndexes.push(parseInt(row2.getAttribute("data-rowindex"), 10));
                }
              }
            }
            for (var i = 0; i < selectedIndexes.length; i++) {
              if (i > 0) {
                this.copyContent += "\n";
              }
              var leftCols = [];
              var idx = selectedIndexes[parseInt(i.toString(), 10)];
              if (!isGroupAdaptive(this.parent) && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache || this.parent.groupSettings.columns.length && this.parent.groupSettings.enableLazyLoading)) {
                idx = rows.map(function(m) {
                  return m.getAttribute("data-rowindex");
                }).indexOf(selectedIndexes[parseInt(i.toString(), 10)].toString());
              }
              var currentRow = rows[parseInt(idx.toString(), 10)];
              if (!isNullOrUndefined(currentRow)) {
                leftCols.push.apply(leftCols, [].slice.call(currentRow.querySelectorAll(".e-rowcell:not(.e-hide)")));
                this.getCopyData(leftCols, false, "	", withHeader);
              }
            }
          } else if (this.parent.selectionModule && this.parent.selectionModule.selectedRowCellIndexes.length) {
            var obj = this.checkBoxSelection();
            if (obj.status) {
              if (withHeader) {
                var headers = [];
                for (var i = 0; i < obj.colIndexes.length; i++) {
                  var colHeader = this.parent.getColumnHeaderByIndex(obj.colIndexes[parseInt(i.toString(), 10)]);
                  if (!colHeader.classList.contains("e-hide")) {
                    headers.push(colHeader);
                  }
                }
                this.getCopyData(headers, false, "	", withHeader);
                this.copyContent += "\n";
              }
              for (var i = 0; i < obj.rowIndexes.length; i++) {
                if (i > 0) {
                  this.copyContent += "\n";
                }
                var cells = [].slice.call(rows[obj.rowIndexes[parseInt(i.toString(), 10)]].querySelectorAll(".e-cellselectionbackground:not(.e-hide)"));
                this.getCopyData(cells, false, "	", withHeader);
              }
            } else {
              this.getCopyData([].slice.call(this.parent.element.getElementsByClassName("e-cellselectionbackground")), true, "\n", withHeader);
            }
          }
        }
        var args = {
          data: this.copyContent,
          cancel: false
        };
        this.parent.trigger(beforeCopy, args);
        if (args.cancel) {
          return;
        }
        this.clipBoardTextArea.value = this.copyContent = args.data;
        if (!Browser.userAgent.match(/ipad|ipod|iphone/i)) {
          this.clipBoardTextArea.select();
        } else {
          this.clipBoardTextArea.setSelectionRange(0, this.clipBoardTextArea.value.length);
        }
        this.isSelect = true;
      }
    };
    Clipboard2.prototype.getCopyData = function(cells, isCell, splitKey, withHeader) {
      var isElement = typeof cells[0] !== "string";
      for (var j = 0; j < cells.length; j++) {
        if (withHeader && isCell) {
          var colIdx = parseInt(cells[parseInt(j.toString(), 10)].getAttribute(ariaColIndex), 10) - 1;
          this.copyContent += this.parent.getColumns()[parseInt(colIdx.toString(), 10)].headerText + "\n";
        }
        if (isElement) {
          if (!cells[parseInt(j.toString(), 10)].classList.contains("e-hide")) {
            this.copyContent += cells[parseInt(j.toString(), 10)].innerText;
          }
        } else {
          this.copyContent += cells[parseInt(j.toString(), 10)];
        }
        if (j < cells.length - 1) {
          this.copyContent += splitKey;
        }
      }
    };
    Clipboard2.prototype.copy = function(withHeader) {
      if (document.queryCommandSupported("copy") && this.clipBoardTextArea) {
        this.setCopyData(withHeader);
        document.execCommand("copy");
        this.clipBoardTextArea.blur();
      }
      if (this.isSelect) {
        window.getSelection().removeAllRanges();
        this.isSelect = false;
      }
    };
    Clipboard2.prototype.getModuleName = function() {
      return "clipboard";
    };
    Clipboard2.prototype.destroy = function() {
      this.removeEventListener();
      if (this.clipBoardTextArea) {
        remove(this.clipBoardTextArea);
        this.clipBoardTextArea = null;
      }
    };
    Clipboard2.prototype.checkBoxSelection = function() {
      var gridObj = this.parent;
      var obj = {
        status: false
      };
      if (gridObj.selectionSettings.mode === "Cell") {
        var rowCellIndxes = gridObj.getSelectedRowCellIndexes();
        var str = void 0;
        var rowIndexes = [];
        var i = void 0;
        for (i = 0; i < rowCellIndxes.length; i++) {
          if (rowCellIndxes[parseInt(i.toString(), 10)].cellIndexes.length) {
            rowIndexes.push(rowCellIndxes[parseInt(i.toString(), 10)].rowIndex);
          }
          if (rowCellIndxes[parseInt(i.toString(), 10)].cellIndexes.length) {
            if (!str) {
              str = JSON.stringify(rowCellIndxes[parseInt(i.toString(), 10)].cellIndexes.sort());
            }
            if (str !== JSON.stringify(rowCellIndxes[parseInt(i.toString(), 10)].cellIndexes.sort())) {
              break;
            }
          }
        }
        rowIndexes.sort(function(a, b) {
          return a - b;
        });
        if (i === rowCellIndxes.length) {
          obj = {
            status: true,
            rowIndexes,
            colIndexes: rowCellIndxes[0].cellIndexes
          };
        }
      }
      return obj;
    };
    return Clipboard2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/logger.js
var BASE_DOC_URL = "https://ej2.syncfusion.com/documentation/grid";
var DOC_URL = "https://ej2.syncfusion.com/documentation/";
var WARNING = "[EJ2Grid.Warning]";
var ERROR = "[EJ2Grid.Error]";
var INFO = "[EJ2Grid.Info]";
var Logger = (
  /** @class */
  function() {
    function Logger2(parent) {
      this.parent = parent;
      this.parent.on("initial-end", this.patchadaptor, this);
    }
    Logger2.prototype.getModuleName = function() {
      return "logger";
    };
    Logger2.prototype.log = function(types, args) {
      if (!(types instanceof Array)) {
        types = [types];
      }
      var type = types;
      for (var i = 0; i < type.length; i++) {
        var item = detailLists[type[parseInt(i.toString(), 10)]];
        var cOp = item.check(args, this.parent);
        if (cOp.success) {
          console[item.logType](item.generateMessage(args, this.parent, cOp.options));
        }
      }
    };
    Logger2.prototype.patchadaptor = function() {
      var adaptor = this.parent.getDataModule().dataManager.adaptor;
      var original = adaptor.beforeSend;
      if (original) {
        adaptor.beforeSend = function(dm, request, settings) {
          original.call(adaptor, dm, request, settings);
        };
      }
    };
    Logger2.prototype.destroy = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off("initial-end", this.patchadaptor);
    };
    return Logger2;
  }()
);
var detailLists = {
  // eslint-disable-next-line camelcase
  module_missing: {
    type: "module_missing",
    logType: "warn",
    check: function(args, parent) {
      var injected = parent.getInjectedModules().map(function(m) {
        return m.prototype.getModuleName();
      });
      var modules = parent.requiredModules().map(function(m) {
        return m.member;
      }).filter(function(name) {
        return injected.indexOf(name) === -1;
      });
      return {
        success: modules.filter(function(m) {
          return m !== "resize";
        }).length > 0,
        options: modules
      };
    },
    generateMessage: function(args, parent, modules) {
      modules = modules.filter(function(m) {
        return m !== "resize";
      }).reduce(function(prev, cur) {
        return prev + ("* " + cur + "\n");
      }, "");
      return WARNING + ": MODULES MISSING\nThe following modules are not injected:.\n" + ("" + modules) + ("Refer to " + BASE_DOC_URL + "/module.html for documentation on importing feature modules.");
    }
  },
  // eslint-disable-next-line camelcase
  promise_enabled: {
    type: "promise_enabled",
    logType: "error",
    check: function() {
      return {
        success: typeof Promise === "undefined"
      };
    },
    generateMessage: function() {
      return ERROR + ": PROMISE UNDEFINED\nPromise object is not present in the global environment,please use polyfil to support Promise object in your environment.\n" + ("Refer to " + DOC_URL + "/base/browser.html?#required-polyfills for more information.");
    }
  },
  // eslint-disable-next-line camelcase
  primary_column_missing: {
    type: "primary_column_missing",
    logType: "warn",
    check: function(args, parent) {
      return {
        success: parent.enableColumnVirtualization ? parent.getPrimaryKeyFieldNames().length === 0 : parent.getColumns().filter(function(column) {
          return column.isPrimaryKey;
        }).length === 0
      };
    },
    generateMessage: function() {
      return WARNING + ": PRIMARY KEY MISSING\nEditing is enabled but primary key column is not specified.\n" + ("Refer to " + BASE_DOC_URL + "/api-column.html?#isprimarykey for documentation on providing primary key columns.");
    }
  },
  // eslint-disable-next-line camelcase
  selection_key_missing: {
    type: "selection_key_missing",
    logType: "warn",
    check: function(args, parent) {
      return {
        success: parent.selectionSettings.persistSelection && parent.getColumns().filter(function(column) {
          return column.isPrimaryKey;
        }).length === 0
      };
    },
    generateMessage: function() {
      return WARNING + ": PRIMARY KEY MISSING\nselectionSettings.persistSelection property is enabled. It requires one primary key column to persist selection.\n" + ("Refer to " + BASE_DOC_URL + "/api-column.html?#isprimarykey for documentation on providing primary key columns.");
    }
  },
  actionfailure: {
    type: "actionfailure",
    logType: "error",
    check: function() {
      return {
        success: true
      };
    },
    generateMessage: function(args, parent) {
      var message = "";
      var formatError = formatErrorHandler(args, parent);
      var ajaxError = ajaxErrorHandler(args, parent);
      if (ajaxError !== "") {
        message = ajaxError;
      } else if (formatError !== "") {
        message = formatError;
      } else {
        message = args.error;
      }
      return WARNING + ": " + message;
    }
  },
  // eslint-disable-next-line camelcase
  locale_missing: {
    type: "locale_missing",
    logType: "warn",
    check: function(args, parent) {
      var lObj = DataUtil.getObject("locale." + parent.locale + ".grid", L10n);
      return {
        success: parent.locale !== "en-US" && isNullOrUndefined(lObj)
      };
    },
    generateMessage: function(args, parent) {
      return WARNING + ": LOCALE CONFIG MISSING\n" + ("Locale configuration for '" + parent.locale + "' is not provided.\n") + ("Refer to " + BASE_DOC_URL + "/globalization-and-localization.html?#localization \n             for documentation on setting locale configuration.");
    }
  },
  limitation: {
    type: "limitation",
    logType: "warn",
    check: function(args, parent) {
      var name = args;
      var opt;
      switch (name) {
        case "freeze":
          opt = {
            success: !isUndefined(parent.detailTemplate) || !isUndefined(parent.childGrid),
            options: {
              name: "freeze"
            }
          };
          break;
        case "virtualization":
          opt = {
            success: !isUndefined(parent.detailTemplate) || !isUndefined(parent.childGrid),
            options: {
              name: "virtualization"
            }
          };
          break;
        default:
          opt = {
            success: false
          };
          break;
      }
      return opt;
    },
    generateMessage: function(args, parent, options) {
      var name = options.name;
      var opt;
      switch (name) {
        case "freeze":
          opt = "Frozen rows and columns do not support the following features:\n* Details Template\n* Hierarchy Grid\n";
          break;
        case "virtualization":
          opt = "Virtualization does not support the following features.\n* Details Template.\n* Hierarchy Grid.\n";
          break;
        default:
          opt = "";
          break;
      }
      return WARNING + (": " + name.toUpperCase() + " LIMITATIONS\n") + opt;
    }
  },
  // eslint-disable-next-line camelcase
  check_datasource_columns: {
    type: "check_datasource_columns",
    logType: "warn",
    check: function(args, parent) {
      return {
        success: !(parent.columns.length || parent.dataSource instanceof DataManager || !isNullOrUndefined(parent.dataSource) && parent.dataSource.length)
      };
    },
    generateMessage: function() {
      return WARNING + ": GRID CONFIG MISSING\ndataSource and columns are not provided in the grid. At least one of either must be provided for grid configuration.\n" + ("Refer to " + BASE_DOC_URL + "/columns.html for documentation on configuring the grid data and columns.");
    }
  },
  // eslint-disable-next-line camelcase
  virtual_height: {
    type: "virtual_height",
    logType: "error",
    check: function(args, parent) {
      return {
        success: isNullOrUndefined(parent.height) || parent.height === "auto"
      };
    },
    generateMessage: function() {
      return ERROR + ": GRID HEIGHT MISSING \nheight property is required to use virtualization.\n" + ("Refer to " + BASE_DOC_URL + "/virtual.html for documentation on configuring the virtual grid.");
    }
  },
  // eslint-disable-next-line camelcase
  grid_remote_edit: {
    type: "grid_remote_edit",
    logType: "error",
    check: function(args) {
      return {
        success: Array.isArray(args) || Array.isArray(args.result)
      };
    },
    generateMessage: function() {
      return ERROR + ": RETRUN VALUE MISSING  \nRemote service returns invalid data. \n" + ("Refer to " + BASE_DOC_URL + "/edit.html for documentation on configuring editing with remote data.");
    }
  },
  // eslint-disable-next-line camelcase
  grid_sort_comparer: {
    type: "grid_sort_comparer",
    logType: "warn",
    check: function(args, parent) {
      return {
        success: parent.getDataModule().isRemote()
      };
    },
    generateMessage: function() {
      return WARNING + ": SORT COMPARER NOT WORKING  \nSort comparer will not work with remote data." + ("Refer to " + BASE_DOC_URL + "/sorting/#custom-sort-comparer for documentation on using the sort comparer.");
    }
  },
  // eslint-disable-next-line camelcase
  resize_min_max: {
    type: "resize_min_max",
    logType: "info",
    check: function(args) {
      return {
        success: args.column.minWidth && args.column.minWidth >= args.width || args.column.maxWidth && args.column.maxWidth <= args.width
      };
    },
    generateMessage: function() {
      return INFO + ": RESIZING COLUMN REACHED MIN OR MAX  \nThe column resizing width is at its min or max.";
    }
  },
  // eslint-disable-next-line camelcase
  action_disabled_column: {
    type: "action_disabled_column",
    logType: "info",
    check: function(args) {
      var success = true;
      var fn;
      switch (args.moduleName) {
        case "reorder":
          if (isNullOrUndefined(args.destColumn)) {
            fn = "reordering action is disabled for the " + args.column.headerText + " column";
          } else {
            fn = "reordering action is disabled for the " + (args.column.allowReordering ? args.destColumn.headerText : args.column.headerText) + " column";
          }
          break;
        case "group":
          fn = "grouping action is disabled for the " + args.columnName + " column.";
          break;
        case "filter":
          fn = "filtering action is disabled for the " + args.columnName + " column.";
          break;
        case "sort":
          fn = "sorting action is disabled for the " + args.columnName + " column.";
          break;
      }
      return {
        success,
        options: {
          fn
        }
      };
    },
    generateMessage: function(args, parent, options) {
      return INFO + (": ACTION DISABLED \n " + options.fn);
    }
  },
  // eslint-disable-next-line camelcase
  exporting_begin: {
    type: "exporting_begin",
    logType: "info",
    check: function(args) {
      return {
        success: true,
        options: {
          args
        }
      };
    },
    generateMessage: function(args, parent, options) {
      return INFO + (": EXPORTING INPROGRESS \n Grid " + options.args + "ing is in progress");
    }
  },
  // eslint-disable-next-line camelcase
  exporting_complete: {
    type: "exporting_complete",
    logType: "info",
    check: function(args) {
      return {
        success: true,
        options: {
          args
        }
      };
    },
    generateMessage: function(args, parent, options) {
      return INFO + (": EXPORTING COMPLETED \n Grid " + options.args + "ing is complete");
    }
  },
  // eslint-disable-next-line camelcase
  foreign_key_failure: {
    type: "foreign_key_failure",
    logType: "error",
    check: function() {
      return {
        success: true
      };
    },
    generateMessage: function() {
      return ERROR + ": FOREIGNKEY CONFIG \n  Grid foreign key column needs a valid data source/service." + ("Refer to " + BASE_DOC_URL + "/columns/#foreign-key-column for documentation on configuring foreign key columns.");
    }
  },
  // eslint-disable-next-line camelcase
  initial_action: {
    type: "initial_action",
    logType: "error",
    check: function(args) {
      var success = true;
      var fn;
      switch (args.moduleName) {
        case "group":
          fn = "The " + args.columnName + " column is not available in the grid's column model.Please provide a valid field name to group the column";
          break;
        case "filter":
          fn = "The " + args.columnName + " column is not available in the grid's column model.Please provide a valid field name to filter the column.";
          break;
        case "sort":
          fn = "The " + args.columnName + " column is not available in the grid's column model.Please provide a valid field name to sort the column.";
          break;
      }
      return {
        success,
        options: {
          fn
        }
      };
    },
    generateMessage: function(args, parent, options) {
      return ERROR + (": INITIAL ACTION FAILURE \n " + options.fn);
    }
  },
  // eslint-disable-next-line camelcase
  frozen_rows_columns: {
    type: "frozen_rows_columns",
    logType: "error",
    check: function(args, parent) {
      return {
        success: parent.getColumns().length <= parent.frozenColumns || parent.currentViewData.length && parent.frozenRows >= parent.currentViewData.length
      };
    },
    generateMessage: function(args, parent) {
      return ERROR + (": OUT OF RANGE ERROR-\n " + (parent.getColumns().length <= parent.frozenColumns ? "FROZEN COLUMNS," : "")) + ((parent.frozenRows >= parent.currentViewData.length ? "FROZEN ROWS" : "") + " invalid");
    }
  },
  // eslint-disable-next-line camelcase
  column_type_missing: {
    type: "column_type_missing",
    logType: "error",
    check: function(args) {
      return {
        success: isNullOrUndefined(args.column.type),
        options: args.column.headerText
      };
    },
    generateMessage: function(args, parent, options) {
      return ERROR + (": COLUMN TYPE MISSING-\n  " + options + " column type was invalid or not defined.") + ("Please go through below help link: " + DOC_URL + "/grid/columns/#column-type");
    }
  },
  // eslint-disable-next-line camelcase
  datasource_syntax_mismatch: {
    type: "datasource_syntax_mismatch",
    logType: "warn",
    check: function(args) {
      return {
        success: args.dataState.dataSource && !(args.dataState.dataSource instanceof DataManager || "result" in args.dataState.dataSource || args.dataState.dataSource instanceof Array) && !isNullOrUndefined(args.dataState.dataStateChange)
      };
    },
    generateMessage: function() {
      return WARNING + ": DATASOURCE SYNTAX WARNING\nDataSource should be in the form of {result: Object[], count: number}when dataStateChangeEvent used";
    }
  }
};
var formatErrorHandler = function(args) {
  var error = args.error;
  if (error.indexOf && error.indexOf("Format options") !== 0) {
    return "";
  }
  return "INVALID FORMAT\nFor more information, refer to the following documentation links:\n" + ("Number format: " + DOC_URL + "/common/internationalization#supported-format-string\n") + ("Date format: " + DOC_URL + "/common/internationalization#manipulating-datetime\n") + ("Message: " + error);
};
var ajaxErrorHandler = function(args) {
  var error = DataUtil.getObject("error.error", args);
  if (isNullOrUndefined(error)) {
    return "";
  }
  var jsonResult = "";
  try {
    jsonResult = JSON.parse(error.responseText);
  } catch (_a) {
    jsonResult = "";
  }
  return "XMLHTTPREQUEST FAILED\n" + ("Url: " + error.responseURL + "\n") + ("Status: " + error.status + " - " + error.statusText + "\n") + (jsonResult !== "" ? "Message: " + jsonResult : "");
};

// node_modules/@syncfusion/ej2-grids/src/grid/base/grid.js
var __extends17 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate4 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SortDescriptor = (
  /** @class */
  function(_super) {
    __extends17(SortDescriptor2, _super);
    function SortDescriptor2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property()], SortDescriptor2.prototype, "field", void 0);
    __decorate4([Property()], SortDescriptor2.prototype, "direction", void 0);
    __decorate4([Property(false)], SortDescriptor2.prototype, "isFromGroup", void 0);
    return SortDescriptor2;
  }(ChildProperty)
);
var SortSettings = (
  /** @class */
  function(_super) {
    __extends17(SortSettings2, _super);
    function SortSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Collection([], SortDescriptor)], SortSettings2.prototype, "columns", void 0);
    __decorate4([Property(true)], SortSettings2.prototype, "allowUnsort", void 0);
    return SortSettings2;
  }(ChildProperty)
);
var Predicate2 = (
  /** @class */
  function(_super) {
    __extends17(Predicate3, _super);
    function Predicate3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property()], Predicate3.prototype, "field", void 0);
    __decorate4([Property()], Predicate3.prototype, "operator", void 0);
    __decorate4([Property()], Predicate3.prototype, "value", void 0);
    __decorate4([Property()], Predicate3.prototype, "matchCase", void 0);
    __decorate4([Property(false)], Predicate3.prototype, "ignoreAccent", void 0);
    __decorate4([Property()], Predicate3.prototype, "predicate", void 0);
    __decorate4([Property({})], Predicate3.prototype, "actualFilterValue", void 0);
    __decorate4([Property({})], Predicate3.prototype, "actualOperator", void 0);
    __decorate4([Property()], Predicate3.prototype, "type", void 0);
    __decorate4([Property()], Predicate3.prototype, "ejpredicate", void 0);
    __decorate4([Property()], Predicate3.prototype, "uid", void 0);
    __decorate4([Property()], Predicate3.prototype, "isForeignKey", void 0);
    __decorate4([Property()], Predicate3.prototype, "condition", void 0);
    return Predicate3;
  }(ChildProperty)
);
var InfiniteScrollSettings = (
  /** @class */
  function(_super) {
    __extends17(InfiniteScrollSettings2, _super);
    function InfiniteScrollSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property(false)], InfiniteScrollSettings2.prototype, "enableCache", void 0);
    __decorate4([Property(3)], InfiniteScrollSettings2.prototype, "maxBlocks", void 0);
    __decorate4([Property(3)], InfiniteScrollSettings2.prototype, "initialBlocks", void 0);
    return InfiniteScrollSettings2;
  }(ChildProperty)
);
var FilterSettings = (
  /** @class */
  function(_super) {
    __extends17(FilterSettings2, _super);
    function FilterSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Collection([], Predicate2)], FilterSettings2.prototype, "columns", void 0);
    __decorate4([Property("FilterBar")], FilterSettings2.prototype, "type", void 0);
    __decorate4([Property("OnEnter")], FilterSettings2.prototype, "mode", void 0);
    __decorate4([Property(true)], FilterSettings2.prototype, "showFilterBarStatus", void 0);
    __decorate4([Property(1500)], FilterSettings2.prototype, "immediateModeDelay", void 0);
    __decorate4([Property()], FilterSettings2.prototype, "operators", void 0);
    __decorate4([Property(false)], FilterSettings2.prototype, "ignoreAccent", void 0);
    __decorate4([Property(false)], FilterSettings2.prototype, "enableInfiniteScrolling", void 0);
    __decorate4([Property(50)], FilterSettings2.prototype, "itemsCount", void 0);
    __decorate4([Property("Shimmer")], FilterSettings2.prototype, "loadingIndicator", void 0);
    __decorate4([Property(false)], FilterSettings2.prototype, "enableCaseSensitivity", void 0);
    __decorate4([Property(false)], FilterSettings2.prototype, "showFilterBarOperator", void 0);
    return FilterSettings2;
  }(ChildProperty)
);
var SelectionSettings = (
  /** @class */
  function(_super) {
    __extends17(SelectionSettings3, _super);
    function SelectionSettings3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property("Row")], SelectionSettings3.prototype, "mode", void 0);
    __decorate4([Property("Flow")], SelectionSettings3.prototype, "cellSelectionMode", void 0);
    __decorate4([Property("Single")], SelectionSettings3.prototype, "type", void 0);
    __decorate4([Property(false)], SelectionSettings3.prototype, "checkboxOnly", void 0);
    __decorate4([Property(false)], SelectionSettings3.prototype, "persistSelection", void 0);
    __decorate4([Property("Default")], SelectionSettings3.prototype, "checkboxMode", void 0);
    __decorate4([Property(false)], SelectionSettings3.prototype, "enableSimpleMultiRowSelection", void 0);
    __decorate4([Property(true)], SelectionSettings3.prototype, "enableToggle", void 0);
    __decorate4([Property(false)], SelectionSettings3.prototype, "allowColumnSelection", void 0);
    return SelectionSettings3;
  }(ChildProperty)
);
var SearchSettings = (
  /** @class */
  function(_super) {
    __extends17(SearchSettings2, _super);
    function SearchSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property([])], SearchSettings2.prototype, "fields", void 0);
    __decorate4([Property("")], SearchSettings2.prototype, "key", void 0);
    __decorate4([Property("contains")], SearchSettings2.prototype, "operator", void 0);
    __decorate4([Property(true)], SearchSettings2.prototype, "ignoreCase", void 0);
    __decorate4([Property(false)], SearchSettings2.prototype, "ignoreAccent", void 0);
    return SearchSettings2;
  }(ChildProperty)
);
var RowDropSettings = (
  /** @class */
  function(_super) {
    __extends17(RowDropSettings2, _super);
    function RowDropSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property()], RowDropSettings2.prototype, "targetID", void 0);
    return RowDropSettings2;
  }(ChildProperty)
);
var TextWrapSettings = (
  /** @class */
  function(_super) {
    __extends17(TextWrapSettings2, _super);
    function TextWrapSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property("Both")], TextWrapSettings2.prototype, "wrapMode", void 0);
    return TextWrapSettings2;
  }(ChildProperty)
);
var ResizeSettings = (
  /** @class */
  function(_super) {
    __extends17(ResizeSettings2, _super);
    function ResizeSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property("Normal")], ResizeSettings2.prototype, "mode", void 0);
    return ResizeSettings2;
  }(ChildProperty)
);
var GroupSettings = (
  /** @class */
  function(_super) {
    __extends17(GroupSettings2, _super);
    function GroupSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property(true)], GroupSettings2.prototype, "showDropArea", void 0);
    __decorate4([Property(false)], GroupSettings2.prototype, "allowReordering", void 0);
    __decorate4([Property(false)], GroupSettings2.prototype, "showToggleButton", void 0);
    __decorate4([Property(false)], GroupSettings2.prototype, "showGroupedColumn", void 0);
    __decorate4([Property(true)], GroupSettings2.prototype, "showUngroupButton", void 0);
    __decorate4([Property(false)], GroupSettings2.prototype, "disablePageWiseAggregates", void 0);
    __decorate4([Property([])], GroupSettings2.prototype, "columns", void 0);
    __decorate4([Property()], GroupSettings2.prototype, "captionTemplate", void 0);
    __decorate4([Property(false)], GroupSettings2.prototype, "enableLazyLoading", void 0);
    return GroupSettings2;
  }(ChildProperty)
);
var EditSettings = (
  /** @class */
  function(_super) {
    __extends17(EditSettings2, _super);
    function EditSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property(false)], EditSettings2.prototype, "allowAdding", void 0);
    __decorate4([Property(false)], EditSettings2.prototype, "allowEditing", void 0);
    __decorate4([Property(false)], EditSettings2.prototype, "allowDeleting", void 0);
    __decorate4([Property("Normal")], EditSettings2.prototype, "mode", void 0);
    __decorate4([Property(true)], EditSettings2.prototype, "allowEditOnDblClick", void 0);
    __decorate4([Property(true)], EditSettings2.prototype, "showConfirmDialog", void 0);
    __decorate4([Property(false)], EditSettings2.prototype, "showDeleteConfirmDialog", void 0);
    __decorate4([Property()], EditSettings2.prototype, "template", void 0);
    __decorate4([Property()], EditSettings2.prototype, "headerTemplate", void 0);
    __decorate4([Property()], EditSettings2.prototype, "footerTemplate", void 0);
    __decorate4([Property("Top")], EditSettings2.prototype, "newRowPosition", void 0);
    __decorate4([Property({})], EditSettings2.prototype, "dialog", void 0);
    __decorate4([Property(false)], EditSettings2.prototype, "allowNextRowEdit", void 0);
    __decorate4([Property(false)], EditSettings2.prototype, "showAddNewRow", void 0);
    return EditSettings2;
  }(ChildProperty)
);
var LoadingIndicator = (
  /** @class */
  function(_super) {
    __extends17(LoadingIndicator2, _super);
    function LoadingIndicator2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property("Spinner")], LoadingIndicator2.prototype, "indicatorType", void 0);
    return LoadingIndicator2;
  }(ChildProperty)
);
var Grid = (
  /** @class */
  function(_super) {
    __extends17(Grid2, _super);
    function Grid2(options, element) {
      var _this_1 = _super.call(this, options, element) || this;
      _this_1.isPreventScrollEvent = false;
      _this_1.inViewIndexes = [];
      _this_1.keyA = false;
      _this_1.frozenRightCount = 0;
      _this_1.freezeColumnRefresh = true;
      _this_1.rightcount = 0;
      _this_1.frozenLeftCount = 0;
      _this_1.leftcount = 0;
      _this_1.tablesCount = 1;
      _this_1.movableCount = 0;
      _this_1.movablecount = 0;
      _this_1.fixedcount = 0;
      _this_1.fixedCount = 0;
      _this_1.visibleFrozenLeft = 0;
      _this_1.visibleFrozenFixed = 0;
      _this_1.isPreparedFrozenColumns = false;
      _this_1.visibleFrozenRight = 0;
      _this_1.visibleMovable = 0;
      _this_1.frozenLeftColumns = [];
      _this_1.frozenRightColumns = [];
      _this_1.movableColumns = [];
      _this_1.fixedColumns = [];
      _this_1.stackedLeft = [];
      _this_1.stackedRight = [];
      _this_1.stackedFixed = [];
      _this_1.stackedMovable = [];
      _this_1.stackedarrayLeft = [];
      _this_1.stackedarrayRight = [];
      _this_1.stackedarrayFixed = [];
      _this_1.stackedarrayMovable = [];
      _this_1.media = {};
      _this_1.autoFitColumnsResize = false;
      _this_1.tableIndex = 0;
      _this_1.componentRefresh = Component.prototype.refresh;
      _this_1.isChangeDataSourceCall = false;
      _this_1.mergedColumns = false;
      _this_1.isVirtualAdaptive = false;
      _this_1.requireTemplateRef = true;
      _this_1.vRows = [];
      _this_1.vcRows = [];
      _this_1.vGroupOffsets = {};
      _this_1.rowUid = 0;
      _this_1.translateX = 0;
      _this_1.isManualRefresh = false;
      _this_1.isAutoFitColumns = false;
      _this_1.enableDeepCompare = false;
      _this_1.totalDataRecordsCount = 0;
      _this_1.disableSelectedRecords = [];
      _this_1.partialSelectedRecords = [];
      _this_1.isSpan = false;
      _this_1.islazyloadRequest = false;
      _this_1.isAddNewRow = false;
      _this_1.addNewRowFocus = true;
      _this_1.selectVirtualRowOnAdd = false;
      _this_1.lockcolPositionCount = 0;
      _this_1.prevPageMoving = false;
      _this_1.pageTemplateChange = false;
      _this_1.isAutoGen = false;
      _this_1.isAutoGenerateColumns = false;
      _this_1.pageRequireRefresh = true;
      _this_1.mediaBindInstance = {};
      _this_1.commandDelIndex = void 0;
      _this_1.preventAutoFit = false;
      _this_1.asyncTimeOut = 50;
      _this_1.isExportGrid = false;
      _this_1.isWidgetsDestroyed = false;
      _this_1.enableLogger = false;
      _this_1.needsID = true;
      Grid_1.Inject(Selection);
      setValue("mergePersistData", _this_1.mergePersistGridData, _this_1);
      return _this_1;
    }
    Grid_1 = Grid2;
    Grid2.prototype.getPersistData = function() {
      var keyEntity = ["pageSettings", "sortSettings", "filterSettings", "groupSettings", "columns", "searchSettings", "selectedRowIndex", "scrollPosition"];
      var ignoreOnPersist = {
        pageSettings: ["template", "pageSizes", "enableQueryString", "totalRecordsCount", "pageCount"],
        filterSettings: ["type", "mode", "showFilterBarStatus", "immediateModeDelay", "ignoreAccent"],
        groupSettings: ["showDropArea", "showToggleButton", "showGroupedColumn", "showUngroupButton", "disablePageWiseAggregates", "hideCaptionCount"],
        searchSettings: ["fields", "operator", "ignoreCase"],
        sortSettings: [],
        columns: [],
        selectedRowIndex: [],
        scrollPosition: []
      };
      for (var i = 0; i < keyEntity.length; i++) {
        var currentObject = this[keyEntity[parseInt(i.toString(), 10)]];
        for (var _i = 0, _a = ignoreOnPersist[keyEntity[parseInt(i.toString(), 10)]]; _i < _a.length; _i++) {
          var val = _a[_i];
          delete currentObject["" + val];
        }
      }
      var temp = this.pageSettings.template;
      var settings = Object.assign({
        template: void 0
      }, this.pageSettings);
      if (this.enableVirtualization && this.enablePersistence && this.contentModule && this.contentModule.getPageFromTop && !isNullOrUndefined(this.scrollPosition) && !isNullOrUndefined(this.scrollPosition.top)) {
        settings["properties"]["currentPage"] = this.contentModule.getPageFromTop(this.scrollPosition.top, {
          block: 1
        });
      }
      this.setProperties({
        pageSettings: settings
      }, true);
      var captionTemplateRef = this.groupSettings.captionTemplate;
      var isAngularCaptionTemplate = captionTemplateRef && this.isAngular;
      if (isAngularCaptionTemplate) {
        delete this.groupSettings["properties"]["captionTemplate"];
      }
      this.pageTemplateChange = !isNullOrUndefined(this.pagerTemplate);
      var persistData = this.addOnPersist(keyEntity);
      settings.template = temp;
      this.setProperties({
        pageSettings: settings
      }, true);
      if (isAngularCaptionTemplate) {
        this.groupSettings.captionTemplate = captionTemplateRef;
      }
      return persistData;
    };
    Grid2.prototype.requiredModules = function() {
      this.setFrozenCount();
      this.enableInfiniteAggrgate();
      var modules = [];
      if (this.isDestroyed) {
        return modules;
      }
      if (this.allowFiltering) {
        modules.push({
          member: "filter",
          args: [this, this.filterSettings, this.serviceLocator],
          name: "Filter"
        });
      }
      if (this.allowExcelExport) {
        modules.push({
          member: "ExcelExport",
          args: [this, this.serviceLocator],
          name: "ExcelExport"
        });
      }
      if (this.allowPdfExport) {
        modules.push({
          member: "PdfExport",
          args: [this],
          name: "PdfExport"
        });
      }
      if (this.allowSorting) {
        modules.push({
          member: "sort",
          args: [this, this.sortSettings, this.sortedColumns, this.serviceLocator],
          name: "Sort"
        });
      }
      if (this.allowPaging) {
        modules.push({
          member: "pager",
          args: [this, this.pageSettings],
          name: "Page"
        });
      }
      if (this.allowSelection) {
        modules.push({
          member: "selection",
          args: [this, this.selectionSettings, this.serviceLocator],
          name: "Selection"
        });
      }
      if (this.resizeCheck()) {
        modules.push({
          member: "resize",
          args: [this],
          name: "Resize"
        });
      }
      if (this.allowReordering) {
        modules.push({
          member: "reorder",
          args: [this],
          name: "Reorder"
        });
      }
      if (this.allowRowDragAndDrop) {
        modules.push({
          member: "rowDragAndDrop",
          args: [this],
          name: "RowDD"
        });
      }
      if (this.allowGrouping) {
        modules.push({
          member: "group",
          args: [this, this.groupSettings, this.sortedColumns, this.serviceLocator],
          name: "Group"
        });
      }
      if (this.aggregates.length) {
        modules.push({
          member: "aggregate",
          args: [this, this.serviceLocator],
          name: "Aggregate"
        });
      }
      if (this.isDetail()) {
        modules.push({
          member: "detailRow",
          args: [this, this.serviceLocator],
          name: "DetailRow"
        });
      }
      if (this.toolbar || this.toolbarTemplate) {
        modules.push({
          member: "toolbar",
          args: [this, this.serviceLocator],
          name: "Toolbar"
        });
      }
      if (this.enableVirtualization || this.enableColumnVirtualization) {
        modules.push({
          member: "virtualscroll",
          args: [this, this.serviceLocator],
          name: "VirtualScroll"
        });
      }
      if (this.getFrozenColumns() || this.frozenRows || this.frozenRightCount || this.frozenLeftCount) {
        modules.push({
          member: "freeze",
          args: [this, this.serviceLocator],
          name: "Freeze"
        });
      }
      if (!isNullOrUndefined(this.columns) && this.isCommandColumn(this.columns)) {
        modules.push({
          member: "commandColumn",
          args: [this, this.serviceLocator],
          name: "CommandColumn"
        });
      }
      if (this.editSettings.allowAdding || this.editSettings.allowDeleting || this.editSettings.allowEditing) {
        modules.push({
          member: "edit",
          args: [this, this.serviceLocator],
          name: "Edit"
        });
      }
      this.extendRequiredModules(modules);
      return modules;
    };
    Grid2.prototype.extendRequiredModules = function(modules) {
      if (this.enableInfiniteScrolling) {
        modules.push({
          member: "infiniteScroll",
          args: [this, this.serviceLocator],
          name: "InfiniteScroll"
        });
      }
      if (this.groupSettings.enableLazyLoading) {
        modules.push({
          member: "lazyLoadGroup",
          args: [this, this.serviceLocator],
          name: "LazyLoadGroup"
        });
      }
      if (this.contextMenuItems) {
        modules.push({
          member: "contextMenu",
          args: [this, this.serviceLocator],
          name: "ContextMenu"
        });
      }
      if (this.showColumnMenu) {
        modules.push({
          member: "columnMenu",
          args: [this, this.serviceLocator],
          name: "ColumnMenu"
        });
      }
      if (this.showColumnChooser) {
        modules.push({
          member: "columnChooser",
          args: [this, this.serviceLocator],
          name: "ColumnChooser"
        });
      }
      if (!isNullOrUndefined(this.columns) && this.isForeignKeyEnabled(this.columns)) {
        modules.push({
          member: "foreignKey",
          args: [this, this.serviceLocator],
          name: "ForeignKey"
        });
      }
      if (this.enableLogger) {
        modules.push({
          member: "logger",
          args: [this],
          name: "Logger"
        });
      }
    };
    Grid2.prototype.resizeCheck = function() {
      var autoFitColumns = this.getColumns().filter(function(c) {
        return c.autoFit === true;
      }).length ? true : false;
      if (!isNullOrUndefined(this.columnModel) && this.columnModel.length && !(this.columnModel[0] instanceof Column)) {
        this.columnModel = [];
      }
      var columnMenu = this.showColumnMenu && (!this.columnMenuItems || this.columnMenuItems.filter(function(c) {
        return c === "AutoFit" || c === "AutoFitAll";
      }).length) ? true : false;
      var contextMenu = this.contextMenuItems && this.contextMenuItems.filter(function(c) {
        return c === "AutoFit" || c === "AutoFitAll";
      }).length ? true : false;
      return this.allowResizing || this.autoFitColumnsResize || autoFitColumns || columnMenu || contextMenu;
    };
    Grid2.prototype.preRender = function() {
      this.serviceLocator = new ServiceLocator();
      this.initProperties();
      this.initializeServices();
    };
    Grid2.prototype.initProperties = function() {
      this.isInitial = true;
      this.sortedColumns = [];
      this.inViewIndexes = [];
      this.mediaCol = [];
      this.isInitialLoad = false;
      this.allowServerDataBinding = false;
      this.ignoreCollectionWatch = true;
      this.mergeCells = {};
      this.isEdit = false;
      this.checkAllRows = "None";
      this.isCheckBoxSelection = false;
      this.isPersistSelection = false;
      this.componentRefresh = Component.prototype.refresh;
      this.freezeColumnRefresh = true;
      this.filterOperators = {
        contains: "contains",
        endsWith: "endswith",
        equal: "equal",
        greaterThan: "greaterthan",
        greaterThanOrEqual: "greaterthanorequal",
        lessThan: "lessthan",
        lessThanOrEqual: "lessthanorequal",
        notEqual: "notequal",
        startsWith: "startswith",
        wildCard: "wildcard",
        isNull: "isnull",
        notNull: "notnull",
        like: "like"
      };
      this.defaultLocale = {
        EmptyRecord: "No records to display",
        True: "true",
        False: "false",
        InvalidFilterMessage: "Invalid Filter Data",
        GroupDropArea: "Drag a column header here to group its column",
        UnGroup: "Click here to ungroup",
        UnGroupButton: "Click here to ungroup",
        GroupDisable: "Grouping is disabled for this column",
        FilterbarTitle: "'s filter bar cell",
        EmptyDataSourceError: "DataSource must not be empty at initial load since columns are generated from dataSource in AutoGenerate Column Grid",
        // Toolbar Items
        Add: "Add",
        Edit: "Edit",
        Cancel: "Cancel",
        Update: "Update",
        Delete: "Delete",
        Print: "Print",
        Pdfexport: "PDF Export",
        Excelexport: "Excel Export",
        Wordexport: "Word Export",
        Csvexport: "CSV Export",
        Search: "Search",
        Columnchooser: "Columns",
        Save: "Save",
        Item: "item",
        Items: "items",
        EditOperationAlert: "No records selected for edit operation",
        DeleteOperationAlert: "No records selected for delete operation",
        SaveButton: "Save",
        OKButton: "OK",
        CancelButton: "Cancel",
        EditFormTitle: "Details of ",
        AddFormTitle: "Add New Record",
        BatchSaveConfirm: "Are you sure you want to save changes?",
        BatchSaveLostChanges: "Unsaved changes will be lost. Are you sure you want to continue?",
        ConfirmDelete: "Are you sure you want to Delete Record?",
        CancelEdit: "Are you sure you want to Cancel the changes?",
        ChooseColumns: "Choose Column",
        ColumnMenu: "Column Menu",
        SearchColumns: "search columns",
        Matchs: "No matches found",
        FilterButton: "Filter",
        FilterTitle: "Filter",
        FilterIcon: "Filter",
        ClearButton: "Clear",
        StartsWith: "Starts With",
        NotStartsWith: "Does Not Start With",
        Like: "Like",
        EndsWith: "Ends With",
        NotEndsWith: "Does Not End With",
        Contains: "Contains",
        NotContains: "Does Not Contain",
        IsNull: "Null",
        NotNull: "Not Null",
        IsEmpty: "Empty",
        IsNotEmpty: "Not Empty",
        Equal: "Equal",
        NotEqual: "Not Equal",
        LessThan: "Less Than",
        LessThanOrEqual: "Less Than Or Equal",
        GreaterThan: "Greater Than",
        GreaterThanOrEqual: "Greater Than Or Equal",
        In: "In",
        NotIn: "Not In",
        ChooseDate: "Choose a Date",
        EnterValue: "Enter the value",
        Copy: "Copy",
        Group: "Group by this column",
        Ungroup: "Ungroup by this column",
        GroupButton: "Group button",
        UnGroupAria: "ungroup button",
        GroupSeperator: "Separator for the grouped columns",
        UnGroupIcon: "ungroup the grouped column ",
        GroupedSortIcon: "sort the grouped column ",
        GroupedDrag: "Drag the grouped column",
        GroupCaption: " is groupcaption cell",
        CheckBoxLabel: "checkbox",
        SelectAllCheckbox: "Select all checkbox",
        SelectRow: "Select row",
        autoFitAll: "Autofit all columns",
        autoFit: "Autofit this column",
        AutoFitAll: "Autofit all columns",
        AutoFit: "Autofit this column",
        Export: "Export",
        FirstPage: "First Page",
        LastPage: "Last Page",
        PreviousPage: "Previous Page",
        NextPage: "Next Page",
        SortAscending: "Sort Ascending",
        SortDescending: "Sort Descending",
        EditRecord: "Edit Record",
        DeleteRecord: "Delete Record",
        FilterMenu: "Filter",
        SelectAll: "Select All",
        AddCurrentSelection: "Add current selection to filter",
        Blanks: "Blanks",
        FilterTrue: "True",
        FilterFalse: "False",
        NoResult: "No matches found",
        ClearFilter: "Clear Filter",
        Clear: "Clear",
        NumberFilter: "Number Filters",
        TextFilter: "Text Filters",
        DateFilter: "Date Filters",
        DateTimeFilter: "DateTime Filters",
        MatchCase: "Match Case",
        Between: "Between",
        CustomFilter: "Custom Filter",
        CustomFilterPlaceHolder: "Enter the value",
        CustomFilterDatePlaceHolder: "Choose a date",
        AND: "AND",
        OR: "OR",
        ShowRowsWhere: "Show rows where:",
        ToolbarMenuDialogARIA: "Toolbar menu dialog",
        FilterMenuDialogARIA: "Filter menu",
        ExcelFilterDialogARIA: "Excel filter",
        CheckBoxFilterDialogARIA: "Checkbox filter",
        DialogEditARIA: "Edit dialog",
        ColumnMenuDialogARIA: "Column menu dialog",
        CustomFilterDialogARIA: "Customer filter dialog",
        SortAtoZ: "Sort A to Z",
        SortZtoA: "Sort Z to A",
        SortByOldest: "Sort by Oldest",
        SortByNewest: "Sort by Newest",
        SortSmallestToLargest: "Sort Smallest to Largest",
        SortLargestToSmallest: "Sort Largest to Smallest",
        Sort: "Sort",
        SortIcon: "Sort",
        FilterDescription: "Press Alt Down to open filter Menu",
        SortDescription: "Press Enter to sort",
        ColumnMenuDescription: "Press Alt Down to open Column Menu",
        GroupDescription: "Press Ctrl space to group",
        ColumnHeader: " column header ",
        TemplateCell: " is template cell",
        CommandColumnAria: "is Command column column header ",
        DialogEdit: "Dialog edit",
        ClipBoard: "clipboard",
        AscendingText: "Ascending",
        DescendingText: "Descending",
        NoneText: "None",
        Expanded: "Expanded",
        Collapsed: "Collapsed"
      };
      this.keyConfigs = {
        downArrow: "downarrow",
        upArrow: "uparrow",
        rightArrow: "rightarrow",
        leftArrow: "leftarrow",
        shiftDown: "shift+downarrow",
        shiftUp: "shift+uparrow",
        shiftRight: "shift+rightarrow",
        shiftLeft: "shift+leftarrow",
        home: "home",
        end: "end",
        escape: "escape",
        ctrlHome: "ctrl+home",
        ctrlEnd: "ctrl+end",
        pageUp: "pageup",
        pageDown: "pagedown",
        ctrlAltPageUp: "ctrl+alt+pageup",
        ctrlAltPageDown: "ctrl+alt+pagedown",
        altPageUp: "alt+pageup",
        altPageDown: "alt+pagedown",
        altDownArrow: "alt+downarrow",
        altUpArrow: "alt+uparrow",
        ctrlDownArrow: "ctrl+downarrow",
        ctrlUpArrow: "ctrl+uparrow",
        ctrlPlusA: "ctrl+A",
        ctrlPlusP: "ctrl+P",
        insert: "insert",
        delete: "delete",
        f2: "f2",
        enter: "enter",
        ctrlEnter: "ctrl+enter",
        shiftEnter: "shift+enter",
        tab: "tab",
        shiftTab: "shift+tab",
        space: "space",
        ctrlPlusC: "ctrl+C",
        ctrlShiftPlusH: "ctrl+shift+H",
        ctrlSpace: "ctrl+space",
        ctrlLeftArrow: "ctrl+leftarrow",
        ctrlRightArrow: "ctrl+rightarrow"
      };
    };
    Grid2.prototype.render = function() {
      this.log(["module_missing", "promise_enabled", "locale_missing", "check_datasource_columns"]);
      this.ariaService.setOptions(this.element, {
        role: "grid"
      });
      createSpinner({
        target: this.element,
        cssClass: this.cssClass ? this.cssClass : null
      }, this.createElement);
      this.renderModule = new Render(this, this.serviceLocator);
      this.searchModule = new Search(this);
      this.scrollModule = new Scroll(this);
      this.notify(initialLoad, {});
      if (this.pageSettings.enableQueryString) {
        var pageValue = new URL(window.location.href).searchParams.get("page");
        if (!isNullOrUndefined(pageValue) && window.location.href.indexOf("?page=") > 0) {
          var currentPageValue = parseInt(pageValue, 10);
          this.setProperties({
            pageSettings: {
              currentPage: currentPageValue
            }
          }, true);
          this.pageSettings.currentPage = currentPageValue;
        }
      }
      if ((this.getDataModule().dataManager.dataSource.offline === true || this.getDataModule().dataManager.dataSource.url === void 0) && !(!isNullOrUndefined(this.dataSource) && this.dataSource.result)) {
        this.isVirtualAdaptive = true;
      }
      if (this.aggregateModule && this.aggregates.length) {
        for (var i = 0; i < this.aggregates.length; i++) {
          for (var j = 0; j < this.aggregates[parseInt(i.toString(), 10)].columns.length; j++) {
            var column = this.aggregates[parseInt(i.toString(), 10)].columns[parseInt(j.toString(), 10)];
            if (column["types"]) {
              column.type = column["types"];
            }
          }
        }
      }
      if (this.isReact) {
        var args = {
          requireTemplateRef: this.requireTemplateRef
        };
        this.trigger(load, args);
        if (!args.requireTemplateRef) {
          this.requireTemplateRef = args.requireTemplateRef;
        }
      } else {
        this.trigger(load);
      }
      prepareColumns(this.columns, this.enableColumnVirtualization, this);
      if (this.enableColumnVirtualization && this.isChangeDataSourceCall && this.columnModel) {
        this.columnModel = [];
        this.updateColumnModel(this.columns);
      }
      this.isPreparedFrozenColumns = true;
      if (this.enablePersistence) {
        this.notify(columnsPrepared, {});
      }
      this.getMediaColumns();
      setColumnIndex(this.columns);
      if (this.isFrozenGrid() && !this.mergedColumns) {
        this.setInitialFrozenColumnIndex(this.columns);
      }
      this.checkLockColumns(this.columns);
      this.getColumns();
      this.processModel();
      this.gridRender();
      this.wireEvents();
      this.addListener();
      this.updateDefaultCursor();
      this.updateStackedFilter();
      if (this.loadingIndicator.indicatorType === "Spinner") {
        this.showSpinner();
      }
      this.notify(initialEnd, {});
      if (this.loadingIndicator.indicatorType === "Shimmer") {
        this.refreshMaskRow();
      }
      if (this.refreshing) {
        this.trigger("created");
      }
    };
    Grid2.prototype.setInitialFrozenColumnIndex = function(columns) {
      for (var i = 0; i < columns.length; i++) {
        var column = columns[parseInt(i.toString(), 10)];
        column["" + initialFrozenColumnIndex] = column.index;
        if (column.columns) {
          this.setInitialFrozenColumnIndex(column.columns);
        }
      }
    };
    Grid2.prototype.showSpinner = function() {
      if (!this.isExportGrid) {
        showSpinner(this.element);
      }
    };
    Grid2.prototype.hideSpinner = function() {
      if (!this.isExportGrid) {
        hideSpinner(this.element);
      }
    };
    Grid2.prototype.showMaskRow = function(axisDirection, dialogElement) {
      if (isNullOrUndefined(this.headerModule) || isNullOrUndefined(this.contentModule)) {
        return;
      }
      var gridHeader2 = this.getHeaderContent().firstChild;
      var gridContent2 = this.getContent().firstChild;
      var gridFooter2 = this.getFooterContent();
      if (dialogElement) {
        var dialogHolder = dialogElement.querySelector(".e-checkboxlist");
        var maskRowCount = Math.floor(dialogHolder.getBoundingClientRect().height / this.getRowHeight());
        var maskTemplate = '<div class="e-ftrchk e-mask-ftrchk"><div class="e-checkbox-wrapper"><input class="e-chk-hidden">' + this.getShimmerTemplate() + this.getShimmerTemplate() + "</div></div>";
        dialogHolder.innerHTML = "";
        for (var i = 0; i < maskRowCount; i++) {
          dialogHolder.innerHTML += maskTemplate;
          dialogHolder.querySelector(".e-ftrchk.e-mask-ftrchk").style.width = "100%";
          dialogHolder.querySelector(".e-checkbox-wrapper").style.width = "100%";
          var maskSpan = [].slice.call(dialogHolder.querySelectorAll(".e-mask:not(.e-mask-checkbox-filter-intent):not(.e-mask-checkbox-filter-span-intent)"));
          maskSpan[0].classList.add("e-mask-checkbox-filter-intent");
          maskSpan[1].classList.add("e-mask-checkbox-filter-span-intent");
        }
        return;
      }
      if (!this.enableRtl && !this.getHeaderContent().style.paddingRight || this.enableRtl && !this.getHeaderContent().style.paddingLeft) {
        gridContent2.style.overflowY = "hidden";
      }
      if (!this.isInitialLoad && !this.getColumns().length) {
        var contentHeight = gridContent2.getBoundingClientRect().height;
        var maskTableHeight = contentHeight === 0 ? this.allowPaging ? this.pageSettings.pageSize * this.getRowHeight() : window.innerHeight : contentHeight;
        var contentRowCount = Math.ceil(maskTableHeight / this.getRowHeight());
        if (this.rowRenderingMode !== "Vertical") {
          this.headerMaskTable = this.createEmptyMaskTable(gridHeader2, 1);
        }
        this.contentMaskTable = this.createEmptyMaskTable(gridContent2, contentRowCount);
        return;
      }
      this.maskRowContentScroll = (this.enableVirtualization || this.enableColumnVirtualization) && axisDirection ? true : false;
      if (!this.contentMaskTable) {
        var content2 = gridContent2;
        if (this.enableVirtualization || this.enableColumnVirtualization) {
          content2 = content2.querySelector(".e-virtualtable");
        }
        if (!isNullOrUndefined(content2.querySelector("tbody"))) {
          this.contentMaskTable = this.createMaskTable(content2, this.getContentMaskColumns(), axisDirection);
        }
      }
      if (!this.headerMaskTable && (this.isFrozenGrid() || this.enableColumnVirtualization && axisDirection === "X")) {
        var content2 = gridHeader2;
        if (this.enableColumnVirtualization && axisDirection === "X") {
          content2 = content2.querySelector(".e-virtualtable");
        }
        this.headerMaskTable = this.createMaskTable(content2, this.getContentMaskColumns(), axisDirection);
      }
      if (gridFooter2 && gridFooter2.querySelector(".e-summaryrow")) {
        var gridFooterContent = gridFooter2.firstChild;
        if (!this.footerContentMaskTable) {
          var footerContent = gridFooterContent;
          this.footerContentMaskTable = this.createMaskTable(footerContent);
        }
      }
      if (!(this.enableVirtualization && axisDirection)) {
        EventHandler.add(gridContent2, "scroll", this.translateMaskRow, this);
      }
    };
    Grid2.prototype.getContentMaskColumns = function() {
      return this.getColumns();
    };
    Grid2.prototype.createEmptyMaskTable = function(maskElement, rowCount) {
      var table2 = this.createElement("table", {
        className: "e-table e-masked-table"
      });
      var tbody2 = this.createElement("tbody", {
        className: "e-masked-tbody"
      });
      var row2 = this.createElement("tr", {
        className: "e-masked-row e-row"
      });
      row2.style.height = this.getRowHeight() + "px";
      var cell = this.createElement("td", {
        className: "e-masked-cell e-rowcell"
      });
      cell.innerHTML = this.getShimmerTemplate();
      row2.appendChild(cell);
      for (var i = 0; i < rowCount; i++) {
        tbody2.appendChild(row2.cloneNode(true));
      }
      table2.appendChild(tbody2);
      maskElement.appendChild(table2);
      return table2;
    };
    Grid2.prototype.createMaskTable = function(element, columns, axisDirection) {
      var parentElement = element;
      var header = closest(parentElement, ".e-gridheader") ? true : false;
      var content2 = closest(parentElement, ".e-gridcontent") ? true : false;
      var footer = closest(parentElement, ".e-gridfooter") ? true : false;
      var gridContent2 = this.getContent().firstChild;
      var gridContentScrollHeight = gridContent2.scrollHeight;
      var table2 = parentElement.querySelector("table");
      var maskTable = table2.cloneNode();
      maskTable.removeAttribute("role");
      maskTable.removeAttribute("id");
      updateCSSText(maskTable, "position: absolute; z-index: 5; width: " + table2.getBoundingClientRect().width + "px;");
      if (header && !(this.enableColumnVirtualization && axisDirection === "X")) {
        maskTable.style.transform = "translate(0px," + table2.querySelector("thead").getBoundingClientRect().height + "px)";
      }
      maskTable.setAttribute("class", "e-table e-masked-table");
      var maskColgroup = table2.querySelector("colgroup").cloneNode(true);
      maskColgroup.removeAttribute("id");
      maskColgroup.setAttribute("class", "e-masked-colgroup");
      maskTable.appendChild(maskColgroup);
      if (header && this.enableColumnVirtualization && axisDirection === "X") {
        var row2 = this.createMaskRow(maskColgroup, columns);
        if (this.isFrozenGrid()) {
          var frzTd = [].slice.call(row2.querySelectorAll(".e-rowcell"));
          for (var i = 0; i < frzTd.length; i++) {
            if (i < this.frozenLeftCount) {
              if (this.frozenLeftCount - 1 === i) {
                frzTd[parseInt(i.toString(), 10)].classList.add("e-freezeleftborder");
              }
              frzTd[parseInt(i.toString(), 10)].classList.add("e-leftfreeze");
              frzTd[parseInt(i.toString(), 10)].setAttribute("aria-colindex", (i + 1).toString());
              frzTd[parseInt(i.toString(), 10)].style.left = columns[parseInt(i.toString(), 10)].valueX - this.translateX + "px";
            } else if (frzTd.length - this.frozenRightCount <= i && columns[parseInt(i.toString(), 10)]) {
              if (frzTd.length - this.frozenRightCount === i) {
                frzTd[parseInt(i.toString(), 10)].classList.add("e-freezerightborder");
              }
              frzTd[parseInt(i.toString(), 10)].classList.add("e-rightfreeze");
              frzTd[parseInt(i.toString(), 10)].setAttribute("aria-colindex", (i + 1).toString());
              frzTd[parseInt(i.toString(), 10)].style.right = this.translateX + columns[parseInt(i.toString(), 10)].valueX + "px";
            }
          }
        }
        var thead = table2.querySelector("thead");
        var rows = [].slice.call(thead.querySelectorAll("tr"));
        var maskTHead = thead.cloneNode();
        maskTHead.removeAttribute("role");
        maskTHead.setAttribute("class", "e-masked-thead");
        var rowCount = rows.length;
        for (var i = 0; i < rowCount; i++) {
          maskTHead.appendChild(row2.cloneNode(true));
          maskTHead.childNodes[parseInt(i.toString(), 10)].style.height = rows[parseInt(i.toString(), 10)].getBoundingClientRect().height + "px";
        }
        maskTable.appendChild(maskTHead);
      }
      var maskTBody = table2.querySelector("tbody").cloneNode();
      maskTBody.removeAttribute("role");
      maskTBody.setAttribute("class", "e-masked-tbody");
      var tbody2 = table2.querySelector("tbody");
      if (content2 || header) {
        var rowCountElement = gridContent2;
        var rowCount = Math.ceil(rowCountElement.getBoundingClientRect().height / this.getRowHeight());
        if (this.allowPaging && this.pageSettings.pageSize !== this.currentViewData.length && this.pagerModule.pagerObj.totalPages !== this.pageSettings.currentPage) {
          var row2 = this.createMaskRow(maskColgroup, columns);
          var altRow = row2.cloneNode(true);
          altRow.classList.add("e-altrow");
          for (var i = 0; i < this.pageSettings.pageSize - this.currentViewData.length; i++) {
            maskTBody.appendChild(i % 2 === 1 ? altRow.cloneNode(true) : row2.cloneNode(true));
          }
        }
        if (tbody2.querySelector(".e-emptyrow") || !tbody2.childNodes.length || content2 && this.childGrid) {
          var row2 = this.createMaskRow(maskColgroup, columns);
          var altRow = row2.cloneNode(true);
          altRow.classList.add("e-altrow");
          for (var i = 0; i < rowCount; i++) {
            var altNumber = 1;
            maskTBody.appendChild((i + altNumber) % 2 === 0 ? altRow.cloneNode(true) : row2.cloneNode(true));
          }
        } else {
          var rowsQuery = 'tr:not(.e-hide):not([style*="display:none"]):not([style*="display: none"])';
          var rows = [].slice.call(tbody2.querySelectorAll(rowsQuery));
          var addEditRow = tbody2.querySelector(".e-addedrow, .e-editedrow");
          var addEditRowIndex = void 0;
          if (addEditRow) {
            addEditRowIndex = rows.indexOf(addEditRow);
            if (this.isFrozenGrid() && this.enableColumnVirtualization) {
              var frzTd = [].slice.call(rows[addEditRowIndex + 1].querySelectorAll(".e-rowcell"));
              for (var i = 0; i < frzTd.length; i++) {
                if (i < this.frozenLeftCount) {
                  frzTd[parseInt(i.toString(), 10)].classList.add("e-leftfreeze");
                  frzTd[parseInt(i.toString(), 10)].setAttribute("aria-colindex", (i + 1).toString());
                  frzTd[parseInt(i.toString(), 10)].style.left = columns[parseInt(i.toString(), 10)].valueX - this.translateX + "px";
                } else if (frzTd.length - this.frozenRightCount <= i && columns[parseInt(i.toString(), 10)]) {
                  frzTd[parseInt(i.toString(), 10)].classList.add("e-rightfreeze");
                  frzTd[parseInt(i.toString(), 10)].setAttribute("aria-colindex", (i + 1).toString());
                  frzTd[parseInt(i.toString(), 10)].style.right = this.translateX + columns[parseInt(i.toString(), 10)].valueX + "px";
                }
              }
            }
            if (addEditRow.classList.contains("e-addedrow")) {
              rows.splice(addEditRowIndex, 2);
            } else {
              rows.splice(addEditRowIndex, 1);
            }
          }
          rowCount = (this.enableVirtualization || this.enableColumnVirtualization) && axisDirection ? rows.length : rowCount <= rows.length ? rowCount : rows.length;
          for (var i = 0; i < rowCount; i++) {
            maskTBody.appendChild(this.applyMaskRow(rows[parseInt(i.toString(), 10)].cloneNode(true), rows[parseInt(i.toString(), 10)].getBoundingClientRect().height));
          }
          if (addEditRow && addEditRow.classList.contains("e-editedrow") && addEditRowIndex < rowCount) {
            var addEditMaskRow = maskTBody.childNodes[parseInt(addEditRowIndex.toString(), 10)];
            addEditMaskRow.style.height = this.getRowHeight() + "px";
            addEditMaskRow.classList.add("e-row");
            if (addEditRow.classList.contains("e-altrow")) {
              addEditMaskRow.classList.add("e-altrow");
            }
          }
        }
      }
      maskTable.appendChild(maskTBody);
      if (footer) {
        var tfoot = table2.querySelector("tfoot");
        var maskTFoot = tfoot.cloneNode();
        maskTFoot.setAttribute("class", "e-masked-tfoot");
        var rows = [].slice.call(tfoot.querySelectorAll("tr"));
        for (var i = 0; i < rows.length; i++) {
          maskTFoot.appendChild(this.applyMaskRow(rows[parseInt(i.toString(), 10)].cloneNode(true), rows[parseInt(i.toString(), 10)].getBoundingClientRect().height));
        }
        maskTable.appendChild(maskTFoot);
      }
      if (header && this.isFrozenGrid() && !this.enableColumnVirtualization) {
        this.getHeaderContent().querySelector("." + headerContent).style.position = "relative";
      }
      parentElement.insertBefore(maskTable, parentElement.firstChild);
      if (content2 && !(this.enableVirtualization && axisDirection)) {
        var minScrollTop = gridContentScrollHeight - maskTable.getBoundingClientRect().height;
        minScrollTop = minScrollTop < 0 ? 0 : minScrollTop;
        var scrollTop = gridContent2.scrollTop <= minScrollTop ? gridContent2.scrollTop : minScrollTop;
        if (this.enableVirtualization) {
          scrollTop -= getTransformValues(closest(parentElement, ".e-virtualtable")).height;
        }
        maskTable.style.transform = "translate(0px," + scrollTop + "px)";
      }
      return maskTable;
    };
    Grid2.prototype.applyMaskRow = function(row2, rowHeight2) {
      var maskRow = row2;
      maskRow.removeAttribute("role");
      maskRow.removeAttribute("aria-rowindex");
      maskRow.removeAttribute("data-uid");
      maskRow.classList.add("e-masked-row");
      maskRow.style.height = rowHeight2 + "px";
      var maskCells = [].slice.call(maskRow.childNodes);
      for (var i = 0; i < maskCells.length; i++) {
        var maskCell = maskCells[parseInt(i.toString(), 10)];
        var displayAsCheckBoxCell = maskCell.firstChild && maskCell.firstChild.classList && maskCell.firstChild.classList.contains("e-checkbox-wrapper");
        maskCell.removeAttribute("role");
        maskCell.removeAttribute("tabindex");
        maskCell.removeAttribute("aria-label");
        if (this.enableColumnVirtualization && maskCell.classList.contains("e-fixedfreeze")) {
          removeClass([maskCell], ["e-fixedfreeze", "e-freezeleftborder", "e-freezerightborder"]);
          addClass([maskCell], ["e-unfreeze"]);
        }
        maskCell.removeAttribute("aria-colindex");
        maskCell.removeAttribute("index");
        maskCell.removeAttribute("ej-mappingname");
        maskCell.removeAttribute("ej-mappingvalue");
        maskCell.removeAttribute("e-mappinguid");
        maskCell.removeAttribute("aria-expanded");
        maskCell.classList.add("e-masked-cell");
        maskCell.innerHTML = this.getShimmerTemplate();
        if (maskCell.classList.contains("e-recordplusexpand") || maskCell.classList.contains("e-recordpluscollapse")) {
          maskCell.firstChild.classList.add("e-mask-group-intent");
        } else if (maskCell.classList.contains("e-gridchkbox") || displayAsCheckBoxCell) {
          maskCell.firstChild.classList.add("e-mask-checkbox-intent");
        } else if (maskCell.classList.contains("e-rowdragdrop")) {
          maskCell.firstChild.classList.add("e-mask-drag-intent");
        } else if (maskCell.classList.contains("e-indentcell")) {
          maskCell.innerHTML = "";
        }
      }
      return maskRow;
    };
    Grid2.prototype.createMaskRow = function(refColgroup, refColumns) {
      var colgroup = refColgroup;
      var columns = refColumns;
      var row2 = this.createElement("tr", {
        className: "e-masked-row e-row"
      });
      if (this.rowRenderingMode !== "Vertical") {
        row2.style.height = this.getRowHeight() + "px";
      }
      var td = this.createElement("td", {
        className: "e-masked-cell e-rowcell"
      });
      for (var i = 0, colIndex = 0; i < colgroup.childNodes.length; i++) {
        var col = colgroup.childNodes[parseInt(i.toString(), 10)];
        var localTD = td.cloneNode();
        localTD.innerHTML = this.getShimmerTemplate();
        if (!(col.classList.contains("e-group-intent") || col.classList.contains("e-detail-intent") || col.classList.contains("e-drag-intent"))) {
          if (this.rowRenderingMode === "Vertical" && columns[parseInt(colIndex.toString(), 10)]) {
            localTD.setAttribute("data-cell", columns[parseInt(colIndex.toString(), 10)].headerText ? columns[parseInt(colIndex.toString(), 10)].headerText : columns[parseInt(colIndex.toString(), 10)].field);
          }
          if (col.style.display === "none") {
            localTD.classList.add("e-hide");
          } else {
            localTD.style.textAlign = columns[parseInt(colIndex.toString(), 10)] && columns[parseInt(colIndex.toString(), 10)].textAlign ? columns[parseInt(colIndex.toString(), 10)].textAlign.toLowerCase() : this.enableRtl ? "right" : "left";
            if (columns[parseInt(colIndex.toString(), 10)] && (columns[parseInt(colIndex.toString(), 10)].type === "checkbox" || columns[parseInt(colIndex.toString(), 10)].displayAsCheckBox)) {
              localTD.firstChild.classList.add("e-mask-checkbox-intent");
            }
          }
          colIndex++;
        } else {
          if (col.classList.contains("e-group-intent")) {
            localTD.firstChild.classList.add("e-mask-group-intent");
          } else if (col.classList.contains("e-detail-intent")) {
            localTD.firstChild.classList.add("e-mask-detail-intent");
          } else if (col.classList.contains("e-drag-intent")) {
            localTD.firstChild.classList.add("e-mask-drag-intent");
          }
        }
        row2.appendChild(localTD);
      }
      return row2;
    };
    Grid2.prototype.getShimmerTemplate = function() {
      if (this.maskRowContentScroll) {
        return '<span class="e-mask e-skeleton e-skeleton-text"></span>';
      }
      return '<span class="e-mask e-skeleton e-skeleton-text e-shimmer-wave"></span>';
    };
    Grid2.prototype.addShimmerEffect = function() {
      this.maskRowContentScroll = false;
      var maskSpan = [].slice.call(this.element.querySelectorAll(".e-mask:not(.e-shimmer-wave)"));
      for (var i = 0; i < maskSpan.length; i++) {
        if (maskSpan[parseInt(i.toString(), 10)]) {
          maskSpan[parseInt(i.toString(), 10)].classList.add("e-shimmer-wave");
        }
      }
    };
    Grid2.prototype.translateMaskRow = function(e) {
      var target = e.target;
      var maskTables = target.querySelectorAll(".e-masked-table");
      for (var i = 0; i < maskTables.length; i++) {
        var maskTable = maskTables[parseInt(i.toString(), 10)];
        if (maskTable) {
          var minScrollTop = target.scrollHeight - maskTable.getBoundingClientRect().height;
          minScrollTop = minScrollTop < 0 ? 0 : minScrollTop;
          var scrollTop = target.scrollTop <= minScrollTop ? target.scrollTop : minScrollTop;
          if (this.enableVirtualization) {
            scrollTop -= getTransformValues(closest(maskTable, ".e-virtualtable")).height;
          }
          maskTable.style.transform = "translate(0px," + scrollTop + "px)";
        }
      }
    };
    Grid2.prototype.removeMaskRow = function() {
      if (!isNullOrUndefined(this.contentModule)) {
        var gridContent2 = this.getContent().firstChild;
        EventHandler.remove(gridContent2, "scroll", this.translateMaskRow);
      }
      if (this.headerMaskTable && this.isFrozenGrid() && !this.enableColumnVirtualization) {
        this.getHeaderContent().querySelector("." + headerContent).style.position = "";
      }
      var maskTables = [this.headerMaskTable, this.contentMaskTable, this.footerContentMaskTable];
      for (var i = 0; i < maskTables.length; i++) {
        var maskTable = maskTables[parseInt(i.toString(), 10)];
        if (maskTable) {
          remove(maskTable);
        }
      }
      this.headerMaskTable = null;
      this.contentMaskTable = null;
      this.footerContentMaskTable = null;
    };
    Grid2.prototype.refreshMaskRow = function() {
      var gridContent2 = this.getContent().firstChild;
      if (!this.isInitialLoad && !this.getColumns().length) {
        return;
      }
      if (this.contentMaskTable && gridContent2.querySelector(".e-masked-table")) {
        var content2 = gridContent2;
        if (this.enableVirtualization) {
          content2 = content2.querySelector(".e-virtualtable");
        }
        this.refreshMaskRowColgroupWidth(content2);
      }
    };
    Grid2.prototype.refreshMaskRowColgroupWidth = function(content2) {
      var table2 = content2.querySelector("table:not(.e-masked-table)");
      var colgroup = table2.querySelector(colGroup).cloneNode(true);
      var maskTable = content2.querySelector(".e-masked-table");
      colgroup.removeAttribute("id");
      colgroup.setAttribute("class", "e-masked-colgroup");
      for (var i = 0; i < colgroup.childNodes.length; i++) {
        colgroup.childNodes[parseInt(i.toString(), 10)].removeAttribute("class");
      }
      remove(maskTable.querySelector(".e-masked-colgroup"));
      maskTable.insertBefore(colgroup, maskTable.firstChild);
      maskTable.style.width = table2.getBoundingClientRect().width + "px";
    };
    Grid2.prototype.updateStackedFilter = function() {
      if (this.allowFiltering && this.filterSettings.type === "FilterBar" && this.getHeaderContent().getElementsByClassName("e-stackedheadercell").length) {
        this.getHeaderContent().classList.add("e-stackedfilter");
      } else {
        this.getHeaderContent().classList.remove("e-stackedfilter");
      }
    };
    Grid2.prototype.getMediaColumns = function() {
      if (!this.enableColumnVirtualization) {
        var gcol = this.getColumns();
        this.getShowHideService = this.serviceLocator.getService("showHideService");
        if (!isNullOrUndefined(gcol)) {
          for (var index = 0; index < gcol.length; index++) {
            if (!isNullOrUndefined(gcol[parseInt(index.toString(), 10)].hideAtMedia) && (isNullOrUndefined(gcol[parseInt(index.toString(), 10)].visible) || gcol[parseInt(index.toString(), 10)].visible)) {
              this.pushMediaColumn(gcol[parseInt(index.toString(), 10)], index);
            }
          }
        }
      }
      this.updateFrozenColumnsWidth();
    };
    Grid2.prototype.pushMediaColumn = function(col, index) {
      this.mediaCol.push(col);
      this.media[col.uid] = window.matchMedia(col.hideAtMedia);
      this.mediaQueryUpdate(index, this.media[col.uid]);
      this.mediaBindInstance[parseInt(index.toString(), 10)] = this.mediaQueryUpdate.bind(this, index);
      this.media[col.uid].addListener(this.mediaBindInstance[parseInt(index.toString(), 10)]);
    };
    Grid2.prototype.updateMediaColumns = function(col) {
      if (!this.enableColumnVirtualization) {
        var index = this.getColumnIndexByUid(col.uid);
        for (var i = 0; i < this.mediaCol.length; i++) {
          if (col.uid === this.mediaCol[parseInt(i.toString(), 10)].uid) {
            this.mediaCol.splice(i, 1);
            return;
          }
        }
        this.pushMediaColumn(col, index);
      }
    };
    Grid2.prototype.mediaQueryUpdate = function(columnIndex, e) {
      var col = this.getColumns()[parseInt(columnIndex.toString(), 10)];
      if (this.mediaCol.some(function(mediaColumn) {
        return mediaColumn.uid === col.uid;
      })) {
        col.visible = e.matches;
        if (this.isInitialLoad) {
          this.invokedFromMedia = true;
          if (col.visible) {
            this.showHider.show(col.headerText, "headerText");
          } else {
            this.showHider.hide(col.headerText, "headerText");
          }
        }
      }
    };
    Grid2.prototype.refreshMediaCol = function() {
      this.isInitialLoad = true;
      var footerContent = this.element.querySelector("." + gridFooter);
      if (this.aggregates.length && this.element.scrollHeight > parseInt(this.height.toString(), 10) && footerContent) {
        addClass([footerContent], ["e-footerpadding"]);
      }
      var checkboxColumn = this.getColumns().filter(function(col) {
        return col.type === "checkbox";
      });
      if (checkboxColumn.length === 0 || checkboxColumn.length && this.selectionSettings.checkboxMode === "ResetOnRowClick") {
        this.isCheckBoxSelection = false;
      }
      if (this.rowRenderingMode === "Vertical") {
        if (this.enableHover) {
          this.setProperties({
            enableAdaptiveUI: true,
            enableHover: false
          }, true);
          removeClass([this.element], "e-gridhover");
        }
      }
      if (this.enableAdaptiveUI && this.scrollModule) {
        this.scrollModule.refresh();
      }
      if (this.isFrozenGrid() && this.isAutoGenerateColumns) {
        this.widthService.setWidthToColumns();
        this.isAutoGenerateColumns = false;
      }
    };
    Grid2.prototype.removeMediaListener = function() {
      for (var i = 0; i < this.mediaCol.length; i++) {
        this.media[this.mediaCol[parseInt(i.toString(), 10)].uid].removeListener(this.mediaBindInstance[this.mediaCol[parseInt(i.toString(), 10)].index]);
      }
    };
    Grid2.prototype.eventInitializer = function() {
    };
    Grid2.prototype.destroy = function() {
      var gridElement = this.element;
      if (!gridElement) {
        return;
      }
      var hasGridChild = gridElement.querySelector("." + gridHeader) && gridElement.querySelector("." + gridContent) ? true : false;
      if (hasGridChild) {
        this.unwireEvents();
      }
      this.removeListener();
      this.removeMediaListener();
      this.notify(destroy, {});
      this.destroyDependentModules();
      if (this.isReact) {
        this.destroyTemplate(["template"]);
      }
      if (this.isVue) {
        this.destroyTemplate();
      }
      if (hasGridChild) {
        _super.prototype.destroy.call(this);
      }
      this.toolTipObj.destroy();
      if (this.isReact && !Browser.isIE) {
        this.element.innerHTML = "";
      }
      var modules = ["renderModule", "headerModule", "contentModule", "valueFormatterService", "serviceLocator", "ariaService", "keyboardModule", "widthService", "searchModule", "showHider", "scrollModule", "printModule", "clipboardModule", "focusModule"];
      for (var i = 0; i < modules.length; i++) {
        if (this[modules[parseInt(i.toString(), 10)]]) {
          this[modules[parseInt(i.toString(), 10)]] = null;
        }
      }
      this.element.innerHTML = "";
      classList(this.element, [], ["e-rtl", "e-gridhover", "e-responsive", "e-default", "e-device", "e-grid-min-height"]);
    };
    Grid2.prototype.destroyDependentModules = function() {
      var gridElement = this.element;
      if (!gridElement || !gridElement.querySelector("." + gridHeader) && !gridElement.querySelector("." + gridContent)) {
        return;
      }
      this.scrollModule.destroy();
      this.keyboardModule.destroy();
      this.focusModule.destroy();
      this.clipboardModule.destroy();
      this.printModule.destroy();
    };
    Grid2.prototype.getModuleName = function() {
      return "grid";
    };
    Grid2.prototype.enableBoxSelection = function() {
      if (this.enableAutoFill) {
        this.selectionSettings.cellSelectionMode = "BoxWithBorder";
        this.element.classList.add("e-afenabled");
      } else {
        this.element.classList.remove("e-afenabled");
        this.notify(destroyAutoFillElements, {});
      }
    };
    Grid2.prototype.setCSSClass = function(oldCSSClass) {
      if (this.cssClass) {
        addClass([this.element], this.cssClass.split(" "));
      }
      if (oldCSSClass) {
        removeClass([this.element], oldCSSClass.split(" "));
      }
    };
    Grid2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var requireRefresh = false;
      var requireGridRefresh = false;
      var freezeRefresh2 = false;
      var checkCursor;
      var args = {
        requestType: "refresh"
      };
      var childGridParent = null;
      var parentInstance = null;
      if (this.isDestroyed) {
        return;
      }
      this.log("module_missing");
      if (this.isEllipsisTooltip()) {
        this.toolTipObj.close();
      }
      var properties = Object.keys(newProp);
      if (properties.indexOf("columns") > -1) {
        if (this.enableColumnVirtualization) {
          this.columnModel = [];
        }
        this.updateColumnObject();
        requireGridRefresh = true;
      }
      for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {
        var prop = properties_1[_i];
        switch (prop) {
          case "allowPaging":
            this.notify(uiUpdate, {
              module: "pager",
              enable: this.allowPaging
            });
            requireRefresh = true;
            if (this.height === "100%") {
              this.scrollModule.refresh();
            }
            break;
          case "pageSettings":
            if (this.pageTemplateChange) {
              this.pageTemplateChange = false;
              this.notify(inBoundModelChanged, {
                module: "pager",
                properties: newProp.pageSettings
              });
              break;
            }
            if (this.pagerModule && this.pagerModule.isCancel) {
              this.pagerModule.isCancel = false;
              return;
            }
            this.notify(inBoundModelChanged, {
              module: "pager",
              properties: newProp.pageSettings
            });
            if (isNullOrUndefined(newProp.pageSettings.currentPage) && isNullOrUndefined(newProp.pageSettings.pageSize) && isNullOrUndefined(newProp.pageSettings.totalRecordsCount) || !isNullOrUndefined(oldProp.pageSettings) && newProp.pageSettings.currentPage !== oldProp.pageSettings.currentPage && !this.enableColumnVirtualization && !this.enableVirtualization && this.pageRequireRefresh && this.pageSettings.totalRecordsCount <= this.pageSettings.pageSize) {
              requireRefresh = true;
            }
            if (!this.pageRequireRefresh) {
              this.pageRequireRefresh = true;
            }
            if (this.pagerModule && this.pagerModule.isCancel) {
              this.pagerModule.isCancel = false;
            }
            break;
          case "allowSorting":
            this.notify(uiUpdate, {
              module: "sort",
              enable: this.allowSorting
            });
            requireRefresh = true;
            checkCursor = true;
            break;
          case "allowFiltering":
            this.updateStackedFilter();
            this.notify(uiUpdate, {
              module: "filter",
              enable: this.allowFiltering
            });
            requireRefresh = true;
            if (this.filterSettings.type !== "FilterBar" || this.editSettings.showAddNewRow && this.filterSettings.type === "FilterBar") {
              this.refreshHeader();
            } else {
              if (this.height === "100%") {
                this.scrollModule.refresh();
              }
            }
            break;
          case "height":
          case "width":
            this.notify(uiUpdate, {
              module: "scroll",
              properties: {
                width: newProp.width,
                height: newProp.height
              }
            });
            if (this.allowPaging) {
              this.pagerModule.refresh();
            }
            break;
          case "allowReordering":
            this.headerModule.refreshUI();
            checkCursor = true;
            break;
          case "allowRowDragAndDrop":
            this.notify(uiUpdate, {
              module: "rowDragAndDrop",
              enable: this.allowRowDragAndDrop
            });
            this.renderModule.refresh();
            this.headerModule.refreshUI();
            break;
          case "allowSelection":
            this.notify(uiUpdate, {
              module: "selection",
              enable: this.allowSelection
            });
            this.renderModule.refresh();
            break;
          case "cssClass":
            this.setCSSClass(oldProp.cssClass);
            break;
          case "enableAutoFill":
            if (this.selectionModule) {
              this.enableBoxSelection();
              this.selectionModule.updateAutoFillPosition();
            }
            break;
          case "rowTemplate":
            this.rowTemplateFn = templateCompiler(this.rowTemplate);
            requireRefresh = true;
            break;
          case "emptyRecordTemplate":
            this.emptyRecordTemplateFn = templateCompiler(this.emptyRecordTemplate);
            requireRefresh = true;
            break;
          case "detailTemplate":
            this.detailTemplateFn = templateCompiler(this.detailTemplate);
            requireRefresh = true;
            break;
          case "allowGrouping":
            this.notify(uiUpdate, {
              module: "group",
              enable: this.allowGrouping
            });
            this.headerModule.refreshUI();
            requireRefresh = true;
            checkCursor = true;
            if (this.height === "100%") {
              this.scrollModule.refresh();
            }
            break;
          case "enableInfiniteScrolling":
          case "childGrid":
            requireRefresh = true;
            childGridParent = this.parentDetails ? document.querySelector("#" + this.parentDetails.parentID) : null;
            parentInstance = childGridParent ? childGridParent.ej2_instances[0] : null;
            if (this.childGrid && parentInstance && isNullOrUndefined(parentInstance.childGrid.childGrid)) {
              var childGridObject = Object.assign({}, parentInstance.childGrid, {
                childGrid: newProp.childGrid
              });
              parentInstance.setProperties({
                childGrid: childGridObject
              }, true);
              while (!isNullOrUndefined(parentInstance.parentDetails)) {
                var currentParent = document.querySelector("#" + parentInstance.parentDetails.parentID);
                var currentParentInstance = currentParent ? currentParent.ej2_instances[0] : null;
                if (currentParentInstance) {
                  var currentChildObject = Object.assign({}, currentParentInstance.childGrid);
                  currentChildObject.childGrid = parentInstance.childGrid;
                  currentParentInstance.setProperties({
                    childGrid: currentChildObject
                  }, true);
                }
                parentInstance = currentParentInstance;
              }
            }
            this.headerModule.refreshUI();
            break;
          case "toolbar":
            this.notify(uiUpdate, {
              module: "toolbar"
            });
            if (this.height === "100%") {
              this.scrollModule.refresh();
            }
            break;
          case "groupSettings":
            this.notify(inBoundModelChanged, {
              module: "group",
              properties: newProp.groupSettings,
              oldProperties: oldProp.groupSettings
            });
            break;
          case "aggregates":
            if (!this.aggregates.length && this.allowGrouping && this.groupSettings.columns.length) {
              requireRefresh = true;
            }
            this.notify(uiUpdate, {
              module: "aggregate",
              properties: newProp
            });
            if (this.height === "100%") {
              this.scrollModule.refresh();
            }
            break;
          case "frozenColumns":
          case "frozenRows":
          case "enableVirtualization":
          case "enableColumnVirtualization":
          case "currencyCode":
          case "locale":
            if (this.isFrozenGrid()) {
              this.log("frozen_rows_columns");
            }
            freezeRefresh2 = true;
            requireGridRefresh = true;
            this.addNewRowFocus = true;
            break;
          case "query":
            if (!this.getDataModule().isQueryInvokedFromData) {
              requireRefresh = true;
            }
            this.getDataModule().isQueryInvokedFromData = false;
            break;
          case "autoFit":
            if (this.autoFit) {
              this.preventAdjustColumns();
            } else {
              this.restoreAdjustColumns();
            }
            break;
          default:
            this.extendedPropertyChange(prop, newProp, requireGridRefresh);
        }
      }
      if (checkCursor) {
        this.updateDefaultCursor();
      }
      if (requireGridRefresh) {
        if (freezeRefresh2 || this.getFrozenColumns() || this.frozenRows || this.frozenLeftColumns.length || this.frozenRightColumns.length) {
          this.freezeRefresh();
        } else {
          this.refresh();
        }
      } else if (requireRefresh) {
        this.notify(modelChanged, args);
        requireRefresh = false;
        this.maintainSelection(newProp.selectedRowIndex);
      }
    };
    Grid2.prototype.extendedPropertyChange = function(prop, newProp, requireGridRefresh) {
      switch (prop) {
        case "enableRtl":
          this.updateRTL();
          if (this.allowPaging) {
            this.element.querySelector(".e-gridpager").ej2_instances[0].enableRtl = newProp.enableRtl;
            this.element.querySelector(".e-gridpager").ej2_instances[0].dataBind();
          }
          if (this.height !== "auto") {
            this.scrollModule.removePadding(!newProp.enableRtl);
            this.scrollModule.setPadding();
          }
          if (this.toolbar && this.toolbarModule) {
            this.toolbarModule.getToolbar().ej2_instances[0].enableRtl = newProp.enableRtl;
            this.toolbarModule.getToolbar().ej2_instances[0].dataBind();
          }
          if (this.contextMenuItems && this.contextMenuModule) {
            this.contextMenuModule.getContextMenu().ej2_instances[0].enableRtl = newProp.enableRtl;
            this.contextMenuModule.getContextMenu().ej2_instances[0].dataBind();
          }
          if (this.showColumnMenu && this.columnMenuModule && !this.enableAdaptiveUI) {
            this.columnMenuModule.getColumnMenu().ej2_instances[0].enableRtl = newProp.enableRtl;
            this.columnMenuModule.getColumnMenu().ej2_instances[0].dataBind();
          }
          if (this.filterSettings.type === "FilterBar" && this.filterSettings.showFilterBarOperator) {
            this.refreshHeader();
          }
          this.notify(rtlUpdated, {});
          break;
        case "enableAltRow":
          this.renderModule.refresh();
          break;
        case "allowResizing":
          if (this.resizeModule) {
            this.resizeModule.render();
          }
          this.headerModule.refreshUI();
          this.updateResizeLines();
          break;
        case "rowHeight":
          if (this.rowHeight) {
            addClass([this.element], "e-grid-min-height");
          } else {
            removeClass([this.element], "e-grid-min-height");
          }
          this.renderModule.refresh();
          this.headerModule.refreshUI();
          break;
        case "gridLines":
          this.updateGridLines();
          break;
        case "showColumnMenu":
          this.headerModule.refreshUI();
          this.notify(uiUpdate, {
            module: "columnMenu",
            enable: true
          });
          break;
        case "columnMenuItems":
          this.notify(uiUpdate, {
            module: "columnMenu",
            enable: this.columnMenuItems
          });
          break;
        case "contextMenuItems":
          this.notify(uiUpdate, {
            module: "contextMenu",
            enable: this.contextMenuItems
          });
          break;
        case "showColumnChooser":
          if (this.toolbarModule) {
            this.toolbarModule.refreshToolbarItems();
          }
          this.notify(uiUpdate, {
            module: "columnChooser",
            enable: this.showColumnChooser
          });
          break;
        case "filterSettings":
          this.updateStackedFilter();
          this.notify(inBoundModelChanged, {
            module: "filter",
            properties: newProp.filterSettings
          });
          break;
        case "searchSettings":
          this.notify(inBoundModelChanged, {
            module: "search",
            properties: newProp.searchSettings
          });
          break;
        case "sortSettings":
          this.notify(inBoundModelChanged, {
            module: "sort"
          });
          break;
        case "selectionSettings":
          this.notify(inBoundModelChanged, {
            module: "selection",
            properties: newProp.selectionSettings
          });
          break;
        case "editSettings":
          this.notify(inBoundModelChanged, {
            module: "edit",
            properties: newProp.editSettings
          });
          break;
        case "allowTextWrap":
        case "textWrapSettings":
          if (this.allowTextWrap) {
            this.applyTextWrap();
          } else {
            this.removeTextWrap();
          }
          this.notify(freezeRender, {
            case: "textwrap",
            isModeChg: prop === "textWrapSettings"
          });
          this.refreshHeader();
          if (this.height === "100%") {
            this.scrollModule.refresh();
          }
          break;
        case "dataSource":
          var requestPendingState = this.getDataModule().getState();
          if (this.allowPaging && this.pageSettings.pageSizes && !this.getDataModule().isRemote() && !(requestPendingState && requestPendingState.isPending)) {
            if (this.pagerModule.pagerObj.isAllPage) {
              var count2 = this.dataSource instanceof DataManager ? this.dataSource.dataSource.json.length : "result" in this.dataSource ? this.dataSource.count : this.dataSource.length;
              var isAllPage = Array.isArray(this.pageSettings.pageSizes) && this.pageSettings.pageSizes.indexOf("All") > -1 ? true : this.pageSettings.pageSizes;
              if (!isAllPage && this.pageSettings.pageSize !== count2) {
                this.pagerModule.pagerObj.isAllPage = false;
              } else {
                this.setProperties({
                  pageSettings: {
                    pageSize: count2
                  }
                }, true);
                this.pagerModule.pagerObj.setProperties({
                  pageSize: count2
                }, true);
              }
            }
          }
          if (this.allowSelection && this.isPersistSelection && !(requestPendingState && requestPendingState.isPending)) {
            this.clearSelection();
          }
          if (!isNullOrUndefined(this.dataSource) && this.dataSource.result) {
            this.isVirtualAdaptive = false;
          }
          if (Object.getPrototypeOf(newProp).deepWatch) {
            var pKeyField = this.getPrimaryKeyFieldNames()[0];
            for (var i = 0, props = Object.keys(newProp.dataSource); i < props.length; i++) {
              this.setRowData(getValue(pKeyField, this.dataSource[props[parseInt(i.toString(), 10)]]), this.dataSource[props[parseInt(i.toString(), 10)]]);
            }
          } else if (requestPendingState.isPending) {
            var gResult = !isNullOrUndefined(this.dataSource) ? this.dataSource.result : [];
            var names = requestPendingState.group || [];
            if (names.length && !this.groupSettings.enableLazyLoading && !(gResult.length && gResult[0].field)) {
              for (var i = 0; i < names.length; i++) {
                gResult = DataUtil.group(gResult, names[parseInt(i.toString(), 10)], requestPendingState.aggregates || []);
              }
            }
            this.dataSource = {
              result: gResult,
              count: this.dataSource.count,
              aggregates: this.dataSource.aggregates
            };
            this.getDataModule().setState({});
            requestPendingState.resolver(this.dataSource);
          } else {
            if (!isNullOrUndefined(this.dataSource) && this.dataSource.result && this.dataSource.count && this.groupSettings.columns.length) {
              var gResult = this.dataSource.result;
              var names = this.groupSettings.columns;
              if (names.length && !(gResult.length && gResult[0].field)) {
                for (var i = 0; i < names.length; i++) {
                  gResult = DataUtil.group(gResult, names[parseInt(i.toString(), 10)]);
                }
              }
              this.dataSource = {
                result: gResult,
                count: this.dataSource.count
              };
            }
            this.getDataModule().setState({
              isDataChanged: false
            });
            this.notify(dataSourceModified, {});
            if (!requireGridRefresh) {
              this.renderModule.refresh();
              if (this.isCheckBoxSelection) {
                this.notify(beforeRefreshOnDataChange, {});
              }
            }
          }
          this.scrollRefresh();
          break;
        case "enableHover":
          var action = newProp.enableHover ? addClass : removeClass;
          action([this.element], "e-gridhover");
          break;
        case "selectedRowIndex":
          if (!this.isSelectedRowIndexUpdating) {
            this.selectRow(newProp.selectedRowIndex);
          }
          this.isSelectedRowIndexUpdating = false;
          break;
        case "resizeSettings":
          this.widthService.setWidthToTable();
          break;
        case "enableAdaptiveUI":
          this.notify(setFullScreenDialog, {});
          break;
        case "rowRenderingMode":
          this.enableVerticalRendering();
          this.notify(rowModeChange, {});
          this.refresh();
          break;
        case "enableStickyHeader":
          this.scrollModule.addStickyListener(newProp.enableStickyHeader);
          break;
        case "allowPdfExport":
          if (this.toolbarModule) {
            this.toolbarModule.refreshToolbarItems();
          }
          break;
        case "allowExcelExport":
          if (this.toolbarModule) {
            this.toolbarModule.refreshToolbarItems();
          }
          break;
      }
    };
    Grid2.prototype.maintainSelection = function(index) {
      var _this_1 = this;
      if (index !== -1) {
        var fn_1 = function() {
          _this_1.selectRow(index);
          _this_1.off(contentReady, fn_1);
        };
        this.on(contentReady, fn_1, this);
      }
    };
    Grid2.prototype.setProperties = function(prop, muteOnChange) {
      _super.prototype.setProperties.call(this, prop, muteOnChange);
      var filterSettings = "filterSettings";
      if (prop["" + filterSettings] && this.filterModule && muteOnChange) {
        this.filterModule.refreshFilter();
      }
    };
    Grid2.prototype.getTablesCount = function() {
      return this.tablesCount;
    };
    Grid2.prototype.updateDefaultCursor = function() {
      var headerCells = [].slice.call(this.getHeaderContent().querySelectorAll(".e-headercell:not(.e-stackedheadercell)"));
      var stdHdrCell = [].slice.call(this.getHeaderContent().getElementsByClassName("e-stackedheadercell"));
      var cols = this.getColumns();
      for (var i = 0; i < headerCells.length; i++) {
        var cell = headerCells[parseInt(i.toString(), 10)];
        if (this.allowGrouping || this.allowReordering || this.allowSorting) {
          if (!cols[parseInt(i.toString(), 10)].allowReordering || !cols[parseInt(i.toString(), 10)].allowSorting || !cols[parseInt(i.toString(), 10)].allowGrouping) {
            cell.classList.add("e-defaultcursor");
          } else {
            cell.classList.add("e-mousepointer");
          }
        }
      }
      for (var count2 = 0; count2 < stdHdrCell.length; count2++) {
        if (this.allowReordering) {
          stdHdrCell[parseInt(count2.toString(), 10)].classList.add("e-mousepointer");
        }
      }
    };
    Grid2.prototype.updateColumnModel = function(columns, isRecursion) {
      for (var i = 0, len = !isNullOrUndefined(columns) ? columns.length : 0; i < len; i++) {
        if (columns[parseInt(i.toString(), 10)].columns) {
          this.updateColumnModel(columns[parseInt(i.toString(), 10)].columns, true);
        } else {
          this.columnModel.push(columns[parseInt(i.toString(), 10)]);
        }
      }
      if (isNullOrUndefined(isRecursion) || !isRecursion) {
        this.updateLockableColumns();
      }
    };
    Grid2.prototype.getFrozenLeftCount = function() {
      return this.getFrozenColumns() || this.getFrozenLeftColumnsCount();
    };
    Grid2.prototype.isFrozenGrid = function() {
      return this.getFrozenColumns() !== 0 || this.frozenLeftColumns.length !== 0 || this.frozenRightColumns.length !== 0 || this.fixedColumns.length !== 0;
    };
    Grid2.prototype.getFrozenMode = function() {
      return this.frozenName;
    };
    Grid2.prototype.updateLockableColumns = function() {
      var cols = this.columnModel;
      var frozenCount = 0;
      var movableCount = 0;
      var frozenColumns = this.getFrozenColumns();
      for (var i = 0; i < cols.length; i++) {
        if (cols[parseInt(i.toString(), 10)].lockColumn) {
          if (i < frozenColumns) {
            cols.splice(frozenCount, 0, cols.splice(i, 1)[0]);
            frozenCount++;
          } else {
            cols.splice(frozenColumns + movableCount, 0, cols.splice(i, 1)[0]);
            movableCount++;
          }
        }
      }
    };
    Grid2.prototype.checkLockColumns = function(cols) {
      for (var i = 0; i < cols.length; i++) {
        if (cols[parseInt(i.toString(), 10)].columns) {
          this.checkLockColumns(cols[parseInt(i.toString(), 10)].columns);
        } else if (cols[parseInt(i.toString(), 10)].lockColumn) {
          this.lockcolPositionCount++;
        }
      }
    };
    Grid2.prototype.leftrightColumnWidth = function(position) {
      var cols = position === "left" ? this.getFrozenLeftColumns() : position === "right" ? this.getFrozenRightColumns() : [];
      var width = 0;
      cols.filter(function(col) {
        if (col.visible) {
          width += parseInt(col.width.toString(), 10);
        }
      });
      return width;
    };
    Grid2.prototype.getColumns = function(isRefresh) {
      var _this_1 = this;
      var inview = this.inViewIndexes.map(function(v) {
        return v - _this_1.groupSettings.columns.length;
      }).filter(function(v) {
        return v > -1;
      });
      var vLen = inview.length;
      if (!this.enableColumnVirtualization || isNullOrUndefined(this.columnModel) || this.columnModel.length === 0 || isRefresh) {
        this.columnModel = [];
        this.updateColumnModel(this.columns);
      }
      var columns = vLen === 0 ? this.columnModel : this.getVisibleColumns().slice(inview[0], inview[vLen - 1] + 1);
      var left = [];
      var right = [];
      var movable = [];
      var isLeftRightFrozen = this.enableColumnVirtualization && this.isPreparedFrozenColumns && vLen === 0;
      if (isLeftRightFrozen) {
        this.frozenRightColumns = [];
        this.frozenLeftColumns = [];
      }
      for (var i = 0; i < columns.length; i++) {
        if (columns[parseInt(i.toString(), 10)].freeze === "Left" || columns[parseInt(i.toString(), 10)].isFrozen) {
          left.push(columns[parseInt(i.toString(), 10)]);
          if (isLeftRightFrozen) {
            this.frozenLeftColumns.push(columns[parseInt(i.toString(), 10)]);
          }
        } else if (columns[parseInt(i.toString(), 10)].freeze === "Right") {
          right.push(columns[parseInt(i.toString(), 10)]);
          if (isLeftRightFrozen) {
            this.frozenRightColumns.push(columns[parseInt(i.toString(), 10)]);
          }
        } else {
          movable.push(columns[parseInt(i.toString(), 10)]);
        }
      }
      if (this.enableColumnVirtualization && this.isFrozenGrid()) {
        if (this.frozenLeftColumns.length) {
          left = this.frozenLeftColumns;
        }
        if (this.frozenRightColumns.length) {
          right = this.frozenRightColumns;
        }
      }
      return left.concat(movable).concat(right);
    };
    Grid2.prototype.getStackedHeaderColumnByHeaderText = function(stackedHeader, col) {
      for (var i = 0; i < col.length; i++) {
        var individualColumn = col[parseInt(i.toString(), 10)];
        if (individualColumn.field === stackedHeader || individualColumn.headerText === stackedHeader) {
          this.stackedColumn = individualColumn;
          break;
        } else if (individualColumn.columns) {
          this.getStackedHeaderColumnByHeaderText(stackedHeader, individualColumn.columns);
        }
      }
      return this.stackedColumn;
    };
    Grid2.prototype.getColumnIndexesInView = function() {
      return this.inViewIndexes;
    };
    Grid2.prototype.getQuery = function() {
      return this.query;
    };
    Grid2.prototype.getLocaleConstants = function() {
      return this.defaultLocale;
    };
    Grid2.prototype.setColumnIndexesInView = function(indexes) {
      this.inViewIndexes = indexes;
    };
    Grid2.prototype.getVisibleColumns = function() {
      return this.getCurrentVisibleColumns();
    };
    Grid2.prototype.getHeaderContent = function() {
      return this.headerModule.getPanel();
    };
    Grid2.prototype.setGridHeaderContent = function(element) {
      this.headerModule.setPanel(element);
    };
    Grid2.prototype.getContentTable = function() {
      return this.contentModule.getTable();
    };
    Grid2.prototype.setGridContentTable = function(element) {
      this.contentModule.setTable(element);
    };
    Grid2.prototype.getContent = function() {
      return this.contentModule.getPanel();
    };
    Grid2.prototype.setGridContent = function(element) {
      this.contentModule.setPanel(element);
    };
    Grid2.prototype.getHeaderTable = function() {
      return this.headerModule.getTable();
    };
    Grid2.prototype.setGridHeaderTable = function(element) {
      this.headerModule.setTable(element);
    };
    Grid2.prototype.getFooterContent = function() {
      this.footerElement = this.element.getElementsByClassName(gridFooter)[0];
      return this.footerElement;
    };
    Grid2.prototype.getFooterContentTable = function() {
      this.footerElement = this.element.getElementsByClassName(gridFooter)[0];
      return this.footerElement.firstChild.firstChild;
    };
    Grid2.prototype.getPager = function() {
      return this.gridPager;
    };
    Grid2.prototype.setGridPager = function(element) {
      this.gridPager = element;
    };
    Grid2.prototype.getRowByIndex = function(index) {
      if (this.enableVirtualization && this.groupSettings.enableLazyLoading) {
        return this.lazyLoadRender.getRowByIndex(index);
      } else {
        return this.contentModule.getRowByIndex(index);
      }
    };
    Grid2.prototype.getMovableRowByIndex = function(index) {
      return this.contentModule.getRowByIndex(index);
    };
    Grid2.prototype.getFrozenRowByIndex = function(index) {
      return this.contentModule.getRowByIndex(index);
    };
    Grid2.prototype.getRows = function() {
      return this.contentModule.getRowElements();
    };
    Grid2.prototype.getFrozenRightRowByIndex = function(index) {
      return this.contentModule.getRowByIndex(index);
    };
    Grid2.prototype.getRowInfo = function(target) {
      var ele = target;
      var args = {
        target
      };
      if (!isNullOrUndefined(target) && isNullOrUndefined(parentsUntil(ele, "e-detailrowcollapse") && isNullOrUndefined(parentsUntil(ele, "e-recordplusexpand")))) {
        var cell = closest(ele, "." + rowCell);
        if (!cell) {
          var row_1 = closest(ele, "." + row);
          if (!isNullOrUndefined(row_1) && !row_1.classList.contains("e-addedrow")) {
            var rowObj = this.getRowObjectFromUID(row_1.getAttribute("data-uid"));
            var rowIndex = parseInt(row_1.getAttribute(ariaRowIndex), 10) - 1;
            args = {
              row: row_1,
              rowData: rowObj.data,
              rowIndex
            };
          }
          return args;
        }
        var cellIndex = parseInt(cell.getAttribute(ariaColIndex), 10) - 1;
        var row_2 = closest(cell, "." + row);
        if (!isNullOrUndefined(cell) && !isNaN(cellIndex) && !isNullOrUndefined(row_2)) {
          var rowIndex = parseInt(row_2.getAttribute(ariaRowIndex), 10) - 1;
          var rows = this.contentModule.getRows();
          var index = cellIndex + this.getIndentCount();
          var rowsObject = rows.filter(function(r) {
            return r.uid === row_2.getAttribute("data-uid");
          });
          var rowData = {};
          var column = void 0;
          if (Object.keys(rowsObject).length) {
            rowData = rowsObject[0].data;
            column = rowsObject[0].cells[parseInt(index.toString(), 10)].column;
          }
          args = {
            cell,
            cellIndex,
            row: row_2,
            rowIndex,
            rowData,
            column,
            target
          };
        }
      }
      return args;
    };
    Grid2.prototype.getMovableRows = function() {
      return this.contentModule.getRowElements();
    };
    Grid2.prototype.getFrozenRightRows = function() {
      return this.contentModule.getRowElements();
    };
    Grid2.prototype.getDataRows = function() {
      return this.getAllDataRows();
    };
    Grid2.prototype.getAllDataRows = function(includeAdd) {
      if (isNullOrUndefined(this.getContentTable().querySelector(tbody))) {
        return [];
      }
      var tbody2 = this.getContentTable().querySelector(tbody);
      var rows = [].slice.call(tbody2.children);
      if (this.editSettings.showAddNewRow) {
        if (rows[0].classList.contains("e-addedrow")) {
          rows.shift();
        } else if (rows[rows.length - 1].classList.contains("e-addedrow")) {
          rows.pop();
        }
      }
      if (this.frozenRows) {
        var hdrTbody = this.getHeaderTable().querySelector(tbody);
        var freezeRows = [].slice.call(hdrTbody.children);
        rows = this.addMovableRows(freezeRows, rows);
        if (this.editSettings.showAddNewRow && freezeRows[0].classList.contains("e-addedrow")) {
          freezeRows.shift();
        }
      }
      var dataRows = this.generateDataRows(rows, includeAdd);
      return dataRows;
    };
    Grid2.prototype.addMovableRows = function(fRows, mrows) {
      for (var i = 0, len = mrows.length; i < len; i++) {
        fRows.push(mrows[parseInt(i.toString(), 10)]);
      }
      return fRows;
    };
    Grid2.prototype.generateDataRows = function(rows, includAdd) {
      var dRows = [];
      for (var i = 0, len = rows.length; i < len; i++) {
        if (rows[parseInt(i.toString(), 10)].classList.contains(row) && (!rows[parseInt(i.toString(), 10)].classList.contains("e-hiddenrow") || includAdd)) {
          if (this.isCollapseStateEnabled()) {
            dRows[parseInt(rows[parseInt(i.toString(), 10)].getAttribute("aria-rowindex"), 10) - 1] = rows[parseInt(i.toString(), 10)];
          } else {
            dRows.push(rows[parseInt(i.toString(), 10)]);
          }
        }
      }
      return dRows;
    };
    Grid2.prototype.getMovableDataRows = function() {
      return this.getAllMovableDataRows();
    };
    Grid2.prototype.getAllMovableDataRows = function(includeAdd) {
      return this.getAllDataRows(includeAdd);
    };
    Grid2.prototype.getFrozenDataRows = function() {
      return this.getAllFrozenDataRows();
    };
    Grid2.prototype.getAllFrozenDataRows = function(includeAdd) {
      return this.getAllDataRows(includeAdd);
    };
    Grid2.prototype.getFrozenRightDataRows = function() {
      return this.getAllFrozenRightDataRows();
    };
    Grid2.prototype.getAllFrozenRightDataRows = function(includeAdd) {
      return this.getAllDataRows(includeAdd);
    };
    Grid2.prototype.setCellValue = function(key, field, value) {
      var cells = "cells";
      var rowData = "data";
      var rowIdx = "index";
      var rowuID = "uid";
      var pkName = this.getPrimaryKeyFieldNames()[0];
      var cell = new CellRenderer(this, this.serviceLocator);
      var fieldIdx = this.getColumnIndexByField(field);
      var col = this.getColumnByField(field);
      var rowObjects = this.contentModule.getRows();
      var selectedRow = rowObjects.filter(function(r) {
        return getValue(pkName, r.data) === key;
      })[0];
      var tr = selectedRow ? this.element.querySelector("[data-uid=" + selectedRow["" + rowuID] + "]") : null;
      if (!isNullOrUndefined(tr)) {
        if (typeof value === "string") {
          value = this.sanitize(value);
        }
        setValue(field, value, selectedRow["" + rowData]);
        var td = this.enableVirtualization ? tr.children[parseInt(fieldIdx.toString(), 10)] : this.getCellFromIndex(selectedRow["" + rowIdx], fieldIdx);
        if (!isNullOrUndefined(td)) {
          var Idx = 0;
          if (this.groupSettings.columns.length) {
            fieldIdx = fieldIdx + this.groupSettings.columns.length;
          }
          if (this.childGrid || this.detailTemplate) {
            fieldIdx++;
          }
          if (this.isRowDragable()) {
            fieldIdx++;
          }
          var sRow = selectedRow["" + cells][fieldIdx - Idx];
          cell.refreshTD(td, sRow, selectedRow["" + rowData], {
            index: selectedRow["" + rowIdx]
          });
          if (this.isReact) {
            td = this.enableVirtualization ? tr.children[parseInt(fieldIdx.toString(), 10)] : this.getCellFromIndex(selectedRow["" + rowIdx], fieldIdx);
          }
          if (this.aggregates.length > 0) {
            this.notify(refreshFooterRenderer, {});
            if (this.groupSettings.columns.length > 0) {
              this.notify(groupAggregates, {});
            }
          }
          if (!isNullOrUndefined(selectedRow) && !isNullOrUndefined(selectedRow["changes"])) {
            selectedRow["changes"]["" + field] = value;
          }
          this.trigger(queryCellInfo, {
            cell: td,
            column: col,
            data: selectedRow["" + rowData]
          });
          if (this.isReact && td.getAttribute("tabindex") === "0" && td.classList.contains("e-focused")) {
            td.focus();
          }
        }
      } else {
        return;
      }
    };
    Grid2.prototype.refreshReactColumnTemplateByUid = function(columnUid, renderTemplates) {
      var _this_1 = this;
      if (this.isReact) {
        this.clearTemplate(["columnTemplate"], void 0, function() {
          var isChildGrid = _this_1.childGrid && _this_1.element.querySelectorAll(".e-childgrid").length ? true : false;
          var rows = isChildGrid ? _this_1.getContentTable().querySelectorAll(".e-row") : _this_1.getDataRows();
          _this_1.refreshReactTemplateTD(rows, isChildGrid);
          if (renderTemplates) {
            _this_1.renderTemplates();
          }
        });
      }
    };
    Grid2.prototype.refreshReactTemplateTD = function(rows, isChildGrid, isFrozen) {
      var cells = "cells";
      var rowIdx = "index";
      var indent = this.getIndentCount();
      var childIndent = 0;
      var isChildRow = false;
      for (var j = 0; j < rows.length; j++) {
        var rowsObj = this.getRowObjectFromUID(rows[parseInt(j.toString(), 10)].getAttribute("data-uid"));
        if (isChildGrid && !rowsObj && parentsUntil(rows[parseInt(j.toString(), 10)], "e-childgrid")) {
          var gridObj = parentsUntil(rows[parseInt(j.toString(), 10)], "e-childgrid").ej2_instances[0];
          rowsObj = gridObj.getRowObjectFromUID(rows[parseInt(j.toString(), 10)].getAttribute("data-uid"));
          childIndent = gridObj.getIndentCount();
          isChildRow = true;
        }
        if (rowsObj && rowsObj.isDataRow && !isNullOrUndefined(rowsObj.index) && !rows[parseInt(j.toString(), 10)].classList.contains("e-editedrow")) {
          for (var i = 0; i < rowsObj["" + cells].length; i++) {
            var cell = rowsObj["" + cells][parseInt(i.toString(), 10)];
            if (cell.isTemplate) {
              var cellRenderer = new CellRenderer(this, this.serviceLocator);
              var td = isChildGrid ? rows[parseInt(j.toString(), 10)].children[cell.index + (isChildRow ? childIndent : indent)] : this.getCellFromIndex(j, isFrozen ? cell.index : i - indent);
              cellRenderer.refreshTD(td, cell, rowsObj.data, {
                index: rowsObj["" + rowIdx]
              });
            }
          }
        }
        isChildRow = false;
      }
    };
    Grid2.prototype.refreshGroupCaptionFooterTemplate = function() {
      var isChildGrid = this.childGrid && this.element.querySelectorAll(".e-childgrid").length ? true : false;
      var rows = this.getContentTable().querySelectorAll(".e-groupcaptionrow, .e-groupfooterrow");
      for (var i = 0; i < rows.length; i++) {
        var gridObj = this;
        var rowsObj = this.getRowObjectFromUID(rows[parseInt(i.toString(), 10)].getAttribute("data-uid"));
        if (isChildGrid && !rowsObj && parentsUntil(rows[parseInt(i.toString(), 10)], "e-childgrid")) {
          gridObj = parentsUntil(rows[parseInt(i.toString(), 10)], "e-childgrid").ej2_instances[0];
          rowsObj = gridObj.getRowObjectFromUID(rows[parseInt(i.toString(), 10)].getAttribute("data-uid"));
        }
        if (rowsObj) {
          var cells = rowsObj.cells.filter(function(cell) {
            return cell.isDataCell;
          });
          var args = {
            cells,
            data: rowsObj.data,
            dataUid: rowsObj.uid
          };
          gridObj.notify(refreshAggregateCell, args);
        }
      }
    };
    Grid2.prototype.refreshReactHeaderTemplateByUid = function(columnUid) {
      if (this.isReact) {
        var cells = "cells";
        var rowsObj = this.headerModule.rows;
        var cellIndex = this.getNormalizedColumnIndex(columnUid);
        var _loop_1 = function(j2) {
          var cell = rowsObj[parseInt(j2.toString(), 10)]["" + cells][parseInt(cellIndex.toString(), 10)];
          if (cell && cell.column.uid === columnUid) {
            var headerCellRenderer = new HeaderCellRenderer(this_1, this_1.serviceLocator);
            var td = parentsUntil(this_1.element.querySelectorAll("[e-mappinguid=" + columnUid + "]")[0], "e-templatecell");
            headerCellRenderer.refresh(cell, td);
            var cols = this_1.sortSettings.columns;
            var columnIndex = cols.findIndex(function(col) {
              return col.field === cell.column.field;
            });
            if (columnIndex !== -1) {
              var header = this_1.getColumnHeaderByField(cell.column.field);
              this_1.ariaService.setSort(header, cols[parseInt(columnIndex.toString(), 10)].direction.toLowerCase());
              if (cols.length > 1) {
                header.querySelector(".e-headercelldiv").insertBefore(this_1.createElement("span", {
                  className: "e-sortnumber",
                  innerHTML: (columnIndex + 1).toString()
                }), header.querySelector(".e-headertext"));
              }
              var filterElement = header.querySelector(".e-sortfilterdiv");
              if (cols[parseInt(columnIndex.toString(), 10)].direction === "Ascending") {
                classList(filterElement, ["e-ascending", "e-icon-ascending"], []);
              } else {
                classList(filterElement, ["e-descending", "e-icon-descending"], []);
              }
            }
          }
        };
        var this_1 = this;
        for (var j = 0; j < rowsObj.length; j++) {
          _loop_1(j);
        }
      }
    };
    Grid2.prototype.setRowData = function(key, rowData) {
      var rowuID = "uid";
      var rowObjects = this.contentModule.getRows();
      var pkName = this.getPrimaryKeyFieldNames()[0];
      if (this.groupSettings.columns.length > 0 && this.aggregates.length > 0) {
        rowObjects = rowObjects.filter(function(row2) {
          return row2.isDataRow;
        });
      }
      var selectedRow = rowObjects.filter(function(r) {
        return getValue(pkName, r.data) === key;
      })[0];
      var selectRowEle = selectedRow ? [].slice.call(this.element.querySelectorAll("[data-uid=" + selectedRow["" + rowuID] + "]")) : void 0;
      if (!isNullOrUndefined(selectedRow) && selectRowEle.length) {
        selectedRow.changes = rowData;
        if (this.frozenRows) {
          var fRowTr = this.getRowsObject()[selectedRow.index];
          this.setFrozenRowData(fRowTr, rowData);
        } else {
          this.setFrozenRowData(selectedRow, rowData);
        }
        if (this.aggregates.length > 0) {
          this.notify(refreshFooterRenderer, {});
          if (this.groupSettings.columns.length > 0) {
            this.notify(groupAggregates, {});
          }
        }
      } else {
        return;
      }
    };
    Grid2.prototype.setFrozenRowData = function(fTr, rowData) {
      var rowRenderer = new RowRenderer(this.serviceLocator, null, this);
      fTr.changes = rowData;
      refreshForeignData(fTr, this.getForeignKeyColumns(), fTr.changes);
      rowRenderer.refresh(fTr, this.getColumns(), true);
    };
    Grid2.prototype.getCellFromIndex = function(rowIndex, columnIndex) {
      var col = this.getColumnByIndex(columnIndex);
      return getCellByColAndRowIndex(this, col, rowIndex, columnIndex);
    };
    Grid2.prototype.getMovableCellFromIndex = function(rowIndex, columnIndex) {
      return this.getCellFromIndex(rowIndex, columnIndex);
    };
    Grid2.prototype.getFrozenRightCellFromIndex = function(rowIndex, columnIndex) {
      return this.getCellFromIndex(rowIndex, columnIndex);
    };
    Grid2.prototype.getColumnHeaderByIndex = function(index) {
      return this.getHeaderTable().getElementsByClassName("e-headercell")[parseInt(index.toString(), 10)];
    };
    Grid2.prototype.getMovableColumnHeaderByIndex = function(index) {
      return this.getColumnHeaderByIndex(index);
    };
    Grid2.prototype.getFrozenRightColumnHeaderByIndex = function(index) {
      return this.getColumnHeaderByIndex(index);
    };
    Grid2.prototype.getFrozenLeftColumnHeaderByIndex = function(index) {
      return this.getColumnHeaderByIndex(index);
    };
    Grid2.prototype.getRowObjectFromUID = function(uid2) {
      var rows = this.contentModule.getRows();
      var row2 = this.rowObject(rows, uid2);
      if (isNullOrUndefined(row2) && this.enableVirtualization && this.groupSettings.columns.length > 0) {
        row2 = this.rowObject(this.vRows, uid2);
        return row2;
      }
      return row2;
    };
    Grid2.prototype.rowObject = function(rows, uid2) {
      if (rows) {
        for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
          var row2 = rows_1[_i];
          if (row2.uid === uid2) {
            return row2;
          }
        }
      }
      return null;
    };
    Grid2.prototype.getRowsObject = function() {
      return this.contentModule.getRows();
    };
    Grid2.prototype.getMovableRowsObject = function() {
      return this.contentModule.getRows();
    };
    Grid2.prototype.getFrozenRightRowsObject = function() {
      return this.contentModule.getRows();
    };
    Grid2.prototype.getColumnHeaderByField = function(field) {
      var column = this.getColumnByField(field);
      return column ? this.getColumnHeaderByUid(column.uid) : void 0;
    };
    Grid2.prototype.getColumnHeaderByUid = function(uid2) {
      var element = this.getHeaderContent().querySelector("[e-mappinguid=" + uid2 + "]");
      return element ? element.parentElement : void 0;
    };
    Grid2.prototype.getColumnByIndex = function(index) {
      var column;
      this.getColumns().some(function(col, i) {
        column = col;
        return i === index;
      });
      return column;
    };
    Grid2.prototype.getColumnByField = function(field) {
      return iterateArrayOrObject(this.getColumns(), function(item) {
        if (item.field === field) {
          return item;
        }
        return void 0;
      })[0];
    };
    Grid2.prototype.getColumnIndexByField = function(field) {
      var cols = this.getColumns();
      for (var i = 0; i < cols.length; i++) {
        if (cols[parseInt(i.toString(), 10)].field === field) {
          return i;
        }
      }
      return -1;
    };
    Grid2.prototype.getColumnByUid = function(uid2, isColumns) {
      var cols = isColumns ? this.columns : this.getColumns();
      return iterateArrayOrObject(cols.concat(this.getStackedColumns(this.columns)), function(item) {
        if (item.uid === uid2) {
          return item;
        }
        return void 0;
      })[0];
    };
    Grid2.prototype.getStackedColumns = function(columns, stackedColumn) {
      if (stackedColumn === void 0) {
        stackedColumn = [];
      }
      for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
        var column = columns_1[_i];
        if (column.columns) {
          stackedColumn.push(column);
          this.getStackedColumns(column.columns, stackedColumn);
        }
      }
      return stackedColumn;
    };
    Grid2.prototype.getColumnIndexByUid = function(uid2) {
      var index = iterateArrayOrObject(this.getColumns(), function(item, index2) {
        if (item.uid === uid2) {
          return index2;
        }
        return void 0;
      })[0];
      return !isNullOrUndefined(index) ? index : -1;
    };
    Grid2.prototype.getUidByColumnField = function(field) {
      return iterateArrayOrObject(this.getColumns(), function(item) {
        if (item.field === field) {
          return item.uid;
        }
        return void 0;
      })[0];
    };
    Grid2.prototype.getNormalizedColumnIndex = function(uid2) {
      var index = this.getColumnIndexByUid(uid2);
      return index + this.getIndentCount();
    };
    Grid2.prototype.getIndentCount = function() {
      var index = 0;
      if (this.allowGrouping) {
        index += this.groupSettings.columns.length;
      }
      if (this.isDetail()) {
        index++;
      }
      if (this.isRowDragable() && isNullOrUndefined(this.rowDropSettings.targetID)) {
        index++;
      }
      return index;
    };
    Grid2.prototype.getColumnFieldNames = function() {
      var columnNames = [];
      var column;
      for (var i = 0, len = this.getColumns().length; i < len; i++) {
        column = this.getColumns()[parseInt(i.toString(), 10)];
        if (column.visible) {
          columnNames.push(column.field);
        }
      }
      return columnNames;
    };
    Grid2.prototype.getRowTemplate = function() {
      return this.rowTemplateFn;
    };
    Grid2.prototype.getEmptyRecordTemplate = function() {
      return this.emptyRecordTemplateFn;
    };
    Grid2.prototype.getDetailTemplate = function() {
      return this.detailTemplateFn;
    };
    Grid2.prototype.getEditTemplate = function() {
      return this.editTemplateFn;
    };
    Grid2.prototype.getEditHeaderTemplate = function() {
      return this.editHeaderTemplateFn;
    };
    Grid2.prototype.getEditFooterTemplate = function() {
      return this.editFooterTemplateFn;
    };
    Grid2.prototype.getColumnChooserTemplate = function() {
      return this.columnChooserTemplateFn;
    };
    Grid2.prototype.getColumnChooserHeaderTemplate = function() {
      return this.columnChooserHeaderTemplateFn;
    };
    Grid2.prototype.getColumnChooserFooterTemplate = function() {
      return this.columnChooserFooterTemplateFn;
    };
    Grid2.prototype.getPrimaryKeyFieldNames = function() {
      var keys = [];
      for (var k = 0; k < this.columnModel.length; k++) {
        if (this.columnModel[parseInt(k.toString(), 10)].isPrimaryKey) {
          keys.push(this.columnModel[parseInt(k.toString(), 10)].field);
        }
      }
      return keys;
    };
    Grid2.prototype.refresh = function() {
      if (!this.isDestroyed) {
        this.isManualRefresh = true;
        this.headerModule.refreshUI();
        this.updateStackedFilter();
        this.renderModule.refresh();
      }
    };
    Grid2.prototype.refreshHeader = function() {
      this.headerModule.refreshUI();
    };
    Grid2.prototype.getSelectedRows = function() {
      return this.selectionModule ? this.selectionModule.selectedRecords : [];
    };
    Grid2.prototype.getSelectedRowIndexes = function() {
      return this.selectionModule ? this.selectionModule.selectedRowIndexes : [];
    };
    Grid2.prototype.getSelectedRowCellIndexes = function() {
      return this.selectionModule ? this.selectionModule.selectedRowCellIndexes : [];
    };
    Grid2.prototype.getSelectedRecords = function() {
      return this.selectionModule ? this.selectionModule.getSelectedRecords() : [];
    };
    Grid2.prototype.getSelectedColumnsUid = function() {
      var _this_1 = this;
      var uid2 = [];
      if (this.selectionModule) {
        this.selectionModule.selectedColumnsIndexes.filter(function(i) {
          return uid2.push(_this_1.getColumns()[parseInt(i.toString(), 10)].uid);
        });
      }
      return uid2;
    };
    Grid2.prototype.getDataModule = function() {
      return this.renderModule.data;
    };
    Grid2.prototype.showColumns = function(keys, showBy) {
      showBy = showBy ? showBy : "headerText";
      this.showHider.show(keys, showBy);
    };
    Grid2.prototype.hideColumns = function(keys, hideBy) {
      hideBy = hideBy ? hideBy : "headerText";
      this.showHider.hide(keys, hideBy);
    };
    Grid2.prototype.getFrozenColumns = function() {
      return this.frozenColumns + this.getFrozenCount(this.columns, 0, 0);
    };
    Grid2.prototype.getFrozenRightColumnsCount = function() {
      return this.frozenRightCount || this.rightcount;
    };
    Grid2.prototype.getFrozenLeftColumnsCount = function() {
      return this.frozenLeftCount || this.leftcount;
    };
    Grid2.prototype.getMovableColumnsCount = function() {
      return this.movableCount || this.movablecount;
    };
    Grid2.prototype.updateFrozenColumnsWidth = function() {
      if (this.isFrozenGrid() && !this.enableColumnVirtualization) {
        var gcol = this.getColumns();
        var isAutoWidth = true;
        var autoCol_1 = 0;
        var difference_1 = 0;
        var autoWidth_1 = 0;
        var isFrozenAuto = gcol.some(function(data) {
          return (data.freeze === "Left" || data.freeze === "Right" || data.freeze === "Fixed" || data.isFrozen) && data.width === "auto";
        });
        var _loop_2 = function(i2) {
          var col = gcol[parseInt(i2.toString(), 10)];
          if (isNullOrUndefined(col.width) && (col.freeze === "Left" || col.freeze === "Right" || col.freeze === "Fixed" || col.isFrozen)) {
            col.width = Math.max(200, col.minWidth ? parseFloat(col.minWidth.toString()) : 0);
            if (!isNullOrUndefined(col.maxWidth) && parseFloat(col.maxWidth.toString()) < col.width) {
              col.width = col.maxWidth;
            }
          }
          if (col.width === "auto" && isFrozenAuto) {
            var tWidth_1 = 0;
            if (isAutoWidth) {
              gcol.filter(function(cols) {
                if (cols.visible) {
                  if (cols.width === "auto") {
                    autoCol_1++;
                  }
                  if (cols.width !== "auto") {
                    var width = !isNullOrUndefined(cols.width) ? parseFloat(cols.width.toString()) : Math.max(200, cols.minWidth ? parseFloat(cols.minWidth.toString()) : 0);
                    tWidth_1 += width;
                  }
                }
              });
              var gWidth = this_2.isPercentageWidthGrid() || this_2.width === "auto" ? this_2.element.getBoundingClientRect().width : parseFloat(this_2.width.toString());
              difference_1 = this_2.height === "auto" ? gWidth - tWidth_1 : gWidth - tWidth_1 - getScrollBarWidth();
              if (difference_1 < 0) {
                difference_1 = 0;
              }
              autoWidth_1 = parseFloat((difference_1 / autoCol_1).toString());
              gcol.filter(function(col2) {
                if (col2.visible) {
                  if (col2.minWidth && parseFloat(col2.minWidth.toString()) > autoWidth_1) {
                    difference_1 = difference_1 - parseFloat(col2.minWidth.toString());
                    autoCol_1--;
                  }
                }
              });
              isAutoWidth = false;
            }
            if (col.minWidth && parseFloat(col.minWidth.toString()) > autoWidth_1) {
              col.width = parseFloat(col.minWidth.toString());
            } else {
              col.width = difference_1 / autoCol_1;
            }
          }
        };
        var this_2 = this;
        for (var i = 0; i < gcol.length; i++) {
          _loop_2(i);
        }
      }
    };
    Grid2.prototype.refreshSplitFrozenColumn = function() {
      this.splitFrozenCount(this.columns);
      this.updateFrozenColumnsWidth();
      this.isAutoGenerateColumns = true;
    };
    Grid2.prototype.setFrozenCount = function() {
      this.frozenLeftCount = this.frozenRightCount = this.movableCount = 0;
      this.visibleFrozenLeft = this.visibleFrozenRight = this.visibleMovable = 0;
      this.frozenLeftColumns = [];
      this.frozenRightColumns = [];
      this.movableColumns = [];
      this.fixedColumns = [];
      this.splitFrozenCount(this.columns);
      this.leftcount = this.frozenLeftCount;
      this.rightcount = this.frozenRightCount;
      this.movablecount = this.movableCount;
      if (this.frozenLeftCount && !this.frozenRightCount) {
        this.frozenName = "Left";
      } else if (this.frozenRightCount && !this.frozenLeftCount) {
        this.frozenName = "Right";
      } else if (this.frozenLeftCount && this.frozenRightCount) {
        this.frozenName = "Left-Right";
      } else if (this.frozenColumns || this.frozenRows) {
        this.frozenName = "Left";
      } else {
        this.frozenName = void 0;
      }
    };
    Grid2.prototype.getVisibleFrozenLeftCount = function() {
      return this.visibleFrozenLeft;
    };
    Grid2.prototype.getVisibleFrozenRightCount = function() {
      return this.visibleFrozenRight;
    };
    Grid2.prototype.getVisibleMovableCount = function() {
      return this.visibleMovable;
    };
    Grid2.prototype.getFrozenRightColumns = function() {
      return this.frozenRightColumns;
    };
    Grid2.prototype.getFrozenLeftColumns = function() {
      return this.frozenLeftColumns;
    };
    Grid2.prototype.getMovableColumns = function() {
      return this.movableColumns;
    };
    Grid2.prototype.splitStackedColumns = function(columns) {
      for (var i = 0; i < columns.length; i++) {
        if (columns[parseInt(i.toString(), 10)].columns) {
          this.splitStackedColumns(columns[parseInt(i.toString(), 10)].columns);
        } else {
          if (columns[parseInt(i.toString(), 10)].freeze === "Left" || columns[parseInt(i.toString(), 10)].isFrozen) {
            if (columns[parseInt(i.toString(), 10)].visible !== false) {
              this.visibleFrozenLeft++;
            }
            this.leftcount++;
          } else if (columns[parseInt(i.toString(), 10)].freeze === "Right") {
            if (columns[parseInt(i.toString(), 10)].visible !== false) {
              this.visibleFrozenRight++;
            }
            this.rightcount++;
          } else if (columns[parseInt(i.toString(), 10)].freeze === "Fixed") {
            if (columns[parseInt(i.toString(), 10)].visible !== false) {
              this.visibleFrozenFixed++;
            }
            this.fixedcount++;
          } else {
            if (columns[parseInt(i.toString(), 10)].visible !== false) {
              this.visibleMovable++;
            }
            this.movablecount++;
          }
        }
      }
    };
    Grid2.prototype.pushStackedColumns = function(columns, index, arr, col, stackedcol) {
      arr[parseInt(index.toString(), 10)] = {
        headerText: col.headerText
      };
      if (col.textAlign) {
        arr[parseInt(index.toString(), 10)].textAlign = col.textAlign;
      }
      if (col.customAttributes) {
        arr[parseInt(index.toString(), 10)].customAttributes = col.customAttributes;
      }
      for (var i = 0; i < columns.length; i++) {
        if (columns[parseInt(i.toString(), 10)].columns) {
          index = index + 1;
          this.pushStackedColumns(columns[parseInt(i.toString(), 10)].columns, index, arr, columns[parseInt(i.toString(), 10)], stackedcol);
          index = index - 1;
        } else {
          var stockCol = [];
          stockCol = arr.slice().slice(0, index + 1);
          if (columns[parseInt(i.toString(), 10)].freeze === "Left" || columns[parseInt(i.toString(), 10)].isFrozen) {
            this.stackedLeft.push(stockCol);
            this.stackedarrayLeft.push(columns[parseInt(i.toString(), 10)]);
          } else if (columns[parseInt(i.toString(), 10)].freeze === "Right") {
            this.stackedRight.push(stockCol);
            this.stackedarrayRight.push(columns[parseInt(i.toString(), 10)]);
          } else if (columns[parseInt(i.toString(), 10)].freeze === "Fixed") {
            this.stackedFixed.push(stockCol);
            this.stackedarrayFixed.push(columns[parseInt(i.toString(), 10)]);
          } else {
            this.stackedMovable.push(stockCol);
            this.stackedarrayMovable.push(columns[parseInt(i.toString(), 10)]);
          }
        }
      }
    };
    Grid2.prototype.pushallcol = function(text, text1, col, columns, isTrue) {
      if (col.headerText === text1.headerText) {
        if (isTrue) {
          col.columns.push(columns);
        } else {
          var newColumn = {
            headerText: text.headerText,
            columns: []
          };
          if (text.textAlign) {
            newColumn.textAlign = text.textAlign;
          }
          if (text.customAttributes) {
            newColumn.customAttributes = text.customAttributes;
          }
          col.columns.push(newColumn);
        }
      } else {
        if (col.columns && col.columns.length) {
          for (var i = 0; i < col.columns.length; i++) {
            this.pushallcol(text, text1, col.columns[parseInt(i.toString(), 10)], columns, isTrue);
          }
        }
      }
    };
    Grid2.prototype.resetStackedColumns = function(headercol, gridcolumns, freeze) {
      var col = {};
      var tempHead = [];
      for (var i = 1; i <= headercol.length; i++) {
        var firstcol = headercol[i - 1];
        for (var j = 0; j < firstcol.length; j++) {
          if (!col.columns && i === 1) {
            col = {
              headerText: firstcol[parseInt(j.toString(), 10)].headerText,
              textAlign: firstcol[parseInt(j.toString(), 10)].textAlign,
              customAttributes: firstcol[parseInt(j.toString(), 10)].customAttributes,
              columns: []
            };
            tempHead.push(firstcol[parseInt(j.toString(), 10)]);
          } else {
            if (tempHead.indexOf(firstcol[parseInt(j.toString(), 10)]) === -1) {
              this.pushallcol(firstcol[parseInt(j.toString(), 10)], firstcol[j - 1], col);
              tempHead.push(firstcol[parseInt(j.toString(), 10)]);
            }
          }
          if (j === firstcol.length - 1) {
            this.pushallcol(null, firstcol[parseInt(j.toString(), 10)], col, gridcolumns[i - 1], true);
            var count2 = 0;
            while (count2 !== headercol.length - 1 && i !== headercol.length) {
              var firstColHeaders = firstcol.map(function(col2) {
                return col2.headerText;
              }).join(", ");
              var headerColHeaders = headercol[parseInt(i.toString(), 10)].map(function(item) {
                return item.headerText;
              }).join(", ");
              if (firstColHeaders === headerColHeaders) {
                i++;
                this.pushallcol(null, firstcol[parseInt(j.toString(), 10)], col, gridcolumns[i - 1], true);
              }
              count2++;
            }
          }
        }
      }
      if (freeze === "Left") {
        this.frozenLeftColumns.push(col);
      } else if (freeze === "Right") {
        this.frozenRightColumns.push(col);
      } else {
        this.movableColumns.push(col);
      }
    };
    Grid2.prototype.splitFrozenCount = function(columns) {
      if (this.frozenColumns || this.changedProperties && this.changedProperties.frozenColumns === 0) {
        var cols = !this.enableColumnVirtualization || this.enableColumnVirtualization && this.isPreparedFrozenColumns ? this.enableColumnVirtualization && this.columnModel && this.columnModel.length ? this.columnModel : this.getColumns() : this.columns;
        if (!this.changedProperties || this.changedProperties && !this.changedProperties.frozenColumns) {
          for (var i = 0; i < cols.length; i++) {
            if (this.frozenColumns > i) {
              cols[parseInt(i.toString(), 10)].freeze = "Left";
            } else if (cols[parseInt(i.toString(), 10)].freeze === "Right" || cols[parseInt(i.toString(), 10)].freeze === "Fixed") {
              cols[parseInt(i.toString(), 10)].freeze = cols[parseInt(i.toString(), 10)].freeze;
            } else {
              cols[parseInt(i.toString(), 10)].freeze = void 0;
            }
          }
        }
      }
      for (var i = 0; i < (!isNullOrUndefined(columns) ? columns.length : 0); i++) {
        if (columns[parseInt(i.toString(), 10)].columns) {
          this.leftcount = 0;
          this.rightcount = 0;
          this.movablecount = 0;
          this.fixedcount = 0;
          var arr = [];
          this.splitStackedColumns(columns[parseInt(i.toString(), 10)].columns);
          if (this.leftcount && !this.rightcount && !this.movablecount && !this.fixedcount) {
            this.frozenLeftCount += this.leftcount;
            this.frozenLeftColumns.push(columns[parseInt(i.toString(), 10)]);
          } else if (this.rightcount && !this.leftcount && !this.movablecount && !this.fixedcount) {
            this.frozenRightCount += this.rightcount;
            this.frozenRightColumns.push(columns[parseInt(i.toString(), 10)]);
          } else if (this.movablecount && !this.leftcount && !this.rightcount && !this.fixedcount) {
            this.movableCount += this.movablecount;
            this.movableColumns.push(columns[parseInt(i.toString(), 10)]);
          } else if (this.fixedcount && !this.leftcount && !this.rightcount && !this.movablecount) {
            this.fixedCount += this.fixedcount;
            this.fixedColumns.push(columns[parseInt(i.toString(), 10)]);
            this.movableCount += this.movablecount;
            this.movableColumns.push(columns[parseInt(i.toString(), 10)]);
          } else {
            this.frozenLeftCount += this.leftcount;
            this.frozenRightCount += this.rightcount;
            this.movableCount += this.movablecount;
            this.fixedCount += this.fixedcount;
            this.leftcount = 0;
            this.rightcount = 0;
            this.movablecount = 0;
            this.fixedcount = 0;
            this.stackedLeft = [];
            this.stackedRight = [];
            this.stackedFixed = [];
            this.stackedMovable = [];
            this.stackedarrayLeft = [];
            this.stackedarrayRight = [];
            this.stackedarrayFixed = [];
            this.stackedarrayMovable = [];
            this.pushStackedColumns(columns[parseInt(i.toString(), 10)].columns, 0, arr, columns[parseInt(i.toString(), 10)], {
              headerText: columns[parseInt(i.toString(), 10)].headerText,
              textAlign: columns[parseInt(i.toString(), 10)].textAlign,
              customAttributes: columns[parseInt(i.toString(), 10)].customAttributes,
              columns: []
            });
            if (this.stackedarrayLeft.length) {
              this.resetStackedColumns(this.stackedLeft, this.stackedarrayLeft, "Left");
            }
            if (this.stackedarrayRight.length) {
              this.resetStackedColumns(this.stackedRight, this.stackedarrayRight, "Right");
            }
            if (this.stackedarrayFixed.length) {
              this.resetStackedColumns(this.stackedFixed, this.stackedarrayFixed, "Fixed");
            }
            if (this.stackedarrayMovable.length) {
              this.resetStackedColumns(this.stackedMovable, this.stackedarrayMovable, "Movable");
            }
            this.stackedLeft = [];
            this.stackedRight = [];
            this.stackedMovable = [];
            this.stackedFixed = [];
            this.stackedarrayLeft = [];
            this.stackedarrayRight = [];
            this.stackedarrayMovable = [];
            this.stackedarrayFixed = [];
          }
        } else {
          if (columns[parseInt(i.toString(), 10)].freeze === "Right") {
            if (columns[parseInt(i.toString(), 10)].visible !== false) {
              this.visibleFrozenRight++;
            }
            this.frozenRightColumns.push(columns[parseInt(i.toString(), 10)]);
            this.frozenRightCount++;
          } else if (columns[parseInt(i.toString(), 10)].freeze === "Left" || columns[parseInt(i.toString(), 10)].isFrozen) {
            if (columns[parseInt(i.toString(), 10)].visible !== false) {
              this.visibleFrozenLeft++;
            }
            this.frozenLeftColumns.push(columns[parseInt(i.toString(), 10)]);
            this.frozenLeftCount++;
          } else if (columns[parseInt(i.toString(), 10)].freeze === "Fixed") {
            this.fixedColumns.push(columns[parseInt(i.toString(), 10)]);
            this.fixedCount++;
            this.movableColumns.push(columns[parseInt(i.toString(), 10)]);
            this.movableCount++;
          } else {
            if (columns[parseInt(i.toString(), 10)].visible !== false) {
              this.visibleMovable++;
            }
            this.movableColumns.push(columns[parseInt(i.toString(), 10)]);
            this.movableCount++;
          }
        }
      }
      if (this.frozenLeftColumns.length) {
        var cols = this.frozenLeftColumns[this.frozenLeftColumns.length - 1];
        this.removeBorder(this.frozenLeftColumns);
        this.frozenLeftBorderColumns(cols instanceof Column ? this.lastVisibleLeftCol(this.frozenLeftColumns) : cols);
      }
      if (this.frozenRightColumns.length) {
        var cols = this.frozenRightColumns[0];
        this.removeBorder(this.frozenRightColumns);
        this.frozenRightBorderColumns(cols instanceof Column ? this.firstVisibleRightCol(this.frozenRightColumns) : cols);
      }
      if ((this.frozenLeftColumns.length || this.frozenRightColumns.length) && this.freezeColumnRefresh) {
        var cols = this.frozenLeftColumns.concat(this.movableColumns).concat(this.frozenRightColumns);
        this.setProperties({
          columns: cols
        }, true);
        this.freezeColumnRefresh = false;
      }
    };
    Grid2.prototype.removeBorder = function(columns) {
      for (var i = 0; i < columns.length; i++) {
        if (columns[parseInt(i.toString(), 10)].columns && columns[parseInt(i.toString(), 10)].columns.length) {
          if (columns[parseInt(i.toString(), 10)].border === "Right" || columns[parseInt(i.toString(), 10)].border === "Left") {
            columns[parseInt(i.toString(), 10)].border = void 0;
          }
          this.removeBorder(columns[parseInt(i.toString(), 10)].columns);
        } else {
          if (columns[parseInt(i.toString(), 10)].border === "Right" || columns[parseInt(i.toString(), 10)].border === "Left") {
            columns[parseInt(i.toString(), 10)].border = void 0;
          }
        }
      }
    };
    Grid2.prototype.isVisibleColumns = function(column, arr) {
      if (column.columns && column.columns.length) {
        for (var i = 0; i < column.columns.length; i++) {
          this.isVisibleColumns(column.columns[parseInt(i.toString(), 10)], arr);
          if (column.columns[parseInt(i.toString(), 10)].visible && isNullOrUndefined(column.columns[parseInt(i.toString(), 10)].columns) && (!isNullOrUndefined(column.columns[parseInt(i.toString(), 10)].freeze) || column.columns[parseInt(i.toString(), 10)].isFrozen)) {
            arr.push("true");
          }
        }
      } else {
        if (column.visible && (!isNullOrUndefined(column.freeze) || column.isFrozen)) {
          arr.push("true");
        }
      }
    };
    Grid2.prototype.lastVisibleLeftCol = function(columns) {
      var column;
      for (var i = columns.length - 1; i >= 0; i--) {
        var arr = [];
        this.isVisibleColumns(columns[parseInt(i.toString(), 10)], arr);
        if (columns[parseInt(i.toString(), 10)].visible && arr.indexOf("true") !== -1) {
          column = columns[parseInt(i.toString(), 10)];
          break;
        }
      }
      return column;
    };
    Grid2.prototype.firstVisibleRightCol = function(columns) {
      var column;
      for (var i = 0; i < columns.length; i++) {
        var arr = [];
        this.isVisibleColumns(columns[parseInt(i.toString(), 10)], arr);
        if (columns[parseInt(i.toString(), 10)].visible && arr.indexOf("true") !== -1) {
          column = columns[parseInt(i.toString(), 10)];
          break;
        }
      }
      return column;
    };
    Grid2.prototype.frozenLeftBorderColumns = function(columns) {
      if (isNullOrUndefined(columns)) {
        return;
      }
      if (columns.columns && columns.columns.length) {
        columns.border = "Left";
        var cols = columns.columns[columns.columns.length - 1];
        this.frozenLeftBorderColumns(cols instanceof Column && cols.columns ? this.lastVisibleLeftCol(columns.columns) : cols);
      } else {
        columns.border = "Left";
      }
    };
    Grid2.prototype.frozenRightBorderColumns = function(columns) {
      if (isNullOrUndefined(columns)) {
        return;
      }
      if (columns.columns && columns.columns.length) {
        columns.border = "Right";
        var cols = columns.columns[0];
        this.frozenRightBorderColumns(cols instanceof Column && cols.columns ? this.firstVisibleRightCol(columns.columns) : cols);
      } else {
        columns.border = "Right";
      }
    };
    Grid2.prototype.getVisibleFrozenColumns = function() {
      return this.getVisibleFrozenColumnsCount() + this.getVisibleFrozenCount(this.columns, 0);
    };
    Grid2.prototype.getFilterUIInfo = function() {
      return this.filterModule ? this.filterModule.getFilterUIInfo() : {};
    };
    Grid2.prototype.getVisibleFrozenColumnsCount = function() {
      var visibleFrozenColumns = 0;
      var columns = this.columnModel;
      for (var i = 0; i < this.frozenColumns; i++) {
        if (columns[parseInt(i.toString(), 10)].visible) {
          visibleFrozenColumns++;
        }
      }
      if (this.frozenLeftCount || this.leftcount || this.frozenRightCount || this.rightcount) {
        for (var i = 0; i < columns.length; i++) {
          if (columns[parseInt(i.toString(), 10)].visible && (columns[parseInt(i.toString(), 10)].freeze === "Left" || columns[parseInt(i.toString(), 10)].freeze === "Right")) {
            visibleFrozenColumns++;
          }
        }
      }
      return visibleFrozenColumns;
    };
    Grid2.prototype.getVisibleFrozenCount = function(cols, cnt) {
      if (!this.frozenLeftCount && !this.leftcount && (!this.frozenRightCount || !this.rightcount)) {
        for (var i = 0, len = cols.length; i < len; i++) {
          if (cols[parseInt(i.toString(), 10)].columns) {
            cnt = this.getVisibleFrozenCount(cols[parseInt(i.toString(), 10)].columns, cnt);
          } else {
            if (cols[parseInt(i.toString(), 10)].isFrozen && cols[parseInt(i.toString(), 10)].visible) {
              cnt++;
            }
          }
        }
      }
      return cnt;
    };
    Grid2.prototype.getFrozenCount = function(cols, cnt, index) {
      for (var i = 0, len = !isNullOrUndefined(cols) ? cols.length : 0; i < len; i++) {
        if (cols[parseInt(i.toString(), 10)].columns) {
          cnt = this.getFrozenCount(cols[parseInt(i.toString(), 10)].columns, cnt, index);
        } else {
          if (cols[parseInt(i.toString(), 10)].isFrozen && index > this.frozenColumns - 1) {
            cnt++;
          }
          index++;
        }
      }
      return cnt;
    };
    Grid2.prototype.goToPage = function(pageNo) {
      if (this.pagerModule) {
        this.pagerModule.goToPage(pageNo);
      }
    };
    Grid2.prototype.updateExternalMessage = function(message) {
      if (this.pagerModule && !this.pagerTemplate) {
        this.pagerModule.updateExternalMessage(message);
      }
    };
    Grid2.prototype.sortColumn = function(columnName, direction, isMultiSort) {
      if (this.sortModule) {
        this.sortModule.sortColumn(columnName, direction, isMultiSort);
      }
    };
    Grid2.prototype.changeDataSource = function(dataSource, columns) {
      this.isChangeDataSourceCall = true;
      this.setProperties({
        sortSettings: {
          columns: []
        }
      }, true);
      this.setProperties({
        filterSettings: {
          columns: []
        }
      }, true);
      this.setProperties({
        searchSettings: {
          key: ""
        }
      }, true);
      if (this.allowGrouping) {
        this.setProperties({
          groupSettings: {
            columns: []
          }
        }, true);
      }
      if (columns && columns.length) {
        this.setProperties({
          columns
        }, true);
      }
      if (dataSource) {
        if (isNullOrUndefined(columns)) {
          this.setProperties({
            columns: []
          }, true);
        }
        this.setProperties({
          dataSource
        }, true);
      }
      this.freezeRefresh();
      this.isChangeDataSourceCall = false;
    };
    Grid2.prototype.clearSorting = function() {
      if (this.sortModule) {
        this.sortModule.clearSorting();
      }
    };
    Grid2.prototype.removeSortColumn = function(field) {
      if (this.sortModule) {
        this.sortModule.removeSortColumn(field);
      }
    };
    Grid2.prototype.clearGridActions = function() {
      this.setProperties({
        sortSettings: {
          columns: []
        }
      }, true);
      this.setProperties({
        filterSettings: {
          columns: []
        }
      }, true);
      this.setProperties({
        searchSettings: {
          key: ""
        }
      }, true);
      if (this.allowGrouping) {
        this.setProperties({
          groupSettings: {
            columns: []
          }
        }, false);
      } else {
        this.freezeRefresh();
      }
    };
    Grid2.prototype.filterByColumn = function(fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator) {
      if (this.filterModule) {
        this.filterModule.filterByColumn(fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator);
      }
    };
    Grid2.prototype.clearFiltering = function(fields) {
      if (this.filterModule) {
        this.filterModule.clearFiltering(fields);
      }
    };
    Grid2.prototype.removeFilteredColsByField = function(field, isClearFilterBar) {
      if (this.filterModule) {
        this.filterModule.removeFilteredColsByField(field, isClearFilterBar);
      }
    };
    Grid2.prototype.selectRow = function(index, isToggle) {
      if (this.selectionModule) {
        this.selectionModule.selectRow(index, isToggle);
      }
    };
    Grid2.prototype.selectRows = function(rowIndexes) {
      if (this.selectionModule) {
        this.selectionModule.selectRows(rowIndexes);
      }
    };
    Grid2.prototype.clearSelection = function() {
      if (this.selectionModule) {
        this.selectionModule.clearSelection();
      }
    };
    Grid2.prototype.selectCell = function(cellIndex, isToggle) {
      if (this.selectionModule) {
        this.selectionModule.selectCell(cellIndex, isToggle);
      }
    };
    Grid2.prototype.selectCellsByRange = function(startIndex, endIndex) {
      this.selectionModule.selectCellsByRange(startIndex, endIndex);
    };
    Grid2.prototype.search = function(searchString) {
      if (this.searchModule) {
        this.searchModule.search(searchString);
      }
    };
    Grid2.prototype.print = function() {
      if (this.printModule) {
        this.printModule.print();
      }
    };
    Grid2.prototype.deleteRecord = function(fieldname, data) {
      if (this.editModule) {
        this.editModule.deleteRecord(fieldname, data);
      }
    };
    Grid2.prototype.startEdit = function() {
      if (this.editModule) {
        this.editModule.startEdit();
      }
    };
    Grid2.prototype.endEdit = function() {
      if (this.editModule) {
        this.editModule.endEdit();
      }
    };
    Grid2.prototype.closeEdit = function() {
      if (this.editModule) {
        this.editModule.closeEdit();
      }
    };
    Grid2.prototype.addRecord = function(data, index) {
      if (this.editModule) {
        this.editModule.addRecord(data, index);
      }
    };
    Grid2.prototype.deleteRow = function(tr) {
      if (this.editModule) {
        this.editModule.deleteRow(tr);
      }
    };
    Grid2.prototype.editCell = function(index, field) {
      if (this.editModule) {
        this.editModule.editCell(index, field);
      }
    };
    Grid2.prototype.saveCell = function() {
      if (this.editModule) {
        this.editModule.saveCell();
      }
    };
    Grid2.prototype.updateCell = function(rowIndex, field, value) {
      if (this.editModule) {
        this.editModule.updateCell(rowIndex, field, value);
      }
    };
    Grid2.prototype.updateRow = function(index, data) {
      if (this.editModule) {
        this.editModule.updateRow(index, data);
      }
    };
    Grid2.prototype.getBatchChanges = function() {
      if (this.editModule) {
        return this.editModule.getBatchChanges();
      }
      return {};
    };
    Grid2.prototype.enableToolbarItems = function(items, isEnable) {
      if (this.toolbarModule) {
        this.toolbarModule.enableItems(items, isEnable);
      }
    };
    Grid2.prototype.copy = function(withHeader) {
      if (this.clipboardModule) {
        this.clipboardModule.copy(withHeader);
      }
    };
    Grid2.prototype.recalcIndentWidth = function() {
      var _this_1 = this;
      if (!this.getHeaderTable().querySelector(".e-emptycell")) {
        return;
      }
      if (!this.groupSettings.columns.length && !this.isDetail() && !this.isRowDragable() || this.getHeaderTable().querySelector(".e-emptycell.e-indentRefreshed") || !this.getContentTable()) {
        return;
      }
      var indentWidth = this.getHeaderTable().querySelector(".e-emptycell").parentElement.offsetWidth;
      var headerCol = [].slice.call(this.getHeaderTable().querySelector(colGroup).childNodes);
      var contentCol = [].slice.call(this.getContentTable().querySelector(colGroup).childNodes);
      var perPixel = indentWidth / 30;
      var i = this.getFrozenMode() === "Right" ? this.groupSettings.columns.length + this.getColumns().length : 0;
      var parentOffset = this.element.offsetWidth;
      var applyWidth = function(index, width) {
        if (ispercentageWidth(_this_1)) {
          var newWidth = (width / parentOffset * 100).toFixed(1) + "%";
          headerCol[parseInt(index.toString(), 10)].style.width = newWidth;
          contentCol[parseInt(index.toString(), 10)].style.width = newWidth;
        } else {
          headerCol[parseInt(index.toString(), 10)].style.width = width + "px";
          contentCol[parseInt(index.toString(), 10)].style.width = width + "px";
        }
        _this_1.notify(columnWidthChanged, {
          index,
          width
        });
      };
      if (perPixel >= 1) {
        indentWidth = 30 / perPixel;
      }
      if (indentWidth < 1) {
        indentWidth = 1;
      }
      if (this.enableColumnVirtualization || this.isAutoGen || this.columns.length === this.groupSettings.columns.length) {
        indentWidth = 30;
      }
      while (i < this.groupSettings.columns.length) {
        applyWidth(i, indentWidth);
        i++;
      }
      if (this.isDetail()) {
        applyWidth(i, indentWidth);
        i++;
      }
      if (this.isRowDragable()) {
        applyWidth(i, indentWidth);
      }
      this.isAutoGen = false;
      this.getHeaderTable().querySelector(".e-emptycell").classList.add("e-indentRefreshed");
    };
    Grid2.prototype.resetIndentWidth = function() {
      if (this.isDestroyed) {
        return;
      }
      if (ispercentageWidth(this)) {
        this.getHeaderTable().querySelector(".e-emptycell").classList.remove("e-indentRefreshed");
        this.widthService.setWidthToColumns();
        this.recalcIndentWidth();
        if (this.autoFit) {
          this.preventAdjustColumns();
        }
      }
      if ((this.width === "auto" || typeof this.width === "string" && this.width.indexOf("%") !== -1) && this.getColumns().filter(function(col) {
        return (!col.width || col.width === "auto") && col.minWidth;
      }).length > 0) {
        var tgridWidth = this.widthService.getTableWidth(this.getColumns(), true);
        this.widthService.setMinwidthBycalculation(tgridWidth);
      }
      if (this.isFrozenGrid() && this.enableColumnVirtualization && this.widthService) {
        this.widthService.refreshFrozenScrollbar();
      }
      if (this.allowTextWrap && this.textWrapSettings.wrapMode !== "Content") {
        this.notify(refreshHandlers, {});
      }
      if (this.frozenRows && this.scrollModule) {
        this.scrollModule.resizeFrozenRowBorder();
      }
      if (this.enableStickyHeader) {
        this.scrollModule.makeStickyHeader();
      }
      if (this.enableAutoFill && this.selectionSettings.type === "Multiple" && this.selectionSettings.mode === "Cell" && this.selectionModule.selectedRowCellIndexes.length) {
        this.selectionModule.updateAutoFillPosition();
        this.selectionModule.drawBorders();
      }
    };
    Grid2.prototype.isRowDragable = function() {
      return this.allowRowDragAndDrop && !this.rowDropSettings.targetID;
    };
    Grid2.prototype.reorderColumns = function(fromFName, toFName) {
      if (this.reorderModule) {
        this.reorderModule.reorderColumns(fromFName, toFName);
      }
    };
    Grid2.prototype.reorderColumnByIndex = function(fromIndex, toIndex) {
      if (this.reorderModule) {
        this.reorderModule.reorderColumnByIndex(fromIndex, toIndex);
      }
    };
    Grid2.prototype.reorderColumnByTargetIndex = function(fieldName, toIndex) {
      if (this.reorderModule) {
        this.reorderModule.reorderColumnByTargetIndex(fieldName, toIndex);
      }
    };
    Grid2.prototype.reorderRows = function(fromIndexes, toIndex) {
      if (this.rowDragAndDropModule) {
        this.rowDragAndDropModule.reorderRows(fromIndexes, toIndex);
      }
    };
    Grid2.prototype.refreshDataSource = function(e) {
      this.notify("refreshdataSource", e);
    };
    Grid2.prototype.disableRowDD = function(enable) {
      var headerTable = this.getHeaderTable();
      var contentTable = this.getContentTable();
      var headerRows = headerTable.querySelectorAll("th.e-rowdragheader, th.e-mastercell");
      var rows = this.getRows();
      var disValue = enable ? "none" : "";
      setStyleAttribute(headerTable.querySelector(colGroup).childNodes[0], {
        "display": disValue
      });
      setStyleAttribute(contentTable.querySelector(colGroup).childNodes[0], {
        "display": disValue
      });
      for (var i = 0; i < this.getRows().length; i++) {
        var ele = rows[parseInt(i.toString(), 10)].firstElementChild;
        if (enable) {
          addClass([ele], "e-hide");
        } else {
          removeClass([ele], ["e-hide"]);
        }
      }
      for (var j = 0; j < headerTable.querySelectorAll("th.e-rowdragheader, th.e-mastercell").length; j++) {
        var ele = headerRows[parseInt(j.toString(), 10)];
        if (enable) {
          addClass([ele], "e-hide");
        } else {
          removeClass([ele], ["e-hide"]);
        }
      }
    };
    Grid2.prototype.autoFitColumns = function(fieldNames, startRowIndex, endRowIndex) {
      var injectedModules = this.getInjectedModules();
      var resize = injectedModules.find(function(item) {
        if (typeof item === "function" && !isNullOrUndefined(item.prototype)) {
          return item.prototype.getModuleName() === "resize";
        } else {
          return item.name === "Resize";
        }
      });
      if (!this.resizeModule && resize) {
        this.autoFitColumnsResize = true;
        this.injectModules();
      }
      if (this.resizeModule) {
        this.resizeModule.autoFitColumns(fieldNames, startRowIndex, endRowIndex);
      }
    };
    Grid2.prototype.preventAdjustColumns = function() {
      if (this.enableAdaptiveUI && this.rowRenderingMode === "Vertical" || this.allowResizing && this.resizeSettings.mode === "Auto") {
        return;
      }
      var columns = this.getColumns();
      var headerTable = this.getHeaderTable();
      var tableWidth = 0;
      for (var i = 0; i < columns.length; i++) {
        if (columns[parseInt(i.toString(), 10)].visible) {
          if (this.groupSettings.columns.length && this.groupSettings.columns.indexOf(columns[parseInt(i.toString(), 10)].field) > -1) {
            var headerCol = [].slice.call(headerTable.querySelector("colgroup").querySelectorAll(":not(.e-group-intent):not(.e-detail-intent):not(.e-drag-intent)"));
            if (headerCol[parseInt(i.toString(), 10)].style.display === "none") {
              continue;
            }
          }
          if (columns[parseInt(i.toString(), 10)].width) {
            tableWidth += parseFloat(columns[parseInt(i.toString(), 10)].width.toString());
          } else {
            tableWidth = 0;
            break;
          }
        }
      }
      if (tableWidth) {
        var percentageWidth = this.isPercentageWidthGrid();
        var unit = this.widthUnit(percentageWidth);
        var contentTable = this.getContentTable();
        if (this.groupSettings.columns.length || this.isDetail() || this.isRowDragable()) {
          var indentWidth = this.defaultIndentWidth(percentageWidth);
          var indentWidthUnitFormat = indentWidth.toString() + unit;
          var headerIndentCol = [].slice.call(headerTable.querySelector("colgroup").querySelectorAll(".e-group-intent, .e-detail-intent, .e-drag-intent"));
          var contentIndentCol = [].slice.call(contentTable.querySelector("colgroup").querySelectorAll(".e-group-intent, .e-detail-intent, .e-drag-intent"));
          for (var i = 0; i < headerIndentCol.length; i++) {
            headerIndentCol[parseInt(i.toString(), 10)].style.setProperty("width", indentWidthUnitFormat);
            contentIndentCol[parseInt(i.toString(), 10)].style.setProperty("width", indentWidthUnitFormat);
            tableWidth += indentWidth;
          }
        }
        if (percentageWidth && tableWidth < 100 || !percentageWidth && tableWidth < contentTable.parentElement.clientWidth) {
          if (!isNullOrUndefined(contentTable.querySelector(".e-emptyrow"))) {
            addClass([headerTable], ["e-tableborder"]);
            removeClass([contentTable], ["e-tableborder"]);
          } else {
            addClass([headerTable, contentTable], ["e-tableborder"]);
          }
        }
        var tableWidthUnitFormat = tableWidth.toString() + unit;
        headerTable.style.setProperty("width", tableWidthUnitFormat);
        contentTable.style.setProperty("width", tableWidthUnitFormat);
      } else {
        this.restoreAdjustColumns();
      }
    };
    Grid2.prototype.restoreAdjustColumns = function() {
      if (this.enableAdaptiveUI && this.rowRenderingMode === "Vertical" || this.allowResizing && this.resizeSettings.mode === "Auto") {
        return;
      }
      var headerTable = this.getHeaderTable();
      var contentTable = this.getContentTable();
      removeClass([headerTable, contentTable], ["e-tableborder"]);
      headerTable.style.removeProperty("width");
      contentTable.style.removeProperty("width");
      if (this.groupSettings.columns.length || this.isDetail() || this.isRowDragable()) {
        var percentageWidth = this.isPercentageWidthGrid();
        var indentWidthUnitFormat_1 = this.defaultIndentWidth(percentageWidth).toString() + this.widthUnit(percentageWidth);
        var headerIndentCol = [].slice.call(headerTable.querySelector("colgroup").querySelectorAll(".e-group-intent, .e-detail-intent, .e-drag-intent"));
        headerIndentCol.forEach(function(element) {
          element.style.setProperty("width", indentWidthUnitFormat_1);
        });
        headerTable.querySelector(".e-emptycell").classList.remove("e-indentRefreshed");
        this.recalcIndentWidth();
      }
    };
    Grid2.prototype.widthUnit = function(percentageWidth) {
      return percentageWidth ? "%" : "px";
    };
    Grid2.prototype.defaultIndentWidth = function(percentageWidth) {
      return percentageWidth ? parseFloat((30 / this.element.offsetWidth * 100).toFixed(1)) : 30;
    };
    Grid2.prototype.isPercentageWidthGrid = function() {
      var column = this.getColumns().find(function(col) {
        return !isNullOrUndefined(col.width);
      });
      return column ? column.width.toString().indexOf("%") > -1 : false;
    };
    Grid2.prototype.createColumnchooser = function(x, y, target) {
      if (this.columnChooserModule) {
        this.columnChooserModule.renderColumnChooser(x, y, target);
      }
    };
    Grid2.prototype.initializeServices = function() {
      this.serviceLocator.register("widthService", this.widthService = new ColumnWidthService(this));
      this.serviceLocator.register("cellRendererFactory", new CellRendererFactory());
      this.serviceLocator.register("rendererFactory", new RendererFactory());
      this.serviceLocator.register("localization", this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale));
      this.serviceLocator.register("valueFormatter", this.valueFormatterService = new ValueFormatter(this.locale));
      this.serviceLocator.register("showHideService", this.showHider = new ShowHide(this));
      this.serviceLocator.register("ariaService", this.ariaService = new AriaService());
      this.serviceLocator.register("focus", this.focusModule = new FocusStrategy(this));
    };
    Grid2.prototype.processModel = function() {
      var gCols = this.groupSettings.columns;
      var sCols = this.sortSettings.columns;
      var flag;
      var j;
      if (this.allowGrouping) {
        var _loop_3 = function(i2, len2) {
          flag = false;
          j = 0;
          for (var sLen = sCols.length; j < sLen; j++) {
            if (sCols[parseInt(j.toString(), 10)].field === gCols[parseInt(i2.toString(), 10)]) {
              flag = true;
              break;
            }
          }
          if (!flag) {
            sCols.push({
              field: gCols[parseInt(i2.toString(), 10)],
              direction: "Ascending",
              isFromGroup: true
            });
          } else {
            if (this_3.allowSorting) {
              this_3.sortedColumns.push(sCols[parseInt(j.toString(), 10)].field);
            } else {
              sCols[parseInt(j.toString(), 10)].direction = "Ascending";
            }
          }
          if (!this_3.groupSettings.showGroupedColumn) {
            var column = this_3.enableColumnVirtualization ? this_3.columns.filter(function(c) {
              return c.field === gCols[parseInt(i2.toString(), 10)];
            })[0] : this_3.getColumnByField(gCols[parseInt(i2.toString(), 10)]);
            if (column) {
              column.visible = false;
            } else {
              this_3.log("initial_action", {
                moduleName: "group",
                columnName: gCols[parseInt(i2.toString(), 10)]
              });
            }
          }
        };
        var this_3 = this;
        for (var i = 0, len = gCols.length; i < len; i++) {
          _loop_3(i, len);
        }
      }
      if (!gCols.length) {
        for (var i = 0; i < sCols.length; i++) {
          this.sortedColumns.push(sCols[parseInt(i.toString(), 10)].field);
        }
      }
      this.rowTemplateFn = templateCompiler(this.rowTemplate);
      this.emptyRecordTemplateFn = templateCompiler(this.emptyRecordTemplate);
      this.detailTemplateFn = templateCompiler(this.detailTemplate);
      this.editTemplateFn = templateCompiler(this.editSettings.template);
      this.editHeaderTemplateFn = templateCompiler(this.editSettings.headerTemplate);
      this.editFooterTemplateFn = templateCompiler(this.editSettings.footerTemplate);
      this.columnChooserTemplateFn = templateCompiler(this.columnChooserSettings.template);
      this.columnChooserHeaderTemplateFn = templateCompiler(this.columnChooserSettings.headerTemplate);
      this.columnChooserFooterTemplateFn = templateCompiler(this.columnChooserSettings.footerTemplate);
      if (!isNullOrUndefined(this.parentDetails)) {
        var value = isNullOrUndefined(this.parentDetails.parentKeyFieldValue) ? "undefined" : this.parentDetails.parentKeyFieldValue;
        this.query.where(this.queryString, "equal", value, true);
      }
      this.initForeignColumn();
    };
    Grid2.prototype.initForeignColumn = function() {
      if (this.isForeignKeyEnabled(this.getColumns())) {
        this.notify(initForeignKeyColumn, this.getForeignKeyColumns());
      }
    };
    Grid2.prototype.enableVerticalRendering = function() {
      if (this.rowRenderingMode === "Vertical") {
        this.element.classList.add("e-row-responsive");
      } else {
        this.element.classList.remove("e-row-responsive");
      }
    };
    Grid2.prototype.gridRender = function() {
      var _a;
      this.updateRTL();
      if (this.rowRenderingMode === "Vertical") {
        this.element.classList.add("e-row-responsive");
      }
      if (this.enableHover) {
        this.element.classList.add("e-gridhover");
      }
      if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent) || Browser.isSafari()) {
        this.element.classList.add("e-mac-safari");
      }
      if (Browser.isDevice) {
        this.element.classList.add("e-device");
        if (this.adaptiveUIMode === "Desktop") {
          this.enableAdaptiveUI = false;
        }
      }
      if (this.adaptiveUIMode === "Mobile" && !(Browser.isDevice || this.rowRenderingMode === "Vertical")) {
        this.enableAdaptiveUI = false;
      }
      if (this.rowHeight) {
        this.element.classList.add("e-grid-min-height");
      }
      if (this.cssClass) {
        if (this.cssClass.indexOf(" ") !== -1) {
          (_a = this.element.classList).add.apply(_a, this.cssClass.split(" "));
        } else {
          this.element.classList.add(this.cssClass);
        }
      }
      if (this.allowRowDragAndDrop && this.rowDropSettings.targetID && Browser.info.name === "mozilla") {
        this.element.classList.add("e-disableuserselect");
      }
      if (this.editSettings.showAddNewRow && (this.enableVirtualization || this.enableInfiniteScrolling)) {
        this.editSettings.newRowPosition = "Top";
      }
      classList(this.element, ["e-responsive", "e-default"], []);
      var rendererFactory = this.serviceLocator.getService("rendererFactory");
      this.headerModule = rendererFactory.getRenderer(RenderType.Header);
      this.contentModule = rendererFactory.getRenderer(RenderType.Content);
      this.printModule = new Print(this, this.scrollModule);
      this.clipboardModule = new Clipboard(this, this.serviceLocator);
      this.renderModule.render();
      this.eventInitializer();
      this.createGridPopUpElement();
      this.widthService.setWidthToColumns();
      this.updateGridLines();
      this.applyTextWrap();
      this.createTooltip();
      this.enableBoxSelection();
    };
    Grid2.prototype.dataReady = function() {
      this.scrollModule.setWidth();
      this.scrollModule.setHeight();
      if (this.height !== "auto") {
        this.scrollModule.setPadding();
      }
    };
    Grid2.prototype.updateRTL = function() {
      if (this.enableRtl) {
        this.element.classList.add("e-rtl");
      } else {
        this.element.classList.remove("e-rtl");
      }
    };
    Grid2.prototype.createGridPopUpElement = function() {
      var popup = this.createElement("div", {
        className: "e-gridpopup"
      });
      popup.style.display = "none";
      var content2 = this.createElement("div", {
        className: content,
        attrs: {
          tabIndex: "-1"
        }
      });
      append([content2, this.createElement("div", {
        className: "e-uptail e-tail"
      })], popup);
      content2.appendChild(this.createElement("span"));
      append([content2, this.createElement("div", {
        className: "e-downtail e-tail"
      })], popup);
      this.element.appendChild(popup);
    };
    Grid2.prototype.updateGridLines = function() {
      classList(this.element, [], ["e-verticallines", "e-horizontallines", "e-hidelines", "e-bothlines"]);
      switch (this.gridLines) {
        case "Horizontal":
          this.element.classList.add("e-horizontallines");
          break;
        case "Vertical":
          this.element.classList.add("e-verticallines");
          break;
        case "None":
          this.element.classList.add("e-hidelines");
          break;
        case "Both":
          this.element.classList.add("e-bothlines");
          break;
      }
      this.updateResizeLines();
    };
    Grid2.prototype.updateResizeLines = function() {
      if (this.allowResizing && !(this.gridLines === "Vertical" || this.gridLines === "Both")) {
        this.element.classList.add("e-resize-lines");
      } else {
        this.element.classList.remove("e-resize-lines");
      }
    };
    Grid2.prototype.applyTextWrap = function() {
      if (this.allowTextWrap) {
        var headerRows = [].slice.call(this.element.getElementsByClassName("e-columnheader"));
        switch (this.textWrapSettings.wrapMode) {
          case "Header":
            wrap(this.element, false);
            wrap(this.getContent(), false);
            wrap(headerRows, true);
            break;
          case "Content":
            wrap(this.getContent(), true);
            wrap(this.element, false);
            wrap(headerRows, false);
            break;
          default:
            wrap(this.element, true);
            wrap(this.getContent(), false);
            wrap(headerRows, false);
        }
        if (this.textWrapSettings.wrapMode !== "Content") {
          this.notify(refreshHandlers, {});
        }
      }
    };
    Grid2.prototype.removeTextWrap = function() {
      wrap(this.element, false);
      var headerRows = [].slice.call(this.element.getElementsByClassName("e-columnheader"));
      wrap(headerRows, false);
      wrap(this.getContent(), false);
      if (this.textWrapSettings.wrapMode !== "Content") {
        this.notify(refreshHandlers, {});
      }
    };
    Grid2.prototype.createTooltip = function() {
      this.toolTipObj = new Tooltip({
        opensOn: "custom",
        content: "",
        cssClass: this.cssClass ? this.cssClass : null
      }, this.element);
    };
    Grid2.prototype.freezeRefresh = function() {
      if (this.enableVirtualization || this.enableInfiniteScrolling) {
        this.pageSettings.currentPage = 1;
      }
      this.componentRefresh();
    };
    Grid2.prototype.getTooltipStatus = function(element) {
      var headerTable = this.getHeaderTable();
      var headerDivTag = this.enableAdaptiveUI && this.rowRenderingMode === "Vertical" ? "e-gridcontent" : "e-gridheader";
      var htable = this.createTable(headerTable, headerDivTag, "header");
      var ctable = this.createTable(headerTable, headerDivTag, "content");
      var table2 = element.classList.contains("e-headercell") ? htable : ctable;
      var ele = element.classList.contains("e-headercell") ? "th" : "tr";
      table2.querySelector(ele).className = element.className;
      var targetElement = table2.querySelector(ele);
      targetElement.innerHTML = "";
      Array.from(element.childNodes).forEach(function(child) {
        targetElement.appendChild(child.cloneNode(true));
      });
      var width = table2.querySelector(ele).getBoundingClientRect().width;
      document.body.removeChild(htable);
      document.body.removeChild(ctable);
      if (width > element.getBoundingClientRect().width && !element.classList.contains("e-editedbatchcell") || this.enableAdaptiveUI && this.rowRenderingMode === "Vertical" && width > element.getBoundingClientRect().width * 0.55 - (this.height !== "auto" ? 16 : 0)) {
        return true;
      }
      return false;
    };
    Grid2.prototype.mouseMoveHandler = function(e) {
      if (this.isEllipsisTooltip()) {
        var element = parentsUntil(e.target, "e-ellipsistooltip");
        if (e.type === "mouseout" && (this.prevElement !== element || element !== parentsUntil(e.relatedTarget, "e-ellipsistooltip"))) {
          this.toolTipObj.close();
          this.prevElement = null;
        }
        var tagName = e.target.tagName;
        var elemNames = ["A", "BUTTON", "INPUT"];
        if (element && e.type !== "mouseout" && !(Browser.isDevice && elemNames.indexOf(tagName) !== -1)) {
          if (this.getTooltipStatus(element)) {
            var col = this.getColumns()[parseInt(element.getAttribute(ariaColIndex), 10) - 1];
            var domSetter = col && col.disableHtmlEncode ? "innerText" : "innerHTML";
            var contentDiv = this.createElement("div");
            if (element.getElementsByClassName("e-headertext").length) {
              var innerElement = element.getElementsByClassName("e-headertext")[0];
              contentDiv["" + domSetter] = this.sanitize(innerElement.innerText);
              this.toolTipObj.content = contentDiv;
            } else {
              contentDiv["" + domSetter] = this.sanitize(element.innerText);
              this.toolTipObj.content = contentDiv;
            }
            if (this.enableHtmlSanitizer) {
              this.toolTipObj.enableHtmlSanitizer = true;
            }
            if (col && col.disableHtmlEncode) {
              this.toolTipObj.enableHtmlParse = false;
            }
            if (element !== this.prevElement) {
              this.toolTipObj["open"](element);
            }
            this.prevElement = element;
          }
        }
      }
    };
    Grid2.prototype.isEllipsisTooltip = function() {
      var cols = this.getColumns();
      if (this.clipMode === "EllipsisWithTooltip") {
        return true;
      }
      for (var i = 0; i < cols.length; i++) {
        if (cols[parseInt(i.toString(), 10)].clipMode === "EllipsisWithTooltip") {
          return true;
        }
      }
      return false;
    };
    Grid2.prototype.scrollHandler = function() {
      if (this.isEllipsisTooltip()) {
        this.toolTipObj.close();
      }
    };
    Grid2.prototype.createTable = function(table2, tag, type) {
      var myTableDiv = this.createElement("div");
      myTableDiv.className = this.element.className;
      myTableDiv.style.cssText = "display: inline-block;visibility:hidden;position:absolute";
      var mySubDiv = this.createElement("div");
      mySubDiv.className = tag;
      var myTable = this.createElement("table");
      myTable.className = table2.className;
      myTable.style.cssText = "table-layout: auto;width: auto";
      var ele = type === "header" ? "th" : "td";
      var myTr = this.createElement("tr", {
        attrs: {
          role: "row"
        }
      });
      var mytd = this.createElement(ele);
      myTr.appendChild(mytd);
      myTable.appendChild(myTr);
      mySubDiv.appendChild(myTable);
      myTableDiv.appendChild(mySubDiv);
      document.body.appendChild(myTableDiv);
      return myTableDiv;
    };
    Grid2.prototype.onKeyPressed = function(e) {
      if (e.action === "tab" || e.action === "shiftTab") {
        this.toolTipObj.close();
      }
    };
    Grid2.prototype.wireEvents = function() {
      EventHandler.add(this.element, "click", this.mouseClickHandler, this);
      EventHandler.add(this.element, "touchend", this.mouseClickHandler, this);
      EventHandler.add(this.element, "focusout", this.focusOutHandler, this);
      EventHandler.add(this.element, "dblclick", this.dblClickHandler, this);
      EventHandler.add(this.element, "keydown", this.keyPressHandler, this);
      EventHandler.add(window, "resize", this.resetIndentWidth, this);
      if (this.allowKeyboard) {
        this.element.tabIndex = this.element.tabIndex === -1 ? 0 : this.element.tabIndex;
      }
      this.keyboardModule = new KeyboardEvents(this.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
      EventHandler.add(this.getContent().firstElementChild, "scroll", this.scrollHandler, this);
      EventHandler.add(this.element, "mouseover", this.mouseMoveHandler, this);
      EventHandler.add(this.element, "mouseout", this.mouseMoveHandler, this);
      EventHandler.add(this.getContent(), "touchstart", this.tapEvent, this);
      EventHandler.add(document.body, "keydown", this.keyDownHandler, this);
    };
    Grid2.prototype.unwireEvents = function() {
      EventHandler.remove(this.element, "click", this.mouseClickHandler);
      EventHandler.remove(this.element, "touchend", this.mouseClickHandler);
      EventHandler.remove(this.element, "focusout", this.focusOutHandler);
      EventHandler.remove(this.element, "dblclick", this.dblClickHandler);
      EventHandler.remove(this.getContent().firstElementChild, "scroll", this.scrollHandler);
      EventHandler.remove(this.element, "mouseover", this.mouseMoveHandler);
      EventHandler.remove(this.element, "mouseout", this.mouseMoveHandler);
      EventHandler.remove(this.element, "keydown", this.keyPressHandler);
      EventHandler.remove(this.getContent(), "touchstart", this.tapEvent);
      EventHandler.remove(document.body, "keydown", this.keyDownHandler);
      EventHandler.remove(window, "resize", this.resetIndentWidth);
    };
    Grid2.prototype.addListener = function() {
      if (this.isDestroyed) {
        return;
      }
      this.on(dataReady, this.dataReady, this);
      this.on(contentReady, this.recalcIndentWidth, this);
      this.on(headerRefreshed, this.recalcIndentWidth, this);
      this.on(refreshFrozenPosition, this.refreshFrozenPosition, this);
      this.on(refreshSplitFrozenColumn, this.refreshSplitFrozenColumn, this);
      this.dataBoundFunction = this.refreshMediaCol.bind(this);
      this.addEventListener(dataBound, this.dataBoundFunction);
      this.on(keyPressed, this.onKeyPressed, this);
    };
    Grid2.prototype.removeListener = function() {
      if (this.isDestroyed) {
        return;
      }
      this.off(dataReady, this.dataReady);
      this.off(contentReady, this.recalcIndentWidth);
      this.off(headerRefreshed, this.recalcIndentWidth);
      this.on(refreshFrozenPosition, this.refreshFrozenPosition, this);
      this.on(refreshSplitFrozenColumn, this.refreshSplitFrozenColumn, this);
      this.removeEventListener(dataBound, this.dataBoundFunction);
      this.off(keyPressed, this.onKeyPressed);
    };
    Grid2.prototype.getCurrentViewRecords = function() {
      if (isGroupAdaptive(this)) {
        return isNullOrUndefined(this.currentViewData.records) ? this.currentViewData : this.currentViewData.records;
      }
      if (this.groupSettings.enableLazyLoading) {
        return this.currentViewData;
      }
      return this.allowGrouping && this.groupSettings.columns.length && this.currentViewData.length && this.currentViewData.records ? this.currentViewData.records : this.currentViewData;
    };
    Grid2.prototype.mouseClickHandler = function(e) {
      if (this.isChildGrid(e) || parentsUntil(e.target, "e-gridpopup") && e.touches || this.element.getElementsByClassName("e-cloneproperties").length || this.checkEdit(e)) {
        return;
      }
      if ((!this.allowRowDragAndDrop && (parentsUntil(e.target, gridContent) || e.target.tagName === "TD") || parentsUntil(e.target, "e-headercell") && parentsUntil(e.target, "e-headercell").querySelector(".e-checkselectall") || !(this.allowGrouping || this.allowReordering) && parentsUntil(e.target, "e-gridheader")) && e.touches) {
        return;
      }
      if (parentsUntil(e.target, "e-gridheader") && this.allowRowDragAndDrop && !parentsUntil(e.target, "e-filterbarcell") && e.target && ["A", "BUTTON", "INPUT"].indexOf(e.target.tagName) === -1) {
        e.preventDefault();
      }
      var args = this.getRowInfo(e.target);
      var cancel = "cancel";
      args["" + cancel] = false;
      var isDataRow = false;
      var tr = closest(e.target, "tr");
      if (tr && tr.getAttribute("data-uid")) {
        var rowObj = this.getRowObjectFromUID(tr.getAttribute("data-uid"));
        isDataRow = rowObj ? rowObj.isDataRow : false;
      }
      if (isDataRow) {
        this.trigger(recordClick, args);
      }
      this.notify(click, e);
    };
    Grid2.prototype.checkEdit = function(e) {
      var tr = parentsUntil(e.target, row);
      var isEdit = this.editSettings.mode !== "Batch" && this.isEdit && tr && (tr.classList.contains(editedRow) || tr.classList.contains(addedRow) && !this.editSettings.showAddNewRow);
      return !parentsUntil(e.target, "e-unboundcelldiv") && (isEdit || parentsUntil(e.target, rowCell) && parentsUntil(e.target, rowCell).classList.contains("e-editedbatchcell"));
    };
    Grid2.prototype.dblClickHandler = function(e) {
      var grid = parentsUntil(e.target, "e-grid");
      if (isNullOrUndefined(grid) || grid.id !== this.element.id || closest(e.target, ".e-unboundcelldiv")) {
        return;
      }
      var dataRow = false;
      var tr = closest(e.target, "tr");
      if (tr && tr.getAttribute("data-uid")) {
        var rowObj = this.getRowObjectFromUID(tr.getAttribute("data-uid"));
        dataRow = rowObj ? rowObj.isDataRow : false;
      }
      var args = this.getRowInfo(e.target);
      args.target = e.target;
      if (dataRow) {
        this.trigger(recordDoubleClick, args);
      }
      this.notify(dblclick, e);
    };
    Grid2.prototype.focusOutHandler = function(e) {
      if (this.isChildGrid(e)) {
        return;
      }
      if (!parentsUntil(e.target, "e-grid")) {
        this.element.querySelector(".e-gridpopup").style.display = "None";
      }
      var filterClear = this.element.querySelector(".e-cancel:not(.e-hide)");
      if (filterClear && !filterClear.parentElement.classList.contains("e-tbar-btn")) {
        filterClear.classList.add("e-hide");
      }
      var relatedTarget = e.relatedTarget;
      var ariaOwns = relatedTarget ? relatedTarget.getAttribute("aria-owns") : null;
      if ((!relatedTarget || !parentsUntil(relatedTarget, "e-grid") && (!isNullOrUndefined(ariaOwns) && ariaOwns) !== e.target.getAttribute("aria-owns")) && !this.keyPress && this.isEdit && !Browser.isDevice) {
        if (this.editSettings.mode === "Batch" && !((parentsUntil(relatedTarget, "e-ddl") || parentsUntil(relatedTarget, "e-ddt")) && (parentsUntil(relatedTarget, "e-multi-select-list-wrapper") || parentsUntil(relatedTarget, "e-input-filter")) && parentsUntil(relatedTarget, "e-input-group")) && (parentsUntil(relatedTarget, "e-uploader") || !(relatedTarget && isNullOrUndefined(parentsUntil(relatedTarget, "e-input-group"))) && !parentsUntil(e.target, "edit-custom-template"))) {
          this.editModule.saveCell();
          this.notify(editNextValCell, {});
        }
        if (this.editSettings.mode === "Normal" && !this.isWidgetsDestroyed) {
          this.editModule.editFormValidate();
        }
      }
      if (this.editSettings.showAddNewRow) {
        this.editModule.isShowAddedRowValidate = false;
      }
      this.keyPress = false;
    };
    Grid2.prototype.isChildGrid = function(e) {
      var gridElement = parentsUntil(e.target, "e-grid");
      if (gridElement && gridElement.id !== this.element.id || parentsUntil(e.target, "e-unboundcelldiv") && isNullOrUndefined(gridElement)) {
        return true;
      }
      return false;
    };
    Grid2.prototype.mergePersistGridData = function(persistedData) {
      var data = this.getLocalData();
      if (!(isNullOrUndefined(data) || data === "") || !isNullOrUndefined(persistedData)) {
        var dataObj = !isNullOrUndefined(persistedData) ? persistedData : JSON.parse(data);
        var keys = Object.keys(dataObj);
        this.isProtectedOnChange = true;
        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
          var key = keys_1[_i];
          if (typeof this["" + key] === "object" && !isNullOrUndefined(this["" + key])) {
            if (Array.isArray(this["" + key]) && key === "columns") {
              this.setFrozenCount();
              setColumnIndex(this["" + key]);
              this.mergeColumns(dataObj["" + key], this["" + key]);
              this.mergedColumns = true;
              this["" + key] = dataObj["" + key];
            } else {
              extend(this["" + key], dataObj["" + key]);
            }
          } else {
            this["" + key] = dataObj["" + key];
          }
        }
        this.isProtectedOnChange = false;
      }
    };
    Grid2.prototype.mergeColumns = function(storedColumn, columns) {
      var storedColumns = storedColumn;
      var isFrozenGrid = this.isFrozenGrid();
      var _loop_4 = function(i2) {
        var localCol = columns.filter(function(tCol) {
          return isFrozenGrid ? tCol.index === storedColumns[parseInt(i2.toString(), 10)]["" + initialFrozenColumnIndex] : tCol.index === storedColumns[parseInt(i2.toString(), 10)].index;
        })[0];
        if (!isNullOrUndefined(localCol)) {
          if (isFrozenGrid) {
            localCol = extend({}, localCol, {}, true);
            localCol.freeze = storedColumns[parseInt(i2.toString(), 10)].freeze;
          }
          if (localCol.columns && localCol.columns.length) {
            this_4.mergeColumns(storedColumns[parseInt(i2.toString(), 10)].columns, localCol.columns);
            storedColumns[parseInt(i2.toString(), 10)] = extend(localCol, storedColumns[parseInt(i2.toString(), 10)], {}, true);
          } else {
            storedColumns[parseInt(i2.toString(), 10)] = extend(localCol, storedColumns[parseInt(i2.toString(), 10)], {}, true);
          }
        }
      };
      var this_4 = this;
      for (var i = 0; i < storedColumns.length; i++) {
        _loop_4(i);
      }
    };
    Grid2.prototype.isDetail = function() {
      return !isNullOrUndefined(this.detailTemplate) || !isNullOrUndefined(this.childGrid);
    };
    Grid2.prototype.isCommandColumn = function(columns) {
      var _this_1 = this;
      return columns.some(function(col) {
        if (col.columns) {
          return _this_1.isCommandColumn(col.columns);
        }
        return !!(col.commands || col.commandsTemplate);
      });
    };
    Grid2.prototype.isForeignKeyEnabled = function(columns) {
      var _this_1 = this;
      return columns.some(function(col) {
        if (col.columns) {
          return _this_1.isForeignKeyEnabled(col.columns);
        }
        return !!(col.dataSource && col.foreignKeyValue);
      });
    };
    Grid2.prototype.keyPressHandler = function(e) {
      var presskey = extend(e, {
        cancel: false
      });
      this.trigger("keyPressed", presskey);
      if (presskey.cancel === true || this.isEdit && e && parentsUntil(e.target, "e-gridform") && parentsUntil(e.target, "e-ddl") && e.action === "open" && e.altKey === true && e.code === "ArrowDown") {
        e.stopImmediatePropagation();
      }
    };
    Grid2.prototype.keyDownHandler = function(e) {
      if (e.altKey) {
        if (e.keyCode === 74) {
          if (this.keyA) {
            this.notify(groupCollapse, {
              target: e.target,
              collapse: false
            });
            this.keyA = false;
          } else {
            if (this.focusModule && this.focusModule.currentInfo && this.focusModule.currentInfo.element) {
              removeClass([this.focusModule.currentInfo.element, this.focusModule.currentInfo.elementToFocus], ["e-focused", "e-focus"]);
              this.focusModule.currentInfo.element.tabIndex = -1;
            }
            if (!this.element.classList.contains("e-childgrid")) {
              this.element.focus();
            }
          }
        }
        if (e.keyCode === 87) {
          var focusModule = this.focusModule;
          if (focusModule) {
            if (!this.currentViewData.length) {
              return;
            }
            focusModule.focusContent();
            focusModule.addOutline();
          }
        }
        if (e.keyCode === 65) {
          this.keyA = true;
        }
        if (e.keyCode === 72 && this.keyA) {
          this.notify(groupCollapse, {
            target: e.target,
            collapse: true
          });
          this.keyA = false;
        }
      }
      if (e.keyCode === 13) {
        this.notify(enterKeyHandler, e);
      }
    };
    Grid2.prototype.keyActionHandler = function(e) {
      if (this.isChildGrid(e) || this.editModule && (this.editModule.alertDObj && this.editModule.alertDObj.visible || this.editModule.dialogObj && this.editModule.dialogObj.visible) || this.isEdit && (!this.editSettings.showAddNewRow || this.editSettings.showAddNewRow && this.element.querySelector(editedRow)) && e.action !== "escape" && e.action !== "enter" && e.action !== "shiftEnter" && e.action !== "tab" && e.action !== "shiftTab") {
        return;
      } else {
        this.keyPress = true;
      }
      if (this.allowKeyboard) {
        if (e.action === "ctrlPlusP") {
          e.preventDefault();
          this.print();
        }
        this.notify(keyPressed, e);
      }
    };
    Grid2.prototype.setInjectedModules = function(modules) {
      this.injectedModules = modules;
    };
    Grid2.prototype.updateColumnObject = function() {
      prepareColumns(this.columns, this.enableColumnVirtualization, this);
      setColumnIndex(this.columns);
      this.initForeignColumn();
      this.notify(autoCol, {});
    };
    Grid2.prototype.refreshFrozenPosition = function(obj) {
      if (obj && obj.isModeChg) {
        this.refreshColumns();
        this.notify(refreshResizePosition, {});
      } else {
        this.refreshColumns();
      }
    };
    Grid2.prototype.getForeignKeyColumns = function() {
      var cols = this.enableColumnVirtualization ? this.columns : this.getColumns();
      return cols.filter(function(col) {
        return col.isForeignColumn();
      });
    };
    Grid2.prototype.getRowHeight = function(accurateHeight) {
      return this.rowHeight ? this.rowHeight : getRowHeight(this.element, accurateHeight);
    };
    Grid2.prototype.refreshColumns = function() {
      this.freezeColumnRefresh = true;
      this.setFrozenCount();
      this.updateFrozenColumnsWidth();
      if (this.isFrozenGrid()) {
        this.isPreventScrollEvent = true;
      }
      this.updateColumnObject();
      this.checkLockColumns(this.getColumns());
      this.refresh();
      if (this.isFrozenGrid() && this.enableColumnVirtualization) {
        var left = this.getContent().querySelector(".e-movablescrollbar").scrollLeft;
        this.getHeaderContent().querySelector("." + headerContent).scrollLeft = left;
        this.getContent().querySelector("." + content).scrollLeft = left;
      }
    };
    Grid2.prototype.excelExport = function(excelExportProperties, isMultipleExport, workbook, isBlob) {
      if (this.exportGrids && this.exportGrids.length) {
        var gridIds = this.exportGrids.slice();
        return this.exportMultipleExcelGrids(gridIds, excelExportProperties, isMultipleExport, workbook, isBlob);
      } else {
        return this.excelExportModule ? this.excelExportModule.Map(this, excelExportProperties, isMultipleExport, workbook, false, isBlob) : null;
      }
    };
    Grid2.prototype.csvExport = function(excelExportProperties, isMultipleExport, workbook, isBlob) {
      return this.excelExportModule ? this.excelExportModule.Map(this, excelExportProperties, isMultipleExport, workbook, true, isBlob) : null;
    };
    Grid2.prototype.pdfExport = function(pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {
      if (this.exportGrids && this.exportGrids.length) {
        var gridIds = this.exportGrids.slice();
        return this.exportMultiplePdfGrids(gridIds, pdfExportProperties, isMultipleExport, pdfDoc, isBlob);
      } else {
        return this.pdfExportModule ? this.pdfExportModule.Map(this, pdfExportProperties, isMultipleExport, pdfDoc, isBlob) : null;
      }
    };
    Grid2.prototype.exportMultiplePdfGrids = function(gridIds, pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {
      var _this = this;
      if (gridIds.length !== 0) {
        var currentGridId = gridIds.shift();
        var currentGridInstance = document.getElementById(currentGridId).ej2_instances[0];
        var exportPromise = currentGridInstance.pdfExportModule ? currentGridInstance.pdfExportModule.Map(currentGridInstance, pdfExportProperties, isMultipleExport, pdfDoc, isBlob) : Promise.resolve();
        return exportPromise.then(function(exportedGridResults) {
          isMultipleExport = gridIds.length === 1 ? false : true;
          return _this.exportMultiplePdfGrids(gridIds, pdfExportProperties, isMultipleExport, exportedGridResults, isBlob);
        });
      }
      return null;
    };
    Grid2.prototype.exportMultipleExcelGrids = function(gridIds, excelExportProperties, isMultipleExport, workbook, isBlob) {
      var _this = this;
      if (gridIds.length !== 0) {
        var currentGridId = gridIds.shift();
        var currentGridInstance = document.getElementById(currentGridId).ej2_instances[0];
        var exportPromise = currentGridInstance.excelExportModule ? currentGridInstance.excelExportModule.Map(currentGridInstance, excelExportProperties, isMultipleExport, workbook, false, isBlob) : null;
        return exportPromise.then(function(exportedGridResults) {
          isMultipleExport = gridIds.length === 1 ? false : true;
          return _this.exportMultipleExcelGrids(gridIds, excelExportProperties, isMultipleExport, exportedGridResults, isBlob);
        });
      }
      return null;
    };
    Grid2.prototype.groupColumn = function(columnName) {
      if (this.groupModule) {
        this.groupModule.groupColumn(columnName);
      }
    };
    Grid2.prototype.groupExpandAll = function() {
      if (this.groupModule) {
        this.groupModule.expandAll();
      }
    };
    Grid2.prototype.groupCollapseAll = function() {
      if (this.groupModule) {
        this.groupModule.collapseAll();
      }
    };
    Grid2.prototype.clearGrouping = function() {
      if (this.groupModule) {
        this.groupModule.clearGrouping();
      }
    };
    Grid2.prototype.ungroupColumn = function(columnName) {
      if (this.groupModule) {
        this.groupModule.ungroupColumn(columnName);
      }
    };
    Grid2.prototype.openColumnChooser = function(x, y) {
      if (this.columnChooserModule) {
        this.columnChooserModule.openColumnChooser(x, y);
      }
    };
    Grid2.prototype.scrollRefresh = function() {
      var _this_1 = this;
      var refresh = function() {
        _this_1.scrollModule.refresh();
        _this_1.off(contentReady, refresh);
      };
      this.on(contentReady, refresh, this);
    };
    Grid2.prototype.detailCollapseAll = function() {
      if (this.detailRowModule) {
        this.detailRowModule.collapseAll();
      }
    };
    Grid2.prototype.detailExpandAll = function() {
      if (this.detailRowModule) {
        this.detailRowModule.expandAll();
      }
    };
    Grid2.prototype.clearCellSelection = function() {
      if (this.selectionModule) {
        this.selectionModule.clearCellSelection();
      }
    };
    Grid2.prototype.clearRowSelection = function() {
      if (this.selectionModule) {
        this.selectionModule.clearRowSelection();
      }
    };
    Grid2.prototype.selectCells = function(rowCellIndexes) {
      if (this.selectionModule) {
        this.selectionModule.selectCells(rowCellIndexes);
      }
    };
    Grid2.prototype.selectRowsByRange = function(startIndex, endIndex) {
      if (this.selectionModule) {
        this.selectionModule.selectRowsByRange(startIndex, endIndex);
      }
    };
    Grid2.prototype.isContextMenuOpen = function() {
      return this.contextMenuModule && this.contextMenuModule.isOpen;
    };
    Grid2.prototype.ensureModuleInjected = function(module) {
      return this.getInjectedModules().indexOf(module) >= 0;
    };
    Grid2.prototype.destroyTemplate = function(propertyNames, index) {
      this.clearTemplate(propertyNames, index);
    };
    Grid2.prototype.log = function(type, args) {
      var injectedModules = this.getInjectedModules();
      var logger = injectedModules.find(function(item) {
        return item.name === "Logger";
      });
      if (!logger) {
        Grid_1.Inject(Logger);
        this.enableLogger = true;
        this.injectModules();
      }
      this.loggerModule ? this.loggerModule.log(type, args) : /* @__PURE__ */ function() {
        return 0;
      }();
    };
    Grid2.prototype.applyBiggerTheme = function(element) {
      if (this.element.classList.contains("e-bigger")) {
        element.classList.add("e-bigger");
      }
    };
    Grid2.prototype.getPreviousRowData = function() {
      var previousRowData = this.getRowsObject()[this.getRows().length - 1].data;
      return previousRowData;
    };
    Grid2.prototype.hideScroll = function() {
      var content2 = this.getContent().querySelector("." + content);
      if (content2.scrollHeight <= content2.clientHeight) {
        this.scrollModule.removePadding();
        content2.style.overflowY = "auto";
      }
    };
    Grid2.prototype.getRowIndexByPrimaryKey = function(value) {
      var pkName = this.getPrimaryKeyFieldNames()[0];
      value = typeof value === "object" ? value["" + pkName] : value;
      var rows = this.getRowsObject();
      for (var i = 0; i < rows.length; i++) {
        if (rows[parseInt(i.toString(), 10)].isDetailRow || rows[parseInt(i.toString(), 10)].isCaptionRow) {
          continue;
        }
        var pKvalue = rows[parseInt(i.toString(), 10)].data["" + pkName];
        if (pkName.split(".").length > 1) {
          pKvalue = performComplexDataOperation(pkName, rows[parseInt(i.toString(), 10)].data);
        }
        if (pKvalue === value) {
          return rows[parseInt(i.toString(), 10)].index;
        }
      }
      return -1;
    };
    Grid2.prototype.grabColumnByFieldFromAllCols = function(field, isForeignKey) {
      var column;
      this.columnModel = [];
      this.updateColumnModel(this.columns);
      var gCols = this.columnModel;
      for (var i = 0; i < gCols.length; i++) {
        if (!isForeignKey && field === gCols[parseInt(i.toString(), 10)].field || isForeignKey && gCols[parseInt(i.toString(), 10)].isForeignColumn() && field === gCols[parseInt(i.toString(), 10)].foreignKeyValue) {
          column = gCols[parseInt(i.toString(), 10)];
          break;
        }
      }
      return column;
    };
    Grid2.prototype.grabColumnByUidFromAllCols = function(uid2) {
      var column;
      this.columnModel = [];
      this.updateColumnModel(this.columns);
      var gCols = this.columnModel;
      for (var i = 0; i < gCols.length; i++) {
        if (uid2 === gCols[parseInt(i.toString(), 10)].uid) {
          column = gCols[parseInt(i.toString(), 10)];
        }
      }
      return column;
    };
    Grid2.prototype.getFilteredRecords = function() {
      if (this.allowFiltering && this.filterSettings.columns.length || this.searchSettings.key.length) {
        var query = this.renderModule.data.generateQuery(true);
        if (this.dataSource && this.renderModule.data.isRemote() && this.dataSource instanceof DataManager) {
          return this.renderModule.data.getData(this.dataSource, query);
        } else {
          if (this.dataSource instanceof DataManager) {
            return this.dataSource.executeLocal(query);
          } else {
            return new DataManager(this.dataSource, query).executeLocal(query);
          }
        }
      }
      return [];
    };
    Grid2.prototype.getUserAgent = function() {
      var userAgent = Browser.userAgent.toLowerCase();
      return /iphone|ipod|ipad|macintosh/.test(userAgent);
    };
    Grid2.prototype.tapEvent = function(e) {
      if (this.getUserAgent()) {
        if (!Global.timer) {
          Global.timer = setTimeout(function() {
            Global.timer = null;
          }, 300);
        } else {
          clearTimeout(Global.timer);
          Global.timer = null;
          this.dblClickHandler(e);
          this.notify(doubleTap, e);
        }
      }
    };
    Grid2.prototype.getRowUid = function(prefix) {
      return "" + prefix + this.rowUid++;
    };
    Grid2.prototype.getRowElementByUID = function(uid2) {
      var rowEle;
      var rows = [];
      var cntRows = [].slice.call(this.getContent().querySelector(tbody).children);
      if (this.frozenRows) {
        rows = [].slice.call(this.getHeaderContent().querySelector(tbody).children);
        rows = rows.concat(cntRows);
      } else {
        rows = cntRows;
      }
      for (var _i = 0, rows_2 = rows; _i < rows_2.length; _i++) {
        var row2 = rows_2[_i];
        if (row2.getAttribute("data-uid") === uid2) {
          rowEle = row2;
          break;
        }
      }
      return rowEle;
    };
    Grid2.prototype.getHiddenColumns = function() {
      var cols = [];
      for (var _i = 0, _a = this.columnModel; _i < _a.length; _i++) {
        var col = _a[_i];
        if (col.visible === false) {
          cols.push(col);
        }
      }
      return cols;
    };
    Grid2.prototype.calculatePageSizeByParentHeight = function(containerHeight) {
      if (this.allowPaging) {
        if (this.allowTextWrap && this.textWrapSettings.wrapMode === "Header" || !this.allowTextWrap) {
          var pagesize = 0;
          if (containerHeight.indexOf("%") !== -1) {
            containerHeight = parseInt(containerHeight, 10) / 100 * this.element.clientHeight;
          }
          var nonContentHeight = this.getNoncontentHeight() + this.getRowHeight();
          if (containerHeight > nonContentHeight) {
            var contentHeight = 0;
            contentHeight = containerHeight - this.getNoncontentHeight();
            pagesize = contentHeight / this.getRowHeight();
          }
          if (pagesize > 0) {
            return Math.floor(pagesize);
          }
        }
      }
      return 0;
    };
    Grid2.prototype.getNoncontentHeight = function() {
      var height = 0;
      if (this.getHeaderContent() && !isNullOrUndefined(this.getHeaderContent().clientHeight)) {
        height += this.getHeaderContent().clientHeight;
      }
      if (this.toolbar && !isNullOrUndefined(this.element.querySelector(".e-toolbar").clientHeight)) {
        height += this.element.querySelector(".e-toolbar").clientHeight;
      }
      if (this.allowPaging && !isNullOrUndefined(this.element.querySelector(".e-gridpager").clientHeight)) {
        height += this.element.querySelector(".e-gridpager").clientHeight;
      }
      if (this.showColumnChooser && !isNullOrUndefined(this.element.querySelector(".e-columnheader").clientHeight)) {
        height += this.element.querySelector(".e-columnheader").clientHeight;
      }
      if (this.allowGrouping && this.groupSettings.showDropArea && !isNullOrUndefined(this.element.querySelector(".e-groupdroparea").clientHeight)) {
        height += this.element.querySelector(".e-groupdroparea").clientHeight;
      }
      if (this.aggregates.length > 0 && !isNullOrUndefined(this.element.querySelector(".e-summaryrow").clientHeight)) {
        for (var i = 0; i < this.element.getElementsByClassName("e-summaryrow").length; i++) {
          height += this.element.getElementsByClassName("e-summaryrow")[parseInt(i.toString(), 10)].clientHeight;
        }
      }
      return height;
    };
    Grid2.prototype.getSummaryValues = function(summaryCol, summaryData) {
      return DataUtil.aggregates[summaryCol.type.toLowerCase()](summaryData, summaryCol.field);
    };
    Grid2.prototype.serverExcelExport = function(url, headers) {
      this.isExcel = true;
      this.exportGrid(url, headers);
    };
    Grid2.prototype.serverPdfExport = function(url, headers) {
      this.isExcel = false;
      this.exportGrid(url, headers);
    };
    Grid2.prototype.serverCsvExport = function(url, headers) {
      this.isExcel = true;
      this.exportGrid(url, headers);
    };
    Grid2.prototype.exportGrid = function(url, headers) {
      var _this_1 = this;
      var grid = this;
      var query = grid.getDataModule().generateQuery(true);
      var state = new UrlAdaptor().processQuery(new DataManager({
        url: ""
      }), query);
      var queries = JSON.parse(state.data);
      var gridModel = JSON.parse(this.addOnPersist(["allowGrouping", "allowPaging", "pageSettings", "sortSettings", "allowPdfExport", "allowExcelExport", "aggregates", "filterSettings", "groupSettings", "columns", "locale", "searchSettings"]));
      var include = ["field", "headerText", "type", "format", "visible", "foreignKeyValue", "foreignKeyField", "template", "index", "width", "textAlign", "headerTextAlign", "columns"];
      gridModel.filterSettings.columns = queries.where;
      gridModel.searchSettings.fields = queries.search && queries.search[0]["fields"] || [];
      gridModel.sortSettings.columns = queries.sorted;
      gridModel.columns = this.setHeaderText(gridModel.columns, include);
      var form = this.createElement("form", {
        id: "ExportForm"
      });
      form.style.display = "none";
      var gridInput = this.createElement("input", {
        id: "gridInput",
        attrs: {
          name: "gridModel"
        }
      });
      gridInput.value = JSON.stringify(gridModel);
      form.method = "POST";
      form.action = url;
      form.appendChild(gridInput);
      if (headers && headers.headers && Array.isArray(headers.headers)) {
        headers.headers.forEach(function(header) {
          Object.keys(header).forEach(function(key) {
            var value = typeof header["" + key] === "string" ? header["" + key] : JSON.stringify(header["" + key]);
            var headerInput = _this_1.createElement("input", {
              attrs: {
                name: key,
                value,
                type: "hidden"
              }
            });
            form.appendChild(headerInput);
          });
        });
      }
      document.body.appendChild(form);
      form.submit();
      form.remove();
    };
    Grid2.prototype.setHeaderText = function(columns, include) {
      for (var i = 0; i < columns.length; i++) {
        var column = this.getColumnByUid(columns[parseInt(i.toString(), 10)].uid);
        columns[parseInt(i.toString(), 10)].headerText = column.headerText;
        if (!isNullOrUndefined(column.template)) {
          columns[parseInt(i.toString(), 10)].template = "true";
        }
        if (columns[parseInt(i.toString(), 10)].format) {
          columns[parseInt(i.toString(), 10)].format = getNumberFormat(this.getFormat(columns[parseInt(i.toString(), 10)].format), columns[parseInt(i.toString(), 10)].type, false, defaultCurrencyCode);
          if (column.type === "datetime" || column.type === "date" || column.type === "time") {
            columns[parseInt(i.toString(), 10)].format = columns[parseInt(i.toString(), 10)].format.toString().replace("AM/PM", "tt");
          }
        }
        if (columns[parseInt(i.toString(), 10)].columns) {
          this.setHeaderText(columns[parseInt(i.toString(), 10)].columns, include);
        }
        var keys = Object.keys(columns[parseInt(i.toString(), 10)]);
        for (var j = 0; j < keys.length; j++) {
          if (include.indexOf(keys[parseInt(j.toString(), 10)]) < 0) {
            delete columns[parseInt(i.toString(), 10)][keys[parseInt(j.toString(), 10)]];
          }
        }
      }
      return columns;
    };
    Grid2.prototype.getFormat = function(format) {
      return typeof format === "object" ? !isNullOrUndefined(format.format) ? format.format : format.skeleton : format;
    };
    Grid2.prototype.isCollapseStateEnabled = function() {
      var isExpanded = "isExpanded";
      return this["" + isExpanded] === false;
    };
    Grid2.prototype.updateRowValue = function(key, rowData) {
      var args = {
        requestType: "save",
        data: rowData
      };
      this.showSpinner();
      this.notify(updateData, args);
      this.refresh();
    };
    Grid2.prototype.setForeignKeyData = function() {
      this.dataBind();
      var colpending = this.getDataModule().getForeignKeyDataState();
      if (colpending.isPending) {
        this.getDataModule().setForeignKeyDataState({});
        colpending.resolver();
      } else {
        this.getDataModule().setForeignKeyDataState({
          isDataChanged: false
        });
        if (this.contentModule || this.headerModule) {
          this.renderModule.render();
        }
      }
    };
    Grid2.prototype.resetFilterDlgPosition = function(field) {
      var header = this.getColumnHeaderByField(field);
      if (header) {
        var target = header.querySelector(".e-filtermenudiv");
        var filterDlg = this.element.querySelector(".e-filter-popup");
        if (target) {
          var gClient = this.element.getBoundingClientRect();
          var fClient = target.getBoundingClientRect();
          if (filterDlg) {
            if (filterDlg.offsetWidth + fClient.right > gClient.right) {
              filterDlg.style.left = (fClient.right - filterDlg.offsetWidth - gClient.left).toString() + "px";
            } else {
              filterDlg.style.left = (fClient.right - gClient.left).toString() + "px";
            }
          }
        }
      }
    };
    Grid2.prototype.renderTemplates = function(callBack) {
      var isReactChild = this.parentDetails && this.parentDetails.parentInstObj && this.parentDetails.parentInstObj.isReact;
      var isReactPrintGrid = this.printGridParent && this.printGridParent.isReact;
      if ((isReactChild || isReactPrintGrid) && this["portals"]) {
        var parentInstObj = isReactPrintGrid ? this.printGridParent : this.parentDetails.parentInstObj;
        parentInstObj["portals"] = parentInstObj["portals"].concat(this["portals"]);
        parentInstObj.renderTemplates(callBack);
        this["portals"] = void 0;
      } else {
        var portals = "portals";
        this.notify("reactTemplateRender", this["" + portals]);
        this.renderReactTemplates(callBack);
      }
    };
    Grid2.prototype.batchUpdate = function(changes) {
      this.processRowChanges(changes);
    };
    Grid2.prototype.batchAsyncUpdate = function(changes) {
      this.processBulkRowChanges(changes);
    };
    Grid2.prototype.processBulkRowChanges = function(changes) {
      var _this_1 = this;
      if (!this.dataToBeUpdated) {
        this.dataToBeUpdated = Object.assign({
          addedRecords: [],
          changedRecords: [],
          deletedRecords: []
        }, changes);
        setTimeout(function() {
          _this_1.processRowChanges(_this_1.dataToBeUpdated);
          _this_1.dataToBeUpdated = null;
        }, this.asyncTimeOut);
      } else {
        var loopstring = [addedRecords, changedRecords, deletedRecords];
        var keyField = this.getPrimaryKeyFieldNames()[0];
        for (var i = 0; i < loopstring.length; i++) {
          if (changes[loopstring[parseInt(i.toString(), 10)]]) {
            compareChanges(this, changes, loopstring[parseInt(i.toString(), 10)], keyField);
          }
        }
      }
    };
    Grid2.prototype.processRowChanges = function(changes) {
      var _this_1 = this;
      var keyField = this.getPrimaryKeyFieldNames()[0];
      changes = Object.assign({
        addedRecords: [],
        changedRecords: [],
        deletedRecords: []
      }, changes);
      var promise = this.getDataModule().saveChanges(changes, keyField, {}, this.getDataModule().generateQuery().requiresCount());
      if (this.getDataModule().isRemote()) {
        promise.then(function() {
          _this_1.setNewData();
        });
      } else {
        this.setNewData();
      }
    };
    Grid2.prototype.setNewData = function() {
      var _this_1 = this;
      var oldValues = JSON.parse(JSON.stringify(this.getCurrentViewRecords()));
      var getData = this.getDataModule().getData({}, this.getDataModule().generateQuery().requiresCount());
      getData.then(function(e) {
        _this_1.bulkRefresh(e.result, oldValues, e.count);
      });
    };
    Grid2.prototype.deleteRowElement = function(row2) {
      var tr = this.getRowElementByUID(row2.uid);
      remove(tr);
    };
    Grid2.prototype.bulkRefresh = function(result, oldValues, count2) {
      var _this_1 = this;
      var rowObj = this.getRowsObject();
      var keyField = this.getPrimaryKeyFieldNames()[0];
      var _loop_5 = function(i2) {
        if (!result.filter(function(e) {
          return e["" + keyField] === rowObj[parseInt(i2.toString(), 10)].data["" + keyField];
        }).length) {
          this_5.deleteRowElement(rowObj[parseInt(i2.toString(), 10)]);
          rowObj.splice(i2, 1);
          i2--;
        }
        out_i_1 = i2;
      };
      var this_5 = this, out_i_1;
      for (var i = 0; i < rowObj.length; i++) {
        _loop_5(i);
        i = out_i_1;
      }
      var _loop_6 = function(i2) {
        var isRowExist;
        oldValues.filter(function(e) {
          if (e["" + keyField] === result[parseInt(i2.toString(), 10)]["" + keyField]) {
            if (e !== result[parseInt(i2.toString(), 10)]) {
              _this_1.setRowData(result[parseInt(i2.toString(), 10)]["" + keyField], result[parseInt(i2.toString(), 10)]);
            }
            isRowExist = true;
          }
        });
        if (!isRowExist) {
          this_6.renderRowElement(result[parseInt(i2.toString(), 10)], i2);
        }
      };
      var this_6 = this;
      for (var i = 0; i < result.length; i++) {
        _loop_6(i);
      }
      this.currentViewData = result;
      var rows = [].slice.call(this.getContentTable().getElementsByClassName(row));
      resetRowIndex(this, this.getRowsObject(), rows);
      setRowElements(this);
      if (this.allowPaging) {
        this.notify(inBoundModelChanged, {
          module: "pager",
          properties: {
            totalRecordsCount: count2
          }
        });
      }
    };
    Grid2.prototype.renderRowElement = function(data, index) {
      var row2 = new RowRenderer(this.serviceLocator, null, this);
      var model = new RowModelGenerator(this);
      var modelData = model.generateRows([data]);
      var tr = row2.render(modelData[0], this.getColumns());
      this.addRowObject(modelData[0], index);
      var tbody2 = this.getContentTable().querySelector(tbody);
      if (tbody2.querySelector(".e-emptyrow")) {
        var emptyRow = tbody2.querySelector(".e-emptyrow");
        emptyRow.parentNode.removeChild(emptyRow);
        if (this.frozenRows && this.element.querySelector(".e-frozenrow-empty")) {
          this.element.querySelector(".e-frozenrow-empty").classList.remove("e-frozenrow-empty");
        }
      }
      if (this.frozenRows && index < this.frozenRows) {
        tbody2 = this.getHeaderContent().querySelector(tbody);
      } else {
        tbody2 = this.getContent().querySelector(tbody);
      }
      tbody2 = this.getContent().querySelector(tbody);
      tbody2.appendChild(tr);
    };
    Grid2.prototype.addRowObject = function(row2, index) {
      this.getRowsObject().splice(index, 1, row2);
    };
    Grid2.prototype.updateVisibleExpandCollapseRows = function() {
      var rows = this.getRowsObject();
      for (var i = 0, len = rows.length; i < len; i++) {
        if ((rows[parseInt(i.toString(), 10)].isDataRow || rows[parseInt(i.toString(), 10)].isAggregateRow) && this.getRowElementByUID(rows[parseInt(i.toString(), 10)].uid) && this.getRowElementByUID(rows[parseInt(i.toString(), 10)].uid).style.display === "none") {
          rows[parseInt(i.toString(), 10)].visible = false;
        } else {
          rows[parseInt(i.toString(), 10)].visible = true;
        }
      }
    };
    Grid2.prototype.sanitize = function(value) {
      if (this.enableHtmlSanitizer) {
        return SanitizeHtmlHelper.sanitize(value);
      }
      return value;
    };
    Grid2.prototype.getHeight = function(height) {
      if (!Number.isInteger(height) && height.indexOf("%") !== -1) {
        height = parseInt(height, 10) / 100 * this.element.clientHeight;
      } else if (!Number.isInteger(height) && this.height !== "auto") {
        height = parseInt(height, 10);
      } else {
        height = this.height;
      }
      return height;
    };
    Grid2.prototype.getFrozenRightContent = function() {
      return this.contentModule.getPanel();
    };
    Grid2.prototype.getFrozenRightHeader = function() {
      return this.headerModule.getPanel();
    };
    Grid2.prototype.getMovableHeaderTbody = function() {
      return this.getHeaderContent().querySelector(tbody);
    };
    Grid2.prototype.getMovableContentTbody = function() {
      return this.getContent().querySelector(tbody);
    };
    Grid2.prototype.getFrozenHeaderTbody = function() {
      return this.getHeaderContent().querySelector(tbody);
    };
    Grid2.prototype.getFrozenLeftContentTbody = function() {
      return this.getContent().querySelector(tbody);
    };
    Grid2.prototype.getFrozenRightHeaderTbody = function() {
      return this.getHeaderContent().querySelector(tbody);
    };
    Grid2.prototype.getFrozenRightContentTbody = function() {
      return this.getContent().querySelector(tbody);
    };
    Grid2.prototype.showResponsiveCustomFilter = function(isCustom) {
      if (this.filterModule) {
        this.filterModule.showCustomFilter(isCustom || this.rowRenderingMode === "Vertical");
      }
    };
    Grid2.prototype.showResponsiveCustomSort = function(isCustom) {
      if (this.sortModule) {
        this.sortModule.showCustomSort(isCustom || this.rowRenderingMode === "Vertical");
      }
    };
    Grid2.prototype.showResponsiveCustomColumnChooser = function(isCustom) {
      if (this.columnChooserModule) {
        this.columnChooserModule.showCustomColumnChooser(isCustom || this.rowRenderingMode === "Vertical");
      }
    };
    Grid2.prototype.showAdaptiveFilterDialog = function() {
      if (this.enableAdaptiveUI) {
        this.showResponsiveCustomFilter(true);
      }
    };
    Grid2.prototype.showAdaptiveSortDialog = function() {
      if (this.enableAdaptiveUI) {
        this.showResponsiveCustomSort(true);
      }
    };
    Grid2.prototype.getCurrentVisibleColumns = function(isColVirtualization) {
      var cols = [];
      var gridCols = isColVirtualization ? this.getColumns() : this.columnModel;
      for (var _i = 0, gridCols_1 = gridCols; _i < gridCols_1.length; _i++) {
        var col = gridCols_1[_i];
        if (col.visible) {
          cols.push(col);
        }
      }
      return cols;
    };
    Grid2.prototype.enableInfiniteAggrgate = function() {
      if (this.enableInfiniteScrolling && this.groupSettings.columns.length && !this.groupSettings.disablePageWiseAggregates && !this.groupSettings.enableLazyLoading) {
        this.setProperties({
          groupSettings: {
            disablePageWiseAggregates: true
          }
        }, true);
      }
    };
    var Grid_1;
    __decorate4([Property([])], Grid2.prototype, "currentViewData", void 0);
    __decorate4([Property()], Grid2.prototype, "parentDetails", void 0);
    __decorate4([Property()], Grid2.prototype, "showHider", void 0);
    __decorate4([Property([])], Grid2.prototype, "columns", void 0);
    __decorate4([Property(true)], Grid2.prototype, "enableAltRow", void 0);
    __decorate4([Property(true)], Grid2.prototype, "enableHover", void 0);
    __decorate4([Property(false)], Grid2.prototype, "enableAutoFill", void 0);
    __decorate4([Property(true)], Grid2.prototype, "allowKeyboard", void 0);
    __decorate4([Property(false)], Grid2.prototype, "enableStickyHeader", void 0);
    __decorate4([Property(false)], Grid2.prototype, "enableHtmlSanitizer", void 0);
    __decorate4([Property(false)], Grid2.prototype, "allowTextWrap", void 0);
    __decorate4([Complex({}, TextWrapSettings)], Grid2.prototype, "textWrapSettings", void 0);
    __decorate4([Complex({}, ResizeSettings)], Grid2.prototype, "resizeSettings", void 0);
    __decorate4([Property(false)], Grid2.prototype, "allowPaging", void 0);
    __decorate4([Complex({}, PageSettings)], Grid2.prototype, "pageSettings", void 0);
    __decorate4([Complex({}, LoadingIndicator)], Grid2.prototype, "loadingIndicator", void 0);
    __decorate4([Property(true)], Grid2.prototype, "enableVirtualMaskRow", void 0);
    __decorate4([Property(false)], Grid2.prototype, "enableVirtualization", void 0);
    __decorate4([Property(false)], Grid2.prototype, "enableColumnVirtualization", void 0);
    __decorate4([Property(false)], Grid2.prototype, "enableInfiniteScrolling", void 0);
    __decorate4([Complex({}, SearchSettings)], Grid2.prototype, "searchSettings", void 0);
    __decorate4([Property(false)], Grid2.prototype, "allowSorting", void 0);
    __decorate4([Property("Ellipsis")], Grid2.prototype, "clipMode", void 0);
    __decorate4([Property(true)], Grid2.prototype, "allowMultiSorting", void 0);
    __decorate4([Property(false)], Grid2.prototype, "allowExcelExport", void 0);
    __decorate4([Property(false)], Grid2.prototype, "allowPdfExport", void 0);
    __decorate4([Complex({}, SortSettings)], Grid2.prototype, "sortSettings", void 0);
    __decorate4([Complex({}, InfiniteScrollSettings)], Grid2.prototype, "infiniteScrollSettings", void 0);
    __decorate4([Property(true)], Grid2.prototype, "allowSelection", void 0);
    __decorate4([Property(-1)], Grid2.prototype, "selectedRowIndex", void 0);
    __decorate4([Complex({}, SelectionSettings)], Grid2.prototype, "selectionSettings", void 0);
    __decorate4([Property(false)], Grid2.prototype, "allowFiltering", void 0);
    __decorate4([Property("Horizontal")], Grid2.prototype, "rowRenderingMode", void 0);
    __decorate4([Property(false)], Grid2.prototype, "enableAdaptiveUI", void 0);
    __decorate4([Property("Both")], Grid2.prototype, "adaptiveUIMode", void 0);
    __decorate4([Property(false)], Grid2.prototype, "allowReordering", void 0);
    __decorate4([Property(false)], Grid2.prototype, "allowResizing", void 0);
    __decorate4([Property(false)], Grid2.prototype, "allowRowDragAndDrop", void 0);
    __decorate4([Complex({}, RowDropSettings)], Grid2.prototype, "rowDropSettings", void 0);
    __decorate4([Complex({}, FilterSettings)], Grid2.prototype, "filterSettings", void 0);
    __decorate4([Property(false)], Grid2.prototype, "allowGrouping", void 0);
    __decorate4([Property(false)], Grid2.prototype, "enableImmutableMode", void 0);
    __decorate4([Property(false)], Grid2.prototype, "showColumnMenu", void 0);
    __decorate4([Property(false)], Grid2.prototype, "autoFit", void 0);
    __decorate4([Complex({}, GroupSettings)], Grid2.prototype, "groupSettings", void 0);
    __decorate4([Complex({}, EditSettings)], Grid2.prototype, "editSettings", void 0);
    __decorate4([Collection([], AggregateRow)], Grid2.prototype, "aggregates", void 0);
    __decorate4([Property(false)], Grid2.prototype, "showColumnChooser", void 0);
    __decorate4([Complex({}, ColumnChooserSettings)], Grid2.prototype, "columnChooserSettings", void 0);
    __decorate4([Property(false)], Grid2.prototype, "enableHeaderFocus", void 0);
    __decorate4([Property("auto")], Grid2.prototype, "height", void 0);
    __decorate4([Property("auto")], Grid2.prototype, "width", void 0);
    __decorate4([Property("Default")], Grid2.prototype, "gridLines", void 0);
    __decorate4([Property()], Grid2.prototype, "rowTemplate", void 0);
    __decorate4([Property()], Grid2.prototype, "emptyRecordTemplate", void 0);
    __decorate4([Property()], Grid2.prototype, "detailTemplate", void 0);
    __decorate4([Property()], Grid2.prototype, "childGrid", void 0);
    __decorate4([Property()], Grid2.prototype, "queryString", void 0);
    __decorate4([Property("AllPages")], Grid2.prototype, "printMode", void 0);
    __decorate4([Property("Expanded")], Grid2.prototype, "hierarchyPrintMode", void 0);
    __decorate4([Property([])], Grid2.prototype, "dataSource", void 0);
    __decorate4([Property(null)], Grid2.prototype, "rowHeight", void 0);
    __decorate4([Property()], Grid2.prototype, "query", void 0);
    __decorate4([Property("USD")], Grid2.prototype, "currencyCode", void 0);
    __decorate4([Property()], Grid2.prototype, "exportGrids", void 0);
    __decorate4([Property()], Grid2.prototype, "toolbar", void 0);
    __decorate4([Property()], Grid2.prototype, "contextMenuItems", void 0);
    __decorate4([Property()], Grid2.prototype, "columnMenuItems", void 0);
    __decorate4([Property()], Grid2.prototype, "toolbarTemplate", void 0);
    __decorate4([Property()], Grid2.prototype, "pagerTemplate", void 0);
    __decorate4([Property(0)], Grid2.prototype, "frozenRows", void 0);
    __decorate4([Property(0)], Grid2.prototype, "frozenColumns", void 0);
    __decorate4([Property("")], Grid2.prototype, "cssClass", void 0);
    __decorate4([Property("All")], Grid2.prototype, "columnQueryMode", void 0);
    __decorate4([Property({})], Grid2.prototype, "currentAction", void 0);
    __decorate4([Property("")], Grid2.prototype, "ej2StatePersistenceVersion", void 0);
    __decorate4([Event2()], Grid2.prototype, "created", void 0);
    __decorate4([Event2()], Grid2.prototype, "destroyed", void 0);
    __decorate4([Event2()], Grid2.prototype, "load", void 0);
    __decorate4([Event2()], Grid2.prototype, "rowDataBound", void 0);
    __decorate4([Event2()], Grid2.prototype, "queryCellInfo", void 0);
    __decorate4([Event2()], Grid2.prototype, "headerCellInfo", void 0);
    __decorate4([Event2()], Grid2.prototype, "actionBegin", void 0);
    __decorate4([Event2()], Grid2.prototype, "actionComplete", void 0);
    __decorate4([Event2()], Grid2.prototype, "actionFailure", void 0);
    __decorate4([Event2()], Grid2.prototype, "dataBound", void 0);
    __decorate4([Event2()], Grid2.prototype, "recordDoubleClick", void 0);
    __decorate4([Event2()], Grid2.prototype, "recordClick", void 0);
    __decorate4([Event2()], Grid2.prototype, "rowSelecting", void 0);
    __decorate4([Event2()], Grid2.prototype, "rowSelected", void 0);
    __decorate4([Event2()], Grid2.prototype, "rowDeselecting", void 0);
    __decorate4([Event2()], Grid2.prototype, "rowDeselected", void 0);
    __decorate4([Event2()], Grid2.prototype, "cellSelecting", void 0);
    __decorate4([Event2()], Grid2.prototype, "cellSelected", void 0);
    __decorate4([Event2()], Grid2.prototype, "cellDeselecting", void 0);
    __decorate4([Event2()], Grid2.prototype, "cellDeselected", void 0);
    __decorate4([Event2()], Grid2.prototype, "columnSelecting", void 0);
    __decorate4([Event2()], Grid2.prototype, "columnSelected", void 0);
    __decorate4([Event2()], Grid2.prototype, "columnDeselecting", void 0);
    __decorate4([Event2()], Grid2.prototype, "columnDeselected", void 0);
    __decorate4([Event2()], Grid2.prototype, "columnDragStart", void 0);
    __decorate4([Event2()], Grid2.prototype, "columnDrag", void 0);
    __decorate4([Event2()], Grid2.prototype, "columnDrop", void 0);
    __decorate4([Event2()], Grid2.prototype, "printComplete", void 0);
    __decorate4([Event2()], Grid2.prototype, "beforePrint", void 0);
    __decorate4([Event2()], Grid2.prototype, "pdfQueryCellInfo", void 0);
    __decorate4([Event2()], Grid2.prototype, "pdfHeaderQueryCellInfo", void 0);
    __decorate4([Event2()], Grid2.prototype, "pdfAggregateQueryCellInfo", void 0);
    __decorate4([Event2()], Grid2.prototype, "excelAggregateQueryCellInfo", void 0);
    __decorate4([Event2()], Grid2.prototype, "exportDetailDataBound", void 0);
    __decorate4([Event2()], Grid2.prototype, "exportDetailTemplate", void 0);
    __decorate4([Event2()], Grid2.prototype, "excelQueryCellInfo", void 0);
    __decorate4([Event2()], Grid2.prototype, "excelHeaderQueryCellInfo", void 0);
    __decorate4([Event2()], Grid2.prototype, "beforeExcelExport", void 0);
    __decorate4([Event2()], Grid2.prototype, "excelExportComplete", void 0);
    __decorate4([Event2()], Grid2.prototype, "beforePdfExport", void 0);
    __decorate4([Event2()], Grid2.prototype, "pdfExportComplete", void 0);
    __decorate4([Event2()], Grid2.prototype, "rowDragStartHelper", void 0);
    __decorate4([Event2()], Grid2.prototype, "detailDataBound", void 0);
    __decorate4([Event2()], Grid2.prototype, "rowDragStart", void 0);
    __decorate4([Event2()], Grid2.prototype, "rowDrag", void 0);
    __decorate4([Event2()], Grid2.prototype, "rowDrop", void 0);
    __decorate4([Event2()], Grid2.prototype, "toolbarClick", void 0);
    __decorate4([Event2()], Grid2.prototype, "beforeOpenColumnChooser", void 0);
    __decorate4([Event2()], Grid2.prototype, "beforeOpenAdaptiveDialog", void 0);
    __decorate4([Event2()], Grid2.prototype, "batchAdd", void 0);
    __decorate4([Event2()], Grid2.prototype, "batchDelete", void 0);
    __decorate4([Event2()], Grid2.prototype, "batchCancel", void 0);
    __decorate4([Event2()], Grid2.prototype, "beforeBatchAdd", void 0);
    __decorate4([Event2()], Grid2.prototype, "beforeBatchDelete", void 0);
    __decorate4([Event2()], Grid2.prototype, "beforeBatchSave", void 0);
    __decorate4([Event2()], Grid2.prototype, "beginEdit", void 0);
    __decorate4([Event2()], Grid2.prototype, "commandClick", void 0);
    __decorate4([Event2()], Grid2.prototype, "cellEdit", void 0);
    __decorate4([Event2()], Grid2.prototype, "cellSave", void 0);
    __decorate4([Event2()], Grid2.prototype, "cellSaved", void 0);
    __decorate4([Event2()], Grid2.prototype, "resizeStart", void 0);
    __decorate4([Event2()], Grid2.prototype, "resizing", void 0);
    __decorate4([Event2()], Grid2.prototype, "resizeStop", void 0);
    __decorate4([Event2()], Grid2.prototype, "keyPressed", void 0);
    __decorate4([Event2()], Grid2.prototype, "beforeDataBound", void 0);
    __decorate4([Event2()], Grid2.prototype, "contextMenuOpen", void 0);
    __decorate4([Event2()], Grid2.prototype, "contextMenuClick", void 0);
    __decorate4([Event2()], Grid2.prototype, "columnMenuOpen", void 0);
    __decorate4([Event2()], Grid2.prototype, "columnMenuClick", void 0);
    __decorate4([Event2()], Grid2.prototype, "checkBoxChange", void 0);
    __decorate4([Event2()], Grid2.prototype, "beforeCopy", void 0);
    __decorate4([Event2()], Grid2.prototype, "beforePaste", void 0);
    __decorate4([Event2()], Grid2.prototype, "beforeAutoFill", void 0);
    __decorate4([Event2()], Grid2.prototype, "columnDataStateChange", void 0);
    __decorate4([Event2()], Grid2.prototype, "dataStateChange", void 0);
    __decorate4([Event2()], Grid2.prototype, "dataSourceChanged", void 0);
    __decorate4([Event2()], Grid2.prototype, "exportGroupCaption", void 0);
    __decorate4([Event2()], Grid2.prototype, "lazyLoadGroupExpand", void 0);
    __decorate4([Event2()], Grid2.prototype, "lazyLoadGroupCollapse", void 0);
    __decorate4([Event2()], Grid2.prototype, "beforeDetailTemplateDetach", void 0);
    Grid2 = Grid_1 = __decorate4([NotifyPropertyChanges], Grid2);
    return Grid2;
  }(Component)
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/print.js
function getCloneProperties() {
  return ["aggregates", "allowGrouping", "allowFiltering", "allowMultiSorting", "allowReordering", "allowSorting", "allowTextWrap", "childGrid", "columns", "currentViewData", "dataSource", "detailTemplate", "enableAltRow", "enableColumnVirtualization", "filterSettings", "gridLines", "groupSettings", "height", "locale", "pageSettings", "printMode", "query", "queryString", "enableRtl", "rowHeight", "rowTemplate", "sortSettings", "textWrapSettings", "allowPaging", "hierarchyPrintMode", "searchSettings", "queryCellInfo", "beforeDataBound", "enableHtmlSanitizer"];
}
var Print = (
  /** @class */
  function() {
    function Print2(parent, scrollModule) {
      this.isAsyncPrint = false;
      this.defered = new Deferred();
      this.parent = parent;
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(contentReady, this.isContentReady(), this);
      this.actionBeginFunction = this.actionBegin.bind(this);
      this.parent.addEventListener(actionBegin, this.actionBeginFunction);
      this.parent.on(onEmpty, this.onEmpty.bind(this));
      this.parent.on(hierarchyPrint, this.hierarchyPrint, this);
      this.scrollModule = scrollModule;
    }
    Print2.prototype.isContentReady = function() {
      var _this = this;
      if (this.isPrintGrid() && (this.parent.hierarchyPrintMode === "None" || !this.parent.childGrid)) {
        return this.contentReady;
      }
      return function() {
        _this.defered.promise.then(function() {
          _this.contentReady();
        });
        if (_this.isPrintGrid()) {
          _this.hierarchyPrint();
        }
      };
    };
    Print2.prototype.hierarchyPrint = function() {
      this.removeColGroup(this.parent);
      var printGridObj = window.printGridObj;
      if (printGridObj && !printGridObj.element.querySelector("[aria-busy=true")) {
        printGridObj.printModule.defered.resolve();
      }
    };
    Print2.prototype.print = function() {
      this.renderPrintGrid();
    };
    Print2.prototype.onEmpty = function() {
      if (this.isPrintGrid()) {
        this.contentReady();
      }
    };
    Print2.prototype.actionBegin = function() {
      if (this.isPrintGrid()) {
        this.isAsyncPrint = true;
      }
    };
    Print2.prototype.renderPrintGrid = function() {
      var gObj = this.parent;
      var element = createElement("div", {
        id: this.parent.element.id + "_print",
        className: gObj.element.className + " e-print-grid"
      });
      element.classList.remove("e-gridhover");
      document.body.appendChild(element);
      var printGrid = new Grid(getPrintGridModel(gObj, gObj.hierarchyPrintMode));
      for (var i = 0; i < printGrid.columns.length; i++) {
        printGrid.columns[parseInt(i.toString(), 10)] = extend({}, printGrid.columns[parseInt(i.toString(), 10)]);
        if (!gObj.getFrozenColumns() && gObj.isFrozenGrid()) {
          printGrid.columns[parseInt(i.toString(), 10)].freeze = void 0;
        }
      }
      if (this.parent.isAngular) {
        printGrid.viewContainerRef = this.parent.viewContainerRef;
      }
      printGrid.load = function() {
      };
      printGrid.query = gObj.getQuery().clone();
      window.printGridObj = printGrid;
      printGrid.isPrinting = true;
      var modules = printGrid.getInjectedModules();
      var injectedModues = gObj.getInjectedModules();
      if (!modules || modules.length !== injectedModues.length) {
        printGrid.setInjectedModules(injectedModues);
      }
      gObj.notify(printGridInit, {
        element,
        printgrid: printGrid
      });
      this.parent.log("exporting_begin", this.getModuleName());
      printGrid.registeredTemplate = this.parent.registeredTemplate;
      printGrid.isVue = this.parent.isVue;
      if (this.parent.isVue) {
        printGrid.vueInstance = this.parent.vueInstance;
      }
      printGrid.printGridParent = gObj;
      printGrid.appendTo(element);
      if (!gObj.isVue3) {
        printGrid.trigger = gObj.trigger;
      }
    };
    Print2.prototype.contentReady = function() {
      var _this = this;
      if (this.isPrintGrid()) {
        var gObj = this.parent;
        if (this.isAsyncPrint) {
          this.printGrid();
          return;
        }
        var args = {
          requestType: "print",
          element: gObj.element,
          selectedRows: gObj.getContentTable().querySelectorAll('tr[aria-selected="true"]'),
          cancel: false,
          hierarchyPrintMode: gObj.hierarchyPrintMode
        };
        if (!this.isAsyncPrint) {
          gObj.trigger(beforePrint, args);
        }
        if (args.cancel) {
          detach(gObj.element);
          return;
        }
        if (!this.isAsyncPrint) {
          if (this.parent.printGridParent && this.parent.printGridParent.isReact) {
            this.parent.printGridParent.renderTemplates(function() {
              _this.printGrid();
            });
          } else {
            this.printGrid();
          }
        }
      }
    };
    Print2.prototype.printGrid = function() {
      var gObj = this.parent;
      if (gObj.height !== "auto") {
        var cssProps = this.scrollModule.getCssProperties();
        var contentDiv = gObj.element.querySelector("." + content);
        var headerDiv = gObj.element.querySelector("." + gridHeader);
        contentDiv.style.height = "auto";
        contentDiv.style.overflowY = "auto";
        headerDiv.style[cssProps.padding] = "";
        headerDiv.firstElementChild.style[cssProps.border] = "";
      }
      if (gObj.allowGrouping) {
        if (!gObj.groupSettings.columns.length) {
          gObj.element.querySelector(".e-groupdroparea").style.display = "none";
        } else {
          this.removeColGroup(gObj);
        }
      }
      for (var _i = 0, _a = [].slice.call(gObj.element.getElementsByClassName(content)); _i < _a.length; _i++) {
        var element = _a[_i];
        element.style.overflowX = "hidden";
      }
      var waitingPop = [].slice.call(gObj.element.getElementsByClassName("e-spin-show"));
      for (var _b = 0, _c = [].slice.call(waitingPop); _b < _c.length; _b++) {
        var element = _c[_b];
        classList(element, ["e-spin-hide"], ["e-spin-show"]);
      }
      this.printGridElement(gObj);
      gObj.isPrinting = false;
      delete window.printGridObj;
      var args = {
        element: gObj.element
      };
      gObj.trigger(printComplete, args);
      gObj.destroy();
      this.parent.log("exporting_complete", this.getModuleName());
    };
    Print2.prototype.printGridElement = function(gObj) {
      classList(gObj.element, ["e-print-grid-layout"], ["e-print-grid"]);
      if (gObj.isPrinting) {
        detach(gObj.element);
      }
      this.printWind = window.open("", "print", "height=" + window.outerHeight + ",width=" + window.outerWidth + ",tabbar=no");
      if (!isNullOrUndefined(this.printWind)) {
        this.printWind.moveTo(0, 0);
        this.printWind.resizeTo(screen.availWidth, screen.availHeight);
        this.printWind = print(gObj.element, this.printWind);
      }
    };
    Print2.prototype.removeColGroup = function(gObj) {
      var depth = gObj.groupSettings.columns.length;
      var element = gObj.element;
      var id = "#" + gObj.element.id;
      if (!depth) {
        return;
      }
      var groupCaption = selectAll(".e-groupcaption", element);
      var colSpan = gObj.groupSettings.enableLazyLoading ? (parseInt(groupCaption[0].getAttribute("colspan"), 10) - (gObj.groupSettings.columns.length - 1)).toString() : groupCaption[depth - 1].getAttribute("colspan");
      for (var i = 0; i < groupCaption.length; i++) {
        groupCaption[parseInt(i.toString(), 10)].setAttribute("colspan", colSpan);
      }
      var colGroups = selectAll("colgroup" + id + "colgroup", element);
      var contentColGroups = selectAll(".e-content colgroup", element);
      var footerColGroups = selectAll(".e-summarycontent colgroup", element);
      this.hideColGroup(colGroups, depth);
      this.hideColGroup(contentColGroups, depth);
      this.hideColGroup(footerColGroups, depth);
    };
    Print2.prototype.hideColGroup = function(colGroups, depth) {
      for (var i = 0; i < colGroups.length; i++) {
        for (var j = 0; j < depth; j++) {
          colGroups[parseInt(i.toString(), 10)].children[parseInt(j.toString(), 10)].style.display = "none";
        }
      }
    };
    Print2.prototype.isPrintGrid = function() {
      return this.parent.element.id.indexOf("_print") > 0 && this.parent.isPrinting;
    };
    Print2.prototype.destroy = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(contentReady, this.contentReady.bind(this));
      this.parent.removeEventListener(actionBegin, this.actionBeginFunction);
      this.parent.off(onEmpty, this.onEmpty.bind(this));
      this.parent.off(hierarchyPrint, this.hierarchyPrint);
    };
    Print2.prototype.getModuleName = function() {
      return "print";
    };
    Print2.printGridProp = getCloneProperties().concat([beforePrint, printComplete, load]);
    return Print2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/base/util.js
function doesImplementInterface(target, checkFor) {
  return target.prototype && checkFor in target.prototype;
}
function valueAccessor(field, data, column) {
  return isNullOrUndefined(field) || field === "" ? "" : DataUtil.getObject(field, data);
}
function headerValueAccessor(field, column) {
  return isNullOrUndefined(field) || field === "" ? "" : DataUtil.getObject(field, column);
}
function getUpdateUsingRaf(updateFunction, callBack) {
  requestAnimationFrame(function() {
    try {
      callBack(null, updateFunction());
    } catch (e) {
      callBack(e);
    }
  });
}
function isExportColumns(exportProperties) {
  return !isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.columns) && exportProperties.columns.length > 0;
}
function updateColumnTypeForExportColumns(exportProperties, gObj) {
  var exportColumns = exportProperties.columns;
  var gridColumns = gObj.columns;
  for (var i = 0; i < exportColumns.length; i++) {
    if (gridColumns.length - 1 >= i) {
      if (gridColumns[parseInt(i.toString(), 10)].columns) {
        for (var j = 0; j < gridColumns[parseInt(i.toString(), 10)].columns.length; j++) {
          exportColumns[parseInt(i.toString(), 10)].columns[parseInt(j.toString(), 10)].type = gridColumns[parseInt(i.toString(), 10)].columns[parseInt(j.toString(), 10)].type;
        }
      } else {
        exportColumns[parseInt(i.toString(), 10)].type = gridColumns[parseInt(i.toString(), 10)].type;
      }
    }
  }
}
function updatecloneRow(grid) {
  var nRows = [];
  var actualRows = grid.vRows;
  for (var i = 0; i < actualRows.length; i++) {
    if (actualRows[parseInt(i.toString(), 10)].isDataRow) {
      nRows.push(actualRows[parseInt(i.toString(), 10)]);
    } else if (!actualRows[parseInt(i.toString(), 10)].isDataRow) {
      nRows.push(actualRows[parseInt(i.toString(), 10)]);
      if (!actualRows[parseInt(i.toString(), 10)].isExpand && actualRows[parseInt(i.toString(), 10)].isCaptionRow) {
        i += getCollapsedRowsCount(actualRows[parseInt(i.toString(), 10)], grid);
      }
    }
  }
  grid.vcRows = nRows;
}
var count = 0;
function getCollapsedRowsCount(val, grid) {
  count = 0;
  var gSummary = "gSummary";
  var total = "count";
  var gLen = grid.groupSettings.columns.length;
  var records = "records";
  var items = "items";
  var value = val["" + gSummary];
  var dataRowCnt = 0;
  var agrCnt = "aggregatesCount";
  if (value === val.data["" + total]) {
    if (grid.groupSettings.columns.length && !isNullOrUndefined(val["" + agrCnt]) && val["" + agrCnt]) {
      if (grid.groupSettings.columns.length !== 1) {
        count += val.indent !== 0 && value < 2 ? val["" + gSummary] * (gLen - val.indent + (gLen - val.indent) * val["" + agrCnt]) : val["" + gSummary] * (gLen - val.indent + (gLen - val.indent - 1) * val["" + agrCnt]) + val["" + agrCnt];
      } else if (grid.groupSettings.columns.length === 1) {
        count += val["" + gSummary] * (gLen - val.indent) + val["" + agrCnt];
      }
    } else if (grid.groupSettings.columns.length) {
      if (grid.groupSettings.columns.length !== 1) {
        count += val["" + gSummary] * (grid.groupSettings.columns.length - val.indent);
      } else {
        count += val["" + gSummary];
      }
    }
    return count;
  } else {
    for (var i = 0, len = val.data["" + items].length; i < len; i++) {
      var gLevel = val.data["" + items][parseInt(i.toString(), 10)];
      count += gLevel["" + items].length + (gLen !== grid.columns.length && !isNullOrUndefined(gLevel["" + items]["" + records]) ? gLevel["" + items]["" + records].length : 0);
      dataRowCnt += !isNullOrUndefined(gLevel["" + items]["" + records]) && !isNullOrUndefined(val["" + agrCnt]) ? gLevel["" + items]["" + records].length : gLevel["" + items].length;
      if (gLevel["" + items].GroupGuid && gLevel["" + items].childLevels !== 0) {
        recursive(gLevel);
      }
    }
    count += val.data["" + items].length;
    if (!isNullOrUndefined(val["" + agrCnt])) {
      if (val["" + agrCnt] && count && dataRowCnt !== 0) {
        count += (count - dataRowCnt) * val["" + agrCnt] + val["" + agrCnt];
      }
    }
  }
  return count;
}
function recursive(row2) {
  var items = "items";
  var rCount = "count";
  for (var j = 0, length_1 = row2["" + items].length; j < length_1; j++) {
    var nLevel = row2["" + items][parseInt(j.toString(), 10)];
    count += nLevel["" + rCount];
    if (nLevel["" + items].childLevels !== 0) {
      recursive(nLevel);
    }
  }
}
function iterateArrayOrObject(collection, predicate) {
  var result = [];
  for (var i = 0, len = collection.length; i < len; i++) {
    var pred = predicate(collection[parseInt(i.toString(), 10)], i);
    if (!isNullOrUndefined(pred)) {
      result.push(pred);
    }
  }
  return result;
}
function iterateExtend(array) {
  var obj = [];
  for (var i = 0; i < array.length; i++) {
    obj.push(extend({}, getActualProperties(array[parseInt(i.toString(), 10)]), {}, true));
  }
  return obj;
}
function templateCompiler(template) {
  if (template) {
    try {
      var validSelector = template[0] !== "<";
      if (typeof template === "function") {
        return compile(template);
      } else if (validSelector && document.querySelectorAll(template).length) {
        return compile(document.querySelector(template).innerHTML.trim());
      } else {
        return compile(template);
      }
    } catch (e) {
      return compile(template);
    }
  }
  return void 0;
}
function setStyleAndAttributes(node, customAttributes) {
  var copyAttr = {};
  var literals = ["style", "class"];
  extend(copyAttr, customAttributes, {});
  if ("style" in copyAttr) {
    setStyleAttribute(node, copyAttr[literals[0]]);
    delete copyAttr[literals[0]];
  }
  if ("class" in copyAttr) {
    addClass([node], copyAttr[literals[1]]);
    delete copyAttr[literals[1]];
  }
  attributes(node, copyAttr);
}
function extend2(copied, first, second, exclude) {
  var moved = extend(copied, first, second);
  var values = Object.keys(moved);
  for (var i = 0; i < values.length; i++) {
    if (exclude && exclude.indexOf(values[parseInt(i.toString(), 10)]) !== -1) {
      delete moved[values[parseInt(i.toString(), 10)]];
    }
  }
  return moved;
}
function setColumnIndex(columnModel, ind) {
  if (ind === void 0) {
    ind = 0;
  }
  for (var i = 0, len = !isNullOrUndefined(columnModel) ? columnModel.length : 0; i < len; i++) {
    if (columnModel[parseInt(i.toString(), 10)].columns) {
      columnModel[parseInt(i.toString(), 10)].index = isNullOrUndefined(columnModel[parseInt(i.toString(), 10)].index) ? ind : columnModel[parseInt(i.toString(), 10)].index;
      ind++;
      ind = setColumnIndex(columnModel[parseInt(i.toString(), 10)].columns, ind);
    } else {
      columnModel[parseInt(i.toString(), 10)].index = isNullOrUndefined(columnModel[parseInt(i.toString(), 10)].index) ? ind : columnModel[parseInt(i.toString(), 10)].index;
      ind++;
    }
  }
  return ind;
}
function prepareColumns(columns, autoWidth, gObj) {
  for (var c = 0, len = !isNullOrUndefined(columns) ? columns.length : 0; c < len; c++) {
    var column = void 0;
    if (typeof columns[parseInt(c.toString(), 10)] === "string") {
      column = new Column({
        field: columns[parseInt(c.toString(), 10)]
      }, gObj);
    } else if (!(columns[parseInt(c.toString(), 10)] instanceof Column) || columns[parseInt(c.toString(), 10)].columns) {
      if (!columns[parseInt(c.toString(), 10)].columns) {
        column = new Column(columns[parseInt(c.toString(), 10)], gObj);
      } else {
        columns[parseInt(c.toString(), 10)].columns = prepareColumns(columns[parseInt(c.toString(), 10)].columns, null, gObj);
        column = new Column(columns[parseInt(c.toString(), 10)], gObj);
      }
    } else {
      column = columns[parseInt(c.toString(), 10)];
    }
    if (column.type && column.type.toLowerCase() === "checkbox") {
      column.allowReordering = false;
    }
    column.headerText = isNullOrUndefined(column.headerText) ? column.foreignKeyValue || column.field || "" : column.headerText;
    column.foreignKeyField = column.foreignKeyField || column.field;
    column.valueAccessor = (typeof column.valueAccessor === "string" ? getValue(column.valueAccessor, window) : column.valueAccessor) || valueAccessor;
    column.headerValueAccessor = typeof column.headerValueAccessor === "string" ? getValue(column.headerValueAccessor, window) : column.headerValueAccessor;
    column.width = autoWidth && isNullOrUndefined(column.width) ? 200 : column.width;
    if (isNullOrUndefined(column.visible)) {
      column.visible = true;
    }
    columns[parseInt(c.toString(), 10)] = column;
  }
  return columns;
}
function setCssInGridPopUp(popUp, e, className) {
  var popUpSpan = popUp.querySelector("span");
  var position = popUp.parentElement.getBoundingClientRect();
  var targetPosition = e.target.getBoundingClientRect();
  popUpSpan.className = className;
  popUp.style.display = "";
  var isBottomTail = (isNullOrUndefined(e.clientY) ? e.changedTouches[0].clientY : e.clientY) > popUp.offsetHeight + 10;
  popUp.style.top = targetPosition.top - position.top + (isBottomTail ? -(popUp.offsetHeight + 10) : popUp.offsetHeight + 10) + "px";
  popUp.style.left = getPopupLeftPosition(popUp, e, targetPosition, position.left) + "px";
  if (isBottomTail) {
    popUp.querySelector(".e-downtail").style.display = "";
    popUp.querySelector(".e-uptail").style.display = "none";
  } else {
    popUp.querySelector(".e-downtail").style.display = "none";
    popUp.querySelector(".e-uptail").style.display = "";
  }
}
function getPopupLeftPosition(popup, e, targetPosition, left) {
  var width = popup.offsetWidth / 2;
  var x = getPosition(e).x;
  if (x - targetPosition.left < width) {
    return targetPosition.left - left;
  } else if (targetPosition.right - x < width) {
    return targetPosition.right - left - width * 2;
  } else {
    return x - left - width;
  }
}
function getActualProperties(obj) {
  if (obj instanceof ChildProperty) {
    return getValue("properties", obj);
  } else {
    return obj;
  }
}
function parentsUntil(elem, selector, isID) {
  var parent = elem;
  while (parent) {
    if (isID ? parent.id === selector : parent.classList.contains(selector)) {
      break;
    }
    parent = parent.parentElement;
  }
  return parent;
}
function getElementIndex(element, elements) {
  var index = -1;
  for (var i = 0, len = elements.length; i < len; i++) {
    if (elements[parseInt(i.toString(), 10)].isEqualNode(element)) {
      index = i;
      break;
    }
  }
  return index;
}
function inArray(value, collection) {
  for (var i = 0, len = collection.length; i < len; i++) {
    if (collection[parseInt(i.toString(), 10)] === value) {
      return i;
    }
  }
  return -1;
}
function getActualPropFromColl(collection) {
  var coll = [];
  for (var i = 0, len = collection.length; i < len; i++) {
    if (collection[parseInt(i.toString(), 10)].hasOwnProperty("properties")) {
      coll.push(collection[parseInt(i.toString(), 10)].properties);
    } else {
      coll.push(collection[parseInt(i.toString(), 10)]);
    }
  }
  return coll;
}
function removeElement(target, selector) {
  var elements = [].slice.call(target.querySelectorAll(selector));
  for (var i = 0; i < elements.length; i++) {
    remove(elements[parseInt(i.toString(), 10)]);
  }
}
function getPosition(e) {
  var position = {};
  position.x = isNullOrUndefined(e.clientX) ? e.changedTouches[0].clientX : e.clientX;
  position.y = isNullOrUndefined(e.clientY) ? e.changedTouches[0].clientY : e.clientY;
  return position;
}
var uid = 0;
function getUid(prefix) {
  return prefix + uid++;
}
function appendChildren(elem, children) {
  for (var i = 0, len = children.length; i < len; i++) {
    if (len === children.length) {
      elem.appendChild(children[parseInt(i.toString(), 10)]);
    } else {
      elem.appendChild(children[0]);
    }
  }
  return elem;
}
function parents(elem, selector, isID) {
  var parent = elem;
  var parents2 = [];
  while (parent) {
    if (isID ? parent.id === selector : parent.classList.contains(selector)) {
      parents2.push(parent);
    }
    parent = parent.parentElement;
  }
  return parents2;
}
function calculateAggregate(type, data, column, context) {
  if (type === "Custom") {
    var temp = column.customAggregate;
    if (typeof temp === "string") {
      temp = getValue(temp, window);
    }
    return temp ? temp.call(context, data, column) : "";
  }
  return column.field in data || data instanceof Array ? DataUtil.aggregates[type.toLowerCase()](data, column.field) : null;
}
var scrollWidth = null;
function getScrollBarWidth() {
  if (scrollWidth !== null) {
    return scrollWidth;
  }
  var divNode = document.createElement("div");
  var value = 0;
  divNode.style.cssText = "width:100px;height: 100px;overflow: scroll;position: absolute;top: -9999px;";
  document.body.appendChild(divNode);
  value = divNode.offsetWidth - divNode.clientWidth | 0;
  document.body.removeChild(divNode);
  return scrollWidth = value;
}
var rowHeight;
var accurateRowHeight;
function getRowHeight(element, accurateHeight) {
  if (accurateHeight && accurateRowHeight !== void 0) {
    return accurateRowHeight;
  }
  if (rowHeight !== void 0) {
    return rowHeight;
  }
  var table2 = createElement("table", {
    className: table,
    attrs: {
      role: "grid"
    }
  });
  table2.style.visibility = "hidden";
  table2.innerHTML = '<tr><td class="e-rowcell">A<td></tr>';
  element.appendChild(table2);
  var rect = table2.querySelector("td").getBoundingClientRect();
  element.removeChild(table2);
  accurateRowHeight = rect.height;
  rowHeight = Math.ceil(rect.height);
  if (accurateHeight) {
    return accurateRowHeight;
  }
  return rowHeight;
}
function getActualRowHeight(element) {
  var table2 = createElement("table", {
    className: table,
    attrs: {
      role: "grid"
    }
  });
  table2.style.visibility = "hidden";
  table2.innerHTML = '<tr><td class="e-rowcell">A<td></tr>';
  element.appendChild(table2);
  var rect = table2.querySelector("tr").getBoundingClientRect();
  element.removeChild(table2);
  return rect.height;
}
function isComplexField(field) {
  return field.split(".").length > 1;
}
function getComplexFieldID(field) {
  if (field === void 0) {
    field = "";
  }
  return field.replace(/\./g, "___");
}
function getParsedFieldID(field) {
  if (field === void 0) {
    field = "";
  }
  return field.replace(/[^a-zA-Z0-9_.]/g, "\\$&");
}
function setComplexFieldID(field) {
  if (field === void 0) {
    field = "";
  }
  return field.replace(/___/g, ".");
}
function isEditable(col, type, elem) {
  var row2 = parentsUntil(elem, row);
  var isOldRow = !row2 ? true : row2 && !row2.classList.contains("e-insertedrow");
  if (type === "beginEdit" && isOldRow) {
    if (col.isIdentity || col.isPrimaryKey || !col.allowEditing) {
      return false;
    }
    return true;
  } else if (type === "add" && col.isIdentity) {
    return false;
  } else {
    if (isOldRow && !col.allowEditing && !col.isIdentity && !col.isPrimaryKey) {
      return false;
    }
    return true;
  }
}
function isCellHaveWidth(elem) {
  return elem.getBoundingClientRect().width === 0 ? false : true;
}
function isActionPrevent(inst) {
  var dlg = select("#" + inst.element.id + "EditConfirm", inst.element);
  return inst.editSettings.mode === "Batch" && (selectAll(".e-updatedtd", inst.element).length || selectAll(".e-gridform.e-formvalidator", inst.element).length) && inst.editSettings.showConfirmDialog && (dlg ? dlg.classList.contains("e-popup-close") : true);
}
function wrap(elem, action) {
  var clName = "e-wrap";
  elem = elem instanceof Array ? elem : [elem];
  for (var i = 0; i < elem.length; i++) {
    if (action) {
      elem[parseInt(i.toString(), 10)].classList.add(clName);
    } else {
      elem[parseInt(i.toString(), 10)].classList.remove(clName);
    }
  }
}
function setFormatter(serviceLocator, column) {
  var fmtr = serviceLocator.getService("valueFormatter");
  var format = "format";
  var args;
  if (column.type === "date" || column.type === "datetime" || column.type === "dateonly") {
    args = {
      type: column.type === "dateonly" ? "date" : column.type,
      skeleton: column.format
    };
    if (typeof column.format === "string" && column.format !== "yMd") {
      args["" + format] = column.format;
    }
  }
  switch (column.type) {
    case "date":
      column.setFormatter(fmtr.getFormatFunction(args));
      column.setParser(fmtr.getParserFunction(args));
      break;
    case "dateonly":
      column.setFormatter(fmtr.getFormatFunction(args));
      column.setParser(fmtr.getParserFunction(args));
      break;
    case "datetime":
      column.setFormatter(fmtr.getFormatFunction(args));
      column.setParser(fmtr.getParserFunction(args));
      break;
    case "number":
      column.setFormatter(fmtr.getFormatFunction({
        format: column.format
      }));
      column.setParser(fmtr.getParserFunction({
        format: column.format
      }));
      break;
  }
}
function addRemoveActiveClasses(cells, add) {
  var args = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    args[_i - 2] = arguments[_i];
  }
  for (var i = 0, len = cells.length; i < len; i++) {
    if (add) {
      classList(cells[parseInt(i.toString(), 10)], args.slice(), []);
      cells[parseInt(i.toString(), 10)].setAttribute("aria-selected", "true");
    } else {
      classList(cells[parseInt(i.toString(), 10)], [], args.slice());
      cells[parseInt(i.toString(), 10)].removeAttribute("aria-selected");
    }
  }
}
function distinctStringValues(result) {
  var temp = {};
  var res = [];
  for (var i = 0; i < result.length; i++) {
    if (!(result[parseInt(i.toString(), 10)] in temp)) {
      res.push(result[parseInt(i.toString(), 10)].toString());
      temp[result[parseInt(i.toString(), 10)]] = 1;
    }
  }
  return res;
}
function getFilterMenuPostion(target, dialogObj) {
  var elementVisible = dialogObj.element.style.display;
  dialogObj.element.style.display = "block";
  var dlgWidth = dialogObj.width;
  var newpos = calculateRelativeBasedPosition(target, dialogObj.element);
  dialogObj.element.style.display = elementVisible;
  dialogObj.element.style.top = newpos.top + target.getBoundingClientRect().height - 5 + "px";
  var leftPos = newpos.left - dlgWidth + target.clientWidth;
  if (leftPos < 1) {
    dialogObj.element.style.left = dlgWidth + leftPos - 16 + "px";
  } else {
    dialogObj.element.style.left = leftPos + -4 + "px";
  }
}
function getZIndexCalcualtion(args, dialogObj) {
  args.popup.element.style.zIndex = (dialogObj.zIndex + 1).toString();
}
function toggleFilterUI(operator, columnUid, column, columnType, dlgObj, previousValue) {
  if (isNullOrUndefined(column.filterTemplate)) {
    var columnID = "";
    if (columnType === "string") {
      columnID = "strui-" + columnUid;
    } else if (columnType === "number") {
      columnID = "numberui-" + columnUid;
    } else if (columnType === "boolean") {
      columnID = "bool-ui-" + columnUid;
    } else if (columnType === "date" || columnType === "datetime") {
      columnID = "dateui-" + columnUid;
    }
    var isPreviousValue = previousValue === "in" || previousValue === "notin";
    var isMultiSelect = operator === "in" || operator === "notin";
    var multiselectParent = parentsUntil(dlgObj.element.querySelector("#multiselect" + columnID), "e-control-wrapper");
    var singleInputParent = parentsUntil(dlgObj.element.querySelector("#" + columnID), "e-popup-flmenu");
    if (multiselectParent) {
      multiselectParent.style.display = isMultiSelect ? "inline-flex" : "none";
    }
    if (singleInputParent) {
      singleInputParent.style.display = isMultiSelect ? "none" : "inline-flex";
    }
  }
}
function toogleCheckbox(elem) {
  var span = elem.querySelector(".e-frame");
  var input = span.previousSibling;
  if (span.classList.contains("e-check")) {
    input.checked = false;
    classList(span, ["e-uncheck"], ["e-check"]);
  } else {
    input.checked = true;
    classList(span, ["e-check"], ["e-uncheck"]);
  }
}
function setChecked(elem, checked) {
  elem.checked = checked;
}
function createCboxWithWrap(uid2, elem, className) {
  var div = createElement("div", {
    className
  });
  div.appendChild(elem);
  div.setAttribute("uid", uid2);
  return div;
}
function removeAddCboxClasses(elem, checked) {
  removeClass([elem], ["e-check", "e-stop", "e-uncheck"]);
  if (checked) {
    elem.classList.add("e-check");
  } else {
    elem.classList.add("e-uncheck");
  }
}
function refreshForeignData(row2, columns, data) {
  for (var i = 0; i < (!isNullOrUndefined(columns) ? columns.length : 0); i++) {
    setValue(columns[parseInt(i.toString(), 10)].field, getForeignData(columns[parseInt(i.toString(), 10)], data), row2.foreignKeyData);
  }
  var cells = row2.cells;
  for (var i = 0; i < cells.length; i++) {
    if (cells[parseInt(i.toString(), 10)].isForeignKey) {
      setValue("foreignKeyData", getValue(cells[parseInt(i.toString(), 10)].column.field, row2.foreignKeyData), cells[parseInt(i.toString(), 10)]);
    }
  }
}
function getForeignData(column, data, lValue, foreignKeyData2) {
  var fField = column.foreignKeyField;
  var key = !isNullOrUndefined(lValue) ? lValue : valueAccessor(column.field, data, column);
  key = isNullOrUndefined(key) ? "" : key;
  var query = new Query();
  var fdata = foreignKeyData2 || (column.dataSource instanceof DataManager && column.dataSource.dataSource.json.length ? column.dataSource.dataSource.json : column.columnData);
  if (key.getDay) {
    query.where(getDatePredicate({
      field: fField,
      operator: "equal",
      value: key,
      matchCase: false
    }));
  } else {
    query.where(fField, "==", key, false);
  }
  return new DataManager(fdata).executeLocal(query);
}
function getColumnByForeignKeyValue(foreignKeyValue, columns) {
  var column;
  return columns.some(function(col) {
    column = col;
    return col.foreignKeyValue === foreignKeyValue;
  }) && column;
}
function padZero(value) {
  if (value < 10) {
    return "0" + value;
  }
  return String(value);
}
function getDatePredicate(filterObject, type, isExecuteLocal) {
  var datePredicate;
  var prevDate;
  var nextDate;
  var prevObj = extend({}, getActualProperties(filterObject));
  var nextObj = extend({}, getActualProperties(filterObject));
  if (isNullOrUndefined(filterObject.value) || filterObject.value === "") {
    datePredicate = new Predicate(prevObj.field, prevObj.operator, prevObj.value, false);
    return datePredicate;
  }
  var value = new Date(filterObject.value);
  if (type === "dateonly" && !isExecuteLocal) {
    if (typeof prevObj.value === "string") {
      prevObj.value = new Date(prevObj.value);
    }
    var dateOnlyString = prevObj.value.getFullYear() + "-" + padZero(prevObj.value.getMonth() + 1) + "-" + padZero(prevObj.value.getDate());
    var predicates = new Predicate(prevObj.field, prevObj.operator, dateOnlyString, false);
    datePredicate = predicates;
  } else {
    filterObject.operator = filterObject.operator.toLowerCase();
    if (filterObject.operator === "equal" || filterObject.operator === "notequal") {
      if (type === "datetime") {
        prevDate = new Date(value.setSeconds(value.getSeconds() - 1));
        nextDate = new Date(value.setSeconds(value.getSeconds() + 2));
        filterObject.value = new Date(value.setSeconds(nextDate.getSeconds() - 1));
      } else {
        prevDate = new Date(value.setHours(0) - 1);
        nextDate = new Date(value.setHours(24));
      }
      prevObj.value = prevDate;
      nextObj.value = nextDate;
      if (filterObject.operator === "equal") {
        prevObj.operator = "greaterthan";
        nextObj.operator = "lessthan";
      } else if (filterObject.operator === "notequal") {
        prevObj.operator = "lessthanorequal";
        nextObj.operator = "greaterthanorequal";
      }
      var predicateSt = new Predicate(prevObj.field, prevObj.operator, prevObj.value, false);
      var predicateEnd = new Predicate(nextObj.field, nextObj.operator, nextObj.value, false);
      datePredicate = filterObject.operator === "equal" ? predicateSt.and(predicateEnd) : predicateSt.or(predicateEnd);
    } else {
      if (type === "date" && (filterObject.operator === "lessthanorequal" || filterObject.operator === "greaterthan")) {
        prevObj.value = new Date(value.setHours(24) - 1);
      }
      if (typeof prevObj.value === "string") {
        prevObj.value = new Date(prevObj.value);
      }
      var predicates = new Predicate(prevObj.field, prevObj.operator, prevObj.value, false);
      datePredicate = predicates;
    }
  }
  if (filterObject.setProperties) {
    filterObject.setProperties({
      ejpredicate: datePredicate
    }, true);
  } else {
    filterObject.ejpredicate = datePredicate;
  }
  return datePredicate;
}
function isGroupAdaptive(grid) {
  return grid.enableVirtualization && grid.groupSettings.columns.length > 0 && grid.isVirtualAdaptive && !grid.groupSettings.enableLazyLoading;
}
function getObject(field, object) {
  if (field === void 0) {
    field = "";
  }
  if (field) {
    var value = object;
    var splits = field.split(".");
    for (var i = 0; i < splits.length && !isNullOrUndefined(value); i++) {
      value = value[splits[parseInt(i.toString(), 10)]];
      if (isUndefined(value)) {
        var newCase = splits[parseInt(i.toString(), 10)].charAt(0).toUpperCase() + splits[parseInt(i.toString(), 10)].slice(1);
        value = object["" + newCase] || object[("" + newCase).charAt(0).toLowerCase() + ("" + newCase).slice(1)];
      }
    }
    return value;
  }
}
function getCustomDateFormat(format, colType) {
  var intl = new Internationalization();
  var formatvalue;
  var formatter = "format";
  var type = "type";
  if (colType === "date") {
    formatvalue = typeof format === "object" ? intl.getDatePattern({
      type: format["" + type] ? format["" + type] : "date",
      format: format["" + formatter]
    }, false) : intl.getDatePattern({
      type: "dateTime",
      skeleton: format
    }, false);
  } else {
    formatvalue = typeof format === "object" ? intl.getDatePattern({
      type: format["" + type] ? format["" + type] : "dateTime",
      format: format["" + formatter]
    }, false) : intl.getDatePattern({
      type: "dateTime",
      skeleton: format
    }, false);
  }
  return formatvalue;
}
function getExpandedState(gObj, hierarchyPrintMode) {
  var rows = gObj.getRowsObject();
  var obj = {};
  for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
    var row2 = rows_1[_i];
    if (row2.isExpand && !row2.isDetailRow) {
      var index = gObj.allowPaging && gObj.printMode === "AllPages" ? row2.index + gObj.pageSettings.currentPage * gObj.pageSettings.pageSize - gObj.pageSettings.pageSize : row2.index;
      if (!isNullOrUndefined(index)) {
        obj[parseInt(index.toString(), 10)] = {};
        obj[parseInt(index.toString(), 10)].isExpand = true;
        if (gObj.childGrid) {
          obj[parseInt(index.toString(), 10)].gridModel = getPrintGridModel(row2.childGrid, hierarchyPrintMode);
          obj[parseInt(index.toString(), 10)].gridModel.query = gObj.childGrid.query;
        }
      }
    }
  }
  return obj;
}
function getPrintGridModel(gObj, hierarchyPrintMode) {
  if (hierarchyPrintMode === void 0) {
    hierarchyPrintMode = "Expanded";
  }
  var printGridModel = {};
  if (!gObj) {
    return printGridModel;
  }
  for (var _i = 0, _a = Print.printGridProp; _i < _a.length; _i++) {
    var key = _a[_i];
    if (key === "columns") {
      printGridModel["" + key] = getActualPropFromColl(gObj["" + key]);
    } else if (key === "allowPaging") {
      printGridModel["" + key] = gObj.printMode === "CurrentPage";
    } else {
      printGridModel["" + key] = getActualProperties(gObj["" + key]);
    }
  }
  printGridModel["enableHover"] = false;
  if ((gObj.childGrid || gObj.detailTemplate) && hierarchyPrintMode !== "None") {
    printGridModel.expandedRows = getExpandedState(gObj, hierarchyPrintMode);
  }
  return printGridModel;
}
function extendObjWithFn(copied, first, second, deep) {
  var res = copied || {};
  var len = arguments.length;
  if (deep) {
    len = len - 1;
  }
  for (var i = 1; i < len; i++) {
    if (!arguments[parseInt(i.toString(), 10)]) {
      continue;
    }
    var obj1 = arguments[parseInt(i.toString(), 10)];
    var keys = Object.keys(Object.getPrototypeOf(obj1)).length ? Object.keys(obj1).concat(getPrototypesOfObj(obj1)) : Object.keys(obj1);
    for (var i_1 = 0; i_1 < keys.length; i_1++) {
      var source = res[keys[parseInt(i_1.toString(), 10)]];
      var cpy = obj1[keys[parseInt(i_1.toString(), 10)]];
      var cln = void 0;
      if (deep && (isObject(cpy) || Array.isArray(cpy))) {
        if (isObject(cpy)) {
          cln = source ? source : {};
          res[keys[parseInt(i_1.toString(), 10)]] = extend({}, cln, cpy, deep);
        } else {
          cln = source ? source : [];
          res[keys[parseInt(i_1.toString(), 10)]] = extend([], cln, cpy, deep);
        }
      } else {
        res[keys[parseInt(i_1.toString(), 10)]] = cpy;
      }
    }
  }
  return res;
}
function getPrototypesOfObj(obj) {
  var keys = [];
  while (Object.getPrototypeOf(obj) && Object.keys(Object.getPrototypeOf(obj)).length) {
    keys = keys.concat(Object.keys(Object.getPrototypeOf(obj)));
    obj = Object.getPrototypeOf(obj);
  }
  return keys;
}
function measureColumnDepth(column) {
  var max = 0;
  for (var i = 0; i < (!isNullOrUndefined(column) ? column.length : 0); i++) {
    var depth = checkDepth(column[parseInt(i.toString(), 10)], 0);
    if (max < depth) {
      max = depth;
    }
  }
  return max + 1;
}
function checkDepth(col, index) {
  var max = index;
  var indices = [];
  if (col.columns) {
    index++;
    for (var i = 0; i < col.columns.length; i++) {
      indices[parseInt(i.toString(), 10)] = checkDepth(col.columns[parseInt(i.toString(), 10)], index);
    }
    for (var j = 0; j < indices.length; j++) {
      if (max < indices[parseInt(j.toString(), 10)]) {
        max = indices[parseInt(j.toString(), 10)];
      }
    }
    index = max;
  }
  return index;
}
function refreshFilteredColsUid(gObj, filteredCols) {
  for (var i = 0; i < filteredCols.length; i++) {
    filteredCols[parseInt(i.toString(), 10)].uid = filteredCols[parseInt(i.toString(), 10)].isForeignKey ? getColumnByForeignKeyValue(filteredCols[parseInt(i.toString(), 10)].field, gObj.getForeignKeyColumns()).uid : gObj.enableColumnVirtualization ? getColumnModelByFieldName(gObj, filteredCols[parseInt(i.toString(), 10)].field).uid : gObj.getColumnByField(filteredCols[parseInt(i.toString(), 10)].field).uid;
  }
}
var Global;
(function(Global2) {
  Global2.timer = null;
})(Global || (Global = {}));
function getTransformValues(element) {
  var style = document.defaultView.getComputedStyle(element, null);
  var transformV = style.getPropertyValue("transform");
  var replacedTv = transformV.replace(/,/g, "");
  var translateX = parseFloat(replacedTv.split(" ")[4]);
  var translateY = parseFloat(replacedTv.split(" ")[5]);
  return {
    width: translateX,
    height: translateY
  };
}
function applyBiggerTheme(rootElement, element) {
  if (rootElement.classList.contains("e-bigger")) {
    element.classList.add("e-bigger");
  }
}
function getScrollWidth(gObj) {
  var scrollElem = gObj.getContent().firstElementChild;
  return scrollElem.scrollWidth > scrollElem.offsetWidth ? getScrollBarWidth() : 0;
}
function resetColspanGroupCaption(gObj, idx) {
  var colspan = 0;
  var cols = gObj.getColumns();
  var width = idx * 30;
  if (gObj.isRowDragable()) {
    colspan++;
    width += 30;
  }
  colspan += gObj.groupSettings.columns.length - idx;
  width += 30 * (gObj.groupSettings.columns.length - idx);
  var gridWidth = (gObj.width === "auto" ? gObj.element.offsetWidth : gObj.width.toString().indexOf("%") !== -1 ? gObj.element.getBoundingClientRect().width : parseInt(gObj.width.toString(), 10)) - getScrollWidth(gObj);
  for (var i = 0; i < cols.length; i++) {
    if (cols[parseInt(i.toString(), 10)].visible) {
      width += parseInt(cols[parseInt(i.toString(), 10)].width.toString(), 10);
      colspan++;
    }
    if (width > gridWidth) {
      colspan--;
      break;
    }
  }
  return colspan;
}
function groupCaptionRowLeftRightPos(tr, gObj) {
  var width = 0;
  var idx = 0;
  var frozenCount = gObj.getVisibleFrozenLeftCount();
  for (var j = 0; j < tr.childNodes.length; j++) {
    var td = tr.childNodes[parseInt(j.toString(), 10)];
    if (frozenCount === idx) {
      break;
    }
    if (td.classList.contains("e-groupcaption") || td.classList.contains("e-summarycell")) {
      idx += parseInt(td.getAttribute("colspan"), 10);
    }
    td.classList.add("e-leftfreeze");
    if (td.classList.contains("e-groupcaption") && parseInt(td.getAttribute("colspan"), 10) === 1) {
      td.classList.add("e-freezeleftborder");
    }
    applyStickyLeftRightPosition(td, width, gObj.enableRtl, "Left");
    if (td.classList.contains("e-indentcell") || td.classList.contains("e-recordplusexpand") || td.classList.contains("e-recordpluscollapse")) {
      width += 30;
    }
    if (td.classList.contains("e-groupcaption")) {
      var colspan = parseInt(td.getAttribute("colspan"), 10);
      if (gObj.isRowDragable()) {
        colspan--;
        width += 30;
      }
      colspan = colspan - (gObj.groupSettings.columns.length - j);
      width = width + 30 * (gObj.groupSettings.columns.length - j);
      var cols = gObj.getColumns();
      for (var i = 0; i < cols.length; i++) {
        if (parseInt(td.getAttribute("colspan"), 10) > 1 && parseInt(cols[parseInt(i.toString(), 10)].width.toString(), 10) + width > parseInt(gObj.width.toString(), 10) - getScrollWidth(gObj)) {
          var newColspan = resetColspanGroupCaption(gObj, j);
          td.setAttribute("colspan", newColspan.toString());
          break;
        }
        if (cols[parseInt(i.toString(), 10)].visible) {
          width += parseInt(cols[parseInt(i.toString(), 10)].width.toString(), 10);
          colspan--;
        }
        if (colspan === 0) {
          break;
        }
      }
    }
    if (td.classList.contains("e-summarycell")) {
      var uid_1 = td.getAttribute("e-mappinguid");
      var column = gObj.getColumnByUid(uid_1);
      width += parseInt(column.width.toString(), 10);
    }
  }
}
function ensureLastRow(row2, gridObj) {
  var content2 = gridObj.getContent().firstElementChild;
  return row2 && row2.getBoundingClientRect().top - content2.getBoundingClientRect().top + gridObj.getRowHeight() > content2.offsetHeight;
}
function ensureFirstRow(row2, rowTop) {
  return row2 && row2.getBoundingClientRect().top < rowTop;
}
function isRowEnteredInGrid(index, gObj) {
  var rowHeight2 = gObj.getRowHeight();
  var startIndex = gObj.getContent().firstElementChild.scrollTop / rowHeight2;
  var endIndex = startIndex + gObj.getContent().firstElementChild.offsetHeight / rowHeight2;
  return index < endIndex && index > startIndex;
}
function getEditedDataIndex(gObj, data) {
  var keyField = gObj.getPrimaryKeyFieldNames()[0];
  var dataIndex;
  gObj.getCurrentViewRecords().filter(function(e, index) {
    if (keyField.includes(".")) {
      var currentValue = getObject(keyField, e);
      var originalValue = getObject(keyField, data);
      if (currentValue === originalValue) {
        dataIndex = index;
      }
    } else {
      if (e["" + keyField] === data["" + keyField]) {
        dataIndex = index;
      }
    }
  });
  return dataIndex;
}
function eventPromise(args, query) {
  var state = getStateEventArgument(query);
  var def = new Deferred();
  state.dataSource = def.resolve;
  state.action = args;
  return {
    state,
    deffered: def
  };
}
function getStateEventArgument(query) {
  var adaptr = new UrlAdaptor();
  var dm = new DataManager({
    url: "",
    adaptor: new UrlAdaptor()
  });
  var state = adaptr.processQuery(dm, query);
  var data = JSON.parse(state.data);
  return data;
}
function ispercentageWidth(gObj) {
  var columns = gObj.getVisibleColumns();
  var percentageCol = 0;
  var undefinedWidthCol = 0;
  for (var i = 0; i < columns.length; i++) {
    if (isUndefined(columns[parseInt(i.toString(), 10)].width)) {
      undefinedWidthCol++;
    } else if (columns[parseInt(i.toString(), 10)].width.toString().indexOf("%") !== -1) {
      percentageCol++;
    }
  }
  return (gObj.width === "auto" || typeof gObj.width === "string" && gObj.width.indexOf("%") !== -1) && !gObj.groupSettings.showGroupedColumn && gObj.groupSettings.columns.length && percentageCol && !undefinedWidthCol;
}
function resetRowIndex(gObj, rows, rowElms, index, startRowIndex) {
  var startIndex = index ? index : 0;
  for (var i = startRowIndex ? startRowIndex : 0; i < rows.length; i++) {
    if (rows[parseInt(i.toString(), 10)] && rows[parseInt(i.toString(), 10)].isDataRow) {
      rows[parseInt(i.toString(), 10)].index = startIndex;
      rows[parseInt(i.toString(), 10)].isAltRow = gObj.enableAltRow ? startIndex % 2 !== 0 : false;
      rowElms[parseInt(i.toString(), 10)].setAttribute(ariaRowIndex, (startIndex + 1).toString());
      if (rows[parseInt(i.toString(), 10)].isAltRow) {
        rowElms[parseInt(i.toString(), 10)].classList.add("e-altrow");
      } else {
        rowElms[parseInt(i.toString(), 10)].classList.remove("e-altrow");
      }
      for (var j = 0; j < rowElms[parseInt(i.toString(), 10)].cells.length; j++) {
        rowElms[parseInt(i.toString(), 10)].cells[parseInt(j.toString(), 10)].setAttribute("index", startIndex.toString());
      }
      startIndex++;
    }
  }
  if (!rows.length) {
    gObj.renderModule.emptyRow(true);
  }
}
function resetCachedRowIndex(gObj) {
  var rowObjects = gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings.enableCache ? gObj.getRowsObject() : gObj.vRows;
  var rowElements = gObj.getRows();
  for (var i = 0, startIndex = 0, k = 0; i < rowObjects.length; i++) {
    var rowObject = rowObjects[parseInt(i.toString(), 10)];
    if (rowObject.isDataRow) {
      rowObject.index = startIndex;
      rowObject.isAltRow = gObj.enableAltRow ? startIndex % 2 !== 0 : false;
      var rowElement = gObj.getRowElementByUID(rowObject.uid);
      if (!isNullOrUndefined(rowElement)) {
        rowElements[parseInt(k.toString(), 10)] = rowElement;
        rowElement.setAttribute(ariaRowIndex, (startIndex + 1).toString());
        if (rowObject.isAltRow) {
          rowElement.classList.add("e-altrow");
        } else {
          rowElement.classList.remove("e-altrow");
        }
        for (var j = 0; j < rowElement.cells.length; j++) {
          rowElement.cells[parseInt(j.toString(), 10)].setAttribute("index", startIndex.toString());
        }
        k++;
      }
      startIndex++;
    }
  }
  if (gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings.enableCache) {
    gObj.infiniteScrollModule.resetInfiniteCache(rowObjects);
  }
}
function groupReorderRowObject(gObj, args, tr, dropRObj) {
  var rowObjects = gObj.enableVirtualization ? gObj.vRows : gObj.getRowsObject();
  var orderChangeRowObjects = [];
  var dropRowObject = dropRObj ? dropRObj : gObj.getRowObjectFromUID(args.target.closest("tr").getAttribute("data-uid"));
  var rowObjectDropIndex;
  for (var i = 0; i < args.rows.length; i++) {
    var orderChangeRowObject = gObj.getRowObjectFromUID(args.rows[parseInt(i.toString(), 10)].getAttribute("data-uid"));
    if (dropRowObject === orderChangeRowObject) {
      rowObjectDropIndex = rowObjects.indexOf(dropRowObject);
    }
    orderChangeRowObjects.push(rowObjects.splice(rowObjects.indexOf(orderChangeRowObject), 1)[0]);
  }
  if (isNullOrUndefined(rowObjectDropIndex)) {
    rowObjectDropIndex = rowObjects.indexOf(dropRowObject);
    if (args.fromIndex > args.dropIndex) {
      rowObjects.splice.apply(rowObjects, [rowObjectDropIndex, 0].concat(orderChangeRowObjects));
    } else {
      rowObjects.splice.apply(rowObjects, [rowObjectDropIndex + 1, 0].concat(orderChangeRowObjects));
    }
  } else {
    rowObjects.splice.apply(rowObjects, [rowObjectDropIndex, 0].concat(orderChangeRowObjects));
  }
  if (!gObj.enableVirtualization && !gObj.infiniteScrollSettings.enableCache) {
    var record = {};
    var currentViewData = gObj.getCurrentViewRecords();
    for (var i = 0, len = tr.length; i < len; i++) {
      var index = parseInt(tr[parseInt(i.toString(), 10)].getAttribute(ariaRowIndex), 10) - 1;
      record[parseInt(i.toString(), 10)] = currentViewData[parseInt(index.toString(), 10)];
    }
    var rows = gObj.getRows();
    for (var i = 0, len = tr.length; i < len; i++) {
      rows[parseInt(i.toString(), 10)] = tr[parseInt(i.toString(), 10)];
      currentViewData[parseInt(i.toString(), 10)] = record[parseInt(i.toString(), 10)];
    }
  }
  if (gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings.enableCache) {
    gObj.infiniteScrollModule.resetInfiniteCache(rowObjects);
  }
}
function compareChanges(gObj, changes, type, keyField) {
  var newArray = gObj.dataToBeUpdated["" + type].concat(changes["" + type]).reduce(function(r, o) {
    r[o["" + keyField]] = r[o["" + keyField]] === void 0 ? o : Object.assign(r[o["" + keyField]], o);
    return r;
  }, {});
  gObj.dataToBeUpdated["" + type] = Object.keys(newArray).map(function(k) {
    return newArray["" + k];
  });
}
function setRowElements(gObj) {
  if (gObj.enableInfiniteScrolling && (gObj.childGrid || gObj.detailTemplate)) {
    gObj.contentModule.rowElements = [].slice.call(gObj.getContentTable().rows).filter(function(row2) {
      return (row2.classList.contains("e-row") || row2.classList.contains("e-detailrow")) && !row2.classList.contains("e-addedrow");
    });
    return;
  }
  gObj.contentModule.rowElements = [].slice.call(gObj.element.querySelectorAll(".e-row:not(.e-addedrow):not(.e-cloneproperties .e-row)"));
}
function sliceElements(row2, start, end) {
  var cells = row2.children;
  var len = cells.length;
  var k = 0;
  for (var i = 0; i < len; i++, k++) {
    if (i >= start && i < end) {
      continue;
    }
    row2.removeChild(row2.children[parseInt(k.toString(), 10)]);
    k--;
  }
}
function resetDialogAppend(gObj, dlgObj) {
  var element = gObj.createElement("div", {
    className: "e-grid-popup",
    id: gObj.element.id + "_e-popup"
  });
  var pos = calculatePosition(gObj.element, "left", "Top");
  if (document.getElementById(gObj.element.id + "_e-popup")) {
    element = document.getElementById(gObj.element.id + "_e-popup");
  }
  element.style.top = pos.top + "px";
  element.style.left = pos.left + "px";
  element.style.zIndex = dlgObj.zIndex.toString();
  element.style.width = dlgObj.element.offsetWidth + "px";
  element.appendChild(dlgObj.element);
  var sbPanel = parentsUntil(gObj.element, "sb-demo-section") || parentsUntil(gObj.element, "e-grid-dialog-fixed");
  if (sbPanel) {
    var sbPos = calculateRelativeBasedPosition(gObj.element, sbPanel);
    element.style.top = sbPos.top + "px";
    element.style.left = sbPos.left + "px";
    sbPanel.insertBefore(element, sbPanel.firstChild);
  } else {
    document.body.insertBefore(element, document.body.firstChild);
  }
}
function isChildColumn(column, uid2) {
  var uids = [];
  uids.push(column.uid);
  pushuid(column, uids);
  if (uids.indexOf(uid2) > -1) {
    return true;
  } else {
    return false;
  }
}
function pushuid(column, uids) {
  for (var i = 0; i < column.columns.length; i++) {
    if (column.columns[parseInt(i.toString(), 10)].uid) {
      uids.push(column.columns[parseInt(i.toString(), 10)].uid);
    }
    if (column.columns[parseInt(i.toString(), 10)].columns && column.columns[parseInt(i.toString(), 10)].columns.length) {
      pushuid(column.columns[parseInt(i.toString(), 10)], uids);
    }
  }
}
function frozenDirection(column) {
  if (column.columns[0].freeze || column.columns[0].isFrozen) {
    if (column.columns[0].freeze === "Left" || column.columns[0].isFrozen) {
      return "Left";
    } else if (column.columns[0].freeze === "Right") {
      return "Right";
    } else if (column.columns[0].freeze === "Fixed") {
      return "Fixed";
    } else {
      return "None";
    }
  } else {
    if (column.columns[0].columns && column.columns[0].columns.length) {
      return frozenDirection(column.columns[0]);
    } else {
      return "None";
    }
  }
}
function addFixedColumnBorder(row2) {
  if (row2.querySelector(".e-fixedfreeze")) {
    var cells = [].slice.call(row2.querySelectorAll(".e-filterbarcell:not(.e-hide),.e-summarycell:not(.e-hide),.e-headercell:not(.e-hide),.e-rowcell:not(.e-hide)"));
    for (var j = 0; j < cells.length; j++) {
      if (cells[parseInt(j.toString(), 10)].classList.contains("e-fixedfreeze") && (!cells[j - 1] || cells[j - 1] && !cells[j - 1].classList.contains("e-fixedfreeze"))) {
        cells[parseInt(j.toString(), 10)].classList.add("e-freezeleftborder");
      }
      if (cells[parseInt(j.toString(), 10)].classList.contains("e-fixedfreeze") && (!cells[j + 1] || cells[j + 1] && !cells[j + 1].classList.contains("e-fixedfreeze"))) {
        cells[parseInt(j.toString(), 10)].classList.add("e-freezerightborder");
      }
    }
  }
}
function applyStickyLeftRightPosition(node, width, isRtl, position) {
  if (position === "Left") {
    if (isRtl) {
      node.style.right = width + "px";
    } else {
      node.style.left = width + "px";
    }
  }
  if (position === "Right") {
    if (isRtl) {
      node.style.left = width + "px";
    } else {
      node.style.right = width + "px";
    }
  }
}
function resetColandRowSpanStickyPosition(gObj, column, node, colSpan) {
  var columns = gObj.getColumns();
  var index = column.index;
  if (column.freeze === "Left" && column.border !== "Left") {
    var idx = index + (colSpan - 1);
    while (columns[parseInt(idx.toString(), 10)].visible === false) {
      idx++;
    }
    if (columns[parseInt(idx.toString(), 10)].border === "Left") {
      node.classList.add("e-freezeleftborder");
    }
  } else if (column.freeze === "Right" || column.freeze === "Fixed") {
    var width = 0;
    for (var j = index + 1; j < index + colSpan; j++) {
      if (j === columns.length) {
        break;
      }
      if (columns[parseInt(j.toString(), 10)].visible) {
        width += parseInt(columns[parseInt(j.toString(), 10)].width.toString(), 10);
      } else {
        colSpan++;
      }
    }
    if (gObj.enableRtl) {
      node.style.left = parseInt(node.style.left, 10) - width + "px";
    } else {
      node.style.right = parseInt(node.style.right, 10) - width + "px";
    }
  }
}
function getCellFromRow(gObj, rowIndex, colIndex) {
  var row2 = gObj.getRowByIndex(rowIndex);
  for (var i = 0; i < row2.cells.length; i++) {
    if (parseInt(row2.cells[parseInt(i.toString(), 10)].getAttribute("aria-colindex").toString(), 10) - 1 === colIndex) {
      return row2.cells[parseInt(i.toString(), 10)];
    }
  }
  return null;
}
function addStickyColumnPosition(gObj, column, node) {
  if (column.freeze === "Left" || column.isFrozen) {
    node.classList.add("e-leftfreeze");
    if (column.border === "Left") {
      node.classList.add("e-freezeleftborder");
    }
    if (column.index === 0) {
      applyStickyLeftRightPosition(node, gObj.getIndentCount() * 30, gObj.enableRtl, "Left");
      if (gObj.enableColumnVirtualization) {
        column.valueX = gObj.getIndentCount() * 30;
      }
    } else {
      var cols = gObj.getColumns();
      var width = gObj.getIndentCount() * 30;
      for (var i = 0; i < cols.length; i++) {
        if (column.uid === cols[parseInt(i.toString(), 10)].uid) {
          break;
        }
        if (cols[parseInt(i.toString(), 10)].visible) {
          width += parseFloat(cols[parseInt(i.toString(), 10)].width.toString());
        }
      }
      applyStickyLeftRightPosition(node, width, gObj.enableRtl, "Left");
      if (gObj.enableColumnVirtualization) {
        column.valueX = width;
      }
    }
  } else if (column.freeze === "Right") {
    node.classList.add("e-rightfreeze");
    var cols = gObj.getColumns();
    if (column.border === "Right") {
      node.classList.add("e-freezerightborder");
    }
    if (column.index === cols[cols.length - 1].index) {
      var width = gObj.getFrozenMode() === "Right" && gObj.isRowDragable() ? 30 : 0;
      applyStickyLeftRightPosition(node, width, gObj.enableRtl, "Right");
      if (gObj.enableColumnVirtualization) {
        column.valueX = width;
      }
    } else {
      var width = gObj.getFrozenMode() === "Right" && gObj.isRowDragable() ? 30 : 0;
      for (var i = cols.length - 1; i >= 0; i--) {
        if (column.uid === cols[parseInt(i.toString(), 10)].uid) {
          break;
        }
        if (cols[parseInt(i.toString(), 10)].visible) {
          width += parseFloat(cols[parseInt(i.toString(), 10)].width.toString());
        }
      }
      applyStickyLeftRightPosition(node, width, gObj.enableRtl, "Right");
      if (gObj.enableColumnVirtualization) {
        column.valueX = width;
      }
    }
  } else if (column.freeze === "Fixed") {
    node.classList.add("e-fixedfreeze");
    var cols = gObj.getColumns();
    var width = 0;
    if (gObj.getVisibleFrozenLeftCount()) {
      width = gObj.getIndentCount() * 30;
    } else if (gObj.getFrozenMode() === "Right") {
      width = gObj.groupSettings.columns.length * 30;
    }
    for (var i = 0; i < cols.length; i++) {
      if (column.uid === cols[parseInt(i.toString(), 10)].uid) {
        break;
      }
      if (cols[parseInt(i.toString(), 10)].freeze === "Left" || cols[parseInt(i.toString(), 10)].isFrozen || cols[parseInt(i.toString(), 10)].freeze === "Fixed") {
        if (cols[parseInt(i.toString(), 10)].visible) {
          width += parseFloat(cols[parseInt(i.toString(), 10)].width.toString());
        }
      }
    }
    applyStickyLeftRightPosition(node, width - 1, gObj.enableRtl, "Left");
    width = gObj.getFrozenMode() === "Right" && gObj.isRowDragable() ? 30 : 0;
    for (var i = cols.length - 1; i >= 0; i--) {
      if (column.uid === cols[parseInt(i.toString(), 10)].uid) {
        break;
      }
      if (cols[parseInt(i.toString(), 10)].freeze === "Right" || cols[parseInt(i.toString(), 10)].freeze === "Fixed") {
        if (cols[parseInt(i.toString(), 10)].visible) {
          width += parseFloat(cols[parseInt(i.toString(), 10)].width.toString());
        }
      }
    }
    applyStickyLeftRightPosition(node, width - 1, gObj.enableRtl, "Right");
  } else {
    node.classList.add("e-unfreeze");
  }
}
function getCellsByTableName(gObj, col, rowIndex) {
  return [].slice.call(gObj.getDataRows()[parseInt(rowIndex.toString(), 10)].getElementsByClassName(rowCell));
}
function getCellByColAndRowIndex(gObj, col, rowIndex, index) {
  return getCellsByTableName(gObj, col, rowIndex)[parseInt(index.toString(), 10)];
}
function setValidationRuels(col, index, rules, mRules, frRules, len, isCustom) {
  if (isCustom) {
    rules[getComplexFieldID(col.field)] = col.validationRules;
  } else {
    if (col.getFreezeTableName() === frozenLeft || !index && col.getFreezeTableName() === frozenRight || len === 1) {
      rules[getComplexFieldID(col.field)] = col.validationRules;
    } else if (col.getFreezeTableName() === "movable" || !col.getFreezeTableName()) {
      mRules[getComplexFieldID(col.field)] = col.validationRules;
    } else if (col.getFreezeTableName() === frozenRight) {
      frRules[getComplexFieldID(col.field)] = col.validationRules;
    }
  }
}
function getNumberFormat(numberFormat, type, isExcel, currencyCode) {
  var format;
  var intl = new Internationalization();
  if (type === "number") {
    try {
      format = intl.getNumberPattern({
        format: numberFormat,
        currency: currencyCode,
        useGrouping: true
      }, true);
    } catch (error) {
      format = numberFormat;
    }
  } else if (type === "date" || type === "time" || type === "datetime") {
    try {
      format = intl.getDatePattern({
        skeleton: numberFormat,
        type
      }, isExcel);
      if (isNullOrUndefined(format)) {
        throw "error";
      }
    } catch (error) {
      try {
        format = intl.getDatePattern({
          format: numberFormat,
          type
        }, isExcel);
      } catch (error2) {
        format = numberFormat;
      }
    }
  } else {
    format = numberFormat;
  }
  if (type !== "number") {
    var patternRegex = /G|H|c|'| a|yy|y|EEEE|E/g;
    var mtch_1 = {
      "G": "",
      "H": "h",
      "c": "d",
      "'": '"',
      " a": " AM/PM",
      "yy": "yy",
      "y": "yyyy",
      "EEEE": "dddd",
      "E": "ddd"
    };
    format = format.replace(patternRegex, function(pattern) {
      return mtch_1["" + pattern];
    });
  }
  return format;
}
function addBiggerDialog(gObj) {
  if (gObj.enableAdaptiveUI) {
    var dialogs = document.getElementsByClassName("e-responsive-dialog");
    for (var i = 0; i < dialogs.length; i++) {
      dialogs[parseInt(i.toString(), 10)].classList.add("e-bigger");
    }
  }
}
function performComplexDataOperation(value, mapObject) {
  var returnObj;
  var length = value.split(".").length;
  var splits = value.split(".");
  var duplicateMap = mapObject;
  for (var i = 0; i < length; i++) {
    returnObj = duplicateMap[splits[parseInt(i.toString(), 10)]];
    duplicateMap = returnObj;
  }
  return returnObj;
}
function setDisplayValue(tr, idx, displayVal, rows, parent, isContent) {
  var trs = Object.keys(tr);
  var actualIndex = idx;
  for (var i = 0; i < trs.length; i++) {
    var td = tr[trs[parseInt(i.toString(), 10)]].querySelectorAll("td.e-rowcell")[parseInt(idx.toString(), 10)];
    if (parent && !parent.isFrozenGrid() && !parent.isRowDragable()) {
      td = !isNullOrUndefined(td) && (parseInt(td.getAttribute("aria-colindex"), 10) - 1 === idx || parentsUntil(td, "e-addedrow") && td.parentElement.childNodes[parseInt(idx.toString(), 10)] === td) ? td : tr[parseInt(i.toString(), 10)].querySelector('td[aria-colindex="' + (idx + 1) + '"]');
      if (isNullOrUndefined(td)) {
        continue;
      } else {
        idx = parent.getContentTable().querySelector(".e-detailrowcollapse, .e-detailrowexpand") ? td.cellIndex - 1 : td.cellIndex;
      }
    }
    if (tr[trs[parseInt(i.toString(), 10)]].querySelectorAll("td.e-rowcell").length && td) {
      setStyleAttribute(tr[trs[parseInt(i.toString(), 10)]].querySelectorAll("td.e-rowcell")[parseInt(idx.toString(), 10)], {
        "display": displayVal
      });
      if (tr[trs[parseInt(i.toString(), 10)]].querySelectorAll("td.e-rowcell")[parseInt(idx.toString(), 10)].classList.contains("e-hide")) {
        removeClass([tr[trs[parseInt(i.toString(), 10)]].querySelectorAll("td.e-rowcell")[parseInt(idx.toString(), 10)]], ["e-hide"]);
      }
      if (isContent && parent.isRowDragable() || parent && parent.isDetail()) {
        var index = idx + 1;
        rows[trs[parseInt(i.toString(), 10)]].cells[parseInt(index.toString(), 10)].visible = displayVal === "" ? true : false;
      } else {
        if (!isNullOrUndefined(rows[trs[parseInt(i.toString(), 10)]])) {
          rows[trs[parseInt(i.toString(), 10)]].cells[parseInt(idx.toString(), 10)].visible = displayVal === "" ? true : false;
          if (rows[trs[parseInt(i.toString(), 10)]].cells[parseInt(idx.toString(), 10)].visible === false) {
            tr[trs[parseInt(i.toString(), 10)]].querySelectorAll("td.e-rowcell")[parseInt(idx.toString(), 10)].classList.add("e-hide");
          }
        }
      }
      idx = actualIndex;
    }
  }
}
function addRemoveEventListener(parent, evt, isOn, module) {
  for (var _i = 0, evt_1 = evt; _i < evt_1.length; _i++) {
    var inst = evt_1[_i];
    if (isOn) {
      parent.on(inst.event, inst.handler, module);
    } else {
      parent.off(inst.event, inst.handler);
    }
  }
}
function createEditElement(parent, column, classNames, attr) {
  var complexFieldName = getComplexFieldID(column.field);
  attr = Object.assign(attr, {
    id: parent.element.id + complexFieldName,
    name: complexFieldName,
    "e-mappinguid": column.uid
  });
  return parent.createElement("input", {
    className: classNames,
    attrs: attr
  });
}
function getColumnModelByUid(gObj, uid2) {
  var column;
  for (var _i = 0, _a = gObj.columnModel; _i < _a.length; _i++) {
    var col = _a[_i];
    if (col.uid === uid2) {
      column = col;
      break;
    }
  }
  return column;
}
function getColumnModelByFieldName(gObj, field) {
  var column;
  if (!gObj.columnModel) {
    gObj.getColumns();
  }
  for (var _i = 0, _a = gObj.columnModel; _i < _a.length; _i++) {
    var col = _a[_i];
    if (col.field === field) {
      column = col;
      break;
    }
  }
  return column;
}
function registerEventHandlers(id, evts, handlers, instance) {
  instance.eventHandlers["" + id] = {};
  for (var i = 0; i < evts.length; i++) {
    instance.eventHandlers["" + id][evts[parseInt(i.toString(), 10)]] = handlers[evts[parseInt(i.toString(), 10)]];
  }
}
function removeEventHandlers(component, evts, instance) {
  for (var i = 0; i < evts.length; i++) {
    if (component.isDestroyed) {
      break;
    }
    component.removeEventListener(evts[parseInt(i.toString(), 10)], instance.eventHandlers[component.element.id][evts[parseInt(i.toString(), 10)]]);
  }
}
function clearReactVueTemplates(parent, templates) {
  parent.destroyTemplate(templates);
  if (parent.isReact) {
    parent.renderTemplates();
  }
}
function infiniteRemoveElements(removeElem) {
  for (var i = 0; i < removeElem.length; i++) {
    remove(removeElem[i]);
  }
}
function infiniteAppendElements(appendElem, ulElement) {
  for (var i = 0; i < appendElem.length; i++) {
    ulElement.insertBefore(appendElem[i], ulElement.children[i]);
  }
}
function getListHeight(element, isChooser) {
  var listDiv = isChooser ? createElement("li", {
    className: "e-cclist"
  }) : createElement("div", {
    className: "e-ftrchk"
  });
  listDiv.style.visibility = "hidden";
  if (isChooser) {
    listDiv.style.listStyle = "none";
  }
  listDiv.innerHTML = isChooser ? '<div class="e-ccheck"><div class="e-checkbox-wrapper"><span class="e-frame e-icons e-check"></span><span class="e-label">A</span></div></div>' : '<div class="e-checkbox-wrapper"><span class="e-frame e-icons e-check"></span><span class="e-label e-checkboxfiltertext">A</div></span>';
  element.appendChild(listDiv);
  var rect = listDiv.getBoundingClientRect();
  element.removeChild(listDiv);
  var listHeight = Math.round(rect.height);
  return listHeight;
}
function getRowIndexFromElement(row2) {
  return parseInt(row2.getAttribute(ariaRowIndex), 10) - 1;
}
function getParentIns(grid) {
  return grid.parentDetails && grid.parentDetails.parentInstObj ? getParentIns(grid.parentDetails.parentInstObj) : grid;
}
function generateExpandPredicates(fields, values, instance) {
  var filterCols = [];
  for (var i = 0; i < fields.length; i++) {
    var column = instance.parent.getColumnByField(fields[parseInt(i.toString(), 10)]);
    var value = values[parseInt(i.toString(), 10)] === "null" ? null : values[parseInt(i.toString(), 10)];
    var pred = {
      field: fields[parseInt(i.toString(), 10)],
      predicate: "or",
      uid: column.uid,
      operator: "equal",
      type: column.type,
      matchCase: instance.allowCaseSensitive,
      ignoreAccent: instance.parent.filterSettings.ignoreAccent
    };
    if (value === "" || isNullOrUndefined(value)) {
      filterCols = filterCols.concat(CheckBoxFilterBase.generateNullValuePredicates(pred));
    } else {
      filterCols.push(extend2({}, {
        value
      }, pred));
    }
  }
  return CheckBoxFilterBase.getPredicate(filterCols);
}
function getPredicates(pred) {
  var predicateList = [];
  for (var _i = 0, _a = Object.keys(pred); _i < _a.length; _i++) {
    var prop = _a[_i];
    predicateList.push(pred["" + prop]);
  }
  return predicateList;
}
function getGroupKeysAndFields(index, rowsObject) {
  var fields = [];
  var keys = [];
  for (var i = index; i >= 0; i--) {
    if (rowsObject[parseInt(i.toString(), 10)].isCaptionRow && fields.indexOf(rowsObject[parseInt(i.toString(), 10)].data.field) === -1 && (rowsObject[parseInt(i.toString(), 10)].indent < rowsObject[parseInt(index.toString(), 10)].indent || i === index)) {
      fields.push(rowsObject[parseInt(i.toString(), 10)].data.field);
      keys.push(rowsObject[parseInt(i.toString(), 10)].data.key);
      if (rowsObject[parseInt(i.toString(), 10)].indent === 0) {
        break;
      }
    }
  }
  return {
    fields,
    keys
  };
}
function findCellIndex(checkActiveMatrix, checkCellIndex, next) {
  var activeMatrix = checkActiveMatrix;
  var cellIndex = checkCellIndex;
  var currentCellIndexPass = false;
  if (next) {
    for (var i = cellIndex[0]; i < activeMatrix.length; i++) {
      var rowCell2 = activeMatrix[parseInt(i.toString(), 10)];
      for (var j = 0; j < rowCell2.length; j++) {
        if (currentCellIndexPass && activeMatrix[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)] === 1) {
          cellIndex = [i, j];
          return cellIndex;
        }
        if (!currentCellIndexPass && cellIndex.toString() === [i, j].toString()) {
          currentCellIndexPass = true;
        }
      }
    }
  } else {
    for (var i = cellIndex[0]; i >= 0; i--) {
      var rowCell2 = activeMatrix[parseInt(i.toString(), 10)];
      for (var j = rowCell2.length - 1; j >= 0; j--) {
        if (currentCellIndexPass && activeMatrix[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)] === 1) {
          cellIndex = [i, j];
          return cellIndex;
        }
        if (!currentCellIndexPass && cellIndex.toString() === [i, j].toString()) {
          currentCellIndexPass = true;
        }
      }
    }
  }
  return cellIndex;
}
function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
function checkIsVirtual(grid) {
  return !(isGroupAdaptive(grid) || grid.groupSettings.enableLazyLoading || !grid.enableVirtualization && grid.enableColumnVirtualization);
}
function getVisiblePage(blockes) {
  var visiblePage = [];
  for (var i = 0; i < blockes.length; i++) {
    var page = Math.ceil(blockes[parseInt(i.toString(), 10)] / 2);
    if (visiblePage.indexOf(page) === -1) {
      visiblePage.push(page);
    }
  }
  return visiblePage;
}

// node_modules/@syncfusion/ej2-grids/src/grid/models/column.js
var __extends18 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate5 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Column = (
  /** @class */
  function() {
    function Column2(options, parent) {
      var _this = this;
      this.disableHtmlEncode = true;
      this.allowSorting = true;
      this.allowResizing = true;
      this.allowFiltering = true;
      this.allowGrouping = true;
      this.allowReordering = true;
      this.showColumnMenu = true;
      this.enableGroupByFormat = false;
      this.allowEditing = true;
      this.filter = {};
      this.showInColumnChooser = true;
      this.edit = {};
      this.allowSearching = true;
      this.autoFit = false;
      this.sortDirection = "Descending";
      this.getEditTemplate = function() {
        return _this.editTemplateFn;
      };
      this.getFilterTemplate = function() {
        return _this.filterTemplateFn;
      };
      this.templateOptions = {
        enableAriaLabel: true
      };
      merge(this, options);
      this.parent = parent;
      if (this.type === "none") {
        this.type = null;
      } else if (this.type) {
        this.type = typeof this.type === "string" ? this.type.toLowerCase() : void 0;
      }
      if (this.editType) {
        this.editType = this.editType.toLowerCase();
      }
      if (isNullOrUndefined(this.uid)) {
        this.uid = getUid("grid-column");
      }
      var valueFormatter = new ValueFormatter();
      if (options.format && (options.format.skeleton || options.format.format && typeof options.format.format === "string")) {
        this.setFormatter(valueFormatter.getFormatFunction(extend({}, options.format)));
        this.setParser(valueFormatter.getParserFunction(options.format));
      }
      this.toJSON = function() {
        var col = {};
        var skip = ["filter", "dataSource", "headerText", "template", "headerTemplate", "edit", "editTemplate", "filterTemplate", "commandsTemplate", "parent"];
        var keys = Object.keys(_this);
        for (var i = 0; i < keys.length; i++) {
          if (keys[parseInt(i.toString(), 10)] === "columns") {
            col[keys[parseInt(i.toString(), 10)]] = [];
            for (var j = 0; j < _this[keys[parseInt(i.toString(), 10)]].length; j++) {
              col[keys[parseInt(i.toString(), 10)]].push(_this[keys[parseInt(i.toString(), 10)]][parseInt(j.toString(), 10)].toJSON());
            }
          } else if (skip.indexOf(keys[parseInt(i.toString(), 10)]) < 0) {
            col[keys[parseInt(i.toString(), 10)]] = _this[keys[parseInt(i.toString(), 10)]];
          }
        }
        return col;
      };
      if (!this.field) {
        this.allowFiltering = false;
        this.allowGrouping = false;
        this.allowSorting = false;
        if (this.columns) {
          this.allowResizing = this.columns.some(function(col) {
            return col.allowResizing;
          });
        }
      }
      if (this.commands && !this.textAlign) {
        this.textAlign = "Right";
      }
      if (this.template || this.commandsTemplate) {
        this.templateFn = templateCompiler(this.template || this.commandsTemplate);
      }
      if (this.headerTemplate) {
        this.headerTemplateFn = templateCompiler(this.headerTemplate);
      }
      if (!isNullOrUndefined(this.filter) && this.filter.itemTemplate) {
        this.fltrTemplateFn = templateCompiler(this.filter.itemTemplate);
      }
      if (this.editTemplate) {
        this.editTemplateFn = templateCompiler(this.editTemplate);
      }
      if (this.filterTemplate) {
        this.filterTemplateFn = templateCompiler(this.filterTemplate);
      }
      if (this.isForeignColumn() && (isNullOrUndefined(this.editType) || this.editType === "dropdownedit" || this.editType === "defaultedit")) {
        this.editType = "dropdownedit";
        if (this.edit.params && this.edit.params.dataSource) {
          this.edit.params.ddEditedData = true;
        }
        this.edit.params = extend({
          dataSource: this.dataSource,
          query: new Query(),
          fields: {
            value: this.foreignKeyField || this.field,
            text: this.foreignKeyValue
          }
        }, this.edit.params);
      }
      if (this.sortComparer) {
        var a_1 = this.sortComparer;
        this.sortComparer = function(x, y, xObj, yObj) {
          if (typeof a_1 === "string") {
            a_1 = getObject(a_1, window);
          }
          if (_this.sortDirection === "Descending") {
            var z = x;
            x = y;
            y = z;
            var obj = xObj;
            xObj = yObj;
            yObj = obj;
          }
          return a_1(x, y, xObj, yObj);
        };
      }
      if (!this.sortComparer && this.isForeignColumn()) {
        this.sortComparer = function(x, y) {
          x = getObject(_this.foreignKeyValue, getForeignData(_this, {}, x)[0]);
          y = getObject(_this.foreignKeyValue, getForeignData(_this, {}, y)[0]);
          return _this.sortDirection === "Descending" ? DataUtil.fnDescending(x, y) : DataUtil.fnAscending(x, y);
        };
      }
    }
    Column2.prototype.getSortDirection = function() {
      return this.sortDirection;
    };
    Column2.prototype.setSortDirection = function(direction) {
      this.sortDirection = direction;
    };
    Column2.prototype.getFreezeTableName = function() {
      return this.freezeTable;
    };
    Column2.prototype.setProperties = function(column) {
      var keys = Object.keys(column);
      var _loop_1 = function(i2) {
        if (keys[parseInt(i2.toString(), 10)] === "columns") {
          var cols_1 = column[keys[parseInt(i2.toString(), 10)]];
          var _loop_2 = function(j2) {
            this_1.columns.find(function(col) {
              return col.field === cols_1[parseInt(j2.toString(), 10)].field;
            }).setProperties(cols_1[parseInt(j2.toString(), 10)]);
          };
          for (var j = 0; j < cols_1.length; j++) {
            _loop_2(j);
          }
        } else {
          this_1[keys[parseInt(i2.toString(), 10)]] = column[keys[parseInt(i2.toString(), 10)]];
        }
        if (this_1.parent && this_1.parent.isReact) {
          if (keys[parseInt(i2.toString(), 10)] === "template") {
            this_1.templateFn = templateCompiler(column[keys[parseInt(i2.toString(), 10)]]);
            this_1.parent.refreshReactColumnTemplateByUid(this_1.uid, true);
          } else if (keys[parseInt(i2.toString(), 10)] === "headerTemplate") {
            this_1.headerTemplateFn = templateCompiler(column[keys[parseInt(i2.toString(), 10)]]);
            this_1.parent.refreshReactHeaderTemplateByUid(this_1.uid);
          } else if (keys[parseInt(i2.toString(), 10)] === "editTemplate") {
            this_1.editTemplateFn = templateCompiler(column[keys[parseInt(i2.toString(), 10)]]);
          } else if (keys[parseInt(i2.toString(), 10)] === "filterTemplate") {
            this_1.filterTemplateFn = templateCompiler(column[keys[parseInt(i2.toString(), 10)]]);
          } else if (keys[parseInt(i2.toString(), 10)] === "commandsTemplate") {
            this_1.templateFn = templateCompiler(column[keys[parseInt(i2.toString(), 10)]]);
          }
        }
      };
      var this_1 = this;
      for (var i = 0; i < keys.length; i++) {
        _loop_1(i);
      }
    };
    Column2.prototype.isForeignColumn = function() {
      return !!(this.dataSource && this.foreignKeyValue);
    };
    Column2.prototype.getFormatter = function() {
      return this.formatFn;
    };
    Column2.prototype.setFormatter = function(value) {
      this.formatFn = value;
    };
    Column2.prototype.getParser = function() {
      return this.parserFn;
    };
    Column2.prototype.setParser = function(value) {
      this.parserFn = value;
    };
    Column2.prototype.getColumnTemplate = function() {
      return this.templateFn;
    };
    Column2.prototype.getHeaderTemplate = function() {
      return this.headerTemplateFn;
    };
    Column2.prototype.getFilterItemTemplate = function() {
      return this.fltrTemplateFn;
    };
    Column2.prototype.getDomSetter = function() {
      return this.disableHtmlEncode ? "textContent" : "innerHTML";
    };
    return Column2;
  }()
);
var CommandColumnModel = (
  /** @class */
  function() {
    function CommandColumnModel2() {
    }
    __decorate5([Property()], CommandColumnModel2.prototype, "title", void 0);
    __decorate5([Property()], CommandColumnModel2.prototype, "type", void 0);
    __decorate5([Property()], CommandColumnModel2.prototype, "buttonOption", void 0);
    return CommandColumnModel2;
  }()
);
var GridColumn = (
  /** @class */
  function(_super) {
    __extends18(GridColumn2, _super);
    function GridColumn2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate5([Property(null)], GridColumn2.prototype, "columns", void 0);
    return GridColumn2;
  }(Column)
);
var StackedColumn = (
  /** @class */
  function(_super) {
    __extends18(StackedColumn2, _super);
    function StackedColumn2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return StackedColumn2;
  }(GridColumn)
);

// node_modules/@syncfusion/ej2-dropdowns/src/common/incremental-search.js
var queryString = "";
var prevString = "";
var tempQueryString = "";
var matches2 = [];
var activeClass = "e-active";
var prevElementId = "";
function incrementalSearch(keyCode, items, selectedIndex, ignoreCase, elementId, queryStringUpdated, currentValue, isVirtual, refresh) {
  if (!queryStringUpdated || queryString === "") {
    if (tempQueryString !== "") {
      queryString = tempQueryString + String.fromCharCode(keyCode);
      tempQueryString = "";
    } else {
      queryString += String.fromCharCode(keyCode);
    }
  } else if (queryString === prevString) {
    tempQueryString = String.fromCharCode(keyCode);
  }
  if (isVirtual) {
    setTimeout(function() {
      tempQueryString = "";
    }, 700);
    setTimeout(function() {
      queryString = "";
    }, 3e3);
  } else {
    setTimeout(function() {
      queryString = "";
    }, 1e3);
  }
  var index;
  queryString = ignoreCase ? queryString.toLowerCase() : queryString;
  if (prevElementId === elementId && prevString === queryString && !refresh) {
    for (var i = 0; i < matches2.length; i++) {
      if (matches2[i].classList.contains(activeClass)) {
        index = i;
        break;
      }
      if (currentValue && matches2[i].textContent.toLowerCase() === currentValue.toLowerCase()) {
        index = i;
        break;
      }
    }
    index = index + 1;
    if (isVirtual) {
      return matches2[index] && matches2.length - 1 !== index ? matches2[index] : matches2[matches2.length];
    }
    return matches2[index] ? matches2[index] : matches2[0];
  } else {
    var listItems = items;
    var strLength = queryString.length;
    var text = void 0;
    var item = void 0;
    selectedIndex = selectedIndex ? selectedIndex + 1 : 0;
    var i = selectedIndex;
    matches2 = [];
    do {
      if (i === listItems.length) {
        i = -1;
      }
      if (i === -1) {
        index = 0;
      } else {
        index = i;
      }
      item = listItems[index];
      text = ignoreCase ? item.innerText.toLowerCase() : item.innerText;
      if (text.substr(0, strLength) === queryString) {
        matches2.push(listItems[index]);
      }
      i++;
    } while (i !== selectedIndex);
    prevString = queryString;
    prevElementId = elementId;
    if (isVirtual) {
      var indexUpdated = false;
      for (var i_1 = 0; i_1 < matches2.length; i_1++) {
        if (currentValue && matches2[i_1].textContent.toLowerCase() === currentValue.toLowerCase()) {
          index = i_1;
          indexUpdated = true;
          break;
        }
      }
      if (currentValue && indexUpdated) {
        index = index + 1;
      }
      return matches2[index] ? matches2[index] : matches2[0];
    }
    return matches2[0];
  }
}
function Search2(inputVal, items, searchType, ignoreCase, dataSource, fields, type, ignoreAccent) {
  var listItems = items;
  ignoreCase = ignoreCase !== void 0 && ignoreCase !== null ? ignoreCase : true;
  var itemData = {
    item: null,
    index: null
  };
  if (inputVal && inputVal.length) {
    var strLength = inputVal.length;
    var queryStr = ignoreCase ? inputVal.toLocaleLowerCase() : inputVal;
    queryStr = escapeCharRegExp(queryStr);
    var _loop_1 = function(i2, itemsData2) {
      var item = itemsData2[i2];
      var filterValue;
      if (items && dataSource) {
        var checkField_1 = item;
        var fieldValue_1 = fields.text.split(".");
        dataSource.filter(function(data) {
          Array.prototype.slice.call(fieldValue_1).forEach(function(value) {
            if (type === "object" && !data.isHeader && checkField_1.textContent.toString().indexOf(data[value]) !== -1 && data[fields.value] != null && checkField_1.getAttribute("data-value") === data[fields.value].toString() || type === "string" && checkField_1.textContent.toString().indexOf(data) !== -1) {
              filterValue = type === "object" ? data[value] : data;
            }
          });
        });
      }
      var text = dataSource && filterValue ? (ignoreCase ? filterValue.toString().toLocaleLowerCase() : filterValue).replace(/^\s+|\s+$/g, "") : (ignoreCase ? item.textContent.toLocaleLowerCase() : item.textContent).replace(/^\s+|\s+$/g, "");
      if (ignoreAccent && text && queryStr) {
        text = text.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
        queryStr = queryStr.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
      }
      if (searchType === "Equal" && text === queryStr || searchType === "StartsWith" && text.substr(0, strLength) === queryStr || searchType === "EndsWith" && text.substr(text.length - queryStr.length) === queryStr || searchType === "Contains" && new RegExp(queryStr, "g").test(text)) {
        itemData.item = item;
        itemData.index = i2;
        return {
          value: {
            item,
            index: i2
          }
        };
      }
    };
    for (var i = 0, itemsData = listItems; i < itemsData.length; i++) {
      var state_1 = _loop_1(i, itemsData);
      if (typeof state_1 === "object") return state_1.value;
    }
    return itemData;
  }
  return itemData;
}
function escapeCharRegExp(value) {
  return value.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
function resetIncrementalSearchValues(elementId) {
  if (prevElementId === elementId) {
    prevElementId = "";
    prevString = "";
    queryString = "";
    matches2 = [];
  }
}

// node_modules/@syncfusion/ej2-dropdowns/src/common/highlight-search.js
function highlightSearch(element, query, ignoreCase, type) {
  var isHtmlElement = /<[^>]*>/g.test(element.innerText);
  if (isHtmlElement) {
    element.innerText = element.innerText.replace(/[\u00A0-\u9999<>&]/g, function(match) {
      return "&#" + match.charCodeAt(0) + ";";
    });
  }
  if (query === "") {
    return;
  } else {
    var ignoreRegex = ignoreCase ? "gim" : "gm";
    query = /^[a-zA-Z0-9- ]*$/.test(query) ? query : query.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
    var replaceQuery = type === "StartsWith" ? "^(" + query + ")" : type === "EndsWith" ? "(" + query + ")$" : "(" + query + ")";
    findTextNode(element, new RegExp(replaceQuery, ignoreRegex));
  }
}
function findTextNode(element, pattern) {
  for (var index = 0; element.childNodes && index < element.childNodes.length; index++) {
    if (element.childNodes[index].nodeType === 3 && element.childNodes[index].textContent.trim() !== "") {
      var value = element.childNodes[index].nodeValue.trim().replace(pattern, '<span class="e-highlight">$1</span>');
      element.childNodes[index].nodeValue = "";
      element.innerHTML = element.innerHTML.trim() + value;
      break;
    } else {
      findTextNode(element.childNodes[index], pattern);
    }
  }
}
function revertHighlightSearch(content2) {
  var contentElement = content2.querySelectorAll(".e-highlight");
  for (var i = contentElement.length - 1; i >= 0; i--) {
    var parent_1 = contentElement[i].parentNode;
    var text = document.createTextNode(contentElement[i].textContent);
    parent_1.replaceChild(text, contentElement[i]);
  }
}

// node_modules/@syncfusion/ej2-dropdowns/src/common/virtual-scroll.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __awaiter = function(thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : new P(function(resolve2) {
        resolve2(result.value);
      }).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = function(thisArg, body) {
  var _ = {
    label: 0,
    sent: function() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  }, f, y, t, g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};
var VirtualScroll = (
  /** @class */
  function() {
    function VirtualScroll3(parent) {
      var _this = this;
      this.sentinelInfo = {
        "up": {
          check: function(rect, info) {
            var top = rect.top - _this.containerElementRect.top;
            info.entered = top >= 0;
            return top + _this.parent.listItemHeight * _this.parent.virtualItemCount / 2 >= 0;
          },
          axis: "Y"
        },
        "down": {
          check: function(rect, info) {
            var top = rect.bottom;
            info.entered = rect.bottom <= _this.containerElementRect.bottom;
            return top - _this.parent.listItemHeight * _this.parent.virtualItemCount / 2 <= _this.parent.listItemHeight * _this.parent.virtualItemCount / 2;
          },
          axis: "Y"
        }
      };
      this.parent = parent;
      this.removeEventListener();
      this.addEventListener();
    }
    VirtualScroll3.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on("observe", this.observe, this);
      this.parent.on("setGeneratedData", this.setGeneratedData, this);
      this.parent.on("dataProcessAsync", this.dataProcessAsync, this);
      this.parent.on("setCurrentViewDataAsync", this.setCurrentViewDataAsync, this);
      this.parent.on("bindScrollEvent", this.bindScrollEvent, this);
    };
    VirtualScroll3.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off("observe", this.observe);
      this.parent.off("setGeneratedData", this.setGeneratedData);
      this.parent.off("dataProcessAsync", this.dataProcessAsync);
      this.parent.off("setCurrentViewDataAsync", this.setCurrentViewDataAsync);
      this.parent.off("bindScrollEvent", this.bindScrollEvent);
    };
    VirtualScroll3.prototype.bindScrollEvent = function(component) {
      var _this = this;
      this.component = component.component;
      this.observe(function(scrollArgs) {
        return _this.scrollListener(scrollArgs);
      });
    };
    VirtualScroll3.prototype.observe = function(callback) {
      this.containerElementRect = this.parent.popupContentElement.getBoundingClientRect();
      EventHandler.add(this.parent.popupContentElement, "wheel mousedown", this.popupScrollHandler, this);
      this.touchModule = new Touch(this.parent.popupContentElement, {
        scroll: this.popupScrollHandler.bind(this)
      });
      EventHandler.add(this.parent.popupContentElement, "scroll", this.virtualScrollHandler(callback), this);
    };
    VirtualScroll3.prototype.getModuleName = function() {
      return "VirtualScroll";
    };
    VirtualScroll3.prototype.popupScrollHandler = function() {
      this.parent.isMouseScrollAction = true;
      this.parent.isPreventScrollAction = false;
    };
    VirtualScroll3.prototype.getPageQuery = function(query, virtualStartIndex, virtualEndIndex) {
      if (virtualEndIndex !== 0 && !this.parent.allowFiltering && this.component !== "autocomplete") {
        query = query.skip(virtualStartIndex);
      }
      return query;
    };
    VirtualScroll3.prototype.setGeneratedData = function(qStartIndex, recentlyGeneratedData) {
      var loopIteration = 0;
      var endIndex = this.parent.listData.length + this.parent.virtualItemStartIndex;
      for (var i = this.parent.virtualItemStartIndex; i < endIndex; i++) {
        var alreadyAddedData = this.parent.generatedDataObject[i];
        if (!alreadyAddedData) {
          if (recentlyGeneratedData !== null && this.parent.listData.slice(loopIteration, loopIteration + 1).length > 0) {
            var slicedData = this.parent.listData.slice(loopIteration, loopIteration + 1);
            if (slicedData.length > 0) {
              this.parent.generatedDataObject[i] = slicedData;
            }
          }
        }
        loopIteration++;
      }
    };
    VirtualScroll3.prototype.generateAndExecuteQueryAsync = function(query, virtualItemStartIndex, virtualItemEndIndex, isQueryGenerated) {
      if (virtualItemStartIndex === void 0) {
        virtualItemStartIndex = 0;
      }
      if (virtualItemEndIndex === void 0) {
        virtualItemEndIndex = 0;
      }
      if (isQueryGenerated === void 0) {
        isQueryGenerated = false;
      }
      var dataSource = this.parent.dataSource;
      if (!isQueryGenerated) {
        if (!isNullOrUndefined(this.parent.query)) {
          var newQuery = this.removeSkipAndTakeEvents(this.parent.query.clone());
          query = this.getPageQuery(newQuery, virtualItemStartIndex, virtualItemEndIndex);
        } else {
          query = this.getPageQuery(query, virtualItemStartIndex, virtualItemEndIndex);
        }
      }
      var tempCustomFilter = this.parent.isCustomFilter;
      if (this.component === "combobox") {
        var totalData = 0;
        if (this.parent.dataSource instanceof DataManager) {
          totalData = this.parent.dataSource.dataSource.json.length;
        } else if (this.parent.dataSource && this.parent.dataSource.length > 0) {
          totalData = this.parent.dataSource.length;
        }
        if (totalData > 0) {
          this.parent.isCustomFilter = totalData === this.parent.totalItemCount && this.parent.queryString !== this.parent.typedString ? true : this.parent.isCustomFilter;
        }
      }
      this.parent.resetList(dataSource, this.parent.fields, query);
      this.parent.isCustomFilter = tempCustomFilter;
    };
    VirtualScroll3.prototype.removeSkipAndTakeEvents = function(query) {
      query.queries = query.queries.filter(function(event2) {
        return event2.fn !== "onSkip" && event2.fn !== "onTake";
      });
      return query;
    };
    VirtualScroll3.prototype.setCurrentViewDataAsync = function(component) {
      var currentData = [];
      var isResetListCalled = false;
      var isListUpdated = true;
      if (isNullOrUndefined(this.component)) {
        this.component = component.component;
      }
      var endIndex = this.parent.viewPortInfo.endIndex;
      if (this.component === "multiselect" && this.parent.mode === "CheckBox" && this.parent.value && Array.isArray(this.parent.value) && this.parent.value.length > 0 && this.parent.enableSelectionOrder && this.parent.targetElement().trim() === "") {
        if (this.parent.viewPortInfo.startIndex < this.parent.value.length) {
          endIndex = this.parent.viewPortInfo.endIndex - this.parent.value.length;
          if (this.parent.viewPortInfo.startIndex === 0) {
            var oldUlElement = this.parent.list.querySelector(".e-list-parent:not(.e-reorder)");
            if (oldUlElement) {
              this.parent.list.querySelector(".e-virtual-ddl-content").removeChild(oldUlElement);
            }
            this.parent.updateVirtualReOrderList(true);
            if (this.parent.value.length < this.parent.itemCount && this.parent.value.length !== this.parent.totalItemCount) {
              var oldUlElement_1 = this.parent.list.querySelector(".e-list-parent:not(.e-reorder)");
              if (oldUlElement_1) {
                this.parent.list.querySelector(".e-virtual-ddl-content").removeChild(oldUlElement_1);
              }
              var query = this.parent.getForQuery(this.parent.value).clone();
              query = query.skip(0).take(this.parent.itemCount - (this.parent.value.length - this.parent.viewPortInfo.startIndex));
              this.parent.appendUncheckList = true;
              this.parent.setCurrentView = false;
              this.parent.resetList(this.parent.dataSource, this.parent.fields, query);
              isListUpdated = false;
              this.parent.appendUncheckList = this.parent.dataSource instanceof DataManager ? this.parent.appendUncheckList : false;
              isListUpdated = false;
            } else {
              var oldUlElement_2 = this.parent.list.querySelector(".e-list-parent:not(.e-reorder)");
              if (oldUlElement_2) {
                this.parent.list.querySelector(".e-virtual-ddl-content").removeChild(oldUlElement_2);
              }
            }
            isListUpdated = false;
          } else if (this.parent.viewPortInfo.startIndex !== 0) {
            this.parent.updateVirtualReOrderList(true);
            var oldUlElement = this.parent.list.querySelector(".e-list-parent:not(.e-reorder)");
            if (oldUlElement) {
              this.parent.list.querySelector(".e-virtual-ddl-content").removeChild(oldUlElement);
            }
            isListUpdated = false;
          }
          if (this.parent.viewPortInfo.startIndex !== 0 && this.parent.viewPortInfo.startIndex - this.parent.value.length !== this.parent.itemCount && this.parent.viewPortInfo.startIndex + this.parent.itemCount > this.parent.value.length) {
            var query = this.parent.getForQuery(this.parent.value).clone();
            query = query.skip(0).take(this.parent.itemCount - (this.parent.value.length - this.parent.viewPortInfo.startIndex));
            this.parent.appendUncheckList = true;
            this.parent.setCurrentView = false;
            var oldUlElement = this.parent.list.querySelector(".e-list-parent:not(.e-reorder)");
            if (oldUlElement) {
              this.parent.list.querySelector(".e-virtual-ddl-content").removeChild(oldUlElement);
            }
            this.parent.resetList(this.parent.dataSource, this.parent.fields, query);
            isListUpdated = false;
            this.parent.appendUncheckList = this.parent.dataSource instanceof DataManager ? this.parent.appendUncheckList : false;
          }
        } else {
          var reOrderList = this.parent.list.querySelectorAll(".e-reorder")[0];
          if (this.parent.list.querySelector(".e-virtual-ddl-content") && reOrderList) {
            this.parent.list.querySelector(".e-virtual-ddl-content").removeChild(reOrderList);
          }
          var query = this.parent.getForQuery(this.parent.value).clone();
          var skipvalue = this.parent.viewPortInfo.startIndex - this.parent.value.length >= 0 ? this.parent.viewPortInfo.startIndex - this.parent.value.length : 0;
          query = query.skip(skipvalue);
          this.parent.setCurrentView = false;
          this.parent.resetList(this.parent.dataSource, this.parent.fields, query);
          isListUpdated = false;
        }
        this.parent.totalItemsCount();
      }
      if (isListUpdated) {
        for (var i = this.parent.viewPortInfo.startIndex; i < endIndex; i++) {
          var index = i;
          if (this.component === "multiselect" && this.parent.mode === "CheckBox") {
            var oldUlElement = this.parent.list.querySelector(".e-list-parent.e-reorder");
            if (oldUlElement) {
              this.parent.list.querySelector(".e-virtual-ddl-content").removeChild(oldUlElement);
            }
          }
          var alreadyAddedData = this.parent.generatedDataObject[index];
          if (this.component === "multiselect" && this.parent.hideSelectedItem) {
            if (alreadyAddedData) {
              var value = getValue(this.parent.fields.value, alreadyAddedData[0]);
              if (this.parent.value && value !== null && Array.isArray(this.parent.value) && this.parent.value.length > 0 && this.parent.value.indexOf(value) < 0) {
                var query = this.parent.getForQuery(this.parent.value).clone();
                if (this.parent.viewPortInfo.endIndex === this.parent.totalItemCount + this.parent.value.length && this.parent.hideSelectedItem) {
                  query = query.skip(this.parent.totalItemCount - this.parent.itemCount);
                } else {
                  query = query.skip(this.parent.viewPortInfo.startIndex);
                }
                this.parent.setCurrentView = false;
                this.parent.isPreventScrollAction = true;
                this.parent.resetList(this.parent.dataSource, this.parent.fields, query);
                isResetListCalled = true;
                break;
              } else if (this.parent.value === null || this.parent.value && this.parent.value.length === 0) {
                currentData.push(alreadyAddedData[0]);
              }
            }
            if (index === endIndex - 1) {
              if (currentData.length !== this.parent.itemCount) {
                if (this.parent.hideSelectedItem) {
                  var query = this.parent.value && this.parent.value.length > 0 ? this.parent.getForQuery(this.parent.value).clone() : new Query();
                  if (this.parent.value && this.parent.viewPortInfo.endIndex === this.parent.totalItemCount + this.parent.value.length && this.parent.hideSelectedItem) {
                    query = query.skip(this.parent.totalItemCount - this.parent.itemCount);
                  } else {
                    query = query.skip(this.parent.viewPortInfo.startIndex);
                  }
                  this.parent.setCurrentView = false;
                  this.parent.resetList(this.parent.dataSource, this.parent.fields, query);
                  isResetListCalled = true;
                }
              }
            }
          } else {
            if (alreadyAddedData) {
              currentData.push(alreadyAddedData[0]);
            }
          }
          this.parent.setCurrentView = false;
        }
      }
      if (!isResetListCalled && isListUpdated) {
        if (this.component === "multiselect" && this.parent.allowCustomValue && this.parent.viewPortInfo.startIndex === 0 && this.parent.virtualCustomData) {
          currentData.splice(0, 0, this.parent.virtualCustomData);
        }
        var totalData = [];
        if (this.component === "multiselect" && this.parent.allowCustomValue && this.parent.viewPortInfo.endIndex === this.parent.totalItemCount) {
          if (this.parent.virtualCustomSelectData && this.parent.virtualCustomSelectData.length > 0) {
            totalData = currentData.concat(this.parent.virtualCustomSelectData);
            currentData = totalData;
          }
        }
        this.parent.renderItems(currentData, this.parent.fields, this.component === "multiselect" && this.parent.mode === "CheckBox");
        this.parent.updateSelectionList();
      }
      if (this.component === "multiselect") {
        this.parent.updatevirtualizationList();
        this.parent.checkMaxSelection();
      }
      this.parent.getSkeletonCount();
      this.parent.skeletonCount = this.parent.totalItemCount !== 0 && this.parent.totalItemCount < this.parent.itemCount * 2 && (!(this.parent.dataSource instanceof DataManager) || this.parent.dataSource instanceof DataManager && this.parent.totalItemCount <= this.parent.itemCount) ? 0 : this.parent.skeletonCount;
      var virtualTrackElement = this.parent.list.getElementsByClassName("e-virtual-ddl")[0];
      var preventAction = this.component !== "multiselect" || this.component === "multiselect" && !(this.parent.dataSource instanceof DataManager) || this.parent.dataSource instanceof DataManager && !isResetListCalled;
      if (virtualTrackElement && preventAction) {
        virtualTrackElement.style = this.parent.GetVirtualTrackHeight();
      } else if (!virtualTrackElement && this.parent.skeletonCount > 0 && this.parent.popupWrapper) {
        var virualElement = this.parent.createElement("div", {
          id: this.parent.element.id + "_popup",
          className: "e-virtual-ddl",
          styles: this.parent.GetVirtualTrackHeight()
        });
        this.parent.popupWrapper.querySelector(".e-dropdownbase").appendChild(virualElement);
      }
      if (this.component !== "multiselect" || this.component === "multiselect" && !(this.parent.dataSource instanceof DataManager) || this.parent.dataSource instanceof DataManager && (!isResetListCalled || this.parent.viewPortInfo.startIndex === 0)) {
        this.parent.UpdateSkeleton();
      }
      this.parent.liCollections = this.parent.list.querySelectorAll(".e-list-item");
      var virtualContentElement = this.parent.list.getElementsByClassName("e-virtual-ddl-content")[0];
      if (virtualContentElement && preventAction) {
        virtualContentElement.style = this.parent.getTransformValues();
      }
      if (this.parent.fields.groupBy) {
        this.parent.scrollStop();
      }
      if (this.parent.keyCode === 40 && this.parent.isScrollChanged && this.parent.hideSelectedItem && !isNullOrUndefined(this.parent.currentFocuedListElement)) {
        var currentSelectElem = this.parent.getElementByValue(this.parent.currentFocuedListElement.getAttribute("data-value"));
        this.parent.addListFocus(currentSelectElem);
        this.parent.isScrollChanged = false;
      }
    };
    VirtualScroll3.prototype.generateQueryAndSetQueryIndexAsync = function(query, isPopupOpen) {
      var isStartIndexInitialised = false;
      var queryStartIndex = 0;
      var queryEndIndex = 0;
      var vEndIndex = this.parent.viewPortInfo.endIndex;
      if (!isPopupOpen && vEndIndex !== 0) {
        for (var i = this.parent.viewPortInfo.startIndex; i <= vEndIndex; i++) {
          if (!(i in this.parent.generatedDataObject)) {
            if (!isStartIndexInitialised) {
              isStartIndexInitialised = true;
              queryStartIndex = queryEndIndex = i;
            } else {
              queryEndIndex = i === vEndIndex ? i : i + 1;
            }
          }
        }
      }
      if (isStartIndexInitialised && !(this.parent.totalItemCount === queryStartIndex && this.parent.totalItemCount === queryEndIndex)) {
        this.parent.virtualItemStartIndex = queryStartIndex;
        this.parent.virtualItemEndIndex = queryEndIndex;
        this.parent.setCurrentView = true;
        this.generateAndExecuteQueryAsync(query, queryStartIndex, queryEndIndex);
        if (this.component === "multiselect" && this.parent.hideSelectedItem && this.parent.value && Array.isArray(this.parent.value) && this.parent.value.length > 0) {
          this.parent.totalItemsCount();
        }
        if (this.component === "multiselect" && this.parent.virtualItemStartIndex === this.parent.virtualItemEndIndex) {
          this.parent.virtualItemStartIndex = this.parent.viewPortInfo.startIndex;
          this.parent.virtualItemEndIndex = this.parent.viewPortInfo.endIndex;
        }
      }
      if (!(this.parent.dataSource instanceof DataManager) || this.parent.dataSource instanceof DataManager && !this.parent.isRequesting) {
        this.setCurrentViewDataAsync();
      }
    };
    VirtualScroll3.prototype.dataProcessAsync = function(isOpenPopup) {
      this.parent.selectedValueInfo = null;
      this.parent.virtualItemStartIndex = this.parent.viewPortInfo.startIndex;
      this.parent.virtualItemEndIndex = this.parent.viewPortInfo.endIndex;
      this.generateQueryAndSetQueryIndexAsync(new Query(), isOpenPopup);
    };
    VirtualScroll3.prototype.virtualScrollRefreshAsync = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              this.parent.isCustomFilter = !(this.parent.isTyped || this.component === "combobox" && this.parent.allowFiltering && this.parent.queryString !== this.parent.typedString || !isNullOrUndefined(this.parent.filterInput) && !isNullOrUndefined(this.parent.filterInput.value) && this.parent.filterInput.value !== "" && this.component !== "combobox") && !(this.component === "autocomplete" && this.parent.value != null) || this.parent.isCustomFilter;
              if (this.parent.allowFiltering || this.component === "autocomplete") {
                if (!isNullOrUndefined(this.parent.typedString) && !(this.component === "combobox" && !isNullOrUndefined(this.parent.typedString) && this.parent.allowFiltering)) {
                  if (this.parent.viewPortInfo.endIndex >= this.parent.dataCount) {
                    this.parent.viewPortInfo.endIndex = this.parent.dataCount;
                  }
                  if (this.parent.viewPortInfo.startIndex >= this.parent.dataCount) {
                    this.parent.viewPortInfo.startIndex = this.parent.dataCount - this.parent.itemCount;
                  }
                } else {
                  this.parent.getSkeletonCount(true);
                  if (this.component === "combobox") {
                    this.parent.skeletonCount = this.parent.totalItemCount !== 0 && this.parent.totalItemCount < this.parent.itemCount * 2 && (!(this.parent.dataSource instanceof DataManager) || this.parent.dataSource instanceof DataManager && this.parent.totalItemCount <= this.parent.itemCount) ? 0 : this.parent.skeletonCount;
                  }
                }
              }
              return [4, this.dataProcessAsync()];
            case 1:
              _a.sent();
              if (this.parent.keyboardEvent != null && (!(this.parent.dataSource instanceof DataManager) || this.parent.dataSource instanceof DataManager && !this.parent.isRequesting)) {
                this.parent.handleVirtualKeyboardActions(this.parent.keyboardEvent, this.parent.pageCount);
              }
              if (!this.parent.customFilterQuery) {
                this.parent.isCustomFilter = false;
              }
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    VirtualScroll3.prototype.scrollListener = function(scrollArgs) {
      var _this = this;
      if (!this.parent.isPreventScrollAction && !this.parent.isVirtualTrackHeight) {
        this.parent.preventSetCurrentData = false;
        var info = scrollArgs.sentinel;
        var pStartIndex = this.parent.previousStartIndex;
        this.parent.viewPortInfo = this.getInfoFromView(scrollArgs.direction, info, scrollArgs.offset, false);
        this.parent.isUpwardScrolling = false;
        if (this.parent.previousStartIndex !== pStartIndex && !this.parent.isKeyBoardAction) {
          this.parent.isScrollActionTriggered = false;
          this.parent.currentPageNumber = this.parent.viewPortInfo.currentPageNumber;
          this.parent.virtualListInfo = __assign({}, this.parent.viewPortInfo);
          this.parent.isPreventKeyAction = true;
          this.parent.isVirtualScrolling = true;
          setTimeout(function() {
            _this.parent.pageCount = _this.parent.getPageCount();
            _this.virtualScrollRefreshAsync().then(function() {
              if (_this.parent.popupObj) {
                _this.parent.list = _this.parent.popupObj.element.querySelector(".e-content") || select(".e-content");
                _this.parent.updateSelectionList();
                _this.parent.liCollections = _this.parent.getItems();
              }
              _this.parent.isKeyBoardAction = false;
              _this.parent.isVirtualScrolling = false;
              _this.parent.isPreventKeyAction = false;
            });
          }, 5);
        } else if (this.parent.isScrollActionTriggered) {
          this.parent.isPreventKeyAction = false;
          this.parent.isScrollActionTriggered = false;
          this.parent.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.parent.getTransformValues();
        }
        this.parent.previousInfo = this.parent.viewPortInfo;
      }
    };
    VirtualScroll3.prototype.getInfoFromView = function(direction, info, e, isscrollAction) {
      var infoType = {
        direction,
        sentinelInfo: info,
        offsets: e,
        startIndex: this.parent.previousStartIndex,
        endIndex: this.parent.previousEndIndex
      };
      var vHeight = this.parent.popupContentElement ? this.parent.popupContentElement.getBoundingClientRect().height : 0;
      var rowHeight2 = this.parent.listItemHeight;
      var exactTopIndex = e.top / rowHeight2;
      var infoViewIndices = vHeight / rowHeight2;
      var exactEndIndex = exactTopIndex + infoViewIndices;
      var pageSizeBy4 = this.parent.virtualItemCount / 4;
      var totalItemCount = this.parent.totalItemCount;
      if (infoType.direction === "down") {
        var sIndex = Math.round(exactEndIndex) - Math.round(pageSizeBy4);
        if (isNullOrUndefined(infoType.startIndex) || exactEndIndex > infoType.startIndex + Math.round(this.parent.virtualItemCount / 2 + pageSizeBy4) && infoType.endIndex !== totalItemCount) {
          infoType.startIndex = sIndex >= 0 ? Math.round(sIndex) : 0;
          infoType.startIndex = infoType.startIndex > exactTopIndex ? Math.floor(exactTopIndex) : infoType.startIndex;
          var eIndex = infoType.startIndex + this.parent.virtualItemCount;
          infoType.startIndex = eIndex < exactEndIndex ? Math.ceil(exactEndIndex) - this.parent.virtualItemCount : infoType.startIndex;
          infoType.endIndex = eIndex < totalItemCount ? eIndex : totalItemCount;
          infoType.startIndex = eIndex >= totalItemCount ? infoType.endIndex - this.parent.virtualItemCount > 0 ? infoType.endIndex - this.parent.virtualItemCount : 0 : infoType.startIndex;
          infoType.currentPageNumber = Math.ceil(infoType.endIndex / this.parent.virtualItemCount);
        }
      } else if (infoType.direction === "up") {
        if (infoType.startIndex && infoType.endIndex || Math.ceil(exactTopIndex) > this.parent.previousStartIndex) {
          var loadAtIndex = Math.round((infoType.startIndex * rowHeight2 + pageSizeBy4 * rowHeight2) / rowHeight2);
          if (exactTopIndex < loadAtIndex || Math.ceil(exactTopIndex) > this.parent.previousStartIndex) {
            var idxAddedToExactTop = pageSizeBy4 > infoViewIndices ? pageSizeBy4 : infoViewIndices + infoViewIndices / 4;
            var eIndex = Math.round(exactTopIndex + idxAddedToExactTop);
            infoType.endIndex = eIndex < totalItemCount ? eIndex : totalItemCount;
            var sIndex = infoType.endIndex - this.parent.virtualItemCount;
            infoType.startIndex = sIndex > 0 ? sIndex : 0;
            infoType.endIndex = sIndex < 0 ? this.parent.virtualItemCount : infoType.endIndex;
            infoType.currentPageNumber = Math.ceil(infoType.startIndex / this.parent.virtualItemCount);
          }
        }
      }
      if (!isscrollAction) {
        this.parent.previousStartIndex = infoType.startIndex;
        this.parent.startIndex = infoType.startIndex;
        this.parent.previousEndIndex = infoType.endIndex;
      } else {
        this.parent.scrollPreStartIndex = infoType.startIndex;
      }
      return infoType;
    };
    VirtualScroll3.prototype.virtualScrollHandler = function(callback) {
      var _this = this;
      var delay = Browser.info.name === "chrome" ? 200 : 100;
      var prevTop = 0;
      var debounced100 = debounce(callback, delay);
      var debounced50 = debounce(callback, 50);
      return function(e) {
        var top = e.target.scrollTop;
        var left = e.target.scrollLeft;
        var direction = prevTop < top && !_this.parent.isUpwardScrolling ? "down" : "up";
        prevTop = top;
        var current = _this.sentinelInfo[direction];
        var pstartIndex = _this.parent.scrollPreStartIndex;
        var scrollOffsetargs = {
          top,
          left
        };
        if (_this.parent.list && _this.parent.list.querySelectorAll(".e-virtual-list").length > 0) {
          _this.getInfoFromView(direction, current, scrollOffsetargs, true);
          if (_this.parent.scrollPreStartIndex !== pstartIndex && !_this.parent.isPreventScrollAction) {
            _this.parent.isScrollActionTriggered = true;
            var virtualPoup = _this.parent.list.querySelector(".e-virtual-ddl-content");
            virtualPoup.style.transform = "translate(0px," + top + "px)";
          }
        }
        var debounceFunction = debounced100;
        if (current.axis === "X") {
          debounceFunction = debounced50;
        }
        debounceFunction({
          direction,
          sentinel: current,
          offset: {
            top,
            left
          },
          focusElement: document.activeElement
        });
      };
    };
    VirtualScroll3.prototype.destroy = function() {
      this.removeEventListener();
    };
    return VirtualScroll3;
  }()
);

// node_modules/@syncfusion/ej2-notifications/src/toast/toast.js
var __extends19 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate6 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ROOT = "e-toast";
var CONTAINER = "e-toast-container";
var TITLE = "e-toast-title";
var WIDTHFULL = "e-toast-full-width";
var CONTENT = "e-toast-content";
var MESSAGE = "e-toast-message";
var ICON = "e-toast-icon";
var PROGRESS = "e-toast-progress";
var ACTIOBUTTONS = "e-toast-actions";
var CLOSEBTN = "e-toast-close-icon";
var RTL = "e-rtl";
var TOAST_BLAZOR_HIDDEN = "e-blazor-toast-hidden";
var ToastPosition = (
  /** @class */
  function(_super) {
    __extends19(ToastPosition2, _super);
    function ToastPosition2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate6([Property("Left")], ToastPosition2.prototype, "X", void 0);
    __decorate6([Property("Top")], ToastPosition2.prototype, "Y", void 0);
    return ToastPosition2;
  }(ChildProperty)
);
var ButtonModelProps = (
  /** @class */
  function(_super) {
    __extends19(ButtonModelProps2, _super);
    function ButtonModelProps2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate6([Property(null)], ButtonModelProps2.prototype, "model", void 0);
    __decorate6([Property(null)], ButtonModelProps2.prototype, "click", void 0);
    return ButtonModelProps2;
  }(ChildProperty)
);
var ToastAnimations = (
  /** @class */
  function(_super) {
    __extends19(ToastAnimations2, _super);
    function ToastAnimations2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate6([Property("FadeIn")], ToastAnimations2.prototype, "effect", void 0);
    __decorate6([Property(600)], ToastAnimations2.prototype, "duration", void 0);
    __decorate6([Property("ease")], ToastAnimations2.prototype, "easing", void 0);
    return ToastAnimations2;
  }(ChildProperty)
);
var ToastAnimationSettings = (
  /** @class */
  function(_super) {
    __extends19(ToastAnimationSettings2, _super);
    function ToastAnimationSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate6([Complex({
      effect: "FadeIn",
      duration: 600,
      easing: "ease"
    }, ToastAnimations)], ToastAnimationSettings2.prototype, "show", void 0);
    __decorate6([Complex({
      effect: "FadeOut",
      duration: 600,
      easing: "ease"
    }, ToastAnimations)], ToastAnimationSettings2.prototype, "hide", void 0);
    return ToastAnimationSettings2;
  }(ChildProperty)
);
var Toast = (
  /** @class */
  function(_super) {
    __extends19(Toast2, _super);
    function Toast2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.toastCollection = [];
      _this.needsID = true;
      return _this;
    }
    Toast2.prototype.getModuleName = function() {
      return "toast";
    };
    Toast2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    Toast2.prototype.destroy = function() {
      this.hide("All");
      this.element.classList.remove(CONTAINER);
      setStyleAttribute(this.element, {
        "position": "",
        "z-index": ""
      });
      if (!isNullOrUndefined(this.refElement) && !isNullOrUndefined(this.refElement.parentElement)) {
        this.refElement.parentElement.insertBefore(this.element, this.refElement);
        detach(this.refElement);
        this.refElement = void 0;
      }
      if (!this.isBlazorServer()) {
        _super.prototype.destroy.call(this);
      }
    };
    Toast2.prototype.preRender = function() {
      this.isDevice = Browser.isDevice;
      if (this.width === "300px") {
        this.width = this.isDevice && screen.width < 768 ? "100%" : "300px";
      }
      if (isNullOrUndefined(this.target)) {
        this.target = document.body;
      }
      if (this.enableRtl && !this.isBlazorServer()) {
        this.element.classList.add(RTL);
      }
    };
    Toast2.prototype.render = function() {
      this.progressObj = [];
      this.intervalId = [];
      this.contentTemplate = null;
      this.toastTemplate = null;
      this.renderComplete();
      this.initRenderClass = this.element.className;
    };
    Toast2.prototype.show = function(toastObj) {
      var collectionObj;
      if (!isNullOrUndefined(toastObj)) {
        this.templateChanges(toastObj);
        collectionObj = JSON.parse(JSON.stringify(toastObj));
        extend(this, this, toastObj);
      }
      if (isNullOrUndefined(this.toastContainer)) {
        this.toastContainer = this.getContainer();
        var target = typeof this.target === "string" ? document.querySelector(this.target) : typeof this.target === "object" ? this.target : document.body;
        if (isNullOrUndefined(target)) {
          return;
        }
        if (target.tagName === "BODY") {
          this.toastContainer.style.position = "fixed";
        } else {
          this.toastContainer.style.position = "absolute";
          target.style.position = "relative";
        }
        this.setPositioning(this.position);
        target.appendChild(this.toastContainer);
      }
      if (this.isBlazorServer() && this.element.classList.contains("e-control")) {
        this.isToastModel(toastObj);
        return;
      }
      this.toastEle = this.createElement("div", {
        className: ROOT,
        id: getUniqueID("toast")
      });
      this.setWidthHeight();
      this.setCSSClass(this.cssClass);
      if (isNullOrUndefined(this.template) || this.template === "") {
        this.personalizeToast();
      } else {
        this.templateRendering();
      }
      this.setProgress();
      this.setCloseButton();
      this.setAria();
      this.appendToTarget(toastObj);
      if (this.isDevice && screen.width < 768) {
        new Touch(this.toastEle, {
          swipe: this.swipeHandler.bind(this)
        });
      }
      if (!isNullOrUndefined(collectionObj)) {
        extend(collectionObj, {
          element: [this.toastEle]
        }, true);
        this.toastCollection.push(collectionObj);
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Toast2.prototype.showToast = function(id, toastObj) {
      this.toastEle = this.element.querySelector("#" + id);
      this.show(toastObj);
    };
    Toast2.prototype.isToastModel = function(toastObj) {
      this.toastContainer = this.element;
      this.setPositioning(this.position);
      var proxy = this;
      if (!isNullOrUndefined(proxy.element.lastElementChild)) {
        this.setProgress();
      }
      this.setAria();
      this.appendToTarget(toastObj);
    };
    Toast2.prototype.swipeHandler = function(e) {
      var toastEle = closest(e.originalEvent.target, "." + ROOT + ":not(." + CONTAINER + ")");
      var hideAnimation = this.animation.hide.effect;
      if (!isNullOrUndefined(toastEle)) {
        if (e.swipeDirection === "Right") {
          this.animation.hide.effect = "SlideRightOut";
          this.hideToast("swipe", toastEle);
        } else if (e.swipeDirection === "Left") {
          this.animation.hide.effect = "SlideLeftOut";
          this.hideToast("swipe", toastEle);
        }
        this.animation.hide.effect = hideAnimation;
      }
    };
    Toast2.prototype.templateChanges = function(toastObj) {
      if (!isUndefined(toastObj.content) && !isNullOrUndefined(this.contentTemplate) && this.content !== toastObj.content) {
        this.clearContentTemplate();
      }
      if (!isUndefined(toastObj.template) && !isNullOrUndefined(this.toastTemplate) && this.template !== toastObj.template) {
        this.clearToastTemplate();
      }
    };
    Toast2.prototype.setCSSClass = function(cssClass2) {
      if (cssClass2) {
        var split = cssClass2.indexOf(",") !== -1 ? "," : " ";
        classList(this.toastEle, cssClass2.split(split), []);
        if (this.toastContainer) {
          classList(this.toastContainer, cssClass2.split(split), []);
        }
      }
    };
    Toast2.prototype.setWidthHeight = function() {
      if (this.width === "300px") {
        this.toastEle.style.width = formatUnit(this.width);
      } else if (this.width === "100%") {
        this.toastContainer.classList.add(WIDTHFULL);
      } else {
        this.toastEle.style.width = formatUnit(this.width);
        this.toastContainer.classList.remove(WIDTHFULL);
      }
      this.toastEle.style.height = formatUnit(this.height);
    };
    Toast2.prototype.templateRendering = function() {
      this.fetchEle(this.toastEle, this.template, "template");
    };
    Toast2.prototype.sanitizeHelper = function(value) {
      if (this.enableHtmlSanitizer) {
        var item = SanitizeHtmlHelper.beforeSanitize();
        var beforeEvent = {
          cancel: false,
          helper: null
        };
        extend(item, item, beforeEvent);
        this.trigger("beforeSanitizeHtml", item);
        if (item.cancel && !isNullOrUndefined(item.helper)) {
          value = item.helper(value);
        } else if (!item.cancel) {
          value = SanitizeHtmlHelper.serializeValue(item, value);
        }
      }
      return value;
    };
    Toast2.prototype.hide = function(element) {
      this.hideToast("", element);
    };
    Toast2.prototype.hideToast = function(interactionType, element) {
      if (isNullOrUndefined(this.toastContainer) || this.toastContainer.childElementCount === 0) {
        return;
      }
      if (typeof element === "string" && element === "All") {
        for (var i = 0; i < this.toastContainer.childElementCount; i++) {
          this.destroyToast(this.toastContainer.children[i], interactionType);
        }
        return;
      }
      if (isNullOrUndefined(element)) {
        element = this.newestOnTop ? this.toastContainer.lastElementChild : this.toastContainer.firstElementChild;
      }
      this.destroyToast(element, interactionType);
    };
    Toast2.prototype.fetchEle = function(ele, value, prob) {
      value = typeof value === "string" ? this.sanitizeHelper(value) : value;
      var templateFn;
      var tempVar;
      var tmpArray;
      var templateProps;
      if (ele.classList.contains(TITLE)) {
        templateProps = this.element.id + "title";
      } else if (ele.classList.contains(CONTENT)) {
        templateProps = this.element.id + "content";
      } else {
        templateProps = this.element.id + "template";
      }
      if (prob === "content") {
        tempVar = this.contentTemplate;
      } else {
        tempVar = this.toastTemplate;
      }
      if (!isNullOrUndefined(tempVar)) {
        ele.appendChild(tempVar.cloneNode(true));
        return ele;
      }
      try {
        if (typeof value !== "function" && document.querySelectorAll(value).length > 0) {
          var elem = null;
          if (prob !== "title") {
            elem = document.querySelector(value);
            ele.appendChild(elem);
            elem.style.display = "";
          }
          var clo = isNullOrUndefined(elem) ? tempVar : elem.cloneNode(true);
          if (prob === "content") {
            this.contentTemplate = clo;
          } else {
            this.toastTemplate = clo;
          }
        } else {
          templateFn = compile(value);
        }
      } catch (e) {
        templateFn = typeof value == "object" ? compile(value) : compile(initializeCSPTemplate(function() {
          return value;
        }));
      }
      if (!isNullOrUndefined(templateFn)) {
        if (!this.isBlazorServer()) {
          tmpArray = templateFn({}, this, prob, null, true);
        } else {
          var isString = true;
          tmpArray = templateFn({}, this, prob, templateProps, isString);
        }
      }
      if (!isNullOrUndefined(tmpArray) && tmpArray.length > 0 && !(isNullOrUndefined(tmpArray[0].tagName) && tmpArray.length === 1)) {
        [].slice.call(tmpArray).forEach(function(el) {
          if (!isNullOrUndefined(el.tagName)) {
            el.style.display = "";
          }
          ele.appendChild(el);
        });
      } else if (typeof value !== "function" && ele.childElementCount === 0) {
        ele.innerHTML = value;
      }
      return ele;
    };
    Toast2.prototype.clearProgress = function(intervalId) {
      if (!isNullOrUndefined(this.intervalId[intervalId])) {
        clearInterval(this.intervalId[intervalId]);
        delete this.intervalId[intervalId];
      }
      if (!isNullOrUndefined(this.progressObj[intervalId])) {
        clearInterval(this.progressObj[intervalId].intervalId);
        delete this.progressObj[intervalId];
      }
    };
    Toast2.prototype.removeToastContainer = function(isClosed) {
      if (isClosed && this.toastContainer.classList.contains("e-toast-util")) {
        detach(this.toastContainer);
      }
    };
    Toast2.prototype.clearContainerPos = function(isClosed) {
      var _this = this;
      if (this.isBlazorServer()) {
        this.toastContainer = null;
        return;
      }
      if (this.customPosition) {
        setStyleAttribute(this.toastContainer, {
          "left": "",
          "top": ""
        });
        this.removeToastContainer(isClosed);
        this.toastContainer = null;
        this.customPosition = false;
      } else {
        [ROOT + "-top-left", ROOT + "-top-right", ROOT + "-bottom-left", ROOT + "-bottom-right", ROOT + "-bottom-center", ROOT + "-top-center", ROOT + "-full-width"].forEach(function(pos) {
          if (!isNullOrUndefined(_this.toastContainer) && _this.toastContainer.classList.contains(pos)) {
            _this.toastContainer.classList.remove(pos);
          }
        });
        this.removeToastContainer(isClosed);
        this.toastContainer = null;
      }
      if (!isNullOrUndefined(this.contentTemplate)) {
        this.clearContentTemplate();
      }
      if (!isNullOrUndefined(this.toastTemplate)) {
        this.clearToastTemplate();
      }
    };
    Toast2.prototype.clearContentTemplate = function() {
      this.contentTemplate.style.display = "none";
      document.body.appendChild(this.contentTemplate);
      this.contentTemplate = null;
    };
    Toast2.prototype.clearToastTemplate = function() {
      this.toastTemplate.style.display = "none";
      document.body.appendChild(this.toastTemplate);
      this.toastTemplate = null;
    };
    Toast2.prototype.isBlazorServer = function() {
      return isBlazor() && this.isServerRendered;
    };
    Toast2.prototype.destroyToast = function(toastEle, interactionType) {
      var _this = this;
      var toastObj;
      for (var i = 0; i < this.toastCollection.length; i++) {
        if (this.toastCollection[i].element[0] === toastEle) {
          toastObj = this.toastCollection[i];
          this.toastCollection.splice(i, 1);
        }
      }
      var toastBeforeClose = {
        options: this,
        cancel: false,
        type: interactionType,
        element: toastEle,
        toastContainer: this.toastContainer
      };
      var hideAnimate = this.animation.hide;
      var animate = {
        duration: hideAnimate.duration,
        name: hideAnimate.effect === "None" && animationMode === "Enable" ? "FadeOut" : hideAnimate.effect,
        timingFunction: hideAnimate.easing
      };
      var intervalId = parseInt(toastEle.id.split("toast_")[1], 10);
      var toastClose = this.isBlazorServer() ? {
        options: toastObj,
        toastContainer: this.toastContainer
      } : {
        options: toastObj,
        toastContainer: this.toastContainer,
        toastObj: this
      };
      this.trigger("beforeClose", toastBeforeClose, function(toastBeforeCloseArgs) {
        if (!toastBeforeCloseArgs.cancel) {
          if (!isNullOrUndefined(_this.progressObj[intervalId]) && !isNullOrUndefined(toastEle.querySelector("." + PROGRESS))) {
            _this.progressObj[intervalId].progressEle.style.width = "0%";
          }
          animate.end = function() {
            _this.clearProgress(intervalId);
            if (!_this.isBlazorServer() || isNullOrUndefined(toastObj)) {
              detach(toastEle);
            }
            _this.trigger("close", toastClose);
            if (_this.toastContainer.childElementCount === 0) {
              _this.clearContainerPos(true);
            }
            hideAnimate = null;
            animate = null;
          };
          new Animation(animate).animate(toastEle);
        }
      });
    };
    Toast2.prototype.personalizeToast = function() {
      this.setIcon();
      this.setTitle();
      this.setContent();
      this.actionButtons();
    };
    Toast2.prototype.setAria = function() {
      attributes(this.toastEle, {
        "role": "alert"
      });
    };
    Toast2.prototype.setPositioning = function(pos) {
      if (this.isBlazorServer()) {
        return;
      }
      if (!isNaN(parseFloat(pos.X)) || !isNaN(parseFloat(pos.Y))) {
        this.customPosition = true;
        setStyleAttribute(this.toastContainer, {
          "left": formatUnit(pos.X),
          "top": formatUnit(pos.Y)
        });
      } else {
        this.toastContainer.classList.add(ROOT + "-" + pos.Y.toString().toLowerCase() + "-" + pos.X.toString().toLowerCase());
      }
    };
    Toast2.prototype.setCloseButton = function() {
      if (!this.showCloseButton) {
        return;
      }
      var localeText = {
        close: "Close"
      };
      this.l10n = new L10n("toast", localeText, this.locale);
      this.l10n.setLocale(this.locale);
      var closeIconTitle = this.l10n.getConstant("close");
      var closeBtn = this.createElement("div", {
        className: CLOSEBTN + " e-icons ",
        attrs: {
          tabindex: "0",
          "aria-label": closeIconTitle,
          "role": "button"
        }
      });
      this.toastEle.classList.add("e-toast-header-close-icon");
      this.toastEle.appendChild(closeBtn);
    };
    Toast2.prototype.setProgress = function() {
      if (this.timeOut > 0) {
        var id = parseInt(this.toastEle.id.split("toast_")[1], 10);
        this.intervalId[id] = window.setTimeout(this.destroyToast.bind(this, this.toastEle), this.timeOut);
        this.progressObj[id] = {
          hideEta: null,
          intervalId: null,
          maxHideTime: null,
          element: null,
          timeOutId: null,
          progressEle: null
        };
        this.progressObj[id].maxHideTime = parseFloat(this.timeOut + "");
        this.progressObj[id].hideEta = (/* @__PURE__ */ new Date()).getTime() + this.progressObj[id].maxHideTime;
        this.progressObj[id].element = this.toastEle;
        if (this.extendedTimeout > 0) {
          EventHandler.add(this.toastEle, "mouseover", this.toastHoverAction.bind(this, id));
          EventHandler.add(this.toastEle, "mouseleave", this.delayedToastProgress.bind(this, id));
          this.progressObj[id].timeOutId = this.intervalId[id];
        }
        if (this.showProgressBar) {
          this.progressBarEle = this.createElement("div", {
            className: PROGRESS
          });
          this.toastEle.insertBefore(this.progressBarEle, this.toastEle.children[0]);
          this.progressObj[id].intervalId = setInterval(this.updateProgressBar.bind(this, this.progressObj[id]), 10);
          this.progressObj[id].progressEle = this.progressBarEle;
        }
      }
    };
    Toast2.prototype.toastHoverAction = function(id) {
      clearTimeout(this.progressObj[id].timeOutId);
      clearInterval(this.progressObj[id].intervalId);
      this.progressObj[id].hideEta = 0;
      var toastEle = this.progressObj[id].element;
      if (!isNullOrUndefined(toastEle.querySelector("." + PROGRESS))) {
        this.progressObj[id].progressEle.style.width = "0%";
      }
    };
    Toast2.prototype.delayedToastProgress = function(id) {
      var progress = this.progressObj[id];
      if (!isNullOrUndefined(progress)) {
        var toastEle = progress.element;
        progress.timeOutId = window.setTimeout(this.destroyToast.bind(this, toastEle), this.extendedTimeout);
        progress.maxHideTime = parseFloat(this.extendedTimeout + "");
        progress.hideEta = (/* @__PURE__ */ new Date()).getTime() + progress.maxHideTime;
        if (!isNullOrUndefined(toastEle.querySelector("." + PROGRESS))) {
          progress.intervalId = setInterval(this.updateProgressBar.bind(this, progress), 10);
        }
      }
    };
    Toast2.prototype.updateProgressBar = function(progressObj) {
      var percentage = (progressObj.hideEta - (/* @__PURE__ */ new Date()).getTime()) / progressObj.maxHideTime * 100;
      percentage = this.progressDirection === "Ltr" ? 100 - percentage : percentage;
      progressObj.progressEle.style.width = percentage + "%";
    };
    Toast2.prototype.setIcon = function() {
      if (isNullOrUndefined(this.icon) || this.icon.length === 0) {
        return;
      }
      var iconEle = this.createElement("div", {
        className: ICON + " e-icons " + this.icon
      });
      this.toastEle.classList.add("e-toast-header-icon");
      this.toastEle.appendChild(iconEle);
    };
    Toast2.prototype.setTitle = function() {
      if (isNullOrUndefined(this.title)) {
        return;
      }
      var titleEle = this.createElement("div", {
        className: TITLE
      });
      titleEle = this.fetchEle(titleEle, this.title, "title");
      var msgContainer = this.createElement("div", {
        className: MESSAGE
      });
      msgContainer.appendChild(titleEle);
      this.toastEle.appendChild(msgContainer);
    };
    Toast2.prototype.setContent = function() {
      var contentEle = this.createElement("div", {
        className: CONTENT
      });
      var ele = this.element;
      if (isNullOrUndefined(this.content) || this.content === "") {
        var isContent = this.element.innerHTML.replace(/\s/g, "") !== "";
        if ((ele.children.length > 0 || isContent) && !(ele.firstElementChild && ele.firstElementChild.classList.contains(ROOT))) {
          this.innerEle = document.createDocumentFragment();
          var tempEle_1 = this.createElement("div");
          while (ele.childNodes.length !== 0) {
            this.innerEle.appendChild(this.element.childNodes[0]);
          }
          contentEle.appendChild(this.innerEle);
          [].slice.call(contentEle.children).forEach(function(ele2) {
            tempEle_1.appendChild(ele2.cloneNode(true));
          });
          this.content = tempEle_1;
          this.appendMessageContainer(contentEle);
        }
      } else {
        if (typeof this.content === "object" && !isNullOrUndefined(this.content.tagName)) {
          contentEle.appendChild(this.content);
          this.content = this.content.cloneNode(true);
          this.appendMessageContainer(contentEle);
        } else {
          contentEle = this.fetchEle(contentEle, this.content, "content");
          this.appendMessageContainer(contentEle);
        }
      }
    };
    Toast2.prototype.appendMessageContainer = function(element) {
      if (this.toastEle.querySelectorAll("." + MESSAGE).length > 0) {
        this.toastEle.querySelector("." + MESSAGE).appendChild(element);
      } else {
        var msgContainer = this.createElement("div", {
          className: MESSAGE
        });
        msgContainer.appendChild(element);
        this.toastEle.appendChild(msgContainer);
      }
    };
    Toast2.prototype.actionButtons = function() {
      var _this = this;
      var actionBtnContainer = this.createElement("div", {
        className: ACTIOBUTTONS
      });
      [].slice.call(this.buttons).forEach(function(actionBtn) {
        if (isNullOrUndefined(actionBtn.model)) {
          return;
        }
        var btnDom = _this.createElement("button");
        btnDom.setAttribute("type", "button");
        if (isNullOrUndefined(actionBtn.model.cssClass) || actionBtn.model.cssClass.length === 0) {
          actionBtn.model.cssClass = "e-primary " + _this.cssClass;
        }
        btnDom.classList.add("e-small");
        new Button(actionBtn.model, btnDom);
        if (!isNullOrUndefined(actionBtn.click) && typeof actionBtn.click === "function") {
          EventHandler.add(btnDom, "click", actionBtn.click);
        }
        actionBtnContainer.appendChild(btnDom);
      });
      if (actionBtnContainer.childElementCount > 0) {
        this.appendMessageContainer(actionBtnContainer);
      }
    };
    Toast2.prototype.appendToTarget = function(toastObj) {
      var _this = this;
      var toastBeforeOpen = this.isBlazorServer() ? {
        options: toastObj,
        element: this.toastEle,
        cancel: false
      } : {
        options: toastObj,
        toastObj: this,
        element: this.toastEle,
        cancel: false
      };
      this.trigger("beforeOpen", toastBeforeOpen, function(toastBeforeOpenArgs) {
        if (!toastBeforeOpenArgs.cancel) {
          if (!_this.isBlazorServer()) {
            _this.toastEle.style.display = "none";
          }
          if (_this.newestOnTop && _this.toastContainer.childElementCount !== 0) {
            _this.toastContainer.insertBefore(_this.toastEle, _this.toastContainer.children[0]);
          } else if (!_this.isBlazorServer()) {
            _this.toastContainer.appendChild(_this.toastEle);
          }
          removeClass([_this.toastEle], TOAST_BLAZOR_HIDDEN);
          EventHandler.add(_this.toastEle, "click", _this.clickHandler, _this);
          EventHandler.add(_this.toastEle, "keydown", _this.keyDownHandler, _this);
          _this.toastContainer.style.zIndex = getZindexPartial(_this.toastContainer) + "";
          _this.displayToast(_this.toastEle, toastObj);
        } else if (_this.isBlazorServer()) {
          var intervalId = parseInt(_this.toastEle.id.split("toast_")[1], 10);
          _this.clearProgress(intervalId);
          detach(_this.toastEle);
          if (_this.toastContainer.childElementCount === 0) {
            _this.clearContainerPos();
          }
        }
      });
    };
    Toast2.prototype.clickHandler = function(e) {
      var _this = this;
      if (!this.isBlazorServer()) {
        e.stopPropagation();
      }
      var target = e.target;
      var toastEle = closest(target, "." + ROOT);
      var clickArgs = this.isBlazorServer() ? {
        element: toastEle,
        cancel: false,
        clickToClose: false,
        originalEvent: e
      } : {
        element: toastEle,
        cancel: false,
        clickToClose: false,
        originalEvent: e,
        toastObj: this
      };
      var isCloseIcon = target.classList.contains(CLOSEBTN);
      this.trigger("click", clickArgs, function(toastClickArgs) {
        if (isCloseIcon && !toastClickArgs.cancel || toastClickArgs.clickToClose) {
          _this.destroyToast(toastEle, "click");
        }
      });
    };
    Toast2.prototype.keyDownHandler = function(e) {
      if (e.target.classList.contains(CLOSEBTN) && (e.keyCode === 13 || e.keyCode === 32)) {
        var target = e.target;
        var toastEle = closest(target, "." + ROOT);
        this.destroyToast(toastEle, "key");
      }
    };
    Toast2.prototype.displayToast = function(toastEle, toastObj) {
      var _this = this;
      var showAnimate = this.animation.show;
      var animate = {
        duration: showAnimate.duration,
        name: showAnimate.effect === "None" && animationMode === "Enable" ? "FadeIn" : showAnimate.effect,
        timingFunction: showAnimate.easing
      };
      var toastOpen = this.isBlazorServer() ? {
        options: toastObj,
        element: this.toastEle
      } : {
        options: toastObj,
        toastObj: this,
        element: this.toastEle
      };
      animate.begin = function() {
        toastEle.style.display = "";
      };
      animate.end = function() {
        _this.trigger("open", toastOpen);
      };
      new Animation(animate).animate(toastEle);
    };
    Toast2.prototype.getContainer = function() {
      this.element.classList.add(CONTAINER);
      return this.element;
    };
    Toast2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var container = this.element;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "enableRtl":
            if (newProp.enableRtl) {
              container.classList.add(RTL);
            } else {
              container.classList.remove(RTL);
            }
            break;
        }
      }
    };
    __decorate6([Property("300px")], Toast2.prototype, "width", void 0);
    __decorate6([Property("auto")], Toast2.prototype, "height", void 0);
    __decorate6([Property(null)], Toast2.prototype, "title", void 0);
    __decorate6([Property(null)], Toast2.prototype, "content", void 0);
    __decorate6([Property(true)], Toast2.prototype, "enableHtmlSanitizer", void 0);
    __decorate6([Property(null)], Toast2.prototype, "icon", void 0);
    __decorate6([Property(null)], Toast2.prototype, "cssClass", void 0);
    __decorate6([Property(null)], Toast2.prototype, "template", void 0);
    __decorate6([Property(true)], Toast2.prototype, "newestOnTop", void 0);
    __decorate6([Property(false)], Toast2.prototype, "showCloseButton", void 0);
    __decorate6([Property(false)], Toast2.prototype, "showProgressBar", void 0);
    __decorate6([Property(5e3)], Toast2.prototype, "timeOut", void 0);
    __decorate6([Property("Rtl")], Toast2.prototype, "progressDirection", void 0);
    __decorate6([Property(1e3)], Toast2.prototype, "extendedTimeout", void 0);
    __decorate6([Complex({}, ToastAnimationSettings)], Toast2.prototype, "animation", void 0);
    __decorate6([Complex({}, ToastPosition)], Toast2.prototype, "position", void 0);
    __decorate6([Collection([{}], ButtonModelProps)], Toast2.prototype, "buttons", void 0);
    __decorate6([Property(null)], Toast2.prototype, "target", void 0);
    __decorate6([Event2()], Toast2.prototype, "created", void 0);
    __decorate6([Event2()], Toast2.prototype, "beforeSanitizeHtml", void 0);
    __decorate6([Event2()], Toast2.prototype, "destroyed", void 0);
    __decorate6([Event2()], Toast2.prototype, "open", void 0);
    __decorate6([Event2()], Toast2.prototype, "beforeOpen", void 0);
    __decorate6([Event2()], Toast2.prototype, "beforeClose", void 0);
    __decorate6([Event2()], Toast2.prototype, "close", void 0);
    __decorate6([Event2()], Toast2.prototype, "click", void 0);
    Toast2 = __decorate6([NotifyPropertyChanges], Toast2);
    return Toast2;
  }(Component)
);
var ToastUtility;
(function(ToastUtility2) {
  function show(content2, type, timeOut) {
    var toastContainerElement;
    if (document.querySelector("." + CONTAINER)) {
      toastContainerElement = document.querySelector("." + CONTAINER);
    } else {
      toastContainerElement = createElement("div", {
        "className": ROOT + " " + CONTAINER + " e-toast-util"
      });
      document.body.appendChild(toastContainerElement);
    }
    var untilToastsModel;
    if (typeof content2 === "string") {
      var cssClass2 = void 0;
      var icon = void 0;
      if (!isNullOrUndefined(type)) {
        switch (type) {
          case "Warning":
            cssClass2 = "e-toast-warning";
            icon = "e-toast-warning-icon";
            break;
          case "Success":
            cssClass2 = "e-toast-success";
            icon = "e-toast-success-icon";
            break;
          case "Error":
            cssClass2 = "e-toast-danger";
            icon = "e-toast-error-icon";
            break;
          case "Information":
            cssClass2 = "e-toast-info";
            icon = "e-toast-info-icon";
            break;
        }
      } else {
        cssClass2 = "";
        icon = "";
      }
      untilToastsModel = {
        content: content2,
        cssClass: cssClass2,
        icon,
        timeOut: !isNullOrUndefined(timeOut) ? timeOut : 5e3
      };
    } else {
      untilToastsModel = content2;
    }
    var toastObj = new Toast(untilToastsModel);
    toastObj.appendTo(toastContainerElement);
    toastObj.show();
    return toastObj;
  }
  ToastUtility2.show = show;
})(ToastUtility || (ToastUtility = {}));

// node_modules/@syncfusion/ej2-notifications/src/message/message.js
var __extends20 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate7 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Severity;
(function(Severity2) {
  Severity2["Normal"] = "Normal";
  Severity2["Success"] = "Success";
  Severity2["Info"] = "Info";
  Severity2["Warning"] = "Warning";
  Severity2["Error"] = "Error";
})(Severity || (Severity = {}));
var Variant;
(function(Variant2) {
  Variant2["Text"] = "Text";
  Variant2["Outlined"] = "Outlined";
  Variant2["Filled"] = "Filled";
})(Variant || (Variant = {}));
var MSG_ICON = "e-msg-icon";
var MSG_CLOSE_ICON = "e-msg-close-icon";
var MSG_CONTENT = "e-msg-content";
var MSG_CONTENT_CENTER = "e-content-center";
var RTL2 = "e-rtl";
var SUCCESS = "e-success";
var WARNING2 = "e-warning";
var INFO2 = "e-info";
var ERROR2 = "e-error";
var OUTLINED = "e-outlined";
var FILLED = "e-filled";
var HIDE = "e-hidden";
var Message = (
  /** @class */
  function(_super) {
    __extends20(Message2, _super);
    function Message2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.initialRender = true;
      return _this;
    }
    Message2.prototype.getModuleName = function() {
      return "message";
    };
    Message2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    Message2.prototype.preRender = function() {
      var localeText = {
        close: "Close"
      };
      this.l10n = new L10n("message", localeText, this.locale);
    };
    Message2.prototype.render = function() {
      this.innerContent = this.element.innerHTML;
      this.element.innerHTML = "";
      this.msgElement = this.createElement("div", {
        className: "e-msg-content-wrap"
      });
      this.initialize();
      this.wireEvents();
      this.renderComplete();
      this.renderReactTemplates();
      this.initialRender = false;
    };
    Message2.prototype.initialize = function() {
      this.element.setAttribute("role", "alert");
      this.setCssClass();
      this.setIcon();
      this.setContent();
      this.setCloseIcon();
      this.setSeverity();
      this.setVariant();
      this.setVisible();
      if (this.enableRtl) {
        this.element.classList.add(RTL2);
      }
    };
    Message2.prototype.setIcon = function() {
      if (this.showIcon) {
        this.iconElement = this.createElement("span", {
          className: MSG_ICON
        });
        if (this.element.classList.contains(MSG_CONTENT_CENTER)) {
          this.msgElement.appendChild(this.iconElement);
        } else {
          this.element.appendChild(this.iconElement);
        }
      }
    };
    Message2.prototype.setCloseIcon = function() {
      if (this.showCloseIcon) {
        this.closeIcon = this.createElement("button", {
          attrs: {
            type: "button",
            class: MSG_CLOSE_ICON
          }
        });
        this.element.appendChild(this.closeIcon);
        this.setTitle();
      }
    };
    Message2.prototype.setTitle = function() {
      this.l10n.setLocale(this.locale);
      var closeIconTitle = this.l10n.getConstant("close");
      this.closeIcon.setAttribute("title", closeIconTitle);
      this.closeIcon.setAttribute("aria-label", closeIconTitle);
    };
    Message2.prototype.setContent = function() {
      this.txtElement = this.createElement("div", {
        className: MSG_CONTENT
      });
      if (this.element.classList.contains(MSG_CONTENT_CENTER)) {
        this.msgElement.appendChild(this.txtElement);
        this.element.appendChild(this.msgElement);
      } else {
        this.element.appendChild(this.txtElement);
      }
      this.setTemplate();
    };
    Message2.prototype.setTemplate = function() {
      var templateFn;
      if (isNullOrUndefined(this.content) || this.content === "") {
        this.txtElement.innerHTML = this.innerContent;
      } else if (!isNullOrUndefined(this.content) && this.content !== "") {
        if (typeof this.content === "string" || typeof this.content !== "string") {
          if (this.isVue || typeof this.content !== "string") {
            templateFn = compile(this.content);
            if (!isNullOrUndefined(templateFn)) {
              var tempArr = templateFn({}, this, "content", this.element.id + "content", true);
              if (tempArr) {
                tempArr = Array.prototype.slice.call(tempArr);
                append(tempArr, this.txtElement);
                this.renderReactTemplates();
              }
            }
          } else {
            this.txtElement.innerHTML = this.content;
          }
        }
      }
    };
    Message2.prototype.setSeverity = function() {
      var classList2 = [SUCCESS, WARNING2, INFO2, ERROR2];
      removeClass([this.element], classList2);
      if (this.severity === "Success") {
        addClass([this.element], SUCCESS);
      } else if (this.severity === "Warning") {
        addClass([this.element], WARNING2);
      } else if (this.severity === "Error") {
        addClass([this.element], ERROR2);
      } else if (this.severity === "Info") {
        addClass([this.element], INFO2);
      }
    };
    Message2.prototype.setVariant = function() {
      var classList2 = [FILLED, OUTLINED];
      removeClass([this.element], classList2);
      if (this.variant === "Outlined") {
        addClass([this.element], OUTLINED);
      } else if (this.variant === "Filled") {
        addClass([this.element], FILLED);
      }
    };
    Message2.prototype.setCssClass = function(oldCssClass) {
      if (oldCssClass) {
        removeClass([this.element], oldCssClass.split(" "));
      }
      if (this.cssClass) {
        addClass([this.element], this.cssClass.split(" "));
      }
    };
    Message2.prototype.setVisible = function() {
      if (!this.visible) {
        addClass([this.element], HIDE);
        if (!this.initialRender) {
          this.trigger("closed", {
            event,
            isInteracted: false,
            element: this.element
          });
        }
      } else {
        removeClass([this.element], HIDE);
      }
    };
    Message2.prototype.clickHandler = function(event2) {
      this.closeMessage(event2);
    };
    Message2.prototype.keyboardHandler = function(event2) {
      if (event2.keyCode === 32 || event2.keyCode === 13) {
        this.closeMessage(event2);
      }
    };
    Message2.prototype.closeMessage = function(event2) {
      addClass([this.element], HIDE);
      this.setProperties({
        visible: false
      }, true);
      var eventArgs = {
        event: event2,
        isInteracted: true,
        element: this.element
      };
      this.trigger("closed", eventArgs);
    };
    Message2.prototype.wireEvents = function() {
      if (this.showCloseIcon) {
        EventHandler.add(this.closeIcon, "click", this.clickHandler, this);
        EventHandler.add(this.closeIcon, "keydown", this.keyboardHandler, this);
      }
    };
    Message2.prototype.unWireEvents = function() {
      if (this.showCloseIcon) {
        EventHandler.remove(this.closeIcon, "click", this.clickHandler);
        EventHandler.remove(this.closeIcon, "keydown", this.keyboardHandler);
      }
    };
    Message2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "cssClass":
            this.setCssClass(oldProp.cssClass);
            break;
          case "content":
            this.txtElement.innerHTML = "";
            this.setTemplate();
            break;
          case "enableRtl":
            if (!this.enableRtl) {
              this.element.classList.remove(RTL2);
            } else {
              this.element.classList.add(RTL2);
            }
            break;
          case "locale":
            if (this.showCloseIcon) {
              this.setTitle();
            }
            break;
          case "showIcon":
            if (!this.showIcon && this.element.getElementsByClassName(MSG_ICON).length > 0) {
              detach(this.iconElement);
            }
            if (this.showIcon) {
              this.iconElement = this.createElement("span", {
                className: MSG_ICON
              });
              this.element.insertBefore(this.iconElement, this.txtElement);
            }
            break;
          case "showCloseIcon":
            if (!this.showCloseIcon && !isNullOrUndefined(this.closeIcon)) {
              this.unWireEvents();
              detach(this.closeIcon);
            } else {
              this.setCloseIcon();
              this.wireEvents();
            }
            break;
          case "severity":
            this.setSeverity();
            break;
          case "variant":
            this.setVariant();
            break;
          case "visible":
            this.setVisible();
            break;
        }
      }
    };
    Message2.prototype.destroy = function() {
      var cssClass2 = isNullOrUndefined(this.cssClass) ? [""] : this.cssClass.split(" ");
      var className = [SUCCESS, WARNING2, INFO2, ERROR2, RTL2, HIDE, OUTLINED, FILLED];
      var classList2 = cssClass2.length === 1 && cssClass2[0] === "" ? className : className.concat(cssClass2);
      removeClass([this.element], classList2);
      this.element.removeAttribute("role");
      this.unWireEvents();
      if (!isNullOrUndefined(this.iconElement)) {
        detach(this.iconElement);
      }
      detach(this.txtElement);
      if (!isNullOrUndefined(this.closeIcon)) {
        detach(this.closeIcon);
      }
      _super.prototype.destroy.call(this);
    };
    __decorate7([Property(null)], Message2.prototype, "content", void 0);
    __decorate7([Property("")], Message2.prototype, "cssClass", void 0);
    __decorate7([Property(true)], Message2.prototype, "showIcon", void 0);
    __decorate7([Property(false)], Message2.prototype, "showCloseIcon", void 0);
    __decorate7([Property("Normal")], Message2.prototype, "severity", void 0);
    __decorate7([Property("Text")], Message2.prototype, "variant", void 0);
    __decorate7([Property(true)], Message2.prototype, "visible", void 0);
    __decorate7([Event2()], Message2.prototype, "created", void 0);
    __decorate7([Event2()], Message2.prototype, "destroyed", void 0);
    __decorate7([Event2()], Message2.prototype, "closed", void 0);
    Message2 = __decorate7([NotifyPropertyChanges], Message2);
    return Message2;
  }(Component)
);

// node_modules/@syncfusion/ej2-notifications/src/skeleton/skeleton.js
var __extends21 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate8 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var cssClassName = {
  TEXTSHAPE: "e-skeleton-text",
  CIRCLESHAPE: "e-skeleton-circle",
  SQUARESHAPE: "e-skeleton-square",
  RECTANGLESHAPE: "e-skeleton-rectangle",
  WAVEEFFECT: "e-shimmer-wave",
  PULSEEFFECT: "e-shimmer-pulse",
  FADEEFFECT: "e-shimmer-fade",
  VISIBLENONE: "e-visible-none"
};
var SkeletonType;
(function(SkeletonType2) {
  SkeletonType2["Text"] = "Text";
  SkeletonType2["Circle"] = "Circle";
  SkeletonType2["Square"] = "Square";
  SkeletonType2["Rectangle"] = "Rectangle";
})(SkeletonType || (SkeletonType = {}));
var ShimmerEffect;
(function(ShimmerEffect2) {
  ShimmerEffect2["Wave"] = "Wave";
  ShimmerEffect2["Fade"] = "Fade";
  ShimmerEffect2["Pulse"] = "Pulse";
  ShimmerEffect2["None"] = "None";
})(ShimmerEffect || (ShimmerEffect = {}));
var Skeleton = (
  /** @class */
  function(_super) {
    __extends21(Skeleton2, _super);
    function Skeleton2(options, element) {
      return _super.call(this, options, element) || this;
    }
    Skeleton2.prototype.getModuleName = function() {
      return "skeleton";
    };
    Skeleton2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    Skeleton2.prototype.preRender = function() {
      if (!this.element.id) {
        this.element.id = getUniqueID("e-" + this.getModuleName());
      }
      this.updateCssClass();
      attributes(this.element, {
        role: "alert",
        "aria-busy": "true",
        "aria-live": "polite",
        "aria-label": this.label
      });
    };
    Skeleton2.prototype.render = function() {
      this.initialize();
    };
    Skeleton2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "width":
          case "height":
            this.updateDimension();
            break;
          case "shape":
            this.updateShape();
            break;
          case "shimmerEffect":
            this.updateEffect();
            break;
          case "visible":
            this.updateVisibility();
            break;
          case "label":
            this.element.setAttribute("aria-label", this.label);
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([this.element], oldProp.cssClass.split(" "));
            }
            this.updateCssClass();
            break;
        }
      }
    };
    Skeleton2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      var attrs = ["role", "aria-live", "aria-busy", "aria-label"];
      var cssClass2 = [];
      if (this.cssClass) {
        cssClass2 = cssClass2.concat(this.cssClass.split(" "));
      }
      for (var i = 0; i < attrs.length; i++) {
        this.element.removeAttribute(attrs[parseInt(i.toString(), 10)]);
      }
      cssClass2 = cssClass2.concat(this.element.classList.value.match(/(e-skeleton-[^\s]+)/g) || []);
      cssClass2 = cssClass2.concat(this.element.classList.value.match(/(e-shimmer-[^\s]+)/g) || []);
      removeClass([this.element], cssClass2);
    };
    Skeleton2.prototype.initialize = function() {
      this.updateShape();
      this.updateEffect();
      this.updateVisibility();
    };
    Skeleton2.prototype.updateShape = function() {
      if (!isNullOrUndefined(this.shape)) {
        var shapeCss = cssClassName[this.shape.toUpperCase() + "SHAPE"];
        var removeCss = this.element.classList.value.match(/(e-skeleton-[^\s]+)/g) || [];
        this.updateDimension();
        if (removeCss) {
          removeClass([this.element], removeCss);
        }
        addClass([this.element], [shapeCss]);
      }
    };
    Skeleton2.prototype.updateDimension = function() {
      var width = !this.width && ["Text", "Rectangle"].indexOf(this.shape) > -1 ? "100%" : formatUnit(this.width);
      var height = ["Circle", "Square"].indexOf(this.shape) > -1 ? width : formatUnit(this.height);
      this.element.style.width = width;
      this.element.style.height = height;
    };
    Skeleton2.prototype.updateEffect = function() {
      var removeCss = this.element.classList.value.match(/(e-shimmer-[^\s]+)/g) || [];
      if (removeCss) {
        removeClass([this.element], removeCss);
      }
      if (!isNullOrUndefined(this.shimmerEffect)) {
        addClass([this.element], [cssClassName[this.shimmerEffect.toUpperCase() + "EFFECT"]]);
      }
    };
    Skeleton2.prototype.updateVisibility = function() {
      this.element.classList[this.visible ? "remove" : "add"](cssClassName.VISIBLENONE);
    };
    Skeleton2.prototype.updateCssClass = function() {
      if (this.cssClass) {
        addClass([this.element], this.cssClass.split(" "));
      }
    };
    __decorate8([Property("")], Skeleton2.prototype, "width", void 0);
    __decorate8([Property("")], Skeleton2.prototype, "height", void 0);
    __decorate8([Property(true)], Skeleton2.prototype, "visible", void 0);
    __decorate8([Property("Text")], Skeleton2.prototype, "shape", void 0);
    __decorate8([Property("Wave")], Skeleton2.prototype, "shimmerEffect", void 0);
    __decorate8([Property("Loading...")], Skeleton2.prototype, "label", void 0);
    __decorate8([Property("")], Skeleton2.prototype, "cssClass", void 0);
    Skeleton2 = __decorate8([NotifyPropertyChanges], Skeleton2);
    return Skeleton2;
  }(Component)
);

// node_modules/@syncfusion/ej2-dropdowns/src/drop-down-base/drop-down-base.js
var __extends22 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate9 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FieldSettings = (
  /** @class */
  function(_super) {
    __extends22(FieldSettings2, _super);
    function FieldSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate9([Property()], FieldSettings2.prototype, "text", void 0);
    __decorate9([Property()], FieldSettings2.prototype, "value", void 0);
    __decorate9([Property()], FieldSettings2.prototype, "iconCss", void 0);
    __decorate9([Property()], FieldSettings2.prototype, "groupBy", void 0);
    __decorate9([Property()], FieldSettings2.prototype, "htmlAttributes", void 0);
    __decorate9([Property()], FieldSettings2.prototype, "disabled", void 0);
    return FieldSettings2;
  }(ChildProperty)
);
var dropDownBaseClasses = {
  root: "e-dropdownbase",
  rtl: "e-rtl",
  content: "e-content",
  selected: "e-active",
  hover: "e-hover",
  noData: "e-nodata",
  fixedHead: "e-fixed-head",
  focus: "e-item-focus",
  li: "e-list-item",
  group: "e-list-group-item",
  disabled: "e-disabled",
  grouping: "e-dd-group",
  virtualList: "e-list-item e-virtual-list"
};
var ITEMTEMPLATE_PROPERTY = "ItemTemplate";
var DISPLAYTEMPLATE_PROPERTY = "DisplayTemplate";
var SPINNERTEMPLATE_PROPERTY = "SpinnerTemplate";
var VALUETEMPLATE_PROPERTY = "ValueTemplate";
var GROUPTEMPLATE_PROPERTY = "GroupTemplate";
var HEADERTEMPLATE_PROPERTY = "HeaderTemplate";
var FOOTERTEMPLATE_PROPERTY = "FooterTemplate";
var NORECORDSTEMPLATE_PROPERTY = "NoRecordsTemplate";
var ACTIONFAILURETEMPLATE_PROPERTY = "ActionFailureTemplate";
var HIDE_GROUPLIST = "e-hide-group-header";
var DropDownBase = (
  /** @class */
  function(_super) {
    __extends22(DropDownBase2, _super);
    function DropDownBase2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.preventChange = false;
      _this.isPreventChange = false;
      _this.isDynamicDataChange = false;
      _this.addedNewItem = false;
      _this.isAddNewItemTemplate = false;
      _this.isRequesting = false;
      _this.isVirtualizationEnabled = false;
      _this.isCustomDataUpdated = false;
      _this.isAllowFiltering = false;
      _this.virtualizedItemsCount = 0;
      _this.isCheckBoxSelection = false;
      _this.totalItemCount = 0;
      _this.dataCount = 0;
      _this.remoteDataCount = -1;
      _this.isRemoteDataUpdated = false;
      _this.isIncrementalRequest = false;
      _this.itemCount = 30;
      _this.virtualListHeight = 0;
      _this.isVirtualScrolling = false;
      _this.isPreventScrollAction = false;
      _this.scrollPreStartIndex = 0;
      _this.isScrollActionTriggered = false;
      _this.previousStartIndex = 0;
      _this.isMouseScrollAction = false;
      _this.isKeyBoardAction = false;
      _this.isScrollChanged = false;
      _this.isUpwardScrolling = false;
      _this.startIndex = 0;
      _this.currentPageNumber = 0;
      _this.pageCount = 0;
      _this.isPreventKeyAction = false;
      _this.generatedDataObject = {};
      _this.skeletonCount = 32;
      _this.isVirtualTrackHeight = false;
      _this.virtualSelectAll = false;
      _this.isVirtualReorder = false;
      _this.incrementalQueryString = "";
      _this.incrementalEndIndex = 0;
      _this.incrementalStartIndex = 0;
      _this.incrementalPreQueryString = "";
      _this.isObjectCustomValue = false;
      _this.appendUncheckList = false;
      _this.getInitialData = false;
      _this.preventPopupOpen = true;
      _this.virtualSelectAllState = false;
      _this.CurrentEvent = null;
      _this.isDynamicData = false;
      _this.isPrimitiveData = false;
      _this.isCustomFiltering = false;
      _this.debounceTimer = null;
      _this.virtualListInfo = {
        currentPageNumber: null,
        direction: null,
        sentinelInfo: {},
        offsets: {},
        startIndex: 0,
        endIndex: 0
      };
      _this.viewPortInfo = {
        currentPageNumber: null,
        direction: null,
        sentinelInfo: {},
        offsets: {},
        startIndex: 0,
        endIndex: 0
      };
      _this.selectedValueInfo = {
        currentPageNumber: null,
        direction: null,
        sentinelInfo: {},
        offsets: {},
        startIndex: 0,
        endIndex: 0
      };
      return _this;
    }
    DropDownBase2.prototype.getPropObject = function(prop, newProp, oldProp) {
      var newProperty = new Object();
      var oldProperty = new Object();
      var propName = function(prop2) {
        return prop2;
      };
      newProperty[propName(prop)] = newProp[propName(prop)];
      oldProperty[propName(prop)] = oldProp[propName(prop)];
      var data = new Object();
      data.newProperty = newProperty;
      data.oldProperty = oldProperty;
      return data;
    };
    DropDownBase2.prototype.getValueByText = function(text, ignoreCase, ignoreAccent) {
      var value = null;
      if (!isNullOrUndefined(this.listData)) {
        if (ignoreCase) {
          value = this.checkValueCase(text, true, ignoreAccent);
        } else {
          value = this.checkValueCase(text, false, ignoreAccent);
        }
      }
      return value;
    };
    DropDownBase2.prototype.checkValueCase = function(text, ignoreCase, ignoreAccent, isTextByValue) {
      var _this = this;
      var value = null;
      if (isTextByValue) {
        value = text;
      }
      if (!isNullOrUndefined(this.listData)) {
        var dataSource = this.listData;
        var fields_1 = this.fields;
        var type = this.typeOfData(dataSource).typeof;
        if (type === "string" || type === "number" || type === "boolean") {
          for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {
            var item = dataSource_1[_i];
            if (!isNullOrUndefined(item)) {
              if (ignoreAccent) {
                value = this.checkingAccent(String(item), text, ignoreCase);
              } else {
                if (ignoreCase) {
                  if (this.checkIgnoreCase(String(item), text)) {
                    value = this.getItemValue(String(item), text, ignoreCase);
                  }
                } else {
                  if (this.checkNonIgnoreCase(String(item), text)) {
                    value = this.getItemValue(String(item), text, ignoreCase, isTextByValue);
                  }
                }
              }
            }
          }
        } else {
          if (ignoreCase) {
            dataSource.filter(function(item2) {
              var itemValue = getValue(fields_1.value, item2);
              if (!isNullOrUndefined(itemValue) && _this.checkIgnoreCase(getValue(fields_1.text, item2).toString(), text)) {
                value = getValue(fields_1.value, item2);
              }
            });
          } else {
            if (isTextByValue) {
              var compareValue_1 = null;
              compareValue_1 = value;
              dataSource.filter(function(item2) {
                var itemValue = getValue(fields_1.value, item2);
                if (!isNullOrUndefined(itemValue) && !isNullOrUndefined(value) && itemValue.toString() === compareValue_1.toString()) {
                  value = getValue(fields_1.text, item2);
                }
              });
            } else {
              dataSource.filter(function(item2) {
                if (_this.checkNonIgnoreCase(getValue(fields_1.text, item2), text)) {
                  value = getValue(fields_1.value, item2);
                }
              });
            }
          }
        }
      }
      return value;
    };
    DropDownBase2.prototype.checkingAccent = function(item, text, ignoreCase) {
      var dataItem = DataUtil.ignoreDiacritics(String(item));
      var textItem = DataUtil.ignoreDiacritics(text.toString());
      var value = null;
      if (ignoreCase) {
        if (this.checkIgnoreCase(dataItem, textItem)) {
          value = this.getItemValue(String(item), text, ignoreCase);
        }
      } else {
        if (this.checkNonIgnoreCase(String(item), text)) {
          value = this.getItemValue(String(item), text, ignoreCase);
        }
      }
      return value;
    };
    DropDownBase2.prototype.checkIgnoreCase = function(item, text) {
      return String(item).toLowerCase() === text.toString().toLowerCase() ? true : false;
    };
    DropDownBase2.prototype.checkNonIgnoreCase = function(item, text) {
      return String(item) === text.toString() ? true : false;
    };
    DropDownBase2.prototype.getItemValue = function(dataItem, typedText, ignoreCase, isTextByValue) {
      var value = null;
      var dataSource = this.listData;
      var type = this.typeOfData(dataSource).typeof;
      if (isTextByValue) {
        value = dataItem.toString();
      } else {
        if (ignoreCase) {
          value = type === "string" ? String(dataItem) : this.getFormattedValue(String(dataItem));
        } else {
          value = type === "string" ? typedText : this.getFormattedValue(typedText);
        }
      }
      return value;
    };
    DropDownBase2.prototype.templateCompiler = function(baseTemplate) {
      var checkTemplate = false;
      if (typeof baseTemplate !== "function" && baseTemplate) {
        try {
          checkTemplate = selectAll(baseTemplate, document).length ? true : false;
        } catch (exception) {
          checkTemplate = false;
        }
      }
      return checkTemplate;
    };
    DropDownBase2.prototype.l10nUpdate = function(actionFailure2) {
      var ele = this.getModuleName() === "listbox" ? this.ulElement : this.list;
      if (!isNullOrUndefined(this.noRecordsTemplate) && this.noRecordsTemplate !== "No records found" || this.actionFailureTemplate !== "Request failed") {
        var template = actionFailure2 ? this.actionFailureTemplate : this.noRecordsTemplate;
        var compiledString = void 0;
        var templateId = actionFailure2 ? this.actionFailureTemplateId : this.noRecordsTemplateId;
        ele.innerHTML = "";
        var tempaltecheck = this.templateCompiler(template);
        if (typeof template !== "function" && tempaltecheck) {
          compiledString = compile(select(template, document).innerHTML.trim());
        } else {
          compiledString = compile(template);
        }
        var templateName = actionFailure2 ? "actionFailureTemplate" : "noRecordsTemplate";
        var noDataElement = void 0;
        if (this.isReact && typeof template === "function") {
          noDataElement = compiledString({}, this, templateName, templateId, this.isStringTemplate, null);
        } else {
          noDataElement = compiledString({}, this, templateName, templateId, this.isStringTemplate, null, ele);
        }
        if (noDataElement && noDataElement.length > 0) {
          for (var i = 0; i < noDataElement.length; i++) {
            if (this.getModuleName() === "listbox" && templateName === "noRecordsTemplate") {
              if (noDataElement[i].nodeName === "#text") {
                var liElem = this.createElement("li");
                liElem.textContent = noDataElement[i].textContent;
                liElem.classList.add("e-list-nrt");
                liElem.setAttribute("role", "option");
                ele.appendChild(liElem);
              } else {
                noDataElement[i].classList.add("e-list-nr-template");
                ele.appendChild(noDataElement[i]);
              }
            } else {
              if (noDataElement[i] instanceof HTMLElement || noDataElement[i] instanceof Text && noDataElement[i].textContent !== "") {
                ele.appendChild(noDataElement[i]);
              }
            }
          }
        }
        this.renderReactTemplates();
      } else {
        var l10nLocale = {
          noRecordsTemplate: "No records found",
          actionFailureTemplate: "Request failed"
        };
        var componentLocale = new L10n(this.getLocaleName(), {}, this.locale);
        if (componentLocale.getConstant("actionFailureTemplate") !== "" || componentLocale.getConstant("noRecordsTemplate") !== "") {
          this.l10n = componentLocale;
        } else {
          this.l10n = new L10n(this.getModuleName() === "listbox" ? "listbox" : this.getModuleName() === "mention" ? "mention" : "dropdowns", l10nLocale, this.locale);
        }
        var content2 = actionFailure2 ? this.l10n.getConstant("actionFailureTemplate") : this.l10n.getConstant("noRecordsTemplate");
        if (this.getModuleName() === "listbox") {
          var liElem = this.createElement("li");
          liElem.textContent = content2;
          ele.appendChild(liElem);
          liElem.classList.add("e-list-nrt");
          liElem.setAttribute("role", "option");
        } else {
          if (!isNullOrUndefined(ele)) {
            ele.innerHTML = content2;
          }
        }
      }
    };
    DropDownBase2.prototype.checkAndResetCache = function() {
      if (this.isVirtualizationEnabled) {
        this.generatedDataObject = {};
        this.virtualItemStartIndex = this.virtualItemEndIndex = 0;
        this.viewPortInfo = {
          currentPageNumber: null,
          direction: null,
          sentinelInfo: {},
          offsets: {},
          startIndex: 0,
          endIndex: this.itemCount
        };
        this.selectedValueInfo = null;
      }
    };
    DropDownBase2.prototype.updateIncrementalInfo = function(startIndex, endIndex) {
      this.viewPortInfo.startIndex = startIndex;
      this.viewPortInfo.endIndex = endIndex;
      this.updateVirtualItemIndex();
      this.isIncrementalRequest = true;
      this.resetList(this.dataSource, this.fields, this.query);
      this.isIncrementalRequest = false;
    };
    DropDownBase2.prototype.updateIncrementalView = function(startIndex, endIndex) {
      this.viewPortInfo.startIndex = startIndex;
      this.viewPortInfo.endIndex = endIndex;
      this.updateVirtualItemIndex();
      this.resetList(this.dataSource, this.fields, this.query);
      this.UpdateSkeleton();
      this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li);
      this.ulElement = this.list.querySelector("ul");
    };
    DropDownBase2.prototype.updateVirtualItemIndex = function() {
      this.virtualItemStartIndex = this.viewPortInfo.startIndex;
      this.virtualItemEndIndex = this.viewPortInfo.endIndex;
      this.virtualListInfo = this.viewPortInfo;
    };
    DropDownBase2.prototype.getFilteringSkeletonCount = function() {
      var currentSkeletonCount = this.skeletonCount;
      this.getSkeletonCount(true);
      this.skeletonCount = this.dataCount < this.itemCount * 2 && (!(this.dataSource instanceof DataManager) || this.dataSource instanceof DataManager && this.totalItemCount <= this.itemCount) ? 0 : this.skeletonCount;
      var skeletonUpdated = true;
      if ((this.getModuleName() === "autocomplete" || this.getModuleName() === "multiselect") && this.totalItemCount < this.itemCount * 2 && (!(this.dataSource instanceof DataManager) || this.dataSource instanceof DataManager && this.totalItemCount <= this.itemCount)) {
        this.skeletonCount = 0;
        skeletonUpdated = false;
      }
      if (!this.list.classList.contains(dropDownBaseClasses.noData)) {
        if (currentSkeletonCount !== this.skeletonCount && skeletonUpdated) {
          this.UpdateSkeleton(true, Math.abs(currentSkeletonCount - this.skeletonCount));
        } else {
          this.UpdateSkeleton();
        }
        this.liCollections = this.list.querySelectorAll(".e-list-item");
        if (this.list.getElementsByClassName("e-virtual-ddl").length > 0) {
          this.list.getElementsByClassName("e-virtual-ddl")[0].style = this.GetVirtualTrackHeight();
        } else if (!this.list.querySelector(".e-virtual-ddl") && this.skeletonCount > 0 && this.list.querySelector(".e-dropdownbase")) {
          var virualElement = this.createElement("div", {
            id: this.element.id + "_popup",
            className: "e-virtual-ddl",
            styles: this.GetVirtualTrackHeight()
          });
          this.list.querySelector(".e-dropdownbase").appendChild(virualElement);
        }
        if (this.list.getElementsByClassName("e-virtual-ddl-content").length > 0) {
          this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
        }
      }
    };
    DropDownBase2.prototype.getSkeletonCount = function(retainSkeleton) {
      this.virtualListHeight = this.listContainerHeight != null ? parseInt(this.listContainerHeight, 10) : this.virtualListHeight;
      var actualCount = this.virtualListHeight > 0 && this.listItemHeight > 0 ? Math.floor(this.virtualListHeight / this.listItemHeight) : 0;
      this.skeletonCount = actualCount * 4 < this.itemCount ? this.itemCount : actualCount * 4;
      this.itemCount = retainSkeleton ? this.itemCount : this.skeletonCount;
      this.virtualItemCount = this.itemCount;
      this.skeletonCount = Math.floor(this.skeletonCount / 2);
    };
    DropDownBase2.prototype.GetVirtualTrackHeight = function() {
      var height = this.totalItemCount === this.viewPortInfo.endIndex ? this.totalItemCount * this.listItemHeight - this.itemCount * this.listItemHeight : this.totalItemCount * this.listItemHeight;
      height = this.isVirtualTrackHeight ? 0 : height;
      var heightDimension = "height: " + (height - this.itemCount * this.listItemHeight) + "px;";
      if ((this.getModuleName() === "autocomplete" || this.getModuleName() === "multiselect") && this.skeletonCount === 0) {
        return "height: 0px;";
      }
      return heightDimension;
    };
    DropDownBase2.prototype.getTransformValues = function() {
      var translateY = this.viewPortInfo.startIndex * this.listItemHeight;
      translateY = translateY - this.skeletonCount * this.listItemHeight;
      translateY = this.viewPortInfo.startIndex === 0 && this.listData && this.listData.length === 0 || this.skeletonCount === 0 ? 0 : translateY;
      var styleText = "transform: translate(0px, " + translateY + "px);";
      return styleText;
    };
    DropDownBase2.prototype.UpdateSkeleton = function(isSkeletonCountChange, skeletonCount) {
      var isContainSkeleton = this.list.querySelector(".e-virtual-ddl-content");
      var isContainVirtualList = this.list.querySelector(".e-virtual-list");
      if (isContainSkeleton && (!isContainVirtualList || isSkeletonCountChange) && this.isVirtualizationEnabled) {
        var totalSkeletonCount = isSkeletonCountChange ? skeletonCount : this.skeletonCount;
        for (var i = 0; i < totalSkeletonCount; i++) {
          var liElement = this.createElement("li", {
            className: dropDownBaseClasses.virtualList,
            styles: "overflow: inherit"
          });
          if (this.isVirtualizationEnabled && this.itemTemplate) {
            liElement.style.height = this.listItemHeight - parseInt(window.getComputedStyle(this.getItems()[1]).marginBottom, 10) + "px";
          }
          var skeleton = new Skeleton({
            shape: "Text",
            height: "10px",
            width: "95%",
            cssClass: "e-skeleton-text"
          });
          skeleton.appendTo(this.createElement("div"));
          liElement.appendChild(skeleton.element);
          if (isContainSkeleton.firstChild) {
            isContainSkeleton.firstChild.insertBefore(liElement, isContainSkeleton.firstChild.children[0]);
          }
        }
        if (this.getModuleName() === "multiselect") {
          for (var i = 0; i < totalSkeletonCount && this.totalItemCount !== this.viewPortInfo.endIndex; i++) {
            var liElement = this.createElement("li", {
              className: dropDownBaseClasses.virtualList + " e-virtual-list-end",
              styles: "overflow: inherit"
            });
            if (this.isVirtualizationEnabled && this.itemTemplate) {
              liElement.style.height = this.listItemHeight - parseInt(window.getComputedStyle(this.getItems()[1]).marginBottom, 10) + "px";
            }
            var skeleton = new Skeleton({
              shape: "Text",
              height: "10px",
              width: "95%",
              cssClass: "e-skeleton-text-end"
            });
            skeleton.appendTo(this.createElement("div"));
            liElement.appendChild(skeleton.element);
            if (isContainSkeleton.firstChild) {
              isContainSkeleton.firstChild.appendChild(liElement);
            }
          }
          if (this.totalItemCount === this.viewPortInfo.endIndex) {
            isContainSkeleton.querySelectorAll(".e-virtual-list-end").forEach(function(el) {
              return el.remove();
            });
          }
        }
      }
    };
    DropDownBase2.prototype.getLocaleName = function() {
      return "drop-down-base";
    };
    DropDownBase2.prototype.getTextByValue = function(value) {
      var text = this.checkValueCase(value, false, false, true);
      return text;
    };
    DropDownBase2.prototype.getFormattedValue = function(value) {
      if (this.listData && this.listData.length) {
        var item = void 0;
        if (this.properties.allowCustomValue && this.properties.value && this.properties.value instanceof Array && this.properties.value.length > 0) {
          item = this.typeOfData(this.properties.value);
        } else {
          item = this.typeOfData(this.listData);
        }
        if (typeof getValue(this.fields.value ? this.fields.value : "value", item.item) === "number" || item.typeof === "number") {
          return parseFloat(value);
        }
        if (typeof getValue(this.fields.value ? this.fields.value : "value", item.item) === "boolean" || item.typeof === "boolean") {
          return value === "true" || "" + value === "true";
        }
      }
      return value;
    };
    DropDownBase2.prototype.setEnableRtl = function() {
      if (!isNullOrUndefined(this.enableRtlElements)) {
        if (this.list) {
          this.enableRtlElements.push(this.list);
        }
        if (this.enableRtl) {
          addClass(this.enableRtlElements, dropDownBaseClasses.rtl);
        } else {
          removeClass(this.enableRtlElements, dropDownBaseClasses.rtl);
        }
      }
    };
    DropDownBase2.prototype.initialize = function(e) {
      this.bindEvent = true;
      this.preventPopupOpen = true;
      this.actionFailureTemplateId = "" + this.element.id + ACTIONFAILURETEMPLATE_PROPERTY;
      if (this.element.tagName === "UL") {
        var jsonElement = ListBase.createJsonFromElement(this.element);
        this.setProperties({
          fields: {
            text: "text",
            value: "text"
          }
        }, true);
        this.resetList(jsonElement, this.fields);
      } else if (this.element.tagName === "SELECT") {
        var dataSource = this.dataSource instanceof Array ? this.dataSource.length > 0 ? true : false : !isNullOrUndefined(this.dataSource) ? true : false;
        if (!dataSource) {
          this.renderItemsBySelect();
        } else if (this.isDynamicDataChange) {
          this.setListData(this.dataSource, this.fields, this.query);
        }
      } else {
        this.setListData(this.dataSource, this.fields, this.query, e);
      }
    };
    DropDownBase2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    DropDownBase2.prototype.updateDataAttribute = function(value) {
      var invalidAttr = ["class", "style", "id", "type", "aria-expanded", "aria-autocomplete", "aria-readonly"];
      var attr = {};
      for (var a = 0; a < this.element.attributes.length; a++) {
        if (invalidAttr.indexOf(this.element.attributes[a].name) === -1 && !(this.getModuleName() === "dropdownlist" && this.element.attributes[a].name === "readonly")) {
          attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);
        }
      }
      extend(attr, value, attr);
      this.setProperties({
        htmlAttributes: attr
      }, true);
    };
    DropDownBase2.prototype.renderItemsBySelect = function() {
      var element = this.element;
      var group = element.querySelectorAll("select>optgroup");
      var fields;
      var isSelectGroupCheck = this.getModuleName() === "multiselect" && this.isGroupChecking && group.length > 0;
      fields = isSelectGroupCheck ? {
        value: "value",
        text: "text",
        groupBy: "categeory"
      } : fields = {
        value: "value",
        text: "text"
      };
      var jsonElement = [];
      var option = element.querySelectorAll("select>option");
      this.getJSONfromOption(jsonElement, option, fields);
      if (group.length) {
        for (var i = 0; i < group.length; i++) {
          var item = group[i];
          var optionGroup = {};
          optionGroup[fields.text] = item.label;
          optionGroup.isHeader = true;
          var child = item.querySelectorAll("option");
          if (isSelectGroupCheck) {
            this.getJSONfromOption(jsonElement, child, fields, item.label);
          } else {
            jsonElement.push(optionGroup);
            this.getJSONfromOption(jsonElement, child, fields);
          }
        }
        element.querySelectorAll("select>option");
      }
      this.updateFields(fields.text, fields.value, isSelectGroupCheck ? fields.groupBy : this.fields.groupBy, this.fields.htmlAttributes, this.fields.iconCss, this.fields.disabled);
      this.resetList(jsonElement, fields);
    };
    DropDownBase2.prototype.updateFields = function(text, value, groupBy, htmlAttributes, iconCss, disabled) {
      var field = {
        "fields": {
          text,
          value,
          groupBy: !isNullOrUndefined(groupBy) ? groupBy : this.fields && this.fields.groupBy,
          htmlAttributes: !isNullOrUndefined(htmlAttributes) ? htmlAttributes : this.fields && this.fields.htmlAttributes,
          iconCss: !isNullOrUndefined(iconCss) ? iconCss : this.fields && this.fields.iconCss,
          disabled: !isNullOrUndefined(disabled) ? disabled : this.fields && this.fields.disabled
        }
      };
      this.setProperties(field, true);
    };
    DropDownBase2.prototype.getJSONfromOption = function(items, options, fields, category) {
      if (category === void 0) {
        category = null;
      }
      for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {
        var option = options_1[_i];
        var json = {};
        json[fields.text] = option.innerText;
        json[fields.value] = !isNullOrUndefined(option.getAttribute(fields.value)) ? option.getAttribute(fields.value) : option.innerText;
        if (!isNullOrUndefined(category)) {
          json[fields.groupBy] = category;
        }
        items.push(json);
      }
    };
    DropDownBase2.prototype.preRender = function() {
      this.scrollTimer = -1;
      this.enableRtlElements = [];
      this.isRequested = false;
      this.isDataFetched = false;
      this.itemTemplateId = "" + this.element.id + ITEMTEMPLATE_PROPERTY;
      this.displayTemplateId = "" + this.element.id + DISPLAYTEMPLATE_PROPERTY;
      this.spinnerTemplateId = "" + this.element.id + SPINNERTEMPLATE_PROPERTY;
      this.valueTemplateId = "" + this.element.id + VALUETEMPLATE_PROPERTY;
      this.groupTemplateId = "" + this.element.id + GROUPTEMPLATE_PROPERTY;
      this.headerTemplateId = "" + this.element.id + HEADERTEMPLATE_PROPERTY;
      this.footerTemplateId = "" + this.element.id + FOOTERTEMPLATE_PROPERTY;
      this.noRecordsTemplateId = "" + this.element.id + NORECORDSTEMPLATE_PROPERTY;
    };
    DropDownBase2.prototype.setListData = function(dataSource, fields, query, event2) {
      var _this = this;
      fields = fields ? fields : this.fields;
      var ulElement;
      this.isActive = true;
      var eventArgs = {
        cancel: false,
        data: dataSource,
        query
      };
      this.isPreventChange = this.isAngular && this.preventChange ? true : this.isPreventChange;
      if (!this.isRequesting) {
        this.trigger("actionBegin", eventArgs, function(eventArgs2) {
          if (!eventArgs2.cancel) {
            _this.isRequesting = true;
            _this.showSpinner();
            if (dataSource instanceof DataManager) {
              _this.isRequested = true;
              var isWhereExist_1 = false;
              if (_this.isDataFetched) {
                _this.emptyDataRequest(fields);
                return;
              }
              eventArgs2.data.executeQuery(_this.getQuery(eventArgs2.query)).then(function(e) {
                _this.isPreventChange = _this.isAngular && _this.preventChange ? true : _this.isPreventChange;
                var isReOrder2 = true;
                if (!_this.virtualSelectAll) {
                  var newQuery2 = _this.getQuery(eventArgs2.query);
                  for (var queryElements2 = 0; queryElements2 < newQuery2.queries.length; queryElements2++) {
                    if (newQuery2.queries[queryElements2].fn === "onWhere") {
                      isWhereExist_1 = true;
                    }
                  }
                  if (_this.isVirtualizationEnabled && e.count !== 0 && e.count < _this.itemCount * 2) {
                    if (newQuery2) {
                      for (var queryElements2 = 0; queryElements2 < newQuery2.queries.length; queryElements2++) {
                        if (newQuery2.queries[queryElements2].fn === "onTake") {
                          newQuery2.queries[queryElements2].e.nos = e.count;
                        }
                        if (_this.getModuleName() === "multiselect" && (newQuery2.queries[queryElements2].e.condition === "or" || newQuery2.queries[queryElements2].e.operator === "equal") && !_this.isCustomFiltering) {
                          isReOrder2 = false;
                        }
                      }
                    }
                  } else {
                    _this.isVirtualTrackHeight = false;
                    if (newQuery2) {
                      for (var queryElements2 = 0; queryElements2 < newQuery2.queries.length; queryElements2++) {
                        if (_this.getModuleName() === "multiselect" && (newQuery2.queries[queryElements2].e && newQuery2.queries[queryElements2].e.condition === "or" || newQuery2.queries[queryElements2].e && newQuery2.queries[queryElements2].e.operator === "equal")) {
                          isReOrder2 = false;
                        }
                      }
                    }
                  }
                }
                if (isReOrder2) {
                  _this.dataCount = _this.totalItemCount = e.count;
                }
                _this.trigger("actionComplete", e, function(e2) {
                  if (!e2.cancel) {
                    _this.isRequesting = false;
                    _this.isCustomFiltering = false;
                    var listItems2 = e2.result;
                    if (_this.isIncrementalRequest) {
                      ulElement = _this.renderItems(listItems2, fields);
                      return;
                    }
                    if (!_this.isVirtualizationEnabled && listItems2.length === 0 || _this.isVirtualizationEnabled && listItems2.length === 0 && !isWhereExist_1) {
                      _this.isDataFetched = true;
                    }
                    if (!isWhereExist_1) {
                      _this.remoteDataCount = e2.count;
                    }
                    _this.dataCount = !_this.virtualSelectAll ? e2.count : _this.dataCount;
                    _this.totalItemCount = !_this.virtualSelectAll ? e2.count : _this.totalItemCount;
                    ulElement = _this.renderItems(listItems2, fields);
                    _this.appendUncheckList = false;
                    _this.onActionComplete(ulElement, listItems2, e2);
                    if (_this.groupTemplate) {
                      _this.renderGroupTemplate(ulElement);
                    }
                    _this.isRequested = false;
                    _this.bindChildItems(listItems2, ulElement, fields, e2);
                    if (_this.getInitialData) {
                      _this.getInitialData = false;
                      _this.preventPopupOpen = false;
                      return;
                    }
                    var isSetCurrentcall = false;
                    if (_this.isVirtualizationEnabled && _this.setCurrentView) {
                      isSetCurrentcall = true;
                      _this.notify("setCurrentViewDataAsync", {
                        module: "VirtualScroll"
                      });
                    }
                    if (_this.keyboardEvent != null) {
                      _this.handleVirtualKeyboardActions(_this.keyboardEvent, _this.pageCount);
                    }
                    var preventSkeleton = _this.getModuleName() !== "multiselect" || _this.getModuleName() === "multiselect" && (!(_this.dataSource instanceof DataManager) || _this.dataSource instanceof DataManager && !isSetCurrentcall);
                    if (_this.isVirtualizationEnabled && preventSkeleton) {
                      _this.getFilteringSkeletonCount();
                      _this.updatePopupPosition();
                    }
                    if (_this.virtualSelectAll && _this.virtualSelectAllData) {
                      _this.virtualSelectionAll(_this.virtualSelectAllState, _this.liCollections, _this.CurrentEvent);
                      _this.virtualSelectAllState = false;
                      _this.CurrentEvent = null;
                      _this.virtualSelectAll = false;
                    }
                  }
                });
              }).catch(function(e) {
                _this.isRequested = false;
                _this.isRequesting = false;
                _this.onActionFailure(e);
                _this.hideSpinner();
              });
            } else {
              _this.isRequesting = false;
              var isReOrder = true;
              var listItems = void 0;
              if (_this.isVirtualizationEnabled && !_this.virtualGroupDataSource && _this.fields.groupBy) {
                var data = new DataManager(_this.dataSource).executeLocal(new Query().group(_this.fields.groupBy));
                _this.virtualGroupDataSource = data.records;
              }
              var dataManager = _this.isVirtualizationEnabled && _this.virtualGroupDataSource && !_this.isCustomDataUpdated ? new DataManager(_this.virtualGroupDataSource) : new DataManager(eventArgs2.data);
              listItems = _this.getQuery(eventArgs2.query).executeLocal(dataManager);
              if (!_this.virtualSelectAll) {
                var newQuery = _this.getQuery(eventArgs2.query);
                if (_this.isVirtualizationEnabled && listItems.count !== 0 && listItems.count < _this.itemCount * 2 && !_this.appendUncheckList) {
                  if (newQuery) {
                    for (var queryElements = 0; queryElements < newQuery.queries.length; queryElements++) {
                      if (newQuery.queries[queryElements].fn === "onTake") {
                        newQuery.queries[queryElements].e.nos = listItems.count;
                        listItems = newQuery.executeLocal(dataManager);
                      }
                      if (_this.getModuleName() === "multiselect" && (newQuery.queries[queryElements].e.condition === "or" || newQuery.queries[queryElements].e.operator === "equal") && !_this.isCustomFiltering) {
                        isReOrder = false;
                      }
                    }
                    if (isReOrder) {
                      listItems = newQuery.executeLocal(dataManager);
                      _this.isVirtualTrackHeight = !(_this.dataSource instanceof DataManager) && !_this.isCustomDataUpdated ? true : false;
                    }
                  }
                } else {
                  _this.isVirtualTrackHeight = false;
                  if (newQuery) {
                    for (var queryElements = 0; queryElements < newQuery.queries.length; queryElements++) {
                      if (_this.getModuleName() === "multiselect" && (newQuery.queries[queryElements].e && newQuery.queries[queryElements].e.condition === "or" || newQuery.queries[queryElements].e && newQuery.queries[queryElements].e.operator === "equal")) {
                        isReOrder = false;
                      }
                    }
                  }
                }
              }
              if (isReOrder && !(_this.dataSource instanceof DataManager) && !_this.isCustomDataUpdated && !_this.virtualSelectAll) {
                _this.dataCount = _this.totalItemCount = _this.virtualSelectAll ? listItems.length : listItems.count;
              }
              listItems = _this.isVirtualizationEnabled ? listItems.result : listItems;
              var localDataArgs = {
                cancel: false,
                result: listItems
              };
              _this.isPreventChange = _this.isAngular && _this.preventChange ? true : _this.isPreventChange;
              _this.trigger("actionComplete", localDataArgs, function(localDataArgs2) {
                _this.isCustomFiltering = false;
                if (_this.isIncrementalRequest) {
                  ulElement = _this.renderItems(localDataArgs2.result, fields);
                  return;
                }
                if (!localDataArgs2.cancel) {
                  ulElement = _this.renderItems(localDataArgs2.result, fields);
                  _this.onActionComplete(ulElement, localDataArgs2.result, event2);
                  if (_this.groupTemplate) {
                    _this.renderGroupTemplate(ulElement);
                  }
                  _this.bindChildItems(localDataArgs2.result, ulElement, fields);
                  if (_this.getInitialData) {
                    _this.getInitialData = false;
                    _this.preventPopupOpen = false;
                    return;
                  }
                  setTimeout(function() {
                    if (_this.getModuleName() === "multiselect" && _this.itemTemplate != null && ulElement.childElementCount > 0 && (ulElement.children[0].childElementCount > 0 || _this.fields.groupBy && ulElement.children[1] && ulElement.children[1].childElementCount > 0)) {
                      _this.updateDataList();
                    }
                  });
                }
              });
            }
          }
        });
      }
    };
    DropDownBase2.prototype.handleVirtualKeyboardActions = function(e, pageCount) {
    };
    DropDownBase2.prototype.updatePopupState = function() {
    };
    DropDownBase2.prototype.updatePopupPosition = function() {
    };
    DropDownBase2.prototype.virtualSelectionAll = function(state, li, event2) {
    };
    DropDownBase2.prototype.updateRemoteData = function() {
      this.setListData(this.dataSource, this.fields, this.query);
    };
    DropDownBase2.prototype.bindChildItems = function(listItems, ulElement, fields, e) {
      var _this = this;
      if (listItems.length >= 100 && this.getModuleName() === "autocomplete") {
        setTimeout(function() {
          var childNode = _this.remainingItems(_this.sortedData, fields);
          append(childNode, ulElement);
          _this.liCollections = _this.list.querySelectorAll("." + dropDownBaseClasses.li);
          _this.updateListValues();
          _this.raiseDataBound(listItems, e);
        }, 0);
      } else {
        this.raiseDataBound(listItems, e);
      }
    };
    DropDownBase2.prototype.isObjectInArray = function(objectToFind, array) {
      return array.some(function(item) {
        return Object.keys(objectToFind).every(function(key) {
          return Object.prototype.hasOwnProperty.call(item, key) && item[key] === objectToFind[key];
        });
      });
    };
    DropDownBase2.prototype.updateListValues = function() {
    };
    DropDownBase2.prototype.findListElement = function(list, findNode, attribute, value) {
      var liElement = null;
      if (list) {
        var listArr = [].slice.call(list.querySelectorAll(findNode));
        for (var index = 0; index < listArr.length; index++) {
          if (listArr[index].getAttribute(attribute) === value + "") {
            liElement = listArr[index];
            break;
          }
        }
      }
      return liElement;
    };
    DropDownBase2.prototype.raiseDataBound = function(listItems, e) {
      this.hideSpinner();
      var dataBoundEventArgs = {
        items: listItems,
        e
      };
      this.trigger("dataBound", dataBoundEventArgs);
    };
    DropDownBase2.prototype.remainingItems = function(dataSource, fields) {
      var spliceData = new DataManager(dataSource).executeLocal(new Query().skip(100));
      if (this.itemTemplate) {
        var listElements = this.templateListItem(spliceData, fields);
        return [].slice.call(listElements.childNodes);
      }
      var type = this.typeOfData(spliceData).typeof;
      if (type === "string" || type === "number" || type === "boolean") {
        return ListBase.createListItemFromArray(this.createElement, spliceData, true, this.listOption(spliceData, fields), this);
      }
      return ListBase.createListItemFromJson(this.createElement, spliceData, this.listOption(spliceData, fields), 1, true, this);
    };
    DropDownBase2.prototype.emptyDataRequest = function(fields) {
      var listItems = [];
      this.onActionComplete(this.renderItems(listItems, fields), listItems);
      this.isRequested = false;
      this.isRequesting = false;
      this.hideSpinner();
    };
    DropDownBase2.prototype.showSpinner = function() {
    };
    DropDownBase2.prototype.hideSpinner = function() {
    };
    DropDownBase2.prototype.onActionFailure = function(e) {
      this.liCollections = [];
      this.trigger("actionFailure", e);
      this.l10nUpdate(true);
      if (!isNullOrUndefined(this.list)) {
        addClass([this.list], dropDownBaseClasses.noData);
      }
    };
    DropDownBase2.prototype.onActionComplete = function(ulElement, list, e) {
      var _this = this;
      this.listData = list;
      if (this.isVirtualizationEnabled && !this.isCustomDataUpdated && !this.virtualSelectAll) {
        this.notify("setGeneratedData", {
          module: "VirtualScroll"
        });
      }
      if (this.getModuleName() !== "listbox") {
        ulElement.setAttribute("tabindex", "0");
      }
      if (this.isReact) {
        this.clearTemplate(["itemTemplate", "groupTemplate", "actionFailureTemplate", "noRecordsTemplate"]);
      }
      if (!this.isVirtualizationEnabled) {
        this.fixedHeaderElement = isNullOrUndefined(this.fixedHeaderElement) ? this.fixedHeaderElement : null;
      }
      if (this.getModuleName() === "multiselect" && this.properties.allowCustomValue && this.fields.groupBy) {
        for (var i = 0; i < ulElement.childElementCount; i++) {
          if (ulElement.children[i].classList.contains("e-list-group-item")) {
            if (isNullOrUndefined(ulElement.children[i].innerHTML) || ulElement.children[i].innerHTML === "") {
              addClass([ulElement.children[i]], HIDE_GROUPLIST);
            }
          }
          if (ulElement.children[0].classList.contains("e-hide-group-header")) {
            setStyleAttribute(ulElement.children[1], {
              zIndex: 11
            });
          }
        }
      }
      if (this.getModuleName() === "multiselect" && this.isAngular && this.ngEle) {
        var popupHolder = this.list;
        if (popupHolder) {
          var prevHeight = popupHolder.offsetHeight + "px";
          popupHolder.style.height = prevHeight;
        }
      }
      if (!isNullOrUndefined(this.list)) {
        if (!this.isVirtualizationEnabled) {
          this.list.innerHTML = "";
          this.list.appendChild(ulElement);
          this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li);
          this.ulElement = this.list.querySelector("ul");
          this.postRender(this.list, list, this.bindEvent);
        }
      }
      if (this.getModuleName() === "multiselect" && this.isAngular && this.ngEle) {
        var popupHolder_1 = this.list;
        if (popupHolder_1) {
          setTimeout(function() {
            popupHolder_1.style.height = "";
            _this.refreshPopup();
          }, 0);
        }
      }
    };
    DropDownBase2.prototype.postRender = function(listElement, list, bindEvent) {
      if (this.fields.disabled) {
        var liCollections = listElement.querySelectorAll("." + dropDownBaseClasses.li);
        var data = this.sortOrder !== "None" ? !isNullOrUndefined(this.fields.groupBy) ? this.sortedData.filter(function(item2) {
          return !("isHeader" in item2) || item2.isHeader !== true;
        }) : this.sortedData : this.listData;
        for (var index = 0; index < liCollections.length; index++) {
          if (JSON.parse(JSON.stringify(data[index]))[this.fields.disabled]) {
            if (!isNullOrUndefined(this.fields.groupBy)) {
              var item = data[index];
              var value = getValue(this.fields.value ? this.fields.value : "value", item);
              var li = listElement.querySelector('li[data-value="' + value + '"]');
              if (!isNullOrUndefined(li)) {
                this.disableListItem(li);
              }
            } else {
              this.disableListItem(liCollections[index]);
            }
          }
        }
      }
      var focusItem = this.fields.disabled ? listElement.querySelector("." + dropDownBaseClasses.li + ":not(.e-disabled") : listElement.querySelector("." + dropDownBaseClasses.li);
      var selectedItem = listElement.querySelector("." + dropDownBaseClasses.selected);
      if (focusItem && !selectedItem) {
        if (this.isVirtualizationEnabled && this.viewPortInfo.startIndex !== 0) {
          var elements = this.ulElement.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-virtual-list):not(.e-hide-listitem)");
          focusItem = elements && elements.length > 0 ? elements[2] : focusItem;
        }
        if (focusItem) {
          focusItem.classList.add(dropDownBaseClasses.focus);
        }
      }
      if (list.length <= 0) {
        this.l10nUpdate();
        addClass([listElement], dropDownBaseClasses.noData);
      } else {
        listElement.classList.remove(dropDownBaseClasses.noData);
      }
    };
    DropDownBase2.prototype.getQuery = function(query) {
      return query ? query : this.query ? this.query : new Query();
    };
    DropDownBase2.prototype.performFiltering = function(e) {
    };
    DropDownBase2.prototype.debouncedFiltering = function(e, debounceDelay) {
      var _this = this;
      if (this.debounceTimer !== null) {
        clearTimeout(this.debounceTimer);
      }
      this.debounceTimer = setTimeout(function() {
        _this.performFiltering(e);
      }, debounceDelay);
    };
    DropDownBase2.prototype.updateVirtualizationProperties = function(itemCount, filtering, isCheckbox) {
      this.isVirtualizationEnabled = true;
      this.virtualizedItemsCount = itemCount;
      this.isAllowFiltering = filtering;
      this.isCheckBoxSelection = isCheckbox;
    };
    DropDownBase2.prototype.renderGroupTemplate = function(listEle) {
      if (this.fields.groupBy !== null && this.dataSource || this.element.querySelector("." + dropDownBaseClasses.group)) {
        var dataSource = this.dataSource;
        var option = {
          groupTemplateID: this.groupTemplateId,
          isStringTemplate: this.isStringTemplate
        };
        var headerItems = listEle.querySelectorAll("." + dropDownBaseClasses.group);
        var groupcheck = this.templateCompiler(this.groupTemplate);
        if (typeof this.groupTemplate !== "function" && groupcheck) {
          var groupValue = select(this.groupTemplate, document).innerHTML.trim();
          var tempHeaders = ListBase.renderGroupTemplate(groupValue, dataSource, this.fields.properties, headerItems, option, this);
          if (this.isGroupChecking) {
            for (var i = 0; i < tempHeaders.length; i++) {
              this.notify("addItem", {
                module: "CheckBoxSelection",
                item: tempHeaders[i]
              });
            }
          }
        } else {
          var tempHeaders = ListBase.renderGroupTemplate(this.groupTemplate, dataSource, this.fields.properties, headerItems, option, this);
          if (this.isGroupChecking) {
            for (var i = 0; i < tempHeaders.length; i++) {
              this.notify("addItem", {
                module: "CheckBoxSelection",
                item: tempHeaders[i]
              });
            }
          }
        }
        this.renderReactTemplates();
      }
    };
    DropDownBase2.prototype.createListItems = function(dataSource, fields) {
      if (dataSource) {
        if (fields.groupBy || this.element.querySelector("optgroup")) {
          if (fields.groupBy) {
            if (this.sortOrder !== "None") {
              dataSource = this.getSortedDataSource(dataSource);
            }
            var fieldSet = fields.properties || fields;
            dataSource = ListBase.groupDataSource(dataSource, fieldSet, this.sortOrder);
          }
          addClass([this.list], dropDownBaseClasses.grouping);
        } else if (this.getModuleName() !== "listbox" || this.getModuleName() === "listbox" && !this.preventDefActionFilter) {
          dataSource = this.getSortedDataSource(dataSource);
        }
        var options = this.listOption(dataSource, fields);
        var spliceData = dataSource.length > 100 ? new DataManager(dataSource).executeLocal(new Query().take(100)) : dataSource;
        this.sortedData = dataSource;
        return ListBase.createList(this.createElement, this.getModuleName() === "autocomplete" ? spliceData : dataSource, options, true, this);
      }
      return null;
    };
    DropDownBase2.prototype.listOption = function(dataSource, fields) {
      var iconCss = isNullOrUndefined(fields.iconCss) ? false : true;
      var fieldValues = !isNullOrUndefined(fields.properties) ? fields.properties : fields;
      var options = fields.text !== null || fields.value !== null ? {
        fields: fieldValues,
        showIcon: iconCss,
        ariaAttributes: {
          groupItemRole: "presentation"
        }
      } : {
        fields: {
          value: "text"
        }
      };
      return extend({}, options, fields, true);
    };
    DropDownBase2.prototype.setFloatingHeader = function(e) {
      if (!isNullOrUndefined(this.list) && !this.list.classList.contains(dropDownBaseClasses.noData)) {
        if (isNullOrUndefined(this.fixedHeaderElement)) {
          this.fixedHeaderElement = this.createElement("div", {
            className: dropDownBaseClasses.fixedHead
          });
          if (!isNullOrUndefined(this.list) && !this.list.querySelector("li").classList.contains(dropDownBaseClasses.group)) {
            this.fixedHeaderElement.style.display = "none";
          }
          if (!isNullOrUndefined(this.fixedHeaderElement) && !isNullOrUndefined(this.list)) {
            prepend([this.fixedHeaderElement], this.list);
          }
          this.setFixedHeader();
        }
        if (!isNullOrUndefined(this.fixedHeaderElement) && this.fixedHeaderElement.style.zIndex === "0") {
          this.setFixedHeader();
        }
        this.scrollStop(e);
      }
    };
    DropDownBase2.prototype.scrollStop = function(e, isDownkey) {
      var target = !isNullOrUndefined(e) ? e.target : this.list;
      var computedHeight = getComputedStyle(this.getValidLi(), null).getPropertyValue("height");
      var computedMarginValue = getComputedStyle(this.getValidLi(), null).getPropertyValue("margin-bottom");
      var marginValue = parseInt(computedMarginValue, 10);
      var liHeight = this.getModuleName() === "multiselect" ? parseFloat(computedHeight) : parseInt(computedHeight, 10);
      var topIndex = Math.round(target.scrollTop / (liHeight + marginValue));
      var liCollections = this.list.querySelectorAll("li:not(.e-hide-listitem)");
      var virtualListCount = this.list.querySelectorAll(".e-virtual-list").length;
      var count2 = 0;
      var isCount = false;
      for (var i = topIndex; i > -1; i--) {
        var index = this.isVirtualizationEnabled ? i + virtualListCount : i;
        if (this.isVirtualizationEnabled) {
          if (isCount) {
            count2++;
          }
          if (this.fixedHeaderElement && this.updateGroupHeader(index, liCollections, target)) {
            break;
          }
          if (isDownkey) {
            if (!isNullOrUndefined(liCollections[index]) && liCollections[index].classList.contains(dropDownBaseClasses.selected) && this.getModuleName() !== "autocomplete" || !isNullOrUndefined(liCollections[index]) && liCollections[index].classList.contains(dropDownBaseClasses.focus) && this.getModuleName() === "autocomplete") {
              count2++;
              isCount = true;
            }
          }
        } else {
          if (this.updateGroupHeader(index, liCollections, target)) {
            break;
          }
        }
      }
    };
    DropDownBase2.prototype.getPageCount = function(returnExactCount) {
      if (this.list) {
        var liHeight = this.list.classList.contains(dropDownBaseClasses.noData) ? null : getComputedStyle(this.getItems()[0], null).getPropertyValue("height");
        var pageCount = Math.round(this.list.getBoundingClientRect().height / parseInt(liHeight, 10));
        return returnExactCount ? pageCount : Math.round(pageCount);
      } else {
        return 0;
      }
    };
    DropDownBase2.prototype.updateGroupHeader = function(index, liCollections, target) {
      if (!isNullOrUndefined(liCollections[index]) && liCollections[index].classList.contains(dropDownBaseClasses.group)) {
        this.updateGroupFixedHeader(liCollections[index], target);
        return true;
      } else {
        this.fixedHeaderElement.style.display = "none";
        this.fixedHeaderElement.style.top = "none";
        return false;
      }
    };
    DropDownBase2.prototype.updateGroupFixedHeader = function(element, target) {
      if (this.fixedHeaderElement) {
        if (!isNullOrUndefined(element.innerHTML)) {
          this.fixedHeaderElement.innerHTML = element.innerHTML;
        }
        this.fixedHeaderElement.style.position = "fixed";
        this.fixedHeaderElement.style.top = this.list.parentElement.offsetTop + this.list.offsetTop - window.scrollY + "px";
        this.fixedHeaderElement.style.display = "block";
      }
    };
    DropDownBase2.prototype.getValidLi = function() {
      if (this.isVirtualizationEnabled) {
        return this.liCollections[0].classList.contains("e-virtual-list") ? this.liCollections[this.skeletonCount] : this.liCollections[0];
      }
      return this.liCollections[0];
    };
    DropDownBase2.prototype.renderItems = function(listData, fields, isCheckBoxUpdate, isClearAll) {
      var ulElement;
      if (this.itemTemplate && listData) {
        if (this.getModuleName() === "multiselect" && this.virtualSelectAll) {
          this.virtualSelectAllData = listData;
          listData = listData.slice(this.virtualItemStartIndex, this.virtualItemEndIndex);
        }
        var dataSource = listData;
        if (dataSource && fields.groupBy) {
          if (this.sortOrder !== "None") {
            dataSource = this.getSortedDataSource(dataSource);
          }
          dataSource = ListBase.groupDataSource(dataSource, fields.properties, this.sortOrder);
        } else if (this.getModuleName() !== "listbox" || this.getModuleName() === "listbox" && !this.preventDefActionFilter) {
          dataSource = this.getSortedDataSource(dataSource);
        }
        this.sortedData = dataSource;
        var spliceData = dataSource.length > 100 ? new DataManager(dataSource).executeLocal(new Query().take(100)) : dataSource;
        ulElement = this.templateListItem(this.getModuleName() === "autocomplete" ? spliceData : dataSource, fields);
        if (this.isIncrementalRequest) {
          this.incrementalLiCollections = ulElement.querySelectorAll("." + dropDownBaseClasses.li);
          this.incrementalUlElement = ulElement;
          this.incrementalListData = listData;
          return ulElement;
        }
        if (this.isVirtualizationEnabled) {
          var oldUlElement = this.list.querySelector(".e-list-parent");
          var virtualUlElement = this.list.querySelector(".e-virtual-ddl-content");
          if (listData.length >= this.virtualizedItemsCount && oldUlElement && virtualUlElement || oldUlElement && virtualUlElement && this.isAllowFiltering || oldUlElement && virtualUlElement && this.getModuleName() === "autocomplete") {
            if (this.getModuleName() === "multiselect" && this.isCheckBoxSelection && this.appendUncheckList && this.list && this.list.querySelector(".e-active")) {
              virtualUlElement.appendChild(ulElement);
              isCheckBoxUpdate = true;
            } else {
              virtualUlElement.replaceChild(ulElement, oldUlElement);
            }
            var reOrderList = this.list.querySelectorAll(".e-reorder");
            if (this.list.querySelector(".e-virtual-ddl-content") && reOrderList && reOrderList.length > 0 && !isCheckBoxUpdate) {
              this.list.querySelector(".e-virtual-ddl-content").removeChild(reOrderList[0]);
            }
            this.updateListElements(listData);
          } else if (!virtualUlElement) {
            this.list.innerHTML = "";
            this.createVirtualContent();
            this.list.querySelector(".e-virtual-ddl-content").appendChild(ulElement);
            this.updateListElements(listData);
          }
        }
      } else {
        if (this.getModuleName() === "multiselect" && this.virtualSelectAll && !isClearAll) {
          this.virtualSelectAllData = listData;
          listData = listData.slice(this.virtualItemStartIndex, this.virtualItemEndIndex);
        }
        ulElement = this.createListItems(listData, fields);
        if (this.isIncrementalRequest) {
          this.incrementalLiCollections = ulElement.querySelectorAll("." + dropDownBaseClasses.li);
          this.incrementalUlElement = ulElement;
          this.incrementalListData = listData;
          return ulElement;
        }
        if (this.isVirtualizationEnabled) {
          var oldUlElement = this.list.querySelector(".e-list-parent:not(.e-reorder)");
          var virtualUlElement = this.list.querySelector(".e-virtual-ddl-content");
          var isRemovedUlelement = false;
          if (!oldUlElement && this.list.querySelector(".e-list-parent.e-reorder") || oldUlElement && this.isVirtualReorder && this.list.querySelector(".e-list-parent.e-reorder")) {
            oldUlElement = this.list.querySelector(".e-list-parent.e-reorder");
          }
          if (listData.length >= this.virtualizedItemsCount && oldUlElement && virtualUlElement || oldUlElement && virtualUlElement && this.isAllowFiltering || oldUlElement && virtualUlElement && (this.getModuleName() === "autocomplete" || this.getModuleName() === "multiselect") || isRemovedUlelement) {
            if (this.getModuleName() !== "multiselect" || this.getModuleName() === "multiselect" && (!(this.dataSource instanceof DataManager) || this.dataSource instanceof DataManager && !this.setCurrentView)) {
              if (!this.appendUncheckList) {
                virtualUlElement.replaceChild(ulElement, oldUlElement);
              } else {
                virtualUlElement.appendChild(ulElement);
              }
            }
            this.updateListElements(listData);
          } else if (!virtualUlElement || !virtualUlElement.firstChild) {
            this.list.innerHTML = "";
            this.createVirtualContent();
            this.list.querySelector(".e-virtual-ddl-content").appendChild(ulElement);
            this.updateListElements(listData);
          }
        }
      }
      return ulElement;
    };
    DropDownBase2.prototype.createVirtualContent = function() {
      if (!this.list.querySelector(".e-virtual-ddl-content")) {
        this.list.appendChild(this.createElement("div", {
          className: "e-virtual-ddl-content"
        }));
      }
    };
    DropDownBase2.prototype.updateListElements = function(listData) {
      this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li);
      this.ulElement = this.list.querySelector("ul");
      this.listData = listData;
      this.postRender(this.list, listData, this.bindEvent);
    };
    DropDownBase2.prototype.templateListItem = function(dataSource, fields) {
      var option = this.listOption(dataSource, fields);
      option.templateID = this.itemTemplateId;
      option.isStringTemplate = this.isStringTemplate;
      var itemcheck = this.templateCompiler(this.itemTemplate);
      var ulElement;
      if (typeof this.itemTemplate !== "function" && itemcheck) {
        var itemValue = select(this.itemTemplate, document).innerHTML.trim();
        ulElement = ListBase.renderContentTemplate(this.createElement, itemValue, dataSource, fields.properties, option, this);
        if (this.isVirtualizationEnabled && this.isReact) {
          this.renderReactTemplates();
        }
        return ulElement;
      } else {
        ulElement = ListBase.renderContentTemplate(this.createElement, this.itemTemplate, dataSource, fields.properties, option, this);
        if (this.isVirtualizationEnabled && this.isReact) {
          this.renderReactTemplates();
        }
        return ulElement;
      }
    };
    DropDownBase2.prototype.typeOfData = function(items) {
      var item = {
        typeof: null,
        item: null
      };
      for (var i = 0; !isNullOrUndefined(items) && i < items.length; i++) {
        if (!isNullOrUndefined(items[i])) {
          var listDataType = typeof items[i] === "string" || typeof items[i] === "number" || typeof items[i] === "boolean";
          var isNullData = listDataType ? isNullOrUndefined(items[i]) : isNullOrUndefined(getValue(this.fields.value ? this.fields.value : "value", items[i]));
          if (!isNullData) {
            return item = {
              typeof: typeof items[i],
              item: items[i]
            };
          }
        }
      }
      return item;
    };
    DropDownBase2.prototype.setFixedHeader = function() {
      if (!isNullOrUndefined(this.list)) {
        this.list.parentElement.style.display = "block";
      }
      var borderWidth = 0;
      if (this.list && this.list.parentElement) {
        borderWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue("border-width"), 10);
        if (isNaN(borderWidth)) {
          var borderTopWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue("border-top-width"), 10);
          var borderBottomWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue("border-bottom-width"), 10);
          var borderLeftWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue("border-left-width"), 10);
          var borderRightWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue("border-right-width"), 10);
          borderWidth = borderTopWidth + borderBottomWidth + borderLeftWidth + borderRightWidth;
        }
      }
      if (!isNullOrUndefined(this.liCollections)) {
        var liWidth = this.getValidLi().offsetWidth - borderWidth;
        this.fixedHeaderElement.style.width = liWidth.toString() + "px";
      }
      setStyleAttribute(this.fixedHeaderElement, {
        zIndex: 10
      });
      var firstLi = this.ulElement.querySelector("." + dropDownBaseClasses.group + ":not(.e-hide-listitem)");
      if (!isNullOrUndefined(firstLi)) {
        this.fixedHeaderElement.innerHTML = firstLi.innerHTML;
      }
    };
    DropDownBase2.prototype.getSortedDataSource = function(dataSource) {
      if (dataSource && this.sortOrder !== "None") {
        var textField = this.fields.text ? this.fields.text : "text";
        if (this.typeOfData(dataSource).typeof === "string" || this.typeOfData(dataSource).typeof === "number" || this.typeOfData(dataSource).typeof === "boolean") {
          textField = "";
        }
        dataSource = ListBase.getDataSource(dataSource, ListBase.addSorting(this.sortOrder, textField));
      }
      return dataSource;
    };
    DropDownBase2.prototype.getIndexByValue = function(value) {
      var index;
      var listItems = [];
      if (this.fields.disabled && this.getModuleName() === "multiselect" && this.liCollections) {
        listItems = this.liCollections;
      } else {
        listItems = this.getItems();
      }
      for (var i = 0; i < listItems.length; i++) {
        if (!isNullOrUndefined(value) && listItems[i].getAttribute("data-value") === value.toString()) {
          index = i;
          break;
        }
      }
      return index;
    };
    DropDownBase2.prototype.getIndexByValueFilter = function(value, ulElement) {
      var index;
      if (!ulElement) {
        return null;
      }
      var listItems = ulElement.querySelectorAll("li:not(.e-list-group-item)");
      if (listItems) {
        for (var i = 0; i < listItems.length; i++) {
          if (!isNullOrUndefined(value) && listItems[i].getAttribute("data-value") === value.toString()) {
            index = i;
            break;
          }
        }
      }
      return index;
    };
    DropDownBase2.prototype.dispatchEvent = function(element, type) {
      var evt = document.createEvent("HTMLEvents");
      evt.initEvent(type, false, true);
      if (element) {
        element.dispatchEvent(evt);
      }
    };
    DropDownBase2.prototype.setFields = function() {
      if (this.fields.value && !this.fields.text) {
        this.updateFields(this.fields.value, this.fields.value);
      } else if (!this.fields.value && this.fields.text) {
        this.updateFields(this.fields.text, this.fields.text);
      } else if (!this.fields.value && !this.fields.text) {
        this.isPrimitiveData = true;
        this.updateFields("text", "text");
      }
    };
    DropDownBase2.prototype.resetList = function(dataSource, fields, query, e) {
      if (this.list) {
        if (this.element.tagName === "SELECT" && this.element.options.length > 0 || this.element.tagName === "UL" && this.element.childNodes.length > 0) {
          var data = dataSource instanceof Array ? dataSource.length > 0 : !isNullOrUndefined(dataSource);
          if (!data && this.selectData && this.selectData.length > 0) {
            dataSource = this.selectData;
          }
        }
        dataSource = this.getModuleName() === "combobox" && this.selectData && dataSource instanceof Array && dataSource.length < this.selectData.length && this.addedNewItem ? this.selectData : dataSource;
        this.addedNewItem = false;
        this.setListData(dataSource, fields, query, e);
      }
    };
    DropDownBase2.prototype.updateSelectElementData = function(isFiltering) {
      if ((isFiltering || this.isVirtualizationEnabled) && isNullOrUndefined(this.selectData) && this.listData && this.listData.length > 0) {
        this.selectData = this.listData;
      }
    };
    DropDownBase2.prototype.updateSelection = function() {
    };
    DropDownBase2.prototype.renderList = function() {
      this.render();
    };
    DropDownBase2.prototype.updateDataSource = function(props, oldProps) {
      this.resetList(this.dataSource);
      this.totalItemCount = this.dataSource instanceof DataManager ? this.dataSource.dataSource.json.length : 0;
    };
    DropDownBase2.prototype.setUpdateInitial = function(props, newProp, oldProp) {
      this.isDataFetched = false;
      this.isPrimitiveData = false;
      var updateData2 = {};
      for (var j = 0; props.length > j; j++) {
        if (newProp[props[j]] && props[j] === "fields") {
          this.setFields();
          updateData2[props[j]] = newProp[props[j]];
        } else if (newProp[props[j]]) {
          updateData2[props[j]] = newProp[props[j]];
        }
      }
      if (Object.keys(updateData2).length > 0) {
        if (Object.keys(updateData2).indexOf("dataSource") === -1) {
          updateData2.dataSource = this.dataSource;
        }
        if (this.getModuleName() === "listbox") {
          if (!this.isReact || this.isReact && (!isNullOrUndefined(newProp.dataSource) || !isNullOrUndefined(newProp.sortOrder))) {
            this.updateDataSource(updateData2, oldProp);
          }
        } else {
          this.isDynamicData = true;
          this.updateDataSource(updateData2, oldProp);
        }
      }
    };
    DropDownBase2.prototype.onPropertyChanged = function(newProp, oldProp) {
      if (this.getModuleName() === "dropdownbase") {
        this.setUpdateInitial(["fields", "query", "dataSource"], newProp);
      }
      this.setUpdateInitial(["sortOrder", "itemTemplate"], newProp);
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "query":
          case "sortOrder":
          case "dataSource":
          case "itemTemplate":
            break;
          case "enableRtl":
            this.setEnableRtl();
            break;
          case "groupTemplate":
            this.renderGroupTemplate(this.list);
            if (this.ulElement && this.fixedHeaderElement) {
              var firstLi = this.ulElement.querySelector("." + dropDownBaseClasses.group);
              this.fixedHeaderElement.innerHTML = firstLi.innerHTML;
            }
            break;
          case "locale":
            if (this.list && !isNullOrUndefined(this.liCollections) && this.liCollections.length === 0) {
              this.l10nUpdate();
            }
            break;
          case "zIndex":
            this.setProperties({
              zIndex: newProp.zIndex
            }, true);
            this.setZIndex();
            break;
        }
      }
    };
    DropDownBase2.prototype.render = function(e, isEmptyData) {
      if (this.getModuleName() === "listbox") {
        this.list = this.createElement("div", {
          className: dropDownBaseClasses.content,
          attrs: {
            "tabindex": "0"
          }
        });
      } else {
        this.list = this.createElement("div", {
          className: dropDownBaseClasses.content
        });
      }
      this.list.classList.add(dropDownBaseClasses.root);
      this.setFields();
      var rippleModel = {
        duration: 300,
        selector: "." + dropDownBaseClasses.li
      };
      this.rippleFun = rippleEffect(this.list, rippleModel);
      var group = this.element.querySelector("select>optgroup");
      if ((this.fields.groupBy || !isNullOrUndefined(group)) && !this.isGroupChecking) {
        EventHandler.add(this.list, "scroll", this.setFloatingHeader, this);
        var elements = this.getScrollableParent();
        for (var i = 0; i < elements.length; i++) {
          var ele = elements[i];
          EventHandler.add(ele, "scroll", this.updateGroupFixedHeader, this);
        }
      }
      if (this.getModuleName() === "dropdownbase") {
        if (this.element.getAttribute("tabindex")) {
          this.list.setAttribute("tabindex", this.element.getAttribute("tabindex"));
        }
        removeClass([this.element], dropDownBaseClasses.root);
        this.element.style.display = "none";
        var wrapperElement = this.createElement("div");
        this.element.parentElement.insertBefore(wrapperElement, this.element);
        wrapperElement.appendChild(this.element);
        wrapperElement.appendChild(this.list);
      }
      this.setEnableRtl();
      if (!isEmptyData) {
        this.initialize(e);
      }
    };
    DropDownBase2.prototype.getScrollableParent = function() {
      var eleStyle = getComputedStyle(this.element);
      var scrollParents = [];
      var overflowRegex = /(auto|scroll)/;
      var parent = this.element.parentElement;
      while (parent && parent.tagName !== "HTML") {
        var parentStyle = getComputedStyle(parent);
        if (!(eleStyle.position === "absolute" && parentStyle.position === "static") && overflowRegex.test(parentStyle.overflow + parentStyle.overflowY + parentStyle.overflowX)) {
          scrollParents.push(parent);
        }
        parent = parent.parentElement;
      }
      scrollParents.push(document);
      return scrollParents;
    };
    DropDownBase2.prototype.removeScrollEvent = function() {
      if (this.list) {
        EventHandler.remove(this.list, "scroll", this.setFloatingHeader);
      }
    };
    DropDownBase2.prototype.getModuleName = function() {
      return "dropdownbase";
    };
    DropDownBase2.prototype.getItems = function() {
      return this.ulElement.querySelectorAll("." + dropDownBaseClasses.li);
    };
    DropDownBase2.prototype.addItem = function(items, itemIndex) {
      if (!this.list || this.list.textContent === this.noRecordsTemplate && this.getModuleName() !== "listbox") {
        this.renderList();
      }
      if (this.sortOrder !== "None" && isNullOrUndefined(itemIndex)) {
        var newList = [].slice.call(this.listData);
        newList.push(items);
        newList = this.getSortedDataSource(newList);
        if (this.fields.groupBy) {
          newList = ListBase.groupDataSource(newList, this.fields.properties, this.sortOrder);
          itemIndex = newList.indexOf(items);
        } else {
          itemIndex = newList.indexOf(items);
        }
      }
      var itemsCount = this.getItems().length;
      var isListboxEmpty = itemsCount === 0;
      var selectedItemValue = this.list.querySelector("." + dropDownBaseClasses.selected);
      items = items instanceof Array ? items : [items];
      var index;
      index = isNullOrUndefined(itemIndex) || itemIndex < 0 || itemIndex > itemsCount - 1 ? itemsCount : itemIndex;
      var fields = this.fields;
      if (items && fields.groupBy) {
        items = ListBase.groupDataSource(items, fields.properties);
      }
      var liCollections = [];
      for (var i = 0; i < items.length; i++) {
        var item = items[i];
        var isHeader = item.isHeader;
        var li = this.createElement("li", {
          className: isHeader ? dropDownBaseClasses.group : dropDownBaseClasses.li,
          id: "option-add-" + i
        });
        var itemText = item instanceof Object ? getValue(fields.text, item) : item;
        if (isHeader) {
          li.innerText = itemText;
        }
        if (this.itemTemplate && !isHeader) {
          var itemCheck = this.templateCompiler(this.itemTemplate);
          var compiledString = typeof this.itemTemplate !== "function" && itemCheck ? compile(select(this.itemTemplate, document).innerHTML.trim()) : compile(this.itemTemplate);
          var addItemTemplate = compiledString(item, this, "itemTemplate", this.itemTemplateId, this.isStringTemplate, null, li);
          if (addItemTemplate) {
            append(addItemTemplate, li);
          }
        } else if (!isHeader) {
          li.appendChild(document.createTextNode(itemText));
        }
        li.setAttribute("data-value", item instanceof Object ? getValue(fields.value, item) : item);
        li.setAttribute("role", "option");
        this.notify("addItem", {
          module: "CheckBoxSelection",
          item: li
        });
        liCollections.push(li);
        if (this.getModuleName() === "listbox") {
          this.listData.splice(isListboxEmpty ? this.listData.length : index, 0, item);
          if (this.listData.length !== this.sortedData.length) {
            this.sortedData = this.listData;
          }
        } else {
          this.listData.push(item);
        }
        if (this.sortOrder === "None" && isNullOrUndefined(itemIndex) && index === 0) {
          index = null;
        }
        if (this.getModuleName() === "listbox") {
          this.updateActionCompleteData(li, item, isListboxEmpty ? null : index + i);
        } else {
          this.updateActionCompleteData(li, item, index);
        }
        this.trigger("beforeItemRender", {
          element: li,
          item
        });
      }
      if (itemsCount === 0 && isNullOrUndefined(this.list.querySelector("ul"))) {
        if (!isNullOrUndefined(this.list)) {
          this.list.innerHTML = "";
          this.list.classList.remove(dropDownBaseClasses.noData);
          this.isAddNewItemTemplate = true;
          if (!isNullOrUndefined(this.ulElement)) {
            this.list.appendChild(this.ulElement);
          }
        }
        this.liCollections = liCollections;
        if (!isNullOrUndefined(liCollections) && !isNullOrUndefined(this.ulElement)) {
          append(liCollections, this.ulElement);
        }
        this.updateAddItemList(this.list, itemsCount);
      } else {
        if (this.getModuleName() === "listbox" && itemsCount === 0) {
          this.ulElement.innerHTML = "";
        }
        var attr = [];
        for (var i = 0; i < items.length; i++) {
          var listGroupItem = this.ulElement.querySelectorAll(".e-list-group-item");
          for (var j = 0; j < listGroupItem.length; j++) {
            attr[j] = listGroupItem[j].innerText;
          }
          if (attr.indexOf(liCollections[i].innerText) > -1 && fields.groupBy) {
            for (var j = 0; j < listGroupItem.length; j++) {
              if (attr[j] === liCollections[i].innerText) {
                if (this.sortOrder === "None") {
                  this.ulElement.insertBefore(liCollections[i + 1], listGroupItem[j + 1]);
                } else {
                  this.ulElement.insertBefore(liCollections[i + 1], this.ulElement.childNodes[itemIndex]);
                }
                i = i + 1;
                break;
              }
            }
          } else {
            if (this.liCollections[index] && this.liCollections[index].parentNode) {
              this.liCollections[index].parentNode.insertBefore(liCollections[i], this.liCollections[index]);
            } else {
              if (itemIndex && this.getModuleName() === "listbox") {
                this.ulElement.insertBefore(liCollections[i], this.ulElement.childNodes[itemIndex + i]);
              } else {
                this.ulElement.appendChild(liCollections[i]);
              }
            }
          }
          var tempLi = [].slice.call(this.liCollections);
          tempLi.splice(index, 0, liCollections[i]);
          this.liCollections = tempLi;
          index += 1;
          if (this.getModuleName() === "multiselect") {
            this.updateDataList();
          }
        }
      }
      if (this.getModuleName() === "listbox" && this.isReact) {
        this.renderReactTemplates();
      }
      if (selectedItemValue || itemIndex === 0) {
        this.updateSelection();
      }
      this.addedNewItem = true;
    };
    DropDownBase2.prototype.isDisabledElement = function(li) {
      if (li && li.classList.contains("e-disabled")) {
        return true;
      }
      return false;
    };
    DropDownBase2.prototype.isDisabledItemByIndex = function(index) {
      if (this.fields.disabled && this.liCollections) {
        return this.isDisabledElement(this.liCollections[index]);
      }
      return false;
    };
    DropDownBase2.prototype.disableListItem = function(li) {
      li.classList.add("e-disabled");
      li.setAttribute("aria-disabled", "true");
      li.setAttribute("aria-selected", "false");
    };
    DropDownBase2.prototype.validationAttribute = function(target, hidden) {
      var name = target.getAttribute("name") ? target.getAttribute("name") : target.getAttribute("id");
      hidden.setAttribute("name", name);
      target.removeAttribute("name");
      var attributes2 = ["required", "aria-required", "form"];
      for (var i = 0; i < attributes2.length; i++) {
        if (!target.getAttribute(attributes2[i])) {
          continue;
        }
        var attr = target.getAttribute(attributes2[i]);
        hidden.setAttribute(attributes2[i], attr);
        target.removeAttribute(attributes2[i]);
      }
    };
    DropDownBase2.prototype.setZIndex = function() {
    };
    DropDownBase2.prototype.updateActionCompleteData = function(li, item, index) {
    };
    DropDownBase2.prototype.updateAddItemList = function(list, itemCount) {
    };
    DropDownBase2.prototype.updateDataList = function() {
    };
    DropDownBase2.prototype.getDataByValue = function(value) {
      if (!isNullOrUndefined(this.listData)) {
        var type = this.typeOfData(this.listData).typeof;
        if (type === "string" || type === "number" || type === "boolean") {
          for (var _i = 0, _a = this.listData; _i < _a.length; _i++) {
            var item = _a[_i];
            if (!isNullOrUndefined(item) && item === value) {
              return item;
            }
          }
        } else {
          for (var _b = 0, _c = this.listData; _b < _c.length; _b++) {
            var item = _c[_b];
            if (!isNullOrUndefined(item) && getValue(this.fields.value ? this.fields.value : "value", item) === value) {
              return item;
            }
          }
        }
      }
      return null;
    };
    DropDownBase2.prototype.destroy = function() {
      if (document) {
        EventHandler.remove(document, "scroll", this.updateGroupFixedHeader);
        if (document.body.contains(this.list)) {
          EventHandler.remove(this.list, "scroll", this.setFloatingHeader);
          if (!isNullOrUndefined(this.rippleFun)) {
            this.rippleFun();
          }
          detach(this.list);
        }
      }
      this.liCollections = null;
      this.ulElement = null;
      this.list = null;
      this.enableRtlElements = null;
      this.rippleFun = null;
      _super.prototype.destroy.call(this);
    };
    __decorate9([Complex({
      text: null,
      value: null,
      iconCss: null,
      groupBy: null,
      disabled: null
    }, FieldSettings)], DropDownBase2.prototype, "fields", void 0);
    __decorate9([Property(null)], DropDownBase2.prototype, "itemTemplate", void 0);
    __decorate9([Property(null)], DropDownBase2.prototype, "groupTemplate", void 0);
    __decorate9([Property("No records found")], DropDownBase2.prototype, "noRecordsTemplate", void 0);
    __decorate9([Property("Request failed")], DropDownBase2.prototype, "actionFailureTemplate", void 0);
    __decorate9([Property("None")], DropDownBase2.prototype, "sortOrder", void 0);
    __decorate9([Property([])], DropDownBase2.prototype, "dataSource", void 0);
    __decorate9([Property(null)], DropDownBase2.prototype, "query", void 0);
    __decorate9([Property("StartsWith")], DropDownBase2.prototype, "filterType", void 0);
    __decorate9([Property(true)], DropDownBase2.prototype, "ignoreCase", void 0);
    __decorate9([Property(1e3)], DropDownBase2.prototype, "zIndex", void 0);
    __decorate9([Property(false)], DropDownBase2.prototype, "ignoreAccent", void 0);
    __decorate9([Property()], DropDownBase2.prototype, "locale", void 0);
    __decorate9([Event2()], DropDownBase2.prototype, "actionBegin", void 0);
    __decorate9([Event2()], DropDownBase2.prototype, "actionComplete", void 0);
    __decorate9([Event2()], DropDownBase2.prototype, "actionFailure", void 0);
    __decorate9([Event2()], DropDownBase2.prototype, "select", void 0);
    __decorate9([Event2()], DropDownBase2.prototype, "dataBound", void 0);
    __decorate9([Event2()], DropDownBase2.prototype, "created", void 0);
    __decorate9([Event2()], DropDownBase2.prototype, "destroyed", void 0);
    DropDownBase2 = __decorate9([NotifyPropertyChanges], DropDownBase2);
    return DropDownBase2;
  }(Component)
);

// node_modules/@syncfusion/ej2-dropdowns/src/drop-down-list/drop-down-list.js
var __extends23 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate10 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var dropDownListClasses = {
  root: "e-dropdownlist",
  hover: dropDownBaseClasses.hover,
  selected: dropDownBaseClasses.selected,
  rtl: dropDownBaseClasses.rtl,
  li: dropDownBaseClasses.li,
  disable: dropDownBaseClasses.disabled,
  base: dropDownBaseClasses.root,
  focus: dropDownBaseClasses.focus,
  content: dropDownBaseClasses.content,
  input: "e-input-group",
  inputFocus: "e-input-focus",
  icon: "e-input-group-icon e-ddl-icon",
  iconAnimation: "e-icon-anim",
  value: "e-input-value",
  device: "e-ddl-device",
  backIcon: "e-input-group-icon e-back-icon e-icons",
  filterBarClearIcon: "e-input-group-icon e-clear-icon e-icons",
  filterInput: "e-input-filter",
  resizeIcon: "e-resizer-right e-icons",
  filterParent: "e-filter-parent",
  mobileFilter: "e-ddl-device-filter",
  footer: "e-ddl-footer",
  header: "e-ddl-header",
  clearIcon: "e-clear-icon",
  clearIconHide: "e-clear-icon-hide",
  popupFullScreen: "e-popup-full-page",
  disableIcon: "e-ddl-disable-icon",
  hiddenElement: "e-ddl-hidden",
  virtualList: "e-list-item e-virtual-list"
};
var inputObject = {
  container: null,
  buttons: []
};
var DropDownList = (
  /** @class */
  function(_super) {
    __extends23(DropDownList2, _super);
    function DropDownList2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.isListSearched = false;
      _this.preventChange = false;
      _this.isTouched = false;
      _this.isFocused = false;
      _this.autoFill = false;
      _this.isUpdateHeaderHeight = false;
      _this.isUpdateFooterHeight = false;
      _this.isReactTemplateUpdate = false;
      return _this;
    }
    DropDownList2.prototype.preRender = function() {
      this.valueTempElement = null;
      this.element.style.opacity = "0";
      this.initializeData();
      _super.prototype.preRender.call(this);
      this.activeIndex = this.index;
      this.queryString = "";
    };
    DropDownList2.prototype.initializeData = function() {
      this.isPopupOpen = false;
      this.isDocumentClick = false;
      this.isInteracted = false;
      this.isFilterFocus = false;
      this.beforePopupOpen = false;
      this.initial = true;
      this.initialRemoteRender = false;
      this.isNotSearchList = false;
      this.isTyped = false;
      this.isSelected = false;
      this.preventFocus = false;
      this.preventAutoFill = false;
      this.isValidKey = false;
      this.typedString = "";
      this.isEscapeKey = false;
      this.isPreventBlur = false;
      this.isTabKey = false;
      this.actionCompleteData = {
        isUpdated: false
      };
      this.actionData = {
        isUpdated: false
      };
      this.prevSelectPoints = {};
      this.isSelectCustom = false;
      this.isDropDownClick = false;
      this.preventAltUp = false;
      this.isCustomFilter = false;
      this.isSecondClick = false;
      this.previousValue = null;
      this.keyConfigure = {
        tab: "tab",
        enter: "13",
        escape: "27",
        end: "35",
        home: "36",
        down: "40",
        up: "38",
        pageUp: "33",
        pageDown: "34",
        open: "alt+40",
        close: "shift+tab",
        hide: "alt+38",
        space: "32"
      };
      this.viewPortInfo = {
        currentPageNumber: null,
        direction: null,
        sentinelInfo: {},
        offsets: {},
        startIndex: 0,
        endIndex: this.itemCount
      };
    };
    DropDownList2.prototype.setZIndex = function() {
      if (this.popupObj) {
        this.popupObj.setProperties({
          "zIndex": this.zIndex
        });
      }
    };
    DropDownList2.prototype.requiredModules = function() {
      var modules = [];
      if (this.enableVirtualization) {
        modules.push({
          args: [this],
          member: "VirtualScroll"
        });
      }
      return modules;
    };
    DropDownList2.prototype.renderList = function(e, isEmptyData) {
      _super.prototype.render.call(this, e, isEmptyData);
      if (!(this.dataSource instanceof DataManager)) {
        this.totalItemCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;
      }
      if (this.enableVirtualization && this.isFiltering() && this.getModuleName() === "combobox") {
        this.UpdateSkeleton();
        this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li);
        this.ulElement = this.list.querySelector("ul");
      }
      this.unWireListEvents();
      this.wireListEvents();
    };
    DropDownList2.prototype.floatLabelChange = function() {
      if (this.getModuleName() === "dropdownlist" && this.floatLabelType === "Auto") {
        var floatElement = this.inputWrapper.container.querySelector(".e-float-text");
        if (this.inputElement.value !== "" || this.isInteracted) {
          classList(floatElement, ["e-label-top"], ["e-label-bottom"]);
        } else {
          classList(floatElement, ["e-label-bottom"], ["e-label-top"]);
        }
      }
    };
    DropDownList2.prototype.resetHandler = function(e) {
      e.preventDefault();
      this.clearAll(e);
      if (this.enableVirtualization) {
        this.list.scrollTop = 0;
        this.virtualListInfo = null;
        this.previousStartIndex = 0;
        this.previousEndIndex = 0;
      }
    };
    DropDownList2.prototype.resetFocusElement = function() {
      this.removeHover();
      this.removeSelection();
      this.removeFocus();
      this.list.scrollTop = 0;
      if (this.getModuleName() !== "autocomplete" && !isNullOrUndefined(this.ulElement)) {
        var li = this.fields.disabled ? this.ulElement.querySelector("." + dropDownListClasses.li + ":not(.e-disabled)") : this.ulElement.querySelector("." + dropDownListClasses.li);
        if (this.enableVirtualization) {
          li = this.liCollections[this.skeletonCount];
        }
        if (li) {
          li.classList.add(dropDownListClasses.focus);
        }
      }
    };
    DropDownList2.prototype.clearAll = function(e, properties) {
      this.previousItemData = !isNullOrUndefined(this.itemData) ? this.itemData : null;
      if (isNullOrUndefined(properties) || !isNullOrUndefined(properties) && (isNullOrUndefined(properties.dataSource) || !(properties.dataSource instanceof DataManager) && properties.dataSource.length === 0)) {
        this.isActive = true;
        this.resetSelection(properties);
      }
      var dataItem = this.getItemData();
      if (!this.allowObjectBinding && this.previousValue === dataItem.value || this.allowObjectBinding && this.previousValue && this.isObjectInArray(this.previousValue, [this.allowCustom ? this.value ? this.value : dataItem : dataItem.value ? this.getDataByValue(dataItem.value) : dataItem])) {
        this.checkAndResetCache();
        if (this.enableVirtualization && this.list) {
          this.updateInitialData();
        }
        return;
      }
      this.onChangeEvent(e);
      this.checkAndResetCache();
      if (this.enableVirtualization) {
        this.updateInitialData();
      }
    };
    DropDownList2.prototype.resetSelection = function(properties) {
      if (this.list) {
        if (!isNullOrUndefined(properties) && (isNullOrUndefined(properties.dataSource) || !(properties.dataSource instanceof DataManager) && properties.dataSource.length === 0)) {
          this.selectedLI = null;
          this.actionCompleteData.isUpdated = false;
          this.actionCompleteData.ulElement = null;
          this.actionCompleteData.list = null;
          this.resetList(properties.dataSource);
        } else {
          if (this.allowFiltering && this.getModuleName() !== "autocomplete" && !isNullOrUndefined(this.actionCompleteData.ulElement) && !isNullOrUndefined(this.actionCompleteData.list) && this.actionCompleteData.list.length > 0) {
            this.onActionComplete(this.actionCompleteData.ulElement.cloneNode(true), this.actionCompleteData.list);
          }
          this.resetFocusElement();
        }
      }
      if (!isNullOrUndefined(this.hiddenElement)) {
        this.hiddenElement.innerHTML = "";
      }
      if (!isNullOrUndefined(this.inputElement)) {
        this.inputElement.value = "";
      }
      this.value = null;
      this.itemData = null;
      this.text = null;
      this.index = null;
      this.activeIndex = null;
      this.item = null;
      this.queryString = "";
      if (this.valueTempElement) {
        detach(this.valueTempElement);
        this.inputElement.style.display = "block";
        this.valueTempElement = null;
      }
      this.setSelection(null, null);
      this.isSelectCustom = false;
      this.updateIconState();
      this.cloneElements();
    };
    DropDownList2.prototype.setHTMLAttributes = function() {
      if (Object.keys(this.htmlAttributes).length) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var htmlAttr = _a[_i];
          if (htmlAttr === "class") {
            var updatedClassValue = this.htmlAttributes["" + htmlAttr].replace(/\s+/g, " ").trim();
            if (updatedClassValue !== "") {
              addClass([this.inputWrapper.container], updatedClassValue.split(" "));
            }
          } else if (htmlAttr === "disabled" && this.htmlAttributes["" + htmlAttr] === "disabled") {
            this.enabled = false;
            this.setEnable();
          } else if (htmlAttr === "readonly" && !isNullOrUndefined(this.htmlAttributes["" + htmlAttr])) {
            this.readonly = true;
            this.dataBind();
          } else if (htmlAttr === "style") {
            this.inputWrapper.container.setAttribute("style", this.htmlAttributes["" + htmlAttr]);
          } else if (htmlAttr === "aria-label") {
            if ((this.getModuleName() === "autocomplete" || this.getModuleName() === "combobox") && !this.readonly) {
              this.inputElement.setAttribute("aria-label", this.htmlAttributes["" + htmlAttr]);
            } else if (this.getModuleName() === "dropdownlist") {
              this.inputWrapper.container.setAttribute("aria-label", this.htmlAttributes["" + htmlAttr]);
            }
          } else {
            var defaultAttr = ["title", "id", "placeholder", "role", "autocomplete", "autocapitalize", "spellcheck", "minlength", "maxlength"];
            var validateAttr = ["name", "required"];
            if (this.getModuleName() === "autocomplete" || this.getModuleName() === "combobox") {
              defaultAttr.push("tabindex");
            }
            if (validateAttr.indexOf(htmlAttr) > -1 || htmlAttr.indexOf("data") === 0) {
              this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
            } else if (defaultAttr.indexOf(htmlAttr) > -1) {
              if (htmlAttr === "placeholder") {
                Input.setPlaceholder(this.htmlAttributes["" + htmlAttr], this.inputElement);
              } else {
                this.inputElement.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
              }
            } else {
              this.inputWrapper.container.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
            }
          }
        }
      }
      if (this.getModuleName() === "autocomplete" || this.getModuleName() === "combobox") {
        this.inputWrapper.container.removeAttribute("tabindex");
      }
    };
    DropDownList2.prototype.getAriaAttributes = function() {
      return {
        "aria-disabled": "false",
        "role": "combobox",
        "aria-expanded": "false",
        "aria-live": "polite",
        "aria-labelledby": this.hiddenElement.id
      };
    };
    DropDownList2.prototype.setEnableRtl = function() {
      if (!isNullOrUndefined(this.inputElement) && !isNullOrUndefined(this.inputElement.parentElement)) {
        Input.setEnableRtl(this.enableRtl, [this.inputElement.parentElement]);
      }
      if (this.popupObj) {
        this.popupObj.enableRtl = this.enableRtl;
        this.popupObj.dataBind();
      }
    };
    DropDownList2.prototype.setEnable = function() {
      Input.setEnabled(this.enabled, this.inputElement);
      if (this.enabled) {
        removeClass([this.inputWrapper.container], dropDownListClasses.disable);
        this.inputElement.setAttribute("aria-disabled", "false");
        this.targetElement().setAttribute("tabindex", this.tabIndex);
        if (this.inputWrapper && this.inputWrapper.container) {
          this.inputWrapper.container.setAttribute("aria-disabled", "false");
          this.inputWrapper.container.removeAttribute("disabled");
        }
      } else {
        this.hidePopup();
        addClass([this.inputWrapper.container], dropDownListClasses.disable);
        this.inputElement.setAttribute("aria-disabled", "true");
        this.targetElement().tabIndex = -1;
        if (this.inputWrapper && this.inputWrapper.container) {
          this.inputWrapper.container.setAttribute("aria-disabled", "true");
          this.inputWrapper.container.setAttribute("disabled", "");
        }
      }
    };
    DropDownList2.prototype.getPersistData = function() {
      return this.addOnPersist(["value"]);
    };
    DropDownList2.prototype.getLocaleName = function() {
      return "drop-down-list";
    };
    DropDownList2.prototype.preventTabIndex = function(element) {
      if (this.getModuleName() === "dropdownlist") {
        element.tabIndex = -1;
      }
    };
    DropDownList2.prototype.targetElement = function() {
      return !isNullOrUndefined(this.inputWrapper) ? this.inputWrapper.container : null;
    };
    DropDownList2.prototype.getNgDirective = function() {
      return "EJS-DROPDOWNLIST";
    };
    DropDownList2.prototype.getElementByText = function(text) {
      return this.getElementByValue(this.getValueByText(text));
    };
    DropDownList2.prototype.getElementByValue = function(value) {
      var item;
      var listItems = this.getItems();
      for (var _i = 0, listItems_1 = listItems; _i < listItems_1.length; _i++) {
        var liItem = listItems_1[_i];
        if (this.getFormattedValue(liItem.getAttribute("data-value")) === value) {
          item = liItem;
          break;
        }
      }
      return item;
    };
    DropDownList2.prototype.initValue = function() {
      this.viewPortInfo.startIndex = this.virtualItemStartIndex = 0;
      this.viewPortInfo.endIndex = this.virtualItemEndIndex = this.itemCount;
      this.renderList();
      if (this.dataSource instanceof DataManager) {
        this.initialRemoteRender = true;
      } else {
        this.updateValues();
      }
    };
    DropDownList2.prototype.isDisableItemValue = function(value) {
      if (typeof value === "object") {
        var objectValue = JSON.parse(JSON.stringify(value))[this.fields.value];
        return this.isDisabledItemByIndex(this.getIndexByValue(objectValue));
      }
      return this.isDisabledItemByIndex(this.getIndexByValue(value));
    };
    DropDownList2.prototype.updateValues = function() {
      if (this.fields.disabled) {
        if (this.value != null) {
          this.value = !this.isDisableItemValue(this.value) ? this.value : null;
        }
        if (this.text != null) {
          this.text = !this.isDisabledItemByIndex(this.getIndexByValue(this.getValueByText(this.text))) ? this.text : null;
        }
        if (this.index != null) {
          this.index = !this.isDisabledItemByIndex(this.index) ? this.index : null;
          this.activeIndex = this.index;
        }
      }
      this.selectedValueInfo = this.viewPortInfo;
      if (!isNullOrUndefined(this.value)) {
        var value = this.allowObjectBinding && !isNullOrUndefined(this.value) ? getValue(this.fields.value ? this.fields.value : "", this.value) : this.value;
        this.setSelection(this.getElementByValue(value), null);
      } else if (this.text && isNullOrUndefined(this.value)) {
        var element = this.getElementByText(this.text);
        if (isNullOrUndefined(element)) {
          this.setProperties({
            text: null
          });
          return;
        } else {
          this.setSelection(element, null);
        }
      } else {
        this.setSelection(this.liCollections[this.activeIndex], null);
      }
      this.setHiddenValue();
      Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
    };
    DropDownList2.prototype.onBlurHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      var target = e.relatedTarget;
      var currentTarget = e.target;
      var isPreventBlur = this.isPreventBlur;
      this.isPreventBlur = false;
      if (isPreventBlur && !this.isDocumentClick && this.isPopupOpen && (!isNullOrUndefined(currentTarget) || !this.isFilterLayout() && isNullOrUndefined(target))) {
        if (this.getModuleName() === "dropdownlist" && this.allowFiltering && this.isPopupOpen) {
          this.filterInput.focus();
        } else {
          this.targetElement().focus();
        }
        return;
      }
      if (this.isDocumentClick || !isNullOrUndefined(this.popupObj) && document.body.contains(this.popupObj.element) && this.popupObj.element.classList.contains(dropDownListClasses.mobileFilter)) {
        if (!this.beforePopupOpen) {
          this.isDocumentClick = false;
        }
        return;
      }
      if (this.getModuleName() === "dropdownlist" && !this.isFilterFocus && target !== this.inputElement && (document.activeElement !== target || document.activeElement === target && currentTarget.classList.contains(dropDownListClasses.inputFocus)) || isNullOrUndefined(target) && this.getModuleName() === "dropdownlist" && this.allowFiltering && currentTarget !== this.inputWrapper.container || this.getModuleName() !== "dropdownlist" && !this.inputWrapper.container.contains(target) || this.isTabKey) {
        this.isDocumentClick = this.isPopupOpen ? true : false;
        this.focusOutAction(e);
        this.isTabKey = false;
      }
      if (this.isRequested && !this.isPopupOpen && !this.isPreventBlur) {
        this.isActive = false;
        this.beforePopupOpen = false;
      }
      this.isFocused = false;
    };
    DropDownList2.prototype.focusOutAction = function(e) {
      this.isInteracted = false;
      this.focusOut(e);
      this.onFocusOut(e);
    };
    DropDownList2.prototype.onFocusOut = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.isSelected) {
        this.isSelectCustom = false;
        this.onChangeEvent(e);
      }
      this.floatLabelChange();
      this.dispatchEvent(this.hiddenElement, "change");
      if (this.getModuleName() === "dropdownlist" && this.element.tagName !== "INPUT") {
        this.dispatchEvent(this.inputElement, "blur");
      }
      if (this.inputWrapper.clearButton) {
        addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
      }
      this.trigger("blur");
    };
    DropDownList2.prototype.onFocus = function(e) {
      if (!this.isInteracted) {
        this.isInteracted = true;
        var args = {
          isInteracted: e ? true : false,
          event: e
        };
        this.trigger("focus", args);
      }
      this.updateIconState();
      this.isFocused = true;
    };
    DropDownList2.prototype.resizingWireEvent = function() {
      EventHandler.add(document, "mousemove", this.resizePopup, this);
      EventHandler.add(document, "mouseup", this.stopResizing, this);
      EventHandler.add(document, "touchmove", this.resizePopup, this);
      EventHandler.add(document, "touchend", this.stopResizing, this);
    };
    DropDownList2.prototype.resizingUnWireEvent = function() {
      EventHandler.remove(document, "mousemove", this.resizePopup);
      EventHandler.remove(document, "mouseup", this.stopResizing);
      EventHandler.remove(document, "touchmove", this.resizePopup);
      EventHandler.remove(document, "touchend", this.stopResizing);
    };
    DropDownList2.prototype.resetValueHandler = function(e) {
      var formElement = closest(this.inputElement, "form");
      if (formElement && e.target === formElement) {
        var val = this.element.tagName === this.getNgDirective() ? null : this.inputElement.getAttribute("value");
        this.text = val;
      }
    };
    DropDownList2.prototype.wireEvent = function() {
      EventHandler.add(this.inputWrapper.container, "mousedown", this.dropDownClick, this);
      EventHandler.add(this.inputWrapper.container, "focus", this.focusIn, this);
      EventHandler.add(this.inputWrapper.container, "keypress", this.onSearch, this);
      EventHandler.add(window, "resize", this.windowResize, this);
      this.bindCommonEvent();
    };
    DropDownList2.prototype.bindCommonEvent = function() {
      EventHandler.add(this.targetElement(), "blur", this.onBlurHandler, this);
      var formElement = closest(this.inputElement, "form");
      if (formElement) {
        EventHandler.add(formElement, "reset", this.resetValueHandler, this);
      }
      if (!Browser.isDevice) {
        this.keyboardModule = new KeyboardEvents(this.targetElement(), {
          keyAction: this.keyActionHandler.bind(this),
          keyConfigs: this.keyConfigure,
          eventName: "keydown"
        });
      } else {
        this.keyboardModule = new KeyboardEvents(this.targetElement(), {
          keyAction: this.mobileKeyActionHandler.bind(this),
          keyConfigs: this.keyConfigure,
          eventName: "keydown"
        });
      }
      this.bindClearEvent();
    };
    DropDownList2.prototype.windowResize = function() {
      if (this.isPopupOpen) {
        this.popupObj.refreshPosition(this.inputWrapper.container);
      }
    };
    DropDownList2.prototype.bindClearEvent = function() {
      if (this.showClearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown", this.resetHandler, this);
      }
    };
    DropDownList2.prototype.unBindCommonEvent = function() {
      if (!isNullOrUndefined(this.inputWrapper) && this.targetElement()) {
        EventHandler.remove(this.targetElement(), "blur", this.onBlurHandler);
      }
      var formElement = this.inputElement && closest(this.inputElement, "form");
      if (formElement) {
        EventHandler.remove(formElement, "reset", this.resetValueHandler);
      }
      if (!Browser.isDevice) {
        this.keyboardModule.destroy();
      }
      if (this.showClearButton) {
        EventHandler.remove(this.inputWrapper.clearButton, "mousedown", this.resetHandler);
      }
    };
    DropDownList2.prototype.updateIconState = function() {
      if (this.showClearButton) {
        if (this.inputElement.value !== "" && !this.readonly) {
          removeClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
        } else {
          addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
        }
      }
    };
    DropDownList2.prototype.wireListEvents = function() {
      if (!isNullOrUndefined(this.list)) {
        EventHandler.add(this.list, "click", this.onMouseClick, this);
        EventHandler.add(this.list, "mouseover", this.onMouseOver, this);
        EventHandler.add(this.list, "mouseout", this.onMouseLeave, this);
      }
    };
    DropDownList2.prototype.onSearch = function(e) {
      if (e.charCode !== 32 && e.charCode !== 13) {
        if (this.list === void 0) {
          this.renderList();
        }
        this.searchKeyEvent = e;
        this.onServerIncrementalSearch(e);
      }
    };
    DropDownList2.prototype.onServerIncrementalSearch = function(e) {
      if (!this.isRequested && !isNullOrUndefined(this.list) && !isNullOrUndefined(this.list.querySelector("li")) && this.enabled && !this.readonly) {
        this.incrementalSearch(e);
      }
    };
    DropDownList2.prototype.startResizing = function(event2) {
      this.isResizing = true;
      this.trigger("resizeStart", event2);
      var clientX = event2 instanceof MouseEvent ? event2.clientX : event2.touches[0].clientX;
      var clientY = event2 instanceof MouseEvent ? event2.clientY : event2.touches[0].clientY;
      if (this.list && this.list.parentElement) {
        this.originalWidth = this.list.parentElement.offsetWidth;
        this.originalHeight = this.list.parentElement.offsetHeight;
        this.originalMouseX = clientX;
        this.originalMouseY = clientY;
      }
      this.resizingWireEvent();
      if (event2) {
        event2.preventDefault();
      }
    };
    DropDownList2.prototype.resizePopup = function(event2) {
      if (!this.isResizing) {
        return;
      }
      this.trigger("resizing", event2);
      var clientX = event2 instanceof MouseEvent ? event2.clientX : event2.touches[0].clientX;
      var clientY = event2 instanceof MouseEvent ? event2.clientY : event2.touches[0].clientY;
      var dx = clientX - this.originalMouseX;
      var dy = clientY - this.originalMouseY;
      if (this.list && this.list.parentElement) {
        var minWidth = parseInt(window.getComputedStyle(this.list.parentElement).minWidth, 10);
        var minHeight = parseInt(window.getComputedStyle(this.list.parentElement).minHeight, 10);
        minWidth = minWidth || 100;
        minHeight = minHeight || 120;
        this.resizeWidth = Math.max(this.originalWidth + dx, minWidth);
        this.resizeHeight = Math.max(this.originalHeight + dy, minHeight);
        this.list.parentElement.style.width = this.resizeWidth + "px";
        this.list.parentElement.style.height = this.resizeHeight + "px";
        this.list.parentElement.style.maxHeight = this.resizeHeight + "px";
        this.list.style.maxHeight = this.resizeHeight + "px";
        if (this.fixedHeaderElement && this.ulElement) {
          this.fixedHeaderElement.style.width = this.ulElement.offsetWidth + "px";
        }
      }
      if (event2) {
        event2.preventDefault();
      }
    };
    DropDownList2.prototype.stopResizing = function(event2) {
      if (this.isResizing) {
        this.isResizing = false;
        this.trigger("resizeStop", event2);
        this.resizingUnWireEvent();
      }
      if (event2) {
        event2.preventDefault();
      }
    };
    DropDownList2.prototype.onMouseClick = function(e) {
      var target = e.target;
      this.keyboardEvent = null;
      var li = closest(target, "." + dropDownBaseClasses.li);
      if (!this.isValidLI(li) || this.isDisabledElement(li)) {
        return;
      }
      this.setSelection(li, e);
      if (Browser.isDevice && this.isFilterLayout()) {
        history.back();
      } else {
        var delay = 100;
        this.closePopup(delay, e);
      }
    };
    DropDownList2.prototype.onMouseOver = function(e) {
      var currentLi = closest(e.target, "." + dropDownBaseClasses.li);
      this.setHover(currentLi);
    };
    DropDownList2.prototype.setHover = function(li) {
      if (this.enabled && this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.hover)) {
        this.removeHover();
        addClass([li], dropDownBaseClasses.hover);
      }
    };
    DropDownList2.prototype.onMouseLeave = function() {
      this.removeHover();
    };
    DropDownList2.prototype.removeHover = function() {
      if (this.list) {
        var hoveredItem = this.list.querySelectorAll("." + dropDownBaseClasses.hover);
        if (hoveredItem && hoveredItem.length) {
          removeClass(hoveredItem, dropDownBaseClasses.hover);
        }
      }
    };
    DropDownList2.prototype.isValidLI = function(li) {
      return li && li.hasAttribute("role") && li.getAttribute("role") === "option";
    };
    DropDownList2.prototype.updateIncrementalItemIndex = function(startIndex, endIndex) {
      this.incrementalStartIndex = startIndex;
      this.incrementalEndIndex = endIndex;
    };
    DropDownList2.prototype.incrementalSearch = function(e) {
      if (this.liCollections.length > 0) {
        if (this.enableVirtualization) {
          var updatingincrementalindex = false;
          var queryStringUpdated = false;
          var activeElement = this.ulElement.getElementsByClassName("e-active")[0];
          var currentValue = activeElement ? activeElement.textContent : null;
          if (this.incrementalQueryString === "") {
            this.incrementalQueryString = String.fromCharCode(e.charCode);
            this.incrementalPreQueryString = this.incrementalQueryString;
          } else if (String.fromCharCode(e.charCode).toLocaleLowerCase() === this.incrementalPreQueryString.toLocaleLowerCase()) {
            queryStringUpdated = true;
          } else {
            this.incrementalQueryString = String.fromCharCode(e.charCode);
          }
          if (this.viewPortInfo.endIndex >= this.incrementalEndIndex && this.incrementalEndIndex <= this.totalItemCount || this.incrementalEndIndex === 0) {
            updatingincrementalindex = true;
            this.incrementalStartIndex = this.incrementalEndIndex;
            if (this.incrementalEndIndex === 0) {
              this.incrementalEndIndex = 100 > this.totalItemCount ? this.totalItemCount : 100;
            } else {
              this.incrementalEndIndex = this.incrementalEndIndex + 100 > this.totalItemCount ? this.totalItemCount : this.incrementalEndIndex + 100;
            }
            this.updateIncrementalInfo(this.incrementalStartIndex, this.incrementalEndIndex);
            updatingincrementalindex = true;
          }
          if (this.viewPortInfo.startIndex !== 0 || updatingincrementalindex) {
            this.updateIncrementalView(0, this.itemCount);
          }
          var li = incrementalSearch(e.charCode, this.incrementalLiCollections, this.activeIndex, true, this.element.id, queryStringUpdated, currentValue, true);
          while (isNullOrUndefined(li) && this.incrementalEndIndex < this.totalItemCount) {
            this.updateIncrementalItemIndex(this.incrementalEndIndex, this.incrementalEndIndex + 100 > this.totalItemCount ? this.totalItemCount : this.incrementalEndIndex + 100);
            this.updateIncrementalInfo(this.incrementalStartIndex, this.incrementalEndIndex);
            updatingincrementalindex = true;
            if (this.viewPortInfo.startIndex !== 0 || updatingincrementalindex) {
              this.updateIncrementalView(0, this.itemCount);
            }
            li = incrementalSearch(e.charCode, this.incrementalLiCollections, 0, true, this.element.id, queryStringUpdated, currentValue, true, true);
            if (!isNullOrUndefined(li)) {
              break;
            }
            if (isNullOrUndefined(li) && this.incrementalEndIndex >= this.totalItemCount) {
              this.updateIncrementalItemIndex(0, 100 > this.totalItemCount ? this.totalItemCount : 100);
              break;
            }
          }
          if (isNullOrUndefined(li) && this.incrementalEndIndex >= this.totalItemCount) {
            this.updateIncrementalItemIndex(0, 100 > this.totalItemCount ? this.totalItemCount : 100);
            this.updateIncrementalInfo(this.incrementalStartIndex, this.incrementalEndIndex);
            updatingincrementalindex = true;
            if (this.viewPortInfo.startIndex !== 0 || updatingincrementalindex) {
              this.updateIncrementalView(0, this.itemCount);
            }
            li = incrementalSearch(e.charCode, this.incrementalLiCollections, 0, true, this.element.id, queryStringUpdated, currentValue, true, true);
          }
          var index = li && this.getIndexByValue(li.getAttribute("data-value"));
          if (!index) {
            for (var i = 0; i < this.incrementalLiCollections.length; i++) {
              if (!isNullOrUndefined(li) && !isNullOrUndefined(li.getAttribute("data-value")) && this.incrementalLiCollections[i].getAttribute("data-value") === li.getAttribute("data-value").toString()) {
                index = i;
                index = this.incrementalStartIndex + index;
                break;
              }
            }
          } else {
            index = index - this.skeletonCount;
          }
          if (index) {
            if (!(this.viewPortInfo.startIndex >= index) || !(index >= this.viewPortInfo.endIndex)) {
              var startIndex = index - (this.itemCount / 2 - 2) > 0 ? index - (this.itemCount / 2 - 2) : 0;
              var endIndex = this.viewPortInfo.startIndex + this.itemCount > this.totalItemCount ? this.totalItemCount : this.viewPortInfo.startIndex + this.itemCount;
              this.updateIncrementalView(startIndex, endIndex);
            }
          }
          if (!isNullOrUndefined(li)) {
            var index_1 = this.getIndexByValue(li.getAttribute("data-value")) - this.skeletonCount;
            if (index_1 > this.itemCount / 2) {
              var startIndex = this.viewPortInfo.startIndex + (this.itemCount / 2 - 2) < this.totalItemCount ? this.viewPortInfo.startIndex + (this.itemCount / 2 - 2) : this.totalItemCount;
              var endIndex = this.viewPortInfo.startIndex + this.itemCount > this.totalItemCount ? this.totalItemCount : this.viewPortInfo.startIndex + this.itemCount;
              this.updateIncrementalView(startIndex, endIndex);
            }
            li = this.getElementByValue(li.getAttribute("data-value"));
            this.setSelection(li, e);
            this.setScrollPosition();
            this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
            if (this.enableVirtualization && !this.fields.groupBy) {
              var selectedLiOffsetTop = this.virtualListInfo && this.virtualListInfo.startIndex ? this.selectedLI.offsetTop + this.virtualListInfo.startIndex * this.selectedLI.offsetHeight : this.selectedLI.offsetTop;
              this.list.scrollTop = selectedLiOffsetTop - this.list.querySelectorAll(".e-virtual-list").length * this.selectedLI.offsetHeight;
            }
            this.incrementalPreQueryString = this.incrementalQueryString;
          } else {
            this.updateIncrementalView(0, this.itemCount);
            this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
            this.list.scrollTop = 0;
          }
        } else {
          var li = void 0;
          if (this.fields.disabled) {
            var enableLiCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li + ":not(.e-disabled)");
            li = incrementalSearch(e.charCode, enableLiCollections, this.activeIndex, true, this.element.id);
          } else {
            li = incrementalSearch(e.charCode, this.liCollections, this.activeIndex, true, this.element.id);
          }
          if (!isNullOrUndefined(li)) {
            this.setSelection(li, e);
            this.setScrollPosition();
          }
        }
      }
    };
    DropDownList2.prototype.hideSpinner = function() {
      if (!isNullOrUndefined(this.spinnerElement)) {
        hideSpinner(this.spinnerElement);
        removeClass([this.spinnerElement], dropDownListClasses.disableIcon);
        this.spinnerElement.innerHTML = "";
        this.spinnerElement = null;
      }
    };
    DropDownList2.prototype.showSpinner = function() {
      if (isNullOrUndefined(this.spinnerElement)) {
        this.spinnerElement = Browser.isDevice && !isNullOrUndefined(this.filterInputObj) && this.filterInputObj.buttons[1] || !isNullOrUndefined(this.filterInputObj) && this.filterInputObj.buttons[0] || this.inputWrapper.buttons[0];
        addClass([this.spinnerElement], dropDownListClasses.disableIcon);
        createSpinner({
          target: this.spinnerElement,
          width: Browser.isDevice ? "16px" : "14px"
        }, this.createElement);
        showSpinner(this.spinnerElement);
      }
    };
    DropDownList2.prototype.keyActionHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      this.keyboardEvent = e;
      if (this.isPreventKeyAction && this.enableVirtualization) {
        e.preventDefault();
      }
      var preventAction = e.action === "pageUp" || e.action === "pageDown";
      var preventHomeEnd = this.getModuleName() !== "dropdownlist" && (e.action === "home" || e.action === "end");
      this.isEscapeKey = e.action === "escape";
      this.isTabKey = !this.isPopupOpen && e.action === "tab";
      var isNavigation = e.action === "down" || e.action === "up" || e.action === "pageUp" || e.action === "pageDown" || e.action === "home" || e.action === "end";
      if ((this.isEditTextBox() || preventAction || preventHomeEnd) && !this.isPopupOpen) {
        return;
      }
      if (!this.readonly) {
        var isTabAction = e.action === "tab" || e.action === "close";
        if (isNullOrUndefined(this.list) && !this.isRequested && !isTabAction && e.action !== "escape") {
          this.searchKeyEvent = e;
          if (!this.enableVirtualization || this.enableVirtualization && this.getModuleName() !== "autocomplete" && e.type !== "mousedown" && (e.keyCode === 40 || e.keyCode === 38)) {
            this.renderList(e);
            this.UpdateSkeleton();
            this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li);
            this.ulElement = this.list.querySelector("ul");
          }
        }
        if (isNullOrUndefined(this.list) || !isNullOrUndefined(this.liCollections) && isNavigation && this.liCollections.length === 0 || this.isRequested) {
          return;
        }
        if (isTabAction && this.getModuleName() !== "autocomplete" && this.isPopupOpen || e.action === "escape") {
          e.preventDefault();
        }
        this.isSelected = e.action === "escape" ? false : this.isSelected;
        this.isTyped = isNavigation || e.action === "escape" ? false : this.isTyped;
        switch (e.action) {
          case "down":
          case "up":
            this.updateUpDownAction(e);
            break;
          case "pageUp":
            this.pageUpSelection(this.activeIndex - this.getPageCount(), e);
            e.preventDefault();
            break;
          case "pageDown":
            this.pageDownSelection(this.activeIndex + this.getPageCount(), e);
            e.preventDefault();
            break;
          case "home":
            this.isMouseScrollAction = true;
            this.updateHomeEndAction(e);
            break;
          case "end":
            this.isMouseScrollAction = true;
            this.updateHomeEndAction(e);
            break;
          case "space":
            if (this.getModuleName() === "dropdownlist") {
              if (!this.beforePopupOpen) {
                this.showPopup();
                e.preventDefault();
              }
            }
            break;
          case "open":
            this.showPopup(e);
            break;
          case "hide":
            this.preventAltUp = this.isPopupOpen;
            this.hidePopup(e);
            this.focusDropDown(e);
            break;
          case "enter":
            this.selectCurrentItem(e);
            break;
          case "tab":
            this.selectCurrentValueOnTab(e);
            break;
          case "escape":
          case "close":
            if (this.isPopupOpen) {
              this.hidePopup(e);
              this.focusDropDown(e);
            }
            break;
        }
      }
    };
    DropDownList2.prototype.updateUpDownAction = function(e, isVirtualKeyAction) {
      if (this.fields.disabled && this.list && this.list.querySelectorAll(".e-list-item:not(.e-disabled)").length === 0) {
        return;
      }
      if (this.allowFiltering && !this.enableVirtualization && this.getModuleName() !== "autocomplete") {
        var value = this.getItemData().value;
        if (isNullOrUndefined(value)) {
          value = "null";
        }
        var filterIndex = this.getIndexByValue(value);
        if (!isNullOrUndefined(filterIndex)) {
          this.activeIndex = filterIndex;
        }
      }
      var focusEle = this.list.querySelector("." + dropDownListClasses.focus);
      if (this.isSelectFocusItem(focusEle) && !isVirtualKeyAction) {
        this.setSelection(focusEle, e);
        if (this.enableVirtualization) {
          var selectedLiOffsetTop = this.virtualListInfo && this.virtualListInfo.startIndex ? this.selectedLI.offsetTop + this.virtualListInfo.startIndex * this.selectedLI.offsetHeight : this.selectedLI.offsetTop;
          if (this.fields.groupBy) {
            selectedLiOffsetTop = this.virtualListInfo && this.virtualListInfo.startIndex === 0 ? this.selectedLI.offsetHeight - selectedLiOffsetTop : selectedLiOffsetTop - this.selectedLI.offsetHeight;
          }
          this.list.scrollTop = selectedLiOffsetTop - this.list.querySelectorAll(".e-virtual-list").length * this.selectedLI.offsetHeight;
        }
      } else if (!isNullOrUndefined(this.liCollections)) {
        var virtualIndex = this.activeIndex;
        var index = e.action === "down" ? this.activeIndex + 1 : this.activeIndex - 1;
        index = isVirtualKeyAction ? virtualIndex : index;
        var startIndex = 0;
        if (this.getModuleName() === "autocomplete") {
          startIndex = e.action === "down" && isNullOrUndefined(this.activeIndex) ? 0 : this.liCollections.length - 1;
          index = index < 0 ? this.liCollections.length - 1 : index === this.liCollections.length ? 0 : index;
        }
        var nextItem = void 0;
        if (this.getModuleName() !== "autocomplete" || this.getModuleName() === "autocomplete" && this.isPopupOpen) {
          if (!this.enableVirtualization) {
            nextItem = isNullOrUndefined(this.activeIndex) ? this.liCollections[startIndex] : this.liCollections[index];
          } else {
            if (!isVirtualKeyAction) {
              nextItem = isNullOrUndefined(this.activeIndex) ? this.liCollections[this.skeletonCount] : this.liCollections[index];
              nextItem = !isNullOrUndefined(nextItem) && !nextItem.classList.contains("e-virtual-list") ? nextItem : null;
            } else {
              if (this.getModuleName() === "autocomplete") {
                var value = this.getFormattedValue(this.selectedLI.getAttribute("data-value"));
                nextItem = this.getElementByValue(value);
              } else {
                nextItem = this.getElementByValue(this.getItemData().value);
              }
            }
          }
        }
        if (!isNullOrUndefined(nextItem)) {
          var focusAtFirstElement = this.liCollections[this.skeletonCount] && this.liCollections[this.skeletonCount].classList.contains("e-item-focus");
          this.setSelection(nextItem, e);
          if (focusAtFirstElement && this.enableVirtualization && this.getModuleName() === "autocomplete" && !isVirtualKeyAction) {
            var selectedLiOffsetTop = this.virtualListInfo && this.virtualListInfo.startIndex ? this.selectedLI.offsetTop + this.virtualListInfo.startIndex * this.selectedLI.offsetHeight : this.selectedLI.offsetTop;
            selectedLiOffsetTop = this.virtualListInfo && this.virtualListInfo.startIndex === 0 && this.fields.groupBy ? this.selectedLI.offsetHeight - selectedLiOffsetTop : selectedLiOffsetTop - this.selectedLI.offsetHeight;
            this.list.scrollTop = selectedLiOffsetTop - this.list.querySelectorAll(".e-virtual-list").length * this.selectedLI.offsetHeight;
          }
        } else if (this.enableVirtualization && !this.isPopupOpen && this.getModuleName() !== "autocomplete" && (this.viewPortInfo.endIndex !== this.totalItemCount && e.action === "down" || this.viewPortInfo.startIndex !== 0 && e.action === "up")) {
          if (e.action === "down") {
            this.viewPortInfo.startIndex = this.viewPortInfo.startIndex + this.itemCount < this.totalItemCount - this.itemCount ? this.viewPortInfo.startIndex + this.itemCount : this.totalItemCount - this.itemCount;
            this.viewPortInfo.endIndex = this.viewPortInfo.startIndex + this.itemCount;
            this.updateVirtualItemIndex();
            this.isCustomFilter = this.getModuleName() === "combobox" ? true : this.isCustomFilter;
            this.resetList(this.dataSource, this.fields, this.query);
            this.isCustomFilter = this.getModuleName() === "combobox" ? false : this.isCustomFilter;
            var value = this.liCollections[0].getAttribute("data-value") !== "null" ? this.getFormattedValue(this.liCollections[0].getAttribute("data-value")) : null;
            var selectedData = this.getDataByValue(value);
            if (selectedData) {
              this.itemData = selectedData;
            }
          } else if (e.action === "up") {
            this.viewPortInfo.startIndex = this.viewPortInfo.startIndex - this.itemCount > 0 ? this.viewPortInfo.startIndex - this.itemCount : 0;
            this.viewPortInfo.endIndex = this.viewPortInfo.startIndex + this.itemCount;
            this.updateVirtualItemIndex();
            this.isCustomFilter = this.getModuleName() === "combobox" ? true : this.isCustomFilter;
            this.resetList(this.dataSource, this.fields, this.query);
            this.isCustomFilter = this.getModuleName() === "combobox" ? false : this.isCustomFilter;
            var value = this.liCollections[this.liCollections.length - 1].getAttribute("data-value") !== "null" ? this.getFormattedValue(this.liCollections[this.liCollections.length - 1].getAttribute("data-value")) : null;
            var selectedData = this.getDataByValue(value);
            if (selectedData) {
              this.itemData = selectedData;
            }
          }
          this.UpdateSkeleton();
          this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li);
          this.ulElement = this.list.querySelector("ul");
          this.handleVirtualKeyboardActions(e, this.pageCount);
        }
      }
      if (this.allowFiltering && !this.enableVirtualization && this.getModuleName() !== "autocomplete") {
        var value = this.getItemData().value;
        var filterIndex = this.getIndexByValueFilter(value, this.actionCompleteData.ulElement);
        if (!isNullOrUndefined(filterIndex)) {
          this.activeIndex = filterIndex;
        }
      }
      if (this.allowFiltering && this.getModuleName() === "dropdownlist" && this.filterInput) {
        if (!isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-item-focus")[0])) {
          attributes(this.filterInput, {
            "aria-activedescendant": this.ulElement.getElementsByClassName("e-item-focus")[0].id
          });
        } else if (!isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-active")[0])) {
          attributes(this.filterInput, {
            "aria-activedescendant": this.ulElement.getElementsByClassName("e-active")[0].id
          });
        }
      }
      var itemIndex;
      for (var index = 0; index < this.liCollections.length; index++) {
        if (this.liCollections[index].classList.contains(dropDownListClasses.focus) || this.liCollections[index].classList.contains(dropDownListClasses.selected)) {
          itemIndex = index;
          break;
        }
      }
      if (itemIndex != null && this.isDisabledElement(this.liCollections[itemIndex])) {
        if (this.getModuleName() !== "autocomplete") {
          if (this.liCollections.length - 1 === itemIndex && e.action === "down") {
            e.action = "up";
          }
          if (itemIndex === 0 && e.action === "up") {
            e.action = "down";
          }
        }
        this.updateUpDownAction(e);
      }
      e.preventDefault();
    };
    DropDownList2.prototype.updateHomeEndAction = function(e, isVirtualKeyAction) {
      if (this.getModuleName() === "dropdownlist") {
        var findLi = 0;
        if (e.action === "home") {
          findLi = 0;
          if (this.enableVirtualization && this.isPopupOpen) {
            findLi = this.skeletonCount;
          } else if (this.enableVirtualization && !this.isPopupOpen && this.viewPortInfo.startIndex !== 0) {
            this.viewPortInfo.startIndex = 0;
            this.viewPortInfo.endIndex = this.itemCount;
            this.updateVirtualItemIndex();
            this.resetList(this.dataSource, this.fields, this.query);
          }
        } else {
          if (this.enableVirtualization && !this.isPopupOpen && this.viewPortInfo.endIndex !== this.totalItemCount) {
            this.viewPortInfo.startIndex = this.totalItemCount - this.itemCount;
            this.viewPortInfo.endIndex = this.totalItemCount;
            this.updateVirtualItemIndex();
            this.resetList(this.dataSource, this.fields, this.query);
          }
          findLi = this.getItems().length - 1;
        }
        e.preventDefault();
        if (this.activeIndex === findLi) {
          if (isVirtualKeyAction) {
            this.setSelection(this.liCollections[findLi], e);
          }
          return;
        }
        if (!this.enableVirtualization && this.liCollections[findLi] && this.liCollections[findLi].classList.contains("e-disabled")) {
          return;
        }
        this.setSelection(this.liCollections[findLi], e);
      }
    };
    DropDownList2.prototype.selectCurrentValueOnTab = function(e) {
      if (this.getModuleName() === "autocomplete") {
        this.selectCurrentItem(e);
      } else {
        if (this.isPopupOpen) {
          this.hidePopup(e);
          this.focusDropDown(e);
        }
      }
    };
    DropDownList2.prototype.mobileKeyActionHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.isEditTextBox() && !this.isPopupOpen) {
        return;
      }
      if (!this.readonly) {
        if (this.list === void 0 && !this.isRequested) {
          this.searchKeyEvent = e;
          this.renderList();
        }
        if (isNullOrUndefined(this.list) || !isNullOrUndefined(this.liCollections) && this.liCollections.length === 0 || this.isRequested) {
          return;
        }
        if (e.action === "enter") {
          this.selectCurrentItem(e);
        }
      }
    };
    DropDownList2.prototype.handleVirtualKeyboardActions = function(e, pageCount) {
      switch (e.action) {
        case "down":
        case "up":
          if (this.itemData != null || this.getModuleName() === "autocomplete") {
            this.updateUpDownAction(e, true);
          }
          break;
        case "pageUp":
          this.activeIndex = this.getModuleName() === "autocomplete" ? this.getIndexByValue(this.selectedLI.getAttribute("data-value")) + this.getPageCount() - 1 : this.getIndexByValue(this.previousValue);
          this.pageUpSelection(this.activeIndex - this.getPageCount(), e, true);
          e.preventDefault();
          break;
        case "pageDown":
          this.activeIndex = this.getModuleName() === "autocomplete" ? this.getIndexByValue(this.selectedLI.getAttribute("data-value")) - this.getPageCount() : this.getIndexByValue(this.previousValue);
          this.pageDownSelection(!isNullOrUndefined(this.activeIndex) ? this.activeIndex + this.getPageCount() : 2 * this.getPageCount(), e, true);
          e.preventDefault();
          break;
        case "home":
          this.isMouseScrollAction = true;
          this.updateHomeEndAction(e, true);
          break;
        case "end":
          this.isMouseScrollAction = true;
          this.updateHomeEndAction(e, true);
          break;
      }
      this.keyboardEvent = null;
    };
    DropDownList2.prototype.selectCurrentItem = function(e) {
      if (this.isPopupOpen) {
        var li = this.list.querySelector("." + dropDownListClasses.focus);
        if (this.isDisabledElement(li)) {
          return;
        }
        if (li) {
          this.setSelection(li, e);
          this.isTyped = false;
        }
        if (this.isSelected) {
          this.isSelectCustom = false;
          this.onChangeEvent(e);
        }
        this.hidePopup(e);
        this.focusDropDown(e);
      } else {
        this.showPopup();
      }
    };
    DropDownList2.prototype.isSelectFocusItem = function(element) {
      return !isNullOrUndefined(element);
    };
    DropDownList2.prototype.pageUpSelection = function(steps, event2, isVirtualKeyAction) {
      var previousItem = steps >= 0 ? this.liCollections[steps + 1] : this.liCollections[0];
      if (!this.enableVirtualization && previousItem && previousItem.classList.contains("e-disabled")) {
        var validIndex = steps >= 0 ? steps + 1 : 0;
        while (validIndex < this.liCollections.length) {
          previousItem = this.liCollections[validIndex];
          if (previousItem && !previousItem.classList.contains("e-disabled")) {
            break;
          }
          validIndex--;
          if (validIndex < 0) {
            return;
          }
        }
      }
      if (this.enableVirtualization && this.activeIndex == null) {
        previousItem = this.liCollections.length >= steps && steps >= 0 ? this.liCollections[steps + this.skeletonCount + 1] : this.liCollections[0];
      }
      if (!isNullOrUndefined(previousItem) && previousItem.classList.contains("e-virtual-list")) {
        previousItem = this.liCollections[this.skeletonCount];
      }
      this.PageUpDownSelection(previousItem, event2);
      if (this.allowFiltering && this.getModuleName() === "dropdownlist") {
        if (!isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-item-focus")[0])) {
          attributes(this.filterInput, {
            "aria-activedescendant": this.ulElement.getElementsByClassName("e-item-focus")[0].id
          });
        } else if (!isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-active")[0])) {
          attributes(this.filterInput, {
            "aria-activedescendant": this.ulElement.getElementsByClassName("e-active")[0].id
          });
        }
      }
    };
    DropDownList2.prototype.PageUpDownSelection = function(previousItem, event2) {
      if (this.enableVirtualization) {
        if (!isNullOrUndefined(previousItem) && (this.getModuleName() !== "autocomplete" && !previousItem.classList.contains("e-active") || this.getModuleName() === "autocomplete" && !previousItem.classList.contains("e-item-focus"))) {
          this.setSelection(previousItem, event2);
        }
      } else {
        this.setSelection(previousItem, event2);
      }
    };
    DropDownList2.prototype.pageDownSelection = function(steps, event2, isVirtualKeyAction) {
      var list = this.getItems();
      var previousItem = steps <= list.length ? this.liCollections[steps - 1] : this.liCollections[list.length - 1];
      if (!this.enableVirtualization && previousItem && previousItem.classList.contains("e-disabled")) {
        while (steps >= 0 && steps < this.liCollections.length) {
          previousItem = steps <= list.length ? this.liCollections[steps - 1] : this.liCollections[list.length - 1];
          if (previousItem && !previousItem.classList.contains("e-disabled")) {
            break;
          }
          steps++;
        }
      }
      if (this.enableVirtualization && this.skeletonCount > 0) {
        steps = this.getModuleName() === "dropdownlist" && this.allowFiltering ? steps + 1 : steps;
        previousItem = steps < list.length ? this.liCollections[steps] : this.liCollections[list.length - 1];
      }
      if (this.enableVirtualization && this.activeIndex == null) {
        previousItem = steps <= list.length ? this.liCollections[steps + this.skeletonCount - 1] : this.liCollections[list.length - 1];
      }
      this.PageUpDownSelection(previousItem, event2);
      if (this.allowFiltering && this.getModuleName() === "dropdownlist") {
        if (!isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-item-focus")[0])) {
          attributes(this.filterInput, {
            "aria-activedescendant": this.ulElement.getElementsByClassName("e-item-focus")[0].id
          });
        } else if (!isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-active")[0])) {
          attributes(this.filterInput, {
            "aria-activedescendant": this.ulElement.getElementsByClassName("e-active")[0].id
          });
        }
      }
    };
    DropDownList2.prototype.unWireEvent = function() {
      if (!isNullOrUndefined(this.inputWrapper)) {
        EventHandler.remove(this.inputWrapper.container, "mousedown", this.dropDownClick);
        EventHandler.remove(this.inputWrapper.container, "keypress", this.onSearch);
        EventHandler.remove(this.inputWrapper.container, "focus", this.focusIn);
        EventHandler.remove(window, "resize", this.windowResize);
      }
      this.unBindCommonEvent();
    };
    DropDownList2.prototype.unWireListEvents = function() {
      if (this.list) {
        EventHandler.remove(this.list, "click", this.onMouseClick);
        EventHandler.remove(this.list, "mouseover", this.onMouseOver);
        EventHandler.remove(this.list, "mouseout", this.onMouseLeave);
      }
    };
    DropDownList2.prototype.checkSelector = function(id) {
      return '[id="' + id.replace(/(:|\.|\[|\]|,|=|@|\\|\/|#)/g, "\\$1") + '"]';
    };
    DropDownList2.prototype.onDocumentClick = function(e) {
      var target = e.target;
      if (!(!isNullOrUndefined(this.popupObj) && closest(target, this.checkSelector(this.popupObj.element.id))) && !isNullOrUndefined(this.inputWrapper) && !this.inputWrapper.container.contains(e.target)) {
        if (this.inputWrapper.container.classList.contains(dropDownListClasses.inputFocus) || this.isPopupOpen) {
          this.isDocumentClick = true;
          var isActive = this.isRequested;
          if (this.getModuleName() === "combobox" && this.isTyped) {
            this.isInteracted = false;
          }
          this.hidePopup(e);
          this.isInteracted = false;
          if (!isActive) {
            this.onFocusOut(e);
            this.inputWrapper.container.classList.remove(dropDownListClasses.inputFocus);
          }
        }
      } else if (target !== this.inputElement && !(this.allowFiltering && target === this.filterInput) && !(this.getModuleName() === "combobox" && !this.allowFiltering && Browser.isDevice && target === this.inputWrapper.buttons[0])) {
        this.isPreventBlur = (Browser.isIE || Browser.info.name === "edge") && (document.activeElement === this.targetElement() || document.activeElement === this.filterInput);
        e.preventDefault();
      }
    };
    DropDownList2.prototype.activeStateChange = function() {
      if (this.isDocumentClick) {
        this.hidePopup();
        this.onFocusOut();
        this.inputWrapper.container.classList.remove(dropDownListClasses.inputFocus);
      }
    };
    DropDownList2.prototype.focusDropDown = function(e) {
      if (!this.initial && this.isFilterLayout()) {
        this.focusIn(e);
      }
    };
    DropDownList2.prototype.dropDownClick = function(e) {
      if (e.which === 3 || e.button === 2) {
        return;
      }
      this.keyboardEvent = null;
      if (this.targetElement().classList.contains(dropDownListClasses.disable) || this.inputWrapper.clearButton === e.target) {
        return;
      }
      var target = e.target;
      if (target !== this.inputElement && !(this.allowFiltering && target === this.filterInput) && this.getModuleName() !== "combobox") {
        e.preventDefault();
      }
      if (!this.readonly) {
        if (this.isPopupOpen) {
          this.hidePopup(e);
          if (this.isFilterLayout()) {
            this.focusDropDown(e);
          }
        } else {
          this.focusIn(e);
          this.floatLabelChange();
          this.queryString = this.inputElement.value.trim() === "" ? null : this.inputElement.value;
          this.isDropDownClick = true;
          this.showPopup(e);
        }
        var proxy_1 = this;
        var duration = this.dataSource instanceof DataManager && this.groupTemplate ? 700 : this.element.tagName === this.getNgDirective() && this.itemTemplate ? 500 : 100;
        if (!this.isSecondClick) {
          setTimeout(function() {
            proxy_1.cloneElements();
            proxy_1.isSecondClick = true;
            proxy_1.isSecondClick = proxy_1.isReact && proxy_1.isFiltering() && proxy_1.dataSource instanceof DataManager && !proxy_1.list.querySelector("ul") ? false : true;
          }, duration);
        }
      } else {
        this.focusIn(e);
      }
    };
    DropDownList2.prototype.cloneElements = function() {
      if (this.list) {
        var ulElement = this.list.querySelector("ul");
        if (ulElement) {
          ulElement = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;
          this.actionCompleteData.ulElement = ulElement;
        }
      }
    };
    DropDownList2.prototype.updateSelectedItem = function(li, e, preventSelect, isSelection) {
      var _this = this;
      this.removeSelection();
      li.classList.add(dropDownBaseClasses.selected);
      this.removeHover();
      var value = li.getAttribute("data-value") !== null ? this.getFormattedValue(li.getAttribute("data-value")) : null;
      var selectedData = this.getDataByValue(value);
      if (!this.initial && !preventSelect && !isNullOrUndefined(e)) {
        var items = this.detachChanges(selectedData);
        this.isSelected = true;
        var eventArgs = {
          e,
          item: li,
          itemData: items,
          isInteracted: e ? true : false,
          cancel: false
        };
        this.trigger("select", eventArgs, function(eventArgs2) {
          if (eventArgs2.cancel) {
            li.classList.remove(dropDownBaseClasses.selected);
          } else {
            _this.selectEventCallback(li, e, preventSelect, selectedData, value);
            if (isSelection) {
              _this.setSelectOptions(li, e);
            }
          }
        });
      } else {
        this.selectEventCallback(li, e, preventSelect, selectedData, value);
        if (isSelection) {
          this.setSelectOptions(li, e);
        }
      }
    };
    DropDownList2.prototype.selectEventCallback = function(li, e, preventSelect, selectedData, value) {
      this.previousItemData = !isNullOrUndefined(this.itemData) ? this.itemData : null;
      if (this.itemData !== selectedData) {
        this.previousValue = !isNullOrUndefined(this.itemData) ? typeof this.itemData == "object" && !this.allowObjectBinding ? this.checkFieldValue(this.itemData, this.fields.value.split(".")) : this.itemData : null;
      }
      this.item = li;
      this.itemData = selectedData;
      var focusedItem = this.list.querySelector("." + dropDownBaseClasses.focus);
      if (focusedItem) {
        removeClass([focusedItem], dropDownBaseClasses.focus);
      }
      li.setAttribute("aria-selected", "true");
      if (isNullOrUndefined(value)) {
        value = "null";
      }
      if (this.allowFiltering && !this.enableVirtualization && this.getModuleName() !== "autocomplete") {
        var filterIndex = this.getIndexByValueFilter(value, this.actionCompleteData.ulElement);
        if (!isNullOrUndefined(filterIndex)) {
          this.activeIndex = filterIndex;
        } else {
          this.activeIndex = this.getIndexByValue(value);
        }
      } else {
        if (this.enableVirtualization && this.activeIndex == null && this.dataSource instanceof DataManager) {
          this.UpdateSkeleton();
          this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li);
          this.ulElement = this.list.querySelector("ul");
        }
        this.activeIndex = this.getIndexByValue(value);
      }
    };
    DropDownList2.prototype.activeItem = function(li) {
      if (this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.selected)) {
        this.removeSelection();
        li.classList.add(dropDownBaseClasses.selected);
        this.removeHover();
        li.setAttribute("aria-selected", "true");
      }
    };
    DropDownList2.prototype.setValue = function(e) {
      var dataItem = this.getItemData();
      this.isTouched = !isNullOrUndefined(e);
      if (dataItem.value === null) {
        Input.setValue(null, this.inputElement, this.floatLabelType, this.showClearButton);
      } else {
        Input.setValue(dataItem.text, this.inputElement, this.floatLabelType, this.showClearButton);
      }
      if (this.valueTemplate && this.itemData !== null) {
        this.setValueTemplate();
      } else if (!isNullOrUndefined(this.valueTempElement) && this.inputElement.previousSibling === this.valueTempElement) {
        detach(this.valueTempElement);
        this.inputElement.style.display = "block";
      }
      if (!isNullOrUndefined(dataItem.value) && !this.enableVirtualization && this.allowFiltering) {
        this.activeIndex = this.getIndexByValueFilter(dataItem.value, this.actionCompleteData.ulElement);
      }
      var clearIcon2 = dropDownListClasses.clearIcon;
      var isFilterElement = this.isFiltering() && this.filterInput && this.getModuleName() === "combobox";
      var clearElement = isFilterElement && this.filterInput.parentElement.querySelector("." + clearIcon2);
      if (this.isFiltering() && clearElement) {
        clearElement.style.removeProperty("visibility");
      }
      if (!this.allowObjectBinding && this.previousValue === dataItem.value || this.allowObjectBinding && this.previousValue != null && this.isObjectInArray(this.previousValue, [this.allowCustom && this.isObjectCustomValue ? this.value ? this.value : dataItem : dataItem.value ? this.getDataByValue(dataItem.value) : dataItem])) {
        this.isSelected = false;
        return true;
      } else {
        this.isSelected = !this.initial ? true : false;
        this.isSelectCustom = false;
        if (this.getModuleName() === "dropdownlist") {
          this.updateIconState();
        }
        return false;
      }
    };
    DropDownList2.prototype.setSelection = function(li, e) {
      if (this.isValidLI(li) && (!li.classList.contains(dropDownBaseClasses.selected) || this.isPopupOpen && this.isSelected && li.classList.contains(dropDownBaseClasses.selected))) {
        this.updateSelectedItem(li, e, false, true);
      } else {
        this.setSelectOptions(li, e);
        if (this.enableVirtualization && this.value) {
          var fields = !this.isPrimitiveData ? this.fields.value : "";
          var currentValue = this.allowObjectBinding && !isNullOrUndefined(this.value) ? getValue(this.fields.value ? this.fields.value : "", this.value) : this.value;
          if (this.dataSource instanceof DataManager) {
            var getItem = new DataManager(this.virtualGroupDataSource).executeLocal(new Query().where(new Predicate(fields, "equal", currentValue)));
            if (getItem && getItem.length > 0) {
              this.itemData = getItem[0];
              var dataItem = this.getItemData();
              var value = this.allowObjectBinding ? this.getDataByValue(dataItem.value) : dataItem.value;
              if (this.value === dataItem.value && this.text !== dataItem.text || this.value !== dataItem.value && this.text === dataItem.text) {
                this.setProperties({
                  "text": dataItem.text ? dataItem.text.toString() : dataItem.text,
                  "value": value
                });
              }
            }
          } else {
            var getItem = new DataManager(this.dataSource).executeLocal(new Query().where(new Predicate(fields, "equal", currentValue)));
            if (getItem && getItem.length > 0) {
              this.itemData = getItem[0];
              var dataItem = this.getItemData();
              var value = this.allowObjectBinding ? this.getDataByValue(dataItem.value) : dataItem.value;
              if (this.value === dataItem.value && this.text !== dataItem.text || this.value !== dataItem.value && this.text === dataItem.text) {
                this.setProperties({
                  "text": dataItem.text ? dataItem.text.toString() : dataItem.text,
                  "value": value
                });
                if (isNullOrUndefined(li)) {
                  this.previousValue = this.value;
                }
              }
            }
          }
        }
      }
    };
    DropDownList2.prototype.setSelectOptions = function(li, e) {
      if (this.list) {
        this.removeHover();
      }
      this.previousSelectedLI = !isNullOrUndefined(this.selectedLI) ? this.selectedLI : null;
      this.selectedLI = li;
      if (this.setValue(e)) {
        return;
      }
      if (!this.isPopupOpen && !isNullOrUndefined(li) || this.isPopupOpen && !isNullOrUndefined(e) && (e.type !== "keydown" || e.type === "keydown" && e.action === "enter")) {
        this.isSelectCustom = false;
        this.onChangeEvent(e);
      }
      if (this.isPopupOpen && !isNullOrUndefined(this.selectedLI) && this.itemData !== null && (!e || e.type !== "click")) {
        this.setScrollPosition(e);
      }
      if (Browser.info.name !== "mozilla") {
        if (this.targetElement()) {
          attributes(this.targetElement(), {
            "aria-describedby": this.inputElement.id !== "" ? this.inputElement.id : this.element.id
          });
          this.targetElement().removeAttribute("aria-live");
        }
      }
      if (this.isPopupOpen && !isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-item-focus")[0])) {
        attributes(this.targetElement(), {
          "aria-activedescendant": this.ulElement.getElementsByClassName("e-item-focus")[0].id
        });
      } else if (this.isPopupOpen && !isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-active")[0])) {
        attributes(this.targetElement(), {
          "aria-activedescendant": this.ulElement.getElementsByClassName("e-active")[0].id
        });
      }
    };
    DropDownList2.prototype.dropdownCompiler = function(dropdownTemplate) {
      var checkTemplate = false;
      if (typeof dropdownTemplate !== "function" && dropdownTemplate) {
        try {
          checkTemplate = document.querySelectorAll(dropdownTemplate).length ? true : false;
        } catch (exception) {
          checkTemplate = false;
        }
      }
      return checkTemplate;
    };
    DropDownList2.prototype.setValueTemplate = function() {
      var compiledString;
      if (this.isReact) {
        this.clearTemplate(["valueTemplate"]);
        if (this.valueTempElement) {
          detach(this.valueTempElement);
          this.inputElement.style.display = "block";
          this.valueTempElement = null;
        }
      }
      if (!this.valueTempElement) {
        this.valueTempElement = this.createElement("span", {
          className: dropDownListClasses.value
        });
        this.inputElement.parentElement.insertBefore(this.valueTempElement, this.inputElement);
        this.inputElement.style.display = "none";
      }
      if (!this.isReact) {
        this.valueTempElement.innerHTML = "";
      }
      var valuecheck = this.dropdownCompiler(this.valueTemplate);
      if (typeof this.valueTemplate !== "function" && valuecheck) {
        compiledString = compile(document.querySelector(this.valueTemplate).innerHTML.trim());
      } else {
        compiledString = compile(this.valueTemplate);
      }
      var valueCompTemp = compiledString(this.itemData, this, "valueTemplate", this.valueTemplateId, this.isStringTemplate, null, this.valueTempElement);
      if (valueCompTemp && valueCompTemp.length > 0) {
        append(valueCompTemp, this.valueTempElement);
      }
      this.renderReactTemplates();
    };
    DropDownList2.prototype.removeSelection = function() {
      if (this.list) {
        var selectedItems = this.list.querySelectorAll("." + dropDownBaseClasses.selected);
        if (selectedItems.length) {
          removeClass(selectedItems, dropDownBaseClasses.selected);
          selectedItems[0].removeAttribute("aria-selected");
        }
      }
    };
    DropDownList2.prototype.getItemData = function() {
      var fields = this.fields;
      var dataItem = null;
      dataItem = this.itemData;
      var dataValue;
      var dataText;
      if (!isNullOrUndefined(dataItem)) {
        dataValue = getValue(fields.value, dataItem);
        dataText = getValue(fields.text, dataItem);
      }
      var value = !isNullOrUndefined(dataItem) && !isUndefined(dataValue) ? dataValue : dataItem;
      var text = !isNullOrUndefined(dataItem) && !isUndefined(dataValue) ? dataText : dataItem;
      return {
        value,
        text
      };
    };
    DropDownList2.prototype.onChangeEvent = function(eve, isCustomValue) {
      var _this = this;
      var dataItem = this.getItemData();
      var index = this.isSelectCustom ? null : this.activeIndex;
      if (this.enableVirtualization) {
        var datas = this.dataSource instanceof DataManager ? this.virtualGroupDataSource : this.dataSource;
        if (dataItem.value && datas && datas.length > 0) {
          var foundIndex = datas.findIndex(function(data) {
            return !isNullOrUndefined(dataItem.value) && getValue(_this.fields.value, data) === dataItem.value;
          });
          if (foundIndex !== -1) {
            index = foundIndex;
          }
        }
      }
      var value = this.allowObjectBinding ? isCustomValue ? this.value : this.getDataByValue(dataItem.value) : dataItem.value;
      this.setProperties({
        "index": index,
        "text": dataItem.text ? dataItem.text.toString() : dataItem.text,
        "value": value
      }, true);
      this.detachChangeEvent(eve);
    };
    DropDownList2.prototype.detachChanges = function(value) {
      var items;
      if (typeof value === "string" || typeof value === "boolean" || typeof value === "number") {
        items = Object.defineProperties({}, {
          value: {
            value,
            enumerable: true
          },
          text: {
            value,
            enumerable: true
          }
        });
      } else {
        items = value;
      }
      return items;
    };
    DropDownList2.prototype.detachChangeEvent = function(eve) {
      this.isSelected = false;
      this.previousValue = this.value;
      this.activeIndex = this.enableVirtualization ? this.getIndexByValue(this.value) : this.index;
      this.typedString = !isNullOrUndefined(this.text) ? this.text : "";
      if (!this.initial) {
        var items = this.detachChanges(this.itemData);
        var preItems = void 0;
        if (typeof this.previousItemData === "string" || typeof this.previousItemData === "boolean" || typeof this.previousItemData === "number") {
          preItems = Object.defineProperties({}, {
            value: {
              value: this.previousItemData,
              enumerable: true
            },
            text: {
              value: this.previousItemData,
              enumerable: true
            }
          });
        } else {
          preItems = this.previousItemData;
        }
        this.setHiddenValue();
        var eventArgs = {
          e: eve,
          item: this.item,
          itemData: items,
          previousItem: this.previousSelectedLI,
          previousItemData: preItems,
          isInteracted: eve ? true : false,
          value: this.value,
          element: this.element,
          event: eve
        };
        if (this.isAngular && this.preventChange) {
          this.preventChange = false;
        } else {
          this.trigger("change", eventArgs);
        }
      }
      if ((isNullOrUndefined(this.value) || this.value === "") && this.floatLabelType !== "Always") {
        removeClass([this.inputWrapper.container], "e-valid-input");
      }
    };
    DropDownList2.prototype.setHiddenValue = function() {
      if (!isNullOrUndefined(this.value)) {
        var value = this.allowObjectBinding && !isNullOrUndefined(this.value) ? getValue(this.fields.value ? this.fields.value : "", this.value) : this.value;
        if (this.hiddenElement.querySelector("option")) {
          var selectedElement = this.hiddenElement.querySelector("option");
          selectedElement.textContent = this.text;
          selectedElement.setAttribute("value", value.toString());
        } else {
          if (!isNullOrUndefined(this.hiddenElement)) {
            var option = document.createElement("option");
            option.text = this.text;
            option.setAttribute("selected", "");
            this.hiddenElement.appendChild(option);
            var selectedElement = this.hiddenElement.querySelector("option");
            selectedElement.setAttribute("value", value.toString());
          }
        }
      } else {
        this.hiddenElement.innerHTML = "";
      }
    };
    DropDownList2.prototype.onFilterUp = function(e) {
      if (!(e.ctrlKey && e.keyCode === 86) && (this.isValidKey || e.keyCode === 40 || e.keyCode === 38)) {
        this.isValidKey = false;
        this.filterArgs = e;
        this.firstItem = this.dataSource && this.dataSource.length > 0 ? this.dataSource[0] : null;
        switch (e.keyCode) {
          case 38:
          //up arrow
          case 40:
            if (this.getModuleName() === "autocomplete" && !this.isPopupOpen && !this.preventAltUp && !this.isRequested) {
              this.preventAutoFill = true;
              this.searchLists(e);
            } else {
              this.preventAutoFill = false;
            }
            this.preventAltUp = false;
            if (this.getModuleName() === "autocomplete" && !isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-item-focus")[0])) {
              attributes(this.targetElement(), {
                "aria-activedescendant": this.ulElement.getElementsByClassName("e-item-focus")[0].id
              });
            }
            e.preventDefault();
            break;
          case 46:
          //delete
          case 8:
            this.typedString = this.filterInput.value;
            if (!this.isPopupOpen && this.typedString !== "" || this.isPopupOpen && this.queryString.length > 0) {
              this.preventAutoFill = true;
              this.searchLists(e);
            } else if (this.typedString === "" && this.queryString === "" && this.getModuleName() !== "autocomplete") {
              this.preventAutoFill = true;
              this.searchLists(e);
            } else if (this.typedString === "") {
              if (this.list) {
                this.resetFocusElement();
              }
              this.activeIndex = null;
              if (this.getModuleName() !== "dropdownlist") {
                this.preventAutoFill = true;
                this.searchLists(e);
                if (this.getModuleName() === "autocomplete") {
                  this.hidePopup();
                }
              }
            }
            e.preventDefault();
            break;
          default:
            if (this.isFiltering() && this.getModuleName() === "combobox" && isNullOrUndefined(this.list)) {
              this.getInitialData = true;
              this.renderList();
              if (!this.isSecondClick && !this.isDropDownClick) {
                this.executeCloneElements();
              }
            }
            this.typedString = this.filterInput.value;
            this.preventAutoFill = false;
            if (!this.getInitialData) {
              this.searchLists(e);
            }
            if (this.enableVirtualization && this.getModuleName() !== "autocomplete" || this.getModuleName() === "autocomplete" && !(this.dataSource instanceof DataManager) || this.getModuleName() === "autocomplete" && this.dataSource instanceof DataManager && this.totalItemCount !== 0) {
              this.getFilteringSkeletonCount();
            }
            break;
        }
      } else {
        this.isValidKey = false;
      }
    };
    DropDownList2.prototype.onFilterDown = function(e) {
      switch (e.keyCode) {
        case 13:
          break;
        case 40:
        //down arrow
        case 38:
          this.queryString = this.filterInput.value;
          e.preventDefault();
          break;
        case 9:
          if (this.isPopupOpen && this.getModuleName() !== "autocomplete") {
            e.preventDefault();
          }
          break;
        default:
          this.prevSelectPoints = this.getSelectionPoints();
          this.queryString = this.filterInput.value;
          break;
      }
    };
    DropDownList2.prototype.removeFillSelection = function() {
      if (this.isInteracted) {
        var selection = this.getSelectionPoints();
        this.inputElement.setSelectionRange(selection.end, selection.end);
      }
    };
    DropDownList2.prototype.getQuery = function(query) {
      var filterQuery;
      if (!this.isCustomFilter && this.allowFiltering && this.filterInput) {
        filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();
        var filterType = this.typedString === "" ? "contains" : this.filterType;
        var dataType = this.typeOfData(this.dataSource).typeof;
        if (!(this.dataSource instanceof DataManager) && dataType === "string" || dataType === "number") {
          filterQuery.where("", filterType, this.typedString, this.ignoreCase, this.ignoreAccent);
        } else if (this.getModuleName() !== "combobox" || this.isFiltering() && this.getModuleName() === "combobox" && this.typedString !== "") {
          var fields = this.fields.text ? this.fields.text : "";
          filterQuery.where(fields, filterType, this.typedString, this.ignoreCase, this.ignoreAccent);
        }
      } else {
        filterQuery = this.enableVirtualization && !isNullOrUndefined(this.customFilterQuery) ? this.customFilterQuery.clone() : query ? query.clone() : this.query ? this.query.clone() : new Query();
      }
      if (this.enableVirtualization && this.viewPortInfo.endIndex !== 0) {
        var takeValue = this.getTakeValue();
        var alreadySkipAdded = false;
        if (filterQuery) {
          for (var queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {
            if (filterQuery.queries[queryElements].fn === "onSkip") {
              alreadySkipAdded = true;
              break;
            }
          }
        }
        var queryTakeValue = 0;
        var querySkipValue = 0;
        if (filterQuery && filterQuery.queries.length > 0) {
          for (var queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {
            if (filterQuery.queries[queryElements].fn === "onSkip") {
              querySkipValue = filterQuery.queries[queryElements].e.nos;
            }
            if (filterQuery.queries[queryElements].fn === "onTake") {
              queryTakeValue = takeValue <= filterQuery.queries[queryElements].e.nos ? filterQuery.queries[queryElements].e.nos : takeValue;
            }
          }
        }
        if (queryTakeValue <= 0 && this.query && this.query.queries.length > 0) {
          for (var queryElements = 0; queryElements < this.query.queries.length; queryElements++) {
            if (this.query.queries[queryElements].fn === "onTake") {
              queryTakeValue = takeValue <= this.query.queries[queryElements].e.nos ? this.query.queries[queryElements].e.nos : takeValue;
            }
          }
        }
        var skipExists = false;
        if (filterQuery && filterQuery.queries.length > 0) {
          for (var queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {
            if (filterQuery.queries[queryElements].fn === "onSkip") {
              querySkipValue = filterQuery.queries[queryElements].e.nos;
              filterQuery.queries.splice(queryElements, 1);
              alreadySkipAdded = false;
              --queryElements;
              continue;
            }
            if (filterQuery.queries[queryElements].fn === "onTake") {
              queryTakeValue = filterQuery.queries[queryElements].e.nos <= queryTakeValue ? queryTakeValue : filterQuery.queries[queryElements].e.nos;
              filterQuery.queries.splice(queryElements, 1);
              --queryElements;
            }
          }
        }
        if (!skipExists && (this.allowFiltering || !this.isPopupOpen || !alreadySkipAdded)) {
          if (querySkipValue > 0) {
            filterQuery.skip(querySkipValue);
          } else {
            filterQuery.skip(this.virtualItemStartIndex);
          }
        }
        if (this.isIncrementalRequest) {
          filterQuery.take(this.incrementalEndIndex);
        } else {
          if (queryTakeValue > 0) {
            filterQuery.take(queryTakeValue);
          } else {
            filterQuery.take(takeValue);
          }
        }
        filterQuery.requiresCount();
      }
      return filterQuery;
    };
    DropDownList2.prototype.getSelectionPoints = function() {
      var input = this.inputElement;
      return {
        start: Math.abs(input.selectionStart),
        end: Math.abs(input.selectionEnd)
      };
    };
    DropDownList2.prototype.performFiltering = function(e) {
      var _this = this;
      this.checkAndResetCache();
      this.isRequesting = false;
      var eventArgs = {
        preventDefaultAction: false,
        text: this.filterInput.value,
        updateData: function(dataSource, query, fields) {
          if (eventArgs.cancel) {
            return;
          }
          _this.isCustomFilter = true;
          _this.customFilterQuery = query ? query.clone() : query;
          _this.filteringAction(dataSource, query, fields);
        },
        baseEventArgs: e,
        cancel: false
      };
      this.trigger("filtering", eventArgs, function(eventArgs2) {
        if (!eventArgs2.cancel && !_this.isCustomFilter && !eventArgs2.preventDefaultAction) {
          _this.filteringAction(_this.dataSource, null, _this.fields);
        }
      });
    };
    DropDownList2.prototype.searchLists = function(e) {
      this.isTyped = true;
      this.activeIndex = null;
      this.isListSearched = true;
      if (this.filterInput.parentElement.querySelector("." + dropDownListClasses.clearIcon)) {
        var clearElement = this.filterInput.parentElement.querySelector("." + dropDownListClasses.clearIcon);
        clearElement.style.visibility = this.filterInput.value === "" ? "hidden" : "visible";
      }
      this.isDataFetched = false;
      if (this.isFiltering()) {
        if (this.typedString !== "" && this.debounceDelay > 0) {
          this.debouncedFiltering(e, this.debounceDelay);
        } else {
          this.performFiltering(e);
        }
      }
    };
    DropDownList2.prototype.filter = function(dataSource, query, fields) {
      this.isCustomFilter = true;
      this.filteringAction(dataSource, query, fields);
    };
    DropDownList2.prototype.filteringAction = function(dataSource, query, fields) {
      if (!isNullOrUndefined(this.filterInput)) {
        this.beforePopupOpen = !this.isPopupOpen && this.getModuleName() === "combobox" && this.filterInput.value === "" || this.getInitialData ? false : true;
        var isNoData = this.list.classList.contains(dropDownBaseClasses.noData);
        if (this.filterInput.value.trim() === "" && !this.itemTemplate) {
          this.actionCompleteData.isUpdated = false;
          this.isTyped = false;
          if (!isNullOrUndefined(this.actionCompleteData.ulElement) && !isNullOrUndefined(this.actionCompleteData.list)) {
            if (this.enableVirtualization) {
              if (this.isFiltering()) {
                this.isPreventScrollAction = true;
                this.list.scrollTop = 0;
                this.previousStartIndex = 0;
                this.virtualListInfo = null;
              }
              this.totalItemCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;
              this.resetList(dataSource, fields, query);
              if (isNoData && !this.list.classList.contains(dropDownBaseClasses.noData)) {
                if (!this.list.querySelector(".e-virtual-ddl-content")) {
                  var virtualContentElement = this.createElement("div", {
                    className: "e-virtual-ddl-content"
                  });
                  virtualContentElement.style.cssText = this.getTransformValues();
                  this.list.appendChild(virtualContentElement).appendChild(this.list.querySelector(".e-list-parent"));
                }
                if (!this.list.querySelector(".e-virtual-ddl")) {
                  var virtualElement = this.createElement("div", {
                    id: this.element.id + "_popup",
                    className: "e-virtual-ddl"
                  });
                  virtualElement.style.cssText = this.GetVirtualTrackHeight();
                  this.list.parentElement.querySelector(".e-dropdownbase").appendChild(virtualElement);
                }
              }
            }
            this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list);
          }
          this.isTyped = true;
          if (!isNullOrUndefined(this.itemData) && this.getModuleName() === "dropdownlist") {
            this.focusIndexItem();
            this.setScrollPosition();
          }
          this.isNotSearchList = true;
        } else {
          this.isNotSearchList = false;
          query = this.filterInput.value.trim() === "" ? null : query;
          if (this.enableVirtualization && this.isFiltering() && this.isTyped) {
            this.isPreventScrollAction = true;
            this.list.scrollTop = 0;
            this.previousStartIndex = 0;
            this.virtualListInfo = null;
          }
          this.resetList(dataSource, fields, query);
          if (this.getModuleName() === "dropdownlist" && this.list.classList.contains(dropDownBaseClasses.noData)) {
            this.popupContentElement.setAttribute("role", "status");
            this.popupContentElement.setAttribute("id", "no-record");
            attributes(this.filterInputObj.container, {
              "aria-activedescendant": "no-record"
            });
          }
          if (this.enableVirtualization && isNoData && !this.list.classList.contains(dropDownBaseClasses.noData)) {
            if (!this.list.querySelector(".e-virtual-ddl-content")) {
              var virtualContentElement = this.createElement("div", {
                className: "e-virtual-ddl-content"
              });
              virtualContentElement.style.cssText = this.getTransformValues();
              this.list.appendChild(virtualContentElement).appendChild(this.list.querySelector(".e-list-parent"));
            }
            if (!this.list.querySelector(".e-virtual-ddl")) {
              var virtualElement = this.createElement("div", {
                id: this.element.id + "_popup",
                className: "e-virtual-ddl"
              });
              virtualElement.style.cssText = this.GetVirtualTrackHeight();
              this.list.parentElement.querySelector(".e-dropdownbase").appendChild(virtualElement);
            }
          }
        }
        if (this.enableVirtualization) {
          this.getFilteringSkeletonCount();
        }
        this.renderReactTemplates();
        if (this.filterInput && this.filterInput.value === "" && this.getModuleName() === "combobox") {
          this.executeCloneElements();
        }
      }
    };
    DropDownList2.prototype.setSearchBox = function(popupElement) {
      if (this.isFiltering()) {
        var parentElement = popupElement.querySelector("." + dropDownListClasses.filterParent) ? popupElement.querySelector("." + dropDownListClasses.filterParent) : this.createElement("span", {
          className: dropDownListClasses.filterParent
        });
        this.filterInput = this.createElement("input", {
          attrs: {
            type: "text"
          },
          className: dropDownListClasses.filterInput
        });
        this.element.parentNode.insertBefore(this.filterInput, this.element);
        var backIcon = false;
        if (Browser.isDevice && this.isDeviceFullScreen) {
          backIcon = true;
        }
        this.filterInputObj = Input.createInput({
          element: this.filterInput,
          buttons: backIcon ? [dropDownListClasses.backIcon, dropDownListClasses.filterBarClearIcon] : [dropDownListClasses.filterBarClearIcon],
          properties: {
            placeholder: this.filterBarPlaceholder
          }
        }, this.createElement);
        if (!isNullOrUndefined(this.cssClass)) {
          if (this.cssClass.split(" ").indexOf("e-outline") !== -1) {
            addClass([this.filterInputObj.container], "e-outline");
          } else if (this.cssClass.split(" ").indexOf("e-filled") !== -1) {
            addClass([this.filterInputObj.container], "e-filled");
          }
        }
        append([this.filterInputObj.container], parentElement);
        prepend([parentElement], popupElement);
        attributes(this.filterInput, {
          "aria-disabled": "false",
          "role": "combobox",
          "autocomplete": "off",
          "autocapitalize": "off",
          "spellcheck": "false"
        });
        this.clearIconElement = this.filterInput.parentElement.querySelector("." + dropDownListClasses.clearIcon);
        if (!Browser.isDevice && this.clearIconElement) {
          EventHandler.add(this.clearIconElement, "click", this.clearText, this);
          this.clearIconElement.style.visibility = "hidden";
        }
        if (!Browser.isDevice) {
          this.searchKeyModule = new KeyboardEvents(this.filterInput, {
            keyAction: this.keyActionHandler.bind(this),
            keyConfigs: this.keyConfigure,
            eventName: "keydown"
          });
        } else {
          this.searchKeyModule = new KeyboardEvents(this.filterInput, {
            keyAction: this.mobileKeyActionHandler.bind(this),
            keyConfigs: this.keyConfigure,
            eventName: "keydown"
          });
        }
        EventHandler.add(this.filterInput, "input", this.onInput, this);
        EventHandler.add(this.filterInput, "keyup", this.onFilterUp, this);
        EventHandler.add(this.filterInput, "keydown", this.onFilterDown, this);
        EventHandler.add(this.filterInput, "blur", this.onBlurHandler, this);
        EventHandler.add(this.filterInput, "paste", this.pasteHandler, this);
        return this.filterInputObj;
      } else {
        return inputObject;
      }
    };
    DropDownList2.prototype.onInput = function(e) {
      if (!isNullOrUndefined(e) && !isNullOrUndefined(e.data) && e.data.length > 1 && this.autoFill && (this.getModuleName() === "combobox" || this.getModuleName() === "autocomplete")) {
        this.inputElement.value = e.data;
      }
      this.isValidKey = true;
      if (this.getModuleName() === "combobox") {
        this.updateIconState();
      }
      if (Browser.isDevice && Browser.info.name === "mozilla") {
        this.typedString = this.filterInput.value;
        this.preventAutoFill = true;
        this.searchLists(e);
      }
    };
    DropDownList2.prototype.pasteHandler = function(e) {
      var _this = this;
      setTimeout(function() {
        _this.typedString = _this.filterInput.value;
        if (_this.getModuleName() === "combobox" && _this.isFiltering() && isNullOrUndefined(_this.list)) {
          _this.renderList();
        }
        _this.searchLists(e);
      });
    };
    DropDownList2.prototype.onActionFailure = function(e) {
      _super.prototype.onActionFailure.call(this, e);
      if (this.beforePopupOpen) {
        this.renderPopup();
      }
    };
    DropDownList2.prototype.getTakeValue = function() {
      return this.allowFiltering && this.getModuleName() === "dropdownlist" && Browser.isDevice ? Math.round(window.outerHeight / this.listItemHeight) : this.itemCount;
    };
    DropDownList2.prototype.onActionComplete = function(ulElement, list, e, isUpdated) {
      var _this = this;
      if (this.dataSource instanceof DataManager && !isNullOrUndefined(e) && !this.virtualGroupDataSource) {
        this.totalItemCount = e.count;
      }
      if (this.isNotSearchList && !this.enableVirtualization) {
        this.isNotSearchList = false;
        return;
      }
      if (this.getInitialData) {
        this.updateActionCompleteDataValues(ulElement, list);
        if (this.enableVirtualization) {
          this.updateSelectElementData(this.allowFiltering);
        }
        this.getInitialData = false;
        this.isReactTemplateUpdate = true;
        this.searchLists(this.filterArgs);
        return;
      }
      var tempItemCount = this.itemCount;
      if (this.isActive || !isNullOrUndefined(ulElement)) {
        var selectedItem = this.selectedLI ? this.selectedLI.cloneNode(true) : null;
        _super.prototype.onActionComplete.call(this, ulElement, list, e);
        this.skeletonCount = this.totalItemCount !== 0 && this.totalItemCount < this.itemCount * 2 && (!(this.dataSource instanceof DataManager) || this.dataSource instanceof DataManager && this.totalItemCount <= this.itemCount) ? 0 : this.skeletonCount;
        this.updateSelectElementData(this.allowFiltering);
        if (this.isRequested && !isNullOrUndefined(this.searchKeyEvent) && this.searchKeyEvent.type === "keydown") {
          this.isRequested = false;
          this.keyActionHandler(this.searchKeyEvent);
          this.searchKeyEvent = null;
        }
        if (this.isRequested && !isNullOrUndefined(this.searchKeyEvent)) {
          this.incrementalSearch(this.searchKeyEvent);
          this.searchKeyEvent = null;
        }
        if (!this.enableVirtualization) {
          this.list.scrollTop = 0;
        }
        if (!isNullOrUndefined(ulElement)) {
          attributes(ulElement, {
            "id": this.element.id + "_options",
            "role": "listbox",
            "aria-hidden": "false",
            "aria-label": "listbox"
          });
        }
        if (this.initialRemoteRender) {
          this.initial = true;
          this.activeIndex = this.index;
          this.initialRemoteRender = false;
          if (this.value && this.dataSource instanceof DataManager) {
            var checkField_1 = isNullOrUndefined(this.fields.value) ? this.fields.text : this.fields.value;
            var value_1 = this.allowObjectBinding && !isNullOrUndefined(this.value) ? getValue(checkField_1, this.value) : this.value;
            var fieldValue_1 = this.fields.value.split(".");
            var checkVal = list.some(function(x) {
              return isNullOrUndefined(x[checkField_1]) && fieldValue_1.length > 1 ? _this.checkFieldValue(x, fieldValue_1) === value_1 : x[checkField_1] === value_1;
            });
            if (this.enableVirtualization && this.virtualGroupDataSource) {
              checkVal = this.virtualGroupDataSource.some(function(x) {
                return isNullOrUndefined(x[checkField_1]) && fieldValue_1.length > 1 ? _this.checkFieldValue(x, fieldValue_1) === value_1 : x[checkField_1] === value_1;
              });
            }
            if (!checkVal) {
              this.dataSource.executeQuery(this.getQuery(this.query).where(new Predicate(checkField_1, "equal", value_1))).then(function(e2) {
                if (e2.result.length > 0) {
                  if (!_this.enableVirtualization) {
                    _this.addItem(e2.result, list.length);
                  }
                  _this.updateValues();
                } else {
                  _this.updateValues();
                }
              });
            } else {
              this.updateValues();
            }
          } else {
            this.updateValues();
          }
          this.initial = false;
        } else if (this.getModuleName() === "autocomplete" && this.value) {
          this.setInputValue();
        }
        if (this.getModuleName() !== "autocomplete" && this.isFiltering() && !this.isTyped) {
          if (!this.actionCompleteData.isUpdated || !this.isCustomFilter && !this.isFilterFocus || isNullOrUndefined(this.itemData) && this.allowFiltering && (this.dataSource instanceof DataManager || !isNullOrUndefined(this.dataSource) && !isNullOrUndefined(this.dataSource.length) && this.dataSource.length !== 0)) {
            if (this.itemTemplate && (this.element.tagName === "EJS-COMBOBOX" || this.isReact) && this.allowFiltering) {
              setTimeout(function() {
                _this.updateActionCompleteDataValues(ulElement, list);
              }, 0);
            } else {
              this.updateActionCompleteDataValues(ulElement, list);
            }
          }
          if (this.isDynamicData) {
            var currentValue = this.allowObjectBinding && !isNullOrUndefined(this.value) ? getValue(this.fields.value ? this.fields.value : "", this.value) : this.value;
            this.itemData = this.getDataByValue(currentValue);
            this.selectedLI = this.getElementByValue(currentValue);
            this.isDynamicData = false;
          }
          if ((this.allowCustom || this.allowFiltering && !this.isValueInList(list, this.value) && this.dataSource instanceof DataManager) && !this.enableVirtualization) {
            this.addNewItem(list, selectedItem);
          } else if ((this.allowCustom || this.allowFiltering && this.isValueInList(list, this.value)) && !this.enableVirtualization) {
            var value = this.allowObjectBinding && !isNullOrUndefined(this.value) ? getValue(this.fields.value ? this.fields.value : "", this.value) : this.value;
            var isValidAddition = !isNullOrUndefined(this.value) && selectedItem && selectedItem.getAttribute("data-value") === value.toString();
            if (isValidAddition) {
              this.addNewItem(list, selectedItem);
            }
          }
          if (!isNullOrUndefined(this.itemData) || isNullOrUndefined(this.itemData) && this.enableVirtualization) {
            this.getSkeletonCount();
            this.skeletonCount = this.totalItemCount !== 0 && this.totalItemCount < this.itemCount * 2 && (!(this.dataSource instanceof DataManager) || this.dataSource instanceof DataManager && this.totalItemCount <= this.itemCount) ? 0 : this.skeletonCount;
            this.UpdateSkeleton();
            this.focusIndexItem();
          }
          if (this.enableVirtualization) {
            this.updateActionCompleteDataValues(ulElement, list);
          }
        } else if (this.enableVirtualization && this.getModuleName() !== "autocomplete" && !this.isFiltering()) {
          var value = this.getItemData().value;
          this.activeIndex = this.getIndexByValue(value);
          var element = this.findListElement(this.list, "li", "data-value", value);
          this.selectedLI = element;
        } else if (this.enableVirtualization && this.getModuleName() === "autocomplete") {
          this.activeIndex = this.skeletonCount;
        }
        if (this.beforePopupOpen) {
          this.renderPopup(e);
          if (this.enableVirtualization) {
            if (!this.list.querySelector(".e-virtual-list")) {
              this.UpdateSkeleton();
              this.liCollections = this.list.querySelectorAll(".e-list-item");
            }
          }
          if (this.enableVirtualization && tempItemCount !== this.itemCount) {
            this.resetList(this.dataSource, this.fields);
          }
        }
      }
    };
    DropDownList2.prototype.isValueInList = function(list, valueToFind) {
      if (Array.isArray(list)) {
        for (var i = 0; i < list.length; i++) {
          if (list[i] === valueToFind) {
            return true;
          }
        }
      } else if (typeof list === "object" && list !== null) {
        for (var key in list) {
          if (Object.prototype.hasOwnProperty.call(list, key) && list[key] === valueToFind) {
            return true;
          }
        }
      }
      return false;
    };
    DropDownList2.prototype.checkFieldValue = function(list, fieldValue) {
      var checkField = list;
      fieldValue.forEach(function(value) {
        checkField = checkField[value];
      });
      return checkField;
    };
    DropDownList2.prototype.updateActionCompleteDataValues = function(ulElement, list) {
      this.actionCompleteData = {
        ulElement: ulElement.cloneNode(true),
        list,
        isUpdated: true
      };
      if (this.actionData.list !== this.actionCompleteData.list && this.actionCompleteData.ulElement && this.actionCompleteData.list) {
        this.actionData = this.actionCompleteData;
      }
    };
    DropDownList2.prototype.addNewItem = function(listData, newElement) {
      var _this = this;
      if (!isNullOrUndefined(this.itemData) && !isNullOrUndefined(newElement)) {
        var value_2 = this.getItemData().value;
        var isExist = listData.some(function(data) {
          return (typeof data === "string" || typeof data === "number" || typeof data === "boolean") && data === value_2 || getValue(_this.fields.value, data) === value_2;
        });
        if (!isExist) {
          this.addItem(this.itemData);
        }
      }
    };
    DropDownList2.prototype.updateActionCompleteData = function(li, item, index) {
      var _this = this;
      if (this.getModuleName() !== "autocomplete" && this.actionCompleteData.ulElement) {
        if (this.itemTemplate && this.element.tagName === "EJS-COMBOBOX" && this.allowFiltering) {
          setTimeout(function() {
            _this.actionCompleteDataUpdate(li, item, index);
          }, 0);
        } else {
          this.actionCompleteDataUpdate(li, item, index);
        }
      }
    };
    DropDownList2.prototype.actionCompleteDataUpdate = function(li, item, index) {
      if (index !== null) {
        this.actionCompleteData.ulElement.insertBefore(li.cloneNode(true), this.actionCompleteData.ulElement.childNodes[index]);
      } else {
        this.actionCompleteData.ulElement.appendChild(li.cloneNode(true));
      }
      if (this.isFiltering() && this.actionCompleteData.list && this.actionCompleteData.list.indexOf(item) < 0) {
        this.actionCompleteData.list.push(item);
      }
    };
    DropDownList2.prototype.focusIndexItem = function() {
      var value = this.getItemData().value;
      this.activeIndex = this.enableVirtualization && !isNullOrUndefined(value) || !this.enableVirtualization ? this.getIndexByValue(value) : this.activeIndex;
      var element = this.findListElement(this.list, "li", "data-value", value);
      this.selectedLI = element;
      this.activeItem(element);
      if (!(this.enableVirtualization && isNullOrUndefined(element))) {
        this.removeFocus();
      }
    };
    DropDownList2.prototype.updateSelection = function() {
      var selectedItem = this.list.querySelector("." + dropDownBaseClasses.selected);
      if (selectedItem) {
        this.setProperties({
          "index": this.getIndexByValue(selectedItem.getAttribute("data-value"))
        });
        this.activeIndex = this.index;
      } else {
        this.removeFocus();
        this.list.querySelector("." + dropDownBaseClasses.li).classList.add(dropDownListClasses.focus);
      }
    };
    DropDownList2.prototype.updateSelectionList = function() {
      var selectedItem = this.list && this.list.querySelector(".e-active");
      if (!selectedItem && !isNullOrUndefined(this.value) && this.getModuleName() !== "autocomplete") {
        var value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value) : this.value;
        var findEle = this.findListElement(this.list, "li", "data-value", value);
        if (findEle) {
          findEle.classList.add("e-active");
        }
      }
    };
    DropDownList2.prototype.removeFocus = function() {
      var highlightedItem = this.list.querySelectorAll("." + dropDownListClasses.focus);
      if (highlightedItem && highlightedItem.length) {
        removeClass(highlightedItem, dropDownListClasses.focus);
      }
    };
    DropDownList2.prototype.renderPopup = function(e) {
      var _this = this;
      if (this.popupObj && document.body.contains(this.popupObj.element)) {
        this.refreshPopup();
        return;
      }
      var args = {
        cancel: false
      };
      this.trigger("beforeOpen", args, function(args2) {
        var initialPopupHeight;
        if (!args2.cancel) {
          var popupEle = _this.createElement("div", {
            id: _this.element.id + "_popup",
            className: "e-ddl e-popup " + (_this.cssClass !== null ? _this.cssClass : "")
          });
          popupEle.setAttribute("aria-label", _this.element.id);
          popupEle.setAttribute("role", "dialog");
          var searchBox = _this.setSearchBox(popupEle);
          _this.listContainerHeight = _this.allowFiltering && _this.getModuleName() === "dropdownlist" && Browser.isDevice ? formatUnit(Math.round(window.outerHeight).toString() + "px") : formatUnit(_this.popupHeight);
          if (_this.headerTemplate) {
            _this.setHeaderTemplate(popupEle);
            _this.isUpdateHeaderHeight = _this.header.offsetHeight !== 0;
          }
          append([_this.list], popupEle);
          if (_this.footerTemplate) {
            _this.setFooterTemplate(popupEle);
            _this.isUpdateFooterHeight = _this.footer.offsetHeight !== 0;
          }
          document.body.appendChild(popupEle);
          popupEle.style.top = "0px";
          initialPopupHeight = popupEle.clientHeight;
          if (_this.enableVirtualization && _this.itemTemplate) {
            var listitems = popupEle.querySelectorAll("li.e-list-item:not(.e-virtual-list)");
            _this.listItemHeight = listitems.length > 0 ? Math.ceil(listitems[0].getBoundingClientRect().height) + parseInt(window.getComputedStyle(listitems[0]).marginBottom, 10) : 0;
          }
          if (_this.enableVirtualization && !_this.list.classList.contains(dropDownBaseClasses.noData)) {
            _this.getSkeletonCount();
            _this.skeletonCount = _this.totalItemCount < _this.itemCount * 2 && (!(_this.dataSource instanceof DataManager) || _this.dataSource instanceof DataManager && _this.totalItemCount <= _this.itemCount) ? 0 : _this.skeletonCount;
            if (!_this.list.querySelector(".e-virtual-ddl-content")) {
              var virtualContentElement = _this.createElement("div", {
                className: "e-virtual-ddl-content"
              });
              virtualContentElement.style.cssText = _this.getTransformValues();
              _this.list.appendChild(virtualContentElement).appendChild(_this.list.querySelector(".e-list-parent"));
            } else {
              _this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = _this.getTransformValues();
            }
            _this.UpdateSkeleton();
            _this.liCollections = _this.list.querySelectorAll("." + dropDownBaseClasses.li);
            _this.virtualItemCount = _this.itemCount;
            if (!_this.list.querySelector(".e-virtual-ddl")) {
              var virtualElement = _this.createElement("div", {
                id: _this.element.id + "_popup",
                className: "e-virtual-ddl"
              });
              virtualElement.style.cssText = _this.GetVirtualTrackHeight();
              popupEle.querySelector(".e-dropdownbase").appendChild(virtualElement);
            } else {
              _this.list.getElementsByClassName("e-virtual-ddl")[0].style = _this.GetVirtualTrackHeight();
            }
          }
          popupEle.style.visibility = "hidden";
          if (_this.popupHeight !== "auto") {
            _this.searchBoxHeight = 0;
            if (!isNullOrUndefined(searchBox.container) && _this.getModuleName() !== "combobox" && _this.getModuleName() !== "autocomplete") {
              _this.searchBoxHeight = searchBox.container.parentElement.getBoundingClientRect().height;
              _this.listContainerHeight = (parseInt(_this.listContainerHeight, 10) - _this.searchBoxHeight).toString() + "px";
            }
            if (_this.headerTemplate) {
              _this.header = _this.header ? _this.header : popupEle.querySelector(".e-ddl-header");
              var height = Math.round(_this.header.getBoundingClientRect().height);
              _this.listContainerHeight = (parseInt(_this.listContainerHeight, 10) - (height + _this.searchBoxHeight)).toString() + "px";
            }
            if (_this.footerTemplate) {
              _this.footer = _this.footer ? _this.footer : popupEle.querySelector(".e-ddl-footer");
              var height = Math.round(_this.footer.getBoundingClientRect().height);
              _this.listContainerHeight = (parseInt(_this.listContainerHeight, 10) - (height + _this.searchBoxHeight)).toString() + "px";
            }
            _this.list.style.maxHeight = (parseInt(_this.listContainerHeight, 10) - 2).toString() + "px";
            popupEle.style.maxHeight = formatUnit(_this.popupHeight);
          } else {
            popupEle.style.height = "auto";
          }
          var offsetValue = 0;
          var left = void 0;
          _this.isPreventScrollAction = true;
          if (!isNullOrUndefined(_this.selectedLI) && !isNullOrUndefined(_this.activeIndex) && _this.activeIndex >= 0) {
            _this.setScrollPosition();
          } else if (_this.enableVirtualization) {
            _this.setScrollPosition();
          } else {
            _this.list.scrollTop = 0;
          }
          if (Browser.isDevice && _this.isDeviceFullScreen && !_this.allowFiltering && (_this.getModuleName() === "dropdownlist" || _this.isDropDownClick && _this.getModuleName() === "combobox")) {
            offsetValue = _this.getOffsetValue(popupEle);
            var firstItem = _this.isEmptyList() ? _this.list : _this.liCollections[0];
            if (!isNullOrUndefined(_this.inputElement)) {
              left = -(parseInt(getComputedStyle(firstItem).textIndent, 10) - parseInt(getComputedStyle(_this.inputElement).paddingLeft, 10) + parseInt(getComputedStyle(_this.inputElement.parentElement).borderLeftWidth, 10));
            }
          }
          _this.createPopup(popupEle, offsetValue, left);
          _this.popupContentElement = _this.popupObj.element.querySelector(".e-content");
          _this.getFocusElement();
          _this.checkCollision(popupEle);
          if (Browser.isDevice) {
            if (parseInt(_this.popupWidth.toString(), 10) > window.outerWidth && !(_this.getModuleName() === "dropdownlist" && _this.allowFiltering)) {
              _this.popupObj.element.classList.add("e-wide-popup");
            }
            _this.popupObj.element.classList.add(dropDownListClasses.device);
            if (_this.getModuleName() === "dropdownlist" || _this.getModuleName() === "combobox" && !_this.allowFiltering && _this.isDropDownClick) {
              _this.popupObj.collision = {
                X: "fit",
                Y: "fit"
              };
            }
            if (_this.isFilterLayout() && _this.isDeviceFullScreen) {
              _this.popupObj.element.classList.add(dropDownListClasses.mobileFilter);
              _this.popupObj.position = {
                X: 0,
                Y: 0
              };
              _this.popupObj.dataBind();
              attributes(_this.popupObj.element, {
                style: "left:0px;right:0px;top:0px;bottom:0px;"
              });
              addClass([document.body, _this.popupObj.element], dropDownListClasses.popupFullScreen);
              _this.setSearchBoxPosition();
              _this.backIconElement = searchBox.container.querySelector(".e-back-icon");
              _this.clearIconElement = searchBox.container.querySelector("." + dropDownListClasses.clearIcon);
              EventHandler.add(_this.backIconElement, "click", _this.clickOnBackIcon, _this);
              EventHandler.add(_this.clearIconElement, "click", _this.clearText, _this);
            }
          }
          popupEle.style.visibility = "visible";
          addClass([popupEle], "e-popup-close");
          var scrollParentElements = _this.popupObj.getScrollableParent(_this.inputWrapper.container);
          for (var _i = 0, scrollParentElements_1 = scrollParentElements; _i < scrollParentElements_1.length; _i++) {
            var element = scrollParentElements_1[_i];
            EventHandler.add(element, "scroll", _this.scrollHandler, _this);
          }
          if (!isNullOrUndefined(_this.list)) {
            _this.unWireListEvents();
            _this.wireListEvents();
          }
          _this.selectedElementID = _this.selectedLI ? _this.selectedLI.id : null;
          if (_this.enableVirtualization) {
            _this.notify("bindScrollEvent", {
              module: "VirtualScroll",
              component: _this.getModuleName(),
              enable: _this.enableVirtualization
            });
            setTimeout(function() {
              if (_this.value || _this.list.querySelector(".e-active")) {
                _this.updateSelectionList();
                if (_this.selectedValueInfo && _this.viewPortInfo && _this.viewPortInfo.offsets.top) {
                  _this.list.scrollTop = _this.viewPortInfo.offsets.top;
                } else {
                  _this.scrollBottom(true, true);
                }
              }
            }, 5);
          }
          attributes(_this.targetElement(), {
            "aria-expanded": "true",
            "aria-owns": _this.element.id + "_popup",
            "aria-controls": _this.element.id
          });
          if (_this.getModuleName() !== "dropdownlist" && _this.list.classList.contains("e-nodata")) {
            attributes(_this.targetElement(), {
              "aria-activedescendant": "no-record"
            });
            _this.popupContentElement.setAttribute("role", "status");
            _this.popupContentElement.setAttribute("id", "no-record");
          }
          _this.inputElement.setAttribute("aria-expanded", "true");
          _this.inputElement.setAttribute("aria-controls", _this.element.id + "_popup");
          var inputParent = _this.isFiltering() ? _this.filterInput.parentElement : _this.inputWrapper.container;
          addClass([inputParent], [dropDownListClasses.inputFocus]);
          var animModel = {
            name: "FadeIn",
            duration: 100
          };
          _this.beforePopupOpen = true;
          var popupInstance = _this.popupObj;
          var eventArgs = {
            popup: popupInstance,
            event: e,
            cancel: false,
            animation: animModel
          };
          _this.trigger("open", eventArgs, function(eventArgs2) {
            if (!eventArgs2.cancel) {
              if (!isNullOrUndefined(_this.inputWrapper)) {
                addClass([_this.inputWrapper.container], [dropDownListClasses.iconAnimation]);
              }
              _this.renderReactTemplates();
              if (_this.isReact && _this.isFiltering() && _this.dataSource instanceof DataManager && _this.list.querySelector("ul") && !_this.isSecondClick) {
                _this.executeCloneElements();
              }
              if (!isNullOrUndefined(_this.popupObj)) {
                _this.popupObj.show(new Animation(eventArgs2.animation), _this.zIndex === 1e3 ? _this.element : null);
              }
              if (_this.isReact) {
                setTimeout(function() {
                  if (_this.popupHeight && _this.list && _this.popupHeight !== "auto" && !(_this.getModuleName() === "dropdownlist" && _this.allowFiltering)) {
                    var popupHeightValue = typeof _this.popupHeight === "string" ? parseInt(_this.popupHeight, 10) : _this.popupHeight;
                    if (!_this.isUpdateHeaderHeight && _this.headerTemplate && _this.header) {
                      var listHeight = _this.list.style.maxHeight === "" ? popupHeightValue : parseInt(_this.list.style.maxHeight, 10);
                      _this.list.style.maxHeight = (listHeight - _this.header.offsetHeight).toString() + "px";
                      _this.isUpdateHeaderHeight = true;
                    }
                    if (!_this.isUpdateFooterHeight && _this.footerTemplate && _this.footer) {
                      var listHeight = _this.list.style.maxHeight === "" ? popupHeightValue : parseInt(_this.list.style.maxHeight, 10);
                      _this.list.style.maxHeight = (listHeight - _this.footer.offsetHeight).toString() + "px";
                      _this.isUpdateFooterHeight = true;
                    }
                  }
                }, 15);
              }
            } else {
              _this.beforePopupOpen = false;
              _this.destroyPopup();
            }
          });
          if (_this.allowResize && (_this.getModuleName() !== "dropdownlist" || !(Browser.isDevice && _this.isDeviceFullScreen && _this.allowFiltering))) {
            var resizePaddingBottom = 16;
            _this.resizer = _this.createElement("div", {
              id: _this.element.id + "_resize-popup",
              className: dropDownListClasses.resizeIcon
              // Adding class for styling
            });
            if (_this.list && _this.list.parentElement) {
              _this.list.parentElement.classList.add("e-resize");
              if (_this.popupHeight.toString().toLowerCase() !== "auto" && initialPopupHeight >= parseInt(_this.popupHeight.toString(), 10) - 2) {
                _this.list.parentElement.style.height = "100%";
              }
              _this.list.parentElement.style.paddingBottom = _this.getModuleName() === "dropdownlist" && _this.allowFiltering && _this.searchBoxHeight ? (_this.searchBoxHeight + resizePaddingBottom).toString() + "px" : resizePaddingBottom.toString() + "px";
              if (_this.header || _this.footer || _this.itemTemplate) {
                _this.list.parentElement.style.paddingBottom = (parseInt(_this.list.parentElement.style.maxHeight, 10) - parseInt(_this.list.style.maxHeight, 10) + resizePaddingBottom).toString() + "px";
              }
              _this.list.parentElement.appendChild(_this.resizer);
              _this.list.parentElement.style.width = _this.resizeWidth + "px";
              _this.list.parentElement.style.height = _this.resizeHeight + "px";
              _this.list.parentElement.style.maxHeight = _this.resizeHeight + "px";
              _this.list.style.maxHeight = _this.resizeHeight + "px";
            }
            EventHandler.add(_this.resizer, "mousedown", _this.startResizing, _this);
            EventHandler.add(_this.resizer, "touchstart", _this.startResizing, _this);
          }
        } else {
          _this.beforePopupOpen = false;
        }
      });
    };
    DropDownList2.prototype.checkCollision = function(popupEle) {
      if (!Browser.isDevice || Browser.isDevice && !(this.getModuleName() === "dropdownlist" || this.isDropDownClick)) {
        var collision = isCollide(popupEle);
        if (collision.length > 0) {
          popupEle.style.marginTop = -parseInt(getComputedStyle(popupEle).marginTop, 10) + "px";
        }
        this.popupObj.resolveCollision();
      }
    };
    DropDownList2.prototype.getOffsetValue = function(popupEle) {
      var popupStyles = getComputedStyle(popupEle);
      var borderTop = parseInt(popupStyles.borderTopWidth, 10);
      var borderBottom = parseInt(popupStyles.borderBottomWidth, 10);
      return this.setPopupPosition(borderTop + borderBottom);
    };
    DropDownList2.prototype.createPopup = function(element, offsetValue, left) {
      var _this = this;
      this.popupObj = new Popup(element, {
        width: this.setWidth(),
        targetType: "relative",
        relateTo: this.inputWrapper.container,
        collision: this.enableRtl ? {
          X: "fit",
          Y: "flip"
        } : {
          X: "flip",
          Y: "flip"
        },
        offsetY: offsetValue,
        enableRtl: this.enableRtl,
        offsetX: left,
        position: this.enableRtl ? {
          X: "right",
          Y: "bottom"
        } : {
          X: "left",
          Y: "bottom"
        },
        zIndex: this.zIndex,
        close: function() {
          if (!_this.isDocumentClick) {
            _this.focusDropDown();
          }
          if (_this.isReact) {
            _this.clearTemplate(["headerTemplate", "footerTemplate"]);
          }
          _this.isNotSearchList = false;
          _this.isDocumentClick = false;
          _this.destroyPopup();
          if (_this.isFiltering() && _this.actionCompleteData.list && _this.actionCompleteData.list.length > 0) {
            _this.isActive = true;
            if (_this.isReactTemplateUpdate && _this.isReact && _this.itemTemplate && !_this.enableVirtualization) {
              _this.actionCompleteData.ulElement = _this.renderItems(_this.actionCompleteData.list, _this.fields);
              _this.isReactTemplateUpdate = false;
            }
            if (_this.enableVirtualization) {
              _this.onActionComplete(_this.ulElement, _this.listData, null, true);
            } else {
              _this.onActionComplete(_this.actionCompleteData.ulElement, _this.actionCompleteData.list, null, true);
            }
          } else if (_this.enableVirtualization) {
            _this.focusIndexItem();
          }
        },
        open: function() {
          EventHandler.add(document, "mousedown", _this.onDocumentClick, _this);
          _this.isPopupOpen = true;
          var actionList = _this.actionCompleteData && _this.actionCompleteData.ulElement && _this.actionCompleteData.ulElement.querySelector("li");
          var ulElement = _this.list.querySelector("ul li");
          if (!isNullOrUndefined(_this.ulElement) && !isNullOrUndefined(_this.ulElement.getElementsByClassName("e-item-focus")[0])) {
            attributes(_this.targetElement(), {
              "aria-activedescendant": _this.ulElement.getElementsByClassName("e-item-focus")[0].id
            });
          } else if (!isNullOrUndefined(_this.ulElement) && !isNullOrUndefined(_this.ulElement.getElementsByClassName("e-active")[0])) {
            attributes(_this.targetElement(), {
              "aria-activedescendant": _this.ulElement.getElementsByClassName("e-active")[0].id
            });
          }
          if (_this.isFiltering() && _this.itemTemplate && _this.element.tagName === _this.getNgDirective() && actionList && ulElement && actionList.textContent !== ulElement.textContent && _this.element.tagName !== "EJS-COMBOBOX") {
            _this.cloneElements();
          }
          if (_this.isFilterLayout()) {
            removeClass([_this.inputWrapper.container], [dropDownListClasses.inputFocus]);
            _this.isFilterFocus = true;
            _this.filterInput.focus();
            if (_this.inputWrapper.clearButton) {
              addClass([_this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
            }
          }
          _this.activeStateChange();
        },
        targetExitViewport: function() {
          if (!Browser.isDevice) {
            _this.hidePopup();
          }
        }
      });
    };
    DropDownList2.prototype.isEmptyList = function() {
      return !isNullOrUndefined(this.liCollections) && this.liCollections.length === 0;
    };
    DropDownList2.prototype.getFocusElement = function() {
    };
    DropDownList2.prototype.isFilterLayout = function() {
      return this.getModuleName() === "dropdownlist" && this.allowFiltering;
    };
    DropDownList2.prototype.scrollHandler = function() {
      if (Browser.isDevice && (this.getModuleName() === "dropdownlist" && !this.isFilterLayout() || this.getModuleName() === "combobox" && !this.allowFiltering && this.isDropDownClick)) {
        if (this.element && !this.isElementInViewport(this.element)) {
          this.hidePopup();
        }
      }
    };
    DropDownList2.prototype.isElementInViewport = function(element) {
      var elementRect = element.getBoundingClientRect();
      return elementRect.top >= 0 && elementRect.left >= 0 && elementRect.bottom <= window.innerHeight && elementRect.right <= window.innerWidth;
    };
    DropDownList2.prototype.setSearchBoxPosition = function() {
      var searchBoxHeight = this.filterInput.parentElement.getBoundingClientRect().height;
      this.popupObj.element.style.maxHeight = "100%";
      this.popupObj.element.style.width = "100%";
      this.list.style.maxHeight = window.innerHeight - searchBoxHeight + "px";
      this.list.style.height = window.innerHeight - searchBoxHeight + "px";
      var clearElement = this.filterInput.parentElement.querySelector("." + dropDownListClasses.clearIcon);
      detach(this.filterInput);
      clearElement.parentElement.insertBefore(this.filterInput, clearElement);
    };
    DropDownList2.prototype.setPopupPosition = function(border) {
      var offsetValue;
      var popupOffset = border;
      var selectedLI = this.list.querySelector("." + dropDownListClasses.focus) || this.selectedLI;
      var firstItem = this.isEmptyList() ? this.list : this.liCollections[0];
      var lastItem = this.isEmptyList() ? this.list : this.liCollections[this.getItems().length - 1];
      var liHeight = firstItem.getBoundingClientRect().height;
      this.listItemHeight = liHeight + parseInt(window.getComputedStyle(firstItem).marginBottom, 10);
      var listHeight = this.list.offsetHeight / 2;
      var height = isNullOrUndefined(selectedLI) ? firstItem.offsetTop : selectedLI.offsetTop;
      var lastItemOffsetValue = lastItem.offsetTop;
      if (lastItemOffsetValue - listHeight < height && !isNullOrUndefined(this.liCollections) && this.liCollections.length > 0 && !isNullOrUndefined(selectedLI)) {
        var count2 = this.list.offsetHeight / liHeight;
        var paddingBottom = parseInt(getComputedStyle(this.list).paddingBottom, 10);
        offsetValue = (count2 - (this.liCollections.length - this.activeIndex)) * liHeight - popupOffset + paddingBottom;
        this.list.scrollTop = selectedLI.offsetTop;
      } else if (height > listHeight && !this.enableVirtualization) {
        offsetValue = listHeight - liHeight / 2;
        this.list.scrollTop = height - listHeight + liHeight / 2;
      } else {
        offsetValue = height;
      }
      var inputHeight = this.inputWrapper.container.offsetHeight;
      offsetValue = offsetValue + liHeight + popupOffset - (liHeight - inputHeight) / 2;
      return -offsetValue;
    };
    DropDownList2.prototype.setWidth = function() {
      var width = formatUnit(this.popupWidth);
      if (width.indexOf("%") > -1) {
        var inputWidth = this.inputWrapper.container.offsetWidth * parseFloat(width) / 100;
        width = inputWidth.toString() + "px";
      }
      if (Browser.isDevice && width.indexOf("px") > -1 && !this.allowFiltering && (this.getModuleName() === "dropdownlist" || this.isDropDownClick && this.getModuleName() === "combobox")) {
        var firstItem = this.isEmptyList() ? this.list : this.liCollections[0];
        width = parseInt(width, 10) + (parseInt(getComputedStyle(firstItem).textIndent, 10) - parseInt(getComputedStyle(this.inputElement).paddingLeft, 10) + parseInt(getComputedStyle(this.inputElement.parentElement).borderLeftWidth, 10)) * 2 + "px";
      }
      return width;
    };
    DropDownList2.prototype.scrollBottom = function(isInitial, isInitialSelection, keyAction) {
      var _this = this;
      if (isInitialSelection === void 0) {
        isInitialSelection = false;
      }
      if (keyAction === void 0) {
        keyAction = null;
      }
      if (isNullOrUndefined(this.selectedLI) && this.enableVirtualization) {
        this.selectedLI = this.list.querySelector("." + dropDownBaseClasses.li);
        if (!isNullOrUndefined(this.selectedLI) && this.selectedLI.classList.contains("e-virtual-list")) {
          this.selectedLI = this.liCollections[this.skeletonCount];
        }
      }
      if (!isNullOrUndefined(this.selectedLI)) {
        var selectedListMargin = this.selectedLI && !isNaN(parseInt(window.getComputedStyle(this.selectedLI).marginBottom, 10)) ? parseInt(window.getComputedStyle(this.selectedLI).marginBottom, 10) : 0;
        this.isUpwardScrolling = false;
        var virtualListCount = this.list.querySelectorAll(".e-virtual-list").length;
        var lastElementValue = this.list.querySelector("li:last-of-type") ? this.list.querySelector("li:last-of-type").getAttribute("data-value") : null;
        var selectedLiOffsetTop = this.virtualListInfo && this.virtualListInfo.startIndex ? this.selectedLI.offsetTop + this.virtualListInfo.startIndex * (this.selectedLI.offsetHeight + selectedListMargin) : this.selectedLI.offsetTop;
        var currentOffset = this.list.offsetHeight;
        var nextBottom = selectedLiOffsetTop - virtualListCount * (this.selectedLI.offsetHeight + selectedListMargin) + (this.selectedLI.offsetHeight + selectedListMargin) - this.list.scrollTop;
        var nextOffset = this.list.scrollTop + nextBottom - currentOffset;
        var isScrollerCHanged = false;
        var isScrollTopChanged = false;
        nextOffset = isInitial ? nextOffset + parseInt(getComputedStyle(this.list).paddingTop, 10) * 2 : nextOffset + parseInt(getComputedStyle(this.list).paddingTop, 10);
        var boxRange = selectedLiOffsetTop - virtualListCount * (this.selectedLI.offsetHeight + selectedListMargin) + (this.selectedLI.offsetHeight + selectedListMargin) - this.list.scrollTop;
        boxRange = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? boxRange - this.fixedHeaderElement.offsetHeight : boxRange;
        if (this.activeIndex === 0 && !this.enableVirtualization) {
          this.list.scrollTop = 0;
          isScrollerCHanged = this.isKeyBoardAction;
        } else if (nextBottom > currentOffset || !(boxRange > 0 && this.list.offsetHeight > boxRange)) {
          var currentElementValue = this.selectedLI ? this.selectedLI.getAttribute("data-value") : null;
          var liCount = keyAction === "pageDown" ? this.getPageCount() - 2 : 1;
          if (!this.enableVirtualization || this.isKeyBoardAction || isInitialSelection) {
            if (this.isKeyBoardAction && this.enableVirtualization && lastElementValue && currentElementValue === lastElementValue && keyAction !== "end" && !this.isVirtualScrolling) {
              this.isPreventKeyAction = true;
              if (this.enableVirtualization && this.itemTemplate) {
                this.list.scrollTop += nextOffset;
              } else {
                if (this.enableVirtualization) {
                  liCount = keyAction === "pageDown" ? this.getPageCount() + 1 : liCount;
                }
                this.list.scrollTop += (this.selectedLI.offsetHeight + selectedListMargin) * liCount;
              }
              this.isPreventKeyAction = this.IsScrollerAtEnd() ? false : this.isPreventKeyAction;
              this.isKeyBoardAction = false;
              this.isPreventScrollAction = false;
            } else if (this.enableVirtualization && keyAction === "end") {
              this.isPreventKeyAction = false;
              this.isKeyBoardAction = false;
              this.isPreventScrollAction = false;
              this.list.scrollTop = this.list.scrollHeight;
            } else {
              if (keyAction === "pageDown" && this.enableVirtualization && !this.isVirtualScrolling) {
                this.isPreventKeyAction = false;
                this.isKeyBoardAction = false;
                this.isPreventScrollAction = false;
              }
              this.list.scrollTop = nextOffset;
            }
          } else {
            this.list.scrollTop = this.virtualListInfo && this.virtualListInfo.startIndex ? isInitial && this.virtualListInfo.startIndex ? this.virtualListInfo.startIndex * this.listItemHeight + this.listItemHeight * 2 : this.virtualListInfo.startIndex * this.listItemHeight : 0;
          }
          isScrollerCHanged = this.isKeyBoardAction;
          isScrollTopChanged = true;
        }
        this.isKeyBoardAction = isScrollerCHanged;
        if (this.enableVirtualization && this.fields.groupBy && this.fixedHeaderElement && keyAction === "down") {
          setTimeout(function() {
            _this.scrollStop(null, true);
          }, 100);
        }
      }
    };
    DropDownList2.prototype.scrollTop = function(keyAction) {
      if (keyAction === void 0) {
        keyAction = null;
      }
      if (!isNullOrUndefined(this.selectedLI)) {
        var selectedListMargin = this.selectedLI && !isNaN(parseInt(window.getComputedStyle(this.selectedLI).marginBottom, 10)) ? parseInt(window.getComputedStyle(this.selectedLI).marginBottom, 10) : 0;
        var virtualListCount = this.list.querySelectorAll(".e-virtual-list").length;
        var selectedLiOffsetTop = this.virtualListInfo && this.virtualListInfo.startIndex ? this.selectedLI.offsetTop + this.virtualListInfo.startIndex * (this.selectedLI.offsetHeight + selectedListMargin) : this.selectedLI.offsetTop;
        var nextOffset = selectedLiOffsetTop - virtualListCount * (this.selectedLI.offsetHeight + selectedListMargin) - this.list.scrollTop;
        var firstElementValue = this.list.querySelector("li.e-list-item:not(.e-virtual-list)") ? this.list.querySelector("li.e-list-item:not(.e-virtual-list)").getAttribute("data-value") : null;
        nextOffset = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? nextOffset - this.fixedHeaderElement.offsetHeight : nextOffset;
        var boxRange = selectedLiOffsetTop - virtualListCount * (this.selectedLI.offsetHeight + selectedListMargin) + (this.selectedLI.offsetHeight + selectedListMargin) - this.list.scrollTop;
        var isPageUpKeyAction = this.enableVirtualization && this.getModuleName() === "autocomplete" && nextOffset <= 0;
        if (this.activeIndex === 0 && !this.enableVirtualization) {
          this.list.scrollTop = 0;
        } else if (nextOffset < 0 || isPageUpKeyAction) {
          var currentElementValue = this.selectedLI ? this.selectedLI.getAttribute("data-value") : null;
          var liCount = keyAction === "pageUp" ? this.getPageCount() - 2 : 1;
          if (this.enableVirtualization) {
            liCount = keyAction === "pageUp" ? this.getPageCount() : liCount;
          }
          if (this.enableVirtualization && this.isKeyBoardAction && firstElementValue && currentElementValue === firstElementValue && keyAction !== "home" && !this.isVirtualScrolling) {
            this.isUpwardScrolling = true;
            this.isPreventKeyAction = true;
            this.list.scrollTop -= (this.selectedLI.offsetHeight + selectedListMargin) * liCount;
            this.isPreventKeyAction = this.list.scrollTop !== 0 ? this.isPreventKeyAction : false;
            this.isKeyBoardAction = false;
            this.isPreventScrollAction = false;
          } else if (this.enableVirtualization && keyAction === "home") {
            this.isPreventScrollAction = false;
            this.isPreventKeyAction = true;
            this.isKeyBoardAction = false;
            this.list.scrollTo(0, 0);
          } else {
            if (keyAction === "pageUp" && this.enableVirtualization && !this.isVirtualScrolling) {
              this.isPreventKeyAction = false;
              this.isKeyBoardAction = false;
              this.isPreventScrollAction = false;
            }
            this.list.scrollTop = this.list.scrollTop + nextOffset;
          }
        } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {
          this.list.scrollTop = this.selectedLI.offsetTop - (this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? this.fixedHeaderElement.offsetHeight : 0);
        }
      }
    };
    DropDownList2.prototype.IsScrollerAtEnd = function() {
      return this.list && this.list.scrollTop + this.list.clientHeight >= this.list.scrollHeight;
    };
    DropDownList2.prototype.isEditTextBox = function() {
      return false;
    };
    DropDownList2.prototype.isFiltering = function() {
      return this.allowFiltering;
    };
    DropDownList2.prototype.isPopupButton = function() {
      return true;
    };
    DropDownList2.prototype.setScrollPosition = function(e) {
      this.isPreventScrollAction = true;
      if (!isNullOrUndefined(e)) {
        switch (e.action) {
          case "pageDown":
          case "down":
          case "end":
            this.isKeyBoardAction = true;
            this.scrollBottom(false, false, e.action);
            break;
          default:
            this.isKeyBoardAction = e.action === "up" || e.action === "pageUp" || e.action === "open";
            this.scrollTop(e.action);
            break;
        }
      } else {
        this.scrollBottom(true);
      }
      this.isKeyBoardAction = false;
    };
    DropDownList2.prototype.clearText = function() {
      this.filterInput.value = this.typedString = "";
      this.searchLists(null);
      if (this.enableVirtualization) {
        this.list.scrollTop = 0;
        this.totalItemCount = this.dataCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;
        if (this.list.getElementsByClassName("e-virtual-ddl")[0]) {
          this.list.getElementsByClassName("e-virtual-ddl")[0].style = this.GetVirtualTrackHeight();
        }
        this.getSkeletonCount();
        this.UpdateSkeleton();
        this.liCollections = this.list.querySelectorAll(".e-list-item");
        if (this.list.getElementsByClassName("e-virtual-ddl-content")[0]) {
          this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
        }
      }
    };
    DropDownList2.prototype.setEleWidth = function(width) {
      if (!isNullOrUndefined(width)) {
        if (typeof width === "number") {
          this.inputWrapper.container.style.width = formatUnit(width);
        } else if (typeof width === "string") {
          this.inputWrapper.container.style.width = width.match(/px|%|em/) ? width : formatUnit(width);
        }
      }
    };
    DropDownList2.prototype.closePopup = function(delay, e) {
      var _this = this;
      var isFilterValue = !isNullOrUndefined(this.filterInput) && !isNullOrUndefined(this.filterInput.value) && this.filterInput.value !== "";
      var typedString = this.getModuleName() === "combobox" ? this.typedString : null;
      this.isTyped = false;
      this.isVirtualTrackHeight = false;
      if (!(this.popupObj && document.body.contains(this.popupObj.element) && this.beforePopupOpen)) {
        return;
      }
      this.keyboardEvent = null;
      EventHandler.remove(document, "mousedown", this.onDocumentClick);
      this.isActive = false;
      this.isDropDownClick = false;
      this.preventAutoFill = false;
      var scrollableParentElements = this.popupObj.getScrollableParent(this.inputWrapper.container);
      for (var _i = 0, scrollableParentElements_1 = scrollableParentElements; _i < scrollableParentElements_1.length; _i++) {
        var element = scrollableParentElements_1[_i];
        EventHandler.remove(element, "scroll", this.scrollHandler);
      }
      if (Browser.isDevice && this.isFilterLayout() && this.isDeviceFullScreen) {
        removeClass([document.body, this.popupObj.element], dropDownListClasses.popupFullScreen);
      }
      if (this.isFilterLayout()) {
        if (!Browser.isDevice) {
          this.searchKeyModule.destroy();
          if (this.clearIconElement) {
            EventHandler.remove(this.clearIconElement, "click", this.clearText);
          }
        }
        if (this.backIconElement) {
          EventHandler.remove(this.backIconElement, "click", this.clickOnBackIcon);
          EventHandler.remove(this.clearIconElement, "click", this.clearText);
        }
        if (!isNullOrUndefined(this.filterInput)) {
          EventHandler.remove(this.filterInput, "input", this.onInput);
          EventHandler.remove(this.filterInput, "keyup", this.onFilterUp);
          EventHandler.remove(this.filterInput, "keydown", this.onFilterDown);
          EventHandler.remove(this.filterInput, "blur", this.onBlurHandler);
          EventHandler.remove(this.filterInput, "paste", this.pasteHandler);
        }
        if (this.allowFiltering && this.getModuleName() === "dropdownlist") {
          this.filterInput.removeAttribute("aria-activedescendant");
          this.filterInput.removeAttribute("aria-disabled");
          this.filterInput.removeAttribute("role");
          this.filterInput.removeAttribute("autocomplete");
          this.filterInput.removeAttribute("autocapitalize");
          this.filterInput.removeAttribute("spellcheck");
        }
        this.filterInput = null;
      }
      attributes(this.targetElement(), {
        "aria-expanded": "false"
      });
      this.inputElement.setAttribute("aria-expanded", "false");
      this.targetElement().removeAttribute("aria-owns");
      this.targetElement().removeAttribute("aria-activedescendant");
      this.inputWrapper.container.classList.remove(dropDownListClasses.iconAnimation);
      if (this.isFiltering()) {
        this.actionCompleteData.isUpdated = false;
      }
      if (this.enableVirtualization) {
        if (this.value == null || this.isTyped) {
          this.viewPortInfo.endIndex = this.viewPortInfo && this.viewPortInfo.endIndex > 0 ? this.viewPortInfo.endIndex : this.itemCount;
          if (this.getModuleName() === "autocomplete" || this.getModuleName() === "dropdownlist" && !isNullOrUndefined(this.typedString) && this.typedString !== "" || this.getModuleName() === "combobox" && this.allowFiltering && !isNullOrUndefined(this.typedString) && this.typedString !== "") {
            this.checkAndResetCache();
          }
        } else if (this.getModuleName() === "autocomplete") {
          this.checkAndResetCache();
        }
        if ((this.getModuleName() === "dropdownlist" || this.getModuleName() === "combobox") && !(this.skeletonCount === 0)) {
          this.getSkeletonCount(true);
        }
      }
      this.beforePopupOpen = false;
      var animModel = {
        name: "FadeOut",
        duration: 100,
        delay: delay ? delay : 0
      };
      var popupInstance = this.popupObj;
      var eventArgs = {
        popup: popupInstance,
        cancel: false,
        animation: animModel,
        event: e || null
      };
      this.trigger("close", eventArgs, function(eventArgs2) {
        if (_this.getModuleName() === "dropdownlist") {
          Input.destroy({
            element: _this.filterInput,
            floatLabelType: _this.floatLabelType,
            properties: {
              placeholder: _this.filterBarPlaceholder
            },
            buttons: _this.clearIconElement
          }, _this.clearIconElement);
        }
        _this.filterInputObj = null;
        if (!isNullOrUndefined(_this.popupObj) && !isNullOrUndefined(_this.popupObj.element.querySelector(".e-fixed-head"))) {
          var fixedHeader = _this.popupObj.element.querySelector(".e-fixed-head");
          fixedHeader.parentNode.removeChild(fixedHeader);
          _this.fixedHeaderElement = null;
        }
        if (!eventArgs2.cancel) {
          if (_this.getModuleName() === "autocomplete") {
            _this.rippleFun();
          }
          if (_this.isPopupOpen) {
            _this.popupObj.hide(new Animation(eventArgs2.animation));
          } else {
            _this.destroyPopup();
          }
        }
      });
      if (Browser.isDevice && !eventArgs.cancel && this.popupObj.element.classList.contains("e-wide-popup")) {
        this.popupObj.element.classList.remove("e-wide-popup");
      }
      var dataSourceCount;
      if (this.dataSource instanceof DataManager) {
        dataSourceCount = this.virtualGroupDataSource && this.virtualGroupDataSource.length ? this.virtualGroupDataSource.length : 0;
      } else {
        dataSourceCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;
      }
      this.customFilterQuery = null;
      if (this.enableVirtualization && this.isFiltering() && isFilterValue && this.totalItemCount !== dataSourceCount) {
        this.updateInitialData();
        this.checkAndResetCache();
      }
    };
    DropDownList2.prototype.updateInitialData = function() {
      var currentData = this.selectData;
      if (isNullOrUndefined(currentData)) {
        return;
      }
      var ulElement = this.renderItems(currentData, this.fields);
      this.list.scrollTop = 0;
      this.virtualListInfo = {
        currentPageNumber: null,
        direction: null,
        sentinelInfo: {},
        offsets: {},
        startIndex: 0,
        endIndex: this.itemCount
      };
      if (this.getModuleName() === "combobox") {
        this.typedString = "";
      }
      this.previousStartIndex = 0;
      this.previousEndIndex = 0;
      if (this.dataSource instanceof DataManager) {
        if (this.remoteDataCount >= 0) {
          this.totalItemCount = this.dataCount = this.remoteDataCount;
        } else {
          this.resetList(this.dataSource);
        }
      } else {
        this.totalItemCount = this.dataCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;
      }
      if (this.list.getElementsByClassName("e-virtual-ddl")[0]) {
        this.list.getElementsByClassName("e-virtual-ddl")[0].style = this.GetVirtualTrackHeight();
      } else if (!this.list.querySelector(".e-virtual-ddl") && this.list.parentElement) {
        var virualElement = this.createElement("div", {
          id: this.element.id + "_popup",
          className: "e-virtual-ddl"
        });
        virualElement.style.cssText = this.GetVirtualTrackHeight();
        this.list.parentElement.querySelector(".e-dropdownbase").appendChild(virualElement);
      }
      if (this.getModuleName() !== "autocomplete" && this.totalItemCount !== 0 && this.totalItemCount > this.itemCount * 2) {
        this.getSkeletonCount();
      }
      this.UpdateSkeleton();
      this.listData = currentData;
      this.updateActionCompleteDataValues(ulElement, currentData);
      this.liCollections = this.list.querySelectorAll(".e-list-item");
      if (this.list.getElementsByClassName("e-virtual-ddl-content")[0]) {
        this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
      }
    };
    DropDownList2.prototype.destroyPopup = function() {
      this.isPopupOpen = false;
      this.isFilterFocus = false;
      this.inputElement.removeAttribute("aria-controls");
      if (this.popupObj) {
        if (this.resizer) {
          EventHandler.remove(this.resizer, "mousedown", this.startResizing);
          EventHandler.remove(this.resizer, "touchstart", this.startResizing);
        }
        this.popupObj.destroy();
        detach(this.popupObj.element);
      }
    };
    DropDownList2.prototype.clickOnBackIcon = function() {
      this.hidePopup();
      this.focusIn();
    };
    DropDownList2.prototype.render = function() {
      this.preselectedIndex = !isNullOrUndefined(this.index) ? this.index : null;
      if (this.element.tagName === "INPUT") {
        this.inputElement = this.element;
        if (isNullOrUndefined(this.inputElement.getAttribute("role"))) {
          this.inputElement.setAttribute("role", "combobox");
        }
        if (isNullOrUndefined(this.inputElement.getAttribute("type"))) {
          this.inputElement.setAttribute("type", "text");
        }
        this.inputElement.setAttribute("aria-expanded", "false");
      } else {
        this.inputElement = this.createElement("input", {
          attrs: {
            role: "combobox",
            type: "text"
          }
        });
        if (this.element.tagName !== this.getNgDirective()) {
          this.element.style.display = "none";
        }
        this.element.parentElement.insertBefore(this.inputElement, this.element);
        this.preventTabIndex(this.inputElement);
      }
      var updatedCssClassValues = this.cssClass;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        updatedCssClassValues = this.cssClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(closest(this.element, "fieldset")) && closest(this.element, "fieldset").disabled) {
        this.enabled = false;
      }
      this.inputWrapper = Input.createInput({
        element: this.inputElement,
        buttons: this.isPopupButton() ? [dropDownListClasses.icon] : null,
        floatLabelType: this.floatLabelType,
        properties: {
          readonly: this.getModuleName() === "dropdownlist" ? true : this.readonly,
          placeholder: this.placeholder,
          cssClass: updatedCssClassValues,
          enabled: this.enabled,
          enableRtl: this.enableRtl,
          showClearButton: this.showClearButton
        }
      }, this.createElement);
      if (this.element.tagName === this.getNgDirective()) {
        this.element.appendChild(this.inputWrapper.container);
      } else {
        this.inputElement.parentElement.insertBefore(this.element, this.inputElement);
      }
      this.hiddenElement = this.createElement("select", {
        attrs: {
          "aria-hidden": "true",
          "tabindex": "-1",
          "class": dropDownListClasses.hiddenElement
        }
      });
      prepend([this.hiddenElement], this.inputWrapper.container);
      if (!this.hiddenElement.hasAttribute("aria-label")) {
        this.hiddenElement.setAttribute("aria-label", this.getModuleName());
      }
      this.validationAttribute(this.element, this.hiddenElement);
      this.setReadOnly();
      this.setFields();
      this.inputWrapper.container.style.width = formatUnit(this.width);
      this.inputWrapper.container.classList.add("e-ddl");
      if (this.floatLabelType !== "Never") {
        Input.calculateWidth(this.inputElement, this.inputWrapper.container);
      }
      if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && this.inputWrapper.container.getElementsByClassName("e-float-text-content")[0] && this.floatLabelType !== "Never") {
        this.inputWrapper.container.getElementsByClassName("e-float-text-content")[0].classList.add("e-icon");
      }
      this.wireEvent();
      this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : "0";
      this.element.removeAttribute("tabindex");
      var id = this.element.getAttribute("id") ? this.element.getAttribute("id") : getUniqueID("ej2_dropdownlist");
      this.element.id = id;
      this.hiddenElement.id = id + "_hidden";
      this.targetElement().setAttribute("tabindex", this.tabIndex);
      if ((this.getModuleName() === "autocomplete" || this.getModuleName() === "combobox") && !this.readonly) {
        if (!this.inputElement.hasAttribute("aria-label")) {
          this.inputElement.setAttribute("aria-label", this.getModuleName());
        }
      } else if (this.getModuleName() === "dropdownlist") {
        if (!this.targetElement().hasAttribute("aria-label")) {
          attributes(this.targetElement(), {
            "aria-label": this.getModuleName()
          });
        }
        if (!this.inputElement.hasAttribute("aria-label")) {
          this.inputElement.setAttribute("aria-label", this.getModuleName());
        }
        this.inputElement.setAttribute("aria-expanded", "false");
      }
      attributes(this.targetElement(), this.getAriaAttributes());
      this.updateDataAttribute(this.htmlAttributes);
      this.setHTMLAttributes();
      if (this.targetElement() === this.inputElement) {
        this.inputElement.removeAttribute("aria-labelledby");
      }
      if (this.value !== null || this.activeIndex !== null || this.text !== null) {
        if (this.enableVirtualization) {
          this.listItemHeight = this.getListHeight();
          this.getSkeletonCount();
          this.updateVirtualizationProperties(this.itemCount, this.allowFiltering);
          if (this.index !== null) {
            this.activeIndex = this.index + this.skeletonCount;
          }
        }
        this.initValue();
        this.selectedValueInfo = this.viewPortInfo;
        if (this.enableVirtualization) {
          this.activeIndex = this.activeIndex + this.skeletonCount;
        }
      } else if (this.element.tagName === "SELECT" && this.element.options[0]) {
        var selectElement = this.element;
        this.value = this.allowObjectBinding ? this.getDataByValue(selectElement.options[selectElement.selectedIndex].value) : selectElement.options[selectElement.selectedIndex].value;
        this.text = isNullOrUndefined(this.value) ? null : selectElement.options[selectElement.selectedIndex].textContent;
        this.initValue();
      }
      this.setEnabled();
      this.preventTabIndex(this.element);
      if (!this.enabled) {
        this.targetElement().tabIndex = -1;
      }
      this.initial = false;
      this.element.style.opacity = "";
      this.inputElement.onselect = function(e) {
        e.stopImmediatePropagation();
      };
      this.inputElement.onchange = function(e) {
        e.stopImmediatePropagation();
      };
      if (this.element.hasAttribute("autofocus")) {
        this.focusIn();
      }
      if (!isNullOrUndefined(this.text)) {
        this.inputElement.setAttribute("value", this.text);
      }
      if (this.element.hasAttribute("data-val")) {
        this.element.setAttribute("data-val", "false");
      }
      var floatLabelElement = this.inputWrapper.container.getElementsByClassName("e-float-text")[0];
      if (!isNullOrUndefined(this.element.id) && this.element.id !== "" && !isNullOrUndefined(floatLabelElement)) {
        floatLabelElement.id = "label_" + this.element.id.replace(/ /g, "_");
        attributes(this.inputElement, {
          "aria-labelledby": floatLabelElement.id
        });
      }
      this.renderComplete();
      this.listItemHeight = this.getListHeight();
      this.getSkeletonCount();
      if (this.enableVirtualization) {
        this.updateVirtualizationProperties(this.itemCount, this.allowFiltering);
      }
      this.viewPortInfo.startIndex = this.virtualItemStartIndex = 0;
      this.viewPortInfo.endIndex = this.virtualItemEndIndex = this.viewPortInfo.startIndex > 0 ? this.viewPortInfo.endIndex : this.itemCount;
    };
    DropDownList2.prototype.getListHeight = function() {
      var listParent = this.createElement("div", {
        className: "e-dropdownbase"
      });
      var item = this.createElement("li", {
        className: "e-list-item"
      });
      var listParentHeight = formatUnit(this.popupHeight);
      listParent.style.height = parseInt(listParentHeight, 10).toString() + "px";
      listParent.appendChild(item);
      document.body.appendChild(listParent);
      this.virtualListHeight = listParent.getBoundingClientRect().height;
      var listItemHeight = Math.ceil(item.getBoundingClientRect().height) + parseInt(window.getComputedStyle(item).marginBottom, 10);
      listParent.remove();
      return listItemHeight;
    };
    DropDownList2.prototype.setFooterTemplate = function(popupEle) {
      var compiledString;
      if (this.footer) {
        if (this.isReact && typeof this.footerTemplate === "function") {
          this.clearTemplate(["footerTemplate"]);
        } else {
          this.footer.innerHTML = "";
        }
      } else {
        this.footer = this.createElement("div");
        addClass([this.footer], dropDownListClasses.footer);
      }
      var footercheck = this.dropdownCompiler(this.footerTemplate);
      if (typeof this.footerTemplate !== "function" && footercheck) {
        compiledString = compile(select(this.footerTemplate, document).innerHTML.trim());
      } else {
        compiledString = compile(this.footerTemplate);
      }
      var footerCompTemp = compiledString({}, this, "footerTemplate", this.footerTemplateId, this.isStringTemplate, null, this.footer);
      if (footerCompTemp && footerCompTemp.length > 0) {
        append(footerCompTemp, this.footer);
      }
      append([this.footer], popupEle);
    };
    DropDownList2.prototype.setHeaderTemplate = function(popupEle) {
      var compiledString;
      if (this.header) {
        this.header.innerHTML = "";
      } else {
        this.header = this.createElement("div");
        addClass([this.header], dropDownListClasses.header);
      }
      var headercheck = this.dropdownCompiler(this.headerTemplate);
      if (typeof this.headerTemplate !== "function" && headercheck) {
        compiledString = compile(select(this.headerTemplate, document).innerHTML.trim());
      } else {
        compiledString = compile(this.headerTemplate);
      }
      var headerCompTemp = compiledString({}, this, "headerTemplate", this.headerTemplateId, this.isStringTemplate, null, this.header);
      if (headerCompTemp && headerCompTemp.length) {
        append(headerCompTemp, this.header);
      }
      var contentEle = popupEle.querySelector("div.e-content");
      popupEle.insertBefore(this.header, contentEle);
    };
    DropDownList2.prototype.setEnabled = function() {
      this.element.setAttribute("aria-disabled", this.enabled ? "false" : "true");
    };
    DropDownList2.prototype.setOldText = function(text) {
      this.text = text;
    };
    DropDownList2.prototype.setOldValue = function(value) {
      this.value = value;
    };
    DropDownList2.prototype.refreshPopup = function() {
      if (!isNullOrUndefined(this.popupObj) && document.body.contains(this.popupObj.element) && (this.allowFiltering && !(Browser.isDevice && this.isFilterLayout()) || this.getModuleName() === "autocomplete")) {
        removeClass([this.popupObj.element], "e-popup-close");
        this.popupObj.refreshPosition(this.inputWrapper.container);
        this.popupObj.resolveCollision();
      }
    };
    DropDownList2.prototype.checkData = function(newProp) {
      if (newProp.dataSource && !isNullOrUndefined(Object.keys(newProp.dataSource)) && this.itemTemplate && this.allowFiltering && !(this.isListSearched && newProp.dataSource instanceof DataManager)) {
        if (this.list && !this.isReact) {
          this.list.innerHTML = "";
        } else {
          this.list = null;
        }
        this.actionCompleteData = {
          ulElement: null,
          list: null,
          isUpdated: false
        };
      }
      this.isListSearched = false;
      var isChangeValue = Object.keys(newProp).indexOf("value") !== -1 && isNullOrUndefined(newProp.value);
      var isChangeText = Object.keys(newProp).indexOf("text") !== -1 && isNullOrUndefined(newProp.text);
      if (this.getModuleName() !== "autocomplete" && this.allowFiltering && (isChangeValue || isChangeText)) {
        this.itemData = null;
      }
      if (this.allowFiltering && newProp.dataSource && !isNullOrUndefined(Object.keys(newProp.dataSource))) {
        this.actionCompleteData = {
          ulElement: null,
          list: null,
          isUpdated: false
        };
        this.actionData = this.actionCompleteData;
      } else if (this.allowFiltering && newProp.query && !isNullOrUndefined(Object.keys(newProp.query))) {
        this.actionCompleteData = this.getModuleName() === "combobox" ? {
          ulElement: null,
          list: null,
          isUpdated: false
        } : this.actionCompleteData;
        this.actionData = this.actionCompleteData;
      }
    };
    DropDownList2.prototype.updateDataSource = function(props, oldProps) {
      if (this.inputElement.value !== "" || !isNullOrUndefined(props) && (isNullOrUndefined(props.dataSource) || !(props.dataSource instanceof DataManager) && props.dataSource.length === 0)) {
        this.clearAll(null, props);
      }
      if (this.fields.groupBy && props.fields && !this.isGroupChecking && this.list) {
        EventHandler.remove(this.list, "scroll", this.setFloatingHeader);
        EventHandler.add(this.list, "scroll", this.setFloatingHeader, this);
      }
      if (!(!isNullOrUndefined(props) && (isNullOrUndefined(props.dataSource) || !(props.dataSource instanceof DataManager) && props.dataSource.length === 0)) || props.dataSource instanceof DataManager || !isNullOrUndefined(props) && Array.isArray(props.dataSource) && !isNullOrUndefined(oldProps) && Array.isArray(oldProps.dataSource) && props.dataSource.length !== oldProps.dataSource.length) {
        this.typedString = "";
        this.resetList(this.dataSource);
      }
      if (!this.isCustomFilter && !this.isFilterFocus && document.activeElement !== this.filterInput) {
        this.checkCustomValue();
      }
    };
    DropDownList2.prototype.checkCustomValue = function() {
      var currentValue = this.allowObjectBinding && !isNullOrUndefined(this.value) ? getValue(this.fields.value ? this.fields.value : "", this.value) : this.value;
      this.itemData = this.getDataByValue(currentValue);
      var dataItem = this.getItemData();
      var value = this.allowObjectBinding ? this.itemData : dataItem.value;
      var index = isNullOrUndefined(value) ? null : this.index;
      if (isNullOrUndefined(index) && currentValue === value || this.isAngular) {
        this.setProperties({
          "text": dataItem.text ? dataItem.text.toString() : dataItem.text,
          "value": value
        });
      } else {
        this.setProperties({
          "text": dataItem.text ? dataItem.text.toString() : dataItem.text,
          "index": index,
          "value": value
        });
      }
    };
    DropDownList2.prototype.updateInputFields = function() {
      if (this.getModuleName() === "dropdownlist") {
        Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
      }
    };
    DropDownList2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var _this = this;
      if (!isNullOrUndefined(newProp.dataSource) && !this.isTouched && isNullOrUndefined(newProp.value) && isNullOrUndefined(newProp.index) && !isNullOrUndefined(this.preselectedIndex) && !isNullOrUndefined(this.index)) {
        newProp.index = this.index;
      }
      if (!isNullOrUndefined(newProp.value) || !isNullOrUndefined(newProp.index)) {
        this.isTouched = true;
      }
      if (this.getModuleName() === "dropdownlist") {
        this.checkData(newProp);
        this.setUpdateInitial(["fields", "query", "dataSource"], newProp);
      }
      var _loop_1 = function(prop2) {
        switch (prop2) {
          case "query":
          case "dataSource":
            this_1.getSkeletonCount();
            this_1.checkAndResetCache();
            break;
          case "htmlAttributes":
            this_1.setHTMLAttributes();
            break;
          case "width":
            this_1.setEleWidth(newProp.width);
            Input.calculateWidth(this_1.inputElement, this_1.inputWrapper.container);
            break;
          case "placeholder":
            Input.setPlaceholder(newProp.placeholder, this_1.inputElement);
            break;
          case "filterBarPlaceholder":
            if (this_1.filterInput) {
              Input.setPlaceholder(newProp.filterBarPlaceholder, this_1.filterInput);
            }
            break;
          case "readonly":
            if (this_1.getModuleName() !== "dropdownlist") {
              Input.setReadonly(newProp.readonly, this_1.inputElement);
            }
            this_1.setReadOnly();
            break;
          case "cssClass":
            this_1.setCssClass(newProp.cssClass, oldProp.cssClass);
            Input.calculateWidth(this_1.inputElement, this_1.inputWrapper.container);
            break;
          case "enableRtl":
            this_1.setEnableRtl();
            break;
          case "enabled":
            this_1.setEnable();
            break;
          case "text":
            if (this_1.fields.disabled) {
              newProp.text = newProp.text && !this_1.isDisabledItemByIndex(this_1.getIndexByValue(this_1.getValueByText(newProp.text))) ? newProp.text : null;
            }
            if (newProp.text === null) {
              this_1.clearAll();
              break;
            }
            if (this_1.enableVirtualization) {
              this_1.updateValues();
              this_1.updateInputFields();
              this_1.notify("setCurrentViewDataAsync", {
                module: "VirtualScroll"
              });
              break;
            }
            if (!this_1.list) {
              if (this_1.dataSource instanceof DataManager) {
                this_1.initialRemoteRender = true;
              }
              this_1.renderList();
            }
            if (!this_1.initialRemoteRender) {
              var li = this_1.getElementByText(newProp.text);
              if (!this_1.checkValidLi(li)) {
                if (this_1.liCollections && this_1.liCollections.length === 100 && this_1.getModuleName() === "autocomplete" && this_1.listData.length > 100) {
                  this_1.setSelectionData(newProp.text, oldProp.text, "text");
                } else if (newProp.text && this_1.dataSource instanceof DataManager) {
                  var listLength_1 = this_1.getItems().length;
                  var checkField = isNullOrUndefined(this_1.fields.text) ? this_1.fields.value : this_1.fields.text;
                  this_1.typedString = "";
                  this_1.dataSource.executeQuery(this_1.getQuery(this_1.query).where(new Predicate(checkField, "equal", newProp.text))).then(function(e) {
                    if (e.result.length > 0) {
                      _this.addItem(e.result, listLength_1);
                      _this.updateValues();
                    } else {
                      _this.setOldText(oldProp.text);
                    }
                  });
                } else if (this_1.getModuleName() === "autocomplete") {
                  this_1.setInputValue(newProp, oldProp);
                } else {
                  this_1.setOldText(oldProp.text);
                }
              }
              this_1.updateInputFields();
            }
            break;
          case "value":
            if (this_1.fields.disabled) {
              newProp.value = newProp.value != null && !this_1.isDisableItemValue(newProp.value) ? newProp.value : null;
            }
            if (newProp.value === null) {
              this_1.clearAll();
              break;
            }
            if (this_1.allowObjectBinding && !isNullOrUndefined(newProp.value) && !isNullOrUndefined(oldProp.value) && this_1.isObjectInArray(newProp.value, [oldProp.value])) {
              return {
                value: void 0
              };
            }
            if (this_1.enableVirtualization) {
              this_1.updateValues();
              this_1.updateInputFields();
              this_1.notify("setCurrentViewDataAsync", {
                module: "VirtualScroll"
              });
              this_1.preventChange = this_1.isAngular && this_1.preventChange ? !this_1.preventChange : this_1.preventChange;
              break;
            }
            this_1.notify("beforeValueChange", {
              newProp
            });
            if (!this_1.list) {
              if (this_1.dataSource instanceof DataManager) {
                this_1.initialRemoteRender = true;
              }
              this_1.renderList();
            }
            if (!this_1.initialRemoteRender) {
              var value = this_1.allowObjectBinding && !isNullOrUndefined(newProp.value) ? getValue(this_1.fields.value ? this_1.fields.value : "", newProp.value) : newProp.value;
              var item = this_1.getElementByValue(value);
              if (!this_1.checkValidLi(item)) {
                if (this_1.liCollections && this_1.liCollections.length === 100 && this_1.getModuleName() === "autocomplete" && this_1.listData.length > 100) {
                  this_1.setSelectionData(newProp.value, oldProp.value, "value");
                } else if (newProp.value && this_1.dataSource instanceof DataManager) {
                  var listLength_2 = this_1.getItems().length;
                  var checkField = isNullOrUndefined(this_1.fields.value) ? this_1.fields.text : this_1.fields.value;
                  this_1.typedString = "";
                  var value_3 = this_1.allowObjectBinding && !isNullOrUndefined(newProp.value) ? getValue(checkField, newProp.value) : newProp.value;
                  this_1.dataSource.executeQuery(this_1.getQuery(this_1.query).where(new Predicate(checkField, "equal", value_3))).then(function(e) {
                    if (e.result.length > 0) {
                      _this.addItem(e.result, listLength_2);
                      _this.updateValues();
                    } else {
                      _this.setOldValue(oldProp.value);
                    }
                  });
                } else if (this_1.getModuleName() === "autocomplete") {
                  this_1.setInputValue(newProp, oldProp);
                } else {
                  this_1.setOldValue(oldProp.value);
                }
              }
              this_1.updateInputFields();
              this_1.preventChange = this_1.isAngular && this_1.preventChange ? !this_1.preventChange : this_1.preventChange;
            }
            break;
          case "index":
            if (this_1.fields.disabled) {
              newProp.index = newProp.index != null && !this_1.isDisabledItemByIndex(newProp.index) ? newProp.index : null;
            }
            if (newProp.index === null) {
              this_1.clearAll();
              break;
            }
            if (!this_1.list) {
              if (this_1.dataSource instanceof DataManager) {
                this_1.initialRemoteRender = true;
              }
              this_1.renderList();
            }
            if (!this_1.initialRemoteRender && this_1.liCollections) {
              var element = this_1.liCollections[newProp.index];
              if (!this_1.checkValidLi(element)) {
                if (this_1.liCollections && this_1.liCollections.length === 100 && this_1.getModuleName() === "autocomplete" && this_1.listData.length > 100) {
                  this_1.setSelectionData(newProp.index, oldProp.index, "index");
                } else {
                  this_1.index = oldProp.index;
                }
              }
              this_1.updateInputFields();
            }
            break;
          case "footerTemplate":
            if (this_1.popupObj) {
              this_1.setFooterTemplate(this_1.popupObj.element);
            }
            break;
          case "headerTemplate":
            if (this_1.popupObj) {
              this_1.setHeaderTemplate(this_1.popupObj.element);
            }
            break;
          case "valueTemplate":
            if (!isNullOrUndefined(this_1.itemData) && this_1.valueTemplate !== null) {
              this_1.setValueTemplate();
            }
            break;
          case "allowFiltering":
            if (this_1.allowFiltering) {
              this_1.actionCompleteData = {
                ulElement: this_1.ulElement,
                list: this_1.listData,
                isUpdated: true
              };
              this_1.actionData = this_1.actionCompleteData;
              this_1.updateSelectElementData(this_1.allowFiltering);
            }
            break;
          case "floatLabelType":
            Input.removeFloating(this_1.inputWrapper);
            Input.addFloating(this_1.inputElement, newProp.floatLabelType, this_1.placeholder, this_1.createElement);
            if (!isNullOrUndefined(this_1.inputWrapper.buttons[0]) && this_1.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0] && this_1.floatLabelType !== "Never") {
              this_1.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
            }
            break;
          case "showClearButton":
            if (!this_1.inputWrapper.clearButton) {
              Input.setClearButton(newProp.showClearButton, this_1.inputElement, this_1.inputWrapper, null, this_1.createElement);
              this_1.bindClearEvent();
            }
            break;
          default:
            {
              var ddlProps = this_1.getPropObject(prop2, newProp, oldProp);
              _super.prototype.onPropertyChanged.call(this_1, ddlProps.newProperty, ddlProps.oldProperty);
            }
            break;
        }
      };
      var this_1 = this;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        var state_1 = _loop_1(prop);
        if (typeof state_1 === "object") return state_1.value;
      }
    };
    DropDownList2.prototype.checkValidLi = function(element) {
      if (this.isValidLI(element)) {
        this.setSelection(element, null);
        return true;
      }
      return false;
    };
    DropDownList2.prototype.setSelectionData = function(newProp, oldProp, prop) {
      var _this = this;
      var li;
      this.updateListValues = function() {
        if (prop === "text") {
          li = _this.getElementByText(newProp);
          if (!_this.checkValidLi(li)) {
            _this.setOldText(oldProp);
          }
        } else if (prop === "value") {
          var fields = _this.fields.value ? _this.fields.value : "";
          var value = _this.allowObjectBinding && !isNullOrUndefined(newProp) ? getValue(fields, newProp) : newProp;
          li = _this.getElementByValue(newProp);
          if (!_this.checkValidLi(li)) {
            _this.setOldValue(oldProp);
          }
        } else if (prop === "index") {
          li = _this.liCollections[newProp];
          if (!_this.checkValidLi(li)) {
            _this.index = oldProp;
          }
        }
      };
    };
    DropDownList2.prototype.updatePopupState = function() {
      if (this.beforePopupOpen) {
        this.beforePopupOpen = false;
        this.showPopup();
      }
    };
    DropDownList2.prototype.setReadOnly = function() {
      if (this.readonly) {
        addClass([this.inputWrapper.container], ["e-readonly"]);
      } else {
        removeClass([this.inputWrapper.container], ["e-readonly"]);
      }
    };
    DropDownList2.prototype.setInputValue = function(newProp, oldProp) {
    };
    DropDownList2.prototype.setCssClass = function(newClass, oldClass) {
      if (!isNullOrUndefined(oldClass)) {
        oldClass = oldClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(newClass)) {
        newClass = newClass.replace(/\s+/g, " ").trim();
      }
      Input.setCssClass(newClass, [this.inputWrapper.container], oldClass);
      if (this.popupObj) {
        Input.setCssClass(newClass, [this.popupObj.element], oldClass);
      }
    };
    DropDownList2.prototype.getModuleName = function() {
      return "dropdownlist";
    };
    DropDownList2.prototype.showPopup = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.getModuleName() === "dropdownlist" && this.beforePopupOpen && !this.isPopupOpen) {
        this.beforePopupOpen = false;
      }
      this.firstItem = this.dataSource && this.dataSource.length > 0 ? this.dataSource[0] : null;
      if (this.isReact && this.getModuleName() === "combobox" && this.itemTemplate && this.isCustomFilter && this.isAddNewItemTemplate) {
        this.renderList();
        this.isAddNewItemTemplate = false;
      }
      if (this.isFiltering() && this.dataSource instanceof DataManager && this.actionData.list !== this.actionCompleteData.list && this.actionData.list && this.actionData.ulElement) {
        this.actionCompleteData = this.actionData;
        this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list, null, true);
      }
      if (this.beforePopupOpen) {
        this.refreshPopup();
        return;
      }
      this.beforePopupOpen = true;
      if (this.isFiltering() && !this.isActive && this.actionCompleteData.list && this.actionCompleteData.list[0]) {
        this.isActive = true;
        this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list, null, true);
      } else if (isNullOrUndefined(this.list) || !isUndefined(this.list) && (this.list.classList.contains(dropDownBaseClasses.noData) || this.list.querySelectorAll("." + dropDownBaseClasses.li).length <= 0)) {
        if (this.isReact && this.isFiltering() && this.itemTemplate != null) {
          this.isSecondClick = false;
        }
        this.renderList(e);
      }
      if (this.enableVirtualization && this.listData && this.listData.length) {
        if (!isNullOrUndefined(this.value) && (this.getModuleName() === "dropdownlist" || this.getModuleName() === "combobox")) {
          this.removeHover();
        }
        if (!this.beforePopupOpen) {
          this.notify("setCurrentViewDataAsync", {
            module: "VirtualScroll"
          });
        }
      }
      if (this.beforePopupOpen) {
        this.invokeRenderPopup(e);
      }
      if (this.enableVirtualization && !this.allowFiltering && this.selectedValueInfo != null && this.selectedValueInfo.startIndex > 0 && this.value != null) {
        this.notify("dataProcessAsync", {
          module: "VirtualScroll",
          isOpen: true
        });
      }
      if (!this.isSecondClick && !this.isDropDownClick) {
        this.executeCloneElements();
      }
    };
    DropDownList2.prototype.executeCloneElements = function() {
      var proxy = this;
      var duration = this.element.tagName === this.getNgDirective() && this.itemTemplate ? 500 : 100;
      if (this.isReact && this.isFiltering() && this.itemTemplate != null) {
        setTimeout(function() {
          proxy.cloneElements();
          proxy.isSecondClick = proxy.isReact && proxy.isFiltering() && proxy.dataSource instanceof DataManager && !proxy.list.querySelector("ul") ? false : true;
        }, duration);
      }
    };
    DropDownList2.prototype.invokeRenderPopup = function(e) {
      if (Browser.isDevice && this.isFilterLayout()) {
        var proxy_2 = this;
        window.onpopstate = function() {
          proxy_2.hidePopup();
        };
        history.pushState({}, "");
      }
      if (!isNullOrUndefined(this.list) && (!isNullOrUndefined(this.list.children[0]) || this.list.classList.contains(dropDownBaseClasses.noData))) {
        this.renderPopup(e);
      }
    };
    DropDownList2.prototype.renderHightSearch = function() {
    };
    DropDownList2.prototype.hidePopup = function(e) {
      if (this.isEscapeKey && this.getModuleName() === "dropdownlist") {
        if (!isNullOrUndefined(this.inputElement)) {
          Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
        }
        this.isEscapeKey = false;
        if (!isNullOrUndefined(this.index)) {
          var value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value) : this.value;
          var element = this.findListElement(this.ulElement, "li", "data-value", value);
          this.selectedLI = this.liCollections[this.index] || element;
          if (this.selectedLI) {
            this.updateSelectedItem(this.selectedLI, null, true);
            if (this.valueTemplate && this.itemData !== null) {
              this.setValueTemplate();
            }
          }
        } else {
          this.resetSelection();
        }
      }
      this.isVirtualTrackHeight = false;
      this.customFilterQuery = null;
      this.closePopup(0, e);
      var dataItem = this.getItemData();
      var isSelectVal = !isNullOrUndefined(this.selectedLI);
      if (isSelectVal && this.enableVirtualization && this.selectedLI.classList) {
        isSelectVal = this.selectedLI.classList.contains("e-active");
      }
      if (this.inputElement && this.inputElement.value === "" && !this.isInteracted && (this.isSelectCustom || isSelectVal && this.inputElement.value !== dataItem.text)) {
        this.isSelectCustom = false;
        this.clearAll(e);
      }
    };
    DropDownList2.prototype.focusIn = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.targetElement().classList.contains(dropDownListClasses.disable)) {
        return;
      }
      var isFocused = false;
      if (this.preventFocus && Browser.isDevice) {
        this.inputWrapper.container.tabIndex = 1;
        this.inputWrapper.container.focus();
        this.preventFocus = false;
        isFocused = true;
      }
      if (!isFocused) {
        this.targetElement().focus();
      }
      addClass([this.inputWrapper.container], [dropDownListClasses.inputFocus]);
      this.onFocus(e);
      if (this.floatLabelType !== "Never") {
        Input.calculateWidth(this.inputElement, this.inputWrapper.container);
      }
    };
    DropDownList2.prototype.focusOut = function(e) {
      if (!this.enabled) {
        return;
      }
      if (!this.enableVirtualization && (this.getModuleName() === "combobox" || this.getModuleName() === "autocomplete")) {
        this.isTyped = true;
      }
      this.hidePopup(e);
      if (this.targetElement()) {
        this.targetElement().blur();
      }
      removeClass([this.inputWrapper.container], [dropDownListClasses.inputFocus]);
      if (this.floatLabelType !== "Never") {
        Input.calculateWidth(this.inputElement, this.inputWrapper.container);
      }
    };
    DropDownList2.prototype.disableItem = function(item) {
      if (this.fields.disabled) {
        if (!this.list) {
          this.renderList();
        }
        var itemIndex = -1;
        if (this.liCollections && this.liCollections.length > 0 && this.listData && this.fields.disabled) {
          if (typeof item === "string") {
            itemIndex = this.getIndexByValue(item);
          } else if (typeof item === "object") {
            if (item instanceof HTMLLIElement) {
              for (var index = 0; index < this.liCollections.length; index++) {
                if (this.liCollections[index] === item) {
                  itemIndex = this.getIndexByValue(item.getAttribute("data-value"));
                  break;
                }
              }
            } else {
              var value = JSON.parse(JSON.stringify(item))[this.fields.value];
              for (var index = 0; index < this.listData.length; index++) {
                if (JSON.parse(JSON.stringify(this.listData[index]))[this.fields.value] === value) {
                  itemIndex = this.getIndexByValue(value);
                  break;
                }
              }
            }
          } else {
            itemIndex = item;
          }
          var isValidIndex = itemIndex < this.liCollections.length && itemIndex > -1;
          if (isValidIndex && !JSON.parse(JSON.stringify(this.listData[itemIndex]))[this.fields.disabled]) {
            var li = this.liCollections[itemIndex];
            if (li) {
              this.disableListItem(li);
              var parsedData = JSON.parse(JSON.stringify(this.listData[itemIndex]));
              parsedData[this.fields.disabled] = true;
              this.listData[itemIndex] = parsedData;
              this.dataSource = this.listData;
              if (li.classList.contains(dropDownListClasses.focus)) {
                this.removeFocus();
              }
              if (li.classList.contains(dropDownListClasses.selected)) {
                this.clear();
              }
            }
          }
        }
      }
    };
    DropDownList2.prototype.destroy = function() {
      this.isActive = false;
      if (this.showClearButton) {
        this.clearButton = document.getElementsByClassName("e-clear-icon")[0];
      }
      resetIncrementalSearchValues(this.element.id);
      if (this.isReact) {
        this.clearTemplate();
      }
      this.hidePopup();
      if (this.popupObj) {
        this.popupObj.hide();
      }
      this.unWireEvent();
      if (this.list) {
        this.unWireListEvents();
      }
      if (this.element && !this.element.classList.contains("e-" + this.getModuleName())) {
        return;
      }
      if (this.inputElement) {
        var attrArray = ["readonly", "aria-disabled", "placeholder", "aria-labelledby", "aria-expanded", "autocomplete", "aria-readonly", "autocapitalize", "spellcheck", "aria-autocomplete", "aria-live", "aria-describedby", "aria-label"];
        for (var i = 0; i < attrArray.length; i++) {
          this.inputElement.removeAttribute(attrArray[i]);
        }
        this.inputElement.setAttribute("tabindex", this.tabIndex);
        this.inputElement.classList.remove("e-input");
        Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton);
      }
      this.element.removeAttribute("tabindex");
      this.element.style.display = "block";
      if (this.inputWrapper.container && this.inputWrapper.container.parentElement) {
        if (this.inputWrapper.container.parentElement.tagName === this.getNgDirective()) {
          detach(this.inputWrapper.container);
        } else {
          this.inputWrapper.container.parentElement.insertBefore(this.element, this.inputWrapper.container);
          detach(this.inputWrapper.container);
        }
      }
      delete this.hiddenElement;
      this.filterInput = null;
      this.keyboardModule = null;
      this.ulElement = null;
      this.list = null;
      this.clearIconElement = null;
      this.popupObj = null;
      this.popupContentElement = null;
      this.rippleFun = null;
      this.selectedLI = null;
      this.liCollections = null;
      this.item = null;
      this.footer = null;
      this.header = null;
      this.previousSelectedLI = null;
      this.valueTempElement = null;
      this.actionData.ulElement = null;
      if (this.inputElement && !isNullOrUndefined(this.inputElement.onchange)) {
        this.inputElement.onchange = null;
      }
      if (this.inputElement && !isNullOrUndefined(this.inputElement.onselect)) {
        this.inputElement.onselect = null;
      }
      Input.destroy({
        element: this.inputElement,
        floatLabelType: this.floatLabelType,
        properties: this.properties,
        buttons: this.inputWrapper.container.querySelectorAll(".e-input-group-icon")[0]
      }, this.clearButton);
      this.clearButton = null;
      this.inputElement = null;
      this.inputWrapper = null;
      _super.prototype.destroy.call(this);
    };
    DropDownList2.prototype.getItems = function() {
      if (!this.list) {
        if (this.dataSource instanceof DataManager) {
          this.initialRemoteRender = true;
        }
        this.renderList();
      }
      return this.ulElement ? _super.prototype.getItems.call(this) : [];
    };
    DropDownList2.prototype.getDataByValue = function(value) {
      return _super.prototype.getDataByValue.call(this, value);
    };
    DropDownList2.prototype.clear = function() {
      this.value = null;
    };
    __decorate10([Property(null)], DropDownList2.prototype, "cssClass", void 0);
    __decorate10([Property("100%")], DropDownList2.prototype, "width", void 0);
    __decorate10([Property(true)], DropDownList2.prototype, "enabled", void 0);
    __decorate10([Property(false)], DropDownList2.prototype, "enablePersistence", void 0);
    __decorate10([Property("300px")], DropDownList2.prototype, "popupHeight", void 0);
    __decorate10([Property("100%")], DropDownList2.prototype, "popupWidth", void 0);
    __decorate10([Property(null)], DropDownList2.prototype, "placeholder", void 0);
    __decorate10([Property(null)], DropDownList2.prototype, "filterBarPlaceholder", void 0);
    __decorate10([Property({})], DropDownList2.prototype, "htmlAttributes", void 0);
    __decorate10([Property(null)], DropDownList2.prototype, "query", void 0);
    __decorate10([Property(null)], DropDownList2.prototype, "valueTemplate", void 0);
    __decorate10([Property(null)], DropDownList2.prototype, "headerTemplate", void 0);
    __decorate10([Property(null)], DropDownList2.prototype, "footerTemplate", void 0);
    __decorate10([Property(false)], DropDownList2.prototype, "allowFiltering", void 0);
    __decorate10([Property(300)], DropDownList2.prototype, "debounceDelay", void 0);
    __decorate10([Property(true)], DropDownList2.prototype, "isDeviceFullScreen", void 0);
    __decorate10([Property(false)], DropDownList2.prototype, "readonly", void 0);
    __decorate10([Property(false)], DropDownList2.prototype, "enableVirtualization", void 0);
    __decorate10([Property(false)], DropDownList2.prototype, "allowResize", void 0);
    __decorate10([Property(null)], DropDownList2.prototype, "text", void 0);
    __decorate10([Property(null)], DropDownList2.prototype, "value", void 0);
    __decorate10([Property(false)], DropDownList2.prototype, "allowObjectBinding", void 0);
    __decorate10([Property(null)], DropDownList2.prototype, "index", void 0);
    __decorate10([Property("Never")], DropDownList2.prototype, "floatLabelType", void 0);
    __decorate10([Property(false)], DropDownList2.prototype, "showClearButton", void 0);
    __decorate10([Event2()], DropDownList2.prototype, "filtering", void 0);
    __decorate10([Event2()], DropDownList2.prototype, "change", void 0);
    __decorate10([Event2()], DropDownList2.prototype, "beforeOpen", void 0);
    __decorate10([Event2()], DropDownList2.prototype, "open", void 0);
    __decorate10([Event2()], DropDownList2.prototype, "close", void 0);
    __decorate10([Event2()], DropDownList2.prototype, "blur", void 0);
    __decorate10([Event2()], DropDownList2.prototype, "focus", void 0);
    __decorate10([Event2()], DropDownList2.prototype, "resizeStop", void 0);
    __decorate10([Event2()], DropDownList2.prototype, "resizing", void 0);
    __decorate10([Event2()], DropDownList2.prototype, "resizeStart", void 0);
    DropDownList2 = __decorate10([NotifyPropertyChanges], DropDownList2);
    return DropDownList2;
  }(DropDownBase)
);

// node_modules/@syncfusion/ej2-dropdowns/src/drop-down-tree/drop-down-tree.js
var __extends24 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate11 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RTL3 = "e-rtl";
var DROPDOWNTREE = "e-ddt";
var HIDDENELEMENT = "e-ddt-hidden";
var DROPDOWNICON = "e-input-group-icon e-ddt-icon e-icons";
var SHOW_CHIP = "e-show-chip";
var SHOW_CLEAR = "e-show-clear";
var SHOW_DD_ICON = "e-show-dd-icon";
var CHIP_INPUT = "e-chip-input";
var INPUTFOCUS = "e-input-focus";
var INPUTGROUP = "e-input-group";
var ICONANIMATION = "e-icon-anim";
var CLOSEICON_CLASS = "e-clear-icon e-icons";
var CHIP_WRAPPER = "e-chips-wrapper";
var CHIP_COLLECTION = "e-chips-collection";
var CHIP = "e-chips";
var CHIP_CONTENT = "e-chipcontent";
var CHIP_CLOSE = "e-chips-close";
var HIDEICON = "e-icon-hide";
var DDTHIDEICON = "e-ddt-icon-hide";
var POPUP_CLASS = "e-ddt e-popup";
var PARENTITEM = "e-list-parent";
var CONTENT2 = "e-popup-content";
var DROPDOWN = "e-dropdown";
var DISABLED = "e-disabled";
var ICONS = "e-icons";
var CHECKALLPARENT = "e-selectall-parent";
var CHECKALLHIDE = "e-hide-selectall";
var BIGGER = "e-bigger";
var SMALL = "e-small";
var ALLTEXT = "e-all-text";
var CHECKBOXFRAME = "e-frame";
var CHECK = "e-check";
var CHECKBOXWRAP = "e-checkbox-wrapper";
var FILTERWRAP = "e-filter-wrap";
var DDTICON = "e-ddt-icon";
var FOOTER = "e-ddt-footer";
var HEADER = "e-ddt-header";
var NODATACONTAINER = "e-ddt-nodata";
var NODATA = "e-no-data";
var HEADERTEMPLATE = "HeaderTemplate";
var FOOTERTEMPLATE = "FooterTemplate";
var NORECORDSTEMPLATE = "NoRecordsTemplate";
var ACTIONFAILURETEMPLATE = "ActionFailureTemplate";
var CUSTOMTEMPLATE = "CustomTemplate";
var REMAIN_WRAPPER = "e-remain";
var OVERFLOW_VIEW = "e-overflow";
var SHOW_TEXT = "e-show-text";
var TOTAL_COUNT_WRAPPER = "e-total-count";
var REMAIN_COUNT = "e-wrap-count";
var Fields = (
  /** @class */
  function(_super) {
    __extends24(Fields2, _super);
    function Fields2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate11([Property("child")], Fields2.prototype, "child", void 0);
    __decorate11([Property([])], Fields2.prototype, "dataSource", void 0);
    __decorate11([Property("expanded")], Fields2.prototype, "expanded", void 0);
    __decorate11([Property("hasChildren")], Fields2.prototype, "hasChildren", void 0);
    __decorate11([Property("htmlAttributes")], Fields2.prototype, "htmlAttributes", void 0);
    __decorate11([Property("iconCss")], Fields2.prototype, "iconCss", void 0);
    __decorate11([Property("imageUrl")], Fields2.prototype, "imageUrl", void 0);
    __decorate11([Property("parentValue")], Fields2.prototype, "parentValue", void 0);
    __decorate11([Property(null)], Fields2.prototype, "query", void 0);
    __decorate11([Property("selectable")], Fields2.prototype, "selectable", void 0);
    __decorate11([Property("selected")], Fields2.prototype, "selected", void 0);
    __decorate11([Property(null)], Fields2.prototype, "tableName", void 0);
    __decorate11([Property("text")], Fields2.prototype, "text", void 0);
    __decorate11([Property("tooltip")], Fields2.prototype, "tooltip", void 0);
    __decorate11([Property("value")], Fields2.prototype, "value", void 0);
    return Fields2;
  }(ChildProperty)
);
var TreeSettings = (
  /** @class */
  function(_super) {
    __extends24(TreeSettings2, _super);
    function TreeSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate11([Property(false)], TreeSettings2.prototype, "autoCheck", void 0);
    __decorate11([Property(true)], TreeSettings2.prototype, "checkDisabledChildren", void 0);
    __decorate11([Property("Auto")], TreeSettings2.prototype, "expandOn", void 0);
    __decorate11([Property(false)], TreeSettings2.prototype, "loadOnDemand", void 0);
    return TreeSettings2;
  }(ChildProperty)
);
var DropDownTree = (
  /** @class */
  function(_super) {
    __extends24(DropDownTree2, _super);
    function DropDownTree2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.filterTimer = null;
      _this.isFilteredData = false;
      _this.isFilterRestore = false;
      _this.selectedData = [];
      _this.filterDelayTime = 300;
      _this.isClicked = false;
      _this.documentClickContext = _this.onDocumentClick.bind(_this);
      _this.isCheckAllCalled = false;
      _this.isFromFilterChange = false;
      return _this;
    }
    DropDownTree2.prototype.getPersistData = function() {
      var keyEntity = ["value"];
      return this.addOnPersist(keyEntity);
    };
    DropDownTree2.prototype.getLocaleName = function() {
      return "drop-down-tree";
    };
    DropDownTree2.prototype.preRender = function() {
      this.inputFocus = false;
      this.isPopupOpen = false;
      this.isFirstRender = true;
      this.isInitialized = false;
      this.currentText = null;
      this.currentValue = null;
      this.oldValue = null;
      this.removeValue = false;
      this.selectedText = [];
      this.treeItems = [];
      this.dataValue = null;
      this.isNodeSelected = false;
      this.isDynamicChange = false;
      this.clearIconWidth = 0;
      this.headerTemplateId = "" + this.element.id + HEADERTEMPLATE;
      this.footerTemplateId = "" + this.element.id + FOOTERTEMPLATE;
      this.actionFailureTemplateId = "" + this.element.id + ACTIONFAILURETEMPLATE;
      this.noRecordsTemplateId = "" + this.element.id + NORECORDSTEMPLATE;
      this.customTemplateId = "" + this.element.id + CUSTOMTEMPLATE;
      this.keyConfigs = {
        escape: "escape",
        altUp: "alt+uparrow",
        altDown: "alt+downarrow",
        tab: "tab",
        shiftTab: "shift+tab",
        end: "end",
        enter: "enter",
        home: "home",
        moveDown: "downarrow",
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        moveUp: "uparrow",
        ctrlDown: "ctrl+downarrow",
        ctrlUp: "ctrl+uparrow",
        ctrlEnter: "ctrl+enter",
        ctrlHome: "ctrl+home",
        ctrlEnd: "ctrl+end",
        shiftDown: "shift+downarrow",
        shiftUp: "shift+uparrow",
        shiftEnter: "shift+enter",
        shiftHome: "shift+home",
        shiftEnd: "shift+end",
        csDown: "ctrl+shift+downarrow",
        csUp: "ctrl+shift+uparrow",
        csEnter: "ctrl+shift+enter",
        csHome: "ctrl+shift+home",
        csEnd: "ctrl+shift+end",
        space: "space",
        ctrlA: "ctrl+A"
      };
    };
    DropDownTree2.prototype.render = function() {
      var isTree = select("#" + this.element.id + "_tree", document);
      if (isTree) {
        var popupDiv = select("#" + this.element.id + "_options", document);
        detach(popupDiv ? popupDiv : isTree.parentElement);
      }
      if (this.element.tagName === "INPUT") {
        this.inputEle = this.element;
        if (isNullOrUndefined(this.inputEle.getAttribute("role"))) {
          this.inputEle.setAttribute("aria-expanded", "false");
          this.inputEle.setAttribute("role", "combobox");
          this.inputEle.setAttribute("aria-haspopup", "tree");
          this.inputEle.setAttribute("aria-controls", this.element.id + "_options");
        }
        if (isNullOrUndefined(this.inputEle.getAttribute("type"))) {
          this.inputEle.setAttribute("type", "text");
        }
      } else {
        if (!isNullOrUndefined(this.element.id)) {
          this.inputEle = this.createElement("input", {
            attrs: {
              role: "textbox",
              type: "text",
              id: this.element.id + "_textbox"
            }
          });
        } else {
          this.inputEle = this.createElement("input", {
            attrs: {
              role: "textbox",
              type: "text"
            }
          });
        }
        this.element.parentElement.insertBefore(this.inputEle, this.element);
      }
      this.inputObj = Input.createInput({
        element: this.inputEle,
        floatLabelType: this.floatLabelType,
        buttons: this.showDropDownIcon ? [DROPDOWNICON] : null,
        properties: {
          readonly: true,
          placeholder: this.placeholder,
          enabled: this.enabled,
          cssClass: this.cssClass,
          enableRtl: this.enableRtl
        }
      }, this.createElement);
      this.inputWrapper = this.inputObj.container;
      if (!this.inputWrapper.classList.contains(INPUTGROUP)) {
        this.inputWrapper.classList.add(INPUTGROUP);
      }
      if (this.showDropDownIcon) {
        this.inputWrapper.classList.add(SHOW_DD_ICON);
      }
      if (this.element.tagName === this.getDirective()) {
        this.element.appendChild(this.inputWrapper);
      }
      this.createHiddenElement();
      this.createClearIcon();
      this.inputWrapper.classList.add(DROPDOWNTREE);
      this.setElementWidth(this.width);
      this.updateDataAttribute();
      this.setHTMLAttributes();
      this.setAttributes();
      this.popupDiv = this.createElement("div", {
        className: CONTENT2
      });
      this.popupDiv.classList.add(DROPDOWN);
      this.tree = this.createElement("div", {
        id: this.element.id + "_tree"
      });
      this.popupDiv.appendChild(this.tree);
      if (!this.destroyPopupOnHide) {
        document.body.appendChild(this.popupDiv);
      }
      this.wireTreeEvents();
      addClass([this.popupDiv], DDTHIDEICON);
      this.renderTree();
      this.isRemoteData = this.fields.dataSource instanceof DataManager;
      if (this.allowMultiSelection || this.showCheckBox) {
        if (this.mode !== "Delimiter") {
          this.createChip();
        }
        if (!this.wrapText && this.mode !== "Custom") {
          this.overFlowWrapper = this.createElement("span", {
            className: OVERFLOW_VIEW + " " + HIDEICON
          });
          this.inputWrapper.insertBefore(this.overFlowWrapper, this.hiddenElement);
          if (this.mode !== "Box") {
            addClass([this.overFlowWrapper], SHOW_TEXT);
          }
        }
      }
      if (!this.isRemoteData) {
        this.setTreeValue();
        this.setTreeText();
        this.updateHiddenValue();
        this.setSelectedValue();
        if (!this.wrapText) {
          this.updateView();
        }
      }
      this.wireEvents();
      var firstUl = select("." + PARENTITEM, this.treeObj.element);
      if (firstUl && firstUl.getAttribute("aria-multiselectable")) {
        firstUl.removeAttribute("aria-multiselectable");
      }
      this.setOldValue();
      if (!this.isRemoteData) {
        this.isInitialized = true;
      }
      this.hasTemplate = this.itemTemplate || this.headerTemplate || this.footerTemplate || this.actionFailureTemplate || this.noRecordsTemplate || this.customTemplate || this.valueTemplate;
      this.renderComplete();
    };
    DropDownTree2.prototype.hideCheckAll = function(flag) {
      var checkAllEle = !isNullOrUndefined(this.popupEle) ? this.popupEle.querySelector("." + CHECKALLPARENT) : null;
      if (!isNullOrUndefined(checkAllEle)) {
        if (flag && !checkAllEle.classList.contains(CHECKALLHIDE)) {
          addClass([checkAllEle], CHECKALLHIDE);
        } else if (!flag && checkAllEle.classList.contains(CHECKALLHIDE)) {
          removeClass([checkAllEle], CHECKALLHIDE);
        }
      }
    };
    DropDownTree2.prototype.renderFilter = function() {
      this.filterContainer = this.createElement("div", {
        id: this.element.id + "_filter_wrap",
        className: FILTERWRAP
      });
      var filterInput2 = this.createElement("input", {
        id: this.element.id + "_filter",
        attrs: {
          autocomplete: "off",
          "aria-label": this.filterBarPlaceholder
        }
      });
      this.filterContainer.appendChild(filterInput2);
      prepend([this.filterContainer], this.popupEle);
      this.filterObj = new TextBox({
        value: "",
        showClearButton: true,
        placeholder: this.filterBarPlaceholder,
        input: this.filterChangeHandler.bind(this)
      });
      this.filterObj.appendTo("#" + this.element.id + "_filter");
      this.keyboardModule = new KeyboardEvents(this.filterObj.element, {
        keyAction: this.filterKeyAction.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
    };
    DropDownTree2.prototype.filterKeyAction = function(e) {
      var _this = this;
      var eventArgs = {
        cancel: false,
        event: e
      };
      var focusedElement;
      this.trigger("keyPress", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          switch (e.action) {
            case "altUp":
              if (_this.isPopupOpen) {
                _this.hidePopup();
              }
              break;
            case "shiftTab":
              addClass([_this.inputWrapper], [INPUTFOCUS]);
              break;
            case "moveDown":
              e.preventDefault();
              _this.filterObj.element.blur();
              focusedElement = _this.treeObj.element.querySelector("li");
              if (focusedElement) {
                focusedElement.focus();
              }
              break;
          }
        }
      });
    };
    DropDownTree2.prototype.filterChangeHandler = function(args) {
      var _this = this;
      if (!isNullOrUndefined(args.value)) {
        window.clearTimeout(this.filterTimer);
        this.filterTimer = window.setTimeout(function() {
          _this.filterHandler(args.value, args.event);
        }, this.filterDelayTime);
      }
    };
    DropDownTree2.prototype.isChildObject = function() {
      if (typeof this.treeObj.fields.child === "object") {
        return true;
      } else {
        return false;
      }
    };
    DropDownTree2.prototype.filterHandler = function(value, event2) {
      var _this = this;
      this.isFromFilterChange = true;
      if (!this.isFilteredData) {
        if (this.isRemoteData) {
          this.treeObj.expandedNodes = [];
        }
        this.treeData = this.treeObj.getTreeData();
      }
      var filterFields = this.cloneFields(this.fields);
      var args = {
        cancel: false,
        preventDefaultAction: false,
        event: event2,
        text: value.trim(),
        fields: filterFields
      };
      this.trigger("filtering", args, function(args2) {
        if (!args2.cancel) {
          var flag = false;
          var fields = void 0;
          _this.isFilteredData = true;
          if (args2.text === "") {
            _this.isFilteredData = false;
            _this.isFilterRestore = true;
            fields = _this.cloneFields(_this.fields);
            _this.treeObj.element.classList.remove("e-filtering");
          } else if (args2.preventDefaultAction) {
            fields = args2.fields;
            _this.treeObj.element.classList.add("e-filtering");
          } else {
            if (_this.treeDataType === 1) {
              fields = _this.selfReferencefilter(args2.text, args2.fields);
            } else {
              if (_this.fields.dataSource instanceof DataManager) {
                fields = _this.remoteDataFilter(args2.text, args2.fields);
                fields.child = _this.fields.child;
                _this.treeObj.fields = _this.getTreeFields(args2.fields);
                _this.treeObj.dataBind();
                flag = true;
              } else {
                fields = _this.nestedFilter(args2.text, args2.fields);
              }
            }
            _this.treeObj.element.classList.add("e-filtering");
          }
          _this.hideCheckAll(_this.isFilteredData);
          if (flag) {
            return;
          }
          if (_this.isRemoteData) {
            if (_this.isChildObject()) {
              fields.child = _this.fields.child;
            } else {
              fields = args2.fields;
            }
          }
          _this.treeObj.fields = _this.getTreeFields(fields);
          _this.treeObj.dataBind();
          if (_this.popupObj) {
            _this.popupObj.refreshPosition();
          }
          if (_this.hasTemplate && _this.portals && _this.treeObj.portals) {
            for (var i = 0; i < _this.treeObj.portals.length; i++) {
              if (_this.portals.indexOf(_this.treeObj.portals[i]) === -1) {
                _this.portals.push(_this.treeObj.portals[i]);
              }
            }
            if (_this.isReact) {
              _this.renderReactTemplates();
            }
          }
        }
      });
    };
    DropDownTree2.prototype.remoteDataFilter = function(value, filteredFields) {
      var _this = this;
      filteredFields.dataSource = this.treeData.map(function(item) {
        return _this.remoteChildFilter(value, item);
      }).filter(function(filteredChild) {
        return !isNullOrUndefined(filteredChild);
      });
      return filteredFields;
    };
    DropDownTree2.prototype.remoteChildFilter = function(value, node, isChild, isChildFiltering) {
      var children = this.isChildObject() ? node["child"] : node[this.fields.child];
      if (isNullOrUndefined(children)) {
        return this.isMatchedNode(value, node, isChild, isChildFiltering) ? node : null;
      }
      var matchedChildren = [];
      for (var i = 0; i < children.length; i++) {
        var filteredChild = this.remoteChildFilter(value, children[i], true, true);
        if (!isNullOrUndefined(filteredChild)) {
          matchedChildren.push(filteredChild);
        }
      }
      var filteredItems = Object.assign({}, node);
      isChildFiltering = false;
      if (matchedChildren.length !== 0) {
        filteredItems.child = matchedChildren;
      } else {
        filteredItems.child = null;
        filteredItems = this.isMatchedNode(value, filteredItems) ? filteredItems : null;
      }
      return filteredItems;
    };
    DropDownTree2.prototype.nestedFilter = function(value, filteredFields) {
      var matchedDataSource = [];
      for (var i = 0; i < this.treeData.length; i++) {
        var filteredChild = this.nestedChildFilter(value, this.treeData[parseInt(i.toString(), 10)]);
        if (!isNullOrUndefined(filteredChild)) {
          matchedDataSource.push(filteredChild);
        }
      }
      filteredFields.dataSource = matchedDataSource;
      return filteredFields;
    };
    DropDownTree2.prototype.nestedChildFilter = function(value, node) {
      var children = node[this.fields.child];
      if (isNullOrUndefined(children)) {
        return this.isMatchedNode(value, node) ? node : null;
      } else {
        var matchedChildren = [];
        for (var i = 0; i < children.length; i++) {
          var filteredChild = this.nestedChildFilter(value, children[parseInt(i.toString(), 10)]);
          if (!isNullOrUndefined(filteredChild)) {
            matchedChildren.push(filteredChild);
          }
        }
        var filteredItems = Object.assign({}, node);
        if (matchedChildren.length !== 0) {
          filteredItems[this.fields.child] = matchedChildren;
          return filteredItems;
        } else {
          filteredItems[this.fields.child] = null;
          return this.isMatchedNode(value, filteredItems) ? filteredItems : null;
        }
      }
    };
    DropDownTree2.prototype.selfReferencefilter = function(value, filteredFields) {
      var matchedData = [];
      var matchedDataSource = [];
      for (var i = 0; i < this.treeData.length; i++) {
        if (this.isMatchedNode(value, this.treeData[i])) {
          matchedData.push(this.treeData[i]);
        }
      }
      for (var i = 0; i < matchedData.length; i++) {
        if (matchedDataSource.indexOf(matchedData[i]) === -1) {
          matchedDataSource.push(matchedData[i]);
          var parentId = matchedData[parseInt(i.toString(), 10)][this.fields.parentValue];
          while (!isNullOrUndefined(parentId)) {
            var parent_1 = null;
            for (var j = 0; j < this.treeData.length; j++) {
              var value_1 = this.treeData[parseInt(j.toString(), 10)][this.fields.value];
              if (!isNullOrUndefined(value_1) && value_1 === parentId) {
                parent_1 = this.treeData[j];
                break;
              }
            }
            if (!isNullOrUndefined(parent_1) && matchedDataSource.indexOf(parent_1) === -1) {
              matchedDataSource.push(parent_1);
              parentId = parent_1[this.fields.parentValue];
            } else {
              break;
            }
          }
        }
      }
      filteredFields.dataSource = matchedDataSource;
      return filteredFields;
    };
    DropDownTree2.prototype.isMatchedNode = function(value, node, isChild, isChildFiltering) {
      var checkValue;
      var isObjectValue = isChild && isChildFiltering && this.isChildObject();
      checkValue = isObjectValue ? node[this.fields.child.text] : node[this.fields.text];
      if (!checkValue && !isNullOrUndefined(this.fields.child.text)) {
        var tempChild = this.fields.child;
        while (!node[tempChild.text]) {
          tempChild = tempChild.child;
        }
        checkValue = node[tempChild.text];
      }
      if (this.ignoreCase) {
        checkValue = checkValue.toLowerCase();
        value = value.toLowerCase();
      }
      if (this.ignoreAccent) {
        checkValue = DataUtil.ignoreDiacritics(checkValue);
        value = DataUtil.ignoreDiacritics(value);
      }
      if (this.filterType === "StartsWith") {
        return checkValue.slice(0, value.length) === value;
      } else if (this.filterType === "EndsWith") {
        return checkValue.slice(-value.length) === value;
      } else {
        return checkValue.indexOf(value) !== -1;
      }
    };
    DropDownTree2.prototype.wireEvents = function() {
      if (Browser.isIos) {
        EventHandler.add(this.inputWrapper, "touchstart", this.handleIosTouch, this);
      }
      EventHandler.add(this.inputWrapper, "mouseup", this.dropDownClick, this);
      EventHandler.add(this.inputWrapper, "focus", this.focusIn, this);
      EventHandler.add(this.inputWrapper, "blur", this.focusOut, this);
      EventHandler.add(this.inputWrapper, "mousemove", this.mouseIn, this);
      EventHandler.add(this.inputWrapper, "mouseout", this.onMouseLeave, this);
      EventHandler.add(this.overAllClear, "mousedown", this.clearAll, this);
      EventHandler.add(window, "resize", this.windowResize, this);
      var formElement = closest(this.inputWrapper, "form");
      if (formElement) {
        EventHandler.add(formElement, "reset", this.resetValueHandler, this);
      }
      this.keyboardModule = new KeyboardEvents(this.inputWrapper, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
    };
    DropDownTree2.prototype.wireTreeEvents = function() {
      this.keyboardModule = new KeyboardEvents(this.tree, {
        keyAction: this.treeAction.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
    };
    DropDownTree2.prototype.wireCheckAllWrapperEvents = function() {
      this.keyboardModule = new KeyboardEvents(this.checkAllParent, {
        keyAction: this.checkAllAction.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
    };
    DropDownTree2.prototype.unWireEvents = function() {
      if (Browser.isIos) {
        EventHandler.remove(this.inputWrapper, "touchstart", this.handleIosTouch);
      }
      EventHandler.remove(this.inputWrapper, "mouseup", this.dropDownClick);
      EventHandler.remove(this.inputWrapper, "focus", this.focusIn);
      EventHandler.remove(this.inputWrapper, "blur", this.focusOut);
      EventHandler.remove(this.inputWrapper, "mousemove", this.mouseIn);
      EventHandler.remove(this.inputWrapper, "mouseout", this.onMouseLeave);
      EventHandler.remove(this.overAllClear, "mousedown", this.clearAll);
      EventHandler.remove(window, "resize", this.windowResize);
      var formElement = closest(this.inputWrapper, "form");
      if (formElement) {
        EventHandler.remove(formElement, "reset", this.resetValueHandler);
      }
      this.keyboardModule.destroy();
      if (this.showSelectAll && this.checkAllParent) {
        EventHandler.remove(this.checkAllParent, "mouseup", this.clickHandler);
      }
      document.removeEventListener("mousedown", this.documentClickContext);
    };
    DropDownTree2.prototype.handleIosTouch = function(e) {
      e.preventDefault();
      this.dropDownClick(e);
    };
    DropDownTree2.prototype.dropDownClick = function(e) {
      if (!this.enabled || this.readonly) {
        return;
      }
      if (this.isClearButtonClick) {
        this.isClearButtonClick = false;
        return;
      }
      if (this.isPopupOpen) {
        this.hidePopup();
      } else {
        this.focusIn(e);
        this.renderPopup();
      }
      this.showOverAllClear();
    };
    DropDownTree2.prototype.mouseIn = function() {
      if (this.enabled || !this.readonly) {
        this.showOverAllClear();
      }
    };
    DropDownTree2.prototype.onMouseLeave = function() {
      if (!this.inputFocus) {
        addClass([this.overAllClear], HIDEICON);
        removeClass([this.inputWrapper], SHOW_CLEAR);
      }
    };
    DropDownTree2.prototype.getDirective = function() {
      return "EJS-DROPDOWNTREE";
    };
    DropDownTree2.prototype.focusOut = function(e) {
      if (!this.enabled || this.readonly || !this.inputFocus) {
        return;
      }
      if ((Browser.isIE || Browser.info.name === "edge") && e.target === this.inputWrapper) {
        return;
      }
      var target = e.relatedTarget;
      if (target !== this.inputEle && isNullOrUndefined(target) && (e.target !== this.inputWrapper || !this.isPopupOpen)) {
        this.onFocusOut(e);
      }
    };
    DropDownTree2.prototype.onFocusOut = function(event2) {
      this.inputFocus = false;
      if (this.isPopupOpen) {
        this.hidePopup();
      }
      if (this.isClearButtonClick) {
        this.isClearButtonClick = false;
      }
      if (this.showClearButton) {
        this.clearIconWidth = select(".e-clear-icon", this.inputWrapper).offsetWidth;
        addClass([this.overAllClear], HIDEICON);
        removeClass([this.inputWrapper], SHOW_CLEAR);
      }
      removeClass([this.inputWrapper], [INPUTFOCUS]);
      if (this.allowMultiSelection || this.showCheckBox) {
        var isValue = this.value ? this.value.length ? true : false : false;
        if (this.mode !== "Delimiter" && this.mode !== "Custom") {
          if (this.chipWrapper && this.mode === "Default") {
            addClass([this.chipWrapper], HIDEICON);
            removeClass([this.inputWrapper], SHOW_CHIP);
            removeClass([this.inputEle], CHIP_INPUT);
          }
        }
        if (isValue && this.mode !== "Custom") {
          this.showOrHideValueTemplate(true);
        }
        if (!this.wrapText && isValue) {
          this.updateView();
        }
      }
      if (this.changeOnBlur) {
        this.triggerChangeEvent(event2);
      }
      this.removeValue = false;
      this.setOldValue();
      this.trigger("blur");
    };
    DropDownTree2.prototype.updateView = function() {
      if (!this.showCheckBox && !this.allowMultiSelection || this.mode === "Custom" || this.inputFocus) {
        return;
      }
      if (this.mode !== "Box") {
        addClass([this.inputWrapper, this.overFlowWrapper], SHOW_TEXT);
      } else {
        addClass([this.inputWrapper], SHOW_CHIP);
      }
      if (this.value && this.value.length !== 0) {
        if (this.inputWrapper.contains(this.chipWrapper)) {
          addClass([this.chipWrapper], HIDEICON);
        }
        addClass([this.inputEle], CHIP_INPUT);
        this.updateOverFlowView();
      }
      this.ensurePlaceHolder();
    };
    DropDownTree2.prototype.triggerChangeEvent = function(event2) {
      var isEqual = this.ddtCompareValues(this.oldValue, this.value);
      if ((!isEqual || this.isChipDelete) && !this.removeValue) {
        var eventArgs = {
          e: event2,
          oldValue: this.oldValue,
          value: this.value,
          isInteracted: event2 ? true : false,
          element: this.element
        };
        this.trigger("change", eventArgs);
        this.setOldValue();
      }
    };
    DropDownTree2.prototype.ddtCompareValues = function(oldValue, newValue) {
      if (oldValue === null || newValue === null) {
        var isValid = oldValue === null ? newValue === oldValue ? true : false : oldValue.length === 0 ? newValue === oldValue : false;
        return isValid;
      } else if (oldValue.length !== newValue.length) {
        return false;
      }
      for (var i = 0; i < oldValue.length; i++) {
        if (oldValue[i] !== newValue[i]) {
          return false;
        }
      }
      return true;
    };
    DropDownTree2.prototype.focusIn = function(e) {
      if (!this.enabled || this.readonly || this.inputFocus) {
        return;
      }
      this.showOverAllClear();
      this.inputFocus = true;
      addClass([this.inputWrapper], [INPUTFOCUS]);
      if (this.allowMultiSelection || this.showCheckBox) {
        if (this.mode !== "Delimiter" && this.inputFocus) {
          if (this.chipWrapper && this.value && this.value.length !== 0) {
            removeClass([this.chipWrapper], HIDEICON);
            addClass([this.inputEle], CHIP_INPUT);
            this.showOrHideValueTemplate(false, true);
          }
          addClass([this.inputWrapper], SHOW_CHIP);
          if (this.popupObj) {
            this.popupObj.refreshPosition();
          }
        }
        if (!this.wrapText && this.mode !== "Custom") {
          if (this.inputWrapper.contains(this.overFlowWrapper)) {
            addClass([this.overFlowWrapper], HIDEICON);
          }
          if (this.mode === "Delimiter") {
            removeClass([this.inputWrapper], SHOW_CHIP);
            removeClass([this.inputEle], CHIP_INPUT);
            this.showOrHideValueTemplate(true);
          } else {
            addClass([this.inputWrapper], SHOW_CHIP);
          }
          removeClass([this.inputWrapper], SHOW_TEXT);
          this.ensurePlaceHolder();
        }
      }
      var args = {
        isInteracted: e ? true : false,
        event: e
      };
      this.trigger("focus", args);
    };
    DropDownTree2.prototype.treeAction = function(e) {
      var _this = this;
      var eventArgs = {
        cancel: false,
        event: e
      };
      this.trigger("keyPress", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          switch (e.action) {
            case "escape":
            case "altUp":
              _this.inputWrapper.focus();
              e.preventDefault();
              if (_this.isPopupOpen) {
                _this.hidePopup();
              }
              break;
            case "tab":
              if (_this.isPopupOpen) {
                _this.hidePopup();
              }
              break;
            case "enter":
            case "ctrlEnter":
            case "shiftEnter":
            case "csEnter":
              if (!_this.showCheckBox) {
                _this.isValueChange = true;
                _this.keyEventArgs = e;
              }
              break;
            case "space":
              _this.isValueChange = true;
              _this.keyEventArgs = e;
              break;
            case "ctrlA":
              if (_this.allowMultiSelection) {
                _this.selectAll(true);
              }
              break;
            case "moveRight":
            case "moveLeft":
            case "shiftDown":
            case "moveDown":
            case "ctrlDown":
            case "csDown":
            case "shiftUp":
            case "moveUp":
            case "ctrlUp":
            case "csUp":
            case "home":
            case "shiftHome":
            case "ctrlHome":
            case "csHome":
            case "end":
            case "shiftEnd":
            case "ctrlEnd":
            case "csEnd":
          }
        } else {
          e.stopImmediatePropagation();
        }
      });
    };
    DropDownTree2.prototype.keyActionHandler = function(e) {
      var _this = this;
      var eventArgs = {
        cancel: false,
        event: e
      };
      this.trigger("keyPress", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          switch (e.action) {
            case "escape":
            case "altUp":
              if (_this.isPopupOpen) {
                _this.hidePopup();
              }
              break;
            case "shiftTab":
              if (_this.isPopupOpen) {
                _this.hidePopup();
              }
              if (_this.inputFocus) {
                _this.onFocusOut();
              }
              break;
            case "altDown":
              if (!_this.isPopupOpen) {
                _this.showPopup();
                e.preventDefault();
              }
              break;
            case "moveDown":
              if (_this.showSelectAll && _this.showCheckBox) {
                _this.checkAllParent.focus();
              }
              break;
            case "tab":
              if (!_this.isPopupOpen && _this.inputFocus) {
                _this.onFocusOut();
              }
              break;
          }
        }
      });
    };
    DropDownTree2.prototype.checkAllAction = function(e) {
      var _this = this;
      var eventArgs = {
        cancel: false,
        event: e
      };
      var focusedElement;
      this.trigger("keyPress", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          switch (e.action) {
            case "space":
              _this.clickHandler(e);
              break;
            case "moveDown":
              e.preventDefault();
              focusedElement = _this.treeObj.element.querySelector('li[tabindex="0"]') || _this.treeObj.element.querySelector("li");
              focusedElement.focus();
              addClass([focusedElement], ["e-node-focus"]);
              break;
          }
        }
      });
    };
    DropDownTree2.prototype.windowResize = function() {
      if (this.popupObj) {
        this.popupObj.setProperties({
          width: this.setWidth()
        });
        this.popupObj.refreshPosition();
      }
    };
    DropDownTree2.prototype.resetValueHandler = function(e) {
      var formElement = closest(this.inputWrapper, "form");
      if (formElement && e.target === formElement) {
        this.isDynamicChange = true;
        this.setProperties({
          value: null
        }, true);
        this.resetValue(true);
        this.isDynamicChange = false;
      }
    };
    DropDownTree2.prototype.getAriaAttributes = function() {
      return {};
    };
    DropDownTree2.prototype.updateOverFlowView = function() {
      this.overFlowWrapper.classList.remove(TOTAL_COUNT_WRAPPER);
      removeClass([this.overFlowWrapper], HIDEICON);
      if (this.value && this.value.length) {
        var data = "";
        var overAllContainer = void 0;
        var temp = void 0;
        var tempData = void 0;
        var tempIndex = 1;
        var wrapperleng = void 0;
        var remaining = void 0;
        var downIconWidth = 0;
        this.overFlowWrapper.innerHTML = "";
        var l10nLocale = {
          overflowCountTemplate: "+${count} more..",
          totalCountTemplate: "${count} selected"
        };
        this.l10n = new L10n(this.getLocaleName(), l10nLocale, this.locale);
        var remainContent = this.l10n.getConstant("overflowCountTemplate");
        var totalContent = this.l10n.getConstant("totalCountTemplate");
        var remainElement = this.createElement("span", {
          className: REMAIN_WRAPPER
        });
        this.overFlowWrapper.appendChild(remainElement);
        remainElement.innerText = remainContent.replace("${count}", this.value.length.toString());
        var remainSize = remainElement.offsetWidth;
        remove(remainElement);
        if (this.showDropDownIcon) {
          downIconWidth = select("." + DDTICON, this.inputWrapper).offsetWidth;
        }
        if (!isNullOrUndefined(this.value)) {
          if (this.mode !== "Box") {
            if (this.valueTemplate) {
              remaining = this.updateChipAndValueTemplate(false, downIconWidth, remainSize);
              this.checkRemainingTemplate(remaining, remainElement, remainContent, totalContent);
              this.updateDelimMode();
              return;
            }
            for (var index = 0; !isNullOrUndefined(this.value[index]); index++) {
              data += index === 0 ? "" : this.delimiterChar + " ";
              temp = this.getOverflowVal(index);
              data += temp;
              temp = this.overFlowWrapper.innerHTML;
              if (this.enableHtmlSanitizer) {
                this.overFlowWrapper.innerText = SanitizeHtmlHelper.sanitize(data);
              } else {
                this.overFlowWrapper.innerHTML = data;
              }
              wrapperleng = this.overFlowWrapper.offsetWidth;
              overAllContainer = this.inputWrapper.offsetWidth;
              if (wrapperleng + downIconWidth + this.clearIconWidth > overAllContainer) {
                if (tempData !== void 0 && tempData !== "") {
                  temp = tempData;
                  index = tempIndex + 1;
                }
                this.overFlowWrapper.innerHTML = temp;
                remaining = this.value.length - index;
                wrapperleng = this.overFlowWrapper.offsetWidth;
                while (wrapperleng + remainSize + downIconWidth + this.clearIconWidth >= overAllContainer && wrapperleng !== 0 && this.overFlowWrapper.innerHTML !== "") {
                  var textArr = this.overFlowWrapper.innerHTML.split(this.delimiterChar);
                  textArr.pop();
                  this.overFlowWrapper.innerHTML = textArr.join(this.delimiterChar);
                  remaining++;
                  wrapperleng = this.overFlowWrapper.offsetWidth;
                }
                break;
              } else if (wrapperleng + remainSize + downIconWidth + this.clearIconWidth <= overAllContainer) {
                tempData = data;
                tempIndex = index;
              } else if (index === 0) {
                tempData = "";
                tempIndex = -1;
              }
            }
          } else {
            remaining = this.updateChipAndValueTemplate(true, downIconWidth, remainSize);
          }
        }
        this.checkRemainingTemplate(remaining, remainElement, remainContent, totalContent);
      } else {
        this.overFlowWrapper.innerHTML = "";
        addClass([this.overFlowWrapper], HIDEICON);
      }
      this.updateDelimMode();
    };
    DropDownTree2.prototype.checkRemainingTemplate = function(remaining, remainElement, remainContent, totalContent) {
      if (remaining > 0) {
        this.overFlowWrapper.appendChild(this.updateRemainTemplate(remainElement, remaining, remainContent, totalContent));
      }
      if (this.mode === "Box" && !this.overFlowWrapper.classList.contains(TOTAL_COUNT_WRAPPER)) {
        addClass([remainElement], REMAIN_COUNT);
      }
    };
    DropDownTree2.prototype.updateChipAndValueTemplate = function(isChip, downIconWidth, remainSize) {
      if (downIconWidth === void 0) {
        downIconWidth = 0;
      }
      var currentHtmlContent = "";
      var overAllContainer;
      var previousHtmlContent;
      var previousData;
      var index = 1;
      var wrapperLength;
      var remainingItemsCount;
      addClass([isChip ? this.chipWrapper : this.valueTemplateContainer], HIDEICON);
      var clonedElement = (isChip ? this.chipWrapper : this.valueTemplateContainer).cloneNode(true);
      var valueElements = isChip ? selectAll("." + CHIP, clonedElement) : Array.prototype.slice.call(clonedElement.children);
      for (var i = 0; i < valueElements.length; i++) {
        previousHtmlContent = this.overFlowWrapper.innerHTML;
        this.overFlowWrapper.appendChild(valueElements[i]);
        currentHtmlContent = this.overFlowWrapper.innerHTML;
        wrapperLength = this.overFlowWrapper.offsetWidth;
        overAllContainer = this.inputWrapper.offsetWidth;
        if (wrapperLength + downIconWidth + this.clearIconWidth > overAllContainer) {
          if (previousData !== void 0 && previousData !== "") {
            previousHtmlContent = previousData;
            i = index + 1;
          }
          this.overFlowWrapper.innerHTML = previousHtmlContent;
          remainingItemsCount = this.value.length - i;
          wrapperLength = this.overFlowWrapper.offsetWidth;
          while (wrapperLength + remainSize + downIconWidth + this.clearIconWidth >= overAllContainer && wrapperLength !== 0 && this.overFlowWrapper.innerHTML !== "") {
            this.overFlowWrapper.removeChild(this.overFlowWrapper.lastChild);
            remainingItemsCount++;
            wrapperLength = this.overFlowWrapper.offsetWidth;
          }
          break;
        } else if (wrapperLength + remainSize + downIconWidth + this.clearIconWidth <= overAllContainer) {
          previousData = currentHtmlContent;
          index = i;
        } else if (i === 0) {
          previousData = "";
          index = -1;
        }
      }
      return remainingItemsCount;
    };
    DropDownTree2.prototype.updateRemainTemplate = function(remainElement, remaining, remainContent, totalContent) {
      if (this.overFlowWrapper.firstChild && this.overFlowWrapper.firstChild.nodeType === 3 && this.overFlowWrapper.firstChild.nodeValue === "") {
        this.overFlowWrapper.removeChild(this.overFlowWrapper.firstChild);
      }
      remainElement.innerHTML = "";
      remainElement.innerText = this.overFlowWrapper.firstChild && (this.overFlowWrapper.firstChild.nodeType === 3 || this.mode === "Box" || this.valueTemplateContainer) ? remainContent.replace("${count}", remaining.toString()) : totalContent.replace("${count}", remaining.toString());
      if (this.overFlowWrapper.firstChild && (this.overFlowWrapper.firstChild.nodeType === 3 || this.mode === "Box")) {
        removeClass([this.overFlowWrapper], TOTAL_COUNT_WRAPPER);
      } else {
        addClass([this.overFlowWrapper], TOTAL_COUNT_WRAPPER);
        removeClass([this.overFlowWrapper], REMAIN_COUNT);
      }
      return remainElement;
    };
    DropDownTree2.prototype.getOverflowVal = function(index) {
      var selectedData = this.getSelectedData(this.value[parseInt(index.toString(), 10)]);
      return getValue(this.treeSettings.loadOnDemand ? this.fields.text : "text", selectedData);
    };
    DropDownTree2.prototype.updateDelimMode = function() {
      if (this.mode !== "Box") {
        if (select("." + REMAIN_WRAPPER, this.overFlowWrapper) && !this.overFlowWrapper.classList.contains(TOTAL_COUNT_WRAPPER)) {
          addClass([this.overFlowWrapper], REMAIN_COUNT);
          addClass([this.overFlowWrapper], SHOW_TEXT);
        } else {
          this.overFlowWrapper.classList.remove(REMAIN_COUNT);
          removeClass([this.overFlowWrapper], REMAIN_COUNT);
        }
      } else if (select("." + REMAIN_WRAPPER, this.overFlowWrapper)) {
        this.overFlowWrapper.classList.remove(REMAIN_COUNT);
      }
    };
    DropDownTree2.prototype.createHiddenElement = function() {
      if (this.allowMultiSelection || this.showCheckBox) {
        this.hiddenElement = this.createElement("select", {
          attrs: {
            "aria-hidden": "true",
            "class": HIDDENELEMENT,
            "tabindex": "-1",
            "multiple": "",
            "aria-label": this.getModuleName()
          }
        });
      } else {
        this.hiddenElement = this.createElement("select", {
          attrs: {
            "aria-hidden": "true",
            "tabindex": "-1",
            "class": HIDDENELEMENT,
            "aria-label": this.getModuleName()
          }
        });
      }
      prepend([this.hiddenElement], this.inputWrapper);
      this.validationAttribute();
    };
    DropDownTree2.prototype.createClearIcon = function() {
      this.overAllClear = this.createElement("span", {
        className: CLOSEICON_CLASS
      });
      addClass([this.overAllClear], HIDEICON);
      removeClass([this.inputWrapper], SHOW_CLEAR);
      if (this.showClearButton) {
        this.inputWrapper.insertBefore(this.overAllClear, this.inputObj.buttons[0]);
      }
    };
    DropDownTree2.prototype.validationAttribute = function() {
      var name = this.inputEle.getAttribute("name") ? this.inputEle.getAttribute("name") : this.inputEle.getAttribute("id");
      this.hiddenElement.setAttribute("name", name);
      this.inputEle.removeAttribute("name");
      var attributes2 = ["required", "aria-required", "form"];
      for (var i = 0; i < attributes2.length; i++) {
        var attr = this.inputEle.getAttribute(attributes2[i]);
        if (attr) {
          this.hiddenElement.setAttribute(attributes2[i], attr);
          this.inputEle.removeAttribute(attributes2[i]);
        }
      }
    };
    DropDownTree2.prototype.createChip = function() {
      if (!this.inputWrapper.contains(this.chipWrapper)) {
        this.chipWrapper = this.createElement("span", {
          className: CHIP_WRAPPER
        });
        this.chipCollection = this.createElement("span", {
          className: CHIP_COLLECTION
        });
        this.chipWrapper.appendChild(this.chipCollection);
        this.inputWrapper.insertBefore(this.chipWrapper, this.hiddenElement);
        addClass([this.inputWrapper], SHOW_CHIP);
        var isValid = this.getValidMode();
        if (isValid && this.value !== null && this.value && this.value.length !== 0) {
          addClass([this.inputEle], CHIP_INPUT);
        } else if (this.value === null || this.value && this.value.length === 0 || this.checkWrapper) {
          addClass([this.chipWrapper], HIDEICON);
        }
      }
    };
    DropDownTree2.prototype.getValidMode = function() {
      if (this.allowMultiSelection || this.showCheckBox) {
        return this.mode === "Box" ? true : this.mode === "Default" && this.inputFocus ? true : false;
      } else {
        return false;
      }
    };
    DropDownTree2.prototype.createSelectAllWrapper = function() {
      this.checkAllParent = this.createElement("div", {
        className: CHECKALLPARENT,
        attrs: {
          "tabindex": "0"
        }
      });
      this.selectAllSpan = this.createElement("span", {
        className: ALLTEXT
      });
      this.selectAllSpan.textContent = "";
      var ele = closest(this.element, "." + BIGGER);
      var touchClass = isNullOrUndefined(ele) ? "" : SMALL;
      this.checkBoxElement = createCheckBox(this.createElement, true, {
        cssClass: touchClass
      });
      this.checkBoxElement.setAttribute("role", "checkbox");
      this.checkAllParent.appendChild(this.checkBoxElement);
      this.checkAllParent.appendChild(this.selectAllSpan);
      this.setLocale();
      EventHandler.add(this.checkAllParent, "mouseup", this.clickHandler, this);
      this.wireCheckAllWrapperEvents();
    };
    DropDownTree2.prototype.clickHandler = function(e) {
      var target;
      if (e.currentTarget && e.currentTarget.classList.contains(CHECKALLPARENT)) {
        target = e.currentTarget.firstElementChild.lastElementChild;
      } else {
        target = e.target;
      }
      this.checkWrapper = closest(target, "." + CHECKBOXWRAP);
      if (!isNullOrUndefined(this.checkWrapper)) {
        this.isClicked = true;
        var checkElement = select("." + CHECKBOXFRAME, this.checkWrapper);
        this.changeState(this.checkWrapper, checkElement.classList.contains(CHECK) ? "uncheck" : "check", e);
        this.isClicked = false;
      }
      e.preventDefault();
    };
    DropDownTree2.prototype.changeState = function(wrapper, state, e) {
      var ariaState;
      var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];
      if (state === "check" && !frameSpan.classList.contains(CHECK)) {
        frameSpan.classList.add(CHECK);
        ariaState = "true";
        if (!this.isReverseUpdate) {
          this.setOldValue();
          this.isCheckAllCalled = true;
          this.treeObj.checkAll();
          if (!this.changeOnBlur) {
            this.triggerChangeEvent(e);
          }
        }
        this.setLocale(true);
      } else if (state === "uncheck" && frameSpan.classList.contains(CHECK)) {
        frameSpan.classList.remove(CHECK);
        ariaState = "false";
        if (!this.isReverseUpdate) {
          this.treeObj.uncheckAll();
          if (!this.changeOnBlur) {
            this.triggerChangeEvent(e);
          }
        }
        this.setLocale(false);
      }
      this.setMultiSelect();
      this.ensurePlaceHolder();
      ariaState = state === "check" ? "true" : "false";
      if (!isNullOrUndefined(ariaState)) {
        wrapper.parentElement.setAttribute("aria-checked", ariaState);
      }
    };
    DropDownTree2.prototype.setLocale = function(unSelect) {
      if (!this.selectAllSpan) {
        return;
      }
      if (this.selectAllText !== "Select All" || this.unSelectAllText !== "Unselect All") {
        var template = unSelect ? this.unSelectAllText : this.selectAllText;
        this.selectAllSpan.textContent = "";
        var compiledString = compile(template);
        var templateName = unSelect ? "unSelectAllText" : "selectAllText";
        for (var _i = 0, _a = compiledString({}, this, templateName, null, !this.isStringTemplate); _i < _a.length; _i++) {
          var item = _a[_i];
          this.selectAllSpan.textContent = item.textContent;
        }
      } else {
        this.selectAllSpan.textContent = unSelect ? this.unSelectAllText : this.selectAllText;
      }
    };
    DropDownTree2.prototype.setAttributes = function() {
      this.inputEle.setAttribute("tabindex", "-1");
      this.inputEle.setAttribute("aria-label", this.getModuleName());
      var id = this.element.getAttribute("id");
      this.hiddenElement.id = id + "_hidden";
      this.inputWrapper.setAttribute("tabindex", this.inputWrapper.classList.contains("e-disabled") ? "-1" : "0");
      this.inputWrapper.setAttribute("aria-label", this.getModuleName());
      attributes(this.inputWrapper, this.getAriaAttributes());
    };
    DropDownTree2.prototype.setHTMLAttributes = function() {
      if (Object.keys(this.htmlAttributes).length) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var htmlAttr = _a[_i];
          if (htmlAttr === "class") {
            this.inputWrapper.classList.add(this.htmlAttributes["" + htmlAttr]);
          } else if (htmlAttr === "disabled") {
            this.setProperties({
              enabled: false
            }, true);
            this.setEnable();
          } else if (htmlAttr === "readonly") {
            this.setProperties({
              readonly: true
            }, true);
            this.dataBind();
          } else if (htmlAttr === "style") {
            this.inputWrapper.style.cssText = this.htmlAttributes["" + htmlAttr];
          } else {
            var defaultAttr = ["title", "id", "placeholder", "aria-placeholder", "role", "autocorrect", "autocomplete", "autocapitalize", "spellcheck", "minlength", "maxlength"];
            var validateAttr = ["name", "required"];
            if (htmlAttr.indexOf("data") === 0 || validateAttr.indexOf(htmlAttr) > -1) {
              this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
            } else if (defaultAttr.indexOf(htmlAttr) > -1) {
              if (htmlAttr === "placeholder") {
                Input.setPlaceholder(this.htmlAttributes["" + htmlAttr], this.inputEle);
              } else {
                this.inputEle.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
              }
            } else {
              this.inputEle.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
            }
          }
        }
      }
    };
    DropDownTree2.prototype.updateDataAttribute = function() {
      var value = this.htmlAttributes;
      var invalidAttr = ["class", "style", "id", "type"];
      var attr = {};
      for (var a = 0; a < this.element.attributes.length; a++) {
        if (invalidAttr.indexOf(this.element.attributes[a].name) === -1 && !(this.element.attributes[a].name === "readonly")) {
          attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);
        }
      }
      extend(attr, value, attr);
      this.setProperties({
        htmlAttributes: attr
      }, true);
    };
    DropDownTree2.prototype.showOverAllClear = function() {
      if (!this.enabled || this.readonly) {
        return;
      }
      if (this.overAllClear) {
        var isValue = this.value ? this.value.length ? true : false : false;
        if (isValue && this.showClearButton) {
          removeClass([this.overAllClear], HIDEICON);
          addClass([this.inputWrapper], SHOW_CLEAR);
        } else {
          addClass([this.overAllClear], HIDEICON);
          removeClass([this.inputWrapper], SHOW_CLEAR);
        }
      }
    };
    DropDownTree2.prototype.setTreeValue = function() {
      if (this.value !== null && this.value.length !== 0) {
        var data = void 0;
        if (this.showCheckBox || this.allowMultiSelection) {
          for (var i = this.value.length - 1; i >= 0; i--) {
            data = this.treeObj.getTreeData(this.value[i])[0];
            if (isNullOrUndefined(data)) {
              this.value.splice(i, 1);
            }
          }
          if (this.value.length !== 0) {
            this.setValidValue();
          }
        } else {
          data = this.treeObj.getTreeData(this.value[0])[0];
          if (!isNullOrUndefined(data)) {
            this.setProperties({
              text: data[this.fields.text]
            }, true);
            this.setValidValue();
          } else {
            this.setProperties({
              value: this.currentValue
            }, true);
          }
        }
      }
    };
    DropDownTree2.prototype.setTreeText = function() {
      if (this.value !== null && !this.isInitialized) {
        return;
      }
      if (this.text !== null) {
        var data = void 0;
        var valArr = [];
        if (this.showCheckBox || this.allowMultiSelection) {
          var textArr = this.text.split(this.delimiterChar);
          for (var i = 0; i < textArr.length; i++) {
            data = this.getItems(textArr[i]);
            if (!isNullOrUndefined(data)) {
              valArr.push(data[this.fields.value].toString());
            }
          }
          if (valArr.length !== 0) {
            this.setOldValue();
            this.setProperties({
              value: valArr
            }, true);
            this.setValidValue();
          } else {
            this.setProperties({
              text: this.currentText
            }, true);
          }
        } else {
          data = this.getItems(this.text);
          if (!isNullOrUndefined(data)) {
            this.setOldValue();
            this.setProperties({
              value: [data[this.fields.value].toString()]
            }, true);
            this.setValidValue();
          } else {
            this.setProperties({
              text: this.currentText
            }, true);
          }
        }
      }
    };
    DropDownTree2.prototype.setSelectedValue = function() {
      if (this.value !== null && !(this.value.length === 0)) {
        return;
      }
      if (!this.isInitialized) {
        this.setOldValue();
        if (this.treeObj.selectedNodes.length > 0 && !this.showCheckBox) {
          this.setProperties({
            value: this.treeObj.selectedNodes
          }, true);
          if (this.allowMultiSelection) {
            this.updateMode();
          }
        } else if (this.showCheckBox && this.treeObj.checkedNodes) {
          if (this.treeObj.checkedNodes.length > 0) {
            this.setProperties({
              value: this.treeObj.checkedNodes
            }, true);
            setValue("selectedNodes", [], this.treeObj);
            this.treeObj.dataBind();
            this.updateMode();
          }
        }
        this.updateSelectedValues();
        this.currentText = this.text;
        this.currentValue = this.value;
      }
    };
    DropDownTree2.prototype.setValueTemplate = function() {
      var _this = this;
      if (this.valueTemplate) {
        var compiledString = this.initializeValueTemplate();
        this.getValueTemplateElement(this.value[0], compiledString);
        if (this.hasTemplate && this.portals) {
          if (this.treeObj.portals) {
            this.portals = this.portals.concat(this.treeObj.portals.filter(function(item) {
              return !_this.portals.includes(item);
            }));
          }
          if (this.isReact) {
            this.renderReactTemplates(this.reactCallBack);
          }
        }
        this.showOrHideValueTemplate(true);
      }
    };
    DropDownTree2.prototype.getValueTemplateElement = function(value, compiledString) {
      var selectedData = this.getNodeData(value, this.isFilteredData ? this.treeData : this.treeItems);
      var templateElements = compiledString(selectedData, this, "valueTemplate", this.element.id + "valueTemplate", this.isStringTemplate, void 0, this.valueTemplateContainer);
      if (templateElements) {
        templateElements = Array.prototype.slice.call(templateElements);
        append(templateElements, this.valueTemplateContainer);
      }
    };
    DropDownTree2.prototype.setValidValue = function() {
      var _this = this;
      if (!this.showCheckBox && !this.allowMultiSelection) {
        Input.setValue(this.text, this.inputEle, this.floatLabelType);
        this.setValueTemplate();
        var id = this.value[0].toString();
        if (this.treeObj.selectedNodes[0] !== id) {
          setValue("selectedNodes", [id], this.treeObj);
          if (this.fields.dataSource instanceof DataManager) {
            this.updateSelectedValues();
          }
        }
      } else {
        if (this.showCheckBox) {
          var difference = this.value.length !== this.treeObj.checkedNodes.length || this.value.filter(function(e) {
            return _this.treeObj.checkedNodes.indexOf(e) === -1;
          }).length > 0;
          if (difference || this.treeSettings.autoCheck) {
            this.treeObj.checkedNodes = this.value.slice();
            this.treeObj.dataBind();
            this.setMultiSelect();
          }
        } else {
          this.treeObj.selectedNodes = this.value.slice();
          this.selectedText = [];
          this.updateSelectedValues();
        }
        this.treeObj.dataBind();
      }
      this.currentText = this.text;
      this.currentValue = this.value;
      if (!isNullOrUndefined(this.value) && this.value.length > 0 && !isNullOrUndefined(this.currentText)) {
        this.inputWrapper.setAttribute("aria-label", this.currentText.replace(/,/g, ", "));
      }
      if (this.isInitialized) {
        this.triggerChangeEvent();
      }
    };
    DropDownTree2.prototype.getItems = function(givenText) {
      var data;
      if (this.treeDataType === 1) {
        for (var i = 0; i < this.treeItems.length; i++) {
          var text = getValue(this.fields.text, this.treeItems[parseInt(i.toString(), 10)]);
          if (!isNullOrUndefined(this.treeItems[i]) && !isNullOrUndefined(text) && text === givenText) {
            data = this.treeItems[i];
            break;
          }
        }
      } else {
        data = this.getNestedItems(this.treeItems, this.fields, givenText);
      }
      return data;
    };
    DropDownTree2.prototype.getNestedItems = function(data, field, givenText) {
      var newData;
      for (var i = 0, objlen = data.length; i < objlen; i++) {
        var dataId = getValue(this.fields.text, data[parseInt(i.toString(), 10)]);
        if (data[i] && dataId && dataId.toString() === givenText) {
          return data[i];
        } else if (typeof field.child === "string" && !isNullOrUndefined(getValue(field.child, data[i]))) {
          var childData = getValue(field.child, data[parseInt(i.toString(), 10)]);
          newData = this.getNestedItems(childData, this.getChildType(field), givenText);
          if (newData !== void 0) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", data[i]))) {
          var child = "child";
          newData = this.getNestedItems(getValue(child, data[parseInt(i.toString(), 10)]), this.getChildType(field), givenText);
          if (newData !== void 0) {
            break;
          }
        }
      }
      return newData;
    };
    DropDownTree2.prototype.getChildType = function(mapper) {
      return typeof mapper.child === "string" || isNullOrUndefined(mapper.child) ? mapper : mapper.child;
    };
    DropDownTree2.prototype.renderTree = function() {
      this.treeObj = new TreeView({
        fields: this.getTreeFields(this.fields),
        enableRtl: this.enableRtl,
        nodeSelected: this.onNodeSelected.bind(this),
        nodeChecked: this.onNodeChecked.bind(this),
        nodeChecking: this.beforeCheck.bind(this),
        nodeExpanded: this.onNodeExpanded.bind(this),
        actionFailure: this.onActionFailure.bind(this),
        nodeClicked: this.onNodeClicked.bind(this),
        dataBound: this.OnDataBound.bind(this),
        allowMultiSelection: this.allowMultiSelection,
        enableHtmlSanitizer: this.enableHtmlSanitizer,
        showCheckBox: this.showCheckBox,
        autoCheck: this.treeSettings.autoCheck,
        sortOrder: this.sortOrder,
        expandOn: this.treeSettings.expandOn,
        loadOnDemand: this.treeSettings.loadOnDemand,
        nodeSelecting: this.onBeforeSelect.bind(this),
        nodeTemplate: this.itemTemplate,
        checkDisabledChildren: this.treeSettings.checkDisabledChildren,
        checkOnClick: true
      });
      this.treeObj.root = this.root ? this.root : this;
      this.treeObj.appendTo(this.tree);
    };
    DropDownTree2.prototype.renderPopup = function() {
      var _this = this;
      if (this.isFilteredData) {
        this.treeObj.element.classList.remove("e-filtering");
        this.filterObj.value = "";
        this.treeObj.fields = this.getTreeFields(this.fields);
        this.isFilterRestore = true;
        this.isFilteredData = false;
        this.hideCheckAll(false);
      }
      var isCancelled = false;
      var args = {
        cancel: false
      };
      this.trigger("beforeOpen", args, function(args2) {
        if (!args2.cancel) {
          addClass([_this.inputWrapper], [ICONANIMATION]);
          if (_this.isReact && _this.isFilterRestore) {
            _this.treeObj.refresh();
          }
          if (_this.isFirstRender) {
            _this.popupEle = _this.createElement("div", {
              id: _this.element.id + "_options",
              className: POPUP_CLASS + " " + (_this.cssClass != null ? _this.cssClass : "")
            });
            _this.popupEle.setAttribute("role", "region");
            _this.popupEle.setAttribute("aria-label", _this.element.id);
            document.body.appendChild(_this.popupEle);
            _this.createPopup(_this.popupEle);
          } else {
            _this.popupEle = _this.popupObj.element;
            if (_this.isReact && _this.isFilterRestore) {
              _this.isFilteredData = true;
              _this.popupEle.removeChild(_this.filterContainer);
            }
          }
        } else {
          isCancelled = true;
        }
        if (_this.isFirstRender && !isCancelled || _this.isFilteredData) {
          _this.isFilteredData = false;
          prepend([_this.popupDiv], _this.popupEle);
          removeClass([_this.popupDiv], DDTHIDEICON);
          if (_this.allowFiltering) {
            _this.renderFilter();
          }
          if (_this.showCheckBox && _this.showSelectAll && !_this.popupDiv.classList.contains(NODATA)) {
            _this.createSelectAllWrapper();
            _this.popupEle.insertBefore(_this.checkAllParent, _this.popupDiv);
          }
          if (_this.headerTemplate) {
            _this.setHeaderTemplate();
          }
          if (_this.footerTemplate) {
            _this.setFooterTemplate();
          }
          _this.isFirstRender = false;
          if (_this.hasTemplate && _this.portals) {
            if (_this.treeObj.portals) {
              _this.portals = _this.portals.concat(_this.treeObj.portals.filter(function(item) {
                return !_this.portals.includes(item);
              }));
            }
            if (_this.isReact) {
              _this.renderReactTemplates(_this.reactCallBack);
            }
          }
        }
        if (!isCancelled) {
          attributes(_this.inputEle, {
            "aria-expanded": "true"
          });
          _this.popupObj.show(null, _this.zIndex === 1e3 ? _this.inputEle : null);
          removeClass([_this.popupEle], DDTHIDEICON);
          _this.updatePopupHeight();
          _this.popupObj.refreshPosition();
          if (!(_this.showSelectAll || _this.allowFiltering) && !_this.popupDiv.classList.contains(NODATA) && _this.treeItems.length > 0) {
            var focusedElement = _this.value != null && _this.text != null ? _this.treeObj.element.querySelector('[data-uid="' + _this.value[_this.value.length - 1] + '"]') : null;
            if (focusedElement) {
              _this.treeObj.element.querySelector("li").setAttribute("tabindex", "-1");
              focusedElement.setAttribute("tabindex", "0");
            } else {
              var oldFocussedNode = _this.treeObj.element.querySelector(".e-node-focus");
              focusedElement = _this.treeObj.element.querySelector('li[tabindex="0"]:not(.e-disable)') || _this.treeObj.element.querySelector("li:not(.e-disable)");
              _this.removeFocus(focusedElement, oldFocussedNode);
            }
            _this.updateFocus(focusedElement);
          }
          if (_this.treeObj.checkedNodes.length > 0 && !_this.isFilterRestore) {
            var nodes = _this.treeObj.element.querySelectorAll("li:not(.e-disable)");
            var checkedNodes = _this.treeObj.element.querySelectorAll("li[aria-checked=true]");
            if (checkedNodes.length === nodes.length && _this.checkBoxElement) {
              var wrap2 = closest(_this.checkBoxElement, "." + CHECKBOXWRAP);
              _this.changeState(wrap2, "check");
              _this.checkSelectAll = false;
            }
          }
          if (_this.showSelectAll && !_this.allowFiltering) {
            var oldFocussedNode = _this.treeObj.element.querySelector(".e-node-focus");
            var focusedElement = _this.popupEle.querySelector(".e-selectall-parent");
            _this.removeFocus(focusedElement, oldFocussedNode);
            _this.updateFocus(focusedElement);
          }
          if (_this.allowFiltering) {
            var focusedElement = _this.treeObj.element.querySelector("li.e-node-focus");
            if (!isNullOrUndefined(focusedElement)) {
              removeClass([focusedElement], "e-node-focus");
            }
            removeClass([_this.inputWrapper], [INPUTFOCUS]);
            _this.filterObj.element.focus();
          }
          var eventArgs = {
            popup: _this.popupObj
          };
          _this.trigger("open", eventArgs);
        }
      });
    };
    DropDownTree2.prototype.removeFocus = function(focusedElement, oldFocusedElement) {
      if (oldFocusedElement && oldFocusedElement !== focusedElement) {
        oldFocusedElement.setAttribute("tabindex", "-1");
        removeClass([oldFocusedElement], "e-node-focus");
      }
    };
    DropDownTree2.prototype.updateFocus = function(focusedElement) {
      if (!isNullOrUndefined(focusedElement)) {
        focusedElement.focus();
        addClass([focusedElement], ["e-node-focus"]);
      }
    };
    DropDownTree2.prototype.reactCallBack = function() {
      if (!isNullOrUndefined(this.popupObj)) {
        this.updatePopupHeight();
        this.popupObj.refreshPosition();
      }
    };
    DropDownTree2.prototype.updatePopupHeight = function() {
      if (this.isFirstRender) {
        return;
      }
      var popupHeight = this.getHeight();
      this.popupEle.style.maxHeight = popupHeight;
      if (this.allowFiltering) {
        var height = Math.round(this.filterContainer.getBoundingClientRect().height);
        popupHeight = formatUnit(parseInt(popupHeight, 10) - height + "px");
      }
      if (this.headerTemplate) {
        var height = Math.round(this.header.getBoundingClientRect().height);
        popupHeight = formatUnit(parseInt(popupHeight, 10) - height + "px");
      }
      if (this.showCheckBox && this.showSelectAll && !this.popupDiv.classList.contains(NODATA)) {
        var height = Math.round(this.checkAllParent.getBoundingClientRect().height);
        popupHeight = formatUnit(parseInt(popupHeight, 10) - height + "px");
      }
      if (this.footerTemplate) {
        var height = Math.round(this.footer.getBoundingClientRect().height);
        popupHeight = formatUnit(parseInt(popupHeight, 10) - height + "px");
      }
      var border = parseInt(window.getComputedStyle(this.popupEle).borderTopWidth, 10);
      border = border + parseInt(window.getComputedStyle(this.popupEle).borderBottomWidth, 10);
      popupHeight = formatUnit(parseInt(popupHeight, 10) - border + "px");
      this.popupDiv.style.maxHeight = popupHeight;
    };
    DropDownTree2.prototype.createPopup = function(element) {
      var _this = this;
      if (this.isFirstRender) {
        this.popupObj = new Popup(element, {
          width: this.setWidth(),
          targetType: "relative",
          collision: {
            X: "flip",
            Y: "flip"
          },
          relateTo: this.inputWrapper,
          zIndex: this.zIndex,
          enableRtl: this.enableRtl,
          position: {
            X: "left",
            Y: "bottom"
          },
          close: function() {
            _this.isPopupOpen = false;
          },
          open: function() {
            document.addEventListener("mousedown", _this.documentClickContext);
            _this.isPopupOpen = true;
          },
          targetExitViewport: function() {
            if (!Browser.isDevice) {
              _this.hidePopup();
            }
          }
        });
      }
    };
    DropDownTree2.prototype.setElementWidth = function(inputWidth) {
      var ddElement = this.inputWrapper;
      if (!isNullOrUndefined(inputWidth)) {
        if (typeof inputWidth === "number") {
          ddElement.style.width = formatUnit(inputWidth);
        } else if (typeof inputWidth === "string") {
          ddElement.style.width = inputWidth.match(/px|%|em/) ? inputWidth : formatUnit(inputWidth);
        }
      }
    };
    DropDownTree2.prototype.setWidth = function() {
      var width = formatUnit(this.popupWidth);
      if (width.indexOf("%") > -1) {
        width = (this.inputWrapper.offsetWidth * parseFloat(width) / 100).toString() + "px";
      } else if (typeof this.popupWidth === "string") {
        width = this.popupWidth.match(/px|em/) ? this.popupWidth : width;
      }
      return width;
    };
    DropDownTree2.prototype.getHeight = function() {
      var height = formatUnit(this.popupHeight);
      if (height.indexOf("%") > -1) {
        height = (document.documentElement.clientHeight * parseFloat(height) / 100).toString() + "px";
      } else if (typeof this.popupHeight === "string") {
        height = this.popupHeight.match(/px|em/) ? this.popupHeight : height;
      }
      return height;
    };
    DropDownTree2.prototype.onDocumentClick = function(e) {
      var target = e.target;
      var isTree = closest(target, "." + PARENTITEM);
      var isFilter = closest(target, "." + FILTERWRAP);
      var isHeader = closest(target, "." + HEADER);
      var isFooter = closest(target, "." + FOOTER);
      var isScroller = target.classList.contains(DROPDOWN) ? true : matches(target, ".e-ddt .e-popup") || matches(target, ".e-ddt .e-treeview");
      if (this.isPopupOpen && (!isNullOrUndefined(this.inputWrapper) && this.inputWrapper.contains(target) || isTree || isScroller || isHeader || isFooter) || (this.allowMultiSelection || this.showCheckBox) && (this.isPopupOpen && target.classList.contains(CHIP_CLOSE) || this.isPopupOpen && (target.classList.contains(CHECKALLPARENT) || target.classList.contains(ALLTEXT) || target.classList.contains(CHECKBOXFRAME)))) {
        this.isDocumentClick = false;
        e.preventDefault();
      } else if (!isNullOrUndefined(this.inputWrapper) && !this.inputWrapper.contains(target) && this.inputFocus && !isFilter) {
        this.focusOut(e);
      }
    };
    DropDownTree2.prototype.onActionFailure = function(e) {
      this.trigger("actionFailure", e);
      this.l10nUpdate(true);
      addClass([this.popupDiv], NODATA);
    };
    DropDownTree2.prototype.OnDataBound = function(args) {
      this.treeItems = args.data;
      if (this.treeItems.length <= 0) {
        this.l10nUpdate();
        addClass([this.popupDiv], NODATA);
        this.hideCheckAll(true);
      } else if (this.popupDiv.classList.contains(NODATA) && this.treeItems.length >= 1) {
        removeClass([this.popupDiv], NODATA);
        this.hideCheckAll(false);
      }
      if (!this.isFilteredData) {
        this.treeDataType = this.getTreeDataType(this.treeItems, this.fields);
      }
      if (this.isFirstRender && this.isRemoteData) {
        this.setTreeValue();
        this.setTreeText();
        this.updateHiddenValue();
        this.setSelectedValue();
        if (!this.wrapText) {
          this.updateView();
        }
        this.treeObj.element.focus();
        this.isInitialized = true;
      }
      var eventArgs = {
        data: args.data
      };
      this.trigger("dataBound", eventArgs);
      if (this.filterObj === null) {
        this.isFilteredData = false;
      }
      if (this.isFilteredData) {
        this.treeObj.expandAll();
      }
      if (this.isFilterRestore) {
        this.restoreFilterSelection();
        if (!this.showSelectAll) {
          this.isFilterRestore = false;
        }
      }
    };
    DropDownTree2.prototype.restoreFilterSelection = function() {
      if (this.showCheckBox) {
        this.treeObj.checkedNodes = this.value ? this.value : [];
      } else {
        this.treeObj.selectedNodes = this.value ? this.value : [];
      }
    };
    DropDownTree2.prototype.setCssClass = function(newClass, oldClass) {
      var elements = this.popupObj ? [this.inputWrapper, this.popupObj.element] : [this.inputWrapper];
      if (!isNullOrUndefined(oldClass) && oldClass !== "") {
        removeClass(elements, oldClass.split(" "));
      }
      if (!isNullOrUndefined(newClass) && newClass !== "") {
        addClass(elements, newClass.split(" "));
      }
    };
    DropDownTree2.prototype.setEnableRTL = function(state) {
      if (state) {
        this.inputWrapper.classList.add(RTL3);
      } else {
        this.inputWrapper.classList.remove(RTL3);
      }
      if (this.popupObj) {
        this.popupObj.enableRtl = state;
        this.popupObj.dataBind();
      }
      if (this.treeObj) {
        this.treeObj.enableRtl = state;
        this.treeObj.dataBind();
      }
    };
    DropDownTree2.prototype.setEnable = function() {
      Input.setEnabled(this.enabled, this.inputEle);
      if (this.enabled) {
        removeClass([this.inputWrapper], DISABLED);
        this.inputEle.setAttribute("aria-disabled", "false");
        this.inputWrapper.setAttribute("aria-disabled", "false");
      } else {
        if (this.isPopupOpen) {
          this.hidePopup();
        }
        addClass([this.inputWrapper], DISABLED);
        if (this.inputWrapper && this.inputWrapper.classList.contains(INPUTFOCUS)) {
          removeClass([this.inputWrapper], [INPUTFOCUS]);
        }
        this.inputEle.setAttribute("aria-disabled", "true");
        this.inputWrapper.setAttribute("aria-disabled", "true");
      }
    };
    DropDownTree2.prototype.cloneFields = function(fields) {
      var clonedField = {
        dataSource: fields.dataSource,
        value: fields.value,
        text: fields.text,
        parentValue: fields.parentValue,
        child: this.cloneChildField(fields.child),
        hasChildren: fields.hasChildren,
        expanded: fields.expanded,
        iconCss: fields.iconCss,
        imageUrl: fields.imageUrl,
        htmlAttributes: fields.htmlAttributes,
        query: fields.query,
        selected: fields.selected,
        selectable: fields.selectable,
        tableName: fields.tableName,
        tooltip: fields.tooltip
      };
      return clonedField;
    };
    DropDownTree2.prototype.cloneChildField = function(fields) {
      if (typeof fields === "string") {
        return fields;
      } else {
        var clonedField = {
          dataSource: fields.dataSource,
          value: fields.value,
          text: fields.text,
          parentValue: fields.parentValue,
          child: fields.child ? this.cloneChildField(fields.child) : null,
          hasChildren: fields.hasChildren,
          expanded: fields.expanded,
          iconCss: fields.iconCss,
          imageUrl: fields.imageUrl,
          htmlAttributes: fields.htmlAttributes,
          query: fields.query,
          selected: fields.selected,
          selectable: fields.selectable,
          tableName: fields.tableName,
          tooltip: fields.tooltip
        };
        return clonedField;
      }
    };
    DropDownTree2.prototype.getTreeFields = function(fields) {
      var treeFields = {
        dataSource: fields.dataSource,
        id: fields.value,
        text: fields.text,
        parentID: fields.parentValue,
        child: this.getTreeChildren(fields.child),
        hasChildren: fields.hasChildren,
        expanded: fields.expanded,
        iconCss: fields.iconCss,
        imageUrl: fields.imageUrl,
        isChecked: fields.selected,
        htmlAttributes: fields.htmlAttributes,
        query: fields.query,
        selectable: fields.selectable,
        selected: fields.selected,
        tableName: fields.tableName,
        tooltip: fields.tooltip
      };
      return treeFields;
    };
    DropDownTree2.prototype.getTreeChildren = function(mapper) {
      if (typeof mapper === "string") {
        return mapper;
      } else if (!isNullOrUndefined(mapper)) {
        mapper = this.getActualProperties(mapper);
        var childFields = mapper;
        if (mapper.value) {
          childFields.id = mapper.value;
        }
        if (mapper.parentValue) {
          childFields.parentID = mapper.parentValue;
        }
        if (mapper.child) {
          childFields.child = this.getTreeChildren(mapper.child);
        }
        if (mapper.selected && this.showCheckBox) {
          childFields.isChecked = mapper.selected;
        }
        return childFields;
      }
      return null;
    };
    DropDownTree2.prototype.getTreeDataType = function(ds, field) {
      if (this.fields.dataSource instanceof DataManager) {
        for (var i = 0; i < ds.length; i++) {
          if (typeof field.child === "string" && isNullOrUndefined(getValue(field.child, ds[i]))) {
            return 1;
          }
        }
        return 2;
      }
      if (isNullOrUndefined(this.fields.dataSource)) {
        this.fields.dataSource = [];
      }
      for (var i = 0, len = this.fields.dataSource.length; i < len; i++) {
        if (typeof field.child === "string" && !isNullOrUndefined(getValue(field.child, this.fields.dataSource[i]))) {
          return 2;
        }
        if (!isNullOrUndefined(getValue(field.parentValue, this.fields.dataSource[i])) || !isNullOrUndefined(getValue(field.hasChildren, this.fields.dataSource[i]))) {
          return 1;
        }
      }
      return 1;
    };
    DropDownTree2.prototype.setFields = function() {
      this.resetValue();
      if (this.hasTemplate) {
        this.updateTemplate();
      }
      this.treeObj.fields = this.getTreeFields(this.fields);
      this.setProperties({
        value: this.oldValue
      }, true);
      this.treeObj.dataBind();
      this.updateValue(this.value);
    };
    DropDownTree2.prototype.getEventArgs = function(args) {
      var checkData = args.data;
      var selectData = args.nodeData;
      var state;
      if (this.showCheckBox) {
        if (args.action === "check") {
          state = "select";
        } else if (args.action === "uncheck") {
          state = "un-select";
        }
      }
      var eventArgs = {
        action: this.showCheckBox ? state : args.action,
        isInteracted: this.isClicked ? true : args.isInteracted,
        item: args.node,
        itemData: this.showCheckBox ? checkData[0] : selectData
      };
      return eventArgs;
    };
    DropDownTree2.prototype.onBeforeSelect = function(args) {
      if (args.isInteracted) {
        this.setOldValue();
        if (this.value === null) {
          this.setProperties({
            value: []
          }, true);
        }
      }
    };
    DropDownTree2.prototype.updateHiddenValue = function() {
      if (this.allowMultiSelection || this.showCheckBox) {
        return;
      }
      if (this.value && this.value.length) {
        this.hiddenElement.innerHTML = '<option selected value ="' + this.value[0] + '">' + this.text + "</option>";
      } else {
        this.hiddenElement.innerHTML = "";
      }
    };
    DropDownTree2.prototype.onNodeSelected = function(args) {
      if (this.showCheckBox) {
        return;
      }
      var eventArgs = this.getEventArgs(args);
      this.trigger("select", eventArgs);
      var selectedText;
      if (args.isInteracted) {
        var id = getValue("id", args.nodeData).toString();
        if (!this.allowMultiSelection) {
          this.hiddenElement.innerHTML = "";
          this.setProperties({
            value: [id]
          }, true);
          if (this.itemTemplate) {
            selectedText = getValue("text", this.treeObj.getNode(id));
          } else {
            selectedText = getValue("text", args.nodeData).toString();
          }
          Input.setValue(selectedText, this.inputEle, this.floatLabelType);
          this.setProperties({
            text: selectedText
          }, true);
          this.currentText = this.text;
          this.currentValue = this.value;
          this.setValueTemplate();
          if (!isNullOrUndefined(this.value) && this.value.length > 0) {
            this.inputWrapper.setAttribute("aria-label", args.nodeData.text.toString());
          }
          attributes(this.inputWrapper, {
            "aria-describedby": this.element.id
          });
          attributes(this.inputWrapper, {
            "aria-activedescendant": id.toString()
          });
          this.updateHiddenValue();
          this.showOverAllClear();
          this.hidePopup();
          this.isNodeSelected = true;
        } else if (this.allowMultiSelection) {
          this.setMultiSelect();
        }
      }
      if (this.isValueChange && !this.changeOnBlur) {
        this.triggerChangeEvent(this.keyEventArgs);
        this.isValueChange = false;
      }
    };
    DropDownTree2.prototype.onNodeClicked = function(args) {
      if (!this.changeOnBlur && this.isNodeSelected) {
        this.triggerChangeEvent(args.event);
        this.isNodeSelected = false;
      }
      var target = args.event.target;
      if ((target.classList.contains("e-fullrow") || target.classList.contains("e-list-text")) && this.showCheckBox) {
        this.setMultiSelect();
        this.ensurePlaceHolder();
      }
      if (!this.changeOnBlur && (this.allowMultiSelection || this.showCheckBox)) {
        this.triggerChangeEvent(args.event);
      }
    };
    DropDownTree2.prototype.onNodeChecked = function(args) {
      var eventArgs = this.getEventArgs(args);
      this.trigger("select", eventArgs);
      if (this.isFilteredData && args.action === "uncheck") {
        var id = getValue("id", args.data[0]).toString();
        this.removeSelectedData(id, true);
      }
      if (!this.isChipDelete && args.isInteracted || !this.isFilteredData && args.action === "check" && this.isFromFilterChange) {
        this.setMultiSelect();
        this.ensurePlaceHolder();
      }
      if (this.showSelectAll && this.checkBoxElement) {
        var nodes = this.treeObj.element.querySelectorAll("li:not(.e-disable)");
        var checkedNodes = this.treeObj.element.querySelectorAll("li[aria-checked=true]");
        var wrap2 = closest(this.checkBoxElement, "." + CHECKBOXWRAP);
        if (wrap2 && args.action === "uncheck" && (args.isInteracted || checkedNodes.length === 0 || !isNullOrUndefined(args.data[0]) && args.data[0].isChecked === "false") || !args.isInteracted && this.isFilterRestore) {
          this.isFilterRestore = false;
          this.isReverseUpdate = true;
          this.changeState(wrap2, "uncheck");
          this.isReverseUpdate = false;
        } else if (wrap2 && args.action === "check" && checkedNodes.length === nodes.length && (args.isInteracted || this.isCheckAllCalled || !isNullOrUndefined(args.data[0]) && args.data[0].isChecked === "true")) {
          this.isReverseUpdate = true;
          this.isCheckAllCalled = false;
          this.changeState(wrap2, "check");
          this.isReverseUpdate = false;
        }
      }
      if (this.isValueChange && !this.changeOnBlur) {
        this.triggerChangeEvent(this.keyEventArgs);
        this.isValueChange = false;
      }
    };
    DropDownTree2.prototype.beforeCheck = function(args) {
      if (args.isInteracted) {
        this.setOldValue();
      }
    };
    DropDownTree2.prototype.onNodeExpanded = function() {
      if (this.hasTemplate && this.portals && this.treeObj.portals) {
        for (var i = 0; i < this.treeObj.portals.length; i++) {
          if (this.portals.indexOf(this.treeObj.portals[i]) === -1) {
            this.portals.push(this.treeObj.portals[i]);
          }
        }
        this.renderReactTemplates();
      }
    };
    DropDownTree2.prototype.updateClearButton = function(state) {
      if (state) {
        if (!this.inputWrapper.contains(this.overAllClear)) {
          this.inputEle.parentElement.insertBefore(this.overAllClear, this.inputEle.nextSibling);
        } else {
          removeClass([this.overAllClear], HIDEICON);
          addClass([this.inputWrapper], SHOW_CLEAR);
        }
      } else {
        addClass([this.overAllClear], HIDEICON);
        removeClass([this.inputWrapper], SHOW_CLEAR);
      }
      if ((this.allowMultiSelection || this.showCheckBox) && this.chipWrapper) {
        var chipClose = selectAll("." + CHIP_CLOSE, this.chipWrapper);
        for (var i = 0; i < chipClose.length; i++) {
          if (!state) {
            addClass([chipClose[i]], HIDEICON);
          } else {
            removeClass([chipClose[i]], HIDEICON);
          }
        }
      }
    };
    DropDownTree2.prototype.updateDropDownIconState = function(state) {
      var spinIcon = select("." + DDTICON, this.inputWrapper);
      if (state) {
        if (!spinIcon) {
          Input.appendSpan(DROPDOWNICON, this.inputWrapper, this.createElement);
        } else {
          removeClass([spinIcon], HIDEICON);
        }
        addClass([this.inputWrapper], SHOW_DD_ICON);
      } else {
        addClass([spinIcon], HIDEICON);
        removeClass([this.inputWrapper], SHOW_DD_ICON);
      }
    };
    DropDownTree2.prototype.updateMode = function() {
      if (this.mode === "Custom") {
        return;
      }
      if (this.mode !== "Delimiter") {
        if (!this.inputWrapper.contains(this.chipWrapper)) {
          this.createChip();
        }
        var isValid = this.getValidMode();
        if (this.chipWrapper.classList.contains(HIDEICON) && isValid) {
          removeClass([this.chipWrapper], HIDEICON);
          this.showOrHideValueTemplate(false, true);
          addClass([this.inputWrapper], SHOW_CHIP);
        } else if (!isValid) {
          addClass([this.chipWrapper], HIDEICON);
          removeClass([this.inputWrapper], SHOW_CHIP);
          this.showOrHideValueTemplate(true);
        }
        var isValue = this.value !== null ? this.value.length !== 0 ? true : false : false;
        if (isValid && isValue) {
          addClass([this.inputEle], CHIP_INPUT);
        } else {
          removeClass([this.inputEle], CHIP_INPUT);
        }
      } else if (this.inputEle.classList.contains(CHIP_INPUT)) {
        removeClass([this.inputEle], CHIP_INPUT);
        if (this.chipWrapper) {
          addClass([this.chipWrapper], HIDEICON);
          removeClass([this.inputWrapper], SHOW_CHIP);
          this.showOrHideValueTemplate(true);
        }
      }
    };
    DropDownTree2.prototype.ensurePlaceHolder = function() {
      if (isNullOrUndefined(this.value) || this.value !== null && this.value.length === 0) {
        removeClass([this.inputEle], CHIP_INPUT);
        if (this.chipWrapper) {
          addClass([this.chipWrapper], HIDEICON);
          this.showOrHideValueTemplate(true);
        }
      }
    };
    DropDownTree2.prototype.ensureClearIconPosition = function(floatLabelType) {
      if (floatLabelType !== "Never") {
        this.inputWrapper.insertBefore(this.overAllClear, this.inputObj.buttons[0]);
      }
    };
    DropDownTree2.prototype.setMultiSelectValue = function(newValues) {
      var _this = this;
      if (!this.isFilteredData) {
        this.setProperties({
          value: this.isFromFilterChange && newValues && newValues.length === 0 ? this.value : newValues
        }, true);
        this.isFromFilterChange = false;
        if (newValues && newValues.length !== 0 && !this.showCheckBox && !this.ddtCompareValues(this.treeObj.selectedNodes, this.value.slice())) {
          this.treeObj.selectedNodes = this.value.slice();
          this.treeObj.dataBind();
        }
      } else {
        var selectedValues = isNullOrUndefined(this.value) ? [] : this.value;
        selectedValues = selectedValues.filter(function(selectedValue) {
          var nodeData = _this.treeObj.getTreeData(selectedValue);
          if (Array.isArray(nodeData)) {
            return nodeData.every(function(nodeSelectedData) {
              return nodeSelectedData.selected;
            });
          }
          return true;
        });
        for (var i = 0; i < newValues.length; i++) {
          if (isNullOrUndefined(this.value) || this.value.indexOf(newValues[i]) === -1) {
            selectedValues.push(newValues[i]);
          }
        }
        this.setProperties({
          value: selectedValues
        }, true);
      }
    };
    DropDownTree2.prototype.setMultiSelect = function() {
      if (this.showCheckBox && !this.isDynamicChange) {
        this.setMultiSelectValue(this.treeObj.checkedNodes.slice());
      } else {
        var ddtValue = this.allowMultiSelection ? this.showCheckBox ? this.treeObj.checkedNodes : this.treeObj.selectedNodes : this.value ? this.showCheckBox ? this.value : [this.value[0]] : null;
        this.setMultiSelectValue(ddtValue);
        if (this.showCheckBox && this.value !== null) {
          this.treeObj.checkedNodes = this.value;
          this.treeObj.dataBind();
        }
      }
      this.selectedText = [];
      var checkSelection = this.allowMultiSelection ? true : this.showCheckBox ? true : false;
      if (this.inputWrapper.contains(this.chipWrapper) && !checkSelection) {
        removeClass([this.inputEle], CHIP_INPUT);
        detach(this.chipWrapper);
      }
      var isValid = this.getValidMode();
      if (isValid && this.value !== null) {
        addClass([this.inputEle], CHIP_INPUT);
        if (this.chipWrapper) {
          removeClass([this.chipWrapper], HIDEICON);
          this.showOrHideValueTemplate(false, true);
        }
      }
      var isValue = this.value ? this.value.length ? true : false : false;
      if (this.chipWrapper && this.mode === "Box" && !isValue) {
        addClass([this.chipWrapper], HIDEICON);
        removeClass([this.inputEle], CHIP_INPUT);
        this.showOrHideValueTemplate(true);
      }
      this.updateSelectedValues();
    };
    DropDownTree2.prototype.getSelectedData = function(value) {
      var data = null;
      if (this.isFilteredData) {
        for (var i = 0; i < this.selectedData.length; i++) {
          if (getValue(this.treeSettings.loadOnDemand ? this.fields.value : "id", this.selectedData[i]).toString() === value) {
            data = this.selectedData[i];
            break;
          }
        }
      }
      if (isNullOrUndefined(data)) {
        if (this.treeSettings.loadOnDemand) {
          data = this.getNodeData(value, this.treeItems);
        } else {
          data = this.treeObj.getNode(value);
        }
        if (!isNullOrUndefined(data)) {
          this.selectedData.push(data);
        }
      }
      return data;
    };
    DropDownTree2.prototype.getNodeData = function(id, dataSource) {
      var childItems;
      if (isNullOrUndefined(id)) {
        return childItems;
      } else if (this.treeDataType === 1) {
        for (var i = 0, objlen = dataSource.length; i < objlen; i++) {
          var dataId = getValue(this.fields.value, dataSource[i]);
          if (!isNullOrUndefined(dataSource[i]) && !isNullOrUndefined(dataId) && dataId.toString() === id) {
            return dataSource[i];
          }
        }
      } else {
        return this.getChildNodeData(dataSource, this.fields, id);
      }
      return childItems;
    };
    DropDownTree2.prototype.getChildNodeData = function(obj, mapper, id) {
      var newChildItems;
      if (isNullOrUndefined(obj)) {
        return newChildItems;
      }
      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        var dataValue = getValue(mapper.value, obj[i]);
        if (obj[i] && dataValue && dataValue.toString() === id) {
          return obj[i];
        } else if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {
          var childNodeData = getValue(mapper.child, obj[i]);
          newChildItems = this.getChildNodeData(childNodeData, this.getChildMapperFields(mapper), id);
          if (newChildItems !== void 0) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[i]))) {
          var child = "child";
          newChildItems = this.getChildNodeData(getValue(child, obj[i]), this.getChildMapperFields(mapper), id);
          if (newChildItems !== void 0) {
            break;
          }
        }
      }
      return newChildItems;
    };
    DropDownTree2.prototype.getChildMapperFields = function(mapper) {
      return typeof mapper.child === "string" || isNullOrUndefined(mapper.child) ? mapper : mapper.child;
    };
    DropDownTree2.prototype.removeSelectedData = function(value, muteOnChange) {
      var selectedValues = isNullOrUndefined(this.value) ? [] : this.value.slice();
      selectedValues.splice(selectedValues.indexOf(value), 1);
      this.setProperties({
        value: selectedValues
      }, muteOnChange);
      for (var i = 0; i < this.selectedData.length; i++) {
        if (getValue(this.treeSettings.loadOnDemand ? this.fields.value : "id", this.selectedData[i]).toString() === value) {
          this.selectedData.splice(i, 1);
          break;
        }
      }
    };
    DropDownTree2.prototype.initializeValueTemplate = function() {
      if (!this.valueTemplate) {
        return null;
      }
      if (this.valueTemplateContainer) {
        while (this.valueTemplateContainer.firstChild) {
          this.valueTemplateContainer.removeChild(this.valueTemplateContainer.firstChild);
        }
      } else {
        this.valueTemplateContainer = this.createElement("span", {
          className: OVERFLOW_VIEW + " " + SHOW_TEXT + " e-input-value " + HIDEICON
        });
      }
      this.inputWrapper.insertBefore(this.valueTemplateContainer, this.inputEle);
      return this.templateComplier(this.valueTemplate);
    };
    DropDownTree2.prototype.showOrHideValueTemplate = function(show, showChip) {
      if (showChip === void 0) {
        showChip = false;
      }
      if (!this.valueTemplateContainer || this.mode === "Box") {
        return;
      }
      if (show) {
        removeClass([this.valueTemplateContainer], HIDEICON);
        addClass([this.inputWrapper], SHOW_CHIP);
        addClass([this.inputEle], CHIP_INPUT);
      } else {
        addClass([this.valueTemplateContainer], HIDEICON);
        if (!showChip) {
          removeClass([this.inputWrapper], SHOW_CHIP);
          removeClass([this.inputEle], CHIP_INPUT);
        }
      }
    };
    DropDownTree2.prototype.updateSelectedValues = function() {
      var _this = this;
      this.dataValue = "";
      var temp;
      var text;
      var textValue = "";
      var selectedData;
      this.hiddenElement.innerHTML = "";
      var hiddenInputValue = "";
      if ((!this.isChipDelete || this.treeSettings.autoCheck) && this.inputWrapper.contains(this.chipWrapper)) {
        this.chipCollection.innerHTML = "";
      }
      if (!this.isFilteredData) {
        this.selectedData = [];
      }
      if (!isNullOrUndefined(this.value)) {
        var compiledString = this.initializeValueTemplate();
        for (var i = 0, len = this.value.length; i < len; i++) {
          selectedData = this.getSelectedData(this.value[i]);
          text = getValue(this.treeSettings.loadOnDemand ? this.fields.text : "text", selectedData);
          this.selectedText.push(text);
          temp = this.selectedText[this.selectedText.length - 1];
          if (this.selectedText.length > 1) {
            this.dataValue += this.delimiterChar + " " + temp;
            textValue += "," + temp;
          } else {
            this.dataValue += temp;
            textValue += temp;
          }
          if (this.mode !== "Custom" && this.mode !== "Delimiter" && (!this.isChipDelete || this.treeSettings.autoCheck) && (this.allowMultiSelection || this.showCheckBox)) {
            this.setChipValues(temp, this.value[i]);
          }
          hiddenInputValue += '<option selected value ="' + this.value[i] + '">' + this.selectedText[this.selectedText.length - 1] + "</option>";
          if (this.valueTemplate) {
            this.getValueTemplateElement(this.value[i], compiledString);
          }
        }
        if (this.hasTemplate && this.portals) {
          if (this.treeObj.portals) {
            this.portals = this.portals.concat(this.treeObj.portals.filter(function(item) {
              return !_this.portals.includes(item);
            }));
          }
          if (this.isReact) {
            this.renderReactTemplates(this.reactCallBack);
          }
        }
        if (this.selectedText.length >= 1) {
          this.setProperties({
            text: textValue
          }, true);
        }
        this.hiddenElement.innerHTML = hiddenInputValue;
        if (this.mode === "Custom" && (this.allowMultiSelection || this.showCheckBox)) {
          this.setTagValues();
        }
      }
      var isValid = this.getValidMode();
      if (this.mode !== "Custom" && this.mode !== "Box" && (this.allowMultiSelection || this.showCheckBox) && !isValid) {
        if (this.chipWrapper) {
          addClass([this.chipWrapper], HIDEICON);
          removeClass([this.inputWrapper], SHOW_CHIP);
        }
        this.showOrHideValueTemplate(true);
      }
      Input.setValue(this.dataValue, this.inputEle, this.floatLabelType);
      if (textValue === "") {
        this.setProperties({
          text: null
        }, true);
      } else {
        this.setProperties({
          text: textValue
        }, true);
      }
      if (this.showClearButton && this.inputFocus) {
        this.showOverAllClear();
      }
      if ((this.allowMultiSelection || this.showCheckBox) && this.popupObj) {
        this.popupObj.refreshPosition();
      }
      this.currentText = this.text;
      this.currentValue = this.value;
      if (!isNullOrUndefined(this.value) && this.value.length > 0 && !isNullOrUndefined(this.currentText)) {
        this.inputWrapper.setAttribute("aria-label", this.currentText.replace(/,/g, ", "));
      } else {
        this.inputWrapper.setAttribute("aria-label", this.getModuleName());
      }
    };
    DropDownTree2.prototype.setChipValues = function(text, value) {
      if (!this.inputWrapper.contains(this.chipWrapper)) {
        this.createChip();
      }
      var chip = this.createElement("span", {
        className: CHIP,
        attrs: {
          "data-value": value
        }
      });
      var chipContent = this.createElement("span", {
        className: CHIP_CONTENT
      });
      var chipClose = this.createElement("span", {
        className: CHIP_CLOSE + " " + ICONS
      });
      if (this.enableHtmlSanitizer) {
        chipContent.innerText = SanitizeHtmlHelper.sanitize(text);
      } else {
        chipContent.innerHTML = text;
      }
      chip.appendChild(chipContent);
      this.chipCollection.appendChild(chip);
      if (this.showClearButton) {
        chip.appendChild(chipClose);
        EventHandler.add(chipClose, "mouseup", this.removeChip, this);
      }
    };
    DropDownTree2.prototype.setTagValues = function() {
      if (this.value === null || this.text == null || this.value.length === 0) {
        if (this.inputWrapper.contains(this.chipWrapper)) {
          addClass([this.chipWrapper], HIDEICON);
        }
        return;
      }
      if (!this.inputWrapper.contains(this.chipWrapper)) {
        this.createChip();
      }
      if (!this.inputWrapper.classList.contains(SHOW_CHIP)) {
        addClass([this.inputWrapper], SHOW_CHIP);
      }
      var chip = this.createElement("span", {
        className: CHIP
      });
      if (!this.inputEle.classList.contains(CHIP_INPUT)) {
        addClass([this.inputEle], CHIP_INPUT);
      }
      if (this.chipWrapper.classList.contains(HIDEICON)) {
        removeClass([this.chipWrapper], HIDEICON);
        this.showOrHideValueTemplate(false, true);
      }
      var chipContent = this.createElement("span", {
        className: CHIP_CONTENT
      });
      var template = this.customTemplate;
      var templateId = this.customTemplateId;
      var templatestring = "customTemplate";
      var compiledString = this.templateComplier(template);
      var tempArr = compiledString({
        "value": this.value,
        "text": this.text
      }, this, templatestring, templateId, this.isStringTemplate, void 0, chipContent);
      if (tempArr) {
        tempArr = Array.prototype.slice.call(tempArr);
        append(tempArr, chipContent);
      }
      chip.appendChild(chipContent);
      this.chipCollection.appendChild(chip);
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    DropDownTree2.prototype.setSelectAllWrapper = function(state) {
      if (this.isFirstRender) {
        return;
      }
      if (state && !this.popupEle.contains(this.checkAllParent) && this.showCheckBox) {
        this.createSelectAllWrapper();
        this.popupEle.insertBefore(this.checkAllParent, this.popupDiv);
      } else if (this.popupEle.contains(this.checkAllParent)) {
        detach(this.checkAllParent);
        this.checkAllParent = null;
      }
    };
    DropDownTree2.prototype.setHeaderTemplate = function() {
      if (this.header) {
        this.header.innerHTML = "";
      } else {
        this.header = this.createElement("div");
        addClass([this.header], HEADER);
      }
      var compiledString = this.templateComplier(this.headerTemplate);
      var tempArr = compiledString({}, this, "headerTemplate", this.headerTemplateId, this.isStringTemplate, void 0, this.header);
      if (tempArr) {
        tempArr = Array.prototype.slice.call(tempArr);
        append(tempArr, this.header);
      }
      this.popupEle.insertBefore(this.header, this.checkAllParent ? this.checkAllParent : this.popupDiv);
    };
    DropDownTree2.prototype.templateComplier = function(template) {
      if (template) {
        try {
          if (typeof template !== "function" && document.querySelectorAll(template).length) {
            return compile(document.querySelector(template).innerHTML.trim());
          } else {
            return compile(template);
          }
        } catch (e) {
          return compile(template);
        }
      }
      return compile(template);
    };
    DropDownTree2.prototype.setFooterTemplate = function() {
      if (this.footer) {
        if (this.isReact && typeof this.footerTemplate === "function") {
          this.clearTemplate(["footerTemplate"]);
        } else {
          this.footer.innerHTML = "";
        }
      } else {
        this.footer = this.createElement("div");
        addClass([this.footer], FOOTER);
      }
      var compiledString = this.templateComplier(this.footerTemplate);
      var tempArr = compiledString({}, this, "footerTemplate", this.footerTemplateId, this.isStringTemplate, void 0, this.footer);
      if (tempArr) {
        tempArr = Array.prototype.slice.call(tempArr);
        append(tempArr, this.footer);
      }
      append([this.footer], this.popupEle);
    };
    DropDownTree2.prototype.clearAll = function(e) {
      if (!this.enabled || this.readonly) {
        return;
      }
      this.resetValue();
      this.showOverAllClear();
      if (this.allowMultiSelection || this.showCheckBox) {
        if (this.popupObj) {
          this.popupObj.refreshPosition();
        }
        if (!this.wrapText) {
          this.updateOverflowWrapper(true);
        }
      }
      if (e) {
        this.isClearButtonClick = true;
      }
      if (!this.changeOnBlur) {
        this.triggerChangeEvent(e);
      }
    };
    DropDownTree2.prototype.removeChip = function(e) {
      if (!this.enabled || this.readonly) {
        return;
      }
      if (e.target.classList.contains("e-chips-close") && !this.isPopupOpen) {
        e.stopPropagation();
        e.preventDefault();
      }
      var element = e.target.parentElement;
      var value = element.getAttribute("data-value");
      if (this.chipCollection) {
        if (element) {
          remove(element);
        }
      }
      this.isChipDelete = true;
      this.isClearButtonClick = true;
      this.removeSelectedData(value, true);
      this.selectedText = [];
      if (this.allowMultiSelection) {
        this.treeObj.selectedNodes = this.value.slice();
        this.updateSelectedValues();
      }
      if (this.showCheckBox) {
        this.treeObj.uncheckAll([value]);
        this.clearCheckAll();
        this.setMultiSelect();
      }
      this.triggerChangeEvent(e);
      this.isChipDelete = false;
      this.ensurePlaceHolder();
    };
    DropDownTree2.prototype.resetValue = function(isDynamicChange) {
      if (Array.isArray(this.value) && this.value.length === 0 && this.text == null) {
        return;
      }
      Input.setValue(null, this.inputEle, this.floatLabelType);
      if (!isDynamicChange) {
        this.setOldValue();
        this.setProperties({
          value: []
        }, true);
        this.showOrHideValueTemplate(false);
      }
      if (isNullOrUndefined(this.value) || this.value.length === 0) {
        this.inputWrapper.setAttribute("aria-label", this.getModuleName());
      }
      this.dataValue = null;
      this.setProperties({
        text: null
      }, true);
      this.selectedData = [];
      setValue("selectedNodes", [], this.treeObj);
      this.hiddenElement.innerHTML = "";
      if (this.showCheckBox) {
        this.treeObj.uncheckAll();
        this.setMultiSelect();
        this.clearCheckAll();
      }
      if (this.oldValue === null && !isDynamicChange) {
        this.removeValue = true;
      } else if (isDynamicChange) {
        this.triggerChangeEvent();
      }
      if ((this.allowMultiSelection || this.showCheckBox) && this.chipWrapper) {
        this.chipCollection.innerHTML = "";
        if (!this.wrapText) {
          this.updateOverflowWrapper(true);
        }
        this.ensurePlaceHolder();
      }
    };
    DropDownTree2.prototype.clearCheckAll = function() {
      if (this.showSelectAll && this.value && this.value.length === 0) {
        this.setLocale(false);
      }
    };
    DropDownTree2.prototype.setOldValue = function() {
      this.oldValue = Array.isArray(this.value) ? this.value.slice() : this.value;
    };
    DropDownTree2.prototype.selectAllItems = function(state) {
      if (this.showCheckBox) {
        if (state) {
          this.isCheckAllCalled = true;
          this.treeObj.checkAll();
        } else {
          this.treeObj.uncheckAll();
        }
        this.checkSelectAll = state;
      } else if (this.allowMultiSelection) {
        if (!state) {
          this.treeObj.selectedNodes = [];
        } else {
          var li = selectAll("li", this.treeObj.element);
          var id = void 0;
          var arr = [];
          for (var i = 0; i < li.length; i++) {
            id = li[i].getAttribute("data-uid").toString();
            arr.push(id);
          }
          this.treeObj.selectedNodes = arr;
        }
      }
      this.updateMode();
      this.setMultiSelect();
      if (!this.wrapText) {
        if (state) {
          this.updateView();
        } else {
          this.updateOverflowWrapper(true);
        }
      }
    };
    DropDownTree2.prototype.updateTreeSettings = function(prop) {
      if (prop === "autoCheck") {
        this.treeObj.autoCheck = this.treeSettings.autoCheck;
      } else if (prop === "loadOnDemand") {
        this.treeObj.loadOnDemand = this.treeSettings.loadOnDemand;
      } else if (prop === "expandOn") {
        this.treeObj.expandOn = this.treeSettings.expandOn;
        this.treeObj.dataBind();
        return;
      } else if (prop === "checkDisabledChildren") {
        this.treeObj.checkDisabledChildren = this.treeSettings.checkDisabledChildren;
      }
      this.treeObj.dataBind();
      this.setMultiSelect();
      this.updateValue(this.value);
    };
    DropDownTree2.prototype.updateCheckBoxState = function(checkBox) {
      if (this.hasTemplate) {
        this.updateTemplate();
      }
      if (!this.wrapText) {
        this.updateOverflowWrapper(false);
      }
      this.treeObj.showCheckBox = checkBox;
      this.treeObj.dataBind();
      this.isDynamicChange = true;
      this.setSelectAllWrapper(this.showSelectAll);
      if (this.showSelectAll) {
        this.setLocale();
      }
      if (this.showCheckBox) {
        this.updateMode();
      }
      this.setMultiSelect();
      this.isDynamicChange = false;
    };
    DropDownTree2.prototype.updateTemplate = function() {
      if (this.popupObj) {
        this.clearTemplate();
        this.portals = [];
        this.popupObj.destroy();
        if (this.isPopupOpen) {
          this.hidePopup();
          this.isFirstRender = true;
          this.renderPopup();
        } else {
          this.isFirstRender = true;
        }
      }
    };
    DropDownTree2.prototype.l10nUpdate = function(actionFailure2) {
      if (this.noRecord) {
        this.noRecord.innerHTML = "";
      } else {
        this.noRecord = this.createElement("div");
      }
      if (this.noRecordsTemplate !== "No Records Found" || this.actionFailureTemplate !== "The Request Failed") {
        var template = actionFailure2 ? this.actionFailureTemplate : this.noRecordsTemplate;
        var templateId = actionFailure2 ? this.actionFailureTemplateId : this.noRecordsTemplateId;
        var templatestring = actionFailure2 ? "actionFailureTemplate" : "noRecordsTemplate";
        var compiledString = this.templateComplier(template);
        var tempArr = compiledString({}, this, templatestring, templateId, this.isStringTemplate, void 0, this.noRecord);
        if (tempArr) {
          tempArr = Array.prototype.slice.call(tempArr);
          append(tempArr, this.noRecord);
        }
      } else {
        var l10nLocale = {
          noRecordsTemplate: "No Records Found",
          actionFailureTemplate: "The Request Failed"
        };
        this.l10n = new L10n(this.getLocaleName(), l10nLocale, this.locale);
        this.noRecord.innerHTML = actionFailure2 ? this.l10n.getConstant("actionFailureTemplate") : this.l10n.getConstant("noRecordsTemplate");
      }
      addClass([this.noRecord], NODATACONTAINER);
      prepend([this.noRecord], this.popupDiv);
      if (this.treeObj) {
        this.treeObj.element.removeAttribute("aria-activedescendant");
      }
    };
    DropDownTree2.prototype.updateRecordTemplate = function(action) {
      if (this.treeItems && this.treeItems.length <= 0) {
        this.l10nUpdate(action);
        if (this.hasTemplate) {
          this.updateTemplate();
        }
      }
    };
    DropDownTree2.prototype.updateOverflowWrapper = function(state) {
      if (!state) {
        if (!this.inputWrapper.contains(this.overFlowWrapper)) {
          this.overFlowWrapper = this.createElement("span", {
            className: OVERFLOW_VIEW + " " + HIDEICON
          });
          this.inputWrapper.insertBefore(this.overFlowWrapper, this.hiddenElement);
        }
      } else if (this.inputWrapper.contains(this.overFlowWrapper) && state) {
        this.overFlowWrapper.innerHTML = "";
      }
    };
    DropDownTree2.prototype.updateMultiSelection = function(state) {
      if (!this.wrapText) {
        this.updateOverflowWrapper(false);
      }
      this.treeObj.allowMultiSelection = state;
      this.treeObj.dataBind();
      this.updateOption();
      if (this.allowMultiSelection) {
        this.updateMode();
      }
      this.setMultiSelect();
    };
    DropDownTree2.prototype.updateAllowFiltering = function(state) {
      if (!this.isFirstRender) {
        if (state) {
          this.renderFilter();
        } else {
          this.destroyFilter();
        }
      }
    };
    DropDownTree2.prototype.updateFilterPlaceHolder = function() {
      if (this.filterObj) {
        this.filterObj.placeholder = this.filterBarPlaceholder;
        this.filterObj.element.setAttribute("aria-label", this.filterBarPlaceholder);
      }
    };
    DropDownTree2.prototype.updateValue = function(value) {
      this.isDynamicChange = true;
      if (isNullOrUndefined(value) || value.length === 0) {
        this.resetValue(true);
      } else {
        this.setTreeValue();
        if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {
          this.updateOverflowWrapper(false);
          this.updateView();
        }
      }
      this.updateHiddenValue();
      this.isDynamicChange = false;
    };
    DropDownTree2.prototype.updateText = function(text) {
      if (isNullOrUndefined(text)) {
        this.resetValue();
      } else {
        this.setTreeText();
        if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {
          this.updateOverflowWrapper(false);
          this.updateView();
        }
      }
      this.updateHiddenValue();
    };
    DropDownTree2.prototype.updateModelMode = function() {
      var validMode = this.allowMultiSelection ? true : this.showCheckBox ? true : false;
      if (!validMode) {
        return;
      }
      if (!this.wrapText) {
        var overFlow = select(".e-overflow:not(.e-input-value)", this.inputWrapper);
        if (overFlow) {
          overFlow.innerHTML = "";
        }
      }
      this.updateMode();
      this.setMultiSelect();
      if (!this.wrapText && this.value && this.value.length !== 0) {
        this.updateOverFlowView();
        addClass([this.inputEle], CHIP_INPUT);
        if (this.mode === "Box") {
          removeClass([this.overFlowWrapper, this.inputWrapper], SHOW_TEXT);
        } else {
          addClass([this.overFlowWrapper, this.inputWrapper], SHOW_TEXT);
        }
      }
    };
    DropDownTree2.prototype.updateOption = function() {
      if (!this.hiddenElement.hasAttribute("multiple") && (this.allowMultiSelection || this.showCheckBox)) {
        this.hiddenElement.setAttribute("multiple", "");
      } else if (this.hiddenElement.hasAttribute("multiple") && !this.allowMultiSelection && !this.showCheckBox) {
        this.hiddenElement.removeAttribute("multiple");
      }
    };
    DropDownTree2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "width":
            this.setElementWidth(newProp.width);
            if (this.popupObj) {
              this.popupObj.element.style.width = this.setWidth();
            }
            break;
          case "placeholder":
            Input.setPlaceholder(newProp.placeholder, this.inputEle);
            break;
          case "cssClass":
            this.setCssClass(newProp.cssClass, oldProp.cssClass);
            break;
          case "enableRtl":
            this.setEnableRTL(this.enableRtl);
            break;
          case "fields":
            this.setFields();
            break;
          case "readonly":
            Input.setReadonly(newProp.readonly, this.inputEle);
            break;
          case "enabled":
            this.setEnable();
            break;
          case "floatLabelType":
            Input.removeFloating(this.inputObj);
            Input.addFloating(this.inputEle, newProp.floatLabelType, this.placeholder, this.createElement);
            this.ensureClearIconPosition(newProp.floatLabelType);
            break;
          case "showClearButton":
            this.updateClearButton(newProp.showClearButton);
            break;
          case "allowFiltering":
            this.updateAllowFiltering(newProp.allowFiltering);
            break;
          case "filterBarPlaceholder":
            this.updateFilterPlaceHolder();
            break;
          case "value":
            if (JSON.stringify(oldProp.value) !== JSON.stringify(newProp.value)) {
              this.oldValue = oldProp.value;
              this.updateValue(newProp.value);
            }
            break;
          case "text":
            this.updateText(newProp.text);
            break;
          case "allowMultiSelection":
            this.updateMultiSelection(newProp.allowMultiSelection);
            break;
          case "mode":
            if (!this.showCheckBox && !this.allowMultiSelection) {
              return;
            }
            if (this.mode === "Custom") {
              if (this.overFlowWrapper) {
                detach(this.overFlowWrapper);
              }
              if (this.chipWrapper) {
                detach(this.chipWrapper);
              }
              this.setTagValues();
            } else {
              if (oldProp.mode === "Custom") {
                this.updateOverflowWrapper(this.wrapText);
              }
              this.updateModelMode();
            }
            break;
          case "delimiterChar":
            if (this.mode === "Box") {
              return;
            }
            if (this.showCheckBox || this.allowMultiSelection) {
              this.setMultiSelect();
            }
            break;
          case "selectAllText":
            if (this.showCheckBox && this.showSelectAll) {
              this.setLocale();
            }
            break;
          case "unSelectAllText":
            if (this.showCheckBox && this.showSelectAll) {
              this.setLocale(false);
            }
            break;
          case "showSelectAll":
            if (this.showCheckBox) {
              this.setSelectAllWrapper(newProp.showSelectAll);
              this.updatePopupHeight();
            }
            break;
          case "showCheckBox":
            this.updateCheckBoxState(newProp.showCheckBox);
            if (!this.wrapText) {
              this.updateOverflowWrapper(true);
            }
            this.updatePopupHeight();
            this.updateOption();
            break;
          case "treeSettings":
            for (var _b = 0, _c = Object.keys(newProp.treeSettings); _b < _c.length; _b++) {
              var prop_1 = _c[_b];
              this.updateTreeSettings(prop_1);
            }
            break;
          case "customTemplate":
            if (this.mode !== "Custom") {
              return;
            }
            this.chipCollection.innerHTML = "";
            this.setTagValues();
            break;
          case "sortOrder":
            if (this.hasTemplate) {
              this.updateTemplate();
            }
            this.treeObj.sortOrder = newProp.sortOrder;
            this.treeObj.dataBind();
            this.updateValue(this.value);
            break;
          case "showDropDownIcon":
            this.updateDropDownIconState(newProp.showDropDownIcon);
            break;
          case "popupWidth":
            if (this.popupObj) {
              this.popupObj.element.style.width = this.setWidth();
            }
            break;
          case "popupHeight":
            if (this.popupObj) {
              this.updatePopupHeight();
            }
            break;
          case "zIndex":
            if (this.popupObj) {
              this.popupObj.zIndex = newProp.zIndex;
              this.popupObj.dataBind();
            }
            break;
          case "headerTemplate":
            this.updateTemplate();
            break;
          case "footerTemplate":
            this.updateTemplate();
            break;
          case "itemTemplate":
            this.updateTemplate();
            this.treeObj.nodeTemplate = newProp.itemTemplate;
            this.treeObj.dataBind();
            break;
          case "noRecordsTemplate":
            this.updateRecordTemplate();
            break;
          case "actionFailureTemplate":
            this.updateRecordTemplate(true);
            break;
          case "htmlAttributes":
            this.setHTMLAttributes();
            break;
          case "wrapText":
            this.updateOverflowWrapper(this.wrapText);
            if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {
              this.updateView();
            } else {
              addClass([this.overFlowWrapper], HIDEICON);
              if (this.chipWrapper && this.mode === "Box") {
                removeClass([this.chipWrapper], HIDEICON);
              } else {
                removeClass([this.inputWrapper], SHOW_CHIP);
                removeClass([this.inputEle], CHIP_INPUT);
              }
              this.ensurePlaceHolder();
            }
            break;
        }
      }
    };
    DropDownTree2.prototype.clear = function() {
      this.clearAll();
      if (this.inputFocus) {
        this.onFocusOut();
      } else {
        if (this.changeOnBlur) {
          this.triggerChangeEvent();
        }
        this.removeValue = false;
      }
    };
    DropDownTree2.prototype.destroy = function() {
      this.clearTemplate();
      this.unWireEvents();
      this.setCssClass(null, this.cssClass);
      this.setProperties({
        text: null
      }, true);
      this.treeObj.destroy();
      this.destroyFilter();
      if (this.popupObj) {
        this.popupObj.destroy();
        detach(this.popupObj.element);
      }
      if (this.element.tagName !== this.getDirective()) {
        this.inputWrapper.parentElement.insertBefore(this.element, this.inputWrapper);
      }
      Input.setValue(null, this.inputEle, this.floatLabelType);
      detach(this.inputWrapper);
      detach(this.popupDiv);
      detach(this.hiddenElement);
      Input.setRipple(false, [this.inputObj]);
      this.element.classList.remove("e-input");
      if (this.showCheckBox || this.allowMultiSelection || this.value && this.valueTemplateContainer) {
        this.element.classList.remove(CHIP_INPUT);
      }
      detach(this.inputObj.container);
      if (this.inputObj.buttons.length) {
        detach(this.inputObj.buttons[0]);
      }
      this.inputObj = null;
      while (this.hiddenElement.options.length > 0) {
        this.hiddenElement.remove(0);
      }
      this.hiddenElement.innerHTML = "";
      this.hiddenElement = null;
      this.inputWrapper.innerHTML = "";
      this.inputWrapper = null;
      this.popupDiv = null;
      this.tree = null;
      this.popupObj = null;
      this.treeObj = null;
      this.overAllClear = null;
      if (this.chipCollection) {
        var chipsIcons = selectAll(".e-chips-close", this.chipCollection);
        for (var _i = 0, chipsIcons_1 = chipsIcons; _i < chipsIcons_1.length; _i++) {
          var element = chipsIcons_1[_i];
          EventHandler.remove(element, "mouseup", this.removeChip);
        }
      }
      this.chipWrapper = null;
      this.chipCollection = null;
      this.checkAllParent = null;
      this.selectAllSpan = null;
      this.checkBoxElement = null;
      this.checkWrapper = null;
      this.popupEle = null;
      this.header = null;
      this.footer = null;
      this.overFlowWrapper = null;
      this.keyboardModule = null;
      _super.prototype.destroy.call(this);
      this.setProperties({
        value: []
      }, true);
    };
    DropDownTree2.prototype.destroyFilter = function() {
      if (this.filterObj) {
        this.filterObj.destroy();
        detach(this.filterObj.element);
        detach(this.filterContainer);
        this.filterObj = null;
      }
    };
    DropDownTree2.prototype.destroyPopup = function() {
      this.isPopupOpen = false;
      if (this.isReact) {
        this.clearTemplate(["headerTemplate", "footerTemplate", "itemTemplate", "actionFailureTemplate", "noRecordsTemplate"]);
      }
      if (this.popupObj) {
        this.popupObj.destroy();
        detach(this.popupObj.element);
      }
    };
    DropDownTree2.prototype.ensureVisible = function(item) {
      this.treeObj.ensureVisible(item);
    };
    DropDownTree2.prototype.getData = function(item) {
      return this.treeObj.getTreeData(item);
    };
    DropDownTree2.prototype.hidePopup = function() {
      var eventArgs = {
        popup: this.popupObj,
        cancel: false
      };
      this.trigger("close", eventArgs);
      if (eventArgs.cancel) {
        return;
      }
      this.inputWrapper.classList.remove(ICONANIMATION);
      if (this.popupEle) {
        addClass([this.popupEle], DDTHIDEICON);
      }
      attributes(this.inputEle, {
        "aria-expanded": "false"
      });
      if (this.popupObj && this.isPopupOpen) {
        this.popupObj.hide();
        if (this.inputFocus) {
          this.inputWrapper.focus();
          if (this.allowFiltering) {
            addClass([this.inputWrapper], [INPUTFOCUS]);
          }
        }
        if (this.isFilteredData) {
          this.treeObj["treeData"] = this.treeData;
        }
        if (this.destroyPopupOnHide) {
          this.isFirstRender = true;
          this.destroyPopup();
        }
      }
    };
    DropDownTree2.prototype.selectAll = function(state) {
      this.selectAllItems(state);
    };
    DropDownTree2.prototype.showPopup = function() {
      if (!this.enabled || this.readonly || this.isPopupOpen) {
        return;
      }
      this.renderPopup();
      this.focusIn();
    };
    DropDownTree2.prototype.getModuleName = function() {
      return "dropdowntree";
    };
    __decorate11([Property("The Request Failed")], DropDownTree2.prototype, "actionFailureTemplate", void 0);
    __decorate11([Property(false)], DropDownTree2.prototype, "allowFiltering", void 0);
    __decorate11([Property(false)], DropDownTree2.prototype, "allowMultiSelection", void 0);
    __decorate11([Property(true)], DropDownTree2.prototype, "changeOnBlur", void 0);
    __decorate11([Property("")], DropDownTree2.prototype, "cssClass", void 0);
    __decorate11([Property("${value.length} item(s) selected")], DropDownTree2.prototype, "customTemplate", void 0);
    __decorate11([Property(",")], DropDownTree2.prototype, "delimiterChar", void 0);
    __decorate11([Property(true)], DropDownTree2.prototype, "enabled", void 0);
    __decorate11([Complex({}, Fields)], DropDownTree2.prototype, "fields", void 0);
    __decorate11([Property(null)], DropDownTree2.prototype, "filterBarPlaceholder", void 0);
    __decorate11([Property("StartsWith")], DropDownTree2.prototype, "filterType", void 0);
    __decorate11([Property("Never")], DropDownTree2.prototype, "floatLabelType", void 0);
    __decorate11([Property(null)], DropDownTree2.prototype, "footerTemplate", void 0);
    __decorate11([Property(false)], DropDownTree2.prototype, "ignoreAccent", void 0);
    __decorate11([Property(true)], DropDownTree2.prototype, "ignoreCase", void 0);
    __decorate11([Property(null)], DropDownTree2.prototype, "headerTemplate", void 0);
    __decorate11([Property({})], DropDownTree2.prototype, "htmlAttributes", void 0);
    __decorate11([Property(null)], DropDownTree2.prototype, "itemTemplate", void 0);
    __decorate11([Property("Default")], DropDownTree2.prototype, "mode", void 0);
    __decorate11([Property("No Records Found")], DropDownTree2.prototype, "noRecordsTemplate", void 0);
    __decorate11([Property(null)], DropDownTree2.prototype, "placeholder", void 0);
    __decorate11([Property("300px")], DropDownTree2.prototype, "popupHeight", void 0);
    __decorate11([Property("100%")], DropDownTree2.prototype, "popupWidth", void 0);
    __decorate11([Property(false)], DropDownTree2.prototype, "readonly", void 0);
    __decorate11([Property(false)], DropDownTree2.prototype, "showSelectAll", void 0);
    __decorate11([Property("Select All")], DropDownTree2.prototype, "selectAllText", void 0);
    __decorate11([Property(false)], DropDownTree2.prototype, "showCheckBox", void 0);
    __decorate11([Property(true)], DropDownTree2.prototype, "destroyPopupOnHide", void 0);
    __decorate11([Property(true)], DropDownTree2.prototype, "enableHtmlSanitizer", void 0);
    __decorate11([Property(true)], DropDownTree2.prototype, "showClearButton", void 0);
    __decorate11([Property(true)], DropDownTree2.prototype, "showDropDownIcon", void 0);
    __decorate11([Property("None")], DropDownTree2.prototype, "sortOrder", void 0);
    __decorate11([Property(null)], DropDownTree2.prototype, "text", void 0);
    __decorate11([Complex({}, TreeSettings)], DropDownTree2.prototype, "treeSettings", void 0);
    __decorate11([Property("Unselect All")], DropDownTree2.prototype, "unSelectAllText", void 0);
    __decorate11([Property(null)], DropDownTree2.prototype, "value", void 0);
    __decorate11([Property(null)], DropDownTree2.prototype, "valueTemplate", void 0);
    __decorate11([Property("100%")], DropDownTree2.prototype, "width", void 0);
    __decorate11([Property(1e3)], DropDownTree2.prototype, "zIndex", void 0);
    __decorate11([Property(false)], DropDownTree2.prototype, "wrapText", void 0);
    __decorate11([Event2()], DropDownTree2.prototype, "actionFailure", void 0);
    __decorate11([Event2()], DropDownTree2.prototype, "beforeOpen", void 0);
    __decorate11([Event2()], DropDownTree2.prototype, "change", void 0);
    __decorate11([Event2()], DropDownTree2.prototype, "close", void 0);
    __decorate11([Event2()], DropDownTree2.prototype, "blur", void 0);
    __decorate11([Event2()], DropDownTree2.prototype, "created", void 0);
    __decorate11([Event2()], DropDownTree2.prototype, "dataBound", void 0);
    __decorate11([Event2()], DropDownTree2.prototype, "destroyed", void 0);
    __decorate11([Event2()], DropDownTree2.prototype, "filtering", void 0);
    __decorate11([Event2()], DropDownTree2.prototype, "focus", void 0);
    __decorate11([Event2()], DropDownTree2.prototype, "keyPress", void 0);
    __decorate11([Event2()], DropDownTree2.prototype, "open", void 0);
    __decorate11([Event2()], DropDownTree2.prototype, "select", void 0);
    DropDownTree2 = __decorate11([NotifyPropertyChanges], DropDownTree2);
    return DropDownTree2;
  }(Component)
);

// node_modules/@syncfusion/ej2-dropdowns/src/combo-box/combo-box.js
var __extends25 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate12 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SPINNER_CLASS = "e-atc-spinner-icon";
dropDownListClasses.root = "e-combobox";
var inputObject2 = {
  container: null,
  buttons: []
};
var ComboBox = (
  /** @class */
  function(_super) {
    __extends25(ComboBox2, _super);
    function ComboBox2(options, element) {
      return _super.call(this, options, element) || this;
    }
    ComboBox2.prototype.preRender = function() {
      _super.prototype.preRender.call(this);
    };
    ComboBox2.prototype.getLocaleName = function() {
      return "combo-box";
    };
    ComboBox2.prototype.wireEvent = function() {
      if (this.getModuleName() === "combobox") {
        EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.preventBlur, this);
        EventHandler.add(this.inputWrapper.container, "blur", this.onBlurHandler, this);
      }
      if (!isNullOrUndefined(this.inputWrapper.buttons[0])) {
        EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.dropDownClick, this);
      }
      EventHandler.add(this.inputElement, "focus", this.targetFocus, this);
      if (!this.readonly) {
        EventHandler.add(this.inputElement, "input", this.onInput, this);
        EventHandler.add(this.inputElement, "keyup", this.onFilterUp, this);
        EventHandler.add(this.inputElement, "keydown", this.onFilterDown, this);
        EventHandler.add(this.inputElement, "paste", this.pasteHandler, this);
        EventHandler.add(window, "resize", this.windowResize, this);
      }
      this.bindCommonEvent();
    };
    ComboBox2.prototype.preventBlur = function(e) {
      if (!this.allowFiltering && document.activeElement !== this.inputElement && !document.activeElement.classList.contains(dropDownListClasses.input) && Browser.isDevice || !Browser.isDevice) {
        e.preventDefault();
      }
    };
    ComboBox2.prototype.onBlurHandler = function(e) {
      var inputValue = this.inputElement && this.inputElement.value === "" ? null : this.inputElement && this.inputElement.value;
      var text = !isNullOrUndefined(this.text) ? this.text.replace(/\r\n|\n|\r/g, "") : this.text;
      if (!isNullOrUndefined(this.listData) && !isNullOrUndefined(inputValue) && inputValue !== text) {
        this.customValue(e);
      }
      _super.prototype.onBlurHandler.call(this, e);
    };
    ComboBox2.prototype.targetElement = function() {
      return this.inputElement;
    };
    ComboBox2.prototype.setOldText = function(text) {
      Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
      this.customValue();
      this.removeSelection();
    };
    ComboBox2.prototype.setOldValue = function(value) {
      if (this.allowCustom) {
        this.selectedLI = this.getElementByValue(this.value);
        this.valueMuteChange(this.value);
      } else {
        this.valueMuteChange(null);
      }
      this.removeSelection();
      this.setHiddenValue();
    };
    ComboBox2.prototype.valueMuteChange = function(value) {
      value = this.allowObjectBinding && !isNullOrUndefined(value) ? getValue(this.fields.value ? this.fields.value : "", value) : value;
      var inputValue = isNullOrUndefined(value) ? null : value.toString();
      Input.setValue(inputValue, this.inputElement, this.floatLabelType, this.showClearButton);
      var changeData = {};
      if (this.allowObjectBinding) {
        value = this.getDataByValue(value);
        if (isNullOrUndefined(value)) {
          var fields_1 = this.fields;
          var isvalidTextField_1 = false;
          var isValidValue_1 = false;
          if (this.allowObjectBinding) {
            var keys = Object.keys(this.value);
            keys.forEach(function(key) {
              if (key === fields_1.value) {
                isValidValue_1 = true;
                return;
              }
            });
            keys.forEach(function(key) {
              if (key === fields_1.text) {
                isvalidTextField_1 = true;
                return;
              }
            });
          }
          changeData = {
            text: isValidValue_1 ? isvalidTextField_1 ? getValue(fields_1.text, this.value) : getValue(fields_1.value, this.value) : null,
            value: isValidValue_1 ? this.value : null,
            index: null
          };
        }
      }
      if (this.allowObjectBinding) {
        this.setProperties(changeData, true);
      } else {
        this.setProperties({
          value,
          text: value ? value.toString() : value,
          index: null
        }, true);
      }
      this.activeIndex = this.index;
      var fields = this.fields;
      var dataItem = {};
      dataItem[fields.text] = isNullOrUndefined(value) ? null : value.toString();
      dataItem[fields.value] = isNullOrUndefined(value) ? null : value.toString();
      this.itemData = dataItem;
      this.item = null;
      if (!this.allowObjectBinding && this.previousValue !== this.value || this.allowObjectBinding && this.previousValue && this.value && !this.isObjectInArray(this.previousValue, [this.value])) {
        this.detachChangeEvent(null);
      }
    };
    ComboBox2.prototype.updateValues = function() {
      var _this = this;
      if (this.fields.disabled) {
        if (this.value != null) {
          this.value = !this.isDisableItemValue(this.value) ? this.value : null;
        }
        if (this.text != null) {
          this.text = !this.isDisabledItemByIndex(this.getIndexByValue(this.getValueByText(this.text))) ? this.text : null;
        }
        if (this.index != null) {
          this.index = !this.isDisabledItemByIndex(this.index) ? this.index : null;
          this.activeIndex = this.index;
        }
      }
      if (!isNullOrUndefined(this.value)) {
        var currentValue = this.allowObjectBinding && !isNullOrUndefined(this.value) ? getValue(this.fields.value ? this.fields.value : "", this.value) : this.value;
        var li = this.getElementByValue(currentValue);
        var doesItemExist = !isNullOrUndefined(li) ? true : false;
        if (this.enableVirtualization && this.value) {
          var fields = this.fields.value ? this.fields.value : "";
          var currentValue_1 = this.allowObjectBinding && !isNullOrUndefined(this.value) ? getValue(this.fields.value ? this.fields.value : "", this.value) : this.value;
          if (this.dataSource instanceof DataManager) {
            this.dataSource.executeQuery(new Query().where(new Predicate(fields, "equal", currentValue_1))).then(function(e) {
              if (e.result.length > 0) {
                _this.itemData = e.result[0];
                var dataItem2 = _this.getItemData();
                var value2 = _this.allowObjectBinding ? _this.getDataByValue(dataItem2.value) : dataItem2.value;
                if (_this.value === dataItem2.value && _this.text !== dataItem2.text || _this.value !== dataItem2.value && _this.text === dataItem2.text) {
                  _this.setProperties({
                    "text": dataItem2.text ? dataItem2.text.toString() : dataItem2.text,
                    "value": value2
                  });
                }
              } else {
                _this.valueMuteChange(null);
              }
            });
          } else {
            var getItem = new DataManager(this.dataSource).executeLocal(new Query().where(new Predicate(fields, "equal", currentValue_1)));
            if (getItem && getItem.length > 0) {
              this.itemData = getItem[0];
              doesItemExist = true;
              var dataItem = this.getItemData();
              var value = this.allowObjectBinding ? this.getDataByValue(dataItem.value) : dataItem.value;
              if (this.value === dataItem.value && this.text !== dataItem.text || this.value !== dataItem.value && this.text === dataItem.text) {
                this.setProperties({
                  "text": dataItem.text ? dataItem.text.toString() : dataItem.text,
                  "value": value
                });
                if (isNullOrUndefined(li)) {
                  this.previousValue = this.value;
                }
              }
            }
          }
        }
        if (li) {
          this.setSelection(li, null);
        } else if (!this.enableVirtualization && this.allowCustom || this.allowCustom && this.enableVirtualization && !doesItemExist) {
          this.valueMuteChange(this.value);
        } else if (!this.enableVirtualization || this.enableVirtualization && !(this.dataSource instanceof DataManager) && !doesItemExist) {
          this.valueMuteChange(null);
        }
      } else if (this.text && isNullOrUndefined(this.value)) {
        var li = this.getElementByText(this.text);
        if (li) {
          this.setSelection(li, null);
        } else {
          Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
          this.customValue();
        }
      } else {
        this.setSelection(this.liCollections[this.activeIndex], null);
      }
      this.setHiddenValue();
      Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
    };
    ComboBox2.prototype.updateIconState = function() {
      if (this.showClearButton) {
        if (this.inputElement && this.inputElement.value !== "" && !this.readonly) {
          removeClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
        } else {
          addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
        }
      }
    };
    ComboBox2.prototype.getAriaAttributes = function() {
      var ariaAttributes = {
        "role": "combobox",
        "aria-autocomplete": "both",
        "aria-labelledby": this.hiddenElement.id,
        "aria-expanded": "false",
        "aria-readonly": this.readonly ? this.readonly.toString() : "false",
        "autocomplete": "off",
        "autocapitalize": "off",
        "spellcheck": "false"
      };
      return ariaAttributes;
    };
    ComboBox2.prototype.searchLists = function(e) {
      this.isTyped = true;
      if (this.isFiltering()) {
        _super.prototype.searchLists.call(this, e);
        if (this.ulElement && this.filterInput.value.trim() === "") {
          this.setHoverList(this.ulElement.querySelector("." + dropDownListClasses.li));
        }
      } else {
        if (this.ulElement && this.inputElement.value === "" && this.preventAutoFill) {
          this.setHoverList(this.ulElement.querySelector("." + dropDownListClasses.li));
        }
        this.incrementalSearch(e);
      }
    };
    ComboBox2.prototype.getNgDirective = function() {
      return "EJS-COMBOBOX";
    };
    ComboBox2.prototype.setSearchBox = function() {
      this.filterInput = this.inputElement;
      var searchBoxContainer = this.isFiltering() || this.isReact && this.getModuleName() === "combobox" ? this.inputWrapper : inputObject2;
      return searchBoxContainer;
    };
    ComboBox2.prototype.onActionComplete = function(ulElement, list, e, isUpdated) {
      var _this = this;
      _super.prototype.onActionComplete.call(this, ulElement, list, e);
      if (this.isSelectCustom) {
        this.removeSelection();
      }
      if (!this.preventAutoFill && this.getModuleName() === "combobox" && this.isTyped && !this.enableVirtualization) {
        setTimeout(function() {
          _this.inlineSearch();
        });
      }
    };
    ComboBox2.prototype.getFocusElement = function() {
      var dataItem = this.isSelectCustom ? {
        text: ""
      } : this.getItemData();
      var selected = !isNullOrUndefined(this.list) ? this.list.querySelector("." + dropDownListClasses.selected) : this.list;
      var isSelected = dataItem.text && dataItem.text.toString() === this.inputElement.value && !isNullOrUndefined(selected);
      if (isSelected) {
        return selected;
      }
      if ((Browser.isDevice && !this.isDropDownClick || !Browser.isDevice) && !isNullOrUndefined(this.liCollections) && this.liCollections.length > 0) {
        var inputValue = this.inputElement.value;
        var dataSource = this.sortedData;
        var type = this.typeOfData(dataSource).typeof;
        var activeItem = Search2(inputValue, this.liCollections, this.filterType, true, dataSource, this.fields, type, this.ignoreAccent);
        if (this.enableVirtualization && inputValue !== "" && this.getModuleName() !== "autocomplete" && this.isTyped && !this.allowFiltering) {
          var updatingincrementalindex = false;
          var isEndIndexValid = this.viewPortInfo.endIndex >= this.incrementalEndIndex && this.incrementalEndIndex <= this.totalItemCount;
          var isIncrementalEndIndexZero = this.incrementalEndIndex === 0;
          if (isEndIndexValid || isIncrementalEndIndexZero) {
            updatingincrementalindex = true;
            this.incrementalStartIndex = this.incrementalEndIndex;
            if (isIncrementalEndIndexZero) {
              this.incrementalEndIndex = Math.min(100, this.totalItemCount);
            } else {
              this.incrementalEndIndex = Math.min(this.incrementalEndIndex + 100, this.totalItemCount);
            }
            this.updateIncrementalInfo(this.incrementalStartIndex, this.incrementalEndIndex);
            updatingincrementalindex = true;
          }
          if (this.viewPortInfo.startIndex !== 0 || updatingincrementalindex) {
            this.updateIncrementalView(0, this.itemCount);
          }
          activeItem = Search2(inputValue, this.incrementalLiCollections, this.filterType, true, dataSource, this.fields, type);
          while (isNullOrUndefined(activeItem.item) && this.incrementalEndIndex < this.totalItemCount) {
            this.incrementalStartIndex = this.incrementalEndIndex;
            this.incrementalEndIndex = this.incrementalEndIndex + 100 > this.totalItemCount ? this.totalItemCount : this.incrementalEndIndex + 100;
            this.updateIncrementalInfo(this.incrementalStartIndex, this.incrementalEndIndex);
            updatingincrementalindex = true;
            if (this.viewPortInfo.startIndex !== 0 || updatingincrementalindex) {
              this.updateIncrementalView(0, this.itemCount);
            }
            activeItem = Search2(inputValue, this.incrementalLiCollections, this.filterType, true, dataSource, this.fields, type);
            if (!isNullOrUndefined(activeItem)) {
              activeItem.index = activeItem.index + this.incrementalStartIndex;
              break;
            }
            if (isNullOrUndefined(activeItem) && this.incrementalEndIndex >= this.totalItemCount) {
              this.incrementalStartIndex = 0;
              this.incrementalEndIndex = 100 > this.totalItemCount ? this.totalItemCount : 100;
              break;
            }
          }
          var startIndex = activeItem.index - (this.itemCount / 2 - 2) > 0 ? activeItem.index - (this.itemCount / 2 - 2) : 0;
          var endIndex = this.viewPortInfo.startIndex + this.itemCount > this.totalItemCount ? this.totalItemCount : this.viewPortInfo.startIndex + this.itemCount;
          if (startIndex !== this.viewPortInfo.startIndex) {
            this.updateIncrementalView(startIndex, endIndex);
          }
          if (!isNullOrUndefined(activeItem.item)) {
            var startIndex_1 = this.viewPortInfo.startIndex + (this.itemCount / 2 - 2) < this.totalItemCount ? this.viewPortInfo.startIndex + (this.itemCount / 2 - 2) : this.totalItemCount;
            var endIndex_1 = this.viewPortInfo.startIndex + this.itemCount > this.totalItemCount ? this.totalItemCount : this.viewPortInfo.startIndex + this.itemCount;
            this.updateIncrementalView(startIndex_1, endIndex_1);
            activeItem.item = this.getElementByValue(activeItem.item.getAttribute("data-value"));
          } else {
            this.updateIncrementalView(0, this.itemCount);
            this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
            this.list.scrollTop = 0;
          }
          if (activeItem && activeItem.item) {
            activeItem.item = this.getElementByValue(activeItem.item.getAttribute("data-value"));
          }
        }
        var activeElement = activeItem.item;
        var dataItem_1 = this.getItemData();
        if (!isNullOrUndefined(activeElement) && !this.enableVirtualization || this.enableVirtualization && this.isTyped && isNullOrUndefined(dataItem_1) && isNullOrUndefined(dataItem_1.value) && dataItem_1.value.toString() === activeElement.getAttribute("data-value").toString()) {
          var count2 = this.getIndexByValue(activeElement.getAttribute("data-value")) - 1;
          var height = parseInt(getComputedStyle(this.liCollections[0], null).getPropertyValue("height"), 10);
          if (!isNaN(height) && this.getModuleName() !== "autocomplete") {
            this.removeFocus();
            var fixedHead = this.fields.groupBy ? this.liCollections[0].offsetHeight : 0;
            if (!this.enableVirtualization) {
              this.list.scrollTop = count2 * height + fixedHead;
            } else {
              var virtualContent = this.list.getElementsByClassName("e-virtual-ddl-content")[0];
              virtualContent.style = this.getTransformValues();
              if (this.enableVirtualization && !this.fields.groupBy) {
                var selectedLiOffsetTop = activeElement.offsetTop;
                var virtualListInfoStartIndex = this.virtualListInfo && this.virtualListInfo.startIndex ? this.virtualListInfo.startIndex : 0;
                var virtualListHeight = activeElement.offsetHeight;
                var selectedLiOffsetTopWithStartIndex = selectedLiOffsetTop + virtualListInfoStartIndex * virtualListHeight;
                var virtualListLength = this.list.querySelectorAll(".e-virtual-list").length;
                var scrollTopOffset = virtualListLength * virtualListHeight;
                this.list.scrollTop = selectedLiOffsetTopWithStartIndex - scrollTopOffset;
              }
            }
            addClass([activeElement], dropDownListClasses.focus);
          }
        } else {
          if (this.isSelectCustom && this.inputElement.value.trim() !== "") {
            this.removeFocus();
            if (!this.enableVirtualization) {
              this.list.scrollTop = 0;
            }
          }
        }
        return activeElement;
      } else {
        return null;
      }
    };
    ComboBox2.prototype.setValue = function(e) {
      if (e && e.type === "keydown" && e.action === "enter" || e && e.type === "click") {
        this.removeFillSelection();
      }
      if (this.autofill && this.getModuleName() === "combobox" && e && e.type === "keydown" && e.action !== "enter") {
        this.preventAutoFill = false;
        this.inlineSearch(e);
        return false;
      } else {
        return _super.prototype.setValue.call(this, e);
      }
    };
    ComboBox2.prototype.checkCustomValue = function() {
      var value = this.allowObjectBinding && !isNullOrUndefined(this.value) ? getValue(this.fields.value ? this.fields.value : "", this.value) : this.value;
      this.itemData = this.getDataByValue(value);
      var dataItem = this.getItemData();
      var setValue2 = this.allowObjectBinding ? this.itemData : dataItem.value;
      if (!(this.allowCustom && isNullOrUndefined(dataItem.value) && isNullOrUndefined(dataItem.text))) {
        this.setProperties({
          "value": setValue2
        }, !this.allowCustom);
      }
    };
    ComboBox2.prototype.showSpinner = function() {
      if (isNullOrUndefined(this.spinnerElement)) {
        this.spinnerElement = this.getModuleName() === "autocomplete" ? this.inputWrapper.buttons[0] || this.inputWrapper.clearButton || Input.appendSpan("e-input-group-icon " + SPINNER_CLASS, this.inputWrapper.container, this.createElement) : this.inputWrapper.buttons[0] || this.inputWrapper.clearButton;
        addClass([this.spinnerElement], dropDownListClasses.disableIcon);
        createSpinner({
          target: this.spinnerElement,
          width: Browser.isDevice ? "16px" : "14px"
        }, this.createElement);
        showSpinner(this.spinnerElement);
      }
    };
    ComboBox2.prototype.hideSpinner = function() {
      if (!isNullOrUndefined(this.spinnerElement)) {
        hideSpinner(this.spinnerElement);
        removeClass([this.spinnerElement], dropDownListClasses.disableIcon);
        if (this.spinnerElement.classList.contains(SPINNER_CLASS)) {
          detach(this.spinnerElement);
        } else {
          this.spinnerElement.innerHTML = "";
        }
        this.spinnerElement = null;
      }
    };
    ComboBox2.prototype.setAutoFill = function(activeElement, isHover) {
      if (!isHover) {
        this.setHoverList(activeElement);
      }
      if (this.autofill && !this.preventAutoFill) {
        var currentValue = this.getTextByValue(activeElement.getAttribute("data-value")).toString();
        var currentFillValue = this.getFormattedValue(activeElement.getAttribute("data-value"));
        if (this.getModuleName() === "combobox") {
          if (!this.isSelected && !this.allowObjectBinding && this.previousValue !== currentFillValue || this.allowObjectBinding && this.previousValue && currentFillValue && !this.isObjectInArray(this.previousValue, [this.getDataByValue(currentFillValue)])) {
            this.updateSelectedItem(activeElement, null);
            this.isSelected = true;
            this.previousValue = this.allowObjectBinding ? this.getDataByValue(this.getFormattedValue(activeElement.getAttribute("data-value"))) : this.getFormattedValue(activeElement.getAttribute("data-value"));
          } else {
            this.updateSelectedItem(activeElement, null, true);
          }
        }
        if (!this.isAndroidAutoFill(currentValue)) {
          this.setAutoFillSelection(currentValue, isHover);
        }
      }
    };
    ComboBox2.prototype.isAndroidAutoFill = function(value) {
      if (Browser.isAndroid) {
        var currentPoints = this.getSelectionPoints();
        var prevEnd = this.prevSelectPoints.end;
        var curEnd = currentPoints.end;
        var prevStart = this.prevSelectPoints.start;
        var curStart = currentPoints.start;
        if (prevEnd !== 0 && (prevEnd === value.length && prevStart === value.length || prevStart > curStart && prevEnd > curEnd || prevEnd === curEnd && prevStart === curStart)) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    };
    ComboBox2.prototype.clearAll = function(e, property) {
      if (isNullOrUndefined(property) || !isNullOrUndefined(property) && isNullOrUndefined(property.dataSource)) {
        _super.prototype.clearAll.call(this, e);
      }
      if (this.isFiltering() && !isNullOrUndefined(e) && e.target === this.inputWrapper.clearButton) {
        this.typedString = this.filterInput.value;
        this.searchLists(e);
      }
    };
    ComboBox2.prototype.isSelectFocusItem = function(element) {
      return !isNullOrUndefined(element);
    };
    ComboBox2.prototype.inlineSearch = function(e) {
      var isKeyNavigate = e && (e.action === "down" || e.action === "up" || e.action === "home" || e.action === "end" || e.action === "pageUp" || e.action === "pageDown");
      var activeElement = isKeyNavigate ? this.liCollections[this.activeIndex] : this.getFocusElement();
      if (!isNullOrUndefined(activeElement)) {
        if (!isKeyNavigate) {
          var value = this.getFormattedValue(activeElement.getAttribute("data-value"));
          this.activeIndex = this.getIndexByValue(value);
          this.activeIndex = !isNullOrUndefined(this.activeIndex) ? this.activeIndex : null;
        }
        this.preventAutoFill = this.inputElement.value === "" ? false : this.preventAutoFill;
        this.setAutoFill(activeElement, isKeyNavigate);
      } else if (!isNullOrUndefined(this.inputElement) && this.inputElement.value === "") {
        this.activeIndex = null;
        if (!isNullOrUndefined(this.list)) {
          if (!this.enableVirtualization) {
            this.list.scrollTop = 0;
          }
          var focusItem = this.list.querySelector("." + dropDownListClasses.li);
          this.setHoverList(focusItem);
        }
      } else {
        this.activeIndex = null;
        this.removeSelection();
        if (this.liCollections && this.liCollections.length > 0 && !this.isCustomFilter) {
          this.removeFocus();
        }
      }
    };
    ComboBox2.prototype.incrementalSearch = function(e) {
      this.showPopup(e);
      if (!isNullOrUndefined(this.listData)) {
        this.inlineSearch(e);
        e.preventDefault();
      }
    };
    ComboBox2.prototype.setAutoFillSelection = function(currentValue, isKeyNavigate) {
      if (isKeyNavigate === void 0) {
        isKeyNavigate = false;
      }
      var selection = this.getSelectionPoints();
      var value = this.inputElement.value.substr(0, selection.start);
      if (value && value.toLowerCase() === currentValue.substr(0, selection.start).toLowerCase()) {
        var inputValue = value + currentValue.substr(value.length, currentValue.length);
        Input.setValue(inputValue, this.inputElement, this.floatLabelType, this.showClearButton);
        this.inputElement.setSelectionRange(selection.start, this.inputElement.value.length);
      } else if (isKeyNavigate) {
        Input.setValue(currentValue, this.inputElement, this.floatLabelType, this.showClearButton);
        this.inputElement.setSelectionRange(0, this.inputElement.value.length);
      }
    };
    ComboBox2.prototype.getValueByText = function(text) {
      return _super.prototype.getValueByText.call(this, text, true, this.ignoreAccent);
    };
    ComboBox2.prototype.unWireEvent = function() {
      if (this.getModuleName() === "combobox") {
        EventHandler.remove(this.inputWrapper.buttons[0], "mousedown", this.preventBlur);
        EventHandler.remove(this.inputWrapper.container, "blur", this.onBlurHandler);
      }
      if (!isNullOrUndefined(this.inputWrapper.buttons[0])) {
        EventHandler.remove(this.inputWrapper.buttons[0], "mousedown", this.dropDownClick);
      }
      if (this.inputElement) {
        EventHandler.remove(this.inputElement, "focus", this.targetFocus);
        if (!this.readonly) {
          EventHandler.remove(this.inputElement, "input", this.onInput);
          EventHandler.remove(this.inputElement, "keyup", this.onFilterUp);
          EventHandler.remove(this.inputElement, "keydown", this.onFilterDown);
          EventHandler.remove(this.inputElement, "paste", this.pasteHandler);
          EventHandler.remove(window, "resize", this.windowResize);
        }
      }
      this.unBindCommonEvent();
    };
    ComboBox2.prototype.setSelection = function(li, e) {
      _super.prototype.setSelection.call(this, li, e);
      if (!isNullOrUndefined(li) && !this.autofill && !this.isDropDownClick) {
        this.removeFocus();
      }
    };
    ComboBox2.prototype.selectCurrentItem = function(e) {
      var li;
      if (this.isPopupOpen) {
        if (this.isSelected) {
          li = this.list.querySelector("." + dropDownListClasses.selected);
        } else {
          li = this.list.querySelector("." + dropDownListClasses.focus);
        }
        if (this.isDisabledElement(li)) {
          return;
        }
        if (li) {
          this.setSelection(li, e);
          this.isTyped = false;
        }
        if (this.isSelected) {
          this.isSelectCustom = false;
          this.onChangeEvent(e);
        }
      }
      if (e.action === "enter" && this.inputElement.value === "") {
        this.clearAll(e);
      } else if (this.isTyped && !this.isSelected && isNullOrUndefined(li)) {
        this.customValue(e);
      }
      this.hidePopup(e);
    };
    ComboBox2.prototype.setHoverList = function(li) {
      this.removeSelection();
      if (this.isValidLI(li) && !li.classList.contains(dropDownListClasses.selected)) {
        this.removeFocus();
        li.classList.add(dropDownListClasses.focus);
      }
    };
    ComboBox2.prototype.targetFocus = function(e) {
      if (Browser.isDevice && !this.allowFiltering) {
        this.preventFocus = false;
      }
      this.onFocus(e);
      Input.calculateWidth(this.inputElement, this.inputWrapper.container);
    };
    ComboBox2.prototype.dropDownClick = function(e) {
      e.preventDefault();
      if (Browser.isDevice && !this.isFiltering()) {
        this.preventFocus = true;
      }
      _super.prototype.dropDownClick.call(this, e);
    };
    ComboBox2.prototype.customValue = function(e) {
      var _this = this;
      var value = this.getValueByText(this.inputElement.value);
      if (!this.allowCustom && this.inputElement.value !== "") {
        var previousValue = this.previousValue;
        var currentValue = this.value;
        value = this.allowObjectBinding ? this.getDataByValue(value) : value;
        this.setProperties({
          value
        });
        if (isNullOrUndefined(this.value)) {
          Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton);
        }
        if (this.autofill && (!this.allowObjectBinding && previousValue === this.value || this.allowObjectBinding && previousValue && this.isObjectInArray(previousValue, [this.value])) && (!this.allowObjectBinding && currentValue !== this.value || this.allowObjectBinding && currentValue && !this.isObjectInArray(currentValue, [this.value]))) {
          this.onChangeEvent(null);
        }
      } else if (this.inputElement.value !== "") {
        var previousValue_1 = this.value;
        if (isNullOrUndefined(value)) {
          var value_1 = this.inputElement.value === "" ? null : this.inputElement.value;
          var eventArgs = {
            text: value_1,
            item: {}
          };
          this.isObjectCustomValue = true;
          if (!this.initial) {
            this.trigger("customValueSpecifier", eventArgs, function(eventArgs2) {
              _this.updateCustomValueCallback(value_1, eventArgs2, previousValue_1, e);
            });
          } else {
            this.updateCustomValueCallback(value_1, eventArgs, previousValue_1);
          }
        } else {
          this.isSelectCustom = false;
          value = this.allowObjectBinding ? this.getDataByValue(value) : value;
          this.setProperties({
            value
          });
          if (!this.allowObjectBinding && previousValue_1 !== this.value || this.allowObjectBinding && previousValue_1 && this.value && !this.isObjectInArray(previousValue_1, [this.value])) {
            this.onChangeEvent(e);
          }
        }
      } else if (this.allowCustom && this.isFocused) {
        this.isSelectCustom = true;
      }
    };
    ComboBox2.prototype.updateCustomValueCallback = function(value, eventArgs, previousValue, e) {
      var _this = this;
      var fields = this.fields;
      var item = eventArgs.item;
      var dataItem = {};
      if (item && getValue(fields.text, item) && getValue(fields.value, item)) {
        dataItem = item;
      } else {
        setValue(fields.text, value, dataItem);
        setValue(fields.value, value, dataItem);
      }
      this.itemData = dataItem;
      var emptyObject = {};
      if (this.allowObjectBinding) {
        var keys = this.listData && this.listData.length > 0 ? Object.keys(this.listData[0]) : Object.keys(this.itemData);
        if (!(this.listData && this.listData.length > 0) && (this.getModuleName() === "autocomplete" || this.getModuleName() === "combobox" && this.allowFiltering)) {
          keys = this.firstItem ? Object.keys(this.firstItem) : Object.keys(this.itemData);
        }
        keys.forEach(function(key) {
          emptyObject[key] = key === fields.value || key === fields.text ? getValue(fields.value, _this.itemData) : null;
        });
      }
      var changeData = {
        text: getValue(fields.text, this.itemData),
        value: this.allowObjectBinding ? emptyObject : getValue(fields.value, this.itemData),
        index: null
      };
      this.setProperties(changeData, true);
      this.setSelection(null, null);
      this.isSelectCustom = true;
      this.isObjectCustomValue = false;
      if (!this.allowObjectBinding && previousValue !== this.value || this.allowObjectBinding && (previousValue == null && this.value !== null || previousValue && !this.isObjectInArray(previousValue, [this.value]))) {
        this.onChangeEvent(e, true);
      }
    };
    ComboBox2.prototype.onPropertyChanged = function(newProp, oldProp) {
      if (this.getModuleName() === "combobox") {
        this.checkData(newProp);
        this.setUpdateInitial(["fields", "query", "dataSource"], newProp, oldProp);
      }
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "readonly":
            Input.setReadonly(this.readonly, this.inputElement);
            if (this.readonly) {
              EventHandler.remove(this.inputElement, "input", this.onInput);
              EventHandler.remove(this.inputElement, "keyup", this.onFilterUp);
              EventHandler.remove(this.inputElement, "keydown", this.onFilterDown);
            } else {
              EventHandler.add(this.inputElement, "input", this.onInput, this);
              EventHandler.add(this.inputElement, "keyup", this.onFilterUp, this);
              EventHandler.add(this.inputElement, "keydown", this.onFilterDown, this);
            }
            this.setReadOnly();
            break;
          case "allowFiltering":
            this.setSearchBox();
            if (this.isFiltering() && this.getModuleName() === "combobox" && isNullOrUndefined(this.list)) {
              _super.prototype.renderList.call(this);
            }
            break;
          case "allowCustom":
            break;
          default: {
            var comboProps = this.getPropObject(prop, newProp, oldProp);
            _super.prototype.onPropertyChanged.call(this, comboProps.newProperty, comboProps.oldProperty);
            if (this.isFiltering() && prop === "dataSource" && isNullOrUndefined(this.list) && this.itemTemplate && this.getModuleName() === "combobox") {
              _super.prototype.renderList.call(this);
            }
            break;
          }
        }
      }
    };
    ComboBox2.prototype.render = function() {
      _super.prototype.render.call(this);
      this.setSearchBox();
      this.renderComplete();
      this.autoFill = this.autofill;
    };
    ComboBox2.prototype.getModuleName = function() {
      return "combobox";
    };
    ComboBox2.prototype.addItem = function(items, itemIndex) {
      _super.prototype.addItem.call(this, items, itemIndex);
    };
    ComboBox2.prototype.filter = function(dataSource, query, fields) {
      _super.prototype.filter.call(this, dataSource, query, fields);
    };
    ComboBox2.prototype.showPopup = function(e) {
      _super.prototype.showPopup.call(this, e);
    };
    ComboBox2.prototype.hidePopup = function(e) {
      var inputValue = this.inputElement && this.inputElement.value === "" ? null : this.inputElement && this.inputElement.value;
      if (!isNullOrUndefined(this.listData)) {
        var isEscape = this.isEscapeKey;
        if (this.isEscapeKey) {
          Input.setValue(this.typedString, this.inputElement, this.floatLabelType, this.showClearButton);
          this.isEscapeKey = false;
        }
        if (this.autofill) {
          this.removeFillSelection();
        }
        var dataItem = this.isSelectCustom ? {
          text: ""
        } : this.getItemData();
        var text = !isNullOrUndefined(dataItem.text) ? dataItem.text.replace(/\r\n|\n|\r/g, "") : dataItem.text;
        var selected = !isNullOrUndefined(this.list) ? this.list.querySelector("." + dropDownListClasses.selected) : null;
        if (this.inputElement && text === this.inputElement.value && !isNullOrUndefined(selected)) {
          if (this.isSelected) {
            this.onChangeEvent(e);
            this.isSelectCustom = false;
          }
          _super.prototype.hidePopup.call(this, e);
          return;
        }
        if (this.getModuleName() === "combobox" && this.inputElement.value.trim() !== "") {
          var dataSource = this.sortedData;
          var type = this.typeOfData(dataSource).typeof;
          var searchItem = Search2(this.inputElement.value, this.liCollections, "Equal", true, dataSource, this.fields, type);
          this.selectedLI = searchItem.item;
          if (isNullOrUndefined(searchItem.index)) {
            searchItem.index = Search2(this.inputElement.value, this.liCollections, "StartsWith", true, dataSource, this.fields, type).index;
          }
          this.activeIndex = searchItem.index;
          if (!isNullOrUndefined(this.selectedLI)) {
            this.updateSelectedItem(this.selectedLI, null, true);
          } else if (isEscape) {
            this.isSelectCustom = true;
            this.removeSelection();
          }
        }
        if (!this.isEscapeKey && this.isTyped && !this.isInteracted) {
          this.customValue(e);
        }
      }
      var value = this.allowObjectBinding && !isNullOrUndefined(this.value) ? getValue(this.fields.value ? this.fields.value : "", this.value) : this.value;
      if (isNullOrUndefined(this.listData) && this.allowCustom && !isNullOrUndefined(inputValue) && inputValue !== value) {
        this.customValue();
      }
      _super.prototype.hidePopup.call(this, e);
    };
    ComboBox2.prototype.focusIn = function() {
      if (!this.enabled) {
        return;
      }
      if (Browser.isDevice && !this.isFiltering()) {
        this.preventFocus = true;
      }
      _super.prototype.focusIn.call(this);
    };
    ComboBox2.prototype.clear = function() {
      this.value = null;
    };
    ComboBox2.prototype.focusOut = function(e) {
      _super.prototype.focusOut.call(this, e);
    };
    ComboBox2.prototype.getItems = function() {
      return _super.prototype.getItems.call(this);
    };
    ComboBox2.prototype.getDataByValue = function(value) {
      return _super.prototype.getDataByValue.call(this, value);
    };
    ComboBox2.prototype.renderHightSearch = function() {
    };
    __decorate12([Property(false)], ComboBox2.prototype, "autofill", void 0);
    __decorate12([Property(true)], ComboBox2.prototype, "allowCustom", void 0);
    __decorate12([Property({})], ComboBox2.prototype, "htmlAttributes", void 0);
    __decorate12([Property(false)], ComboBox2.prototype, "allowFiltering", void 0);
    __decorate12([Property(true)], ComboBox2.prototype, "isDeviceFullScreen", void 0);
    __decorate12([Property(null)], ComboBox2.prototype, "query", void 0);
    __decorate12([Property(null)], ComboBox2.prototype, "index", void 0);
    __decorate12([Property(true)], ComboBox2.prototype, "showClearButton", void 0);
    __decorate12([Event2()], ComboBox2.prototype, "customValueSpecifier", void 0);
    __decorate12([Event2()], ComboBox2.prototype, "filtering", void 0);
    __decorate12([Property(null)], ComboBox2.prototype, "valueTemplate", void 0);
    __decorate12([Property("Never")], ComboBox2.prototype, "floatLabelType", void 0);
    __decorate12([Property(null)], ComboBox2.prototype, "filterBarPlaceholder", void 0);
    __decorate12([Property(null)], ComboBox2.prototype, "cssClass", void 0);
    __decorate12([Property(null)], ComboBox2.prototype, "headerTemplate", void 0);
    __decorate12([Property(null)], ComboBox2.prototype, "footerTemplate", void 0);
    __decorate12([Property(null)], ComboBox2.prototype, "placeholder", void 0);
    __decorate12([Property("100%")], ComboBox2.prototype, "width", void 0);
    __decorate12([Property("300px")], ComboBox2.prototype, "popupHeight", void 0);
    __decorate12([Property("100%")], ComboBox2.prototype, "popupWidth", void 0);
    __decorate12([Property(false)], ComboBox2.prototype, "readonly", void 0);
    __decorate12([Property(null)], ComboBox2.prototype, "text", void 0);
    __decorate12([Property(null)], ComboBox2.prototype, "value", void 0);
    __decorate12([Property(false)], ComboBox2.prototype, "allowObjectBinding", void 0);
    ComboBox2 = __decorate12([NotifyPropertyChanges], ComboBox2);
    return ComboBox2;
  }(DropDownList)
);

// node_modules/@syncfusion/ej2-dropdowns/src/auto-complete/auto-complete.js
var __extends26 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate13 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
dropDownListClasses.root = "e-autocomplete";
dropDownListClasses.icon = "e-input-group-icon e-ddl-icon e-search-icon";
var AutoComplete = (
  /** @class */
  function(_super) {
    __extends26(AutoComplete2, _super);
    function AutoComplete2(options, element) {
      var _this_1 = _super.call(this, options, element) || this;
      _this_1.isFiltered = false;
      _this_1.searchList = false;
      return _this_1;
    }
    AutoComplete2.prototype.preRender = function() {
      _super.prototype.preRender.call(this);
    };
    AutoComplete2.prototype.getLocaleName = function() {
      return "auto-complete";
    };
    AutoComplete2.prototype.getNgDirective = function() {
      return "EJS-AUTOCOMPLETE";
    };
    AutoComplete2.prototype.getQuery = function(query) {
      var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();
      var value = this.allowObjectBinding && !isNullOrUndefined(this.value) ? getValue(this.fields.value ? this.fields.value : "", this.value) : this.value;
      var filterType = this.queryString === "" && !isNullOrUndefined(value) ? "equal" : this.filterType;
      var queryString2 = this.queryString === "" && !isNullOrUndefined(value) ? value : this.queryString;
      if (this.isFiltered) {
        if (this.enableVirtualization && !isNullOrUndefined(this.customFilterQuery)) {
          filterQuery = this.customFilterQuery.clone();
        } else if (!this.enableVirtualization) {
          return filterQuery;
        }
      }
      if (this.queryString !== null && this.queryString !== "") {
        var dataType = this.typeOfData(this.dataSource).typeof;
        if (!(this.dataSource instanceof DataManager) && dataType === "string" || dataType === "number") {
          filterQuery.where("", filterType, queryString2, this.ignoreCase, this.ignoreAccent);
        } else {
          var mapping = !isNullOrUndefined(this.fields.value) ? this.fields.value : "";
          filterQuery.where(mapping, filterType, queryString2, this.ignoreCase, this.ignoreAccent);
        }
      }
      if (!isNullOrUndefined(this.suggestionCount) && !this.enableVirtualization) {
        if (this.suggestionCount !== 20) {
          for (var queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {
            if (filterQuery.queries[queryElements].fn === "onTake") {
              filterQuery.queries.splice(queryElements, 1);
            }
          }
        }
        filterQuery.take(this.suggestionCount);
      }
      if (this.enableVirtualization) {
        var queryTakeValue = 0;
        var querySkipValue = 0;
        var takeValue = this.getTakeValue();
        if (filterQuery && filterQuery.queries.length > 0) {
          for (var queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {
            if (filterQuery.queries[queryElements].fn === "onSkip") {
              querySkipValue = filterQuery.queries[queryElements].e.nos;
            }
            if (filterQuery.queries[queryElements].fn === "onTake") {
              queryTakeValue = takeValue <= filterQuery.queries[queryElements].e.nos ? filterQuery.queries[queryElements].e.nos : takeValue;
            }
          }
        }
        if (queryTakeValue <= 0 && this.query && this.query.queries.length > 0) {
          for (var queryElements = 0; queryElements < this.query.queries.length; queryElements++) {
            if (this.query.queries[queryElements].fn === "onTake") {
              var currentTakeValue = this.query.queries[queryElements].e.nos;
              queryTakeValue = takeValue <= currentTakeValue ? currentTakeValue : takeValue;
            }
          }
        }
        if (filterQuery && filterQuery.queries.length > 0) {
          for (var queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {
            if (filterQuery.queries[queryElements].fn === "onSkip") {
              querySkipValue = filterQuery.queries[queryElements].e.nos;
              filterQuery.queries.splice(queryElements, 1);
              --queryElements;
              continue;
            }
            if (filterQuery.queries[queryElements].fn === "onTake") {
              var currentQueryTakeValue = filterQuery.queries[queryElements].e.nos;
              queryTakeValue = currentQueryTakeValue <= queryTakeValue ? queryTakeValue : currentQueryTakeValue;
              filterQuery.queries.splice(queryElements, 1);
              --queryElements;
            }
          }
        }
        if (querySkipValue > 0 && this.virtualItemStartIndex <= querySkipValue) {
          filterQuery.skip(querySkipValue);
        } else {
          filterQuery.skip(this.virtualItemStartIndex);
        }
        if (queryTakeValue > 0 && takeValue <= queryTakeValue) {
          filterQuery.take(queryTakeValue);
        } else {
          filterQuery.take(takeValue);
        }
        filterQuery.requiresCount();
      }
      return filterQuery;
    };
    AutoComplete2.prototype.searchLists = function(e) {
      this.isTyped = true;
      this.isDataFetched = this.isSelectCustom = false;
      this.firstItem = this.dataSource && this.dataSource.length > 0 ? this.dataSource[0] : null;
      this.checkAndResetCache();
      if (isNullOrUndefined(this.list)) {
        _super.prototype.renderList.call(this, e, true);
      }
      this.queryString = this.filterInput.value;
      if (e.type !== "mousedown" && (e.keyCode === 40 || e.keyCode === 38)) {
        this.queryString = this.queryString === "" ? null : this.queryString;
        this.beforePopupOpen = true;
        this.resetList(this.dataSource, this.fields, null, e);
        return;
      }
      this.isSelected = false;
      this.activeIndex = null;
      this.isRequesting = false;
      if (this.queryString !== "" && this.debounceDelay > 0) {
        this.debouncedFiltering(e, this.debounceDelay);
      } else {
        this.performFiltering(e);
      }
    };
    AutoComplete2.prototype.performFiltering = function(e) {
      var _this_1 = this;
      var eventArgs = {
        preventDefaultAction: false,
        text: this.filterInput.value,
        updateData: function(dataSource, query, fields) {
          if (eventArgs.cancel) {
            return;
          }
          _this_1.isFiltered = true;
          _this_1.customFilterQuery = query;
          _this_1.filterAction(dataSource, query, fields);
        },
        cancel: false
      };
      this.trigger("filtering", eventArgs, function(eventArgs2) {
        if (!eventArgs2.cancel && !_this_1.isFiltered && !eventArgs2.preventDefaultAction) {
          _this_1.searchList = true;
          _this_1.filterAction(_this_1.dataSource, null, _this_1.fields, e);
        }
      });
    };
    AutoComplete2.prototype.filter = function(dataSource, query, fields) {
      this.isFiltered = true;
      this.filterAction(dataSource, query, fields);
    };
    AutoComplete2.prototype.filterAction = function(dataSource, query, fields, e) {
      this.beforePopupOpen = true;
      var isNoDataElement = this.list.classList.contains("e-nodata");
      if (this.queryString !== "" && this.queryString.length >= this.minLength) {
        if (this.enableVirtualization && this.isFiltering() && this.isTyped) {
          this.isPreventScrollAction = true;
          this.list.scrollTop = 0;
          this.previousStartIndex = 0;
          this.virtualListInfo = null;
        }
        this.resetList(dataSource, fields, query, e);
        isNoDataElement = this.list.classList.contains("e-nodata");
        if (this.enableVirtualization && !isNoDataElement) {
          if (!this.list.querySelector(".e-virtual-ddl-content") && this.list.querySelector(".e-list-parent")) {
            var virtualElement = this.createElement("div", {
              className: "e-virtual-ddl-content"
            });
            virtualElement.style.cssText = this.getTransformValues();
            this.list.appendChild(virtualElement).appendChild(this.list.querySelector(".e-list-parent"));
          }
          if (!this.list.querySelector(".e-virtual-ddl") && this.list.parentElement) {
            var virtualElement = this.createElement("div", {
              id: this.element.id + "_popup",
              className: "e-virtual-ddl"
            });
            virtualElement.style.cssText = this.GetVirtualTrackHeight();
            this.list.parentElement.querySelector(".e-dropdownbase").appendChild(virtualElement);
          }
        }
        if (this.getModuleName() === "autocomplete" && !(this.dataSource instanceof DataManager) || this.getModuleName() === "autocomplete" && this.dataSource instanceof DataManager && this.totalItemCount !== 0) {
          this.getFilteringSkeletonCount();
        }
      } else {
        this.hidePopup(e);
        this.beforePopupOpen = false;
      }
      this.renderReactTemplates();
    };
    AutoComplete2.prototype.clearAll = function(e, property) {
      if (isNullOrUndefined(property) || !isNullOrUndefined(property) && isNullOrUndefined(property.dataSource)) {
        _super.prototype.clearAll.call(this, e);
        this.checkAndResetCache();
      }
      if (this.beforePopupOpen) {
        this.hidePopup();
      }
    };
    AutoComplete2.prototype.onActionComplete = function(ulElement, list, e, isUpdated) {
      if (!this.enableVirtualization) {
        this.fixedHeaderElement = null;
      }
      if (this.getModuleName() === "autocomplete" && !(this.dataSource instanceof DataManager) || this.getModuleName() === "autocomplete" && this.dataSource instanceof DataManager && this.totalItemCount !== 0) {
        this.getFilteringSkeletonCount();
      }
      _super.prototype.onActionComplete.call(this, ulElement, list, e);
      var item = this.list.querySelector("." + dropDownListClasses.li);
      if (!isNullOrUndefined(item)) {
        removeClass([item], dropDownListClasses.focus);
      }
      if (!isNullOrUndefined(this.itemData) && !this.enableVirtualization) {
        this.focusIndexItem();
      }
      this.postBackAction();
    };
    AutoComplete2.prototype.postBackAction = function() {
      if (this.autofill && !isNullOrUndefined(this.liCollections[0]) && this.searchList) {
        var items = [this.liCollections[0]];
        var dataSource = this.listData;
        var type = this.typeOfData(dataSource).typeof;
        var searchItem = Search2(this.inputElement.value, items, "StartsWith", this.ignoreCase, dataSource, this.fields, type);
        this.searchList = false;
        if (!isNullOrUndefined(searchItem.item)) {
          _super.prototype.setAutoFill.call(this, this.liCollections[0], true);
        }
      }
    };
    AutoComplete2.prototype.setSelection = function(li, e) {
      if (!this.isValidLI(li)) {
        this.selectedLI = li;
        return;
      }
      if (!isNullOrUndefined(e) && e.type === "keydown" && e.action !== "enter" && e.action !== "tab" && this.isValidLI(li)) {
        var value = this.getFormattedValue(li.getAttribute("data-value"));
        this.activeIndex = this.getIndexByValue(value);
        this.setHoverList(li);
        this.selectedLI = li;
        this.setScrollPosition(e);
        if (this.autofill && this.isPopupOpen) {
          this.preventAutoFill = false;
          var isKeyNavigate = e && e.action === "down" || e.action === "up" || e.action === "home" || e.action === "end" || e.action === "pageUp" || e.action === "pageDown";
          _super.prototype.setAutoFill.call(this, li, isKeyNavigate);
        }
      } else {
        _super.prototype.setSelection.call(this, li, e);
        this.isFiltered = false;
      }
    };
    AutoComplete2.prototype.listOption = function(dataSource, fieldsSettings) {
      var _this_1 = this;
      var fields = _super.prototype.listOption.call(this, dataSource, fieldsSettings);
      if (isNullOrUndefined(fields.itemCreated)) {
        fields.itemCreated = function(e) {
          if (_this_1.highlight) {
            if (_this_1.element.tagName === _this_1.getNgDirective() && _this_1.itemTemplate) {
              setTimeout(function() {
                highlightSearch(e.item, _this_1.queryString, _this_1.ignoreCase, _this_1.filterType);
              }, 0);
            } else {
              highlightSearch(e.item, _this_1.queryString, _this_1.ignoreCase, _this_1.filterType);
            }
          }
        };
      } else {
        var itemCreated_1 = fields.itemCreated;
        fields.itemCreated = function(e) {
          if (_this_1.highlight) {
            highlightSearch(e.item, _this_1.queryString, _this_1.ignoreCase, _this_1.filterType);
          }
          itemCreated_1.apply(_this_1, [e]);
        };
      }
      return fields;
    };
    AutoComplete2.prototype.isFiltering = function() {
      return true;
    };
    AutoComplete2.prototype.renderPopup = function(e) {
      if (!this.enableVirtualization) {
        this.list.scrollTop = 0;
      }
      _super.prototype.renderPopup.call(this, e);
    };
    AutoComplete2.prototype.isEditTextBox = function() {
      return false;
    };
    AutoComplete2.prototype.isPopupButton = function() {
      return this.showPopupButton;
    };
    AutoComplete2.prototype.isSelectFocusItem = function(element) {
      return false;
    };
    AutoComplete2.prototype.setInputValue = function(newProp, oldProp) {
      var oldValue = oldProp && oldProp.text ? oldProp.text : oldProp ? oldProp.value : oldProp;
      var value = newProp && newProp.text ? newProp.text : newProp && newProp.value ? newProp.value : this.value;
      if (this.allowObjectBinding) {
        oldValue = !isNullOrUndefined(oldValue) ? getValue(this.fields.value ? this.fields.value : "", oldValue) : oldValue;
        value = !isNullOrUndefined(value) ? getValue(this.fields.value ? this.fields.value : "", value) : value;
      }
      if (value && this.typedString === "" && !this.allowCustom && !(this.dataSource instanceof DataManager)) {
        var checkFields1_1 = this.typeOfData(this.dataSource).typeof === "string" ? "" : this.fields.value;
        var listLength_1 = this.getItems().length;
        var query = new Query();
        var _this_2 = this;
        new DataManager(this.dataSource).executeQuery(query.where(new Predicate(checkFields1_1, "equal", value))).then(function(e) {
          if (e.result.length > 0) {
            _this_2.value = checkFields1_1 !== "" ? _this_2.allowObjectBinding ? e.result[0] : e.result[0][_this_2.fields.value].toString() : e.result[0].toString();
            _this_2.addItem(e.result, listLength_1);
            _this_2.updateValues();
          } else {
            if (newProp && newProp.text) {
              _this_2.setOldText(oldValue);
            } else if (newProp && newProp.value) {
              _this_2.setOldValue(oldValue);
            } else {
              _this_2.updateValues();
            }
          }
        });
      } else if (newProp) {
        if (newProp.text) {
          this.setOldText(oldValue);
        } else {
          this.setOldValue(oldValue);
        }
      }
    };
    AutoComplete2.prototype.showPopup = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.beforePopupOpen) {
        this.refreshPopup();
        return;
      }
      this.beforePopupOpen = true;
      this.preventAutoFill = true;
      if (isNullOrUndefined(this.list)) {
        this.renderList(e);
      } else {
        this.resetList(this.dataSource, this.fields, null, e);
      }
    };
    AutoComplete2.prototype.hidePopup = function(e) {
      _super.prototype.hidePopup.call(this, e);
      this.activeIndex = null;
      this.virtualListInfo = this.viewPortInfo;
      this.previousStartIndex = this.viewPortInfo.startIndex;
      this.startIndex = this.viewPortInfo.startIndex;
      this.previousEndIndex = this.viewPortInfo.endIndex;
    };
    AutoComplete2.prototype.onPropertyChanged = function(newProp, oldProp) {
      if (this.getModuleName() === "autocomplete") {
        this.setUpdateInitial(["fields", "query", "dataSource"], newProp);
      }
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "showPopupButton":
            if (this.showPopupButton) {
              var button = Input.appendSpan(dropDownListClasses.icon, this.inputWrapper.container, this.createElement);
              this.inputWrapper.buttons[0] = button;
              Input.calculateWidth(this.inputElement, this.inputWrapper.container);
              if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
                this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
              }
              if (this.inputWrapper && this.inputWrapper.buttons && this.inputWrapper.buttons[0]) {
                EventHandler.add(this.inputWrapper.buttons[0], "click", this.dropDownClick, this);
              }
            } else {
              detach(this.inputWrapper.buttons[0]);
              this.inputWrapper.buttons[0] = null;
            }
            break;
          default: {
            var atcProps = this.getPropObject(prop, newProp, oldProp);
            _super.prototype.onPropertyChanged.call(this, atcProps.newProperty, atcProps.oldProperty);
            break;
          }
        }
      }
    };
    AutoComplete2.prototype.renderHightSearch = function() {
      if (this.highlight) {
        for (var i = 0; i < this.liCollections.length; i++) {
          var isHighlight = this.ulElement.querySelector(".e-active");
          if (!isHighlight) {
            revertHighlightSearch(this.liCollections[i]);
            highlightSearch(this.liCollections[i], this.queryString, this.ignoreCase, this.filterType);
          }
          isHighlight = null;
        }
      }
    };
    AutoComplete2.prototype.getModuleName = function() {
      return "autocomplete";
    };
    AutoComplete2.prototype.render = function() {
      _super.prototype.render.call(this);
    };
    __decorate13([Complex({
      value: null,
      iconCss: null,
      groupBy: null,
      disabled: null
    }, FieldSettings)], AutoComplete2.prototype, "fields", void 0);
    __decorate13([Property(true)], AutoComplete2.prototype, "ignoreCase", void 0);
    __decorate13([Property(false)], AutoComplete2.prototype, "showPopupButton", void 0);
    __decorate13([Property(false)], AutoComplete2.prototype, "highlight", void 0);
    __decorate13([Property(20)], AutoComplete2.prototype, "suggestionCount", void 0);
    __decorate13([Property({})], AutoComplete2.prototype, "htmlAttributes", void 0);
    __decorate13([Property(null)], AutoComplete2.prototype, "query", void 0);
    __decorate13([Property(1)], AutoComplete2.prototype, "minLength", void 0);
    __decorate13([Property("Contains")], AutoComplete2.prototype, "filterType", void 0);
    __decorate13([Event2()], AutoComplete2.prototype, "filtering", void 0);
    __decorate13([Property(null)], AutoComplete2.prototype, "index", void 0);
    __decorate13([Property("Never")], AutoComplete2.prototype, "floatLabelType", void 0);
    __decorate13([Property(null)], AutoComplete2.prototype, "valueTemplate", void 0);
    __decorate13([Property(null)], AutoComplete2.prototype, "filterBarPlaceholder", void 0);
    __decorate13([Property(false)], AutoComplete2.prototype, "allowFiltering", void 0);
    __decorate13([Property(null)], AutoComplete2.prototype, "text", void 0);
    AutoComplete2 = __decorate13([NotifyPropertyChanges], AutoComplete2);
    return AutoComplete2;
  }(ComboBox)
);

// node_modules/@syncfusion/ej2-dropdowns/src/multi-select/float-label.js
var FLOATLINE = "e-float-line";
var FLOATTEXT = "e-float-text";
var LABELTOP = "e-label-top";
var LABELBOTTOM = "e-label-bottom";
function createFloatLabel(overAllWrapper, searchWrapper, element, inputElement, value, floatLabelType, placeholder) {
  var floatLinelement = createElement("span", {
    className: FLOATLINE
  });
  var floatLabelElement = createElement("label", {
    className: FLOATTEXT
  });
  var id = element.getAttribute("id") ? element.getAttribute("id") : getUniqueID("ej2_multiselect");
  element.id = id;
  if (!isNullOrUndefined(element.id) && element.id !== "") {
    floatLabelElement.id = "label_" + element.id.replace(/ /g, "_");
    floatLabelElement.setAttribute("for", element.id);
    attributes(inputElement, {
      "aria-labelledby": floatLabelElement.id
    });
  }
  if (!isNullOrUndefined(inputElement.placeholder) && inputElement.placeholder !== "") {
    floatLabelElement.innerText = encodePlaceholder(inputElement.placeholder);
    inputElement.removeAttribute("placeholder");
  }
  floatLabelElement.innerText = encodePlaceholder(placeholder);
  searchWrapper.appendChild(floatLinelement);
  searchWrapper.appendChild(floatLabelElement);
  overAllWrapper.classList.add("e-float-input");
  updateFloatLabelState(value, floatLabelElement);
  if (floatLabelType === "Always") {
    if (floatLabelElement.classList.contains(LABELBOTTOM)) {
      removeClass([floatLabelElement], LABELBOTTOM);
    }
    addClass([floatLabelElement], LABELTOP);
  }
}
function updateFloatLabelState(value, label) {
  if (value && value.length > 0) {
    addClass([label], LABELTOP);
    removeClass([label], LABELBOTTOM);
  } else {
    removeClass([label], LABELTOP);
    addClass([label], LABELBOTTOM);
  }
}
function removeFloating(overAllWrapper, componentWrapper, searchWrapper, inputElement, value, floatLabelType, placeholder) {
  var placeholderElement = componentWrapper.querySelector("." + FLOATTEXT);
  var floatLine = componentWrapper.querySelector("." + FLOATLINE);
  var placeholderText;
  if (!isNullOrUndefined(placeholderElement)) {
    placeholderText = placeholderElement.innerText;
    detach(searchWrapper.querySelector("." + FLOATTEXT));
    setPlaceHolder(value, inputElement, placeholderText);
    if (!isNullOrUndefined(floatLine)) {
      detach(searchWrapper.querySelector("." + FLOATLINE));
    }
  } else {
    placeholderText = placeholder !== null ? placeholder : "";
    setPlaceHolder(value, inputElement, placeholderText);
  }
  overAllWrapper.classList.remove("e-float-input");
}
function setPlaceHolder(value, inputElement, placeholder) {
  if (value && value.length) {
    inputElement.placeholder = "";
  } else {
    inputElement.placeholder = placeholder;
  }
}
function floatLabelFocus(overAllWrapper, componentWrapper) {
  overAllWrapper.classList.add("e-input-focus");
  var label = componentWrapper.querySelector("." + FLOATTEXT);
  if (!isNullOrUndefined(label)) {
    addClass([label], LABELTOP);
    if (label.classList.contains(LABELBOTTOM)) {
      removeClass([label], LABELBOTTOM);
    }
  }
}
function floatLabelBlur(overAllWrapper, componentWrapper, value, floatLabelType, placeholder) {
  overAllWrapper.classList.remove("e-input-focus");
  var label = componentWrapper.querySelector("." + FLOATTEXT);
  if (value && value.length <= 0 && floatLabelType === "Auto" && !isNullOrUndefined(label)) {
    if (label.classList.contains(LABELTOP)) {
      removeClass([label], LABELTOP);
    }
    addClass([label], LABELBOTTOM);
  }
}
function encodePlaceholder(placeholder) {
  var result = "";
  if (!isNullOrUndefined(placeholder) && placeholder !== "") {
    var spanElement = document.createElement("span");
    spanElement.innerHTML = '<input  placeholder="' + placeholder + '"/>';
    var hiddenInput = spanElement.children[0];
    result = hiddenInput.placeholder;
  }
  return result;
}

// node_modules/@syncfusion/ej2-dropdowns/src/multi-select/multi-select.js
var __extends27 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate14 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FOCUS = "e-input-focus";
var DISABLED2 = "e-disabled";
var OVER_ALL_WRAPPER = "e-multiselect e-input-group e-control-wrapper";
var ELEMENT_WRAPPER = "e-multi-select-wrapper";
var ELEMENT_MOBILE_WRAPPER = "e-mob-wrapper";
var HIDE_LIST = "e-hide-listitem";
var DELIMITER_VIEW = "e-delim-view";
var CHIP_WRAPPER2 = "e-chips-collection";
var CHIP2 = "e-chips";
var CHIP_CONTENT2 = "e-chipcontent";
var CHIP_CLOSE2 = "e-chips-close";
var CHIP_SELECTED = "e-chip-selected";
var SEARCHBOX_WRAPPER = "e-searcher";
var DELIMITER_VIEW_WRAPPER = "e-delimiter";
var ZERO_SIZE = "e-zero-size";
var REMAIN_WRAPPER2 = "e-remain";
var CLOSEICON_CLASS2 = "e-chips-close e-close-hooker";
var DELIMITER_WRAPPER = "e-delim-values";
var POPUP_WRAPPER = "e-ddl e-popup e-multi-select-list-wrapper";
var INPUT_ELEMENT = "e-dropdownbase";
var RTL_CLASS = "e-rtl";
var CLOSE_ICON_HIDE = "e-close-icon-hide";
var MOBILE_CHIP = "e-mob-chip";
var FOOTER2 = "e-ddl-footer";
var HEADER2 = "e-ddl-header";
var DISABLE_ICON = "e-ddl-disable-icon";
var SPINNER_CLASS2 = "e-ms-spinner-icon";
var HIDDEN_ELEMENT = "e-multi-hidden";
var destroy2 = "destroy";
var dropdownIcon = "e-input-group-icon e-ddl-icon";
var iconAnimation = "e-icon-anim";
var TOTAL_COUNT_WRAPPER2 = "e-delim-total";
var BOX_ELEMENT = "e-multiselect-box";
var FILTERPARENT = "e-filter-parent";
var CUSTOM_WIDTH = "e-search-custom-width";
var FILTERINPUT = "e-input-filter";
var RESIZE_ICON = "e-resizer-right e-icons";
var MultiSelect = (
  /** @class */
  function(_super) {
    __extends27(MultiSelect2, _super);
    function MultiSelect2(option, element) {
      var _this = _super.call(this, option, element) || this;
      _this.clearIconWidth = 0;
      _this.previousFilterText = "";
      _this.storedSelectAllHeight = 0;
      _this.isUpdateHeaderHeight = false;
      _this.isUpdateFooterHeight = false;
      _this.isBlurDispatching = false;
      _this.isFilterPrevented = false;
      _this.isFilteringAction = false;
      _this.isValidKey = false;
      _this.selectAllEventData = [];
      _this.selectAllEventEle = [];
      _this.preventSetCurrentData = false;
      _this.isSelectAllLoop = false;
      _this.scrollFocusStatus = false;
      _this.keyDownStatus = false;
      return _this;
    }
    MultiSelect2.prototype.enableRTL = function(state) {
      if (state) {
        this.overAllWrapper.classList.add(RTL_CLASS);
      } else {
        this.overAllWrapper.classList.remove(RTL_CLASS);
      }
      if (this.popupObj) {
        this.popupObj.enableRtl = state;
        this.popupObj.dataBind();
      }
    };
    MultiSelect2.prototype.requiredModules = function() {
      var modules = [];
      if (this.enableVirtualization) {
        modules.push({
          args: [this],
          member: "VirtualScroll"
        });
      }
      if (this.mode === "CheckBox") {
        this.isGroupChecking = this.enableGroupCheckBox;
        if (this.enableGroupCheckBox) {
          var prevOnChange = this.isProtectedOnChange;
          this.isProtectedOnChange = true;
          this.enableSelectionOrder = false;
          this.isProtectedOnChange = prevOnChange;
        }
        this.allowCustomValue = false;
        this.hideSelectedItem = false;
        this.closePopupOnSelect = false;
        modules.push({
          member: "CheckBoxSelection",
          args: [this]
        });
      }
      return modules;
    };
    MultiSelect2.prototype.updateHTMLAttribute = function() {
      if (Object.keys(this.htmlAttributes).length) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var htmlAttr = _a[_i];
          switch (htmlAttr) {
            case "class": {
              var updatedClassValue = this.htmlAttributes["" + htmlAttr].replace(/\s+/g, " ").trim();
              if (updatedClassValue !== "") {
                addClass([this.overAllWrapper], updatedClassValue.split(" "));
                addClass([this.popupWrapper], updatedClassValue.split(" "));
              }
              break;
            }
            case "disabled":
              this.enable(false);
              break;
            case "placeholder":
              if (!this.placeholder) {
                this.inputElement.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
                this.setProperties({
                  placeholder: this.inputElement.placeholder
                }, true);
                this.refreshPlaceHolder();
              }
              break;
            default: {
              var defaultAttr = ["id"];
              var validateAttr = ["name", "required", "aria-required", "form"];
              var containerAttr = ["title", "role", "style", "class"];
              if (defaultAttr.indexOf(htmlAttr) > -1) {
                this.element.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
              } else if (htmlAttr.indexOf("data") === 0 || validateAttr.indexOf(htmlAttr) > -1) {
                this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
              } else if (containerAttr.indexOf(htmlAttr) > -1) {
                this.overAllWrapper.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
              } else if (htmlAttr !== "size" && !isNullOrUndefined(this.inputElement)) {
                this.inputElement.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
              }
              break;
            }
          }
        }
      }
    };
    MultiSelect2.prototype.updateReadonly = function(state) {
      if (!isNullOrUndefined(this.inputElement)) {
        if (state || this.mode === "CheckBox") {
          this.inputElement.setAttribute("readonly", "true");
        } else {
          this.inputElement.removeAttribute("readonly");
        }
      }
    };
    MultiSelect2.prototype.updateClearButton = function(state) {
      if (state) {
        if (this.overAllClear.parentNode) {
          this.overAllClear.style.display = "";
        } else {
          this.componentWrapper.appendChild(this.overAllClear);
        }
        this.componentWrapper.classList.remove(CLOSE_ICON_HIDE);
      } else {
        this.overAllClear.style.display = "none";
        this.componentWrapper.classList.add(CLOSE_ICON_HIDE);
      }
    };
    MultiSelect2.prototype.updateCssClass = function() {
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        var updatedCssClassValues = this.cssClass;
        updatedCssClassValues = this.cssClass.replace(/\s+/g, " ").trim();
        if (updatedCssClassValues !== "") {
          addClass([this.overAllWrapper], updatedCssClassValues.split(" "));
          addClass([this.popupWrapper], updatedCssClassValues.split(" "));
        }
      }
    };
    MultiSelect2.prototype.updateOldPropCssClass = function(oldClass) {
      if (!isNullOrUndefined(oldClass) && oldClass !== "") {
        oldClass = oldClass.replace(/\s+/g, " ").trim();
        if (oldClass !== "") {
          removeClass([this.overAllWrapper], oldClass.split(" "));
          removeClass([this.popupWrapper], oldClass.split(" "));
        }
      }
    };
    MultiSelect2.prototype.onPopupShown = function(e) {
      var _this = this;
      if (Browser.isDevice && this.mode === "CheckBox" && this.allowFiltering) {
        var proxy_1 = this;
        window.onpopstate = function() {
          proxy_1.hidePopup();
          proxy_1.inputElement.focus();
        };
        history.pushState({}, "");
      }
      var animModel = {
        name: "FadeIn",
        duration: 100
      };
      var eventArgs = {
        popup: this.popupObj,
        event: e,
        cancel: false,
        animation: animModel
      };
      this.trigger("open", eventArgs, function(eventArgs2) {
        if (!eventArgs2.cancel) {
          _this.focusAtFirstListItem(true);
          if (_this.popupObj) {
            document.body.appendChild(_this.popupObj.element);
          }
          if (_this.mode === "CheckBox" && _this.enableGroupCheckBox && !isNullOrUndefined(_this.fields.groupBy)) {
            _this.updateListItems(_this.list.querySelectorAll("li.e-list-item"), _this.mainList.querySelectorAll("li.e-list-item"));
          }
          if (_this.mode === "CheckBox" || _this.showDropDownIcon) {
            addClass([_this.overAllWrapper], [iconAnimation]);
          }
          _this.refreshPopup();
          _this.renderReactTemplates();
          if (_this.popupObj) {
            _this.popupObj.show(eventArgs2.animation, _this.zIndex === 1e3 ? _this.element : null);
          }
          if (_this.isReact) {
            setTimeout(function() {
              if (_this.popupHeight && _this.list && _this.popupHeight !== "auto") {
                var popupHeightValue = typeof _this.popupHeight === "string" ? parseInt(_this.popupHeight, 10) : _this.popupHeight;
                if (!_this.isUpdateHeaderHeight && _this.headerTemplate && _this.header) {
                  var listHeight = _this.list.style.maxHeight === "" ? popupHeightValue : parseInt(_this.list.style.maxHeight, 10);
                  _this.list.style.maxHeight = (listHeight - _this.header.offsetHeight).toString() + "px";
                  _this.isUpdateHeaderHeight = true;
                }
                if (!_this.isUpdateFooterHeight && _this.footerTemplate && _this.footer) {
                  var listHeight = _this.list.style.maxHeight === "" ? popupHeightValue : parseInt(_this.list.style.maxHeight, 10);
                  _this.list.style.maxHeight = (listHeight - _this.footer.offsetHeight).toString() + "px";
                  _this.isUpdateFooterHeight = true;
                }
              }
            }, 15);
          }
          attributes(_this.inputElement, {
            "aria-expanded": "true",
            "aria-owns": _this.element.id + "_popup",
            "aria-controls": _this.element.id
          });
          _this.updateAriaActiveDescendant();
          if (_this.isFirstClick) {
            if (!_this.enableVirtualization) {
              _this.loadTemplate();
            }
          }
          if (_this.mode === "CheckBox" && _this.showSelectAll) {
            EventHandler.add(_this.popupObj.element, "click", _this.clickHandler, _this);
          }
        }
      });
    };
    MultiSelect2.prototype.updateVirtualReOrderList = function(isCheckBoxUpdate) {
      var query = this.getForQuery(this.value, true).clone();
      this.isVirtualReorder = true;
      if (this.enableVirtualization && this.dataSource instanceof DataManager) {
        this.resetList(this.selectedListData, this.fields, query);
      } else {
        this.resetList(this.dataSource, this.fields, query);
      }
      this.isVirtualReorder = false;
      this.UpdateSkeleton();
      this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li);
      this.virtualItemCount = this.itemCount;
      if (this.mode !== "CheckBox") {
        this.totalItemCount = this.value && this.value.length ? this.totalItemCount - this.value.length : this.totalItemCount;
      }
      if (!this.list.querySelector(".e-virtual-ddl")) {
        var virualElement = this.createElement("div", {
          id: this.element.id + "_popup",
          className: "e-virtual-ddl"
        });
        virualElement.style.cssText = this.GetVirtualTrackHeight();
        this.popupWrapper.querySelector(".e-dropdownbase").appendChild(virualElement);
      } else {
        this.list.getElementsByClassName("e-virtual-ddl")[0].style = this.GetVirtualTrackHeight();
      }
      if (this.list.querySelector(".e-virtual-ddl-content")) {
        this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
      }
      if (isCheckBoxUpdate) {
        this.loadTemplate();
      }
    };
    MultiSelect2.prototype.updateListItems = function(listItems, mainListItems) {
      for (var i = 0; i < listItems.length; i++) {
        this.findGroupStart(listItems[i]);
        this.findGroupStart(mainListItems[i]);
      }
      this.deselectHeader();
    };
    MultiSelect2.prototype.loadTemplate = function() {
      this.refreshListItems(null);
      if (this.enableVirtualization && this.list && this.mode === "CheckBox") {
        var reOrderList = this.list.querySelectorAll(".e-reorder")[0];
        if (this.list.querySelector(".e-virtual-ddl-content") && reOrderList) {
          this.list.querySelector(".e-virtual-ddl-content").removeChild(reOrderList);
        }
      }
      if (this.mode === "CheckBox") {
        this.removeFocus();
      }
      this.notify("reOrder", {
        module: "CheckBoxSelection",
        enable: this.mode === "CheckBox",
        e: this
      });
      this.isPreventScrollAction = true;
    };
    MultiSelect2.prototype.setScrollPosition = function() {
      if ((!this.hideSelectedItem && this.mode !== "CheckBox" || this.mode === "CheckBox" && !this.enableSelectionOrder) && !isNullOrUndefined(this.value) && this.value.length > 0) {
        var value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value[this.value.length - 1]) : this.value[this.value.length - 1];
        var valueEle = this.findListElement(this.hideSelectedItem ? this.ulElement : this.list, "li", "data-value", value);
        if (!isNullOrUndefined(valueEle)) {
          this.scrollBottom(valueEle, void 0, false, null, true);
        }
      }
      if (this.enableVirtualization) {
        var focusedItem = this.list.querySelector("." + dropDownBaseClasses.focus);
        this.isKeyBoardAction = false;
        this.scrollBottom(focusedItem, void 0, false, null, true);
      }
    };
    MultiSelect2.prototype.focusAtFirstListItem = function(isOpen) {
      if (this.ulElement && this.ulElement.querySelector("li." + dropDownBaseClasses.li)) {
        var element = void 0;
        if (this.mode === "CheckBox") {
          this.removeFocus();
          return;
        } else {
          if (this.enableVirtualization) {
            if (this.fields.disabled) {
              element = this.ulElement.querySelector("li." + dropDownBaseClasses.li + ":not(.e-virtual-list):not(.e-hide-listitem):not(." + DISABLED2 + ")");
              if (isOpen && this.viewPortInfo && this.viewPortInfo.startIndex !== 0) {
                var elements = this.ulElement.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-virtual-list):not(.e-hide-listitem)");
                element = elements && elements.length > 0 ? elements[2] : element;
              }
            } else {
              element = this.ulElement.querySelector("li." + dropDownBaseClasses.li + ":not(.e-virtual-list):not(.e-hide-listitem)");
              if (isOpen && this.viewPortInfo && this.viewPortInfo.startIndex !== 0) {
                var elements = this.ulElement.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-virtual-list):not(.e-hide-listitem)");
                element = elements && elements.length > 0 ? elements[2] : element;
              }
            }
          } else {
            if (this.fields.disabled) {
              element = this.ulElement.querySelector("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(." + DISABLED2 + ")");
            } else {
              element = this.ulElement.querySelector("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + ")");
            }
          }
        }
        if (element !== null) {
          this.removeFocus();
          this.addListFocus(element);
        }
      }
    };
    MultiSelect2.prototype.focusAtLastListItem = function(data) {
      var activeElement;
      if (data) {
        activeElement = Search2(data, this.liCollections, "StartsWith", this.ignoreCase);
      } else {
        if (this.value && this.value.length) {
          var value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value[this.value.length - 1]) : this.value[this.value.length - 1];
          Search2(value, this.liCollections, "StartsWith", this.ignoreCase);
        } else {
          activeElement = null;
        }
      }
      if (activeElement && activeElement.item !== null) {
        this.addListFocus(activeElement.item);
        if ((this.allowCustomValue || this.allowFiltering) && this.isPopupOpen() && this.closePopupOnSelect && !this.enableVirtualization || this.closePopupOnSelect && !this.enableVirtualization) {
          this.scrollBottom(activeElement.item, activeElement.index);
        }
      }
    };
    MultiSelect2.prototype.getAriaAttributes = function() {
      var ariaAttributes = {
        "aria-disabled": "false",
        "role": "combobox",
        "aria-expanded": "false"
      };
      return ariaAttributes;
    };
    MultiSelect2.prototype.updateListARIA = function() {
      if (!isNullOrUndefined(this.ulElement)) {
        attributes(this.ulElement, {
          "id": this.element.id + "_options",
          "role": "listbox",
          "aria-hidden": "false",
          "aria-label": "list"
        });
      }
      var disableStatus = !isNullOrUndefined(this.inputElement) && this.inputElement.disabled ? true : false;
      if (!this.isPopupOpen() && !isNullOrUndefined(this.inputElement)) {
        attributes(this.inputElement, this.getAriaAttributes());
      }
      if (disableStatus) {
        attributes(this.inputElement, {
          "aria-disabled": "true"
        });
      }
      this.ensureAriaDisabled(disableStatus ? "true" : "false");
    };
    MultiSelect2.prototype.ensureAriaDisabled = function(status) {
      if (this.htmlAttributes && this.htmlAttributes["aria-disabled"]) {
        var attr = this.htmlAttributes;
        extend(attr, {
          "aria-disabled": status
        }, attr);
        this.setProperties({
          htmlAttributes: attr
        }, true);
      }
    };
    MultiSelect2.prototype.removelastSelection = function(e) {
      var selectedElem = this.chipCollectionWrapper.querySelector("span." + CHIP_SELECTED);
      if (selectedElem !== null) {
        this.removeSelectedChip(e);
        return;
      }
      var elements = this.chipCollectionWrapper.querySelectorAll("span." + CHIP2);
      var value = elements[elements.length - 1].getAttribute("data-value");
      if (!isNullOrUndefined(this.value)) {
        this.tempValues = this.allowObjectBinding ? this.value.slice() : this.value.slice();
      }
      var customValue = this.allowObjectBinding ? this.getDataByValue(this.getFormattedValue(value)) : this.getFormattedValue(value);
      if (this.allowCustomValue && (value !== "false" && customValue === false || !isNullOrUndefined(customValue) && customValue.toString() === "NaN")) {
        customValue = value;
      }
      this.removeValue(customValue, e);
      this.removeChipSelection();
      this.updateDelimeter(this.delimiterChar, e);
      this.makeTextBoxEmpty();
      if (this.mainList && this.listData) {
        this.refreshSelection();
      }
      this.checkPlaceholderSize();
    };
    MultiSelect2.prototype.onActionFailure = function(e) {
      _super.prototype.onActionFailure.call(this, e);
      this.renderPopup();
      this.onPopupShown();
    };
    MultiSelect2.prototype.targetElement = function() {
      this.targetInputElement = this.inputElement;
      if (this.mode === "CheckBox" && this.allowFiltering) {
        this.notify("targetElement", {
          module: "CheckBoxSelection",
          enable: this.mode === "CheckBox"
        });
      }
      return this.targetInputElement.value;
    };
    MultiSelect2.prototype.getForQuery = function(valuecheck, isCheckbox) {
      var predicate;
      var field = this.isPrimitiveData ? "" : this.fields.value;
      if (this.enableVirtualization && valuecheck) {
        if (isCheckbox) {
          var startindex = this.viewPortInfo.startIndex;
          var endindex = startindex + this.viewPortInfo.endIndex <= valuecheck.length && valuecheck[startindex + this.viewPortInfo.endIndex] ? startindex + this.viewPortInfo.endIndex : valuecheck.length;
          for (var i = startindex; i < endindex; i++) {
            var value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", valuecheck[i]) : valuecheck[i];
            if (i === startindex) {
              predicate = new Predicate(field, "equal", value);
            } else {
              predicate = predicate.or(field, "equal", value);
            }
          }
          return new Query().where(predicate);
        } else {
          for (var i = 0; i < valuecheck.length; i++) {
            var value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", valuecheck[i]) : valuecheck[i];
            if (this.isaddNonPresentItems) {
              predicate = i === 0 ? new Predicate(field, "equal", valuecheck[i]) : predicate.or(field, "equal", valuecheck[i]);
            } else {
              predicate = i === 0 ? predicate = new Predicate(field, "notequal", value) : predicate.and(field, "notequal", value);
            }
          }
          return new Query().where(predicate);
        }
      } else {
        for (var i = 0; i < valuecheck.length; i++) {
          if (i === 0) {
            predicate = new Predicate(field, "equal", valuecheck[i]);
          } else {
            predicate = predicate.or(field, "equal", valuecheck[i]);
          }
        }
      }
      if (this.dataSource instanceof DataManager && this.dataSource.adaptor instanceof JsonAdaptor) {
        return new Query().where(predicate);
      } else {
        return this.getQuery(this.query).clone().where(predicate);
      }
    };
    MultiSelect2.prototype.onActionComplete = function(ulElement, list, e, isUpdated) {
      var _this = this;
      if (this.dataSource instanceof DataManager && !isNullOrUndefined(e) && !this.virtualGroupDataSource) {
        this.totalItemCount = e.count;
      }
      if (this.value && list && list.length > 0 && this.allowFiltering && this.mode !== "CheckBox" && !this.enableVirtualization && !this.isFilterPrevented && !this.allowCustomValue && this.isFilteringAction) {
        var allItemsInValue = list.every(function(item) {
          var itemValue = getValue(_this.fields.value ? _this.fields.value : "", item);
          return _this.value.some(function(val) {
            var value2 = _this.allowObjectBinding ? getValue(_this.fields.value ? _this.fields.value : "", val) : val;
            return itemValue === value2;
          });
        });
        if (allItemsInValue) {
          ulElement.innerHTML = "";
          list = [];
        }
      }
      _super.prototype.onActionComplete.call(this, ulElement, list, e);
      this.skeletonCount = this.totalItemCount !== 0 && this.totalItemCount < this.itemCount * 2 && (!(this.dataSource instanceof DataManager) || this.dataSource instanceof DataManager && this.totalItemCount <= this.itemCount) ? 0 : this.skeletonCount;
      this.updateSelectElementData(this.allowFiltering);
      var proxy = this;
      if (!isNullOrUndefined(this.value) && !this.allowCustomValue && !this.enableVirtualization && this.listData && this.listData.length > 0) {
        for (var i = 0; i < this.value.length; i++) {
          var value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", proxy.value[i]) : proxy.value[i];
          var checkEle = this.findListElement(this.allowFiltering && !isNullOrUndefined(this.mainList) ? this.mainList : ulElement, "li", "data-value", value);
          if (!checkEle && !(this.dataSource instanceof DataManager)) {
            this.value.splice(i, 1);
            i -= 1;
          }
        }
      }
      var valuecheck = [];
      if (!isNullOrUndefined(this.value)) {
        valuecheck = this.presentItemValue(this.ulElement);
      }
      if (valuecheck.length > 0 && this.dataSource instanceof DataManager && !isNullOrUndefined(this.value) && this.listData != null && !(valuecheck.length === 1 && valuecheck[0] == null)) {
        this.isaddNonPresentItems = true;
        this.addNonPresentItems(valuecheck, this.ulElement, this.listData);
        this.isaddNonPresentItems = false;
      } else {
        this.updateActionList(ulElement, list, e);
      }
      if (this.dataSource instanceof DataManager && this.allowCustomValue && !this.isCustomRendered && this.inputElement.value && this.inputElement.value !== "") {
        var query = new Query();
        query = this.allowFiltering ? query.where(this.fields.text, "startswith", this.inputElement.value, this.ignoreCase, this.ignoreAccent) : query;
        this.checkForCustomValue(query, this.fields);
        this.isCustomRendered = true;
        this.remoteCustomValue = this.enableVirtualization ? false : this.remoteCustomValue;
      }
      if (this.mode === "CheckBox" && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy) && !isNullOrUndefined(this.fields.disabled)) {
        this.disableGroupHeader();
      }
      if (this.dataSource instanceof DataManager && this.mode === "CheckBox" && this.allowFiltering) {
        this.removeFocus();
      }
    };
    MultiSelect2.prototype.updateActionList = function(ulElement, list, e, isUpdated) {
      if (this.mode === "CheckBox" && this.showSelectAll) {
        this.notify("selectAll", {
          module: "CheckBoxSelection",
          enable: this.mode === "CheckBox"
        });
      }
      if (!this.mainList && !this.mainData) {
        this.mainList = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;
        this.mainData = list;
        this.mainListCollection = this.liCollections;
      } else if (isNullOrUndefined(this.mainData) || this.mainData.length === 0) {
        this.mainData = list;
      }
      if ((this.remoteCustomValue || list.length <= 0) && this.allowCustomValue && this.inputFocus && this.allowFiltering && this.inputElement.value && this.inputElement.value !== "") {
        this.checkForCustomValue(this.tempQuery, this.fields);
        if (this.isCustomRendered) {
          return;
        }
      }
      if (this.value && this.value.length && (this.mode !== "CheckBox" && !isNullOrUndefined(this.inputElement) && this.inputElement.value.trim() !== "" || this.mode === "CheckBox" || (this.keyCode === 8 || this.keyCode === 46) && this.allowFiltering && this.allowCustomValue && this.dataSource instanceof DataManager && this.inputElement.value === "")) {
        this.refreshSelection();
      }
      this.updateListARIA();
      this.unwireListEvents();
      this.wireListEvents();
      if (!isNullOrUndefined(this.setInitialValue)) {
        this.setInitialValue();
      }
      if (!isNullOrUndefined(this.selectAllAction)) {
        this.selectAllAction();
      }
      if (this.setDynValue) {
        if (!isNullOrUndefined(this.text) && (isNullOrUndefined(this.value) || this.value.length === 0)) {
          this.initialTextUpdate();
        }
        if (!this.enableVirtualization || this.enableVirtualization && !(this.dataSource instanceof DataManager)) {
          this.initialValueUpdate();
        } else if (!this.isRemoveSelection) {
          this.initialValueUpdate(this.listData, true);
        }
        this.initialUpdate();
        this.refreshPlaceHolder();
        if (this.mode !== "CheckBox" && this.changeOnBlur) {
          this.updateValueState(null, this.value, null);
        }
      }
      this.renderPopup();
      if (this.beforePopupOpen) {
        this.beforePopupOpen = false;
        this.onPopupShown(e);
      }
    };
    MultiSelect2.prototype.refreshSelection = function() {
      var value;
      var element;
      var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
      if (!isNullOrUndefined(this.value)) {
        for (var index = 0; !isNullOrUndefined(this.value[index]); index++) {
          value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value[index]) : this.value[index];
          element = this.findListElement(this.list, "li", "data-value", value);
          if (element) {
            addClass([element], className);
            if (this.hideSelectedItem && element.previousSibling && element.previousElementSibling.classList.contains(dropDownBaseClasses.group) && (!element.nextElementSibling || element.nextElementSibling.classList.contains(dropDownBaseClasses.group))) {
              addClass([element.previousElementSibling], className);
            }
            if (this.hideSelectedItem && this.fields.groupBy && !element.previousElementSibling.classList.contains(HIDE_LIST)) {
              this.hideGroupItem(value);
            }
            if (this.hideSelectedItem && element.classList.contains(dropDownBaseClasses.focus)) {
              removeClass([element], dropDownBaseClasses.focus);
              var listEle = element.parentElement.querySelectorAll("." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(." + DISABLED2 + ")");
              if (listEle.length > 0) {
                addClass([listEle[0]], dropDownBaseClasses.focus);
                this.updateAriaActiveDescendant();
              } else {
                if (!(this.list && this.list.querySelectorAll("." + dropDownBaseClasses.li).length > 0)) {
                  this.l10nUpdate();
                  addClass([this.list], dropDownBaseClasses.noData);
                }
              }
            }
            element.setAttribute("aria-selected", "true");
            if (this.mode === "CheckBox" && element.classList.contains("e-active")) {
              var ariaValue = element.getElementsByClassName("e-check").length;
              if (ariaValue === 0) {
                var args = {
                  module: "CheckBoxSelection",
                  enable: this.mode === "CheckBox",
                  li: element,
                  e: null
                };
                this.notify("updatelist", args);
              }
            }
          }
        }
      }
      this.checkSelectAll();
      this.checkMaxSelection();
    };
    MultiSelect2.prototype.hideGroupItem = function(value) {
      var element;
      var element1;
      var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
      element1 = element = this.findListElement(this.ulElement, "li", "data-value", value);
      var i = 0;
      var j = 0;
      var temp = true;
      var temp1 = true;
      do {
        if (element && element.previousElementSibling && !element.previousElementSibling.classList.contains(HIDE_LIST) && element.previousElementSibling.classList.contains(dropDownBaseClasses.li)) {
          temp = false;
        }
        if (!temp || !element || element.previousElementSibling && element.previousElementSibling.classList.contains(dropDownBaseClasses.group)) {
          i = 10;
        } else {
          element = element.previousElementSibling;
        }
        if (element1 && element1.nextElementSibling && !element1.nextElementSibling.classList.contains(HIDE_LIST) && element1.nextElementSibling.classList.contains(dropDownBaseClasses.li)) {
          temp1 = false;
        }
        if (!temp1 || !element1 || element1.nextElementSibling && element1.nextElementSibling.classList.contains(dropDownBaseClasses.group)) {
          j = 10;
        } else {
          element1 = element1.nextElementSibling;
        }
      } while (i < 10 || j < 10);
      if (temp && temp1 && !element.previousElementSibling.classList.contains(HIDE_LIST)) {
        addClass([element.previousElementSibling], className);
      } else if (temp && temp1 && element.previousElementSibling.classList.contains(HIDE_LIST)) {
        removeClass([element.previousElementSibling], className);
      }
    };
    MultiSelect2.prototype.getValidLi = function() {
      var liElement = this.ulElement.querySelector("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + ")");
      return !isNullOrUndefined(liElement) ? liElement : this.liCollections[0];
    };
    MultiSelect2.prototype.checkSelectAll = function() {
      var groupItemLength = !isNullOrUndefined(this.fields.disabled) ? this.list.querySelectorAll("li.e-list-group-item.e-active:not(.e-disabled)").length : this.list.querySelectorAll("li.e-list-group-item.e-active").length;
      var listItem = this.list.querySelectorAll("li.e-list-item");
      var searchCount = this.enableVirtualization ? this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-virtual-list)").length : !isNullOrUndefined(this.fields.disabled) ? this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-disabled)").length : this.list.querySelectorAll("li." + dropDownBaseClasses.li).length;
      var searchActiveCount = this.list.querySelectorAll("li." + dropDownBaseClasses.selected).length;
      if (this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {
        searchActiveCount = searchActiveCount - groupItemLength;
      }
      if (!this.enableVirtualization && (searchCount === searchActiveCount || searchActiveCount === this.maximumSelectionLength) && this.mode === "CheckBox" && this.showSelectAll || this.enableVirtualization && this.mode === "CheckBox" && this.showSelectAll && this.value && this.value.length === this.totalItemCount) {
        this.notify("checkSelectAll", {
          module: "CheckBoxSelection",
          enable: this.mode === "CheckBox",
          value: "check"
        });
      } else if (searchCount !== searchActiveCount && this.mode === "CheckBox" && this.showSelectAll) {
        this.notify("checkSelectAll", {
          module: "CheckBoxSelection",
          enable: this.mode === "CheckBox",
          value: "uncheck"
        });
      }
      if (this.enableGroupCheckBox && this.fields.groupBy && !this.enableSelectionOrder) {
        for (var i = 0; i < listItem.length; i++) {
          this.findGroupStart(listItem[i]);
        }
        this.deselectHeader();
      }
    };
    MultiSelect2.prototype.openClick = function(e) {
      if (!this.openOnClick && this.mode !== "CheckBox" && !this.isPopupOpen()) {
        if (this.targetElement() !== "") {
          this.showPopup();
        } else {
          this.hidePopup(e);
        }
      } else if (!this.openOnClick && this.mode === "CheckBox" && !this.isPopupOpen()) {
        this.showPopup();
      }
    };
    MultiSelect2.prototype.keyUp = function(e) {
      if (this.mode === "CheckBox" && !this.openOnClick) {
        var char = String.fromCharCode(e.keyCode);
        var isWordCharacter = char.match(/\w/);
        if (!isNullOrUndefined(isWordCharacter)) {
          this.isValidKey = true;
        }
      }
      this.isValidKey = this.isPopupOpen() && e.keyCode === 8 || this.isValidKey;
      this.isValidKey = e.ctrlKey && e.keyCode === 86 ? false : this.isValidKey;
      if (this.isValidKey && this.inputElement) {
        this.isValidKey = false;
        this.expandTextbox();
        this.showOverAllClear();
        switch (e.keyCode) {
          default:
            this.search(e);
        }
      }
    };
    MultiSelect2.prototype.filter = function(dataSource, query, fields) {
      this.isFiltered = true;
      this.remoteFilterAction = true;
      this.dataUpdater(dataSource, query, fields);
    };
    MultiSelect2.prototype.getQuery = function(query) {
      var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();
      if (this.isFiltered) {
        if (this.enableVirtualization && !isNullOrUndefined(this.customFilterQuery)) {
          filterQuery = this.customFilterQuery.clone();
          return this.virtualFilterQuery(filterQuery);
        } else if (!this.enableVirtualization) {
          return filterQuery;
        }
      }
      if (this.filterAction) {
        if (this.targetElement() !== null && !this.enableVirtualization || this.enableVirtualization && this.targetElement() !== null && this.targetElement().trim() !== "") {
          var dataType = this.typeOfData(this.dataSource).typeof;
          if (!(this.dataSource instanceof DataManager) && dataType === "string" || dataType === "number") {
            filterQuery.where("", this.filterType, this.targetElement(), this.ignoreCase, this.ignoreAccent);
          } else if (this.enableVirtualization && this.targetElement() !== "" && !this.isClearAllAction || !this.enableVirtualization) {
            var fields = this.fields;
            filterQuery.where(!isNullOrUndefined(fields.text) ? fields.text : "", this.filterType, this.targetElement(), this.ignoreCase, this.ignoreAccent);
          }
        }
        if (this.enableVirtualization && this.viewPortInfo.endIndex !== 0 && !this.virtualSelectAll) {
          return this.virtualFilterQuery(filterQuery);
        }
        if (this.virtualSelectAll) {
          return query ? query.take(this.maximumSelectionLength).requiresCount() : this.query ? this.query.take(this.maximumSelectionLength).requiresCount() : new Query().take(this.maximumSelectionLength).requiresCount();
        }
        return filterQuery;
      } else {
        if (this.enableVirtualization && this.viewPortInfo.endIndex !== 0 && !this.virtualSelectAll) {
          return this.virtualFilterQuery(filterQuery);
        }
        if (this.virtualSelectAll) {
          return query ? query.take(this.maximumSelectionLength).requiresCount() : this.query ? this.query.take(this.maximumSelectionLength).requiresCount() : new Query().take(this.maximumSelectionLength).requiresCount();
        }
        return query ? query : this.query ? this.query : new Query();
      }
    };
    MultiSelect2.prototype.virtualFilterQuery = function(filterQuery) {
      var takeValue = this.getTakeValue();
      var isReOrder = true;
      var isSkip = true;
      var isTake = true;
      for (var queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {
        if (this.getModuleName() === "multiselect" && (filterQuery.queries[queryElements].e && filterQuery.queries[queryElements].e.condition === "or" || filterQuery.queries[queryElements].e && filterQuery.queries[queryElements].e.operator === "equal")) {
          isReOrder = false;
        }
        if (filterQuery.queries[queryElements].fn === "onSkip") {
          isSkip = false;
        }
        if (filterQuery.queries[queryElements].fn === "onTake") {
          isTake = false;
        }
      }
      var queryTakeValue = 0;
      if (filterQuery && filterQuery.queries.length > 0) {
        for (var queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {
          if (filterQuery.queries[queryElements].fn === "onTake") {
            queryTakeValue = takeValue <= filterQuery.queries[queryElements].e.nos ? filterQuery.queries[queryElements].e.nos : takeValue;
          }
        }
      }
      if (queryTakeValue <= 0 && this.query && this.query.queries.length > 0) {
        for (var queryElements = 0; queryElements < this.query.queries.length; queryElements++) {
          if (this.query.queries[queryElements].fn === "onTake") {
            queryTakeValue = takeValue <= this.query.queries[queryElements].e.nos ? this.query.queries[queryElements].e.nos : takeValue;
          }
        }
      }
      if (filterQuery && filterQuery.queries.length > 0) {
        for (var queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {
          if (filterQuery.queries[queryElements].fn === "onTake") {
            queryTakeValue = filterQuery.queries[queryElements].e.nos <= queryTakeValue ? queryTakeValue : filterQuery.queries[queryElements].e.nos;
            filterQuery.queries.splice(queryElements, 1);
            --queryElements;
          }
        }
      }
      if ((this.allowFiltering && isSkip || !isReOrder || !this.allowFiltering && isSkip) && !this.isVirtualReorder) {
        if (!isReOrder) {
          filterQuery.skip(this.viewPortInfo.startIndex);
        } else {
          filterQuery.skip(this.virtualItemStartIndex);
        }
      }
      if (this.isIncrementalRequest) {
        filterQuery.take(this.incrementalEndIndex);
      } else if (queryTakeValue > 0) {
        filterQuery.take(queryTakeValue);
      } else {
        filterQuery.take(takeValue);
      }
      filterQuery.requiresCount();
      this.customFilterQuery = null;
      return filterQuery;
    };
    MultiSelect2.prototype.getTakeValue = function() {
      return this.allowFiltering && Browser.isDevice ? Math.round(window.outerHeight / this.listItemHeight) : this.itemCount;
    };
    MultiSelect2.prototype.dataUpdater = function(dataSource, query, fields) {
      this.isDataFetched = false;
      var isNoData = this.list.classList.contains(dropDownBaseClasses.noData);
      if (this.targetElement().trim() === "") {
        var list = this.enableVirtualization ? this.list.cloneNode(true) : this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
        if (this.backCommand || this.enableVirtualization && this.mode === "CheckBox" && this.value && this.value.length > 0) {
          this.remoteCustomValue = false;
          var isReordered = false;
          if (this.allowCustomValue && list.querySelectorAll("li").length === 0 && this.mainData.length > 0) {
            this.mainData = [];
          }
          if (this.enableVirtualization) {
            if (this.allowFiltering) {
              this.isPreventScrollAction = true;
              this.list.scrollTop = 0;
              this.previousStartIndex = 0;
              this.virtualListInfo = null;
            }
            if (this.value && this.value.length > 0 && this.mode === "CheckBox") {
              this.notify("setCurrentViewDataAsync", {
                component: this.getModuleName(),
                module: "VirtualScroll"
              });
              isReordered = true;
            } else {
              this.totalItemCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;
              this.resetList(dataSource, fields, query);
              if (this.mode !== "CheckBox") {
                this.totalItemCount = this.value && this.value.length ? this.totalItemCount - this.value.length : this.totalItemCount;
              }
              this.UpdateSkeleton();
              if ((isNoData || this.allowCustomValue) && !this.list.classList.contains(dropDownBaseClasses.noData)) {
                if (!this.list.querySelector(".e-virtual-ddl-content")) {
                  var contentElement = this.createElement("div", {
                    className: "e-virtual-ddl-content"
                  });
                  contentElement.style.cssText = this.getTransformValues();
                  this.list.appendChild(contentElement).appendChild(this.list.querySelector(".e-list-parent"));
                }
                if (!this.list.querySelector(".e-virtual-ddl")) {
                  var virualElement = this.createElement("div", {
                    id: this.element.id + "_popup",
                    className: "e-virtual-ddl"
                  });
                  virualElement.style.cssText = this.GetVirtualTrackHeight();
                  document.getElementsByClassName("e-multi-select-list-wrapper")[0].querySelector(".e-dropdownbase").appendChild(virualElement);
                }
              }
            }
          }
          this.onActionComplete(list, this.mainData);
          if (this.value && this.value.length) {
            this.refreshSelection();
          }
          if (this.keyCode !== 8) {
            this.focusAtFirstListItem();
          }
          if (!isReordered) {
            this.notify("reOrder", {
              module: "CheckBoxSelection",
              enable: this.mode === "CheckBox",
              e: this
            });
          }
        }
      } else {
        if (this.enableVirtualization && this.allowFiltering) {
          this.isPreventScrollAction = true;
          this.list.scrollTop = 0;
          this.previousStartIndex = 0;
          this.virtualListInfo = null;
          if (this.list.querySelector(".e-list-parent.e-reorder")) {
            this.list.querySelector(".e-list-parent.e-reorder").remove();
          }
        }
        this.resetList(dataSource, fields, query);
        if (this.enableVirtualization && (isNoData || this.allowCustomValue) && !this.list.classList.contains(dropDownBaseClasses.noData)) {
          if (!this.list.querySelector(".e-virtual-ddl-content")) {
            var contentElement = this.createElement("div", {
              className: "e-virtual-ddl-content"
            });
            contentElement.style.cssText = this.getTransformValues();
            this.list.appendChild(contentElement).appendChild(this.list.querySelector(".e-list-parent"));
          }
          if (this.mode !== "CheckBox") {
            this.totalItemCount = this.value && this.value.length ? this.totalItemCount - this.value.length : this.totalItemCount;
          }
          if (!this.list.querySelector(".e-virtual-ddl")) {
            var virualElement = this.createElement("div", {
              id: this.element.id + "_popup",
              className: "e-virtual-ddl"
            });
            virualElement.style.cssText = this.GetVirtualTrackHeight();
            document.getElementsByClassName("e-multi-select-list-wrapper")[0].querySelector(".e-dropdownbase").appendChild(virualElement);
          }
        }
        if (this.allowCustomValue) {
          if (!(dataSource instanceof DataManager)) {
            this.checkForCustomValue(query, fields);
          } else {
            this.remoteCustomValue = true;
            this.tempQuery = query;
          }
        }
      }
      if (this.enableVirtualization && this.allowFiltering) {
        this.getFilteringSkeletonCount();
      }
      this.refreshPopup();
      if (this.allowResize) {
        this.setResize();
      }
      if (this.mode === "CheckBox") {
        this.removeFocus();
      }
    };
    MultiSelect2.prototype.checkForCustomValue = function(query, fields) {
      var dataChecks = !this.getValueByText(this.inputElement.value, this.ignoreCase);
      var field = fields ? fields : this.fields;
      if (this.allowCustomValue && dataChecks) {
        var value = this.inputElement.value;
        var customData = !isNullOrUndefined(this.mainData) && this.mainData.length > 0 ? this.mainData[0] : this.mainData;
        if (customData && typeof customData !== "string" && typeof customData !== "number" && typeof customData !== "boolean") {
          var dataItem_1 = {};
          setValue(field.text, value, dataItem_1);
          if (typeof getValue(this.fields.value ? this.fields.value : "value", customData) === "number" && this.fields.value !== this.fields.text) {
            setValue(field.value, Math.random(), dataItem_1);
          } else {
            setValue(field.value, value, dataItem_1);
          }
          var emptyObject_1 = {};
          if (this.allowObjectBinding) {
            var keys = this.listData && this.listData.length > 0 ? Object.keys(this.listData[0]) : this.firstItem ? Object.keys(this.firstItem) : Object.keys(dataItem_1);
            var isNumberType_1 = typeof getValue(this.fields.value ? this.fields.value : "value", customData) === "number" && this.fields.value !== this.fields.text;
            keys.forEach(function(key) {
              emptyObject_1[key] = key === fields.value || key === fields.text ? key === fields.text && isNumberType_1 ? getValue(fields.text, dataItem_1) : getValue(fields.value, dataItem_1) : null;
            });
          }
          dataItem_1 = this.allowObjectBinding ? emptyObject_1 : dataItem_1;
          if (this.enableVirtualization) {
            this.virtualCustomData = dataItem_1;
            var tempData = this.dataSource instanceof DataManager ? JSON.parse(JSON.stringify(this.listData)) : JSON.parse(JSON.stringify(this.dataSource));
            var totalData = [];
            if (this.virtualCustomSelectData && this.virtualCustomSelectData.length > 0) {
              totalData = tempData.concat(this.virtualCustomSelectData);
            }
            tempData.splice(0, 0, dataItem_1);
            this.isCustomDataUpdated = true;
            var tempCount = this.totalItemCount;
            this.viewPortInfo.startIndex = this.virtualItemStartIndex = 0;
            this.viewPortInfo.endIndex = this.virtualItemEndIndex = this.itemCount;
            this.resetList(tempData, field, query);
            this.isCustomDataUpdated = false;
            this.totalItemCount = this.enableVirtualization && this.dataSource instanceof DataManager ? tempCount : this.totalItemCount;
          } else {
            if (this.dataSource instanceof DataManager && this.allowCustomValue && this.allowFiltering) {
              this.remoteCustomValue = false;
            }
            var tempData = JSON.parse(JSON.stringify(this.listData));
            tempData.splice(0, 0, dataItem_1);
            this.resetList(tempData, field, query);
          }
        } else if (this.listData) {
          var tempData = JSON.parse(JSON.stringify(this.listData));
          tempData.splice(0, 0, this.inputElement.value);
          tempData[0] = typeof customData === "number" && !isNaN(parseFloat(tempData[0])) ? parseFloat(tempData[0]) : tempData[0];
          tempData[0] = typeof customData === "boolean" ? tempData[0] === "true" ? true : tempData[0] === "false" ? false : tempData[0] : tempData[0];
          this.resetList(tempData, field);
        }
      } else if (this.listData && this.mainData && !dataChecks && this.allowCustomValue) {
        if (this.allowFiltering && this.isRemoteSelection && this.remoteCustomValue) {
          this.isRemoteSelection = false;
          if (!this.enableVirtualization) {
            this.resetList(this.listData, field, query);
          }
        } else if (!this.allowFiltering && this.list) {
          var liCollections = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-hide-listitem)");
          var activeElement = Search2(this.targetElement(), liCollections, "StartsWith", this.ignoreCase);
          if (activeElement && activeElement.item !== null) {
            this.addListFocus(activeElement.item);
          }
        }
      }
      if (this.value && this.value.length) {
        this.refreshSelection();
      }
    };
    MultiSelect2.prototype.getNgDirective = function() {
      return "EJS-MULTISELECT";
    };
    MultiSelect2.prototype.wrapperClick = function(e) {
      this.setDynValue = false;
      this.keyboardEvent = null;
      this.isKeyBoardAction = false;
      if (!this.enabled) {
        return;
      }
      if (e.target === this.overAllClear) {
        e.preventDefault();
        return;
      }
      if (!this.inputFocus) {
        this.inputElement.focus();
      }
      if (!this.readonly) {
        if (e.target && e.target.classList.toString().indexOf(CHIP_CLOSE2) !== -1) {
          if (this.isPopupOpen()) {
            this.refreshPopup();
          }
          return;
        }
        if (!this.isPopupOpen() && (this.openOnClick || this.showDropDownIcon && e.target && e.target.className === dropdownIcon)) {
          this.showPopup(e);
        } else {
          this.hidePopup(e);
          if (this.mode === "CheckBox") {
            this.showOverAllClear();
            this.inputFocus = true;
            if (!this.overAllWrapper.classList.contains(FOCUS)) {
              this.overAllWrapper.classList.add(FOCUS);
            }
          }
        }
      }
      if (!(this.targetElement() && this.targetElement() !== "")) {
        e.preventDefault();
      }
      this.checkAndScrollParent();
    };
    MultiSelect2.prototype.checkAndScrollParent = function() {
      var scrollElement = this.overAllWrapper ? this.overAllWrapper.parentElement : null;
      while (scrollElement) {
        var scrollElementStyle = getComputedStyle(scrollElement);
        var scrollElmentHeight = parseFloat(scrollElementStyle.maxHeight) || parseFloat(scrollElementStyle.height);
        if (!isNaN(scrollElmentHeight) && this.isPopupOpen()) {
          var overflowY = scrollElementStyle.overflowY;
          var wrapperBottom = this.overAllWrapper.getBoundingClientRect().bottom;
          var scrollElementBottom = scrollElement.getBoundingClientRect().bottom;
          if ((overflowY === "auto" || overflowY === "scroll") && wrapperBottom > scrollElementBottom) {
            scrollElement.scrollTop += wrapperBottom - scrollElementBottom + 10;
            return;
          }
        }
        scrollElement = scrollElement.parentElement;
      }
    };
    MultiSelect2.prototype.enable = function(state) {
      if (state) {
        this.overAllWrapper.classList.remove(DISABLED2);
        this.inputElement.removeAttribute("disabled");
        attributes(this.inputElement, {
          "aria-disabled": "false"
        });
        this.ensureAriaDisabled("false");
      } else {
        this.overAllWrapper.classList.add(DISABLED2);
        this.inputElement.setAttribute("disabled", "true");
        attributes(this.inputElement, {
          "aria-disabled": "true"
        });
        this.ensureAriaDisabled("true");
      }
      if (this.enabled !== state) {
        this.enabled = state;
      }
      this.hidePopup();
    };
    MultiSelect2.prototype.onBlurHandler = function(eve, isDocClickFromCheck) {
      var target;
      if (this.isBlurDispatching && this.isAngular) {
        this.isBlurDispatching = false;
        return;
      }
      if (!isNullOrUndefined(eve)) {
        target = eve.relatedTarget;
      }
      if (this.popupObj && document.body.contains(this.popupObj.element) && this.popupObj.element.contains(target)) {
        if (this.mode !== "CheckBox") {
          this.inputElement.focus();
        } else if (this.floatLabelType === "Auto" && (this.overAllWrapper.classList.contains("e-outline") || this.overAllWrapper.classList.contains("e-filled"))) {
          addClass([this.overAllWrapper], "e-valid-input");
        }
        return;
      }
      if (this.floatLabelType === "Auto" && this.overAllWrapper.classList.contains("e-outline") && this.mode === "CheckBox" && (isNullOrUndefined(this.value) || this.value.length === 0)) {
        removeClass([this.overAllWrapper], "e-valid-input");
      }
      if (this.mode === "CheckBox" && Browser.isIE && !isNullOrUndefined(eve) && !isDocClickFromCheck) {
        this.inputFocus = false;
        this.overAllWrapper.classList.remove(FOCUS);
        return;
      }
      if (this.scrollFocusStatus) {
        if (!isNullOrUndefined(eve)) {
          eve.preventDefault();
        }
        this.inputElement.focus();
        this.scrollFocusStatus = false;
        return;
      }
      this.inputFocus = false;
      this.overAllWrapper.classList.remove(FOCUS);
      if (this.addTagOnBlur) {
        var dataChecks = this.getValueByText(this.inputElement.value, this.ignoreCase, this.ignoreAccent);
        var listLiElement = this.findListElement(this.list, "li", "data-value", dataChecks);
        var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
        var allowChipAddition = listLiElement && !listLiElement.classList.contains(className) ? true : false;
        if (allowChipAddition) {
          this.updateListSelection(listLiElement, eve);
          if (this.mode === "Delimiter") {
            this.updateDelimeter(this.delimiterChar);
          }
        }
      }
      this.updateDataList();
      this.refreshListItems(null);
      if (this.mode !== "Box" && this.mode !== "CheckBox") {
        this.updateDelimView();
      }
      if (this.changeOnBlur) {
        this.updateValueState(eve, this.value, this.tempValues);
        this.dispatchEvent(this.hiddenElement, "change");
      }
      this.overAllClear.style.display = "none";
      if (this.isPopupOpen()) {
        this.hidePopup(eve);
      }
      this.makeTextBoxEmpty();
      this.trigger("blur");
      this.focused = true;
      if (Browser.isDevice && this.mode !== "Delimiter" && this.mode !== "CheckBox") {
        this.removeChipFocus();
      }
      this.removeChipSelection();
      this.refreshInputHight();
      floatLabelBlur(this.overAllWrapper, this.componentWrapper, this.value, this.floatLabelType, this.placeholder);
      this.refreshPlaceHolder();
      if ((this.allowFiltering || this.enableSelectionOrder === true && this.mode === "CheckBox") && !isNullOrUndefined(this.mainList)) {
        this.ulElement = this.mainList;
      }
      this.checkPlaceholderSize();
      Input.createSpanElement(this.overAllWrapper, this.createElement);
      this.calculateWidth();
      if (!isNullOrUndefined(this.overAllWrapper) && !isNullOrUndefined(this.overAllWrapper.getElementsByClassName("e-ddl-icon")[0] && this.overAllWrapper.getElementsByClassName("e-float-text-content")[0] && this.floatLabelType !== "Never")) {
        this.overAllWrapper.getElementsByClassName("e-float-text-content")[0].classList.add("e-icon");
      }
      this.isBlurDispatching = true;
      if (this.isAngular) {
        this.dispatchEvent(this.inputElement, "blur");
      }
    };
    MultiSelect2.prototype.calculateWidth = function() {
      var elementWidth;
      if (this.overAllWrapper) {
        if (!this.showDropDownIcon || this.overAllWrapper.querySelector(".e-label-top")) {
          elementWidth = this.overAllWrapper.clientWidth - 2 * parseInt(getComputedStyle(this.inputElement).paddingRight, 10);
        } else {
          var downIconWidth = this.dropIcon.offsetWidth + parseInt(getComputedStyle(this.dropIcon).marginRight, 10);
          elementWidth = this.overAllWrapper.clientWidth - (downIconWidth + 2 * parseInt(getComputedStyle(this.inputElement).paddingRight, 10));
        }
        if (this.floatLabelType !== "Never") {
          Input.calculateWidth(elementWidth, this.overAllWrapper, this.getModuleName());
        }
      }
    };
    MultiSelect2.prototype.checkPlaceholderSize = function() {
      if (this.showDropDownIcon) {
        var downIconWidth = this.dropIcon.offsetWidth + parseInt(window.getComputedStyle(this.dropIcon).marginRight, 10);
        this.setPlaceholderSize(downIconWidth);
      } else {
        if (!isNullOrUndefined(this.dropIcon)) {
          this.setPlaceholderSize(this.showDropDownIcon ? this.dropIcon.offsetWidth : 0);
        }
      }
    };
    MultiSelect2.prototype.setPlaceholderSize = function(downIconWidth) {
      if (isNullOrUndefined(this.value) || this.value.length === 0) {
        if (this.dropIcon.offsetWidth !== 0) {
          this.searchWrapper.style.width = "calc(100% - " + (downIconWidth + 10) + "px";
        } else {
          addClass([this.searchWrapper], CUSTOM_WIDTH);
        }
      } else if (!isNullOrUndefined(this.value)) {
        this.searchWrapper.removeAttribute("style");
        removeClass([this.searchWrapper], CUSTOM_WIDTH);
      }
    };
    MultiSelect2.prototype.refreshInputHight = function() {
      if (!isNullOrUndefined(this.searchWrapper)) {
        if ((!this.value || !this.value.length) && (isNullOrUndefined(this.text) || this.text === "")) {
          this.searchWrapper.classList.remove(ZERO_SIZE);
        } else {
          this.searchWrapper.classList.add(ZERO_SIZE);
        }
      }
    };
    MultiSelect2.prototype.validateValues = function(newValue, oldValue) {
      return JSON.stringify(newValue.slice().sort()) !== JSON.stringify(oldValue.slice().sort());
    };
    MultiSelect2.prototype.updateValueState = function(event2, newVal, oldVal) {
      var newValue = newVal ? newVal : [];
      var oldValue = oldVal ? oldVal : [];
      if (this.initStatus && this.validateValues(newValue, oldValue)) {
        var eventArgs = {
          e: event2,
          oldValue: this.allowObjectBinding ? oldVal : oldVal,
          value: this.allowObjectBinding ? newVal : newVal,
          isInteracted: event2 ? true : false,
          element: this.element,
          event: event2
        };
        if (this.isAngular && this.preventChange) {
          this.preventChange = false;
        } else {
          this.trigger("change", eventArgs);
        }
        if (this.enableVirtualization && this.enableSelectionOrder && this.mode === "CheckBox") {
          this.preventSetCurrentData = false;
        }
        this.updateTempValue();
        if (!this.changeOnBlur) {
          this.dispatchEvent(this.hiddenElement, "change");
        }
      }
      this.selectedValueInfo = this.viewPortInfo;
    };
    MultiSelect2.prototype.updateTempValue = function() {
      if (!this.value) {
        this.tempValues = this.value;
      } else {
        this.tempValues = this.allowObjectBinding ? this.value.slice() : this.value.slice();
      }
    };
    MultiSelect2.prototype.updateAriaActiveDescendant = function() {
      if (!isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-item-focus")[0])) {
        attributes(this.inputElement, {
          "aria-activedescendant": this.ulElement.getElementsByClassName("e-item-focus")[0].id
        });
      }
    };
    MultiSelect2.prototype.pageUpSelection = function(steps, isVirtualKeyAction) {
      var collection = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)");
      var previousItem = steps >= 0 ? collection[steps + 1] : collection[0];
      if (this.fields.disabled && previousItem && !this.enableVirtualization) {
        while (previousItem && (previousItem.classList.contains("e-disabled") || previousItem.classList.contains(HIDE_LIST) || previousItem.classList.contains(".e-reorder-hide") || previousItem.classList.contains("e-list-group-item"))) {
          previousItem = previousItem.previousElementSibling;
        }
        if (!previousItem) {
          return;
        }
      }
      if (this.enableVirtualization && isVirtualKeyAction) {
        previousItem = this.liCollections.length >= steps && steps >= 0 ? this.liCollections[steps] : this.liCollections[this.skeletonCount];
      }
      if (!isNullOrUndefined(previousItem) && previousItem.classList.contains("e-virtual-list")) {
        previousItem = this.liCollections[this.skeletonCount];
      }
      if (this.enableVirtualization) {
        if (!isNullOrUndefined(previousItem) && !previousItem.classList.contains("e-item-focus")) {
          this.isKeyBoardAction = true;
          this.addListFocus(previousItem);
          this.scrollTop(previousItem, this.getIndexByValue(previousItem.getAttribute("data-value")), this.keyboardEvent.keyCode);
        } else if (this.viewPortInfo.startIndex === 0) {
          this.isKeyBoardAction = true;
          this.scrollTop(previousItem, this.getIndexByValue(previousItem.getAttribute("data-value")), this.keyboardEvent.keyCode);
        }
        this.previousFocusItem = previousItem;
      } else {
        this.isKeyBoardAction = true;
        this.addListFocus(previousItem);
        this.scrollTop(previousItem, this.getIndexByValue(previousItem.getAttribute("data-value")), this.keyboardEvent.keyCode);
      }
    };
    MultiSelect2.prototype.pageDownSelection = function(steps, isVirtualKeyAction) {
      var list = this.getItems();
      var collection = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide):not(.e-virtual-list-end)");
      var previousItem = steps <= collection.length ? collection[steps - 1] : collection[collection.length - 1];
      if (this.fields.disabled && previousItem && !this.enableVirtualization) {
        while (previousItem && (previousItem.classList.contains("e-disabled") || previousItem.classList.contains(HIDE_LIST) || previousItem.classList.contains(".e-reorder-hide") || previousItem.classList.contains("e-list-group-item"))) {
          previousItem = previousItem.nextElementSibling;
        }
        if (!previousItem) {
          return;
        }
      }
      if (this.enableVirtualization && this.skeletonCount > 0) {
        previousItem = steps < list.length ? this.liCollections[steps] : this.liCollections[list.length - 1];
      }
      if (this.enableVirtualization && isVirtualKeyAction) {
        previousItem = steps <= list.length ? this.liCollections[steps] : this.liCollections[list.length - 1];
      }
      if (this.enableVirtualization && previousItem && previousItem.classList.contains("e-virtual-list-end")) {
        previousItem = collection[collection.length - 1];
      }
      this.isKeyBoardAction = true;
      this.addListFocus(previousItem);
      this.previousFocusItem = previousItem;
      this.scrollBottom(previousItem, this.getIndexByValue(previousItem.getAttribute("data-value")), false, this.keyboardEvent.keyCode);
    };
    MultiSelect2.prototype.getItems = function() {
      if (!this.list) {
        _super.prototype.render.call(this);
      }
      return this.ulElement && this.ulElement.querySelectorAll("." + dropDownBaseClasses.li).length > 0 ? this.ulElement.querySelectorAll("." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + ")") : [];
    };
    MultiSelect2.prototype.focusInHandler = function(e) {
      var _this = this;
      if (this.enabled) {
        this.showOverAllClear();
        this.inputFocus = true;
        if (this.value && this.value.length) {
          if (this.mode !== "Delimiter" && this.mode !== "CheckBox") {
            this.chipCollectionWrapper.style.display = "";
          } else {
            this.showDelimWrapper();
          }
          if (this.mode !== "CheckBox") {
            this.viewWrapper.style.display = "none";
          }
        }
        if (this.mode !== "CheckBox") {
          this.searchWrapper.classList.remove(ZERO_SIZE);
        }
        this.checkPlaceholderSize();
        if (this.focused) {
          var args = {
            isInteracted: e ? true : false,
            event: e
          };
          this.trigger("focus", args);
          this.focused = false;
        }
        if (!this.overAllWrapper.classList.contains(FOCUS)) {
          this.overAllWrapper.classList.add(FOCUS);
        }
        floatLabelFocus(this.overAllWrapper, this.componentWrapper);
        if (this.isPopupOpen()) {
          this.refreshPopup();
        }
        if (this.allowResize) {
          this.setResize();
        }
        setTimeout(function() {
          _this.calculateWidth();
        }, 150);
        return true;
      } else {
        return false;
      }
    };
    MultiSelect2.prototype.showDelimWrapper = function() {
      if (this.mode === "CheckBox") {
        this.viewWrapper.style.display = "";
      } else {
        this.delimiterWrapper.style.display = "";
      }
      this.componentWrapper.classList.add(DELIMITER_VIEW_WRAPPER);
    };
    MultiSelect2.prototype.hideDelimWrapper = function() {
      this.delimiterWrapper.style.display = "none";
      this.componentWrapper.classList.remove(DELIMITER_VIEW_WRAPPER);
    };
    MultiSelect2.prototype.expandTextbox = function() {
      var size = 5;
      if (this.placeholder) {
        var codePoint = this.placeholder.charCodeAt(0);
        var sizeMultiplier = 44032 <= codePoint && codePoint <= 55215 ? 1.5 : 19968 <= codePoint && codePoint <= 40959 ? 2 : 1;
        size = size > this.inputElement.placeholder.length ? size : this.inputElement.placeholder.length * sizeMultiplier;
      }
      if (this.inputElement.value.length > size) {
        this.inputElement.size = this.inputElement.value.length;
      } else {
        this.inputElement.size = size;
      }
    };
    MultiSelect2.prototype.isPopupOpen = function() {
      return this.popupWrapper !== null && this.popupWrapper.parentElement !== null;
    };
    MultiSelect2.prototype.refreshPopup = function() {
      if (this.popupObj && this.mobFilter) {
        this.popupObj.setProperties({
          width: this.calcPopupWidth()
        });
        this.popupObj.refreshPosition(this.overAllWrapper);
        this.popupObj.resolveCollision();
      }
    };
    MultiSelect2.prototype.checkTextLength = function() {
      return this.targetElement().length < 1;
    };
    MultiSelect2.prototype.popupKeyActions = function(e) {
      switch (e.keyCode) {
        case 38:
          this.hidePopup(e);
          if (this.mode === "CheckBox") {
            this.inputElement.focus();
          }
          e.preventDefault();
          break;
        case 40:
          if (!this.isPopupOpen()) {
            this.showPopup(e);
            e.preventDefault();
          }
          break;
      }
    };
    MultiSelect2.prototype.updatePopupPosition = function() {
      this.refreshPopup();
    };
    MultiSelect2.prototype.updateAriaAttribute = function() {
      var focusedItem = this.list.querySelector("." + dropDownBaseClasses.focus);
      if (!isNullOrUndefined(focusedItem)) {
        this.inputElement.setAttribute("aria-activedescendant", focusedItem.id);
        if (this.allowFiltering) {
          var filterInput2 = this.popupWrapper.querySelector("." + FILTERINPUT);
          if (filterInput2) {
            filterInput2.setAttribute("aria-activedescendant", focusedItem.id);
          }
        } else if (this.mode === "CheckBox") {
          this.overAllWrapper.setAttribute("aria-activedescendant", focusedItem.id);
        }
      }
    };
    MultiSelect2.prototype.homeNavigation = function(isHome, isVirtualKeyAction) {
      this.removeFocus();
      if (this.enableVirtualization) {
        if (isHome) {
          if (this.enableVirtualization && this.viewPortInfo.startIndex !== 0) {
            this.viewPortInfo.startIndex = 0;
            this.viewPortInfo.endIndex = this.itemCount;
            this.updateVirtualItemIndex();
            this.resetList(this.dataSource, this.fields, this.query);
          }
        } else {
          if (this.enableVirtualization && (!this.value && this.viewPortInfo.endIndex !== this.totalItemCount || this.value && this.value.length > 0 && this.viewPortInfo.endIndex !== this.totalItemCount + this.value.length)) {
            this.viewPortInfo.startIndex = this.totalItemCount - this.itemCount;
            this.viewPortInfo.endIndex = this.totalItemCount;
            this.updateVirtualItemIndex();
            var query = new Query().clone();
            if (this.value && this.value.length > 0) {
              query = this.getForQuery(this.value).clone();
              query = query.skip(this.totalItemCount - this.itemCount);
            }
            this.resetList(this.dataSource, this.fields, query);
          }
        }
      }
      this.UpdateSkeleton();
      var scrollEle = this.ulElement.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)");
      if (scrollEle.length > 0) {
        var element = scrollEle[isHome ? 0 : scrollEle.length - 1];
        if (this.enableVirtualization && isHome) {
          element = scrollEle[this.skeletonCount];
        }
        this.removeFocus();
        element.classList.add(dropDownBaseClasses.focus);
        if (this.enableVirtualization && isHome) {
          this.scrollTop(element, void 0, this.keyboardEvent.keyCode);
        } else if (!isVirtualKeyAction) {
          this.scrollBottom(element, void 0, false, this.keyboardEvent.keyCode);
        }
        this.updateAriaActiveDescendant();
      }
    };
    MultiSelect2.prototype.updateSelectionList = function() {
      if (!isNullOrUndefined(this.value) && this.value.length) {
        for (var index = 0; index < this.value.length; index++) {
          var value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value[index]) : this.value[index];
          var selectedItem = this.getElementByValue(value);
          if (selectedItem && !selectedItem.classList.contains(dropDownBaseClasses.selected)) {
            selectedItem.classList.add("e-active");
          }
        }
      }
    };
    MultiSelect2.prototype.handleVirtualKeyboardActions = function(e, pageCount) {
      var focusedItem = this.list.querySelector("." + dropDownBaseClasses.focus);
      var activeIndex;
      this.isKeyBoardAction = true;
      switch (e.keyCode) {
        case 40:
          this.arrowDown(e, true);
          break;
        case 38:
          this.arrowUp(e, true);
          break;
        case 33:
          e.preventDefault();
          if (focusedItem) {
            activeIndex = this.getIndexByValue(this.previousFocusItem.getAttribute("data-value")) - 1;
            this.pageUpSelection(activeIndex, true);
            this.updateAriaAttribute();
          }
          break;
        case 34:
          e.preventDefault();
          if (focusedItem) {
            activeIndex = this.getIndexByValue(this.previousFocusItem.getAttribute("data-value"));
            this.pageDownSelection(activeIndex, true);
            this.updateAriaAttribute();
          }
          break;
        case 35:
        case 36:
          this.isMouseScrollAction = true;
          this.homeNavigation(e.keyCode === 36 ? true : false, true);
          this.isPreventScrollAction = true;
          break;
      }
      this.keyboardEvent = null;
      this.isScrollChanged = true;
      this.isKeyBoardAction = false;
    };
    MultiSelect2.prototype.onKeyDown = function(e) {
      if (this.readonly || !this.enabled && this.mode !== "CheckBox") {
        return;
      }
      this.preventSetCurrentData = false;
      this.keyboardEvent = e;
      if (this.isPreventKeyAction && this.enableVirtualization) {
        e.preventDefault();
      }
      this.keyCode = e.keyCode;
      this.keyDownStatus = true;
      if (e.keyCode > 111 && e.keyCode < 124) {
        return;
      }
      if (e.altKey) {
        this.popupKeyActions(e);
        return;
      } else if (this.isPopupOpen()) {
        var focusedItem = this.list.querySelector("." + dropDownBaseClasses.focus);
        var activeIndex = void 0;
        switch (e.keyCode) {
          case 36:
          case 35:
            this.isMouseScrollAction = true;
            this.isKeyBoardAction = true;
            this.homeNavigation(e.keyCode === 36 ? true : false);
            break;
          case 33:
            e.preventDefault();
            if (focusedItem) {
              activeIndex = this.getIndexByValue(focusedItem.getAttribute("data-value"));
              this.pageUpSelection(activeIndex - this.getPageCount() - 1);
              this.updateAriaAttribute();
            }
            return;
          case 34:
            e.preventDefault();
            if (focusedItem) {
              activeIndex = this.getIndexByValue(focusedItem.getAttribute("data-value"));
              this.pageDownSelection(activeIndex + this.getPageCount());
              this.updateAriaAttribute();
            }
            return;
          case 38:
            this.isKeyBoardAction = true;
            this.arrowUp(e);
            break;
          case 40:
            this.isKeyBoardAction = true;
            this.arrowDown(e);
            break;
          case 27:
            e.preventDefault();
            this.isKeyBoardAction = true;
            this.hidePopup(e);
            if (this.mode === "CheckBox") {
              this.inputElement.focus();
            }
            this.isKeyBoardAction = false;
            return;
          case 13:
            e.preventDefault();
            this.isKeyBoardAction = true;
            if (this.mode !== "CheckBox") {
              this.selectByKey(e);
            }
            this.checkPlaceholderSize();
            this.isKeyBoardAction = false;
            return;
          case 32:
            this.isKeyBoardAction = true;
            this.spaceKeySelection(e);
            this.isKeyBoardAction = false;
            return;
          case 9:
            e.preventDefault();
            this.isKeyBoardAction = true;
            this.hidePopup(e);
            this.inputElement.focus();
            this.overAllWrapper.classList.add(FOCUS);
        }
      } else {
        switch (e.keyCode) {
          case 13:
          case 9:
          case 16:
          case 17:
          case 20:
            return;
          case 40:
            if (this.openOnClick) {
              this.showPopup();
            }
            break;
          case 27:
            e.preventDefault();
            this.escapeAction();
            return;
        }
      }
      if (this.checkTextLength()) {
        this.keyNavigation(e);
      }
      if (this.mode === "CheckBox" && this.enableSelectionOrder) {
        if (this.allowFiltering) {
          this.previousFilterText = this.targetElement();
        }
        this.checkBackCommand(e);
      }
      this.expandTextbox();
      if (!(this.mode === "CheckBox" && this.showSelectAll)) {
        this.refreshPopup();
      }
      if (this.allowResize) {
        this.setResize();
      }
      this.isKeyBoardAction = false;
    };
    MultiSelect2.prototype.arrowDown = function(e, isVirtualKeyAction) {
      e.preventDefault();
      this.moveByList(1, isVirtualKeyAction);
      this.keyAction = true;
      if (document.activeElement.classList.contains(FILTERINPUT) || this.mode === "CheckBox" && !this.allowFiltering && document.activeElement !== this.list) {
        EventHandler.add(this.list, "keydown", this.onKeyDown, this);
      }
      this.updateAriaAttribute();
    };
    MultiSelect2.prototype.arrowUp = function(e, isVirtualKeyAction) {
      e.preventDefault();
      this.keyAction = true;
      var list = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)");
      if (this.enableGroupCheckBox && this.mode === "CheckBox" && !isNullOrUndefined(this.fields.groupBy)) {
        list = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ",li." + dropDownBaseClasses.group + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)");
      }
      var focuseElem = this.list.querySelector("li." + dropDownBaseClasses.focus);
      this.focusFirstListItem = !isNullOrUndefined(this.liCollections[0]) ? this.liCollections[0].classList.contains("e-item-focus") : false;
      var index = Array.prototype.slice.call(list).indexOf(focuseElem);
      if (index <= 0 && this.mode === "CheckBox" && this.allowFiltering) {
        this.keyAction = false;
        this.notify("inputFocus", {
          module: "CheckBoxSelection",
          enable: this.mode === "CheckBox",
          value: "focus"
        });
      }
      this.moveByList(-1, isVirtualKeyAction);
      this.updateAriaAttribute();
    };
    MultiSelect2.prototype.spaceKeySelection = function(e) {
      if (this.mode === "CheckBox") {
        var li = this.list.querySelector("li." + dropDownBaseClasses.focus);
        var selectAllParent = document.getElementsByClassName("e-selectall-parent")[0];
        if (!isNullOrUndefined(li) || selectAllParent && selectAllParent.classList.contains("e-item-focus")) {
          e.preventDefault();
          this.keyAction = true;
        }
        this.selectByKey(e);
        if (this.keyAction) {
          var li_1 = this.list.querySelector("li." + dropDownBaseClasses.focus);
          if (!isNullOrUndefined(li_1) && selectAllParent && selectAllParent.classList.contains("e-item-focus")) {
            li_1.classList.remove("e-item-focus");
          }
        }
      }
      this.checkPlaceholderSize();
    };
    MultiSelect2.prototype.checkBackCommand = function(e) {
      if (e.keyCode === 8 && this.allowFiltering ? this.targetElement() !== this.previousFilterText : this.targetElement() === "") {
        this.backCommand = false;
      } else {
        this.backCommand = true;
      }
    };
    MultiSelect2.prototype.keyNavigation = function(e) {
      if (this.mode !== "Delimiter" && this.mode !== "CheckBox" && this.value && this.value.length) {
        switch (e.keyCode) {
          case 37:
            e.preventDefault();
            this.moveBy(-1, e);
            break;
          case 39:
            e.preventDefault();
            this.moveBy(1, e);
            break;
          case 8:
            this.removelastSelection(e);
            break;
          case 46:
            this.removeSelectedChip(e);
            break;
        }
      } else if (e.keyCode === 8 && this.mode === "Delimiter") {
        if (this.value && this.value.length) {
          e.preventDefault();
          var temp = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value[this.value.length - 1]) : this.value[this.value.length - 1];
          this.removeValue(this.value[this.value.length - 1], e);
          this.updateDelimeter(this.delimiterChar, e);
          this.focusAtLastListItem(temp);
        }
      }
    };
    MultiSelect2.prototype.selectByKey = function(e) {
      this.removeChipSelection();
      this.selectListByKey(e);
      if (this.hideSelectedItem) {
        this.focusAtFirstListItem();
      }
    };
    MultiSelect2.prototype.escapeAction = function() {
      var temp = this.tempValues ? this.tempValues.slice() : [];
      if (this.allowObjectBinding) {
        temp = this.tempValues ? this.tempValues.slice() : [];
      }
      if (this.value && this.validateValues(this.value, temp)) {
        if (this.mode !== "CheckBox") {
          this.value = temp;
          if (this.allowFiltering || this.allowCustomValue) {
            this.refreshListItems(null);
          }
          this.initialValueUpdate();
        }
        if (this.mode !== "Delimiter" && this.mode !== "CheckBox") {
          this.chipCollectionWrapper.style.display = "";
        } else {
          this.showDelimWrapper();
        }
        this.refreshPlaceHolder();
        if (this.value.length) {
          this.showOverAllClear();
        } else {
          this.hideOverAllClear();
        }
      }
      this.makeTextBoxEmpty();
    };
    MultiSelect2.prototype.scrollBottom = function(selectedLI, activeIndex, isInitialSelection, keyCode, isInitial) {
      if (isInitialSelection === void 0) {
        isInitialSelection = false;
      }
      if (keyCode === void 0) {
        keyCode = null;
      }
      if (isInitial === void 0) {
        isInitial = false;
      }
      if (!isNullOrUndefined(selectedLI) && selectedLI.classList.contains("e-virtual-list") || this.enableVirtualization && isNullOrUndefined(selectedLI)) {
        selectedLI = this.liCollections[this.skeletonCount];
      }
      var selectedListMargin = selectedLI && !isNaN(parseInt(window.getComputedStyle(selectedLI).marginBottom, 10)) ? parseInt(window.getComputedStyle(selectedLI).marginBottom, 10) : 0;
      this.isUpwardScrolling = false;
      var virtualListCount = this.list.querySelectorAll(".e-virtual-list:not(.e-virtual-list-end)").length;
      var liItems = this.list.querySelectorAll("li:not(.e-virtual-list-end)");
      var lastElementValue = liItems && liItems.length > 0 && liItems[liItems.length - 1] ? liItems[liItems.length - 1].getAttribute("data-value") : null;
      var selectedLiOffsetTop = this.virtualListInfo && this.virtualListInfo.startIndex ? selectedLI.offsetTop + this.virtualListInfo.startIndex * (selectedLI.offsetHeight + selectedListMargin) : selectedLI.offsetTop;
      var currentOffset = this.list.offsetHeight;
      var nextBottom = selectedLiOffsetTop - virtualListCount * (selectedLI.offsetHeight + selectedListMargin) + (selectedLI.offsetHeight + selectedListMargin) - this.list.scrollTop;
      var nextOffset = this.list.scrollTop + nextBottom - currentOffset;
      var isScrollerCHanged = false;
      var isScrollTopChanged = false;
      var boxRange = selectedLiOffsetTop - virtualListCount * (selectedLI.offsetHeight + selectedListMargin) + (selectedLI.offsetHeight + selectedListMargin) - this.list.scrollTop;
      boxRange = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? boxRange - this.fixedHeaderElement.offsetHeight : boxRange;
      if (activeIndex === 0 && !this.enableVirtualization) {
        this.list.scrollTop = 0;
      } else if (nextBottom > currentOffset || !(boxRange > 0 && this.list.offsetHeight > boxRange)) {
        var currentElementValue = selectedLI ? selectedLI.getAttribute("data-value") : null;
        var liCount = keyCode === 34 ? this.getPageCount() - 1 : 1;
        if (!this.enableVirtualization || this.isKeyBoardAction || isInitialSelection) {
          if (this.isKeyBoardAction && this.enableVirtualization && lastElementValue && currentElementValue === lastElementValue && keyCode !== 35 && !this.isVirtualScrolling) {
            this.isPreventKeyAction = true;
            this.list.scrollTop += (selectedLI.offsetHeight + selectedListMargin) * liCount;
            this.isPreventKeyAction = this.isScrollerAtEnd() ? false : this.isPreventKeyAction;
            this.isKeyBoardAction = false;
            this.isPreventScrollAction = false;
          } else if (this.enableVirtualization && keyCode === 35) {
            this.isPreventKeyAction = false;
            this.isKeyBoardAction = false;
            this.isPreventScrollAction = false;
            this.list.scrollTop = this.list.scrollHeight;
          } else {
            if (keyCode === 34 && this.enableVirtualization && !this.isVirtualScrolling) {
              this.isPreventKeyAction = false;
              this.isKeyBoardAction = false;
              this.isPreventScrollAction = false;
            }
            this.list.scrollTop = nextOffset;
          }
        } else {
          this.list.scrollTop = this.virtualListInfo && this.virtualListInfo.startIndex ? isInitial && this.virtualListInfo.startIndex ? this.virtualListInfo.startIndex * this.listItemHeight + this.listItemHeight * 2 : this.virtualListInfo.startIndex * this.listItemHeight : 0;
        }
        isScrollerCHanged = this.isKeyBoardAction;
        isScrollTopChanged = true;
      }
      this.isKeyBoardAction = isScrollerCHanged;
    };
    MultiSelect2.prototype.scrollTop = function(selectedLI, activeIndex, keyCode) {
      if (keyCode === void 0) {
        keyCode = null;
      }
      var virtualListCount = this.list.querySelectorAll(".e-virtual-list:not(.e-virtual-list-end)").length;
      var selectedListMargin = selectedLI && !isNaN(parseInt(window.getComputedStyle(selectedLI).marginBottom, 10)) ? parseInt(window.getComputedStyle(selectedLI).marginBottom, 10) : 0;
      var selectedLiOffsetTop = this.virtualListInfo && this.virtualListInfo.startIndex ? selectedLI.offsetTop + this.virtualListInfo.startIndex * (selectedLI.offsetHeight + selectedListMargin) : selectedLI.offsetTop;
      var nextOffset = selectedLiOffsetTop - virtualListCount * (selectedLI.offsetHeight + selectedListMargin) - this.list.scrollTop;
      var firstElementValue = this.list.querySelector("li.e-list-item:not(.e-virtual-list)") ? this.list.querySelector("li.e-list-item:not(.e-virtual-list)").getAttribute("data-value") : null;
      nextOffset = this.fields.groupBy && !isUndefined(this.fixedHeaderElement) ? nextOffset - this.fixedHeaderElement.offsetHeight : nextOffset;
      var boxRange = selectedLiOffsetTop - virtualListCount * (selectedLI.offsetHeight + selectedListMargin) + (selectedLI.offsetHeight + selectedListMargin) - this.list.scrollTop;
      var isPageUpKeyAction = this.enableVirtualization && this.getModuleName() === "autocomplete" && nextOffset <= 0;
      if (activeIndex === 0 && !this.enableVirtualization) {
        this.list.scrollTop = 0;
      } else if (nextOffset < 0 || isPageUpKeyAction) {
        var currentElementValue = selectedLI ? selectedLI.getAttribute("data-value") : null;
        var liCount = keyCode === 33 ? this.getPageCount() - 2 : 1;
        if (this.enableVirtualization && this.isKeyBoardAction && firstElementValue && currentElementValue === firstElementValue && keyCode !== 36 && !this.isVirtualScrolling) {
          this.isUpwardScrolling = true;
          this.isPreventKeyAction = true;
          this.isKeyBoardAction = false;
          this.list.scrollTop -= (selectedLI.offsetHeight + selectedListMargin) * liCount;
          this.isPreventKeyAction = this.list.scrollTop !== 0 ? this.isPreventKeyAction : false;
          this.isPreventScrollAction = false;
        } else if (this.enableVirtualization && keyCode === 36) {
          this.isPreventScrollAction = false;
          this.isPreventKeyAction = true;
          this.isKeyBoardAction = false;
          this.list.scrollTo(0, 0);
        } else {
          if (keyCode === 33 && this.enableVirtualization && !this.isVirtualScrolling) {
            this.isPreventKeyAction = false;
            this.isKeyBoardAction = false;
            this.isPreventScrollAction = false;
          }
          this.list.scrollTop = this.list.scrollTop + nextOffset;
        }
      } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {
        this.list.scrollTop = selectedLI.offsetTop - (this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? this.fixedHeaderElement.offsetHeight : 0);
      }
    };
    MultiSelect2.prototype.isScrollerAtEnd = function() {
      return this.list && this.list.scrollTop + this.list.clientHeight >= this.list.scrollHeight;
    };
    MultiSelect2.prototype.selectListByKey = function(e) {
      var li = this.list.querySelector("li." + dropDownBaseClasses.focus);
      var limit = this.value && this.value.length ? this.value.length : 0;
      var target;
      if (li !== null) {
        e.preventDefault();
        if (li.classList.contains("e-active")) {
          limit = limit - 1;
        }
        if (this.isValidLI(li) && limit < this.maximumSelectionLength) {
          this.updateListSelection(li, e);
          this.addListFocus(li);
          if (this.mode === "CheckBox") {
            this.updateDelimView();
            this.updateDelimeter(this.delimiterChar, e);
            this.refreshInputHight();
            this.checkPlaceholderSize();
            if (this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {
              target = li.firstElementChild.lastElementChild;
              this.findGroupStart(target);
              this.deselectHeader();
            }
          } else {
            this.updateDelimeter(this.delimiterChar, e);
          }
          var isFilterData = this.targetElement().trim() !== "" ? true : false;
          this.makeTextBoxEmpty();
          if (this.mode !== "CheckBox") {
            this.refreshListItems(li.textContent, isFilterData);
          }
          if (!this.changeOnBlur) {
            this.updateValueState(e, this.value, this.tempValues);
          }
          this.refreshPopup();
        } else {
          if (!this.isValidLI(li) && limit < this.maximumSelectionLength) {
            target = li.firstElementChild.lastElementChild;
            if (target.classList.contains("e-check")) {
              this.selectAllItem(false, e, li);
            } else {
              this.selectAllItem(true, e, li);
            }
          }
        }
        this.refreshSelection();
        if (this.closePopupOnSelect) {
          this.hidePopup(e);
        }
      }
      var selectAllParent = document.getElementsByClassName("e-selectall-parent")[0];
      if (selectAllParent && selectAllParent.classList.contains("e-item-focus")) {
        var selectAllCheckBox = selectAllParent.childNodes[0];
        if (!selectAllCheckBox.classList.contains("e-check")) {
          selectAllCheckBox.classList.add("e-check");
          var args = {
            module: "CheckBoxSelection",
            enable: this.mode === "CheckBox",
            value: "check",
            name: "checkSelectAll"
          };
          this.notify("checkSelectAll", args);
          this.selectAllItem(true, e, li);
        } else {
          selectAllCheckBox.classList.remove("e-check");
          var args = {
            module: "CheckBoxSelection",
            enable: this.mode === "CheckBox",
            value: "check",
            name: "checkSelectAll"
          };
          this.notify("checkSelectAll", args);
          this.selectAllItem(false, e, li);
        }
      }
      this.refreshPlaceHolder();
    };
    MultiSelect2.prototype.refreshListItems = function(data, isFilterData) {
      if ((this.allowFiltering || this.mode === "CheckBox" && this.enableSelectionOrder === true || this.allowCustomValue) && this.mainList && this.listData) {
        var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
        if (this.enableVirtualization) {
          if (this.allowCustomValue && this.virtualCustomData && data == null && this.virtualCustomData && this.viewPortInfo && this.viewPortInfo.startIndex === 0 && this.viewPortInfo.endIndex === this.itemCount) {
            this.virtualCustomData = null;
            this.renderItems(this.mainData, this.fields);
          } else {
            if (this.allowFiltering && isFilterData) {
              this.updateInitialData();
              this.onActionComplete(list, this.mainData);
              this.isVirtualTrackHeight = false;
              if (this.list.getElementsByClassName("e-virtual-ddl")[0]) {
                this.list.getElementsByClassName("e-virtual-ddl")[0].style = this.GetVirtualTrackHeight();
              } else if (!this.list.querySelector(".e-virtual-ddl") && this.skeletonCount > 0) {
                var virualElement = this.createElement("div", {
                  id: this.element.id + "_popup",
                  className: "e-virtual-ddl"
                });
                virualElement.style.cssText = this.GetVirtualTrackHeight();
                this.popupWrapper.querySelector(".e-dropdownbase").appendChild(virualElement);
              }
            } else {
              this.onActionComplete(this.list, this.listData);
            }
          }
        } else {
          this.onActionComplete(list, this.mainData);
        }
        this.focusAtLastListItem(data);
        if (this.value && this.value.length) {
          this.refreshSelection();
        }
      } else if (!isNullOrUndefined(this.fields.groupBy) && this.value && this.value.length) {
        this.refreshSelection();
      }
    };
    MultiSelect2.prototype.removeSelectedChip = function(e) {
      var selectedElem = this.chipCollectionWrapper.querySelector("span." + CHIP_SELECTED);
      var temp;
      if (selectedElem !== null) {
        if (!isNullOrUndefined(this.value)) {
          this.tempValues = this.allowObjectBinding ? this.value.slice() : this.value.slice();
        }
        temp = selectedElem.nextElementSibling;
        if (temp !== null) {
          this.removeChipSelection();
          this.addChipSelection(temp, e);
        }
        var currentChip = this.allowObjectBinding ? this.getDataByValue(this.getFormattedValue(selectedElem.getAttribute("data-value"))) : selectedElem.getAttribute("data-value");
        this.removeValue(currentChip, e);
        this.updateDelimeter(this.delimiterChar, e);
        this.makeTextBoxEmpty();
      }
      if (this.closePopupOnSelect) {
        this.hidePopup(e);
      }
      this.checkPlaceholderSize();
    };
    MultiSelect2.prototype.moveByTop = function(state) {
      var elements = this.list.querySelectorAll("li." + dropDownBaseClasses.li);
      var index;
      if (elements.length > 1) {
        this.removeFocus();
        index = state ? 0 : elements.length - 1;
        this.addListFocus(elements[index]);
        this.scrollBottom(elements[index], index);
      }
      this.updateAriaAttribute();
    };
    MultiSelect2.prototype.clickHandler = function(e) {
      var targetElement = e.target;
      var filterInputClassName = targetElement.className;
      var selectAllParent = document.getElementsByClassName("e-selectall-parent")[0];
      if ((filterInputClassName === "e-input-filter e-input" || filterInputClassName === "e-input-group e-control-wrapper e-input-focus") && selectAllParent.classList.contains("e-item-focus")) {
        selectAllParent.classList.remove("e-item-focus");
      }
    };
    MultiSelect2.prototype.moveByList = function(position, isVirtualKeyAction) {
      if (this.list) {
        var elements = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide):not(.e-virtual-list-end)");
        if (this.mode === "CheckBox" && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {
          elements = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ",li." + dropDownBaseClasses.group + ":not(." + HIDE_LIST + "):not(.e-reorder-hide):not(.e-virtual-list-end)");
        }
        var selectedElem = this.list.querySelector("li." + dropDownBaseClasses.focus);
        if (this.enableVirtualization && isVirtualKeyAction && !isNullOrUndefined(this.currentFocuedListElement)) {
          selectedElem = this.getElementByValue(this.getFormattedValue(this.currentFocuedListElement.getAttribute("data-value")));
        }
        var temp = -1;
        var selectAllParent = document.getElementsByClassName("e-selectall-parent")[0];
        if (this.mode === "CheckBox" && this.showSelectAll && position === 1 && !isNullOrUndefined(selectAllParent) && !selectAllParent.classList.contains("e-item-focus") && this.list.getElementsByClassName("e-item-focus").length === 0 && this.liCollections.length > 1) {
          if (!this.focusFirstListItem && selectAllParent.classList.contains("e-item-focus")) {
            selectAllParent.classList.remove("e-item-focus");
          } else if (!selectAllParent.classList.contains("e-item-focus")) {
            selectAllParent.classList.add("e-item-focus");
          }
        } else if (elements.length) {
          if (this.mode === "CheckBox" && this.showSelectAll && !isNullOrUndefined(selectAllParent && position === -1)) {
            if (!this.focusFirstListItem && selectAllParent.classList.contains("e-item-focus")) {
              selectAllParent.classList.remove("e-item-focus");
            } else if (this.focusFirstListItem && !selectAllParent.classList.contains("e-item-focus")) {
              selectAllParent.classList.add("e-item-focus");
            }
          }
          for (var index = 0; index < elements.length; index++) {
            if (elements[index] === selectedElem) {
              temp = index;
              break;
            }
          }
          if (position > 0) {
            if (temp < elements.length - 1) {
              this.removeFocus();
              if (this.enableVirtualization && isVirtualKeyAction) {
                this.addListFocus(elements[temp]);
              } else {
                if (this.enableVirtualization && elements[temp + 1].classList.contains("e-virtual-list")) {
                  this.addListFocus(elements[this.skeletonCount]);
                } else {
                  this.addListFocus(elements[++temp]);
                }
              }
              if (temp > -1) {
                this.updateCheck(elements[temp]);
                this.scrollBottom(elements[temp], temp);
                this.currentFocuedListElement = elements[temp];
              }
            }
          } else {
            if (temp > 0) {
              if (this.enableVirtualization) {
                var isVirtualElement = elements[temp - 1].classList.contains("e-virtual-list");
                var elementIndex = isVirtualKeyAction ? temp : temp - 1;
                if (isVirtualKeyAction || !isVirtualElement) {
                  this.removeFocus();
                }
                if (isVirtualKeyAction || !isVirtualElement) {
                  this.addListFocus(elements[elementIndex]);
                  this.updateCheck(elements[elementIndex]);
                  this.scrollTop(elements[elementIndex], temp);
                  this.currentFocuedListElement = elements[elementIndex];
                }
              } else {
                this.removeFocus();
                this.addListFocus(elements[--temp]);
                this.updateCheck(elements[temp]);
                this.scrollTop(elements[temp], temp);
              }
            }
          }
        }
      }
      var focusedLi = this.list ? this.list.querySelector(".e-item-focus") : null;
      if (this.isDisabledElement(focusedLi)) {
        if (this.list.querySelectorAll(".e-list-item:not(.e-hide-listitem):not(.e-disabled)").length === 0 || this.keyCode === 38 && this.mode === "CheckBox" && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy) && focusedLi === this.list.querySelector("li.e-list-group-item")) {
          this.removeFocus();
          return;
        }
        var index = this.getIndexByValue(focusedLi.getAttribute("data-value"));
        if (index === 0) {
          position = 1;
        }
        if (index === this.list.querySelectorAll(".e-list-item:not(.e-hide-listitem)").length - 1) {
          position = -1;
        }
        this.moveByList(position);
      }
    };
    MultiSelect2.prototype.getElementByValue = function(value) {
      var item;
      var listItems = this.getItems();
      for (var _i = 0, listItems_1 = listItems; _i < listItems_1.length; _i++) {
        var liItem = listItems_1[_i];
        if (this.getFormattedValue(liItem.getAttribute("data-value")) === value) {
          item = liItem;
          break;
        }
      }
      return item;
    };
    MultiSelect2.prototype.updateCheck = function(element) {
      if (this.mode === "CheckBox" && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {
        var checkElement = element.firstElementChild.lastElementChild;
        if (checkElement.classList.contains("e-check")) {
          element.classList.add("e-active");
        } else {
          element.classList.remove("e-active");
        }
      }
    };
    MultiSelect2.prototype.moveBy = function(position, e) {
      var temp;
      var elements = this.chipCollectionWrapper.querySelectorAll("span." + CHIP2);
      var selectedElem = this.chipCollectionWrapper.querySelector("span." + CHIP_SELECTED);
      if (selectedElem === null) {
        if (position < 0) {
          this.addChipSelection(elements[elements.length - 1], e);
        }
      } else {
        if (position < 0) {
          temp = selectedElem.previousElementSibling;
          if (temp !== null) {
            this.removeChipSelection();
            this.addChipSelection(temp, e);
          }
        } else {
          temp = selectedElem.nextElementSibling;
          this.removeChipSelection();
          if (temp !== null) {
            this.addChipSelection(temp, e);
          }
        }
      }
    };
    MultiSelect2.prototype.chipClick = function(e) {
      if (this.enabled) {
        var elem = closest(e.target, "." + CHIP2);
        this.removeChipSelection();
        this.addChipSelection(elem, e);
      }
    };
    MultiSelect2.prototype.removeChipSelection = function() {
      if (this.chipCollectionWrapper) {
        this.removeChipFocus();
      }
    };
    MultiSelect2.prototype.addChipSelection = function(element, e) {
      addClass([element], CHIP_SELECTED);
      this.trigger("chipSelection", e);
    };
    MultiSelect2.prototype.onChipRemove = function(e) {
      if (e.which === 3 || e.button === 2) {
        return;
      }
      if (this.enabled && !this.readonly) {
        var element = e.target.parentElement;
        var customVal = element.getAttribute("data-value");
        var value = this.allowObjectBinding ? this.getDataByValue(this.getFormattedValue(customVal)) : this.getFormattedValue(customVal);
        if (this.allowCustomValue && (customVal !== "false" && value === false || !isNullOrUndefined(value) && value.toString() === "NaN")) {
          value = customVal;
        }
        if (this.isPopupOpen() && this.mode !== "CheckBox") {
          this.hidePopup(e);
        }
        if (!this.inputFocus) {
          this.inputElement.focus();
        }
        this.removeValue(value, e);
        value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", value) : value;
        if (isNullOrUndefined(this.findListElement(this.list, "li", "data-value", value)) && this.mainList && this.listData) {
          var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
          this.onActionComplete(list, this.mainData);
        }
        this.updateDelimeter(this.delimiterChar, e);
        if (this.placeholder && this.floatLabelType === "Never") {
          this.makeTextBoxEmpty();
          this.checkPlaceholderSize();
        } else {
          this.inputElement.value = "";
        }
        e.preventDefault();
      }
    };
    MultiSelect2.prototype.makeTextBoxEmpty = function() {
      this.inputElement.value = "";
      this.refreshPlaceHolder();
    };
    MultiSelect2.prototype.refreshPlaceHolder = function() {
      if (this.placeholder && this.floatLabelType === "Never") {
        if (this.value && this.value.length || !isNullOrUndefined(this.text) && this.text !== "") {
          this.inputElement.placeholder = "";
        } else {
          this.inputElement.placeholder = encodePlaceholder(this.placeholder);
        }
      } else {
        this.setFloatLabelType();
      }
      this.expandTextbox();
    };
    MultiSelect2.prototype.removeAllItems = function(value, eve, isClearAll, element, mainElement) {
      var index = this.allowObjectBinding ? this.indexOfObjectInArray(value, this.value) : this.value.indexOf(value);
      var removeVal = this.value.slice(0);
      removeVal.splice(index, 1);
      this.setProperties({
        value: [].concat([], removeVal)
      }, true);
      element.setAttribute("aria-selected", "false");
      var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
      removeClass([element], className);
      this.notify("activeList", {
        module: "CheckBoxSelection",
        enable: this.mode === "CheckBox",
        li: element,
        e: this,
        index
      });
      this.invokeCheckboxSelection(element, eve, isClearAll);
      var currentValue = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", value) : value;
      this.updateMainList(true, currentValue, mainElement);
      this.updateChipStatus();
    };
    MultiSelect2.prototype.invokeCheckboxSelection = function(element, eve, isClearAll) {
      this.notify("updatelist", {
        module: "CheckBoxSelection",
        enable: this.mode === "CheckBox",
        li: element,
        e: eve
      });
      this.updateAriaActiveDescendant();
      if (this.value && this.value.length !== this.mainData.length && this.mode === "CheckBox" && this.showSelectAll && !(this.isSelectAll || isClearAll)) {
        this.notify("checkSelectAll", {
          module: "CheckBoxSelection",
          enable: this.mode === "CheckBox",
          value: "uncheck"
        });
      }
    };
    MultiSelect2.prototype.removeValue = function(value, eve, length, isClearAll) {
      var _this = this;
      var index = this.allowObjectBinding ? this.indexOfObjectInArray(value, this.value) : this.value.indexOf(this.getFormattedValue(value));
      if (index === -1 && this.allowCustomValue && !isNullOrUndefined(value)) {
        index = this.allowObjectBinding ? this.indexOfObjectInArray(value, this.value) : this.value.indexOf(value.toString());
      }
      var targetEle = eve && eve.target;
      isClearAll = isClearAll || targetEle && targetEle.classList.contains("e-close-hooker") ? true : null;
      var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
      if (index !== -1) {
        var currentValue = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", value) : value;
        var element_1 = this.virtualSelectAll ? null : this.findListElement(this.list, "li", "data-value", currentValue);
        var val_1 = this.allowObjectBinding ? value : this.getDataByValue(value);
        var eventArgs = {
          e: eve,
          item: element_1,
          itemData: val_1,
          isInteracted: eve ? true : false,
          cancel: false
        };
        this.trigger("removing", eventArgs, function(eventArgs2) {
          if (eventArgs2.cancel) {
            _this.removeIndex++;
          } else {
            _this.isRemoveSelection = _this.enableVirtualization ? true : _this.isRemoveSelection;
            _this.currentRemoveValue = _this.allowObjectBinding ? getValue(_this.fields.value ? _this.fields.value : "", value) : value;
            _this.virtualSelectAll = false;
            var removeVal = _this.value.slice(0);
            removeVal.splice(index, 1);
            if (_this.enableVirtualization && _this.mode === "CheckBox") {
              _this.selectedListData.splice(index, 1);
            }
            _this.setProperties({
              value: [].concat([], removeVal)
            }, true);
            if (_this.enableVirtualization) {
              var currentText = index === 0 && _this.text.split(_this.delimiterChar) && _this.text.split(_this.delimiterChar).length === 1 ? _this.text.replace(_this.text.split(_this.delimiterChar)[index], "") : index === 0 ? _this.text.replace(_this.text.split(_this.delimiterChar)[index] + _this.delimiterChar, "") : _this.text.replace(_this.delimiterChar + _this.text.split(_this.delimiterChar)[index], "");
              _this.setProperties({
                text: currentText.toString()
              }, true);
            }
            if (element_1 !== null) {
              var currentValue_1 = _this.allowObjectBinding ? getValue(_this.fields.value ? _this.fields.value : "", value) : value;
              var hideElement = _this.findListElement(_this.mainList, "li", "data-value", currentValue_1);
              element_1.setAttribute("aria-selected", "false");
              removeClass([element_1], className);
              if (hideElement) {
                hideElement.setAttribute("aria-selected", "false");
                removeClass([element_1, hideElement], className);
              }
              _this.notify("activeList", {
                module: "CheckBoxSelection",
                enable: _this.mode === "CheckBox",
                li: element_1,
                e: _this,
                index
              });
              _this.invokeCheckboxSelection(element_1, eve, isClearAll);
            }
            var currentValue_2 = _this.allowObjectBinding ? getValue(_this.fields.value ? _this.fields.value : "", value) : value;
            if (_this.hideSelectedItem && _this.fields.groupBy && element_1) {
              _this.hideGroupItem(currentValue_2);
            }
            if (_this.hideSelectedItem && _this.fixedHeaderElement && _this.fields.groupBy && _this.mode !== "CheckBox" && _this.isPopupOpen()) {
              _super.prototype.scrollStop.call(_this);
            }
            _this.updateMainList(true, currentValue_2);
            _this.removeChip(currentValue_2, isClearAll);
            _this.updateChipStatus();
            var limit = _this.value && _this.value.length ? _this.value.length : 0;
            if (limit < _this.maximumSelectionLength) {
              var collection = _this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-active)");
              removeClass(collection, "e-disable");
            }
            _this.trigger("removed", eventArgs2);
            var targetEle_1 = eve && eve.currentTarget;
            var isSelectAll = targetEle_1 && targetEle_1.classList.contains("e-selectall-parent") ? true : null;
            if (!_this.changeOnBlur && !isClearAll && eve && length && !isSelectAll && _this.isSelectAllTarget) {
              _this.updateValueState(eve, _this.value, _this.tempValues);
            }
            if (length) {
              _this.selectAllEventData.push(val_1);
              _this.selectAllEventEle.push(element_1);
            }
            if (length === 1) {
              if (!_this.changeOnBlur) {
                _this.updateValueState(eve, _this.value, _this.tempValues);
              }
              var args = {
                event: eve,
                items: _this.selectAllEventEle,
                itemData: _this.selectAllEventData,
                isInteracted: eve ? true : false,
                isChecked: false
              };
              _this.trigger("selectedAll", args);
              _this.selectAllEventData = [];
              _this.selectAllEventEle = [];
            }
            if (isClearAll && (length === 1 || length === null)) {
              _this.clearAllCallback(eve, isClearAll);
            }
            if (_this.isPopupOpen() && element_1 && element_1.parentElement.classList.contains("e-reorder")) {
              if (_this.hideSelectedItem && _this.value && Array.isArray(_this.value) && _this.value.length > 0) {
                _this.totalItemsCount();
              }
              _this.notify("setCurrentViewDataAsync", {
                module: "VirtualScroll"
              });
            }
          }
        });
      }
    };
    MultiSelect2.prototype.updateMainList = function(state, value, mainElement) {
      if (this.allowFiltering || this.mode === "CheckBox") {
        var element2 = mainElement ? mainElement : this.findListElement(this.mainList, "li", "data-value", value);
        if (element2) {
          if (state) {
            element2.setAttribute("aria-selected", "false");
            removeClass([element2], this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected);
            if (this.mode === "CheckBox") {
              removeClass([element2.firstElementChild.lastElementChild], "e-check");
            }
          } else {
            element2.setAttribute("aria-selected", "true");
            addClass([element2], this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected);
            if (this.mode === "CheckBox") {
              addClass([element2.firstElementChild.lastElementChild], "e-check");
            }
          }
        }
      }
    };
    MultiSelect2.prototype.removeChip = function(value, isClearAll) {
      if (this.chipCollectionWrapper) {
        if (!(this.enableVirtualization && isClearAll)) {
          var element = this.findListElement(this.chipCollectionWrapper, "span", "data-value", value);
          if (element) {
            remove(element);
          }
        }
      }
    };
    MultiSelect2.prototype.setWidth = function(width) {
      if (!isNullOrUndefined(width)) {
        if (typeof width === "number") {
          this.overAllWrapper.style.width = formatUnit(width);
        } else if (typeof width === "string") {
          this.overAllWrapper.style.width = width.match(/px|%|em/) ? width : formatUnit(width);
        }
      }
    };
    MultiSelect2.prototype.updateChipStatus = function() {
      if (this.value && this.value.length) {
        if (!isNullOrUndefined(this.chipCollectionWrapper)) {
          this.chipCollectionWrapper.style.display = "";
        }
        if (this.mode === "Delimiter" || this.mode === "CheckBox") {
          this.showDelimWrapper();
        }
        this.showOverAllClear();
      } else {
        if (!isNullOrUndefined(this.chipCollectionWrapper)) {
          this.chipCollectionWrapper.style.display = "none";
        }
        if (!isNullOrUndefined(this.delimiterWrapper)) {
          this.delimiterWrapper.style.display = "none";
        }
        this.hideOverAllClear();
      }
    };
    MultiSelect2.prototype.indexOfObjectInArray = function(objectToFind, array) {
      var _loop_1 = function(i2) {
        var item = array[i2];
        if (Object.keys(objectToFind).every(function(key) {
          return item.hasOwnProperty(key) && item[key] === objectToFind[key];
        })) {
          return {
            value: i2
          };
        }
      };
      for (var i = 0; i < array.length; i++) {
        var state_1 = _loop_1(i);
        if (typeof state_1 === "object") return state_1.value;
      }
      return -1;
    };
    MultiSelect2.prototype.addValue = function(value, text, eve) {
      if (!this.value) {
        this.value = [];
      }
      var currentValue = this.allowObjectBinding ? this.getDataByValue(value) : value;
      if (this.allowObjectBinding && !this.isObjectInArray(this.getDataByValue(value), this.value) || !this.allowObjectBinding && this.value.indexOf(currentValue) < 0) {
        this.setProperties({
          value: [].concat([], this.value, [currentValue])
        }, true);
        if (this.enableVirtualization && !this.isSelectAllLoop) {
          var data = this.viewWrapper.innerHTML;
          var temp = void 0;
          data += this.value.length === 1 ? "" : this.delimiterChar + " ";
          temp = this.getOverflowVal(this.value.length - 1);
          data += temp;
          temp = this.viewWrapper.innerHTML;
          this.updateWrapperText(this.viewWrapper, data);
        }
        if (this.enableVirtualization && this.mode === "CheckBox") {
          var currentText = [];
          var value_1 = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value[this.value.length - 1]) : this.value[this.value.length - 1];
          var temp = text;
          var textValues = this.text != null && this.text !== "" ? this.text + this.delimiterChar + temp : temp;
          currentText.push(textValues);
          this.setProperties({
            text: currentText.toString()
          }, true);
        }
      }
      var element = this.findListElement(this.list, "li", "data-value", value);
      this.removeFocus();
      if (element) {
        this.addListFocus(element);
        this.addListSelection(element);
      }
      if (this.mode !== "Delimiter" && this.mode !== "CheckBox") {
        this.addChip(text, value, eve);
      }
      if (this.hideSelectedItem && this.fields.groupBy) {
        this.hideGroupItem(value);
      }
      this.updateChipStatus();
      this.checkMaxSelection();
    };
    MultiSelect2.prototype.checkMaxSelection = function() {
      var limit = this.value && this.value.length ? this.value.length : 0;
      if (limit === this.maximumSelectionLength) {
        var activeItems = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ".e-active");
        removeClass(activeItems, "e-disable");
        var inactiveItems = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-active)");
        addClass(inactiveItems, "e-disable");
      }
      if (limit < this.maximumSelectionLength) {
        var collection = this.list.querySelectorAll("li." + dropDownBaseClasses.li);
        removeClass(collection, "e-disable");
      }
    };
    MultiSelect2.prototype.dispatchSelect = function(value, eve, element, isNotTrigger, length, dataValue, text) {
      var _this = this;
      var list = this.listData;
      if (this.initStatus && !isNotTrigger) {
        value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", value) : value;
        var val_2 = dataValue ? dataValue : this.getDataByValue(value);
        var eventArgs = {
          e: eve,
          item: element,
          itemData: val_2,
          isInteracted: eve ? true : false,
          cancel: false
        };
        this.trigger("select", eventArgs, function(eventArgs2) {
          if (!eventArgs2.cancel) {
            if (length) {
              _this.selectAllEventData.push(val_2);
              _this.selectAllEventEle.push(element);
            }
            if (length === 1) {
              var args = {
                event: eve,
                items: _this.selectAllEventEle,
                itemData: _this.selectAllEventData,
                isInteracted: eve ? true : false,
                isChecked: true
              };
              _this.trigger("selectedAll", args);
              _this.selectAllEventData = [];
            }
            if (_this.allowCustomValue && _this.isServerRendered && _this.listData !== list) {
              _this.listData = list;
            }
            value = _this.allowObjectBinding ? _this.getDataByValue(value) : value;
            if (_this.enableVirtualization) {
              if (isNullOrUndefined(_this.selectedListData)) {
                _this.selectedListData = [_this.getDataByValue(value)];
              } else {
                if (dataValue) {
                  if (Array.isArray(_this.selectedListData)) {
                    _this.selectedListData.push(dataValue);
                  } else {
                    _this.selectedListData = [_this.selectedListData, dataValue];
                  }
                } else {
                  if (Array.isArray(_this.selectedListData)) {
                    _this.selectedListData.push(_this.getDataByValue(value));
                  } else {
                    _this.selectedListData = [_this.selectedListData, _this.getDataByValue(value)];
                  }
                }
              }
            }
            if (_this.enableVirtualization && value || !_this.enableVirtualization) {
              _this.updateListSelectEventCallback(value, element, eve, text);
            }
            if (_this.hideSelectedItem && _this.fixedHeaderElement && _this.fields.groupBy && _this.mode !== "CheckBox") {
              _super.prototype.scrollStop.call(_this);
            }
          }
        });
      }
    };
    MultiSelect2.prototype.addChip = function(text, value, e) {
      if (this.chipCollectionWrapper) {
        this.getChip(text, value, e);
      }
    };
    MultiSelect2.prototype.removeChipFocus = function() {
      var elements = this.chipCollectionWrapper.querySelectorAll("span." + CHIP2 + "." + CHIP_SELECTED);
      removeClass(elements, CHIP_SELECTED);
      if (Browser.isDevice) {
        var closeElements = this.chipCollectionWrapper.querySelectorAll("span." + CHIP_CLOSE2.split(" ")[0]);
        for (var index = 0; index < closeElements.length; index++) {
          closeElements[index].style.display = "none";
        }
      }
    };
    MultiSelect2.prototype.onMobileChipInteraction = function(e) {
      var chipElem = closest(e.target, "." + CHIP2);
      var chipClose = chipElem.querySelector("span." + CHIP_CLOSE2.split(" ")[0]);
      if (this.enabled && !this.readonly) {
        if (!chipElem.classList.contains(CHIP_SELECTED)) {
          this.removeChipFocus();
          chipClose.style.display = "";
          chipElem.classList.add(CHIP_SELECTED);
        }
        this.refreshPopup();
        e.preventDefault();
      }
    };
    MultiSelect2.prototype.multiCompiler = function(multiselectTemplate) {
      var checkTemplate = false;
      if (typeof multiselectTemplate !== "function" && multiselectTemplate) {
        try {
          checkTemplate = selectAll(multiselectTemplate, document).length ? true : false;
        } catch (exception) {
          checkTemplate = false;
        }
      }
      return checkTemplate;
    };
    MultiSelect2.prototype.encodeHtmlEntities = function(input) {
      return input.replace(/[\u00A0-\u9999<>&]/g, function(match) {
        return "&#" + match.charCodeAt(0) + ";";
      });
    };
    MultiSelect2.prototype.getChip = function(data, value, e) {
      var _this = this;
      var itemData = {
        text: value,
        value
      };
      var chip = this.createElement("span", {
        className: CHIP2,
        attrs: {
          "data-value": value,
          "title": data
        }
      });
      var compiledString;
      var chipContent = this.createElement("span", {
        className: CHIP_CONTENT2
      });
      var chipClose = this.createElement("span", {
        className: CHIP_CLOSE2
      });
      if (this.mainData) {
        itemData = this.getDataByValue(value);
      }
      if (this.valueTemplate && !isNullOrUndefined(itemData)) {
        var valuecheck = this.multiCompiler(this.valueTemplate);
        if (typeof this.valueTemplate !== "function" && valuecheck) {
          compiledString = compile(select(this.valueTemplate, document).innerHTML.trim());
        } else {
          compiledString = compile(this.valueTemplate);
        }
        var valueCompTemp = compiledString(itemData, this, "valueTemplate", this.valueTemplateId, this.isStringTemplate, null, chipContent);
        if (valueCompTemp && valueCompTemp.length > 0) {
          append(valueCompTemp, chipContent);
        }
        this.renderReactTemplates();
      } else if (this.enableHtmlSanitizer) {
        chipContent.innerText = data;
      } else {
        chipContent.innerHTML = this.encodeHtmlEntities(data.toString());
      }
      chip.appendChild(chipContent);
      var eventArgs = {
        isInteracted: e ? true : false,
        itemData,
        e,
        setClass: function(classes) {
          addClass([chip], classes);
        },
        cancel: false
      };
      this.isPreventChange = this.isAngular && this.preventChange;
      this.trigger("tagging", eventArgs, function(eventArgs2) {
        if (!eventArgs2.cancel) {
          if (Browser.isDevice) {
            chip.classList.add(MOBILE_CHIP);
            append([chipClose], chip);
            chipClose.style.display = "none";
            EventHandler.add(chip, "click", _this.onMobileChipInteraction, _this);
          } else {
            EventHandler.add(chip, "mousedown", _this.chipClick, _this);
            if (_this.showClearButton) {
              chip.appendChild(chipClose);
            }
          }
          EventHandler.add(chipClose, "mousedown", _this.onChipRemove, _this);
          _this.chipCollectionWrapper.appendChild(chip);
          if (!_this.changeOnBlur && e) {
            _this.updateValueState(e, _this.value, _this.tempValues);
          }
        }
      });
    };
    MultiSelect2.prototype.calcPopupWidth = function() {
      var width = formatUnit(this.popupWidth);
      if (width.indexOf("%") > -1) {
        var inputWidth = this.componentWrapper.offsetWidth * parseFloat(width) / 100;
        width = inputWidth.toString() + "px";
      }
      return this.allowResize && this.resizeWidth ? this.resizeWidth + "px" : width;
    };
    MultiSelect2.prototype.mouseIn = function() {
      if (this.enabled && !this.readonly) {
        this.showOverAllClear();
      }
    };
    MultiSelect2.prototype.mouseOut = function() {
      if (!this.inputFocus) {
        this.overAllClear.style.display = "none";
      }
    };
    MultiSelect2.prototype.listOption = function(dataSource, fields) {
      var iconCss = isNullOrUndefined(fields.iconCss) ? false : true;
      var fieldProperty = isNullOrUndefined(fields.properties) ? fields : fields.properties;
      this.listCurrentOptions = fields.text !== null || fields.value !== null ? {
        fields: fieldProperty,
        showIcon: iconCss,
        ariaAttributes: {
          groupItemRole: "presentation"
        }
      } : {
        fields: {
          value: "text"
        }
      };
      extend(this.listCurrentOptions, this.listCurrentOptions, fields, true);
      if (this.mode === "CheckBox") {
        this.notify("listoption", {
          module: "CheckBoxSelection",
          enable: this.mode === "CheckBox",
          dataSource,
          fieldProperty
        });
      }
      return this.listCurrentOptions;
    };
    MultiSelect2.prototype.renderPopup = function() {
      var _this = this;
      if (!this.list) {
        _super.prototype.render.call(this);
      }
      if (this.popupObj && document.body.contains(this.popupObj.element) && this.allowFiltering) {
        this.refreshPopup();
        return;
      }
      if (!this.popupObj) {
        if (!isNullOrUndefined(this.popupWrapper)) {
          document.body.appendChild(this.popupWrapper);
          var checkboxFilter = this.popupWrapper.querySelector("." + FILTERPARENT);
          if (this.mode === "CheckBox" && !this.allowFiltering && checkboxFilter && this.filterParent) {
            checkboxFilter.remove();
            this.filterParent = null;
          }
          var overAllHeight = parseInt(this.popupHeight, 10);
          this.popupWrapper.style.visibility = "hidden";
          if (this.headerTemplate) {
            this.setHeaderTemplate();
            overAllHeight -= this.header.offsetHeight;
            this.isUpdateHeaderHeight = this.header.offsetHeight !== 0;
          }
          append([this.list], this.popupWrapper);
          if (!this.list.classList.contains(dropDownBaseClasses.noData) && this.getItems()[1]) {
            this.listItemHeight = this.getItems()[1].offsetHeight + parseInt(window.getComputedStyle(this.getItems()[1]).marginBottom, 10);
          }
          if (this.enableVirtualization && !this.list.classList.contains(dropDownBaseClasses.noData)) {
            if (!this.list.querySelector(".e-virtual-ddl-content") && this.list.querySelector(".e-list-parent")) {
              var contentElement = this.createElement("div", {
                className: "e-virtual-ddl-content"
              });
              contentElement.style.cssText = this.getTransformValues();
              this.list.appendChild(contentElement).appendChild(this.list.querySelector(".e-list-parent"));
            } else if (this.list.querySelector(".e-virtual-ddl-content")) {
              this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
            }
            this.UpdateSkeleton();
            this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li);
            this.virtualItemCount = this.itemCount;
            if (this.mode !== "CheckBox") {
              this.totalItemsCount();
            }
            if (!this.list.querySelector(".e-virtual-ddl")) {
              var virualElement = this.createElement("div", {
                id: this.element.id + "_popup",
                className: "e-virtual-ddl"
              });
              virualElement.style.cssText = this.GetVirtualTrackHeight();
              this.popupWrapper.querySelector(".e-dropdownbase").appendChild(virualElement);
            } else {
              this.list.getElementsByClassName("e-virtual-ddl")[0].style = this.GetVirtualTrackHeight();
            }
          }
          if (this.footerTemplate) {
            this.setFooterTemplate();
            overAllHeight -= this.footer.offsetHeight;
            this.isUpdateFooterHeight = this.footer.offsetHeight !== 0;
          }
          if (this.mode === "CheckBox" && this.showSelectAll) {
            this.notify("selectAll", {
              module: "CheckBoxSelection",
              enable: this.mode === "CheckBox"
            });
            overAllHeight -= this.selectAllHeight;
          } else if (this.mode === "CheckBox" && !this.showSelectAll && !this.headerTemplate && !this.footerTemplate) {
            this.notify("selectAll", {
              module: "CheckBoxSelection",
              enable: this.mode === "CheckBox"
            });
            overAllHeight = parseInt(this.popupHeight, 10);
          } else if (this.mode === "CheckBox" && !this.showSelectAll) {
            this.notify("selectAll", {
              module: "CheckBoxSelection",
              enable: this.mode === "CheckBox"
            });
            overAllHeight = parseInt(this.popupHeight, 10);
            if (this.headerTemplate && this.header) {
              overAllHeight -= this.header.offsetHeight;
            }
            if (this.footerTemplate && this.footer) {
              overAllHeight -= this.footer.offsetHeight;
            }
          }
          if (this.mode === "CheckBox") {
            var args = {
              module: "CheckBoxSelection",
              enable: this.mode === "CheckBox",
              popupElement: this.popupWrapper
            };
            if (this.allowFiltering) {
              this.notify("searchBox", args);
              overAllHeight -= this.searchBoxHeight;
            }
            addClass([this.popupWrapper], "e-checkbox");
          }
          if (this.popupHeight !== "auto") {
            this.list.style.maxHeight = formatUnit(overAllHeight);
            this.popupWrapper.style.maxHeight = formatUnit(this.popupHeight);
          } else {
            this.list.style.maxHeight = formatUnit(this.popupHeight);
          }
          this.popupObj = new Popup(this.popupWrapper, {
            width: this.calcPopupWidth(),
            targetType: "relative",
            position: this.enableRtl ? {
              X: "right",
              Y: "bottom"
            } : {
              X: "left",
              Y: "bottom"
            },
            relateTo: this.overAllWrapper,
            collision: this.enableRtl ? {
              X: "fit",
              Y: "flip"
            } : {
              X: "flip",
              Y: "flip"
            },
            offsetY: 1,
            enableRtl: this.enableRtl,
            zIndex: this.zIndex,
            close: function() {
              if (_this.popupObj.element.parentElement) {
                _this.popupObj.unwireScrollEvents();
                var checkboxFilterInput = _this.popupWrapper.querySelector("." + FILTERINPUT);
                if (_this.mode === "CheckBox" && checkboxFilterInput && document.activeElement === checkboxFilterInput) {
                  checkboxFilterInput.blur();
                }
                detach(_this.popupObj.element);
              }
            },
            open: function() {
              _this.popupObj.resolveCollision();
              if (!_this.isFirstClick) {
                var ulElement = _this.list.querySelector("ul");
                if (ulElement) {
                  if (!(_this.mode !== "CheckBox" && (_this.allowFiltering || _this.allowCustomValue) && _this.targetElement().trim() !== "")) {
                    _this.mainList = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;
                  }
                }
                _this.isFirstClick = true;
              }
              _this.popupObj.wireScrollEvents();
              if (!(_this.mode !== "CheckBox" && (_this.allowFiltering || _this.allowCustomValue) && _this.targetElement().trim() !== "") && !_this.enableVirtualization) {
                _this.loadTemplate();
                if (_this.enableVirtualization && _this.mode === "CheckBox") {
                  _this.UpdateSkeleton();
                }
              }
              _this.isPreventScrollAction = true;
              _this.setScrollPosition();
              if (!_this.list.classList.contains(dropDownBaseClasses.noData) && _this.getItems()[1] && _this.getItems()[1].offsetHeight !== 0) {
                _this.listItemHeight = _this.getItems()[1].offsetHeight + parseInt(window.getComputedStyle(_this.getItems()[1]).marginBottom, 10);
                if (_this.list.getElementsByClassName("e-virtual-ddl-content")[0]) {
                  _this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = _this.getTransformValues();
                }
              }
              if (_this.allowFiltering) {
                _this.notify("inputFocus", {
                  module: "CheckBoxSelection",
                  enable: _this.mode === "CheckBox",
                  value: "focus"
                });
              }
              if (_this.enableVirtualization) {
                _this.notify("bindScrollEvent", {
                  module: "VirtualScroll",
                  component: _this.getModuleName(),
                  enable: _this.enableVirtualization
                });
                setTimeout(function() {
                  if (_this.value) {
                    _this.updateSelectionList();
                  } else if (_this.viewPortInfo && _this.viewPortInfo.offsets.top) {
                    _this.list.scrollTop = _this.viewPortInfo.offsets.top;
                  }
                }, 5);
              }
            },
            targetExitViewport: function() {
              if (!Browser.isDevice) {
                _this.hidePopup();
              }
            }
          });
          this.checkCollision(this.popupWrapper);
          this.popupContentElement = this.popupObj.element.querySelector(".e-content");
          if (this.mode === "CheckBox" && Browser.isDevice && this.allowFiltering && this.isDeviceFullScreen) {
            this.notify("deviceSearchBox", {
              module: "CheckBoxSelection",
              enable: this.mode === "CheckBox"
            });
          }
          if (this.allowResize) {
            this.setResize();
          }
          this.popupObj.close();
          this.popupWrapper.style.visibility = "";
        }
      }
    };
    MultiSelect2.prototype.checkCollision = function(popupEle) {
      if (!(this.mode === "CheckBox" && Browser.isDevice && this.allowFiltering && this.isDeviceFullScreen)) {
        var collision = isCollide(popupEle);
        if (collision.length > 0) {
          popupEle.style.marginTop = -parseInt(getComputedStyle(popupEle).marginTop, 10) + "px";
        }
        this.popupObj.resolveCollision();
      }
    };
    MultiSelect2.prototype.setHeaderTemplate = function() {
      var compiledString;
      if (this.header) {
        this.header.remove();
      }
      this.header = this.createElement("div");
      addClass([this.header], HEADER2);
      var headercheck = this.multiCompiler(this.headerTemplate);
      if (typeof this.headerTemplate !== "function" && headercheck) {
        compiledString = compile(select(this.headerTemplate, document).innerHTML.trim());
      } else {
        compiledString = compile(this.headerTemplate);
      }
      var elements = compiledString({}, this, "headerTemplate", this.headerTemplateId, this.isStringTemplate, null, this.header);
      if (elements && elements.length > 0) {
        append(elements, this.header);
      }
      if (this.mode === "CheckBox" && this.showSelectAll) {
        prepend([this.header], this.popupWrapper);
      } else {
        append([this.header], this.popupWrapper);
      }
      EventHandler.add(this.header, "mousedown", this.onListMouseDown, this);
    };
    MultiSelect2.prototype.setFooterTemplate = function() {
      var compiledString;
      if (this.footer) {
        this.footer.remove();
      }
      this.footer = this.createElement("div");
      addClass([this.footer], FOOTER2);
      var footercheck = this.multiCompiler(this.footerTemplate);
      if (typeof this.footerTemplate !== "function" && footercheck) {
        compiledString = compile(select(this.footerTemplate, document).innerHTML.trim());
      } else {
        compiledString = compile(this.footerTemplate);
      }
      var elements = compiledString({}, this, "footerTemplate", this.footerTemplateId, this.isStringTemplate, null, this.footer);
      if (elements && elements.length > 0) {
        append(elements, this.footer);
      }
      append([this.footer], this.popupWrapper);
      EventHandler.add(this.footer, "mousedown", this.onListMouseDown, this);
    };
    MultiSelect2.prototype.updateInitialData = function() {
      var currentData = this.selectData;
      var ulElement = this.renderItems(currentData, this.fields, false, this.isClearAllAction);
      this.list.scrollTop = 0;
      this.virtualListInfo = {
        currentPageNumber: null,
        direction: null,
        sentinelInfo: {},
        offsets: {},
        startIndex: 0,
        endIndex: this.itemCount
      };
      this.previousStartIndex = 0;
      this.previousEndIndex = this.itemCount;
      if (this.dataSource instanceof DataManager) {
        if (this.remoteDataCount >= 0) {
          this.totalItemCount = this.dataCount = this.remoteDataCount;
        } else {
          this.resetList(this.dataSource);
        }
      } else {
        this.totalItemCount = this.dataCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;
      }
      if (this.mode !== "CheckBox") {
        this.totalItemCount = this.value && this.value.length ? this.totalItemCount - this.value.length : this.totalItemCount;
      }
      this.getSkeletonCount();
      this.skeletonCount = this.totalItemCount !== 0 && this.totalItemCount < this.itemCount * 2 && (!(this.dataSource instanceof DataManager) || this.dataSource instanceof DataManager && this.totalItemCount <= this.itemCount) ? 0 : this.skeletonCount;
      this.UpdateSkeleton();
      if (this.list.getElementsByClassName("e-virtual-ddl")[0]) {
        this.list.getElementsByClassName("e-virtual-ddl")[0].style = this.GetVirtualTrackHeight();
      } else if (!this.list.querySelector(".e-virtual-ddl") && this.skeletonCount > 0) {
        var virualElement = this.createElement("div", {
          id: this.element.id + "_popup",
          className: "e-virtual-ddl"
        });
        virualElement.style.cssText = this.GetVirtualTrackHeight();
        this.popupWrapper.querySelector(".e-dropdownbase").appendChild(virualElement);
      }
      this.listData = currentData;
      this.liCollections = this.list.querySelectorAll(".e-list-item");
      if (this.list.getElementsByClassName("e-virtual-ddl-content")[0]) {
        this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
      }
      if (this.enableVirtualization) {
        this.notify("setGeneratedData", {
          module: "VirtualScroll"
        });
      }
    };
    MultiSelect2.prototype.clearAll = function(e) {
      if (this.enabled && !this.readonly) {
        var temp = void 0;
        this.setDynValue = false;
        this.isClearAllAction = true;
        if (this.value && this.value.length > 0) {
          if (this.allowFiltering) {
            this.refreshListItems(null);
            if (this.mode === "CheckBox" && this.targetInputElement) {
              this.targetInputElement.value = "";
            }
          }
          var liElement = this.list && this.list.querySelectorAll("li.e-list-item");
          if (liElement && liElement.length > 0) {
            this.selectAllItems(false, e);
          } else {
            this.removeIndex = 0;
            for (temp = this.value[this.removeIndex]; this.removeIndex < this.value.length; temp = this.value[this.removeIndex]) {
              this.removeValue(temp, e, null, true);
            }
          }
          this.selectedElementID = null;
          this.inputElement.removeAttribute("aria-activedescendant");
        } else {
          this.clearAllCallback(e);
        }
        this.checkAndResetCache();
        Input.createSpanElement(this.overAllWrapper, this.createElement);
        this.calculateWidth();
        if (!isNullOrUndefined(this.overAllWrapper) && !isNullOrUndefined(this.overAllWrapper.getElementsByClassName("e-ddl-icon")[0] && this.overAllWrapper.getElementsByClassName("e-float-text-content")[0] && this.floatLabelType !== "Never")) {
          this.overAllWrapper.getElementsByClassName("e-float-text-content")[0].classList.add("e-icon");
        }
        if (this.enableVirtualization) {
          this.updateInitialData();
          if (this.chipCollectionWrapper) {
            this.chipCollectionWrapper.innerHTML = "";
          }
          if (!this.isCustomDataUpdated) {
            this.notify("setGeneratedData", {
              module: "VirtualScroll"
            });
          }
        }
        if (this.enableVirtualization) {
          this.list.scrollTop = 0;
          this.virtualListInfo = null;
          this.previousStartIndex = 0;
          this.previousEndIndex = this.itemCount;
        }
        this.isClearAllAction = false;
      }
      this.isClearAllItem = true;
      EventHandler.add(document, "mouseup", this.preventSelection, this);
    };
    MultiSelect2.prototype.preventSelection = function(e) {
      if (this.isClearAllItem) {
        e.stopPropagation();
      }
      this.isClearAllItem = false;
      EventHandler.remove(document, "mouseup", this.preventSelection);
    };
    MultiSelect2.prototype.clearAllCallback = function(e, isClearAll) {
      var tempValues = this.value ? this.value.slice() : [];
      if (this.mainList && this.listData && (this.allowFiltering && this.mode !== "CheckBox" || this.allowCustomValue)) {
        var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
        this.onActionComplete(list, this.mainData);
      }
      this.focusAtFirstListItem();
      this.updateDelimeter(this.delimiterChar, e);
      if (this.mode !== "Box" && (!this.inputFocus || this.mode === "CheckBox")) {
        this.updateDelimView();
      }
      if (this.inputElement.value !== "") {
        this.makeTextBoxEmpty();
        this.search(null);
      }
      this.checkPlaceholderSize();
      if (this.isPopupOpen()) {
        this.refreshPopup();
      }
      if (this.allowResize) {
        this.setResize();
      }
      if (!this.inputFocus) {
        if (this.changeOnBlur) {
          this.updateValueState(e, this.value, tempValues);
        }
        if (this.mode !== "CheckBox") {
          this.inputElement.focus();
        }
      }
      if (this.mode === "CheckBox") {
        this.refreshPlaceHolder();
        this.refreshInputHight();
        if (this.changeOnBlur && isClearAll && (isNullOrUndefined(this.value) || this.value.length === 0)) {
          this.updateValueState(e, this.value, this.tempValues);
        }
      }
      if (!this.changeOnBlur && isClearAll && (isNullOrUndefined(this.value) || this.value.length === 0)) {
        this.updateValueState(e, this.value, this.tempValues);
      }
      if (this.mode === "CheckBox" && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {
        this.updateListItems(this.list.querySelectorAll("li.e-list-item"), this.mainList.querySelectorAll("li.e-list-item"));
      }
      e.preventDefault();
    };
    MultiSelect2.prototype.windowResize = function() {
      this.refreshPopup();
      if ((!this.inputFocus || this.mode === "CheckBox") && this.viewWrapper && this.viewWrapper.parentElement) {
        this.updateDelimView();
      }
    };
    MultiSelect2.prototype.resetValueHandler = function(e) {
      if (!isNullOrUndefined(this.inputElement)) {
        var formElement = closest(this.inputElement, "form");
        if (formElement && e.target === formElement) {
          var textVal = this.element.tagName === this.getNgDirective() ? null : this.element.getAttribute("data-initial-value");
          this.text = textVal;
        }
      }
    };
    MultiSelect2.prototype.wireEvent = function() {
      EventHandler.add(this.componentWrapper, "mousedown", this.wrapperClick, this);
      EventHandler.add(window, "resize", this.windowResize, this);
      EventHandler.add(this.inputElement, "focus", this.focusInHandler, this);
      EventHandler.add(this.inputElement, "keydown", this.onKeyDown, this);
      EventHandler.add(this.inputElement, "keyup", this.keyUp, this);
      if (this.mode !== "CheckBox") {
        EventHandler.add(this.inputElement, "input", this.onInput, this);
      }
      EventHandler.add(this.inputElement, "blur", this.onBlurHandler, this);
      EventHandler.add(this.componentWrapper, "mouseover", this.mouseIn, this);
      var formElement = closest(this.inputElement, "form");
      if (formElement) {
        EventHandler.add(formElement, "reset", this.resetValueHandler, this);
      }
      EventHandler.add(this.componentWrapper, "mouseout", this.mouseOut, this);
      EventHandler.add(this.overAllClear, "mousedown", this.clearAll, this);
      EventHandler.add(this.inputElement, "paste", this.pasteHandler, this);
    };
    MultiSelect2.prototype.onInput = function(e) {
      if (this.keyDownStatus) {
        this.isValidKey = true;
      } else {
        this.isValidKey = false;
      }
      this.keyDownStatus = false;
      if (Browser.isDevice && Browser.info.name === "mozilla") {
        this.search(e);
      }
    };
    MultiSelect2.prototype.pasteHandler = function(event2) {
      var _this = this;
      setTimeout(function() {
        _this.expandTextbox();
        _this.search(event2);
      });
    };
    MultiSelect2.prototype.performFiltering = function(e) {
      var _this = this;
      var eventArgs = {
        preventDefaultAction: false,
        text: this.targetElement(),
        updateData: function(dataSource, query, fields) {
          if (eventArgs.cancel) {
            return;
          }
          _this.isFiltered = true;
          _this.customFilterQuery = query;
          _this.remoteFilterAction = true;
          _this.isCustomFiltering = true;
          _this.dataUpdater(dataSource, query, fields);
        },
        event: e,
        cancel: false
      };
      this.trigger("filtering", eventArgs, function(eventArgs2) {
        _this.isFilterPrevented = eventArgs2.cancel;
        if (!eventArgs2.cancel) {
          if (!_this.isFiltered && !eventArgs2.preventDefaultAction) {
            _this.filterAction = true;
            _this.isFilteringAction = true;
            if (_this.dataSource instanceof DataManager && _this.allowCustomValue) {
              _this.isCustomRendered = false;
            }
            _this.dataUpdater(_this.dataSource, null, _this.fields);
            _this.isFilteringAction = false;
          }
        }
      });
    };
    MultiSelect2.prototype.search = function(e) {
      this.preventSetCurrentData = false;
      this.firstItem = this.dataSource && this.dataSource.length > 0 ? this.dataSource[0] : null;
      if (!isNullOrUndefined(e)) {
        this.keyCode = e.keyCode;
      }
      if (!this.isPopupOpen() && this.openOnClick) {
        this.showPopup(e);
      }
      this.openClick(e);
      if (this.checkTextLength() && !this.allowFiltering && !isNullOrUndefined(e) && e.keyCode !== 8) {
        this.focusAtFirstListItem();
      } else {
        var text = this.targetElement();
        if (this.allowFiltering) {
          if (this.allowCustomValue) {
            this.isRemoteSelection = true;
          }
          this.checkAndResetCache();
          this.isRequesting = false;
          if (this.targetElement() !== "" && this.debounceDelay > 0) {
            this.debouncedFiltering(e, this.debounceDelay);
          } else {
            this.performFiltering(e);
          }
        } else if (this.allowCustomValue) {
          var query = new Query();
          query = this.allowFiltering && text !== "" ? query.where(this.fields.text, "startswith", text, this.ignoreCase, this.ignoreAccent) : query;
          if (this.enableVirtualization) {
            this.dataUpdater(this.dataSource, query, this.fields);
          } else {
            this.dataUpdater(this.mainData, query, this.fields);
          }
          this.UpdateSkeleton();
        } else {
          var liCollections = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-hide-listitem)");
          var type = this.typeOfData(this.listData).typeof;
          var activeElement = Search2(this.targetElement(), liCollections, "StartsWith", this.ignoreCase);
          if (this.enableVirtualization && this.targetElement().trim() !== "" && !this.allowFiltering) {
            var updatingincrementalindex = false;
            if (this.viewPortInfo.endIndex >= this.incrementalEndIndex && this.incrementalEndIndex <= this.totalItemCount || this.incrementalEndIndex === 0) {
              updatingincrementalindex = true;
              this.incrementalStartIndex = 0;
              this.incrementalEndIndex = 100 > this.totalItemCount ? this.totalItemCount : 100;
              this.updateIncrementalInfo(this.incrementalStartIndex, this.incrementalEndIndex);
              updatingincrementalindex = false;
            }
            if (this.viewPortInfo.startIndex !== 0 || updatingincrementalindex) {
              this.updateIncrementalView(0, this.itemCount);
            }
            activeElement = Search2(this.targetElement(), this.incrementalLiCollections, this.filterType, true, this.listData, this.fields, type);
            while (isNullOrUndefined(activeElement) && this.incrementalEndIndex < this.totalItemCount) {
              this.incrementalStartIndex = this.incrementalEndIndex;
              this.incrementalEndIndex = this.incrementalEndIndex + 100 > this.totalItemCount ? this.totalItemCount : this.incrementalEndIndex + 100;
              this.updateIncrementalInfo(this.incrementalStartIndex, this.incrementalEndIndex);
              updatingincrementalindex = true;
              if (this.viewPortInfo.startIndex !== 0 || updatingincrementalindex) {
                this.updateIncrementalView(0, this.itemCount);
              }
              activeElement = Search2(this.targetElement(), this.incrementalLiCollections, this.filterType, true, this.listData, this.fields, type);
              if (!isNullOrUndefined(activeElement)) {
                break;
              }
              if (isNullOrUndefined(activeElement) && this.incrementalEndIndex >= this.totalItemCount) {
                this.incrementalStartIndex = 0;
                this.incrementalEndIndex = 100 > this.totalItemCount ? this.totalItemCount : 100;
                break;
              }
            }
            if (activeElement.index) {
              if (!(this.viewPortInfo.startIndex >= activeElement.index) || !(activeElement.index >= this.viewPortInfo.endIndex)) {
                var startIndex = activeElement.index - (this.itemCount / 2 - 2) > 0 ? activeElement.index - (this.itemCount / 2 - 2) : 0;
                var endIndex = startIndex + this.itemCount > this.totalItemCount ? this.totalItemCount : startIndex + this.itemCount;
                if (startIndex !== this.viewPortInfo.startIndex) {
                  this.updateIncrementalView(startIndex, endIndex);
                }
              }
            }
            if (!isNullOrUndefined(activeElement.item)) {
              var index1 = this.getIndexByValue(activeElement.item.getAttribute("data-value")) - this.skeletonCount;
              if (index1 > this.itemCount / 2) {
                var startIndex = this.viewPortInfo.startIndex + (this.itemCount / 2 - 2) < this.totalItemCount ? this.viewPortInfo.startIndex + (this.itemCount / 2 - 2) : this.totalItemCount;
                var endIndex = this.viewPortInfo.startIndex + this.itemCount > this.totalItemCount ? this.totalItemCount : this.viewPortInfo.startIndex + this.itemCount;
                this.updateIncrementalView(startIndex, endIndex);
              }
              activeElement.item = this.getElementByValue(activeElement.item.getAttribute("data-value"));
            } else {
              this.updateIncrementalView(0, this.itemCount);
              this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
              this.list.scrollTop = 0;
            }
            if (activeElement && activeElement.item) {
              activeElement.item = this.getElementByValue(activeElement.item.getAttribute("data-value"));
            }
          }
          if (activeElement && activeElement.item) {
            this.addListFocus(activeElement.item);
            this.list.scrollTop = activeElement.item.offsetHeight * activeElement.index;
          } else if (this.targetElement() !== "") {
            this.removeFocus();
          } else {
            this.focusAtFirstListItem();
          }
        }
      }
      if (this.enableVirtualization && this.allowFiltering) {
        this.getFilteringSkeletonCount();
      }
    };
    MultiSelect2.prototype.preRender = function() {
      if (this.allowFiltering === null) {
        this.allowFiltering = this.mode === "CheckBox" ? true : false;
      }
      this.preventSetCurrentData = false;
      this.initializeData();
      this.updateDataAttribute(this.htmlAttributes);
      _super.prototype.preRender.call(this);
    };
    MultiSelect2.prototype.getLocaleName = function() {
      return "multi-select";
    };
    MultiSelect2.prototype.initializeData = function() {
      this.mainListCollection = [];
      this.beforePopupOpen = false;
      this.filterAction = false;
      this.remoteFilterAction = false;
      this.isFirstClick = false;
      this.mobFilter = true;
      this.isFiltered = false;
      this.focused = true;
      this.initial = true;
      this.backCommand = true;
      this.isCustomRendered = false;
      this.isRemoteSelection = false;
      this.isSelectAllTarget = true;
      this.isaddNonPresentItems = false;
      this.viewPortInfo = {
        currentPageNumber: null,
        direction: null,
        sentinelInfo: {},
        offsets: {},
        startIndex: 0,
        endIndex: this.itemCount
      };
    };
    MultiSelect2.prototype.updateData = function(delimiterChar, e, isInitialVirtualData) {
      var data = "";
      var delim = this.mode === "Delimiter" || this.mode === "CheckBox";
      var text = [];
      var temp;
      var tempData = this.listData;
      if (!this.enableVirtualization) {
        this.listData = this.mainData;
      }
      if (!isNullOrUndefined(this.hiddenElement) && !this.enableVirtualization) {
        this.hiddenElement.innerHTML = "";
      }
      if (!isNullOrUndefined(this.value)) {
        var valueLength = this.value.length;
        var hiddenElementContent = "";
        var _loop_2 = function(index2) {
          var valueItem = this_1.allowObjectBinding ? getValue(this_1.fields.value ? this_1.fields.value : "", this_1.value[index2]) : this_1.value[index2];
          var listValue = this_1.findListElement(!isNullOrUndefined(this_1.mainList) ? this_1.mainList : this_1.ulElement, "li", "data-value", valueItem);
          if (this_1.enableVirtualization) {
            listValue = this_1.findListElement(!isNullOrUndefined(this_1.list) ? this_1.list : this_1.ulElement, "li", "data-value", valueItem);
          }
          if (isNullOrUndefined(listValue) && !this_1.allowCustomValue && !this_1.enableVirtualization && this_1.listData && this_1.listData.length > 0) {
            this_1.value.splice(index2, 1);
            index2 -= 1;
            valueLength -= 1;
          } else {
            if (this_1.listData) {
              if (this_1.enableVirtualization) {
                if (delim && !this_1.isDynamicRemoteVirtualData) {
                  data = this_1.delimiterWrapper && this_1.delimiterWrapper.innerHTML === "" ? data : this_1.delimiterWrapper.innerHTML;
                }
                var value = this_1.allowObjectBinding ? getValue(this_1.fields.value ? this_1.fields.value : "", this_1.value[this_1.value.length - 1]) : this_1.value[this_1.value.length - 1];
                if (this_1.isRemoveSelection) {
                  data = this_1.text.replace(/,/g, delimiterChar + " ") + delimiterChar + " ";
                  text = this_1.text.split(delimiterChar);
                } else {
                  temp = isInitialVirtualData && delim ? this_1.text : this_1.getTextByValue(value);
                  var textValues = this_1.isDynamicRemoteVirtualData && value != null && value !== "" && !isInitialVirtualData ? this_1.getTextByValue(value) : isInitialVirtualData ? this_1.text : this_1.text && this_1.text !== "" ? this_1.text + this_1.delimiterChar + temp : temp;
                  data += temp + delimiterChar + " ";
                  text.push(textValues);
                  hiddenElementContent = this_1.hiddenElement.innerHTML;
                }
                if (e && e.currentTarget && e.currentTarget.classList.contains("e-chips-close") || e && e.key === "Backspace") {
                  var item_1 = e.target.parentElement.getAttribute("data-value");
                  if (e.key === "Backspace") {
                    var lastChild = this_1.hiddenElement.lastChild;
                    if (lastChild) {
                      this_1.hiddenElement.removeChild(lastChild);
                    }
                  } else {
                    this_1.hiddenElement.childNodes.forEach(function(option) {
                      if (option.value === item_1) {
                        option.parentNode.removeChild(option);
                      }
                    });
                  }
                  hiddenElementContent = this_1.hiddenElement.innerHTML;
                } else {
                  hiddenElementContent += "<option selected value='" + value + "'>" + index2 + "</option>";
                }
                return out_index_1 = index2, "break";
              } else {
                temp = this_1.getTextByValue(valueItem);
              }
            } else {
              temp = valueItem;
            }
            data += temp + delimiterChar + " ";
            text.push(temp);
          }
          hiddenElementContent += '<option selected value="' + valueItem + '">' + index2 + "</option>";
          out_index_1 = index2;
        };
        var this_1 = this, out_index_1;
        for (var index = 0; index < valueLength; index++) {
          var state_2 = _loop_2(index);
          index = out_index_1;
          if (state_2 === "break") break;
        }
        if (!isNullOrUndefined(this.hiddenElement)) {
          if (this.isRemoveSelection) {
            if (this.findListElement(this.hiddenElement, "option", "value", this.currentRemoveValue)) {
              this.hiddenElement.removeChild(this.findListElement(this.hiddenElement, "option", "value", this.currentRemoveValue));
            }
            this.isRemoveSelection = false;
          } else {
            this.hiddenElement.innerHTML = hiddenElementContent;
          }
        }
      }
      var isChipRemove = e && e.target && e.target.classList.contains("e-chips-close");
      if (!this.enableVirtualization || this.enableVirtualization && this.mode !== "CheckBox" && !isChipRemove) {
        this.setProperties({
          text: text.toString()
        }, true);
      }
      if (delim) {
        this.updateWrapperText(this.delimiterWrapper, data);
        this.delimiterWrapper.setAttribute("id", getUniqueID("delim_val"));
        this.inputElement.setAttribute("aria-describedby", this.delimiterWrapper.id);
      }
      var targetEle = e && e.target;
      var isClearAll = targetEle && targetEle.classList.contains("e-close-hooker") ? true : null;
      if (!this.changeOnBlur && e && !isClearAll || this.isSelectAll) {
        this.isSelectAll = false;
        this.updateValueState(e, this.value, this.tempValues);
      }
      this.listData = tempData;
      this.addValidInputClass();
    };
    MultiSelect2.prototype.initialTextUpdate = function() {
      if (!isNullOrUndefined(this.text)) {
        var textArr = this.text.split(this.delimiterChar);
        var textVal = [];
        for (var index = 0; textArr.length > index; index++) {
          var val = this.getValueByText(textArr[index]);
          if (!isNullOrUndefined(val)) {
            textVal.push(val);
          } else if (this.allowCustomValue) {
            textVal.push(textArr[index]);
          }
        }
        if (textVal && textVal.length) {
          var value = this.allowObjectBinding ? this.getDataByValue(textVal) : textVal;
          this.setProperties({
            value
          }, true);
        }
      } else {
        this.setProperties({
          value: null
        }, true);
      }
    };
    MultiSelect2.prototype.renderList = function(isEmptyData) {
      if (!isEmptyData && this.allowCustomValue && this.list && (this.list.textContent === this.noRecordsTemplate || this.list.querySelector(".e-ul") && this.list.querySelector(".e-ul").childElementCount === 0)) {
        isEmptyData = true;
      }
      _super.prototype.render.call(this, null, isEmptyData);
      this.totalItemCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;
      this.unwireListEvents();
      this.wireListEvents();
    };
    MultiSelect2.prototype.initialValueUpdate = function(listItems, isInitialVirtualData) {
      if (this.list) {
        var text = void 0;
        var element = void 0;
        var value = void 0;
        if (this.chipCollectionWrapper) {
          this.chipCollectionWrapper.innerHTML = "";
        }
        this.removeListSelection();
        if (!isNullOrUndefined(this.value)) {
          for (var index = 0; !isNullOrUndefined(this.value[index]); index++) {
            value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value[index]) : this.value[index];
            element = this.findListElement(this.hideSelectedItem ? this.ulElement : this.list, "li", "data-value", value);
            var isCustomData = false;
            if (this.enableVirtualization) {
              text = null;
              if (listItems != null && listItems.length > 0) {
                for (var i = 0; i < listItems.length; i++) {
                  if (this.isPrimitiveData && listItems[i] === value || !this.isPrimitiveData && getValue(this.fields.value ? this.fields.value : "value", listItems[i]) === value) {
                    text = this.isPrimitiveData ? listItems[i] : getValue(this.fields.text, listItems[i]);
                    if (this.enableVirtualization) {
                      if (isNullOrUndefined(this.selectedListData)) {
                        this.selectedListData = [listItems[i]];
                      } else {
                        if (Array.isArray(this.selectedListData)) {
                          this.selectedListData.push(listItems[i]);
                        } else {
                          this.selectedListData = [this.selectedListData, listItems[i]];
                        }
                      }
                    }
                    break;
                  }
                }
              }
              if (isNullOrUndefined(text) && this.allowCustomValue && (!(this.dataSource instanceof DataManager) || this.dataSource instanceof DataManager && isInitialVirtualData)) {
                text = this.getTextByValue(value);
                isCustomData = true;
              }
            } else {
              text = this.getTextByValue(value);
            }
            if (element && element.getAttribute("aria-selected") !== "true" || element && element.getAttribute("aria-selected") === "true" && this.hideSelectedItem && (this.mode === "Box" || this.mode === "Default") || this.enableVirtualization && value != null && text != null && !isCustomData) {
              var currentText = [];
              var textValues = this.isDynamicRemoteVirtualData && text != null && text !== "" && index === 0 ? text : this.text != null && this.text !== "" && !this.text.includes(text) ? this.text + this.delimiterChar + text : text;
              currentText.push(textValues);
              this.setProperties({
                text: currentText.toString()
              }, true);
              this.addChip(text, value);
              this.addListSelection(element);
            } else if (!this.enableVirtualization && value && this.allowCustomValue || this.enableVirtualization && value && this.allowCustomValue && (!(this.dataSource instanceof DataManager) || this.dataSource instanceof DataManager && isInitialVirtualData)) {
              var indexItem = this.listData.length;
              var newValue = {};
              setValue(this.fields.text, value, newValue);
              setValue(this.fields.value, value, newValue);
              var noDataEle = this.popupWrapper.querySelector("." + dropDownBaseClasses.noData);
              if (!this.enableVirtualization) {
                this.addItem(newValue, indexItem);
              }
              if (this.enableVirtualization) {
                if (this.virtualCustomSelectData && this.virtualCustomSelectData.length >= 0) {
                  this.virtualCustomSelectData.push(newValue);
                } else {
                  this.virtualCustomSelectData = [newValue];
                }
              }
              element = element ? element : this.findListElement(this.hideSelectedItem ? this.ulElement : this.list, "li", "data-value", value);
              if (this.popupWrapper.contains(noDataEle)) {
                this.list.setAttribute("style", noDataEle.getAttribute("style"));
                this.popupWrapper.replaceChild(this.list, noDataEle);
                this.wireListEvents();
              }
              var currentText = [];
              var textValues = this.text != null && this.text !== "" ? this.text + this.delimiterChar + text : text;
              currentText.push(textValues);
              this.setProperties({
                text: currentText.toString()
              }, true);
              this.addChip(text, value);
              this.addListSelection(element);
            }
          }
        }
        if (this.mode === "CheckBox") {
          this.updateDelimView();
          if (this.changeOnBlur) {
            this.updateValueState(null, this.value, this.tempValues);
          }
          this.updateDelimeter(this.delimiterChar);
          this.refreshInputHight();
        } else {
          this.updateDelimeter(this.delimiterChar, null, isInitialVirtualData);
        }
        if (this.mode === "CheckBox" && this.showSelectAll && (isNullOrUndefined(this.value) || !this.value.length)) {
          this.notify("checkSelectAll", {
            module: "CheckBoxSelection",
            enable: this.mode === "CheckBox",
            value: "uncheck"
          });
        }
        if (this.mode === "Box" || this.mode === "Default" && this.inputFocus) {
          this.chipCollectionWrapper.style.display = "";
        } else if (this.mode === "Delimiter" || this.mode === "CheckBox") {
          this.showDelimWrapper();
        }
      }
    };
    MultiSelect2.prototype.updateActionCompleteData = function(li, item) {
      if (this.value && (!this.allowObjectBinding && this.value.indexOf(li.getAttribute("data-value")) > -1 || this.allowObjectBinding && this.isObjectInArray(this.getDataByValue(li.getAttribute("data-value")), this.value))) {
        this.mainList = this.ulElement;
        if (this.hideSelectedItem) {
          addClass([li], HIDE_LIST);
        }
      }
    };
    MultiSelect2.prototype.updateAddItemList = function(list, itemCount) {
      if (this.popupObj && this.popupObj.element && this.popupObj.element.querySelector("." + dropDownBaseClasses.noData) && list) {
        this.list = list;
        this.mainList = this.ulElement = list.querySelector("ul");
        remove(this.popupWrapper.querySelector(".e-content"));
        this.popupObj = null;
        this.renderPopup();
      } else if (this.allowCustomValue) {
        this.list = list;
        this.mainList = this.ulElement = list.querySelector("ul");
      }
    };
    MultiSelect2.prototype.updateDataList = function() {
      if (this.mainList && this.ulElement && !(this.isFiltered || this.filterAction || this.targetElement().trim())) {
        var isDynamicGroupItemUpdate = this.mainList.childElementCount < this.ulElement.childElementCount;
        var isReactTemplateUpdate = this.ulElement.childElementCount > 0 && this.ulElement.children[0].childElementCount > 0 && this.mainList.children[0] && this.mainList.children[0].childElementCount < this.ulElement.children[0].childElementCount;
        var isAngularTemplateUpdate = this.itemTemplate && this.ulElement.childElementCount > 0 && !(this.ulElement.childElementCount < this.mainList.childElementCount) && (this.ulElement.children[0].childElementCount > 0 || this.fields.groupBy && this.ulElement.children[1] && this.ulElement.children[1].childElementCount > 0);
        if (isDynamicGroupItemUpdate || isReactTemplateUpdate || isAngularTemplateUpdate) {
          this.mainList = this.ulElement;
        }
      }
    };
    MultiSelect2.prototype.isValidLI = function(li) {
      return li && !li.classList.contains(dropDownBaseClasses.disabled) && !li.classList.contains(dropDownBaseClasses.group) && li.classList.contains(dropDownBaseClasses.li);
    };
    MultiSelect2.prototype.updateListSelection = function(li, e, length) {
      var customVal = li.getAttribute("data-value");
      var value = this.allowObjectBinding ? this.getDataByValue(this.getFormattedValue(customVal)) : this.getFormattedValue(customVal);
      if (this.allowCustomValue && (customVal !== "false" && value === false || !isNullOrUndefined(value) && value.toString() === "NaN")) {
        value = customVal;
      }
      this.removeHover();
      if (!this.value || !this.allowObjectBinding && this.value.indexOf(value) === -1 || this.allowObjectBinding && this.indexOfObjectInArray(value, this.value) === -1) {
        this.dispatchSelect(value, e, li, li.getAttribute("aria-selected") === "true", length);
      } else {
        this.removeValue(value, e, length);
      }
      this.checkAndScrollParent();
    };
    MultiSelect2.prototype.updateListSelectEventCallback = function(value, li, e, currentText) {
      var _this = this;
      value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", value) : value;
      var text = currentText ? currentText : this.getTextByValue(value);
      if ((this.allowCustomValue || this.allowFiltering) && !this.findListElement(this.mainList, "li", "data-value", value) && (!this.enableVirtualization || this.enableVirtualization && this.virtualCustomData)) {
        var temp_1 = li ? li.cloneNode(true) : li;
        var fieldValue = this.fields.value ? this.fields.value : "value";
        if (this.allowCustomValue && this.mainData.length && typeof getValue(fieldValue, this.mainData[0]) === "number") {
          value = !isNaN(parseFloat(value.toString())) ? parseFloat(value.toString()) : value;
        }
        var data_1 = this.getDataByValue(value);
        var eventArgs = {
          newData: data_1,
          cancel: false
        };
        this.trigger("customValueSelection", eventArgs, function(eventArgs2) {
          if (!eventArgs2.cancel) {
            if (_this.enableVirtualization && _this.virtualCustomData) {
              if (_this.virtualCustomSelectData && _this.virtualCustomSelectData.length >= 0) {
                _this.virtualCustomSelectData.push(data_1);
              } else {
                _this.virtualCustomSelectData = [data_1];
              }
              _this.remoteCustomValue = false;
              _this.addValue(value, text, e);
            } else {
              append([temp_1], _this.mainList);
              _this.mainData.push(data_1);
              _this.remoteCustomValue = false;
              _this.addValue(value, text, e);
            }
          }
        });
      } else {
        this.remoteCustomValue = false;
        this.addValue(value, text, e);
      }
    };
    MultiSelect2.prototype.removeListSelection = function() {
      var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
      var selectedItems = this.list.querySelectorAll("." + className);
      var temp = selectedItems.length;
      if (selectedItems && selectedItems.length) {
        removeClass(selectedItems, className);
        while (temp > 0) {
          selectedItems[temp - 1].setAttribute("aria-selected", "false");
          temp--;
        }
      }
      if (!isNullOrUndefined(this.mainList)) {
        var selectItems = this.mainList.querySelectorAll("." + className);
        var temp1 = selectItems.length;
        if (selectItems && selectItems.length) {
          removeClass(selectItems, className);
          while (temp1 > 0) {
            selectItems[temp1 - 1].setAttribute("aria-selected", "false");
            if (this.mode === "CheckBox") {
              if (selectedItems && selectedItems.length > temp1 - 1) {
                removeClass([selectedItems[temp1 - 1].firstElementChild.lastElementChild], "e-check");
              }
              removeClass([selectItems[temp1 - 1].firstElementChild.lastElementChild], "e-check");
            }
            temp1--;
          }
        }
      }
    };
    MultiSelect2.prototype.removeHover = function() {
      var hoveredItem = this.list.querySelectorAll("." + dropDownBaseClasses.hover);
      if (hoveredItem && hoveredItem.length) {
        removeClass(hoveredItem, dropDownBaseClasses.hover);
      }
    };
    MultiSelect2.prototype.removeFocus = function() {
      if (this.list && this.mainList) {
        var hoveredItem = this.list.querySelectorAll("." + dropDownBaseClasses.focus);
        var mainlist = this.mainList.querySelectorAll("." + dropDownBaseClasses.focus);
        if (hoveredItem && hoveredItem.length) {
          removeClass(hoveredItem, dropDownBaseClasses.focus);
          removeClass(mainlist, dropDownBaseClasses.focus);
        }
      }
    };
    MultiSelect2.prototype.addListHover = function(li) {
      if (this.enabled && this.isValidLI(li)) {
        this.removeHover();
        addClass([li], dropDownBaseClasses.hover);
      } else {
        if (li !== null && li.classList.contains("e-list-group-item") && this.enableGroupCheckBox && this.mode === "CheckBox" && !isNullOrUndefined(this.fields.groupBy)) {
          this.removeHover();
          addClass([li], dropDownBaseClasses.hover);
        }
      }
    };
    MultiSelect2.prototype.addListFocus = function(element) {
      if (this.enabled && (this.isValidLI(element) || this.fields.disabled && this.isDisabledElement(element))) {
        this.removeFocus();
        addClass([element], dropDownBaseClasses.focus);
        this.updateAriaActiveDescendant();
      } else {
        if (this.enableGroupCheckBox && this.mode === "CheckBox" && !isNullOrUndefined(this.fields.groupBy)) {
          addClass([element], dropDownBaseClasses.focus);
          this.updateAriaActiveDescendant();
        }
      }
    };
    MultiSelect2.prototype.addListSelection = function(element, mainElement) {
      var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
      if (this.isValidLI(element) && !element.classList.contains(dropDownBaseClasses.hover)) {
        addClass([element], className);
        this.updateMainList(false, element.getAttribute("data-value"), mainElement);
        element.setAttribute("aria-selected", "true");
        if (this.mode === "CheckBox" && element.classList.contains("e-active")) {
          var ariaCheck = element.getElementsByClassName("e-check").length;
          if (ariaCheck === 0) {
            this.notify("updatelist", {
              module: "CheckBoxSelection",
              enable: this.mode === "CheckBox",
              li: element,
              e: this
            });
          }
        }
        this.notify("activeList", {
          module: "CheckBoxSelection",
          enable: this.mode === "CheckBox",
          li: element,
          e: this
        });
        if (this.chipCollectionWrapper) {
          this.removeChipSelection();
        }
        this.selectedElementID = element.id;
      }
    };
    MultiSelect2.prototype.updateDelimeter = function(delimChar, e, isInitialVirtualData) {
      this.updateData(delimChar, e, isInitialVirtualData);
    };
    MultiSelect2.prototype.onMouseClick = function(e) {
      var _this = this;
      if (!this.isClearAllItem) {
        this.keyCode = null;
        this.scrollFocusStatus = false;
        this.keyboardEvent = null;
        var target = e.target;
        var li = closest(target, "." + dropDownBaseClasses.li);
        if (this.enableVirtualization && li && li.classList.contains("e-virtual-list")) {
          return;
        }
        var headerLi = closest(target, "." + dropDownBaseClasses.group);
        if (headerLi && this.enableGroupCheckBox && this.mode === "CheckBox" && this.fields.groupBy) {
          target = target.classList.contains("e-list-group-item") ? target.firstElementChild.lastElementChild : e.target;
          if (target.classList.contains("e-check")) {
            this.selectAllItem(false, e);
            target.classList.remove("e-check");
            target.classList.remove("e-stop");
            closest(target, ".e-list-group-item").classList.remove("e-active");
            target.setAttribute("aria-selected", "false");
          } else {
            this.selectAllItem(true, e);
            target.classList.remove("e-stop");
            target.classList.add("e-check");
            closest(target, ".e-list-group-item").classList.add("e-active");
            target.setAttribute("aria-selected", "true");
          }
          this.refreshSelection();
          this.checkSelectAll();
        } else {
          if (this.isValidLI(li)) {
            var limit = this.value && this.value.length ? this.value.length : 0;
            if (li.classList.contains("e-active")) {
              limit = limit - 1;
            }
            if (limit < this.maximumSelectionLength) {
              this.updateListSelection(li, e);
              this.checkPlaceholderSize();
              this.addListFocus(li);
              if ((this.allowCustomValue || this.allowFiltering) && this.mainList && this.listData) {
                if (this.mode !== "CheckBox") {
                  this.focusAtLastListItem(li.getAttribute("data-value"));
                  this.refreshSelection();
                }
              } else {
                this.makeTextBoxEmpty();
              }
            }
            if (this.mode === "CheckBox") {
              this.updateDelimView();
              if (this.value && this.value.length > 50) {
                setTimeout(function() {
                  _this.updateDelimeter(_this.delimiterChar, e);
                }, 0);
              } else {
                this.updateDelimeter(this.delimiterChar, e);
              }
              this.refreshInputHight();
            } else {
              this.updateDelimeter(this.delimiterChar, e);
            }
            this.checkSelectAll();
            this.refreshPopup();
            if (this.allowResize) {
              this.setResize();
            }
            if (this.hideSelectedItem) {
              this.focusAtFirstListItem();
            }
            if (this.closePopupOnSelect) {
              this.hidePopup(e);
            } else {
              e.preventDefault();
            }
            var isFilterData = this.targetElement().trim() !== "" ? true : false;
            this.makeTextBoxEmpty();
            this.findGroupStart(target);
            if (this.mode !== "CheckBox") {
              this.refreshListItems(isNullOrUndefined(li) ? null : li.textContent, isFilterData);
            }
          } else {
            e.preventDefault();
          }
          if (this.enableVirtualization && this.hideSelectedItem) {
            var visibleListElements = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide):not(.e-virtual-list)");
            if (visibleListElements.length) {
              var actualCount = this.virtualListHeight > 0 ? Math.floor(this.virtualListHeight / this.listItemHeight) : 0;
              if (visibleListElements.length < actualCount + 2) {
                var query = this.getForQuery(this.value).clone();
                query = query.skip(this.virtualItemStartIndex);
                this.resetList(this.dataSource, this.fields, query);
                this.UpdateSkeleton();
                this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li);
                this.virtualItemCount = this.itemCount;
                if (this.mode !== "CheckBox") {
                  this.totalItemCount = this.value && this.value.length ? this.totalItemCount - this.value.length : this.totalItemCount;
                }
                if (!this.list.querySelector(".e-virtual-ddl")) {
                  var virualElement = this.createElement("div", {
                    id: this.element.id + "_popup",
                    className: "e-virtual-ddl"
                  });
                  virualElement.style.cssText = this.GetVirtualTrackHeight();
                  this.popupWrapper.querySelector(".e-dropdownbase").appendChild(virualElement);
                } else {
                  this.list.getElementsByClassName("e-virtual-ddl")[0].style = this.GetVirtualTrackHeight();
                }
                if (this.list.querySelector(".e-virtual-ddl-content")) {
                  this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
                }
              }
            }
          }
          this.refreshPlaceHolder();
          this.deselectHeader();
        }
      }
    };
    MultiSelect2.prototype.findGroupStart = function(target) {
      if (this.enableGroupCheckBox && this.mode === "CheckBox" && !isNullOrUndefined(this.fields.groupBy)) {
        var count2 = 0;
        var liChecked = 0;
        var liUnchecked = 0;
        var groupValues = void 0;
        if (this.itemTemplate && !target.getElementsByClassName("e-frame").length) {
          while (!target.getElementsByClassName("e-frame").length) {
            target = target.parentElement;
          }
        }
        if (target.classList.contains("e-frame")) {
          target = target.parentElement.parentElement;
        }
        groupValues = this.findGroupAttrtibutes(target, liChecked, liUnchecked, count2, 0);
        groupValues = this.findGroupAttrtibutes(target, groupValues[0], groupValues[1], groupValues[2], 1);
        while (!target.classList.contains("e-list-group-item")) {
          if (target.classList.contains("e-list-icon")) {
            target = target.parentElement;
          }
          target = target.previousElementSibling;
          if (target == null) {
            break;
          }
        }
        this.updateCheckBox(target, groupValues[0], groupValues[1], groupValues[2]);
      }
    };
    MultiSelect2.prototype.findGroupAttrtibutes = function(listElement, checked, unChecked, count2, position) {
      while (!listElement.classList.contains("e-list-group-item")) {
        if (!(this.fields.disabled && this.isDisabledElement(listElement))) {
          if (listElement.classList.contains("e-list-icon")) {
            listElement = listElement.parentElement;
          }
          if (listElement.getElementsByClassName("e-frame")[0].classList.contains("e-check") && listElement.classList.contains("e-list-item")) {
            checked++;
          } else if (listElement.classList.contains("e-list-item")) {
            unChecked++;
          }
          count2++;
        }
        listElement = position ? listElement.nextElementSibling : listElement.previousElementSibling;
        if (listElement == null) {
          break;
        }
      }
      return [checked, unChecked, count2];
    };
    MultiSelect2.prototype.updateCheckBox = function(groupHeader, checked, unChecked, count2) {
      if (groupHeader === null || !isNullOrUndefined(this.fields.disabled) && count2 === 0) {
        return;
      }
      var checkBoxElement = groupHeader.getElementsByClassName("e-frame")[0];
      if (count2 === checked) {
        checkBoxElement.classList.remove("e-stop");
        checkBoxElement.classList.add("e-check");
        closest(checkBoxElement, ".e-list-group-item").classList.add("e-active");
        groupHeader.setAttribute("aria-selected", "true");
      } else if (count2 === unChecked) {
        checkBoxElement.classList.remove("e-check");
        checkBoxElement.classList.remove("e-stop");
        closest(checkBoxElement, ".e-list-group-item").classList.remove("e-active");
        groupHeader.setAttribute("aria-selected", "false");
      } else if (this.maximumSelectionLength === checked - 1) {
        checkBoxElement.classList.remove("e-stop");
        groupHeader.setAttribute("aria-selected", "true");
        closest(checkBoxElement, ".e-list-group-item").classList.add("e-active");
        checkBoxElement.classList.add("e-check");
      } else {
        checkBoxElement.classList.remove("e-check");
        checkBoxElement.classList.add("e-stop");
        closest(checkBoxElement, ".e-list-group-item").classList.add("e-active");
        groupHeader.setAttribute("aria-selected", "false");
      }
    };
    MultiSelect2.prototype.disableGroupHeader = function() {
      var collection = this.list.querySelectorAll("li.e-list-group-item");
      if (collection) {
        for (var index = 0; index < collection.length; index++) {
          var isDisabled = true;
          var target = collection[index].nextElementSibling;
          while (!target.classList.contains("e-list-group-item")) {
            if (!this.isDisabledElement(target)) {
              isDisabled = false;
              break;
            }
            target = target.nextElementSibling;
            if (target == null) {
              break;
            }
          }
          if (isDisabled) {
            this.disableListItem(collection[index]);
          }
        }
      }
    };
    MultiSelect2.prototype.deselectHeader = function() {
      var limit = this.value && this.value.length ? this.value.length : 0;
      var collection = this.list.querySelectorAll("li.e-list-group-item:not(.e-active)");
      if (limit < this.maximumSelectionLength) {
        removeClass(collection, "e-disable");
      }
      if (limit === this.maximumSelectionLength) {
        addClass(collection, "e-disable");
      }
    };
    MultiSelect2.prototype.onMouseOver = function(e) {
      var currentLi = closest(e.target, "." + dropDownBaseClasses.li);
      if (currentLi === null && this.mode === "CheckBox" && !isNullOrUndefined(this.fields.groupBy) && this.enableGroupCheckBox) {
        currentLi = closest(e.target, "." + dropDownBaseClasses.group);
      }
      this.addListHover(currentLi);
    };
    MultiSelect2.prototype.onMouseLeave = function() {
      this.removeHover();
    };
    MultiSelect2.prototype.onListMouseDown = function(e) {
      e.preventDefault();
      this.scrollFocusStatus = true;
    };
    MultiSelect2.prototype.onDocumentClick = function(e) {
      if (this.mode !== "CheckBox") {
        var target = e.target;
        if (!(!isNullOrUndefined(this.popupObj) && closest(target, '[id="' + this.popupObj.element.id + '"]')) && !this.overAllWrapper.contains(e.target)) {
          this.scrollFocusStatus = false;
        } else {
          this.scrollFocusStatus = (Browser.isIE || Browser.info.name === "edge") && document.activeElement === this.inputElement;
        }
      }
    };
    MultiSelect2.prototype.wireListEvents = function() {
      if (!isNullOrUndefined(this.list)) {
        EventHandler.add(document, "mousedown", this.onDocumentClick, this);
        EventHandler.add(this.list, "mousedown", this.onListMouseDown, this);
        EventHandler.add(this.list, "mouseup", this.onMouseClick, this);
        EventHandler.add(this.list, "mouseover", this.onMouseOver, this);
        EventHandler.add(this.list, "mouseout", this.onMouseLeave, this);
      }
    };
    MultiSelect2.prototype.unwireListEvents = function() {
      EventHandler.remove(document, "mousedown", this.onDocumentClick);
      if (this.list) {
        EventHandler.remove(this.list, "mousedown", this.onListMouseDown);
        EventHandler.remove(this.list, "mouseup", this.onMouseClick);
        EventHandler.remove(this.list, "mouseover", this.onMouseOver);
        EventHandler.remove(this.list, "mouseout", this.onMouseLeave);
      }
    };
    MultiSelect2.prototype.hideOverAllClear = function() {
      if (!this.value || !this.value.length || this.inputElement.value === "") {
        this.overAllClear.style.display = "none";
      }
    };
    MultiSelect2.prototype.showOverAllClear = function() {
      if ((this.value && this.value.length || this.inputElement.value !== "") && this.showClearButton && this.readonly !== true) {
        this.overAllClear.style.display = "";
      } else {
        this.overAllClear.style.display = "none";
      }
    };
    MultiSelect2.prototype.focusIn = function() {
      if (document.activeElement !== this.inputElement && this.enabled) {
        this.inputElement.focus();
      }
    };
    MultiSelect2.prototype.focusOut = function() {
      if (document.activeElement === this.inputElement && this.enabled) {
        this.inputElement.blur();
      }
    };
    MultiSelect2.prototype.showSpinner = function() {
      if (isNullOrUndefined(this.spinnerElement)) {
        var filterClear = this.filterParent && this.filterParent.querySelector(".e-clear-icon.e-icons");
        if (this.overAllClear.style.display !== "none" || filterClear) {
          this.spinnerElement = filterClear ? filterClear : this.overAllClear;
        } else {
          this.spinnerElement = this.createElement("span", {
            className: CLOSEICON_CLASS2 + " " + SPINNER_CLASS2
          });
          this.componentWrapper.appendChild(this.spinnerElement);
        }
        createSpinner({
          target: this.spinnerElement,
          width: Browser.isDevice ? "16px" : "14px"
        }, this.createElement);
        addClass([this.spinnerElement], DISABLE_ICON);
        showSpinner(this.spinnerElement);
      }
    };
    MultiSelect2.prototype.hideSpinner = function() {
      if (!isNullOrUndefined(this.spinnerElement)) {
        hideSpinner(this.spinnerElement);
        removeClass([this.spinnerElement], DISABLE_ICON);
        if (this.spinnerElement.classList.contains(SPINNER_CLASS2)) {
          detach(this.spinnerElement);
        } else {
          this.spinnerElement.innerHTML = "";
        }
        this.spinnerElement = null;
      }
    };
    MultiSelect2.prototype.updateWrapperText = function(wrapperType, wrapperData) {
      if (this.valueTemplate || !this.enableHtmlSanitizer) {
        wrapperType.innerHTML = this.encodeHtmlEntities(wrapperData);
      } else {
        wrapperType.innerText = wrapperData;
      }
    };
    MultiSelect2.prototype.updateDelimView = function() {
      if (this.delimiterWrapper) {
        this.hideDelimWrapper();
      }
      if (this.chipCollectionWrapper) {
        this.chipCollectionWrapper.style.display = "none";
      }
      if (!isNullOrUndefined(this.viewWrapper)) {
        this.viewWrapper.style.display = "";
        this.viewWrapper.style.width = "";
        this.viewWrapper.classList.remove(TOTAL_COUNT_WRAPPER2);
      }
      if (this.value && this.value.length) {
        var data = "";
        var temp = void 0;
        var tempData = void 0;
        var tempIndex = 1;
        var wrapperleng = void 0;
        var remaining = void 0;
        var downIconWidth = 0;
        var overAllContainer = void 0;
        if (!this.enableVirtualization) {
          this.updateWrapperText(this.viewWrapper, data);
        }
        var l10nLocale = {
          noRecordsTemplate: "No records found",
          actionFailureTemplate: "Request failed",
          overflowCountTemplate: "+${count} more..",
          totalCountTemplate: "${count} selected"
        };
        var l10n = new L10n(this.getLocaleName(), l10nLocale, this.locale);
        if (l10n.getConstant("actionFailureTemplate") === "") {
          l10n = new L10n("dropdowns", l10nLocale, this.locale);
        }
        if (l10n.getConstant("noRecordsTemplate") === "") {
          l10n = new L10n("dropdowns", l10nLocale, this.locale);
        }
        var remainContent = l10n.getConstant("overflowCountTemplate");
        var totalContent = l10n.getConstant("totalCountTemplate");
        var raminElement = this.createElement("span", {
          className: REMAIN_WRAPPER2
        });
        var remainCompildTemp = remainContent.replace("${count}", this.value.length.toString());
        raminElement.innerText = remainCompildTemp;
        this.viewWrapper.appendChild(raminElement);
        this.renderReactTemplates();
        var remainSize = raminElement.offsetWidth;
        remove(raminElement);
        if (this.showDropDownIcon) {
          downIconWidth = this.dropIcon.offsetWidth + parseInt(window.getComputedStyle(this.dropIcon).marginRight, 10);
        }
        this.checkClearIconWidth();
        if (!isNullOrUndefined(this.value) && (this.allowCustomValue || this.listData && this.listData.length > 0)) {
          for (var index = 0; !isNullOrUndefined(this.value[index]); index++) {
            var items = this.text && this.text.split(this.delimiterChar);
            if (!this.enableVirtualization) {
              data += index === 0 ? "" : this.delimiterChar + " ";
              temp = this.getOverflowVal(index);
              data += temp;
              temp = this.viewWrapper.innerHTML;
              this.updateWrapperText(this.viewWrapper, data);
            } else if (items) {
              data += index === 0 ? "" : this.delimiterChar + " ";
              temp = items[index];
              data += temp;
              temp = this.viewWrapper.innerHTML;
              this.updateWrapperText(this.viewWrapper, data);
            }
            wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10) + parseInt(window.getComputedStyle(this.viewWrapper).paddingLeft, 10);
            overAllContainer = this.componentWrapper.offsetWidth - parseInt(window.getComputedStyle(this.componentWrapper).paddingLeft, 10) - parseInt(window.getComputedStyle(this.componentWrapper).paddingRight, 10);
            if (wrapperleng + downIconWidth + this.clearIconWidth > overAllContainer) {
              if (tempData !== void 0 && tempData !== "") {
                temp = tempData;
                index = tempIndex + 1;
              }
              this.updateWrapperText(this.viewWrapper, temp);
              remaining = this.value.length - index;
              wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10) + parseInt(window.getComputedStyle(this.viewWrapper).paddingLeft, 10);
              while (wrapperleng + remainSize + downIconWidth + this.clearIconWidth > overAllContainer && wrapperleng !== 0 && this.viewWrapper.innerHTML !== "") {
                var textArr = [];
                this.viewWrapper.innerHTML = textArr.join(this.delimiterChar);
                remaining = this.value.length;
                wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10) + parseInt(window.getComputedStyle(this.viewWrapper).paddingLeft, 10);
              }
              break;
            } else if (wrapperleng + remainSize + downIconWidth + this.clearIconWidth <= overAllContainer) {
              tempData = data;
              tempIndex = index;
            } else if (index === 0) {
              tempData = "";
              tempIndex = -1;
            }
          }
        }
        if (remaining > 0) {
          var totalWidth = overAllContainer - downIconWidth - this.clearIconWidth;
          this.viewWrapper.appendChild(this.updateRemainTemplate(raminElement, this.viewWrapper, remaining, remainContent, totalContent, totalWidth));
          this.updateRemainWidth(this.viewWrapper, totalWidth);
          this.updateRemainingText(raminElement, downIconWidth, remaining, remainContent, totalContent);
        }
      } else {
        if (!isNullOrUndefined(this.viewWrapper)) {
          this.viewWrapper.innerHTML = "";
          this.viewWrapper.style.display = "none";
        }
      }
    };
    MultiSelect2.prototype.checkClearIconWidth = function() {
      if (this.showClearButton) {
        this.clearIconWidth = parseInt(window.getComputedStyle(this.overAllClear).width, 10) || this.overAllClear.offsetWidth;
      }
    };
    MultiSelect2.prototype.updateRemainWidth = function(viewWrapper, totalWidth) {
      if (viewWrapper.classList.contains(TOTAL_COUNT_WRAPPER2) && totalWidth < viewWrapper.offsetWidth + parseInt(window.getComputedStyle(viewWrapper).paddingLeft, 10) + parseInt(window.getComputedStyle(viewWrapper).paddingRight, 10)) {
        viewWrapper.style.width = totalWidth + "px";
      }
    };
    MultiSelect2.prototype.updateRemainTemplate = function(raminElement, viewWrapper, remaining, remainContent, totalContent, totalWidth) {
      if (viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3 && viewWrapper.firstChild.nodeValue === "") {
        viewWrapper.removeChild(viewWrapper.firstChild);
      }
      raminElement.innerHTML = "";
      var remainTemp = remainContent.replace("${count}", remaining.toString());
      var totalTemp = totalContent.replace("${count}", remaining.toString());
      raminElement.innerText = viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3 ? remainTemp : totalTemp;
      if (viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3) {
        viewWrapper.classList.remove(TOTAL_COUNT_WRAPPER2);
      } else {
        viewWrapper.classList.add(TOTAL_COUNT_WRAPPER2);
        this.updateRemainWidth(viewWrapper, totalWidth);
      }
      return raminElement;
    };
    MultiSelect2.prototype.updateRemainingText = function(raminElement, downIconWidth, remaining, remainContent, totalContent) {
      var overAllContainer = this.componentWrapper.offsetWidth - parseInt(window.getComputedStyle(this.componentWrapper).paddingLeft, 10) - parseInt(window.getComputedStyle(this.componentWrapper).paddingRight, 10);
      var wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);
      if (wrapperleng + downIconWidth >= overAllContainer && wrapperleng !== 0 && this.viewWrapper.firstChild && this.viewWrapper.firstChild.nodeType === 3) {
        while (wrapperleng + downIconWidth > overAllContainer && wrapperleng !== 0 && this.viewWrapper.firstChild && this.viewWrapper.firstChild.nodeType === 3) {
          var textArr = this.viewWrapper.firstChild.nodeValue.split(this.delimiterChar);
          textArr.pop();
          this.viewWrapper.firstChild.nodeValue = textArr.join(this.delimiterChar);
          if (this.viewWrapper.firstChild.nodeValue === "") {
            this.viewWrapper.removeChild(this.viewWrapper.firstChild);
          }
          remaining++;
          wrapperleng = this.viewWrapper.offsetWidth;
        }
        var totalWidth = overAllContainer - downIconWidth;
        this.updateRemainTemplate(raminElement, this.viewWrapper, remaining, remainContent, totalContent, totalWidth);
      }
    };
    MultiSelect2.prototype.getOverflowVal = function(index) {
      var temp;
      if (this.mainData && this.mainData.length) {
        var value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value[index]) : this.value[index];
        if (this.mode === "CheckBox") {
          var newTemp = this.listData;
          this.listData = this.mainData;
          temp = this.getTextByValue(value);
          this.listData = newTemp;
        } else {
          temp = this.getTextByValue(value);
        }
      } else {
        temp = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value[index]) : this.value[index];
      }
      return temp;
    };
    MultiSelect2.prototype.unWireEvent = function() {
      if (!isNullOrUndefined(this.componentWrapper)) {
        EventHandler.remove(this.componentWrapper, "mousedown", this.wrapperClick);
      }
      EventHandler.remove(window, "resize", this.windowResize);
      if (!isNullOrUndefined(this.inputElement)) {
        EventHandler.remove(this.inputElement, "focus", this.focusInHandler);
        EventHandler.remove(this.inputElement, "keydown", this.onKeyDown);
        if (this.mode !== "CheckBox") {
          EventHandler.remove(this.inputElement, "input", this.onInput);
        }
        EventHandler.remove(this.inputElement, "keyup", this.keyUp);
        var formElement = closest(this.inputElement, "form");
        if (formElement) {
          EventHandler.remove(formElement, "reset", this.resetValueHandler);
        }
        EventHandler.remove(this.inputElement, "blur", this.onBlurHandler);
      }
      if (!isNullOrUndefined(this.componentWrapper)) {
        EventHandler.remove(this.componentWrapper, "mouseover", this.mouseIn);
        EventHandler.remove(this.componentWrapper, "mouseout", this.mouseOut);
      }
      if (!isNullOrUndefined(this.overAllClear)) {
        EventHandler.remove(this.overAllClear, "mousedown", this.clearAll);
      }
      if (!isNullOrUndefined(this.inputElement)) {
        EventHandler.remove(this.inputElement, "paste", this.pasteHandler);
      }
    };
    MultiSelect2.prototype.resizingWireEvent = function() {
      EventHandler.add(document, "mousemove", this.resizePopup, this);
      EventHandler.add(document, "mouseup", this.stopResizing, this);
      EventHandler.add(document, "touchmove", this.resizePopup, this);
      EventHandler.add(document, "touchend", this.stopResizing, this);
    };
    MultiSelect2.prototype.resizingUnWireEvent = function() {
      EventHandler.remove(document, "mousemove", this.resizePopup);
      EventHandler.remove(document, "mouseup", this.stopResizing);
      EventHandler.remove(document, "touchmove", this.resizePopup);
      EventHandler.remove(document, "touchend", this.stopResizing);
    };
    MultiSelect2.prototype.selectAllItem = function(state, event2, list) {
      var li;
      if (!isNullOrUndefined(this.list)) {
        li = this.list.querySelectorAll(state ? 'li.e-list-item:not([aria-selected="true"]):not(.e-reorder-hide):not(.e-disabled):not(.e-virtual-list)' : 'li.e-list-item[aria-selected="true"]:not(.e-reorder-hide):not(.e-disabled):not(.e-virtual-list)');
      }
      if (this.value && this.value.length && event2 && event2.target && closest(event2.target, ".e-close-hooker") && this.allowFiltering) {
        li = this.mainList.querySelectorAll(state ? 'li.e-list-item:not([aria-selected="true"]):not(.e-reorder-hide):not(.e-disabled):not(.e-virtual-list)' : 'li.e-list-item[aria-selected="true"]:not(.e-reorder-hide):not(.e-disabled):not(.e-virtual-list)');
      }
      if (this.enableGroupCheckBox && this.mode === "CheckBox" && !isNullOrUndefined(this.fields.groupBy)) {
        var target = event2 ? this.groupTemplate ? closest(event2.target, ".e-list-group-item") : event2.target : null;
        target = event2 && event2.keyCode === 32 ? list : target;
        target = target && target.classList.contains("e-frame") ? target.parentElement.parentElement : target;
        if (target && target.classList.contains("e-list-group-item")) {
          var listElement = target.nextElementSibling;
          if (isNullOrUndefined(listElement)) {
            return;
          }
          while (listElement.classList.contains("e-list-item")) {
            if (!(this.fields.disabled && this.isDisabledElement(listElement))) {
              if (state) {
                if (!listElement.firstElementChild.lastElementChild.classList.contains("e-check")) {
                  var selectionLimit = this.value && this.value.length ? this.value.length : 0;
                  if (listElement.classList.contains("e-active")) {
                    selectionLimit -= 1;
                  }
                  if (selectionLimit < this.maximumSelectionLength) {
                    this.updateListSelection(listElement, event2);
                  }
                }
              } else {
                if (listElement.firstElementChild.lastElementChild.classList.contains("e-check")) {
                  this.updateListSelection(listElement, event2);
                }
              }
            }
            listElement = listElement.nextElementSibling;
            if (listElement == null) {
              break;
            }
          }
          if (target.classList.contains("e-list-group-item")) {
            var focusedElement = this.list.getElementsByClassName("e-item-focus")[0];
            if (focusedElement) {
              focusedElement.classList.remove("e-item-focus");
            }
            if (state) {
              target.classList.add("e-active");
            } else {
              target.classList.remove("e-active");
            }
            target.classList.add("e-item-focus");
            this.updateAriaActiveDescendant();
          }
          this.textboxValueUpdate();
          this.checkPlaceholderSize();
          if (!this.changeOnBlur && event2) {
            this.updateValueState(event2, this.value, this.tempValues);
          }
        } else {
          this.updateValue(event2, li, state);
        }
      } else {
        this.updateValue(event2, li, state);
      }
      this.addValidInputClass();
    };
    MultiSelect2.prototype.virtualSelectionAll = function(state, li, event2) {
      var _this = this;
      var index = 0;
      var length = li.length;
      var count2 = this.maximumSelectionLength;
      if (state) {
        this.virtualSelectAll = true;
        length = this.virtualSelectAllData && this.virtualSelectAllData.length !== 0 ? this.virtualSelectAllData.length : length;
        this.listData = this.virtualSelectAllData;
        var ulElement = this.createListItems(this.virtualSelectAllData.slice(0, 30), this.fields);
        var firstItems = ulElement.querySelectorAll("li");
        var fragment_1 = document.createDocumentFragment();
        firstItems.forEach(function(node) {
          fragment_1.appendChild(node.cloneNode(true));
        });
        li.forEach(function(node) {
          fragment_1.appendChild(node.cloneNode(true));
        });
        var concatenatedNodeList = fragment_1.childNodes;
        if (this.virtualSelectAllData instanceof Array) {
          while (index < length && index <= 50 && index < count2) {
            this.isSelectAllTarget = length === index + 1;
            if (concatenatedNodeList[index]) {
              var value = this.allowObjectBinding ? this.getDataByValue(concatenatedNodeList[index].getAttribute("data-value")) : this.getFormattedValue(concatenatedNodeList[index].getAttribute("data-value"));
              if (!this.allowObjectBinding && this.value && this.value.indexOf(value) >= 0 || this.allowObjectBinding && this.indexOfObjectInArray(value, this.value) >= 0) {
                index++;
                continue;
              }
              this.updateListSelection(concatenatedNodeList[index], event2, length - index);
            } else {
              var value = getValue(this.fields.value ? this.fields.value : "", this.virtualSelectAllData[index]);
              value = this.allowObjectBinding ? this.getDataByValue(value) : value;
              if (!this.allowObjectBinding && this.value && this.value.indexOf(value) >= 0 || this.allowObjectBinding && this.indexOfObjectInArray(value, this.value) >= 0) {
                index++;
                continue;
              }
              if (this.value && value != null && Array.isArray(this.value) && (!this.allowObjectBinding && this.value.indexOf(value) < 0 || this.allowObjectBinding && !this.isObjectInArray(value, this.value))) {
                this.dispatchSelect(value, event2, null, false, length);
              }
            }
            index++;
          }
          if (length > 50) {
            setTimeout(function() {
              if (_this.virtualSelectAllData && _this.virtualSelectAllData.length > 0) {
                _this.virtualSelectAllData.map(function(obj) {
                  if (_this.value && obj[_this.fields.value] != null && Array.isArray(_this.value) && (!_this.allowObjectBinding && _this.value.indexOf(obj[_this.fields.value]) < 0 || _this.allowObjectBinding && !_this.isObjectInArray(obj[_this.fields.value], _this.value))) {
                    var value2 = obj[_this.fields.value];
                    var text = obj[_this.fields.text].toString();
                    _this.dispatchSelect(value2, event2, null, false, length, obj, text);
                  }
                });
              }
              _this.updatedataValueItems(event2);
              _this.isSelectAllLoop = false;
              if (!_this.changeOnBlur) {
                _this.updateValueState(event2, _this.value, _this.tempValues);
                _this.isSelectAll = _this.isSelectAll ? !_this.isSelectAll : _this.isSelectAll;
              }
              _this.updateHiddenElement(true);
              if (_this.popupWrapper && li[index - 1] && li[index - 1].classList.contains("e-item-focus")) {
                var selectAllParent = document.getElementsByClassName("e-selectall-parent")[0];
                if (selectAllParent && selectAllParent.classList.contains("e-item-focus")) {
                  li[index - 1].classList.remove("e-item-focus");
                }
              }
              _this.checkSelectAll();
            }, 0);
          }
        }
      } else {
        if (this.virtualSelectAllData && this.virtualSelectAllData.length > 0) {
          this.virtualSelectAllData.map(function(obj) {
            _this.virtualSelectAll = true;
            _this.removeValue(_this.value[index], event2, _this.value.length - index);
          });
        }
        this.updatedataValueItems(event2);
        if (!this.changeOnBlur) {
          this.updateValueState(event2, this.value, this.tempValues);
          this.isSelectAll = this.isSelectAll ? !this.isSelectAll : this.isSelectAll;
        }
        this.updateHiddenElement();
        this.setProperties({
          value: []
        }, true);
        this.virtualSelectAll = false;
        if (!isNullOrUndefined(this.viewPortInfo.startIndex) && !isNullOrUndefined(this.viewPortInfo.endIndex)) {
          this.notify("setCurrentViewDataAsync", {
            component: this.getModuleName(),
            module: "VirtualScroll"
          });
        }
      }
      this.checkSelectAll();
      var virtualTrackElement = this.list.getElementsByClassName("e-virtual-ddl")[0];
      if (virtualTrackElement) {
        virtualTrackElement.style = this.GetVirtualTrackHeight();
      }
      this.UpdateSkeleton();
      var virtualContentElement = this.list.getElementsByClassName("e-virtual-ddl-content")[0];
      if (virtualContentElement) {
        virtualContentElement.style = this.getTransformValues();
      }
    };
    MultiSelect2.prototype.updateValue = function(event2, li, state) {
      var _this = this;
      var length = li.length;
      var beforeSelectArgs = {
        event: event2,
        items: state ? li : [],
        itemData: state ? this.listData : [],
        isInteracted: event2 ? true : false,
        isChecked: state,
        preventSelectEvent: false
      };
      this.trigger("beforeSelectAll", beforeSelectArgs);
      if (li && li.length || this.enableVirtualization && !state) {
        var index_1 = 0;
        var count_1 = 0;
        if (this.enableGroupCheckBox) {
          count_1 = state ? this.maximumSelectionLength - (this.value ? this.value.length : 0) : li.length;
        } else {
          count_1 = state ? this.maximumSelectionLength - (this.value ? this.value.length : 0) : this.maximumSelectionLength;
        }
        if (!beforeSelectArgs.preventSelectEvent) {
          if (this.enableVirtualization) {
            this.virtualSelectAllState = state;
            this.virtualSelectAll = true;
            this.CurrentEvent = event2;
            if (!this.virtualSelectAllData) {
              this.resetList(this.dataSource, this.fields, new Query());
            }
            if (this.virtualSelectAllData) {
              this.virtualSelectionAll(state, li, event2);
            }
          } else {
            while (index_1 < length && index_1 <= 50 && index_1 < count_1) {
              this.isSelectAllTarget = length === index_1 + 1;
              this.updateListSelection(li[index_1], event2, length - index_1);
              if (this.enableGroupCheckBox) {
                this.findGroupStart(li[index_1]);
              }
              index_1++;
            }
            if (length > 50) {
              setTimeout(function() {
                while (index_1 < length && index_1 < count_1) {
                  _this.isSelectAllTarget = length === index_1 + 1;
                  _this.updateListSelection(li[index_1], event2, length - index_1);
                  if (_this.enableGroupCheckBox) {
                    _this.findGroupStart(li[index_1]);
                  }
                  index_1++;
                }
                _this.updatedataValueItems(event2);
                if (!_this.changeOnBlur) {
                  _this.updateValueState(event2, _this.value, _this.tempValues);
                  _this.isSelectAll = _this.isSelectAll ? !_this.isSelectAll : _this.isSelectAll;
                }
                _this.updateHiddenElement();
                if (_this.popupWrapper && li[index_1 - 1].classList.contains("e-item-focus")) {
                  var selectAllParent = document.getElementsByClassName("e-selectall-parent")[0];
                  if (selectAllParent && selectAllParent.classList.contains("e-item-focus")) {
                    li[index_1 - 1].classList.remove("e-item-focus");
                  }
                }
              }, 0);
            }
          }
        } else {
          for (var i = 0; i < li.length && i < count_1; i++) {
            this.removeHover();
            var customVal = li[i].getAttribute("data-value");
            var value = this.getFormattedValue(customVal);
            value = this.allowObjectBinding ? this.getDataByValue(value) : value;
            var mainElement = this.mainList ? this.mainList.querySelectorAll(state ? 'li.e-list-item:not([aria-selected="true"]):not(.e-reorder-hide)' : 'li.e-list-item[aria-selected="true"]:not(.e-reorder-hide)')[i] : null;
            if (state) {
              this.value = !this.value ? [] : this.value;
              if (!this.allowObjectBinding && this.value.indexOf(value) < 0 || this.allowObjectBinding && !this.isObjectInArray(value, this.value)) {
                this.setProperties({
                  value: [].concat([], this.value, [value])
                }, true);
              }
              this.removeFocus();
              this.addListSelection(li[i], mainElement);
              this.updateChipStatus();
              this.checkMaxSelection();
            } else {
              this.removeAllItems(value, event2, false, li[i], mainElement);
            }
            if (this.enableGroupCheckBox) {
              this.findGroupStart(li[i]);
            }
          }
          if (!state) {
            var limit = this.value && this.value.length ? this.value.length : 0;
            if (limit < this.maximumSelectionLength) {
              var collection = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-active)");
              removeClass(collection, "e-disable");
            }
          }
          var args = {
            event: event2,
            items: state ? li : [],
            itemData: state ? this.listData : [],
            isInteracted: event2 ? true : false,
            isChecked: state
          };
          this.trigger("selectedAll", args);
        }
      }
      this.updatedataValueItems(event2);
      this.checkPlaceholderSize();
      if (length <= 50 && !beforeSelectArgs.preventSelectEvent) {
        if (!this.changeOnBlur) {
          this.updateValueState(event2, this.value, this.tempValues);
          this.isSelectAll = this.isSelectAll ? !this.isSelectAll : this.isSelectAll;
        }
        if (this.enableVirtualization && this.value && this.value.length > 0 || !this.enableVirtualization) {
          this.updateHiddenElement();
        }
      }
    };
    MultiSelect2.prototype.updateHiddenElement = function(isVirtualSelectAll) {
      var _this = this;
      var hiddenValue = "";
      var wrapperText = "";
      var data = "";
      var text = [];
      if (this.mode === "CheckBox") {
        this.value.map(function(value, index) {
          hiddenValue += '<option selected value ="' + value + '">' + index + "</option>";
          if (!isVirtualSelectAll) {
            if (_this.listData) {
              data = _this.getTextByValue(value);
            } else {
              data = value;
            }
            wrapperText += data + _this.delimiterChar + " ";
            text.push(data);
          }
        });
        this.hiddenElement.innerHTML = hiddenValue;
        if (!isVirtualSelectAll) {
          this.updateWrapperText(this.delimiterWrapper, wrapperText);
          this.setProperties({
            text: text.toString()
          }, true);
        }
        this.delimiterWrapper.setAttribute("id", getUniqueID("delim_val"));
        this.inputElement.setAttribute("aria-describedby", this.delimiterWrapper.id);
        this.refreshInputHight();
        this.refreshPlaceHolder();
      }
    };
    MultiSelect2.prototype.updatedataValueItems = function(event2) {
      this.deselectHeader();
      this.textboxValueUpdate(event2);
    };
    MultiSelect2.prototype.textboxValueUpdate = function(event2) {
      var isRemoveAll = event2 && event2.target && (closest(event2.target, ".e-selectall-parent") || closest(event2.target, ".e-close-hooker"));
      if (this.mode !== "Box" && !this.isPopupOpen() && !(this.mode === "CheckBox" && (this.isSelectAll || isRemoveAll))) {
        this.updateDelimView();
      } else {
        this.searchWrapper.classList.remove(ZERO_SIZE);
      }
      if (this.mode === "CheckBox") {
        this.updateDelimView();
        if (!(isRemoveAll || this.isSelectAll) && this.isSelectAllTarget || this.isSelectAll && this.isSelectAllTarget) {
          this.updateDelimeter(this.delimiterChar, event2);
        }
        this.refreshInputHight();
      } else {
        this.updateDelimeter(this.delimiterChar, event2);
      }
      this.refreshPlaceHolder();
    };
    MultiSelect2.prototype.setZIndex = function() {
      if (this.popupObj) {
        this.popupObj.setProperties({
          "zIndex": this.zIndex
        });
      }
    };
    MultiSelect2.prototype.updateDataSource = function(prop) {
      this.checkAndResetCache();
      if (isNullOrUndefined(this.list)) {
        this.renderPopup();
      } else {
        this.resetList(this.dataSource);
      }
      if (this.value && this.value.length) {
        this.setProperties({
          "value": this.value
        });
        this.refreshSelection();
      }
    };
    MultiSelect2.prototype.onLoadSelect = function() {
      this.setDynValue = true;
      this.renderPopup();
    };
    MultiSelect2.prototype.selectAllItems = function(state, event2) {
      var _this = this;
      if (isNullOrUndefined(this.list)) {
        this.selectAllAction = function() {
          if (_this.mode === "CheckBox" && _this.showSelectAll) {
            var args2 = {
              module: "CheckBoxSelection",
              enable: _this.mode === "CheckBox",
              value: state ? "check" : "uncheck"
            };
            _this.notify("checkSelectAll", args2);
          }
          _this.selectAllItem(state, event2);
          _this.selectAllAction = null;
        };
        _super.prototype.render.call(this);
      } else {
        this.selectAllAction = null;
        if (this.mode === "CheckBox" && this.showSelectAll) {
          var args = {
            value: state ? "check" : "uncheck",
            enable: this.mode === "CheckBox",
            module: "CheckBoxSelection"
          };
          this.notify("checkSelectAll", args);
        }
        this.selectAllItem(state, event2);
      }
      if (!(this.dataSource instanceof DataManager) || this.dataSource instanceof DataManager && this.virtualSelectAllData) {
        this.virtualSelectAll = false;
      }
    };
    MultiSelect2.prototype.getPersistData = function() {
      return this.addOnPersist(["value"]);
    };
    MultiSelect2.prototype.onPropertyChanged = function(newProp, oldProp) {
      if (newProp.dataSource && !isNullOrUndefined(Object.keys(newProp.dataSource)) || newProp.query && !isNullOrUndefined(Object.keys(newProp.query))) {
        this.mainList = null;
        this.mainData = null;
        this.isFirstClick = false;
        this.isDynamicDataChange = true;
      }
      if (this.getModuleName() === "multiselect") {
        this.filterAction = false;
        this.setUpdateInitial(["fields", "query", "dataSource"], newProp);
      }
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "query":
          case "dataSource":
            if (this.mode === "CheckBox" && this.showSelectAll) {
              if (!isNullOrUndefined(this.popupObj)) {
                this.popupObj.destroy();
                this.popupObj = null;
              }
              this.renderPopup();
            }
            break;
          case "htmlAttributes":
            this.updateHTMLAttribute();
            break;
          case "showClearButton":
            this.updateClearButton(newProp.showClearButton);
            break;
          case "text":
            if (this.fields.disabled) {
              this.text = this.text && !this.isDisabledItemByIndex(this.getIndexByValue(this.getValueByText(this.text))) ? this.text : null;
            }
            this.updateVal(this.value, this.value, "text");
            break;
          case "value":
            if (this.fields.disabled) {
              this.removeDisabledItemsValue(this.value);
            }
            this.updateVal(this.value, oldProp.value, "value");
            this.addValidInputClass();
            if (!this.closePopupOnSelect && this.isPopupOpen()) {
              this.refreshPopup();
            }
            if (this.isPopupOpen() && this.mode === "CheckBox" && this.list && this.list.querySelector(".e-active.e-disable")) {
              var activeItems = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ".e-active.e-disable");
              removeClass(activeItems, "e-disable");
            }
            this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;
            break;
          case "width":
            this.setWidth(newProp.width);
            this.popupObj.setProperties({
              width: this.calcPopupWidth()
            });
            break;
          case "placeholder":
            this.refreshPlaceHolder();
            break;
          case "filterBarPlaceholder":
            if (this.allowFiltering) {
              this.notify("filterBarPlaceholder", {
                filterBarPlaceholder: newProp.filterBarPlaceholder
              });
            }
            break;
          case "delimiterChar":
            if (this.mode !== "Box") {
              this.updateDelimView();
            }
            this.updateData(newProp.delimiterChar);
            break;
          case "cssClass":
            this.updateOldPropCssClass(oldProp.cssClass);
            this.updateCssClass();
            this.calculateWidth();
            break;
          case "enableRtl":
            this.enableRTL(newProp.enableRtl);
            _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
            break;
          case "allowResize":
            this.allowResize = newProp.allowResize;
            if (!this.allowResize && this.popupObj) {
              var overAllHeight = parseInt(this.popupHeight, 10);
              if (this.popupHeight !== "auto") {
                this.list.style.maxHeight = formatUnit(overAllHeight);
                this.popupWrapper.style.height = formatUnit(this.popupHeight);
                this.popupWrapper.style.maxHeight = formatUnit(this.popupHeight);
              } else {
                this.list.style.maxHeight = formatUnit(this.popupHeight);
              }
            }
            break;
          case "readonly":
            this.updateReadonly(newProp.readonly);
            this.hidePopup();
            break;
          case "enabled":
            this.hidePopup();
            this.enable(newProp.enabled);
            break;
          case "showSelectAll":
            if (this.popupObj) {
              this.popupObj.destroy();
              this.popupObj = null;
            }
            this.renderPopup();
            break;
          case "showDropDownIcon":
            this.dropDownIcon();
            break;
          case "floatLabelType":
            this.setFloatLabelType();
            this.addValidInputClass();
            Input.createSpanElement(this.overAllWrapper, this.createElement);
            this.calculateWidth();
            if (!isNullOrUndefined(this.overAllWrapper) && !isNullOrUndefined(this.overAllWrapper.getElementsByClassName("e-ddl-icon")[0] && this.overAllWrapper.getElementsByClassName("e-float-text-content")[0] && this.floatLabelType !== "Never")) {
              this.overAllWrapper.getElementsByClassName("e-float-text-content")[0].classList.add("e-icon");
            }
            break;
          case "enableSelectionOrder":
            break;
          case "selectAllText":
            this.notify("selectAllText", false);
            break;
          case "popupHeight":
            if (this.popupObj) {
              var overAllHeight = parseInt(this.popupHeight, 10);
              if (this.popupHeight !== "auto") {
                this.list.style.maxHeight = formatUnit(overAllHeight);
                this.popupWrapper.style.maxHeight = formatUnit(this.popupHeight);
              } else {
                this.list.style.maxHeight = formatUnit(this.popupHeight);
              }
            }
            break;
          case "headerTemplate":
          case "footerTemplate":
            this.reInitializePoup();
            break;
          case "allowFiltering":
            if (this.mode === "CheckBox" && this.popupObj) {
              this.reInitializePoup();
            }
            this.updateSelectElementData(this.allowFiltering);
            break;
          case "fields":
            if (isNullOrUndefined(this.fields.groupBy)) {
              this.removeScrollEvent();
            }
            break;
          default:
            {
              var msProps = this.getPropObject(prop, newProp, oldProp);
              _super.prototype.onPropertyChanged.call(this, msProps.newProperty, msProps.oldProperty);
            }
            break;
        }
      }
    };
    MultiSelect2.prototype.reInitializePoup = function() {
      if (this.popupObj) {
        this.popupObj.destroy();
        this.popupObj = null;
      }
      this.renderPopup();
    };
    MultiSelect2.prototype.totalItemsCount = function() {
      var dataSourceCount;
      if (this.dataSource instanceof DataManager) {
        if (this.remoteDataCount >= 0) {
          dataSourceCount = this.totalItemCount = this.dataCount = this.remoteDataCount;
        } else {
          this.resetList(this.dataSource);
        }
      } else {
        dataSourceCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;
      }
      if (this.mode === "CheckBox") {
        this.totalItemCount = dataSourceCount !== 0 ? dataSourceCount : this.totalItemCount;
      } else {
        if (this.hideSelectedItem) {
          this.totalItemCount = dataSourceCount !== 0 && this.value ? dataSourceCount - this.value.length : this.totalItemCount;
          if (this.allowCustomValue && this.virtualCustomSelectData && this.virtualCustomSelectData.length > 0) {
            for (var i = 0; i < this.virtualCustomSelectData.length; i++) {
              for (var j = 0; j < this.value.length; j++) {
                var value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value[j]) : this.value[j];
                var customValue = getValue(this.fields.value ? this.fields.value : "", this.virtualCustomSelectData[i]);
                if (value === customValue) {
                  this.totalItemCount += 1;
                }
              }
            }
          }
        } else {
          this.totalItemCount = dataSourceCount !== 0 ? dataSourceCount : this.totalItemCount;
          if (this.allowCustomValue && this.virtualCustomSelectData && this.virtualCustomSelectData.length > 0) {
            this.totalItemCount += this.virtualCustomSelectData.length;
          }
        }
      }
    };
    MultiSelect2.prototype.presentItemValue = function(ulElement) {
      var valuecheck = [];
      for (var i = 0; i < this.value.length; i++) {
        var value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value[i]) : this.value[i];
        var checkEle = this.findListElement(this.allowFiltering && !isNullOrUndefined(this.mainList) ? this.mainList : ulElement, "li", "data-value", value);
        if (!checkEle) {
          var checkvalue = this.allowObjectBinding ? this.getDataByValue(this.value[i]) : this.value[i];
          valuecheck.push(checkvalue);
        }
      }
      return valuecheck;
    };
    MultiSelect2.prototype.addNonPresentItems = function(valuecheck, ulElement, list, event2) {
      var _this = this;
      this.dataSource.executeQuery(this.getForQuery(valuecheck)).then(function(e) {
        if (e.result.length > 0) {
          _this.addItem(e.result, list.length);
        }
        _this.updateActionList(ulElement, list, event2);
      });
    };
    MultiSelect2.prototype.updateVal = function(newProp, oldProp, prop) {
      if (!this.list) {
        this.onLoadSelect();
      } else if (this.dataSource instanceof DataManager && (!this.listData || !(this.mainList && this.mainData))) {
        this.onLoadSelect();
      } else {
        var valuecheck = [];
        if (!isNullOrUndefined(this.value) && !this.allowCustomValue) {
          valuecheck = this.presentItemValue(this.ulElement);
        }
        if (prop === "value" && valuecheck.length > 0 && this.dataSource instanceof DataManager && !isNullOrUndefined(this.value) && this.listData != null) {
          this.mainData = null;
          this.setDynValue = true;
          this.isaddNonPresentItems = true;
          this.addNonPresentItems(valuecheck, this.ulElement, this.listData);
          this.isaddNonPresentItems = false;
        } else {
          if (prop === "text") {
            this.initialTextUpdate();
            newProp = this.value;
          }
          if (isNullOrUndefined(this.value) || this.value.length === 0) {
            this.tempValues = oldProp;
          }
          if (this.allowCustomValue && (this.mode === "Default" || this.mode === "Box") && this.isReact && this.inputFocus && this.isPopupOpen() && this.mainData !== this.listData) {
            var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
            this.onActionComplete(list, this.mainData);
          }
          if (!this.enableVirtualization) {
            this.initialValueUpdate();
          } else if (this.enableVirtualization && !(this.dataSource instanceof DataManager)) {
            this.initialValueUpdate(this.dataSource, true);
          } else if (!this.isInitRemoteVirtualData) {
            this.isDynamicRemoteVirtualData = true;
            this.initialValueUpdate(this.listData, true);
            this.isDynamicRemoteVirtualData = false;
            this.initialUpdate();
          }
          if (this.mode !== "Box" && !this.inputFocus) {
            this.updateDelimView();
          }
          if (!this.inputFocus) {
            this.refreshInputHight();
          }
          this.refreshPlaceHolder();
          if (this.mode !== "CheckBox" && this.changeOnBlur) {
            this.updateValueState(null, newProp, oldProp);
          }
          this.checkPlaceholderSize();
        }
      }
      if (!this.changeOnBlur) {
        this.updateValueState(null, newProp, oldProp);
      }
    };
    MultiSelect2.prototype.addItem = function(items, itemIndex) {
      _super.prototype.addItem.call(this, items, itemIndex);
    };
    MultiSelect2.prototype.hidePopup = function(e) {
      var _this = this;
      var delay = 100;
      if (this.isPopupOpen()) {
        var animModel = {
          name: "FadeOut",
          duration: 100,
          delay: delay ? delay : 0
        };
        this.customFilterQuery = null;
        var eventArgs = {
          popup: this.popupObj,
          cancel: false,
          animation: animModel,
          event: e || null
        };
        this.trigger("close", eventArgs, function(eventArgs2) {
          if (!eventArgs2.cancel) {
            if (_this.fields.groupBy && _this.mode !== "CheckBox" && _this.fixedHeaderElement) {
              remove(_this.fixedHeaderElement);
              _this.fixedHeaderElement = null;
            }
            _this.beforePopupOpen = false;
            _this.overAllWrapper.classList.remove(iconAnimation);
            var typedValue = _this.mode === "CheckBox" ? _this.targetElement() : null;
            _this.popupObj.hide(new Animation(eventArgs2.animation));
            attributes(_this.inputElement, {
              "aria-expanded": "false"
            });
            _this.inputElement.removeAttribute("aria-owns");
            _this.inputElement.removeAttribute("aria-activedescendant");
            if (_this.allowFiltering) {
              _this.notify("inputFocus", {
                module: "CheckBoxSelection",
                enable: _this.mode === "CheckBox",
                value: "clear"
              });
            }
            _this.popupObj.hide();
            removeClass([document.body, _this.popupObj.element], "e-popup-full-page");
            EventHandler.remove(_this.list, "keydown", _this.onKeyDown);
            if (_this.mode === "CheckBox" && _this.showSelectAll) {
              EventHandler.remove(_this.popupObj.element, "click", _this.clickHandler);
            }
            if (_this.list && _this.list.parentElement && _this.allowResize) {
              if (_this.resizer && _this.list.parentElement.contains(_this.resizer)) {
                _this.list.parentElement.removeChild(_this.resizer);
              }
              if (_this.list.parentElement.classList.contains("e-resize")) {
                _this.list.parentElement.classList.remove("e-resize");
              }
              _this.list.parentElement.style.boxSizing = "";
              _this.list.parentElement.style.paddingBottom = "";
              var overAllHeight = parseInt(_this.popupHeight, 10);
              _this.list.style.maxHeight = formatUnit(overAllHeight);
              if (_this.popupHeight.toString().toLowerCase() !== "auto" && _this.initialPopupHeight >= parseInt(_this.popupHeight.toString(), 10) - 2) {
                _this.list.parentElement.style.height = formatUnit(_this.popupHeight);
              }
              _this.list.parentElement.style.maxHeight = formatUnit(_this.popupHeight);
            }
            if (_this.resizer) {
              EventHandler.remove(_this.resizer, "mousedown", _this.startResizing);
              _this.resizer.remove();
            }
            if (_this.enableVirtualization && _this.mode === "CheckBox" && _this.value && _this.value.length > 0 && _this.enableSelectionOrder) {
              _this.viewPortInfo.startIndex = _this.virtualItemStartIndex = 0;
              _this.viewPortInfo.endIndex = _this.virtualItemEndIndex = _this.viewPortInfo.startIndex > 0 ? _this.viewPortInfo.endIndex : _this.itemCount;
              _this.virtualListInfo = _this.viewPortInfo;
              _this.previousStartIndex = 0;
              _this.previousEndIndex = _this.itemCount;
            }
            var dataSourceCount = void 0;
            if (_this.dataSource instanceof DataManager) {
              if (_this.remoteDataCount >= 0) {
                _this.totalItemCount = _this.dataCount = _this.remoteDataCount;
              } else {
                _this.resetList(_this.dataSource);
              }
            } else {
              dataSourceCount = _this.dataSource && _this.dataSource.length ? _this.dataSource.length : 0;
            }
            if (_this.enableVirtualization && (_this.allowFiltering || _this.allowCustomValue) && (_this.targetElement() || typedValue) && _this.totalItemCount !== dataSourceCount) {
              _this.checkAndResetCache();
              _this.updateInitialData();
            }
            if (_this.virtualCustomData && _this.viewPortInfo && _this.viewPortInfo.startIndex === 0 && _this.viewPortInfo.endIndex === _this.itemCount) {
              _this.renderItems(_this.mainData, _this.fields);
            }
            _this.virtualCustomData = null;
            _this.isVirtualTrackHeight = false;
          }
        });
      }
    };
    MultiSelect2.prototype.showPopup = function(e) {
      var _this = this;
      if (!this.enabled) {
        return;
      }
      this.firstItem = this.dataSource && this.dataSource.length > 0 ? this.dataSource[0] : null;
      var args = {
        cancel: false
      };
      this.trigger("beforeOpen", args, function(args2) {
        if (!args2.cancel) {
          if (!_this.ulElement) {
            _this.beforePopupOpen = true;
            if (_this.mode === "CheckBox" && Browser.isDevice && _this.allowFiltering && _this.isDeviceFullScreen) {
              _this.notify("popupFullScreen", {
                module: "CheckBoxSelection",
                enable: _this.mode === "CheckBox"
              });
            }
            _super.prototype.render.call(_this, e);
            return;
          }
          if (_this.mode === "CheckBox" && Browser.isDevice && _this.allowFiltering && _this.isDeviceFullScreen) {
            _this.notify("popupFullScreen", {
              module: "CheckBoxSelection",
              enable: _this.mode === "CheckBox"
            });
          }
          var mainLiLength = _this.ulElement.querySelectorAll("li.e-list-item").length;
          var liLength = _this.ulElement.querySelectorAll("li." + dropDownBaseClasses.li + "." + HIDE_LIST).length;
          if (mainLiLength > 0 && mainLiLength === liLength && liLength === _this.mainData.length && !(_this.targetElement() !== "" && _this.allowCustomValue)) {
            _this.beforePopupOpen = false;
            return;
          }
          _this.onPopupShown(e);
          if (_this.enableVirtualization && _this.listData && _this.listData.length) {
            if (!isNullOrUndefined(_this.value) && (_this.getModuleName() === "dropdownlist" || _this.getModuleName() === "combobox")) {
              _this.removeHover();
            }
            if (!_this.beforePopupOpen) {
              if (_this.hideSelectedItem && _this.value && Array.isArray(_this.value) && _this.value.length > 0) {
                _this.totalItemsCount();
              }
              if (!_this.preventSetCurrentData && !isNullOrUndefined(_this.viewPortInfo.startIndex) && !isNullOrUndefined(_this.viewPortInfo.endIndex)) {
                _this.notify("setCurrentViewDataAsync", {
                  component: _this.getModuleName(),
                  module: "VirtualScroll"
                });
              }
            }
          }
          if (_this.enableVirtualization && !_this.allowFiltering && _this.selectedValueInfo != null && _this.selectedValueInfo.startIndex > 0 && _this.value != null) {
            _this.notify("dataProcessAsync", {
              module: "VirtualScroll",
              isOpen: true
            });
          }
          if (_this.enableVirtualization) {
            _this.updatevirtualizationList();
          } else {
            if (_this.value && _this.value.length) {
              var element = void 0;
              var listItems = _this.getItems();
              for (var _i = 0, _a = _this.value; _i < _a.length; _i++) {
                var value = _a[_i];
                var checkValue = _this.allowObjectBinding ? getValue(_this.fields.value ? _this.fields.value : "", value) : value;
                element = _this.getElementByValue(checkValue);
                if (element) {
                  _this.addListSelection(element);
                }
              }
            }
          }
          if (_this.allowResize) {
            _this.setResize();
          }
          _this.preventSetCurrentData = true;
        }
      });
    };
    MultiSelect2.prototype.selectAll = function(state) {
      this.isSelectAll = true;
      this.selectAllItems(state);
    };
    MultiSelect2.prototype.getModuleName = function() {
      return "multiselect";
    };
    MultiSelect2.prototype.clear = function() {
      var _this = this;
      this.selectAll(false);
      if (this.value && this.value.length) {
        setTimeout(function() {
          _this.setProperties({
            value: null
          }, true);
        }, 0);
      } else {
        this.setProperties({
          value: null
        }, true);
      }
    };
    MultiSelect2.prototype.render = function() {
      if (!isNullOrUndefined(this.value) && this.value.length > 0) {
        this.value = this.value.slice();
      }
      this.setDynValue = this.initStatus = false;
      this.isSelectAll = false;
      this.selectAllEventEle = [];
      this.searchWrapper = this.createElement("span", {
        className: SEARCHBOX_WRAPPER + " " + (this.mode === "Box" ? BOX_ELEMENT : "")
      });
      this.viewWrapper = this.createElement("span", {
        className: DELIMITER_VIEW + " " + DELIMITER_WRAPPER
      });
      this.viewWrapper.style.display = "none";
      this.overAllClear = this.createElement("span", {
        className: CLOSEICON_CLASS2
      });
      this.overAllClear.style.display = "none";
      this.componentWrapper = this.createElement("div", {
        className: ELEMENT_WRAPPER
      });
      this.overAllWrapper = this.createElement("div", {
        className: OVER_ALL_WRAPPER
      });
      if (this.mode === "CheckBox") {
        addClass([this.overAllWrapper], "e-checkbox");
      }
      if (Browser.isDevice) {
        this.componentWrapper.classList.add(ELEMENT_MOBILE_WRAPPER);
      }
      this.setWidth(this.width);
      this.overAllWrapper.appendChild(this.componentWrapper);
      this.popupWrapper = this.createElement("div", {
        id: this.element.id + "_popup",
        className: POPUP_WRAPPER
      });
      this.popupWrapper.setAttribute("aria-label", this.element.id);
      this.popupWrapper.setAttribute("role", "dialog");
      if (this.mode === "Delimiter" || this.mode === "CheckBox") {
        this.delimiterWrapper = this.createElement("span", {
          className: DELIMITER_WRAPPER
        });
        this.delimiterWrapper.style.display = "none";
        this.componentWrapper.appendChild(this.delimiterWrapper);
      } else {
        this.chipCollectionWrapper = this.createElement("span", {
          className: CHIP_WRAPPER2
        });
        this.chipCollectionWrapper.style.display = "none";
        if (this.mode === "Default") {
          this.chipCollectionWrapper.setAttribute("id", getUniqueID("chip_default"));
        } else if (this.mode === "Box") {
          this.chipCollectionWrapper.setAttribute("id", getUniqueID("chip_box"));
        }
        this.componentWrapper.appendChild(this.chipCollectionWrapper);
      }
      if (this.mode !== "Box") {
        this.componentWrapper.appendChild(this.viewWrapper);
      }
      this.componentWrapper.appendChild(this.searchWrapper);
      if (this.showClearButton && !Browser.isDevice) {
        this.componentWrapper.appendChild(this.overAllClear);
      } else {
        this.componentWrapper.classList.add(CLOSE_ICON_HIDE);
      }
      this.dropDownIcon();
      this.inputElement = this.createElement("input", {
        className: INPUT_ELEMENT,
        attrs: {
          spellcheck: "false",
          type: "text",
          autocomplete: "off",
          tabindex: "0",
          role: "combobox"
        }
      });
      if (this.mode === "Default" || this.mode === "Box") {
        this.inputElement.setAttribute("aria-describedby", this.chipCollectionWrapper.id);
      }
      if (!isNullOrUndefined(this.inputElement)) {
        attributes(this.inputElement, {
          "aria-expanded": "false"
        });
        if (!this.inputElement.hasAttribute("aria-label")) {
          this.inputElement.setAttribute("aria-label", this.getModuleName());
        }
      }
      if (this.element.tagName !== this.getNgDirective()) {
        this.element.style.display = "none";
      }
      if (this.element.tagName === this.getNgDirective()) {
        this.element.appendChild(this.overAllWrapper);
        this.searchWrapper.appendChild(this.inputElement);
      } else {
        this.element.parentElement.insertBefore(this.overAllWrapper, this.element);
        this.searchWrapper.appendChild(this.inputElement);
        this.searchWrapper.appendChild(this.element);
        this.element.removeAttribute("tabindex");
      }
      if (this.floatLabelType !== "Never") {
        createFloatLabel(this.overAllWrapper, this.searchWrapper, this.element, this.inputElement, this.value, this.floatLabelType, this.placeholder);
      } else if (this.floatLabelType === "Never") {
        this.refreshPlaceHolder();
      }
      this.addValidInputClass();
      this.element.style.opacity = "";
      var id = this.element.getAttribute("id") ? this.element.getAttribute("id") : getUniqueID("ej2_dropdownlist");
      this.element.id = id;
      this.hiddenElement = this.createElement("select", {
        attrs: {
          "aria-hidden": "true",
          "class": HIDDEN_ELEMENT,
          "tabindex": "-1",
          "multiple": ""
        }
      });
      this.componentWrapper.appendChild(this.hiddenElement);
      this.validationAttribute(this.element, this.hiddenElement);
      if (this.mode !== "CheckBox") {
        this.hideOverAllClear();
      }
      if (!isNullOrUndefined(closest(this.element, "fieldset")) && closest(this.element, "fieldset").disabled) {
        this.enabled = false;
      }
      this.wireEvent();
      this.enable(this.enabled);
      this.enableRTL(this.enableRtl);
      if (this.enableVirtualization) {
        this.updateVirtualizationProperties(this.itemCount, this.allowFiltering, this.mode === "CheckBox");
      }
      this.listItemHeight = this.getListHeight();
      this.getSkeletonCount();
      this.viewPortInfo.startIndex = this.virtualItemStartIndex = 0;
      this.viewPortInfo.endIndex = this.virtualItemEndIndex = this.viewPortInfo.startIndex > 0 ? this.viewPortInfo.endIndex : this.itemCount;
      this.checkInitialValue();
      if (this.element.hasAttribute("data-val")) {
        this.element.setAttribute("data-val", "false");
      }
      Input.createSpanElement(this.overAllWrapper, this.createElement);
      this.calculateWidth();
      if (!isNullOrUndefined(this.overAllWrapper) && !isNullOrUndefined(this.overAllWrapper.getElementsByClassName("e-ddl-icon")[0] && this.overAllWrapper.getElementsByClassName("e-float-text-content")[0] && this.floatLabelType !== "Never")) {
        this.overAllWrapper.getElementsByClassName("e-float-text-content")[0].classList.add("e-icon");
      }
      this.renderComplete();
    };
    MultiSelect2.prototype.setResize = function() {
      var resizePaddingBottom = 16;
      if (this.list && this.list.parentElement && isNullOrUndefined(this.list.parentElement.querySelector(".e-resizer-right.e-icons"))) {
        this.resizer = this.createElement("div", {
          id: this.element.id + "_resize-popup",
          className: RESIZE_ICON
        });
      }
      if (this.mode === "CheckBox" && this.showSelectAll && this.selectAllHeight && this.selectAllHeight !== 0) {
        this.storedSelectAllHeight = this.selectAllHeight;
      }
      if (this.list && this.list.parentElement) {
        this.list.parentElement.classList.add("e-resize");
        this.initialPopupHeight = this.list.parentElement.clientHeight;
        if (this.popupHeight.toString().toLowerCase() !== "auto" && this.initialPopupHeight >= parseInt(this.popupHeight.toString(), 10) - 2) {
          this.list.parentElement.style.height = "100%";
        }
        this.list.parentElement.style.boxSizing = "border-box";
        var paddingBottom = this.mode === "CheckBox" && this.searchBoxHeight ? this.searchBoxHeight + resizePaddingBottom + (this.showSelectAll ? this.storedSelectAllHeight : 0) : resizePaddingBottom;
        this.list.parentElement.style.paddingBottom = paddingBottom + "px";
        this.list.parentElement.appendChild(this.resizer);
        this.list.parentElement.style.width = this.resizeWidth + "px";
        this.list.parentElement.style.height = this.resizeHeight + "px";
        this.list.parentElement.style.maxHeight = this.resizeHeight + "px";
        this.list.style.maxHeight = this.resizeHeight + "px";
        if (this.headerTemplate) {
          var headerElem = this.list.parentElement.querySelector(".e-ddl-header");
          if (headerElem && headerElem.offsetHeight) {
            this.headerTemplateHeight = headerElem.offsetHeight;
          }
          if (this.resizeHeight) {
            this.list.style.maxHeight = this.resizeHeight - this.headerTemplateHeight - 16 + "px";
          } else {
            this.list.style.maxHeight = parseInt(this.list.style.maxHeight, 10) - 16 + "px";
          }
        }
      }
      if (this.resizer) {
        EventHandler.add(this.resizer, "mousedown", this.startResizing, this);
        EventHandler.add(this.resizer, "touchstart", this.startResizing, this);
      }
    };
    MultiSelect2.prototype.startResizing = function(event2) {
      this.isResizing = true;
      this.trigger("resizeStart", event2);
      var clientX = event2 instanceof MouseEvent ? event2.clientX : event2.touches[0].clientX;
      var clientY = event2 instanceof MouseEvent ? event2.clientY : event2.touches[0].clientY;
      if (this.list && this.list.parentElement) {
        this.originalWidth = this.list.parentElement.offsetWidth;
        this.originalHeight = this.list.parentElement.offsetHeight;
        this.originalMouseX = clientX;
        this.originalMouseY = clientY;
      }
      this.resizingWireEvent();
      if (event2) {
        event2.preventDefault();
      }
    };
    MultiSelect2.prototype.resizePopup = function(event2) {
      if (!this.isResizing) {
        return;
      }
      this.trigger("resizing", event2);
      var clientX = event2 instanceof MouseEvent ? event2.clientX : event2.touches[0].clientX;
      var clientY = event2 instanceof MouseEvent ? event2.clientY : event2.touches[0].clientY;
      var dx = clientX - this.originalMouseX;
      var dy = clientY - this.originalMouseY;
      var minWidth = 100;
      var minHeight = 130;
      this.resizeWidth = Math.max(this.originalWidth + dx, minWidth);
      this.resizeHeight = Math.max(this.originalHeight + dy, minHeight);
      if (this.list && this.list.parentElement) {
        var minWidth_1 = parseInt(window.getComputedStyle(this.list.parentElement).minWidth, 10);
        var minHeight_1 = parseInt(window.getComputedStyle(this.list.parentElement).minHeight, 10);
        minWidth_1 = minWidth_1 || 100;
        minHeight_1 = minHeight_1 || 120;
        this.resizeWidth = Math.max(this.originalWidth + dx, minWidth_1);
        this.resizeHeight = Math.max(this.originalHeight + dy, minHeight_1);
        this.list.parentElement.style.width = this.resizeWidth + "px";
        this.list.parentElement.style.height = this.resizeHeight + "px";
        this.list.parentElement.style.maxHeight = this.resizeHeight + "px";
        this.list.style.maxHeight = this.resizeHeight + "px";
        if (this.headerTemplate) {
          this.list.style.maxHeight = this.resizeHeight - this.headerTemplateHeight - 16 + "px";
        }
        if (this.fixedHeaderElement && this.ulElement) {
          this.fixedHeaderElement.style.width = this.ulElement.offsetWidth + "px";
        }
      }
      if (event2) {
        event2.preventDefault();
      }
    };
    MultiSelect2.prototype.stopResizing = function(event2) {
      if (this.isResizing) {
        this.isResizing = false;
        this.trigger("resizeStop", event2);
        this.resizingUnWireEvent();
      }
      if (event2) {
        event2.preventDefault();
      }
    };
    MultiSelect2.prototype.getListHeight = function() {
      var listParent = this.createElement("div", {
        className: "e-dropdownbase"
      });
      var item = this.createElement("li", {
        className: "e-list-item"
      });
      var listParentHeight = formatUnit(this.popupHeight);
      listParent.style.height = parseInt(listParentHeight, 10).toString() + "px";
      listParent.appendChild(item);
      document.body.appendChild(listParent);
      this.virtualListHeight = listParent.getBoundingClientRect().height;
      var listItemHeight = Math.ceil(item.getBoundingClientRect().height) + parseInt(window.getComputedStyle(item).marginBottom, 10);
      listParent.remove();
      return listItemHeight;
    };
    MultiSelect2.prototype.removeDisabledItemsValue = function(value) {
      if (value) {
        var data = [];
        var dataIndex = 0;
        for (var index = 0; index < value.length; index++) {
          var indexValue = value[index];
          if (typeof indexValue === "object") {
            indexValue = JSON.parse(JSON.stringify(indexValue))[this.fields.value];
          }
          if (indexValue != null && !this.isDisabledItemByIndex(this.getIndexByValue(indexValue))) {
            data[dataIndex++] = value[index];
          }
        }
        this.value = data.length > 0 ? data : null;
      }
    };
    MultiSelect2.prototype.checkInitialValue = function() {
      var _this = this;
      if (this.fields.disabled) {
        this.removeDisabledItemsValue(this.value);
      }
      var isData = this.dataSource instanceof Array ? this.dataSource.length > 0 : !isNullOrUndefined(this.dataSource);
      if (!(this.value && this.value.length) && isNullOrUndefined(this.text) && !isData && this.element.tagName === "SELECT" && this.element.options.length > 0) {
        var optionsElement = this.element.options;
        var valueCol = [];
        var textCol = "";
        for (var index = 0, optionsLen = optionsElement.length; index < optionsLen; index++) {
          var opt = optionsElement[index];
          if (!isNullOrUndefined(opt.getAttribute("selected"))) {
            if (opt.getAttribute("value")) {
              var value = this.allowObjectBinding ? this.getDataByValue(opt.getAttribute("value")) : opt.getAttribute("value");
              valueCol.push(value);
            } else {
              textCol += opt.text + this.delimiterChar;
            }
          }
        }
        if (valueCol.length > 0) {
          this.setProperties({
            value: valueCol
          }, true);
        } else if (textCol !== "") {
          this.setProperties({
            text: textCol
          }, true);
        }
        if (valueCol.length > 0 || textCol !== "") {
          this.refreshInputHight();
          this.refreshPlaceHolder();
        }
      }
      if (this.value && this.value.length || !isNullOrUndefined(this.text)) {
        if (!this.list) {
          _super.prototype.render.call(this);
        }
      }
      if (this.fields.disabled) {
        this.text = this.text && !this.isDisabledItemByIndex(this.getIndexByValue(this.getValueByText(this.text))) ? this.text : null;
      }
      if (!isNullOrUndefined(this.text) && (isNullOrUndefined(this.value) || this.value.length === 0)) {
        this.initialTextUpdate();
      }
      if (this.value && this.value.length) {
        var listItems_2;
        if (this.enableVirtualization) {
          var fields = !this.isPrimitiveData ? this.fields.value : "";
          var predicate = void 0;
          for (var i = 0; i < this.value.length; i++) {
            var value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value[i]) : this.value[i];
            if (i === 0) {
              predicate = new Predicate(fields, "equal", value);
            } else {
              predicate = predicate.or(fields, "equal", value);
            }
          }
          if (this.dataSource instanceof DataManager) {
            this.dataSource.executeQuery(new Query().where(predicate)).then(function(e) {
              if (e.result.length > 0) {
                listItems_2 = e.result;
                _this.initStatus = false;
                _this.isInitRemoteVirtualData = true;
                setTimeout(function() {
                  _this.initialValueUpdate(listItems_2, true);
                  _this.initialUpdate();
                  _this.isInitRemoteVirtualData = false;
                }, 100);
                _this.initStatus = true;
              }
            });
          } else {
            listItems_2 = new DataManager(this.dataSource).executeLocal(new Query().where(predicate));
          }
        }
        if (!(this.dataSource instanceof DataManager)) {
          this.initialValueUpdate(listItems_2, true);
          this.initialUpdate();
        } else {
          this.setInitialValue = function() {
            _this.initStatus = false;
            if (!_this.enableVirtualization || _this.enableVirtualization && !(_this.dataSource instanceof DataManager)) {
              _this.initialValueUpdate(listItems_2);
            }
            _this.initialUpdate();
            _this.setInitialValue = null;
            _this.initStatus = true;
          };
        }
        this.updateTempValue();
      } else {
        this.initialUpdate();
      }
      this.initStatus = true;
      this.checkAutoFocus();
      if (!isNullOrUndefined(this.text)) {
        this.element.setAttribute("data-initial-value", this.text);
      }
    };
    MultiSelect2.prototype.checkAutoFocus = function() {
      if (this.element.hasAttribute("autofocus")) {
        this.inputElement.focus();
      }
    };
    MultiSelect2.prototype.updatevirtualizationList = function() {
      if (this.value && this.value.length) {
        var element = void 0;
        for (var _i = 0, _a = this.value; _i < _a.length; _i++) {
          var value = _a[_i];
          var checkValue = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", value) : value;
          element = this.getElementByValue(checkValue);
          if (element) {
            this.addListSelection(element);
          }
        }
        if (this.enableVirtualization && this.hideSelectedItem) {
          var visibleListElements = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide):not(.e-virtual-list)");
          if (visibleListElements.length) {
            var actualCount = this.virtualListHeight > 0 ? Math.floor(this.virtualListHeight / this.listItemHeight) : 0;
            if (visibleListElements.length < actualCount + 2) {
              var query = this.getForQuery(this.value).clone();
              query = query.skip(this.viewPortInfo.startIndex);
              this.resetList(this.dataSource, this.fields, query);
            }
          }
        }
      }
    };
    MultiSelect2.prototype.setFloatLabelType = function() {
      removeFloating(this.overAllWrapper, this.componentWrapper, this.searchWrapper, this.inputElement, this.value, this.floatLabelType, this.placeholder);
      if (this.floatLabelType !== "Never") {
        createFloatLabel(this.overAllWrapper, this.searchWrapper, this.element, this.inputElement, this.value, this.floatLabelType, this.placeholder);
      }
    };
    MultiSelect2.prototype.addValidInputClass = function() {
      if (!isNullOrUndefined(this.overAllWrapper)) {
        if (!isNullOrUndefined(this.value) && this.value.length || this.floatLabelType === "Always") {
          addClass([this.overAllWrapper], "e-valid-input");
        } else {
          removeClass([this.overAllWrapper], "e-valid-input");
        }
      }
    };
    MultiSelect2.prototype.dropDownIcon = function() {
      if (this.showDropDownIcon) {
        this.dropIcon = this.createElement("span", {
          className: dropdownIcon
        });
        this.componentWrapper.appendChild(this.dropIcon);
        addClass([this.componentWrapper], ["e-down-icon"]);
      } else {
        if (!isNullOrUndefined(this.dropIcon)) {
          this.dropIcon.parentElement.removeChild(this.dropIcon);
          removeClass([this.componentWrapper], ["e-down-icon"]);
        }
      }
    };
    MultiSelect2.prototype.initialUpdate = function() {
      if (this.mode !== "Box" && !(this.setDynValue && this.mode === "Default" && this.inputFocus)) {
        this.updateDelimView();
      }
      this.viewPortInfo.startIndex = this.virtualItemStartIndex = 0;
      this.viewPortInfo.endIndex = this.virtualItemEndIndex = this.itemCount;
      this.updateCssClass();
      this.updateHTMLAttribute();
      this.updateReadonly(this.readonly);
      this.refreshInputHight();
      this.checkPlaceholderSize();
    };
    MultiSelect2.prototype.disableItem = function(item) {
      if (this.fields.disabled) {
        if (!this.list) {
          this.renderList();
        }
        var itemIndex = -1;
        if (this.liCollections && this.liCollections.length > 0 && this.listData && this.fields.disabled) {
          if (typeof item === "string") {
            itemIndex = this.getIndexByValue(item);
          } else if (typeof item === "object") {
            if (item instanceof HTMLLIElement) {
              for (var index = 0; index < this.liCollections.length; index++) {
                if (this.liCollections[index] === item) {
                  itemIndex = this.getIndexByValue(item.getAttribute("data-value"));
                  break;
                }
              }
            } else {
              var value = JSON.parse(JSON.stringify(item))[this.fields.value];
              for (var index = 0; index < this.listData.length; index++) {
                if (JSON.parse(JSON.stringify(this.listData[index]))[this.fields.value] === value) {
                  itemIndex = this.getIndexByValue(value);
                  break;
                }
              }
            }
          } else {
            itemIndex = item;
          }
          var isValidIndex = itemIndex < this.liCollections.length && itemIndex > -1;
          if (isValidIndex && !JSON.parse(JSON.stringify(this.listData[itemIndex]))[this.fields.disabled]) {
            var li = this.liCollections[itemIndex];
            if (li) {
              this.disableListItem(li);
              var parsedData = JSON.parse(JSON.stringify(this.listData[itemIndex]));
              parsedData[this.fields.disabled] = true;
              this.listData[itemIndex] = parsedData;
              if (li.classList.contains(dropDownBaseClasses.focus)) {
                this.removeFocus();
              }
              if (li.classList.contains(HIDE_LIST) || li.classList.contains(dropDownBaseClasses.selected)) {
                var oldValue = this.value;
                this.removeDisabledItemsValue(this.value);
                this.updateVal(this.value, oldValue, "value");
              }
              if (this.mode === "CheckBox" && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {
                this.disableGroupHeader();
              }
            }
          }
        }
      }
    };
    MultiSelect2.prototype.destroy = function() {
      if (this.isReact) {
        this.clearTemplate();
      }
      if (!isNullOrUndefined(this.popupObj)) {
        this.popupObj.hide();
        this.popupObj.destroy();
      }
      this.notify(destroy2, {});
      this.unwireListEvents();
      this.unWireEvent();
      var temp = ["readonly", "aria-disabled", "placeholder", "aria-label", "aria-expanded"];
      var length = temp.length;
      if (!isNullOrUndefined(this.inputElement)) {
        while (length > 0) {
          this.inputElement.removeAttribute(temp[length - 1]);
          length--;
        }
      }
      if (!isNullOrUndefined(this.element)) {
        this.element.removeAttribute("data-initial-value");
        this.element.style.display = "block";
      }
      if (this.overAllWrapper && this.overAllWrapper.parentElement) {
        if (this.overAllWrapper.parentElement.tagName === this.getNgDirective()) {
          remove(this.overAllWrapper);
        } else {
          this.overAllWrapper.parentElement.insertBefore(this.element, this.overAllWrapper);
          remove(this.overAllWrapper);
        }
      }
      if (this.popupWrapper && this.popupWrapper.parentElement) {
        this.popupWrapper.parentElement.remove();
      }
      while (this.searchWrapper && this.searchWrapper.firstChild) {
        this.searchWrapper.removeChild(this.searchWrapper.firstChild);
      }
      if (this.searchWrapper && this.searchWrapper.parentElement) {
        this.searchWrapper.parentElement.remove();
      }
      if (this.viewWrapper && this.viewWrapper.parentElement) {
        this.viewWrapper.parentElement.remove();
      }
      if (this.overAllClear && this.overAllClear.parentElement) {
        this.overAllClear.parentElement.remove();
      }
      if (this.delimiterWrapper && this.delimiterWrapper.parentElement) {
        this.delimiterWrapper.parentElement.remove();
      }
      var selectElement = this.overAllWrapper.querySelector("select.e-multi-hidden");
      if (selectElement && selectElement.parentElement) {
        selectElement.parentElement.remove();
      }
      while (this.componentWrapper && this.componentWrapper.firstChild) {
        this.componentWrapper.removeChild(this.componentWrapper.firstChild);
      }
      if (this.componentWrapper && this.componentWrapper.parentElement) {
        this.componentWrapper.removeAttribute("class");
        this.componentWrapper.parentElement.remove();
      }
      while (this.popupWrapper && this.popupWrapper.firstChild) {
        this.popupWrapper.removeChild(this.popupWrapper.firstChild);
      }
      if (this.inputElement) {
        var attrArray = ["readonly", "aria-disabled", "placeholder", "aria-labelledby", "aria-expanded", "autocomplete", "aria-readonly", "autocapitalize", "spellcheck", "aria-autocomplete", "aria-live", "aria-label", "aria-hidden", "tabindex", "aria-controls", "aria-describedby", "size", "role", "type", "class"];
        for (var i = 0; i < attrArray.length; i++) {
          this.inputElement.removeAttribute(attrArray[i]);
        }
      }
      if (this.inputElement) {
        this.inputElement.remove();
      }
      this.list = null;
      this.popupObj = null;
      this.mainData = null;
      this.filterParent = null;
      this.ulElement = null;
      this.componentWrapper = null;
      this.overAllClear = null;
      this.overAllWrapper = null;
      this.hiddenElement = null;
      this.searchWrapper = null;
      this.viewWrapper = null;
      this.chipCollectionWrapper = null;
      this.targetInputElement = null;
      this.popupWrapper = null;
      this.inputElement = null;
      this.delimiterWrapper = null;
      this.liCollections = null;
      this.popupContentElement = null;
      this.header = null;
      this.mainList = null;
      this.mainListCollection = null;
      this.footer = null;
      this.selectAllEventEle = null;
      _super.prototype.destroy.call(this);
    };
    __decorate14([Complex({
      text: null,
      value: null,
      iconCss: null,
      groupBy: null,
      disabled: null
    }, FieldSettings)], MultiSelect2.prototype, "fields", void 0);
    __decorate14([Property(false)], MultiSelect2.prototype, "enablePersistence", void 0);
    __decorate14([Property(null)], MultiSelect2.prototype, "groupTemplate", void 0);
    __decorate14([Property("No records found")], MultiSelect2.prototype, "noRecordsTemplate", void 0);
    __decorate14([Property("Request failed")], MultiSelect2.prototype, "actionFailureTemplate", void 0);
    __decorate14([Property("None")], MultiSelect2.prototype, "sortOrder", void 0);
    __decorate14([Property(true)], MultiSelect2.prototype, "enabled", void 0);
    __decorate14([Property(true)], MultiSelect2.prototype, "enableHtmlSanitizer", void 0);
    __decorate14([Property(false)], MultiSelect2.prototype, "enableVirtualization", void 0);
    __decorate14([Property([])], MultiSelect2.prototype, "dataSource", void 0);
    __decorate14([Property(null)], MultiSelect2.prototype, "query", void 0);
    __decorate14([Property("StartsWith")], MultiSelect2.prototype, "filterType", void 0);
    __decorate14([Property(1e3)], MultiSelect2.prototype, "zIndex", void 0);
    __decorate14([Property(false)], MultiSelect2.prototype, "ignoreAccent", void 0);
    __decorate14([Property()], MultiSelect2.prototype, "locale", void 0);
    __decorate14([Property(false)], MultiSelect2.prototype, "enableGroupCheckBox", void 0);
    __decorate14([Property(null)], MultiSelect2.prototype, "cssClass", void 0);
    __decorate14([Property("100%")], MultiSelect2.prototype, "width", void 0);
    __decorate14([Property("300px")], MultiSelect2.prototype, "popupHeight", void 0);
    __decorate14([Property("100%")], MultiSelect2.prototype, "popupWidth", void 0);
    __decorate14([Property(null)], MultiSelect2.prototype, "placeholder", void 0);
    __decorate14([Property(null)], MultiSelect2.prototype, "filterBarPlaceholder", void 0);
    __decorate14([Property({})], MultiSelect2.prototype, "htmlAttributes", void 0);
    __decorate14([Property(null)], MultiSelect2.prototype, "valueTemplate", void 0);
    __decorate14([Property(null)], MultiSelect2.prototype, "headerTemplate", void 0);
    __decorate14([Property(null)], MultiSelect2.prototype, "footerTemplate", void 0);
    __decorate14([Property(null)], MultiSelect2.prototype, "itemTemplate", void 0);
    __decorate14([Property(null)], MultiSelect2.prototype, "allowFiltering", void 0);
    __decorate14([Property(300)], MultiSelect2.prototype, "debounceDelay", void 0);
    __decorate14([Property(true)], MultiSelect2.prototype, "isDeviceFullScreen", void 0);
    __decorate14([Property(true)], MultiSelect2.prototype, "changeOnBlur", void 0);
    __decorate14([Property(false)], MultiSelect2.prototype, "allowCustomValue", void 0);
    __decorate14([Property(true)], MultiSelect2.prototype, "showClearButton", void 0);
    __decorate14([Property(1e3)], MultiSelect2.prototype, "maximumSelectionLength", void 0);
    __decorate14([Property(false)], MultiSelect2.prototype, "readonly", void 0);
    __decorate14([Property(false)], MultiSelect2.prototype, "allowResize", void 0);
    __decorate14([Property(null)], MultiSelect2.prototype, "text", void 0);
    __decorate14([Property(null)], MultiSelect2.prototype, "value", void 0);
    __decorate14([Property(false)], MultiSelect2.prototype, "allowObjectBinding", void 0);
    __decorate14([Property(true)], MultiSelect2.prototype, "hideSelectedItem", void 0);
    __decorate14([Property(true)], MultiSelect2.prototype, "closePopupOnSelect", void 0);
    __decorate14([Property("Default")], MultiSelect2.prototype, "mode", void 0);
    __decorate14([Property(",")], MultiSelect2.prototype, "delimiterChar", void 0);
    __decorate14([Property(true)], MultiSelect2.prototype, "ignoreCase", void 0);
    __decorate14([Property(false)], MultiSelect2.prototype, "showDropDownIcon", void 0);
    __decorate14([Property("Never")], MultiSelect2.prototype, "floatLabelType", void 0);
    __decorate14([Property(false)], MultiSelect2.prototype, "showSelectAll", void 0);
    __decorate14([Property("Select All")], MultiSelect2.prototype, "selectAllText", void 0);
    __decorate14([Property("Unselect All")], MultiSelect2.prototype, "unSelectAllText", void 0);
    __decorate14([Property(true)], MultiSelect2.prototype, "enableSelectionOrder", void 0);
    __decorate14([Property(true)], MultiSelect2.prototype, "openOnClick", void 0);
    __decorate14([Property(false)], MultiSelect2.prototype, "addTagOnBlur", void 0);
    __decorate14([Event2()], MultiSelect2.prototype, "change", void 0);
    __decorate14([Event2()], MultiSelect2.prototype, "removing", void 0);
    __decorate14([Event2()], MultiSelect2.prototype, "removed", void 0);
    __decorate14([Event2()], MultiSelect2.prototype, "beforeSelectAll", void 0);
    __decorate14([Event2()], MultiSelect2.prototype, "selectedAll", void 0);
    __decorate14([Event2()], MultiSelect2.prototype, "beforeOpen", void 0);
    __decorate14([Event2()], MultiSelect2.prototype, "open", void 0);
    __decorate14([Event2()], MultiSelect2.prototype, "close", void 0);
    __decorate14([Event2()], MultiSelect2.prototype, "blur", void 0);
    __decorate14([Event2()], MultiSelect2.prototype, "focus", void 0);
    __decorate14([Event2()], MultiSelect2.prototype, "chipSelection", void 0);
    __decorate14([Event2()], MultiSelect2.prototype, "resizeStop", void 0);
    __decorate14([Event2()], MultiSelect2.prototype, "resizing", void 0);
    __decorate14([Event2()], MultiSelect2.prototype, "resizeStart", void 0);
    __decorate14([Event2()], MultiSelect2.prototype, "filtering", void 0);
    __decorate14([Event2()], MultiSelect2.prototype, "tagging", void 0);
    __decorate14([Event2()], MultiSelect2.prototype, "customValueSelection", void 0);
    MultiSelect2 = __decorate14([NotifyPropertyChanges], MultiSelect2);
    return MultiSelect2;
  }(DropDownBase)
);

// node_modules/@syncfusion/ej2-dropdowns/src/multi-select/checkbox-selection.js
var ICON2 = "e-icons";
var CHECKBOXFRAME2 = "e-frame";
var CHECK2 = "e-check";
var CHECKBOXWRAP2 = "e-checkbox-wrapper";
var INDETERMINATE = "e-stop";
var checkAllParent = "e-selectall-parent";
var searchBackIcon = "e-input-group-icon e-back-icon e-icons";
var filterBarClearIcon = "e-input-group-icon e-clear-icon e-icons";
var filterInput = "e-input-filter";
var filterParent = "e-filter-parent";
var mobileFilter = "e-ddl-device-filter";
var clearIcon = "e-clear-icon";
var popupFullScreen = "e-popup-full-page";
var device = "e-ddl-device";
var FOCUS2 = "e-input-focus";
var CheckBoxSelection = (
  /** @class */
  function() {
    function CheckBoxSelection2(parent) {
      this.activeLi = [];
      this.activeEle = [];
      this.parent = parent;
      this.removeEventListener();
      this.addEventListener();
    }
    CheckBoxSelection2.prototype.getModuleName = function() {
      return "CheckBoxSelection";
    };
    CheckBoxSelection2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on("updatelist", this.listSelection, this);
      this.parent.on("listoption", this.listOption, this);
      this.parent.on("selectAll", this.setSelectAll, this);
      this.parent.on("checkSelectAll", this.checkSelectAll, this);
      this.parent.on("searchBox", this.setSearchBox, this);
      this.parent.on("blur", this.onBlurHandler, this);
      this.parent.on("targetElement", this.targetElement, this);
      this.parent.on("deviceSearchBox", this.setDeviceSearchBox, this);
      this.parent.on("inputFocus", this.getFocus, this);
      this.parent.on("reOrder", this.setReorder, this);
      this.parent.on("activeList", this.getActiveList, this);
      this.parent.on("selectAllText", this.setLocale, this);
      this.parent.on("filterBarPlaceholder", this.setPlaceholder, this);
      EventHandler.add(document, "mousedown", this.onDocumentClick, this);
      this.parent.on("addItem", this.checboxCreate, this);
      this.parent.on("popupFullScreen", this.setPopupFullScreen, this);
    };
    CheckBoxSelection2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off("updatelist", this.listSelection);
      this.parent.off("listoption", this.listOption);
      this.parent.off("selectAll", this.setSelectAll);
      this.parent.off("checkSelectAll", this.checkSelectAll);
      this.parent.off("searchBox", this.setSearchBox);
      this.parent.off("blur", this.onBlurHandler);
      this.parent.off("targetElement", this.targetElement);
      this.parent.off("deviceSearchBox", this.setDeviceSearchBox);
      this.parent.off("inputFocus", this.getFocus);
      this.parent.off("reOrder", this.setReorder);
      this.parent.off("activeList", this.getActiveList);
      this.parent.off("selectAllText", this.setLocale);
      this.parent.off("filterBarPlaceholder", this.setPlaceholder);
      this.parent.off("addItem", this.checboxCreate);
      this.parent.off("popupFullScreen", this.setPopupFullScreen);
    };
    CheckBoxSelection2.prototype.listOption = function(args) {
      var _this = this;
      if (isNullOrUndefined(this.parent.listCurrentOptions.itemCreated)) {
        this.parent.listCurrentOptions.itemCreated = function(e) {
          _this.checboxCreate(e);
        };
      } else {
        var itemCreated_1 = this.parent.listCurrentOptions.itemCreated;
        this.parent.listCurrentOptions.itemCreated = function(e) {
          _this.checboxCreate(e);
          itemCreated_1.apply(_this, [e]);
        };
      }
    };
    CheckBoxSelection2.prototype.setPlaceholder = function(props) {
      Input.setPlaceholder(props.filterBarPlaceholder, this.filterInput);
    };
    CheckBoxSelection2.prototype.checboxCreate = function(e) {
      var item;
      if (!isNullOrUndefined(e.item)) {
        item = e.item;
      } else {
        item = e;
      }
      if (this.parent.enableGroupCheckBox || item.className !== "e-list-group-item " && item.className !== "e-list-group-item") {
        var checkboxEle = createCheckBox(this.parent.createElement, true);
        var icon = select("div." + ICON2, item);
        item.insertBefore(checkboxEle, item.childNodes[isNullOrUndefined(icon) ? 0 : 1]);
        select("." + CHECKBOXFRAME2, checkboxEle);
        if (this.parent.enableGroupCheckBox) {
          this.parent.popupWrapper.classList.add("e-multiselect-group");
        }
        return item;
      } else {
        return item;
      }
    };
    CheckBoxSelection2.prototype.setSelectAll = function() {
      if (this.parent.showSelectAll) {
        if (isNullOrUndefined(this.checkAllParent)) {
          this.checkAllParent = this.parent.createElement("div", {
            className: checkAllParent
          });
          this.selectAllSpan = this.parent.createElement("span", {
            className: "e-all-text"
          });
          this.selectAllSpan.textContent = "";
          this.checkAllParent.appendChild(this.selectAllSpan);
          this.setLocale();
          this.checboxCreate(this.checkAllParent);
          if (this.parent.headerTemplate) {
            if (!isNullOrUndefined(this.parent.filterParent)) {
              append([this.checkAllParent], this.parent.filterParent);
            } else {
              append([this.checkAllParent], this.parent.popupWrapper);
            }
          }
          if (!this.parent.headerTemplate) {
            if (!isNullOrUndefined(this.parent.filterParent)) {
              this.parent.filterParent.parentNode.insertBefore(this.checkAllParent, this.parent.filterParent.nextSibling);
            } else {
              prepend([this.checkAllParent], this.parent.popupWrapper);
            }
          }
          EventHandler.add(this.checkAllParent, "mousedown", this.clickHandler, this);
        }
        if (this.parent.list.classList.contains("e-nodata") || this.parent.listData && this.parent.listData.length <= 1 && !this.parent.enableVirtualization && !this.parent.isDynamicDataChange || this.parent.isDynamicDataChange && this.parent.listData && this.parent.listData.length <= 1) {
          this.checkAllParent.style.display = "none";
        } else {
          this.checkAllParent.style.display = "block";
        }
        this.parent.selectAllHeight = this.checkAllParent.getBoundingClientRect().height;
      } else if (!isNullOrUndefined(this.checkAllParent)) {
        this.checkAllParent.parentElement.removeChild(this.checkAllParent);
        this.checkAllParent = null;
      }
    };
    CheckBoxSelection2.prototype.destroy = function() {
      this.removeEventListener();
      EventHandler.remove(document, "mousedown", this.onDocumentClick);
      this.checkAllParent = null;
      this.clearIconElement = null;
      this.filterInput = null;
      this.filterInputObj = null;
      this.checkWrapper = null;
      this.selectAllSpan = null;
    };
    CheckBoxSelection2.prototype.listSelection = function(args) {
      var target;
      if (!isNullOrUndefined(args.e)) {
        var frameElm = args.li.querySelector(".e-checkbox-wrapper .e-frame");
        target = !isNullOrUndefined(args.e.target) ? args.e.target.classList.contains("e-frame") && (!this.parent.showSelectAll || this.checkAllParent && !this.checkAllParent.contains(args.e.target)) ? args.e.target : args.li.querySelector(".e-checkbox-wrapper").childNodes[1] : args.li.querySelector(".e-checkbox-wrapper").childNodes[1];
      } else {
        var checkboxWrapper = args.li.querySelector(".e-checkbox-wrapper");
        target = checkboxWrapper ? checkboxWrapper.childNodes[1] : args.li.lastElementChild.childNodes[1];
      }
      if (this.parent.itemTemplate || this.parent.enableGroupCheckBox) {
        target = args.li.firstElementChild.childNodes[1];
      }
      if (!isNullOrUndefined(target)) {
        this.checkWrapper = closest(target, "." + CHECKBOXWRAP2);
      }
      if (!isNullOrUndefined(this.checkWrapper)) {
        var checkElement = select("." + CHECKBOXFRAME2, this.checkWrapper);
        var selectAll2 = false;
        this.validateCheckNode(this.checkWrapper, checkElement.classList.contains(CHECK2), args.li, args.e, selectAll2);
      }
    };
    CheckBoxSelection2.prototype.validateCheckNode = function(checkWrap, isCheck, li, e, selectAll2) {
      this.changeState(checkWrap, isCheck ? "uncheck" : "check", e, true, selectAll2);
    };
    CheckBoxSelection2.prototype.clickHandler = function(e) {
      var target;
      if (e.currentTarget.classList.contains(this.checkAllParent.className) || e.currentTarget.classList.value === this.checkAllParent.className) {
        target = e.currentTarget.firstElementChild.lastElementChild;
      } else {
        target = e.currentTarget;
      }
      this.checkWrapper = closest(target, "." + CHECKBOXWRAP2);
      var selectAll2 = true;
      if (!isNullOrUndefined(this.checkWrapper)) {
        var checkElement = select("." + CHECKBOXFRAME2, this.checkWrapper);
        this.validateCheckNode(this.checkWrapper, checkElement.classList.contains(CHECK2), null, e, selectAll2);
      }
      e.preventDefault();
    };
    CheckBoxSelection2.prototype.changeState = function(wrapper, state, e, isPrevent, selectAll2) {
      var ariaState;
      var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME2)[0];
      if (state === "check" && !frameSpan.classList.contains(CHECK2)) {
        frameSpan.classList.remove(INDETERMINATE);
        frameSpan.classList.add(CHECK2);
        ariaState = "true";
        if (selectAll2) {
          this.parent.selectAllItems(true, e);
          this.setLocale(true);
        }
      } else if (state === "uncheck" && (frameSpan.classList.contains(CHECK2) || frameSpan.classList.contains(INDETERMINATE))) {
        removeClass([frameSpan], [CHECK2, INDETERMINATE]);
        ariaState = "false";
        if (selectAll2) {
          this.parent.selectAllItems(false, e);
          this.setLocale();
        }
      } else if (state === "indeterminate" && !frameSpan.classList.contains(INDETERMINATE)) {
        removeClass([frameSpan], [CHECK2]);
        frameSpan.classList.add(INDETERMINATE);
        ariaState = "false";
        if (selectAll2) {
          this.parent.selectAllItems(false, e);
          this.setLocale();
        }
      }
    };
    CheckBoxSelection2.prototype.setSearchBox = function(args) {
      if (isNullOrUndefined(this.parent.filterParent)) {
        this.parent.filterParent = this.parent.createElement("span", {
          className: filterParent
        });
        this.filterInput = this.parent.createElement("input", {
          attrs: {
            type: "text"
          },
          className: filterInput
        });
        this.parent.element.parentNode.insertBefore(this.filterInput, this.parent.element);
        var backIcon = false;
        if (Browser.isDevice && this.parent.isDeviceFullScreen) {
          backIcon = true;
          this.parent.mobFilter = false;
        }
        this.filterInputObj = Input.createInput({
          element: this.filterInput,
          buttons: backIcon ? [searchBackIcon, filterBarClearIcon] : [filterBarClearIcon],
          properties: {
            placeholder: this.parent.filterBarPlaceholder
          }
        }, this.parent.createElement);
        if (!isNullOrUndefined(this.parent.cssClass)) {
          if (this.parent.cssClass.split(" ").indexOf("e-outline") !== -1) {
            addClass([this.filterInputObj.container], "e-outline");
          } else if (this.parent.cssClass.split(" ").indexOf("e-filled") !== -1) {
            addClass([this.filterInputObj.container], "e-filled");
          }
        }
        append([this.filterInputObj.container], this.parent.filterParent);
        prepend([this.parent.filterParent], args.popupElement);
        attributes(this.filterInput, {
          "aria-disabled": "false",
          "role": "combobox",
          "autocomplete": "off",
          "autocapitalize": "off",
          "spellcheck": "false",
          "aria-label": "multiselect",
          "aria-expanded": "true",
          "aria-controls": args.popupElement.id
        });
        this.clearIconElement = this.filterInput.parentElement.querySelector("." + clearIcon);
        if (!Browser.isDevice && this.clearIconElement) {
          EventHandler.add(this.clearIconElement, "mousedown", this.clearText, this);
          this.clearIconElement.style.visibility = "hidden";
        }
        EventHandler.add(this.filterInput, "input", this.parent.onInput, this.parent);
        EventHandler.add(this.filterInput, "keyup", this.parent.keyUp, this.parent);
        EventHandler.add(this.filterInput, "keydown", this.parent.onKeyDown, this.parent);
        EventHandler.add(this.filterInput, "blur", this.onBlurHandler, this);
        EventHandler.add(this.filterInput, "paste", this.parent.pasteHandler, this.parent);
        this.parent.searchBoxHeight = this.filterInputObj.container.parentElement.getBoundingClientRect().height;
        return this.filterInputObj;
      }
    };
    CheckBoxSelection2.prototype.clickOnBackIcon = function(e) {
      this.parent.hidePopup();
      removeClass([document.body, this.parent.popupObj.element], popupFullScreen);
      this.parent.inputElement.focus();
    };
    CheckBoxSelection2.prototype.clearText = function(e) {
      this.parent.targetInputElement.value = "";
      if (this.parent.allowFiltering && this.parent.targetInputElement.value === "") {
        this.parent.search(null);
      }
      this.parent.refreshListItems(null);
      this.parent.refreshPopup();
      this.clearIconElement.style.visibility = "hidden";
      this.filterInput.focus();
      if (!this.parent.enableVirtualization || this.parent.enableVirtualization && (isNullOrUndefined(this.parent.value) || this.parent.value && this.parent.value.length === 0)) {
        this.setReorder(e);
      }
      this.boundPreventListSelection = this.preventListSelection.bind(this);
      this.parent.popupWrapper.addEventListener("mouseup", this.boundPreventListSelection, true);
      e.preventDefault();
    };
    CheckBoxSelection2.prototype.preventListSelection = function(e) {
      e.stopPropagation();
      this.parent.popupWrapper.removeEventListener("mouseup", this.boundPreventListSelection, true);
      this.boundPreventListSelection = null;
    };
    CheckBoxSelection2.prototype.setDeviceSearchBox = function() {
      this.parent.popupObj.element.classList.add(device);
      this.parent.popupObj.element.classList.add(mobileFilter);
      this.parent.popupObj.position = {
        X: 0,
        Y: 0
      };
      this.parent.popupObj.dataBind();
      this.setSearchBoxPosition();
      this.backIconElement = this.filterInputObj.container.querySelector(".e-back-icon");
      this.clearIconElement = this.filterInputObj.container.querySelector("." + clearIcon);
      this.clearIconElement.style.visibility = "hidden";
      EventHandler.add(this.backIconElement, "click", this.clickOnBackIcon, this);
      EventHandler.add(this.clearIconElement, "click", this.clearText, this);
    };
    CheckBoxSelection2.prototype.setSearchBoxPosition = function() {
      var searchBoxHeight = this.filterInput.parentElement.getBoundingClientRect().height;
      var selectAllHeight = 0;
      var footerHeight = 0;
      var headerHeight = 0;
      if (this.checkAllParent) {
        selectAllHeight = this.checkAllParent.getBoundingClientRect().height;
      }
      if (this.parent.header) {
        headerHeight = this.parent.header.getBoundingClientRect().height;
      }
      if (this.parent.footer) {
        footerHeight = this.parent.footer.getBoundingClientRect().height;
      }
      this.parent.popupObj.element.style.maxHeight = "100%";
      this.parent.popupObj.element.style.width = "100%";
      this.parent.list.style.maxHeight = window.innerHeight - searchBoxHeight - selectAllHeight - headerHeight - footerHeight + "px";
      this.parent.list.style.height = window.innerHeight - searchBoxHeight - selectAllHeight - headerHeight - footerHeight + "px";
      var clearElement = this.filterInput.parentElement.querySelector("." + clearIcon);
      detach(this.filterInput);
      clearElement.parentElement.insertBefore(this.filterInput, clearElement);
    };
    CheckBoxSelection2.prototype.setPopupFullScreen = function() {
      if (this.parent && this.parent.popupObj) {
        attributes(this.parent.popupObj.element, {
          style: "left:0px;right:0px;top:0px;bottom:0px;"
        });
        addClass([document.body, this.parent.popupObj.element], popupFullScreen);
        this.parent.popupObj.element.style.maxHeight = "100%";
        this.parent.popupObj.element.style.width = "100%";
      }
    };
    CheckBoxSelection2.prototype.targetElement = function() {
      if (!isNullOrUndefined(this.clearIconElement)) {
        this.parent.targetInputElement = this.filterInput;
        this.clearIconElement.style.visibility = this.parent.targetInputElement.value === "" ? "hidden" : "visible";
      }
      return this.parent.targetInputElement.value;
    };
    CheckBoxSelection2.prototype.onBlurHandler = function(e) {
      if (!this.parent.element.classList.contains("e-listbox")) {
        var target = void 0;
        if (this.parent.keyAction) {
          return;
        }
        if (Browser.isIE) {
          target = !isNullOrUndefined(e) && e.target;
        }
        if (!Browser.isIE) {
          target = !isNullOrUndefined(e) && e.relatedTarget;
        }
        if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && this.parent.popupObj.element.contains(target) && !Browser.isIE && this.filterInput) {
          this.filterInput.focus();
          return;
        }
        if (this.parent.scrollFocusStatus && this.filterInput) {
          e.preventDefault();
          this.filterInput.focus();
          this.parent.scrollFocusStatus = false;
          return;
        }
        if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && !this.parent.popupObj.element.classList.contains("e-popup-close")) {
          this.parent.inputFocus = false;
          this.parent.updateValueState(e, this.parent.value, this.parent.tempValues);
          this.parent.dispatchEvent(this.parent.hiddenElement, "change");
        }
        if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && !this.parent.popupObj.element.classList.contains("e-popup-close")) {
          this.parent.inputFocus = false;
          this.parent.overAllWrapper.classList.remove(FOCUS2);
          this.parent.trigger("blur");
          this.parent.focused = true;
        }
        if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && !this.parent.popupObj.element.classList.contains("e-popup-close") && !Browser.isDevice) {
          this.parent.hidePopup();
        }
      }
    };
    CheckBoxSelection2.prototype.onDocumentClick = function(e) {
      if (this.parent.getLocaleName() !== "listbox") {
        var target = e.target;
        if (!isNullOrUndefined(this.parent.popupObj) && closest(target, '[id="' + this.parent.popupObj.element.id + '"]')) {
          if (!(this.filterInput && this.filterInput.value !== "")) {
            e.preventDefault();
          }
        }
        if (!(!isNullOrUndefined(this.parent.popupObj) && closest(target, '[id="' + this.parent.popupObj.element.id + '"]')) && !isNullOrUndefined(this.parent.overAllWrapper) && !this.parent.overAllWrapper.contains(e.target)) {
          if (this.parent.overAllWrapper.classList.contains(dropDownBaseClasses.focus) || this.parent.isPopupOpen()) {
            this.parent.inputFocus = false;
            this.parent.scrollFocusStatus = false;
            this.parent.hidePopup();
            this.parent.onBlurHandler(e, true);
            this.parent.focused = true;
          }
        } else {
          this.parent.scrollFocusStatus = (Browser.isIE || Browser.info.name === "edge") && document.activeElement === this.filterInput;
        }
        if (!isNullOrUndefined(this.parent.overAllWrapper) && !this.parent.overAllWrapper.contains(e.target) && this.parent.overAllWrapper.classList.contains("e-input-focus") && !this.parent.isPopupOpen()) {
          if (Browser.isIE) {
            this.parent.onBlurHandler();
          } else {
            this.parent.onBlurHandler(e);
          }
        }
        if (this.filterInput === target) {
          this.filterInput.focus();
        }
      }
    };
    CheckBoxSelection2.prototype.getFocus = function(e) {
      this.parent.overAllWrapper.classList.remove(FOCUS2);
      if (this.parent.keyAction && e.value !== "clear" && e.value !== "focus") {
        this.parent.keyAction = false;
        return;
      }
      if (e.value === "focus") {
        this.filterInput.focus();
        this.parent.removeFocus();
        EventHandler.remove(this.parent.list, "keydown", this.parent.onKeyDown);
      }
      if (e.value === "clear") {
        this.filterInput.value = "";
        this.clearIconElement.style.visibility = "hidden";
      }
    };
    CheckBoxSelection2.prototype.checkSelectAll = function(e) {
      if (e.value === "check") {
        this.changeState(this.checkAllParent, e.value, null, null, false);
        this.setLocale(true);
      }
      if (e.value === "uncheck") {
        this.changeState(this.checkAllParent, e.value, null, null, false);
        this.setLocale();
      }
      if (e.value === "indeterminate") {
        this.changeState(this.checkAllParent, e.value, null, null, false);
        this.setLocale();
      }
    };
    CheckBoxSelection2.prototype.setLocale = function(unSelect) {
      if (this.parent.selectAllText !== "Select All" || this.parent.unSelectAllText !== "Unselect All") {
        var template = unSelect ? this.parent.unSelectAllText : this.parent.selectAllText;
        this.selectAllSpan.textContent = "";
        var compiledString = compile(template);
        var templateName = unSelect ? "unSelectAllText" : "selectAllText";
        for (var _i = 0, _a = compiledString({}, this.parent, templateName, null, !this.parent.isStringTemplate); _i < _a.length; _i++) {
          var item = _a[_i];
          this.selectAllSpan.textContent = item.textContent;
        }
      } else {
        var l10nLocale = {
          selectAllText: "Select All",
          unSelectAllText: "Unselect All"
        };
        var l10n = new L10n(this.parent.getLocaleName(), {}, this.parent.locale);
        if (l10n.getConstant("selectAllText") === "") {
          l10n = new L10n("dropdowns", l10nLocale, this.parent.locale);
        }
        if (!isNullOrUndefined(this.selectAllSpan)) {
          this.selectAllSpan.textContent = unSelect ? l10n.getConstant("unSelectAllText") : l10n.getConstant("selectAllText");
        }
      }
    };
    CheckBoxSelection2.prototype.getActiveList = function(args) {
      if (args.li.classList.contains("e-active")) {
        this.activeLi.push(args.li.cloneNode(true));
      } else {
        this.activeLi.splice(args.index, 1);
      }
    };
    CheckBoxSelection2.prototype.setReorder = function(args) {
      if (this.parent.enableSelectionOrder && !isNullOrUndefined(this.parent.value)) {
        var activeLiCount = this.parent.ulElement.querySelectorAll("li.e-active").length;
        var remLi = void 0;
        var ulEle_1 = this.parent.createElement("ul", {
          className: "e-list-parent e-ul e-reorder"
        });
        if (activeLiCount > 0) {
          var activeListItems = this.parent.ulElement.querySelectorAll("li.e-active");
          activeListItems.forEach(function(item) {
            ulEle_1.appendChild(item);
          });
          remLi = this.parent.ulElement.querySelectorAll("li.e-active");
          addClass(remLi, "e-reorder-hide");
          if (this.parent.enableVirtualization) {
            var virtualUlElement = this.parent.list.querySelector(".e-virtual-ddl-content");
            prepend([ulEle_1], virtualUlElement);
          } else {
            prepend([ulEle_1], this.parent.list);
          }
        }
        this.parent.focusAtFirstListItem();
      }
    };
    return CheckBoxSelection2;
  }()
);

// node_modules/@syncfusion/ej2-dropdowns/src/list-box/list-box.js
var __extends28 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate15 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SelectionSettings2 = (
  /** @class */
  function(_super) {
    __extends28(SelectionSettings3, _super);
    function SelectionSettings3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate15([Property("Multiple")], SelectionSettings3.prototype, "mode", void 0);
    __decorate15([Property(false)], SelectionSettings3.prototype, "showCheckbox", void 0);
    __decorate15([Property(false)], SelectionSettings3.prototype, "showSelectAll", void 0);
    __decorate15([Property("Left")], SelectionSettings3.prototype, "checkboxPosition", void 0);
    return SelectionSettings3;
  }(ChildProperty)
);
var ToolbarSettings = (
  /** @class */
  function(_super) {
    __extends28(ToolbarSettings2, _super);
    function ToolbarSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate15([Property([])], ToolbarSettings2.prototype, "items", void 0);
    __decorate15([Property("Right")], ToolbarSettings2.prototype, "position", void 0);
    return ToolbarSettings2;
  }(ChildProperty)
);
var ListBox = (
  /** @class */
  function(_super) {
    __extends28(ListBox2, _super);
    function ListBox2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.isValidKey = false;
      _this.isBackSpace = false;
      _this.isDataSourceUpdate = false;
      _this.keyDownStatus = false;
      return _this;
    }
    ListBox_1 = ListBox2;
    ListBox2.prototype.addItem = function(items, itemIndex) {
      _super.prototype.addItem.call(this, items, itemIndex);
      if (this.allowFiltering && this.filterInput.value !== "") {
        this.filteringAction(this.jsonData, new Query(), this.fields);
      }
    };
    ListBox2.prototype.render = function() {
      if (this.isAngular && this.allowFiltering) {
        var originalElement = this.element;
        var clonedElement = originalElement.cloneNode(true);
        originalElement.parentNode.replaceChild(clonedElement, originalElement);
        this.element = clonedElement;
        setValue("ej2_instances", [this], this.element);
      }
      this.inputString = "";
      this.initLoad = true;
      this.isCustomFiltering = false;
      this.initialSelectedOptions = this.value;
      this.inputFormName = this.element.getAttribute("name");
      _super.prototype.render.call(this);
      this.setEnabled();
      this.renderComplete();
    };
    ListBox2.prototype.initWrapper = function() {
      var hiddenSelect = this.createElement("select", {
        className: "e-hidden-select",
        attrs: {
          "multiple": ""
        }
      });
      hiddenSelect.style.visibility = "hidden";
      this.list.classList.add("e-listbox-wrapper");
      this.list.querySelector(".e-list-parent").setAttribute("role", "presentation");
      var groupHdrs = this.list.querySelectorAll(".e-list-group-item");
      for (var i = 0; i < groupHdrs.length; i++) {
        groupHdrs[i].removeAttribute("tabindex");
        groupHdrs[i].setAttribute("role", "option");
      }
      if (this.itemTemplate) {
        this.list.classList.add("e-list-template");
      }
      this.list.classList.add("e-wrapper");
      this.list.classList.add("e-lib");
      if (this.element.tagName === "EJS-LISTBOX") {
        this.element.setAttribute("tabindex", "0");
        if (this.initLoad) {
          this.element.appendChild(this.list);
        }
      } else {
        if (this.initLoad && this.element.parentElement) {
          this.element.parentElement.insertBefore(this.list, this.element);
        }
        this.list.insertBefore(this.element, this.list.firstChild);
        this.element.style.display = "none";
      }
      this.list.insertBefore(hiddenSelect, this.list.firstChild);
      if (this.list.getElementsByClassName("e-list-item")[0]) {
        this.list.getElementsByClassName("e-list-item")[0].classList.remove(dropDownBaseClasses.focus);
      }
      if (this.itemTemplate) {
        this.renderReactTemplates();
      }
      removeClass([this.list], [dropDownBaseClasses.content, dropDownBaseClasses.root]);
      this.validationAttribute(this.element, hiddenSelect);
      this.list.setAttribute("role", "listbox");
      attributes(this.list, {
        "role": "listbox",
        "aria-label": "listbox",
        "aria-multiselectable": this.selectionSettings.mode === "Multiple" ? "true" : "false"
      });
      this.updateSelectionSettings();
    };
    ListBox2.prototype.updateSelectionSettings = function() {
      if (this.selectionSettings.showCheckbox && this.selectionSettings.showSelectAll && this.liCollections.length) {
        var l10nSelect = new L10n(this.getModuleName(), {
          selectAllText: "Select All",
          unSelectAllText: "Unselect All"
        }, this.locale);
        this.showSelectAll = true;
        this.selectAllText = l10nSelect.getConstant("selectAllText");
        this.unSelectAllText = l10nSelect.getConstant("unSelectAllText");
        this.popupWrapper = this.list;
        this.checkBoxSelectionModule.checkAllParent = null;
        this.notify("selectAll", {});
      }
    };
    ListBox2.prototype.initDraggable = function() {
      var _this = this;
      if (this.ulElement) {
        this.ulElement.id = this.element.id + "_parent";
      }
      if (this.allowDragAndDrop) {
        new Sortable(this.ulElement, {
          scope: this.scope,
          itemClass: "e-list-item",
          beforeDragStart: this.triggerDragStart.bind(this),
          drag: this.triggerDrag.bind(this),
          beforeDrop: this.beforeDragEnd.bind(this),
          drop: this.dragEnd.bind(this),
          placeHolder: function() {
            return _this.createElement("span", {
              className: "e-placeholder"
            });
          },
          helper: function(e) {
            var wrapper = _this.list.cloneNode();
            var ele = e.sender.cloneNode(true);
            wrapper.appendChild(ele);
            var refEle = _this.getItems()[0];
            wrapper.style.width = refEle.offsetWidth + "px";
            wrapper.style.height = refEle.offsetHeight + "px";
            if ((_this.value && _this.value.length) > 1 && _this.isSelected(ele)) {
              ele.appendChild(_this.createElement("span", {
                className: "e-list-badge",
                innerHTML: _this.value.length + ""
              }));
            }
            wrapper.style.zIndex = getZindexPartial(_this.element) + "";
            return wrapper;
          }
        });
      }
    };
    ListBox2.prototype.updateActionCompleteData = function(li, item, index) {
      this.jsonData.splice(index === null ? this.jsonData.length : index, 0, item);
    };
    ListBox2.prototype.initToolbar = function() {
      var pos = this.toolbarSettings.position;
      var prevScope = this.element.getAttribute("data-value");
      this.toolbarSettings.items = isNullOrUndefined(this.toolbarSettings.items) ? [] : this.toolbarSettings.items;
      if (this.toolbarSettings.items.length) {
        var toolElem = this.createElement("div", {
          className: "e-listbox-tool",
          attrs: {
            "role": "toolbar"
          }
        });
        var wrapper = this.createElement("div", {
          className: "e-listboxtool-wrapper e-lib e-" + pos.toLowerCase()
        });
        this.list.parentElement.insertBefore(wrapper, this.list);
        wrapper.appendChild(pos === "Right" ? this.list : toolElem);
        wrapper.appendChild(pos === "Right" ? toolElem : this.list);
        this.createButtons(toolElem);
        if (!this.element.id) {
          this.element.id = getUniqueID("e-" + this.getModuleName());
        }
        if (this.scope) {
          document.querySelector(this.scope).setAttribute("data-value", this.element.id);
        } else {
          this.updateToolBarState();
        }
      }
      var scope = this.element.getAttribute("data-value");
      if (prevScope && scope && prevScope !== scope) {
        this.tBListBox = getComponent(document.getElementById(prevScope), this.getModuleName());
        this.tBListBox.updateToolBarState();
      } else if (scope) {
        this.tBListBox = getComponent(document.getElementById(scope), this.getModuleName());
        this.tBListBox.updateToolBarState();
      }
    };
    ListBox2.prototype.createButtons = function(toolElem) {
      var _this = this;
      var btn;
      var ele;
      var title;
      var l10n = new L10n(this.getModuleName(), {
        moveUp: "Move Up",
        moveDown: "Move Down",
        moveTo: "Move To",
        moveFrom: "Move From",
        moveAllTo: "Move All To",
        moveAllFrom: "Move All From"
      }, this.locale);
      this.toolbarSettings.items.forEach(function(value) {
        title = l10n.getConstant(value);
        ele = _this.createElement("button", {
          attrs: {
            "type": "button",
            "data-value": value,
            "title": title,
            "aria-label": title
          }
        });
        toolElem.appendChild(ele);
        btn = new Button({
          iconCss: "e-icons e-" + value.toLowerCase()
        }, ele);
        btn.createElement = _this.createElement;
      });
    };
    ListBox2.prototype.validationAttribute = function(input, hiddenSelect) {
      if (this.inputFormName) {
        input.setAttribute("name", this.inputFormName);
      }
      _super.prototype.validationAttribute.call(this, input, hiddenSelect);
      hiddenSelect.required = input.required;
      input.required = false;
    };
    ListBox2.prototype.setHeight = function() {
      var ele = this.toolbarSettings.items.length ? this.list.parentElement : this.list;
      ele.style.height = formatUnit(this.height);
      if (this.allowFiltering && this.height.toString().indexOf("%") < 0) {
        addClass([this.list], "e-filter-list");
      } else {
        removeClass([this.list], "e-filter-list");
      }
    };
    ListBox2.prototype.setCssClass = function() {
      var wrap2 = this.toolbarSettings.items.length ? this.list.parentElement : this.list;
      if (this.cssClass) {
        addClass([wrap2], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
      }
      if (this.enableRtl) {
        addClass([this.list], "e-rtl");
      }
    };
    ListBox2.prototype.setEnable = function() {
      var ele = this.toolbarSettings.items.length ? this.list.parentElement : this.list;
      if (this.enabled) {
        removeClass([ele], cssClass.disabled);
      } else {
        addClass([ele], cssClass.disabled);
      }
    };
    ListBox2.prototype.showSpinner = function() {
      if (!this.spinner) {
        this.spinner = this.createElement("div", {
          className: "e-listbox-wrapper"
        });
      }
      this.spinner.style.height = formatUnit(this.height);
      if (this.element.parentElement) {
        this.element.parentElement.insertBefore(this.spinner, this.element.nextSibling);
      }
      createSpinner({
        target: this.spinner
      }, this.createElement);
      showSpinner(this.spinner);
    };
    ListBox2.prototype.hideSpinner = function() {
      if (this.spinner.querySelector(".e-spinner-pane")) {
        hideSpinner(this.spinner);
      }
      if (this.spinner.parentElement) {
        detach(this.spinner);
      }
    };
    ListBox2.prototype.onInput = function() {
      this.isDataSourceUpdate = false;
      if (this.keyDownStatus) {
        this.isValidKey = true;
      } else {
        this.isValidKey = false;
      }
      this.keyDownStatus = false;
      this.refreshClearIcon();
    };
    ListBox2.prototype.clearText = function() {
      this.filterInput.value = "";
      this.refreshClearIcon();
      var event2 = document.createEvent("KeyboardEvent");
      this.isValidKey = true;
      this.KeyUp(event2);
    };
    ListBox2.prototype.refreshClearIcon = function() {
      if (this.filterInput.parentElement.querySelector("." + listBoxClasses.clearIcon)) {
        var clearElement = this.filterInput.parentElement.querySelector("." + listBoxClasses.clearIcon);
        clearElement.style.visibility = this.filterInput.value === "" ? "hidden" : "visible";
      }
    };
    ListBox2.prototype.onActionComplete = function(ulElement, list, e) {
      var _this = this;
      var searchEle;
      var filterElem;
      var txtLength;
      if (this.allowFiltering && this.list.getElementsByClassName("e-filter-parent")[0]) {
        searchEle = this.list.getElementsByClassName("e-filter-parent")[0].cloneNode(true);
      }
      if (list.length === 0) {
        var noRecElem = ulElement.childNodes[0];
        if (noRecElem) {
          ulElement.removeChild(noRecElem);
        }
      }
      if (this.allowFiltering) {
        filterElem = this.list.getElementsByClassName("e-input-filter")[0];
        if (filterElem) {
          txtLength = filterElem.selectionStart;
        }
      }
      _super.prototype.onActionComplete.call(this, ulElement, list, e);
      if (this.allowFiltering && !isNullOrUndefined(searchEle)) {
        this.list.insertBefore(searchEle, this.list.firstElementChild);
        this.filterParent = this.list.getElementsByClassName("e-filter-parent")[0];
        this.filterWireEvents(searchEle);
        var inputSearch = searchEle.querySelector(".e-input-filter");
        if (inputSearch) {
          inputSearch.addEventListener("focus", function() {
            if (!searchEle.childNodes[0].classList.contains("e-input-focus")) {
              searchEle.childNodes[0].classList.add("e-input-focus");
            }
          });
          inputSearch.addEventListener("blur", function() {
            if (searchEle.childNodes[0].classList.contains("e-input-focus")) {
              searchEle.childNodes[0].classList.remove("e-input-focus");
            }
          });
        }
      }
      this.initWrapper();
      this.setSelection(this.value, true, false, !this.isRendered);
      this.initDraggable();
      this.mainList = this.ulElement;
      if (this.initLoad) {
        this.jsonData = [];
        extend(this.jsonData, list, []);
        this.initToolbarAndStyles();
        this.wireEvents();
        if (this.showCheckbox) {
          this.setCheckboxPosition();
        }
        if (this.allowFiltering) {
          this.setFiltering();
        }
      } else {
        if (this.isDataSourceUpdate) {
          this.jsonData = [];
          extend(this.jsonData, list, []);
          this.isDataSourceUpdate = false;
        }
        if (this.allowFiltering) {
          filterElem = this.list.getElementsByClassName("e-input-filter")[0];
          if (isNullOrUndefined(filterElem)) {
            return;
          }
          filterElem.selectionStart = txtLength;
          filterElem.selectionEnd = txtLength;
          if (filterElem.value !== "" || filterElem.value === "" && this.isBackSpace) {
            filterElem.focus();
            setTimeout(function() {
              _this.isBackSpace = false;
            });
          }
        }
      }
      if (this.toolbarSettings.items.length && this.scope && this.scope.indexOf("#") > -1 && !isNullOrUndefined(e)) {
        var scope = this.scope.replace("#", "");
        var scopedLB = getComponent(document.getElementById(scope), this.getModuleName());
        scopedLB.initToolbar();
      }
      this.initLoad = false;
    };
    ListBox2.prototype.initToolbarAndStyles = function() {
      this.initToolbar();
      this.setCssClass();
      this.setEnable();
      this.setHeight();
    };
    ListBox2.prototype.triggerDragStart = function(args) {
      var _this = this;
      var badge;
      var extendedArgs = extend(this.getDragArgs(args), {
        dragSelected: true
      }, {
        cancel: false
      });
      if (Browser.isIos) {
        this.list.style.overflow = "hidden";
      }
      this.trigger("dragStart", extendedArgs, function(dragEventArgs) {
        _this.allowDragAll = dragEventArgs.dragSelected;
        if (!_this.allowDragAll) {
          badge = _this.ulElement.getElementsByClassName("e-list-badge")[0];
          if (badge) {
            detach(badge);
          }
        }
        if (dragEventArgs.cancel) {
          args.cancel = true;
        }
      });
    };
    ListBox2.prototype.triggerDrag = function(args) {
      var _this = this;
      var scrollParent;
      var boundRect;
      var scrollMoved = 36;
      var scrollHeight = 10;
      if (this.itemTemplate && args.target) {
        if (args.target && args.target.closest(".e-list-item")) {
          scrollHeight = args.target.closest(".e-list-item").scrollHeight;
        } else {
          var listItem = args.element.querySelector(".e-list-item");
          if (listItem) {
            scrollHeight = listItem.scrollHeight;
          }
        }
      }
      var event2 = args.event;
      var wrapper;
      this.stopTimer();
      if (args.target && (args.target.classList.contains("e-listbox-wrapper") || args.target.classList.contains("e-list-item") || args.target.classList.contains("e-filter-parent") || args.target.classList.contains("e-input-group") || args.target.closest(".e-list-item"))) {
        if (args.target.classList.contains("e-list-item") || args.target.classList.contains("e-filter-parent") || args.target.classList.contains("e-input-group") || args.target.closest(".e-list-item")) {
          wrapper = args.target.closest(".e-listbox-wrapper");
        } else {
          wrapper = args.target;
        }
        if (this.allowFiltering) {
          scrollParent = wrapper.querySelector(".e-list-parent");
        } else {
          scrollParent = wrapper;
        }
        if (scrollParent) {
          boundRect = scrollParent.getBoundingClientRect();
          if (boundRect.y + scrollParent.offsetHeight - (event2.clientY + scrollMoved) < 1) {
            this.timer = window.setInterval(function() {
              _this.setScrollDown(scrollParent, scrollHeight, true);
            }, 70);
          } else if (event2.clientY - scrollMoved - boundRect.y < 1) {
            this.timer = window.setInterval(function() {
              _this.setScrollDown(scrollParent, scrollHeight, false);
            }, 70);
          }
        }
      }
      if (args.target === null) {
        return;
      }
      this.trigger("drag", this.getDragArgs(args));
    };
    ListBox2.prototype.setScrollDown = function(scrollElem, scrollPixel, isScrollDown) {
      if (isScrollDown) {
        scrollElem.scrollTop = scrollElem.scrollTop + scrollPixel;
      } else {
        scrollElem.scrollTop = scrollElem.scrollTop - scrollPixel;
      }
    };
    ListBox2.prototype.stopTimer = function() {
      window.clearInterval(this.timer);
    };
    ListBox2.prototype.beforeDragEnd = function(args) {
      this.stopTimer();
      var items = [];
      this.dragValue = this.getFormattedValue(args.droppedElement.getAttribute("data-value"));
      if (this.value.indexOf(this.dragValue) > -1) {
        args.items = this.getDataByValues(this.value);
      } else {
        args.items = this.getDataByValues([this.dragValue]);
      }
      extend(items, args.items);
      this.trigger("beforeDrop", args);
      if (JSON.stringify(args.items) !== JSON.stringify(items)) {
        this.customDraggedItem = args.items;
      }
    };
    ListBox2.prototype.dragEnd = function(args) {
      var _this = this;
      var listData;
      var liColl;
      var jsonData;
      var droppedData;
      var selectedOptions;
      var sortedData;
      var dropValue = this.getFormattedValue(args.droppedElement.getAttribute("data-value"));
      var listObj = this.getComponent(args.droppedElement);
      var getArgs = this.getDragArgs({
        target: args.droppedElement
      }, true);
      var sourceArgs = {
        previousData: this.dataSource
      };
      var destArgs = {
        previousData: listObj.dataSource
      };
      var dragArgs = extend({}, getArgs, {
        target: args.target,
        source: {
          previousData: this.dataSource
        },
        previousIndex: args.previousIndex,
        currentIndex: args.currentIndex
      });
      if (listObj !== this) {
        var sourceArgs1 = extend(sourceArgs, {
          currentData: this.listData
        });
        dragArgs = extend(dragArgs, {
          source: sourceArgs1,
          destination: destArgs
        });
      }
      if (Browser.isIos) {
        this.list.style.overflow = "";
      }
      var targetListObj = this.getComponent(args.target);
      if (targetListObj && targetListObj.listData.length === 0) {
        var noRecElem = targetListObj.ulElement.childNodes[0];
        if (noRecElem) {
          targetListObj.ulElement.removeChild(noRecElem);
        }
      }
      if (listObj === this) {
        var ul_1 = this.ulElement;
        listData = [].slice.call(this.listData);
        liColl = [].slice.call(this.liCollections);
        jsonData = [].slice.call(this.jsonData);
        sortedData = [].slice.call(this.sortedData);
        var toSortIdx_1 = args.currentIndex;
        var toIdx_1 = args.currentIndex = this.getCurIdx(this, args.currentIndex);
        var rIdx = listData.indexOf(this.getDataByValue(dropValue));
        var jsonIdx = jsonData.indexOf(this.getDataByValue(dropValue));
        var sIdx = sortedData.indexOf(this.getDataByValue(dropValue));
        listData.splice(toIdx_1, 0, listData.splice(rIdx, 1)[0]);
        sortedData.splice(toSortIdx_1, 0, sortedData.splice(sIdx, 1)[0]);
        jsonData.splice(toIdx_1, 0, jsonData.splice(jsonIdx, 1)[0]);
        liColl.splice(toIdx_1, 0, liColl.splice(rIdx, 1)[0]);
        if (this.allowDragAll) {
          selectedOptions = this.value && Array.prototype.indexOf.call(this.value, dropValue) > -1 ? this.value : [dropValue];
          if (!isNullOrUndefined(this.customDraggedItem)) {
            selectedOptions = [];
            this.customDraggedItem.forEach(function(item) {
              selectedOptions.push(getValue(_this.fields.value, item));
            });
          }
          selectedOptions.forEach(function(value) {
            if (value !== dropValue) {
              var idx = listData.indexOf(_this.getDataByValue(value));
              var jsonIdx_1 = jsonData.indexOf(_this.getDataByValue(value));
              var sIdx_1 = sortedData.indexOf(_this.getDataByValue(value));
              if (idx > toIdx_1) {
                toIdx_1++;
              }
              jsonData.splice(toIdx_1, 0, jsonData.splice(jsonIdx_1, 1)[0]);
              listData.splice(toIdx_1, 0, listData.splice(idx, 1)[0]);
              sortedData.splice(toSortIdx_1, 0, sortedData.splice(sIdx_1, 1)[0]);
              liColl.splice(toIdx_1, 0, liColl.splice(idx, 1)[0]);
              ul_1.insertBefore(_this.getItems()[_this.getIndexByValue(value)], ul_1.getElementsByClassName("e-placeholder")[0]);
            }
          });
        }
        this.listData = listData;
        this.jsonData = jsonData;
        this.sortedData = sortedData;
        this.liCollections = liColl;
      } else {
        var li_1;
        var fLiColl_1 = [].slice.call(this.liCollections);
        var currIdx_1 = args.currentIndex = this.getCurIdx(listObj, args.currentIndex);
        var ul_2 = listObj.ulElement;
        listData = [].slice.call(listObj.listData);
        liColl = [].slice.call(listObj.liCollections);
        jsonData = [].slice.call(listObj.jsonData);
        sortedData = [].slice.call(listObj.sortedData);
        selectedOptions = this.value && Array.prototype.indexOf.call(this.value, dropValue) > -1 && this.allowDragAll ? this.value : [dropValue];
        if (!isNullOrUndefined(this.customDraggedItem)) {
          selectedOptions = [];
          this.customDraggedItem.forEach(function(item) {
            selectedOptions.push(getValue(_this.fields.value, item));
          });
        }
        var fListData_1 = [].slice.call(this.listData);
        var fSortData_1 = [].slice.call(this.sortedData);
        selectedOptions.forEach(function(value) {
          droppedData = _this.getDataByValue(value);
          var srcIdx = _this.listData.indexOf(droppedData);
          var jsonSrcIdx = _this.jsonData.indexOf(droppedData);
          var sortIdx = _this.sortedData.indexOf(droppedData);
          fListData_1.splice(srcIdx, 1);
          _this.jsonData.splice(jsonSrcIdx, 1);
          fSortData_1.splice(sortIdx, 1);
          _this.listData = fListData_1;
          _this.sortedData = fSortData_1;
          var destIdx = value === dropValue ? args.currentIndex : currIdx_1;
          listData.splice(destIdx, 0, droppedData);
          jsonData.splice(destIdx, 0, droppedData);
          sortedData.splice(destIdx, 0, droppedData);
          liColl.splice(destIdx, 0, fLiColl_1.splice(srcIdx, 1)[0]);
          if (!value) {
            var liCollElem_1 = _this.getItems();
            for (var i2 = 0; i2 < liCollElem_1.length; i2++) {
              if (liCollElem_1[i2].getAttribute("data-value") === null && liCollElem_1[i2].classList.contains("e-list-item")) {
                li_1 = liCollElem_1[i2];
                break;
              }
            }
          } else {
            li_1 = _this.getItems()[_this.getIndexByValue(value)];
          }
          if (!li_1) {
            li_1 = args.helper;
          }
          _this.removeSelected(_this, value === dropValue ? [args.droppedElement] : [li_1]);
          ul_2.insertBefore(li_1, ul_2.getElementsByClassName("e-placeholder")[0]);
          currIdx_1++;
        });
        if (this.fields.groupBy) {
          var sourceElem = this.renderItems(this.listData, this.fields);
          this.updateListItems(sourceElem, this.ulElement);
          this.setSelection();
        }
        if (listObj.sortOrder !== "None" || this.selectionSettings.showCheckbox !== listObj.selectionSettings.showCheckbox || listObj.fields.groupBy || listObj.itemTemplate || this.itemTemplate) {
          var sortable = getComponent(ul_2, "sortable");
          var sourceElem = listObj.renderItems(listData, listObj.fields);
          listObj.updateListItems(sourceElem, ul_2);
          this.setSelection();
          if (sortable.placeHolderElement) {
            ul_2.appendChild(sortable.placeHolderElement);
          }
          ul_2.appendChild(args.helper);
          listObj.setSelection();
        }
        this.liCollections = fLiColl_1;
        listObj.liCollections = liColl;
        listObj.jsonData = extend([], [], jsonData, false);
        listObj.listData = extend([], [], listData, false);
        if (listObj.sortOrder === "None") {
          listObj.sortedData = extend([], [], sortedData, false);
        }
        if (this.listData.length === 0) {
          this.l10nUpdate();
        }
      }
      if (this === listObj) {
        var sourceArgs1 = extend(sourceArgs, {
          currentData: listData
        });
        dragArgs = extend(dragArgs, {
          source: sourceArgs1
        });
      } else {
        var dragArgs1 = extend(destArgs, {
          currentData: listData
        });
        dragArgs = extend(dragArgs, {
          destination: dragArgs1
        });
      }
      if (!isNullOrUndefined(this.customDraggedItem)) {
        dragArgs.items = this.customDraggedItem;
      }
      this.trigger("drop", dragArgs);
      var liCollElem = dragArgs.elements;
      if (liCollElem.length) {
        for (var i = 0; i < liCollElem.length; i++) {
          liCollElem[i].classList.remove("e-grabbed");
        }
      }
      if (this.toolbarSettings.items.length > 0) {
        this.updateToolBarState();
      } else if (this.tBListBox && this.tBListBox.toolbarSettings.items.length > 0) {
        this.tBListBox.updateToolBarState();
      }
    };
    ListBox2.prototype.updateListItems = function(sourceElem, destElem) {
      destElem.innerHTML = "";
      destElem.append.apply(destElem, sourceElem.childNodes);
    };
    ListBox2.prototype.removeSelected = function(listObj, elems) {
      if (listObj.selectionSettings.showCheckbox) {
        elems.forEach(function(ele) {
          ele.getElementsByClassName("e-frame")[0].classList.remove("e-check");
        });
      } else {
        removeClass(elems, cssClass.selected);
      }
    };
    ListBox2.prototype.getCurIdx = function(listObj, idx) {
      if (listObj.fields.groupBy) {
        idx -= [].slice.call(listObj.ulElement.children).slice(0, idx).filter(function(ele) {
          return ele.classList.contains(cssClass.group);
        }).length;
      }
      return idx;
    };
    ListBox2.prototype.getComponent = function(li) {
      var listObj;
      var ele = this.element.tagName === "EJS-LISTBOX" ? closest(li, ".e-listbox") : closest(li, ".e-listbox-wrapper") && closest(li, ".e-listbox-wrapper").querySelector(".e-listbox");
      if (ele) {
        listObj = getComponent(ele, this.getModuleName());
      }
      return listObj;
    };
    ListBox2.prototype.setEnabled = function() {
      this.element.setAttribute("aria-disabled", this.enabled ? "false" : "true");
    };
    ListBox2.prototype.listOption = function(dataSource, fields) {
      this.listCurrentOptions = _super.prototype.listOption.call(this, dataSource, fields);
      this.listCurrentOptions = extend({}, this.listCurrentOptions, {
        itemCreated: this.triggerBeforeItemRender.bind(this)
      }, true);
      this.notify("listoption", {
        module: "CheckBoxSelection"
      });
      return this.listCurrentOptions;
    };
    ListBox2.prototype.triggerBeforeItemRender = function(e) {
      e.item.setAttribute("tabindex", "-1");
      this.trigger("beforeItemRender", {
        element: e.item,
        item: e.curData
      });
    };
    ListBox2.prototype.requiredModules = function() {
      var modules = [];
      if (this.selectionSettings.showCheckbox) {
        modules.push({
          member: "CheckBoxSelection",
          args: [this]
        });
      }
      return modules;
    };
    ListBox2.prototype.enableItems = function(items, enable, isValue) {
      var _this = this;
      if (enable === void 0) {
        enable = true;
      }
      var li;
      items.forEach(function(item) {
        var text = item;
        li = _this.findListElement(_this.list, "li", "data-value", isValue ? text : _this.getValueByText(text));
        if (!li) {
          return;
        }
        if (enable) {
          removeClass([li], cssClass.disabled);
          li.removeAttribute("aria-disabled");
        } else {
          addClass([li], cssClass.disabled);
          li.setAttribute("aria-disabled", "true");
        }
      });
      if (this.allowFiltering && this.filterInput && this.filterInput.value !== "" && this.toolbarSettings.items.length > 0) {
        var canDisable_1 = false;
        this.ulElement.childNodes.forEach(function(li2) {
          if (!li2.classList.contains("e-disabled")) {
            canDisable_1 = true;
          }
        });
        if (!canDisable_1) {
          var wrap2 = this.list.parentElement.getElementsByClassName("e-listbox-tool")[0];
          var btn = wrap2.querySelector('[data-value="moveAllTo"]');
          btn.disabled = true;
        }
      }
    };
    ListBox2.prototype.selectItems = function(items, state, isValue) {
      if (state === void 0) {
        state = true;
      }
      if (state && !this.selectionSettings.showCheckbox && this.selectionSettings.mode === "Single") {
        this.getSelectedItems().forEach(function(li) {
          li.classList.remove("e-active");
          li.removeAttribute("aria-selected");
          removeClass([li], cssClass.selected);
        });
      }
      this.setSelection(items, state, !isValue);
      this.updateSelectedOptions();
      var selElems = [];
      for (var i = 0; i < items.length; i++) {
        var liColl = this.list.querySelectorAll('[aria-selected="true"]');
        for (var j = 0; j < liColl.length; j++) {
          if (items[i] === this.getFormattedValue(liColl[j].getAttribute("data-value"))) {
            selElems.push(liColl[j]);
          }
        }
      }
      this.triggerChange(selElems, null);
    };
    ListBox2.prototype.selectAll = function(state) {
      if (state === void 0) {
        state = true;
      }
      this.selectAllItems(state);
    };
    ListBox2.prototype.addItems = function(items, itemIndex) {
      _super.prototype.addItem.call(this, items, itemIndex);
      if (this.allowFiltering && this.filterInput.value !== "") {
        this.filteringAction(this.jsonData, new Query(), this.fields);
      }
    };
    ListBox2.prototype.removeItems = function(items, itemIndex) {
      this.removeItem(items, itemIndex);
    };
    ListBox2.prototype.removeItem = function(items, itemIndex) {
      var _this = this;
      var liCollections = [];
      var liElement = this.list.querySelectorAll("." + dropDownBaseClasses.li);
      if (items) {
        items = items instanceof Array ? items : [items];
        var fields = this.fields;
        var dataValue = void 0;
        var objValue = {};
        var dupData = [];
        extend(dupData, [], this.jsonData);
        var removeIdxes = [];
        var removeLiIdxes = [];
        for (var i = 0; i < dupData.length; i++) {
          var value = dupData[i] instanceof Object ? dupData[i][fields.value] : dupData[i].toString();
          objValue[value] = i;
        }
        for (var j = 0; j < items.length; j++) {
          dataValue = items[j] instanceof Object ? items[j][fields.value] : items[j].toString();
          if (Object.prototype.hasOwnProperty.call(objValue, dataValue)) {
            var idx = objValue[dataValue];
            liCollections.push(liElement[idx]);
            removeIdxes.push(idx);
            removeLiIdxes.push(idx);
          }
        }
        var validRemoveIdxes = removeIdxes.sort(function(a, b) {
          return b - a;
        });
        validRemoveIdxes.forEach(function(idx2) {
          _this.listData.splice(idx2, 1);
          _this.jsonData.splice(idx2, 1);
        });
        for (var k = removeLiIdxes.length - 1; k >= 0; k--) {
          this.updateLiCollection(removeLiIdxes[k]);
        }
      } else {
        itemIndex = itemIndex ? itemIndex : 0;
        liCollections.push(liElement[itemIndex]);
        this.listData.splice(itemIndex, 1);
        this.jsonData.splice(itemIndex, 1);
        this.updateLiCollection(itemIndex);
      }
      for (var i = 0; i < liCollections.length; i++) {
        this.ulElement.removeChild(liCollections[i]);
      }
      if (this.listData.length === 0) {
        this.l10nUpdate();
      }
      if (this.listData.length !== this.sortedData.length) {
        this.sortedData = this.listData;
      }
      this.value = [];
      this.updateToolBarState();
    };
    ListBox2.prototype.getDataByValues = function(value) {
      var data = [];
      for (var i = 0; i < value.length; i++) {
        data.push(this.getDataByValue(value[i]));
      }
      return data;
    };
    ListBox2.prototype.moveUp = function(value) {
      var elem = value ? this.getElemByValue(value) : this.getSelectedItems();
      this.moveUpDown(true, false, elem);
    };
    ListBox2.prototype.moveDown = function(value) {
      var elem = value ? this.getElemByValue(value) : this.getSelectedItems();
      this.moveUpDown(false, false, elem);
    };
    ListBox2.prototype.moveTop = function(value) {
      var elem = value ? this.getElemByValue(value) : this.getSelectedItems();
      this.moveUpDown(null, false, elem, true);
    };
    ListBox2.prototype.moveBottom = function(value) {
      var elem = value ? this.getElemByValue(value) : this.getSelectedItems();
      this.moveUpDown(true, false, elem, false, true);
    };
    ListBox2.prototype.moveTo = function(value, index, targetId) {
      var elem = value ? this.getElemByValue(value) : this.getSelectedItems();
      var tlistbox = targetId ? getComponent(targetId, ListBox_1) : this.getScopedListBox();
      this.moveData(this, tlistbox, false, elem, index);
    };
    ListBox2.prototype.moveAllTo = function(targetId, index) {
      this.toolbarAction = "moveAllTo";
      if (this.listData.length > 0) {
        var tlistbox = targetId ? getComponent(targetId, ListBox_1) : this.getScopedListBox();
        this.moveAllData(this, tlistbox, false, index);
      }
    };
    ListBox2.prototype.getDataList = function() {
      return this.jsonData;
    };
    ListBox2.prototype.getSortedList = function() {
      var sortData;
      var tempData;
      sortData = tempData = this.sortedData;
      if (this.fields.groupBy) {
        sortData = [];
        for (var i = 0; i < tempData.length; i++) {
          if (tempData[i].isHeader) {
            continue;
          }
          sortData.push(tempData[i]);
        }
      }
      return sortData;
    };
    ListBox2.prototype.getElemByValue = function(value) {
      var elem = [];
      for (var i = 0; i < value.length; i++) {
        elem.push(this.ulElement.querySelector('[data-value ="' + value[i] + '"]'));
      }
      return elem;
    };
    ListBox2.prototype.updateLiCollection = function(index) {
      var tempLi = [].slice.call(this.liCollections);
      tempLi.splice(index, 1);
      this.liCollections = tempLi;
    };
    ListBox2.prototype.selectAllItems = function(state, event2) {
      var _this = this;
      [].slice.call(this.getItems()).forEach(function(li) {
        if (!li.classList.contains(cssClass.disabled)) {
          if (_this.selectionSettings.showCheckbox) {
            var ele = li.getElementsByClassName("e-check")[0];
            if (!ele && state || ele && !state) {
              _this.notify("updatelist", {
                li,
                module: "listbox"
              });
              if (_this.maximumSelectionLength >= _this.list.querySelectorAll(".e-list-item span.e-check").length) {
                _this.checkMaxSelection();
              }
            }
          } else {
            if (state) {
              li.classList.add(cssClass.selected);
            } else {
              li.classList.remove(cssClass.selected);
            }
          }
        }
      });
      this.updateSelectedOptions();
      if (this.allowFiltering && this.selectionSettings.showCheckbox) {
        var liEle = this.list.getElementsByTagName("li");
        var index = 0;
        if (state) {
          var _loop_1 = function() {
            var dataValue1 = this_1.getFormattedValue(liEle[index].getAttribute("data-value"));
            if (!this_1.value.some(function(e) {
              return e === dataValue1;
            })) {
              this_1.value.push(this_1.getFormattedValue(liEle[index].getAttribute("data-value")));
            }
          };
          var this_1 = this;
          for (index = 0; index < liEle.length; index++) {
            _loop_1();
          }
        } else {
          var _loop_2 = function() {
            var dataValue2 = this_2.getFormattedValue(liEle[index].getAttribute("data-value"));
            this_2.value = this_2.value.filter(function(e) {
              return e !== dataValue2;
            });
          };
          var this_2 = this;
          for (index = 0; index < liEle.length; index++) {
            _loop_2();
          }
        }
        if (document.querySelectorAll("ul").length < 2) {
          this.updateMainList();
        }
      }
      this.triggerChange(this.getSelectedItems(), event2);
    };
    ListBox2.prototype.updateMainList = function() {
      var mainList = this.mainList.querySelectorAll(".e-list-item");
      var ulList = this.ulElement.querySelectorAll(".e-list-item");
      var mainCount = mainList.length;
      var ulEleCount = ulList.length;
      if (this.selectionSettings.showCheckbox || document.querySelectorAll("ul").length > 1 || mainCount !== ulEleCount) {
        var listindex = 0;
        var valueindex = 0;
        var count2 = 0;
        for (listindex; listindex < mainCount; ) {
          if (this.value) {
            for (valueindex; valueindex < this.value.length; valueindex++) {
              if (mainList[listindex].getAttribute("data-value") === this.value[valueindex]) {
                count2++;
              }
            }
          }
          if (!count2 && this.selectionSettings.showCheckbox) {
            mainList[listindex].getElementsByClassName("e-frame")[0].classList.remove("e-check");
          }
          if (document.querySelectorAll("ul").length > 1 && count2 && mainCount !== ulEleCount) {
            this.mainList.removeChild(this.mainList.getElementsByTagName("li")[listindex]);
            listindex = 0;
          } else {
            listindex++;
          }
          count2 = 0;
          valueindex = 0;
        }
      }
    };
    ListBox2.prototype.wireEvents = function() {
      var form = closest(this.element, "form");
      var wrapper = this.element.tagName === "EJS-LISTBOX" ? this.element : this.list;
      EventHandler.add(this.list, "click", this.clickHandler, this);
      EventHandler.add(wrapper, "keydown", this.keyDownHandler, this);
      EventHandler.add(wrapper, "focusout", this.focusOutHandler, this);
      this.wireToolbarEvent();
      if (this.selectionSettings.showCheckbox) {
        EventHandler.remove(document, "mousedown", this.checkBoxSelectionModule.onDocumentClick);
      }
      if (this.fields.groupBy || this.element.querySelector("select>optgroup")) {
        EventHandler.remove(this.list, "scroll", this.setFloatingHeader);
      }
      if (form) {
        EventHandler.add(form, "reset", this.formResetHandler, this);
      }
      window.addEventListener("resize", this.resizeHandler.bind(this));
    };
    ListBox2.prototype.wireToolbarEvent = function() {
      if (this.toolbarSettings.items.length) {
        EventHandler.add(this.getToolElem(), "click", this.toolbarClickHandler, this);
      }
    };
    ListBox2.prototype.unwireEvents = function() {
      var form = closest(this.element, "form");
      var wrapper = this.element.tagName === "EJS-LISTBOX" ? this.element : this.list;
      EventHandler.remove(this.list, "click", this.clickHandler);
      EventHandler.remove(wrapper, "keydown", this.keyDownHandler);
      EventHandler.remove(wrapper, "focusout", this.focusOutHandler);
      if (this.allowFiltering && this.clearFilterIconElem) {
        EventHandler.remove(this.clearFilterIconElem, "click", this.clearText);
      }
      if (this.toolbarSettings.items.length) {
        EventHandler.remove(this.getToolElem(), "click", this.toolbarClickHandler);
      }
      if (form) {
        EventHandler.remove(form, "reset", this.formResetHandler);
      }
      window.removeEventListener("resize", this.resizeHandler.bind(this));
    };
    ListBox2.prototype.clickHandler = function(e) {
      var li = closest(e.target, ".e-list-item");
      if (isNullOrUndefined(li)) {
        return;
      }
      this.selectHandler(e);
    };
    ListBox2.prototype.checkSelectAll = function() {
      var searchCount = 0;
      var liItems = this.list.querySelectorAll("li." + dropDownBaseClasses.li);
      for (var i = 0; i < liItems.length; i++) {
        if (!liItems[i].classList.contains("e-disabled")) {
          searchCount++;
        }
      }
      var len = this.getSelectedItems().length;
      if (this.showSelectAll && searchCount) {
        this.notify("checkSelectAll", {
          module: "CheckBoxSelection",
          value: searchCount === len ? "check" : len === 0 ? "uncheck" : "indeterminate"
        });
      }
    };
    ListBox2.prototype.getQuery = function(query) {
      var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();
      if (this.allowFiltering) {
        var filterType = this.inputString === "" ? "contains" : this.filterType;
        var dataType = this.typeOfData(this.dataSource).typeof;
        if (dataType === null) {
          dataType = this.typeOfData(this.jsonData).typeof;
        }
        if (!(this.dataSource instanceof DataManager) && dataType === "string" || dataType === "number") {
          filterQuery.where("", filterType, this.inputString, this.ignoreCase, this.ignoreAccent);
        } else {
          var fields = this.fields.text ? this.fields.text : "";
          filterQuery.where(fields, filterType, this.inputString, this.ignoreCase, this.ignoreAccent);
        }
      } else {
        filterQuery = query ? query : this.query ? this.query : new Query();
      }
      return filterQuery;
    };
    ListBox2.prototype.setFiltering = function() {
      var filterInputObj;
      if (this.initLoad || isNullOrUndefined(this.filterParent)) {
        this.filterParent = this.createElement("span", {
          className: listBoxClasses.filterParent
        });
        this.filterInput = this.createElement("input", {
          attrs: {
            type: "text"
          },
          className: listBoxClasses.filterInput
        });
        this.element.parentNode.insertBefore(this.filterInput, this.element);
        filterInputObj = Input.createInput({
          element: this.filterInput,
          buttons: [listBoxClasses.filterBarClearIcon],
          properties: {
            placeholder: this.filterBarPlaceholder
          }
        }, this.createElement);
        append([filterInputObj.container], this.filterParent);
        prepend([this.filterParent], this.list);
        attributes(this.filterInput, {
          "aria-disabled": "false",
          "aria-label": "search list item",
          "autocomplete": "off",
          "autocorrect": "off",
          "autocapitalize": "off",
          "spellcheck": "false",
          "role": "textbox"
        });
        if (this.height.toString().indexOf("%") < 0) {
          addClass([this.list], "e-filter-list");
        } else if (this.height.toString().indexOf("%") > 0) {
          this.ulElement.style.height = this.ulElement.offsetHeight - this.filterParent.offsetHeight + "px";
        }
        this.inputString = this.filterInput.value;
        this.filterWireEvents();
        this.ulElement.style.setProperty("height", "calc(100% - " + this.filterParent.offsetHeight + "px)", "important");
        return filterInputObj;
      }
    };
    ListBox2.prototype.filterWireEvents = function(filterElem) {
      if (filterElem) {
        this.filterInput = filterElem.querySelector(".e-input-filter");
      }
      this.clearFilterIconElem = this.filterInput.parentElement.querySelector("." + listBoxClasses.clearIcon);
      if (this.clearFilterIconElem) {
        EventHandler.add(this.clearFilterIconElem, "click", this.clearText, this);
        if (!filterElem) {
          this.clearFilterIconElem.style.visibility = "hidden";
        }
      }
      EventHandler.add(this.filterInput, "input", this.onInput, this);
      EventHandler.add(this.filterInput, "keyup", this.KeyUp, this);
      EventHandler.add(this.filterInput, "keydown", this.onKeyDown, this);
    };
    ListBox2.prototype.selectHandler = function(e, isKey) {
      var isSelect = true;
      var currSelIdx;
      var li = closest(e.target, ".e-list-item");
      var selectedLi = [li];
      if (li && li.parentElement) {
        currSelIdx = [].slice.call(li.parentElement.children).indexOf(li);
        if (!this.selectionSettings.showCheckbox) {
          if ((e.ctrlKey || e.metaKey || Browser.isDevice) && this.isSelected(li)) {
            li.classList.remove(cssClass.selected);
            li.removeAttribute("aria-selected");
            isSelect = false;
          } else if (!(this.selectionSettings.mode === "Multiple" && (e.ctrlKey || e.metaKey || Browser.isDevice))) {
            this.getSelectedItems().forEach(function(ele) {
              ele.removeAttribute("aria-selected");
            });
            removeClass(this.getSelectedItems(), cssClass.selected);
          }
        } else {
          isSelect = !li.getElementsByClassName("e-frame")[0].classList.contains("e-check");
        }
        if (e.shiftKey && !this.selectionSettings.showCheckbox && this.selectionSettings.mode !== "Single") {
          selectedLi = [].slice.call(li.parentElement.children).slice(Math.min(currSelIdx, this.prevSelIdx), Math.max(currSelIdx, this.prevSelIdx) + 1).filter(function(ele) {
            return ele.classList.contains("e-list-item");
          });
        } else {
          this.prevSelIdx = [].slice.call(li.parentElement.children).indexOf(li);
        }
        if (isSelect) {
          if (!this.selectionSettings.showCheckbox) {
            addClass(selectedLi, cssClass.selected);
          }
          selectedLi.forEach(function(ele) {
            ele.setAttribute("aria-selected", "true");
          });
          this.list.setAttribute("aria-activedescendant", li.id);
        } else {
          selectedLi.forEach(function(ele) {
            ele.setAttribute("aria-selected", "false");
          });
        }
        if (!isKey && (this.maximumSelectionLength > (this.value && this.value.length) || !isSelect) && (this.maximumSelectionLength >= (this.value && this.value.length) || !isSelect) && !(this.maximumSelectionLength < (this.value && this.value.length))) {
          this.notify("updatelist", {
            li,
            e,
            module: "listbox"
          });
        }
        if (this.allowFiltering && !isKey) {
          var liDataValue_1 = this.getFormattedValue(li.getAttribute("data-value"));
          if (!isSelect) {
            this.value = this.value.filter(function(value1) {
              return value1 !== liDataValue_1;
            });
          } else {
            var values = [];
            extend(values, this.value);
            values.push(liDataValue_1);
            this.value = values;
          }
          if (document.querySelectorAll("ul").length < 2) {
            this.updateMainList();
          }
        }
        this.updateSelectedOptions();
        this.triggerChange(this.getSelectedItems(), e);
        if (this.list) {
          this.checkMaxSelection();
        }
      }
    };
    ListBox2.prototype.triggerChange = function(selectedLis, event2) {
      this.trigger("change", {
        elements: selectedLis,
        items: this.getDataByElements(selectedLis),
        value: this.value,
        event: event2
      });
    };
    ListBox2.prototype.getDataByElems = function(elems) {
      var data = [];
      var len = elems.length;
      for (var i = 0; i < len; i++) {
        var elem = elems[i];
        var value = elem.getAttribute("data-value");
        var formattedValue = this.getFormattedValue(value);
        data.push(this.getDataByValue(formattedValue));
      }
      return data;
    };
    ListBox2.prototype.getDataByElements = function(elems) {
      var data = [];
      var value;
      var sIdx = 0;
      if (!isNullOrUndefined(this.listData)) {
        var type = this.typeOfData(this.listData).typeof;
        if (type === "string" || type === "number" || type === "boolean") {
          for (var _i = 0, _a = this.listData; _i < _a.length; _i++) {
            var item = _a[_i];
            for (var i = sIdx, len = elems.length; i < len; i++) {
              value = this.getFormattedValue(elems[i].getAttribute("data-value"));
              if (!isNullOrUndefined(item) && item === value) {
                sIdx = i;
                data.push(item);
                break;
              }
            }
            if (elems.length === data.length) {
              break;
            }
          }
        } else {
          for (var _b = 0, _c = this.listData; _b < _c.length; _b++) {
            var item = _c[_b];
            for (var i = sIdx, len = elems.length; i < len; i++) {
              value = this.getFormattedValue(elems[i].getAttribute("data-value"));
              if (!isNullOrUndefined(item) && getValue(this.fields.value ? this.fields.value : "value", item) === value) {
                sIdx = i;
                data.push(item);
                break;
              }
            }
            if (elems.length === data.length) {
              break;
            }
          }
        }
        return data;
      }
      return null;
    };
    ListBox2.prototype.checkMaxSelection = function() {
      var limit = this.list.querySelectorAll(".e-list-item span.e-check").length;
      if (this.selectionSettings.showCheckbox) {
        var index = 0;
        var liCollElem = this.list.getElementsByClassName("e-list-item");
        for (index; index < liCollElem.length; index++) {
          if (!liCollElem[index].querySelector(".e-frame.e-check")) {
            if (limit === this.maximumSelectionLength) {
              liCollElem[index].classList.add("e-disable");
            } else if (liCollElem[index].classList.contains("e-disable")) {
              liCollElem[index].classList.remove("e-disable");
            }
          }
        }
      }
    };
    ListBox2.prototype.toolbarClickHandler = function(e) {
      var btn = closest(e.target, "button");
      if (btn) {
        this.toolbarAction = btn.getAttribute("data-value");
        if (btn.disabled) {
          return;
        }
        switch (this.toolbarAction) {
          case "moveUp":
            this.moveUpDown(true);
            break;
          case "moveDown":
            this.moveUpDown();
            break;
          case "moveTo":
            this.moveItemTo();
            break;
          case "moveFrom":
            this.moveItemFrom();
            break;
          case "moveAllTo":
            this.moveAllItemTo();
            break;
          case "moveAllFrom":
            this.moveAllItemFrom();
            break;
          default:
            this.trigger("actionBegin", {
              cancel: false,
              items: this.getDataByElems(this.getSelectedItems()),
              eventName: this.toolbarAction
            });
            break;
        }
      }
    };
    ListBox2.prototype.moveUpDown = function(isUp, isKey, value, isTop, isBottom) {
      var _this = this;
      var elems = this.getSelectedItems();
      if (value) {
        elems = value;
      }
      if ((isUp && this.isSelected(this.ulElement.firstElementChild) || !isUp && this.isSelected(this.ulElement.lastElementChild)) && !value) {
        return;
      }
      var tempItems = this.getDataByElems(elems);
      var localDataArgs = {
        cancel: false,
        items: tempItems,
        eventName: this.toolbarAction
      };
      this.trigger("actionBegin", localDataArgs);
      if (localDataArgs.cancel) {
        return;
      }
      (isUp ? elems : elems.reverse()).forEach(function(ele) {
        var jsonToIdx = Array.prototype.indexOf.call(_this.ulElement.querySelectorAll(".e-list-item"), ele);
        var idx = Array.prototype.indexOf.call(_this.ulElement.children, ele);
        if (isTop) {
          moveTo(_this.ulElement, _this.ulElement, [idx], 0);
          _this.changeData(idx, 0, jsonToIdx, ele);
        } else if (isBottom) {
          moveTo(_this.ulElement, _this.ulElement, [idx], _this.ulElement.querySelectorAll(".e-list-item").length);
          _this.changeData(idx, _this.ulElement.querySelectorAll(".e-list-item").length, jsonToIdx, ele);
        } else {
          moveTo(_this.ulElement, _this.ulElement, [idx], isUp ? idx - 1 : idx + 2);
          _this.changeData(idx, isUp ? idx - 1 : idx + 1, isUp ? jsonToIdx - 1 : jsonToIdx + 1, ele);
        }
      });
      this.trigger("actionComplete", {
        items: tempItems,
        eventName: this.toolbarAction
      });
      elems[0].focus();
      if (!isKey && this.toolbarSettings.items.length) {
        this.getToolElem().querySelector("[data-value=" + (isUp ? "moveUp" : "moveDown") + "]").focus();
      }
      this.updateToolBarState();
    };
    ListBox2.prototype.moveItemTo = function() {
      this.moveData(this, this.getScopedListBox());
    };
    ListBox2.prototype.moveItemFrom = function() {
      this.moveData(this.getScopedListBox(), this);
    };
    ListBox2.prototype.moveData = function(fListBox, tListBox, isKey, value, index) {
      var idx = [];
      var dataIdx = [];
      var jsonIdx = [];
      var sortIdx = [];
      var listData = [].slice.call(fListBox.listData);
      var tListData = [].slice.call(tListBox.listData);
      var sortData = [].slice.call(fListBox.sortedData);
      var tSortData = [].slice.call(tListBox.sortedData);
      var fliCollections = [].slice.call(fListBox.liCollections);
      var dataLiIdx = [];
      var tliCollections = [].slice.call(tListBox.liCollections);
      var tempItems = [];
      var data = [];
      var elems = fListBox.getSelectedItems();
      if (value) {
        elems = value;
      }
      var isRefresh = tListBox.sortOrder !== "None" || tListBox.selectionSettings.showCheckbox !== fListBox.selectionSettings.showCheckbox || tListBox.fields.groupBy || tListBox.itemTemplate || fListBox.itemTemplate;
      fListBox.value = [];
      if (elems.length) {
        this.removeSelected(fListBox, elems);
        var ulChildren_1 = Array.prototype.slice.call(fListBox.ulElement.children);
        var listItems_1 = Array.prototype.slice.call(fListBox.ulElement.querySelectorAll(".e-list-item"));
        var lData_1 = fListBox.listData;
        var sData_1 = fListBox.sortedData;
        var jData_1 = fListBox.jsonData;
        var eData_1;
        var listDataMap_1 = {};
        if (elems.length > 199) {
          for (var _i = 0, _a = fListBox.listData; _i < _a.length; _i++) {
            var item = _a[_i];
            if (!isNullOrUndefined(item)) {
              var key = fListBox.getFormattedValue(getValue(fListBox.fields.value ? fListBox.fields.value : "value", item));
              listDataMap_1[key] = item;
            }
          }
        }
        elems.forEach(function(ele) {
          if (elems.length < 200) {
            eData_1 = fListBox.getDataByElems([ele])[0];
          } else {
            var value_1 = ele.getAttribute("data-value");
            var formattedValue = fListBox.getFormattedValue(value_1);
            eData_1 = listDataMap_1[formattedValue];
          }
          idx.push(ulChildren_1.indexOf(ele));
          dataLiIdx.push(listItems_1.indexOf(ele));
          dataIdx.push(lData_1.indexOf(eData_1));
          sortIdx.push(sData_1.indexOf(eData_1));
          jsonIdx.push(jData_1.indexOf(eData_1));
        });
        if (this.sortOrder !== "None") {
          sortIdx.forEach(function(i2) {
            tempItems.push(fListBox.sortedData[i2]);
          });
        } else {
          jsonIdx.forEach(function(i2) {
            tempItems.push(fListBox.jsonData[i2]);
          });
        }
        var localDataArgs = {
          cancel: false,
          items: tempItems,
          eventName: this.toolbarAction
        };
        fListBox.trigger("actionBegin", localDataArgs);
        if (localDataArgs.cancel) {
          return;
        }
        var rLiCollection_1 = [];
        dataLiIdx.sort(function(n1, n2) {
          return n1 - n2;
        }).reverse().forEach(function(i2) {
          rLiCollection_1.push(fliCollections.splice(i2, 1)[0]);
        });
        fListBox.liCollections = fliCollections;
        if (index) {
          var toColl = tliCollections.splice(0, index);
          tListBox.liCollections = toColl.concat(rLiCollection_1.reverse()).concat(tliCollections);
        } else {
          tListBox.liCollections = tliCollections.concat(rLiCollection_1.reverse());
        }
        if (tListBox.listData.length === 0) {
          var noRecElem = tListBox.ulElement.childNodes[0];
          if (noRecElem) {
            tListBox.ulElement.removeChild(noRecElem);
          }
        }
        dataIdx.sort(function(n1, n2) {
          return n2 - n1;
        }).forEach(function(i2) {
          listData.splice(i2, 1)[0];
        });
        sortIdx.sort(function(n1, n2) {
          return n2 - n1;
        }).forEach(function(i2) {
          sortData.splice(i2, 1)[0];
        });
        jsonIdx.slice().reverse().forEach(function(i2) {
          data.push(fListBox.jsonData.splice(i2, 1)[0]);
        });
        if (isRefresh) {
          if (fListBox.fields.groupBy) {
            var sourceElem = fListBox.renderItems(listData, fListBox.fields);
            fListBox.updateListItems(sourceElem, fListBox.ulElement);
          } else {
            elems.forEach(function(ele) {
              detach(ele);
            });
          }
        } else {
          moveTo(fListBox.ulElement, tListBox.ulElement, idx, index);
          fListBox.trigger("actionComplete", {
            items: tempItems,
            eventName: this.toolbarAction
          });
        }
        if (tListBox.mainList.childElementCount !== tListBox.jsonData.length) {
          tListBox.mainList = tListBox.ulElement;
        }
        var tJsonData = [].slice.call(tListBox.jsonData);
        tSortData = [].slice.call(tListBox.sortedData);
        this.selectNextList(elems, dataLiIdx, dataIdx, fListBox);
        if (isKey) {
          this.list.focus();
        }
        fListBox.listData = listData;
        fListBox.sortedData = sortData;
        index = index ? index : tListData.length;
        for (var i = tempItems.length - 1; i >= 0; i--) {
          tListData.splice(index, 0, tempItems[i]);
          tJsonData.splice(index, 0, tempItems[i]);
          tSortData.splice(index, 0, tempItems[i]);
        }
        tListBox.listData = tListData;
        tListBox.jsonData = tJsonData;
        tListBox.sortedData = tSortData;
        if (isRefresh) {
          var sourceElem = tListBox.renderItems(tListData, tListBox.fields);
          tListBox.updateListItems(sourceElem, tListBox.ulElement);
          tListBox.setSelection();
          fListBox.trigger("actionComplete", {
            items: tempItems,
            eventName: this.toolbarAction
          });
        }
        fListBox.updateSelectedOptions();
        if (fListBox.listData.length === 0) {
          fListBox.l10nUpdate();
        }
      }
      if (fListBox.value.length === 1 && fListBox.getSelectedItems().length) {
        fListBox.value[0] = fListBox.getFormattedValue(fListBox.getSelectedItems()[0].getAttribute("data-value"));
      }
      if (fListBox.liCollections.length === fListBox.ulElement.querySelectorAll(".e-disabled").length && this.toolbarAction) {
        var wrap2 = this.list.parentElement.getElementsByClassName("e-listbox-tool")[0];
        var toolbarAction = this.toolbarAction === "moveFrom" ? "moveAllFrom" : "moveAllTo";
        if (wrap2) {
          var btn = wrap2.querySelector('[data-value="' + toolbarAction + '"]');
          btn.disabled = true;
        }
      }
    };
    ListBox2.prototype.selectNextList = function(elems, dataLiIdx, dataIdx, inst) {
      var childCnt = inst.ulElement.querySelectorAll(".e-list-item").length;
      var ele;
      var liIdx;
      var validIdx = -1;
      if (elems.length === 1 && childCnt && !inst.selectionSettings.showCheckbox) {
        liIdx = childCnt <= dataLiIdx[0] ? childCnt - 1 : dataLiIdx[0];
        ele = inst.ulElement.querySelectorAll(".e-list-item")[liIdx];
        validIdx = inst.getValidIndex(ele, liIdx, childCnt === dataIdx[0] ? 38 : 40);
        if (validIdx > -1) {
          inst.ulElement.querySelectorAll(".e-list-item")[validIdx].classList.add(cssClass.selected);
        }
      }
    };
    ListBox2.prototype.moveAllItemTo = function() {
      this.moveAllData(this, this.getScopedListBox());
    };
    ListBox2.prototype.moveAllItemFrom = function() {
      this.moveAllData(this.getScopedListBox(), this);
    };
    ListBox2.prototype.moveAllData = function(fListBox, tListBox, isKey, index) {
      var listData = [].slice.call(tListBox.listData);
      var jsonData = [].slice.call(tListBox.jsonData);
      var isRefresh = tListBox.sortOrder !== "None" || tListBox.selectionSettings.showCheckbox !== fListBox.selectionSettings.showCheckbox || tListBox.fields.groupBy || tListBox.itemTemplate || fListBox.itemTemplate;
      var tempLiColl = [];
      var tempData = [];
      var flistboxarray = [];
      this.removeSelected(fListBox, fListBox.getSelectedItems());
      var tempItems = [].slice.call(fListBox.listData);
      var localDataArgs = {
        cancel: false,
        items: tempItems,
        eventName: this.toolbarAction
      };
      fListBox.trigger("actionBegin", localDataArgs);
      if (localDataArgs.cancel) {
        return;
      }
      if (tListBox.listData.length === 0) {
        var noRecElem = tListBox.ulElement.childNodes[0];
        if (noRecElem) {
          tListBox.ulElement.removeChild(noRecElem);
        }
      }
      if (fListBox.listData.length > 0) {
        flistboxarray = Array.apply(null, {
          length: fListBox.ulElement.childElementCount
        }).map(Number.call, Number);
      }
      var childNodes = fListBox.ulElement.childNodes;
      var childElementCount = fListBox.ulElement.childElementCount;
      var newFlistboxArray = [];
      for (var i = 0; i < childElementCount; i++) {
        var childNode = childNodes[i];
        if (childNode.classList.contains("e-disabled")) {
          tempLiColl.push(childNode);
          if (this.sortOrder != null) {
            tempData.push(fListBox.sortedData[i]);
          } else {
            tempData.push(fListBox.listData[i]);
          }
        } else {
          newFlistboxArray.push(i);
        }
      }
      flistboxarray = newFlistboxArray;
      moveTo(fListBox.ulElement, tListBox.ulElement, flistboxarray, index);
      fListBox.trigger("actionComplete", {
        items: tempItems,
        eventName: this.toolbarAction
      });
      if (isKey) {
        this.list.focus();
      }
      index = index ? index : listData.length;
      for (var i = 0; i < flistboxarray.length; i++) {
        if (this.sortOrder != null) {
          listData.splice(index + i, 0, fListBox.sortedData[flistboxarray[i]]);
        } else {
          listData.splice(index + i, 0, fListBox.listData[flistboxarray[i]]);
        }
      }
      for (var i = 0; i < flistboxarray.length; i++) {
        jsonData.splice(index + i, 0, fListBox.jsonData[flistboxarray[i]]);
      }
      var fliCollections = [];
      if (tempLiColl.length > 0) {
        fListBox.liCollections = tempLiColl;
        fliCollections = [].slice.call(fListBox.liCollections);
      } else {
        fliCollections = [].slice.call(fListBox.liCollections);
        fListBox.liCollections = [];
      }
      var tliCollections = [].slice.call(tListBox.liCollections);
      if (index) {
        var toColl = tliCollections.splice(0, index);
        tListBox.liCollections = toColl.concat(fliCollections).concat(tliCollections);
      } else {
        tListBox.liCollections = tliCollections.concat(fliCollections);
      }
      fListBox.value = [];
      listData = listData.filter(function(data) {
        return data !== void 0;
      });
      listData = listData.filter(function(data) {
        return data.isHeader !== true;
      });
      var sortedData = listData.filter(function(val) {
        return tListBox.jsonData.indexOf(val) === -1;
      });
      for (var i = 0; i < sortedData.length; i++) {
        tListBox.jsonData.splice(index + i, 0, sortedData[i]);
      }
      tListBox.listData = listData;
      if (fListBox.listData.length === fListBox.jsonData.length) {
        fListBox.listData = fListBox.sortedData = fListBox.jsonData = tempData;
      } else if (fListBox.allowFiltering) {
        var disabledData_1 = [];
        if (tempLiColl.length > 0) {
          for (var i = 0; i < tempLiColl.length; i++) {
            disabledData_1.push(fListBox.getDataByValue(tempLiColl[i].getAttribute("data-value")));
          }
          fListBox.listData = fListBox.listData.filter(function(obj1) {
            return !disabledData_1.some(function(obj2) {
              return obj1 === obj2;
            });
          });
        }
        for (var i = 0; i < fListBox.listData.length; i++) {
          for (var j = 0; j < fListBox.jsonData.length; j++) {
            if (fListBox.listData[i] === fListBox.jsonData[j]) {
              fListBox.jsonData.splice(j, 1);
            }
          }
        }
        if (tempLiColl.length > 0) {
          fListBox.listData = disabledData_1;
          fListBox.sortedData = [];
        } else {
          fListBox.listData = fListBox.sortedData = [];
        }
      }
      if (isRefresh) {
        var sourceElem = tListBox.renderItems(listData, tListBox.fields);
        tListBox.updateListItems(sourceElem, tListBox.ulElement);
      } else {
        tListBox.sortedData = listData;
      }
      fListBox.updateSelectedOptions();
      if (tempLiColl.length > 0) {
        var wrap2 = this.list.parentElement.getElementsByClassName("e-listbox-tool")[0];
        var btn = wrap2.querySelector('[data-value="' + this.toolbarAction + '"]');
        btn.disabled = true;
      }
      if (fListBox.listData.length === 0 && tempLiColl.length === 0) {
        fListBox.l10nUpdate();
      }
    };
    ListBox2.prototype.changeData = function(fromIdx, toIdx, jsonToIdx, ele) {
      var listData = [].slice.call(this.listData);
      var jsonData = [].slice.call(this.jsonData);
      var sortData = [].slice.call(this.sortedData);
      var jsonIdx = Array.prototype.indexOf.call(this.jsonData, this.getDataByElems([ele])[0]);
      var sortIdx = Array.prototype.indexOf.call(this.sortedData, this.getDataByElems([ele])[0]);
      var liColl = [].slice.call(this.liCollections);
      listData.splice(toIdx, 0, listData.splice(fromIdx, 1)[0]);
      jsonData.splice(jsonToIdx, 0, jsonData.splice(jsonIdx, 1)[0]);
      sortData.splice(toIdx, 0, sortData.splice(sortIdx, 1)[0]);
      liColl.splice(toIdx, 0, liColl.splice(fromIdx, 1)[0]);
      this.listData = listData;
      this.jsonData = jsonData;
      this.liCollections = liColl;
      this.sortedData = sortData;
    };
    ListBox2.prototype.getSelectedItems = function() {
      var ele = [];
      if (this.selectionSettings.showCheckbox) {
        [].slice.call(this.ulElement.getElementsByClassName("e-check")).forEach(function(cbox) {
          ele.push(closest(cbox, ".e-list-item"));
        });
      } else {
        ele = [].slice.call(this.ulElement.getElementsByClassName(cssClass.selected));
      }
      return ele;
    };
    ListBox2.prototype.getScopedListBox = function() {
      var _this = this;
      var listObj;
      if (this.scope) {
        [].slice.call(document.querySelectorAll(this.scope)).forEach(function(ele) {
          if (getComponent(ele, _this.getModuleName())) {
            listObj = getComponent(ele, _this.getModuleName());
          }
        });
      }
      return listObj;
    };
    ListBox2.prototype.getGrabbedItems = function(args) {
      var grabbItems = false;
      for (var i = 0; i < this.value.length; i++) {
        if (this.value[i] === this.getFormattedValue(args.target.getAttribute("data-value"))) {
          grabbItems = true;
          break;
        }
      }
      if (grabbItems) {
        for (var i = 0; i < this.value.length; i++) {
          var liColl = this.list.querySelectorAll('[aria-selected="true"]');
          for (var j = 0; j < liColl.length; j++) {
            if (this.value[i] === this.getFormattedValue(liColl[j].getAttribute("data-value"))) {
              liColl[j].classList.add("e-grabbed");
            }
          }
        }
      }
      var elems;
      if (this.isAngular) {
        elems = Array.prototype.slice.call(this.element.getElementsByClassName("e-list-parent")[0].querySelectorAll(".e-grabbed"));
      } else {
        elems = Array.prototype.slice.call(this.element.nextElementSibling.querySelectorAll(".e-grabbed"));
      }
      return elems;
    };
    ListBox2.prototype.getDragArgs = function(args, isDragEnd) {
      var elems = this.getGrabbedItems(args);
      if (elems.length) {
        if (isDragEnd) {
          elems.push(args.target);
        }
      } else {
        elems = [args.target];
      }
      return {
        elements: elems,
        event: args.event,
        items: this.getDataByElems(elems)
      };
    };
    ListBox2.prototype.onKeyDown = function(e) {
      this.keyDownHandler(e);
      e.stopPropagation();
    };
    ListBox2.prototype.keyDownHandler = function(e) {
      if ([32, 35, 36, 37, 38, 39, 40, 65].indexOf(e.keyCode) > -1 && (!this.allowFiltering || this.allowFiltering && e.target !== this.filterInput)) {
        if (e.target && e.target.className.indexOf("e-edit-template") > -1) {
          return;
        }
        e.preventDefault();
        if (e.keyCode === 32 && this.ulElement.children.length) {
          this.selectHandler({
            target: this.ulElement.getElementsByClassName("e-focused")[0],
            ctrlKey: e.ctrlKey,
            shiftKey: e.shiftKey
          });
        } else if (e.keyCode === 65 && e.ctrlKey && this.selectionSettings.mode === "Multiple") {
          this.selectAll();
        } else if ((e.keyCode === 38 || e.keyCode === 40) && e.ctrlKey && e.shiftKey) {
          this.moveUpDown(e.keyCode === 38 ? true : false, true);
        } else if ((this.toolbarSettings.items.length || this.tBListBox) && (e.keyCode === 39 || e.keyCode === 37) && e.ctrlKey) {
          var listObj = this.tBListBox || this.getScopedListBox();
          if (e.keyCode === 39) {
            if (e.shiftKey) {
              this.moveAllData(this, listObj, true);
            } else {
              this.moveData(this, listObj, true);
            }
          } else {
            if (e.shiftKey) {
              this.moveAllData(listObj, this, true);
            } else {
              this.moveData(listObj, this, true);
            }
          }
        } else if (e.keyCode !== 37 && e.keyCode !== 39 && e.code !== "KeyA") {
          this.upDownKeyHandler(e);
        }
      } else if (this.allowFiltering) {
        if (e.keyCode === 40 || e.keyCode === 38) {
          this.upDownKeyHandler(e);
        }
      }
    };
    ListBox2.prototype.upDownKeyHandler = function(e) {
      var ul = this.ulElement;
      var defaultIdx = e.keyCode === 40 || e.keyCode === 36 ? 0 : ul.childElementCount - 1;
      var fliIdx = defaultIdx;
      var fli = ul.getElementsByClassName("e-focused")[0] || ul.getElementsByClassName(cssClass.selected)[0];
      if (fli) {
        if (e.keyCode !== 35 && e.keyCode !== 36) {
          fliIdx = Array.prototype.indexOf.call(ul.children, fli);
          if (e.keyCode === 40) {
            fliIdx++;
          } else {
            fliIdx--;
          }
          if (fliIdx < 0 || fliIdx > ul.childElementCount - 1) {
            return;
          }
        }
        removeClass([fli], "e-focused");
      }
      var cli = ul.children[fliIdx];
      if (cli) {
        fliIdx = this.getValidIndex(cli, fliIdx, e.keyCode);
        if (fliIdx === -1) {
          addClass([fli], "e-focused");
          return;
        }
        ul.children[fliIdx].focus();
        ul.children[fliIdx].classList.add("e-focused");
        if (!e.ctrlKey || !this.selectionSettings.showCheckbox && e.shiftKey && (e.keyCode === 36 || e.keyCode === 35)) {
          this.selectHandler({
            target: ul.children[fliIdx],
            ctrlKey: e.ctrlKey,
            shiftKey: e.shiftKey
          }, true);
        }
        if (this.selectionSettings.showCheckbox && e.ctrlKey && e.shiftKey && (e.keyCode === 36 || e.keyCode === 35)) {
          var selectedidx = Array.prototype.indexOf.call(ul.children, fli);
          var sidx = e.code === "Home" ? 0 : selectedidx;
          var eidx = e.code === "Home" ? selectedidx : ul.children.length - 1;
          for (var i = sidx; i <= eidx; i++) {
            var item = ul.children[i];
            this.notify("updatelist", {
              li: item,
              e: {
                target: this.ulElement.getElementsByClassName("e-focused")[0],
                ctrlKey: e.ctrlKey,
                shiftKey: e.shiftKey
              },
              module: "listbox"
            });
          }
        }
      }
    };
    ListBox2.prototype.KeyUp = function(e) {
      var _this = this;
      if (this.allowFiltering && e.ctrlKey && e.keyCode === 65) {
        e.preventDefault();
        return;
      }
      var char = String.fromCharCode(e.keyCode);
      var isWordCharacter = char.match(/\w/);
      var isWordAccentCharacter = char.match(/[A-Za-z0-9\u00C0-\u024F ]/);
      if (!isNullOrUndefined(isWordCharacter) || !isNullOrUndefined(isWordAccentCharacter)) {
        this.isValidKey = true;
      }
      this.isBackSpace = e.keyCode === 8;
      this.isValidKey = e.keyCode === 8 || e.keyCode === 46 || this.isValidKey;
      if (this.isValidKey) {
        this.isValidKey = false;
        switch (e.keyCode) {
          default:
            if (this.allowFiltering) {
              var eventArgsData_1 = {
                preventDefaultAction: false,
                text: this.targetElement(),
                updateData: function(dataSource, query, fields) {
                  if (eventArgsData_1.cancel) {
                    return;
                  }
                  _this.isFiltered = true;
                  _this.remoteFilterAction = true;
                  _this.preventDefActionFilter = eventArgsData_1.preventDefaultAction;
                  _this.dataUpdater(dataSource, query, fields);
                  _this.preventDefActionFilter = false;
                },
                event: e,
                cancel: false
              };
              this.trigger("filtering", eventArgsData_1, function(args) {
                _this.isDataFetched = false;
                if (args.cancel || _this.filterInput.value !== "" && _this.isFiltered) {
                  return;
                }
                _this.preventDefActionFilter = false;
                if (!args.cancel && !_this.isCustomFiltering && !args.preventDefaultAction) {
                  _this.inputString = _this.filterInput.value;
                  _this.filteringAction(_this.jsonData, new Query(), _this.fields);
                  if (_this.toolbarSettings.items.length > 0) {
                    _this.updateToolBarState();
                  }
                }
                if (!_this.isFiltered && !_this.isCustomFiltering && !args.preventDefaultAction) {
                  _this.dataUpdater(_this.jsonData, new Query(), _this.fields);
                }
              });
            }
        }
      }
    };
    ListBox2.prototype.filter = function(dataSource, query, fields) {
      this.isCustomFiltering = true;
      this.filteringAction(dataSource, query, fields);
    };
    ListBox2.prototype.filteringAction = function(dataSource, query, fields) {
      this.resetList(dataSource, fields, query);
    };
    ListBox2.prototype.targetElement = function() {
      this.targetInputElement = this.list.getElementsByClassName("e-input-filter")[0];
      return isNullOrUndefined(this.targetInputElement) ? null : this.targetInputElement.value;
    };
    ListBox2.prototype.dataUpdater = function(dataSource, query, fields) {
      this.isDataFetched = false;
      var backCommand = true;
      if (this.targetElement() && this.targetElement().trim() === "") {
        var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
        if (backCommand) {
          this.remoteCustomValue = false;
          if (this.isAngular && this.itemTemplate) {
            list = this.renderItems(this.listData, fields);
          }
          this.onActionComplete(list, this.jsonData);
          this.notify("reOrder", {
            module: "CheckBoxSelection",
            enable: this.selectionSettings.showCheckbox,
            e: this
          });
        }
      } else {
        this.resetList(dataSource, fields, query);
      }
    };
    ListBox2.prototype.focusOutHandler = function() {
      var ele = this.list.getElementsByClassName("e-focused")[0];
      if (ele) {
        ele.classList.remove("e-focused");
      }
      if (this.allowFiltering) {
        this.refreshClearIcon();
      }
    };
    ListBox2.prototype.resizeHandler = function() {
      if (this.list && !(this.cssClass && this.cssClass.indexOf("e-horizontal-listbox") > -1)) {
        if (this.list.getElementsByClassName("e-filter-parent").length > 0 && this.allowFiltering) {
          this.ulElement.style.setProperty("height", "calc(100% - " + this.filterParent.offsetHeight + "px)", "important");
        }
      }
    };
    ListBox2.prototype.getValidIndex = function(cli, index, keyCode) {
      var cul = this.ulElement;
      if (cli.classList.contains("e-disabled") || cli.classList.contains(cssClass.group)) {
        if (keyCode === 40 || keyCode === 36) {
          index++;
        } else {
          index--;
        }
      }
      if (index < 0 || index === cul.childElementCount) {
        return -1;
      }
      cli = cul.childNodes[index];
      if (cli.classList.contains("e-disabled") || cli.classList.contains(cssClass.group)) {
        index = this.getValidIndex(cli, index, keyCode);
      }
      return index;
    };
    ListBox2.prototype.updateSelectedOptions = function() {
      var _this = this;
      var selectedOptions = [];
      var values = [];
      extend(values, this.value);
      this.getSelectedItems().forEach(function(ele) {
        if (!ele.classList.contains("e-grabbed")) {
          selectedOptions.push(_this.getFormattedValue(ele.getAttribute("data-value")));
        }
      });
      if (this.mainList.childElementCount === this.ulElement.childElementCount) {
        if (this.allowFiltering && this.selectionSettings.showCheckbox) {
          for (var i = 0; i < selectedOptions.length; i++) {
            if (values.indexOf(selectedOptions[i]) > -1) {
              continue;
            } else {
              values.push(selectedOptions[i]);
            }
          }
          this.setProperties({
            value: values
          }, true);
        } else {
          this.setProperties({
            value: selectedOptions
          }, true);
        }
      }
      this.updateSelectTag();
      this.updateToolBarState();
      if (this.tBListBox) {
        this.tBListBox.updateToolBarState();
      }
    };
    ListBox2.prototype.clearSelection = function(values) {
      var _this = this;
      if (values === void 0) {
        values = this.value;
      }
      if (this.selectionSettings.showCheckbox) {
        var dvalue_1;
        this.getSelectedItems().forEach(function(li) {
          dvalue_1 = _this.getFormattedValue(li.getAttribute("data-value"));
          if (values.indexOf(dvalue_1) < 0) {
            li.getElementsByClassName("e-check")[0].classList.remove("e-check");
            li.removeAttribute("aria-selected");
          }
        });
      }
    };
    ListBox2.prototype.setSelection = function(values, isSelect, isText, canFocus) {
      var _this = this;
      if (values === void 0) {
        values = this.value;
      }
      if (isSelect === void 0) {
        isSelect = true;
      }
      if (isText === void 0) {
        isText = false;
      }
      if (canFocus === void 0) {
        canFocus = true;
      }
      var li;
      var liselect;
      if (values) {
        values.forEach(function(value) {
          var text;
          if (isText) {
            text = _this.getValueByText(value);
          } else {
            text = value;
          }
          if (typeof text === "string") {
            if (text.indexOf("\n") !== -1) {
              var txt = CSS.escape(text);
              li = _this.list.querySelector('[data-value="' + txt + '"]');
            } else {
              text = text.split("\\").join("\\\\");
              li = _this.list.querySelector('[data-value="' + text.replace(/"/g, '\\"') + '"]');
            }
          } else {
            li = _this.list.querySelector('[data-value="' + text + '"]');
          }
          if (li) {
            if (_this.selectionSettings.showCheckbox && !li.classList.contains("e-disabled")) {
              liselect = li.getElementsByClassName("e-frame")[0].classList.contains("e-check");
            } else {
              liselect = li.classList.contains("e-selected");
            }
            if (!isSelect && liselect || isSelect && !liselect && li) {
              if (_this.selectionSettings.showCheckbox && !li.classList.contains("e-disabled")) {
                _this.notify("updatelist", {
                  li,
                  module: "listbox"
                });
                if (canFocus) {
                  li.focus();
                }
              } else {
                if (isSelect && !li.classList.contains("e-disabled")) {
                  li.classList.add(cssClass.selected);
                  li.setAttribute("aria-selected", "true");
                  if (canFocus) {
                    li.focus();
                  }
                } else {
                  li.classList.remove(cssClass.selected);
                  li.removeAttribute("aria-selected");
                }
              }
            }
          }
        });
      }
      this.updateSelectTag();
    };
    ListBox2.prototype.updateSelectTag = function() {
      var ele = this.getSelectTag();
      var innerHTML = "";
      if (isNullOrUndefined(ele)) {
        return;
      }
      ele.innerHTML = "";
      if (this.value) {
        for (var i = 0, len = this.value.length; i < len; i++) {
          innerHTML += "<option selected>" + this.value[i] + "</option>";
        }
        ele.innerHTML += innerHTML;
        for (var i = 0, len = ele.childNodes.length; i < len; i++) {
          ele.childNodes[i].setAttribute("value", this.value[i].toString());
        }
      }
      this.checkSelectAll();
    };
    ListBox2.prototype.checkDisabledState = function(inst) {
      if (isNullOrUndefined(inst.ulElement)) {
        if (!isNullOrUndefined(this.dataSource) && isNullOrUndefined(this.dataSource.length)) {
          return false;
        } else {
          return true;
        }
      } else {
        if (inst.ulElement.querySelectorAll(".e-disabled").length > 0) {
          return inst.liCollections.length === inst.ulElement.querySelectorAll(".e-disabled").length;
        }
        return inst.ulElement.querySelectorAll("." + cssClass.li).length === 0;
      }
    };
    ListBox2.prototype.updateToolBarState = function() {
      var _this = this;
      if (this.toolbarSettings.items.length) {
        var listObj_1 = this.getScopedListBox();
        var wrap_1 = this.list.parentElement.getElementsByClassName("e-listbox-tool")[0];
        this.toolbarSettings.items.forEach(function(value) {
          var btn = wrap_1.querySelector('[data-value="' + value + '"]');
          switch (value) {
            case "moveAllTo":
              btn.disabled = _this.checkDisabledState(_this);
              break;
            case "moveAllFrom":
              btn.disabled = _this.checkDisabledState(listObj_1);
              break;
            case "moveFrom":
              btn.disabled = listObj_1.value && listObj_1.value.length ? false : true;
              break;
            case "moveUp":
              btn.disabled = _this.value && _this.value.length && !_this.isSelected(_this.ulElement.children[0]) ? false : true;
              break;
            case "moveDown":
              btn.disabled = _this.value && _this.value.length && !_this.isSelected(_this.ulElement.children[_this.ulElement.childElementCount - 1]) ? false : true;
              break;
            default:
              btn.disabled = _this.value && _this.value.length ? false : true;
              break;
          }
        });
      }
    };
    ListBox2.prototype.setCheckboxPosition = function() {
      var listWrap = this.list;
      if (!this.initLoad && this.selectionSettings.checkboxPosition === "Left") {
        listWrap.classList.remove("e-right");
      }
      if (this.selectionSettings.checkboxPosition === "Right") {
        listWrap.classList.add("e-right");
      }
    };
    ListBox2.prototype.showCheckbox = function(showCheckbox) {
      var index = 0;
      var liColl = this.list.lastElementChild.querySelectorAll("li");
      var liCollLen = this.list.lastElementChild.getElementsByClassName("e-list-item").length;
      if (showCheckbox) {
        this.ulElement = this.renderItems(this.listData, this.fields);
        this.mainList = this.ulElement;
        this.list.removeChild(this.list.getElementsByTagName("ul")[0]);
        this.list.appendChild(this.ulElement);
        if (this.selectionSettings.showSelectAll && !this.list.getElementsByClassName("e-selectall-parent")[0]) {
          var l10nShow = new L10n(this.getModuleName(), {
            selectAllText: "Select All",
            unSelectAllText: "Unselect All"
          }, this.locale);
          this.showSelectAll = true;
          this.selectAllText = l10nShow.getConstant("selectAllText");
          this.unSelectAllText = l10nShow.getConstant("unSelectAllText");
          this.popupWrapper = this.list;
          this.checkBoxSelectionModule.checkAllParent = null;
          this.notify("selectAll", {});
          this.checkSelectAll();
        }
      } else {
        if (this.list.getElementsByClassName("e-selectall-parent")[0]) {
          this.list.removeChild(this.list.getElementsByClassName("e-selectall-parent")[0]);
        }
        for (index; index < liCollLen; index++) {
          if (liColl[index].classList.contains("e-list-item")) {
            liColl[index].removeChild(liColl[index].getElementsByClassName("e-checkbox-wrapper")[0]);
          }
          if (liColl[index].hasAttribute("aria-selected")) {
            liColl[index].removeAttribute("aria-selected");
          }
        }
        this.mainList = this.ulElement;
      }
      this.value = [];
    };
    ListBox2.prototype.isSelected = function(ele) {
      if (!isNullOrUndefined(ele)) {
        return ele.classList.contains(cssClass.selected) || ele.querySelector(".e-check") !== null;
      } else {
        return false;
      }
    };
    ListBox2.prototype.getSelectTag = function() {
      return this.list.getElementsByClassName("e-hidden-select")[0];
    };
    ListBox2.prototype.getToolElem = function() {
      return this.list.parentElement.getElementsByClassName("e-listbox-tool")[0];
    };
    ListBox2.prototype.formResetHandler = function() {
      this.value = this.initialSelectedOptions;
    };
    ListBox2.prototype.getModuleName = function() {
      return "listbox";
    };
    ListBox2.prototype.getPersistData = function() {
      return this.addOnPersist(["value"]);
    };
    ListBox2.prototype.getLocaleName = function() {
      return "listbox";
    };
    ListBox2.prototype.destroy = function() {
      this.unwireEvents();
      if (this.element.tagName === "EJS-LISTBOX") {
        this.element.innerHTML = "";
      } else {
        this.element.style.display = "inline-block";
        if (this.toolbarSettings.items.length) {
          this.list.parentElement.parentElement.insertBefore(this.list, this.list.parentElement);
          detach(this.list.nextElementSibling);
        }
        this.list.parentElement.insertBefore(this.element, this.list);
      }
      _super.prototype.destroy.call(this);
      this.enableRtlElements = [];
      this.liCollections = null;
      this.list = null;
      this.ulElement = null;
      this.mainList = null;
      this.spinner = null;
      this.rippleFun = null;
      if (this.itemTemplate) {
        this.clearTemplate();
      }
    };
    ListBox2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var wrap2 = this.toolbarSettings.items.length ? this.list.parentElement : this.list;
      _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
      this.setUpdateInitial(["fields", "query", "dataSource"], newProp);
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([wrap2], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([wrap2], newProp.cssClass.replace(/\s+/g, " ").trim().split(" "));
            }
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              this.list.classList.add("e-rtl");
            } else {
              this.list.classList.remove("e-rtl");
            }
            break;
          case "value":
            removeClass(this.list.querySelectorAll("." + cssClass.selected), cssClass.selected);
            this.clearSelection(this.value);
            this.setSelection();
            break;
          case "height":
            this.setHeight();
            break;
          case "enabled":
            this.setEnable();
            break;
          case "allowDragAndDrop":
            if (newProp.allowDragAndDrop) {
              this.initDraggable();
            } else {
              if (this.ulElement.classList.contains("e-sortable")) {
                getComponent(this.ulElement, "sortable").destroy();
              }
            }
            break;
          case "allowFiltering":
            if (this.allowFiltering) {
              this.setFiltering();
            } else {
              this.list.removeChild(this.list.getElementsByClassName("e-filter-parent")[0]);
              this.filterParent = null;
              removeClass([this.list], "e-filter-list");
            }
            break;
          case "filterBarPlaceholder":
            if (this.allowFiltering) {
              if (this.filterInput) {
                Input.setPlaceholder(newProp.filterBarPlaceholder, this.filterInput);
              }
            }
            break;
          case "scope":
            if (this.allowDragAndDrop) {
              getComponent(this.ulElement, "sortable").scope = newProp.scope;
            }
            if (this.toolbarSettings.items.length) {
              if (oldProp.scope) {
                getComponent(document.querySelector(oldProp.scope), this.getModuleName()).tBListBox = null;
              }
              if (newProp.scope) {
                getComponent(document.querySelector(newProp.scope), this.getModuleName()).tBListBox = this;
              }
            }
            break;
          case "toolbarSettings": {
            var ele = void 0;
            var pos = newProp.toolbarSettings.position;
            var toolElem = this.getToolElem();
            if (pos) {
              removeClass([wrap2], ["e-right", "e-left"]);
              wrap2.classList.add("e-" + pos.toLowerCase());
              if (pos === "Left") {
                wrap2.insertBefore(toolElem, this.list);
              } else {
                wrap2.appendChild(toolElem);
              }
            }
            if (newProp.toolbarSettings.items) {
              oldProp.toolbarSettings.items = isNullOrUndefined(oldProp.toolbarSettings.items) ? [] : oldProp.toolbarSettings.items;
              if (oldProp.toolbarSettings && oldProp.toolbarSettings.items.length) {
                ele = this.list.parentElement;
                ele.parentElement.insertBefore(this.list, ele);
                detach(ele);
              }
              this.initToolbarAndStyles();
              this.wireToolbarEvent();
            }
            break;
          }
          case "selectionSettings": {
            var showSelectAll = newProp.selectionSettings.showSelectAll;
            var showCheckbox = newProp.selectionSettings.showCheckbox;
            if (!isNullOrUndefined(showSelectAll)) {
              this.showSelectAll = showSelectAll;
              if (this.showSelectAll) {
                var l10nSel = new L10n(this.getModuleName(), {
                  selectAllText: "Select All",
                  unSelectAllText: "Unselect All"
                }, this.locale);
                this.checkBoxSelectionModule.checkAllParent = null;
                this.showSelectAll = true;
                this.selectAllText = l10nSel.getConstant("selectAllText");
                this.unSelectAllText = l10nSel.getConstant("selectAllText");
                this.popupWrapper = this.list;
              }
              this.notify("selectAll", {});
              this.checkSelectAll();
            }
            if (!isNullOrUndefined(showCheckbox)) {
              this.showCheckbox(showCheckbox);
            }
            if (this.selectionSettings.showCheckbox) {
              this.setCheckboxPosition();
            }
            break;
          }
          case "dataSource":
            this.isDataSourceUpdate = true;
            this.jsonData = [].slice.call(this.dataSource);
            break;
        }
      }
    };
    var ListBox_1;
    __decorate15([Property("")], ListBox2.prototype, "cssClass", void 0);
    __decorate15([Property([])], ListBox2.prototype, "value", void 0);
    __decorate15([Property("")], ListBox2.prototype, "height", void 0);
    __decorate15([Property(true)], ListBox2.prototype, "enabled", void 0);
    __decorate15([Property(false)], ListBox2.prototype, "enablePersistence", void 0);
    __decorate15([Property(false)], ListBox2.prototype, "allowDragAndDrop", void 0);
    __decorate15([Property(1e3)], ListBox2.prototype, "maximumSelectionLength", void 0);
    __decorate15([Property(false)], ListBox2.prototype, "allowFiltering", void 0);
    __decorate15([Property("")], ListBox2.prototype, "scope", void 0);
    __decorate15([Property(true)], ListBox2.prototype, "ignoreCase", void 0);
    __decorate15([Property(null)], ListBox2.prototype, "filterBarPlaceholder", void 0);
    __decorate15([Property("None")], ListBox2.prototype, "sortOrder", void 0);
    __decorate15([Event2()], ListBox2.prototype, "beforeItemRender", void 0);
    __decorate15([Event2()], ListBox2.prototype, "filtering", void 0);
    __decorate15([Event2()], ListBox2.prototype, "select", void 0);
    __decorate15([Event2()], ListBox2.prototype, "change", void 0);
    __decorate15([Event2()], ListBox2.prototype, "beforeDrop", void 0);
    __decorate15([Event2()], ListBox2.prototype, "dragStart", void 0);
    __decorate15([Event2()], ListBox2.prototype, "drag", void 0);
    __decorate15([Event2()], ListBox2.prototype, "drop", void 0);
    __decorate15([Event2()], ListBox2.prototype, "dataBound", void 0);
    __decorate15([Property(null)], ListBox2.prototype, "groupTemplate", void 0);
    __decorate15([Property("Request failed")], ListBox2.prototype, "actionFailureTemplate", void 0);
    __decorate15([Property(1e3)], ListBox2.prototype, "zIndex", void 0);
    __decorate15([Property(false)], ListBox2.prototype, "ignoreAccent", void 0);
    __decorate15([Complex({}, ToolbarSettings)], ListBox2.prototype, "toolbarSettings", void 0);
    __decorate15([Complex({}, SelectionSettings2)], ListBox2.prototype, "selectionSettings", void 0);
    ListBox2 = ListBox_1 = __decorate15([NotifyPropertyChanges], ListBox2);
    return ListBox2;
  }(DropDownBase)
);
var listBoxClasses = {
  backIcon: "e-input-group-icon e-back-icon e-icons",
  filterBarClearIcon: "e-input-group-icon e-clear-icon e-icons",
  filterInput: "e-input-filter",
  filterParent: "e-filter-parent",
  clearIcon: "e-clear-icon"
};

// node_modules/@syncfusion/ej2-dropdowns/src/mention/mention.js
var __extends29 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate16 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Mention = (
  /** @class */
  function(_super) {
    __extends29(Mention2, _super);
    function Mention2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.debounceTimer = null;
      return _this;
    }
    Mention2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "minLength":
            this.minLength = newProp.minLength;
            break;
          case "suffixText":
            this.suffixText = newProp.suffixText;
            break;
          case "allowSpaces":
            this.allowSpaces = newProp.allowSpaces;
            break;
          case "mentionChar":
            this.mentionChar = newProp.mentionChar;
            break;
          case "showMentionChar":
            this.showMentionChar = newProp.showMentionChar;
            break;
          case "requireLeadingSpace":
            this.requireLeadingSpace = newProp.requireLeadingSpace;
            break;
          case "cssClass":
            this.updateCssClass(newProp.cssClass, oldProp.cssClass);
            break;
        }
      }
    };
    Mention2.prototype.updateCssClass = function(newClass, oldClass) {
      if (!isNullOrUndefined(oldClass)) {
        oldClass = oldClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(newClass)) {
        newClass = newClass.replace(/\s+/g, " ").trim();
      }
      this.setCssClass(newClass, [this.inputElement], oldClass);
      if (this.popupObj) {
        this.setCssClass(newClass, [this.popupObj.element], oldClass);
      }
    };
    Mention2.prototype.setCssClass = function(cssClass2, elements, oldClass) {
      if (!isNullOrUndefined(oldClass) && oldClass !== "") {
        removeClass(elements, oldClass.split(" "));
      }
      if (!isNullOrUndefined(cssClass2) && cssClass2 !== "") {
        addClass(elements, cssClass2.split(" "));
      }
    };
    Mention2.prototype.initializeData = function() {
      this.isSelected = false;
      this.isFiltered = false;
      this.beforePopupOpen = false;
      this.initRemoteRender = false;
      this.isListResetted = false;
      this.isPopupOpen = false;
      this.isCollided = false;
      this.lineBreak = false;
      this.isRTE = false;
      this.keyEventName = "mousedown";
    };
    Mention2.prototype.preRender = function() {
      this.initializeData();
      _super.prototype.preRender.call(this);
    };
    Mention2.prototype.render = function() {
      var isSelector = typeof this.target === "string";
      this.inputElement = !isNullOrUndefined(this.target) ? this.checkAndUpdateInternalComponent(isSelector ? document.querySelector(this.target) : this.target) : this.element;
      if (this.isContentEditable(this.inputElement)) {
        if (!this.inputElement.hasAttribute("contenteditable")) {
          this.inputElement.setAttribute("contenteditable", "true");
        }
        addClass([this.inputElement], ["e-mention"]);
        if (isNullOrUndefined(this.target)) {
          addClass([this.inputElement], ["e-editable-element"]);
        }
      }
      this.inputElement.setAttribute("role", "textbox");
      this.inputElement.setAttribute("aria-label", "mention");
      this.queryString = this.elementValue();
      this.wireEvent();
    };
    Mention2.prototype.wireEvent = function() {
      EventHandler.add(this.inputElement, "keyup", this.onKeyUp, this);
      this.bindCommonEvent();
    };
    Mention2.prototype.unWireEvent = function() {
      EventHandler.remove(this.inputElement, "keyup", this.onKeyUp);
      this.unBindCommonEvent();
    };
    Mention2.prototype.bindCommonEvent = function() {
      if (!Browser.isDevice) {
        this.inputElement.addEventListener("keydown", this.keyDownHandler.bind(this), !this.isRTE);
      }
    };
    Mention2.prototype.hideSpinner = function() {
      this.hideWaitingSpinner();
    };
    Mention2.prototype.hideWaitingSpinner = function() {
      if (!isNullOrUndefined(this.spinnerElement)) {
        hideSpinner(this.spinnerElement);
      }
      if (!isNullOrUndefined(this.spinnerTemplate) && !isNullOrUndefined(this.spinnerTemplateElement)) {
        detach(this.spinnerTemplateElement);
      }
    };
    Mention2.prototype.checkAndUpdateInternalComponent = function(targetElement) {
      if (!this.isVue && targetElement.classList.contains("e-richtexteditor")) {
        return targetElement.querySelector(".e-content");
      }
      if (this.isVue && targetElement.nodeName === "TEXTAREA" && targetElement.classList.contains("e-rte-hidden")) {
        var parentElement = targetElement.parentElement;
        if (parentElement && parentElement.classList.contains("e-richtexteditor")) {
          return parentElement.querySelector(".e-content");
        }
      }
      if (targetElement && targetElement.parentElement && targetElement.parentElement.classList.contains("e-rte-content")) {
        this.isRTE = true;
        this.keyEventName = "click";
      }
      return targetElement;
    };
    Mention2.prototype.showWaitingSpinner = function() {
      if (!isNullOrUndefined(this.popupObj)) {
        if (isNullOrUndefined(this.spinnerTemplate) && isNullOrUndefined(this.spinnerElement)) {
          this.spinnerElement = this.popupObj.element;
          createSpinner({
            target: this.spinnerElement,
            width: Browser.isDevice ? "16px" : "14px"
          }, this.createElement);
          showSpinner(this.spinnerElement);
        }
        if (!isNullOrUndefined(this.spinnerTemplate)) {
          this.setSpinnerTemplate();
        }
      }
    };
    Mention2.prototype.keyDownHandler = function(e) {
      var isKeyAction = true;
      switch (e.keyCode) {
        case 38:
          e.action = e.altKey ? "hide" : "up";
          break;
        case 40:
          e.action = e.altKey ? "open" : "down";
          break;
        case 33:
          e.action = "pageUp";
          break;
        case 34:
          e.action = "pageDown";
          break;
        case 36:
          e.action = "home";
          break;
        case 35:
          e.action = "end";
          break;
        case 9:
          e.action = e.shiftKey ? "close" : "tab";
          break;
        case 27:
          e.action = "escape";
          break;
        case 32:
          e.action = "space";
          break;
        case 13:
          e.action = "enter";
          break;
        default:
          isKeyAction = false;
          break;
      }
      if (isKeyAction) {
        this.keyActionHandler(e);
      }
    };
    Mention2.prototype.keyActionHandler = function(e) {
      var isNavigation = e.action === "down" || e.action === "up" || e.action === "pageUp" || e.action === "pageDown" || e.action === "home" || e.action === "end";
      var isTabAction = e.action === "tab" || e.action === "close";
      if (this.list === void 0 && !this.isRequested && !isTabAction && e.action !== "escape" && e.action !== "space" && this.mentionChar.charCodeAt(0) === this.getLastLetter(this.getTextRange()).charCodeAt(0)) {
        this.renderList();
      }
      if (isNullOrUndefined(this.list) || !isNullOrUndefined(this.liCollections) && isNavigation && this.liCollections.length === 0 || this.isRequested) {
        return;
      }
      if (e.action === "escape") {
        e.preventDefault();
      }
      this.isSelected = e.action === "escape" ? false : this.isSelected;
      switch (e.action) {
        case "down":
        case "up":
          this.isUpDownKey = true;
          this.updateUpDownAction(e);
          break;
        case "tab":
          if (this.isPopupOpen) {
            e.preventDefault();
            var li = this.list.querySelector("." + dropDownBaseClasses.selected);
            if (li) {
              this.isSelected = true;
              this.setSelection(li, e);
            }
            if (this.isPopupOpen) {
              this.hidePopup(e);
            }
          }
          break;
        case "enter":
          if (this.isPopupOpen) {
            e.preventDefault();
            if (this.popupObj && this.popupObj.element.contains(this.selectedLI)) {
              this.updateSelectedItem(this.selectedLI, e, false, true);
            }
          }
          break;
        case "escape":
          if (this.isPopupOpen) {
            this.hidePopup(e);
          }
          break;
      }
    };
    Mention2.prototype.updateUpDownAction = function(e) {
      if (this.fields.disabled && this.list && this.list.querySelectorAll(".e-list-item:not(.e-disabled)").length === 0) {
        return;
      }
      var focusEle = this.list.querySelector("." + dropDownBaseClasses.focus);
      if (this.isSelectFocusItem(focusEle)) {
        this.setSelection(focusEle, e);
      } else if (!isNullOrUndefined(this.liCollections)) {
        var li = this.list.querySelector("." + dropDownBaseClasses.selected);
        if (!isNullOrUndefined(li)) {
          var value = this.getFormattedValue(li.getAttribute("data-value"));
          this.activeIndex = this.getIndexByValue(value);
        }
        var index = e.action === "down" ? this.activeIndex + 1 : this.activeIndex - 1;
        var startIndex = 0;
        startIndex = e.action === "down" && isNullOrUndefined(this.activeIndex) ? 0 : this.liCollections.length - 1;
        index = index < 0 ? this.liCollections.length - 1 : index === this.liCollections.length ? 0 : index;
        var nextItem = isNullOrUndefined(this.activeIndex) ? this.liCollections[startIndex] : this.liCollections[index];
        if (!isNullOrUndefined(nextItem)) {
          this.setSelection(nextItem, e);
        }
      }
      var itemIndex;
      for (var index = 0; index < this.liCollections.length; index++) {
        if (this.liCollections[index].classList.contains(dropDownBaseClasses.focus) || this.liCollections[index].classList.contains(dropDownBaseClasses.selected)) {
          itemIndex = index;
          break;
        }
      }
      if (itemIndex != null && this.isDisabledElement(this.liCollections[itemIndex])) {
        this.updateUpDownAction(e);
      }
      if (this.isPopupOpen) {
        e.preventDefault();
      }
    };
    Mention2.prototype.isSelectFocusItem = function(element) {
      return !isNullOrUndefined(element);
    };
    Mention2.prototype.unBindCommonEvent = function() {
      if (!Browser.isDevice) {
        this.inputElement.removeEventListener("keydown", this.keyDownHandler.bind(this), !this.isRTE);
      }
    };
    Mention2.prototype.onKeyUp = function(e) {
      var rangetextContent;
      if (this.isUpDownKey && this.isPopupOpen && e.keyCode === 229) {
        this.isUpDownKey = false;
        return;
      }
      this.isTyped = e.code !== "Enter" && e.code !== "Space" && e.code !== "ArrowDown" && e.code !== "ArrowUp" ? true : false;
      var isRteImage = document.activeElement.parentElement && document.activeElement.parentElement.querySelector(".e-rte-image") ? true : false;
      if (document.activeElement !== this.inputElement && !isRteImage) {
        this.inputElement.focus();
      }
      if (this.isContentEditable(this.inputElement)) {
        this.range = this.getCurrentRange();
        rangetextContent = this.range.startContainer.textContent.split("");
      }
      var currentRange = this.getTextRange();
      var mentionRegex = new RegExp(this.mentionChar.replace(/[.*+?^${}()|[\]\\]/g, "\\$&") + "\\s");
      var isValid = currentRange && mentionRegex.test(currentRange) ? false : true;
      var lastWordRange = this.getLastLetter(currentRange);
      var previousChar = currentRange ? currentRange.charAt(Math.max(0, currentRange.indexOf(this.mentionChar) - 1)) : "";
      if (isValid && this.allowSpaces && currentRange && currentRange.includes(this.mentionChar) && currentRange.split(this.mentionChar).pop() !== "" && (!this.requireLeadingSpace || this.requireLeadingSpace && (previousChar === " " || currentRange.indexOf(this.mentionChar) === 0))) {
        lastWordRange = this.mentionChar + currentRange.split(this.mentionChar).pop();
      }
      if (!this.requireLeadingSpace && lastWordRange && lastWordRange.includes(this.mentionChar)) {
        lastWordRange = this.mentionChar + lastWordRange.split(this.mentionChar).pop();
      }
      var lastTwoLetters = this.mentionChar.toString() + this.mentionChar.toString();
      var Regex = new RegExp(this.mentionChar.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&"), "g");
      var charRegex = new RegExp("[a-zA-Z]", "g");
      if (e.key === "Shift" || e.keyCode === 37 || e.keyCode === 39) {
        return;
      }
      if (this.beforePopupOpen && this.isPopupOpen && lastWordRange === lastTwoLetters) {
        this.hidePopup();
        return;
      }
      if (!currentRange || !lastWordRange || !lastWordRange.includes(this.mentionChar) && !this.requireLeadingSpace || e.code === "Enter" || e.keyCode === 27 || lastWordRange.match(Regex) && lastWordRange.match(Regex).length > 1 || this.isContentEditable(this.inputElement) && this.range.startContainer && this.range.startContainer.previousElementSibling && this.range.startContainer.previousElementSibling.tagName !== "BR" && this.range.startContainer.textContent.split("").length > 0 && (rangetextContent.length === 1 || rangetextContent[rangetextContent.length - 2].indexOf("") === -1 || this.range.startContainer.nodeType === 1)) {
        if (isValid && this.isPopupOpen && this.allowSpaces && currentRange && currentRange.trim() !== "" && charRegex.test(currentRange) && currentRange.indexOf(this.mentionChar) !== -1 && !this.isMatchedText() && currentRange.length > 1 && currentRange.replace(/\u00A0/g, " ").charAt(currentRange.length - 2) !== " " && this.list && this.list.querySelectorAll("ul").length > 0 && e.code !== "Enter") {
          this.queryString = currentRange.substring(currentRange.lastIndexOf(this.mentionChar) + 1).replace(" ", " ");
          this.searchLists(e);
        } else if (!this.requireLeadingSpace || this.isPopupOpen && (!this.allowSpaces || !lastWordRange) && e.code !== "ArrowDown" && e.code !== "ArrowUp") {
          this.hidePopup();
          this.lineBreak = true;
        } else if ((e.key === "Backspace" || e.key === "Delete") && this.range && this.range.startOffset !== this.range.endOffset) {
          this.range.deleteContents();
        }
        return;
      }
      if (lastWordRange.includes(this.mentionChar)) {
        this.queryString = !this.requireLeadingSpace ? lastWordRange.substring(lastWordRange.lastIndexOf(this.mentionChar) + 1).trim() : lastWordRange.replace(this.mentionChar, "");
      }
      if (this.mentionChar.charCodeAt(0) === lastWordRange.charCodeAt(0) && this.queryString !== "" && e.keyCode !== 38 && e.keyCode !== 40 && !this.lineBreak) {
        this.searchLists(e);
        if (!this.isPopupOpen && this.queryString.length >= this.minLength) {
          if (!this.isContentEditable(this.inputElement)) {
            this.showPopup();
          } else if (this.isContentEditable(this.inputElement) && this.range && this.range.startContainer !== this.inputElement && e.keyCode !== 9) {
            this.showPopup();
          }
        }
      } else if ((!this.requireLeadingSpace ? lastWordRange.includes(this.mentionChar) : lastWordRange.indexOf(this.mentionChar) === 0) && !this.isPopupOpen && e.keyCode !== 8 && (!this.popupObj || isNullOrUndefined(this.target) && !document.body.contains(this.popupObj.element) || !isNullOrUndefined(this.target) && document.body.contains(this.popupObj.element))) {
        if (this.initRemoteRender && this.list && this.list.classList.contains("e-nodata")) {
          this.searchLists(e);
        }
        this.resetList(this.dataSource, this.fields);
        if (isNullOrUndefined(this.list)) {
          this.initValue();
        }
        if (!this.isPopupOpen && e.keyCode !== 38 && e.keyCode !== 40 && this.queryString.length >= this.minLength) {
          this.didPopupOpenByTypingInitialChar = true;
          this.showPopup();
          if (this.initRemoteRender && this.list.querySelectorAll("li").length === 0) {
            this.showWaitingSpinner();
          }
          this.lineBreak = false;
        }
      } else if (this.allowSpaces && this.queryString !== "" && currentRange && currentRange.trim() !== "" && currentRange.replace(" ", " ").lastIndexOf(" ") < currentRange.length - 1 && e.keyCode !== 38 && e.keyCode !== 40 && e.keyCode !== 8 && (this.mentionChar.charCodeAt(0) === lastWordRange.charCodeAt(0) || this.liCollections && this.liCollections.length > 0)) {
        this.queryString = currentRange.substring(currentRange.lastIndexOf(this.mentionChar) + 1).replace(" ", " ");
        this.searchLists(e);
      } else if (this.queryString === "" && this.isPopupOpen && e.keyCode !== 38 && e.keyCode !== 40 && this.mentionChar.charCodeAt(0) === lastWordRange.charCodeAt(0)) {
        this.searchLists(e);
        if (!this.isListResetted) {
          this.resetList(this.dataSource, this.fields);
        }
      }
      this.isListResetted = false;
    };
    Mention2.prototype.isMatchedText = function() {
      var isMatched = false;
      for (var i = 0; i < (this.liCollections && this.liCollections.length); i++) {
        if (this.getTextRange() && this.getTextRange().substring(this.getTextRange().lastIndexOf(this.mentionChar) + 1).replace(" ", " ").trim() === this.liCollections[i].getAttribute("data-value").toLowerCase()) {
          isMatched = true;
        }
      }
      return isMatched;
    };
    Mention2.prototype.getCurrentRange = function() {
      this.range = this.inputElement.ownerDocument.getSelection().getRangeAt(0);
      return this.range;
    };
    Mention2.prototype.performFiltering = function(e) {
      var _this = this;
      var eventArgs = {
        preventDefaultAction: false,
        text: this.queryString,
        updateData: function(dataSource, query, fields) {
          if (eventArgs.cancel) {
            return;
          }
          _this.isFiltered = true;
          _this.filterAction(dataSource, query, fields);
        },
        cancel: false
      };
      this.trigger("filtering", eventArgs, function(eventArgs2) {
        if (!eventArgs2.cancel && !_this.isFiltered && !eventArgs2.preventDefaultAction) {
          _this.filterAction(_this.dataSource, null, _this.fields);
        }
      });
    };
    Mention2.prototype.searchLists = function(e) {
      this.isDataFetched = false;
      if (isNullOrUndefined(this.list)) {
        _super.prototype.render.call(this);
        this.unWireListEvents();
        this.wireListEvents();
      }
      if (e.type !== "mousedown" && (e.keyCode === 40 || e.keyCode === 38)) {
        this.queryString = this.queryString === "" ? null : this.queryString;
        this.beforePopupOpen = true;
        this.resetList(this.dataSource, this.fields);
        return;
      }
      this.isSelected = false;
      this.activeIndex = null;
      if (this.queryString !== "" && this.debounceDelay > 0) {
        this.debouncedFiltering(e, this.debounceDelay);
      } else {
        this.performFiltering(e);
      }
    };
    Mention2.prototype.filterAction = function(dataSource, query, fields) {
      this.beforePopupOpen = true;
      if (this.queryString.length >= this.minLength) {
        this.resetList(dataSource, fields, query);
        this.isListResetted = true;
      } else {
        if (this.isPopupOpen) {
          this.hidePopup();
        }
        this.beforePopupOpen = false;
      }
      this.setDataIndex();
      this.renderReactTemplates();
    };
    Mention2.prototype.onActionComplete = function(ulElement, list, e, isUpdated) {
      _super.prototype.onActionComplete.call(this, ulElement, list, e);
      if (this.isActive) {
        if (!isNullOrUndefined(ulElement)) {
          attributes(ulElement, {
            "id": this.inputElement.id + "_options",
            "role": "listbox",
            "aria-hidden": "false"
          });
          var isRTESlashMenuPopup = this.isRTE && this.cssClass && this.cssClass.indexOf("e-slash-menu") > -1;
          if (isRTESlashMenuPopup) {
            ulElement.id = this.inputElement.id + "_slash_menu_options";
          }
        }
        var focusItem = this.fields.disabled ? ulElement.querySelector("." + dropDownBaseClasses.li + ":not(.e-disabled)") : ulElement.querySelector("." + dropDownBaseClasses.li);
        if (focusItem) {
          focusItem.classList.add(dropDownBaseClasses.selected);
          this.selectedLI = focusItem;
          var value = this.getFormattedValue(focusItem.getAttribute("data-value"));
          this.selectEventCallback(focusItem, this.getDataByValue(value), value, true);
        }
        if (this.beforePopupOpen && this.isPopupOpen) {
          if (!isNullOrUndefined(this.popupObj.element)) {
            this.popupObj.element.remove();
          }
          this.renderPopup();
        }
      }
    };
    Mention2.prototype.setDataIndex = function() {
      for (var i = 0; this.liCollections && i < this.liCollections.length; i++) {
        this.liCollections[i].setAttribute("data-index", i.toString());
      }
    };
    Mention2.prototype.listOption = function(dataSource, fieldsSettings) {
      var _this = this;
      var fields = _super.prototype.listOption.call(this, dataSource, fieldsSettings);
      if (isNullOrUndefined(fields.itemCreated)) {
        fields.itemCreated = function(e) {
          if (_this.highlight) {
            if (_this.inputElement.tagName === _this.getNgDirective() && _this.itemTemplate) {
              setTimeout(function() {
                highlightSearch(e.item, _this.queryString, _this.ignoreCase, _this.filterType);
              }, 0);
            } else {
              highlightSearch(e.item, _this.queryString, _this.ignoreCase, _this.filterType);
            }
          }
        };
      } else {
        var itemCreated_1 = fields.itemCreated;
        fields.itemCreated = function(e) {
          if (_this.highlight) {
            highlightSearch(e.item, _this.queryString, _this.ignoreCase, _this.filterType);
          }
          itemCreated_1.apply(_this, [e]);
        };
      }
      return fields;
    };
    Mention2.prototype.elementValue = function() {
      if (!this.isContentEditable(this.inputElement)) {
        return this.inputElement.value.replace(this.mentionChar, "");
      } else {
        return this.inputElement.textContent.replace(this.mentionChar, "");
      }
    };
    Mention2.prototype.getQuery = function(query) {
      var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();
      var filterType = this.queryString === "" && !isNullOrUndefined(this.elementValue()) ? "equal" : this.filterType;
      var queryString2 = this.queryString === "" && !isNullOrUndefined(this.elementValue()) ? this.elementValue() : this.queryString;
      if (this.isFiltered) {
        return filterQuery;
      }
      if (this.queryString !== null && this.queryString !== "") {
        var dataType = this.typeOfData(this.dataSource).typeof;
        if (!(this.dataSource instanceof DataManager) && dataType === "string" || dataType === "number") {
          filterQuery.where("", filterType, queryString2, this.ignoreCase, this.ignoreAccent);
        } else {
          var mapping = !isNullOrUndefined(this.fields.text) ? this.fields.text : "";
          filterQuery.where(mapping, filterType, queryString2, this.ignoreCase, this.ignoreAccent);
        }
      }
      if (!isNullOrUndefined(this.suggestionCount)) {
        if (this.suggestionCount !== 25) {
          for (var queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {
            if (filterQuery.queries[queryElements].fn === "onTake") {
              filterQuery.queries.splice(queryElements, 1);
            }
          }
        }
        filterQuery.take(this.suggestionCount);
      }
      return filterQuery;
    };
    Mention2.prototype.renderHightSearch = function() {
      if (this.highlight) {
        for (var i = 0; i < this.liCollections.length; i++) {
          var isHighlight = this.ulElement.querySelector(".e-active");
          if (!isHighlight) {
            revertHighlightSearch(this.liCollections[i]);
            highlightSearch(this.liCollections[i], this.queryString, this.ignoreCase, this.filterType);
          }
        }
      }
    };
    Mention2.prototype.getTextRange = function() {
      var text;
      if (!this.isContentEditable(this.inputElement)) {
        var component = this.inputElement;
        if (!isNullOrUndefined(component)) {
          var startPos = component.selectionStart;
          if (component.value && startPos >= 0) {
            text = component.value.substring(0, startPos);
          }
        }
      } else {
        if (this.range) {
          var selectedElem = this.range.startContainer;
          if (!isNullOrUndefined(selectedElem)) {
            var workingNodeContent = selectedElem.textContent;
            var selectStartOffset = this.range.startOffset;
            if (workingNodeContent && selectStartOffset >= 0) {
              text = workingNodeContent.substring(0, selectStartOffset);
            }
          }
        }
      }
      return text;
    };
    Mention2.prototype.getLastLetter = function(text) {
      if (isNullOrUndefined(text)) {
        return "";
      }
      var textValue = text.indexOf("​") > -1 ? text.replace(/\u200B/g, "").replace(/\u00A0/g, " ") : text.replace(/\u00A0/g, " ");
      var words = textValue.split(/\s+/);
      var wordCnt = words.length - 1;
      return words[wordCnt].trim();
    };
    Mention2.prototype.isContentEditable = function(element) {
      return element && element.nodeName !== "INPUT" && element.nodeName !== "TEXTAREA";
    };
    Mention2.prototype.showPopup = function() {
      this.beforePopupOpen = true;
      if (document.activeElement !== this.inputElement) {
        this.inputElement.focus();
      }
      this.queryString = this.didPopupOpenByTypingInitialChar ? this.queryString : "";
      this.didPopupOpenByTypingInitialChar = false;
      if (this.isContentEditable(this.inputElement)) {
        this.range = this.getCurrentRange();
      }
      if (!this.isTyped) {
        this.resetList(this.dataSource, this.fields);
      }
      if (isNullOrUndefined(this.list)) {
        this.initValue();
      }
      this.renderPopup();
      attributes(this.inputElement, {
        "aria-activedescendant": this.selectedElementID
      });
      if (this.selectedElementID == null) {
        this.inputElement.removeAttribute("aria-activedescendant");
      }
    };
    Mention2.prototype.hidePopup = function(e) {
      this.removeSelection();
      this.closePopup(0, e);
    };
    Mention2.prototype.closePopup = function(delay, e) {
      var _this = this;
      if (!(this.popupObj && document.body.contains(this.popupObj.element) && this.beforePopupOpen)) {
        return;
      }
      EventHandler.remove(document, "mousedown", this.onDocumentClick);
      this.inputElement.removeAttribute("aria-owns");
      this.inputElement.removeAttribute("aria-activedescendant");
      this.beforePopupOpen = false;
      var animModel = {
        name: "FadeOut",
        duration: 100,
        delay: delay ? delay : 0
      };
      var popupInstance = this.popupObj;
      var eventArgs = {
        popup: popupInstance,
        cancel: false,
        animation: animModel,
        event: e || null
      };
      this.trigger("closed", eventArgs, function(eventArgs2) {
        if (!eventArgs2.cancel && _this.popupObj) {
          if (_this.isPopupOpen) {
            _this.popupObj.hide(new Animation(eventArgs2.animation));
          } else {
            _this.destroyPopup();
          }
        }
      });
    };
    Mention2.prototype.renderPopup = function() {
      var _this = this;
      var args = {
        cancel: false
      };
      this.trigger("beforeOpen", args, function(args2) {
        if (!args2.cancel) {
          var popupEle_1;
          if (isNullOrUndefined(_this.target)) {
            popupEle_1 = _this.createElement("div", {
              id: _this.inputElement.id + "_popup",
              className: "e-mention e-popup " + (_this.cssClass != null ? _this.cssClass : "")
            });
          } else {
            popupEle_1 = _this.element;
            if (_this.cssClass != null) {
              addClass([popupEle_1], _this.cssClass.split(" "));
            }
          }
          var isRTESlashMenuPopup = _this.isRTE && _this.cssClass && _this.cssClass.indexOf("e-slash-menu") > -1;
          if (isRTESlashMenuPopup) {
            popupEle_1.id = _this.inputElement.id + "_slash_menu_popup";
          } else {
            if (!isNullOrUndefined(_this.target)) {
              popupEle_1.id = _this.inputElement.id + "_popup";
            }
          }
          _this.listHeight = formatUnit(_this.popupHeight);
          if (!isNullOrUndefined(_this.list.querySelector("li")) && !_this.initRemoteRender) {
            var li = _this.list.querySelector("." + dropDownBaseClasses.focus);
            if (!isNullOrUndefined(li)) {
              _this.selectedLI = li;
              var value = _this.getFormattedValue(li.getAttribute("data-value"));
              _this.selectEventCallback(li, _this.getDataByValue(value), value, true);
            }
          }
          append([_this.list], popupEle_1);
          if (_this.inputElement.parentElement) {
            var rteRootElement = _this.inputElement.parentElement.closest(".e-richtexteditor");
            if (rteRootElement && popupEle_1.firstElementChild && popupEle_1.firstElementChild.childElementCount > 0) {
              popupEle_1.firstElementChild.setAttribute("aria-owns", rteRootElement.id);
              addClass([popupEle_1], "e-rte-elements");
            }
          }
          if (!_this.popupObj || !document.body.contains(_this.popupObj.element) || !document.contains(popupEle_1) && isNullOrUndefined(_this.target)) {
            document.body.appendChild(popupEle_1);
          }
          var coordinates_1;
          popupEle_1.style.visibility = "hidden";
          _this.setHeight(popupEle_1);
          var offsetValue = 0;
          var left = 0;
          _this.initializePopup(popupEle_1, offsetValue, left);
          _this.checkCollision(popupEle_1);
          popupEle_1.style.visibility = "visible";
          var popupLeft_1 = popupEle_1.parentElement.offsetWidth - popupEle_1.offsetWidth;
          var popupHeight_1 = popupEle_1.offsetHeight;
          addClass([popupEle_1], ["e-mention", "e-popup", "e-popup-close"]);
          if (!isNullOrUndefined(_this.list)) {
            _this.unWireListEvents();
            _this.wireListEvents();
          }
          _this.selectedElementID = _this.selectedLI ? _this.selectedLI.id : null;
          attributes(_this.inputElement, {
            "aria-owns": _this.inputElement.id + "_options",
            "aria-activedescendant": _this.selectedElementID
          });
          if (_this.selectedElementID == null) {
            _this.inputElement.removeAttribute("aria-activedescendant");
          }
          var animModel = {
            name: "FadeIn",
            duration: 100
          };
          _this.beforePopupOpen = true;
          var popupInstance = _this.popupObj;
          var eventArgs = {
            popup: popupInstance,
            cancel: false,
            animation: animModel
          };
          _this.trigger("opened", eventArgs, function(eventArgs2) {
            if (!eventArgs2.cancel) {
              _this.renderReactTemplates();
              if (_this.popupObj) {
                _this.popupObj.show(new Animation(eventArgs2.animation), _this.zIndex === 1e3 ? _this.inputElement : null);
              }
              if (isNullOrUndefined(_this.getTriggerCharPosition())) {
                return;
              }
              coordinates_1 = _this.getCoordinates(_this.inputElement, _this.getTriggerCharPosition());
              if (!_this.isCollided) {
                popupEle_1.style.cssText = "top: ".concat(coordinates_1.top.toString(), "px;\n left: ").concat(coordinates_1.left.toString(), "px;\nposition: absolute;\n display: block;");
              } else {
                if (_this.collision.length > 0 && _this.collision.indexOf("right") > -1 && _this.collision.indexOf("bottom") === -1) {
                  popupEle_1.style.cssText = "top: ".concat(coordinates_1.top.toString(), "px;\n left: ").concat(popupLeft_1.toString(), "px;\nposition: absolute;\n display: block;");
                } else if (_this.collision && _this.collision.length > 0 && _this.collision.indexOf("bottom") > -1 && _this.collision.indexOf("right") === -1) {
                  popupEle_1.style.left = formatUnit(coordinates_1.left);
                  popupEle_1.style.top = formatUnit(coordinates_1.top - parseInt(popupHeight_1.toString(), 10));
                } else if (_this.collision && _this.collision.length > 0 && _this.collision.indexOf("bottom") > -1 && _this.collision.indexOf("right") > -1) {
                  popupEle_1.style.left = formatUnit(popupLeft_1);
                  popupEle_1.style.top = formatUnit(coordinates_1.top - parseInt(popupHeight_1.toString(), 10));
                } else {
                  popupEle_1.style.left = formatUnit(coordinates_1.left);
                  popupEle_1.style.top = formatUnit(coordinates_1.top - parseInt(_this.popupHeight.toString(), 10));
                }
                _this.isCollided = false;
                _this.collision = [];
              }
              popupEle_1.style.width = _this.popupWidth !== "100%" && !isNullOrUndefined(_this.popupWidth) ? formatUnit(_this.popupWidth) : "auto";
              _this.setHeight(popupEle_1);
              popupEle_1.style.zIndex = _this.zIndex === 1e3 ? getZindexPartial(popupEle_1).toString() : _this.zIndex.toString();
            } else {
              _this.beforePopupOpen = false;
              _this.destroyPopup();
            }
          });
        } else {
          _this.beforePopupOpen = false;
        }
      });
    };
    Mention2.prototype.setHeight = function(popupEle) {
      if (this.popupHeight !== "auto" && this.list) {
        this.list.style.maxHeight = (parseInt(this.listHeight, 10) - 2).toString() + "px";
        popupEle.style.maxHeight = formatUnit(this.popupHeight);
      } else {
        popupEle.style.height = "auto";
      }
    };
    Mention2.prototype.checkCollision = function(popupEle) {
      if (!Browser.isDevice || Browser.isDevice && !(this.getModuleName() === "mention")) {
        var coordinates = this.getCoordinates(this.inputElement, this.getTriggerCharPosition());
        this.collision = isCollide(popupEle, null, coordinates.left, coordinates.top);
        if (this.collision.length > 0) {
          popupEle.style.marginTop = -parseInt(getComputedStyle(popupEle).marginTop, 10) + "px";
          this.isCollided = true;
        }
        this.popupObj.resolveCollision();
      }
    };
    Mention2.prototype.getTriggerCharPosition = function() {
      var mostRecentTriggerCharPos;
      var currentRange = this.getTextRange();
      if (currentRange !== void 0 && currentRange !== null) {
        mostRecentTriggerCharPos = 0;
        var idx = currentRange.lastIndexOf(this.mentionChar);
        if (idx >= mostRecentTriggerCharPos) {
          mostRecentTriggerCharPos = idx;
        }
      }
      return mostRecentTriggerCharPos ? mostRecentTriggerCharPos : 0;
    };
    Mention2.prototype.initializePopup = function(element, offsetValue, left) {
      var _this = this;
      this.popupObj = new Popup(element, {
        width: this.setWidth(),
        targetType: "relative",
        relateTo: this.inputElement,
        collision: {
          X: "flip",
          Y: "flip"
        },
        offsetY: offsetValue,
        enableRtl: this.enableRtl,
        offsetX: left,
        position: {
          X: "left",
          Y: "bottom"
        },
        actionOnScroll: "hide",
        zIndex: this.zIndex,
        close: function() {
          _this.destroyPopup();
        },
        open: function() {
          EventHandler.add(document, "mousedown", _this.onDocumentClick, _this);
          _this.isPopupOpen = true;
          _this.setDataIndex();
        }
      });
    };
    Mention2.prototype.setWidth = function() {
      var width = formatUnit(this.popupWidth);
      if (width.indexOf("%") > -1) {
        var inputWidth = this.inputElement.offsetWidth * parseFloat(width) / 100;
        width = inputWidth.toString() + "px";
      }
      return width;
    };
    Mention2.prototype.destroyPopup = function() {
      this.isPopupOpen = false;
      this.popupObj.destroy();
      if (isNullOrUndefined(this.target)) {
        detach(this.popupObj.element);
      } else {
        this.popupObj.element.innerHTML = "";
        this.popupObj.element.removeAttribute("style");
        this.popupObj.element.removeAttribute("aria-disabled");
      }
      if (this.list.classList.contains("e-nodata")) {
        this.list = null;
      }
    };
    Mention2.prototype.onDocumentClick = function(e) {
      var target = e.target;
      if (!(!isNullOrUndefined(this.popupObj) && closest(target, "#" + this.popupObj.element.id))) {
        this.hidePopup(e);
      }
    };
    Mention2.prototype.getCoordinates = function(element, position) {
      var properties = ["direction", "boxSizing", "width", "height", "overflowX", "overflowY", "borderTopWidth", "borderRightWidth", "borderBottomWidth", "borderLeftWidth", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "fontStyle", "fontVariant", "fontWeight", "fontStretch", "fontSize", "fontSizeAdjust", "lineHeight", "fontFamily", "textAlign", "textTransform", "textIndent", "textDecoration", "letterSpacing", "wordSpacing"];
      var div;
      var span;
      var range;
      var globalRange;
      var coordinates;
      var computed;
      var rect;
      if (!this.isContentEditable(this.inputElement)) {
        div = this.createElement("div", {
          className: "e-form-mirror-div"
        });
        document.body.appendChild(div);
        computed = getComputedStyle(element);
        div.style.position = "absolute";
        div.style.visibility = "hidden";
        properties.forEach(function(prop) {
          div.style[prop] = computed[prop];
        });
        div.textContent = element.value.substring(0, position);
        if (this.inputElement.nodeName === "INPUT") {
          div.textContent = div.textContent.replace(/\s/g, " ");
        }
        span = this.createElement("span");
        span.textContent = element.value.substring(position) || ".";
        div.appendChild(span);
        rect = element.getBoundingClientRect();
      } else {
        var selectedNodePosition = this.getTriggerCharPosition();
        globalRange = this.range;
        range = document.createRange();
        if (this.getTextRange() && this.getTextRange().lastIndexOf(this.mentionChar) !== -1) {
          range.setStart(globalRange.startContainer, selectedNodePosition);
          range.setEnd(globalRange.startContainer, selectedNodePosition);
        } else {
          range.setStart(globalRange.startContainer, globalRange.startOffset);
          range.setEnd(globalRange.startContainer, globalRange.endOffset);
        }
        this.isTyped = false;
        range.collapse(false);
        rect = range.getBoundingClientRect().top === 0 ? range.startContainer.getClientRects()[0] : range.getBoundingClientRect();
      }
      var rectTop = rect.top;
      var rectLeft = rect.left;
      var iframes = document.querySelectorAll("iframe");
      if (iframes.length > 0) {
        for (var i = 0; i < iframes.length; i++) {
          var iframe = iframes[i];
          if (iframe.contentDocument && iframe.contentDocument.contains(element)) {
            var iframeRect = iframe.getBoundingClientRect();
            rectTop += iframeRect.top;
            rectLeft += iframeRect.left;
          }
        }
      }
      var doc = document.documentElement;
      var windowLeft = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
      var windowTop = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
      var width = 0;
      if (!isNullOrUndefined(range) && range.getBoundingClientRect().top === 0) {
        for (var i = 0; i < this.range.startContainer.childNodes.length; i++) {
          if (this.range.startContainer.childNodes[i].nodeType !== Node.TEXT_NODE && this.range.startContainer.childNodes[i].textContent.trim() !== "") {
            width += this.range.startContainer.childNodes[i].getClientRects()[0].width;
          } else if (this.range.startContainer.childNodes[i].textContent !== "") {
            var span_1 = document.createElement("span");
            span_1.innerHTML = this.range.startContainer.childNodes[i].nodeValue;
            document.body.appendChild(span_1);
            var textNodeWidth = span_1.offsetWidth;
            document.body.removeChild(span_1);
            width += textNodeWidth;
          }
        }
      }
      if (!this.isContentEditable(this.inputElement)) {
        coordinates = {
          top: rectTop + windowTop + span.offsetTop + parseInt(computed.borderTopWidth, 10) + parseInt(computed.fontSize, 10) + 3 - element.scrollTop - (this.isCollided ? 10 : 0),
          left: rectLeft + windowLeft + span.offsetLeft + parseInt(computed.borderLeftWidth, 10)
        };
        document.body.removeChild(div);
      } else {
        if (this.collision && this.collision.length > 0 && this.collision.indexOf("right") > -1 && this.collision.indexOf("bottom") === -1) {
          coordinates = {
            top: rectTop + windowTop + parseInt(getComputedStyle(this.inputElement).fontSize, 10),
            left: rectLeft + windowLeft + width
          };
        } else {
          coordinates = {
            top: rectTop + windowTop + parseInt(getComputedStyle(this.inputElement).fontSize, 10) - (this.isCollided ? 10 : 0),
            left: rectLeft + windowLeft + width
          };
        }
      }
      return coordinates;
    };
    Mention2.prototype.initValue = function() {
      this.isDataFetched = false;
      this.renderList();
      if (this.dataSource instanceof DataManager) {
        this.initRemoteRender = true;
      } else {
        this.updateValues();
      }
    };
    Mention2.prototype.updateValues = function() {
      var li = this.list.querySelector("." + dropDownBaseClasses.focus);
      if (!isNullOrUndefined(li)) {
        this.setSelection(li, null);
      }
    };
    Mention2.prototype.renderList = function() {
      _super.prototype.render.call(this);
      this.unWireListEvents();
      this.wireListEvents();
    };
    Mention2.prototype.wireListEvents = function() {
      EventHandler.add(this.list, this.keyEventName, this.onMouseClick, this);
      EventHandler.add(this.list, "mouseover", this.onMouseOver, this);
      EventHandler.add(this.list, "mouseout", this.onMouseLeave, this);
    };
    Mention2.prototype.unWireListEvents = function() {
      EventHandler.remove(this.list, this.keyEventName, this.onMouseClick);
      EventHandler.remove(this.list, "mouseover", this.onMouseOver);
      EventHandler.remove(this.list, "mouseout", this.onMouseLeave);
    };
    Mention2.prototype.onMouseClick = function(e) {
      var target = e.target;
      var li = closest(target, "." + dropDownBaseClasses.li);
      if (!this.isValidLI(li) || this.isDisabledElement(li)) {
        return;
      }
      this.isSelected = true;
      this.setSelection(li, e);
      var delay = 100;
      this.closePopup(delay, e);
      this.inputElement.focus();
      if (!this.isRTE) {
        e.preventDefault();
      }
    };
    Mention2.prototype.updateSelectedItem = function(li, e, preventSelect, isSelection) {
      var _this = this;
      this.removeSelection();
      li.classList.add(dropDownBaseClasses.selected);
      this.removeHover();
      var value = this.getFormattedValue(li.getAttribute("data-value"));
      var selectedData = this.getDataByValue(value);
      if (!preventSelect && !isNullOrUndefined(e) && !(e.action === "down" || e.action === "up")) {
        var items = this.detachChanges(selectedData);
        this.isSelected = true;
        var eventArgs = {
          e,
          item: li,
          itemData: items,
          isInteracted: e ? true : false,
          cancel: false
        };
        this.trigger("select", eventArgs, function(eventArgs2) {
          if (eventArgs2.cancel) {
            li.classList.remove(dropDownBaseClasses.selected);
            _this.isSelected = false;
            _this.isSelectCancel = true;
          } else {
            _this.selectEventCallback(li, selectedData, value);
            if (isSelection) {
              _this.setSelectOptions(li, e);
            }
          }
        });
      } else {
        this.selectEventCallback(li, selectedData, value);
        if (isSelection) {
          this.setSelectOptions(li, e);
        }
      }
    };
    Mention2.prototype.setSelection = function(li, e) {
      if (this.isValidLI(li) && (!li.classList.contains(dropDownBaseClasses.selected) || this.isPopupOpen && this.isSelected && li.classList.contains(dropDownBaseClasses.selected))) {
        this.updateSelectedItem(li, e, false, true);
      } else {
        this.setSelectOptions(li, e);
      }
    };
    Mention2.prototype.setSelectOptions = function(li, e) {
      if (this.list) {
        this.removeHover();
      }
      this.previousSelectedLI = !isNullOrUndefined(this.selectedLI) ? this.selectedLI : null;
      this.selectedLI = li;
      if (this.isPopupOpen && !isNullOrUndefined(this.selectedLI)) {
        this.setScrollPosition(e);
      }
      if (e && (e.keyCode === 38 || e.keyCode === 40)) {
        return;
      }
      if (isNullOrUndefined(e) || this.setValue(e)) {
        return;
      }
    };
    Mention2.prototype.setScrollPosition = function(e) {
      if (!isNullOrUndefined(e)) {
        switch (e.action) {
          case "pageDown":
          case "down":
          case "end":
            this.scrollBottom();
            break;
          default:
            this.scrollTop();
            break;
        }
      } else {
        this.scrollBottom(true);
      }
    };
    Mention2.prototype.scrollBottom = function(isInitial) {
      if (!isNullOrUndefined(this.selectedLI)) {
        var currentOffset = this.list.offsetHeight;
        var nextBottom = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
        var nextOffset = this.list.scrollTop + nextBottom - currentOffset;
        nextOffset = isInitial ? nextOffset + parseInt(getComputedStyle(this.list).paddingTop, 10) * 2 : nextOffset;
        var boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
        if (this.activeIndex === 0) {
          this.list.scrollTop = 0;
        } else if (nextBottom > currentOffset || !(boxRange > 0 && this.list.offsetHeight > boxRange)) {
          this.list.scrollTop = nextOffset;
        }
      }
    };
    Mention2.prototype.scrollTop = function() {
      if (!isNullOrUndefined(this.selectedLI)) {
        var nextOffset = !isNullOrUndefined(this.fields.groupBy) && !isNullOrUndefined(this.fixedHeaderElement) ? this.selectedLI.offsetTop - (this.list.scrollTop + this.fixedHeaderElement.offsetHeight) : this.selectedLI.offsetTop - this.list.scrollTop;
        nextOffset = this.fields.groupBy && nextOffset;
        var boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
        if (this.activeIndex === 0) {
          this.list.scrollTop = 0;
        } else if (nextOffset < 0) {
          this.list.scrollTop = this.list.scrollTop + nextOffset;
        } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {
          this.list.scrollTop = this.selectedLI.offsetTop;
        }
      }
    };
    Mention2.prototype.selectEventCallback = function(li, selectedData, value, selectLi) {
      this.previousItemData = !isNullOrUndefined(this.itemData) ? this.itemData : null;
      this.item = li;
      this.itemData = selectedData;
      var focusedItem = this.list.querySelector("." + dropDownBaseClasses.focus);
      if (focusedItem) {
        removeClass([focusedItem], dropDownBaseClasses.focus);
      }
      if (selectLi) {
        addClass([li], dropDownBaseClasses.selected);
      }
      li.setAttribute("aria-selected", "true");
      this.activeIndex = this.getIndexByValue(value);
    };
    Mention2.prototype.detachChanges = function(value) {
      var items;
      if (typeof value === "string" || typeof value === "boolean" || typeof value === "number") {
        items = Object.defineProperties({}, {
          value: {
            value,
            enumerable: true
          },
          text: {
            value,
            enumerable: true
          }
        });
      } else {
        items = value;
      }
      return items;
    };
    Mention2.prototype.setValue = function(e) {
      if (!this.isReact) {
        if (!isNullOrUndefined(this.displayTemplate)) {
          this.setDisplayTemplate();
        }
        this.updateMentionValue(e);
        return true;
      } else {
        if (!isNullOrUndefined(this.displayTemplate)) {
          this.setDisplayTemplate(e);
        } else {
          this.updateMentionValue(e);
        }
        return true;
      }
    };
    Mention2.prototype.updateMentionValue = function(e) {
      var dataItem = this.getItemData();
      var textSuffix = typeof this.suffixText === "string" ? this.suffixText : "";
      var value;
      var endPos;
      var range;
      var globalRange;
      var selection = this.inputElement.ownerDocument.getSelection();
      var startPos = this.getTriggerCharPosition();
      if (this.isSelectCancel) {
        this.isSelectCancel = false;
        return;
      }
      if (dataItem.text !== null) {
        value = this.mentionVal(dataItem.text);
      }
      if (!this.isContentEditable(this.inputElement)) {
        var myField = this.inputElement;
        var currentTriggerSnippet = this.getTextRange().substring(startPos + this.mentionChar.length, this.getTextRange().length);
        value += textSuffix;
        endPos = startPos + this.mentionChar.length;
        endPos += currentTriggerSnippet.length;
        myField.value = myField.value.substring(0, startPos) + value + myField.value.substring(endPos, myField.value.length);
        myField.selectionStart = startPos + value.length;
        myField.selectionEnd = startPos + value.length;
        if (this.isPopupOpen) {
          this.hidePopup();
        }
        this.onChangeEvent(e);
      } else {
        endPos = this.getTriggerCharPosition() + this.mentionChar.length;
        if (this.range && this.range.startContainer.textContent.trim() !== this.mentionChar) {
          endPos = this.range.endOffset;
        }
        globalRange = this.range;
        range = document.createRange();
        if (this.getTextRange() && this.getTextRange().lastIndexOf(this.mentionChar) !== -1 || this.getTextRange() && this.getTextRange().trim() === this.mentionChar) {
          range.setStart(globalRange.startContainer, startPos);
          range.setEnd(globalRange.startContainer, endPos);
        } else {
          if (globalRange.commonAncestorContainer.textContent.trim() !== "" && !isNullOrUndefined(globalRange.commonAncestorContainer.textContent.trim()) && this.getTextRange() && this.getTextRange().lastIndexOf(this.mentionChar) !== -1) {
            range.setStart(globalRange.startContainer, globalRange.startOffset - 1);
            range.setEnd(globalRange.startContainer, globalRange.endOffset - 1);
          } else {
            range.setStart(globalRange.startContainer, globalRange.startOffset);
            range.setEnd(globalRange.startContainer, globalRange.endOffset);
          }
        }
        this.isTyped = false;
        range.deleteContents();
        range.startContainer.parentElement.normalize();
        var element = this.createElement("div");
        element.innerHTML = value;
        var frag = document.createDocumentFragment();
        var node = void 0;
        var lastNode = void 0;
        while (node = element.firstChild) {
          lastNode = frag.appendChild(node);
        }
        range.insertNode(frag);
        if (lastNode) {
          range = range.cloneRange();
          if (this.isRTE) {
            if (lastNode.nodeType === 3) {
              range.setStart(lastNode, lastNode.textContent.length);
            } else {
              range.setStartAfter(lastNode);
            }
          } else {
            range.setStartAfter(lastNode);
          }
          range.collapse(true);
          selection.removeAllRanges();
          selection.addRange(range);
        }
        if (this.isPopupOpen) {
          this.hidePopup();
        }
        if (!isNullOrUndefined(e.pointerType) && e.pointerType === "mouse") {
          var event_1 = new CustomEvent("content-changed", {
            detail: {
              click: true
            }
          });
          this.inputElement.dispatchEvent(event_1);
        }
        this.onChangeEvent(e);
      }
    };
    Mention2.prototype.mentionVal = function(value) {
      var showChar = this.showMentionChar ? this.mentionChar : "";
      if (!isNullOrUndefined(this.displayTemplate) && !isNullOrUndefined(this.displayTempElement)) {
        value = this.displayTempElement.innerHTML;
      }
      if (this.isContentEditable(this.inputElement)) {
        if (Browser.isAndroid) {
          return '<span contenteditable="true" class="e-mention-chip">' + showChar + value + "</span>".concat(typeof this.suffixText === "string" ? this.suffixText : "&#8203;");
        } else {
          return '<span contenteditable="false" class="e-mention-chip">' + showChar + value + "</span>".concat(typeof this.suffixText === "string" ? this.suffixText : "&#8203;");
        }
      } else {
        return showChar + value;
      }
    };
    Mention2.prototype.setDisplayTemplate = function(e) {
      var _this = this;
      if (this.isReact) {
        this.clearTemplate(["displayTemplate"]);
        if (this.displayTempElement) {
          detach(this.displayTempElement);
          this.displayTempElement = null;
        }
      }
      if (!this.displayTempElement) {
        this.displayTempElement = this.createElement("div");
      }
      if (!this.isReact) {
        this.displayTempElement.innerHTML = "";
      }
      var compiledString = compile(this.displayTemplate);
      var displayCompTemp = compiledString(this.itemData, this, "displayTemplate", this.displayTemplateId, this.isStringTemplate, null, this.displayTempElement);
      if (displayCompTemp && displayCompTemp.length > 0) {
        append(displayCompTemp, this.displayTempElement);
      }
      if (!this.isReact) {
        this.renderTemplates();
      } else {
        this.renderTemplates(function() {
          _this.updateMentionValue(e);
        });
      }
    };
    Mention2.prototype.renderTemplates = function(callBack) {
      this.renderReactTemplates(callBack);
    };
    Mention2.prototype.setSpinnerTemplate = function() {
      var _this = this;
      if (this.isReact) {
        this.clearTemplate(["spinnerTemplate"]);
        if (this.spinnerTemplateElement) {
          detach(this.spinnerTemplateElement);
          this.spinnerTemplateElement = null;
        }
      }
      if (!this.spinnerTemplateElement) {
        this.spinnerTemplateElement = this.createElement("div");
      }
      if (!this.isReact) {
        this.spinnerTemplateElement.innerHTML = "";
      }
      var compiledString = compile(this.spinnerTemplate);
      var spinnerCompTemp = compiledString(null, this, "spinnerTemplate", this.spinnerTemplateId, this.isStringTemplate, null, this.spinnerTemplateElement);
      if (spinnerCompTemp && spinnerCompTemp.length > 0) {
        for (var i = 0; i < spinnerCompTemp.length; i++) {
          this.spinnerTemplateElement.appendChild(spinnerCompTemp[i]);
        }
      }
      if (!this.isReact) {
        this.renderTemplates();
        this.popupObj.element.appendChild(this.spinnerTemplateElement);
      } else {
        this.renderTemplates(function() {
          _this.popupObj.element.appendChild(_this.spinnerTemplateElement);
        });
      }
    };
    Mention2.prototype.onChangeEvent = function(eve) {
      this.isSelected = false;
      var items = this.detachMentionChanges(this.itemData);
      var preItems;
      if (typeof this.previousItemData === "string" || typeof this.previousItemData === "boolean" || typeof this.previousItemData === "number") {
        preItems = Object.defineProperties({}, {
          value: {
            value: this.previousItemData,
            enumerable: true
          },
          text: {
            value: this.previousItemData,
            enumerable: true
          }
        });
      } else {
        preItems = this.previousItemData;
      }
      var eventArgs = {
        e: eve,
        item: this.item,
        itemData: items,
        previousItem: this.previousSelectedLI,
        previousItemData: preItems,
        isInteracted: eve ? true : false,
        value: this.item.innerHTML,
        element: this.inputElement
      };
      this.trigger("change", eventArgs);
    };
    Mention2.prototype.detachMentionChanges = function(value) {
      var items;
      if (typeof value === "string" || typeof value === "boolean" || typeof value === "number") {
        items = Object.defineProperties({}, {
          value: {
            value,
            enumerable: true
          },
          text: {
            value,
            enumerable: true
          }
        });
      } else {
        items = value;
      }
      return items;
    };
    Mention2.prototype.getItemData = function() {
      var fields = this.fields;
      var dataItem = null;
      dataItem = this.itemData;
      var dataValue;
      var dataText;
      if (!isNullOrUndefined(dataItem)) {
        dataValue = getValue(fields.value, dataItem);
        dataText = getValue(fields.text, dataItem);
      }
      var value = !isNullOrUndefined(dataItem) && !isUndefined(dataValue) ? dataValue : dataItem;
      var text = !isNullOrUndefined(dataItem) && !isUndefined(dataValue) ? dataText : dataItem;
      return {
        value,
        text
      };
    };
    Mention2.prototype.removeSelection = function() {
      if (this.list) {
        var selectedItems = this.list.querySelectorAll("." + dropDownBaseClasses.selected);
        if (selectedItems.length) {
          removeClass(selectedItems, dropDownBaseClasses.selected);
          selectedItems[0].removeAttribute("aria-selected");
        }
      }
    };
    Mention2.prototype.onMouseOver = function(e) {
      var currentLi = closest(e.target, "." + dropDownBaseClasses.li);
      this.setHover(currentLi);
    };
    Mention2.prototype.setHover = function(li) {
      if (this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.hover)) {
        this.removeHover();
        addClass([li], dropDownBaseClasses.hover);
      }
    };
    Mention2.prototype.removeHover = function() {
      if (this.list) {
        var hoveredItem = this.list.querySelectorAll("." + dropDownBaseClasses.hover);
        if (hoveredItem && hoveredItem.length) {
          removeClass(hoveredItem, dropDownBaseClasses.hover);
        }
      }
    };
    Mention2.prototype.isValidLI = function(li) {
      return li && li.hasAttribute("role") && li.getAttribute("role") === "option";
    };
    Mention2.prototype.onMouseLeave = function() {
      this.removeHover();
    };
    Mention2.prototype.search = function(text, positionX, positionY) {
      if (this.isContentEditable(this.inputElement)) {
        this.range = this.getCurrentRange();
      }
      var currentRange = this.getTextRange();
      this.queryString = text;
      var lastWordRange = this.getLastLetter(currentRange);
      if (this.ignoreCase && (text === lastWordRange || text === lastWordRange.toLowerCase()) || !this.ignoreCase && text === lastWordRange) {
        this.resetList(this.dataSource, this.fields);
      } else {
        if (this.isPopupOpen) {
          this.hidePopup();
        }
        return;
      }
      if (isNullOrUndefined(this.list)) {
        this.renderList();
        this.renderPopup();
      } else if (!this.isPopupOpen) {
        this.renderPopup();
      }
      this.popupObj.element.style.left = formatUnit(positionX);
      this.popupObj.element.style.top = formatUnit(positionY);
    };
    Mention2.prototype.disableItem = function(item) {
      if (this.fields.disabled) {
        if (!this.list) {
          this.renderList();
        }
        var itemIndex = -1;
        if (this.liCollections && this.liCollections.length > 0 && this.listData && this.fields.disabled) {
          if (typeof item === "string") {
            itemIndex = this.getIndexByValue(item);
          } else if (typeof item === "object") {
            if (item instanceof HTMLLIElement) {
              for (var index = 0; index < this.liCollections.length; index++) {
                if (this.liCollections[index] === item) {
                  itemIndex = this.getIndexByValue(item.getAttribute("data-value"));
                  break;
                }
              }
            } else {
              var value = JSON.parse(JSON.stringify(item))[this.fields.value];
              for (var index = 0; index < this.listData.length; index++) {
                if (JSON.parse(JSON.stringify(this.listData[index]))[this.fields.value] === value) {
                  itemIndex = this.getIndexByValue(value);
                  break;
                }
              }
            }
          } else {
            itemIndex = item;
          }
          var isValidIndex = itemIndex < this.liCollections.length && itemIndex > -1;
          if (isValidIndex && !JSON.parse(JSON.stringify(this.listData[itemIndex]))[this.fields.disabled]) {
            var li = this.liCollections[itemIndex];
            if (li) {
              this.disableListItem(li);
              var parsedData = JSON.parse(JSON.stringify(this.listData[itemIndex]));
              parsedData[this.fields.disabled] = true;
              this.listData[itemIndex] = parsedData;
              this.dataSource = this.listData;
            }
          }
        }
      }
    };
    Mention2.prototype.destroy = function() {
      this.hidePopup();
      this.unWireEvent();
      if (this.list) {
        this.unWireListEvents();
      }
      if (this.inputElement && !this.inputElement.classList.contains("e-" + this.getModuleName())) {
        return;
      }
      this.previousSelectedLI = null;
      this.item = null;
      this.selectedLI = null;
      this.popupObj = null;
      _super.prototype.destroy.call(this);
    };
    Mention2.prototype.getLocaleName = function() {
      return "mention";
    };
    Mention2.prototype.getNgDirective = function() {
      return "EJS-MENTION";
    };
    Mention2.prototype.getModuleName = function() {
      return "mention";
    };
    __decorate16([Property(null)], Mention2.prototype, "cssClass", void 0);
    __decorate16([Property("@")], Mention2.prototype, "mentionChar", void 0);
    __decorate16([Property(false)], Mention2.prototype, "showMentionChar", void 0);
    __decorate16([Property(false)], Mention2.prototype, "allowSpaces", void 0);
    __decorate16([Property(null)], Mention2.prototype, "suffixText", void 0);
    __decorate16([Property(25)], Mention2.prototype, "suggestionCount", void 0);
    __decorate16([Property(0)], Mention2.prototype, "minLength", void 0);
    __decorate16([Property("None")], Mention2.prototype, "sortOrder", void 0);
    __decorate16([Property(true)], Mention2.prototype, "ignoreCase", void 0);
    __decorate16([Property(true)], Mention2.prototype, "requireLeadingSpace", void 0);
    __decorate16([Property(false)], Mention2.prototype, "highlight", void 0);
    __decorate16([Property()], Mention2.prototype, "locale", void 0);
    __decorate16([Property("auto")], Mention2.prototype, "popupWidth", void 0);
    __decorate16([Property("300px")], Mention2.prototype, "popupHeight", void 0);
    __decorate16([Property(300)], Mention2.prototype, "debounceDelay", void 0);
    __decorate16([Property(null)], Mention2.prototype, "displayTemplate", void 0);
    __decorate16([Property(null)], Mention2.prototype, "itemTemplate", void 0);
    __decorate16([Property("No records found")], Mention2.prototype, "noRecordsTemplate", void 0);
    __decorate16([Property(null)], Mention2.prototype, "spinnerTemplate", void 0);
    __decorate16([Property()], Mention2.prototype, "target", void 0);
    __decorate16([Property([])], Mention2.prototype, "dataSource", void 0);
    __decorate16([Property(null)], Mention2.prototype, "query", void 0);
    __decorate16([Property("Contains")], Mention2.prototype, "filterType", void 0);
    __decorate16([Complex({
      text: null,
      value: null,
      iconCss: null,
      groupBy: null
    }, FieldSettings)], Mention2.prototype, "fields", void 0);
    __decorate16([Event2()], Mention2.prototype, "actionBegin", void 0);
    __decorate16([Event2()], Mention2.prototype, "actionComplete", void 0);
    __decorate16([Event2()], Mention2.prototype, "actionFailure", void 0);
    __decorate16([Event2()], Mention2.prototype, "change", void 0);
    __decorate16([Event2()], Mention2.prototype, "beforeOpen", void 0);
    __decorate16([Event2()], Mention2.prototype, "opened", void 0);
    __decorate16([Event2()], Mention2.prototype, "closed", void 0);
    __decorate16([Event2()], Mention2.prototype, "select", void 0);
    __decorate16([Event2()], Mention2.prototype, "filtering", void 0);
    __decorate16([Event2()], Mention2.prototype, "created", void 0);
    __decorate16([Event2()], Mention2.prototype, "destroyed", void 0);
    Mention2 = __decorate16([NotifyPropertyChanges], Mention2);
    return Mention2;
  }(DropDownBase)
);

// node_modules/@syncfusion/ej2-grids/src/grid/common/excel-filter-base.js
var __extends30 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ExcelFilterBase = (
  /** @class */
  function(_super) {
    __extends30(ExcelFilterBase2, _super);
    function ExcelFilterBase2(parent, customFltrOperators) {
      var _this = _super.call(this, parent) || this;
      _this.childRefs = [];
      _this.eventHandlers = {};
      _this.isDevice = false;
      _this.focusedMenuItem = null;
      _this.customFilterOperators = customFltrOperators;
      _this.isExcel = true;
      return _this;
    }
    ExcelFilterBase2.prototype.getCMenuDS = function(type, operator) {
      var options = {
        number: ["Equal", "NotEqual", "", "LessThan", "LessThanOrEqual", "GreaterThan", "GreaterThanOrEqual", "Between", "", "CustomFilter"],
        string: ["Equal", "NotEqual", "", "StartsWith", "EndsWith", "", "Contains", "NotContains", "", "CustomFilter"]
      };
      options.date = options.number;
      options.datetime = options.number;
      options.dateonly = options.number;
      var model = [];
      for (var i = 0; i < options["" + type].length; i++) {
        if (options["" + type][parseInt(i.toString(), 10)].length) {
          if (operator) {
            model.push({
              text: this.getLocalizedLabel(options["" + type][parseInt(i.toString(), 10)]) + "...",
              iconCss: "e-icons e-icon-check " + (operator === options["" + type][parseInt(i.toString(), 10)].toLowerCase() ? "" : "e-emptyicon")
            });
          } else {
            model.push({
              text: this.getLocalizedLabel(options["" + type][parseInt(i.toString(), 10)]) + "..."
            });
          }
        } else {
          model.push({
            separator: true
          });
        }
      }
      return model;
    };
    ExcelFilterBase2.prototype.destroy = function() {
      if (this.dlg) {
        this.unwireExEvents();
        _super.prototype.closeDialog.call(this);
      }
      if (!this.isDevice && this.menuObj) {
        var li = this.menuObj.element.querySelector("li.e-focused");
        if (!(li && parentsUntil(li, "e-excel-menu"))) {
          this.destroyCMenu();
        }
      }
      if (this.dlgObj && !this.dlgObj.isDestroyed) {
        this.removeDialog();
      }
    };
    ExcelFilterBase2.prototype.createMenu = function(type, isFiltered, isCheckIcon, eleOptions) {
      var options = {
        string: "TextFilter",
        date: "DateFilter",
        dateonly: "DateFilter",
        datetime: "DateTimeFilter",
        number: "NumberFilter"
      };
      this.menu = this.parent.createElement("div", {
        className: "e-contextmenu-wrapper"
      });
      if (this.parent.enableRtl) {
        this.menu.classList.add("e-rtl");
      } else {
        this.menu.classList.remove("e-rtl");
      }
      if (this.parent.cssClass) {
        this.menu.classList.add(this.parent.cssClass);
      }
      var ul = this.parent.createElement("ul");
      var icon = isFiltered ? "e-excl-filter-icon e-filtered" : "e-excl-filter-icon";
      if (this.parent.allowSorting && this.parent.getModuleName() === "grid" && !this.options.isResponsiveFilter) {
        var hdrele = this.parent.getColumnHeaderByUid(eleOptions.uid).getAttribute("aria-sort");
        var colIsSort = this.parent.getColumnByField(eleOptions.field).allowSorting;
        var isAsc = !colIsSort || hdrele === "ascending" ? "e-disabled e-excel-ascending" : "e-excel-ascending";
        var isDesc = !colIsSort || hdrele === "descending" ? "e-disabled e-excel-descending" : "e-excel-descending";
        var ascName = type === "string" ? this.getLocalizedLabel("SortAtoZ") : type === "datetime" || type === "date" ? this.getLocalizedLabel("SortByOldest") : this.getLocalizedLabel("SortSmallestToLargest");
        var descName = type === "string" ? this.getLocalizedLabel("SortZtoA") : type === "datetime" || type === "date" ? this.getLocalizedLabel("SortByNewest") : this.getLocalizedLabel("SortLargestToSmallest");
        ul.appendChild(this.createMenuElem(ascName, isAsc, "e-sortascending"));
        ul.appendChild(this.createMenuElem(descName, isDesc, "e-sortdescending"));
        var separator = this.parent.createElement("li", {
          className: "e-separator e-menu-item e-excel-separator"
        });
        ul.appendChild(separator);
      }
      if (!this.options.isResponsiveFilter) {
        ul.appendChild(this.createMenuElem(this.getLocalizedLabel("ClearFilter"), isFiltered ? "" : "e-disabled", icon));
      }
      if (type !== "boolean") {
        ul.appendChild(this.createMenuElem(this.getLocalizedLabel(options["" + type]), "e-submenu", isCheckIcon && this.ensureTextFilter() ? "e-icon-check" : icon + " e-emptyicon", true));
      }
      this.menu.appendChild(ul);
      this.parent.notify(beforeFltrcMenuOpen, {
        element: this.menu
      });
      this.parent.notify(refreshCustomFilterClearBtn, {
        isFiltered
      });
    };
    ExcelFilterBase2.prototype.createMenuElem = function(val, className, iconName, isSubMenu) {
      var li = this.parent.createElement("li", {
        className: className + " e-menu-item"
      });
      li.innerHTML = val;
      li.tabIndex = li.classList.contains("e-disabled") ? -1 : 0;
      li.insertBefore(this.parent.createElement("span", {
        className: "e-menu-icon e-icons " + iconName,
        attrs: {
          "aria-hidden": "true"
        }
      }), li.firstChild);
      if (isSubMenu) {
        li.appendChild(this.parent.createElement("span", {
          className: "e-icons e-caret"
        }));
      }
      return li;
    };
    ExcelFilterBase2.prototype.wireExEvents = function() {
      if (!Browser.isDevice) {
        EventHandler.add(this.dlg, "mouseover", this.hoverHandler, this);
      }
      EventHandler.add(this.dlg, "click", this.clickExHandler, this);
      EventHandler.add(this.dlg, "keyup", this.keyUp, this);
      EventHandler.add(this.dlg, "keydown", this.keyDown, this);
    };
    ExcelFilterBase2.prototype.unwireExEvents = function() {
      if (!Browser.isDevice) {
        EventHandler.remove(this.dlg, "mouseover", this.hoverHandler);
      }
      EventHandler.remove(this.dlg, "click", this.clickExHandler);
      EventHandler.remove(this.dlg, "keyup", this.keyUp);
      EventHandler.remove(this.dlg, "keydown", this.keyDown);
    };
    ExcelFilterBase2.prototype.clickExHandler = function(e) {
      var options = {
        string: "TextFilter",
        date: "DateFilter",
        datetime: "DateTimeFilter",
        number: "NumberFilter"
      };
      var menuItem = parentsUntil(e.target, "e-menu-item");
      if (menuItem) {
        if (this.getLocalizedLabel("ClearFilter") === menuItem.innerText.trim()) {
          this.clearFilter();
          this.closeDialog();
        } else if ((this.options.isResponsiveFilter || Browser.isDevice) && this.getLocalizedLabel(options[this.options.type]) === menuItem.innerText.trim()) {
          this.hoverHandler(e);
        }
      }
    };
    ExcelFilterBase2.prototype.focusNextOrPrevElement = function(e, focusableElements, focusClassName) {
      var nextIndex = e.key === "ArrowUp" || e.key === "Tab" && e.shiftKey ? focusableElements.indexOf(document.activeElement) - 1 : focusableElements.indexOf(document.activeElement) + 1;
      var nextElement = focusableElements[(nextIndex + focusableElements.length) % focusableElements.length];
      if (nextElement) {
        nextElement.focus();
        var focusClass = nextElement.classList.contains("e-chk-hidden") ? "e-chkfocus" : focusClassName;
        var target = nextElement.classList.contains("e-chk-hidden") ? parentsUntil(nextElement, "e-ftrchk") : parentsUntil(nextElement, "e-menu-item");
        this.excelSetFocus(target, focusClass);
      }
    };
    ExcelFilterBase2.prototype.keyUp = function(e) {
      if (e.key === "Tab" && e.shiftKey || e.key === "Tab") {
        var focusClass = e.target.classList.contains("e-chk-hidden") ? "e-chkfocus" : "e-menufocus";
        var target = e.target.classList.contains("e-menu-item") ? parentsUntil(e.target, "e-menu-item") : parentsUntil(e.target, "e-ftrchk");
        this.excelSetFocus(target, focusClass);
      } else if ((e.key === "ArrowUp" || e.key === "ArrowDown") && !e.altKey) {
        e.preventDefault();
        var focusableElements = Array.from(this.dlg.querySelectorAll('input, button, [tabindex]:not([tabindex="-1"]), .e-menu-item:not(.e-disabled):not(.e-separator)'));
        this.focusNextOrPrevElement(e, focusableElements, "e-menufocus");
      } else if ((e.key === "Enter" || e.code === "ArrowRight") && e.target.classList.contains("e-menu-item")) {
        e.preventDefault();
        e.target.click();
        if (e.target.classList.contains("e-submenu")) {
          this.hoverHandler(e);
          this.menuObj.element.querySelector(".e-menu-item").focus();
          this.excelSetFocus(parentsUntil(this.menuObj.element.querySelector(".e-menu-item"), "e-menu-item"), "e-focused");
          this.focusedMenuItem = this.menuObj.element.querySelector(".e-menu-item");
        }
      }
    };
    ExcelFilterBase2.prototype.keyDown = function(e) {
      if (e.key === "ArrowUp" || e.key === "ArrowDown") {
        e.preventDefault();
      }
    };
    ExcelFilterBase2.prototype.excelSetFocus = function(elem, className) {
      var prevElem = this.cmenu.querySelector("." + className);
      var menuFocusElem = this.menu.querySelector("." + className);
      if (prevElem) {
        prevElem.classList.remove(className);
      }
      if (menuFocusElem && menuFocusElem.classList.contains("e-menufocus")) {
        menuFocusElem.classList.remove(className);
      }
      if (elem) {
        elem.classList.add(className);
      }
    };
    ExcelFilterBase2.prototype.destroyCMenu = function() {
      this.isCMenuOpen = false;
      if (this.menuObj && !this.menuObj.isDestroyed) {
        this.menuObj.destroy();
        EventHandler.remove(this.menuObj.element, "keydown", this.contextKeyDownHandler);
        remove(this.cmenu);
        this.parent.notify(renderResponsiveCmenu, {
          target: null,
          header: "",
          isOpen: false,
          col: this.options.column
        });
      }
    };
    ExcelFilterBase2.prototype.hoverHandler = function(e) {
      if (this.options.isResponsiveFilter && e.type === "mouseover") {
        return;
      }
      var target = e.target.querySelector(".e-contextmenu");
      var li = parentsUntil(e.target, "e-menu-item");
      var focused = this.menu.querySelector(".e-focused");
      var isSubMenu;
      if (focused) {
        focused.classList.remove("e-focused");
      }
      if (li) {
        li.classList.add("e-focused");
        isSubMenu = li.classList.contains("e-submenu");
      }
      if (target) {
        return;
      }
      if (!isSubMenu) {
        var submenu = this.menu.querySelector(".e-submenu");
        if (!isNullOrUndefined(submenu)) {
          submenu.classList.remove("e-selected");
        }
        this.destroyCMenu();
      }
      var selectedMenu = this.ensureTextFilter();
      if (!this.isCMenuOpen && isSubMenu) {
        li.classList.add("e-selected");
        this.isCMenuOpen = true;
        var menuOptions = {
          items: this.getCMenuDS(this.options.type, selectedMenu ? selectedMenu.replace(/\s/g, "") : void 0),
          select: this.selectHandler.bind(this),
          onClose: this.destroyCMenu.bind(this),
          enableRtl: this.parent.enableRtl,
          animationSettings: {
            effect: Browser.isDevice ? "ZoomIn" : "None"
          },
          beforeClose: this.preventClose.bind(this),
          cssClass: this.options.isResponsiveFilter && this.parent.cssClass ? "e-res-contextmenu-wrapper " + this.parent.cssClass : this.options.isResponsiveFilter ? "e-res-contextmenu-wrapper" : this.parent.cssClass ? this.parent.cssClass : ""
        };
        this.parent.element.appendChild(this.cmenu);
        this.menuObj = new ContextMenu(menuOptions, this.cmenu);
        EventHandler.add(this.menuObj.element, "keydown", this.contextKeyDownHandler, this);
        var client = this.menu.querySelector(".e-submenu").getBoundingClientRect();
        var pos = {
          top: 0,
          left: 0
        };
        if (this.options.isResponsiveFilter) {
          var options = {
            string: "TextFilter",
            date: "DateFilter",
            datetime: "DateTimeFilter",
            number: "NumberFilter"
          };
          var content2 = document.querySelector(".e-responsive-dialog > .e-dlg-header-content");
          var height = content2.offsetHeight + 4;
          this.menuObj.element.style.height = "calc(100% - " + height + "px)";
          this.menuObj["open"](height, 0, document.body);
          var header = this.getLocalizedLabel(options[this.options.type]);
          this.parent.notify(renderResponsiveCmenu, {
            target: this.menuObj.element.parentElement,
            header,
            isOpen: true
          });
        } else {
          if (Browser.isDevice) {
            this.isDevice = true;
            var contextRect = this.getContextBounds();
            pos.top = (window.innerHeight - contextRect.height) / 2;
            pos.left = (window.innerWidth - contextRect.width) / 2;
            this.closeDialog();
            this.isDevice = false;
          } else {
            pos.top = Browser.isIE ? window.pageYOffset + client.top : window.scrollY + client.top;
            pos.left = this.getCMenuYPosition(this.dlg);
          }
          this.menuObj["open"](pos.top, pos.left, e.target);
        }
        applyBiggerTheme(this.parent.element, this.menuObj.element.parentElement);
      }
    };
    ExcelFilterBase2.prototype.contextKeyDownHandler = function(e) {
      if (e.key === "Tab" && e.shiftKey || e.key === "Tab") {
        e.preventDefault();
        var focusableElements = Array.from(this.menuObj.element.querySelectorAll('[tabindex]:not([tabindex="-1"]), .e-menu-item:not(.e-disabled):not(.e-separator)'));
        this.focusNextOrPrevElement(e, focusableElements, "e-focused");
      } else if (e.key === "ArrowLeft" || e.key === "Escape") {
        e.preventDefault();
        this.menuObj.close();
        this.focusedMenuItem = null;
        document.querySelector(".e-submenu.e-menu-item").classList.remove("e-selected");
        document.querySelector(".e-submenu.e-menu-item").focus();
      }
    };
    ExcelFilterBase2.prototype.ensureTextFilter = function() {
      var selectedMenu;
      var predicates = this.existingPredicate[this.options.field];
      if (predicates && predicates.length === 2) {
        if (predicates[0].operator === "greaterthanorequal" && predicates[1].operator === "lessthanorequal") {
          selectedMenu = "between";
        } else {
          selectedMenu = "customfilter";
        }
      } else {
        if (predicates && predicates.length === 1) {
          this.optrData = this.customFilterOperators[this.options.type + "Operator"];
          selectedMenu = predicates[0].operator;
        }
      }
      return selectedMenu;
    };
    ExcelFilterBase2.prototype.preventClose = function(args) {
      if (this.options && this.options.isResponsiveFilter && args.event) {
        var target = args.event.target;
        var isFilterBack = target.classList && (target.classList.contains("e-resfilterback") || target.classList.contains("e-res-back-btn") || target.classList.contains("e-menu-item"));
        args.cancel = !isFilterBack;
      } else {
        if (args.event instanceof MouseEvent && args.event.target && args.event.target.classList && args.event.target.classList.contains("e-submenu")) {
          args.cancel = true;
        }
      }
    };
    ExcelFilterBase2.prototype.getContextBounds = function() {
      this.menuObj.element.style.display = "block";
      return this.menuObj.element.getBoundingClientRect();
    };
    ExcelFilterBase2.prototype.getCMenuYPosition = function(target) {
      var contextWidth = this.getContextBounds().width;
      var targetPosition = target.getBoundingClientRect();
      var leftPos = targetPosition.right + contextWidth - this.parent.element.clientWidth;
      var targetBorder = target.offsetWidth - target.clientWidth;
      targetBorder = targetBorder ? targetBorder + 1 : 0;
      return leftPos < 1 ? targetPosition.right + 1 - targetBorder : targetPosition.left - contextWidth - 1 + targetBorder;
    };
    ExcelFilterBase2.prototype.openDialog = function(options) {
      var _this = this;
      this.updateModel(options);
      this.getAndSetChkElem(options);
      this.showDialog(options);
      if (options.cancel) {
        return;
      }
      this.dialogObj.dataBind();
      var filterLength = this.existingPredicate[options.field] && this.existingPredicate[options.field].length || this.options.filteredColumns.filter(function(col) {
        return _this.options.field === col.field;
      }).length;
      this.createMenu(options.type, filterLength > 0, filterLength === 1 || filterLength === 2, options);
      this.dlg.insertBefore(this.menu, this.dlg.firstChild);
      this.dlg.classList.add("e-excelfilter");
      if (this.parent && !isNullOrUndefined(this.parent.getContent) && this.parent.getContent() && this.parent.getContent().firstElementChild.offsetHeight < this.dlg.offsetHeight && !parentsUntil(this.parent.element, "e-gantt-dialog")) {
        resetDialogAppend(this.parent, this.dialogObj);
      }
      if (this.parent.enableRtl) {
        this.dlg.classList.add("e-rtl");
      }
      this.dlg.classList.remove("e-checkboxfilter");
      this.cmenu = this.parent.createElement("ul", {
        className: "e-excel-menu"
      });
      var menuItems = this.dlg.querySelectorAll(".e-menu-item");
      menuItems.forEach(function(menuItem) {
        if (menuItem.scrollWidth > menuItem.clientWidth) {
          menuItem.setAttribute("title", menuItem.textContent);
        }
      });
      if (options.column.showColumnMenu) {
        this.parent.notify(filterDialogCreated, {});
      }
      this.wireExEvents();
    };
    ExcelFilterBase2.prototype.closeDialog = function() {
      this.destroy();
    };
    ExcelFilterBase2.prototype.selectHandler = function(e) {
      if (e.item) {
        this.parent.notify(filterCmenuSelect, {});
        this.menuItem = e.item;
        this.closeDialog();
        this.renderDialogue(e);
      }
    };
    ExcelFilterBase2.prototype.renderDialogue = function(e) {
      var _this = this;
      var target = e ? e.element : void 0;
      var column = this.options.field;
      var isComplex = !isNullOrUndefined(column) && isComplexField(column);
      var complexFieldName = !isNullOrUndefined(column) && getComplexFieldID(column);
      var mainDiv = this.parent.createElement("div", {
        className: "e-xlfl-maindiv",
        id: isComplex ? complexFieldName + "-xlflmenu" : column + "-xlflmenu"
      });
      this.dlgDiv = this.parent.createElement("div", {
        className: "e-xlflmenu",
        id: isComplex ? complexFieldName + "-xlfldlg" : column + "-xlfldlg"
      });
      if (this.options.isResponsiveFilter) {
        var responsiveCnt = document.querySelector(".e-resfilter > .e-dlg-content > .e-xl-customfilterdiv");
        responsiveCnt.appendChild(this.dlgDiv);
      } else {
        this.parent.element.appendChild(this.dlgDiv);
      }
      this.dlgObj = new Dialog({
        header: this.getLocalizedLabel("CustomFilter"),
        isModal: true,
        overlayClick: this.removeDialog.bind(this),
        showCloseIcon: true,
        locale: this.parent.locale,
        closeOnEscape: true,
        target: document.body,
        // target: this.parent.element,
        visible: false,
        enableRtl: this.parent.enableRtl,
        open: function() {
          var rows = [].slice.call(_this.dlgObj.element.querySelectorAll("table.e-xlfl-table tr.e-xlfl-fields"));
          for (var i = 0; i < rows.length; i++) {
            var valInput = rows[i].children[1].querySelector(".e-control");
            var dropDownList = rows[i].querySelector(".e-dropdownlist.e-control")["ej2_instances"][0];
            if (dropDownList.value === "isempty" || dropDownList.value === "isnotempty" || dropDownList.value === "isnull" || dropDownList.value === "isnotnull") {
              valInput["ej2_instances"][0]["enabled"] = false;
            } else if (valInput && !isNullOrUndefined(valInput.getAttribute("disabled"))) {
              valInput["ej2_instances"][0]["enabled"] = true;
            }
          }
          var row2 = _this.dlgObj.element.querySelector("table.e-xlfl-table>tr");
          if (_this.options.column.filterTemplate) {
            var templateField_1 = isComplexField(_this.options.column.field) ? getComplexFieldID(_this.options.column.field) : _this.options.column.field;
            var isReactCompiler = _this.parent.isReact && typeof _this.options.column.filterTemplate !== "string" && !(_this.options.column.filterTemplate.prototype && _this.options.column.filterTemplate.prototype.CSPTemplate);
            var isReactChild = _this.parent.parentDetails && _this.parent.parentDetails.parentInstObj && // eslint-disable-next-line @typescript-eslint/no-explicit-any
            _this.parent.parentDetails.parentInstObj.isReact;
            if (isReactCompiler || isReactChild) {
              _this.parent.renderTemplates(function() {
                row2.querySelector("#" + templateField_1 + "-xlfl-frstvalue").focus();
              });
            } else {
              row2.querySelector("#" + templateField_1 + "-xlfl-frstvalue").focus();
            }
          } else {
          }
        },
        close: this.removeDialog.bind(this),
        created: this.createdDialog.bind(this, target, column),
        buttons: [{
          click: this.filterBtnClick.bind(this, column),
          buttonModel: {
            content: this.getLocalizedLabel("OKButton"),
            isPrimary: true,
            cssClass: this.parent.cssClass ? "e-xlfl-okbtn " + this.parent.cssClass : "e-xlfl-okbtn"
          }
        }, {
          click: this.removeDialog.bind(this),
          buttonModel: {
            content: this.getLocalizedLabel("CancelButton"),
            cssClass: this.parent.cssClass ? "e-xlfl-cancelbtn " + this.parent.cssClass : "e-xlfl-cancelbtn"
          }
        }],
        content: mainDiv,
        width: 430,
        animationSettings: {
          effect: "None"
        },
        cssClass: this.parent.cssClass ? this.parent.cssClass : ""
      });
      var isStringTemplate = "isStringTemplate";
      this.dlgObj["" + isStringTemplate] = true;
      this.renderResponsiveDialog();
      this.dlgDiv.setAttribute("aria-label", this.getLocalizedLabel("CustomFilterDialogARIA"));
      this.childRefs.unshift(this.dlgObj);
      this.dlgObj.appendTo(this.dlgDiv);
    };
    ExcelFilterBase2.prototype.renderResponsiveDialog = function() {
      if (this.options.isResponsiveFilter) {
        var rowResponsiveDlg = document.querySelector(".e-row-responsive-filter");
        if (rowResponsiveDlg) {
          rowResponsiveDlg.classList.remove("e-row-responsive-filter");
        }
        this.dlgObj.buttons = [{}];
        this.dlgObj.header = void 0;
        this.dlgObj.position = {
          X: "",
          Y: ""
        };
        this.dlgObj.target = document.querySelector(".e-resfilter > .e-dlg-content > .e-xl-customfilterdiv");
        this.dlgObj.width = "100%";
        this.dlgObj.isModal = false;
        this.dlgObj.showCloseIcon = false;
      }
    };
    ExcelFilterBase2.prototype.removeDialog = function() {
      this.parent.notify(customFilterClose, {});
      if ((this.parent.isReact || this.parent.isVue) && this.parent.destroyTemplate !== void 0) {
        clearReactVueTemplates(this.parent, ["filterTemplate"]);
      }
      this.removeObjects(this.childRefs);
      remove(this.dlgDiv);
      this.parent.notify(filterDialogClose, {});
    };
    ExcelFilterBase2.prototype.createdDialog = function(target, column) {
      this.renderCustomFilter(target, column);
      this.dlgObj.element.style.left = "0px";
      if (!this.options.isResponsiveFilter) {
        this.dlgObj.element.style.top = "0px";
      } else {
        var content2 = document.querySelector(".e-responsive-dialog > .e-dlg-header-content");
        var height = content2.offsetHeight + 4;
        this.dlgObj.element.style.top = height + "px";
      }
      if (!this.options.isResponsiveFilter && Browser.isDevice && window.innerWidth < 440) {
        this.dlgObj.element.style.width = "90%";
      }
      this.parent.notify(beforeCustomFilterOpen, {
        column,
        dialog: this.dialogObj
      });
      this.dlgObj.show();
      applyBiggerTheme(this.parent.element, this.dlgObj.element.parentElement);
    };
    ExcelFilterBase2.prototype.renderCustomFilter = function(target, column) {
      var dlgConetntEle = this.dlgObj.element.querySelector(".e-xlfl-maindiv");
      var dlgFields = this.parent.createElement("div", {
        innerHTML: this.getLocalizedLabel("ShowRowsWhere"),
        className: "e-xlfl-dlgfields"
      });
      dlgConetntEle.appendChild(dlgFields);
      var fieldSet = this.parent.createElement("div", {
        innerHTML: this.options.displayName,
        className: "e-xlfl-fieldset"
      });
      dlgConetntEle.appendChild(fieldSet);
      this.renderFilterUI(column, dlgConetntEle);
    };
    ExcelFilterBase2.prototype.filterBtnClick = function(col) {
      var isComplex = !isNullOrUndefined(col) && isComplexField(col);
      var complexFieldName = !isNullOrUndefined(col) && getComplexFieldID(col);
      var colValue = isComplex ? complexFieldName : col;
      var fValue = this.dlgDiv.querySelector("#" + colValue + "-xlfl-frstvalue").ej2_instances[0];
      var fOperator = this.dlgDiv.querySelector("#" + colValue + "-xlfl-frstoptr").ej2_instances[0];
      var sValue = this.dlgDiv.querySelector("#" + colValue + "-xlfl-secndvalue").ej2_instances[0];
      var sOperator = this.dlgDiv.querySelector("#" + colValue + "-xlfl-secndoptr").ej2_instances[0];
      var checkBoxValue;
      if (this.options.type === "string") {
        var checkBox = this.dlgDiv.querySelector("#" + colValue + "-xlflmtcase").ej2_instances[0];
        checkBoxValue = checkBox.checked;
      }
      var predicateSelector = this.dlgDiv.querySelector("#" + colValue + "e-xlfl-frstpredicate").ej2_instances[0];
      var predicate = predicateSelector.checked ? "and" : "or";
      this.filterByColumn(this.options.field, fOperator.value, fValue.value, predicate, checkBoxValue, this.options.ignoreAccent, sOperator.value, sValue.value);
      this.removeDialog();
    };
    ExcelFilterBase2.prototype.filterByColumn = function(fieldName, firstOperator, firstValue, predicate, matchCase, ignoreAccent, secondOperator, secondValue) {
      var col = this.parent.getColumnByField ? this.parent.getColumnByField(fieldName) : this.options.column;
      var field = this.isForeignColumn(col) ? col.foreignKeyValue : fieldName;
      var fColl = [];
      var mPredicate;
      var arg = {
        instance: this,
        handler: this.filterByColumn,
        arg1: fieldName,
        arg2: firstOperator,
        arg3: firstValue,
        arg4: predicate,
        arg5: matchCase,
        arg6: ignoreAccent,
        arg7: secondOperator,
        arg8: secondValue,
        cancel: false
      };
      this.parent.notify(fltrPrevent, arg);
      if (arg.cancel) {
        return;
      }
      fColl.push({
        field,
        predicate,
        matchCase,
        ignoreAccent,
        operator: firstOperator,
        value: arg.arg3,
        type: this.options.type
      });
      mPredicate = new Predicate(field, firstOperator.toLowerCase(), arg.arg3, !matchCase, ignoreAccent);
      if (!isNullOrUndefined(secondOperator)) {
        fColl.push({
          field,
          predicate,
          matchCase,
          ignoreAccent,
          operator: secondOperator,
          value: arg.arg8,
          type: this.options.type
        });
        mPredicate = mPredicate["" + predicate](field, secondOperator.toLowerCase(), secondValue, !matchCase, ignoreAccent);
      }
      var args = {
        action: "filtering",
        filterCollection: fColl,
        field: this.options.field,
        ejpredicate: mPredicate,
        actualPredicate: fColl
      };
      if (this.isForeignColumn(col)) {
        this.foreignKeyFilter(args, fColl, mPredicate);
      } else {
        this.options.handler(args);
      }
    };
    ExcelFilterBase2.prototype.renderOperatorUI = function(column, table2, elementID, predicates, isFirst) {
      var fieldElement = this.parent.createElement("tr", {
        className: "e-xlfl-fields",
        attrs: {
          role: "row"
        }
      });
      table2.appendChild(fieldElement);
      var xlfloptr = this.parent.createElement("td", {
        className: "e-xlfl-optr"
      });
      fieldElement.appendChild(xlfloptr);
      var optrDiv = this.parent.createElement("div", {
        className: "e-xlfl-optrdiv"
      });
      var isComplex = !isNullOrUndefined(column) && isComplexField(column);
      var complexFieldName = !isNullOrUndefined(column) && getComplexFieldID(column);
      var optrInput = this.parent.createElement("input", {
        id: isComplex ? complexFieldName + elementID : column + elementID
      });
      optrDiv.appendChild(optrInput);
      xlfloptr.appendChild(optrDiv);
      var optr = this.options.type + "Operator";
      var dropDatasource = this.customFilterOperators["" + optr];
      this.optrData = dropDatasource;
      var selectedValue = this.dropSelectedVal(this.options.column, predicates, isFirst);
      var menuText = "";
      if (this.menuItem) {
        menuText = this.menuItem.text.slice(0, -3);
        if (menuText !== this.getLocalizedLabel("CustomFilter")) {
          selectedValue = isFirst ? menuText : void 0;
        }
        if (menuText === this.getLocalizedLabel("Between")) {
          selectedValue = this.getLocalizedLabel(isFirst ? "GreaterThanOrEqual" : "LessThanOrEqual");
        }
      }
      var col = this.options.column;
      var dropOptr = new DropDownList(extend2({
        dataSource: dropDatasource,
        fields: {
          text: "text",
          value: "value"
        },
        text: selectedValue,
        enableRtl: this.parent.enableRtl,
        cssClass: this.parent.cssClass ? this.parent.cssClass : null
      }, col.filter.params));
      this.childRefs.unshift(dropOptr);
      var evt = {
        "open": this.dropDownOpen.bind(this),
        "change": this.dropDownValueChange.bind(this)
      };
      registerEventHandlers(optrInput.id, [open, change], evt, this);
      dropOptr.addEventListener(open, this.eventHandlers[optrInput.id][open]);
      dropOptr.addEventListener(change, this.eventHandlers[optrInput.id][change]);
      dropOptr.appendTo(optrInput);
      var operator = this.getSelectedValue(selectedValue);
      return {
        fieldElement,
        operator
      };
    };
    ExcelFilterBase2.prototype.removeHandlersFromComponent = function(component) {
      if (component.element.classList.contains("e-dropdownlist")) {
        removeEventHandlers(component, [open, change], this);
      } else if (component.element.classList.contains("e-autocomplete")) {
        removeEventHandlers(component, [actionComplete, focus], this);
      }
    };
    ExcelFilterBase2.prototype.dropDownOpen = function(args) {
      args.popup.element.style.zIndex = (this.dialogObj.zIndex + 1).toString();
    };
    ExcelFilterBase2.prototype.dropDownValueChange = function(args) {
      if (args.element.id.includes("-xlfl-frstoptr")) {
        this.firstOperator = args.value.toString();
      } else {
        this.secondOperator = args.value.toString();
      }
      var valInput = args.element.closest(".e-xlfl-fields").children[1].querySelector(".e-control");
      var dropDownList = args.element["ej2_instances"][0];
      if (dropDownList.value === "isempty" || dropDownList.value === "isnotempty" || dropDownList.value === "isnull" || dropDownList.value === "isnotnull") {
        valInput["ej2_instances"][0]["enabled"] = false;
      } else if (!isNullOrUndefined(valInput.getAttribute("disabled"))) {
        valInput["ej2_instances"][0]["enabled"] = true;
      }
    };
    ExcelFilterBase2.prototype.getFilterUIInfo = function() {
      return {
        firstOperator: this.firstOperator,
        secondOperator: this.secondOperator,
        field: this.options.field
      };
    };
    ExcelFilterBase2.prototype.getSelectedValue = function(text) {
      var selectedField = new DataManager(this.optrData).executeLocal(new Query().where("text", "equal", text));
      return !isNullOrUndefined(selectedField[0]) ? selectedField[0].value : "";
    };
    ExcelFilterBase2.prototype.dropSelectedVal = function(col, predicates, isFirst) {
      var operator;
      if (predicates && predicates.length > 0) {
        operator = predicates.length === 2 ? isFirst ? predicates[0].operator : predicates[1].operator : isFirst ? predicates[0].operator : void 0;
      } else if (isFirst && col.type === "string" && !col.filter.operator) {
        operator = "startswith";
      } else {
        operator = isFirst ? col.filter.operator || "equal" : void 0;
      }
      return this.getSelectedText(operator);
    };
    ExcelFilterBase2.prototype.getSelectedText = function(operator) {
      var selectedField = new DataManager(this.optrData).executeLocal(new Query().where("value", "equal", operator));
      return !isNullOrUndefined(selectedField[0]) ? selectedField[0].text : "";
    };
    ExcelFilterBase2.prototype.renderFilterUI = function(column, dlgConetntEle) {
      var predicates = this.existingPredicate["" + column];
      var table2 = this.parent.createElement("table", {
        className: "e-xlfl-table",
        attrs: {
          role: "grid"
        }
      });
      dlgConetntEle.appendChild(table2);
      var colGroup2 = this.parent.createElement(colGroup);
      colGroup2.innerHTML = '<col style="width: 50%"></col><col style="width: 50%"></col>';
      table2.appendChild(colGroup2);
      var optr = this.renderOperatorUI(column, table2, "-xlfl-frstoptr", predicates, true);
      this.firstOperator = optr.operator;
      this.renderFlValueUI(column, optr, "-xlfl-frstvalue", predicates, true);
      var predicate = this.parent.createElement("tr", {
        className: "e-xlfl-predicate",
        attrs: {
          role: "row"
        }
      });
      table2.appendChild(predicate);
      this.renderRadioButton(column, predicate, predicates);
      optr = this.renderOperatorUI(column, table2, "-xlfl-secndoptr", predicates, false);
      this.secondOperator = optr.operator;
      this.renderFlValueUI(column, optr, "-xlfl-secndvalue", predicates, false);
    };
    ExcelFilterBase2.prototype.renderRadioButton = function(column, tr, predicates) {
      var td = this.parent.createElement("td", {
        className: "e-xlfl-radio",
        attrs: {
          "colSpan": "2"
        }
      });
      tr.appendChild(td);
      var radioDiv = this.parent.createElement("div", {
        className: "e-xlfl-radiodiv"
      });
      radioDiv.style.display = "inline-block";
      var isComplex = !isNullOrUndefined(column) && isComplexField(column);
      var complexFieldName = !isNullOrUndefined(column) && getComplexFieldID(column);
      var frstpredicate = this.parent.createElement("input", {
        id: isComplex ? complexFieldName + "e-xlfl-frstpredicate" : column + "e-xlfl-frstpredicate",
        attrs: {
          "type": "radio"
        }
      });
      var secndpredicate = this.parent.createElement("input", {
        id: isComplex ? complexFieldName + "e-xlfl-secndpredicate" : column + "e-xlfl-secndpredicate",
        attrs: {
          "type": "radio"
        }
      });
      radioDiv.appendChild(frstpredicate);
      radioDiv.appendChild(secndpredicate);
      td.appendChild(radioDiv);
      if (this.options.type === "string") {
        this.renderMatchCase(column, tr, td, "-xlflmtcase", predicates);
      }
      var andRadio = new RadioButton({
        label: this.getLocalizedLabel("AND"),
        name: "default",
        checked: true,
        enableRtl: this.parent.enableRtl,
        cssClass: this.parent.cssClass ? this.parent.cssClass : ""
      });
      this.childRefs.unshift(andRadio);
      var orRadio = new RadioButton({
        label: this.getLocalizedLabel("OR"),
        name: "default",
        enableRtl: this.parent.enableRtl,
        cssClass: this.parent.cssClass ? this.parent.cssClass : ""
      });
      this.childRefs.unshift(orRadio);
      var flValue = predicates && predicates.length === 2 ? predicates[1].predicate : "and";
      if (flValue === "and") {
        andRadio.checked = true;
        orRadio.checked = false;
      } else {
        orRadio.checked = true;
        andRadio.checked = false;
      }
      andRadio.appendTo(frstpredicate);
      orRadio.appendTo(secndpredicate);
      andRadio.element.nextElementSibling.classList.add("e-xlfl-radio-and");
      orRadio.element.nextElementSibling.classList.add("e-xlfl-radio-or");
    };
    ExcelFilterBase2.prototype.removeObjects = function(elements) {
      for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
        var obj = elements_1[_i];
        if (obj && !obj.isDestroyed) {
          this.removeHandlersFromComponent(obj);
          obj.destroy();
        }
      }
    };
    ExcelFilterBase2.prototype.renderFlValueUI = function(column, optr, elementId, predicates, isFirst) {
      var value = this.parent.createElement("td", {
        className: "e-xlfl-value"
      });
      optr.fieldElement.appendChild(value);
      var isComplex = !isNullOrUndefined(column) && isComplexField(column);
      var complexFieldName = !isNullOrUndefined(column) && getComplexFieldID(column);
      var valueDiv = this.parent.createElement("div", {
        className: "e-xlfl-valuediv"
      });
      var isFilteredCol = this.options.filteredColumns.some(function(col) {
        return column === col.field;
      });
      var fltrPredicates = this.options.filteredColumns.filter(function(col) {
        return col.field === column;
      });
      if (this.options.column.filterTemplate) {
        var data = {};
        var columnObj = this.options.column;
        if (isFilteredCol && elementId) {
          data = this.getExcelFilterData(elementId, data, columnObj, predicates, fltrPredicates);
        }
        var isReactCompiler = this.parent.isReact && typeof this.options.column.filterTemplate !== "string" && !(this.options.column.filterTemplate.prototype && this.options.column.filterTemplate.prototype.CSPTemplate);
        var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.parent.parentDetails.parentInstObj.isReact;
        var tempID = this.parent.element.id + columnObj.uid + "filterTemplate";
        if (isReactCompiler || isReactChild) {
          this.options.column.getFilterTemplate()(data, this.parent, "filterTemplate", tempID, null, null, valueDiv);
        } else {
          var element = this.options.column.getFilterTemplate()(data, this.parent, "filterTemplate", tempID, null, null, null, this.parent.root);
          appendChildren(valueDiv, element);
        }
        if (isReactCompiler || isReactChild) {
          this.parent.renderTemplates(function() {
            valueDiv.querySelector("input").id = isComplex ? complexFieldName + elementId : column + elementId;
            value.appendChild(valueDiv);
          });
        } else {
          (this.parent.isAngular ? valueDiv.children[0] : valueDiv.querySelector("input")).id = isComplex ? complexFieldName + elementId : column + elementId;
          value.appendChild(valueDiv);
        }
      } else {
        var valueInput = this.parent.createElement("input", {
          id: isComplex ? complexFieldName + elementId : column + elementId
        });
        valueDiv.appendChild(valueInput);
        value.appendChild(valueDiv);
        var flValue = void 0;
        var predicate = void 0;
        if (predicates && predicates.length > 0) {
          predicate = predicates.length === 2 ? isFirst ? predicates[0] : predicates[1] : isFirst ? predicates[0] : void 0;
          flValue = predicate && predicate.operator === optr.operator ? predicate.value : void 0;
          if (isNullOrUndefined(flValue)) {
            flValue = void 0;
          }
        }
        var types = {
          "string": this.renderAutoComplete.bind(this),
          "number": this.renderNumericTextBox.bind(this),
          "date": this.renderDate.bind(this),
          "dateonly": this.renderDate.bind(this),
          "datetime": this.renderDateTime.bind(this)
        };
        types[this.options.type](this.options, column, valueInput, flValue, this.parent.enableRtl);
      }
    };
    ExcelFilterBase2.prototype.getExcelFilterData = function(elementId, data, columnObj, predicates, fltrPredicates) {
      var predIndex = elementId === "-xlfl-frstvalue" ? 0 : 1;
      if (elementId === "-xlfl-frstvalue" || fltrPredicates.length > 1) {
        data = {
          column: predicates instanceof Array ? predicates[parseInt(predIndex.toString(), 10)] : predicates
        };
        var indx = this.options.column.columnData && fltrPredicates.length > 1 ? this.options.column.columnData.length === 1 ? 0 : 1 : predIndex;
        data[this.options.field] = columnObj.foreignKeyValue ? this.options.column.columnData[parseInt(indx.toString(), 10)][columnObj.foreignKeyValue] : fltrPredicates[parseInt(indx.toString(), 10)].value;
        if (this.options.foreignKeyValue) {
          data[this.options.foreignKeyValue] = this.options.column.columnData[parseInt(indx.toString(), 10)][columnObj.foreignKeyValue];
        }
      }
      return data;
    };
    ExcelFilterBase2.prototype.renderMatchCase = function(column, tr, matchCase, elementId, predicates) {
      var matchCaseDiv = this.parent.createElement("div", {
        className: "e-xlfl-matchcasediv"
      });
      matchCaseDiv.style.display = "inline-block";
      var isComplex = !isNullOrUndefined(column) && isComplexField(column);
      var complexFieldName = !isNullOrUndefined(column) && getComplexFieldID(column);
      var matchCaseInput = this.parent.createElement("input", {
        id: isComplex ? complexFieldName + elementId : column + elementId,
        attrs: {
          "type": "checkbox"
        }
      });
      matchCaseDiv.appendChild(matchCaseInput);
      matchCase.appendChild(matchCaseDiv);
      var flValue = predicates && predicates.length > 0 ? predicates && predicates.length === 2 ? predicates[1].matchCase : predicates[0].matchCase : false;
      var checkbox = new CheckBox({
        label: this.getLocalizedLabel("MatchCase"),
        enableRtl: this.parent.enableRtl,
        checked: flValue,
        cssClass: this.parent.cssClass ? this.parent.cssClass : ""
      });
      this.childRefs.unshift(checkbox);
      checkbox.appendTo(matchCaseInput);
    };
    ExcelFilterBase2.prototype.renderDate = function(options, column, inputValue, fValue, isRtl) {
      var format = getCustomDateFormat(options.format, options.type) || options.format;
      var datePicker = new DatePicker(extend2({
        format,
        cssClass: this.parent.cssClass ? "e-popup-flmenu " + this.parent.cssClass : "e-popup-flmenu",
        placeholder: this.getLocalizedLabel("CustomFilterDatePlaceHolder"),
        width: "100%",
        enableRtl: isRtl,
        value: new Date(fValue),
        locale: this.parent.locale
      }, options.column.filter.params));
      this.childRefs.unshift(datePicker);
      datePicker.appendTo(inputValue);
    };
    ExcelFilterBase2.prototype.renderDateTime = function(options, column, inputValue, fValue, isRtl) {
      var format = getCustomDateFormat(options.format, options.type);
      var dateTimePicker = new DateTimePicker(extend2({
        format,
        cssClass: this.parent.cssClass ? "e-popup-flmenu " + this.parent.cssClass : "e-popup-flmenu",
        placeholder: this.getLocalizedLabel("CustomFilterDatePlaceHolder"),
        width: "100%",
        enableRtl: isRtl,
        value: new Date(fValue),
        locale: this.parent.locale
      }, options.column.filter.params));
      this.childRefs.unshift(dateTimePicker);
      dateTimePicker.appendTo(inputValue);
    };
    ExcelFilterBase2.prototype.completeAction = function(e) {
      e.result = distinctStringValues(e.result);
    };
    ExcelFilterBase2.prototype.renderNumericTextBox = function(options, column, inputValue, fValue, isRtl) {
      var numericTextBox = new NumericTextBox(extend2({
        format: options.format,
        placeholder: this.getLocalizedLabel("CustomFilterPlaceHolder"),
        enableRtl: isRtl,
        value: fValue,
        locale: this.parent.locale,
        cssClass: this.parent.cssClass ? this.parent.cssClass : null
      }, options.column.filter.params));
      this.childRefs.unshift(numericTextBox);
      numericTextBox.appendTo(inputValue);
    };
    ExcelFilterBase2.prototype.renderAutoComplete = function(options, column, inputValue, fValue, isRtl) {
      var colObj = this.options.column;
      var isForeignColumn = this.isForeignColumn(colObj);
      var dataSource = isForeignColumn ? colObj.dataSource : options.dataSource;
      var fields = {
        value: isForeignColumn ? colObj.foreignKeyValue : column
      };
      var actObj = new AutoComplete(extend2({
        dataSource: dataSource instanceof DataManager ? dataSource : new DataManager(dataSource),
        fields,
        query: this.getQuery(),
        sortOrder: "Ascending",
        locale: this.parent.locale,
        cssClass: this.parent.cssClass ? "e-popup-flmenu " + this.parent.cssClass : "e-popup-flmenu",
        autofill: true,
        placeholder: this.getLocalizedLabel("CustomFilterPlaceHolder"),
        enableRtl: isRtl,
        text: fValue
      }, colObj.filter.params));
      if (dataSource && "result" in dataSource) {
        var defObj = eventPromise({
          requestType: "stringfilterrequest"
        }, this.getQuery());
        this.parent.trigger(dataStateChange, defObj.state);
        var def = defObj.deffered;
        def.promise.then(function(e) {
          actObj.dataSource = new DataManager(e);
        });
      }
      this.childRefs.unshift(actObj);
      var evt = {
        "actionComplete": this.acActionComplete(actObj, column),
        "focus": this.acFocus(actObj, column, options, inputValue)
      };
      registerEventHandlers(inputValue.id, [actionComplete, focus], evt, this);
      actObj.addEventListener(focus, this.eventHandlers[inputValue.id][focus]);
      actObj.addEventListener(actionComplete, this.eventHandlers[inputValue.id][actionComplete]);
      actObj.appendTo(inputValue);
    };
    ExcelFilterBase2.prototype.acActionComplete = function(actObj, column) {
      return function(e) {
        var isComplex = !isNullOrUndefined(column) && isComplexField(column);
        e.result = e.result.filter(function(obj, index, arr) {
          return arr.map(function(mapObject) {
            return isComplex ? performComplexDataOperation(actObj.fields.value, mapObject) : mapObject[actObj.fields.value];
          }).indexOf(isComplex ? performComplexDataOperation(actObj.fields.value, obj) : obj[actObj.fields.value]) === index;
        });
      };
    };
    ExcelFilterBase2.prototype.acFocus = function(actObj, column, options, inputValue) {
      var _this = this;
      return function() {
        var isComplex = !isNullOrUndefined(column) && isComplexField(column);
        var complexFieldName = !isNullOrUndefined(column) && getComplexFieldID(column);
        var columnvalue = isComplex ? complexFieldName : column;
        actObj.filterType = _this.dlgDiv.querySelector("#" + columnvalue + (inputValue.id === columnvalue + "-xlfl-frstvalue" ? "-xlfl-frstoptr" : "-xlfl-secndoptr")).ej2_instances[0].value;
        actObj.ignoreCase = options.type === "string" ? !_this.dlgDiv.querySelector("#" + columnvalue + "-xlflmtcase").ej2_instances[0].checked : true;
        actObj.filterType = !isNullOrUndefined(actObj.filterType) ? actObj.filterType : "equal";
      };
    };
    return ExcelFilterBase2;
  }(CheckBoxFilterBase)
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/sort.js
var Sort = (
  /** @class */
  function() {
    function Sort2(parent, sortSettings, sortedColumns, locator) {
      this.contentRefresh = true;
      this.isModelChanged = true;
      this.aria = new AriaService();
      this.currentTarget = null;
      this.parent = parent;
      this.sortSettings = sortSettings;
      this.sortedColumns = sortedColumns;
      this.serviceLocator = locator;
      this.focus = locator.getService("focus");
      this.addEventListener();
      this.setFullScreenDialog();
    }
    Sort2.prototype.updateModel = function() {
      var sortedColumn = {
        field: this.columnName,
        direction: this.direction
      };
      var index;
      var gCols = this.parent.groupSettings.columns;
      var flag = false;
      if (!this.isMultiSort) {
        if (!gCols.length) {
          this.sortSettings.columns = [sortedColumn];
        } else {
          var sortedCols = [];
          for (var i = 0, len = gCols.length; i < len; i++) {
            index = this.getSortedColsIndexByField(gCols[parseInt(i.toString(), 10)], sortedCols);
            if (this.columnName === gCols[parseInt(i.toString(), 10)]) {
              flag = true;
              sortedCols.push(sortedColumn);
            } else {
              var sCol = this.getSortColumnFromField(gCols[parseInt(i.toString(), 10)]);
              sortedCols.push({
                field: sCol.field,
                direction: sCol.direction,
                isFromGroup: sCol.isFromGroup
              });
            }
          }
          if (!flag) {
            sortedCols.push(sortedColumn);
          }
          this.sortSettings.columns = sortedCols;
        }
      } else {
        index = this.getSortedColsIndexByField(this.columnName);
        if (index > -1) {
          this.sortSettings.columns.splice(index, 1);
        }
        this.sortSettings.columns.push(sortedColumn);
        this.sortSettings.columns = this.sortSettings.columns;
      }
      this.parent.dataBind();
      this.lastSortedCol = this.columnName;
    };
    Sort2.prototype.onActionComplete = function(e) {
      var args = !this.isRemove ? {
        columnName: this.columnName,
        direction: this.direction,
        requestType: "sorting",
        type: actionComplete
      } : {
        requestType: "sorting",
        type: actionComplete
      };
      this.isRemove = false;
      this.parent.trigger(actionComplete, extend(e, args));
    };
    Sort2.prototype.sortColumn = function(columnName, direction, isMultiSort) {
      var gObj = this.parent;
      if (this.parent.getColumnByField(columnName).allowSorting === false || this.parent.isContextMenuOpen()) {
        this.parent.log("action_disabled_column", {
          moduleName: this.getModuleName(),
          columnName
        });
        return;
      }
      if (!gObj.allowMultiSorting) {
        isMultiSort = gObj.allowMultiSorting;
      }
      if (this.isActionPrevent()) {
        gObj.notify(preventBatch, {
          instance: this,
          handler: this.sortColumn,
          arg1: columnName,
          arg2: direction,
          arg3: isMultiSort
        });
        return;
      }
      this.backupSettings();
      this.columnName = columnName;
      this.direction = direction;
      this.isMultiSort = isMultiSort;
      this.removeSortIcons();
      this.updateSortedCols(columnName, isMultiSort);
      this.updateModel();
    };
    Sort2.prototype.setFullScreenDialog = function() {
      if (this.serviceLocator) {
        this.serviceLocator.registerAdaptiveService(this, this.parent.enableAdaptiveUI, ResponsiveDialogAction.isSort);
      }
    };
    Sort2.prototype.backupSettings = function() {
      this.lastSortedCols = iterateExtend(this.sortSettings.columns);
      this.lastCols = this.sortedColumns;
    };
    Sort2.prototype.restoreSettings = function() {
      this.isModelChanged = false;
      this.isMultiSort = true;
      this.parent.setProperties({
        sortSettings: {
          columns: this.lastSortedCols
        }
      }, true);
      this.sortedColumns = this.lastCols;
      this.isModelChanged = true;
    };
    Sort2.prototype.updateSortedCols = function(columnName, isMultiSort) {
      if (!isMultiSort) {
        if (this.parent.allowGrouping) {
          for (var i = 0, len = this.sortedColumns.length; i < len; i++) {
            if (this.parent.groupSettings.columns.indexOf(this.sortedColumns[parseInt(i.toString(), 10)]) < 0) {
              this.sortedColumns.splice(i, 1);
              len--;
              i--;
            }
          }
        } else {
          this.sortedColumns.splice(0, this.sortedColumns.length);
        }
      }
      if (this.sortedColumns.indexOf(columnName) < 0) {
        this.sortedColumns.push(columnName);
      }
    };
    Sort2.prototype.onPropertyChanged = function(e) {
      if (e.module !== this.getModuleName()) {
        return;
      }
      if (this.contentRefresh) {
        var args = this.sortSettings.columns.length ? {
          columnName: this.columnName,
          direction: this.direction,
          requestType: "sorting",
          type: actionBegin,
          target: this.currentTarget,
          cancel: false
        } : {
          requestType: "sorting",
          type: actionBegin,
          cancel: false,
          target: this.currentTarget
        };
        this.parent.notify(modelChanged, args);
      }
      this.refreshSortSettings();
      this.removeSortIcons();
      this.addSortIcons();
    };
    Sort2.prototype.refreshSortSettings = function() {
      this.sortedColumns.length = 0;
      var sortColumns = this.sortSettings.columns;
      for (var i = 0; i < sortColumns.length; i++) {
        if (!sortColumns[parseInt(i.toString(), 10)].isFromGroup) {
          this.sortedColumns.push(sortColumns[parseInt(i.toString(), 10)].field);
        }
      }
    };
    Sort2.prototype.clearSorting = function() {
      var cols = getActualPropFromColl(this.sortSettings.columns);
      if (this.isActionPrevent()) {
        this.parent.notify(preventBatch, {
          instance: this,
          handler: this.clearSorting
        });
        return;
      }
      for (var i = 0, len = cols.length; i < len; i++) {
        this.removeSortColumn(cols[parseInt(i.toString(), 10)].field);
      }
    };
    Sort2.prototype.isActionPrevent = function() {
      return isActionPrevent(this.parent);
    };
    Sort2.prototype.removeSortColumn = function(field) {
      var gObj = this.parent;
      var cols = this.sortSettings.columns;
      if (cols.length === 0 && this.sortedColumns.indexOf(field) < 0) {
        return;
      }
      if (this.isActionPrevent()) {
        this.parent.notify(preventBatch, {
          instance: this,
          handler: this.removeSortColumn,
          arg1: field
        });
        return;
      }
      this.backupSettings();
      this.removeSortIcons();
      var args = {
        requestType: "sorting",
        type: actionBegin,
        target: this.currentTarget
      };
      for (var i = 0, len = cols.length; i < len; i++) {
        if (cols[parseInt(i.toString(), 10)].field === field) {
          if (gObj.allowGrouping && gObj.groupSettings.columns.indexOf(cols[parseInt(i.toString(), 10)].field) > -1) {
            continue;
          }
          this.sortedColumns.splice(this.sortedColumns.indexOf(cols[parseInt(i.toString(), 10)].field), 1);
          cols.splice(i, 1);
          this.isRemove = true;
          if (this.isModelChanged) {
            this.parent.notify(modelChanged, args);
          }
          break;
        }
      }
      if (!args.cancel) {
        this.addSortIcons();
      }
    };
    Sort2.prototype.getSortedColsIndexByField = function(field, sortedColumns) {
      var cols = sortedColumns ? sortedColumns : this.sortSettings.columns;
      for (var i = 0, len = cols.length; i < len; i++) {
        if (cols[parseInt(i.toString(), 10)].field === field) {
          return i;
        }
      }
      return -1;
    };
    Sort2.prototype.getModuleName = function() {
      return "sort";
    };
    Sort2.prototype.initialEnd = function() {
      this.parent.off(contentReady, this.initialEnd);
      if (this.parent.getColumns().length && this.sortSettings.columns.length) {
        var gObj = this.parent;
        this.contentRefresh = false;
        this.isMultiSort = this.sortSettings.columns.length > 1;
        for (var _i = 0, _a = gObj.sortSettings.columns.slice(); _i < _a.length; _i++) {
          var col = _a[_i];
          if (this.sortedColumns.indexOf(col.field) > -1) {
            this.sortColumn(col.field, col.direction, true);
          }
        }
        this.isMultiSort = false;
        this.contentRefresh = true;
      }
    };
    Sort2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.evtHandlers = [{
        event: setFullScreenDialog,
        handler: this.setFullScreenDialog
      }, {
        event: renderResponsiveChangeAction,
        handler: this.renderResponsiveChangeAction
      }, {
        event: contentReady,
        handler: this.initialEnd
      }, {
        event: sortComplete,
        handler: this.onActionComplete
      }, {
        event: inBoundModelChanged,
        handler: this.onPropertyChanged
      }, {
        event: click,
        handler: this.clickHandler
      }, {
        event: headerRefreshed,
        handler: this.refreshSortIcons
      }, {
        event: keyPressed,
        handler: this.keyPressed
      }, {
        event: cancelBegin,
        handler: this.cancelBeginEvent
      }, {
        event: destroy,
        handler: this.destroy
      }];
      addRemoveEventListener(this.parent, this.evtHandlers, true, this);
      EventHandler.add(document.body, "click", this.excelFilterSortAction, this);
      EventHandler.add(document.body, "touchend", this.excelFilterSortAction, this);
    };
    Sort2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      addRemoveEventListener(this.parent, this.evtHandlers, false);
      EventHandler.remove(document.body, "click", this.excelFilterSortAction);
      EventHandler.remove(document.body, "touchend", this.excelFilterSortAction);
    };
    Sort2.prototype.excelFilterSortAction = function(e) {
      var popUp = parentsUntil(e.target, "e-grid-popup");
      var gridID = this.parent.element.id + "_e-popup";
      if (popUp && popUp.id === gridID && parentsUntil(e.target, "e-excelfilter")) {
        this.excelFilterSortActionHandler(e);
      }
    };
    Sort2.prototype.destroy = function() {
      this.isModelChanged = false;
      var gridElement = this.parent.element;
      if (!gridElement || !gridElement.querySelector("." + gridHeader) && !gridElement.querySelector("." + gridContent)) {
        return;
      }
      if (this.parent.element.querySelector(".e-gridpopup").getElementsByClassName("e-sortdirect").length) {
        this.parent.element.querySelector(".e-gridpopup").style.display = "none";
      }
      if (!this.parent.refreshing && (this.parent.isDestroyed || !this.parent.allowSorting)) {
        this.clearSorting();
      }
      this.isModelChanged = true;
      this.removeEventListener();
    };
    Sort2.prototype.cancelBeginEvent = function(e) {
      if (e.requestType === "sorting") {
        this.restoreSettings();
        this.refreshSortIcons();
        this.isMultiSort = true;
      }
    };
    Sort2.prototype.clickHandler = function(e) {
      var gObj = this.parent;
      this.currentTarget = null;
      this.popUpClickHandler(e);
      var target = closest(e.target, ".e-headercell");
      if (target && !e.target.classList.contains("e-grptogglebtn") && !target.classList.contains("e-resized") && !e.target.classList.contains("e-rhandler") && !e.target.classList.contains("e-columnmenu") && !e.target.classList.contains("e-filtermenudiv") && !parentsUntil(e.target, "e-stackedheadercell") && !(gObj.allowSelection && gObj.selectionSettings.allowColumnSelection && e.target.classList.contains("e-headercell"))) {
        var gObj_1 = this.parent;
        var colObj = gObj_1.getColumnByUid(target.querySelector(".e-headercelldiv").getAttribute("e-mappinguid"));
        if (colObj.type !== "checkbox") {
          this.initiateSort(target, e, colObj);
          if (Browser.isDevice) {
            this.showPopUp(e);
          }
        }
      }
      if (target) {
        target.classList.remove("e-resized");
      }
      this.excelFilterSortActionHandler(e);
    };
    Sort2.prototype.excelFilterSortActionHandler = function(e) {
      if (parentsUntil(e.target, "e-excel-ascending") || parentsUntil(e.target, "e-excel-descending")) {
        var colUid = closest(e.target, ".e-filter-popup").getAttribute("uid");
        var direction = isNullOrUndefined(parentsUntil(e.target, "e-excel-descending")) ? "Ascending" : "Descending";
        this.sortColumn(this.parent.getColumnByUid(colUid).field, direction, false);
      }
    };
    Sort2.prototype.keyPressed = function(e) {
      var ele = e.target;
      if (!this.parent.isEdit && (e.action === "enter" || e.action === "ctrlEnter" || e.action === "shiftEnter") && closest(ele, ".e-headercell")) {
        var target = this.focus.getFocusedElement();
        if (isNullOrUndefined(target) || !target.classList.contains("e-headercell") || !target.querySelector(".e-headercelldiv")) {
          return;
        }
        var col = this.parent.getColumnByUid(target.querySelector(".e-headercelldiv").getAttribute("e-mappinguid"));
        this.initiateSort(target, e, col);
      }
    };
    Sort2.prototype.initiateSort = function(target, e, column) {
      var gObj = this.parent;
      var field = column.field;
      this.currentTarget = e.target;
      var direction = !target.getElementsByClassName("e-ascending").length ? "Ascending" : "Descending";
      this.isMultiSort = e.ctrlKey || this.enableSortMultiTouch || navigator.userAgent.indexOf("Mac OS") !== -1 && e.metaKey;
      if (e.shiftKey || this.sortSettings.allowUnsort && target.getElementsByClassName("e-descending").length && !(gObj.groupSettings.columns.indexOf(field) > -1)) {
        this.removeSortColumn(field);
      } else {
        this.sortColumn(field, direction, this.isMultiSort);
      }
    };
    Sort2.prototype.showPopUp = function(e) {
      var target = closest(e.target, ".e-headercell");
      if (this.parent.allowMultiSorting && (!isNullOrUndefined(target) || this.parent.isContextMenuOpen())) {
        setCssInGridPopUp(this.parent.element.querySelector(".e-gridpopup"), e, "e-sortdirect e-icons e-icon-sortdirect" + (this.sortedColumns.length > 1 ? " e-spanclicked" : ""));
      }
    };
    Sort2.prototype.popUpClickHandler = function(e) {
      var target = e.target;
      if (closest(target, ".e-headercell") || e.target.classList.contains(rowCell) || closest(target, ".e-gridpopup")) {
        if (target.classList.contains("e-sortdirect")) {
          if (!target.classList.contains("e-spanclicked")) {
            target.classList.add("e-spanclicked");
            this.enableSortMultiTouch = true;
          } else {
            target.classList.remove("e-spanclicked");
            this.enableSortMultiTouch = false;
            this.parent.element.querySelector(".e-gridpopup").style.display = "none";
          }
        }
      } else {
        this.parent.element.querySelector(".e-gridpopup").style.display = "none";
      }
    };
    Sort2.prototype.addSortIcons = function() {
      var gObj = this.parent;
      var header;
      var filterElement;
      var cols = this.sortSettings.columns;
      var fieldNames = this.parent.getColumns().map(function(c) {
        return c.field;
      });
      for (var i = 0, len = cols.length; i < len; i++) {
        header = gObj.getColumnHeaderByField(cols[parseInt(i.toString(), 10)].field);
        if (fieldNames.indexOf(cols[parseInt(i.toString(), 10)].field) === -1 || isNullOrUndefined(header)) {
          continue;
        }
        this.aria.setSort(header, cols[parseInt(i.toString(), 10)].direction.toLowerCase());
        if (cols.length > 1) {
          header.querySelector(".e-headercelldiv").insertBefore(this.parent.createElement("span", {
            className: "e-sortnumber",
            innerHTML: (i + 1).toString()
          }), header.querySelector(".e-headertext"));
        }
        filterElement = header.querySelector(".e-sortfilterdiv");
        if (cols[parseInt(i.toString(), 10)].direction === "Ascending") {
          classList(filterElement, ["e-ascending", "e-icon-ascending"], []);
        } else {
          classList(filterElement, ["e-descending", "e-icon-descending"], []);
        }
      }
    };
    Sort2.prototype.removeSortIcons = function(position) {
      var gObj = this.parent;
      var header;
      var cols = this.sortSettings.columns;
      var fieldNames = this.parent.getColumns().map(function(c) {
        return c.field;
      });
      for (var i = position ? position : 0, len = !isNullOrUndefined(position) ? position + 1 : cols.length; i < len; i++) {
        header = gObj.getColumnHeaderByField(cols[parseInt(i.toString(), 10)].field);
        if (isNullOrUndefined(header) || gObj.allowGrouping && gObj.groupSettings.columns.indexOf(cols[parseInt(i.toString(), 10)].field) > -1 && !header.querySelector(".e-sortfilterdiv")) {
          continue;
        }
        if (fieldNames.indexOf(cols[parseInt(i.toString(), 10)].field) === -1) {
          continue;
        }
        this.aria.setSort(header, "none");
        classList(header.querySelector(".e-sortfilterdiv"), [], ["e-descending", "e-icon-descending", "e-ascending", "e-icon-ascending"]);
        if (header.querySelector(".e-sortnumber")) {
          header.querySelector(".e-headercelldiv").removeChild(header.querySelector(".e-sortnumber"));
        }
      }
    };
    Sort2.prototype.getSortColumnFromField = function(field) {
      for (var i = 0, len = this.sortSettings.columns.length; i < len; i++) {
        if (this.sortSettings.columns[parseInt(i.toString(), 10)].field === field) {
          return this.sortSettings.columns[parseInt(i.toString(), 10)];
        }
      }
      return false;
    };
    Sort2.prototype.updateAriaAttr = function() {
      var fieldNames = this.parent.getColumns().map(function(c) {
        return c.field;
      });
      for (var _i = 0, _a = this.sortedColumns; _i < _a.length; _i++) {
        var col = _a[_i];
        if (fieldNames.indexOf(col) === -1) {
          continue;
        }
        var header = this.parent.getColumnHeaderByField(col);
        this.aria.setSort(header, this.getSortColumnFromField(col).direction);
      }
    };
    Sort2.prototype.refreshSortIcons = function() {
      this.removeSortIcons();
      this.isMultiSort = true;
      this.removeSortIcons();
      this.addSortIcons();
      this.isMultiSort = false;
      this.updateAriaAttr();
    };
    Sort2.prototype.renderResponsiveChangeAction = function(args) {
      this.responsiveDialogRenderer.action = args.action;
    };
    Sort2.prototype.showCustomSort = function(enable) {
      this.responsiveDialogRenderer.isCustomDialog = enable;
      this.responsiveDialogRenderer.showResponsiveDialog();
    };
    return Sort2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/pager/numeric-container.js
var NumericContainer = (
  /** @class */
  function() {
    function NumericContainer2(pagerModule) {
      this.pagerModule = pagerModule;
    }
    NumericContainer2.prototype.render = function() {
      this.pagerElement = this.pagerModule.element;
      this.renderNumericContainer();
      this.refreshNumericLinks();
      this.wireEvents();
    };
    NumericContainer2.prototype.refresh = function() {
      this.pagerModule.updateTotalPages();
      if (this.links.length) {
        this.updateLinksHtml();
      }
      this.refreshAriaAttrLabel();
      this.updateStyles();
    };
    NumericContainer2.prototype.refreshNumericLinks = function() {
      var link;
      var pagerObj = this.pagerModule;
      var div = pagerObj.element.querySelector(".e-numericcontainer");
      var frag = document.createDocumentFragment();
      div.innerHTML = "";
      for (var i = 1; i <= pagerObj.pageCount; i++) {
        link = createElement("a", {
          className: "e-link e-numericitem e-spacing e-pager-default",
          attrs: {
            tabindex: "-1",
            "aria-label": pagerObj.getLocalizedLabel("Page") + i + pagerObj.getLocalizedLabel("Of") + pagerObj.totalPages + pagerObj.getLocalizedLabel("Pages"),
            href: "#"
          }
        });
        if (pagerObj.currentPage === i) {
          classList(link, ["e-currentitem", "e-active"], ["e-pager-default"]);
          link.setAttribute("aria-current", "page");
        }
        frag.appendChild(link);
      }
      div.appendChild(frag);
      this.links = [].slice.call(div.childNodes);
    };
    NumericContainer2.prototype.wireEvents = function() {
      EventHandler.add(this.pagerElement, "click", this.clickHandler, this);
      EventHandler.add(this.pagerElement, "auxclick", this.auxiliaryClickHandler, this);
    };
    NumericContainer2.prototype.unwireEvents = function() {
      EventHandler.remove(this.pagerModule.element, "click", this.clickHandler);
      EventHandler.remove(this.pagerModule.element, "auxclick", this.auxiliaryClickHandler);
    };
    NumericContainer2.prototype.destroy = function() {
      this.unwireEvents();
    };
    NumericContainer2.prototype.refreshAriaAttrLabel = function() {
      var pagerObj = this.pagerModule;
      var numericContainer = pagerObj.element.querySelector(".e-numericcontainer");
      var links = numericContainer.querySelectorAll("a");
      for (var i = 0; i < links.length; i++) {
        if (links[parseInt(i.toString(), 10)].hasAttribute("aria-label") && links[parseInt(i.toString(), 10)].hasAttribute("index")) {
          links[parseInt(i.toString(), 10)].setAttribute("aria-label", pagerObj.getLocalizedLabel("Page") + links[parseInt(i.toString(), 10)].getAttribute("index") + pagerObj.getLocalizedLabel("Of") + pagerObj.totalPages + pagerObj.getLocalizedLabel("Pages"));
        }
      }
    };
    NumericContainer2.prototype.renderNumericContainer = function() {
      this.element = createElement("div", {
        className: "e-pagercontainer",
        attrs: {
          "role": "navigation"
        }
      });
      this.renderFirstNPrev(this.element);
      this.renderPrevPagerSet(this.element);
      this.element.appendChild(createElement("div", {
        className: "e-numericcontainer"
      }));
      this.renderNextPagerSet(this.element);
      this.renderNextNLast(this.element);
      this.pagerModule.element.appendChild(this.element);
    };
    NumericContainer2.prototype.renderFirstNPrev = function(pagerContainer) {
      this.first = createElement("div", {
        className: "e-first e-icons e-icon-first",
        attrs: {
          title: this.pagerModule.getLocalizedLabel("firstPageTooltip"),
          tabindex: "-1",
          role: "button"
        }
      });
      this.prev = createElement("div", {
        className: "e-prev e-icons e-icon-prev",
        attrs: {
          title: this.pagerModule.getLocalizedLabel("previousPageTooltip"),
          tabindex: "-1",
          role: "button"
        }
      });
      append([this.first, this.prev], pagerContainer);
    };
    NumericContainer2.prototype.renderPrevPagerSet = function(pagerContainer) {
      var prevPager = createElement("div");
      this.PP = createElement("a", {
        className: "e-link e-pp e-spacing",
        innerHTML: "...",
        attrs: {
          title: this.pagerModule.getLocalizedLabel("previousPagerTooltip"),
          "aria-label": this.pagerModule.getLocalizedLabel("previousPagerTooltip"),
          tabindex: "-1",
          href: "#"
        }
      });
      prevPager.appendChild(this.PP);
      pagerContainer.appendChild(prevPager);
    };
    NumericContainer2.prototype.renderNextPagerSet = function(pagerContainer) {
      var nextPager = createElement("div");
      this.NP = createElement("a", {
        className: "e-link e-np e-spacing",
        innerHTML: "...",
        attrs: {
          title: this.pagerModule.getLocalizedLabel("nextPagerTooltip"),
          "aria-label": this.pagerModule.getLocalizedLabel("nextPagerTooltip"),
          tabindex: "-1",
          href: "#"
        }
      });
      nextPager.appendChild(this.NP);
      pagerContainer.appendChild(nextPager);
    };
    NumericContainer2.prototype.renderNextNLast = function(pagerContainer) {
      this.next = createElement("div", {
        className: "e-next e-icons e-icon-next",
        attrs: {
          title: this.pagerModule.getLocalizedLabel("nextPageTooltip"),
          tabindex: "-1",
          role: "button"
        }
      });
      this.last = createElement("div", {
        className: "e-last e-icons e-icon-last",
        attrs: {
          title: this.pagerModule.getLocalizedLabel("lastPageTooltip"),
          tabindex: "-1",
          role: "button"
        }
      });
      append([this.next, this.last], pagerContainer);
    };
    NumericContainer2.prototype.clickHandler = function(e) {
      var pagerObj = this.pagerModule;
      this.target = e.target;
      if (this.target.classList.contains("e-numericitem")) {
        e.preventDefault();
      }
      pagerObj.previousPageNo = pagerObj.currentPage;
      if (!this.target.classList.contains("e-disable") && !isNullOrUndefined(this.target.getAttribute("index"))) {
        pagerObj.currentPage = parseInt(this.target.getAttribute("index"), 10);
        this.pagerModule.isInteracted = true;
        pagerObj.dataBind();
      }
      return false;
    };
    NumericContainer2.prototype.auxiliaryClickHandler = function(e) {
      this.target = e.target;
      if (this.target.classList.contains("e-numericitem") && e.button === 1) {
        e.preventDefault();
      }
    };
    NumericContainer2.prototype.updateLinksHtml = function() {
      var pagerObj = this.pagerModule;
      var currentPageSet;
      var isLastSet;
      var pageNo;
      var numItems = this.pagerElement.querySelectorAll('.e-numericitem:not(.e-hide):not([style*="display: none"]):not(.e-np):not(.e-pp)');
      pagerObj.currentPage = pagerObj.totalPages === 1 ? 1 : pagerObj.currentPage;
      if (pagerObj.currentPage > pagerObj.totalPages && pagerObj.totalPages) {
        pagerObj.currentPage = pagerObj.totalPages;
      }
      currentPageSet = parseInt((pagerObj.currentPage / pagerObj.pageCount).toString(), 10);
      if (pagerObj.currentPage % pagerObj.pageCount === 0 && currentPageSet > 0) {
        currentPageSet = currentPageSet - 1;
      }
      for (var i = 0; i < pagerObj.pageCount; i++) {
        if (pagerObj.isPagerResized) {
          var focusedItem = this.pagerElement.querySelector(".e-focus");
          var focusedorTarget = this.target ? this.target : focusedItem ? focusedItem : null;
          var prevFocused = false;
          var nextFocused = false;
          var firstFocused = false;
          var lastFocused = false;
          var numItemFocused = false;
          var npFocused = false;
          var ppFocused = false;
          if (focusedorTarget) {
            var classList_1 = focusedorTarget.classList;
            if (classList_1.contains("e-icons")) {
              switch (true) {
                case classList_1.contains("e-prev"):
                  prevFocused = true;
                  break;
                case classList_1.contains("e-next"):
                  nextFocused = true;
                  break;
                case classList_1.contains("e-first"):
                  firstFocused = true;
                  break;
                case classList_1.contains("e-last"):
                  lastFocused = true;
                  break;
              }
            } else if (classList_1.contains("e-numericitem")) {
              switch (true) {
                case classList_1.contains("e-np"):
                  npFocused = true;
                  break;
                case classList_1.contains("e-pp"):
                  ppFocused = true;
                  break;
                default:
                  numItemFocused = classList_1.contains("e-numericitem");
                  break;
              }
            }
          }
          isLastSet = lastFocused || this.pagerModule.keyAction === "End";
          numItems = this.pagerElement.querySelectorAll('.e-numericitem:not(.e-hide):not([style*="display: none"]):not(.e-np):not(.e-pp)');
          var isPageAvailable = Array.from(numItems).some(function(item) {
            return parseInt(item.getAttribute("index"), 10) === pagerObj.currentPage;
          });
          if (firstFocused || this.pagerModule.keyAction === "Home") {
            pageNo = 1 + i;
          } else if (lastFocused || this.pagerModule.keyAction === "End") {
            pageNo = currentPageSet * pagerObj.pageCount + 1 + i;
          } else if (nextFocused || this.pagerModule.keyAction === "ArrowRight" || prevFocused || this.pagerModule.keyAction === "ArrowLeft") {
            if (isPageAvailable) {
              pageNo = parseInt(numItems[0].getAttribute("index"), 10) + i;
            } else if (prevFocused || this.pagerModule.keyAction === "ArrowLeft") {
              pageNo = parseInt(this.PP.getAttribute("index"), 10) + i;
            } else {
              pageNo = pagerObj.currentPage + i;
            }
          } else if (npFocused || ppFocused) {
            pageNo = pagerObj.currentPage + i;
          } else if (numItemFocused) {
            pageNo = parseInt(numItems[0].getAttribute("index"), 10) + i;
          } else {
            pageNo = currentPageSet * pagerObj.pageCount + 1 + i;
          }
        } else {
          pageNo = currentPageSet * pagerObj.pageCount + 1 + i;
        }
        if (pageNo <= pagerObj.totalPages) {
          this.links[parseInt(i.toString(), 10)].classList.remove("e-hide");
          this.links[parseInt(i.toString(), 10)].style.display = "";
          this.links[parseInt(i.toString(), 10)].setAttribute("index", pageNo.toString());
          this.links[parseInt(i.toString(), 10)].innerHTML = !pagerObj.customText ? pageNo.toString() : pagerObj.customText + pageNo;
          if (pagerObj.currentPage !== pageNo) {
            this.links[parseInt(i.toString(), 10)].classList.add("e-pager-default");
          } else {
            this.links[parseInt(i.toString(), 10)].classList.remove("e-pager-default");
          }
        } else {
          this.links[parseInt(i.toString(), 10)].innerHTML = !pagerObj.customText ? pageNo.toString() : pagerObj.customText + pageNo;
          this.links[parseInt(i.toString(), 10)].style.display = "none";
        }
        classList(this.links[parseInt(i.toString(), 10)], [], ["e-currentitem", "e-active"]);
        this.links[parseInt(i.toString(), 10)].removeAttribute("aria-current");
      }
      attributes(this.first, {
        "index": "1",
        "title": this.pagerModule.getLocalizedLabel("firstPageTooltip")
      });
      attributes(this.pagerElement.querySelector(".e-mfirst"), {
        "index": "1",
        "title": this.pagerModule.getLocalizedLabel("firstPageTooltip")
      });
      attributes(this.last, {
        "index": pagerObj.totalPages.toString(),
        "title": this.pagerModule.getLocalizedLabel("lastPageTooltip")
      });
      attributes(this.pagerElement.querySelector(".e-mlast"), {
        "index": pagerObj.totalPages.toString(),
        "title": this.pagerModule.getLocalizedLabel("lastPageTooltip")
      });
      attributes(this.prev, {
        "index": (pagerObj.currentPage - 1).toString(),
        "title": this.pagerModule.getLocalizedLabel("previousPageTooltip")
      });
      attributes(this.pagerElement.querySelector(".e-mprev"), {
        "index": (pagerObj.currentPage - 1).toString(),
        "title": this.pagerModule.getLocalizedLabel("previousPageTooltip")
      });
      attributes(this.next, {
        "index": (pagerObj.currentPage + 1).toString(),
        "title": this.pagerModule.getLocalizedLabel("nextPageTooltip")
      });
      attributes(this.pagerElement.querySelector(".e-mnext"), {
        "index": (pagerObj.currentPage + 1).toString(),
        "title": this.pagerModule.getLocalizedLabel("nextPageTooltip")
      });
      var ppIndex = this.pagerModule.isPagerResized && numItems.length ? isLastSet ? parseInt(numItems[0].getAttribute("index"), 10) - pagerObj.avgNumItems : parseInt(numItems[0].getAttribute("index"), 10) - numItems.length : parseInt(this.links[0].getAttribute("index"), 10) - pagerObj.pageCount;
      attributes(this.PP, {
        "index": ppIndex < 1 ? "1" : ppIndex.toString(),
        "title": this.pagerModule.getLocalizedLabel("previousPagerTooltip"),
        "aria-label": this.pagerModule.getLocalizedLabel("previousPagerTooltip")
      });
      var NPIndex = this.pagerModule.isPagerResized && numItems.length ? parseInt(numItems[numItems.length - 1].getAttribute("index"), 10) : parseInt(this.links[this.links.length - 1].getAttribute("index"), 10);
      attributes(this.NP, {
        "index": (NPIndex + 1).toString(),
        "title": this.pagerModule.getLocalizedLabel("nextPagerTooltip"),
        "aria-label": this.pagerModule.getLocalizedLabel("nextPagerTooltip")
      });
      this.target = void 0;
    };
    NumericContainer2.prototype.updateStyles = function() {
      var _this = this;
      this.updateFirstNPrevStyles();
      this.updatePrevPagerSetStyles();
      this.updateNextPagerSetStyles();
      this.updateNextNLastStyles();
      if (this.links.length) {
        var currentPageIndex = this.links.findIndex(function(link) {
          return link.getAttribute("index") === _this.pagerModule.currentPage.toString();
        });
        var currentPage = this.pagerModule.isPagerResized && currentPageIndex !== -1 ? currentPageIndex : (this.pagerModule.currentPage - 1) % this.pagerModule.pageCount;
        if (this.links[parseInt(currentPage.toString(), 10)]) {
          classList(this.links[parseInt(currentPage.toString(), 10)], ["e-currentitem", "e-active"], []);
          this.links[parseInt(currentPage.toString(), 10)].setAttribute("aria-current", "page");
        }
      }
    };
    NumericContainer2.prototype.updateFirstNPrevStyles = function() {
      var firstPage = ["e-firstpage", "e-pager-default"];
      var firstPageDisabled = ["e-firstpagedisabled", "e-disable"];
      var prevPage = ["e-prevpage", "e-pager-default"];
      var prevPageDisabled = ["e-prevpagedisabled", "e-disable"];
      if (this.pagerModule.totalPages > 0 && this.pagerModule.currentPage > 1) {
        classList(this.prev, prevPage, prevPageDisabled);
        classList(this.first, firstPage, firstPageDisabled);
        classList(this.pagerElement.querySelector(".e-mfirst"), firstPage, firstPageDisabled);
        classList(this.pagerElement.querySelector(".e-mprev"), prevPage, prevPageDisabled);
      } else {
        classList(this.prev, prevPageDisabled, prevPage);
        classList(this.first, firstPageDisabled, firstPage);
        classList(this.pagerElement.querySelector(".e-mprev"), prevPageDisabled, prevPage);
        classList(this.pagerElement.querySelector(".e-mfirst"), firstPageDisabled, firstPage);
      }
    };
    NumericContainer2.prototype.updatePrevPagerSetStyles = function() {
      if (this.pagerModule.currentPage > this.pagerModule.pageCount || this.pagerModule.isPagerResized && this.links.findIndex(function(link) {
        return parseInt(link.getAttribute("index"), 10) === 1;
      })) {
        classList(this.PP, ["e-numericitem", "e-pager-default"], ["e-nextprevitemdisabled", "e-disable"]);
      } else {
        classList(this.PP, ["e-nextprevitemdisabled", "e-disable"], ["e-numericitem", "e-pager-default"]);
      }
    };
    NumericContainer2.prototype.updateNextPagerSetStyles = function() {
      var pagerObj = this.pagerModule;
      var firstPage = this.links[0].innerHTML.replace(pagerObj.customText, "");
      var numItems = this.pagerElement.querySelectorAll('.e-numericitem:not(.e-hide):not([style*="display: none"]):not(.e-np):not(.e-pp)');
      if (!firstPage.length || !this.links.length || parseInt(firstPage, 10) + pagerObj.pageCount > pagerObj.totalPages || pagerObj.isPagerResized && Array.from(numItems).some(function(item) {
        return parseInt(item.getAttribute("index"), 10) === pagerObj.totalPages;
      })) {
        classList(this.NP, ["e-nextprevitemdisabled", "e-disable"], ["e-numericitem", "e-pager-default"]);
      } else {
        classList(this.NP, ["e-numericitem", "e-pager-default"], ["e-nextprevitemdisabled", "e-disable"]);
      }
    };
    NumericContainer2.prototype.updateNextNLastStyles = function() {
      var lastPage = ["e-lastpage", "e-pager-default"];
      var lastPageDisabled = ["e-lastpagedisabled", "e-disable"];
      var nextPage = ["e-nextpage", "e-pager-default"];
      var nextPageDisabled = ["e-nextpagedisabled", "e-disable"];
      var pagerObj = this.pagerModule;
      if (pagerObj.currentPage === pagerObj.totalPages || pagerObj.totalRecordsCount === 0) {
        classList(this.last, lastPageDisabled, lastPage);
        classList(this.next, nextPageDisabled, nextPage);
        classList(this.pagerElement.querySelector(".e-mlast"), lastPageDisabled, lastPage);
        classList(this.pagerElement.querySelector(".e-mnext"), nextPageDisabled, nextPage);
      } else {
        classList(this.last, lastPage, lastPageDisabled);
        classList(this.next, nextPage, nextPageDisabled);
        classList(this.pagerElement.querySelector(".e-mlast"), lastPage, lastPageDisabled);
        classList(this.pagerElement.querySelector(".e-mnext"), nextPage, nextPageDisabled);
      }
    };
    return NumericContainer2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/pager/pager-message.js
var PagerMessage = (
  /** @class */
  function() {
    function PagerMessage2(pagerModule) {
      this.pagerModule = pagerModule;
    }
    PagerMessage2.prototype.render = function() {
      var div = createElement("div", {
        className: "e-parentmsgbar"
      });
      this.pageNoMsgElem = createElement("span", {
        className: "e-pagenomsg"
      });
      this.pageNoMsgElem.style.textAlign = "right";
      this.pageCountMsgElem = createElement("span", {
        className: "e-pagecountmsg"
      });
      this.pageCountMsgElem.style.textAlign = "right";
      append([this.pageNoMsgElem, this.pageCountMsgElem], div);
      this.pagerModule.element.appendChild(div);
      this.refresh();
    };
    PagerMessage2.prototype.refresh = function() {
      var pagerObj = this.pagerModule;
      this.pageNoMsgElem.textContent = this.format(pagerObj.getLocalizedLabel("currentPageInfo"), [pagerObj.totalRecordsCount === 0 ? 0 : pagerObj.currentPage, pagerObj.totalPages || 0, pagerObj.totalRecordsCount || 0]) + " ";
      this.pageCountMsgElem.textContent = this.format(pagerObj.getLocalizedLabel(pagerObj.totalRecordsCount <= 1 ? "totalItemInfo" : "totalItemsInfo"), [pagerObj.totalRecordsCount || 0, pagerObj.totalRecordsCount ? pagerObj.pageSize * (pagerObj.currentPage - 1) + 1 : 0, pagerObj.pageSize * pagerObj.currentPage > pagerObj.totalRecordsCount ? pagerObj.totalRecordsCount : pagerObj.pageSize * pagerObj.currentPage]);
      this.pageNoMsgElem.parentElement.classList.remove("e-hide");
    };
    PagerMessage2.prototype.hideMessage = function() {
      if (this.pageNoMsgElem) {
        this.pageNoMsgElem.style.display = "none";
      }
      if (this.pageCountMsgElem) {
        this.pageCountMsgElem.style.display = "none";
      }
    };
    PagerMessage2.prototype.showMessage = function() {
      if (!this.pageNoMsgElem) {
        this.render();
      }
      this.pageNoMsgElem.style.display = "";
      this.pageCountMsgElem.style.display = "";
    };
    PagerMessage2.prototype.destroy = function() {
    };
    PagerMessage2.prototype.format = function(str, args) {
      var regx;
      var regExp = RegExp;
      for (var i = 0; i < args.length; i++) {
        regx = new regExp("\\{" + i + "\\}", "gm");
        if (this.isValidLocale(this.pagerModule.locale)) {
          str = str.replace(regx, args[parseInt(i.toString(), 10)].toLocaleString(this.pagerModule.locale));
        } else {
          str = str.replace(regx, args[parseInt(i.toString(), 10)].toString());
        }
      }
      return str;
    };
    PagerMessage2.prototype.isValidLocale = function(locale) {
      try {
        new Intl.NumberFormat(locale);
        return true;
      } catch (e) {
        return false;
      }
    };
    return PagerMessage2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/pager/pager.js
var __extends31 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate17 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Pager = (
  /** @class */
  function(_super) {
    __extends31(Pager2, _super);
    function Pager2(options, element, parent) {
      var _this = _super.call(this, options, element) || this;
      _this.hasParent = false;
      _this.checkAll = true;
      _this.pageRefresh = "pager-refresh";
      _this.firstPagerFocus = false;
      _this.isCancel = false;
      _this.isInteracted = false;
      _this.parent = parent;
      return _this;
    }
    Pager2.prototype.requiredModules = function() {
      var modules = [];
      if (this.enableExternalMessage) {
        modules.push({
          member: "externalMessage",
          args: [this],
          name: "ExternalMessage"
        });
      }
      if (this.checkpagesizes()) {
        modules.push({
          member: "pagerdropdown",
          args: [this],
          name: "PagerDropDown"
        });
      }
      return modules;
    };
    Pager2.prototype.preRender = function() {
      this.defaultConstants = {
        currentPageInfo: "{0} of {1} pages",
        totalItemsInfo: "({0} items)",
        totalItemInfo: "({0} item)",
        firstPageTooltip: "Go to first page",
        lastPageTooltip: "Go to last page",
        nextPageTooltip: "Go to next page",
        previousPageTooltip: "Go to previous page",
        nextPagerTooltip: "Go to next pager items",
        previousPagerTooltip: "Go to previous pager items",
        pagerDropDown: "Items per page",
        pagerAllDropDown: "Items",
        CurrentPageInfo: "{0} of {1} pages",
        TotalItemsInfo: "({0} items)",
        FirstPageTooltip: "Go to first page",
        LastPageTooltip: "Go to last page",
        NextPageTooltip: "Go to next page",
        PreviousPageTooltip: "Go to previous page",
        NextPagerTooltip: "Go to next pager items",
        PreviousPagerTooltip: "Go to previous pager items",
        PagerDropDown: "Items per page",
        PagerAllDropDown: "Items",
        All: "All",
        Container: "Pager Container",
        Information: "Pager Information",
        ExternalMsg: "Pager external message",
        Page: "Page ",
        Of: " of ",
        Pages: " Pages"
      };
      this.containerModule = new NumericContainer(this);
      this.pagerMessageModule = new PagerMessage(this);
    };
    Pager2.prototype.render = function() {
      this.element.setAttribute("data-role", "pager");
      this.element.setAttribute("tabindex", "-1");
      this.initLocalization();
      if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
        this.element.classList.add("e-mac-safari");
      }
      if (this.cssClass) {
        if (this.cssClass.indexOf(" ") !== -1) {
          addClass([this.element], this.cssClass.split(" "));
        } else {
          addClass([this.element], [this.cssClass]);
        }
      }
      if (!this.hasParent) {
        this.element.setAttribute("tabindex", "0");
      }
      if (this.enableQueryString) {
        var pageValue = new URL(window.location.href).searchParams.get("page");
        if (!isNullOrUndefined(pageValue) && window.location.href.indexOf("?page=") > 0) {
          var currentPageValue = parseInt(pageValue, 10);
          if (this.hasParent) {
            this.parent.setProperties({
              pageSettings: {
                currentPage: currentPageValue
              }
            }, true);
          }
          this.currentPage = currentPageValue;
        }
      }
      if (this.template) {
        if (this.isReactTemplate()) {
          this.on(this.pageRefresh, this.pagerTemplate, this);
          this.notify(this.pageRefresh, {});
        } else {
          this.pagerTemplate();
        }
      } else {
        this.updateRTL();
        this.totalRecordsCount = this.totalRecordsCount || 0;
        this.renderFirstPrevDivForDevice();
        this.containerModule.render();
        if (this.enablePagerMessage) {
          this.pagerMessageModule.render();
        }
        this.renderNextLastDivForDevice();
        if (this.checkpagesizes() && this.pagerdropdownModule) {
          this.pagerdropdownModule.render();
        }
        this.addAriaLabel();
        if (this.enableExternalMessage && this.externalMessageModule) {
          this.externalMessageModule.render();
        }
        this.refresh();
        this.trigger("created", {
          "currentPage": this.currentPage,
          "totalRecordsCount": this.totalRecordsCount
        });
      }
      this.wireEvents();
      this.addListener();
    };
    Pager2.prototype.getPersistData = function() {
      var keyEntity = ["currentPage", "pageSize"];
      return this.addOnPersist(keyEntity);
    };
    Pager2.prototype.destroy = function() {
      if (this.isDestroyed) {
        return;
      }
      if (this.isReactTemplate()) {
        this.off(this.pageRefresh, this.pagerTemplate);
        if (!this.hasParent) {
          this.destroyTemplate(["pagerTemplate"]);
        }
      }
      this.removeListener();
      this.unwireEvents();
      _super.prototype.destroy.call(this);
      this.containerModule.destroy();
      this.pagerMessageModule.destroy();
      if (!this.isReactTemplate()) {
        this.element.innerHTML = "";
      }
    };
    Pager2.prototype.destroyTemplate = function(propertyNames, index) {
      this.clearTemplate(propertyNames, index);
    };
    Pager2.prototype.getModuleName = function() {
      return "pager";
    };
    Pager2.prototype.onPropertyChanged = function(newProp, oldProp) {
      if (this.isDestroyed) {
        return;
      }
      if (newProp.pageSize === this.getLocalizedLabel("All") && oldProp.pageSize === this.totalRecordsCount) {
        this.pageSize = this.totalRecordsCount;
        return;
      }
      if (newProp.pageCount !== oldProp.pageCount) {
        this.containerModule.refreshNumericLinks();
        this.containerModule.refresh();
      }
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "currentPage":
            if (this.checkGoToPage(newProp.currentPage, oldProp.currentPage)) {
              this.currentPageChanged(newProp, oldProp);
            }
            break;
          case "pageSize":
          case "totalRecordsCount":
          case "customText":
            if (this.checkpagesizes() && this.pagerdropdownModule) {
              if (oldProp.pageSize !== newProp.pageSize) {
                this.currentPage = 1;
              }
              this.pagerdropdownModule.setDropDownValue("value", this.pageSize);
            }
            if (newProp.pageSize !== oldProp.pageSize) {
              this.pageSize = newProp.pageSize;
              this.currentPageChanged(newProp, oldProp);
              if (this.isCancel && this.hasParent) {
                this.parent.setProperties({
                  pageSettings: {
                    pageSize: oldProp.pageSize
                  }
                }, true);
              }
            } else {
              this.refresh();
            }
            break;
          case "pageSizes":
            if (this.checkpagesizes() && this.pagerdropdownModule) {
              this.pagerdropdownModule.destroy();
              this.pagerdropdownModule.render();
            }
            this.refresh();
            break;
          case "template":
            this.templateFn = this.compile(this.template);
            this.refresh();
            break;
          case "locale":
            this.initLocalization();
            this.refresh();
            break;
          case "enableExternalMessage":
            if (this.enableExternalMessage && this.externalMessageModule) {
              this.externalMessageModule.render();
            }
            break;
          case "externalMessage":
            if (this.externalMessageModule) {
              this.externalMessageModule.refresh();
            }
            break;
          case "enableRtl":
            this.updateRTL();
            break;
          case "enablePagerMessage":
            if (this.enablePagerMessage) {
              this.pagerMessageModule.showMessage();
            } else {
              this.pagerMessageModule.hideMessage();
            }
            break;
        }
      }
      this.resizePager();
    };
    Pager2.prototype.wireEvents = function() {
      if (!this.hasParent) {
        EventHandler.add(this.element, "keydown", this.keyPressHandler, this);
        EventHandler.add(document.body, "keydown", this.keyDownHandler, this);
      }
      EventHandler.add(this.element, "focusin", this.onFocusIn, this);
      EventHandler.add(this.element, "focusout", this.onFocusOut, this);
      EventHandler.add(window, "resize", this.resizePager, this);
      EventHandler.add(window, "load", this.resizePager, this);
    };
    Pager2.prototype.unwireEvents = function() {
      if (!this.hasParent) {
        EventHandler.remove(this.element, "keydown", this.keyPressHandler);
        EventHandler.remove(document.body, "keydown", this.keyDownHandler);
      }
      EventHandler.remove(this.element, "focusin", this.onFocusIn);
      EventHandler.remove(this.element, "focusout", this.onFocusOut);
      EventHandler.remove(window, "resize", this.resizePager);
      EventHandler.remove(window, "load", this.resizePager);
    };
    Pager2.prototype.onFocusIn = function(e) {
      var focusedTabIndexElement = this.getFocusedTabindexElement();
      if (isNullOrUndefined(focusedTabIndexElement)) {
        var target = e.target;
        var dropDownPage = this.getDropDownPage();
        if (!this.hasParent) {
          this.element.tabIndex = -1;
        }
        if (target === this.element && !this.hasParent) {
          var focusablePagerElements = this.getFocusablePagerElements(this.element, []);
          this.addFocus(focusablePagerElements[0], true);
          return;
        }
        if (target === this.element) {
          this.element.tabIndex = 0;
          return;
        }
        if (target !== dropDownPage && !target.classList.contains("e-disable")) {
          this.addFocus(target, true);
        }
      }
    };
    Pager2.prototype.onFocusOut = function(e) {
      var focusedElement = this.getFocusedElement();
      var dropDownPage = this.getDropDownPage();
      if (!isNullOrUndefined(focusedElement)) {
        this.removeFocus(focusedElement, true);
      }
      if (this.pageSizes && dropDownPage && dropDownPage.classList.contains("e-input-focus")) {
        this.removeFocus(dropDownPage, true);
      }
      this.setTabIndexForFocusLastElement();
      if (!this.hasParent) {
        this.element.tabIndex = 0;
      }
      if (this.hasParent) {
        this.element.tabIndex = -1;
      }
    };
    Pager2.prototype.keyDownHandler = function(e) {
      if (e.altKey) {
        if (e.keyCode === 74) {
          var focusablePagerElements = this.getFocusablePagerElements(this.element, []);
          if (focusablePagerElements.length > 0) {
            focusablePagerElements[0].focus();
          }
        }
      }
    };
    Pager2.prototype.keyPressHandler = function(e) {
      var presskey = extend(e, {
        cancel: false
      });
      this.notify(keyPressed, presskey);
      if (presskey.cancel === true) {
        e.stopImmediatePropagation();
      }
    };
    Pager2.prototype.addListener = function() {
      if (this.isDestroyed) {
        return;
      }
      if (!this.hasParent) {
        this.on(keyPressed, this.onKeyPress, this);
      }
    };
    Pager2.prototype.removeListener = function() {
      if (this.isDestroyed) {
        return;
      }
      if (!this.hasParent) {
        this.off(keyPressed, this.onKeyPress);
      }
    };
    Pager2.prototype.onKeyPress = function(e) {
      if (!this.hasParent) {
        if (this.checkPagerHasFocus()) {
          this.changePagerFocus(e);
        } else {
          e.preventDefault();
          this.setPagerFocus();
        }
      }
    };
    Pager2.prototype.checkPagerHasFocus = function() {
      return this.getFocusedTabindexElement() ? true : false;
    };
    Pager2.prototype.setPagerContainerFocus = function() {
      this.element.focus();
    };
    Pager2.prototype.setPagerFocus = function() {
      var focusablePagerElements = this.getFocusablePagerElements(this.element, []);
      if (focusablePagerElements.length > 0) {
        focusablePagerElements[0].focus();
      }
    };
    Pager2.prototype.setPagerFocusForActiveElement = function() {
      var currentActivePage = this.getActiveElement();
      if (currentActivePage) {
        currentActivePage.focus();
      }
    };
    Pager2.prototype.setTabIndexForFocusLastElement = function() {
      var focusablePagerElements = this.getFocusablePagerElements(this.element, []);
      var dropDownPage = this.getDropDownPage();
      if (this.pageSizes && dropDownPage && !isNullOrUndefined(dropDownPage.offsetParent)) {
        dropDownPage.tabIndex = 0;
      } else if (focusablePagerElements.length > 0) {
        focusablePagerElements[focusablePagerElements.length - 1].tabIndex = 0;
      }
    };
    Pager2.prototype.changePagerFocus = function(e) {
      this.keyAction = e.key;
      if (e.shiftKey && e.keyCode === 9) {
        this.changeFocusByShiftTab(e);
      } else if (e.keyCode === 9) {
        this.changeFocusByTab(e);
      } else if (e.keyCode === 13 || e.keyCode === 32) {
        this.navigateToPageByEnterOrSpace(e);
      } else if (e.keyCode === 37 || e.keyCode === 39 || e.keyCode === 35 || e.keyCode === 36) {
        this.navigateToPageByKey(e);
      }
      this.keyAction = "";
    };
    Pager2.prototype.getFocusedTabindexElement = function() {
      var focusedTabIndexElement;
      var tabindexElements = this.element.querySelectorAll('[tabindex]:not([tabindex="-1"])');
      for (var i = 0; i < tabindexElements.length; i++) {
        var element = tabindexElements[parseInt(i.toString(), 10)];
        if (element && (element.classList.contains("e-focused") || element.classList.contains("e-input-focus"))) {
          focusedTabIndexElement = element;
          break;
        }
      }
      return focusedTabIndexElement;
    };
    Pager2.prototype.changeFocusByTab = function(e) {
      var currentItemPagerFocus = this.getFocusedTabindexElement();
      var focusablePagerElements = this.getFocusablePagerElements(this.element, []);
      var dropDownPage = this.getDropDownPage();
      if (focusablePagerElements.length > 0) {
        if (this.pageSizes && dropDownPage && currentItemPagerFocus === focusablePagerElements[focusablePagerElements.length - 1]) {
          dropDownPage.tabIndex = 0;
        } else {
          for (var i = 0; i < focusablePagerElements.length; i++) {
            if (currentItemPagerFocus === focusablePagerElements[parseInt(i.toString(), 10)]) {
              var incrementNumber = i + 1;
              if (incrementNumber < focusablePagerElements.length) {
                e.preventDefault();
                focusablePagerElements[parseInt(incrementNumber.toString(), 10)].focus();
              }
              break;
            }
          }
        }
      }
    };
    Pager2.prototype.changeFocusByShiftTab = function(e) {
      var currentItemPagerFocus = this.getFocusedTabindexElement();
      var focusablePagerElements = this.getFocusablePagerElements(this.element, []);
      var dropDownPage = this.getDropDownPage();
      if (this.pageSizes && dropDownPage && dropDownPage.classList.contains("e-input-focus")) {
        dropDownPage.tabIndex = -1;
        this.addFocus(focusablePagerElements[focusablePagerElements.length - 1], true);
      } else if (focusablePagerElements.length > 0) {
        for (var i = 0; i < focusablePagerElements.length; i++) {
          if (currentItemPagerFocus === focusablePagerElements[parseInt(i.toString(), 10)]) {
            var decrementNumber = i - 1;
            if (decrementNumber >= 0) {
              e.preventDefault();
              focusablePagerElements[parseInt(decrementNumber.toString(), 10)].focus();
            } else if (this.hasParent) {
              var rows = this.parent.getRows();
              var lastRow = rows[rows.length - 1];
              var lastCell = lastRow.lastChild;
              e.preventDefault();
              lastCell.focus();
              this.firstPagerFocus = true;
            }
            break;
          }
        }
      }
    };
    Pager2.prototype.checkFirstPagerFocus = function() {
      if (this.firstPagerFocus) {
        this.firstPagerFocus = false;
        return true;
      }
      return false;
    };
    Pager2.prototype.navigateToPageByEnterOrSpace = function(e) {
      var currentItemPagerFocus = this.getFocusedElement();
      if (currentItemPagerFocus) {
        this.goToPage(parseInt(currentItemPagerFocus.getAttribute("index"), 10));
        var currentActivePage = this.getActiveElement();
        var selectedClass = this.getClass(currentItemPagerFocus);
        var classElement = this.getElementByClass(selectedClass);
        if ((selectedClass === "e-first" || selectedClass === "e-prev" || selectedClass === "e-next" || selectedClass === "e-last" || selectedClass === "e-pp" || selectedClass === "e-np") && classElement && !classElement.classList.contains("e-disable")) {
          classElement.focus();
        } else if (this.checkFocusInAdaptiveMode(currentItemPagerFocus)) {
          this.changeFocusInAdaptiveMode(currentItemPagerFocus);
        } else {
          if (currentActivePage) {
            currentActivePage.focus();
          }
        }
      }
    };
    Pager2.prototype.navigateToPageByKey = function(e) {
      var actionClass = e.keyCode === 37 ? ".e-prev" : e.keyCode === 39 ? ".e-next" : e.keyCode === 35 ? ".e-last" : e.keyCode === 36 ? ".e-first" : "";
      var pagingItem = this.element.querySelector(actionClass);
      var currentItemPagerFocus = this.getFocusedElement();
      if (!isNullOrUndefined(pagingItem) && pagingItem.hasAttribute("index") && !isNaN(parseInt(pagingItem.getAttribute("index"), 10))) {
        this.goToPage(parseInt(pagingItem.getAttribute("index"), 10));
        var currentActivePage = this.getActiveElement();
        if (this.checkFocusInAdaptiveMode(currentItemPagerFocus)) {
          this.changeFocusInAdaptiveMode(currentItemPagerFocus);
        } else {
          if (currentActivePage) {
            currentActivePage.focus();
          }
        }
      }
    };
    Pager2.prototype.checkFocusInAdaptiveMode = function(element) {
      var selectedClass = this.getClass(element);
      return selectedClass === "e-mfirst" || selectedClass === "e-mprev" || selectedClass === "e-mnext" || selectedClass === "e-mlast" ? true : false;
    };
    Pager2.prototype.changeFocusInAdaptiveMode = function(element) {
      var selectedClass = this.getClass(element);
      var classElement = this.getElementByClass(selectedClass);
      if (classElement && classElement.classList.contains("e-disable")) {
        if (selectedClass === "e-mnext" || selectedClass === "e-mlast") {
          var mPrev = this.element.querySelector(".e-mprev");
          mPrev.focus();
        } else {
          this.setPagerFocus();
        }
      }
    };
    Pager2.prototype.removeTabindexLastElements = function() {
      var tabIndexElements = this.element.querySelectorAll('[tabindex]:not([tabindex="-1"])');
      if (tabIndexElements.length > 1) {
        for (var i = 1; i < tabIndexElements.length; i++) {
          var element = tabIndexElements[parseInt(i.toString(), 10)];
          if (element) {
            element.tabIndex = -1;
          }
        }
      }
    };
    Pager2.prototype.getActiveElement = function() {
      return this.element.querySelector(".e-active");
    };
    Pager2.prototype.getDropDownPage = function() {
      var dropDownPageHolder = this.element.querySelector(".e-pagerdropdown");
      var dropDownPage;
      if (dropDownPageHolder) {
        dropDownPage = dropDownPageHolder.children[0];
      }
      return dropDownPage;
    };
    Pager2.prototype.getFocusedElement = function() {
      return this.element.querySelector(".e-focused");
    };
    Pager2.prototype.getClass = function(element) {
      var currentClass;
      var classList2 = ["e-mfirst", "e-mprev", "e-first", "e-prev", "e-pp", "e-np", "e-next", "e-last", "e-mnext", "e-mlast"];
      for (var i = 0; i < classList2.length; i++) {
        if (element && element.classList.contains(classList2[parseInt(i.toString(), 10)])) {
          currentClass = classList2[parseInt(i.toString(), 10)];
          return currentClass;
        }
      }
      return currentClass;
    };
    Pager2.prototype.getElementByClass = function(className) {
      return this.element.querySelector("." + className);
    };
    Pager2.prototype.getFocusablePagerElements = function(element, previousElements) {
      var target = element;
      var targetChildrens = target.children;
      var pagerElements = previousElements;
      for (var i = 0; i < targetChildrens.length; i++) {
        var element_1 = targetChildrens[parseInt(i.toString(), 10)];
        if (element_1.children.length > 0 && !element_1.classList.contains("e-pagesizes")) {
          pagerElements = this.getFocusablePagerElements(element_1, pagerElements);
        } else {
          var tabindexElement = targetChildrens[parseInt(i.toString(), 10)];
          if (tabindexElement.hasAttribute("tabindex") && !element_1.classList.contains("e-disable") && element_1.style.display !== "none" && !isNullOrUndefined(element_1.offsetParent)) {
            pagerElements.push(tabindexElement);
          }
        }
      }
      return pagerElements;
    };
    Pager2.prototype.addFocus = function(element, addFocusClass) {
      if (!isNullOrUndefined(element)) {
        if (addFocusClass) {
          addClass([element], ["e-focused", "e-focus"]);
        }
        element.tabIndex = 0;
      }
    };
    Pager2.prototype.removeFocus = function(element, removeFocusClass) {
      if (removeFocusClass) {
        removeClass([element], ["e-focused", "e-focus"]);
      }
      element.tabIndex = -1;
    };
    Pager2.prototype.getLocalizedLabel = function(key) {
      return this.localeObj.getConstant(key);
    };
    Pager2.prototype.goToPage = function(pageNo) {
      if (this.checkGoToPage(pageNo)) {
        this.currentPage = pageNo;
        this.isInteracted = false;
        this.dataBind();
      }
    };
    Pager2.prototype.setPageSize = function(pageSize) {
      this.pageSize = pageSize;
      this.dataBind();
    };
    Pager2.prototype.checkpagesizes = function() {
      if (this.pageSizes === true || this.pageSizes.length) {
        return true;
      }
      return false;
    };
    Pager2.prototype.checkGoToPage = function(newPageNo, oldPageNo) {
      if (newPageNo !== this.currentPage) {
        this.previousPageNo = this.currentPage;
      }
      if (!isNullOrUndefined(oldPageNo)) {
        this.previousPageNo = oldPageNo;
      }
      if (this.previousPageNo !== newPageNo && newPageNo >= 1 && newPageNo <= this.totalPages) {
        return true;
      }
      return false;
    };
    Pager2.prototype.currentPageChanged = function(newProp, oldProp) {
      if (this.enableQueryString) {
        this.updateQueryString(this.currentPage);
      }
      if (newProp.currentPage !== oldProp.currentPage || newProp.pageSize !== oldProp.pageSize) {
        var args = {
          currentPage: this.currentPage,
          newProp,
          oldProp,
          cancel: false,
          isInteracted: this.isInteracted
        };
        this.trigger("click", args);
        if (!args.cancel) {
          this.isCancel = false;
          this.refresh();
        } else {
          this.isCancel = true;
          if (oldProp && oldProp.pageSize) {
            this.setProperties({
              pageSize: oldProp.pageSize
            }, true);
            if (this.pagerdropdownModule) {
              this.pagerdropdownModule.setDropDownValue("value", oldProp.pageSize);
              this.pagerdropdownModule["dropDownListObject"].text = oldProp.pageSize + "";
            }
          }
        }
      }
    };
    Pager2.prototype.pagerTemplate = function() {
      if (this.isReactTemplate() && this.hasParent) {
        return;
      }
      var result;
      this.element.classList.add("e-pagertemplate");
      this.compile(this.template);
      var data = {
        currentPage: this.currentPage,
        pageSize: this.pageSize,
        pageCount: this.pageCount,
        totalRecordsCount: this.totalRecordsCount,
        totalPages: this.totalPages
      };
      var tempId = this.element.parentElement.id + "_template";
      if (this.isReactTemplate() && !this.isVue) {
        this.getPagerTemplate()(data, this, "pagerTemplate", tempId, null, null, this.element);
        this.renderReactTemplates();
      } else {
        result = this.isVue ? this.getPagerTemplate()(data, this, "pagerTemplate", null, null, null, null, this.root) : this.getPagerTemplate()(data);
        appendChildren(this.element, result);
      }
    };
    Pager2.prototype.updateTotalPages = function() {
      this.totalPages = this.isAllPage ? 1 : this.totalRecordsCount % this.pageSize === 0 ? this.totalRecordsCount / this.pageSize : parseInt((this.totalRecordsCount / this.pageSize).toString(), 10) + 1;
    };
    Pager2.prototype.getPagerTemplate = function() {
      return this.templateFn;
    };
    Pager2.prototype.compile = function(template) {
      if (template) {
        try {
          if (typeof template === "function") {
            this.templateFn = compile(template);
          } else {
            if (document.querySelectorAll(template).length) {
              this.templateFn = compile(document.querySelector(template).innerHTML.trim());
            } else {
              this.templateFn = compile(template);
            }
          }
        } catch (e) {
          this.templateFn = compile(template);
        }
      }
      return void 0;
    };
    Pager2.prototype.refresh = function() {
      if (this.template) {
        if (this.isReactTemplate()) {
          this.updateTotalPages();
          this.notify(this.pageRefresh, {});
        } else {
          if (this.parent && this.parent.isAngular) {
            this.parent.destroyTemplate(["pagerTemplate"]);
          } else {
            this.element.innerHTML = "";
          }
          this.updateTotalPages();
          this.pagerTemplate();
        }
      } else {
        this.updateRTL();
        var focusedTabIndexElement = this.getFocusedTabindexElement();
        this.containerModule.refresh();
        this.removeTabindexLastElements();
        if (focusedTabIndexElement && focusedTabIndexElement.classList.contains("e-disable")) {
          if (this.checkFocusInAdaptiveMode(focusedTabIndexElement)) {
            this.changeFocusInAdaptiveMode(focusedTabIndexElement);
          } else {
            this.setPagerFocusForActiveElement();
          }
        }
        if (this.enablePagerMessage) {
          this.pagerMessageModule.refresh();
        }
        if (this.pagerdropdownModule) {
          this.pagerdropdownModule.refresh();
        }
        if (this.enableExternalMessage && this.externalMessageModule) {
          this.externalMessageModule.refresh();
        }
        this.setTabIndexForFocusLastElement();
        this.resizePager();
      }
    };
    Pager2.prototype.updateRTL = function() {
      if (this.enableRtl) {
        this.element.classList.add("e-rtl");
      } else {
        this.element.classList.remove("e-rtl");
      }
    };
    Pager2.prototype.initLocalization = function() {
      this.localeObj = new L10n(this.getModuleName(), this.defaultConstants, this.locale);
    };
    Pager2.prototype.updateQueryString = function(value) {
      var updatedUrl = this.getUpdatedURL(window.location.href, "page", value.toString());
      window.history.pushState({
        path: updatedUrl
      }, "", updatedUrl);
    };
    Pager2.prototype.getUpdatedURL = function(uri, key, value) {
      var regExp = RegExp;
      var regx = new regExp("([?|&])" + key + "=.*?(&|#|$)", "i");
      if (uri.match(regx)) {
        return uri.replace(regx, "$1" + key + "=" + value + "$2");
      } else {
        var hash = "";
        if (uri.indexOf("#") !== -1) {
          hash = uri.replace(/.*#/, "#");
          uri = uri.replace(/#.*/, "");
        }
        return uri + (uri.indexOf("?") !== -1 ? "&" : "?") + key + "=" + value + hash;
      }
    };
    Pager2.prototype.renderFirstPrevDivForDevice = function() {
      this.element.appendChild(createElement("div", {
        className: "e-mfirst e-icons e-icon-first",
        attrs: {
          title: this.getLocalizedLabel("firstPageTooltip"),
          tabindex: "-1"
        }
      }));
      this.element.appendChild(createElement("div", {
        className: "e-mprev e-icons e-icon-prev",
        attrs: {
          title: this.getLocalizedLabel("previousPageTooltip"),
          tabindex: "-1"
        }
      }));
    };
    Pager2.prototype.renderNextLastDivForDevice = function() {
      this.element.appendChild(createElement("div", {
        className: "e-mnext e-icons e-icon-next",
        attrs: {
          title: this.getLocalizedLabel("nextPageTooltip"),
          tabindex: "-1"
        }
      }));
      this.element.appendChild(createElement("div", {
        className: "e-mlast e-icons e-icon-last",
        attrs: {
          title: this.getLocalizedLabel("lastPageTooltip"),
          tabindex: "-1"
        }
      }));
    };
    Pager2.prototype.addAriaLabel = function() {
      var classList2 = [".e-mfirst", ".e-mprev", ".e-mnext", ".e-mlast"];
      if (!Browser.isDevice) {
        for (var i = 0; i < classList2.length; i++) {
          var element = this.element.querySelector(classList2[parseInt(i.toString(), 10)]);
          element.setAttribute("aria-label", element.getAttribute("title"));
        }
      }
    };
    Pager2.prototype.isReactTemplate = function() {
      return (this.isReact || this.isVue) && this.template && typeof this.template !== "string" && !(this.template.prototype && this.template.prototype.CSPTemplate);
    };
    Pager2.prototype.calculateActualWidth = function() {
      var pagerElements = this.element.querySelectorAll(
        /* tslint:disable-next-line:max-line-length */
        ".e-mfirst, .e-mprev, .e-icon-first, .e-icon-prev, .e-pp:not(.e-disable), .e-numericitem:not(.e-hide), .e-numericitem.e-active.e-hide, .e-np:not(.e-disable), .e-icon-next, .e-icon-last, .e-parentmsgbar, .e-mnext, .e-mlast, .e-pagerdropdown, .e-pagerconstant"
      );
      var actualWidth = 0;
      for (var i = 0; i < pagerElements.length; i++) {
        if (getComputedStyle(pagerElements[parseInt(i.toString(), 10)]).display !== "none") {
          actualWidth += pagerElements[parseInt(i.toString(), 10)].offsetWidth + parseFloat(getComputedStyle(pagerElements[parseInt(i.toString(), 10)]).marginLeft) + parseFloat(getComputedStyle(pagerElements[parseInt(i.toString(), 10)]).marginRight);
        }
      }
      var pagerContainer = this.element.querySelector(".e-pagercontainer");
      actualWidth += parseFloat(getComputedStyle(pagerContainer).marginLeft) + parseFloat(getComputedStyle(pagerContainer).marginRight);
      return actualWidth;
    };
    Pager2.prototype.resizePager = function() {
      var _this = this;
      var isStyleApplied = this.element.classList.contains("e-pager") ? getComputedStyle(this.element).getPropertyValue("border-style").includes("solid") : null;
      if (!this.template && isStyleApplied) {
        var pagerContainer = this.element.querySelector(".e-pagercontainer");
        var actualWidth = this.calculateActualWidth();
        var pagerWidth = this.element.clientWidth - parseFloat(getComputedStyle(this.element).paddingLeft) - parseFloat(getComputedStyle(this.element).paddingRight) - parseFloat(getComputedStyle(this.element).marginLeft) - parseFloat(getComputedStyle(this.element).marginRight);
        var numItems = pagerContainer.querySelectorAll('.e-numericitem:not(.e-hide):not([style*="display: none"]):not(.e-np):not(.e-pp)');
        var hiddenNumItems = pagerContainer.querySelectorAll('.e-numericitem.e-hide:not([style*="display: none"])');
        var hideFrom = numItems.length;
        var showFrom = 1;
        var bufferWidth = !isNullOrUndefined(parentsUntil(this.element, "e-bigger")) ? 10 : 5;
        var NP = pagerContainer.querySelector(".e-np");
        var PP = pagerContainer.querySelector(".e-pp");
        var detailItems = this.element.querySelectorAll('.e-parentmsgbar:not(.e-hide):not([style*="display: none"]), .e-pagesizes:not(.e-hide):not([style*="display: none"])');
        var totDetailWidth_1 = 0;
        if (detailItems.length) {
          detailItems.forEach(function(item) {
            totDetailWidth_1 += item.offsetWidth;
          });
          this.averageDetailWidth = totDetailWidth_1 / detailItems.length;
        }
        var totalWidth = 0;
        for (var i = 0; i < numItems.length; i++) {
          totalWidth += numItems[parseInt(i.toString(), 10)].offsetWidth + parseFloat(getComputedStyle(numItems[parseInt(i.toString(), 10)]).marginLeft) + parseFloat(getComputedStyle(numItems[parseInt(i.toString(), 10)]).marginRight);
        }
        var numericItemWidth = totalWidth / numItems.length;
        if (pagerWidth > 0 && actualWidth >= pagerWidth - (numericItemWidth ? numericItemWidth : 0)) {
          this.isPagerResized = true;
          if (this.currentPage !== this.totalPages) {
            classList(NP, ["e-numericitem", "e-pager-default"], ["e-nextprevitemdisabled", "e-disable"]);
          }
          actualWidth = this.calculateActualWidth();
          var diff = Math.abs(actualWidth - pagerWidth);
          var numToHide = Math.ceil(diff / numericItemWidth);
          numToHide = numToHide === 0 ? 1 : numToHide > numItems.length ? numItems.length - 1 : numToHide;
          for (var i = 1; i <= numToHide; i++) {
            var hideIndex = hideFrom - parseInt(i.toString(), 10);
            numItems = pagerContainer.querySelectorAll('.e-numericitem:not(.e-hide):not([style*="display: none"]):not(.e-np):not(.e-pp)');
            if (this.currentPage !== 1 && (parseInt(numItems[Math.abs(hideIndex)].getAttribute("index"), 10) === this.currentPage || parseInt(numItems[numItems.length - 1].getAttribute("index"), 10) === this.currentPage)) {
              hideIndex = 0;
              classList(PP, ["e-numericitem", "e-pager-default"], ["e-nextprevitemdisabled", "e-disable"]);
            }
            if (numItems[Math.abs(hideIndex)] && !numItems[Math.abs(hideIndex)].classList.contains("e-currentitem")) {
              numItems[Math.abs(hideIndex)].classList.add("e-hide");
            }
          }
          numItems = pagerContainer.querySelectorAll('.e-numericitem:not(.e-hide):not([style*="display: none"]):not(.e-np):not(.e-pp)');
          if (numItems.length <= 1 && detailItems.length && window.innerWidth >= 768) {
            var pagerDetailItemsWidth = this.calculateActualWidth();
            if (pagerDetailItemsWidth > pagerWidth - bufferWidth) {
              var detailtoHide = Math.floor((pagerWidth - (pagerDetailItemsWidth - totDetailWidth_1)) / this.averageDetailWidth);
              detailtoHide = detailItems.length - detailtoHide;
              for (var i = 0; i < (detailtoHide > detailItems.length ? detailItems.length : detailtoHide); i++) {
                detailItems[parseInt(i.toString(), 10)].classList.add("e-hide");
              }
            }
          }
        } else if (actualWidth < pagerWidth && hiddenNumItems.length) {
          var diff = Math.abs(pagerWidth - actualWidth);
          var hiddenDetailItems = this.element.querySelectorAll(".e-parentmsgbar.e-hide, .e-pagesizes.e-hide");
          if (hiddenDetailItems.length && diff > this.averageDetailWidth + this.averageDetailWidth / 4) {
            hiddenDetailItems[hiddenDetailItems.length - 1].classList.remove("e-hide");
          }
          if (diff > numericItemWidth * 2 && !hiddenDetailItems.length && window.innerWidth >= 768) {
            var numToShow = Math.floor(diff / (numericItemWidth + bufferWidth));
            numToShow = numToShow > hiddenNumItems.length ? hiddenNumItems.length : numToShow - 1;
            var lesserIndexItems = Array.from(hiddenNumItems).filter(function(item) {
              return parseInt(item.getAttribute("index"), 10) < _this.currentPage;
            }).sort(function(a, b) {
              return parseInt(b.getAttribute("index"), 10) - parseInt(a.getAttribute("index"), 10);
            });
            var greaterIndexItems = Array.from(hiddenNumItems).filter(function(item) {
              return parseInt(item.getAttribute("index"), 10) > _this.currentPage;
            });
            var showItems = lesserIndexItems.length && lesserIndexItems || greaterIndexItems.length && greaterIndexItems;
            for (var i = 1; i <= numToShow; i++) {
              var showItem = showItems && showItems[Math.abs(showFrom - i)];
              if (showItem) {
                showItem.classList.remove("e-hide");
                if (showItem === showItems[showItems.length - 1]) {
                  showItems = null;
                }
              }
            }
          }
        }
        numItems = pagerContainer.querySelectorAll('.e-numericitem:not(.e-hide):not([style*="display: none"]):not(.e-np):not(.e-pp)');
        if (numItems.length) {
          if (parseInt(numItems[numItems.length - 1].getAttribute("index"), 10) === this.totalPages) {
            classList(NP, ["e-nextprevitemdisabled", "e-disable"], ["e-numericitem", "e-pager-default"]);
          }
          if (parseInt(numItems[0].getAttribute("index"), 10) === 1) {
            classList(PP, ["e-nextprevitemdisabled", "e-disable"], ["e-numericitem", "e-pager-default"]);
          }
          var isLastSet = Array.from(numItems).some(function(item) {
            return parseInt(item.getAttribute("index"), 10) === _this.totalPages;
          });
          var ppIndex = parseInt(numItems[0].getAttribute("index"), 10) - (isLastSet && !isNullOrUndefined(this.avgNumItems) ? this.avgNumItems : numItems.length);
          PP.setAttribute("index", ppIndex < 1 ? "1" : ppIndex.toString());
          NP.setAttribute("index", (parseInt(numItems[numItems.length - 1].getAttribute("index"), 10) + 1).toString());
          this.avgNumItems = isLastSet ? this.avgNumItems : numItems.length;
        }
        if (this.element.offsetWidth < 769 && window.getComputedStyle(this.element.querySelector(".e-mfirst")).getPropertyValue("display") !== "none" && this.pageSizes) {
          this.element.querySelector(".e-pagesizes").classList.remove("e-hide");
          this.element.querySelector(".e-parentmsgbar").classList.remove("e-hide");
          this.element.classList.add("e-adaptive");
          this.element.querySelector(".e-pagenomsg").innerHTML = this.element.offsetWidth < 481 ? this.currentPage + " / " + this.totalPages : this.pagerMessageModule.format(this.getLocalizedLabel("currentPageInfo"), [this.totalRecordsCount === 0 ? 0 : this.currentPage, this.totalPages || 0, this.totalRecordsCount || 0]) + " ";
        } else {
          this.element.classList.remove("e-adaptive");
          this.element.querySelector(".e-pagenomsg").innerHTML = this.pagerMessageModule.format(this.getLocalizedLabel("currentPageInfo"), [this.totalRecordsCount === 0 ? 0 : this.currentPage, this.totalPages || 0, this.totalRecordsCount || 0]) + " ";
        }
      }
    };
    __decorate17([Property(false)], Pager2.prototype, "enableQueryString", void 0);
    __decorate17([Property(false)], Pager2.prototype, "enableExternalMessage", void 0);
    __decorate17([Property(true)], Pager2.prototype, "enablePagerMessage", void 0);
    __decorate17([Property(12)], Pager2.prototype, "pageSize", void 0);
    __decorate17([Property(10)], Pager2.prototype, "pageCount", void 0);
    __decorate17([Property(1)], Pager2.prototype, "currentPage", void 0);
    __decorate17([Property()], Pager2.prototype, "totalRecordsCount", void 0);
    __decorate17([Property()], Pager2.prototype, "externalMessage", void 0);
    __decorate17([Property(false)], Pager2.prototype, "pageSizes", void 0);
    __decorate17([Property()], Pager2.prototype, "template", void 0);
    __decorate17([Property("")], Pager2.prototype, "customText", void 0);
    __decorate17([Event2()], Pager2.prototype, "click", void 0);
    __decorate17([Property("")], Pager2.prototype, "cssClass", void 0);
    __decorate17([Event2()], Pager2.prototype, "dropDownChanged", void 0);
    __decorate17([Event2()], Pager2.prototype, "created", void 0);
    Pager2 = __decorate17([NotifyPropertyChanges], Pager2);
    return Pager2;
  }(Component)
);

// node_modules/@syncfusion/ej2-grids/src/pager/pager-dropdown.js
var PagerDropDown = (
  /** @class */
  function() {
    function PagerDropDown2(pagerModule) {
      this.pagerModule = pagerModule;
    }
    PagerDropDown2.prototype.getModuleName = function() {
      return "pagerdropdown";
    };
    PagerDropDown2.prototype.render = function() {
      var pagerObj = this.pagerModule;
      this.pagerDropDownDiv = createElement("div", {
        className: "e-pagesizes"
      });
      var dropDownDiv = createElement("div", {
        className: "e-pagerdropdown"
      });
      var defaultTextDiv = createElement("div", {
        className: "e-pagerconstant"
      });
      var input = createElement("input", {
        attrs: {
          type: "text",
          tabindex: "-1"
        }
      });
      this.pagerCons = createElement("span", {
        className: "e-constant",
        innerHTML: this.pagerModule.getLocalizedLabel("pagerDropDown")
      });
      dropDownDiv.appendChild(input);
      defaultTextDiv.appendChild(this.pagerCons);
      this.pagerDropDownDiv.appendChild(dropDownDiv);
      this.pagerDropDownDiv.appendChild(defaultTextDiv);
      this.pagerModule.element.appendChild(this.pagerDropDownDiv);
      var pageSizesModule = this.pagerModule.pageSizes;
      var pageSizesArray = pageSizesModule.length ? this.convertValue(pageSizesModule) : [this.pagerModule.getLocalizedLabel("All"), "5", "10", "12", "20"];
      var defaultValue = this.pagerModule.pageSize;
      this.dropDownListObject = new DropDownList({
        dataSource: pageSizesArray,
        value: defaultValue.toString(),
        change: this.onChange.bind(this),
        placeholder: this.pagerModule.getLocalizedLabel("pagerDropDown"),
        cssClass: this.pagerModule.cssClass ? "e-alldrop " + this.pagerModule.cssClass : "e-alldrop"
      });
      this.dropDownListObject.appendTo(input);
      if (pageSizesModule.length) {
        this.dropDownListObject.element.value = this.pagerModule.pageSize.toString();
      }
      pagerObj.pageSize = defaultValue;
      pagerObj.dataBind();
      pagerObj.trigger("dropDownChanged", {
        pageSize: defaultValue
      });
      this.addEventListener();
    };
    PagerDropDown2.prototype.onChange = function(e) {
      if (this.dropDownListObject.value === this.pagerModule.getLocalizedLabel("All")) {
        this.pagerModule.pageSize = this.pagerModule.totalRecordsCount;
        this.pagerModule.isAllPage = true;
        this.refresh();
        e.value = this.pagerModule.pageSize;
        if (document.getElementsByClassName("e-popup-open e-alldrop").length) {
          document.getElementsByClassName("e-popup-open e-alldrop")[0].style.display = "none";
        }
      } else {
        this.pagerModule.pageSize = parseInt(this.dropDownListObject.value, 10);
        this.pagerModule.isAllPage = false;
        if (this.pagerCons.innerHTML !== this.pagerModule.getLocalizedLabel("pagerDropDown")) {
          this.refresh();
        }
      }
      this.pagerModule.dataBind();
      if (!this.pagerModule.isCancel) {
        this.pagerModule.trigger("dropDownChanged", {
          pageSize: this.pagerModule.isAllPage || this.pagerModule.isAllPage === void 0 && this.dropDownListObject.value === this.pagerModule.getLocalizedLabel("All") ? this.pagerModule.totalRecordsCount : parseInt(this.dropDownListObject.value, 10)
        });
      }
    };
    PagerDropDown2.prototype.refresh = function() {
      if (this.pagerCons) {
        if (this.isPageSizeAll(this.pagerModule.pageSize)) {
          this.pagerCons.innerHTML = this.pagerModule.getLocalizedLabel("pagerAllDropDown");
          this.pagerCons.parentElement.classList.add("e-page-all");
        } else {
          this.pagerCons.innerHTML = this.pagerModule.getLocalizedLabel("pagerDropDown");
          this.pagerCons.parentElement.classList.remove("e-page-all");
        }
        this.pagerDropDownDiv.classList.remove("e-hide");
      }
    };
    PagerDropDown2.prototype.beforeValueChange = function(prop) {
      if (typeof prop.newProp.value === "number") {
        var val = prop.newProp.value.toString();
        prop.newProp.value = val;
      }
    };
    PagerDropDown2.prototype.convertValue = function(pageSizeValue) {
      var item = pageSizeValue;
      for (var i = 0; i < item.length; i++) {
        item[parseInt(i.toString(), 10)] = parseInt(item[parseInt(i.toString(), 10)], 10) ? item[parseInt(i.toString(), 10)].toString() : this.pagerModule.getLocalizedLabel(item[parseInt(i.toString(), 10)]) !== "" ? this.pagerModule.getLocalizedLabel(item[parseInt(i.toString(), 10)]) : item[parseInt(i.toString(), 10)];
      }
      return item;
    };
    PagerDropDown2.prototype.isPageSizeAll = function(value) {
      var pageSizeNum = typeof value === "string" && value !== this.pagerModule.getLocalizedLabel("All") ? parseInt(value, 10) : value;
      if (pageSizeNum === this.pagerModule.totalRecordsCount || value === this.pagerModule.getLocalizedLabel("All")) {
        return true;
      } else {
        return false;
      }
    };
    PagerDropDown2.prototype.setDropDownValue = function(prop, value) {
      if (this.dropDownListObject) {
        var isbeforeAll = this.pagerModule.isAllPage;
        this.pagerModule.isAllPage = this.isPageSizeAll(value);
        if (this.pagerModule.isAllPage && typeof this.pagerModule.pageSizes === "object" && this.pagerModule.pageSizes.indexOf("All") === -1) {
          this.pagerModule.isAllPage = false;
        }
        this.pagerModule.checkAll = isbeforeAll && this.pagerModule.isAllPage ? true : false;
        this.dropDownListObject["" + prop] = this.pagerModule.isAllPage ? this.pagerModule.getLocalizedLabel("All") : value;
      }
    };
    PagerDropDown2.prototype.addEventListener = function() {
      this.dropDownListObject.on("beforeValueChange", this.beforeValueChange, this);
    };
    PagerDropDown2.prototype.removeEventListener = function() {
      this.dropDownListObject.off("beforeValueChange", this.beforeValueChange);
    };
    PagerDropDown2.prototype.destroy = function(args) {
      if (this.dropDownListObject && !this.dropDownListObject.isDestroyed) {
        this.removeEventListener();
        this.dropDownListObject.destroy();
        remove(this.pagerDropDownDiv);
      }
    };
    return PagerDropDown2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/pager/external-message.js
var ExternalMessage = (
  /** @class */
  function() {
    function ExternalMessage2(pagerModule) {
      this.pagerModule = pagerModule;
    }
    ExternalMessage2.prototype.getModuleName = function() {
      return "externalMessage";
    };
    ExternalMessage2.prototype.render = function() {
      this.element = createElement("div", {
        className: "e-pagerexternalmsg",
        attrs: {
          "aria-label": this.pagerModule.getLocalizedLabel("ExternalMsg")
        }
      });
      this.pagerModule.element.appendChild(this.element);
      this.refresh();
    };
    ExternalMessage2.prototype.refresh = function() {
      if (this.pagerModule.externalMessage && this.pagerModule.externalMessage.toString().length) {
        this.showMessage();
        this.element.innerHTML = this.pagerModule.externalMessage;
      } else {
        this.hideMessage();
      }
    };
    ExternalMessage2.prototype.hideMessage = function() {
      if (!isNullOrUndefined(this.element)) {
        this.element.style.display = "none";
      }
    };
    ExternalMessage2.prototype.showMessage = function() {
      this.element.style.display = "";
    };
    ExternalMessage2.prototype.destroy = function() {
      if (this.element && this.element.parentElement) {
        remove(this.element);
      }
    };
    return ExternalMessage2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/page.js
var Page = (
  /** @class */
  function() {
    function Page2(parent, pageSettings) {
      this.isInitialRender = true;
      this.isCancel = false;
      Pager.Inject(ExternalMessage, PagerDropDown);
      this.parent = parent;
      this.pageSettings = pageSettings;
      this.addEventListener();
    }
    Page2.prototype.getModuleName = function() {
      return "pager";
    };
    Page2.prototype.render = function() {
      var gObj = this.parent;
      this.pagerDestroy();
      if (!isNullOrUndefined(this.parent.pagerTemplate)) {
        this.pageSettings.template = this.parent.pagerTemplate;
        this.parent.pageTemplateChange = true;
      }
      this.element = this.parent.createElement("div", {
        className: "e-gridpager"
      });
      var pagerObj = extend2({}, extend({}, getActualProperties(this.pageSettings)), {
        click: this.clickHandler.bind(this),
        dropDownChanged: this.onSelect.bind(this),
        enableRtl: gObj.enableRtl,
        locale: gObj.locale,
        created: this.addAriaAttr.bind(this)
      }, ["parentObj", "propName"]);
      pagerObj.cssClass = this.parent.cssClass ? this.parent.cssClass : "";
      this.pagerObj = new Pager(pagerObj, void 0, this.parent);
      this.pagerObj.root = gObj.root ? gObj.root : gObj;
      this.pagerObj.hasParent = true;
      this.pagerObj.on(pagerRefresh, this.renderReactPagerTemplate, this);
      this.pagerObj.allowServerDataBinding = false;
    };
    Page2.prototype.onSelect = function(e) {
      this.pageSettings.pageSize = e.pageSize;
      if (!this.isInitialLoad) {
        this.pageSettings.currentPage = 1;
      }
    };
    Page2.prototype.addAriaAttr = function() {
      if (!this.pageSettings.template) {
        var numericContainerNew = this.parent.createElement("div", {
          className: "e-numericcontainer"
        });
        var pagerContainer = this.element.querySelector(".e-pagercontainer");
        var frag = document.createDocumentFragment();
        var numericContainer = this.element.querySelector(".e-numericcontainer");
        var links = numericContainer.querySelectorAll("a");
        for (var i = 0; i < links.length; i++) {
          if (this.parent.getContentTable()) {
            links[parseInt(i.toString(), 10)].setAttribute("aria-owns", this.parent.getContentTable().id + " " + (i + 1));
          } else {
            links[parseInt(i.toString(), 10)].setAttribute("aria-owns", this.parent.element.getAttribute("id") + "_content_table " + (i + 1));
          }
          var numericContainerDiv = this.parent.createElement("div");
          numericContainerDiv.appendChild(links[parseInt(i.toString(), 10)]);
          frag.appendChild(numericContainerDiv);
        }
        numericContainerNew.appendChild(frag);
        pagerContainer.replaceChild(numericContainerNew, numericContainer);
        var classList2 = [".e-mfirst", ".e-mprev", ".e-first", ".e-prev", ".e-next", ".e-last", ".e-mnext", ".e-mlast"];
        for (var j = 0; j < classList2.length; j++) {
          var element = this.element.querySelector(classList2[parseInt(j.toString(), 10)]);
          if (this.parent.getContentTable()) {
            element.setAttribute("aria-owns", this.parent.getContentTable().id + classList2[parseInt(j.toString(), 10)].replace(".e-", " "));
          }
        }
      }
    };
    Page2.prototype.dataReady = function(e) {
      this.updateModel(e);
    };
    Page2.prototype.refresh = function() {
      this.pagerObj.refresh();
    };
    Page2.prototype.goToPage = function(pageNo) {
      this.pagerObj.goToPage(pageNo);
    };
    Page2.prototype.setPageSize = function(pageSize) {
      this.pagerObj.setPageSize(pageSize);
    };
    Page2.prototype.updateModel = function(e) {
      this.parent.pageSettings.totalRecordsCount = e.count;
      var isAddAction = e.action === "add" && e.requestType === "save" || e.requestType === "batchsave";
      if (this.pagerObj.isAllPage && !isAddAction) {
        this.parent.pageSettings.pageSize = this.parent.pageSettings.totalRecordsCount;
      }
      if (isAddAction) {
        if (this.pagerObj.isAllPage && e.count === this.pageSettings.pageSize) {
          this.pagerObj.setProperties({
            pageSize: e.count
          }, true);
        }
      }
      this.parent.dataBind();
    };
    Page2.prototype.onActionComplete = function(e) {
      this.parent.trigger(actionComplete, extend(e, {
        currentPage: this.parent.pageSettings.currentPage,
        requestType: "paging",
        type: actionComplete
      }));
    };
    Page2.prototype.onPropertyChanged = function(e) {
      if (e.module !== this.getModuleName()) {
        return;
      }
      var newProp = e.properties;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        this.pagerObj["" + prop] = newProp["" + prop];
      }
      this.pagerObj.dataBind();
    };
    Page2.prototype.clickHandler = function(e) {
      var gObj = this.parent;
      if (this.isForceCancel || isActionPrevent(gObj) && !gObj.prevPageMoving && !this.isCancel) {
        if (!this.isForceCancel) {
          if (!isNullOrUndefined(e.newProp) && !isNullOrUndefined(e.newProp.pageSize)) {
            gObj.notify(preventBatch, {
              instance: this,
              handler: this.setPageSize,
              arg1: e.newProp.pageSize
            });
            this.pagerObj.setProperties({
              pageSize: e.oldProp.pageSize
            }, true);
            this.parent.setProperties({
              pageSettings: {
                pageSize: e.oldProp.pageSize
              }
            }, true);
            this.pagerObj.setProperties({
              currentPage: gObj.pageSettings.currentPage === this.pagerObj.currentPage ? this.pagerObj.previousPageNo : gObj.pageSettings.currentPage
            }, true);
          } else if (e.currentPage) {
            gObj.notify(preventBatch, {
              instance: this,
              handler: this.goToPage,
              arg1: e.currentPage
            });
            this.pagerObj.currentPage = gObj.pageSettings.currentPage === this.pagerObj.currentPage ? this.pagerObj.previousPageNo : gObj.pageSettings.currentPage;
          }
          this.isForceCancel = true;
          this.pagerObj.dataBind();
        } else {
          this.isForceCancel = false;
        }
        e.cancel = true;
        return;
      }
      gObj.pageSettings.pageSize = this.pagerObj.pageSize;
      gObj.prevPageMoving = false;
      var prevPage = this.pageSettings.currentPage;
      var args = {
        cancel: false,
        requestType: "paging",
        previousPage: prevPage,
        currentPage: e.currentPage,
        pageSize: gObj.pageSettings.pageSize,
        type: actionBegin
      };
      if (!this.isCancel) {
        this.pageSettings.currentPage = e.currentPage;
        this.parent.notify(modelChanged, args);
        gObj.pageRequireRefresh = false;
      }
      if (args.cancel) {
        e.cancel = true;
        this.parent.setProperties({
          pageSettings: {
            currentPage: prevPage
          }
        }, true);
        this.pagerObj.setProperties({
          currentPage: prevPage
        }, true);
        this.isCancel = true;
        return;
      }
      this.isCancel = false;
      this.parent.requestTypeAction = "paging";
    };
    Page2.prototype.keyPressHandler = function(e) {
      if (e.action in keyActions) {
        e.preventDefault();
        var element = this.element.querySelector(keyActions[e.action]);
        if (!element.classList.contains("e-nextprevitemdisabled")) {
          element.click();
        }
      }
    };
    Page2.prototype.updateExternalMessage = function(message) {
      if (!this.pagerObj.enableExternalMessage) {
        this.pagerObj.enableExternalMessage = true;
        this.pagerObj.dataBind();
      }
      this.pagerObj.externalMessage = message;
      this.pagerObj.dataBind();
    };
    Page2.prototype.appendToElement = function() {
      this.isInitialLoad = true;
      this.parent.element.appendChild(this.element);
      this.parent.setGridPager(this.element);
      this.pagerObj.isReact = this.parent.isReact;
      this.pagerObj.isVue = this.parent.isVue || this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isVue;
      this.pagerObj.appendTo(this.element);
      this.isInitialLoad = false;
    };
    Page2.prototype.enableAfterRender = function(e) {
      if (e.module === this.getModuleName() && e.enable) {
        this.render();
        this.appendToElement();
        if (this.isReactTemplate()) {
          this.pagerObj.updateTotalPages();
          this.created();
        }
      }
    };
    Page2.prototype.addEventListener = function() {
      this.handlers = {
        load: this.render,
        end: this.appendToElement,
        ready: this.dataReady,
        complete: this.onActionComplete,
        updateLayout: this.enableAfterRender,
        inboundChange: this.onPropertyChanged,
        keyPress: this.keyPressHandler,
        created: this.created
      };
      if (this.parent.isDestroyed) {
        return;
      }
      if (this.parent.isReact || this.parent.isVue) {
        this.parent.addEventListener(create, this.handlers.created.bind(this));
      }
      this.evtHandlers = [{
        event: initialLoad,
        handler: this.handlers.load
      }, {
        event: initialEnd,
        handler: this.handlers.end
      }, {
        event: dataReady,
        handler: this.handlers.ready
      }, {
        event: pageComplete,
        handler: this.handlers.complete
      }, {
        event: uiUpdate,
        handler: this.handlers.updateLayout
      }, {
        event: inBoundModelChanged,
        handler: this.handlers.inboundChange
      }, {
        event: keyPressed,
        handler: this.handlers.keyPress
      }, {
        event: destroy,
        handler: this.destroy
      }];
      addRemoveEventListener(this.parent, this.evtHandlers, true, this);
    };
    Page2.prototype.created = function() {
      if (this.isInitialRender && this.isReactTemplate()) {
        this.isInitialRender = false;
        this.renderReactPagerTemplate();
      }
    };
    Page2.prototype.isReactTemplate = function() {
      return (this.parent.isReact || this.parent.isVue) && this.pagerObj.template && typeof this.pagerObj.template !== "string";
    };
    Page2.prototype.renderReactPagerTemplate = function() {
      if (!this.isInitialRender && this.isReactTemplate()) {
        var result = void 0;
        this.parent.destroyTemplate(["pagerTemplate"]);
        this.element.classList.add("e-pagertemplate");
        this.pagerObj.compile(this.pagerObj.template);
        var page = this.parent.pageSettings;
        var data = {
          currentPage: page.currentPage,
          pageSize: page.pageSize,
          pageCount: page.pageCount,
          totalRecordsCount: page.totalRecordsCount,
          totalPages: this.pagerObj.totalPages
        };
        var tempId = this.parent.id + "_pagertemplate";
        if (this.parent.isReact) {
          this.pagerObj.templateFn(data, this.parent, "pagerTemplate", tempId, null, null, this.pagerObj.element);
          this.parent.renderTemplates();
        } else {
          result = this.pagerObj.templateFn(data, this.parent, "pagerTemplate");
          appendChildren(this.pagerObj.element, result);
        }
      }
    };
    Page2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      if (this.parent.isReact || this.parent.isVue) {
        this.parent.removeEventListener(create, this.handlers.created);
      }
      this.parent.off(pagerRefresh, this.renderReactPagerTemplate);
      addRemoveEventListener(this.parent, this.evtHandlers, false);
    };
    Page2.prototype.destroy = function() {
      this.removeEventListener();
      if (this.isReactTemplate()) {
        this.parent.destroyTemplate(["pagerTemplate"]);
      }
      this.pagerObj.destroy();
    };
    Page2.prototype.pagerDestroy = function() {
      if (this.pagerObj && !this.pagerObj.isDestroyed) {
        this.pagerObj.destroy();
        remove(this.element);
      }
    };
    return Page2;
  }()
);
var keyActions = {
  pageUp: ".e-prev",
  pageDown: ".e-next",
  ctrlAltPageDown: ".e-last",
  ctrlAltPageUp: ".e-first",
  altPageUp: ".e-pp",
  altPageDown: ".e-np"
};

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/filter-cell-renderer.js
var __extends32 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var FilterCellRenderer = (
  /** @class */
  function(_super) {
    __extends32(FilterCellRenderer2, _super);
    function FilterCellRenderer2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.element = _this.parent.createElement("TH", {
        className: "e-filterbarcell",
        attrs: {
          role: "columnheader"
        }
      });
      return _this;
    }
    FilterCellRenderer2.prototype.getGui = function() {
      return this.parent.createElement("div");
    };
    FilterCellRenderer2.prototype.render = function(cell, data) {
      var tr = this.parent.element.querySelector(".e-filterbar");
      var node = this.element.cloneNode();
      var innerDIV = this.getGui();
      var input;
      var column = cell.column;
      tr.appendChild(node);
      node.setAttribute("e-mappinguid", column.uid);
      if (column.filterTemplate) {
        var fltrData = {};
        if (data) {
          fltrData[column.field] = data[column.field];
        }
        var col = "column";
        fltrData["" + col] = column;
        if (column.visible) {
          if (this.parent.filterSettings.type === "FilterBar") {
            node.classList.add("e-fltrtemp");
          }
          var isReactCompiler = this.parent.isReact && typeof column.filterTemplate !== "string" && !(column.filterTemplate.prototype && column.filterTemplate.prototype.CSPTemplate);
          var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
          var tempID = this.parent.element.id + column.uid + "filterTemplate";
          if (isReactCompiler || isReactChild) {
            column.getFilterTemplate()(fltrData, this.parent, "filterTemplate", tempID, null, null, node);
            this.parent.renderTemplates();
          } else {
            var element = column.getFilterTemplate()(fltrData, this.parent, "filterTemplate", tempID, null, null, null, this.parent.root);
            appendChildren(node, element);
          }
        } else {
          node.classList.add("e-hide");
        }
      } else {
        if (column.type !== "checkbox") {
          if ((isNullOrUndefined(column.allowFiltering) || column.allowFiltering) && !isNullOrUndefined(column.filterBarTemplate)) {
            node.classList.add("e-fltrtemp");
            attributes(innerDIV, {
              "class": "e-fltrtempdiv"
            });
            if (isNullOrUndefined(column.filterBarTemplate.create)) {
              input = this.parent.createElement("input", {
                id: column.field + "_filterBarcell",
                className: "e-filterUi_input e-filtertext e-fltrTemp",
                attrs: {
                  type: "search",
                  title: column.headerText
                }
              });
              innerDIV.appendChild(input);
            } else {
              var args = {
                column,
                node: Element
              };
              var temp = column.filterBarTemplate.create;
              if (typeof temp === "string") {
                temp = getValue(temp, window);
              }
              input = temp(args);
              if (typeof input === "string") {
                var div = this.parent.createElement("div");
                div.innerHTML = input;
                input = div.firstChild;
              }
              attributes(innerDIV, {
                class: "e-filterUi_input e-filtertext e-fltrTemp",
                title: column.headerText,
                id: column.field + "_filterBarcell"
              });
              innerDIV.appendChild(input);
            }
          } else {
            attributes(innerDIV, {
              "class": "e-filterdiv e-fltrinputdiv"
            });
            input = this.parent.createElement("input", {
              id: column.field + "_filterBarcell",
              className: "e-filtertext",
              attrs: {
                type: "search",
                title: column.headerText + cell.attributes.title,
                value: data[cell.column.field] ? data[cell.column.field] : ""
              }
            });
            innerDIV.appendChild(input);
            var args = {
              element: input,
              floatLabelType: "Never",
              properties: {
                enableRtl: this.parent.enableRtl,
                showClearButton: true,
                cssClass: this.parent.cssClass
              }
            };
            this.parent.filterModule.inputList.push(args);
            Input.createInput(args, this.parent.createElement);
          }
          if (column.allowFiltering === false || column.field === "" || isNullOrUndefined(column.field)) {
            input.setAttribute("disabled", "true");
            input.classList.add("e-disable");
          }
          var clearIconElem = innerDIV.querySelector(".e-clear-icon");
          if (clearIconElem) {
            clearIconElem.setAttribute("title", this.parent.localeObj.getConstant("ClearButton"));
          }
          if (!column.visible) {
            node.classList.add("e-hide");
          }
          this.appendHtml(node, innerDIV);
          if (this.parent.filterSettings.showFilterBarOperator && this.parent.filterSettings.type === "FilterBar" && !this.parent.isPrinting && isNullOrUndefined(column.filterTemplate) && isNullOrUndefined(column.filterBarTemplate)) {
            this.operatorIconRender(innerDIV, column, cell);
          }
          if ((isNullOrUndefined(column.allowFiltering) || column.allowFiltering) && !isNullOrUndefined(column.filterBarTemplate)) {
            var templateWrite = column.filterBarTemplate.write;
            var args = {
              element: input,
              column
            };
            if (typeof templateWrite === "string") {
              templateWrite = getValue(templateWrite, window);
            }
            templateWrite.call(this, args);
          }
        } else {
          if (!column.visible) {
            node.classList.add("e-hide");
          }
        }
      }
      if (this.parent.isFrozenGrid()) {
        addStickyColumnPosition(this.parent, column, node);
      }
      return node;
    };
    FilterCellRenderer2.prototype.appendHtml = function(node, innerHtml) {
      node.appendChild(innerHtml);
      return node;
    };
    FilterCellRenderer2.prototype.operatorIconRender = function(innerDIV, column, cell) {
      var gObj = this.parent;
      var operators;
      var fbicon = this.parent.createElement("input", {
        className: " e-filterbaroperator e-icons e-icon-filter",
        id: cell.column.uid
      });
      innerDIV.querySelector("span").appendChild(fbicon);
      if (column.filter && column.filter.operator) {
        operators = column.filter.operator;
      } else if (gObj.filterSettings.columns.length) {
        for (var i = 0, a = gObj.filterSettings.columns; i < a.length; i++) {
          var col = a[parseInt(i.toString(), 10)];
          if (col.field === column.field) {
            operators = col.operator;
            break;
          } else {
            operators = "equal";
          }
        }
      } else {
        operators = "equal";
      }
      if (!isNullOrUndefined(gObj.filterModule.operators[column.field])) {
        operators = gObj.filterModule.operators[column.field];
      }
      this.dropOptr = new DropDownList({
        fields: {
          text: "text",
          value: "value"
        },
        popupHeight: "auto",
        value: operators,
        width: "0px",
        enabled: column.allowFiltering,
        popupWidth: "auto",
        enableRtl: this.parent.enableRtl,
        change: this.internalEvent.bind(this),
        beforeOpen: function() {
          var operator = gObj.filterModule.customOperators;
          this.dataSource = operator[gObj.getColumnByUid(this.element.id).type + "Operator"];
          for (var i2 = 0; i2 < this.dataSource.length; i2++) {
            if (column.filter && column.filter.operator && isNullOrUndefined(gObj.filterModule.operators[column.field]) && this.dataSource[parseInt(i2.toString(), 10)].value === column.filter.operator) {
              this.value = column.filter.operator;
            }
          }
        },
        cssClass: this.parent.cssClass ? "e-popup-flbar " + this.parent.cssClass : "e-popup-flbar"
      });
      this.dropOptr.appendTo(fbicon);
      var spanElmt = closest(this.dropOptr.element, "span");
      spanElmt.classList.add("e-filterbardropdown");
      spanElmt.removeAttribute("tabindex");
    };
    FilterCellRenderer2.prototype.internalEvent = function(e) {
      var gObj = this.parent;
      var col = gObj.getColumnByUid(e.element.getAttribute("id"));
      e.column = col;
      gObj.filterModule.operators[col.field] = e.value;
      gObj.notify(getFilterBarOperator, e);
    };
    return FilterCellRenderer2;
  }(CellRenderer)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/filter-menu-operator.js
var FlMenuOptrUI = (
  /** @class */
  function() {
    function FlMenuOptrUI2(parent, customFltrOperators, serviceLocator, filterSettings) {
      this.ddOpen = this.dropDownOpen.bind(this);
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      this.filterSettings = filterSettings;
      this.customFilterOperators = customFltrOperators;
      if (this.parent) {
        this.parent.on(filterMenuClose, this.destroyDropDownList, this);
        this.parent.on(destroy, this.destroyDropDownList, this);
      }
    }
    FlMenuOptrUI2.prototype.renderOperatorUI = function(dlgConetntEle, target, column, dlgObj, operator) {
      var _this = this;
      this.dialogObj = dlgObj;
      var optr = column.type + "Operator";
      this.optrData = this.customOptr = !isNullOrUndefined(operator) ? operator : !isNullOrUndefined(this.parent.filterSettings.operators) && !isNullOrUndefined(this.parent.filterSettings.operators["" + optr]) ? this.parent.filterSettings.operators["" + optr] : this.customFilterOperators["" + optr];
      var dropDatasource = this.customOptr;
      var selectedValue = this.dropSelectedVal(column, optr);
      var optrDiv = this.parent.createElement("div", {
        className: "e-flm_optrdiv"
      });
      dlgConetntEle.appendChild(optrDiv);
      var optrInput = this.parent.createElement("input", {
        id: column.uid + "-floptr"
      });
      optrDiv.appendChild(optrInput);
      this.dropOptr = new DropDownList({
        dataSource: dropDatasource,
        fields: {
          text: "text",
          value: "value"
        },
        cssClass: this.parent.cssClass ? "e-popup-flmenu " + this.parent.cssClass : "e-popup-flmenu",
        enableRtl: this.parent.enableRtl,
        text: selectedValue,
        change: function() {
          var valInput = document.querySelector(".e-flmenu-valuediv").querySelector("input");
          if (_this.dropOptr.value === "isempty" || _this.dropOptr.value === "isnotempty" || _this.dropOptr.value === "isnotnull" || _this.dropOptr.value === "isnull") {
            if (!isNullOrUndefined(valInput["ej2_instances"])) {
              valInput["ej2_instances"][0]["enabled"] = false;
            } else {
              valInput.setAttribute("disabled", "true");
            }
          } else if (!isNullOrUndefined(valInput.getAttribute("disabled"))) {
            if (!isNullOrUndefined(valInput["ej2_instances"])) {
              valInput["ej2_instances"][0]["enabled"] = true;
            } else {
              valInput.removeAttribute("disabled");
            }
          }
          toggleFilterUI(_this.dropOptr.value, column.uid, column, column.type, dlgObj, _this.dropOptr["previousValue"]);
        }
      });
      this.dropOptr.addEventListener(open, this.ddOpen);
      this.dropOptr.appendTo("#" + column.uid + "-floptr");
    };
    FlMenuOptrUI2.prototype.renderResponsiveDropDownList = function(args) {
      args.popup.element.style.width = "100%";
    };
    FlMenuOptrUI2.prototype.dropDownOpen = function(args) {
      args.popup.element.style.zIndex = (this.dialogObj.zIndex + 1).toString();
      if (this.parent.enableAdaptiveUI) {
        this.renderResponsiveDropDownList(args);
      }
    };
    FlMenuOptrUI2.prototype.dropSelectedVal = function(col, optr) {
      var selValue = "";
      var columns = this.parent.filterSettings.columns;
      for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
        var column = columns_1[_i];
        if (col.field === column.field || col.isForeignColumn() && col.foreignKeyValue === column.field) {
          var selectedField = new DataManager(this.optrData).executeLocal(new Query().where("value", "equal", column.operator));
          selValue = !isNullOrUndefined(selectedField[0]) ? selectedField[0].text : "";
        }
      }
      if (selValue === "") {
        if (col.filter.operator) {
          var optrLen = Object.keys(this.optrData).length;
          for (var i = 0; i < optrLen; i++) {
            if (this.optrData[parseInt(i.toString(), 10)].value === col.filter.operator) {
              selValue = this.optrData[parseInt(i.toString(), 10)].text;
            }
          }
        } else {
          selValue = this.optrData[0].text;
        }
      }
      return selValue;
    };
    FlMenuOptrUI2.prototype.getFlOperator = function() {
      return this.dropOptr.value;
    };
    FlMenuOptrUI2.prototype.destroyDropDownList = function() {
      if (this.dropOptr.isDestroyed) {
        return;
      }
      this.dropOptr.removeEventListener(open, this.ddOpen);
      this.dropOptr.destroy();
      this.parent.off(filterMenuClose, this.destroyDropDownList);
      this.parent.off(destroy, this.destroyDropDownList);
    };
    return FlMenuOptrUI2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/string-filter-ui.js
MultiSelect.Inject(CheckBoxSelection);
var StringFilterUI = (
  /** @class */
  function() {
    function StringFilterUI2(parent, serviceLocator, filterSettings) {
      this.parent = parent;
      this.serLocator = serviceLocator;
      this.filterSettings = filterSettings;
      if (this.parent) {
        this.parent.on(filterMenuClose, this.destroy, this);
        this.parent.on(destroy, this.destroy, this);
      }
    }
    StringFilterUI2.prototype.create = function(args) {
      this.instance = this.parent.createElement("input", {
        className: "e-flmenu-input",
        id: "strui-" + args.column.uid
      });
      args.target.appendChild(this.instance);
      this.multiSelectCheckBoxInstance = this.parent.createElement("input", {
        className: "multiselect-input",
        id: "multiselectstrui-" + args.column.uid
      });
      args.target.appendChild(this.multiSelectCheckBoxInstance);
      this.dialogObj = args.dialogObj;
      this.processDataOperation(args);
      this.createMultiSelectDropDown(args);
      toggleFilterUI(args.getOptrInstance.dropOptr.value, args.column.uid, args.column, args.column.type, args.dialogObj, args.getOptrInstance.dropOptr["previousValue"]);
    };
    StringFilterUI2.prototype.processDataOperation = function(args) {
      var _this = this;
      if (args.column.isForeignColumn()) {
        this.parent.getDataModule().dataManager.executeQuery(this.parent.getDataModule().generateQuery(true)).then(function(result) {
          _this.getAutoCompleteOptions(args, result);
          toggleFilterUI(args.getOptrInstance.dropOptr.value, args.column.uid, args.column, args.column.type, args.dialogObj, args.getOptrInstance.dropOptr["previousValue"]);
        });
        return;
      }
      this.getAutoCompleteOptions(args);
    };
    StringFilterUI2.prototype.getAutoCompleteOptions = function(args, result) {
      var isForeignColumn = args.column.isForeignColumn();
      var foreignColumnQuery;
      if (isForeignColumn) {
        var filteredData = CheckBoxFilterBase.getDistinct(result.result, args.column.field).records || [];
        var filterQuery = void 0;
        for (var i = 0; i < filteredData.length; i++) {
          if (filterQuery) {
            filterQuery = filterQuery.or(args.column.field, "contains", filteredData[parseInt(i.toString(), 10)][args.column.field], this.parent.filterSettings.enableCaseSensitivity, this.parent.filterSettings.ignoreAccent);
          } else {
            filterQuery = new Predicate(args.column.field, "contains", filteredData[parseInt(i.toString(), 10)][args.column.field], this.parent.filterSettings.enableCaseSensitivity, this.parent.filterSettings.ignoreAccent);
          }
        }
        foreignColumnQuery = new Query().where(filterQuery);
        foreignColumnQuery.params = this.parent.query.params;
      }
      var dataSource = isForeignColumn ? args.column.dataSource : this.parent.dataSource;
      var fields = {
        value: isForeignColumn ? args.column.foreignKeyValue : args.column.field
      };
      var autoComplete = new AutoComplete(extend({
        dataSource: dataSource instanceof DataManager ? dataSource : new DataManager(dataSource),
        fields,
        locale: this.parent.locale,
        enableRtl: this.parent.enableRtl,
        query: isForeignColumn ? foreignColumnQuery : this.parent.getDataModule().generateQuery(true, true),
        sortOrder: "Ascending",
        cssClass: this.parent.cssClass ? "e-popup-flmenu " + this.parent.cssClass : "e-popup-flmenu",
        autofill: true,
        placeholder: args.localizeText.getConstant("EnterValue"),
        actionBegin: function() {
          if (this.query.queries.length && this.query.queries[0].fn === "onWhere" && this.query.queries[0].e && this.query.queries[0].e.predicates) {
            for (var i2 = 0; i2 < this.query.queries[0].e.predicates.length; i2++) {
              if (this.properties.fields.value === this.query.queries[0].e.predicates["" + i2].field) {
                this.query.queries[0].e.predicates.splice(i2, 1);
                i2 = i2 - 1;
              }
            }
            if (!this.query.queries[0].e.predicates.length) {
              this.query.queries.splice(0, 1);
            }
          }
        }
      }, args.column.filter.params));
      this.acFocus = this.focus(autoComplete, args);
      this.acComplete = this.actionComplete(autoComplete);
      this.acOpen = this.openPopup.bind(this);
      autoComplete.addEventListener(focus, this.acFocus);
      autoComplete.addEventListener(open, this.acOpen);
      autoComplete.addEventListener(actionComplete, this.acComplete);
      if (dataSource && "result" in dataSource) {
        var query = this.parent.getQuery ? this.parent.getQuery().clone() : new Query();
        var defObj = eventPromise({
          requestType: "stringfilterrequest"
        }, query);
        this.parent.trigger(dataStateChange, defObj.state);
        var def = defObj.deffered;
        def.promise.then(function(e) {
          autoComplete.dataSource = new DataManager(e);
        });
      }
      this.actObj = autoComplete;
      this.actObj.appendTo(this.instance);
      if (isForeignColumn) {
        this.parent.filterModule.filterModule.afterRenderFilterUI();
      }
    };
    StringFilterUI2.prototype.write = function(args) {
      var operatorDropdown = this.parent.filterModule.filterModule.getOperatorDropdown();
      var stringObject = this.getAutoCompleteInstance(args.column.uid);
      var multiSelectObject = this.getMultiSelectInstance(args.column.uid);
      if (operatorDropdown.value === "in" || operatorDropdown.value === "notin") {
        multiSelectObject.value = Array.isArray(args.filteredValue) ? args.filteredValue : [];
      } else {
        if (args.filteredValue !== "" && !isNullOrUndefined(args.filteredValue) && !Array.isArray(args.filteredValue)) {
          stringObject.value = args.filteredValue;
        }
      }
    };
    StringFilterUI2.prototype.read = function(element, column, filterOptr, filterObj) {
      if (filterOptr === "in" || filterOptr === "notin") {
        var filterValue = this.getMultiSelectInstance(column.uid).value;
        filterObj.filterByColumn(column.field, filterOptr, filterValue, "and", this.parent.filterSettings.enableCaseSensitivity);
      } else {
        var autoCompleteObject = this.getAutoCompleteInstance(column.uid);
        var filterValue = autoCompleteObject.value;
        if (Browser.isDevice) {
          autoCompleteObject.hidePopup();
          autoCompleteObject.focusOut();
        }
        if (isNullOrUndefined(filterValue) || filterValue === "") {
          filterValue = null;
        }
        filterObj.filterByColumn(column.field, filterOptr, filterValue, "and", this.parent.filterSettings.enableCaseSensitivity);
      }
    };
    StringFilterUI2.prototype.getAutoCompleteInstance = function(uid2) {
      return document.querySelector("#strui-" + uid2).ej2_instances[0];
    };
    StringFilterUI2.prototype.getMultiSelectInstance = function(uid2) {
      return document.querySelector("#multiselectstrui-" + uid2).ej2_instances[0];
    };
    StringFilterUI2.prototype.createMultiSelectDropDown = function(args) {
      var isForeignColumn = args.column.isForeignColumn();
      var dataSource = isForeignColumn ? args.column.dataSource : this.parent.dataSource;
      var fields = isForeignColumn ? args.column.foreignKeyValue : args.column.field;
      this.multiSelectObj = new MultiSelect(extend({
        dataSource: dataSource instanceof DataManager ? dataSource : new DataManager(dataSource),
        fields: {
          text: fields,
          value: fields
        },
        mode: "CheckBox",
        showDropDownIcon: true,
        popupHeight: "300px",
        showSelectAll: true,
        query: new Query().select(fields),
        cssClass: this.parent.cssClass ? "e-multiselect-flmenu " + this.parent.cssClass : "e-multiselect-flmenu",
        locale: this.parent.locale,
        enableRtl: this.parent.enableRtl
      }, args.column.filter.params));
      this.dialogObj = args.dialogObj;
      this.dropdownOpen = this.openPopup.bind(this);
      this.dropdownComplete = this.actionCompleteMultiCheckBox(fields);
      this.multiSelectObj.addEventListener(open, this.dropdownOpen);
      this.multiSelectObj.addEventListener(actionComplete, this.dropdownComplete);
      this.multiSelectObj.appendTo(this.multiSelectCheckBoxInstance);
    };
    StringFilterUI2.prototype.openPopup = function(args) {
      getZIndexCalcualtion(args, this.dialogObj);
    };
    StringFilterUI2.prototype.focus = function(actObj, args) {
      return function() {
        actObj.filterType = args.getOptrInstance.getFlOperator();
      };
    };
    StringFilterUI2.prototype.actionComplete = function(actObj) {
      return function(e) {
        e.result = e.result.filter(function(obj, index, arr) {
          return arr.map(function(mapObj) {
            return getValue(actObj.fields.value, mapObj);
          }).indexOf(getValue(actObj.fields.value, obj)) === index;
        });
      };
    };
    StringFilterUI2.prototype.actionCompleteMultiCheckBox = function(fields) {
      return function(e) {
        e.result = DataUtil.distinct(e.result, fields, true);
      };
    };
    StringFilterUI2.prototype.destroy = function() {
      this.parent.off(filterMenuClose, this.destroy);
      this.parent.off(destroy, this.destroy);
      if (this.actObj && !this.actObj.isDestroyed) {
        this.actObj.removeEventListener(focus, this.acFocus);
        this.actObj.removeEventListener(open, this.acOpen);
        this.actObj.removeEventListener(actionComplete, this.acComplete);
        this.actObj.destroy();
      }
      if (this.multiSelectObj && !this.multiSelectObj.isDestroyed) {
        this.multiSelectObj.removeEventListener(open, this.dropdownOpen);
        this.multiSelectObj.removeEventListener(actionComplete, this.dropdownComplete);
        this.multiSelectObj.destroy();
      }
    };
    return StringFilterUI2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/number-filter-ui.js
MultiSelect.Inject(CheckBoxSelection);
var NumberFilterUI = (
  /** @class */
  function() {
    function NumberFilterUI2(parent, serviceLocator, filterSettings) {
      this.filterSettings = filterSettings;
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      if (this.parent) {
        this.parent.on(filterMenuClose, this.destroy, this);
        this.parent.on(destroy, this.destroy, this);
      }
    }
    NumberFilterUI2.prototype.keyEventHandler = function(args) {
      if (args.keyCode === 13 || args.keyCode === 9) {
        var evt = document.createEvent("HTMLEvents");
        evt.initEvent("change", false, true);
        this.dispatchEvent(evt);
      }
    };
    NumberFilterUI2.prototype.create = function(args) {
      this.numericInstance = this.parent.createElement("input", {
        className: "e-flmenu-input",
        id: "numberui-" + args.column.uid
      });
      this.multiSelectCheckBoxInstance = this.parent.createElement("input", {
        className: "multiselect-input",
        id: "multiselectnumberui-" + args.column.uid
      });
      args.target.appendChild(this.numericInstance);
      args.target.appendChild(this.multiSelectCheckBoxInstance);
      this.createNumericTextBox(args);
      this.createMultiSelectDropDown(args);
      toggleFilterUI(args.getOptrInstance.dropOptr.value, args.column.uid, args.column, args.column.type, args.dialogObj, args.getOptrInstance.dropOptr["previousValue"]);
    };
    NumberFilterUI2.prototype.write = function(args) {
      var operatorDropdown = this.parent.filterModule.filterModule.getOperatorDropdown();
      var numericObject = this.getNumericInstance(args.column.uid);
      var multiSelectObject = this.getMultiSelectInstance(args.column.uid);
      if (operatorDropdown.value === "in" || operatorDropdown.value === "notin") {
        multiSelectObject.value = Array.isArray(args.filteredValue) ? args.filteredValue : [];
      } else {
        numericObject.element.addEventListener("keydown", this.keyEventHandler);
        if (!Array.isArray(args.filteredValue)) {
          numericObject.value = args.filteredValue;
        }
      }
    };
    NumberFilterUI2.prototype.read = function(element, column, filterOptr, filterObj) {
      if (filterOptr === "in" || filterOptr === "notin") {
        var filterValue = this.getMultiSelectInstance(column.uid).value;
        filterObj.filterByColumn(column.field, filterOptr, filterValue, "and", true);
      } else {
        var filterValue = this.getNumericInstance(column.uid).value;
        filterObj.filterByColumn(column.field, filterOptr, filterValue, "and", true);
      }
    };
    NumberFilterUI2.prototype.createNumericTextBox = function(args) {
      this.numericTxtObj = new NumericTextBox(extend({
        format: typeof args.column.format === "string" || isUndefined(args.column.format) ? args.column.format : args.column.format.format,
        locale: this.parent.locale,
        cssClass: this.parent.cssClass ? "e-popup-flmenu " + this.parent.cssClass : "e-popup-flmenu",
        placeholder: args.localizeText.getConstant("EnterValue"),
        enableRtl: this.parent.enableRtl
      }, args.column.filter.params));
      this.numericTxtObj.appendTo(this.numericInstance);
    };
    NumberFilterUI2.prototype.createMultiSelectDropDown = function(args) {
      var isForeignColumn = args.column.isForeignColumn();
      var dataSource = isForeignColumn ? args.column.dataSource : this.parent.dataSource;
      var fields = isForeignColumn ? args.column.foreignKeyValue : args.column.field;
      this.multiSelectObj = new MultiSelect(extend({
        dataSource: dataSource instanceof DataManager ? dataSource : new DataManager(dataSource),
        fields: {
          text: fields,
          value: fields
        },
        mode: "CheckBox",
        showDropDownIcon: true,
        popupHeight: "300px",
        showSelectAll: true,
        query: new Query().select(fields),
        cssClass: this.parent.cssClass ? "e-multiselect-flmenu " + this.parent.cssClass : "e-multiselect-flmenu",
        locale: this.parent.locale,
        enableRtl: this.parent.enableRtl
      }, args.column.filter.params));
      this.dialogObj = args.dialogObj;
      this.dropdownOpen = this.openPopup.bind(this);
      this.dropdownComplete = this.actionComplete(fields);
      this.multiSelectObj.addEventListener(open, this.dropdownOpen);
      this.multiSelectObj.addEventListener(actionComplete, this.dropdownComplete);
      this.multiSelectObj.appendTo(this.multiSelectCheckBoxInstance);
    };
    NumberFilterUI2.prototype.getNumericInstance = function(uid2) {
      return document.querySelector("#numberui-" + uid2).ej2_instances[0];
    };
    NumberFilterUI2.prototype.getMultiSelectInstance = function(uid2) {
      return document.querySelector("#multiselectnumberui-" + uid2).ej2_instances[0];
    };
    NumberFilterUI2.prototype.openPopup = function(args) {
      getZIndexCalcualtion(args, this.dialogObj);
    };
    NumberFilterUI2.prototype.actionComplete = function(fields) {
      return function(e) {
        e.result = DataUtil.distinct(e.result, fields, true);
      };
    };
    NumberFilterUI2.prototype.destroy = function() {
      this.parent.off(filterMenuClose, this.destroy);
      this.parent.off(destroy, this.destroy);
      if (this.numericTxtObj && !this.numericTxtObj.isDestroyed) {
        this.numericTxtObj.destroy();
      }
      if (this.multiSelectObj && !this.multiSelectObj.isDestroyed) {
        this.multiSelectObj.removeEventListener(open, this.dropdownOpen);
        this.multiSelectObj.removeEventListener(actionComplete, this.dropdownComplete);
        this.multiSelectObj.destroy();
      }
    };
    return NumberFilterUI2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/boolean-filter-ui.js
MultiSelect.Inject(CheckBoxSelection);
var BooleanFilterUI = (
  /** @class */
  function() {
    function BooleanFilterUI2(parent, serviceLocator, filterSettings) {
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      this.filterSettings = filterSettings;
      if (this.parent) {
        this.parent.on(filterMenuClose, this.destroy, this);
        this.parent.on(destroy, this.destroy, this);
      }
    }
    BooleanFilterUI2.prototype.create = function(args) {
      this.elem = this.parent.createElement("input", {
        className: "e-flmenu-input",
        id: "bool-ui-" + args.column.uid
      });
      args.target.appendChild(this.elem);
      this.multiSelectElement = this.parent.createElement("input", {
        className: "multiselect-input",
        id: "multiselectbool-ui-" + args.column.uid
      });
      args.target.appendChild(this.multiSelectElement);
      this.createDropDownList(args);
      this.createMultiSelectDropDown(args);
      toggleFilterUI(args.getOptrInstance.dropOptr.value, args.column.uid, args.column, args.column.type, args.dialogObj, args.getOptrInstance.dropOptr["previousValue"]);
    };
    BooleanFilterUI2.prototype.write = function(args) {
      var operatorDropdown = this.parent.filterModule.filterModule.getOperatorDropdown();
      var dropdownObject = this.getBooleanInstance(args.column.uid);
      var multiSelectObject = this.getMultiSelectInstance(args.column.uid);
      if (operatorDropdown.value === "in" || operatorDropdown.value === "notin") {
        multiSelectObject.value = Array.isArray(args.filteredValue) ? args.filteredValue : [];
      } else {
        if (!isNullOrUndefined(args.filteredValue) && !Array.isArray(args.filteredValue)) {
          dropdownObject.value = args.filteredValue;
        }
      }
    };
    BooleanFilterUI2.prototype.read = function(element, column, filterOptr, filterObj) {
      if (filterOptr === "in" || filterOptr === "notin") {
        var filterValue = this.getMultiSelectInstance(column.uid).value;
        filterObj.filterByColumn(column.field, filterOptr, filterValue, "and", true);
      } else {
        var dropdownObject = this.getBooleanInstance(column.uid);
        var filterValue = dropdownObject.value;
        filterObj.filterByColumn(column.field, filterOptr, filterValue, "and", false);
      }
    };
    BooleanFilterUI2.prototype.createDropDownList = function(args) {
      var _this = this;
      var isForeignColumn = args.column.isForeignColumn();
      var dataSource = isForeignColumn ? args.column.dataSource : this.parent.dataSource;
      var fields = isForeignColumn ? args.column.foreignKeyValue : args.column.field;
      this.dialogObj = args.dialogObj;
      this.dropInstance = new DropDownList(extend({
        dataSource: dataSource instanceof DataManager ? dataSource : new DataManager(dataSource),
        query: new Query().select(fields),
        fields: {
          text: fields,
          value: fields
        },
        placeholder: args.localizeText.getConstant("SelectValue"),
        cssClass: this.parent.cssClass ? "e-popup-flmenu " + this.parent.cssClass : "e-popup-flmenu",
        locale: this.parent.locale,
        enableRtl: this.parent.enableRtl
      }, args.column.filter.params));
      this.dropdownOpen = this.openPopup.bind(this);
      this.dropdownComplete = this.actionComplete(fields);
      this.dropInstance.addEventListener(open, this.dropdownOpen);
      this.dropInstance.addEventListener(actionComplete, this.dropdownComplete);
      if (dataSource && "result" in dataSource) {
        var query = this.parent.getQuery ? this.parent.getQuery().clone() : new Query();
        var defObj = eventPromise({
          requestType: "booleanfilterrequest"
        }, query);
        this.parent.trigger(dataStateChange, defObj.state);
        var def = defObj.deffered;
        def.promise.then(function(e) {
          _this.dropInstance.dataSource = new DataManager(e);
          _this.dropInstance.dataBind();
          var columns = _this.parent.filterSettings.columns;
          for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
            var column = columns_1[_i];
            if (args.column.uid === column.uid) {
              _this.dropInstance.value = column.value;
            }
          }
        });
      }
      this.dropInstance.appendTo(this.elem);
    };
    BooleanFilterUI2.prototype.createMultiSelectDropDown = function(args) {
      var isForeignColumn = args.column.isForeignColumn();
      var dataSource = isForeignColumn ? args.column.dataSource : this.parent.dataSource;
      var fields = isForeignColumn ? args.column.foreignKeyValue : args.column.field;
      this.multiSelectCheckBoxInstance = new MultiSelect(extend({
        dataSource: dataSource instanceof DataManager ? dataSource : new DataManager(dataSource),
        fields: {
          text: fields,
          value: fields
        },
        mode: "CheckBox",
        showDropDownIcon: true,
        popupHeight: "300px",
        showSelectAll: true,
        query: new Query().select(fields),
        cssClass: this.parent.cssClass ? "e-multiselect-flmenu " + this.parent.cssClass : "e-multiselect-flmenu",
        locale: this.parent.locale,
        enableRtl: this.parent.enableRtl
      }, args.column.filter.params));
      this.dialogObj = args.dialogObj;
      this.multiSelectDropdownOpen = this.openPopup.bind(this);
      this.multiSelectDropdownComplete = this.actionComplete(fields);
      this.multiSelectCheckBoxInstance.addEventListener(open, this.multiSelectDropdownOpen);
      this.multiSelectCheckBoxInstance.addEventListener(actionComplete, this.multiSelectDropdownComplete);
      this.multiSelectCheckBoxInstance.appendTo(this.multiSelectElement);
    };
    BooleanFilterUI2.prototype.getBooleanInstance = function(uid2) {
      return document.querySelector("#bool-ui-" + uid2).ej2_instances[0];
    };
    BooleanFilterUI2.prototype.getMultiSelectInstance = function(uid2) {
      return document.querySelector("#multiselectbool-ui-" + uid2).ej2_instances[0];
    };
    BooleanFilterUI2.prototype.openPopup = function(args) {
      getZIndexCalcualtion(args, this.dialogObj);
    };
    BooleanFilterUI2.prototype.actionComplete = function(fields) {
      return function(e) {
        e.result = DataUtil.distinct(e.result, fields, true);
      };
    };
    BooleanFilterUI2.prototype.destroy = function() {
      this.parent.off(filterMenuClose, this.destroy);
      this.parent.off(destroy, this.destroy);
      if (this.dropInstance && !this.dropInstance.isDestroyed) {
        this.dropInstance.removeEventListener(open, this.dropdownOpen);
        this.dropInstance.removeEventListener(actionComplete, this.dropdownComplete);
        this.dropInstance.destroy();
      }
      if (this.multiSelectCheckBoxInstance && !this.multiSelectCheckBoxInstance.isDestroyed) {
        this.multiSelectCheckBoxInstance.removeEventListener(open, this.multiSelectDropdownOpen);
        this.multiSelectCheckBoxInstance.removeEventListener(actionComplete, this.multiSelectDropdownComplete);
        this.multiSelectCheckBoxInstance.destroy();
      }
    };
    return BooleanFilterUI2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/date-filter-ui.js
var DateFilterUI = (
  /** @class */
  function() {
    function DateFilterUI2(parent, serviceLocator, filterSettings) {
      this.dpOpen = this.openPopup.bind(this);
      this.parent = parent;
      this.locator = serviceLocator;
      this.fltrSettings = filterSettings;
      if (this.parent) {
        this.parent.on(filterMenuClose, this.destroy, this);
        this.parent.on(destroy, this.destroy, this);
      }
    }
    DateFilterUI2.prototype.create = function(args) {
      var format = getCustomDateFormat(args.column.format, args.column.type);
      this.dialogObj = args.dialogObj;
      this.inputElem = this.parent.createElement("input", {
        className: "e-flmenu-input",
        id: "dateui-" + args.column.uid
      });
      args.target.appendChild(this.inputElem);
      if (args.column.type === "date" || args.column.type === "dateonly") {
        this.datePickerObj = new DatePicker(extend({
          format,
          cssClass: this.parent.cssClass ? "e-popup-flmenu " + this.parent.cssClass : "e-popup-flmenu",
          placeholder: args.localizeText.getConstant("ChooseDate"),
          width: "100%",
          locale: this.parent.locale,
          enableRtl: this.parent.enableRtl
        }, args.column.filter.params));
      } else if (args.column.type === "datetime") {
        this.datePickerObj = new DateTimePicker(extend({
          format,
          cssClass: this.parent.cssClass ? "e-popup-flmenu " + this.parent.cssClass : "e-popup-flmenu",
          placeholder: args.localizeText.getConstant("ChooseDate"),
          width: "100%",
          locale: this.parent.locale,
          enableRtl: this.parent.enableRtl
        }, args.column.filter.params));
      }
      this.datePickerObj.addEventListener(open, this.dpOpen);
      this.datePickerObj.appendTo(this.inputElem);
    };
    DateFilterUI2.prototype.write = function(args) {
      var dateuiObj = document.querySelector("#dateui-" + args.column.uid).ej2_instances[0];
      dateuiObj.value = !isNullOrUndefined(args.filteredValue) ? new Date(args.filteredValue) : null;
    };
    DateFilterUI2.prototype.read = function(element, column, filterOptr, filterObj) {
      var dateuiObj = document.querySelector("#dateui-" + column.uid).ej2_instances[0];
      var filterValue = dateuiObj.value;
      filterValue = isNullOrUndefined(filterValue) ? null : filterValue;
      filterObj.filterByColumn(column.field, filterOptr, filterValue, "and", true);
    };
    DateFilterUI2.prototype.openPopup = function(args) {
      args.popup.element.style.zIndex = (this.dialogObj.zIndex + 1).toString();
    };
    DateFilterUI2.prototype.destroy = function() {
      this.parent.off(filterMenuClose, this.destroy);
      this.parent.off(destroy, this.destroy);
      if (isNullOrUndefined(this.datePickerObj) || this.datePickerObj.isDestroyed) {
        return;
      }
      this.datePickerObj.removeEventListener(open, this.dpOpen);
      this.datePickerObj.destroy();
    };
    return DateFilterUI2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/checkbox-filter.js
var CheckBoxFilter = (
  /** @class */
  function() {
    function CheckBoxFilter2(parent, filterSettings, serviceLocator) {
      this.parent = parent;
      this.isresetFocus = true;
      this.checkBoxBase = new CheckBoxFilterBase(parent);
      this.addEventListener();
    }
    CheckBoxFilter2.prototype.destroy = function() {
      this.removeEventListener();
      this.checkBoxBase.closeDialog();
    };
    CheckBoxFilter2.prototype.openDialog = function(options) {
      this.checkBoxBase.openDialog(options);
      this.parent.log("column_type_missing", {
        column: options.column
      });
    };
    CheckBoxFilter2.prototype.closeDialog = function() {
      this.destroy();
      if (this.isresetFocus) {
        this.parent.notify(restoreFocus, {});
      }
    };
    CheckBoxFilter2.prototype.closeResponsiveDialog = function() {
      this.checkBoxBase.closeDialog();
    };
    CheckBoxFilter2.prototype.getModuleName = function() {
      return "checkboxFilter";
    };
    CheckBoxFilter2.prototype.actionBegin = function(args) {
      this.parent.trigger(actionBegin, args);
    };
    CheckBoxFilter2.prototype.actionComplete = function(args) {
      this.parent.trigger(actionComplete, args);
    };
    CheckBoxFilter2.prototype.actionPrevent = function(args) {
      if (isActionPrevent(this.parent)) {
        this.parent.notify(preventBatch, args);
        args.cancel = true;
      }
    };
    CheckBoxFilter2.prototype.clearCustomFilter = function(col) {
      this.checkBoxBase.clearFilter(col);
    };
    CheckBoxFilter2.prototype.applyCustomFilter = function() {
      this.checkBoxBase.fltrBtnHandler();
      this.checkBoxBase.closeDialog();
    };
    CheckBoxFilter2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(cBoxFltrBegin, this.actionBegin, this);
      this.parent.on(cBoxFltrComplete, this.actionComplete, this);
      this.parent.on(fltrPrevent, this.actionPrevent, this);
    };
    CheckBoxFilter2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(cBoxFltrBegin, this.actionBegin);
      this.parent.off(cBoxFltrComplete, this.actionComplete);
      this.parent.off(fltrPrevent, this.actionPrevent);
    };
    return CheckBoxFilter2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/excel-filter.js
var __extends33 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ExcelFilter = (
  /** @class */
  function(_super) {
    __extends33(ExcelFilter2, _super);
    function ExcelFilter2(parent, filterSettings, serviceLocator, customFltrOperators) {
      var _this = _super.call(this, parent, filterSettings, serviceLocator) || this;
      _this.parent = parent;
      _this.isresetFocus = true;
      _this.excelFilterBase = new ExcelFilterBase(parent, customFltrOperators);
      return _this;
    }
    ExcelFilter2.prototype.destroy = function() {
      this.excelFilterBase.closeDialog();
    };
    ExcelFilter2.prototype.openDialog = function(options) {
      this.excelFilterBase.openDialog(options);
    };
    ExcelFilter2.prototype.closeDialog = function() {
      this.excelFilterBase.closeDialog();
      if (this.isresetFocus) {
        this.parent.notify(restoreFocus, {});
      }
    };
    ExcelFilter2.prototype.clearCustomFilter = function(col) {
      this.excelFilterBase.clearFilter(col);
    };
    ExcelFilter2.prototype.closeResponsiveDialog = function(isCustomFilter) {
      if (isCustomFilter) {
        this.excelFilterBase.removeDialog();
      } else {
        this.closeDialog();
      }
    };
    ExcelFilter2.prototype.applyCustomFilter = function(args) {
      if (!args.isCustomFilter) {
        this.excelFilterBase.fltrBtnHandler();
        this.excelFilterBase.closeDialog();
      } else {
        this.excelFilterBase.filterBtnClick(args.col.field);
      }
    };
    ExcelFilter2.prototype.filterByColumn = function(fieldName, firstOperator, firstValue, predicate, matchCase, ignoreAccent, secondOperator, secondValue) {
      this.excelFilterBase.filterByColumn(fieldName, firstOperator, firstValue, predicate, matchCase, ignoreAccent, secondOperator, secondValue);
    };
    ExcelFilter2.prototype.getFilterUIInfo = function() {
      return this.excelFilterBase.getFilterUIInfo();
    };
    ExcelFilter2.prototype.getModuleName = function() {
      return "excelFilter";
    };
    return ExcelFilter2;
  }(CheckBoxFilter)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/filter-menu-renderer.js
var FilterMenuRenderer = (
  /** @class */
  function() {
    function FilterMenuRenderer2(parent, filterSettings, serviceLocator, customFltrOperators, fltrObj) {
      this.isDialogOpen = false;
      this.maxHeight = "350px";
      this.isMenuCheck = false;
      this.colTypes = {
        "string": StringFilterUI,
        "number": NumberFilterUI,
        "date": DateFilterUI,
        "dateonly": DateFilterUI,
        "boolean": BooleanFilterUI,
        "datetime": DateFilterUI
      };
      this.parent = parent;
      this.filterSettings = filterSettings;
      this.serviceLocator = serviceLocator;
      this.customFilterOperators = customFltrOperators;
      this.filterObj = fltrObj;
      this.flMuiObj = new FlMenuOptrUI(this.parent, this.customFilterOperators, this.serviceLocator);
      this.l10n = this.serviceLocator.getService("localization");
      this.menuFilterBase = new CheckBoxFilterBase(parent);
    }
    FilterMenuRenderer2.prototype.clearCustomFilter = function(col) {
      this.clearBtnClick(col);
    };
    FilterMenuRenderer2.prototype.applyCustomFilter = function(args) {
      this.filterBtnClick(args.col);
    };
    FilterMenuRenderer2.prototype.openDialog = function(args) {
      this.options = args;
      this.col = this.parent.getColumnByField(args.field);
      if (isNullOrUndefined(this.col.filter) || isNullOrUndefined(this.col.filter.type) || this.col.filter.type === "Menu") {
        this.renderDlgContent(args.target, this.col);
      }
    };
    FilterMenuRenderer2.prototype.closeDialog = function(target) {
      var _this = this;
      if (!this.dlgObj) {
        return;
      }
      var elem = document.getElementById(this.dlgObj.element.id);
      if (this.dlgObj && !this.dlgObj.isDestroyed && elem) {
        var argument = {
          cancel: false,
          column: this.col,
          target,
          element: elem
        };
        if (argument.cancel) {
          this.parent.isColumnMenuFilterClosing = false;
          return;
        }
        this.parent.notify(filterMenuClose, argument);
        this.isDialogOpen = false;
        if (this.isMenuCheck) {
          this.menuFilterBase.unWireEvents();
          this.parent.off(cBoxFltrComplete, this.actionComplete);
          this.isMenuCheck = false;
        }
        var column = this.col;
        if (!isNullOrUndefined(column.filter) && !isNullOrUndefined(column.filter.ui) && !isNullOrUndefined(column.filter.ui.destroy)) {
          var temp = column.filter.ui.destroy;
          if (typeof temp === "string") {
            temp = getValue(temp, window);
          }
          temp();
        }
        if ((this.parent.isReact || this.parent.isVue) && this.col.filterTemplate && this.col.filterTemplate instanceof Function) {
          this.parent.clearTemplate(["filterTemplate"], void 0, function() {
            _this.dlgObj.destroy();
          });
        } else {
          this.dlgObj.destroy();
          remove(elem);
        }
        var gridPopup = document.getElementById(this.parent.element.id + "_e-popup");
        if (!isNullOrUndefined(gridPopup)) {
          remove(gridPopup);
          gridPopup = null;
        }
        if (!isNullOrUndefined(this.dlgObj["storeActiveElement"])) {
          this.dlgObj["storeActiveElement"].focus();
        }
      }
      this.parent.notify(filterDialogClose, {});
    };
    FilterMenuRenderer2.prototype.renderDlgContent = function(target, column) {
      var args = {
        requestType: filterBeforeOpen,
        columnName: column.field,
        columnType: column.type
      };
      var filterModel = "filterModel";
      args["" + filterModel] = this;
      this.parent.trigger(actionBegin, args);
      var mainDiv = this.parent.createElement("div", {
        className: "e-flmenu-maindiv",
        id: column.uid + "-flmenu"
      });
      this.dlgDiv = this.parent.createElement("div", {
        className: "e-flmenu",
        id: column.uid + "-flmdlg"
      });
      this.dlgDiv.setAttribute("aria-label", this.l10n.getConstant("FilterMenuDialogARIA"));
      if (this.parent.enableAdaptiveUI) {
        var responsiveCnt = document.querySelector(".e-resfilter > .e-dlg-content > .e-mainfilterdiv");
        responsiveCnt.appendChild(this.dlgDiv);
      } else {
        this.parent.element.appendChild(this.dlgDiv);
      }
      this.dlgObj = new Dialog({
        showCloseIcon: false,
        closeOnEscape: false,
        locale: this.parent.locale,
        visible: false,
        enableRtl: this.parent.enableRtl,
        created: this.dialogCreated.bind(this, target, column),
        position: this.parent.element.classList.contains("e-device") ? {
          X: "center",
          Y: "center"
        } : {
          X: "",
          Y: ""
        },
        target: this.parent.element.classList.contains("e-device") ? document.body : this.parent.element,
        buttons: [{
          click: this.filterBtnClick.bind(this, column),
          buttonModel: {
            content: this.l10n.getConstant("FilterButton"),
            isPrimary: true,
            cssClass: this.parent.cssClass ? "e-flmenu-okbtn " + this.parent.cssClass : "e-flmenu-okbtn"
          }
        }, {
          click: this.clearBtnClick.bind(this, column),
          buttonModel: {
            content: this.l10n.getConstant("ClearButton"),
            cssClass: this.parent.cssClass ? "e-flmenu-cancelbtn " + this.parent.cssClass : "e-flmenu-cancelbtn"
          }
        }],
        content: mainDiv,
        width: !isNullOrUndefined(parentsUntil(target, "e-bigger")) || this.parent.element.classList.contains("e-device") ? 260 : 250,
        animationSettings: {
          effect: "None"
        },
        cssClass: this.parent.cssClass ? "e-filter-popup " + this.parent.cssClass : "e-filter-popup"
      });
      var isStringTemplate = "isStringTemplate";
      this.dlgObj["" + isStringTemplate] = true;
      this.renderResponsiveDialog();
      this.dlgObj.appendTo(this.dlgDiv);
    };
    FilterMenuRenderer2.prototype.renderResponsiveDialog = function() {
      var gObj = this.parent;
      if (gObj.enableAdaptiveUI) {
        this.dlgObj.position = {
          X: "",
          Y: ""
        };
        this.dlgObj.target = document.querySelector(".e-resfilter > .e-dlg-content > .e-mainfilterdiv");
        this.dlgObj.width = "100%";
        this.dlgObj.isModal = false;
        this.dlgObj.buttons = [{}];
      }
    };
    FilterMenuRenderer2.prototype.dialogCreated = function(target, column) {
      if (!Browser.isDevice && target) {
        getFilterMenuPostion(target, this.dlgObj);
      } else if (!this.options.isResponsiveFilter) {
        this.dlgObj.position = {
          X: "center",
          Y: "center"
        };
      }
      this.currentDialogCreatedColumn = column;
      this.renderFilterUI(target, column);
      if (!(column.isForeignColumn() && !(!isNullOrUndefined(column.filter) && !isNullOrUndefined(column.filter.ui) && !isNullOrUndefined(column.filter.ui.create)))) {
        this.afterRenderFilterUI();
      }
      var isReactCompiler = this.parent.isReact && typeof column.filterTemplate !== "string";
      var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
      if (!isNullOrUndefined(column.filterTemplate) && !(isReactCompiler || isReactChild)) {
        this.dlgDiv.querySelector(".e-flmenu-valuediv").firstElementChild.focus();
        this.dlgDiv.querySelector(".e-flmenu-valuediv").firstElementChild.classList.add("e-input-focus");
      } else if (!isNullOrUndefined(this.dlgDiv.querySelector(".e-flmenu-input"))) {
        this.dlgDiv.querySelector(".e-flmenu-input").focus();
        this.dlgDiv.querySelector(".e-flmenu-input").parentElement.classList.add("e-input-focus");
      }
    };
    FilterMenuRenderer2.prototype.afterRenderFilterUI = function() {
      var column = this.currentDialogCreatedColumn;
      if (column.showColumnMenu) {
        this.parent.notify(filterDialogCreated, {});
      }
      if (this.parent.enableAdaptiveUI) {
        this.dlgObj.element.style.left = "0px";
        this.dlgObj.element.style.maxHeight = "none";
      } else {
        this.dlgObj.element.style.maxHeight = this.maxHeight;
      }
      this.dlgObj.show();
      if (this.parent.getContent().firstElementChild.offsetHeight < this.dlgObj.element.offsetHeight && !parentsUntil(this.parent.element, "e-gantt-dialog")) {
        resetDialogAppend(this.parent, this.dlgObj);
      }
      var optrInput = this.dlgObj.element.querySelector(".e-flm_optrdiv").querySelector("input");
      var valInput = this.dlgObj.element.querySelector(".e-flmenu-valuediv").querySelector("input");
      if (optrInput.value === "Empty" || optrInput.value === "Not Empty" || optrInput.value === "Null" || optrInput.value === "Not Null") {
        if (!isNullOrUndefined(valInput["ej2_instances"])) {
          valInput["ej2_instances"][0]["enabled"] = false;
        } else {
          valInput.setAttribute("disabled", "true");
        }
      } else if (!isNullOrUndefined(valInput && valInput.getAttribute("disabled"))) {
        if (!isNullOrUndefined(valInput["ej2_instances"])) {
          valInput["ej2_instances"][0]["enabled"] = true;
        } else {
          valInput.removeAttribute("disabled");
        }
      }
      if (!column.filterTemplate) {
        this.writeMethod(column, this.dlgObj.element.querySelector("#" + column.uid + "-flmenu"));
      }
      var args = {
        requestType: filterAfterOpen,
        columnName: column.field,
        columnType: column.type
      };
      var filterModel = "filterModel";
      args["" + filterModel] = this;
      this.isDialogOpen = true;
      if (!this.isMenuCheck) {
        this.parent.trigger(actionComplete, args);
      }
    };
    FilterMenuRenderer2.prototype.renderFilterUI = function(target, col) {
      var dlgConetntEle = this.dlgObj.element.querySelector(".e-flmenu-maindiv");
      this.parent.log("column_type_missing", {
        column: col
      });
      this.renderOperatorUI(dlgConetntEle, target, col);
      this.renderFlValueUI(dlgConetntEle, target, col);
    };
    FilterMenuRenderer2.prototype.renderOperatorUI = function(dlgConetntEle, target, column) {
      this.flMuiObj.renderOperatorUI(dlgConetntEle, target, column, this.dlgObj, this.filterObj.menuOperator);
    };
    FilterMenuRenderer2.prototype.renderFlValueUI = function(dlgConetntEle, target, column) {
      var valueDiv = this.parent.createElement("div", {
        className: "e-flmenu-valuediv"
      });
      var fObj = this.filterObj;
      dlgConetntEle.appendChild(valueDiv);
      var instanceofFilterUI = new this.colTypes[column.type](this.parent, this.serviceLocator, this.parent.filterSettings);
      if (column.filterTemplate) {
        var fltrData = {};
        var valueInString = "value";
        fltrData[column.field] = fltrData["" + valueInString] = fObj.values[column.field];
        if (column.foreignKeyValue) {
          fltrData[column.foreignKeyValue] = fObj.values[column.field];
          fltrData[column.field] = void 0;
        }
        var col = "column";
        fltrData["" + col] = column;
        var isReactCompiler = this.parent.isReact && typeof column.filterTemplate !== "string" && !(column.filterTemplate.prototype && column.filterTemplate.prototype.CSPTemplate);
        var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
        var tempID = this.parent.element.id + column.uid + "filterTemplate";
        if (isReactCompiler || isReactChild) {
          column.getFilterTemplate()(fltrData, this.parent, "filterTemplate", tempID, null, null, valueDiv);
          this.parent.renderTemplates();
        } else {
          var compElement = column.getFilterTemplate()(fltrData, this.parent, "filterTemplate", tempID, null, null, null, this.parent.root);
          appendChildren(valueDiv, compElement);
        }
        if (this.isMenuCheck) {
          this.menuFilterBase.cBox = this.dlgObj.element.querySelector(".e-checkboxlist.e-fields");
          this.menuFilterBase.wireEvents();
          this.parent.on(cBoxFltrComplete, this.actionComplete, this);
          this.menuFilterBase.getAllData();
        }
      } else {
        if (!isNullOrUndefined(column.filter) && !isNullOrUndefined(column.filter.ui) && !isNullOrUndefined(column.filter.ui.create)) {
          var temp = column.filter.ui.create;
          if (typeof temp === "string") {
            temp = getValue(temp, window);
          }
          temp({
            column,
            target: valueDiv,
            getOptrInstance: this.flMuiObj,
            dialogObj: this.dlgObj
          });
        } else {
          instanceofFilterUI.create({
            column,
            target: valueDiv,
            getOptrInstance: this.flMuiObj,
            localizeText: this.l10n,
            dialogObj: this.dlgObj
          });
        }
      }
    };
    FilterMenuRenderer2.prototype.writeMethod = function(col, dlgContentEle) {
      var flValue;
      var target = dlgContentEle.querySelector(".e-flmenu-valinput");
      var instanceofFilterUI = new this.colTypes[col.type](this.parent, this.serviceLocator, this.parent.filterSettings);
      var columns = this.filterSettings.columns;
      for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
        var column = columns_1[_i];
        if (col.uid === column.uid) {
          flValue = column.value;
        }
      }
      if (!isNullOrUndefined(col.filter) && !isNullOrUndefined(col.filter.ui) && !isNullOrUndefined(col.filter.ui.write)) {
        var temp = col.filter.ui.write;
        if (typeof temp === "string") {
          temp = getValue(temp, window);
        }
        temp({
          column: col,
          target,
          parent: this.parent,
          filteredValue: flValue
        });
      } else {
        instanceofFilterUI.write({
          column: col,
          target,
          parent: this.parent,
          filteredValue: flValue
        });
      }
    };
    FilterMenuRenderer2.prototype.filterBtnClick = function(col) {
      var flValue;
      var targ = this.dlgObj.element.querySelector(".e-flmenu-valuediv input");
      var flOptrValue = this.flMuiObj.getFlOperator();
      var instanceofFilterUI = new this.colTypes[col.type](this.parent, this.serviceLocator, this.parent.filterSettings);
      if (col.filterTemplate) {
        var element = this.dlgDiv.querySelector(".e-flmenu-valuediv");
        var fltrValue = void 0;
        if (element.children[0].value) {
          fltrValue = element.children[0].value;
        } else {
          if (!isNullOrUndefined(element.children[0].ej2_instances)) {
            fltrValue = (this.parent.isAngular ? element.children[0] : element.querySelector("input")).ej2_instances[0].value;
          } else {
            var eControl = element.querySelector(".e-control");
            if (!isNullOrUndefined(eControl)) {
              fltrValue = col.type === "boolean" ? eControl.checked : !isNullOrUndefined(eControl.ej2_instances) ? eControl.ej2_instances[0].value : eControl.value;
            }
          }
        }
        this.filterObj.filterByColumn(col.field, flOptrValue, fltrValue);
      } else {
        if (!isNullOrUndefined(col.filter) && !isNullOrUndefined(col.filter.ui) && !isNullOrUndefined(col.filter.ui.read)) {
          var temp = col.filter.ui.read;
          if (typeof temp === "string") {
            temp = getValue(temp, window);
          }
          flValue = temp({
            element: targ,
            column: col,
            operator: flOptrValue,
            fltrObj: this.filterObj
          });
        } else {
          instanceofFilterUI.read(targ, col, flOptrValue, this.filterObj);
        }
      }
      this.closeDialog();
      if (this.parent.showColumnMenu) {
        this.parent.notify(afterFilterColumnMenuClose, {});
      }
    };
    FilterMenuRenderer2.prototype.closeResponsiveDialog = function() {
      this.closeDialog();
    };
    FilterMenuRenderer2.prototype.clearBtnClick = function(column) {
      this.filterObj.removeFilteredColsByField(column.field);
      this.closeDialog();
      if (this.parent.showColumnMenu) {
        this.parent.notify(afterFilterColumnMenuClose, {});
      }
    };
    FilterMenuRenderer2.prototype.destroy = function() {
      this.closeDialog();
    };
    FilterMenuRenderer2.prototype.getFilterUIInfo = function() {
      return {
        field: this.col.field,
        operator: this.flMuiObj.getFlOperator()
      };
    };
    FilterMenuRenderer2.prototype.getOperatorDropdown = function() {
      return this.flMuiObj.dropOptr;
    };
    FilterMenuRenderer2.prototype.renderCheckBoxMenu = function() {
      this.isMenuCheck = true;
      this.menuFilterBase.updateModel(this.options);
      this.menuFilterBase.getAndSetChkElem(this.options);
      this.dlgObj.buttons = [{
        click: this.menuFilterBase.btnClick.bind(this.menuFilterBase),
        buttonModel: {
          content: this.menuFilterBase.getLocalizedLabel("FilterButton"),
          cssClass: "e-primary",
          isPrimary: true
        }
      }, {
        click: this.menuFilterBase.btnClick.bind(this.menuFilterBase),
        buttonModel: {
          cssClass: "e-flat",
          content: this.menuFilterBase.getLocalizedLabel("ClearButton")
        }
      }];
      this.menuFilterBase.dialogObj = this.dlgObj;
      this.menuFilterBase.dlg = this.dlgObj.element;
      this.menuFilterBase.dlg.classList.add("e-menucheckbox");
      this.menuFilterBase.dlg.classList.remove("e-checkboxfilter");
      this.maxHeight = "800px";
      return this.menuFilterBase.sBox.innerHTML;
    };
    FilterMenuRenderer2.prototype.actionComplete = function(args) {
      if (this.isMenuCheck) {
        this.parent.trigger(actionComplete, args);
      }
    };
    return FilterMenuRenderer2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/filter.js
var Filter = (
  /** @class */
  function() {
    function Filter2(parent, filterSettings, serviceLocator) {
      this.predicate = "and";
      this.contentRefresh = true;
      this.filterByMethod = true;
      this.refresh = true;
      this.values = {};
      this.operators = {};
      this.cellText = {};
      this.nextFlMenuOpen = "";
      this.type = {
        "Menu": FilterMenuRenderer,
        "CheckBox": CheckBoxFilter,
        "Excel": ExcelFilter
      };
      this.filterOperators = {
        contains: "contains",
        endsWith: "endswith",
        equal: "equal",
        greaterThan: "greaterthan",
        greaterThanOrEqual: "greaterthanorequal",
        lessThan: "lessthan",
        lessThanOrEqual: "lessthanorequal",
        notEqual: "notequal",
        startsWith: "startswith",
        wildCard: "wildcard",
        isNull: "isnull",
        notNull: "notnull",
        like: "like"
      };
      this.fltrDlgDetails = {
        field: "",
        isOpen: false
      };
      this.skipNumberInput = ["=", " ", "!"];
      this.skipStringInput = [">", "<", "="];
      this.actualPredicate = {};
      this.inputList = [];
      this.parent = parent;
      this.filterSettings = filterSettings;
      this.serviceLocator = serviceLocator;
      this.addEventListener();
      this.setFullScreenDialog();
    }
    Filter2.prototype.render = function(e) {
      if (DataUtil.getObject("args.isFrozen", e)) {
        return;
      }
      var gObj = this.parent;
      this.l10n = this.serviceLocator.getService("localization");
      this.getLocalizedCustomOperators();
      if (this.parent.filterSettings.type === "FilterBar") {
        if (gObj.columns.length) {
          var fltrElem = this.parent.element.querySelector(".e-filterbar");
          if (fltrElem) {
            remove(fltrElem);
          }
          var rowRenderer = new RowRenderer(this.serviceLocator, CellType.Filter, gObj);
          var cellrender = this.serviceLocator.getService("cellRendererFactory");
          cellrender.addCellRenderer(CellType.Filter, new FilterCellRenderer(this.parent, this.serviceLocator));
          this.valueFormatter = this.serviceLocator.getService("valueFormatter");
          rowRenderer.element = this.parent.createElement("tr", {
            className: "e-filterbar",
            attrs: {
              role: "row"
            }
          });
          var row2 = this.generateRow();
          row2.data = this.values;
          this.parent.getHeaderContent().querySelector("thead:not(.e-masked-thead)").appendChild(rowRenderer.element);
          var rowdrag = this.parent.element.querySelector(".e-rowdragheader");
          this.element = rowRenderer.render(row2, gObj.getColumns(), null, null, rowRenderer.element);
          if (this.element.querySelectorAll(".e-leftfreeze").length && (this.element.querySelectorAll(".e-indentcell").length || this.element.querySelectorAll(".e-grouptopleftcell").length)) {
            var td = this.element.querySelectorAll(".e-indentcell, .e-grouptopleftcell");
            for (var i = 0; i < td.length; i++) {
              td[parseInt(i.toString(), 10)].classList.add("e-leftfreeze");
              applyStickyLeftRightPosition(td[parseInt(i.toString(), 10)], i * 30, this.parent.enableRtl, "Left");
            }
          }
          addFixedColumnBorder(this.element);
          var detail = this.element.querySelector(".e-detailheadercell");
          if (detail) {
            detail.className = "e-filterbarcell e-mastercell";
          }
          if (rowdrag) {
            if (rowdrag.classList.contains("e-leftfreeze")) {
              rowdrag.className = "e-dragheadercell e-mastercell e-leftfreeze";
            } else {
              rowdrag.className = "e-filterbarcell e-mastercell";
            }
          }
          var gCells = [].slice.call(this.element.getElementsByClassName("e-grouptopleftcell"));
          if (gCells.length) {
            gCells[gCells.length - 1].classList.add("e-lastgrouptopleftcell");
          }
          this.wireEvents();
          this.parent.notify(freezeRender, {
            case: "filter"
          });
        }
      }
    };
    Filter2.prototype.showCustomFilter = function(enable) {
      this.responsiveDialogRenderer.isCustomDialog = enable;
      this.responsiveDialogRenderer.showResponsiveDialog(this.column);
    };
    Filter2.prototype.renderResponsiveChangeAction = function(args) {
      this.responsiveDialogRenderer.action = args.action;
    };
    Filter2.prototype.setFilterModel = function(col) {
      var type = col.filter.type || this.parent.filterSettings.type;
      this.filterModule = new this.type["" + type](this.parent, this.parent.filterSettings, this.serviceLocator, this.customOperators, this);
    };
    Filter2.prototype.destroy = function() {
      var gridElement = this.parent.element;
      if (!gridElement || !gridElement.querySelector("." + gridHeader) && !gridElement.querySelector("." + gridContent)) {
        return;
      }
      if (this.filterModule) {
        this.filterModule.destroy();
      }
      if (!this.parent.refreshing && (this.parent.isDestroyed || !this.parent.allowFiltering)) {
        this.filterSettings.columns = [];
      }
      this.updateFilterMsg();
      this.removeEventListener();
      this.unWireEvents();
      if (this.filterSettings.type === "FilterBar" && !this.parent.isDestroyed) {
        if (this.filterSettings.showFilterBarOperator) {
          var dropdownlist = [].slice.call(this.element.getElementsByClassName("e-filterbaroperator"));
          for (var i = 0; i < dropdownlist.length; i++) {
            if (dropdownlist[parseInt(i.toString(), 10)].ej2_instances[0]) {
              dropdownlist[parseInt(i.toString(), 10)].ej2_instances[0].destroy();
            }
          }
        }
        this.parent.getColumns().map(function(column) {
          if (column.filterBarTemplate && !isNullOrUndefined(column.filterBarTemplate.destroy)) {
            var destroyFn = column.filterBarTemplate.destroy;
            if (typeof destroyFn === "string") {
              destroyFn = getValue(destroyFn, window);
            }
            destroyFn();
          }
        });
      }
      if (this.element) {
        if (this.element.parentElement) {
          for (var i = 0; i < this.inputList.length; i++) {
            Input.destroy(this.inputList[parseInt(i.toString(), 10)], this.inputList[parseInt(i.toString(), 10)].element.nextElementSibling);
            remove(this.inputList[parseInt(i.toString(), 10)].element);
          }
          this.inputList = [];
          remove(this.element);
          this.element = null;
        }
        var filterBarElement = this.parent.getHeaderContent().querySelector(".e-filterbar");
        if (filterBarElement) {
          remove(filterBarElement);
        }
      }
    };
    Filter2.prototype.setFullScreenDialog = function() {
      if (this.serviceLocator) {
        this.serviceLocator.registerAdaptiveService(this, this.parent.enableAdaptiveUI, ResponsiveDialogAction.isFilter);
      }
    };
    Filter2.prototype.generateRow = function() {
      var options = {};
      var row2 = new Row(options);
      row2.cells = this.generateCells();
      return row2;
    };
    Filter2.prototype.generateCells = function() {
      var cells = [];
      if (this.parent.allowGrouping) {
        for (var c = 0, len = this.parent.groupSettings.columns.length; c < len; c++) {
          cells.push(this.generateCell({}, CellType.HeaderIndent));
        }
      }
      if (this.parent.detailTemplate || this.parent.childGrid) {
        cells.push(this.generateCell({}, CellType.DetailHeader));
      }
      if (this.parent.isRowDragable() && this.parent.getFrozenMode() !== "Right") {
        cells.push(this.generateCell({}, CellType.RowDragHIcon));
      }
      for (var _i = 0, _a = this.parent.getColumns(); _i < _a.length; _i++) {
        var dummy = _a[_i];
        cells.push(this.generateCell(dummy));
      }
      if (this.parent.isRowDragable() && this.parent.getFrozenMode() === "Right") {
        cells.push(this.generateCell({}, CellType.RowDragHIcon));
      }
      return cells;
    };
    Filter2.prototype.generateCell = function(column, cellType) {
      var opt = {
        "visible": column.visible,
        "isDataCell": false,
        "rowId": "",
        "column": column,
        "cellType": cellType ? cellType : CellType.Filter,
        "attributes": {
          title: this.l10n.getConstant("FilterbarTitle")
        }
      };
      return new Cell(opt);
    };
    Filter2.prototype.updateModel = function() {
      var col = this.column.isForeignColumn() || this.parent.enableColumnVirtualization ? this.parent.getColumnByUid(this.column.uid, true) : this.parent.getColumnByField(this.fieldName);
      this.filterObjIndex = this.getFilteredColsIndexByField(col);
      this.prevFilterObject = this.filterSettings.columns[this.filterObjIndex];
      var arrayVal = Array.isArray(this.value) && this.value.length ? this.value : [this.value];
      var moduleName = this.parent.dataSource.adaptor && this.parent.dataSource.adaptor.getModuleName ? this.parent.dataSource.adaptor.getModuleName() : void 0;
      for (var i = 0, len = arrayVal.length; i < len; i++) {
        var field = col.isForeignColumn() ? col.foreignKeyValue : this.fieldName;
        var isMenuNotEqual = this.operator === "notequal";
        if (this.operator === "in" || this.operator === "notin") {
          if (this.parent.getDataModule().isRemote() && (col.type === "date" || col.type === "dateonly" || col.type === "datetime")) {
            arrayVal = DataUtil.parse.arrayReplacer(arrayVal);
          }
          this.currentFilterObject = {
            field,
            uid: col.uid,
            isForeignKey: col.isForeignColumn(),
            operator: this.operator,
            value: arrayVal,
            predicate: this.predicate,
            matchCase: this.matchCase,
            ignoreAccent: this.ignoreAccent,
            actualFilterValue: {},
            actualOperator: {}
          };
          len = 0;
        } else {
          this.currentFilterObject = {
            field,
            uid: col.uid,
            isForeignKey: col.isForeignColumn(),
            operator: this.operator,
            value: arrayVal[parseInt(i.toString(), 10)],
            predicate: this.predicate,
            matchCase: this.matchCase,
            ignoreAccent: this.ignoreAccent,
            actualFilterValue: {},
            actualOperator: {}
          };
        }
        var index = this.getFilteredColsIndexByField(col);
        if (index > -1 && (!Array.isArray(this.value) || Array.isArray(this.value) && (this.operator === "in" || this.operator === "notin"))) {
          this.filterSettings.columns[parseInt(index.toString(), 10)] = this.currentFilterObject;
        } else {
          this.filterSettings.columns.push(this.currentFilterObject);
        }
        if (!this.column.isForeignColumn() && this.prevFilterObject && (isNullOrUndefined(this.prevFilterObject.value) || this.prevFilterObject.value === "") && (this.prevFilterObject.operator === "equal" || this.prevFilterObject.operator === "notequal") && moduleName !== "ODataAdaptor" && moduleName !== "ODataV4Adaptor") {
          this.handleExistingFilterCleanup(field);
        }
        if (!this.column.isForeignColumn() && isNullOrUndefined(this.value) && (this.operator === "equal" || this.operator === "notequal") && moduleName !== "ODataAdaptor" && moduleName !== "ODataV4Adaptor") {
          this.handleExistingFilterCleanup(field);
          if (col.type === "string") {
            this.filterSettings.columns.push({
              field,
              ignoreAccent: this.ignoreAccent,
              matchCase: this.matchCase,
              operator: this.operator,
              predicate: isMenuNotEqual ? "and" : "or",
              value: ""
            });
          }
          this.filterSettings.columns.push({
            field,
            ignoreAccent: this.ignoreAccent,
            matchCase: this.matchCase,
            operator: this.operator,
            predicate: isMenuNotEqual ? "and" : "or",
            value: void 0
          });
          this.filterSettings.columns.push({
            field,
            ignoreAccent: this.ignoreAccent,
            matchCase: this.matchCase,
            operator: this.operator,
            predicate: isMenuNotEqual ? "and" : "or",
            value: null
          });
        }
      }
      this.filterSettings.columns = this.filterSettings.columns;
      this.parent.dataBind();
    };
    Filter2.prototype.handleExistingFilterCleanup = function(field) {
      for (var i = 0; i < this.filterSettings.columns.length; i++) {
        if (this.filterSettings.columns["" + i].field === field && (this.filterSettings.columns["" + i].operator === "equal" || this.filterSettings.columns["" + i].operator === "notequal") && isNullOrUndefined(this.filterSettings.columns["" + i].value)) {
          this.filterSettings.columns.splice(i, 1);
          i = i - 1;
        }
      }
    };
    Filter2.prototype.getFilteredColsIndexByField = function(col) {
      var cols = this.filterSettings.columns;
      for (var i = 0, len = cols.length; i < len; i++) {
        if (cols[parseInt(i.toString(), 10)].uid === col.uid || col.isForeignColumn() && this.parent.getColumnByUid(col.uid).field === col.foreignKeyValue) {
          return i;
        }
      }
      return -1;
    };
    Filter2.prototype.onActionComplete = function(e) {
      var args = !this.isRemove ? {
        currentFilterObject: this.currentFilterObject,
        /* tslint:disable:no-string-literal */
        currentFilteringColumn: !isNullOrUndefined(this.column) ? this.column.field : void 0,
        /* tslint:enable:no-string-literal */
        columns: this.filterSettings.columns,
        requestType: "filtering",
        type: actionComplete
      } : {
        requestType: "filtering",
        type: actionComplete
      };
      this.parent.trigger(actionComplete, extend(e, args));
      this.isRemove = false;
    };
    Filter2.prototype.wireEvents = function() {
      EventHandler.add(this.parent.getHeaderContent(), "keyup", this.keyUpHandlerImmediate, this);
    };
    Filter2.prototype.unWireEvents = function() {
      EventHandler.remove(this.parent.getHeaderContent(), "keyup", this.keyUpHandlerImmediate);
    };
    Filter2.prototype.enableAfterRender = function(e) {
      if (e.module === this.getModuleName() && e.enable) {
        this.parent.getHeaderTable().classList.add("e-sortfilter");
        this.render();
      }
    };
    Filter2.prototype.refreshFilterValue = function() {
      if (!isNullOrUndefined(this.parent.modelObserver.boundedEvents)) {
        this.parent.removeEventListener(beforeDataBound, this.refreshFilterValueFn);
      }
      if ((this.filterSettings.type === "FilterBar" || this.filterSettings.type === "Excel") && this.filterSettings.columns.length && !this.parent.getCurrentViewRecords().length) {
        this.initialEnd();
      }
    };
    Filter2.prototype.initialEnd = function() {
      this.parent.off(contentReady, this.initialEnd);
      if (this.parent.getColumns().length && this.filterSettings.columns.length) {
        var gObj = this.parent;
        this.contentRefresh = false;
        this.initialLoad = true;
        for (var _i = 0, _a = gObj.filterSettings.columns; _i < _a.length; _i++) {
          var col = _a[_i];
          this.filterByColumn(col.field, col.operator, col.value, col.predicate, col.matchCase, col.ignoreAccent, col.actualFilterValue, col.actualOperator, col.isForeignKey);
        }
        this.initialLoad = false;
        this.updateFilterMsg();
        this.contentRefresh = true;
      }
    };
    Filter2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(setFullScreenDialog, this.setFullScreenDialog, this);
      this.parent.on(uiUpdate, this.enableAfterRender, this);
      this.parent.on(filterComplete, this.onActionComplete, this);
      this.parent.on(inBoundModelChanged, this.onPropertyChanged, this);
      this.parent.on(keyPressed, this.keyUpHandler, this);
      this.parent.on(columnPositionChanged, this.columnPositionChanged, this);
      this.parent.on(headerRefreshed, this.render, this);
      this.parent.on(contentReady, this.initialEnd, this);
      this.parent.on(filterMenuClose, this.filterMenuClose, this);
      this.parent.on(renderResponsiveChangeAction, this.renderResponsiveChangeAction, this);
      this.docClickHandler = this.clickHandler.bind(this);
      EventHandler.add(document, "click", this.docClickHandler, this);
      EventHandler.add(this.parent.element, "mousedown", this.refreshClearIcon, this);
      this.parent.on(filterOpen, this.columnMenuFilter, this);
      this.parent.on(click, this.filterIconClickHandler, this);
      this.parent.on("persist-data-changed", this.initialEnd, this);
      this.parent.on(closeFilterDialog, this.clickHandler, this);
      this.parent.on(destroy, this.destroy, this);
      this.refreshFilterValueFn = this.refreshFilterValue.bind(this);
      this.parent.addEventListener(beforeDataBound, this.refreshFilterValueFn);
    };
    Filter2.prototype.removeEventListener = function() {
      EventHandler.remove(document, "click", this.docClickHandler);
      EventHandler.remove(this.parent.element, "mousedown", this.refreshClearIcon);
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(setFullScreenDialog, this.setFullScreenDialog);
      this.parent.off(uiUpdate, this.enableAfterRender);
      this.parent.off(filterComplete, this.onActionComplete);
      this.parent.off(inBoundModelChanged, this.onPropertyChanged);
      this.parent.off(keyPressed, this.keyUpHandler);
      this.parent.off(columnPositionChanged, this.columnPositionChanged);
      this.parent.off(headerRefreshed, this.render);
      this.parent.off(filterOpen, this.columnMenuFilter);
      this.parent.off(filterMenuClose, this.filterMenuClose);
      this.parent.off(renderResponsiveChangeAction, this.renderResponsiveChangeAction);
      this.parent.off(click, this.filterIconClickHandler);
      this.parent.off(closeFilterDialog, this.clickHandler);
      this.parent.off(destroy, this.destroy);
    };
    Filter2.prototype.refreshClearIcon = function(e) {
      if (this.parent.allowFiltering && this.parent.filterSettings.type === "FilterBar" && e.target.closest("th") && e.target.closest("th").classList.contains("e-filterbarcell") && e.target.classList.contains("e-clear-icon")) {
        var targetText = e.target.previousElementSibling;
        Input.setValue(null, targetText, "Never", true);
        if (this.filterSettings.mode === "Immediate") {
          this.removeFilteredColsByField(targetText.id.slice(0, -14));
        }
      }
    };
    Filter2.prototype.filterMenuClose = function() {
      this.fltrDlgDetails.isOpen = false;
    };
    Filter2.prototype.filterByColumn = function(fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator, isForeignColumn) {
      var _this = this;
      var gObj = this.parent;
      var filterCell;
      if (typeof filterValue === "string") {
        filterValue = this.parent.sanitize(filterValue);
      }
      this.column = gObj.grabColumnByFieldFromAllCols(fieldName, isForeignColumn);
      if (this.filterSettings.type === "FilterBar" && this.filterSettings.showFilterBarOperator && isNullOrUndefined(this.column.filterBarTemplate) && isNullOrUndefined(this.column.filterTemplate)) {
        filterOperator = this.getOperatorName(fieldName);
      }
      if (filterOperator === "like" && filterValue && filterValue.indexOf("%") === -1) {
        filterValue = "%" + filterValue + "%";
      }
      if (!this.column) {
        return;
      }
      if (this.filterSettings.type === "FilterBar") {
        filterCell = gObj.getHeaderContent().querySelector("[id='" + this.column.field + "_filterBarcell']");
      }
      if (!isNullOrUndefined(this.column.allowFiltering) && !this.column.allowFiltering) {
        this.parent.log("action_disabled_column", {
          moduleName: this.getModuleName(),
          columnName: this.column.headerText
        });
        return;
      }
      if (isActionPrevent(gObj)) {
        gObj.notify(preventBatch, {
          instance: this,
          handler: this.filterByColumn,
          arg1: fieldName,
          arg2: filterOperator,
          arg3: filterValue,
          arg4: predicate,
          arg5: matchCase,
          arg6: ignoreAccent,
          arg7: actualFilterValue,
          arg8: actualOperator
        });
        return;
      }
      this.predicate = predicate ? predicate : Array.isArray(filterValue) ? "or" : "and";
      this.value = filterValue;
      this.matchCase = matchCase || false;
      this.ignoreAccent = this.ignoreAccent = !isNullOrUndefined(ignoreAccent) ? ignoreAccent : this.parent.filterSettings.ignoreAccent;
      this.fieldName = fieldName;
      this.operator = filterOperator;
      filterValue = !isNullOrUndefined(filterValue) ? filterValue.toString() : filterValue;
      if (filterValue === "") {
        filterValue = null;
      }
      if (this.column.type === "number" || this.column.type === "date") {
        this.matchCase = true;
      }
      if (filterCell && this.filterSettings.type === "FilterBar") {
        if (filterValue && filterValue.length < 1 || !this.filterByMethod && this.checkForSkipInput(this.column, filterValue)) {
          this.filterStatusMsg = filterValue && filterValue.length < 1 ? "" : this.l10n.getConstant("InvalidFilterMessage");
          this.updateFilterMsg();
          return;
        }
        if (filterCell.value !== filterValue) {
          filterCell.value = filterValue;
        }
      }
      if (!isNullOrUndefined(this.column.format)) {
        this.applyColumnFormat(filterValue);
        if (this.initialLoad && this.filterSettings.type === "FilterBar") {
          filterCell.value = this.values[this.column.field];
        }
      } else {
        this.values[this.column.field] = filterValue;
      }
      var predObj = {
        field: this.fieldName,
        predicate,
        matchCase,
        ignoreAccent,
        operator: this.operator,
        value: this.value,
        type: this.column.type
      };
      var filterColumn = this.parent.filterSettings.columns.filter(function(fColumn) {
        return fColumn.field === _this.fieldName;
      });
      if (filterColumn.length > 1 && !isNullOrUndefined(this.actualPredicate[this.fieldName])) {
        this.actualPredicate[this.fieldName].push(predObj);
      } else {
        this.actualPredicate[this.fieldName] = [predObj];
      }
      if (this.checkAlreadyColFiltered(this.column.field)) {
        return;
      }
      this.updateModel();
    };
    Filter2.prototype.applyColumnFormat = function(filterValue) {
      var _this = this;
      var getFlvalue = this.column.type === "date" || this.column.type === "datetime" || this.column.type === "dateonly" ? new Date(filterValue) : parseFloat(filterValue);
      if ((this.column.type === "date" || this.column.type === "datetime" || this.column.type === "dateonly") && filterValue && Array.isArray(this.value) && filterValue.split(",").length > 1) {
        this.values[this.column.field] = filterValue.split(",").map(function(val) {
          if (val === "") {
            val = null;
          }
          return _this.setFormatForFlColumn(new Date(val), _this.column);
        });
      } else {
        this.values[this.column.field] = this.setFormatForFlColumn(getFlvalue, this.column);
      }
    };
    Filter2.prototype.skipUid = function(col) {
      var flag = true;
      var colLen = Object.keys(col);
      for (var i = 0; i < colLen.length; i++) {
        var key = Object.keys(col[colLen[parseInt(i.toString(), 10)]]);
        if (key.length === 1 && key[0] === "uid") {
          flag = false;
        }
      }
      return flag;
    };
    Filter2.prototype.onPropertyChanged = function(e) {
      if (e.module !== this.getModuleName()) {
        return;
      }
      for (var _i = 0, _a = Object.keys(e.properties); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "columns":
            var col = "columns";
            var args = {
              currentFilterObject: this.currentFilterObject,
              currentFilteringColumn: this.column ? this.column.field : void 0,
              action: "filter",
              columns: this.filterSettings.columns,
              requestType: "filtering",
              type: actionBegin,
              cancel: false
            };
            if (this.contentRefresh && this.skipUid(e.properties["" + col])) {
              this.parent.notify(modelChanged, args);
              if (args.cancel) {
                if (this.filterSettings.type === "CheckBox" || this.filterSettings.type === "Excel") {
                  this.filterSettings.columns = this.actualData.length <= 1 ? this.checkboxPrevFilterObject : this.checkboxFilterObject;
                  this.actualPredicate[this.column.field] = this.filterSettings.columns;
                  var col_1 = this.parent.getColumnByField(this.column.field);
                  var iconClass = this.parent.showColumnMenu && col_1.showColumnMenu ? ".e-columnmenu" : ".e-icon-filter";
                  var filterIconElement = this.parent.getColumnHeaderByField(this.column.field).querySelector(iconClass);
                  if (this.checkboxPrevFilterObject.length === 0) {
                    filterIconElement.classList.remove("e-filtered");
                  } else {
                    filterIconElement.classList.add("e-filtered");
                  }
                } else {
                  if (isNullOrUndefined(this.prevFilterObject)) {
                    this.filterSettings.columns.splice(this.filterSettings.columns.length - 1, 1);
                  } else {
                    this.filterSettings.columns[this.filterObjIndex] = this.prevFilterObject;
                  }
                }
                return;
              }
              this.updateFilterIcon();
              this.refreshFilterSettings();
              this.updateFilterMsg();
              this.updateFilter();
            }
            break;
          case "showFilterBarStatus":
            if (e.properties["" + prop]) {
              this.updateFilterMsg();
            } else if (this.parent.allowPaging) {
              this.parent.updateExternalMessage("");
            }
            break;
          case "showFilterBarOperator":
          case "type":
            this.parent.refreshHeader();
            this.refreshFilterSettings();
            if (this.parent.height === "100%") {
              this.parent.scrollModule.refresh();
            }
            break;
        }
      }
    };
    Filter2.prototype.refreshFilterSettings = function() {
      if (this.filterSettings.type === "FilterBar") {
        for (var i = 0; i < this.filterSettings.columns.length; i++) {
          this.column = this.parent.grabColumnByUidFromAllCols(this.filterSettings.columns[parseInt(i.toString(), 10)].uid);
          var filterValue = this.filterSettings.columns[parseInt(i.toString(), 10)].value;
          filterValue = !isNullOrUndefined(filterValue) && filterValue.toString();
          if (!isNullOrUndefined(this.column.format)) {
            this.applyColumnFormat(filterValue);
          } else {
            var key = this.filterSettings.columns[parseInt(i.toString(), 10)].field;
            this.values["" + key] = this.filterSettings.columns[parseInt(i.toString(), 10)].value;
          }
          var filterElement = this.getFilterBarElement(this.column.field);
          if (filterElement) {
            if (this.cellText[this.filterSettings.columns[parseInt(i.toString(), 10)].field] !== "" && !isNullOrUndefined(this.cellText[this.filterSettings.columns[parseInt(i.toString(), 10)].field])) {
              filterElement.value = this.cellText[this.column.field];
            } else {
              filterElement.value = this.filterSettings.columns[parseInt(i.toString(), 10)].value;
            }
          }
        }
        if (this.filterSettings.columns.length === 0) {
          var col = this.parent.getColumns();
          for (var i = 0; i < col.length; i++) {
            var filterElement = this.getFilterBarElement(col[parseInt(i.toString(), 10)].field);
            if (filterElement && filterElement.value !== "") {
              filterElement.value = "";
              delete this.values[col[parseInt(i.toString(), 10)].field];
            }
          }
        }
      }
    };
    Filter2.prototype.updateFilterIcon = function() {
      if (this.filterSettings.columns.length === 0 && this.parent.element.querySelector(".e-filtered")) {
        var fltrIconElement = [].slice.call(this.parent.element.getElementsByClassName("e-filtered"));
        for (var i = 0, len = fltrIconElement.length; i < len; i++) {
          fltrIconElement[parseInt(i.toString(), 10)].classList.remove("e-filtered");
        }
      }
    };
    Filter2.prototype.getFilterBarElement = function(col) {
      var selector = "[id='" + col + "_filterBarcell']";
      var filterElement;
      if (selector && !isNullOrUndefined(this.element)) {
        filterElement = this.element.querySelector(selector);
      }
      return filterElement;
    };
    Filter2.prototype.refreshFilter = function() {
      this.refreshFilterSettings();
      this.updateFilterMsg();
    };
    Filter2.prototype.clearFiltering = function(fields) {
      var _this = this;
      var cols = getActualPropFromColl(this.filterSettings.columns);
      if (!isNullOrUndefined(fields)) {
        this.refresh = false;
        fields.forEach(function(field) {
          _this.removeFilteredColsByField(field, false);
        });
        this.parent.setProperties({
          filterSettings: {
            columns: this.filterSettings.columns
          }
        }, true);
        this.parent.renderModule.refresh();
        this.refresh = true;
        return;
      }
      if (isActionPrevent(this.parent)) {
        this.parent.notify(preventBatch, {
          instance: this,
          handler: this.clearFiltering
        });
        return;
      }
      for (var i = 0; i < cols.length; i++) {
        cols[parseInt(i.toString(), 10)].uid = cols[parseInt(i.toString(), 10)].uid || this.parent.getColumnByField(cols[parseInt(i.toString(), 10)].field).uid;
      }
      var colUid = cols.map(function(f) {
        return f.uid;
      });
      var filteredcols = colUid.filter(function(item, pos) {
        return colUid.indexOf(item) === pos;
      });
      this.refresh = false;
      for (var i = 0, len = filteredcols.length; i < len; i++) {
        this.removeFilteredColsByField(this.parent.getColumnByUid(filteredcols[parseInt(i.toString(), 10)]).field, false);
      }
      this.refresh = true;
      if (filteredcols.length) {
        this.parent.renderModule.refresh();
      }
      if (this.parent.filterSettings.columns.length === 0 && this.parent.element.querySelector(".e-filtered")) {
        var fltrElement = [].slice.call(this.parent.element.getElementsByClassName("e-filtered"));
        for (var i = 0, len = fltrElement.length; i < len; i++) {
          fltrElement[0].classList.remove("e-filtered");
        }
      }
      this.isRemove = true;
      this.filterStatusMsg = "";
      this.updateFilterMsg();
    };
    Filter2.prototype.checkAlreadyColFiltered = function(field) {
      var columns = this.filterSettings.columns;
      for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
        var col = columns_1[_i];
        if (col.field === field && this.parent.filterSettings.type === "Menu" && (col.type === "date" || col.type === "datetime")) {
          return this.checkDateColumnValue(col.value, this.value) && col.operator === this.operator && col.predicate === this.predicate;
        } else if (col.field === field && col.value === this.value && col.operator === this.operator && col.predicate === this.predicate) {
          return true;
        }
      }
      return false;
    };
    Filter2.prototype.checkDateColumnValue = function(colDate, filterDate) {
      if (isNullOrUndefined(colDate) && isNullOrUndefined(filterDate)) {
        return true;
      } else if (colDate instanceof Date && filterDate instanceof Date) {
        return colDate.getTime() === filterDate.getTime();
      }
      return false;
    };
    Filter2.prototype.columnMenuFilter = function(args) {
      this.column = args.col;
      var ele = closest(args.target, "#" + args.id);
      if (args.isClose && !ele) {
        this.filterModule.closeDialog();
      } else if (ele) {
        this.filterDialogOpen(this.column, args.target);
      }
    };
    Filter2.prototype.filterDialogOpen = function(col, target, left, top) {
      if (this.filterModule) {
        this.filterModule.isresetFocus = false;
        this.filterModule.closeDialog();
      }
      this.setFilterModel(col);
      this.filterModule.openDialog(this.createOptions(col, target, left, top));
    };
    Filter2.prototype.createOptions = function(col, target, left, top) {
      var gObj = this.parent;
      var dataSource = col.filter.dataSource || gObj.dataSource && "result" in gObj.dataSource ? gObj.dataSource : gObj.getDataModule().dataManager;
      var type = col.filter.type || this.parent.filterSettings.type;
      var options = {
        type: col.type,
        field: col.field,
        displayName: col.headerText,
        dataSource,
        format: col.format,
        height: 800,
        columns: gObj.getColumns(),
        filteredColumns: gObj.filterSettings.columns,
        target,
        dataManager: gObj.getDataModule().dataManager,
        formatFn: col.getFormatter(),
        ignoreAccent: gObj.filterSettings.ignoreAccent,
        parserFn: col.getParser(),
        query: gObj.query,
        template: col.getFilterItemTemplate(),
        hideSearchbox: isNullOrUndefined(col.filter.hideSearchbox) ? false : col.filter.hideSearchbox,
        handler: this.filterHandler.bind(this),
        localizedStrings: gObj.getLocaleConstants(),
        position: {
          X: left,
          Y: top
        },
        column: col,
        foreignKeyValue: col.foreignKeyValue,
        actualPredicate: this.actualPredicate,
        localeObj: gObj.localeObj,
        isRemote: gObj.getDataModule().isRemote(),
        allowCaseSensitive: this.filterSettings.enableCaseSensitivity,
        isResponsiveFilter: this.parent.enableAdaptiveUI,
        operator: this.actualPredicate[col.field] && type === "Menu" ? this.actualPredicate[col.field][0].operator : "equal",
        parentTotalDataCount: gObj.getDataModule().isRemote() && gObj.allowPaging ? gObj.pagerModule.pagerObj.totalRecordsCount : gObj.getDataModule().isRemote() ? gObj.totalDataRecordsCount : gObj.getFilteredRecords().length,
        parentCurrentViewDataCount: gObj.currentViewData.length,
        parentFilteredLocalRecords: !gObj.getDataModule().isRemote() ? gObj.getFilteredRecords() : []
      };
      return options;
    };
    Filter2.prototype.removeFilteredColsByField = function(field, isClearFilterBar) {
      var fCell;
      var cols = this.filterSettings.columns;
      if (isActionPrevent(this.parent)) {
        var args = {
          instance: this,
          handler: this.removeFilteredColsByField,
          arg1: field,
          arg2: isClearFilterBar
        };
        this.parent.notify(preventBatch, args);
        return;
      }
      var colUid = cols.map(function(f) {
        return f.uid;
      });
      var filteredColsUid = colUid.filter(function(item, pos) {
        return colUid.indexOf(item) === pos;
      });
      if (!isNullOrUndefined(this.column)) {
        var col = this.column.isForeignColumn() ? this.parent.getColumnByUid(this.column.uid) : this.parent.getColumnByField(field);
        this.filterObjIndex = this.getFilteredColsIndexByField(col);
        this.prevFilterObject = this.filterSettings.columns[this.filterObjIndex];
      }
      var _loop_1 = function(i2, len2) {
        cols[parseInt(i2.toString(), 10)].uid = cols[parseInt(i2.toString(), 10)].uid || this_1.parent.getColumnByField(cols[parseInt(i2.toString(), 10)].field).uid;
        var len_1 = cols.length;
        var column = this_1.parent.grabColumnByUidFromAllCols(filteredColsUid[parseInt(i2.toString(), 10)]);
        if (column.field === field || column.field === column.foreignKeyValue && column.isForeignColumn()) {
          var currentPred = this_1.filterSettings.columns.filter(function(e) {
            return e.uid === column.uid;
          })[0];
          if (this_1.filterSettings.type === "FilterBar" && !isClearFilterBar) {
            var selector = "[id='" + column.field + "_filterBarcell']";
            fCell = this_1.parent.getHeaderContent().querySelector(selector);
            if (fCell) {
              fCell.value = "";
              delete this_1.values["" + field];
            }
          }
          while (len_1--) {
            if (cols[parseInt(len_1.toString(), 10)].uid === column.uid) {
              cols.splice(len_1, 1);
            }
          }
          var fltrElement = this_1.parent.getColumnHeaderByField(column.field);
          if (this_1.filterSettings.type !== "FilterBar" || this_1.parent.showColumnMenu) {
            var iconClass = this_1.parent.showColumnMenu && column.showColumnMenu ? ".e-columnmenu" : ".e-icon-filter";
            fltrElement.querySelector(iconClass).classList.remove("e-filtered");
          }
          this_1.isRemove = true;
          if (this_1.actualPredicate["" + field]) {
            delete this_1.actualPredicate["" + field];
          }
          if (this_1.values["" + field]) {
            delete this_1.values["" + field];
          }
          if (this_1.refresh) {
            this_1.parent.notify(modelChanged, {
              requestType: "filtering",
              type: actionBegin,
              currentFilterObject: currentPred,
              currentFilterColumn: column,
              action: "clearFilter"
            });
          }
          return "break";
        }
      };
      var this_1 = this;
      for (var i = 0, len = filteredColsUid.length; i < len; i++) {
        var state_1 = _loop_1(i, len);
        if (state_1 === "break") break;
      }
      this.updateFilterMsg();
    };
    Filter2.prototype.getModuleName = function() {
      return "filter";
    };
    Filter2.prototype.keyUpHandlerImmediate = function(e) {
      if (e.keyCode !== 13) {
        this.keyUpHandler(e);
      }
    };
    Filter2.prototype.keyUpHandler = function(e) {
      var gObj = this.parent;
      var target = e.target;
      if (target && matches(target, ".e-filterbar input")) {
        var closeHeaderEle = closest(target, "th.e-filterbarcell");
        this.column = gObj.getColumnByUid(closeHeaderEle.getAttribute("e-mappinguid"));
        if (!this.column) {
          return;
        }
        if (e.action === "altDownArrow" && this.parent.filterSettings.showFilterBarOperator) {
          var dropDownListInput = closest(target, "span").querySelector(".e-filterbaroperator");
          dropDownListInput.ej2_instances[0].showPopup();
          dropDownListInput.focus();
        }
        if ((this.filterSettings.mode === "Immediate" || e.keyCode === 13 && !e.target.classList.contains("e-filterbaroperator")) && e.keyCode !== 9 && !this.column.filterTemplate) {
          this.value = target.value.trim();
          this.processFilter(e);
        }
      }
      if (e.action === "altDownArrow" && this.filterSettings.type !== "FilterBar" && !parentsUntil(e.target, "e-toolbar") && isNullOrUndefined(this.parent.element.querySelector(".e-filter-popup")) && !this.parent.enableAdaptiveUI) {
        var element = gObj.focusModule.currentInfo.element;
        if (element && element.classList.contains("e-headercell") && !element.classList.contains("e-stackedheadercell")) {
          var column = gObj.getColumnByUid(element.firstElementChild.getAttribute("e-mappinguid"));
          this.openMenuByField(column.field);
          this.parent.focusModule.clearIndicator();
        }
      }
      if (e.action === "escape" && this.filterSettings.type === "Menu" && this.filterModule) {
        if (this.parent.showColumnMenu && this.filterModule.isDialogOpen) {
          this.parent.isColumnMenuFilterClosing = true;
        }
        this.filterModule.closeDialog();
        gObj.notify(restoreFocus, {});
        if (!this.parent.showColumnMenu) {
          gObj.notify(restoreFocus, {});
        }
      }
    };
    Filter2.prototype.updateCrossIcon = function(element) {
      if (element.value.length) {
        element.nextElementSibling.classList.remove("e-hide");
      }
    };
    Filter2.prototype.updateFilterMsg = function() {
      if (this.filterSettings.type === "FilterBar") {
        var gObj = this.parent;
        var getFormatFlValue = void 0;
        var columns = this.filterSettings.columns;
        var column = void 0;
        if (!this.filterSettings.showFilterBarStatus) {
          return;
        }
        if (columns.length > 0 && this.filterStatusMsg !== this.l10n.getConstant("InvalidFilterMessage")) {
          this.filterStatusMsg = "";
          for (var index = 0; index < columns.length; index++) {
            column = gObj.grabColumnByUidFromAllCols(columns[parseInt(index.toString(), 10)].uid) || gObj.grabColumnByFieldFromAllCols(columns[parseInt(index.toString(), 10)].field, columns[parseInt(index.toString(), 10)].isForeignKey);
            if (index) {
              this.filterStatusMsg += " && ";
            }
            if (!isNullOrUndefined(column.format)) {
              var flValue = column.type === "date" || column.type === "datetime" || column.type === "dateonly" ? this.valueFormatter.fromView(this.values[column.field], column.getParser(), column.type === "dateonly" ? "date" : column.type) : this.values[column.field];
              if (!(column.type === "date" || column.type === "datetime" || column.type === "dateonly")) {
                var formater = this.serviceLocator.getService("valueFormatter");
                getFormatFlValue = formater.toView(flValue, column.getParser()).toString();
              } else {
                getFormatFlValue = this.setFormatForFlColumn(flValue, column);
              }
              this.filterStatusMsg += column.headerText + ": " + getFormatFlValue;
            } else {
              this.filterStatusMsg += column.headerText + ": " + this.values[column.field];
            }
          }
        }
        if (gObj.allowPaging) {
          gObj.updateExternalMessage(this.filterStatusMsg);
          if (this.parent.height === "100%") {
            this.parent.scrollModule.refresh();
          }
        }
        this.filterStatusMsg = "";
      }
    };
    Filter2.prototype.setFormatForFlColumn = function(value, column) {
      var formater = this.serviceLocator.getService("valueFormatter");
      var formatValue = formater.toView(value, column.getFormatter());
      return isNullOrUndefined(formatValue) ? formatValue : formatValue.toString();
    };
    Filter2.prototype.checkForSkipInput = function(column, value) {
      var isSkip;
      if (column.type === "number") {
        if (DataUtil.operatorSymbols["" + value] || this.skipNumberInput.indexOf(value) > -1) {
          isSkip = true;
        }
      } else if (column.type === "string") {
        for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {
          var val = value_1[_i];
          if (this.skipStringInput.indexOf(val) > -1) {
            isSkip = true;
          }
        }
      }
      return isSkip;
    };
    Filter2.prototype.processFilter = function(e) {
      this.stopTimer();
      this.startTimer(e);
    };
    Filter2.prototype.startTimer = function(e) {
      var _this = this;
      this.timer = window.setInterval(function() {
        _this.onTimerTick();
      }, e.keyCode === 13 ? 0 : this.filterSettings.immediateModeDelay);
    };
    Filter2.prototype.stopTimer = function() {
      window.clearInterval(this.timer);
    };
    Filter2.prototype.onTimerTick = function() {
      var selector = "[id='" + this.column.field + "_filterBarcell']";
      var filterElement = this.element.querySelector(selector);
      if (!filterElement) {
        filterElement = this.parent.getHeaderContent().querySelector(selector);
      }
      var filterValue;
      this.cellText[this.column.field] = filterElement.value;
      this.stopTimer();
      if (!isNullOrUndefined(this.column.filterBarTemplate)) {
        var templateRead = this.column.filterBarTemplate.read;
        if (typeof templateRead === "string") {
          templateRead = getValue(templateRead, window);
        }
        if (!isNullOrUndefined(templateRead)) {
          this.value = templateRead.call(this, filterElement);
        }
      } else {
        filterValue = JSON.parse(JSON.stringify(filterElement.value));
      }
      if (isNullOrUndefined(this.value) || this.value === "") {
        this.removeFilteredColsByField(this.column.field);
        return;
      }
      this.validateFilterValue(this.value);
      this.filterByMethod = false;
      this.filterByColumn(this.column.field, this.operator, this.value, this.predicate, this.filterSettings.enableCaseSensitivity, this.ignoreAccent, this.column.isForeignColumn());
      this.filterByMethod = true;
      filterElement.value = filterValue;
      this.updateFilterMsg();
    };
    Filter2.prototype.validateFilterValue = function(value) {
      var skipInput;
      var index;
      this.matchCase = this.filterSettings.enableCaseSensitivity;
      switch (this.column.type) {
        case "number":
          if (this.column.filter.operator) {
            this.operator = this.column.filter.operator;
          } else {
            this.operator = this.filterOperators.equal;
          }
          skipInput = [">", "<", "=", "!"];
          for (var i = 0; i < value.length; i++) {
            if (skipInput.indexOf(value[parseInt(i.toString(), 10)]) > -1) {
              index = i;
              break;
            }
          }
          this.getOperator(value.substring(index));
          if (index !== 0) {
            this.value = value.substring(0, index);
          }
          if (this.value !== "" && value.length >= 1) {
            this.value = this.valueFormatter.fromView(this.value, this.column.getParser(), this.column.type);
          }
          if (isNaN(this.value)) {
            this.filterStatusMsg = this.l10n.getConstant("InvalidFilterMessage");
          }
          break;
        case "date":
        case "datetime":
          this.operator = this.filterOperators.equal;
          if (this.value !== "" && !(this.value instanceof Date)) {
            this.getOperator(value);
            this.value = this.valueFormatter.fromView(this.value, this.column.getParser(), this.column.type);
            if (isNullOrUndefined(this.value)) {
              this.filterStatusMsg = this.l10n.getConstant("InvalidFilterMessage");
            }
          }
          break;
        case "string":
          this.matchCase = false;
          if (this.column.filter.operator) {
            this.operator = this.column.filter.operator;
          } else {
            if (value.indexOf("*") !== -1 || value.indexOf("?") !== -1 || value.indexOf("%3f") !== -1) {
              this.operator = this.filterOperators.wildCard;
            } else if (value.indexOf("%") !== -1) {
              this.operator = this.filterOperators.like;
            } else {
              this.operator = this.filterOperators.startsWith;
            }
          }
          break;
        case "boolean":
          if (value.toLowerCase() === "true" || value === "1") {
            this.value = true;
          } else if (value.toLowerCase() === "false" || value === "0") {
            this.value = false;
          } else if (value.length) {
            this.filterStatusMsg = this.l10n.getConstant("InvalidFilterMessage");
          }
          this.operator = this.filterOperators.equal;
          break;
        default:
          if (this.column.filter.operator) {
            this.operator = this.column.filter.operator;
          } else {
            this.operator = this.filterOperators.equal;
          }
      }
    };
    Filter2.prototype.getOperator = function(value) {
      var singleOp = value.charAt(0);
      var multipleOp = value.slice(0, 2);
      var operators = extend({
        "=": this.filterOperators.equal,
        "!": this.filterOperators.notEqual
      }, DataUtil.operatorSymbols);
      if (operators.hasOwnProperty(singleOp) || operators.hasOwnProperty(multipleOp)) {
        this.operator = operators["" + singleOp];
        this.value = value.substring(1);
        if (!this.operator) {
          this.operator = operators["" + multipleOp];
          this.value = value.substring(2);
        }
      }
      if (this.operator === this.filterOperators.lessThan || this.operator === this.filterOperators.greaterThan) {
        if (this.value.charAt(0) === "=") {
          this.operator = this.operator + "orequal";
          this.value = this.value.substring(1);
        }
      }
    };
    Filter2.prototype.columnPositionChanged = function() {
      if (this.parent.filterSettings.type !== "FilterBar") {
        return;
      }
    };
    Filter2.prototype.getLocalizedCustomOperators = function() {
      var numOptr = [{
        value: "equal",
        text: this.l10n.getConstant("Equal")
      }, {
        value: "greaterthan",
        text: this.l10n.getConstant("GreaterThan")
      }, {
        value: "greaterthanorequal",
        text: this.l10n.getConstant("GreaterThanOrEqual")
      }, {
        value: "lessthan",
        text: this.l10n.getConstant("LessThan")
      }, {
        value: "lessthanorequal",
        text: this.l10n.getConstant("LessThanOrEqual")
      }, {
        value: "notequal",
        text: this.l10n.getConstant("NotEqual")
      }, {
        value: "isnull",
        text: this.l10n.getConstant("IsNull")
      }, {
        value: "isnotnull",
        text: this.l10n.getConstant("NotNull")
      }];
      this.customOperators = {
        stringOperator: [{
          value: "startswith",
          text: this.l10n.getConstant("StartsWith")
        }, {
          value: "endswith",
          text: this.l10n.getConstant("EndsWith")
        }, {
          value: "contains",
          text: this.l10n.getConstant("Contains")
        }, {
          value: "equal",
          text: this.l10n.getConstant("Equal")
        }, {
          value: "isempty",
          text: this.l10n.getConstant("IsEmpty")
        }, {
          value: "doesnotstartwith",
          text: this.l10n.getConstant("NotStartsWith")
        }, {
          value: "doesnotendwith",
          text: this.l10n.getConstant("NotEndsWith")
        }, {
          value: "doesnotcontain",
          text: this.l10n.getConstant("NotContains")
        }, {
          value: "notequal",
          text: this.l10n.getConstant("NotEqual")
        }, {
          value: "isnotempty",
          text: this.l10n.getConstant("IsNotEmpty")
        }, {
          value: "like",
          text: this.l10n.getConstant("Like")
        }],
        numberOperator: numOptr,
        dateOperator: [{
          value: "equal",
          text: this.l10n.getConstant("Equal")
        }, {
          value: "greaterthan",
          text: this.l10n.getConstant("GreaterThan")
        }, {
          value: "greaterthanorequal",
          text: this.l10n.getConstant("GreaterThanOrEqual")
        }, {
          value: "lessthan",
          text: this.l10n.getConstant("LessThan")
        }, {
          value: "lessthanorequal",
          text: this.l10n.getConstant("LessThanOrEqual")
        }, {
          value: "notequal",
          text: this.l10n.getConstant("NotEqual")
        }, {
          value: "isnull",
          text: this.l10n.getConstant("IsNull")
        }, {
          value: "isnotnull",
          text: this.l10n.getConstant("NotNull")
        }],
        datetimeOperator: [{
          value: "equal",
          text: this.l10n.getConstant("Equal")
        }, {
          value: "greaterthan",
          text: this.l10n.getConstant("GreaterThan")
        }, {
          value: "greaterthanorequal",
          text: this.l10n.getConstant("GreaterThanOrEqual")
        }, {
          value: "lessthan",
          text: this.l10n.getConstant("LessThan")
        }, {
          value: "lessthanorequal",
          text: this.l10n.getConstant("LessThanOrEqual")
        }, {
          value: "notequal",
          text: this.l10n.getConstant("NotEqual")
        }, {
          value: "isnull",
          text: this.l10n.getConstant("IsNull")
        }, {
          value: "isnotnull",
          text: this.l10n.getConstant("NotNull")
        }],
        dateonlyOperator: [{
          value: "equal",
          text: this.l10n.getConstant("Equal")
        }, {
          value: "greaterthan",
          text: this.l10n.getConstant("GreaterThan")
        }, {
          value: "greaterthanorequal",
          text: this.l10n.getConstant("GreaterThanOrEqual")
        }, {
          value: "lessthan",
          text: this.l10n.getConstant("LessThan")
        }, {
          value: "lessthanorequal",
          text: this.l10n.getConstant("LessThanOrEqual")
        }, {
          value: "notequal",
          text: this.l10n.getConstant("NotEqual")
        }, {
          value: "isnull",
          text: this.l10n.getConstant("IsNull")
        }, {
          value: "isnotnull",
          text: this.l10n.getConstant("NotNull")
        }],
        booleanOperator: [{
          value: "equal",
          text: this.l10n.getConstant("Equal")
        }, {
          value: "notequal",
          text: this.l10n.getConstant("NotEqual")
        }]
      };
      if (this.filterSettings.type === "Menu") {
        this.customOperators.stringOperator.push({
          value: "in",
          text: this.l10n.getConstant("In")
        }, {
          value: "notin",
          text: this.l10n.getConstant("NotIn")
        });
        this.customOperators.booleanOperator.push({
          value: "in",
          text: this.l10n.getConstant("In")
        }, {
          value: "notin",
          text: this.l10n.getConstant("NotIn")
        });
        this.customOperators.numberOperator.push({
          value: "in",
          text: this.l10n.getConstant("In")
        }, {
          value: "notin",
          text: this.l10n.getConstant("NotIn")
        });
      }
    };
    Filter2.prototype.openMenuByField = function(field) {
      var gObj = this.parent;
      if (gObj.enableAdaptiveUI) {
        this.showCustomFilter(false);
        return;
      }
      var column = gObj.getColumnByField(field);
      var header = gObj.getColumnHeaderByField(field);
      var target = header.querySelector(".e-filtermenudiv");
      if (!target) {
        return;
      }
      var gClient = gObj.element.getBoundingClientRect();
      var fClient = target.getBoundingClientRect();
      this.filterDialogOpen(column, target, fClient.right - gClient.left, fClient.bottom - gClient.top);
    };
    Filter2.prototype.filterIconClickHandler = function(e) {
      var target = e.target;
      if (target.classList.contains("e-filtermenudiv") && (this.parent.filterSettings.type === "Menu" || this.parent.filterSettings.type === "CheckBox" || this.parent.filterSettings.type === "Excel")) {
        var gObj = this.parent;
        var col = gObj.getColumnByUid(parentsUntil(target, "e-headercell").firstElementChild.getAttribute("e-mappinguid"));
        this.column = col;
        if (this.fltrDlgDetails.field === col.field && this.fltrDlgDetails.isOpen) {
          return;
        }
        if (this.filterModule) {
          this.filterModule.closeDialog();
        }
        this.fltrDlgDetails = {
          field: col.field,
          isOpen: true
        };
        this.openMenuByField(col.field);
      }
    };
    Filter2.prototype.clickHandler = function(e) {
      if (this.filterSettings.type === "FilterBar" && this.filterSettings.showFilterBarOperator) {
        if (parentsUntil(e.target, "e-filterbarcell") && e.target.classList.contains("e-input-group-icon")) {
          var filterOperatorElement = closest(e.target, "div").querySelector(".e-filterbaroperator");
          if (filterOperatorElement) {
            filterOperatorElement.focus();
          } else {
            e.target.focus();
          }
        }
        if (e.target.classList.contains("e-list-item")) {
          var inputId = document.querySelector(".e-popup-open").getAttribute("id").replace("_popup", "");
          if (inputId.indexOf("grid-column") !== -1) {
            closest(document.getElementById(inputId), "div").querySelector(".e-filtertext").focus();
          }
        }
      }
      if (this.filterSettings.mode === "Immediate" || this.parent.filterSettings.type === "Menu" || this.parent.filterSettings.type === "CheckBox" || this.parent.filterSettings.type === "Excel") {
        var target = e.target;
        var datepickerEle = target.classList.contains("e-day");
        var dialog = parentsUntil(this.parent.element, "e-dialog");
        var hasDialog = false;
        var popupEle = parentsUntil(target, "e-popup");
        var filterPopup = document.getElementById(this.parent.element.id + "_e-popup");
        var hasDialogClosed = this.parent.element.classList.contains("e-device") ? document.querySelector(".e-filter-popup") : filterPopup && filterPopup.querySelector(".e-filter-popup") ? filterPopup.querySelector(".e-filter-popup") : this.parent.element.querySelector(".e-filter-popup");
        if (dialog && popupEle) {
          hasDialog = dialog.id === popupEle.id;
        }
        if (this.filterModule && hasDialogClosed && (parentsUntil(target, "e-excel-ascending") || parentsUntil(target, "e-excel-descending"))) {
          this.filterModule.closeDialog(target);
        }
        if (parentsUntil(target, "e-filter-popup") || target.classList.contains("e-filtermenudiv")) {
          return;
        } else if (this.filterModule && !parentsUntil(target, "e-date-overflow") && !parentsUntil(target, "e-popup-wrapper") && !closest(target, ".e-filter-item.e-menu-item") && !datepickerEle && !(parentsUntil(target, "e-search-wrapper") && !hasDialogClosed)) {
          if (hasDialog && !parentsUntil(target, "e-filter-popup") && !parentsUntil(target, "e-popup-flmenu") || !popupEle && hasDialogClosed) {
            this.filterModule.isresetFocus = parentsUntil(target, "e-grid") && parentsUntil(target, "e-grid").id === this.parent.element.id && !(parentsUntil(target, "e-search-wrapper") && hasDialogClosed);
            this.filterModule.closeDialog(target);
          }
        }
      }
    };
    Filter2.prototype.filterHandler = function(args) {
      this.actualPredicate[args.field] = args.actualPredicate;
      this.actualData = Object.keys(this.actualPredicate);
      var dataManager = new DataManager(this.filterSettings.columns);
      var query = new Query().where("field", this.filterOperators.equal, args.field);
      this.checkboxFilterObject = dataManager.dataSource.json;
      this.checkboxPrevFilterObject = dataManager.executeLocal(query);
      for (var i = 0; i < this.checkboxPrevFilterObject.length; i++) {
        var index = -1;
        for (var j = 0; j < this.filterSettings.columns.length; j++) {
          if (this.checkboxPrevFilterObject[parseInt(i.toString(), 10)].field === this.filterSettings.columns[parseInt(j.toString(), 10)].field) {
            index = j;
            break;
          }
        }
        if (index !== -1) {
          this.filterSettings.columns.splice(index, 1);
        }
      }
      if (this.values[args.field]) {
        delete this.values[args.field];
      }
      var col = this.parent.getColumnByField(args.field);
      var iconClass = this.parent.showColumnMenu && col.showColumnMenu ? ".e-columnmenu" : ".e-icon-filter";
      var filterIconElement = this.parent.getColumnHeaderByField(args.field).querySelector(iconClass);
      if (args.action === "filtering") {
        this.filterSettings.columns = this.filterSettings.columns.concat(args.filterCollection);
        if (this.filterSettings.columns.length && filterIconElement) {
          filterIconElement.classList.add("e-filtered");
        }
      } else {
        if (filterIconElement) {
          filterIconElement.classList.remove("e-filtered");
        }
        args.requestType = "filtering";
        this.parent.renderModule.refresh(args);
      }
      this.parent.dataBind();
    };
    Filter2.prototype.updateFilter = function() {
      var cols = this.filterSettings.columns;
      this.actualPredicate = {};
      for (var i = 0; i < cols.length; i++) {
        this.column = this.parent.getColumnByField(cols[parseInt(i.toString(), 10)].field) || getColumnByForeignKeyValue(cols[parseInt(i.toString(), 10)].field, this.parent.getForeignKeyColumns());
        var fieldName = cols[parseInt(i.toString(), 10)].field;
        if (!this.parent.getColumnByField(cols[parseInt(i.toString(), 10)].field)) {
          fieldName = getColumnByForeignKeyValue(cols[parseInt(i.toString(), 10)].field, this.parent.getForeignKeyColumns()).field;
        }
        this.refreshFilterIcon(fieldName, cols[parseInt(i.toString(), 10)].operator, cols[parseInt(i.toString(), 10)].value, cols[parseInt(i.toString(), 10)].type, cols[parseInt(i.toString(), 10)].predicate, cols[parseInt(i.toString(), 10)].matchCase, cols[parseInt(i.toString(), 10)].ignoreAccent, cols[parseInt(i.toString(), 10)].uid);
      }
    };
    Filter2.prototype.refreshFilterIcon = function(fieldName, operator, value, type, predicate, matchCase, ignoreAccent, uid2) {
      var obj = {
        field: fieldName,
        predicate,
        matchCase,
        ignoreAccent,
        operator,
        value,
        type
      };
      if (this.actualPredicate["" + fieldName]) {
        this.actualPredicate["" + fieldName].push(obj);
      } else {
        this.actualPredicate["" + fieldName] = [obj];
      }
      var field = uid2 ? this.parent.grabColumnByUidFromAllCols(uid2).field : fieldName;
      this.addFilteredClass(field);
    };
    Filter2.prototype.addFilteredClass = function(fieldName) {
      var filterIconElement;
      var col = this.parent.getColumnByField(fieldName);
      if (this.parent.showColumnMenu && col.showColumnMenu) {
        filterIconElement = this.parent.getColumnHeaderByField(fieldName).querySelector(".e-columnmenu");
      } else if (col) {
        filterIconElement = this.parent.getColumnHeaderByField(fieldName).querySelector(".e-icon-filter");
      }
      if (filterIconElement) {
        filterIconElement.classList.add("e-filtered");
      }
    };
    Filter2.prototype.getFilterUIInfo = function() {
      return this.filterModule ? this.filterModule.getFilterUIInfo() : {};
    };
    Filter2.prototype.getOperatorName = function(field) {
      return document.getElementById(this.parent.getColumnByField(field).uid).ej2_instances[0].value;
    };
    Filter2.prototype.renderCheckboxOnFilterMenu = function() {
      return this.filterModule.renderCheckBoxMenu();
    };
    return Filter2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/resize.js
var resizeClassList = {
  root: "e-rhandler",
  suppress: "e-rsuppress",
  icon: "e-ricon",
  helper: "e-rhelper",
  header: "th.e-headercell",
  cursor: "e-rcursor"
};
var Resize = (
  /** @class */
  function() {
    function Resize2(parent) {
      this.tapped = false;
      this.isDblClk = true;
      this.resizeProcess = false;
      this.isCancelAutoFit = false;
      this.parent = parent;
      if (this.parent.isDestroyed) {
        return;
      }
      this.widthService = new ColumnWidthService(parent);
      this.addEventListener();
    }
    Resize2.prototype.autoFitColumns = function(fName, startRowIndex, endRowIndex) {
      var _this = this;
      var columnName = fName === void 0 || fName === null || fName.length <= 0 ? this.parent.getColumns().map(function(x) {
        x.autoFit = true;
        return x.field;
      }) : typeof fName === "string" ? [fName] : fName;
      this.parent.isAutoFitColumns = true;
      if (!isNullOrUndefined(fName) && typeof fName === "object" && fName.length !== 0) {
        fName.forEach(function(field) {
          if (_this.parent.getColumnByField(field)) {
            _this.parent.getColumnByField(field).autoFit = true;
          }
        });
      } else if (typeof fName === "string" && fName.trim() !== "") {
        this.parent.getColumnByField(fName).autoFit = true;
      }
      if (this.parent.enableAdaptiveUI) {
        this.parent.element.classList.add("e-grid-autofit");
      }
      this.findColumn(columnName, startRowIndex, endRowIndex);
    };
    Resize2.prototype.autoFit = function() {
      var cols = this.parent.getColumns();
      var isMaxWidthCount = 0;
      var newarray = cols.filter(function(c) {
        if (!isNullOrUndefined(c.maxWidth)) {
          isMaxWidthCount++;
        }
        return c.autoFit === true;
      }).map(function(c) {
        return c.field || c.headerText;
      });
      if (newarray.length > 0 && !this.parent.preventAutoFit) {
        this.autoFitColumns(newarray);
      }
      var contentTable = this.parent.getContentTable();
      if (this.parent.allowResizing && isMaxWidthCount && (this.parent.resizeSettings.mode === "Auto" || this.parent.resizeSettings.mode === "Normal" && !this.parent.autoFit && newarray.length === 0)) {
        this.widthService.setWidthToTable(contentTable.style.width.indexOf("px") === -1);
      } else if (this.parent.autoFit && this.parent.resizeSettings.mode === "Auto") {
        this.widthService.setWidthToTable();
      }
      if (contentTable.style.width.indexOf("px") !== -1 && contentTable.getBoundingClientRect().width < contentTable.parentElement.clientWidth) {
        addClass([this.parent.getHeaderTable(), contentTable], ["e-tableborder"]);
      }
    };
    Resize2.prototype.getCellElementsByColumnIndex = function(columnIndex) {
      if (this.parent.frozenRows) {
        return [].slice.call(this.parent.getHeaderTable().querySelectorAll("td.e-rowcell:nth-child(" + (columnIndex + 1) + "):not(.e-groupcaption):not(.e-detailcell)")).concat([].slice.call(this.parent.getContentTable().querySelectorAll("td.e-rowcell:nth-child(" + (columnIndex + 1) + "):not(.e-groupcaption):not(.e-detailcell)")));
      } else {
        return [].slice.call(this.parent.getContentTable().querySelectorAll("td.e-rowcell:nth-child(" + (columnIndex + 1) + "):not(.e-groupcaption):not(.e-detailcell)"));
      }
    };
    Resize2.prototype.resizeColumn = function(fName, index, id, startRowIndex, endRowIndex) {
      var gObj = this.parent;
      var tWidth = 0;
      var headerTable = gObj.getHeaderTable();
      var contentTable = gObj.getContentTable();
      var footerTable;
      var headerDivTag = "e-gridheader";
      var contentDivTag = gridContent;
      var footerDivTag = gridFooter;
      var indentWidth = 0;
      var uid2 = id ? id : this.parent.getUidByColumnField(fName);
      var columnIndex = this.parent.getNormalizedColumnIndex(uid2);
      var headerTextClone = headerTable.querySelector('[e-mappinguid="' + uid2 + '"]').parentElement.cloneNode(true);
      var contentTextClone = this.getCellElementsByColumnIndex(columnIndex);
      var footerTextClone;
      var columnIndexByField = this.parent.getColumnIndexByField(fName);
      if (!isNullOrUndefined(gObj.getFooterContent())) {
        footerTable = gObj.getFooterContentTable();
      }
      if (footerTable) {
        footerTextClone = footerTable.querySelectorAll("td:nth-child(" + (columnIndex + 1) + "):not(.e-groupcaption)");
      }
      var indentWidthClone = [].slice.call(headerTable.querySelector("tr").getElementsByClassName("e-grouptopleftcell"));
      if (indentWidthClone.length > 0) {
        for (var i = 0; i < indentWidthClone.length; i++) {
          indentWidth += indentWidthClone[parseInt(i.toString(), 10)].offsetWidth;
        }
      }
      var detailsElement = contentTable.querySelector(".e-detailrowcollapse") || contentTable.querySelector(".e-detailrowexpand");
      if ((this.parent.detailTemplate || this.parent.childGrid) && detailsElement) {
        indentWidth += detailsElement.offsetWidth;
      }
      var headerText = [headerTextClone];
      var contentText = [];
      var footerText = [];
      if (footerTable) {
        for (var i = 0; i < footerTextClone.length; i++) {
          footerText[parseInt(i.toString(), 10)] = footerTextClone[parseInt(i.toString(), 10)].cloneNode(true);
        }
      }
      for (var i = 0; i < contentTextClone.length; i++) {
        contentText[parseInt(i.toString(), 10)] = contentTextClone[parseInt(i.toString(), 10)].cloneNode(true);
      }
      var wHeader = this.createTable(headerTable, headerText, headerDivTag);
      var wFooter = null;
      var wContent = null;
      if (gObj.getCurrentViewRecords().length) {
        wContent = this.createTable(contentTable, contentText, contentDivTag, startRowIndex, endRowIndex);
      }
      if (footerText.length) {
        wFooter = this.createTable(footerTable, footerText, footerDivTag);
      }
      var columnbyindex = gObj.getColumns()[parseInt(columnIndexByField.toString(), 10)];
      var width = columnbyindex.width = formatUnit(Math.max(wHeader, wContent, wFooter));
      var colMaxWidth = columnbyindex.maxWidth && parseFloat(columnbyindex.maxWidth.toString());
      if (parseInt(width, 10) > colMaxWidth) {
        columnbyindex.width = colMaxWidth;
      }
      this.widthService.setColumnWidth(gObj.getColumns()[parseInt(columnIndexByField.toString(), 10)]);
      var result = gObj.getColumns().some(function(x) {
        return (x.visible || gObj.groupSettings.columns.length) && (x.width === null || x.width === void 0 || x.width.length <= 0);
      });
      if (result === false) {
        var element = gObj.getColumns();
        for (var i = 0; i < element.length; i++) {
          if (element[parseInt(i.toString(), 10)].visible) {
            tWidth = tWidth + parseFloat(element[parseInt(i.toString(), 10)].width);
          }
        }
      }
      var calcTableWidth = tWidth + indentWidth;
      if (tWidth > 0) {
        if (this.parent.detailTemplate || this.parent.childGrid) {
          this.widthService.setColumnWidth(new Column({
            width: "30px"
          }));
        }
        if (this.parent.resizeSettings.mode === "Auto") {
          calcTableWidth = "100%";
        }
        headerTable.style.width = formatUnit(calcTableWidth);
        contentTable.style.width = formatUnit(calcTableWidth);
        if (!isNullOrUndefined(footerTable)) {
          footerTable.style.width = formatUnit(calcTableWidth);
        }
      }
      if (gObj.isFrozenGrid() && gObj.enableColumnVirtualization) {
        this.widthService.refreshFrozenScrollbar();
      }
      var tableWidth = headerTable.offsetWidth;
      var contentwidth = contentTable.parentElement.scrollWidth;
      if (contentwidth > tableWidth) {
        if (!isNullOrUndefined(contentTable.querySelector(".e-emptyrow"))) {
          addClass([headerTable], ["e-tableborder"]);
          removeClass([contentTable], ["e-tableborder"]);
        } else {
          addClass([headerTable, contentTable], ["e-tableborder"]);
        }
        removeClass([gObj.element], ["e-left-shadow", "e-right-shadow"]);
      } else {
        removeClass([headerTable, contentTable], ["e-tableborder"]);
        if (gObj.getVisibleFrozenRightCount()) {
          addClass([gObj.element], "e-right-shadow");
        }
      }
      if (!isNullOrUndefined(footerTable)) {
        footerTable.classList.add("e-tableborder");
      }
    };
    Resize2.prototype.destroy = function() {
      var gridElement = this.parent.element;
      if (!gridElement || !gridElement.querySelector("." + gridHeader) && !gridElement.querySelector("." + gridContent)) {
        return;
      }
      this.widthService = null;
      this.unwireEvents();
      this.removeEventListener();
    };
    Resize2.prototype.getModuleName = function() {
      return "resize";
    };
    Resize2.prototype.findColumn = function(fName, startRowIndex, endRowIndex) {
      for (var i = 0; i < fName.length; i++) {
        var fieldName = fName[parseInt(i.toString(), 10)];
        var columnIndex = this.parent.getColumnIndexByField(fieldName);
        var column = this.parent.getColumns()[parseInt(columnIndex.toString(), 10)];
        if (columnIndex > -1 && !isNullOrUndefined(column) && column.visible === true) {
          this.resizeColumn(fieldName, columnIndex, null, startRowIndex, endRowIndex);
        }
      }
      if (this.parent.allowTextWrap) {
        this.parent.notify(freezeRender, {
          case: "refreshHeight",
          isModeChg: true
        });
      }
      if (this.parent.isFrozenGrid()) {
        this.refreshResizefrzCols(true, true);
      }
    };
    Resize2.prototype.createTable = function(table2, text, tag, startRowIndex, endRowIndex) {
      if (startRowIndex === void 0) {
        startRowIndex = 1;
      }
      if (endRowIndex === void 0) {
        endRowIndex = text.length;
      }
      if (startRowIndex > endRowIndex) {
        startRowIndex ^= endRowIndex;
        endRowIndex ^= startRowIndex;
        startRowIndex ^= endRowIndex;
      }
      var myTableDiv = this.parent.createElement("div");
      var adaptiveClass = this.parent.enableAdaptiveUI ? " e-bigger" : "";
      myTableDiv.className = this.parent.element.className + adaptiveClass;
      myTableDiv.style.cssText = "display: inline-block;visibility:hidden;position:absolute";
      var mySubDiv = this.parent.createElement("div");
      mySubDiv.className = tag;
      var myTable = this.parent.createElement("table", {
        attrs: {
          role: "grid"
        }
      });
      myTable.className = table2.className;
      myTable.classList.add("e-resizetable");
      myTable.style.cssText = "table-layout: auto;width: auto";
      var myTr = this.parent.createElement("tr");
      for (var i = startRowIndex <= 0 ? 1 : startRowIndex; i <= (endRowIndex > text.length ? text.length : endRowIndex); i++) {
        var tr = myTr.cloneNode();
        tr.className = table2.querySelector("tr").className;
        tr.appendChild(text[parseInt((i - 1).toString(), 10)]);
        myTable.appendChild(tr);
      }
      mySubDiv.appendChild(myTable);
      myTableDiv.appendChild(mySubDiv);
      document.body.appendChild(myTableDiv);
      var offsetWidthValue = myTable.getBoundingClientRect().width;
      document.body.removeChild(myTableDiv);
      return Math.ceil(offsetWidthValue);
    };
    Resize2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(headerRefreshed, this.refreshHeight, this);
      this.parent.on(refreshResizePosition, this.refreshResizePosition, this);
      this.parent.on(initialEnd, this.wireEvents, this);
      this.parent.on(contentReady, this.autoFit, this);
      this.parent.on(refreshHandlers, this.refreshHeight, this);
      this.parent.on(destroy, this.destroy, this);
    };
    Resize2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(headerRefreshed, this.refreshHeight);
      this.parent.off(refreshResizePosition, this.refreshResizePosition);
      this.parent.off(initialEnd, this.wireEvents);
      this.parent.off(refreshHandlers, this.refreshHeight);
      this.parent.off(destroy, this.destroy);
    };
    Resize2.prototype.render = function() {
      this.unwireEvents();
      this.wireEvents();
      this.setHandlerHeight();
    };
    Resize2.prototype.refreshHeight = function() {
      if (this.parent.getHeaderTable()) {
        var element = this.getResizeHandlers();
        for (var i = 0; i < element.length; i++) {
          if (element[parseInt(i.toString(), 10)].parentElement.offsetHeight > 0) {
            element[parseInt(i.toString(), 10)].style.height = "100%";
          }
        }
        this.setHandlerHeight();
      }
    };
    Resize2.prototype.wireEvents = function() {
      EventHandler.add(this.parent.getHeaderContent(), Browser.touchStartEvent, this.touchResizeStart, this);
      EventHandler.add(this.parent.getHeaderContent(), dblclick, this.callAutoFit, this);
    };
    Resize2.prototype.unwireEvents = function() {
      EventHandler.remove(this.parent.getHeaderContent(), Browser.touchStartEvent, this.touchResizeStart);
      EventHandler.remove(this.parent.getHeaderContent(), dblclick, this.callAutoFit);
    };
    Resize2.prototype.getResizeHandlers = function() {
      return [].slice.call(this.parent.getHeaderTable().getElementsByClassName(resizeClassList.root));
    };
    Resize2.prototype.setHandlerHeight = function() {
      var element = [].slice.call(this.parent.getHeaderTable().getElementsByClassName(resizeClassList.suppress));
      for (var i = 0; i < element.length; i++) {
        element[parseInt(i.toString(), 10)].style.height = "100%";
      }
    };
    Resize2.prototype.callAutoFit = function(e) {
      if (Browser.isDevice && typeof e.preventDefault === "function" && this.isDblClk) {
        e.preventDefault();
      }
      if (e.target.classList.contains("e-rhandler") && !this.isCancelAutoFit) {
        var col = this.getTargetColumn(e);
        if (col.columns) {
          return;
        }
        this.resizeColumn(col.field, this.parent.getNormalizedColumnIndex(col.uid), col.uid);
        if (this.parent.isFrozenGrid()) {
          this.refreshResizefrzCols(true, true);
        }
        var header = closest(e.target, resizeClassList.header);
        header.classList.add("e-resized");
      }
    };
    Resize2.prototype.touchResizeStart = function(e) {
      if (!Global.timer) {
        Global.timer = setTimeout(function() {
          Global.timer = null;
        }, 300);
        return this.resizeStart(e);
      } else {
        clearTimeout(Global.timer);
        Global.timer = null;
        this.callAutoFit(e);
      }
    };
    Resize2.prototype.resizeStart = function(e) {
      var _this = this;
      if (e.target.classList.contains("e-rhandler")) {
        this.isCancelAutoFit = false;
        var args = {
          e,
          column: this.getTargetColumn(e)
        };
        this.parent.trigger(resizeStart, args, function(args2) {
          if (args2.cancel || _this.parent.isEdit) {
            _this.cancelResizeAction();
            _this.isCancelAutoFit = true;
            return;
          }
        });
        if (!this.isCancelAutoFit) {
          if (!this.helper) {
            if (this.getScrollBarWidth() === 0) {
              this.resizeProcess = true;
              for (var _i = 0, _a = this.refreshColumnWidth(); _i < _a.length; _i++) {
                var col = _a[_i];
                this.widthService.setColumnWidth(col);
              }
              if (this.parent.allowGrouping) {
                for (var i = 0; i < this.parent.groupSettings.columns.length; i++) {
                  this.widthService.setColumnWidth(new Column({
                    width: "30px"
                  }), i);
                }
              }
              if (this.parent.isRowDragable()) {
                this.widthService.setColumnWidth(new Column({
                  width: "30px"
                }));
              }
              this.widthService.setWidthToTable();
              this.resizeProcess = false;
            }
            this.refreshStackedColumnWidth();
            this.element = e.target;
            this.parentElementWidth = this.parent.element.getBoundingClientRect().width;
            this.appendHelper();
            this.column = this.getTargetColumn(e);
            this.pageX = this.getPointX(e);
            if (this.column.getFreezeTableName() === frozenRight) {
              if (this.parent.enableRtl) {
                this.minMove = (this.column.minWidth ? parseFloat(this.column.minWidth.toString()) : 0) - parseFloat(isNullOrUndefined(this.column.width) ? "" : this.column.width.toString());
              } else {
                this.minMove = parseFloat(isNullOrUndefined(this.column.width) ? "" : this.column.width.toString()) - (this.column.minWidth ? parseFloat(this.column.minWidth.toString()) : 0);
              }
            } else if (this.parent.enableRtl) {
              this.minMove = parseFloat(this.column.width.toString()) - (this.column.minWidth ? parseFloat(this.column.minWidth.toString()) : 0);
            } else {
              this.minMove = (this.column.minWidth ? parseFloat(this.column.minWidth.toString()) : 0) - parseFloat(isNullOrUndefined(this.column.width) ? "" : this.column.width.toString());
            }
            this.minMove += this.pageX;
          }
          EventHandler.add(document, Browser.touchEndEvent, this.resizeEnd, this);
          EventHandler.add(this.parent.element, Browser.touchMoveEvent, this.resizing, this);
          if (Browser.isDevice && !this.helper.classList.contains(resizeClassList.icon)) {
            this.helper.classList.add(resizeClassList.icon);
            EventHandler.add(document, Browser.touchStartEvent, this.removeHelper, this);
            EventHandler.add(this.helper, Browser.touchStartEvent, this.resizeStart, this);
          } else {
            this.updateCursor("add");
          }
        }
      }
    };
    Resize2.prototype.cancelResizeAction = function(removeEvents) {
      if (removeEvents) {
        EventHandler.remove(this.parent.element, Browser.touchMoveEvent, this.resizing);
        EventHandler.remove(document, Browser.touchEndEvent, this.resizeEnd);
        this.updateCursor("remove");
      }
      if (Browser.isDevice && !isNullOrUndefined(this.helper)) {
        EventHandler.remove(document, Browser.touchStartEvent, this.removeHelper);
        EventHandler.remove(this.helper, Browser.touchStartEvent, this.resizeStart);
      }
      if (!isNullOrUndefined(this.helper)) {
        detach(this.helper);
      }
      this.refresh();
    };
    Resize2.prototype.getWidth = function(width, minWidth, maxWidth) {
      if (minWidth && width < minWidth) {
        return minWidth;
      } else if (maxWidth && width > maxWidth) {
        return maxWidth;
      } else {
        return width;
      }
    };
    Resize2.prototype.updateResizeEleHeight = function() {
      var elements = [].slice.call(this.parent.getHeaderContent().getElementsByClassName("e-rhandler"));
      for (var i = 0; i < elements.length; i++) {
        elements[parseInt(i.toString(), 10)].style.height = this.element.parentElement.offsetHeight + "px";
      }
    };
    Resize2.prototype.getColData = function(column, mousemove) {
      return {
        width: parseFloat(isNullOrUndefined(this.widthService.getWidth(column)) || this.widthService.getWidth(column) === "auto" ? "0" : this.widthService.getWidth(column).toString()) + mousemove,
        minWidth: column.minWidth ? parseFloat(column.minWidth.toString()) : null,
        maxWidth: column.maxWidth ? parseFloat(column.maxWidth.toString()) : null
      };
    };
    Resize2.prototype.refreshResizeFixedCols = function(pos) {
      var cols = this.parent.getColumns();
      var translateX = this.parent.enableColumnVirtualization ? this.parent.translateX : 0;
      var th = [].slice.call(this.parent.getHeaderContent().querySelector("tbody").querySelectorAll(".e-fixedfreeze")).concat([].slice.call(this.parent.getContent().querySelectorAll(".e-fixedfreeze")));
      for (var i = 0; i < th.length; i++) {
        var node = th[parseInt(i.toString(), 10)];
        var column = void 0;
        if (node.classList.contains("e-summarycell")) {
          var uid2 = node.getAttribute("e-mappinguid");
          column = this.parent.getColumnByUid(uid2);
        } else {
          var index = parseInt(node.getAttribute("aria-colindex"), 10) - 1;
          column = cols[parseInt(index.toString(), 10)];
        }
        var width = 0;
        if (pos === "Left") {
          if (this.parent.getVisibleFrozenLeftCount()) {
            width = this.parent.getIndentCount() * 30;
          } else if (this.parent.getFrozenMode() === "Right") {
            width = this.parent.groupSettings.columns.length * 30;
          }
          for (var j = 0; j < cols.length; j++) {
            if (column.index > cols[parseInt(j.toString(), 10)].index) {
              if (column.uid === cols[parseInt(j.toString(), 10)].uid) {
                break;
              }
              if (cols[parseInt(j.toString(), 10)].freeze === "Left" || cols[parseInt(j.toString(), 10)].isFrozen || cols[parseInt(j.toString(), 10)].freeze === "Fixed") {
                if (cols[parseInt(j.toString(), 10)].visible) {
                  width += parseFloat(cols[parseInt(j.toString(), 10)].width.toString());
                }
              }
            }
          }
          applyStickyLeftRightPosition(node, (width === 0 ? width : width - 1) - translateX, this.parent.enableRtl, "Left");
        }
        if (pos === "Right") {
          width = this.parent.getFrozenMode() === "Right" && this.parent.isRowDragable() ? 30 : 0;
          for (var j = cols.length - 1; j >= 0; j--) {
            if (column.uid === cols[parseInt(j.toString(), 10)].uid) {
              break;
            }
            if (cols[parseInt(j.toString(), 10)].freeze === "Right" || cols[parseInt(j.toString(), 10)].freeze === "Fixed") {
              if (cols[parseInt(j.toString(), 10)].visible) {
                width += parseFloat(cols[parseInt(j.toString(), 10)].width.toString());
              }
            }
          }
          var colSpanwidth = 0;
          if (node.colSpan > 1) {
            colSpanwidth = this.calculateColspanWidth(cols, node, column.index);
          }
          applyStickyLeftRightPosition(node, width - colSpanwidth + translateX, this.parent.enableRtl, "Right");
        }
      }
    };
    Resize2.prototype.calculateColspanWidth = function(cols, node, index) {
      var width = 0;
      for (var j = index + 1; j < index + node.colSpan; j++) {
        width += parseInt(cols[parseInt(j.toString(), 10)].width.toString(), 10);
      }
      return width;
    };
    Resize2.prototype.refreshResizePosition = function() {
      this.refreshResizefrzCols(true);
    };
    Resize2.prototype.refreshResizefrzCols = function(freezeRefresh2, isAutoFitCol) {
      var _this = this;
      var translateX = this.parent.enableColumnVirtualization ? this.parent.translateX : 0;
      if (freezeRefresh2 || this.column.freeze === "Left" || this.column.isFrozen || this.column.columns && frozenDirection(this.column) === "Left") {
        var width_1 = this.parent.getIndentCount() * 30;
        var columns = this.parent.getColumns().filter(function(col) {
          return col.freeze === "Left" || col.isFrozen;
        });
        if (!freezeRefresh2 || isAutoFitCol) {
          this.frzHdrRefresh("Left");
        }
        for (var i = 0; i < columns.length; i++) {
          if (freezeRefresh2 || columns[parseInt(i.toString(), 10)].index > this.column.index) {
            var elements = [];
            if (this.parent.frozenRows) {
              elements = [].slice.call(this.parent.getHeaderContent().querySelectorAll('td[aria-colindex="' + (i + 1) + '"]')).concat([].slice.call(this.parent.getContent().querySelectorAll('td[aria-colindex="' + (i + 1) + '"]')));
            } else {
              elements = [].slice.call(this.parent.getContent().querySelectorAll('td[aria-colindex="' + (i + 1) + '"]'));
            }
            elements.filter(function(cell) {
              applyStickyLeftRightPosition(cell, width_1 - translateX, _this.parent.enableRtl, "Left");
            });
            if (this.parent.enableColumnVirtualization) {
              columns[parseInt(i.toString(), 10)].valueX = width_1;
            }
          }
          if (columns[parseInt(i.toString(), 10)].visible) {
            width_1 += parseFloat(columns[parseInt(i.toString(), 10)].width.toString());
          }
        }
        this.refreshResizeFixedCols("Left");
      }
      if (freezeRefresh2 || this.column.freeze === "Right" || this.column.columns && frozenDirection(this.column) === "Right") {
        var width_2 = this.parent.getFrozenMode() === "Right" && this.parent.isRowDragable() ? 30 : 0;
        var columns_1 = this.parent.getColumns();
        if (!freezeRefresh2 || isAutoFitCol) {
          this.frzHdrRefresh("Right");
        }
        var columnsRight = columns_1.filter(function(col) {
          return col.freeze === "Right";
        });
        var _loop_1 = function(i2) {
          var elements2 = [];
          if (this_1.parent.frozenRows) {
            elements2 = [].slice.call(this_1.parent.getHeaderContent().querySelectorAll('td[aria-colindex="' + (i2 + 1) + '"]')).concat([].slice.call(this_1.parent.getContent().querySelectorAll('td[aria-colindex="' + (i2 + 1) + '"]')));
          } else {
            elements2 = [].slice.call(this_1.parent.getContent().querySelectorAll('td[aria-colindex="' + (i2 + 1) + '"]'));
          }
          elements2.filter(function(cell) {
            var colSpanwidth = 0;
            if (cell.colSpan > 1) {
              colSpanwidth = _this.calculateColspanWidth(columns_1, cell, columns_1[parseInt(i2.toString(), 10)].index);
            }
            applyStickyLeftRightPosition(cell, width_2 - colSpanwidth + translateX, _this.parent.enableRtl, "Right");
          });
          if (this_1.parent.enableColumnVirtualization) {
            columns_1[parseInt(i2.toString(), 10)].valueX = width_2;
          }
          if (columns_1[parseInt(i2.toString(), 10)].visible) {
            width_2 = width_2 + parseFloat(columns_1[parseInt(i2.toString(), 10)].width.toString());
          }
        };
        var this_1 = this;
        for (var i = columns_1.length - 1; i >= columns_1.length - columnsRight.length; i--) {
          _loop_1(i);
        }
        this.refreshResizeFixedCols("Right");
      }
      if (this.column && (this.column.freeze === "Fixed" || this.column.columns && frozenDirection(this.column) === "Fixed")) {
        this.refreshResizeFixedCols("Left");
        this.refreshResizeFixedCols("Right");
        this.frzHdrRefresh("Left");
        this.frzHdrRefresh("Right");
      }
      if (this.parent.groupSettings.columns.length && this.parent.aggregates.length && this.parent.getContent().querySelector(".e-groupcaptionrow")) {
        this.refreshGroupCaptionRow();
      }
    };
    Resize2.prototype.refreshGroupCaptionRow = function() {
      var capRow = [].slice.call(this.parent.getContent().querySelectorAll(".e-groupcaptionrow"));
      for (var i = 0; i < capRow.length; i++) {
        var tr = capRow[parseInt(i.toString(), 10)];
        if (tr.querySelector(".e-summarycell")) {
          groupCaptionRowLeftRightPos(tr, this.parent);
        }
      }
    };
    Resize2.prototype.frzHdrRefresh = function(pos) {
      var _this = this;
      var translateX = this.parent.enableColumnVirtualization ? this.parent.translateX : 0;
      if (pos === "Left") {
        var tr = [].slice.call(this.parent.getHeaderContent().querySelector("thead").querySelectorAll("tr"));
        for (var i = 0; i < tr.length; i++) {
          var th = [].slice.call(tr[parseInt(i.toString(), 10)].querySelectorAll(".e-leftfreeze,.e-fixedfreeze"));
          var _loop_2 = function(j2) {
            var node = th[parseInt(j2.toString(), 10)];
            if (node.classList.contains("e-rowdragheader") || node.classList.contains("e-dragheadercell") || node.classList.contains("e-grouptopleftcell")) {
              return "continue";
            }
            var column = this_2.getParticularCol(node);
            var cols = this_2.parent.getColumns();
            var width = 0;
            var summarycell = [];
            if (this_2.parent.aggregates.length && this_2.parent.getFooterContent()) {
              if (this_2.parent.getContent().querySelectorAll(".e-summaryrow").length) {
                var summaryRows = [].slice.call(this_2.parent.getContent().querySelectorAll(".e-summaryrow"));
                summaryRows.filter(function(row2) {
                  summarycell.push(row2.querySelector('[e-mappinguid="' + column.uid + '"]'));
                });
              }
              summarycell = summarycell.concat([].slice.call(this_2.parent.getFooterContent().querySelectorAll('[e-mappinguid="' + column.uid + '"]')));
            }
            if (node.classList.contains("e-fixedfreeze")) {
              if (this_2.parent.getVisibleFrozenLeftCount()) {
                width = this_2.parent.getIndentCount() * 30;
              } else if (this_2.parent.getFrozenMode() === "Right") {
                width = this_2.parent.groupSettings.columns.length * 30;
              }
              for (var w = 0; w < cols.length; w++) {
                if (column.index > cols[parseInt(w.toString(), 10)].index) {
                  if (column.uid === cols[parseInt(w.toString(), 10)].uid) {
                    break;
                  }
                  if (cols[parseInt(w.toString(), 10)].freeze === "Left" || cols[parseInt(w.toString(), 10)].isFrozen || cols[parseInt(w.toString(), 10)].freeze === "Fixed") {
                    if (cols[parseInt(w.toString(), 10)].visible) {
                      width += parseInt(cols[parseInt(w.toString(), 10)].width.toString(), 10);
                    }
                  }
                }
              }
              if (summarycell && summarycell.length) {
                summarycell.filter(function(cell) {
                  applyStickyLeftRightPosition(cell, width - translateX, _this.parent.enableRtl, "Left");
                });
              }
              applyStickyLeftRightPosition(node, (width === 0 ? width : width - 1) - translateX, this_2.parent.enableRtl, "Left");
            } else {
              width = this_2.parent.getIndentCount() * 30;
              if (column.index === 0) {
                if (summarycell && summarycell.length) {
                  summarycell.filter(function(cell) {
                    applyStickyLeftRightPosition(cell, width - translateX, _this.parent.enableRtl, "Left");
                  });
                }
                applyStickyLeftRightPosition(node, width - translateX, this_2.parent.enableRtl, "Left");
                if (this_2.parent.enableColumnVirtualization) {
                  column.valueX = width;
                }
              } else {
                for (var k = 0; k < cols.length; k++) {
                  if (column.index < cols[parseInt(k.toString(), 10)].index || column.uid === cols[parseInt(k.toString(), 10)].uid) {
                    break;
                  }
                  if (cols[parseInt(k.toString(), 10)].visible) {
                    width += parseInt(cols[parseInt(k.toString(), 10)].width.toString(), 10);
                  }
                }
                if (summarycell && summarycell.length) {
                  summarycell.filter(function(cell) {
                    applyStickyLeftRightPosition(cell, width - translateX, _this.parent.enableRtl, "Left");
                  });
                }
                applyStickyLeftRightPosition(node, width - translateX, this_2.parent.enableRtl, "Left");
                if (this_2.parent.enableColumnVirtualization) {
                  column.valueX = width;
                }
              }
              addStickyColumnPosition(this_2.parent, column, node);
            }
          };
          var this_2 = this;
          for (var j = 0; j < th.length; j++) {
            _loop_2(j);
          }
        }
      }
      if (pos === "Right") {
        var tr = [].slice.call(this.parent.getHeaderContent().querySelector("thead").querySelectorAll("tr"));
        for (var i = 0; i < tr.length; i++) {
          var th = [].slice.call(tr[parseInt(i.toString(), 10)].querySelectorAll(".e-rightfreeze, .e-fixedfreeze"));
          var _loop_3 = function(j2) {
            var node = th[parseInt(j2.toString(), 10)];
            var column = this_3.getParticularCol(node);
            var cols = this_3.parent.getColumns();
            var width = 0;
            var summarycell = [];
            if (this_3.parent.aggregates.length && this_3.parent.getFooterContent()) {
              if (this_3.parent.getContent().querySelectorAll(".e-summaryrow").length) {
                var summaryRows = [].slice.call(this_3.parent.getContent().querySelectorAll(".e-summaryrow"));
                summaryRows.filter(function(row2) {
                  summarycell.push(row2.querySelector('[e-mappinguid="' + column.uid + '"]'));
                });
              }
              summarycell = summarycell.concat([].slice.call(this_3.parent.getFooterContent().querySelectorAll('[e-mappinguid="' + column.uid + '"]')));
            }
            if (node.classList.contains("e-fixedfreeze")) {
              width = this_3.parent.getFrozenMode() === "Right" && this_3.parent.isRowDragable() ? 30 : 0;
              for (var w = cols.length - 1; w >= 0; w--) {
                if (column.index < cols[parseInt(w.toString(), 10)].index) {
                  if (column.columns && isChildColumn(column, cols[parseInt(w.toString(), 10)].uid) || column.index > cols[parseInt(w.toString(), 10)].index) {
                    break;
                  }
                  if (cols[parseInt(w.toString(), 10)].freeze === "Right" || cols[parseInt(w.toString(), 10)].freeze === "Fixed") {
                    if (cols[parseInt(w.toString(), 10)].visible) {
                      width += parseFloat(cols[parseInt(w.toString(), 10)].width.toString());
                    }
                  }
                }
              }
              if (summarycell.length) {
                summarycell.filter(function(cell) {
                  applyStickyLeftRightPosition(cell, width + translateX, _this.parent.enableRtl, "Right");
                });
              }
              applyStickyLeftRightPosition(node, width + translateX, this_3.parent.enableRtl, "Right");
            } else {
              width = this_3.parent.getFrozenMode() === "Right" && this_3.parent.isRowDragable() ? 30 : 0;
              for (var k = cols.length - 1; k >= 0; k--) {
                if (column.columns && isChildColumn(column, cols[parseInt(k.toString(), 10)].uid) || column.index > cols[parseInt(k.toString(), 10)].index || column.uid === cols[parseInt(k.toString(), 10)].uid) {
                  break;
                }
                if (cols[parseInt(k.toString(), 10)].visible) {
                  width += parseInt(cols[parseInt(k.toString(), 10)].width.toString(), 10);
                }
              }
              if (summarycell.length) {
                summarycell.filter(function(cell) {
                  applyStickyLeftRightPosition(cell, width + translateX, _this.parent.enableRtl, "Right");
                });
              }
              applyStickyLeftRightPosition(node, width + translateX, this_3.parent.enableRtl, "Right");
              if (this_3.parent.enableColumnVirtualization) {
                column.valueX = width;
              }
            }
          };
          var this_3 = this;
          for (var j = th.length - 1; j >= 0; j--) {
            _loop_3(j);
          }
        }
      }
    };
    Resize2.prototype.getParticularCol = function(node) {
      var uid2 = node.classList.contains("e-filterbarcell") ? node.getAttribute("e-mappinguid") : node.querySelector("[e-mappinguid]").getAttribute("e-mappinguid");
      return this.parent.getColumnByUid(uid2);
    };
    Resize2.prototype.resizing = function(e) {
      var _this = this;
      if (Browser.isDevice && typeof e.preventDefault === "function") {
        e.preventDefault();
      }
      if (isNullOrUndefined(this.column)) {
        return;
      }
      if (this.parent.isFrozenGrid()) {
        this.refreshResizefrzCols();
      }
      var offsetWidth = 0;
      if (isNullOrUndefined(this.column)) {
        offsetWidth = parentsUntil(this.element, "th").offsetWidth;
      }
      if (this.parent.allowTextWrap) {
        this.updateResizeEleHeight();
        this.setHelperHeight();
      }
      var pageX = this.getPointX(e);
      var mousemove = this.parent.enableRtl ? -(pageX - this.pageX) : pageX - this.pageX;
      var prevWidth = parseFloat(this.column.width.toString());
      var colData = this.getColData(this.column, mousemove);
      if (!colData.width) {
        colData.width = closest(this.element, "th").offsetWidth;
      }
      var width = this.getWidth(colData.width, colData.minWidth, colData.maxWidth);
      this.parent.log("resize_min_max", {
        column: this.column,
        width
      });
      if (!this.parent.enableRtl && this.minMove >= pageX || this.parent.enableRtl && this.minMove <= pageX) {
        width = this.column.minWidth ? parseFloat(this.column.minWidth.toString()) : 10;
        this.pageX = pageX = this.minMove;
      }
      if (width !== parseFloat(isNullOrUndefined(this.column.width) || this.column.width === "auto" ? offsetWidth.toString() : this.column.width.toString())) {
        this.pageX = pageX;
        this.column.width = formatUnit(width);
        var args = {
          e,
          column: this.column
        };
        this.parent.trigger(onResize, args);
        if (args.cancel) {
          this.cancelResizeAction(true);
          return;
        }
        var columns = [this.column];
        var finalColumns = [this.column];
        if (this.column.columns) {
          columns = this.getSubColumns(this.column, []);
          columns = this.calulateColumnsWidth(columns, false, mousemove);
          finalColumns = this.calulateColumnsWidth(columns, true, mousemove);
        }
        var minMaxCols = this.parent.getColumns().filter(function(col2) {
          return col2.visible && (col2.maxWidth || col2.minWidth);
        });
        if (this.parent.resizeSettings.mode === "Auto" && minMaxCols.length) {
          var columns_2 = this.parent.getColumns().filter(function(col2) {
            return col2.visible && col2.uid !== _this.column.uid;
          });
          var distributedCols = this.distributeColWidth(columns_2, mousemove, 0);
          if (Math.round(distributedCols.usedWidth) !== Math.abs(mousemove)) {
            finalColumns[0].width = prevWidth + distributedCols.usedWidth * Math.sign(mousemove);
          }
          finalColumns = finalColumns.concat(distributedCols.columns);
        }
        this.resizeProcess = true;
        for (var _i = 0, finalColumns_1 = finalColumns; _i < finalColumns_1.length; _i++) {
          var col = finalColumns_1[_i];
          this.widthService.setColumnWidth(col, null, "resize");
        }
        this.resizeProcess = false;
        this.updateHelper();
      }
      this.isDblClk = false;
    };
    Resize2.prototype.distributeColWidth = function(columns, distributeWidth, usedWidth) {
      var incDecWidth = distributeWidth / columns.length;
      var absIncDecWidth = Math.abs(incDecWidth);
      var appliedColumns = [];
      var availableColumns = [];
      var extraWidth = 0;
      for (var _i = 0, columns_3 = columns; _i < columns_3.length; _i++) {
        var col = columns_3[_i];
        var afterIncDec = parseFloat(col.width.toString()) - incDecWidth;
        if (col.minWidth && afterIncDec < parseInt(col.minWidth.toString(), 10)) {
          var remainWidth = parseFloat((parseInt(col.minWidth.toString(), 10) - afterIncDec).toFixed(3));
          extraWidth += remainWidth;
          usedWidth += absIncDecWidth - remainWidth;
          col.width = col.minWidth;
          appliedColumns.push(col);
        } else if (col.maxWidth && afterIncDec > parseInt(col.maxWidth.toString(), 10)) {
          var remainWidth = parseFloat((afterIncDec - parseInt(col.maxWidth.toString(), 10)).toFixed(3));
          extraWidth += remainWidth;
          usedWidth += absIncDecWidth - remainWidth;
          col.width = col.maxWidth;
          appliedColumns.push(col);
        } else {
          usedWidth += absIncDecWidth;
          col.width = afterIncDec;
          availableColumns.push(col);
        }
      }
      var distributedCols = extraWidth && availableColumns.length ? this.distributeColWidth(availableColumns, extraWidth * Math.sign(distributeWidth), usedWidth) : {
        columns: availableColumns,
        usedWidth
      };
      return {
        columns: appliedColumns.concat(distributedCols.columns),
        usedWidth: distributedCols.usedWidth
      };
    };
    Resize2.prototype.calulateColumnsWidth = function(columns, isUpdate, mousemove) {
      var finalColumns = [];
      for (var _i = 0, columns_4 = columns; _i < columns_4.length; _i++) {
        var col = columns_4[_i];
        var totalWidth = 0;
        for (var i = 0; i < columns.length; i++) {
          totalWidth += parseFloat(columns[parseInt(i.toString(), 10)].width.toString());
        }
        var colData = this.getColData(col, parseFloat(col.width) * mousemove / totalWidth);
        var colWidth = this.getWidth(colData.width, colData.minWidth, colData.maxWidth);
        if (colWidth !== parseFloat(col.width.toString())) {
          if (isUpdate) {
            col.width = formatUnit(colWidth < 1 ? 1 : colWidth);
          }
          finalColumns.push(col);
        }
      }
      return finalColumns;
    };
    Resize2.prototype.getSubColumns = function(column, subColumns) {
      for (var _i = 0, _a = column.columns; _i < _a.length; _i++) {
        var col = _a[_i];
        if (col.visible !== false && col.allowResizing) {
          if (col.columns) {
            this.getSubColumns(col, subColumns);
          } else {
            subColumns.push(col);
          }
        }
      }
      return subColumns;
    };
    Resize2.prototype.resizeEnd = function(e) {
      if (!this.helper || this.parent.isDestroyed) {
        return;
      }
      var gObj = this.parent;
      if (gObj.isFrozenGrid()) {
        this.refreshResizePosition();
      }
      EventHandler.remove(this.parent.element, Browser.touchMoveEvent, this.resizing);
      EventHandler.remove(document, Browser.touchEndEvent, this.resizeEnd);
      if (Browser.isDevice) {
        EventHandler.remove(document, Browser.touchStartEvent, this.removeHelper);
        EventHandler.remove(this.helper, Browser.touchStartEvent, this.resizeStart);
      }
      this.updateCursor("remove");
      detach(this.helper);
      var args = {
        e,
        column: this.column
      };
      var content2 = this.parent.getContent().querySelector("." + content);
      var cTable = content2;
      if (cTable.scrollHeight > cTable.clientHeight) {
        this.parent.scrollModule.setPadding();
        cTable.style.overflowY = "scroll";
      }
      this.parent.trigger(resizeStop, args);
      closest(this.element, ".e-headercell").classList.add("e-resized");
      this.isFrozenColResized = false;
      if (this.parent.allowTextWrap) {
        this.updateResizeEleHeight();
        this.parent.notify(textWrapRefresh, {
          case: "textwrap"
        });
      }
      var headerTable = gObj.getHeaderTable();
      var contentTable = gObj.getContentTable();
      var footerTable;
      if (!isNullOrUndefined(gObj.getFooterContent())) {
        footerTable = gObj.getFooterContentTable();
      }
      var tableWidth = headerTable.offsetWidth;
      var contentwidth = gObj.getContent().scrollWidth;
      if (contentwidth > tableWidth) {
        if (!isNullOrUndefined(contentTable.querySelector(".e-emptyrow"))) {
          addClass([headerTable], ["e-tableborder"]);
          removeClass([contentTable], ["e-tableborder"]);
        } else {
          addClass([headerTable, contentTable], ["e-tableborder"]);
        }
        removeClass([gObj.element], ["e-left-shadow", "e-right-shadow"]);
      } else {
        removeClass([headerTable, contentTable], ["e-tableborder"]);
        if (gObj.getVisibleFrozenRightCount()) {
          addClass([gObj.element], "e-right-shadow");
        }
      }
      if (!isNullOrUndefined(footerTable)) {
        footerTable.classList.add("e-tableborder");
      }
      this.refresh();
      this.doubleTapEvent(e);
      this.isDblClk = true;
    };
    Resize2.prototype.getPointX = function(e) {
      if (e.touches && e.touches.length) {
        return e.touches[0].pageX;
      } else {
        return e.pageX;
      }
    };
    Resize2.prototype.refreshColumnWidth = function() {
      var columns = this.parent.getColumns();
      for (var _i = 0, _a = [].slice.apply(this.parent.getHeaderContent().querySelectorAll("th.e-headercell")); _i < _a.length; _i++) {
        var ele = _a[_i];
        for (var _b = 0, columns_5 = columns; _b < columns_5.length; _b++) {
          var column = columns_5[_b];
          if (ele.querySelector("[e-mappinguid]") && ele.querySelector("[e-mappinguid]").getAttribute("e-mappinguid") === column.uid && column.visible) {
            column.width = ele.getBoundingClientRect().width;
            break;
          }
        }
      }
      return columns;
    };
    Resize2.prototype.refreshStackedColumnWidth = function() {
      for (var _i = 0, _a = this.parent.getStackedColumns(this.parent.columns); _i < _a.length; _i++) {
        var stackedColumn = _a[_i];
        stackedColumn.width = this.getStackedWidth(stackedColumn, 0);
      }
    };
    Resize2.prototype.getStackedWidth = function(column, width) {
      for (var _i = 0, _a = column.columns; _i < _a.length; _i++) {
        var col = _a[_i];
        if (col.visible !== false) {
          if (col.columns) {
            width = this.getStackedWidth(col, width);
          } else {
            width += parseFloat(col.width.toString());
          }
        }
      }
      return width;
    };
    Resize2.prototype.getTargetColumn = function(e) {
      var cell = closest(e.target, resizeClassList.header);
      cell = cell.querySelector(".e-headercelldiv") || cell.querySelector(".e-stackedheadercelldiv");
      var uid2 = cell.getAttribute("e-mappinguid");
      return this.parent.getColumnByUid(uid2);
    };
    Resize2.prototype.updateCursor = function(action) {
      var headerRows = [].slice.call(this.parent.getHeaderContent().querySelectorAll("th"));
      headerRows.push(this.parent.element);
      for (var _i = 0, headerRows_1 = headerRows; _i < headerRows_1.length; _i++) {
        var row2 = headerRows_1[_i];
        row2.classList["" + action](resizeClassList.cursor);
      }
    };
    Resize2.prototype.refresh = function() {
      this.column = null;
      this.pageX = null;
      this.element = null;
      this.helper = null;
    };
    Resize2.prototype.appendHelper = function() {
      this.helper = this.parent.createElement("div", {
        className: resizeClassList.helper
      });
      this.parent.element.appendChild(this.helper);
      this.setHelperHeight();
    };
    Resize2.prototype.setHelperHeight = function() {
      var height = this.parent.getContent().offsetHeight - this.getScrollBarWidth();
      var rect = closest(this.element, resizeClassList.header);
      var tr = [].slice.call(this.parent.getHeaderContent().querySelectorAll("tr"));
      for (var i = tr.indexOf(rect.parentElement); i < tr.length && i > -1; i++) {
        height += tr[parseInt(i.toString(), 10)].offsetHeight;
      }
      var pos = this.calcPos(rect);
      pos.left += this.parent.enableRtl ? 0 - 1 : rect.offsetWidth - 2;
      this.helper.style.cssText = "height: " + height + "px; top: " + pos.top + "px; left:" + Math.floor(pos.left) + "px;";
      if (this.parent.enableVirtualization) {
        this.helper.classList.add("e-virtual-rhandler");
      }
    };
    Resize2.prototype.getScrollBarWidth = function(height) {
      var ele = this.parent.getContent().firstChild;
      return ele.scrollHeight > ele.clientHeight && height || ele.scrollWidth > ele.clientWidth ? getScrollBarWidth() : 0;
    };
    Resize2.prototype.removeHelper = function(e) {
      var cls = e.target.classList;
      if (!(cls.contains(resizeClassList.root) || cls.contains(resizeClassList.icon)) && this.helper) {
        EventHandler.remove(document, Browser.touchStartEvent, this.removeHelper);
        EventHandler.remove(this.helper, Browser.touchStartEvent, this.resizeStart);
        detach(this.helper);
        this.refresh();
      }
    };
    Resize2.prototype.updateHelper = function() {
      var rect = closest(this.element, resizeClassList.header);
      var left;
      left = Math.floor(this.calcPos(rect).left + (this.parent.enableRtl ? 0 - 1 : rect.offsetWidth - 2));
      var borderWidth = 2;
      if (left > this.parentElementWidth) {
        left = this.parentElementWidth - borderWidth;
      }
      this.helper.style.left = left + "px";
    };
    Resize2.prototype.calcPos = function(elem) {
      var parentOffset = {
        top: 0,
        left: 0
      };
      var offset = elem.getBoundingClientRect();
      var doc = elem.ownerDocument;
      var offsetParent = parentsUntil(elem, "e-grid") || doc.documentElement;
      while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && offsetParent.style.position === "static") {
        offsetParent = offsetParent.parentNode;
      }
      if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
        parentOffset = offsetParent.getBoundingClientRect();
      }
      return {
        top: offset.top - parentOffset.top,
        left: offset.left - parentOffset.left
      };
    };
    Resize2.prototype.doubleTapEvent = function(e) {
      var _this = this;
      if (this.getUserAgent() && this.isDblClk) {
        if (!this.tapped) {
          this.tapped = setTimeout(function() {
            _this.tapped = null;
          }, 300);
        } else {
          clearTimeout(this.tapped);
          this.callAutoFit(e);
          this.tapped = null;
        }
      }
    };
    Resize2.prototype.getUserAgent = function() {
      var userAgent = Browser.userAgent.toLowerCase();
      return /iphone|ipod|ipad/.test(userAgent);
    };
    Resize2.prototype.timeoutHandler = function() {
      this.tapped = null;
    };
    return Resize2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/reorder.js
var Reorder = (
  /** @class */
  function() {
    function Reorder2(parent) {
      this.idx = 0;
      this.parent = parent;
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(headerDrop, this.headerDrop, this);
      this.parent.on(uiUpdate, this.enableAfterRender, this);
      this.parent.on(reorderComplete, this.onActionComplete, this);
      this.parent.on(columnDrag, this.drag, this);
      this.parent.on(columnDragStart, this.dragStart, this);
      this.parent.on(columnDragStop, this.dragStop, this);
      this.parent.on(headerDrop, this.headerDrop, this);
      this.parent.on(headerRefreshed, this.createReorderElement, this);
      this.parent.on(keyPressed, this.keyPressHandler, this);
      this.parent.on(destroy, this.destroy, this);
    }
    Reorder2.prototype.chkDropPosition = function(srcElem, destElem) {
      var col = this.parent.getColumnByUid(destElem.firstElementChild.getAttribute("e-mappinguid"));
      var bool = col ? !col.lockColumn : true;
      return (srcElem.parentElement.isEqualNode(destElem.parentElement) || this.parent.enableColumnVirtualization || this.parent.isFrozenGrid() && Array.prototype.indexOf.call(closest(srcElem, "thead").children, srcElem.parentElement) === Array.prototype.indexOf.call(closest(destElem, "thead").children, destElem.parentElement)) && this.targetParentContainerIndex(srcElem, destElem) > -1 && bool;
    };
    Reorder2.prototype.chkDropAllCols = function(srcElem, destElem) {
      var isFound;
      var headers = this.getHeaderCells();
      var header;
      while (!isFound && headers.length > 0) {
        header = headers.pop();
        isFound = srcElem !== header && this.targetParentContainerIndex(srcElem, destElem) > -1;
      }
      return isFound;
    };
    Reorder2.prototype.findColParent = function(col, cols, parent) {
      parent = parent;
      for (var i = 0, len = cols.length; i < len; i++) {
        if (col === cols[parseInt(i.toString(), 10)]) {
          return true;
        } else if (cols[parseInt(i.toString(), 10)].columns) {
          var cnt = parent.length;
          parent.push(cols[parseInt(i.toString(), 10)]);
          if (!this.findColParent(col, cols[parseInt(i.toString(), 10)].columns, parent)) {
            parent.splice(cnt, parent.length - cnt);
          } else {
            return true;
          }
        }
      }
      return false;
    };
    Reorder2.prototype.getColumnsModel = function(cols, isNotStackedHeader) {
      var columnModel = [];
      var subCols = [];
      for (var i = 0, len = cols.length; i < len; i++) {
        if (!isNullOrUndefined(cols[parseInt(i.toString(), 10)])) {
          if (cols[parseInt(i.toString(), 10)].visible) {
            columnModel.push(cols[parseInt(i.toString(), 10)]);
          } else if (isNotStackedHeader) {
            columnModel.push(cols[parseInt(i.toString(), 10)]);
          }
          if (cols[parseInt(i.toString(), 10)].columns) {
            subCols = subCols.concat(cols[parseInt(i.toString(), 10)].columns);
          }
        }
      }
      if (subCols.length) {
        columnModel = columnModel.concat(this.getColumnsModel(subCols));
      }
      return columnModel;
    };
    Reorder2.prototype.headerDrop = function(e) {
      var gObj = this.parent;
      var dropElement = this.element.querySelector(".e-headercelldiv") || this.element.querySelector(".e-stackedheadercelldiv");
      var uId = dropElement.getAttribute("e-mappinguid");
      var column = gObj.getColumnByUid(uId);
      if (!closest(e.target, "th") || !isNullOrUndefined(column) && (!column.allowReordering || column.lockColumn)) {
        this.parent.log("action_disabled_column", {
          moduleName: this.getModuleName(),
          column
        });
        return;
      }
      var destElem = closest(e.target, ".e-headercell");
      var destElemDiv = destElem.querySelector(".e-headercelldiv") || destElem.querySelector(".e-stackedheadercelldiv");
      var destElemUid = destElemDiv.getAttribute("e-mappinguid");
      if (!isNullOrUndefined(destElemUid)) {
        var destColumn = gObj.getColumnByUid(destElemUid);
        if (isNullOrUndefined(destColumn) || !destColumn.allowReordering || destColumn.lockColumn) {
          this.parent.log("action_disabled_column", {
            moduleName: this.getModuleName(),
            column,
            destColumn
          });
          return;
        }
      }
      if (destElem && !(!this.chkDropPosition(this.element, destElem) || !this.chkDropAllCols(this.element, destElem))) {
        if (this.parent.enableColumnVirtualization) {
          var columns = this.parent.columns;
          var sourceUid_1 = this.element.querySelector(".e-headercelldiv").getAttribute("e-mappinguid");
          var col = this.parent.columns.filter(function(col2) {
            return col2.uid === sourceUid_1;
          });
          var colMatchIndex_1 = null;
          var column_1 = col[0];
          var destUid_1 = destElem.querySelector(".e-headercelldiv").getAttribute("e-mappinguid");
          columns.some(function(col2, index) {
            if (col2.uid === destUid_1) {
              colMatchIndex_1 = index;
              return col2.uid === destUid_1;
            }
            return false;
          });
          if (!isNullOrUndefined(colMatchIndex_1)) {
            this.moveColumns(colMatchIndex_1, column_1);
          }
        } else {
          var newIndex = this.targetParentContainerIndex(this.element, destElem);
          var uid2 = this.element.firstElementChild.getAttribute("e-mappinguid");
          this.destElement = destElem;
          this.parent.notify(setReorderDestinationElement, {
            ele: destElem
          });
          if (uid2) {
            this.moveColumns(newIndex, this.parent.getColumnByUid(uid2));
          } else {
            var headers = this.getHeaderCells();
            var oldIdx = getElementIndex(this.element, headers);
            var columns = this.getColumnsModel(this.parent.columns);
            this.moveColumns(newIndex, columns[parseInt(oldIdx.toString(), 10)]);
          }
        }
      }
    };
    Reorder2.prototype.isActionPrevent = function(gObj) {
      return isActionPrevent(gObj);
    };
    Reorder2.prototype.moveColumns = function(destIndex, column, reorderByColumn, preventRefresh) {
      var gObj = this.parent;
      if (this.isActionPrevent(gObj)) {
        gObj.notify(preventBatch, {
          instance: this,
          handler: this.moveColumns,
          arg1: destIndex,
          arg2: column
        });
        return;
      }
      var parent = this.getColParent(column, this.parent.columns);
      var cols = parent ? parent.columns : this.parent.columns;
      var srcIdx = inArray(column, cols);
      if ((parent || this.parent.lockcolPositionCount) && !reorderByColumn && !this.parent.enableColumnVirtualization) {
        for (var i = 0; i < cols.length; i++) {
          if (cols[parseInt(i.toString(), 10)].field === column.field) {
            srcIdx = i;
            break;
          }
        }
        var col = this.parent.getColumnByUid(this.destElement.firstElementChild.getAttribute("e-mappinguid"));
        if (col) {
          for (var i = 0; i < cols.length; i++) {
            if (cols[parseInt(i.toString(), 10)].field === col.field) {
              destIndex = i;
              break;
            }
          }
        } else {
          for (var i = 0; i < cols.length; i++) {
            if (cols[parseInt(i.toString(), 10)].headerText === this.destElement.innerText.trim()) {
              destIndex = i;
            }
          }
        }
      }
      if (!gObj.allowReordering || srcIdx === destIndex || srcIdx === -1 || destIndex === -1) {
        return;
      }
      cols.splice(destIndex, 0, cols.splice(srcIdx, 1)[0]);
      var args = {
        column,
        destIndex,
        columns: cols,
        parent,
        cancel: false
      };
      gObj.notify(refreshFrozenColumns, args);
      if (args.cancel) {
        return;
      }
      if (this.parent.isFrozenGrid()) {
        if (this.parent.frozenColumns) {
          for (var i = 0; i < cols.length; i++) {
            if (cols[parseInt(i.toString(), 10)].freeze === "Left") {
              cols[parseInt(i.toString(), 10)].freeze = void 0;
            }
          }
        } else if (!(parent && parent.columns)) {
          if (this.parent.getFrozenLeftCount() > destIndex) {
            column.freeze = "Left";
          } else if (cols.length - this.parent.getFrozenRightColumnsCount() <= destIndex) {
            column.freeze = "Right";
          } else {
            column.freeze = column.freeze === "Fixed" ? "Fixed" : void 0;
          }
        }
      }
      if (preventRefresh !== false) {
        var reorderArgs = {
          type: actionBegin,
          requestType: "reorder",
          fromIndex: destIndex,
          toIndex: srcIdx,
          toColumnUid: column.uid,
          cancel: false
        };
        gObj.notify(modelChanged, reorderArgs);
        if (reorderArgs.cancel) {
          cols.splice(srcIdx, 0, cols.splice(destIndex, 1)[0]);
          return;
        }
      }
      gObj.getColumns(true);
      gObj.preventAutoFit = true;
      gObj.notify(columnPositionChanged, {
        fromIndex: destIndex,
        toIndex: srcIdx
      });
      if (this.parent.isFrozenGrid()) {
        var cols_1 = this.parent.columns;
        this.idx = 0;
        this.refreshColumnIndex(cols_1);
        this.parent.notify(refreshFrozenPosition, {});
      }
    };
    Reorder2.prototype.refreshColumnIndex = function(cols) {
      for (var i = 0; i < cols.length; i++) {
        cols[parseInt(i.toString(), 10)].index = this.idx;
        this.idx++;
        if (cols[parseInt(i.toString(), 10)].columns && cols[parseInt(i.toString(), 10)].columns.length) {
          this.refreshColumnIndex(cols[parseInt(i.toString(), 10)].columns);
        }
      }
    };
    Reorder2.prototype.targetParentContainerIndex = function(srcElem, destElem) {
      var cols = this.parent.columns;
      var headers = this.getHeaderCells();
      var stackedHdrColumn = this.parent.getStackedColumns(cols);
      var stackedCols = [];
      if (stackedHdrColumn.length) {
        stackedCols = this.getAllStackedheaderParentColumns(headers);
      }
      var flatColumns = stackedHdrColumn.length && stackedCols.length ? this.getColumnsModel(stackedCols) : this.getColumnsModel(cols, true);
      var parent = this.getColParent(flatColumns[getElementIndex(srcElem, headers)], cols);
      cols = parent ? parent.columns : cols;
      return inArray(flatColumns[getElementIndex(destElem, headers)], cols);
    };
    Reorder2.prototype.getAllStackedheaderParentColumns = function(headers) {
      var stackedCols = [];
      for (var i = 0; i < headers.length; i++) {
        if (headers[parseInt(i.toString(), 10)].classList.contains("e-hide")) {
          headers.splice(i, 1);
          i--;
        } else if (headers[parseInt(i.toString(), 10)].closest("thead").firstChild === headers[parseInt(i.toString(), 10)].parentElement) {
          stackedCols.push(this.parent.getColumnByUid(headers[parseInt(i.toString(), 10)].firstElementChild.getAttribute("e-mappinguid")));
        }
      }
      return stackedCols;
    };
    Reorder2.prototype.getHeaderCells = function() {
      return [].slice.call(this.parent.element.getElementsByClassName("e-headercell"));
    };
    Reorder2.prototype.getColParent = function(column, columns) {
      var parents2 = [];
      this.findColParent(column, columns, parents2);
      return parents2[parents2.length - 1];
    };
    Reorder2.prototype.reorderSingleColumn = function(fromFName, toFName) {
      var fColumn = this.parent.enableColumnVirtualization ? this.parent.columns.filter(function(col) {
        return col.field === fromFName;
      })[0] : this.parent.getColumnByField(fromFName);
      var toColumn = this.parent.enableColumnVirtualization ? this.parent.columns.filter(function(col) {
        return col.field === toFName;
      })[0] : this.parent.getColumnByField(toFName);
      if (!isNullOrUndefined(fColumn) && (!fColumn.allowReordering || fColumn.lockColumn) || !isNullOrUndefined(toColumn) && (!toColumn.allowReordering || toColumn.lockColumn)) {
        this.parent.log("action_disabled_column", {
          moduleName: this.getModuleName(),
          column: fColumn,
          destColumn: toColumn
        });
        return;
      }
      var column = toColumn;
      var parent = this.getColParent(column, this.parent.columns);
      var columns = parent ? parent.columns : this.parent.columns;
      var destIndex = inArray(column, columns);
      if (destIndex > -1) {
        this.moveColumns(destIndex, fColumn, true);
      }
    };
    Reorder2.prototype.reorderMultipleColumns = function(fromFNames, toFName) {
      var toIndex = this.parent.getColumnIndexByField(toFName);
      var toColumn = this.parent.getColumnByField(toFName);
      if (toIndex < 0 || !isNullOrUndefined(toColumn) && (!toColumn.allowReordering || toColumn.lockColumn)) {
        return;
      }
      for (var i = 0; i < fromFNames.length; i++) {
        var column = this.parent.getColumnByField(fromFNames[parseInt(i.toString(), 10)]);
        if (!isNullOrUndefined(column) && (!column.allowReordering || column.lockColumn)) {
          return;
        }
      }
      for (var i = 0; i < fromFNames.length; i++) {
        var column = this.parent.getColumnByIndex(toIndex);
        var parent_1 = this.getColParent(column, this.parent.columns);
        var columns = parent_1 ? parent_1.columns : this.parent.columns;
        var destIndex = inArray(column, columns);
        if (destIndex > -1) {
          this.moveColumns(destIndex, this.parent.getColumnByField(fromFNames[parseInt(i.toString(), 10)]), true, true);
        }
        if (this.parent.getColumnIndexByField(fromFNames[i + 1]) >= destIndex) {
          toIndex++;
        }
      }
    };
    Reorder2.prototype.moveTargetColumn = function(column, toIndex) {
      if (toIndex > -1) {
        this.moveColumns(toIndex, column, true);
      }
    };
    Reorder2.prototype.reorderSingleColumnByTarget = function(fieldName, toIndex) {
      this.moveTargetColumn(this.parent.getColumnByField(fieldName), toIndex);
    };
    Reorder2.prototype.reorderMultipleColumnByTarget = function(fieldName, toIndex) {
      for (var i = 0; i < fieldName.length; i++) {
        this.reorderSingleColumnByTarget(fieldName[parseInt(i.toString(), 10)], toIndex);
      }
    };
    Reorder2.prototype.reorderColumns = function(fromFName, toFName) {
      if (typeof fromFName === "string") {
        this.reorderSingleColumn(fromFName, toFName);
        this.fromCol = fromFName;
      } else {
        this.reorderMultipleColumns(fromFName, toFName);
        this.fromCol = fromFName[0];
      }
    };
    Reorder2.prototype.reorderColumnByIndex = function(fromIndex, toIndex) {
      this.moveTargetColumn(this.parent.getColumnByIndex(fromIndex), toIndex);
    };
    Reorder2.prototype.reorderColumnByTargetIndex = function(fieldName, toIndex) {
      if (typeof fieldName === "string") {
        this.reorderSingleColumnByTarget(fieldName, toIndex);
      } else {
        this.reorderMultipleColumnByTarget(fieldName, toIndex);
      }
    };
    Reorder2.prototype.enableAfterRender = function(e) {
      if (e.module === this.getModuleName() && e.enable) {
        this.createReorderElement();
      }
    };
    Reorder2.prototype.createReorderElement = function(e) {
      if (e && e.args && e.args.isXaxis) {
        this.setDisplay("none");
      }
      var header = this.parent.element.querySelector("." + headerContent);
      var upArrowDiv = this.parent.createElement("div", {
        className: "e-icons e-icon-reorderuparrow e-reorderuparrow"
      });
      upArrowDiv.style.display = "none";
      this.upArrow = upArrowDiv;
      header.appendChild(this.upArrow);
      var downArrowDiv = this.parent.createElement("div", {
        className: "e-icons e-icon-reorderdownarrow e-reorderdownarrow"
      });
      downArrowDiv.style.display = "none";
      this.downArrow = downArrowDiv;
      header.appendChild(this.downArrow);
    };
    Reorder2.prototype.onActionComplete = function(e) {
      this.parent.preventAutoFit = false;
      this.parent.trigger(actionComplete, extend(e, {
        type: actionComplete
      }));
      var target = this.fromCol && this.parent.getColumnHeaderByField(this.fromCol);
      if (target) {
        this.parent.focusModule.onClick({
          target
        }, true);
      }
    };
    Reorder2.prototype.destroy = function() {
      var gridElement = this.parent.element;
      if (this.parent.isDestroyed || !gridElement || !gridElement.querySelector("." + gridHeader) && !gridElement.querySelector("." + gridContent)) {
        return;
      }
      if (this.upArrow.parentNode) {
        remove(this.upArrow);
      }
      if (this.downArrow.parentNode) {
        remove(this.downArrow);
      }
      this.parent.off(headerDrop, this.headerDrop);
      this.parent.off(uiUpdate, this.enableAfterRender);
      this.parent.off(reorderComplete, this.onActionComplete);
      this.parent.off(columnDrag, this.drag);
      this.parent.off(columnDragStart, this.dragStart);
      this.parent.off(columnDragStop, this.dragStop);
      this.parent.off(headerRefreshed, this.createReorderElement);
      this.parent.off(keyPressed, this.keyPressHandler);
      this.parent.off(destroy, this.destroy);
    };
    Reorder2.prototype.keyPressHandler = function(e) {
      var gObj = this.parent;
      var isMacLike = /(Mac)/i.test(navigator.platform);
      if (isMacLike && e.metaKey) {
        if (e.action === "leftArrow") {
          e.action = "ctrlLeftArrow";
        } else if (e.action === "rightArrow") {
          e.action = "ctrlRightArrow";
        }
      }
      switch (e.action) {
        case "ctrlLeftArrow":
        case "ctrlRightArrow":
          var element = gObj.focusModule.currentInfo.element;
          if (element && element.classList.contains("e-headercell")) {
            var column = gObj.getColumnByUid(element.firstElementChild.getAttribute("e-mappinguid"));
            var visibleCols = gObj.getVisibleColumns();
            var index = visibleCols.indexOf(column);
            var toCol = e.action === "ctrlLeftArrow" ? visibleCols[index - 1] : visibleCols[index + 1];
            if (toCol && toCol.field && column.field) {
              this.reorderColumns(column.field, toCol.field);
            }
          }
          break;
      }
    };
    Reorder2.prototype.drag = function(e) {
      var gObj = this.parent;
      var target = e.target;
      var closest2 = closest(target, ".e-headercell:not(.e-stackedHeaderCell)");
      var cloneElement = gObj.element.querySelector(".e-cloneproperties");
      var content2 = gObj.getContent().firstElementChild;
      var isLeft = this.x > getPosition(e.event).x + content2.scrollLeft;
      removeClass([].slice.call(gObj.getHeaderTable().getElementsByClassName("e-reorderindicate")), ["e-reorderindicate"]);
      this.setDisplay("none");
      this.stopTimer();
      classList(cloneElement, ["e-defaultcur"], ["e-notallowedcur"]);
      this.updateScrollPostion(e.event);
      if (closest2 && !closest2.isEqualNode(this.element)) {
        target = closest2;
        var uid2 = target.querySelector(".e-headercelldiv, .e-stackedheadercelldiv").getAttribute("e-mappinguid");
        if (!(!this.chkDropPosition(this.element, target) || !this.chkDropAllCols(this.element, target)) && gObj.getColumnByUid(uid2).allowReordering && e.column.allowReordering) {
          this.updateArrowPosition(target, isLeft);
          classList(target, ["e-allowDrop", "e-reorderindicate"], []);
        } else if (!(gObj.allowGrouping && parentsUntil(e.target, "e-groupdroparea"))) {
          classList(cloneElement, ["e-notallowedcur"], ["e-defaultcur"]);
        }
      } else {
        if (closest2 && closest2.isEqualNode(this.element) && !(gObj.allowGrouping && e.column.allowGrouping || e.column.allowReordering)) {
          classList(cloneElement, ["e-notallowedcur"], ["e-defaultcur"]);
        } else if (!closest2 && !(gObj.allowGrouping && parentsUntil(e.target, "e-groupdroparea"))) {
          classList(cloneElement, ["e-notallowedcur"], ["e-defaultcur"]);
        }
      }
      if (!e.column.allowReordering || e.column.lockColumn) {
        return;
      }
      gObj.trigger(columnDrag, {
        target,
        draggableType: "headercell",
        column: e.column
      });
    };
    Reorder2.prototype.updateScrollPostion = function(e) {
      var _this = this;
      var x = getPosition(e).x;
      var cliRect = this.parent.element.getBoundingClientRect();
      var cliRectBaseRight = cliRect.right;
      var cliRectBaseLeft = cliRect.left;
      var scrollElem = this.parent.getContent().firstElementChild;
      if (x > cliRectBaseLeft && x < cliRectBaseLeft + 35) {
        this.timer = window.setInterval(function() {
          _this.setScrollLeft(scrollElem, true);
        }, 50);
      } else if (x < cliRectBaseRight && x > cliRectBaseRight - 35) {
        this.timer = window.setInterval(function() {
          _this.setScrollLeft(scrollElem, false);
        }, 50);
      }
    };
    Reorder2.prototype.setScrollLeft = function(scrollElem, isLeft) {
      var scrollLeft = scrollElem.scrollLeft;
      scrollElem.scrollLeft = scrollElem.scrollLeft + (isLeft ? -5 : 5);
      if (scrollLeft !== scrollElem.scrollLeft) {
        this.setDisplay("none");
      }
    };
    Reorder2.prototype.stopTimer = function() {
      window.clearInterval(this.timer);
    };
    Reorder2.prototype.updateArrowPosition = function(target, isLeft) {
      var cliRect = target.getBoundingClientRect();
      var cliRectBase = this.parent.element.getBoundingClientRect();
      if (isLeft && cliRect.left < cliRectBase.left || !isLeft && cliRect.right > cliRectBase.right) {
        return;
      }
      var isSticky = this.parent.getHeaderContent().classList.contains("e-sticky");
      this.upArrow.style.top = isSticky ? cliRect.top + cliRect.height + "px" : cliRect.top + cliRect.height - cliRectBase.top + "px";
      this.downArrow.style.top = isSticky ? cliRect.top - 7 + "px" : cliRect.top - cliRectBase.top - 7 + "px";
      this.upArrow.style.left = this.downArrow.style.left = isSticky ? (isLeft ? cliRect.left : cliRect.right) - 4 + "px" : (isLeft ? cliRect.left : cliRect.right) - cliRectBase.left - 4 + "px";
      this.setDisplay("");
    };
    Reorder2.prototype.dragStart = function(e) {
      var gObj = this.parent;
      var target = e.target;
      this.element = target.classList.contains("e-headercell") ? target : parentsUntil(target, "e-headercell");
      if (!e.column.allowReordering || e.column.lockColumn) {
        return;
      }
      var content2 = gObj.getContent().firstElementChild;
      this.x = getPosition(e.event).x + content2.scrollLeft;
      gObj.trigger(columnDragStart, {
        target,
        draggableType: "headercell",
        column: e.column
      });
    };
    Reorder2.prototype.dragStop = function(e) {
      var gObj = this.parent;
      this.setDisplay("none");
      this.stopTimer();
      if (!e.cancel) {
        gObj.trigger(columnDrop, {
          target: e.target,
          draggableType: "headercell",
          column: e.column
        });
      }
      removeClass([].slice.call(gObj.getHeaderTable().getElementsByClassName("e-reorderindicate")), ["e-reorderindicate"]);
    };
    Reorder2.prototype.setDisplay = function(display) {
      this.upArrow.style.display = display;
      this.downArrow.style.display = display;
    };
    Reorder2.prototype.getModuleName = function() {
      return "reorder";
    };
    return Reorder2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/row-reorder.js
var RowDD = (
  /** @class */
  function() {
    function RowDD2(parent) {
      var _this = this;
      this.selectedRows = [];
      this.isOverflowBorder = true;
      this.selectedRowColls = [];
      this.isRefresh = true;
      this.isReplaceDragEle = true;
      this.istargetGrid = false;
      this.helper = function(e) {
        var gObj = _this.parent;
        var target = _this.draggable.currentStateTarget;
        if (!isNullOrUndefined(target) && gObj.rowDropSettings.targetID && !isNullOrUndefined(target.classList) && !target.classList.contains("e-rowcell")) {
          target = parentsUntil(target, "e-rowcell");
        }
        var visualElement = _this.parent.createElement("div", {
          className: "e-cloneproperties e-draganddrop e-grid e-dragclone"
        });
        visualElement.style.height = "auto";
        var table2 = _this.parent.createElement("table", {
          attrs: {
            role: "grid"
          }
        });
        var tbody2 = _this.parent.createElement(tbody, {
          attrs: {
            role: "rowgroup"
          }
        });
        if (document.getElementsByClassName("e-griddragarea").length || gObj.rowDropSettings.targetID && (!isNullOrUndefined(target) && !target.classList.contains("e-selectionbackground") && gObj.selectionSettings.type !== "Single" || !parentsUntil(target, "e-rowcell")) || !gObj.rowDropSettings.targetID && !parentsUntil(target, "e-rowdragdrop")) {
          return false;
        }
        if (gObj.rowDropSettings.targetID && gObj.selectionSettings.mode === "Row" && gObj.selectionSettings.type === "Single") {
          gObj.selectRow(parseInt(_this.draggable.currentStateTarget.parentElement.getAttribute(ariaRowIndex), 10) - 1);
        }
        _this.startedRow = closest(target, "tr").cloneNode(true);
        if (_this.parent.isFrozenGrid()) {
          var nodes = [].slice.call(_this.startedRow.querySelectorAll(".e-rowcell"));
          for (var i = 0; i < nodes.length; i++) {
            removeClass([nodes[parseInt(i.toString(), 10)]], ["e-leftfreeze", "e-freezeleftborder", "e-fixedfreeze", "e-freezerightborder", "e-rightfreeze", "e-unfreeze"]);
            nodes[parseInt(i.toString(), 10)].removeAttribute("style");
          }
        }
        _this.processArgs(target);
        var args = {
          selectedRow: _this.rows,
          dragelement: target,
          cloneElement: visualElement,
          cancel: false,
          data: _this.rowData
        };
        var selectedRows = gObj.getSelectedRows();
        gObj.trigger(rowDragStartHelper, args);
        var cancel = "cancel";
        if (args["" + cancel]) {
          return false;
        }
        removeElement(_this.startedRow, ".e-indentcell");
        removeElement(_this.startedRow, ".e-detailrowcollapse");
        removeElement(_this.startedRow, ".e-detailrowexpand");
        if (!(gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings.enableCache)) {
          _this.removeCell(_this.startedRow, gridChkBox);
        }
        var activeCells = _this.startedRow.querySelectorAll(".e-active");
        activeCells.forEach(function(cell) {
          return cell.classList.remove("e-active");
        });
        tbody2.appendChild(_this.startedRow);
        if (gObj.getSelectedRowIndexes().length > 1 && _this.startedRow.hasAttribute("aria-selected")) {
          var dropCountEle = _this.parent.createElement("span", {
            className: "e-dropitemscount",
            innerHTML: "" + selectedRows.length
          });
          visualElement.appendChild(dropCountEle);
        }
        var ele = closest(target, "tr").querySelector(".e-icon-rowdragicon");
        if (ele) {
          ele.classList.add("e-dragstartrow");
        }
        table2.appendChild(tbody2);
        visualElement.appendChild(table2);
        gObj.element.appendChild(visualElement);
        return visualElement;
      };
      this.dragStart = function(e) {
        var gObj = _this.parent;
        if ((gObj.enableVirtualization || gObj.infiniteScrollSettings.enableCache) && gObj.allowGrouping && gObj.groupSettings.columns.length && !isNullOrUndefined(e.target.closest("tr"))) {
          var dragTrs = e.dragElement.querySelectorAll("tr");
          var indentCells = e.target.closest("tr").querySelectorAll(".e-indentcell");
          for (var i = 0; i < dragTrs.length; i++) {
            for (var j = 0; j < indentCells.length; j++) {
              var cloneIndentCell = indentCells[parseInt(j.toString(), 10)].cloneNode(true);
              dragTrs[parseInt(i.toString(), 10)].insertBefore(cloneIndentCell, dragTrs[parseInt(i.toString(), 10)].firstElementChild);
            }
          }
        }
        if (gObj.element.classList.contains("e-childgrid")) {
          var parentGrid = _this.getParentGrid(gObj.element);
          parentGrid.appendChild(e.dragElement);
          gObj.element.appendChild(gObj.createElement("div", {
            className: "e-drag-ref"
          }));
        }
        document.body.classList.add("e-prevent-select");
        if (document.getElementsByClassName("e-griddragarea").length) {
          return;
        }
        var target = e.target;
        var spanCssEle = _this.parent.element.querySelector(".e-dropitemscount");
        if (_this.parent.getSelectedRecords().length > 1 && spanCssEle) {
          spanCssEle.style.left = _this.parent.element.querySelector(".e-cloneproperties table").offsetWidth - 5 + "px";
        }
        _this.processArgs(target);
        gObj.trigger(rowDragStart, {
          rows: _this.rows,
          target: e.target,
          draggableType: "rows",
          fromIndex: parseInt(_this.rows[0].getAttribute(ariaRowIndex), 10) - 1,
          data: _this.rowData[0] && Object.keys(_this.rowData[0]).length > 0 ? _this.rowData : _this.currentViewData()
        });
        _this.dragStartData = _this.rowData;
        var dropElem = document.getElementById(gObj.rowDropSettings.targetID);
        if (gObj.rowDropSettings.targetID && dropElem && dropElem.ej2_instances && dropElem.ej2_instances[0].getModuleName() === "grid") {
          dropElem.ej2_instances[0].getContent().classList.add("e-allowRowDrop");
        }
      };
      this.drag = function(e) {
        var gObj = _this.parent;
        _this.isDropGrid = _this.parent;
        _this.istargetGrid = false;
        if (_this.parent.rowDropSettings.targetID) {
          var dropElement = document.getElementById(gObj.rowDropSettings.targetID);
          _this.isDropGrid = dropElement.ej2_instances[0];
          if (parentsUntil(e.target, "e-grid")) {
            _this.istargetGrid = _this.parent.rowDropSettings.targetID === parentsUntil(e.target, "e-grid").id;
          }
        }
        var cloneElement = _this.parent.element.querySelector(".e-cloneproperties");
        if (gObj.element.classList.contains("e-childgrid")) {
          var parentGrid = _this.getParentGrid(gObj.element);
          cloneElement = parentGrid.querySelector(".e-cloneproperties");
        }
        var target = _this.getElementFromPosition(cloneElement, e.event);
        classList(cloneElement, ["e-defaultcur"], ["e-notallowedcur", "e-movecur", "e-grabcur"]);
        _this.isOverflowBorder = true;
        _this.hoverState = gObj.enableHover;
        var trElement = parentsUntil(target, "e-grid") ? closest(e.target, "tr") : null;
        if (!e.target) {
          return;
        }
        _this.processArgs(target);
        if (gObj.enableVirtualization && isNullOrUndefined(_this.rows[0])) {
          classList(cloneElement, ["e-notallowedcur"], ["e-movecur"]);
        }
        var args = {
          rows: _this.rows,
          target,
          draggableType: "rows",
          data: _this.rowData,
          originalEvent: e,
          cancel: false
        };
        gObj.trigger(rowDrag, args);
        _this.stopTimer();
        if (args.cancel) {
          return;
        }
        gObj.element.classList.add("e-rowdrag");
        if (trElement && (parentsUntil(target, "e-grid").id === cloneElement.parentElement.id || parentsUntil(target, "e-grid").id)) {
          if (_this.isDropGrid.element.querySelector(".e-emptyrow")) {
            _this.dragTarget = 0;
          } else {
            _this.dragTarget = parseInt(trElement.getAttribute("aria-rowindex"), 10) - 1;
          }
        } else {
          _this.dragTarget = parseInt(_this.startedRow.getAttribute("aria-rowindex"), 10) - 1;
        }
        if (gObj.rowDropSettings.targetID) {
          var dragParentElement = document.querySelector(".e-drag-ref");
          if (!parentsUntil(target, "e-grid") || dragParentElement && parentsUntil(dragParentElement.parentElement, "e-grid").id === parentsUntil(target, "e-grid").id || parentsUntil(cloneElement.parentElement, "e-grid").id === parentsUntil(target, "e-grid").id) {
            classList(cloneElement, ["e-notallowedcur"], ["e-defaultcur"]);
          } else {
            classList(cloneElement, ["e-grabcur"], ["e-notallowedcur"]);
          }
        } else {
          var element = parentsUntil(target, "e-grid");
          if (element && element.id === cloneElement.parentElement.id && parentsUntil(target, "e-row") && !parentsUntil(target, "e-addedrow")) {
            classList(cloneElement, ["e-movecur"], ["e-defaultcur"]);
          } else {
            classList(cloneElement, ["e-notallowedcur"], ["e-movecur"]);
          }
        }
        if (parentsUntil(_this.isDropGrid.element, "e-grid")) {
          if ((!_this.isDropGrid.groupSettings.columns.length || _this.isDropGrid.groupSettings.columns.length) && !_this.isDropGrid.element.querySelector(".e-emptyrow")) {
            if (parentsUntil(target, "e-grid") && parentsUntil(target, "e-grid").id === _this.isDropGrid.element.id) {
              _this.updateScrollPostion(e.event);
            }
            if ((_this.isOverflowBorder || _this.parent.frozenRows > _this.dragTarget) && (parseInt(_this.startedRow.getAttribute(ariaRowIndex), 10) - 1 !== _this.dragTarget || _this.istargetGrid) || _this.istargetGrid && trElement && _this.isDropGrid.getRowByIndex(_this.isDropGrid.getCurrentViewRecords().length - 1).getAttribute("data-uid") === trElement.getAttribute("data-uid")) {
              _this.moveDragRows(e, _this.startedRow, trElement);
            } else {
              var islastRowIndex = void 0;
              if (_this.parent.enableVirtualization) {
                islastRowIndex = trElement && parseInt(trElement.getAttribute(ariaRowIndex), 10) - 1 === _this.parent.renderModule.data.dataManager.dataSource.json.length - 1;
              } else {
                var rowIndex = _this.parent.enableInfiniteScrolling && _this.parent.infiniteScrollSettings.enableCache && !_this.parent.groupSettings.enableLazyLoading ? _this.parent.pageSettings.currentPage * _this.parent.pageSettings.pageSize - 1 : _this.parent.getCurrentViewRecords().length - 1;
                var lastRow = _this.parent.getRowByIndex(rowIndex);
                islastRowIndex = trElement && lastRow && lastRow.getAttribute("data-uid") === trElement.getAttribute("data-uid") && lastRow.getAttribute("data-uid") !== _this.startedRow.getAttribute("data-uid");
                if (_this.isNewRowAdded() && _this.parent.editSettings.newRowPosition === "Bottom") {
                  islastRowIndex = false;
                }
              }
              if (islastRowIndex && !_this.parent.rowDropSettings.targetID) {
                var bottomborder = _this.parent.createElement("div", {
                  className: "e-lastrow-dragborder"
                });
                var gridcontentEle = _this.parent.getContent();
                bottomborder.style.width = _this.parent.element.offsetWidth - _this.getScrollWidth() + "px";
                if (_this.parent.enableVirtualization) {
                  bottomborder.style.zIndex = "1";
                }
                if (!gridcontentEle.getElementsByClassName("e-lastrow-dragborder").length && (!(gObj.allowGrouping && gObj.groupSettings.columns.length) || isNullOrUndefined(trElement.nextSibling))) {
                  gridcontentEle.classList.add("e-grid-relative");
                  gridcontentEle.appendChild(bottomborder);
                  bottomborder.style.bottom = _this.getScrollWidth() + "px";
                }
              }
              _this.removeBorder(trElement);
            }
          }
          if (target && target.classList.contains(content) && !_this.isDropGrid.element.querySelector(".e-emptyrow") && _this.istargetGrid) {
            _this.removeBorder(trElement);
            var rowIndex = _this.isDropGrid.getCurrentViewRecords().length - 1;
            var selector = ".e-rowcell,.e-rowdragdrop,.e-detailrowcollapse";
            var groupSelector = ".e-rowcell:not(.e-hide),.e-rowdragdrop:not(.e-hide),.e-detailrowcollapse:not(.e-hide)";
            var rowElement = [];
            if (_this.parent.allowGrouping && _this.parent.groupSettings.columns && _this.parent.groupSettings.columns.length) {
              rowElement = [].slice.call(_this.isDropGrid.getRowByIndex(rowIndex).querySelectorAll(groupSelector));
            } else {
              rowElement = [].slice.call(_this.isDropGrid.getRowByIndex(rowIndex).querySelectorAll(selector));
            }
            if (rowElement.length > 0) {
              if (_this.parent.allowGrouping && _this.parent.groupSettings.columns && _this.parent.groupSettings.columns.length) {
                _this.groupRowDDIndicator(rowElement, true);
              } else {
                addRemoveActiveClasses(rowElement, true, "e-dragborder");
              }
            }
          }
        }
      };
      this.dragStop = function(e) {
        if (_this.parent.isCheckBoxSelection && _this.parent.enableInfiniteScrolling) {
          window.getSelection().removeAllRanges();
        }
        document.body.classList.remove("e-prevent-select");
        if (isActionPrevent(_this.parent)) {
          _this.parent.notify(preventBatch, {
            instance: _this,
            handler: _this.processDragStop,
            arg1: e
          });
        } else {
          _this.processDragStop(e);
        }
      };
      this.processDragStop = function(e) {
        var gObj = _this.parent;
        if (_this.parent.isDestroyed) {
          return;
        }
        var targetEle = _this.getElementFromPosition(e.helper, e.event);
        var target = targetEle && !targetEle.classList.contains("e-dlg-overlay") ? targetEle : e.target;
        gObj.element.classList.remove("e-rowdrag");
        var dropElement = document.getElementById(gObj.rowDropSettings.targetID);
        if (gObj.rowDropSettings.targetID && dropElement && dropElement.ej2_instances && dropElement.ej2_instances[0].getModuleName() === "grid") {
          dropElement.ej2_instances[0].getContent().classList.remove("e-allowRowDrop");
        }
        if (parentsUntil(_this.isDropGrid.element, "e-grid")) {
          _this.stopTimer();
          _this.isDropGrid.enableHover = _this.hoverState;
          _this.isDropGrid.getContent().classList.remove("e-grid-relative");
          _this.removeBorder(targetEle);
          var stRow = _this.isDropGrid.element.querySelector(".e-dragstartrow");
          if (stRow) {
            stRow.classList.remove("e-dragstartrow");
          }
        }
        _this.processArgs(target);
        if (gObj.enableVirtualization && isNullOrUndefined(_this.rows[0])) {
          return;
        }
        var args = {
          target,
          draggableType: "rows",
          cancel: false,
          fromIndex: parseInt(_this.rows[0].getAttribute(ariaRowIndex), 10) - 1,
          dropIndex: _this.dragTarget,
          rows: _this.rows,
          data: Object.keys(_this.dragStartData[0]).length > 0 ? _this.dragStartData : _this.currentViewData()
        };
        gObj.trigger(rowDrop, args, function() {
          if (!(parentsUntil(target, row) || parentsUntil(target, "e-emptyrow") || parentsUntil(target, gridContent)) || args.cancel) {
            _this.dragTarget = null;
            remove(e.helper);
            return;
          }
          _this.isRefresh = false;
          var selectedIndexes = _this.parent.getSelectedRowIndexes();
          if (gObj.isRowDragable()) {
            if (!_this.parent.rowDropSettings.targetID && _this.startedRow.querySelector("td.e-selectionbackground") && selectedIndexes.length > 1 && selectedIndexes.length !== _this.parent.getCurrentViewRecords().length) {
              _this.reorderRows(selectedIndexes, args.dropIndex);
            } else {
              _this.reorderRows([parseInt(_this.startedRow.getAttribute(ariaRowIndex), 10) - 1], _this.dragTarget);
            }
            _this.dragTarget = null;
            if (!gObj.rowDropSettings.targetID) {
              if (e.helper.classList.contains("e-cloneproperties") && document.querySelector("." + e.helper.classList[0])) {
                remove(e.helper);
              }
              if (gObj.enableVirtualization && !gObj.sortSettings.columns.length && !gObj.filterSettings.columns.length && (!_this.parent.allowGrouping || !gObj.groupSettings.columns.length)) {
                gObj.refresh();
                gObj.contentModule.vgenerator.startIndex = null;
              } else {
                _this.rowOrder(args);
              }
            }
            if (_this.parent.getContentTable().scrollHeight < _this.parent.getContent().clientHeight) {
              _this.parent.scrollModule.setLastRowCell();
            }
          }
          _this.isRefresh = true;
        });
      };
      this.removeCell = function(targetRow, className) {
        return [].slice.call(targetRow.querySelectorAll("td")).filter(function(cell) {
          if (cell.classList.contains(className)) {
            targetRow.deleteCell(cell.cellIndex);
          }
        });
      };
      this.parent = parent;
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(initialEnd, this.initializeDrag, this);
      this.parent.on(columnDrop, this.columnDrop, this);
      this.parent.on(rowDragAndDropComplete, this.onActionComplete, this);
      this.onDataBoundFn = this.onDataBound.bind(this);
      this.parent.addEventListener(dataBound, this.onDataBoundFn);
      this.parent.on(uiUpdate, this.enableAfterRender, this);
      this.parent.on(destroy, this.destroy, this);
    }
    RowDD2.prototype.getParentGrid = function(childGrid) {
      var parentGrid = childGrid;
      var parentGridObtained = false;
      while (!parentGridObtained) {
        if (parentGrid.ej2_instances[0].parentDetails) {
          parentGrid = document.getElementById(parentGrid.ej2_instances[0].parentDetails.parentID);
        }
        if (!parentGrid.classList.contains("e-childgrid")) {
          parentGridObtained = true;
        }
      }
      return parentGrid;
    };
    RowDD2.prototype.isNewRowAdded = function() {
      return this.parent.editSettings && this.parent.editSettings.showAddNewRow && !(this.parent.enableInfiniteScrolling || this.parent.enableVirtualization);
    };
    RowDD2.prototype.groupRowDDIndicator = function(rowElement, isAdd) {
      addRemoveActiveClasses([rowElement[0]], isAdd, "e-dragleft");
      addRemoveActiveClasses(rowElement, isAdd, "e-dragtop", "e-dragbottom");
      addRemoveActiveClasses([rowElement[rowElement.length - 1]], isAdd, "e-dragright");
    };
    RowDD2.prototype.refreshRow = function(args, tbody2, target) {
      var gObj = this.parent;
      var tbodyContent = gObj.getContentTable().querySelector(tbody);
      var tbodyHeader = gObj.getHeaderTable().querySelector(tbody);
      for (var i = 0, len = args.rows.length; i < len; i++) {
        var row2 = args.rows[parseInt(i.toString(), 10)];
        if ((gObj.enableVirtualization && gObj.allowGrouping && gObj.groupSettings.columns.length || gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings.enableCache) && args.rows.length === 1) {
          var removeElem = gObj.getRowElementByUID(row2.getAttribute("data-uid"));
          if (!isNullOrUndefined(removeElem)) {
            remove(removeElem);
          }
        }
        var dragstartrow = row2.querySelector(".e-dragstartrow");
        if (dragstartrow) {
          dragstartrow.classList.remove("e-dragstartrow");
        }
        tbody2.insertBefore(row2, target);
        if (gObj.allowGrouping && gObj.groupSettings.columns.length) {
          var dragRowUid = row2.getAttribute("data-uid");
          var dropRowUid = args.target.parentElement.getAttribute("data-uid");
          var dragRowObject = gObj.getRowObjectFromUID(dragRowUid);
          var dropRowObject = gObj.getRowObjectFromUID(dropRowUid);
          if (dragRowObject.parentUid !== dropRowObject.parentUid) {
            gObj["groupModule"].groupReorderHandler(dragRowObject, dropRowObject);
          }
        }
      }
      var tr = [].slice.call(gObj.editSettings.showAddNewRow ? tbody2.querySelectorAll(".e-row:not(.e-addedrow)") : tbody2.getElementsByClassName(row));
      if (gObj.allowGrouping && gObj.groupSettings.columns.length) {
        if (gObj.groupSettings.enableLazyLoading || gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings.enableCache && tr.length > gObj.pageSettings.pageSize * 3) {
          gObj.refresh();
        } else {
          groupReorderRowObject(this.parent, args, tr);
          if (gObj.enableVirtualization || gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings.enableCache) {
            resetCachedRowIndex(gObj);
          } else {
            resetRowIndex(this.parent, gObj.getRowsObject().filter(function(data) {
              return data.isDataRow;
            }), tr);
          }
          this.parent.notify(refreshExpandandCollapse, {
            rows: gObj.enableVirtualization ? this.parent.vRows : this.parent.getRowsObject()
          });
        }
      } else if (gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings.enableCache && !gObj.groupSettings.columns.length) {
        if (tr.length > gObj.pageSettings.pageSize * 3) {
          gObj.refresh();
        } else {
          groupReorderRowObject(this.parent, args, tr);
          resetCachedRowIndex(gObj);
        }
      } else {
        this.refreshData(tr);
      }
      if (this.parent.frozenRows) {
        for (var i = 0, len = tr.length; i < len; i++) {
          if (i < this.parent.frozenRows) {
            tbodyHeader.appendChild(tr[parseInt(i.toString(), 10)]);
          } else {
            tbodyContent.appendChild(tr[parseInt(i.toString(), 10)]);
          }
        }
      }
    };
    RowDD2.prototype.updateFrozenRowreOrder = function(args) {
      var gObj = this.parent;
      var tbodyC = gObj.getContentTable().querySelector(tbody);
      var tbodyH = gObj.getHeaderTable().querySelector(tbody);
      var tr = [].slice.call(tbodyH.getElementsByClassName(row)).concat([].slice.call(tbodyC.getElementsByClassName(row)));
      var tbody2 = gObj.createElement(tbody, {
        attrs: {
          role: "rowgroup"
        }
      });
      if (!gObj.selectionSettings.persistSelection && Object.keys(gObj.selectionModule.selectedRowState).length === 0) {
        this.parent.clearSelection();
      } else {
        this.parent.clearRowSelection();
      }
      var targetRow = this.refreshRowTarget(args);
      for (var i = 0, len = tr.length; i < len; i++) {
        tbody2.appendChild(tr[parseInt(i.toString(), 10)]);
      }
      this.refreshRow(args, tbody2, targetRow);
    };
    RowDD2.prototype.refreshRowTarget = function(args) {
      var gObj = this.parent;
      var targetIdx = parseInt(args.target.parentElement.getAttribute(ariaRowIndex), 10) - 1;
      if (gObj.enableVirtualization && gObj.allowGrouping && gObj.groupSettings.columns.length) {
        targetIdx = this.parent.getDataRows().indexOf(args.target.parentElement);
      }
      if ((args.fromIndex < args.dropIndex || args.fromIndex === args.dropIndex) && (!gObj.allowGrouping || !gObj.groupSettings.columns.length)) {
        targetIdx = targetIdx + 1;
      }
      var targetTR = gObj.getRowByIndex(targetIdx);
      if (targetIdx === gObj.getRows().length && this.isNewRowAdded() && this.parent.editSettings.newRowPosition === "Bottom") {
        targetTR = this.parent.element.querySelector(".e-row.e-addedrow");
      }
      var tr = gObj.allowGrouping && gObj.groupSettings.columns.length && targetIdx !== -1 && args.fromIndex < args.dropIndex && targetTR ? targetTR.nextSibling : targetTR;
      return tr;
    };
    RowDD2.prototype.updateFrozenColumnreOrder = function(args) {
      var gObj = this.parent;
      var tbody2 = gObj.getContentTable().querySelector(tbody);
      if (!gObj.selectionSettings.persistSelection && Object.keys(gObj.selectionModule.selectedRowState).length === 0) {
        this.parent.clearSelection();
      } else {
        this.parent.clearRowSelection();
      }
      var targetRow = this.refreshRowTarget(args);
      this.refreshRow(args, tbody2, targetRow);
    };
    RowDD2.prototype.refreshData = function(tr) {
      var rowObj = {};
      var recordobj = {};
      var rowObjects = this.parent.getRowsObject();
      var currentViewData = this.parent.getCurrentViewRecords();
      for (var i = 0, len = tr.length; i < len; i++) {
        var index = parseInt(tr[parseInt(i.toString(), 10)].getAttribute(ariaRowIndex), 10) - 1;
        rowObj[parseInt(i.toString(), 10)] = rowObjects[parseInt(index.toString(), 10)];
        recordobj[parseInt(i.toString(), 10)] = currentViewData[parseInt(index.toString(), 10)];
      }
      var rows = this.parent.getRows();
      for (var i = 0, len = tr.length; i < len; i++) {
        rows[parseInt(i.toString(), 10)] = tr[parseInt(i.toString(), 10)];
        rowObjects[parseInt(i.toString(), 10)] = rowObj[parseInt(i.toString(), 10)];
        currentViewData[parseInt(i.toString(), 10)] = recordobj[parseInt(i.toString(), 10)];
      }
      resetRowIndex(this.parent, rowObjects, tr);
    };
    RowDD2.prototype.rowOrder = function(args) {
      if (args.dropIndex === args.fromIndex || isNaN(args.dropIndex) || parentsUntil(args.target, "e-groupcaption")) {
        return;
      }
      if (this.parent.isDetail()) {
        this.parent.detailCollapseAll();
        var rows = [].slice.call(this.parent.getContentTable().querySelector(tbody).children);
        var rowObjects = this.parent.getRowsObject();
        rows.filter(function(row2) {
          if (row2.classList.contains("e-detailrow")) {
            row2.remove();
          }
        });
        for (var i = 0, len = rowObjects.length; i < len; i++) {
          if (!rowObjects[parseInt(i.toString(), 10)]) {
            break;
          }
          if (rowObjects[parseInt(i.toString(), 10)].isDetailRow) {
            this.parent.getRowsObject().splice(i, 1);
            i--;
          }
        }
      }
      if (args.target.classList.contains("e-rowcelldrag") || args.target.classList.contains("e-dtdiagonalright") || args.target.classList.contains("e-dtdiagonaldown")) {
        args.target = args.target.parentElement;
      }
      if (!args.target.classList.contains("e-rowcell") && parentsUntil(args.target, "e-rowcell")) {
        args.target = parentsUntil(args.target, "e-rowcell");
      }
      if (this.parent.frozenRows) {
        this.updateFrozenRowreOrder(args);
      } else {
        this.updateFrozenColumnreOrder(args);
      }
      if ((!this.parent.allowGrouping || !this.parent.groupSettings.columns.length) && this.selectedRowColls.length > 0) {
        this.parent.selectRows(this.selectedRowColls);
        var indexes = [];
        if (this.parent.filterSettings.columns.length || this.parent.sortSettings.columns.length) {
          for (var i = 0, len = args.rows.length; i < len; i++) {
            indexes.push(parseInt(args.rows[parseInt(i.toString(), 10)].getAttribute(ariaRowIndex), 10) - 1);
          }
          this.selectedRowColls = indexes;
        }
        this.selectedRowColls = [];
      } else {
        this.selectedRowColls = [];
      }
    };
    RowDD2.prototype.currentViewData = function() {
      var selectedIndexes = this.parent.getSelectedRowIndexes();
      var currentVdata = [];
      var fromIdx = parseInt(this.startedRow.getAttribute(ariaRowIndex), 10) - 1;
      for (var i = 0, n = selectedIndexes.length; i < n; i++) {
        var currentV = "currentViewData";
        currentVdata[parseInt(i.toString(), 10)] = this.parent["" + currentV][selectedIndexes[parseInt(i.toString(), 10)]];
      }
      if (!this.parent.rowDropSettings.targetID && selectedIndexes.length === 0) {
        currentVdata[0] = this.parent.currentViewData[parseInt(fromIdx.toString(), 10)];
      }
      return currentVdata;
    };
    RowDD2.prototype.reorderRows = function(fromIndexes, toIndex) {
      var selectedIndexes = this.parent.getSelectedRowIndexes();
      var selectedRecords = [];
      var draggedRecords = [];
      var currentViewData = this.parent.getDataModule().isRemote() ? this.parent.getCurrentViewRecords() : this.parent.renderModule.data.dataManager.dataSource.json;
      var skip = this.parent.allowPaging ? this.parent.pageSettings.currentPage * this.parent.pageSettings.pageSize - this.parent.pageSettings.pageSize : 0;
      var dropIdx = toIndex + skip;
      var actualIdx = fromIndexes[0] + skip;
      for (var i = 0, len = fromIndexes.length; i < len; i++) {
        draggedRecords[parseInt(i.toString(), 10)] = currentViewData[fromIndexes[parseInt(i.toString(), 10)] + skip];
      }
      for (var i = 0, len = selectedIndexes.length; i < len; i++) {
        selectedRecords[parseInt(i.toString(), 10)] = currentViewData[selectedIndexes[parseInt(i.toString(), 10)] + skip];
      }
      for (var i = 0, len = draggedRecords.length; i < len; i++) {
        if (i !== 0) {
          for (var j = 0, len1 = currentViewData.length; j < len1; j++) {
            if (JSON.stringify(currentViewData[parseInt(j.toString(), 10)]) === JSON.stringify(draggedRecords[parseInt(i.toString(), 10)])) {
              actualIdx = j;
              break;
            }
          }
          for (var j = 0, len1 = currentViewData.length; j < len1; j++) {
            if (JSON.stringify(currentViewData[parseInt(j.toString(), 10)]) === JSON.stringify(draggedRecords[i - 1])) {
              if (actualIdx > j) {
                dropIdx = j + 1;
              }
              break;
            }
          }
        }
        this.reorderRow(actualIdx - skip, dropIdx - skip);
      }
      if (this.isRefresh) {
        this.parent.notify(modelChanged, {
          type: actionBegin,
          requestType: "rowdraganddrop"
        });
      }
      for (var i = 0, len = selectedRecords.length; i < len; i++) {
        for (var j = 0, len1 = currentViewData.length; j < len1; j++) {
          if (JSON.stringify(currentViewData[parseInt(j.toString(), 10)]) === JSON.stringify(selectedRecords[parseInt(i.toString(), 10)])) {
            selectedIndexes[parseInt(i.toString(), 10)] = j - skip;
            break;
          }
        }
      }
      this.selectedRowColls = selectedIndexes;
    };
    RowDD2.prototype.stopTimer = function() {
      window.clearInterval(this.timer);
    };
    RowDD2.prototype.onActionComplete = function(e) {
      this.parent.trigger(actionComplete, extend(e, {
        type: actionComplete,
        requestType: "rowdraganddrop"
      }));
    };
    RowDD2.prototype.initializeDrag = function() {
      var gObj = this.parent;
      this.draggable = new Draggable(gObj.element, {
        dragTarget: ".e-rowcelldrag, .e-rowdragdrop, .e-rowcell",
        distance: 5,
        helper: this.helper,
        dragStart: this.dragStart,
        drag: this.drag,
        dragStop: this.dragStop,
        isReplaceDragEle: this.isReplaceDragEle,
        isPreventSelect: false,
        isPreventScroll: true
      });
    };
    RowDD2.prototype.updateScrollPostion = function(e) {
      var _this = this;
      var y = getPosition(e).y;
      var cliRect = this.isDropGrid.getContent().getBoundingClientRect();
      var rowHeight2 = this.isDropGrid.getRowHeight() - 15;
      var scrollElem = this.isDropGrid.getContent().firstElementChild;
      var virtualScrollbtm = this.parent.enableVirtualization ? 20 : 0;
      if (cliRect.top >= y) {
        var scrollPixel_1 = -this.isDropGrid.getRowHeight();
        this.isOverflowBorder = false;
        this.timer = window.setInterval(function() {
          _this.setScrollDown(scrollElem, scrollPixel_1);
        }, 200);
      } else if (cliRect.top + this.isDropGrid.getContent().clientHeight - rowHeight2 - 33 - virtualScrollbtm <= y) {
        var scrollPixel_2 = this.isDropGrid.getRowHeight();
        this.isOverflowBorder = false;
        this.timer = window.setInterval(function() {
          _this.setScrollDown(scrollElem, scrollPixel_2);
        }, 200);
      }
    };
    RowDD2.prototype.setScrollDown = function(scrollElem, scrollPixel) {
      scrollElem.scrollTop = scrollElem.scrollTop + scrollPixel;
    };
    RowDD2.prototype.moveDragRows = function(e, startedRow, targetRow) {
      var cloneElement = this.parent.element.querySelector(".e-cloneproperties");
      if (this.parent.element.classList.contains("e-childgrid")) {
        var parentGrid = this.getParentGrid(this.parent.element);
        cloneElement = parentGrid.querySelector(".e-cloneproperties");
      }
      var element = closest(e.target, "tr");
      if (parentsUntil(element, "e-grid") && (!this.parent.rowDropSettings.targetID && parentsUntil(cloneElement.parentElement, "e-grid").id === parentsUntil(element, "e-grid").id || this.istargetGrid)) {
        var targetElement = element;
        if (!element) {
          targetElement = startedRow;
        }
        this.setBorder(targetElement, e.event, startedRow, targetRow);
      }
    };
    RowDD2.prototype.setBorder = function(element, event2, startedRow, targetRow) {
      var node = this.parent.element;
      if (this.istargetGrid) {
        node = this.isDropGrid.element;
      }
      var cloneElement = this.parent.element.querySelector(".e-cloneproperties");
      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
        this.removeBorder(element);
      } else {
        this.removeFirstRowBorder(element);
        this.removeLastRowBorder(element);
      }
      if (parentsUntil(element, "e-grid") && element.classList.contains(row) && (!this.parent.rowDropSettings.targetID && parentsUntil(cloneElement.parentElement, "e-grid").id === parentsUntil(element, "e-grid").id || this.istargetGrid)) {
        if (this.parent.allowGrouping && this.parent.groupSettings.columns && this.parent.groupSettings.columns.length) {
          removeClass(node.querySelectorAll(".e-rowcell,.e-rowdragdrop,.e-detailrowcollapse"), ["e-dragtop", "e-dragright", "e-dragbottom", "e-dragleft"]);
        } else {
          removeClass(node.querySelectorAll(".e-rowcell,.e-rowdragdrop,.e-detailrowcollapse"), ["e-dragborder"]);
        }
        var rowElement = [];
        var targetRowIndex = parseInt(targetRow.getAttribute(ariaRowIndex), 10) - 1;
        if (targetRow && targetRowIndex === 0 && !(this.isNewRowAdded() && this.parent.editSettings.newRowPosition === "Top")) {
          if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
            element = targetRow;
            rowElement = [].slice.call(element.querySelectorAll(".e-groupcaption,.e-summarycell,.e-rowcell,.e-rowdragdrop,.e-detailrowcollapse"));
          } else {
            var div = this.parent.createElement("div", {
              className: "e-firstrow-dragborder"
            });
            var gridheaderEle = this.isDropGrid.getHeaderContent();
            gridheaderEle.classList.add("e-grid-relative");
            div.style.width = node.offsetWidth - this.getScrollWidth() + "px";
            if (!gridheaderEle.getElementsByClassName("e-firstrow-dragborder").length) {
              if (this.parent.frozenRows) {
                if (this.parent.isFrozenGrid()) {
                  div.style.width = this.parent.getContent().firstElementChild.scrollWidth + "px";
                }
                gridheaderEle.querySelector("thead").appendChild(div);
                div.style.position = "relative";
              } else {
                gridheaderEle.appendChild(div);
              }
            }
          }
        } else if (this.parent.rowDropSettings.targetID && targetRow) {
          element = this.isDropGrid.getRowByIndex(targetRowIndex - 1);
          rowElement = [].slice.call(element.querySelectorAll(".e-rowcell,.e-rowdragdrop,.e-detailrowcollapse"));
        } else if (targetRow && parseInt(startedRow.getAttribute(ariaRowIndex), 10) - 1 > targetRowIndex) {
          if (this.parent.enableVirtualization && this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
            targetRowIndex = this.parent.getDataRows().indexOf(targetRow);
          }
          if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
            element = targetRow;
            rowElement = [].slice.call(element.querySelectorAll(".e-groupcaption,.e-summarycell,.e-rowcell:not(.e-hide),.e-rowdragdrop:not(.e-hide),\n                        .e-detailrowcollapse:not(.e-hide)"));
          } else {
            if (targetRowIndex === 0 && this.isNewRowAdded() && this.parent.editSettings.newRowPosition === "Top") {
              element = this.parent.element.querySelector(".e-row.e-addedrow tr");
            } else {
              element = this.parent.getRowByIndex(targetRowIndex - 1);
            }
            rowElement = [].slice.call(element.querySelectorAll(".e-rowcell,.e-rowdragdrop,.e-detailrowcollapse,.e-dragindentcell"));
          }
        } else {
          rowElement = [].slice.call(element.querySelectorAll(".e-rowcell,.e-rowdragdrop,.e-detailrowcollapse"));
        }
        if (rowElement.length > 0) {
          if (this.parent.allowGrouping && this.parent.groupSettings.columns && this.parent.groupSettings.columns.length) {
            this.groupRowDDIndicator(rowElement, true);
          } else {
            addRemoveActiveClasses(rowElement, true, "e-dragborder");
          }
        }
      }
    };
    RowDD2.prototype.getScrollWidth = function() {
      var scrollElem = this.parent.getContent().firstElementChild;
      return scrollElem.scrollWidth > scrollElem.offsetWidth ? Scroll.getScrollBarWidth() : 0;
    };
    RowDD2.prototype.removeFirstRowBorder = function(element) {
      if (this.isDropGrid.element.getElementsByClassName("e-firstrow-dragborder").length > 0 && element && (element.rowIndex !== 0 || element.classList.contains("e-columnheader"))) {
        remove(this.isDropGrid.element.getElementsByClassName("e-firstrow-dragborder")[0]);
      } else {
        var addNewRow = this.parent.element.querySelector(".e-row.e-addedrow tr");
        if (addNewRow && addNewRow.querySelector(".e-dragborder")) {
          var rowElement = [].slice.call(addNewRow.querySelectorAll(".e-rowcell,.e-rowdragdrop,.e-detailrowcollapse,.e-dragindentcell"));
          addRemoveActiveClasses(rowElement, false, "e-dragborder");
        }
      }
    };
    RowDD2.prototype.removeLastRowBorder = function(element) {
      var islastRowIndex;
      if (this.parent.enableVirtualization) {
        islastRowIndex = element && parseInt(element.getAttribute(ariaRowIndex), 10) - 1 !== this.parent.renderModule.data.dataManager.dataSource.json.length - 1;
      } else {
        var rowIndex = this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache && !this.parent.groupSettings.enableLazyLoading ? this.parent.pageSettings.currentPage * this.parent.pageSettings.pageSize - 1 : this.parent.getCurrentViewRecords().length - 1;
        var lastRow = this.parent.getRowByIndex(rowIndex);
        islastRowIndex = element && lastRow && lastRow.getAttribute("data-uid") !== element.getAttribute("data-uid");
      }
      if (this.parent.element.getElementsByClassName("e-lastrow-dragborder").length > 0 && element && islastRowIndex) {
        remove(this.parent.element.getElementsByClassName("e-lastrow-dragborder")[0]);
      }
    };
    RowDD2.prototype.removeBorder = function(element) {
      this.removeFirstRowBorder(element);
      if (!this.parent.rowDropSettings.targetID) {
        this.removeLastRowBorder(element);
      }
      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
        element = [].slice.call(this.isDropGrid.getContentTable().querySelectorAll("tr")).filter(function(row2) {
          return row2.querySelector("td.e-dragtop.e-dragbottom");
        })[0];
      } else {
        element = this.isDropGrid.getRows().filter(function(row2) {
          return row2.querySelector("td.e-dragborder");
        })[0];
      }
      if (element) {
        var rowElement = this.parent.allowGrouping && this.parent.groupSettings.columns.length ? [].slice.call(element.querySelectorAll(".e-dragtop.e-dragbottom")) : [].slice.call(element.getElementsByClassName("e-dragborder"));
        if (this.parent.allowGrouping && this.parent.groupSettings.columns && this.parent.groupSettings.columns.length) {
          this.groupRowDDIndicator(rowElement, false);
        } else {
          addRemoveActiveClasses(rowElement, false, "e-dragborder");
        }
      }
    };
    RowDD2.prototype.getElementFromPosition = function(element, event2) {
      var position = getPosition(event2);
      element.style.display = "none";
      var target = document.elementFromPoint(position.x, position.y);
      element.style.display = "";
      return target;
    };
    RowDD2.prototype.onDataBound = function() {
      if (this.selectedRowColls.length > 0 && (this.parent.enableVirtualization || this.parent.allowRowDragAndDrop)) {
        this.parent.selectRows(this.selectedRowColls);
        this.selectedRowColls = [];
      }
    };
    RowDD2.prototype.getTargetIdx = function(targetRow) {
      return targetRow ? parseInt(targetRow.getAttribute(ariaRowIndex), 10) - 1 : 0;
    };
    RowDD2.prototype.singleRowDrop = function(e) {
      var targetRow = closest(e.target, "tr");
      var srcControl = e.droppedElement.parentElement.ej2_instances[0];
      var currentIndex = targetRow ? targetRow.rowIndex : srcControl.currentViewData.length - 1;
      this.reorderRow(this.startedRowIndex, currentIndex);
    };
    RowDD2.prototype.columnDrop = function(e) {
      var gObj = this.parent;
      if (e.droppedElement.getAttribute("action") !== "grouping" && (parentsUntil(e.target, row) || parentsUntil(e.target, "e-emptyrow") || parentsUntil(e.target, gridContent))) {
        var targetRow = closest(e.target, "tr");
        var srcControl = void 0;
        var currentIndex = void 0;
        var dragParentElement = document.querySelector(".e-drag-ref");
        if (e.droppedElement.querySelector("tr").getAttribute("single-dragrow") !== "true" && (e.droppedElement.parentElement.id === gObj.element.id || dragParentElement && dragParentElement.parentElement.id === gObj.element.id) || e.droppedElement.querySelector("tr").getAttribute("single-dragrow") === "true" && e.droppedElement.parentElement.id !== gObj.element.id) {
          return;
        }
        if (e.droppedElement.parentElement.id !== gObj.element.id) {
          if (dragParentElement) {
            srcControl = dragParentElement.parentElement.ej2_instances[0];
            remove(dragParentElement);
          } else {
            srcControl = e.droppedElement.parentElement.ej2_instances[0];
          }
        } else if (this.isSingleRowDragDrop || e.droppedElement.querySelector("tr").getAttribute("single-dragrow") === "true") {
          this.singleRowDrop(e);
          return;
        }
        if (srcControl.element.id !== gObj.element.id && srcControl.rowDropSettings.targetID !== gObj.element.id) {
          return;
        }
        var records = srcControl.getSelectedRecords();
        var targetIndex = currentIndex = this.getTargetIdx(targetRow);
        if (e.target && e.target.classList.contains("e-content") && gObj.getCurrentViewRecords().length) {
          var lastrow = gObj.getContentTable().querySelector("tr:last-child");
          if (lastrow) {
            targetIndex = currentIndex = parseInt(lastrow.getAttribute(ariaRowIndex), 10);
          }
        }
        if (isNaN(targetIndex)) {
          targetIndex = currentIndex = 0;
        }
        if (gObj.allowPaging) {
          targetIndex = targetIndex + gObj.pageSettings.currentPage * gObj.pageSettings.pageSize - gObj.pageSettings.pageSize;
        }
        gObj.notify(rowsAdded, {
          toIndex: targetIndex,
          records
        });
        gObj.notify(modelChanged, {
          type: actionBegin,
          requestType: "rowdraganddrop"
        });
        var selectedRows = srcControl.getSelectedRowIndexes();
        var skip = srcControl.allowPaging ? srcControl.pageSettings.currentPage * srcControl.pageSettings.pageSize - srcControl.pageSettings.pageSize : 0;
        this.selectedRows = [];
        for (var i = 0, len = records.length; i < len; i++) {
          this.selectedRows.push(skip + selectedRows[parseInt(i.toString(), 10)]);
        }
        srcControl.notify(rowsRemoved, {
          indexes: this.selectedRows,
          records
        });
        if (srcControl.dataSource instanceof DataManager && srcControl.dataSource.dataSource.offline) {
          srcControl.notify(modelChanged, {
            type: actionBegin,
            requestType: "rowdraganddrop"
          });
        }
      }
    };
    RowDD2.prototype.reorderRow = function(fromIndexes, toIndex) {
      var gObj = this.parent;
      if (!gObj.groupSettings.columns.length) {
        var skip = gObj.allowPaging ? gObj.pageSettings.currentPage * gObj.pageSettings.pageSize - gObj.pageSettings.pageSize : 0;
        var fromIndex = fromIndexes;
        toIndex = toIndex + skip;
        this.selectedRows = gObj.getSelectedRowIndexes();
        gObj.notify(rowPositionChanged, {
          fromIndex: fromIndexes + skip,
          toIndex
        });
      }
    };
    RowDD2.prototype.enableAfterRender = function(e) {
      if (e.module === this.getModuleName() && e.enable) {
        this.initializeDrag();
      }
    };
    RowDD2.prototype.destroy = function() {
      var gridElement = this.parent.element;
      if (this.parent.isDestroyed || !gridElement || !gridElement.querySelector("." + gridHeader) && !gridElement.querySelector("." + gridContent)) {
        return;
      }
      this.draggable.destroy();
      this.parent.off(initialEnd, this.initializeDrag);
      this.parent.off(columnDrop, this.columnDrop);
      this.parent.off(rowDragAndDropComplete, this.onActionComplete);
      this.parent.removeEventListener(dataBound, this.onDataBoundFn);
      this.parent.off(uiUpdate, this.enableAfterRender);
      this.parent.off(destroy, this.destroy);
    };
    RowDD2.prototype.getModuleName = function() {
      return "rowDragAndDrop";
    };
    RowDD2.prototype.processArgs = function(target) {
      var gObj = this.parent;
      var dragIdx = parseInt(this.startedRow.getAttribute(ariaRowIndex), 10) - 1;
      if (gObj.getSelectedRecords().length > 0 && this.startedRow.cells[0].classList.contains("e-selectionbackground") === false || gObj.getSelectedRecords().length === 0) {
        if (gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings.enableCache) {
          this.rows = [this.startedRow];
        } else {
          this.rows = [gObj.getRowByIndex(dragIdx)];
        }
        this.rowData = [gObj.getRowInfo(this.startedRow.querySelector("." + rowCell)).rowData];
        if ((gObj.enableVirtualization || gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings.enableCache) && gObj.allowGrouping && gObj.groupSettings.columns.length && gObj.getSelectedRows().length) {
          this.rows = gObj.getSelectedRows();
          this.rowData = Array.from(this.rows, function(row2) {
            return gObj.getRowObjectFromUID(row2.getAttribute("data-uid")).data;
          });
        }
      } else {
        this.rows = gObj.getSelectedRows();
        this.rowData = Array.from(this.rows, function(row2) {
          return gObj.getRowObjectFromUID(row2.getAttribute("data-uid")).data;
        });
      }
    };
    return RowDD2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/group.js
var Group = (
  /** @class */
  function() {
    function Group2(parent, groupSettings, sortedColumns, serviceLocator) {
      var _this = this;
      this.sortRequired = true;
      this.groupSortFocus = false;
      this.groupTextFocus = false;
      this.groupCancelFocus = false;
      this.preventFocusOnGroup = false;
      this.isAppliedGroup = false;
      this.isAppliedUnGroup = false;
      this.isAppliedCaptionRowBorder = false;
      this.reorderingColumns = [];
      this.visualElement = createElement("div", {
        className: "e-cloneproperties e-dragclone e-gdclone",
        attrs: {
          action: "grouping"
        }
      });
      this.helper = function(e) {
        var gObj = _this.parent;
        var target = e.sender.target;
        var element = target.classList.contains("e-groupheadercell") ? target : parentsUntil(target, "e-groupheadercell");
        if (!element || !target.classList.contains("e-drag") && _this.groupSettings.allowReordering) {
          return false;
        }
        _this.column = gObj.getColumnByField(element.firstElementChild.getAttribute("ej-mappingname"));
        _this.visualElement.textContent = element.textContent;
        updateCSSText(_this.visualElement, "width: " + (element.offsetWidth + 2) + "px;\n            height: " + (element.offsetHeight + 2) + "px; line-height: 23px;");
        _this.visualElement.setAttribute("e-mappinguid", _this.column.uid);
        gObj.element.appendChild(_this.visualElement);
        return _this.visualElement;
      };
      this.dragStart = function(e) {
        _this.parent.element.classList.add("e-ungroupdrag");
      };
      this.drag = function(e) {
        if (_this.groupSettings.allowReordering) {
          _this.animateDropper(e);
        }
        var target = e.target;
        var cloneElement = _this.parent.element.querySelector(".e-cloneproperties");
        _this.parent.trigger(columnDrag, {
          target,
          draggableType: "headercell",
          column: _this.column
        });
        if (!_this.groupSettings.allowReordering) {
          classList(cloneElement, ["e-defaultcur"], ["e-notallowedcur"]);
          if (!(parentsUntil(target, gridContent) || parentsUntil(target, "e-headercell"))) {
            classList(cloneElement, ["e-notallowedcur"], ["e-defaultcur"]);
          }
        }
      };
      this.dragStop = function(e) {
        _this.parent.element.classList.remove("e-ungroupdrag");
        var preventDrop = !(parentsUntil(e.target, gridContent) || parentsUntil(e.target, "e-gridheader"));
        if (_this.groupSettings.allowReordering && preventDrop) {
          remove(e.helper);
          if (parentsUntil(e.target, "e-groupdroparea")) {
            _this.rearrangeGroup();
          } else if (!parentsUntil(e.target, "e-grid")) {
            var field = _this.parent.getColumnByUid(e.helper.getAttribute("e-mappinguid")).field;
            if (_this.groupSettings.columns.indexOf(field) !== -1) {
              _this.ungroupColumn(field);
            }
          }
          return;
        } else if (preventDrop) {
          remove(e.helper);
          return;
        }
      };
      this.animateDropper = function(e) {
        var uid2 = _this.parent.element.querySelector(".e-cloneproperties").getAttribute("e-mappinguid");
        var dragField = _this.parent.getColumnByUid(uid2).field;
        var parent2 = parentsUntil(e.target, "e-groupdroparea");
        var dropTarget = parentsUntil(e.target, "e-group-animator");
        var grouped = [].slice.call(_this.element.getElementsByClassName("e-groupheadercell")).map(function(e2) {
          return e2.querySelector("div").getAttribute("ej-mappingname");
        });
        var cols = JSON.parse(JSON.stringify(grouped));
        if (dropTarget || parent2) {
          if (dropTarget) {
            var dropField = dropTarget.querySelector("div[ej-mappingname]").getAttribute("ej-mappingname");
            var dropIndex = +dropTarget.getAttribute("index");
            if (dropField !== dragField) {
              var dragIndex = cols.indexOf(dragField);
              if (dragIndex !== -1) {
                cols.splice(dragIndex, 1);
              }
              var flag = dropIndex !== -1 && dragIndex === dropIndex;
              cols.splice(dropIndex + (flag ? 1 : 0), 0, dragField);
            }
          } else if (parent2 && cols.indexOf(dragField) === -1) {
            cols.push(dragField);
          }
          _this.element.innerHTML = "";
          if (cols.length && !_this.element.classList.contains("e-grouped")) {
            _this.element.classList.add("e-grouped");
          }
          _this.reorderingColumns = cols;
          for (var c = 0; c < cols.length; c++) {
            _this.addColToGroupDrop(cols[parseInt(c.toString(), 10)]);
          }
        } else {
          _this.addLabel();
          _this.removeColFromGroupDrop(dragField);
        }
      };
      this.drop = function(e) {
        var gObj = _this.parent;
        var column = gObj.getColumnByUid(e.droppedElement.getAttribute("e-mappinguid"));
        _this.element.classList.remove("e-hover");
        remove(e.droppedElement);
        _this.aria.setDropTarget(_this.parent.element.querySelector(".e-groupdroparea"), false);
        _this.aria.setGrabbed(_this.parent.getHeaderTable().querySelector("[aria-grabbed=true]"), false);
        if (isNullOrUndefined(column) || column.allowGrouping === false || parentsUntil(gObj.getColumnHeaderByUid(column.uid), "e-grid").getAttribute("id") !== gObj.element.getAttribute("id")) {
          _this.parent.log("action_disabled_column", {
            moduleName: _this.getModuleName(),
            columnName: column ? column.headerText : void 0
          });
          return;
        }
        _this.groupColumn(column.field);
      };
      this.contentRefresh = true;
      this.aria = new AriaService();
      this.parent = parent;
      this.groupSettings = groupSettings;
      this.serviceLocator = serviceLocator;
      this.sortedColumns = sortedColumns;
      this.focus = serviceLocator.getService("focus");
      this.addEventListener();
      this.groupGenerator = new GroupModelGenerator(this.parent);
    }
    Group2.prototype.addLabel = function() {
      if (!this.element.getElementsByClassName("e-group-animator").length) {
        var dragLabel = this.l10n.getConstant("GroupDropArea");
        this.element.innerHTML = dragLabel;
        this.element.classList.remove("e-grouped");
      }
    };
    Group2.prototype.rearrangeGroup = function() {
      this.sortRequired = false;
      this.updateModel();
    };
    Group2.prototype.columnDrag = function(e) {
      if (this.groupSettings.allowReordering && e.column.allowGrouping) {
        this.animateDropper(e);
      }
      var cloneElement = this.parent.element.querySelector(".e-cloneproperties");
      if (!this.parent.allowReordering) {
        classList(cloneElement, ["e-defaultcur"], ["e-notallowedcur"]);
      }
      if (!(e.column.allowGrouping && (parentsUntil(e.target, "e-groupdroparea") || parentsUntil(e.target, "e-headercell") && parentsUntil(e.target, "e-headercell").isEqualNode(this.parent.getColumnHeaderByField(e.column.field)))) && !(this.parent.allowReordering && parentsUntil(e.target, "e-headercell"))) {
        classList(cloneElement, ["e-notallowedcur"], ["e-defaultcur"]);
      }
      if (e.target.classList.contains("e-groupdroparea")) {
        this.element.classList.add("e-hover");
      } else {
        this.element.classList.remove("e-hover");
      }
    };
    Group2.prototype.columnDragStart = function(e) {
      if (e.target.classList.contains("e-stackedheadercell")) {
        return;
      }
      var dropArea = this.parent.element.querySelector(".e-groupdroparea");
      this.aria.setDropTarget(dropArea, e.column.allowGrouping);
      var element = e.target.classList.contains("e-headercell") ? e.target : parentsUntil(e.target, "e-headercell");
      this.aria.setGrabbed(element, true, !e.column.allowGrouping);
    };
    Group2.prototype.columnDrop = function(e) {
      var gObj = this.parent;
      if (e.droppedElement.getAttribute("action") === "grouping") {
        var column = gObj.getColumnByUid(e.droppedElement.getAttribute("e-mappinguid"));
        if (isNullOrUndefined(column) || column.allowGrouping === false || parentsUntil(gObj.getColumnHeaderByUid(column.uid), "e-grid").getAttribute("id") !== gObj.element.getAttribute("id")) {
          return;
        }
        this.ungroupColumn(column.field);
      }
    };
    Group2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(uiUpdate, this.enableAfterRender, this);
      this.parent.on(groupComplete, this.onActionComplete, this);
      this.parent.on(ungroupComplete, this.onActionComplete, this);
      this.parent.on(inBoundModelChanged, this.onPropertyChanged, this);
      this.parent.on(click, this.clickHandler, this);
      this.parent.on(columnDrag, this.columnDrag, this);
      this.parent.on(columnDragStart, this.columnDragStart, this);
      this.parent.on(headerDrop, this.columnDrop, this);
      this.parent.on(columnDrop, this.columnDrop, this);
      this.parent.on(headerRefreshed, this.refreshSortIcons, this);
      this.parent.on(sortComplete, this.refreshSortIcons, this);
      this.parent.on(keyPressed, this.keyPressHandler, this);
      this.parent.on(contentReady, this.initialEnd, this);
      this.parent.on(onEmpty, this.initialEnd, this);
      this.parent.on(initialEnd, this.render, this);
      this.parent.on(groupAggregates, this.onGroupAggregates, this);
      this.parent.on(destroy, this.destroy, this);
      this.parent.on("group-expand-collapse", this.updateExpand, this);
      this.parent.on("persist-data-changed", this.initialEnd, this);
    };
    Group2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(initialEnd, this.render);
      this.parent.off(uiUpdate, this.enableAfterRender);
      this.parent.off(groupComplete, this.onActionComplete);
      this.parent.off(ungroupComplete, this.onActionComplete);
      this.parent.off(inBoundModelChanged, this.onPropertyChanged);
      this.parent.off(click, this.clickHandler);
      this.parent.off(columnDrag, this.columnDrag);
      this.parent.off(columnDragStart, this.columnDragStart);
      this.parent.off(columnDrop, this.columnDrop);
      this.parent.off(headerDrop, this.columnDrop);
      this.parent.off(headerRefreshed, this.refreshSortIcons);
      this.parent.off(sortComplete, this.refreshSortIcons);
      this.parent.off(keyPressed, this.keyPressHandler);
      this.parent.off(groupAggregates, this.onGroupAggregates);
      this.parent.off(destroy, this.destroy);
      this.parent.off("group-expand-collapse", this.updateExpand);
    };
    Group2.prototype.initialEnd = function() {
      var gObj = this.parent;
      this.parent.off(contentReady, this.initialEnd);
      this.parent.off(onEmpty, this.initialEnd);
      if (this.parent.getColumns().length && this.groupSettings.columns.length) {
        this.contentRefresh = false;
        for (var _i = 0, _a = gObj.groupSettings.columns; _i < _a.length; _i++) {
          var col = _a[_i];
          this.preventFocusOnGroup = true;
          this.groupColumn(col);
          this.preventFocusOnGroup = false;
        }
        this.contentRefresh = true;
      }
    };
    Group2.prototype.keyPressHandler = function(e) {
      var gObj = this.parent;
      if (e.target && parentsUntil(e.target, "e-groupheadercell") && (e.action === "tab" || e.action === "shiftTab")) {
        var focusableGroupedItems = this.getFocusableGroupedItems();
        if (e.action === "tab" && e.target === focusableGroupedItems[focusableGroupedItems.length - 1] || e.action === "shiftTab" && e.target === focusableGroupedItems[0]) {
          return;
        }
        for (var i = 0; i < focusableGroupedItems.length; i++) {
          if (e.target === focusableGroupedItems[parseInt(i.toString(), 10)]) {
            e.preventDefault();
            var index = e.action === "tab" ? i + 1 : i - 1;
            focusableGroupedItems[parseInt(index.toString(), 10)].focus();
            return;
          }
        }
      }
      var isMacLike = /(Mac)/i.test(navigator.platform);
      if (isMacLike && e.metaKey) {
        if (e.action === "downArrow") {
          e.action = "ctrlDownArrow";
        } else if (e.action === "upArrow") {
          e.action = "ctrlUpArrow";
        }
      }
      if (e.action !== "ctrlSpace" && (!this.groupSettings.columns.length || ["altDownArrow", "altUpArrow", "ctrlDownArrow", "ctrlUpArrow", "enter"].indexOf(e.action) === -1) || this.parent.groupSettings.enableLazyLoading && this.groupSettings.columns.length && (e.action === "ctrlUpArrow" || e.action === "ctrlDownArrow")) {
        return;
      }
      switch (e.action) {
        case "altDownArrow":
        case "altUpArrow":
          var selected = gObj.allowSelection ? gObj.getSelectedRowIndexes() : [];
          if (selected.length) {
            e.preventDefault();
            var rows = gObj.getContentTable().querySelector(tbody).children;
            var dataRow = gObj.getDataRows()[selected[selected.length - 1]];
            var grpRow = void 0;
            for (var i = dataRow.rowIndex; i >= 0; i--) {
              if (!rows[parseInt(i.toString(), 10)].classList.contains(row) && !rows[parseInt(i.toString(), 10)].classList.contains("e-detailrow")) {
                grpRow = rows[parseInt(i.toString(), 10)];
                break;
              }
            }
            this.expandCollapseRows(grpRow.querySelector(e.action === "altUpArrow" ? ".e-recordplusexpand" : ".e-recordpluscollapse"));
          }
          break;
        case "ctrlDownArrow":
          e.preventDefault();
          this.expandAll();
          break;
        case "ctrlUpArrow":
          e.preventDefault();
          this.collapseAll();
          break;
        case "enter":
          if (e.target.classList.contains("e-groupsort")) {
            this.groupSortFocus = true;
            e.preventDefault();
            this.applySortFromTarget(e.target);
            break;
          } else if (e.target.classList.contains("e-ungroupbutton")) {
            this.groupCancelFocus = true;
            e.preventDefault();
            this.unGroupFromTarget(e.target);
            break;
          }
          if (this.parent.isEdit || closest(e.target, "#" + this.parent.element.id + "_searchbar") !== null || parentsUntil(e.target, "e-pager") || parentsUntil(e.target, "e-toolbar")) {
            return;
          }
          var element = this.focus.getFocusedElement();
          if (element && (element.classList.contains("e-icon-grightarrow") || element.classList.contains("e-icon-gdownarrow"))) {
            element = element.parentElement;
          }
          var row2 = element && element.parentElement ? element.parentElement.querySelector('[class^="e-record"]') : null;
          if (!row2) {
            break;
          }
          if (element.children.length && (element.children[0].classList.contains("e-icon-grightarrow") || element.children[0].classList.contains("e-icon-gdownarrow"))) {
            e.preventDefault();
            this.expandCollapseRows(row2);
          }
          break;
        case "ctrlSpace":
          var elem = gObj.focusModule.currentInfo.element;
          if (elem && elem.classList.contains("e-headercell")) {
            e.preventDefault();
            var column = gObj.getColumnByUid(elem.firstElementChild.getAttribute("e-mappinguid"));
            if (column.field && gObj.groupSettings.columns.indexOf(column.field) < 0) {
              this.groupColumn(column.field);
            } else {
              this.ungroupColumn(column.field);
            }
          }
          break;
      }
    };
    Group2.prototype.getFocusableGroupedItems = function() {
      var focusableGroupedItems = [];
      if (this.groupSettings.columns.length) {
        var focusableGroupedHeaderItems = this.element.querySelectorAll(".e-groupheadercell");
        for (var i = 0; i < focusableGroupedHeaderItems.length; i++) {
          focusableGroupedItems.push(focusableGroupedHeaderItems[parseInt(i.toString(), 10)].querySelector(".e-grouptext"));
          focusableGroupedItems.push(focusableGroupedHeaderItems[parseInt(i.toString(), 10)].querySelector(".e-groupsort"));
          focusableGroupedItems.push(focusableGroupedHeaderItems[parseInt(i.toString(), 10)].querySelector(".e-ungroupbutton"));
        }
      }
      return focusableGroupedItems;
    };
    Group2.prototype.wireEvent = function() {
      EventHandler.add(this.element, "focusin", this.onFocusIn, this);
      EventHandler.add(this.element, "focusout", this.onFocusOut, this);
      EventHandler.add(this.parent.element, "auxclick", this.auxilaryclickHandler, this);
    };
    Group2.prototype.unWireEvent = function() {
      EventHandler.remove(this.element, "focusin", this.onFocusIn);
      EventHandler.remove(this.element, "focusout", this.onFocusOut);
      EventHandler.remove(this.parent.element, "auxclick", this.auxilaryclickHandler);
    };
    Group2.prototype.onFocusIn = function(e) {
      if (this.parent.focusModule.currentInfo && this.parent.focusModule.currentInfo.element) {
        removeClass([this.parent.focusModule.currentInfo.element, this.parent.focusModule.currentInfo.elementToFocus], ["e-focused", "e-focus"]);
        this.parent.focusModule.currentInfo.element.tabIndex = -1;
      }
      this.addOrRemoveFocus(e);
    };
    Group2.prototype.onFocusOut = function(e) {
      this.addOrRemoveFocus(e);
    };
    Group2.prototype.addOrRemoveFocus = function(e) {
      if (e.target.classList.contains("e-groupdroparea") || e.target.classList.contains("e-grouptext") || e.target.classList.contains("e-groupsort") || e.target.classList.contains("e-ungroupbutton")) {
        var target = e.target.classList.contains("e-grouptext") ? e.target.parentElement.parentElement : e.target;
        if (e.type === "focusin") {
          this.parent.focusModule.currentInfo.element = e.target;
          this.parent.focusModule.currentInfo.elementToFocus = e.target;
          addClass([target], ["e-focused", "e-focus"]);
          e.target.tabIndex = 0;
        } else {
          removeClass([target], ["e-focused", "e-focus"]);
          e.target.tabIndex = -1;
        }
      }
    };
    Group2.prototype.clickHandler = function(e) {
      if (e.target.classList.contains("e-grouptext")) {
        this.groupTextFocus = true;
      }
      if (e.target.classList.contains("e-groupsort")) {
        this.groupSortFocus = true;
      }
      if (e.target.classList.contains("e-ungroupbutton")) {
        this.groupCancelFocus = true;
      }
      if (e.target.classList.contains("e-icon-grightarrow") || e.target.classList.contains("e-icon-gdownarrow")) {
        e.preventDefault();
      }
      var trgtEle = parentsUntil(e.target, "e-recordplusexpand") || parentsUntil(e.target, "e-recordpluscollapse");
      if (trgtEle && (trgtEle.children[0].classList.contains("e-icon-gdownarrow") || trgtEle.children[0].classList.contains("e-icon-grightarrow"))) {
        this.expandCollapseRows(e.target);
      }
      this.applySortFromTarget(e.target);
      this.unGroupFromTarget(e.target);
      this.toogleGroupFromHeader(e.target);
    };
    Group2.prototype.auxilaryclickHandler = function(e) {
      if (e.target.classList.contains("e-icon-grightarrow") || e.target.classList.contains("e-icon-gdownarrow") && e.button === 1) {
        e.preventDefault();
      }
    };
    Group2.prototype.unGroupFromTarget = function(target) {
      if (target.classList.contains("e-ungroupbutton")) {
        this.ungroupColumn(target.parentElement.getAttribute("ej-mappingname"));
      }
    };
    Group2.prototype.toogleGroupFromHeader = function(target) {
      if (this.groupSettings.showToggleButton) {
        if (target.classList.contains("e-grptogglebtn")) {
          if (target.classList.contains("e-toggleungroup")) {
            this.ungroupColumn(this.parent.getColumnByUid(target.parentElement.getAttribute("e-mappinguid")).field);
          } else {
            this.groupColumn(this.parent.getColumnByUid(target.parentElement.getAttribute("e-mappinguid")).field);
          }
        } else {
          if (target.classList.contains("e-toggleungroup")) {
            this.ungroupColumn(target.parentElement.getAttribute("ej-mappingname"));
          }
        }
      }
    };
    Group2.prototype.applySortFromTarget = function(target) {
      var gObj = this.parent;
      var gHeader = closest(target, ".e-groupheadercell");
      if (gObj.allowSorting && gHeader && !target.classList.contains("e-ungroupbutton") && !target.classList.contains("e-toggleungroup")) {
        var field = gHeader.firstElementChild.getAttribute("ej-mappingname");
        if (gObj.getColumnHeaderByField(field).getElementsByClassName("e-ascending").length) {
          gObj.sortColumn(field, "Descending", true);
        } else {
          gObj.sortColumn(field, "Ascending", true);
        }
      }
    };
    Group2.prototype.expandCollapseRows = function(target) {
      var trgt = parentsUntil(target, "e-recordplusexpand") || parentsUntil(target, "e-recordpluscollapse");
      if (trgt) {
        var rowNodes = [].slice.call(this.parent.getContentTable().querySelector(tbody).children);
        if (this.parent.editSettings.showAddNewRow) {
          if (rowNodes[0].classList.contains("e-addedrow")) {
            rowNodes.shift();
          } else if (rowNodes[rowNodes.length - 1].classList.contains("e-addedrow")) {
            rowNodes.pop();
          }
        }
        var isHide = void 0;
        var dataManager = void 0;
        var query = void 0;
        var gObj = this.parent;
        var indent = trgt.parentElement.getElementsByClassName("e-indentcell").length;
        var uid2 = trgt.parentElement.getAttribute("data-uid");
        var captionRow = gObj.getRowObjectFromUID(uid2);
        var expand = false;
        if (trgt.classList.contains("e-recordpluscollapse")) {
          addClass([trgt], "e-recordplusexpand");
          removeClass([trgt], "e-recordpluscollapse");
          trgt.firstElementChild.className = "e-icons e-gdiagonaldown e-icon-gdownarrow";
          trgt.firstElementChild.setAttribute("title", this.l10n.getConstant("Expanded"));
          expand = true;
          captionRow.isExpand = true;
          if (isGroupAdaptive(gObj)) {
            this.updateVirtualRows(gObj, target, expand, query, dataManager);
          }
          if (this.parent.groupSettings.enableLazyLoading) {
            if ((this.parent.filterSettings.columns.length || this.parent.sortSettings.columns.length || this.parent.searchSettings.key.length) && this.parent.getContent().firstElementChild.scrollTop === 0) {
              this.parent.contentModule.isTop = true;
            }
            (this.parent.enableVirtualization ? this.parent.lazyLoadRender : this.parent.contentModule).captionExpand(trgt.parentElement);
          }
        } else {
          isHide = true;
          captionRow.isExpand = false;
          removeClass([trgt], "e-recordplusexpand");
          addClass([trgt], "e-recordpluscollapse");
          trgt.firstElementChild.className = "e-icons e-gnextforward e-icon-grightarrow";
          trgt.firstElementChild.setAttribute("title", this.l10n.getConstant("Collapsed"));
          if (isGroupAdaptive(gObj)) {
            this.updateVirtualRows(gObj, target, !isHide, query, dataManager);
          }
          if (this.parent.groupSettings.enableLazyLoading) {
            (this.parent.enableVirtualization ? this.parent.lazyLoadRender : this.parent.contentModule).captionCollapse(trgt.parentElement);
          }
        }
        this.aria.setExpand(trgt, expand);
        if (!isGroupAdaptive(gObj) && !this.parent.groupSettings.enableLazyLoading) {
          var rowObjs = gObj.getRowsObject();
          var startIdx = rowObjs.indexOf(captionRow);
          var rowsState = {};
          var cacheStartIdx = gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings && gObj.infiniteScrollSettings.enableCache && rowObjs.length !== rowNodes.length ? Array.from(rowNodes).indexOf(trgt.parentElement) : void 0;
          for (var i = startIdx; i < rowObjs.length; i++) {
            if (i > startIdx && rowObjs[parseInt(i.toString(), 10)].indent === indent) {
              break;
            }
            if (rowObjs[parseInt(i.toString(), 10)].isDetailRow) {
              var visible = rowObjs[i - 1].isExpand && rowObjs[i - 1].visible;
              if (cacheStartIdx && cacheStartIdx > 0 && cacheStartIdx < rowNodes.length) {
                rowNodes[parseInt(cacheStartIdx.toString(), 10)].style.display = visible ? "" : "none";
              } else if (isNullOrUndefined(cacheStartIdx)) {
                rowNodes[parseInt(i.toString(), 10)].style.display = visible ? "" : "none";
              }
            } else if (rowsState[rowObjs[parseInt(i.toString(), 10)].parentUid] === false) {
              rowObjs[parseInt(i.toString(), 10)].visible = false;
              if (cacheStartIdx && cacheStartIdx > 0 && cacheStartIdx < rowNodes.length) {
                rowNodes[parseInt(cacheStartIdx.toString(), 10)].style.display = "none";
              } else if (isNullOrUndefined(cacheStartIdx)) {
                rowNodes[parseInt(i.toString(), 10)].style.display = "none";
              }
            } else {
              if (!(rowObjs[parseInt(i.toString(), 10)].isDataRow || rowObjs[parseInt(i.toString(), 10)].isCaptionRow || rowObjs[parseInt(i.toString(), 10)].isDetailRow || rowObjs[parseInt(i.toString(), 10)].isAggregateRow)) {
                var visible = rowObjs[parseInt(i.toString(), 10)].cells.some(function(cell) {
                  return cell.isDataCell && cell.visible;
                });
                if (visible === rowObjs[parseInt(i.toString(), 10)].visible) {
                  continue;
                }
              }
              rowObjs[parseInt(i.toString(), 10)].visible = true;
              if (cacheStartIdx && cacheStartIdx > 0 && cacheStartIdx < rowNodes.length) {
                rowNodes[parseInt(cacheStartIdx.toString(), 10)].style.display = "";
                rowNodes[parseInt(cacheStartIdx.toString(), 10)].classList.remove("e-hide");
              } else if (isNullOrUndefined(cacheStartIdx)) {
                rowNodes[parseInt(i.toString(), 10)].style.display = "";
                rowNodes[parseInt(i.toString(), 10)].classList.remove("e-hide");
              }
            }
            if (rowObjs[parseInt(i.toString(), 10)].isCaptionRow) {
              rowsState[rowObjs[parseInt(i.toString(), 10)].uid] = rowObjs[parseInt(i.toString(), 10)].isExpand && rowObjs[parseInt(i.toString(), 10)].visible;
            }
            if (!isNullOrUndefined(cacheStartIdx)) {
              cacheStartIdx++;
            }
          }
          this.lastCaptionRowBorder();
          this.parent.notify(refreshExpandandCollapse, {
            rows: this.parent.getRowsObject()
          });
        }
        if (!this.parent.enableInfiniteScrolling || !this.parent.groupSettings.enableLazyLoading) {
          this.parent.notify(captionActionComplete, {
            isCollapse: isHide,
            parentUid: uid2
          });
        }
      }
    };
    Group2.prototype.lastCaptionRowBorder = function() {
      var table2 = this.parent.getContentTable();
      var clientHeight = this.parent.getContent().clientHeight;
      if (!this.parent.enableVirtualization && !this.parent.enableInfiniteScrolling || this.parent.groupSettings.enableLazyLoading) {
        if (table2.scrollHeight < clientHeight || this.isAppliedCaptionRowBorder) {
          if (this.isAppliedCaptionRowBorder || table2.querySelector(".e-lastrowcell")) {
            var borderCells = table2.querySelectorAll(".e-lastrowcell");
            for (var i = 0, len = borderCells.length; i < len; i++) {
              removeClass([borderCells[parseInt(i.toString(), 10)]], "e-lastrowcell");
            }
            this.isAppliedCaptionRowBorder = false;
          }
          var rowNodes = this.parent.getContentTable().querySelector(tbody).children;
          var lastRow = rowNodes[rowNodes.length - 1];
          if (lastRow.style.display !== "none" && !lastRow.classList.contains("e-groupcaptionrow")) {
            if (table2.scrollHeight < clientHeight) {
              addClass(table2.querySelectorAll("tr:last-child td"), "e-lastrowcell");
              this.isAppliedCaptionRowBorder = true;
            }
          } else {
            for (var i = rowNodes.length - 1, len = 0; i > len; i--) {
              if (rowNodes[parseInt(i.toString(), 10)].style.display !== "none" && rowNodes[parseInt(i.toString(), 10)].classList.contains("e-groupcaptionrow")) {
                if (rowNodes[parseInt(i.toString(), 10)].querySelector(".e-recordpluscollapse")) {
                  addClass(rowNodes[parseInt(i.toString(), 10)].childNodes, "e-lastrowcell");
                  this.isAppliedCaptionRowBorder = true;
                  break;
                }
              }
            }
          }
        }
      }
    };
    Group2.prototype.updateVirtualRows = function(gObj, target, isExpand, query, dataManager) {
      var rObj = gObj.getRowObjectFromUID(target.closest("tr").getAttribute("data-uid"));
      rObj.isExpand = isExpand;
      updatecloneRow(gObj);
      this.parent.notify(refreshVirtualMaxPage, {});
      query = gObj.getDataModule().generateQuery(false);
      var args = {
        requestType: "virtualscroll",
        rowObject: rObj
      };
      if (gObj.contentModule) {
        args.virtualInfo = gObj.contentModule.prevInfo;
      }
      dataManager = gObj.getDataModule().getData(args, query.requiresCount());
      dataManager.then(function(e) {
        return gObj.renderModule.dataManagerSuccess(e, args);
      });
    };
    Group2.prototype.expandCollapse = function(isExpand) {
      if (!this.parent.groupSettings.columns.length) {
        return;
      }
      if (!isExpand) {
        this.parent.notify(initialCollapse, isExpand);
      }
      var rowNodes = this.parent.getContentTable().querySelector(tbody).children;
      var rowObjs = this.parent.getRowsObject();
      var row2;
      for (var i = 0, len = rowNodes.length; i < len; i++) {
        if (rowNodes[parseInt(i.toString(), 10)].querySelectorAll(".e-recordplusexpand, .e-recordpluscollapse").length) {
          row2 = rowNodes[parseInt(i.toString(), 10)].querySelector(isExpand ? ".e-recordpluscollapse" : ".e-recordplusexpand");
          if (row2) {
            if (isExpand) {
              row2.className = "e-recordplusexpand";
              row2.firstElementChild.className = "e-icons e-gdiagonaldown e-icon-gdownarrow";
              row2.setAttribute("aria-expanded", "true");
              row2.firstElementChild.setAttribute("title", this.l10n.getConstant("Expanded"));
            } else {
              row2.className = "e-recordpluscollapse";
              row2.firstElementChild.className = "e-icons e-gnextforward e-icon-grightarrow";
              row2.setAttribute("aria-expanded", "false");
              row2.firstElementChild.setAttribute("title", this.l10n.getConstant("Collapsed"));
            }
          }
          if (!(rowNodes[parseInt(i.toString(), 10)].firstElementChild.classList.contains("e-recordplusexpand") || rowNodes[parseInt(i.toString(), 10)].firstElementChild.classList.contains("e-recordpluscollapse"))) {
            rowNodes[parseInt(i.toString(), 10)].style.display = isExpand ? "" : "none";
          }
        } else {
          rowNodes[parseInt(i.toString(), 10)].style.display = isExpand ? "" : "none";
        }
        if (rowObjs[parseInt(i.toString(), 10)].isCaptionRow) {
          rowObjs[parseInt(i.toString(), 10)].isExpand = isExpand ? true : false;
        }
      }
      this.parent.updateVisibleExpandCollapseRows();
      this.lastCaptionRowBorder();
      this.parent.notify(refreshExpandandCollapse, {
        rows: this.parent.getRowsObject()
      });
    };
    Group2.prototype.expandAll = function() {
      this.expandCollapse(true);
    };
    Group2.prototype.collapseAll = function() {
      this.expandCollapse(false);
    };
    Group2.prototype.render = function() {
      this.l10n = this.serviceLocator.getService("localization");
      this.renderGroupDropArea();
      this.initDragAndDrop();
      this.refreshToggleBtn();
      this.wireEvent();
    };
    Group2.prototype.renderGroupDropArea = function() {
      var groupElem = this.parent.element.querySelector(".e-groupdroparea");
      if (groupElem) {
        remove(groupElem);
      }
      this.element = this.parent.createElement("div", {
        className: "e-groupdroparea",
        attrs: {
          "tabindex": "-1"
        }
      });
      if (this.groupSettings.allowReordering) {
        this.element.classList.add("e-group-animate");
      }
      this.updateGroupDropArea();
      this.parent.element.insertBefore(this.element, this.parent.element.firstChild);
      if (!this.groupSettings.showDropArea || this.parent.rowRenderingMode === "Vertical") {
        this.element.style.display = "none";
      }
    };
    Group2.prototype.updateGroupDropArea = function(clear) {
      if (this.groupSettings.showDropArea && !this.groupSettings.columns.length) {
        var dragLabel = this.l10n.getConstant("GroupDropArea");
        this.element.innerHTML = dragLabel;
        this.element.classList.remove("e-grouped");
      } else {
        if (this.element.innerHTML === this.l10n.getConstant("GroupDropArea") && (this.groupSettings.columns.length === 1 || !this.isAppliedGroup && !this.isAppliedUnGroup) || clear) {
          this.element.innerHTML = "";
        }
        this.element.classList.add("e-grouped");
      }
    };
    Group2.prototype.initDragAndDrop = function() {
      this.initializeGHeaderDrop();
      this.initializeGHeaderDrag();
    };
    Group2.prototype.initializeGHeaderDrag = function() {
      var drag = new Draggable(this.element, {
        dragTarget: this.groupSettings.allowReordering ? ".e-drag" : ".e-groupheadercell",
        distance: this.groupSettings.allowReordering ? -10 : 5,
        helper: this.helper,
        dragStart: this.dragStart,
        drag: this.drag,
        dragStop: this.dragStop
      });
    };
    Group2.prototype.initializeGHeaderDrop = function() {
      var drop = new Droppable(this.element, {
        accept: ".e-dragclone",
        drop: this.drop
      });
    };
    Group2.prototype.groupColumn = function(columnName) {
      var gObj = this.parent;
      var column = gObj.getColumnByField(columnName);
      if (isNullOrUndefined(column) || column.allowGrouping === false || this.contentRefresh && this.groupSettings.columns.indexOf(columnName) > -1) {
        this.parent.log("action_disabled_column", {
          moduleName: this.getModuleName(),
          columnName: column.headerText
        });
        return;
      }
      if (isActionPrevent(gObj)) {
        gObj.notify(preventBatch, {
          instance: this,
          handler: this.groupColumn,
          arg1: columnName
        });
        return;
      }
      column.visible = gObj.groupSettings.showGroupedColumn;
      this.colName = columnName;
      this.isAppliedGroup = true;
      if (this.contentRefresh) {
        this.updateModel();
      } else {
        this.addColToGroupDrop(columnName);
      }
      this.updateGroupDropArea();
      this.isAppliedGroup = false;
    };
    Group2.prototype.ungroupColumn = function(columnName) {
      var gObj = this.parent;
      var column = this.parent.enableColumnVirtualization ? this.parent.columns.filter(function(c) {
        return c.field === columnName;
      })[0] : gObj.getColumnByField(columnName);
      if (isNullOrUndefined(column) || column.allowGrouping === false || this.groupSettings.columns.indexOf(columnName) < 0) {
        return;
      }
      if (isActionPrevent(gObj)) {
        gObj.notify(preventBatch, {
          instance: this,
          handler: this.ungroupColumn,
          arg1: columnName
        });
        return;
      }
      column.visible = true;
      this.colName = column.field;
      var columns = JSON.parse(JSON.stringify(this.groupSettings.columns));
      columns.splice(columns.indexOf(this.colName), 1);
      if (this.sortedColumns.indexOf(columnName) < 0) {
        for (var i = 0, len = gObj.sortSettings.columns.length; i < len; i++) {
          if (columnName === gObj.sortSettings.columns[parseInt(i.toString(), 10)].field) {
            gObj.sortSettings.columns.splice(i, 1);
            break;
          }
        }
      }
      if (this.groupSettings.allowReordering) {
        this.reorderingColumns = columns;
      }
      this.groupSettings.columns = columns;
      if (gObj.allowGrouping) {
        this.isAppliedUnGroup = true;
        this.parent.dataBind();
      }
    };
    Group2.prototype.updateModel = function() {
      var columns = JSON.parse(JSON.stringify(this.groupSettings.columns));
      columns = this.reorderingColumns.length ? JSON.parse(JSON.stringify(this.reorderingColumns)) : columns;
      if (this.sortRequired) {
        if (columns.indexOf(this.colName) === -1) {
          columns.push(this.colName);
        }
        this.groupAddSortingQuery(this.colName);
      }
      this.sortRequired = true;
      this.parent.groupSettings.columns = columns;
      this.parent.dataBind();
    };
    Group2.prototype.onActionComplete = function(e) {
      if (e.requestType === "grouping") {
        this.addColToGroupDrop(this.colName);
      } else {
        this.removeColFromGroupDrop(this.colName);
      }
      if (this.groupSettings.showDropArea && this.parent.height === "100%") {
        this.parent.scrollModule.refresh();
      }
      var args = this.groupSettings.columns.indexOf(this.colName) > -1 ? {
        columnName: this.colName,
        requestType: "grouping",
        type: actionComplete
      } : {
        requestType: "ungrouping",
        type: actionComplete
      };
      this.parent.trigger(actionComplete, extend(e, args));
      this.colName = null;
    };
    Group2.prototype.groupAddSortingQuery = function(colName) {
      var i = 0;
      while (i < this.parent.sortSettings.columns.length) {
        if (this.parent.sortSettings.columns[parseInt(i.toString(), 10)].field === colName) {
          break;
        }
        i++;
      }
      if (this.parent.sortSettings.columns.length === i) {
        this.parent.sortSettings.columns.push({
          field: colName,
          direction: "Ascending",
          isFromGroup: true
        });
      } else if (!this.parent.allowSorting) {
        this.parent.sortSettings.columns[parseInt(i.toString(), 10)].direction = "Ascending";
      }
    };
    Group2.prototype.createElement = function(field) {
      var gObj = this.parent;
      var direction = "Ascending";
      var animator = this.parent.createElement("div", {
        className: "e-grid-icon e-group-animator"
      });
      var groupedColumn = this.parent.createElement("div", {
        className: "e-grid-icon e-groupheadercell"
      });
      var childDiv = this.parent.createElement("div", {
        attrs: {
          "ej-mappingname": field
        }
      });
      if (isComplexField(field)) {
        childDiv.setAttribute("ej-complexname", getComplexFieldID(field));
      }
      var column = this.parent.getColumnByField(field);
      var headerCell = gObj.getColumnHeaderByUid(column.uid);
      if (this.groupSettings.allowReordering) {
        childDiv.appendChild(this.parent.createElement("span", {
          className: "e-drag e-icons e-icon-drag",
          innerHTML: "&nbsp;",
          attrs: {
            title: "Drag",
            tabindex: "-1",
            "aria-label": this.l10n.getConstant("GroupedDrag")
          }
        }));
      }
      childDiv.appendChild(this.parent.createElement("span", {
        className: "e-grouptext",
        innerHTML: column.headerText,
        attrs: {
          tabindex: "-1"
        }
      }));
      if (this.groupSettings.showToggleButton) {
        childDiv.appendChild(this.parent.createElement("span", {
          className: "e-togglegroupbutton e-icons e-icon-ungroup e-toggleungroup",
          innerHTML: "&nbsp;",
          attrs: {
            tabindex: "-1",
            "aria-label": this.l10n.getConstant("UnGroupAria")
          }
        }));
      }
      if (headerCell.querySelectorAll(".e-ascending,.e-descending").length) {
        direction = headerCell.querySelector(".e-ascending") ? "Ascending" : "Descending";
      }
      childDiv.appendChild(this.parent.createElement("span", {
        className: "e-groupsort e-icons " + ("e-" + direction.toLowerCase() + " e-icon-" + direction.toLowerCase()),
        innerHTML: "&nbsp;",
        attrs: {
          tabindex: "-1",
          "aria-label": this.l10n.getConstant("GroupedSortIcon") + column.headerText,
          role: "button"
        }
      }));
      var ungroupButton = this.parent.createElement("span", {
        className: "e-ungroupbutton e-icons e-icon-hide",
        innerHTML: "&nbsp;",
        attrs: {
          title: this.l10n.getConstant("UnGroup"),
          tabindex: "-1",
          "aria-label": this.l10n.getConstant("UnGroupIcon") + column.headerText,
          role: "button"
        }
      });
      updateCSSText(ungroupButton, this.groupSettings.showUngroupButton ? "" : "display: none;");
      childDiv.appendChild(ungroupButton);
      groupedColumn.appendChild(childDiv);
      if (this.groupSettings.allowReordering) {
        animator.appendChild(groupedColumn);
        animator.appendChild(this.createSeparator());
        groupedColumn = animator;
      }
      return groupedColumn;
    };
    Group2.prototype.addColToGroupDrop = function(field) {
      var groupElem = isComplexField(field) ? this.parent.element.querySelector(".e-groupdroparea div[ej-complexname=" + getParsedFieldID(getComplexFieldID(field)) + "]") : this.parent.element.querySelector(".e-groupdroparea div[ej-mappingname=" + getParsedFieldID(field) + "]");
      if (this.groupSettings.allowReordering && groupElem) {
        return;
      }
      var column = this.parent.getColumnByField(field);
      if (isNullOrUndefined(column)) {
        return;
      }
      var groupedColumn = this.createElement(field);
      if (this.groupSettings.allowReordering) {
        var index = this.element.getElementsByClassName("e-group-animator").length;
        groupedColumn.setAttribute("index", index.toString());
      }
      this.element.appendChild(groupedColumn);
      var focusModule = this.parent.focusModule;
      focusModule.setActive(true);
      var firstContentCellIndex = [0, 0];
      if (focusModule.active.matrix.matrix[firstContentCellIndex[0]][firstContentCellIndex[1]] === 0) {
        firstContentCellIndex = findCellIndex(focusModule.active.matrix.matrix, firstContentCellIndex, true);
      }
      focusModule.active.matrix.current = firstContentCellIndex;
      if (this.parent.editSettings.showAddNewRow) {
        this.parent.notify(showAddNewRowFocus, {});
      } else if (this.parent.isInitialLoad && !this.preventFocusOnGroup) {
        focusModule.focus();
      }
    };
    Group2.prototype.createSeparator = function() {
      var separator = this.parent.createElement("span", {
        className: "e-nextgroup e-icons e-icon-next",
        innerHTML: "&nbsp;",
        attrs: {
          tabindex: "-1",
          "aria-label": this.l10n.getConstant("GroupSeperator")
        }
      });
      updateCSSText(separator, this.groupSettings.showUngroupButton ? "" : "display: none;");
      return separator;
    };
    Group2.prototype.refreshToggleBtn = function(isRemove) {
      if (this.groupSettings.showToggleButton) {
        var headers = [].slice.call(this.parent.getHeaderTable().getElementsByClassName("e-headercelldiv"));
        for (var i = 0, len = headers.length; i < len; i++) {
          if (!(headers[parseInt(i.toString(), 10)].classList.contains("e-emptycell") || headers[parseInt(i.toString(), 10)].classList.contains("e-headerchkcelldiv"))) {
            var column = this.parent.getColumnByUid(headers[parseInt(i.toString(), 10)].getAttribute("e-mappinguid"));
            if (!this.parent.showColumnMenu || this.parent.showColumnMenu && !column.showColumnMenu) {
              if (headers[parseInt(i.toString(), 10)].getElementsByClassName("e-grptogglebtn").length) {
                remove(headers[parseInt(i.toString(), 10)].querySelectorAll(".e-grptogglebtn")[0]);
              }
              if (!isRemove) {
                headers[parseInt(i.toString(), 10)].appendChild(this.parent.createElement("span", {
                  className: "e-grptogglebtn e-icons " + (this.groupSettings.columns.indexOf(column.field) > -1 ? "e-toggleungroup e-icon-ungroup" : "e-togglegroup e-icon-group"),
                  attrs: {
                    tabindex: "-1",
                    "aria-label": isNullOrUndefined(this.l10n) ? this.parent.localeObj.getConstant("GroupButton") : this.l10n.getConstant("GroupButton")
                  }
                }));
              }
            }
          }
        }
      }
    };
    Group2.prototype.removeColFromGroupDrop = function(field) {
      if (!isNullOrUndefined(this.getGHeaderCell(field))) {
        var elem = this.getGHeaderCell(field);
        if (this.groupSettings.allowReordering) {
          var parent_1 = parentsUntil(elem, "e-group-animator");
          remove(parent_1);
        } else {
          remove(elem);
        }
        this.updateGroupDropArea();
        if (this.parent.editSettings.showAddNewRow) {
          this.parent.notify(showAddNewRowFocus, {});
        }
      }
      this.isAppliedUnGroup = false;
    };
    Group2.prototype.onPropertyChanged = function(e) {
      if (e.module !== this.getModuleName()) {
        return;
      }
      for (var _i = 0, _a = Object.keys(e.properties); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "columns":
            var args = void 0;
            if (this.contentRefresh) {
              if (!this.isAppliedUnGroup) {
                if (!this.isAppliedGroup) {
                  this.updateGroupDropArea(true);
                  for (var j = 0; j < this.parent.sortSettings.columns.length; j++) {
                    if (this.parent.sortSettings.columns[parseInt(j.toString(), 10)].isFromGroup) {
                      this.parent.sortSettings.columns.splice(j, 1);
                      j--;
                    }
                  }
                  for (var i = 0; i < this.groupSettings.columns.length; i++) {
                    this.colName = this.groupSettings.columns[parseInt(i.toString(), 10)];
                    var col = this.parent.getColumnByField(this.colName);
                    col.visible = this.parent.groupSettings.showGroupedColumn;
                    this.groupAddSortingQuery(this.colName);
                    if (i < this.groupSettings.columns.length - 1) {
                      this.addColToGroupDrop(this.groupSettings.columns[parseInt(i.toString(), 10)]);
                    }
                  }
                }
                args = {
                  columnName: this.colName,
                  requestType: e.properties["" + prop].length ? "grouping" : "ungrouping",
                  type: actionBegin,
                  preventFocusOnGroup: false
                };
              } else {
                args = {
                  columnName: this.colName,
                  requestType: "ungrouping",
                  type: actionBegin
                };
              }
              if (!this.groupSettings.showGroupedColumn) {
                var columns = e.oldProperties["" + prop];
                for (var i = 0; i < columns.length; i++) {
                  if (e.properties["" + prop].indexOf(columns[parseInt(i.toString(), 10)]) === -1) {
                    this.parent.getColumnByField(columns[parseInt(i.toString(), 10)]).visible = true;
                  }
                }
              }
              this.parent.notify(modelChanged, args);
            }
            break;
          case "showDropArea":
            this.updateGroupDropArea();
            if (this.groupSettings.showDropArea) {
              this.element.style.display = "";
              this.parent.headerModule.refreshUI();
            } else {
              this.element.style.display = "none";
            }
            if (this.parent.height === "100%") {
              this.parent.scrollModule.refresh();
            }
            break;
          case "showGroupedColumn":
            this.updateGroupedColumn(this.groupSettings.showGroupedColumn);
            this.parent.notify(modelChanged, {
              requestType: "refresh"
            });
            break;
          case "showUngroupButton":
            this.updateButtonVisibility(this.groupSettings.showUngroupButton, "e-ungroupbutton");
            break;
          case "showToggleButton":
            this.updateButtonVisibility(this.groupSettings.showToggleButton, "e-togglegroupbutton ");
            this.parent.refreshHeader();
            break;
          case "enableLazyLoading":
            this.parent.freezeRefresh();
            break;
        }
      }
    };
    Group2.prototype.updateGroupedColumn = function(isVisible) {
      for (var i = 0; i < this.groupSettings.columns.length; i++) {
        this.parent.getColumnByField(this.groupSettings.columns[parseInt(i.toString(), 10)]).visible = isVisible;
      }
    };
    Group2.prototype.updateButtonVisibility = function(isVisible, className) {
      var gHeader = [].slice.call(this.element.getElementsByClassName(className));
      for (var i = 0; i < gHeader.length; i++) {
        gHeader[parseInt(i.toString(), 10)].style.display = isVisible ? "" : "none";
      }
    };
    Group2.prototype.enableAfterRender = function(e) {
      if (e.module === this.getModuleName() && e.enable) {
        this.render();
      }
    };
    Group2.prototype.destroy = function() {
      var gridElement = this.parent.element;
      if (!gridElement || !gridElement.querySelector("." + gridHeader) && !gridElement.querySelector("." + gridContent)) {
        return;
      }
      if ((this.parent.isDestroyed || !this.parent.allowGrouping) && !this.parent.refreshing) {
        this.clearGrouping();
      }
      this.unWireEvent();
      this.removeEventListener();
      this.refreshToggleBtn(true);
      if (this.element.parentNode) {
        remove(this.element);
      }
    };
    Group2.prototype.clearGrouping = function() {
      var cols = JSON.parse(JSON.stringify(this.groupSettings.columns));
      this.contentRefresh = false;
      for (var i = 0, len = cols.length; i < len; i++) {
        if (i === len - 1) {
          this.contentRefresh = true;
        }
        this.ungroupColumn(cols[parseInt(i.toString(), 10)]);
      }
      this.contentRefresh = true;
    };
    Group2.prototype.getModuleName = function() {
      return "group";
    };
    Group2.prototype.refreshSortIcons = function() {
      var gObj = this.parent;
      var header;
      var cols = gObj.sortSettings.columns;
      var fieldNames = this.parent.getColumns().map(function(c) {
        return c.field;
      });
      this.refreshToggleBtn();
      for (var i = 0, len = cols.length; i < len; i++) {
        if (fieldNames.indexOf(cols[parseInt(i.toString(), 10)].field) === -1) {
          continue;
        }
        header = gObj.getColumnHeaderByField(cols[parseInt(i.toString(), 10)].field);
        if (!gObj.allowSorting && (this.sortedColumns.indexOf(cols[parseInt(i.toString(), 10)].field) > -1 || this.groupSettings.columns.indexOf(cols[parseInt(i.toString(), 10)].field) > -1)) {
          classList(header.querySelector(".e-sortfilterdiv"), ["e-ascending", "e-icon-ascending"], []);
          if (cols.length > 1) {
            header.querySelector(".e-headercelldiv").appendChild(this.parent.createElement("span", {
              className: "e-sortnumber",
              innerHTML: (i + 1).toString()
            }));
          }
        } else if (this.getGHeaderCell(cols[parseInt(i.toString(), 10)].field) && this.getGHeaderCell(cols[parseInt(i.toString(), 10)].field).getElementsByClassName("e-groupsort").length) {
          if (cols[parseInt(i.toString(), 10)].direction === "Ascending") {
            classList(this.getGHeaderCell(cols[parseInt(i.toString(), 10)].field).querySelector(".e-groupsort"), ["e-ascending", "e-icon-ascending"], ["e-descending", "e-icon-descending"]);
          } else {
            classList(this.getGHeaderCell(cols[parseInt(i.toString(), 10)].field).querySelector(".e-groupsort"), ["e-descending", "e-icon-descending"], ["e-ascending", "e-icon-ascending"]);
          }
        }
      }
    };
    Group2.prototype.getGHeaderCell = function(field) {
      if (this.element && this.element.querySelector('[ej-mappingname="' + field + '"]')) {
        return this.element.querySelector('[ej-mappingname="' + field + '"]').parentElement;
      }
      return null;
    };
    Group2.prototype.onGroupAggregates = function(editedData) {
      if (this.parent.groupSettings.enableLazyLoading) {
        if (this.parent.editSettings.mode !== "Batch") {
          this.updateLazyLoadGroupAggregates(editedData);
        }
        return;
      }
      var aggregates = this.iterateGroupAggregates(editedData);
      var rowData = this.groupGenerator.generateRows(aggregates, {});
      var summaryRows = this.parent.getRowsObject().filter(function(row3) {
        return !row3.isDataRow;
      });
      var updateSummaryRows = rowData.filter(function(data) {
        return !data.isDataRow;
      });
      if (this.parent.isReact || this.parent.isVue) {
        this.parent.destroyTemplate(["groupFooterTemplate", "groupCaptionTemplate", "footerTemplate"]);
      }
      for (var i = 0; i < updateSummaryRows.length; i++) {
        var row2 = updateSummaryRows[parseInt(i.toString(), 10)];
        var cells = row2.cells.filter(function(cell) {
          return cell.isDataCell;
        });
        var args = {
          cells,
          data: row2.data,
          dataUid: summaryRows[parseInt(i.toString(), 10)] ? summaryRows[parseInt(i.toString(), 10)].uid : ""
        };
        this.parent.notify(refreshAggregateCell, args);
      }
    };
    Group2.prototype.updateLazyLoadGroupAggregates = function(data, remoteResult) {
      var _this = this;
      var groupCaptionTemplates = this.getGroupAggregateTemplates(true);
      var groupFooterTemplates = this.getGroupAggregateTemplates(false);
      if (!groupCaptionTemplates.length && !groupFooterTemplates.length) {
        return;
      }
      var gObj = this.parent;
      var isRemote = gObj.getDataModule().isRemote();
      var updatedData = data[0];
      var editedRow2 = data.row;
      var groupedCols = gObj.groupSettings.columns;
      var groupLazyLoadRenderer = gObj.contentModule;
      var groupCache = groupLazyLoadRenderer.getGroupCache();
      var currentPageGroupCache = groupCache[gObj.pageSettings.currentPage];
      var result = remoteResult ? remoteResult : [];
      var _loop_1 = function(i2) {
        var groupField = groupedCols[parseInt(i2.toString(), 10)];
        var groupKey = updatedData["" + groupField];
        var groupCaptionRowObject = this_1.getGroupCaptionRowObject(editedRow2, groupedCols.length - i2);
        if (isRemote && result.length) {
          if (i2 !== 0) {
            var prevGroupField = groupedCols[i2 - 1];
            var prevGroupKey_1 = updatedData["" + prevGroupField];
            result = result.find(function(data2) {
              return data2.key === prevGroupKey_1;
            }).items;
          }
          this_1.updateLazyLoadGroupAggregatesRow(result, groupKey, groupCaptionRowObject, currentPageGroupCache, groupCaptionTemplates, groupFooterTemplates);
        } else {
          var query = gObj.renderModule.data.generateQuery();
          if (i2 !== 0) {
            var currentLevelCaptionRowObjects = currentPageGroupCache.filter(function(data2) {
              return data2.isCaptionRow && data2.parentUid === groupCaptionRowObject.parentUid;
            });
            var index = currentLevelCaptionRowObjects.indexOf(groupCaptionRowObject);
            var fields = gObj.groupSettings.columns.slice(0, i2).reverse();
            var keys = fields.map(function(data2) {
              return updatedData["" + data2];
            });
            var pred = generateExpandPredicates(fields, keys, groupLazyLoadRenderer);
            var predicateList = getPredicates(pred);
            var lazyLoad = {
              level: i2,
              skip: index,
              take: 1,
              where: predicateList
            };
            query.lazyLoad.push({
              key: "onDemandGroupInfo",
              value: lazyLoad
            });
          }
          gObj.renderModule.data.getData({}, query).then(function(e) {
            if (isRemote) {
              _this.updateLazyLoadGroupAggregates(data, e.result);
            } else {
              _this.updateLazyLoadGroupAggregatesRow(e.result, groupKey, groupCaptionRowObject, currentPageGroupCache, groupCaptionTemplates, groupFooterTemplates);
            }
            if (i2 === groupedCols.length - 1 || isRemote) {
              _this.destroyRefreshGroupCaptionFooterTemplate();
            }
          }).catch(function(e) {
            return gObj.renderModule.dataManagerFailure(e, {
              requestType: "grouping"
            });
          });
          if (isRemote) {
            return "break";
          }
        }
      };
      var this_1 = this;
      for (var i = 0; i < groupedCols.length; i++) {
        var state_1 = _loop_1(i);
        if (state_1 === "break") break;
      }
    };
    Group2.prototype.destroyRefreshGroupCaptionFooterTemplate = function() {
      var gObj = this.parent;
      if (gObj.isAngular || gObj.isReact || gObj.isVue) {
        gObj.destroyTemplate(["groupCaptionTemplate", "groupFooterTemplate"]);
      }
      gObj.refreshGroupCaptionFooterTemplate();
      gObj.removeMaskRow();
      gObj.hideSpinner();
    };
    Group2.prototype.updateLazyLoadGroupAggregatesRow = function(result, groupKey, groupCaptionRowObject, currentPageGroupCache, groupCaptionTemplates, groupFooterTemplates) {
      var updatedGroupCaptionData = result.find(function(data) {
        return data.key === groupKey;
      });
      if (groupCaptionTemplates.length) {
        this.updateLazyLoadGroupAggregatesCell(updatedGroupCaptionData, groupCaptionRowObject, groupCaptionTemplates);
      }
      if (groupFooterTemplates.length) {
        var groupFooterRowObject = currentPageGroupCache.find(function(data) {
          return data.isAggregateRow && data.parentUid === groupCaptionRowObject.uid;
        });
        this.updateLazyLoadGroupAggregatesCell(updatedGroupCaptionData, groupFooterRowObject, groupFooterTemplates);
      }
    };
    Group2.prototype.updateLazyLoadGroupAggregatesCell = function(updatedGroupCaptionData, captionFooterRowObject, captionFooterTemplates) {
      var prevCaptionFooterData = captionFooterRowObject.data;
      var updatedGroupCaptionDataAggregates = updatedGroupCaptionData.aggregates;
      if (captionFooterRowObject.isCaptionRow) {
        prevCaptionFooterData.aggregates = updatedGroupCaptionDataAggregates;
      }
      for (var i = 0; i < captionFooterTemplates.length; i++) {
        var template = captionFooterTemplates[parseInt(i.toString(), 10)];
        var key = template.field + " - " + template.type;
        var fieldData = prevCaptionFooterData[template.field];
        fieldData["" + key] = updatedGroupCaptionDataAggregates["" + key];
        fieldData[capitalizeFirstLetter(template.type)] = updatedGroupCaptionDataAggregates["" + key];
        if (fieldData[template.type]) {
          fieldData[template.type] = updatedGroupCaptionDataAggregates["" + key];
        }
      }
    };
    Group2.prototype.getGroupCaptionRowObject = function(element, groupCaptionIndex) {
      var gObj = this.parent;
      var uid2 = element.getAttribute("data-uid");
      var parentCaptionRowObject = gObj.getRowObjectFromUID(uid2);
      for (var i = 0; i < groupCaptionIndex; i++) {
        parentCaptionRowObject = gObj.getRowObjectFromUID(parentCaptionRowObject.parentUid);
      }
      return parentCaptionRowObject;
    };
    Group2.prototype.getGroupAggregateTemplates = function(groupCaptionTemplate) {
      var aggregates = [];
      var aggregateRows = this.parent.aggregates;
      for (var j = 0; j < aggregateRows.length; j++) {
        var row2 = aggregateRows[parseInt(j.toString(), 10)];
        for (var k = 0; k < row2.columns.length; k++) {
          if (groupCaptionTemplate && row2.columns[parseInt(k.toString(), 10)].groupCaptionTemplate || !groupCaptionTemplate && row2.columns[parseInt(k.toString(), 10)].groupFooterTemplate) {
            var aggr = {};
            var type = row2.columns[parseInt(k.toString(), 10)].type.toString();
            aggr = {
              type: type.toLowerCase(),
              field: row2.columns[parseInt(k.toString(), 10)].field
            };
            aggregates.push(aggr);
          }
        }
      }
      return aggregates;
    };
    Group2.prototype.groupedRowReorder = function(fromRowObj, toRowObj) {
      var dragRow = this.parent.getRowElementByUID(fromRowObj.uid);
      var dropRow = this.parent.getRowElementByUID(toRowObj.uid);
      var dropArgs = {
        rows: [dragRow],
        target: dropRow,
        fromIndex: fromRowObj.index,
        dropIndex: toRowObj.index
      };
      if (!isNullOrUndefined(fromRowObj) && !isNullOrUndefined(toRowObj) && fromRowObj.parentUid !== toRowObj.parentUid) {
        if (dropRow) {
          if (dropRow["style"].display === "none") {
            dragRow["style"].display = "none";
          }
          if (dropArgs.fromIndex > dropArgs.dropIndex) {
            this.parent.getContentTable().querySelector(tbody).insertBefore(dragRow, dropRow);
          } else {
            this.parent.getContentTable().querySelector(tbody).insertBefore(dragRow, dropRow.nextSibling);
          }
        } else {
          remove(dragRow);
        }
        this.groupReorderHandler(fromRowObj, toRowObj);
        var tr = [].slice.call(this.parent.getContentTable().getElementsByClassName(row));
        groupReorderRowObject(this.parent, dropArgs, tr, toRowObj);
        if (this.parent.enableVirtualization) {
          resetCachedRowIndex(this.parent);
        } else {
          resetRowIndex(this.parent, this.parent.getRowsObject().filter(function(data) {
            return data.isDataRow;
          }), tr);
        }
        this.parent.notify(refreshExpandandCollapse, {
          rows: this.parent.getRowsObject()
        });
      }
    };
    Group2.prototype.groupReorderHandler = function(dragRowObject, dropRowObject) {
      var gObj = this.parent;
      var dragRowObjectData = dragRowObject.data;
      var dropRowObjectData = dropRowObject.data;
      var groupAggregateTemplate = gObj["groupModule"].getGroupAggregateTemplates(false);
      var dropParentRowObject = gObj.getRowObjectFromUID(dropRowObject.parentUid);
      var dragParentRowObject = gObj.getRowObjectFromUID(dragRowObject.parentUid);
      var dropRootParentRowObjects = [dropParentRowObject];
      var dragRootParentRowObjects = [dragParentRowObject];
      var groupColumns = gObj.groupSettings.columns;
      for (var j = 0; j < groupColumns.length; j++) {
        dragRowObjectData[groupColumns[parseInt(j.toString(), 10)]] = dropRowObjectData[groupColumns[parseInt(j.toString(), 10)]];
        if (j > 0) {
          dropRootParentRowObjects.push(gObj.getRowObjectFromUID(dropRootParentRowObjects[j - 1].parentUid));
          dragRootParentRowObjects.push(gObj.getRowObjectFromUID(dragRootParentRowObjects[j - 1].parentUid));
        }
      }
      dragRowObject.parentUid = dropRowObject.parentUid;
      dragRowObject.visible = dropRowObject.visible;
      dragRowObject["parentGid"] = dropRowObject["parentGid"];
      if (dragRowObject.changes !== dragRowObjectData) {
        dragRowObject.changes = dragRowObjectData;
      }
      var updatedCurrentViewData = this.iterateGroupAggregates([{
        dragRowObjects: dragRootParentRowObjects,
        dropRowObjects: dropRootParentRowObjects
      }]);
      var updatedDragCurrentViewData = updatedCurrentViewData.filter(function(object) {
        return object["key"] === dragRootParentRowObjects[dragRootParentRowObjects.length - 1].data["key"] || object["key"] instanceof Date && object["key"].toString() === dragRootParentRowObjects[dragRootParentRowObjects.length - 1].data["key"].toString();
      });
      var updatedDropCurrentViewData = updatedCurrentViewData.filter(function(object) {
        return object["key"] === dropRootParentRowObjects[dropRootParentRowObjects.length - 1].data["key"] || object["key"] instanceof Date && object["key"].toString() === dropRootParentRowObjects[dropRootParentRowObjects.length - 1].data["key"].toString();
      });
      updatedCurrentViewData = [];
      if (!isNullOrUndefined(updatedDragCurrentViewData[0])) {
        updatedCurrentViewData.push(updatedDragCurrentViewData[0]);
      }
      if (!isNullOrUndefined(updatedDropCurrentViewData[0])) {
        updatedCurrentViewData.push(updatedDropCurrentViewData[0]);
      }
      var currentViewData = gObj.currentViewData;
      for (var i = 0; i < currentViewData.length; i++) {
        if (isNullOrUndefined(updatedDragCurrentViewData[0]) && currentViewData[parseInt(i.toString(), 10)]["key"] === dragRootParentRowObjects[dragRootParentRowObjects.length - 1].data["key"]) {
          currentViewData.splice(i, 1);
          i--;
        } else if (isNullOrUndefined(updatedDropCurrentViewData[0]) && currentViewData[parseInt(i.toString(), 10)]["key"] === dropRootParentRowObjects[dropRootParentRowObjects.length - 1].data["key"]) {
          currentViewData.splice(i, 1);
          i--;
        } else if (!isNullOrUndefined(updatedDragCurrentViewData[0]) && currentViewData[parseInt(i.toString(), 10)]["key"] === updatedDragCurrentViewData[0]["key"]) {
          currentViewData[parseInt(i.toString(), 10)] = updatedDragCurrentViewData[0];
        } else if (!isNullOrUndefined(updatedDropCurrentViewData[0]) && currentViewData[parseInt(i.toString(), 10)]["key"] === updatedDropCurrentViewData[0]["key"]) {
          currentViewData[parseInt(i.toString(), 10)] = updatedDropCurrentViewData[0];
        }
      }
      var updatedRowObject = this.groupGenerator.generateRows(updatedCurrentViewData, {});
      var dragRootParentAggregateRowObject = [];
      var dropRootParentAggregateRowObject = [];
      for (var i = 0; i < dragRootParentRowObjects.length; i++) {
        dragRootParentAggregateRowObject.push.apply(dragRootParentAggregateRowObject, this.getGroupParentFooterAggregateRowObject(dragRootParentRowObjects[parseInt(i.toString(), 10)].uid));
      }
      for (var i = 0; i < dropRootParentRowObjects.length; i++) {
        dropRootParentAggregateRowObject.push.apply(dropRootParentAggregateRowObject, this.getGroupParentFooterAggregateRowObject(dropRootParentRowObjects[parseInt(i.toString(), 10)].uid));
      }
      dragRootParentRowObjects.push.apply(dragRootParentRowObjects, dragRootParentAggregateRowObject);
      dropRootParentRowObjects.push.apply(dropRootParentRowObjects, dropRootParentAggregateRowObject);
      this.updatedRowObjChange(dragRootParentRowObjects, updatedRowObject, groupAggregateTemplate, true);
      this.updatedRowObjChange(dropRootParentRowObjects, updatedRowObject, groupAggregateTemplate);
      this.groupReorderRefreshHandler(dragRootParentRowObjects);
      this.groupReorderRefreshHandler(dropRootParentRowObjects);
    };
    Group2.prototype.updatedRowObjChange = function(rootParentRowObjects, updatedRowObjects, groupAggregateTemplate, isDraggedRow) {
      var gObj = this.parent;
      var rowObjects = gObj.getRowsObject();
      var cache = {};
      var virtualCacheRowObjects = [];
      if (gObj.enableVirtualization) {
        cache = gObj.contentModule["vgenerator"].cache;
        virtualCacheRowObjects = gObj.vcRows;
      }
      for (var i = 0; i < rootParentRowObjects.length; i++) {
        var keyPresent = false;
        var parentRowObject = rootParentRowObjects[parseInt(i.toString(), 10)];
        for (var j = 0; j < updatedRowObjects.length; j++) {
          var updatedRowObject = updatedRowObjects[parseInt(j.toString(), 10)];
          if (!isNullOrUndefined(updatedRowObject) && !isNullOrUndefined(parentRowObject.data["key"]) && !isNullOrUndefined(updatedRowObject.data["key"]) && (parentRowObject.data["key"] === updatedRowObject.data["key"] || parentRowObject.data["key"] instanceof Date && parentRowObject.data["key"].toString() === updatedRowObject.data["key"].toString())) {
            var isParentKeyPresent = true;
            var nextParentObject = rootParentRowObjects[parseInt((i + 1).toString(), 10)];
            if (isDraggedRow && nextParentObject && !nextParentObject.isAggregateRow) {
              var key = nextParentObject.data["key"].toString();
              var field = nextParentObject.data["field"];
              var groupedData = updatedRowObject.data["items"].records ? updatedRowObject.data["items"].records : updatedRowObject.data["items"];
              if (groupedData && groupedData.length && groupedData[0]["" + field] && groupedData[0]["" + field].toString() !== key) {
                isParentKeyPresent = false;
              }
            }
            if (!isParentKeyPresent && isDraggedRow) {
              continue;
            }
            var index = rowObjects.indexOf(parentRowObject);
            if (index !== -1) {
              rowObjects[parseInt(index.toString(), 10)].data = updatedRowObject.data;
              rowObjects[parseInt(index.toString(), 10)]["gSummary"] = updatedRowObject["gSummary"];
            }
            if (gObj.enableVirtualization) {
              var vIndex = virtualCacheRowObjects.indexOf(parentRowObject);
              if (vIndex !== -1) {
                virtualCacheRowObjects[parseInt(vIndex.toString(), 10)].data = updatedRowObject.data;
                virtualCacheRowObjects[parseInt(vIndex.toString(), 10)]["gSummary"] = updatedRowObject["gSummary"];
              }
            }
            parentRowObject.data = updatedRowObject.data;
            parentRowObject["gSummary"] = ["gSummary"];
            updatedRowObjects.splice(j, 1);
            j--;
            keyPresent = true;
            break;
          } else if (parentRowObject.isAggregateRow && updatedRowObject.isAggregateRow) {
            for (var l = 0; l < groupAggregateTemplate.length; l++) {
              if (this.evaluateGroupAggregateValueChange(parentRowObject, updatedRowObject, groupAggregateTemplate[parseInt(l.toString(), 10)])) {
                var index = rowObjects.indexOf(parentRowObject);
                if (index !== -1) {
                  rowObjects[parseInt(index.toString(), 10)].data = updatedRowObject.data;
                  rowObjects[parseInt(index.toString(), 10)]["gSummary"] = updatedRowObject["gSummary"];
                }
                if (gObj.enableVirtualization) {
                  var vIndex = virtualCacheRowObjects.indexOf(parentRowObject);
                  if (vIndex !== -1) {
                    virtualCacheRowObjects[parseInt(vIndex.toString(), 10)].data = updatedRowObject.data;
                    virtualCacheRowObjects[parseInt(vIndex.toString(), 10)]["gSummary"] = updatedRowObject["gSummary"];
                  }
                }
                parentRowObject.data = updatedRowObject.data;
                parentRowObject["gSummary"] = updatedRowObject["gSummary"];
                keyPresent = true;
                break;
              }
            }
            if (keyPresent) {
              break;
            }
          }
        }
        if (!keyPresent) {
          var removeElem = gObj.getRowElementByUID(parentRowObject.uid);
          if (!isNullOrUndefined(removeElem)) {
            remove(removeElem);
          }
          rowObjects.splice(rowObjects.indexOf(parentRowObject), 1);
          if (gObj.enableVirtualization) {
            virtualCacheRowObjects.splice(virtualCacheRowObjects.indexOf(parentRowObject), 1);
            for (var k = 1; k <= Object.keys(cache).length; k++) {
              var vcIndex = cache[parseInt(k.toString(), 10)].indexOf(parentRowObject);
              if (vcIndex !== -1) {
                cache[parseInt(k.toString(), 10)].splice([parseInt(vcIndex.toString(), 10)], 1);
              }
            }
          }
          if (gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings.enableCache) {
            gObj.infiniteScrollModule.resetInfiniteCache(rowObjects);
          }
        }
      }
    };
    Group2.prototype.groupReorderRefreshHandler = function(parentRowObjects) {
      var gObj = this.parent;
      var row2 = new RowRenderer(gObj["serviceLocator"], null, gObj);
      var columns = gObj.getColumns();
      for (var j = 0; j < parentRowObjects.length; j++) {
        var rowObject = parentRowObjects[parseInt(j.toString(), 10)];
        if (!isNullOrUndefined(rowObject.uid) && !isNullOrUndefined(gObj.getRowElementByUID(rowObject.uid))) {
          row2.refresh(rowObject, columns, false);
        }
      }
    };
    Group2.prototype.getGroupParentFooterAggregateRowObject = function(parentUid) {
      var rowObjects = this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache && this.parent.groupSettings.columns.length ? this.parent.contentModule["rows"] : this.parent.getRowsObject();
      var parentFooterAggregates = [];
      for (var i = 0; i < rowObjects.length; i++) {
        var rowObject = rowObjects[parseInt(i.toString(), 10)];
        if (rowObject.parentUid === parentUid && rowObject.isAggregateRow) {
          parentFooterAggregates.push(rowObject);
        }
      }
      return parentFooterAggregates;
    };
    Group2.prototype.evaluateGroupAggregateValueChange = function(rowObjects, updatedRowObject, groupAggregateTemplate) {
      var change2 = false;
      if (rowObjects.data[groupAggregateTemplate["field"]]["field"] === updatedRowObject.data[groupAggregateTemplate["field"]]["field"] && rowObjects.data[groupAggregateTemplate["field"]]["key"] === updatedRowObject.data[groupAggregateTemplate["field"]]["key"] && rowObjects.data[groupAggregateTemplate["field"]].hasOwnProperty(groupAggregateTemplate["field"] + " - " + groupAggregateTemplate["type"]) && updatedRowObject.data[groupAggregateTemplate["field"]].hasOwnProperty(groupAggregateTemplate["field"] + " - " + groupAggregateTemplate["type"])) {
        change2 = true;
      }
      return change2;
    };
    Group2.prototype.gettingVirtualData = function(parentRowObjs, curViewRec, pK) {
      var datas = [];
      var _loop_2 = function(i2) {
        if (curViewRec.indexOf(parentRowObjs[parseInt(i2.toString(), 10)].data) === -1) {
          datas.push(parentRowObjs[parseInt(i2.toString(), 10)].data);
        }
        if (parentRowObjs[parseInt(i2.toString(), 10)].data["field"] === this_2.parent.groupSettings.columns[0]) {
          var draggedData_1 = parentRowObjs[parseInt(i2.toString(), 10)].data["items"];
          if (!isNullOrUndefined(draggedData_1["records"])) {
            draggedData_1 = draggedData_1["records"];
          }
          var _loop_3 = function(j2) {
            if (pK && curViewRec.findIndex(function(data) {
              return data[pK.toString()] === draggedData_1[parseInt(j2.toString(), 10)][pK.toString()];
            }) === -1) {
              datas.push(draggedData_1[parseInt(j2.toString(), 10)]);
            }
          };
          for (var j = 0; j < draggedData_1.length; j++) {
            _loop_3(j);
          }
        }
      };
      var this_2 = this;
      for (var i = 0; i < parentRowObjs.length; i++) {
        _loop_2(i);
      }
      return datas;
    };
    Group2.prototype.iterateGroupAggregates = function(editedData) {
      var _this = this;
      var updatedData = editedData instanceof Array ? editedData : [];
      var rows = this.parent.getRowsObject();
      var initData = this.parent.getCurrentViewRecords().slice();
      var field = this.parent.getPrimaryKeyFieldNames()[0];
      var dragParentRowObjects = editedData && editedData.length ? editedData[0] && editedData[0]["dragRowObjects"] : null;
      var dropParentRowObjects = editedData && editedData.length ? editedData[0] && editedData[0]["dropRowObjects"] : null;
      var dropRootKey = null;
      var dragRootKey = null;
      if (this.parent.enableVirtualization && this.parent.allowGrouping && this.parent.groupSettings.columns.length && (!isNullOrUndefined(dragParentRowObjects) || !isNullOrUndefined(dropParentRowObjects))) {
        if (dragParentRowObjects) {
          initData.push.apply(initData, this.gettingVirtualData(dragParentRowObjects, initData, field));
        }
        if (dropParentRowObjects) {
          initData.push.apply(initData, this.gettingVirtualData(dropParentRowObjects, initData, field));
        }
      }
      var isInfiniteGroup = this.parent.enableInfiniteScrolling && this.parent.allowGrouping && editedData.length && this.parent.groupSettings.columns.length && !isNullOrUndefined(dragParentRowObjects) && !isNullOrUndefined(dropParentRowObjects);
      if (isInfiniteGroup) {
        initData = [];
        dropRootKey = dropParentRowObjects[dropParentRowObjects.length - 1].data["key"];
        dragRootKey = dragParentRowObjects[dragParentRowObjects.length - 1].data["key"];
        this.parent.getRowsObject().map(function(row3) {
          var groupKey = row3.data[_this.parent.groupSettings.columns[0]];
          if (row3.isDataRow && (groupKey === dropRootKey || groupKey === dragRootKey || groupKey instanceof Date && (groupKey.toString() === dropRootKey.toString() || groupKey.toString() === dragRootKey.toString()))) {
            initData.push(row3.data);
          }
        });
      }
      var deletedCols = [];
      var changeds = rows.map(function(row3) {
        if (row3.edit === "delete") {
          deletedCols.push(row3.data);
        }
        return row3.changes instanceof Object ? row3.changes : row3.data;
      });
      changeds = updatedData.length === 0 ? changeds : updatedData;
      var mergeData = initData.map(function(item) {
        var pKeyVal = DataUtil.getObject(field, item);
        var value;
        var hasVal = changeds.some(function(cItem) {
          value = cItem;
          return pKeyVal === DataUtil.getObject(field, cItem);
        });
        return hasVal ? value : item;
      });
      var eData = editedData;
      if (!(eData.type && eData.type === "cancel") && deletedCols.length > 0) {
        for (var i = 0; i < deletedCols.length; i++) {
          var index = mergeData.indexOf(deletedCols[parseInt(i.toString(), 10)]);
          mergeData.splice(index, 1);
        }
      }
      var aggregates = [];
      var aggregateRows = this.parent.aggregates;
      for (var j = 0; j < aggregateRows.length; j++) {
        var row2 = aggregateRows[parseInt(j.toString(), 10)];
        for (var k = 0; k < row2.columns.length; k++) {
          var aggr = {};
          var type = row2.columns[parseInt(k.toString(), 10)].type.toString();
          var types = type.split(",").map(function(t) {
            return t.trim();
          });
          for (var _i = 0, types_1 = types; _i < types_1.length; _i++) {
            var aggregateType = types_1[_i];
            aggr = {
              type: aggregateType.toLowerCase(),
              field: row2.columns[parseInt(k.toString(), 10)].field
            };
            aggregates.push(aggr);
          }
        }
      }
      var result;
      var aggrds;
      var groupedCols = this.parent.groupSettings.columns;
      for (var l = 0; l < groupedCols.length; l++) {
        aggrds = result ? result : mergeData;
        result = DataUtil.group(aggrds, groupedCols[parseInt(l.toString(), 10)], aggregates, null, null);
      }
      if (isInfiniteGroup) {
        var lastGroupKey = this.parent.currentViewData[this.parent.currentViewData.length - 1]["key"];
        if (lastGroupKey instanceof Date && (lastGroupKey.toString() === dropRootKey.toString() || lastGroupKey.toString() === dragRootKey.toString()) || lastGroupKey === dropRootKey || lastGroupKey === dragRootKey) {
          var groups_1 = [];
          for (var i = 0; i < result.length; i++) {
            groups_1.push(result[parseInt(i.toString(), 10)]);
          }
          var predicate_1 = [];
          var addWhere = function(input) {
            for (var i2 = 0; i2 < groups_1.length; i2++) {
              predicate_1.push(new Predicate("field", "==", groups_1[parseInt(i2.toString(), 10)].field).and(_this.parent.renderModule.getPredicate("key", "equal", groups_1[parseInt(i2.toString(), 10)].key)));
            }
            input.where(Predicate.or(predicate_1));
          };
          var newQuery = this.parent.getDataModule().generateQuery(true);
          addWhere(newQuery);
          var updatedGroupData = this.parent.getDataModule().dataManager.executeLocal(newQuery);
          this.parent.renderModule.updateGroupInfo(result, updatedGroupData);
        }
      }
      return result;
    };
    Group2.prototype.updateExpand = function(args) {
      var uid2 = args.uid;
      var isExpand = args.isExpand;
      var rows = this.parent.getRowsObject();
      for (var i = 0; i < rows.length; i++) {
        var row2 = rows[parseInt(i.toString(), 10)];
        if (row2.uid === uid2 || isNullOrUndefined(uid2)) {
          row2.isExpand = isExpand;
          var _loop_4 = function(j2) {
            var childRow = rows[parseInt(j2.toString(), 10)];
            var closestParent = void 0;
            if (childRow.parentUid !== row2.uid) {
              closestParent = rows.filter(function(x) {
                return x.uid === childRow.parentUid;
              })[0];
            }
            if (childRow.parentUid === row2.uid) {
              childRow.visible = row2.isExpand;
            } else if (!isNullOrUndefined(closestParent) && childRow.parentUid === closestParent.uid) {
              if (closestParent.isExpand && closestParent.visible === true) {
                childRow.visible = true;
              } else if (closestParent.isExpand && closestParent.visible === false) {
                childRow.visible = false;
              }
            }
            if (isNullOrUndefined(uid2)) {
              return "break";
            }
          };
          for (var j = i + 1; j < rows.length; j++) {
            var state_2 = _loop_4(j);
            if (state_2 === "break") break;
          }
        }
      }
      this.parent.notify(contentReady, {
        rows,
        args: {
          isFrozen: false,
          rows
        }
      });
    };
    return Group2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/detail-row.js
var DetailRow = (
  /** @class */
  function() {
    function DetailRow2(parent, locator) {
      this.aria = new AriaService();
      this.childRefs = [];
      this.parent = parent;
      this.serviceLocator = locator;
      this.focus = locator.getService("focus");
      this.addEventListener();
    }
    DetailRow2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      EventHandler.add(this.parent.element, "auxclick", this.auxilaryclickHandler, this);
      this.parent.on(click, this.clickHandler, this);
      this.parent.on(destroy, this.destroy, this);
      this.parent.on(keyPressed, this.keyPressHandler, this);
      this.parent.on(expandChildGrid, this.expand, this);
      this.parent.on(columnVisibilityChanged, this.refreshColSpan, this);
      this.parent.on(destroy, this.destroyChildGrids, this);
      this.parent.on(destroyChildGrid, this.destroyChildGrids, this);
      this.parent.on(destroy, this.detachDetailTemplate, this);
      this.parent.on(detachDetailTemplate, this.detachDetailTemplate, this);
    };
    DetailRow2.prototype.clickHandler = function(e) {
      if ((e.target.classList.contains("e-icon-grightarrow") || e.target.classList.contains("e-icon-gdownarrow")) && !this.parent.allowGrouping) {
        e.preventDefault();
      }
      this.toogleExpandcollapse(closest(e.target, "td"));
    };
    DetailRow2.prototype.auxilaryclickHandler = function(e) {
      if ((e.target.classList.contains("e-icon-grightarrow") || e.target.classList.contains("e-icon-gdownarrow")) && !this.parent.allowGrouping && e.button === 1) {
        e.preventDefault();
      }
    };
    DetailRow2.prototype.toogleExpandcollapse = function(target) {
      this.l10n = this.serviceLocator.getService("localization");
      var gObj = this.parent;
      var table2 = this.parent.getContentTable();
      var lastrowIdx = this.parent.getCurrentViewRecords().length - 1;
      var parent = "parentDetails";
      var childGrid;
      var isExpanded = target && target.classList.contains("e-detailrowcollapse");
      if (!(target && (target.classList.contains("e-detailrowcollapse") || target.classList.contains("e-detailrowexpand"))) || target && target.classList.contains("e-masked-cell")) {
        return;
      }
      var tr = target.parentElement;
      var uid2 = tr.getAttribute("data-uid");
      var rowObj = gObj.getRowObjectFromUID(uid2);
      var needToRefresh = false;
      var nextRow = this.parent.getContentTable().querySelector(tbody).children[tr.rowIndex + 1];
      if (target.classList.contains("e-detailrowcollapse")) {
        var data_1 = rowObj.data;
        if (this.isDetailRow(nextRow)) {
          nextRow.style.display = "";
          gObj.notify(detailStateChange, {
            data: data_1,
            childGrid: gObj.childGrid,
            detailElement: target,
            isExpanded
          });
          needToRefresh = true;
        } else if (gObj.getDetailTemplate() || gObj.childGrid) {
          var rowId = getUid("grid-row");
          var detailRow = this.parent.createElement("tr", {
            className: "e-detailrow",
            attrs: {
              "data-uid": rowId,
              role: "row"
            }
          });
          var detailCell_1 = this.parent.createElement("th", {
            className: "e-detailcell",
            attrs: {
              "scope": "col",
              role: "columnheader"
            }
          });
          var colSpan = this.parent.getVisibleColumns().length;
          if (this.parent.allowRowDragAndDrop) {
            colSpan++;
          }
          detailCell_1.setAttribute("colspan", colSpan.toString());
          var row2 = new Row({
            isDataRow: true,
            isExpand: true,
            uid: rowId,
            isDetailRow: true,
            cells: [new Cell({
              cellType: CellType.Indent
            }), new Cell({
              isDataCell: true,
              visible: true
            })]
          });
          row2.parentUid = rowObj.uid;
          for (var i = 0, len = gObj.groupSettings.columns.length; i < len; i++) {
            detailRow.appendChild(this.parent.createElement("td", {
              className: "e-indentcell"
            }));
            row2.cells.unshift(new Cell({
              cellType: CellType.Indent
            }));
          }
          detailRow.appendChild(this.parent.createElement("th", {
            className: "e-detailindentcell",
            attrs: {
              "scope": "col"
            }
          }));
          detailRow.appendChild(detailCell_1);
          tr.parentNode.insertBefore(detailRow, tr.nextSibling);
          var isReactCompiler = void 0;
          var isReactChild = void 0;
          if (gObj.detailTemplate) {
            isReactCompiler = this.parent.isReact && typeof gObj.detailTemplate !== "string" && !(gObj.detailTemplate.prototype && gObj.detailTemplate.prototype.CSPTemplate);
            isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
            var isReactPrintGrid = this.parent.printGridParent && this.parent.printGridParent.isReact;
            var detailTemplateID = gObj.element.id + "detailTemplate";
            if (isReactCompiler || isReactChild || isReactPrintGrid) {
              gObj.getDetailTemplate()(data_1, gObj, "detailTemplate", detailTemplateID, null, null, detailCell_1);
              this.parent.renderTemplates(function() {
                gObj.trigger(detailDataBound, {
                  detailElement: detailCell_1,
                  data: data_1,
                  childGrid
                });
              });
            } else {
              appendChildren(detailCell_1, gObj.getDetailTemplate()(data_1, gObj, "detailTemplate", detailTemplateID, void 0, void 0, void 0, this.parent["root"]));
            }
          } else {
            childGrid = new Grid(this.getGridModel(gObj, rowObj, gObj.printMode));
            childGrid.height = gObj.enableInfiniteScrolling && childGrid.height === "auto" ? 300 : childGrid.height;
            childGrid.root = gObj.root ? gObj.root : gObj;
            this.childRefs.push(childGrid);
            if (childGrid.query) {
              childGrid.query = childGrid.query.clone();
            }
            childGrid["" + parent] = {
              parentID: gObj.element.id,
              parentPrimaryKeys: gObj.getPrimaryKeyFieldNames(),
              parentKeyField: gObj.childGrid.queryString,
              parentKeyFieldValue: gObj.childGrid.queryString && isComplexField(gObj.childGrid.queryString) ? getObject(gObj.childGrid.queryString, data_1) : data_1[gObj.childGrid.queryString],
              parentRowData: data_1
            };
            if (gObj.isReact || gObj.isVue) {
              childGrid.parentDetails.parentInstObj = gObj;
            } else if (gObj.parentDetails && gObj.parentDetails.parentInstObj && (gObj.parentDetails.parentInstObj.isReact || gObj.parentDetails.parentInstObj.isVue)) {
              childGrid.parentDetails.parentInstObj = gObj.parentDetails.parentInstObj;
            }
            if (gObj.printGridParent && gObj.printGridParent.isReact) {
              childGrid.printGridParent = gObj.printGridParent;
            }
            childGrid.isLegacyTemplate = gObj.isReact || gObj.isLegacyTemplate;
            if (gObj.isPrinting) {
              childGrid.isPrinting = true;
              childGrid.on(contentReady, this.promiseResolve(childGrid), this);
              childGrid.on(onEmpty, this.promiseResolve(childGrid), this);
            }
            rowObj.childGrid = childGrid;
            var modules = childGrid.getInjectedModules();
            var injectedModues = gObj.getInjectedModules();
            if (!modules || modules.length !== injectedModues.length) {
              childGrid.setInjectedModules(injectedModues);
            }
            var gridElem = this.parent.createElement("div", {
              id: "child" + parents(tr, "e-grid").length + "_grid" + tr.rowIndex + getUid(""),
              className: "e-childgrid"
            });
            detailCell_1.appendChild(gridElem);
            childGrid.appendTo(gridElem);
          }
          detailRow.appendChild(detailCell_1);
          if (tr.nextSibling) {
            tr.parentNode.insertBefore(detailRow, tr.nextSibling);
          } else {
            tr.parentNode.appendChild(detailRow);
          }
          var rowElems = gObj.getRows();
          var rowObjs = gObj.getRowsObject();
          rowElems.splice(rowElems.indexOf(tr) + 1, 0, detailRow);
          if (gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings.enableCache) {
            var infiniteCache = gObj.contentModule.infiniteCache;
            var keys = Object.keys(infiniteCache);
            for (var i = 0; i < keys.length; i++) {
              var cacheIndex = infiniteCache[parseInt(keys[parseInt(i.toString(), 10)], 10)].indexOf(rowObj);
              if (cacheIndex !== -1) {
                infiniteCache[parseInt(keys[parseInt(i.toString(), 10)], 10)].splice(cacheIndex + 1, 0, row2);
                break;
              }
            }
          } else {
            rowObjs.splice(rowObjs.indexOf(rowObj) + 1, 0, row2);
          }
          if (!isReactCompiler || !isReactChild) {
            gObj.trigger(detailDataBound, {
              detailElement: detailCell_1,
              data: data_1,
              childGrid
            });
          }
          gObj.notify(detailDataBound, {
            rows: rowObjs
          });
        }
        classList(target, ["e-detailrowexpand"], ["e-detailrowcollapse"]);
        classList(target.firstElementChild, ["e-dtdiagonaldown", "e-icon-gdownarrow"], ["e-dtdiagonalright", "e-icon-grightarrow"]);
        rowObj.isExpand = true;
        if (target.classList.contains("e-lastrowcell") && this.parent.getContent().clientHeight > table2.scrollHeight) {
          removeClass(target.parentElement.querySelectorAll("td"), "e-lastrowcell");
          var detailrowIdx = table2.querySelector(tbody).getElementsByClassName("e-detailrow").length - 1;
          addClass(table2.querySelector(tbody).getElementsByClassName("e-detailrow")[parseInt(detailrowIdx.toString(), 10)].childNodes, ["e-lastrowcell"]);
          this.lastrowcell = true;
        }
        this.aria.setExpand(target, true);
        target.firstElementChild.setAttribute("title", this.l10n.getConstant("Expanded"));
      } else {
        if (this.isDetailRow(nextRow)) {
          nextRow.style.display = "none";
          gObj.notify(detailStateChange, {
            data: rowObj.data,
            childGrid: gObj.childGrid,
            detailElement: target,
            isExpanded
          });
        }
        classList(target, ["e-detailrowcollapse"], ["e-detailrowexpand"]);
        classList(target.firstElementChild, ["e-dtdiagonalright", "e-icon-grightarrow"], ["e-dtdiagonaldown", "e-icon-gdownarrow"]);
        if (parseInt(tr.getAttribute(ariaRowIndex), 10) - 1 === lastrowIdx && this.lastrowcell) {
          addClass(target.parentElement.querySelectorAll("td"), "e-lastrowcell");
          this.lastrowcell = false;
        }
        rowObj.isExpand = false;
        needToRefresh = true;
        this.aria.setExpand(target, false);
        target.firstElementChild.setAttribute("title", this.l10n.getConstant("Collapsed"));
      }
      if (!isNullOrUndefined(gObj.detailTemplate) || gObj.childGrid && needToRefresh) {
        gObj.updateVisibleExpandCollapseRows();
        gObj.notify(refreshExpandandCollapse, {
          rows: gObj.getRowsObject()
        });
      }
      if (this.parent.allowTextWrap && this.parent.height === "auto") {
        if (this.parent.getContentTable().scrollHeight > this.parent.getContent().clientHeight) {
          this.parent.scrollModule.setPadding();
        } else {
          this.parent.scrollModule.removePadding();
        }
      }
    };
    DetailRow2.prototype.getGridModel = function(gObj, rowObj, printMode) {
      var gridModel;
      if (gObj.isPrinting && rowObj.isExpand && gObj.expandedRows && gObj.expandedRows[rowObj.index] && gObj.expandedRows[rowObj.index].gridModel) {
        gObj.expandedRows[rowObj.index].gridModel.hierarchyPrintMode = gObj.childGrid.hierarchyPrintMode;
        gridModel = extend({}, gObj.expandedRows[rowObj.index].gridModel, gObj.childGrid, true);
      } else {
        if (gObj.isPrinting && gObj.childGrid.allowPaging) {
          gObj.childGrid.allowPaging = printMode === "CurrentPage";
        }
        gridModel = extend({}, {}, gObj.childGrid, true);
      }
      return gridModel;
    };
    DetailRow2.prototype.promiseResolve = function(grid) {
      var _this = this;
      return function() {
        grid.off(contentReady, _this.promiseResolve);
        grid.off(onEmpty, _this.promiseResolve);
        grid.notify(hierarchyPrint, {});
      };
    };
    DetailRow2.prototype.isDetailRow = function(row2) {
      return row2 && row2.classList.contains("e-detailrow");
    };
    DetailRow2.prototype.destroy = function() {
      var gridElement = this.parent.element;
      if (this.parent.isDestroyed || !gridElement || !gridElement.querySelector("." + gridHeader) && !gridElement.querySelector("." + gridContent)) {
        return;
      }
      EventHandler.remove(this.parent.element, "auxclick", this.auxilaryclickHandler);
      this.parent.off(click, this.clickHandler);
      this.parent.off(destroy, this.destroy);
      this.parent.off(keyPressed, this.keyPressHandler);
      this.parent.off(expandChildGrid, this.expand);
      this.parent.off(columnVisibilityChanged, this.refreshColSpan);
      this.parent.off(destroy, this.destroyChildGrids);
      this.parent.off(destroyChildGrid, this.destroyChildGrids);
      this.parent.off(destroy, this.detachDetailTemplate);
      this.parent.off(detachDetailTemplate, this.detachDetailTemplate);
    };
    DetailRow2.prototype.getTDfromIndex = function(index, className) {
      var tr = !isNullOrUndefined(index) ? this.parent.getDataRows()[parseInt(index.toString(), 10)] : void 0;
      if (tr && tr.querySelector(className)) {
        return tr.querySelector(className);
      }
      return null;
    };
    DetailRow2.prototype.expand = function(target) {
      if (!isNaN(target)) {
        target = this.getTDfromIndex(target, ".e-detailrowcollapse");
      }
      if (target && target.classList.contains("e-detailrowcollapse")) {
        this.toogleExpandcollapse(target);
      }
    };
    DetailRow2.prototype.collapse = function(target) {
      if (!isNaN(target)) {
        target = this.getTDfromIndex(target, ".e-detailrowexpand");
      }
      if (target && target.classList.contains("e-detailrowexpand")) {
        this.toogleExpandcollapse(target);
      }
    };
    DetailRow2.prototype.expandAll = function() {
      this.expandCollapse(true);
      this.parent.trigger(actionComplete, {
        requestType: "expandAllComplete",
        type: actionComplete,
        moduleObj: this
      });
    };
    DetailRow2.prototype.collapseAll = function() {
      this.expandCollapse(false);
      this.parent.trigger(actionComplete, {
        requestType: "collapseAllComplete",
        type: actionComplete,
        moduleObj: this
      });
    };
    DetailRow2.prototype.expandCollapse = function(isExpand) {
      var td;
      var rows = this.parent.getDataRows();
      for (var i = 0, len = rows.length; i < len; i++) {
        td = rows[parseInt(i.toString(), 10)].querySelector(".e-detailrowcollapse, .e-detailrowexpand");
        if (isExpand) {
          this.expand(td);
        } else {
          this.collapse(td);
        }
      }
    };
    DetailRow2.prototype.keyPressHandler = function(e) {
      var gObj = this.parent;
      var isMacLike = /(Mac)/i.test(navigator.platform);
      if (isMacLike && e.metaKey) {
        if (e.action === "downArrow") {
          e.action = "ctrlDownArrow";
        } else if (e.action === "upArrow") {
          e.action = "ctrlUpArrow";
        }
      }
      switch (e.action) {
        case "ctrlDownArrow":
          this.expandAll();
          break;
        case "ctrlUpArrow":
          this.collapseAll();
          break;
        case "altUpArrow":
        case "altDownArrow":
          var selected = gObj.allowSelection ? gObj.getSelectedRowIndexes() : [];
          if (selected.length) {
            var dataRow = gObj.getDataRows()[selected[selected.length - 1]];
            var td = dataRow.querySelector(".e-detailrowcollapse, .e-detailrowexpand");
            if (e.action === "altDownArrow") {
              this.expand(td);
            } else {
              this.collapse(td);
            }
          }
          break;
        case "enter":
          if (this.parent.isEdit) {
            return;
          }
          var element = this.focus.getFocusedElement();
          if (element && (element.classList.contains("e-icon-grightarrow") || element.classList.contains("e-icon-gdownarrow"))) {
            element = element.parentElement;
          }
          if (element && !element.classList.contains("e-detailrowcollapse") && !element.classList.contains("e-detailrowexpand")) {
            break;
          }
          this.toogleExpandcollapse(element);
          break;
      }
    };
    DetailRow2.prototype.refreshColSpan = function() {
      var detailrows = this.parent.contentModule.getTable().querySelectorAll("tr.e-detailrow");
      var colSpan = this.parent.getVisibleColumns().length;
      for (var i = 0; i < detailrows.length; i++) {
        detailrows[parseInt(i.toString(), 10)].querySelector(".e-detailcell").setAttribute("colspan", colSpan + "");
      }
    };
    DetailRow2.prototype.destroyChildGrids = function(args) {
      var gObj = this.parent;
      if (gObj.enableInfiniteScrolling && (gObj.childGrid || gObj.detailTemplate) && args.requestType === "infiniteScroll" && gObj.infiniteScrollSettings.enableCache) {
        var cacheIndex = args.direction === "down" ? args.currentPage - gObj.infiniteScrollSettings.initialBlocks : args.currentPage + gObj.infiniteScrollSettings.initialBlocks;
        var infiniteCache_1 = gObj.contentModule.infiniteCache[parseInt(cacheIndex.toString(), 10)];
        var detailRows_1 = infiniteCache_1.filter(function(data) {
          return data.isDetailRow && data.parentUid;
        });
        if (gObj.childGrid) {
          var _loop_1 = function(i2) {
            var detailRow = gObj.getContentTable().querySelector('[data-uid="' + detailRows_1[parseInt(i2.toString(), 10)].uid + '"]');
            var childGridElement = detailRow.querySelector(".e-childgrid");
            var childGridIndex = this_1.childRefs.findIndex(function(grid) {
              return grid.element.id === childGridElement.id;
            });
            if (!this_1.childRefs[parseInt(childGridIndex.toString(), 10)].isDestroyed) {
              this_1.childRefs[parseInt(childGridIndex.toString(), 10)].destroy();
              this_1.childRefs.splice(childGridIndex, 1);
            }
            var detailRowIndex = infiniteCache_1.indexOf(detailRows_1[parseInt(i2.toString(), 10)]);
            infiniteCache_1.splice(detailRowIndex, 1);
            infiniteCache_1[detailRowIndex - 1].childGrid = null;
            infiniteCache_1[detailRowIndex - 1].isExpand = false;
            detailRow.remove();
          };
          var this_1 = this;
          for (var i = 0; i < detailRows_1.length; i++) {
            _loop_1(i);
          }
        }
        if (gObj.detailTemplate && detailRows_1.length) {
          var args_1 = [];
          var _loop_2 = function(i2) {
            args_1.push({
              detailRow: gObj.getContentTable().querySelector('[data-uid="' + detailRows_1[parseInt(i2.toString(), 10)].uid + '"]'),
              detailRowObject: detailRows_1[parseInt(i2.toString(), 10)],
              parentRowObject: infiniteCache_1.find(function(parent) {
                return detailRows_1[parseInt(i2.toString(), 10)].parentUid === parent.uid;
              })
            });
          };
          for (var i = 0; i < detailRows_1.length; i++) {
            _loop_2(i);
          }
          this.parent.trigger(beforeDetailTemplateDetach, args_1, function() {
            for (var i2 = 0; i2 < detailRows_1.length; i2++) {
              var detailRow = gObj.getContentTable().querySelector('[data-uid="' + detailRows_1[parseInt(i2.toString(), 10)].uid + '"]');
              var detailRowIndex = infiniteCache_1.indexOf(detailRows_1[parseInt(i2.toString(), 10)]);
              infiniteCache_1.splice(detailRowIndex, 1);
              infiniteCache_1[detailRowIndex - 1].isExpand = false;
              detailRow.remove();
            }
          });
        }
        return;
      }
      var rows = this.parent.getRowsObject();
      for (var i = 0; i < rows.length; i++) {
        rows[parseInt(i.toString(), 10)].childGrid = null;
      }
      for (var i = 0; i < this.childRefs.length; i++) {
        if (!this.childRefs[parseInt(i.toString(), 10)].isDestroyed) {
          this.childRefs[parseInt(i.toString(), 10)].destroy();
        }
      }
      this.childRefs = [];
    };
    DetailRow2.prototype.detachDetailTemplate = function() {
      var gObj = this.parent;
      if (gObj.detailTemplate) {
        var rowsObject_1 = gObj.getRowsObject();
        var detailRows_2 = rowsObject_1.filter(function(data) {
          return data.isDetailRow && data.parentUid;
        });
        if (detailRows_2.length) {
          var args_2 = [];
          detailRows_2.map(function(data) {
            args_2.push({
              detailRow: gObj.getContentTable().querySelector('[data-uid="' + data.uid + '"]'),
              detailRowObject: data,
              parentRowObject: rowsObject_1.find(function(parent) {
                return data.parentUid === parent.uid;
              })
            });
          });
          gObj.trigger(beforeDetailTemplateDetach, args_2, function() {
            detailRows_2.map(function(data) {
              gObj.getContentTable().querySelector('[data-uid="' + data.uid + '"]').remove();
            });
          });
        }
      }
    };
    DetailRow2.prototype.getModuleName = function() {
      return "detailRow";
    };
    return DetailRow2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/toolbar.js
var Toolbar2 = (
  /** @class */
  function() {
    function Toolbar3(parent, serviceLocator) {
      this.predefinedItems = {};
      this.isSearched = false;
      this.items = ["Add", "Edit", "Update", "Delete", "Cancel", "Print", "Search", "ColumnChooser", "PdfExport", "ExcelExport", "CsvExport", "WordExport"];
      this.isRightToolbarMenu = false;
      this.parent = parent;
      this.gridID = parent.element.id;
      this.serviceLocator = serviceLocator;
      this.addEventListener();
    }
    Toolbar3.prototype.render = function() {
      this.l10n = this.serviceLocator.getService("localization");
      var preItems = ["Add", "Edit", "Update", "Delete", "Cancel", "Print", "PdfExport", "ExcelExport", "WordExport", "CsvExport"];
      var isAdaptive = this.parent.enableAdaptiveUI;
      var excludingItems = ["Edit", "Delete", "Update", "Cancel"];
      for (var _i = 0, preItems_1 = preItems; _i < preItems_1.length; _i++) {
        var item = preItems_1[_i];
        var itemStr = item.toLowerCase();
        var localeName = itemStr[0].toUpperCase() + itemStr.slice(1);
        this.predefinedItems["" + item] = {
          id: this.gridID + "_" + itemStr,
          prefixIcon: "e-" + itemStr,
          text: this.l10n.getConstant(localeName),
          tooltipText: this.l10n.getConstant(localeName)
        };
        if (isAdaptive) {
          this.predefinedItems["" + item].text = "";
          this.predefinedItems["" + item].visible = excludingItems.indexOf(item) === -1;
        }
      }
      this.predefinedItems.Search = {
        id: this.gridID + "_search",
        tooltipText: this.l10n.getConstant("Search"),
        align: "Right",
        cssClass: "e-search-wrapper",
        type: "Input"
      };
      this.isRightToolbarMenu = false;
      if (this.parent.enableAdaptiveUI && this.isResponsiveToolbarMenuItems(true) && (this.parent.rowRenderingMode === "Horizontal" || this.parent.rowRenderingMode === "Vertical" && !this.parent.allowFiltering && !this.parent.allowSorting)) {
        this.isRightToolbarMenu = true;
      }
      if (isAdaptive && this.isResponsiveToolbarMenuItems(false)) {
        this.predefinedItems.responsiveToolbarItems = {
          id: this.gridID + "_responsivetoolbaritems",
          cssClass: "e-responsive-toolbar-items e-menu-toolbar",
          suffixIcon: "e-responsivetoolbaritems-btn",
          align: this.isRightToolbarMenu ? "Left" : "Right"
        };
      } else {
        this.predefinedItems.ColumnChooser = {
          id: this.gridID + "_columnchooser",
          cssClass: "e-cc e-ccdiv e-cc-toolbar",
          suffixIcon: "e-columnchooser-btn",
          text: isAdaptive ? "" : this.l10n.getConstant("Columnchooser"),
          tooltipText: this.l10n.getConstant("Columnchooser"),
          align: "Right"
        };
      }
      if (this.parent.rowRenderingMode === "Vertical") {
        if (this.parent.allowFiltering && this.parent.filterSettings.type !== "FilterBar") {
          this.predefinedItems.responsiveFilter = {
            id: this.gridID + "_responsivefilter",
            cssClass: "e-gridresponsiveicons e-icons",
            suffixIcon: "e-resfilter-icon",
            tooltipText: this.l10n.getConstant("FilterIcon")
          };
        }
        if (this.parent.allowSorting) {
          this.predefinedItems.responsiveSort = {
            id: this.gridID + "_responsivesort",
            cssClass: "e-gridresponsiveicons e-icons",
            suffixIcon: "e-ressort-icon",
            tooltipText: this.l10n.getConstant("SortIcon")
          };
        }
      }
      if (this.parent.enableAdaptiveUI && this.parent.toolbar && this.parent.toolbar.some(function(item2) {
        return typeof item2 === "object" && item2.text === "Search" || item2 === "Search";
      })) {
        this.predefinedItems.responsiveBack = {
          id: this.gridID + "_responsiveback",
          cssClass: "e-gridresponsiveicons e-icons",
          suffixIcon: "e-resback-icon",
          visible: false
        };
      }
      this.createToolbar();
      if (this.parent.enableAdaptiveUI) {
        if (isNullOrUndefined(this.responsiveToolbarMenu)) {
          this.renderResponsiveToolbarpopup();
        }
        if (this.toolbar.element) {
          this.toolbar.refreshOverflow();
        }
      }
    };
    Toolbar3.prototype.isResponsiveToolbarMenuItems = function(isRight) {
      var items = isRight ? ["Add", "Edit", "Delete", "Search"] : ["Print", "ColumnChooser", "PdfExport", "ExcelExport", "CsvExport"];
      var toolbarItems = this.parent.toolbar || [];
      for (var i = 0; i < items.length; i++) {
        if (toolbarItems.indexOf(items[parseInt(i.toString(), 10)]) >= 0) {
          return isRight ? false : true;
        }
      }
      return isRight ? true : false;
    };
    Toolbar3.prototype.getToolbar = function() {
      return this.toolbar.element;
    };
    Toolbar3.prototype.destroy = function() {
      if (this.toolbar && !this.toolbar.isDestroyed) {
        if (this.responsiveToolbarMenu) {
          this.responsiveToolbarMenu.destroy();
        }
        this.toolbar.off("render-react-toolbar-template", this.addReactToolbarPortals);
        this.unWireEvent();
        this.removeEventListener();
        this.toolbar.created = null;
        this.toolbar.clicked = null;
        if (!this.toolbar.element) {
          this.parent.destroyTemplate(["toolbarTemplate"]);
          if (this.parent.isReact) {
            this.parent.renderTemplates();
          }
        } else {
          this.toolbar.destroy();
        }
        if (this.parent.isAngular) {
          var viewStr = "viewContainerRef";
          var registerTemp = "registeredTemplate";
          this.toolbar["" + viewStr] = null;
          this.toolbar["" + registerTemp] = null;
        }
        if (this.element.parentNode) {
          remove(this.element);
          this.toolbar = null;
        }
      }
    };
    Toolbar3.prototype.bindSearchEvents = function() {
      this.searchElement = select("#" + this.gridID + "_searchbar", this.element);
      this.wireEvent();
      this.refreshToolbarItems();
      if (this.parent.searchSettings) {
        this.updateSearchBox();
      }
    };
    Toolbar3.prototype.toolbarCreated = function(isNormal) {
      if (this.element.querySelector(".e-search-wrapper")) {
        if (!this.parent.enableAdaptiveUI || isNormal) {
          var classList2 = this.parent.cssClass ? "e-input-group e-search " + this.parent.cssClass : "e-input-group e-search";
          this.element.querySelector(".e-search-wrapper").innerHTML = '<div class="' + classList2 + '" role="search">                    <input id="' + this.gridID + '_searchbar" class="e-input e-search" name="input" type="search"                     placeholder= "' + this.l10n.getConstant("Search") + '"/>                    <span id="' + this.gridID + '_clearbutton" class="e-input-group-icon e-icons e-sicon"                     tabindex="-1" aria-label= "clear" role= "button" ></span>                    <span id="' + this.gridID + '_searchbutton" class="e-input-group-icon e-search-icon e-icons"                     tabindex="-1" title="' + this.l10n.getConstant("Search") + '" role= "search"></span>                     </div>';
        } else {
          this.element.querySelector(".e-search-wrapper").innerHTML = '<span id="' + this.gridID + '_clearbutton" class="e-input-group-icon e-icons e-sicon"                     tabindex="-1" role= "button" aria-label= "clear" ></span>                    <span id="' + this.gridID + '_searchbutton" class="e-input-group-icon e-search-icon e-icons"                     tabindex="-1" role= "button" title="' + this.l10n.getConstant("Search") + '"></span>                     </div>';
        }
        this.element.querySelector("#" + this.gridID + "_clearbutton").style.cursor = "default";
      }
      if (this.element.querySelector(".e-responsive-toolbar-items")) {
        this.element.querySelector(".e-responsive-toolbar-items").innerHTML = '<button id="' + this.gridID + '_responsivetoolbaritems" class="e-tbar-btn e-control e-btn e-lib e-icon-btn"                     type="button" data-ripple="true" tabindex="-1" data-tabindex="-1" aria-label="responsivetoolbaritems"                      aria-disabled="false" ><span class="e-btn-icon e-responsivetoolbaritems-btn e-icons"></span>';
        this.element.querySelector("#" + this.gridID + "_responsivetoolbaritems").style.width = "auto";
      }
      this.bindSearchEvents();
    };
    Toolbar3.prototype.createToolbar = function() {
      var items = this.getItems();
      this.toolbar = new Toolbar({
        items,
        clicked: this.toolbarClickHandler.bind(this),
        enablePersistence: this.parent.enablePersistence,
        enableRtl: this.parent.enableRtl,
        created: this.toolbarCreated.bind(this),
        cssClass: this.parent.cssClass ? this.parent.cssClass : ""
      });
      this.toolbar.isReact = this.parent.isReact;
      this.toolbar.on("render-react-toolbar-template", this.addReactToolbarPortals, this);
      var isStringTemplate = "isStringTemplate";
      this.toolbar["" + isStringTemplate] = true;
      var viewStr = "viewContainerRef";
      var registerTemp = "registeredTemplate";
      if (this.parent["" + viewStr]) {
        this.toolbar["" + registerTemp] = {};
        this.toolbar["" + viewStr] = this.parent["" + viewStr];
      }
      this.element = this.parent.createElement("div", {
        id: this.gridID + "_toolbarItems"
      });
      if (this.parent.enableAdaptiveUI) {
        this.element.classList.add("e-res-toolbar");
      }
      if (this.parent.toolbarTemplate) {
        var isVue = this.parent.isVue || this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isVue;
        if (typeof this.parent.toolbarTemplate === "string" && !(isVue && !document.querySelectorAll(this.parent.toolbarTemplate).length) && document.querySelector(this.parent.toolbarTemplate) && document.querySelector(this.parent.toolbarTemplate).tagName.toLowerCase() !== "script") {
          this.toolbar.appendTo(this.parent.toolbarTemplate);
          this.element = this.toolbar.element;
        } else {
          var isReactCompiler = this.parent.isReact && typeof this.parent.toolbarTemplate !== "string" && !(this.parent.toolbarTemplate.prototype && this.parent.toolbarTemplate.prototype.CSPTemplate);
          var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
          var ID = this.parent.element.id + "toolbarTemplate";
          if (isReactCompiler || isReactChild) {
            templateCompiler(this.parent.toolbarTemplate)({}, this.parent, "toolbarTemplate", ID, null, null, this.element);
            this.parent.renderTemplates();
          } else {
            appendChildren(this.element, templateCompiler(this.parent.toolbarTemplate)({}, this.parent, "toolbarTemplate", null, null, null, null, this.parent.root));
          }
        }
        this.element.classList.add("e-temp-toolbar");
      } else {
        this.toolbar.appendTo(this.element);
      }
      this.parent.element.insertBefore(this.element, this.parent.getHeaderContent());
      var tlbrLeftElement = this.element.querySelector(".e-toolbar-left");
      var tlbrCenterElement = this.element.querySelector(".e-toolbar-center");
      var tlbrRightElement = this.element.querySelector(".e-toolbar-right");
      var tlbrItems = this.element.querySelector(".e-toolbar-items");
      var tlbrElement = this.element;
      var tlbrLeftWidth = tlbrLeftElement ? tlbrLeftElement.clientWidth : 0;
      var tlbrCenterWidth = tlbrCenterElement ? tlbrCenterElement.clientWidth : 0;
      var tlbrRightWidth = tlbrRightElement ? tlbrRightElement.clientWidth : 0;
      var tlbrItemsWidth = tlbrItems ? tlbrItems.clientWidth : 0;
      var tlbrWidth = tlbrElement ? tlbrElement.clientWidth : 0;
      if (tlbrLeftWidth > tlbrWidth || tlbrCenterWidth > tlbrWidth || tlbrRightWidth > tlbrWidth || tlbrItemsWidth > tlbrWidth) {
        this.toolbar.refreshOverflow();
      }
    };
    Toolbar3.prototype.addReactToolbarPortals = function(args) {
      if (this.parent.isReact && args) {
        this.parent.portals = this.parent.portals.concat(args);
        this.parent.renderTemplates();
      }
    };
    Toolbar3.prototype.renderResponsiveSearch = function(isRender) {
      if (isRender) {
        this.toolbarCreated(true);
        this.refreshResponsiveToolbarItems(ResponsiveToolbarAction.isSearch);
        this.searchElement = select("#" + this.gridID + "_searchbar", this.element);
        var right = parentsUntil(this.searchElement, "e-toolbar-right");
        if (right) {
          right.classList.add("e-responsive-right");
        }
        if (this.parent.searchSettings) {
          this.updateSearchBox();
        }
      } else {
        this.refreshResponsiveToolbarItems(ResponsiveToolbarAction.isInitial);
      }
      if (this.toolbar.element && this.toolbar.element.querySelector(".e-hscroll")) {
        this.toolbar.refreshOverflow();
      }
      if (isRender) {
        this.searchBoxObj.searchFocus({
          target: this.searchElement
        });
        this.searchElement.focus();
      }
    };
    Toolbar3.prototype.refreshResponsiveToolbarItems = function(action) {
      if (action === ResponsiveToolbarAction.isInitial) {
        var id = this.parent.element.id;
        var items = [id + "_edit", id + "_delete"];
        var selectedRecords = this.parent.getSelectedRowIndexes();
        var excludingItems = [id + "_responsiveback", id + "_update", id + "_cancel"];
        for (var _i = 0, _a = this.toolbar.items; _i < _a.length; _i++) {
          var item = _a[_i];
          var toolbarEle = item.template && item.template.length ? parentsUntil(this.toolbar.element.querySelector("#" + item.id), "e-template").children[0] : this.toolbar.element.querySelector("#" + item.id);
          if (toolbarEle) {
            if (items.indexOf(item.id) > -1) {
              if (selectedRecords.length) {
                toolbarEle.parentElement.classList.remove("e-hidden");
              } else {
                toolbarEle.parentElement.classList.add("e-hidden");
              }
            } else {
              if (excludingItems.indexOf(item.id) === -1 || excludingItems.indexOf(item.id) > 0 && this.parent.isEdit) {
                toolbarEle.parentElement.classList.remove("e-hidden");
              } else {
                toolbarEle.parentElement.classList.add("e-hidden");
              }
            }
          }
        }
        if (this.searchElement) {
          var right = parentsUntil(this.searchElement, "e-toolbar-right");
          if (right) {
            right.classList.remove("e-responsive-right");
          }
          this.toolbarCreated(false);
          this.unWireEvent();
          this.searchElement = void 0;
        }
      }
      if (action === ResponsiveToolbarAction.isSearch) {
        var items = [this.parent.element.id + "_responsiveback", this.parent.element.id + "_search"];
        for (var _b = 0, _c = this.toolbar.items; _b < _c.length; _b++) {
          var item = _c[_b];
          var toolbarEle = this.toolbar.element.querySelector("#" + item.id);
          if (toolbarEle) {
            if (items.indexOf(item.id) > -1) {
              toolbarEle.parentElement.classList.remove("e-hidden");
            } else {
              toolbarEle.parentElement.classList.add("e-hidden");
            }
          }
        }
      }
    };
    Toolbar3.prototype.refreshToolbarItems = function(args) {
      var gObj = this.parent;
      var enableItems = [];
      var disableItems = [];
      var edit = gObj.editSettings;
      var hasData = gObj.currentViewData && gObj.currentViewData.length || gObj.editSettings.mode === "Batch" && !isNullOrUndefined(gObj.editModule) && gObj.editModule.getBatchChanges()[addedRecords].length;
      var addRow = edit.showAddNewRow && !gObj.element.querySelector(".e-editedrow");
      if (edit.allowAdding) {
        enableItems.push(this.gridID + "_add");
      } else {
        disableItems.push(this.gridID + "_add");
      }
      if (edit.allowEditing && hasData) {
        enableItems.push(this.gridID + "_edit");
      } else {
        disableItems.push(this.gridID + "_edit");
      }
      if (edit.allowDeleting && hasData) {
        enableItems.push(this.gridID + "_delete");
      } else {
        disableItems.push(this.gridID + "_delete");
      }
      if (gObj.allowPdfExport && hasData) {
        enableItems.push(this.gridID + "_pdfexport");
      } else {
        disableItems.push(this.gridID + "_pdfexport");
      }
      if (gObj.allowExcelExport && hasData) {
        enableItems.push(this.gridID + "_excelexport");
        enableItems.push(this.gridID + "_csvexport");
      } else {
        disableItems.push(this.gridID + "_excelexport");
        disableItems.push(this.gridID + "_csvexport");
      }
      if (gObj.showColumnChooser) {
        enableItems.push(this.gridID + "_columnchooser");
      } else {
        disableItems.push(this.gridID + "_columnchooser");
      }
      if (gObj.editSettings.mode === "Batch") {
        if (gObj.element.getElementsByClassName("e-updatedtd").length && (edit.allowAdding || edit.allowEditing)) {
          enableItems.push(this.gridID + "_update");
          enableItems.push(this.gridID + "_cancel");
        } else {
          disableItems.push(this.gridID + "_update");
          disableItems.push(this.gridID + "_cancel");
        }
      } else {
        if ((gObj.isEdit || edit.showAddNewRow) && (edit.allowAdding || edit.allowEditing)) {
          enableItems = addRow ? [this.gridID + "_update", this.gridID + "_cancel", this.gridID + "_edit", this.gridID + "_delete"] : [this.gridID + "_update", this.gridID + "_cancel"];
          disableItems = addRow ? [this.gridID + "_add"] : [this.gridID + "_add", this.gridID + "_edit", this.gridID + "_delete"];
        } else {
          disableItems.push(this.gridID + "_update");
          disableItems.push(this.gridID + "_cancel");
        }
      }
      this.enableItems(enableItems, true);
      this.enableItems(disableItems, false);
    };
    Toolbar3.prototype.getItems = function() {
      var items = [];
      var toolbarItems = this.parent.toolbar || [];
      if (typeof this.parent.toolbar === "string") {
        return [];
      }
      if (this.parent.rowRenderingMode === "Vertical") {
        if (this.parent.allowFiltering && this.parent.filterSettings.type !== "FilterBar") {
          items.push(this.getItemObject("responsiveFilter"));
        }
        if (this.parent.allowSorting) {
          items.push(this.getItemObject("responsiveSort"));
        }
      }
      for (var _i = 0, toolbarItems_1 = toolbarItems; _i < toolbarItems_1.length; _i++) {
        var item = toolbarItems_1[_i];
        if (this.parent.enableAdaptiveUI && ["Print", "ColumnChooser", "PdfExport", "ExcelExport", "CsvExport"].indexOf(item) !== -1) {
          continue;
        }
        if (this.parent.enableAdaptiveUI && (typeof item === "object" && item.text === "Search" || item === "Search")) {
          items.push(this.getItemObject("responsiveBack"));
        }
        switch (typeof item) {
          case "number":
            items.push(this.getItemObject(this.items[item]));
            break;
          case "string":
            items.push(this.getItemObject(item));
            break;
          default:
            items.push(this.getItem(item));
        }
      }
      if (this.parent.enableAdaptiveUI && this.isResponsiveToolbarMenuItems(false)) {
        items.push(this.getItemObject("responsiveToolbarItems"));
      }
      return items;
    };
    Toolbar3.prototype.getItem = function(itemObject) {
      var item = this.predefinedItems[itemObject.text];
      return item ? extend(item, item, itemObject) : itemObject;
    };
    Toolbar3.prototype.getItemObject = function(itemName) {
      return this.predefinedItems["" + itemName] || {
        text: itemName,
        id: this.gridID + "_" + itemName
      };
    };
    Toolbar3.prototype.enableItems = function(items, isEnable) {
      for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
        var item = items_1[_i];
        var element = select("#" + item, this.element);
        if (element) {
          this.toolbar.enableItems(element.closest(".e-toolbar-item"), isEnable);
        }
      }
    };
    Toolbar3.prototype.toolbarClickHandler = function(args) {
      var _this = this;
      var gObj = this.parent;
      var gID = this.gridID;
      var originalEvent = args.originalEvent;
      if (this.parent.enableAdaptiveUI && args.item.id === gID + "_responsivetoolbaritems") {
        this.openResponsiveToolbarMenuPopup(originalEvent, args.item.id);
      } else {
        extend(args, {
          cancel: false
        });
        var newArgs = args;
        gObj.trigger(toolbarClick, newArgs, function(toolbarargs) {
          toolbarargs.originalEvent = toolbarargs.originalEvent ? toolbarargs.originalEvent : originalEvent;
          if (!toolbarargs.cancel) {
            switch (!isNullOrUndefined(toolbarargs.item) && toolbarargs.item.id) {
              case gID + "_print":
                gObj.print();
                break;
              case gID + "_edit":
                gObj.startEdit();
                break;
              case gID + "_update":
                gObj.endEdit();
                break;
              case gID + "_cancel":
                gObj.closeEdit();
                break;
              case gID + "_add":
                gObj.addRecord();
                break;
              case gID + "_delete":
                gObj.deleteRecord();
                break;
              case gID + "_search":
                if (toolbarargs.originalEvent.target.id === gID + "_searchbutton" && _this.searchElement) {
                  _this.search();
                } else if (gObj.enableAdaptiveUI && !_this.searchElement && (toolbarargs.originalEvent.target.classList.contains("e-search-wrapper") || toolbarargs.originalEvent.target.id === gID + "_searchbutton")) {
                  _this.renderResponsiveSearch(true);
                } else if (toolbarargs.originalEvent.target.classList.contains("e-clear-icon") && toolbarargs.originalEvent.target.id === gID + "_clearbutton" && _this.searchElement) {
                  _this.searchElement.value = "";
                  if (_this.searchElement) {
                    _this.sIcon = _this.searchElement.parentElement.querySelector(".e-sicon");
                    _this.sIcon.classList.remove("e-clear-icon");
                    _this.sIcon.removeAttribute("title");
                    _this.sIcon.style.cursor = "default";
                  }
                  if (_this.isSearched || _this.parent.searchSettings.key.length) {
                    _this.parent.search(_this.searchElement.value);
                    _this.isSearched = false;
                  }
                }
                break;
              case gID + "_columnchooser":
                if (_this.parent.enableAdaptiveUI) {
                  gObj.showResponsiveCustomColumnChooser();
                } else {
                  var tarElement = _this.parent.element.querySelector(".e-ccdiv");
                  var y = tarElement.getBoundingClientRect().top;
                  var x = tarElement.getBoundingClientRect().left;
                  var targetEle = toolbarargs.originalEvent.target;
                  y = tarElement.getBoundingClientRect().top + tarElement.offsetTop;
                  gObj.createColumnchooser(x, y, targetEle);
                }
                break;
              case gID + "_responsivefilter":
                gObj.notify(renderResponsiveChangeAction, {
                  action: 3
                });
                gObj.showResponsiveCustomFilter();
                break;
              case gID + "_responsivesort":
                gObj.notify(renderResponsiveChangeAction, {
                  action: 2
                });
                gObj.showResponsiveCustomSort();
                break;
              case gID + "_responsiveback":
                _this.renderResponsiveSearch(false);
                _this.toolbar.refreshOverflow();
                break;
            }
          }
        });
      }
    };
    Toolbar3.prototype.openResponsiveToolbarMenuPopup = function(e, id) {
      var pos = {
        top: 0,
        left: 0
      };
      this.toolbarMenuElement.style.cssText = "display:block;visibility:hidden";
      var elePos = this.toolbarMenuElement.getBoundingClientRect();
      var gClient = this.parent.element.getBoundingClientRect();
      this.toolbarMenuElement.style.cssText = "display:none;visibility:visible";
      var target;
      if (isNullOrUndefined(e)) {
        target = this.parent.element.querySelector("#" + id);
      } else {
        target = e.target;
      }
      if (this.parent.enableRtl) {
        pos = calculatePosition(target, "left", "bottom");
        if (this.isRightToolbarMenu) {
          pos.left -= elePos.width;
        }
      } else {
        pos = calculatePosition(target, "right", "bottom");
        if (!this.isRightToolbarMenu) {
          pos.left -= elePos.width;
        }
        if (pos.left + elePos.width + 1 >= gClient.right) {
          pos.left -= 35;
        }
      }
      this.responsiveToolbarMenu["open"](pos.top, pos.left);
      if (e && e.preventDefault) {
        e.preventDefault();
      }
      applyBiggerTheme(this.parent.element, this.responsiveToolbarMenu.element.parentElement);
    };
    Toolbar3.prototype.getMenuItems = function() {
      var items = [];
      var toolbarItems = this.parent.toolbar || [];
      for (var _i = 0, toolbarItems_2 = toolbarItems; _i < toolbarItems_2.length; _i++) {
        var item = toolbarItems_2[_i];
        if (typeof item === "string" && (item === "ColumnChooser" || item === "PdfExport" || item === "ExcelExport" || item === "CsvExport" || item === "Print")) {
          items.push({
            text: this.getLocaleText(item),
            id: this.gridID + "_" + item.toLowerCase(),
            iconCss: "e-btn-icon e-" + item.toLowerCase() + " e-icons"
          });
        }
      }
      return items;
    };
    Toolbar3.prototype.getLocaleText = function(item) {
      var title;
      if (item === "ColumnChooser") {
        title = this.l10n.getConstant("Columnchooser");
      } else if (item === "PdfExport") {
        title = this.l10n.getConstant("Pdfexport");
      } else if (item === "ExcelExport") {
        title = this.l10n.getConstant("Excelexport");
      } else if (item === "CsvExport") {
        title = this.l10n.getConstant("Csvexport");
      } else if (item === "Print") {
        title = this.l10n.getConstant("Print");
      }
      return title;
    };
    Toolbar3.prototype.renderResponsiveToolbarpopup = function() {
      this.l10n = this.serviceLocator.getService("localization");
      this.toolbarMenuElement = this.parent.createElement("ul", {
        id: this.gridID + "__toolbaritemsmenu",
        className: "e-responsivetoolbar-menu"
      });
      this.element.setAttribute("aria-label", this.l10n.getConstant("ToolbarMenuDialogARIA"));
      this.parent.element.appendChild(this.toolbarMenuElement);
      this.responsiveToolbarMenu = new ContextMenu({
        cssClass: this.parent.cssClass ? "e-grid-toolbarmenu e-bigger " + this.parent.cssClass : "e-grid-toolbarmenu e-bigger",
        enableRtl: this.parent.enableRtl,
        enablePersistence: this.parent.enablePersistence,
        locale: this.parent.locale,
        beforeOpen: this.beforeOpenResponsiveToolbarMenuItem.bind(this),
        items: this.getMenuItems(),
        select: this.ResponsiveToolbarMenuItemClick.bind(this)
      });
      this.responsiveToolbarMenu.appendTo(this.toolbarMenuElement);
    };
    Toolbar3.prototype.ResponsiveToolbarMenuItemClick = function(args) {
      var _this = this;
      var gObj = this.parent;
      var element = args.element;
      args.item.id = element.id;
      var newArgs = {
        cancel: false,
        name: "clicked",
        item: args.item,
        originalEvent: args.event
      };
      gObj.trigger(toolbarClick, newArgs, function(toolbarargs) {
        if (!toolbarargs.cancel) {
          switch (!isNullOrUndefined(toolbarargs.item) && toolbarargs.item.id) {
            case _this.gridID + "_columnchooser":
              gObj.notify(renderResponsiveChangeAction, {
                action: 5
              });
              gObj.showResponsiveCustomColumnChooser();
              break;
            case _this.gridID + "_print":
              gObj.print();
              break;
          }
        }
      });
    };
    Toolbar3.prototype.beforeOpenResponsiveToolbarMenuItem = function() {
      var _this = this;
      var toolbarItems = this.parent.toolbar || [];
      var responsiveMenuItems = [{
        key: "PdfExport",
        enabled: this.parent.allowPdfExport
      }, {
        key: "ExcelExport",
        enabled: this.parent.allowExcelExport
      }, {
        key: "CsvExport",
        enabled: this.parent.allowExcelExport
      }, {
        key: "ColumnChooser",
        enabled: this.parent.showColumnChooser
      }];
      var enableItems = [];
      var disableItems = [];
      responsiveMenuItems.forEach(function(item) {
        if (toolbarItems.indexOf(item.key) !== -1) {
          var localeText = _this.getLocaleText(item.key);
          if (item.enabled) {
            enableItems.push(localeText);
          } else {
            disableItems.push(localeText);
          }
        }
      });
      this.responsiveToolbarMenu.enableItems(enableItems, true);
      this.responsiveToolbarMenu.enableItems(disableItems, false);
    };
    Toolbar3.prototype.modelChanged = function(e) {
      if (e.module === "edit") {
        this.refreshToolbarItems();
      }
    };
    Toolbar3.prototype.onPropertyChanged = function(e) {
      if (e.module !== this.getModuleName() || !this.parent.toolbar) {
        return;
      }
      if (this.element) {
        remove(this.element);
      }
      this.render();
    };
    Toolbar3.prototype.keyUpHandler = function(e) {
      if (e.keyCode === 13) {
        this.parent.searchModule.refreshSearch = false;
        this.search();
      }
      if (this.searchElement) {
        this.sIcon = this.searchElement.parentElement.querySelector(".e-sicon");
        if (this.searchElement.value.length && !isNullOrUndefined(this.sIcon)) {
          this.sIcon.classList.add("e-clear-icon");
          this.sIcon.setAttribute("title", this.l10n.getConstant("Clear"));
          this.sIcon.style.cursor = "pointer";
        } else {
          this.sIcon.classList.remove("e-clear-icon");
          this.sIcon.removeAttribute("title");
          this.sIcon.style.cursor = "default";
        }
      }
    };
    Toolbar3.prototype.search = function() {
      this.isSearched = true;
      this.parent.search(this.searchElement.value);
    };
    Toolbar3.prototype.updateSearchBox = function() {
      if (this.searchElement) {
        this.searchElement.value = this.parent.searchSettings.key;
      }
    };
    Toolbar3.prototype.wireEvent = function() {
      if (this.searchElement) {
        this.searchBoxObj = new SearchBox(this.searchElement, this.serviceLocator);
        EventHandler.add(this.searchElement, "keyup", this.keyUpHandler, this);
        this.searchBoxObj.wireEvent();
      }
      EventHandler.add(this.element, "focusin", this.onFocusIn, this);
      EventHandler.add(this.element, "focusout", this.onFocusOut, this);
    };
    Toolbar3.prototype.unWireEvent = function() {
      if (this.searchElement) {
        EventHandler.remove(this.searchElement, "keyup", this.keyUpHandler);
        this.searchBoxObj.unWireEvent();
      }
      EventHandler.remove(this.element, "focusin", this.onFocusIn);
      EventHandler.remove(this.element, "focusout", this.onFocusOut);
    };
    Toolbar3.prototype.onFocusIn = function(e) {
      var currentInfo = this.parent.focusModule.currentInfo;
      if (currentInfo && currentInfo.element) {
        removeClass([currentInfo.element, currentInfo.elementToFocus], ["e-focused", "e-focus"]);
        currentInfo.element.tabIndex = -1;
      }
      e.target.tabIndex = 0;
    };
    Toolbar3.prototype.onFocusOut = function(e) {
      e.target.tabIndex = -1;
      if (e.target && e.target.id === this.parent.element.id + "_searchbar" && !(e.relatedTarget && (e.relatedTarget.id === this.parent.element.id + "_clearbutton" || e.relatedTarget.id === this.parent.element.id + "_searchbutton"))) {
        this.parent.searchModule.refreshSearch = false;
        this.search();
      }
    };
    Toolbar3.prototype.setFocusToolbarItem = function(element) {
      var elementToFocus = element.querySelector(".e-btn,.e-input,.e-toolbar-item-focus");
      if (!elementToFocus && this.parent.enableAdaptiveUI && !this.searchElement && element.classList.contains("e-search-wrapper")) {
        elementToFocus = element.querySelector("#" + this.gridID + "_searchbutton");
      }
      elementToFocus.focus();
    };
    Toolbar3.prototype.getFocusableToolbarItems = function() {
      var getFocusToolbarElements = [].slice.call(this.element.querySelectorAll(".e-toolbar-item:not(.e-overlay):not(.e-hidden)"));
      var getFocusToolbarItems = [];
      for (var i = 0; i < getFocusToolbarElements.length; i++) {
        if (!isNullOrUndefined(getFocusToolbarElements[parseInt(i.toString(), 10)].querySelector(".e-btn,.e-input,.e-toolbar-item-focus"))) {
          getFocusToolbarItems.push(getFocusToolbarElements[parseInt(i.toString(), 10)]);
        }
      }
      return getFocusToolbarItems;
    };
    Toolbar3.prototype.keyPressedHandler = function(e) {
      if (e.target && parentsUntil(e.target, "e-toolbar-item")) {
        var targetParent = parentsUntil(e.target, "e-toolbar-item");
        var focusableToolbarItems = this.getFocusableToolbarItems();
        if (e.action === "tab" || e.action === "shiftTab") {
          if (e.action === "tab" && targetParent === focusableToolbarItems[focusableToolbarItems.length - 1] || e.action === "shiftTab" && targetParent === focusableToolbarItems[0]) {
            return;
          }
          for (var i = 0; i < focusableToolbarItems.length; i++) {
            if (targetParent === focusableToolbarItems[parseInt(i.toString(), 10)]) {
              e.preventDefault();
              var index = e.action === "tab" ? i + 1 : i - 1;
              this.setFocusToolbarItem(focusableToolbarItems[parseInt(index.toString(), 10)]);
              return;
            }
          }
        }
        if (e.action === "enter") {
          if (this.parent.enableAdaptiveUI && !this.searchElement && e.target.id === this.gridID + "_searchbutton") {
            this.renderResponsiveSearch(true);
          }
        }
      }
    };
    Toolbar3.prototype.reRenderToolbar = function() {
      if (this.element) {
        remove(this.element);
      }
      this.render();
    };
    Toolbar3.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.evtHandlers = [{
        event: setFullScreenDialog,
        handler: this.reRenderToolbar
      }, {
        event: initialEnd,
        handler: this.render
      }, {
        event: uiUpdate,
        handler: this.onPropertyChanged
      }, {
        event: inBoundModelChanged,
        handler: this.updateSearchBox.bind(this)
      }, {
        event: modelChanged,
        handler: this.refreshToolbarItems
      }, {
        event: toolbarRefresh,
        handler: this.refreshToolbarItems
      }, {
        event: inBoundModelChanged,
        handler: this.modelChanged
      }, {
        event: dataBound,
        handler: this.refreshToolbarItems
      }, {
        event: click,
        handler: this.removeResponsiveSearch
      }, {
        event: rowModeChange,
        handler: this.reRenderToolbar
      }, {
        event: destroy,
        handler: this.destroy
      }, {
        event: keyPressed,
        handler: this.keyPressedHandler
      }];
      addRemoveEventListener(this.parent, this.evtHandlers, true, this);
      this.rowSelectedFunction = this.rowSelected.bind(this);
      this.rowDeSelectedFunction = this.rowSelected.bind(this);
      this.parent.addEventListener(rowSelected, this.rowSelectedFunction);
      this.parent.addEventListener(rowDeselected, this.rowDeSelectedFunction);
    };
    Toolbar3.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      addRemoveEventListener(this.parent, this.evtHandlers, false);
      this.parent.removeEventListener(rowSelected, this.rowSelectedFunction);
      this.parent.removeEventListener(rowDeselected, this.rowDeSelectedFunction);
    };
    Toolbar3.prototype.removeResponsiveSearch = function(e) {
      var target = e.target;
      var isSearch = target.classList.contains("e-search-icon") || target.classList.contains("e-search-wrapper");
      if (this.parent.enableAdaptiveUI && !isSearch && this.searchElement && !parentsUntil(e.target, "e-res-toolbar")) {
        this.renderResponsiveSearch(false);
      }
    };
    Toolbar3.prototype.rowSelected = function() {
      if (this.parent.enableAdaptiveUI && this.toolbar.element) {
        this.refreshResponsiveToolbarItems(ResponsiveToolbarAction.isInitial);
        this.toolbar.refreshOverflow();
      }
    };
    Toolbar3.prototype.getModuleName = function() {
      return "toolbar";
    };
    return Toolbar3;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/footer-renderer.js
var __extends34 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var FooterRenderer = (
  /** @class */
  function(_super) {
    __extends34(FooterRenderer2, _super);
    function FooterRenderer2(gridModule, serviceLocator) {
      var _this = _super.call(this, gridModule, serviceLocator) || this;
      _this.aggregates = {};
      _this.parent = gridModule;
      _this.locator = serviceLocator;
      _this.modelGenerator = new SummaryModelGenerator(_this.parent);
      _this.addEventListener();
      return _this;
    }
    FooterRenderer2.prototype.renderPanel = function() {
      var div = this.parent.createElement("div", {
        className: gridFooter
      });
      var innerDiv = this.parent.createElement("div", {
        className: "e-summarycontent"
      });
      div.appendChild(innerDiv);
      this.setPanel(div);
      if (this.parent.getPager() != null) {
        this.parent.element.insertBefore(div, this.parent.getPager());
      } else {
        this.parent.element.appendChild(div);
      }
    };
    FooterRenderer2.prototype.renderTable = function() {
      var innerDiv = this.createContentTable("_footer_table");
      var table2 = innerDiv.querySelector("." + table);
      var tFoot = this.parent.createElement("tfoot");
      table2.appendChild(tFoot);
      this.setTable(table2);
    };
    FooterRenderer2.prototype.renderSummaryContent = function(e, table2, cStart, cEnd) {
      var input = this.parent.dataSource instanceof Array ? !this.parent.getDataModule().isRemote() && this.parent.parentDetails ? this.getData() : this.parent.dataSource : this.parent.currentViewData;
      var summaries = this.modelGenerator.getData();
      var dummies = isNullOrUndefined(cStart) ? this.modelGenerator.getColumns() : this.modelGenerator.getColumns(cStart);
      var rows = isNullOrUndefined(cStart) ? this.modelGenerator.generateRows(input, e || this.aggregates) : this.modelGenerator.generateRows(input, e || this.aggregates, cStart, cEnd);
      var fragment = document.createDocumentFragment();
      var rowrenderer = new RowRenderer(this.locator, null, this.parent);
      rowrenderer.element = this.parent.createElement("TR", {
        className: "e-summaryrow",
        attrs: {
          role: "row"
        }
      });
      for (var srow = 0, len = summaries.length; srow < len; srow++) {
        var row2 = rows[parseInt(srow.toString(), 10)];
        if (!row2) {
          continue;
        }
        var tr = rowrenderer.render(row2, dummies);
        if (tr.querySelectorAll(".e-leftfreeze").length && tr.querySelectorAll(".e-indentcell").length) {
          var td = tr.querySelectorAll(".e-indentcell");
          for (var i = 0; i < td.length; i++) {
            td[parseInt(i.toString(), 10)].classList.add("e-leftfreeze");
            applyStickyLeftRightPosition(td[parseInt(i.toString(), 10)], i * 30, this.parent.enableRtl, "Left");
          }
        }
        if (this.parent.isFrozenGrid() && tr.querySelectorAll(".e-summarycell").length) {
          removeClass([].slice.call(tr.querySelectorAll(".e-summarycell")), ["e-freezeleftborder", "e-freezerightborder"]);
        }
        fragment.appendChild(tr);
      }
      var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
      if ((this.parent.isReact || isReactChild) && summaries.length && this.parent.isInitialLoad) {
        this.parent.renderTemplates(function() {
          table2.tFoot.innerHTML = "";
          table2.tFoot.appendChild(fragment);
        });
      } else {
        table2.tFoot.appendChild(fragment);
      }
      this.aggregates = !isNullOrUndefined(e) ? e : this.aggregates;
    };
    FooterRenderer2.prototype.refresh = function(e) {
      var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
      if (!(this.parent.isReact || isReactChild) || !this.parent.isInitialLoad) {
        this.getTable().tFoot.innerHTML = "";
      }
      this.renderSummaryContent(e, this.getTable(), void 0, void 0);
      if (isNullOrUndefined(e) && this.parent.isAutoFitColumns) {
        this.parent.autoFitColumns();
      }
      this.onScroll();
    };
    FooterRenderer2.prototype.refreshCol = function() {
      var mheaderCol = this.parent.enableColumnVirtualization ? this.parent.headerModule.getColGroup() : this.parent.element.querySelector("." + gridHeader).querySelector(colGroup).cloneNode(true);
      this.getTable().replaceChild(mheaderCol, this.getColGroup());
      this.setColGroup(mheaderCol);
    };
    FooterRenderer2.prototype.onWidthChange = function(args) {
      this.getColFromIndex(args.index).style.width = formatUnit(args.width);
      if (this.parent.allowResizing && args.module === "resize") {
        this.updateFooterTableWidth(this.getTable());
      }
    };
    FooterRenderer2.prototype.onScroll = function(e) {
      if (e === void 0) {
        e = {
          left: this.parent.getContent().firstChild.scrollLeft
        };
      }
      this.getTable().parentElement.scrollLeft = e.left;
    };
    FooterRenderer2.prototype.getColFromIndex = function(index) {
      return this.getColGroup().children[parseInt(index.toString(), 10)];
    };
    FooterRenderer2.prototype.columnVisibilityChanged = function() {
      this.refresh();
    };
    FooterRenderer2.prototype.addEventListener = function() {
      this.evtHandlers = [{
        event: colGroupRefresh,
        handler: this.refreshCol
      }, {
        event: columnWidthChanged,
        handler: this.onWidthChange
      }, {
        event: scroll,
        handler: this.onScroll
      }, {
        event: columnVisibilityChanged,
        handler: this.columnVisibilityChanged
      }, {
        event: refreshFooterRenderer,
        handler: this.refreshFooterRenderer
      }];
      addRemoveEventListener(this.parent, this.evtHandlers, true, this);
    };
    FooterRenderer2.prototype.removeEventListener = function() {
      addRemoveEventListener(this.parent, this.evtHandlers, false);
    };
    FooterRenderer2.prototype.updateFooterTableWidth = function(tFoot) {
      var tHead = this.parent.getHeaderTable();
      if (tHead && tFoot) {
        tFoot.style.width = tHead.style.width;
      }
    };
    FooterRenderer2.prototype.refreshFooterRenderer = function(editedData) {
      var aggregates = this.onAggregates(editedData);
      this.refresh(aggregates);
    };
    FooterRenderer2.prototype.getIndexByKey = function(data, ds) {
      var key = this.parent.getPrimaryKeyFieldNames()[0];
      for (var i = 0; i < ds.length; i++) {
        if (ds[parseInt(i.toString(), 10)]["" + key] === data["" + key]) {
          return i;
        }
      }
      return -1;
    };
    FooterRenderer2.prototype.getData = function() {
      return this.parent.getDataModule().dataManager.executeLocal(this.parent.getDataModule().generateQuery(true));
    };
    FooterRenderer2.prototype.onAggregates = function(editedData) {
      editedData = editedData instanceof Array ? editedData : [];
      var field = this.parent.getPrimaryKeyFieldNames()[0];
      var dataSource = [];
      var isModified = false;
      var batchChanges = {};
      var gridData = "dataSource";
      var isFiltered = false;
      if (!(this.parent.renderModule.data.isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) && (this.parent.allowFiltering && this.parent.filterSettings.columns.length || this.parent.searchSettings.key.length)) {
        isFiltered = true;
      }
      var currentViewData;
      if (!isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) {
        currentViewData = this.parent.getCurrentViewRecords();
      } else {
        currentViewData = this.parent.dataSource instanceof Array ? isFiltered ? this.parent.getFilteredRecords() : this.parent.dataSource : this.parent.dataSource["" + gridData].json.length ? isFiltered ? this.parent.getFilteredRecords() : this.parent.dataSource["" + gridData].json : this.parent.getCurrentViewRecords();
      }
      if (this.parent.parentDetails && !this.parent.getDataModule().isRemote()) {
        currentViewData = this.getData();
      }
      if (this.parent.editModule) {
        batchChanges = this.parent.editModule.getBatchChanges();
      }
      if (Object.keys(batchChanges).length) {
        for (var i = 0; i < currentViewData.length; i++) {
          isModified = false;
          if (batchChanges[changedRecords].length && this.getIndexByKey(currentViewData[parseInt(i.toString(), 10)], batchChanges[changedRecords]) > -1) {
            isModified = true;
            dataSource.push(batchChanges[changedRecords][this.getIndexByKey(currentViewData[parseInt(i.toString(), 10)], batchChanges[changedRecords])]);
          }
          if (batchChanges[deletedRecords].length && this.getIndexByKey(currentViewData[parseInt(i.toString(), 10)], batchChanges[deletedRecords]) > -1) {
            isModified = true;
          } else if (!isModified) {
            dataSource.push(currentViewData[parseInt(i.toString(), 10)]);
          }
        }
        if (batchChanges[addedRecords].length) {
          for (var i = 0; i < batchChanges[addedRecords].length; i++) {
            dataSource.push(batchChanges[addedRecords][parseInt(i.toString(), 10)]);
          }
        }
      } else {
        if (editedData.length) {
          var data = iterateExtend(currentViewData);
          dataSource = data.map(function(item) {
            var idVal = DataUtil.getObject(field, item);
            var value;
            var hasVal = editedData.some(function(cItem) {
              value = cItem;
              return idVal === DataUtil.getObject(field, cItem);
            });
            return hasVal ? value : item;
          });
        } else {
          dataSource = currentViewData;
        }
      }
      var eData = editedData;
      if (eData.type && eData.type === "cancel") {
        dataSource = currentViewData;
      }
      var aggregate = {};
      var agrVal;
      var aggregateRows = this.parent.aggregates;
      for (var i = 0; i < aggregateRows.length; i++) {
        for (var j = 0; j < aggregateRows[parseInt(i.toString(), 10)].columns.length; j++) {
          var data = [];
          var type = aggregateRows[parseInt(i.toString(), 10)].columns[parseInt(j.toString(), 10)].type.toString();
          data = dataSource;
          var types = type.split(",").map(function(t) {
            return t.trim();
          });
          for (var _i = 0, types_1 = types; _i < types_1.length; _i++) {
            var aggregateType = types_1[_i];
            agrVal = calculateAggregate(aggregateType, data, aggregateRows[parseInt(i.toString(), 10)].columns[parseInt(j.toString(), 10)], this.parent);
            aggregate[aggregateRows[parseInt(i.toString(), 10)].columns[parseInt(j.toString(), 10)].field + " - " + aggregateType.toLowerCase()] = agrVal;
          }
        }
      }
      var result = {
        result: dataSource,
        count: dataSource.length,
        aggregates: aggregate
      };
      return result;
    };
    return FooterRenderer2;
  }(ContentRender)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/summary-cell-renderer.js
var __extends35 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var SummaryCellRenderer = (
  /** @class */
  function(_super) {
    __extends35(SummaryCellRenderer2, _super);
    function SummaryCellRenderer2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.element = _this.parent.createElement("TD", {
        className: "e-summarycell",
        attrs: {
          tabindex: "-1",
          role: "gridcell"
        }
      });
      return _this;
    }
    SummaryCellRenderer2.prototype.getValue = function(field, data, column) {
      var key = !isNullOrUndefined(column.type) ? column.field + " - " + (typeof column.type === "string" ? column.type.toLowerCase() : "") : column.columnName;
      return data[column.columnName] ? data[column.columnName]["" + key] : "";
    };
    SummaryCellRenderer2.prototype.evaluate = function(node, cell, data, attributes2) {
      var column = cell.column;
      this.parent.on(refreshAggregateCell, this.refreshWithAggregate(node, cell), this);
      if (!(column.footerTemplate || column.groupFooterTemplate || column.groupCaptionTemplate)) {
        if (this.parent.rowRenderingMode === "Vertical") {
          node.style.display = "none";
        }
        return true;
      } else {
        if (this.parent.rowRenderingMode === "Vertical") {
          node.classList.add("e-lastsummarycell");
        }
      }
      var tempObj = column.getTemplate(cell.cellType);
      var tempID = "";
      var gColumn = this.parent.getColumnByField(data[column.columnName].field);
      if (!isNullOrUndefined(gColumn)) {
        data[column.columnName].headerText = gColumn.headerText;
        if (gColumn.isForeignColumn()) {
          var fData = gColumn.columnData.filter(function(e) {
            return e[gColumn.foreignKeyField] === data[column.columnName].key;
          })[0];
          if (fData) {
            data[column.columnName].foreignKey = fData[gColumn.foreignKeyValue];
          }
        }
      }
      var isNotStringTemplate = column.footerTemplate ? typeof column.footerTemplate !== "string" && !(column.footerTemplate.prototype && column.footerTemplate.prototype.CSPTemplate) : column.groupFooterTemplate ? typeof column.groupFooterTemplate !== "string" && !(column.groupFooterTemplate.prototype && column.groupFooterTemplate.prototype.CSPTemplate) : column.groupCaptionTemplate ? typeof column.groupCaptionTemplate !== "string" && !(column.groupCaptionTemplate.prototype && column.groupCaptionTemplate.prototype.CSPTemplate) : false;
      var isReactCompiler = this.parent.isReact && isNotStringTemplate;
      var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact && isNotStringTemplate;
      var isReactPrintGrid = this.parent.printGridParent && this.parent.printGridParent.isReact;
      if (isReactCompiler || isReactChild || isReactPrintGrid) {
        var prop = data[column.columnName];
        if (tempObj.property === "groupCaptionTemplate" || tempObj.property === "groupFooterTemplate") {
          var groupKey = "groupKey";
          var key = "key";
          prop["" + groupKey] = prop["" + key];
        }
        tempObj.fn(prop, this.parent, tempObj.property, tempID, null, null, node);
        if (!this.parent.isInitialLoad) {
          this.parent.renderTemplates();
        }
      } else {
        appendChildren(node, tempObj.fn(data[column.columnName], this.parent, tempObj.property, tempID, null, null, null, this.parent.root));
      }
      return false;
    };
    SummaryCellRenderer2.prototype.refreshWithAggregate = function(node, cell) {
      var _this = this;
      var cellNode = cell;
      return function(args) {
        var cell2 = cellNode;
        var field = cell2.column.columnName ? cell2.column.columnName : null;
        var curCell = !isNullOrUndefined(field) ? args.cells.filter(function(cell3) {
          return cell3.column.columnName === field;
        })[0] : null;
        if (node.parentElement && node.parentElement.getAttribute("data-uid") === args.dataUid && field && curCell && field === curCell.column.columnName) {
          _this.refreshTD(node, curCell, args.data);
        }
      };
    };
    return SummaryCellRenderer2;
  }(CellRenderer)
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/aggregate.js
var Aggregate = (
  /** @class */
  function() {
    function Aggregate2(parent, locator) {
      this.parent = parent;
      this.locator = locator;
      this.addEventListener();
    }
    Aggregate2.prototype.getModuleName = function() {
      return "aggregate";
    };
    Aggregate2.prototype.initiateRender = function() {
      var _this = this;
      var cellFac = this.locator.getService("cellRendererFactory");
      var instance = new SummaryCellRenderer(this.parent, this.locator);
      var type = [CellType.Summary, CellType.CaptionSummary, CellType.GroupSummary];
      for (var i = 0; i < type.length; i++) {
        cellFac.addCellRenderer(type[parseInt(i.toString(), 10)], instance);
      }
      this.footerRenderer = new FooterRenderer(this.parent, this.locator);
      this.footerRenderer.renderPanel();
      this.footerRenderer.renderTable();
      var footerContent = this.footerRenderer.getPanel();
      if (this.parent.element.scrollHeight >= this.parent.getHeight(this.parent.height) && footerContent) {
        addClass([footerContent], ["e-footerpadding"]);
      }
      this.locator.register("footerRenderer", this.footerRenderer);
      var fn = function() {
        _this.prepareSummaryInfo();
        _this.parent.off(dataReady, fn);
      };
      this.parent.on(dataReady, fn, this);
      this.parent.on(dataReady, this.footerRenderer.refresh, this.footerRenderer);
    };
    Aggregate2.prototype.prepareSummaryInfo = function() {
      var _this = this;
      summaryIterator(this.parent.aggregates, function(column) {
        var cFormat = getValue("customFormat", column);
        if (!isNullOrUndefined(cFormat)) {
          column.setPropertiesSilent({
            format: cFormat
          });
        }
        if (typeof column.format === "object") {
          var valueFormatter = new ValueFormatter();
          column.setFormatter(valueFormatter.getFormatFunction(extend({}, column.format)));
        } else if (typeof column.format === "string") {
          var fmtr = _this.locator.getService("valueFormatter");
          column.setFormatter(fmtr.getFormatFunction({
            format: column.format
          }));
        }
        column.setPropertiesSilent({
          columnName: column.columnName || column.field
        });
      });
    };
    Aggregate2.prototype.onPropertyChanged = function(e) {
      if (e.module !== this.getModuleName()) {
        return;
      }
      if (isNullOrUndefined(this.footerRenderer)) {
        this.initiateRender();
      }
      this.prepareSummaryInfo();
      this.footerRenderer.refresh();
      var cModel = new CaptionSummaryModelGenerator(this.parent);
      var gModel = new GroupSummaryModelGenerator(this.parent);
      if (gModel.getData().length !== 0 || !cModel.isEmpty()) {
        this.parent.notify(modelChanged, {});
      }
    };
    Aggregate2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(initialEnd, this.initiateRender, this);
      this.parent.on(uiUpdate, this.onPropertyChanged, this);
      this.parent.on(refreshAggregates, this.refresh, this);
      this.parent.on(destroy, this.destroy, this);
    };
    Aggregate2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.footerRenderer.removeEventListener();
      this.parent.off(initialEnd, this.initiateRender);
      this.parent.off(dataReady, this.footerRenderer.refresh);
      this.parent.off(uiUpdate, this.onPropertyChanged);
      this.parent.off(refreshAggregates, this.refresh);
      this.parent.off(destroy, this.destroy);
      if (this.parent.element.querySelector("." + gridFooter)) {
        remove(this.parent.element.querySelector("." + gridFooter));
      }
    };
    Aggregate2.prototype.destroy = function() {
      this.removeEventListener();
    };
    Aggregate2.prototype.refresh = function(data, element) {
      var editedData = data instanceof Array ? data : [data];
      this.parent.notify(refreshFooterRenderer, editedData);
      if (element) {
        editedData.row = element;
      }
      if (this.parent.groupSettings.columns.length > 0) {
        this.parent.notify(groupAggregates, editedData);
      }
    };
    return Aggregate2;
  }()
);
function summaryIterator(aggregates, callback) {
  for (var i = 0; i < aggregates.length; i++) {
    for (var j = 0; j < aggregates[parseInt(i.toString(), 10)].columns.length; j++) {
      callback(aggregates[parseInt(i.toString(), 10)].columns[parseInt(j.toString(), 10)], aggregates[parseInt(i.toString(), 10)]);
    }
  }
}

// node_modules/@syncfusion/ej2-grids/src/grid/services/intersection-observer.js
var InterSectionObserver = (
  /** @class */
  function() {
    function InterSectionObserver2(element, options, movableEle) {
      var _this = this;
      this.fromWheel = false;
      this.touchMove = false;
      this.options = {};
      this.sentinelInfo = {
        "up": {
          check: function(rect, info) {
            var top = rect.top - _this.containerRect.top;
            var bottom = _this.containerRect.bottom > rect.bottom ? _this.containerRect.bottom - rect.bottom : 0;
            info.entered = top >= 0;
            return top + _this.options.pageHeight / 2 >= 0 || bottom > 0 && rect.bottom > 0;
          },
          axis: "Y"
        },
        "down": {
          check: function(rect, info) {
            var bottom = rect.bottom;
            info.entered = rect.bottom <= _this.containerRect.bottom;
            return bottom - _this.containerRect.top - _this.options.pageHeight / 2 <= _this.options.pageHeight / 2;
          },
          axis: "Y"
        },
        "right": {
          check: function(rect, info) {
            var right = rect.right;
            info.entered = right < _this.containerRect.right;
            return right - _this.containerRect.width <= _this.containerRect.right;
          },
          axis: "X"
        },
        "left": {
          check: function(rect, info) {
            var left = rect.left;
            info.entered = left > 0;
            return left + _this.containerRect.width >= _this.containerRect.left;
          },
          axis: "X"
        }
      };
      this.element = element;
      this.options = options;
      this.movableEle = movableEle;
    }
    InterSectionObserver2.prototype.observe = function(callback, onEnterCallback) {
      var _this = this;
      this.containerRect = this.options.container.getBoundingClientRect();
      EventHandler.add(this.options.container, "wheel", function() {
        return _this.fromWheel = true;
      }, this);
      EventHandler.add(this.options.container, "scroll", this.virtualScrollHandler(callback, onEnterCallback), this);
    };
    InterSectionObserver2.prototype.check = function(direction) {
      var info = this.sentinelInfo["" + direction];
      return info.check(this.element.getBoundingClientRect(), info);
    };
    InterSectionObserver2.prototype.virtualScrollHandler = function(callback, onEnterCallback) {
      var _this = this;
      var delay = Browser.info.name === "chrome" ? 200 : 100;
      var debounced100 = debounce(callback, delay);
      var debounced50 = debounce(callback, 50);
      this.options.prevTop = this.options.prevLeft = 0;
      return function(e) {
        var top = e.target.scrollTop;
        var left = e.target.scrollLeft;
        var direction = _this.options.prevTop < top ? "down" : "up";
        direction = _this.options.prevLeft === left ? direction : _this.options.prevLeft < left ? "right" : "left";
        _this.options.prevTop = top;
        _this.options.prevLeft = left;
        var current = _this.sentinelInfo["" + direction];
        if (_this.options.axes.indexOf(current.axis) === -1) {
          return;
        }
        _this.containerRect = _this.options.container.getBoundingClientRect();
        var check = _this.check(direction);
        if (current.entered) {
          onEnterCallback(_this.element, current, direction, {
            top,
            left
          }, _this.fromWheel, check);
        }
        if (check) {
          var fn = debounced100;
          if (current.axis === "X") {
            fn = debounced50;
          }
          fn({
            direction,
            sentinel: current,
            offset: {
              top,
              left
            },
            focusElement: document.activeElement
          });
        }
        _this.fromWheel = false;
      };
    };
    InterSectionObserver2.prototype.setPageHeight = function(value) {
      this.options.pageHeight = value;
    };
    return InterSectionObserver2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/services/virtual-row-model-generator.js
var VirtualRowModelGenerator = (
  /** @class */
  function() {
    function VirtualRowModelGenerator2(parent) {
      this.cOffsets = {};
      this.cache = {};
      this.rowCache = {};
      this.data = {};
      this.groups = {};
      this.currentInfo = {};
      this.prevInfo = {};
      this.parent = parent;
      this.model = this.parent.pageSettings;
      this.rowModelGenerator = this.parent.allowGrouping ? new GroupModelGenerator(this.parent) : new RowModelGenerator(this.parent);
    }
    VirtualRowModelGenerator2.prototype.columnInfiniteRows = function(data, e) {
      var result = [];
      if (e.requestType === "virtualscroll") {
        var rows = this.parent.getRowsObject();
        result.push.apply(result, this.rowModelGenerator.refreshRows(rows));
        if (this.parent.infiniteScrollSettings.enableCache) {
          var currentRowStartIndex = this.parent.frozenRows && this.parent.pageSettings.currentPage === 1 ? 0 : getRowIndexFromElement(this.parent.getContentTable().querySelector(".e-row:not(.e-addedrow)"));
          var newResult = result.slice(currentRowStartIndex, currentRowStartIndex + this.parent.pageSettings.pageSize * 3);
          if (this.parent.frozenRows && this.parent.pageSettings.currentPage !== 1) {
            newResult = result.slice(0, this.parent.frozenRows).concat(newResult);
          }
          result = newResult;
        }
      } else {
        result.push.apply(result, this.rowModelGenerator.generateRows(data, e));
      }
      return result;
    };
    VirtualRowModelGenerator2.prototype.generateRows = function(data, e) {
      var _this = this;
      if (this.parent.enableColumnVirtualization && this.parent.enableInfiniteScrolling) {
        return this.columnInfiniteRows(data, e);
      }
      var isManualRefresh = false;
      var info = e.virtualInfo = e.virtualInfo || (e.requestType === "sorting" || e.requestType === "delete") && checkIsVirtual(this.parent) && this.prevInfo || this.getData();
      this.prevInfo = info;
      var xAxis = info.sentinelInfo && info.sentinelInfo.axis === "X";
      var page = !xAxis && info.loadNext && !info.loadSelf ? info.nextInfo.page : info.page;
      var result = [];
      var indexes = this.getBlockIndexes(page);
      var loadedBlocks = [];
      if (this.currentInfo.blockIndexes) {
        indexes = info.blockIndexes = e.virtualInfo.blockIndexes = this.includePrevPage ? this.currentInfo.blockIndexes.slice(1) : this.currentInfo.blockIndexes.slice(0, this.currentInfo.blockIndexes.length - 1);
        isManualRefresh = true;
      }
      this.checkAndResetCache(e.requestType);
      if (isGroupAdaptive(this.parent) && this.parent.vcRows.length) {
        var dataRows = this.parent.vcRows.filter(function(row2) {
          return row2.isDataRow;
        });
        if (this.parent.isManualRefresh && dataRows.length === data["records"].length || !this.parent.isManualRefresh) {
          return result = this.parent.vcRows;
        }
      }
      if (this.parent.enableColumnVirtualization) {
        for (var i = 0; i < info.blockIndexes.length; i++) {
          if (this.isBlockAvailable(info.blockIndexes[parseInt(i.toString(), 10)])) {
            this.cache[info.blockIndexes[parseInt(i.toString(), 10)]] = this.rowModelGenerator.refreshRows(this.cache[info.blockIndexes[parseInt(i.toString(), 10)]]);
          }
        }
      }
      var values = info.blockIndexes;
      var _loop_1 = function(i2) {
        if (!this_1.isBlockAvailable(values[parseInt(i2.toString(), 10)])) {
          var startIdx = !isNullOrUndefined(this_1.startIndex) ? this_1.startIndex : this_1.getStartIndex(values[parseInt(i2.toString(), 10)], data);
          startIdx = isGroupAdaptive(this_1.parent) && !this_1.parent.vcRows.length && (e.requestType === "sorting" || e.requestType === "delete") ? 0 : startIdx;
          var rows = this_1.rowModelGenerator.generateRows(data, {
            virtualInfo: info,
            startIndex: startIdx
          });
          if (isGroupAdaptive(this_1.parent) && !this_1.parent.vcRows.length) {
            this_1.recordsCount = data.records.length;
            this_1.parent.vRows = rows;
            this_1.parent.vcRows = rows;
            this_1.parent.notify(refreshVirtualMaxPage, {});
          }
          var median = void 0;
          if (isGroupAdaptive(this_1.parent)) {
            this_1.getGroupVirtualRecordsByIndex(rows);
          } else {
            if (isManualRefresh) {
              this_1.setBlockForManualRefresh(this_1.cache, indexes, rows);
            } else if ((e.requestType === "sorting" || e.requestType === "delete") && checkIsVirtual(this_1.parent)) {
              var visiblePage = getVisiblePage(info.blockIndexes);
              var prevEndIndex = 0;
              for (var i_1 = 0; i_1 < visiblePage.length; i_1++) {
                var indexes_1 = this_1.getBlockIndexes(visiblePage[parseInt(i_1.toString(), 10)]);
                var startIndex = this_1.model.pageSize * i_1;
                var endIndex = startIndex + this_1.model.pageSize;
                if (this_1.parent.allowGrouping && this_1.parent.groupSettings.columns.length) {
                  var dataRowObject = rows.filter(function(row2) {
                    return row2.isDataRow;
                  }).slice(startIndex, endIndex);
                  startIndex = prevEndIndex;
                  endIndex = rows.indexOf(dataRowObject[dataRowObject.length - 1]) + 1;
                }
                var pageRecord = rows.slice(startIndex, endIndex);
                var median_1 = ~~Math.max(pageRecord.length, this_1.model.pageSize) / 2;
                if (!this_1.isBlockAvailable(indexes_1[0])) {
                  this_1.cache[indexes_1[0]] = pageRecord.slice(0, median_1);
                }
                if (!this_1.isBlockAvailable(indexes_1[1])) {
                  this_1.cache[indexes_1[1]] = pageRecord.slice(median_1);
                }
                prevEndIndex = endIndex;
              }
            } else {
              median = ~~Math.max(rows.length, this_1.model.pageSize) / 2;
              if (!this_1.isBlockAvailable(indexes[0])) {
                this_1.cache[indexes[0]] = rows.slice(0, median);
              }
              if (!this_1.isBlockAvailable(indexes[1])) {
                this_1.cache[indexes[1]] = rows.slice(median);
              }
            }
          }
        }
        if (this_1.parent.groupSettings.columns.length && !xAxis && this_1.cache[values[parseInt(i2.toString(), 10)]] && !this_1.parent.groupSettings.enableLazyLoading) {
          this_1.cache[values[parseInt(i2.toString(), 10)]] = this_1.updateGroupRow(this_1.cache[values[parseInt(i2.toString(), 10)]], values[parseInt(i2.toString(), 10)]);
        }
        if (!e.renderMovableContent && !e.renderFrozenRightContent && this_1.cache[values[parseInt(i2.toString(), 10)]]) {
          result.push.apply(result, this_1.cache[values[parseInt(i2.toString(), 10)]]);
          var DataRecord_1 = [];
          if (this_1.parent.enableVirtualization && this_1.parent.groupSettings.columns.length) {
            result.forEach(function(data2) {
              if (!DataRecord_1.includes(data2)) {
                DataRecord_1.push(data2);
              }
            });
          }
          result = DataRecord_1.length ? DataRecord_1 : result;
        }
        if (this_1.isBlockAvailable(values[parseInt(i2.toString(), 10)])) {
          loadedBlocks.push(values[parseInt(i2.toString(), 10)]);
        }
      };
      var this_1 = this;
      for (var i = 0; i < values.length; i++) {
        _loop_1(i);
      }
      if (isGroupAdaptive(this.parent) && this.parent.vcRows.length && e.requestType === "sorting" && e.scrollTop.top !== 0) {
        return result = this.parent.vcRows;
      }
      info.blockIndexes = loadedBlocks;
      var grouping = "records";
      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
        this.parent.currentViewData["" + grouping] = result.map(function(m) {
          return m.data;
        });
      } else {
        this.parent.currentViewData = result.map(function(m) {
          return m.data;
        });
      }
      if (e.requestType === "grouping") {
        this.parent.currentViewData["" + grouping] = this.parent.currentViewData["" + grouping].filter(function(item, index) {
          return _this.parent.currentViewData["" + grouping].indexOf(item) === index;
        });
      }
      if (isGroupAdaptive(this.parent) && this.parent.vcRows.length) {
        if (["save", "delete"].some(function(value) {
          return e.requestType === value;
        })) {
          return result = this.parent.vcRows;
        }
      }
      return result;
    };
    VirtualRowModelGenerator2.prototype.setBlockForManualRefresh = function(cache, blocks, rows) {
      var size = this.model.pageSize / 2;
      if (this.includePrevPage) {
        cache[blocks[0] - 1] = rows.slice(0, size);
        cache[blocks[0]] = rows.slice(size, size * 2);
        cache[blocks[1]] = rows.slice(size * 2, size * 3);
        cache[blocks[2]] = rows.slice(size * 3, size * 4);
      } else {
        cache[blocks[0]] = rows.slice(0, size);
        cache[blocks[1]] = rows.slice(size, size * 2);
        cache[blocks[2]] = rows.slice(size * 2, size * 3);
        cache[blocks[2] + 1] = rows.slice(size * 3, size * 4);
      }
    };
    VirtualRowModelGenerator2.prototype.getBlockIndexes = function(page) {
      return [page + (page - 1), page * 2];
    };
    VirtualRowModelGenerator2.prototype.getPage = function(block) {
      return block % 2 === 0 ? block / 2 : (block + 1) / 2;
    };
    VirtualRowModelGenerator2.prototype.isBlockAvailable = function(value) {
      return value in this.cache;
    };
    VirtualRowModelGenerator2.prototype.getData = function() {
      return {
        page: this.model.currentPage,
        blockIndexes: this.getBlockIndexes(this.model.currentPage),
        direction: "down",
        columnIndexes: this.parent.getColumnIndexesInView()
      };
    };
    VirtualRowModelGenerator2.prototype.getStartIndex = function(blk, data, full) {
      if (full === void 0) {
        full = true;
      }
      var page = this.getPage(blk);
      var even = blk % 2 === 0;
      var index = (page - 1) * this.model.pageSize;
      return full || !even ? index : index + ~~(this.model.pageSize / 2);
    };
    VirtualRowModelGenerator2.prototype.getColumnIndexes = function(content2) {
      var _this = this;
      if (content2 === void 0) {
        content2 = this.parent.getHeaderContent().querySelector("." + headerContent);
      }
      var indexes = [];
      var sLeft = content2.scrollLeft | 0;
      var keys = Object.keys(this.cOffsets);
      var cWidth = content2.getBoundingClientRect().width;
      sLeft = Math.min(this.cOffsets[keys.length - 1] - cWidth, sLeft);
      var calWidth = Browser.isDevice ? 2 * cWidth : cWidth / 2;
      var left = sLeft + cWidth + (sLeft === 0 ? calWidth : 0);
      var frzLeftWidth = 0;
      var diffWidth = sLeft - calWidth;
      if (this.parent.isFrozenGrid()) {
        frzLeftWidth = this.parent.leftrightColumnWidth("left");
        if (diffWidth > 0) {
          for (var i = this.parent.getVisibleFrozenLeftCount() - 1; i >= 0; i--) {
            if (diffWidth <= this.cOffsets[parseInt(i.toString(), 10)]) {
              frzLeftWidth = frzLeftWidth - this.cOffsets[parseInt(i.toString(), 10)];
              break;
            }
          }
        }
        if (this.parent.getFrozenMode() === leftRight) {
          var rightCol = this.parent.getVisibleFrozenRightCount();
          keys.splice(keys.length - 1 - rightCol, rightCol);
        }
      }
      var frozenLeftCount = this.parent.getVisibleFrozenLeftCount();
      keys.some(function(offset) {
        var iOffset = Number(offset);
        var offsetVal = _this.cOffsets["" + offset];
        var border = diffWidth < 0 && iOffset < frozenLeftCount || diffWidth + frzLeftWidth <= offsetVal && left + calWidth >= offsetVal;
        if (border) {
          indexes.push(iOffset);
        }
        return left + calWidth < offsetVal;
      });
      return indexes;
    };
    VirtualRowModelGenerator2.prototype.checkAndResetCache = function(action) {
      var actions = ["paging", "refresh", "sorting", "filtering", "searching", "grouping", "ungrouping", "reorder", "save", "delete"];
      var clear = actions.some(function(value) {
        return action === value;
      });
      if (clear) {
        this.cache = {};
        this.data = {};
        this.groups = {};
      }
      return clear;
    };
    VirtualRowModelGenerator2.prototype.refreshColOffsets = function() {
      var _this = this;
      var col = 0;
      this.cOffsets = {};
      var gLen = this.parent.groupSettings.columns.length;
      var cols = this.parent.getVisibleColumns();
      var cLen = cols.length;
      var isVisible = function(column) {
        return column.visible && (!_this.parent.groupSettings.showGroupedColumn ? _this.parent.groupSettings.columns.indexOf(column.field) < 0 : column.visible);
      };
      var c = this.parent.groupSettings.columns;
      for (var i = 0; i < c.length; i++) {
        this.cOffsets[parseInt(i.toString(), 10)] = (this.cOffsets[i - 1] | 0) + 30;
      }
      var blocks = Array.apply(null, Array(cLen)).map(function() {
        return col++;
      });
      for (var j = 0; j < blocks.length; j++) {
        blocks[parseInt(j.toString(), 10)] = blocks[parseInt(j.toString(), 10)] + gLen;
        this.cOffsets[blocks[parseInt(j.toString(), 10)]] = (this.cOffsets[blocks[parseInt(j.toString(), 10)] - 1] | 0) + (isVisible(cols[parseInt(j.toString(), 10)]) ? parseInt(cols[parseInt(j.toString(), 10)].width, 10) : 0);
      }
    };
    VirtualRowModelGenerator2.prototype.updateGroupRow = function(current, block) {
      var currentFirst = current[0];
      var rows = [];
      var keys = Object.keys(this.cache);
      for (var i = 0; i < keys.length; i++) {
        if (Number(keys[parseInt(i.toString(), 10)]) < block) {
          rows = rows.concat(this.cache[keys[parseInt(i.toString(), 10)]]);
        }
      }
      if (currentFirst && currentFirst.isDataRow || block % 2 === 0) {
        return current;
      }
      return this.iterateGroup(current, rows);
    };
    VirtualRowModelGenerator2.prototype.iterateGroup = function(current, rows) {
      var currentFirst = current[0];
      var offset = 0;
      if (currentFirst && currentFirst.isDataRow) {
        return current;
      }
      var isPresent = current.some(function(row2) {
        return rows.some(function(oRow, index) {
          var res = oRow && oRow.data.field !== void 0 && oRow.data.field === row2.data.field && oRow.data.key === row2.data.key;
          if (res) {
            offset = index;
          }
          return res;
        });
      });
      if (isPresent) {
        current.shift();
        current = this.iterateGroup(current, rows.slice(offset));
      }
      return current;
    };
    VirtualRowModelGenerator2.prototype.getRows = function() {
      var rows = [];
      var keys = Object.keys(this.cache);
      for (var i = 0; i < keys.length; i++) {
        rows = rows.concat(this.cache[keys[parseInt(i.toString(), 10)]]);
      }
      return rows;
    };
    VirtualRowModelGenerator2.prototype.generateCells = function(foreignKeyData2) {
      var cells = [];
      var cols = this.parent.columnModel;
      for (var i = 0; i < cols.length; i++) {
        cells.push(this.rowModelGenerator.generateCell(cols[parseInt(i.toString(), 10)], null, null, null, null, foreignKeyData2));
      }
      return cells;
    };
    VirtualRowModelGenerator2.prototype.getGroupVirtualRecordsByIndex = function(rows) {
      var blocks = this.parent.contentModule.getGroupedTotalBlocks();
      var blockSize = this.parent.contentModule.getBlockSize();
      if (Object.keys(this.cache).length === 0) {
        var countGroupRow = 0;
        for (var i = 1; i <= blocks; i++) {
          var count2 = 0;
          this.cache[parseInt(i.toString(), 10)] = [];
          for (var j = (i - 1) * blockSize + countGroupRow; j < rows.length; j++) {
            if (count2 === blockSize) {
              break;
            }
            this.cache[parseInt(i.toString(), 10)].push(rows[parseInt(j.toString(), 10)]);
            if (rows[parseInt(j.toString(), 10)].isDataRow) {
              count2++;
            }
            countGroupRow++;
          }
          countGroupRow -= count2;
        }
      }
    };
    return VirtualRowModelGenerator2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/virtual-content-renderer.js
var __extends36 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var VirtualContentRenderer = (
  /** @class */
  function(_super) {
    __extends36(VirtualContentRenderer2, _super);
    function VirtualContentRenderer2(parent, locator) {
      var _this = _super.call(this, parent, locator) || this;
      _this.prevHeight = 0;
      _this.startIndex = 0;
      _this.preStartIndex = 0;
      _this.preventEvent = false;
      _this.actions = ["filtering", "searching", "grouping", "ungrouping"];
      _this.offsets = {};
      _this.tmpOffsets = {};
      _this.virtualEle = new VirtualElementHandler();
      _this.offsetKeys = [];
      _this.isFocused = false;
      _this.isSelection = false;
      _this.isBottom = false;
      _this.isBottomNotify = false;
      _this.diff = 0;
      _this.heightChange = false;
      _this.isTop = false;
      _this.empty = void 0;
      _this.isCancel = false;
      _this.requestTypes = ["beginEdit", "cancel", "delete", "add", "save", "sorting"];
      _this.isNormaledit = _this.parent.editSettings.mode === "Normal";
      _this.virtualData = {};
      _this.virtualInfiniteData = {};
      _this.emptyRowData = {};
      _this.isContextMenuOpen = false;
      _this.isSelectionScroll = false;
      _this.validationCheck = false;
      _this.firstCellFocus = false;
      _this.prevPage = 0;
      _this.prevCurrentInfo = {};
      _this.locator = locator;
      _this.eventListener("on");
      _this.widthServices = locator.getService("widthService");
      _this.parent.on(columnVisibilityChanged, _this.setVisible, _this);
      _this.vgenerator = _this.generator;
      return _this;
    }
    VirtualContentRenderer2.prototype.renderTable = function() {
      this.header = this.locator.getService("rendererFactory").getRenderer(RenderType.Header);
      _super.prototype.renderTable.call(this);
      this.virtualEle.table = this.getTable();
      this.virtualEle.content = this.content = this.getPanel().querySelector("." + content);
      this.virtualEle.renderWrapper(this.parent.height);
      this.virtualEle.renderPlaceHolder();
      if (!(!this.parent.enableVirtualization && this.parent.enableColumnVirtualization)) {
        this.virtualEle.wrapper.style.position = "absolute";
      }
      var debounceEvent = this.parent.dataSource instanceof DataManager && !this.parent.dataSource.dataSource.offline;
      var opt = {
        container: this.content,
        pageHeight: this.getBlockHeight() * 2,
        debounceEvent,
        axes: this.parent.enableColumnVirtualization ? ["X", "Y"] : ["Y"]
      };
      this.observer = new InterSectionObserver(this.virtualEle.wrapper, opt);
    };
    VirtualContentRenderer2.prototype.renderEmpty = function(tbody2) {
      this.getTable().appendChild(tbody2);
      if (this.parent.frozenRows) {
        this.parent.getHeaderContent().querySelector(tbody).innerHTML = "";
      }
      this.virtualEle.adjustTable(0, 0);
    };
    VirtualContentRenderer2.prototype.getReorderedFrozenRows = function(args) {
      var blockIndex = args.virtualInfo.blockIndexes;
      var colsIndex = args.virtualInfo.columnIndexes;
      var page = args.virtualInfo.page;
      args.virtualInfo.blockIndexes = [1, 2];
      args.virtualInfo.page = 1;
      args.virtualInfo.columnIndexes = [];
      var recordslength = this.parent.getCurrentViewRecords().length;
      var firstRecords = this.parent.renderModule.data.dataManager.dataSource.json.slice(0, recordslength);
      var virtualRows = this.vgenerator.generateRows(firstRecords, args);
      args.virtualInfo.blockIndexes = blockIndex;
      args.virtualInfo.columnIndexes = colsIndex;
      args.virtualInfo.page = page;
      return virtualRows.splice(0, this.parent.frozenRows);
    };
    VirtualContentRenderer2.prototype.scrollListener = function(scrollArgs) {
      if (!this.parent.enableVirtualization && this.parent.enableColumnVirtualization && (scrollArgs.direction === "up" || scrollArgs.direction === "down") || this.isBottomNotify) {
        return;
      }
      this.scrollAfterEdit();
      if (this.parent.enablePersistence) {
        this.parent.scrollPosition = scrollArgs.offset;
      }
      if (this.preventEvent || this.parent.isDestroyed) {
        this.preventEvent = false;
        return;
      }
      if (isNullOrUndefined(document.activeElement)) {
        this.isFocused = false;
      } else {
        this.isFocused = this.content === closest(document.activeElement, "." + content) || this.content === document.activeElement;
      }
      if (this.parent.islazyloadRequest && scrollArgs.direction === "down") {
        this.parent.removeMaskRow();
        this.parent.islazyloadRequest = false;
        return;
      }
      var info = scrollArgs.sentinel;
      var viewInfo = this.currentInfo = this.getInfoFromView(scrollArgs.direction, info, scrollArgs.offset);
      if (isGroupAdaptive(this.parent)) {
        if (viewInfo.blockIndexes && this.prevInfo.blockIndexes.toString() === viewInfo.blockIndexes.toString()) {
          this.parent.removeMaskRow();
          return;
        } else {
          viewInfo.event = "refresh-virtual-block";
          if (!isNullOrUndefined(viewInfo.offsets)) {
            viewInfo.offsets.top = this.content.scrollTop;
          }
          this.parent.pageSettings.currentPage = viewInfo.page;
          if (this.parent.enableVirtualMaskRow) {
            this.parent.showMaskRow(info.axis);
            this.parent.addShimmerEffect();
          }
          if (this.parent.editSettings.showAddNewRow) {
            this.parent.closeEdit();
          }
          this.parent.notify(viewInfo.event, {
            requestType: "virtualscroll",
            virtualInfo: viewInfo,
            focusElement: scrollArgs.focusElement
          });
          return;
        }
      }
      if (this.prevInfo && (info.axis === "Y" && this.prevInfo.blockIndexes.toString() === viewInfo.blockIndexes.toString() || info.axis === "X" && this.prevInfo.columnIndexes.toString() === viewInfo.columnIndexes.toString() || this.parent.isFrozenGrid() && info.axis === "X" && this.parent.getVisibleFrozenLeftCount() >= viewInfo.columnIndexes[0] && this.prevInfo.columnIndexes.toString().includes(viewInfo.columnIndexes.toString()))) {
        this.parent.removeMaskRow();
        if (Browser.isIE) {
          this.parent.hideSpinner();
        }
        this.requestType = this.requestType === "virtualscroll" ? this.empty : this.requestType;
        if (info.axis === "Y") {
          this.restoreEdit();
        }
        if (this.parent.groupSettings.enableLazyLoading && this.prevInfo.blockIndexes[0] === 1 && viewInfo.blockIndexes[0] === 1 && scrollArgs.direction === "up") {
          this.virtualEle.adjustTable(0, viewInfo.offsets.top < this.offsets[1] ? 0 : this.getBlockHeight());
        }
        return;
      }
      this.parent.setColumnIndexesInView(this.parent.enableColumnVirtualization ? viewInfo.columnIndexes : []);
      if (!(!this.parent.enableVirtualization && this.parent.enableColumnVirtualization)) {
        this.parent.pageSettings.currentPage = viewInfo.loadNext && !viewInfo.loadSelf ? viewInfo.nextInfo.page : viewInfo.page;
      }
      this.requestType = "virtualscroll";
      if (this.parent.enableVirtualMaskRow) {
        this.parent.showMaskRow(info.axis);
        this.parent.addShimmerEffect();
      }
      this.parent.islazyloadRequest = false;
      if (this.parent.editSettings.showAddNewRow) {
        this.parent.closeEdit();
      }
      this.parent.notify(renderResponsiveColumnChooserDiv, {
        action: "clear"
      });
      if (!(!this.parent.isInitialLoad && this.parent.enablePersistence)) {
        if (this.prevPage === this.parent.pageSettings.currentPage && viewInfo.event === modelChanged) {
          this.currentInfo = this.prevCurrentInfo;
          return;
        }
        if (viewInfo.event === modelChanged) {
          this.prevPage = this.parent.pageSettings.currentPage;
          this.prevCurrentInfo = this.currentInfo;
        }
        this.isBottomNotify = this.isBottom && viewInfo.event === modelChanged;
        this.parent.notify(viewInfo.event, {
          requestType: "virtualscroll",
          virtualInfo: viewInfo,
          focusElement: scrollArgs.focusElement
        });
      }
      if (this.parent.enableColumnVirtualization && !this.parent.getContentTable().querySelector("tr.e-row")) {
        this.parent.removeMaskRow();
        this.appendContent(void 0, void 0, {
          requestType: "virtualscroll",
          virtualInfo: viewInfo,
          focusElement: scrollArgs.focusElement
        });
        this.prevInfo = viewInfo;
      }
    };
    VirtualContentRenderer2.prototype.block = function(blk) {
      return this.vgenerator.isBlockAvailable(blk);
    };
    VirtualContentRenderer2.prototype.getInfoFromView = function(direction, info, e) {
      var isBlockAdded = false;
      var tempBlocks = [];
      var infoType = {
        direction,
        sentinelInfo: info,
        offsets: e,
        startIndex: this.preStartIndex,
        endIndex: this.preEndIndex
      };
      infoType.page = this.getPageFromTop(e.top, infoType);
      infoType.blockIndexes = tempBlocks = this.vgenerator.getBlockIndexes(infoType.page);
      infoType.loadSelf = !this.vgenerator.isBlockAvailable(tempBlocks[infoType.block]);
      var blocks = this.ensureBlocks(infoType);
      if (this.activeKey === "upArrow" && infoType.blockIndexes.toString() !== blocks.toString()) {
        var newBlock = blocks[blocks.length - 1];
        if (infoType.blockIndexes.indexOf(newBlock) === -1) {
          isBlockAdded = true;
        }
      }
      if (!(!this.parent.enableVirtualization && this.parent.enableColumnVirtualization)) {
        infoType.blockIndexes = blocks;
      }
      infoType.loadNext = !blocks.filter(function(val) {
        return tempBlocks.indexOf(val) === -1;
      }).every(this.block.bind(this));
      infoType.event = infoType.loadNext || infoType.loadSelf ? modelChanged : refreshVirtualBlock;
      infoType.nextInfo = infoType.loadNext ? {
        page: Math.max(1, infoType.page + (direction === "down" ? 1 : -1))
      } : {};
      if (isBlockAdded) {
        infoType.blockIndexes = [infoType.blockIndexes[0] - 1, infoType.blockIndexes[0], infoType.blockIndexes[0] + 1];
      }
      if (this.activeKey === "downArrow" && !isNaN(this.rowIndex)) {
        var firstBlock = Math.ceil(this.rowIndex / this.getBlockSize());
        if (firstBlock !== 1 && (infoType.blockIndexes[1] !== firstBlock || infoType.blockIndexes.length < 3)) {
          infoType.blockIndexes = [firstBlock - 1, firstBlock, firstBlock + 1];
          if (infoType.loadNext) {
            var nextBlock = this.vgenerator.getBlockIndexes(infoType.nextInfo.page);
            var hasCommonValue = false;
            for (var i = 0; i < infoType.blockIndexes.length; i++) {
              for (var j = 0; j < nextBlock.length; j++) {
                if (infoType.blockIndexes[parseInt(i.toString(), 10)] === nextBlock[parseInt(j.toString(), 10)]) {
                  hasCommonValue = true;
                  break;
                }
              }
              if (hasCommonValue) {
                break;
              }
            }
            if (!hasCommonValue) {
              infoType.loadNext = false;
              infoType.nextInfo = {};
              infoType.event = refreshVirtualBlock;
            }
          }
        }
      }
      infoType.columnIndexes = info.axis === "X" ? this.vgenerator.getColumnIndexes() : this.parent.getColumnIndexesInView();
      if (this.parent.enableColumnVirtualization && info.axis === "X") {
        infoType.event = refreshVirtualBlock;
      }
      return infoType;
    };
    VirtualContentRenderer2.prototype.ensureBlocks = function(info) {
      var _this = this;
      var index = info.blockIndexes[info.block];
      var mIdx;
      var old = index;
      var max = Math.max;
      var indexes = info.direction === "down" ? [max(index, 1), ++index, ++index] : [max(index - 1, 1), index, index + 1];
      this.prevInfo = this.prevInfo || this.vgenerator.getData();
      indexes = indexes.filter(function(val, ind) {
        return indexes.indexOf(val) === ind;
      });
      var preventSelf = false;
      if (checkIsVirtual(this.parent) && info.direction === "up" && ((info.page + 1 === this.prevInfo.page || info.page === this.prevInfo.page) && (info.block === 1 || info.block === 0 && info.page === 1) || info.page === this.prevInfo.page && indexes.length === 2) && this.vgenerator.isBlockAvailable(info.blockIndexes[1] + 1)) {
        preventSelf = info.page + 1 === this.prevInfo.page && info.block === 1;
        index += 1;
        indexes = [max(index - 1, 1), index, index + 1];
      }
      if (this.prevInfo.blockIndexes.toString() === indexes.toString()) {
        return indexes;
      }
      if (info.loadSelf && !preventSelf || info.direction === "down" && this.isEndBlock(old)) {
        indexes = this.vgenerator.getBlockIndexes(info.page);
      }
      indexes.some(function(val, ind) {
        var result = val === (isGroupAdaptive(_this.parent) ? _this.getGroupedTotalBlocks() : _this.getTotalBlocks());
        if (result) {
          mIdx = ind;
        }
        return result;
      });
      if (mIdx !== void 0) {
        indexes = indexes.slice(0, mIdx + 1);
        if (info.block === 0 && indexes.length === 1 && this.vgenerator.isBlockAvailable(indexes[0] - 1)) {
          indexes = [indexes[0] - 1, indexes[0]];
        }
      }
      return indexes;
    };
    VirtualContentRenderer2.prototype.appendContent = function(target, newChild, e) {
      var _this = this;
      var info = e.virtualInfo.sentinelInfo && e.virtualInfo.sentinelInfo.axis === "Y" && this.currentInfo.page && this.currentInfo.page !== e.virtualInfo.page ? this.currentInfo : e.virtualInfo;
      this.prevInfo = this.prevInfo || e.virtualInfo;
      var cBlock = info.columnIndexes[0] - 1;
      var cOffset = this.getColumnOffset(cBlock);
      var width;
      var blocks = info.blockIndexes;
      if (this.parent.groupSettings.columns.length) {
        this.refreshOffsets();
      }
      if (this.parent.height === "100%") {
        this.parent.element.style.height = "100%";
      }
      var vHeight = this.parent.height.toString().indexOf("%") < 0 ? this.content.getBoundingClientRect().height : this.parent.element.getBoundingClientRect().height;
      if (!this.parent.enableVirtualization && this.parent.enableColumnVirtualization) {
        vHeight = 0;
      }
      var reduceWidth = 0;
      if (this.parent.enableColumnVirtualization && this.parent.isFrozenGrid()) {
        var frzLeftWidth_1 = 0;
        this.parent.getColumns().filter(function(col) {
          if (col.visible) {
            reduceWidth += parseInt(col.width.toString(), 10);
            if (col.freeze === "Left") {
              frzLeftWidth_1 += parseInt(col.width.toString(), 10);
            }
          }
        });
        var cIndex = info.columnIndexes;
        width = this.getColumnOffset(cIndex[cIndex.length - 1]) - this.getColumnOffset(cIndex[0] - 1) + "";
        if (cBlock > this.parent.getVisibleFrozenLeftCount()) {
          cOffset = cOffset - frzLeftWidth_1;
        }
        this.resetStickyLeftPos(cOffset, newChild);
      }
      if (!this.requestTypes.some(function(value) {
        return value === _this.requestType;
      })) {
        var translate = this.getTranslateY(this.content.scrollTop, vHeight, info);
        if (this.parent.groupSettings.enableLazyLoading && info && this.prevInfo && this.prevInfo.blockIndexes[0] === 1 && info.blockIndexes[0] === 1 && info.direction === "up") {
          this.virtualEle.adjustTable(0, this.content.scrollTop < this.offsets[1] ? 0 : this.getBlockHeight());
        } else {
          this.virtualEle.adjustTable(cOffset, translate);
        }
      }
      if (this.parent.enableColumnVirtualization) {
        this.header.virtualEle.adjustTable(cOffset, 0);
      }
      if (this.parent.enableColumnVirtualization) {
        var cIndex = info.columnIndexes;
        width = this.getColumnOffset(cIndex[cIndex.length - 1]) - this.getColumnOffset(cIndex[0] - 1) + "";
        if (this.parent.isFrozenGrid()) {
          width = reduceWidth.toString();
          if (this.parent.allowResizing) {
            this.parent.getHeaderTable().style.width = reduceWidth + "px";
            this.parent.getContentTable().style.width = reduceWidth + "Px";
          }
        }
        this.header.virtualEle.setWrapperWidth(width);
      }
      this.virtualEle.setWrapperWidth(width, Browser.isIE || Browser.info.name === "edge");
      if (this.parent.enableColumnVirtualization && isNullOrUndefined(target) && isNullOrUndefined(newChild)) {
        return;
      }
      if (!isNullOrUndefined(target) && !isNullOrUndefined(target.parentNode)) {
        remove(target);
      }
      var tbody2 = this.parent.element.querySelector("." + content).querySelector(tbody);
      if (tbody2) {
        remove(tbody2);
        target = null;
      }
      var isReact = this.parent.isReact && !isNullOrUndefined(this.parent.rowTemplate);
      if (!isReact) {
        target = this.parent.createElement(tbody, {
          attrs: {
            role: "rowgroup"
          }
        });
        target.appendChild(newChild);
      } else {
        target = newChild;
      }
      if (this.parent.frozenRows && e.requestType === "virtualscroll" && (this.parent.pageSettings.currentPage === 1 || this.isInfiniteColumnvirtualization())) {
        for (var i = 0; i < this.parent.frozenRows; i++) {
          target.children[0].remove();
        }
      }
      this.getTable().appendChild(target);
      this.requestType = this.requestType === "virtualscroll" ? this.empty : this.requestType;
      if (!this.parent.enableVirtualization && this.parent.enableColumnVirtualization && (info.direction === "right" || info.direction === "left")) {
        this.content.scrollTop = this.currentInfo.offsets.top;
        this.content.scrollLeft = this.currentInfo.offsets.left;
      }
      if (this.parent.groupSettings.columns.length) {
        if (!isGroupAdaptive(this.parent) && info.direction === "up") {
          var blk = this.offsets[this.getTotalBlocks()] - this.prevHeight;
          var sTop = this.content.scrollTop;
          this.content.scrollTop = sTop + blk;
        }
        this.setVirtualHeight();
        if (!this.parent.groupSettings.enableLazyLoading) {
          this.observer.setPageHeight(this.getOffset(blocks[blocks.length - 1]) - this.getOffset(blocks[0] - 1));
        }
      }
      if (!this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length === 0 && e.requestType === "ungrouping") {
        this.observer.setPageHeight(this.getBlockHeight() * 2);
      }
      this.prevInfo = info;
      if (this.isFocused && this.activeKey !== "downArrow" && this.activeKey !== "upArrow") {
        this.content.focus();
      }
      var lastPage = Math.ceil(this.getTotalBlocks() / 2);
      if (this.isBottom) {
        this.isBottom = false;
        this.isBottomNotify = false;
        this.parent.getContent().firstElementChild.scrollTop = this.offsets[this.offsetKeys.length - 1];
      }
      if ((this.parent.pageSettings.currentPage + 1 === lastPage || this.parent.pageSettings.currentPage === lastPage) && blocks.length === 2 && e.requestType === "delete") {
        this.parent.getContent().firstElementChild.scrollTop = this.offsets[this.offsetKeys.length - 1];
      }
      if (this.parent.pageSettings.currentPage === lastPage && blocks.length === 1) {
        this.isBottom = true;
        setTimeout(function() {
          var scrollElement = _this.parent.getContent().firstElementChild;
          scrollElement.scrollTop = _this.offsets[_this.offsetKeys.length - 2];
          var scrollValues = {
            direction: "up",
            sentinel: _this.observer.sentinelInfo.up,
            offset: {
              top: scrollElement.scrollTop,
              left: scrollElement.scrollLeft
            },
            focusElement: _this.parent.element
          };
          _this.scrollListener(scrollValues);
        }, 0);
      }
      if (this.isTop) {
        this.parent.getContent().firstElementChild.scrollTop = 0;
        this.isTop = false;
      }
      if (e.requestType === "virtualscroll" && e.virtualInfo.sentinelInfo.axis === "X") {
        this.parent.notify(autoCol, {});
      }
      this.focusCell(e);
      if (this.firstCellFocus) {
        this.firstCellFocus = false;
        var focusModule = this.parent.focusModule;
        var current = focusModule.active.matrix.current;
        var cell = this.parent.getContentTable().rows[current[0]].cells[current[1]];
        focusModule.currentInfo.element = cell;
        focusModule.currentInfo.elementToFocus = cell;
        cell.classList.add("e-focus");
        cell.classList.add("e-focused");
        cell.tabIndex = 0;
        cell.focus();
      }
      this.restoreEdit(e);
      this.restoreAdd();
      this.ensureSelectedRowPosition();
      this.validationScrollLeft();
      if (this.parent.isFrozenGrid() && this.parent.enableColumnVirtualization) {
        this.widthServices.refreshFrozenScrollbar();
      }
      if (!this.initialRowTop) {
        var gridTop = this.parent.element.getBoundingClientRect().top;
        if (this.parent.getRowByIndex(0)) {
          this.initialRowTop = this.parent.getRowByIndex(0).getBoundingClientRect().top - gridTop;
        }
      }
    };
    VirtualContentRenderer2.prototype.validationScrollLeft = function() {
      if (this.validationCheck) {
        if (this.validationCol) {
          var offset = this.vgenerator.cOffsets[this.validationCol.index - this.parent.getVisibleFrozenColumns() - 1];
          this.validationCol = null;
          this.content.scrollLeft = offset;
        } else {
          this.validationCheck = false;
          this.parent.editModule.editFormValidate();
        }
      }
    };
    VirtualContentRenderer2.prototype.ensureSelectedRowPosition = function() {
      if (!this.isSelection && this.isSelectionScroll && !isNullOrUndefined(this.selectRowIndex)) {
        this.isSelectionScroll = false;
        var row2 = this.parent.getRowByIndex(this.selectRowIndex);
        if (row2 && !this.isRowInView(row2)) {
          this.rowSelected({
            rowIndex: this.selectRowIndex,
            row: row2
          }, true);
        }
      }
    };
    VirtualContentRenderer2.prototype.focusCell = function(e) {
      if (this.activeKey !== "upArrow" && this.activeKey !== "downArrow") {
        return;
      }
      var row2 = this.parent.getRowByIndex(this.rowIndex);
      var cell = row2.cells[this.cellIndex];
      cell.focus({
        preventScroll: true
      });
      if (!this.parent.selectionSettings.checkboxOnly) {
        this.parent.selectRow(parseInt(row2.getAttribute(ariaRowIndex), 10) - 1);
      }
      this.activeKey = this.empty;
    };
    VirtualContentRenderer2.prototype.restoreEdit = function(e) {
      if (this.isNormaledit) {
        if (this.parent.editSettings.allowEditing && this.parent.editModule && !isNullOrUndefined(this.editedRowIndex)) {
          var row2 = this.getRowByIndex(this.editedRowIndex);
          var content2 = this.content;
          var keys = Object.keys(this.virtualData);
          var isXaxis = e && e.virtualInfo && e.virtualInfo.sentinelInfo.axis === "X";
          if (keys.length && row2 && !content2.querySelector("." + editedRow) && ["sorting", "filtering", "grouping", "refresh", "searching", "ungrouping", "reorder"].indexOf(e.requestType) === -1) {
            var top_1 = row2.getBoundingClientRect().top - this.parent.element.getBoundingClientRect().top;
            if (isXaxis || top_1 < this.content.offsetHeight && top_1 > this.parent.getRowHeight()) {
              this.parent.isEdit = false;
              this.parent.editModule.startEdit(row2);
            }
          }
          if (row2 && this.content.querySelector("." + editedRow) && !keys.length) {
            var rowData = !this.parent.enableVirtualization && this.parent.enableColumnVirtualization ? this.enableCacheOnInfiniteColumnVirtual() ? this.virtualInfiniteData : extend({}, this.parent.getCurrentViewRecords()[this.editedRowIndex]) : extend({}, this.getRowObjectByIndex(this.editedRowIndex));
            this.virtualData = this.getVirtualEditedData(rowData);
          }
        }
        this.restoreAdd();
      }
    };
    VirtualContentRenderer2.prototype.getVirtualEditedData = function(rowData) {
      var editForms = [].slice.call(this.parent.element.getElementsByClassName("e-gridform"));
      var isFormDestroyed = this.parent.editModule && this.parent.editModule.formObj && this.parent.editModule.formObj.isDestroyed;
      if (!isFormDestroyed) {
        for (var i = 0; i < editForms.length; i++) {
          rowData = this.parent.editModule.getCurrentEditedData(editForms[parseInt(i.toString(), 10)], rowData);
        }
      }
      return rowData;
    };
    VirtualContentRenderer2.prototype.restoreAdd = function() {
      var startAdd = !this.parent.element.querySelector("." + addedRow);
      if (this.isNormaledit && this.isAdd && startAdd) {
        var isTop = this.parent.editSettings.newRowPosition === "Top" && this.content.scrollTop < this.parent.getRowHeight();
        var isBottom = this.parent.editSettings.newRowPosition === "Bottom" && this.parent.pageSettings.currentPage === this.maxPage;
        if (isTop || isBottom) {
          this.parent.isEdit = false;
          this.parent.addRecord();
        }
      }
    };
    VirtualContentRenderer2.prototype.onDataReady = function(e) {
      if (!isNullOrUndefined(e.count)) {
        this.count = e.count;
        this.maxPage = Math.ceil((this.parent.groupSettings.columns.length && this.parent.vcRows.length ? this.parent.vcRows.length : e.count) / this.parent.pageSettings.pageSize);
      }
      this.vgenerator.checkAndResetCache(e.requestType);
      if (["refresh", "filtering", "searching", "grouping", "ungrouping", "reorder", void 0].some(function(value) {
        return e.requestType === value;
      })) {
        this.refreshOffsets();
      }
      this.setVirtualHeight();
      this.resetScrollPosition(e.requestType);
    };
    VirtualContentRenderer2.prototype.setVirtualHeight = function(height) {
      var width = this.parent.enableColumnVirtualization ? this.getColumnOffset(this.parent.getVisibleColumns().length + this.parent.groupSettings.columns.length - 1) + "px" : "100%";
      var virtualHeight = this.offsets[isGroupAdaptive(this.parent) && this.count !== 0 ? this.getGroupedTotalBlocks() : this.getTotalBlocks()];
      if (!this.parent.enableVirtualization && this.parent.enableColumnVirtualization) {
        virtualHeight = 0;
      }
      var totalBlocks = isGroupAdaptive(this.parent) && this.count !== 0 ? this.getGroupedTotalBlocks() : this.getTotalBlocks();
      var lastPage = Math.ceil(totalBlocks / 2);
      var placeHolderBottom = Math.round(this.virtualEle.placeholder.getBoundingClientRect().bottom);
      var wrapperBottom = Math.round(this.virtualEle.wrapper.getBoundingClientRect().bottom);
      if ((this.currentInfo.page === lastPage || this.currentInfo.page + 1 === lastPage) && this.currentInfo.direction === "down" && placeHolderBottom > wrapperBottom && !this.diff) {
        this.diff = placeHolderBottom - wrapperBottom;
      }
      if (this.diff && this.currentInfo.page === lastPage && placeHolderBottom > wrapperBottom && !(this.isAdd && this.parent.editSettings.newRowPosition === "Bottom")) {
        virtualHeight -= this.diff;
        this.heightChange = true;
      } else if (this.requestType === "virtualscroll" && this.diff && this.heightChange) {
        virtualHeight -= this.diff;
        this.heightChange = false;
      }
      this.virtualEle.setVirtualHeight(virtualHeight, width);
      if (this.virtualEle && this.virtualEle.wrapper) {
        if (!this.parent.enableVirtualization && this.parent.enableColumnVirtualization) {
          this.virtualEle.wrapper.style.minHeight = "";
        } else {
          this.virtualEle.wrapper.style.minHeight = !isNullOrUndefined(virtualHeight) ? formatUnit(this.parent.height) : "0px";
        }
      }
      if (this.parent.enableColumnVirtualization) {
        this.header.virtualEle.setVirtualHeight(1, width);
      }
    };
    VirtualContentRenderer2.prototype.getPageFromTop = function(sTop, info) {
      var _this = this;
      var total = isGroupAdaptive(this.parent) ? this.getGroupedTotalBlocks() : this.getTotalBlocks();
      var page = 0;
      this.offsetKeys.some(function(offset) {
        var iOffset = Number(offset);
        var border = sTop <= _this.offsets["" + offset] || iOffset === total && sTop > _this.offsets["" + offset];
        if (border) {
          if (_this.offsetKeys.length % 2 !== 0 && iOffset.toString() === _this.offsetKeys[_this.offsetKeys.length - 2] && sTop <= _this.offsets[_this.offsetKeys.length - 1]) {
            iOffset = iOffset + 1;
          }
          info.block = iOffset % 2 === 0 ? 1 : 0;
          page = Math.max(1, Math.min(_this.vgenerator.getPage(iOffset), _this.maxPage));
        }
        return border;
      });
      return page;
    };
    VirtualContentRenderer2.prototype.getTranslateY = function(sTop, cHeight, info, isOnenter) {
      if (info === void 0) {
        info = {
          page: this.getPageFromTop(sTop, {})
        };
        info.blockIndexes = this.vgenerator.getBlockIndexes(info.page);
      }
      var block = (info.blockIndexes[0] || 1) - 1;
      var translate = this.getOffset(block);
      var endTranslate = this.getOffset(info.blockIndexes[info.blockIndexes.length - 1]);
      if (isOnenter) {
        info = this.prevInfo;
      }
      var result = translate > sTop ? this.getOffset(block - 1) : endTranslate < sTop + cHeight ? this.getOffset(block + 1) : translate;
      var blockHeight = this.offsets[info.blockIndexes[info.blockIndexes.length - 1]] - this.tmpOffsets[info.blockIndexes[0]];
      var totalBlocks = isGroupAdaptive(this.parent) ? this.getGroupedTotalBlocks() : this.getTotalBlocks();
      if (result + blockHeight > this.offsets[parseInt(totalBlocks.toString(), 10)]) {
        result -= result + blockHeight - this.offsets[parseInt(totalBlocks.toString(), 10)];
      }
      if (info.page === 1 && info.block === 0 && info.direction === "up") {
        result = 0;
      }
      if (!this.parent.enableVirtualization && this.parent.enableColumnVirtualization) {
        result = 0;
      }
      return result;
    };
    VirtualContentRenderer2.prototype.getOffset = function(block) {
      return Math.min(this.offsets[parseInt(block.toString(), 10)] | 0, this.offsets[this.maxBlock] | 0);
    };
    VirtualContentRenderer2.prototype.onEntered = function() {
      var _this = this;
      return function(element, current, direction, e, isWheel, check) {
        if ((direction === "down" || direction === "up") && !_this.parent.enableVirtualization && _this.parent.enableColumnVirtualization) {
          return;
        }
        if (Browser.isIE && !isWheel && check && !_this.preventEvent && !_this.parent.enableVirtualMaskRow) {
          _this.parent.showSpinner();
        }
        _this.prevInfo = _this.prevInfo || _this.vgenerator.getData();
        var viewInfo = _this.getInfoFromView(direction, current, e);
        if (_this.parent.isFrozenGrid() && current.axis === "X" && _this.parent.getVisibleFrozenLeftCount() >= viewInfo.columnIndexes[0] && _this.prevInfo && _this.prevInfo.columnIndexes.toString().includes(viewInfo.columnIndexes.toString())) {
          return;
        }
        if (_this.parent.enableVirtualMaskRow && !_this.preventEvent) {
          var firstOffSetKey = parseInt(_this.offsetKeys[0], 10);
          var lastOffSetKey = parseInt(_this.offsetKeys[_this.offsetKeys.length - 1], 10);
          var blockIndex = _this.currentInfo.blockIndexes;
          var disableShowMaskRow = _this.prevInfo && current.axis === "X" && _this.prevInfo.columnIndexes.toString() === viewInfo.columnIndexes.toString() || direction === "down" && _this.parent.allowGrouping && _this.parent.groupSettings.columns.length && (_this.parent.allowFiltering && _this.parent.filterSettings.columns.length || _this.parent.searchSettings.key.length) && _this.offsetKeys.length <= 2;
          if (!(blockIndex && blockIndex[0] === firstOffSetKey && direction === "up" || blockIndex && blockIndex[blockIndex.length - 1] === lastOffSetKey && direction === "down" || disableShowMaskRow)) {
            setTimeout(function() {
              _this.parent.showMaskRow(current.axis);
            }, 0);
          }
        }
        var xAxis = current.axis === "X";
        var top = _this.prevInfo.offsets ? _this.prevInfo.offsets.top : null;
        var height = _this.content.getBoundingClientRect().height;
        var x = _this.getColumnOffset(xAxis ? _this.vgenerator.getColumnIndexes()[0] - 1 : _this.prevInfo.columnIndexes[0] - 1);
        if (_this.parent.isFrozenGrid() && _this.parent.enableColumnVirtualization && _this.currentInfo && _this.currentInfo.columnIndexes) {
          var cBlock = _this.currentInfo.columnIndexes[0] - 1;
          var frzLeftWidth_2 = 0;
          _this.parent.getColumns().filter(function(col) {
            if (col.visible && col.freeze === "Left") {
              frzLeftWidth_2 += parseInt(col.width.toString(), 10);
            }
          });
          if (cBlock > _this.parent.getVisibleFrozenLeftCount()) {
            x = x - frzLeftWidth_2;
          }
        }
        if (xAxis) {
          var idx = Object.keys(_this.vgenerator.cOffsets).length - _this.prevInfo.columnIndexes.length;
          var maxLeft = _this.vgenerator.cOffsets[idx - 1];
          x = x > maxLeft ? maxLeft : x;
        }
        if (!_this.parent.enableVirtualization && _this.parent.enableColumnVirtualization) {
          _this.virtualEle.adjustTable(x, 0);
        } else {
          var y = _this.getTranslateY(e.top, height, xAxis && top === e.top ? _this.prevInfo : void 0, true);
          _this.virtualEle.adjustTable(x, Math.min(y, _this.offsets[_this.maxBlock]));
        }
        if (_this.parent.enableColumnVirtualization) {
          _this.header.virtualEle.adjustTable(x, 0);
          if (_this.parent.isFrozenGrid()) {
            _this.resetStickyLeftPos(x);
          }
        }
      };
    };
    VirtualContentRenderer2.prototype.dataBound = function() {
      this.parent.notify(refreshVirtualFrozenHeight, {});
      if (this.isSelection && this.activeKey !== "upArrow" && this.activeKey !== "downArrow") {
        this.parent.selectRow(this.selectedRowIndex);
      } else {
        this.activeKey = this.empty;
        this.requestType = this.empty;
      }
    };
    VirtualContentRenderer2.prototype.resetStickyLeftPos = function(valueX, newChild) {
      var cells = [].slice.call(this.parent.getHeaderContent().querySelectorAll(".e-leftfreeze,.e-rightfreeze,.e-fixedfreeze")).concat([].slice.call((newChild ? newChild : this.parent.getContent()).querySelectorAll(".e-leftfreeze,.e-rightfreeze,.e-fixedfreeze")));
      var frzLeftWidth = 0;
      var frzRightWidth = 0;
      if (this.parent.getHeaderContent().querySelectorAll(".e-fixedfreeze").length) {
        frzLeftWidth = this.parent.leftrightColumnWidth("left");
        frzRightWidth = this.parent.leftrightColumnWidth("right");
      }
      if (cells.length) {
        for (var i = 0; i < cells.length; i++) {
          var cell = cells[parseInt(i.toString(), 10)];
          var col = void 0;
          if (cell.classList.contains("e-rowcell")) {
            if (isNullOrUndefined(cell.getAttribute("aria-colindex")) && cell.querySelector("[e-mappinguid]")) {
              var uid2 = cell.querySelector("[e-mappinguid]").getAttribute("e-mappinguid");
              col = this.parent.getColumnByUid(uid2);
            } else {
              var idx = parseInt(cell.getAttribute("aria-colindex"), 10) - 1;
              col = this.parent.getColumnByIndex(parseInt(idx.toString(), 10));
            }
          } else {
            if (cell.classList.contains("e-headercell") || cell.classList.contains("e-filterbarcell")) {
              var uid2 = cell.classList.contains("e-filterbarcell") ? cell.getAttribute("e-mappinguid") : cell.querySelector("[e-mappinguid]").getAttribute("e-mappinguid");
              col = this.parent.getColumnByUid(uid2);
            }
          }
          if (col.freeze === "Left") {
            cell.style.left = col.valueX - valueX + "px";
          } else if (col.freeze === "Right") {
            cell.style.right = col.valueX + valueX + "px";
          } else if (col.freeze === "Fixed") {
            cell.style.left = frzLeftWidth - valueX + "px";
            cell.style.right = frzRightWidth + valueX + "px";
          }
        }
      }
      this.parent.translateX = valueX;
    };
    VirtualContentRenderer2.prototype.rowSelected = function(args, isSelection) {
      if ((this.isSelection || isSelection) && !this.isLastBlockRow(args.rowIndex)) {
        var transform = getTransformValues(this.content.firstElementChild);
        var gridTop = this.parent.element.getBoundingClientRect().top;
        var rowTop = args.row.getBoundingClientRect().top - gridTop;
        var height = this.content.getBoundingClientRect().height;
        var isBottom = height < rowTop;
        var remainHeight = isBottom ? rowTop - height : this.initialRowTop - rowTop;
        var translateY = isBottom ? transform.height - remainHeight : transform.height + remainHeight;
        this.virtualEle.adjustTable(transform.width, translateY);
        var wrapperInfo = this.virtualEle.wrapper.getBoundingClientRect();
        var contentInfo = this.content.getBoundingClientRect();
        if (wrapperInfo.top > contentInfo.top) {
          this.virtualEle.adjustTable(transform.width, translateY - (wrapperInfo.top - contentInfo.top));
        }
        var lastRowTop = this.content.querySelector("tbody").lastElementChild.getBoundingClientRect().top - gridTop;
        if (lastRowTop < height) {
          translateY = translateY + (height - (args.row.getBoundingClientRect().top - gridTop));
          this.virtualEle.adjustTable(transform.width, translateY - this.parent.getRowHeight() / 2);
        } else if (contentInfo.bottom > wrapperInfo.bottom) {
          this.virtualEle.adjustTable(transform.width, translateY + (contentInfo.bottom - wrapperInfo.bottom));
        }
        if (this.parent.isFrozenGrid() && this.parent.enableColumnVirtualization) {
          this.resetStickyLeftPos(transform.width);
        }
      }
      this.isSelection = false;
    };
    VirtualContentRenderer2.prototype.isLastBlockRow = function(index) {
      var scrollEle = this.parent.getContent().firstElementChild;
      var visibleRowCount = Math.floor(scrollEle.offsetHeight / this.parent.getRowHeight()) - 1;
      var startIdx = this.maxPage * this.parent.pageSettings.pageSize - visibleRowCount;
      return index >= startIdx;
    };
    VirtualContentRenderer2.prototype.refreshMaxPage = function() {
      if (this.parent.groupSettings.columns.length && this.parent.vcRows.length) {
        this.maxPage = Math.ceil(this.parent.vcRows.length / this.parent.pageSettings.pageSize);
      }
    };
    VirtualContentRenderer2.prototype.setVirtualPageQuery = function(args) {
      var visiblePage = [];
      if (this.prevInfo && this.prevInfo.blockIndexes) {
        visiblePage = getVisiblePage(this.prevInfo.blockIndexes);
      }
      if ((this.requestType === "sorting" || this.requestType === "delete") && visiblePage.length && checkIsVirtual(this.parent)) {
        args.query.skip(this.parent.pageSettings.pageSize * (visiblePage[0] - 1));
        args.query.take(this.parent.pageSettings.pageSize * visiblePage.length);
        args.skipPage = true;
        return;
      }
      var row2 = this.parent.getContent().querySelector(".e-row");
      if (this.requestType === "virtualscroll" && this.vgenerator.currentInfo.blockIndexes) {
        this.vgenerator.currentInfo = {};
      }
      if (row2 && this.parent.isManualRefresh && this.currentInfo.blockIndexes && (this.currentInfo.blockIndexes.length === 3 || visiblePage.length > 1)) {
        this.vgenerator.startIndex = parseInt(row2.getAttribute("aria-rowindex"), 10) - 1;
        this.vgenerator.currentInfo = extend({}, this.currentInfo);
        this.vgenerator.currentInfo.blockIndexes = this.currentInfo.blockIndexes.slice();
        var includePrevPage = this.vgenerator.includePrevPage = this.currentInfo.blockIndexes[0] % 2 === 0;
        if (includePrevPage) {
          this.vgenerator.startIndex = this.vgenerator.startIndex - this.getBlockSize();
          this.vgenerator.currentInfo.blockIndexes.unshift(this.currentInfo.blockIndexes[0] - 1);
        } else {
          this.vgenerator.currentInfo.blockIndexes.push(this.currentInfo.blockIndexes[this.currentInfo.blockIndexes.length - 1] + 1);
        }
        var skip = (this.vgenerator.currentInfo.blockIndexes[0] - 1) * this.getBlockSize();
        var take = this.vgenerator.currentInfo.blockIndexes.length * this.getBlockSize();
        args.query.skip(skip);
        args.query.take(take);
        args.skipPage = true;
      }
    };
    VirtualContentRenderer2.prototype.eventListener = function(action) {
      var _this = this;
      this.parent["" + action](dataReady, this.onDataReady, this);
      this.parent.addEventListener(dataBound, this.dataBound.bind(this));
      this.parent.addEventListener(actionBegin, this.actionBegin.bind(this));
      this.parent.addEventListener(actionComplete, this.actionComplete.bind(this));
      this.parent.addEventListener(rowSelected, this.rowSelected.bind(this));
      this.parent["" + action](refreshVirtualBlock, this.refreshContentRows, this);
      this.parent["" + action](refreshVirtualLazyLoadCache, this.refreshVirtualLazyLoadCache, this);
      this.parent["" + action](selectVirtualRow, this.selectVirtualRow, this);
      this.parent["" + action](virtaulCellFocus, this.virtualCellFocus, this);
      this.parent["" + action](virtualScrollEditActionBegin, this.editActionBegin, this);
      this.parent["" + action](virtualScrollAddActionBegin, this.addActionBegin, this);
      this.parent["" + action](virtualScrollEdit, this.restoreEdit, this);
      this.parent["" + action](virtualScrollEditSuccess, this.editSuccess, this);
      this.parent["" + action](refreshVirtualCache, this.refreshCache, this);
      this.parent["" + action](editReset, this.resetIsedit, this);
      this.parent["" + action](getVirtualData, this.getVirtualData, this);
      this.parent["" + action](virtualScrollEditCancel, this.editCancel, this);
      this.parent["" + action](refreshVirtualMaxPage, this.refreshMaxPage, this);
      this.parent["" + action](setVirtualPageQuery, this.setVirtualPageQuery, this);
      this.parent["" + action](selectRowOnContextOpen, this.selectRowOnContextOpen, this);
      this.parent["" + action](resetVirtualFocus, this.resetVirtualFocus, this);
      this.parent["" + action](refreshVirtualEditFormCells, this.refreshCells, this);
      this.parent["" + action](scrollToEdit, this.scrollToEdit, this);
      var event2 = this.actions;
      for (var i = 0; i < event2.length; i++) {
        this.parent["" + action](event2[parseInt(i.toString(), 10)] + "-begin", this.onActionBegin, this);
      }
      var fn = function() {
        _this.observer.observe(function(scrollArgs) {
          return _this.scrollListener(scrollArgs);
        }, _this.onEntered());
        var gObj = _this.parent;
        if (gObj.enablePersistence && gObj.scrollPosition) {
          if (gObj.scrollPosition.top > 0) {
            _this.content.scrollTop = gObj.scrollPosition.top;
            var scrollValues = {
              direction: "down",
              sentinel: _this.observer.sentinelInfo.down,
              offset: gObj.scrollPosition,
              focusElement: gObj.element
            };
            _this.scrollListener(scrollValues);
          }
          if (gObj.enableColumnVirtualization) {
            _this.content.scrollLeft = gObj.scrollPosition.left;
          }
        }
        _this.parent.off(contentReady, fn);
      };
      this.parent.on(contentReady, fn, this);
    };
    VirtualContentRenderer2.prototype.refreshVirtualLazyLoadCache = function(e) {
      var blockIndex = this.currentInfo.blockIndexes;
      if (isNullOrUndefined(this.currentInfo.blockIndexes)) {
        blockIndex = [1, 2];
      }
      var block;
      var index;
      var cache;
      for (var i = 0; i < blockIndex.length; i++) {
        var rows = this.vgenerator.cache[blockIndex[parseInt(i.toString(), 10)]];
        for (var j = 0; j < rows.length; j++) {
          if (rows[parseInt(j.toString(), 10)].uid === e.uid) {
            block = blockIndex[parseInt(i.toString(), 10)];
            index = j;
            cache = rows;
            break;
          }
        }
      }
      if (e.count) {
        this.vgenerator.cache[parseInt(block.toString(), 10)].splice(index + 1, e.count);
      } else if (e.rows && e.rows.length) {
        this.vgenerator.cache[parseInt(block.toString(), 10)] = [].slice.call(cache.slice(0, index + 1)).concat([].slice.call(e.rows)).concat([].slice.call(cache.slice(index + 1, cache.length)));
      }
      this.refreshOffsets();
    };
    VirtualContentRenderer2.prototype.scrollToEdit = function(col) {
      var allowScroll = true;
      this.validationCheck = true;
      if (this.isAdd && this.content.scrollTop > 0) {
        allowScroll = false;
        var keys = Object.keys(this.offsets);
        this.content.scrollTop = this.parent.editSettings.newRowPosition === "Top" ? 0 : this.offsets[keys.length - 1];
      }
      var row2 = this.parent.getRowByIndex(this.editedRowIndex);
      if (!row2 && !isNullOrUndefined(this.editedRowIndex)) {
        if (!row2 || !this.isRowInView(row2)) {
          var rowIndex = this.parent.getRowHeight();
          var scrollTop = this.editedRowIndex * rowIndex;
          if (!isNullOrUndefined(scrollTop)) {
            allowScroll = false;
            this.content.scrollTop = scrollTop;
          }
        }
      }
      if (col && allowScroll) {
        var offset = this.vgenerator.cOffsets[col.index - this.parent.getVisibleFrozenColumns() - 1];
        if (!this.parent.enableColumnVirtualization) {
          var header = this.parent.getHeaderContent().querySelector('.e-headercelldiv[e-mappinguid="' + col.uid + '"]');
          offset = header.parentElement.offsetLeft;
        }
        if (this.parent.enableColumnVirtualization && this.parent.getVisibleFrozenLeftCount()) {
          offset -= this.parent.leftrightColumnWidth("left");
        }
        this.content.scrollLeft = this.parent.enableRtl ? -Math.abs(offset) : offset;
      }
      if (col && !allowScroll) {
        this.validationCol = col;
      }
    };
    VirtualContentRenderer2.prototype.refreshCells = function(rowObj) {
      rowObj.cells = this.vgenerator.generateCells(rowObj.foreignKeyData);
    };
    VirtualContentRenderer2.prototype.resetVirtualFocus = function(e) {
      this.isCancel = e.isCancel;
    };
    VirtualContentRenderer2.prototype.getVirtualData = function(data) {
      if (this.isNormaledit) {
        var error = this.parent.element.querySelector('.e-griderror:not([style*="display: none"])');
        var keys = Object.keys(this.virtualData);
        data.isScroll = keys.length !== 0 && this.currentInfo.sentinelInfo && this.currentInfo.sentinelInfo.axis === "X";
        if (error) {
          return;
        }
        this.virtualData = keys.length ? this.virtualData : data.virtualData;
        this.getVirtualEditedData(this.virtualData);
        data.virtualData = this.virtualData;
        data.isAdd = this.isAdd || this.parent.editSettings.showAddNewRow;
        data.isCancel = this.isCancel;
      }
    };
    VirtualContentRenderer2.prototype.selectRowOnContextOpen = function(args) {
      this.isContextMenuOpen = args.isOpen;
    };
    VirtualContentRenderer2.prototype.editCancel = function(args) {
      var dataIndex = getEditedDataIndex(this.parent, args.data);
      if (!isNullOrUndefined(dataIndex)) {
        args.data = this.parent.getCurrentViewRecords()[parseInt(dataIndex.toString(), 10)];
      }
    };
    VirtualContentRenderer2.prototype.editSuccess = function(args) {
      if (this.isNormaledit) {
        if (!this.isAdd && args.data) {
          this.updateCurrentViewData(args.data);
        }
        this.isAdd = false;
      }
    };
    VirtualContentRenderer2.prototype.updateCurrentViewData = function(data) {
      var dataIndex = getEditedDataIndex(this.parent, data);
      if (!isNullOrUndefined(dataIndex)) {
        this.parent.getCurrentViewRecords()[parseInt(dataIndex.toString(), 10)] = data;
      }
    };
    VirtualContentRenderer2.prototype.actionBegin = function(args) {
      if (args.requestType !== "virtualscroll") {
        this.requestType = args.requestType;
      }
      if (!args.cancel) {
        this.parent.notify(refreshVirtualFrozenRows, args);
      }
    };
    VirtualContentRenderer2.prototype.virtualCellFocus = function(e) {
      var ele = document.activeElement;
      if (!ele.classList.contains(rowCell) && (ele instanceof HTMLInputElement || !isNullOrUndefined(ele.closest(".e-templatecell")))) {
        ele = ele.closest(".e-rowcell");
      }
      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && ele && (ele.classList.contains(rowCell) || !isNullOrUndefined(parentsUntil(ele, groupCaptionRow))) && e && (e.action === "shiftEnter" || e.action === "upArrow" || e.action === "downArrow")) {
        var scrollEle = this.parent.getContent().firstElementChild;
        var scrollEleInfo = scrollEle.getBoundingClientRect();
        var row2 = closest(ele, "tr");
        var nextFocusRow = e.action === "downArrow" ? row2.nextElementSibling : row2.previousElementSibling;
        var nextFocusRowInfo = !isNullOrUndefined(nextFocusRow) ? nextFocusRow.getBoundingClientRect() : void 0;
        if (isNullOrUndefined(nextFocusRow) || e.action === "downArrow" && nextFocusRowInfo.bottom > scrollEleInfo.bottom || (e.action === "upArrow" || e.action === "shiftEnter") && nextFocusRowInfo.top < scrollEleInfo.top) {
          this.activeKey = e.action;
          this.parent.focusModule.virtualSelectionInfo = {
            isPending: isNullOrUndefined(nextFocusRow),
            direction: e.action,
            event: e
          };
          var viewDifference = isNullOrUndefined(nextFocusRow) ? this.parent.getRowHeight() : e.action === "downArrow" ? nextFocusRowInfo.bottom - scrollEleInfo.bottom : scrollEleInfo.top - nextFocusRowInfo.top;
          scrollEle.scrollTop = e.action === "downArrow" ? scrollEle.scrollTop + viewDifference : scrollEle.scrollTop - viewDifference;
        } else {
          this.activeKey = this.empty;
        }
        return;
      }
      if (ele && ele.classList.contains(rowCell) && e && (e.action === "upArrow" || e.action === "downArrow" || e.action === "shiftEnter")) {
        var rowIndex = parseInt(ele.parentElement.getAttribute(ariaRowIndex), 10) - 1;
        if (e && (e.action === "upArrow" || e.action === "shiftEnter" || e.action === "downArrow")) {
          var scrollEle = this.parent.getContent().firstElementChild;
          if (e.action === "downArrow") {
            rowIndex += 1;
          } else {
            rowIndex -= 1;
          }
          this.rowIndex = rowIndex;
          this.cellIndex = parseInt(ele.getAttribute(ariaColIndex), 10) - 1;
          var row2 = this.parent.getRowByIndex(rowIndex);
          var page = this.parent.pageSettings.currentPage;
          var visibleRowCount = Math.floor(scrollEle.offsetHeight / this.parent.getRowHeight()) - 1;
          var emptyRow = false;
          if (isNullOrUndefined(row2)) {
            emptyRow = true;
            if (e.action === "downArrow" && page === this.maxPage - 1 || (e.action === "upArrow" || e.action === "shiftEnter") && page === 1) {
              emptyRow = false;
            }
          }
          if (emptyRow || ensureLastRow(row2, this.parent) && e.action === "downArrow" || ensureFirstRow(row2, this.parent.getRowHeight() * 2) && (e.action === "upArrow" || e.action === "shiftEnter")) {
            this.activeKey = e.action;
            scrollEle.scrollTop = e.action === "downArrow" ? (rowIndex - visibleRowCount) * this.parent.getRowHeight() : rowIndex * this.parent.getRowHeight();
          } else {
            this.activeKey = this.empty;
          }
          if (!this.parent.selectionSettings.checkboxOnly) {
            this.parent.selectRow(rowIndex);
          }
        }
      }
    };
    VirtualContentRenderer2.prototype.editActionBegin = function(e) {
      this.editedRowIndex = e.index;
      var rowData = !this.parent.enableVirtualization && this.parent.enableColumnVirtualization ? extend({}, this.parent.getCurrentViewRecords()[e.index]) : extend({}, this.getRowObjectByIndex(e.index));
      var keys = Object.keys(this.virtualData);
      e.data = keys.length && !this.parent.editSettings.showAddNewRow ? this.virtualData : this.isInfiniteColumnvirtualization() ? e.data : rowData;
      if (this.enableCacheOnInfiniteColumnVirtual()) {
        this.virtualInfiniteData = e.data;
      }
      e.isScroll = keys.length !== 0 && this.currentInfo.sentinelInfo && this.currentInfo.sentinelInfo.axis === "X";
    };
    VirtualContentRenderer2.prototype.getEditedRowObject = function() {
      var rowObjects = this.parent.vcRows;
      var editedrow;
      for (var i = 0; i < rowObjects.length; i++) {
        if (rowObjects[parseInt(i.toString(), 10)].index === this.editedRowIndex) {
          editedrow = rowObjects[parseInt(i.toString(), 10)];
        }
      }
      return editedrow;
    };
    VirtualContentRenderer2.prototype.refreshCache = function(args) {
      if (this.isInfiniteColumnvirtualization()) {
        return;
      }
      var block = Math.ceil((this.editedRowIndex + 1) / this.getBlockSize());
      if (this.parent.allowPaging && this.parent.enableColumnVirtualization) {
        block = Math.ceil((this.editedRowIndex + 1 + (this.parent.pageSettings.currentPage - 1) * this.parent.pageSettings.pageSize) / this.getBlockSize());
      }
      var index = this.parent.allowPaging && this.parent.enableColumnVirtualization ? this.editedRowIndex % this.getBlockSize() : this.editedRowIndex - (block - 1) * this.getBlockSize();
      if (this.parent.groupSettings.columns.length) {
        var editRowObject = this.getEditedRowObject();
        if (editRowObject) {
          editRowObject.data = args.data;
        }
      } else {
        this.vgenerator.cache[parseInt(block.toString(), 10)][parseInt(index.toString(), 10)].data = args.data;
      }
    };
    VirtualContentRenderer2.prototype.actionComplete = function(args) {
      if (!(this.parent.enableVirtualization || this.parent.enableColumnVirtualization)) {
        return;
      }
      var editRequestTypes = ["delete", "save", "cancel"];
      var dataActionRequestTypes = ["sorting", "filtering", "grouping", "refresh", "searching", "ungrouping", "reorder"];
      if (editRequestTypes.some(function(value) {
        return value === args.requestType;
      })) {
        this.refreshOffsets();
        this.refreshVirtualElement();
      }
      if (this.isNormaledit && (dataActionRequestTypes.some(function(value) {
        return value === args.requestType;
      }) || editRequestTypes.some(function(value) {
        return value === args.requestType;
      }))) {
        this.isCancel = true;
        this.isAdd = this.parent.editSettings.showAddNewRow;
        this.editedRowIndex = this.empty;
        this.virtualData = {};
        this.virtualInfiniteData = {};
        if (this.parent.editModule) {
          this.parent.editModule.editModule.previousData = void 0;
        }
      }
      if (this.parent.enableColumnVirtualization && args.requestType === "filterAfterOpen" && this.currentInfo.columnIndexes && this.currentInfo.columnIndexes[0] > 0) {
        this.parent.resetFilterDlgPosition(args.columnName);
      }
    };
    VirtualContentRenderer2.prototype.resetIsedit = function() {
      if (this.parent.enableVirtualization && this.isNormaledit) {
        if (this.parent.editSettings.allowEditing && Object.keys(this.virtualData).length || this.parent.editSettings.allowAdding && this.isAdd) {
          this.parent.isEdit = true;
        }
      }
    };
    VirtualContentRenderer2.prototype.scrollAfterEdit = function() {
      if (this.parent.editModule && this.parent.editSettings.allowEditing && this.isNormaledit) {
        if (this.parent.element.querySelector(".e-gridform")) {
          var editForm = this.parent.element.querySelector("." + editedRow);
          var addForm = this.parent.element.querySelector("." + addedRow);
          if (editForm || addForm) {
            var rowData = editForm ? extend({}, this.getRowObjectByIndex(this.editedRowIndex)) : extend({}, this.emptyRowData);
            var keys = Object.keys(this.virtualData);
            this.virtualData = keys.length ? this.getVirtualEditedData(this.virtualData) : this.getVirtualEditedData(rowData);
          }
        }
      }
    };
    VirtualContentRenderer2.prototype.createEmptyRowdata = function() {
      var _this = this;
      this.parent.columnModel.filter(function(e) {
        _this.emptyRowData[e.field] = _this.empty;
      });
    };
    VirtualContentRenderer2.prototype.addActionBegin = function(args) {
      if (this.isNormaledit) {
        if (!Object.keys(this.emptyRowData).length) {
          this.createEmptyRowdata();
        }
        this.isAdd = true;
        var page = this.parent.pageSettings.currentPage;
        if (!this.parent.frozenRows && this.content.scrollTop > 0 && this.parent.editSettings.newRowPosition === "Top") {
          this.isAdd = true;
          this.onActionBegin();
          args.startEdit = false;
          this.content.scrollTop = 0;
        }
        if (page < this.maxPage - 1 && this.parent.editSettings.newRowPosition === "Bottom") {
          this.isAdd = true;
          this.parent.setProperties({
            pageSettings: {
              currentPage: this.maxPage - 1
            }
          }, true);
          args.startEdit = false;
          this.content.scrollTop = this.offsets[this.offsetKeys.length];
        }
      }
    };
    VirtualContentRenderer2.prototype.getRowObjectByIndex = function(index) {
      var data = this.getRowCollection(index, true);
      return data;
    };
    VirtualContentRenderer2.prototype.getBlockSize = function() {
      return this.parent.pageSettings.pageSize >> 1;
    };
    VirtualContentRenderer2.prototype.getBlockHeight = function() {
      return this.getBlockSize() * this.parent.getRowHeight();
    };
    VirtualContentRenderer2.prototype.isEndBlock = function(index) {
      var totalBlocks = isGroupAdaptive(this.parent) ? this.getGroupedTotalBlocks() : this.getTotalBlocks();
      return index >= totalBlocks || index === totalBlocks - 1;
    };
    VirtualContentRenderer2.prototype.isOddPageSize = function() {
      return this.parent.pageSettings.pageSize % 2 !== 0;
    };
    VirtualContentRenderer2.prototype.getOddBlockSize = function() {
      return this.isOddPageSize() ? this.parent.pageSettings.pageSize / 2 : this.getBlockSize();
    };
    VirtualContentRenderer2.prototype.getGroupedTotalBlocks = function() {
      var rows = this.parent.vcRows;
      return Math.floor(rows.length / this.getOddBlockSize() < 1 ? 1 : rows.length / this.getOddBlockSize());
    };
    VirtualContentRenderer2.prototype.getTotalBlocks = function() {
      return Math.ceil(this.count / this.getOddBlockSize());
    };
    VirtualContentRenderer2.prototype.getColumnOffset = function(block) {
      return this.vgenerator.cOffsets[parseInt(block.toString(), 10)] | 0;
    };
    VirtualContentRenderer2.prototype.getModelGenerator = function() {
      return new VirtualRowModelGenerator(this.parent);
    };
    VirtualContentRenderer2.prototype.resetScrollPosition = function(action) {
      if (this.actions.some(function(value) {
        return value === action;
      })) {
        this.preventEvent = this.content.scrollTop !== 0;
        this.content.scrollTop = 0;
      }
      if (action !== "virtualscroll") {
        this.isAdd = false;
      }
    };
    VirtualContentRenderer2.prototype.onActionBegin = function(e) {
      this.parent.setProperties({
        pageSettings: {
          currentPage: 1
        }
      }, true);
    };
    VirtualContentRenderer2.prototype.getRows = function() {
      return this.isInfiniteColumnvirtualization() ? this.getInfiniteRows() : this.vgenerator.getRows();
    };
    VirtualContentRenderer2.prototype.getRowByIndex = function(index) {
      var row2;
      if (isGroupAdaptive(this.parent)) {
        if (!isNullOrUndefined(index) && this.parent.enableVirtualization && this.parent.groupSettings.columns.length) {
          for (var i = 0; i < this.parent.getDataRows().length; i++) {
            if (parseInt(this.parent.getDataRows()[parseInt(i.toString(), 10)].getAttribute(ariaRowIndex), 10) - 1 === index) {
              row2 = this.parent.getDataRows()[parseInt(i.toString(), 10)];
            }
          }
        } else {
          row2 = !isNullOrUndefined(index) ? this.parent.getDataRows()[parseInt(index.toString(), 10)] : void 0;
        }
      } else if (!this.parent.enableVirtualization && this.parent.enableColumnVirtualization) {
        row2 = !isNullOrUndefined(index) ? this.enableCacheOnInfiniteColumnVirtual() ? this.parent.getDataRows().find(function(element) {
          return parseInt(element.getAttribute(ariaRowIndex), 10) - 1 === index;
        }) : this.parent.getDataRows()[parseInt(index.toString(), 10)] : void 0;
      } else if (this.prevInfo) {
        row2 = this.getRowCollection(index, false);
      }
      return row2;
    };
    VirtualContentRenderer2.prototype.getMovableVirtualRowByIndex = function(index) {
      return this.getRowCollection(index, false);
    };
    VirtualContentRenderer2.prototype.getFrozenRightVirtualRowByIndex = function(index) {
      return this.getRowCollection(index, false);
    };
    VirtualContentRenderer2.prototype.getRowCollection = function(index, isRowObject) {
      var prev = this.prevInfo.blockIndexes;
      var startIdx = (prev[0] - 1) * this.getBlockSize();
      if (this.parent.pageSettings.pageSize % 2 !== 0) {
        startIdx += Math.floor(startIdx / this.getBlockSize() / 2);
      }
      var rowCollection = this.parent.getDataRows();
      var collection = isRowObject ? this.parent.getCurrentViewRecords() : rowCollection;
      if (isRowObject && this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
        startIdx = parseInt(this.parent.getRows()[0].getAttribute(ariaRowIndex), 10) - 1;
        collection = collection.filter(function(m) {
          return isNullOrUndefined(m.items);
        });
      }
      if (!isRowObject && this.parent.allowGrouping && this.parent.groupSettings.columns.length && rowCollection.length) {
        startIdx = parseInt(rowCollection[0].getAttribute(ariaRowIndex), 10) - 1;
      }
      var selectedRow = collection[index - startIdx];
      if (this.parent.frozenRows && this.parent.pageSettings.currentPage > 1) {
        if (!isRowObject) {
          selectedRow = index <= this.parent.frozenRows ? rowCollection[parseInt(index.toString(), 10)] : rowCollection[index - startIdx + this.parent.frozenRows];
        } else {
          selectedRow = index <= this.parent.frozenRows ? this.parent.getRowsObject()[parseInt(index.toString(), 10)].data : selectedRow;
        }
      }
      return selectedRow;
    };
    VirtualContentRenderer2.prototype.getVirtualRowIndex = function(index) {
      var prev = this.prevInfo.blockIndexes;
      var startIdx = (prev[0] - 1) * this.getBlockSize();
      if (this.parent.enableVirtualization && this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
        var vGroupedRows = this.vgenerator.cache[prev[0]];
        for (var i = 0; i < vGroupedRows.length; i++) {
          if (vGroupedRows["" + i].isDataRow) {
            startIdx = vGroupedRows["" + i].index;
            break;
          }
        }
      }
      return startIdx + index;
    };
    VirtualContentRenderer2.prototype.refreshOffsets = function() {
      var gObj = this.parent;
      var row2 = 0;
      var blockSize = this.getBlockSize();
      var oddBlockSize = this.getOddBlockSize();
      var total = isGroupAdaptive(this.parent) ? this.getGroupedTotalBlocks() : this.getTotalBlocks();
      this.prevHeight = this.offsets[parseInt(total.toString(), 10)];
      this.maxBlock = total % 2 === 0 ? total - 2 : total - 1;
      this.offsets = {};
      var blocks = Array.apply(null, Array(total)).map(function() {
        return ++row2;
      });
      for (var i = 0; i < blocks.length; i++) {
        var tmp = (this.vgenerator.cache[blocks[parseInt(i.toString(), 10)]] || []).length;
        var rem = !isGroupAdaptive(this.parent) ? this.isOddPageSize() ? Math.ceil(this.count % oddBlockSize) : this.count % blockSize : this.isOddPageSize() ? Math.ceil(gObj.vcRows.length % oddBlockSize) : gObj.vcRows.length % blockSize;
        var size = !isGroupAdaptive(this.parent) && blocks[parseInt(i.toString(), 10)] in this.vgenerator.cache ? tmp * this.parent.getRowHeight() : rem && blocks[parseInt(i.toString(), 10)] === total ? rem * this.parent.getRowHeight() : this.getBlockHeight();
        if (this.isOddPageSize() && !(blocks[parseInt(i.toString(), 10)] in this.vgenerator.cache) && !(rem && blocks[parseInt(i.toString(), 10)] === total)) {
          size = (blocks[parseInt(i.toString(), 10)] % 2 !== 0 ? Math.floor(oddBlockSize) : Math.ceil(oddBlockSize)) * this.parent.getRowHeight();
        }
        this.offsets[blocks[parseInt(i.toString(), 10)]] = (this.offsets[blocks[parseInt(i.toString(), 10)] - 1] | 0) + size;
        this.tmpOffsets[blocks[parseInt(i.toString(), 10)]] = this.offsets[blocks[parseInt(i.toString(), 10)] - 1] | 0;
      }
      this.offsetKeys = Object.keys(this.offsets);
      if (isGroupAdaptive(this.parent)) {
        this.parent.vGroupOffsets = this.offsets;
      }
      if (this.parent.enableColumnVirtualization) {
        this.vgenerator.refreshColOffsets();
      }
    };
    VirtualContentRenderer2.prototype.refreshVirtualElement = function() {
      this.vgenerator.refreshColOffsets();
      this.setVirtualHeight();
    };
    VirtualContentRenderer2.prototype.setVisible = function(columns) {
      var gObj = this.parent;
      var rows = [];
      rows = this.getRows();
      var testRow;
      rows.some(function(r) {
        if (r.isDataRow) {
          testRow = r;
        }
        return r.isDataRow;
      });
      var isRefresh = true;
      if (!gObj.groupSettings.columns.length && testRow) {
        isRefresh = false;
      }
      var tr = gObj.getDataRows();
      for (var c = 0, clen = columns.length; c < clen; c++) {
        var column = columns[parseInt(c.toString(), 10)];
        var idx = gObj.getNormalizedColumnIndex(column.uid);
        var displayVal = column.visible === true ? "" : "none";
        var colGrp = this.getColGroup().children;
        if (idx !== -1 && testRow && idx < testRow.cells.length) {
          setStyleAttribute(colGrp[parseInt(idx.toString(), 10)], {
            "display": displayVal
          });
        }
        if (!isRefresh) {
          var width = void 0;
          if (column.width) {
            if (column.visible) {
              width = this.virtualEle.wrapper.offsetWidth + parseInt(column.width.toString(), 10);
            } else {
              width = this.virtualEle.wrapper.offsetWidth - parseInt(column.width.toString(), 10);
            }
          }
          if (width > gObj.width) {
            this.setDisplayNone(tr, idx, displayVal, rows);
            if (this.parent.enableColumnVirtualization) {
              this.virtualEle.setWrapperWidth(width + "");
            }
            this.refreshVirtualElement();
          } else {
            isRefresh = true;
          }
        }
        if (!this.parent.invokedFromMedia && column.hideAtMedia) {
          this.parent.updateMediaColumns(column);
        }
        this.parent.invokedFromMedia = false;
      }
      if (isRefresh) {
        this.refreshContentRows({
          requestType: "refresh"
        });
      } else {
        this.parent.notify(partialRefresh, {
          rows,
          args: {
            isFrozen: false,
            rows
          }
        });
      }
    };
    VirtualContentRenderer2.prototype.selectVirtualRow = function(args) {
      var _this = this;
      var count2 = isGroupAdaptive(this.parent) ? this.vgenerator.recordsCount : this.count;
      args.isAvailable = args.selectedIndex < count2;
      if (args.isAvailable && !this.isContextMenuOpen && this.activeKey !== "upArrow" && this.activeKey !== "downArrow" && !this.isSelection && !this.requestTypes.some(function(value) {
        return value === _this.requestType;
      }) && !this.parent.selectionModule.isInteracted) {
        var selectedRow = this.parent.getRowByIndex(args.selectedIndex);
        var rowHeight2 = this.parent.getRowHeight();
        if (!selectedRow || !this.isRowInView(selectedRow)) {
          this.isSelection = true;
          this.selectedRowIndex = args.selectedIndex;
          var scrollTop = args.selectedIndex * rowHeight2;
          if (isGroupAdaptive(this.parent)) {
            var selectedRowObjectIndex = this.parent.vcRows.findIndex(function(row2) {
              return row2.index === args.selectedIndex;
            });
            scrollTop = selectedRowObjectIndex !== -1 ? selectedRowObjectIndex * rowHeight2 : void 0;
            this.isSelection = selectedRowObjectIndex !== -1 ? this.isSelection : false;
          } else if (this.parent.groupSettings.columns.length && this.parent.getDataModule().isRemote()) {
            var page = Math.ceil((args.selectedIndex + 1) / this.parent.pageSettings.pageSize);
            var blockIndexes = this.vgenerator.getBlockIndexes(page);
            scrollTop = this.offsets[blockIndexes[0]];
          }
          if (!isNullOrUndefined(scrollTop)) {
            var direction = this.content.scrollTop < scrollTop ? "down" : "up";
            this.selectRowIndex = args.selectedIndex;
            this.content.scrollTop = scrollTop;
            this.isSelectionScroll = this.observer.check(direction);
          }
        }
      }
      this.requestType = this.empty;
    };
    VirtualContentRenderer2.prototype.isRowInView = function(row2) {
      var top = row2.getBoundingClientRect().top;
      var bottom = row2.getBoundingClientRect().bottom;
      return top >= this.content.getBoundingClientRect().top && bottom <= this.content.getBoundingClientRect().bottom;
    };
    return VirtualContentRenderer2;
  }(ContentRender)
);
var VirtualHeaderRenderer = (
  /** @class */
  function(_super) {
    __extends36(VirtualHeaderRenderer2, _super);
    function VirtualHeaderRenderer2(parent, locator) {
      var _this = _super.call(this, parent, locator) || this;
      _this.virtualEle = new VirtualElementHandler();
      _this.isMovable = false;
      _this.gen = new VirtualRowModelGenerator(_this.parent);
      _this.parent.on(columnVisibilityChanged, _this.setVisible, _this);
      _this.parent.on(refreshVirtualBlock, function(e) {
        return e.virtualInfo.sentinelInfo.axis === "X" ? _this.refreshUI() : null;
      }, _this);
      return _this;
    }
    VirtualHeaderRenderer2.prototype.renderTable = function() {
      this.gen.refreshColOffsets();
      this.parent.setColumnIndexesInView(this.gen.getColumnIndexes(this.getPanel().querySelector("." + headerContent)));
      _super.prototype.renderTable.call(this);
      this.virtualEle.table = this.getTable();
      this.virtualEle.content = this.getPanel().querySelector("." + headerContent);
      this.virtualEle.content.style.position = "relative";
      this.virtualEle.renderWrapper();
      !(this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) && this.parent.enableColumnVirtualization ? this.virtualEle.renderPlaceHolder() : this.virtualEle.renderPlaceHolder("absolute");
    };
    VirtualHeaderRenderer2.prototype.appendContent = function(table2) {
      this.virtualEle.wrapper.appendChild(table2);
    };
    VirtualHeaderRenderer2.prototype.refreshUI = function() {
      this.gen.refreshColOffsets();
      this.parent.setColumnIndexesInView(this.gen.getColumnIndexes(this.getPanel().querySelector("." + headerContent)));
      _super.prototype.refreshUI.call(this);
    };
    VirtualHeaderRenderer2.prototype.setVisible = function(columns) {
      var gObj = this.parent;
      var displayVal;
      var idx;
      var needFullRefresh;
      for (var c = 0, clen = columns.length; c < clen; c++) {
        var column = columns[parseInt(c.toString(), 10)];
        idx = gObj.getNormalizedColumnIndex(column.uid);
        displayVal = column.visible ? "" : "none";
        var colGrp = this.getColGroup().children;
        if (gObj.getColumnByField(column.field)) {
          setStyleAttribute(colGrp[parseInt(idx.toString(), 10)], {
            "display": displayVal
          });
        }
        if (gObj.enableColumnVirtualization && !gObj.groupSettings.columns.length) {
          var tablewidth = void 0;
          if (column.visible) {
            tablewidth = this.virtualEle.wrapper.offsetWidth + parseInt(column.width.toString(), 10);
          } else {
            tablewidth = this.virtualEle.wrapper.offsetWidth - parseInt(column.width.toString(), 10);
          }
          if (tablewidth > gObj.width) {
            this.setDisplayNone(column, displayVal);
            this.virtualEle.setWrapperWidth(tablewidth + "");
            this.gen.refreshColOffsets();
          } else {
            needFullRefresh = true;
          }
        } else {
          needFullRefresh = true;
        }
        if (needFullRefresh) {
          this.refreshUI();
        }
      }
    };
    VirtualHeaderRenderer2.prototype.setDisplayNone = function(col, displayVal) {
      var table2 = this.getTable();
      for (var _i = 0, _a = [].slice.apply(table2.querySelectorAll("th.e-headercell")); _i < _a.length; _i++) {
        var ele = _a[_i];
        if (ele.querySelector("[e-mappinguid]") && ele.querySelector("[e-mappinguid]").getAttribute("e-mappinguid") === col.uid) {
          setStyleAttribute(ele, {
            "display": displayVal
          });
          if (displayVal === "") {
            removeClass([ele], "e-hide");
          }
          break;
        }
      }
    };
    return VirtualHeaderRenderer2;
  }(HeaderRender)
);
var VirtualElementHandler = (
  /** @class */
  function() {
    function VirtualElementHandler2() {
    }
    VirtualElementHandler2.prototype.renderWrapper = function(height) {
      this.wrapper = createElement("div", {
        className: "e-virtualtable"
      });
      this.wrapper.style.minHeight = formatUnit(height);
      this.wrapper.appendChild(this.table);
      this.content.appendChild(this.wrapper);
    };
    VirtualElementHandler2.prototype.renderPlaceHolder = function(position) {
      if (position === void 0) {
        position = "relative";
      }
      this.placeholder = createElement("div", {
        className: "e-virtualtrack"
      });
      this.placeholder.style.position = position;
      this.content.appendChild(this.placeholder);
    };
    VirtualElementHandler2.prototype.renderFrozenWrapper = function(height) {
      this.wrapper = createElement("div", {
        className: "e-virtualtable"
      });
      this.wrapper.style.cssText = "min-height:" + formatUnit(height) + "; display: flex;";
      this.content.appendChild(this.wrapper);
    };
    VirtualElementHandler2.prototype.renderFrozenPlaceHolder = function() {
      this.placeholder = createElement("div", {
        className: "e-virtualtrack"
      });
      this.content.appendChild(this.placeholder);
    };
    VirtualElementHandler2.prototype.adjustTable = function(xValue, yValue) {
      this.wrapper.style.transform = "translate(" + xValue + "px, " + yValue + "px)";
    };
    VirtualElementHandler2.prototype.setWrapperWidth = function(width, full) {
      if (width && width.indexOf("%") === -1 && !(this.content.getBoundingClientRect().width < parseInt(width, 10))) {
        width = void 0;
        full = true;
      }
      this.wrapper.style.width = width ? width + "px" : full ? "100%" : "";
    };
    VirtualElementHandler2.prototype.setVirtualHeight = function(height, width) {
      this.placeholder.style.height = !isNullOrUndefined(height) ? height + "px" : "0px";
      if (width && width.indexOf("%") === -1 && !(this.content.getBoundingClientRect().width < parseInt(width, 10))) {
        width = "100%";
      }
      this.placeholder.style.width = width;
    };
    VirtualElementHandler2.prototype.setFreezeWrapperWidth = function(wrapper, width, full) {
      wrapper.style.width = width ? width + "px" : full ? "100%" : "";
    };
    return VirtualElementHandler2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/virtual-scroll.js
var VirtualScroll2 = (
  /** @class */
  function() {
    function VirtualScroll3(parent, locator) {
      this.parent = parent;
      this.locator = locator;
      this.addEventListener();
    }
    VirtualScroll3.prototype.getModuleName = function() {
      return "virtualscroll";
    };
    VirtualScroll3.prototype.instantiateRenderer = function() {
      this.parent.log(["limitation", "virtual_height"], "virtualization");
      var renderer = this.locator.getService("rendererFactory");
      if (this.parent.enableColumnVirtualization) {
        renderer.addRenderer(RenderType.Header, new VirtualHeaderRenderer(this.parent, this.locator));
      }
      renderer.addRenderer(RenderType.Content, new VirtualContentRenderer(this.parent, this.locator));
      if (!(!this.parent.enableVirtualization && this.parent.enableColumnVirtualization)) {
        this.ensurePageSize();
      }
    };
    VirtualScroll3.prototype.ensurePageSize = function() {
      var rowHeight2 = this.parent.getRowHeight();
      var vHeight = this.parent.height.toString().indexOf("%") < 0 ? this.parent.height : this.parent.element.getBoundingClientRect().height;
      this.blockSize = ~~(parseFloat(vHeight.toString()) / rowHeight2);
      var height = this.blockSize * 2;
      var size = this.parent.pageSettings.pageSize;
      this.parent.setProperties({
        pageSettings: {
          pageSize: size < height ? height : size
        }
      }, true);
    };
    VirtualScroll3.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(initialLoad, this.instantiateRenderer, this);
      this.parent.on(columnWidthChanged, this.refreshVirtualElement, this);
      this.parent.on(createVirtualValidationForm, this.createVirtualValidationForm, this);
      this.parent.on(validateVirtualForm, this.virtualEditFormValidation, this);
      this.parent.on(destroy, this.destroy, this);
    };
    VirtualScroll3.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(initialLoad, this.instantiateRenderer);
      this.parent.off(columnWidthChanged, this.refreshVirtualElement);
      this.parent.off(createVirtualValidationForm, this.createVirtualValidationForm);
      this.parent.off(validateVirtualForm, this.virtualEditFormValidation);
      this.parent.off(destroy, this.destroy);
    };
    VirtualScroll3.prototype.getCurrentEditedData = function(prevData) {
      var data = {
        virtualData: extend({}, {}, prevData, true),
        isAdd: false,
        isScroll: false,
        endEdit: true
      };
      this.parent.notify(getVirtualData, data);
      return data.virtualData;
    };
    VirtualScroll3.prototype.createVirtualValidationForm = function(e) {
      var gObj = this.parent;
      if (gObj.enableVirtualization && gObj.editSettings.mode === "Normal") {
        var cols = gObj.columns;
        var rowRenderer = new RowRenderer(this.locator, null, this.parent);
        var rowObj = extend({}, {}, gObj.getRowObjectFromUID(e.uid), true);
        gObj.notify(refreshVirtualEditFormCells, rowObj);
        var args = e.argsCreator(this.getCurrentEditedData(e.prevData), {}, false);
        args.isCustomFormValidation = true;
        args.row = rowRenderer.render(rowObj, cols);
        e.renderer.update(args);
        var rules = {};
        for (var i = 0; i < cols.length; i++) {
          if (!cols[parseInt(i.toString(), 10)].visible) {
            continue;
          }
          if (cols[parseInt(i.toString(), 10)].validationRules) {
            setValidationRuels(cols[parseInt(i.toString(), 10)], 0, rules, {}, {}, cols.length, true);
          }
        }
        args.form.classList.add("e-virtual-validation");
        gObj.editModule.virtualFormObj = gObj.editModule.createFormObj(args.form, rules);
      }
    };
    VirtualScroll3.prototype.virtualEditFormValidation = function(args) {
      var gObj = this.parent;
      var error = gObj.element.querySelector('.e-griderror:not([style*="display: none"])');
      if (gObj.editModule.virtualFormObj) {
        if (error && error.style.display !== "none") {
          var errorDomRect = error.getBoundingClientRect();
          var forms = gObj.element.querySelectorAll(".e-gridform");
          var form = forms[0];
          var contentLeft = gObj.getContent().getBoundingClientRect().left;
          if (forms.length > 1) {
            form = forms[1];
          }
          if (errorDomRect.left < contentLeft || errorDomRect.right > gObj.element.offsetWidth) {
            var tooltip = form.querySelector('.e-tooltip-wrap:not([style*="display: none"])');
            this.scrollToEdit(tooltip, {
              editIdx: args.editIdx,
              addIdx: args.addIdx
            }, true);
          }
        } else if (gObj.editModule.virtualFormObj && (!error || error.style.display === "none")) {
          var existingErrors = gObj.editModule.virtualFormObj.element.querySelectorAll('.e-tooltip-wrap:not([style*="display: none"])');
          for (var i = 0; i < existingErrors.length; i++) {
            remove(existingErrors[parseInt(i.toString(), 10)]);
          }
          this.setEditedDataToValidationForm(gObj.editModule.virtualFormObj.element, this.getCurrentEditedData(args.prevData));
          args.isValid = gObj.editModule.virtualFormObj.validate();
          if (!args.isValid) {
            var tooltip = gObj.editModule.virtualFormObj.element.querySelector('.e-tooltip-wrap:not([style*="display: none"])');
            this.scrollToEdit(tooltip, {
              editIdx: args.editIdx,
              addIdx: args.addIdx
            });
          }
        }
      }
    };
    VirtualScroll3.prototype.scrollToEdit = function(tooltip, args, isRenderer) {
      var gObj = this.parent;
      if (tooltip) {
        var cols = gObj.columnModel;
        var field = setComplexFieldID(tooltip.id).split("_")[0];
        var col = gObj.getColumnByField(field);
        var scrollTop = this.parent.getContent().firstElementChild.scrollTop;
        var row2 = gObj.getRowByIndex(args.editIdx);
        if (!isNullOrUndefined(args.addIdx) && scrollTop > 0 || !isNullOrUndefined(args.editIdx) && !row2 || isRenderer || !col) {
          var validationCol = void 0;
          for (var i = 0; i < cols.length && !col; i++) {
            if (cols[parseInt(i.toString(), 10)].field === field) {
              validationCol = cols[parseInt(i.toString(), 10)];
              break;
            }
          }
          if (isRenderer) {
            validationCol = col;
          }
          this.parent.notify(scrollToEdit, validationCol);
        }
      }
    };
    VirtualScroll3.prototype.setEditedDataToValidationForm = function(form, editedData) {
      var inputs = [].slice.call(form.getElementsByClassName("e-field"));
      for (var i = 0, len = inputs.length; i < len; i++) {
        var col = getColumnModelByUid(this.parent, inputs[parseInt(i.toString(), 10)].getAttribute("e-mappinguid"));
        if (col.field) {
          var value = getValue(col.field, editedData);
          value = isNullOrUndefined(value) ? "" : value;
          inputs[parseInt(i.toString(), 10)].value = value;
        }
      }
    };
    VirtualScroll3.prototype.refreshVirtualElement = function(args) {
      if (this.parent.enableColumnVirtualization && args.module === "resize") {
        var renderer = this.locator.getService("rendererFactory");
        renderer.getRenderer(RenderType.Content).refreshVirtualElement();
      }
    };
    VirtualScroll3.prototype.destroy = function() {
      this.removeEventListener();
    };
    return VirtualScroll3;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/inline-edit-renderer.js
var InlineEditRender = (
  /** @class */
  function() {
    function InlineEditRender2(parent) {
      this.parent = parent;
    }
    InlineEditRender2.prototype.addNew = function(elements, args) {
      this.isEdit = false;
      var tbody2;
      if ((this.parent.frozenRows || (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) && this.parent.editSettings.showAddNewRow) && this.parent.editSettings.newRowPosition === "Top") {
        tbody2 = this.parent.getHeaderTable().querySelector(tbody);
      } else {
        tbody2 = this.parent.getContentTable().querySelector(tbody);
      }
      args.row = this.parent.createElement("tr", {
        className: "e-row e-addedrow"
      });
      if (this.parent.getContentTable().querySelector(".e-emptyrow") && !this.parent.editSettings.showAddNewRow) {
        var emptyRow = this.parent.getContentTable().querySelector(".e-emptyrow");
        emptyRow.parentNode.removeChild(emptyRow);
        if (this.parent.frozenRows && this.parent.element.querySelector(".e-frozenrow-empty")) {
          this.parent.element.querySelector(".e-frozenrow-empty").classList.remove("e-frozenrow-empty");
        }
      }
      if (this.parent.editSettings.newRowPosition === "Top") {
        tbody2.insertBefore(args.row, tbody2.firstChild);
      } else {
        tbody2.appendChild(args.row);
      }
      args.row.appendChild(this.getEditElement(elements, false, void 0, args, true));
      this.parent.editModule.checkLastRow(args.row, args);
    };
    InlineEditRender2.prototype.update = function(elements, args) {
      this.isEdit = true;
      var tdElement = [].slice.call(args.row.querySelectorAll("td.e-rowcell"));
      args.row.innerHTML = "";
      args.row.appendChild(this.getEditElement(elements, true, tdElement, args, true));
      args.row.classList.add(editedRow);
      this.parent.editModule.checkLastRow(args.row, args);
    };
    InlineEditRender2.prototype.getEditElement = function(elements, isEdit, tdElement, args, isFrozen) {
      var gObj = this.parent;
      var gLen = 0;
      var isDetail = !isNullOrUndefined(gObj.detailTemplate) || !isNullOrUndefined(gObj.childGrid) ? 1 : 0;
      if (gObj.allowGrouping) {
        gLen = gObj.groupSettings.columns.length;
      }
      var td = this.parent.createElement("td", {
        className: "e-editcell e-normaledit",
        attrs: {
          colspan: (gObj.getCurrentVisibleColumns(this.parent.enableColumnVirtualization).length + this.parent.getIndentCount()).toString()
        }
      });
      var form = args.form = this.parent.createElement("form", {
        id: gObj.element.id + "EditForm",
        className: "e-gridform"
      });
      if (this.parent.editSettings.template) {
        this.appendChildren(form, args.rowData, isFrozen);
        td.appendChild(form);
        return td;
      }
      var table2 = this.parent.createElement("table", {
        className: "e-table e-inline-edit",
        attrs: {
          cellspacing: "0.25",
          role: "grid"
        }
      });
      table2.appendChild(gObj.getContentTable().querySelector(colGroup).cloneNode(true));
      var tbody2 = this.parent.createElement(tbody, {
        attrs: {
          role: "rowgroup"
        }
      });
      var tr = this.parent.createElement("tr");
      if (this.parent.rowHeight) {
        tr.style.height = this.parent.rowHeight + "px";
      }
      var i = 0;
      if (isDetail) {
        tr.insertBefore(this.parent.createElement("td", {
          className: "e-detailrowcollapse"
        }), tr.firstChild);
      }
      if (gObj.isRowDragable()) {
        tr.appendChild(this.parent.createElement("td", {
          className: "e-dragindentcell"
        }));
      }
      while (i < gLen) {
        tr.appendChild(this.parent.createElement("td", {
          className: "e-indentcell"
        }));
        i++;
      }
      var m = 0;
      i = 0;
      var inputValue;
      var isFirstVisibleCell = true;
      var cols = args.isCustomFormValidation ? this.parent.columnModel : gObj.getColumns();
      while (isEdit && m < tdElement.length && i < cols.length || i < cols.length) {
        var span = isEdit && tdElement[parseInt(m.toString(), 10)] ? tdElement[parseInt(m.toString(), 10)].getAttribute("colspan") : null;
        var col = cols[parseInt(i.toString(), 10)];
        inputValue = elements[col.uid].value;
        var td_1 = this.parent.createElement("td", {
          className: rowCell,
          attrs: {
            "colspan": span ? span : ""
          }
        });
        td_1.style.cssText = col.textAlign ? "text-align: " + col.textAlign + ";" : "";
        if (col.visible) {
          td_1.appendChild(elements[col.uid]);
          if (this.parent.rowRenderingMode === "Vertical") {
            setStyleAndAttributes(td_1, {
              "data-cell": col.headerText
            });
            if (i === 0) {
              td_1.classList.add("e-responsive-editcell");
            }
          }
          if (col.editType === "booleanedit") {
            td_1.classList.add("e-boolcell");
          } else if (col.commands || col.commandsTemplate) {
            addClass([td_1], "e-unboundcell");
          }
          if (!this.parent.enableRtl && (gObj.gridLines === "Vertical" || gObj.gridLines === "Both") && gLen && isFirstVisibleCell) {
            td_1.classList.add("e-grid-group-first-cell");
            isFirstVisibleCell = false;
          }
        } else {
          td_1.classList.add("e-hide");
        }
        if (this.parent.isFrozenGrid()) {
          addStickyColumnPosition(this.parent, col, td_1);
          if (this.parent.isSpan) {
            var colSpan = td_1.getAttribute("colspan") ? parseInt(td_1.getAttribute("colspan"), 10) : 1;
            resetColandRowSpanStickyPosition(this.parent, col, td_1, colSpan);
          }
          if (this.parent.enableColumnVirtualization) {
            if (col.freeze === "Left" && !isNullOrUndefined(col.valueX)) {
              td_1.style.left = col.valueX - this.parent.translateX + "px";
            } else if (col.freeze === "Right" && !isNullOrUndefined(col.valueX)) {
              td_1.style.right = col.valueX + this.parent.translateX + "px";
            } else if (col.freeze === "Fixed") {
              td_1.style.left = this.parent.leftrightColumnWidth("left") - this.parent.translateX + "px";
              td_1.style.right = this.parent.leftrightColumnWidth("right") + this.parent.translateX + "px";
            }
          }
        }
        td_1.setAttribute("aria-label", inputValue + this.parent.localeObj.getConstant("ColumnHeader") + col.headerText);
        tr.appendChild(td_1);
        i = span ? i + parseInt(span, 10) : i + 1;
        m++;
      }
      addFixedColumnBorder(tr);
      tbody2.appendChild(tr);
      table2.appendChild(tbody2);
      form.appendChild(table2);
      td.appendChild(form);
      return td;
    };
    InlineEditRender2.prototype.removeEventListener = function() {
    };
    InlineEditRender2.prototype.appendChildren = function(form, data, isFrozen) {
      var _this = this;
      var dummyData = extend({}, data, {
        isAdd: !this.isEdit,
        isFrozen
      }, true);
      var editTemplateID = this.parent.element.id + "editSettingsTemplate";
      if (this.parent.isReact && typeof this.parent.editSettings.template !== "string" && !(this.parent.editSettings.template.prototype && this.parent.editSettings.template.prototype.CSPTemplate)) {
        this.parent.getEditTemplate()(dummyData, this.parent, "editSettingsTemplate", editTemplateID, null, null, form);
        this.parent.renderTemplates();
      } else {
        appendChildren(form, this.parent.getEditTemplate()(dummyData, this.parent, "editSettingsTemplate", editTemplateID, null, null, null, this.parent.root));
      }
      var setRules = function() {
        var cols = _this.parent.getColumns();
        for (var i = 0; i < cols.length; i++) {
          if (cols[parseInt(i.toString(), 10)].validationRules) {
            _this.parent.editModule.formObj.rules[cols[parseInt(i.toString(), 10)].field] = cols[parseInt(i.toString(), 10)].validationRules;
          }
        }
      };
    };
    return InlineEditRender2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/batch-edit-renderer.js
var BatchEditRender = (
  /** @class */
  function() {
    function BatchEditRender2(parent) {
      this.parent = parent;
    }
    BatchEditRender2.prototype.update = function(elements, args) {
      if (this.parent.isReact && args.columnObject && args.columnObject.template) {
        var parentRow = args.cell.parentElement;
        var newTd = args.cell.cloneNode(true);
        parentRow.insertBefore(newTd, args.cell);
        newTd.focus();
        args.cell.remove();
        args.cell = newTd;
      }
      args.cell.setAttribute("aria-label", args.cell.innerHTML + this.parent.localeObj.getConstant("ColumnHeader") + args.columnObject.field);
      args.cell.innerHTML = "";
      args.cell.appendChild(this.getEditElement(elements, args));
      args.cell.classList.add("e-editedbatchcell");
      classList(args.row, [editedRow, "e-batchrow"], []);
    };
    BatchEditRender2.prototype.getEditElement = function(elements, args) {
      var gObj = this.parent;
      var form = this.parent.createElement("form", {
        id: gObj.element.id + "EditForm",
        className: "e-gridform"
      });
      form.appendChild(elements[args.columnObject.uid]);
      if (args.columnObject.editType === "booleanedit") {
        args.cell.classList.add("e-boolcell");
      }
      if (!args.columnObject.editType) {
        args.cell.classList.add("e-inputbox");
      }
      return form;
    };
    return BatchEditRender2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/dialog-edit-renderer.js
var DialogEditRender = (
  /** @class */
  function() {
    function DialogEditRender2(parent, serviceLocator) {
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(dialogDestroy, this.destroy, this);
      this.parent.on(destroy, this.destroy, this);
    }
    DialogEditRender2.prototype.setLocaleObj = function() {
      this.l10n = this.serviceLocator.getService("localization");
    };
    DialogEditRender2.prototype.addNew = function(elements, args) {
      this.isEdit = false;
      this.createDialog(elements, args);
    };
    DialogEditRender2.prototype.update = function(elements, args) {
      this.isEdit = true;
      this.createDialog(elements, args);
    };
    DialogEditRender2.prototype.createDialogHeader = function(args) {
      var _this = this;
      var gObj = this.parent;
      var header;
      if (this.parent.enableAdaptiveUI) {
        var responsiveDlgRenderer = new ResponsiveDialogRenderer(this.parent, this.serviceLocator);
        responsiveDlgRenderer.action = this.isEdit ? ResponsiveDialogAction.isEdit : ResponsiveDialogAction.isAdd;
        return responsiveDlgRenderer.renderResponsiveHeader(void 0, args);
      } else {
        if (gObj.editSettings.headerTemplate) {
          header = initializeCSPTemplate(function() {
            return _this.getDialogEditTemplateElement("HeaderTemplate", args).outerHTML;
          });
        } else if (this.isEdit) {
          header = this.l10n.getConstant("EditFormTitle") + args.primaryKeyValue[0];
        } else {
          header = this.l10n.getConstant("AddFormTitle");
        }
      }
      return header;
    };
    DialogEditRender2.prototype.createDialog = function(elements, args) {
      var _this = this;
      var gObj = this.parent;
      this.dialog = this.parent.createElement("div", {
        id: gObj.element.id + "_dialogEdit_wrapper"
      });
      this.dialog.style.width = "auto";
      if (gObj.enableAdaptiveUI) {
        this.dialog.classList.add("e-responsive-dialog");
      }
      gObj.element.appendChild(this.dialog);
      this.setLocaleObj();
      this.dialog.setAttribute("aria-label", this.l10n.getConstant("DialogEdit"));
      this.dialogObj = new Dialog(extend({
        header: this.createDialogHeader(args),
        isModal: true,
        visible: true,
        cssClass: this.parent.cssClass ? "e-edit-dialog " + this.parent.cssClass : "e-edit-dialog",
        content: this.getEditElement(elements, args),
        showCloseIcon: true,
        allowDragging: true,
        // position: position,
        close: this.dialogClose.bind(this),
        created: this.dialogCreated.bind(this),
        closeOnEscape: true,
        width: gObj.editSettings.template ? "auto" : "330px",
        target: args.target ? args.target : document.body,
        animationSettings: {
          effect: "None"
        },
        footerTemplate: gObj.editSettings.footerTemplate ? initializeCSPTemplate(function() {
          return _this.getDialogEditTemplateElement("FooterTemplate", args).outerHTML;
        }) : null,
        buttons: [{
          click: this.btnClick.bind(this),
          buttonModel: {
            content: this.l10n.getConstant("SaveButton"),
            cssClass: this.parent.cssClass ? "e-primary " + this.parent.cssClass : "e-primary",
            isPrimary: true
          }
        }, {
          click: this.btnClick.bind(this),
          buttonModel: {
            cssClass: this.parent.cssClass ? "e-flat " + this.parent.cssClass : "e-flat",
            content: this.l10n.getConstant("CancelButton")
          }
        }]
      }, gObj.editSettings.dialog ? gObj.editSettings.dialog.params || {} : {}));
      args.dialog = this.dialogObj;
      var isStringTemplate = "isStringTemplate";
      this.dialogObj["" + isStringTemplate] = true;
      this.renderResponsiveDialog();
      this.dialogObj.appendTo(this.dialog);
      applyBiggerTheme(this.parent.element, this.dialogObj.element.parentElement);
      if (gObj.enableAdaptiveUI) {
        this.dialogObj.show(true);
      }
    };
    DialogEditRender2.prototype.dialogCreated = function() {
      addBiggerDialog(this.parent);
    };
    DialogEditRender2.prototype.renderResponsiveDialog = function() {
      var _this = this;
      if (this.parent.enableAdaptiveUI) {
        if (this.parent.adaptiveDlgTarget) {
          this.dialogObj.target = this.parent.adaptiveDlgTarget;
        }
        this.dialogObj.buttons = [{}];
        this.dialogObj.showCloseIcon = true;
        this.dialogObj.visible = false;
        this.dialogObj.width = "100%";
        this.dialogObj.open = function() {
          _this.dialogObj.element.style.maxHeight = "100%";
        };
      }
    };
    DialogEditRender2.prototype.btnClick = function(e) {
      if (this.l10n.getConstant("CancelButton").toLowerCase() === e.target.innerText.trim().toLowerCase()) {
        this.dialogClose();
      } else {
        this.parent.endEdit();
      }
    };
    DialogEditRender2.prototype.dialogClose = function() {
      this.parent.closeEdit();
    };
    DialogEditRender2.prototype.destroy = function(args) {
      var dialogEditTemplates = ["template", "headerTemplate", "footerTemplate"];
      for (var i = 0; i < dialogEditTemplates.length; i++) {
        if (this.parent.editSettings[dialogEditTemplates[parseInt(i.toString(), 10)]]) {
          var templateName = dialogEditTemplates[parseInt(i.toString(), 10)].charAt(0).toUpperCase() + dialogEditTemplates[parseInt(i.toString(), 10)].slice(1);
          var editTemplateID = this.parent.element.id + "editSettings" + templateName;
          updateBlazorTemplate(editTemplateID, templateName, this.parent.editSettings);
        }
      }
      this.parent.notify(destroyForm, {});
      this.parent.isEdit = false;
      this.parent.notify(toolbarRefresh, {});
      if (this.dialog && !this.dialogObj.isDestroyed) {
        this.dialogObj.destroy();
        remove(this.dialog);
      }
    };
    DialogEditRender2.prototype.getDialogEditTemplateElement = function(dialogTemp, args) {
      var tempDiv = this.parent.createElement("div", {
        className: "e-dialog" + dialogTemp
      });
      var dummyData = extend({}, args.rowData, {
        isAdd: !this.isEdit
      }, true);
      var templateID = this.parent.element.id + "editSettings" + dialogTemp;
      appendChildren(tempDiv, (dialogTemp === "HeaderTemplate" ? this.parent.getEditHeaderTemplate() : this.parent.getEditFooterTemplate())(dummyData, this.parent, "editSettings" + dialogTemp, templateID));
      updateBlazorTemplate(templateID, dialogTemp, this.parent.editSettings);
      return tempDiv;
    };
    DialogEditRender2.prototype.getEditElement = function(elements, args) {
      var _this = this;
      var gObj = this.parent;
      var div = this.parent.createElement("div", {
        className: this.isEdit ? editedRow : "e-insertedrow"
      });
      var form = args.form = this.parent.createElement("form", {
        id: gObj.element.id + "EditForm",
        className: "e-gridform"
      });
      if (this.parent.editSettings.template) {
        var editTemplateID = this.parent.element.id + "editSettingsTemplate";
        var dummyData = extend({}, args.rowData, {
          isAdd: !this.isEdit
        }, true);
        var isReactCompiler = this.parent.isReact && typeof this.parent.editSettings.template !== "string" && !(this.parent.editSettings.template.prototype && this.parent.editSettings.template.prototype.CSPTemplate);
        var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
        if (isReactCompiler || isReactChild) {
          this.parent.getEditTemplate()(dummyData, this.parent, "editSettingsTemplate", editTemplateID, null, null, form);
          this.parent.renderTemplates();
        } else {
          appendChildren(form, this.parent.getEditTemplate()(dummyData, this.parent, "editSettingsTemplate", editTemplateID, null, null, null, gObj.root));
        }
        var setRules = function() {
          var columns = _this.parent.getColumns();
          for (var i2 = 0; i2 < columns.length; i2++) {
            if (columns[parseInt(i2.toString(), 10)].validationRules) {
              _this.parent.editModule.formObj.rules[columns[parseInt(i2.toString(), 10)].field] = columns[parseInt(i2.toString(), 10)].validationRules;
            }
          }
        };
        updateBlazorTemplate(editTemplateID, "Template", this.parent.editSettings, true, setRules);
        div.appendChild(form);
        return div;
      }
      var table2 = this.parent.createElement("table", {
        className: table,
        attrs: {
          cellspacing: "6px",
          role: "grid"
        }
      });
      var tbody2 = this.parent.createElement(tbody, {
        attrs: {
          role: "rowgroup"
        }
      });
      var cols = gObj.getColumns();
      for (var i = 0; i < cols.length; i++) {
        if (this.parent.editModule.checkColumnIsGrouped(cols[parseInt(i.toString(), 10)]) || cols[parseInt(i.toString(), 10)].commands || cols[parseInt(i.toString(), 10)].commandsTemplate || cols[parseInt(i.toString(), 10)].type === "checkbox") {
          continue;
        }
        var tr = this.parent.createElement("tr", {
          attrs: {
            role: "row"
          }
        });
        var dataCell = this.parent.createElement("td", {
          className: rowCell
        });
        dataCell.style.cssText = "text-align: " + (this.parent.enableRtl ? "right" : "left") + "; width: 190px;";
        elements[cols[parseInt(i.toString(), 10)].uid].classList.remove("e-input");
        dataCell.appendChild(elements[cols[parseInt(i.toString(), 10)].uid]);
        tr.appendChild(dataCell);
        tbody2.appendChild(tr);
      }
      table2.appendChild(tbody2);
      form.appendChild(table2);
      div.appendChild(form);
      return div;
    };
    DialogEditRender2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(dialogDestroy, this.destroy);
      this.parent.off(destroy, this.destroy);
    };
    return DialogEditRender2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/edit-renderer.js
var EditRender = (
  /** @class */
  function() {
    function EditRender2(parent, serviceLocator) {
      this.editType = {
        "Inline": InlineEditRender,
        "Normal": InlineEditRender,
        "Batch": BatchEditRender,
        "Dialog": DialogEditRender
      };
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      this.renderer = new this.editType[this.parent.editSettings.mode](parent, serviceLocator);
      this.focus = serviceLocator.getService("focus");
    }
    EditRender2.prototype.addNew = function(args) {
      this.renderer.addNew(this.getEditElements(args), args);
      this.convertWidget(args);
    };
    EditRender2.prototype.update = function(args) {
      this.renderer.update(this.getEditElements(args), args);
      var isCustomFormValidation = args.isCustomFormValidation;
      if (!isCustomFormValidation) {
        this.parent.notify(beforeStartEdit, args);
        this.convertWidget(args);
      }
    };
    EditRender2.prototype.convertWidget = function(args) {
      var gObj = this.parent;
      var isFocused;
      var cell;
      var value;
      var form = gObj.editSettings.mode === "Dialog" ? select("#" + gObj.element.id + "_dialogEdit_wrapper .e-gridform", document) : gObj.editSettings.showAddNewRow && gObj.element.querySelector(".e-editedrow") ? gObj.element.querySelector(".e-editedrow").getElementsByClassName("e-gridform")[0] : gObj.element.getElementsByClassName("e-gridform")[0];
      var cols = gObj.editSettings.mode !== "Batch" ? gObj.getColumns() : [gObj.getColumnByField(args.columnName)];
      for (var _i = 0, cols_1 = cols; _i < cols_1.length; _i++) {
        var col = cols_1[_i];
        if (this.parent.editSettings.template && !isNullOrUndefined(col.field)) {
          var cellArgs = extend({}, args);
          cellArgs.element = form.querySelector("[name=" + getComplexFieldID(col.field) + "]");
          if (typeof col.edit.write === "string") {
            getObject(col.edit.write, window)(cellArgs);
          } else {
            col.edit.write(cellArgs);
          }
          continue;
        }
        if (this.parent.editModule.checkColumnIsGrouped(col) || col.commands) {
          continue;
        }
        value = col.valueAccessor(col.field, args.rowData, col);
        cell = form.querySelector("[e-mappinguid=" + col.uid + "]");
        var temp = col.edit.write;
        if (!isNullOrUndefined(cell)) {
          if (typeof temp === "string") {
            temp = getObject(temp, window);
            temp({
              rowData: args.rowData,
              element: cell,
              column: col,
              requestType: args.requestType,
              row: args.row,
              foreignKeyData: col.isForeignColumn() && getObject(col.field, args.foreignKeyData)
            });
          } else {
            col.edit.write({
              rowData: args.rowData,
              element: cell,
              column: col,
              requestType: args.requestType,
              row: args.row,
              foreignKeyData: col.isForeignColumn() && getObject(col.field, args.foreignKeyData)
            });
          }
          if (!isFocused && isNullOrUndefined(cell.getAttribute("disabled")) && !parentsUntil(cell, "e-checkbox-disabled")) {
            this.focusElement(cell, args.type);
            isFocused = true;
          }
        }
      }
    };
    EditRender2.prototype.focusElement = function(elem, type) {
      var chkBox = this.parent.element.querySelector(".e-edit-checkselect");
      if (!isNullOrUndefined(chkBox) && chkBox.nextElementSibling) {
        chkBox.nextElementSibling.classList.add("e-focus");
      }
      if (this.parent.editSettings.mode === "Batch") {
        this.focus.onClick({
          target: closest(elem, "td")
        }, true);
      } else {
        var isFocus = (this.parent.enableVirtualization || this.parent.enableColumnVirtualization) && this.parent.editSettings.mode === "Normal" ? false : true;
        var focusElement = elem.classList.contains("e-dropdownlist") ? elem.parentElement : elem;
        if ((isFocus || (this.parent.enableVirtualization || this.parent.enableColumnVirtualization) && this.parent.editSettings.newRowPosition === "Bottom" && parentsUntil(elem, addedRow)) && (!this.parent.editSettings.showAddNewRow || this.parent.editSettings.showAddNewRow && !parentsUntil(elem, addedRow) || this.parent.addNewRowFocus)) {
          focusElement.focus();
          if (this.parent.enableVirtualization && this.parent.contentModule && this.parent.contentModule.content) {
            this.parent.contentModule.content.scrollTop += this.parent.getRowHeight();
          }
        } else {
          focusElement.focus({
            preventScroll: true
          });
        }
      }
      if (elem.classList.contains("e-defaultcell")) {
        elem.setSelectionRange(elem.value.length, elem.value.length);
      }
    };
    EditRender2.prototype.getEditElements = function(args) {
      var gObj = this.parent;
      var elements = {};
      var cols = gObj.editSettings.mode !== "Batch" ? gObj.getColumns() : [gObj.getColumnByField(args.columnName)];
      if (args.isCustomFormValidation) {
        cols = this.parent.columnModel;
      }
      if (this.parent.editSettings.template) {
        return {};
      }
      for (var i = 0, len = cols.length; i < len; i++) {
        var col = cols[parseInt(i.toString(), 10)];
        if (col.commands || col.commandsTemplate) {
          var cellRendererFact = this.serviceLocator.getService("cellRendererFactory");
          var model = new RowModelGenerator(this.parent);
          var cellRenderer = cellRendererFact.getCellRenderer(CellType.CommandColumn);
          var cells = model.generateRows(args.rowData)[0].cells;
          var cell = cells.filter(function(cell2) {
            return cell2.rowID;
          });
          var td = cellRenderer.render(cell[parseInt(i.toString(), 10)], args.rowData, {
            "index": args.row ? (parseInt(args.row.getAttribute(ariaRowIndex), 10) - 1).toString() : 0
          }, this.parent.enableVirtualization);
          var div = td.firstElementChild;
          div.setAttribute("textAlign", td.getAttribute("textAlign"));
          elements[col.uid] = div;
          continue;
        }
        if (col.type === "dateonly" && args.rowData[col.field] instanceof Date) {
          var cellValue = args.rowData[col.field];
          args.rowData[col.field] = cellValue.getFullYear() + "-" + padZero(cellValue.getMonth() + 1) + "-" + padZero(cellValue.getDate());
        }
        var value = col.valueAccessor(col.field, args.rowData, col);
        var tArgs = {
          column: col,
          value,
          type: args.requestType,
          data: args.rowData
        };
        var temp = col.edit.create;
        var input = void 0;
        if (col.editTemplate) {
          input = this.parent.createElement("span", {
            attrs: {
              "e-mappinguid": col.uid
            }
          });
          var tempID = this.parent.element.id + col.uid + "editTemplate";
          var tempData = extendObjWithFn({}, args.rowData, {
            column: col
          });
          var isReactCompiler = this.parent.isReact && typeof col.editTemplate !== "string" && !(col.editTemplate.prototype && col.editTemplate.prototype.CSPTemplate);
          var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
          if (isReactCompiler || isReactChild) {
            col.getEditTemplate()(extend({
              "index": args.rowIndex
            }, tempData), this.parent, "editTemplate", tempID, null, null, input);
            this.parent.renderTemplates();
          } else {
            var template = col.getEditTemplate()(extend({
              "index": args.rowIndex
            }, tempData), this.parent, "editTemplate", tempID, null, null, null, gObj.root);
            appendChildren(input, template);
          }
        } else {
          if (typeof temp === "string") {
            temp = getObject(temp, window);
            input = temp(tArgs);
          } else {
            input = col.edit.create(tArgs);
          }
          if (typeof input === "string") {
            var div = this.parent.createElement("div");
            div.innerHTML = input;
            input = div.firstChild;
          }
          var isInput = input.tagName !== "input" && input.querySelectorAll("input").length;
          var complexFieldName = getComplexFieldID(col.field);
          attributes(isInput ? input.querySelector("input") : input, {
            name: complexFieldName,
            "e-mappinguid": col.uid,
            id: gObj.element.id + complexFieldName
          });
          classList(input, ["e-input", "e-field"], []);
          if (col.textAlign === "Right") {
            input.classList.add("e-ralign");
          }
          if ((col.isPrimaryKey || col.isIdentity) && args.requestType === "beginEdit" || col.isIdentity && args.requestType === "add") {
            input.setAttribute("disabled", "");
          }
        }
        elements[col.uid] = input;
      }
      return elements;
    };
    EditRender2.prototype.destroy = function() {
      this.renderer.removeEventListener();
    };
    return EditRender2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/edit-cell-base.js
var EditCellBase = (
  /** @class */
  function() {
    function EditCellBase2(parent) {
      this.parent = parent;
    }
    EditCellBase2.prototype.create = function(args) {
      return createEditElement(this.parent, args.column, "e-field", {
        type: "text"
      });
    };
    EditCellBase2.prototype.read = function(element) {
      return element.ej2_instances[0].value;
    };
    EditCellBase2.prototype.destroy = function() {
      if (this.obj && !this.obj.isDestroyed) {
        if (this.removeEventHandler) {
          this.removeEventHandler();
        }
        this.obj.destroy();
        this.obj.element.remove();
      }
    };
    return EditCellBase2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/boolean-edit-cell.js
var __extends37 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var BooleanEditCell = (
  /** @class */
  function(_super) {
    __extends37(BooleanEditCell2, _super);
    function BooleanEditCell2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.activeClasses = ["e-selectionbackground", "e-active"];
      return _this;
    }
    BooleanEditCell2.prototype.create = function(args) {
      var col = args.column;
      var classNames = "e-field e-boolcell";
      if (col.type === "checkbox") {
        classNames = "e-field e-boolcell e-edit-checkselect";
      }
      this.removeEventHandler = this.removeEventListener;
      return createEditElement(this.parent, args.column, classNames, {
        type: "checkbox",
        value: args.value
      });
    };
    BooleanEditCell2.prototype.read = function(element) {
      return element.checked;
    };
    BooleanEditCell2.prototype.write = function(args) {
      var selectChkBox;
      var chkState;
      if (!isNullOrUndefined(args.row)) {
        selectChkBox = args.row.querySelector(".e-edit-checkselect");
      }
      if (getObject(args.column.field, args.rowData)) {
        chkState = JSON.parse(getObject(args.column.field, args.rowData).toString().toLowerCase());
      }
      if (!isNullOrUndefined(selectChkBox) && args.column.type === "checkbox") {
        this.editType = this.parent.editSettings.mode;
        this.editRow = args.row;
        if (args.requestType !== "add") {
          var row2 = this.parent.getRowObjectFromUID(args.row.getAttribute("data-uid"));
          chkState = row2 ? row2.isSelected : false;
        }
        addRemoveActiveClasses.apply(void 0, [[].slice.call(args.row.getElementsByClassName(rowCell)), chkState].concat(this.activeClasses));
      }
      this.obj = new CheckBox(extend({
        label: this.parent.editSettings.mode !== "Dialog" ? " " : args.column.headerText,
        checked: chkState,
        disabled: !isEditable(args.column, args.requestType, args.element),
        enableRtl: this.parent.enableRtl,
        cssClass: this.parent.cssClass ? this.parent.cssClass : ""
      }, args.column.edit.params));
      this.addEventListener();
      this.obj.appendTo(args.element);
    };
    BooleanEditCell2.prototype.addEventListener = function() {
      this.cbChange = this.checkBoxChange.bind(this);
      this.obj.addEventListener(change, this.cbChange);
    };
    BooleanEditCell2.prototype.removeEventListener = function() {
      if (this.obj.isDestroyed) {
        return;
      }
      this.obj.removeEventListener(change, this.cbChange);
    };
    BooleanEditCell2.prototype.checkBoxChange = function(args) {
      if (this.editRow && this.editType !== "Dialog") {
        var add = false;
        if (!args.checked) {
          this.editRow.removeAttribute("aria-selected");
        } else {
          add = true;
          this.editRow.setAttribute("aria-selected", add.toString());
        }
        addRemoveActiveClasses.apply(void 0, [[].slice.call(this.editRow.getElementsByClassName(rowCell)), add].concat(this.activeClasses));
      }
    };
    return BooleanEditCell2;
  }(EditCellBase)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/dropdown-edit-cell.js
var __extends38 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var DropDownEditCell = (
  /** @class */
  function(_super) {
    __extends38(DropDownEditCell2, _super);
    function DropDownEditCell2(parent) {
      var _this = (
        //constructor
        _super.call(this) || this
      );
      _this.parent = parent;
      _this.flag = false;
      _this.removeEventHandler = _this.removeEventListener;
      return _this;
    }
    DropDownEditCell2.prototype.write = function(args) {
      var isInline = this.parent.editSettings.mode !== "Dialog";
      this.column = args.column;
      var pred = new Predicate(args.column.field, "notequal", null, true, false);
      var params = {};
      if (args.column.edit.params) {
        var keys = Object.keys(args.column.edit.params);
        for (var i = 0; i < keys.length; i++) {
          params[keys[parseInt(i.toString(), 10)]] = keys[parseInt(i.toString(), 10)] === "query" ? args.column.edit.params[keys[parseInt(i.toString(), 10)]].clone() : args.column.edit.params[keys[parseInt(i.toString(), 10)]];
        }
      }
      this.obj = new DropDownList(extend({
        dataSource: this.parent.dataSource instanceof DataManager ? this.parent.dataSource : new DataManager(this.parent.dataSource),
        query: new Query().where(pred).select(args.column.field),
        enabled: isEditable(args.column, args.requestType, args.element) && isCellHaveWidth(parentsUntil(args.element, "e-rowcell")),
        fields: {
          value: args.column.field
        },
        value: getObject(args.column.field, args.rowData),
        enableRtl: this.parent.enableRtl,
        placeholder: isInline ? "" : args.column.headerText,
        popupHeight: "200px",
        floatLabelType: isInline ? "Never" : "Always",
        sortOrder: "Ascending",
        cssClass: this.parent.cssClass ? this.parent.cssClass : null,
        close: this.dropDownClose.bind(this)
      }, params));
      if (this.parent.enableVirtualization) {
        if (params.dataSource) {
          this.obj.dataSource = params.dataSource;
        } else {
          this.obj.dataSource = args.column.isForeignColumn() ? [args.foreignKeyData[0]] : [args.rowData];
        }
      }
      this.addEventListener();
      this.obj.query.params = this.parent.query.params;
      this.obj.appendTo(args.element);
      args.element.setAttribute("name", getComplexFieldID(args.column.field));
    };
    DropDownEditCell2.prototype.dropDownClose = function(args) {
      if (args.event) {
        if (args.event.action === "escape") {
          this.parent.editModule.editCellDialogClose = true;
        } else if (this.parent.isEdit && this.parent.editSettings.mode === "Batch" && args.event.action === "enter") {
          args.event.stopPropagation();
        }
      }
    };
    DropDownEditCell2.prototype.addEventListener = function() {
      this.ddCreated = this.dropdownCreated.bind(this);
      this.ddOpen = this.dropDownOpen.bind(this);
      this.ddBeforeOpen = this.dropdownBeforeOpen.bind(this);
      this.ddComplete = this.ddActionComplete.bind(this);
      this.obj.addEventListener(create, this.ddCreated);
      this.obj.addEventListener(open, this.ddOpen);
      this.obj.addEventListener(beforeOpen, this.ddBeforeOpen);
      this.obj.addEventListener(actionComplete, this.ddComplete);
    };
    DropDownEditCell2.prototype.removeEventListener = function() {
      if (this.obj.isDestroyed) {
        return;
      }
      this.obj.removeEventListener(create, this.ddCreated);
      this.obj.removeEventListener(open, this.ddOpen);
      this.obj.removeEventListener(beforeOpen, this.ddBeforeOpen);
      this.obj.removeEventListener(actionComplete, this.ddComplete);
    };
    DropDownEditCell2.prototype.dropdownCreated = function(e) {
      this.flag = true;
    };
    DropDownEditCell2.prototype.dropdownBeforeOpen = function() {
      if (this.parent.enableVirtualization) {
        if (this.column.edit.params && this.column.edit.params.dataSource) {
          this.obj.dataSource = this.column.edit.params.dataSource;
        } else {
          this.obj.dataSource = !this.column.isForeignColumn() ? this.parent.dataSource instanceof DataManager ? this.parent.dataSource : new DataManager(this.parent.dataSource) : this.column.dataSource instanceof DataManager ? this.column.dataSource : new DataManager(this.column.dataSource);
        }
      }
    };
    DropDownEditCell2.prototype.ddActionComplete = function(e) {
      e.result = DataUtil.distinct(e.result, this.obj.fields.value, true);
      if (this.flag && this.column.dataSource && !(this.column.edit.params && this.column.edit.params.ddEditedData)) {
        if ("result" in this.column.dataSource) {
          this.column.dataSource.result = e.result;
        } else if (this.column.dataSource instanceof DataManager) {
          this.column.dataSource.dataSource.json = e.result;
        }
      }
      this.flag = false;
    };
    DropDownEditCell2.prototype.dropDownOpen = function(args) {
      var dlgElement = parentsUntil(this.obj.element, "e-dialog");
      if (this.parent.editSettings.mode === "Dialog" && !isNullOrUndefined(dlgElement)) {
        var dlgObj = select("#" + dlgElement.id, document).ej2_instances[0];
        args.popup.element.style.zIndex = (dlgObj.zIndex + 1).toString();
      }
    };
    return DropDownEditCell2;
  }(EditCellBase)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/numeric-edit-cell.js
var NumericEditCell = (
  /** @class */
  function() {
    function NumericEditCell2(parent) {
      this.parent = parent;
    }
    NumericEditCell2.prototype.keyEventHandler = function(args) {
      if (args.keyCode === 13 || args.keyCode === 9) {
        var evt = document.createEvent("HTMLEvents");
        evt.initEvent("change", false, true);
        this.dispatchEvent(evt);
      }
    };
    NumericEditCell2.prototype.create = function(args) {
      this.instances = new Internationalization(this.parent.locale);
      return createEditElement(this.parent, args.column, "e-field", {});
    };
    NumericEditCell2.prototype.read = function(element) {
      return this.obj.value;
    };
    NumericEditCell2.prototype.write = function(args) {
      var col = args.column;
      var isInline = this.parent.editSettings.mode !== "Dialog";
      this.obj = new NumericTextBox(extend({
        value: parseFloat(getObject(args.column.field, args.rowData)),
        enableRtl: this.parent.enableRtl,
        placeholder: isInline ? "" : args.column.headerText,
        enabled: isEditable(args.column, args.requestType, args.element) && isCellHaveWidth(parentsUntil(args.element, "e-rowcell")),
        floatLabelType: this.parent.editSettings.mode !== "Dialog" ? "Never" : "Always",
        locale: this.parent.locale,
        cssClass: this.parent.cssClass ? this.parent.cssClass : null
      }, col.edit.params));
      args.element.setAttribute("name", getComplexFieldID(args.column.field));
      this.obj.appendTo(args.element);
      this.obj.element.addEventListener("keydown", this.keyEventHandler);
    };
    NumericEditCell2.prototype.destroy = function() {
      if (this.obj && !this.obj.isDestroyed) {
        this.obj.element.removeEventListener("keydown", this.keyEventHandler);
        this.obj.destroy();
        this.obj.element.remove();
      }
    };
    return NumericEditCell2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/default-edit-cell.js
var __extends39 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var DefaultEditCell = (
  /** @class */
  function(_super) {
    __extends39(DefaultEditCell2, _super);
    function DefaultEditCell2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    DefaultEditCell2.prototype.create = function(args) {
      var attr = {
        type: "text",
        value: !isNullOrUndefined(args.value) ? args.value : ""
      };
      var inputElement = createEditElement(this.parent, args.column, "e-field e-input e-defaultcell", attr);
      if (args.column.textAlign) {
        inputElement.style.textAlign = args.column.textAlign;
      }
      return inputElement;
    };
    DefaultEditCell2.prototype.read = function(element) {
      if (element.type === "hidden" && !isNullOrUndefined(element.ej2_instances[0]) && !isNullOrUndefined(element.ej2_instances[0].textarea)) {
        return element.ej2_instances[0].value;
      } else {
        return element.value;
      }
    };
    DefaultEditCell2.prototype.write = function(args) {
      var col = args.column;
      var isInline = this.parent.editSettings.mode !== "Dialog";
      var props = {
        element: args.element,
        floatLabelType: this.parent.editSettings.mode !== "Dialog" ? "Never" : "Always",
        enableRtl: this.parent.enableRtl,
        enabled: isEditable(args.column, args.requestType, args.element) && isCellHaveWidth(parentsUntil(args.element, "e-rowcell")),
        placeholder: isInline ? "" : args.column.headerText,
        cssClass: this.parent.cssClass ? this.parent.cssClass : ""
      };
      if (!isNullOrUndefined(col.edit) && !isNullOrUndefined(col.edit.params) && col.edit.params.multiline) {
        var cellValue = col.valueAccessor(col.field, args.rowData, col);
        props["value"] = cellValue;
      }
      this.obj = new TextBox(extend(props, col.edit.params));
      this.obj.appendTo(args.element);
      if (this.parent.editSettings.mode === "Batch") {
        this.obj.element.addEventListener("keydown", this.keyEventHandler);
      }
    };
    DefaultEditCell2.prototype.keyEventHandler = function(args) {
      if (args.key === "Enter" || args.key === "Tab") {
        var evt = new Event("change", {
          bubbles: false,
          cancelable: true
        });
        this.dispatchEvent(evt);
      }
    };
    DefaultEditCell2.prototype.destroy = function() {
      if (this.obj && !this.obj.isDestroyed) {
        this.obj.element.removeEventListener("keydown", this.keyEventHandler);
        this.obj.destroy();
        this.obj.element.remove();
      }
    };
    return DefaultEditCell2;
  }(EditCellBase)
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/normal-edit.js
var NormalEdit = (
  /** @class */
  function() {
    function NormalEdit2(parent, serviceLocator, renderer) {
      this.args = {};
      this.currentVirtualData = {};
      this.parent = parent;
      this.renderer = renderer;
      this.serviceLocator = serviceLocator;
      this.addEventListener();
    }
    NormalEdit2.prototype.clickHandler = function(e) {
      var target = e.target;
      var gObj = this.parent;
      if (gObj.editSettings.showAddNewRow && isNullOrUndefined(gObj.element.querySelector("." + editedRow))) {
        return;
      }
      if ((parentsUntil(target, gridContent) && parentsUntil(parentsUntil(target, gridContent), "e-grid").id === gObj.element.id || gObj.frozenRows && parentsUntil(target, headerContent) && !parentsUntil(target, "e-columnheader")) && !parentsUntil(target, "e-unboundcelldiv")) {
        this.rowIndex = parentsUntil(target, rowCell) ? parseInt(target.parentElement.getAttribute(ariaRowIndex), 10) - 1 : -1;
        if (gObj.isEdit) {
          gObj.editModule.endEdit();
        }
      }
    };
    NormalEdit2.prototype.dblClickHandler = function(e) {
      if (parentsUntil(e.target, rowCell) && this.parent.editSettings.allowEditOnDblClick && (!this.parent.editSettings.showAddNewRow || this.parent.editSettings.showAddNewRow && !parentsUntil(e.target, "e-addedrow"))) {
        this.parent.editModule.startEdit(parentsUntil(e.target, row));
      }
    };
    NormalEdit2.prototype.editComplete = function(e) {
      this.parent.isEdit = this.parent.editSettings.showAddNewRow ? true : false;
      var action = "action";
      switch (e.requestType) {
        case "save":
          if ((!(this.parent.isCheckBoxSelection || this.parent.selectionSettings.type === "Multiple") || !this.parent.isPersistSelection) && e["" + action] !== "edit" && (!this.parent.editSettings.showAddNewRow || this.parent.editSettings.showAddNewRow && e["" + action] !== "add")) {
            if (this.parent.allowPaging && e["index"] > 0) {
              e["index"] = this.parent.pageSettings.currentPage === Math.floor(e["index"] / this.parent.pageSettings.pageSize) + 1 ? e["index"] % this.parent.pageSettings.pageSize : -1;
            }
            if (this.parent.enableVirtualization && e["index"] > 0) {
              this.parent.selectVirtualRowOnAdd = true;
            }
            this.parent.selectRow(e["index"]);
          }
          this.parent.trigger(actionComplete, extend(e, {
            requestType: "save",
            type: actionComplete
          }));
          this.parent.notify(closeEdit, {
            requestType: "save",
            action: e["" + action]
          });
          break;
        case "delete":
          this.parent.trigger(actionComplete, extend(e, {
            requestType: "delete",
            type: actionComplete
          }));
          if (!this.parent.isCheckBoxSelection && !(this.parent.enableInfiniteScrolling && (this.parent.childGrid || this.parent.detailTemplate))) {
            this.parent.selectRow(this.editRowIndex);
          }
          this.parent.notify(closeEdit, {
            requestType: "delete",
            action: e["" + action]
          });
          break;
      }
    };
    NormalEdit2.prototype.getEditArgs = function(editedData, rowObj, isScroll) {
      var primaryKeys = this.parent.getPrimaryKeyFieldNames();
      var primaryKeyValues = [];
      for (var i = 0; i < primaryKeys.length; i++) {
        primaryKeyValues.push(getObject(primaryKeys[parseInt(i.toString(), 10)], editedData));
      }
      var args = {
        primaryKey: primaryKeys,
        primaryKeyValue: primaryKeyValues,
        requestType: "beginEdit",
        rowData: editedData,
        rowIndex: this.rowIndex,
        type: "edit",
        cancel: false,
        foreignKeyData: rowObj && rowObj.foreignKeyData,
        target: void 0,
        isScroll
      };
      return args;
    };
    NormalEdit2.prototype.startEdit = function(tr) {
      var _this = this;
      var gObj = this.parent;
      this.rowIndex = this.editRowIndex = parseInt(tr.getAttribute(ariaRowIndex), 10) - 1;
      if (gObj.enableVirtualization || gObj.enableColumnVirtualization || gObj.enableInfiniteScrolling) {
        var selector = '.e-row[aria-rowindex="' + (this.rowIndex + 1) + '"]';
        var virtualRow = this.parent.element.querySelector(selector);
        if (!virtualRow) {
          return;
        }
      }
      var e = {
        data: void 0,
        index: this.rowIndex,
        isScroll: false
      };
      this.parent.notify(virtualScrollEditActionBegin, e);
      if (isGroupAdaptive(gObj)) {
        var rObj = gObj.getRowObjectFromUID(tr.getAttribute("data-uid"));
        this.previousData = rObj.data;
      } else if (this.parent.enableVirtualization || this.parent.enableColumnVirtualization || this.parent.enableInfiniteScrolling && (!this.previousData || this.parent.infiniteScrollSettings.enableCache)) {
        this.previousData = e.data;
      } else if (!this.parent.enableVirtualization) {
        this.previousData = extend({}, {}, this.parent.getForeignKeyColumns().length || this.parent.allowGrouping && this.parent.groupSettings.columns.length ? this.parent.getRowObjectFromUID(tr.getAttribute("data-uid")).data : gObj.getCurrentViewRecords()[this.rowIndex], true);
      }
      var editedData = extend({}, {}, e.data || this.previousData, true);
      this.uid = tr.getAttribute("data-uid");
      var rowObj = gObj.getRowObjectFromUID(this.uid);
      var args = this.getEditArgs(editedData, rowObj, e.isScroll);
      args.row = tr;
      if (!args.isScroll) {
        this.parent.notify(createVirtualValidationForm, {
          uid: this.uid,
          prevData: this.previousData,
          argsCreator: this.getEditArgs.bind(this),
          renderer: this.renderer
        });
        gObj.trigger(beginEdit, args, function(begineditargs) {
          begineditargs.type = "actionBegin";
          gObj.trigger(actionBegin, begineditargs, function(editargs) {
            if (!editargs.cancel) {
              _this.inlineEditHandler(editargs, tr);
            }
          });
        });
      } else {
        this.inlineEditHandler(args, tr);
      }
    };
    NormalEdit2.prototype.disabledShowAddRow = function(disable, prevent) {
      var addRow = this.parent.element.querySelector(".e-addedrow");
      var inputs = [].slice.call(addRow ? addRow.querySelectorAll(".e-input") : []);
      if (addRow && addRow.querySelector(".e-unboundcell")) {
        var buttons = [].slice.call(addRow.querySelector(".e-unboundcell").querySelectorAll(".e-btn"));
        for (var i = 0; i < buttons.length; i++) {
          if (!disable) {
            buttons[parseInt(i.toString(), 10)].classList.add("e-disabled");
            buttons[parseInt(i.toString(), 10)].setAttribute("disabled", "disabled");
          } else {
            buttons[parseInt(i.toString(), 10)].classList.remove("e-disabled");
            buttons[parseInt(i.toString(), 10)].removeAttribute("disabled");
          }
        }
      }
      if (inputs.length) {
        for (var i = 0; i < inputs.length; i++) {
          var input = inputs[parseInt(i.toString(), 10)];
          var uid2 = input.getAttribute("e-mappinguid");
          var column = this.parent.getColumnByUid(uid2);
          var error = parentsUntil(input, "e-rowcell").querySelector(".e-error");
          if (error) {
            error.classList.remove("e-error");
          }
          if (input.ej2_instances) {
            if (prevent && isNullOrUndefined(column.defaultValue)) {
              if (input.type === "checkbox") {
                input.ej2_instances[0].checked = false;
                input.checked = false;
              } else {
                input.ej2_instances[0].value = null;
                input.value = null;
              }
            }
            if (input.type === "checkbox" && !isNullOrUndefined(disable)) {
              input.ej2_instances[0].disabled = disable && column.allowEditing ? false : true;
            } else if (!isNullOrUndefined(disable)) {
              input.ej2_instances[0].enabled = disable && column.allowEditing ? true : false;
            }
          } else {
            if (prevent && input.value && input.value.length && isNullOrUndefined(column.defaultValue)) {
              input.value = null;
            }
            if (!isNullOrUndefined(disable)) {
              if (!disable) {
                input.classList.add("e-disabled");
                input.setAttribute("disabled", "disabled");
              } else if (column.allowEditing) {
                input.classList.remove("e-disabled");
                input.removeAttribute("disabled");
              }
            }
          }
        }
      }
    };
    NormalEdit2.prototype.inlineEditHandler = function(editargs, tr) {
      var gObj = this.parent;
      gObj.isEdit = true;
      editargs.row = editargs.row ? editargs.row : tr;
      if (gObj.editSettings.mode !== "Dialog") {
        gObj.clearSelection();
      }
      if (gObj.editSettings.mode === "Dialog" && gObj.selectionModule) {
        gObj.selectionModule.preventFocus = true;
        editargs.row.classList.add("e-dlgeditrow");
      }
      this.renderer.update(editargs);
      this.uid = tr.getAttribute("data-uid");
      gObj.editModule.applyFormValidation();
      if (gObj.editSettings.showAddNewRow && !tr.classList.contains("e-addedrow")) {
        this.disabledShowAddRow(false, true);
      }
      editargs.type = "actionComplete";
      gObj.trigger(actionComplete, editargs);
      if (gObj.editSettings.template) {
        gObj.editModule.applyFormValidation(void 0, editargs.form.ej2_instances[0].rules);
      }
      this.args = editargs;
      if (this.parent.allowTextWrap) {
        this.parent.notify(freezeRender, {
          case: "textwrap"
        });
      }
    };
    NormalEdit2.prototype.updateRow = function(index, data) {
      var _this = this;
      var gObj = this.parent;
      this.editRowIndex = index;
      var row2 = gObj.getRowByIndex(index);
      if (!row2) {
        return;
      }
      var args = {
        requestType: "save",
        action: "edit",
        type: actionBegin,
        data,
        cancel: false,
        previousData: gObj.getCurrentViewRecords()[parseInt(index.toString(), 10)],
        row: row2
      };
      gObj.showSpinner();
      if (gObj.enableInfiniteScrolling) {
        this.uid = args.row.getAttribute("data-uid");
        var index_1 = parseInt(args.row.getAttribute("aria-rowindex"), 10) - 1;
        this.parent.notify(refreshInfiniteEditrowindex, {
          index: index_1
        });
      }
      gObj.notify(updateData, args);
      if (args.promise) {
        args.promise.then(function() {
          return gObj.refresh();
        }).catch(function(e) {
          return _this.edFail(e);
        });
      } else {
        if (!gObj.enableInfiniteScrolling) {
          gObj.refresh();
          if (gObj.enableVirtualization) {
            gObj.contentModule.vgenerator.startIndex = null;
          }
        }
      }
    };
    NormalEdit2.prototype.editFormValidate = function() {
      var gObj = this.parent;
      var isValid = gObj.editModule.editFormValidate();
      var validationArgs = {
        prevData: this.previousData,
        isValid: true,
        editIdx: this.editRowIndex,
        addIdx: this.addedRowIndex
      };
      gObj.notify(validateVirtualForm, validationArgs);
      return isValid && validationArgs.isValid;
    };
    NormalEdit2.prototype.endEdit = function() {
      var _this = this;
      var gObj = this.parent;
      if (!this.parent.isEdit || !this.editFormValidate()) {
        return;
      }
      var editedData = extend({}, {}, this.previousData, true);
      var args = extend(this.args, {
        requestType: "save",
        type: actionBegin,
        data: editedData,
        cancel: false,
        previousData: this.previousData,
        selectedRow: gObj.selectedRowIndex,
        foreignKeyData: {}
      });
      var isDlg = gObj.editSettings.mode === "Dialog";
      var dlgWrapper = select("#" + gObj.element.id + "_dialogEdit_wrapper", document);
      var dlgForm = isDlg ? dlgWrapper.querySelector(".e-gridform") : gObj.editSettings.showAddNewRow && gObj.element.querySelector("." + editedRow) ? gObj.element.querySelector("." + editedRow).getElementsByClassName("e-gridform")[0] : gObj.element.getElementsByClassName("e-gridform")[0];
      var data = {
        virtualData: extend({}, {}, this.previousData, true),
        isAdd: false,
        isScroll: false,
        endEdit: true
      };
      this.parent.notify(getVirtualData, data);
      if ((this.parent.enableVirtualization || this.parent.enableColumnVirtualization || this.parent.enableInfiniteScrolling) && this.parent.editSettings.mode === "Normal" && Object.keys(data.virtualData).length) {
        if (this.parent.isEdit) {
          this.currentVirtualData = editedData = args.data = data.virtualData;
        }
      } else {
        editedData = gObj.editModule.getCurrentEditedData(dlgForm, editedData);
      }
      var eleLength = [].slice.call(gObj.element.getElementsByClassName(editedRow)).length;
      if (!data.isAdd && Object.keys(this.currentVirtualData).length && !eleLength) {
        eleLength = 1;
      }
      if (isDlg ? dlgWrapper.getElementsByClassName(editedRow).length : eleLength) {
        args.action = "edit";
        gObj.trigger(actionBegin, args, function(endEditArgs) {
          if (endEditArgs.cancel) {
            return;
          }
          if (_this.parent.loadingIndicator.indicatorType === "Spinner") {
            gObj.showSpinner();
          }
          if (_this.parent.loadingIndicator.indicatorType === "Shimmer") {
            _this.parent.showMaskRow();
          }
          if (gObj.editSettings.showAddNewRow) {
            _this.disabledShowAddRow(true);
          }
          gObj.notify(updateData, endEditArgs);
        });
      } else {
        args.action = "add";
        args.selectedRow = 0;
        args.index = this.addedRowIndex;
        gObj.notify(virtualScrollEditSuccess, {});
        gObj.notify(modelChanged, args);
        this.addedRowIndex = null;
        if (args.cancel) {
          return;
        }
        if (this.parent.editSettings.showAddNewRow) {
          this.parent.notify(showAddNewRowFocus, {});
          if (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) {
            this.disabledShowAddRow(true, true);
          }
        }
      }
    };
    NormalEdit2.prototype.destroyElements = function() {
      var gObj = this.parent;
      if (!gObj.editSettings.showAddNewRow || gObj.editSettings.showAddNewRow && gObj.element.querySelector(".e-editedrow")) {
        gObj.editModule.destroyWidgets();
        gObj.editModule.destroyForm();
      }
      this.parent.notify(dialogDestroy, {});
    };
    NormalEdit2.prototype.editHandler = function(args) {
      var _this = this;
      if (args.promise) {
        args.promise.then(function(e) {
          return _this.edSucc(e, args);
        }).catch(function(e) {
          return _this.edFail(e);
        });
      } else {
        this.editSuccess(args.data, args);
      }
      if (this.parent.editSettings.showAddNewRow) {
        this.parent.editModule.applyFormValidation();
      }
    };
    NormalEdit2.prototype.edSucc = function(e, args) {
      this.editSuccess(e, args);
    };
    NormalEdit2.prototype.edFail = function(e) {
      this.editFailure(e);
    };
    NormalEdit2.prototype.updateCurrentViewData = function(data) {
      if (!this.parent.enableVirtualization && !this.parent.enableInfiniteScrolling) {
        this.parent.getCurrentViewRecords()[this.editRowIndex] = data;
      }
    };
    NormalEdit2.prototype.requestSuccess = function(args) {
      if (this.parent.editModule.formObj && !this.parent.editModule.formObj.isDestroyed) {
        this.destroyElements();
        this.stopEditStatus();
        if (this.parent.editSettings.mode === "Dialog" && args.action !== "add" && this.parent.selectionModule) {
          this.parent.element.querySelector(".e-dlgeditrow").classList.remove("e-dlgeditrow");
        }
      }
    };
    NormalEdit2.prototype.editSuccess = function(e, args) {
      if (!isNullOrUndefined(e) && !(e instanceof Array)) {
        var rowData = "rowData";
        args.data = extend({}, extend({}, args["" + rowData], args.data), e);
      }
      this.requestSuccess(args);
      this.parent.trigger(beforeDataBound, args);
      args.type = actionComplete;
      this.parent.isEdit = this.parent.editSettings.showAddNewRow ? true : false;
      this.refreshRow(args.data);
      this.parent.notify(virtualScrollEditSuccess, args);
      this.parent.editModule.checkLastRow(args.row);
      this.parent.editModule.isLastRow = false;
      this.updateCurrentViewData(args.data);
      this.blazorTemplate();
      this.editRowIndex = null;
      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && this.parent.groupSettings.showGroupedColumn) {
        var dragRow = args.row;
        var rows = this.parent.getRowsObject();
        var dragRowUid = dragRow.getAttribute("data-uid");
        var dragRowObject_1 = this.parent.getRowObjectFromUID(dragRowUid);
        var _loop_1 = function(i2) {
          var thisRef = this_1;
          rows = rows.filter(function(data) {
            var flag = data.isDataRow && data !== dragRowObject_1 && !isNullOrUndefined(data.data);
            if (flag) {
              var groupedColumn = thisRef.parent.groupSettings.columns[parseInt(i2.toString(), 10)].split(".");
              var comparer1 = data.data[groupedColumn[0]];
              var comparer2 = args.data[groupedColumn[0]];
              for (var j = 1; j < groupedColumn.length; j++) {
                comparer1 = comparer1[groupedColumn[j]];
                comparer2 = comparer2[groupedColumn[j]];
              }
              return flag && comparer1 === comparer2;
            } else {
              return flag;
            }
          });
        };
        var this_1 = this;
        for (var i = 0; i < this.parent.groupSettings.columns.length; i++) {
          _loop_1(i);
        }
        var dropRowObject = rows[0];
        if (!isNullOrUndefined(dragRowObject_1) && !isNullOrUndefined(dropRowObject) && dragRowObject_1.parentUid !== dropRowObject.parentUid) {
          this.parent["groupModule"].groupedRowReorder(dragRowObject_1, dropRowObject);
        } else if (this.parent.aggregates.length) {
          this.parent.aggregateModule.refresh(args.data, this.parent.groupSettings.enableLazyLoading ? args.row : void 0);
        }
      } else if (this.parent.aggregates.length) {
        this.parent.aggregateModule.refresh(args.data, this.parent.groupSettings.enableLazyLoading ? args.row : void 0);
      }
      this.parent.trigger(actionComplete, args);
      if (!(this.parent.isCheckBoxSelection || this.parent.selectionSettings.type === "Multiple") || !this.parent.isPersistSelection && !this.parent.selectionSettings.checkboxOnly) {
        if (this.parent.editSettings.mode !== "Dialog") {
          this.parent.selectRow(this.rowIndex > -1 ? this.rowIndex : this.editRowIndex);
        }
      }
      this.parent.notify(closeEdit, {
        requestType: args.requestType,
        action: args.action
      });
      if (this.parent.aggregates.length && this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length && (this.parent.groupModule.getGroupAggregateTemplates(true).length || this.parent.groupModule.getGroupAggregateTemplates(false).length)) {
        return;
      }
      this.parent.removeMaskRow();
      this.parent.hideSpinner();
    };
    NormalEdit2.prototype.closeForm = function() {
      if (!this.cloneRow && this.parent.isEdit) {
        this.stopEditStatus();
      }
      if (this.cloneRow) {
        this.cloneRow.remove();
        this.cloneRow = null;
        this.originalRow.classList.remove("e-hiddenrow");
      }
    };
    NormalEdit2.prototype.blazorTemplate = function() {
      var cols = this.parent.getColumns();
      if (this.parent.editSettings.template && this.parent.editSettings.mode === "Normal") {
        updateBlazorTemplate(this.parent.element.id + "editSettingsTemplate", "Template", this.parent.editSettings);
      }
      for (var i = 0; i < cols.length; i++) {
        var col = cols[parseInt(i.toString(), 10)];
        if (col.template) {
          updateBlazorTemplate(this.parent.element.id + col.uid, "Template", col, false);
        }
        if (col.editTemplate) {
          updateBlazorTemplate(this.parent.element.id + col.uid + "editTemplate", "EditTemplate", col);
        }
      }
    };
    NormalEdit2.prototype.editFailure = function(e) {
      if (e.cancel) {
        return;
      }
      this.parent.removeMaskRow();
      this.parent.trigger(actionFailure, {
        error: e
      });
      this.parent.hideSpinner();
      this.parent.log("actionfailure", {
        error: e
      });
    };
    NormalEdit2.prototype.needRefresh = function() {
      var refresh = true;
      var editedRow2 = this.parent.element.querySelector(".e-gridform");
      if ((this.parent.enableVirtualization || this.parent.infiniteScrollSettings.enableCache) && this.parent.editSettings.mode === "Normal" && !editedRow2) {
        refresh = false;
      }
      return refresh;
    };
    NormalEdit2.prototype.refreshRow = function(data) {
      var row2 = new RowRenderer(this.serviceLocator, null, this.parent);
      var rowObj = this.parent.getRowObjectFromUID(this.uid);
      if (rowObj) {
        rowObj.changes = data;
        this.parent.notify(refreshVirtualCache, {
          data
        });
        refreshForeignData(rowObj, this.parent.getForeignKeyColumns(), rowObj.changes);
        if (this.needRefresh()) {
          row2.refresh(rowObj, this.parent.getColumns(), true);
        }
        var tr = [].slice.call(this.parent.element.querySelectorAll('[aria-rowindex="' + (rowObj.index + 1) + '"]'));
        for (var i = 0; i < tr.length; i++) {
          addFixedColumnBorder(tr[parseInt(i.toString(), 10)]);
          if (this.parent.enableColumnVirtualization && tr[parseInt(i.toString(), 10)].querySelectorAll(".e-leftfreeze,.e-rightfreeze,.e-fixedfreeze").length) {
            var cols = this.parent.getColumns();
            var leftrightCells = [].slice.call(tr[parseInt(i.toString(), 10)].querySelectorAll(".e-leftfreeze,.e-rightfreeze.e-fixedfreeze"));
            for (var j = 0; j < leftrightCells.length; j++) {
              if (leftrightCells[parseInt(j.toString(), 10)].classList.contains("e-leftfreeze")) {
                leftrightCells[parseInt(j.toString(), 10)].style.left = cols[parseInt(j.toString(), 10)].valueX - this.parent.translateX + "px";
              } else if (leftrightCells[parseInt(j.toString(), 10)].classList.contains("e-rightfreeze")) {
                var idx = parseInt(leftrightCells[parseInt(j.toString(), 10)].getAttribute("aria-colindex"), 10) - 1;
                leftrightCells[parseInt(j.toString(), 10)].style.right = cols[parseInt(idx.toString(), 10)].valueX + this.parent.translateX + "px";
              } else {
                leftrightCells[parseInt(j.toString(), 10)].style.left = this.parent.leftrightColumnWidth("left") - this.parent.translateX + "px";
                leftrightCells[parseInt(j.toString(), 10)].style.right = this.parent.leftrightColumnWidth("right") + this.parent.translateX + "px";
              }
            }
          }
        }
      }
    };
    NormalEdit2.prototype.closeEdit = function() {
      var _this = this;
      if (!this.parent.isEdit || this.parent.editSettings.showAddNewRow && this.parent.element.querySelector(".e-addedrow") && isNullOrUndefined(this.parent.element.querySelector("." + editedRow))) {
        if (this.parent.editSettings.showAddNewRow) {
          this.disabledShowAddRow(true, true);
          this.parent.notify(showAddNewRowFocus, {});
        }
        return;
      }
      var gObj = this.parent;
      var args = extend(this.args, {
        requestType: "cancel",
        type: actionBegin,
        cancel: false,
        data: this.previousData,
        selectedRow: gObj.selectedRowIndex
      });
      gObj.notify(virtualScrollEditCancel, args);
      this.blazorTemplate();
      gObj.trigger(actionBegin, args, function(closeEditArgs) {
        if (closeEditArgs.cancel) {
          return;
        }
        _this.parent.notify(destroyEditForm, args);
        if (_this.parent.editSettings.mode === "Dialog") {
          _this.parent.notify(dialogDestroy, {});
        }
        closeEditArgs.type = actionComplete;
        if (!_this.parent.editSettings.showAddNewRow) {
          gObj.isEdit = false;
        }
        if (gObj.editSettings.mode !== "Dialog") {
          _this.refreshRow(closeEditArgs.data);
        }
        _this.stopEditStatus();
        gObj.isEdit = false;
        if (gObj.editSettings.showAddNewRow) {
          _this.disabledShowAddRow(true);
          gObj.editModule.applyFormValidation();
          gObj.isEdit = true;
        }
        var isLazyLoad = gObj.groupSettings.enableLazyLoading && gObj.groupSettings.columns.length && !gObj.getContentTable().querySelector("tr.e-emptyrow");
        if (!gObj.getContentTable().querySelector("tr.e-emptyrow") && !gObj.getContentTable().querySelector("tr.e-row") && !isLazyLoad) {
          gObj.renderModule.emptyRow();
        }
        if (gObj.editSettings.mode !== "Dialog") {
          gObj.selectRow(_this.rowIndex);
        }
        gObj.trigger(actionComplete, closeEditArgs);
      });
    };
    NormalEdit2.prototype.addRecord = function(data, index) {
      var _this = this;
      var gObj = this.parent;
      this.addedRowIndex = index = !isNullOrUndefined(index) ? index : 0;
      if (data) {
        gObj.notify(modelChanged, {
          requestType: "save",
          type: actionBegin,
          data,
          selectedRow: 0,
          action: "add",
          index
        });
        return;
      }
      if (gObj.isEdit) {
        return;
      }
      this.previousData = {};
      this.uid = "";
      var cols = gObj.getColumns();
      var rowData = {
        virtualData: {},
        isScroll: false
      };
      if (!gObj.editSettings.showAddNewRow) {
        this.parent.notify(getVirtualData, rowData);
      }
      for (var i = 0; i < cols.length; i++) {
        if (rowData.isScroll) {
          continue;
        }
        if (cols[parseInt(i.toString(), 10)].field) {
          if (cols[parseInt(i.toString(), 10)].type === "string") {
            cols[parseInt(i.toString(), 10)].defaultValue = this.parent.sanitize(cols[parseInt(i.toString(), 10)].defaultValue);
          }
          DataUtil.setValue(cols[parseInt(i.toString(), 10)].field, cols[parseInt(i.toString(), 10)].defaultValue, this.previousData);
        }
      }
      var args = {
        cancel: false,
        foreignKeyData: {},
        requestType: "add",
        data: this.previousData,
        type: actionBegin,
        index,
        rowData: this.previousData,
        target: void 0,
        isScroll: rowData.isScroll
      };
      if ((this.parent.enableVirtualization || this.parent.enableColumnVirtualization || this.parent.infiniteScrollSettings.enableCache) && Object.keys(rowData.virtualData).length) {
        args.data = args.rowData = rowData.virtualData;
      }
      if (!args.isScroll) {
        this.parent.notify(createVirtualValidationForm, {
          uid: this.uid,
          prevData: this.previousData,
          argsCreator: this.getEditArgs.bind(this),
          renderer: this.renderer
        });
        if (gObj.editSettings.showAddNewRow) {
          this.inlineAddHandler(args);
        } else {
          gObj.trigger(actionBegin, args, function(addArgs) {
            if (addArgs.cancel) {
              return;
            }
            _this.inlineAddHandler(addArgs);
          });
        }
      } else {
        this.inlineAddHandler(args);
      }
    };
    NormalEdit2.prototype.inlineAddHandler = function(addArgs) {
      var gObj = this.parent;
      gObj.isEdit = true;
      if (gObj.editSettings.mode !== "Dialog") {
        gObj.clearSelection();
      }
      this.renderer.addNew(addArgs);
      gObj.editModule.applyFormValidation();
      addArgs.type = actionComplete;
      addArgs.row = gObj.element.querySelector("." + addedRow);
      if (!gObj.editSettings.showAddNewRow) {
        gObj.trigger(actionComplete, addArgs);
      }
      if (gObj.editSettings.template) {
        gObj.editModule.applyFormValidation(void 0, addArgs.form.ej2_instances[0].rules);
      }
      this.args = addArgs;
    };
    NormalEdit2.prototype.deleteRecord = function(fieldname, data) {
      this.editRowIndex = this.parent.selectedRowIndex;
      if (data) {
        data = data instanceof Array ? data : [data];
        var gObj = this.parent;
        var dataLen = Object.keys(data).length;
        fieldname = fieldname || this.parent.getPrimaryKeyFieldNames()[0];
        var _loop_2 = function(i2) {
          var _a;
          var tmpRecord;
          var contained = gObj.currentViewData.some(function(record) {
            tmpRecord = record;
            return data[parseInt(i2.toString(), 10)] === getObject(fieldname, record) || data[parseInt(i2.toString(), 10)] === record;
          });
          data[parseInt(i2.toString(), 10)] = contained ? tmpRecord : data[parseInt(i2.toString(), 10)]["" + fieldname] ? data[parseInt(i2.toString(), 10)] : (_a = {}, _a[fieldname] = data[parseInt(i2.toString(), 10)], _a);
        };
        for (var i = 0; i < dataLen; i++) {
          _loop_2(i);
        }
      }
      var args = {
        requestType: "delete",
        type: actionBegin,
        foreignKeyData: {},
        data: data ? data : this.parent.getSelectedRecords(),
        tr: this.parent.getSelectedRows(),
        cancel: false
      };
      if (!isNullOrUndefined(this.parent.commandDelIndex)) {
        args.data[0] = this.parent.getRowObjectFromUID(this.parent.getRowByIndex(this.parent.commandDelIndex).getAttribute("data-uid")).data;
      }
      this.parent.notify(modelChanged, args);
    };
    NormalEdit2.prototype.stopEditStatus = function() {
      var gObj = this.parent;
      var addElements = [].slice.call(gObj.editSettings.showAddNewRow ? [] : gObj.element.getElementsByClassName(addedRow));
      var editElements = [].slice.call(gObj.element.getElementsByClassName(editedRow));
      for (var i = 0; i < addElements.length; i++) {
        remove(addElements[parseInt(i.toString(), 10)]);
      }
      for (var i = 0; i < editElements.length; i++) {
        editElements[parseInt(i.toString(), 10)].classList.remove(editedRow);
      }
    };
    NormalEdit2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.evtHandlers = [{
        event: crudAction,
        handler: this.editHandler
      }, {
        event: doubleTap,
        handler: this.dblClickHandler
      }, {
        event: click,
        handler: this.clickHandler
      }, {
        event: recordAdded,
        handler: this.requestSuccess
      }, {
        event: dblclick,
        handler: this.dblClickHandler
      }, {
        event: deleteComplete,
        handler: this.editComplete
      }, {
        event: saveComplete,
        handler: this.editComplete
      }, {
        event: rowModeChange,
        handler: this.closeEdit
      }, {
        event: closeInline,
        handler: this.closeForm
      }];
      addRemoveEventListener(this.parent, this.evtHandlers, true, this);
    };
    NormalEdit2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      addRemoveEventListener(this.parent, this.evtHandlers, false);
    };
    NormalEdit2.prototype.destroy = function() {
      this.removeEventListener();
      this.renderer.destroy();
    };
    return NormalEdit2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/inline-edit.js
var __extends40 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var InlineEdit = (
  /** @class */
  function(_super) {
    __extends40(InlineEdit2, _super);
    function InlineEdit2(parent, serviceLocator, renderer) {
      var _this = _super.call(this, parent, serviceLocator) || this;
      _this.parent = parent;
      _this.serviceLocator = serviceLocator;
      _this.renderer = renderer;
      return _this;
    }
    InlineEdit2.prototype.closeEdit = function() {
      _super.prototype.closeEdit.call(this);
    };
    InlineEdit2.prototype.addRecord = function(data, index) {
      _super.prototype.addRecord.call(this, data, index);
    };
    InlineEdit2.prototype.endEdit = function() {
      _super.prototype.endEdit.call(this);
    };
    InlineEdit2.prototype.updateRow = function(index, data) {
      _super.prototype.updateRow.call(this, index, data);
    };
    InlineEdit2.prototype.deleteRecord = function(fieldname, data) {
      _super.prototype.deleteRecord.call(this, fieldname, data);
    };
    InlineEdit2.prototype.startEdit = function(tr) {
      _super.prototype.startEdit.call(this, tr);
    };
    return InlineEdit2;
  }(NormalEdit)
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/batch-edit.js
var BatchEdit = (
  /** @class */
  function() {
    function BatchEdit2(parent, serviceLocator, renderer) {
      this.cellDetails = {};
      this.originalCell = {};
      this.cloneCell = {};
      this.editNext = false;
      this.preventSaveCell = false;
      this.initialRender = true;
      this.validationColObj = [];
      this.addBatchRow = false;
      this.prevEditedBatchCell = false;
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      this.renderer = renderer;
      this.focus = serviceLocator.getService("focus");
      this.addEventListener();
    }
    BatchEdit2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.evtHandlers = [{
        event: click,
        handler: this.clickHandler
      }, {
        event: dblclick,
        handler: this.dblClickHandler
      }, {
        event: beforeCellFocused,
        handler: this.onBeforeCellFocused
      }, {
        event: cellFocused,
        handler: this.onCellFocused
      }, {
        event: doubleTap,
        handler: this.dblClickHandler
      }, {
        event: keyPressed,
        handler: this.keyDownHandler
      }, {
        event: editNextValCell,
        handler: this.editNextValCell
      }, {
        event: destroy,
        handler: this.destroy
      }];
      addRemoveEventListener(this.parent, this.evtHandlers, true, this);
      EventHandler.add(this.parent.element, "mousedown", this.mouseDownHandler, this);
      this.dataBoundFunction = this.dataBound.bind(this);
      this.batchCancelFunction = this.batchCancel.bind(this);
      this.parent.addEventListener(dataBound, this.dataBoundFunction);
      this.parent.addEventListener(batchCancel, this.batchCancelFunction);
    };
    BatchEdit2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      addRemoveEventListener(this.parent, this.evtHandlers, false);
      EventHandler.remove(this.parent.element, "mousedown", this.mouseDownHandler);
      this.parent.removeEventListener(dataBound, this.dataBoundFunction);
      this.parent.removeEventListener(batchCancel, this.batchCancelFunction);
    };
    BatchEdit2.prototype.batchCancel = function() {
      this.parent.focusModule.restoreFocus({
        requestType: "batchCancel"
      });
    };
    BatchEdit2.prototype.dataBound = function() {
      this.parent.notify(toolbarRefresh, {});
    };
    BatchEdit2.prototype.destroy = function() {
      this.removeEventListener();
    };
    BatchEdit2.prototype.mouseDownHandler = function(e) {
      if (!isNullOrUndefined(this.parent.element.querySelector(".e-gridform"))) {
        this.mouseDownElement = e.target;
      } else {
        this.mouseDownElement = void 0;
      }
    };
    BatchEdit2.prototype.clickHandler = function(e) {
      if (!parentsUntil(e.target, this.parent.element.id + "_add", true)) {
        if (this.parent.isEdit && closest(this.form, "td") !== closest(e.target, "td") && isNullOrUndefined(this.mouseDownElement) || this.mouseDownElement === e.target) {
          this.saveCell();
          this.editNextValCell();
        }
        if (parentsUntil(e.target, rowCell) && !this.parent.isEdit) {
          this.setCellIdx(e.target);
        }
      }
    };
    BatchEdit2.prototype.dblClickHandler = function(e) {
      var target = parentsUntil(e.target, rowCell);
      var tr = parentsUntil(e.target, row);
      var rowIndex = tr && parseInt(tr.getAttribute(ariaRowIndex), 10) - 1;
      var colIndex = target && parseInt(target.getAttribute(ariaColIndex), 10) - 1;
      if (!isNullOrUndefined(target) && !isNullOrUndefined(rowIndex) && !isNaN(colIndex) && !target.parentElement.classList.contains(editedRow) && this.parent.getColumns()[parseInt(colIndex.toString(), 10)].allowEditing) {
        this.editCell(rowIndex, this.parent.getColumns()[parseInt(colIndex.toString(), 10)].field, this.isAddRow(rowIndex));
      }
    };
    BatchEdit2.prototype.onBeforeCellFocused = function(e) {
      if (this.parent.isEdit && this.validateFormObj() && (e.byClick || ["tab", "shiftTab", "enter", "shiftEnter"].indexOf(e.keyArgs.action) > -1)) {
        e.cancel = true;
        if (e.byClick) {
          e.clickArgs.preventDefault();
        } else {
          e.keyArgs.preventDefault();
        }
      }
    };
    BatchEdit2.prototype.onCellFocused = function(e) {
      var clear = (!e.container.isContent || !e.container.isDataCell) && !(this.parent.frozenRows && e.container.isHeader);
      if (this.parent.focusModule.active) {
        this.prevEditedBatchCell = this.parent.focusModule.active.matrix.current.toString() === this.prevEditedBatchCellMatrix().toString();
        this.crtRowIndex = [].slice.call(this.parent.focusModule.active.getTable().rows).indexOf(closest(e.element, "tr"));
      }
      if (!e.byKey || clear) {
        if (this.parent.isEdit && clear) {
          this.saveCell();
        }
        return;
      }
      var _a = e.container.indexes, rowIndex = _a[0], cellIndex = _a[1];
      var actualIndex = e.element.getAttribute("aria-colindex") ? parseInt(e.element.getAttribute("aria-colindex"), 10) - 1 : cellIndex;
      if (actualIndex !== cellIndex) {
        cellIndex = actualIndex;
      }
      if (this.parent.frozenRows && e.container.isContent) {
        rowIndex += (this.parent.getContent().querySelector(".e-hiddenrow") ? 0 : this.parent.frozenRows) + this.parent.getHeaderContent().querySelectorAll(".e-insertedrow").length;
      }
      var isEdit = this.parent.isEdit;
      if (!this.parent.element.getElementsByClassName("e-popup-open").length) {
        isEdit = isEdit && !this.validateFormObj();
        switch (e.keyArgs.action) {
          case "tab":
          case "shiftTab":
            var indent = this.parent.isRowDragable() && this.parent.isDetail() ? 2 : this.parent.isRowDragable() || this.parent.isDetail() ? 1 : 0;
            var col = this.parent.getColumns()[cellIndex - indent];
            if (col && !this.parent.isEdit) {
              this.editCell(rowIndex, col.field);
            }
            if (isEdit || this.parent.isLastCellPrimaryKey) {
              this.editCellFromIndex(rowIndex, cellIndex);
            }
            break;
          case "enter":
          case "shiftEnter":
            e.keyArgs.preventDefault();
            var args = {
              cancel: false,
              keyArgs: e.keyArgs
            };
            this.parent.notify("beforeFocusCellEdit", args);
            if (!args.cancel && isEdit) {
              this.editCell(rowIndex, this.cellDetails.column.field);
            }
            break;
          case "f2":
            this.editCellFromIndex(rowIndex, cellIndex);
            this.focus.focus();
            break;
        }
      }
    };
    BatchEdit2.prototype.isAddRow = function(index) {
      return this.parent.getDataRows()[parseInt(index.toString(), 10)].classList.contains("e-insertedrow");
    };
    BatchEdit2.prototype.editCellFromIndex = function(rowIdx, cellIdx) {
      this.cellDetails.rowIndex = rowIdx;
      this.cellDetails.cellIndex = cellIdx;
      this.editCell(rowIdx, this.parent.getColumns()[parseInt(cellIdx.toString(), 10)].field, this.isAddRow(rowIdx));
    };
    BatchEdit2.prototype.closeEdit = function() {
      var gObj = this.parent;
      var rows = this.parent.getRowsObject();
      var argument = {
        cancel: false,
        batchChanges: this.getBatchChanges()
      };
      gObj.notify(beforeBatchCancel, argument);
      if (argument.cancel) {
        return;
      }
      if (gObj.isEdit) {
        this.saveCell(true);
      }
      this.isAdded = false;
      var selectedIndexes = [];
      if (gObj.selectionModule) {
        selectedIndexes = gObj.selectionModule.selectedRowIndexes;
      }
      gObj.clearSelection();
      for (var i = 0; i < rows.length; i++) {
        var isInsert = false;
        var isDirty = rows[parseInt(i.toString(), 10)].isDirty;
        isInsert = this.removeBatchElementChanges(rows[parseInt(i.toString(), 10)], isDirty);
        if (isInsert) {
          rows.splice(i, 1);
        }
        if (isInsert) {
          i--;
        }
      }
      if (!gObj.getContentTable().querySelector("tr.e-row")) {
        gObj.renderModule.renderEmptyRow();
      }
      var args = {
        requestType: "batchCancel",
        rows: this.parent.getRowsObject()
      };
      gObj.notify(batchCancel, {
        rows: this.parent.getRowsObject().length ? this.parent.getRowsObject() : [new Row({
          isDataRow: true,
          cells: [new Cell({
            isDataCell: true,
            visible: true
          })]
        })]
      });
      if (gObj.isCheckBoxSelection && (gObj.selectionSettings.checkboxOnly || gObj.selectionSettings.persistSelection)) {
        gObj.selectRows(selectedIndexes);
      } else {
        gObj.selectRow(this.cellDetails.rowIndex);
      }
      this.refreshRowIdx();
      gObj.notify(toolbarRefresh, {});
      this.parent.notify(tooltipDestroy, {});
      args = {
        requestType: "batchCancel",
        rows: this.parent.getRowsObject()
      };
      gObj.trigger(batchCancel, args);
    };
    BatchEdit2.prototype.removeBatchElementChanges = function(row2, isDirty) {
      var gObj = this.parent;
      var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);
      var isInstertedRemoved = false;
      if (isDirty) {
        row2.isDirty = isDirty;
        var tr = gObj.getRowElementByUID(row2.uid);
        if (tr) {
          if (tr.classList.contains("e-insertedrow")) {
            remove(tr);
            isInstertedRemoved = true;
          } else {
            refreshForeignData(row2, this.parent.getForeignKeyColumns(), row2.data);
            delete row2.changes;
            delete row2.edit;
            row2.isDirty = false;
            classList(tr, [], ["e-hiddenrow", "e-updatedtd"]);
            rowRenderer.refresh(row2, gObj.getColumns(), false);
          }
          if (this.parent.aggregates.length > 0) {
            var type = "type";
            var editType = [];
            editType["" + type] = "cancel";
            this.parent.notify(refreshFooterRenderer, editType);
            if (this.parent.groupSettings.columns.length > 0) {
              this.parent.notify(groupAggregates, editType);
            }
          }
        }
      }
      return isInstertedRemoved;
    };
    BatchEdit2.prototype.deleteRecord = function(fieldname, data) {
      this.saveCell();
      if (this.validateFormObj()) {
        this.saveCell(true);
      }
      this.isAdded = false;
      this.bulkDelete(fieldname, data);
      if (this.parent.aggregates.length > 0) {
        if (!(this.parent.isReact || this.parent.isVue)) {
          this.parent.notify(refreshFooterRenderer, {});
        }
        if (this.parent.groupSettings.columns.length > 0) {
          this.parent.notify(groupAggregates, {});
        }
        if (this.parent.isReact || this.parent.isVue) {
          this.parent.notify(refreshFooterRenderer, {});
        }
      }
    };
    BatchEdit2.prototype.addRecord = function(data) {
      this.bulkAddRow(data);
    };
    BatchEdit2.prototype.endEdit = function() {
      if (this.parent.isEdit && this.validateFormObj()) {
        return;
      }
      this.batchSave();
    };
    BatchEdit2.prototype.validateFormObj = function() {
      return this.parent.editModule.formObj && !this.parent.editModule.formObj.validate();
    };
    BatchEdit2.prototype.batchSave = function() {
      var gObj = this.parent;
      var deletedRecords2 = "deletedRecords";
      if (gObj.isCheckBoxSelection) {
        var checkAllBox = gObj.element.querySelector(".e-checkselectall").parentElement;
        if (checkAllBox.classList.contains("e-checkbox-disabled") && gObj.pageSettings.totalRecordsCount > gObj.currentViewData.length) {
          removeClass([checkAllBox], ["e-checkbox-disabled"]);
        }
      }
      this.saveCell();
      if (gObj.isEdit || this.editNextValCell() || gObj.isEdit) {
        return;
      }
      var changes = this.getBatchChanges();
      if (this.parent.selectionSettings.type === "Multiple" && changes["" + deletedRecords2].length && this.parent.selectionSettings.persistSelection) {
        changes["" + deletedRecords2] = this.removeSelectedData;
        this.removeSelectedData = [];
      }
      var original = {
        changedRecords: this.parent.getRowsObject().filter(function(row2) {
          return row2.isDirty && ["add", "delete"].indexOf(row2.edit) === -1;
        }).map(function(row2) {
          return row2.data;
        })
      };
      var args = {
        batchChanges: changes,
        cancel: false
      };
      gObj.trigger(beforeBatchSave, args, function(beforeBatchSaveArgs) {
        if (beforeBatchSaveArgs.cancel) {
          return;
        }
        gObj.showSpinner();
        gObj.notify(bulkSave, {
          changes,
          original
        });
      });
    };
    BatchEdit2.prototype.getBatchChanges = function() {
      var changes = {
        addedRecords: [],
        deletedRecords: [],
        changedRecords: []
      };
      var rows = this.parent.getRowsObject();
      for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
        var row2 = rows_1[_i];
        if (row2.isDirty) {
          switch (row2.edit) {
            case "add":
              changes.addedRecords.push(row2.changes);
              break;
            case "delete":
              changes.deletedRecords.push(row2.data);
              break;
            default:
              changes.changedRecords.push(row2.changes);
          }
        }
      }
      return changes;
    };
    BatchEdit2.prototype.removeRowObjectFromUID = function(uid2) {
      var rows = this.parent.getRowsObject();
      var i = 0;
      for (var len = rows.length; i < len; i++) {
        if (rows[parseInt(i.toString(), 10)].uid === uid2) {
          break;
        }
      }
      rows.splice(i, 1);
    };
    BatchEdit2.prototype.addRowObject = function(row2) {
      var gObj = this.parent;
      var isTop = gObj.editSettings.newRowPosition === "Top";
      var rowClone = row2.clone();
      if (isTop) {
        gObj.getRowsObject().unshift(rowClone);
      } else {
        gObj.getRowsObject().push(rowClone);
      }
    };
    BatchEdit2.prototype.bulkDelete = function(fieldname, data) {
      var _this = this;
      this.removeSelectedData = [];
      var gObj = this.parent;
      var index = gObj.selectedRowIndex;
      var selectedRows = gObj.getSelectedRows();
      var args = {
        primaryKey: this.parent.getPrimaryKeyFieldNames(),
        rowIndex: index,
        rowData: data ? data : gObj.getSelectedRecords(),
        cancel: false
      };
      if (data) {
        args.row = gObj.editModule.deleteRowUid ? gObj.getRowElementByUID(gObj.editModule.deleteRowUid) : gObj.getRows()[gObj.getCurrentViewRecords().indexOf(data)];
      } else {
        args.row = selectedRows;
      }
      if (!args.row) {
        return;
      }
      gObj.trigger(beforeBatchDelete, args, function(beforeBatchDeleteArgs) {
        if (beforeBatchDeleteArgs.cancel) {
          return;
        }
        _this.removeSelectedData = gObj.getSelectedRecords();
        gObj.clearSelection();
        beforeBatchDeleteArgs.row = beforeBatchDeleteArgs.row ? beforeBatchDeleteArgs.row : data ? gObj.getRows()[parseInt(index.toString(), 10)] : selectedRows;
        if (selectedRows.length === 1 || data) {
          if (Array.isArray(beforeBatchDeleteArgs.row)) {
            beforeBatchDeleteArgs.row = beforeBatchDeleteArgs.row[0];
          }
          var uid2 = beforeBatchDeleteArgs.row.getAttribute("data-uid");
          uid2 = data && _this.parent.editModule.deleteRowUid ? uid2 = _this.parent.editModule.deleteRowUid : uid2;
          if (beforeBatchDeleteArgs.row.classList.contains("e-insertedrow")) {
            _this.removeRowObjectFromUID(uid2);
            remove(beforeBatchDeleteArgs.row);
          } else {
            var rowObj = gObj.getRowObjectFromUID(uid2);
            rowObj.isDirty = true;
            rowObj.edit = "delete";
            classList(beforeBatchDeleteArgs.row, ["e-hiddenrow", "e-updatedtd"], []);
            if (gObj.frozenRows && index < gObj.frozenRows && gObj.getDataRows().length >= gObj.frozenRows) {
              gObj.getHeaderTable().querySelector(tbody).appendChild(gObj.getRowByIndex(gObj.frozenRows - 1));
            }
          }
          delete beforeBatchDeleteArgs.row;
        } else {
          if (data) {
            index = parseInt(beforeBatchDeleteArgs.row.getAttribute(ariaRowIndex), 10) - 1;
          }
          for (var i = 0; i < selectedRows.length; i++) {
            var uniqueid = selectedRows[parseInt(i.toString(), 10)].getAttribute("data-uid");
            if (selectedRows[parseInt(i.toString(), 10)].classList.contains("e-insertedrow")) {
              _this.removeRowObjectFromUID(uniqueid);
              remove(selectedRows[parseInt(i.toString(), 10)]);
            } else {
              classList(selectedRows[parseInt(i.toString(), 10)], ["e-hiddenrow", "e-updatedtd"], []);
              var selectedRow = gObj.getRowObjectFromUID(uniqueid);
              selectedRow.isDirty = true;
              selectedRow.edit = "delete";
              if (gObj.frozenRows && index < gObj.frozenRows && gObj.getDataRows().length >= gObj.frozenRows) {
                gObj.getHeaderTable().querySelector(tbody).appendChild(gObj.getRowByIndex(gObj.frozenRows - 1));
              }
            }
          }
          delete beforeBatchDeleteArgs.row;
        }
        _this.refreshRowIdx();
        if (data) {
          gObj.editModule.deleteRowUid = void 0;
        }
        if (!gObj.isCheckBoxSelection) {
          gObj.selectRow(index);
        }
        gObj.trigger(batchDelete, beforeBatchDeleteArgs);
        gObj.notify(batchDelete, {
          rows: _this.parent.getRowsObject()
        });
        gObj.focusModule.restoreFocus({
          requestType: "batchDelete"
        });
        gObj.notify(toolbarRefresh, {});
        if (!gObj.getContentTable().querySelector("tr.e-row")) {
          gObj.renderModule.renderEmptyRow();
        }
      });
    };
    BatchEdit2.prototype.refreshRowIdx = function() {
      var gObj = this.parent;
      var rows = gObj.getAllDataRows(true);
      var dataObjects = gObj.getRowsObject().filter(function(row2) {
        return !row2.isDetailRow;
      });
      for (var i = 0, j = 0, len = rows.length; i < len; i++) {
        if (rows[parseInt(i.toString(), 10)].classList.contains(row) && !rows[parseInt(i.toString(), 10)].classList.contains("e-hiddenrow")) {
          rows[parseInt(i.toString(), 10)].setAttribute(ariaRowIndex, (j + 1).toString());
          dataObjects[parseInt(i.toString(), 10)].index = j;
          j++;
        } else {
          rows[parseInt(i.toString(), 10)].removeAttribute(ariaRowIndex);
          dataObjects[parseInt(i.toString(), 10)].index = -1;
        }
      }
    };
    BatchEdit2.prototype.bulkAddRow = function(data) {
      var _this = this;
      var gObj = this.parent;
      if (!gObj.editSettings.allowAdding) {
        if (gObj.isEdit) {
          this.saveCell();
        }
        return;
      }
      if (gObj.isEdit) {
        this.saveCell();
        this.parent.notify(editNextValCell, {});
      }
      if (this.validateFormObj()) {
        return;
      }
      if (this.initialRender) {
        var visibleColumns = gObj.getVisibleColumns();
        for (var i = 0; i < visibleColumns.length; i++) {
          if (visibleColumns[parseInt(i.toString(), 10)].validationRules && visibleColumns[parseInt(i.toString(), 10)].validationRules["required"]) {
            var obj = {
              field: visibleColumns[parseInt(i.toString(), 10)]["field"].slice(),
              cellIdx: i
            };
            this.validationColObj.push(obj);
          }
        }
        this.initialRender = false;
      }
      this.parent.element.classList.add("e-editing");
      var defaultData = data ? data : this.getDefaultData();
      var args = {
        defaultData,
        primaryKey: gObj.getPrimaryKeyFieldNames(),
        cancel: false
      };
      gObj.trigger(beforeBatchAdd, args, function(beforeBatchAddArgs) {
        if (beforeBatchAddArgs.cancel) {
          return;
        }
        _this.isAdded = true;
        gObj.clearSelection();
        var row2 = new RowRenderer(_this.serviceLocator, null, _this.parent);
        var model = new RowModelGenerator(_this.parent);
        var modelData = model.generateRows([beforeBatchAddArgs.defaultData]);
        var tr = row2.render(modelData[0], gObj.getColumns());
        addFixedColumnBorder(tr);
        var col;
        var index;
        for (var i2 = 0; i2 < _this.parent.groupSettings.columns.length; i2++) {
          tr.insertBefore(_this.parent.createElement("td", {
            className: "e-indentcell"
          }), tr.firstChild);
          modelData[0].cells.unshift(new Cell({
            cellType: CellType.Indent
          }));
        }
        var tbody2 = gObj.getContentTable().querySelector(tbody);
        tr.classList.add("e-insertedrow");
        if (tbody2.querySelector(".e-emptyrow")) {
          var emptyRow = tbody2.querySelector(".e-emptyrow");
          emptyRow.parentNode.removeChild(emptyRow);
          if (gObj.frozenRows && gObj.element.querySelector(".e-frozenrow-empty")) {
            gObj.element.querySelector(".e-frozenrow-empty").classList.remove("e-frozenrow-empty");
          }
        }
        if (gObj.frozenRows && gObj.editSettings.newRowPosition === "Top") {
          tbody2 = gObj.getHeaderTable().querySelector(tbody);
        } else {
          tbody2 = gObj.getContentTable().querySelector(tbody);
        }
        if (_this.parent.editSettings.newRowPosition === "Top") {
          tbody2.insertBefore(tr, tbody2.firstChild);
        } else {
          tbody2.appendChild(tr);
        }
        addClass([].slice.call(tr.getElementsByClassName(rowCell)), ["e-updatedtd"]);
        modelData[0].isDirty = true;
        modelData[0].changes = extend({}, {}, modelData[0].data, true);
        modelData[0].edit = "add";
        _this.addRowObject(modelData[0]);
        _this.refreshRowIdx();
        _this.focus.forgetPrevious();
        gObj.notify(batchAdd, {
          rows: _this.parent.getRowsObject()
        });
        var changes = _this.getBatchChanges();
        var btmIdx = _this.getBottomIndex();
        if (_this.parent.editSettings.newRowPosition === "Top") {
          gObj.selectRow(0);
        } else {
          gObj.selectRow(btmIdx);
        }
        if (!data) {
          index = _this.findNextEditableCell(0, true);
          col = gObj.getColumns()[parseInt(index.toString(), 10)];
          if (_this.parent.editSettings.newRowPosition === "Top") {
            _this.editCell(0, col.field, true);
          } else {
            _this.editCell(btmIdx, col.field, true);
          }
        }
        if (_this.parent.aggregates.length > 0 && (data || changes[addedRecords].length)) {
          _this.parent.notify(refreshFooterRenderer, {});
        }
        var args1 = {
          defaultData: beforeBatchAddArgs.defaultData,
          row: tr,
          columnObject: col,
          columnIndex: index,
          primaryKey: beforeBatchAddArgs.primaryKey,
          cell: !isNullOrUndefined(index) ? tr.cells[parseInt(index.toString(), 10)] : void 0
        };
        gObj.trigger(batchAdd, args1);
      });
    };
    BatchEdit2.prototype.findNextEditableCell = function(columnIndex, isAdd, isValOnly) {
      var cols = this.parent.getColumns();
      var endIndex = cols.length;
      var validation;
      for (var i = columnIndex; i < endIndex; i++) {
        validation = isValOnly ? isNullOrUndefined(cols[parseInt(i.toString(), 10)].validationRules) : false;
        if (isAdd && (!cols[parseInt(i.toString(), 10)].template || cols[parseInt(i.toString(), 10)].field) && cols[parseInt(i.toString(), 10)].allowEditing && cols[parseInt(i.toString(), 10)].visible && !(cols[parseInt(i.toString(), 10)].isIdentity && cols[parseInt(i.toString(), 10)].isPrimaryKey) && !validation) {
          return i;
        }
      }
      return -1;
    };
    BatchEdit2.prototype.getDefaultData = function() {
      var gObj = this.parent;
      var data = {};
      var dValues = {
        "number": 0,
        "string": null,
        "boolean": false,
        "date": null,
        "datetime": null,
        "dateonly": null
      };
      for (var _i = 0, _a = gObj.columnModel; _i < _a.length; _i++) {
        var col = _a[_i];
        if (col.field) {
          setValue(col.field, Object.keys(col).indexOf("defaultValue") >= 0 ? col.defaultValue : dValues[col.type], data);
        }
      }
      return data;
    };
    BatchEdit2.prototype.setCellIdx = function(target) {
      var gLen = 0;
      if (this.parent.allowGrouping) {
        gLen = this.parent.groupSettings.columns.length;
      }
      this.cellDetails.cellIndex = target.cellIndex - gLen;
      this.cellDetails.rowIndex = parseInt(target.getAttribute("index"), 10);
    };
    BatchEdit2.prototype.editCell = function(index, field, isAdd) {
      var gObj = this.parent;
      var col = gObj.getColumnByField(field);
      this.index = index;
      this.field = field;
      this.isAdd = isAdd;
      var visibleRows = gObj.getDataRows();
      visibleRows = visibleRows.filter(function(row2) {
        return row2.style.display !== "none" && !row2.classList.contains("e-childrow-hidden");
      });
      var lastRowIndex = parseInt(visibleRows[visibleRows.length - 1].getAttribute("aria-rowindex"), 10) - 1;
      var checkEdit = gObj.isEdit && !(this.cellDetails.column.field === field && this.cellDetails.rowIndex === index && lastRowIndex !== index && this.prevEditedBatchCell);
      if (gObj.editSettings.allowEditing) {
        if (!checkEdit && (col.allowEditing || !col.allowEditing && gObj.focusModule.active && gObj.focusModule.active.getTable().rows[this.crtRowIndex] && gObj.focusModule.active.getTable().rows[this.crtRowIndex].classList.contains("e-insertedrow"))) {
          this.editCellExtend(index, field, isAdd);
        } else if (checkEdit) {
          this.editNext = true;
          this.saveCell();
        }
      }
    };
    BatchEdit2.prototype.editCellExtend = function(index, field, isAdd) {
      var _this = this;
      var gObj = this.parent;
      var col = gObj.getColumnByField(field);
      var keys = gObj.getPrimaryKeyFieldNames();
      if (gObj.isEdit) {
        return;
      }
      var rowData = extend({}, {}, this.getDataByIndex(index), true);
      var row2 = gObj.getDataRows()[parseInt(index.toString(), 10)];
      rowData = extend({}, {}, this.getDataByIndex(index), true);
      if (keys[0] === col.field && !row2.classList.contains("e-insertedrow") || col.columns || col.isPrimaryKey && col.isIdentity || col.commands) {
        this.parent.isLastCellPrimaryKey = true;
        return;
      }
      this.parent.isLastCellPrimaryKey = false;
      this.parent.element.classList.add("e-editing");
      var rowObj = gObj.getRowObjectFromUID(row2.getAttribute("data-uid"));
      var cells = [].slice.apply(row2.cells);
      var args = {
        columnName: col.field,
        isForeignKey: !isNullOrUndefined(col.foreignKeyValue),
        primaryKey: keys,
        rowData,
        validationRules: extend({}, col.validationRules ? col.validationRules : {}),
        value: getObject(col.field, rowData),
        type: !isAdd ? "edit" : "add",
        cancel: false,
        foreignKeyData: rowObj && rowObj.foreignKeyData
      };
      args.cell = cells[this.getColIndex(cells, this.getCellIdx(col.uid))];
      args.row = row2;
      args.columnObject = col;
      if (!args.cell) {
        return;
      }
      gObj.trigger(cellEdit, args, function(cellEditArgs) {
        if (cellEditArgs.cancel) {
          return;
        }
        cellEditArgs.cell = cellEditArgs.cell ? cellEditArgs.cell : cells[_this.getColIndex(cells, _this.getCellIdx(col.uid))];
        cellEditArgs.row = cellEditArgs.row ? cellEditArgs.row : row2;
        cellEditArgs.columnObject = cellEditArgs.columnObject ? cellEditArgs.columnObject : col;
        _this.cellDetails = {
          rowData,
          column: col,
          value: cellEditArgs.value,
          isForeignKey: cellEditArgs.isForeignKey,
          rowIndex: index,
          cellIndex: parseInt(cellEditArgs.cell.getAttribute(ariaColIndex), 10) - 1,
          foreignKeyData: cellEditArgs.foreignKeyData
        };
        if (cellEditArgs.cell.classList.contains("e-updatedtd")) {
          _this.isColored = true;
          cellEditArgs.cell.classList.remove("e-updatedtd");
        }
        gObj.isEdit = true;
        var checkSelect = !isNullOrUndefined(cellEditArgs.row.querySelector(".e-selectionbackground")) ? true : false;
        gObj.clearSelection();
        if ((!gObj.isCheckBoxSelection || !gObj.isPersistSelection) && (checkSelect || !gObj.selectionSettings.checkboxOnly)) {
          gObj.selectRow(_this.cellDetails.rowIndex, true);
        }
        _this.renderer.update(cellEditArgs);
        _this.parent.notify(batchEditFormRendered, cellEditArgs);
        _this.form = select("#" + gObj.element.id + "EditForm", gObj.element);
        gObj.editModule.applyFormValidation([col]);
        _this.parent.element.querySelector(".e-gridpopup").style.display = "none";
      });
    };
    BatchEdit2.prototype.updateCell = function(rowIndex, field, value) {
      var gObj = this.parent;
      var col = gObj.getColumnByField(field);
      var index = gObj.getColumnIndexByField(field);
      var isInsertedBatchRow = gObj.getRowByIndex(rowIndex).classList.contains("e-insertedrow") && gObj.getRowByIndex(rowIndex).classList.contains("e-batchrow");
      if (col && (!col.isPrimaryKey || isInsertedBatchRow) && col.allowEditing) {
        var td_1 = this.parent.isSpan ? getCellFromRow(gObj, rowIndex, index) : getCellByColAndRowIndex(this.parent, col, rowIndex, index);
        if (this.parent.isSpan && !td_1) {
          return;
        }
        var rowObj_1 = gObj.getRowObjectFromUID(td_1.parentElement.getAttribute("data-uid"));
        if (gObj.isEdit || !rowObj_1.changes && (!(value instanceof Date) && rowObj_1.data["" + field] !== value || value instanceof Date && new Date(rowObj_1.data["" + field]).toString() !== new Date(value).toString()) || rowObj_1.changes && (!(value instanceof Date) && rowObj_1.changes["" + field] !== value || value instanceof Date && new Date(rowObj_1.changes["" + field]).toString() !== new Date(value).toString())) {
          this.refreshTD(td_1, col, rowObj_1, value);
          var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
          if ((this.parent.isReact && this.parent.requireTemplateRef || isReactChild && this.parent.parentDetails.parentInstObj.requireTemplateRef) && col.template) {
            var thisRef_1 = this;
            var newReactTd_1 = this.newReactTd;
            thisRef_1.parent.renderTemplates(function() {
              thisRef_1.parent.trigger(queryCellInfo, {
                cell: newReactTd_1 || td_1,
                column: col,
                data: rowObj_1.changes
              });
            });
          } else if ((this.parent.isReact || isReactChild) && col.template) {
            this.parent.renderTemplates();
            this.parent.trigger(queryCellInfo, {
              cell: this.newReactTd || td_1,
              column: col,
              data: rowObj_1.changes
            });
          } else {
            this.parent.trigger(queryCellInfo, {
              cell: this.newReactTd || td_1,
              column: col,
              data: rowObj_1.changes
            });
          }
        }
      }
    };
    BatchEdit2.prototype.setChanges = function(rowObj, field, value) {
      if (!rowObj.changes) {
        rowObj.changes = extend({}, {}, rowObj.data, true);
      }
      if (!isNullOrUndefined(field)) {
        if (typeof value === "string") {
          value = this.parent.sanitize(value);
        }
        DataUtil.setValue(field, value, rowObj.changes);
      }
      if (rowObj.data["" + field] !== value) {
        var type = this.parent.getColumnByField(field).type;
        if (type === "date" || type === "datetime") {
          if (new Date(rowObj.data["" + field]).toString() !== new Date(value).toString()) {
            rowObj.isDirty = true;
          }
        } else {
          rowObj.isDirty = true;
        }
      }
    };
    BatchEdit2.prototype.updateRow = function(index, data) {
      var keys = Object.keys(data);
      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var col = keys_1[_i];
        this.updateCell(index, col, data["" + col]);
      }
    };
    BatchEdit2.prototype.getCellIdx = function(uid2) {
      var cIdx = this.parent.getColumnIndexByUid(uid2) + this.parent.groupSettings.columns.length;
      if (!isNullOrUndefined(this.parent.detailTemplate) || !isNullOrUndefined(this.parent.childGrid)) {
        cIdx++;
      }
      if (this.parent.isRowDragable()) {
        cIdx++;
      }
      return cIdx;
    };
    BatchEdit2.prototype.refreshTD = function(td, column, rowObj, value) {
      var cell = new CellRenderer(this.parent, this.serviceLocator);
      value = column.type === "number" && !isNullOrUndefined(value) ? parseFloat(value) : value;
      if (rowObj) {
        this.setChanges(rowObj, column.field, value);
        refreshForeignData(rowObj, this.parent.getForeignKeyColumns(), rowObj.changes);
      }
      var rowcell = rowObj ? rowObj.cells : void 0;
      var parentElement;
      var cellIndex;
      if (this.parent.isReact) {
        parentElement = td.parentElement;
        cellIndex = td.cellIndex;
      }
      var index = 0;
      if (rowObj) {
        cell.refreshTD(td, rowcell[this.getCellIdx(column.uid) - index], rowObj.changes, {
          "index": this.getCellIdx(column.uid)
        });
      }
      if (this.parent.isReact) {
        this.newReactTd = parentElement.cells[parseInt(cellIndex.toString(), 10)];
        parentElement.cells[parseInt(cellIndex.toString(), 10)].classList.add("e-updatedtd");
      } else {
        td.classList.add("e-updatedtd");
      }
      td.classList.add("e-updatedtd");
      this.parent.notify(toolbarRefresh, {});
    };
    BatchEdit2.prototype.getColIndex = function(cells, index) {
      var cIdx = 0;
      if (this.parent.allowGrouping && this.parent.groupSettings.columns) {
        cIdx = this.parent.groupSettings.columns.length;
      }
      if (!isNullOrUndefined(this.parent.detailTemplate) || !isNullOrUndefined(this.parent.childGrid)) {
        cIdx++;
      }
      if (this.parent.isRowDragable()) {
        cIdx++;
      }
      for (var m = 0; m < cells.length; m++) {
        var colIndex = parseInt(cells[parseInt(m.toString(), 10)].getAttribute(ariaColIndex), 10) - 1;
        if (colIndex === index - cIdx) {
          return m;
        }
      }
      return -1;
    };
    BatchEdit2.prototype.editNextValCell = function() {
      var gObj = this.parent;
      var insertedRows = gObj.element.querySelectorAll(".e-insertedrow");
      var isSingleInsert = insertedRows.length === 1 ? true : false;
      if (isSingleInsert && this.isAdded && !gObj.isEdit) {
        var btmIdx = this.getBottomIndex();
        for (var i = this.cellDetails.cellIndex; i < gObj.getColumns().length; i++) {
          if (gObj.isEdit) {
            return;
          }
          var index = this.findNextEditableCell(this.cellDetails.cellIndex + 1, true, true);
          var col = gObj.getColumns()[parseInt(index.toString(), 10)];
          if (col) {
            if (this.parent.editSettings.newRowPosition === "Bottom") {
              this.editCell(btmIdx, col.field, true);
            } else {
              var args = {
                index: 0,
                column: col
              };
              this.parent.notify(nextCellIndex, args);
              this.editCell(args.index, col.field, true);
            }
            this.saveCell();
          }
        }
        if (!gObj.isEdit) {
          this.isAdded = false;
        }
      } else if (!isSingleInsert && this.isAdded && !gObj.isEdit) {
        for (var i = 0; i < insertedRows.length; i++) {
          if (!gObj.isEdit) {
            for (var j = 0; j < this.validationColObj.length; j++) {
              if (gObj.isEdit) {
                break;
              } else if (insertedRows[parseInt(i.toString(), 10)].querySelectorAll("td:not(.e-hide, .e-rowdragdrop, .e-detailrowcollapse, .e-detailrowexpand, .e-indentcell)")[this.validationColObj[parseInt(j.toString(), 10)].cellIdx].innerHTML === "") {
                this.editCell(parseInt(insertedRows[parseInt(i.toString(), 10)].getAttribute("aria-rowindex"), 10) - 1, this.validationColObj[parseInt(j.toString(), 10)].field);
                if (this.validateFormObj()) {
                  this.saveCell();
                }
              }
            }
          } else {
            break;
          }
        }
        if (!gObj.isEdit) {
          this.isAdded = false;
        }
      }
    };
    BatchEdit2.prototype.escapeCellEdit = function() {
      var args = this.generateCellArgs();
      args.value = args.previousValue;
      if (args.value || !this.cellDetails.column.validationRules) {
        this.successCallBack(args, args.cell.parentElement, args.column, true)(args);
      }
    };
    BatchEdit2.prototype.generateCellArgs = function() {
      var gObj = this.parent;
      this.parent.element.classList.remove("e-editing");
      var column = this.cellDetails.column;
      var obj = {};
      obj[column.field] = getObject(column.field, this.cellDetails.rowData);
      var editedData = gObj.editModule.getCurrentEditedData(this.form, obj);
      var cloneEditedData = extend({}, editedData);
      editedData = extend({}, editedData, this.cellDetails.rowData);
      var value = getObject(column.field, cloneEditedData);
      if (!isNullOrUndefined(column.field) && !isUndefined(value)) {
        setValue(column.field, value, editedData);
      }
      var args = {
        columnName: column.field,
        value: getObject(column.field, editedData),
        rowData: this.cellDetails.rowData,
        column,
        previousValue: this.cellDetails.value,
        isForeignKey: this.cellDetails.isForeignKey,
        cancel: false
      };
      args.cell = this.form.parentElement;
      args.columnObject = column;
      return args;
    };
    BatchEdit2.prototype.saveCell = function(isForceSave) {
      if (this.preventSaveCell || !this.form) {
        return;
      }
      var gObj = this.parent;
      if (!isForceSave && (!gObj.isEdit || this.validateFormObj())) {
        return;
      }
      this.preventSaveCell = true;
      var args = this.generateCellArgs();
      var tr = args.cell.parentElement;
      var col = args.column;
      args.cell.removeAttribute("aria-label");
      if (!isForceSave) {
        gObj.trigger(cellSave, args, this.successCallBack(args, tr, col));
        gObj.notify(batchForm, {
          formObj: this.form
        });
      } else {
        this.successCallBack(args, tr, col)(args);
      }
    };
    BatchEdit2.prototype.successCallBack = function(cellSaveArgs, tr, column, isEscapeCellEdit) {
      var _this = this;
      return function(cellSaveArgs2) {
        var gObj = _this.parent;
        cellSaveArgs2.cell = cellSaveArgs2.cell ? cellSaveArgs2.cell : _this.form.parentElement;
        cellSaveArgs2.columnObject = cellSaveArgs2.columnObject ? cellSaveArgs2.columnObject : column;
        if (cellSaveArgs2.cancel) {
          _this.preventSaveCell = false;
          if (_this.editNext) {
            _this.editNext = false;
            if (_this.cellDetails.rowIndex === _this.index && _this.cellDetails.column.field === _this.field) {
              return;
            }
            _this.editCellExtend(_this.index, _this.field, _this.isAdd);
          }
          return;
        }
        gObj.editModule.destroyWidgets([column]);
        gObj.isEdit = false;
        gObj.editModule.destroyForm();
        _this.parent.notify(tooltipDestroy, {});
        var rowObj = gObj.getRowObjectFromUID(tr.getAttribute("data-uid"));
        _this.refreshTD(cellSaveArgs2.cell, column, rowObj, cellSaveArgs2.value);
        if (_this.parent.isReact) {
          cellSaveArgs2.cell = _this.newReactTd;
        }
        removeClass([tr], [editedRow, "e-batchrow"]);
        removeClass([cellSaveArgs2.cell], ["e-editedbatchcell", "e-boolcell"]);
        if (!isNullOrUndefined(cellSaveArgs2.value) && cellSaveArgs2.value.toString() === (!isNullOrUndefined(_this.cellDetails.value) ? _this.cellDetails.value : "").toString() && !_this.isColored || isNullOrUndefined(cellSaveArgs2.value) && isNullOrUndefined(rowObj.data[column.field]) && isNullOrUndefined(_this.cellDetails.value) && !cellSaveArgs2.cell.parentElement.classList.contains("e-insertedrow")) {
          cellSaveArgs2.cell.classList.remove("e-updatedtd");
        }
        if (isNullOrUndefined(isEscapeCellEdit)) {
          var isReactCompiler = gObj.isReact && column.template && typeof column.template !== "string";
          var isReactChild = gObj.parentDetails && gObj.parentDetails.parentInstObj && gObj.parentDetails.parentInstObj.isReact;
          if (isReactCompiler || isReactChild) {
            if (gObj.requireTemplateRef) {
              gObj.renderTemplates(function() {
                gObj.trigger(cellSaved, cellSaveArgs2);
              });
            } else {
              gObj.renderTemplates();
              gObj.trigger(cellSaved, cellSaveArgs2);
            }
          } else {
            gObj.trigger(cellSaved, cellSaveArgs2);
          }
        }
        gObj.notify(toolbarRefresh, {});
        _this.isColored = false;
        if (_this.parent.aggregates.length > 0) {
          if (!(_this.parent.isReact || _this.parent.isVue)) {
            _this.parent.notify(refreshFooterRenderer, {});
          }
          if (_this.parent.groupSettings.columns.length > 0 && !_this.isAddRow(_this.cellDetails.rowIndex)) {
            _this.parent.notify(groupAggregates, {});
          }
          if (_this.parent.isReact || _this.parent.isVue) {
            _this.parent.notify(refreshFooterRenderer, {});
          }
        }
        _this.preventSaveCell = false;
        if (_this.editNext) {
          _this.editNext = false;
          if (_this.cellDetails.rowIndex === _this.index && _this.cellDetails.column.field === _this.field && _this.prevEditedBatchCell) {
            return;
          }
          var col = gObj.getColumnByField(_this.field);
          if (col && (col.allowEditing || !col.allowEditing && gObj.focusModule.active && gObj.focusModule.active.getTable().rows[_this.crtRowIndex] && gObj.focusModule.active.getTable().rows[_this.crtRowIndex].classList.contains("e-insertedrow"))) {
            _this.editCellExtend(_this.index, _this.field, _this.isAdd);
          }
        }
        if (isEscapeCellEdit) {
          gObj.notify(restoreFocus, {});
        }
      };
    };
    BatchEdit2.prototype.prevEditedBatchCellMatrix = function() {
      var editedBatchCellMatrix = [];
      var gObj = this.parent;
      var editedBatchCell = gObj.focusModule.active.getTable().querySelector(".e-editedbatchcell");
      if (editedBatchCell) {
        var tr = editedBatchCell.parentElement;
        var rowIndex = [].slice.call(this.parent.focusModule.active.getTable().rows).indexOf(tr);
        var cellIndex = [].slice.call(tr.cells).indexOf(editedBatchCell);
        editedBatchCellMatrix = [rowIndex, cellIndex];
      }
      return editedBatchCellMatrix;
    };
    BatchEdit2.prototype.getDataByIndex = function(index) {
      var row2 = this.parent.getRowObjectFromUID(this.parent.getDataRows()[parseInt(index.toString(), 10)].getAttribute("data-uid"));
      return row2.changes ? row2.changes : row2.data;
    };
    BatchEdit2.prototype.keyDownHandler = function(e) {
      if (this.addBatchRow || (e.action === "tab" || e.action === "shiftTab") && this.parent.isEdit) {
        var gObj = this.parent;
        var btmIdx = this.getBottomIndex();
        var rowcell = parentsUntil(e.target, rowCell);
        if (this.addBatchRow || rowcell && !this.parent.isReact) {
          var cell = void 0;
          if (rowcell) {
            cell = rowcell.querySelector(".e-field");
          }
          if (this.addBatchRow || cell) {
            var visibleColumns = this.parent.getVisibleColumns();
            var columnIndex = e.action === "tab" ? visibleColumns.length - 1 : 0;
            if (this.addBatchRow || visibleColumns[parseInt(columnIndex.toString(), 10)].field === cell.getAttribute("id").slice(this.parent.element.id.length)) {
              if (this.cellDetails.rowIndex === btmIdx && e.action === "tab") {
                if (gObj.editSettings.newRowPosition === "Top") {
                  gObj.editSettings.newRowPosition = "Bottom";
                  this.addRecord();
                  gObj.editSettings.newRowPosition = "Top";
                } else {
                  this.addRecord();
                }
                this.addBatchRow = false;
              } else {
                this.saveCell();
              }
            }
          }
        }
      }
    };
    BatchEdit2.prototype.addCancelWhilePaging = function() {
      if (this.validateFormObj()) {
        this.parent.notify(destroyForm, {});
        this.parent.isEdit = false;
        this.editNext = false;
        this.mouseDownElement = void 0;
        this.isColored = false;
      }
    };
    BatchEdit2.prototype.getBottomIndex = function() {
      var changes = this.getBatchChanges();
      return this.parent.getCurrentViewRecords().length + changes[addedRecords].length - changes[deletedRecords].length - 1;
    };
    return BatchEdit2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/dialog-edit.js
var __extends41 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var DialogEdit = (
  /** @class */
  function(_super) {
    __extends41(DialogEdit2, _super);
    function DialogEdit2(parent, serviceLocator, renderer) {
      var _this = (
        //constructor
        _super.call(this, parent, serviceLocator) || this
      );
      _this.parent = parent;
      _this.serviceLocator = serviceLocator;
      _this.renderer = renderer;
      return _this;
    }
    DialogEdit2.prototype.closeEdit = function() {
      _super.prototype.closeEdit.call(this);
    };
    DialogEdit2.prototype.addRecord = function(data, index) {
      _super.prototype.addRecord.call(this, data, index);
    };
    DialogEdit2.prototype.endEdit = function() {
      _super.prototype.endEdit.call(this);
    };
    DialogEdit2.prototype.updateRow = function(index, data) {
      _super.prototype.updateRow.call(this, index, data);
    };
    DialogEdit2.prototype.deleteRecord = function(fieldname, data) {
      _super.prototype.deleteRecord.call(this, fieldname, data);
    };
    DialogEdit2.prototype.startEdit = function(tr) {
      _super.prototype.startEdit.call(this, tr);
    };
    return DialogEdit2;
  }(NormalEdit)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/datepicker-edit-cell.js
var __extends42 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var DatePickerEditCell = (
  /** @class */
  function(_super) {
    __extends42(DatePickerEditCell2, _super);
    function DatePickerEditCell2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.isMaskModuleInjected = true;
      return _this;
    }
    DatePickerEditCell2.prototype.write = function(args) {
      this.edit = this.parent.editModule;
      if (args.column.editType === "datepickeredit") {
        this.obj = new DatePicker(extend(dateanddatetimerender(args, this.parent.editSettings.mode, this.parent.enableRtl, this.parent.cssClass, this), args.column.edit.params));
        if (this.isMaskModuleInjected) {
          DatePicker.Inject(MaskedDateTime);
          this.isMaskModuleInjected = false;
        }
      }
      if (args.column.editType === "datetimepickeredit") {
        this.obj = new DateTimePicker(extend(dateanddatetimerender(args, this.parent.editSettings.mode, this.parent.enableRtl, this.parent.cssClass, this), args.column.edit.params));
      }
      this.obj.appendTo(args.element);
    };
    return DatePickerEditCell2;
  }(EditCellBase)
);
function dateanddatetimerender(args, mode, rtl, css, datePickerEditCell) {
  var isInline = mode !== "Dialog";
  var format = getCustomDateFormat(args.column.format, args.column.type);
  var value = getObject(args.column.field, args.rowData);
  value = value ? new Date(value) : null;
  return {
    floatLabelType: isInline ? "Never" : "Always",
    value,
    format,
    placeholder: isInline ? "" : args.column.headerText,
    enableRtl: rtl,
    enabled: isEditable(args.column, args.requestType, args.element) && isCellHaveWidth(parentsUntil(args.element, "e-rowcell")),
    cssClass: css ? css : null,
    close: datePickerClose.bind(datePickerEditCell)
  };
}
function datePickerClose(args) {
  if (args.event && args.event.action === "escape") {
    this.edit.editCellDialogClose = true;
  }
}

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/template-edit-cell.js
var TemplateEditCell = (
  /** @class */
  function() {
    function TemplateEditCell2(parent) {
      this.parent = parent;
    }
    TemplateEditCell2.prototype.read = function(element, value) {
      return value;
    };
    TemplateEditCell2.prototype.write = function() {
    };
    TemplateEditCell2.prototype.destroy = function() {
    };
    return TemplateEditCell2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/edit.js
var Edit = (
  /** @class */
  function() {
    function Edit2(parent, serviceLocator) {
      this.isShowAddedRowValidate = false;
      this.editType = {
        "Inline": InlineEdit,
        "Normal": InlineEdit,
        "Batch": BatchEdit,
        "Dialog": DialogEdit
      };
      this.fieldname = "";
      this.data = {};
      this.editCellDialogClose = false;
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      this.l10n = this.serviceLocator.getService("localization");
      this.addEventListener();
      this.updateEditObj();
      this.createAlertDlg();
      this.createConfirmDlg();
    }
    Edit2.prototype.updateColTypeObj = function() {
      var cols = this.parent.columnModel;
      for (var i = 0; i < cols.length; i++) {
        if (this.parent.editSettings.template || cols[parseInt(i.toString(), 10)].editTemplate) {
          var templteCell = "templateedit";
          cols[parseInt(i.toString(), 10)].edit = extend(new Edit2.editCellType["" + templteCell](this.parent), cols[parseInt(i.toString(), 10)].edit || {});
        } else {
          cols[parseInt(i.toString(), 10)].edit = extend(new Edit2.editCellType[cols[parseInt(i.toString(), 10)].editType && Edit2.editCellType[cols[parseInt(i.toString(), 10)].editType] ? cols[parseInt(i.toString(), 10)].editType : "defaultedit"](this.parent, this.serviceLocator), cols[parseInt(i.toString(), 10)].edit || {});
        }
      }
      this.parent.log("primary_column_missing");
    };
    Edit2.prototype.getModuleName = function() {
      return "edit";
    };
    Edit2.prototype.onPropertyChanged = function(e) {
      if (e.module !== this.getModuleName()) {
        return;
      }
      var gObj = this.parent;
      for (var _i = 0, _a = Object.keys(e.properties); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "allowAdding":
          case "allowDeleting":
          case "allowEditing":
            if (gObj.editSettings.allowAdding || gObj.editSettings.allowEditing || gObj.editSettings.allowDeleting) {
              this.initialEnd();
            }
            break;
          case "mode":
            this.updateEditObj();
            gObj.isEdit = gObj.editSettings.showAddNewRow ? true : false;
            gObj.refresh();
            break;
        }
      }
    };
    Edit2.prototype.updateEditObj = function() {
      if (this.editModule) {
        this.editModule.destroy();
      }
      this.renderer = new EditRender(this.parent, this.serviceLocator);
      this.editModule = new this.editType[this.parent.editSettings.mode](this.parent, this.serviceLocator, this.renderer);
    };
    Edit2.prototype.initialEnd = function() {
      this.updateColTypeObj();
    };
    Edit2.prototype.startEdit = function(tr) {
      var gObj = this.parent;
      if (!gObj.editSettings.allowEditing || gObj.isEdit && (!gObj.editSettings.showAddNewRow || gObj.editSettings.showAddNewRow && !isNullOrUndefined(gObj.element.querySelector("." + editedRow))) || gObj.editSettings.mode === "Batch") {
        return;
      }
      this.parent.element.classList.add("e-editing");
      if (!gObj.getSelectedRows().length || isNullOrUndefined(this.parent.getRowByIndex(parseInt(this.parent.getSelectedRows()[0].getAttribute("aria-rowindex"), 10) - 1))) {
        if (!tr) {
          this.showDialog("EditOperationAlert", this.alertDObj);
          return;
        }
      } else if (!tr) {
        tr = gObj.getSelectedRows()[0];
      }
      if (this.parent.enableVirtualization && this.parent.editSettings.mode === "Normal") {
        var idx = parseInt(tr.getAttribute("aria-rowindex"), 10) - 1;
        tr = this.parent.getRowByIndex(idx);
      }
      var lastTr = gObj.getContent().querySelector("tr:last-child");
      var hdrTbody = gObj.getHeaderContent().querySelector("tbody");
      if (gObj.frozenRows && isNullOrUndefined(lastTr) && hdrTbody && hdrTbody.querySelector("tr:last-child")) {
        this.isLastRow = tr.rowIndex === parseInt(gObj.getHeaderContent().querySelector("tbody").querySelector("tr:last-child").getAttribute("aria-rowindex"), 10) - 1;
      } else if (lastTr) {
        this.isLastRow = tr.rowIndex === lastTr.rowIndex;
      }
      if (tr.style.display === "none") {
        return;
      }
      this.editModule.startEdit(tr);
      this.refreshToolbar();
      gObj.element.querySelector(".e-gridpopup").style.display = "none";
      this.parent.notify("start-edit", {});
      if (gObj.editSettings.showAddNewRow) {
        this.destroyToolTip();
      }
    };
    Edit2.prototype.checkLastRow = function(tr, args) {
      var checkLastRow = this.isLastRow;
      if (this.parent.height !== "auto" && this.parent.editSettings.newRowPosition === "Bottom" && args && args.requestType === "add" && this.parent.getContent().firstElementChild.offsetHeight > this.parent.getContentTable().scrollHeight) {
        addClass([].slice.call(tr.getElementsByClassName(rowCell)), "e-lastrowadded");
      } else if (checkLastRow && tr && tr.classList) {
        addClass([].slice.call(tr.getElementsByClassName(rowCell)), "e-lastrowcell");
      }
    };
    Edit2.prototype.closeEdit = function() {
      if (this.parent.editSettings.mode === "Batch" && this.parent.editSettings.showConfirmDialog && this.parent.element.getElementsByClassName("e-updatedtd").length) {
        this.showDialog("CancelEdit", this.dialogObj);
        return;
      }
      this.parent.element.classList.remove("e-editing");
      this.editModule.closeEdit();
      this.refreshToolbar();
      this.parent.notify(closeEdit, {
        requestType: "cancel"
      });
      if (this.parent.editSettings.showAddNewRow) {
        this.destroyToolTip();
      }
    };
    Edit2.prototype.refreshToolbar = function() {
      this.parent.notify(toolbarRefresh, {});
    };
    Edit2.prototype.addRecord = function(data, index) {
      if (!this.parent.editSettings.allowAdding) {
        return;
      }
      var args = {
        startEdit: true
      };
      if (!data) {
        this.parent.notify(virtualScrollAddActionBegin, args);
      }
      if (args.startEdit) {
        this.parent.element.classList.add("e-editing");
        this.editModule.addRecord(data, index);
        this.refreshToolbar();
        this.parent.notify("start-add", {});
      }
    };
    Edit2.prototype.deleteRecord = function(fieldname, data) {
      var gObj = this.parent;
      if (!gObj.editSettings.allowDeleting) {
        return;
      }
      if (!data) {
        if (!gObj.getSelectedRecords().length && isNullOrUndefined(gObj.commandDelIndex)) {
          this.showDialog("DeleteOperationAlert", this.alertDObj);
          return;
        }
      }
      if (gObj.editSettings.showDeleteConfirmDialog) {
        this.fieldname = fieldname;
        this.data = data;
        this.showDialog("ConfirmDelete", this.dialogObj);
        return;
      }
      this.editModule.deleteRecord(fieldname, data);
    };
    Edit2.prototype.deleteRow = function(tr) {
      this.deleteRowUid = tr.getAttribute("data-uid");
      var rowObj = this.parent.getRowObjectFromUID(this.deleteRowUid);
      if (!isNullOrUndefined(rowObj)) {
        this.deleteRecord(null, rowObj.data);
      }
    };
    Edit2.prototype.endEdit = function() {
      if (this.parent.editSettings.mode === "Batch" && this.parent.editSettings.showConfirmDialog && (isNullOrUndefined(this.formObj) || this.formObj.validate())) {
        this.parent.editModule.saveCell();
        this.parent.notify(editNextValCell, {});
        if (isNullOrUndefined(this.formObj) || this.formObj.validate()) {
          this.showDialog("BatchSaveConfirm", this.dialogObj);
          return;
        }
      }
      this.endEditing();
    };
    Edit2.prototype.updateCell = function(rowIndex, field, value) {
      this.editModule.updateCell(rowIndex, field, value);
    };
    Edit2.prototype.updateRow = function(index, data) {
      this.editModule.updateRow(index, data);
    };
    Edit2.prototype.batchCancel = function() {
      this.closeEdit();
    };
    Edit2.prototype.batchSave = function() {
      this.endEdit();
    };
    Edit2.prototype.editCell = function(index, field) {
      this.editModule.editCell(index, field);
    };
    Edit2.prototype.editFormValidate = function() {
      return this.formObj ? this.formObj.validate() : true;
    };
    Edit2.prototype.getBatchChanges = function() {
      return this.editModule.getBatchChanges ? this.editModule.getBatchChanges() : {};
    };
    Edit2.prototype.getCurrentEditCellData = function() {
      var obj = this.getCurrentEditedData(this.formObj.element, {});
      return obj[Object.keys(obj)[0]];
    };
    Edit2.prototype.saveCell = function() {
      this.editModule.saveCell();
    };
    Edit2.prototype.endEditing = function() {
      if (!this.parent.editSettings.showAddNewRow) {
        this.parent.element.classList.remove("e-editing");
      }
      this.editModule.endEdit();
      this.isShowAddedRowValidate = false;
      this.refreshToolbar();
    };
    Edit2.prototype.showDialog = function(content2, obj) {
      obj.content = "<div>" + this.l10n.getConstant(content2) + "</div>";
      obj.dataBind();
      obj.show();
      if (this.parent.enableRtl) {
        obj.refresh();
      }
    };
    Edit2.prototype.getValueFromType = function(col, value) {
      var val = value;
      switch (col.type) {
        case "number":
          val = !isNaN(parseFloat(value)) ? parseFloat(value) : null;
          break;
        case "boolean":
          if (col.editType !== "booleanedit") {
            val = value === this.l10n.getConstant("True") || value === true ? true : false;
          }
          break;
        case "date":
        case "datetime":
          if (col.editType !== "datepickeredit" && col.editType !== "datetimepickeredit" && value && value.length) {
            val = new Date(value);
          } else if (value === "") {
            val = null;
          }
          break;
        case "dateonly":
          val = value && (value = new Date(value)) ? value.getFullYear() + "-" + padZero(value.getMonth() + 1) + "-" + padZero(value.getDate()) : null;
          break;
      }
      return val;
    };
    Edit2.prototype.destroyToolTip = function() {
      var elements = [].slice.call(this.parent.element.getElementsByClassName("e-griderror"));
      for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
        var elem = elements_1[_i];
        remove(elem);
      }
      this.parent.getContent().firstElementChild.style.position = "relative";
      if (this.parent.isFrozenGrid()) {
        if (this.parent.element.querySelector(".e-gridheader")) {
          this.parent.element.querySelector(".e-gridheader").style.position = "";
        }
        this.parent.element.querySelector(".e-gridcontent").style.position = "";
      }
    };
    Edit2.prototype.createConfirmDlg = function() {
      this.dialogObj = this.dlgWidget([{
        click: this.dlgOk.bind(this),
        buttonModel: {
          content: this.l10n.getConstant("OKButton"),
          cssClass: this.parent.cssClass ? "e-primary " + this.parent.cssClass : "e-primary",
          isPrimary: true
        }
      }, {
        click: this.dlgCancel.bind(this),
        buttonModel: {
          cssClass: this.parent.cssClass ? "e-flat " + this.parent.cssClass : "e-flat",
          content: this.l10n.getConstant("CancelButton")
        }
      }], "EditConfirm");
    };
    Edit2.prototype.createAlertDlg = function() {
      this.alertDObj = this.dlgWidget([{
        click: this.alertClick.bind(this),
        buttonModel: {
          content: this.l10n.getConstant("OKButton"),
          cssClass: this.parent.cssClass ? "e-flat " + this.parent.cssClass : "e-flat",
          isPrimary: true
        }
      }], "EditAlert");
    };
    Edit2.prototype.alertClick = function() {
      this.alertDObj.hide();
    };
    Edit2.prototype.dlgWidget = function(btnOptions, name) {
      var div = this.parent.createElement("div", {
        id: this.parent.element.id + name
      });
      this.parent.element.appendChild(div);
      var options = {
        showCloseIcon: false,
        isModal: true,
        visible: false,
        closeOnEscape: true,
        target: this.parent.element,
        width: "320px",
        animationSettings: {
          effect: "None"
        },
        cssClass: this.parent.cssClass ? this.parent.cssClass : ""
      };
      options.buttons = btnOptions;
      var obj = new Dialog(options);
      var isStringTemplate = "isStringTemplate";
      obj["" + isStringTemplate] = true;
      obj.appendTo(div);
      return obj;
    };
    Edit2.prototype.dlgCancel = function() {
      if (this.parent.pagerModule) {
        this.parent.pagerModule.isForceCancel = false;
      }
      this.parent.focusModule.clearIndicator();
      this.dialogObj.hide();
      this.parent.focusModule.restoreFocus({
        requestType: "cancel"
      });
      this.parent.notify("cancelcnfrmDlg", {});
    };
    Edit2.prototype.dlgOk = function() {
      switch (this.dialogObj.element.querySelector(".e-dlg-content").firstElementChild.innerText) {
        case this.l10n.getConstant("ConfirmDelete"):
          this.editModule.deleteRecord(this.fieldname, this.data);
          if (this.parent.editSettings.showDeleteConfirmDialog && !this.parent.allowSelection) {
            this.parent.commandDelIndex = void 0;
          }
          break;
        case this.l10n.getConstant("CancelEdit"):
          this.editModule.closeEdit();
          break;
        case this.l10n.getConstant("BatchSaveConfirm"):
          this.endEditing();
          break;
        case this.l10n.getConstant("BatchSaveLostChanges"):
          if (this.parent.editSettings.mode === "Batch") {
            this.editModule.addCancelWhilePaging();
          }
          if (this.parent.pagerModule) {
            this.parent.pagerModule.isForceCancel = false;
          }
          this.executeAction();
          break;
      }
      this.dlgCancel();
    };
    Edit2.prototype.destroyEditComponents = function() {
      if (this.parent.isEdit) {
        this.destroyWidgets();
        this.destroyForm();
      }
      this.destroy();
    };
    Edit2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.eventDetails = [{
        event: inBoundModelChanged,
        handler: this.onPropertyChanged
      }, {
        event: initialEnd,
        handler: this.initialEnd
      }, {
        event: keyPressed,
        handler: this.keyPressHandler
      }, {
        event: autoCol,
        handler: this.updateColTypeObj
      }, {
        event: tooltipDestroy,
        handler: this.destroyToolTip
      }, {
        event: preventBatch,
        handler: this.preventBatch
      }, {
        event: destroyForm,
        handler: this.destroyForm
      }, {
        event: destroy,
        handler: this.destroyEditComponents
      }];
      addRemoveEventListener(this.parent, this.eventDetails, true, this);
      this.actionBeginFunction = this.onActionBegin.bind(this);
      this.actionCompleteFunction = this.actionComplete.bind(this);
      this.parent.on(destroyEditForm, this.actionBeginFunction);
      this.parent.addEventListener(actionComplete, this.actionCompleteFunction);
    };
    Edit2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      addRemoveEventListener(this.parent, this.eventDetails, false);
      this.parent.removeEventListener(actionComplete, this.actionCompleteFunction);
      this.parent.off(destroyEditForm, this.actionBeginFunction);
    };
    Edit2.prototype.actionComplete = function(e) {
      var actions = ["add", "beginEdit", "save", "delete", "cancel", "filterAfterOpen", "filterchoicerequest"];
      if (actions.indexOf(e.requestType) < 0) {
        this.parent.isEdit = this.parent.editSettings.showAddNewRow ? true : false;
      }
      if (e.requestType === "batchsave") {
        this.parent.focusModule.restoreFocus({
          requestType: "save"
        });
      }
      this.refreshToolbar();
    };
    Edit2.prototype.getCurrentEditedData = function(form, editedData) {
      var gObj = this.parent;
      if (gObj.editSettings.template) {
        var elements = [].slice.call(form.elements);
        for (var k = 0; k < elements.length; k++) {
          if ((elements[parseInt(k.toString(), 10)].hasAttribute("name") && elements[parseInt(k.toString(), 10)].className !== "e-multi-hidden" || elements[parseInt(k.toString(), 10)].classList.contains("e-multiselect")) && !(elements[parseInt(k.toString(), 10)].type === "hidden" && (parentsUntil(elements[parseInt(k.toString(), 10)], "e-switch-wrapper") || parentsUntil(elements[parseInt(k.toString(), 10)], "e-checkbox-wrapper")))) {
            var field = elements[parseInt(k.toString(), 10)].hasAttribute("name") ? setComplexFieldID(elements[parseInt(k.toString(), 10)].getAttribute("name")) : setComplexFieldID(elements[parseInt(k.toString(), 10)].getAttribute("id"));
            var column = gObj.getColumnByField(field) || {
              field,
              type: elements[parseInt(k.toString(), 10)].getAttribute("type")
            };
            var value = void 0;
            if (column.type === "checkbox" || column.type === "boolean") {
              value = elements[parseInt(k.toString(), 10)].checked;
            } else if (elements[parseInt(k.toString(), 10)].value) {
              value = elements[parseInt(k.toString(), 10)].value;
              if (elements[parseInt(k.toString(), 10)].ej2_instances && elements[parseInt(k.toString(), 10)].ej2_instances.length && !isNullOrUndefined(elements[parseInt(k.toString(), 10)].ej2_instances[0].value)) {
                elements[parseInt(k.toString(), 10)].blur();
                value = elements[parseInt(k.toString(), 10)].ej2_instances[0].value;
              }
            } else if (elements[parseInt(k.toString(), 10)].ej2_instances) {
              value = elements[parseInt(k.toString(), 10)].ej2_instances[0].value;
            }
            if (column.edit && typeof column.edit.read === "string") {
              value = getValue(column.edit.read, window)(elements[parseInt(k.toString(), 10)], value);
            } else if (column.edit && column.edit.read) {
              value = column.edit.read(elements[parseInt(k.toString(), 10)], value);
            }
            value = gObj.editModule.getValueFromType(column, value);
            if (elements[parseInt(k.toString(), 10)].type === "radio") {
              if (elements[parseInt(k.toString(), 10)].checked) {
                DataUtil.setValue(column.field, value, editedData);
              }
            } else {
              if (typeof value === "string") {
                this.parent.sanitize(value);
              }
              DataUtil.setValue(column.field, value, editedData);
            }
          }
        }
        return editedData;
      }
      var col = gObj.columnModel.filter(function(col2) {
        return col2.editTemplate;
      });
      for (var j = 0; j < col.length; j++) {
        if (form[getComplexFieldID(col[parseInt(j.toString(), 10)].field)]) {
          var inputElements = [].slice.call(form[getComplexFieldID(col[parseInt(j.toString(), 10)].field)]).filter(function(element) {
            return element.tagName.toLowerCase() === "input";
          });
          inputElements = inputElements.length ? inputElements : [form[getComplexFieldID(col[parseInt(j.toString(), 10)].field)]];
          var temp = inputElements.filter(function(e) {
            return !isNullOrUndefined(e.ej2_instances);
          });
          if (temp.length === 0) {
            temp = inputElements.filter(function(e) {
              return e.hasAttribute("name");
            });
          }
          for (var k = 0; k < temp.length; k++) {
            var value = this.getValue(col[parseInt(j.toString(), 10)], temp[parseInt(k.toString(), 10)], editedData);
            if (col[parseInt(j.toString(), 10)].type === "string") {
              value = this.parent.sanitize(value);
            }
            DataUtil.setValue(col[parseInt(j.toString(), 10)].field, value, editedData);
          }
        }
      }
      var inputs = [].slice.call(form.getElementsByClassName("e-field"));
      for (var i = 0, len = inputs.length; i < len; i++) {
        var col_1 = gObj.getColumnByUid(inputs[parseInt(i.toString(), 10)].getAttribute("e-mappinguid"));
        if (col_1 && col_1.field) {
          var value = this.getValue(col_1, inputs[parseInt(i.toString(), 10)], editedData);
          if (col_1.type === "string" && !(col_1.isForeignColumn() && typeof value !== "string")) {
            value = this.parent.sanitize(value);
          }
          DataUtil.setValue(col_1.field, value, editedData);
        }
      }
      return editedData;
    };
    Edit2.prototype.getValue = function(col, input, editedData) {
      var value = input.ej2_instances ? input.ej2_instances[0].value : input.value;
      var gObj = this.parent;
      var temp = col.edit.read;
      if (col.type === "checkbox" || col.type === "boolean") {
        value = input.checked;
      }
      if (typeof temp === "string") {
        temp = getValue(temp, window);
        value = gObj.editModule.getValueFromType(col, temp(input, value));
      } else {
        value = gObj.editModule.getValueFromType(col, col.edit.read(input, value));
      }
      if (isNullOrUndefined(editedData[col.field]) && value === "") {
        value = editedData[col.field];
      }
      return value;
    };
    Edit2.prototype.onActionBegin = function(e) {
      if ((e.requestType === "columnstate" || this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache && e.requestType === "sorting") && this.parent.isEdit && this.parent.editSettings.mode !== "Batch") {
        this.closeEdit();
      } else {
        var editRow = this.parent.element.querySelector("." + editedRow);
        var addRow = this.parent.element.querySelector("." + addedRow);
        if (editRow && this.parent.frozenRows && e.requestType === "virtualscroll" && parseInt(parentsUntil(editRow, row).getAttribute(ariaRowIndex), 10) - 1 < this.parent.frozenRows) {
          return;
        }
        var restrictedRequestTypes = ["filterAfterOpen", "filterBeforeOpen", "filterchoicerequest", "filterSearchBegin", "save", "infiniteScroll", "virtualscroll"];
        var isRestrict = restrictedRequestTypes.indexOf(e.requestType) === -1;
        var isAddRows = !this.parent.editSettings.showAddNewRow || this.parent.editSettings.showAddNewRow && !isNullOrUndefined(this.parent.element.querySelector(".e-editedrow"));
        var isDestroyVirtualForm = (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) && this.formObj && isAddRows && !this.formObj.isDestroyed && (editRow || addRow || e.requestType === "cancel") && isRestrict;
        if (!this.parent.enableVirtualization && isAddRows && this.parent.editSettings.mode !== "Batch" && this.formObj && !this.formObj.isDestroyed && isRestrict && !e.cancel || isDestroyVirtualForm) {
          this.destroyWidgets();
          this.destroyForm();
        }
      }
    };
    Edit2.prototype.destroyWidgets = function(cols) {
      var gObj = this.parent;
      gObj.isWidgetsDestroyed = true;
      if (gObj.editSettings.template) {
        var parentIns = getParentIns(this.parent);
        parentIns = parentIns.isReact ? parentIns : this.parent;
        parentIns.destroyTemplate(["editSettingsTemplate"]);
        if (this.parent.isReact) {
          this.parent.renderTemplates();
        }
      }
      if (this.parent.editSettings.mode === "Dialog" && this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
        cols = [];
        var allColumns = this.parent.getColumns();
        for (var i = 0; i < allColumns.length; i++) {
          var column = allColumns[parseInt(i.toString(), 10)];
          if (column.visible || this.parent.groupSettings.columns.indexOf(column.field) > -1) {
            cols.push(column);
          }
        }
      } else {
        cols = cols ? cols : this.parent.getCurrentVisibleColumns(this.parent.enableColumnVirtualization);
      }
      if (cols.some(function(column2) {
        return !isNullOrUndefined(column2.editTemplate);
      })) {
        this.parent.destroyTemplate(["editTemplate"]);
        if (this.parent.isReact) {
          this.parent.renderTemplates();
        }
      }
      for (var _i = 0, cols_1 = cols; _i < cols_1.length; _i++) {
        var col = cols_1[_i];
        var temp = col.edit.destroy;
        if (col.edit.destroy) {
          if (typeof temp === "string") {
            temp = getValue(temp, window);
            temp();
          } else {
            col.edit.destroy();
          }
        }
      }
      var elements = [].slice.call(this.formObj.element.elements);
      for (var i = 0; i < elements.length; i++) {
        var element = elements[parseInt(i.toString(), 10)];
        if (element.hasAttribute("name")) {
          var instanceElement = isNullOrUndefined(element.parentElement) ? null : element.parentElement.classList.contains("e-ddl") ? element.parentElement.querySelector("input") : element;
          if (instanceElement && instanceElement.ej2_instances && instanceElement.ej2_instances.length && !instanceElement.ej2_instances[0].isDestroyed) {
            instanceElement.ej2_instances[0].destroy();
            instanceElement.remove();
          }
        }
      }
    };
    Edit2.prototype.destroyForm = function() {
      this.destroyToolTip();
      var formObjects = [this.formObj, this.virtualFormObj];
      var col = this.parent.columnModel.filter(function(col2) {
        return col2.editTemplate;
      });
      for (var i = 0; i < formObjects.length; i++) {
        if (formObjects[parseInt(i.toString(), 10)] && formObjects[parseInt(i.toString(), 10)].element && !formObjects[parseInt(i.toString(), 10)].isDestroyed) {
          formObjects[parseInt(i.toString(), 10)].destroy();
          var parentIns = getParentIns(this.parent);
          if (parentIns.isReact && this.parent.editSettings.mode === "Dialog" && (!isNullOrUndefined(this.parent.editSettings.template) || col.length)) {
            formObjects[parseInt(i.toString(), 10)].element.remove();
          }
        }
      }
      this.destroyToolTip();
    };
    Edit2.prototype.destroy = function() {
      var gridElement = this.parent.element;
      if (!gridElement) {
        return;
      }
      var hasGridChild = gridElement.querySelector("." + gridHeader) && gridElement.querySelector("." + gridContent) ? true : false;
      if (hasGridChild) {
        this.destroyForm();
      }
      this.removeEventListener();
      var elem = this.dialogObj.element;
      if (elem.childElementCount > 0) {
        this.dialogObj.destroy();
        remove(elem);
      }
      elem = this.alertDObj.element;
      if (elem.childElementCount > 0) {
        this.alertDObj.destroy();
        remove(elem);
      }
      if (!hasGridChild) {
        return;
      }
      if (this.editModule) {
        this.editModule.destroy();
      }
    };
    Edit2.prototype.keyPressHandler = function(e) {
      var isMacLike = /(Mac)/i.test(navigator.platform);
      if (isMacLike && e.metaKey && e.action === "ctrlEnter") {
        e.action = "insert";
      }
      switch (e.action) {
        case "insert":
          this.addRecord();
          break;
        case "delete":
          if ((e.target.tagName !== "INPUT" || e.target.classList.contains("e-checkselect")) && !document.querySelector(".e-popup-open.e-edit-dialog")) {
            this.deleteRecord();
          }
          break;
        case "f2":
          this.startEdit();
          break;
        case "enter":
          if (!parentsUntil(e.target, "e-unboundcelldiv") && this.parent.editSettings.mode !== "Batch" && (parentsUntil(e.target, gridContent) || (this.parent.frozenRows || this.parent.editSettings.showAddNewRow && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling)) && parentsUntil(e.target, headerContent)) && (!document.getElementsByClassName("e-popup-open").length || document.querySelectorAll(".e-popup-open .e-editcell").length && !document.querySelectorAll(".e-popup-open:not(.e-dialog)").length)) {
            e.preventDefault();
            if (this.parent.isEdit) {
              this.parent.isFocusFirstCell = true;
            }
            this.endEdit();
          }
          break;
        case "escape":
          if (this.parent.isEdit && !this.editCellDialogClose) {
            if (this.parent.editSettings.mode === "Batch") {
              this.editModule.escapeCellEdit();
            } else {
              this.curretRowFocus(e);
            }
          }
          if (this.editCellDialogClose) {
            this.editCellDialogClose = false;
          }
          break;
        case "tab":
        case "shiftTab":
          this.curretRowFocus(e);
          break;
      }
    };
    Edit2.prototype.curretRowFocus = function(e) {
      if (this.parent.isEdit && this.parent.editSettings.mode !== "Batch") {
        this.parent.isWidgetsDestroyed = false;
        var editedRow2 = parentsUntil(e.target, "e-editedrow") || parentsUntil(e.target, "e-addedrow");
        if (editedRow2) {
          var focusableEditCells = [].slice.call(editedRow2.querySelectorAll(".e-input:not(.e-disabled)"));
          var commandColCell = [].slice.call(editedRow2.querySelectorAll(".e-unboundcell"));
          if (commandColCell && commandColCell.length) {
            for (var i = 0; i < commandColCell.length; i++) {
              focusableEditCells = focusableEditCells.concat([].slice.call(commandColCell[parseInt(i.toString(), 10)].querySelectorAll(".e-btn:not(.e-hide)")));
            }
          }
          var rowCell2 = parentsUntil(e.target, "e-rowcell");
          rowCell2 = rowCell2 && rowCell2.classList.contains("e-unboundcell") ? e.target : rowCell2;
          var lastCell = parentsUntil(focusableEditCells[focusableEditCells.length - 1], "e-rowcell");
          lastCell = lastCell && lastCell.classList.contains("e-unboundcell") ? focusableEditCells[focusableEditCells.length - 1] : lastCell;
          if (rowCell2 === lastCell && e.action === "tab" || e.action === "escape" || rowCell2 === parentsUntil(focusableEditCells[0], "e-rowcell") && e.action === "shiftTab" && !this.parent.editSettings.showAddNewRow) {
            var uid2 = editedRow2.getAttribute("data-uid");
            var rows = this.parent.allowGrouping ? !isNullOrUndefined(this.parent.getContent()) ? [].slice.call(this.parent.getContent().querySelectorAll("tr")) : [] : this.parent.getRows();
            var rowIndex = rows.map(function(m) {
              return m.getAttribute("data-uid");
            }).indexOf(uid2);
            if (this.parent.frozenRows) {
              if (parentsUntil(editedRow2, "e-gridheader")) {
                rowIndex = editedRow2.rowIndex;
              } else if (parentsUntil(editedRow2, "e-gridcontent")) {
                rowIndex = rowIndex - this.parent.frozenRows;
              }
            }
            if (editedRow2.classList.contains("e-addedrow")) {
              rowIndex = 0;
            }
            if (e.action === "escape") {
              this.parent.isFocusFirstCell = true;
              this.closeEdit();
            } else {
              this.isShowAddedRowValidate = true;
              this.parent.selectionModule.preventFocus = false;
              this.parent.isFocusFirstCell = true;
              this.endEdit();
              this.isShowAddedRowValidate = false;
            }
            if (this.parent.focusModule.active && (!this.parent.editSettings.showAddNewRow || editedRow2.classList.contains("e-editedrow") || this.parent.editSettings.showAddNewRow && editedRow2.classList.contains("e-addedrow") && isNullOrUndefined(this.parent.element.querySelector('.e-griderror:not([style*="display: none"])')))) {
              var firstCellIndex = 0;
              var matrix = this.parent.focusModule.active.matrix;
              if (matrix && matrix.matrix.length && matrix.matrix[parseInt(rowIndex.toString(), 10)]) {
                var rowMatrix = matrix.matrix[parseInt(rowIndex.toString(), 10)];
                for (var i = 0; i < rowMatrix.length; i++) {
                  if (rowMatrix[parseInt(i.toString(), 10)] > 0) {
                    firstCellIndex = i;
                    break;
                  }
                }
              }
              var firstCell = getValue(rowIndex + ".cells." + firstCellIndex, this.parent.focusModule.active.matrix.getRowsFromIndex(rowIndex, this.parent.focusModule.active));
              if (firstCell && firstCell.getBoundingClientRect().width === 0) {
                var firstContentCellIndex = this.parent.focusModule.active.matrix.nextVisibleCellFocus(rowIndex, firstCellIndex, e.action, this.parent.focusModule.active.keyActions[e.action], this.parent.focusModule.active, this.parent.focusModule.active.matrix.current[1]);
                firstCellIndex = firstContentCellIndex[1];
              }
              this.parent.focusModule.active.matrix.current = [rowIndex, firstCellIndex];
            }
          }
          if (this.parent.editSettings.showAddNewRow && e.action === "tab" && parentsUntil(e.target, "e-addedrow")) {
            this.isShowAddedRowValidate = true;
          }
        }
      }
    };
    Edit2.prototype.preventBatch = function(args) {
      this.preventObj = args;
      this.showDialog("BatchSaveLostChanges", this.dialogObj);
    };
    Edit2.prototype.executeAction = function() {
      this.preventObj.handler.call(this.preventObj.instance, this.preventObj.arg1, this.preventObj.arg2, this.preventObj.arg3, this.preventObj.arg4, this.preventObj.arg5, this.preventObj.arg6, this.preventObj.arg7, this.preventObj.arg8);
    };
    Edit2.prototype.applyFormValidation = function(cols, newRule) {
      var gObj = this.parent;
      var idx = 0;
      var form = this.parent.editSettings.mode !== "Dialog" ? gObj.editSettings.showAddNewRow && gObj.element.querySelector("." + editedRow) ? gObj.element.querySelector("." + editedRow).getElementsByClassName("e-gridform")[parseInt(idx.toString(), 10)] : gObj.element.getElementsByClassName("e-gridform")[parseInt(idx.toString(), 10)] : select("#" + gObj.element.id + "_dialogEdit_wrapper .e-gridform", document);
      var index = 1;
      var rules = {};
      var mRules = {};
      var frRules = {};
      cols = cols ? cols : gObj.getColumns();
      for (var i = 0; i < cols.length; i++) {
        if (!cols[parseInt(i.toString(), 10)].visible && (gObj.editSettings.mode !== "Dialog" || gObj.groupSettings.columns.indexOf(cols[parseInt(i.toString(), 10)].field) === -1 && gObj.editSettings.mode === "Dialog")) {
          continue;
        }
        if (cols[parseInt(i.toString(), 10)].validationRules && isNullOrUndefined(newRule)) {
          setValidationRuels(cols[parseInt(i.toString(), 10)], index, rules, mRules, frRules, cols.length);
        }
      }
      rules = extend(rules, mRules, frRules);
      this.parent.editModule.formObj = this.createFormObj(form, newRule ? newRule : rules);
    };
    Edit2.prototype.createFormObj = function(form, rules) {
      var _this = this;
      return new FormValidator(form, {
        rules,
        locale: this.parent.locale,
        validationComplete: function(args) {
          _this.validationComplete(args);
        },
        customPlacement: function(inputElement, error) {
          var uid2 = inputElement.getAttribute("e-mappinguid");
          var args = {
            column: _this.parent.getColumnByUid(uid2),
            error,
            inputElement,
            value: inputElement.value
          };
          if (!(event && event["relatedTarget"] && event["relatedTarget"].classList.contains("e-cancelbutton")) && !_this.parent.editSettings.showAddNewRow || _this.parent.editSettings.showAddNewRow && event && event.target && (parentsUntil(event.target, _this.parent.element.id + "_update", true) || parentsUntil(event.target, "e-grid-menu") && (event.target.classList.contains("e-save") || event.target.querySelector(".e-save")) || _this.isShowAddedRowValidate || parentsUntil(event.target, "e-unboundcell") && parentsUntil(event.target, "e-update") || event["action"] === "enter" && (parentsUntil(event.target, "e-content") || parentsUntil(event.target, "e-addedrow"))) || _this.parent.editSettings.showAddNewRow && !isNullOrUndefined(_this.parent.element.querySelector("." + editedRow))) {
            _this.valErrorPlacement(inputElement, error);
          }
          _this.isShowAddedRowValidate = false;
          _this.parent.notify(valCustomPlacement, args);
        }
      });
    };
    Edit2.prototype.valErrorPlacement = function(inputElement, error) {
      if (this.parent.isEdit) {
        var id = error.getAttribute("for");
        var elem = this.getElemTable(inputElement).querySelector("#" + getParsedFieldID(id) + "_Error");
        if (!elem) {
          this.createTooltip(inputElement, error, id, "");
        } else {
          elem.querySelector(".e-tip-content").innerHTML = error.outerHTML;
        }
      }
    };
    Edit2.prototype.getElemTable = function(inputElement) {
      var isFrozenHdr;
      var gObj = this.parent;
      var table2;
      if (gObj.editSettings.mode !== "Dialog") {
        isFrozenHdr = gObj.frozenRows && closest(inputElement, "." + row) && gObj.frozenRows > (parseInt(closest(inputElement, "." + row).getAttribute(ariaRowIndex), 10) - 1 || 0);
        table2 = this.parent.isFrozenGrid() ? gObj.element : isFrozenHdr || gObj.editSettings.showAddNewRow && (gObj.enableVirtualization || gObj.enableInfiniteScrolling) ? gObj.getHeaderTable() : gObj.getContentTable();
      } else {
        table2 = select("#" + gObj.element.id + "_dialogEdit_wrapper", document);
      }
      return table2;
    };
    Edit2.prototype.resetElemPosition = function(elem, args) {
      var td = parentsUntil(args.element, rowCell);
      if (td) {
        var tdRight = td.getBoundingClientRect().right;
        var elemRight = elem.getBoundingClientRect().right;
        if (elemRight > tdRight) {
          var offSet = elemRight - tdRight;
          elem.style.left = elem.offsetLeft - offSet + "px";
        }
      }
    };
    Edit2.prototype.validationComplete = function(args) {
      if (this.parent.isEdit) {
        var elem = this.getElemTable(args.element).querySelector("#" + getParsedFieldID(args.inputName) + "_Error");
        if (this.parent.editSettings.showAddNewRow && !elem && args.element) {
          var error = parentsUntil(args.element, "e-rowcell").querySelector(".e-error");
          if (error) {
            error.classList.remove("e-error");
          }
        }
        if (elem) {
          if (args.status === "failure") {
            elem.style.display = "";
            this.resetElemPosition(elem, args);
          } else {
            elem.style.display = "none";
          }
        }
      }
    };
    Edit2.prototype.createTooltip = function(element, error, name, display) {
      var formObj = this.formObj.element;
      var customForm = parentsUntil(element, "e-virtual-validation");
      if (customForm) {
        formObj = this.virtualFormObj.element;
      }
      var gcontent = this.parent.getContent().firstElementChild;
      var isScroll = gcontent.scrollHeight > gcontent.clientHeight || gcontent.scrollWidth > gcontent.clientWidth;
      var isInline = this.parent.editSettings.mode !== "Dialog";
      var td = closest(element, "." + rowCell);
      var row2 = closest(element, "." + row);
      var isFHdr;
      var isFHdrLastRow = false;
      var validationForBottomRowPos;
      var isBatchModeLastRow = false;
      var isAddNewRow = this.parent.editSettings.showAddNewRow && !isNullOrUndefined(parentsUntil(element, addedRow)) && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling);
      var viewPortRowCount = Math.round(this.parent.getContent().clientHeight / this.parent.getRowHeight()) - 1;
      var rows = [].slice.call(this.parent.getContent().getElementsByClassName(row));
      if (this.parent.editSettings.mode === "Batch") {
        rows = [].slice.call(this.parent.getContent().querySelectorAll(".e-row:not(.e-hiddenrow)"));
        if (viewPortRowCount > 1 && rows.length > viewPortRowCount && parseInt(rows[rows.length - 1].getAttribute(ariaRowIndex), 10) - 1 === parseInt(row2.getAttribute(ariaRowIndex), 10) - 1) {
          isBatchModeLastRow = true;
        }
      }
      if (isInline) {
        if (this.parent.frozenRows || isAddNewRow) {
          var headerRows = this.parent.editSettings.showAddNewRow ? ".e-row:not(.e-hiddenrow.e-addedrow)" : ".e-row:not(.e-hiddenrow)";
          var fHearderRows = [].slice.call(this.parent.getHeaderTable().querySelector(tbody).querySelectorAll(headerRows));
          isFHdr = fHearderRows.length > (parseInt(row2.getAttribute(ariaRowIndex), 10) - 1 || 0);
          isFHdrLastRow = isFHdr && parseInt(row2.getAttribute(ariaRowIndex), 10) - 1 === fHearderRows.length - 1;
          var insertRow = [].slice.call(this.parent.getHeaderTable().querySelector(tbody).querySelectorAll(".e-row:not(.e-hiddenrow)"));
          if (insertRow.length === 1 && (insertRow[0].classList.contains("e-addedrow") || insertRow[0].classList.contains("e-insertedrow"))) {
            isFHdrLastRow = true;
          }
        }
        if (isFHdrLastRow || viewPortRowCount > 1 && rows.length > viewPortRowCount && (this.parent.editSettings.newRowPosition === "Bottom" && this.editModule.args && this.editModule.args.requestType === "add" || td.classList.contains("e-lastrowcell") && !row2.classList.contains(addedRow)) || isBatchModeLastRow) {
          validationForBottomRowPos = true;
        }
      }
      var table2 = isInline ? isFHdr ? this.parent.getHeaderTable() : this.parent.getContentTable() : select("#" + this.parent.element.id + "_dialogEdit_wrapper .e-dlg-content", document);
      var client = table2.getBoundingClientRect();
      var left = isInline ? this.parent.element.getBoundingClientRect().left : client.left;
      var input = closest(element, "td");
      var inputClient = input ? input.getBoundingClientRect() : element.parentElement.getBoundingClientRect();
      var div = this.parent.createElement("div", {
        className: "e-tooltip-wrap e-lib e-control e-popup e-griderror",
        id: name + "_Error"
      });
      var divStyles = "display:" + display + ";top:" + ((isFHdr ? inputClient.top + inputClient.height : inputClient.bottom - client.top) + table2.scrollTop + 9) + "px;left:" + (inputClient.left - left + table2.scrollLeft + inputClient.width / 2) + "px;max-width:" + inputClient.width + "px;text-align:center;";
      updateCSSText(div, divStyles);
      if (this.parent.cssClass) {
        div.classList.add(this.parent.cssClass);
      }
      if (isInline && client.left < left) {
        div.style.left = parseInt(div.style.left, 10) - client.left + left + "px";
      }
      var content2 = this.parent.createElement("div", {
        className: "e-tip-content"
      });
      content2.appendChild(error);
      var arrow;
      if (validationForBottomRowPos) {
        arrow = this.parent.createElement("div", {
          className: "e-arrow-tip e-tip-bottom"
        });
        arrow.appendChild(this.parent.createElement("div", {
          className: "e-arrow-tip-outer e-tip-bottom"
        }));
        arrow.appendChild(this.parent.createElement("div", {
          className: "e-arrow-tip-inner e-tip-bottom"
        }));
      } else {
        arrow = this.parent.createElement("div", {
          className: "e-arrow-tip e-tip-top"
        });
        arrow.appendChild(this.parent.createElement("div", {
          className: "e-arrow-tip-outer e-tip-top"
        }));
        arrow.appendChild(this.parent.createElement("div", {
          className: "e-arrow-tip-inner e-tip-top"
        }));
      }
      div.appendChild(content2);
      div.appendChild(arrow);
      if (!customForm && (this.parent.frozenRows || isAddNewRow) && this.parent.editSettings.mode !== "Dialog") {
        var getEditCell = this.parent.editSettings.mode === "Normal" ? closest(element, ".e-editcell") : closest(element, "." + table);
        getEditCell.style.position = "relative";
        div.style.position = "absolute";
        if (this.parent.editSettings.mode === "Batch" || closest(element, "." + frozenContent) || closest(element, "." + frozenHeader) || this.parent.frozenRows || isAddNewRow) {
          if (this.parent.isFrozenGrid()) {
            if (td.classList.contains("e-unfreeze")) {
              addClass([div], "e-unfreeze");
              formObj.appendChild(div);
            } else {
              var elem = closest(td, ".e-gridheader") ? this.parent.element.querySelector(".e-gridheader") : rows.length === 1 ? this.parent.element.querySelector(".e-gridcontent").querySelector(".e-content") : this.parent.element.querySelector(".e-gridcontent");
              elem.appendChild(div);
              elem.style.position = "relative";
            }
          } else {
            formObj.appendChild(div);
          }
        }
      } else {
        if (customForm) {
          this.virtualFormObj.element.appendChild(div);
        } else {
          if (this.parent.editSettings.mode !== "Dialog" && this.parent.isFrozenGrid()) {
            if (td.classList.contains("e-unfreeze")) {
              addClass([div], "e-unfreeze");
              this.formObj.element.appendChild(div);
            } else {
              var elem = closest(td, ".e-gridheader") ? this.parent.element.querySelector(".e-gridheader") : rows.length === 1 ? this.parent.element.querySelector(".e-gridcontent").querySelector(".e-content") : this.parent.element.querySelector(".e-gridcontent");
              elem.appendChild(div);
              elem.style.position = "relative";
            }
          } else {
            this.formObj.element.appendChild(div);
          }
        }
      }
      if (!isNullOrUndefined(td)) {
        if (td.classList.contains("e-fixedfreeze")) {
          div.classList.add("e-fixederror");
        } else if (td.classList.contains("e-leftfreeze") || td.classList.contains("e-rightfreeze")) {
          div.classList.add("e-freezeerror");
        }
      }
      if (!validationForBottomRowPos && isInline && gcontent.getBoundingClientRect().bottom < inputClient.bottom + inputClient.height) {
        var contentDiv = this.parent.getContent().querySelector(".e-content");
        if (this.parent.currentViewData.length === 0 && contentDiv.scrollTop === 0) {
          contentDiv.scrollTop = div.offsetHeight + arrow.scrollHeight;
        } else {
          gcontent.scrollTop = gcontent.scrollTop + div.offsetHeight + arrow.scrollHeight;
        }
      }
      var lineHeight = parseInt(document.defaultView.getComputedStyle(div, null).getPropertyValue("font-size"), 10);
      if ((this.parent.frozenRows || isAddNewRow) && this.parent.editSettings.mode !== "Dialog") {
        div.style.left = input.offsetLeft + (input.offsetWidth / 2 - div.offsetWidth / 2) + "px";
      } else {
        div.style.left = parseInt(div.style.left, 10) - div.offsetWidth / 2 + "px";
      }
      if (div.getBoundingClientRect().width < inputClient.width && div.querySelector("label").getBoundingClientRect().height / (lineHeight * 1.2) >= 2) {
        div.style.width = div.style.maxWidth;
      }
      if (isInline && !isScroll && !this.parent.allowPaging || this.parent.frozenRows || isAddNewRow) {
        var pos = calculateRelativeBasedPosition(input, div);
        div.style.top = pos.top + inputClient.height + 9 + "px";
      }
      if (validationForBottomRowPos) {
        if (isScroll && this.parent.height !== "auto" && (!this.parent.frozenRows || !isAddNewRow) && !this.parent.enableVirtualization && !this.parent.enableInfiniteScrolling && !(div.classList.contains("e-freezeerror") && div.classList.contains("e-fixederror"))) {
          var scrollWidth2 = gcontent.scrollWidth > gcontent.offsetWidth ? getScrollBarWidth() : 0;
          var gHeight = this.parent.height.toString().indexOf("%") === -1 ? parseInt(this.parent.height, 10) : gcontent.offsetHeight;
          div.style.bottom = gHeight - gcontent.querySelector("table").offsetHeight - scrollWidth2 + inputClient.height + 9 + "px";
        } else {
          div.style.bottom = inputClient.height + 9 + "px";
        }
        if (rows.length < viewPortRowCount && this.parent.editSettings.newRowPosition === "Bottom" && this.editModule.args && this.editModule.args.requestType === "add") {
          var rowsCount = this.parent.frozenRows ? (isAddNewRow ? this.parent.frozenRows + 1 : this.parent.frozenRows) + (rows.length - 1) : rows.length - 1;
          var rowsHeight = rowsCount * this.parent.getRowHeight();
          var position = this.parent.getContent().clientHeight - rowsHeight;
          div.style.bottom = position + 9 + "px";
        }
        div.style.top = null;
      }
    };
    Edit2.prototype.checkColumnIsGrouped = function(col) {
      return !col.visible && !(this.parent.groupSettings.columns.indexOf(col.field) > -1);
    };
    Edit2.AddEditors = function(editors) {
      Edit2.editCellType = extend(Edit2.editCellType, editors);
    };
    Edit2.editCellType = {
      "dropdownedit": DropDownEditCell,
      "numericedit": NumericEditCell,
      "datepickeredit": DatePickerEditCell,
      "datetimepickeredit": DatePickerEditCell,
      "booleanedit": BooleanEditCell,
      "defaultedit": DefaultEditCell,
      "templateedit": TemplateEditCell
    };
    return Edit2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/column-chooser.js
var ColumnChooser = (
  /** @class */
  function() {
    function ColumnChooser2(parent, serviceLocator) {
      this.filterColumns = [];
      this.showColumn = [];
      this.hideColumn = [];
      this.changedColumns = [];
      this.unchangedColumns = [];
      this.infiniteLoadedElement = [];
      this.isDlgOpen = false;
      this.isColumnChooserOpen = false;
      this.initialOpenDlg = true;
      this.stateChangeColumns = [];
      this.changedStateColumns = [];
      this.isInitialOpen = false;
      this.isCustomizeOpenCC = false;
      this.searchOperator = "startswith";
      this.itemsCount = 50;
      this.infiniteSkipCount = 0;
      this.infiniteColumns = [];
      this.infiniteInitialLoad = false;
      this.prevInfiniteScrollDirection = "";
      this.prevShowedCols = [];
      this.hideDialogFunction = this.hideDialog.bind(this);
      this.infiniteRenderMode = false;
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      this.infiniteRenderMode = this.parent.enableColumnVirtualization ? true : false;
      this.addEventListener();
      this.cBoxTrue = createCheckBox(this.parent.createElement, false, {
        checked: true,
        label: " "
      });
      this.cBoxFalse = createCheckBox(this.parent.createElement, false, {
        checked: false,
        label: " "
      });
      this.cBoxTrue.insertBefore(this.parent.createElement("input", {
        className: "e-chk-hidden e-cc e-cc-chbox",
        attrs: {
          type: "checkbox"
        }
      }), this.cBoxTrue.firstChild);
      this.cBoxFalse.insertBefore(this.parent.createElement("input", {
        className: "e-chk-hidden e-cc e-cc-chbox",
        attrs: {
          "type": "checkbox"
        }
      }), this.cBoxFalse.firstChild);
      this.cBoxFalse.querySelector(".e-frame").classList.add("e-uncheck");
      if (this.parent.enableRtl) {
        addClass([this.cBoxTrue, this.cBoxFalse], ["e-rtl"]);
      }
      if (this.parent.cssClass) {
        if (this.parent.cssClass.indexOf(" ") !== -1) {
          addClass([this.cBoxTrue, this.cBoxFalse], this.parent.cssClass.split(" "));
        } else {
          addClass([this.cBoxTrue, this.cBoxFalse], [this.parent.cssClass]);
        }
      }
      if (this.parent.enableAdaptiveUI) {
        this.setFullScreenDialog();
      }
    }
    ColumnChooser2.prototype.destroy = function() {
      var _this = this;
      var gridElement = this.parent.element;
      if (!gridElement.querySelector("." + gridContent) && !gridElement.querySelector("." + gridHeader) || !gridElement) {
        return;
      }
      this.removeEventListener();
      this.unWireEvents();
      this.infiniteLoadedElement = null;
      this.infiniteDiv = null;
      if (!isNullOrUndefined(this.dlgObj) && this.dlgObj.element && !this.dlgObj.isDestroyed) {
        if (this.parent.isReact && this.parent.columnChooserSettings.template) {
          if (!Global.timer) {
            Global.timer = setTimeout(function() {
              if (!isNullOrUndefined(_this.dlgObj) && _this.dlgObj.element && !_this.dlgObj.isDestroyed) {
                _this.dlgObj.destroy();
              }
            }, 0);
          } else {
            clearTimeout(Global.timer);
            Global.timer = null;
          }
        } else {
          this.dlgObj.destroy();
        }
        var gridPopup = document.getElementById(this.parent.element.id + "_e-popup");
        if (!isNullOrUndefined(gridPopup)) {
          remove(gridPopup);
          gridPopup = null;
        }
      }
    };
    ColumnChooser2.prototype.setFullScreenDialog = function() {
      if (this.serviceLocator) {
        this.serviceLocator.registerAdaptiveService(this, this.parent.enableAdaptiveUI, ResponsiveDialogAction.isColumnChooser);
      }
      if (this.parent.enableAdaptiveUI) {
        this.parent.on(renderResponsiveColumnChooserDiv, this.renderResponsiveColumnChooserDiv, this);
        this.parent.on(renderResponsiveChangeAction, this.renderResponsiveChangeAction, this);
      }
    };
    ColumnChooser2.prototype.rtlUpdate = function() {
      if (!isNullOrUndefined(this.innerDiv)) {
        if (this.parent.enableRtl) {
          addClass([].slice.call(this.innerDiv.getElementsByClassName("e-checkbox-wrapper")), ["e-rtl"]);
        } else {
          removeClass([].slice.call(this.innerDiv.getElementsByClassName("e-checkbox-wrapper")), ["e-rtl"]);
        }
      }
    };
    ColumnChooser2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      EventHandler.add(document, "click", this.clickHandler, this);
      this.parent.on(uiUpdate, this.enableAfterRenderEle, this);
      this.parent.on(initialEnd, this.render, this);
      this.parent.addEventListener(dataBound, this.hideDialogFunction);
      this.parent.on(destroy, this.destroy, this);
      this.parent.on(rtlUpdated, this.rtlUpdate, this);
      this.parent.on(resetColumns, this.onResetColumns, this);
      this.parent.on(setFullScreenDialog, this.setFullScreenDialog, this);
      if (this.parent.enableAdaptiveUI) {
        this.parent.on(renderResponsiveChangeAction, this.renderResponsiveChangeAction, this);
      }
      if (this.infiniteRenderMode || this.parent.enableAdaptiveUI) {
        this.parent.on(renderResponsiveColumnChooserDiv, this.renderResponsiveColumnChooserDiv, this);
      }
    };
    ColumnChooser2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      EventHandler.remove(document, "click", this.clickHandler);
      this.parent.off(initialEnd, this.render);
      this.parent.off(destroy, this.destroy);
      this.parent.off(uiUpdate, this.enableAfterRenderEle);
      this.parent.off(rtlUpdated, this.rtlUpdate);
      this.parent.off(resetColumns, this.onResetColumns);
      this.parent.removeEventListener(dataBound, this.hideDialogFunction);
      this.parent.off(setFullScreenDialog, this.setFullScreenDialog);
      if (this.infiniteDiv) {
        EventHandler.remove(this.infiniteDiv, "scroll", this.infiniteScrollHandler);
        EventHandler.remove(this.infiniteDiv, "mouseup", this.infiniteScrollMouseKeyUpHandler);
        EventHandler.remove(this.infiniteDiv, "mousedown", this.infiniteScrollMouseKeyDownHandler);
      }
      if (this.parent.enableAdaptiveUI) {
        this.parent.off(setFullScreenDialog, this.setFullScreenDialog);
        this.parent.off(renderResponsiveChangeAction, this.renderResponsiveChangeAction);
      }
      if (this.infiniteRenderMode || this.parent.enableAdaptiveUI) {
        this.parent.off(renderResponsiveColumnChooserDiv, this.renderResponsiveColumnChooserDiv);
      }
    };
    ColumnChooser2.prototype.render = function() {
      this.l10n = this.serviceLocator.getService("localization");
      if (!this.parent.enableAdaptiveUI) {
        this.renderDlgContent();
      }
      this.getShowHideService = this.serviceLocator.getService("showHideService");
    };
    ColumnChooser2.prototype.clickHandler = function(e) {
      var targetElement = e.target;
      if (!this.isCustomizeOpenCC) {
        if (!isNullOrUndefined(closest(targetElement, ".e-cc-toolbar")) || !isNullOrUndefined(closest(targetElement, ".e-cc"))) {
          if (targetElement.classList.contains("e-columnchooser-btn") || targetElement.classList.contains("e-cc-toolbar")) {
            if (this.initialOpenDlg && this.dlgObj.visible || !this.isDlgOpen) {
              this.isDlgOpen = true;
              return;
            }
          } else if (targetElement.classList.contains("e-cc-cancel")) {
            targetElement.parentElement.querySelector(".e-ccsearch").value = "";
            this.columnChooserSearch("", false);
            this.removeCancelIcon();
            this.refreshCheckboxButton();
          }
        } else {
          if (!isNullOrUndefined(this.dlgObj) && this.dlgObj.visible && !targetElement.classList.contains("e-toolbar-items")) {
            this.dlgObj.hide();
            this.clearActions();
            this.refreshCheckboxState();
            this.isDlgOpen = false;
          }
        }
        if (this.parent.detailTemplate || this.parent.childGrid) {
          this.targetdlg = e.target;
        }
      }
      if (this.isCustomizeOpenCC && e.target.classList.contains("e-cc-cancel")) {
        this.refreshCheckboxState();
      }
      if (!this.parent.enableAdaptiveUI) {
        this.rtlUpdate();
      } else {
        if (this.parent.enableRtl) {
          addClass([this.cBoxTrue, this.cBoxFalse], ["e-rtl"]);
        }
      }
    };
    ColumnChooser2.prototype.hideDialog = function() {
      if (!isNullOrUndefined(this.dlgObj) && this.dlgObj.visible) {
        if (this.parent.enableAdaptiveUI) {
          this.responsiveDialogRenderer.hideResponsiveColumnChooser();
        } else {
          this.dlgObj.hide();
          this.isDlgOpen = false;
        }
      }
    };
    ColumnChooser2.prototype.renderColumnChooser = function(x, y, target) {
      if (!this.dlgObj.visible && (this.parent.detailTemplate || this.parent.childGrid)) {
        this.hideOpenedDialog();
      }
      if (!this.dlgObj.visible) {
        var args = this.beforeOpenColumnChooserEvent();
        if (args.cancel) {
          return;
        }
        args.columns = null;
        if (target) {
          this.targetdlg = target;
        }
        if (this.infiniteRenderMode) {
          this.dlgObj.show();
        }
        this.refreshCheckboxState();
        this.dlgObj.dataBind();
        this.dlgObj.element.style.maxHeight = "430px";
        var elementVisible = this.dlgObj.element.style.display;
        if (!this.parent.columnChooserSettings.enableSearching) {
          var contentElement = this.dlgObj.element.querySelector(".e-dlg-content");
          contentElement.style.margin = "0px";
        }
        this.dlgObj.element.style.display = "block";
        var isSticky = this.parent.getHeaderContent().classList.contains("e-sticky");
        var toolbarItem = closest(target, ".e-toolbar-item");
        var newpos = void 0;
        if (document.getElementById(this.parent.element.id + "_e-popup") && document.getElementById(this.parent.element.id + "_e-popup").querySelector(".e-ccdlg")) {
          this.parent.element.appendChild(this.dlgObj.element);
        }
        if (isSticky) {
          newpos = toolbarItem.getBoundingClientRect();
          this.dlgObj.element.classList.add("e-sticky");
        } else {
          this.dlgObj.element.classList.remove("e-sticky");
          newpos = calculateRelativeBasedPosition(toolbarItem, this.dlgObj.element);
        }
        this.dlgObj.element.style.display = elementVisible;
        this.dlgObj.element.style.top = newpos.top + closest(target, ".e-cc-toolbar").getBoundingClientRect().height + "px";
        var dlgWidth = 250;
        if (!isNullOrUndefined(closest(target, ".e-bigger"))) {
          this.dlgObj.width = 258;
        }
        if (Browser.isDevice) {
          this.dlgObj.position = {
            X: "center",
            Y: "center"
          };
          this.dlgObj.refreshPosition();
          this.dlgObj.open = this.mOpenDlg.bind(this);
        } else {
          if (this.parent.enableRtl) {
            this.dlgObj.element.style.left = target.offsetLeft + "px";
          } else {
            this.dlgObj.element.style.left = newpos.left - dlgWidth + closest(target, ".e-cc-toolbar").clientWidth + 2 + "px";
          }
        }
        this.removeCancelIcon();
        if (!this.infiniteRenderMode) {
          this.dlgObj.show();
        }
        if (this.parent.getContent().firstElementChild.offsetHeight < this.dlgObj.element.offsetHeight && !this.parent.element.classList.contains("e-drillthrough-grid")) {
          resetDialogAppend(this.parent, this.dlgObj);
          if (this.dlgObj.element.querySelector(".e-ccsearch")) {
            this.dlgObj.element.querySelector(".e-ccsearch").select();
          }
        }
        this.parent.notify(columnChooserOpened, {
          dialog: this.dlgObj
        });
      } else {
        this.hideDialog();
        this.addcancelIcon();
        this.clearActions();
        this.refreshCheckboxState();
      }
      this.rtlUpdate();
    };
    ColumnChooser2.prototype.openColumnChooser = function(X, Y) {
      this.isCustomizeOpenCC = true;
      if (this.parent.enableAdaptiveUI) {
        if (!this.isColumnChooserOpen) {
          this.parent.showResponsiveCustomColumnChooser();
          return;
        }
        this.isColumnChooserOpen = false;
        this.renderDlgContent();
      }
      if (this.dlgObj.visible) {
        this.hideDialog();
        return;
      }
      var args = this.beforeOpenColumnChooserEvent();
      if (args.cancel) {
        return;
      }
      args.columns = null;
      if (this.infiniteRenderMode) {
        this.dlgObj.show();
      }
      if (!this.isInitialOpen) {
        this.dlgObj.content = this.renderChooserList();
        if (!this.parent.columnChooserSettings.template) {
          this.updateIntermediateBtn();
        }
      } else {
        this.refreshCheckboxState();
      }
      this.dlgObj.dataBind();
      if (this.infiniteRenderMode) {
        this.refreshCheckboxState();
      }
      this.dlgObj.position = {
        X: "center",
        Y: "center"
      };
      if (isNullOrUndefined(X)) {
        if (this.parent.enableAdaptiveUI) {
          this.dlgObj.position = {
            X: "",
            Y: ""
          };
        }
        this.dlgObj.refreshPosition();
      } else {
        this.dlgObj.element.style.top = "";
        this.dlgObj.element.style.left = "";
        this.dlgObj.element.style.top = Y + "px";
        this.dlgObj.element.style.left = X + "px";
      }
      if (!this.parent.columnChooserSettings.enableSearching) {
        var contentElement = this.dlgObj.element.querySelector(".e-dlg-content");
        contentElement.style.margin = "0px";
      }
      this.dlgObj.beforeOpen = this.customDialogOpen.bind(this);
      if (!this.infiniteRenderMode) {
        this.dlgObj.show();
      }
      if (this.parent.getContent().firstElementChild.offsetHeight < this.dlgObj.element.offsetHeight && !this.parent.element.classList.contains("e-drillthrough-grid")) {
        resetDialogAppend(this.parent, this.dlgObj);
      }
      this.isInitialOpen = true;
      this.dlgObj.beforeClose = this.customDialogClose.bind(this);
    };
    ColumnChooser2.prototype.enableAfterRenderEle = function(e) {
      if (e.module === this.getModuleName() && e.enable) {
        this.render();
      }
    };
    ColumnChooser2.prototype.keyUpHandler = function(e) {
      if (e.key === "Escape") {
        this.resetColumnState();
      }
      if (e && e.target && !isNullOrUndefined(closest(e.target, ".e-grid-popup"))) {
        this.parent.trigger("keyPressed", e);
      }
      this.setFocus(parentsUntil(e.target, "e-cclist"));
    };
    ColumnChooser2.prototype.setFocus = function(elem) {
      var prevElem = this.dlgDiv.querySelector(".e-colfocus");
      if (prevElem) {
        prevElem.classList.remove("e-colfocus");
      }
      if (elem) {
        elem.classList.add("e-colfocus");
      }
    };
    ColumnChooser2.prototype.customDialogOpen = function() {
      var searchElement = this.dlgObj.content.querySelector("input.e-ccsearch");
      EventHandler.add(searchElement, "keyup", this.columnChooserManualSearch, this);
    };
    ColumnChooser2.prototype.customDialogClose = function() {
      var searchElement = this.dlgObj.content.querySelector("input.e-ccsearch");
      EventHandler.remove(searchElement, "keyup", this.columnChooserManualSearch);
    };
    ColumnChooser2.prototype.getColumns = function() {
      var columns = (this.infiniteRenderMode ? this.infiniteColumns : this.parent.getColumns()).filter(function(column) {
        return column.type !== "checkbox" && column.showInColumnChooser === true || column.type === "checkbox" && column.field !== void 0;
      });
      return columns;
    };
    ColumnChooser2.prototype.renderDlgContent = function() {
      var isAdaptive = this.parent.enableAdaptiveUI;
      this.dlgDiv = this.parent.createElement("div", {
        className: "e-ccdlg e-cc",
        id: this.parent.element.id + "_ccdlg"
      });
      if (!isAdaptive) {
        this.parent.element.appendChild(this.dlgDiv);
      }
      this.dlgObj = new Dialog({
        header: this.parent.enableAdaptiveUI ? null : this.renderHeader(),
        showCloseIcon: false,
        closeOnEscape: false,
        locale: this.parent.locale,
        visible: false,
        enableRtl: this.parent.enableRtl,
        target: document.getElementById(this.parent.element.id),
        content: this.renderChooserList(),
        width: 250,
        cssClass: this.parent.cssClass ? "e-cc " + this.parent.cssClass : "e-cc",
        animationSettings: {
          effect: "None"
        },
        footerTemplate: this.parent.enableAdaptiveUI ? null : this.renderFooter()
      });
      if (!isAdaptive && (this.infiniteRenderMode || !this.parent.columnChooserSettings.footerTemplate)) {
        this.dlgObj.buttons = [{
          click: this.confirmDlgBtnClick.bind(this),
          buttonModel: {
            content: this.l10n.getConstant("OKButton"),
            isPrimary: true,
            cssClass: this.parent.cssClass ? "e-cc e-cc_okbtn " + this.parent.cssClass : "e-cc e-cc_okbtn"
          }
        }, {
          click: this.clearBtnClick.bind(this),
          buttonModel: {
            cssClass: this.parent.cssClass ? "e-flat e-cc e-cc-cnbtn " + this.parent.cssClass : "e-flat e-cc e-cc-cnbtn",
            content: this.l10n.getConstant("CancelButton")
          }
        }];
      }
      var isStringTemplate = "isStringTemplate";
      this.dlgObj["" + isStringTemplate] = true;
      this.dlgObj.appendTo(this.dlgDiv);
      if (isAdaptive) {
        var responsiveCnt = document.querySelector(".e-responsive-dialog > .e-dlg-content > .e-mainfilterdiv");
        if (responsiveCnt) {
          responsiveCnt.appendChild(this.dlgDiv);
        }
        this.dlgObj.open = this.mOpenDlg.bind(this);
        this.dlgObj.target = document.querySelector(".e-rescolumnchooser > .e-dlg-content > .e-mainfilterdiv");
      }
      this.wireEvents();
    };
    ColumnChooser2.prototype.renderHeader = function() {
      var gridInstance = this.parent;
      if (gridInstance.columnChooserSettings.headerTemplate && !this.infiniteRenderMode) {
        var templateDiv = this.parent.createElement("div", {
          className: "e-columnChooserHeaderTemplate"
        });
        var templateID = this.parent.element.id + "columnChooserHeaderTemplate";
        if (this.parent.isReact) {
          this.parent.getColumnChooserHeaderTemplate()(null, this.parent, "columnChooserHeaderTemplate", templateID, null, null, templateDiv);
          this.parent.renderTemplates();
        } else {
          appendChildren(templateDiv, this.parent.getColumnChooserHeaderTemplate()(null, this.parent, "columnChooserHeaderTemplate", templateID));
        }
        return templateDiv;
      }
      return this.l10n.getConstant("ChooseColumns");
    };
    ColumnChooser2.prototype.renderFooter = function() {
      var gridInstance = this.parent;
      if (gridInstance.columnChooserSettings.footerTemplate && !this.infiniteRenderMode) {
        var templateDiv = this.parent.createElement("div", {
          className: "e-columnChooserFooterTemplate"
        });
        var templateID = this.parent.element.id + "columnChooserFooterTemplate";
        if (this.parent.isReact) {
          this.parent.getColumnChooserFooterTemplate()(null, this.parent, "columnChooserFooterTemplate", templateID, null, null, templateDiv);
          this.parent.renderTemplates();
        } else {
          appendChildren(templateDiv, this.parent.getColumnChooserFooterTemplate()(null, this.parent, "columnChooserFooterTemplate", templateID));
        }
        return templateDiv;
      }
      return null;
    };
    ColumnChooser2.prototype.renderChooserList = function() {
      this.mainDiv = this.parent.createElement("div", {
        className: "e-main-div e-cc"
      });
      var searchDiv = this.parent.createElement("div", {
        className: "e-cc-searchdiv e-cc e-input-group"
      });
      var ccsearchele = this.parent.createElement("input", {
        className: "e-ccsearch e-cc e-input",
        attrs: {
          placeholder: this.l10n.getConstant("Search"),
          cssClass: this.parent.cssClass
        }
      });
      var ccsearchicon = this.parent.createElement("span", {
        className: "e-ccsearch-icon e-icons e-cc e-input-group-icon",
        attrs: {
          title: this.l10n.getConstant("Search")
        }
      });
      var conDiv = this.parent.createElement("div", {
        className: "e-cc-contentdiv"
      });
      this.innerDiv = this.parent.createElement("div", {
        className: "e-innerdiv e-cc"
      });
      searchDiv.appendChild(ccsearchele);
      searchDiv.appendChild(ccsearchicon);
      this.searchBoxObj = new SearchBox(ccsearchele, this.serviceLocator);
      var columns = this.getColumns();
      var showColumns = [];
      var hideColumns = [];
      columns.forEach(function(column) {
        if (column.visible) {
          showColumns.push(column.headerText);
        } else {
          hideColumns.push(column.headerText);
        }
      });
      if (this.infiniteRenderMode && !this.isInitialOpen) {
        columns = this.parent.columns;
        for (var i = 0; i < columns.length; i++) {
          if (columns[parseInt(i.toString(), 10)].showInColumnChooser) {
            this.infiniteColumns.push(columns[parseInt(i.toString(), 10)]);
          }
        }
      }
      if (this.parent.columnChooserSettings.template && !this.infiniteRenderMode) {
        var templateDiv = this.parent.createElement("div", {
          className: "e-columnChooserTemplate"
        });
        templateDiv.style.cssText = this.parent.enableAdaptiveUI ? "height: 90%; min-height: 160px; overflow-y: auto;" : "height: 196px; overflow-y: auto;";
        var TemplateID = this.parent.element.id + "columnChooserTemplate";
        var argsData = {
          columns,
          hideColumns,
          showColumns
        };
        if (this.parent.isReact) {
          this.parent.getColumnChooserTemplate()(argsData, this.parent, "columnChooserTemplate", TemplateID, null, null, templateDiv);
          this.parent.renderTemplates();
        } else {
          appendChildren(templateDiv, this.parent.getColumnChooserTemplate()(argsData, this.parent, "columnChooserTemplate", TemplateID, null, null, null, this.parent.root));
        }
        if (this.parent.columnChooserSettings.renderCustomColumnChooser) {
          if (typeof this.parent.columnChooserSettings.renderCustomColumnChooser === "function") {
            this.parent.columnChooserSettings.renderCustomColumnChooser(templateDiv, columns);
          } else if (typeof this.parent.columnChooserSettings.renderCustomColumnChooser === "string") {
            this.parent.columnChooserSettings.renderCustomColumnChooser = getObject(this.parent.columnChooserSettings.renderCustomColumnChooser, window);
            this.parent.columnChooserSettings.renderCustomColumnChooser(templateDiv, columns);
          }
        }
        this.mainDiv.appendChild(searchDiv);
        this.mainDiv.appendChild(templateDiv);
      } else {
        var innerDivContent = this.refreshCheckboxList(columns);
        this.innerDiv.appendChild(innerDivContent);
        conDiv.appendChild(this.innerDiv);
        if (this.parent.enableAdaptiveUI) {
          var searchBoxDiv = this.parent.createElement("div", {
            className: "e-cc-searchBox"
          });
          searchBoxDiv.appendChild(searchDiv);
          this.mainDiv.appendChild(searchBoxDiv);
        } else {
          this.mainDiv.appendChild(searchDiv);
        }
        this.mainDiv.appendChild(conDiv);
      }
      if (!this.parent.columnChooserSettings.enableSearching) {
        searchDiv.style.display = "none";
      }
      return this.mainDiv;
    };
    ColumnChooser2.prototype.confirmDlgBtnClick = function(args) {
      var onActionBeginArgs = {
        requestType: "columnVisibilityUpdate",
        columns: this.getColumns(),
        cancel: false
      };
      this.parent.trigger(actionBegin, onActionBeginArgs);
      if (onActionBeginArgs.cancel) {
        return;
      }
      this.stateChangeColumns = [];
      this.changedStateColumns = [];
      var columns = this.infiniteRenderMode ? this.infiniteColumns : this.parent.getColumns();
      this.changedColumns = this.changedColumns.length > 0 ? this.changedColumns : this.unchangedColumns;
      this.changedColumnState(this.changedColumns);
      var uncheckedLength = this.infiniteRenderMode ? this.infiniteLoadedElement.filter(function(arr) {
        return arr.querySelector(".e-uncheck");
      }).length : this.ulElement && this.ulElement.querySelector(".e-uncheck") && this.ulElement.querySelectorAll(".e-uncheck:not(.e-selectall)").length;
      if (!isNullOrUndefined(args)) {
        if (uncheckedLength < columns.length) {
          this.changeColumnVisibility({
            visibleColumns: this.showColumn,
            hiddenColumns: this.hideColumn
          }, "uid");
          if (this.parent.getCurrentViewRecords().length === 0) {
            var emptyRowCell = this.parent.element.querySelector(".e-emptyrow").querySelector("td");
            emptyRowCell.setAttribute("colSpan", this.parent.getVisibleColumns().length.toString());
          }
        }
        if (this.parent.enableAdaptiveUI && this.parent.scrollModule) {
          this.parent.scrollModule.refresh();
        }
        if (this.parent.editSettings.showAddNewRow) {
          this.parent.notify(showAddNewRowFocus, {});
        }
      }
      var onActionCompleteArgs = {
        requestType: "columnVisibilityUpdate",
        columns: this.getColumns(),
        cancel: false
      };
      this.parent.trigger(actionComplete, onActionCompleteArgs);
    };
    ColumnChooser2.prototype.changeColumnVisibility = function(columns, columnKey) {
      columnKey = columnKey ? columnKey : "headerText";
      if (columnKey !== "uid") {
        if (columns.visibleColumns || columns.hiddenColumns) {
          this.stateChangeColumns = [];
          this.changedStateColumns = [];
          var columnChooserColumns = this.getColumns();
          columns.hiddenColumns = columnChooserColumns.filter(function(column) {
            return columns.hiddenColumns.indexOf(column[columnKey]) !== -1;
          }).map(function(column) {
            return column.uid;
          });
          columns.visibleColumns = columnChooserColumns.filter(function(column) {
            return columns.visibleColumns.indexOf(column[columnKey]) !== -1;
          }).map(function(column) {
            return column.uid;
          });
        }
      }
      if (columns.hiddenColumns.length) {
        this.columnStateChange(columns.hiddenColumns, false);
      }
      if (columns.visibleColumns.length) {
        this.columnStateChange(columns.visibleColumns, true);
      }
      this.getShowHideService.setVisible(this.stateChangeColumns, this.changedStateColumns);
      this.clearActions();
      this.parent.notify(tooltipDestroy, {
        module: "edit"
      });
    };
    ColumnChooser2.prototype.onResetColumns = function(e) {
      if (e.requestType === "columnstate") {
        this.resetColumnState();
        return;
      }
    };
    ColumnChooser2.prototype.renderResponsiveColumnChooserDiv = function(args) {
      if (args.action === "open") {
        this.isColumnChooserOpen = true;
        this.openColumnChooser();
      } else if (args.action === "clear") {
        this.clearBtnClick();
      } else if (args.action === "confirm") {
        this.confirmDlgBtnClick(true);
      }
    };
    ColumnChooser2.prototype.resetColumnState = function() {
      this.showColumn = [];
      this.hideColumn = [];
      this.changedColumns = [];
      this.filterColumns = [];
      this.searchValue = "";
      if (this.infiniteRenderMode) {
        var focusListElement = this.dlgDiv.querySelector(".e-cclist.e-cc-selectall.e-colfocus");
        if (focusListElement) {
          focusListElement.classList.remove("e-colfocus");
        }
      }
      this.hideDialog();
    };
    ColumnChooser2.prototype.changedColumnState = function(changedColumns) {
      for (var index = 0; index < changedColumns.length; index++) {
        var colUid = changedColumns[parseInt(index.toString(), 10)];
        var currentColumn = this.parent.getColumnByUid(colUid, this.infiniteRenderMode);
        this.changedStateColumns.push(currentColumn);
      }
    };
    ColumnChooser2.prototype.columnStateChange = function(stateColumns, state) {
      for (var index = 0; index < stateColumns.length; index++) {
        var colUid = stateColumns[parseInt(index.toString(), 10)];
        var currentColumn = this.parent.getColumnByUid(colUid, this.infiniteRenderMode);
        if (currentColumn) {
          if (currentColumn.type !== "checkbox") {
            currentColumn.visible = state;
          }
          this.stateChangeColumns.push(currentColumn);
        }
      }
    };
    ColumnChooser2.prototype.clearActions = function() {
      this.resetColumnState();
      this.addcancelIcon();
    };
    ColumnChooser2.prototype.clearBtnClick = function() {
      var onActionBeginArgs = {
        requestType: "columnChooserClose",
        cancel: false
      };
      this.parent.trigger(actionBegin, onActionBeginArgs);
      if (onActionBeginArgs.cancel) {
        return;
      }
      this.clearActions();
      this.parent.notify(columnChooserCancelBtnClick, {
        dialog: this.dlgObj
      });
      var onActionCompleteArgs = {
        requestType: "columnChooserClose",
        cancel: false
      };
      this.parent.trigger(actionComplete, onActionCompleteArgs);
    };
    ColumnChooser2.prototype.checkstatecolumn = function(isChecked, coluid, selectAll2) {
      if (selectAll2 === void 0) {
        selectAll2 = false;
      }
      var currentColumn = this.parent.getColumnByUid(coluid, this.infiniteRenderMode);
      if (isChecked) {
        if (this.hideColumn.indexOf(coluid) !== -1) {
          this.hideColumn.splice(this.hideColumn.indexOf(coluid), 1);
        }
        if (this.showColumn.indexOf(coluid) === -1 && !(currentColumn && currentColumn.visible)) {
          this.showColumn.push(coluid);
        }
      } else {
        if (this.showColumn.indexOf(coluid) !== -1) {
          this.showColumn.splice(this.showColumn.indexOf(coluid), 1);
        }
        if (this.hideColumn.indexOf(coluid) === -1 && currentColumn && currentColumn.visible) {
          this.hideColumn.push(coluid);
        }
      }
      if (selectAll2) {
        if (!isChecked) {
          this.changedColumns.push(coluid);
        } else {
          this.unchangedColumns.push(coluid);
        }
      } else if (this.changedColumns.indexOf(coluid) !== -1) {
        this.changedColumns.splice(this.changedColumns.indexOf(coluid), 1);
      } else {
        this.changedColumns.push(coluid);
      }
    };
    ColumnChooser2.prototype.columnChooserSearch = function(searchVal, check) {
      if (check) {
        var onActionBeginArgs = {
          requestType: "columnChooserSearch",
          columns: this.getColumns(),
          cancel: false
        };
        this.parent.trigger(actionBegin, onActionBeginArgs);
        if (onActionBeginArgs.cancel) {
          return;
        }
      }
      var clearSearch = false;
      var okButton;
      var buttonEle = this.dlgDiv.querySelector(".e-footer-content");
      var selectedCheckbox = this.ulElement && this.ulElement.querySelector(".e-check") && this.ulElement.querySelectorAll(".e-check:not(.e-selectall)").length;
      if (this.infiniteRenderMode) {
        selectedCheckbox = this.infiniteLoadedElement.filter(function(arr) {
          return arr.querySelector(".e-check");
        }).length;
      }
      this.isInitialOpen = true;
      if (buttonEle && buttonEle.querySelector(".e-btn")) {
        okButton = buttonEle.querySelector(".e-btn").ej2_instances[0];
      }
      if (searchVal === "") {
        this.removeCancelIcon();
        this.filterColumns = this.getColumns();
        clearSearch = true;
      } else {
        this.filterColumns = new DataManager(this.getColumns()).executeLocal(new Query().where("headerText", this.searchOperator, searchVal, true, this.parent.columnChooserSettings.ignoreAccent));
      }
      if (this.infiniteRenderMode) {
        this.updateIfiniteSelectAll();
      }
      if (this.parent.columnChooserSettings.template && !this.infiniteRenderMode) {
        var TemplateElement = void 0;
        var isReactCompiler = this.parent.isReact;
        if (isReactCompiler) {
          clearReactVueTemplates(this.parent, ["columnChooserTemplate"]);
          TemplateElement = this.mainDiv.querySelector(".e-columnChooserTemplate");
        } else {
          this.mainDiv.querySelector(".e-columnChooserTemplate").remove();
          TemplateElement = this.parent.createElement("div", {
            className: "e-columnChooserTemplate"
          });
          TemplateElement.style.cssText = this.parent.enableAdaptiveUI ? "height: 90%; min-height: 160px; overflow-y: auto;" : "height: 196px; overflow-y: auto;";
        }
        var TemplateID = this.parent.element.id + "columnChooserTemplate";
        var chooserColumns = this.filterColumns;
        var searchedValue = searchVal;
        var showColumns_1 = [];
        var hideColumns_1 = [];
        chooserColumns.forEach(function(column) {
          if (column.visible) {
            showColumns_1.push(column.headerText);
          } else {
            hideColumns_1.push(column.headerText);
          }
        });
        var argsData = {
          columns: chooserColumns,
          hideColumns: hideColumns_1,
          showColumns: showColumns_1,
          searchValue: searchedValue
        };
        if (isReactCompiler) {
          this.parent.getColumnChooserTemplate()(argsData, this.parent, "columnChooserTemplate", TemplateID, null, null, TemplateElement);
          this.parent.renderTemplates();
        } else {
          appendChildren(TemplateElement, this.parent.getColumnChooserTemplate()(argsData, this.parent, "columnChooserTemplate", TemplateID, null, null, null, this.parent.root));
        }
        if (this.parent.columnChooserSettings.renderCustomColumnChooser) {
          if (typeof this.parent.columnChooserSettings.renderCustomColumnChooser === "function") {
            this.parent.columnChooserSettings.renderCustomColumnChooser(TemplateElement, this.filterColumns);
          } else if (typeof this.parent.columnChooserSettings.renderCustomColumnChooser === "string") {
            this.parent.columnChooserSettings.renderCustomColumnChooser = getObject(this.parent.columnChooserSettings.renderCustomColumnChooser, window);
            this.parent.columnChooserSettings.renderCustomColumnChooser(TemplateElement, this.filterColumns);
          }
        }
        this.mainDiv.appendChild(TemplateElement);
      } else if (this.filterColumns.length) {
        this.innerDiv.innerHTML = " ";
        this.innerDiv.classList.remove("e-ccnmdiv");
        this.infiniteInitialLoad = true;
        this.infiniteLoadedElement = [];
        this.innerDiv.appendChild(this.refreshCheckboxList(this.filterColumns));
        if (this.infiniteRenderMode) {
          this.mainDiv.querySelector(".e-ccheck .e-selectall").parentElement.classList.remove("e-checkbox-disabled");
          this.updateIntermediateBtn();
        }
        if (!clearSearch) {
          this.addcancelIcon();
          this.refreshCheckboxButton();
        } else {
          if (okButton && selectedCheckbox) {
            okButton.disabled = false;
          }
          if (selectedCheckbox && this.parent.enableAdaptiveUI && this.responsiveDialogRenderer) {
            this.parent.notify(refreshCustomFilterOkBtn, {
              disabled: false
            });
          }
        }
      } else {
        var nMatchele = this.parent.createElement("span", {
          className: "e-cc e-nmatch"
        });
        nMatchele.innerHTML = this.l10n.getConstant("Matchs");
        this.innerDiv.innerHTML = " ";
        if (this.infiniteRenderMode) {
          removeClass([this.mainDiv.querySelector(".e-frame.e-selectall")], ["e-check", "e-stop", "e-uncheck"]);
          this.mainDiv.querySelector(".e-ccheck .e-selectall").parentElement.classList.add("e-checkbox-disabled");
        }
        this.innerDiv.appendChild(nMatchele);
        this.innerDiv.classList.add("e-ccnmdiv");
        if (okButton) {
          okButton.disabled = true;
        }
        if (this.parent.enableAdaptiveUI && this.responsiveDialogRenderer) {
          this.parent.notify(refreshCustomFilterOkBtn, {
            disabled: true
          });
        }
      }
      this.flag = true;
      this.stopTimer();
      if (check) {
        var onActionCompleteArgs = {
          requestType: "columnChooserSearch",
          columns: this.getColumns(),
          cancel: false
        };
        this.parent.trigger(actionComplete, onActionCompleteArgs);
      }
    };
    ColumnChooser2.prototype.updateIfiniteSelectAll = function() {
      this.changedColumns = [];
      this.hideColumn = [];
      this.showColumn = [];
      var unCheckItem = this.infiniteLoadedElement.filter(function(arr) {
        return arr.querySelector(".e-uncheck");
      });
      for (var i = 0; i < unCheckItem.length; i++) {
        this.checkState(unCheckItem[parseInt(i.toString(), 10)].querySelector(".e-frame"), true);
      }
    };
    ColumnChooser2.prototype.wireEvents = function() {
      EventHandler.add(this.dlgObj.element, "click", this.checkBoxClickHandler, this);
      EventHandler.add(this.searchBoxObj.searchBox, "keyup", this.columnChooserManualSearch, this);
      EventHandler.add(this.dlgObj.element, "keyup", this.keyUpHandler, this);
      this.searchBoxObj.wireEvent();
    };
    ColumnChooser2.prototype.unWireEvents = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      if (this.dlgObj && this.dlgObj.element) {
        EventHandler.remove(this.dlgObj.element, "click", this.checkBoxClickHandler);
        EventHandler.remove(this.dlgObj.element, "keyup", this.keyUpHandler);
      }
      if (this.searchBoxObj) {
        EventHandler.remove(this.searchBoxObj.searchBox, "keyup", this.columnChooserManualSearch);
        this.searchBoxObj.unWireEvent();
      }
    };
    ColumnChooser2.prototype.checkBoxClickHandler = function(e) {
      if (this.parent.columnChooserSettings.template && !this.infiniteRenderMode) {
        return;
      }
      var checkstate;
      var selectAllElement = parentsUntil(e.target, "e-checkbox-wrapper");
      var columns = this.infiniteRenderMode ? this.infiniteColumns : this.parent.getColumns();
      if (selectAllElement) {
        var selectAll2 = selectAllElement.querySelector(".e-selectall");
        if (selectAll2) {
          this.updateSelectAll(!selectAllElement.querySelector(".e-check"));
        } else {
          toogleCheckbox(selectAllElement.parentElement);
        }
        selectAllElement.querySelector(".e-chk-hidden").focus();
        if (selectAllElement.querySelector(".e-check")) {
          checkstate = true;
        } else if (selectAllElement.querySelector(".e-uncheck")) {
          checkstate = false;
        }
        if (!this.infiniteRenderMode) {
          this.updateIntermediateBtn();
        }
        var columnUid = parentsUntil(selectAllElement, "e-ccheck").getAttribute("uid");
        var column = this.searchValue && this.searchValue.length ? this.filterColumns : columns;
        if (columnUid === this.parent.element.id + "-selectAll") {
          this.changedColumns = [];
          this.unchangedColumns = [];
          for (var i = 0; i < column.length; i++) {
            if (column[parseInt(i.toString(), 10)].showInColumnChooser) {
              this.checkstatecolumn(checkstate, column[parseInt(i.toString(), 10)].uid, true);
            }
          }
        } else {
          this.checkstatecolumn(checkstate, columnUid);
        }
        var isSelectAll = this.infiniteRenderMode && selectAllElement.querySelector(".e-selectall") && selectAllElement.querySelector(".e-uncheck") ? true : false;
        if (!this.parent.columnChooserSettings.footerTemplate) {
          this.refreshCheckboxButton(isSelectAll);
        }
        this.setFocus(parentsUntil(e.target, "e-cclist"));
        if (this.infiniteRenderMode) {
          this.updateIntermediateBtn();
        }
      }
    };
    ColumnChooser2.prototype.updateIntermediateBtn = function() {
      var count2 = this.infiniteRenderMode ? this.infiniteLoadedElement.length : this.ulElement.children.length - 1;
      var className = [];
      var hideColumnsCount = 0;
      var showColumnsCount = 0;
      (this.searchValue && this.searchValue.length ? this.filterColumns : this.infiniteColumns).filter(function(column) {
        if (column.visible === false) {
          hideColumnsCount++;
        } else {
          showColumnsCount++;
        }
      });
      var selectAllElement = (this.infiniteRenderMode && this.mainDiv.querySelector(".e-cc-selectall") ? this.mainDiv.querySelector(".e-cc-selectall") : this.ulElement.children[0]).querySelector(".e-frame");
      var selected = this.infiniteRenderMode ? this.infiniteLoadedElement.filter(function(arr) {
        return arr.querySelector(".e-check");
      }).length : this.ulElement.querySelectorAll(".e-check:not(.e-selectall)").length;
      var btn;
      if (!this.parent.enableAdaptiveUI && !this.parent.columnChooserSettings.footerTemplate) {
        btn = this.dlgObj.btnObj[0];
        btn.disabled = false;
      } else if (this.parent.enableAdaptiveUI && this.responsiveDialogRenderer) {
        this.parent.notify(refreshCustomFilterOkBtn, {
          disabled: false
        });
      }
      var inputElem = selectAllElement.parentElement.querySelector("input");
      if (count2 === selected && (!this.infiniteRenderMode || this.infiniteRenderMode && hideColumnsCount === this.showColumn.length)) {
        className = ["e-check"];
        setChecked(inputElem, true);
      } else if (selected || this.infiniteRenderMode && !selected && showColumnsCount !== this.hideColumn.length) {
        className = ["e-stop"];
        inputElem.indeterminate = true;
      } else {
        className = ["e-uncheck"];
        setChecked(inputElem, false);
        if (btn && !this.parent.enableAdaptiveUI) {
          btn.disabled = true;
        } else if (this.parent.enableAdaptiveUI && this.responsiveDialogRenderer) {
          this.parent.notify(refreshCustomFilterOkBtn, {
            disabled: true
          });
        }
      }
      if (btn && !this.parent.enableAdaptiveUI) {
        btn.dataBind();
      }
      removeClass([selectAllElement], ["e-check", "e-stop", "e-uncheck"]);
      addClass([selectAllElement], className);
    };
    ColumnChooser2.prototype.updateSelectAll = function(checked) {
      var checkBoxItems = [].slice.call(this.ulElement.getElementsByClassName("e-frame"));
      if (this.infiniteRenderMode) {
        checkBoxItems = [];
        this.infiniteLoadedElement.map(function(arr) {
          return checkBoxItems.push(arr.querySelector(".e-frame"));
        });
        checkBoxItems.unshift(this.mainDiv.querySelector(".e-cc-selectall").querySelector(".e-frame"));
      }
      for (var _i = 0, checkBoxItems_1 = checkBoxItems; _i < checkBoxItems_1.length; _i++) {
        var checkBoxItem = checkBoxItems_1[_i];
        removeAddCboxClasses(checkBoxItem, checked);
        var cBoxInput = checkBoxItem.parentElement.querySelector("input");
        if (checkBoxItem.classList.contains("e-check")) {
          setChecked(cBoxInput, true);
        } else if (checkBoxItem.classList.contains("e-uncheck")) {
          setChecked(cBoxInput, false);
        }
      }
    };
    ColumnChooser2.prototype.refreshCheckboxButton = function(checkstate) {
      var visibleCols = this.parent.getVisibleColumns();
      for (var i = 0; i < visibleCols.length; i++) {
        var columnUID = visibleCols[parseInt(i.toString(), 10)].uid;
        if (this.prevShowedCols.indexOf(columnUID) === -1 && visibleCols[parseInt(i.toString(), 10)].type !== "checkbox") {
          this.prevShowedCols.push(columnUID);
        }
      }
      for (var i = 0; i < this.hideColumn.length; i++) {
        var index = this.prevShowedCols.indexOf(this.hideColumn[parseInt(i.toString(), 10)]);
        if (index !== -1) {
          this.prevShowedCols.splice(index, 1);
        }
      }
      var selected = this.showColumn.length !== 0 ? 1 : this.prevShowedCols.length;
      if (this.infiniteRenderMode) {
        selected = this.infiniteLoadedElement.filter(function(arr) {
          return arr.querySelector(".e-uncheck");
        }).length;
      }
      var btn;
      if (!this.parent.enableAdaptiveUI) {
        btn = this.dlgDiv.querySelector(".e-footer-content").querySelector(".e-btn").ej2_instances[0];
        btn.disabled = false;
      } else if (this.parent.enableAdaptiveUI && this.responsiveDialogRenderer) {
        this.parent.notify(refreshCustomFilterOkBtn, {
          disabled: false
        });
      }
      var sreachShowColumns = [];
      var searchData = [].slice.call(document.getElementsByClassName("e-cc-chbox"));
      for (var i = 0, itemsLen = searchData.length; i < itemsLen; i++) {
        var element = searchData[parseInt(i.toString(), 10)];
        if (this.infiniteRenderMode && element.classList.contains("e-selectall")) {
          continue;
        }
        var columnUID = parentsUntil(element, "e-ccheck").getAttribute("uid");
        sreachShowColumns.push(columnUID);
      }
      var hideColumns = this.showColumn.filter(function(column) {
        return sreachShowColumns.indexOf(column) !== -1;
      });
      if (this.infiniteRenderMode && (checkstate || sreachShowColumns.length === selected) || !this.infiniteRenderMode && selected === 0 && hideColumns.length === 0) {
        if (!this.parent.enableAdaptiveUI) {
          btn.disabled = true;
        } else if (this.parent.enableAdaptiveUI && this.responsiveDialogRenderer) {
          this.parent.notify(refreshCustomFilterOkBtn, {
            disabled: true
          });
        }
      }
      if (!this.parent.enableAdaptiveUI) {
        btn.dataBind();
      }
    };
    ColumnChooser2.prototype.refreshCheckboxList = function(chooserColumns) {
      this.ulElement = this.parent.createElement("ul", {
        className: "e-ccul-ele e-cc"
      });
      var selectAllValue = this.l10n.getConstant("SelectAll");
      var columnChooserList = this.parent.createElement("li", {
        className: "e-cclist e-cc e-cc-selectall"
      });
      updateCSSText(columnChooserList, this.infiniteRenderMode ? "list-style: None;" : "");
      var selectAll2 = this.createCheckBox(selectAllValue, false, this.parent.element.id + "-selectAll");
      if (chooserColumns.length) {
        selectAll2.querySelector(".e-checkbox-wrapper").firstElementChild.classList.add("e-selectall");
        selectAll2.querySelector(".e-frame").classList.add("e-selectall");
        this.checkState(selectAll2.querySelector(".e-icons"), true);
        columnChooserList.appendChild(selectAll2);
        if (this.infiniteRenderMode) {
          if (this.mainDiv.querySelector(".e-cc-contentdiv") && !this.mainDiv.querySelector(".e-cc-selectall")) {
            this.infiniteDiv = this.mainDiv.querySelector(".e-cc-contentdiv");
            this.mainDiv.insertBefore(columnChooserList, this.infiniteDiv);
            this.infiniteDiv.classList.add("e-checkbox-infinitescroll");
            EventHandler.add(this.infiniteDiv, "scroll", this.infiniteScrollHandler, this);
            EventHandler.add(this.infiniteDiv, "mouseup", this.infiniteScrollMouseKeyUpHandler, this);
            EventHandler.add(this.infiniteDiv, "mousedown", this.infiniteScrollMouseKeyDownHandler, this);
          }
        } else {
          this.ulElement.appendChild(columnChooserList);
        }
      }
      if (this.parent.cssClass) {
        if (this.parent.cssClass.indexOf(" ") !== -1) {
          addClass([selectAll2], this.parent.cssClass.split(" "));
        } else {
          addClass([selectAll2], [this.parent.cssClass]);
        }
      }
      if (this.infiniteRenderMode && chooserColumns.length > this.itemsCount * 3) {
        this.infiniteSkipCount = this.itemsCount * 2;
      }
      this.renderCheckbox(chooserColumns.slice(0, this.infiniteRenderMode ? this.itemsCount * 3 : chooserColumns.length));
      return this.ulElement;
    };
    ColumnChooser2.prototype.infiniteScrollMouseKeyDownHandler = function() {
      EventHandler.remove(this.infiniteDiv, "scroll", this.infiniteScrollHandler);
    };
    ColumnChooser2.prototype.infiniteScrollMouseKeyUpHandler = function(e) {
      var _this = this;
      EventHandler.add(this.infiniteDiv, "scroll", this.infiniteScrollHandler, this);
      var target = this.infiniteDiv;
      if (this.ulElement.children.length > 1 && (target.scrollTop >= target.scrollHeight - target.offsetHeight || target.scrollTop <= 0)) {
        this.infiniteScrollHandler();
      }
      Global.timer = setTimeout(function() {
        _this.clickHandler(e);
        Global.timer = null;
      }, 0);
    };
    ColumnChooser2.prototype.infiniteScrollHandler = function() {
      var target = this.infiniteDiv;
      var columns = this.searchValue && this.searchValue.length ? this.filterColumns : this.infiniteColumns;
      if (target.scrollTop >= target.scrollHeight - target.offsetHeight && this.infiniteLoadedElement.length <= this.infiniteSkipCount + this.itemsCount && this.ulElement.children.length === this.itemsCount * 3 && (!columns.length || columns.length > this.infiniteSkipCount + this.itemsCount)) {
        var diffcount = columns.length - (this.infiniteSkipCount + this.itemsCount);
        var count2 = 0;
        if (diffcount < this.itemsCount) {
          count2 = diffcount;
        }
        infiniteRemoveElements([].slice.call(this.ulElement.children).splice(0, this.itemsCount));
        this.infiniteInitialLoad = true;
        this.infiniteSkipCount += this.itemsCount;
        this.renderCheckbox(columns.slice(this.infiniteSkipCount, this.infiniteSkipCount + (count2 + this.itemsCount)));
        this.prevInfiniteScrollDirection = "down";
      } else if (target.scrollTop >= target.scrollHeight - target.offsetHeight && this.infiniteLoadedElement.length > this.infiniteSkipCount + this.itemsCount && this.ulElement.children.length === this.itemsCount * 3) {
        infiniteRemoveElements([].slice.call(this.ulElement.children).splice(0, this.itemsCount));
        this.infiniteSkipCount += this.prevInfiniteScrollDirection === "down" ? this.itemsCount : this.itemsCount * 3;
        appendChildren(this.ulElement, this.infiniteLoadedElement.slice(this.infiniteSkipCount, this.itemsCount + this.infiniteSkipCount));
        this.prevInfiniteScrollDirection = "down";
      } else if (target.scrollTop === 0 && !this.infiniteInitialLoad && this.infiniteSkipCount && this.infiniteLoadedElement.length && this.infiniteLoadedElement.length > this.itemsCount * 3 && this.ulElement.children.length === this.itemsCount * 3) {
        infiniteRemoveElements([].slice.call(this.ulElement.children).splice(this.itemsCount * 2, this.itemsCount));
        this.infiniteSkipCount -= this.prevInfiniteScrollDirection === "up" ? this.itemsCount : this.itemsCount * 3;
        infiniteAppendElements([].slice.call(this.infiniteLoadedElement.slice(this.infiniteSkipCount, this.infiniteSkipCount + this.itemsCount)), this.ulElement);
        this.prevInfiniteScrollDirection = "up";
        this.infiniteDiv.scrollTop = this.infiniteScrollAppendDiff;
      } else if (target.scrollTop === 0 && !this.infiniteInitialLoad && this.infiniteSkipCount && this.infiniteSkipCount > this.itemsCount * 2 && this.infiniteLoadedElement.length && this.ulElement.children.length < this.itemsCount * 3) {
        infiniteRemoveElements([].slice.call(this.ulElement.children).splice(this.itemsCount * 2, columns.length % this.itemsCount));
        this.infiniteSkipCount = (Math.floor(columns.length / this.itemsCount) - 3) * this.itemsCount;
        infiniteAppendElements([].slice.call(this.infiniteLoadedElement.slice(this.infiniteSkipCount, this.infiniteSkipCount + this.itemsCount)), this.ulElement);
        this.infiniteDiv.scrollTop = this.infiniteScrollAppendDiff;
        this.prevInfiniteScrollDirection = "up";
      }
    };
    ColumnChooser2.prototype.refreshCheckboxState = function() {
      if (!this.parent.columnChooserSettings.enableSearching) {
        return;
      }
      this.dlgObj.element.querySelector(".e-cc.e-input").value = "";
      this.columnChooserSearch("", false);
      var gridObject = this.parent;
      var currentCheckBoxColls = this.dlgObj.element.querySelectorAll(".e-cc-chbox:not(.e-selectall)");
      for (var i = 0, itemLen = currentCheckBoxColls.length; i < itemLen; i++) {
        var element = currentCheckBoxColls[parseInt(i.toString(), 10)];
        var columnUID = void 0;
        if (this.parent.childGrid || this.parent.detailTemplate) {
          columnUID = parentsUntil(this.dlgObj.element.querySelectorAll(".e-cc-chbox:not(.e-selectall)")[parseInt(i.toString(), 10)], "e-ccheck").getAttribute("uid");
        } else {
          columnUID = parentsUntil(element, "e-ccheck").getAttribute("uid");
        }
        var column = gridObject.getColumnByUid(columnUID, this.infiniteRenderMode);
        var uncheck = [].slice.call(element.parentElement.getElementsByClassName("e-uncheck"));
        if (column.visible && !uncheck.length) {
          element.checked = true;
          this.checkState(element.parentElement.querySelector(".e-icons"), true);
        } else {
          element.checked = false;
          this.checkState(element.parentElement.querySelector(".e-icons"), false);
        }
      }
    };
    ColumnChooser2.prototype.checkState = function(element, state) {
      if (state) {
        classList(element, ["e-check"], ["e-uncheck"]);
      } else {
        classList(element, ["e-uncheck"], ["e-check"]);
      }
    };
    ColumnChooser2.prototype.createCheckBox = function(label, checked, uid2) {
      var cbox = checked ? this.cBoxTrue.cloneNode(true) : this.cBoxFalse.cloneNode(true);
      if (!this.parent.enableAdaptiveUI && this.parent.enableRtl && !cbox.classList.contains("e-rtl")) {
        cbox.classList.add("e-rtl");
      }
      var cboxLabel = cbox.querySelector(".e-label");
      var inputcbox = cbox.querySelector("input");
      setChecked(inputcbox, checked);
      cboxLabel.setAttribute("id", uid2 + "label");
      cboxLabel.innerHTML = label;
      inputcbox.setAttribute("aria-labelledby", cboxLabel.id);
      return createCboxWithWrap(uid2, cbox, "e-ccheck");
    };
    ColumnChooser2.prototype.renderCheckbox = function(columns) {
      var _a;
      var checkBoxItems = this.parent.createElement("div");
      var offsetHeight = this.ulElement.offsetHeight;
      for (var i = 0; i < columns.length; i++) {
        var column = columns[parseInt(i.toString(), 10)];
        if (column.showInColumnChooser) {
          var columnChooserList = this.parent.createElement("li", {
            className: "e-cclist e-cc",
            id: "e-ccli_" + column.uid
          });
          columnChooserList.style.listStyle = "none";
          var hideColumnState = this.hideColumn.indexOf(column.uid) === -1 ? false : true;
          var showColumnState = this.showColumn.indexOf(column.uid) === -1 ? false : true;
          var columnchooserccheckboxlist = this.createCheckBox(column.headerText, column.visible && !hideColumnState || showColumnState, column.uid);
          columnChooserList.appendChild(columnchooserccheckboxlist);
          if (this.parent.cssClass) {
            if (this.parent.cssClass.indexOf(" ") !== -1) {
              addClass([columnchooserccheckboxlist], this.parent.cssClass.split(" "));
            } else {
              addClass([columnchooserccheckboxlist], [this.parent.cssClass]);
            }
          }
          if (this.infiniteRenderMode && this.infiniteDiv) {
            columnChooserList.style.height = getListHeight(this.infiniteDiv, true) + "px";
          }
          checkBoxItems.appendChild(columnChooserList);
        }
      }
      if (this.infiniteRenderMode && this.infiniteInitialLoad) {
        (_a = this.infiniteLoadedElement).push.apply(_a, [].slice.call(checkBoxItems.children));
        this.infiniteInitialLoad = false;
      }
      appendChildren(this.ulElement, [].slice.call(checkBoxItems.children));
      if (this.infiniteRenderMode && !this.infiniteScrollAppendDiff) {
        this.infiniteScrollAppendDiff = this.ulElement.offsetHeight - offsetHeight;
      }
      if (this.isInitialOpen) {
        this.updateIntermediateBtn();
      }
    };
    ColumnChooser2.prototype.columnChooserManualSearch = function(e) {
      this.addcancelIcon();
      this.searchValue = e.target.value;
      this.stopTimer();
      this.startTimer(e);
    };
    ColumnChooser2.prototype.startTimer = function(e) {
      var proxy = this;
      var interval = !proxy.flag && e.keyCode !== 13 ? 500 : 0;
      this.timer = window.setInterval(function() {
        proxy.columnChooserSearch(proxy.searchValue, true);
      }, interval);
    };
    ColumnChooser2.prototype.stopTimer = function() {
      window.clearInterval(this.timer);
    };
    ColumnChooser2.prototype.addcancelIcon = function() {
      if (this.dlgDiv.querySelector(".e-cc.e-ccsearch-icon")) {
        this.dlgDiv.querySelector(".e-cc.e-ccsearch-icon").classList.add("e-cc-cancel");
        this.dlgDiv.querySelector(".e-cc-cancel").setAttribute("title", this.l10n.getConstant("Clear"));
      }
    };
    ColumnChooser2.prototype.removeCancelIcon = function() {
      if (this.dlgDiv.querySelector(".e-cc.e-ccsearch-icon")) {
        this.dlgDiv.querySelector(".e-cc.e-ccsearch-icon").classList.remove("e-cc-cancel");
        this.dlgDiv.querySelector(".e-cc.e-ccsearch-icon").setAttribute("title", this.l10n.getConstant("Search"));
      }
    };
    ColumnChooser2.prototype.mOpenDlg = function() {
      if (Browser.isDevice) {
        if (this.dlgObj.element.querySelector(".e-cc-searchdiv")) {
          this.dlgObj.element.querySelector(".e-cc-searchdiv").classList.remove("e-input-focus");
        }
        if (this.dlgObj.element.querySelectorAll(".e-cc-chbox")[0]) {
          this.dlgObj.element.querySelectorAll(".e-cc-chbox")[0].focus();
        }
      }
      if (this.parent.enableAdaptiveUI) {
        if (this.dlgObj.element.querySelector(".e-cc-searchdiv")) {
          this.dlgObj.element.querySelector(".e-cc-searchdiv").classList.add("e-input-focus");
        }
      }
    };
    ColumnChooser2.prototype.getModuleName = function() {
      return "columnChooser";
    };
    ColumnChooser2.prototype.hideOpenedDialog = function() {
      var openCC = [].slice.call(document.getElementsByClassName("e-ccdlg")).filter(function(dlgEle) {
        return dlgEle.classList.contains("e-popup-open");
      });
      for (var i = 0, dlgLen = openCC.length; i < dlgLen; i++) {
        if (this.parent.element.id + "_ccdlg" !== openCC[parseInt(i.toString(), 10)].id || openCC[parseInt(i.toString(), 10)].classList.contains("e-dialog")) {
          openCC[parseInt(i.toString(), 10)].ej2_instances[0].hide();
        }
      }
    };
    ColumnChooser2.prototype.beforeOpenColumnChooserEvent = function() {
      var args1 = {
        requestType: "beforeOpenColumnChooser",
        element: this.parent.element,
        columns: this.getColumns(),
        cancel: false,
        searchOperator: this.parent.columnChooserSettings.operator
      };
      this.parent.trigger(beforeOpenColumnChooser, args1);
      this.searchOperator = args1.searchOperator;
      return args1;
    };
    ColumnChooser2.prototype.renderResponsiveChangeAction = function(args) {
      this.responsiveDialogRenderer.action = args.action;
    };
    ColumnChooser2.prototype.showCustomColumnChooser = function(enable) {
      this.responsiveDialogRenderer.isCustomDialog = enable;
      this.responsiveDialogRenderer.showResponsiveDialog();
    };
    return ColumnChooser2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/export-helper.js
var ExportHelper = (
  /** @class */
  function() {
    function ExportHelper2(parent, foreignKeyData2) {
      this.hideColumnInclude = false;
      this.foreignKeyData = {};
      this.parent = parent;
      if (!parent.parentDetails && foreignKeyData2) {
        this.foreignKeyData = foreignKeyData2;
      }
    }
    ExportHelper2.getQuery = function(parent, data) {
      var query = data.generateQuery(true).requiresCount();
      if (data.isRemote()) {
        if (parent.groupSettings.enableLazyLoading && parent.groupSettings.columns.length) {
          query.lazyLoad = [];
        } else {
          query.take(parent.pageSettings.totalRecordsCount);
        }
      }
      return query;
    };
    ExportHelper2.prototype.getFData = function(value, column) {
      var foreignKeyData2 = getForeignData(column, {}, value, this.foreignKeyData[column.field])[0];
      return foreignKeyData2;
    };
    ExportHelper2.prototype.getGridRowModel = function(columns, dataSource, gObj, startIndex) {
      if (startIndex === void 0) {
        startIndex = 0;
      }
      var rows = [];
      var length = dataSource.length;
      if (length) {
        for (var i = 0; i < length; i++, startIndex++) {
          var options = {
            isExpand: false
          };
          options.data = dataSource[parseInt(i.toString(), 10)];
          options.index = startIndex;
          if (gObj.childGrid || gObj.detailTemplate) {
            if (gObj.hierarchyPrintMode === "All") {
              options.isExpand = true;
            } else if (gObj.hierarchyPrintMode === "Expanded" && this.parent.expandedRows && this.parent.expandedRows[parseInt(startIndex.toString(), 10)]) {
              options.isExpand = gObj.expandedRows[parseInt(startIndex.toString(), 10)].isExpand;
            }
          }
          var row2 = new Row(options);
          row2.cells = this.generateCells(columns, gObj);
          rows.push(row2);
        }
        this.processColumns(rows);
      }
      return rows;
    };
    ExportHelper2.prototype.generateCells = function(columns, gObj) {
      var cells = [];
      if (gObj.childGridLevel) {
        var len = gObj.childGridLevel;
        for (var i = 0; len > i; i++) {
          cells.push(this.generateCell({}, CellType.Indent));
        }
      }
      for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
        var col = columns_1[_i];
        cells.push(this.generateCell(col, CellType.Data));
      }
      return cells;
    };
    ExportHelper2.prototype.getColumnData = function(gridObj) {
      var _this = this;
      var columnPromise = [];
      var promise;
      var fColumns = gridObj.getForeignKeyColumns();
      if (fColumns.length) {
        for (var i = 0; i < fColumns.length; i++) {
          var colData = "result" in fColumns[parseInt(i.toString(), 10)].dataSource ? new DataManager(fColumns[parseInt(i.toString(), 10)].dataSource.result) : fColumns[parseInt(i.toString(), 10)].dataSource;
          columnPromise.push(colData.executeQuery(new Query()));
        }
        promise = Promise.all(columnPromise).then(function(e) {
          for (var j = 0; j < fColumns.length; j++) {
            _this.foreignKeyData[fColumns[parseInt(j.toString(), 10)].field] = e[parseInt(j.toString(), 10)].result;
          }
        });
      }
      return promise;
    };
    ExportHelper2.prototype.getHeaders = function(columns, isHideColumnInclude) {
      if (isHideColumnInclude) {
        this.hideColumnInclude = true;
      } else {
        this.hideColumnInclude = false;
      }
      this.colDepth = measureColumnDepth(columns);
      var rows = [];
      for (var i = 0; i < this.colDepth; i++) {
        rows[parseInt(i.toString(), 10)] = new Row({});
        rows[parseInt(i.toString(), 10)].cells = [];
      }
      rows = this.processColumns(rows);
      rows = this.processHeaderCells(rows, columns);
      return {
        rows,
        columns: this.generateActualColumns(columns)
      };
    };
    ExportHelper2.prototype.getConvertedWidth = function(input) {
      var value = parseFloat(input);
      return input.indexOf("%") !== -1 ? this.parent.element.getBoundingClientRect().width * value / 100 : value;
    };
    ExportHelper2.prototype.generateActualColumns = function(columns, actualColumns) {
      if (actualColumns === void 0) {
        actualColumns = [];
      }
      for (var _i = 0, columns_2 = columns; _i < columns_2.length; _i++) {
        var column = columns_2[_i];
        if (column.commands) {
          continue;
        }
        if (!column.columns) {
          if (column.visible || this.hideColumnInclude) {
            actualColumns.push(column);
          }
        } else {
          if (column.visible || this.hideColumnInclude) {
            var colSpan = this.getCellCount(column, 0);
            if (colSpan !== 0) {
              this.generateActualColumns(column.columns, actualColumns);
            }
          }
        }
      }
      return actualColumns;
    };
    ExportHelper2.prototype.processHeaderCells = function(rows, cols) {
      var columns = cols;
      for (var i = 0; i < columns.length; i++) {
        if (!columns[parseInt(i.toString(), 10)].commands) {
          rows = this.appendGridCells(columns[parseInt(i.toString(), 10)], rows, 0);
        }
      }
      return rows;
    };
    ExportHelper2.prototype.appendGridCells = function(cols, gridRows, index) {
      if (!cols.columns && (cols.visible !== false || this.hideColumnInclude) && !cols.commands) {
        gridRows[parseInt(index.toString(), 10)].cells.push(this.generateCell(cols, CellType.Header, this.colDepth - index, index));
      } else if (cols.columns) {
        var colSpan = this.getCellCount(cols, 0);
        if (colSpan) {
          gridRows[parseInt(index.toString(), 10)].cells.push(new Cell({
            cellType: CellType.StackedHeader,
            column: cols,
            colSpan
          }));
        }
        var isIgnoreFirstCell = void 0;
        for (var i = 0, len = cols.columns.length; i < len; i++) {
          if (cols.columns[parseInt(i.toString(), 10)].visible && !isIgnoreFirstCell) {
            isIgnoreFirstCell = true;
          }
          gridRows = this.appendGridCells(cols.columns[parseInt(i.toString(), 10)], gridRows, index + 1);
        }
      }
      return gridRows;
    };
    ExportHelper2.prototype.generateCell = function(gridColumn, cellType, rowSpan, rowIndex) {
      var option = {
        "visible": gridColumn.visible,
        "isDataCell": cellType === CellType.Data,
        "column": gridColumn,
        "cellType": cellType,
        "rowSpan": rowSpan,
        "index": rowIndex
      };
      if (!option.rowSpan || option.rowSpan < 2) {
        delete option.rowSpan;
      }
      return new Cell(option);
    };
    ExportHelper2.prototype.processColumns = function(rows) {
      var gridObj = this.parent;
      var columnIndexes = [];
      if (gridObj.enableColumnVirtualization) {
        columnIndexes = gridObj.getColumnIndexesInView();
      }
      for (var i = 0, len = rows.length; i < len; i++) {
        if (gridObj.allowGrouping) {
          for (var j = 0, len_1 = gridObj.groupSettings.columns.length - 1; j < len_1; j++) {
            if (gridObj.enableColumnVirtualization && columnIndexes.indexOf(j) === -1) {
              continue;
            }
            rows[parseInt(i.toString(), 10)].cells.splice(0, 0, this.generateCell({}, CellType.HeaderIndent));
          }
        }
      }
      return rows;
    };
    ExportHelper2.prototype.getCellCount = function(column, count2) {
      if (column.columns) {
        for (var i = 0; i < column.columns.length; i++) {
          count2 = this.getCellCount(column.columns[parseInt(i.toString(), 10)], count2);
        }
      } else {
        if (column.visible || this.hideColumnInclude) {
          count2++;
        }
      }
      return count2;
    };
    ExportHelper2.prototype.checkAndExport = function(gridPool, globalResolve) {
      var bool = Object.keys(gridPool).some(function(key) {
        return !gridPool["" + key];
      });
      if (!bool) {
        globalResolve();
      }
    };
    ExportHelper2.prototype.failureHandler = function(gridPool, childGridObj, resolve) {
      var _this = this;
      return function() {
        gridPool[childGridObj.id] = true;
        _this.checkAndExport(gridPool, resolve);
      };
    };
    ExportHelper2.prototype.createChildGrid = function(gObj, row2, exportType, gridPool) {
      var childGridObj = new Grid(this.parent.detailRowModule.getGridModel(gObj, row2, exportType));
      gObj.isPrinting = false;
      var parent = "parentDetails";
      childGridObj["" + parent] = {
        parentID: gObj.element.id,
        parentPrimaryKeys: gObj.getPrimaryKeyFieldNames(),
        parentKeyField: gObj.childGrid.queryString,
        parentKeyFieldValue: getValue(childGridObj.queryString, row2.data),
        parentRowData: row2.data
      };
      var exportId = getUid("child-grid");
      var element = createElement("div", {
        id: exportId
      });
      element.style.display = "none";
      document.body.appendChild(element);
      childGridObj.id = exportId;
      gridPool["" + exportId] = false;
      childGridObj.isExportGrid = true;
      return {
        childGrid: childGridObj,
        element
      };
    };
    ExportHelper2.prototype.getGridExportColumns = function(columns) {
      var actualGridColumns = [];
      for (var i = 0, gridColumns = columns; i < gridColumns.length; i++) {
        if (gridColumns[parseInt(i.toString(), 10)].type !== "checkbox") {
          actualGridColumns.push(gridColumns[parseInt(i.toString(), 10)]);
        }
      }
      return actualGridColumns;
    };
    ExportHelper2.prototype.getForeignKeyData = function() {
      return this.foreignKeyData;
    };
    return ExportHelper2;
  }()
);
var ExportValueFormatter = (
  /** @class */
  function() {
    function ExportValueFormatter2(culture) {
      this.valueFormatter = new ValueFormatter(culture);
      this.internationalization = new Internationalization(culture);
    }
    ExportValueFormatter2.prototype.returnFormattedValue = function(args, customFormat) {
      if (!isNullOrUndefined(args.value) && args.value) {
        return this.valueFormatter.getFormatFunction(customFormat)(args.value);
      } else {
        return "";
      }
    };
    ExportValueFormatter2.prototype.formatCellValue = function(args) {
      if (args.isForeignKey) {
        args.value = getValue(args.column.foreignKeyValue, getForeignData(args.column, {}, args.value)[0]);
      }
      if (args.column.type === "number" && args.column.format !== void 0 && args.column.format !== "") {
        if (typeof args.column.format === "string") {
          args.column.format = {
            format: args.column.format
          };
        }
        return args.value || args.value === 0 ? this.internationalization.getNumberFormat(args.column.format)(args.value) : "";
      } else if (args.column.type === "boolean" && args.value !== "") {
        return args.value ? "true" : "false";
      } else if ((args.column.type === "date" || args.column.type === "dateonly" || args.column.type === "datetime" || args.column.type === "time") && args.column.format !== void 0) {
        if (typeof args.value === "string") {
          args.value = new Date(args.value);
        }
        if (typeof args.column.format === "string") {
          var format = void 0;
          var cFormat = args.column.format;
          if (args.column.type === "date" || args.column.type === "dateonly") {
            format = {
              type: "date",
              skeleton: cFormat
            };
          } else if (args.column.type === "time") {
            format = {
              type: "time",
              skeleton: cFormat
            };
          } else {
            format = {
              type: "dateTime",
              skeleton: cFormat
            };
          }
          return this.returnFormattedValue(args, format);
        } else {
          if (args.column.format instanceof Object && args.column.format.type === void 0) {
            return args.value.toString();
          } else {
            var customFormat = void 0;
            if (args.column.type === "date" || args.column.type === "dateonly") {
              customFormat = {
                type: args.column.format.type,
                format: args.column.format.format,
                skeleton: args.column.format.skeleton
              };
            } else if (args.column.type === "time") {
              customFormat = {
                type: "time",
                format: args.column.format.format,
                skeleton: args.column.format.skeleton
              };
            } else {
              customFormat = {
                type: "dateTime",
                format: args.column.format.format,
                skeleton: args.column.format.skeleton
              };
            }
            return this.returnFormattedValue(args, customFormat);
          }
        }
      } else {
        if (!isNullOrUndefined(args.column.type) && !isNullOrUndefined(args.value) || !isNullOrUndefined(args.value)) {
          return args.value.toString();
        } else {
          return "";
        }
      }
    };
    return ExportValueFormatter2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/excel-export.js
var ExcelExport = (
  /** @class */
  function() {
    function ExcelExport2(parent, locator) {
      this.book = {};
      this.workSheet = [];
      this.rows = [];
      this.columns = [];
      this.styles = [];
      this.rowLength = 1;
      this.expType = "AppendToSheet";
      this.includeHiddenColumn = false;
      this.isCsvExport = false;
      this.isChild = false;
      this.isElementIdChanged = false;
      this.gridPool = {};
      this.sheet = {};
      this.grpFooterTemplates = [];
      this.footerTemplates = [];
      this.aggIndex = 0;
      this.totalAggregates = 0;
      this.parent = parent;
      this.helper = new ExportHelper(parent);
      this.locator = locator;
      this.l10n = this.locator.getService("localization");
    }
    ExcelExport2.prototype.getModuleName = function() {
      return "ExcelExport";
    };
    ExcelExport2.prototype.init = function(gObj) {
      if (gObj.element !== null && gObj.element.id === "") {
        gObj.element.id = (/* @__PURE__ */ new Date()).toISOString();
        this.isElementIdChanged = true;
      }
      this.parent = gObj;
      if (this.parent.isDestroyed) {
        return;
      }
      this.isExporting = void 0;
      this.book = {};
      this.workSheet = [];
      this.rows = [];
      this.columns = [];
      this.styles = [];
      this.rowLength = 1;
      this.footer = void 0;
      this.expType = "AppendToSheet";
      this.includeHiddenColumn = false;
      this.exportValueFormatter = new ExportValueFormatter(gObj.locale);
      gObj.id = getUid("main-grid");
      this.gridPool[gObj.id] = false;
    };
    ExcelExport2.prototype.Map = function(grid, exportProperties, isMultipleExport, workbook, isCsv, isBlob) {
      var gObj = grid;
      var cancel = "cancel";
      var isBlb = "isBlob";
      var Child = "isChild";
      var csv = "isCsv";
      var workbk = "workbook";
      var isMultiEx = "isMultipleExport";
      this.gridPool = {};
      if ((grid.childGrid || grid.detailTemplate) && !(!isNullOrUndefined(exportProperties) && exportProperties.hierarchyExportMode === "None")) {
        grid.expandedRows = getPrintGridModel(grid).expandedRows;
      }
      var args = {
        requestType: "beforeExcelExport",
        gridObject: gObj,
        cancel: false,
        isMultipleExport,
        workbook,
        isCsv,
        isBlob,
        isChild: this.isChild,
        grpFooterTemplates: this.grpFooterTemplates
      };
      gObj.trigger(beforeExcelExport, args);
      if (args["" + cancel]) {
        return new Promise(function(resolve) {
          return resolve();
        });
      }
      this.parent.log("exporting_begin", this.getModuleName());
      this.data = new Data(gObj);
      this.isExporting = true;
      this.isBlob = args["" + isBlb];
      this.isChild = args["" + Child];
      this.grpFooterTemplates = args["grpFooterTemplates"];
      if (args["" + csv]) {
        this.isCsvExport = args["" + csv];
      } else {
        this.isCsvExport = false;
      }
      if (isExportColumns(exportProperties)) {
        updateColumnTypeForExportColumns(exportProperties, gObj);
      }
      return this.processRecords(gObj, exportProperties, args["" + isMultiEx], args["" + workbk]);
    };
    ExcelExport2.prototype.exportingSuccess = function(resolve) {
      this.isExporting = false;
      this.parent.trigger(excelExportComplete, this.isBlob ? {
        promise: this.blobPromise
      } : {
        gridInstance: this.parent
      });
      this.parent.log("exporting_complete", this.getModuleName());
      resolve(this.book);
    };
    ExcelExport2.prototype.processRecords = function(gObj, exportProperties, isMultipleExport, workbook) {
      var _this = this;
      if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource)) {
        exportProperties.dataSource = exportProperties.dataSource instanceof DataManager ? exportProperties.dataSource : new DataManager(exportProperties.dataSource);
        var query_1 = exportProperties.query ? exportProperties.query : new Query();
        if (isNullOrUndefined(query_1.isCountRequired) || gObj.aggregates) {
          query_1.isCountRequired = true;
        }
        return new Promise(function(resolve) {
          var dataManager = exportProperties.dataSource.executeQuery(query_1);
          dataManager.then(function(r) {
            _this.init(gObj);
            _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, r).then(function() {
              _this.exportingSuccess(resolve);
            });
          });
        });
      } else if (!isNullOrUndefined(exportProperties) && exportProperties.exportType === "CurrentPage" && !(this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length && !this.parent.getDataModule().isRemote())) {
        return new Promise(function(resolve) {
          _this.init(gObj);
          _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, _this.parent.getCurrentViewRecords());
          _this.exportingSuccess(resolve);
        });
      } else {
        var allPromise_1 = [];
        var query = ExportHelper.getQuery(gObj, this.data);
        if (this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length && !this.parent.getDataModule().isRemote()) {
          if (isNullOrUndefined(exportProperties)) {
            exportProperties = {
              hierarchyExportMode: "All"
            };
          }
          exportProperties.hierarchyExportMode = exportProperties.hierarchyExportMode === "None" ? "None" : "All";
          if (exportProperties.hierarchyExportMode === "All") {
            query.lazyLoad = [];
          }
        }
        allPromise_1.push(this.data.getData({}, query));
        allPromise_1.push(this.helper.getColumnData(gObj));
        return new Promise(function(resolve, reject) {
          Promise.all(allPromise_1).then(function(e) {
            _this.init(gObj);
            _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, e[0]).then(function() {
              _this.exportingSuccess(resolve);
            });
          }).catch(function(e) {
            reject(_this.book);
            _this.parent.trigger(actionFailure, e);
          });
        });
      }
    };
    ExcelExport2.prototype.processInnerRecords = function(gObj, exportProperties, isMultipleExport, workbook, r) {
      var _this = this;
      this.groupedColLength = gObj.groupSettings.columns.length;
      var blankRows = 5;
      var separator;
      var rows = [];
      var colDepth = measureColumnDepth(gObj.columns);
      var isExportPropertiesPresent = !isNullOrUndefined(exportProperties);
      if (isExportPropertiesPresent && !isNullOrUndefined(exportProperties.multipleExport)) {
        this.expType = !isNullOrUndefined(exportProperties.multipleExport.type) ? exportProperties.multipleExport.type : "AppendToSheet";
        if (!isNullOrUndefined(exportProperties.multipleExport.blankRows)) {
          blankRows = exportProperties.multipleExport.blankRows;
        }
      }
      if (isNullOrUndefined(workbook)) {
        this.workSheet = [];
        this.rows = [];
        this.columns = [];
        this.styles = [];
        this.sheet.images = [];
      } else if (this.expType === "NewSheet") {
        this.workSheet = workbook.worksheets;
        this.rows = [];
        this.columns = [];
        this.sheet.images = [];
        this.styles = workbook.styles;
      } else {
        this.workSheet = [];
        this.rows = workbook.worksheets[0].rows;
        this.columns = workbook.worksheets[0].columns;
        this.styles = workbook.styles;
        this.sheet.images = workbook.worksheets[0].images;
        this.rowLength = this.rows[this.rows.length - 1].index + blankRows;
        this.rowLength++;
      }
      if (isExportPropertiesPresent) {
        if (!isNullOrUndefined(isMultipleExport)) {
          if (!isNullOrUndefined(exportProperties.header) && (isMultipleExport || this.expType === "NewSheet")) {
            this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));
          }
          if (!isNullOrUndefined(exportProperties.footer)) {
            if (this.expType === "AppendToSheet") {
              if (!isMultipleExport) {
                this.footer = JSON.parse(JSON.stringify(exportProperties.footer));
              }
            } else {
              this.footer = JSON.parse(JSON.stringify(exportProperties.footer));
            }
          }
        } else {
          if (!isNullOrUndefined(exportProperties.header)) {
            this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));
          }
          if (!isNullOrUndefined(exportProperties.footer)) {
            this.footer = JSON.parse(JSON.stringify(exportProperties.footer));
          }
        }
      }
      this.includeHiddenColumn = isExportPropertiesPresent ? exportProperties.includeHiddenColumn : false;
      return new Promise(function(resolve, reject) {
        gObj.childGridLevel = 0;
        rows = _this.processGridExport(gObj, exportProperties, r);
        _this.globalResolve = resolve;
        _this.gridPool[gObj.id] = true;
        _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);
      }).then(function() {
        var organisedRows = [];
        _this.organiseRows(rows, rows[0].index, organisedRows);
        _this.rows = _this.rows.concat(organisedRows);
        if (!isNullOrUndefined(_this.footer)) {
          if (_this.expType === "AppendToSheet" && !isMultipleExport || _this.expType === "NewSheet") {
            _this.processExcelFooter(_this.footer);
          }
        }
        if (_this.columns.length > 0) {
          _this.sheet.columns = _this.columns;
        }
        _this.sheet.rows = _this.rows;
        _this.sheet.enableRtl = _this.parent.enableRtl;
        if (_this.parent.allowFiltering && gObj.getVisibleColumns().length && isExportPropertiesPresent && exportProperties.enableFilter) {
          var headerRowLen = exportProperties.header ? exportProperties.header.headerRows || exportProperties.header.rows.length : 0;
          var autoFilters = {
            row: colDepth + headerRowLen,
            column: _this.groupedColLength ? _this.groupedColLength + 1 : _this.sheet.columns[0].index,
            lastRow: _this.sheet.rows.length,
            lastColumn: _this.sheet.columns.length
          };
          _this.sheet.autoFilters = autoFilters;
        }
        _this.workSheet.push(_this.sheet);
        _this.book.worksheets = _this.workSheet;
        _this.book.styles = _this.styles;
        gObj.notify("finalPageSetup", _this.book);
        if (!isMultipleExport) {
          if (_this.isCsvExport) {
            if (isExportPropertiesPresent && !isNullOrUndefined(exportProperties.separator) && exportProperties.separator !== ",") {
              separator = exportProperties.separator;
            }
            var book = new Workbook(_this.book, "csv", gObj.locale, defaultCurrencyCode, separator);
            if (!_this.isBlob) {
              if (isExportPropertiesPresent && exportProperties.fileName) {
                book.save(exportProperties.fileName);
              } else {
                book.save("Export.csv");
              }
            } else {
              _this.blobPromise = book.saveAsBlob("text/csv");
            }
          } else {
            var book = new Workbook(_this.book, "xlsx", gObj.locale, defaultCurrencyCode);
            if (!_this.isBlob) {
              if (isExportPropertiesPresent && exportProperties.fileName) {
                book.save(exportProperties.fileName);
              } else {
                book.save("Export.xlsx");
              }
            } else {
              _this.blobPromise = book.saveAsBlob("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
            }
          }
          if (_this.isElementIdChanged) {
            gObj.element.id = "";
          }
          delete gObj.expandedRows;
        }
        return workbook;
      });
    };
    ExcelExport2.prototype.organiseRows = function(rows, initialIndex, organisedRows) {
      if (!rows.length) {
        return initialIndex;
      }
      for (var i = 0; i < rows.length; i++) {
        var row2 = rows[parseInt(i.toString(), 10)];
        var childRows = row2.childRows;
        if (childRows) {
          row2.index = initialIndex++;
          delete row2.childRows;
          organisedRows.push(row2);
          initialIndex = this.organiseRows(childRows, initialIndex, organisedRows);
        } else {
          row2.index = initialIndex++;
          organisedRows.push(row2);
        }
      }
      return initialIndex;
    };
    ExcelExport2.prototype.processGridExport = function(gObj, exportProperties, r) {
      var excelRows = [];
      if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.theme)) {
        this.theme = exportProperties.theme;
      }
      if ((gObj.childGrid || gObj.detailTemplate) && !isNullOrUndefined(exportProperties)) {
        gObj.hierarchyPrintMode = exportProperties.hierarchyExportMode || "Expanded";
      }
      var helper = new ExportHelper(gObj, this.helper.getForeignKeyData());
      var gColumns = isExportColumns(exportProperties) ? prepareColumns(exportProperties.columns, gObj.enableColumnVirtualization) : helper.getGridExportColumns(gObj.columns);
      var headerRow = helper.getHeaders(gColumns, this.includeHiddenColumn);
      var groupIndent = gObj.groupSettings.columns.length ? gObj.groupSettings.columns.length - 1 : 0;
      excelRows = this.processHeaderContent(gObj, headerRow, groupIndent, excelRows);
      if (!isNullOrUndefined(exportProperties) && Object.keys(exportProperties).length && isNullOrUndefined(exportProperties.dataSource)) {
        if (exportProperties.exportType === "CurrentPage" && (!gObj.groupSettings.enableLazyLoading || gObj.getDataModule().isRemote())) {
          excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, gObj.currentViewData, excelRows, helper);
        } else {
          excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, void 0, excelRows, helper);
        }
      } else {
        excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, void 0, excelRows, helper);
      }
      gObj.notify(exportDataBound, {
        excelRows,
        type: "excel"
      });
      this.capTemplate = void 0;
      this.footerTemplates = [];
      this.grpFooterTemplates = [];
      this.aggIndex = 0;
      this.totalAggregates = 0;
      return excelRows;
    };
    ExcelExport2.prototype.processRecordContent = function(gObj, returnType, headerRow, exportProperties, currentViewRecords, excelRow, helper) {
      var record;
      if (!isNullOrUndefined(currentViewRecords) && currentViewRecords.length) {
        record = currentViewRecords;
      } else {
        record = returnType.result;
      }
      if (!isNullOrUndefined(record.level)) {
        this.processGroupedRows(gObj, record, headerRow, record.level, 0, exportProperties, excelRow, helper);
      } else {
        this.processRecordRows(gObj, record, headerRow, 0, 0, exportProperties, excelRow, helper);
      }
      if (!isNullOrUndefined(returnType.aggregates)) {
        if (!isNullOrUndefined(currentViewRecords) && !this.parent.groupSettings.enableLazyLoading) {
          this.processAggregates(gObj, returnType.result, excelRow, currentViewRecords);
        } else {
          var result = returnType.result.GroupGuid ? returnType.result.records : returnType.result;
          this.processAggregates(gObj, result, excelRow);
        }
      }
      return excelRow;
    };
    ExcelExport2.prototype.processGroupedRows = function(gObj, dataSource, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {
      for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {
        var item = dataSource_1[_i];
        var cells = [];
        var index = 1;
        var cell = {};
        cell.index = index + level - 1;
        var col = gObj.getColumnByField(item.field);
        var args = {
          value: item.key,
          column: col,
          style: void 0,
          isForeignKey: col.isForeignColumn()
        };
        var value = gObj.getColumnByField(item.field).headerText + ": " + (!col.enableGroupByFormat ? this.exportValueFormatter.formatCellValue(args) : item.key) + " - ";
        if (item.count > 1) {
          value += item.count + " items";
        } else {
          value += item.count + " item";
        }
        var cArgs = {
          captionText: value,
          type: this.isCsvExport ? "CSV" : "Excel",
          data: item
        };
        this.parent.trigger(exportGroupCaption, cArgs);
        cell.value = cArgs.captionText;
        cell.style = this.getCaptionThemeStyle(this.theme);
        if (!isNullOrUndefined(cArgs.style)) {
          cell.style = this.mergeOptions(cell.style, cArgs.style);
        }
        var captionModelGen = new CaptionSummaryModelGenerator(gObj);
        var groupCaptionSummaryRows = captionModelGen.generateRows(item);
        this.fillAggregates(gObj, groupCaptionSummaryRows, dataSource.level + dataSource.childLevels - 1, excelRows, this.rowLength);
        cells.push(cell);
        if (excelRows[excelRows.length - 1].cells.length > 0) {
          var lIndex = dataSource.level + dataSource.childLevels + groupCaptionSummaryRows[0].cells.length;
          var hIndex = 0;
          for (var _a = 0, _b = excelRows[excelRows.length - 1].cells; _a < _b.length; _a++) {
            var tCell = _b[_a];
            if (tCell.index < lIndex) {
              lIndex = tCell.index;
            }
            if (tCell.index > hIndex) {
              hIndex = tCell.index;
            }
            if (cells[cells.length - 1].index !== tCell.index) {
              cells.push(tCell);
            }
          }
          if (lIndex - cell.index > 1) {
            cell.colSpan = lIndex - cell.index;
          }
          var captionSummaryCells = Object.keys(groupCaptionSummaryRows[0].data);
          var cellsLength = captionSummaryCells ? captionSummaryCells.length : 0;
          while (hIndex < headerRow.columns.length - cellsLength + level + dataSource.childLevels) {
            var summaryCell = {};
            summaryCell.index = hIndex + 1;
            summaryCell.style = this.getCaptionThemeStyle(this.theme);
            var summaryCellArgs = {
              type: this.isCsvExport ? "CSV" : "Excel",
              data: item
            };
            this.parent.trigger(exportGroupCaption, summaryCellArgs);
            if (!isNullOrUndefined(summaryCellArgs.style)) {
              summaryCell.style = this.mergeOptions(summaryCell.style, summaryCellArgs.style);
            }
            cells.push(summaryCell);
            hIndex++;
          }
        } else {
          var span = 0;
          for (var _c = 0, _d = headerRow.columns; _c < _d.length; _c++) {
            var col_1 = _d[_c];
            if (col_1.visible) {
              span++;
            }
          }
          cell.colSpan = dataSource.childLevels + span;
        }
        excelRows[excelRows.length - 1].cells = cells;
        this.rowLength++;
        if (this.groupedColLength < 8 && level > 1) {
          var grouping = {
            outlineLevel: level - 1,
            isCollapsed: true
          };
          excelRows[excelRows.length - 1].grouping = grouping;
        }
        if (!isNullOrUndefined(dataSource.childLevels) && dataSource.childLevels > 0) {
          this.processGroupedRows(gObj, item.items, headerRow, item.items.level, startIndex, excelExportProperties, excelRows, helper);
          this.processAggregates(gObj, item, excelRows, void 0, level - 1 + dataSource.childLevels, true);
        } else {
          startIndex = this.processRecordRows(gObj, item.items, headerRow, level - 1, startIndex, excelExportProperties, excelRows, helper);
          this.processAggregates(gObj, item, excelRows, void 0, level - 1, true);
        }
      }
    };
    ExcelExport2.prototype.processRecordRows = function(gObj, record, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {
      var index = 1;
      var cells = [];
      var columns = headerRow.columns;
      var rows = helper.getGridRowModel(columns, record, gObj, startIndex);
      for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
        var row2 = rows_1[_i];
        cells = [];
        startIndex++;
        index = 1;
        var templateRowHeight = void 0;
        for (var c = 0, len = row2.cells.length; c < len; c++) {
          var gCell = row2.cells[parseInt(c.toString(), 10)];
          if (gCell.cellType !== CellType.Data) {
            continue;
          }
          var column = gCell.column;
          var field = column.field;
          var cellValue = !isNullOrUndefined(field) ? column.valueAccessor(field, row2.data, column) : "";
          var value = !isNullOrUndefined(cellValue) ? cellValue : "";
          if (column.type === "dateonly" && typeof value === "string" && value) {
            var arr = value.split(/[^0-9.]/);
            value = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10));
          }
          var fkData = void 0;
          if (column.isForeignColumn && column.isForeignColumn()) {
            fkData = helper.getFData(value, column);
            value = getValue(column.foreignKeyValue, fkData);
          }
          if (!isNullOrUndefined(value)) {
            var cell = {};
            var idx = index + level + gObj.childGridLevel;
            var excelCellArgs = {
              data: row2.data,
              column,
              foreignKeyData: fkData,
              value,
              style: void 0,
              colSpan: 1,
              cell
            };
            gObj.trigger(excelQueryCellInfo, excelCellArgs);
            if (!isNullOrUndefined(excelCellArgs.image) && !isNullOrUndefined(excelCellArgs.image.base64)) {
              templateRowHeight = this.setImage(excelCellArgs, idx);
              if (excelCellArgs.image.height && excelCellArgs.value !== "") {
                templateRowHeight += 30;
              }
            }
            if (!isNullOrUndefined(excelCellArgs.hyperLink)) {
              excelCellArgs.cell.hyperlink = {
                target: excelCellArgs.hyperLink.target
              };
              excelCellArgs.value = excelCellArgs.hyperLink.displayText || excelCellArgs.value;
            }
            cell = excelCellArgs.cell;
            cell.index = idx;
            cell.value = excelCellArgs.value;
            if (excelCellArgs.data === "" && gObj.childGridLevel && index === 1) {
              var style = {};
              style.hAlign = "left";
              excelCellArgs = {
                style
              };
              cell.colSpan = gObj.getVisibleColumns().length;
              cell.value = this.l10n.getConstant("EmptyRecord");
            }
            if (excelCellArgs.colSpan > 1) {
              cell.colSpan = excelCellArgs.colSpan;
            }
            if (!isNullOrUndefined(excelCellArgs.style)) {
              var styleIndex = this.getColumnStyle(gObj, index + level);
              cell.style = this.mergeOptions(this.styles[parseInt(styleIndex.toString(), 10)], excelCellArgs.style);
            } else {
              cell.style = {
                name: gObj.element.id + "column" + (index + level)
              };
            }
            cells.push(cell);
          }
          index++;
        }
        var excelRow = {
          index: this.rowLength++,
          cells
        };
        if (!isNullOrUndefined(templateRowHeight)) {
          excelRow.height = templateRowHeight;
        }
        if (this.groupedColLength && this.groupedColLength < 8 && level + 1 > 0) {
          excelRow.grouping = {
            outlineLevel: level + 1,
            isCollapsed: true
          };
          excelRows.push(excelRow);
        } else {
          excelRows.push(excelRow);
        }
        if ((row2.isExpand || this.isChild) && (!isNullOrUndefined(gObj.childGrid) || !isNullOrUndefined(gObj.detailTemplate))) {
          if (!isNullOrUndefined(gObj.childGrid)) {
            gObj.isPrinting = true;
            var exportType = !isNullOrUndefined(excelExportProperties) && excelExportProperties.exportType ? excelExportProperties.exportType : "AllPages";
            var returnVal = this.helper.createChildGrid(gObj, row2, exportType, this.gridPool);
            var childGridObj = returnVal.childGrid;
            var element = returnVal.element;
            childGridObj.actionFailure = helper.failureHandler(this.gridPool, childGridObj, this.globalResolve);
            childGridObj.childGridLevel = gObj.childGridLevel + 1;
            var childExportProperties = extend(excelExportProperties, {
              columns: null,
              dataSource: null,
              query: null
            });
            var args = {
              childGrid: childGridObj,
              row: row2,
              exportProperties: childExportProperties
            };
            this.parent.trigger(exportDetailDataBound, args);
            childGridObj.beforeDataBound = this.childGridCell(excelRow, childGridObj, childExportProperties, row2);
            childGridObj.appendTo(element);
          } else {
            var args = {
              parentRow: row2,
              row: excelRow,
              value: {},
              action: "excelexport",
              gridInstance: gObj
            };
            this.parent.trigger(exportDetailTemplate, args);
            excelRow.childRows = this.processDetailTemplate(args);
          }
        }
        gObj.notify(exportRowDataBound, {
          rowObj: row2,
          type: "excel",
          excelRows
        });
      }
      return startIndex;
    };
    ExcelExport2.prototype.processDetailTemplate = function(templateData) {
      var _this = this;
      var rows = [];
      var templateRowHeight;
      var detailIndent = 2;
      var detailCellIndex;
      if (templateData.value.columnHeader || templateData.value.rows) {
        var processCell_1 = function(currentCell, isHeader) {
          var cell = {};
          if (isNullOrUndefined(currentCell.index)) {
            currentCell.index = detailCellIndex;
            detailCellIndex++;
          }
          cell.index = currentCell.index + detailIndent;
          if (!isNullOrUndefined(currentCell.value)) {
            cell.value = currentCell.value;
          }
          if (!isNullOrUndefined(currentCell.colSpan)) {
            cell.colSpan = currentCell.colSpan;
          }
          if (!isNullOrUndefined(currentCell.rowSpan)) {
            cell.rowSpan = currentCell.rowSpan;
          }
          if (isHeader) {
            cell.style = _this.getHeaderThemeStyle(_this.theme);
          } else {
            cell.style = _this.getRecordThemeStyle(_this.theme);
          }
          if (!isNullOrUndefined(currentCell.style)) {
            var cellStyle = {
              fontColor: currentCell.style.fontColor,
              fontName: currentCell.style.fontName,
              fontSize: currentCell.style.fontSize,
              hAlign: currentCell.style.excelHAlign,
              vAlign: currentCell.style.excelVAlign,
              rotation: currentCell.style.excelRotation,
              bold: currentCell.style.bold,
              indent: currentCell.style.indent,
              italic: currentCell.style.italic,
              underline: currentCell.style.underline,
              backColor: currentCell.style.backColor,
              wrapText: currentCell.style.wrapText,
              borders: currentCell.style.excelBorders,
              numberFormat: currentCell.style.excelNumberFormat,
              type: currentCell.style.excelType,
              strikeThrough: currentCell.style.strikeThrough
            };
            cell.style = _this.mergeOptions(cellStyle, cell.style);
          }
          if (!isNullOrUndefined(currentCell.image) && !isNullOrUndefined(currentCell.image.base64)) {
            if (currentCell.rowSpan > 1) {
              _this.setImage(currentCell, cell.index);
            } else {
              templateRowHeight = _this.setImage(currentCell, cell.index);
              if (currentCell.image.height && currentCell.value !== "") {
                templateRowHeight += 30;
              }
            }
          }
          if (!isNullOrUndefined(currentCell.hyperLink)) {
            cell.hyperlink = {
              target: currentCell.hyperLink.target
            };
            cell.value = currentCell.hyperLink.displayText;
          }
          return cell;
        };
        var processRow = function(currentRow, isHeader) {
          var excelDetailCells = [];
          detailCellIndex = 0;
          for (var j = 0; j < currentRow.cells.length; j++) {
            var currentCell = currentRow.cells[parseInt(j.toString(), 10)];
            var detailCell = processCell_1(currentCell, isHeader);
            excelDetailCells.push(detailCell);
          }
          var row3 = {
            index: _this.rowLength++,
            cells: excelDetailCells
          };
          if (!isNullOrUndefined(templateRowHeight)) {
            row3.height = templateRowHeight;
            templateRowHeight = null;
          }
          rows.push(row3);
        };
        if (templateData.value.columnHeader) {
          for (var i = 0; i < templateData.value.columnHeader.length; i++) {
            processRow(templateData.value.columnHeader[parseInt(i.toString(), 10)], true);
          }
        }
        if (templateData.value.rows) {
          for (var i = 0; i < templateData.value.rows.length; i++) {
            processRow(templateData.value.rows[parseInt(i.toString(), 10)]);
          }
        }
      } else if (templateData.value.image) {
        templateRowHeight = this.setImage(templateData.value, detailIndent);
        var row2 = {
          index: this.rowLength++,
          cells: [{
            index: detailIndent,
            style: this.getRecordThemeStyle(this.theme)
          }]
        };
        if (!isNullOrUndefined(templateRowHeight)) {
          row2.height = templateRowHeight;
          templateRowHeight = null;
        }
        rows.push(row2);
      } else if (templateData.value.text) {
        var row2 = {
          index: this.rowLength++,
          cells: [{
            index: detailIndent,
            value: templateData.value.text,
            style: this.getRecordThemeStyle(this.theme)
          }]
        };
        rows.push(row2);
      } else if (templateData.value.hyperLink) {
        var row2 = {
          index: this.rowLength++,
          cells: [{
            index: 2,
            hyperlink: {
              target: templateData.value.hyperLink.target
            },
            value: templateData.value.hyperLink.displayText,
            style: this.getRecordThemeStyle(this.theme)
          }]
        };
        rows.push(row2);
      }
      for (var i = 0; i < rows.length; i++) {
        rows[parseInt(i.toString(), 10)].grouping = {
          outlineLevel: 1,
          isCollapsed: !templateData.parentRow.isExpand,
          isHidden: !templateData.parentRow.isExpand
        };
      }
      return rows;
    };
    ExcelExport2.prototype.setImage = function(args, idx) {
      if (isNullOrUndefined(this.sheet.images)) {
        this.sheet.images = [];
      }
      var excelImage = {
        image: args.image.base64,
        row: this.rowLength,
        column: idx,
        lastRow: this.rowLength,
        lastColumn: idx
      };
      if (args.image.width && args.image.height) {
        excelImage.width = args.image.width;
        excelImage.height = args.image.height;
      }
      this.sheet.images.push(excelImage);
      this.columns[idx - 1].width = args.image.width || this.columns[idx - 1].width;
      return args.image.height || 50;
    };
    ExcelExport2.prototype.childGridCell = function(excelRow, childGridObj, excelExportProps, gRow) {
      var _this = this;
      return function(result) {
        childGridObj.beforeDataBound = null;
        result.cancel = true;
        if (result.result.length === 0) {
          result.result = [""];
        }
        excelRow.childRows = _this.processGridExport(childGridObj, excelExportProps, result);
        var intent = _this.parent.groupSettings.columns.length;
        var rows = excelRow.childRows;
        for (var i = 0; i < rows.length; i++) {
          rows[parseInt(i.toString(), 10)].grouping = {
            outlineLevel: intent + childGridObj.childGridLevel,
            isCollapsed: !gRow.isExpand,
            isHidden: !gRow.isExpand
          };
        }
        childGridObj.destroy();
        detach(childGridObj.element);
        _this.gridPool[childGridObj.id] = true;
        _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);
        return excelRow;
      };
    };
    ExcelExport2.prototype.processAggregates = function(gObj, rec, excelRows, currentViewRecords, indent, byGroup) {
      var summaryModel = new SummaryModelGenerator(gObj);
      var columns = summaryModel.getColumns();
      columns = columns.filter(function(col) {
        return isNullOrUndefined(col.commands) && col.type !== "checkbox";
      });
      if (gObj.aggregates.length && this.parent !== gObj) {
        gObj.aggregateModule.prepareSummaryInfo();
      }
      var data = void 0;
      if (!isNullOrUndefined(currentViewRecords)) {
        data = currentViewRecords;
      } else {
        data = rec;
      }
      if (indent === void 0) {
        indent = 0;
      }
      if (gObj.groupSettings.columns.length > 0 && byGroup) {
        var groupSummaryModel = new GroupSummaryModelGenerator(gObj);
        var groupSummaryRows = groupSummaryModel.generateRows(data, {
          level: data.level
        });
        if (groupSummaryRows.length > 0) {
          excelRows = this.fillAggregates(gObj, groupSummaryRows, indent, excelRows);
        }
      } else {
        indent = gObj.groupSettings.columns.length > 0 && !byGroup ? gObj.groupSettings.columns.length : indent;
        var sRows = summaryModel.generateRows(data, rec.aggregates, null, null, columns);
        if (sRows.length > 0 && !byGroup) {
          indent = gObj.groupSettings.columns.length ? indent - 1 : indent;
          excelRows = this.fillAggregates(gObj, sRows, indent, excelRows);
        }
      }
      return excelRows;
    };
    ExcelExport2.prototype.fillAggregates = function(gObj, rows, indent, excelRows, customIndex) {
      for (var _i = 0, rows_2 = rows; _i < rows_2.length; _i++) {
        var row2 = rows_2[_i];
        var cells = [];
        var isEmpty = true;
        var index = 0;
        for (var _a = 0, _b = row2.cells; _a < _b.length; _a++) {
          var cell = _b[_a];
          var eCell = {};
          var columnsDetails = {};
          if (!isNullOrUndefined(cell.attributes.index)) {
            columnsDetails = this.parent.getColumnByIndex(cell.attributes.index);
          }
          if (cell.cellType === CellType.DetailFooterIntent || columnsDetails.type === "checkbox" || columnsDetails.commands) {
            continue;
          }
          if (cell.visible || this.includeHiddenColumn) {
            index++;
            if (cell.isDataCell) {
              isEmpty = false;
              var footerTemplate = !isNullOrUndefined(cell.column.footerTemplate);
              var groupFooterTemplate = !isNullOrUndefined(cell.column.groupFooterTemplate);
              var groupCaptionTemplate = !isNullOrUndefined(cell.column.groupCaptionTemplate);
              eCell.index = index + indent + gObj.childGridLevel;
              if (footerTemplate) {
                eCell.value = this.getAggreateValue(gObj, CellType.Summary, cell.column.footerTemplate, cell, row2);
              } else if (groupFooterTemplate) {
                eCell.value = this.getAggreateValue(gObj, CellType.GroupSummary, cell.column.groupFooterTemplate, cell, row2);
              } else if (groupCaptionTemplate) {
                eCell.value = this.getAggreateValue(gObj, CellType.CaptionSummary, cell.column.groupCaptionTemplate, cell, row2);
              } else {
                for (var _c = 0, _d = Object.keys(row2.data[cell.column.field]); _c < _d.length; _c++) {
                  var key = _d[_c];
                  if (key === cell.column.type) {
                    if (!isNullOrUndefined(row2.data[cell.column.field].Sum)) {
                      eCell.value = row2.data[cell.column.field][cell.column.field + " - sum"];
                    } else if (!isNullOrUndefined(row2.data[cell.column.field].Average)) {
                      eCell.value = row2.data[cell.column.field][cell.column.field + " - average"];
                    } else if (!isNullOrUndefined(row2.data[cell.column.field].Max)) {
                      eCell.value = row2.data[cell.column.field][cell.column.field + " - max"];
                    } else if (!isNullOrUndefined(row2.data[cell.column.field].Min)) {
                      eCell.value = row2.data[cell.column.field][cell.column.field + " - min"];
                    } else if (!isNullOrUndefined(row2.data[cell.column.field].Count)) {
                      eCell.value = row2.data[cell.column.field][cell.column.field + " - count"];
                    } else if (!isNullOrUndefined(row2.data[cell.column.field].TrueCount)) {
                      eCell.value = row2.data[cell.column.field][cell.column.field + " - truecount"];
                    } else if (!isNullOrUndefined(row2.data[cell.column.field].FalseCount)) {
                      eCell.value = row2.data[cell.column.field][cell.column.field + " - falsecount"];
                    } else if (!isNullOrUndefined(row2.data[cell.column.field].Custom)) {
                      eCell.value = row2.data[cell.column.field].Custom;
                    }
                  }
                }
              }
              eCell.style = this.getCaptionThemeStyle(this.theme);
              this.aggregateStyle(cell.column, eCell.style, cell.column.field);
              var gridCellStyle = cell.attributes.class != null ? cell.attributes.class.toString() : "";
              if (gridCellStyle) {
                eCell.style.hAlign = gridCellStyle.indexOf("e-rightalign") > -1 ? "right" : gridCellStyle.indexOf("e-centeralign") > -1 ? "center" : "left";
              }
              var args = {
                row: row2,
                type: footerTemplate ? "Footer" : groupFooterTemplate ? "GroupFooter" : "GroupCaption",
                style: eCell,
                cell
              };
              this.parent.trigger(excelAggregateQueryCellInfo, args);
              cells.push(eCell);
            } else {
              if (customIndex === void 0) {
                eCell.index = index + indent + gObj.childGridLevel;
                eCell.style = this.getCaptionThemeStyle(this.theme);
                var args = {
                  row: row2,
                  type: !isNullOrUndefined(cell.column.footerTemplate) ? "Footer" : !isNullOrUndefined(cell.column.groupFooterTemplate) ? "GroupFooter" : "GroupCaption",
                  style: eCell,
                  cell
                };
                this.parent.trigger(excelAggregateQueryCellInfo, args);
                cells.push(eCell);
              }
            }
          }
        }
        if (!isNullOrUndefined(customIndex)) {
          excelRows.push({
            index: customIndex,
            cells
          });
        } else {
          var row_1 = {};
          var dummyOutlineLevel = "outlineLevel";
          var dummyGrouping = "grouping";
          if (this.groupedColLength < 8 && this.groupedColLength > 0 && !(gObj.groupSettings.enableLazyLoading && isNullOrUndefined(excelRows[excelRows.length - 1]["" + dummyGrouping]))) {
            var level = excelRows[excelRows.length - 1]["" + dummyGrouping]["" + dummyOutlineLevel];
            var grouping = {
              outlineLevel: level,
              isCollapsed: true
            };
            row_1 = {
              index: this.rowLength++,
              cells,
              grouping
            };
          } else {
            row_1 = {
              index: this.rowLength++,
              cells
            };
          }
          if (!isEmpty) {
            excelRows.push(row_1);
          }
        }
      }
      return excelRows;
    };
    ExcelExport2.prototype.aggregateStyle = function(col, style, field) {
      var column = this.parent.getColumnByField(field);
      if (typeof col.format === "object") {
        var format = col.format;
        style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;
        if (!isNullOrUndefined(format.type)) {
          style.type = format.type.toLowerCase();
        }
      } else {
        style.numberFormat = col.format;
      }
      if (!isNullOrUndefined(column) && isNullOrUndefined(style.type)) {
        style.type = column.type.toLowerCase();
      }
    };
    ExcelExport2.prototype.getAggreateValue = function(gObj, cellType, template, cell, row2) {
      var templateFn = {};
      templateFn[getEnumValue(CellType, cell.cellType)] = compile(template);
      var txt;
      var data = row2.data[cell.column.field ? cell.column.field : cell.column.columnName];
      if ((this.parent.isReact || this.parent.isVue || this.parent.isVue3 || this.parent.isAngular) && !(typeof cell.column.footerTemplate === "string" || typeof cell.column.groupFooterTemplate === "string" || typeof cell.column.groupCaptionTemplate === "string")) {
        txt = data[cell.column.type];
        return !isNullOrUndefined(txt) ? txt : "";
      } else {
        txt = templateFn[getEnumValue(CellType, cell.cellType)](data, this.parent);
        if (this.parent.isVue3 && !isNullOrUndefined(txt[1])) {
          return txt[1].textContent;
        }
      }
      return !isNullOrUndefined(txt[0]) ? txt[0].textContent : "";
    };
    ExcelExport2.prototype.mergeOptions = function(JSON1, JSON2) {
      var result = {};
      var attrname = Object.keys(JSON1);
      for (var index = 0; index < attrname.length; index++) {
        if (attrname[parseInt(index.toString(), 10)] !== "name") {
          result[attrname[parseInt(index.toString(), 10)]] = JSON1[attrname[parseInt(index.toString(), 10)]];
        }
      }
      attrname = Object.keys(JSON2);
      for (var index = 0; index < attrname.length; index++) {
        if (attrname[parseInt(index.toString(), 10)] !== "name") {
          result[attrname[parseInt(index.toString(), 10)]] = JSON2[attrname[parseInt(index.toString(), 10)]];
        }
      }
      return result;
    };
    ExcelExport2.prototype.getColumnStyle = function(gObj, columnIndex) {
      var index = 0;
      for (var _i = 0, _a = this.styles; _i < _a.length; _i++) {
        var style = _a[_i];
        if (style.name === gObj.element.id + "column" + columnIndex) {
          return index;
        }
        index++;
      }
      return void 0;
    };
    ExcelExport2.prototype.headerRotation = function(args) {
      var degree = args.style.rotation;
      if (degree <= 90 && degree >= 0) {
        args.style.hAlign = "Left";
      } else if (degree > 90 && degree <= 180) {
        args.style.hAlign = "Right";
      } else {
        degree = 180;
        args.style.hAlign = "Right";
      }
      args.style.rotation = degree;
    };
    ExcelExport2.prototype.processHeaderContent = function(gObj, headerRow, indent, excelRows) {
      var rowIndex = 1;
      var gridRows = headerRow.rows;
      var gridColumns = headerRow.columns;
      var spannedCells = [];
      if (indent > 0) {
        var index = 0;
        while (index !== indent) {
          this.columns.push({
            index: index + 1,
            width: 30
          });
          index++;
        }
      }
      for (var col = 0; col < gridColumns.length; col++) {
        this.parseStyles(gObj, gridColumns[parseInt(col.toString(), 10)], this.getRecordThemeStyle(this.theme), indent + col + 1);
      }
      var templateRowHeight;
      for (var row2 = 0; row2 < gridRows.length; row2++) {
        var currentCellIndex = 1 + indent;
        var cells = [];
        for (var column = 0; column < gridRows[parseInt(row2.toString(), 10)].cells.length; column++) {
          var style = {};
          var cell = {};
          var gridCell = gridRows[parseInt(row2.toString(), 10)].cells[parseInt(column.toString(), 10)];
          if (gridCell.isSpanned || gridCell.cellType === CellType.HeaderIndent || gridCell.cellType === CellType.DetailHeader) {
            continue;
          }
          var result = {
            contains: true,
            index: 1
          };
          while (result.contains) {
            result = this.getIndex(spannedCells, rowIndex, currentCellIndex);
            currentCellIndex = result.index;
            if (!result.contains) {
              cell.index = result.index + gObj.childGridLevel;
              break;
            }
          }
          if (!isNullOrUndefined(gridCell.rowSpan) && gridCell.rowSpan !== 1) {
            cell.rowSpan = gridCell.rowSpan;
            for (var i = rowIndex; i < gridCell.rowSpan + rowIndex; i++) {
              var spannedCell = {
                rowIndex: 0,
                columnIndex: 0,
                colSpan: 0
              };
              spannedCell.rowIndex = i;
              spannedCell.columnIndex = currentCellIndex;
              spannedCell.colSpan = gridCell.colSpan || 1;
              spannedCells.push(spannedCell);
            }
          }
          if (!isNullOrUndefined(gridCell.colSpan) && gridCell.colSpan !== 1) {
            cell.colSpan = gridCell.colSpan;
            currentCellIndex = currentCellIndex + cell.colSpan - 1;
          }
          cell.value = gridCell.column.headerText;
          style = this.getHeaderThemeStyle(this.theme);
          if (!isNullOrUndefined(gridCell.column.textAlign)) {
            style.hAlign = gridCell.column.textAlign.toLowerCase();
          }
          if (!isNullOrUndefined(gridCell.column.headerTextAlign)) {
            style.hAlign = gridCell.column.headerTextAlign.toLowerCase();
          }
          var excelHeaderCellArgs = {
            cell,
            gridCell,
            style
          };
          gObj.trigger(excelHeaderQueryCellInfo, excelHeaderCellArgs);
          if (gridCell.cellType === CellType.Header && cell.colSpan > 1) {
            currentCellIndex = currentCellIndex + cell.colSpan - 1;
            for (var j = 1; j < cell.colSpan; j++) {
              var nextCellIndex2 = column + j;
              if (nextCellIndex2 < gridRows[parseInt(row2.toString(), 10)].cells.length) {
                gridRows[parseInt(row2.toString(), 10)].cells[parseInt(nextCellIndex2.toString(), 10)].isSpanned = true;
              }
            }
            for (var i = 0; i < spannedCells.length; i++) {
              if (spannedCells[parseInt(i.toString(), 10)].columnIndex === cell.index) {
                spannedCells[parseInt(i.toString(), 10)].colSpan = cell.colSpan;
              }
            }
          }
          if (excelHeaderCellArgs.style.rotation) {
            this.headerRotation(excelHeaderCellArgs);
          }
          if (!isNullOrUndefined(excelHeaderCellArgs.image) && !isNullOrUndefined(excelHeaderCellArgs.image.base64)) {
            templateRowHeight = this.setImage(excelHeaderCellArgs, currentCellIndex);
          }
          if (!isNullOrUndefined(excelHeaderCellArgs.hyperLink)) {
            excelHeaderCellArgs.cell.hyperlink = {
              target: excelHeaderCellArgs.hyperLink.target
            };
            cell.value = excelHeaderCellArgs.hyperLink.displayText || cell.value;
          }
          cell.style = excelHeaderCellArgs.style;
          cells.push(cell);
          currentCellIndex++;
        }
        var excelRow = {
          index: this.rowLength++,
          cells
        };
        if (!isNullOrUndefined(templateRowHeight)) {
          excelRow.height = templateRowHeight;
        }
        excelRows.push(excelRow);
      }
      return excelRows;
    };
    ExcelExport2.prototype.getHeaderThemeStyle = function(theme) {
      var style = {};
      style.fontSize = 12;
      style.borders = {
        color: "#E0E0E0"
      };
      style.bold = true;
      if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.header)) {
        style = this.updateThemeStyle(theme.header, style);
      }
      return style;
    };
    ExcelExport2.prototype.updateThemeStyle = function(themestyle, style) {
      return extend(style, themestyle);
    };
    ExcelExport2.prototype.getCaptionThemeStyle = function(theme) {
      var style = {};
      style.fontSize = 13;
      style.backColor = "#F6F6F6";
      if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.caption)) {
        style = this.updateThemeStyle(theme.caption, style);
      }
      return style;
    };
    ExcelExport2.prototype.getRecordThemeStyle = function(theme) {
      var style = {};
      style.fontSize = 13;
      style.borders = {
        color: "#E0E0E0"
      };
      if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.record)) {
        style = this.updateThemeStyle(theme.record, style);
      }
      return style;
    };
    ExcelExport2.prototype.processExcelHeader = function(header) {
      if (!isNullOrUndefined(header.rows) && (this.expType === "NewSheet" || this.rowLength === 1)) {
        var noRows = void 0;
        if (header.headerRows === void 0) {
          this.rowLength = header.rows.length;
        } else {
          this.rowLength = header.headerRows;
        }
        if (this.rowLength < header.rows.length) {
          noRows = this.rowLength;
        } else {
          noRows = header.rows.length;
        }
        this.rowLength++;
        for (var row2 = 0; row2 < noRows; row2++) {
          var json = header.rows[parseInt(row2.toString(), 10)];
          if (!(json.index !== null && !isNullOrUndefined(json.index))) {
            json.index = row2 + 1;
          }
          this.updatedCellIndex(json);
        }
      }
    };
    ExcelExport2.prototype.updatedCellIndex = function(json) {
      var cellsLength = json.cells.length;
      for (var cellId = 0; cellId < cellsLength; cellId++) {
        var jsonCell = json.cells[parseInt(cellId.toString(), 10)];
        if (!(jsonCell.index !== null && !isNullOrUndefined(jsonCell.index))) {
          jsonCell.index = cellId + 1;
        }
      }
      this.rows.push(json);
    };
    ExcelExport2.prototype.processExcelFooter = function(footer) {
      if (!isNullOrUndefined(footer.rows)) {
        var noRows = void 0;
        if (footer.footerRows === void 0) {
          this.rowLength += footer.rows.length;
        } else {
          if (footer.footerRows > footer.rows.length) {
            this.rowLength += footer.footerRows - footer.rows.length;
            noRows = footer.rows.length;
          } else {
            noRows = footer.footerRows;
          }
        }
        for (var row2 = 0; row2 < noRows; row2++) {
          var json = footer.rows[parseInt(row2.toString(), 10)];
          if (json.index === null || json.index === void 0) {
            json.index = this.rowLength++;
          } else {
            json.index += this.rowLength;
          }
          this.updatedCellIndex(json);
        }
      }
    };
    ExcelExport2.prototype.getIndex = function(spannedCells, rowIndex, columnIndex) {
      for (var _i = 0, spannedCells_1 = spannedCells; _i < spannedCells_1.length; _i++) {
        var spannedCell = spannedCells_1[_i];
        if (spannedCell.rowIndex === rowIndex && spannedCell.columnIndex === columnIndex) {
          columnIndex += spannedCell.colSpan || 1;
          return {
            contains: true,
            index: columnIndex
          };
        }
      }
      return {
        contains: false,
        index: columnIndex
      };
    };
    ExcelExport2.prototype.parseStyles = function(gObj, col, style, index) {
      if (!isNullOrUndefined(col.format)) {
        if (typeof col.format === "object") {
          var format = col.format;
          style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;
          if (!isNullOrUndefined(format.type)) {
            style.type = format.type === "dateonly" ? "date" : format.type.toLowerCase();
          }
        } else {
          style.numberFormat = col.format;
          style.type = col.type === "dateonly" ? "date" : col.type;
        }
      }
      if (!isNullOrUndefined(col.textAlign)) {
        style.hAlign = col.textAlign.toLowerCase();
      }
      if (Object.keys(style).length > 0) {
        style.name = gObj.element.id + "column" + index;
        this.styles.push(style);
      }
      if (!gObj.childGridLevel) {
        if (!isNullOrUndefined(col.width) && col.width !== "auto") {
          this.columns.push({
            index: index + gObj.childGridLevel,
            width: typeof col.width === "number" ? col.width : this.helper.getConvertedWidth(col.width)
          });
        } else {
          this.columns.push({
            index: index + gObj.childGridLevel,
            width: null
          });
        }
      }
    };
    ExcelExport2.prototype.destroy = function() {
    };
    return ExcelExport2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/pdf-export.js
var PdfExport = (
  /** @class */
  function() {
    function PdfExport2(parent) {
      this.hideColumnInclude = false;
      this.currentViewData = false;
      this.customDataSource = false;
      this.isGrouping = false;
      this.headerOnPages = [];
      this.drawPosition = {
        xPosition: 0,
        yPosition: 0
      };
      this.parent = parent;
      this.helper = new ExportHelper(parent);
      this.gridPool = {};
    }
    PdfExport2.prototype.getModuleName = function() {
      return "PdfExport";
    };
    PdfExport2.prototype.init = function(parent) {
      this.exportValueFormatter = new ExportValueFormatter(parent.locale);
      this.pdfDocument = void 0;
      this.hideColumnInclude = false;
      this.currentViewData = false;
      this.parent = parent;
      this.isGrouping = false;
      this.isExporting = true;
      parent.id = getUid("main-grid");
      this.gridPool[parent.id] = false;
      this.pdfPageSettings = new PdfPageSettings();
    };
    PdfExport2.prototype.exportWithData = function(parent, pdfDoc, resolve, returnType, pdfExportProperties, isMultipleExport, reject) {
      var _this = this;
      this.init(parent);
      if (!isNullOrUndefined(pdfDoc)) {
        this.pdfDocument = pdfDoc;
      } else {
        this.pdfDocument = new PdfDocument();
      }
      this.processExport(parent, returnType, pdfExportProperties, isMultipleExport).then(function() {
        _this.isExporting = false;
        parent.trigger(pdfExportComplete, _this.isBlob ? {
          promise: _this.blobPromise
        } : {
          gridInstance: _this.parent
        });
        _this.parent.log("exporting_complete", _this.getModuleName());
        resolve(_this.pdfDocument);
      }).catch(function(e) {
        reject(_this.pdfDocument);
        _this.parent.trigger(actionFailure, e);
      });
    };
    PdfExport2.prototype.Map = function(parent, pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {
      var _this = this;
      this.data = new Data(this.parent);
      this.isBlob = isBlob;
      this.gridPool = {};
      var query = pdfExportProperties && pdfExportProperties.query ? pdfExportProperties.query : new Query();
      if ((parent.childGrid || parent.detailTemplate) && !(!isNullOrUndefined(pdfExportProperties) && pdfExportProperties.hierarchyExportMode === "None")) {
        parent.expandedRows = getPrintGridModel(parent).expandedRows;
      }
      var args = {
        requestType: "beforePdfExport",
        cancel: false,
        headerPageNumbers: [],
        gridDrawPosition: {
          xPosition: 0,
          yPosition: 0
        },
        generateQuery: false
      };
      var gridObject = "gridObject";
      args["" + gridObject] = parent;
      var can = "cancel";
      var generateQuery2 = "generateQuery";
      var header = "headerPageNumbers";
      var drawPos = "gridDrawPosition";
      parent.trigger(beforePdfExport, args);
      if (args["" + can] === true) {
        return new Promise(function(resolve, reject) {
          return resolve();
        });
      }
      if (isExportColumns(pdfExportProperties)) {
        updateColumnTypeForExportColumns(pdfExportProperties, parent);
      }
      if (args["" + generateQuery2]) {
        query = ExportHelper.getQuery(parent, this.data);
      }
      this.headerOnPages = args["" + header];
      this.drawPosition = args["" + drawPos];
      this.parent.log("exporting_begin", this.getModuleName());
      if (!isNullOrUndefined(pdfExportProperties) && !isNullOrUndefined(pdfExportProperties.dataSource)) {
        pdfExportProperties.dataSource = pdfExportProperties.dataSource instanceof DataManager ? pdfExportProperties.dataSource : new DataManager(pdfExportProperties.dataSource);
        if (isNullOrUndefined(query.isCountRequired) || parent.aggregates) {
          query.isCountRequired = true;
        }
        return new Promise(function(resolve, reject) {
          pdfExportProperties.dataSource.executeQuery(query).then(function(returnType) {
            _this.exportWithData(parent, pdfDoc, resolve, returnType, pdfExportProperties, isMultipleExport, reject);
          });
        });
      } else if (!isNullOrUndefined(pdfExportProperties) && pdfExportProperties.exportType === "CurrentPage" && !(this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length && !this.parent.getDataModule().isRemote())) {
        return new Promise(function(resolve, reject) {
          _this.exportWithData(parent, pdfDoc, resolve, _this.parent.getCurrentViewRecords(), pdfExportProperties, isMultipleExport, reject);
        });
      } else {
        var allPromise_1 = [];
        var query_1 = ExportHelper.getQuery(parent, this.data);
        if (this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length && !this.parent.getDataModule().isRemote()) {
          if (isNullOrUndefined(pdfExportProperties)) {
            pdfExportProperties = {
              hierarchyExportMode: "All"
            };
          }
          pdfExportProperties.hierarchyExportMode = pdfExportProperties.hierarchyExportMode === "None" ? "None" : "All";
          if (pdfExportProperties.hierarchyExportMode === "All") {
            query_1.lazyLoad = [];
          }
        }
        allPromise_1.push(this.data.getData({}, query_1));
        allPromise_1.push(this.helper.getColumnData(parent));
        return new Promise(function(resolve, reject) {
          Promise.all(allPromise_1).then(function(e) {
            _this.init(parent);
            if (!isNullOrUndefined(pdfDoc)) {
              _this.pdfDocument = pdfDoc["document"];
            } else {
              _this.pdfDocument = new PdfDocument();
            }
            _this.processExport(parent, e[0], pdfExportProperties, isMultipleExport, pdfDoc).then(function(results) {
              _this.isExporting = false;
              parent.trigger(pdfExportComplete, _this.isBlob ? {
                promise: _this.blobPromise
              } : {
                gridInstance: _this.parent
              });
              _this.parent.log("exporting_complete", _this.getModuleName());
              if (pdfExportProperties && pdfExportProperties.multipleExport && pdfExportProperties.multipleExport.type === "AppendToPage") {
                resolve(results);
              } else {
                resolve(_this.pdfDocument);
              }
            }).catch(function(e2) {
              reject(_this.pdfDocument);
              _this.parent.trigger(actionFailure, e2);
            });
          });
        });
      }
    };
    PdfExport2.prototype.processExport = function(gObj, returnType, pdfExportProperties, isMultipleExport, pdfDoc) {
      var _this = this;
      var section = !(pdfDoc && pdfExportProperties && pdfExportProperties.multipleExport && pdfExportProperties.multipleExport.type === "AppendToPage") ? this.pdfDocument.sections.add() : null;
      var pdfGrid;
      this.processSectionExportProperties(section, pdfExportProperties);
      var pdfPage = pdfDoc && pdfExportProperties && pdfExportProperties.multipleExport && pdfExportProperties.multipleExport.type === "AppendToPage" ? pdfDoc["result"].page : section.pages.add();
      return new Promise(function(resolve, reject) {
        pdfGrid = _this.processGridExport(gObj, returnType, pdfExportProperties);
        _this.globalResolve = resolve;
        _this.gridPool[gObj.id] = true;
        _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);
      }).then(function() {
        var xPosition = _this.drawPosition["xPosition"];
        var yPosition;
        if (pdfDoc && pdfExportProperties && pdfExportProperties.multipleExport && pdfExportProperties.multipleExport.type === "AppendToPage") {
          yPosition = pdfDoc["result"].bounds.y + pdfDoc["result"].bounds.height;
          if (pdfExportProperties.multipleExport.blankSpace) {
            yPosition = pdfDoc["result"].bounds.y + pdfDoc["result"].bounds.height + pdfExportProperties.multipleExport.blankSpace;
          }
        } else {
          yPosition = _this.drawPosition["yPosition"];
        }
        var result;
        if (isMultipleExport) {
          var layoutFormat = new PdfGridLayoutFormat();
          layoutFormat.layout = PdfLayoutType.Paginate;
          layoutFormat.break = PdfLayoutBreakType.FitPage;
          layoutFormat.paginateBounds = new RectangleF(0, 0, pdfPage.getClientSize().width, pdfPage.getClientSize().height);
          result = pdfGrid.draw(pdfPage, xPosition, yPosition, layoutFormat);
        } else {
          result = pdfGrid.draw(pdfPage, xPosition, yPosition);
        }
        _this.drawHeader(pdfExportProperties);
        if (!isMultipleExport) {
          if (!_this.isBlob) {
            if (!isNullOrUndefined(pdfExportProperties) && pdfExportProperties.fileName) {
              _this.pdfDocument.save(pdfExportProperties.fileName);
            } else {
              _this.pdfDocument.save("Export.pdf");
            }
          } else {
            _this.blobPromise = _this.pdfDocument.save();
          }
          _this.pdfDocument.destroy();
          delete gObj.expandedRows;
        }
        if (pdfExportProperties && pdfExportProperties.multipleExport && pdfExportProperties.multipleExport.type === "AppendToPage") {
          return {
            document: _this.pdfDocument,
            result
          };
        } else {
          return _this.pdfDocument;
        }
      });
    };
    PdfExport2.prototype.processSectionExportProperties = function(section, pdfExportProperties) {
      if (!isNullOrUndefined(section) && !isNullOrUndefined(pdfExportProperties) && (!isNullOrUndefined(pdfExportProperties.pageOrientation) || !isNullOrUndefined(pdfExportProperties.pageSize))) {
        this.pdfPageSettings.orientation = pdfExportProperties.pageOrientation === "Landscape" ? PdfPageOrientation.Landscape : PdfPageOrientation.Portrait;
        this.pdfPageSettings.size = this.getPageSize(pdfExportProperties.pageSize);
        section.setPageSettings(this.pdfPageSettings);
      }
      return section;
    };
    PdfExport2.prototype.processGridExport = function(gObj, returnType, pdfExportProperties) {
      var allowHorizontalOverflow = true;
      if (!isNullOrUndefined(pdfExportProperties)) {
        this.gridTheme = pdfExportProperties.theme;
        allowHorizontalOverflow = isNullOrUndefined(pdfExportProperties.allowHorizontalOverflow) ? true : pdfExportProperties.allowHorizontalOverflow;
      }
      var helper = new ExportHelper(gObj, this.helper.getForeignKeyData());
      var dataSource = this.processExportProperties(pdfExportProperties, returnType.result);
      var columns = isExportColumns(pdfExportProperties) ? prepareColumns(pdfExportProperties.columns, gObj.enableColumnVirtualization) : helper.getGridExportColumns(gObj.columns);
      columns = columns.filter(function(columns2) {
        return isNullOrUndefined(columns2.commands);
      });
      var isGrouping = false;
      if (gObj.groupSettings.columns.length) {
        isGrouping = true;
      }
      if ((gObj.childGrid || gObj.detailTemplate) && !isNullOrUndefined(pdfExportProperties)) {
        gObj.hierarchyPrintMode = pdfExportProperties.hierarchyExportMode || "Expanded";
      }
      var pdfGrid = new PdfGrid();
      var headerThemeStyle = this.getHeaderThemeStyle();
      var border = headerThemeStyle.border;
      var headerFont = headerThemeStyle.font;
      var headerBrush = headerThemeStyle.brush;
      var returnValue = helper.getHeaders(columns, this.hideColumnInclude);
      var gridColumns = returnValue.columns;
      pdfGrid = this.processGridHeaders(gObj.groupSettings.columns.length, pdfGrid, returnValue.rows, gridColumns, border, headerFont, headerBrush, gObj, allowHorizontalOverflow, columns);
      this.setColumnProperties(gridColumns, pdfGrid, helper, gObj, allowHorizontalOverflow);
      var captionThemeStyle = this.getSummaryCaptionThemeStyle();
      if (!isNullOrUndefined(dataSource) && dataSource.length) {
        if (isGrouping) {
          if (!isNullOrUndefined(captionThemeStyle.border)) {
            border = captionThemeStyle.border;
          }
          this.processGroupedRecords(pdfGrid, dataSource, gridColumns, gObj, border, 0, captionThemeStyle.font, captionThemeStyle.brush, captionThemeStyle.backgroundBrush, returnType, pdfExportProperties, helper, 0);
        } else {
          this.processRecord(border, gridColumns, gObj, dataSource, pdfGrid, 0, pdfExportProperties, helper, 0);
        }
        if (!isNullOrUndefined(returnType.aggregates)) {
          var summaryModel = new SummaryModelGenerator(gObj);
          var sRows = void 0;
          var column = summaryModel.getColumns();
          column = column.filter(function(col) {
            return isNullOrUndefined(col.commands) && col.type !== "checkbox";
          });
          if (gObj.aggregates.length && this.parent !== gObj) {
            gObj.aggregateModule.prepareSummaryInfo();
          }
          if (this.customDataSource) {
            sRows = summaryModel.generateRows(dataSource, returnType.aggregates, null, null, column);
          } else if (this.currentViewData) {
            sRows = summaryModel.generateRows(this.parent.getCurrentViewRecords(), returnType.aggregates);
          } else if (isGrouping) {
            sRows = summaryModel.generateRows(dataSource.records, returnType.aggregates);
          } else {
            sRows = summaryModel.generateRows(returnType.result, returnType.aggregates, null, null, column);
          }
          this.processAggregates(sRows, pdfGrid, border, captionThemeStyle.font, captionThemeStyle.brush, captionThemeStyle.backgroundBrush, false, null, null, null, isGrouping ? false : true);
        }
      } else {
        var row2 = pdfGrid.rows.addRow();
        row2.style.setBorder(border);
      }
      return pdfGrid;
    };
    PdfExport2.prototype.getSummaryCaptionThemeStyle = function() {
      if (!isNullOrUndefined(this.gridTheme) && !isNullOrUndefined(this.gridTheme.caption)) {
        var fontSize = !isNullOrUndefined(this.gridTheme.caption.fontSize) ? this.gridTheme.caption.fontSize : 9.75;
        var fontFamily = !isNullOrUndefined(this.gridTheme.caption.fontName) ? this.getFontFamily(this.gridTheme.caption.fontName) : PdfFontFamily.Helvetica;
        var fontStyle = this.getFontStyle(this.gridTheme.caption);
        var pdfColor = new PdfColor(0, 0, 0);
        if (!isNullOrUndefined(this.gridTheme.caption.fontColor)) {
          var penBrushColor = this.hexToRgb(this.gridTheme.caption.fontColor);
          pdfColor = new PdfColor(penBrushColor.r, penBrushColor.g, penBrushColor.b);
        }
        var borderCaption = this.gridTheme.caption.border ? this.getBorderStyle(this.gridTheme.caption.border) : null;
        var font = new PdfStandardFont(fontFamily, fontSize, fontStyle);
        if (!isNullOrUndefined(this.gridTheme.caption.font)) {
          font = this.gridTheme.caption.font;
        }
        return {
          font,
          brush: new PdfSolidBrush(pdfColor),
          backgroundBrush: new PdfSolidBrush(new PdfColor(246, 246, 246)),
          border: borderCaption
        };
      } else {
        return {
          font: new PdfStandardFont(PdfFontFamily.Helvetica, 9.75),
          brush: new PdfSolidBrush(new PdfColor(0, 0, 0)),
          backgroundBrush: new PdfSolidBrush(new PdfColor(246, 246, 246))
        };
      }
    };
    PdfExport2.prototype.getGridPdfFont = function(args) {
      var fontFamily = "fontFamily";
      var fontSize = "fontSize";
      var fontStyle = "fontStyle";
      var isTrueType = "isTrueType";
      var style = 0;
      if (args.header && args.header.font) {
        var headerFont = args.header.font["" + fontFamily];
        var headerSize = args.header.font["" + fontSize];
        var headerStyle = args.header.font["" + fontStyle];
        style = isNullOrUndefined(PdfFontStyle["" + headerStyle]) ? 0 : PdfFontStyle["" + headerStyle];
        if (args.header.font["" + isTrueType]) {
          args.header.font = new PdfTrueTypeFont(headerFont, headerSize, style);
        } else {
          var fontFamily_1 = !isNullOrUndefined(headerFont) ? this.getFontFamily(headerFont) : PdfFontFamily.Helvetica;
          args.header.font = new PdfStandardFont(fontFamily_1, headerSize, style);
        }
      }
      if (args.caption && args.caption.font) {
        var captionFont = args.caption.font["" + fontFamily];
        var captionSize = args.caption.font["" + fontSize];
        var captionStyle = args.caption.font["" + fontStyle];
        style = isNullOrUndefined(PdfFontStyle["" + captionStyle]) ? 0 : PdfFontStyle["" + captionStyle];
        if (args.caption.font["" + isTrueType]) {
          args.caption.font = new PdfTrueTypeFont(captionFont, captionSize, style);
        } else {
          var fontFamily_2 = !isNullOrUndefined(captionFont) ? this.getFontFamily(captionFont) : PdfFontFamily.Helvetica;
          args.caption.font = new PdfStandardFont(fontFamily_2, captionSize, style);
        }
      }
      if (args.record && args.record.font) {
        var recordFont = args.record.font["" + fontFamily];
        var recordSize = args.record.font["" + fontSize];
        var recordStyle = args.record.font["" + fontStyle];
        style = isNullOrUndefined(PdfFontStyle["" + recordStyle]) ? 0 : PdfFontStyle["" + recordStyle];
        if (args.record.font["" + isTrueType]) {
          args.record.font = new PdfTrueTypeFont(recordFont, recordSize, style);
        } else {
          var fontFamily_3 = !isNullOrUndefined(recordFont) ? this.getFontFamily(recordFont) : PdfFontFamily.Helvetica;
          args.record.font = new PdfStandardFont(fontFamily_3, recordSize, style);
        }
      }
    };
    PdfExport2.prototype.getHeaderThemeStyle = function() {
      var border = new PdfBorders();
      if (!isNullOrUndefined(this.gridTheme) && !isNullOrUndefined(this.gridTheme.header)) {
        var fontFamily = !isNullOrUndefined(this.gridTheme.header.fontName) ? this.getFontFamily(this.gridTheme.header.fontName) : PdfFontFamily.Helvetica;
        var fontStyle = this.getFontStyle(this.gridTheme.header);
        var fontSize = !isNullOrUndefined(this.gridTheme.header.fontSize) ? this.gridTheme.header.fontSize : 10.5;
        var pdfColor = new PdfColor();
        if (!isNullOrUndefined(this.gridTheme.header.fontColor)) {
          var penBrushColor = this.hexToRgb(this.gridTheme.header.fontColor);
          pdfColor = new PdfColor(penBrushColor.r, penBrushColor.g, penBrushColor.b);
        }
        var font = new PdfStandardFont(fontFamily, fontSize, fontStyle);
        if (!isNullOrUndefined(this.gridTheme.header.font)) {
          font = this.gridTheme.header.font;
        }
        return {
          border: this.getBorderStyle(this.gridTheme.header.border),
          font,
          brush: new PdfSolidBrush(pdfColor)
        };
      } else {
        border.all = new PdfPen(new PdfColor(234, 234, 234));
        return {
          border,
          font: new PdfStandardFont(PdfFontFamily.Helvetica, 10.5),
          brush: new PdfSolidBrush(new PdfColor(102, 102, 102))
        };
      }
    };
    PdfExport2.prototype.processGroupedRecords = function(pdfGrid, dataSource, gridColumns, gObj, border, level, font, brush, backgroundBrush, returnType, pdfExportProperties, helper, index) {
      var _this = this;
      var groupIndex = level;
      var _loop_1 = function(dataSourceItems2) {
        var row2 = pdfGrid.rows.addRow();
        var col = gObj.getColumnByField(dataSourceItems2.field);
        var args = {
          value: dataSourceItems2.key,
          column: col,
          style: void 0,
          isForeignKey: col.isForeignColumn()
        };
        var value = gObj.getColumnByField(dataSourceItems2.field).headerText + ": " + (!col.enableGroupByFormat ? this_1.exportValueFormatter.formatCellValue(args) : dataSourceItems2.key) + " - " + dataSourceItems2.count + (dataSource.count > 1 ? " items" : " item");
        var cArgs = {
          captionText: value,
          type: "PDF",
          data: dataSourceItems2,
          style: void 0
        };
        this_1.parent.trigger(exportGroupCaption, cArgs, function(cArgs2) {
          row2.cells.getCell(groupIndex).value = cArgs2.captionText;
          row2.cells.getCell(groupIndex).style.stringFormat = new PdfStringFormat(PdfTextAlignment.Left);
          row2.style.setBorder(border);
          row2.style.setFont(font);
          row2.style.setTextBrush(brush);
          row2.style.setBackgroundBrush(backgroundBrush);
          if (!isNullOrUndefined(cArgs2.style)) {
            _this.processCellStyle(row2.cells.getCell(groupIndex), cArgs2);
          }
          var sRows;
          var captionSummaryModel = new CaptionSummaryModelGenerator(gObj);
          if (!isNullOrUndefined(dataSourceItems2.items.records)) {
            sRows = captionSummaryModel.generateRows(dataSourceItems2.items.records, dataSourceItems2);
          } else {
            sRows = captionSummaryModel.generateRows(dataSourceItems2.items, dataSourceItems2);
          }
          if (!isNullOrUndefined(sRows) && sRows.length === 0) {
            row2.cells.getCell(groupIndex + 1).columnSpan = pdfGrid.columns.count - (groupIndex + 1);
          }
          if (!isNullOrUndefined(dataSource.childLevels) && dataSource.childLevels > 0) {
            _this.processAggregates(sRows, pdfGrid, border, font, brush, backgroundBrush, true, row2, groupIndex, null, null, gObj);
            _this.processGroupedRecords(pdfGrid, dataSourceItems2.items, gridColumns, gObj, border, groupIndex + 1, font, brush, backgroundBrush, returnType, pdfExportProperties, helper, index);
            index = _this.rowIndex;
            var groupSummaryModel = new GroupSummaryModelGenerator(gObj);
            sRows = groupSummaryModel.generateRows(dataSourceItems2.items.records, dataSourceItems2);
            _this.processAggregates(sRows, pdfGrid, border, font, brush, backgroundBrush, false);
          } else {
            _this.processAggregates(sRows, pdfGrid, border, font, brush, backgroundBrush, true, row2, groupIndex, null, null, gObj);
            index = _this.processRecord(border, gridColumns, gObj, dataSourceItems2.items, pdfGrid, groupIndex + 1, pdfExportProperties, helper, index);
            var groupSummaryModel = new GroupSummaryModelGenerator(gObj);
            sRows = groupSummaryModel.generateRows(dataSourceItems2.items, dataSourceItems2);
            var isGroupedFooter = true;
            _this.processAggregates(sRows, pdfGrid, border, font, brush, backgroundBrush, false, null, null, isGroupedFooter, null, gObj);
          }
        });
      };
      var this_1 = this;
      for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {
        var dataSourceItems = dataSource_1[_i];
        _loop_1(dataSourceItems);
      }
    };
    PdfExport2.prototype.processGridHeaders = function(childLevels, pdfGrid, rows, gridColumn, border, headerFont, headerBrush, grid, allowHorizontalOverflow, eCols) {
      var _this = this;
      var columnCount = gridColumn.length + childLevels;
      var depth = measureColumnDepth(eCols);
      var cols = eCols;
      var index = 0;
      var rowNumber = [];
      for (var i = 0; i < rows.length; i++) {
        rowNumber[parseInt(i.toString(), 10)] = 0;
      }
      if (grid.groupSettings.columns.length) {
        index = grid.groupSettings.columns.length - 1;
        columnCount = columnCount - 1;
      }
      pdfGrid.columns.add(columnCount);
      pdfGrid.style.cellPadding = new PdfPaddings(5.76, 5.76, 0.5, 0.5);
      pdfGrid.headers.add(rows.length);
      var applyTextAndSpan = function(rowIdx, colIdx, col, rowSpan, colSpan) {
        var gridHeader2 = pdfGrid.headers.getHeader(rowIdx);
        var pdfCell = gridHeader2.cells.getCell(colIdx);
        var cell = rows[parseInt(rowIdx.toString(), 10)].cells[grid.groupSettings.columns.length ? colIdx : rowNumber[parseInt(rowIdx.toString(), 10)]];
        rowNumber[parseInt(rowIdx.toString(), 10)] = rowNumber[parseInt(rowIdx.toString(), 10)] + 1;
        if (!isNullOrUndefined(col.headerTextAlign)) {
          pdfCell.style.stringFormat = _this.getHorizontalAlignment(col.headerTextAlign);
        }
        if (rowSpan > 0) {
          pdfCell.rowSpan = rowSpan;
          pdfCell.style.stringFormat = _this.getVerticalAlignment("Bottom", pdfCell.style.stringFormat, col.textAlign);
        }
        if (colSpan > 0) {
          pdfCell.columnSpan = colSpan;
        }
        gridHeader2.style.setBorder(border);
        gridHeader2.style.setFont(headerFont);
        gridHeader2.style.setTextBrush(headerBrush);
        pdfCell.value = col.headerText;
        if (!isNullOrUndefined(cell) && (cell.cellType === CellType.HeaderIndent || cell.cellType === CellType.DetailHeader)) {
          pdfCell.value = "";
          pdfCell.width = 20;
        }
        var args = {
          cell: pdfCell,
          gridCell: cell,
          style: pdfCell.style
        };
        _this.parent.trigger(pdfHeaderQueryCellInfo, args);
        var evtArgs = args;
        var setCellBorder = args.style.borders;
        var setCellFont = args.style.font;
        var setHeaderBrush = args.style.textBrush;
        if (!isNullOrUndefined(setCellBorder)) {
          gridHeader2.style.setBorder(setCellBorder);
        }
        if (!isNullOrUndefined(setCellFont)) {
          gridHeader2.style.setFont(setCellFont);
        }
        if (!isNullOrUndefined(setHeaderBrush)) {
          gridHeader2.style.setTextBrush(setHeaderBrush);
        }
        if (!isNullOrUndefined(evtArgs.style.verticalAlignment)) {
          pdfCell.style.stringFormat = _this.getVerticalAlignment(evtArgs.style.verticalAlignment, pdfCell.style.stringFormat);
        }
        if (!isNullOrUndefined(evtArgs.image)) {
          pdfCell.value = new PdfBitmap(evtArgs.image.base64);
        }
        if (!isNullOrUndefined(evtArgs.hyperLink)) {
          pdfCell.value = _this.setHyperLink(evtArgs);
        }
      };
      var recuHeader = function(cols2, depth2, spanCnt, colIndex, rowIndex, isRoot) {
        var cidx = 0;
        for (var i2 = 0; i2 < cols2.length; i2++) {
          if (isRoot) {
            cidx = cidx + spanCnt + (i2 === 0 ? 0 : -1);
            colIndex = cidx;
            spanCnt = 0;
          }
          if (!isRoot && !cols2[parseInt(i2.toString(), 10)].visible) {
            colIndex = colIndex - 1;
          }
          if (cols2[parseInt(i2.toString(), 10)].columns && cols2[parseInt(i2.toString(), 10)].columns.length) {
            var newSpanCnt = recuHeader(cols2[parseInt(i2.toString(), 10)].columns, depth2 - 1, 0, i2 + colIndex, rowIndex + 1, false);
            applyTextAndSpan(rowIndex, i2 + colIndex + index, cols2[parseInt(i2.toString(), 10)], 0, newSpanCnt);
            spanCnt = spanCnt + newSpanCnt;
            colIndex = colIndex + newSpanCnt - 1;
          } else if (cols2[parseInt(i2.toString(), 10)].visible || _this.hideColumnInclude) {
            spanCnt++;
            applyTextAndSpan(rowIndex, i2 + colIndex + index, cols2[parseInt(i2.toString(), 10)], depth2, 0);
          }
        }
        return spanCnt;
      };
      recuHeader(cols, depth, 0, 0, 0, true);
      if (pdfGrid.columns.count >= 6 && allowHorizontalOverflow) {
        pdfGrid.style.allowHorizontalOverflow = true;
      }
      return pdfGrid;
    };
    PdfExport2.prototype.processExportProperties = function(pdfExportProperties, dataSource) {
      if (!isNullOrUndefined(pdfExportProperties)) {
        if (!isNullOrUndefined(pdfExportProperties.theme)) {
          this.gridTheme = pdfExportProperties.theme;
        }
        var clientSize = this.pdfPageSettings.size;
        this.drawHeader(pdfExportProperties);
        if (!isNullOrUndefined(pdfExportProperties.footer)) {
          var footer = pdfExportProperties.footer;
          var position = new PointF(0, clientSize.width - 80 - footer.fromBottom * 0.75);
          var size = new SizeF(clientSize.width - 80, footer.height * 0.75);
          var bounds = new RectangleF(position, size);
          this.pdfDocument.template.bottom = this.drawPageTemplate(new PdfPageTemplateElement(bounds), footer);
        }
        if (!isNullOrUndefined(pdfExportProperties.includeHiddenColumn) && !this.isGrouping) {
          this.hideColumnInclude = pdfExportProperties.includeHiddenColumn;
        }
        if (!isNullOrUndefined(pdfExportProperties.dataSource)) {
          this.customDataSource = true;
          this.currentViewData = false;
        } else if (!isNullOrUndefined(pdfExportProperties.exportType)) {
          if (pdfExportProperties.exportType === "CurrentPage") {
            dataSource = this.parent.groupSettings && this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length && !this.parent.getDataModule().isRemote() ? dataSource : this.parent.currentViewData;
            this.currentViewData = true;
            this.customDataSource = false;
          } else {
            this.currentViewData = false;
            this.customDataSource = false;
          }
        } else {
          this.currentViewData = false;
          this.customDataSource = false;
        }
      } else {
        this.currentViewData = false;
        this.customDataSource = false;
      }
      return dataSource;
    };
    PdfExport2.prototype.drawHeader = function(pdfExportProperties) {
      var _this = this;
      var clientSize = this.pdfPageSettings.size;
      if (!isNullOrUndefined(pdfExportProperties) && !isNullOrUndefined(pdfExportProperties.header)) {
        var header = pdfExportProperties.header;
        var position = new PointF(0, header.fromTop);
        var size = new SizeF(clientSize.width - 80, header.height * 0.75);
        var bounds = new RectangleF(position, size);
        if (!this.headerOnPages.length) {
          this.pdfDocument.template.top = this.drawPageTemplate(new PdfPageTemplateElement(bounds), header);
        } else {
          var headerTemplate_1 = this.drawPageTemplate(new PdfPageTemplateElement(bounds), header);
          this.headerOnPages.filter(function(index) {
            if (index - 1 >= 0 && index - 1 <= _this.pdfDocument.pages.count - 1) {
              _this.pdfDocument.pages.getPageByIndex(index - 1).graphics.drawPdfTemplate(headerTemplate_1.template, new PointF(0, 0));
            }
          });
        }
      }
    };
    PdfExport2.prototype.drawPageTemplate = function(template, element) {
      for (var _i = 0, _a = element.contents; _i < _a.length; _i++) {
        var content2 = _a[_i];
        this.processContentValidation(content2);
        switch (content2.type) {
          case "Text":
            if (content2.value === "" || content2.value === void 0 || content2.value === null || typeof content2.value !== "string") {
              throw new Error("please enter the valid input value in text content...");
            }
            this.drawText(template, content2);
            break;
          case "PageNumber":
            this.drawPageNumber(template, content2);
            break;
          case "Image":
            if (content2.src === void 0 || content2.src === null || content2.src === "") {
              throw new Error("please enter the valid base64 string in image content...");
            }
            this.drawImage(template, content2);
            break;
          case "Line":
            this.drawLine(template, content2);
            break;
          default:
            throw new Error("Please set valid content type...");
        }
      }
      return template;
    };
    PdfExport2.prototype.processContentValidation = function(content2) {
      if (content2.type === void 0 || content2.type === null) {
        throw new Error("please set valid content type...");
      } else {
        if (content2.type === "Line") {
          if (content2.points === void 0 || content2.points === null) {
            throw new Error("please enter valid points in " + content2.type + " content...");
          } else {
            if (content2.points.x1 === void 0 || content2.points.x1 === null || typeof content2.points.x1 !== "number") {
              throw new Error("please enter valid x1 co-ordinate in " + content2.type + " points...");
            }
            if (content2.points.y1 === void 0 || content2.points.y1 === null || typeof content2.points.y1 !== "number") {
              throw new Error("please enter valid y1 co-ordinate in " + content2.type + " points...");
            }
            if (content2.points.x2 === void 0 || content2.points.x2 === null || typeof content2.points.x2 !== "number") {
              throw new Error("please enter valid x2 co-ordinate in " + content2.type + " points...");
            }
            if (content2.points.y2 === void 0 || content2.points.y2 === null || typeof content2.points.y2 !== "number") {
              throw new Error("please enter valid y2 co-ordinate in " + content2.type + " points...");
            }
          }
        } else {
          if (content2.position === void 0 || content2.position === null) {
            throw new Error("please enter valid position in " + content2.type + " content...");
          } else {
            if (content2.position.x === void 0 || content2.position.x === null || typeof content2.position.x !== "number") {
              throw new Error("please enter valid x co-ordinate in " + content2.type + " position...");
            }
            if (content2.position.y === void 0 || content2.position.y === null || typeof content2.position.y !== "number") {
              throw new Error("please enter valid y co-ordinate in " + content2.type + " position...");
            }
          }
        }
      }
    };
    PdfExport2.prototype.drawText = function(pageTemplate, content2) {
      var font = this.getFont(content2);
      var brush = this.getBrushFromContent(content2);
      var pen = null;
      if (!isNullOrUndefined(content2.style.textPenColor)) {
        var penColor = this.hexToRgb(content2.style.textPenColor);
        pen = new PdfPen(new PdfColor(penColor.r, penColor.g, penColor.b));
      }
      if (brush == null && pen == null) {
        brush = new PdfSolidBrush(new PdfColor(0, 0, 0));
      }
      var value = content2.value.toString();
      var x = content2.position.x * 0.75;
      var y = content2.position.y * 0.75;
      var format = new PdfStringFormat();
      if (!isNullOrUndefined(content2.style.stringFormat)) {
        format.alignment = content2.style.stringFormat.alignment;
      }
      var result = this.setContentFormat(content2, format);
      if (result !== null && !isNullOrUndefined(result.format) && !isNullOrUndefined(result.size)) {
        pageTemplate.graphics.drawString(value, font, pen, brush, x, y, result.size.width, result.size.height, result.format);
      } else {
        pageTemplate.graphics.drawString(value, font, pen, brush, x, y, format);
      }
    };
    PdfExport2.prototype.drawPageNumber = function(documentHeader, content2) {
      var font = this.getFont(content2);
      var brush = null;
      if (!isNullOrUndefined(content2.style.textBrushColor)) {
        var brushColor = this.hexToRgb(content2.style.textBrushColor);
        brush = new PdfSolidBrush(new PdfColor(brushColor.r, brushColor.g, brushColor.b));
      } else {
        brush = new PdfSolidBrush(new PdfColor(0, 0, 0));
      }
      var pageNumber = new PdfPageNumberField(font, brush);
      pageNumber.numberStyle = this.getPageNumberStyle(content2.pageNumberType);
      var compositeField;
      var format;
      if (!isNullOrUndefined(content2.format)) {
        var total = "$total";
        var current = "$current";
        if (content2.format.indexOf(total) !== -1 && content2.format.indexOf(current) !== -1) {
          var pageCount = new PdfPageCountField(font);
          pageCount.numberStyle = this.getPageNumberStyle(content2.pageNumberType);
          if (content2.format.indexOf(total) > content2.format.indexOf(current)) {
            format = content2.format.replace(current, "0");
            format = format.replace(total, "1");
          } else {
            format = content2.format.replace(current, "1");
            format = format.replace(total, "0");
          }
          compositeField = new PdfCompositeField(font, brush, format, pageNumber, pageCount);
        } else if (content2.format.indexOf(current) !== -1 && content2.format.indexOf(total) === -1) {
          format = content2.format.replace(current, "0");
          compositeField = new PdfCompositeField(font, brush, format, pageNumber);
        } else {
          var pageCount = new PdfPageCountField(font);
          format = content2.format.replace(total, "0");
          compositeField = new PdfCompositeField(font, brush, format, pageCount);
        }
      } else {
        format = "{0}";
        compositeField = new PdfCompositeField(font, brush, format, pageNumber);
      }
      var x = content2.position.x * 0.75;
      var y = content2.position.y * 0.75;
      var result = this.setContentFormat(content2, compositeField.stringFormat);
      if (result !== null && !isNullOrUndefined(result.format) && !isNullOrUndefined(result.size)) {
        compositeField.stringFormat = result.format;
        compositeField.bounds = new RectangleF(x, y, result.size.width, result.size.height);
      }
      compositeField.draw(documentHeader.graphics, x, y);
    };
    PdfExport2.prototype.drawImage = function(documentHeader, content2) {
      var x = content2.position.x * 0.75;
      var y = content2.position.y * 0.75;
      var width = !isNullOrUndefined(content2.size) ? content2.size.width * 0.75 : void 0;
      var height = !isNullOrUndefined(content2.size) ? content2.size.height * 0.75 : void 0;
      var image = new PdfBitmap(content2.src);
      if (!isNullOrUndefined(width)) {
        documentHeader.graphics.drawImage(image, x, y, width, height);
      } else {
        documentHeader.graphics.drawImage(image, x, y);
      }
    };
    PdfExport2.prototype.drawLine = function(documentHeader, content2) {
      var x1 = content2.points.x1 * 0.75;
      var y1 = content2.points.y1 * 0.75;
      var x2 = content2.points.x2 * 0.75;
      var y2 = content2.points.y2 * 0.75;
      var pen = this.getPenFromContent(content2);
      if (!isNullOrUndefined(content2.style) && content2.style !== null) {
        if (!isNullOrUndefined(content2.style.penSize) && content2.style.penSize !== null && typeof content2.style.penSize === "number") {
          pen.width = content2.style.penSize * 0.75;
        }
        pen.dashStyle = this.getDashStyle(content2.style.dashStyle);
      }
      documentHeader.graphics.drawLine(pen, x1, y1, x2, y2);
    };
    PdfExport2.prototype.processAggregates = function(sRows, pdfGrid, border, font, brush, backgroundBrush, isCaption, captionRow, groupIndex, isGroupedFooter, isAggregate, gObj) {
      for (var _i = 0, sRows_1 = sRows; _i < sRows_1.length; _i++) {
        var row2 = sRows_1[_i];
        var leastCaptionSummaryIndex = -1;
        var index = 0;
        var isEmpty = true;
        var value = [];
        var aggIdx = isAggregate ? 0 : 1;
        var gridRow = void 0;
        if (isNullOrUndefined(captionRow)) {
          gridRow = pdfGrid.rows.addRow();
          gridRow.style.setBorder(border);
          gridRow.style.setFont(font);
          gridRow.style.setTextBrush(brush);
          gridRow.style.setBackgroundBrush(backgroundBrush);
        }
        for (var i = 0; i < pdfGrid.columns.count + aggIdx; i++) {
          var cell = row2.cells[parseInt(index.toString(), 10)];
          if (cell.cellType === CellType.DetailFooterIntent) {
            i--;
            index++;
            continue;
          }
          if (!this.hideColumnInclude) {
            while (cell.visible === void 0) {
              if (cell.cellType === CellType.DetailFooterIntent) {
                continue;
              }
              if (!isNullOrUndefined(captionRow)) {
                if (!isNullOrUndefined(captionRow.cells.getCell(i).value)) {
                  value.push(captionRow.cells.getCell(i).value);
                  isEmpty = false;
                  if (!isCaption) {
                    i += 1;
                  }
                } else {
                  value.push("");
                }
              } else {
                value.push("");
              }
              i += 1;
              index = index + 1;
              cell = row2.cells[parseInt(index.toString(), 10)];
            }
            while (!isNullOrUndefined(cell.visible) && !cell.visible) {
              index = index + 1;
              cell = row2.cells[parseInt(index.toString(), 10)];
            }
          }
          if (cell.isDataCell) {
            var templateFn = {};
            var footerTemplate = !isNullOrUndefined(cell.column.footerTemplate);
            var groupFooterTemplate = !isNullOrUndefined(cell.column.groupFooterTemplate);
            var groupCaptionTemplate = !isNullOrUndefined(cell.column.groupCaptionTemplate);
            if (footerTemplate || groupCaptionTemplate || groupFooterTemplate) {
              var result = this.getTemplateFunction(templateFn, i, leastCaptionSummaryIndex, cell);
              templateFn = result.templateFunction;
              leastCaptionSummaryIndex = result.leastCaptionSummaryIndex;
              var txt = void 0;
              var data = row2.data[cell.column.field ? cell.column.field : cell.column.columnName];
              if ((this.parent.isReact || this.parent.isVue || this.parent.isVue3 || this.parent.isAngular) && !(typeof cell.column.footerTemplate === "string" || typeof cell.column.groupFooterTemplate === "string" || typeof cell.column.groupCaptionTemplate === "string")) {
                txt = data[cell.column.type];
                txt = !isNullOrUndefined(txt) ? txt : "";
              } else {
                txt = templateFn[getEnumValue(CellType, cell.cellType)](data, this.parent);
                txt = this.parent.isVue3 && !isNullOrUndefined(txt[1]) ? txt[1].textContent : !isNullOrUndefined(txt[0]) ? txt[0].textContent : "";
              }
              isEmpty = false;
              var args = {
                row: row2,
                type: footerTemplate ? "Footer" : groupFooterTemplate ? "GroupFooter" : "GroupCaption",
                style: isNullOrUndefined(captionRow) ? gridRow.cells : captionRow.cells,
                cell,
                value: txt
              };
              this.parent.trigger(pdfAggregateQueryCellInfo, args);
              value.push(args.value);
            } else {
              var result = this.getSummaryWithoutTemplate(row2.data[cell.column.field]);
              if (!isNullOrUndefined(result)) {
                value.push(result);
              }
            }
          } else {
            value.push("");
          }
          if (isEmpty && value[parseInt(i.toString(), 10)] !== "" && !isNullOrUndefined(value[parseInt(i.toString(), 10)]) && value[parseInt(i.toString(), 10)] !== null) {
            isEmpty = false;
          }
          index += 1;
        }
        if (!isAggregate) {
          if (!isCaption) {
            value.splice(0, 1);
          } else {
            for (var i = gObj.groupSettings.columns.length; i < value.length - 1; i++) {
              value[parseInt(i.toString(), 10)] = value[i + 1];
              value[i + 1] = value[i + 2] ? value[i + 2] : "";
            }
          }
        }
        if (!isEmpty) {
          if (!isCaption) {
            for (var i = 0; i < pdfGrid.columns.count; i++) {
              gridRow.cells.getCell(i).value = value[parseInt(i.toString(), 10)].toString();
            }
          } else {
            for (var i = 0; i < pdfGrid.columns.count; i++) {
              captionRow.cells.getCell(i).value = value[parseInt(i.toString(), 10)].toString();
              if (i === groupIndex && leastCaptionSummaryIndex !== -1 && leastCaptionSummaryIndex !== 1) {
                captionRow.cells.getCell(i).columnSpan = leastCaptionSummaryIndex - 1 - groupIndex;
              } else if (i === groupIndex && leastCaptionSummaryIndex === -1) {
                captionRow.cells.getCell(i).columnSpan = pdfGrid.columns.count - groupIndex;
              }
            }
          }
        }
      }
    };
    PdfExport2.prototype.getTemplateFunction = function(templateFn, index, leastCaptionSummaryIndex, cell) {
      if (!isNullOrUndefined(cell.column.footerTemplate) && cell.cellType === CellType.Summary) {
        templateFn[getEnumValue(CellType, CellType.Summary)] = compile(cell.column.footerTemplate);
      } else if (!isNullOrUndefined(cell.column.groupCaptionTemplate)) {
        if (leastCaptionSummaryIndex === -1) {
          leastCaptionSummaryIndex = index;
        }
        templateFn[getEnumValue(CellType, CellType.CaptionSummary)] = compile(cell.column.groupCaptionTemplate);
      } else {
        templateFn[getEnumValue(CellType, CellType.GroupSummary)] = compile(cell.column.groupFooterTemplate);
      }
      return {
        templateFunction: templateFn,
        leastCaptionSummaryIndex
      };
    };
    PdfExport2.prototype.getSummaryWithoutTemplate = function(data) {
      if (!isNullOrUndefined(data.Sum)) {
        return data.Sum;
      } else if (!isNullOrUndefined(data.Average)) {
        return data.Average;
      } else if (!isNullOrUndefined(data.Max)) {
        return data.Max;
      } else if (!isNullOrUndefined(data.Min)) {
        return data.Min;
      } else if (!isNullOrUndefined(data.Count)) {
        return data.Count;
      } else if (!isNullOrUndefined(data.TrueCount)) {
        return data.TrueCount;
      } else if (!isNullOrUndefined(data.FalseCount)) {
        return data.FalseCount;
      } else if (!isNullOrUndefined(data.Custom)) {
        return data.Custom;
      }
    };
    PdfExport2.prototype.setColumnProperties = function(gridColumns, pdfGrid, helper, gObj, allowHorizontalOverflow) {
      var startIndex = gObj.groupSettings.columns.length ? gObj.groupSettings.columns.length - 1 : 0;
      for (var i = 0; i < startIndex; i++) {
        pdfGrid.columns.getColumn(i).width = 20;
      }
      for (var i = 0; i < gridColumns.length; i++) {
        if (!isNullOrUndefined(gridColumns[parseInt(i.toString(), 10)].textAlign)) {
          pdfGrid.columns.getColumn(i + startIndex).format = this.getHorizontalAlignment(gridColumns[parseInt(i.toString(), 10)].textAlign);
        }
        if (pdfGrid.style.allowHorizontalOverflow && !isNullOrUndefined(gridColumns[parseInt(i.toString(), 10)].width) && allowHorizontalOverflow) {
          pdfGrid.columns.getColumn(i + startIndex).width = typeof gridColumns[parseInt(i.toString(), 10)].width === "number" ? gridColumns[parseInt(i.toString(), 10)].width * 0.75 : helper.getConvertedWidth(gridColumns[parseInt(i.toString(), 10)].width) * 0.75;
        }
      }
    };
    PdfExport2.prototype.setRecordThemeStyle = function(row2, border) {
      if (!isNullOrUndefined(this.gridTheme) && !isNullOrUndefined(this.gridTheme.record)) {
        var fontFamily = !isNullOrUndefined(this.gridTheme.record.fontName) ? this.getFontFamily(this.gridTheme.record.fontName) : PdfFontFamily.Helvetica;
        var fontSize = !isNullOrUndefined(this.gridTheme.record.fontSize) ? this.gridTheme.record.fontSize : 9.75;
        var fontStyle = this.getFontStyle(this.gridTheme.record);
        var font = new PdfStandardFont(fontFamily, fontSize, fontStyle);
        if (!isNullOrUndefined(this.gridTheme.record.font)) {
          font = this.gridTheme.record.font;
        }
        row2.style.setFont(font);
        var pdfColor = new PdfColor();
        if (!isNullOrUndefined(this.gridTheme.record.fontColor)) {
          var penBrushColor = this.hexToRgb(this.gridTheme.record.fontColor);
          pdfColor = new PdfColor(penBrushColor.r, penBrushColor.g, penBrushColor.b);
        }
        row2.style.setTextBrush(new PdfSolidBrush(pdfColor));
      } else {
        row2.style.setTextBrush(new PdfSolidBrush(new PdfColor(0, 0, 0)));
      }
      var borderRecord = this.gridTheme && this.gridTheme.record && this.gridTheme.record.border ? this.getBorderStyle(this.gridTheme.record.border) : border;
      row2.style.setBorder(borderRecord);
      return row2;
    };
    PdfExport2.prototype.processRecord = function(border, columns, gObj, dataSource, pdfGrid, startIndex, pdfExportProperties, helper, rowIndex) {
      var rows = helper.getGridRowModel(columns, dataSource, gObj, rowIndex);
      for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
        var row2 = rows_1[_i];
        rowIndex++;
        this.rowIndex = rowIndex;
        var gridRow = this.setRecordThemeStyle(pdfGrid.rows.addRow(), border);
        var cellLength = row2.cells.length;
        for (var j = 0; j < cellLength; j++) {
          var gridCell = row2.cells[parseInt(j.toString(), 10)];
          if (gridCell.cellType !== CellType.Data) {
            continue;
          }
          var column = gridCell.column;
          var field = column.field;
          var cellValue = !isNullOrUndefined(field) ? column.valueAccessor(field, row2.data, column) : "";
          var value = !isNullOrUndefined(cellValue) ? cellValue : "";
          var foreignKeyData2 = void 0;
          if (column.isForeignColumn && column.isForeignColumn()) {
            foreignKeyData2 = helper.getFData(value, column);
            value = getValue(column.foreignKeyValue, foreignKeyData2);
          }
          var data = row2.data;
          var cell = gridRow.cells.getCell(j);
          var args = {
            data,
            value,
            column,
            style: void 0,
            colSpan: 1,
            cell
          };
          args.value = args.column.type === "boolean" && typeof args.value === "string" ? args.value : this.exportValueFormatter.formatCellValue(args);
          this.parent.trigger(pdfQueryCellInfo, args);
          if (!isNullOrUndefined(args.image)) {
            args.value = new PdfBitmap(args.image.base64);
            args.value.height = args.image.height || args.value.height;
            args.value.width = args.image.width || args.value.width;
          }
          cell.value = args.value;
          if (!isNullOrUndefined(args.hyperLink)) {
            cell.value = this.setHyperLink(args);
          }
          if (!isNullOrUndefined(args.style)) {
            this.processCellStyle(cell, args);
          }
          if (args.colSpan > 1) {
            if (j + 1 + args.colSpan > gridRow.cells.count) {
              args.colSpan = gridRow.cells.count - (j + 1);
            }
            cell.columnSpan = args.colSpan;
            for (var i = 1; i < cell.columnSpan; i++) {
              var spanCell = gridRow.cells.getCell(j + i);
              spanCell.value = "";
            }
            j += args.colSpan - 1;
          }
        }
        if (row2.isExpand) {
          var gridRow_1 = this.setRecordThemeStyle(pdfGrid.rows.addRow(), border);
          var startIndexVal = this.parent.childGrid || this.parent.detailTemplate ? 0 : startIndex;
          var cell = gridRow_1.cells.getCell(startIndexVal);
          cell.columnSpan = gridRow_1.cells.count - startIndexVal;
          cell.style.cellPadding = new PdfPaddings(10, 10, 10, 10);
          if (this.parent.childGrid) {
            gObj.isPrinting = true;
            var exportType = !isNullOrUndefined(pdfExportProperties) && pdfExportProperties.exportType ? pdfExportProperties.exportType : "AllPages";
            var returnValue = this.helper.createChildGrid(gObj, row2, exportType, this.gridPool);
            var childGridObj = returnValue.childGrid;
            var element = returnValue.element;
            childGridObj.actionFailure = helper.failureHandler(this.gridPool, childGridObj, this.globalResolve);
            var childExportProperties = extend(pdfExportProperties, {
              columns: null,
              dataSource: null,
              query: null
            });
            var args = {
              childGrid: childGridObj,
              row: row2,
              cell,
              exportProperties: childExportProperties
            };
            this.parent.trigger(exportDetailDataBound, args);
            childGridObj.beforeDataBound = this.childGridCell(cell, childGridObj, childExportProperties);
            childGridObj.appendTo(element);
          } else if (this.parent.detailTemplate) {
            var args = {
              parentRow: row2,
              row: gridRow_1,
              value: {},
              action: "pdfexport",
              gridInstance: gObj
            };
            this.parent.trigger(exportDetailTemplate, args);
            cell.value = this.processDetailTemplate(args);
          }
        }
        this.parent.notify(exportRowDataBound, {
          type: "pdf",
          rowObj: row2
        });
      }
      return rowIndex;
    };
    PdfExport2.prototype.processDetailTemplate = function(templateData) {
      var _this = this;
      if (templateData.value.columnHeader || templateData.value.rows) {
        var pdfGrid = new PdfGrid();
        var headerThemeStyle = this.getHeaderThemeStyle();
        var border_1 = headerThemeStyle.border;
        var headerFont_1 = headerThemeStyle.font;
        var headerBrush_1 = headerThemeStyle.brush;
        var processRow = function(row3, gridRow2, isHeader) {
          if (isHeader) {
            gridRow2.style.setBorder(border_1);
            gridRow2.style.setFont(headerFont_1);
            gridRow2.style.setTextBrush(headerBrush_1);
          }
          for (var j = 0; j < row3.cells.length; j++) {
            var currentCell = row3.cells[parseInt(j.toString(), 10)];
            var pdfCell = gridRow2.cells.getCell(currentCell.index ? currentCell.index : j);
            if (currentCell.rowSpan > 0) {
              pdfCell.rowSpan = currentCell.rowSpan;
            }
            if (currentCell.colSpan > 0) {
              pdfCell.columnSpan = currentCell.colSpan;
            }
            pdfCell.value = currentCell.value;
            if (!isNullOrUndefined(currentCell.image)) {
              pdfCell.value = new PdfBitmap(currentCell.image.base64);
              pdfCell.value.height = currentCell.image.height;
              pdfCell.value.width = currentCell.image.width;
            }
            if (!isNullOrUndefined(currentCell.hyperLink)) {
              pdfCell.value = _this.setHyperLink(currentCell);
            }
            if (!isNullOrUndefined(currentCell.style)) {
              var cellStyle = {
                style: {
                  backgroundColor: currentCell.style.backColor,
                  textAlignment: currentCell.style.pdfTextAlignment,
                  verticalAlignment: currentCell.style.pdfVerticalAlignment,
                  textBrushColor: currentCell.style.fontColor,
                  textPenColor: currentCell.style.pdfTextPenColor,
                  fontFamily: currentCell.style.pdfFontFamily,
                  fontSize: currentCell.style.fontSize,
                  bold: currentCell.style.bold,
                  italic: currentCell.style.italic,
                  underline: currentCell.style.underline,
                  strikeout: currentCell.style.strikeThrough,
                  border: currentCell.style.pdfBorder,
                  paragraphIndent: currentCell.style.pdfParagraphIndent,
                  cellPadding: currentCell.style.pdfCellPadding
                }
              };
              _this.processCellStyle(pdfCell, cellStyle);
            }
          }
        };
        if (templateData.value.columnCount) {
          pdfGrid.columns.add(templateData.value.columnCount);
        } else {
          if (templateData.value.columnHeader && templateData.value.columnHeader.length) {
            pdfGrid.columns.add(templateData.value.columnHeader[0].cells.length);
          } else if (templateData.value.rows && templateData.value.rows.length) {
            pdfGrid.columns.add(templateData.value.rows[0].cells.length);
          }
        }
        if (templateData.value.columnHeader) {
          pdfGrid.headers.add(templateData.value.columnHeader.length);
          for (var i = 0; i < templateData.value.columnHeader.length; i++) {
            var gridHeader2 = pdfGrid.headers.getHeader(parseInt(i.toString(), 10));
            processRow(templateData.value.columnHeader[parseInt(i.toString(), 10)], gridHeader2, true);
          }
        }
        if (templateData.value.rows) {
          for (var _i = 0, _a = templateData.value.rows; _i < _a.length; _i++) {
            var row2 = _a[_i];
            var gridRow = this.setRecordThemeStyle(pdfGrid.rows.addRow(), border_1);
            processRow(row2, gridRow, false);
          }
        }
        return pdfGrid;
      } else if (templateData.value.image) {
        return new PdfBitmap(templateData.value.image.base64);
      } else if (templateData.value.text) {
        return templateData.value.text;
      } else if (templateData.value.hyperLink) {
        return this.setHyperLink(templateData.value);
      }
      return "";
    };
    PdfExport2.prototype.setHyperLink = function(args) {
      var textLink = new PdfTextWebLink();
      textLink.url = args.hyperLink.target;
      textLink.text = args.hyperLink.displayText || args.hyperLink.target;
      textLink.font = new PdfStandardFont(PdfFontFamily.Helvetica, 9.75);
      textLink.brush = new PdfSolidBrush(new PdfColor(51, 102, 187));
      return textLink;
    };
    PdfExport2.prototype.childGridCell = function(cell, childGridObj, pdfExportProperties) {
      var _this = this;
      return function(result) {
        childGridObj.beforeDataBound = null;
        result.cancel = true;
        cell.value = _this.processGridExport(childGridObj, result, pdfExportProperties);
        childGridObj.destroy();
        detach(childGridObj.element);
        _this.gridPool[childGridObj.id] = true;
        _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);
        return cell;
      };
    };
    PdfExport2.prototype.processCellStyle = function(cell, args) {
      if (!isNullOrUndefined(args.style.backgroundColor)) {
        var backColor = this.hexToRgb(args.style.backgroundColor);
        cell.style.backgroundBrush = new PdfSolidBrush(new PdfColor(backColor.r, backColor.g, backColor.b));
      }
      if (!isNullOrUndefined(args.style.textAlignment)) {
        cell.style.stringFormat = this.getHorizontalAlignment(args.style.textAlignment);
      }
      if (!isNullOrUndefined(args.style.cellPadding)) {
        cell.style.cellPadding = args.style.cellPadding;
      }
      if (!isNullOrUndefined(args.style.verticalAlignment)) {
        cell.style.stringFormat = this.getVerticalAlignment(args.style.verticalAlignment, cell.style.stringFormat);
      }
      if (!isNullOrUndefined(args.style.textBrushColor)) {
        var textBrushColor = this.hexToRgb(args.style.textBrushColor);
        cell.style.textBrush = new PdfSolidBrush(new PdfColor(textBrushColor.r, textBrushColor.g, textBrushColor.b));
      }
      if (!isNullOrUndefined(args.style.textPenColor)) {
        var textPenColor = this.hexToRgb(args.style.textPenColor);
        cell.style.textPen = new PdfPen(new PdfColor(textPenColor.r, textPenColor.g, textPenColor.b));
      }
      if (!isNullOrUndefined(args.style.fontFamily) || !isNullOrUndefined(args.style.fontSize) || !isNullOrUndefined(args.style.bold) || !isNullOrUndefined(args.style.italic) || !isNullOrUndefined(args.style.underline) || !isNullOrUndefined(args.style.strikeout)) {
        cell.style.font = this.getFont(args);
      }
      if (!isNullOrUndefined(args.style.border)) {
        var border = new PdfBorders();
        var borderWidth = args.style.border.width;
        var width = !isNullOrUndefined(borderWidth) && typeof borderWidth === "number" ? borderWidth * 0.75 : void 0;
        var color = new PdfColor(196, 196, 196);
        if (!isNullOrUndefined(args.style.border.color)) {
          var borderColor = this.hexToRgb(args.style.border.color);
          color = new PdfColor(borderColor.r, borderColor.g, borderColor.b);
        }
        var pen = new PdfPen(color, width);
        if (!isNullOrUndefined(args.style.border.dashStyle)) {
          pen.dashStyle = this.getDashStyle(args.style.border.dashStyle);
        }
        border.all = pen;
        cell.style.borders = border;
      }
      if (!isNullOrUndefined(args.style.paragraphIndent)) {
        cell.style.stringFormat = new PdfStringFormat();
        cell.style.stringFormat.paragraphIndent = args.style.paragraphIndent;
      }
    };
    PdfExport2.prototype.getHorizontalAlignment = function(textAlign, format) {
      if (format === void 0) {
        format = new PdfStringFormat();
      }
      switch (textAlign) {
        case "Right":
          format.alignment = PdfTextAlignment.Right;
          break;
        case "Center":
          format.alignment = PdfTextAlignment.Center;
          break;
        case "Justify":
          format.alignment = PdfTextAlignment.Justify;
          break;
        case "Left":
          format.alignment = PdfTextAlignment.Left;
          break;
      }
      return format;
    };
    PdfExport2.prototype.getVerticalAlignment = function(verticalAlign, format, textAlign) {
      if (format === void 0) {
        format = new PdfStringFormat();
        format = this.getHorizontalAlignment(textAlign, format);
      }
      switch (verticalAlign) {
        case "Bottom":
          format.lineAlignment = PdfVerticalAlignment.Bottom;
          break;
        case "Middle":
          format.lineAlignment = PdfVerticalAlignment.Middle;
          break;
        case "Top":
          format.lineAlignment = PdfVerticalAlignment.Top;
          break;
      }
      return format;
    };
    PdfExport2.prototype.getFontFamily = function(fontFamily) {
      switch (fontFamily) {
        case "TimesRoman":
          return 2;
        case "Courier":
          return 1;
        case "Symbol":
          return 3;
        case "ZapfDingbats":
          return 4;
        default:
          return 0;
      }
    };
    PdfExport2.prototype.getFont = function(content2) {
      if (content2.font) {
        return content2.font;
      }
      var fontSize = !isNullOrUndefined(content2.style.fontSize) ? content2.style.fontSize * 0.75 : 9.75;
      var fontFamily = !isNullOrUndefined(content2.style.fontFamily) ? this.getFontFamily(content2.style.fontFamily) : PdfFontFamily.TimesRoman;
      var fontStyle = PdfFontStyle.Regular;
      if (!isNullOrUndefined(content2.style.bold) && content2.style.bold) {
        fontStyle |= PdfFontStyle.Bold;
      }
      if (!isNullOrUndefined(content2.style.italic) && content2.style.italic) {
        fontStyle |= PdfFontStyle.Italic;
      }
      if (!isNullOrUndefined(content2.style.underline) && content2.style.underline) {
        fontStyle |= PdfFontStyle.Underline;
      }
      if (!isNullOrUndefined(content2.style.strikeout) && content2.style.strikeout) {
        fontStyle |= PdfFontStyle.Strikeout;
      }
      return new PdfStandardFont(fontFamily, fontSize, fontStyle);
    };
    PdfExport2.prototype.getPageNumberStyle = function(pageNumberType) {
      switch (pageNumberType) {
        case "LowerLatin":
          return 2;
        case "LowerRoman":
          return 3;
        case "UpperLatin":
          return 4;
        case "UpperRoman":
          return 5;
        default:
          return 1;
      }
    };
    PdfExport2.prototype.setContentFormat = function(content2, format) {
      if (!isNullOrUndefined(content2.size)) {
        var width = content2.size.width * 0.75;
        var height = content2.size.height * 0.75;
        format = new PdfStringFormat(PdfTextAlignment.Left, PdfVerticalAlignment.Middle);
        if (!isNullOrUndefined(content2.style.hAlign)) {
          switch (content2.style.hAlign) {
            case "Right":
              format.alignment = PdfTextAlignment.Right;
              break;
            case "Center":
              format.alignment = PdfTextAlignment.Center;
              break;
            case "Justify":
              format.alignment = PdfTextAlignment.Justify;
              break;
            default:
              format.alignment = PdfTextAlignment.Left;
          }
        }
        if (!isNullOrUndefined(content2.style.vAlign)) {
          format = this.getVerticalAlignment(content2.style.vAlign, format);
        }
        return {
          format,
          size: new SizeF(width, height)
        };
      }
      return null;
    };
    PdfExport2.prototype.getPageSize = function(pageSize) {
      switch (pageSize) {
        case "Letter":
          return new SizeF(612, 792);
        case "Note":
          return new SizeF(540, 720);
        case "Legal":
          return new SizeF(612, 1008);
        case "A0":
          return new SizeF(2380, 3368);
        case "A1":
          return new SizeF(1684, 2380);
        case "A2":
          return new SizeF(1190, 1684);
        case "A3":
          return new SizeF(842, 1190);
        case "A5":
          return new SizeF(421, 595);
        case "A6":
          return new SizeF(297, 421);
        case "A7":
          return new SizeF(210, 297);
        case "A8":
          return new SizeF(148, 210);
        case "A9":
          return new SizeF(105, 148);
        // case 'A10':
        // return new SizeF(74, 105);
        case "B0":
          return new SizeF(2836, 4008);
        case "B1":
          return new SizeF(2004, 2836);
        case "B2":
          return new SizeF(1418, 2004);
        case "B3":
          return new SizeF(1002, 1418);
        case "B4":
          return new SizeF(709, 1002);
        case "B5":
          return new SizeF(501, 709);
        case "Archa":
          return new SizeF(648, 864);
        case "Archb":
          return new SizeF(864, 1296);
        case "Archc":
          return new SizeF(1296, 1728);
        case "Archd":
          return new SizeF(1728, 2592);
        case "Arche":
          return new SizeF(2592, 3456);
        case "Flsa":
          return new SizeF(612, 936);
        case "HalfLetter":
          return new SizeF(396, 612);
        case "Letter11x17":
          return new SizeF(792, 1224);
        case "Ledger":
          return new SizeF(1224, 792);
        default:
          return new SizeF(595, 842);
      }
    };
    PdfExport2.prototype.getDashStyle = function(dashStyle) {
      switch (dashStyle) {
        case "Dash":
          return 1;
        case "Dot":
          return 2;
        case "DashDot":
          return 3;
        case "DashDotDot":
          return 4;
        default:
          return 0;
      }
    };
    PdfExport2.prototype.getPenFromContent = function(content2) {
      var pen = new PdfPen(new PdfColor(0, 0, 0));
      if (!isNullOrUndefined(content2.style) && content2.style !== null && !isNullOrUndefined(content2.style.penColor)) {
        var penColor = this.hexToRgb(content2.style.penColor);
        pen = new PdfPen(new PdfColor(penColor.r, penColor.g, penColor.b));
      }
      return pen;
    };
    PdfExport2.prototype.getBrushFromContent = function(content2) {
      var brush = null;
      if (!isNullOrUndefined(content2.style.textBrushColor)) {
        var brushColor = this.hexToRgb(content2.style.textBrushColor);
        brush = new PdfSolidBrush(new PdfColor(brushColor.r, brushColor.g, brushColor.b));
      }
      return brush;
    };
    PdfExport2.prototype.hexToRgb = function(hex) {
      if (hex === null || hex === "" || hex.length !== 7) {
        throw new Error("please set valid hex value for color...");
      }
      hex = hex.substring(1);
      var bigint = parseInt(hex, 16);
      var r = bigint >> 16 & 255;
      var g = bigint >> 8 & 255;
      var b = bigint & 255;
      return {
        r,
        g,
        b
      };
    };
    PdfExport2.prototype.getFontStyle = function(theme) {
      var fontStyle = PdfFontStyle.Regular;
      if (!isNullOrUndefined(theme) && theme.bold) {
        fontStyle |= PdfFontStyle.Bold;
      }
      if (!isNullOrUndefined(theme) && theme.italic) {
        fontStyle |= PdfFontStyle.Italic;
      }
      if (!isNullOrUndefined(theme) && theme.underline) {
        fontStyle |= PdfFontStyle.Underline;
      }
      if (!isNullOrUndefined(theme) && theme.strikeout) {
        fontStyle |= PdfFontStyle.Strikeout;
      }
      return fontStyle;
    };
    PdfExport2.prototype.getBorderStyle = function(border) {
      var borders = new PdfBorders();
      if (!isNullOrUndefined(border)) {
        var borderWidth = border.width;
        var width = !isNullOrUndefined(borderWidth) && typeof borderWidth === "number" ? borderWidth * 0.75 : void 0;
        var color = new PdfColor(196, 196, 196);
        if (!isNullOrUndefined(border.color)) {
          var borderColor = this.hexToRgb(border.color);
          color = new PdfColor(borderColor.r, borderColor.g, borderColor.b);
        }
        var pen = new PdfPen(color, width);
        if (!isNullOrUndefined(border.dashStyle)) {
          pen.dashStyle = this.getDashStyle(border.dashStyle);
        }
        borders.all = pen;
      } else {
        borders.all = new PdfPen(new PdfColor(234, 234, 234));
      }
      return borders;
    };
    PdfExport2.prototype.destroy = function() {
    };
    return PdfExport2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/command-column-renderer.js
var __extends43 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var CommandColumnRenderer = (
  /** @class */
  function(_super) {
    __extends43(CommandColumnRenderer2, _super);
    function CommandColumnRenderer2(parent, locator) {
      var _this = _super.call(this, parent, locator) || this;
      _this.buttonElement = _this.parent.createElement("button", {});
      _this.unbounDiv = _this.parent.createElement("div", {
        className: "e-unboundcelldiv"
      });
      _this.childRefs = [];
      _this.element = _this.parent.createElement("TD", {
        className: "e-rowcell e-unboundcell",
        attrs: {
          tabindex: "-1",
          role: "gridcell"
        }
      });
      _this.parent.on(destroy, _this.destroyButtons, _this);
      _this.parent.on(commandColumnDestroy, _this.destroyButtons, _this);
      return _this;
    }
    CommandColumnRenderer2.prototype.destroyButtons = function(args) {
      for (var i = 0; i < this.childRefs.length; i++) {
        if (this.childRefs[parseInt(i.toString(), 10)] && !this.childRefs[parseInt(i.toString(), 10)].isDestroyed && !(this.parent.editSettings.showAddNewRow && this.parent.enableVirtualization && parentsUntil(this.childRefs[parseInt(i.toString(), 10)].element, "e-addedrow"))) {
          this.childRefs[parseInt(i.toString(), 10)].destroy();
          if (this.childRefs[parseInt(i.toString(), 10)].element) {
            this.childRefs[parseInt(i.toString(), 10)].element.innerHTML = "";
          }
        }
      }
      this.childRefs = [];
      if (args.type === "refreshCommandColumn") {
        var elem = this.parent.element.querySelectorAll(".e-gridcontent .e-unboundcell");
        if (elem.length) {
          for (var i = 0; i < elem.length; i++) {
            if (elem[parseInt(i.toString(), 10)] && !(this.parent.editSettings.showAddNewRow && this.parent.enableVirtualization && parentsUntil(elem[parseInt(i.toString(), 10)], "e-addedrow"))) {
              if (elem[parseInt(i.toString(), 10)].querySelector(".e-unboundcelldiv")) {
                elem[parseInt(i.toString(), 10)].querySelector(".e-unboundcelldiv").innerHTML = "";
              }
              elem[parseInt(i.toString(), 10)].innerHTML = "";
            }
          }
          elem = null;
        }
      } else {
        this.parent.off(destroy, this.destroyButtons);
        this.parent.off(commandColumnDestroy, this.destroyButtons);
      }
    };
    CommandColumnRenderer2.prototype.render = function(cell, data, attributes2, isVirtualEdit) {
      var node = this.element.cloneNode();
      var uid2 = "uid";
      node.appendChild(this.unbounDiv.cloneNode());
      node.setAttribute("aria-label", this.localizer.getConstant("CommandColumnAria") + cell.column.headerText);
      if (cell.column.commandsTemplate) {
        if (this.parent.isReact && typeof cell.column.commandsTemplate !== "string" && !(cell.column.commandsTemplate.prototype && cell.column.commandsTemplate.prototype.CSPTemplate)) {
          var tempID = this.parent + "commandsTemplate";
          cell.column.getColumnTemplate()(data, this.parent, "commandsTemplate", tempID, null, null, node.firstElementChild);
          this.parent.renderTemplates();
        } else {
          appendChildren(node.firstElementChild, cell.column.getColumnTemplate()(data, this.parent, "commandsTemplate", null, null, null, null, this.parent.root));
        }
      } else {
        for (var _i = 0, _a = cell.commands; _i < _a.length; _i++) {
          var command = _a[_i];
          node = this.renderButton(node, command, attributes2.index, command["" + uid2]);
        }
      }
      this.setAttributes(node, cell, attributes2);
      if (!this.parent.enableVirtualization && this.parent.isEdit && (!this.parent.editSettings.showAddNewRow || this.parent.editSettings.showAddNewRow && !this.parent.element.querySelector(".e-editedrow")) || isVirtualEdit) {
        addClass([].slice.call(node.getElementsByClassName("e-edit-delete")), "e-hide");
        removeClass([].slice.call(node.getElementsByClassName("e-save-cancel")), "e-hide");
      } else {
        addClass([].slice.call(node.getElementsByClassName("e-save-cancel")), "e-hide");
        removeClass([].slice.call(node.getElementsByClassName("e-edit-delete")), "e-hide");
      }
      if (this.parent.isFrozenGrid()) {
        addStickyColumnPosition(this.parent, cell.column, node);
      }
      return node;
    };
    CommandColumnRenderer2.prototype.renderButton = function(node, buttonOption, index, uid2) {
      var button = this.buttonElement.cloneNode();
      attributes(button, {
        "id": this.parent.element.id + (buttonOption.type || "") + "_" + index + "_" + uid2,
        "type": "button",
        title: !isNullOrUndefined(buttonOption.title) ? buttonOption.title : buttonOption.buttonOption.content || this.localizer.getConstant(buttonOption.type) || buttonOption.type,
        "data-uid": uid2
      });
      button.onclick = buttonOption.buttonOption.click;
      buttonOption.buttonOption.cssClass = this.parent.cssClass ? buttonOption.buttonOption.cssClass + " " + this.parent.cssClass : buttonOption.buttonOption.cssClass;
      var buttonObj = new Button(buttonOption.buttonOption, button);
      this.childRefs.push(buttonObj);
      buttonObj.commandType = buttonOption.type;
      node.firstElementChild.appendChild(buttonObj.element);
      switch (buttonOption.type) {
        case "Edit":
        case "Delete":
          addClass([button], ["e-edit-delete", "e-" + buttonOption.type.toLowerCase() + "button"]);
          break;
        case "Cancel":
        case "Save":
          addClass([button], ["e-save-cancel", "e-" + buttonOption.type.toLowerCase() + "button"]);
          break;
      }
      return node;
    };
    return CommandColumnRenderer2;
  }(CellRenderer)
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/command-column.js
var CommandColumn = (
  /** @class */
  function() {
    function CommandColumn2(parent, locator) {
      this.parent = parent;
      this.locator = locator;
      this.initiateRender();
      this.addEventListener();
    }
    CommandColumn2.prototype.initiateRender = function() {
      var cellFac = this.locator.getService("cellRendererFactory");
      cellFac.addCellRenderer(CellType.CommandColumn, new CommandColumnRenderer(this.parent, this.locator));
    };
    CommandColumn2.prototype.commandClickHandler = function(e) {
      var gObj = this.parent;
      var target = closest(e.target, "button");
      if (!target || !closest(e.target, ".e-unboundcell")) {
        return;
      }
      var buttonObj = target.ej2_instances[0];
      var type = buttonObj.commandType;
      var uid2 = target.getAttribute("data-uid");
      var commandColumn;
      var row2 = gObj.getRowObjectFromUID(closest(target, "." + row).getAttribute("data-uid"));
      var cols = this.parent.columnModel;
      for (var i = 0; i < cols.length; i++) {
        if (cols[parseInt(i.toString(), 10)].commands) {
          var commandCols = cols[parseInt(i.toString(), 10)].commands;
          for (var j = 0; j < commandCols.length; j++) {
            var idInString = "uid";
            var typeInString = "type";
            if (commandCols[parseInt(j.toString(), 10)]["" + idInString] === uid2 && commandCols[parseInt(j.toString(), 10)]["" + typeInString] === type) {
              commandColumn = commandCols[parseInt(j.toString(), 10)];
            } else {
              var buttons = [].slice.call(closest(target, ".e-unboundcell").querySelectorAll("button"));
              var index = buttons.findIndex(function(ele) {
                return ele === target;
              });
              if (index < commandCols.length && commandCols[parseInt(index.toString(), 10)]["" + typeInString] === type && String(commandCols[parseInt(j.toString(), 10)]["" + idInString]) === uid2) {
                commandColumn = commandCols[parseInt(index.toString(), 10)];
              }
            }
          }
        }
      }
      var args = {
        cancel: false,
        target,
        commandColumn,
        rowData: isNullOrUndefined(row2) ? void 0 : row2.data
      };
      this.parent.trigger(commandClick, args, function(commandclickargs) {
        if (buttonObj.disabled || !gObj.editModule || commandclickargs.cancel) {
          return;
        }
        switch (type) {
          case "Edit":
            gObj.editModule.endEdit();
            gObj.editModule.startEdit(closest(target, "tr"));
            break;
          case "Cancel":
            gObj.isFocusFirstCell = true;
            gObj.editModule.closeEdit();
            break;
          case "Save":
            gObj.isFocusFirstCell = true;
            gObj.editModule.endEdit();
            break;
          case "Delete":
            if (gObj.editSettings.mode !== "Batch") {
              gObj.editModule.endEdit();
            }
            gObj.commandDelIndex = parseInt(closest(target, "tr").getAttribute(ariaRowIndex), 10) - 1;
            gObj.clearSelection();
            gObj.selectRow(gObj.commandDelIndex, false);
            gObj.isFocusFirstCell = true;
            gObj.editModule.deleteRecord();
            if (!(gObj.editSettings.showDeleteConfirmDialog && !gObj.allowSelection)) {
              gObj.commandDelIndex = void 0;
            }
            break;
        }
      });
    };
    CommandColumn2.prototype.getModuleName = function() {
      return "commandColumn";
    };
    CommandColumn2.prototype.destroy = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.removeEventListener();
    };
    CommandColumn2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(click, this.commandClickHandler);
      this.parent.off(keyPressed, this.keyPressHandler);
      this.parent.off(initialEnd, this.load);
      this.parent.off(destroy, this.destroy);
    };
    CommandColumn2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(click, this.commandClickHandler, this);
      this.parent.on(keyPressed, this.keyPressHandler, this);
      this.parent.on(initialEnd, this.load, this);
      this.parent.on(destroy, this.destroy, this);
    };
    CommandColumn2.prototype.keyPressHandler = function(e) {
      if ((e.action === "enter" || e.action === "space") && closest(e.target, ".e-unboundcelldiv")) {
        this.commandClickHandler(e);
        e.preventDefault();
      }
    };
    CommandColumn2.prototype.load = function() {
      var uid2 = "uid";
      var col = this.parent.columnModel;
      for (var i = 0; i < col.length; i++) {
        if (col[parseInt(i.toString(), 10)].commands) {
          var commandCol = col[parseInt(i.toString(), 10)].commands;
          for (var j = 0; j < commandCol.length; j++) {
            commandCol[parseInt(j.toString(), 10)]["" + uid2] = getUid("gridcommand");
          }
        }
      }
    };
    return CommandColumn2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/context-menu.js
var menuClass = {
  header: "." + gridHeader,
  content: "." + gridContent,
  edit: ".e-inline-edit",
  batchEdit: ".e-editedbatchcell",
  editIcon: "e-edit",
  pager: ".e-gridpager",
  delete: "e-delete",
  save: "e-save",
  cancel: "e-cancel",
  copy: "e-copy",
  pdf: "e-pdfexport",
  group: "e-icon-group",
  ungroup: "e-icon-ungroup",
  csv: "e-csvexport",
  excel: "e-excelexport",
  fPage: "e-icon-first",
  nPage: "e-icon-next",
  lPage: "e-icon-last",
  pPage: "e-icon-prev",
  ascending: "e-icon-ascending",
  descending: "e-icon-descending",
  groupHeader: "e-groupdroparea",
  touchPop: "e-gridpopup",
  autofit: "e-icon-autofit",
  autofitall: "e-icon-autofitall"
};
var ContextMenu2 = (
  /** @class */
  function() {
    function ContextMenu3(parent, serviceLocator) {
      this.defaultItems = {};
      this.disableItems = [];
      this.hiddenItems = [];
      this.localeText = this.setLocaleKey();
      this.parent = parent;
      this.gridID = parent.element.id;
      this.serviceLocator = serviceLocator;
      this.addEventListener();
    }
    ContextMenu3.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(uiUpdate, this.enableAfterRenderMenu, this);
      this.parent.on(initialLoad, this.render, this);
      this.parent.on(destroy, this.destroy, this);
    };
    ContextMenu3.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(initialLoad, this.render);
      this.parent.off(uiUpdate, this.enableAfterRenderMenu);
      this.parent.off(destroy, this.destroy);
      EventHandler.remove(this.element, "keydown", this.keyDownHandler.bind(this));
    };
    ContextMenu3.prototype.keyDownHandler = function(e) {
      if (e.code === "Tab" || e.which === 9) {
        this.contextMenu.close();
      }
      if (e.code === "Escape") {
        this.contextMenu.close();
        this.parent.notify(restoreFocus, {});
      }
    };
    ContextMenu3.prototype.render = function() {
      this.parent.element.classList.add("e-noselect");
      this.l10n = this.serviceLocator.getService("localization");
      this.element = this.parent.createElement("ul", {
        id: this.gridID + "_cmenu"
      });
      EventHandler.add(this.element, "keydown", this.keyDownHandler.bind(this));
      this.parent.element.appendChild(this.element);
      var target = "#" + this.gridID;
      this.contextMenu = new ContextMenu({
        items: this.getMenuItems(),
        enableRtl: this.parent.enableRtl,
        enablePersistence: this.parent.enablePersistence,
        locale: this.parent.locale,
        target,
        select: this.contextMenuItemClick.bind(this),
        beforeOpen: this.contextMenuBeforeOpen.bind(this),
        onOpen: this.contextMenuOpen.bind(this),
        onClose: this.contextMenuOnClose.bind(this),
        cssClass: this.parent.cssClass ? "e-grid-menu " + this.parent.cssClass : "e-grid-menu"
      });
      this.contextMenu.appendTo(this.element);
    };
    ContextMenu3.prototype.enableAfterRenderMenu = function(e) {
      if (e.module === this.getModuleName() && e.enable) {
        if (this.contextMenu) {
          this.contextMenu.destroy();
          remove(this.element);
          this.parent.element.classList.remove("e-noselect");
        }
        this.render();
      }
    };
    ContextMenu3.prototype.getMenuItems = function() {
      var menuItems = [];
      var exportItems = [];
      for (var _i = 0, _a = this.parent.contextMenuItems; _i < _a.length; _i++) {
        var item = _a[_i];
        if (typeof item === "string" && this.getDefaultItems().indexOf(item) !== -1) {
          if (item.toLocaleLowerCase().indexOf("export") !== -1) {
            exportItems.push(this.buildDefaultItems(item));
          } else {
            menuItems.push(this.buildDefaultItems(item));
          }
        } else if (typeof item !== "string") {
          menuItems.push(item);
        }
      }
      if (exportItems.length > 0) {
        var exportGroup = this.buildDefaultItems("export");
        exportGroup.items = exportItems;
        menuItems.push(exportGroup);
      }
      return menuItems;
    };
    ContextMenu3.prototype.getLastPage = function() {
      var totalpage = Math.floor(this.parent.pageSettings.totalRecordsCount / this.parent.pageSettings.pageSize);
      if (this.parent.pageSettings.totalRecordsCount % this.parent.pageSettings.pageSize) {
        totalpage += 1;
      }
      return totalpage;
    };
    ContextMenu3.prototype.contextMenuOpen = function() {
      this.isOpen = true;
    };
    ContextMenu3.prototype.contextMenuItemClick = function(args) {
      var item = this.getKeyFromId(args.item.id);
      switch (item) {
        case "AutoFitAll":
          this.parent.autoFitColumns([]);
          break;
        case "AutoFit":
          this.parent.autoFitColumns(this.targetColumn.field);
          break;
        case "Group":
          this.parent.groupColumn(this.targetColumn.field);
          break;
        case "Ungroup":
          this.parent.ungroupColumn(this.targetColumn.field);
          break;
        case "Edit":
          if (this.parent.editModule) {
            if (this.parent.editSettings.mode === "Batch") {
              if (this.row && this.cell && !isNaN(parseInt(this.cell.getAttribute(ariaColIndex), 10) - 1)) {
                this.parent.editModule.editCell(
                  parseInt(this.row.getAttribute(ariaRowIndex), 10) - 1,
                  // eslint-disable-next-line
                  this.parent.getColumns()[parseInt(this.cell.getAttribute(ariaColIndex), 10) - 1].field
                );
              }
            } else {
              this.parent.editModule.endEdit();
              this.parent.editModule.startEdit(this.row);
            }
          }
          break;
        case "Delete":
          if (this.parent.editModule) {
            if (this.parent.editSettings.mode !== "Batch") {
              this.parent.editModule.endEdit();
            }
            if (this.parent.getSelectedRecords().length === 1) {
              if (!this.parent.isCheckBoxSelection) {
                this.parent.isFocusFirstCell = true;
              }
              this.parent.editModule.deleteRow(this.row);
            } else {
              this.parent.deleteRecord();
            }
          }
          break;
        case "Save":
          if (this.parent.editModule) {
            if (this.parent.isEdit && this.parent.editSettings.mode !== "Batch") {
              this.parent.isFocusFirstCell = true;
            }
            this.parent.editModule.endEdit();
          }
          break;
        case "Cancel":
          if (this.parent.editModule) {
            if (this.parent.isEdit) {
              this.parent.isFocusFirstCell = true;
            }
            this.parent.editModule.closeEdit();
          }
          break;
        case "Copy":
          this.parent.copy();
          break;
        case "PdfExport":
          this.parent.pdfExport();
          break;
        case "ExcelExport":
          this.parent.excelExport();
          break;
        case "CsvExport":
          this.parent.csvExport();
          break;
        case "SortAscending":
          this.isOpen = false;
          this.parent.sortColumn(this.targetColumn.field, "Ascending");
          break;
        case "SortDescending":
          this.isOpen = false;
          this.parent.sortColumn(this.targetColumn.field, "Descending");
          break;
        case "FirstPage":
          this.parent.goToPage(1);
          break;
        case "PrevPage":
          this.parent.goToPage(this.parent.pageSettings.currentPage - 1);
          break;
        case "LastPage":
          this.parent.goToPage(this.getLastPage());
          break;
        case "NextPage":
          this.parent.goToPage(this.parent.pageSettings.currentPage + 1);
          break;
      }
      args.column = this.targetColumn;
      args.rowInfo = this.targetRowdata;
      this.parent.trigger(contextMenuClick, args);
    };
    ContextMenu3.prototype.contextMenuOnClose = function(args) {
      var parent = "parentObj";
      if (args.items.length > 0 && args.items[0]["" + parent] instanceof ContextMenu) {
        this.updateItemStatus();
      }
      this.parent.notify(selectRowOnContextOpen, {
        isOpen: false
      });
    };
    ContextMenu3.prototype.getLocaleText = function(item) {
      return this.l10n.getConstant(this.localeText["" + item]);
    };
    ContextMenu3.prototype.updateItemStatus = function() {
      this.contextMenu.showItems(this.hiddenItems);
      this.contextMenu.enableItems(this.disableItems);
      this.hiddenItems = [];
      this.disableItems = [];
      this.isOpen = false;
    };
    ContextMenu3.prototype.contextMenuBeforeOpen = function(args) {
      var closestGrid = closest(args.event.target, ".e-grid");
      if (args.event && closestGrid && closestGrid !== this.parent.element) {
        args.cancel = true;
      } else if (args.event && (closest(args.event.target, "." + menuClass.groupHeader) || closest(args.event.target, "." + menuClass.touchPop) || closest(args.event.target, ".e-summarycell") || closest(args.event.target, ".e-groupcaption") || closest(args.event.target, ".e-filterbarcell")) || this.parent.editSettings.showAddNewRow && closest(args.event.target, ".e-addedrow") && this.parent.element.querySelector(".e-editedrow")) {
        args.cancel = true;
      } else {
        this.targetColumn = this.getColumn(args.event);
        if (parentsUntil(args.event.target, "e-grid")) {
          this.targetRowdata = this.parent.getRowInfo(args.event.target);
        }
        if (isNullOrUndefined(args.parentItem) && this.targetColumn) {
          if (this.targetRowdata.cell) {
            this.parent.notify(selectRowOnContextOpen, {
              isOpen: true
            });
            this.selectRow(args.event, this.targetRowdata.cell.classList.contains("e-selectionbackground") && this.parent.selectionSettings.type === "Multiple" ? false : true);
          }
        }
        var hideSepItems = [];
        var showSepItems = [];
        for (var _i = 0, _a = args.items; _i < _a.length; _i++) {
          var item = _a[_i];
          var key = this.getKeyFromId(item.id);
          var dItem = this.defaultItems["" + key];
          if (this.getDefaultItems().indexOf(key) !== -1) {
            if (this.ensureDisabledStatus(key)) {
              this.disableItems.push(item.text);
            }
            if (args.event && (this.ensureTarget(args.event.target, menuClass.edit) || this.ensureTarget(args.event.target, menuClass.batchEdit))) {
              if (key !== "Save" && key !== "Cancel") {
                this.hiddenItems.push(item.text);
              }
            } else if (this.parent.editModule && this.parent.editSettings.mode === "Batch" && (closest(args.event.target, ".e-gridform") || this.parent.editModule.getBatchChanges()[changedRecords].length || this.parent.editModule.getBatchChanges()[addedRecords].length || this.parent.editModule.getBatchChanges()[deletedRecords].length) && (key === "Save" || key === "Cancel")) {
              continue;
            } else if (isNullOrUndefined(args.parentItem) && args.event && !this.ensureTarget(args.event.target, dItem.target)) {
              this.hiddenItems.push(item.text);
            }
          } else if (item.target && args.event && !this.ensureTarget(args.event.target, item.target)) {
            if (item.separator) {
              hideSepItems.push(item.id);
            } else {
              this.hiddenItems.push(item.text);
            }
          } else if (this.ensureTarget(args.event.target, item.target) && item.separator) {
            showSepItems.push(item.id);
          }
        }
        if (showSepItems.length > 0) {
          this.contextMenu.showItems(showSepItems, true);
        }
        this.contextMenu.enableItems(this.disableItems, false);
        this.contextMenu.hideItems(this.hiddenItems);
        if (hideSepItems.length > 0) {
          this.contextMenu.hideItems(hideSepItems, true);
        }
        this.eventArgs = args.event;
        args.column = this.targetColumn;
        args.rowInfo = this.targetRowdata;
        this.parent.trigger(contextMenuOpen, args);
        if (args.cancel || this.hiddenItems.length === args.items.length && !args.parentItem) {
          this.updateItemStatus();
          args.cancel = true;
        }
      }
      applyBiggerTheme(this.parent.element, this.contextMenu.element.parentElement);
    };
    ContextMenu3.prototype.ensureTarget = function(targetElement, selector) {
      var target = targetElement;
      if (this.ensureFrozenHeader(targetElement) && (selector === menuClass.header || selector === menuClass.content)) {
        target = closest(targetElement, selector === menuClass.header ? "thead" : tbody);
      } else if (selector === menuClass.content || selector === menuClass.header) {
        target = parentsUntil(closest(targetElement, "." + table), selector.substr(1, selector.length));
      } else {
        target = closest(targetElement, selector);
      }
      return target && parentsUntil(target, "e-grid") === this.parent.element;
    };
    ContextMenu3.prototype.ensureFrozenHeader = function(targetElement) {
      return this.parent.frozenRows && closest(targetElement, menuClass.header) ? true : false;
    };
    ContextMenu3.prototype.ensureDisabledStatus = function(item) {
      var status = false;
      switch (item) {
        case "AutoFitAll":
        case "AutoFit":
          status = !(this.parent.ensureModuleInjected(Resize) && !this.parent.isEdit) || this.targetColumn && !this.targetColumn.field && item === "AutoFit";
          break;
        case "Group":
          if (!this.parent.allowGrouping || this.parent.ensureModuleInjected(Group) && this.targetColumn && this.parent.groupSettings.columns.indexOf(this.targetColumn.field) >= 0 || this.targetColumn && !this.targetColumn.field) {
            status = true;
          }
          break;
        case "Ungroup":
          if (!this.parent.allowGrouping || !this.parent.ensureModuleInjected(Group) || this.parent.ensureModuleInjected(Group) && this.targetColumn && this.parent.groupSettings.columns.indexOf(this.targetColumn.field) < 0) {
            status = true;
          }
          break;
        case "Edit":
        case "Delete":
        case "Save":
        case "Cancel":
          if (!this.parent.editModule || this.parent.getDataRows().length === 0) {
            status = true;
          }
          break;
        case "Copy":
          if (this.parent.getSelectedRowIndexes().length === 0 && this.parent.getSelectedRowCellIndexes().length === 0 || this.parent.getCurrentViewRecords().length === 0) {
            status = true;
          }
          break;
        case "export":
          if (!(this.parent.allowExcelExport && this.parent.ensureModuleInjected(ExcelExport)) && !(this.parent.allowPdfExport && this.parent.ensureModuleInjected(PdfExport))) {
            status = true;
          }
          break;
        case "PdfExport":
          if (!this.parent.allowPdfExport || !this.parent.ensureModuleInjected(PdfExport)) {
            status = true;
          }
          break;
        case "ExcelExport":
        case "CsvExport":
          if (!this.parent.allowExcelExport || !this.parent.ensureModuleInjected(ExcelExport)) {
            status = true;
          }
          break;
        case "SortAscending":
        case "SortDescending":
          if (!this.parent.allowSorting || !this.parent.ensureModuleInjected(Sort) || this.targetColumn && !this.targetColumn.field) {
            status = true;
          } else if (this.parent.ensureModuleInjected(Sort) && this.parent.sortSettings.columns.length > 0 && this.targetColumn) {
            var sortColumns = this.parent.sortSettings.columns;
            for (var i = 0; i < sortColumns.length; i++) {
              if (sortColumns[parseInt(i.toString(), 10)].field === this.targetColumn.field && sortColumns[parseInt(i.toString(), 10)].direction.toLowerCase() === item.toLowerCase().replace("sort", "").toLocaleLowerCase()) {
                status = true;
              }
            }
          }
          break;
        case "FirstPage":
        case "PrevPage":
          if (!this.parent.allowPaging || !this.parent.ensureModuleInjected(Page) || this.parent.getCurrentViewRecords().length === 0 || this.parent.ensureModuleInjected(Page) && this.parent.pageSettings.currentPage === 1) {
            status = true;
          }
          break;
        case "LastPage":
        case "NextPage":
          if (!this.parent.allowPaging || !this.parent.ensureModuleInjected(Page) || this.parent.getCurrentViewRecords().length === 0 || this.parent.ensureModuleInjected(Page) && this.parent.pageSettings.currentPage === this.getLastPage()) {
            status = true;
          }
          break;
      }
      return status;
    };
    ContextMenu3.prototype.getContextMenu = function() {
      return this.element;
    };
    ContextMenu3.prototype.destroy = function() {
      var gridElement = this.parent.element;
      if (!gridElement || !gridElement.querySelector("." + gridHeader) && !gridElement.querySelector("." + gridContent)) {
        return;
      }
      if (this.contextMenu) {
        this.contextMenu.select = null;
        this.contextMenu.beforeOpen = null;
        this.contextMenu.onOpen = null;
        this.contextMenu.onClose = null;
      }
      this.removeEventListener();
      this.contextMenu.destroy();
      if (this.element.parentNode) {
        remove(this.element);
      }
      this.parent.element.classList.remove("e-noselect");
    };
    ContextMenu3.prototype.getModuleName = function() {
      return "contextMenu";
    };
    ContextMenu3.prototype.generateID = function(item) {
      return this.gridID + "_cmenu_" + item;
    };
    ContextMenu3.prototype.getKeyFromId = function(id) {
      return id.replace(this.gridID + "_cmenu_", "");
    };
    ContextMenu3.prototype.buildDefaultItems = function(item) {
      var menuItem;
      switch (item) {
        case "AutoFitAll":
          menuItem = {
            target: menuClass.header,
            iconCss: menuClass.autofitall
          };
          break;
        case "AutoFit":
          menuItem = {
            target: menuClass.header,
            iconCss: menuClass.autofit
          };
          break;
        case "Group":
          menuItem = {
            target: menuClass.header,
            iconCss: menuClass.group
          };
          break;
        case "Ungroup":
          menuItem = {
            target: menuClass.header,
            iconCss: menuClass.ungroup
          };
          break;
        case "Edit":
          menuItem = {
            target: menuClass.content,
            iconCss: menuClass.editIcon
          };
          break;
        case "Delete":
          menuItem = {
            target: menuClass.content,
            iconCss: menuClass.delete
          };
          break;
        case "Save":
          menuItem = {
            target: menuClass.edit,
            iconCss: menuClass.save
          };
          break;
        case "Cancel":
          menuItem = {
            target: menuClass.edit,
            iconCss: menuClass.cancel
          };
          break;
        case "Copy":
          menuItem = {
            target: menuClass.content,
            iconCss: menuClass.copy
          };
          break;
        case "export":
          menuItem = {
            target: menuClass.content
          };
          break;
        case "PdfExport":
          menuItem = {
            target: menuClass.content,
            iconCss: menuClass.pdf
          };
          break;
        case "ExcelExport":
          menuItem = {
            target: menuClass.content,
            iconCss: menuClass.excel
          };
          break;
        case "CsvExport":
          menuItem = {
            target: menuClass.content,
            iconCss: menuClass.csv
          };
          break;
        case "SortAscending":
          menuItem = {
            target: menuClass.header,
            iconCss: menuClass.ascending
          };
          break;
        case "SortDescending":
          menuItem = {
            target: menuClass.header,
            iconCss: menuClass.descending
          };
          break;
        case "FirstPage":
          menuItem = {
            target: menuClass.pager,
            iconCss: menuClass.fPage
          };
          break;
        case "PrevPage":
          menuItem = {
            target: menuClass.pager,
            iconCss: menuClass.pPage
          };
          break;
        case "LastPage":
          menuItem = {
            target: menuClass.pager,
            iconCss: menuClass.lPage
          };
          break;
        case "NextPage":
          menuItem = {
            target: menuClass.pager,
            iconCss: menuClass.nPage
          };
          break;
      }
      this.defaultItems["" + item] = {
        text: this.getLocaleText(item),
        id: this.generateID(item),
        target: menuItem.target,
        iconCss: menuItem.iconCss ? "e-icons " + menuItem.iconCss : ""
      };
      return this.defaultItems["" + item];
    };
    ContextMenu3.prototype.getDefaultItems = function() {
      return ["AutoFitAll", "AutoFit", "Group", "Ungroup", "Edit", "Delete", "Save", "Cancel", "Copy", "export", "PdfExport", "ExcelExport", "CsvExport", "SortAscending", "SortDescending", "FirstPage", "PrevPage", "LastPage", "NextPage"];
    };
    ContextMenu3.prototype.setLocaleKey = function() {
      var localeKeys = {
        "AutoFitAll": "autoFitAll",
        "AutoFit": "autoFit",
        "Copy": "Copy",
        "Group": "Group",
        "Ungroup": "Ungroup",
        "Edit": "EditRecord",
        "Delete": "DeleteRecord",
        "Save": "Save",
        "Cancel": "CancelButton",
        "PdfExport": "Pdfexport",
        "ExcelExport": "Excelexport",
        "CsvExport": "Csvexport",
        "export": "Export",
        "SortAscending": "SortAscending",
        "SortDescending": "SortDescending",
        "FirstPage": "FirstPage",
        "LastPage": "LastPage",
        "PrevPage": "PreviousPage",
        "NextPage": "NextPage"
      };
      return localeKeys;
    };
    ContextMenu3.prototype.getColumn = function(e) {
      var cell = closest(e.target, "th.e-headercell");
      if (cell) {
        var uid2 = cell.querySelector(".e-headercelldiv, .e-stackedheadercelldiv").getAttribute("e-mappinguid");
        return this.parent.getColumnByUid(uid2);
      } else {
        var ele = this.parent.getRowInfo(e.target).column;
        return ele || null;
      }
    };
    ContextMenu3.prototype.selectRow = function(e, isSelectable) {
      this.cell = e.target;
      this.row = closest(e.target, "tr.e-row") || this.row;
      if (this.row && isSelectable && !parentsUntil(e.target, "e-gridpager")) {
        this.parent.selectRow(parseInt(this.row.getAttribute(ariaRowIndex), 10) - 1);
      }
    };
    return ContextMenu3;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/freeze.js
var Freeze = (
  /** @class */
  function() {
    function Freeze2(parent, locator) {
      this.parent = parent;
      this.locator = locator;
      this.addEventListener();
    }
    Freeze2.prototype.getModuleName = function() {
      return "freeze";
    };
    Freeze2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(initialLoad, this.instantiateRenderer, this);
      this.parent.on(destroy, this.destroy, this);
    };
    Freeze2.prototype.instantiateRenderer = function() {
      this.parent.log("limitation", this.getModuleName());
    };
    Freeze2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(initialLoad, this.instantiateRenderer);
      this.parent.off(destroy, this.destroy);
    };
    Freeze2.prototype.destroy = function() {
      this.removeEventListener();
    };
    return Freeze2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/column-menu.js
var ColumnMenu = (
  /** @class */
  function() {
    function ColumnMenu2(parent, serviceLocator) {
      this.defaultItems = {};
      this.localeText = this.setLocaleKey();
      this.disableItems = [];
      this.hiddenItems = [];
      this.isOpen = false;
      this.GROUP = "e-icon-group";
      this.UNGROUP = "e-icon-ungroup";
      this.ASCENDING = "e-icon-ascending";
      this.DESCENDING = "e-icon-descending";
      this.ROOT = "e-columnmenu";
      this.FILTER = "e-icon-filter";
      this.POP = "e-filter-popup";
      this.WRAP = "e-col-menu";
      this.COL_POP = "e-colmenu-popup";
      this.CHOOSER = "_chooser_";
      this.AUTOFIT = "e-icon-autofit";
      this.AUTOFITALL = "e-icon-autofitall";
      this.COLUMNCHOOSER = "e-icon-columnchooser";
      this.parent = parent;
      this.gridID = parent.element.id;
      this.serviceLocator = serviceLocator;
      this.addEventListener();
      if (this.parent.enableAdaptiveUI) {
        this.setFullScreenDialog();
      }
    }
    ColumnMenu2.prototype.wireEvents = function() {
      if (!this.parent.enableAdaptiveUI) {
        var elements = this.getColumnMenuHandlers();
        for (var i = 0; i < elements.length; i++) {
          EventHandler.add(elements[parseInt(i.toString(), 10)], "mousedown", this.columnMenuHandlerDown, this);
        }
      }
    };
    ColumnMenu2.prototype.unwireEvents = function() {
      if (!this.parent.enableAdaptiveUI) {
        var elements = this.getColumnMenuHandlers();
        for (var i = 0; i < elements.length; i++) {
          EventHandler.remove(elements[parseInt(i.toString(), 10)], "mousedown", this.columnMenuHandlerDown);
        }
      }
    };
    ColumnMenu2.prototype.setFullScreenDialog = function() {
      if (this.serviceLocator) {
        this.serviceLocator.registerAdaptiveService(this, this.parent.enableAdaptiveUI, ResponsiveDialogAction.isColMenu);
      }
    };
    ColumnMenu2.prototype.destroy = function() {
      var gridElement = this.parent.element;
      if (!gridElement.querySelector("." + gridContent) && !gridElement.querySelector("." + gridHeader) || !gridElement) {
        return;
      }
      if (this.columnMenu) {
        this.columnMenu.destroy();
      }
      this.removeEventListener();
      this.unwireFilterEvents();
      this.unwireEvents();
      if (!this.parent.enableAdaptiveUI && this.element.parentNode) {
        remove(this.element);
      }
    };
    ColumnMenu2.prototype.columnMenuHandlerClick = function(e) {
      if (e.target.classList.contains("e-columnmenu")) {
        if (this.parent.enableAdaptiveUI) {
          this.headerCell = this.getHeaderCell(e);
          var col = this.getColumn();
          this.responsiveDialogRenderer.isCustomDialog = true;
          this.parent.notify(renderResponsiveChangeAction, {
            action: 4
          });
          this.parent.notify(filterOpen, {
            col,
            target: e.target,
            isClose: null,
            id: null
          });
          this.responsiveDialogRenderer.showResponsiveDialog(null, col);
        } else {
          this.columnMenu.items = this.getItems();
          this.columnMenu.dataBind();
          if (this.isOpen && this.headerCell !== this.getHeaderCell(e) || document.querySelector(".e-grid-menu .e-menu-parent.e-ul")) {
            this.columnMenu.close();
            this.openColumnMenu(e);
          } else if (!this.isOpen) {
            this.openColumnMenu(e);
          } else {
            this.columnMenu.close();
          }
        }
      }
    };
    ColumnMenu2.prototype.openColumnMenuByField = function(field) {
      this.openColumnMenu({
        target: this.parent.getColumnHeaderByField(field).querySelector(".e-columnmenu")
      });
    };
    ColumnMenu2.prototype.afterFilterColumnMenuClose = function() {
      if (this.columnMenu) {
        this.columnMenu.items = this.getItems();
        this.columnMenu.dataBind();
        this.columnMenu.close();
      }
    };
    ColumnMenu2.prototype.openColumnMenu = function(e) {
      var contentRect = this.parent.getContent().getClientRects()[0];
      var headerEle = this.parent.getHeaderContent();
      var headerElemCliRect = headerEle.getBoundingClientRect();
      var pos = {
        top: 0,
        left: 0
      };
      this.element.style.cssText = "display:block;visibility:hidden";
      var elePos = this.element.getBoundingClientRect();
      var gClient = this.parent.element.getBoundingClientRect();
      this.element.style.cssText = "display:none;visibility:visible";
      this.headerCell = this.getHeaderCell(e);
      if (this.parent.enableRtl) {
        pos = this.parent.enableStickyHeader ? calculatePosition(this.headerCell, "left", "bottom", true) : calculatePosition(this.headerCell, "left", "bottom");
      } else {
        pos = this.parent.enableStickyHeader ? calculatePosition(this.headerCell, "right", "bottom", true) : calculatePosition(this.headerCell, "right", "bottom");
        pos.left -= elePos.width;
        if (headerEle.classList.contains("e-sticky")) {
          pos.top = this.parent.element.offsetTop + headerElemCliRect.top + headerElemCliRect.height;
          if (headerElemCliRect.top + headerElemCliRect.height > contentRect.top) {
            pos.top += headerElemCliRect.top + headerElemCliRect.height - contentRect.top;
          }
        } else if (this.parent.enableStickyHeader) {
          pos.top = this.parent.element.offsetTop + headerEle.offsetTop + headerElemCliRect.height;
        }
        if (pos.left + elePos.width + 1 >= gClient.right) {
          pos.left -= 35;
        }
      }
      this.columnMenu["open"](pos.top, pos.left);
      if (e.preventDefault) {
        e.preventDefault();
      }
      applyBiggerTheme(this.parent.element, this.columnMenu.element.parentElement);
    };
    ColumnMenu2.prototype.columnMenuHandlerDown = function() {
      this.isOpen = !(this.element.style.display === "none" || this.element.style.display === "");
    };
    ColumnMenu2.prototype.getColumnMenuHandlers = function() {
      return [].slice.call(this.parent.getHeaderTable().getElementsByClassName(this.ROOT));
    };
    ColumnMenu2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(headerRefreshed, this.wireEvents, this);
      this.parent.on(uiUpdate, this.enableAfterRenderMenu, this);
      this.parent.on(initialEnd, this.render, this);
      if (this.isFilterItemAdded()) {
        this.parent.on(filterDialogCreated, this.filterPosition, this);
      }
      this.parent.on(setFullScreenDialog, this.setFullScreenDialog, this);
      this.parent.on(renderResponsiveChangeAction, this.renderResponsiveChangeAction, this);
      this.parent.on(click, this.columnMenuHandlerClick, this);
      this.parent.on(afterFilterColumnMenuClose, this.afterFilterColumnMenuClose, this);
      this.parent.on(keyPressed, this.keyPressHandler, this);
      this.parent.on(destroy, this.destroy, this);
    };
    ColumnMenu2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(headerRefreshed, this.unwireEvents);
      this.parent.off(uiUpdate, this.enableAfterRenderMenu);
      this.parent.off(initialEnd, this.render);
      if (this.isFilterItemAdded()) {
        this.parent.off(filterDialogCreated, this.filterPosition);
      }
      this.parent.off(setFullScreenDialog, this.setFullScreenDialog);
      this.parent.off(renderResponsiveChangeAction, this.renderResponsiveChangeAction);
      this.parent.off(click, this.columnMenuHandlerClick);
      this.parent.on(afterFilterColumnMenuClose, this.afterFilterColumnMenuClose);
      this.parent.off(keyPressed, this.keyPressHandler);
      this.parent.off(destroy, this.destroy);
    };
    ColumnMenu2.prototype.keyPressHandler = function(e) {
      var gObj = this.parent;
      if (e.action === "altDownArrow" && !this.parent.enableAdaptiveUI) {
        var element = gObj.focusModule.currentInfo.element;
        if (element && element.classList.contains("e-headercell")) {
          var column = gObj.getColumnByUid(element.firstElementChild.getAttribute("e-mappinguid"));
          this.openColumnMenuByField(column.field);
        }
      }
    };
    ColumnMenu2.prototype.enableAfterRenderMenu = function(e) {
      if (e.module === this.getModuleName() && e.enable) {
        if (this.columnMenu) {
          this.columnMenu.destroy();
          remove(this.element);
        }
        if (!this.parent.enableAdaptiveUI) {
          this.render();
        }
      }
    };
    ColumnMenu2.prototype.render = function() {
      if (this.parent.enableAdaptiveUI) {
        return;
      }
      this.l10n = this.serviceLocator.getService("localization");
      this.element = this.parent.createElement("ul", {
        id: this.gridID + "_columnmenu",
        className: "e-colmenu"
      });
      this.element.setAttribute("aria-label", this.l10n.getConstant("ColumnMenuDialogARIA"));
      this.parent.element.appendChild(this.element);
      this.columnMenu = new ContextMenu({
        cssClass: this.parent.cssClass ? "e-grid-menu e-grid-column-menu " + this.parent.cssClass : "e-grid-menu e-grid-column-menu",
        enableRtl: this.parent.enableRtl,
        enablePersistence: this.parent.enablePersistence,
        locale: this.parent.locale,
        items: this.getItems(),
        select: this.columnMenuItemClick.bind(this),
        beforeOpen: this.columnMenuBeforeOpen.bind(this),
        onOpen: this.columnMenuOnOpen.bind(this),
        onClose: this.columnMenuOnClose.bind(this),
        beforeItemRender: this.beforeMenuItemRender.bind(this),
        beforeClose: this.columnMenuBeforeClose.bind(this)
      });
      if (this.element && parentsUntil(this.element, "e-popup")) {
        this.element.classList.add(this.COL_POP);
      }
      this.columnMenu.appendTo(this.element);
      this.wireFilterEvents();
    };
    ColumnMenu2.prototype.wireFilterEvents = function() {
      if (!Browser.isDevice && this.isFilterItemAdded()) {
        EventHandler.add(this.element, "mouseover", this.appendFilter, this);
      }
    };
    ColumnMenu2.prototype.unwireFilterEvents = function() {
      if (!Browser.isDevice && this.isFilterItemAdded() && !this.parent.enableAdaptiveUI) {
        EventHandler.remove(this.element, "mouseover", this.appendFilter);
      }
    };
    ColumnMenu2.prototype.beforeMenuItemRender = function(args) {
      var _a;
      if (this.isChooserItem(args.item)) {
        var field_1 = this.getKeyFromId(args.item.id, this.CHOOSER);
        var column = this.parent.columnModel.filter(function(col) {
          return col.field === field_1;
        });
        var check = createCheckBox(this.parent.createElement, false, {
          label: args.item.text,
          checked: column[0].visible
        });
        if (this.parent.enableRtl) {
          check.classList.add("e-rtl");
        }
        if (this.parent.cssClass) {
          if (this.parent.cssClass.indexOf(" ") !== -1) {
            (_a = check.classList).add.apply(_a, this.parent.cssClass.split(" "));
          } else {
            check.classList.add(this.parent.cssClass);
          }
        }
        args.element.innerHTML = "";
        args.element.appendChild(check);
      } else if (args.item.id && this.getKeyFromId(args.item.id) === "Filter") {
        args.element.appendChild(this.parent.createElement("span", {
          className: "e-icons e-caret"
        }));
        args.element.className += "e-filter-item e-menu-caret-icon";
      }
    };
    ColumnMenu2.prototype.columnMenuBeforeClose = function(args) {
      if (args.event && args.event.target instanceof Document && args.event.type === "scroll") {
        if (!this.parent.enableStickyHeader) {
          args.cancel = true;
        }
        return;
      }
      var colChooser = args.event ? closest(args.event.target, ".e-menu-item") : null;
      if (!isNullOrUndefined(args.parentItem) && this.getKeyFromId(args.parentItem.id) === "ColumnChooser" && colChooser && this.isChooserItem(colChooser)) {
        args.cancel = args.event && args.event.code === "Escape" ? false : true;
      } else if (args.event && (closest(args.event.target, "." + this.POP) || args.event.currentTarget && args.event.currentTarget.activeElement && parentsUntil(args.event.currentTarget.activeElement, "e-filter-popup") || parentsUntil(args.event.target, "e-popup") && parentsUntil(args.event.target, "e-colmenu-popup") || parentsUntil(args.event.target, "e-multiselect-flmenu") || parentsUntil(args.event.target, "e-popup-wrapper")) && !Browser.isDevice) {
        args.cancel = true;
      } else if (args.event && args.event.target && args.event.target.classList.contains("e-filter-item") && args.event.key === "Enter") {
        args.cancel = true;
      } else if (this.parent.isColumnMenuFilterClosing) {
        this.parent.isColumnMenuFilterClosing = false;
        args.cancel = true;
      }
    };
    ColumnMenu2.prototype.isChooserItem = function(item) {
      return item.id && item.id.indexOf("_colmenu_") >= 0 && this.getKeyFromId(item.id, this.CHOOSER).indexOf("_colmenu_") === -1;
    };
    ColumnMenu2.prototype.columnMenuBeforeOpen = function(args) {
      args.column = this.targetColumn = this.getColumn();
      this.parent.trigger(columnMenuOpen, args);
      for (var _i = 0, _a = args.items; _i < _a.length; _i++) {
        var item = _a[_i];
        var key = this.getKeyFromId(item.id);
        var dItem = this.defaultItems["" + key];
        if (this.getDefaultItems().indexOf(key) !== -1 && this.ensureDisabledStatus(key) && !dItem.hide) {
          this.disableItems.push(item.text);
        }
        if (item.hide) {
          this.hiddenItems.push(item.text);
        }
      }
      this.columnMenu.enableItems(this.disableItems, false);
      this.columnMenu.hideItems(this.hiddenItems);
    };
    ColumnMenu2.prototype.columnMenuOnOpen = function(args) {
      if (args.element.className === "e-menu-parent e-ul ") {
        if (args.element.offsetHeight > window.innerHeight || this.parent.element.offsetHeight > window.innerHeight) {
          args.element.style.maxHeight = window.innerHeight * 0.8 + "px";
          args.element.style.overflowY = "auto";
          if (this.parent.enableStickyHeader) {
            args.element.style.position = "fixed";
          }
        }
      }
    };
    ColumnMenu2.prototype.ensureDisabledStatus = function(item) {
      var status = false;
      switch (item) {
        case "Group":
          if (!this.parent.allowGrouping || this.parent.ensureModuleInjected(Group) && this.targetColumn && this.parent.groupSettings.columns.indexOf(this.targetColumn.field) >= 0 || this.targetColumn && !this.targetColumn.allowGrouping) {
            status = true;
          }
          break;
        case "AutoFitAll":
        case "AutoFit":
          status = !this.parent.ensureModuleInjected(Resize);
          break;
        case "Ungroup":
          if (!this.parent.ensureModuleInjected(Group) || this.parent.ensureModuleInjected(Group) && this.targetColumn && this.parent.groupSettings.columns.indexOf(this.targetColumn.field) < 0) {
            status = true;
          }
          break;
        case "SortDescending":
        case "SortAscending":
          if (this.parent.allowSorting && this.parent.ensureModuleInjected(Sort) && this.parent.sortSettings.columns.length > 0 && this.targetColumn && this.targetColumn.allowSorting) {
            var sortColumns = this.parent.sortSettings.columns;
            for (var i = 0; i < sortColumns.length; i++) {
              if (sortColumns[parseInt(i.toString(), 10)].field === this.targetColumn.field && sortColumns[parseInt(i.toString(), 10)].direction.toLocaleLowerCase() === item.toLocaleLowerCase().replace("sort", "")) {
                status = true;
              }
            }
          } else if (!this.parent.allowSorting || !this.parent.ensureModuleInjected(Sort) || this.parent.allowSorting && this.targetColumn && !this.targetColumn.allowSorting) {
            status = true;
          }
          break;
        case "Filter":
          if (this.parent.allowFiltering && this.parent.filterSettings.type !== "FilterBar" && this.parent.ensureModuleInjected(Filter) && this.targetColumn && this.targetColumn.allowFiltering) {
            status = false;
          } else if (this.parent.ensureModuleInjected(Filter) && this.parent.allowFiltering && this.targetColumn && (!this.targetColumn.allowFiltering || this.parent.filterSettings.type === "FilterBar")) {
            status = true;
          }
      }
      return status;
    };
    ColumnMenu2.prototype.columnMenuItemClick = function(args) {
      var item = this.isChooserItem(args.item) ? "ColumnChooser" : this.getKeyFromId(args.item.id);
      switch (item) {
        case "AutoFit":
          this.parent.autoFitColumns(this.targetColumn.field);
          break;
        case "AutoFitAll":
          this.parent.autoFitColumns([]);
          break;
        case "Ungroup":
          this.parent.ungroupColumn(this.targetColumn.field);
          break;
        case "Group":
          this.parent.groupColumn(this.targetColumn.field);
          break;
        case "SortAscending":
          this.parent.sortColumn(this.targetColumn.field, "Ascending");
          break;
        case "SortDescending":
          this.parent.sortColumn(this.targetColumn.field, "Descending");
          break;
        case "ColumnChooser":
          var key = this.getKeyFromId(args.item.id, this.CHOOSER);
          var checkbox = args.element.querySelector(".e-checkbox-wrapper .e-frame");
          if (checkbox && checkbox.classList.contains("e-check")) {
            checkbox.classList.remove("e-check");
            this.parent.hideColumns(key, "field");
          } else if (checkbox) {
            this.parent.showColumns(key, "field");
            checkbox.classList.add("e-check");
          }
          break;
        case "Filter":
          this.getFilter(args.element, args.item.id);
          break;
      }
      args.column = this.targetColumn;
      this.parent.trigger(columnMenuClick, args);
    };
    ColumnMenu2.prototype.columnMenuOnClose = function(args) {
      var parent = "parentObj";
      if (args.items.length > 0 && args.items[0]["" + parent] instanceof ContextMenu) {
        this.columnMenu.enableItems(this.disableItems, false);
        this.disableItems = [];
        this.columnMenu.showItems(this.hiddenItems);
        this.hiddenItems = [];
        if (this.isFilterPopupOpen()) {
          this.getFilter(args.element, args.element.id, true);
        }
      }
      if (!isNullOrUndefined(args.parentItem) && this.getKeyFromId(args.parentItem.id) === "ColumnChooser") {
        if (this.columnMenu.element.querySelector(".e-selected")) {
          this.columnMenu.element.querySelector(".e-selected").focus();
        }
      } else {
        this.parent.notify(restoreFocus, {});
      }
    };
    ColumnMenu2.prototype.getDefaultItems = function() {
      return ["AutoFitAll", "AutoFit", "SortAscending", "SortDescending", "Group", "Ungroup", "ColumnChooser", "Filter"];
    };
    ColumnMenu2.prototype.getItems = function() {
      var items = [];
      var defultItems = this.parent.columnMenuItems ? this.parent.columnMenuItems : this.getDefault();
      for (var _i = 0, defultItems_1 = defultItems; _i < defultItems_1.length; _i++) {
        var item = defultItems_1[_i];
        if (typeof item === "string") {
          if (item === "ColumnChooser") {
            var col = this.getDefaultItem(item);
            col.items = this.createChooserItems();
            items.push(col);
          } else {
            items.push(this.getDefaultItem(item));
          }
        } else {
          items.push(item);
        }
      }
      return items;
    };
    ColumnMenu2.prototype.getDefaultItem = function(item) {
      var menuItem = {};
      switch (item) {
        case "SortAscending":
          menuItem = {
            iconCss: this.ASCENDING
          };
          break;
        case "SortDescending":
          menuItem = {
            iconCss: this.DESCENDING
          };
          break;
        case "Group":
          menuItem = {
            iconCss: this.GROUP
          };
          break;
        case "Ungroup":
          menuItem = {
            iconCss: this.UNGROUP
          };
          break;
        case "Filter":
          menuItem = {
            iconCss: this.FILTER
          };
          break;
        case "ColumnChooser":
          menuItem = {
            iconCss: this.COLUMNCHOOSER
          };
          break;
        case "AutoFit":
          menuItem = {
            iconCss: this.AUTOFIT
          };
          break;
        case "AutoFitAll":
          menuItem = {
            iconCss: this.AUTOFITALL
          };
          break;
      }
      this.defaultItems["" + item] = {
        text: this.getLocaleText(item),
        id: this.generateID(item),
        iconCss: menuItem.iconCss ? "e-icons " + menuItem.iconCss : null
      };
      return this.defaultItems["" + item];
    };
    ColumnMenu2.prototype.getLocaleText = function(item) {
      return this.l10n.getConstant(this.localeText["" + item]);
    };
    ColumnMenu2.prototype.generateID = function(item, append2) {
      return this.gridID + "_colmenu_" + (append2 ? append2 + item : item);
    };
    ColumnMenu2.prototype.getKeyFromId = function(id, append2) {
      return id.indexOf("_colmenu_") > 0 && id.replace(this.gridID + "_colmenu_" + (append2 ? append2 : ""), "");
    };
    ColumnMenu2.prototype.getColumnMenu = function() {
      return this.element;
    };
    ColumnMenu2.prototype.getModuleName = function() {
      return "columnMenu";
    };
    ColumnMenu2.prototype.setLocaleKey = function() {
      var localeKeys = {
        "AutoFitAll": "autoFitAll",
        "AutoFit": "autoFit",
        "Group": "Group",
        "Ungroup": "Ungroup",
        "SortAscending": "SortAscending",
        "SortDescending": "SortDescending",
        "ColumnChooser": "Columnchooser",
        "Filter": "FilterMenu"
      };
      return localeKeys;
    };
    ColumnMenu2.prototype.getHeaderCell = function(e) {
      return closest(e.target, "th.e-headercell");
    };
    ColumnMenu2.prototype.getColumn = function() {
      if (this.headerCell) {
        var uid2 = this.headerCell.querySelector(".e-headercelldiv").getAttribute("e-mappinguid");
        return this.parent.getColumnByUid(uid2);
      }
      return null;
    };
    ColumnMenu2.prototype.createChooserItems = function() {
      var items = [];
      for (var _i = 0, _a = this.parent.columnModel; _i < _a.length; _i++) {
        var col = _a[_i];
        if (col.showInColumnChooser && col.field) {
          items.push({
            id: this.generateID(col.field, this.CHOOSER),
            text: col.headerText ? col.headerText : col.field
          });
        }
      }
      return items;
    };
    ColumnMenu2.prototype.appendFilter = function(e) {
      var filter = "Filter";
      if (!this.defaultItems["" + filter]) {
        return;
      } else {
        var key = this.defaultItems["" + filter].id;
        if (closest(e.target, "#" + key) && !this.isFilterPopupOpen()) {
          this.getFilter(e.target, key);
        } else if (!closest(e.target, "#" + key) && this.isFilterPopupOpen()) {
          this.getFilter(e.target, key, true);
        }
      }
    };
    ColumnMenu2.prototype.getFilter = function(target, id, isClose) {
      var filterPopup = this.getFilterPop();
      if (filterPopup) {
        filterPopup.style.display = !Browser.isDevice && isClose ? "none" : "block";
        if (filterPopup.style.display !== "none") {
          if (this.parent.filterSettings.type === "Menu") {
            if (filterPopup.querySelector(".e-flmenu-input")) {
              filterPopup.querySelector(".e-flmenu-input").focus();
            } else if (filterPopup.querySelector(".e-flmenu-valuediv")) {
              var firstElementChild = filterPopup.querySelector(".e-flmenu-valuediv").firstElementChild;
              if (!isNullOrUndefined(firstElementChild)) {
                firstElementChild.focus();
              }
            }
          } else if (this.parent.filterSettings.type === "CheckBox" || this.parent.filterSettings.type === "Excel") {
            if (filterPopup.querySelector(".e-searchinput")) {
              filterPopup.querySelector(".e-searchinput").focus();
            }
          }
        }
      } else {
        this.parent.notify(filterOpen, {
          col: this.targetColumn,
          target,
          isClose,
          id
        });
      }
    };
    ColumnMenu2.prototype.setPosition = function(li, ul) {
      var gridPos = this.parent.element.getBoundingClientRect();
      var liPos = li.getBoundingClientRect();
      var left = liPos.left - gridPos.left;
      var top = liPos.top - gridPos.top;
      if (gridPos.height < top) {
        top = top - ul.offsetHeight + liPos.height;
      } else if (gridPos.height < top + ul.offsetHeight) {
        top = gridPos.height - ul.offsetHeight;
      }
      if (window.innerHeight < ul.offsetHeight + top + gridPos.top) {
        top = window.innerHeight - ul.offsetHeight - gridPos.top;
      }
      if (top + gridPos.top < 0) {
        top = 0;
      }
      if (this.parent.enableStickyHeader && gridPos.top <= 0) {
        top = liPos.top - gridPos.top;
      }
      left += this.parent.enableRtl ? -ul.offsetWidth : liPos.width;
      if (gridPos.width <= left + ul.offsetWidth) {
        left -= liPos.width + ul.offsetWidth;
        if (liPos.left < ul.offsetWidth) {
          left = liPos.left + ul.offsetWidth / 2;
        }
      } else if (left < 0) {
        left += ul.offsetWidth + liPos.width;
      }
      ul.style.top = top + "px";
      ul.style.left = left + "px";
    };
    ColumnMenu2.prototype.filterPosition = function() {
      var filterPopup = this.getFilterPop();
      if (this.parent.enableAdaptiveUI) {
        return;
      }
      filterPopup.classList.add(this.WRAP);
      if (!Browser.isDevice) {
        var disp = filterPopup.style.display;
        filterPopup.style.cssText += "display:block;visibility:hidden";
        var li = this.element.querySelector("." + this.FILTER);
        if (li) {
          this.setPosition(li.parentElement, filterPopup);
          filterPopup.style.cssText += "display:" + disp + ";visibility:visible";
        }
      }
    };
    ColumnMenu2.prototype.getDefault = function() {
      var items = [];
      if (this.parent.ensureModuleInjected(Resize)) {
        items.push("AutoFitAll");
        items.push("AutoFit");
      }
      if (this.parent.allowGrouping && this.parent.ensureModuleInjected(Group)) {
        items.push("Group");
        items.push("Ungroup");
      }
      if (this.parent.allowSorting && this.parent.ensureModuleInjected(Sort)) {
        items.push("SortAscending");
        items.push("SortDescending");
      }
      items.push("ColumnChooser");
      if (this.parent.allowFiltering && this.parent.filterSettings.type !== "FilterBar" && this.parent.ensureModuleInjected(Filter)) {
        items.push("Filter");
      }
      return items;
    };
    ColumnMenu2.prototype.isFilterPopupOpen = function() {
      var filterPopup = this.getFilterPop();
      return filterPopup && filterPopup.style.display !== "none";
    };
    ColumnMenu2.prototype.getFilterPop = function() {
      if (!isNullOrUndefined(this.targetColumn) && this.parent.filterSettings.type === "Menu" && Browser.isDevice) {
        return document.getElementById(this.targetColumn.uid + "-flmdlg");
      }
      var popElement = this.parent.element.querySelector("." + this.POP);
      if (!popElement) {
        var popupContainer = document.getElementById(this.parent.element.id + "_e-popup");
        popElement = popupContainer ? popupContainer.querySelector("." + this.POP) : null;
      }
      if (!popElement && this.parent.element.classList.contains("e-treelistgrid")) {
        var ganttElement = closest(this.parent.element, ".e-gantt");
        popElement = ganttElement ? ganttElement.querySelector("." + this.POP) : null;
      }
      return popElement;
    };
    ColumnMenu2.prototype.isFilterItemAdded = function() {
      return this.parent.columnMenuItems && this.parent.columnMenuItems.indexOf("Filter") >= 0 || !this.parent.columnMenuItems;
    };
    ColumnMenu2.prototype.renderResponsiveChangeAction = function(args) {
      this.responsiveDialogRenderer.action = args.action;
    };
    return ColumnMenu2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/foreign-key.js
var __extends44 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ForeignKey = (
  /** @class */
  function(_super) {
    __extends44(ForeignKey2, _super);
    function ForeignKey2(parent, serviceLocator) {
      var _this = _super.call(this, parent, serviceLocator) || this;
      _this.parent = parent;
      _this.serviceLocator = serviceLocator;
      _this.initEvent();
      return _this;
    }
    ForeignKey2.prototype.initEvent = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(initForeignKeyColumn, this.initForeignKeyColumns, this);
      this.parent.on(getForeignKeyData, this.getForeignKeyData, this);
      this.parent.on(generateQuery, this.generateQueryFormData, this);
    };
    ForeignKey2.prototype.initForeignKeyColumns = function(columns) {
      for (var i = 0; i < columns.length; i++) {
        columns[parseInt(i.toString(), 10)].dataSource = columns[parseInt(i.toString(), 10)].dataSource instanceof DataManager ? columns[parseInt(i.toString(), 10)].dataSource : isNullOrUndefined(columns[parseInt(i.toString(), 10)].dataSource) ? new DataManager() : "result" in columns[parseInt(i.toString(), 10)].dataSource ? columns[parseInt(i.toString(), 10)].dataSource : new DataManager(columns[parseInt(i.toString(), 10)].dataSource);
      }
    };
    ForeignKey2.prototype.eventfPromise = function(args, query, key, column) {
      var state = this.getStateEventArgument(query);
      var def = new Deferred();
      var deff = new Deferred();
      state.action = args.action;
      var dataModule = this.parent.getDataModule();
      if (!isNullOrUndefined(args.action) && args.action.requestType && dataModule.foreignKeyDataState.isDataChanged !== false) {
        dataModule.setForeignKeyDataState({
          isPending: true,
          resolver: deff.resolve
        });
        deff.promise.then(function() {
          def.resolve(column.dataSource);
        });
        state.setColumnData = this.parent.setForeignKeyData.bind(this.parent);
        this.parent.trigger(columnDataStateChange, state);
      } else {
        dataModule.setForeignKeyDataState({});
        def.resolve(key);
      }
      return def;
    };
    ForeignKey2.prototype.getForeignKeyData = function(args) {
      var _this = this;
      var foreignColumns = args.column ? [args.column] : this.parent.getForeignKeyColumns();
      if (this.parent.columnQueryMode === "ExcludeHidden") {
        foreignColumns = foreignColumns.filter(function(col) {
          return col.visible !== false;
        });
      }
      var allPromise = [];
      var _loop_1 = function(i2) {
        var promise = void 0;
        var query = args.isComplex ? this_1.genarateColumnQuery(foreignColumns[parseInt(i2.toString(), 10)]) : this_1.genarateQuery(foreignColumns[parseInt(i2.toString(), 10)], args.result.result, false, true);
        query.params = this_1.parent.query.params;
        var dataSource = foreignColumns[parseInt(i2.toString(), 10)].dataSource;
        if (dataSource && "result" in dataSource) {
          var def = this_1.eventfPromise(args, query, dataSource, foreignColumns[parseInt(i2.toString(), 10)]);
          promise = def.promise;
        } else if (!dataSource.ready || dataSource.dataSource.offline) {
          promise = dataSource.executeQuery(query);
        } else {
          promise = dataSource.ready.then(function() {
            return dataSource.executeQuery(query);
          });
        }
        allPromise.push(promise);
      };
      var this_1 = this;
      for (var i = 0; i < foreignColumns.length; i++) {
        _loop_1(i);
      }
      Promise.all(allPromise).then(function(responses) {
        for (var i2 = 0; i2 < responses.length; i2++) {
          foreignColumns[parseInt(i2.toString(), 10)].columnData = responses[parseInt(i2.toString(), 10)].result;
          if (foreignColumns[parseInt(i2.toString(), 10)].editType === "dropdownedit" && "result" in foreignColumns[parseInt(i2.toString(), 10)].dataSource) {
            foreignColumns[parseInt(i2.toString(), 10)].edit.params = extend(foreignColumns[parseInt(i2.toString(), 10)].edit.params, {
              dataSource: responses[parseInt(i2.toString(), 10)].result,
              query: new Query(),
              fields: {
                value: foreignColumns[parseInt(i2.toString(), 10)].foreignKeyField || foreignColumns[parseInt(i2.toString(), 10)].field,
                text: foreignColumns[parseInt(i2.toString(), 10)].foreignKeyValue
              }
            });
          }
        }
        args.promise.resolve(args.result);
      }).catch(function(e) {
        var errorMsg = e;
        if (!errorMsg.error) {
          errorMsg = {
            error: errorMsg
          };
        }
        _this.parent.log(["actionfailure", "foreign_key_failure"], errorMsg);
        if (args.promise && args.promise.reject) {
          args.promise.reject(e);
        }
        return e;
      });
    };
    ForeignKey2.prototype.generateQueryFormData = function(args) {
      args.predicate.predicate = this.genarateQuery(args.column, args.column.columnData, true);
    };
    ForeignKey2.prototype.genarateQuery = function(column, e, fromData, needQuery) {
      var gObj = this.parent;
      var predicates = [];
      var query = new Query();
      var field = fromData ? column.foreignKeyField : column.field;
      if (gObj.allowPaging || gObj.enableVirtualization || fromData) {
        e = new DataManager(gObj.allowGrouping && gObj.groupSettings.columns.length && !fromData ? e.records : e).executeLocal(new Query().select(field));
        var filteredValue = DataUtil.distinct(e, field, false);
        field = fromData ? column.field : column.foreignKeyField;
        for (var i = 0; i < filteredValue.length; i++) {
          if (filteredValue[parseInt(i.toString(), 10)] && filteredValue[parseInt(i.toString(), 10)].getDay) {
            predicates.push(getDatePredicate({
              field,
              operator: "equal",
              value: filteredValue[parseInt(i.toString(), 10)],
              matchCase: false
            }));
          } else {
            predicates.push(new Predicate(field, "equal", filteredValue[parseInt(i.toString(), 10)], false));
          }
        }
      }
      if (needQuery) {
        return predicates.length ? query.where(Predicate.or(predicates)) : query;
      }
      return predicates.length ? Predicate.or(predicates) : {
        predicates: []
      };
    };
    ForeignKey2.prototype.genarateColumnQuery = function(column) {
      var gObj = this.parent;
      var query = new Query();
      var queryColumn = this.isFiltered(column);
      if (queryColumn.isTrue) {
        query = this.filterQuery(query, queryColumn.column, true);
      }
      if (gObj.searchSettings.key.length) {
        var sSettings = gObj.searchSettings;
        if (column.dataSource instanceof DataManager && column.dataSource.adaptor.getModuleName && column.dataSource.adaptor.getModuleName() === "ODataV4Adaptor") {
          query = this.searchQuery(query, column, true);
        } else {
          query.search(sSettings.key, column.foreignKeyValue, sSettings.operator, sSettings.ignoreCase);
        }
      }
      return query;
    };
    ForeignKey2.prototype.isFiltered = function(column) {
      var filterColumn = this.parent.filterSettings.columns.filter(function(fColumn) {
        return fColumn.field === column.foreignKeyValue && fColumn.uid === column.uid;
      });
      return {
        column: filterColumn,
        isTrue: !!filterColumn.length
      };
    };
    ForeignKey2.prototype.getModuleName = function() {
      return "foreignKey";
    };
    ForeignKey2.prototype.destroy = function() {
      this.destroyEvent();
    };
    ForeignKey2.prototype.destroyEvent = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(initForeignKeyColumn, this.initForeignKeyColumns);
      this.parent.off(getForeignKeyData, this.getForeignKeyData);
      this.parent.off(generateQuery, this.generateQueryFormData);
    };
    return ForeignKey2;
  }(Data)
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/infinite-scroll.js
var InfiniteScroll = (
  /** @class */
  function() {
    function InfiniteScroll2(parent, serviceLocator) {
      this.infiniteCache = {};
      this.infiniteCurrentViewData = {};
      this.isDownScroll = false;
      this.isUpScroll = false;
      this.isScroll = true;
      this.enableContinuousScroll = false;
      this.initialRender = true;
      this.isRemove = false;
      this.isInitialCollapse = false;
      this.prevScrollTop = 0;
      this.actions = ["filtering", "searching", "grouping", "ungrouping", "reorder", "sorting", "refresh"];
      this.keys = [downArrow, upArrow, enter, shiftEnter];
      this.rowTop = 0;
      this.virtualInfiniteData = {};
      this.isCancel = false;
      this.emptyRowData = {};
      this.isNormaledit = false;
      this.isInfiniteScroll = false;
      this.isLastPage = false;
      this.isInitialRender = true;
      this.isFocusScroll = false;
      this.isGroupCollapse = false;
      this.infiniteDetailDestroy = false;
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      this.isNormaledit = this.parent.editSettings.mode === "Normal";
      this.addEventListener();
      this.widthService = serviceLocator.getService("widthService");
      this.rowModelGenerator = new RowModelGenerator(this.parent);
    }
    InfiniteScroll2.prototype.getModuleName = function() {
      return "infiniteScroll";
    };
    InfiniteScroll2.prototype.addEventListener = function() {
      this.parent.on(dataReady, this.onDataReady, this);
      this.parent.on(dataSourceModified, this.dataSourceModified, this);
      this.parent.on(infinitePageQuery, this.infinitePageQuery, this);
      this.parent.on(infiniteScrollHandler, this.infiniteScrollHandler, this);
      this.parent.on(beforeCellFocused, this.infiniteCellFocus, this);
      this.parent.on(appendInfiniteContent, this.appendInfiniteRows, this);
      this.parent.on(removeInfiniteRows, this.removeInfiniteCacheRows, this);
      this.parent.on(resetInfiniteBlocks, this.resetInfiniteBlocks, this);
      this.parent.on(setInfiniteCache, this.setCache, this);
      this.parent.on(initialCollapse, this.ensureIntialCollapse, this);
      this.parent.on(keyPressed, this.infiniteCellFocus, this);
      this.parent.on(infiniteShowHide, this.setDisplayNone, this);
      this.parent.on(virtualScrollEditActionBegin, this.editActionBegin, this);
      this.parent.on(getVirtualData, this.getVirtualInfiniteData, this);
      this.parent.on(editReset, this.resetInfiniteEdit, this);
      this.parent.on(virtualScrollEditSuccess, this.infiniteEditSuccess, this);
      this.parent.on(refreshVirtualCache, this.refreshInfiniteCache, this);
      this.parent.on(refreshInfiniteEditrowindex, this.refreshInfiniteEditrowindex, this);
      this.parent.on(infiniteEditHandler, this.infiniteEditHandler, this);
      this.parent.on(virtualScrollAddActionBegin, this.infiniteAddActionBegin, this);
      this.parent.on(modelChanged, this.modelChanged, this);
      this.parent.on(refreshInfiniteCurrentViewData, this.refreshInfiniteCurrentViewData, this);
      this.parent.on(destroy, this.destroy, this);
      this.parent.on(contentReady, this.selectNewRow, this);
      this.parent.on(captionActionComplete, this.captionActionComplete, this);
      this.parent.on(setVirtualPageQuery, this.setGroupCollapsePageQuery, this);
      this.parent.on(infiniteScrollComplete, this.onActionComplete, this);
      this.actionBeginFunction = this.actionBegin.bind(this);
      this.actionCompleteFunction = this.actionComplete.bind(this);
      this.dataBoundFunction = this.dataBound.bind(this);
      this.parent.addEventListener(actionBegin, this.actionBeginFunction);
      this.parent.addEventListener(actionComplete, this.actionCompleteFunction);
      this.parent.addEventListener(dataBound, this.dataBoundFunction);
    };
    InfiniteScroll2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(dataReady, this.onDataReady);
      this.parent.off(dataSourceModified, this.dataSourceModified);
      this.parent.off(infinitePageQuery, this.infinitePageQuery);
      this.parent.off(infiniteScrollHandler, this.infiniteScrollHandler);
      this.parent.off(beforeCellFocused, this.infiniteCellFocus);
      this.parent.off(appendInfiniteContent, this.appendInfiniteRows);
      this.parent.off(removeInfiniteRows, this.removeInfiniteCacheRows);
      this.parent.off(resetInfiniteBlocks, this.resetInfiniteBlocks);
      this.parent.off(setInfiniteCache, this.setCache);
      this.parent.off(initialCollapse, this.ensureIntialCollapse);
      this.parent.off(keyPressed, this.infiniteCellFocus);
      this.parent.off(infiniteShowHide, this.setDisplayNone);
      this.parent.off(virtualScrollEditActionBegin, this.editActionBegin);
      this.parent.off(getVirtualData, this.getVirtualInfiniteData);
      this.parent.off(editReset, this.resetInfiniteEdit);
      this.parent.off(virtualScrollEditSuccess, this.infiniteEditSuccess);
      this.parent.off(refreshVirtualCache, this.refreshInfiniteCache);
      this.parent.on(refreshInfiniteEditrowindex, this.refreshInfiniteEditrowindex);
      this.parent.off(infiniteEditHandler, this.infiniteEditHandler);
      this.parent.off(virtualScrollAddActionBegin, this.infiniteAddActionBegin);
      this.parent.off(modelChanged, this.modelChanged);
      this.parent.off(refreshInfiniteCurrentViewData, this.refreshInfiniteCurrentViewData);
      this.parent.off(destroy, this.destroy);
      this.parent.off(contentReady, this.selectNewRow);
      this.parent.off(captionActionComplete, this.captionActionComplete);
      this.parent.off(setVirtualPageQuery, this.setGroupCollapsePageQuery);
      this.parent.off(infiniteScrollComplete, this.onActionComplete);
      this.parent.removeEventListener(actionBegin, this.actionBeginFunction);
      this.parent.removeEventListener(actionComplete, this.actionCompleteFunction);
      this.parent.removeEventListener(dataBound, this.dataBoundFunction);
    };
    InfiniteScroll2.prototype.dataBound = function() {
      if (this.groupCaptionAction === "collapse") {
        this.groupCaptionAction = "refresh";
        this.makeGroupCollapseRequest();
      } else if (this.groupCaptionAction === "refresh") {
        this.parent.hideSpinner();
        this.groupCaptionAction = this.empty;
      }
    };
    InfiniteScroll2.prototype.setGroupCollapsePageQuery = function(args) {
      var gObj = this.parent;
      if (!gObj.infiniteScrollSettings.enableCache && this.isGroupCollapse) {
        args.skipPage = true;
        this.isGroupCollapse = false;
        if (this.groupCaptionAction === "collapse") {
          var captionRow = gObj.getRowObjectFromUID(this.parentCapUid);
          var rowObjs = gObj.getRowsObject();
          var childCount = 0;
          for (var i = rowObjs.length - 1; i >= 0; i--) {
            if (rowObjs[parseInt(i.toString(), 10)].indent === captionRow.indent) {
              break;
            }
            if (rowObjs[parseInt(i.toString(), 10)].isDataRow) {
              childCount++;
            }
          }
          var key = getGroupKeysAndFields(rowObjs.indexOf(captionRow), rowObjs);
          var pred = generateExpandPredicates(key.fields, key.keys, this);
          var predicateList = getPredicates(pred);
          pred = predicateList[predicateList.length - 1];
          for (var i = predicateList.length - 2; i >= 0; i--) {
            pred = pred.and(predicateList[parseInt(i.toString(), 10)]);
          }
          args.query.where(pred);
          args.query.skip(childCount);
          this.parentCapUid = this.empty;
        } else {
          var rows = gObj.getRows();
          var size = gObj.pageSettings.pageSize;
          var skip = getRowIndexFromElement(rows[rows.length - 1]) + 1;
          var additionalCnt = skip - skip % size + size - skip;
          if (skip % size === 0) {
            additionalCnt = 0;
          }
          args.query.skip(skip);
          args.query.take(gObj.infiniteScrollSettings.initialBlocks * gObj.pageSettings.pageSize + additionalCnt);
        }
      }
    };
    InfiniteScroll2.prototype.captionActionComplete = function(args) {
      var gObj = this.parent;
      if (!gObj.infiniteScrollSettings.enableCache && args.isCollapse) {
        var contetRect = gObj.getContent().firstElementChild.getBoundingClientRect();
        var tableReact = gObj.contentModule.getTable().getBoundingClientRect();
        if (Math.round(tableReact.bottom - gObj.getRowHeight()) <= Math.round(contetRect.bottom)) {
          this.parentCapUid = args.parentUid;
          this.groupCaptionAction = "collapse";
          gObj.showSpinner();
          var caption = gObj.getRowObjectFromUID(args.parentUid);
          var childCount = this.getCaptionChildCount(caption);
          if (!childCount) {
            this.groupCaptionAction = "refresh";
            this.makeGroupCollapseRequest();
          } else {
            this.makeGroupCollapseRequest(args.parentUid);
          }
        }
      }
    };
    InfiniteScroll2.prototype.makeGroupCollapseRequest = function(parentUid) {
      var gObj = this.parent;
      var captionRows = [].slice.call(gObj.getContentTable().querySelectorAll("tr"));
      var rows = gObj.groupSettings.enableLazyLoading ? captionRows : gObj.getRows();
      var index = !gObj.groupSettings.enableLazyLoading ? getRowIndexFromElement(rows[rows.length - 1]) : gObj.contentModule["visibleRows"].length - 1;
      var prevPage = this.parent.pageSettings.currentPage;
      var nextPage = Math.ceil(index / this.parent.pageSettings.pageSize) + 1;
      if (prevPage >= this.maxPage || nextPage > this.maxPage) {
        gObj.hideSpinner();
        return;
      }
      this.parent.pageSettings.currentPage = nextPage;
      var scrollArg = {
        requestType: "infiniteScroll",
        currentPage: this.parent.pageSettings.currentPage,
        prevPage,
        startIndex: index + 1,
        direction: "down",
        isCaptionCollapse: true,
        parentUid
      };
      this.isGroupCollapse = true;
      this.parent.notify("model-changed", scrollArg);
    };
    InfiniteScroll2.prototype.getCaptionChildCount = function(caption) {
      var rowObj = this.parent.getRowsObject();
      var index = rowObj.indexOf(caption);
      var make = false;
      for (var i = index; i < rowObj.length; i++) {
        if ((rowObj[parseInt(i.toString(), 10)].indent === caption.indent || rowObj[parseInt(i.toString(), 10)].indent < caption.indent) && rowObj[parseInt(i.toString(), 10)].data.key !== caption.data.key) {
          break;
        }
        if (rowObj[parseInt(i.toString(), 10)].isCaptionRow && !this.childCheck(rowObj, rowObj[parseInt(i.toString(), 10)], i)) {
          make = true;
          break;
        }
      }
      return make;
    };
    InfiniteScroll2.prototype.childCheck = function(rowObj, row2, index) {
      var childCount = 0;
      for (var i = index + 1; i < rowObj.length; i++) {
        if (rowObj[parseInt(i.toString(), 10)].indent === row2.indent) {
          break;
        }
        if (rowObj[parseInt(i.toString(), 10)].indent === row2.indent + 1 && rowObj[parseInt(i.toString(), 10)].parentUid === row2.uid) {
          childCount++;
        }
      }
      return row2.data.count === childCount;
    };
    InfiniteScroll2.prototype.updateCurrentViewData = function() {
      var gObj = this.parent;
      if (gObj.groupSettings.columns.length) {
        return;
      }
      var keys = Object.keys(this.infiniteCurrentViewData);
      gObj.currentViewData = [];
      var page = gObj.pageSettings.currentPage;
      var isCache = gObj.infiniteScrollSettings.enableCache;
      var blocks = gObj.infiniteScrollSettings.maxBlocks;
      var isMiddlePage = isCache && (page > blocks || this.isUpScroll && page > 1);
      var start = isMiddlePage ? this.isUpScroll ? page : page - blocks + 1 : 1;
      var end = isMiddlePage ? start + blocks - 1 : isCache ? blocks : keys.length;
      for (var i = start; i <= end; i++) {
        if (this.infiniteCurrentViewData[parseInt(i.toString(), 10)]) {
          gObj.currentViewData = gObj.currentViewData.concat(this.infiniteCurrentViewData[parseInt(i.toString(), 10)]);
        }
      }
    };
    InfiniteScroll2.prototype.refreshInfiniteCurrentViewData = function(e) {
      var gObj = this.parent;
      var infiniteDetailModified = gObj.enableInfiniteScrolling && (gObj.childGrid || gObj.detailTemplate) && (e.args.action === "add" && e.args.requestType === "save" || e.args.requestType === "delete");
      if (e.args.action === "add" && e.args.requestType === "save" && !infiniteDetailModified) {
        this.parent.pageSettings.currentPage = Math.ceil(e.args["index"] / this.parent.pageSettings.pageSize) ? Math.ceil(e.args["index"] / this.parent.pageSettings.pageSize) : 1;
      }
      var page = this.parent.pageSettings.currentPage;
      var size = this.parent.pageSettings.pageSize;
      var blocks = this.parent.infiniteScrollSettings.initialBlocks;
      var keys = Object.keys(this.infiniteCurrentViewData);
      var cache = this.parent.infiniteScrollSettings.enableCache;
      if (!this.parent.groupSettings.columns.length) {
        var isAdd = e.args.requestType === "save" && !(this.parent.sortSettings.columns.length || this.parent.filterSettings.columns.length || this.parent.groupSettings.columns.length || this.parent.searchSettings.key);
        var isDelete = e.args.requestType === "delete";
        if (!cache && (isAdd || isDelete) && !infiniteDetailModified) {
          if (isAdd) {
            var indexCount = 0;
            for (var i = 1; i <= keys.length; i++) {
              indexCount += this.infiniteCurrentViewData[parseInt(i.toString(), 10)].length - 1;
              if (e.args.index <= indexCount) {
                this.resetCurrentViewData(i);
                this.infiniteCurrentViewData[parseInt(i.toString(), 10)].splice(e.args.index, 0, e.args.data);
                break;
              }
            }
          } else {
            this.infiniteCurrentViewData[keys[keys.length - 1]].push(e.data[0]);
          }
        } else {
          if (blocks > 1 && e.data.length === blocks * size) {
            if (infiniteDetailModified) {
              this.infiniteCurrentViewData = {};
              this.firstBlock = 1;
            }
            this.setInitialCache(e.data.slice(), {}, cache && e.args.requestType === "delete", true);
          } else {
            this.infiniteCurrentViewData[parseInt(page.toString(), 10)] = e.data.slice();
          }
        }
      }
    };
    InfiniteScroll2.prototype.resetCurrentViewData = function(startIndex) {
      var keys = Object.keys(this.infiniteCurrentViewData);
      for (var i = startIndex; i <= keys.length; i++) {
        var lastViewData = this.infiniteCurrentViewData[parseInt(i.toString(), 10)][this.infiniteCurrentViewData[parseInt(i.toString(), 10)].length - 1];
        if (this.infiniteCurrentViewData[i + 1]) {
          this.infiniteCurrentViewData[i + 1].splice(0, 0, lastViewData);
        }
        this.infiniteCurrentViewData[parseInt(i.toString(), 10)].pop();
      }
    };
    InfiniteScroll2.prototype.modelChanged = function(args) {
      var rows = this.parent.getRows();
      if (args.requestType === "save" && args.index && args.data) {
        this.addRowIndex = args.index;
      }
      if (rows && rows.length && args.requestType !== "infiniteScroll" && (args.requestType === "delete" || this.requestType === "add")) {
        this.firstIndex = getRowIndexFromElement(rows[0]);
        this.firstBlock = Math.ceil((this.firstIndex + 1) / this.parent.pageSettings.pageSize);
        this.lastIndex = getRowIndexFromElement(rows[rows.length - 1]);
        if (args.requestType === "delete") {
          var rowObj = this.parent.getRowsObject();
          args.startIndex = this.parent.infiniteScrollSettings.enableCache ? (this.firstBlock - 1) * this.parent.pageSettings.pageSize : rowObj[rowObj.length - 1].index;
        } else {
          args.startIndex = this.firstIndex;
        }
        if (!this.parent.infiniteScrollSettings.enableCache && this.parent.pageSettings.currentPage === this.maxPage && args.requestType === "delete") {
          this.isLastPage = true;
          this.lastIndex = this.lastIndex - 1;
        }
      }
    };
    InfiniteScroll2.prototype.infiniteAddActionBegin = function(args) {
      if (this.isNormaledit) {
        this.isAdd = true;
        if (this.parent.infiniteScrollSettings.enableCache) {
          if (!Object.keys(this.emptyRowData).length) {
            this.createEmptyRowdata();
          }
          if (this.parent.pageSettings.currentPage > 1) {
            args.startEdit = false;
            this.resetInfiniteBlocks({}, true);
            this.makeRequest({
              currentPage: 1
            });
          }
        }
      }
    };
    InfiniteScroll2.prototype.infiniteEditHandler = function(args) {
      if (!this.parent.infiniteScrollSettings.enableCache && (args.e.requestType === "delete" || args.e.requestType === "save" && this.requestType === "add")) {
        var rowElms = this.parent.getRows();
        var rows = this.parent.getRowsObject();
        if (this.ensureRowAvailability(rows, args.result[0])) {
          if (rowElms.length && !(this.addRowIndex && this.addRowIndex >= rowElms.length)) {
            this.resetRowIndex(rows, args.e, rowElms, this.requestType === "add", true);
          }
          if (!this.isLastPage) {
            this.createRow(rows, args);
          } else {
            this.isLastPage = false;
            this.parent.pageSettings.currentPage = this.maxPage;
            if (this.parent.selectionModule.index < this.parent.frozenRows) {
              remove(rowElms[this.parent.frozenRows - 1]);
              this.createRow([rows[this.parent.frozenRows - 1]], args, false, true);
              setRowElements(this.parent);
            }
          }
        }
        this.parent.hideSpinner();
        this.parent.notify(refreshInfinitePersistSelection, {});
        if (this.requestType === "delete") {
          this.parent.notify(deleteComplete, args.e);
        } else {
          this.parent.notify(saveComplete, args.e);
        }
      }
      this.parent.notify(freezeRender, {
        case: "refreshHeight"
      });
    };
    InfiniteScroll2.prototype.createRow = function(rows, args, isMovable, isFrozenRows, isFrozenRight) {
      var row2 = !isFrozenRows ? this.generateRows(args.result, args.e) : rows;
      var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);
      this.parent.removeMaskRow();
      if (args.e.requestType === "save" && args.e.index && args.e.data) {
        row2[0].index = this.addRowIndex;
        this.addRowIndex = null;
        if (row2[0].index >= rows.length) {
          return;
        }
      }
      var tbody2;
      tbody2 = this.parent.getContent().querySelector(tbody);
      if (this.parent.frozenRows) {
        tbody2 = isFrozenRows && this.requestType !== "add" || !isFrozenRows && this.requestType === "add" ? this.parent.getHeaderContent().querySelector(tbody) : tbody2;
      }
      var notifyArgs = {
        rows,
        cancel: false,
        args,
        isMovable,
        isFrozenRows,
        isFrozenRight: isFrozenRows,
        row: row2
      };
      this.parent.notify(infiniteCrudCancel, notifyArgs);
      if (!notifyArgs.cancel) {
        for (var i = row2.length - 1; i >= 0; i--) {
          if (this.requestType === "delete") {
            tbody2.appendChild(rowRenderer.render(row2[parseInt(i.toString(), 10)], this.parent.getColumns()));
          } else {
            tbody2.insertBefore(rowRenderer.render(row2[parseInt(i.toString(), 10)], this.parent.getColumns()), tbody2.rows[args.e.index]);
          }
        }
      }
      if (!isFrozenRows && this.parent.frozenRows && (this.parent.selectionModule.index < this.parent.frozenRows || this.requestType === "add")) {
        var rowElems = this.parent.getRows();
        var index = (isMovable || isFrozenRight) && this.requestType === "add" ? this.parent.frozenRows : this.parent.frozenRows - 1;
        remove(rowElems[parseInt(index.toString(), 10)]);
        this.createRow([rows[this.parent.frozenRows - 1]], args, false, true, false);
      }
      if (!this.parent.infiniteScrollSettings.enableCache && !isFrozenRows) {
        setRowElements(this.parent);
        this.parent.contentModule.visibleRows = this.requestType === "add" ? row2.concat(rows) : rows.concat(row2);
      }
    };
    InfiniteScroll2.prototype.ensureRowAvailability = function(rows, data) {
      var resume = true;
      if (this.parent.frozenRows && !this.parent.infiniteScrollSettings.enableCache && this.parent.sortSettings.columns && this.requestType === "add") {
        var key = this.parent.getPrimaryKeyFieldNames()[0];
        for (var i = 0; i < rows.length; i++) {
          if (rows[parseInt(i.toString(), 10)].data["" + key] === data["" + key]) {
            resume = false;
            break;
          }
        }
      }
      return resume;
    };
    InfiniteScroll2.prototype.generateRows = function(data, args) {
      return this.rowModelGenerator.generateRows(data, args);
    };
    InfiniteScroll2.prototype.resetRowIndex = function(rows, args, rowElms, isAdd, isFrozen) {
      var _this = this;
      var keyField = this.parent.getPrimaryKeyFieldNames()[0];
      var isRemove = !(rowElms.length % this.parent.pageSettings.pageSize);
      if (isAdd) {
        if (isRemove) {
          if (isFrozen && !this.parent.groupSettings.columns.length) {
            this.swapCurrentViewData(1, true);
          }
          remove(rowElms[rows.length - 1]);
          rowElms.splice(rows.length - 1, 1);
          rows.splice(rows.length - 1, 1);
        }
      } else {
        rows.filter(function(e, index) {
          if (e.data["" + keyField] === args.data[0]["" + keyField]) {
            if (isFrozen && !_this.parent.groupSettings.columns.length) {
              var page = Math.ceil((index + 1) / _this.parent.pageSettings.pageSize);
              _this.resetInfiniteCurrentViewData(page, index);
            }
            rows.splice(index, 1);
            var rowElement = _this.parent.getRowElementByUID(e.uid);
            if (rowElement) {
              var rowElementIndex = rowElms.indexOf(rowElement);
              remove(rowElement);
              rowElms.splice(rowElementIndex, 1);
            }
          }
        });
      }
      var startIndex = isAdd ? this.addRowIndex ? this.addRowIndex + 1 : 1 : 0;
      resetRowIndex(this.parent, rows, rowElms, startIndex, this.addRowIndex ? this.addRowIndex : 0);
    };
    InfiniteScroll2.prototype.resetInfiniteCurrentViewData = function(page, index) {
      index = index - (page - 1) * this.parent.pageSettings.pageSize;
      this.infiniteCurrentViewData[parseInt(page.toString(), 10)].splice(index, 1);
      this.swapCurrentViewData(page, false);
    };
    InfiniteScroll2.prototype.swapCurrentViewData = function(page, isAdd) {
      var keys = Object.keys(this.infiniteCurrentViewData);
      var end = isAdd ? keys.length + 1 : keys.length;
      for (var i = page; i < end; i++) {
        if (this.infiniteCurrentViewData[i + 1]) {
          var pageIndex = isAdd ? i : i + 1;
          var index = isAdd ? this.infiniteCurrentViewData[parseInt(i.toString(), 10)].length - 1 : 0;
          var data = this.infiniteCurrentViewData[parseInt(pageIndex.toString(), 10)].splice(index, 1);
          if (isAdd) {
            this.infiniteCurrentViewData[i + 1] = data.concat(this.infiniteCurrentViewData[i + 1]);
            if (i + 1 === end - 1) {
              this.infiniteCurrentViewData[i + 1].splice(this.infiniteCurrentViewData[i + 1].length - 1, 1);
            }
          } else {
            this.infiniteCurrentViewData[parseInt(i.toString(), 10)].push(data[0]);
          }
        }
      }
      this.updateCurrentViewData();
    };
    InfiniteScroll2.prototype.setDisplayNone = function(args) {
      if (this.parent.infiniteScrollSettings.enableCache) {
        var keys = Object.keys(this.infiniteCache);
        for (var i = 1; i <= keys.length; i++) {
          var cache = this.infiniteCache[parseInt(i.toString(), 10)];
          cache.filter(function(e) {
            e.cells[args.index].visible = args.visible === "";
          });
        }
        this.resetContentModuleCache(this.infiniteCache);
      }
    };
    InfiniteScroll2.prototype.refreshInfiniteCache = function(args) {
      this.getEditedRowObject().data = args.data;
    };
    InfiniteScroll2.prototype.refreshInfiniteCacheRowVisibleLength = function(args, currentPage) {
      var cPageRowArray = args[parseInt(currentPage.toString(), 10)];
      if (this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache) {
        var length_1 = 0;
        var vRowLen = 0;
        var hRowLen = 0;
        for (var i = 0; i < cPageRowArray.length; i++) {
          if (cPageRowArray[parseInt(i.toString(), 10)].visible || isNullOrUndefined(cPageRowArray[parseInt(i.toString(), 10)].visible)) {
            vRowLen++;
          } else {
            hRowLen++;
          }
        }
        if (hRowLen > vRowLen) {
          length_1 = hRowLen - vRowLen;
          if (length_1 > vRowLen) {
            length_1 = vRowLen;
          }
        } else {
          length_1 = vRowLen - hRowLen;
          if (length_1 > hRowLen) {
            length_1 = hRowLen;
          }
        }
        if (length_1 === 0) {
          length_1 = 1;
        }
        return length_1;
      } else {
        return cPageRowArray.length;
      }
    };
    InfiniteScroll2.prototype.refreshInfiniteEditrowindex = function(args) {
      this.editRowIndex = args.index;
    };
    InfiniteScroll2.prototype.getEditedRowObject = function() {
      var rowObjects = this.parent.getRowsObject();
      var editedrow;
      for (var i = 0; i < rowObjects.length; i++) {
        if (rowObjects[parseInt(i.toString(), 10)].index === this.editRowIndex) {
          editedrow = rowObjects[parseInt(i.toString(), 10)];
        }
      }
      return editedrow;
    };
    InfiniteScroll2.prototype.infiniteEditSuccess = function(args) {
      if (this.isNormaledit) {
        if (!this.isAdd && args.data) {
          this.updateCurrentViewRecords(args.data);
        }
        this.isAdd = this.parent.editSettings.showAddNewRow;
      }
    };
    InfiniteScroll2.prototype.updateCurrentViewRecords = function(data) {
      var index = getEditedDataIndex(this.parent, data);
      if (!isNullOrUndefined(index)) {
        this.parent.getCurrentViewRecords()[parseInt(index.toString(), 10)] = data;
      }
    };
    InfiniteScroll2.prototype.actionBegin = function(args) {
      if (args.requestType === "add" || args.requestType === "delete") {
        this.requestType = args.requestType;
      } else if (args.action === "add" && args.requestType === "save") {
        this.requestType = args.action;
      }
      if (this.parent.isFrozenGrid() && !args.cancel && args.requestType === "searching" || args.requestType === "sorting" || args.requestType === "filtering") {
        this.isInitialRender = true;
      }
    };
    InfiniteScroll2.prototype.actionComplete = function(args) {
      if (args.requestType === "delete" || args.requestType === "save" || args.requestType === "cancel") {
        this.requestType = this.empty;
        this.isCancel = args.requestType === "cancel" || args.requestType === "save";
        this.isAdd = this.isEdit = this.parent.editSettings.showAddNewRow;
        if (this.isNormaledit) {
          this.editRowIndex = this.empty;
          this.virtualInfiniteData = {};
          this.parent.editModule.previousVirtualData = {};
        }
      }
    };
    InfiniteScroll2.prototype.onActionComplete = function(e) {
      var args = {
        type: actionComplete
      };
      this.parent.trigger(actionComplete, extend(e, args));
    };
    InfiniteScroll2.prototype.resetInfiniteEdit = function() {
      if (this.parent.enableInfiniteScrolling && this.isNormaledit) {
        if (this.parent.editSettings.allowEditing && this.isEdit || this.parent.editSettings.allowAdding && this.isAdd) {
          this.parent.isEdit = true;
        }
      }
    };
    InfiniteScroll2.prototype.getVirtualInfiniteData = function(data) {
      this.getVirtualInfiniteEditedData();
      data.virtualData = this.parent.enableColumnVirtualization && !this.parent.infiniteScrollSettings.enableCache ? data.virtualData : this.virtualInfiniteData;
      data.isAdd = this.isAdd;
      data.isCancel = this.isCancel;
    };
    InfiniteScroll2.prototype.editActionBegin = function(e) {
      this.isEdit = true;
      this.editRowIndex = e.index;
      var rowObject = extend({}, this.getEditedRowObject().data);
      e.data = Object.keys(this.virtualInfiniteData).length ? this.virtualInfiniteData : rowObject;
    };
    InfiniteScroll2.prototype.dataSourceModified = function() {
      this.resetInfiniteBlocks({
        requestType: this.empty
      }, true);
    };
    InfiniteScroll2.prototype.onDataReady = function(e) {
      if (!isNullOrUndefined(e.count) && e.requestType !== "infiniteScroll") {
        this.maxPage = Math.ceil(e.count / this.parent.pageSettings.pageSize);
      }
    };
    InfiniteScroll2.prototype.ensureIntialCollapse = function(isExpand) {
      this.isInitialCollapse = !isExpand;
    };
    InfiniteScroll2.prototype.infiniteScrollHandler = function(e) {
      if (this.infiniteDetailDestroy) {
        return;
      }
      this.restoreInfiniteEdit();
      this.restoreInfiniteAdd();
      var targetEle = e.target;
      var isInfinite = targetEle.classList.contains(content);
      var detailGrid = this.parent.childGrid || this.parent.detailTemplate ? true : false;
      if (isInfinite && this.parent.enableInfiniteScrolling && !e.isLeft) {
        var scrollEle = this.parent.getContent().firstElementChild;
        var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll("tr"));
        this.prevScrollTop = scrollEle.scrollTop;
        var rows = detailGrid ? this.parent.getRows().filter(function(row3) {
          return !row3.classList.contains("e-detailrow");
        }) : this.parent.groupSettings.enableLazyLoading ? captionRows : this.parent.getRows();
        if (!rows.length) {
          return;
        }
        var index = getRowIndexFromElement(rows[rows.length - 1]) + 1;
        var prevPage = this.parent.pageSettings.currentPage;
        var args = void 0;
        var offset = targetEle.scrollHeight - targetEle.scrollTop;
        var round = Math.round(targetEle.scrollHeight - targetEle.scrollTop);
        var floor = offset < targetEle.clientHeight ? Math.ceil(offset) : Math.floor(offset);
        var targetHeight = targetEle.clientHeight;
        if (floor > targetHeight) {
          floor = floor - 1;
        } else if (targetHeight > floor) {
          targetHeight = targetHeight - 1;
        }
        var isBottom = floor === targetHeight || round === targetHeight;
        if (!isNullOrUndefined(this.groupCaptionAction)) {
          return;
        }
        if (this.isScroll && isBottom && (this.parent.pageSettings.currentPage <= this.maxPage - 1 || this.enableContinuousScroll)) {
          if (this.parent.infiniteScrollSettings.enableCache) {
            this.isUpScroll = false;
            this.isDownScroll = true;
          }
          var rows_1 = detailGrid ? this.getGridRows().filter(function(row3) {
            return row3.classList.contains("e-row") && !row3.classList.contains("e-addedrow");
          }) : [].slice.call(scrollEle.querySelectorAll(".e-row:not(.e-addedrow)"));
          var row2 = rows_1[rows_1.length - 1];
          var rowIndex = !(this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length) ? getRowIndexFromElement(row2) : this.parent.contentModule["visibleRows"].length - 1;
          this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) + 1;
          args = {
            requestType: "infiniteScroll",
            currentPage: this.parent.pageSettings.currentPage,
            prevPage,
            startIndex: index,
            direction: "down"
          };
          this.makeRequest(args);
        }
        if (this.isScroll && this.parent.infiniteScrollSettings.enableCache && targetEle.scrollTop === 0 && this.parent.pageSettings.currentPage !== 1) {
          if (this.parent.infiniteScrollSettings.enableCache) {
            this.isDownScroll = false;
            this.isUpScroll = true;
          }
          var row2 = detailGrid ? this.getGridRows().filter(function(row3) {
            return row3.classList.contains(row);
          }) : [].slice.call(scrollEle.getElementsByClassName(row));
          var rowIndex = getRowIndexFromElement(row2[this.parent.pageSettings.pageSize - 1]);
          var startIndex = getRowIndexFromElement(row2[0]) - this.parent.pageSettings.pageSize;
          this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) - 1;
          if (this.parent.pageSettings.currentPage) {
            args = {
              requestType: "infiniteScroll",
              currentPage: this.parent.pageSettings.currentPage,
              prevPage,
              startIndex,
              direction: "up"
            };
            this.makeRequest(args);
          }
        }
        if (this.parent.infiniteScrollSettings.enableCache && !this.isScroll && isNullOrUndefined(args)) {
          if (this.isDownScroll || this.isUpScroll) {
            scrollEle.scrollTop = this.top;
          }
        }
      }
    };
    InfiniteScroll2.prototype.makeRequest = function(args) {
      var _this = this;
      if (this.parent.pageSettings.currentPage !== args.prevPage) {
        var initBlocks = this.parent.infiniteScrollSettings.initialBlocks;
        if (initBlocks < this.maxPage && this.parent.pageSettings.currentPage <= this.maxPage) {
          this.isInfiniteScroll = true;
          if (isNullOrUndefined(this.infiniteCache[args.currentPage])) {
            setTimeout(function() {
              _this.getVirtualInfiniteEditedData();
              _this.parent.notify("model-changed", args);
            }, 100);
          } else {
            setTimeout(function() {
              _this.getVirtualInfiniteEditedData();
              _this.parent.notify(refreshInfiniteModeBlocks, args);
            }, 100);
          }
        } else {
          this.parent.pageSettings.currentPage = this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length && initBlocks >= this.maxPage ? 1 : this.maxPage;
        }
      }
    };
    InfiniteScroll2.prototype.infinitePageQuery = function(query) {
      if (this.initialRender || (this.requestType === "add" || this.requestType === "delete") && (this.parent.childGrid || this.parent.detailTemplate)) {
        this.initialRender = false;
        this.intialPageQuery(query);
      } else {
        if (this.requestType === "delete" || this.requestType === "add") {
          if (!this.isInfiniteScroll && !this.parent.groupSettings.enableLazyLoading) {
            this.editPageQuery(query);
          } else if (this.parent.groupSettings.enableLazyLoading && !this.parent.infiniteScrollSettings.enableCache) {
            if (this.parent.infiniteScrollSettings.initialBlocks < this.parent.pageSettings.currentPage) {
              query.page(1, this.parent.pageSettings.pageSize * this.parent.pageSettings.currentPage);
            } else {
              query.page(1, this.parent.pageSettings.pageSize * this.parent.infiniteScrollSettings.initialBlocks);
            }
          } else {
            query.page(this.parent.pageSettings.currentPage, this.parent.pageSettings.pageSize);
          }
        } else {
          query.page(this.parent.pageSettings.currentPage, this.parent.pageSettings.pageSize);
        }
      }
    };
    InfiniteScroll2.prototype.editPageQuery = function(query) {
      var initialBlocks = this.parent.infiniteScrollSettings.initialBlocks;
      var isCache = this.parent.infiniteScrollSettings.enableCache;
      if (isCache) {
        this.infiniteCache = {};
        this.infiniteCurrentViewData = {};
        query.skip(this.firstIndex);
        query.take(initialBlocks * this.parent.pageSettings.pageSize);
      } else {
        if (this.parent.editSettings.mode === "Dialog") {
          this.parent.clearSelection();
        }
        var index = this.requestType === "delete" ? this.lastIndex : this.addRowIndex ? this.addRowIndex : this.firstIndex;
        query.skip(index);
        if (!isNullOrUndefined(this.parent.getDataModule().dataManager.dataSource.url) && this.parent.getDataModule().dataManager.dataSource.url !== "" && (this.requestType === "delete" || this.requestType === "add")) {
          query.take(initialBlocks * this.parent.pageSettings.pageSize);
        } else {
          query.take(1);
        }
      }
    };
    InfiniteScroll2.prototype.intialPageQuery = function(query) {
      if (this.parent.infiniteScrollSettings.enableCache && this.parent.infiniteScrollSettings.initialBlocks > this.parent.infiniteScrollSettings.maxBlocks) {
        this.parent.infiniteScrollSettings.initialBlocks = this.parent.infiniteScrollSettings.maxBlocks;
      }
      var pageSize = this.parent.pageSettings.pageSize * this.parent.infiniteScrollSettings.initialBlocks;
      query.page(1, pageSize);
    };
    InfiniteScroll2.prototype.scrollToLastFocusedCell = function(e) {
      var gObj = this.parent;
      var rowIdx = this.lastFocusInfo.rowIdx + (e.keyArgs.action === upArrow ? -1 : 1);
      var cellIdx = this.lastFocusInfo.cellIdx;
      var row2 = gObj.getRowByIndex(rowIdx);
      if (!row2) {
        var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);
        var page = Math.floor(rowIdx / this.parent.pageSettings.pageSize) + 1;
        gObj.pageSettings.currentPage = page;
        var cols = gObj.getColumns();
        remove(gObj.getContent().querySelector("tbody"));
        gObj.getContent().querySelector("table").appendChild(gObj.createElement("tbody", {
          attrs: {
            "role": "rowgroup"
          }
        }));
        var focusRows = [];
        for (var i = page === 1 || this.maxPage === page ? 0 : -1, k = 0; k < gObj.infiniteScrollSettings.maxBlocks; this.maxPage === page ? i-- : i++, k++) {
          var rows = this.infiniteCache[page + i];
          if (rows) {
            focusRows = focusRows.concat(rows);
            for (var j = 0; j < rows.length; j++) {
              gObj.getContent().querySelector("tbody").appendChild(rowRenderer.render(rows[parseInt(j.toString(), 10)], cols));
            }
          }
        }
        gObj.notify(contentReady, {
          rows: focusRows,
          args: {}
        });
        setRowElements(gObj);
      }
      row2 = gObj.getRowByIndex(rowIdx);
      var target = row2.cells[parseInt(cellIdx.toString(), 10)];
      gObj.focusModule.isInfiniteScroll = true;
      gObj.focusModule.onClick({
        target
      }, true);
      gObj.selectRow(rowIdx);
      target.focus();
      this.isFocusScroll = false;
      e.cancel = true;
    };
    InfiniteScroll2.prototype.setLastCellFocusInfo = function(e) {
      var cell = e.byClick && e.clickArgs.target || e.byKey && e.keyArgs.target || (!this.isFocusScroll && e).target;
      if (cell && cell.classList.contains("e-rowcell")) {
        var cellIdx = parseInt(cell.getAttribute("aria-colindex"), 10) - 1;
        var rowIdx = parseInt(cell.parentElement.getAttribute("aria-rowindex"), 10) - 1;
        this.lastFocusInfo = {
          rowIdx,
          cellIdx
        };
      }
    };
    InfiniteScroll2.prototype.infiniteCellFocus = function(e) {
      var gObj = this.parent;
      var cache = gObj.infiniteScrollSettings.enableCache;
      if (e.byKey) {
        if (cache && this.isFocusScroll) {
          this.scrollToLastFocusedCell(e);
          return;
        }
        var cell = document.activeElement;
        var rowIndex = getRowIndexFromElement(cell.parentElement);
        this.cellIndex = parseInt(cell.getAttribute(ariaColIndex), 10) - 1;
        var content2 = gObj.getContent().firstElementChild;
        var totalRowsCount = this.maxPage * gObj.pageSettings.pageSize - 1;
        var visibleRowCount = Math.floor(content2.offsetHeight / this.parent.getRowHeight());
        var contentRect = content2.getBoundingClientRect();
        if (!isNaN(rowIndex)) {
          if (e.keyArgs.action === downArrow || e.keyArgs.action === enter) {
            this.rowIndex = rowIndex += 1;
            var row2 = gObj.getRowByIndex(rowIndex);
            var rowRect = row2 && row2.getBoundingClientRect();
            if (cache) {
              rowIndex = cell.parentElement.rowIndex + 1;
            }
            if (this.isFocusScroll || !row2 && rowIndex < totalRowsCount || rowRect && rowRect.bottom >= contentRect.bottom) {
              if (!this.isFocusScroll) {
                this.pressedKey = e.keyArgs.action;
              }
              this.isFocusScroll = false;
              content2.scrollTop = (rowIndex - visibleRowCount + 1) * this.parent.getRowHeight();
            } else if (!cache && row2) {
              if (rowRect && (rowRect.bottom >= contentRect.bottom || rowRect.top < contentRect.top)) {
                row2.cells[this.cellIndex].scrollIntoView();
              }
            }
          } else if (e.keyArgs.action === upArrow || e.keyArgs.action === shiftEnter) {
            this.rowIndex = rowIndex -= 1;
            var row2 = gObj.getRowByIndex(rowIndex);
            var rowRect = row2 && row2.getBoundingClientRect();
            if (cache) {
              rowIndex = cell.parentElement.rowIndex - 1;
            }
            if (!row2 || rowRect.top <= contentRect.top) {
              this.pressedKey = e.keyArgs.action;
              content2.scrollTop = rowIndex * this.parent.getRowHeight();
            }
          }
        }
      } else if (e.key === "PageDown" || e.key === "PageUp") {
        this.pressedKey = e.key;
      }
      this.setLastCellFocusInfo(e);
    };
    InfiniteScroll2.prototype.createEmptyRowdata = function() {
      var _this = this;
      this.parent.getColumns().filter(function(e) {
        _this.emptyRowData[e.field] = _this.empty;
      });
    };
    InfiniteScroll2.prototype.getVirtualInfiniteEditedData = function() {
      var editForm = this.parent.element.querySelector("." + editedRow);
      var addForm = this.parent.element.querySelector("." + addedRow);
      var gridForm = this.parent.element.querySelector(".e-gridform");
      if (this.parent.infiniteScrollSettings.enableCache && (editForm || addForm)) {
        var rowData = editForm ? extend({}, this.getEditedRowObject().data) : extend({}, this.emptyRowData);
        this.virtualInfiniteData = this.parent.editModule.getCurrentEditedData(gridForm, rowData);
        var hiddenColumn = this.parent.getHiddenColumns();
        for (var i = 0; i < hiddenColumn.length; i++) {
          if (hiddenColumn[parseInt(i.toString(), 10)].defaultValue) {
            this.virtualInfiniteData[hiddenColumn[parseInt(i.toString(), 10)].field] = hiddenColumn[parseInt(i.toString(), 10)].defaultValue;
          }
        }
      }
    };
    InfiniteScroll2.prototype.restoreInfiniteEdit = function() {
      var content2 = this.parent.getContent().firstElementChild;
      var frozenEdit = this.parent.frozenRows ? this.editRowIndex >= this.parent.frozenRows : true;
      if (this.isNormaledit && this.parent.infiniteScrollSettings.enableCache && frozenEdit) {
        if (this.parent.editSettings.allowEditing && !isNullOrUndefined(this.editRowIndex)) {
          var row2 = this.parent.getRowByIndex(this.editRowIndex);
          if (Object.keys(this.virtualInfiniteData).length && row2 && !this.parent.getContent().querySelector("." + editedRow)) {
            var top_1 = row2.getBoundingClientRect().top;
            if (top_1 < content2.offsetHeight && top_1 > this.parent.getRowHeight()) {
              this.parent.isEdit = false;
              this.parent.editModule.startEdit(row2);
            }
          }
        }
      }
    };
    InfiniteScroll2.prototype.restoreInfiniteAdd = function() {
      var content2 = this.parent.getContent().firstElementChild;
      if (this.parent.getCurrentViewRecords().length && this.parent.getRowByIndex(0) && this.isNormaledit && this.parent.infiniteScrollSettings.enableCache && this.isAdd && !content2.querySelector("." + addedRow)) {
        var isTop = content2.scrollTop < this.parent.getRowHeight();
        if (isTop) {
          this.parent.isEdit = false;
          this.parent.addRecord();
        }
      }
    };
    InfiniteScroll2.prototype.appendInfiniteRows = function(e) {
      var gObj = this.parent;
      var scrollEle = this.parent.getContent().firstElementChild;
      var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === "infiniteScroll";
      var infiniteDetailModified = gObj.enableInfiniteScrolling && (gObj.childGrid || gObj.detailTemplate) && (e.args.action === "add" && e.args.requestType === "save" || e.args.requestType === "delete");
      if (infiniteDetailModified) {
        scrollEle.scrollTop = 0;
        gObj.pageSettings.currentPage = 1;
      }
      if ((this.parent.isAngular || this.parent.isReact || this.parent.isVue || this.parent.isVue3) && isInfiniteScroll && !e.args.isFrozen && this.parent.infiniteScrollSettings.enableCache) {
        var isChildGrid = this.parent.childGrid && this.parent.element.querySelectorAll(".e-childgrid").length ? true : false;
        var rows = this.parent.getDataRows();
        this.parent.refreshReactTemplateTD(rows, isChildGrid);
      }
      if (isInfiniteScroll && !e.args.isFrozen || !isInfiniteScroll) {
        if (isInfiniteScroll && e.args.direction === "up") {
          e.tbody.insertBefore(e.frag, e.tbody.firstElementChild);
        } else {
          e.tbody.appendChild(e.frag);
        }
      }
      this.parent.contentModule.getTable().appendChild(e.tbody);
      this.updateCurrentViewData();
      if (this.isInitialRender && !e.args.isFrozen) {
        this.isInitialRender = false;
        this.parent.scrollModule.setHeight();
      }
      if (!e.args.isFrozen) {
        this.rowTop = !this.rowTop ? this.parent.getRows()[0].getBoundingClientRect().top : this.rowTop;
        if (isInfiniteScroll) {
          if (this.parent.infiniteScrollSettings.enableCache && this.isRemove) {
            scrollEle.scrollTop = this.top;
          }
          setRowElements(this.parent);
        }
        this.restoreInfiniteAdd();
        this.isScroll = true;
      }
      this.isInfiniteScroll = false;
      this.infiniteDetailDestroy = false;
    };
    InfiniteScroll2.prototype.selectNewRow = function(args) {
      var _this = this;
      var gObj = this.parent;
      var row2 = gObj.getRowByIndex(this.rowIndex);
      var cache = gObj.infiniteScrollSettings.enableCache;
      if (row2 && this.keys.some(function(value) {
        return value === _this.pressedKey;
      })) {
        var content2 = gObj.getContent().firstElementChild;
        var rowHeight2 = gObj.getRowHeight();
        var target = row2.cells[this.cellIndex];
        if (this.pressedKey === downArrow || this.pressedKey === enter || cache && (this.pressedKey === upArrow || this.pressedKey === shiftEnter)) {
          if (!cache && this.pressedKey !== upArrow && this.pressedKey !== shiftEnter) {
            content2.scrollTop = content2.scrollTop + rowHeight2;
          }
          gObj.focusModule.isInfiniteScroll = true;
          gObj.focusModule.onClick({
            target
          }, true);
          gObj.selectRow(this.rowIndex);
        }
      } else if (this.lastFocusInfo && (this.pressedKey === pageDown || this.pressedKey === pageUp)) {
        var idx = cache ? 0 : this.lastFocusInfo.rowIdx;
        if (gObj.getRowByIndex(idx)) {
          var target = gObj.getCellFromIndex(idx, this.lastFocusInfo.cellIdx);
          if (target) {
            this.isFocusScroll = true;
            if (!cache) {
              gObj.focusModule.isInfiniteScroll = true;
              gObj.focusModule.onClick({
                target
              }, true);
            } else {
              target.focus({
                preventScroll: true
              });
            }
          }
        }
      }
      this.pressedKey = void 0;
    };
    InfiniteScroll2.prototype.removeInfiniteCacheRows = function(e) {
      var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === "infiniteScroll";
      if (!e.args.isFrozen && isInfiniteScroll && this.parent.infiniteScrollSettings.enableCache && this.isRemove) {
        var detailGrid = this.parent.childGrid || this.parent.detailTemplate ? true : false;
        var rows = detailGrid ? this.getGridRows().filter(function(row2) {
          return row2.classList.contains(row);
        }) : [].slice.call(this.parent.getContentTable().getElementsByClassName(row));
        if (e.args.direction === "down") {
          if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
            var captionRows = detailGrid ? this.getGridRows().filter(function(row2) {
              return !row2.classList.contains("e-detailrow");
            }) : [].slice.call(this.parent.getContentTable().querySelectorAll("tr"));
            this.removeCaptionRows(captionRows, e.args);
          }
          var addRowCount = this.parent.element.querySelector("." + addedRow) ? 0 : 1;
          this.removeTopRows(rows, this.parent.pageSettings.pageSize - addRowCount);
        }
        if (e.args.direction === "up") {
          if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
            var captionRows = detailGrid ? this.getGridRows().filter(function(row2) {
              return !row2.classList.contains("e-detailrow");
            }) : [].slice.call(this.parent.getContentTable().querySelectorAll("tr"));
            this.removeCaptionRows(captionRows, e.args);
          } else {
            this.removeBottomRows(rows, rows.length - 1, e.args);
          }
        }
        this.isScroll = false;
        this.top = this.calculateScrollTop(e.args);
      }
    };
    InfiniteScroll2.prototype.calculateScrollTop = function(args) {
      var top = 0;
      var scrollCnt = this.parent.getContent().firstElementChild;
      if (args.direction === "down") {
        if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {
          top = this.captionRowHeight();
        }
        var captionRows = [].slice.call(this.parent.getContent().firstElementChild.querySelectorAll("tr:not(.e-row)"));
        var captionCount = 0;
        if (this.isInitialCollapse && !isNullOrUndefined(captionRows)) {
          captionCount = Math.round((captionRows.length - 1) / this.parent.groupSettings.columns.length);
        }
        var value = captionCount ? captionCount : this.parent.pageSettings.pageSize * (this.parent.infiniteScrollSettings.maxBlocks - 1);
        var currentViewRowCount = 0;
        var i = 0;
        while (currentViewRowCount < scrollCnt.clientHeight) {
          i++;
          currentViewRowCount = i * this.parent.getRowHeight();
        }
        i = i - 1;
        top += (value - i) * this.parent.getRowHeight();
      }
      if (args.direction === "up") {
        if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {
          var len = this.refreshInfiniteCacheRowVisibleLength(this.infiniteCache, this.parent.pageSettings.currentPage);
          top = len * this.parent.getRowHeight();
        } else if (this.isInitialCollapse) {
          var groupedData = this.infiniteCache[this.parent.pageSettings.currentPage];
          var count2 = 0;
          for (var i = 0; i < groupedData.length; i++) {
            if (groupedData[parseInt(i.toString(), 10)].isCaptionRow) {
              count2++;
            }
          }
          top += Math.round(count2 / this.parent.groupSettings.columns.length) * this.parent.getRowHeight();
        } else {
          top += this.parent.pageSettings.pageSize * this.parent.getRowHeight() + getScrollBarWidth();
        }
      }
      return top;
    };
    InfiniteScroll2.prototype.captionRowHeight = function() {
      var rows = [].slice.call(this.parent.getContent().querySelectorAll("tr:not(.e-row)"));
      return rows.length * this.parent.getRowHeight();
    };
    InfiniteScroll2.prototype.removeTopRows = function(rows, maxIndx) {
      for (var i = 0; i <= maxIndx; i++) {
        if (this.parent.frozenRows && this.parent.pageSettings.currentPage === this.parent.infiniteScrollSettings.maxBlocks + 1 && i > maxIndx - this.parent.frozenRows) {
          continue;
        }
        remove(rows[parseInt(i.toString(), 10)]);
      }
    };
    InfiniteScroll2.prototype.removeBottomRows = function(rows, maxIndx, args) {
      var cnt = 0;
      var pageSize = this.parent.pageSettings.pageSize;
      if (this.infiniteCache[args.prevPage].length < pageSize) {
        cnt = this.parent.pageSettings.pageSize - this.infiniteCache[args.prevPage].length;
      }
      for (var i = maxIndx; cnt < pageSize; i--) {
        cnt++;
        remove(rows[parseInt(i.toString(), 10)]);
      }
    };
    InfiniteScroll2.prototype.removeCaptionRows = function(rows, args) {
      var detailGrid = this.parent.childGrid || this.parent.detailTemplate ? true : false;
      var rowElements = detailGrid ? this.getGridRows().filter(function(row2) {
        return row2.classList.contains(row);
      }) : [].slice.call(this.parent.getContent().getElementsByClassName(row));
      if (args.direction === "down") {
        var lastRow = rowElements[this.parent.pageSettings.pageSize - 1];
        var lastRowIndex = getRowIndexFromElement(lastRow) - 1;
        var k = 0;
        for (var i = 0; k < lastRowIndex; i++) {
          if (!rows[parseInt(i.toString(), 10)].classList.contains(row)) {
            remove(rows[parseInt(i.toString(), 10)]);
          } else {
            k = getRowIndexFromElement(rows[parseInt(i.toString(), 10)]);
          }
        }
      }
      if (args.direction === "up") {
        var lastIndex = getRowIndexFromElement(rowElements[rowElements.length - 1]);
        var page = Math.ceil(lastIndex / this.parent.pageSettings.pageSize);
        var startIndex = 0;
        for (var i = this.parent.pageSettings.currentPage + 1; i < page; i++) {
          startIndex += detailGrid ? this.infiniteCache[parseInt(i.toString(), 10)].filter(function(row2) {
            return !row2.isDetailRow;
          }).length : this.infiniteCache[parseInt(i.toString(), 10)].length;
        }
        for (var i = startIndex; i < rows.length; i++) {
          remove(rows[parseInt(i.toString(), 10)]);
        }
      }
    };
    InfiniteScroll2.prototype.getGridRows = function() {
      return [].slice.call(this.parent.getContentTable().rows);
    };
    InfiniteScroll2.prototype.resetInfiniteBlocks = function(args, isDataModified) {
      var isInfiniteScroll = this.parent.enableInfiniteScrolling && args.requestType !== "infiniteScroll";
      if (!this.initialRender && !isNullOrUndefined(this.parent.infiniteScrollModule) && isInfiniteScroll) {
        if (this.actions.some(function(value) {
          return value === args.requestType;
        }) || isDataModified || args.requestType === "save" && (this.parent.sortSettings.columns.length || this.parent.filterSettings.columns.length || this.parent.groupSettings.columns.length || this.parent.searchSettings.key)) {
          var scrollEle = this.parent.getContent().firstElementChild;
          this.parent.notify(detachDetailTemplate, {});
          this.initialRender = true;
          scrollEle.scrollTop = 0;
          this.parent.pageSettings.currentPage = 1;
          this.infiniteCache = {};
          this.infiniteCurrentViewData = {};
          this.resetContentModuleCache({});
          this.isRemove = false;
          this.top = 0;
          this.isInitialCollapse = false;
          this.parent.contentModule.isRemove = this.isRemove;
          this.parent.contentModule.isAddRows = this.isRemove;
          this.parent.contentModule.visibleRows = [];
          this.parent.contentModule.visibleFrozenRows = [];
        }
      }
    };
    InfiniteScroll2.prototype.setCache = function(e) {
      if (this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache) {
        var gObj = this.parent;
        var infiniteDetailModified = (gObj.childGrid || gObj.detailTemplate) && (e.args.action === "add" && e.args.requestType === "save" || e.args.requestType === "delete");
        var isEdit = e.args.requestType !== "infiniteScroll" && (this.requestType === "delete" || this.requestType === "add");
        var currentPage = this.parent.pageSettings.currentPage;
        if (!Object.keys(this.infiniteCache).length || isEdit) {
          if (infiniteDetailModified) {
            this.infiniteCache = {};
          }
          this.setInitialCache(e.modelData, e.args, isEdit);
        }
        if (isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage]) && !infiniteDetailModified) {
          this.infiniteCache[this.parent.pageSettings.currentPage] = e.modelData;
          this.resetContentModuleCache(this.infiniteCache);
        }
        if (e.isInfiniteScroll && !this.isRemove) {
          this.isRemove = (currentPage - 1) % this.parent.infiniteScrollSettings.maxBlocks === 0;
          this.parent.contentModule.isRemove = this.isRemove;
        }
      }
    };
    InfiniteScroll2.prototype.setInitialCache = function(data, args, isEdit, isCurrentViewData) {
      var k = !isEdit ? 1 : isNullOrUndefined(this.firstBlock) ? 1 : this.firstBlock;
      for (var i = 1; i <= this.parent.infiniteScrollSettings.initialBlocks; i++) {
        var startIndex = (i - 1) * this.parent.pageSettings.pageSize;
        var endIndex = i * this.parent.pageSettings.pageSize;
        if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !isCurrentViewData) {
          this.setInitialGroupCache(data, k, startIndex, endIndex);
        } else {
          if (isCurrentViewData) {
            this.infiniteCurrentViewData[parseInt(k.toString(), 10)] = data.slice(startIndex, endIndex);
          } else {
            this.infiniteCache[parseInt(k.toString(), 10)] = data.slice(startIndex, endIndex);
            this.resetContentModuleCache(this.infiniteCache);
          }
        }
        k++;
      }
    };
    InfiniteScroll2.prototype.setInitialGroupCache = function(data, index, sIndex, eIndex) {
      var pageData = [];
      var startIndex = 0;
      for (var i = 1; i <= Object.keys(this.infiniteCache).length; i++) {
        startIndex += this.infiniteCache[parseInt(i.toString(), 10)].length;
      }
      var k = sIndex;
      for (var i = startIndex; i < data.length && k < eIndex; i++) {
        if (data[parseInt(i.toString(), 10)].index < eIndex || data[parseInt(i.toString(), 10)].isCaptionRow) {
          k = data[parseInt(i.toString(), 10)].isCaptionRow ? k : data[parseInt(i.toString(), 10)].index;
          pageData.push(data[parseInt(i.toString(), 10)]);
        }
        if (data[parseInt(i.toString(), 10)].index >= eIndex || data[parseInt(i.toString(), 10)].index === eIndex - 1) {
          break;
        }
      }
      this.infiniteCache[parseInt(index.toString(), 10)] = pageData;
      this.resetContentModuleCache(this.infiniteCache);
    };
    InfiniteScroll2.prototype.resetContentModuleCache = function(data) {
      this.parent.contentModule.infiniteCache = data;
    };
    InfiniteScroll2.prototype.resetInfiniteCache = function(rowObjects) {
      var blockLength = Object.keys(this.infiniteCache).length;
      this.infiniteCache = {};
      for (var i = 1; i <= blockLength; i++) {
        var startIndex = (i - 1) * this.parent.pageSettings.pageSize;
        var endIndex = i * this.parent.pageSettings.pageSize;
        if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
          this.setInitialGroupCache(rowObjects, i, startIndex, endIndex);
        } else {
          this.infiniteCache[parseInt(i.toString(), 10)] = rowObjects.slice(startIndex, endIndex);
          this.resetContentModuleCache(this.infiniteCache);
        }
      }
    };
    InfiniteScroll2.prototype.destroy = function() {
      this.removeEventListener();
    };
    return InfiniteScroll2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/group-lazy-load-renderer.js
var __extends45 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var GroupLazyLoadRenderer = (
  /** @class */
  function(_super) {
    __extends45(GroupLazyLoadRenderer2, _super);
    function GroupLazyLoadRenderer2(parent, locator) {
      var _this = _super.call(this, parent, locator) || this;
      _this.childCount = 0;
      _this.scrollData = [];
      _this.isFirstChildRow = false;
      _this.isScrollDown = false;
      _this.isScrollUp = false;
      _this.groupCache = {};
      _this.cacheRowsObj = {};
      _this.startIndexes = {};
      _this.captionCounts = {};
      _this.rowsByUid = {};
      _this.objIdxByUid = {};
      _this.initialGroupCaptions = {};
      _this.requestType = ["paging", "columnstate", "reorder", "cancel", "save", "beginEdit", "add", "delete", "filterBeforeOpen", "filterchoicerequest", "infiniteScroll", "virtualscroll"];
      _this.scrollTopCache = void 0;
      _this.refRowsObj = {};
      _this.cacheMode = false;
      _this.cacheBlockSize = 5;
      _this.ignoreAccent = _this.parent.allowFiltering ? _this.parent.filterSettings.ignoreAccent : false;
      _this.allowCaseSensitive = false;
      _this.lazyLoadQuery = [];
      _this.locator = locator;
      _this.groupGenerator = new GroupModelGenerator(_this.parent);
      _this.summaryModelGen = new GroupSummaryModelGenerator(_this.parent);
      _this.captionModelGen = new CaptionSummaryModelGenerator(_this.parent);
      _this.rowRenderer = new RowRenderer(_this.locator, null, _this.parent);
      _this.eventListener();
      return _this;
    }
    GroupLazyLoadRenderer2.prototype.eventListener = function() {
      this.parent.addEventListener(actionBegin, this.actionBegin.bind(this));
      this.parent.addEventListener(actionComplete, this.actionComplete.bind(this));
      this.parent.on(initialEnd, this.setLazyLoadPageSize, this);
      this.parent.on(setGroupCache, this.setCache, this);
      this.parent.on(lazyLoadScrollHandler, this.scrollHandler, this);
      this.parent.on(columnVisibilityChanged, this.setVisible, this);
      this.parent.on(groupCollapse, this.collapseShortcut, this);
    };
    GroupLazyLoadRenderer2.prototype.captionExpand = function(tr) {
      var _this = this;
      var page = this.parent.pageSettings.currentPage;
      var rowsObject = this.groupCache[parseInt(page.toString(), 10)];
      var uid2 = tr.getAttribute("data-uid");
      this.refreshCaches();
      if ((!this.scrollTopCache || this.parent.scrollModule["content"].scrollTop > this.scrollTopCache) && !this.parent.enableVirtualization) {
        this.scrollTopCache = this.parent.scrollModule["content"].scrollTop;
      }
      var oriIndex = this.getRowObjectIndexByUid(uid2);
      var isRowExist = rowsObject[oriIndex + 1] ? rowsObject[parseInt(oriIndex.toString(), 10)].indent < rowsObject[oriIndex + 1].indent : false;
      if (this.parent.enableVirtualization) {
        isRowExist = this.cacheRowsObj["" + uid2] ? true : false;
      }
      var data = rowsObject[parseInt(oriIndex.toString(), 10)];
      var key = getGroupKeysAndFields(oriIndex, rowsObject);
      for (var i = 0; i < key.fields.length; i++) {
        var column = this.parent.getColumnByField(key.fields[parseInt(i.toString(), 10)]);
        if (column.enableGroupByFormat) {
          key.keys[parseInt(i.toString(), 10)] = this.locator.getService("valueFormatter").fromView(key.keys[parseInt(i.toString(), 10)], column.getParser(), column.type === "dateonly" ? "date" : column.type);
        }
      }
      var e = {
        captionRowElement: tr,
        groupInfo: data,
        enableCaching: true,
        cancel: false
      };
      this.parent.trigger(lazyLoadGroupExpand, e, function(args) {
        if (args.cancel) {
          return;
        }
        args.keys = key.keys;
        args.fields = key.fields;
        args.rowIndex = tr.rowIndex;
        args.makeRequest = !args.enableCaching || !isRowExist;
        if (!args.enableCaching && isRowExist) {
          _this.clearCache([uid2]);
        }
        args.skip = 0;
        args.take = _this.pageSize;
        data.isExpand = true;
        if (_this.rowsByUid[parseInt(page.toString(), 10)][data.uid]) {
          _this.rowsByUid[parseInt(page.toString(), 10)][data.uid].isExpand = true;
        }
        _this.captionRowExpand(args);
      });
    };
    GroupLazyLoadRenderer2.prototype.captionCollapse = function(tr) {
      var _this = this;
      var cache = this.groupCache[this.parent.pageSettings.currentPage];
      var rowIdx = tr.rowIndex;
      var uid2 = tr.getAttribute("data-uid");
      this.refreshCaches();
      var captionIndex = this.getRowObjectIndexByUid(uid2);
      var e = {
        captionRowElement: tr,
        groupInfo: cache[parseInt(captionIndex.toString(), 10)],
        cancel: false
      };
      this.parent.trigger(lazyLoadGroupCollapse, e, function(args) {
        if (args.cancel) {
          return;
        }
        args.isExpand = false;
        for (var i = 0; i < _this.lazyLoadQuery.length; i++) {
          var query = _this.lazyLoadQuery[parseInt(i.toString(), 10)];
          var where = query[0];
          var removeCollapse = args.groupInfo.data;
          if (removeCollapse["key"] === where["value"]) {
            _this.lazyLoadQuery.splice(i, 1);
          }
        }
        _this.removeRows(captionIndex, rowIdx, uid2);
        if (_this.parent.enableInfiniteScrolling || _this.parent.enableVirtualization) {
          _this.groupCache[_this.parent.pageSettings.currentPage] = extend([], _this.refRowsObj[_this.parent.pageSettings.currentPage]);
          _this.refreshRowObjects([], captionIndex);
        }
      });
    };
    GroupLazyLoadRenderer2.prototype.setLazyLoadPageSize = function() {
      var scrollEle = this.parent.getContent().firstElementChild;
      var blockSize = Math.floor(scrollEle.offsetHeight / this.parent.getRowHeight()) - 1;
      this.pageSize = this.pageSize ? this.pageSize : blockSize * 3;
      this.blockSize = Math.ceil(this.pageSize / 2);
    };
    GroupLazyLoadRenderer2.prototype.clearLazyGroupCache = function() {
      this.clearCache();
    };
    GroupLazyLoadRenderer2.prototype.clearCache = function(uids) {
      uids = uids ? uids : this.getInitialCaptionIndexes();
      var cache = this.groupCache[this.parent.pageSettings.currentPage];
      if (uids.length) {
        for (var i = 0; i < uids.length; i++) {
          var capIdx = this.getRowObjectIndexByUid(uids[parseInt(i.toString(), 10)]);
          var capRow = cache[parseInt(capIdx.toString(), 10)];
          if (!capRow) {
            continue;
          }
          if (this.captionCounts[this.parent.pageSettings.currentPage][capRow.uid]) {
            for (var i_1 = capIdx + 1; i_1 < cache.length; i_1++) {
              if (cache[parseInt(i_1.toString(), 10)].indent === capRow.indent || cache[parseInt(i_1.toString(), 10)].indent < capRow.indent) {
                delete this.captionCounts[this.parent.pageSettings.currentPage][capRow.uid];
                break;
              }
              if (cache[parseInt(i_1.toString(), 10)].isCaptionRow) {
                delete this.captionCounts[this.parent.pageSettings.currentPage][cache[parseInt(i_1.toString(), 10)].uid];
              }
            }
          }
          if (capRow.isExpand) {
            var tr = this.parent.getRowElementByUID(capRow.uid);
            if (!tr) {
              return;
            }
            this.parent.groupModule.expandCollapseRows(tr.querySelector(".e-recordplusexpand"));
          }
          var child = this.getNextChilds(capIdx);
          if (!child.length) {
            continue;
          }
          var subChild = [];
          if (child[child.length - 1].isCaptionRow) {
            subChild = this.getChildRowsByParentIndex(cache.indexOf(child[child.length - 1]), false, false, null, true, true);
          }
          var start = cache.indexOf(child[0]);
          var end = subChild.length ? cache.indexOf(subChild[subChild.length - 1]) : cache.indexOf(child[child.length - 1]);
          cache.splice(start, end - (start - 1));
          this.refreshCaches();
        }
      }
    };
    GroupLazyLoadRenderer2.prototype.refreshCaches = function() {
      var page = this.parent.pageSettings.currentPage;
      var cache = this.groupCache[parseInt(page.toString(), 10)];
      if (this.parent.enableInfiniteScrolling) {
        this.rowsByUid[parseInt(page.toString(), 10)] = [];
        this.objIdxByUid[parseInt(page.toString(), 10)] = [];
      } else {
        this.rowsByUid = {};
        this.objIdxByUid = {};
      }
      for (var i = 0; i < cache.length; i++) {
        this.maintainRows(cache[parseInt(i.toString(), 10)], i);
      }
    };
    GroupLazyLoadRenderer2.prototype.getInitialCaptionIndexes = function() {
      var page = this.parent.pageSettings.currentPage;
      var uids = [];
      for (var i = 0; i < this.initialGroupCaptions[parseInt(page.toString(), 10)].length; i++) {
        uids.push(this.initialGroupCaptions[parseInt(page.toString(), 10)][parseInt(i.toString(), 10)].uid);
      }
      return uids;
    };
    GroupLazyLoadRenderer2.prototype.getRowObjectIndexByUid = function(uid2) {
      return this.objIdxByUid[this.parent.pageSettings.currentPage]["" + uid2];
    };
    GroupLazyLoadRenderer2.prototype.collapseShortcut = function(args) {
      if (this.parent.groupSettings.columns.length && args.target && parentsUntil(args.target, content) && args.target.parentElement.tagName === "TR") {
        if (!args.collapse && parentsUntil(args.target, row)) {
          return;
        }
        var row2 = args.target.parentElement;
        var uid2 = row2.getAttribute("data-uid");
        if (args.collapse) {
          var rowObj = this.getRowByUid(uid2);
          var capRow = this.getRowByUid(rowObj.parentUid);
          if (capRow.isCaptionRow && capRow.isExpand) {
            var capEle = this.getRowElementByUid(rowObj.parentUid);
            this.parent.groupModule.expandCollapseRows(capEle.cells[rowObj.indent - 1]);
          }
        } else {
          var capRow = this.getRowByUid(uid2);
          if (capRow.isCaptionRow && !capRow.isExpand) {
            var capEle = this.getRowElementByUid(uid2);
            this.parent.groupModule.expandCollapseRows(capEle.cells[capRow.indent]);
          }
        }
      }
    };
    GroupLazyLoadRenderer2.prototype.getRowByUid = function(uid2) {
      return this.rowsByUid[this.parent.pageSettings.currentPage]["" + uid2];
    };
    GroupLazyLoadRenderer2.prototype.actionBegin = function(args) {
      if (!args.cancel) {
        if (!this.requestType.some(function(value) {
          return value === args.requestType;
        })) {
          this.groupCache = {};
          this.resetRowMaintenance();
          if (this.parent.enableVirtualization) {
            this.parent.contentModule.currentInfo = {};
          }
        }
        if (args.requestType === "reorder" && this.parent.groupSettings.columns.length) {
          var keys = Object.keys(this.groupCache);
          for (var j = 0; j < keys.length; j++) {
            var cache = this.groupCache[keys[parseInt(j.toString(), 10)]];
            for (var i = 0; i < cache.length; i++) {
              if (cache[parseInt(i.toString(), 10)].isCaptionRow && !this.captionModelGen.isEmpty()) {
                this.changeCaptionRow(cache[parseInt(i.toString(), 10)], null, keys[parseInt(j.toString(), 10)]);
              }
              if (cache[parseInt(i.toString(), 10)].isDataRow) {
                var from = args.fromIndex + cache[parseInt(i.toString(), 10)].indent;
                var to = args.toIndex + cache[parseInt(i.toString(), 10)].indent;
                this.moveCells(cache[parseInt(i.toString(), 10)].cells, from, to);
              }
            }
          }
        }
        if (args.requestType === "delete" || args.action === "add" && args.requestType === "save") {
          this.groupCache = {};
          this.resetRowMaintenance();
          if (this.parent.enableVirtualization) {
            this.parent.contentModule.currentInfo = {};
          }
        }
      }
    };
    GroupLazyLoadRenderer2.prototype.actionComplete = function(args) {
      if (!args.cancel && args.requestType !== "columnstate" && args.requestType !== "beginEdit" && args.requestType !== "delete" && args.requestType !== "save" && args.requestType !== "reorder" && args.requestType !== "infiniteScroll") {
        this.scrollReset();
      }
    };
    GroupLazyLoadRenderer2.prototype.resetRowMaintenance = function() {
      this.startIndexes = {};
      this.captionCounts = {};
      this.rowsByUid = {};
      this.objIdxByUid = {};
      this.initialGroupCaptions = {};
    };
    GroupLazyLoadRenderer2.prototype.moveCells = function(arr, from, to) {
      if (from >= arr.length) {
        var k = from - arr.length;
        while (k-- + 1) {
          arr.push(void 0);
        }
      }
      arr.splice(from, 0, arr.splice(to, 1)[0]);
    };
    GroupLazyLoadRenderer2.prototype.removeRows = function(idx, trIdx, uid2) {
      var page = this.parent.pageSettings.currentPage;
      var rows = this.groupCache[parseInt(page.toString(), 10)];
      var trs = [].slice.call(this.parent.getContent().querySelectorAll("tr"));
      var aggUid;
      var count2 = 0;
      if (this.parent.aggregates.length) {
        var agg = this.getAggregateByCaptionIndex(idx);
        aggUid = agg.length ? agg[agg.length - 1].uid : void 0;
      }
      var indent = rows[parseInt(idx.toString(), 10)].indent;
      this.addClass(this.getNextChilds(parseInt(idx.toString(), 10)));
      rows[parseInt(idx.toString(), 10)].isExpand = false;
      if (this.rowsByUid[parseInt(page.toString(), 10)][rows[parseInt(idx.toString(), 10)].uid]) {
        this.rowsByUid[parseInt(page.toString(), 10)][rows[parseInt(idx.toString(), 10)].uid].isExpand = false;
      }
      var capUid;
      for (var i = idx + 1; i < rows.length; i++) {
        if (rows[parseInt(i.toString(), 10)].indent === indent || rows[parseInt(i.toString(), 10)].indent < indent) {
          capUid = rows[parseInt(i.toString(), 10)].uid;
          break;
        }
        if (rows[parseInt(i.toString(), 10)].isCaptionRow && rows[parseInt(i.toString(), 10)].isExpand) {
          this.addClass(this.getNextChilds(i));
        }
      }
      for (var i = trIdx + 1; i < trs.length; i++) {
        if (trs[parseInt(i.toString(), 10)].getAttribute("data-uid") === capUid) {
          break;
        } else if (trs[parseInt(i.toString(), 10)].getAttribute("data-uid") === aggUid) {
          remove(trs[parseInt(i.toString(), 10)]);
          break;
        } else {
          remove(trs[parseInt(i.toString(), 10)]);
          this.refRowsObj[parseInt(page.toString(), 10)].splice(trIdx + 1, 1);
          count2 = count2 + 1;
        }
      }
      if (this.parent.enableVirtualization) {
        this.cacheRowsObj["" + uid2] = this.groupCache[parseInt(page.toString(), 10)].slice(idx + 1, idx + 1 + count2);
        this.groupCache[parseInt(page.toString(), 10)].splice(idx + 1, count2);
        this.parent.notify(refreshVirtualLazyLoadCache, {
          rows: [],
          uid: rows[parseInt(idx.toString(), 10)].uid,
          count: count2
        });
        this.parent.contentModule.setVirtualHeight();
        this.parent.islazyloadRequest = false;
      }
      if (this.parent.scrollModule["content"].scrollTop > this.scrollTopCache && !this.parent.enableVirtualization) {
        this.parent.scrollModule["content"].scrollTop = this.scrollTopCache;
      }
      if (this.parent.getContentTable().scrollHeight < this.parent.getContent().clientHeight && this.parent.height !== "auto") {
        this.parent.scrollModule.setLastRowCell();
      }
      this.parent.notify(refreshExpandandCollapse, {
        rows: this.refRowsObj[parseInt(page.toString(), 10)]
      });
    };
    GroupLazyLoadRenderer2.prototype.addClass = function(rows) {
      var last = rows[this.blockSize];
      if (last) {
        last.lazyLoadCssClass = "e-lazyload-middle-down";
      }
    };
    GroupLazyLoadRenderer2.prototype.getNextChilds = function(index, rowObjects) {
      var group = this.groupCache[this.parent.pageSettings.currentPage];
      var rows = rowObjects ? rowObjects : group;
      var indent = group[parseInt(index.toString(), 10)].indent + 1;
      var childRows = [];
      for (var i = rowObjects ? 0 : index + 1; i < rows.length; i++) {
        if (rows[parseInt(i.toString(), 10)].indent < indent) {
          break;
        }
        if (rows[parseInt(i.toString(), 10)].indent === indent) {
          childRows.push(rows[parseInt(i.toString(), 10)]);
        }
      }
      return childRows;
    };
    GroupLazyLoadRenderer2.prototype.lazyLoadHandler = function(args) {
      this.setStartIndexes();
      var tr = this.parent.getContent().querySelectorAll("tr")[args.index];
      var uid2 = tr.getAttribute("data-uid");
      var captionIndex = this.getRowObjectIndexByUid(uid2);
      var captionRow = this.groupCache[this.parent.pageSettings.currentPage][parseInt(captionIndex.toString(), 10)];
      var rows = args.isRowExist ? args.isScroll ? this.scrollData : this.parent.enableVirtualization ? this.cacheRowsObj["" + uid2] : this.getChildRowsByParentIndex(captionIndex, true, true, null, true) : [];
      this.scrollData = [];
      if (!args.isRowExist) {
        this.setRowIndexes(captionIndex, captionRow);
        this.refreshCaptionRowCount(this.groupCache[this.parent.pageSettings.currentPage][parseInt(captionIndex.toString(), 10)], args.count);
        if (Object.keys(args.data).indexOf("GroupGuid") !== -1) {
          for (var i = 0; i < args.data.length; i++) {
            var data = this.groupGenerator.generateCaptionRow(args.data[parseInt(i.toString(), 10)], args.level, captionRow.parentGid, void 0, 0, captionRow.uid);
            rows.push(data);
            if (this.parent.aggregates.length) {
              rows = rows.concat(this.summaryModelGen.generateRows(args.data[parseInt(i.toString(), 10)], {
                level: args.level + 1,
                parentUid: data.uid
              }));
            }
          }
        } else {
          this.groupGenerator.index = this.getStartIndex(captionIndex, args.isScroll);
          rows = this.groupGenerator.generateDataRows(args.data, args.level, captionRow.parentGid, 0, captionRow.uid);
        }
      }
      var trIdx = args.isScroll ? this.rowIndex : args.index;
      var nxtChild = this.getNextChilds(captionIndex, rows);
      var lastRow = !args.up ? this.hasLastChildRow(args.isScroll, args.count, nxtChild.length) : true;
      if (!args.isRowExist && !lastRow) {
        nxtChild[this.blockSize].lazyLoadCssClass = "e-lazyload-middle-down";
      }
      if (!lastRow) {
        nxtChild[nxtChild.length - 1].lazyLoadCssClass = "e-not-lazyload-end";
      }
      var aggregates = !args.isScroll && !args.isRowExist ? this.getAggregateByCaptionIndex(captionIndex) : [];
      if (!args.up) {
        if (!args.isRowExist || this.parent.enableVirtualization && args.isRowExist && this.cacheRowsObj["" + uid2]) {
          this.refreshRowObjects(rows, args.isScroll ? this.rowObjectIndex : captionIndex);
        }
      }
      if (this.parent.enableVirtualization) {
        var uid_1 = args.isScroll ? this.groupCache[this.parent.pageSettings.currentPage][this.rowIndex].uid : captionRow.uid;
        this.parent.notify(refreshVirtualLazyLoadCache, {
          rows,
          uid: uid_1
        });
        this.parent.contentModule.setVirtualHeight();
        this.parent.contentModule.isTop = false;
      }
      this.render(trIdx, rows, lastRow, aggregates);
      if (this.isFirstChildRow && !args.up) {
        this.parent.getContent().firstElementChild.scrollTop = rows.length * this.parent.getRowHeight();
      }
      this.isFirstChildRow = false;
      this.rowIndex = void 0;
      this.rowObjectIndex = void 0;
      this.childCount = 0;
      for (var i = 0; i < rows.length; i++) {
        this.refRowsObj[this.parent.pageSettings.currentPage].splice(captionIndex + i + 1, 0, rows[parseInt(i.toString(), 10)]);
      }
      if (lastRow && tr.querySelector(".e-lastrowcell")) {
        this.parent.groupModule.lastCaptionRowBorder();
      }
      this.parent.notify(refreshExpandandCollapse, {
        rows: this.refRowsObj[this.parent.pageSettings.currentPage]
      });
      if (this.parent.enableVirtualMaskRow) {
        this.parent.removeMaskRow();
      }
    };
    GroupLazyLoadRenderer2.prototype.setRowIndexes = function(capIdx, row2) {
      if (!this.captionCounts[this.parent.pageSettings.currentPage]) {
        this.captionCounts[this.parent.pageSettings.currentPage] = {};
      }
      if (row2.isCaptionRow) {
        this.captionCounts[this.parent.pageSettings.currentPage][row2.uid] = row2.data.count;
      }
    };
    GroupLazyLoadRenderer2.prototype.getStartIndex = function(capIdx, isScroll) {
      var page = this.parent.pageSettings.currentPage;
      var cache = this.groupCache[parseInt(page.toString(), 10)];
      if (isScroll) {
        return cache[this.rowObjectIndex].index + 1;
      }
      var count2 = 0;
      var idx = 0;
      var prevCapRow = this.getRowByUid(cache[parseInt(capIdx.toString(), 10)].parentUid);
      if (prevCapRow) {
        idx = this.prevCaptionCount(prevCapRow);
      }
      if (cache[parseInt(capIdx.toString(), 10)].indent > 0) {
        for (var i = capIdx - 1; i >= 0; i--) {
          if (cache[parseInt(i.toString(), 10)].indent < cache[parseInt(capIdx.toString(), 10)].indent) {
            break;
          }
          if (cache[parseInt(i.toString(), 10)].isCaptionRow && cache[parseInt(i.toString(), 10)].indent === cache[parseInt(capIdx.toString(), 10)].indent) {
            count2 = count2 + cache[parseInt(i.toString(), 10)].data.count;
          }
        }
      }
      var index = count2 + idx + this.startIndexes[parseInt(page.toString(), 10)][cache[parseInt(capIdx.toString(), 10)].parentGid];
      return index;
    };
    GroupLazyLoadRenderer2.prototype.prevCaptionCount = function(prevCapRow) {
      var page = this.parent.pageSettings.currentPage;
      var cache = this.groupCache[parseInt(page.toString(), 10)];
      var idx = 0;
      for (var i = cache.indexOf(prevCapRow) - 1; i >= 0; i--) {
        if (cache[parseInt(i.toString(), 10)].indent === 0) {
          break;
        }
        if (cache[parseInt(i.toString(), 10)].indent < prevCapRow.indent) {
          break;
        }
        if (cache[parseInt(i.toString(), 10)].isCaptionRow && cache[parseInt(i.toString(), 10)].indent === prevCapRow.indent) {
          var count2 = this.captionCounts[parseInt(page.toString(), 10)][cache[parseInt(i.toString(), 10)].uid];
          idx = idx + (count2 ? count2 : cache[parseInt(i.toString(), 10)].data.count);
        }
      }
      var capRow = this.getRowByUid(prevCapRow.parentUid);
      if (capRow) {
        idx = idx + this.prevCaptionCount(capRow);
      }
      return idx;
    };
    GroupLazyLoadRenderer2.prototype.setStartIndexes = function() {
      var cache = this.groupCache[this.parent.pageSettings.currentPage];
      if (!this.startIndexes[this.parent.pageSettings.currentPage]) {
        var indexes = [];
        var idx = void 0;
        for (var i = 0; i < cache.length; i++) {
          if (cache[parseInt(i.toString(), 10)].isCaptionRow) {
            if (!indexes.length) {
              indexes.push(0);
            } else {
              indexes.push(cache[parseInt(idx.toString(), 10)].data.count + indexes[indexes.length - 1]);
            }
            idx = i;
          }
        }
        this.startIndexes[this.parent.pageSettings.currentPage] = indexes;
      }
    };
    GroupLazyLoadRenderer2.prototype.hasLastChildRow = function(isScroll, captionCount, rowCount) {
      return isScroll ? captionCount === this.childCount + rowCount : captionCount === rowCount;
    };
    GroupLazyLoadRenderer2.prototype.refreshCaptionRowCount = function(row2, count2) {
      row2.data.count = count2;
    };
    GroupLazyLoadRenderer2.prototype.render = function(trIdx, rows, hasLastChildRow, aggregates) {
      var tr = this.parent.getContent().querySelectorAll("tr")[parseInt(trIdx.toString(), 10)];
      var scrollEle = this.parent.getContent().firstElementChild;
      var rowHeight2 = this.parent.getRowHeight();
      if (tr && aggregates.length) {
        for (var i = aggregates.length - 1; i >= 0; i--) {
          tr.insertAdjacentElement("afterend", this.rowRenderer.render(aggregates[parseInt(i.toString(), 10)], this.parent.getColumns()));
        }
      }
      if (tr && rows.length) {
        for (var i = rows.length - 1; i >= 0; i--) {
          if (this.confirmRowRendering(rows[parseInt(i.toString(), 10)])) {
            tr.insertAdjacentElement("afterend", this.rowRenderer.render(rows[parseInt(i.toString(), 10)], this.parent.getColumns()));
            if (this.isScrollDown) {
              scrollEle.scrollTop = scrollEle.scrollTop - rowHeight2;
            }
            if (this.isScrollUp) {
              scrollEle.scrollTop = scrollEle.scrollTop + rowHeight2;
            }
          }
        }
      }
      this.isScrollDown = false;
      this.isScrollUp = false;
    };
    GroupLazyLoadRenderer2.prototype.maintainRows = function(row2, index) {
      var page = this.parent.pageSettings.currentPage;
      if (!this.rowsByUid[parseInt(page.toString(), 10)]) {
        this.rowsByUid[parseInt(page.toString(), 10)] = {};
        this.objIdxByUid[parseInt(page.toString(), 10)] = {};
      }
      if (row2.uid) {
        this.rowsByUid[parseInt(page.toString(), 10)][row2.uid] = row2;
      }
      this.objIdxByUid[parseInt(page.toString(), 10)][row2.uid] = index;
    };
    GroupLazyLoadRenderer2.prototype.confirmRowRendering = function(row2) {
      var check = true;
      if (isNullOrUndefined(row2.indent) && !row2.isDataRow && !row2.isCaptionRow) {
        var cap = this.getRowByUid(row2.parentUid);
        if (cap.isCaptionRow && !cap.isExpand) {
          check = false;
        }
      }
      return check;
    };
    GroupLazyLoadRenderer2.prototype.refreshRowObjects = function(newRows, index) {
      var page = this.parent.pageSettings.currentPage;
      var rowsObject = this.groupCache[parseInt(page.toString(), 10)];
      this.rowsByUid[parseInt(page.toString(), 10)] = {};
      this.objIdxByUid[parseInt(page.toString(), 10)] = {};
      var newRowsObject = [];
      var k = 0;
      for (var i = 0; i < rowsObject.length; i++) {
        if (i === index) {
          this.maintainRows(rowsObject[parseInt(i.toString(), 10)], k);
          newRowsObject.push(rowsObject[parseInt(i.toString(), 10)]);
          k++;
          for (var j = 0; j < newRows.length; j++) {
            this.maintainRows(newRows[parseInt(j.toString(), 10)], k);
            newRowsObject.push(newRows[parseInt(j.toString(), 10)]);
            k++;
          }
        } else {
          this.maintainRows(rowsObject[parseInt(i.toString(), 10)], k);
          newRowsObject.push(rowsObject[parseInt(i.toString(), 10)]);
          k++;
        }
      }
      this.groupCache[this.parent.pageSettings.currentPage] = extend([], newRowsObject);
      this.updateCurrentViewData();
    };
    GroupLazyLoadRenderer2.prototype.getAggregateByCaptionIndex = function(index) {
      var cache = this.groupCache[this.parent.pageSettings.currentPage];
      var parent = cache[parseInt(index.toString(), 10)];
      var indent = parent.indent;
      var uid2 = parent.uid;
      var agg = [];
      for (var i = index + 1; i < cache.length; i++) {
        if (cache[parseInt(i.toString(), 10)].indent === indent) {
          break;
        }
        if (isNullOrUndefined(cache[parseInt(i.toString(), 10)].indent) && cache[parseInt(i.toString(), 10)].parentUid === uid2) {
          agg.push(cache[parseInt(i.toString(), 10)]);
        }
      }
      return agg;
    };
    GroupLazyLoadRenderer2.prototype.getChildRowsByParentIndex = function(index, deep, block, data, includeAgg, includeCollapseAgg) {
      var cache = data ? data : this.groupCache[this.parent.pageSettings.currentPage];
      var parentRow = cache[parseInt(index.toString(), 10)];
      var agg = [];
      if (!parentRow.isCaptionRow || parentRow.isCaptionRow && !parentRow.isExpand && !includeCollapseAgg) {
        return [];
      }
      if (includeAgg && this.parent.aggregates.length) {
        agg = this.getAggregateByCaptionIndex(index);
      }
      var indent = parentRow.indent;
      var uid2 = parentRow.uid;
      var rows = [];
      var count2 = 0;
      for (var i = index + 1; i < cache.length; i++) {
        if (cache[parseInt(i.toString(), 10)].parentUid === uid2) {
          if (isNullOrUndefined(cache[parseInt(i.toString(), 10)].indent)) {
            continue;
          }
          count2++;
          rows.push(cache[parseInt(i.toString(), 10)]);
          if (deep && cache[parseInt(i.toString(), 10)].isCaptionRow) {
            rows = rows.concat(this.getChildRowsByParentIndex(i, deep, block, data, includeAgg));
          }
          if (block && count2 === this.pageSize) {
            break;
          }
        }
        if (cache[parseInt(i.toString(), 10)].indent === indent) {
          break;
        }
      }
      return rows.concat(agg);
    };
    GroupLazyLoadRenderer2.prototype.initialGroupRows = function(isReorder) {
      var rows = [];
      var cache = this.groupCache[this.parent.pageSettings.currentPage];
      if (isReorder) {
        return this.getRenderedRowsObject();
      }
      for (var i = 0; i < cache.length; i++) {
        if (cache[parseInt(i.toString(), 10)].indent === 0) {
          rows.push(cache[parseInt(i.toString(), 10)]);
          rows = rows.concat(this.getChildRowsByParentIndex(i, true, true, cache, true));
        }
      }
      return rows;
    };
    GroupLazyLoadRenderer2.prototype.getRenderedRowsObject = function() {
      var rows = [];
      var trs = [].slice.call(this.parent.getContent().querySelectorAll("tr"));
      for (var i = 0; i < trs.length; i++) {
        rows.push(this.getRowByUid(trs[parseInt(i.toString(), 10)].getAttribute("data-uid")));
      }
      return rows;
    };
    GroupLazyLoadRenderer2.prototype.getCacheRowsOnDownScroll = function(index) {
      var rows = [];
      var rowsObject = this.groupCache[this.parent.pageSettings.currentPage];
      var k = index;
      for (var i = 0; i < this.pageSize; i++) {
        if (!rowsObject[parseInt(k.toString(), 10)] || rowsObject[parseInt(k.toString(), 10)].indent < rowsObject[parseInt(index.toString(), 10)].indent) {
          break;
        }
        if (rowsObject[parseInt(k.toString(), 10)].indent === rowsObject[parseInt(index.toString(), 10)].indent) {
          rows.push(rowsObject[parseInt(k.toString(), 10)]);
          if (rowsObject[parseInt(k.toString(), 10)].isCaptionRow && rowsObject[parseInt(k.toString(), 10)].isExpand) {
            rows = rows.concat(this.getChildRowsByParentIndex(k, true, true, null, true));
          }
        }
        if (rowsObject[parseInt(k.toString(), 10)].indent > rowsObject[parseInt(index.toString(), 10)].indent || isNullOrUndefined(rowsObject[parseInt(k.toString(), 10)].indent)) {
          i--;
        }
        k++;
      }
      return rows;
    };
    GroupLazyLoadRenderer2.prototype.getCacheRowsOnUpScroll = function(start, end, index) {
      var rows = [];
      var rowsObject = this.groupCache[this.parent.pageSettings.currentPage];
      var str = false;
      for (var i = 0; i < rowsObject.length; i++) {
        if (str && (!rowsObject[parseInt(i.toString(), 10)] || rowsObject[parseInt(i.toString(), 10)].indent < rowsObject[parseInt(index.toString(), 10)].indent || rowsObject[parseInt(i.toString(), 10)].uid === end)) {
          break;
        }
        if (!str && rowsObject[parseInt(i.toString(), 10)].uid === start) {
          str = true;
        }
        if (str && rowsObject[parseInt(i.toString(), 10)].indent === rowsObject[parseInt(index.toString(), 10)].indent) {
          rows.push(rowsObject[parseInt(i.toString(), 10)]);
          if (rowsObject[parseInt(i.toString(), 10)].isCaptionRow && rowsObject[parseInt(i.toString(), 10)].isExpand) {
            rows = rows.concat(this.getChildRowsByParentIndex(i, true, true, null, true));
          }
        }
      }
      return rows;
    };
    GroupLazyLoadRenderer2.prototype.scrollHandler = function(e) {
      if (this.parent.isDestroyed || this.childCount) {
        return;
      }
      var downTrs = [].slice.call(this.parent.getContent().getElementsByClassName("e-lazyload-middle-down"));
      var upTrs = [].slice.call(this.parent.getContent().getElementsByClassName("e-lazyload-middle-up"));
      var endTrs = [].slice.call(this.parent.getContent().getElementsByClassName("e-not-lazyload-end"));
      var tr;
      var lazyLoadDown = false;
      var lazyLoadUp = false;
      var lazyLoadEnd = false;
      if (e.scrollDown && downTrs.length) {
        var result = this.findRowElements(downTrs);
        tr = result.tr;
        lazyLoadDown = result.entered;
      }
      if (!e.scrollDown && endTrs) {
        for (var i = 0; i < endTrs.length; i++) {
          var top_1 = endTrs[parseInt(i.toString(), 10)].getBoundingClientRect().top;
          var scrollHeight = this.parent.getContent().scrollHeight;
          if (top_1 > 0 && top_1 < scrollHeight) {
            tr = endTrs[parseInt(i.toString(), 10)];
            lazyLoadEnd = true;
            this.rowIndex = tr.rowIndex;
            break;
          }
        }
      }
      if (!e.scrollDown && upTrs.length && !lazyLoadEnd) {
        var result = this.findRowElements(upTrs);
        tr = result.tr;
        lazyLoadUp = result.entered;
      }
      if (tr && !tr.classList.contains("e-masked-row")) {
        if (lazyLoadDown && e.scrollDown && lazyLoadDown && tr) {
          this.scrollDownHandler(tr);
        }
        if (!e.scrollDown && lazyLoadEnd && tr) {
          this.scrollUpEndRowHandler(tr);
        }
        if (this.cacheMode && !e.scrollDown && !lazyLoadEnd && lazyLoadUp && tr) {
          this.scrollUpHandler(tr);
        }
      }
    };
    GroupLazyLoadRenderer2.prototype.scrollUpEndRowHandler = function(tr) {
      var page = this.parent.pageSettings.currentPage;
      var rows = this.groupCache[parseInt(page.toString(), 10)];
      var uid2 = tr.getAttribute("data-uid");
      var index = this.rowObjectIndex = this.getRowObjectIndexByUid(uid2);
      var idx = index;
      var childRow = rows[parseInt(index.toString(), 10)];
      var parentCapRow = this.getRowByUid(childRow.parentUid);
      var capRowObjIdx = this.getRowObjectIndexByUid(parentCapRow.uid);
      var captionRowEle = this.parent.getContent().querySelector("tr[data-uid=" + parentCapRow.uid + "]");
      var capRowEleIndex = captionRowEle.rowIndex;
      var child = this.getChildRowsByParentIndex(capRowObjIdx);
      var childIdx = child.indexOf(childRow);
      var currentPage = Math.ceil(childIdx / this.pageSize);
      if (currentPage === 1) {
        return;
      }
      this.childCount = currentPage * this.pageSize;
      index = this.getCurrentBlockEndIndex(childRow, index);
      if (this.childCount < parentCapRow.data.count) {
        tr.classList.remove("e-not-lazyload-end");
        childRow.lazyLoadCssClass = "";
        var isRowExist = rows[index + 1] ? childRow.indent === rows[index + 1].indent : false;
        this.scrollData = isRowExist ? this.getCacheRowsOnDownScroll(index + 1) : [];
        var key = getGroupKeysAndFields(capRowObjIdx, rows);
        var args = {
          rowIndex: capRowEleIndex,
          makeRequest: !isRowExist,
          groupInfo: parentCapRow,
          fields: key.fields,
          keys: key.keys,
          skip: this.childCount,
          take: this.pageSize,
          isScroll: true
        };
        if (this.cacheMode && this.childCount >= this.pageSize * this.cacheBlockSize) {
          var child_1 = this.getChildRowsByParentIndex(capRowObjIdx);
          var currenBlock = Math.ceil(child_1.indexOf(rows[parseInt(idx.toString(), 10)]) / this.pageSize);
          var removeBlock = currenBlock - (this.cacheBlockSize - 1);
          this.removeBlock(uid2, isRowExist, removeBlock, child_1);
          args.cachedRowIndex = removeBlock * this.pageSize;
        }
        this.captionRowExpand(args);
      } else {
        this.childCount = 0;
      }
    };
    GroupLazyLoadRenderer2.prototype.scrollDownHandler = function(tr) {
      var page = this.parent.pageSettings.currentPage;
      var rows = this.groupCache[parseInt(page.toString(), 10)];
      var uid2 = tr.getAttribute("data-uid");
      var index = this.getRowObjectIndexByUid(uid2);
      var idx = index;
      var childRow = rows[parseInt(index.toString(), 10)];
      var parentCapRow = this.getRowByUid(childRow.parentUid);
      var capRowObjIdx = this.getRowObjectIndexByUid(parentCapRow.uid);
      var captionRowEle = this.getRowElementByUid(parentCapRow.uid);
      var capRowEleIndex = captionRowEle.rowIndex;
      var child = this.getChildRowsByParentIndex(capRowObjIdx);
      if (child.length === 0) {
        return;
      }
      var childIdx = child.indexOf(childRow);
      var currentPage = Math.ceil(childIdx / this.pageSize);
      this.childCount = currentPage * this.pageSize;
      if (isNullOrUndefined(child[this.childCount - 1])) {
        return;
      }
      if (this.parent.enableVirtualization) {
        this.parent.islazyloadRequest = true;
      }
      index = this.rowObjectIndex = this.getRowObjectIndexByUid(child[this.childCount - 1].uid);
      var lastchild = rows[parseInt(index.toString(), 10)];
      var lastRow = this.getRowElementByUid(lastchild.uid);
      this.rowIndex = lastRow.rowIndex;
      index = this.getCurrentBlockEndIndex(lastchild, index);
      if (this.childCount === parentCapRow.data.count) {
        this.parent.islazyloadRequest = false;
      }
      if (this.childCount < parentCapRow.data.count) {
        var isRowExist = rows[index + 1] ? childRow.indent === rows[index + 1].indent : false;
        if (isRowExist && !isNullOrUndefined(this.getRowElementByUid(rows[index + 1].uid))) {
          this.parent.islazyloadRequest = false;
          this.childCount = 0;
          return;
        }
        if (currentPage > 1 || !this.cacheMode) {
          tr.classList.remove("e-lazyload-middle-down");
          lastRow.classList.remove("e-not-lazyload-end");
          lastchild.lazyLoadCssClass = "";
        }
        this.scrollData = isRowExist ? this.getCacheRowsOnDownScroll(this.rowObjectIndex + 1) : [];
        var query = getGroupKeysAndFields(capRowObjIdx, rows);
        var args = {
          rowIndex: capRowEleIndex,
          makeRequest: !isRowExist,
          groupInfo: parentCapRow,
          fields: query.fields,
          keys: query.keys,
          skip: this.childCount,
          take: this.pageSize,
          isScroll: true
        };
        if (this.cacheMode && this.childCount - this.pageSize >= this.pageSize * this.cacheBlockSize) {
          this.isScrollDown = true;
          var child_2 = this.getChildRowsByParentIndex(capRowObjIdx);
          var currenBlock = Math.ceil(child_2.indexOf(rows[parseInt(idx.toString(), 10)]) / this.pageSize) - 1;
          var removeBlock = currenBlock - (this.cacheBlockSize - 1) + 1;
          this.removeBlock(uid2, isRowExist, removeBlock, child_2, lastchild);
          args.cachedRowIndex = removeBlock * this.pageSize;
        }
        this.captionRowExpand(args);
      } else {
        this.childCount = 0;
        this.parent.islazyloadRequest = false;
      }
    };
    GroupLazyLoadRenderer2.prototype.getCurrentBlockEndIndex = function(row2, index) {
      var page = this.parent.pageSettings.currentPage;
      var rows = this.groupCache[parseInt(page.toString(), 10)];
      if (row2.isCaptionRow) {
        if (row2.isExpand) {
          var childCount = this.getChildRowsByParentIndex(index, true).length;
          this.rowIndex = this.rowIndex + childCount;
        }
        var agg = this.getAggregateByCaptionIndex(index);
        this.rowObjectIndex = this.rowObjectIndex + agg.length;
        var idx = index;
        for (var i = idx + 1; i < rows.length; i++) {
          if (rows[parseInt(i.toString(), 10)].indent === rows[parseInt(index.toString(), 10)].indent || rows[parseInt(i.toString(), 10)].indent < rows[parseInt(index.toString(), 10)].indent) {
            index = idx;
            break;
          } else {
            idx++;
          }
        }
      }
      return index;
    };
    GroupLazyLoadRenderer2.prototype.removeBlock = function(uid2, isRowExist, removeBlock, child, lastchild) {
      var page = this.parent.pageSettings.currentPage;
      var rows = this.groupCache[parseInt(page.toString(), 10)];
      var uid1 = child[(removeBlock + 1) * this.pageSize - 1 - this.blockSize].uid;
      var uid22 = child[removeBlock * this.pageSize - this.pageSize].uid;
      var uid3 = child[removeBlock * this.pageSize].uid;
      var firstIdx = this.getRowObjectIndexByUid(uid1);
      rows[parseInt(firstIdx.toString(), 10)].lazyLoadCssClass = "e-lazyload-middle-up";
      this.getRowElementByUid(uid1).classList.add("e-lazyload-middle-up");
      if (lastchild) {
        this.getRowElementByUid(uid3).classList.add("e-not-lazyload-first");
        this.getRowByUid(uid3).lazyLoadCssClass = "e-not-lazyload-first";
        this.getRowByUid(uid22).lazyLoadCssClass = "";
      }
      if (isRowExist) {
        this.removeTopRows(lastchild ? lastchild.uid : uid2, uid22, uid3);
      } else {
        this.uid1 = uid22;
        this.uid2 = uid3;
        this.uid3 = lastchild ? lastchild.uid : uid2;
      }
    };
    GroupLazyLoadRenderer2.prototype.scrollUpHandler = function(tr) {
      var page = this.parent.pageSettings.currentPage;
      var rows = this.groupCache[parseInt(page.toString(), 10)];
      var uid2 = tr.getAttribute("data-uid");
      var row2 = this.getRowByUid(uid2);
      var index = this.rowObjectIndex = this.getRowObjectIndexByUid(uid2);
      var parentCapRow = this.getRowByUid(row2.parentUid);
      var capRowObjIdx = this.rowIndex = this.getRowObjectIndexByUid(parentCapRow.uid);
      var captionRowEle = this.parent.getRowElementByUID(parentCapRow.uid);
      var capRowEleIndex = captionRowEle.rowIndex;
      var child = this.getChildRowsByParentIndex(capRowObjIdx);
      var childIdx = child.indexOf(rows[parseInt(index.toString(), 10)]);
      var currenBlock = Math.floor(childIdx / this.pageSize);
      var idx = this.blockSize;
      if (this.blockSize * 2 > this.pageSize) {
        idx = this.blockSize * 2 - this.pageSize;
        idx = this.blockSize - idx;
      }
      var start = child[childIdx - (idx - 1) - this.pageSize].uid;
      var end = child[childIdx - (idx - 1)].uid;
      this.scrollData = this.getCacheRowsOnUpScroll(start, end, index - (idx - 1));
      this.isFirstChildRow = currenBlock > 1;
      if (this.isFirstChildRow) {
        this.scrollData[0].lazyLoadCssClass = "e-not-lazyload-first";
      }
      this.getRowByUid(end).lazyLoadCssClass = "";
      this.getRowElementByUid(end).classList.remove("e-not-lazyload-first");
      var removeBlock = currenBlock + this.cacheBlockSize;
      if (child.length !== parentCapRow.data.count && removeBlock * this.pageSize > child.length) {
        this.isFirstChildRow = false;
        this.scrollData[0].lazyLoadCssClass = "";
        this.getRowElementByUid(end).classList.add("e-not-lazyload-first");
        return;
      }
      var count2 = removeBlock * this.pageSize > parentCapRow.data.count ? parentCapRow.data.count : removeBlock * this.pageSize;
      var size = removeBlock * this.pageSize > parentCapRow.data.count ? this.pageSize - (this.pageSize * removeBlock - parentCapRow.data.count) : this.pageSize;
      var childRows = this.getChildRowsByParentIndex(rows.indexOf(child[count2 - 1]), true, false, null, true);
      var uid1 = childRows.length ? childRows[childRows.length - 1].uid : child[count2 - 1].uid;
      var uid22 = child[count2 - size].uid;
      var uid3 = child[count2 - size - 1].uid;
      var lastIdx = this.objIdxByUid[parseInt(page.toString(), 10)]["" + uid22] - idx;
      if (rows[parseInt(lastIdx.toString(), 10)].lazyLoadCssClass === "e-lazyload-middle-down") {
        var trEle = this.getRowElementByUid(rows[parseInt(lastIdx.toString(), 10)].uid);
        if (trEle) {
          trEle.classList.add("e-lazyload-middle-down");
        }
      }
      this.getRowByUid(uid1).lazyLoadCssClass = "";
      this.getRowByUid(uid3).lazyLoadCssClass = "e-not-lazyload-end";
      this.getRowElementByUid(uid3).classList.add("e-not-lazyload-end");
      this.removeBottomRows(uid1, uid22, uid3);
      this.rowIndex = tr.rowIndex - idx;
      if (tr.classList.length > 1) {
        tr.classList.remove("e-lazyload-middle-up");
      } else {
        tr.removeAttribute("class");
      }
      if (!isNullOrUndefined(this.getRowElementByUid(start))) {
        this.childCount = 0;
        this.scrollData = [];
        return;
      }
      var key = getGroupKeysAndFields(this.getRowObjectIndexByUid(parentCapRow.uid), rows);
      var args = {
        rowIndex: capRowEleIndex,
        makeRequest: false,
        groupInfo: parentCapRow,
        fields: key.fields,
        keys: key.keys,
        skip: this.childCount,
        take: this.pageSize,
        isScroll: true,
        scrollUp: true
      };
      this.isScrollUp = true;
      this.captionRowExpand(args);
    };
    GroupLazyLoadRenderer2.prototype.findRowElements = function(rows) {
      var entered = false;
      var tr;
      for (var i = 0; i < rows.length; i++) {
        var rowIdx = rows[parseInt(i.toString(), 10)].rowIndex;
        if (this.parent.enableVirtualization) {
          var currentInfo = this.parent.contentModule.currentInfo;
          if (currentInfo && currentInfo.blockIndexes && currentInfo.blockIndexes[0] > 1) {
            rowIdx = rowIdx + this.parent.contentModule.offsets[currentInfo.blockIndexes[0] - 1] / this.parent.getRowHeight();
          }
        }
        if (isRowEnteredInGrid(rowIdx, this.parent)) {
          entered = true;
          this.rowIndex = rowIdx;
          tr = rows[parseInt(i.toString(), 10)];
          break;
        }
      }
      return {
        entered,
        tr
      };
    };
    GroupLazyLoadRenderer2.prototype.getRowElementByUid = function(uid2) {
      return this.parent.getContent().querySelector("tr[data-uid=" + uid2 + "]");
    };
    GroupLazyLoadRenderer2.prototype.removeTopRows = function(uid1, uid2, uid3) {
      var trs = [].slice.call(this.parent.getContent().querySelectorAll("tr"));
      var start = false;
      for (var i = 0; i < trs.length; i++) {
        if (trs[parseInt(i.toString(), 10)].getAttribute("data-uid") === uid3) {
          var tr = this.parent.getContent().querySelector("tr[data-uid=" + uid1 + "]");
          if (tr) {
            this.rowIndex = tr.rowIndex;
          }
          break;
        }
        if (trs[parseInt(i.toString(), 10)].getAttribute("data-uid") === uid2) {
          start = true;
        }
        if (start) {
          remove(trs[parseInt(i.toString(), 10)]);
        }
      }
    };
    GroupLazyLoadRenderer2.prototype.removeBottomRows = function(uid1, uid2, uid3) {
      var trs = [].slice.call(this.parent.getContent().querySelectorAll("tr"));
      var trigger = false;
      for (var i = 0; i < trs.length; i++) {
        if (trs[parseInt(i.toString(), 10)].getAttribute("data-uid") === uid2) {
          trigger = true;
        }
        if (trigger) {
          remove(trs[parseInt(i.toString(), 10)]);
          if (trs[parseInt(i.toString(), 10)].getAttribute("data-uid") === uid1) {
            break;
          }
        }
      }
    };
    GroupLazyLoadRenderer2.prototype.setCache = function(e) {
      var page = this.parent.pageSettings.currentPage;
      if (this.parent.enableVirtualization) {
        this.parent.lazyLoadRender = this;
      }
      if (this.parent.enableInfiniteScrolling && e.args.requestType === "infiniteScroll" && e.args["prevPage"] !== e.args["currentPage"]) {
        this.groupCache[parseInt(page.toString(), 10)] = this.initialGroupCaptions[parseInt(page.toString(), 10)] = this.groupCache[e.args["prevPage"]].concat(extend([], e.data));
        var groupCacheKeys = Object.keys(this.groupCache);
        for (var i = 0; i < groupCacheKeys.length; i++) {
          if (e.args["currentPage"] !== parseInt(groupCacheKeys[parseInt(i.toString(), 10)], 10)) {
            delete this.groupCache["" + groupCacheKeys[parseInt(i.toString(), 10)]];
            delete this.initialGroupCaptions["" + groupCacheKeys[parseInt(i.toString(), 10)]];
          }
        }
      } else {
        this.groupCache[parseInt(page.toString(), 10)] = this.initialGroupCaptions[parseInt(page.toString(), 10)] = extend([], e.data);
      }
    };
    GroupLazyLoadRenderer2.prototype.captionRowExpand = function(args) {
      var _this = this;
      var captionRow = args.groupInfo;
      var level = this.parent.groupSettings.columns.indexOf(captionRow.data.field) + 1;
      var pred = generateExpandPredicates(args.fields, args.keys, this);
      var predicateList = getPredicates(pred);
      var lazyLoad = {
        level,
        skip: args.skip,
        take: args.take,
        where: predicateList
      };
      args.lazyLoadQuery = lazyLoad;
      args.requestType = "onDemandGroupInfo";
      if (args.makeRequest) {
        var query = this.parent.renderModule.data.generateQuery(true);
        if (!query.isCountRequired) {
          query.isCountRequired = true;
        }
        query.lazyLoad.push({
          key: "onDemandGroupInfo",
          value: lazyLoad
        });
        this.lazyLoadQuery.push(lazyLoad["where"]);
        if (args.isScroll && this.parent.enableVirtualMaskRow) {
          this.parent.showMaskRow();
        } else {
          this.parent.showSpinner();
        }
        this.parent.renderModule.data.getData(args, query).then(function(e) {
          if (_this.parent.enableVirtualization) {
            _this.parent.islazyloadRequest = true;
          }
          _this.parent.hideSpinner();
          _this.parent.removeMaskRow();
          if (e.result.length === 0) {
            return;
          }
          if (_this.cacheMode && _this.uid1 && _this.uid2) {
            _this.removeTopRows(_this.uid3, _this.uid1, _this.uid2);
            _this.uid1 = _this.uid2 = _this.uid3 = void 0;
          }
          _this.lazyLoadHandler({
            data: e.result,
            count: e.count,
            level,
            index: args.rowIndex,
            isRowExist: false,
            isScroll: args.isScroll,
            up: false,
            rowIndex: args.cachedRowIndex
          });
        }).catch(function(e) {
          return _this.parent.renderModule.dataManagerFailure(e, {
            requestType: "grouping"
          });
        });
      } else {
        this.lazyLoadHandler({
          data: null,
          count: args.groupInfo.data.count,
          level,
          index: args.rowIndex,
          isRowExist: true,
          isScroll: args.isScroll,
          up: args.scrollUp,
          rowIndex: args.cachedRowIndex
        });
      }
    };
    GroupLazyLoadRenderer2.prototype.scrollReset = function(top) {
      this.parent.getContent().firstElementChild.scrollTop = top ? this.parent.getContent().firstElementChild.scrollTop + top : 0;
    };
    GroupLazyLoadRenderer2.prototype.updateCurrentViewData = function() {
      var records = [];
      this.getRows().filter(function(row2) {
        if (row2.isDataRow) {
          records[row2.index] = row2.data;
        }
      });
      this.parent.currentViewData = records.length ? records : this.parent.currentViewData;
    };
    GroupLazyLoadRenderer2.prototype.getGroupCache = function() {
      return this.groupCache;
    };
    GroupLazyLoadRenderer2.prototype.getRows = function() {
      return this.groupCache[this.parent.pageSettings.currentPage] || [];
    };
    GroupLazyLoadRenderer2.prototype.getRowElements = function() {
      return [].slice.call(this.parent.getContent().getElementsByClassName(row));
    };
    GroupLazyLoadRenderer2.prototype.getRowByIndex = function(index) {
      var tr = [].slice.call(this.parent.getContent().getElementsByClassName(row));
      var row2;
      for (var i = 0; !isNullOrUndefined(index) && i < tr.length; i++) {
        if (parseInt(tr[parseInt(i.toString(), 10)].getAttribute(ariaRowIndex).toString(), 10) - 1 === index) {
          row2 = tr[parseInt(i.toString(), 10)];
          break;
        }
      }
      return row2;
    };
    GroupLazyLoadRenderer2.prototype.setVisible = function(columns) {
      var gObj = this.parent;
      var rows = this.getRows();
      var testRow;
      rows.some(function(r) {
        if (r.isDataRow) {
          testRow = r;
        }
        return r.isDataRow;
      });
      var contentrows = this.getRows().filter(function(row2) {
        return !row2.isDetailRow;
      });
      for (var i = 0; i < columns.length; i++) {
        var column = columns[parseInt(i.toString(), 10)];
        var idx = this.parent.getNormalizedColumnIndex(column.uid);
        var colIdx = this.parent.getColumnIndexByUid(column.uid);
        var displayVal = column.visible === true ? "" : "none";
        if (idx !== -1 && testRow && idx < testRow.cells.length) {
          setStyleAttribute(this.getColGroup().childNodes[parseInt(idx.toString(), 10)], {
            "display": displayVal
          });
        }
        this.setDisplayNone(gObj.getDataRows(), colIdx, displayVal, contentrows, idx);
        if (!this.parent.invokedFromMedia && column.hideAtMedia) {
          this.parent.updateMediaColumns(column);
        }
        this.parent.invokedFromMedia = false;
      }
    };
    GroupLazyLoadRenderer2.prototype.setDisplayNone = function(tr, idx, displayVal, rows, oriIdx) {
      if (!this.parent.groupSettings.columns.length) {
        setDisplayValue(tr, idx, displayVal, rows);
      } else {
        var keys = Object.keys(this.groupCache);
        for (var j = 0; j < keys.length; j++) {
          var uids = this.rowsByUid[keys[parseInt(j.toString(), 10)]];
          var idxs = Object.keys(uids);
          for (var i = 0; i < idxs.length; i++) {
            var tr_1 = this.parent.getContent().querySelector("tr[data-uid=" + idxs[parseInt(i.toString(), 10)] + "]");
            var row2 = uids[idxs[parseInt(i.toString(), 10)]];
            if (row2.isCaptionRow) {
              if (!this.captionModelGen.isEmpty()) {
                this.changeCaptionRow(row2, tr_1, keys[parseInt(j.toString(), 10)]);
              } else {
                row2.cells[row2.indent + 1].colSpan = displayVal === "" ? row2.cells[row2.indent + 1].colSpan + 1 : row2.cells[row2.indent + 1].colSpan - 1;
                if (tr_1) {
                  tr_1.cells[row2.indent + 1].colSpan = row2.cells[row2.indent + 1].colSpan;
                }
              }
            }
            if (row2.isDataRow) {
              this.showAndHideCells(tr_1, idx, displayVal, false);
              row2.cells[parseInt(oriIdx.toString(), 10)].visible = displayVal === "" ? true : false;
            }
            if (!row2.isCaptionRow && !row2.isDataRow && isNullOrUndefined(row2.indent)) {
              row2.cells[parseInt(oriIdx.toString(), 10)].visible = displayVal === "" ? true : false;
              row2.visible = row2.cells.some(function(cell) {
                return cell.isDataCell && cell.visible;
              });
              this.showAndHideCells(tr_1, idx, displayVal, true, row2);
            }
          }
        }
      }
    };
    GroupLazyLoadRenderer2.prototype.changeCaptionRow = function(row2, tr, index) {
      var capRow = row2;
      var captionData = row2.data;
      var data = this.groupGenerator.generateCaptionRow(captionData, capRow.indent, capRow.parentGid, void 0, capRow.tIndex, capRow.parentUid);
      data.uid = row2.uid;
      data.isExpand = row2.isExpand;
      data.lazyLoadCssClass = row2.lazyLoadCssClass;
      this.rowsByUid[parseInt(index.toString(), 10)][row2.uid] = data;
      this.groupCache[parseInt(index.toString(), 10)][this.objIdxByUid[parseInt(index.toString(), 10)][row2.uid]] = data;
      if (tr) {
        var tbody2 = this.parent.getContentTable().querySelector(tbody);
        tbody2.replaceChild(this.rowRenderer.render(data, this.parent.getColumns()), tr);
      }
    };
    GroupLazyLoadRenderer2.prototype.showAndHideCells = function(tr, idx, displayVal, isSummary, row2) {
      if (tr) {
        var cls = isSummary ? "td.e-summarycell" : "td.e-rowcell";
        setStyleAttribute(tr.querySelectorAll(cls)[parseInt(idx.toString(), 10)], {
          "display": displayVal
        });
        if (tr.querySelectorAll(cls)[parseInt(idx.toString(), 10)].classList.contains("e-hide")) {
          removeClass([tr.querySelectorAll(cls)[parseInt(idx.toString(), 10)]], ["e-hide"]);
        }
        if (isSummary) {
          if (row2.visible && tr.classList.contains("e-hide")) {
            removeClass([tr], ["e-hide"]);
          } else if (!row2.visible) {
            addClass([tr], ["e-hide"]);
          }
        }
      }
    };
    return GroupLazyLoadRenderer2;
  }(ContentRender)
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/lazy-load-group.js
var LazyLoadGroup = (
  /** @class */
  function() {
    function LazyLoadGroup2(parent, serviceLocator) {
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      this.addEventListener();
    }
    LazyLoadGroup2.prototype.getModuleName = function() {
      return "lazyLoadGroup";
    };
    LazyLoadGroup2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(initialLoad, this.instantiateRenderer, this);
      this.parent.on(destroy, this.destroy, this);
    };
    LazyLoadGroup2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(initialLoad, this.instantiateRenderer);
      this.parent.off(destroy, this.destroy);
    };
    LazyLoadGroup2.prototype.instantiateRenderer = function() {
      if (this.parent.height === "auto") {
        this.parent.height = this.parent.pageSettings.pageSize * this.parent.getRowHeight();
      }
      var renderer = this.serviceLocator.getService("rendererFactory");
      if (this.parent.groupSettings.enableLazyLoading) {
        renderer.addRenderer(RenderType.Content, new GroupLazyLoadRenderer(this.parent, this.serviceLocator));
      }
      if (this.parent.enableVirtualization) {
        this.parent.lazyLoadRender = new GroupLazyLoadRenderer(this.parent, this.serviceLocator);
      }
    };
    LazyLoadGroup2.prototype.destroy = function() {
      this.removeEventListener();
    };
    return LazyLoadGroup2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/autocomplete-edit-cell.js
var __extends46 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AutoCompleteEditCell = (
  /** @class */
  function(_super) {
    __extends46(AutoCompleteEditCell2, _super);
    function AutoCompleteEditCell2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    AutoCompleteEditCell2.prototype.write = function(args) {
      this.column = args.column;
      var isInlineEdit = this.parent.editSettings.mode !== "Dialog";
      this.object = new AutoComplete(extend({
        dataSource: this.parent.dataSource instanceof DataManager ? this.parent.dataSource : new DataManager(this.parent.dataSource),
        query: new Query().select(args.column.field),
        enabled: isEditable(args.column, args.requestType, args.element),
        fields: {
          value: args.column.field
        },
        value: getObject(args.column.field, args.rowData),
        // enableRtl: this.parentect.enableRtl,
        actionComplete: this.selectedValues.bind(this),
        placeholder: isInlineEdit ? "" : args.column.headerText,
        floatLabelType: isInlineEdit ? "Never" : "Always"
      }, args.column.edit.params));
      this.object.appendTo(args.element);
      args.element.setAttribute("name", getComplexFieldID(args.column.field));
    };
    AutoCompleteEditCell2.prototype.selectedValues = function(valObj) {
      valObj.result = DataUtil.distinct(valObj.result, this.object.fields.value, true);
      if (this.column.dataSource) {
        this.column.dataSource.dataSource.json = valObj.result;
      }
    };
    return AutoCompleteEditCell2;
  }(EditCellBase)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/combobox-edit-cell.js
var __extends47 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ComboboxEditCell = (
  /** @class */
  function(_super) {
    __extends47(ComboboxEditCell2, _super);
    function ComboboxEditCell2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ComboboxEditCell2.prototype.write = function(args) {
      this.column = args.column;
      var isInlineMode = this.parent.editSettings.mode !== "Dialog";
      this.obj = new ComboBox(extend({
        dataSource: this.parent.dataSource instanceof DataManager ? this.parent.dataSource : new DataManager(this.parent.dataSource),
        query: new Query().select(args.column.field),
        fields: {
          value: args.column.field
        },
        value: getObject(args.column.field, args.rowData),
        enableRtl: this.parent.enableRtl,
        actionComplete: this.finalValue.bind(this),
        placeholder: isInlineMode ? "" : args.column.headerText,
        floatLabelType: isInlineMode ? "Never" : "Always",
        enabled: isEditable(args.column, args.requestType, args.element),
        cssClass: this.parent.cssClass ? this.parent.cssClass : null
      }, args.column.edit.params));
      this.obj.appendTo(args.element);
    };
    ComboboxEditCell2.prototype.finalValue = function(val) {
      val.result = DataUtil.distinct(val.result, this.obj.fields.value, true);
      if (this.column.dataSource) {
        this.column.dataSource.dataSource.json = val.result;
      }
    };
    return ComboboxEditCell2;
  }(EditCellBase)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/multiselect-edit-cell.js
var __extends48 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MultiSelectEditCell = (
  /** @class */
  function(_super) {
    __extends48(MultiSelectEditCell2, _super);
    function MultiSelectEditCell2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MultiSelectEditCell2.prototype.write = function(args) {
      this.column = args.column;
      var isInline = this.parent.editSettings.mode !== "Dialog";
      this.obj = new MultiSelect(extend({
        fields: {
          text: args.column.field,
          value: args.column.field
        },
        value: getValue(args.column.field, args.rowData),
        enableRtl: this.parent.enableRtl,
        placeholder: isInline ? "" : args.column.headerText,
        popupHeight: "200px",
        floatLabelType: isInline ? "Never" : "Always",
        cssClass: this.parent.cssClass ? this.parent.cssClass : null
      }, args.column.edit.params));
      this.obj.appendTo(args.element);
      args.element.setAttribute("name", getComplexFieldID(args.column.field));
    };
    return MultiSelectEditCell2;
  }(EditCellBase)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/timepicker-edit-cell.js
var __extends49 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var TimePickerEditCell = (
  /** @class */
  function(_super) {
    __extends49(TimePickerEditCell2, _super);
    function TimePickerEditCell2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    TimePickerEditCell2.prototype.write = function(args) {
      var isInlineEdit = this.parent.editSettings.mode !== "Dialog";
      var rowDataValue = getObject(args.column.field, args.rowData);
      rowDataValue = rowDataValue ? new Date(rowDataValue) : null;
      this.obj = new TimePicker(extend({
        floatLabelType: isInlineEdit ? "Never" : "Always",
        value: rowDataValue,
        placeholder: isInlineEdit ? "" : args.column.headerText,
        enableRtl: this.parent.enableRtl,
        enabled: isEditable(args.column, args.requestType, args.element) && isCellHaveWidth(parentsUntil(args.element, "e-rowcell")),
        cssClass: this.parent.cssClass ? this.parent.cssClass : null
      }, args.column.edit.params));
      this.obj.appendTo(args.element);
    };
    return TimePickerEditCell2;
  }(EditCellBase)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/toggleswitch-edit-cell.js
var __extends50 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ToggleEditCell = (
  /** @class */
  function(_super) {
    __extends50(ToggleEditCell2, _super);
    function ToggleEditCell2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.activeClasses = ["e-selectionbackground", "e-active"];
      return _this;
    }
    ToggleEditCell2.prototype.create = function(args) {
      var clsNames = "e-field e-boolcell";
      if (args.column.type === "checkbox") {
        clsNames = "e-field e-boolcell e-edit-checkselect";
      }
      return createEditElement(this.parent, args.column, clsNames, {
        type: "checkbox",
        value: args.value
      });
    };
    ToggleEditCell2.prototype.read = function(element) {
      return element.checked;
    };
    ToggleEditCell2.prototype.write = function(args) {
      var chkBoxElement = !isNullOrUndefined(args.row) && args.row.querySelector(".e-edit-checkselect");
      var data = getObject(args.column.field, args.rowData);
      var checkState = data && JSON.parse(data.toString().toLowerCase());
      if (!isNullOrUndefined(chkBoxElement)) {
        this.editType = this.parent.editSettings.mode;
        this.editRow = args.row;
        if (args.requestType !== "add") {
          var row2 = this.parent.getRowObjectFromUID(args.row.getAttribute("data-uid"));
          checkState = row2 ? row2.isSelected : false;
        }
        addRemoveActiveClasses.apply(void 0, [[].slice.call(args.row.getElementsByClassName(rowCell)), checkState].concat(this.activeClasses));
      }
      this.obj = new Switch(extend({
        label: this.parent.editSettings.mode !== "Dialog" ? " " : args.column.headerText,
        checked: checkState,
        disabled: !isEditable(args.column, args.requestType, args.element),
        enableRtl: this.parent.enableRtl,
        change: this.switchModeChange.bind(this),
        cssClass: this.parent.cssClass ? this.parent.cssClass : ""
      }, args.column.edit.params));
      this.obj.appendTo(args.element);
    };
    ToggleEditCell2.prototype.switchModeChange = function(args) {
      if (this.editRow && this.editType !== "Dialog") {
        var addClass2 = false;
        if (!args.checked) {
          this.editRow.removeAttribute("aria-selected");
        } else {
          addClass2 = true;
          this.editRow.setAttribute("aria-selected", addClass2.toString());
        }
        addRemoveActiveClasses.apply(void 0, [[].slice.call(this.editRow.getElementsByClassName(rowCell)), addClass2].concat(this.activeClasses));
      }
    };
    return ToggleEditCell2;
  }(EditCellBase)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/inputmask-edit-cell.js
var __extends51 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MaskedTextBoxCellEdit = (
  /** @class */
  function(_super) {
    __extends51(MaskedTextBoxCellEdit2, _super);
    function MaskedTextBoxCellEdit2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MaskedTextBoxCellEdit2.prototype.write = function(args) {
      this.column = args.column;
      var isInlineEdit = this.parent.editSettings.mode !== "Dialog";
      this.obj = new MaskedTextBox(extend({
        fields: {
          value: args.column.field
        },
        value: getObject(args.column.field, args.rowData),
        floatLabelType: isInlineEdit ? "Never" : "Always",
        mask: "000-000-0000",
        enabled: isEditable(args.column, args.requestType, args.element) && isCellHaveWidth(parentsUntil(args.element, "e-rowcell")),
        cssClass: this.parent.cssClass ? this.parent.cssClass : null
      }, args.column.edit.params));
      this.obj.appendTo(args.element);
    };
    return MaskedTextBoxCellEdit2;
  }(EditCellBase)
);

export {
  ValueFormatter,
  Column,
  CommandColumnModel,
  GridColumn,
  StackedColumn,
  created,
  destroyed,
  load,
  rowDataBound,
  queryCellInfo,
  headerCellInfo,
  actionBegin,
  actionComplete,
  actionFailure,
  dataBound,
  rowSelecting,
  rowSelected,
  rowDeselecting,
  rowDeselected,
  cellSelecting,
  cellSelected,
  cellDeselecting,
  cellDeselected,
  columnSelecting,
  columnSelected,
  columnDeselecting,
  columnDeselected,
  columnDragStart,
  columnDrag,
  columnDrop,
  rowDragStartHelper,
  rowDragStart,
  rowDrag,
  rowDrop,
  beforePrint,
  printComplete,
  detailDataBound,
  toolbarClick,
  batchAdd,
  batchCancel,
  batchDelete,
  beforeBatchAdd,
  beforeBatchDelete,
  beforeBatchSave,
  beginEdit,
  cellEdit,
  cellSave,
  cellSaved,
  endAdd,
  endDelete,
  endEdit,
  recordDoubleClick,
  recordClick,
  beforeDataBound,
  beforeOpenColumnChooser,
  beforeOpenAdaptiveDialog,
  resizeStart,
  onResize,
  resizeStop,
  checkBoxChange,
  beforeCopy,
  beforePaste,
  beforeAutoFill,
  filterChoiceRequest,
  filterAfterOpen,
  filterBeforeOpen,
  filterSearchBegin,
  commandClick,
  exportGroupCaption,
  lazyLoadGroupExpand,
  lazyLoadGroupCollapse,
  initialLoad,
  initialEnd,
  dataReady,
  contentReady,
  uiUpdate,
  onEmpty,
  inBoundModelChanged,
  modelChanged,
  colGroupRefresh,
  headerRefreshed,
  pageBegin,
  pageComplete,
  sortBegin,
  sortComplete,
  filterBegin,
  filterComplete,
  searchBegin,
  searchComplete,
  reorderBegin,
  reorderComplete,
  rowDragAndDropBegin,
  rowDragAndDropComplete,
  groupBegin,
  groupComplete,
  ungroupBegin,
  ungroupComplete,
  groupAggregates,
  refreshFooterRenderer,
  refreshAggregateCell,
  refreshAggregates,
  rowSelectionBegin,
  rowSelectionComplete,
  columnSelectionBegin,
  columnSelectionComplete,
  cellSelectionBegin,
  cellSelectionComplete,
  destroyAutoFillElements,
  beforeCellFocused,
  cellFocused,
  keyPressed,
  click,
  destroy,
  columnVisibilityChanged,
  scroll,
  columnWidthChanged,
  columnPositionChanged,
  rowDragAndDrop,
  rowsAdded,
  rowsRemoved,
  columnDragStop,
  headerDrop,
  dataSourceModified,
  refreshComplete,
  refreshVirtualBlock,
  dblclick,
  toolbarRefresh,
  bulkSave,
  autoCol,
  tooltipDestroy,
  updateData,
  editBegin,
  editComplete,
  addBegin,
  addComplete,
  saveComplete,
  deleteBegin,
  deleteComplete,
  preventBatch,
  dialogDestroy,
  crudAction,
  addDeleteAction,
  destroyForm,
  doubleTap,
  beforeExcelExport,
  excelExportComplete,
  excelQueryCellInfo,
  excelHeaderQueryCellInfo,
  exportDetailDataBound,
  exportDetailTemplate,
  beforePdfExport,
  pdfExportComplete,
  pdfQueryCellInfo,
  pdfHeaderQueryCellInfo,
  accessPredicate,
  contextMenuClick,
  freezeRender,
  freezeRefresh,
  contextMenuOpen,
  columnMenuClick,
  columnMenuOpen,
  filterOpen,
  filterDialogCreated,
  filterMenuClose,
  initForeignKeyColumn,
  getForeignKeyData,
  generateQuery,
  showEmptyGrid,
  foreignKeyData,
  columnDataStateChange,
  dataStateChange,
  dataSourceChanged,
  rtlUpdated,
  beforeFragAppend,
  frozenHeight,
  textWrapRefresh,
  recordAdded,
  cancelBegin,
  editNextValCell,
  hierarchyPrint,
  expandChildGrid,
  printGridInit,
  exportRowDataBound,
  exportDataBound,
  rowPositionChanged,
  columnChooserOpened,
  batchForm,
  beforeStartEdit,
  beforeBatchCancel,
  batchEditFormRendered,
  partialRefresh,
  beforeCustomFilterOpen,
  selectVirtualRow,
  columnsPrepared,
  cBoxFltrBegin,
  cBoxFltrComplete,
  fltrPrevent,
  beforeFltrcMenuOpen,
  valCustomPlacement,
  filterCboxValue,
  componentRendered,
  restoreFocus,
  detailStateChange,
  detailIndentCellInfo,
  virtaulKeyHandler,
  virtaulCellFocus,
  virtualScrollEditActionBegin,
  virtualScrollEditSuccess,
  virtualScrollEditCancel,
  virtualScrollEdit,
  refreshVirtualCache,
  editReset,
  virtualScrollAddActionBegin,
  getVirtualData,
  refreshInfiniteModeBlocks,
  resetInfiniteBlocks,
  infiniteScrollHandler,
  infinitePageQuery,
  infiniteShowHide,
  appendInfiniteContent,
  removeInfiniteRows,
  setInfiniteCache,
  infiniteEditHandler,
  initialCollapse,
  getAggregateQuery,
  closeFilterDialog,
  columnChooserCancelBtnClick,
  getFilterBarOperator,
  resetColumns,
  pdfAggregateQueryCellInfo,
  excelAggregateQueryCellInfo,
  setGroupCache,
  lazyLoadScrollHandler,
  groupCollapse,
  beforeCheckboxRenderer,
  refreshHandlers,
  refreshFrozenColumns,
  setReorderDestinationElement,
  refreshVirtualFrozenHeight,
  setFreezeSelection,
  setInfiniteFrozenHeight,
  setInfiniteColFrozenHeight,
  beforeRefreshOnDataChange,
  immutableBatchCancel,
  refreshVirtualFrozenRows,
  checkScrollReset,
  refreshFrozenHeight,
  setHeightToFrozenElement,
  preventFrozenScrollRefresh,
  nextCellIndex,
  refreshInfiniteCurrentViewData,
  infiniteCrudCancel,
  filterDialogClose,
  refreshCustomFilterOkBtn,
  refreshCustomFilterClearBtn,
  renderResponsiveCmenu,
  filterCmenuSelect,
  customFilterClose,
  setFullScreenDialog,
  refreshExpandandCollapse,
  rowModeChange,
  enterKeyHandler,
  refreshVirtualMaxPage,
  setVirtualPageQuery,
  selectRowOnContextOpen,
  pagerRefresh,
  closeInline,
  closeBatch,
  closeEdit,
  resetVirtualFocus,
  afterContentRender,
  refreshVirtualEditFormCells,
  scrollToEdit,
  beforeCheckboxRendererQuery,
  createVirtualValidationForm,
  validateVirtualForm,
  destroyChildGrid,
  stickyScrollComplete,
  captionActionComplete,
  refreshInfinitePersistSelection,
  refreshInfiniteEditrowindex,
  afterFilterColumnMenuClose,
  beforeCheckboxfilterRenderer,
  commandColumnDestroy,
  batchCnfrmDlgCancel,
  refreshVirtualLazyLoadCache,
  refreshFrozenPosition,
  refreshResizePosition,
  refreshSplitFrozenColumn,
  renderResponsiveChangeAction,
  renderResponsiveColumnChooserDiv,
  showAddNewRowFocus,
  infiniteScrollComplete,
  lastRowCellBorderUpdated,
  columnChooserSearch,
  columnChooserClose,
  columnChooserUpdate,
  destroyEditForm,
  beforeDetailTemplateDetach,
  detachDetailTemplate,
  CellType,
  RenderType,
  ToolbarItem,
  ResponsiveDialogAction,
  ResponsiveToolbarAction,
  Data,
  Row,
  Cell,
  rowCell,
  gridHeader,
  gridContent,
  gridFooter,
  headerContent,
  movableContent,
  movableHeader,
  frozenContent,
  frozenHeader,
  content,
  table,
  row,
  gridChkBox,
  editedRow,
  addedRow,
  groupCaptionRow,
  changedRecords,
  addedRecords,
  deletedRecords,
  leftRight,
  frozenRight,
  frozenLeft,
  ariaColIndex,
  ariaRowIndex,
  tbody,
  colGroup,
  open,
  change,
  focus,
  create,
  beforeOpen,
  downArrow,
  upArrow,
  pageUp,
  pageDown,
  enter,
  shiftEnter,
  tab,
  shiftTab,
  initialFrozenColumnIndex,
  RowRenderer,
  RowModelGenerator,
  GroupModelGenerator,
  ContentRender,
  HeaderRender,
  CellRenderer,
  HeaderCellRenderer,
  StackedHeaderCellRenderer,
  IndentCellRenderer,
  GroupCaptionCellRenderer,
  GroupCaptionEmptyCellRenderer,
  Render,
  CellRendererFactory,
  ResponsiveDialogRenderer,
  ServiceLocator,
  Selection,
  Search,
  Scroll,
  Clipboard,
  Logger,
  detailLists,
  SortDescriptor,
  SortSettings,
  Predicate2 as Predicate,
  InfiniteScrollSettings,
  FilterSettings,
  SelectionSettings,
  SearchSettings,
  RowDropSettings,
  TextWrapSettings,
  ResizeSettings,
  GroupSettings,
  EditSettings,
  LoadingIndicator,
  Grid,
  getCloneProperties,
  Print,
  doesImplementInterface,
  valueAccessor,
  headerValueAccessor,
  getUpdateUsingRaf,
  isExportColumns,
  updateColumnTypeForExportColumns,
  updatecloneRow,
  getCollapsedRowsCount,
  recursive,
  iterateArrayOrObject,
  iterateExtend,
  templateCompiler,
  setStyleAndAttributes,
  extend2 as extend,
  setColumnIndex,
  prepareColumns,
  setCssInGridPopUp,
  getActualProperties,
  parentsUntil,
  getElementIndex,
  inArray,
  getActualPropFromColl,
  removeElement,
  getPosition,
  getUid,
  appendChildren,
  parents,
  calculateAggregate,
  getScrollBarWidth,
  getRowHeight,
  getActualRowHeight,
  isComplexField,
  getComplexFieldID,
  getParsedFieldID,
  setComplexFieldID,
  isEditable,
  isCellHaveWidth,
  isActionPrevent,
  wrap,
  setFormatter,
  addRemoveActiveClasses,
  distinctStringValues,
  getFilterMenuPostion,
  getZIndexCalcualtion,
  toggleFilterUI,
  toogleCheckbox,
  setChecked,
  createCboxWithWrap,
  removeAddCboxClasses,
  refreshForeignData,
  getForeignData,
  getColumnByForeignKeyValue,
  padZero,
  getDatePredicate,
  isGroupAdaptive,
  getObject,
  getCustomDateFormat,
  getExpandedState,
  getPrintGridModel,
  extendObjWithFn,
  getPrototypesOfObj,
  measureColumnDepth,
  checkDepth,
  refreshFilteredColsUid,
  Global,
  getTransformValues,
  applyBiggerTheme,
  getScrollWidth,
  resetColspanGroupCaption,
  groupCaptionRowLeftRightPos,
  ensureLastRow,
  ensureFirstRow,
  isRowEnteredInGrid,
  getEditedDataIndex,
  eventPromise,
  getStateEventArgument,
  ispercentageWidth,
  resetRowIndex,
  resetCachedRowIndex,
  groupReorderRowObject,
  compareChanges,
  setRowElements,
  sliceElements,
  resetDialogAppend,
  isChildColumn,
  pushuid,
  frozenDirection,
  addFixedColumnBorder,
  applyStickyLeftRightPosition,
  resetColandRowSpanStickyPosition,
  getCellFromRow,
  addStickyColumnPosition,
  getCellsByTableName,
  getCellByColAndRowIndex,
  setValidationRuels,
  getNumberFormat,
  addBiggerDialog,
  performComplexDataOperation,
  setDisplayValue,
  addRemoveEventListener,
  createEditElement,
  getColumnModelByUid,
  getColumnModelByFieldName,
  registerEventHandlers,
  removeEventHandlers,
  clearReactVueTemplates,
  infiniteRemoveElements,
  infiniteAppendElements,
  getListHeight,
  getRowIndexFromElement,
  getParentIns,
  generateExpandPredicates,
  getPredicates,
  getGroupKeysAndFields,
  findCellIndex,
  capitalizeFirstLetter,
  checkIsVirtual,
  getVisiblePage,
  CheckBoxFilterBase,
  DropDownList,
  ComboBox,
  AutoComplete,
  MultiSelect,
  CheckBoxSelection,
  Mention,
  ExcelFilterBase,
  Sort,
  NumericContainer,
  PagerMessage,
  Pager,
  PagerDropDown,
  ExternalMessage,
  Page,
  FilterCellRenderer,
  FlMenuOptrUI,
  StringFilterUI,
  NumberFilterUI,
  BooleanFilterUI,
  DateFilterUI,
  CheckBoxFilter,
  ExcelFilter,
  Filter,
  resizeClassList,
  Resize,
  Reorder,
  RowDD,
  Group,
  DetailRow,
  Toolbar2 as Toolbar,
  Aggregate,
  summaryIterator,
  InterSectionObserver,
  VirtualRowModelGenerator,
  VirtualContentRenderer,
  VirtualHeaderRenderer,
  VirtualElementHandler,
  VirtualScroll2 as VirtualScroll,
  InlineEditRender,
  BatchEditRender,
  DialogEditRender,
  EditRender,
  EditCellBase,
  BooleanEditCell,
  DropDownEditCell,
  NumericEditCell,
  DefaultEditCell,
  NormalEdit,
  InlineEdit,
  BatchEdit,
  DialogEdit,
  DatePickerEditCell,
  Edit,
  ColumnChooser,
  ExportHelper,
  ExportValueFormatter,
  ExcelExport,
  PdfExport,
  CommandColumnRenderer,
  CommandColumn,
  menuClass,
  ContextMenu2 as ContextMenu,
  Freeze,
  ColumnMenu,
  ForeignKey,
  InfiniteScroll,
  GroupLazyLoadRenderer,
  LazyLoadGroup,
  AutoCompleteEditCell,
  ComboboxEditCell,
  MultiSelectEditCell,
  TimePickerEditCell,
  ToggleEditCell,
  MaskedTextBoxCellEdit
};
//# sourceMappingURL=chunk-SOHG4NXT.js.map
