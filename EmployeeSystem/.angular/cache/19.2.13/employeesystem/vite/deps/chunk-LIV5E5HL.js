import {
  Ajax,
  Animation,
  Base,
  Browser,
  ChildProperty,
  Collection,
  Complex,
  Component,
  Draggable,
  Droppable,
  Event,
  EventHandler,
  Fetch,
  HijriParser,
  Internationalization,
  KeyboardEvents,
  L10n,
  NotifyPropertyChanges,
  Observer,
  Property,
  SanitizeHtmlHelper,
  Touch,
  addClass,
  animationMode,
  append,
  attributes,
  classList,
  cldrData,
  closest,
  compareElementParent,
  compile,
  createElement,
  deleteObject,
  detach,
  extend,
  formatUnit,
  getComponent,
  getDefaultDateObject,
  getElement,
  getInstance,
  getNumericObject,
  getRandomId,
  getUniqueID,
  getValue,
  initializeCSPTemplate,
  isBlazor,
  isNullOrUndefined,
  isRippleEnabled,
  isUndefined,
  isVisible,
  matches,
  merge,
  onIntlChange,
  prepend,
  remove,
  removeClass,
  rippleEffect,
  select,
  selectAll,
  setStyleAttribute,
  setValue,
  throwError
} from "./chunk-J6KMUI6T.js";

// node_modules/@syncfusion/ej2-data/src/adaptors.js
var __extends = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var consts = {
  GroupGuid: "{271bbba0-1ee7}"
};
var Adaptor = (
  /** @class */
  function() {
    function Adaptor2(ds) {
      this.options = {
        from: "table",
        requestType: "json",
        sortBy: "sorted",
        select: "select",
        skip: "skip",
        group: "group",
        take: "take",
        search: "search",
        count: "requiresCounts",
        where: "where",
        aggregates: "aggregates",
        expand: "expand"
      };
      this.type = Adaptor2;
      this.dataSource = ds;
      this.pvt = {};
    }
    Adaptor2.prototype.processResponse = function(data, ds, query, xhr) {
      return data;
    };
    return Adaptor2;
  }()
);
var JsonAdaptor = (
  /** @class */
  function(_super) {
    __extends(JsonAdaptor2, _super);
    function JsonAdaptor2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    JsonAdaptor2.prototype.processQuery = function(dataManager, query) {
      var result = dataManager.dataSource.json.slice(0);
      var count = result.length;
      var countFlg = true;
      var ret;
      var key;
      var lazyLoad = {};
      var keyCount = 0;
      var group = [];
      var sort = [];
      var page;
      for (var i = 0; i < query.lazyLoad.length; i++) {
        keyCount++;
        lazyLoad[query.lazyLoad[i].key] = query.lazyLoad[i].value;
      }
      var agg = {};
      var isGroupByFormat = false;
      if (query.lazyLoad.length) {
        for (var i = 0; i < query.queries.length; i++) {
          key = query.queries[i];
          if (key.fn === "onGroup" && !isNullOrUndefined(key.e.format)) {
            isGroupByFormat = true;
            break;
          }
        }
      }
      for (var i = 0; i < query.queries.length; i++) {
        key = query.queries[i];
        if ((key.fn === "onPage" || key.fn === "onGroup" || key.fn === "onSortBy" && !isGroupByFormat) && query.lazyLoad.length) {
          if (key.fn === "onGroup") {
            group.push(key.e);
          }
          if (key.fn === "onPage") {
            page = key.e;
          }
          if (key.fn === "onSortBy") {
            sort.unshift(key.e);
          }
          continue;
        }
        ret = this[key.fn].call(this, result, key.e, query);
        if (key.fn === "onAggregates") {
          agg[key.e.field + " - " + key.e.type] = ret;
        } else {
          result = ret !== void 0 ? ret : result;
        }
        if (key.fn === "onPage" || key.fn === "onSkip" || key.fn === "onTake" || key.fn === "onRange") {
          countFlg = false;
        }
        if (countFlg) {
          count = result.length;
        }
      }
      if (keyCount) {
        var args = {
          query,
          lazyLoad,
          result,
          group,
          page,
          sort
        };
        var lazyLoadData = this.lazyLoadGroup(args);
        result = lazyLoadData.result;
        count = lazyLoadData.count;
      }
      if (query.isCountRequired) {
        result = {
          result,
          count,
          aggregates: agg
        };
      }
      return result;
    };
    JsonAdaptor2.prototype.lazyLoadGroup = function(args) {
      var count = 0;
      var agg = this.getAggregate(args.query);
      var result = args.result;
      if (!isNullOrUndefined(args.lazyLoad.onDemandGroupInfo)) {
        var req = args.lazyLoad.onDemandGroupInfo;
        for (var i = req.where.length - 1; i >= 0; i--) {
          result = this.onWhere(result, req.where[i]);
        }
        if (args.group.length !== req.level) {
          var field = args.group[req.level].fieldName;
          result = DataUtil.group(result, field, agg, null, null, args.group[req.level].comparer, true);
          if (args.sort.length) {
            result = this.onSortBy(result, args.sort[parseInt(req.level.toString(), 10)], args.query, true);
          }
        } else {
          for (var i = args.sort.length - 1; i >= req.level; i--) {
            result = this.onSortBy(result, args.sort[parseInt(i.toString(), 10)], args.query, false);
          }
        }
        count = result.length;
        var data = result;
        result = result.slice(req.skip);
        result = result.slice(0, req.take);
        if (args.group.length !== req.level) {
          this.formGroupResult(result, data);
        }
      } else {
        var field_1 = args.group[0].fieldName;
        result = DataUtil.group(result, field_1, agg, null, null, args.group[0].comparer, true);
        count = result.length;
        var data = result;
        if (args.sort.length) {
          var sort = args.sort.length > 1 ? args.sort.filter(function(x) {
            return x.fieldName === field_1;
          })[0] : args.sort[0];
          result = this.onSortBy(result, sort, args.query, true);
        }
        if (args.page) {
          result = this.onPage(result, args.page, args.query);
        }
        this.formGroupResult(result, data);
      }
      return {
        result,
        count
      };
    };
    JsonAdaptor2.prototype.formGroupResult = function(result, data) {
      if (result.length && data.length) {
        var uid = "GroupGuid";
        var childLevel = "childLevels";
        var level = "level";
        var records = "records";
        result[uid] = data[uid];
        result[childLevel] = data[childLevel];
        result[level] = data[level];
        result[records] = data[records];
      }
      return result;
    };
    JsonAdaptor2.prototype.getAggregate = function(query) {
      var aggQuery = Query.filterQueries(query.queries, "onAggregates");
      var agg = [];
      if (aggQuery.length) {
        var tmp = void 0;
        for (var i = 0; i < aggQuery.length; i++) {
          tmp = aggQuery[i].e;
          agg.push({
            type: tmp.type,
            field: DataUtil.getValue(tmp.field, query)
          });
        }
      }
      return agg;
    };
    JsonAdaptor2.prototype.batchRequest = function(dm, changes, e) {
      var i;
      var deletedRecordsLen = changes.deletedRecords.length;
      for (i = 0; i < changes.addedRecords.length; i++) {
        this.insert(dm, changes.addedRecords[i]);
      }
      for (i = 0; i < changes.changedRecords.length; i++) {
        this.update(dm, e.key, changes.changedRecords[i]);
      }
      for (i = 0; i < deletedRecordsLen; i++) {
        this.remove(dm, e.key, changes.deletedRecords[i]);
      }
      return changes;
    };
    JsonAdaptor2.prototype.onWhere = function(ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }
      return ds.filter(function(obj) {
        if (e) {
          return e.validate(obj);
        }
      });
    };
    JsonAdaptor2.prototype.onAggregates = function(ds, e) {
      var fn = DataUtil.aggregates[e.type];
      if (!ds || !fn || ds.length === 0) {
        return null;
      }
      return fn(ds, e.field);
    };
    JsonAdaptor2.prototype.onSearch = function(ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }
      if (e.fieldNames.length === 0) {
        DataUtil.getFieldList(ds[0], e.fieldNames);
      }
      return ds.filter(function(obj) {
        for (var j = 0; j < e.fieldNames.length; j++) {
          if (e.comparer.call(obj, DataUtil.getObject(e.fieldNames[j], obj), e.searchKey, e.ignoreCase, e.ignoreAccent)) {
            return true;
          }
        }
        return false;
      });
    };
    JsonAdaptor2.prototype.onSortBy = function(ds, e, query, isLazyLoadGroupSort) {
      if (!ds || !ds.length) {
        return ds;
      }
      var fnCompare;
      var field = DataUtil.getValue(e.fieldName, query);
      if (!field) {
        return ds.sort(e.comparer);
      }
      if (field instanceof Array) {
        field = field.slice(0);
        for (var i = field.length - 1; i >= 0; i--) {
          if (!field[i]) {
            continue;
          }
          fnCompare = e.comparer;
          if (DataUtil.endsWith(field[i], " desc")) {
            fnCompare = DataUtil.fnSort("descending");
            field[i] = field[i].replace(" desc", "");
          }
          ds = DataUtil.sort(ds, field[i], fnCompare);
        }
        return ds;
      }
      return DataUtil.sort(ds, isLazyLoadGroupSort ? "key" : field, e.comparer);
    };
    JsonAdaptor2.prototype.onGroup = function(ds, e, query) {
      if (!ds || !ds.length) {
        return ds;
      }
      var agg = this.getAggregate(query);
      return DataUtil.group(ds, DataUtil.getValue(e.fieldName, query), agg, null, null, e.comparer);
    };
    JsonAdaptor2.prototype.onPage = function(ds, e, query) {
      var size = DataUtil.getValue(e.pageSize, query);
      var start = (DataUtil.getValue(e.pageIndex, query) - 1) * size;
      var end = start + size;
      if (!ds || !ds.length) {
        return ds;
      }
      return ds.slice(start, end);
    };
    JsonAdaptor2.prototype.onRange = function(ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }
      return ds.slice(DataUtil.getValue(e.start), DataUtil.getValue(e.end));
    };
    JsonAdaptor2.prototype.onTake = function(ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }
      return ds.slice(0, DataUtil.getValue(e.nos));
    };
    JsonAdaptor2.prototype.onSkip = function(ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }
      return ds.slice(DataUtil.getValue(e.nos));
    };
    JsonAdaptor2.prototype.onSelect = function(ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }
      return DataUtil.select(ds, DataUtil.getValue(e.fieldNames));
    };
    JsonAdaptor2.prototype.insert = function(dm, data, tableName, query, position) {
      if (isNullOrUndefined(position)) {
        return dm.dataSource.json.push(data);
      } else {
        return dm.dataSource.json.splice(position, 0, data);
      }
    };
    JsonAdaptor2.prototype.remove = function(dm, keyField, value, tableName) {
      var ds = dm.dataSource.json;
      var i;
      if (typeof value === "object" && !(value instanceof Date)) {
        value = DataUtil.getObject(keyField, value);
      }
      for (i = 0; i < ds.length; i++) {
        if (DataUtil.getObject(keyField, ds[i]) === value) {
          break;
        }
      }
      return i !== ds.length ? ds.splice(i, 1) : null;
    };
    JsonAdaptor2.prototype.update = function(dm, keyField, value, tableName) {
      var ds = dm.dataSource.json;
      var i;
      var key;
      if (!isNullOrUndefined(keyField)) {
        key = getValue(keyField, value);
      }
      for (i = 0; i < ds.length; i++) {
        if (!isNullOrUndefined(keyField) && getValue(keyField, ds[i]) === key) {
          break;
        }
      }
      return i < ds.length ? merge(ds[i], value) : null;
    };
    return JsonAdaptor2;
  }(Adaptor)
);
var UrlAdaptor = (
  /** @class */
  function(_super) {
    __extends(UrlAdaptor2, _super);
    function UrlAdaptor2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    UrlAdaptor2.prototype.processQuery = function(dm, query, hierarchyFilters) {
      var queries = this.getQueryRequest(query);
      var singles = Query.filterQueryLists(query.queries, ["onSelect", "onPage", "onSkip", "onTake", "onRange"]);
      var params = query.params;
      var url = dm.dataSource.url;
      var temp;
      var skip;
      var take = null;
      var options = this.options;
      var request = {
        sorts: [],
        groups: [],
        filters: [],
        searches: [],
        aggregates: []
      };
      if ("onPage" in singles) {
        temp = singles.onPage;
        skip = DataUtil.getValue(temp.pageIndex, query);
        take = DataUtil.getValue(temp.pageSize, query);
        skip = (skip - 1) * take;
      } else if ("onRange" in singles) {
        temp = singles.onRange;
        skip = temp.start;
        take = temp.end - temp.start;
      }
      for (var i = 0; i < queries.sorts.length; i++) {
        temp = DataUtil.getValue(queries.sorts[i].e.fieldName, query);
        request.sorts.push(DataUtil.callAdaptorFunction(this, "onEachSort", {
          name: temp,
          direction: queries.sorts[i].e.direction
        }, query));
      }
      if (hierarchyFilters) {
        temp = this.getFiltersFrom(hierarchyFilters, query);
        if (temp) {
          request.filters.push(DataUtil.callAdaptorFunction(this, "onEachWhere", temp.toJson(), query));
        }
      }
      for (var i = 0; i < queries.filters.length; i++) {
        var res = DataUtil.callAdaptorFunction(this, "onEachWhere", queries.filters[i].e.toJson(), query);
        if (this.getModuleName && this.getModuleName() === "ODataV4Adaptor" && !isNullOrUndefined(queries.filters[i].e.key) && queries.filters.length > 1) {
          res = "(" + res + ")";
        }
        request.filters.push(res);
        var keys_3 = typeof request.filters[i] === "object" ? Object.keys(request.filters[i]) : [];
        for (var _i = 0, keys_1 = keys_3; _i < keys_1.length; _i++) {
          var prop = keys_1[_i];
          if (DataUtil.isNull(request[prop])) {
            delete request[prop];
          }
        }
      }
      for (var i = 0; i < queries.searches.length; i++) {
        temp = queries.searches[i].e;
        request.searches.push(DataUtil.callAdaptorFunction(this, "onEachSearch", {
          fields: temp.fieldNames,
          operator: temp.operator,
          key: temp.searchKey,
          ignoreCase: temp.ignoreCase,
          ignoreAccent: temp.ignoreAccent
        }, query));
      }
      for (var i = 0; i < queries.groups.length; i++) {
        request.groups.push(DataUtil.getValue(queries.groups[i].e.fieldName, query));
      }
      for (var i = 0; i < queries.aggregates.length; i++) {
        temp = queries.aggregates[i].e;
        request.aggregates.push({
          type: temp.type,
          field: DataUtil.getValue(temp.field, query)
        });
      }
      var req = {};
      this.getRequestQuery(options, query, singles, request, req);
      DataUtil.callAdaptorFunction(this, "addParams", {
        dm,
        query,
        params,
        reqParams: req
      });
      if (query.lazyLoad.length) {
        for (var i = 0; i < query.lazyLoad.length; i++) {
          req[query.lazyLoad[i].key] = query.lazyLoad[i].value;
        }
      }
      var keys = Object.keys(req);
      for (var _a = 0, keys_2 = keys; _a < keys_2.length; _a++) {
        var prop = keys_2[_a];
        if (DataUtil.isNull(req[prop]) || req[prop] === "" || req[prop].length === 0) {
          delete req[prop];
        }
      }
      if (!(options.skip in req && options.take in req) && take !== null) {
        req[options.skip] = DataUtil.callAdaptorFunction(this, "onSkip", skip, query);
        req[options.take] = DataUtil.callAdaptorFunction(this, "onTake", take, query);
      }
      var p = this.pvt;
      this.pvt = {};
      if (this.options.requestType === "json") {
        return {
          data: JSON.stringify(req, DataUtil.parse.jsonDateReplacer),
          url,
          pvtData: p,
          type: "POST",
          contentType: "application/json; charset=utf-8"
        };
      }
      temp = this.convertToQueryString(req, query, dm);
      temp = (dm.dataSource.url.indexOf("?") !== -1 ? "&" : "/") + temp;
      return {
        type: "GET",
        url: temp.length ? url.replace(/\/*$/, temp) : url,
        pvtData: p
      };
    };
    UrlAdaptor2.prototype.getRequestQuery = function(options, query, singles, request, request1) {
      var param = "param";
      var req = request1;
      req[options.from] = query.fromTable;
      if (options.apply && query.distincts.length) {
        req[options.apply] = "onDistinct" in this ? DataUtil.callAdaptorFunction(this, "onDistinct", query.distincts) : "";
      }
      if (!query.distincts.length && options.expand) {
        req[options.expand] = "onExpand" in this && "onSelect" in singles ? DataUtil.callAdaptorFunction(this, "onExpand", {
          selects: DataUtil.getValue(singles.onSelect.fieldNames, query),
          expands: query.expands
        }, query) : query.expands;
      }
      req[options.select] = "onSelect" in singles && !query.distincts.length ? DataUtil.callAdaptorFunction(this, "onSelect", DataUtil.getValue(singles.onSelect.fieldNames, query), query) : "";
      req[options.count] = query.isCountRequired ? DataUtil.callAdaptorFunction(this, "onCount", query.isCountRequired, query) : "";
      req[options.search] = request.searches.length ? DataUtil.callAdaptorFunction(this, "onSearch", request.searches, query) : "";
      req[options.skip] = "onSkip" in singles ? DataUtil.callAdaptorFunction(this, "onSkip", DataUtil.getValue(singles.onSkip.nos, query), query) : "";
      req[options.take] = "onTake" in singles ? DataUtil.callAdaptorFunction(this, "onTake", DataUtil.getValue(singles.onTake.nos, query), query) : "";
      req[options.where] = request.filters.length || request.searches.length ? DataUtil.callAdaptorFunction(this, "onWhere", request.filters, query) : "";
      req[options.sortBy] = request.sorts.length ? DataUtil.callAdaptorFunction(this, "onSortBy", request.sorts, query) : "";
      req[options.group] = request.groups.length ? DataUtil.callAdaptorFunction(this, "onGroup", request.groups, query) : "";
      req[options.aggregates] = request.aggregates.length ? DataUtil.callAdaptorFunction(this, "onAggregates", request.aggregates, query) : "";
      req[param] = [];
    };
    UrlAdaptor2.prototype.convertToQueryString = function(request, query, dm) {
      return "";
    };
    UrlAdaptor2.prototype.processResponse = function(data, ds, query, xhr, request, changes) {
      if (xhr && xhr.headers.get("Content-Type") && xhr.headers.get("Content-Type").indexOf("application/json") !== -1) {
        var handleTimeZone = DataUtil.timeZoneHandling;
        if (ds && !ds.timeZoneHandling) {
          DataUtil.timeZoneHandling = false;
        }
        if (!ds.enableCache) {
          data = DataUtil.parse.parseJson(data);
        }
        DataUtil.timeZoneHandling = handleTimeZone;
      }
      var requests = request;
      var pvt = requests.pvtData || {};
      var groupDs = data ? data.groupDs : [];
      if (xhr && xhr.headers.get("Content-Type") && xhr.headers.get("Content-Type").indexOf("xml") !== -1) {
        return query.isCountRequired ? {
          result: [],
          count: 0
        } : [];
      }
      var d = JSON.parse(requests.data);
      if (d && d.action === "batch" && data && data.addedRecords && !isNullOrUndefined(changes)) {
        changes.addedRecords = data.addedRecords;
        return changes;
      }
      if (data && data.d) {
        data = data.d;
      }
      var args = {};
      if (data && "count" in data) {
        args.count = data.count;
      }
      args.result = data && data.result ? data.result : data;
      var isExpand = false;
      if (Array.isArray(data.result) && data.result.length) {
        var key = "key";
        var val = "value";
        var level = "level";
        if (!isNullOrUndefined(data.result[0][key])) {
          args.result = this.formRemoteGroupedData(args.result, 1, pvt.groups.length - 1);
        }
        if (query && query.lazyLoad.length && pvt.groups.length) {
          for (var i = 0; i < query.lazyLoad.length; i++) {
            if (query.lazyLoad[i][key] === "onDemandGroupInfo") {
              var value = query.lazyLoad[i][val][level];
              if (pvt.groups.length === value) {
                isExpand = true;
              }
            }
          }
        }
      }
      if (!isExpand) {
        this.getAggregateResult(pvt, data, args, groupDs, query);
      }
      return DataUtil.isNull(args.count) ? args.result : {
        result: args.result,
        count: args.count,
        aggregates: args.aggregates
      };
    };
    UrlAdaptor2.prototype.formRemoteGroupedData = function(data, level, childLevel) {
      for (var i = 0; i < data.length; i++) {
        if (data[i].items.length && Object.keys(data[i].items[0]).indexOf("key") > -1) {
          this.formRemoteGroupedData(data[i].items, level + 1, childLevel - 1);
        }
      }
      var uid = "GroupGuid";
      var childLvl = "childLevels";
      var lvl = "level";
      var records = "records";
      data[uid] = consts[uid];
      data[lvl] = level;
      data[childLvl] = childLevel;
      data[records] = data[0].items.length ? this.getGroupedRecords(data, !isNullOrUndefined(data[0].items[records])) : [];
      return data;
    };
    UrlAdaptor2.prototype.getGroupedRecords = function(data, hasRecords) {
      var childGroupedRecords = [];
      var records = "records";
      for (var i = 0; i < data.length; i++) {
        if (!hasRecords) {
          for (var j = 0; j < data[i].items.length; j++) {
            childGroupedRecords.push(data[i].items[j]);
          }
        } else {
          childGroupedRecords = childGroupedRecords.concat(data[i].items[records]);
        }
      }
      return childGroupedRecords;
    };
    UrlAdaptor2.prototype.onGroup = function(e) {
      this.pvt.groups = e;
      return e;
    };
    UrlAdaptor2.prototype.onAggregates = function(e) {
      this.pvt.aggregates = e;
    };
    UrlAdaptor2.prototype.batchRequest = function(dm, changes, e, query, original) {
      var url;
      var key;
      return {
        type: "POST",
        url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.removeUrl || dm.dataSource.url,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        data: JSON.stringify(extend({}, {
          changed: changes.changedRecords,
          added: changes.addedRecords,
          deleted: changes.deletedRecords,
          action: "batch",
          table: e[url],
          key: e[key]
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    UrlAdaptor2.prototype.beforeSend = function(dm, request, settings) {
    };
    UrlAdaptor2.prototype.insert = function(dm, data, tableName, query) {
      return {
        url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify(extend({}, {
          value: data,
          table: tableName,
          action: "insert"
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    UrlAdaptor2.prototype.remove = function(dm, keyField, value, tableName, query) {
      return {
        type: "POST",
        url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify(extend({}, {
          key: value,
          keyColumn: keyField,
          table: tableName,
          action: "remove"
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    UrlAdaptor2.prototype.update = function(dm, keyField, value, tableName, query) {
      return {
        type: "POST",
        url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify(extend({}, {
          value,
          action: "update",
          keyColumn: keyField,
          key: DataUtil.getObject(keyField, value),
          table: tableName
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    UrlAdaptor2.prototype.getFiltersFrom = function(data, query) {
      var key = query.fKey;
      var value;
      var prop = key;
      var pKey = query.key;
      var predicats = [];
      if (typeof data[0] !== "object") {
        prop = null;
      }
      for (var i = 0; i < data.length; i++) {
        if (typeof data[0] === "object") {
          value = DataUtil.getObject(pKey || prop, data[i]);
        } else {
          value = data[i];
        }
        predicats.push(new Predicate(key, "equal", value));
      }
      return Predicate.or(predicats);
    };
    UrlAdaptor2.prototype.getAggregateResult = function(pvt, data, args, groupDs, query) {
      var pData = data;
      if (data && data.result) {
        pData = data.result;
      }
      if (pvt && pvt.aggregates && pvt.aggregates.length) {
        var agg = pvt.aggregates;
        var fn = void 0;
        var aggregateData = pData;
        var res = {};
        if (data.aggregate) {
          aggregateData = data.aggregate;
        }
        for (var i = 0; i < agg.length; i++) {
          fn = DataUtil.aggregates[agg[i].type];
          if (fn) {
            res[agg[i].field + " - " + agg[i].type] = fn(aggregateData, agg[i].field);
          }
        }
        args.aggregates = res;
      }
      var key = "key";
      var isServerGrouping = Array.isArray(data.result) && data.result.length && !isNullOrUndefined(data.result[0][key]);
      if (pvt && pvt.groups && pvt.groups.length && !isServerGrouping) {
        var groups = pvt.groups;
        for (var i = 0; i < groups.length; i++) {
          var level = null;
          if (!isNullOrUndefined(groupDs)) {
            groupDs = DataUtil.group(groupDs, groups[i]);
          }
          var groupQuery = Query.filterQueries(query.queries, "onGroup")[i].e;
          pData = DataUtil.group(pData, groups[i], pvt.aggregates, level, groupDs, groupQuery.comparer);
        }
        args.result = pData;
      }
      return args;
    };
    UrlAdaptor2.prototype.getQueryRequest = function(query) {
      var req = {
        sorts: [],
        groups: [],
        filters: [],
        searches: [],
        aggregates: []
      };
      req.sorts = Query.filterQueries(query.queries, "onSortBy");
      req.groups = Query.filterQueries(query.queries, "onGroup");
      req.filters = Query.filterQueries(query.queries, "onWhere");
      req.searches = Query.filterQueries(query.queries, "onSearch");
      req.aggregates = Query.filterQueries(query.queries, "onAggregates");
      return req;
    };
    UrlAdaptor2.prototype.addParams = function(options) {
      var req = options.reqParams;
      if (options.params.length) {
        req.params = {};
      }
      for (var _i = 0, _a = options.params; _i < _a.length; _i++) {
        var tmp = _a[_i];
        if (req[tmp.key]) {
          throw new Error("Query() - addParams: Custom Param is conflicting other request arguments");
        }
        req[tmp.key] = tmp.value;
        if (tmp.fn) {
          req[tmp.key] = tmp.fn.call(options.query, tmp.key, options.query, options.dm);
        }
        req.params[tmp.key] = req[tmp.key];
      }
    };
    return UrlAdaptor2;
  }(Adaptor)
);
var ODataAdaptor = (
  /** @class */
  function(_super) {
    __extends(ODataAdaptor2, _super);
    function ODataAdaptor2(props) {
      var _this = _super.call(this) || this;
      _this.options = extend({}, _this.options, {
        requestType: "get",
        accept: "application/json;odata=light;q=1,application/json;odata=verbose;q=0.5",
        multipartAccept: "multipart/mixed",
        sortBy: "$orderby",
        select: "$select",
        skip: "$skip",
        take: "$top",
        count: "$inlinecount",
        where: "$filter",
        expand: "$expand",
        batch: "$batch",
        changeSet: "--changeset_",
        batchPre: "batch_",
        contentId: "Content-Id: ",
        batchContent: "Content-Type: multipart/mixed; boundary=",
        changeSetContent: "Content-Type: application/http\nContent-Transfer-Encoding: binary ",
        batchChangeSetContentType: "Content-Type: application/json; charset=utf-8 ",
        updateType: "PUT"
      });
      extend(_this.options, props || {});
      return _this;
    }
    ODataAdaptor2.prototype.getModuleName = function() {
      return "ODataAdaptor";
    };
    ODataAdaptor2.prototype.onPredicate = function(predicate, query, requiresCast) {
      var returnValue = "";
      var operator;
      var guid;
      var val = predicate.value;
      var type = typeof val;
      var field = predicate.field ? ODataAdaptor2.getField(predicate.field) : null;
      if (val instanceof Date) {
        val = "datetime'" + DataUtil.parse.replacer(val) + "'";
      }
      if (type === "string") {
        val = val.replace(/'/g, "''");
        if (predicate.ignoreCase) {
          val = val.toLowerCase();
        }
        if (predicate.operator !== "like") {
          val = encodeURIComponent(val);
        }
        if (predicate.operator !== "wildcard" && predicate.operator !== "like") {
          val = "'" + val + "'";
        }
        if (requiresCast) {
          field = "cast(" + field + ", 'Edm.String')";
        }
        if (DataUtil.parse.isGuid(val)) {
          guid = "guid";
        }
        if (predicate.ignoreCase) {
          if (!guid) {
            field = "tolower(" + field + ")";
          }
          val = val.toLowerCase();
        }
      }
      if (predicate.operator === "isempty" || predicate.operator === "isnull" || predicate.operator === "isnotempty" || predicate.operator === "isnotnull") {
        operator = predicate.operator.indexOf("isnot") !== -1 ? DataUtil.odBiOperator["notequal"] : DataUtil.odBiOperator["equal"];
        val = predicate.operator === "isnull" || predicate.operator === "isnotnull" ? null : "''";
      } else {
        operator = DataUtil.odBiOperator[predicate.operator];
      }
      if (operator) {
        returnValue += field;
        returnValue += operator;
        if (guid) {
          returnValue += guid;
        }
        return returnValue + val;
      }
      if (!isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor") {
        operator = DataUtil.odv4UniOperator[predicate.operator];
      } else {
        operator = DataUtil.odUniOperator[predicate.operator];
      }
      if (operator === "like") {
        val = val;
        if (val.indexOf("%") !== -1) {
          if (val.charAt(0) === "%" && val.lastIndexOf("%") < 2) {
            val = val.substring(1, val.length);
            operator = !isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor" ? DataUtil.odv4UniOperator["startswith"] : DataUtil.odUniOperator["startswith"];
          } else if (val.charAt(val.length - 1) === "%" && val.indexOf("%") > val.length - 3) {
            val = val.substring(0, val.length - 1);
            operator = !isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor" ? DataUtil.odv4UniOperator["endswith"] : DataUtil.odUniOperator["endswith"];
          } else if (val.lastIndexOf("%") !== val.indexOf("%") && val.lastIndexOf("%") > val.indexOf("%") + 1) {
            val = val.substring(val.indexOf("%") + 1, val.lastIndexOf("%"));
            operator = !isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor" ? DataUtil.odv4UniOperator["contains"] : DataUtil.odUniOperator["contains"];
          } else {
            operator = !isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor" ? DataUtil.odv4UniOperator["contains"] : DataUtil.odUniOperator["contains"];
          }
        }
        val = encodeURIComponent(val);
        val = "'" + val + "'";
      } else if (operator === "wildcard") {
        val = val;
        if (val.indexOf("*") !== -1) {
          var splittedStringValue = val.split("*");
          var splittedValue = void 0;
          var count = 0;
          if (val.indexOf("*") !== 0 && splittedStringValue[0].indexOf("%3f") === -1 && splittedStringValue[0].indexOf("?") === -1) {
            splittedValue = splittedStringValue[0];
            splittedValue = "'" + splittedValue + "'";
            operator = !isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor" ? DataUtil.odv4UniOperator["startswith"] : DataUtil.odUniOperator["startswith"];
            returnValue += operator + "(";
            returnValue += field + ",";
            if (guid) {
              returnValue += guid;
            }
            returnValue += splittedValue + ")";
            count++;
          }
          if (val.lastIndexOf("*") !== val.length - 1 && splittedStringValue[splittedStringValue.length - 1].indexOf("%3f") === -1 && splittedStringValue[splittedStringValue.length - 1].indexOf("?") === -1) {
            splittedValue = splittedStringValue[splittedStringValue.length - 1];
            splittedValue = "'" + splittedValue + "'";
            operator = !isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor" ? DataUtil.odv4UniOperator["endswith"] : DataUtil.odUniOperator["endswith"];
            if (count > 0) {
              returnValue += " and ";
            }
            returnValue += operator + "(";
            returnValue += field + ",";
            if (guid) {
              returnValue += guid;
            }
            returnValue += splittedValue + ")";
            count++;
          }
          if (splittedStringValue.length > 2) {
            for (var i = 1; i < splittedStringValue.length - 1; i++) {
              if (splittedStringValue[i].indexOf("%3f") === -1 && splittedStringValue[i].indexOf("?") === -1) {
                splittedValue = splittedStringValue[i];
                splittedValue = "'" + splittedValue + "'";
                operator = !isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor" ? DataUtil.odv4UniOperator["contains"] : DataUtil.odUniOperator["contains"];
                if (count > 0) {
                  returnValue += " and ";
                }
                if (operator === "substringof" || operator === "not substringof") {
                  var temp = splittedValue;
                  splittedValue = field;
                  field = temp;
                }
                returnValue += operator + "(";
                returnValue += field + ",";
                if (guid) {
                  returnValue += guid;
                }
                returnValue += splittedValue + ")";
                count++;
              }
            }
          }
          if (count === 0) {
            operator = !isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor" ? DataUtil.odv4UniOperator["contains"] : DataUtil.odUniOperator["contains"];
            if (val.indexOf("?") !== -1 || val.indexOf("%3f") !== -1) {
              val = val.indexOf("?") !== -1 ? val.split("?").join("") : val.split("%3f").join("");
            }
            val = "'" + val + "'";
          } else {
            operator = "wildcard";
          }
        } else {
          operator = !isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor" ? DataUtil.odv4UniOperator["contains"] : DataUtil.odUniOperator["contains"];
          if (val.indexOf("?") !== -1 || val.indexOf("%3f") !== -1) {
            val = val.indexOf("?") !== -1 ? val.split("?").join("") : val.split("%3f").join("");
          }
          val = "'" + val + "'";
        }
      }
      if (operator === "substringof" || operator === "not substringof") {
        var temp = val;
        val = field;
        field = temp;
      }
      if (operator !== "wildcard") {
        returnValue += operator + "(";
        returnValue += field + ",";
        if (guid) {
          returnValue += guid;
        }
        returnValue += val + ")";
      }
      return returnValue;
    };
    ODataAdaptor2.prototype.addParams = function(options) {
      _super.prototype.addParams.call(this, options);
      delete options.reqParams.params;
    };
    ODataAdaptor2.prototype.onComplexPredicate = function(predicate, query, requiresCast) {
      var res = [];
      for (var i = 0; i < predicate.predicates.length; i++) {
        res.push("(" + this.onEachWhere(predicate.predicates[i], query, requiresCast) + ")");
      }
      return res.join(" " + predicate.condition + " ");
    };
    ODataAdaptor2.prototype.onEachWhere = function(filter, query, requiresCast) {
      return filter.isComplex ? this.onComplexPredicate(filter, query, requiresCast) : this.onPredicate(filter, query, requiresCast);
    };
    ODataAdaptor2.prototype.onWhere = function(filters) {
      if (this.pvt.search) {
        filters.push(this.onEachWhere(this.pvt.search, null, true));
      }
      return filters.join(" and ");
    };
    ODataAdaptor2.prototype.onEachSearch = function(e) {
      if (e.fields && e.fields.length === 0) {
        DataUtil.throwError("Query() - Search : oData search requires list of field names to search");
      }
      var filter = this.pvt.search || [];
      for (var i = 0; i < e.fields.length; i++) {
        filter.push(new Predicate(e.fields[i], e.operator, e.key, e.ignoreCase));
      }
      this.pvt.search = filter;
    };
    ODataAdaptor2.prototype.onSearch = function(e) {
      this.pvt.search = Predicate.or(this.pvt.search);
      return "";
    };
    ODataAdaptor2.prototype.onEachSort = function(e) {
      var res = [];
      if (e.name instanceof Array) {
        for (var i = 0; i < e.name.length; i++) {
          res.push(ODataAdaptor2.getField(e.name[i]) + (e.direction === "descending" ? " desc" : ""));
        }
      } else {
        res.push(ODataAdaptor2.getField(e.name) + (e.direction === "descending" ? " desc" : ""));
      }
      return res.join(",");
    };
    ODataAdaptor2.prototype.onSortBy = function(e) {
      return e.reverse().join(",");
    };
    ODataAdaptor2.prototype.onGroup = function(e) {
      this.pvt.groups = e;
      return [];
    };
    ODataAdaptor2.prototype.onSelect = function(e) {
      for (var i = 0; i < e.length; i++) {
        e[i] = ODataAdaptor2.getField(e[i]);
      }
      return e.join(",");
    };
    ODataAdaptor2.prototype.onAggregates = function(e) {
      this.pvt.aggregates = e;
      return "";
    };
    ODataAdaptor2.prototype.onCount = function(e) {
      return e === true ? "allpages" : "";
    };
    ODataAdaptor2.prototype.beforeSend = function(dm, request, settings) {
      if (DataUtil.endsWith(settings.url, this.options.batch) && settings.type.toLowerCase() === "post") {
        request.headers.set("Accept", this.options.multipartAccept);
        request.headers.set("DataServiceVersion", "2.0");
      } else {
        request.headers.set("Accept", this.options.accept);
      }
      request.headers.set("DataServiceVersion", "2.0");
      request.headers.set("MaxDataServiceVersion", "2.0");
    };
    ODataAdaptor2.prototype.processResponse = function(data, ds, query, xhr, request, changes) {
      var metaCheck = "odata.metadata";
      if (request && request.type === "GET" && !this.rootUrl && data[metaCheck]) {
        var dataUrls = data[metaCheck].split("/$metadata#");
        this.rootUrl = dataUrls[0];
        this.resourceTableName = dataUrls[1];
      }
      var pvtData = "pvtData";
      if (!isNullOrUndefined(data.d)) {
        var dataCopy = query && query.isCountRequired ? data.d.results : data.d;
        var metaData = "__metadata";
        if (!isNullOrUndefined(dataCopy)) {
          for (var i = 0; i < dataCopy.length; i++) {
            if (!isNullOrUndefined(dataCopy[i][metaData])) {
              delete dataCopy[i][metaData];
            }
          }
        }
      }
      var pvt = request && request[pvtData];
      var emptyAndBatch = this.processBatchResponse(data, query, xhr, request, changes);
      if (emptyAndBatch) {
        return emptyAndBatch;
      }
      var versionCheck = xhr && request.fetchRequest.headers.get("DataServiceVersion");
      var count = null;
      var version = versionCheck && parseInt(versionCheck, 10) || 2;
      if (query && query.isCountRequired) {
        var oDataCount = "__count";
        if (data[oDataCount] || data["odata.count"]) {
          count = data[oDataCount] || data["odata.count"];
        }
        if (data.d) {
          data = data.d;
        }
        if (data[oDataCount] || data["odata.count"]) {
          count = data[oDataCount] || data["odata.count"];
        }
      }
      if (version === 3 && data.value) {
        data = data.value;
      }
      if (data.d) {
        data = data.d;
      }
      if (version < 3 && data.results) {
        data = data.results;
      }
      var args = {};
      args.count = count;
      args.result = data;
      this.getAggregateResult(pvt, data, args, null, query);
      return DataUtil.isNull(count) ? args.result : {
        result: args.result,
        count: args.count,
        aggregates: args.aggregates
      };
    };
    ODataAdaptor2.prototype.convertToQueryString = function(request, query, dm) {
      var res = [];
      var table = "table";
      var tableName = request[table] || "";
      var format = "$format";
      delete request[table];
      if (dm.dataSource.requiresFormat) {
        request[format] = "json";
      }
      var keys = Object.keys(request);
      for (var _i = 0, keys_4 = keys; _i < keys_4.length; _i++) {
        var prop = keys_4[_i];
        res.push(prop + "=" + request[prop]);
      }
      res = res.join("&");
      if (dm.dataSource.url && dm.dataSource.url.indexOf("?") !== -1 && !tableName) {
        return res;
      }
      return res.length ? tableName + "?" + res : tableName || "";
    };
    ODataAdaptor2.prototype.localTimeReplacer = function(key, convertObj) {
      for (var _i = 0, _a = !isNullOrUndefined(convertObj) ? Object.keys(convertObj) : []; _i < _a.length; _i++) {
        var prop = _a[_i];
        if (convertObj[prop] instanceof Date) {
          convertObj[prop] = DataUtil.dateParse.toLocalTime(convertObj[prop]);
        }
      }
      return convertObj;
    };
    ODataAdaptor2.prototype.insert = function(dm, data, tableName) {
      return {
        url: (dm.dataSource.insertUrl || dm.dataSource.url).replace(/\/*$/, tableName ? "/" + tableName : ""),
        data: JSON.stringify(data, this.options.localTime ? this.localTimeReplacer : null)
      };
    };
    ODataAdaptor2.prototype.remove = function(dm, keyField, value, tableName) {
      var url;
      if (typeof value === "string" && !DataUtil.parse.isGuid(value)) {
        url = "('" + value + "')";
      } else {
        url = "(" + value + ")";
      }
      return {
        type: "DELETE",
        url: (dm.dataSource.removeUrl || dm.dataSource.url).replace(/\/*$/, tableName ? "/" + tableName : "") + url
      };
    };
    ODataAdaptor2.prototype.update = function(dm, keyField, value, tableName, query, original) {
      if (this.options.updateType === "PATCH" && !isNullOrUndefined(original)) {
        value = this.compareAndRemove(value, original, keyField);
      }
      var url;
      if (typeof value[keyField] === "string" && !DataUtil.parse.isGuid(value[keyField])) {
        url = "('" + value[keyField] + "')";
      } else {
        url = "(" + value[keyField] + ")";
      }
      return {
        type: this.options.updateType,
        url: (dm.dataSource.updateUrl || dm.dataSource.url).replace(/\/*$/, tableName ? "/" + tableName : "") + url,
        data: JSON.stringify(value, this.options.localTime ? this.localTimeReplacer : null),
        accept: this.options.accept
      };
    };
    ODataAdaptor2.prototype.batchRequest = function(dm, changes, e, query, original) {
      var initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);
      var url = dm.dataSource.batchUrl || this.rootUrl ? (dm.dataSource.batchUrl || this.rootUrl) + "/" + this.options.batch : (dm.dataSource.batchUrl || dm.dataSource.url).replace(/\/*$/, "/" + this.options.batch);
      e.url = this.resourceTableName ? this.resourceTableName : e.url;
      var args = {
        url: e.url,
        key: e.key,
        cid: 1,
        cSet: DataUtil.getGuid(this.options.changeSet)
      };
      var req = "--" + initialGuid + "\n";
      req += "Content-Type: multipart/mixed; boundary=" + args.cSet.replace("--", "") + "\n";
      this.pvt.changeSet = 0;
      req += this.generateInsertRequest(changes.addedRecords, args, dm);
      req += this.generateUpdateRequest(changes.changedRecords, args, dm, original ? original.changedRecords : []);
      req += this.generateDeleteRequest(changes.deletedRecords, args, dm);
      req += args.cSet + "--\n";
      req += "--" + initialGuid + "--";
      return {
        type: "POST",
        url,
        dataType: "json",
        contentType: "multipart/mixed; charset=UTF-8;boundary=" + initialGuid,
        data: req
      };
    };
    ODataAdaptor2.prototype.generateDeleteRequest = function(arr, e, dm) {
      if (!arr) {
        return "";
      }
      var req = "";
      var stat = {
        "method": "DELETE ",
        "url": function(data, i, key) {
          var url = DataUtil.getObject(key, data[i]);
          if (typeof url === "number" || DataUtil.parse.isGuid(url)) {
            return "(" + url + ")";
          } else if (url instanceof Date) {
            var dateTime = data[i][key];
            return "(" + dateTime.toJSON() + ")";
          } else {
            return "('" + url + "')";
          }
        },
        "data": function(data, i) {
          return "";
        }
      };
      req = this.generateBodyContent(arr, e, stat, dm);
      return req + "\n";
    };
    ODataAdaptor2.prototype.generateInsertRequest = function(arr, e, dm) {
      if (!arr) {
        return "";
      }
      var req = "";
      var stat = {
        "method": "POST ",
        "url": function(data, i, key) {
          return "";
        },
        "data": function(data, i) {
          return JSON.stringify(data[i]) + "\n\n";
        }
      };
      req = this.generateBodyContent(arr, e, stat, dm);
      return req;
    };
    ODataAdaptor2.prototype.generateUpdateRequest = function(arr, e, dm, org) {
      var _this = this;
      if (!arr) {
        return "";
      }
      var req = "";
      arr.forEach(function(change) {
        return change = _this.compareAndRemove(change, org.filter(function(o) {
          return DataUtil.getObject(e.key, o) === DataUtil.getObject(e.key, change);
        })[0], e.key);
      });
      var stat = {
        "method": this.options.updateType + " ",
        "url": function(data, i, key) {
          if (typeof data[i][key] === "number" || DataUtil.parse.isGuid(data[i][key])) {
            return "(" + data[i][key] + ")";
          } else if (data[i][key] instanceof Date) {
            var date = data[i][key];
            return "(" + date.toJSON() + ")";
          } else {
            return "('" + data[i][key] + "')";
          }
        },
        "data": function(data, i) {
          return JSON.stringify(data[i]) + "\n\n";
        }
      };
      req = this.generateBodyContent(arr, e, stat, dm);
      return req;
    };
    ODataAdaptor2.getField = function(prop) {
      return prop.replace(/\./g, "/");
    };
    ODataAdaptor2.prototype.generateBodyContent = function(arr, e, stat, dm) {
      var req = "";
      for (var i = 0; i < arr.length; i++) {
        req += "\n" + e.cSet + "\n";
        req += this.options.changeSetContent + "\n\n";
        req += stat.method;
        if (stat.method === "POST ") {
          req += (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + " HTTP/1.1\n";
        } else if (stat.method === "PUT " || stat.method === "PATCH ") {
          req += (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + " HTTP/1.1\n";
        } else if (stat.method === "DELETE ") {
          req += (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + " HTTP/1.1\n";
        }
        req += "Accept: " + this.options.accept + "\n";
        req += "Content-Id: " + this.pvt.changeSet++ + "\n";
        req += this.options.batchChangeSetContentType + "\n";
        if (!isNullOrUndefined(arr[i]["@odata.etag"])) {
          req += "If-Match: " + arr[i]["@odata.etag"] + "\n\n";
          delete arr[i]["@odata.etag"];
        } else {
          req += "\n";
        }
        req += stat.data(arr, i);
      }
      return req;
    };
    ODataAdaptor2.prototype.processBatchResponse = function(data, query, xhr, request, changes) {
      if (xhr && xhr.headers.get("Content-Type") && xhr.headers.get("Content-Type").indexOf("xml") !== -1) {
        return query.isCountRequired ? {
          result: [],
          count: 0
        } : [];
      }
      if (request && this.options.batch && DataUtil.endsWith(request.url, this.options.batch) && request.type.toLowerCase() === "post") {
        var guid = xhr.headers.get("Content-Type");
        var cIdx = void 0;
        var jsonObj = void 0;
        var d = data + "";
        guid = guid.substring(guid.indexOf("=batchresponse") + 1);
        d = d.split(guid);
        if (d.length < 2) {
          return {};
        }
        d = d[1];
        var exVal = /(?:\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(d);
        if (exVal) {
          d.replace(exVal[0], "");
        }
        var changeGuid = exVal ? exVal[1] : "";
        d = d.split(changeGuid);
        for (var i = d.length; i > -1; i--) {
          if (!/\bContent-ID:/i.test(d[i]) || !/\bHTTP.+201/.test(d[i])) {
            continue;
          }
          cIdx = parseInt(/\bContent-ID: (\d+)/i.exec(d[i])[1], 10);
          if (changes.addedRecords[cIdx]) {
            jsonObj = DataUtil.parse.parseJson(/^\{.+\}/m.exec(d[i])[0]);
            extend({}, changes.addedRecords[cIdx], this.processResponse(jsonObj));
          }
        }
        return changes;
      }
      return null;
    };
    ODataAdaptor2.prototype.compareAndRemove = function(data, original, key) {
      var _this = this;
      if (isNullOrUndefined(original)) {
        return data;
      }
      Object.keys(data).forEach(function(prop) {
        if (prop !== key && prop !== "@odata.etag") {
          if (DataUtil.isPlainObject(data[prop])) {
            _this.compareAndRemove(data[prop], original[prop]);
            var final = Object.keys(data[prop]).filter(function(data2) {
              return data2 !== "@odata.etag";
            });
            if (final.length === 0) {
              delete data[prop];
            }
          } else if (data[prop] === original[prop]) {
            delete data[prop];
          } else if (data[prop] && original[prop] && data[prop].valueOf() === original[prop].valueOf()) {
            delete data[prop];
          }
        }
      });
      return data;
    };
    return ODataAdaptor2;
  }(UrlAdaptor)
);
var ODataV4Adaptor = (
  /** @class */
  function(_super) {
    __extends(ODataV4Adaptor2, _super);
    function ODataV4Adaptor2(props) {
      var _this = _super.call(this, props) || this;
      _this.options = extend({}, _this.options, {
        requestType: "get",
        accept: "application/json, text/javascript, */*; q=0.01",
        multipartAccept: "multipart/mixed",
        sortBy: "$orderby",
        select: "$select",
        skip: "$skip",
        take: "$top",
        count: "$count",
        search: "$search",
        where: "$filter",
        expand: "$expand",
        batch: "$batch",
        changeSet: "--changeset_",
        batchPre: "batch_",
        contentId: "Content-Id: ",
        batchContent: "Content-Type: multipart/mixed; boundary=",
        changeSetContent: "Content-Type: application/http\nContent-Transfer-Encoding: binary ",
        batchChangeSetContentType: "Content-Type: application/json; charset=utf-8 ",
        updateType: "PATCH",
        localTime: false,
        apply: "$apply"
      });
      extend(_this.options, props || {});
      return _this;
    }
    ODataV4Adaptor2.prototype.getModuleName = function() {
      return "ODataV4Adaptor";
    };
    ODataV4Adaptor2.prototype.onCount = function(e) {
      return e === true ? "true" : "";
    };
    ODataV4Adaptor2.prototype.onPredicate = function(predicate, query, requiresCast) {
      var returnValue = "";
      var val = predicate.value;
      var isDate = val instanceof Date;
      if (query instanceof Query) {
        var queries = this.getQueryRequest(query);
        for (var i = 0; i < queries.filters.length; i++) {
          if (queries.filters[i].e.key === predicate.value) {
            requiresCast = true;
          }
        }
      }
      returnValue = _super.prototype.onPredicate.call(this, predicate, query, requiresCast);
      if (isDate) {
        returnValue = returnValue.replace(/datetime'(.*)'$/, "$1");
      }
      if (DataUtil.parse.isGuid(val)) {
        returnValue = returnValue.replace("guid", "").replace(/'/g, "");
      }
      return returnValue;
    };
    ODataV4Adaptor2.prototype.onEachSearch = function(e) {
      var search = this.pvt.searches || [];
      search.push(e.key);
      this.pvt.searches = search;
    };
    ODataV4Adaptor2.prototype.onSearch = function(e) {
      return this.pvt.searches.join(" OR ");
    };
    ODataV4Adaptor2.prototype.onExpand = function(e) {
      var _this = this;
      var selected = {};
      var expanded = {};
      var expands = e.expands.slice();
      var exArr = [];
      var selects = e.selects.filter(function(item) {
        return item.indexOf(".") > -1;
      });
      selects.forEach(function(select2) {
        var splits = select2.split(".");
        if (!(splits[0] in selected)) {
          selected[splits[0]] = [];
        }
        if (splits.length === 2) {
          if (selected[splits[0]].length && Object.keys(selected).indexOf(splits[0]) !== -1) {
            if (selected[splits[0]][0].indexOf("$expand") !== -1 && selected[splits[0]][0].indexOf(";$select=") === -1) {
              selected[splits[0]][0] = selected[splits[0]][0] + ";$select=" + splits[1];
            } else {
              selected[splits[0]][0] = selected[splits[0]][0] + "," + splits[1];
            }
          } else {
            selected[splits[0]].push("$select=" + splits[1]);
          }
        } else {
          var sel = "$select=" + splits[splits.length - 1];
          var exp = "";
          var close_1 = "";
          for (var i = 1; i < splits.length - 1; i++) {
            exp = exp + "$expand=" + splits[i] + "(";
            close_1 = close_1 + ")";
          }
          var combineVal = exp + sel + close_1;
          if (selected[splits[0]].length && Object.keys(selected).indexOf(splits[0]) !== -1 && _this.expandQueryIndex(selected[splits[0]], true)) {
            var idx = _this.expandQueryIndex(selected[splits[0]]);
            selected[splits[0]][idx] = selected[splits[0]][idx] + combineVal.replace("$expand=", ",");
          } else {
            selected[splits[0]].push(combineVal);
          }
        }
      });
      Object.keys(selected).forEach(function(expand) {
        if (expands.indexOf(expand) === -1) {
          expands.push(expand);
        }
      });
      expands.forEach(function(expand) {
        expanded[expand] = expand in selected ? expand + "(" + selected[expand].join(";") + ")" : expand;
      });
      Object.keys(expanded).forEach(function(ex) {
        return exArr.push(expanded[ex]);
      });
      return exArr.join(",");
    };
    ODataV4Adaptor2.prototype.expandQueryIndex = function(query, isExpand) {
      for (var i = 0; i < query.length; i++) {
        if (query[i].indexOf("$expand") !== -1) {
          return isExpand ? true : i;
        }
      }
      return isExpand ? false : 0;
    };
    ODataV4Adaptor2.prototype.onDistinct = function(distinctFields) {
      var fields = distinctFields.map(function(field) {
        return ODataAdaptor.getField(field);
      }).join(",");
      return "groupby((" + fields + "))";
    };
    ODataV4Adaptor2.prototype.onSelect = function(e) {
      return _super.prototype.onSelect.call(this, e.filter(function(item) {
        return item.indexOf(".") === -1;
      }));
    };
    ODataV4Adaptor2.prototype.beforeSend = function(dm, request, settings) {
      if (settings.type === "POST" || settings.type === "PUT" || settings.type === "PATCH") {
        request.headers.set("Prefer", "return=representation");
      }
      request.headers.set("Accept", this.options.accept);
    };
    ODataV4Adaptor2.prototype.processResponse = function(data, ds, query, xhr, request, changes) {
      var metaName = "@odata.context";
      var metaV4Name = "@context";
      if (request && request.type === "GET" && !this.rootUrl && (data[metaName] || data[metaV4Name])) {
        var dataUrl = data[metaName] ? data[metaName].split("/$metadata#") : data[metaV4Name].split("/$metadata#");
        this.rootUrl = dataUrl[0];
        this.resourceTableName = dataUrl[1];
      }
      var pvtData = "pvtData";
      var pvt = request && request[pvtData];
      var emptyAndBatch = _super.prototype.processBatchResponse.call(this, data, query, xhr, request, changes);
      if (emptyAndBatch) {
        return emptyAndBatch;
      }
      var count = null;
      var dataCount = "@odata.count";
      var dataV4Count = "@count";
      if (query && query.isCountRequired) {
        if (dataCount in data) {
          count = data[dataCount];
        } else if (dataV4Count in data) {
          count = data[dataV4Count];
        }
      }
      data = !isNullOrUndefined(data.value) ? data.value : data;
      var args = {};
      args.count = count;
      args.result = data;
      this.getAggregateResult(pvt, data, args, null, query);
      return DataUtil.isNull(count) ? args.result : {
        result: args.result,
        count,
        aggregates: args.aggregates
      };
    };
    return ODataV4Adaptor2;
  }(ODataAdaptor)
);
var WebApiAdaptor = (
  /** @class */
  function(_super) {
    __extends(WebApiAdaptor2, _super);
    function WebApiAdaptor2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    WebApiAdaptor2.prototype.getModuleName = function() {
      return "WebApiAdaptor";
    };
    WebApiAdaptor2.prototype.insert = function(dm, data, tableName) {
      return {
        type: "POST",
        url: dm.dataSource.url,
        data: JSON.stringify(data)
      };
    };
    WebApiAdaptor2.prototype.remove = function(dm, keyField, value, tableName) {
      return {
        type: "DELETE",
        url: dm.dataSource.url + "/" + value,
        data: JSON.stringify(value)
      };
    };
    WebApiAdaptor2.prototype.update = function(dm, keyField, value, tableName) {
      return {
        type: "PUT",
        url: dm.dataSource.url,
        data: JSON.stringify(value)
      };
    };
    WebApiAdaptor2.prototype.batchRequest = function(dm, changes, e) {
      var _this = this;
      var initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);
      var url = dm.dataSource.url.replace(/\/*$/, "/" + this.options.batch);
      e.url = this.resourceTableName ? this.resourceTableName : e.url;
      var req = [];
      var _loop_1 = function(i2, x2) {
        changes.addedRecords.forEach(function(j, d) {
          var stat = {
            "method": "POST ",
            "url": function(data, i3, key) {
              return "";
            },
            "data": function(data, i3) {
              return JSON.stringify(data[i3]) + "\n\n";
            }
          };
          req.push("--" + initialGuid);
          req.push("Content-Type: application/http; msgtype=request", "");
          req.push("POST /api/" + (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(changes.addedRecords, i2, e.key) + " HTTP/1.1");
          req.push("Content-Type: application/json; charset=utf-8");
          req.push("Host: " + location.host);
          req.push("", j ? JSON.stringify(j) : "");
        });
      };
      for (var i = 0, x = changes.addedRecords.length; i < x; i++) {
        _loop_1(i, x);
      }
      var _loop_2 = function(i2, x2) {
        changes.changedRecords.forEach(function(j, d) {
          var stat = {
            "method": _this.options.updateType + " ",
            "url": function(data, i3, key) {
              return "";
            },
            "data": function(data, i3) {
              return JSON.stringify(data[i3]) + "\n\n";
            }
          };
          req.push("--" + initialGuid);
          req.push("Content-Type: application/http; msgtype=request", "");
          req.push("PUT /api/" + (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(changes.changedRecords, i2, e.key) + " HTTP/1.1");
          req.push("Content-Type: application/json; charset=utf-8");
          req.push("Host: " + location.host);
          req.push("", j ? JSON.stringify(j) : "");
        });
      };
      for (var i = 0, x = changes.changedRecords.length; i < x; i++) {
        _loop_2(i, x);
      }
      var _loop_3 = function(i2, x2) {
        changes.deletedRecords.forEach(function(j, d) {
          var state = {
            "mtd": "DELETE ",
            "url": function(data, i3, key) {
              var url2 = DataUtil.getObject(key, data[i3]);
              if (typeof url2 === "number" || DataUtil.parse.isGuid(url2)) {
                return "/" + url2;
              } else if (url2 instanceof Date) {
                var datTime = data[i3][key];
                return "/" + datTime.toJSON();
              } else {
                return "/'" + url2 + "'";
              }
            },
            "data": function(data, i3) {
              return "";
            }
          };
          req.push("--" + initialGuid);
          req.push("Content-Type: application/http; msgtype=request", "");
          req.push("DELETE /api/" + (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + state.url(changes.deletedRecords, i2, e.key) + " HTTP/1.1");
          req.push("Content-Type: application/json; charset=utf-8");
          req.push("Host: " + location.host);
          req.push("", j ? JSON.stringify(j) : "");
        });
      };
      for (var i = 0, x = changes.deletedRecords.length; i < x; i++) {
        _loop_3(i, x);
      }
      req.push("--" + initialGuid + "--", "");
      return {
        type: "POST",
        url,
        contentType: "multipart/mixed; boundary=" + initialGuid,
        data: req.join("\r\n")
      };
    };
    WebApiAdaptor2.prototype.beforeSend = function(dm, request, settings) {
      request.headers.set("Accept", "application/json, text/javascript, */*; q=0.01");
    };
    WebApiAdaptor2.prototype.processResponse = function(data, ds, query, xhr, request, changes) {
      var pvtData = "pvtData";
      var pvt = request && request[pvtData];
      var count = null;
      var args = {};
      if (request && request.type.toLowerCase() !== "post") {
        var versionCheck = xhr && request.fetchRequest.headers.get("DataServiceVersion");
        var version = versionCheck && parseInt(versionCheck, 10) || 2;
        if (query && query.isCountRequired) {
          if (!DataUtil.isNull(data.Count)) {
            count = data.Count;
          }
        }
        if (version < 3 && data.Items) {
          data = data.Items;
        }
        args.count = count;
        args.result = data;
        this.getAggregateResult(pvt, data, args, null, query);
      }
      args.result = args.result || data;
      return DataUtil.isNull(count) ? args.result : {
        result: args.result,
        count: args.count,
        aggregates: args.aggregates
      };
    };
    return WebApiAdaptor2;
  }(ODataAdaptor)
);
var WebMethodAdaptor = (
  /** @class */
  function(_super) {
    __extends(WebMethodAdaptor2, _super);
    function WebMethodAdaptor2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    WebMethodAdaptor2.prototype.processQuery = function(dm, query, hierarchyFilters) {
      var obj = new UrlAdaptor().processQuery(dm, query, hierarchyFilters);
      var getData = "data";
      var data = DataUtil.parse.parseJson(obj[getData]);
      var result = {};
      var value = "value";
      if (data.param) {
        for (var i = 0; i < data.param.length; i++) {
          var param = data.param[i];
          var key = Object.keys(param)[0];
          result[key] = param[key];
        }
      }
      result[value] = data;
      var pvtData = "pvtData";
      var url = "url";
      return {
        data: JSON.stringify(result, DataUtil.parse.jsonDateReplacer),
        url: obj[url],
        pvtData: obj[pvtData],
        type: "POST",
        contentType: "application/json; charset=utf-8"
      };
    };
    return WebMethodAdaptor2;
  }(UrlAdaptor)
);
var RemoteSaveAdaptor = (
  /** @class */
  function(_super) {
    __extends(RemoteSaveAdaptor2, _super);
    function RemoteSaveAdaptor2() {
      return _super.call(this) || this;
    }
    RemoteSaveAdaptor2.prototype.insert = function(dm, data, tableName, query, position) {
      this.pvt.position = position;
      this.updateType = "add";
      return {
        url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify(extend({}, {
          value: data,
          table: tableName,
          action: "insert"
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    RemoteSaveAdaptor2.prototype.remove = function(dm, keyField, val, tableName, query) {
      _super.prototype.remove.call(this, dm, keyField, val);
      return {
        type: "POST",
        url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify(extend({}, {
          key: val,
          keyColumn: keyField,
          table: tableName,
          action: "remove"
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    RemoteSaveAdaptor2.prototype.update = function(dm, keyField, val, tableName, query) {
      this.updateType = "update";
      this.updateKey = keyField;
      return {
        type: "POST",
        url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify(extend({}, {
          value: val,
          action: "update",
          keyColumn: keyField,
          key: val[keyField],
          table: tableName
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    RemoteSaveAdaptor2.prototype.processResponse = function(data, ds, query, xhr, request, changes, e) {
      var i;
      var newData = request ? JSON.parse(request.data) : data;
      data = newData.action === "batch" ? DataUtil.parse.parseJson(data) : data;
      if (this.updateType === "add") {
        _super.prototype.insert.call(this, ds, data, null, null, this.pvt.position);
      }
      if (this.updateType === "update") {
        _super.prototype.update.call(this, ds, this.updateKey, data);
      }
      this.updateType = void 0;
      if (data.added) {
        for (i = 0; i < data.added.length; i++) {
          _super.prototype.insert.call(this, ds, data.added[i]);
        }
      }
      if (data.changed) {
        for (i = 0; i < data.changed.length; i++) {
          _super.prototype.update.call(this, ds, e.key, data.changed[i]);
        }
      }
      if (data.deleted) {
        for (i = 0; i < data.deleted.length; i++) {
          _super.prototype.remove.call(this, ds, e.key, data.deleted[i]);
        }
      }
      return data;
    };
    RemoteSaveAdaptor2.prototype.batchRequest = function(dm, changes, e, query, original) {
      return {
        type: "POST",
        url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        data: JSON.stringify(extend({}, {
          changed: changes.changedRecords,
          added: changes.addedRecords,
          deleted: changes.deletedRecords,
          action: "batch",
          table: e.url,
          key: e.key
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    RemoteSaveAdaptor2.prototype.addParams = function(options) {
      var urlParams = new UrlAdaptor();
      urlParams.addParams(options);
    };
    RemoteSaveAdaptor2.prototype.beforeSend = function(dm, request, settings) {
    };
    return RemoteSaveAdaptor2;
  }(JsonAdaptor)
);
var CustomDataAdaptor = (
  /** @class */
  function(_super) {
    __extends(CustomDataAdaptor2, _super);
    function CustomDataAdaptor2(props) {
      var _this = _super.call(this) || this;
      _this.options = extend({}, _this.options, {
        getData: function() {
        },
        addRecord: function() {
        },
        updateRecord: function() {
        },
        deleteRecord: function() {
        },
        batchUpdate: function() {
        }
      });
      extend(_this.options, props || {});
      return _this;
    }
    CustomDataAdaptor2.prototype.getModuleName = function() {
      return "CustomDataAdaptor";
    };
    return CustomDataAdaptor2;
  }(UrlAdaptor)
);
var GraphQLAdaptor = (
  /** @class */
  function(_super) {
    __extends(GraphQLAdaptor2, _super);
    function GraphQLAdaptor2(options) {
      var _this = _super.call(this) || this;
      _this.opt = options;
      _this.schema = _this.opt.response;
      _this.query = _this.opt.query;
      _this.getVariables = _this.opt.getVariables ? _this.opt.getVariables : function() {
      };
      _this.getQuery = function() {
        return _this.query;
      };
      return _this;
    }
    GraphQLAdaptor2.prototype.getModuleName = function() {
      return "GraphQLAdaptor";
    };
    GraphQLAdaptor2.prototype.processQuery = function(datamanager, query) {
      var urlQuery = _super.prototype.processQuery.apply(this, arguments);
      var dm = JSON.parse(urlQuery.data);
      var keys = ["skip", "take", "sorted", "table", "select", "where", "search", "requiresCounts", "aggregates", "params"];
      var temp = {};
      var str = "searchwhereparams";
      keys.filter(function(e) {
        temp[e] = str.indexOf(e) > -1 ? JSON.stringify(dm[e]) : dm[e];
      });
      var vars = this.getVariables() || {};
      vars["datamanager"] = temp;
      var data = JSON.stringify({
        query: this.getQuery(),
        variables: vars
      });
      urlQuery.data = data;
      return urlQuery;
    };
    GraphQLAdaptor2.prototype.processResponse = function(resData, ds, query, xhr, request) {
      var res = resData;
      var count;
      var aggregates;
      var result = getValue(this.schema.result, res.data);
      if (this.schema.count) {
        count = getValue(this.schema.count, res.data);
      }
      if (this.schema.aggregates) {
        aggregates = getValue(this.schema.aggregates, res.data);
        aggregates = !isNullOrUndefined(aggregates) ? DataUtil.parse.parseJson(aggregates) : aggregates;
      }
      var pvt = request.pvtData || {};
      var args = {
        result,
        aggregates
      };
      var data = args;
      if (pvt && pvt.groups && pvt.groups.length) {
        this.getAggregateResult(pvt, data, args, null, query);
      }
      return !isNullOrUndefined(count) ? {
        result: args.result,
        count,
        aggregates
      } : args.result;
    };
    GraphQLAdaptor2.prototype.insert = function() {
      var inserted = _super.prototype.insert.apply(this, arguments);
      return this.generateCrudData(inserted, "insert");
    };
    GraphQLAdaptor2.prototype.update = function() {
      var inserted = _super.prototype.update.apply(this, arguments);
      return this.generateCrudData(inserted, "update");
    };
    GraphQLAdaptor2.prototype.remove = function() {
      var inserted = _super.prototype.remove.apply(this, arguments);
      return this.generateCrudData(inserted, "remove");
    };
    GraphQLAdaptor2.prototype.batchRequest = function(dm, changes, e, query, original) {
      var batch = _super.prototype.batchRequest.apply(this, arguments);
      var bData = JSON.parse(batch.data);
      bData.key = e.key;
      batch.data = JSON.stringify(bData);
      return this.generateCrudData(batch, "batch");
    };
    GraphQLAdaptor2.prototype.generateCrudData = function(crudData, action) {
      var parsed = JSON.parse(crudData.data);
      crudData.data = JSON.stringify({
        query: this.opt.getMutation(action),
        variables: parsed
      });
      return crudData;
    };
    return GraphQLAdaptor2;
  }(UrlAdaptor)
);
var CacheAdaptor = (
  /** @class */
  function(_super) {
    __extends(CacheAdaptor2, _super);
    function CacheAdaptor2(adaptor, timeStamp, pageSize) {
      var _this = _super.call(this) || this;
      _this.isCrudAction = false;
      _this.isInsertAction = false;
      if (!isNullOrUndefined(adaptor)) {
        _this.cacheAdaptor = adaptor;
      }
      _this.pageSize = pageSize;
      _this.guidId = DataUtil.getGuid("cacheAdaptor");
      var obj = {
        keys: [],
        results: []
      };
      window.localStorage.setItem(_this.guidId, JSON.stringify(obj));
      var guid = _this.guidId;
      if (!isNullOrUndefined(timeStamp)) {
        setInterval(function() {
          var data = DataUtil.parse.parseJson(window.localStorage.getItem(guid));
          var forDel = [];
          for (var i = 0; i < data.results.length; i++) {
            var currentTime = +/* @__PURE__ */ new Date();
            var requestTime = +new Date(data.results[i].timeStamp);
            data.results[i].timeStamp = currentTime - requestTime;
            if (currentTime - requestTime > timeStamp) {
              forDel.push(i);
            }
          }
          for (var i = 0; i < forDel.length; i++) {
            data.results.splice(forDel[i], 1);
            data.keys.splice(forDel[i], 1);
          }
          window.localStorage.removeItem(guid);
          window.localStorage.setItem(guid, JSON.stringify(data));
        }, timeStamp);
      }
      return _this;
    }
    CacheAdaptor2.prototype.generateKey = function(url, query) {
      var queries = this.getQueryRequest(query);
      var singles = Query.filterQueryLists(query.queries, ["onSelect", "onPage", "onSkip", "onTake", "onRange"]);
      var key = url;
      var page = "onPage";
      if (page in singles) {
        key += singles[page].pageIndex;
      }
      queries.sorts.forEach(function(obj) {
        key += obj.e.direction + obj.e.fieldName;
      });
      queries.groups.forEach(function(obj) {
        key += obj.e.fieldName;
      });
      queries.searches.forEach(function(obj) {
        key += obj.e.searchKey;
      });
      for (var filter = 0; filter < queries.filters.length; filter++) {
        var currentFilter = queries.filters[filter];
        if (currentFilter.e.isComplex) {
          var newQuery = query.clone();
          newQuery.queries = [];
          for (var i = 0; i < currentFilter.e.predicates.length; i++) {
            newQuery.queries.push({
              fn: "onWhere",
              e: currentFilter.e.predicates[i],
              filter: query.queries.filter
            });
          }
          key += currentFilter.e.condition + this.generateKey(url, newQuery);
        } else {
          key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value;
        }
      }
      return key;
    };
    CacheAdaptor2.prototype.processQuery = function(dm, query, hierarchyFilters) {
      var key = this.generateKey(dm.dataSource.url, query);
      var cachedItems = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));
      var data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;
      if (data != null && !this.isCrudAction && !this.isInsertAction) {
        return data;
      }
      this.isCrudAction = null;
      this.isInsertAction = null;
      return this.cacheAdaptor.processQuery.apply(this.cacheAdaptor, [].slice.call(arguments, 0));
    };
    CacheAdaptor2.prototype.processResponse = function(data, ds, query, xhr, request, changes) {
      if (this.isInsertAction || request && this.cacheAdaptor.options.batch && DataUtil.endsWith(request.url, this.cacheAdaptor.options.batch) && request.type.toLowerCase() === "post") {
        return this.cacheAdaptor.processResponse(data, ds, query, xhr, request, changes);
      }
      data = this.cacheAdaptor.processResponse.apply(this.cacheAdaptor, [].slice.call(arguments, 0));
      var key = query ? this.generateKey(ds.dataSource.url, query) : ds.dataSource.url;
      var obj = {};
      obj = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));
      var index = obj.keys.indexOf(key);
      if (index !== -1) {
        obj.results.splice(index, 1);
        obj.keys.splice(index, 1);
      }
      obj.results[obj.keys.push(key) - 1] = {
        keys: key,
        result: data.result,
        timeStamp: /* @__PURE__ */ new Date(),
        count: data.count
      };
      while (obj.results.length > this.pageSize) {
        obj.results.splice(0, 1);
        obj.keys.splice(0, 1);
      }
      window.localStorage.setItem(this.guidId, JSON.stringify(obj));
      return data;
    };
    CacheAdaptor2.prototype.beforeSend = function(dm, request, settings) {
      if (!isNullOrUndefined(this.cacheAdaptor.options.batch) && DataUtil.endsWith(settings.url, this.cacheAdaptor.options.batch) && settings.type.toLowerCase() === "post") {
        request.headers.set("Accept", this.cacheAdaptor.options.multipartAccept);
      }
      if (!dm.dataSource.crossDomain) {
        request.headers.set("Accept", this.cacheAdaptor.options.accept);
      }
    };
    CacheAdaptor2.prototype.update = function(dm, keyField, value, tableName) {
      this.isCrudAction = true;
      return this.cacheAdaptor.update(dm, keyField, value, tableName);
    };
    CacheAdaptor2.prototype.insert = function(dm, data, tableName) {
      this.isInsertAction = true;
      return this.cacheAdaptor.insert(dm, data, tableName);
    };
    CacheAdaptor2.prototype.remove = function(dm, keyField, value, tableName) {
      this.isCrudAction = true;
      return this.cacheAdaptor.remove(dm, keyField, value, tableName);
    };
    CacheAdaptor2.prototype.batchRequest = function(dm, changes, e) {
      return this.cacheAdaptor.batchRequest(dm, changes, e);
    };
    return CacheAdaptor2;
  }(UrlAdaptor)
);

// node_modules/@syncfusion/ej2-data/src/manager.js
var __awaiter = function(thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : new P(function(resolve2) {
        resolve2(result.value);
      }).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = function(thisArg, body) {
  var _ = {
    label: 0,
    sent: function() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  }, f, y, t, g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};
var DataManager = (
  /** @class */
  function() {
    function DataManager2(dataSource, query, adaptor) {
      var _this = this;
      this.dateParse = true;
      this.timeZoneHandling = true;
      this.persistQuery = {};
      this.isInitialLoad = false;
      this.requests = [];
      this.isEnableCache = false;
      this.isInitialLoad = true;
      this.isEnableCache = false;
      if (!dataSource && !this.dataSource) {
        dataSource = [];
      }
      adaptor = adaptor || dataSource.adaptor;
      if (dataSource && dataSource.timeZoneHandling === false) {
        this.timeZoneHandling = dataSource.timeZoneHandling;
      }
      var data;
      if (dataSource instanceof Array) {
        data = {
          json: dataSource,
          offline: true
        };
      } else if (typeof dataSource === "object") {
        if (!dataSource.json) {
          dataSource.json = [];
        }
        if (!dataSource.enablePersistence) {
          dataSource.enablePersistence = false;
        }
        if (!dataSource.id) {
          dataSource.id = "";
        }
        if (!dataSource.ignoreOnPersist) {
          dataSource.ignoreOnPersist = [];
        }
        data = {
          url: dataSource.url,
          insertUrl: dataSource.insertUrl,
          removeUrl: dataSource.removeUrl,
          updateUrl: dataSource.updateUrl,
          crudUrl: dataSource.crudUrl,
          batchUrl: dataSource.batchUrl,
          json: dataSource.json,
          headers: dataSource.headers,
          accept: dataSource.accept,
          data: dataSource.data,
          enableCache: dataSource.enableCache,
          timeTillExpiration: dataSource.timeTillExpiration,
          cachingPageSize: dataSource.cachingPageSize,
          enableCaching: dataSource.enableCaching,
          requestType: dataSource.requestType,
          key: dataSource.key,
          crossDomain: dataSource.crossDomain,
          jsonp: dataSource.jsonp,
          dataType: dataSource.dataType,
          offline: dataSource.offline !== void 0 ? dataSource.offline : dataSource.adaptor instanceof RemoteSaveAdaptor || dataSource.adaptor instanceof CustomDataAdaptor ? false : dataSource.url ? false : true,
          requiresFormat: dataSource.requiresFormat,
          enablePersistence: dataSource.enablePersistence,
          id: dataSource.id,
          ignoreOnPersist: dataSource.ignoreOnPersist
        };
      } else {
        DataUtil.throwError("DataManager: Invalid arguments");
      }
      if (data.requiresFormat === void 0 && !DataUtil.isCors()) {
        data.requiresFormat = isNullOrUndefined(data.crossDomain) ? true : data.crossDomain;
      }
      if (data.dataType === void 0) {
        data.dataType = "json";
      }
      this.isEnableCache = data.enableCache;
      this.dataSource = data;
      this.defaultQuery = query;
      if (this.dataSource.enablePersistence && this.dataSource.id) {
        window.addEventListener("unload", this.setPersistData.bind(this));
      }
      if (data.url && data.offline && !data.json.length) {
        this.isDataAvailable = false;
        this.adaptor = adaptor || new ODataAdaptor();
        this.dataSource.offline = false;
        this.ready = this.executeQuery(query || new Query());
        this.ready.then(function(e) {
          _this.dataSource.offline = true;
          _this.isDataAvailable = true;
          data.json = e.result;
          _this.adaptor = new JsonAdaptor();
        });
      } else {
        this.adaptor = data.offline ? new JsonAdaptor() : new ODataAdaptor();
      }
      if (!data.jsonp && this.adaptor instanceof ODataAdaptor) {
        data.jsonp = "callback";
      }
      this.adaptor = adaptor || this.adaptor;
      if (this.isEnableCache) {
        this.guidId = DataUtil.getGuid("cacheAdaptor");
        var obj = {
          keys: [],
          results: []
        };
        window.localStorage.setItem(this.guidId, JSON.stringify(obj));
      }
      if (data.enableCaching) {
        this.adaptor = new CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize);
      }
      return this;
    }
    Object.defineProperty(DataManager2.prototype, "moduleName", {
      /** @hidden */
      get: function() {
        return "datamanager";
      },
      enumerable: true,
      configurable: true
    });
    ;
    DataManager2.prototype.getPersistedData = function(id) {
      var persistedData = localStorage.getItem(id || this.dataSource.id);
      return JSON.parse(persistedData);
    };
    DataManager2.prototype.setPersistData = function(e, id, persistData) {
      localStorage.setItem(id || this.dataSource.id, JSON.stringify(persistData || this.persistQuery));
    };
    DataManager2.prototype.setPersistQuery = function(query) {
      var _this = this;
      var persistedQuery = this.getPersistedData();
      if (this.isInitialLoad && persistedQuery && Object.keys(persistedQuery).length) {
        this.persistQuery = persistedQuery;
        this.persistQuery.queries = this.persistQuery.queries.filter(function(query2) {
          if (_this.dataSource.ignoreOnPersist && _this.dataSource.ignoreOnPersist.length) {
            if (query2.fn && _this.dataSource.ignoreOnPersist.some(function(keyword) {
              return query2.fn === keyword;
            })) {
              return false;
            }
          }
          if (query2.fn === "onWhere") {
            var e = query2.e;
            if (e && e.isComplex && e.predicates instanceof Array) {
              var allPredicates = e.predicates.map(function(predicateObj) {
                if (predicateObj.predicates && predicateObj.predicates instanceof Array) {
                  var nestedPredicates = predicateObj.predicates.map(function(nestedPredicate) {
                    var field2 = nestedPredicate.field, operator2 = nestedPredicate.operator, value2 = nestedPredicate.value, ignoreCase2 = nestedPredicate.ignoreCase, ignoreAccent2 = nestedPredicate.ignoreAccent, matchCase2 = nestedPredicate.matchCase;
                    return new Predicate(field2, operator2, value2, ignoreCase2, ignoreAccent2, matchCase2);
                  });
                  return predicateObj.condition === "and" ? Predicate.and(nestedPredicates) : Predicate.or(nestedPredicates);
                } else {
                  var field = predicateObj.field, operator = predicateObj.operator, value = predicateObj.value, ignoreCase = predicateObj.ignoreCase, ignoreAccent = predicateObj.ignoreAccent, matchCase = predicateObj.matchCase;
                  return new Predicate(field, operator, value, ignoreCase, ignoreAccent, matchCase);
                }
              });
              query2.e = new Predicate(allPredicates[0], e.condition, allPredicates.slice(1));
            }
          }
          return true;
        });
        var newQuery = extend(new Query(), this.persistQuery);
        this.isInitialLoad = false;
        return newQuery;
      } else {
        this.persistQuery = query;
        this.isInitialLoad = false;
        return query;
      }
    };
    DataManager2.prototype.setDefaultQuery = function(query) {
      this.defaultQuery = query;
      return this;
    };
    DataManager2.prototype.executeLocal = function(query) {
      if (!this.defaultQuery && !(query instanceof Query)) {
        DataUtil.throwError("DataManager - executeLocal() : A query is required to execute");
      }
      if (!this.dataSource.json) {
        DataUtil.throwError("DataManager - executeLocal() : Json data is required to execute");
      }
      if (this.dataSource.enablePersistence && this.dataSource.id) {
        query = this.setPersistQuery(query);
      }
      query = query || this.defaultQuery;
      var result = this.adaptor.processQuery(this, query);
      if (query.subQuery) {
        var from = query.subQuery.fromTable;
        var lookup = query.subQuery.lookups;
        var res = query.isCountRequired ? result.result : result;
        if (lookup && lookup instanceof Array) {
          DataUtil.buildHierarchy(query.subQuery.fKey, from, res, lookup, query.subQuery.key);
        }
        for (var j = 0; j < res.length; j++) {
          if (res[j][from] instanceof Array) {
            res[j] = extend({}, {}, res[j]);
            res[j][from] = this.adaptor.processResponse(query.subQuery.using(new DataManager2(res[j][from].slice(0))).executeLocal(), this, query);
          }
        }
      }
      return this.adaptor.processResponse(result, this, query);
    };
    DataManager2.prototype.executeQuery = function(query, done, fail, always) {
      var _this = this;
      var makeRequest = "makeRequest";
      if (this.dataSource.enablePersistence && this.dataSource.id) {
        query = this.setPersistQuery(query);
      }
      if (typeof query === "function") {
        always = fail;
        fail = done;
        done = query;
        query = null;
      }
      if (!query) {
        query = this.defaultQuery;
      }
      if (!(query instanceof Query)) {
        DataUtil.throwError("DataManager - executeQuery() : A query is required to execute");
      }
      var deffered = new Deferred();
      var args = {
        query
      };
      if (!this.dataSource.offline && this.dataSource.url !== void 0 && this.dataSource.url !== "" || !isNullOrUndefined(this.adaptor[makeRequest]) || this.isCustomDataAdaptor(this.adaptor)) {
        var result = this.isEnableCache ? this.processQuery(query) : this.adaptor.processQuery(this, query);
        if (!isNullOrUndefined(this.adaptor[makeRequest])) {
          this.adaptor[makeRequest](result, deffered, args, query);
        } else if (!isNullOrUndefined(result.url) || this.isCustomDataAdaptor(this.adaptor)) {
          this.requests = [];
          this.makeRequest(result, deffered, args, query);
        } else {
          args = DataManager2.getDeferedArgs(query, result, args);
          deffered.resolve(args);
        }
      } else {
        DataManager2.nextTick(function() {
          var res = _this.executeLocal(query);
          args = DataManager2.getDeferedArgs(query, res, args);
          deffered.resolve(args);
        });
      }
      if (done || fail) {
        deffered.promise.then(done, fail);
      }
      if (always) {
        deffered.promise.then(always, always);
      }
      return deffered.promise;
    };
    DataManager2.prototype.getQueryRequest = function(query) {
      var req = {
        sorts: [],
        groups: [],
        filters: [],
        searches: [],
        aggregates: []
      };
      req.sorts = Query.filterQueries(query.queries, "onSortBy");
      req.groups = Query.filterQueries(query.queries, "onGroup");
      req.filters = Query.filterQueries(query.queries, "onWhere");
      req.searches = Query.filterQueries(query.queries, "onSearch");
      req.aggregates = Query.filterQueries(query.queries, "onAggregates");
      return req;
    };
    DataManager2.prototype.generateKey = function(url, query) {
      var queries = this.getQueryRequest(query);
      var singles = Query.filterQueryLists(query.queries, ["onSelect", "onPage", "onSkip", "onTake", "onRange"]);
      var key = url;
      var page = "onPage";
      queries.sorts.forEach(function(obj2) {
        key += obj2.e.direction + obj2.e.fieldName;
      });
      queries.groups.forEach(function(obj2) {
        key += obj2.e.fieldName;
      });
      queries.searches.forEach(function(obj2) {
        key += obj2.e.searchKey;
      });
      for (var filter = 0; filter < queries.filters.length; filter++) {
        var currentFilter = queries.filters[filter];
        if (currentFilter.e.isComplex) {
          var newQuery = query.clone();
          newQuery.queries = [];
          for (var i = 0; i < currentFilter.e.predicates.length; i++) {
            newQuery.queries.push({
              fn: "onWhere",
              e: currentFilter.e.predicates[i],
              filter: query.queries.filter
            });
          }
          key += currentFilter.e.condition + this.generateKey(url, newQuery);
        } else {
          key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value;
        }
      }
      if (!isNullOrUndefined(this.previousCacheQuery) && this.previousCacheQuery !== key) {
        var obj = {
          keys: [],
          results: []
        };
        window.localStorage.setItem(this.guidId, JSON.stringify(obj));
      }
      this.previousCacheQuery = key;
      if (page in singles) {
        key += singles[page].pageIndex;
      }
      return key;
    };
    DataManager2.prototype.processQuery = function(query) {
      var key = this.generateKey(this.dataSource.url, query);
      var cachedItems = JSON.parse(window.localStorage.getItem(this.guidId));
      var data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;
      if (data != null) {
        return DataUtil.parse.parseJson(data);
      }
      return this.adaptor.processQuery(this, query);
    };
    DataManager2.getDeferedArgs = function(query, result, args) {
      if (query.isCountRequired) {
        args.result = result.result;
        args.count = result.count;
        args.aggregates = result.aggregates;
      } else {
        args.result = result;
      }
      return args;
    };
    DataManager2.nextTick = function(fn) {
      (window.setImmediate || window.setTimeout)(fn, 0);
    };
    DataManager2.prototype.extendRequest = function(url, fnSuccess, fnFail) {
      return extend({}, {
        type: "GET",
        dataType: this.dataSource.dataType,
        crossDomain: this.dataSource.crossDomain,
        jsonp: this.dataSource.jsonp,
        cache: true,
        processData: false,
        onSuccess: fnSuccess,
        onFailure: fnFail
      }, url);
    };
    DataManager2.prototype.makeRequest = function(url, deffered, args, query) {
      var _this = this;
      var isSelector = !!query.subQuerySelector;
      var fnFail = function(e) {
        args.error = e;
        deffered.reject(args);
      };
      var process = function(data, count, xhr, request2, actual, aggregates, virtualSelectRecords) {
        args.xhr = xhr;
        args.count = count ? parseInt(count.toString(), 10) : 0;
        args.result = data;
        args.request = request2;
        args.aggregates = aggregates;
        args.actual = actual;
        args.virtualSelectRecords = virtualSelectRecords;
        deffered.resolve(args);
      };
      var fnQueryChild = function(data, selector) {
        var subDeffer = new Deferred();
        var childArgs = {
          parent: args
        };
        query.subQuery.isChild = true;
        var subUrl = _this.adaptor.processQuery(_this, query.subQuery, data ? _this.adaptor.processResponse(data) : selector);
        var childReq = _this.makeRequest(subUrl, subDeffer, childArgs, query.subQuery);
        if (!isSelector) {
          subDeffer.then(function(subData) {
            if (data) {
              DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, data, subData, query.subQuery.key);
              process(data, subData.count, subData.xhr);
            }
          }, fnFail);
        }
        return childReq;
      };
      var fnSuccess = function(data, request2) {
        if (_this.isGraphQLAdaptor(_this.adaptor)) {
          if (!isNullOrUndefined(data["errors"])) {
            return fnFail(data["errors"], request2);
          }
        }
        if (_this.isCustomDataAdaptor(_this.adaptor)) {
          request2 = extend({}, _this.fetchReqOption, request2);
        }
        if (request2.contentType.indexOf("xml") === -1 && _this.dateParse && !_this.isEnableCache) {
          data = DataUtil.parse.parseJson(data);
        }
        var result;
        var promise2 = _this.afterReponseRequest(data);
        promise2.then(function(data2) {
          result = _this.adaptor.processResponse(data2, _this, query, request2.fetchRequest, request2);
          if (_this.isEnableCache) {
            var key = query ? _this.generateKey(_this.dataSource.url, query) : _this.dataSource.url;
            var obj = {};
            obj = JSON.parse(window.localStorage.getItem(_this.guidId));
            var index = obj.keys.indexOf(key);
            if (index !== -1) {
              obj.results.splice(index, 1);
              obj.keys.splice(index, 1);
            }
            obj.results[obj.keys.push(key) - 1] = {
              keys: key,
              result: result.result,
              timeStamp: /* @__PURE__ */ new Date(),
              count: result.count
            };
            window.localStorage.setItem(_this.guidId, JSON.stringify(obj));
          }
          if (request2.contentType.indexOf("xml") === -1 && _this.dateParse && _this.isEnableCache) {
            result = DataUtil.parse.parseJson(result);
          }
          var count = 0;
          var aggregates = null;
          var virtualSelectRecords = "virtualSelectRecords";
          var virtualRecords = data2[virtualSelectRecords];
          if (query.isCountRequired) {
            count = result.count;
            aggregates = result.aggregates;
            result = result.result;
          }
          if (!query.subQuery) {
            process(result, count, request2.fetchRequest, request2.type, data2, aggregates, virtualRecords);
            return;
          }
          if (!isSelector) {
            fnQueryChild(result, request2);
          }
          ;
        }).catch(function(e) {
          return _this.dataManagerFailure(e, deffered, args);
        });
      };
      var req = this.extendRequest(url, fnSuccess, fnFail);
      if (!this.isCustomDataAdaptor(this.adaptor)) {
        var promise = this.useMiddleware(req);
        var fetch_1;
        promise.then(function(response) {
          fetch_1 = new Fetch(req);
          fetch_1.beforeSend = function() {
            _this.beforeSend(fetch_1.fetchRequest, fetch_1, response);
          };
          req = fetch_1.send();
          req.catch(function(e) {
            return true;
          });
          _this.requests.push(fetch_1);
        }).catch(function(e) {
          return _this.dataManagerFailure(e, deffered, args);
        });
      } else {
        this.fetchReqOption = req;
        var request = req;
        this.adaptor.options.getData({
          data: request.data,
          onSuccess: request.onSuccess,
          onFailure: request.onFailure
        });
      }
      if (isSelector) {
        var promise = void 0;
        var res = query.subQuerySelector.call(this, {
          query: query.subQuery,
          parent: query
        });
        if (res && res.length) {
          promise = Promise.all([req, fnQueryChild(null, res)]);
          promise.then(function() {
            var args2 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args2[_i] = arguments[_i];
            }
            var result = args2[0];
            var pResult = _this.adaptor.processResponse(result[0], _this, query, _this.requests[0].fetchRequest, _this.requests[0]);
            var count = 0;
            if (query.isCountRequired) {
              count = pResult.count;
              pResult = pResult.result;
            }
            var cResult = _this.adaptor.processResponse(result[1], _this, query.subQuery, _this.requests[1].fetchRequest, _this.requests[1]);
            count = 0;
            if (query.subQuery.isCountRequired) {
              count = cResult.count;
              cResult = cResult.result;
            }
            DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, pResult, cResult, query.subQuery.key);
            isSelector = false;
            process(pResult, count, _this.requests[0].fetchRequest);
          });
        } else {
          isSelector = false;
        }
      }
      return req;
    };
    DataManager2.prototype.dataManagerFailure = function(e, deffered, args) {
      args.error = e;
      deffered.reject(args);
    };
    DataManager2.prototype.afterReponseRequest = function(data) {
      return __awaiter(this, void 0, void 0, function() {
        var reponse, deffered;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.applyPostRequestMiddlewares(data)];
            case 1:
              reponse = _a.sent();
              deffered = new Deferred();
              deffered.resolve(reponse);
              return [2, deffered.promise];
          }
        });
      });
    };
    DataManager2.prototype.applyPostRequestMiddlewares = function(response) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, response];
        });
      });
    };
    DataManager2.prototype.useMiddleware = function(request) {
      return __awaiter(this, void 0, void 0, function() {
        var reponse, deffered;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.applyPreRequestMiddlewares(request)];
            case 1:
              reponse = _a.sent();
              deffered = new Deferred();
              deffered.resolve(reponse);
              return [2, deffered.promise];
          }
        });
      });
    };
    DataManager2.prototype.applyPreRequestMiddlewares = function(request) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, request];
        });
      });
    };
    DataManager2.prototype.beforeSend = function(request, settings, response) {
      this.adaptor.beforeSend(this, request, settings);
      var headers = [];
      if (this.dataSource.headers) {
        headers = headers.concat(this.dataSource.headers);
      }
      var props;
      if (response && response.headers) {
        headers = headers.concat(response.headers);
      }
      for (var i = 0; headers && i < headers.length; i++) {
        props = [];
        var keys = Object.keys(headers[i]);
        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
          var prop = keys_1[_i];
          props.push(prop);
          request.headers.set(prop, headers[i][prop]);
        }
      }
    };
    DataManager2.prototype.saveChanges = function(changes, key, tableName, query, original) {
      var _this = this;
      if (tableName instanceof Query) {
        query = tableName;
        tableName = null;
      }
      var args = {
        url: tableName,
        key: key || this.dataSource.key
      };
      var req = this.adaptor.batchRequest(this, changes, args, query || new Query(), original);
      var dofetchRequest = "dofetchRequest";
      if (this.dataSource.offline) {
        return req;
      }
      if (!isNullOrUndefined(this.adaptor[dofetchRequest])) {
        return this.adaptor[dofetchRequest](req);
      } else if (!this.isCustomDataAdaptor(this.adaptor)) {
        var deff_1 = new Deferred();
        var fetch_2 = new Fetch(req);
        fetch_2.beforeSend = function() {
          _this.beforeSend(fetch_2.fetchRequest, fetch_2);
        };
        fetch_2.onSuccess = function(data, request) {
          if (_this.isGraphQLAdaptor(_this.adaptor)) {
            if (!isNullOrUndefined(data["errors"])) {
              fetch_2.onFailure(JSON.stringify(data["errors"]));
            }
          }
          deff_1.resolve(_this.adaptor.processResponse(data, _this, null, request.fetchRequest, request, changes, args));
        };
        fetch_2.onFailure = function(e) {
          deff_1.reject([{
            error: e
          }]);
        };
        fetch_2.send().catch(function(e) {
          return true;
        });
        return deff_1.promise;
      } else {
        return this.dofetchRequest(req, this.adaptor.options.batchUpdate, changes);
      }
    };
    DataManager2.prototype.insert = function(data, tableName, query, position) {
      if (tableName instanceof Query) {
        query = tableName;
        tableName = null;
      }
      var req = this.adaptor.insert(this, data, tableName, query, position);
      var dofetchRequest = "dofetchRequest";
      if (this.dataSource.offline) {
        return req;
      }
      if (!isNullOrUndefined(this.adaptor[dofetchRequest])) {
        return this.adaptor[dofetchRequest](req);
      } else {
        return this.dofetchRequest(req, this.adaptor.options.addRecord);
      }
    };
    DataManager2.prototype.remove = function(keyField, value, tableName, query) {
      if (typeof value === "object") {
        value = DataUtil.getObject(keyField, value);
      }
      if (tableName instanceof Query) {
        query = tableName;
        tableName = null;
      }
      var res = this.adaptor.remove(this, keyField, value, tableName, query);
      var dofetchRequest = "dofetchRequest";
      if (this.dataSource.offline) {
        return res;
      }
      if (!isNullOrUndefined(this.adaptor[dofetchRequest])) {
        return this.adaptor[dofetchRequest](res);
      } else {
        var remove2 = this.adaptor.options.deleteRecord;
        return this.dofetchRequest(res, remove2);
      }
    };
    DataManager2.prototype.update = function(keyField, value, tableName, query, original) {
      if (tableName instanceof Query) {
        query = tableName;
        tableName = null;
      }
      if (this.isEnableCache) {
        this.cacheQuery = this.generateKey(this.dataSource.url, query);
      }
      var res = this.adaptor.update(this, keyField, value, tableName, query, original);
      var dofetchRequest = "dofetchRequest";
      if (this.dataSource.offline) {
        return res;
      }
      if (!isNullOrUndefined(this.adaptor[dofetchRequest])) {
        return this.adaptor[dofetchRequest](res);
      } else {
        var update = this.adaptor.options.updateRecord;
        return this.dofetchRequest(res, update);
      }
    };
    DataManager2.prototype.isCustomDataAdaptor = function(dataSource) {
      return this.adaptor.getModuleName && this.adaptor.getModuleName() === "CustomDataAdaptor";
    };
    DataManager2.prototype.isGraphQLAdaptor = function(dataSource) {
      return this.adaptor.getModuleName && this.adaptor.getModuleName() === "GraphQLAdaptor";
    };
    DataManager2.prototype.successFunc = function(record, request, changes) {
      if (this.isGraphQLAdaptor(this.adaptor)) {
        var data = typeof record === "object" ? record : JSON.parse(record);
        if (!isNullOrUndefined(data["errors"])) {
          this.failureFunc(JSON.stringify(data["errors"]));
        }
      }
      if (this.isCustomDataAdaptor(this.adaptor)) {
        request = extend({}, this.fetchReqOption, request);
      }
      try {
        DataUtil.parse.parseJson(record);
      } catch (e) {
        record = [];
      }
      if (this.isEnableCache) {
        var requests = JSON.parse(request.data);
        if (requests.action === "insert" || requests.action === "remove") {
          var obj = {
            keys: [],
            results: []
          };
          window.localStorage.setItem(this.guidId, JSON.stringify(obj));
        } else if (requests.action === "update") {
          var cachedItems = JSON.parse(window.localStorage.getItem(this.guidId));
          var data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(this.cacheQuery)] : null;
          if (data && data.result) {
            var cacheData = data.result;
            for (var i = 0; i < cacheData.length; i++) {
              if (cacheData[i][requests.keyColumn] === requests.key) {
                cacheData[i] = requests.value;
                window.localStorage.setItem(this.guidId, JSON.stringify(cachedItems));
                break;
              }
            }
          }
        }
      }
      record = this.adaptor.processResponse(DataUtil.parse.parseJson(record), this, null, request.fetchRequest, request, changes);
      this.fetchDeffered.resolve(record);
    };
    DataManager2.prototype.failureFunc = function(e) {
      if (this.isEnableCache) {
        this.cacheQuery = "";
      }
      this.fetchDeffered.reject([{
        error: e
      }]);
    };
    DataManager2.prototype.dofetchRequest = function(res, fetchFunc, changes) {
      var _this = this;
      res = extend({}, {
        type: "POST",
        contentType: "application/json; charset=utf-8",
        processData: false
      }, res);
      this.fetchDeffered = new Deferred();
      if (!this.isCustomDataAdaptor(this.adaptor)) {
        var fetch_3 = new Fetch(res);
        fetch_3.beforeSend = function() {
          _this.beforeSend(fetch_3.fetchRequest, fetch_3);
        };
        fetch_3.onSuccess = this.successFunc.bind(this);
        fetch_3.onFailure = this.failureFunc.bind(this);
        fetch_3.send().catch(function(e) {
          return true;
        });
      } else {
        this.fetchReqOption = res;
        fetchFunc.call(this, {
          data: res.data,
          onSuccess: this.successFunc.bind(this),
          onFailure: this.failureFunc.bind(this),
          changes
        });
      }
      return this.fetchDeffered.promise;
    };
    DataManager2.prototype.clearPersistence = function() {
      window.removeEventListener("unload", this.setPersistData.bind(this));
      this.dataSource.enablePersistence = false;
      this.persistQuery = {};
      window.localStorage.setItem(this.dataSource.id, "[]");
    };
    return DataManager2;
  }()
);
var Deferred = (
  /** @class */
  /* @__PURE__ */ function() {
    function Deferred3() {
      var _this = this;
      this.promise = new Promise(function(resolve, reject) {
        _this.resolve = resolve;
        _this.reject = reject;
      });
      this.then = this.promise.then.bind(this.promise);
      this.catch = this.promise.catch.bind(this.promise);
    }
    return Deferred3;
  }()
);

// node_modules/@syncfusion/ej2-data/src/util.js
var consts2 = {
  GroupGuid: "{271bbba0-1ee7}"
};
var DataUtil = (
  /** @class */
  function() {
    function DataUtil2() {
    }
    DataUtil2.getValue = function(value, inst) {
      if (typeof value === "function") {
        return value.call(inst || {});
      }
      return value;
    };
    DataUtil2.endsWith = function(input, substr) {
      return input.slice && input.slice(-substr.length) === substr;
    };
    DataUtil2.notEndsWith = function(input, substr) {
      return input.slice && input.slice(-substr.length) !== substr;
    };
    DataUtil2.startsWith = function(input, start) {
      return input.slice(0, start.length) === start;
    };
    DataUtil2.notStartsWith = function(input, start) {
      return input.slice(0, start.length) !== start;
    };
    DataUtil2.wildCard = function(input, pattern) {
      var asteriskSplit;
      var optionalSplit;
      if (pattern.indexOf("[") !== -1) {
        pattern = pattern.split("[").join("[[]");
      }
      if (pattern.indexOf("(") !== -1) {
        pattern = pattern.split("(").join("[(]");
      }
      if (pattern.indexOf(")") !== -1) {
        pattern = pattern.split(")").join("[)]");
      }
      if (pattern.indexOf("\\") !== -1) {
        pattern = pattern.split("\\").join("[\\\\]");
      }
      if (pattern.indexOf("*") !== -1) {
        if (pattern.charAt(0) !== "*") {
          pattern = "^" + pattern;
        }
        if (pattern.charAt(pattern.length - 1) !== "*") {
          pattern = pattern + "$";
        }
        asteriskSplit = pattern.split("*");
        for (var i = 0; i < asteriskSplit.length; i++) {
          if (asteriskSplit[i].indexOf(".") === -1) {
            asteriskSplit[i] = asteriskSplit[i] + ".*";
          } else {
            asteriskSplit[i] = asteriskSplit[i] + "*";
          }
        }
        pattern = asteriskSplit.join("");
      }
      if (pattern.indexOf("%3f") !== -1 || pattern.indexOf("?") !== -1) {
        optionalSplit = pattern.indexOf("%3f") !== -1 ? pattern.split("%3f") : pattern.split("?");
        pattern = optionalSplit.join(".");
      }
      var regexPattern = new RegExp(pattern, "g");
      return regexPattern.test(input);
    };
    DataUtil2.like = function(input, pattern) {
      if (pattern.indexOf("%") !== -1) {
        if (pattern.charAt(0) === "%" && pattern.lastIndexOf("%") < 2) {
          pattern = pattern.substring(1, pattern.length);
          return DataUtil2.startsWith(DataUtil2.toLowerCase(input), DataUtil2.toLowerCase(pattern));
        } else if (pattern.charAt(pattern.length - 1) === "%" && pattern.indexOf("%") > pattern.length - 3) {
          pattern = pattern.substring(0, pattern.length - 1);
          return DataUtil2.endsWith(DataUtil2.toLowerCase(input), DataUtil2.toLowerCase(pattern));
        } else if (pattern.lastIndexOf("%") !== pattern.indexOf("%") && pattern.lastIndexOf("%") > pattern.indexOf("%") + 1) {
          pattern = pattern.substring(pattern.indexOf("%") + 1, pattern.lastIndexOf("%"));
          return input.indexOf(pattern) !== -1;
        } else {
          return input.indexOf(pattern) !== -1;
        }
      } else {
        return false;
      }
    };
    DataUtil2.fnSort = function(order) {
      order = order ? DataUtil2.toLowerCase(order) : "ascending";
      if (order === "ascending") {
        return this.fnAscending;
      }
      return this.fnDescending;
    };
    DataUtil2.fnAscending = function(x, y) {
      if (isNullOrUndefined(x) && isNullOrUndefined(y)) {
        return 0;
      }
      if (y === null || y === void 0) {
        return -1;
      }
      if (typeof x === "string") {
        return x.localeCompare(y);
      }
      if (x === null || x === void 0) {
        return 1;
      }
      return x - y;
    };
    DataUtil2.fnDescending = function(x, y) {
      if (isNullOrUndefined(x) && isNullOrUndefined(y)) {
        return 0;
      }
      if (y === null || y === void 0) {
        return 1;
      }
      if (typeof x === "string") {
        return x.localeCompare(y) * -1;
      }
      if (x === null || x === void 0) {
        return -1;
      }
      return y - x;
    };
    DataUtil2.extractFields = function(obj, fields) {
      var newObj = {};
      for (var i = 0; i < fields.length; i++) {
        newObj = this.setValue(fields[i], this.getObject(fields[i], obj), newObj);
      }
      return newObj;
    };
    DataUtil2.select = function(jsonArray, fields) {
      var newData = [];
      for (var i = 0; i < jsonArray.length; i++) {
        newData.push(this.extractFields(jsonArray[i], fields));
      }
      return newData;
    };
    DataUtil2.group = function(jsonArray, field, aggregates, level, groupDs, format, isLazyLoad) {
      level = level || 1;
      var jsonData = jsonArray;
      var guid = "GroupGuid";
      if (jsonData.GroupGuid === consts2[guid]) {
        var _loop_1 = function(j2) {
          if (!isNullOrUndefined(groupDs)) {
            var indx = -1;
            var temp = groupDs.filter(function(e) {
              return e.key === jsonData[j2].key;
            });
            indx = groupDs.indexOf(temp[0]);
            jsonData[j2].items = this_1.group(jsonData[j2].items, field, aggregates, jsonData.level + 1, groupDs[indx].items, format, isLazyLoad);
            jsonData[j2].count = groupDs[indx].count;
          } else {
            jsonData[j2].items = this_1.group(jsonData[j2].items, field, aggregates, jsonData.level + 1, null, format, isLazyLoad);
            jsonData[j2].count = jsonData[j2].items.length;
          }
        };
        var this_1 = this;
        for (var j = 0; j < jsonData.length; j++) {
          _loop_1(j);
        }
        jsonData.childLevels += 1;
        return jsonData;
      }
      var grouped = {};
      var groupedArray = [];
      groupedArray.GroupGuid = consts2[guid];
      groupedArray.level = level;
      groupedArray.childLevels = 0;
      groupedArray.records = jsonData;
      var _loop_2 = function(i2) {
        var val = this_2.getVal(jsonData, i2, field);
        if (!isNullOrUndefined(format)) {
          val = format(val, field);
        }
        if (!grouped[val]) {
          grouped[val] = {
            key: val,
            count: 0,
            items: [],
            aggregates: {},
            field
          };
          groupedArray.push(grouped[val]);
          if (!isNullOrUndefined(groupDs)) {
            var tempObj = groupDs.filter(function(e) {
              return e.key === grouped[val].key;
            });
            grouped[val].count = tempObj[0].count;
          }
        }
        grouped[val].count = !isNullOrUndefined(groupDs) ? grouped[val].count : grouped[val].count += 1;
        if (!isLazyLoad || isLazyLoad && aggregates.length) {
          grouped[val].items.push(jsonData[i2]);
        }
      };
      var this_2 = this;
      for (var i = 0; i < jsonData.length; i++) {
        _loop_2(i);
      }
      if (aggregates && aggregates.length) {
        var _loop_3 = function(i2) {
          var res = {};
          var fn = void 0;
          var aggs = aggregates;
          for (var j2 = 0; j2 < aggregates.length; j2++) {
            fn = DataUtil2.aggregates[aggregates[j2].type];
            if (!isNullOrUndefined(groupDs)) {
              var temp = groupDs.filter(function(e) {
                return e.key === groupedArray[i2].key;
              });
              if (fn) {
                res[aggs[j2].field + " - " + aggs[j2].type] = fn(temp[0].items, aggs[j2].field);
              }
            } else {
              if (fn) {
                res[aggs[j2].field + " - " + aggs[j2].type] = fn(groupedArray[i2].items, aggs[j2].field);
              }
            }
          }
          groupedArray[i2].aggregates = res;
        };
        for (var i = 0; i < groupedArray.length; i++) {
          _loop_3(i);
        }
      }
      if (isLazyLoad && groupedArray.length && aggregates.length) {
        for (var i = 0; i < groupedArray.length; i++) {
          groupedArray[i].items = [];
        }
      }
      return jsonData.length && groupedArray || jsonData;
    };
    DataUtil2.buildHierarchy = function(fKey, from, source, lookup, pKey) {
      var i;
      var grp = {};
      var temp;
      if (lookup.result) {
        lookup = lookup.result;
      }
      if (lookup.GroupGuid) {
        this.throwError("DataManager: Do not have support Grouping in hierarchy");
      }
      for (i = 0; i < lookup.length; i++) {
        var fKeyData = this.getObject(fKey, lookup[i]);
        temp = grp[fKeyData] || (grp[fKeyData] = []);
        temp.push(lookup[i]);
      }
      for (i = 0; i < source.length; i++) {
        var fKeyData = this.getObject(pKey || fKey, source[i]);
        source[i][from] = grp[fKeyData];
      }
    };
    DataUtil2.getFieldList = function(obj, fields, prefix) {
      if (prefix === void 0) {
        prefix = "";
      }
      if (fields === void 0 || fields === null) {
        return this.getFieldList(obj, [], prefix);
      }
      var copyObj = obj;
      var keys = Object.keys(obj);
      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var prop = keys_1[_i];
        if (typeof copyObj[prop] === "object" && !(copyObj[prop] instanceof Array)) {
          this.getFieldList(copyObj[prop], fields, prefix + prop + ".");
        } else {
          fields.push(prefix + prop);
        }
      }
      return fields;
    };
    DataUtil2.getObject = function(nameSpace, from) {
      if (!nameSpace) {
        return from;
      }
      if (!from) {
        return void 0;
      }
      if (nameSpace.indexOf(".") === -1) {
        if (!isNullOrUndefined(from[nameSpace])) {
          return from[nameSpace];
        } else {
          var lowerCaseNameSpace = nameSpace.charAt(0).toLowerCase() + nameSpace.slice(1);
          var upperCaseNameSpace = nameSpace.charAt(0).toUpperCase() + nameSpace.slice(1);
          if (!isNullOrUndefined(from[lowerCaseNameSpace])) {
            return from[lowerCaseNameSpace];
          } else if (!isNullOrUndefined(from[upperCaseNameSpace])) {
            return from[upperCaseNameSpace];
          } else {
            return null;
          }
        }
      }
      var value = from;
      var splits = nameSpace.split(".");
      for (var i = 0; i < splits.length; i++) {
        if (value == null) {
          break;
        }
        value = value[splits[i]];
        if (value === void 0) {
          var casing = splits[i].charAt(0).toUpperCase() + splits[i].slice(1);
          value = from[casing] || from[casing.charAt(0).toLowerCase() + casing.slice(1)] || null;
        }
        from = value;
      }
      return value;
    };
    DataUtil2.setValue = function(nameSpace, value, obj) {
      var keys = nameSpace.toString().split(".");
      var start = obj || {};
      var fromObj = start;
      var i;
      var length = keys.length;
      var key;
      for (i = 0; i < length; i++) {
        key = keys[i];
        if (i + 1 === length) {
          fromObj[key] = value === void 0 ? void 0 : value;
        } else if (isNullOrUndefined(fromObj[key])) {
          fromObj[key] = {};
        }
        fromObj = fromObj[key];
      }
      return start;
    };
    DataUtil2.sort = function(dataSource, field, comparer) {
      var _this = this;
      if (dataSource.length <= 1) {
        return dataSource;
      }
      return dataSource.slice().sort(function(a, b) {
        return comparer(_this.getVal([a], 0, field), _this.getVal([b], 0, field), a, b);
      });
    };
    DataUtil2.ignoreDiacritics = function(value) {
      if (typeof value !== "string") {
        return value;
      }
      var result = value.split("");
      var newValue = result.map(function(temp) {
        return temp in DataUtil2.diacritics ? DataUtil2.diacritics[temp] : temp;
      });
      return newValue.join("");
    };
    DataUtil2.ignoreDiacriticsForArrays = function(valueArray) {
      if (!Array.isArray(valueArray)) {
        return [];
      }
      return valueArray.map(function(item) {
        return DataUtil2.ignoreDiacritics(item);
      });
    };
    DataUtil2.merge = function(left, right, fieldName, comparer) {
      var result = [];
      var current;
      while (left.length > 0 || right.length > 0) {
        if (left.length > 0 && right.length > 0) {
          if (comparer) {
            current = comparer(this.getVal(left, 0, fieldName), this.getVal(right, 0, fieldName), left[0], right[0]) <= 0 ? left : right;
          } else {
            current = left[0][fieldName] < left[0][fieldName] ? left : right;
          }
        } else {
          current = left.length > 0 ? left : right;
        }
        result.push(current.shift());
      }
      return result;
    };
    DataUtil2.getVal = function(array, index, field) {
      return field ? this.getObject(field, array[index]) : array[index];
    };
    DataUtil2.toLowerCase = function(val) {
      if (isNullOrUndefined(val)) return "";
      if (typeof val === "string") return val.toLowerCase();
      if (val instanceof Date) return val.toString().toLowerCase();
      return val.toString();
    };
    DataUtil2.callAdaptorFunction = function(adaptor, fnName, param1, param2) {
      if (fnName in adaptor) {
        var res = adaptor[fnName](param1, param2);
        if (!isNullOrUndefined(res)) {
          param1 = res;
        }
      }
      return param1;
    };
    DataUtil2.getAddParams = function(adp, dm, query) {
      var req = {};
      DataUtil2.callAdaptorFunction(adp, "addParams", {
        dm,
        query,
        params: query ? query.params : [],
        reqParams: req
      });
      return req;
    };
    DataUtil2.isPlainObject = function(obj) {
      return !!obj && obj.constructor === Object;
    };
    DataUtil2.isCors = function() {
      var xhr = null;
      var request = "XMLHttpRequest";
      try {
        xhr = new window[request]();
      } catch (e) {
      }
      return !!xhr && "withCredentials" in xhr;
    };
    DataUtil2.getGuid = function(prefix) {
      var hexs = "0123456789abcdef";
      var rand;
      return (prefix || "") + "00000000-0000-4000-0000-000000000000".replace(/0/g, function(val, i) {
        if ("crypto" in window && "getRandomValues" in crypto) {
          var arr = new Uint8Array(1);
          window.crypto.getRandomValues(arr);
          rand = arr[0] % 16 | 0;
        } else {
          rand = Math.random() * 16 | 0;
        }
        return hexs[i === 19 ? rand & 3 | 8 : rand];
      });
    };
    DataUtil2.isNull = function(val) {
      return val === void 0 || val === null;
    };
    DataUtil2.getItemFromComparer = function(array, field, comparer) {
      var keyVal;
      var current;
      var key;
      var i = 0;
      var castRequired = typeof DataUtil2.getVal(array, 0, field) === "string";
      if (array.length) {
        while (isNullOrUndefined(keyVal) && i < array.length) {
          keyVal = DataUtil2.getVal(array, i, field);
          key = array[i++];
        }
      }
      for (; i < array.length; i++) {
        current = DataUtil2.getVal(array, i, field);
        if (isNullOrUndefined(current)) {
          continue;
        }
        if (castRequired) {
          keyVal = +keyVal;
          current = +current;
        }
        if (comparer(keyVal, current) > 0) {
          keyVal = current;
          key = array[i];
        }
      }
      return key;
    };
    DataUtil2.distinct = function(json, fieldName, requiresCompleteRecord) {
      requiresCompleteRecord = isNullOrUndefined(requiresCompleteRecord) ? false : requiresCompleteRecord;
      var result = [];
      var val;
      var tmp = {};
      json.forEach(function(data, index) {
        val = typeof json[index] === "object" ? DataUtil2.getVal(json, index, fieldName) : json[index];
        if (!(val in tmp)) {
          result.push(!requiresCompleteRecord ? val : json[index]);
          tmp[val] = 1;
        }
      });
      return result;
    };
    DataUtil2.processData = function(dm, records) {
      var query = this.prepareQuery(dm);
      var sampledata = new DataManager(records);
      if (dm.requiresCounts) {
        query.requiresCount();
      }
      var result = sampledata.executeLocal(query);
      var returnValue = {
        result: dm.requiresCounts ? result.result : result,
        count: result.count,
        aggregates: JSON.stringify(result.aggregates)
      };
      return dm.requiresCounts ? returnValue : result;
    };
    DataUtil2.prepareQuery = function(dm) {
      var _this = this;
      var query = new Query();
      if (dm.select) {
        query.select(dm.select);
      }
      if (dm.where) {
        var where = DataUtil2.parse.parseJson(dm.where);
        where.filter(function(pred) {
          if (isNullOrUndefined(pred.condition)) {
            query.where(pred.field, pred.operator, pred.value, pred.ignoreCase, pred.ignoreAccent);
          } else {
            var predicateList = [];
            if (pred.field) {
              predicateList.push(new Predicate(pred.field, pred.operator, pred.value, pred.ignoreCase, pred.ignoreAccent));
            } else {
              predicateList = predicateList.concat(_this.getPredicate(pred.predicates));
            }
            if (pred.condition === "or") {
              query.where(Predicate.or(predicateList));
            } else if (pred.condition === "and") {
              query.where(Predicate.and(predicateList));
            }
          }
        });
      }
      if (dm.search) {
        var search = DataUtil2.parse.parseJson(dm.search);
        search.filter(function(e) {
          return query.search(
            e.key,
            e.fields,
            e["operator"],
            // tslint:disable-next-line:no-string-literal
            e["ignoreCase"],
            e["ignoreAccent"]
          );
        });
      }
      if (dm.aggregates) {
        dm.aggregates.filter(function(e) {
          return query.aggregate(e.type, e.field);
        });
      }
      if (dm.sorted) {
        dm.sorted.filter(function(e) {
          return query.sortBy(e.name, e.direction);
        });
      }
      if (dm.skip) {
        query.skip(dm.skip);
      }
      if (dm.take) {
        query.take(dm.take);
      }
      if (dm.group) {
        dm.group.filter(function(grp) {
          return query.group(grp);
        });
      }
      return query;
    };
    DataUtil2.getPredicate = function(pred) {
      var mainPred = [];
      for (var i = 0; i < pred.length; i++) {
        var e = pred[i];
        if (e.field) {
          mainPred.push(new Predicate(e.field, e.operator, e.value, e.ignoreCase, e.ignoreAccent));
        } else {
          var childPred = [];
          var cpre = this.getPredicate(e.predicates);
          for (var _i = 0, _a = Object.keys(cpre); _i < _a.length; _i++) {
            var prop = _a[_i];
            childPred.push(cpre[prop]);
          }
          mainPred.push(e.condition === "or" ? Predicate.or(childPred) : Predicate.and(childPred));
        }
      }
      return mainPred;
    };
    DataUtil2.serverTimezoneOffset = null;
    DataUtil2.timeZoneHandling = true;
    DataUtil2.throwError = function(error) {
      try {
        throw new Error(error);
      } catch (e) {
        throw e.message + "\n" + e.stack;
      }
    };
    DataUtil2.aggregates = {
      /**
       * Calculate sum of the given field in the data.
       *
       * @param  {Object[]} ds
       * @param  {string} field
       */
      sum: function(ds, field) {
        var result = 0;
        var val;
        var castRequired = typeof DataUtil2.getVal(ds, 0, field) !== "number";
        for (var i = 0; i < ds.length; i++) {
          val = DataUtil2.getVal(ds, i, field);
          if (!isNaN(val) && val !== null) {
            if (castRequired) {
              val = +val;
            }
            result += val;
          }
        }
        return result;
      },
      /**
       * Calculate average value of the given field in the data.
       *
       * @param  {Object[]} ds
       * @param  {string} field
       */
      average: function(ds, field) {
        return DataUtil2.aggregates.sum(ds, field) / ds.length;
      },
      /**
       * Returns the min value of the data based on the field.
       *
       * @param  {Object[]} ds
       * @param  {string|Function} field
       */
      min: function(ds, field) {
        var comparer;
        if (typeof field === "function") {
          comparer = field;
          field = null;
        }
        return DataUtil2.getObject(field, DataUtil2.getItemFromComparer(ds, field, comparer || DataUtil2.fnAscending));
      },
      /**
       * Returns the max value of the data based on the field.
       *
       * @param  {Object[]} ds
       * @param  {string} field
       * @returns number
       */
      max: function(ds, field) {
        var comparer;
        if (typeof field === "function") {
          comparer = field;
          field = null;
        }
        return DataUtil2.getObject(field, DataUtil2.getItemFromComparer(ds, field, comparer || DataUtil2.fnDescending));
      },
      /**
       * Returns the total number of true value present in the data based on the given boolean field name.
       *
       * @param  {Object[]} ds
       * @param  {string} field
       */
      truecount: function(ds, field) {
        return new DataManager(ds).executeLocal(new Query().where(field, "equal", true, true)).length;
      },
      /**
       * Returns the total number of false value present in the data based on the given boolean field name.
       *
       * @param  {Object[]} ds
       * @param  {string} field
       */
      falsecount: function(ds, field) {
        return new DataManager(ds).executeLocal(new Query().where(field, "equal", false, true)).length;
      },
      /**
       * Returns the length of the given data.
       *
       * @param {Object[]} ds
       * @param {string} field?
       * @param field
       * @returns number
       */
      count: function(ds, field) {
        return ds.length;
      }
    };
    DataUtil2.operatorSymbols = {
      "<": "lessthan",
      ">": "greaterthan",
      "<=": "lessthanorequal",
      ">=": "greaterthanorequal",
      "==": "equal",
      "!=": "notequal",
      "*=": "contains",
      "$=": "endswith",
      "^=": "startswith"
    };
    DataUtil2.odBiOperator = {
      "<": " lt ",
      ">": " gt ",
      "<=": " le ",
      ">=": " ge ",
      "==": " eq ",
      "!=": " ne ",
      "lessthan": " lt ",
      "lessthanorequal": " le ",
      "greaterthan": " gt ",
      "greaterthanorequal": " ge ",
      "equal": " eq ",
      "notequal": " ne "
    };
    DataUtil2.odUniOperator = {
      "$=": "endswith",
      "^=": "startswith",
      "*=": "substringof",
      "endswith": "endswith",
      "startswith": "startswith",
      "contains": "substringof",
      "doesnotendwith": "not endswith",
      "doesnotstartwith": "not startswith",
      "doesnotcontain": "not substringof",
      "wildcard": "wildcard",
      "like": "like"
    };
    DataUtil2.odv4UniOperator = {
      "$=": "endswith",
      "^=": "startswith",
      "*=": "contains",
      "endswith": "endswith",
      "startswith": "startswith",
      "contains": "contains",
      "doesnotendwith": "not endswith",
      "doesnotstartwith": "not startswith",
      "doesnotcontain": "not contains",
      "wildcard": "wildcard",
      "like": "like"
    };
    DataUtil2.diacritics = {
      "Ⓐ": "A",
      "Ａ": "A",
      "À": "A",
      "Á": "A",
      "Â": "A",
      "Ầ": "A",
      "Ấ": "A",
      "Ẫ": "A",
      "Ẩ": "A",
      "Ã": "A",
      "Ā": "A",
      "Ă": "A",
      "Ằ": "A",
      "Ắ": "A",
      "Ẵ": "A",
      "Ẳ": "A",
      "Ȧ": "A",
      "Ǡ": "A",
      "Ä": "A",
      "Ǟ": "A",
      "Ả": "A",
      "Å": "A",
      "Ǻ": "A",
      "Ǎ": "A",
      "Ȁ": "A",
      "Ȃ": "A",
      "Ạ": "A",
      "Ậ": "A",
      "Ặ": "A",
      "Ḁ": "A",
      "Ą": "A",
      "Ⱥ": "A",
      "Ɐ": "A",
      "Ꜳ": "AA",
      "Æ": "AE",
      "Ǽ": "AE",
      "Ǣ": "AE",
      "Ꜵ": "AO",
      "Ꜷ": "AU",
      "Ꜹ": "AV",
      "Ꜻ": "AV",
      "Ꜽ": "AY",
      "Ⓑ": "B",
      "Ｂ": "B",
      "Ḃ": "B",
      "Ḅ": "B",
      "Ḇ": "B",
      "Ƀ": "B",
      "Ƃ": "B",
      "Ɓ": "B",
      "Ⓒ": "C",
      "Ｃ": "C",
      "Ć": "C",
      "Ĉ": "C",
      "Ċ": "C",
      "Č": "C",
      "Ç": "C",
      "Ḉ": "C",
      "Ƈ": "C",
      "Ȼ": "C",
      "Ꜿ": "C",
      "Ⓓ": "D",
      "Ｄ": "D",
      "Ḋ": "D",
      "Ď": "D",
      "Ḍ": "D",
      "Ḑ": "D",
      "Ḓ": "D",
      "Ḏ": "D",
      "Đ": "D",
      "Ƌ": "D",
      "Ɗ": "D",
      "Ɖ": "D",
      "Ꝺ": "D",
      "Ǳ": "DZ",
      "Ǆ": "DZ",
      "ǲ": "Dz",
      "ǅ": "Dz",
      "Ⓔ": "E",
      "Ｅ": "E",
      "È": "E",
      "É": "E",
      "Ê": "E",
      "Ề": "E",
      "Ế": "E",
      "Ễ": "E",
      "Ể": "E",
      "Ẽ": "E",
      "Ē": "E",
      "Ḕ": "E",
      "Ḗ": "E",
      "Ĕ": "E",
      "Ė": "E",
      "Ë": "E",
      "Ẻ": "E",
      "Ě": "E",
      "Ȅ": "E",
      "Ȇ": "E",
      "Ẹ": "E",
      "Ệ": "E",
      "Ȩ": "E",
      "Ḝ": "E",
      "Ę": "E",
      "Ḙ": "E",
      "Ḛ": "E",
      "Ɛ": "E",
      "Ǝ": "E",
      "Ⓕ": "F",
      "Ｆ": "F",
      "Ḟ": "F",
      "Ƒ": "F",
      "Ꝼ": "F",
      "Ⓖ": "G",
      "Ｇ": "G",
      "Ǵ": "G",
      "Ĝ": "G",
      "Ḡ": "G",
      "Ğ": "G",
      "Ġ": "G",
      "Ǧ": "G",
      "Ģ": "G",
      "Ǥ": "G",
      "Ɠ": "G",
      "Ꞡ": "G",
      "Ᵹ": "G",
      "Ꝿ": "G",
      "Ⓗ": "H",
      "Ｈ": "H",
      "Ĥ": "H",
      "Ḣ": "H",
      "Ḧ": "H",
      "Ȟ": "H",
      "Ḥ": "H",
      "Ḩ": "H",
      "Ḫ": "H",
      "Ħ": "H",
      "Ⱨ": "H",
      "Ⱶ": "H",
      "Ɥ": "H",
      "Ⓘ": "I",
      "Ｉ": "I",
      "Ì": "I",
      "Í": "I",
      "Î": "I",
      "Ĩ": "I",
      "Ī": "I",
      "Ĭ": "I",
      "İ": "I",
      "Ï": "I",
      "Ḯ": "I",
      "Ỉ": "I",
      "Ǐ": "I",
      "Ȉ": "I",
      "Ȋ": "I",
      "Ị": "I",
      "Į": "I",
      "Ḭ": "I",
      "Ɨ": "I",
      "Ⓙ": "J",
      "Ｊ": "J",
      "Ĵ": "J",
      "Ɉ": "J",
      "Ⓚ": "K",
      "Ｋ": "K",
      "Ḱ": "K",
      "Ǩ": "K",
      "Ḳ": "K",
      "Ķ": "K",
      "Ḵ": "K",
      "Ƙ": "K",
      "Ⱪ": "K",
      "Ꝁ": "K",
      "Ꝃ": "K",
      "Ꝅ": "K",
      "Ꞣ": "K",
      "Ⓛ": "L",
      "Ｌ": "L",
      "Ŀ": "L",
      "Ĺ": "L",
      "Ľ": "L",
      "Ḷ": "L",
      "Ḹ": "L",
      "Ļ": "L",
      "Ḽ": "L",
      "Ḻ": "L",
      "Ł": "L",
      "Ƚ": "L",
      "Ɫ": "L",
      "Ⱡ": "L",
      "Ꝉ": "L",
      "Ꝇ": "L",
      "Ꞁ": "L",
      "Ǉ": "LJ",
      "ǈ": "Lj",
      "Ⓜ": "M",
      "Ｍ": "M",
      "Ḿ": "M",
      "Ṁ": "M",
      "Ṃ": "M",
      "Ɱ": "M",
      "Ɯ": "M",
      "Ⓝ": "N",
      "Ｎ": "N",
      "Ǹ": "N",
      "Ń": "N",
      "Ñ": "N",
      "Ṅ": "N",
      "Ň": "N",
      "Ṇ": "N",
      "Ņ": "N",
      "Ṋ": "N",
      "Ṉ": "N",
      "Ƞ": "N",
      "Ɲ": "N",
      "Ꞑ": "N",
      "Ꞥ": "N",
      "Ǌ": "NJ",
      "ǋ": "Nj",
      "Ⓞ": "O",
      "Ｏ": "O",
      "Ò": "O",
      "Ó": "O",
      "Ô": "O",
      "Ồ": "O",
      "Ố": "O",
      "Ỗ": "O",
      "Ổ": "O",
      "Õ": "O",
      "Ṍ": "O",
      "Ȭ": "O",
      "Ṏ": "O",
      "Ō": "O",
      "Ṑ": "O",
      "Ṓ": "O",
      "Ŏ": "O",
      "Ȯ": "O",
      "Ȱ": "O",
      "Ö": "O",
      "Ȫ": "O",
      "Ỏ": "O",
      "Ő": "O",
      "Ǒ": "O",
      "Ȍ": "O",
      "Ȏ": "O",
      "Ơ": "O",
      "Ờ": "O",
      "Ớ": "O",
      "Ỡ": "O",
      "Ở": "O",
      "Ợ": "O",
      "Ọ": "O",
      "Ộ": "O",
      "Ǫ": "O",
      "Ǭ": "O",
      "Ø": "O",
      "Ǿ": "O",
      "Ɔ": "O",
      "Ɵ": "O",
      "Ꝋ": "O",
      "Ꝍ": "O",
      "Ƣ": "OI",
      "Ꝏ": "OO",
      "Ȣ": "OU",
      "Ⓟ": "P",
      "Ｐ": "P",
      "Ṕ": "P",
      "Ṗ": "P",
      "Ƥ": "P",
      "Ᵽ": "P",
      "Ꝑ": "P",
      "Ꝓ": "P",
      "Ꝕ": "P",
      "Ⓠ": "Q",
      "Ｑ": "Q",
      "Ꝗ": "Q",
      "Ꝙ": "Q",
      "Ɋ": "Q",
      "Ⓡ": "R",
      "Ｒ": "R",
      "Ŕ": "R",
      "Ṙ": "R",
      "Ř": "R",
      "Ȑ": "R",
      "Ȓ": "R",
      "Ṛ": "R",
      "Ṝ": "R",
      "Ŗ": "R",
      "Ṟ": "R",
      "Ɍ": "R",
      "Ɽ": "R",
      "Ꝛ": "R",
      "Ꞧ": "R",
      "Ꞃ": "R",
      "Ⓢ": "S",
      "Ｓ": "S",
      "ẞ": "S",
      "Ś": "S",
      "Ṥ": "S",
      "Ŝ": "S",
      "Ṡ": "S",
      "Š": "S",
      "Ṧ": "S",
      "Ṣ": "S",
      "Ṩ": "S",
      "Ș": "S",
      "Ş": "S",
      "Ȿ": "S",
      "Ꞩ": "S",
      "Ꞅ": "S",
      "Ⓣ": "T",
      "Ｔ": "T",
      "Ṫ": "T",
      "Ť": "T",
      "Ṭ": "T",
      "Ț": "T",
      "Ţ": "T",
      "Ṱ": "T",
      "Ṯ": "T",
      "Ŧ": "T",
      "Ƭ": "T",
      "Ʈ": "T",
      "Ⱦ": "T",
      "Ꞇ": "T",
      "Ꜩ": "TZ",
      "Ⓤ": "U",
      "Ｕ": "U",
      "Ù": "U",
      "Ú": "U",
      "Û": "U",
      "Ũ": "U",
      "Ṹ": "U",
      "Ū": "U",
      "Ṻ": "U",
      "Ŭ": "U",
      "Ü": "U",
      "Ǜ": "U",
      "Ǘ": "U",
      "Ǖ": "U",
      "Ǚ": "U",
      "Ủ": "U",
      "Ů": "U",
      "Ű": "U",
      "Ǔ": "U",
      "Ȕ": "U",
      "Ȗ": "U",
      "Ư": "U",
      "Ừ": "U",
      "Ứ": "U",
      "Ữ": "U",
      "Ử": "U",
      "Ự": "U",
      "Ụ": "U",
      "Ṳ": "U",
      "Ų": "U",
      "Ṷ": "U",
      "Ṵ": "U",
      "Ʉ": "U",
      "Ⓥ": "V",
      "Ｖ": "V",
      "Ṽ": "V",
      "Ṿ": "V",
      "Ʋ": "V",
      "Ꝟ": "V",
      "Ʌ": "V",
      "Ꝡ": "VY",
      "Ⓦ": "W",
      "Ｗ": "W",
      "Ẁ": "W",
      "Ẃ": "W",
      "Ŵ": "W",
      "Ẇ": "W",
      "Ẅ": "W",
      "Ẉ": "W",
      "Ⱳ": "W",
      "Ⓧ": "X",
      "Ｘ": "X",
      "Ẋ": "X",
      "Ẍ": "X",
      "Ⓨ": "Y",
      "Ｙ": "Y",
      "Ỳ": "Y",
      "Ý": "Y",
      "Ŷ": "Y",
      "Ỹ": "Y",
      "Ȳ": "Y",
      "Ẏ": "Y",
      "Ÿ": "Y",
      "Ỷ": "Y",
      "Ỵ": "Y",
      "Ƴ": "Y",
      "Ɏ": "Y",
      "Ỿ": "Y",
      "Ⓩ": "Z",
      "Ｚ": "Z",
      "Ź": "Z",
      "Ẑ": "Z",
      "Ż": "Z",
      "Ž": "Z",
      "Ẓ": "Z",
      "Ẕ": "Z",
      "Ƶ": "Z",
      "Ȥ": "Z",
      "Ɀ": "Z",
      "Ⱬ": "Z",
      "Ꝣ": "Z",
      "ⓐ": "a",
      "ａ": "a",
      "ẚ": "a",
      "à": "a",
      "á": "a",
      "â": "a",
      "ầ": "a",
      "ấ": "a",
      "ẫ": "a",
      "ẩ": "a",
      "ã": "a",
      "ā": "a",
      "ă": "a",
      "ằ": "a",
      "ắ": "a",
      "ẵ": "a",
      "ẳ": "a",
      "ȧ": "a",
      "ǡ": "a",
      "ä": "a",
      "ǟ": "a",
      "ả": "a",
      "å": "a",
      "ǻ": "a",
      "ǎ": "a",
      "ȁ": "a",
      "ȃ": "a",
      "ạ": "a",
      "ậ": "a",
      "ặ": "a",
      "ḁ": "a",
      "ą": "a",
      "ⱥ": "a",
      "ɐ": "a",
      "ꜳ": "aa",
      "æ": "ae",
      "ǽ": "ae",
      "ǣ": "ae",
      "ꜵ": "ao",
      "ꜷ": "au",
      "ꜹ": "av",
      "ꜻ": "av",
      "ꜽ": "ay",
      "ⓑ": "b",
      "ｂ": "b",
      "ḃ": "b",
      "ḅ": "b",
      "ḇ": "b",
      "ƀ": "b",
      "ƃ": "b",
      "ɓ": "b",
      "ⓒ": "c",
      "ｃ": "c",
      "ć": "c",
      "ĉ": "c",
      "ċ": "c",
      "č": "c",
      "ç": "c",
      "ḉ": "c",
      "ƈ": "c",
      "ȼ": "c",
      "ꜿ": "c",
      "ↄ": "c",
      "ⓓ": "d",
      "ｄ": "d",
      "ḋ": "d",
      "ď": "d",
      "ḍ": "d",
      "ḑ": "d",
      "ḓ": "d",
      "ḏ": "d",
      "đ": "d",
      "ƌ": "d",
      "ɖ": "d",
      "ɗ": "d",
      "ꝺ": "d",
      "ǳ": "dz",
      "ǆ": "dz",
      "ⓔ": "e",
      "ｅ": "e",
      "è": "e",
      "é": "e",
      "ê": "e",
      "ề": "e",
      "ế": "e",
      "ễ": "e",
      "ể": "e",
      "ẽ": "e",
      "ē": "e",
      "ḕ": "e",
      "ḗ": "e",
      "ĕ": "e",
      "ė": "e",
      "ë": "e",
      "ẻ": "e",
      "ě": "e",
      "ȅ": "e",
      "ȇ": "e",
      "ẹ": "e",
      "ệ": "e",
      "ȩ": "e",
      "ḝ": "e",
      "ę": "e",
      "ḙ": "e",
      "ḛ": "e",
      "ɇ": "e",
      "ɛ": "e",
      "ǝ": "e",
      "ⓕ": "f",
      "ｆ": "f",
      "ḟ": "f",
      "ƒ": "f",
      "ꝼ": "f",
      "ⓖ": "g",
      "ｇ": "g",
      "ǵ": "g",
      "ĝ": "g",
      "ḡ": "g",
      "ğ": "g",
      "ġ": "g",
      "ǧ": "g",
      "ģ": "g",
      "ǥ": "g",
      "ɠ": "g",
      "ꞡ": "g",
      "ᵹ": "g",
      "ꝿ": "g",
      "ⓗ": "h",
      "ｈ": "h",
      "ĥ": "h",
      "ḣ": "h",
      "ḧ": "h",
      "ȟ": "h",
      "ḥ": "h",
      "ḩ": "h",
      "ḫ": "h",
      "ẖ": "h",
      "ħ": "h",
      "ⱨ": "h",
      "ⱶ": "h",
      "ɥ": "h",
      "ƕ": "hv",
      "ⓘ": "i",
      "ｉ": "i",
      "ì": "i",
      "í": "i",
      "î": "i",
      "ĩ": "i",
      "ī": "i",
      "ĭ": "i",
      "ï": "i",
      "ḯ": "i",
      "ỉ": "i",
      "ǐ": "i",
      "ȉ": "i",
      "ȋ": "i",
      "ị": "i",
      "į": "i",
      "ḭ": "i",
      "ɨ": "i",
      "ı": "i",
      "ⓙ": "j",
      "ｊ": "j",
      "ĵ": "j",
      "ǰ": "j",
      "ɉ": "j",
      "ⓚ": "k",
      "ｋ": "k",
      "ḱ": "k",
      "ǩ": "k",
      "ḳ": "k",
      "ķ": "k",
      "ḵ": "k",
      "ƙ": "k",
      "ⱪ": "k",
      "ꝁ": "k",
      "ꝃ": "k",
      "ꝅ": "k",
      "ꞣ": "k",
      "ⓛ": "l",
      "ｌ": "l",
      "ŀ": "l",
      "ĺ": "l",
      "ľ": "l",
      "ḷ": "l",
      "ḹ": "l",
      "ļ": "l",
      "ḽ": "l",
      "ḻ": "l",
      "ſ": "l",
      "ł": "l",
      "ƚ": "l",
      "ɫ": "l",
      "ⱡ": "l",
      "ꝉ": "l",
      "ꞁ": "l",
      "ꝇ": "l",
      "ǉ": "lj",
      "ⓜ": "m",
      "ｍ": "m",
      "ḿ": "m",
      "ṁ": "m",
      "ṃ": "m",
      "ɱ": "m",
      "ɯ": "m",
      "ⓝ": "n",
      "ｎ": "n",
      "ǹ": "n",
      "ń": "n",
      "ñ": "n",
      "ṅ": "n",
      "ň": "n",
      "ṇ": "n",
      "ņ": "n",
      "ṋ": "n",
      "ṉ": "n",
      "ƞ": "n",
      "ɲ": "n",
      "ŉ": "n",
      "ꞑ": "n",
      "ꞥ": "n",
      "ǌ": "nj",
      "ⓞ": "o",
      "ｏ": "o",
      "ò": "o",
      "ó": "o",
      "ô": "o",
      "ồ": "o",
      "ố": "o",
      "ỗ": "o",
      "ổ": "o",
      "õ": "o",
      "ṍ": "o",
      "ȭ": "o",
      "ṏ": "o",
      "ō": "o",
      "ṑ": "o",
      "ṓ": "o",
      "ŏ": "o",
      "ȯ": "o",
      "ȱ": "o",
      "ö": "o",
      "ȫ": "o",
      "ỏ": "o",
      "ő": "o",
      "ǒ": "o",
      "ȍ": "o",
      "ȏ": "o",
      "ơ": "o",
      "ờ": "o",
      "ớ": "o",
      "ỡ": "o",
      "ở": "o",
      "ợ": "o",
      "ọ": "o",
      "ộ": "o",
      "ǫ": "o",
      "ǭ": "o",
      "ø": "o",
      "ǿ": "o",
      "ɔ": "o",
      "ꝋ": "o",
      "ꝍ": "o",
      "ɵ": "o",
      "ƣ": "oi",
      "ȣ": "ou",
      "ꝏ": "oo",
      "ⓟ": "p",
      "ｐ": "p",
      "ṕ": "p",
      "ṗ": "p",
      "ƥ": "p",
      "ᵽ": "p",
      "ꝑ": "p",
      "ꝓ": "p",
      "ꝕ": "p",
      "ⓠ": "q",
      "ｑ": "q",
      "ɋ": "q",
      "ꝗ": "q",
      "ꝙ": "q",
      "ⓡ": "r",
      "ｒ": "r",
      "ŕ": "r",
      "ṙ": "r",
      "ř": "r",
      "ȑ": "r",
      "ȓ": "r",
      "ṛ": "r",
      "ṝ": "r",
      "ŗ": "r",
      "ṟ": "r",
      "ɍ": "r",
      "ɽ": "r",
      "ꝛ": "r",
      "ꞧ": "r",
      "ꞃ": "r",
      "ⓢ": "s",
      "ｓ": "s",
      "ß": "s",
      "ś": "s",
      "ṥ": "s",
      "ŝ": "s",
      "ṡ": "s",
      "š": "s",
      "ṧ": "s",
      "ṣ": "s",
      "ṩ": "s",
      "ș": "s",
      "ş": "s",
      "ȿ": "s",
      "ꞩ": "s",
      "ꞅ": "s",
      "ẛ": "s",
      "ⓣ": "t",
      "ｔ": "t",
      "ṫ": "t",
      "ẗ": "t",
      "ť": "t",
      "ṭ": "t",
      "ț": "t",
      "ţ": "t",
      "ṱ": "t",
      "ṯ": "t",
      "ŧ": "t",
      "ƭ": "t",
      "ʈ": "t",
      "ⱦ": "t",
      "ꞇ": "t",
      "ꜩ": "tz",
      "ⓤ": "u",
      "ｕ": "u",
      "ù": "u",
      "ú": "u",
      "û": "u",
      "ũ": "u",
      "ṹ": "u",
      "ū": "u",
      "ṻ": "u",
      "ŭ": "u",
      "ü": "u",
      "ǜ": "u",
      "ǘ": "u",
      "ǖ": "u",
      "ǚ": "u",
      "ủ": "u",
      "ů": "u",
      "ű": "u",
      "ǔ": "u",
      "ȕ": "u",
      "ȗ": "u",
      "ư": "u",
      "ừ": "u",
      "ứ": "u",
      "ữ": "u",
      "ử": "u",
      "ự": "u",
      "ụ": "u",
      "ṳ": "u",
      "ų": "u",
      "ṷ": "u",
      "ṵ": "u",
      "ʉ": "u",
      "ⓥ": "v",
      "ｖ": "v",
      "ṽ": "v",
      "ṿ": "v",
      "ʋ": "v",
      "ꝟ": "v",
      "ʌ": "v",
      "ꝡ": "vy",
      "ⓦ": "w",
      "ｗ": "w",
      "ẁ": "w",
      "ẃ": "w",
      "ŵ": "w",
      "ẇ": "w",
      "ẅ": "w",
      "ẘ": "w",
      "ẉ": "w",
      "ⱳ": "w",
      "ⓧ": "x",
      "ｘ": "x",
      "ẋ": "x",
      "ẍ": "x",
      "ⓨ": "y",
      "ｙ": "y",
      "ỳ": "y",
      "ý": "y",
      "ŷ": "y",
      "ỹ": "y",
      "ȳ": "y",
      "ẏ": "y",
      "ÿ": "y",
      "ỷ": "y",
      "ẙ": "y",
      "ỵ": "y",
      "ƴ": "y",
      "ɏ": "y",
      "ỿ": "y",
      "ⓩ": "z",
      "ｚ": "z",
      "ź": "z",
      "ẑ": "z",
      "ż": "z",
      "ž": "z",
      "ẓ": "z",
      "ẕ": "z",
      "ƶ": "z",
      "ȥ": "z",
      "ɀ": "z",
      "ⱬ": "z",
      "ꝣ": "z",
      "Ά": "Α",
      "Έ": "Ε",
      "Ή": "Η",
      "Ί": "Ι",
      "Ϊ": "Ι",
      "Ό": "Ο",
      "Ύ": "Υ",
      "Ϋ": "Υ",
      "Ώ": "Ω",
      "ά": "α",
      "έ": "ε",
      "ή": "η",
      "ί": "ι",
      "ϊ": "ι",
      "ΐ": "ι",
      "ό": "ο",
      "ύ": "υ",
      "ϋ": "υ",
      "ΰ": "υ",
      "ω": "ω",
      "ς": "σ"
    };
    DataUtil2.fnOperators = {
      /**
       * Returns true when the actual input is equal to the given input.
       *
       * @param {string|number|boolean} actual
       * @param {string|number|boolean} expected
       * @param {boolean} ignoreCase?
       * @param {boolean} ignoreAccent?
       * @param ignoreCase
       * @param ignoreAccent
       */
      equal: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return DataUtil2.toLowerCase(actual) === DataUtil2.toLowerCase(expected);
        }
        return actual === expected;
      },
      /**
       * Returns true when the actual input is not equal to the given input.
       *
       * @param {string|number|boolean} actual
       * @param {string|number|boolean} expected
       * @param {boolean} ignoreCase?
       * @param ignoreCase
       * @param ignoreAccent
       */
      notequal: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        return !DataUtil2.fnOperators.equal(actual, expected, ignoreCase);
      },
      /**
       * Returns true when the actual input is less than to the given input.
       *
       * @param {string|number|boolean} actual
       * @param {string|number|boolean} expected
       * @param {boolean} ignoreCase?
       * @param ignoreCase
       */
      lessthan: function(actual, expected, ignoreCase) {
        if (ignoreCase) {
          return DataUtil2.toLowerCase(actual) < DataUtil2.toLowerCase(expected);
        }
        if (isNullOrUndefined(actual)) {
          actual = void 0;
        }
        return actual < expected;
      },
      /**
       * Returns true when the actual input is greater than to the given input.
       *
       * @param {string|number|boolean} actual
       * @param {string|number|boolean} expected
       * @param {boolean} ignoreCase?
       * @param ignoreCase
       */
      greaterthan: function(actual, expected, ignoreCase) {
        if (ignoreCase) {
          return DataUtil2.toLowerCase(actual) > DataUtil2.toLowerCase(expected);
        }
        return actual > expected;
      },
      /**
       * Returns true when the actual input is less than or equal to the given input.
       *
       * @param {string|number|boolean} actual
       * @param {string|number|boolean} expected
       * @param {boolean} ignoreCase?
       * @param ignoreCase
       */
      lessthanorequal: function(actual, expected, ignoreCase) {
        if (ignoreCase) {
          return DataUtil2.toLowerCase(actual) <= DataUtil2.toLowerCase(expected);
        }
        if (isNullOrUndefined(actual)) {
          actual = void 0;
        }
        return actual <= expected;
      },
      /**
       * Returns true when the actual input is greater than or equal to the given input.
       *
       * @param {string|number|boolean} actual
       * @param {string|number|boolean} expected
       * @param {boolean} ignoreCase?
       * @param ignoreCase
       */
      greaterthanorequal: function(actual, expected, ignoreCase) {
        if (ignoreCase) {
          return DataUtil2.toLowerCase(actual) >= DataUtil2.toLowerCase(expected);
        }
        if (isNullOrUndefined(actual)) {
          actual = void 0;
        }
        return actual >= expected;
      },
      /**
       * Returns true when the actual input contains the given string.
       *
       * @param {string|number} actual
       * @param {string|number} expected
       * @param {boolean} ignoreCase?
       * @param ignoreCase
       * @param ignoreAccent
       */
      contains: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) && DataUtil2.toLowerCase(actual).indexOf(DataUtil2.toLowerCase(expected)) !== -1;
        }
        return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) && actual.toString().indexOf(expected) !== -1;
      },
      /**
       * Returns true when the actual input not contains the given string.
       *
       * @param  {string|number} actual
       * @param  {string|number} expected
       * @param  {boolean} ignoreCase?
       */
      doesnotcontain: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) && DataUtil2.toLowerCase(actual).indexOf(DataUtil2.toLowerCase(expected)) === -1;
        }
        return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) && actual.toString().indexOf(expected) === -1;
      },
      /**
       * Returns true when the given input value is not null.
       *
       * @param  {string|number} actual
       * @returns boolean
       */
      isnotnull: function(actual) {
        return actual !== null && actual !== void 0;
      },
      /**
       * Returns true when the given input value is null.
       *
       * @param  {string|number} actual
       * @returns boolean
       */
      isnull: function(actual) {
        return actual === null || actual === void 0;
      },
      /**
       * Returns true when the actual input starts with the given string
       *
       * @param {string} actual
       * @param {string} expected
       * @param {boolean} ignoreCase?
       * @param ignoreCase
       * @param ignoreAccent
       */
      startswith: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return actual && expected && DataUtil2.startsWith(DataUtil2.toLowerCase(actual), DataUtil2.toLowerCase(expected));
        }
        return actual && expected && DataUtil2.startsWith(actual, expected);
      },
      /**
       * Returns true when the actual input not starts with the given string
       *
       * @param  {string} actual
       * @param  {string} expected
       * @param  {boolean} ignoreCase?
       */
      doesnotstartwith: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return actual && expected && DataUtil2.notStartsWith(DataUtil2.toLowerCase(actual), DataUtil2.toLowerCase(expected));
        }
        return actual && expected && DataUtil2.notStartsWith(actual, expected);
      },
      /**
       * Returns true when the actual input like with the given string.
       *
       * @param  {string} actual
       * @param  {string} expected
       * @param  {boolean} ignoreCase?
       */
      like: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return actual && expected && DataUtil2.like(DataUtil2.toLowerCase(actual), DataUtil2.toLowerCase(expected));
        }
        return actual && expected && DataUtil2.like(actual, expected);
      },
      /**
       * Returns true when the given input value is empty.
       *
       * @param  {string|number} actual
       * @returns boolean
       */
      isempty: function(actual) {
        return actual === void 0 || actual === "";
      },
      /**
       * Returns true when the given input value is not empty.
       *
       * @param  {string|number} actual
       * @returns boolean
       */
      isnotempty: function(actual) {
        return actual !== void 0 && actual !== "";
      },
      /**
       * Returns true when the actual input pattern(wildcard) matches with the given string.
       *
       * @param  {string|Date} actual
       * @param  {string} expected
       * @param  {boolean} ignoreCase?
       */
      wildcard: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return (actual || typeof actual === "boolean") && expected && typeof actual !== "object" && DataUtil2.wildCard(DataUtil2.toLowerCase(actual), DataUtil2.toLowerCase(expected));
        }
        return (actual || typeof actual === "boolean") && expected && DataUtil2.wildCard(actual, expected);
      },
      /**
       * Returns true when the actual input ends with the given string.
       *
       * @param {string} actual
       * @param {string} expected
       * @param {boolean} ignoreCase?
       * @param ignoreCase
       * @param ignoreAccent
       */
      endswith: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return actual && expected && DataUtil2.endsWith(DataUtil2.toLowerCase(actual), DataUtil2.toLowerCase(expected));
        }
        return actual && expected && DataUtil2.endsWith(actual, expected);
      },
      /**
       * Returns true when the actual input not ends with the given string.
       *
       * @param  {string} actual
       * @param  {string} expected
       * @param  {boolean} ignoreCase?
       */
      doesnotendwith: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return actual && expected && DataUtil2.notEndsWith(DataUtil2.toLowerCase(actual), DataUtil2.toLowerCase(expected));
        }
        return actual && expected && DataUtil2.notEndsWith(actual, expected);
      },
      /**
       * It will return the filter operator based on the filter symbol.
       *
       * @param  {string} operator
       * @hidden
       */
      processSymbols: function(operator) {
        var fnName = DataUtil2.operatorSymbols[operator];
        if (fnName) {
          var fn = DataUtil2.fnOperators[fnName];
          return fn;
        }
        return DataUtil2.throwError("Query - Process Operator : Invalid operator");
      },
      /**
       * It will return the valid filter operator based on the specified operators.
       *
       * @param  {string} operator
       * @hidden
       */
      processOperator: function(operator) {
        var fn = DataUtil2.fnOperators[operator];
        if (fn) {
          return fn;
        }
        return DataUtil2.fnOperators.processSymbols(operator);
      },
      /**
       * Checks if the specified value exists in the given array, with optional case and accent insensitivity.
       *
       * @param {string | number} actual - The value to check.
       * @param {Array<string | number>} expectedArray - The array to search within.
       * @param {boolean} [ignoreCase] - Whether to perform a case-insensitive comparison.
       * @param {boolean} [ignoreAccent] - Whether to ignore accents/diacritics.
       * @returns {boolean} `true` if the value is found, otherwise `false`.
       */
      in: function(actual, expectedArray, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expectedArray = DataUtil2.ignoreDiacriticsForArrays(expectedArray);
        }
        if (ignoreCase) {
          return !isNullOrUndefined(actual) && expectedArray && expectedArray.length > 0 && expectedArray.map(function(item) {
            return DataUtil2.toLowerCase(item);
          }).indexOf(DataUtil2.toLowerCase(actual)) > -1;
        }
        if (actual instanceof Date) {
          return !isNullOrUndefined(actual) && expectedArray && expectedArray.length > 0 && Array.isArray(expectedArray) && expectedArray.some(function(item) {
            return item instanceof Date && item.getTime() === actual.getTime();
          });
        }
        return !isNullOrUndefined(actual) && expectedArray && expectedArray.length > 0 && expectedArray.indexOf(actual) > -1;
      },
      /**
       * Checks if the specified value is not present in the given array, with optional case and accent insensitivity.
       *
       * @param {string | number} actual - The value to check.
       * @param {Array<string | number>} expectedArray - The array to search within.
       * @param {boolean} [ignoreCase] - Whether to perform a case-insensitive comparison.
       * @param {boolean} [ignoreAccent] - Whether to ignore accents/diacritics.
       * @returns {boolean} `true` if the value is not found, otherwise `false`.
       */
      notin: function(actual, expectedArray, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expectedArray = DataUtil2.ignoreDiacriticsForArrays(expectedArray);
        }
        if (ignoreCase) {
          return !isNullOrUndefined(actual) && expectedArray && expectedArray.length > 0 && expectedArray.map(function(item) {
            return DataUtil2.toLowerCase(item);
          }).indexOf(DataUtil2.toLowerCase(actual)) === -1;
        }
        if (actual instanceof Date) {
          return !isNullOrUndefined(actual) && expectedArray && expectedArray.length > 0 && Array.isArray(expectedArray) && expectedArray.every(function(item) {
            return !(item instanceof Date) || item.getTime() !== actual.getTime();
          });
        }
        return !isNullOrUndefined(actual) && expectedArray && expectedArray.length > 0 && expectedArray.indexOf(actual) === -1;
      }
    };
    DataUtil2.parse = {
      /**
       * Parse the given string to the plain JavaScript object.
       *
       * @param  {string|Object|Object[]} jsonText
       */
      parseJson: function(jsonText) {
        if (typeof jsonText === "string" && (/^[\s]*\[|^[\s]*\{(.)+:/g.test(jsonText) || jsonText.indexOf('"') === -1)) {
          jsonText = JSON.parse(jsonText, DataUtil2.parse.jsonReviver);
        } else if (jsonText instanceof Array) {
          DataUtil2.parse.iterateAndReviveArray(jsonText);
        } else if (typeof jsonText === "object" && jsonText !== null) {
          DataUtil2.parse.iterateAndReviveJson(jsonText);
        }
        return jsonText;
      },
      /**
       * It will perform on array of values.
       *
       * @param  {string[]|Object[]} array
       * @hidden
       */
      iterateAndReviveArray: function(array) {
        for (var i = 0; i < array.length; i++) {
          if (typeof array[i] === "object" && array[i] !== null) {
            DataUtil2.parse.iterateAndReviveJson(array[i]);
          } else if (typeof array[i] === "string" && (!/^[\s]*\[|^[\s]*\{(.)+:|\"/g.test(array[i]) || array[i].toString().indexOf('"') === -1)) {
            array[i] = DataUtil2.parse.jsonReviver("", array[i]);
          } else {
            array[i] = DataUtil2.parse.parseJson(array[i]);
          }
        }
      },
      /**
       * It will perform on JSON values
       *
       * @param  {JSON} json
       * @hidden
       */
      iterateAndReviveJson: function(json) {
        var value;
        var keys = Object.keys(json);
        for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
          var prop = keys_2[_i];
          if (DataUtil2.startsWith(prop, "__")) {
            continue;
          }
          value = json[prop];
          if (typeof value === "object") {
            if (value instanceof Array) {
              DataUtil2.parse.iterateAndReviveArray(value);
            } else if (value) {
              DataUtil2.parse.iterateAndReviveJson(value);
            }
          } else {
            json[prop] = DataUtil2.parse.jsonReviver(json[prop], value);
          }
        }
      },
      /**
       * It will perform on JSON values
       *
       * @param  {string} field
       * @param  {string|Date} value
       * @hidden
       */
      jsonReviver: function(field, value) {
        if (typeof value === "string") {
          var ms = /^\/Date\(([+-]?[0-9]+)([+-][0-9]{4})?\)\/$/.exec(value);
          var offSet = DataUtil2.timeZoneHandling ? DataUtil2.serverTimezoneOffset : null;
          if (ms) {
            return DataUtil2.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), offSet, true);
          } else if (/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*){1})([zZ]|([+\-])(\d\d):?(\d\d))?$/.test(value)) {
            var isUTC = value.indexOf("Z") > -1 || value.indexOf("z") > -1;
            var arr = value.split(/[^0-9.]/);
            if (isUTC) {
              if (arr[5].indexOf(".") > -1) {
                var secondsMs = arr[5].split(".");
                arr[5] = secondsMs[0];
                arr[6] = new Date(value).getUTCMilliseconds().toString();
              } else {
                arr[6] = "00";
              }
              value = DataUtil2.dateParse.toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5] ? arr[5] : "00", 10), parseInt(arr[6], 10)), DataUtil2.serverTimezoneOffset, false);
            } else {
              var utcFormat = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5] ? arr[5] : "00", 10));
              var hrs = parseInt(arr[6], 10);
              var mins = parseInt(arr[7], 10);
              if (isNaN(hrs) && isNaN(mins)) {
                return utcFormat;
              }
              if (value.indexOf("+") > -1) {
                utcFormat.setHours(utcFormat.getHours() - hrs, utcFormat.getMinutes() - mins);
              } else {
                utcFormat.setHours(utcFormat.getHours() + hrs, utcFormat.getMinutes() + mins);
              }
              value = DataUtil2.dateParse.toTimeZone(utcFormat, DataUtil2.serverTimezoneOffset, false);
            }
            if (DataUtil2.serverTimezoneOffset == null) {
              value = DataUtil2.dateParse.addSelfOffset(value);
            }
          }
        }
        return value;
      },
      /**
       * Check wheather the given value is JSON or not.
       *
       * @param  {Object[]} jsonData
       */
      isJson: function(jsonData) {
        if (typeof jsonData[0] === "string") {
          return jsonData;
        }
        return DataUtil2.parse.parseJson(jsonData);
      },
      /**
       * Checks wheather the given value is GUID or not.
       *
       * @param  {string} value
       */
      isGuid: function(value) {
        var regex2 = /[A-Fa-f0-9]{8}(?:-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}/i;
        var match = regex2.exec(value);
        return match != null;
      },
      /**
       * The method used to replace the value based on the type.
       *
       * @param  {Object} value
       * @param  {boolean} stringify
       * @hidden
       */
      replacer: function(value, stringify) {
        if (DataUtil2.isPlainObject(value)) {
          return DataUtil2.parse.jsonReplacer(value, stringify);
        }
        if (value instanceof Array) {
          return DataUtil2.parse.arrayReplacer(value);
        }
        if (value instanceof Date) {
          return DataUtil2.parse.jsonReplacer({
            val: value
          }, stringify).val;
        }
        return value;
      },
      /**
       * It will replace the JSON value.
       *
       * @param {string} key
       * @param {Object} val
       * @param stringify
       * @hidden
       */
      jsonReplacer: function(val, stringify) {
        var value;
        var keys = Object.keys(val);
        for (var _i = 0, keys_3 = keys; _i < keys_3.length; _i++) {
          var prop = keys_3[_i];
          value = val[prop];
          if (!(value instanceof Date)) {
            continue;
          }
          var d = value;
          if (DataUtil2.serverTimezoneOffset == null) {
            val[prop] = DataUtil2.dateParse.toTimeZone(d, null).toJSON();
          } else {
            d = new Date(+d + DataUtil2.serverTimezoneOffset * 36e5);
            val[prop] = DataUtil2.dateParse.toTimeZone(DataUtil2.dateParse.addSelfOffset(d), null).toJSON();
          }
        }
        return val;
      },
      /**
       * It will replace the Array of value.
       *
       * @param  {string} key
       * @param  {Object[]} val
       * @hidden
       */
      arrayReplacer: function(val) {
        for (var i = 0; i < val.length; i++) {
          if (DataUtil2.isPlainObject(val[i])) {
            val[i] = DataUtil2.parse.jsonReplacer(val[i]);
          } else if (val[i] instanceof Date) {
            val[i] = DataUtil2.parse.jsonReplacer({
              date: val[i]
            }).date;
          }
        }
        return val;
      },
      /**
       * It will replace the Date object with respective to UTC format value.
       *
       * @param  {string} key
       * @param  {any} value
       * @hidden
       */
      /* eslint-disable @typescript-eslint/no-explicit-any */
      /* tslint:disable-next-line:no-any */
      jsonDateReplacer: function(key, value) {
        if (key === "value" && value) {
          if (typeof value === "string") {
            var ms = /^\/Date\(([+-]?[0-9]+)([+-][0-9]{4})?\)\/$/.exec(value);
            if (ms) {
              value = DataUtil2.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), null, true);
            } else if (/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*){1})([zZ]|([+\-])(\d\d):?(\d\d))?$/.test(value)) {
              var arr = value.split(/[^0-9]/);
              value = DataUtil2.dateParse.toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), null, true);
            }
          }
          if (value instanceof Date) {
            value = DataUtil2.dateParse.addSelfOffset(value);
            if (DataUtil2.serverTimezoneOffset === null) {
              return DataUtil2.dateParse.toTimeZone(DataUtil2.dateParse.addSelfOffset(value), null).toJSON();
            } else {
              value = DataUtil2.dateParse.toTimeZone(value, value.getTimezoneOffset() / 60 - DataUtil2.serverTimezoneOffset, false);
              return value.toJSON();
            }
          }
        }
        return value;
      }
    };
    DataUtil2.dateParse = {
      addSelfOffset: function(input) {
        return new Date(+input - input.getTimezoneOffset() * 6e4);
      },
      toUTC: function(input) {
        return new Date(+input + input.getTimezoneOffset() * 6e4);
      },
      toTimeZone: function(input, offset, utc) {
        if (offset === null) {
          return input;
        }
        var unix = utc ? DataUtil2.dateParse.toUTC(input) : input;
        return new Date(+unix - offset * 36e5);
      },
      toLocalTime: function(input) {
        var datefn = input;
        var timeZone = -datefn.getTimezoneOffset();
        var differenceString = timeZone >= 0 ? "+" : "-";
        var localtimefn = function(num) {
          var norm = Math.floor(Math.abs(num));
          return (norm < 10 ? "0" : "") + norm;
        };
        var val = datefn.getFullYear() + "-" + localtimefn(datefn.getMonth() + 1) + "-" + localtimefn(datefn.getDate()) + "T" + localtimefn(datefn.getHours()) + ":" + localtimefn(datefn.getMinutes()) + ":" + localtimefn(datefn.getSeconds()) + differenceString + localtimefn(timeZone / 60) + ":" + localtimefn(timeZone % 60);
        return val;
      }
    };
    return DataUtil2;
  }()
);

// node_modules/@syncfusion/ej2-data/src/query.js
var Query = (
  /** @class */
  function() {
    function Query2(from) {
      this.subQuery = null;
      this.isChild = false;
      this.distincts = [];
      this.queries = [];
      this.key = "";
      this.fKey = "";
      if (typeof from === "string") {
        this.fromTable = from;
      } else if (from && from instanceof Array) {
        this.lookups = from;
      }
      this.expands = [];
      this.sortedColumns = [];
      this.groupedColumns = [];
      this.subQuery = null;
      this.isChild = false;
      this.params = [];
      this.lazyLoad = [];
      return this;
    }
    Object.defineProperty(Query2.prototype, "moduleName", {
      /** @hidden */
      get: function() {
        return "query";
      },
      enumerable: true,
      configurable: true
    });
    ;
    Query2.prototype.setKey = function(field) {
      this.key = field;
      return this;
    };
    Query2.prototype.using = function(dataManager) {
      this.dataManager = dataManager;
      return this;
    };
    Query2.prototype.execute = function(dataManager, done, fail, always) {
      dataManager = dataManager || this.dataManager;
      if (dataManager) {
        return dataManager.executeQuery(this, done, fail, always);
      }
      return DataUtil.throwError('Query - execute() : dataManager needs to be is set using "using" function or should be passed as argument');
    };
    Query2.prototype.executeLocal = function(dataManager) {
      dataManager = dataManager || this.dataManager;
      if (dataManager) {
        return dataManager.executeLocal(this);
      }
      return DataUtil.throwError('Query - executeLocal() : dataManager needs to be is set using "using" function or should be passed as argument');
    };
    Query2.prototype.clone = function() {
      var cloned = new Query2();
      cloned.queries = this.queries.slice(0);
      cloned.key = this.key;
      cloned.isChild = this.isChild;
      cloned.dataManager = this.dataManager;
      cloned.fromTable = this.fromTable;
      cloned.params = this.params.slice(0);
      cloned.expands = this.expands.slice(0);
      cloned.sortedColumns = this.sortedColumns.slice(0);
      cloned.groupedColumns = this.groupedColumns.slice(0);
      cloned.subQuerySelector = this.subQuerySelector;
      cloned.subQuery = this.subQuery;
      cloned.fKey = this.fKey;
      cloned.isCountRequired = this.isCountRequired;
      cloned.distincts = this.distincts.slice(0);
      cloned.lazyLoad = this.lazyLoad.slice(0);
      return cloned;
    };
    Query2.prototype.from = function(tableName) {
      this.fromTable = tableName;
      return this;
    };
    Query2.prototype.addParams = function(key, value) {
      if (typeof value === "function") {
        this.params.push({
          key,
          fn: value
        });
      } else {
        this.params.push({
          key,
          value
        });
      }
      return this;
    };
    Query2.prototype.distinct = function(fields) {
      if (typeof fields === "string") {
        this.distincts = [].slice.call([fields], 0);
      } else {
        this.distincts = fields.slice(0);
      }
      return this;
    };
    Query2.prototype.expand = function(tables) {
      if (typeof tables === "string") {
        this.expands = [].slice.call([tables], 0);
      } else {
        this.expands = tables.slice(0);
      }
      return this;
    };
    Query2.prototype.where = function(fieldName, operator, value, ignoreCase, ignoreAccent, matchCase) {
      operator = operator ? operator.toLowerCase() : null;
      var predicate = null;
      if (typeof fieldName === "string") {
        predicate = new Predicate(fieldName, operator, value, ignoreCase, ignoreAccent, matchCase);
      } else if (fieldName instanceof Predicate) {
        predicate = fieldName;
      }
      this.queries.push({
        fn: "onWhere",
        e: predicate
      });
      return this;
    };
    Query2.prototype.search = function(searchKey, fieldNames, operator, ignoreCase, ignoreAccent) {
      if (typeof fieldNames === "string") {
        fieldNames = [fieldNames];
      }
      if (!operator || operator === "none") {
        operator = "contains";
      }
      var comparer = DataUtil.fnOperators[operator];
      this.queries.push({
        fn: "onSearch",
        e: {
          fieldNames,
          operator,
          searchKey,
          ignoreCase,
          ignoreAccent,
          comparer
        }
      });
      return this;
    };
    Query2.prototype.sortBy = function(fieldName, comparer, isFromGroup) {
      return this.sortByForeignKey(fieldName, comparer, isFromGroup);
    };
    Query2.prototype.sortByForeignKey = function(fieldName, comparer, isFromGroup, direction) {
      var order = !isNullOrUndefined(direction) ? direction : "ascending";
      var sorts;
      var temp;
      if (typeof fieldName === "string" && DataUtil.endsWith(fieldName.toLowerCase(), " desc")) {
        fieldName = fieldName.replace(/ desc$/i, "");
        comparer = "descending";
      }
      if (!comparer || typeof comparer === "string") {
        order = comparer ? comparer.toLowerCase() : "ascending";
        comparer = DataUtil.fnSort(comparer);
      }
      if (isFromGroup) {
        sorts = Query2.filterQueries(this.queries, "onSortBy");
        for (var i = 0; i < sorts.length; i++) {
          temp = sorts[i].e.fieldName;
          if (typeof temp === "string") {
            if (temp === fieldName) {
              return this;
            }
          } else if (temp instanceof Array) {
            for (var j = 0; j < temp.length; j++) {
              if (temp[j] === fieldName || fieldName.toLowerCase() === temp[j] + " desc") {
                return this;
              }
            }
          }
        }
      }
      this.queries.push({
        fn: "onSortBy",
        e: {
          fieldName,
          comparer,
          direction: order
        }
      });
      return this;
    };
    Query2.prototype.sortByDesc = function(fieldName) {
      return this.sortBy(fieldName, "descending");
    };
    Query2.prototype.group = function(fieldName, fn, format) {
      this.sortBy(fieldName, null, true);
      this.queries.push({
        fn: "onGroup",
        e: {
          fieldName,
          comparer: fn ? fn : null,
          format: format ? format : null
        }
      });
      return this;
    };
    Query2.prototype.page = function(pageIndex, pageSize) {
      this.queries.push({
        fn: "onPage",
        e: {
          pageIndex,
          pageSize
        }
      });
      return this;
    };
    Query2.prototype.range = function(start, end) {
      this.queries.push({
        fn: "onRange",
        e: {
          start,
          end
        }
      });
      return this;
    };
    Query2.prototype.take = function(nos) {
      this.queries.push({
        fn: "onTake",
        e: {
          nos
        }
      });
      return this;
    };
    Query2.prototype.skip = function(nos) {
      this.queries.push({
        fn: "onSkip",
        e: {
          nos
        }
      });
      return this;
    };
    Query2.prototype.select = function(fieldNames) {
      if (typeof fieldNames === "string") {
        fieldNames = [].slice.call([fieldNames], 0);
      }
      this.queries.push({
        fn: "onSelect",
        e: {
          fieldNames
        }
      });
      return this;
    };
    Query2.prototype.hierarchy = function(query, selectorFn) {
      this.subQuerySelector = selectorFn;
      this.subQuery = query;
      return this;
    };
    Query2.prototype.foreignKey = function(key) {
      this.fKey = key;
      return this;
    };
    Query2.prototype.requiresCount = function() {
      this.isCountRequired = true;
      return this;
    };
    Query2.prototype.aggregate = function(type, field) {
      this.queries.push({
        fn: "onAggregates",
        e: {
          field,
          type
        }
      });
      return this;
    };
    Query2.filterQueries = function(queries, name) {
      return queries.filter(function(q) {
        return q.fn === name;
      });
    };
    Query2.filterQueryLists = function(queries, singles) {
      var filtered = queries.filter(function(q) {
        return singles.indexOf(q.fn) !== -1;
      });
      var res = {};
      for (var i = 0; i < filtered.length; i++) {
        if (!res[filtered[i].fn]) {
          res[filtered[i].fn] = filtered[i].e;
        }
      }
      return res;
    };
    return Query2;
  }()
);
var Predicate = (
  /** @class */
  function() {
    function Predicate2(field, operator, value, ignoreCase, ignoreAccent, matchCase) {
      if (ignoreCase === void 0) {
        ignoreCase = false;
      }
      this.ignoreAccent = false;
      this.isComplex = false;
      if (typeof field === "string") {
        this.field = field;
        this.operator = operator.toLowerCase();
        this.value = value;
        this.matchCase = matchCase;
        this.ignoreCase = ignoreCase;
        this.ignoreAccent = ignoreAccent;
        this.isComplex = false;
        this.comparer = DataUtil.fnOperators.processOperator(this.operator);
      } else if (field instanceof Predicate2 && value instanceof Predicate2 || value instanceof Array) {
        this.isComplex = true;
        this.condition = operator.toLowerCase();
        this.predicates = [field];
        this.matchCase = field.matchCase;
        this.ignoreCase = field.ignoreCase;
        this.ignoreAccent = field.ignoreAccent;
        if (value instanceof Array) {
          [].push.apply(this.predicates, value);
        } else {
          this.predicates.push(value);
        }
      }
      return this;
    }
    Predicate2.and = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return Predicate2.combinePredicates([].slice.call(args, 0), "and");
    };
    Predicate2.prototype.and = function(field, operator, value, ignoreCase, ignoreAccent) {
      return Predicate2.combine(this, field, operator, value, "and", ignoreCase, ignoreAccent);
    };
    Predicate2.or = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return Predicate2.combinePredicates([].slice.call(args, 0), "or");
    };
    Predicate2.prototype.or = function(field, operator, value, ignoreCase, ignoreAccent) {
      return Predicate2.combine(this, field, operator, value, "or", ignoreCase, ignoreAccent);
    };
    Predicate2.ornot = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return Predicate2.combinePredicates([].slice.call(args, 0), "or not");
    };
    Predicate2.prototype.ornot = function(field, operator, value, ignoreCase, ignoreAccent) {
      return Predicate2.combine(this, field, operator, value, "ornot", ignoreCase, ignoreAccent);
    };
    Predicate2.andnot = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return Predicate2.combinePredicates([].slice.call(args, 0), "and not");
    };
    Predicate2.prototype.andnot = function(field, operator, value, ignoreCase, ignoreAccent) {
      return Predicate2.combine(this, field, operator, value, "andnot", ignoreCase, ignoreAccent);
    };
    Predicate2.fromJson = function(json) {
      if (json instanceof Array) {
        var res = [];
        for (var i = 0, len = json.length; i < len; i++) {
          res.push(this.fromJSONData(json[i]));
        }
        return res;
      }
      var pred = json;
      return this.fromJSONData(pred);
    };
    Predicate2.prototype.validate = function(record) {
      var predicate = this.predicates ? this.predicates : [];
      var ret;
      var isAnd;
      if (!this.isComplex && this.comparer) {
        if (this.condition && this.condition.indexOf("not") !== -1) {
          this.condition = this.condition.split("not")[0] === "" ? void 0 : this.condition.split("not")[0];
          return !this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);
        } else {
          return this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);
        }
      }
      if (this.condition && this.condition.indexOf("not") !== -1) {
        isAnd = this.condition.indexOf("and") !== -1;
      } else {
        isAnd = this.condition === "and";
      }
      for (var i = 0; i < predicate.length; i++) {
        if (i > 0 && this.condition && this.condition.indexOf("not") !== -1) {
          predicate[i].condition = predicate[i].condition ? predicate[i].condition + "not" : "not";
        }
        ret = predicate[i].validate(record);
        if (isAnd) {
          if (!ret) {
            return false;
          }
        } else {
          if (ret) {
            return true;
          }
        }
      }
      return isAnd;
    };
    Predicate2.prototype.toJson = function() {
      var predicates;
      var p;
      if (this.isComplex) {
        predicates = [];
        p = this.predicates;
        for (var i = 0; i < p.length; i++) {
          predicates.push(p[i].toJson());
        }
      }
      return {
        isComplex: this.isComplex,
        field: this.field,
        operator: this.operator,
        value: this.value,
        ignoreCase: this.ignoreCase,
        ignoreAccent: this.ignoreAccent,
        condition: this.condition,
        predicates,
        matchCase: this.matchCase
      };
    };
    Predicate2.combinePredicates = function(predicates, operator) {
      if (predicates.length === 1) {
        if (!(predicates[0] instanceof Array)) {
          return predicates[0];
        }
        predicates = predicates[0];
      }
      return new Predicate2(predicates[0], operator, predicates.slice(1));
    };
    Predicate2.combine = function(pred, field, operator, value, condition, ignoreCase, ignoreAccent) {
      if (field instanceof Predicate2) {
        return Predicate2[condition](pred, field);
      }
      if (typeof field === "string") {
        return Predicate2[condition](pred, new Predicate2(field, operator, value, ignoreCase, ignoreAccent));
      }
      return DataUtil.throwError("Predicate - " + condition + " : invalid arguments");
    };
    Predicate2.fromJSONData = function(json) {
      var preds = json.predicates || [];
      var len = preds.length;
      var predicates = [];
      var result;
      for (var i = 0; i < len; i++) {
        predicates.push(this.fromJSONData(preds[i]));
      }
      if (!json.isComplex) {
        result = new Predicate2(json.field, json.operator, json.value, json.ignoreCase, json.ignoreAccent);
      } else {
        result = new Predicate2(predicates[0], json.condition, predicates.slice(1));
      }
      return result;
    };
    return Predicate2;
  }()
);

// node_modules/@syncfusion/ej2-popups/src/common/position.js
var elementRect;
var popupRect;
var element;
var parentDocument;
var fixedParent = false;
function calculateRelativeBasedPosition(anchor, element2) {
  var fixedElement = false;
  var anchorPos = {
    left: 0,
    top: 0
  };
  var tempAnchor = anchor;
  if (!anchor || !element2) {
    return anchorPos;
  }
  if (isNullOrUndefined(element2.offsetParent) && element2.style.position === "fixed") {
    fixedElement = true;
  }
  while ((element2.offsetParent || fixedElement) && anchor && element2.offsetParent !== anchor) {
    anchorPos.left += anchor.offsetLeft;
    anchorPos.top += anchor.offsetTop;
    anchor = anchor.offsetParent;
  }
  anchor = tempAnchor;
  while ((element2.offsetParent || fixedElement) && anchor && element2.offsetParent !== anchor) {
    anchorPos.left -= anchor.scrollLeft;
    anchorPos.top -= anchor.scrollTop;
    anchor = anchor.parentElement;
  }
  return anchorPos;
}
function calculatePosition(currentElement, positionX, positionY, parentElement, targetValues) {
  popupRect = void 0;
  popupRect = targetValues;
  fixedParent = parentElement ? true : false;
  if (!currentElement) {
    return {
      left: 0,
      top: 0
    };
  }
  if (!positionX) {
    positionX = "left";
  }
  if (!positionY) {
    positionY = "top";
  }
  parentDocument = currentElement.ownerDocument;
  element = currentElement;
  var pos = {
    left: 0,
    top: 0
  };
  return updatePosition(positionX.toLowerCase(), positionY.toLowerCase(), pos);
}
function setPosx(value, pos) {
  pos.left = value;
}
function setPosy(value, pos) {
  pos.top = value;
}
function updatePosition(posX, posY, pos) {
  elementRect = element.getBoundingClientRect();
  switch (posY + posX) {
    case "topcenter":
      setPosx(getElementHCenter(), pos);
      setPosy(getElementTop(), pos);
      break;
    case "topright":
      setPosx(getElementRight(), pos);
      setPosy(getElementTop(), pos);
      break;
    case "centercenter":
      setPosx(getElementHCenter(), pos);
      setPosy(getElementVCenter(), pos);
      break;
    case "centerright":
      setPosx(getElementRight(), pos);
      setPosy(getElementVCenter(), pos);
      break;
    case "centerleft":
      setPosx(getElementLeft(), pos);
      setPosy(getElementVCenter(), pos);
      break;
    case "bottomcenter":
      setPosx(getElementHCenter(), pos);
      setPosy(getElementBottom(), pos);
      break;
    case "bottomright":
      setPosx(getElementRight(), pos);
      setPosy(getElementBottom(), pos);
      break;
    case "bottomleft":
      setPosx(getElementLeft(), pos);
      setPosy(getElementBottom(), pos);
      break;
    default:
    case "topleft":
      setPosx(getElementLeft(), pos);
      setPosy(getElementTop(), pos);
      break;
  }
  element = null;
  return pos;
}
function getBodyScrollTop() {
  return parentDocument.documentElement.scrollTop || parentDocument.body.scrollTop;
}
function getBodyScrollLeft() {
  return parentDocument.documentElement.scrollLeft || parentDocument.body.scrollLeft;
}
function getElementBottom() {
  return fixedParent ? elementRect.bottom : elementRect.bottom + getBodyScrollTop();
}
function getElementVCenter() {
  return getElementTop() + elementRect.height / 2;
}
function getElementTop() {
  return fixedParent ? elementRect.top : elementRect.top + getBodyScrollTop();
}
function getElementLeft() {
  return elementRect.left + getBodyScrollLeft();
}
function getElementRight() {
  var popupWidth = element && ((element.classList.contains("e-date-wrapper") || element.classList.contains("e-datetime-wrapper")) && element.classList.contains("e-rtl") || element.classList.contains("e-ddl") && element.classList.contains("e-rtl") || element.classList.contains("e-date-range-wrapper")) ? popupRect ? popupRect.width : 0 : popupRect && elementRect.width >= popupRect.width ? popupRect.width : 0;
  if (element && element.classList.contains("e-rtl") && element.classList.contains("e-multiselect")) {
    popupWidth = popupRect.width;
  }
  return elementRect.right + getBodyScrollLeft() - popupWidth;
}
function getElementHCenter() {
  return getElementLeft() + elementRect.width / 2;
}

// node_modules/@syncfusion/ej2-popups/src/common/collision.js
var parentDocument2;
var targetContainer;
function fit(element2, viewPortElement, axis, position) {
  if (viewPortElement === void 0) {
    viewPortElement = null;
  }
  if (axis === void 0) {
    axis = {
      X: false,
      Y: false
    };
  }
  if (!axis.Y && !axis.X) {
    return {
      left: 0,
      top: 0
    };
  }
  var elemData = element2.getBoundingClientRect();
  targetContainer = viewPortElement;
  parentDocument2 = element2.ownerDocument;
  if (!position) {
    position = calculatePosition(element2, "left", "top");
  }
  if (axis.X) {
    var containerWidth = targetContainer ? getTargetContainerWidth() : getViewPortWidth();
    var containerLeft = ContainerLeft();
    var containerRight = ContainerRight();
    var overLeft = containerLeft - position.left;
    var overRight = position.left + elemData.width - containerRight;
    if (elemData.width > containerWidth) {
      if (overLeft > 0 && overRight <= 0) {
        position.left = containerRight - elemData.width;
      } else if (overRight > 0 && overLeft <= 0) {
        position.left = containerLeft;
      } else {
        position.left = overLeft > overRight ? containerRight - elemData.width : containerLeft;
      }
    } else if (overLeft > 0) {
      position.left += overLeft;
    } else if (overRight > 0) {
      position.left -= overRight;
    }
  }
  if (axis.Y) {
    var containerHeight = targetContainer ? getTargetContainerHeight() : getViewPortHeight();
    var containerTop = ContainerTop();
    var containerBottom = ContainerBottom();
    var overTop = containerTop - position.top;
    var overBottom = position.top + elemData.height - containerBottom;
    if (elemData.height > containerHeight) {
      if (overTop > 0 && overBottom <= 0) {
        position.top = containerBottom - elemData.height;
      } else if (overBottom > 0 && overTop <= 0) {
        position.top = containerTop;
      } else {
        position.top = overTop > overBottom ? containerBottom - elemData.height : containerTop;
      }
    } else if (overTop > 0) {
      position.top += overTop;
    } else if (overBottom > 0) {
      position.top -= overBottom;
    }
  }
  return position;
}
function isCollide(element2, viewPortElement, x, y) {
  if (viewPortElement === void 0) {
    viewPortElement = null;
  }
  var elemOffset = calculatePosition(element2, "left", "top");
  if (x) {
    elemOffset.left = x;
  }
  if (y) {
    elemOffset.top = y;
  }
  var data = [];
  targetContainer = viewPortElement;
  parentDocument2 = element2.ownerDocument;
  var elementRect2 = element2.getBoundingClientRect();
  var top = elemOffset.top;
  var left = elemOffset.left;
  var right = elemOffset.left + elementRect2.width;
  var bottom = elemOffset.top + elementRect2.height;
  var yAxis = topCollideCheck(top, bottom);
  var xAxis = leftCollideCheck(left, right);
  if (yAxis.topSide) {
    data.push("top");
  }
  if (xAxis.rightSide) {
    data.push("right");
  }
  if (xAxis.leftSide) {
    data.push("left");
  }
  if (yAxis.bottomSide) {
    data.push("bottom");
  }
  return data;
}
function flip(element2, target, offsetX, offsetY, positionX, positionY, viewPortElement, axis, fixedParent2) {
  if (viewPortElement === void 0) {
    viewPortElement = null;
  }
  if (axis === void 0) {
    axis = {
      X: true,
      Y: true
    };
  }
  if (!target || !element2 || !positionX || !positionY || !axis.X && !axis.Y) {
    return;
  }
  var tEdge = {
    TL: null,
    TR: null,
    BL: null,
    BR: null
  }, eEdge = {
    TL: null,
    TR: null,
    BL: null,
    BR: null
    /* eslint-enable */
  };
  var elementRect2;
  if (window.getComputedStyle(element2).display === "none") {
    var oldVisibility = element2.style.visibility;
    element2.style.visibility = "hidden";
    element2.style.display = "block";
    elementRect2 = element2.getBoundingClientRect();
    element2.style.removeProperty("display");
    element2.style.visibility = oldVisibility;
  } else {
    elementRect2 = element2.getBoundingClientRect();
  }
  var pos = {
    posX: positionX,
    posY: positionY,
    offsetX,
    offsetY,
    position: {
      left: 0,
      top: 0
    }
  };
  targetContainer = viewPortElement;
  parentDocument2 = target.ownerDocument;
  updateElementData(target, tEdge, pos, fixedParent2, elementRect2);
  setPosition(eEdge, pos, elementRect2);
  if (axis.X) {
    leftFlip(target, eEdge, tEdge, pos, elementRect2, true);
  }
  if (axis.Y && tEdge.TL.top > -1) {
    topFlip(target, eEdge, tEdge, pos, elementRect2, true);
  }
  setPopup(element2, pos, elementRect2);
}
function setPopup(element2, pos, elementRect2) {
  var left = 0;
  var top = 0;
  if (element2.offsetParent != null && (getComputedStyle(element2.offsetParent).position === "absolute" || getComputedStyle(element2.offsetParent).position === "relative")) {
    var data = calculatePosition(element2.offsetParent, "left", "top", false, elementRect2);
    left = data.left;
    top = data.top;
  }
  var scaleX = 1;
  var scaleY = 1;
  var tranformElement = getTransformElement(element2);
  if (tranformElement) {
    var transformStyle = getComputedStyle(tranformElement).transform;
    if (transformStyle !== "none") {
      var matrix = new DOMMatrix(transformStyle);
      scaleX = matrix.a;
      scaleY = matrix.d;
    }
    var zoomStyle = getComputedStyle(tranformElement).zoom;
    if (zoomStyle !== "none") {
      var bodyZoom = getZoomValue(document.body);
      scaleX = bodyZoom * scaleX;
      scaleY = bodyZoom * scaleY;
    }
  }
  element2.style.top = pos.position.top / scaleY + pos.offsetY - top / scaleY + "px";
  element2.style.left = pos.position.left / scaleX + pos.offsetX - left / scaleX + "px";
}
function getZoomValue(element2) {
  var zoomValue = getComputedStyle(element2).zoom;
  return parseFloat(zoomValue) || 1;
}
function getTransformElement(element2) {
  while (element2) {
    var transform = window.getComputedStyle(element2).transform;
    var zoom = getZoomValue(document.body);
    if (transform && transform !== "none" || zoom && zoom !== 1) {
      return element2;
    }
    if (element2 === document.body) {
      return null;
    }
    element2 = element2.offsetParent || element2.parentElement;
  }
  return null;
}
function updateElementData(target, edge, pos, fixedParent2, elementRect2) {
  pos.position = calculatePosition(target, pos.posX, pos.posY, fixedParent2, elementRect2);
  edge.TL = calculatePosition(target, "left", "top", fixedParent2, elementRect2);
  edge.TR = calculatePosition(target, "right", "top", fixedParent2, elementRect2);
  edge.BR = calculatePosition(target, "left", "bottom", fixedParent2, elementRect2);
  edge.BL = calculatePosition(target, "right", "bottom", fixedParent2, elementRect2);
}
function setPosition(eStatus, pos, elementRect2) {
  eStatus.TL = {
    top: pos.position.top + pos.offsetY,
    left: pos.position.left + pos.offsetX
  };
  eStatus.TR = {
    top: eStatus.TL.top,
    left: eStatus.TL.left + elementRect2.width
  };
  eStatus.BL = {
    top: eStatus.TL.top + elementRect2.height,
    left: eStatus.TL.left
  };
  eStatus.BR = {
    top: eStatus.TL.top + elementRect2.height,
    left: eStatus.TL.left + elementRect2.width
  };
}
function leftCollideCheck(left, right) {
  var leftSide = false, rightSide = false;
  if (left - getBodyScrollLeft2() < ContainerLeft()) {
    leftSide = true;
  }
  if (right > ContainerRight()) {
    rightSide = true;
  }
  return {
    leftSide,
    rightSide
  };
}
function leftFlip(target, edge, tEdge, pos, elementRect2, deepCheck) {
  var collideSide = leftCollideCheck(edge.TL.left, edge.TR.left);
  if (tEdge.TL.left - getBodyScrollLeft2() <= ContainerLeft()) {
    collideSide.leftSide = false;
  }
  if (tEdge.TR.left > ContainerRight()) {
    collideSide.rightSide = false;
  }
  if (collideSide.leftSide && !collideSide.rightSide || !collideSide.leftSide && collideSide.rightSide) {
    if (pos.posX === "right") {
      pos.posX = "left";
    } else {
      pos.posX = "right";
    }
    pos.offsetX = pos.offsetX + elementRect2.width;
    pos.offsetX = -1 * pos.offsetX;
    pos.position = calculatePosition(target, pos.posX, pos.posY, false);
    setPosition(edge, pos, elementRect2);
    if (deepCheck) {
      leftFlip(target, edge, tEdge, pos, elementRect2, false);
    }
  }
}
function topFlip(target, edge, tEdge, pos, elementRect2, deepCheck) {
  var collideSide = topCollideCheck(edge.TL.top, edge.BL.top);
  if (tEdge.TL.top - getBodyScrollTop2() <= ContainerTop()) {
    collideSide.topSide = false;
  }
  if (tEdge.BL.top >= ContainerBottom() && target.getBoundingClientRect().bottom < window.innerHeight) {
    collideSide.bottomSide = false;
  }
  if (collideSide.topSide && !collideSide.bottomSide || !collideSide.topSide && collideSide.bottomSide) {
    if (pos.posY === "top") {
      pos.posY = "bottom";
    } else {
      pos.posY = "top";
    }
    pos.offsetY = pos.offsetY + elementRect2.height;
    pos.offsetY = -1 * pos.offsetY;
    pos.position = calculatePosition(target, pos.posX, pos.posY, false, elementRect2);
    setPosition(edge, pos, elementRect2);
    if (deepCheck) {
      topFlip(target, edge, tEdge, pos, elementRect2, false);
    }
  }
}
function topCollideCheck(top, bottom) {
  var topSide = false, bottomSide = false;
  if (top - getBodyScrollTop2() < ContainerTop()) {
    topSide = true;
  }
  if (bottom > ContainerBottom()) {
    bottomSide = true;
  }
  return {
    topSide,
    bottomSide
  };
}
function getTargetContainerWidth() {
  return targetContainer.getBoundingClientRect().width;
}
function getTargetContainerHeight() {
  return targetContainer.getBoundingClientRect().height;
}
function getTargetContainerLeft() {
  return targetContainer.getBoundingClientRect().left;
}
function getTargetContainerTop() {
  return targetContainer.getBoundingClientRect().top;
}
function ContainerTop() {
  if (targetContainer) {
    return getTargetContainerTop();
  }
  return 0;
}
function ContainerLeft() {
  if (targetContainer) {
    return getTargetContainerLeft();
  }
  return 0;
}
function ContainerRight() {
  if (targetContainer) {
    return getBodyScrollLeft2() + getTargetContainerLeft() + getTargetContainerWidth();
  }
  return getBodyScrollLeft2() + getViewPortWidth();
}
function ContainerBottom() {
  if (targetContainer) {
    return getBodyScrollTop2() + getTargetContainerTop() + getTargetContainerHeight();
  }
  return getBodyScrollTop2() + getViewPortHeight();
}
function getBodyScrollTop2() {
  return parentDocument2.documentElement.scrollTop || parentDocument2.body.scrollTop;
}
function getBodyScrollLeft2() {
  return parentDocument2.documentElement.scrollLeft || parentDocument2.body.scrollLeft;
}
function getViewPortHeight() {
  return window.innerHeight;
}
function getViewPortWidth() {
  var windowWidth = window.innerWidth;
  var documentReact = document.documentElement.getBoundingClientRect();
  var offsetWidth = isNullOrUndefined(document.documentElement) ? 0 : documentReact.width;
  return windowWidth - (windowWidth - offsetWidth);
}
function destroy() {
  targetContainer = null;
  parentDocument2 = null;
}

// node_modules/@syncfusion/ej2-buttons/src/common/common.js
function wrapperInitialize(createElement2, tag, type, element2, WRAPPER4, role) {
  var input = element2;
  if (element2.tagName === tag) {
    var ejInstance = getValue("ej2_instances", element2);
    input = createElement2("input", {
      attrs: {
        "type": type
      }
    });
    var props = ["change", "cssClass", "label", "labelPosition", "id"];
    for (var index = 0, len = element2.attributes.length; index < len; index++) {
      if (props.indexOf(element2.attributes[index].nodeName) === -1) {
        input.setAttribute(element2.attributes[index].nodeName, element2.attributes[index].nodeValue);
      }
    }
    attributes(element2, {
      "class": WRAPPER4
    });
    element2.appendChild(input);
    element2.classList.add(role);
    element2.classList.remove(role);
    setValue("ej2_instances", ejInstance, input);
    deleteObject(element2, "ej2_instances");
  }
  return input;
}
function getTextNode(element2) {
  var node;
  var childnode = element2.childNodes;
  for (var i = 0; i < childnode.length; i++) {
    node = childnode[i];
    if (node.nodeType === 3) {
      return node;
    }
  }
  return null;
}
function destroy2(ejInst, wrapper, tagName) {
  if (tagName === "INPUT") {
    wrapper.parentNode.insertBefore(ejInst.element, wrapper);
    detach(wrapper);
    ejInst.element.checked = false;
    ["name", "value", "disabled"].forEach(function(key) {
      ejInst.element.removeAttribute(key);
    });
  } else {
    ["role", "aria-checked", "class"].forEach(function(key) {
      wrapper.removeAttribute(key);
    });
    wrapper.innerHTML = "";
    ejInst.element = wrapper;
  }
}
function preRender(proxy, control, wrapper, element2, moduleName) {
  element2 = wrapperInitialize(proxy.createElement, control, "checkbox", element2, wrapper, moduleName);
  proxy.element = element2;
  if (proxy.element.getAttribute("type") !== "checkbox") {
    proxy.element.setAttribute("type", "checkbox");
  }
  if (!proxy.element.id) {
    proxy.element.id = getUniqueID("e-" + moduleName);
  }
}
function createCheckBox(createElement2, enableRipple, options) {
  if (enableRipple === void 0) {
    enableRipple = false;
  }
  if (options === void 0) {
    options = {};
  }
  var wrapper = createElement2("div", {
    className: "e-checkbox-wrapper e-css"
  });
  if (options.cssClass) {
    addClass([wrapper], options.cssClass.split(" "));
  }
  if (options.enableRtl) {
    wrapper.classList.add("e-rtl");
  }
  if (enableRipple) {
    var rippleSpan = createElement2("span", {
      className: "e-ripple-container"
    });
    rippleEffect(rippleSpan, {
      isCenterRipple: true,
      duration: 400
    });
    wrapper.appendChild(rippleSpan);
  }
  var frameSpan = createElement2("span", {
    className: "e-frame e-icons"
  });
  if (options.checked) {
    frameSpan.classList.add("e-check");
  }
  wrapper.appendChild(frameSpan);
  if (options.label) {
    var labelSpan = createElement2("span", {
      className: "e-label"
    });
    if (options.disableHtmlEncode) {
      labelSpan.textContent = options.label;
    } else {
      labelSpan.innerHTML = options.label;
    }
    wrapper.appendChild(labelSpan);
  }
  return wrapper;
}
function rippleMouseHandler(e, rippleSpan) {
  if (rippleSpan) {
    var event_1 = document.createEvent("MouseEvents");
    event_1.initEvent(e.type, false, true);
    rippleSpan.dispatchEvent(event_1);
  }
}
function setHiddenInput(proxy, wrap) {
  if (proxy.element.getAttribute("ejs-for")) {
    wrap.appendChild(proxy.createElement("input", {
      attrs: {
        "name": proxy.name || proxy.element.name,
        "value": "false",
        "type": "hidden"
      }
    }));
  }
}

// node_modules/@syncfusion/ej2-buttons/src/button/button.js
var __extends2 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var IconPosition;
(function(IconPosition2) {
  IconPosition2["Left"] = "Left";
  IconPosition2["Right"] = "Right";
  IconPosition2["Top"] = "Top";
  IconPosition2["Bottom"] = "Bottom";
})(IconPosition || (IconPosition = {}));
var buttonObserver = new Observer();
var cssClassName = {
  RTL: "e-rtl",
  BUTTON: "e-btn",
  PRIMARY: "e-primary",
  ICONBTN: "e-icon-btn"
};
var Button = (
  /** @class */
  function(_super) {
    __extends2(Button2, _super);
    function Button2(options, element2) {
      return _super.call(this, options, element2) || this;
    }
    Button2.prototype.preRender = function() {
    };
    Button2.prototype.render = function() {
      this.initialize();
      this.removeRippleEffect = rippleEffect(this.element, {
        selector: "." + cssClassName.BUTTON
      });
      this.renderComplete();
    };
    Button2.prototype.initialize = function() {
      if (this.cssClass) {
        addClass([this.element], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
      }
      if (this.isPrimary) {
        this.element.classList.add(cssClassName.PRIMARY);
      }
      if (!isBlazor() || isBlazor() && this.getModuleName() !== "progress-btn") {
        if (this.content) {
          var tempContent = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(this.content) : this.content;
          this.element.innerHTML = tempContent;
        }
        this.setIconCss();
      }
      if (this.enableRtl) {
        this.element.classList.add(cssClassName.RTL);
      }
      if (this.disabled) {
        this.controlStatus(this.disabled);
      } else {
        this.wireEvents();
      }
    };
    Button2.prototype.controlStatus = function(disabled) {
      this.element.disabled = disabled;
    };
    Button2.prototype.setIconCss = function() {
      if (this.iconCss) {
        var span = this.createElement("span", {
          className: "e-btn-icon " + this.iconCss
        });
        if (!this.element.textContent.trim()) {
          this.element.classList.add(cssClassName.ICONBTN);
        } else {
          span.classList.add("e-icon-" + this.iconPosition.toLowerCase());
          if (this.iconPosition === "Top" || this.iconPosition === "Bottom") {
            this.element.classList.add("e-" + this.iconPosition.toLowerCase() + "-icon-btn");
          }
        }
        var node = this.element.childNodes[0];
        if (node && (this.iconPosition === "Left" || this.iconPosition === "Top")) {
          this.element.insertBefore(span, node);
        } else {
          this.element.appendChild(span);
        }
      }
    };
    Button2.prototype.wireEvents = function() {
      if (this.isToggle) {
        EventHandler.add(this.element, "click", this.btnClickHandler, this);
      }
    };
    Button2.prototype.unWireEvents = function() {
      if (this.isToggle) {
        EventHandler.remove(this.element, "click", this.btnClickHandler);
      }
    };
    Button2.prototype.btnClickHandler = function() {
      if (this.element.classList.contains("e-active")) {
        this.element.classList.remove("e-active");
      } else {
        this.element.classList.add("e-active");
      }
    };
    Button2.prototype.destroy = function() {
      var classList2 = [cssClassName.PRIMARY, cssClassName.RTL, cssClassName.ICONBTN, "e-success", "e-info", "e-danger", "e-warning", "e-flat", "e-outline", "e-small", "e-bigger", "e-active", "e-round", "e-top-icon-btn", "e-bottom-icon-btn"];
      if (this.cssClass) {
        classList2 = classList2.concat(this.cssClass.split(/\s+/).filter(function(c) {
          return c.length > 0;
        }));
      }
      _super.prototype.destroy.call(this);
      removeClass([this.element], classList2);
      if (!this.element.getAttribute("class")) {
        this.element.removeAttribute("class");
      }
      if (this.disabled) {
        this.element.removeAttribute("disabled");
      }
      if (this.content) {
        this.element.innerHTML = this.element.innerHTML.replace(this.content, "");
      }
      var span = this.element.querySelector("span.e-btn-icon");
      if (span) {
        detach(span);
      }
      this.unWireEvents();
      if (isRippleEnabled) {
        this.removeRippleEffect();
      }
    };
    Button2.prototype.getModuleName = function() {
      return "btn";
    };
    Button2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    Button2.Inject = function() {
    };
    Button2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var span = this.element.querySelector("span.e-btn-icon");
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "isPrimary":
            if (newProp.isPrimary) {
              this.element.classList.add(cssClassName.PRIMARY);
            } else {
              this.element.classList.remove(cssClassName.PRIMARY);
            }
            break;
          case "disabled":
            this.controlStatus(newProp.disabled);
            break;
          case "iconCss": {
            span = this.element.querySelector("span.e-btn-icon");
            if (span) {
              if (newProp.iconCss) {
                span.className = "e-btn-icon " + newProp.iconCss;
                if (this.element.textContent.trim()) {
                  if (this.iconPosition === "Left") {
                    span.classList.add("e-icon-left");
                  } else {
                    span.classList.add("e-icon-right");
                  }
                }
              } else {
                detach(span);
              }
            } else {
              this.setIconCss();
            }
            break;
          }
          case "iconPosition":
            removeClass([this.element], ["e-top-icon-btn", "e-bottom-icon-btn"]);
            span = this.element.querySelector("span.e-btn-icon");
            if (span) {
              detach(span);
            }
            this.setIconCss();
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([this.element], oldProp.cssClass.split(/\s+/).filter(function(c) {
                return c.length > 0;
              }));
            }
            if (newProp.cssClass) {
              addClass([this.element], newProp.cssClass.replace(/\s+/g, " ").trim().split(" "));
            }
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              this.element.classList.add(cssClassName.RTL);
            } else {
              this.element.classList.remove(cssClassName.RTL);
            }
            break;
          case "content": {
            var node = getTextNode(this.element);
            if (!node) {
              this.element.classList.remove(cssClassName.ICONBTN);
            }
            if (!isBlazor() || isBlazor() && !this.isServerRendered && this.getModuleName() !== "progress-btn") {
              if (this.enableHtmlSanitizer) {
                newProp.content = SanitizeHtmlHelper.sanitize(newProp.content);
              }
              this.element.innerHTML = newProp.content;
              this.setIconCss();
            }
            break;
          }
          case "isToggle":
            if (newProp.isToggle) {
              EventHandler.add(this.element, "click", this.btnClickHandler, this);
            } else {
              EventHandler.remove(this.element, "click", this.btnClickHandler);
              removeClass([this.element], ["e-active"]);
            }
            break;
        }
      }
    };
    Button2.prototype.click = function() {
      this.element.click();
    };
    Button2.prototype.focusIn = function() {
      this.element.focus();
    };
    __decorate([Property("Left")], Button2.prototype, "iconPosition", void 0);
    __decorate([Property("")], Button2.prototype, "iconCss", void 0);
    __decorate([Property(false)], Button2.prototype, "disabled", void 0);
    __decorate([Property(false)], Button2.prototype, "isPrimary", void 0);
    __decorate([Property("")], Button2.prototype, "cssClass", void 0);
    __decorate([Property("")], Button2.prototype, "content", void 0);
    __decorate([Property(false)], Button2.prototype, "isToggle", void 0);
    __decorate([Property()], Button2.prototype, "locale", void 0);
    __decorate([Property(true)], Button2.prototype, "enableHtmlSanitizer", void 0);
    __decorate([Event()], Button2.prototype, "created", void 0);
    Button2 = __decorate([NotifyPropertyChanges], Button2);
    return Button2;
  }(Component)
);

// node_modules/@syncfusion/ej2-buttons/src/check-box/check-box.js
var __extends3 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate2 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CHECK = "e-check";
var DISABLED = "e-checkbox-disabled";
var FRAME = "e-frame";
var INDETERMINATE = "e-stop";
var LABEL = "e-label";
var RIPPLE = "e-ripple-container";
var RIPPLECHECK = "e-ripple-check";
var RIPPLEINDETERMINATE = "e-ripple-stop";
var RTL = "e-rtl";
var WRAPPER = "e-checkbox-wrapper";
var containerAttr = ["title", "class", "style", "disabled", "readonly", "name", "value", "id", "tabindex", "aria-label", "required"];
var CheckBox = (
  /** @class */
  function(_super) {
    __extends3(CheckBox2, _super);
    function CheckBox2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.isFocused = false;
      _this.isMouseClick = false;
      _this.clickTriggered = false;
      _this.validCheck = true;
      _this.type = "checkbox";
      return _this;
    }
    CheckBox2.prototype.changeState = function(state, isInitialize, isInterAction) {
      var wrapper = this.getWrapper();
      var rippleSpan = null;
      var frameSpan = null;
      if (wrapper) {
        frameSpan = wrapper.getElementsByClassName(FRAME)[0];
        if (isRippleEnabled) {
          rippleSpan = wrapper.getElementsByClassName(RIPPLE)[0];
        }
      }
      if (state === "check") {
        if (frameSpan) {
          frameSpan.classList.remove(INDETERMINATE);
          frameSpan.classList.add(CHECK);
        }
        if (rippleSpan) {
          rippleSpan.classList.remove(RIPPLEINDETERMINATE);
          rippleSpan.classList.add(RIPPLECHECK);
        }
        this.element.checked = true;
        if ((this.element.required || closest(this.element, "form") && closest(this.element, "form").classList.contains("e-formvalidator")) && this.validCheck && !isInitialize && isInterAction) {
          this.element.checked = false;
          this.validCheck = false;
        } else if (this.element.required || closest(this.element, "form") && closest(this.element, "form").classList.contains("e-formvalidator")) {
          this.validCheck = true;
        }
      } else if (state === "uncheck") {
        if (frameSpan) {
          removeClass([frameSpan], [CHECK, INDETERMINATE]);
        }
        if (rippleSpan) {
          removeClass([rippleSpan], [RIPPLECHECK, RIPPLEINDETERMINATE]);
        }
        this.element.checked = false;
        if ((this.element.required || closest(this.element, "form") && closest(this.element, "form").classList.contains("e-formvalidator")) && this.validCheck && !isInitialize && isInterAction) {
          this.element.checked = true;
          this.validCheck = false;
        } else if (this.element.required || closest(this.element, "form") && closest(this.element, "form").classList.contains("e-formvalidator")) {
          this.validCheck = true;
        }
      } else {
        if (frameSpan) {
          frameSpan.classList.remove(CHECK);
          frameSpan.classList.add(INDETERMINATE);
        }
        if (rippleSpan) {
          rippleSpan.classList.remove(RIPPLECHECK);
          rippleSpan.classList.add(RIPPLEINDETERMINATE);
        }
        this.element.indeterminate = true;
        this.indeterminate = true;
      }
    };
    CheckBox2.prototype.clickHandler = function(event2) {
      if (event2.target.tagName === "INPUT" && this.clickTriggered) {
        this.changeState(this.checked ? "check" : "uncheck");
        this.clickTriggered = false;
        return;
      }
      if (event2.target.tagName === "SPAN" || event2.target.tagName === "LABEL" || closest(event2.target, ".e-label")) {
        this.clickTriggered = true;
      }
      if (this.isMouseClick) {
        this.focusOutHandler();
        this.isMouseClick = false;
      }
      if (this.indeterminate) {
        this.changeState(this.checked ? "check" : "uncheck", false, true);
        this.indeterminate = false;
        this.element.indeterminate = false;
      } else if (this.checked) {
        this.changeState("uncheck", false, true);
        this.checked = false;
      } else {
        this.changeState("check", false, true);
        this.checked = true;
      }
      var changeEventArgs = {
        checked: this.updateVueArrayModel(false),
        event: event2
      };
      this.trigger("change", changeEventArgs);
      event2.stopPropagation();
    };
    CheckBox2.prototype.destroy = function() {
      var _this = this;
      var wrapper = this.getWrapper();
      _super.prototype.destroy.call(this);
      if (this.wrapper) {
        wrapper = this.wrapper;
        if (!this.disabled) {
          this.unWireEvents();
        }
        if (this.tagName === "INPUT") {
          if (this.getWrapper() && wrapper.parentNode) {
            wrapper.parentNode.insertBefore(this.element, wrapper);
          }
          detach(wrapper);
          this.element.checked = false;
          if (this.indeterminate) {
            this.element.indeterminate = false;
          }
          ["name", "value", "disabled"].forEach(function(key) {
            _this.element.removeAttribute(key);
          });
        } else {
          ["class"].forEach(function(key) {
            wrapper.removeAttribute(key);
          });
          wrapper.innerHTML = "";
          this.element = wrapper;
          if (this.refreshing) {
            ["e-control", "e-checkbox", "e-lib"].forEach(function(key) {
              _this.element.classList.add(key);
            });
            setValue("ej2_instances", [this], this.element);
          }
        }
      }
    };
    CheckBox2.prototype.focusHandler = function() {
      this.isFocused = true;
    };
    CheckBox2.prototype.focusOutHandler = function() {
      var wrapper = this.getWrapper();
      if (wrapper) {
        wrapper.classList.remove("e-focus");
      }
      this.isFocused = false;
    };
    CheckBox2.prototype.getModuleName = function() {
      return "checkbox";
    };
    CheckBox2.prototype.getPersistData = function() {
      return this.addOnPersist(["checked", "indeterminate"]);
    };
    CheckBox2.prototype.getWrapper = function() {
      if (this.element && this.element.parentElement) {
        return this.element.parentElement.parentElement;
      } else {
        return null;
      }
    };
    CheckBox2.prototype.getLabel = function() {
      if (this.element) {
        return this.element.parentElement;
      } else {
        return null;
      }
    };
    CheckBox2.prototype.initialize = function() {
      if (isNullOrUndefined(this.initialCheckedValue)) {
        this.initialCheckedValue = this.checked;
      }
      if (this.name) {
        this.element.setAttribute("name", this.name);
      }
      this.element.setAttribute("tabindex", "0");
      if (this.value) {
        this.element.setAttribute("value", this.value);
        if (this.isVue && typeof this.value === "boolean" && this.value === true) {
          this.setProperties({
            "checked": true
          }, true);
        }
      }
      if (this.checked) {
        this.changeState("check", true);
      }
      if (this.indeterminate) {
        this.changeState();
      }
      if (this.disabled) {
        this.setDisabled();
      }
    };
    CheckBox2.prototype.initWrapper = function() {
      var wrapper = this.element.parentElement;
      if (!wrapper.classList.contains(WRAPPER)) {
        wrapper = this.createElement("div", {
          className: WRAPPER
        });
        if (this.element.parentNode) {
          this.element.parentNode.insertBefore(wrapper, this.element);
        }
      }
      var label = this.createElement("label", {
        attrs: {
          for: this.htmlAttributes.id ? this.htmlAttributes.id : this.element.id
        }
      });
      var frameSpan = this.createElement("span", {
        className: "e-icons " + FRAME
      });
      wrapper.classList.add("e-wrapper");
      if (this.enableRtl) {
        wrapper.classList.add(RTL);
      }
      if (this.cssClass) {
        addClass([wrapper], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
      }
      wrapper.appendChild(label);
      label.appendChild(this.element);
      setHiddenInput(this, label);
      label.appendChild(frameSpan);
      if (isRippleEnabled) {
        var rippleSpan = this.createElement("span", {
          className: RIPPLE
        });
        if (this.labelPosition === "Before") {
          label.appendChild(rippleSpan);
        } else {
          label.insertBefore(rippleSpan, frameSpan);
        }
        rippleEffect(rippleSpan, {
          duration: 400,
          isCenterRipple: true
        });
      }
      if (this.label) {
        this.setText(this.label);
      }
    };
    CheckBox2.prototype.keyUpHandler = function() {
      if (this.isFocused) {
        this.getWrapper().classList.add("e-focus");
      }
    };
    CheckBox2.prototype.labelMouseDownHandler = function(e) {
      this.isMouseClick = true;
      var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];
      rippleMouseHandler(e, rippleSpan);
    };
    CheckBox2.prototype.labelMouseLeaveHandler = function(e) {
      var rippleSpan = this.getLabel().getElementsByClassName(RIPPLE)[0];
      if (rippleSpan) {
        var rippleElem = rippleSpan.querySelectorAll(".e-ripple-element");
        for (var i = rippleElem.length - 1; i > 0; i--) {
          rippleSpan.removeChild(rippleSpan.childNodes[i]);
        }
        rippleMouseHandler(e, rippleSpan);
      }
    };
    CheckBox2.prototype.labelMouseUpHandler = function(e) {
      this.isMouseClick = true;
      var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];
      if (rippleSpan) {
        var rippleElem = rippleSpan.querySelectorAll(".e-ripple-element");
        for (var i = 0; i < rippleElem.length - 1; i++) {
          rippleSpan.removeChild(rippleSpan.childNodes[i]);
        }
        rippleMouseHandler(e, rippleSpan);
      }
    };
    CheckBox2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var wrapper = this.getWrapper();
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "checked":
            this.indeterminate = false;
            this.element.indeterminate = false;
            this.changeState(newProp.checked ? "check" : "uncheck");
            break;
          case "indeterminate":
            if (newProp.indeterminate) {
              this.changeState();
            } else {
              this.element.indeterminate = false;
              this.changeState(this.checked ? "check" : "uncheck");
            }
            break;
          case "disabled":
            if (newProp.disabled) {
              this.setDisabled();
              this.wrapper = this.getWrapper();
              this.unWireEvents();
            } else {
              this.element.disabled = false;
              wrapper.classList.remove(DISABLED);
              wrapper.setAttribute("aria-disabled", "false");
              this.wireEvents();
            }
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([wrapper], oldProp.cssClass.split(/\s+/).filter(function(c) {
                return c.length > 0;
              }));
            }
            if (newProp.cssClass) {
              addClass([wrapper], newProp.cssClass.replace(/\s+/g, " ").trim().split(" "));
            }
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              wrapper.classList.add(RTL);
            } else {
              wrapper.classList.remove(RTL);
            }
            break;
          case "label":
            this.setText(newProp.label);
            break;
          case "labelPosition": {
            var label = wrapper.getElementsByClassName(LABEL)[0];
            var labelWrap = wrapper.getElementsByTagName("label")[0];
            detach(label);
            if (newProp.labelPosition === "After") {
              labelWrap.appendChild(label);
            } else {
              labelWrap.insertBefore(label, wrapper.getElementsByClassName(FRAME)[0]);
            }
            break;
          }
          case "name":
            this.element.setAttribute("name", newProp.name);
            break;
          case "value":
            if (this.isVue && typeof newProp.value === "object") {
              break;
            }
            this.element.setAttribute("value", newProp.value);
            break;
          case "htmlAttributes":
            this.updateHtmlAttributeToWrapper();
            break;
        }
      }
    };
    CheckBox2.prototype.preRender = function() {
      var element2 = this.element;
      this.tagName = this.element.tagName;
      element2 = wrapperInitialize(this.createElement, "EJS-CHECKBOX", "checkbox", element2, WRAPPER, "checkbox");
      this.element = element2;
      if (this.element.getAttribute("type") !== "checkbox") {
        this.element.setAttribute("type", "checkbox");
      }
      if (!this.element.id) {
        this.element.id = getUniqueID("e-" + this.getModuleName());
      }
    };
    CheckBox2.prototype.render = function() {
      this.initWrapper();
      this.initialize();
      if (!this.disabled) {
        this.wireEvents();
      }
      this.updateHtmlAttributeToWrapper();
      this.updateVueArrayModel(true);
      this.renderComplete();
      this.wrapper = this.getWrapper();
    };
    CheckBox2.prototype.setDisabled = function() {
      var wrapper = this.getWrapper();
      this.element.disabled = true;
      wrapper.classList.add(DISABLED);
      wrapper.setAttribute("aria-disabled", "true");
    };
    CheckBox2.prototype.setText = function(text) {
      var wrapper = this.getWrapper();
      if (!wrapper) {
        return;
      }
      var label = wrapper.getElementsByClassName(LABEL)[0];
      if (label) {
        label.innerHTML = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(text) : text;
      } else {
        text = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(text) : text;
        label = this.createElement("span", {
          className: LABEL,
          innerHTML: text
        });
        var labelWrap = wrapper.getElementsByTagName("label")[0];
        if (this.labelPosition === "Before") {
          labelWrap.insertBefore(label, wrapper.getElementsByClassName(FRAME)[0]);
        } else {
          labelWrap.appendChild(label);
        }
      }
    };
    CheckBox2.prototype.changeHandler = function(e) {
      e.stopPropagation();
    };
    CheckBox2.prototype.formResetHandler = function() {
      this.checked = this.initialCheckedValue;
      this.element.checked = this.initialCheckedValue;
    };
    CheckBox2.prototype.unWireEvents = function() {
      var wrapper = this.wrapper;
      EventHandler.remove(this.element, "keyup", this.keyUpHandler);
      EventHandler.remove(this.element, "focus", this.focusHandler);
      EventHandler.remove(this.element, "focusout", this.focusOutHandler);
      if (wrapper) {
        EventHandler.remove(wrapper, "click", this.clickHandler);
        var label = wrapper.getElementsByTagName("label")[0];
        if (label) {
          EventHandler.remove(label, "mousedown", this.labelMouseDownHandler);
          EventHandler.remove(label, "mouseup", this.labelMouseUpHandler);
          EventHandler.remove(label, "mouseleave", this.labelMouseLeaveHandler);
        }
      }
      var formElem = closest(this.element, "form");
      if (formElem) {
        EventHandler.remove(formElem, "reset", this.formResetHandler);
      }
      if (this.tagName === "EJS-CHECKBOX") {
        EventHandler.remove(this.element, "change", this.changeHandler);
      }
    };
    CheckBox2.prototype.wireEvents = function() {
      var wrapper = this.getWrapper();
      EventHandler.add(wrapper, "click", this.clickHandler, this);
      EventHandler.add(this.element, "keyup", this.keyUpHandler, this);
      EventHandler.add(this.element, "focus", this.focusHandler, this);
      EventHandler.add(this.element, "focusout", this.focusOutHandler, this);
      var label = wrapper.getElementsByTagName("label")[0];
      EventHandler.add(label, "mousedown", this.labelMouseDownHandler, this);
      EventHandler.add(label, "mouseup", this.labelMouseUpHandler, this);
      EventHandler.add(label, "mouseleave", this.labelMouseLeaveHandler, this);
      var formElem = closest(this.element, "form");
      if (formElem) {
        EventHandler.add(formElem, "reset", this.formResetHandler, this);
      }
      if (this.tagName === "EJS-CHECKBOX") {
        EventHandler.add(this.element, "change", this.changeHandler, this);
      }
    };
    CheckBox2.prototype.updateVueArrayModel = function(init) {
      if (this.isVue && typeof this.value === "object") {
        var value = this.element.value;
        if (value && this.value) {
          if (init) {
            for (var i = 0; i < this.value.length; i++) {
              if (value === this.value[i]) {
                this.changeState("check");
                this.setProperties({
                  "checked": true
                }, true);
              }
            }
          } else {
            var index = this.value.indexOf(value);
            if (this.checked) {
              if (index < 0) {
                this.value.push(value);
              }
            } else {
              if (index > -1) {
                this.value.splice(index, 1);
              }
            }
            return this.value;
          }
        }
      }
      return this.validCheck ? this.element.checked : !this.element.checked;
    };
    CheckBox2.prototype.updateHtmlAttributeToWrapper = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          var wrapper = this.getWrapper();
          if (containerAttr.indexOf(key) > -1) {
            if (key === "class") {
              addClass([wrapper], this.htmlAttributes["" + key].split(" "));
            } else if (key === "title") {
              wrapper.setAttribute(key, this.htmlAttributes["" + key]);
            } else if (key === "style") {
              var frameSpan = this.getWrapper().getElementsByClassName(FRAME)[0];
              frameSpan.setAttribute(key, this.htmlAttributes["" + key]);
            } else if (key === "disabled") {
              if (this.htmlAttributes["" + key] === "true") {
                this.setDisabled();
              }
              this.element.setAttribute(key, this.htmlAttributes["" + key]);
            } else {
              this.element.setAttribute(key, this.htmlAttributes["" + key]);
            }
          } else {
            wrapper.setAttribute(key, this.htmlAttributes["" + key]);
          }
        }
      }
    };
    CheckBox2.prototype.click = function() {
      this.element.click();
    };
    CheckBox2.prototype.focusIn = function() {
      this.element.focus();
    };
    __decorate2([Event()], CheckBox2.prototype, "change", void 0);
    __decorate2([Event()], CheckBox2.prototype, "created", void 0);
    __decorate2([Property(false)], CheckBox2.prototype, "checked", void 0);
    __decorate2([Property("")], CheckBox2.prototype, "cssClass", void 0);
    __decorate2([Property(false)], CheckBox2.prototype, "disabled", void 0);
    __decorate2([Property(false)], CheckBox2.prototype, "indeterminate", void 0);
    __decorate2([Property("")], CheckBox2.prototype, "label", void 0);
    __decorate2([Property("After")], CheckBox2.prototype, "labelPosition", void 0);
    __decorate2([Property("")], CheckBox2.prototype, "name", void 0);
    __decorate2([Property("")], CheckBox2.prototype, "value", void 0);
    __decorate2([Property(true)], CheckBox2.prototype, "enableHtmlSanitizer", void 0);
    __decorate2([Property({})], CheckBox2.prototype, "htmlAttributes", void 0);
    CheckBox2 = __decorate2([NotifyPropertyChanges], CheckBox2);
    return CheckBox2;
  }(Component)
);

// node_modules/@syncfusion/ej2-buttons/src/radio-button/radio-button.js
var __extends4 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate3 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var LABEL2 = "e-label";
var RIPPLE2 = "e-ripple-container";
var RTL2 = "e-rtl";
var WRAPPER2 = "e-radio-wrapper";
var ATTRIBUTES = ["title", "class", "style", "disabled", "readonly", "name", "value", "id"];
var RadioButton = (
  /** @class */
  function(_super) {
    __extends4(RadioButton2, _super);
    function RadioButton2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.isFocused = false;
      _this.type = "radio";
      return _this;
    }
    RadioButton_1 = RadioButton2;
    RadioButton2.prototype.changeHandler = function(event2) {
      this.checked = true;
      this.dataBind();
      var value = this.element.getAttribute("value");
      value = this.isVue && value ? this.element.value : this.value;
      var type = typeof this.value;
      if (this.isVue && type === "boolean") {
        value = value === "true" ? true : false;
      }
      this.trigger("change", {
        value,
        event: event2
      });
      if (this.isAngular) {
        event2.stopPropagation();
      }
    };
    RadioButton2.prototype.updateChange = function() {
      var input;
      var instance;
      var radioGrp = this.getRadioGroup();
      for (var i = 0; i < radioGrp.length; i++) {
        input = radioGrp[i];
        if (input !== this.element) {
          instance = getInstance(input, RadioButton_1);
          instance.checked = false;
          if (this.tagName === "EJS-RADIOBUTTON") {
            instance.angularValue = this.value;
          }
        }
      }
    };
    RadioButton2.prototype.destroy = function() {
      var _this = this;
      var radioWrap = this.wrapper;
      _super.prototype.destroy.call(this);
      if (radioWrap) {
        if (!this.disabled) {
          this.unWireEvents();
        }
        if (this.tagName === "INPUT") {
          if (radioWrap.parentNode) {
            radioWrap.parentNode.insertBefore(this.element, radioWrap);
          }
          detach(radioWrap);
          this.element.checked = false;
          ["name", "value", "disabled"].forEach(function(key) {
            _this.element.removeAttribute(key);
          });
        } else {
          ["role", "aria-checked", "class"].forEach(function(key) {
            radioWrap.removeAttribute(key);
          });
          radioWrap.innerHTML = "";
          this.element = this.wrapper;
          if (this.refreshing) {
            ["e-control", "e-radio", "e-lib"].forEach(function(key) {
              _this.element.classList.add(key);
            });
            setValue("ej2_instances", [this], this.element);
          }
        }
      }
    };
    RadioButton2.prototype.focusHandler = function() {
      this.isFocused = true;
    };
    RadioButton2.prototype.focusOutHandler = function() {
      var label = this.getLabel();
      if (label) {
        label.classList.remove("e-focus");
      }
    };
    RadioButton2.prototype.getModuleName = function() {
      return "radio";
    };
    RadioButton2.prototype.getSelectedValue = function() {
      var input;
      var radioGrp = this.getRadioGroup();
      for (var i = 0, len = radioGrp.length; i < len; i++) {
        input = radioGrp[i];
        if (input.checked) {
          return input.value;
        }
      }
      return "";
    };
    RadioButton2.prototype.getRadioGroup = function() {
      return document.querySelectorAll('input.e-radio[name="' + this.element.getAttribute("name") + '"]');
    };
    RadioButton2.prototype.getPersistData = function() {
      return this.addOnPersist(["checked"]);
    };
    RadioButton2.prototype.getWrapper = function() {
      if (this.element.parentElement) {
        return this.element.parentElement;
      } else {
        return null;
      }
    };
    RadioButton2.prototype.getLabel = function() {
      if (this.element.nextElementSibling) {
        return this.element.nextElementSibling;
      } else {
        return null;
      }
    };
    RadioButton2.prototype.initialize = function() {
      if (isNullOrUndefined(this.initialCheckedValue)) {
        this.initialCheckedValue = this.checked;
      }
      this.initWrapper();
      this.updateHtmlAttribute();
      if (this.name) {
        this.element.setAttribute("name", this.name);
      }
      var value = this.element.getAttribute("value");
      var type = typeof this.value;
      if (this.isVue && type === "boolean") {
        value = value === "true" ? true : false;
      }
      if (this.isVue ? this.value && type !== "boolean" && !value : this.value) {
        this.element.setAttribute("value", this.value);
      }
      if (this.checked) {
        this.element.checked = true;
      }
      if (this.disabled) {
        this.setDisabled();
      }
    };
    RadioButton2.prototype.initWrapper = function() {
      var rippleSpan;
      var wrapper = this.element.parentElement;
      if (!wrapper.classList.contains(WRAPPER2)) {
        wrapper = this.createElement("div", {
          className: WRAPPER2
        });
        if (this.element.parentNode) {
          this.element.parentNode.insertBefore(wrapper, this.element);
        }
      }
      var label = this.createElement("label", {
        attrs: {
          for: this.element.id
        }
      });
      wrapper.appendChild(this.element);
      wrapper.appendChild(label);
      if (isRippleEnabled) {
        rippleSpan = this.createElement("span", {
          className: RIPPLE2
        });
        label.appendChild(rippleSpan);
        rippleEffect(rippleSpan, {
          duration: 400,
          isCenterRipple: true
        });
      }
      wrapper.classList.add("e-wrapper");
      if (this.enableRtl) {
        label.classList.add(RTL2);
      }
      if (this.cssClass) {
        addClass([wrapper], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
      }
      if (this.label) {
        this.setText(this.label);
      }
    };
    RadioButton2.prototype.keyUpHandler = function() {
      if (this.isFocused) {
        this.getLabel().classList.add("e-focus");
      }
    };
    RadioButton2.prototype.labelMouseDownHandler = function(e) {
      var rippleSpan = this.getLabel().getElementsByClassName(RIPPLE2)[0];
      rippleMouseHandler(e, rippleSpan);
    };
    RadioButton2.prototype.labelMouseLeaveHandler = function(e) {
      var rippleSpan = this.getLabel().getElementsByClassName(RIPPLE2)[0];
      if (rippleSpan) {
        var rippleElem = rippleSpan.querySelectorAll(".e-ripple-element");
        for (var i = rippleElem.length - 1; i > 0; i--) {
          rippleSpan.removeChild(rippleSpan.childNodes[i]);
        }
        rippleMouseHandler(e, rippleSpan);
      }
    };
    RadioButton2.prototype.labelMouseUpHandler = function(e) {
      var rippleSpan = this.getLabel().getElementsByClassName(RIPPLE2)[0];
      if (rippleSpan) {
        var rippleElem = rippleSpan.querySelectorAll(".e-ripple-element");
        for (var i = rippleElem.length - 1; i > 0; i--) {
          rippleSpan.removeChild(rippleSpan.childNodes[i]);
        }
        rippleMouseHandler(e, rippleSpan);
      }
    };
    RadioButton2.prototype.formResetHandler = function() {
      this.checked = this.initialCheckedValue;
      if (this.initialCheckedValue) {
        attributes(this.element, {
          "checked": "true"
        });
      }
    };
    RadioButton2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var wrap = this.getWrapper();
      var label = this.getLabel();
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "checked":
            if (newProp.checked) {
              this.updateChange();
            }
            this.element.checked = newProp.checked;
            break;
          case "disabled":
            if (newProp.disabled) {
              this.setDisabled();
              this.unWireEvents();
            } else {
              this.element.disabled = false;
              this.wireEvents();
            }
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([wrap], oldProp.cssClass.split(/\s+/).filter(function(c) {
                return c.length > 0;
              }));
            }
            if (newProp.cssClass) {
              addClass([wrap], newProp.cssClass.replace(/\s+/g, " ").trim().split(" "));
            }
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              label.classList.add(RTL2);
            } else {
              label.classList.remove(RTL2);
            }
            break;
          case "label":
            this.setText(newProp.label);
            break;
          case "labelPosition":
            if (newProp.labelPosition === "Before") {
              label.classList.add("e-right");
            } else {
              label.classList.remove("e-right");
            }
            break;
          case "name":
            this.element.setAttribute("name", newProp.name);
            break;
          case "value":
            var type = typeof this.htmlAttributes.value;
            if (!isNullOrUndefined(this.htmlAttributes) && (this.htmlAttributes.value || type === "boolean" && !this.htmlAttributes.value)) {
              break;
            }
            this.element.setAttribute("value", newProp.value);
            break;
          case "htmlAttributes":
            this.updateHtmlAttribute();
            break;
        }
      }
    };
    RadioButton2.prototype.preRender = function() {
      var element2 = this.element;
      this.formElement = closest(this.element, "form");
      this.tagName = this.element.tagName;
      element2 = wrapperInitialize(this.createElement, "EJS-RADIOBUTTON", "radio", element2, WRAPPER2, "radio");
      this.element = element2;
      if (this.element.getAttribute("type") !== "radio") {
        this.element.setAttribute("type", "radio");
      }
      if (!this.element.id) {
        this.element.id = getUniqueID("e-" + this.getModuleName());
      }
      if (this.tagName === "EJS-RADIOBUTTON") {
        var formControlName = this.element.getAttribute("formcontrolname");
        if (formControlName) {
          this.setProperties({
            "name": formControlName
          }, true);
          this.element.setAttribute("name", formControlName);
        }
      }
    };
    RadioButton2.prototype.render = function() {
      this.initialize();
      if (!this.disabled) {
        this.wireEvents();
      }
      this.renderComplete();
      this.wrapper = this.getWrapper();
    };
    RadioButton2.prototype.setDisabled = function() {
      this.element.disabled = true;
    };
    RadioButton2.prototype.setText = function(text) {
      var label = this.getLabel();
      var textLabel = label.getElementsByClassName(LABEL2)[0];
      if (textLabel) {
        textLabel.textContent = text;
      } else {
        text = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(text) : text;
        textLabel = this.createElement("span", {
          className: LABEL2,
          innerHTML: text
        });
        label.appendChild(textLabel);
      }
      if (this.labelPosition === "Before") {
        this.getLabel().classList.add("e-right");
      } else {
        this.getLabel().classList.remove("e-right");
      }
    };
    RadioButton2.prototype.updateHtmlAttribute = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          var wrapper = this.element.parentElement;
          if (ATTRIBUTES.indexOf(key) > -1) {
            if (key === "class") {
              addClass([wrapper], this.htmlAttributes["" + key].replace(/\s+/g, " ").trim().split(" "));
            } else if (key === "title" || key === "style") {
              wrapper.setAttribute(key, this.htmlAttributes["" + key]);
            } else {
              this.element.setAttribute(key, this.htmlAttributes["" + key]);
            }
          } else {
            wrapper.setAttribute(key, this.htmlAttributes["" + key]);
          }
        }
      }
    };
    RadioButton2.prototype.unWireEvents = function() {
      var label = this.wrapper;
      EventHandler.remove(this.element, "change", this.changeHandler);
      EventHandler.remove(this.element, "focus", this.focusHandler);
      EventHandler.remove(this.element, "focusout", this.focusOutHandler);
      EventHandler.remove(this.element, "keyup", this.keyUpHandler);
      if (label) {
        var rippleLabel = label.getElementsByTagName("label")[0];
        if (rippleLabel) {
          EventHandler.remove(rippleLabel, "mousedown", this.labelMouseDownHandler);
          EventHandler.remove(rippleLabel, "mouseup", this.labelMouseUpHandler);
          EventHandler.remove(rippleLabel, "mouseleave", this.labelMouseLeaveHandler);
        }
      }
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.formResetHandler);
      }
    };
    RadioButton2.prototype.wireEvents = function() {
      var label = this.getLabel();
      EventHandler.add(this.element, "change", this.changeHandler, this);
      EventHandler.add(this.element, "keyup", this.keyUpHandler, this);
      EventHandler.add(this.element, "focus", this.focusHandler, this);
      EventHandler.add(this.element, "focusout", this.focusOutHandler, this);
      var rippleLabel = label.getElementsByClassName(LABEL2)[0];
      if (rippleLabel) {
        EventHandler.add(rippleLabel, "mousedown", this.labelMouseDownHandler, this);
        EventHandler.add(rippleLabel, "mouseup", this.labelMouseUpHandler, this);
        EventHandler.add(rippleLabel, "mouseleave", this.labelMouseLeaveHandler, this);
      }
      if (this.formElement) {
        EventHandler.add(this.formElement, "reset", this.formResetHandler, this);
      }
    };
    RadioButton2.prototype.click = function() {
      this.element.click();
    };
    RadioButton2.prototype.focusIn = function() {
      this.element.focus();
    };
    var RadioButton_1;
    __decorate3([Event()], RadioButton2.prototype, "change", void 0);
    __decorate3([Event()], RadioButton2.prototype, "created", void 0);
    __decorate3([Property(false)], RadioButton2.prototype, "checked", void 0);
    __decorate3([Property("")], RadioButton2.prototype, "cssClass", void 0);
    __decorate3([Property(false)], RadioButton2.prototype, "disabled", void 0);
    __decorate3([Property("")], RadioButton2.prototype, "label", void 0);
    __decorate3([Property("After")], RadioButton2.prototype, "labelPosition", void 0);
    __decorate3([Property("")], RadioButton2.prototype, "name", void 0);
    __decorate3([Property("")], RadioButton2.prototype, "value", void 0);
    __decorate3([Property(true)], RadioButton2.prototype, "enableHtmlSanitizer", void 0);
    __decorate3([Property({})], RadioButton2.prototype, "htmlAttributes", void 0);
    RadioButton2 = RadioButton_1 = __decorate3([NotifyPropertyChanges], RadioButton2);
    return RadioButton2;
  }(Component)
);

// node_modules/@syncfusion/ej2-buttons/src/switch/switch.js
var __extends5 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate4 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DISABLED2 = "e-switch-disabled";
var RIPPLE3 = "e-ripple-container";
var RIPPLE_CHECK = "e-ripple-check";
var RTL3 = "e-rtl";
var WRAPPER3 = "e-switch-wrapper";
var ACTIVE = "e-switch-active";
var ATTRIBUTES2 = ["title", "class", "style", "disabled", "readonly", "name", "value", "aria-label", "id", "role", "tabindex"];
var Switch = (
  /** @class */
  function(_super) {
    __extends5(Switch2, _super);
    function Switch2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.isFocused = false;
      _this.isDrag = false;
      _this.isWireEvents = false;
      return _this;
    }
    Switch2.prototype.changeState = function(state) {
      var rippleSpan = null;
      var wrapper = this.getWrapper();
      var bar = wrapper.querySelector(".e-switch-inner");
      var handle = wrapper.querySelector(".e-switch-handle");
      if (isRippleEnabled) {
        rippleSpan = wrapper.getElementsByClassName(RIPPLE3)[0];
      }
      if (state) {
        addClass([bar, handle], ACTIVE);
        this.element.checked = true;
        this.checked = true;
        if (rippleSpan) {
          addClass([rippleSpan], [RIPPLE_CHECK]);
        }
      } else {
        removeClass([bar, handle], ACTIVE);
        this.element.checked = false;
        this.checked = false;
        if (rippleSpan) {
          removeClass([rippleSpan], [RIPPLE_CHECK]);
        }
      }
    };
    Switch2.prototype.clickHandler = function(evt) {
      if (evt && this.element.closest("label")) {
        if (evt.target !== this.element) {
          return;
        }
      }
      this.isDrag = false;
      this.focusOutHandler();
      var beforeChangeEventArgs = {
        event: evt,
        cancel: false,
        checked: this.checked
      };
      this.trigger("beforeChange", beforeChangeEventArgs);
      if (!beforeChangeEventArgs.cancel) {
        this.changeState(!beforeChangeEventArgs.checked);
        this.element.focus();
        var changeEventArgs = {
          checked: this.element.checked,
          event: evt
        };
        this.trigger("change", changeEventArgs);
      }
    };
    Switch2.prototype.destroy = function() {
      var _this = this;
      _super.prototype.destroy.call(this);
      if (!this.disabled) {
        this.unWireEvents();
      }
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.formResetHandler);
      }
      if (this.getWrapper()) {
        destroy2(this, this.getWrapper(), this.tagName);
      }
      if (this.refreshing) {
        ["e-control", "e-switch", "e-lib"].forEach(function(key) {
          _this.element.classList.add(key);
        });
        setValue("ej2_instances", [this], this.element);
      }
    };
    Switch2.prototype.focusHandler = function() {
      this.isFocused = true;
    };
    Switch2.prototype.focusOutHandler = function() {
      this.getWrapper().classList.remove("e-focus");
    };
    Switch2.prototype.getModuleName = function() {
      return "switch";
    };
    Switch2.prototype.getPersistData = function() {
      return this.addOnPersist(["checked"]);
    };
    Switch2.prototype.getWrapper = function() {
      if (this.element.parentElement) {
        return this.element.parentElement;
      } else {
        return null;
      }
    };
    Switch2.prototype.initialize = function() {
      this.element.setAttribute("role", "switch");
      if (isNullOrUndefined(this.initialSwitchCheckedValue)) {
        this.initialSwitchCheckedValue = this.checked;
      }
      if (this.name) {
        this.element.setAttribute("name", this.name);
      }
      if (this.value) {
        this.element.setAttribute("value", this.value);
      }
      if (this.checked) {
        this.changeState(true);
      }
      if (this.disabled) {
        this.setDisabled();
      }
      if (this.onLabel || this.offLabel) {
        this.setLabel(this.onLabel, this.offLabel);
      }
    };
    Switch2.prototype.initWrapper = function() {
      var wrapper = this.element.parentElement;
      if (!wrapper.classList.contains(WRAPPER3)) {
        wrapper = this.createElement("div", {
          className: WRAPPER3
        });
        this.element.parentNode.insertBefore(wrapper, this.element);
      }
      var switchInner = this.createElement("span", {
        className: "e-switch-inner"
      });
      var onLabel = this.createElement("span", {
        className: "e-switch-on"
      });
      var offLabel = this.createElement("span", {
        className: "e-switch-off"
      });
      var handle = this.createElement("span", {
        className: "e-switch-handle"
      });
      wrapper.appendChild(this.element);
      setHiddenInput(this, wrapper);
      switchInner.appendChild(onLabel);
      switchInner.appendChild(offLabel);
      wrapper.appendChild(switchInner);
      wrapper.appendChild(handle);
      if (isRippleEnabled) {
        var rippleSpan = this.createElement("span", {
          className: RIPPLE3
        });
        handle.appendChild(rippleSpan);
        rippleEffect(rippleSpan, {
          duration: 400,
          isCenterRipple: true
        });
      }
      wrapper.classList.add("e-wrapper");
      if (this.enableRtl) {
        wrapper.classList.add(RTL3);
      }
      if (this.cssClass) {
        addClass([wrapper], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
      }
    };
    Switch2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var wrapper = this.getWrapper();
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "checked":
            this.changeState(newProp.checked);
            break;
          case "disabled":
            if (newProp.disabled) {
              this.setDisabled();
              this.unWireEvents();
              this.isWireEvents = false;
            } else {
              this.element.disabled = false;
              wrapper.classList.remove(DISABLED2);
              wrapper.setAttribute("aria-disabled", "false");
              if (!this.isWireEvents) {
                this.wireEvents();
                this.isWireEvents = true;
              }
            }
            break;
          case "value":
            this.element.setAttribute("value", newProp.value);
            break;
          case "name":
            this.element.setAttribute("name", newProp.name);
            break;
          case "onLabel":
          case "offLabel":
            this.setLabel(newProp.onLabel, newProp.offLabel);
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              wrapper.classList.add(RTL3);
            } else {
              wrapper.classList.remove(RTL3);
            }
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([wrapper], oldProp.cssClass.split(/\s+/).filter(function(c) {
                return c.length > 0;
              }));
            }
            if (newProp.cssClass) {
              addClass([wrapper], newProp.cssClass.replace(/\s+/g, " ").trim().split(" "));
            }
            break;
          case "htmlAttributes":
            this.updateHtmlAttribute();
            break;
        }
      }
    };
    Switch2.prototype.preRender = function() {
      var element2 = this.element;
      this.formElement = closest(this.element, "form");
      this.tagName = this.element.tagName;
      preRender(this, "EJS-SWITCH", WRAPPER3, element2, this.getModuleName());
    };
    Switch2.prototype.render = function() {
      this.initWrapper();
      this.initialize();
      if (!this.disabled) {
        this.wireEvents();
      }
      if (this.formElement) {
        EventHandler.add(this.formElement, "reset", this.formResetHandler, this);
      }
      this.renderComplete();
      this.updateHtmlAttribute();
    };
    Switch2.prototype.rippleHandler = function(e) {
      var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE3)[0];
      rippleMouseHandler(e, rippleSpan);
      if (e.type === "mousedown" && e.currentTarget.classList.contains("e-switch-wrapper") && e.which === 1) {
        this.isDrag = true;
        this.isFocused = false;
      }
    };
    Switch2.prototype.mouseLeaveHandler = function(e) {
      var rippleSpan = this.element.parentElement.getElementsByClassName(RIPPLE3)[0];
      if (rippleSpan) {
        var rippleElem = rippleSpan.querySelectorAll(".e-ripple-element");
        for (var i = rippleElem.length - 1; i > 0; i--) {
          rippleSpan.removeChild(rippleSpan.childNodes[i]);
        }
        rippleMouseHandler(e, rippleSpan);
      }
    };
    Switch2.prototype.rippleTouchHandler = function(eventType) {
      var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE3)[0];
      if (rippleSpan) {
        var event_1 = document.createEvent("MouseEvents");
        event_1.initEvent(eventType, false, true);
        rippleSpan.dispatchEvent(event_1);
      }
    };
    Switch2.prototype.setDisabled = function() {
      var wrapper = this.getWrapper();
      this.element.disabled = true;
      wrapper.classList.add(DISABLED2);
      wrapper.setAttribute("aria-disabled", "true");
    };
    Switch2.prototype.setLabel = function(onText, offText) {
      var wrapper = this.getWrapper();
      if (onText) {
        wrapper.querySelector(".e-switch-on").textContent = onText;
      }
      if (offText) {
        wrapper.querySelector(".e-switch-off").textContent = offText;
      }
    };
    Switch2.prototype.updateHtmlAttribute = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          var wrapper = this.getWrapper();
          if (ATTRIBUTES2.indexOf(key) > -1) {
            if (key === "class") {
              addClass([wrapper], this.htmlAttributes["" + key].split(" "));
            } else if (key === "title") {
              wrapper.setAttribute(key, this.htmlAttributes["" + key]);
            } else if (key === "style") {
              wrapper.setAttribute(key, this.htmlAttributes["" + key]);
            } else if (key === "disabled") {
              if (this.htmlAttributes["" + key] === "true") {
                this.setDisabled();
              }
              this.element.setAttribute(key, this.htmlAttributes["" + key]);
            } else {
              this.element.setAttribute(key, this.htmlAttributes["" + key]);
            }
          } else {
            wrapper.setAttribute(key, this.htmlAttributes["" + key]);
          }
        }
      }
    };
    Switch2.prototype.switchFocusHandler = function(e) {
      if (this.isFocused) {
        this.getWrapper().classList.add("e-focus");
      }
      if (e && e.type === "keyup" && e.code === "Space" && this.isAngular) {
        this.clickHandler(e);
        e.stopPropagation();
        e.preventDefault();
      }
    };
    Switch2.prototype.switchMouseUp = function(e) {
      var aTouchY = 0;
      var yDiff = 0;
      var aTouchX = 0;
      var xDiff = 0;
      var target = e.target;
      if (e.type === "touchmove") {
        e.preventDefault();
        aTouchX = e.changedTouches[0].clientX;
        aTouchY = e.changedTouches[0].clientY;
        xDiff = this.bTouchX - aTouchX;
        yDiff = this.bTouchY - aTouchY;
        if (Math.abs(xDiff) < Math.abs(yDiff)) {
          this.isDrag = false;
          this.rippleTouchHandler("mouseup");
        } else {
          this.isDrag = true;
        }
      }
      if (e.type === "touchstart") {
        this.bTouchX = e.changedTouches[0].clientX;
        this.bTouchY = e.changedTouches[0].clientY;
        this.isDrag = true;
        this.rippleTouchHandler("mousedown");
      }
      if (this.isDrag) {
        if (e.type === "mouseup" && target.className.indexOf("e-switch") < 0 || e.type === "touchend") {
          xDiff = this.bTouchX - e.changedTouches[0].clientX;
          yDiff = this.bTouchY - e.changedTouches[0].clientY;
          if (Math.abs(xDiff) >= Math.abs(yDiff)) {
            this.clickHandler(e);
            this.rippleTouchHandler("mouseup");
            e.preventDefault();
          }
        }
      }
    };
    Switch2.prototype.formResetHandler = function() {
      this.checked = this.initialSwitchCheckedValue;
      this.element.checked = this.initialSwitchCheckedValue;
    };
    Switch2.prototype.toggle = function() {
      this.clickHandler();
    };
    Switch2.prototype.wireEvents = function() {
      var wrapper = this.getWrapper();
      this.delegateMouseUpHandler = this.switchMouseUp.bind(this);
      this.delegateKeyUpHandler = this.switchFocusHandler.bind(this);
      EventHandler.add(wrapper, "click", this.clickHandler, this);
      EventHandler.add(this.element, "focus", this.focusHandler, this);
      EventHandler.add(this.element, "focusout", this.focusOutHandler, this);
      EventHandler.add(this.element, "mouseup", this.delegateMouseUpHandler, this);
      EventHandler.add(this.element, "keyup", this.delegateKeyUpHandler, this);
      EventHandler.add(wrapper, "mousedown mouseup", this.rippleHandler, this);
      EventHandler.add(wrapper, "mouseleave", this.mouseLeaveHandler, this);
      EventHandler.add(wrapper, "touchstart touchmove touchend", this.switchMouseUp, this);
    };
    Switch2.prototype.unWireEvents = function() {
      var wrapper = this.getWrapper();
      if (wrapper) {
        EventHandler.remove(wrapper, "click", this.clickHandler);
        EventHandler.remove(wrapper, "mousedown mouseup", this.rippleHandler);
        EventHandler.remove(wrapper, "mouseleave", this.mouseLeaveHandler);
        EventHandler.remove(wrapper, "touchstart touchmove touchend", this.switchMouseUp);
      }
      if (this.element) {
        EventHandler.remove(this.element, "focus", this.focusHandler);
        EventHandler.remove(this.element, "focusout", this.focusOutHandler);
        EventHandler.remove(this.element, "mouseup", this.delegateMouseUpHandler);
        EventHandler.remove(this.element, "keyup", this.delegateKeyUpHandler);
      }
    };
    Switch2.prototype.click = function() {
      this.element.click();
    };
    Switch2.prototype.focusIn = function() {
      this.element.focus();
    };
    __decorate4([Event()], Switch2.prototype, "beforeChange", void 0);
    __decorate4([Event()], Switch2.prototype, "change", void 0);
    __decorate4([Event()], Switch2.prototype, "created", void 0);
    __decorate4([Property(false)], Switch2.prototype, "checked", void 0);
    __decorate4([Property("")], Switch2.prototype, "cssClass", void 0);
    __decorate4([Property(false)], Switch2.prototype, "disabled", void 0);
    __decorate4([Property("")], Switch2.prototype, "name", void 0);
    __decorate4([Property("")], Switch2.prototype, "onLabel", void 0);
    __decorate4([Property("")], Switch2.prototype, "offLabel", void 0);
    __decorate4([Property("")], Switch2.prototype, "value", void 0);
    __decorate4([Property({})], Switch2.prototype, "htmlAttributes", void 0);
    Switch2 = __decorate4([NotifyPropertyChanges], Switch2);
    return Switch2;
  }(Component)
);

// node_modules/@syncfusion/ej2-buttons/src/chips/chip-list.js
var __extends6 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate5 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var classNames = {
  chipSet: "e-chip-set",
  chip: "e-chip",
  avatar: "e-chip-avatar",
  text: "e-chip-text",
  icon: "e-chip-icon",
  delete: "e-chip-delete",
  deleteIcon: "e-dlt-btn",
  multiSelection: "e-multi-selection",
  singleSelection: "e-selection",
  active: "e-active",
  chipWrapper: "e-chip-avatar-wrap",
  iconWrapper: "e-chip-icon-wrap",
  focused: "e-focused",
  disabled: "e-disabled",
  rtl: "e-rtl",
  template: "e-chip-template",
  chipList: "e-chip-list",
  customIcon: "e-icons",
  chipDrag: "e-chip-drag",
  dragAndDrop: "e-drag-and-drop",
  dropRestricted: "e-error-treeview",
  cloneChip: "e-clone-chip",
  dragIndicator: "e-drag-indicator"
};
var ChipList = (
  /** @class */
  function(_super) {
    __extends6(ChipList2, _super);
    function ChipList2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.multiSelectedChip = [];
      return _this;
    }
    ChipList_1 = ChipList2;
    ChipList2.prototype.preRender = function() {
    };
    ChipList2.prototype.chipType = function() {
      return this.chips && this.chips.length && this.chips.length > 0;
    };
    ChipList2.prototype.render = function() {
      this.type = !isNullOrUndefined(this.chips) && this.chips.length ? "chipset" : this.text || this.element.innerText ? "chip" : "chipset";
      this.setAttributes();
      this.createChip();
      this.setRtl();
      this.select(this.selectedChips);
      this.wireEvent(false);
      this.rippleFunction = rippleEffect(this.element, {
        selector: "." + classNames.chip
      });
      this.renderComplete();
      this.dragCollection = [];
      if (this.allowDragAndDrop) {
        this.enableDraggingChips();
      }
    };
    ChipList2.prototype.enableDraggingChips = function() {
      var _this = this;
      var clonedChipElement;
      var chipElements = this.element.querySelectorAll("." + classNames.chip);
      chipElements.forEach(function(chip, index) {
        _this.dragObj = new Draggable(chip, {
          preventDefault: false,
          clone: true,
          dragArea: _this.dragArea,
          helper: function() {
            clonedChipElement = chip.cloneNode(true);
            clonedChipElement.classList.add(classNames.cloneChip);
            _this.element.appendChild(clonedChipElement);
            return clonedChipElement;
          },
          dragStart: function(args) {
            _this.dragIndicator = _this.createElement("div", {
              className: classNames.dragIndicator
            });
            document.body.appendChild(_this.dragIndicator);
            var chipData = _this.find(args.element);
            var dragStartArgs = {
              cancel: false,
              event: args.event,
              draggedItem: args.element,
              draggedItemData: chipData,
              dropTarget: null
            };
            _this.trigger("dragStart", dragStartArgs, function() {
              if (isNullOrUndefined(dragStartArgs.cancel)) {
                dragStartArgs.cancel = false;
              }
            });
            if (!dragStartArgs.cancel) {
              clonedChipElement.setAttribute("drag-indicator-index", index.toString());
            } else {
              _this.dragObj.intDestroy(args.event);
            }
          },
          drag: function(args) {
            var chipData = _this.find(args.element);
            var draggingArgs = {
              event: args.event,
              draggedItem: args.element,
              draggedItemData: chipData,
              dropTarget: null
            };
            _this.trigger("dragging", draggingArgs);
            var draggingIconEle = clonedChipElement.querySelector("." + classNames.chipDrag);
            if (isNullOrUndefined(draggingIconEle)) {
              draggingIconEle = _this.createElement("span", {
                className: classNames.customIcon + " " + classNames.dragAndDrop + " " + classNames.chipDrag
              });
              clonedChipElement.prepend(draggingIconEle);
            }
            _this.allowExternalDragging(args, clonedChipElement, draggingIconEle);
          },
          dragStop: function(args) {
            var chipData = _this.find(args.element);
            var dragStopArgs = {
              cancel: false,
              event: args.event,
              draggedItem: args.element,
              draggedItemData: chipData,
              dropTarget: args.target
            };
            _this.trigger("dragStop", dragStopArgs, function() {
              if (isNullOrUndefined(dragStopArgs.cancel)) {
                dragStopArgs.cancel = false;
              }
            });
            if (!dragStopArgs.cancel) {
              _this.allowExternalDrop(args, clonedChipElement);
            }
            if (!isNullOrUndefined(_this.dragIndicator)) {
              remove(_this.dragIndicator);
            }
            if (!isNullOrUndefined(clonedChipElement)) {
              clonedChipElement.remove();
            }
          }
        });
        if (_this.dragCollection.indexOf(_this.dragObj) === -1) {
          _this.dragCollection.push(_this.dragObj);
        }
      });
    };
    ChipList2.prototype.checkInstance = function(args, context) {
      var isInstanceMatched = !isNullOrUndefined(args.target.closest("." + classNames.chipList)) && args.target.closest("." + classNames.chipList).id !== context.element.id;
      if (isInstanceMatched) {
        this.updatedInstance = args.target.closest("." + classNames.chipList);
      }
      return isInstanceMatched;
    };
    ChipList2.prototype.setIcons = function(currentInstance, draggingIconEle, target, indicatorEle, outOfDragArea) {
      var isTargetInside = currentInstance.element.contains(target);
      var isDroppable = target.closest(".e-droppable");
      if ((isTargetInside || isDroppable) && !outOfDragArea) {
        draggingIconEle.classList.add(classNames.dragAndDrop);
        draggingIconEle.classList.remove(classNames.dropRestricted);
        if (isDroppable) {
          indicatorEle.style.display = "none";
        }
      } else {
        draggingIconEle.classList.remove(classNames.dragAndDrop);
        draggingIconEle.classList.add(classNames.dropRestricted);
        indicatorEle.style.display = "none";
      }
    };
    ChipList2.prototype.allowExternalDragging = function(args, clonedChipElement, draggingIconEle) {
      var currentInstance;
      var closestChip = null;
      var closestDistance = Infinity;
      var newIndex = -1;
      var outOfDragArea = false;
      if (this.checkInstance(args, this)) {
        this.dragIndicator.style.display = "none";
        currentInstance = this.getCurrentInstance(args);
        currentInstance.dragIndicator = this.dragIndicator;
        if (!currentInstance.allowDragAndDrop) {
          return;
        }
      } else {
        currentInstance = this;
      }
      var indicatorEle = currentInstance.dragIndicator;
      indicatorEle.style.display = "inline";
      outOfDragArea = this.dragAreaCheck(this.dragArea, args.target, outOfDragArea, draggingIconEle, indicatorEle);
      this.setIcons(currentInstance, draggingIconEle, args.target, indicatorEle, outOfDragArea);
      currentInstance.element.appendChild(clonedChipElement);
      var droppedRect = clonedChipElement.getBoundingClientRect();
      var allChips = Array.from(currentInstance.element.querySelectorAll("." + classNames.chip));
      allChips.forEach(function(chip, i) {
        if (chip !== clonedChipElement) {
          var rect_1 = chip.getBoundingClientRect();
          var distance = Math.sqrt(Math.pow(droppedRect.left - rect_1.left, 2) + Math.pow(droppedRect.top - rect_1.top, 2));
          if (distance < closestDistance) {
            closestDistance = distance;
            closestChip = chip;
            newIndex = i;
          }
        }
      });
      if (newIndex === -1) {
        newIndex = allChips.length;
      }
      var chipsDistance = this.getChipsDistance(currentInstance);
      var cloneRect = clonedChipElement.getBoundingClientRect();
      var rect;
      if (closestChip || allChips.length > 0) {
        var targetChip = closestChip || allChips[allChips.length - 1];
        rect = targetChip.getBoundingClientRect();
        indicatorEle.style.top = rect.top + window.scrollY + "px";
        indicatorEle.style.left = currentInstance.enableRtl ? rect.right + chipsDistance + "px" : rect.left - chipsDistance + window.scrollX + "px";
      }
      if (currentInstance.enableRtl) {
        if (cloneRect.left < rect.left - rect.width / 2 && cloneRect.top > rect.top) {
          indicatorEle.style.left = rect.left - chipsDistance + window.scrollX + "px";
        }
      } else if (cloneRect.left > rect.left + rect.width / 2 && cloneRect.top > rect.top) {
        indicatorEle.style.left = rect.left + rect.width + chipsDistance + window.scrollX + "px";
      }
    };
    ChipList2.prototype.dragAreaCheck = function(dragArea, target, outOfDragArea, draggingIconEle, indicatorEle) {
      if (isNullOrUndefined(dragArea)) {
        return false;
      }
      var isString = typeof dragArea === "string";
      var isHtmlElement = dragArea instanceof HTMLElement;
      var dragAreaElement = isString ? document.querySelector(dragArea) : dragArea;
      if (!isNullOrUndefined(dragAreaElement)) {
        if ((isString || isHtmlElement) && !dragAreaElement.contains(target)) {
          outOfDragArea = true;
          indicatorEle.style.display = "none";
          draggingIconEle.classList.add(classNames.dropRestricted);
          draggingIconEle.classList.remove(classNames.dragAndDrop);
        }
      }
      return outOfDragArea;
    };
    ChipList2.prototype.getChipsDistance = function(currentInstance) {
      var constValue = 4;
      if (currentInstance.chips.length <= 1) {
        return constValue;
      }
      var constantDistance;
      var firstChipClientRect = currentInstance.find(0).element.getBoundingClientRect();
      var secondChipClientRect = currentInstance.find(1).element.getBoundingClientRect();
      var firstChipLeft = firstChipClientRect.left;
      if (currentInstance.enableRtl) {
        var secondChipRight = secondChipClientRect.right;
        constantDistance = firstChipLeft < secondChipRight ? constValue : (firstChipLeft - secondChipRight) / 2;
        return constantDistance;
      } else {
        var firstChipWidth = firstChipClientRect.width;
        var secondChipLeft = secondChipClientRect.left;
        constantDistance = secondChipLeft < firstChipLeft + firstChipWidth ? constValue : (secondChipLeft - (firstChipLeft + firstChipWidth)) / 2;
        return constantDistance;
      }
    };
    ChipList2.prototype.getCurrentInstance = function(args) {
      var chipContainer = args.target.closest("." + classNames.chipList);
      if (!isNullOrUndefined(chipContainer) && !isNullOrUndefined(chipContainer.ej2_instances)) {
        for (var i = 0; i < chipContainer.ej2_instances.length; i++) {
          if (chipContainer.ej2_instances[parseInt(i.toString(), 10)] instanceof ChipList_1) {
            return chipContainer.ej2_instances[i];
          }
        }
      }
      return null;
    };
    ChipList2.prototype.allowExternalDrop = function(args, clonedChipElement) {
      var originalIndex = parseInt(clonedChipElement.getAttribute("drag-indicator-index"), 10);
      var currentInstance;
      var outOfDragArea = false;
      var isInstanceChanged = false;
      if (this.checkInstance(args, this)) {
        isInstanceChanged = true;
        currentInstance = this.getCurrentInstance(args);
        if (!currentInstance.allowDragAndDrop) {
          return;
        }
      } else {
        currentInstance = this;
      }
      var indicatorEle = currentInstance.dragIndicator;
      indicatorEle.style.display = "inline";
      if (!currentInstance.element.contains(args.target)) {
        return;
      }
      outOfDragArea = this.dragAreaCheck(this.dragArea, args.target, outOfDragArea, clonedChipElement.querySelector("." + classNames.chipDrag), indicatorEle);
      if (outOfDragArea) {
        return;
      }
      var indicatorRect = indicatorEle.getBoundingClientRect();
      var allChips = Array.from(currentInstance.element.querySelectorAll("." + classNames.chip));
      var newIndex = -1;
      var topOffset = false;
      var leftOffset = false;
      var rightOffset = false;
      for (var i = 0; i < allChips.length; i++) {
        if (allChips[i] !== clonedChipElement) {
          var chipRect = allChips[i].getBoundingClientRect();
          topOffset = indicatorRect.top < chipRect.top + chipRect.height / 2;
          leftOffset = indicatorRect.left < chipRect.left + chipRect.width / 2;
          rightOffset = indicatorRect.left > chipRect.left + chipRect.width / 2;
          if (!currentInstance.enableRtl && topOffset && leftOffset || currentInstance.enableRtl && topOffset && rightOffset) {
            newIndex = i;
            if (i > originalIndex && !isInstanceChanged) {
              newIndex = i - 1;
            }
            break;
          }
        }
      }
      if (newIndex === -1) {
        var nextChipIndex = void 0;
        for (var i = 0; i < allChips.length; i++) {
          var chipRect = allChips[i].getBoundingClientRect();
          if (chipRect.top > indicatorRect.top || chipRect.top === indicatorRect.top && chipRect.left > indicatorRect.left) {
            nextChipIndex = i;
            break;
          }
        }
        if (nextChipIndex !== allChips.length) {
          newIndex = nextChipIndex;
        } else {
          newIndex = allChips.length;
        }
      }
      var currentChipList = Array.from(this.chips);
      if (isInstanceChanged) {
        this.dropChip(currentChipList, originalIndex, currentInstance, newIndex, true);
      } else if (newIndex !== originalIndex) {
        this.dropChip(currentChipList, originalIndex, currentInstance, newIndex, false);
      }
    };
    ChipList2.prototype.dropChip = function(currentChipList, originalIndex, currentInstance, newIndex, instanceChanged) {
      var draggedChip = currentChipList.splice(originalIndex, 1)[0];
      if (!instanceChanged) {
        currentChipList.splice(newIndex, 0, draggedChip);
        currentInstance.chips = currentChipList;
      } else {
        var newChips = Array.from(currentInstance.chips);
        newChips.splice(newIndex, 0, draggedChip);
        currentInstance.chips = newChips;
      }
      this.chips = currentChipList;
      currentInstance.dataBind();
      this.dataBind();
      currentInstance.enableDraggingChips();
    };
    ChipList2.prototype.createChip = function() {
      this.innerText = this.element.innerText && this.element.innerText.length !== 0 ? this.element.innerText.trim() : this.element.innerText;
      this.element.innerHTML = "";
      this.chipCreation(this.type === "chip" ? [this.innerText ? this.innerText : this.text] : this.chips);
    };
    ChipList2.prototype.setAttributes = function() {
      if (this.type === "chip") {
        if (this.enabled) {
          this.element.tabIndex = 0;
        }
        this.element.setAttribute("role", "button");
      } else {
        this.element.classList.add(classNames.chipSet);
        this.element.setAttribute("role", "listbox");
        if (this.selection === "Multiple") {
          this.element.classList.add(classNames.multiSelection);
          this.element.setAttribute("aria-multiselectable", "true");
        } else if (this.selection === "Single") {
          this.element.classList.add(classNames.singleSelection);
          this.element.setAttribute("aria-multiselectable", "false");
        } else {
          this.element.setAttribute("aria-multiselectable", "false");
        }
      }
    };
    ChipList2.prototype.setRtl = function() {
      this.element.classList[this.enableRtl ? "add" : "remove"](classNames.rtl);
    };
    ChipList2.prototype.renderTemplates = function() {
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    ChipList2.prototype.templateParser = function(template) {
      if (template) {
        try {
          if (typeof template !== "function" && document.querySelectorAll(template).length) {
            return compile(document.querySelector(template).innerHTML.trim());
          } else {
            return compile(template);
          }
        } catch (error) {
          return compile(template);
        }
      }
      return void 0;
    };
    ChipList2.prototype.chipCreation = function(data) {
      if (isNullOrUndefined(data)) {
        return;
      }
      var chipListArray = [];
      var attributeArray = [];
      for (var i = 0; i < data.length; i++) {
        var fieldsData = this.getFieldValues(data[i]);
        var attributesValue = fieldsData.htmlAttributes;
        attributeArray.push(attributesValue);
        var chipArray = this.elementCreation(fieldsData);
        var className = (classNames.chip + " " + (fieldsData.enabled ? " " : classNames.disabled) + " " + (fieldsData.avatarIconCss || fieldsData.avatarText ? classNames.chipWrapper : fieldsData.leadingIconCss ? classNames.iconWrapper : " ") + " " + fieldsData.cssClass).split(" ").filter(function(css) {
          return css;
        });
        if (!this.chipType() || this.type === "chip") {
          chipListArray = chipArray;
          addClass([this.element], className);
          this.element.setAttribute("aria-label", fieldsData.text);
          if (fieldsData.value) {
            this.element.setAttribute("data-value", fieldsData.value.toString());
          }
        } else {
          var wrapper = this.createElement("DIV", {
            className: className.join(" "),
            attrs: {
              tabIndex: "0",
              role: "option",
              "aria-label": fieldsData.text,
              "aria-selected": "false"
            }
          });
          if (this.enableDelete) {
            wrapper.setAttribute("aria-keyshortcuts", "Press delete or backspace key to delete");
          }
          if (fieldsData.value) {
            wrapper.setAttribute("data-value", fieldsData.value.toString());
          }
          if (fieldsData.enabled) {
            wrapper.setAttribute("aria-disabled", "false");
          } else {
            wrapper.removeAttribute("tabindex");
            wrapper.setAttribute("aria-disabled", "true");
          }
          if (!isNullOrUndefined(attributeArray[i])) {
            if (attributeArray.length > i && Object.keys(attributeArray[i]).length) {
              var htmlAttr = [];
              htmlAttr = Object.keys(attributeArray[i]);
              for (var j = 0; j < htmlAttr.length; j++) {
                wrapper.setAttribute(htmlAttr[j], attributeArray[i][htmlAttr[j]]);
              }
            }
          }
          append(chipArray, wrapper);
          chipListArray.push(wrapper);
        }
      }
      append(chipListArray, this.element);
    };
    ChipList2.prototype.getFieldValues = function(data) {
      var chipEnabled = !(this.enabled.toString() === "false");
      var fields = {
        text: typeof data === "object" ? data.text ? data.text.toString() : this.text.toString() : !this.chipType() ? this.innerText ? this.innerText : this.text.toString() : data.toString(),
        cssClass: typeof data === "object" ? data.cssClass ? data.cssClass.toString() : this.cssClass.toString() : this.cssClass.toString(),
        leadingIconCss: typeof data === "object" ? data.leadingIconCss ? data.leadingIconCss.toString() : this.leadingIconCss.toString() : this.leadingIconCss.toString(),
        avatarIconCss: typeof data === "object" ? data.avatarIconCss ? data.avatarIconCss.toString() : this.avatarIconCss.toString() : this.avatarIconCss.toString(),
        avatarText: typeof data === "object" ? data.avatarText ? data.avatarText.toString() : this.avatarText.toString() : this.avatarText.toString(),
        trailingIconCss: typeof data === "object" ? data.trailingIconCss ? data.trailingIconCss.toString() : this.trailingIconCss.toString() : this.trailingIconCss.toString(),
        enabled: typeof data === "object" ? data.enabled !== void 0 ? data.enabled.toString() === "false" ? false : true : chipEnabled : chipEnabled,
        value: typeof data === "object" ? data.value ? data.value.toString() : null : null,
        leadingIconUrl: typeof data === "object" ? data.leadingIconUrl ? data.leadingIconUrl.toString() : this.leadingIconUrl : this.leadingIconUrl,
        trailingIconUrl: typeof data === "object" ? data.trailingIconUrl ? data.trailingIconUrl.toString() : this.trailingIconUrl : this.trailingIconUrl,
        htmlAttributes: typeof data === "object" ? data.htmlAttributes ? data.htmlAttributes : this.htmlAttributes : this.htmlAttributes,
        template: typeof data === "object" ? data.template ? data.template : null : null
      };
      return fields;
    };
    ChipList2.prototype.elementCreation = function(fields) {
      var chipArray = [];
      if (fields.avatarText || fields.avatarIconCss) {
        var className = (classNames.avatar + " " + fields.avatarIconCss).trim();
        var chipAvatarElement = this.createElement("span", {
          className
        });
        chipAvatarElement.innerText = fields.avatarText;
        chipArray.push(chipAvatarElement);
      } else if (fields.leadingIconCss) {
        var className = (classNames.icon + " " + fields.leadingIconCss).trim();
        var chipIconElement = this.createElement("span", {
          className
        });
        chipArray.push(chipIconElement);
      } else if (fields.leadingIconUrl) {
        var className = (classNames.avatar + " image-url").trim();
        var chipIconElement = this.createElement("span", {
          className
        });
        chipIconElement.style.backgroundImage = "url(" + fields.leadingIconUrl + ")";
        chipArray.push(chipIconElement);
      }
      var chipTextElement = this.createElement("span", {
        className: classNames.text
      });
      chipTextElement.innerText = fields.text;
      chipArray.push(chipTextElement);
      if (fields.template) {
        var templateWrapper = this.createElement("div", {
          className: classNames.template
        });
        var templateContent = this.templateParser(fields.template)(fields, this, "template", this.element.id + "_template", false);
        append(templateContent, templateWrapper);
        chipArray.push(templateWrapper);
        this.renderTemplates();
      }
      if (fields.trailingIconCss || this.chipType() && this.enableDelete) {
        var className = (classNames.delete + " " + (fields.trailingIconCss ? fields.trailingIconCss : classNames.deleteIcon)).trim();
        var chipdeleteElement = this.createElement("span", {
          className
        });
        chipArray.push(chipdeleteElement);
      } else if (fields.trailingIconUrl) {
        var className = "trailing-icon-url".trim();
        var chipIconsElement = this.createElement("span", {
          className
        });
        chipIconsElement.style.backgroundImage = "url(" + fields.trailingIconUrl + ")";
        chipArray.push(chipIconsElement);
      }
      return chipArray;
    };
    ChipList2.prototype.find = function(fields) {
      var chipData = {
        text: "",
        index: -1,
        element: this.element,
        data: ""
      };
      var chipElement = fields instanceof HTMLElement ? fields : this.element.querySelectorAll("." + classNames.chip)[fields];
      if (chipElement && this.chipType()) {
        chipData.index = Array.prototype.slice.call(this.element.querySelectorAll("." + classNames.chip)).indexOf(chipElement);
        var chip = this.chips[chipData.index];
        if (typeof chip === "object" && chip !== null) {
          var chipModel = chip;
          if (chipModel.text !== void 0) {
            chipData.text = chipModel.text.toString();
          }
        } else if (chip !== void 0) {
          chipData.text = chip.toString();
        }
        chipData.data = chip;
        chipData.element = chipElement;
      }
      return chipData;
    };
    ChipList2.prototype.add = function(chipsData) {
      var _a;
      if (this.type !== "chip") {
        var fieldData = chipsData instanceof Array ? chipsData : [chipsData];
        this.chips = (_a = [].slice.call(this.chips)).concat.apply(_a, fieldData);
        this.chipCreation(fieldData);
      }
    };
    ChipList2.prototype.select = function(fields, selectionType) {
      this.onSelect(fields, false, selectionType);
    };
    ChipList2.prototype.multiSelection = function(newProp) {
      var items = this.element.querySelectorAll("." + classNames.chip);
      for (var j = 0; j < newProp.length; j++) {
        if (typeof newProp[j] === "string") {
          for (var k = 0; k < items.length; k++) {
            if (newProp[j] !== k) {
              if (newProp[j] === items[k].attributes[5].value) {
                this.multiSelectedChip.push(k);
                break;
              }
            }
          }
        } else {
          this.multiSelectedChip.push(newProp[j]);
        }
      }
    };
    ChipList2.prototype.onSelect = function(fields, callFromProperty, selectionType) {
      var index;
      var chipNodes;
      var chipValue = null;
      if (this.chipType() && this.selection !== "None") {
        if (callFromProperty) {
          var chipElements = this.element.querySelectorAll("." + classNames.chip);
          for (var i = 0; i < chipElements.length; i++) {
            chipElements[i].setAttribute("aria-selected", "false");
            chipElements[i].classList.remove(classNames.active);
          }
        }
        var fieldData = fields instanceof Array ? fields : [fields];
        for (var i = 0; i < fieldData.length; i++) {
          var chipElement = fieldData[i] instanceof HTMLElement ? fieldData[i] : this.element.querySelectorAll("." + classNames.chip)[fieldData[i]];
          if (selectionType !== "index") {
            for (var j = 0; j < this.chips.length; j++) {
              chipNodes = this.element.querySelectorAll("." + classNames.chip)[j];
              var fieldsData = this.getFieldValues(this.chips[j]);
              if (selectionType === "value") {
                if (fieldsData.value !== null) {
                  chipValue = chipNodes.dataset.value;
                }
              } else if (selectionType === "text") {
                chipValue = chipNodes.innerText;
              }
              if (chipValue === fieldData[i].toString()) {
                index = j;
                chipElement = this.element.querySelectorAll("." + classNames.chip)[index];
              }
            }
          }
          if (chipElement instanceof HTMLElement) {
            this.selectionHandler(chipElement);
          }
        }
      }
    };
    ChipList2.prototype.remove = function(fields) {
      var _this = this;
      if (this.chipType()) {
        var fieldData = fields instanceof Array ? fields : [fields];
        var chipElements_1 = [];
        var chipCollection_1 = this.element.querySelectorAll("." + classNames.chip);
        fieldData.forEach(function(data) {
          var chipElement = data instanceof HTMLElement ? data : chipCollection_1[data];
          if (chipElement instanceof HTMLElement) {
            chipElements_1.push(chipElement);
          }
        });
        chipElements_1.forEach(function(element2) {
          var chips = _this.element.querySelectorAll("." + classNames.chip);
          var index = Array.prototype.slice.call(chips).indexOf(element2);
          _this.deleteHandler(element2, index);
        });
      }
    };
    ChipList2.prototype.getSelectedChips = function() {
      var selectedChips;
      if (this.chipType() && this.selection !== "None") {
        var selectedItems = {
          texts: [],
          Indexes: [],
          data: [],
          elements: []
        };
        var items = this.element.querySelectorAll("." + classNames.active);
        for (var i = 0; i < items.length; i++) {
          var chip = items[i];
          selectedItems.elements.push(chip);
          var index = Array.prototype.slice.call(this.element.querySelectorAll("." + classNames.chip)).indexOf(chip);
          selectedItems.Indexes.push(index);
          selectedItems.data.push(this.chips[index]);
          var text = typeof this.chips[index] === "object" ? this.chips[index].text ? this.chips[index].text : null : this.chips[index].toString();
          selectedItems.texts.push(text);
        }
        var selectedItem = {
          text: selectedItems.texts[0],
          index: selectedItems.Indexes[0],
          data: selectedItems.data[0],
          element: selectedItems.elements[0]
        };
        selectedChips = !isNullOrUndefined(selectedItem.index) ? this.selection === "Multiple" ? selectedItems : selectedItem : void 0;
      }
      return selectedChips;
    };
    ChipList2.prototype.wireEvent = function(unWireEvent) {
      if (!unWireEvent) {
        EventHandler.add(this.element, "click", this.clickHandler, this);
        EventHandler.add(this.element, "focusout", this.focusOutHandler, this);
        EventHandler.add(this.element, "keydown", this.keyHandler, this);
        EventHandler.add(this.element, "keyup", this.keyHandler, this);
      } else {
        EventHandler.remove(this.element, "click", this.clickHandler);
        EventHandler.remove(this.element, "focusout", this.focusOutHandler);
        EventHandler.remove(this.element, "keydown", this.keyHandler);
        EventHandler.remove(this.element, "keyup", this.keyHandler);
      }
    };
    ChipList2.prototype.keyHandler = function(e) {
      if (e.target.classList.contains(classNames.chip)) {
        if (e.type === "keydown") {
          if (e.keyCode === 13 || e.keyCode === 32) {
            this.clickHandler(e);
          } else if ((e.keyCode === 46 || e.keyCode === 8) && this.enableDelete) {
            this.clickHandler(e, true);
          }
        } else if (e.keyCode === 9) {
          this.focusInHandler(e.target);
        }
      }
    };
    ChipList2.prototype.focusInHandler = function(chipWrapper) {
      if (!chipWrapper.classList.contains(classNames.focused)) {
        chipWrapper.classList.add(classNames.focused);
      }
    };
    ChipList2.prototype.focusOutHandler = function(e) {
      var chipWrapper = closest(e.target, "." + classNames.chip);
      var focusedElement = !this.chipType() ? this.element.classList.contains(classNames.focused) ? this.element : null : this.element.querySelector("." + classNames.focused);
      if (chipWrapper && focusedElement) {
        focusedElement.classList.remove(classNames.focused);
      }
    };
    ChipList2.prototype.clickHandler = function(e, del) {
      var _this = this;
      if (del === void 0) {
        del = false;
      }
      var chipWrapper = closest(e.target, "." + classNames.chip);
      if (chipWrapper) {
        var chipDataArgs = void 0;
        if (this.chipType()) {
          chipDataArgs = this.find(chipWrapper);
        } else {
          var index = Array.prototype.slice.call(this.element.querySelectorAll("." + classNames.chip)).indexOf(chipWrapper);
          chipDataArgs = {
            text: this.innerText ? this.innerText : this.text,
            element: chipWrapper,
            data: this.text,
            index
          };
        }
        chipDataArgs.event = e;
        chipDataArgs.cancel = false;
        this.trigger("beforeClick", chipDataArgs, function(observedArgs) {
          if (!observedArgs.cancel) {
            _this.clickEventHandler(observedArgs.element, e, del);
          }
        });
      }
    };
    ChipList2.prototype.clickEventHandler = function(chipWrapper, e, del) {
      var _this = this;
      if (this.chipType()) {
        var chipData_1 = this.find(chipWrapper);
        chipData_1.event = e;
        var deleteElement = e.target.classList.contains(classNames.deleteIcon) ? e.target : del ? chipWrapper.querySelector("." + classNames.deleteIcon) : void 0;
        if (deleteElement && this.enableDelete) {
          chipData_1.cancel = false;
          var deletedItemArgs = chipData_1;
          this.trigger("delete", deletedItemArgs, function(observedArgs) {
            if (!observedArgs.cancel) {
              _this.deleteHandler(observedArgs.element, observedArgs.index);
              _this.selectionHandler(chipWrapper);
              chipData_1.selected = observedArgs.element.classList.contains(classNames.active);
              var selectedItemArgs2 = chipData_1;
              _this.trigger("click", selectedItemArgs2);
              var chipElement = _this.element.querySelectorAll("." + classNames.chip)[observedArgs.index];
              if (chipElement) {
                chipElement.focus();
                _this.focusInHandler(chipElement);
              }
            }
          });
        } else if (this.selection !== "None") {
          this.selectionHandler(chipWrapper);
          chipData_1.selected = chipWrapper.classList.contains(classNames.active);
          var selectedItemArgs = chipData_1;
          this.trigger("click", selectedItemArgs);
        } else {
          this.focusInHandler(chipWrapper);
          var clickedItemArgs = chipData_1;
          this.trigger("click", clickedItemArgs);
        }
      } else {
        this.focusInHandler(chipWrapper);
        var clickedItemArgs = {
          text: this.innerText ? this.innerText : this.text,
          element: chipWrapper,
          data: this.text,
          event: e
        };
        this.trigger("click", clickedItemArgs);
      }
    };
    ChipList2.prototype.selectionHandler = function(chipWrapper) {
      if (this.selection === "Single") {
        var activeElement = this.element.querySelector("." + classNames.active);
        if (activeElement && activeElement !== chipWrapper) {
          activeElement.classList.remove(classNames.active);
          activeElement.setAttribute("aria-selected", "false");
        }
        this.setProperties({
          selectedChips: null
        }, true);
      } else {
        this.setProperties({
          selectedChips: []
        }, true);
      }
      if (chipWrapper.classList.contains(classNames.active)) {
        chipWrapper.classList.remove(classNames.active);
        chipWrapper.setAttribute("aria-selected", "false");
      } else {
        chipWrapper.classList.add(classNames.active);
        chipWrapper.setAttribute("aria-selected", "true");
      }
      this.updateSelectedChips();
    };
    ChipList2.prototype.updateSelectedChips = function() {
      var chipListEle = this.element.querySelectorAll("." + classNames.chip);
      var chipCollIndex = [];
      var chipCollValue = [];
      var chip = null;
      var value = null;
      for (var i = 0; i < chipListEle.length; i++) {
        var selectedEle = this.element.querySelectorAll("." + classNames.chip)[i];
        if (selectedEle.getAttribute("aria-selected") === "true") {
          value = selectedEle.getAttribute("data-value");
          if (this.selection === "Single" && selectedEle.classList.contains("e-active")) {
            chip = value ? value : i;
            break;
          } else {
            chip = value ? chipCollValue.push(value) : chipCollIndex.push(i);
          }
        }
      }
      this.setProperties({
        selectedChips: this.selection === "Single" ? chip : value ? chipCollValue : chipCollIndex
      }, true);
    };
    ChipList2.prototype.deleteHandler = function(chipWrapper, index) {
      var deletedChipData = this.find(chipWrapper);
      this.chips.splice(index, 1);
      this.setProperties({
        chips: this.chips
      }, true);
      detach(chipWrapper);
      this.trigger("deleted", deletedChipData);
    };
    ChipList2.prototype.destroy = function() {
      for (var i = 0; i < this.dragCollection.length; i++) {
        this.dragCollection[i].destroy();
      }
      this.dragCollection = [];
      this.clearTemplate();
      removeClass([this.element], [classNames.chipSet, classNames.chip, classNames.rtl, classNames.multiSelection, classNames.singleSelection, classNames.disabled, classNames.chipWrapper, classNames.iconWrapper, classNames.active, classNames.focused].concat(this.cssClass ? this.cssClass.toString().split(" ").filter(function(css) {
        return css;
      }) : []));
      this.removeMultipleAttributes(["tabindex", "role", "aria-label", "aria-multiselectable"], this.element);
      this.wireEvent(true);
      this.rippleFunction();
      _super.prototype.destroy.call(this);
      this.element.innerHTML = "";
      this.element.innerText = this.innerText;
    };
    ChipList2.prototype.removeMultipleAttributes = function(attributes2, element2) {
      attributes2.forEach(function(attr) {
        element2.removeAttribute(attr);
      });
    };
    ChipList2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    ChipList2.prototype.getModuleName = function() {
      return "chip-list";
    };
    ChipList2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "chips":
          case "text":
          case "avatarText":
          case "avatarIconCss":
          case "leadingIconCss":
          case "trailingIconCss":
          case "selection":
          case "enableDelete":
          case "enabled":
            this.refresh();
            break;
          case "cssClass":
            if (!this.chipType()) {
              removeClass([this.element], oldProp.cssClass.toString().split(" ").filter(function(css) {
                return css;
              }));
              addClass([this.element], newProp.cssClass.toString().split(" ").filter(function(css) {
                return css;
              }));
            } else {
              this.refresh();
            }
            break;
          case "selectedChips":
            removeClass(this.element.querySelectorAll(".e-active"), "e-active");
            if (this.selection === "Multiple") {
              this.multiSelectedChip = [];
              this.multiSelection(newProp.selectedChips);
              this.onSelect(this.multiSelectedChip, true);
              this.updateSelectedChips();
            } else {
              this.onSelect(newProp.selectedChips, true);
            }
            break;
          case "enableRtl":
            this.setRtl();
            break;
          case "allowDragAndDrop":
            for (var i = 0; i < this.dragCollection.length; i++) {
              this.dragCollection[i].destroy();
            }
            this.dragCollection = [];
            if (this.allowDragAndDrop) {
              this.enableDraggingChips();
            }
            break;
          case "dragArea":
            if (this.allowDragAndDrop) {
              for (var i = 0; i < this.dragCollection.length; i++) {
                this.dragCollection[i].dragArea = this.dragArea;
              }
            }
            break;
        }
      }
    };
    var ChipList_1;
    __decorate5([Property([])], ChipList2.prototype, "chips", void 0);
    __decorate5([Property("")], ChipList2.prototype, "text", void 0);
    __decorate5([Property("")], ChipList2.prototype, "avatarText", void 0);
    __decorate5([Property("")], ChipList2.prototype, "avatarIconCss", void 0);
    __decorate5([Property("")], ChipList2.prototype, "htmlAttributes", void 0);
    __decorate5([Property("")], ChipList2.prototype, "leadingIconCss", void 0);
    __decorate5([Property("")], ChipList2.prototype, "trailingIconCss", void 0);
    __decorate5([Property("")], ChipList2.prototype, "leadingIconUrl", void 0);
    __decorate5([Property("")], ChipList2.prototype, "trailingIconUrl", void 0);
    __decorate5([Property("")], ChipList2.prototype, "cssClass", void 0);
    __decorate5([Property(true)], ChipList2.prototype, "enabled", void 0);
    __decorate5([Property([])], ChipList2.prototype, "selectedChips", void 0);
    __decorate5([Property("None")], ChipList2.prototype, "selection", void 0);
    __decorate5([Property(false)], ChipList2.prototype, "enableDelete", void 0);
    __decorate5([Property(false)], ChipList2.prototype, "allowDragAndDrop", void 0);
    __decorate5([Property(null)], ChipList2.prototype, "dragArea", void 0);
    __decorate5([Event()], ChipList2.prototype, "created", void 0);
    __decorate5([Event()], ChipList2.prototype, "click", void 0);
    __decorate5([Event()], ChipList2.prototype, "beforeClick", void 0);
    __decorate5([Event()], ChipList2.prototype, "delete", void 0);
    __decorate5([Event()], ChipList2.prototype, "deleted", void 0);
    __decorate5([Event()], ChipList2.prototype, "dragStart", void 0);
    __decorate5([Event()], ChipList2.prototype, "dragging", void 0);
    __decorate5([Event()], ChipList2.prototype, "dragStop", void 0);
    ChipList2 = ChipList_1 = __decorate5([NotifyPropertyChanges], ChipList2);
    return ChipList2;
  }(Component)
);

// node_modules/@syncfusion/ej2-buttons/src/floating-action-button/floating-action-button.js
var __extends7 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate6 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FABHIDDEN = "e-fab-hidden";
var FIXEDFAB = "e-fab-fixed";
var FABTOP = "e-fab-top";
var FABBOTTOM = "e-fab-bottom";
var FABRIGHT = "e-fab-right";
var FABLEFT = "e-fab-left";
var FABMIDDLE = "e-fab-middle";
var FABCENTER = "e-fab-center";
var FabPosition;
(function(FabPosition2) {
  FabPosition2["TopLeft"] = "TopLeft";
  FabPosition2["TopCenter"] = "TopCenter";
  FabPosition2["TopRight"] = "TopRight";
  FabPosition2["MiddleLeft"] = "MiddleLeft";
  FabPosition2["MiddleCenter"] = "MiddleCenter";
  FabPosition2["MiddleRight"] = "MiddleRight";
  FabPosition2["BottomLeft"] = "BottomLeft";
  FabPosition2["BottomCenter"] = "BottomCenter";
  FabPosition2["BottomRight"] = "BottomRight";
})(FabPosition || (FabPosition = {}));
var Fab = (
  /** @class */
  function(_super) {
    __extends7(Fab2, _super);
    function Fab2(options, element2) {
      return _super.call(this, options, element2) || this;
    }
    Fab2.prototype.render = function() {
      _super.prototype.render.call(this);
      this.initializeFab();
    };
    Fab2.prototype.preRender = function() {
      _super.prototype.preRender.call(this);
      if (!this.element.id) {
        this.element.id = getUniqueID("e-" + this.getModuleName());
      }
    };
    Fab2.prototype.getPersistData = function() {
      _super.prototype.getPersistData.call(this);
      return this.addOnPersist([]);
    };
    Fab2.prototype.getModuleName = function() {
      return "fab";
    };
    Fab2.prototype.initializeFab = function() {
      this.element.classList.add("e-" + _super.prototype.getModuleName.call(this));
      this.checkTarget();
      this.setPosition();
      this.setVisibility();
    };
    Fab2.prototype.checkTarget = function() {
      this.isFixed = true;
      if (this.target) {
        this.targetEle = typeof this.target === "string" ? select(this.target) : this.target;
        if (this.targetEle) {
          this.isFixed = false;
          this.targetEle.appendChild(this.element);
        }
      }
      this.element.classList[this.isFixed ? "add" : "remove"](FIXEDFAB);
    };
    Fab2.prototype.setVisibility = function() {
      this.element.classList[this.visible ? "remove" : "add"](FABHIDDEN);
    };
    Fab2.prototype.setPosition = function() {
      this.element.classList.add(["BottomLeft", "BottomCenter", "BottomRight"].indexOf(this.position) !== -1 ? FABBOTTOM : FABTOP);
      var isRight = ["TopRight", "MiddleRight", "BottomRight"].indexOf(this.position) !== -1;
      this.element.classList.add(!(this.enableRtl || isRight) || this.enableRtl && isRight ? FABLEFT : FABRIGHT);
      if (["MiddleLeft", "MiddleRight", "MiddleCenter"].indexOf(this.position) !== -1) {
        this.element.classList.add(FABMIDDLE);
      }
      if (["TopCenter", "BottomCenter", "MiddleCenter"].indexOf(this.position) !== -1) {
        this.element.classList.add(FABCENTER);
      }
    };
    Fab2.prototype.clearPosition = function() {
      this.element.classList.remove(FABTOP, FABBOTTOM, FABMIDDLE);
      this.element.classList.remove(FABRIGHT, FABLEFT, FABCENTER);
    };
    Fab2.prototype.refreshPosition = function() {
    };
    Fab2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.element.classList.remove("e-" + _super.prototype.getModuleName.call(this), FIXEDFAB);
      this.clearPosition();
    };
    Fab2.prototype.onPropertyChanged = function(newProp, oldProp) {
      _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "enableRtl":
          case "position":
            this.clearPosition();
            this.setPosition();
            break;
          case "visible":
            this.setVisibility();
            break;
          case "target":
            this.checkTarget();
            this.setPosition();
            break;
          /* REF - 861739 */
          case "currencyCode":
            this.refresh();
            break;
        }
      }
    };
    __decorate6([Property("BottomRight")], Fab2.prototype, "position", void 0);
    __decorate6([Property("")], Fab2.prototype, "target", void 0);
    __decorate6([Property(true)], Fab2.prototype, "visible", void 0);
    __decorate6([Property(true)], Fab2.prototype, "isPrimary", void 0);
    Fab2 = __decorate6([NotifyPropertyChanges], Fab2);
    return Fab2;
  }(Button)
);

// node_modules/@syncfusion/ej2-buttons/src/speed-dial/speed-dial.js
var __extends8 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate7 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var topPosition = ["TopLeft", "TopCenter", "TopRight"];
var bottomPosition = ["BottomLeft", "BottomCenter", "BottomRight"];
var leftPosition = ["TopLeft", "MiddleLeft", "BottomLeft"];
var rightPosition = ["TopRight", "MiddleRight", "BottomRight"];
var SDHIDDEN = "e-speeddial-hidden";
var FIXEDSD = "e-speeddial-fixed";
var SPEEDDIAL = "e-speeddial";
var RTLCLASS = "e-rtl";
var HOVERSD = "e-speeddial-hover-open";
var RADIALSD = "e-speeddial-radial";
var LINEARSD = "e-speeddial-linear";
var TEMPLATESD = "e-speeddial-template";
var SDTEMPLATECONTAINER = "e-speeddial-template-container";
var SDOVERLAY = "e-speeddial-overlay";
var SDPOPUP = "e-speeddial-popup";
var SDUL = "e-speeddial-ul";
var SDLI = "e-speeddial-li";
var SDACTIVELI = "e-speeddial-li-active";
var SDLIICON = "e-speeddial-li-icon";
var SDLITEXT = "e-speeddial-li-text";
var SDLITEXTONLY = "e-speeddial-text-li";
var DISABLED3 = "e-disabled";
var SDVERTICALBOTTOM = "e-speeddial-vert-bottom";
var SDVERTICALRIGHT = "e-speeddial-vert-right";
var SDHORIZONTALTOP = "e-speeddial-horz-top";
var SDHORIZONTALLEFT = "e-speeddial-horz-left";
var SDHORIZONTALRIGHT = "e-speeddial-horz-right";
var SDOVERFLOW = "e-speeddial-overflow";
var SDVERTOVERFLOW = "e-speeddial-vert-overflow";
var SDHORZOVERFLOW = "e-speeddial-horz-overflow";
var SDTOP = "e-speeddial-top";
var SDBOTTOM = "e-speeddial-bottom";
var SDRIGHT = "e-speeddial-right";
var SDLEFT = "e-speeddial-left";
var SDMIDDLE = "e-speeddial-middle";
var SDCENTER = "e-speeddial-center";
var SDTOPLEFT = "e-speeddial-top-left";
var SDBOTTOMRIGHT = "e-speeddial-bottom-right";
var SDTOPRIGHT = "e-speeddial-top-right";
var SDBOTTOMLEFT = "e-speeddial-bottom-left";
var SDVERTDIST = "--speeddialVertDist";
var SDHORZDIST = "--speeddialHorzDist";
var SDRADICALANGLE = "--speeddialRadialAngle";
var SDRADICALOFFSET = "--speeddialRadialOffset";
var SDRADICALMINHEIGHT = "--speeddialRadialMinHeight";
var SDRADICALMINWIDTH = "--speeddialRadialMinWidth";
var SDOVERFLOWLIMIT = "--speeddialOverflowLimit";
var SDRADICALHORZDIST = "--speeddialRadialHorzDist";
var SpeedDialMode;
(function(SpeedDialMode2) {
  SpeedDialMode2["Linear"] = "Linear";
  SpeedDialMode2["Radial"] = "Radial";
})(SpeedDialMode || (SpeedDialMode = {}));
var LinearDirection;
(function(LinearDirection2) {
  LinearDirection2["Up"] = "Up";
  LinearDirection2["Down"] = "Down";
  LinearDirection2["Right"] = "Right";
  LinearDirection2["Left"] = "Left";
  LinearDirection2["Auto"] = "Auto";
})(LinearDirection || (LinearDirection = {}));
var RadialDirection;
(function(RadialDirection2) {
  RadialDirection2["Clockwise"] = "Clockwise";
  RadialDirection2["AntiClockwise"] = "AntiClockwise";
  RadialDirection2["Auto"] = "Auto";
})(RadialDirection || (RadialDirection = {}));
var SpeedDialAnimationEffect;
(function(SpeedDialAnimationEffect2) {
  SpeedDialAnimationEffect2["Fade"] = "Fade";
  SpeedDialAnimationEffect2["FadeZoom"] = "FadeZoom";
  SpeedDialAnimationEffect2["FlipLeftDown"] = "FlipLeftDown";
  SpeedDialAnimationEffect2["FlipLeftUp"] = "FlipLeftUp";
  SpeedDialAnimationEffect2["FlipRightDown"] = "FlipRightDown";
  SpeedDialAnimationEffect2["FlipRightUp"] = "FlipRightUp";
  SpeedDialAnimationEffect2["FlipXDown"] = "FlipXDown";
  SpeedDialAnimationEffect2["FlipXUp"] = "FlipXUp";
  SpeedDialAnimationEffect2["FlipYLeft"] = "FlipYLeft";
  SpeedDialAnimationEffect2["FlipYRight"] = "FlipYRight";
  SpeedDialAnimationEffect2["SlideBottom"] = "SlideBottom";
  SpeedDialAnimationEffect2["SlideLeft"] = "SlideLeft";
  SpeedDialAnimationEffect2["SlideRight"] = "SlideRight";
  SpeedDialAnimationEffect2["SlideTop"] = "SlideTop";
  SpeedDialAnimationEffect2["Zoom"] = "Zoom";
  SpeedDialAnimationEffect2["None"] = "None";
})(SpeedDialAnimationEffect || (SpeedDialAnimationEffect = {}));
var SpeedDialAnimationSettings = (
  /** @class */
  function(_super) {
    __extends8(SpeedDialAnimationSettings2, _super);
    function SpeedDialAnimationSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate7([Property("Fade")], SpeedDialAnimationSettings2.prototype, "effect", void 0);
    __decorate7([Property(400)], SpeedDialAnimationSettings2.prototype, "duration", void 0);
    __decorate7([Property(0)], SpeedDialAnimationSettings2.prototype, "delay", void 0);
    return SpeedDialAnimationSettings2;
  }(ChildProperty)
);
var RadialSettings = (
  /** @class */
  function(_super) {
    __extends8(RadialSettings2, _super);
    function RadialSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate7([Property("Auto")], RadialSettings2.prototype, "direction", void 0);
    __decorate7([Property(-1)], RadialSettings2.prototype, "endAngle", void 0);
    __decorate7([Property("100px")], RadialSettings2.prototype, "offset", void 0);
    __decorate7([Property(-1)], RadialSettings2.prototype, "startAngle", void 0);
    return RadialSettings2;
  }(ChildProperty)
);
var SpeedDialItem = (
  /** @class */
  function(_super) {
    __extends8(SpeedDialItem2, _super);
    function SpeedDialItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate7([Property("")], SpeedDialItem2.prototype, "iconCss", void 0);
    __decorate7([Property("")], SpeedDialItem2.prototype, "id", void 0);
    __decorate7([Property("")], SpeedDialItem2.prototype, "text", void 0);
    __decorate7([Property("")], SpeedDialItem2.prototype, "title", void 0);
    __decorate7([Property(false)], SpeedDialItem2.prototype, "disabled", void 0);
    return SpeedDialItem2;
  }(ChildProperty)
);
var SpeedDial = (
  /** @class */
  function(_super) {
    __extends8(SpeedDial2, _super);
    function SpeedDial2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.isMenuOpen = false;
      _this.isClock = true;
      _this.isVertical = true;
      _this.isControl = false;
      _this.focusedIndex = -1;
      return _this;
    }
    SpeedDial2.prototype.render = function() {
      this.initialize();
    };
    SpeedDial2.prototype.preRender = function() {
      this.keyConfigs = {
        space: "space",
        enter: "enter",
        end: "end",
        home: "home",
        moveDown: "downarrow",
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        moveUp: "uparrow",
        esc: "escape"
      };
      this.validateDirection();
    };
    SpeedDial2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    SpeedDial2.prototype.getModuleName = function() {
      return "speed-dial";
    };
    SpeedDial2.prototype.initialize = function() {
      if (!this.element.id) {
        this.element.id = getUniqueID("e-" + this.getModuleName());
      }
      this.fab = new Fab({
        content: this.content,
        cssClass: this.cssClass ? SPEEDDIAL + " " + this.cssClass : SPEEDDIAL,
        disabled: this.disabled,
        enablePersistence: this.enablePersistence,
        enableRtl: this.enableRtl,
        iconCss: this.openIconCss,
        iconPosition: this.iconPosition,
        position: this.position,
        target: this.target,
        visible: this.visible,
        isPrimary: this.isPrimary
      });
      this.fab.appendTo(this.element);
      if (this.items.length > 0 || this.popupTemplate) {
        this.createPopup();
      }
      this.wireEvents();
    };
    SpeedDial2.prototype.wireEvents = function() {
      EventHandler.add(window, "resize", this.resizeHandler, this);
      EventHandler.add(document.body, "click", this.bodyClickHandler, this);
      if (this.opensOnHover) {
        this.wireFabHover();
      } else {
        this.wireFabClick();
      }
    };
    SpeedDial2.prototype.wirePopupEvents = function() {
      this.removeRippleEffect = rippleEffect(this.popupEle, {
        selector: "." + SDLIICON
      });
      this.keyboardModule = new KeyboardEvents(this.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
      this.popupKeyboardModule = new KeyboardEvents(this.popupEle, {
        keyAction: this.popupKeyActionHandler.bind(this),
        keyConfigs: {
          esc: "escape"
        },
        eventName: "keydown"
      });
      this.documentKeyboardModule = new KeyboardEvents(document.body, {
        keyAction: this.popupKeyActionHandler.bind(this),
        keyConfigs: {
          enter: "enter",
          space: "space"
        },
        eventName: "keydown"
      });
      EventHandler.add(this.popupEle, "click", this.popupClick, this);
      EventHandler.add(this.popupEle, "mouseleave", this.popupMouseLeaveHandle, this);
    };
    SpeedDial2.prototype.wireFabClick = function() {
      EventHandler.add(this.fab.element, "click", this.fabClick, this);
    };
    SpeedDial2.prototype.wireFabHover = function() {
      this.popupEle.classList.add(HOVERSD);
      EventHandler.add(this.fab.element, "mouseover", this.mouseOverHandle, this);
      EventHandler.add(this.element, "mouseleave", this.mouseLeaveHandle, this);
    };
    SpeedDial2.prototype.createPopup = function() {
      var className = SDPOPUP + " " + SDHIDDEN;
      className = this.enableRtl ? className + " " + RTLCLASS : className;
      className = this.cssClass ? className + " " + this.cssClass : className;
      this.popupEle = this.createElement("div", {
        className,
        id: this.element.id + "_popup"
      });
      this.element.insertAdjacentElement("afterend", this.popupEle);
      attributes(this.element, {
        "aria-expanded": "false",
        "aria-haspopup": "true",
        "aria-controls": this.popupEle.id
      });
      this.setPopupContent();
      if (this.modal) {
        this.createOverlay();
      }
      this.checkTarget();
      this.setPositionProps();
      this.wirePopupEvents();
    };
    SpeedDial2.prototype.createOverlay = function() {
      this.overlayEle = this.createElement("div", {
        id: this.element.id + "_overlay",
        className: (SDOVERLAY + (this.isMenuOpen ? "" : " " + SDHIDDEN) + " " + this.cssClass).trim()
      });
      this.element.insertAdjacentElement("beforebegin", this.overlayEle);
    };
    SpeedDial2.prototype.popupClick = function() {
      this.isControl = true;
    };
    SpeedDial2.prototype.bodyClickHandler = function(e) {
      if (this.isControl) {
        this.isControl = false;
        return;
      }
      if (this.isMenuOpen) {
        this.hidePopupEle(e);
      }
    };
    SpeedDial2.prototype.fabClick = function(e) {
      this.isControl = true;
      if (this.isMenuOpen) {
        this.hidePopupEle(e);
      } else {
        this.showPopupEle(e);
      }
    };
    SpeedDial2.prototype.setPopupContent = function() {
      this.popupEle.classList.remove(RADIALSD, LINEARSD, TEMPLATESD);
      if (!this.popupTemplate) {
        this.popupEle.classList.add(this.mode === "Radial" ? RADIALSD : LINEARSD);
        this.createUl();
        this.createItems();
      } else {
        this.popupEle.classList.add(TEMPLATESD);
        this.appendTemplate();
      }
      this.renderReactTemplates();
    };
    SpeedDial2.prototype.appendTemplate = function() {
      var templateContainer = this.createElement("div", {
        className: SDTEMPLATECONTAINER
      });
      append([templateContainer], this.popupEle);
      var templateFunction = this.getTemplateString(this.popupTemplate);
      append(templateFunction({}, this, "fabPopupTemplate", this.element.id + "popupTemplate", this.isStringTemplate), templateContainer);
    };
    SpeedDial2.prototype.getTemplateString = function(template) {
      var stringContent = "";
      try {
        var tempEle = select(template);
        if (typeof template !== "function" && tempEle) {
          stringContent = tempEle.tagName === "SCRIPT" ? tempEle.innerHTML : tempEle.outerHTML;
        } else {
          stringContent = template;
        }
      } catch (e) {
        stringContent = template;
      }
      return compile(stringContent);
    };
    SpeedDial2.prototype.updatePopupTemplate = function() {
      if (this.popupEle) {
        if (this.popupEle.querySelector("." + SDLI)) {
          this.clearItems();
          this.popupEle.classList.remove(RADIALSD, LINEARSD);
          this.popupEle.classList.add(TEMPLATESD);
        }
        while (this.popupEle.firstElementChild) {
          remove(this.popupEle.firstElementChild);
        }
        this.setPopupContent();
        this.updatePositionProperties();
      } else {
        this.createPopup();
      }
    };
    SpeedDial2.prototype.createUl = function() {
      var popupUlEle = this.createElement("ul", {
        className: SDUL,
        id: this.element.id + "_ul",
        attrs: {
          "role": "menu"
        }
      });
      this.popupEle.appendChild(popupUlEle);
    };
    SpeedDial2.prototype.createItems = function() {
      var _this = this;
      this.focusedIndex = -1;
      var ul = this.popupEle.querySelector("." + SDUL);
      var _loop_1 = function(index2) {
        var item = this_1.items[parseInt(index2.toString(), 10)];
        var li = this_1.createElement("li", {
          className: SDLI + " " + SDHIDDEN,
          id: item.id ? item.id : this_1.element.id + "_li_" + index2,
          attrs: {
            "role": "menuitem"
          }
        });
        if (item.text) {
          li.setAttribute("aria-label", item.text);
        }
        if (this_1.itemTemplate) {
          var templateFunction = this_1.getTemplateString(this_1.itemTemplate);
          append(templateFunction(item, this_1, "fabItemTemplate", this_1.element.id + "itemTemplate", this_1.isStringTemplate), li);
        } else {
          if (item.iconCss) {
            var iconSpan = this_1.createElement("span", {
              className: SDLIICON + " " + item.iconCss
            });
            li.appendChild(iconSpan);
          }
          if (item.text) {
            var textSpan = this_1.createElement("span", {
              className: SDLITEXT
            });
            textSpan.innerText = item.text;
            li.appendChild(textSpan);
            if (!item.iconCss) {
              li.classList.add(SDLITEXTONLY);
            }
          }
        }
        if (item.disabled) {
          li.classList.add(DISABLED3);
          li.setAttribute("aria-disabled", "true");
        } else {
          EventHandler.add(li, "click", function(e) {
            return _this.triggerItemClick(e, item);
          }, this_1);
        }
        if (item.title) {
          li.setAttribute("title", item.title);
        }
        var eventArgs = {
          element: li,
          item
        };
        this_1.trigger("beforeItemRender", eventArgs, function(args) {
          ul.appendChild(args.element);
        });
      };
      var this_1 = this;
      for (var index = 0; index < this.items.length; index++) {
        _loop_1(index);
      }
    };
    SpeedDial2.prototype.setRTL = function() {
      this.popupEle.classList[this.enableRtl ? "add" : "remove"](RTLCLASS);
      this.clearHorizontalPosition();
      if (!(this.popupTemplate || this.mode === "Radial")) {
        this.setLinearHorizontalPosition();
      } else {
        if (!this.popupTemplate && this.mode === "Radial") {
          this.setRadialPosition();
        }
        this.setHorizontalPosition();
      }
    };
    SpeedDial2.prototype.checkTarget = function() {
      this.isFixed = true;
      if (this.target) {
        this.targetEle = typeof this.target === "string" ? select(this.target) : this.target;
        if (this.targetEle) {
          this.targetEle.appendChild(this.element);
          this.isFixed = false;
        }
      }
      if (this.isFixed) {
        if (this.popupEle) {
          this.popupEle.classList.add(FIXEDSD);
        }
        if (this.overlayEle) {
          this.overlayEle.classList.add(FIXEDSD);
        }
      } else {
        if (this.popupEle) {
          this.popupEle.classList.remove(FIXEDSD);
        }
        if (this.overlayEle) {
          this.overlayEle.classList.remove(FIXEDSD);
        }
      }
    };
    SpeedDial2.prototype.setVisibility = function(val) {
      this.setProperties({
        visible: val
      }, true);
      this.fab.setProperties({
        visible: val
      });
    };
    SpeedDial2.prototype.popupMouseLeaveHandle = function(e) {
      var target = e.relatedTarget;
      if (this.opensOnHover && !(target.classList.contains(SPEEDDIAL) || closest(target, "." + SPEEDDIAL))) {
        this.hidePopupEle(e);
      }
    };
    SpeedDial2.prototype.mouseOverHandle = function(e) {
      this.showPopupEle(e);
    };
    SpeedDial2.prototype.mouseLeaveHandle = function(e) {
      var target = e.relatedTarget;
      if (!(target.classList.contains(SDPOPUP) || closest(target, "." + SDPOPUP))) {
        this.hidePopupEle(e);
      }
    };
    SpeedDial2.prototype.popupKeyActionHandler = function(e) {
      switch (e.action) {
        case "esc":
          this.hidePopupEle(e);
          break;
        case "enter":
        case "space":
          if (this.isMenuOpen && e.target !== this.element) {
            this.hidePopupEle(e);
          }
          break;
      }
    };
    SpeedDial2.prototype.keyActionHandler = function(e) {
      e.preventDefault();
      switch (e.action) {
        case "enter":
        case "space":
          if (this.isMenuOpen) {
            if (this.focusedIndex !== -1) {
              this.triggerItemClick(e, this.items[this.focusedIndex]);
            } else {
              this.hidePopupEle(e);
            }
          } else {
            this.showPopupEle(e);
          }
          break;
        case "esc":
          this.hidePopupEle(e);
          break;
        default:
          if (this.popupTemplate || !this.isMenuOpen) {
            break;
          }
          switch (e.action) {
            case "end":
              this.focusLastElement();
              break;
            case "home":
              this.focusFirstElement();
              break;
            case "moveRight":
              if (this.mode === "Radial") {
                this.focusLeftRightElement(false);
              } else {
                this.focusLinearElement(false);
              }
              break;
            case "moveDown":
              if (this.mode === "Radial") {
                this.focusUpDownElement(false);
              } else {
                this.focusLinearElement(false);
              }
              break;
            case "moveLeft":
              if (this.mode === "Radial") {
                this.focusLeftRightElement(true);
              } else {
                this.focusLinearElement(true);
              }
              break;
            case "moveUp":
              if (this.mode === "Radial") {
                this.focusUpDownElement(true);
              } else {
                this.focusLinearElement(true);
              }
              break;
          }
          break;
      }
    };
    SpeedDial2.prototype.focusFirstElement = function() {
      var ele = selectAll("." + SDLI, this.popupEle);
      var index = 0;
      while (ele[parseInt(index.toString(), 10)].classList.contains(DISABLED3)) {
        index++;
        if (index > ele.length - 1) {
          return;
        }
      }
      this.setFocus(index, ele[parseInt(index.toString(), 10)]);
    };
    SpeedDial2.prototype.focusLastElement = function() {
      var ele = selectAll("." + SDLI, this.popupEle);
      var index = ele.length - 1;
      while (ele[parseInt(index.toString(), 10)].classList.contains(DISABLED3)) {
        index--;
        if (index < 0) {
          return;
        }
      }
      this.setFocus(index, ele[parseInt(index.toString(), 10)]);
    };
    SpeedDial2.prototype.focusLinearElement = function(isLeftUp) {
      var isReversed = this.popupEle.classList.contains(SDVERTICALBOTTOM) || this.popupEle.classList.contains(SDHORIZONTALRIGHT);
      if (isReversed !== isLeftUp) {
        this.focusPrevElement();
      } else {
        this.focusNextElement();
      }
    };
    SpeedDial2.prototype.focusLeftRightElement = function(isLeft) {
      var isradialTop = ["TopLeft", "TopCenter", "TopRight", "MiddleLeft"].indexOf(this.position) !== -1;
      if (isradialTop && isLeft !== this.isClock || !isradialTop && isLeft === this.isClock) {
        this.focusPrevElement();
      } else {
        this.focusNextElement();
      }
    };
    SpeedDial2.prototype.focusUpDownElement = function(isUp) {
      var isradialRight = ["TopRight", "MiddleRight", "BottomRight", "BottomCenter"].indexOf(this.position) !== -1;
      if (isradialRight && isUp !== this.isClock || !isradialRight && isUp === this.isClock) {
        this.focusPrevElement();
      } else {
        this.focusNextElement();
      }
    };
    SpeedDial2.prototype.focusPrevElement = function() {
      var ele = selectAll("." + SDLI, this.popupEle);
      var index = this.focusedIndex;
      do {
        index--;
        if (index < 0) {
          this.setFocus(-1);
          return;
        }
      } while (ele[parseInt(index.toString(), 10)].classList.contains(DISABLED3));
      this.setFocus(index, ele[parseInt(index.toString(), 10)]);
    };
    SpeedDial2.prototype.focusNextElement = function() {
      var ele = selectAll("." + SDLI, this.popupEle);
      var index = this.focusedIndex;
      do {
        index++;
        if (index > ele.length - 1) {
          return;
        }
      } while (ele[parseInt(index.toString(), 10)].classList.contains(DISABLED3));
      this.setFocus(index, ele[parseInt(index.toString(), 10)]);
    };
    SpeedDial2.prototype.setFocus = function(index, ele) {
      this.removeFocus();
      if (ele) {
        ele.classList.add(SDACTIVELI);
      }
      this.focusedIndex = index;
    };
    SpeedDial2.prototype.removeFocus = function() {
      var preEle = select("." + SDACTIVELI, this.popupEle);
      if (preEle) {
        preEle.classList.remove(SDACTIVELI);
      }
    };
    SpeedDial2.prototype.updatePositionProperties = function() {
      this.hidePopupEle();
      this.clearPosition();
      this.validateDirection();
      this.setPositionProps();
    };
    SpeedDial2.prototype.setPositionProps = function() {
      if (this.popupTemplate) {
        this.setPosition();
      } else if (this.mode === "Radial") {
        this.setRadialPosition();
        this.setPosition();
      } else {
        this.setLinearPosition();
        this.setMaxSize();
      }
    };
    SpeedDial2.prototype.validateDirection = function() {
      switch (this.direction) {
        case "Up":
          this.actualLinDirection = topPosition.indexOf(this.position) !== -1 ? "Auto" : "Up";
          break;
        case "Down":
          this.actualLinDirection = bottomPosition.indexOf(this.position) !== -1 ? "Auto" : "Down";
          break;
        case "Right":
          this.actualLinDirection = rightPosition.indexOf(this.position) !== -1 ? "Auto" : "Right";
          break;
        case "Left":
          this.actualLinDirection = leftPosition.indexOf(this.position) !== -1 ? "Auto" : "Left";
          break;
        case "Auto":
        default:
          this.actualLinDirection = "Auto";
          break;
      }
      this.isVertical = !(this.actualLinDirection === "Left" || this.actualLinDirection === "Right");
    };
    SpeedDial2.prototype.setMaxSize = function() {
      var top = this.element.offsetTop;
      var left = this.element.offsetLeft;
      var bottom = (this.isFixed ? window.innerHeight : this.targetEle.clientHeight) - this.element.offsetTop - this.element.offsetHeight;
      var right = (this.isFixed ? window.innerWidth : this.targetEle.clientWidth) - this.element.offsetLeft - this.element.offsetWidth;
      var limit = 0;
      var popupUlEle = this.popupEle.querySelector("." + SDUL);
      if (this.isVertical) {
        limit = this.actualLinDirection === "Up" || this.actualLinDirection === "Auto" && topPosition.indexOf(this.position) === -1 ? top : bottom;
        if (limit < popupUlEle.offsetHeight) {
          this.popupEle.classList.add(SDOVERFLOW, SDVERTOVERFLOW);
          popupUlEle.style.setProperty(SDOVERFLOWLIMIT, limit + "px");
        }
      } else {
        limit = this.enableRtl ? this.direction === "Right" ? left : right : this.direction === "Right" ? right : left;
        if (limit < popupUlEle.offsetWidth) {
          this.popupEle.classList.add(SDOVERFLOW, SDHORZOVERFLOW);
          popupUlEle.style.setProperty(SDOVERFLOWLIMIT, limit + "px");
        }
      }
    };
    SpeedDial2.prototype.setLinearPosition = function() {
      var vertDist = 0;
      var isTop = this.actualLinDirection === "Down" || this.actualLinDirection === "Auto" && topPosition.indexOf(this.position) !== -1 || !this.isVertical && bottomPosition.indexOf(this.position) === -1;
      var elementOffSetHeight = this.element.offsetHeight / 2;
      var isMiddle = ["MiddleRight", "MiddleCenter", "MiddleLeft"].indexOf(this.position) !== -1;
      if (isTop) {
        vertDist = this.element.offsetTop + (this.isVertical ? this.element.offsetHeight : 0);
        if (isMiddle) {
          if (this.actualLinDirection === "Right" || this.actualLinDirection === "Left") {
            vertDist = this.element.offsetTop - elementOffSetHeight;
          }
          if (this.actualLinDirection === "Down") {
            vertDist = vertDist - elementOffSetHeight;
          }
        }
        if (!this.isVertical) {
          this.popupEle.classList.add(SDHORIZONTALTOP);
        }
      } else {
        vertDist = this.isFixed ? window.document.documentElement.clientHeight : this.targetEle.clientHeight;
        vertDist = vertDist - this.element.offsetTop - (this.isVertical ? 0 : this.element.offsetHeight);
        if (isMiddle) {
          if (this.actualLinDirection === "Auto" || this.actualLinDirection === "Up") {
            vertDist = vertDist + elementOffSetHeight;
          }
        }
        if (this.isVertical) {
          this.popupEle.classList.add(SDVERTICALBOTTOM);
        }
      }
      this.popupEle.classList.add(isTop ? SDTOP : SDBOTTOM);
      this.popupEle.style.setProperty(SDVERTDIST, vertDist + "px");
      this.setLinearHorizontalPosition();
    };
    SpeedDial2.prototype.setLinearHorizontalPosition = function() {
      if (this.actualLinDirection === "Right" || this.isVertical && rightPosition.indexOf(this.position) === -1) {
        if (this.enableRtl) {
          this.setRight();
        } else {
          this.setLeft();
        }
        if (!this.isVertical) {
          this.popupEle.classList.add(SDHORIZONTALLEFT);
        }
      } else {
        if (this.enableRtl) {
          this.setLeft();
        } else {
          this.setRight();
        }
        this.popupEle.classList.add(this.isVertical ? SDVERTICALRIGHT : SDHORIZONTALRIGHT);
      }
    };
    SpeedDial2.prototype.setLeft = function() {
      var elementOffSetWidth = this.element.offsetWidth / 2;
      var isCenter = ["TopCenter", "MiddleCenter", "BottomCenter"].indexOf(this.position) !== -1;
      var horzDist = this.element.offsetLeft + (this.isVertical ? 0 : this.element.offsetWidth);
      if (isCenter) {
        if (this.actualLinDirection === "Auto" || this.actualLinDirection === "Down" || this.actualLinDirection === "Up") {
          horzDist = this.element.offsetLeft - elementOffSetWidth;
        } else {
          horzDist = this.actualLinDirection === "Right" ? this.element.offsetLeft + elementOffSetWidth : horzDist + elementOffSetWidth;
        }
      }
      this.popupEle.style.setProperty(SDHORZDIST, horzDist + "px");
      this.popupEle.classList.add(SDLEFT);
    };
    SpeedDial2.prototype.setRight = function() {
      var elementOffSetWidth = this.element.offsetWidth / 2;
      var isCenter = ["TopCenter", "MiddleCenter", "BottomCenter"].indexOf(this.position) !== -1;
      var horzDist = this.isFixed ? window.document.documentElement.clientWidth : this.targetEle.clientWidth;
      horzDist = horzDist - this.element.offsetLeft - (this.isVertical ? this.element.offsetWidth : 0);
      if (isCenter && this.actualLinDirection === "Left") {
        horzDist = horzDist + elementOffSetWidth;
      }
      if (this.popupEle.classList.contains("e-rtl") && isCenter) {
        horzDist = horzDist - elementOffSetWidth;
      }
      this.popupEle.style.setProperty(SDHORZDIST, horzDist + "px");
      this.popupEle.classList.add(SDRIGHT);
    };
    SpeedDial2.prototype.setPosition = function() {
      if (["MiddleLeft", "MiddleRight", "MiddleCenter"].indexOf(this.position) !== -1) {
        this.popupEle.classList.add(SDMIDDLE);
        var yoffset = ((this.isFixed ? window.innerHeight : this.targetEle.clientHeight) - this.popupEle.offsetHeight) / 2;
        this.popupEle.style.setProperty(SDVERTDIST, yoffset + "px");
      }
      this.popupEle.classList.add(bottomPosition.indexOf(this.position) === -1 ? SDTOP : SDBOTTOM);
      this.setHorizontalPosition();
    };
    SpeedDial2.prototype.setHorizontalPosition = function() {
      if (["TopCenter", "BottomCenter", "MiddleCenter"].indexOf(this.position) !== -1) {
        this.popupEle.classList.add(SDCENTER);
        var xoffset = ((this.isFixed ? window.innerWidth : this.targetEle.clientWidth) - this.popupEle.offsetWidth) / 2;
        this.popupEle.style.setProperty(SDHORZDIST, xoffset + "px");
      }
      var isRight = rightPosition.indexOf(this.position) !== -1;
      this.popupEle.classList.add(!(this.enableRtl || isRight) || this.enableRtl && isRight ? SDLEFT : SDRIGHT);
    };
    SpeedDial2.prototype.setCustomRadialPosition = function() {
      var viewportWidth = document.documentElement.clientWidth;
      var viewportHeight = document.documentElement.clientHeight;
      if (["TopLeft", "BottomLeft", "MiddleLeft"].indexOf(this.position) !== -1) {
        var horzDist = void 0;
        if (this.enableRtl) {
          if (this.isFixed) {
            horzDist = viewportWidth - (this.element.offsetLeft + this.element.offsetWidth);
          } else {
            horzDist = this.targetEle.clientWidth - (this.element.offsetLeft + this.element.offsetWidth);
          }
        } else {
          horzDist = this.element.offsetLeft;
        }
        this.popupEle.style.setProperty(SDRADICALHORZDIST, horzDist + "px");
      }
      if (["TopLeft", "TopCenter", "TopRight"].indexOf(this.position) !== -1) {
        this.popupEle.style.top = this.element.offsetTop + "px";
      }
      if (["TopRight", "BottomRight", "MiddleRight"].indexOf(this.position) !== -1) {
        var horzDist = void 0;
        if (this.enableRtl) {
          horzDist = this.element.offsetLeft;
        } else {
          if (this.isFixed) {
            horzDist = viewportWidth - (this.element.offsetLeft + this.element.offsetWidth);
          } else {
            horzDist = this.targetEle.clientWidth - (this.element.offsetLeft + this.element.offsetWidth);
          }
        }
        this.popupEle.style.setProperty(SDRADICALHORZDIST, horzDist + "px");
      }
      if (["BottomLeft", "BottomCenter", "BottomRight"].indexOf(this.position) !== -1) {
        if (this.isFixed) {
          this.popupEle.style.bottom = viewportHeight - (this.element.offsetTop + this.element.offsetHeight) + "px";
        } else {
          this.popupEle.style.bottom = this.targetEle.clientHeight - (this.element.offsetTop + this.element.offsetHeight) + "px";
        }
      }
      if (["TopCenter", "MiddleCenter", "BottomCenter"].indexOf(this.position) !== -1) {
        var horzDist = void 0;
        if (this.enableRtl) {
          if (this.isFixed) {
            horzDist = viewportWidth - (this.element.offsetLeft + this.element.offsetWidth) - this.popupEle.offsetWidth / 2;
          } else {
            var targetEleWidth = this.targetEle.clientWidth;
            var popupEleWidth = this.popupEle.offsetWidth;
            horzDist = targetEleWidth - (this.element.offsetLeft + this.element.offsetWidth) - popupEleWidth / 2;
          }
        } else {
          horzDist = this.element.offsetLeft - this.popupEle.offsetWidth / 2;
        }
        this.popupEle.style.setProperty(SDRADICALHORZDIST, horzDist + "px");
      }
      if (["MiddleLeft", "MiddleCenter", "MiddleRight"].indexOf(this.position) !== -1) {
        this.popupEle.style.top = this.element.offsetTop - this.popupEle.offsetHeight / 2 + "px";
      }
    };
    SpeedDial2.prototype.setRadialPosition = function() {
      this.setRadialCorner();
      var range = this.getActualRange();
      this.isClock = range.direction === "Clockwise";
      var offset = formatUnit(range.offset);
      var li = selectAll("." + SDLI, this.popupEle);
      this.popupEle.style.setProperty(SDRADICALOFFSET, offset);
      this.popupEle.style.setProperty(SDRADICALMINHEIGHT, li[0].offsetHeight + "px");
      this.popupEle.style.setProperty(SDRADICALMINWIDTH, li[0].offsetWidth + "px");
      var availableAngle = Math.abs(range.endAngle - range.startAngle);
      var gaps = availableAngle === 360 || availableAngle === 0 ? li.length : li.length - 1;
      var perAngle = availableAngle / gaps;
      for (var i = 0; i < li.length; i++) {
        var ele = li[parseInt(i.toString(), 10)];
        var startAngle = range.startAngle;
        var angle = this.isClock ? startAngle + perAngle * i : startAngle - perAngle * i;
        angle = angle % 360;
        ele.style.setProperty(SDRADICALANGLE, angle + "deg");
      }
    };
    SpeedDial2.prototype.setRadialCorner = function() {
      if (["TopLeft", "TopCenter", "MiddleLeft", "MiddleCenter"].indexOf(this.position) !== -1) {
        this.popupEle.classList.add(this.enableRtl ? SDTOPRIGHT : SDTOPLEFT);
      }
      if (["TopRight", "TopCenter", "MiddleRight", "MiddleCenter"].indexOf(this.position) !== -1) {
        this.popupEle.classList.add(this.enableRtl ? SDTOPLEFT : SDTOPRIGHT);
      }
      if (["BottomLeft", "BottomCenter", "MiddleLeft", "MiddleCenter"].indexOf(this.position) !== -1) {
        this.popupEle.classList.add(this.enableRtl ? SDBOTTOMRIGHT : SDBOTTOMLEFT);
      }
      if (["BottomRight", "BottomCenter", "MiddleRight", "MiddleCenter"].indexOf(this.position) !== -1) {
        this.popupEle.classList.add(this.enableRtl ? SDBOTTOMLEFT : SDBOTTOMRIGHT);
      }
    };
    SpeedDial2.prototype.getActualRange = function() {
      var range = {
        offset: this.radialSettings.offset
      };
      var start = this.radialSettings.startAngle;
      var end = this.radialSettings.endAngle;
      var isClockwise = false;
      switch (this.position) {
        case "TopLeft":
        case "TopRight":
          if ("TopLeft" === this.position !== this.enableRtl) {
            isClockwise = this.radialSettings.direction === "Clockwise";
            this.checkAngleRange(start, end, range, isClockwise, 0, 90, false);
          } else {
            isClockwise = this.radialSettings.direction !== "AntiClockwise";
            this.checkAngleRange(start, end, range, isClockwise, 90, 180, false);
          }
          break;
        case "TopCenter":
          isClockwise = this.radialSettings.direction === "Clockwise";
          this.checkAngleRange(start, end, range, isClockwise, 0, 180, false);
          break;
        case "MiddleLeft":
        case "MiddleRight":
          if ("MiddleLeft" === this.position !== this.enableRtl) {
            isClockwise = this.radialSettings.direction === "Clockwise";
            start = isNullOrUndefined(start) || start < 0 || start > 360 || start > 90 && start < 270 ? isClockwise ? 270 : 90 : start;
            end = isNullOrUndefined(end) || end < 0 || end > 360 || end > 90 && end < 270 ? isClockwise ? 90 : 270 : end;
            start = start < 91 ? start + 360 : start;
            end = end < 91 ? end + 360 : end;
            var switchVal = isClockwise && end < start || !isClockwise && end > start;
            range.startAngle = switchVal ? end : start;
            range.endAngle = switchVal ? start : end;
          } else {
            isClockwise = this.radialSettings.direction !== "AntiClockwise";
            this.checkAngleRange(start, end, range, isClockwise, 90, 270, false);
          }
          break;
        case "MiddleCenter":
          isClockwise = this.radialSettings.direction !== "AntiClockwise";
          start = isNullOrUndefined(start) || start < 0 || start > 360 ? isClockwise ? 0 : 360 : start;
          end = isNullOrUndefined(end) || end < 0 || end > 360 ? isClockwise ? 360 : 0 : end;
          range.startAngle = !isClockwise && start <= end ? start + 360 : start;
          range.endAngle = isClockwise && end <= start ? end + 360 : end;
          break;
        case "BottomLeft":
        case "BottomRight":
          if ("BottomLeft" === this.position !== this.enableRtl) {
            isClockwise = this.radialSettings.direction === "Clockwise";
            this.checkAngleRange(start, end, range, isClockwise, 270, 360, true);
          } else {
            isClockwise = this.radialSettings.direction !== "AntiClockwise";
            this.checkAngleRange(start, end, range, isClockwise, 180, 270, true);
          }
          break;
        case "BottomCenter":
          isClockwise = this.radialSettings.direction !== "AntiClockwise";
          this.checkAngleRange(start, end, range, isClockwise, 180, 360, true);
          break;
      }
      range.direction = isClockwise ? "Clockwise" : "AntiClockwise";
      return range;
    };
    SpeedDial2.prototype.checkAngleRange = function(start, end, range, isClockwise, min, max, check0) {
      start = this.checkAngle(start, isClockwise, min, max, check0);
      end = this.checkAngle(end, !isClockwise, min, max, check0);
      var switchVal = isClockwise && end < start || !isClockwise && end > start;
      range.startAngle = switchVal ? end : start;
      range.endAngle = switchVal ? start : end;
    };
    SpeedDial2.prototype.checkAngle = function(val, isStart, min, max, check0) {
      if (isNullOrUndefined(val) || val < 0 || val > 360) {
        return isStart ? min : max;
      } else {
        val = check0 ? val === 0 ? 360 : val : val === 360 ? 0 : val;
        return val >= min && val <= max ? val : isStart ? min : max;
      }
    };
    SpeedDial2.prototype.clearPosition = function() {
      this.popupEle.style.removeProperty(SDRADICALOFFSET);
      this.popupEle.style.removeProperty(SDRADICALMINHEIGHT);
      this.popupEle.style.removeProperty(SDRADICALMINWIDTH);
      this.popupEle.classList.remove(SDTOPLEFT, SDTOPRIGHT, SDBOTTOMLEFT, SDBOTTOMRIGHT);
      this.popupEle.classList.remove(SDTOP, SDBOTTOM, SDMIDDLE);
      this.popupEle.classList.remove(SDHORIZONTALTOP, SDVERTICALBOTTOM);
      this.popupEle.style.removeProperty(SDVERTDIST);
      this.clearHorizontalPosition();
      this.clearOverflow();
    };
    SpeedDial2.prototype.clearHorizontalPosition = function() {
      this.popupEle.style.removeProperty(SDHORZDIST);
      this.popupEle.style.removeProperty(SDRADICALHORZDIST);
      this.popupEle.style.removeProperty("top");
      this.popupEle.style.removeProperty("bottom");
      this.popupEle.classList.remove(SDRIGHT, SDLEFT, SDCENTER);
      this.popupEle.classList.remove(SDVERTICALRIGHT, SDHORIZONTALLEFT, SDHORIZONTALRIGHT);
    };
    SpeedDial2.prototype.clearOverflow = function() {
      this.popupEle.classList.remove(SDOVERFLOW, SDVERTOVERFLOW, SDHORZOVERFLOW);
      this.popupEle.style.removeProperty(SDOVERFLOWLIMIT);
    };
    SpeedDial2.prototype.hidePopupEle = function(e) {
      var _this = this;
      if (!this.popupEle || !this.isMenuOpen) {
        return;
      }
      var eventArgs = {
        element: this.popupEle,
        event: e,
        cancel: false
      };
      this.trigger("beforeClose", eventArgs, function(args) {
        if (args.cancel) {
          return;
        }
        if (_this.animation.effect !== "None") {
          var closeAnimation_1 = {
            name: _this.animation.effect + "Out",
            timingFunction: "easeOut"
          };
          var eleArray_1 = _this.popupTemplate ? [_this.popupEle.firstElementChild] : selectAll("." + SDLI, _this.popupEle);
          var timeOutInterval_1 = _this.animation.duration / (eleArray_1.length + 1);
          closeAnimation_1.duration = 2 * timeOutInterval_1;
          var animateElement_1 = function(curIndex) {
            var ele2 = eleArray_1[parseInt(curIndex.toString(), 10)];
            closeAnimation_1.delay = curIndex === eleArray_1.length - 1 ? _this.animation.delay : 0;
            closeAnimation_1.begin = function() {
              if (curIndex === eleArray_1.length - 1) {
                _this.startHide();
              }
            };
            closeAnimation_1.end = function() {
              ele2.classList.add(SDHIDDEN);
              if (curIndex === 0) {
                _this.endHide();
              }
            };
            new Animation(closeAnimation_1).animate(ele2);
            if (curIndex !== 0) {
              var index_1 = curIndex - 1;
              setTimeout(function() {
                animateElement_1(index_1);
              }, timeOutInterval_1);
            }
          };
          animateElement_1(eleArray_1.length - 1);
        } else {
          _this.startHide();
          if (!_this.popupTemplate) {
            var ele = selectAll("." + SDLI, _this.popupEle);
            ele.forEach(function(element2) {
              element2.classList.add(SDHIDDEN);
            });
          }
          _this.endHide();
        }
      });
    };
    SpeedDial2.prototype.startHide = function() {
      this.element.setAttribute("aria-expanded", "false");
      this.removeFocus();
      this.isMenuOpen = false;
    };
    SpeedDial2.prototype.endHide = function() {
      this.fab.setProperties({
        iconCss: this.openIconCss
      });
      this.popupEle.classList.add(SDHIDDEN);
      if (this.popupTemplate) {
        this.setVisibility(true);
      }
      this.toggleOverlay();
      if (this.popupTemplate) {
        this.popupEle.removeAttribute("tabindex");
      }
      this.trigger("onClose", {
        element: this.popupEle
      });
    };
    SpeedDial2.prototype.showPopupEle = function(e) {
      var _this = this;
      if (!this.popupEle || this.isMenuOpen) {
        return;
      }
      if (this.popupTemplate || this.mode === "Radial") {
        this.setCustomRadialPosition();
      } else {
        this.setLinearPosition();
      }
      var eventArgs = {
        element: this.popupEle,
        event: e,
        cancel: false
      };
      this.trigger("beforeOpen", eventArgs, function(args) {
        if (args.cancel) {
          return;
        }
        if (_this.animation.effect !== "None" || animationMode === "Enable" && _this.animation.effect === "None") {
          if (animationMode === "Enable" && _this.animation.effect === "None") {
            _this.animation.effect = "Fade";
          }
          if (animationMode === "Enable" && _this.animation.duration === 0) {
            _this.animation.duration = 400;
          }
          var openAnimation_1 = {
            name: _this.animation.effect + "In",
            timingFunction: "easeIn"
          };
          var eleArray_2 = _this.popupTemplate ? [_this.popupEle.firstElementChild] : selectAll("." + SDLI, _this.popupEle);
          var timeOutInterval_2 = _this.animation.duration / (eleArray_2.length + 1);
          openAnimation_1.duration = 2 * timeOutInterval_2;
          var animateElement_2 = function(curIndex) {
            var ele2 = eleArray_2[parseInt(curIndex.toString(), 10)];
            openAnimation_1.delay = curIndex === 0 ? _this.animation.delay : 0;
            openAnimation_1.begin = function() {
              if (curIndex === 0) {
                _this.startShow();
              }
              ele2.classList.remove(SDHIDDEN);
            };
            openAnimation_1.end = function() {
              if (curIndex === eleArray_2.length - 1) {
                _this.endShow();
              }
            };
            new Animation(openAnimation_1).animate(ele2);
            if (curIndex !== eleArray_2.length - 1) {
              var index_2 = curIndex + 1;
              setTimeout(function() {
                animateElement_2(index_2);
              }, timeOutInterval_2);
            }
          };
          animateElement_2(0);
        } else {
          _this.startShow();
          if (!_this.popupTemplate) {
            var ele = selectAll("." + SDLI, _this.popupEle);
            ele.forEach(function(element2) {
              element2.classList.remove(SDHIDDEN);
            });
          }
          _this.endShow();
        }
      });
    };
    SpeedDial2.prototype.startShow = function() {
      this.element.setAttribute("aria-expanded", "true");
      this.isMenuOpen = true;
      this.toggleOverlay();
      this.popupEle.classList.remove(SDHIDDEN);
      if (this.popupTemplate) {
        this.setVisibility(false);
      }
    };
    SpeedDial2.prototype.endShow = function() {
      if (this.closeIconCss) {
        this.fab.setProperties({
          iconCss: this.closeIconCss
        });
      }
      if (this.popupTemplate) {
        this.popupEle.setAttribute("tabindex", "1");
        this.popupEle.focus();
      }
      this.trigger("onOpen", {
        element: this.popupEle
      });
    };
    SpeedDial2.prototype.toggleOverlay = function() {
      if (!this.overlayEle) {
        return;
      }
      this.overlayEle.classList[this.isMenuOpen ? "remove" : "add"](SDHIDDEN);
    };
    SpeedDial2.prototype.removeOverlayEle = function() {
      if (!this.overlayEle) {
        return;
      }
      remove(this.overlayEle);
      this.overlayEle = void 0;
    };
    SpeedDial2.prototype.updatePopupItems = function() {
      if (this.popupEle) {
        this.hidePopupEle();
        this.clearItems();
        this.createItems();
        this.updatePositionProperties();
      } else {
        this.createPopup();
      }
    };
    SpeedDial2.prototype.handleResize = function(e) {
      if (!this.popupEle) {
        return;
      }
      this.hidePopupEle(e);
      this.clearOverflow();
      this.setPositionProps();
    };
    SpeedDial2.prototype.triggerItemClick = function(e, item) {
      var target = e.target;
      target = target.classList.contains(SDLI) ? target : closest(target, "." + SDLI);
      var eventArgs = {
        element: target,
        item,
        event: e
      };
      this.trigger("clicked", eventArgs);
      this.hidePopupEle(e);
    };
    SpeedDial2.prototype.show = function() {
      this.showPopupEle();
    };
    SpeedDial2.prototype.hide = function() {
      this.hidePopupEle();
    };
    SpeedDial2.prototype.refreshPosition = function() {
      this.resizeHandler();
    };
    SpeedDial2.prototype.resizeHandler = function(e) {
      this.handleResize(e);
    };
    SpeedDial2.prototype.clearItems = function() {
      var liList = selectAll("." + SDLI, this.popupEle);
      liList.forEach(function(element2) {
        remove(element2);
      });
    };
    SpeedDial2.prototype.unwireEvents = function() {
      EventHandler.remove(window, "resize", this.resizeHandler);
      EventHandler.remove(document.body, "click", this.bodyClickHandler);
      if (this.opensOnHover) {
        this.unwireFabHover();
      } else {
        this.unwireFabClick();
      }
    };
    SpeedDial2.prototype.unwireFabClick = function() {
      EventHandler.remove(this.fab.element, "click", this.fabClick);
    };
    SpeedDial2.prototype.unwireFabHover = function() {
      this.popupEle.classList.remove(HOVERSD);
      EventHandler.remove(this.fab.element, "mouseover", this.mouseOverHandle);
      EventHandler.remove(this.element, "mouseleave", this.mouseLeaveHandle);
    };
    SpeedDial2.prototype.unwirePopupEvents = function() {
      if (isRippleEnabled) {
        this.removeRippleEffect();
      }
      this.removeRippleEffect = null;
      this.keyboardModule.destroy();
      this.popupKeyboardModule.destroy();
      this.documentKeyboardModule.destroy();
      this.keyboardModule = null;
      this.popupKeyboardModule = null;
      this.documentKeyboardModule = null;
      EventHandler.remove(this.popupEle, "click", this.popupClick);
      EventHandler.remove(this.popupEle, "mouseleave", this.popupMouseLeaveHandle);
    };
    SpeedDial2.prototype.destroy = function() {
      var _this = this;
      _super.prototype.destroy.call(this);
      this.unwireEvents();
      ["aria-expanded", "aria-haspopup", "aria-controls"].forEach(function(attr) {
        _this.element.removeAttribute(attr);
      });
      if (this.popupEle) {
        this.unwirePopupEvents();
        remove(this.popupEle);
        this.popupEle = void 0;
      }
      this.removeOverlayEle();
      this.fab.destroy();
      this.fab = void 0;
    };
    SpeedDial2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var fabProplist = ["content", "cssClass", "disabled", "enablePersistence", "enableRtl", "iconPosition", "position", "target", "template", "title", "visible", "isPrimary"];
      var fabModel = extend({}, newProp);
      for (var _i = 0, _a = Object.keys(fabModel); _i < _a.length; _i++) {
        var prop = _a[_i];
        if (fabProplist.indexOf(prop) < 0) {
          deleteObject(fabModel, prop);
        }
      }
      this.fab.setProperties(fabModel);
      for (var _b = 0, _c = Object.keys(newProp); _b < _c.length; _b++) {
        var prop = _c[_b];
        switch (prop) {
          case "cssClass":
            if (!this.popupEle) {
              break;
            }
            if (oldProp.cssClass) {
              removeClass(this.overlayEle ? [this.popupEle, this.overlayEle] : [this.popupEle], oldProp.cssClass.split(/\s+/).filter(function(c) {
                return c.length > 0;
              }));
            }
            if (newProp.cssClass) {
              addClass(this.overlayEle ? [this.popupEle, this.overlayEle] : [this.popupEle], newProp.cssClass.split(/\s+/).filter(function(c) {
                return c.length > 0;
              }));
            }
            break;
          case "visible":
          case "disabled":
            this.hide();
            break;
          case "enableRtl":
            if (!this.popupEle) {
              break;
            }
            this.setRTL();
            break;
          case "openIconCss":
            if (!this.isMenuOpen) {
              this.fab.setProperties({
                iconCss: this.openIconCss
              });
            }
            break;
          case "closeIconCss":
            if (this.isMenuOpen) {
              this.fab.setProperties({
                iconCss: this.closeIconCss
              });
            }
            break;
          case "position":
            if (!this.popupEle) {
              break;
            }
            this.updatePositionProperties();
            break;
          case "direction":
            if (!this.popupEle || this.popupTemplate) {
              break;
            }
            this.updatePositionProperties();
            break;
          case "popupTemplate":
            this.updatePopupTemplate();
            break;
          case "target":
            this.hidePopupEle();
            this.checkTarget();
            if (this.overlayEle) {
              this.element.insertAdjacentElement("beforebegin", this.overlayEle);
            }
            if (!this.popupEle) {
              break;
            }
            this.element.insertAdjacentElement("afterend", this.popupEle);
            this.updatePositionProperties();
            break;
          case "items":
          case "itemTemplate":
            if (this.popupTemplate) {
              break;
            }
            this.updatePopupItems();
            break;
          case "modal":
            if (newProp.modal) {
              this.createOverlay();
            } else {
              this.removeOverlayEle();
            }
            break;
          case "mode":
            if (!this.popupEle || this.popupTemplate) {
              break;
            }
            this.popupEle.classList.remove(RADIALSD, LINEARSD);
            this.popupEle.classList.add(this.mode === "Radial" ? RADIALSD : LINEARSD);
            this.updatePositionProperties();
            break;
          case "radialSettings":
            if (this.popupEle && this.mode === "Radial" && !this.popupTemplate) {
              this.setRadialPosition();
            }
            break;
          case "opensOnHover":
            if (this.opensOnHover) {
              this.unwireFabClick();
              this.wireFabHover();
            } else {
              this.unwireFabHover();
              this.wireFabClick();
            }
            break;
        }
      }
    };
    __decorate7([Complex({}, SpeedDialAnimationSettings)], SpeedDial2.prototype, "animation", void 0);
    __decorate7([Property("")], SpeedDial2.prototype, "content", void 0);
    __decorate7([Property("")], SpeedDial2.prototype, "closeIconCss", void 0);
    __decorate7([Property("")], SpeedDial2.prototype, "cssClass", void 0);
    __decorate7([Property("Auto")], SpeedDial2.prototype, "direction", void 0);
    __decorate7([Property(false)], SpeedDial2.prototype, "disabled", void 0);
    __decorate7([Property("Left")], SpeedDial2.prototype, "iconPosition", void 0);
    __decorate7([Collection([], SpeedDialItem)], SpeedDial2.prototype, "items", void 0);
    __decorate7([Property("")], SpeedDial2.prototype, "itemTemplate", void 0);
    __decorate7([Property("Linear")], SpeedDial2.prototype, "mode", void 0);
    __decorate7([Property("")], SpeedDial2.prototype, "openIconCss", void 0);
    __decorate7([Property(false)], SpeedDial2.prototype, "opensOnHover", void 0);
    __decorate7([Property("BottomRight")], SpeedDial2.prototype, "position", void 0);
    __decorate7([Property(false)], SpeedDial2.prototype, "modal", void 0);
    __decorate7([Property("")], SpeedDial2.prototype, "popupTemplate", void 0);
    __decorate7([Complex({}, RadialSettings)], SpeedDial2.prototype, "radialSettings", void 0);
    __decorate7([Property("")], SpeedDial2.prototype, "target", void 0);
    __decorate7([Property(true)], SpeedDial2.prototype, "visible", void 0);
    __decorate7([Property(true)], SpeedDial2.prototype, "isPrimary", void 0);
    __decorate7([Event()], SpeedDial2.prototype, "beforeClose", void 0);
    __decorate7([Event()], SpeedDial2.prototype, "beforeItemRender", void 0);
    __decorate7([Event()], SpeedDial2.prototype, "beforeOpen", void 0);
    __decorate7([Event()], SpeedDial2.prototype, "created", void 0);
    __decorate7([Event()], SpeedDial2.prototype, "clicked", void 0);
    __decorate7([Event()], SpeedDial2.prototype, "onClose", void 0);
    __decorate7([Event()], SpeedDial2.prototype, "onOpen", void 0);
    SpeedDial2 = __decorate7([NotifyPropertyChanges], SpeedDial2);
    return SpeedDial2;
  }(Component)
);

// node_modules/@syncfusion/ej2-buttons/src/smart-paste-button/smart-paste-button.js
var __extends9 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate8 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter2 = function(thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : new P(function(resolve2) {
        resolve2(result.value);
      }).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator2 = function(thisArg, body) {
  var _ = {
    label: 0,
    sent: function() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  }, f, y, t, g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};
var SmartPasteButton = (
  /** @class */
  function(_super) {
    __extends9(SmartPasteButton2, _super);
    function SmartPasteButton2(options, element2) {
      return _super.call(this, options, element2) || this;
    }
    SmartPasteButton2.prototype.wireEvents = function() {
      EventHandler.add(this.element, "click", this.smartPasteBtnClickHandler, this);
    };
    SmartPasteButton2.prototype.unWireEvents = function() {
      EventHandler.remove(this.element, "click", this.smartPasteBtnClickHandler);
    };
    SmartPasteButton2.prototype.smartPasteBtnClickHandler = function(args) {
      return __awaiter2(this, void 0, void 0, function() {
        var target, formElement, formFields, clipboardContent, fieldsData, systemRole, userRole, settings, response;
        return __generator2(this, function(_a) {
          switch (_a.label) {
            case 0:
              target = args.target;
              formElement = target.closest("form");
              if (!formElement) {
                return [
                  2
                  /*return*/
                ];
              }
              formFields = this.getFormFields(formElement);
              if (formFields.length === 0) {
                return [
                  2
                  /*return*/
                ];
              }
              return [4, this.getClipboardContent().then(function(text) {
                return text;
              })];
            case 1:
              clipboardContent = _a.sent();
              if (!(clipboardContent !== "Clipboard API not supported" && clipboardContent !== "Clipboard access failed")) return [3, 6];
              _a.label = 2;
            case 2:
              _a.trys.push([2, , 5, 6]);
              this.disabled = true;
              fieldsData = formFields.map(function(field) {
                return {
                  fieldName: field.fieldName,
                  description: field.description,
                  allowedValues: field.allowedValues,
                  type: field.type
                };
              });
              systemRole = "\nCurrent date: " + (/* @__PURE__ */ new Date()).toLocaleDateString("en-US", {
                year: "numeric",
                month: "long",
                day: "numeric"
              }) + "\n\nEach response line matches the following format:\nFIELD identifier^^^value\n\nGive a response with the following lines only, with values inferred from USER_DATA:\n" + this.formatFields(fieldsData) + "\nEND_RESPONSE\n\nDo not explain how the values were determined.\nFor fields without any corresponding information in USER_DATA, use value NO_DATA.";
              userRole = "\nUSER_DATA: " + clipboardContent + "\n                    ";
              settings = {
                messages: [{
                  role: "system",
                  content: systemRole
                }, {
                  role: "user",
                  content: userRole
                }],
                temperature: 0,
                topP: 1,
                maxTokens: 2e3,
                frequencyPenalty: 0.1,
                presencePenalty: 0,
                stop: ["END_RESPONSE"]
              };
              if (!(typeof this.aiAssistHandler === "function")) return [3, 4];
              return [4, this.aiAssistHandler(settings)];
            case 3:
              response = _a.sent();
              if (typeof response === "string" && response !== "") {
                this.setFormFields(formElement, formFields, response);
              }
              _a.label = 4;
            case 4:
              return [3, 6];
            case 5:
              this.disabled = false;
              return [
                7
                /*endfinally*/
              ];
            case 6:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    SmartPasteButton2.prototype.formatFields = function(fields) {
      var result = [];
      fields.forEach(function(field) {
        var fieldOutput = [];
        fieldOutput.push("\nFIELD " + field.fieldName + "^^^");
        if (field.description) {
          fieldOutput.push("The " + field.description);
        }
        if (field.allowedValues && field.allowedValues.length > 0) {
          fieldOutput.push(" (multiple choice, with allowed values: ");
          fieldOutput.push(field.allowedValues.map(function(val) {
            return "" + val;
          }).join(","));
          fieldOutput.push(")");
        } else {
          fieldOutput.push(" of type " + field.type);
        }
        result.push(fieldOutput.join(""));
      });
      return result.join("");
    };
    SmartPasteButton2.prototype.setFormFields = function(form, formFields, response) {
      var _this = this;
      var responseData = {};
      var fieldPrefix = "FIELD ";
      var currentField = null;
      response.split("\n").forEach(function(line) {
        if (line.startsWith(fieldPrefix)) {
          var parts = line.substring(fieldPrefix.length).split("^^^");
          if (parts.length === 2) {
            responseData["" + parts[0]] = parts[1];
            currentField = parts[0];
          }
        } else if (currentField) {
          responseData["" + currentField] += "\n" + line;
        }
      });
      formFields.forEach(function(field) {
        var value = responseData[field.fieldName];
        if (value !== void 0) {
          value = value.trim();
          if (value === "NO_DATA") {
            return;
          }
          if (field.element instanceof HTMLInputElement && field.element.type === "radio") {
            var radioButton = _this.findRadioButton(form, field.element.name, value);
            if (radioButton) {
              _this.updateElementValue(radioButton, "true");
            }
          } else {
            _this.updateElementValue(field.element, value);
          }
        }
      });
    };
    SmartPasteButton2.prototype.findRadioButton = function(form, name, value) {
      var _this = this;
      var radioButtons = Array.from(form.querySelectorAll("input[type=radio]")).filter(function(radio) {
        return radio instanceof HTMLInputElement && radio.name === name;
      }).map(function(radio) {
        return {
          elem: radio,
          text: _this.getElementDescription(form, radio)
        };
      });
      var exactMatch = radioButtons.find(function(radio) {
        return radio.text === value;
      });
      if (exactMatch) {
        return exactMatch.elem;
      }
      var partialMatch = radioButtons.filter(function(radio) {
        return radio.text && radio.text.includes(value);
      });
      if (partialMatch.length === 1) {
        return partialMatch[0].elem;
      }
      return null;
    };
    SmartPasteButton2.prototype.triggerBeforeChange = function(element2) {
      element2.dispatchEvent(new CustomEvent("beforeinput", {
        bubbles: true,
        detail: {
          fromSmartComponents: true
        }
      }));
    };
    SmartPasteButton2.prototype.triggerAfterChange = function(element2) {
      element2.dispatchEvent(new CustomEvent("input", {
        bubbles: true,
        detail: {
          fromSmartComponents: true
        }
      }));
      element2.dispatchEvent(new CustomEvent("change", {
        bubbles: true,
        detail: {
          fromSmartComponents: true
        }
      }));
    };
    SmartPasteButton2.prototype.updateElementValue = function(element2, value) {
      var isEjsControl = element2.classList.contains("e-control");
      if (element2 instanceof HTMLInputElement && (element2.type === "radio" || element2.type === "checkbox")) {
        var responseValue = value == null ? void 0 : value.toString().toLowerCase();
        var isResponseValue = responseValue === "true" || responseValue === "yes" || responseValue === "on";
        if (element2.checked !== isResponseValue) {
          this.triggerBeforeChange(element2);
          if (isEjsControl) {
            element2["ej2_instances"][0].checked = isResponseValue;
          } else {
            element2.checked = isResponseValue;
          }
          this.triggerAfterChange(element2);
        }
      } else if (element2 instanceof HTMLSelectElement) {
        var optionText_1 = value.toString();
        var index = null;
        var options = Array.from(element2.querySelectorAll("option"));
        var exactMatch = options.filter(function(option) {
          return option.textContent === optionText_1;
        });
        if (exactMatch.length > 0) {
          index = options.indexOf(exactMatch[0]);
        } else {
          var partialMatch = options.filter(function(option) {
            return option.textContent && option.textContent.indexOf(optionText_1) >= 0;
          });
          if (partialMatch.length === 1) {
            index = options.indexOf(partialMatch[0]);
          }
        }
        if (index !== null && element2.selectedIndex !== index) {
          this.triggerBeforeChange(element2);
          if (isEjsControl) {
            element2["ej2_instances"][0].index = index;
          } else {
            element2.selectedIndex = index;
          }
          this.triggerAfterChange(element2);
        }
      } else {
        this.triggerBeforeChange(element2);
        if (element2.classList.contains("e-rating") || element2.classList.contains("e-colorpicker")) {
          element2["ej2_instances"][0].value = value;
        } else {
          element2.value = value;
        }
        this.triggerAfterChange(element2);
      }
      element2.focus();
    };
    SmartPasteButton2.prototype.getFormFields = function(form) {
      var _this = this;
      var fields = [];
      var uniqueCount = 0;
      form.querySelectorAll("input, select, textarea").forEach(function(element2) {
        if (!(element2 instanceof HTMLInputElement || element2 instanceof HTMLSelectElement || element2 instanceof HTMLTextAreaElement)) {
          return;
        }
        if (element2.type === "hidden" || _this.isFieldIgnore(element2)) {
          return;
        }
        var isRadioButton = element2.type === "radio";
        var identifier = isRadioButton ? element2.name : element2.id || element2.name || "unidentified_" + ++uniqueCount;
        if (isRadioButton && fields.find(function(field) {
          return field.fieldName === identifier;
        })) {
          return;
        }
        var FieldDescription = null;
        if (!isRadioButton) {
          FieldDescription = _this.getElementDescription(form, element2);
          if (!FieldDescription) {
            return;
          }
        }
        var fieldInfo = {
          fieldName: element2.name,
          description: FieldDescription,
          element: element2,
          type: element2.type === "checkbox" ? "boolean" : element2.type === "number" ? "number" : "string"
        };
        if (element2 instanceof HTMLSelectElement) {
          var options = Array.from(element2.querySelectorAll("option")).filter(function(option) {
            return option.value;
          });
          fieldInfo.allowedValues = options.map(function(option) {
            return option.textContent;
          });
          fieldInfo.type = "fixed-choices";
        } else if (isRadioButton) {
          fieldInfo.allowedValues = [];
          fieldInfo.type = "fixed-choices";
          Array.from(form.querySelectorAll("input[type=radio]")).forEach(function(radio) {
            if (radio.name === identifier) {
              var radioDescription = _this.getElementDescription(form, radio);
              if (radioDescription) {
                fieldInfo.allowedValues.push(radioDescription);
              }
            }
          });
        }
        fields.push(fieldInfo);
      });
      return fields;
    };
    SmartPasteButton2.prototype.isFieldIgnore = function(element2) {
      return element2.hasAttribute("data-smartpaste-ignore") || element2.hasAttribute("aria-disabled") && element2.getAttribute("aria-disabled") === "true" || element2.hasAttribute("disabled") || element2.hasAttribute("readonly") || element2.hasAttribute("aria-readonly") && element2.getAttribute("aria-readonly") === "true" || element2.hasAttribute("aria-hidden") && element2.getAttribute("aria-hidden") === "true";
    };
    SmartPasteButton2.prototype.getElementDescription = function(form, element2) {
      if (element2.hasAttribute("data-smartpaste-description")) {
        return element2.getAttribute("data-smartpaste-description");
      }
      if ((element2 instanceof HTMLInputElement || element2 instanceof HTMLTextAreaElement) && element2.placeholder) {
        return element2.placeholder;
      }
      var label = form.querySelector('label[for="' + element2.id + '"]');
      if (label) {
        return label.textContent.trim();
      }
      return element2.name || element2.id;
    };
    SmartPasteButton2.prototype.getClipboardContent = function() {
      return __awaiter2(this, void 0, void 0, function() {
        var navigatorObj, customClipboard, error_1;
        return __generator2(this, function(_a) {
          switch (_a.label) {
            case 0:
              navigatorObj = navigator;
              customClipboard = document.getElementById("custom-clipboard");
              if (!(customClipboard && customClipboard.value)) return [3, 1];
              return [2, customClipboard.value];
            case 1:
              if (!(typeof window !== "undefined" && navigatorObj.clipboard && navigatorObj.clipboard.readText)) return [3, 6];
              _a.label = 2;
            case 2:
              _a.trys.push([2, 4, , 5]);
              return [4, navigatorObj.clipboard.readText()];
            case 3:
              return [2, _a.sent()];
            case 4:
              error_1 = _a.sent();
              return [2, "Clipboard access failed"];
            case 5:
              return [3, 7];
            case 6:
              return [2, "Clipboard API not supported"];
            case 7:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    __decorate8([Property()], SmartPasteButton2.prototype, "aiAssistHandler", void 0);
    return SmartPasteButton2;
  }(Button)
);

// node_modules/@syncfusion/ej2-popups/src/popup/popup.js
var __extends10 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate9 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PositionData = (
  /** @class */
  function(_super) {
    __extends10(PositionData2, _super);
    function PositionData2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate9([Property("left")], PositionData2.prototype, "X", void 0);
    __decorate9([Property("top")], PositionData2.prototype, "Y", void 0);
    return PositionData2;
  }(ChildProperty)
);
var CLASSNAMES = {
  ROOT: "e-popup",
  RTL: "e-rtl",
  OPEN: "e-popup-open",
  CLOSE: "e-popup-close"
};
var Popup = (
  /** @class */
  function(_super) {
    __extends10(Popup2, _super);
    function Popup2(element2, options) {
      return _super.call(this, options, element2) || this;
    }
    Popup2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "width":
            setStyleAttribute(this.element, {
              "width": formatUnit(newProp.width)
            });
            break;
          case "height":
            setStyleAttribute(this.element, {
              "height": formatUnit(newProp.height)
            });
            break;
          case "zIndex":
            setStyleAttribute(this.element, {
              "zIndex": newProp.zIndex
            });
            break;
          case "enableRtl":
            this.setEnableRtl();
            break;
          case "position":
          case "relateTo":
            this.refreshPosition();
            break;
          case "offsetX": {
            var x = newProp.offsetX - oldProp.offsetX;
            this.element.style.left = (parseInt(this.element.style.left, 10) + x).toString() + "px";
            break;
          }
          case "offsetY": {
            var y = newProp.offsetY - oldProp.offsetY;
            this.element.style.top = (parseInt(this.element.style.top, 10) + y).toString() + "px";
            break;
          }
          case "content":
            this.setContent();
            break;
          case "actionOnScroll":
            if (newProp.actionOnScroll !== "none") {
              this.wireScrollEvents();
            } else {
              this.unwireScrollEvents();
            }
            break;
        }
      }
    };
    Popup2.prototype.getModuleName = function() {
      return "popup";
    };
    Popup2.prototype.resolveCollision = function() {
      this.checkCollision();
    };
    Popup2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    Popup2.prototype.destroy = function() {
      if (this.element.classList.contains("e-popup-open")) {
        this.unwireEvents();
      }
      this.element.classList.remove(CLASSNAMES.ROOT, CLASSNAMES.RTL, CLASSNAMES.OPEN, CLASSNAMES.CLOSE);
      this.content = null;
      this.relateTo = null;
      destroy();
      _super.prototype.destroy.call(this);
    };
    Popup2.prototype.render = function() {
      this.element.classList.add(CLASSNAMES.ROOT);
      var styles = {};
      if (this.zIndex !== 1e3) {
        styles.zIndex = this.zIndex;
      }
      if (this.width !== "auto") {
        styles.width = formatUnit(this.width);
      }
      if (this.height !== "auto") {
        styles.height = formatUnit(this.height);
      }
      setStyleAttribute(this.element, styles);
      this.fixedParent = false;
      this.setEnableRtl();
      this.setContent();
    };
    Popup2.prototype.wireEvents = function() {
      if (Browser.isDevice) {
        EventHandler.add(window, "orientationchange", this.orientationOnChange, this);
      }
      if (this.actionOnScroll !== "none") {
        this.wireScrollEvents();
      }
    };
    Popup2.prototype.wireScrollEvents = function() {
      if (this.getRelateToElement()) {
        for (var _i = 0, _a = this.getScrollableParent(this.getRelateToElement()); _i < _a.length; _i++) {
          var parent_1 = _a[_i];
          EventHandler.add(parent_1, "scroll", this.scrollRefresh, this);
        }
      }
    };
    Popup2.prototype.unwireEvents = function() {
      if (Browser.isDevice) {
        EventHandler.remove(window, "orientationchange", this.orientationOnChange);
      }
      if (this.actionOnScroll !== "none") {
        this.unwireScrollEvents();
      }
    };
    Popup2.prototype.unwireScrollEvents = function() {
      if (this.getRelateToElement()) {
        for (var _i = 0, _a = this.getScrollableParent(this.getRelateToElement()); _i < _a.length; _i++) {
          var parent_2 = _a[_i];
          EventHandler.remove(parent_2, "scroll", this.scrollRefresh);
        }
      }
    };
    Popup2.prototype.getRelateToElement = function() {
      var relateToElement = this.relateTo === "" || isNullOrUndefined(this.relateTo) ? document.body : this.relateTo;
      this.setProperties({
        relateTo: relateToElement
      }, true);
      return typeof this.relateTo === "string" ? document.querySelector(this.relateTo) : this.relateTo;
    };
    Popup2.prototype.scrollRefresh = function(e) {
      if (this.actionOnScroll === "reposition") {
        if (!isNullOrUndefined(this.element) && !(this.element.offsetParent === e.target || this.element.offsetParent && this.element.offsetParent.tagName === "BODY" && e.target.parentElement == null)) {
          this.refreshPosition();
        }
      } else if (this.actionOnScroll === "hide") {
        this.hide();
      }
      if (this.actionOnScroll !== "none") {
        if (this.getRelateToElement()) {
          var targetVisible = this.isElementOnViewport(this.getRelateToElement(), e.target);
          if (!targetVisible && !this.targetInvisibleStatus) {
            this.trigger("targetExitViewport");
            this.targetInvisibleStatus = true;
          } else if (targetVisible) {
            this.targetInvisibleStatus = false;
          }
        }
      }
    };
    Popup2.prototype.isElementOnViewport = function(relateToElement, scrollElement) {
      var scrollParents = this.getScrollableParent(relateToElement);
      for (var parent_3 = 0; parent_3 < scrollParents.length; parent_3++) {
        if (this.isElementVisible(relateToElement, scrollParents[parent_3])) {
          continue;
        } else {
          return false;
        }
      }
      return true;
    };
    Popup2.prototype.isElementVisible = function(relateToElement, scrollElement) {
      var rect = this.checkGetBoundingClientRect(relateToElement);
      if (!rect.height || !rect.width) {
        return false;
      }
      if (!isNullOrUndefined(this.checkGetBoundingClientRect(scrollElement))) {
        var parent_4 = scrollElement.getBoundingClientRect();
        return !(rect.bottom < parent_4.top) && !(rect.bottom > parent_4.bottom) && !(rect.right > parent_4.right) && !(rect.left < parent_4.left);
      } else {
        var win = window;
        var windowView = {
          top: win.scrollY,
          left: win.scrollX,
          right: win.scrollX + win.outerWidth,
          bottom: win.scrollY + win.outerHeight
        };
        var off = calculatePosition(relateToElement);
        var ele = {
          top: off.top,
          left: off.left,
          right: off.left + rect.width,
          bottom: off.top + rect.height
        };
        var elementView = {
          top: windowView.bottom - ele.top,
          left: windowView.right - ele.left,
          bottom: ele.bottom - windowView.top,
          right: ele.right - windowView.left
        };
        return elementView.top > 0 && elementView.left > 0 && elementView.right > 0 && elementView.bottom > 0;
      }
    };
    Popup2.prototype.preRender = function() {
    };
    Popup2.prototype.setEnableRtl = function() {
      this.reposition();
      if (this.enableRtl) {
        this.element.classList.add(CLASSNAMES.RTL);
      } else {
        this.element.classList.remove(CLASSNAMES.RTL);
      }
    };
    Popup2.prototype.setContent = function() {
      if (!isNullOrUndefined(this.content)) {
        this.element.innerHTML = "";
        if (typeof this.content === "string") {
          this.element.textContent = this.content;
        } else {
          var relateToElem = this.getRelateToElement();
          var props = this.content.props;
          if (!relateToElem.classList.contains("e-dropdown-btn") || isNullOrUndefined(props)) {
            this.element.appendChild(this.content);
          }
        }
      }
    };
    Popup2.prototype.orientationOnChange = function() {
      var _this = this;
      setTimeout(function() {
        _this.refreshPosition();
      }, 200);
    };
    Popup2.prototype.refreshPosition = function(target, collision) {
      if (!isNullOrUndefined(target)) {
        this.checkFixedParent(target);
      }
      this.reposition();
      if (!collision) {
        this.checkCollision();
      }
    };
    Popup2.prototype.reposition = function() {
      var pos;
      var position;
      var relateToElement = this.getRelateToElement();
      if (typeof this.position.X === "number" && typeof this.position.Y === "number") {
        pos = {
          left: this.position.X,
          top: this.position.Y
        };
      } else if (typeof this.position.X === "string" && typeof this.position.Y === "number" || typeof this.position.X === "number" && typeof this.position.Y === "string") {
        var parentDisplay = void 0;
        var display = this.element.style.display;
        this.element.style.display = "block";
        if (this.element.classList.contains("e-dlg-modal")) {
          parentDisplay = this.element.parentElement.style.display;
          this.element.parentElement.style.display = "block";
        }
        position = this.getAnchorPosition(relateToElement, this.element, this.position, this.offsetX, this.offsetY);
        if (typeof this.position.X === "string") {
          pos = {
            left: position.left,
            top: this.position.Y
          };
        } else {
          pos = {
            left: this.position.X,
            top: position.top
          };
        }
        this.element.style.display = display;
        if (this.element.classList.contains("e-dlg-modal")) {
          this.element.parentElement.style.display = parentDisplay;
        }
      } else if (relateToElement) {
        var height = this.element.clientHeight;
        var display = this.element.style.display;
        this.element.style.display = "block";
        pos = this.getAnchorPosition(relateToElement, this.element, this.position, this.offsetX, this.offsetY, height);
        this.element.style.display = display;
      } else {
        pos = {
          left: 0,
          top: 0
        };
      }
      if (!isNullOrUndefined(pos)) {
        this.element.style.left = pos.left + "px";
        this.element.style.top = pos.top + "px";
      }
    };
    Popup2.prototype.checkGetBoundingClientRect = function(ele) {
      var eleRect;
      try {
        eleRect = ele.getBoundingClientRect();
        return eleRect;
      } catch (error) {
        return null;
      }
    };
    Popup2.prototype.getAnchorPosition = function(anchorEle, ele, position, offsetX, offsetY, height) {
      if (height === void 0) {
        height = 0;
      }
      var eleRect = this.checkGetBoundingClientRect(ele);
      var anchorRect = this.checkGetBoundingClientRect(anchorEle);
      if (isNullOrUndefined(eleRect) || isNullOrUndefined(anchorRect)) {
        return null;
      }
      var anchor = anchorEle;
      var anchorPos = {
        left: 0,
        top: 0
      };
      if (ele.offsetParent && ele.offsetParent.tagName === "BODY" && anchorEle.tagName === "BODY") {
        anchorPos = calculatePosition(anchorEle);
      } else {
        if (ele.classList.contains("e-dlg-modal") && anchor.tagName !== "BODY") {
          ele = ele.parentElement;
        }
        anchorPos = calculateRelativeBasedPosition(anchor, ele);
      }
      switch (position.X) {
        default:
        case "left":
          break;
        case "center":
          if (ele.classList.contains("e-dlg-modal") && anchor.tagName === "BODY" && this.targetType === "container") {
            anchorPos.left += window.innerWidth / 2 - eleRect.width / 2;
          } else if (this.targetType === "container") {
            anchorPos.left += anchorRect.width / 2 - eleRect.width / 2;
          } else {
            anchorPos.left += anchorRect.width / 2;
          }
          break;
        case "right":
          if (ele.classList.contains("e-dlg-modal") && anchor.tagName === "BODY" && this.targetType === "container") {
            anchorPos.left += window.innerWidth - eleRect.width;
          } else if (this.targetType === "container") {
            var scaleX = 1;
            var tranformElement = getTransformElement(ele);
            if (tranformElement) {
              var transformStyle = getComputedStyle(tranformElement).transform;
              if (transformStyle !== "none") {
                var matrix = new DOMMatrix(transformStyle);
                scaleX = matrix.a;
              }
              var zoomStyle = getComputedStyle(tranformElement).zoom;
              if (zoomStyle !== "none") {
                var bodyZoom = getZoomValue(document.body);
                scaleX = bodyZoom * scaleX;
              }
            }
            anchorPos.left += (anchorRect.width - eleRect.width) / scaleX;
          } else {
            anchorPos.left += anchorRect.width;
          }
          break;
      }
      switch (position.Y) {
        default:
        case "top":
          break;
        case "center":
          if (ele.classList.contains("e-dlg-modal") && anchor.tagName === "BODY" && this.targetType === "container") {
            anchorPos.top += window.innerHeight / 2 - eleRect.height / 2;
          } else if (this.targetType === "container") {
            anchorPos.top += anchorRect.height / 2 - eleRect.height / 2;
          } else {
            anchorPos.top += anchorRect.height / 2;
          }
          break;
        case "bottom":
          if (ele.classList.contains("e-dlg-modal") && anchor.tagName === "BODY" && this.targetType === "container") {
            anchorPos.top += window.innerHeight - eleRect.height;
          } else if (this.targetType === "container" && !ele.classList.contains("e-dialog")) {
            anchorPos.top += anchorRect.height - eleRect.height;
          } else if (this.targetType === "container" && ele.classList.contains("e-dialog")) {
            anchorPos.top += anchorRect.height - height;
          } else {
            anchorPos.top += anchorRect.height;
          }
          break;
      }
      anchorPos.left += offsetX;
      anchorPos.top += offsetY;
      return anchorPos;
    };
    Popup2.prototype.callFlip = function(param) {
      var relateToElement = this.getRelateToElement();
      flip(this.element, relateToElement, this.offsetX, this.offsetY, this.position.X, this.position.Y, this.viewPortElement, param, this.fixedParent);
    };
    Popup2.prototype.callFit = function(param) {
      if (isCollide(this.element, this.viewPortElement).length !== 0) {
        if (isNullOrUndefined(this.viewPortElement)) {
          var data = fit(this.element, this.viewPortElement, param);
          if (param.X) {
            this.element.style.left = data.left + "px";
          }
          if (param.Y) {
            this.element.style.top = data.top + "px";
          }
        } else {
          var elementRect2 = this.checkGetBoundingClientRect(this.element);
          var viewPortRect = this.checkGetBoundingClientRect(this.viewPortElement);
          if (isNullOrUndefined(elementRect2) || isNullOrUndefined(viewPortRect)) {
            return null;
          }
          if (param && param.Y === true) {
            if (viewPortRect.top > elementRect2.top) {
              this.element.style.top = "0px";
            } else if (viewPortRect.bottom < elementRect2.bottom) {
              this.element.style.top = parseInt(this.element.style.top, 10) - (elementRect2.bottom - viewPortRect.bottom) + "px";
            }
          }
          if (param && param.X === true) {
            if (viewPortRect.right < elementRect2.right) {
              this.element.style.left = parseInt(this.element.style.left, 10) - (elementRect2.right - viewPortRect.right) + "px";
            } else if (viewPortRect.left > elementRect2.left) {
              this.element.style.left = parseInt(this.element.style.left, 10) + (viewPortRect.left - elementRect2.left) + "px";
            }
          }
        }
      }
    };
    Popup2.prototype.checkCollision = function() {
      var horz = this.collision.X;
      var vert = this.collision.Y;
      if (horz === "none" && vert === "none") {
        return;
      }
      if (horz === "flip" && vert === "flip") {
        this.callFlip({
          X: true,
          Y: true
        });
      } else if (horz === "fit" && vert === "fit") {
        this.callFit({
          X: true,
          Y: true
        });
      } else {
        if (horz === "flip") {
          this.callFlip({
            X: true,
            Y: false
          });
        } else if (vert === "flip") {
          this.callFlip({
            Y: true,
            X: false
          });
        }
        if (horz === "fit") {
          this.callFit({
            X: true,
            Y: false
          });
        } else if (vert === "fit") {
          this.callFit({
            X: false,
            Y: true
          });
        }
      }
    };
    Popup2.prototype.show = function(animationOptions, relativeElement) {
      var _this = this;
      this.wireEvents();
      this.getRelateToElement();
      if (this.zIndex === 1e3 || !isNullOrUndefined(relativeElement)) {
        var zIndexElement = isNullOrUndefined(relativeElement) ? this.element : relativeElement;
        this.zIndex = getZindexPartial(zIndexElement);
        setStyleAttribute(this.element, {
          "zIndex": this.zIndex
        });
      }
      animationOptions = !isNullOrUndefined(animationOptions) && typeof animationOptions === "object" ? animationOptions : this.showAnimation;
      if (this.collision.X !== "none" || this.collision.Y !== "none") {
        removeClass([this.element], CLASSNAMES.CLOSE);
        addClass([this.element], CLASSNAMES.OPEN);
        this.checkCollision();
        removeClass([this.element], CLASSNAMES.OPEN);
        addClass([this.element], CLASSNAMES.CLOSE);
      }
      if (!isNullOrUndefined(animationOptions)) {
        animationOptions.begin = function() {
          if (!_this.isDestroyed) {
            removeClass([_this.element], CLASSNAMES.CLOSE);
            addClass([_this.element], CLASSNAMES.OPEN);
          }
        };
        animationOptions.end = function() {
          if (!_this.isDestroyed) {
            _this.trigger("open");
          }
        };
        new Animation(animationOptions).animate(this.element);
      } else {
        removeClass([this.element], CLASSNAMES.CLOSE);
        addClass([this.element], CLASSNAMES.OPEN);
        this.trigger("open");
      }
    };
    Popup2.prototype.hide = function(animationOptions) {
      var _this = this;
      animationOptions = !isNullOrUndefined(animationOptions) && typeof animationOptions === "object" ? animationOptions : this.hideAnimation;
      if (!isNullOrUndefined(animationOptions)) {
        animationOptions.end = function() {
          if (!_this.isDestroyed) {
            removeClass([_this.element], CLASSNAMES.OPEN);
            addClass([_this.element], CLASSNAMES.CLOSE);
            _this.trigger("close");
          }
        };
        new Animation(animationOptions).animate(this.element);
      } else {
        removeClass([this.element], CLASSNAMES.OPEN);
        addClass([this.element], CLASSNAMES.CLOSE);
        this.trigger("close");
      }
      this.unwireEvents();
    };
    Popup2.prototype.getScrollableParent = function(element2) {
      this.checkFixedParent(element2);
      return getScrollableParent(element2, this.fixedParent);
    };
    Popup2.prototype.checkFixedParent = function(element2) {
      var parent = element2.parentElement;
      while (parent && parent.tagName !== "HTML") {
        var parentStyle = getComputedStyle(parent);
        if ((parentStyle.position === "fixed" || parentStyle.position === "sticky") && !isNullOrUndefined(this.element) && this.element.offsetParent && this.element.offsetParent.tagName === "BODY" && getComputedStyle(this.element.offsetParent).overflow !== "hidden") {
          this.element.style.top = window.scrollY > parseInt(this.element.style.top, 10) ? formatUnit(window.scrollY - parseInt(this.element.style.top, 10)) : formatUnit(parseInt(this.element.style.top, 10) - window.scrollY);
          this.element.style.position = "fixed";
          this.fixedParent = true;
        }
        parent = parent.parentElement;
        if (!isNullOrUndefined(this.element) && isNullOrUndefined(this.element.offsetParent) && parentStyle.position === "fixed" && this.element.style.position === "fixed") {
          this.fixedParent = true;
        }
      }
    };
    __decorate9([Property("auto")], Popup2.prototype, "height", void 0);
    __decorate9([Property("auto")], Popup2.prototype, "width", void 0);
    __decorate9([Property(null)], Popup2.prototype, "content", void 0);
    __decorate9([Property("container")], Popup2.prototype, "targetType", void 0);
    __decorate9([Property(null)], Popup2.prototype, "viewPortElement", void 0);
    __decorate9([Property({
      X: "none",
      Y: "none"
    })], Popup2.prototype, "collision", void 0);
    __decorate9([Property("")], Popup2.prototype, "relateTo", void 0);
    __decorate9([Complex({}, PositionData)], Popup2.prototype, "position", void 0);
    __decorate9([Property(0)], Popup2.prototype, "offsetX", void 0);
    __decorate9([Property(0)], Popup2.prototype, "offsetY", void 0);
    __decorate9([Property(1e3)], Popup2.prototype, "zIndex", void 0);
    __decorate9([Property(false)], Popup2.prototype, "enableRtl", void 0);
    __decorate9([Property("reposition")], Popup2.prototype, "actionOnScroll", void 0);
    __decorate9([Property(null)], Popup2.prototype, "showAnimation", void 0);
    __decorate9([Property(null)], Popup2.prototype, "hideAnimation", void 0);
    __decorate9([Event()], Popup2.prototype, "open", void 0);
    __decorate9([Event()], Popup2.prototype, "close", void 0);
    __decorate9([Event()], Popup2.prototype, "targetExitViewport", void 0);
    Popup2 = __decorate9([NotifyPropertyChanges], Popup2);
    return Popup2;
  }(Component)
);
function getScrollableParent(element2, fixedParent2) {
  var eleStyle = getComputedStyle(element2);
  var scrollParents = [];
  var overflowRegex = /(auto|scroll)/;
  var parent = element2.parentElement;
  while (parent && parent.tagName !== "HTML") {
    var parentStyle = getComputedStyle(parent);
    if (!(eleStyle.position === "absolute" && parentStyle.position === "static") && overflowRegex.test(parentStyle.overflow + parentStyle.overflowY + parentStyle.overflowX)) {
      scrollParents.push(parent);
    }
    parent = parent.parentElement;
  }
  if (!fixedParent2) {
    scrollParents.push(document);
  }
  return scrollParents;
}
function getZindexPartial(element2) {
  var parent = element2.parentElement;
  var parentZindex = [];
  while (parent) {
    if (parent.tagName !== "BODY") {
      var index = document.defaultView.getComputedStyle(parent, null).getPropertyValue("z-index");
      var position = document.defaultView.getComputedStyle(parent, null).getPropertyValue("position");
      if (index !== "auto" && position !== "static") {
        parentZindex.push(index);
      }
      parent = parent.parentElement;
    } else {
      break;
    }
  }
  var childrenZindex = [];
  for (var i = 0; i < document.body.children.length; i++) {
    if (!element2.isEqualNode(document.body.children[i])) {
      var index = document.defaultView.getComputedStyle(document.body.children[i], null).getPropertyValue("z-index");
      var position = document.defaultView.getComputedStyle(document.body.children[i], null).getPropertyValue("position");
      if (index !== "auto" && position !== "static") {
        childrenZindex.push(index);
      }
    }
  }
  childrenZindex.push("999");
  var siblingsZindex = [];
  if (!isNullOrUndefined(element2.parentElement) && element2.parentElement.tagName !== "BODY") {
    var childNodes = [].slice.call(element2.parentElement.children);
    for (var i = 0; i < childNodes.length; i++) {
      if (!element2.isEqualNode(childNodes[i])) {
        var index = document.defaultView.getComputedStyle(childNodes[i], null).getPropertyValue("z-index");
        var position = document.defaultView.getComputedStyle(childNodes[i], null).getPropertyValue("position");
        if (index !== "auto" && position !== "static") {
          siblingsZindex.push(index);
        }
      }
    }
  }
  var finalValue = parentZindex.concat(childrenZindex, siblingsZindex);
  var currentZindexValue = Math.max.apply(Math, finalValue) + 1;
  return currentZindexValue > 2147483647 ? 2147483647 : currentZindexValue;
}

// node_modules/@syncfusion/ej2-popups/src/common/resize.js
var elementClass = ["north-west", "north", "north-east", "west", "east", "south-west", "south", "south-east"];
var RESIZE_HANDLER = "e-resize-handle";
var FOCUSED_HANDLER = "e-focused-handle";
var DIALOG_RESIZABLE = "e-dlg-resizable";
var RESTRICT_LEFT = ["e-restrict-left"];
var RESIZE_WITHIN_VIEWPORT = "e-resize-viewport";
var dialogBorderResize = ["north", "west", "east", "south"];
var targetElement;
var selectedHandler;
var originalWidth = 0;
var originalHeight = 0;
var originalX = 0;
var originalY = 0;
var originalMouseX = 0;
var originalMouseY = 0;
var minHeight;
var maxHeight;
var minWidth;
var maxWidth;
var containerElement;
var resizeStart = null;
var resize = null;
var resizeEnd = null;
var resizeWestWidth;
var setLeft = true;
var previousWidth = 0;
var setWidth = true;
function createResize(args) {
  resizeStart = args.resizeBegin;
  resize = args.resizing;
  resizeEnd = args.resizeComplete;
  targetElement = getDOMElement(args.element);
  containerElement = getDOMElement(args.boundary);
  var directions = args.direction.split(" ");
  for (var i = 0; i < directions.length; i++) {
    if (dialogBorderResize.indexOf(directions[i]) >= 0 && directions[i]) {
      setBorderResizeElm(directions[i]);
    } else if (directions[i].trim() !== "") {
      var resizeHandler = createElement("div", {
        className: "e-icons " + RESIZE_HANDLER + " e-" + directions[i]
      });
      targetElement.appendChild(resizeHandler);
    }
  }
  minHeight = args.minHeight;
  minWidth = args.minWidth;
  maxWidth = args.maxWidth;
  maxHeight = args.maxHeight;
  if (args.proxy && args.proxy.element && args.proxy.element.classList.contains("e-dialog")) {
    wireEvents(args.proxy);
  } else {
    wireEvents();
  }
}
function setBorderResizeElm(direction) {
  calculateValues();
  var borderBottom = createElement("span", {
    attrs: {
      "unselectable": "on",
      "contenteditable": "false"
    }
  });
  borderBottom.setAttribute("class", "e-dialog-border-resize e-" + direction);
  if (direction === "south") {
    borderBottom.style.height = "2px";
    borderBottom.style.width = "100%";
    borderBottom.style.bottom = "0px";
    borderBottom.style.left = "0px";
  }
  if (direction === "north") {
    borderBottom.style.height = "2px";
    borderBottom.style.width = "100%";
    borderBottom.style.top = "0px";
    borderBottom.style.left = "0px";
  }
  if (direction === "east") {
    borderBottom.style.height = "100%";
    borderBottom.style.width = "2px";
    borderBottom.style.right = "0px";
    borderBottom.style.top = "0px";
  }
  if (direction === "west") {
    borderBottom.style.height = "100%";
    borderBottom.style.width = "2px";
    borderBottom.style.left = "0px";
    borderBottom.style.top = "0px";
  }
  targetElement.appendChild(borderBottom);
}
function getDOMElement(element2) {
  var domElement;
  if (!isNullOrUndefined(element2)) {
    if (typeof element2 === "string") {
      domElement = document.querySelector(element2);
    } else {
      domElement = element2;
    }
  }
  return domElement;
}
function wireEvents(args) {
  var context = args || this;
  var resizers = targetElement.querySelectorAll("." + RESIZE_HANDLER);
  for (var i = 0; i < resizers.length; i++) {
    selectedHandler = resizers[i];
    EventHandler.add(selectedHandler, "mousedown", onMouseDown, context);
    var eventName = Browser.info.name === "msie" ? "pointerdown" : "touchstart";
    EventHandler.add(selectedHandler, eventName, onTouchStart, context);
  }
  var borderResizers = targetElement.querySelectorAll(".e-dialog-border-resize");
  if (!isNullOrUndefined(borderResizers)) {
    for (var i = 0; i < borderResizers.length; i++) {
      selectedHandler = borderResizers[i];
      EventHandler.add(selectedHandler, "mousedown", onMouseDown, context);
      var eventName = Browser.info.name === "msie" ? "pointerdown" : "touchstart";
      EventHandler.add(selectedHandler, eventName, onTouchStart, context);
    }
  }
}
function getEventType(e) {
  return e.indexOf("mouse") > -1 ? "mouse" : "touch";
}
function onMouseDown(e) {
  e.preventDefault();
  targetElement = e.target.parentElement;
  calculateValues();
  originalMouseX = e.pageX;
  originalMouseY = e.pageY;
  e.target.classList.add(FOCUSED_HANDLER);
  if (!isNullOrUndefined(resizeStart)) {
    var proxy_1 = this;
    if (resizeStart(e, proxy_1) === true) {
      return;
    }
  }
  if (this.targetEle && targetElement && targetElement.querySelector("." + DIALOG_RESIZABLE)) {
    containerElement = this.target === "body" ? null : this.targetEle;
    maxWidth = this.targetEle.clientWidth;
    maxHeight = this.targetEle.clientHeight;
  }
  var target = isNullOrUndefined(containerElement) ? document : containerElement;
  EventHandler.add(target, "mousemove", onMouseMove, this);
  EventHandler.add(document, "mouseup", onMouseUp, this);
  for (var i = 0; i < RESTRICT_LEFT.length; i++) {
    if (targetElement.classList.contains(RESTRICT_LEFT[i])) {
      setLeft = false;
    } else {
      setLeft = true;
    }
  }
}
function onMouseUp(e) {
  var touchMoveEvent = Browser.info.name === "msie" ? "pointermove" : "touchmove";
  var touchEndEvent = Browser.info.name === "msie" ? "pointerup" : "touchend";
  var target = isNullOrUndefined(containerElement) ? document : containerElement;
  var eventName = Browser.info.name === "msie" ? "pointerdown" : "touchstart";
  EventHandler.remove(target, "mousemove", onMouseMove);
  EventHandler.remove(target, touchMoveEvent, onMouseMove);
  EventHandler.remove(target, eventName, onMouseMove);
  if (!isNullOrUndefined(document.body.querySelector("." + FOCUSED_HANDLER))) {
    document.body.querySelector("." + FOCUSED_HANDLER).classList.remove(FOCUSED_HANDLER);
  }
  if (!isNullOrUndefined(resizeEnd)) {
    var proxy_2 = this;
    resizeEnd(e, proxy_2);
  }
  EventHandler.remove(document, "mouseup", onMouseUp);
  EventHandler.remove(document, touchEndEvent, onMouseUp);
}
function calculateValues() {
  originalWidth = parseFloat(getComputedStyle(targetElement, null).getPropertyValue("width").replace("px", ""));
  originalHeight = parseFloat(getComputedStyle(targetElement, null).getPropertyValue("height").replace("px", ""));
  originalX = targetElement.getBoundingClientRect().left;
  originalY = targetElement.getBoundingClientRect().top;
}
function onTouchStart(e) {
  targetElement = e.target.parentElement;
  calculateValues();
  var dialogResizeElement = targetElement.classList.contains("e-dialog");
  if ((e.target.classList.contains(RESIZE_HANDLER) || e.target.classList.contains("e-dialog-border-resize")) && dialogResizeElement) {
    e.target.classList.add(FOCUSED_HANDLER);
  }
  var coordinates = e.touches ? e.changedTouches[0] : e;
  originalMouseX = coordinates.pageX;
  originalMouseY = coordinates.pageY;
  if (!isNullOrUndefined(resizeStart)) {
    var proxy_3 = this;
    if (resizeStart(e, proxy_3) === true) {
      return;
    }
  }
  var touchMoveEvent = Browser.info.name === "msie" ? "pointermove" : "touchmove";
  var touchEndEvent = Browser.info.name === "msie" ? "pointerup" : "touchend";
  var target = isNullOrUndefined(containerElement) ? document : containerElement;
  EventHandler.add(target, touchMoveEvent, onMouseMove, this);
  EventHandler.add(document, touchEndEvent, onMouseUp, this);
}
function onMouseMove(e) {
  if (e.target.classList.contains(RESIZE_HANDLER) && e.target.classList.contains(FOCUSED_HANDLER)) {
    selectedHandler = e.target;
  } else if (!isNullOrUndefined(document.body.querySelector("." + FOCUSED_HANDLER))) {
    selectedHandler = document.body.querySelector("." + FOCUSED_HANDLER);
  }
  if (!isNullOrUndefined(selectedHandler)) {
    var resizeTowards = "";
    for (var i = 0; i < elementClass.length; i++) {
      if (selectedHandler.classList.contains("e-" + elementClass[i])) {
        resizeTowards = elementClass[i];
      }
    }
    if (!isNullOrUndefined(resize)) {
      var proxy_4 = this;
      resize(e, proxy_4);
    }
    switch (resizeTowards) {
      case "south":
        resizeSouth(e);
        break;
      case "north":
        resizeNorth(e);
        break;
      case "west":
        resizeWest(e);
        break;
      case "east":
        resizeEast(e);
        break;
      case "south-east":
        resizeSouth(e);
        resizeEast(e);
        break;
      case "south-west":
        resizeSouth(e);
        resizeWest(e);
        break;
      case "north-east":
        resizeNorth(e);
        resizeEast(e);
        break;
      case "north-west":
        resizeNorth(e);
        resizeWest(e);
        break;
      default:
        break;
    }
  }
}
function getClientRectValues(element2) {
  return element2.getBoundingClientRect();
}
function resizeSouth(e) {
  var documentHeight = document.documentElement.clientHeight;
  var calculateValue = false;
  var coordinates = e.touches ? e.changedTouches[0] : e;
  var currentpageY = coordinates.pageY;
  var targetRectValues = getClientRectValues(targetElement);
  var containerRectValues;
  if (!isNullOrUndefined(containerElement)) {
    containerRectValues = getClientRectValues(containerElement);
  }
  if (!isNullOrUndefined(containerElement)) {
    calculateValue = true;
  } else if (isNullOrUndefined(containerElement) && (documentHeight - currentpageY >= 0 || targetRectValues.top < 0)) {
    calculateValue = true;
  }
  var calculatedHeight = originalHeight + (currentpageY - originalMouseY);
  calculatedHeight = calculatedHeight > minHeight ? calculatedHeight : minHeight;
  var containerTop = 0;
  if (!isNullOrUndefined(containerElement)) {
    containerTop = containerRectValues.top;
  }
  var borderValue = isNullOrUndefined(containerElement) ? 0 : containerElement.offsetHeight - containerElement.clientHeight;
  var topWithoutborder = targetRectValues.top - containerTop - borderValue / 2;
  topWithoutborder = topWithoutborder < 0 ? 0 : topWithoutborder;
  if (targetRectValues.top > 0 && topWithoutborder + calculatedHeight > maxHeight) {
    calculateValue = false;
    if (targetElement.classList.contains(RESIZE_WITHIN_VIEWPORT)) {
      return;
    }
    targetElement.style.height = maxHeight - parseInt(topWithoutborder.toString(), 10) + "px";
    return;
  }
  var targetTop = 0;
  if (calculateValue) {
    if (targetRectValues.top < 0 && documentHeight + (targetRectValues.height + targetRectValues.top) > 0) {
      targetTop = targetRectValues.top;
      if (calculatedHeight + targetTop <= 30) {
        calculatedHeight = targetRectValues.height - (targetRectValues.height + targetRectValues.top) + 30;
      }
    }
    if (calculatedHeight + targetRectValues.top >= maxHeight) {
      targetElement.style.height = targetRectValues.height + (documentHeight - (targetRectValues.height + targetRectValues.top)) + "px";
    }
    var calculatedTop = isNullOrUndefined(containerElement) ? targetTop : topWithoutborder;
    if (calculatedHeight >= minHeight && calculatedHeight + calculatedTop <= maxHeight) {
      targetElement.style.height = calculatedHeight + "px";
    }
  }
}
function resizeNorth(e) {
  var calculateValue = false;
  var boundaryRectValues;
  var pageY = getEventType(e.type) === "mouse" ? e.pageY : e.touches[0].pageY;
  var targetRectValues = getClientRectValues(targetElement);
  var borderValue = isNullOrUndefined(containerElement) ? 0 : containerElement.offsetHeight - containerElement.clientHeight;
  if (!isNullOrUndefined(containerElement)) {
    boundaryRectValues = getClientRectValues(containerElement);
  }
  if (!isNullOrUndefined(containerElement) && targetRectValues.top - boundaryRectValues.top > 0) {
    calculateValue = true;
  } else if (isNullOrUndefined(containerElement) && pageY > 0) {
    calculateValue = true;
  } else if (!isNullOrUndefined(containerElement) && Math.floor(targetRectValues.top - boundaryRectValues.top + targetRectValues.height + (boundaryRectValues.bottom - targetRectValues.bottom)) - borderValue <= maxHeight) {
    calculateValue = true;
  }
  var currentHeight = originalHeight - (pageY - originalMouseY);
  if (calculateValue) {
    if (currentHeight >= minHeight && currentHeight <= maxHeight) {
      var containerTop = 0;
      if (!isNullOrUndefined(containerElement)) {
        containerTop = boundaryRectValues.top;
      }
      var top_1 = originalY - containerTop + (pageY - originalMouseY);
      top_1 = top_1 > 0 ? top_1 : 1;
      targetElement.style.height = currentHeight + "px";
      targetElement.style.top = top_1 + "px";
    }
  }
}
function resizeWest(e) {
  var documentWidth = document.documentElement.clientWidth;
  var calculateValue = false;
  var rectValues;
  if (!isNullOrUndefined(containerElement)) {
    rectValues = getClientRectValues(containerElement);
  }
  var pageX = getEventType(e.type) === "mouse" ? e.pageX : e.touches[0].pageX;
  var targetRectValues = getClientRectValues(targetElement);
  var borderValue = isNullOrUndefined(containerElement) ? 0 : containerElement.offsetWidth - containerElement.clientWidth;
  var left = isNullOrUndefined(containerElement) ? 0 : rectValues.left;
  var containerWidth = isNullOrUndefined(containerElement) ? 0 : rectValues.width;
  if (isNullOrUndefined(resizeWestWidth)) {
    if (!isNullOrUndefined(containerElement)) {
      resizeWestWidth = targetRectValues.left - left - borderValue / 2 + targetRectValues.width;
      resizeWestWidth = resizeWestWidth + (containerWidth - borderValue - resizeWestWidth);
    } else {
      resizeWestWidth = documentWidth;
    }
  }
  if (!isNullOrUndefined(containerElement) && Math.floor(targetRectValues.left - rectValues.left + targetRectValues.width + (rectValues.right - targetRectValues.right)) - borderValue <= maxWidth) {
    calculateValue = true;
  } else if (isNullOrUndefined(containerElement) && pageX >= 0) {
    calculateValue = true;
  }
  var calculatedWidth = originalWidth - (pageX - originalMouseX);
  if (setLeft) {
    calculatedWidth = calculatedWidth > resizeWestWidth ? resizeWestWidth : calculatedWidth;
  }
  if (calculateValue) {
    if (calculatedWidth >= minWidth && calculatedWidth <= maxWidth) {
      var containerLeft = 0;
      if (!isNullOrUndefined(containerElement)) {
        containerLeft = rectValues.left;
      }
      var left_1 = originalX - containerLeft + (pageX - originalMouseX);
      left_1 = left_1 > 0 ? left_1 : 1;
      if (calculatedWidth !== previousWidth && setWidth) {
        targetElement.style.width = calculatedWidth + "px";
      }
      if (setLeft) {
        targetElement.style.left = left_1 + "px";
        if (left_1 === 1) {
          setWidth = false;
        } else {
          setWidth = true;
        }
      }
    }
  }
  previousWidth = calculatedWidth;
}
function resizeEast(e) {
  var documentWidth = document.documentElement.clientWidth;
  var calculateValue = false;
  var containerRectValues;
  if (!isNullOrUndefined(containerElement)) {
    containerRectValues = getClientRectValues(containerElement);
  }
  var coordinates = e.touches ? e.changedTouches[0] : e;
  var pageX = coordinates.pageX;
  var targetRectValues = getClientRectValues(targetElement);
  if (!isNullOrUndefined(containerElement) && (targetRectValues.left - containerRectValues.left + targetRectValues.width <= maxWidth || targetRectValues.right - containerRectValues.left >= targetRectValues.width)) {
    calculateValue = true;
  } else if (isNullOrUndefined(containerElement) && documentWidth - pageX > 0) {
    calculateValue = true;
  }
  var calculatedWidth = originalWidth + (pageX - originalMouseX);
  var containerLeft = 0;
  if (!isNullOrUndefined(containerElement)) {
    containerLeft = containerRectValues.left;
  }
  if (targetRectValues.left - containerLeft + calculatedWidth > maxWidth) {
    calculateValue = false;
    if (targetElement.classList.contains(RESIZE_WITHIN_VIEWPORT)) {
      return;
    }
    targetElement.style.width = maxWidth - (targetRectValues.left - containerLeft) + "px";
  }
  if (calculateValue) {
    if (calculatedWidth >= minWidth && calculatedWidth <= maxWidth) {
      targetElement.style.width = calculatedWidth + "px";
    }
  }
}
function setMinHeight(minimumHeight) {
  minHeight = minimumHeight;
}
function setMaxWidth(value) {
  maxWidth = value;
}
function setMaxHeight(value) {
  maxHeight = value;
}
function removeResize() {
  var handlers = targetElement.querySelectorAll("." + RESIZE_HANDLER);
  for (var i = 0; i < handlers.length; i++) {
    detach(handlers[i]);
  }
  var borderResizers = targetElement.querySelectorAll(".e-dialog-border-resize");
  if (!isNullOrUndefined(borderResizers)) {
    for (var i = 0; i < borderResizers.length; i++) {
      detach(borderResizers[i]);
    }
  }
}
function resizeDestroy() {
  targetElement = null;
  selectedHandler = null;
  containerElement = null;
  resizeWestWidth = null;
  resizeStart = null;
  resize = null;
  resizeEnd = null;
}

// node_modules/@syncfusion/ej2-popups/src/dialog/dialog.js
var __extends11 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate10 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ButtonProps = (
  /** @class */
  function(_super) {
    __extends11(ButtonProps2, _super);
    function ButtonProps2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate10([Property(true)], ButtonProps2.prototype, "isFlat", void 0);
    __decorate10([Property()], ButtonProps2.prototype, "buttonModel", void 0);
    __decorate10([Property("Button")], ButtonProps2.prototype, "type", void 0);
    __decorate10([Event()], ButtonProps2.prototype, "click", void 0);
    return ButtonProps2;
  }(ChildProperty)
);
var AnimationSettings = (
  /** @class */
  function(_super) {
    __extends11(AnimationSettings3, _super);
    function AnimationSettings3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate10([Property("Fade")], AnimationSettings3.prototype, "effect", void 0);
    __decorate10([Property(400)], AnimationSettings3.prototype, "duration", void 0);
    __decorate10([Property(0)], AnimationSettings3.prototype, "delay", void 0);
    return AnimationSettings3;
  }(ChildProperty)
);
var ROOT = "e-dialog";
var RTL4 = "e-rtl";
var DLG_HEADER_CONTENT = "e-dlg-header-content";
var DLG_HEADER = "e-dlg-header";
var DLG_FOOTER_CONTENT = "e-footer-content";
var MODAL_DLG = "e-dlg-modal";
var DLG_CONTENT = "e-dlg-content";
var DLG_CLOSE_ICON = "e-icon-dlg-close";
var DLG_OVERLAY = "e-dlg-overlay";
var DLG_TARGET = "e-dlg-target";
var DLG_CONTAINER = "e-dlg-container";
var SCROLL_DISABLED = "e-scroll-disabled";
var DLG_PRIMARY_BUTTON = "e-primary";
var ICON = "e-icons";
var POPUP_ROOT = "e-popup";
var DEVICE = "e-device";
var FULLSCREEN = "e-dlg-fullscreen";
var DLG_CLOSE_ICON_BTN = "e-dlg-closeicon-btn";
var DLG_HIDE = "e-popup-close";
var DLG_SHOW = "e-popup-open";
var DLG_UTIL_DEFAULT_TITLE = "Information";
var DLG_UTIL_ROOT = "e-scroll-disabled";
var DLG_UTIL_ALERT = "e-alert-dialog";
var DLG_UTIL_CONFIRM = "e-confirm-dialog";
var DLG_RESIZABLE = "e-dlg-resizable";
var DLG_RESTRICT_LEFT_VALUE = "e-restrict-left";
var DLG_RESTRICT_WIDTH_VALUE = "e-resize-viewport";
var DLG_REF_ELEMENT = "e-dlg-ref-element";
var DLG_USER_ACTION_CLOSED = "user action";
var DLG_CLOSE_ICON_CLOSED = "close icon";
var DLG_ESCAPE_CLOSED = "escape";
var DLG_OVERLAYCLICK_CLOSED = "overlayClick";
var DLG_DRAG = "e-draggable";
var Dialog = (
  /** @class */
  function(_super) {
    __extends11(Dialog2, _super);
    function Dialog2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.needsID = true;
      return _this;
    }
    Dialog2.prototype.render = function() {
      this.initialize();
      this.initRender();
      this.wireEvents();
      if (this.width === "100%") {
        this.element.style.width = "";
      }
      if (this.minHeight !== "") {
        this.element.style.minHeight = formatUnit(this.minHeight);
      }
      if (this.enableResize) {
        this.setResize();
        if (this.isModal) {
          this.isModelResize = true;
        }
        if (this.animationSettings.effect === "None") {
          this.getMinHeight();
        }
      }
      this.renderComplete();
    };
    Dialog2.prototype.initializeValue = function() {
      this.dlgClosedBy = DLG_USER_ACTION_CLOSED;
    };
    Dialog2.prototype.preRender = function() {
      var _this = this;
      this.initializeValue();
      this.headerContent = null;
      this.allowMaxHeight = true;
      this.preventVisibility = true;
      this.clonedEle = this.element.cloneNode(true);
      this.closeIconClickEventHandler = function(event2) {
        _this.dlgClosedBy = DLG_CLOSE_ICON_CLOSED;
        _this.hide(event2);
      };
      this.dlgOverlayClickEventHandler = function(event2) {
        _this.dlgClosedBy = DLG_OVERLAYCLICK_CLOSED;
        event2.preventFocus = false;
        _this.trigger("overlayClick", event2, function(overlayClickEventArgs) {
          if (!overlayClickEventArgs.preventFocus) {
            _this.focusContent();
          }
          _this.dlgClosedBy = DLG_USER_ACTION_CLOSED;
        });
      };
      var localeText = {
        close: "Close"
      };
      this.l10n = new L10n("dialog", localeText, this.locale);
      this.checkPositionData();
      if (isNullOrUndefined(this.target)) {
        var prevOnChange = this.isProtectedOnChange;
        this.isProtectedOnChange = true;
        this.target = document.body;
        this.isProtectedOnChange = prevOnChange;
      }
    };
    Dialog2.prototype.updatePersistData = function() {
      if (this.enablePersistence) {
        this.setProperties({
          width: parseFloat(this.element.style.width),
          height: parseFloat(this.element.style.height),
          position: {
            X: parseFloat(this.dragObj.element.style.left),
            Y: parseFloat(this.dragObj.element.style.top)
          }
        }, true);
      }
    };
    Dialog2.prototype.isNumberValue = function(value) {
      var isNumber = /^[-+]?\d*\.?\d+$/.test(value);
      return isNumber;
    };
    Dialog2.prototype.checkPositionData = function() {
      if (!isNullOrUndefined(this.position)) {
        if (!isNullOrUndefined(this.position.X) && typeof this.position.X !== "number") {
          var isNumber = this.isNumberValue(this.position.X);
          if (isNumber) {
            var prevOnChange = this.isProtectedOnChange;
            this.isProtectedOnChange = true;
            this.position.X = parseFloat(this.position.X);
            this.isProtectedOnChange = prevOnChange;
          }
        }
        if (!isNullOrUndefined(this.position.Y) && typeof this.position.Y !== "number") {
          var isNumber = this.isNumberValue(this.position.Y);
          if (isNumber) {
            var prevOnChange = this.isProtectedOnChange;
            this.isProtectedOnChange = true;
            this.position.Y = parseFloat(this.position.Y);
            this.isProtectedOnChange = prevOnChange;
          }
        }
      }
    };
    Dialog2.prototype.getEle = function(list, selector) {
      var element2 = void 0;
      for (var i = 0; i < list.length; i++) {
        if (list[i].classList.contains(selector)) {
          element2 = list[i];
          break;
        }
      }
      return element2;
    };
    Dialog2.prototype.getMinHeight = function() {
      var computedHeaderHeight = "0px";
      var computedFooterHeight = "0px";
      if (!isNullOrUndefined(this.element.querySelector("." + DLG_HEADER_CONTENT))) {
        computedHeaderHeight = getComputedStyle(this.headerContent).height;
      }
      var footerEle = this.getEle(this.element.children, DLG_FOOTER_CONTENT);
      if (!isNullOrUndefined(footerEle)) {
        computedFooterHeight = getComputedStyle(footerEle).height;
      }
      var headerHeight = parseInt(computedHeaderHeight.slice(0, computedHeaderHeight.indexOf("p")), 10);
      var footerHeight = parseInt(computedFooterHeight.slice(0, computedFooterHeight.indexOf("p")), 10);
      setMinHeight(headerHeight + 30 + (isNaN(footerHeight) ? 0 : footerHeight));
      return headerHeight + 30 + footerHeight;
    };
    Dialog2.prototype.onResizeStart = function(args, dialogObj) {
      dialogObj.trigger("resizeStart", args);
      if (!args.cancel && this.isModelResize && !isNullOrUndefined(this.dlgContainer) && this.dlgContainer.classList.contains("e-dlg-" + this.position.X + "-" + this.position.Y)) {
        this.setPopupPosition();
        this.dlgContainer.classList.remove("e-dlg-" + this.position.X + "-" + this.position.Y);
        var targetType = this.getTargetContainer(this.target);
        if (targetType instanceof Element) {
          var computedStyle = window.getComputedStyle(targetType);
          if (computedStyle.getPropertyValue("direction") === "rtl") {
            this.element.style.position = "absolute";
          } else {
            this.element.style.position = "relative";
          }
        } else {
          this.element.style.position = "relative";
        }
        if (this.element.classList.contains(DLG_RESTRICT_LEFT_VALUE)) {
          this.element.classList.remove(DLG_RESTRICT_LEFT_VALUE);
        }
        this.isModelResize = false;
      }
      return args.cancel;
    };
    Dialog2.prototype.onResizing = function(args, dialogObj) {
      dialogObj.trigger("resizing", args);
    };
    Dialog2.prototype.onResizeComplete = function(args, dialogObj) {
      dialogObj.trigger("resizeStop", args);
      this.updatePersistData();
    };
    Dialog2.prototype.setResize = function() {
      if (this.enableResize) {
        this.element.classList.add(DLG_RESIZABLE);
        var computedHeight = getComputedStyle(this.element).minHeight;
        var computedWidth = getComputedStyle(this.element).minWidth;
        var direction = "";
        for (var i = 0; i < this.resizeHandles.length; i++) {
          if (this.resizeHandles[i] === "All") {
            direction = "south north east west north-east north-west south-east south-west";
            break;
          } else {
            var directionValue = "";
            switch (this.resizeHandles[i].toString()) {
              case "SouthEast":
                directionValue = "south-east";
                break;
              case "SouthWest":
                directionValue = "south-west";
                break;
              case "NorthEast":
                directionValue = "north-east";
                break;
              case "NorthWest":
                directionValue = "north-west";
                break;
              default:
                directionValue = this.resizeHandles[i].toString();
                break;
            }
            direction += directionValue.toLocaleLowerCase() + " ";
          }
        }
        if (this.enableRtl && direction.trim() === "south-east") {
          direction = "south-west";
        } else if (this.enableRtl && direction.trim() === "south-west") {
          direction = "south-east";
        }
        if (this.isModal && this.enableRtl) {
          this.element.classList.add(DLG_RESTRICT_LEFT_VALUE);
        } else if (this.isModal && this.target === document.body) {
          this.element.classList.add(DLG_RESTRICT_WIDTH_VALUE);
        }
        createResize({
          element: this.element,
          direction,
          minHeight: parseInt(computedHeight.slice(0, computedWidth.indexOf("p")), 10),
          maxHeight: this.targetEle.clientHeight,
          minWidth: parseInt(computedWidth.slice(0, computedWidth.indexOf("p")), 10),
          maxWidth: this.targetEle.clientWidth,
          boundary: this.target === document.body ? null : this.targetEle,
          resizeBegin: this.onResizeStart.bind(this),
          resizeComplete: this.onResizeComplete.bind(this),
          resizing: this.onResizing.bind(this),
          proxy: this
        });
        this.wireWindowResizeEvent();
      } else {
        removeResize();
        this.unWireWindowResizeEvent();
        if (this.isModal) {
          this.element.classList.remove(DLG_RESTRICT_LEFT_VALUE);
        } else {
          this.element.classList.remove(DLG_RESTRICT_WIDTH_VALUE);
        }
        this.element.classList.remove(DLG_RESIZABLE);
      }
    };
    Dialog2.prototype.getFocusElement = function(target) {
      var value = 'input,select,textarea,button:enabled,a,[contenteditable="true"],[tabindex]';
      var items = target.querySelectorAll(value);
      return {
        element: items[items.length - 1]
      };
    };
    Dialog2.prototype.keyDown = function(event2) {
      var _this = this;
      if (event2.keyCode === 9) {
        if (this.isModal) {
          var buttonObj = void 0;
          if (!isNullOrUndefined(this.btnObj)) {
            buttonObj = this.btnObj[this.btnObj.length - 1];
          }
          if (isNullOrUndefined(this.btnObj) && !isNullOrUndefined(this.ftrTemplateContent)) {
            buttonObj = this.getFocusElement(this.ftrTemplateContent);
          }
          if (isNullOrUndefined(this.btnObj) && isNullOrUndefined(this.ftrTemplateContent) && !isNullOrUndefined(this.contentEle)) {
            buttonObj = this.getFocusElement(this.contentEle);
          }
          if (!isNullOrUndefined(buttonObj) && document.activeElement === buttonObj.element && !event2.shiftKey) {
            event2.preventDefault();
            this.focusableElements(this.element).focus();
          }
          if (document.activeElement === this.focusableElements(this.element) && event2.shiftKey) {
            event2.preventDefault();
            if (!isNullOrUndefined(buttonObj)) {
              buttonObj.element.focus();
            }
          }
        }
      }
      var element2 = document.activeElement;
      var isTagName = ["input", "textarea"].indexOf(element2.tagName.toLowerCase()) > -1;
      var isContentEdit = false;
      if (!isTagName) {
        isContentEdit = element2.hasAttribute("contenteditable") && element2.getAttribute("contenteditable") === "true";
      }
      if (event2.keyCode === 27 && this.closeOnEscape) {
        this.dlgClosedBy = DLG_ESCAPE_CLOSED;
        var query = document.querySelector(".e-popup-open:not(.e-dialog)");
        if (!(!isNullOrUndefined(query) && !query.classList.contains("e-toolbar-pop") && !query.classList.contains("e-slider-tooltip"))) {
          this.hide(event2);
        }
      }
      if (event2.keyCode === 13 && !event2.ctrlKey && element2.tagName.toLowerCase() !== "textarea" && isTagName && !isNullOrUndefined(this.primaryButtonEle) || event2.keyCode === 13 && event2.ctrlKey && (element2.tagName.toLowerCase() === "textarea" || isContentEdit) && !isNullOrUndefined(this.primaryButtonEle)) {
        var buttonIndex_1;
        var firstPrimary = this.buttons.some(function(data, index) {
          buttonIndex_1 = index;
          var buttonModel = data.buttonModel;
          return !isNullOrUndefined(buttonModel) && buttonModel.isPrimary === true;
        });
        if (firstPrimary && typeof this.buttons[buttonIndex_1].click === "function" && !this.primaryButtonEle.disabled) {
          setTimeout(function() {
            _this.buttons[buttonIndex_1].click.call(_this, event2);
          });
        }
      }
    };
    Dialog2.prototype.initialize = function() {
      if (!isNullOrUndefined(this.target)) {
        this.targetEle = typeof this.target === "string" ? document.querySelector(this.target) : this.target;
      }
      if (!this.isBlazorServerRender()) {
        addClass([this.element], ROOT);
      }
      if (Browser.isDevice) {
        addClass([this.element], DEVICE);
      }
      if (!this.isBlazorServerRender()) {
        this.setCSSClass();
      }
      this.setMaxHeight();
    };
    Dialog2.prototype.initRender = function() {
      var _this = this;
      this.initialRender = true;
      if (!this.isBlazorServerRender()) {
        attributes(this.element, {
          role: "dialog"
        });
      }
      if (this.zIndex === 1e3) {
        this.setzIndex(this.element, false);
        this.calculatezIndex = true;
      } else {
        this.calculatezIndex = false;
      }
      this.setTargetContent();
      if (this.header !== "" && !isNullOrUndefined(this.header)) {
        this.setHeader();
      }
      this.renderCloseIcon();
      this.setContent();
      if (this.footerTemplate !== "" && !isNullOrUndefined(this.footerTemplate)) {
        this.setFooterTemplate();
      } else if (!isNullOrUndefined(this.buttons[0]) && !isNullOrUndefined(this.buttons[0].buttonModel)) {
        this.setButton();
      }
      if (this.allowDragging && !isNullOrUndefined(this.headerContent)) {
        this.setAllowDragging();
      }
      attributes(this.element, {
        "aria-modal": this.isModal ? "true" : "false"
      });
      if (this.isModal) {
        this.setIsModal();
      }
      if (this.element.classList.contains(DLG_UTIL_ALERT) !== true && this.element.classList.contains(DLG_UTIL_CONFIRM) !== true && !isNullOrUndefined(this.element.parentElement)) {
        var parentEle = this.isModal ? this.dlgContainer.parentElement : this.element.parentElement;
        this.refElement = this.createElement("div", {
          className: DLG_REF_ELEMENT
        });
        parentEle.insertBefore(this.refElement, this.isModal ? this.dlgContainer : this.element);
      }
      if (!isNullOrUndefined(this.targetEle)) {
        if (this.isModal) {
          this.targetEle.appendChild(this.dlgContainer);
        } else {
          this.targetEle.appendChild(this.element);
        }
      }
      this.popupObj = new Popup(this.element, {
        height: this.height,
        width: this.width,
        zIndex: this.zIndex,
        relateTo: this.target,
        actionOnScroll: "none",
        enableRtl: this.enableRtl,
        // eslint-disable-next-line
        open: function(event2) {
          var eventArgs = {
            container: _this.isModal ? _this.dlgContainer : _this.element,
            element: _this.element,
            target: _this.target,
            preventFocus: false
          };
          if (_this.enableResize) {
            _this.resetResizeIcon();
          }
          _this.trigger("open", eventArgs, function(openEventArgs) {
            if (!openEventArgs.preventFocus) {
              _this.focusContent();
            }
          });
        },
        // eslint-disable-next-line
        close: function(event2) {
          if (_this.isModal) {
            addClass([_this.dlgOverlay], "e-fade");
          }
          _this.unBindEvent(_this.element);
          if (_this.isModal) {
            _this.dlgContainer.style.display = "none";
          }
          _this.trigger("close", _this.closeArgs);
          var activeEle = document.activeElement;
          if (!isNullOrUndefined(activeEle) && !isNullOrUndefined(activeEle.blur)) {
            activeEle.blur();
          }
          if (!isNullOrUndefined(_this.storeActiveElement) && !isNullOrUndefined(_this.storeActiveElement.focus)) {
            _this.storeActiveElement.focus();
          }
        }
      });
      this.positionChange();
      this.setEnableRTL();
      if (!this.isBlazorServerRender()) {
        addClass([this.element], DLG_HIDE);
        if (this.isModal) {
          this.setOverlayZindex();
        }
      }
      if (this.visible) {
        this.show();
        if (this.isModal) {
          var targetType = this.getTargetContainer(this.target);
          if (targetType instanceof Element) {
            var computedStyle = window.getComputedStyle(targetType);
            if (computedStyle.getPropertyValue("direction") === "rtl") {
              this.setPopupPosition();
            }
          }
        }
      } else {
        if (this.isModal) {
          this.dlgOverlay.style.display = "none";
        }
      }
      this.initialRender = false;
    };
    Dialog2.prototype.getTargetContainer = function(targetValue) {
      var targetElement2 = null;
      if (typeof targetValue === "string") {
        if (targetValue.startsWith("#")) {
          targetElement2 = document.getElementById(targetValue.substring(1));
        } else if (targetValue.startsWith(".")) {
          var elements = document.getElementsByClassName(targetValue.substring(1));
          targetElement2 = elements.length > 0 ? elements[0] : null;
        } else {
          if (!(targetValue instanceof HTMLElement) && targetValue !== document.body) {
            targetElement2 = document.querySelector(targetValue);
          }
        }
      } else if (targetValue instanceof HTMLElement) {
        targetElement2 = targetValue;
      }
      return targetElement2;
    };
    Dialog2.prototype.resetResizeIcon = function() {
      var dialogConHeight = this.getMinHeight();
      if (this.targetEle.offsetHeight < dialogConHeight) {
        var className = this.enableRtl ? "e-south-west" : "e-south-east";
        var resizeIcon = this.element.querySelector("." + className);
        if (!isNullOrUndefined(resizeIcon)) {
          resizeIcon.style.bottom = "-" + dialogConHeight.toString() + "px";
        }
      }
    };
    Dialog2.prototype.setOverlayZindex = function(zIndexValue) {
      var zIndex;
      if (isNullOrUndefined(zIndexValue)) {
        zIndex = parseInt(this.element.style.zIndex, 10) ? parseInt(this.element.style.zIndex, 10) : this.zIndex;
      } else {
        zIndex = zIndexValue;
      }
      this.dlgOverlay.style.zIndex = (zIndex - 1).toString();
      this.dlgContainer.style.zIndex = zIndex.toString();
    };
    Dialog2.prototype.positionChange = function() {
      if (this.isModal) {
        if (!isNaN(parseFloat(this.position.X)) && !isNaN(parseFloat(this.position.Y))) {
          this.setPopupPosition();
        } else if (!isNaN(parseFloat(this.position.X)) && isNaN(parseFloat(this.position.Y)) || isNaN(parseFloat(this.position.X)) && !isNaN(parseFloat(this.position.Y))) {
          this.setPopupPosition();
        } else {
          this.element.style.top = "0px";
          this.element.style.left = "0px";
          this.dlgContainer.classList.add("e-dlg-" + this.position.X + "-" + this.position.Y);
        }
      } else {
        this.setPopupPosition();
      }
    };
    Dialog2.prototype.setPopupPosition = function() {
      this.popupObj.setProperties({
        position: {
          X: this.position.X,
          Y: this.position.Y
        }
      });
    };
    Dialog2.prototype.setAllowDragging = function() {
      var _this = this;
      var handleContent = "." + DLG_HEADER_CONTENT;
      if (!this.element.classList.contains(DLG_DRAG)) {
        this.dragObj = new Draggable(this.element, {
          clone: false,
          isDragScroll: true,
          abort: ".e-dlg-closeicon-btn",
          handle: handleContent,
          dragStart: function(event2) {
            _this.trigger("dragStart", event2, function(dragEventArgs) {
              if (isBlazor()) {
                dragEventArgs.bindEvents(event2.dragElement);
              }
            });
          },
          dragStop: function(event2) {
            if (_this.isModal) {
              _this.IsDragStop = true;
              if (!isNullOrUndefined(_this.position)) {
                _this.dlgContainer.classList.remove("e-dlg-" + _this.position.X + "-" + _this.position.Y);
              }
              var targetType = _this.getTargetContainer(_this.target);
              if (targetType instanceof Element) {
                var computedStyle = window.getComputedStyle(targetType);
                if (computedStyle.getPropertyValue("direction") === "rtl") {
                  _this.element.style.position = "absolute";
                } else {
                  _this.element.style.position = "relative";
                }
              } else {
                _this.element.style.position = "relative";
              }
            }
            _this.trigger("dragStop", event2);
            _this.isModelResize = false;
            _this.element.classList.remove(DLG_RESTRICT_LEFT_VALUE);
            _this.updatePersistData();
          },
          drag: function(event2) {
            _this.trigger("drag", event2);
          }
        });
        if (!isNullOrUndefined(this.targetEle)) {
          this.dragObj.dragArea = this.targetEle;
        }
      }
    };
    Dialog2.prototype.setButton = function() {
      if (!this.isBlazorServerRender()) {
        this.buttonContent = [];
        this.btnObj = [];
        for (var i = 0; i < this.buttons.length; i++) {
          if (isNullOrUndefined(this.buttons[i].buttonModel)) {
            continue;
          }
          var buttonType = !isNullOrUndefined(this.buttons[i].type) ? this.buttons[i].type.toLowerCase() : "button";
          var btn = this.createElement("button", {
            className: this.cssClass,
            attrs: {
              type: buttonType,
              tabindex: "0"
            }
          });
          this.buttonContent.push(btn.outerHTML);
        }
        this.setFooterTemplate();
      }
      var footerBtn;
      for (var i = 0, childNodes = this.element.children; i < childNodes.length; i++) {
        if (childNodes[i].classList.contains(DLG_FOOTER_CONTENT)) {
          footerBtn = childNodes[i].querySelectorAll("button");
        }
      }
      for (var i = 0; i < this.buttons.length; i++) {
        if (isNullOrUndefined(this.buttons[i].buttonModel)) {
          continue;
        }
        if (!this.isBlazorServerRender()) {
          this.btnObj[i] = new Button(this.buttons[i].buttonModel);
        }
        if (!isNullOrUndefined(this.ftrTemplateContent) && footerBtn.length > 0) {
          if (typeof this.buttons[i].click === "function") {
            EventHandler.add(footerBtn[i], "click", this.buttons[i].click, this);
          }
          if (typeof this.buttons[i].click === "object") {
            EventHandler.add(footerBtn[i], "click", this.buttonClickHandler.bind(this, i), this);
          }
        }
        if (!this.isBlazorServerRender() && !isNullOrUndefined(this.ftrTemplateContent)) {
          this.btnObj[i].appendTo(this.ftrTemplateContent.children[i]);
          if (this.buttons[i].isFlat) {
            this.btnObj[i].element.classList.add("e-flat");
          }
          this.primaryButtonEle = this.element.getElementsByClassName("e-primary")[0];
        }
      }
    };
    Dialog2.prototype.buttonClickHandler = function(index) {
      this.trigger("buttons[" + index + "].click", {});
    };
    Dialog2.prototype.setContent = function() {
      this.contentEle = this.createElement("div", {
        className: DLG_CONTENT,
        id: this.element.id + "_dialog-content"
      });
      if (this.headerEle) {
        attributes(this.element, {
          "aria-describedby": this.element.id + "_title " + this.element.id + "_dialog-content"
        });
      } else {
        attributes(this.element, {
          "aria-describedby": this.element.id + "_dialog-content"
        });
      }
      if (this.innerContentElement) {
        this.contentEle.appendChild(this.innerContentElement);
      } else if (!isNullOrUndefined(this.content) && this.content !== "" || !this.initialRender) {
        if (typeof this.content === "string" && !isBlazor()) {
          this.setTemplate(this.content, this.contentEle, "content");
        } else if (this.content instanceof HTMLElement) {
          this.contentEle.appendChild(this.content);
        } else {
          this.setTemplate(this.content, this.contentEle, "content");
        }
      }
      if (!isNullOrUndefined(this.headerContent)) {
        this.element.insertBefore(this.contentEle, this.element.children[1]);
      } else {
        this.element.insertBefore(this.contentEle, this.element.children[0]);
      }
      if (this.height === "auto") {
        if (!this.isBlazorServerRender() && Browser.isIE && this.element.style.width === "" && !isNullOrUndefined(this.width)) {
          this.element.style.width = formatUnit(this.width);
        }
        this.setMaxHeight();
      }
    };
    Dialog2.prototype.setTemplate = function(template, toElement, prop) {
      var templateFn;
      var templateProps;
      if (toElement.classList.contains(DLG_HEADER)) {
        templateProps = this.element.id + "header";
      } else if (toElement.classList.contains(DLG_FOOTER_CONTENT)) {
        templateProps = this.element.id + "footerTemplate";
      } else {
        templateProps = this.element.id + "content";
      }
      var templateValue;
      if (!isNullOrUndefined(template.outerHTML)) {
        toElement.appendChild(template);
      } else if (typeof template === "string" || typeof template !== "string" || isBlazor() && !this.isStringTemplate) {
        if (typeof template === "string") {
          template = this.sanitizeHelper(template);
        }
        if (this.isVue || typeof template !== "string") {
          templateFn = compile(template);
          templateValue = template;
        } else {
          toElement.innerHTML = template;
        }
      }
      var fromElements = [];
      if (!isNullOrUndefined(templateFn)) {
        var isString = isBlazor() && !this.isStringTemplate && templateValue.indexOf("<div>Blazor") === 0 ? this.isStringTemplate : true;
        for (var _i = 0, _a = templateFn({}, this, prop, templateProps, isString); _i < _a.length; _i++) {
          var item = _a[_i];
          fromElements.push(item);
        }
        append([].slice.call(fromElements), toElement);
      }
    };
    Dialog2.prototype.sanitizeHelper = function(value) {
      if (this.enableHtmlSanitizer) {
        var dialogItem = SanitizeHtmlHelper.beforeSanitize();
        var beforeEvent = {
          cancel: false,
          helper: null
        };
        extend(dialogItem, dialogItem, beforeEvent);
        this.trigger("beforeSanitizeHtml", dialogItem);
        if (dialogItem.cancel && !isNullOrUndefined(dialogItem.helper)) {
          value = dialogItem.helper(value);
        } else if (!dialogItem.cancel) {
          value = SanitizeHtmlHelper.serializeValue(dialogItem, value);
        }
      }
      return value;
    };
    Dialog2.prototype.setMaxHeight = function() {
      if (!this.allowMaxHeight) {
        return;
      }
      var display = this.element.style.display;
      this.element.style.display = "none";
      this.element.style.maxHeight = !isNullOrUndefined(this.target) && this.targetEle.offsetHeight < window.innerHeight ? this.targetEle.offsetHeight - 20 + "px" : window.innerHeight - 20 + "px";
      this.element.style.display = display;
      if (Browser.isIE && this.height === "auto" && !isNullOrUndefined(this.contentEle) && this.element.offsetHeight < this.contentEle.offsetHeight) {
        this.element.style.height = "inherit";
      }
    };
    Dialog2.prototype.setEnableRTL = function() {
      if (!this.isBlazorServerRender()) {
        if (this.enableRtl) {
          addClass([this.element], RTL4);
        } else {
          removeClass([this.element], RTL4);
        }
      }
      if (!isNullOrUndefined(this.element.querySelector(".e-resize-handle"))) {
        removeResize();
        this.setResize();
      }
    };
    Dialog2.prototype.setTargetContent = function() {
      var _this = this;
      if (isNullOrUndefined(this.content) || this.content === "") {
        var isContent = this.element.innerHTML.replace(/\s|<(\/?|\/?)(!--!--)>/g, "") !== "";
        if (this.element.children.length > 0 || isContent) {
          this.innerContentElement = document.createDocumentFragment();
          [].slice.call(this.element.childNodes).forEach(function(el) {
            if (el.nodeType !== 8) {
              _this.innerContentElement.appendChild(el);
            }
          });
        }
      }
    };
    Dialog2.prototype.setHeader = function() {
      if (this.headerEle) {
        this.headerEle.innerHTML = "";
      } else {
        this.headerEle = this.createElement("div", {
          id: this.element.id + "_title",
          className: DLG_HEADER
        });
      }
      this.createHeaderContent();
      this.headerContent.appendChild(this.headerEle);
      this.setTemplate(this.header, this.headerEle, "header");
      attributes(this.element, {
        "aria-describedby": this.element.id + "_title"
      });
      attributes(this.element, {
        "aria-labelledby": this.element.id + "_dialog-header"
      });
      this.element.insertBefore(this.headerContent, this.element.children[0]);
      if (this.allowDragging && !isNullOrUndefined(this.headerContent)) {
        this.setAllowDragging();
      }
    };
    Dialog2.prototype.setFooterTemplate = function() {
      if (this.ftrTemplateContent) {
        this.ftrTemplateContent.innerHTML = "";
      } else {
        this.ftrTemplateContent = this.createElement("div", {
          className: DLG_FOOTER_CONTENT
        });
      }
      if (this.footerTemplate !== "" && !isNullOrUndefined(this.footerTemplate)) {
        this.setTemplate(this.footerTemplate, this.ftrTemplateContent, "footerTemplate");
      } else {
        this.ftrTemplateContent.innerHTML = this.buttonContent.join("");
      }
      this.element.appendChild(this.ftrTemplateContent);
    };
    Dialog2.prototype.createHeaderContent = function() {
      if (isNullOrUndefined(this.headerContent)) {
        this.headerContent = this.createElement("div", {
          id: this.element.id + "_dialog-header",
          className: DLG_HEADER_CONTENT
        });
      }
    };
    Dialog2.prototype.renderCloseIcon = function() {
      if (this.showCloseIcon) {
        this.closeIcon = this.createElement("button", {
          className: DLG_CLOSE_ICON_BTN,
          attrs: {
            type: "button"
          }
        });
        this.closeIconBtnObj = new Button({
          cssClass: "e-flat",
          iconCss: DLG_CLOSE_ICON + " " + ICON
        });
        this.closeIconTitle();
        if (!isNullOrUndefined(this.headerContent)) {
          prepend([this.closeIcon], this.headerContent);
        } else {
          this.createHeaderContent();
          prepend([this.closeIcon], this.headerContent);
          this.element.insertBefore(this.headerContent, this.element.children[0]);
        }
        this.closeIconBtnObj.appendTo(this.closeIcon);
      }
    };
    Dialog2.prototype.closeIconTitle = function() {
      this.l10n.setLocale(this.locale);
      var closeIconTitle = this.l10n.getConstant("close");
      this.closeIcon.setAttribute("title", closeIconTitle);
      this.closeIcon.setAttribute("aria-label", closeIconTitle);
    };
    Dialog2.prototype.setCSSClass = function(oldCSSClass) {
      if (oldCSSClass) {
        removeClass([this.element], oldCSSClass.split(" "));
        if (this.isModal && !isNullOrUndefined(this.dlgContainer)) {
          removeClass([this.dlgContainer], oldCSSClass.split(" "));
        }
      }
      if (this.cssClass) {
        addClass([this.element], this.cssClass.split(" "));
        if (this.isModal && !isNullOrUndefined(this.dlgContainer)) {
          addClass([this.dlgContainer], this.cssClass.split(" "));
        }
      }
    };
    Dialog2.prototype.setIsModal = function() {
      this.dlgContainer = this.createElement("div", {
        className: DLG_CONTAINER
      });
      this.setCSSClass();
      this.element.classList.remove(DLG_SHOW);
      this.element.parentNode.insertBefore(this.dlgContainer, this.element);
      this.dlgContainer.appendChild(this.element);
      addClass([this.element], MODAL_DLG);
      this.dlgOverlay = this.createElement("div", {
        className: DLG_OVERLAY
      });
      this.dlgOverlay.style.zIndex = (this.zIndex - 1).toString();
      this.dlgContainer.appendChild(this.dlgOverlay);
    };
    Dialog2.prototype.getValidFocusNode = function(items) {
      var node;
      for (var u = 0; u < items.length; u++) {
        node = items[u];
        if ((node.clientHeight > 0 || node.tagName.toLowerCase() === "a" && node.hasAttribute("href")) && node.tabIndex > -1 && !node.disabled && !this.disableElement(node, '[disabled],[aria-disabled="true"],[type="hidden"]')) {
          return node;
        } else {
          node = null;
        }
      }
      return node;
    };
    Dialog2.prototype.focusableElements = function(content) {
      if (!isNullOrUndefined(content)) {
        var value = 'input,select,textarea,button,a,[contenteditable="true"],[tabindex]';
        var items = content.querySelectorAll(value);
        return this.getValidFocusNode(items);
      }
      return null;
    };
    Dialog2.prototype.getAutoFocusNode = function(container) {
      var node = container.querySelector("." + DLG_CLOSE_ICON_BTN);
      var value = "[autofocus]";
      var items = container.querySelectorAll(value);
      var validNode = this.getValidFocusNode(items);
      if (isBlazor()) {
        this.primaryButtonEle = this.element.getElementsByClassName("e-primary")[0];
      }
      if (!isNullOrUndefined(validNode)) {
        node = validNode;
      } else {
        validNode = this.focusableElements(this.contentEle);
        if (!isNullOrUndefined(validNode)) {
          return node = validNode;
        } else if (!isNullOrUndefined(this.primaryButtonEle)) {
          return this.element.querySelector("." + DLG_PRIMARY_BUTTON);
        }
      }
      return node;
    };
    Dialog2.prototype.disableElement = function(element2, t) {
      var elementMatch = element2 ? element2.matches || element2.webkitMatchesSelector || element2.msGetRegionContent : null;
      if (elementMatch) {
        for (; element2; element2 = element2.parentNode) {
          if (element2 instanceof Element && elementMatch.call(element2, t)) {
            return element2;
          }
        }
      }
      return null;
    };
    Dialog2.prototype.focusContent = function() {
      var element2 = this.getAutoFocusNode(this.element);
      var node = !isNullOrUndefined(element2) ? element2 : this.element;
      var userAgent = Browser.userAgent;
      if (userAgent.indexOf("MSIE ") > 0 || userAgent.indexOf("Trident/") > 0) {
        this.element.focus();
      }
      node.focus();
      this.unBindEvent(this.element);
      this.bindEvent(this.element);
    };
    Dialog2.prototype.bindEvent = function(element2) {
      EventHandler.add(element2, "keydown", this.keyDown, this);
    };
    Dialog2.prototype.unBindEvent = function(element2) {
      EventHandler.remove(element2, "keydown", this.keyDown);
    };
    Dialog2.prototype.updateSanitizeContent = function() {
      if (!this.isBlazorServerRender()) {
        this.contentEle.innerHTML = this.sanitizeHelper(this.content);
      }
    };
    Dialog2.prototype.isBlazorServerRender = function() {
      return isBlazor() && this.isServerRendered;
    };
    Dialog2.prototype.getModuleName = function() {
      return "dialog";
    };
    Dialog2.prototype.onPropertyChanged = function(newProp, oldProp) {
      if (!this.element.classList.contains(ROOT)) {
        return;
      }
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "content":
            if (!isNullOrUndefined(this.content) && this.content !== "") {
              if (this.isBlazorServerRender()) {
                this.contentEle = this.element.querySelector(".e-dlg-content");
              }
              if (!isNullOrUndefined(this.contentEle) && this.contentEle.getAttribute("role") !== "dialog") {
                if (!this.isBlazorServerRender()) {
                  this.contentEle.innerHTML = "";
                }
                if (typeof this.content === "function") {
                  this.clearTemplate(["content"]);
                  detach(this.contentEle);
                  this.contentEle = null;
                  this.setContent();
                } else {
                  if (typeof this.content === "string") {
                    this.updateSanitizeContent();
                  } else {
                    this.contentEle.appendChild(this.content);
                  }
                }
                this.setMaxHeight();
              } else {
                this.setContent();
              }
            } else if (!isNullOrUndefined(this.contentEle)) {
              detach(this.contentEle);
              this.contentEle = null;
            }
            break;
          case "header":
            if (this.header === "" || isNullOrUndefined(this.header)) {
              if (this.headerEle) {
                detach(this.headerEle);
                this.headerEle = null;
              }
            } else {
              this.setHeader();
            }
            break;
          case "footerTemplate":
            if (this.footerTemplate === "" || isNullOrUndefined(this.footerTemplate)) {
              if (!this.ftrTemplateContent) {
                return;
              }
              detach(this.ftrTemplateContent);
              this.ftrTemplateContent = null;
              this.buttons = [{}];
            } else {
              this.setFooterTemplate();
              this.buttons = [{}];
            }
            break;
          case "showCloseIcon":
            if (this.element.getElementsByClassName(DLG_CLOSE_ICON).length > 0) {
              if (!this.showCloseIcon && (this.header === "" || isNullOrUndefined(this.header))) {
                detach(this.headerContent);
                this.headerContent = null;
              } else if (!this.showCloseIcon) {
                detach(this.closeIcon);
              }
            } else {
              this.renderCloseIcon();
              this.wireEvents();
            }
            break;
          case "locale":
            if (this.showCloseIcon) {
              this.closeIconTitle();
            }
            break;
          case "visible":
            if (this.visible) {
              this.show();
            } else {
              this.hide();
            }
            break;
          case "isModal":
            this.updateIsModal();
            break;
          case "height":
            setStyleAttribute(this.element, {
              "height": formatUnit(newProp.height)
            });
            this.updatePersistData();
            break;
          case "width":
            setStyleAttribute(this.element, {
              "width": formatUnit(newProp.width)
            });
            this.updatePersistData();
            break;
          case "zIndex":
            this.popupObj.zIndex = this.zIndex;
            if (this.isModal) {
              this.setOverlayZindex(this.zIndex);
            }
            if (this.element.style.zIndex !== this.zIndex.toString()) {
              this.calculatezIndex = false;
            }
            break;
          case "cssClass":
            this.setCSSClass(oldProp.cssClass);
            break;
          case "buttons": {
            this.unWireButtonEvents();
            this.destroyButtons();
            if (!isNullOrUndefined(this.ftrTemplateContent)) {
              detach(this.ftrTemplateContent);
              this.ftrTemplateContent = null;
            }
            this.footerTemplate = "";
            this.setButton();
            break;
          }
          case "allowDragging":
            if (this.allowDragging && !isNullOrUndefined(this.headerContent)) {
              this.setAllowDragging();
            } else {
              this.dragObj.destroy();
            }
            break;
          case "target":
            this.setTarget(newProp.target);
            break;
          case "position":
            this.checkPositionData();
            if (this.isModal) {
              var positionX = this.position.X;
              var positionY = this.position.Y;
              if (!isNullOrUndefined(oldProp.position)) {
                if (!isNullOrUndefined(oldProp.position.X)) {
                  positionX = oldProp.position.X;
                }
                if (!isNullOrUndefined(oldProp.position.Y)) {
                  positionY = oldProp.position.Y;
                }
              }
              if (this.dlgContainer.classList.contains("e-dlg-" + positionX + "-" + positionY)) {
                this.dlgContainer.classList.remove("e-dlg-" + positionX + "-" + positionY);
              }
            }
            this.positionChange();
            this.updatePersistData();
            break;
          case "enableRtl":
            this.setEnableRTL();
            break;
          case "enableResize":
            this.setResize();
            this.isModelResize = this.enableResize && this.isModal;
            if (this.enableResize && this.dialogOpen) {
              this.resetResizeIcon();
            }
            break;
          case "minHeight":
            if (this.minHeight !== "") {
              this.element.style.minHeight = formatUnit(this.minHeight);
            }
            break;
        }
      }
    };
    Dialog2.prototype.setTarget = function(target) {
      this.popupObj.relateTo = target;
      this.target = target;
      this.targetEle = typeof this.target === "string" ? document.querySelector(this.target) : this.target;
      if (this.dragObj) {
        this.dragObj.dragArea = this.targetEle;
      }
      this.setMaxHeight();
      if (this.isModal) {
        this.updateIsModal();
      }
      if (this.enableResize) {
        this.setResize();
      }
      if (!isNullOrUndefined(this.targetEle)) {
        if (this.isModal && !isNullOrUndefined(this.dlgContainer)) {
          this.targetEle.appendChild(this.dlgContainer);
        } else if (!isNullOrUndefined(this.element)) {
          this.targetEle.appendChild(this.element);
        }
      }
    };
    Dialog2.prototype.updateIsModal = function() {
      this.element.setAttribute("aria-modal", this.isModal ? "true" : "false");
      if (this.isModal) {
        if (isNullOrUndefined(this.dlgOverlay)) {
          this.setIsModal();
          this.element.style.top = "0px";
          this.element.style.left = "0px";
          if (!isNullOrUndefined(this.targetEle)) {
            this.targetEle.appendChild(this.dlgContainer);
          }
        }
      } else {
        removeClass([this.element], MODAL_DLG);
        removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);
        detach(this.dlgOverlay);
        while (this.dlgContainer.firstChild) {
          this.dlgContainer.parentElement.insertBefore(this.dlgContainer.firstChild, this.dlgContainer);
        }
        this.dlgContainer.parentElement.removeChild(this.dlgContainer);
      }
      if (this.visible) {
        this.show();
      }
      this.positionChange();
      if (this.isModal && this.dlgOverlay) {
        EventHandler.add(this.dlgOverlay, "click", this.dlgOverlayClickEventHandler, this);
      }
    };
    Dialog2.prototype.setzIndex = function(zIndexElement, setPopupZindex) {
      var prevOnChange = this.isProtectedOnChange;
      this.isProtectedOnChange = true;
      var currentzIndex = getZindexPartial(zIndexElement);
      this.zIndex = currentzIndex > this.zIndex ? currentzIndex : this.zIndex;
      this.isProtectedOnChange = prevOnChange;
      if (setPopupZindex) {
        this.popupObj.zIndex = this.zIndex;
      }
    };
    Dialog2.prototype.windowResizeHandler = function() {
      setMaxWidth(this.targetEle.clientWidth);
      setMaxHeight(this.targetEle.clientHeight);
      this.setMaxHeight();
    };
    Dialog2.prototype.getPersistData = function() {
      return this.addOnPersist(["width", "height", "position"]);
    };
    Dialog2.prototype.removeAllChildren = function(element2) {
      while (element2.children[0]) {
        this.removeAllChildren(element2.children[0]);
        element2.removeChild(element2.children[0]);
      }
    };
    Dialog2.prototype.destroy = function() {
      if (this.isDestroyed) {
        return;
      }
      var classArray = [RTL4, MODAL_DLG, DLG_RESIZABLE, DLG_RESTRICT_LEFT_VALUE, FULLSCREEN, DEVICE];
      var attrs = ["role", "aria-modal", "aria-labelledby", "aria-describedby", "aria-grabbed", "tabindex", "style"];
      removeClass([this.targetEle], [DLG_TARGET, SCROLL_DISABLED]);
      if (!isNullOrUndefined(this.element) && this.element.classList.contains(FULLSCREEN)) {
        removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);
      }
      if (this.isModal) {
        removeClass([!isNullOrUndefined(this.targetEle) ? this.targetEle : document.body], SCROLL_DISABLED);
      }
      this.unWireEvents();
      this.unWireButtonEvents();
      this.destroyButtons();
      if (!isNullOrUndefined(this.closeIconBtnObj)) {
        this.closeIconBtnObj.destroy();
      }
      if (!isNullOrUndefined(this.dragObj)) {
        this.dragObj.destroy();
      }
      if (!isNullOrUndefined(this.popupObj.element) && this.popupObj.element.classList.contains(POPUP_ROOT)) {
        this.popupObj.destroy();
      }
      removeClass([this.element], classArray);
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        removeClass([this.element], this.cssClass.split(" "));
      }
      if (!isNullOrUndefined(this.refElement) && !isNullOrUndefined(this.refElement.parentElement)) {
        this.refElement.parentElement.insertBefore(this.isModal ? this.dlgContainer : this.element, this.refElement);
        detach(this.refElement);
        this.refElement = void 0;
      }
      if (this.isModal) {
        detach(this.dlgOverlay);
        this.dlgContainer.parentNode.insertBefore(this.element, this.dlgContainer);
        detach(this.dlgContainer);
      }
      this.element.innerHTML = this.clonedEle.innerHTML;
      for (var i = 0; i < attrs.length; i++) {
        this.element.removeAttribute(attrs[i]);
      }
      this.ftrTemplateContent = null;
      this.headerContent = null;
      if (!this.isReact && !this.isVue && !isNullOrUndefined(this.contentEle)) {
        this.removeAllChildren(this.contentEle);
      }
      this.contentEle = null;
      resizeDestroy();
      _super.prototype.destroy.call(this);
      if (this.isReact) {
        this.clearTemplate();
      }
    };
    Dialog2.prototype.wireWindowResizeEvent = function() {
      this.boundWindowResizeHandler = this.windowResizeHandler.bind(this);
      window.addEventListener("resize", this.boundWindowResizeHandler);
    };
    Dialog2.prototype.unWireWindowResizeEvent = function() {
      window.removeEventListener("resize", this.boundWindowResizeHandler);
      this.boundWindowResizeHandler = null;
    };
    Dialog2.prototype.wireEvents = function() {
      if (this.showCloseIcon) {
        EventHandler.add(this.closeIcon, "click", this.closeIconClickEventHandler, this);
      }
      if (this.isModal && this.dlgOverlay) {
        EventHandler.add(this.dlgOverlay, "click", this.dlgOverlayClickEventHandler, this);
      }
    };
    Dialog2.prototype.unWireEvents = function() {
      if (this.showCloseIcon) {
        EventHandler.remove(this.closeIcon, "click", this.closeIconClickEventHandler);
      }
      if (this.isModal) {
        EventHandler.remove(this.dlgOverlay, "click", this.dlgOverlayClickEventHandler);
      }
    };
    Dialog2.prototype.refreshPosition = function() {
      this.popupObj.refreshPosition();
      if (this.element.classList.contains(MODAL_DLG)) {
        this.positionChange();
      }
    };
    Dialog2.prototype.getDimension = function() {
      var dialogWidth = this.element.offsetWidth;
      var dialogHeight = this.element.offsetHeight;
      return {
        width: dialogWidth,
        height: dialogHeight
      };
    };
    Dialog2.prototype.show = function(isFullScreen) {
      var _this = this;
      if (!this.element.classList.contains(ROOT)) {
        return;
      }
      if (!this.element.classList.contains(DLG_SHOW) || !isNullOrUndefined(isFullScreen)) {
        if (!isNullOrUndefined(isFullScreen)) {
          this.fullScreen(isFullScreen);
        }
        var eventArgs_1 = isBlazor() ? {
          cancel: false,
          element: this.element,
          container: this.isModal ? this.dlgContainer : this.element,
          maxHeight: this.element.style.maxHeight
        } : {
          cancel: false,
          element: this.element,
          container: this.isModal ? this.dlgContainer : this.element,
          target: this.target,
          maxHeight: this.element.style.maxHeight
        };
        this.trigger("beforeOpen", eventArgs_1, function(beforeOpenArgs) {
          if (!beforeOpenArgs.cancel) {
            if (_this.element.style.maxHeight !== eventArgs_1.maxHeight) {
              _this.allowMaxHeight = false;
              _this.element.style.maxHeight = eventArgs_1.maxHeight;
            }
            if (_this.enableResize && _this.boundWindowResizeHandler == null && !_this.initialRender) {
              _this.wireWindowResizeEvent();
            }
            _this.storeActiveElement = document.activeElement;
            _this.element.tabIndex = -1;
            if (_this.isModal && !isNullOrUndefined(_this.dlgOverlay)) {
              _this.dlgOverlay.style.display = "block";
              _this.dlgContainer.style.display = "flex";
              removeClass([_this.dlgOverlay], "e-fade");
              if (!isNullOrUndefined(_this.targetEle)) {
                if (_this.targetEle === document.body) {
                  _this.dlgContainer.style.position = "fixed";
                } else {
                  _this.dlgContainer.style.position = "absolute";
                }
                _this.dlgOverlay.style.position = "absolute";
                var targetType = _this.getTargetContainer(_this.target);
                if (targetType instanceof Element) {
                  var computedStyle = window.getComputedStyle(targetType);
                  if (computedStyle.getPropertyValue("direction") === "rtl") {
                    _this.element.style.position = "absolute";
                  } else {
                    _this.element.style.position = "relative";
                  }
                } else {
                  _this.element.style.position = "relative";
                }
                addClass([_this.targetEle], [DLG_TARGET, SCROLL_DISABLED]);
              } else {
                addClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);
              }
            }
            var openAnimation = {
              name: _this.animationSettings.effect === "None" && animationMode === "Enable" ? "ZoomIn" : _this.animationSettings.effect + "In",
              duration: _this.animationSettings.duration,
              delay: _this.animationSettings.delay
            };
            var zIndexElement = _this.isModal ? _this.element.parentElement : _this.element;
            if (_this.calculatezIndex) {
              _this.setzIndex(zIndexElement, true);
              setStyleAttribute(_this.element, {
                "zIndex": _this.zIndex
              });
              if (_this.isModal) {
                _this.setOverlayZindex(_this.zIndex);
              }
            }
            _this.animationSettings.effect === "None" && animationMode === "Enable" ? _this.popupObj.show(openAnimation) : _this.animationSettings.effect === "None" ? _this.popupObj.show() : _this.popupObj.show(openAnimation);
            if (_this.isModal) {
              var targetType = _this.getTargetContainer(_this.target);
              if (targetType instanceof Element) {
                var computedStyle = window.getComputedStyle(targetType);
                if (computedStyle.getPropertyValue("direction") === "rtl" && !_this.IsDragStop) {
                  _this.setPopupPosition();
                }
              }
            }
            _this.dialogOpen = true;
            var prevOnChange = _this.isProtectedOnChange;
            _this.isProtectedOnChange = true;
            _this.visible = true;
            _this.preventVisibility = true;
            _this.isProtectedOnChange = prevOnChange;
          }
        });
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Dialog2.prototype.hide = function(event2) {
      var _this = this;
      if (!this.element.classList.contains(ROOT)) {
        return;
      }
      if (this.preventVisibility) {
        var eventArgs = isBlazor() ? {
          cancel: false,
          isInteracted: event2 ? true : false,
          element: this.element,
          container: this.isModal ? this.dlgContainer : this.element,
          event: event2
        } : {
          cancel: false,
          isInteracted: event2 ? true : false,
          element: this.element,
          target: this.target,
          container: this.isModal ? this.dlgContainer : this.element,
          event: event2,
          closedBy: this.dlgClosedBy
        };
        this.closeArgs = eventArgs;
        this.trigger("beforeClose", eventArgs, function(beforeCloseArgs) {
          if (!beforeCloseArgs.cancel) {
            if (_this.enableResize) {
              _this.unWireWindowResizeEvent();
            }
            var closeAnimation = {
              name: _this.animationSettings.effect === "None" && animationMode === "Enable" ? "ZoomOut" : _this.animationSettings.effect + "Out",
              duration: _this.animationSettings.duration,
              delay: _this.animationSettings.delay
            };
            if (_this.animationSettings.effect === "None" && animationMode === "Enable") {
              _this.popupObj.hide(closeAnimation);
            } else if (_this.animationSettings.effect === "None") {
              _this.popupObj.hide();
            } else {
              _this.popupObj.hide(closeAnimation);
            }
            setTimeout(function() {
              if (_this.isModal) {
                if (!isNullOrUndefined(_this.targetEle) && _this.targetEle.classList.contains(DLG_TARGET) && _this.targetEle.classList.contains(SCROLL_DISABLED)) {
                  removeClass([_this.targetEle], [DLG_TARGET, SCROLL_DISABLED]);
                }
              }
              if (document.body.classList.contains(DLG_TARGET) && document.body.classList.contains(SCROLL_DISABLED)) {
                removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);
              }
            }, _this.animationSettings.duration + _this.animationSettings.delay);
            _this.dialogOpen = false;
            var prevOnChange = _this.isProtectedOnChange;
            _this.isProtectedOnChange = true;
            _this.visible = false;
            _this.preventVisibility = false;
            _this.isProtectedOnChange = prevOnChange;
          }
          _this.dlgClosedBy = DLG_USER_ACTION_CLOSED;
        });
      }
    };
    Dialog2.prototype.fullScreen = function(args) {
      var top = this.element.offsetTop;
      var left = this.element.offsetLeft;
      if (args) {
        if (!this.isModal) {
          this.element.style.top = document.scrollingElement.scrollTop + "px";
        }
        addClass([this.element], FULLSCREEN);
        var display = this.element.style.display;
        this.element.style.display = "none";
        this.element.style.maxHeight = !isNullOrUndefined(this.target) ? this.targetEle.offsetHeight + "px" : window.innerHeight + "px";
        this.element.style.display = display;
        addClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);
        if (this.allowDragging && !isNullOrUndefined(this.dragObj)) {
          this.dragObj.destroy();
        }
      } else {
        removeClass([this.element], FULLSCREEN);
        removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);
        if (this.allowDragging && !isNullOrUndefined(this.headerContent)) {
          this.setAllowDragging();
        }
      }
      return args;
    };
    Dialog2.prototype.getButtons = function(index) {
      if (!isNullOrUndefined(index)) {
        return this.btnObj[index];
      }
      return this.btnObj;
    };
    Dialog2.prototype.unWireButtonEvents = function() {
      if (this.buttons.length > 0 && this.footerTemplate === "" && this.ftrTemplateContent) {
        for (var i = 0; i < this.buttons.length; i++) {
          if (this.buttons[i].click && typeof this.buttons[i].click === "function" && this.ftrTemplateContent.children[i]) {
            EventHandler.remove(this.ftrTemplateContent.children[i], "click", this.buttons[i].click);
          }
        }
      }
    };
    Dialog2.prototype.destroyButtons = function() {
      if (!isNullOrUndefined(this.btnObj)) {
        for (var i = 0; i < this.btnObj.length; i++) {
          if (this.btnObj[i] && !this.btnObj[i].isDestroyed) {
            this.btnObj[i].destroy();
          }
        }
      }
    };
    __decorate10([Property("")], Dialog2.prototype, "content", void 0);
    __decorate10([Property(true)], Dialog2.prototype, "enableHtmlSanitizer", void 0);
    __decorate10([Property(false)], Dialog2.prototype, "enablePersistence", void 0);
    __decorate10([Property(false)], Dialog2.prototype, "showCloseIcon", void 0);
    __decorate10([Property(false)], Dialog2.prototype, "isModal", void 0);
    __decorate10([Property("")], Dialog2.prototype, "header", void 0);
    __decorate10([Property(true)], Dialog2.prototype, "visible", void 0);
    __decorate10([Property(false)], Dialog2.prototype, "enableResize", void 0);
    __decorate10([Property(["South-East"])], Dialog2.prototype, "resizeHandles", void 0);
    __decorate10([Property("auto")], Dialog2.prototype, "height", void 0);
    __decorate10([Property("")], Dialog2.prototype, "minHeight", void 0);
    __decorate10([Property("100%")], Dialog2.prototype, "width", void 0);
    __decorate10([Property("")], Dialog2.prototype, "cssClass", void 0);
    __decorate10([Property(1e3)], Dialog2.prototype, "zIndex", void 0);
    __decorate10([Property(null)], Dialog2.prototype, "target", void 0);
    __decorate10([Property("")], Dialog2.prototype, "footerTemplate", void 0);
    __decorate10([Property(false)], Dialog2.prototype, "allowDragging", void 0);
    __decorate10([Collection([{}], ButtonProps)], Dialog2.prototype, "buttons", void 0);
    __decorate10([Property(true)], Dialog2.prototype, "closeOnEscape", void 0);
    __decorate10([Complex({}, AnimationSettings)], Dialog2.prototype, "animationSettings", void 0);
    __decorate10([Complex({
      X: "center",
      Y: "center"
    }, PositionData)], Dialog2.prototype, "position", void 0);
    __decorate10([Event()], Dialog2.prototype, "created", void 0);
    __decorate10([Event()], Dialog2.prototype, "open", void 0);
    __decorate10([Event()], Dialog2.prototype, "beforeSanitizeHtml", void 0);
    __decorate10([Event()], Dialog2.prototype, "beforeOpen", void 0);
    __decorate10([Event()], Dialog2.prototype, "close", void 0);
    __decorate10([Event()], Dialog2.prototype, "beforeClose", void 0);
    __decorate10([Event()], Dialog2.prototype, "dragStart", void 0);
    __decorate10([Event()], Dialog2.prototype, "dragStop", void 0);
    __decorate10([Event()], Dialog2.prototype, "drag", void 0);
    __decorate10([Event()], Dialog2.prototype, "overlayClick", void 0);
    __decorate10([Event()], Dialog2.prototype, "resizeStart", void 0);
    __decorate10([Event()], Dialog2.prototype, "resizing", void 0);
    __decorate10([Event()], Dialog2.prototype, "resizeStop", void 0);
    __decorate10([Event()], Dialog2.prototype, "destroyed", void 0);
    Dialog2 = __decorate10([NotifyPropertyChanges], Dialog2);
    return Dialog2;
  }(Component)
);
var DialogUtility;
(function(DialogUtility2) {
  function alert(args) {
    var dialogElement = createElement("div", {
      "className": DLG_UTIL_ALERT
    });
    document.body.appendChild(dialogElement);
    var alertDialogObj;
    var okButtonModel = [{
      buttonModel: {
        isPrimary: true,
        content: "OK"
      },
      click: function() {
        this.hide();
      }
    }];
    if (typeof args === "string") {
      alertDialogObj = createDialog({
        content: args,
        position: {
          X: "center",
          Y: "top"
        },
        isModal: true,
        header: DLG_UTIL_DEFAULT_TITLE,
        buttons: okButtonModel
      }, dialogElement);
    } else {
      alertDialogObj = createDialog(alertOptions(args), dialogElement);
    }
    alertDialogObj.close = function() {
      if (args && args.close) {
        args.close.apply(alertDialogObj);
      }
      alertDialogObj.destroy();
      if (alertDialogObj.element.classList.contains("e-dlg-modal")) {
        alertDialogObj.element.parentElement.remove();
        alertDialogObj.target.classList.remove(DLG_UTIL_ROOT);
      } else {
        alertDialogObj.element.remove();
      }
    };
    return alertDialogObj;
  }
  DialogUtility2.alert = alert;
  function confirm(args) {
    var dialogElement = createElement("div", {
      "className": DLG_UTIL_CONFIRM
    });
    document.body.appendChild(dialogElement);
    var confirmDialogObj;
    var okCancelButtonModel = [{
      buttonModel: {
        isPrimary: true,
        content: "OK"
      },
      click: function() {
        this.hide();
      }
    }, {
      buttonModel: {
        content: "Cancel"
      },
      click: function() {
        this.hide();
      }
    }];
    if (typeof args === "string") {
      confirmDialogObj = createDialog({
        position: {
          X: "center",
          Y: "top"
        },
        content: args,
        isModal: true,
        header: DLG_UTIL_DEFAULT_TITLE,
        buttons: okCancelButtonModel
      }, dialogElement);
    } else {
      confirmDialogObj = createDialog(confirmOptions(args), dialogElement);
    }
    confirmDialogObj.close = function() {
      if (args && args.close) {
        args.close.apply(confirmDialogObj);
      }
      confirmDialogObj.destroy();
      if (confirmDialogObj.element.classList.contains("e-dlg-modal")) {
        confirmDialogObj.element.parentElement.remove();
        confirmDialogObj.target.classList.remove(DLG_UTIL_ROOT);
      } else {
        confirmDialogObj.element.remove();
      }
    };
    return confirmDialogObj;
  }
  DialogUtility2.confirm = confirm;
  function createDialog(options, element2) {
    var dialogObject = new Dialog(options);
    dialogObject.appendTo(element2);
    return dialogObject;
  }
  function alertOptions(option) {
    var options = {};
    options.buttons = [];
    options = formOptions(options, option);
    options = setAlertButtonModel(options, option);
    return options;
  }
  function confirmOptions(option) {
    var options = {};
    options.buttons = [];
    options = formOptions(options, option);
    options = setConfirmButtonModel(options, option);
    return options;
  }
  function formOptions(options, option) {
    options.header = !isNullOrUndefined(option.title) ? option.title : null;
    options.content = !isNullOrUndefined(option.content) ? option.content : "";
    options.isModal = !isNullOrUndefined(option.isModal) ? option.isModal : true;
    options.showCloseIcon = !isNullOrUndefined(option.showCloseIcon) ? option.showCloseIcon : false;
    options.allowDragging = !isNullOrUndefined(option.isDraggable) ? option.isDraggable : false;
    options.closeOnEscape = !isNullOrUndefined(option.closeOnEscape) ? option.closeOnEscape : false;
    options.position = !isNullOrUndefined(option.position) ? option.position : {
      X: "center",
      Y: "top"
    };
    options.animationSettings = !isNullOrUndefined(option.animationSettings) ? option.animationSettings : {
      effect: "Fade",
      duration: 400,
      delay: 0
    };
    options.cssClass = !isNullOrUndefined(option.cssClass) ? option.cssClass : "";
    options.zIndex = !isNullOrUndefined(option.zIndex) ? option.zIndex : 1e3;
    options.open = !isNullOrUndefined(option.open) ? option.open : null;
    options.width = !isNullOrUndefined(option.width) ? option.width : "auto";
    options.height = !isNullOrUndefined(option.height) ? option.height : "auto";
    return options;
  }
  function setAlertButtonModel(options, option) {
    var alertButtonModel = [{
      buttonModel: {
        isPrimary: true,
        content: "OK"
      },
      click: function() {
        this.hide();
      }
    }];
    if (!isNullOrUndefined(option.okButton)) {
      options.buttons[0] = formButtonModel(options.buttons[0], option.okButton, alertButtonModel[0]);
    } else {
      options.buttons = alertButtonModel;
    }
    return options;
  }
  function setConfirmButtonModel(options, option) {
    var okButtonModel = {
      buttonModel: {
        isPrimary: true,
        content: "OK"
      },
      click: function() {
        this.hide();
      }
    };
    var cancelButtonModel = {
      buttonModel: {
        content: "Cancel"
      },
      click: function() {
        this.hide();
      }
    };
    if (!isNullOrUndefined(option.okButton)) {
      options.buttons[0] = formButtonModel(options.buttons[0], option.okButton, okButtonModel);
    } else {
      options.buttons[0] = okButtonModel;
    }
    if (!isNullOrUndefined(option.cancelButton)) {
      options.buttons[1] = formButtonModel(options.buttons[1], option.cancelButton, cancelButtonModel);
    } else {
      options.buttons[1] = cancelButtonModel;
    }
    return options;
  }
  function formButtonModel(buttonModel, option, buttonPropModel) {
    var buttonProps = buttonPropModel;
    if (!isNullOrUndefined(option.text)) {
      buttonProps.buttonModel.content = option.text;
    }
    if (!isNullOrUndefined(option.icon)) {
      buttonProps.buttonModel.iconCss = option.icon;
    }
    if (!isNullOrUndefined(option.cssClass)) {
      buttonProps.buttonModel.cssClass = option.cssClass;
    }
    if (!isNullOrUndefined(option.click)) {
      buttonProps.click = option.click;
    }
    if (!isNullOrUndefined(option.isFlat)) {
      buttonProps.isFlat = option.isFlat;
    }
    return buttonProps;
  }
})(DialogUtility || (DialogUtility = {}));

// node_modules/@syncfusion/ej2-popups/src/tooltip/tooltip.js
var __extends12 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate11 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TOUCHEND_HIDE_DELAY = 1500;
var TAPHOLD_THRESHOLD = 500;
var SHOW_POINTER_TIP_GAP = 0;
var HIDE_POINTER_TIP_GAP = 8;
var MOUSE_TRAIL_GAP = 2;
var POINTER_ADJUST = 2;
var ROOT2 = "e-tooltip";
var RTL5 = "e-rtl";
var DEVICE2 = "e-bigger";
var ICON2 = "e-icons";
var CLOSE = "e-tooltip-close";
var TOOLTIP_WRAP = "e-tooltip-wrap";
var CONTENT = "e-tip-content";
var ARROW_TIP = "e-arrow-tip";
var ARROW_TIP_OUTER = "e-arrow-tip-outer";
var ARROW_TIP_INNER = "e-arrow-tip-inner";
var TIP_BOTTOM = "e-tip-bottom";
var TIP_TOP = "e-tip-top";
var TIP_LEFT = "e-tip-left";
var TIP_RIGHT = "e-tip-right";
var POPUP_ROOT2 = "e-popup";
var POPUP_OPEN = "e-popup-open";
var POPUP_CLOSE = "e-popup-close";
var POPUP_LIB = "e-lib";
var HIDE_POPUP = "e-hidden";
var POPUP_CONTAINER = "e-tooltip-popup-container";
var Animation2 = (
  /** @class */
  function(_super) {
    __extends12(Animation3, _super);
    function Animation3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate11([Property({
      effect: "FadeIn",
      duration: 150,
      delay: 0
    })], Animation3.prototype, "open", void 0);
    __decorate11([Property({
      effect: "FadeOut",
      duration: 150,
      delay: 0
    })], Animation3.prototype, "close", void 0);
    return Animation3;
  }(ChildProperty)
);
var Tooltip = (
  /** @class */
  function(_super) {
    __extends12(Tooltip2, _super);
    function Tooltip2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.mouseMoveEvent = null;
      _this.mouseMoveTarget = null;
      _this.containerElement = null;
      _this.isBodyContainer = true;
      return _this;
    }
    Tooltip2.prototype.initialize = function() {
      this.formatPosition();
      addClass([this.element], ROOT2);
    };
    Tooltip2.prototype.formatPosition = function() {
      var _a, _b;
      if (!this.position) {
        return;
      }
      if (this.position.indexOf("Top") === 0 || this.position.indexOf("Bottom") === 0) {
        _a = this.position.split(/(?=[A-Z])/), this.tooltipPositionY = _a[0], this.tooltipPositionX = _a[1];
      } else {
        _b = this.position.split(/(?=[A-Z])/), this.tooltipPositionX = _b[0], this.tooltipPositionY = _b[1];
      }
    };
    Tooltip2.prototype.renderArrow = function() {
      this.setTipClass(this.position);
      var tip = this.createElement("div", {
        className: ARROW_TIP + " " + this.tipClass
      });
      tip.appendChild(this.createElement("div", {
        className: ARROW_TIP_OUTER + " " + this.tipClass
      }));
      tip.appendChild(this.createElement("div", {
        className: ARROW_TIP_INNER + " " + this.tipClass
      }));
      this.tooltipEle.appendChild(tip);
    };
    Tooltip2.prototype.setTipClass = function(position) {
      if (position.indexOf("Right") === 0) {
        this.tipClass = TIP_LEFT;
      } else if (position.indexOf("Bottom") === 0) {
        this.tipClass = TIP_TOP;
      } else if (position.indexOf("Left") === 0) {
        this.tipClass = TIP_RIGHT;
      } else {
        this.tipClass = TIP_BOTTOM;
      }
    };
    Tooltip2.prototype.renderPopup = function(target) {
      var elePos = this.mouseTrail ? {
        top: 0,
        left: 0
      } : this.getTooltipPosition(target);
      this.tooltipEle.classList.remove(POPUP_LIB);
      this.popupObj = new Popup(this.tooltipEle, {
        height: this.height,
        width: this.width,
        position: {
          X: elePos.left,
          Y: elePos.top
        },
        enableRtl: this.enableRtl,
        open: this.openPopupHandler.bind(this),
        close: this.closePopupHandler.bind(this)
      });
    };
    Tooltip2.prototype.getScalingFactor = function(target) {
      if (!target) {
        return {
          x: 1,
          y: 1
        };
      }
      var scalingFactors = {
        x: 1,
        y: 1
      };
      var elementsWithTransform = target.closest('[style*="transform: scale"]');
      if (elementsWithTransform && elementsWithTransform !== this.tooltipEle && elementsWithTransform.contains(this.tooltipEle)) {
        var computedStyle = window.getComputedStyle(elementsWithTransform);
        var transformValue = computedStyle.getPropertyValue("transform");
        var matrixValues = transformValue.match(/matrix\(([^)]+)\)/)[1].split(",").map(parseFloat);
        scalingFactors.x = matrixValues[0];
        scalingFactors.y = matrixValues[3];
      }
      return scalingFactors;
    };
    Tooltip2.prototype.getTooltipPosition = function(target) {
      this.tooltipEle.style.display = "block";
      var parentWithZoomStyle = this.element.closest('[style*="zoom"]');
      if (parentWithZoomStyle) {
        if (!parentWithZoomStyle.contains(this.tooltipEle)) {
          this.tooltipEle.style.zoom = getComputedStyle(parentWithZoomStyle).zoom;
        }
      }
      var pos = calculatePosition(target, this.tooltipPositionX, this.tooltipPositionY, !this.isBodyContainer, this.isBodyContainer ? null : this.containerElement.getBoundingClientRect());
      var scalingFactors = this.getScalingFactor(target);
      var offsetPos = this.calculateTooltipOffset(this.position, scalingFactors.x, scalingFactors.y);
      var collisionPosition = this.calculateElementPosition(pos, offsetPos);
      var collisionLeft = collisionPosition[0];
      var collisionTop = collisionPosition[1];
      var elePos = this.collisionFlipFit(target, collisionLeft, collisionTop);
      elePos.left = elePos.left / scalingFactors.x;
      elePos.top = elePos.top / scalingFactors.y;
      this.tooltipEle.style.display = "";
      return elePos;
    };
    Tooltip2.prototype.windowResize = function() {
      this.reposition(this.findTarget());
    };
    Tooltip2.prototype.reposition = function(target) {
      if (this.popupObj && target) {
        var elePos = this.getTooltipPosition(target);
        this.popupObj.position = {
          X: elePos.left,
          Y: elePos.top
        };
        this.popupObj.dataBind();
      }
    };
    Tooltip2.prototype.openPopupHandler = function() {
      if (!this.mouseTrail && this.needTemplateReposition()) {
        this.reposition(this.findTarget());
      }
      this.trigger("afterOpen", this.tooltipEventArgs);
      this.tooltipEventArgs = null;
    };
    Tooltip2.prototype.closePopupHandler = function() {
      if (this.isReact && !(this.opensOn === "Click" || typeof this.content === "function")) {
        this.clearTemplate(["content"]);
      }
      this.clear();
      var tooltipAfterCloseEventArgs = {
        type: this.tooltipEventArgs.event ? this.tooltipEventArgs.event.type : null,
        cancel: false,
        target: this.tooltipEventArgs.target,
        event: this.tooltipEventArgs.event ? this.tooltipEventArgs.event : null,
        element: this.tooltipEle,
        isInteracted: !isNullOrUndefined(this.tooltipEventArgs.event)
      };
      this.trigger("afterClose", tooltipAfterCloseEventArgs);
      tooltipAfterCloseEventArgs = null;
    };
    Tooltip2.prototype.calculateTooltipOffset = function(position, xScalingFactor, yScalingFactor) {
      if (xScalingFactor === void 0) {
        xScalingFactor = 1;
      }
      if (yScalingFactor === void 0) {
        yScalingFactor = 1;
      }
      var pos = {
        top: 0,
        left: 0
      };
      var tipWidth;
      var tipHeight;
      var tooltipEleWidth;
      var tooltipEleHeight;
      var arrowEle;
      var tipAdjust;
      var tipHeightAdjust;
      var tipWidthAdjust;
      if (xScalingFactor !== 1 || yScalingFactor !== 1) {
        var tooltipEleRect = this.tooltipEle.getBoundingClientRect();
        var arrowEleRect = void 0;
        tooltipEleWidth = Math.round(tooltipEleRect.width);
        tooltipEleHeight = Math.round(tooltipEleRect.height);
        arrowEle = select("." + ARROW_TIP, this.tooltipEle);
        if (arrowEle) {
          arrowEleRect = arrowEle.getBoundingClientRect();
        }
        tipWidth = arrowEle ? Math.round(arrowEleRect.width) : 0;
        tipHeight = arrowEle ? Math.round(arrowEleRect.height) : 0;
        tipAdjust = this.showTipPointer ? SHOW_POINTER_TIP_GAP : HIDE_POINTER_TIP_GAP;
        tipHeightAdjust = tipHeight / 2 + POINTER_ADJUST + (tooltipEleHeight - this.tooltipEle.clientHeight * yScalingFactor);
        tipWidthAdjust = tipWidth / 2 + POINTER_ADJUST + (tooltipEleWidth - this.tooltipEle.clientWidth * xScalingFactor);
      } else {
        tooltipEleWidth = this.tooltipEle.offsetWidth;
        tooltipEleHeight = this.tooltipEle.offsetHeight;
        arrowEle = select("." + ARROW_TIP, this.tooltipEle);
        tipWidth = arrowEle ? arrowEle.offsetWidth : 0;
        tipHeight = arrowEle ? arrowEle.offsetHeight : 0;
        tipAdjust = this.showTipPointer ? SHOW_POINTER_TIP_GAP : HIDE_POINTER_TIP_GAP;
        tipHeightAdjust = tipHeight / 2 + POINTER_ADJUST + (this.tooltipEle.offsetHeight - this.tooltipEle.clientHeight);
        tipWidthAdjust = tipWidth / 2 + POINTER_ADJUST + (this.tooltipEle.offsetWidth - this.tooltipEle.clientWidth);
      }
      if (this.mouseTrail) {
        tipAdjust += MOUSE_TRAIL_GAP;
      }
      switch (position) {
        case "RightTop":
          pos.left += tipWidth + tipAdjust;
          pos.top -= tooltipEleHeight - tipHeightAdjust;
          break;
        case "RightCenter":
          pos.left += tipWidth + tipAdjust;
          pos.top -= tooltipEleHeight / 2;
          break;
        case "RightBottom":
          pos.left += tipWidth + tipAdjust;
          pos.top -= tipHeightAdjust;
          break;
        case "BottomRight":
          pos.top += tipHeight + tipAdjust;
          pos.left -= tipWidthAdjust;
          break;
        case "BottomCenter":
          pos.top += tipHeight + tipAdjust;
          pos.left -= tooltipEleWidth / 2;
          break;
        case "BottomLeft":
          pos.top += tipHeight + tipAdjust;
          pos.left -= tooltipEleWidth - tipWidthAdjust;
          break;
        case "LeftBottom":
          pos.left -= tipWidth + tooltipEleWidth + tipAdjust;
          pos.top -= tipHeightAdjust;
          break;
        case "LeftCenter":
          pos.left -= tipWidth + tooltipEleWidth + tipAdjust;
          pos.top -= tooltipEleHeight / 2;
          break;
        case "LeftTop":
          pos.left -= tipWidth + tooltipEleWidth + tipAdjust;
          pos.top -= tooltipEleHeight - tipHeightAdjust;
          break;
        case "TopLeft":
          pos.top -= tooltipEleHeight + tipHeight + tipAdjust;
          pos.left -= tooltipEleWidth - tipWidthAdjust;
          break;
        case "TopRight":
          pos.top -= tooltipEleHeight + tipHeight + tipAdjust;
          pos.left -= tipWidthAdjust;
          break;
        default:
          pos.top -= tooltipEleHeight + tipHeight + tipAdjust;
          pos.left -= tooltipEleWidth / 2;
          break;
      }
      pos.left += this.offsetX;
      pos.top += this.offsetY;
      return pos;
    };
    Tooltip2.prototype.updateTipPosition = function(position) {
      var selEle = selectAll("." + ARROW_TIP + ",." + ARROW_TIP_OUTER + ",." + ARROW_TIP_INNER, this.tooltipEle);
      var removeList = [TIP_BOTTOM, TIP_TOP, TIP_LEFT, TIP_RIGHT];
      removeClass(selEle, removeList);
      this.setTipClass(position);
      addClass(selEle, this.tipClass);
    };
    Tooltip2.prototype.adjustArrow = function(target, position, tooltipPositionX, tooltipPositionY) {
      var arrowEle = select("." + ARROW_TIP, this.tooltipEle);
      if (this.showTipPointer === false || arrowEle === null) {
        return;
      }
      this.updateTipPosition(position);
      var leftValue;
      var topValue;
      this.tooltipEle.style.display = "block";
      var tooltipWidth = this.tooltipEle.clientWidth;
      var tooltipHeight = this.tooltipEle.clientHeight;
      var arrowInnerELe = select("." + ARROW_TIP_INNER, this.tooltipEle);
      var tipWidth = arrowEle.offsetWidth;
      var tipHeight = arrowEle.offsetHeight;
      this.tooltipEle.style.display = "";
      if (this.tipClass === TIP_BOTTOM || this.tipClass === TIP_TOP) {
        if (this.tipClass === TIP_BOTTOM) {
          topValue = "99.9%";
          arrowInnerELe.style.top = "-" + (tipHeight - 2) + "px";
        } else {
          topValue = -(tipHeight - 1) + "px";
          arrowInnerELe.style.top = "-" + (tipHeight - 6) + "px";
        }
        if (target) {
          var tipPosExclude = tooltipPositionX !== "Center" || tooltipWidth > target.offsetWidth || this.mouseTrail;
          if (tipPosExclude && tooltipPositionX === "Left" || !tipPosExclude && this.tipPointerPosition === "End") {
            leftValue = tooltipWidth - tipWidth - POINTER_ADJUST + "px";
          } else if (tipPosExclude && tooltipPositionX === "Right" || !tipPosExclude && this.tipPointerPosition === "Start") {
            leftValue = POINTER_ADJUST + "px";
          } else if (tipPosExclude && (this.tipPointerPosition === "End" || this.tipPointerPosition === "Start")) {
            leftValue = this.tipPointerPosition === "End" ? target.offsetWidth + (this.tooltipEle.offsetWidth - target.offsetWidth) / 2 - tipWidth / 2 - POINTER_ADJUST + "px" : (this.tooltipEle.offsetWidth - target.offsetWidth) / 2 - tipWidth / 2 + POINTER_ADJUST + "px";
          } else {
            leftValue = tooltipWidth / 2 - tipWidth / 2 + "px";
          }
        }
      } else {
        if (this.tipClass === TIP_RIGHT) {
          leftValue = "99.9%";
          arrowInnerELe.style.left = "-" + (tipWidth - 2) + "px";
        } else {
          leftValue = -(tipWidth - 1) + "px";
          arrowInnerELe.style.left = -tipWidth + (tipWidth - 2) + "px";
        }
        var tipPosExclude = tooltipPositionY !== "Center" || tooltipHeight > target.offsetHeight || this.mouseTrail;
        if (tipPosExclude && tooltipPositionY === "Top" || !tipPosExclude && this.tipPointerPosition === "End") {
          topValue = tooltipHeight - tipHeight - POINTER_ADJUST + "px";
        } else if (tipPosExclude && tooltipPositionY === "Bottom" || !tipPosExclude && this.tipPointerPosition === "Start") {
          topValue = POINTER_ADJUST + "px";
        } else {
          topValue = tooltipHeight / 2 - tipHeight / 2 + "px";
        }
      }
      arrowEle.style.top = topValue;
      arrowEle.style.left = leftValue;
    };
    Tooltip2.prototype.renderContent = function(target) {
      var _this = this;
      var tooltipContent = select("." + CONTENT, this.tooltipEle);
      if (this.cssClass) {
        addClass([this.tooltipEle], this.cssClass.split(" "));
      }
      if (target && !isNullOrUndefined(target.getAttribute("title"))) {
        target.setAttribute("data-content", target.getAttribute("title"));
        target.removeAttribute("title");
      }
      if (!isNullOrUndefined(this.content)) {
        tooltipContent.innerHTML = "";
        if (this.content instanceof HTMLElement) {
          tooltipContent.appendChild(this.content);
        } else if (typeof this.content === "string") {
          if (this.isAngular) {
            this.setProperties({
              content: SanitizeHtmlHelper.sanitize(this.content)
            }, true);
          } else {
            this.content = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(this.content) : this.content;
          }
          if (this.enableHtmlParse) {
            var tempFunction = compile(this.content);
            var tempArr = tempFunction({}, this, "content", this.element.id + "content", void 0, void 0, tooltipContent, this.root);
            if (tempArr) {
              append(tempArr, tooltipContent);
            }
          } else {
            tooltipContent["textContent"] = this.content;
          }
        } else {
          var templateFunction = compile(this.content);
          var tempArr = templateFunction({}, this, "content", this.element.id + "content", void 0, void 0, tooltipContent);
          if (tempArr) {
            if (this.isAngular) {
              setTimeout(function() {
                _this.reposition(target);
              }, 1);
            }
            append(tempArr, tooltipContent);
          }
          this.renderReactTemplates();
        }
      } else {
        if (target && !isNullOrUndefined(target.getAttribute("data-content"))) {
          tooltipContent.innerHTML = target.getAttribute("data-content");
        }
      }
    };
    Tooltip2.prototype.renderCloseIcon = function() {
      if (!this.isSticky) {
        var existingCloseIcon = this.tooltipEle.querySelector("." + ICON2 + "." + CLOSE);
        if (existingCloseIcon) {
          remove(existingCloseIcon);
        }
        return;
      }
      var tipClose = this.createElement("div", {
        className: ICON2 + " " + CLOSE,
        attrs: {
          role: "button",
          "aria-label": "Press escape to close the Tooltip"
        }
      });
      this.tooltipEle.appendChild(tipClose);
      EventHandler.add(tipClose, Browser.touchStartEvent, this.onStickyClose, this);
    };
    Tooltip2.prototype.addDescribedBy = function(target, id) {
      var describedby = (target.getAttribute("aria-describedby") || "").split(/\s+/);
      if (describedby.indexOf(id) < 0) {
        describedby.push(id);
      }
      attributes(target, {
        "aria-describedby": describedby.join(" ").trim(),
        "data-tooltip-id": id
      });
    };
    Tooltip2.prototype.removeDescribedBy = function(target) {
      var id = target.getAttribute("data-tooltip-id");
      var describedby = (target.getAttribute("aria-describedby") || "").split(/\s+/);
      var index = describedby.indexOf(id);
      if (index !== -1) {
        describedby.splice(index, 1);
      }
      target.removeAttribute("data-tooltip-id");
      var orgdescribedby = describedby.join(" ").trim();
      if (orgdescribedby) {
        target.setAttribute("aria-describedby", orgdescribedby);
      } else {
        target.removeAttribute("aria-describedby");
      }
    };
    Tooltip2.prototype.tapHoldHandler = function(evt) {
      clearTimeout(this.autoCloseTimer);
      this.targetHover(evt.originalEvent);
    };
    Tooltip2.prototype.touchEndHandler = function() {
      var _this = this;
      if (this.isSticky) {
        return;
      }
      var close = function() {
        _this.close();
      };
      this.autoCloseTimer = setTimeout(close, TOUCHEND_HIDE_DELAY);
    };
    Tooltip2.prototype.targetClick = function(e) {
      var target;
      if (this.target) {
        target = closest(e.target, this.target);
      } else {
        target = this.element;
      }
      if (isNullOrUndefined(target)) {
        return;
      }
      var mouseEvent = e;
      if (target.getAttribute("data-tooltip-id") === null) {
        if (!(mouseEvent.type === "mousedown" && mouseEvent.button === 2)) {
          this.targetHover(e);
        }
      } else if (!this.isSticky) {
        this.hideTooltip(this.animation.close, e, target);
      }
    };
    Tooltip2.prototype.targetHover = function(e) {
      var target;
      if (this.target) {
        target = closest(e.target, this.target);
      } else {
        target = this.element;
      }
      if (isNullOrUndefined(target) || target.getAttribute("data-tooltip-id") !== null && this.closeDelay === 0) {
        return;
      }
      if (!isNullOrUndefined(this.tooltipEle) && this.tooltipEle.getAttribute("e-animation-id")) {
        Animation.stop(this.tooltipEle);
        this.clear();
      }
      var targetList = [].slice.call(selectAll('[data-tooltip-id= "' + this.ctrlId + '_content"]', document));
      for (var _i = 0, targetList_1 = targetList; _i < targetList_1.length; _i++) {
        var target_1 = targetList_1[_i];
        this.restoreElement(target_1);
      }
      this.showTooltip(target, this.animation.open, e);
    };
    Tooltip2.prototype.mouseMoveBeforeOpen = function(e) {
      this.mouseMoveEvent = e;
    };
    Tooltip2.prototype.mouseMoveBeforeRemove = function() {
      if (this.mouseMoveTarget) {
        EventHandler.remove(this.mouseMoveTarget, "mousemove touchstart", this.mouseMoveBeforeOpen);
      }
    };
    Tooltip2.prototype.showTooltip = function(target, showAnimation, e) {
      var _this = this;
      clearTimeout(this.showTimer);
      clearTimeout(this.hideTimer);
      if (this.openDelay && this.mouseTrail) {
        this.mouseMoveBeforeRemove();
        this.mouseMoveTarget = target;
        EventHandler.add(this.mouseMoveTarget, "mousemove touchstart", this.mouseMoveBeforeOpen, this);
      }
      this.tooltipEventArgs = {
        type: e ? e.type : null,
        cancel: false,
        target,
        event: e ? e : null,
        element: this.tooltipEle,
        isInteracted: !isNullOrUndefined(e)
      };
      var observeCallback = function(beforeRenderArgs) {
        _this.beforeRenderCallback(beforeRenderArgs, target, e, showAnimation);
      };
      this.trigger("beforeRender", this.tooltipEventArgs, observeCallback.bind(this));
    };
    Tooltip2.prototype.beforeRenderCallback = function(beforeRenderArgs, target, e, showAnimation) {
      if (beforeRenderArgs.cancel) {
        this.isHidden = true;
        this.clear();
        this.mouseMoveBeforeRemove();
      } else {
        this.isHidden = false;
        if (isNullOrUndefined(this.tooltipEle)) {
          this.ctrlId = this.element.getAttribute("id") ? getUniqueID(this.element.getAttribute("id")) : getUniqueID("tooltip");
          this.tooltipEle = this.createElement("div", {
            className: TOOLTIP_WRAP + " " + POPUP_ROOT2 + " " + POPUP_LIB,
            attrs: {
              role: "tooltip",
              "aria-hidden": "false",
              "id": this.ctrlId + "_content"
            }
          });
          this.tooltipEle.style.width = formatUnit(this.width);
          this.tooltipEle.style.height = formatUnit(this.height);
          this.tooltipEle.style.position = "absolute";
          this.tooltipBeforeRender(target, this);
          this.tooltipAfterRender(target, e, showAnimation, this);
        } else {
          if (target) {
            this.adjustArrow(target, this.position, this.tooltipPositionX, this.tooltipPositionY);
            this.addDescribedBy(target, this.ctrlId + "_content");
            this.renderContent(target);
            Animation.stop(this.tooltipEle);
            this.reposition(target);
            this.tooltipAfterRender(target, e, showAnimation, this);
          }
        }
      }
    };
    Tooltip2.prototype.appendContainer = function(ctrlObj) {
      if (typeof this.container == "string") {
        if (this.container === "body") {
          this.containerElement = document.body;
        } else {
          this.isBodyContainer = false;
          this.containerElement = select(this.container, document);
        }
      } else if (this.container instanceof HTMLElement) {
        this.containerElement = this.container;
        this.isBodyContainer = this.containerElement.tagName === "BODY";
      }
      if (!this.isBodyContainer) {
        addClass([this.containerElement], POPUP_CONTAINER);
      }
      this.containerElement.appendChild(ctrlObj.tooltipEle);
    };
    Tooltip2.prototype.tooltipBeforeRender = function(target, ctrlObj) {
      if (target) {
        if (Browser.isDevice) {
          addClass([ctrlObj.tooltipEle], DEVICE2);
        }
        if (ctrlObj.width !== "auto") {
          ctrlObj.tooltipEle.style.maxWidth = formatUnit(ctrlObj.width);
        }
        ctrlObj.tooltipEle.appendChild(ctrlObj.createElement("div", {
          className: CONTENT
        }));
        this.appendContainer(ctrlObj);
        removeClass([ctrlObj.tooltipEle], HIDE_POPUP);
        ctrlObj.addDescribedBy(target, ctrlObj.ctrlId + "_content");
        ctrlObj.renderContent(target);
        addClass([ctrlObj.tooltipEle], POPUP_OPEN);
        if (ctrlObj.showTipPointer) {
          ctrlObj.renderArrow();
        }
        ctrlObj.renderCloseIcon();
        ctrlObj.renderPopup(target);
        ctrlObj.adjustArrow(target, ctrlObj.position, ctrlObj.tooltipPositionX, ctrlObj.tooltipPositionY);
        Animation.stop(ctrlObj.tooltipEle);
        ctrlObj.reposition(target);
      }
    };
    Tooltip2.prototype.tooltipAfterRender = function(target, e, showAnimation, ctrlObj) {
      if (target) {
        removeClass([ctrlObj.tooltipEle], POPUP_OPEN);
        addClass([ctrlObj.tooltipEle], POPUP_CLOSE);
        ctrlObj.tooltipEventArgs = {
          type: e ? e.type : null,
          cancel: false,
          target,
          event: e ? e : null,
          element: ctrlObj.tooltipEle,
          isInteracted: !isNullOrUndefined(e)
        };
        if (ctrlObj.needTemplateReposition() && !ctrlObj.mouseTrail && (showAnimation.effect === "None" || showAnimation.effect === "FadeIn" || // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.isReact && typeof ctrlObj.content != "string")) {
          ctrlObj.tooltipEle.style.display = "none";
        }
        var observeCallback = function(observedArgs) {
          ctrlObj.beforeOpenCallback(observedArgs, target, showAnimation, e);
        };
        ctrlObj.trigger("beforeOpen", ctrlObj.tooltipEventArgs, observeCallback.bind(ctrlObj));
      }
    };
    Tooltip2.prototype.beforeOpenCallback = function(observedArgs, target, showAnimation, e) {
      var _this = this;
      if (observedArgs.cancel) {
        this.isHidden = true;
        this.clear();
        this.mouseMoveBeforeRemove();
        this.restoreElement(target);
      } else {
        var openAnimation_1 = {
          name: showAnimation.effect === "None" && animationMode === "Enable" ? "FadeIn" : this.animation.open.effect,
          duration: showAnimation.duration,
          delay: showAnimation.delay,
          timingFunction: "easeOut"
        };
        if (showAnimation.effect === "None") {
          openAnimation_1 = void 0;
        }
        if (this.openDelay > 0) {
          var show = function() {
            if (_this.mouseTrail) {
              EventHandler.add(target, "mousemove touchstart mouseenter", _this.onMouseMove, _this);
            }
            if (_this.popupObj) {
              _this.popupObj.show(openAnimation_1, target);
              if (_this.mouseMoveEvent && _this.mouseTrail) {
                _this.onMouseMove(_this.mouseMoveEvent);
              }
            }
          };
          this.showTimer = setTimeout(show, this.openDelay);
        } else {
          if (this.popupObj) {
            this.popupObj.show(openAnimation_1, target);
          }
        }
      }
      if (e) {
        this.wireMouseEvents(e, target);
      }
    };
    Tooltip2.prototype.needTemplateReposition = function() {
      var tooltip = this;
      return !isNullOrUndefined(tooltip.viewContainerRef) && typeof tooltip.viewContainerRef !== "string" || this.isReact;
    };
    Tooltip2.prototype.checkCollision = function(target, x, y) {
      var elePos = {
        left: x,
        top: y,
        position: this.position,
        horizontal: this.tooltipPositionX,
        vertical: this.tooltipPositionY
      };
      var affectedPos = isCollide(this.tooltipEle, this.checkCollideTarget(), x, y);
      if (affectedPos.length > 0) {
        elePos.horizontal = affectedPos.indexOf("left") >= 0 ? "Right" : affectedPos.indexOf("right") >= 0 ? "Left" : this.tooltipPositionX;
        elePos.vertical = affectedPos.indexOf("top") >= 0 ? "Bottom" : affectedPos.indexOf("bottom") >= 0 ? "Top" : this.tooltipPositionY;
      }
      return elePos;
    };
    Tooltip2.prototype.calculateElementPosition = function(pos, offsetPos) {
      return [this.isBodyContainer ? pos.left + offsetPos.left : pos.left - this.containerElement.getBoundingClientRect().left + offsetPos.left + window.pageXOffset + this.containerElement.scrollLeft, this.isBodyContainer ? pos.top + offsetPos.top : pos.top - this.containerElement.getBoundingClientRect().top + offsetPos.top + window.pageYOffset + this.containerElement.scrollTop];
    };
    Tooltip2.prototype.collisionFlipFit = function(target, x, y) {
      var elePos = this.checkCollision(target, x, y);
      var newpos = elePos.position;
      if (this.tooltipPositionY !== elePos.vertical) {
        newpos = this.position.indexOf("Bottom") === 0 || this.position.indexOf("Top") === 0 ? elePos.vertical + this.tooltipPositionX : this.tooltipPositionX + elePos.vertical;
      }
      if (this.tooltipPositionX !== elePos.horizontal) {
        if (newpos.indexOf("Left") === 0) {
          elePos.vertical = newpos === "LeftTop" || newpos === "LeftCenter" ? "Top" : "Bottom";
          newpos = elePos.vertical + "Left";
        }
        if (newpos.indexOf("Right") === 0) {
          elePos.vertical = newpos === "RightTop" || newpos === "RightCenter" ? "Top" : "Bottom";
          newpos = elePos.vertical + "Right";
        }
        elePos.horizontal = this.tooltipPositionX;
      }
      this.tooltipEventArgs = {
        type: null,
        cancel: false,
        target,
        event: null,
        element: this.tooltipEle,
        collidedPosition: newpos
      };
      this.trigger("beforeCollision", this.tooltipEventArgs);
      if (this.tooltipEventArgs.cancel) {
        newpos = this.position;
      } else {
        var elePosVertical = elePos.vertical;
        var elePosHorizontal = elePos.horizontal;
        if (elePos.position !== newpos) {
          var pos = calculatePosition(target, elePosHorizontal, elePosVertical, !this.isBodyContainer, this.isBodyContainer ? null : this.containerElement.getBoundingClientRect());
          this.adjustArrow(target, newpos, elePosHorizontal, elePosVertical);
          var scalingFactors = this.getScalingFactor(target);
          var offsetPos = this.calculateTooltipOffset(newpos, scalingFactors.x, scalingFactors.y);
          offsetPos.top -= this.getOffSetPosition("TopBottom", newpos, this.offsetY);
          offsetPos.left -= this.getOffSetPosition("RightLeft", newpos, this.offsetX);
          elePos.position = newpos;
          var elePosition = this.calculateElementPosition(pos, offsetPos);
          elePos.left = elePosition[0];
          elePos.top = elePosition[1];
        } else {
          this.adjustArrow(target, newpos, elePosHorizontal, elePosVertical);
        }
      }
      var eleOffset = {
        left: elePos.left,
        top: elePos.top
      };
      var position = this.isBodyContainer ? fit(this.tooltipEle, this.checkCollideTarget(), {
        X: true,
        Y: this.windowCollision
      }, eleOffset) : eleOffset;
      this.tooltipEle.style.display = "block";
      var arrowEle = select("." + ARROW_TIP, this.tooltipEle);
      if (this.showTipPointer && arrowEle != null && (newpos.indexOf("Bottom") === 0 || newpos.indexOf("Top") === 0)) {
        var arrowleft = parseInt(arrowEle.style.left, 10) - (position.left - elePos.left);
        if (arrowleft < 0) {
          arrowleft = 0;
        } else if (arrowleft + arrowEle.offsetWidth > this.tooltipEle.clientWidth) {
          arrowleft = this.tooltipEle.clientWidth - arrowEle.offsetWidth;
        }
        arrowEle.style.left = arrowleft.toString() + "px";
      }
      this.tooltipEle.style.display = "";
      eleOffset.left = position.left;
      eleOffset.top = position.top;
      return eleOffset;
    };
    Tooltip2.prototype.getOffSetPosition = function(positionString, newPos, offsetType) {
      return positionString.indexOf(this.position.split(/(?=[A-Z])/)[0]) !== -1 && positionString.indexOf(newPos.split(/(?=[A-Z])/)[0]) !== -1 ? 2 * offsetType : 0;
    };
    Tooltip2.prototype.checkCollideTarget = function() {
      return !this.windowCollision && this.target ? this.element : null;
    };
    Tooltip2.prototype.hideTooltip = function(hideAnimation, e, targetElement2) {
      var _this = this;
      if (this.closeDelay > 0) {
        clearTimeout(this.hideTimer);
        clearTimeout(this.showTimer);
        var hide = function() {
          if (_this.closeDelay && _this.tooltipEle && _this.isTooltipOpen) {
            return;
          }
          _this.tooltipHide(hideAnimation, e, targetElement2);
        };
        this.hideTimer = setTimeout(hide, this.closeDelay);
      } else {
        this.tooltipHide(hideAnimation, e, targetElement2);
      }
    };
    Tooltip2.prototype.tooltipHide = function(hideAnimation, e, targetElement2) {
      var _this = this;
      var target;
      if (e) {
        target = this.target ? targetElement2 || e.target : this.element;
      } else {
        target = select('[data-tooltip-id= "' + this.ctrlId + '_content"]', document);
      }
      this.tooltipEventArgs = {
        type: e ? e.type : null,
        cancel: false,
        target,
        event: e ? e : null,
        element: this.tooltipEle,
        isInteracted: !isNullOrUndefined(e)
      };
      this.trigger("beforeClose", this.tooltipEventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          _this.mouseMoveBeforeRemove();
          _this.popupHide(hideAnimation, target, e);
        } else {
          _this.isHidden = false;
        }
      });
    };
    Tooltip2.prototype.popupHide = function(hideAnimation, target, e) {
      if (target && e) {
        this.restoreElement(target);
      }
      this.isHidden = true;
      var closeAnimation = {
        name: hideAnimation.effect === "None" && animationMode === "Enable" ? "FadeOut" : this.animation.close.effect,
        duration: hideAnimation.duration,
        delay: hideAnimation.delay,
        timingFunction: "easeIn"
      };
      if (hideAnimation.effect === "None") {
        closeAnimation = void 0;
      }
      if (this.popupObj) {
        this.popupObj.hide(closeAnimation);
      }
    };
    Tooltip2.prototype.restoreElement = function(target) {
      this.unwireMouseEvents(target);
      if (!isNullOrUndefined(target.getAttribute("data-content"))) {
        target.setAttribute("title", target.getAttribute("data-content"));
        target.removeAttribute("data-content");
      }
      this.removeDescribedBy(target);
    };
    Tooltip2.prototype.clear = function() {
      var target = this.findTarget();
      if (target) {
        this.restoreElement(target);
      }
      if (this.tooltipEle) {
        removeClass([this.tooltipEle], POPUP_CLOSE);
        addClass([this.tooltipEle], POPUP_OPEN);
      }
      if (this.isHidden) {
        if (this.popupObj) {
          this.popupObj.destroy();
        }
        if (this.tooltipEle) {
          remove(this.tooltipEle);
        }
        this.tooltipEle = null;
        this.popupObj = null;
      }
    };
    Tooltip2.prototype.tooltipHover = function() {
      if (this.tooltipEle) {
        this.isTooltipOpen = true;
      }
    };
    Tooltip2.prototype.tooltipMouseOut = function(e) {
      this.isTooltipOpen = false;
      this.hideTooltip(this.animation.close, e, this.findTarget());
    };
    Tooltip2.prototype.onMouseOut = function(e) {
      var enteredElement = e.relatedTarget;
      if (enteredElement && !this.mouseTrail) {
        var checkForTooltipElement = closest(enteredElement, "." + TOOLTIP_WRAP + "." + POPUP_LIB + "." + POPUP_ROOT2);
        if (checkForTooltipElement) {
          EventHandler.add(checkForTooltipElement, "mouseleave", this.tooltipElementMouseOut, this);
        } else {
          this.hideTooltip(this.animation.close, e, this.findTarget());
          if (this.closeDelay === 0 && (this.animation.close.effect === "None" || this.isReact && typeof this.content != "string")) {
            this.clear();
          }
        }
      } else {
        this.hideTooltip(this.animation.close, e, this.findTarget());
        this.clear();
      }
      if (this.popupObj && !this.popupObj.element.classList.contains(POPUP_OPEN)) {
        this.clear();
      }
    };
    Tooltip2.prototype.tooltipElementMouseOut = function(e) {
      this.hideTooltip(this.animation.close, e, this.findTarget());
      EventHandler.remove(this.element, "mouseleave", this.tooltipElementMouseOut);
      this.clear();
    };
    Tooltip2.prototype.onStickyClose = function() {
      this.close();
    };
    Tooltip2.prototype.onMouseMove = function(event2) {
      var eventPageX = 0;
      var eventPageY = 0;
      if (event2.type.indexOf("touch") > -1) {
        event2.preventDefault();
        eventPageX = event2.touches[0].pageX;
        eventPageY = event2.touches[0].pageY;
      } else {
        eventPageX = event2.pageX;
        eventPageY = event2.pageY;
      }
      if (isNullOrUndefined(this.tooltipEle)) {
        return;
      }
      Animation.stop(this.tooltipEle);
      removeClass([this.tooltipEle], POPUP_CLOSE);
      addClass([this.tooltipEle], POPUP_OPEN);
      this.adjustArrow(event2.target, this.position, this.tooltipPositionX, this.tooltipPositionY);
      var scalingFactors = this.getScalingFactor(event2.target);
      var pos = this.calculateTooltipOffset(this.position, scalingFactors.x, scalingFactors.y);
      var x = eventPageX + pos.left + this.offsetX;
      var y = eventPageY + pos.top + this.offsetY;
      var elePos = this.checkCollision(event2.target, x, y);
      if (this.tooltipPositionX !== elePos.horizontal || this.tooltipPositionY !== elePos.vertical) {
        var newpos = this.position.indexOf("Bottom") === 0 || this.position.indexOf("Top") === 0 ? elePos.vertical + elePos.horizontal : elePos.horizontal + elePos.vertical;
        elePos.position = newpos;
        this.adjustArrow(event2.target, elePos.position, elePos.horizontal, elePos.vertical);
        var colpos = this.calculateTooltipOffset(elePos.position, scalingFactors.x, scalingFactors.y);
        elePos.left = eventPageX + colpos.left - this.offsetX;
        elePos.top = eventPageY + colpos.top - this.offsetY;
      }
      this.tooltipEle.style.left = elePos.left + "px";
      this.tooltipEle.style.top = elePos.top + "px";
    };
    Tooltip2.prototype.keyDown = function(event2) {
      if (this.tooltipEle && event2.keyCode === 27) {
        this.close();
      }
    };
    Tooltip2.prototype.touchEnd = function(e) {
      if (this.tooltipEle && closest(e.target, "." + ROOT2) === null && !this.isSticky) {
        this.close();
      }
    };
    Tooltip2.prototype.scrollHandler = function(e) {
      if (this.tooltipEle && !this.isSticky) {
        if (!closest(e.target, "." + TOOLTIP_WRAP + "." + POPUP_LIB + "." + POPUP_ROOT2) && !this.isSticky) {
          this.close();
        }
      }
    };
    Tooltip2.prototype.render = function() {
      this.initialize();
      this.wireEvents(this.opensOn);
      this.renderComplete();
    };
    Tooltip2.prototype.preRender = function() {
      this.tipClass = TIP_BOTTOM;
      this.tooltipPositionX = "Center";
      this.tooltipPositionY = "Top";
      this.isHidden = true;
    };
    Tooltip2.prototype.wireEvents = function(trigger) {
      var triggerList = this.getTriggerList(trigger);
      for (var _i = 0, triggerList_1 = triggerList; _i < triggerList_1.length; _i++) {
        var opensOn = triggerList_1[_i];
        if (opensOn === "Custom") {
          return;
        }
        if (opensOn === "Focus") {
          this.wireFocusEvents();
        }
        if (opensOn === "Click") {
          EventHandler.add(this.element, Browser.touchStartEvent, this.targetClick, this);
        }
        if (opensOn === "Hover") {
          if (Browser.isDevice) {
            this.touchModule = new Touch(this.element, {
              tapHoldThreshold: TAPHOLD_THRESHOLD,
              tapHold: this.tapHoldHandler.bind(this)
            });
            EventHandler.add(this.element, Browser.touchEndEvent, this.touchEndHandler, this);
          } else {
            EventHandler.add(this.element, "mouseover", this.targetHover, this);
          }
        }
      }
      this.windowResizeBound = this.windowResize.bind(this);
      this.keyDownBound = this.keyDown.bind(this);
      this.touchEndBound = this.touchEnd.bind(this);
      this.scrollWheelBound = this.scrollHandler.bind(this);
      document.addEventListener("wheel", this.scrollWheelBound);
      document.addEventListener("scroll", this.scrollWheelBound);
      document.addEventListener("touchend", this.touchEndBound);
      document.addEventListener("keydown", this.keyDownBound);
      window.addEventListener("resize", this.windowResizeBound);
    };
    Tooltip2.prototype.getTriggerList = function(trigger) {
      if (!trigger) {
        return [];
      }
      if (trigger === "Auto") {
        trigger = Browser.isDevice ? "Hover" : "Hover Focus";
      }
      return trigger.split(" ");
    };
    Tooltip2.prototype.wireFocusEvents = function() {
      if (!isNullOrUndefined(this.target)) {
        var targetList = [].slice.call(selectAll(this.target, this.element));
        this.targetsList = targetList;
        if (!isNullOrUndefined(this.targetsList) && this.targetsList.length > 0) {
          for (var _i = 0, targetList_2 = targetList; _i < targetList_2.length; _i++) {
            var target = targetList_2[_i];
            EventHandler.add(target, "focus", this.targetHover, this);
          }
        } else {
          EventHandler.add(this.element, "focusin", this.targetHover, this);
        }
      } else {
        EventHandler.add(this.element, "focusin", this.targetHover, this);
      }
    };
    Tooltip2.prototype.wireMouseEvents = function(e, target) {
      if (this.tooltipEle) {
        if (!this.isSticky) {
          if (e.type === "focus") {
            EventHandler.add(target, "blur", this.onMouseOut, this);
          }
          if (e.type === "focusin") {
            EventHandler.add(target, "focusout", this.onMouseOut, this);
          }
          if (e.type === "mouseover") {
            EventHandler.add(target, "mouseleave", this.onMouseOut, this);
          }
          if (this.closeDelay) {
            EventHandler.add(this.tooltipEle, "mouseenter", this.tooltipHover, this);
            EventHandler.add(this.tooltipEle, "mouseleave", this.tooltipMouseOut, this);
          }
        }
        if (this.mouseTrail && this.openDelay === 0) {
          EventHandler.add(target, "mousemove touchstart mouseenter", this.onMouseMove, this);
        }
      }
    };
    Tooltip2.prototype.unwireEvents = function(trigger) {
      var triggerList = this.getTriggerList(trigger);
      for (var _i = 0, triggerList_2 = triggerList; _i < triggerList_2.length; _i++) {
        var opensOn = triggerList_2[_i];
        if (opensOn === "Custom") {
          return;
        }
        if (opensOn === "Focus") {
          this.unwireFocusEvents();
        }
        if (opensOn === "Click") {
          EventHandler.remove(this.element, Browser.touchStartEvent, this.targetClick);
        }
        if (opensOn === "Hover") {
          if (Browser.isDevice) {
            if (this.touchModule) {
              this.touchModule.destroy();
            }
            EventHandler.remove(this.element, Browser.touchEndEvent, this.touchEndHandler);
          } else {
            EventHandler.remove(this.element, "mouseover", this.targetHover);
          }
        }
      }
      document.removeEventListener("touchend", this.touchEndBound);
      this.touchEndBound = null;
      document.removeEventListener("wheel", this.scrollWheelBound);
      document.removeEventListener("scroll", this.scrollWheelBound);
      this.scrollWheelBound = null;
      window.removeEventListener("resize", this.windowResizeBound);
      this.windowResizeBound = null;
      document.removeEventListener("keydown", this.keyDownBound);
      this.keyDownBound = null;
    };
    Tooltip2.prototype.unwireFocusEvents = function() {
      if (!isNullOrUndefined(this.target)) {
        var targetList = [].slice.call(selectAll(this.target, this.element));
        if (!isNullOrUndefined(this.targetsList) && this.targetsList.length > 0) {
          for (var _i = 0, targetList_3 = targetList; _i < targetList_3.length; _i++) {
            var target = targetList_3[_i];
            EventHandler.remove(target, "focus", this.targetHover);
          }
        } else {
          EventHandler.remove(this.element, "focusin", this.targetHover);
        }
      } else {
        EventHandler.remove(this.element, "focusin", this.targetHover);
      }
    };
    Tooltip2.prototype.unwireMouseEvents = function(target) {
      if (!this.isSticky) {
        var triggerList = this.getTriggerList(this.opensOn);
        for (var _i = 0, triggerList_3 = triggerList; _i < triggerList_3.length; _i++) {
          var opensOn = triggerList_3[_i];
          if (opensOn === "Focus") {
            EventHandler.remove(target, "blur", this.onMouseOut);
            EventHandler.remove(target, "focusout", this.onMouseOut);
          }
          if (opensOn === "Hover" && !Browser.isDevice) {
            EventHandler.remove(target, "mouseleave", this.onMouseOut);
          }
        }
        if (this.closeDelay) {
          EventHandler.remove(target, "mouseenter", this.tooltipHover);
          EventHandler.remove(target, "mouseleave", this.tooltipMouseOut);
        }
      }
      if (this.mouseTrail) {
        EventHandler.remove(target, "mousemove touchstart mouseenter", this.onMouseMove);
      }
    };
    Tooltip2.prototype.findTarget = function() {
      var target = select('[data-tooltip-id= "' + this.ctrlId + '_content"]', document);
      return target;
    };
    Tooltip2.prototype.getModuleName = function() {
      return "tooltip";
    };
    Tooltip2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    Tooltip2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var targetElement2 = this.findTarget();
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "width":
            if (this.tooltipEle && targetElement2) {
              this.tooltipEle.style.width = this.tooltipEle.style.maxWidth = formatUnit(newProp.width);
              this.reposition(targetElement2);
            }
            break;
          case "height":
            if (this.tooltipEle && targetElement2) {
              this.tooltipEle.style.height = formatUnit(newProp.height);
              this.reposition(targetElement2);
            }
            break;
          case "content":
            if (this.tooltipEle) {
              this.renderContent();
            }
            break;
          case "opensOn":
            this.unwireEvents(oldProp.opensOn);
            this.wireEvents(newProp.opensOn);
            break;
          case "position":
            this.formatPosition();
            if (this.tooltipEle && targetElement2) {
              var arrowInnerELe = select("." + ARROW_TIP_INNER, this.tooltipEle);
              if (arrowInnerELe) {
                arrowInnerELe.style.top = arrowInnerELe.style.left = null;
              }
              this.reposition(targetElement2);
            }
            break;
          case "tipPointerPosition":
            if (this.tooltipEle && targetElement2) {
              this.reposition(targetElement2);
            }
            break;
          case "offsetX":
            if (this.tooltipEle) {
              var x = newProp.offsetX - oldProp.offsetX;
              this.tooltipEle.style.left = (parseInt(this.tooltipEle.style.left, 10) + x).toString() + "px";
            }
            break;
          case "offsetY":
            if (this.tooltipEle) {
              var y = newProp.offsetY - oldProp.offsetY;
              this.tooltipEle.style.top = (parseInt(this.tooltipEle.style.top, 10) + y).toString() + "px";
            }
            break;
          case "cssClass":
            if (this.tooltipEle) {
              if (oldProp.cssClass) {
                removeClass([this.tooltipEle], oldProp.cssClass.split(" "));
              }
              if (newProp.cssClass) {
                addClass([this.tooltipEle], newProp.cssClass.split(" "));
              }
            }
            break;
          case "enableRtl":
            if (this.tooltipEle) {
              if (this.enableRtl) {
                addClass([this.tooltipEle], RTL5);
              } else {
                removeClass([this.tooltipEle], RTL5);
              }
            }
            break;
          case "isSticky":
            if (this.tooltipEle && targetElement2) {
              this.renderCloseIcon();
              this.reposition(targetElement2);
            }
            break;
          case "container":
            if (!isNullOrUndefined(this.containerElement)) {
              removeClass([this.containerElement], POPUP_CONTAINER);
            }
            this.container = newProp.container;
            if (this.tooltipEle && targetElement2) {
              this.appendContainer(this);
              this.reposition(targetElement2);
            }
        }
      }
    };
    Tooltip2.prototype.open = function(element2, animation) {
      if (isNullOrUndefined(animation)) {
        animation = this.animation.open;
      }
      if (isNullOrUndefined(element2)) {
        element2 = this.element;
      }
      if (element2.style.display === "none") {
        return;
      }
      this.showTooltip(element2, animation);
    };
    Tooltip2.prototype.close = function(animation) {
      if (!animation) {
        animation = this.animation.close;
      }
      this.hideTooltip(animation);
    };
    Tooltip2.prototype.refresh = function(target) {
      if (this.tooltipEle) {
        this.renderContent(target);
      }
      if (this.popupObj && target) {
        this.reposition(target);
      }
      if (!isNullOrUndefined(this.targetsList) && !isNullOrUndefined(this.target)) {
        var target_2 = selectAll(this.target, this.element);
        if (target_2.length !== this.targetsList.length) {
          this.unwireEvents(this.opensOn);
          this.wireEvents(this.opensOn);
        }
      }
    };
    Tooltip2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      if (this.tooltipEle) {
        remove(this.tooltipEle);
      }
      if (this.popupObj) {
        this.popupObj.destroy();
      }
      destroy();
      removeClass([this.element], ROOT2);
      this.unwireEvents(this.opensOn);
      this.unwireMouseEvents(this.element);
      this.tooltipEle = null;
      this.popupObj = null;
      var currentTarget = selectAll('[data-tooltip-id= "' + this.ctrlId + '_content"]', this.element);
      for (var _i = 0, currentTarget_1 = currentTarget; _i < currentTarget_1.length; _i++) {
        var target = currentTarget_1[_i];
        this.restoreElement(target);
      }
      this.containerElement = null;
      this.tipClass = null;
      this.tooltipPositionX = null;
      this.tooltipPositionY = null;
      this.ctrlId = null;
      this.tooltipEventArgs = null;
      this.touchModule = null;
      this.mouseMoveEvent = null;
      this.mouseMoveTarget = null;
      this.containerElement = null;
      this.targetsList = null;
    };
    __decorate11([Property("auto")], Tooltip2.prototype, "width", void 0);
    __decorate11([Property("auto")], Tooltip2.prototype, "height", void 0);
    __decorate11([Property()], Tooltip2.prototype, "content", void 0);
    __decorate11([Property("body")], Tooltip2.prototype, "container", void 0);
    __decorate11([Property()], Tooltip2.prototype, "target", void 0);
    __decorate11([Property("TopCenter")], Tooltip2.prototype, "position", void 0);
    __decorate11([Property(0)], Tooltip2.prototype, "offsetX", void 0);
    __decorate11([Property(0)], Tooltip2.prototype, "offsetY", void 0);
    __decorate11([Property(true)], Tooltip2.prototype, "showTipPointer", void 0);
    __decorate11([Property(true)], Tooltip2.prototype, "enableHtmlParse", void 0);
    __decorate11([Property(false)], Tooltip2.prototype, "windowCollision", void 0);
    __decorate11([Property("Auto")], Tooltip2.prototype, "tipPointerPosition", void 0);
    __decorate11([Property("Auto")], Tooltip2.prototype, "opensOn", void 0);
    __decorate11([Property(false)], Tooltip2.prototype, "mouseTrail", void 0);
    __decorate11([Property(false)], Tooltip2.prototype, "isSticky", void 0);
    __decorate11([Complex({}, Animation2)], Tooltip2.prototype, "animation", void 0);
    __decorate11([Property(0)], Tooltip2.prototype, "openDelay", void 0);
    __decorate11([Property(0)], Tooltip2.prototype, "closeDelay", void 0);
    __decorate11([Property()], Tooltip2.prototype, "cssClass", void 0);
    __decorate11([Property(true)], Tooltip2.prototype, "enableHtmlSanitizer", void 0);
    __decorate11([Property("")], Tooltip2.prototype, "htmlAttributes", void 0);
    __decorate11([Event()], Tooltip2.prototype, "beforeRender", void 0);
    __decorate11([Event()], Tooltip2.prototype, "beforeOpen", void 0);
    __decorate11([Event()], Tooltip2.prototype, "afterOpen", void 0);
    __decorate11([Event()], Tooltip2.prototype, "beforeClose", void 0);
    __decorate11([Event()], Tooltip2.prototype, "afterClose", void 0);
    __decorate11([Event()], Tooltip2.prototype, "beforeCollision", void 0);
    __decorate11([Event()], Tooltip2.prototype, "created", void 0);
    __decorate11([Event()], Tooltip2.prototype, "destroyed", void 0);
    Tooltip2 = __decorate11([NotifyPropertyChanges], Tooltip2);
    return Tooltip2;
  }(Component)
);

// node_modules/@syncfusion/ej2-popups/src/spinner/spinner.js
var globalTimeOut = {};
var DEFT_MAT_WIDTH = 30;
var DEFT_MAT3_WIDTH = 30;
var DEFT_FAB_WIDTH = 30;
var DEFT_FLUENT_WIDTH = 30;
var DEFT_FLUENT2_WIDTH = 30;
var DEFT_BOOT_WIDTH = 30;
var DEFT_BOOT4_WIDTH = 36;
var DEFT_BOOT5_WIDTH = 36;
var CLS_SHOWSPIN = "e-spin-show";
var CLS_HIDESPIN = "e-spin-hide";
var CLS_MATERIALSPIN = "e-spin-material";
var CLS_MATERIAL3SPIN = "e-spin-material3";
var CLS_TAILWIND3SPIN = "e-spin-tailwind3";
var CLS_FABRICSPIN = "e-spin-fabric";
var CLS_FLUENTSPIN = "e-spin-fluent";
var CLS_FLUENT2SPIN = "e-spin-fluent2";
var CLS_TAILWINDSPIN = "e-spin-tailwind";
var CLS_BOOTSPIN = "e-spin-bootstrap";
var CLS_BOOT4SPIN = "e-spin-bootstrap4";
var CLS_BOOT5SPIN = "e-spin-bootstrap5";
var CLS_HIGHCONTRASTSPIN = "e-spin-high-contrast";
var CLS_SPINWRAP = "e-spinner-pane";
var CLS_SPININWRAP = "e-spinner-inner";
var CLS_SPINCIRCLE = "e-path-circle";
var CLS_SPINARC = "e-path-arc";
var CLS_SPINLABEL = "e-spin-label";
var CLS_SPINTEMPLATE = "e-spin-template";
var spinTemplate = null;
var spinCSSClass = null;
function createSpinner(args, internalCreateElement) {
  var _a;
  if (!args.target) {
    return;
  }
  var radius;
  var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;
  var container = create_spinner_container(args.target, makeElement);
  if (!isNullOrUndefined(args.cssClass)) {
    var classNames5 = args.cssClass.split(" ").filter(function(className) {
      return className.trim() !== "";
    });
    (_a = container.wrap.classList).add.apply(_a, classNames5);
  }
  if (!isNullOrUndefined(args.template) || !isNullOrUndefined(spinTemplate)) {
    var template = !isNullOrUndefined(args.template) ? args.template : spinTemplate;
    container.wrap.classList.add(CLS_SPINTEMPLATE);
    replaceContent(container.wrap, template, spinCSSClass);
  } else {
    var theme = !isNullOrUndefined(args.type) ? args.type : getTheme(container.wrap);
    var width = !isNullOrUndefined(args.width) ? args.width : void 0;
    radius = calculateRadius(width, theme);
    setTheme(theme, container.wrap, radius, makeElement);
    if (!isNullOrUndefined(args.label)) {
      createLabel(container.inner_wrap, args.label, makeElement);
    }
  }
  container.wrap.classList.add(CLS_HIDESPIN);
  container = null;
}
function createLabel(container, label, makeElement) {
  var labelEle = makeElement("div", {});
  labelEle.classList.add(CLS_SPINLABEL);
  labelEle.innerHTML = label;
  container.appendChild(labelEle);
  return labelEle;
}
function createMaterialSpinner(container, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = {
    timeOut: 0,
    type: "Material",
    radius
  };
  create_material_element(container, uniqueID, makeElement, CLS_MATERIALSPIN);
  mat_calculate_attributes(radius, container, "Material", CLS_MATERIALSPIN);
}
function createTailwind3Spinner(container, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = {
    timeOut: 0,
    type: "Tailwind3",
    radius
  };
  create_material_element(container, uniqueID, makeElement, CLS_TAILWIND3SPIN);
  mat_calculate_attributes(radius, container, "Tailwind3", CLS_TAILWIND3SPIN);
}
function createMaterial3Spinner(container, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = {
    timeOut: 0,
    type: "Material3",
    radius
  };
  create_material_element(container, uniqueID, makeElement, CLS_MATERIAL3SPIN);
  mat_calculate_attributes(radius, container, "Material3", CLS_MATERIAL3SPIN);
}
function createBootstrap4Spinner(container, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = {
    timeOut: 0,
    type: "Bootstrap4",
    radius
  };
  create_material_element(container, uniqueID, makeElement, CLS_BOOT4SPIN);
  mat_calculate_attributes(radius, container, "Bootstrap4", CLS_BOOT4SPIN);
}
function createBootstrap5Spinner(container, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = {
    timeOut: 0,
    type: "Bootstrap5",
    radius
  };
  create_material_element(container, uniqueID, makeElement, CLS_BOOT5SPIN);
  mat_calculate_attributes(radius, container, "Bootstrap5", CLS_BOOT5SPIN);
}
function startMatAnimate(container, uniqueID, radius) {
  var globalObject = {};
  var timeOutVar = 0;
  globalTimeOut["" + uniqueID].timeOut = 0;
  globalObject["" + uniqueID] = globalVariables(uniqueID, radius, 0, 0);
  var spinnerInfo = {
    uniqueID,
    container,
    globalInfo: globalObject,
    timeOutVar
  };
  animateMaterial(spinnerInfo);
}
function createFabricSpinner(container, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = {
    timeOut: 0,
    type: "Fabric",
    radius
  };
  create_fabric_element(container, uniqueID, CLS_FABRICSPIN, makeElement);
  fb_calculate_attributes(radius, container, CLS_FABRICSPIN);
}
function createFluentSpinner(container, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = {
    timeOut: 0,
    type: "Fluent",
    radius
  };
  create_fabric_element(container, uniqueID, CLS_FLUENTSPIN, makeElement);
  fb_calculate_attributes(radius, container, CLS_FLUENTSPIN);
}
function createFluent2Spinner(container, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = {
    timeOut: 0,
    type: "Fluent2",
    radius
  };
  create_fabric_element(container, uniqueID, CLS_FLUENT2SPIN, makeElement);
  fb_calculate_attributes(radius, container, CLS_FLUENT2SPIN);
}
function createTailwindSpinner(container, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = {
    timeOut: 0,
    type: "Tailwind",
    radius
  };
  create_fabric_element(container, uniqueID, CLS_TAILWINDSPIN, makeElement);
  fb_calculate_attributes(radius, container, CLS_TAILWINDSPIN);
}
function createHighContrastSpinner(container, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = {
    timeOut: 0,
    type: "HighContrast",
    radius
  };
  create_fabric_element(container, uniqueID, CLS_HIGHCONTRASTSPIN, makeElement);
  fb_calculate_attributes(radius, container, CLS_HIGHCONTRASTSPIN);
}
function getTheme(container) {
  var theme = window.getComputedStyle(container, ":after").getPropertyValue("content");
  return theme.replace(/['"]+/g, "");
}
function setTheme(theme, container, radius, makeElement) {
  var innerContainer = container.querySelector("." + CLS_SPININWRAP);
  var svg = innerContainer.querySelector("svg");
  if (!isNullOrUndefined(svg)) {
    innerContainer.removeChild(svg);
  }
  switch (theme) {
    case "Material":
      createMaterialSpinner(innerContainer, radius, makeElement);
      break;
    case "Material3":
      createMaterial3Spinner(innerContainer, radius, makeElement);
      break;
    case "Fabric":
      createFabricSpinner(innerContainer, radius, makeElement);
      break;
    case "Fluent":
      createFluentSpinner(innerContainer, radius, makeElement);
      break;
    case "Fluent2":
      createFluent2Spinner(innerContainer, radius, makeElement);
      break;
    case "Bootstrap":
      createBootstrapSpinner(innerContainer, radius, makeElement);
      break;
    case "HighContrast":
      createHighContrastSpinner(innerContainer, radius, makeElement);
      break;
    case "Bootstrap4":
      createBootstrap4Spinner(innerContainer, radius, makeElement);
      break;
    case "Bootstrap5":
      createBootstrap5Spinner(innerContainer, radius, makeElement);
      break;
    case "Tailwind":
    case "Tailwind-dark":
      createTailwindSpinner(innerContainer, radius, makeElement);
      break;
    case "Tailwind3":
      createTailwind3Spinner(innerContainer, radius, makeElement);
      break;
  }
}
function createBootstrapSpinner(innerContainer, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = {
    timeOut: 0,
    type: "Bootstrap",
    radius
  };
  create_bootstrap_element(innerContainer, uniqueID, makeElement);
  boot_calculate_attributes(innerContainer, radius);
}
function create_bootstrap_element(innerContainer, uniqueID, makeElement) {
  var svgBoot = document.createElementNS("http://www.w3.org/2000/svg", "svg");
  var viewBoxValue = 64;
  var trans = 32;
  var defaultRadius = 2;
  svgBoot.setAttribute("id", uniqueID);
  svgBoot.setAttribute("class", CLS_BOOTSPIN);
  svgBoot.setAttribute("viewBox", "0 0 " + viewBoxValue + " " + viewBoxValue);
  innerContainer.insertBefore(svgBoot, innerContainer.firstChild);
  for (var item = 0; item <= 7; item++) {
    var bootCircle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
    bootCircle.setAttribute("class", CLS_SPINCIRCLE + "_" + item);
    bootCircle.setAttribute("r", defaultRadius + "");
    bootCircle.setAttribute("transform", "translate(" + trans + "," + trans + ")");
    svgBoot.appendChild(bootCircle);
  }
}
function boot_calculate_attributes(innerContainer, radius) {
  var svg = innerContainer.querySelector("svg.e-spin-bootstrap");
  var x = 0;
  var y = 0;
  var rad = 24;
  svg.style.width = svg.style.height = radius + "px";
  var startArc = 90;
  for (var item = 0; item <= 7; item++) {
    var start = defineArcPoints(x, y, rad, startArc);
    var circleEle = svg.querySelector("." + CLS_SPINCIRCLE + "_" + item);
    circleEle.setAttribute("cx", start.x + "");
    circleEle.setAttribute("cy", start.y + "");
    startArc = startArc >= 360 ? 0 : startArc;
    startArc = startArc + 45;
  }
}
function generateSeries(begin, stop) {
  var series = [];
  var start = begin;
  var end = stop;
  var increment = false;
  var count = 1;
  formSeries(start);
  function formSeries(i) {
    series.push(i);
    if (i !== end || count === 1) {
      if (i <= start && i > 1 && !increment) {
        i = parseFloat((i - 0.2).toFixed(2));
      } else if (i === 1) {
        i = 7;
        i = parseFloat((i + 0.2).toFixed(2));
        increment = true;
      } else if (i < 8 && increment) {
        i = parseFloat((i + 0.2).toFixed(2));
        if (i === 8) {
          increment = false;
        }
      } else if (i <= 8 && !increment) {
        i = parseFloat((i - 0.2).toFixed(2));
      }
      ++count;
      formSeries(i);
    }
  }
  return series;
}
function animateBootstrap(innerContainer) {
  var svg = innerContainer.querySelector("svg.e-spin-bootstrap");
  var id = svg.getAttribute("id");
  for (var i = 1; i <= 8; i++) {
    var circleEle = innerContainer.getElementsByClassName("e-path-circle_" + (i === 8 ? 0 : i))[0];
    rotation(circleEle, i, i, generateSeries(i, i), id);
  }
  function rotation(circle, start, end, series, id2) {
    var count = 0;
    boot_animate(start);
    function boot_animate(radius) {
      if (globalTimeOut["" + id2].isAnimate) {
        ++count;
        circle.setAttribute("r", radius + "");
        if (count >= series.length) {
          count = 0;
        }
        globalTimeOut[id2].timeOut = setTimeout(boot_animate.bind(null, series[count]), 18);
      }
    }
  }
}
function replaceContent(container, template, cssClass2) {
  if (!isNullOrUndefined(cssClass2)) {
    container.classList.add(cssClass2);
  }
  var inner = container.querySelector(".e-spinner-inner");
  inner.innerHTML = template;
}
function calculateRadius(width, theme) {
  var defaultSize;
  switch (theme) {
    case "Material":
      defaultSize = DEFT_MAT_WIDTH;
      break;
    case "Material3":
      defaultSize = DEFT_MAT3_WIDTH;
      break;
    case "Fabric":
      defaultSize = DEFT_FAB_WIDTH;
      break;
    case "Tailwind":
    case "Tailwind-dark":
    case "Tailwind3":
      defaultSize = DEFT_FAB_WIDTH;
      break;
    case "Fluent":
      defaultSize = DEFT_FLUENT_WIDTH;
      break;
    case "Fluent2":
      defaultSize = DEFT_FLUENT2_WIDTH;
      break;
    case "Bootstrap4":
      defaultSize = DEFT_BOOT4_WIDTH;
      break;
    case "Bootstrap5":
      defaultSize = DEFT_BOOT5_WIDTH;
      break;
    default:
      defaultSize = DEFT_BOOT_WIDTH;
  }
  width = width ? parseFloat(width + "") : defaultSize;
  return theme === "Bootstrap" ? width : width / 2;
}
function globalVariables(id, radius, count, previousId) {
  return {
    radius,
    count,
    previousId
  };
}
function random_generator() {
  var random = "";
  var combine = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  for (var i = 0; i < 5; i++) {
    random += combine.charAt(Math.floor(Math.random() * combine.length));
  }
  return random;
}
function create_fabric_element(innerCon, uniqueID, themeClass, makeElement) {
  var svgFabric = document.createElementNS("http://www.w3.org/2000/svg", "svg");
  svgFabric.setAttribute("id", uniqueID);
  svgFabric.setAttribute("class", themeClass);
  var fabricCirclePath = document.createElementNS("http://www.w3.org/2000/svg", "path");
  fabricCirclePath.setAttribute("class", CLS_SPINCIRCLE);
  var fabricCircleArc = document.createElementNS("http://www.w3.org/2000/svg", "path");
  fabricCircleArc.setAttribute("class", CLS_SPINARC);
  innerCon.insertBefore(svgFabric, innerCon.firstChild);
  svgFabric.appendChild(fabricCirclePath);
  svgFabric.appendChild(fabricCircleArc);
}
function create_material_element(innerContainer, uniqueID, makeElement, cls) {
  var svgMaterial = document.createElementNS("http://www.w3.org/2000/svg", "svg");
  var matCirclePath = document.createElementNS("http://www.w3.org/2000/svg", "path");
  svgMaterial.setAttribute("class", cls);
  svgMaterial.setAttribute("id", uniqueID);
  matCirclePath.setAttribute("class", CLS_SPINCIRCLE);
  innerContainer.insertBefore(svgMaterial, innerContainer.firstChild);
  svgMaterial.appendChild(matCirclePath);
}
function create_spinner_container(target, makeElement) {
  var spinnerContainer = makeElement("div", {});
  var spinnerInnerContainer = makeElement("div", {});
  spinnerContainer.classList.add(CLS_SPINWRAP);
  spinnerInnerContainer.classList.add(CLS_SPININWRAP);
  spinnerInnerContainer.setAttribute("aria-disabled", "true");
  target.appendChild(spinnerContainer);
  spinnerContainer.appendChild(spinnerInnerContainer);
  return {
    wrap: spinnerContainer,
    inner_wrap: spinnerInnerContainer
  };
}
function animateMaterial(spinnerInfo) {
  var start = 1;
  var end = 149;
  var duration = 1333;
  var max = 75;
  createCircle(start, end, easeAnimation, duration, spinnerInfo.globalInfo[spinnerInfo.uniqueID].count, max, spinnerInfo);
  spinnerInfo.globalInfo[spinnerInfo.uniqueID].count = ++spinnerInfo.globalInfo[spinnerInfo.uniqueID].count % 4;
}
function createCircle(start, end, easing, duration, count, max, spinnerInfo) {
  var id = ++spinnerInfo.globalInfo[spinnerInfo.uniqueID].previousId;
  var startTime = (/* @__PURE__ */ new Date()).getTime();
  var change = end - start;
  var diameter = getSize(spinnerInfo.globalInfo[spinnerInfo.uniqueID].radius * 2 + "");
  var strokeSize = getStrokeSize(diameter);
  var rotate = -90 * (spinnerInfo.globalInfo[spinnerInfo.uniqueID].count || 0);
  mat_animation(spinnerInfo);
  function mat_animation(spinnerInfo2) {
    var currentTime = Math.max(0, Math.min((/* @__PURE__ */ new Date()).getTime() - startTime, duration));
    updatePath(easing(currentTime, start, change, duration), spinnerInfo2.container);
    if (id === spinnerInfo2.globalInfo[spinnerInfo2.uniqueID].previousId && currentTime < duration) {
      globalTimeOut[spinnerInfo2.uniqueID].timeOut = setTimeout(mat_animation.bind(null, spinnerInfo2), 1);
    } else {
      animateMaterial(spinnerInfo2);
    }
  }
  function updatePath(value, container) {
    if (!isNullOrUndefined(container.querySelector("svg.e-spin-material")) || !isNullOrUndefined(container.querySelector("svg.e-spin-material3")) || !isNullOrUndefined(container.querySelector("svg.e-spin-tailwind3"))) {
      var svg = void 0;
      if (!isNullOrUndefined(container.querySelector("svg.e-spin-material")) && !isNullOrUndefined(container.querySelector("svg.e-spin-material").querySelector("path.e-path-circle"))) {
        svg = container.querySelector("svg.e-spin-material");
      } else if (!isNullOrUndefined(container.querySelector("svg.e-spin-material3")) && !isNullOrUndefined(container.querySelector("svg.e-spin-material3").querySelector("path.e-path-circle"))) {
        svg = container.querySelector("svg.e-spin-material3");
      } else if (!isNullOrUndefined(container.querySelector("svg.e-spin-tailwind3")) && !isNullOrUndefined(container.querySelector("svg.e-spin-tailwind3").querySelector("path.e-path-circle"))) {
        svg = container.querySelector("svg.e-spin-tailwind3");
      }
      if (!isNullOrUndefined(svg)) {
        var path = svg.querySelector("path.e-path-circle");
        path.setAttribute("stroke-dashoffset", getDashOffset(diameter, strokeSize, value, max) + "");
        path.setAttribute("transform", "rotate(" + rotate + " " + diameter / 2 + " " + diameter / 2 + ")");
      }
    }
  }
}
function mat_calculate_attributes(radius, container, type, cls) {
  var diameter = radius * 2;
  var svg = container.querySelector("svg." + cls);
  var path = svg.querySelector("path.e-path-circle");
  var strokeSize = getStrokeSize(diameter);
  var transformOrigin = diameter / 2 + "px";
  svg.setAttribute("viewBox", "0 0 " + diameter + " " + diameter);
  svg.style.width = svg.style.height = diameter + "px";
  svg.style.transformOrigin = transformOrigin + " " + transformOrigin + " " + transformOrigin;
  path.setAttribute("d", drawArc(diameter, strokeSize));
  if (type === "Material" || type === "Material3" || type === "Fluent2" || type === "Tailwind3") {
    path.setAttribute("stroke-width", strokeSize + "");
    path.setAttribute("stroke-dasharray", (diameter - strokeSize) * Math.PI * 0.75 + "");
    path.setAttribute("stroke-dashoffset", getDashOffset(diameter, strokeSize, 1, 75) + "");
  }
}
function getSize(value) {
  var parsed = parseFloat(value);
  return parsed;
}
function drawArc(diameter, strokeSize) {
  var radius = diameter / 2;
  var offset = strokeSize / 2;
  return "M" + radius + "," + offset + "A" + (radius - offset) + "," + (radius - offset) + " 0 1 1 " + offset + "," + radius;
}
function getStrokeSize(diameter) {
  return 10 / 100 * diameter;
}
function getDashOffset(diameter, strokeSize, value, max) {
  return (diameter - strokeSize) * Math.PI * (3 * max / 100 - value / 100);
}
function easeAnimation(current, start, change, duration) {
  var timestamp = (current /= duration) * current;
  var timecount = timestamp * current;
  return start + change * (6 * timecount * timestamp + -15 * timestamp * timestamp + 10 * timecount);
}
function fb_calculate_attributes(radius, innerConainer, trgClass) {
  var centerX = radius;
  var centerY = radius;
  var diameter = radius * 2;
  var startArc = 315;
  var endArc = 45;
  var svg = innerConainer.querySelector("." + trgClass);
  var circle = svg.querySelector(".e-path-circle");
  var path = svg.querySelector(".e-path-arc");
  var transformOrigin = diameter / 2 + "px";
  circle.setAttribute("d", defineCircle(centerX, centerY, radius));
  path.setAttribute("d", defineArc(centerX, centerY, radius, startArc, endArc));
  svg.setAttribute("viewBox", "0 0 " + diameter + " " + diameter);
  svg.style.transformOrigin = transformOrigin + " " + transformOrigin + " " + transformOrigin;
  svg.style.width = svg.style.height = diameter + "px";
}
function defineArcPoints(centerX, centerY, radius, angle) {
  var radians = (angle - 90) * Math.PI / 180;
  return {
    x: centerX + radius * Math.cos(radians),
    y: centerY + radius * Math.sin(radians)
  };
}
function defineArc(x, y, radius, startArc, endArc) {
  var start = defineArcPoints(x, y, radius, endArc);
  var end = defineArcPoints(x, y, radius, startArc);
  var d = ["M", start.x, start.y, "A", radius, radius, 0, 0, 0, end.x, end.y].join(" ");
  return d;
}
function defineCircle(x, y, radius) {
  var d = ["M", x, y, "m", -radius, 0, "a", radius, radius, 0, 1, 0, radius * 2, 0, "a", radius, radius, 0, 1, 0, -radius * 2, 0].join(" ");
  return d;
}
function showSpinner(container) {
  showHideSpinner(container, false);
  container = null;
}
function showHideSpinner(container, isHide) {
  var spinnerWrap;
  if (container) {
    if (container.classList.contains(CLS_SPINWRAP)) {
      spinnerWrap = container;
    } else {
      var spinWrapCollection = container.querySelectorAll("." + CLS_SPINWRAP);
      if (Browser.isIE) {
        for (var i = 0; i < spinWrapCollection.length; i++) {
          if (spinWrapCollection[i].parentElement && spinWrapCollection[i].parentElement === container) {
            spinnerWrap = spinWrapCollection[i];
            break;
          }
        }
      } else {
        spinnerWrap = Array.from(spinWrapCollection).find(function(wrap) {
          return wrap.parentElement === container;
        }) || null;
      }
    }
  }
  if (container && spinnerWrap) {
    var inner = spinnerWrap.querySelector("." + CLS_SPININWRAP);
    var spinCheck = isHide ? !spinnerWrap.classList.contains(CLS_SPINTEMPLATE) && !spinnerWrap.classList.contains(CLS_HIDESPIN) : !spinnerWrap.classList.contains(CLS_SPINTEMPLATE) && !spinnerWrap.classList.contains(CLS_SHOWSPIN);
    if (spinCheck) {
      var svgEle = spinnerWrap.querySelector("svg");
      if (isNullOrUndefined(svgEle)) {
        return;
      }
      var id = svgEle.getAttribute("id");
      globalTimeOut["" + id].isAnimate = !isHide;
      switch (globalTimeOut["" + id].type) {
        case "Material":
        case "Material3":
        case "Tailwind3":
          if (isHide) {
            clearTimeout(globalTimeOut[id].timeOut);
          } else {
            startMatAnimate(inner, id, globalTimeOut[id].radius);
          }
          break;
        case "Bootstrap":
          if (isHide) {
            clearTimeout(globalTimeOut[id].timeOut);
          } else {
            animateBootstrap(inner);
          }
          break;
      }
    }
    if (isHide) {
      classList(spinnerWrap, [CLS_HIDESPIN], [CLS_SHOWSPIN]);
    } else {
      classList(spinnerWrap, [CLS_SHOWSPIN], [CLS_HIDESPIN]);
    }
    container = null;
  }
}
function hideSpinner(container) {
  showHideSpinner(container, true);
  container = null;
}

// node_modules/@syncfusion/ej2-inputs/src/input/input.js
var CLASSNAMES2 = {
  RTL: "e-rtl",
  DISABLE: "e-disabled",
  INPUT: "e-input",
  TEXTAREA: "e-multi-line-input",
  INPUTGROUP: "e-input-group",
  FLOATINPUT: "e-float-input",
  FLOATLINE: "e-float-line",
  FLOATTEXT: "e-float-text",
  FLOATTEXTCONTENT: "e-float-text-content",
  CLEARICON: "e-clear-icon",
  CLEARICONHIDE: "e-clear-icon-hide",
  LABELTOP: "e-label-top",
  LABELBOTTOM: "e-label-bottom",
  NOFLOATLABEL: "e-no-float-label",
  INPUTCUSTOMTAG: "e-input-custom-tag",
  FLOATCUSTOMTAG: "e-float-custom-tag"
};
var containerAttributes = ["title", "style", "class"];
var TEXTBOX_FOCUS = "e-input-focus";
var Input;
(function(Input2) {
  var privateInputObj = {
    container: null,
    buttons: [],
    clearButton: null
  };
  var floatType;
  var isBindClearAction = true;
  function createInput(args, internalCreateElement) {
    args.element.__eventHandlers = {};
    var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;
    var inputObject = {
      container: null,
      buttons: [],
      clearButton: null
    };
    floatType = args.floatLabelType;
    isBindClearAction = args.bindClearAction;
    if (isNullOrUndefined(args.floatLabelType) || args.floatLabelType === "Never") {
      inputObject.container = createInputContainer(args, CLASSNAMES2.INPUTGROUP, CLASSNAMES2.INPUTCUSTOMTAG, "span", makeElement);
      args.element.parentNode.insertBefore(inputObject.container, args.element);
      addClass([args.element], CLASSNAMES2.INPUT);
      inputObject.container.appendChild(args.element);
    } else {
      createFloatingInput(args, inputObject, makeElement);
    }
    bindInitialEvent(args);
    if (!isNullOrUndefined(args.properties) && !isNullOrUndefined(args.properties.showClearButton) && args.properties.showClearButton) {
      setClearButton(args.properties.showClearButton, args.element, inputObject, true, makeElement);
      inputObject.clearButton.setAttribute("role", "button");
      if (inputObject.container.classList.contains(CLASSNAMES2.FLOATINPUT)) {
        addClass([inputObject.container], CLASSNAMES2.INPUTGROUP);
      }
    }
    if (!isNullOrUndefined(args.buttons)) {
      for (var i = 0; i < args.buttons.length; i++) {
        inputObject.buttons.push(appendSpan(args.buttons[i], inputObject.container, makeElement));
      }
    }
    if (!isNullOrUndefined(args.element) && args.element.tagName === "TEXTAREA") {
      addClass([inputObject.container], CLASSNAMES2.TEXTAREA);
    }
    validateInputType(inputObject.container, args.element);
    inputObject = setPropertyValue(args, inputObject);
    createSpanElement(inputObject.container, makeElement);
    privateInputObj = inputObject;
    return inputObject;
  }
  Input2.createInput = createInput;
  function bindFocusEventHandler(args) {
    var parent = getParentNode(args.element);
    if (parent.classList.contains("e-input-group") || parent.classList.contains("e-outline") || parent.classList.contains("e-filled")) {
      parent.classList.add("e-input-focus");
    }
    if (args.floatLabelType !== "Never") {
      setTimeout(function() {
        Input2.calculateWidth(args.element, parent);
      }, 80);
    }
  }
  function bindBlurEventHandler(args) {
    var parent = getParentNode(args.element);
    if (parent.classList.contains("e-input-group") || parent.classList.contains("e-outline") || parent.classList.contains("e-filled")) {
      parent.classList.remove("e-input-focus");
    }
    if (args.floatLabelType !== "Never") {
      setTimeout(function() {
        Input2.calculateWidth(args.element, parent);
      }, 80);
    }
  }
  function bindInputEventHandler(args) {
    checkInputValue(args.floatLabelType, args.element);
  }
  function bindInitialEvent(args) {
    checkInputValue(args.floatLabelType, args.element);
    var focusHandler2 = function() {
      return bindFocusEventHandler(args);
    };
    var blurHandler2 = function() {
      return bindBlurEventHandler(args);
    };
    var inputHandler2 = function() {
      return bindInputEventHandler(args);
    };
    args.element.addEventListener("focus", focusHandler2);
    args.element.addEventListener("blur", blurHandler2);
    args.element.addEventListener("input", inputHandler2);
    args.element.__eventHandlers["inputFocusHandler"] = {
      focusHandler: focusHandler2
    };
    args.element.__eventHandlers["inputBlurHandler"] = {
      blurHandler: blurHandler2
    };
    args.element.__eventHandlers["inputHandler"] = {
      inputHandler: inputHandler2
    };
  }
  Input2.bindInitialEvent = bindInitialEvent;
  function unbindInitialEvent(args) {
    if (!isNullOrUndefined(args.element)) {
      if (!isNullOrUndefined(args.element.__eventHandlers)) {
        if (!isNullOrUndefined(args.element.__eventHandlers["inputFocusHandler"]) && !isNullOrUndefined(args.element.__eventHandlers["inputBlurHandler"]) && !isNullOrUndefined(args.element.__eventHandlers["inputHandler"])) {
          var focusHandler_1 = args.element.__eventHandlers["inputFocusHandler"].focusHandler;
          var blurHandler_1 = args.element.__eventHandlers["inputBlurHandler"].blurHandler;
          var inputHandler_1 = args.element.__eventHandlers["inputHandler"].inputHandler;
          args.element.removeEventListener("focus", focusHandler_1);
          args.element.removeEventListener("blur", blurHandler_1);
          args.element.removeEventListener("input", inputHandler_1);
          delete args.element.__eventHandlers["inputFocusHandler"];
          delete args.element.__eventHandlers["inputBlurHandler"];
          delete args.element.__eventHandlers["inputHandler"];
        }
      }
    }
  }
  function checkInputValue(floatLabelType, inputElement) {
    var inputValue = inputElement.value;
    var inputParent = inputElement.parentElement;
    var grandParent = inputParent && inputParent.parentElement;
    if (inputValue !== "" && !isNullOrUndefined(inputValue)) {
      if (inputParent && inputParent.classList.contains("e-input-group")) {
        inputParent.classList.add("e-valid-input");
      } else if (grandParent && grandParent.classList.contains("e-input-group")) {
        grandParent.classList.add("e-valid-input");
      }
    } else if (floatLabelType !== "Always") {
      if (inputParent && inputParent.classList.contains("e-input-group")) {
        inputParent.classList.remove("e-valid-input");
      } else if (grandParent && grandParent.classList.contains("e-input-group")) {
        grandParent.classList.remove("e-valid-input");
      }
    }
  }
  function _focusFn() {
    var label = getParentNode(this).getElementsByClassName("e-float-text")[0];
    if (!isNullOrUndefined(label)) {
      addClass([label], CLASSNAMES2.LABELTOP);
      if (label.classList.contains(CLASSNAMES2.LABELBOTTOM)) {
        removeClass([label], CLASSNAMES2.LABELBOTTOM);
      }
    }
  }
  function _blurFn() {
    var parent = getParentNode(this);
    if (parent.getElementsByTagName("textarea")[0] ? parent.getElementsByTagName("textarea")[0].value === "" : parent.getElementsByTagName("input")[0].value === "") {
      var label = parent.getElementsByClassName("e-float-text")[0];
      if (!isNullOrUndefined(label)) {
        if (label.classList.contains(CLASSNAMES2.LABELTOP)) {
          removeClass([label], CLASSNAMES2.LABELTOP);
        }
        addClass([label], CLASSNAMES2.LABELBOTTOM);
      }
    }
  }
  function wireFloatingEvents(element2) {
    element2.addEventListener("focus", _focusFn);
    element2.addEventListener("blur", _blurFn);
  }
  Input2.wireFloatingEvents = wireFloatingEvents;
  function unwireFloatingEvents(element2) {
    if (!isNullOrUndefined(element2)) {
      element2.removeEventListener("focus", _focusFn);
      element2.removeEventListener("blur", _blurFn);
    }
  }
  function inputEventHandler(args) {
    validateLabel(args.element, args.floatLabelType);
  }
  function blurEventHandler(args) {
    validateLabel(args.element, args.floatLabelType);
  }
  function createFloatingInput(args, inputObject, internalCreateElement) {
    var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;
    if (args.floatLabelType === "Auto") {
      wireFloatingEvents(args.element);
    }
    if (isNullOrUndefined(inputObject.container)) {
      inputObject.container = createInputContainer(args, CLASSNAMES2.FLOATINPUT, CLASSNAMES2.FLOATCUSTOMTAG, "div", makeElement);
      inputObject.container.classList.add(CLASSNAMES2.INPUTGROUP);
      if (args.element.parentNode) {
        args.element.parentNode.insertBefore(inputObject.container, args.element);
      }
    } else {
      if (!isNullOrUndefined(args.customTag)) {
        inputObject.container.classList.add(CLASSNAMES2.FLOATCUSTOMTAG);
      }
      inputObject.container.classList.add(CLASSNAMES2.FLOATINPUT);
    }
    var floatLinelement = makeElement("span", {
      className: CLASSNAMES2.FLOATLINE
    });
    var floatLabelElement = makeElement("label", {
      className: CLASSNAMES2.FLOATTEXT
    });
    if (!isNullOrUndefined(args.element.id) && args.element.id !== "") {
      floatLabelElement.id = "label_" + args.element.id.replace(/ /g, "_");
      attributes(args.element, {
        "aria-labelledby": floatLabelElement.id
      });
    }
    if (!isNullOrUndefined(args.element.placeholder) && args.element.placeholder !== "") {
      floatLabelElement.innerText = encodePlaceHolder(args.element.placeholder);
      args.element.removeAttribute("placeholder");
    }
    if (!isNullOrUndefined(args.properties) && !isNullOrUndefined(args.properties.placeholder) && args.properties.placeholder !== "") {
      floatLabelElement.innerText = encodePlaceHolder(args.properties.placeholder);
    }
    if (!floatLabelElement.innerText) {
      inputObject.container.classList.add(CLASSNAMES2.NOFLOATLABEL);
    }
    if (inputObject.container.classList.contains("e-float-icon-left")) {
      var inputWrap = inputObject.container.querySelector(".e-input-in-wrap");
      inputWrap.appendChild(args.element);
      inputWrap.appendChild(floatLinelement);
      inputWrap.appendChild(floatLabelElement);
    } else {
      inputObject.container.appendChild(args.element);
      inputObject.container.appendChild(floatLinelement);
      inputObject.container.appendChild(floatLabelElement);
    }
    updateLabelState(args.element.value, floatLabelElement);
    if (args.floatLabelType === "Always") {
      if (floatLabelElement.classList.contains(CLASSNAMES2.LABELBOTTOM)) {
        removeClass([floatLabelElement], CLASSNAMES2.LABELBOTTOM);
      }
      addClass([floatLabelElement], CLASSNAMES2.LABELTOP);
    }
    if (args.floatLabelType === "Auto") {
      var inputFloatHandler = function() {
        return inputEventHandler(args);
      };
      var blurFloatHandler = function() {
        return blurEventHandler(args);
      };
      args.element.addEventListener("input", inputFloatHandler);
      args.element.addEventListener("blur", blurFloatHandler);
      args.element.__eventHandlers["floatInputHandler"] = {
        inputFloatHandler
      };
      args.element.__eventHandlers["floatBlurHandler"] = {
        blurFloatHandler
      };
    } else {
      unWireFloatLabelEvents(args);
    }
    if (!isNullOrUndefined(args.element.getAttribute("id"))) {
      floatLabelElement.setAttribute("for", args.element.getAttribute("id"));
    }
  }
  function unWireFloatLabelEvents(args) {
    if (!isNullOrUndefined(args.element) && !isNullOrUndefined(args.element.__eventHandlers) && !isNullOrUndefined(args.element.__eventHandlers["floatInputHandler"]) && !isNullOrUndefined(args.element.__eventHandlers["floatBlurHandler"])) {
      var inputFloatHandler = args.element.__eventHandlers["floatInputHandler"].inputFloatHandler;
      var blurFloatHandler = args.element.__eventHandlers["floatBlurHandler"].blurFloatHandler;
      args.element.removeEventListener("input", inputFloatHandler);
      args.element.removeEventListener("blur", blurFloatHandler);
      delete args.element.__eventHandlers["floatInputHandler"];
      delete args.element.__eventHandlers["floatBlurHandler"];
    }
  }
  function checkFloatLabelType(type, container) {
    if (type === "Always" && container.classList.contains("e-outline")) {
      container.classList.add("e-valid-input");
    }
  }
  function setPropertyValue(args, inputObject) {
    if (!isNullOrUndefined(args.properties)) {
      for (var _i = 0, _a = Object.keys(args.properties); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "cssClass":
            setCssClass(args.properties.cssClass, [inputObject.container]);
            checkFloatLabelType(args.floatLabelType, inputObject.container);
            break;
          case "enabled":
            setEnabled(args.properties.enabled, args.element, args.floatLabelType, inputObject.container);
            break;
          case "enableRtl":
            setEnableRtl(args.properties.enableRtl, [inputObject.container]);
            break;
          case "placeholder":
            setPlaceholder(args.properties.placeholder, args.element);
            break;
          case "readonly":
            setReadonly(args.properties.readonly, args.element);
            break;
        }
      }
    }
    return inputObject;
  }
  function updateIconState(value, button, readonly) {
    if (!isNullOrUndefined(button)) {
      if (value && !readonly) {
        removeClass([button], CLASSNAMES2.CLEARICONHIDE);
      } else {
        addClass([button], CLASSNAMES2.CLEARICONHIDE);
      }
    }
  }
  function updateLabelState(value, label, element2) {
    if (element2 === void 0) {
      element2 = null;
    }
    if (value) {
      addClass([label], CLASSNAMES2.LABELTOP);
      if (label.classList.contains(CLASSNAMES2.LABELBOTTOM)) {
        removeClass([label], CLASSNAMES2.LABELBOTTOM);
      }
    } else {
      var isNotFocused = element2 != null ? element2 !== document.activeElement : true;
      if (isNotFocused) {
        if (label.classList.contains(CLASSNAMES2.LABELTOP)) {
          removeClass([label], CLASSNAMES2.LABELTOP);
        }
        addClass([label], CLASSNAMES2.LABELBOTTOM);
      }
    }
  }
  function getParentNode(element2) {
    var parentNode = isNullOrUndefined(element2.parentNode) ? element2 : element2.parentNode;
    if (parentNode && parentNode.classList.contains("e-input-in-wrap")) {
      parentNode = parentNode.parentNode;
    }
    return parentNode;
  }
  function createClearButton(element2, inputObject, initial, internalCreateElement) {
    var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;
    var button = makeElement("span", {
      className: CLASSNAMES2.CLEARICON
    });
    var container = inputObject.container;
    if (!isNullOrUndefined(initial)) {
      container.appendChild(button);
    } else {
      var baseElement = inputObject.container.classList.contains(CLASSNAMES2.FLOATINPUT) ? inputObject.container.querySelector("." + CLASSNAMES2.FLOATTEXT) : element2;
      baseElement.insertAdjacentElement("afterend", button);
    }
    addClass([button], CLASSNAMES2.CLEARICONHIDE);
    wireClearBtnEvents(element2, button, container);
    button.setAttribute("aria-label", "close");
    return button;
  }
  function clickHandler(event2, element2, button) {
    if (!(element2.classList.contains(CLASSNAMES2.DISABLE) || element2.readOnly)) {
      event2.preventDefault();
      if (element2 !== document.activeElement) {
        element2.focus();
      }
      element2.value = "";
      addClass([button], CLASSNAMES2.CLEARICONHIDE);
    }
  }
  function inputHandler(element2, button) {
    updateIconState(element2.value, button);
  }
  function focusHandler(element2, button) {
    updateIconState(element2.value, button, element2.readOnly);
  }
  function blurHandler(element2, button) {
    setTimeout(function() {
      if (!isNullOrUndefined(button)) {
        addClass([button], CLASSNAMES2.CLEARICONHIDE);
        button = !isNullOrUndefined(element2) && element2.classList.contains("e-combobox") ? null : button;
      }
    }, 200);
  }
  function wireClearBtnEvents(element2, button, container) {
    if (isBindClearAction === void 0 || isBindClearAction) {
      var clickHandlerEvent = function(e) {
        return clickHandler(e, element2, button);
      };
      button.addEventListener("click", clickHandlerEvent);
      element2.__eventHandlers["clearClickHandler"] = {
        clickHandlerEvent
      };
    }
    var inputHandlerEvent = function() {
      return inputHandler(element2, button);
    };
    var focusHandlerEvent = function() {
      return focusHandler(element2, button);
    };
    var blurHandlerEvent = function() {
      return blurHandler(element2, button);
    };
    element2.addEventListener("input", inputHandlerEvent);
    element2.addEventListener("focus", focusHandlerEvent);
    element2.addEventListener("blur", blurHandlerEvent);
    element2.__eventHandlers["clearInputHandler"] = {
      inputHandlerEvent
    };
    element2.__eventHandlers["clearFocusHandler"] = {
      focusHandlerEvent
    };
    element2.__eventHandlers["clearBlurHandler"] = {
      blurHandlerEvent
    };
  }
  Input2.wireClearBtnEvents = wireClearBtnEvents;
  function unWireClearBtnEvents(element2, button) {
    if (!isNullOrUndefined(element2) && !isNullOrUndefined(element2.__eventHandlers)) {
      if (!isNullOrUndefined(element2.__eventHandlers["clearClickHandler"])) {
        var clickHandlerEvent = element2.__eventHandlers["clearClickHandler"].clickHandlerEvent;
        if (isBindClearAction === void 0 || isBindClearAction) {
          if (!isNullOrUndefined(button)) {
            button.removeEventListener("click", clickHandlerEvent);
          }
        }
        delete element2.__eventHandlers["clearClickHandler"];
      }
      if (!isNullOrUndefined(element2.__eventHandlers["clearInputHandler"]) && !isNullOrUndefined(element2.__eventHandlers["clearFocusHandler"]) && !isNullOrUndefined(element2.__eventHandlers["clearBlurHandler"])) {
        var inputHandlerEvent = element2.__eventHandlers["clearInputHandler"].inputHandlerEvent;
        var focusHandlerEvent = element2.__eventHandlers["clearFocusHandler"].focusHandlerEvent;
        var blurHandlerEvent = element2.__eventHandlers["clearBlurHandler"].blurHandlerEvent;
        element2.removeEventListener("input", inputHandlerEvent);
        element2.removeEventListener("focus", focusHandlerEvent);
        element2.removeEventListener("blur", blurHandlerEvent);
        delete element2.__eventHandlers["clearInputHandler"];
        delete element2.__eventHandlers["clearFocusHandler"];
        delete element2.__eventHandlers["clearBlurHandler"];
      }
    }
  }
  function destroy3(args, button) {
    if (button === void 0) {
      button = null;
    }
    unbindInitialEvent(args);
    if (args.floatLabelType === "Auto") {
      unWireFloatLabelEvents(args);
    }
    if (args.properties.showClearButton) {
      unWireClearBtnEvents(args.element, button);
    }
    if (!isNullOrUndefined(args.buttons)) {
      _internalRipple(false, null, args.buttons);
    }
    unwireFloatingEvents(args.element);
    if (!isNullOrUndefined(args.element)) {
      delete args.element.__eventHandlers;
      if (args.element.classList.contains(CLASSNAMES2.INPUT)) {
        args.element.classList.remove(CLASSNAMES2.INPUT);
      }
    }
    privateInputObj = null;
  }
  Input2.destroy = destroy3;
  function validateLabel(element2, floatLabelType) {
    var parent = getParentNode(element2);
    if (parent.classList.contains(CLASSNAMES2.FLOATINPUT) && floatLabelType === "Auto") {
      var label = getParentNode(element2).getElementsByClassName("e-float-text")[0];
      updateLabelState(element2.value, label, element2);
    }
  }
  function createInputContainer(args, className, tagClass, tag, internalCreateElement) {
    var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;
    var container;
    if (!isNullOrUndefined(args.customTag)) {
      container = makeElement(args.customTag, {
        className
      });
      container.classList.add(tagClass);
    } else {
      container = makeElement(tag, {
        className
      });
    }
    container.classList.add("e-control-wrapper");
    return container;
  }
  function encodePlaceHolder(placeholder) {
    var result = "";
    if (!isNullOrUndefined(placeholder) && placeholder !== "") {
      var spanEle = document.createElement("span");
      spanEle.innerHTML = '<input  placeholder="' + placeholder + '"/>';
      var hiddenInput = spanEle.children[0];
      result = hiddenInput.placeholder;
    }
    return result;
  }
  function setValue2(value, element2, floatLabelType, clearButton) {
    element2.value = value;
    if (floatLabelType !== "Never") {
      calculateWidth(element2, element2.parentElement);
    }
    if (!isNullOrUndefined(floatLabelType) && floatLabelType === "Auto") {
      validateLabel(element2, floatLabelType);
    }
    if (!isNullOrUndefined(clearButton) && clearButton) {
      var parentElement = getParentNode(element2);
      if (!isNullOrUndefined(parentElement)) {
        var button = parentElement.getElementsByClassName(CLASSNAMES2.CLEARICON)[0];
        if (!isNullOrUndefined(button)) {
          if (element2.value && !isNullOrUndefined(parentElement) && parentElement.classList.contains("e-input-focus")) {
            removeClass([button], CLASSNAMES2.CLEARICONHIDE);
          } else {
            addClass([button], CLASSNAMES2.CLEARICONHIDE);
          }
        }
      }
    }
    checkInputValue(floatLabelType, element2);
  }
  Input2.setValue = setValue2;
  function setCssClass(cssClass2, elements, oldClass) {
    if (!isNullOrUndefined(oldClass) && oldClass !== "") {
      removeClass(elements, oldClass.split(" "));
    }
    if (!isNullOrUndefined(cssClass2) && cssClass2 !== "") {
      addClass(elements, cssClass2.split(" "));
    }
  }
  Input2.setCssClass = setCssClass;
  function calculateWidth(element2, container, moduleName) {
    if (moduleName !== "multiselect" && !_isElementVisible(element2)) {
      return;
    }
    var elementWidth = moduleName === "multiselect" ? element2 : element2.clientWidth - parseInt(getComputedStyle(element2, null).getPropertyValue("padding-left"), 10);
    if (!isNullOrUndefined(container) && !isNullOrUndefined(container.getElementsByClassName("e-float-text-content")[0])) {
      if (container.getElementsByClassName("e-float-text-content")[0].classList.contains("e-float-text-overflow")) {
        container.getElementsByClassName("e-float-text-content")[0].classList.remove("e-float-text-overflow");
      }
      if (elementWidth < container.getElementsByClassName("e-float-text-content")[0].clientWidth || elementWidth === container.getElementsByClassName("e-float-text-content")[0].clientWidth) {
        container.getElementsByClassName("e-float-text-content")[0].classList.add("e-float-text-overflow");
      }
    }
  }
  Input2.calculateWidth = calculateWidth;
  function setWidth2(width, container) {
    if (typeof width === "number") {
      container.style.width = formatUnit(width);
    } else if (typeof width === "string") {
      container.style.width = width.match(/px|%|em/) ? width : formatUnit(width);
    }
    calculateWidth(container.firstChild, container);
  }
  Input2.setWidth = setWidth2;
  function setPlaceholder(placeholder, element2) {
    placeholder = encodePlaceHolder(placeholder);
    var parentElement = getParentNode(element2);
    if (parentElement.classList.contains(CLASSNAMES2.FLOATINPUT)) {
      if (!isNullOrUndefined(placeholder) && placeholder !== "") {
        var floatTextContent = parentElement.getElementsByClassName("e-float-text-content")[0];
        if (floatTextContent && floatTextContent.children[0]) {
          floatTextContent.children[0].textContent = placeholder;
        } else {
          var floatText = parentElement.getElementsByClassName(CLASSNAMES2.FLOATTEXT)[0];
          if (!isNullOrUndefined(floatText)) {
            floatText.textContent = placeholder;
          }
        }
        parentElement.classList.remove(CLASSNAMES2.NOFLOATLABEL);
        element2.removeAttribute("placeholder");
      } else {
        parentElement.classList.add(CLASSNAMES2.NOFLOATLABEL);
        var floatTextContent = parentElement.getElementsByClassName("e-float-text-content")[0];
        if (floatTextContent) {
          floatTextContent.children[0].textContent = "";
        } else {
          var floatText = parentElement.getElementsByClassName(CLASSNAMES2.FLOATTEXT)[0];
          if (!isNullOrUndefined(floatText)) {
            floatText.textContent = "";
          }
        }
      }
    } else {
      if (!isNullOrUndefined(placeholder) && placeholder !== "") {
        attributes(element2, {
          "placeholder": placeholder
        });
      } else {
        element2.removeAttribute("placeholder");
      }
    }
  }
  Input2.setPlaceholder = setPlaceholder;
  function setReadonly(isReadonly, element2, floatLabelType) {
    if (isReadonly) {
      attributes(element2, {
        readonly: ""
      });
    } else {
      element2.removeAttribute("readonly");
    }
    if (!isNullOrUndefined(floatLabelType)) {
      validateLabel(element2, floatLabelType);
    }
  }
  Input2.setReadonly = setReadonly;
  function setEnableRtl(isRtl, elements) {
    if (isRtl) {
      addClass(elements, CLASSNAMES2.RTL);
    } else {
      removeClass(elements, CLASSNAMES2.RTL);
    }
  }
  Input2.setEnableRtl = setEnableRtl;
  function setEnabled(isEnable, element2, floatLabelType, inputContainer) {
    var disabledAttrs = {
      "disabled": "",
      "aria-disabled": "true"
    };
    var considerWrapper = isNullOrUndefined(inputContainer) ? false : true;
    if (isEnable) {
      element2.classList.remove(CLASSNAMES2.DISABLE);
      removeAttributes(disabledAttrs, element2);
      if (considerWrapper) {
        removeClass([inputContainer], CLASSNAMES2.DISABLE);
      }
    } else {
      element2.classList.add(CLASSNAMES2.DISABLE);
      addAttributes(disabledAttrs, element2);
      if (considerWrapper) {
        addClass([inputContainer], CLASSNAMES2.DISABLE);
      }
    }
    if (!isNullOrUndefined(floatLabelType)) {
      validateLabel(element2, floatLabelType);
    }
  }
  Input2.setEnabled = setEnabled;
  function setClearButton(isClear, element2, inputObject, initial, internalCreateElement) {
    var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;
    if (isClear) {
      inputObject.clearButton = createClearButton(element2, inputObject, initial, makeElement);
    } else {
      remove(inputObject.clearButton);
      inputObject.clearButton = null;
    }
  }
  Input2.setClearButton = setClearButton;
  function removeAttributes(attrs, element2) {
    for (var _i = 0, _a = Object.keys(attrs); _i < _a.length; _i++) {
      var key = _a[_i];
      var parentElement = getParentNode(element2);
      if (key === "disabled") {
        element2.classList.remove(CLASSNAMES2.DISABLE);
      }
      if (key === "disabled" && parentElement.classList.contains(CLASSNAMES2.INPUTGROUP)) {
        parentElement.classList.remove(CLASSNAMES2.DISABLE);
      }
      if (key === "placeholder" && parentElement.classList.contains(CLASSNAMES2.FLOATINPUT)) {
        parentElement.getElementsByClassName(CLASSNAMES2.FLOATTEXT)[0].textContent = "";
      } else {
        element2.removeAttribute(key);
      }
    }
  }
  Input2.removeAttributes = removeAttributes;
  function addAttributes(attrs, element2) {
    for (var _i = 0, _a = Object.keys(attrs); _i < _a.length; _i++) {
      var key = _a[_i];
      var parentElement = getParentNode(element2);
      if (key === "disabled") {
        element2.classList.add(CLASSNAMES2.DISABLE);
      }
      if (key === "disabled" && parentElement.classList.contains(CLASSNAMES2.INPUTGROUP)) {
        parentElement.classList.add(CLASSNAMES2.DISABLE);
      }
      if (key === "placeholder" && parentElement.classList.contains(CLASSNAMES2.FLOATINPUT)) {
        parentElement.getElementsByClassName(CLASSNAMES2.FLOATTEXT)[0].textContent = attrs["" + key];
      } else {
        element2.setAttribute(key, attrs["" + key]);
      }
    }
  }
  Input2.addAttributes = addAttributes;
  function removeFloating(input) {
    var container = input.container;
    if (!isNullOrUndefined(container) && container.classList.contains(CLASSNAMES2.FLOATINPUT)) {
      var inputEle = container.querySelector("textarea") ? container.querySelector("textarea") : container.querySelector("input");
      var placeholder = container.querySelector("." + CLASSNAMES2.FLOATTEXT).textContent;
      var clearButton = container.querySelector(".e-clear-icon") !== null;
      detach(container.querySelector("." + CLASSNAMES2.FLOATLINE));
      detach(container.querySelector("." + CLASSNAMES2.FLOATTEXT));
      classList(container, [CLASSNAMES2.INPUTGROUP], [CLASSNAMES2.FLOATINPUT]);
      unwireFloatingEvents(inputEle);
      attributes(inputEle, {
        "placeholder": placeholder
      });
      inputEle.classList.add(CLASSNAMES2.INPUT);
      if (!clearButton && inputEle.tagName === "INPUT") {
        inputEle.removeAttribute("required");
      }
    }
  }
  Input2.removeFloating = removeFloating;
  function addFloating(input, type, placeholder, internalCreateElement) {
    var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;
    var container = closest(input, "." + CLASSNAMES2.INPUTGROUP);
    floatType = type;
    var customTag = container.tagName;
    customTag = customTag !== "DIV" && customTag !== "SPAN" ? customTag : null;
    var args = {
      element: input,
      floatLabelType: type,
      customTag,
      properties: {
        placeholder
      }
    };
    if (type !== "Never") {
      var iconEle = container.querySelector(".e-clear-icon");
      var inputObj = {
        container
      };
      input.classList.remove(CLASSNAMES2.INPUT);
      createFloatingInput(args, inputObj, makeElement);
      createSpanElement(inputObj.container, makeElement);
      calculateWidth(args.element, inputObj.container);
      var isPrependIcon = container.classList.contains("e-float-icon-left");
      if (isNullOrUndefined(iconEle)) {
        if (isPrependIcon) {
          var inputWrap = container.querySelector(".e-input-in-wrap");
          iconEle = inputWrap.querySelector(".e-input-group-icon");
        } else {
          iconEle = container.querySelector(".e-input-group-icon");
        }
      }
      if (isNullOrUndefined(iconEle)) {
        if (isPrependIcon) {
          iconEle = container.querySelector(".e-input-group-icon");
        }
      } else {
        var floatLine = container.querySelector("." + CLASSNAMES2.FLOATLINE);
        var floatText = container.querySelector("." + CLASSNAMES2.FLOATTEXT);
        var wrapper = isPrependIcon ? container.querySelector(".e-input-in-wrap") : container;
        wrapper.insertBefore(input, iconEle);
        wrapper.insertBefore(floatLine, iconEle);
        wrapper.insertBefore(floatText, iconEle);
      }
    } else {
      unWireFloatLabelEvents(args);
    }
    checkFloatLabelType(type, input.parentElement);
  }
  Input2.addFloating = addFloating;
  function createSpanElement(inputObject, makeElement) {
    if (inputObject.classList.contains("e-outline") && inputObject.getElementsByClassName("e-float-text")[0]) {
      var labelSpanElement = makeElement("span", {
        className: CLASSNAMES2.FLOATTEXTCONTENT
      });
      labelSpanElement.innerHTML = inputObject.getElementsByClassName("e-float-text")[0].innerHTML;
      inputObject.getElementsByClassName("e-float-text")[0].innerHTML = "";
      inputObject.getElementsByClassName("e-float-text")[0].appendChild(labelSpanElement);
    }
  }
  Input2.createSpanElement = createSpanElement;
  function setRipple(isRipple, inputObj) {
    for (var i = 0; i < inputObj.length; i++) {
      _internalRipple(isRipple, inputObj[parseInt(i.toString(), 10)].container);
    }
  }
  Input2.setRipple = setRipple;
  function _internalRipple(isRipple, container, button) {
    var argsButton = [];
    argsButton.push(button);
    var buttons = isNullOrUndefined(button) ? container.querySelectorAll(".e-input-group-icon") : argsButton;
    if (isRipple && buttons.length > 0) {
      for (var index = 0; index < buttons.length; index++) {
        buttons[parseInt(index.toString(), 10)].addEventListener("mousedown", _onMouseDownRipple, false);
        buttons[parseInt(index.toString(), 10)].addEventListener("mouseup", _onMouseUpRipple, false);
      }
    } else if (buttons.length > 0) {
      for (var index = 0; index < buttons.length; index++) {
        buttons[parseInt(index.toString(), 10)].removeEventListener("mousedown", _onMouseDownRipple, this);
        buttons[parseInt(index.toString(), 10)].removeEventListener("mouseup", _onMouseUpRipple, this);
      }
    }
  }
  function _onMouseRipple(container, button) {
    if (!container.classList.contains("e-disabled") && !container.querySelector("input").readOnly) {
      button.classList.add("e-input-btn-ripple");
    }
  }
  function _isElementVisible(element2) {
    if (!element2) {
      return false;
    }
    var currentElement = element2;
    while (currentElement && currentElement !== document.body) {
      var style = window.getComputedStyle(currentElement);
      if (style.display === "none") {
        return false;
      }
      currentElement = currentElement.parentElement;
    }
    return true;
  }
  function _onMouseDownRipple() {
    var ele = this;
    var parentEle = this.parentElement;
    while (!parentEle.classList.contains("e-input-group")) {
      parentEle = parentEle.parentElement;
    }
    _onMouseRipple(parentEle, ele);
  }
  function _onMouseUpRipple() {
    var ele = this;
    setTimeout(function() {
      ele.classList.remove("e-input-btn-ripple");
    }, 500);
  }
  function createIconEle(iconClass, makeElement) {
    var button = makeElement("span", {
      className: iconClass
    });
    button.classList.add("e-input-group-icon");
    return button;
  }
  function addIcon(position, icons, container, input, internalCreate) {
    var result = typeof icons === "string" ? icons.split(",") : icons;
    if (position.toLowerCase() === "append") {
      for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {
        var icon = result_1[_i];
        appendSpan(icon, container, internalCreate);
      }
    } else {
      for (var _a = 0, result_2 = result; _a < result_2.length; _a++) {
        var icon = result_2[_a];
        prependSpan(icon, container, input, internalCreate);
      }
    }
    if (container.getElementsByClassName("e-input-group-icon")[0] && container.getElementsByClassName("e-float-text-overflow")[0]) {
      container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
    }
  }
  Input2.addIcon = addIcon;
  function prependSpan(iconClass, container, inputElement, internalCreateElement) {
    var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;
    var button = createIconEle(iconClass, makeElement);
    container.classList.add("e-float-icon-left");
    var innerWrapper = container.querySelector(".e-input-in-wrap");
    if (isNullOrUndefined(innerWrapper)) {
      innerWrapper = makeElement("span", {
        className: "e-input-in-wrap"
      });
      inputElement.parentNode.insertBefore(innerWrapper, inputElement);
      var result = container.querySelectorAll(inputElement.tagName + " ~ *");
      innerWrapper.appendChild(inputElement);
      for (var i = 0; i < result.length; i++) {
        var element2 = result[parseInt(i.toString(), 10)];
        var parentElement = innerWrapper.parentElement;
        if (!element2.classList.contains("e-float-line") || !(parentElement && parentElement.classList.contains("e-filled")) && parentElement) {
          innerWrapper.appendChild(element2);
        }
      }
    }
    innerWrapper.parentNode.insertBefore(button, innerWrapper);
    _internalRipple(true, container, button);
    return button;
  }
  Input2.prependSpan = prependSpan;
  function appendSpan(iconClass, container, internalCreateElement) {
    var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;
    var button = createIconEle(iconClass, makeElement);
    var wrap = container.classList.contains("e-float-icon-left") ? container.querySelector(".e-input-in-wrap") : container;
    wrap.appendChild(button);
    _internalRipple(true, container, button);
    return button;
  }
  Input2.appendSpan = appendSpan;
  function validateInputType(containerElement2, input) {
    if (input.type === "hidden") {
      containerElement2.classList.add("e-hidden");
    } else if (containerElement2.classList.contains("e-hidden")) {
      containerElement2.classList.remove("e-hidden");
    }
  }
  Input2.validateInputType = validateInputType;
  function updateHTMLAttributesToElement(htmlAttributes, element2) {
    if (!isNullOrUndefined(htmlAttributes)) {
      for (var _i = 0, _a = Object.keys(htmlAttributes); _i < _a.length; _i++) {
        var key = _a[_i];
        if (containerAttributes.indexOf(key) < 0) {
          element2.setAttribute(key, htmlAttributes["" + key]);
        }
      }
    }
  }
  Input2.updateHTMLAttributesToElement = updateHTMLAttributesToElement;
  function updateCssClass(newClass, oldClass, container) {
    setCssClass(getInputValidClassList(newClass), [container], getInputValidClassList(oldClass));
  }
  Input2.updateCssClass = updateCssClass;
  function getInputValidClassList(inputClassName) {
    var result = inputClassName;
    if (!isNullOrUndefined(inputClassName) && inputClassName !== "") {
      result = inputClassName.replace(/\s+/g, " ").trim();
    }
    return result;
  }
  Input2.getInputValidClassList = getInputValidClassList;
  function updateHTMLAttributesToWrapper(htmlAttributes, container) {
    if (!isNullOrUndefined(htmlAttributes)) {
      for (var _i = 0, _a = Object.keys(htmlAttributes); _i < _a.length; _i++) {
        var key = _a[_i];
        if (containerAttributes.indexOf(key) > -1) {
          if (key === "class") {
            var updatedClassValues = this.getInputValidClassList(htmlAttributes["" + key]);
            if (updatedClassValues !== "") {
              addClass([container], updatedClassValues.split(" "));
            }
          } else if (key === "style") {
            var setStyle = container.getAttribute(key);
            setStyle = !isNullOrUndefined(setStyle) ? setStyle + htmlAttributes["" + key] : htmlAttributes["" + key];
            container.setAttribute(key, setStyle);
          } else {
            container.setAttribute(key, htmlAttributes["" + key]);
          }
        }
      }
    }
  }
  Input2.updateHTMLAttributesToWrapper = updateHTMLAttributesToWrapper;
  function isBlank(inputString) {
    return !inputString || /^\s*$/.test(inputString);
  }
  Input2.isBlank = isBlank;
})(Input || (Input = {}));

// node_modules/@syncfusion/ej2-inputs/src/numerictextbox/numerictextbox.js
var __extends13 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate12 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ROOT3 = "e-control-wrapper e-numeric";
var SPINICON = "e-input-group-icon";
var SPINUP = "e-spin-up";
var SPINDOWN = "e-spin-down";
var ERROR = "e-error";
var INCREMENT = "increment";
var DECREMENT = "decrement";
var INTREGEXP = new RegExp("^(-)?(\\d*)$");
var DECIMALSEPARATOR = ".";
var COMPONENT = "e-numerictextbox";
var CONTROL = "e-control";
var NUMERIC_FOCUS = "e-input-focus";
var HIDDENELEMENT = "e-numeric-hidden";
var wrapperAttributes = ["title", "style", "class"];
var selectionTimeOut = 0;
var NumericTextBox = (
  /** @class */
  function(_super) {
    __extends13(NumericTextBox2, _super);
    function NumericTextBox2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.preventChange = false;
      _this.isDynamicChange = false;
      _this.numericOptions = options;
      return _this;
    }
    NumericTextBox2.prototype.preRender = function() {
      this.isPrevFocused = false;
      this.decimalSeparator = ".";
      this.intRegExp = new RegExp("/^(-)?(d*)$/");
      this.isCalled = false;
      var ejInstance = getValue("ej2_instances", this.element);
      this.cloneElement = this.element.cloneNode(true);
      removeClass([this.cloneElement], [CONTROL, COMPONENT, "e-lib"]);
      this.angularTagName = null;
      this.formEle = closest(this.element, "form");
      if (this.element.tagName === "EJS-NUMERICTEXTBOX") {
        this.angularTagName = this.element.tagName;
        var input = this.createElement("input");
        var index = 0;
        for (index; index < this.element.attributes.length; index++) {
          var attributeName = this.element.attributes[index].nodeName;
          if (attributeName !== "id" && attributeName !== "class") {
            input.setAttribute(this.element.attributes[index].nodeName, this.element.attributes[index].nodeValue);
            input.innerHTML = this.element.innerHTML;
          } else if (attributeName === "class") {
            input.setAttribute(attributeName, this.element.className.split(" ").filter(function(item) {
              return item.indexOf("ng-") !== 0;
            }).join(" "));
          }
        }
        if (this.element.hasAttribute("name")) {
          this.element.removeAttribute("name");
        }
        this.element.classList.remove("e-control", "e-numerictextbox");
        this.element.appendChild(input);
        this.element = input;
        setValue("ej2_instances", ejInstance, this.element);
      }
      attributes(this.element, {
        "role": "spinbutton",
        "tabindex": "0",
        "autocomplete": "off"
      });
      var localeText = {
        incrementTitle: "Increment value",
        decrementTitle: "Decrement value",
        placeholder: this.placeholder
      };
      this.l10n = new L10n("numerictextbox", localeText, this.locale);
      if (this.l10n.getConstant("placeholder") !== "") {
        this.setProperties({
          placeholder: this.placeholder || this.l10n.getConstant("placeholder")
        }, true);
      }
      if (!this.element.hasAttribute("id")) {
        this.element.setAttribute("id", getUniqueID("numerictextbox"));
      }
      this.isValidState = true;
      this.inputStyle = null;
      this.inputName = null;
      this.cultureInfo = {};
      this.initCultureInfo();
      this.initCultureFunc();
      this.prevValue = this.value;
      this.updateHTMLAttrToElement();
      this.checkAttributes(false);
      if (this.formEle) {
        this.inputEleValue = this.value;
      }
      this.validateMinMax();
      this.validateStep();
      if (this.placeholder === null) {
        this.updatePlaceholder();
      }
    };
    NumericTextBox2.prototype.render = function() {
      if (this.element.tagName.toLowerCase() === "input") {
        this.createWrapper();
        if (this.showSpinButton) {
          this.spinBtnCreation();
        }
        this.setElementWidth(this.width);
        if (!this.container.classList.contains("e-input-group")) {
          this.container.classList.add("e-input-group");
        }
        this.changeValue(this.value === null || isNaN(this.value) ? null : this.strictMode ? this.trimValue(this.value) : this.value);
        this.wireEvents();
        if (this.value !== null && !isNaN(this.value)) {
          if (this.decimals) {
            this.setProperties({
              value: this.roundNumber(this.value, this.decimals)
            }, true);
          }
        }
        if (this.element.getAttribute("value") || this.value) {
          this.element.setAttribute("value", this.element.value);
          this.hiddenInput.setAttribute("value", this.hiddenInput.value);
        }
        this.elementPrevValue = this.element.value;
        if (this.element.hasAttribute("data-val")) {
          this.element.setAttribute("data-val", "false");
        }
        if (!this.element.hasAttribute("aria-labelledby") && !this.element.hasAttribute("placeholder") && !this.element.hasAttribute("aria-label")) {
          this.element.setAttribute("aria-label", "numerictextbox");
        }
        if (!isNullOrUndefined(closest(this.element, "fieldset")) && closest(this.element, "fieldset").disabled) {
          this.enabled = false;
        }
        this.renderComplete();
      }
    };
    NumericTextBox2.prototype.checkAttributes = function(isDynamic) {
      var attributes2 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ["value", "min", "max", "step", "disabled", "readonly", "style", "name", "placeholder"];
      for (var _i = 0, attributes_1 = attributes2; _i < attributes_1.length; _i++) {
        var prop = attributes_1[_i];
        if (!isNullOrUndefined(this.element.getAttribute(prop))) {
          switch (prop) {
            case "disabled":
              if (isNullOrUndefined(this.numericOptions) || this.numericOptions["enabled"] === void 0 || isDynamic) {
                var enabled = this.element.getAttribute(prop) === "disabled" || this.element.getAttribute(prop) === "" || this.element.getAttribute(prop) === "true" ? false : true;
                this.setProperties({
                  enabled
                }, !isDynamic);
              }
              break;
            case "readonly":
              if (isNullOrUndefined(this.numericOptions) || this.numericOptions["readonly"] === void 0 || isDynamic) {
                var readonly = this.element.getAttribute(prop) === "readonly" || this.element.getAttribute(prop) === "" || this.element.getAttribute(prop) === "true" ? true : false;
                this.setProperties({
                  readonly
                }, !isDynamic);
              }
              break;
            case "placeholder":
              if (isNullOrUndefined(this.numericOptions) || this.numericOptions["placeholder"] === void 0 || isDynamic) {
                this.setProperties({
                  placeholder: this.element.placeholder
                }, !isDynamic);
              }
              break;
            case "value":
              if (isNullOrUndefined(this.numericOptions) || this.numericOptions["value"] === void 0 || isDynamic) {
                var setNumber = this.instance.getNumberParser({
                  format: "n"
                })(this.element.getAttribute(prop));
                this.setProperties(setValue(prop, setNumber, {}), !isDynamic);
              }
              break;
            case "min":
              if (isNullOrUndefined(this.numericOptions) || this.numericOptions["min"] === void 0 || isDynamic) {
                var minValue = this.instance.getNumberParser({
                  format: "n"
                })(this.element.getAttribute(prop));
                if (minValue !== null && !isNaN(minValue)) {
                  this.setProperties(setValue(prop, minValue, {}), !isDynamic);
                }
              }
              break;
            case "max":
              if (isNullOrUndefined(this.numericOptions) || this.numericOptions["max"] === void 0 || isDynamic) {
                var maxValue = this.instance.getNumberParser({
                  format: "n"
                })(this.element.getAttribute(prop));
                if (maxValue !== null && !isNaN(maxValue)) {
                  this.setProperties(setValue(prop, maxValue, {}), !isDynamic);
                }
              }
              break;
            case "step":
              if (isNullOrUndefined(this.numericOptions) || this.numericOptions["step"] === void 0 || isDynamic) {
                var stepValue = this.instance.getNumberParser({
                  format: "n"
                })(this.element.getAttribute(prop));
                if (stepValue !== null && !isNaN(stepValue)) {
                  this.setProperties(setValue(prop, stepValue, {}), !isDynamic);
                }
              }
              break;
            case "style":
              this.inputStyle = this.element.getAttribute(prop);
              break;
            case "name":
              this.inputName = this.element.getAttribute(prop);
              break;
            default:
              {
                var value = this.instance.getNumberParser({
                  format: "n"
                })(this.element.getAttribute(prop));
                if (value !== null && !isNaN(value) || prop === "value") {
                  this.setProperties(setValue(prop, value, {}), true);
                }
              }
              break;
          }
        }
      }
    };
    NumericTextBox2.prototype.updatePlaceholder = function() {
      this.setProperties({
        placeholder: this.l10n.getConstant("placeholder")
      }, true);
    };
    NumericTextBox2.prototype.initCultureFunc = function() {
      this.instance = new Internationalization(this.locale);
    };
    NumericTextBox2.prototype.initCultureInfo = function() {
      this.cultureInfo.format = this.format;
      if (getValue("currency", this) !== null) {
        setValue("currency", this.currency, this.cultureInfo);
        this.setProperties({
          currencyCode: this.currency
        }, true);
      }
    };
    NumericTextBox2.prototype.createWrapper = function() {
      var updatedCssClassValue = this.cssClass;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        updatedCssClassValue = this.getNumericValidClassList(this.cssClass);
      }
      var inputObj = Input.createInput({
        element: this.element,
        floatLabelType: this.floatLabelType,
        properties: {
          readonly: this.readonly,
          placeholder: this.placeholder,
          cssClass: updatedCssClassValue,
          enableRtl: this.enableRtl,
          showClearButton: this.showClearButton,
          enabled: this.enabled
        }
      }, this.createElement);
      this.inputWrapper = inputObj;
      this.container = inputObj.container;
      this.container.setAttribute("class", ROOT3 + " " + this.container.getAttribute("class"));
      this.updateHTMLAttrToWrapper();
      if (this.readonly) {
        attributes(this.element, {
          "aria-readonly": "true"
        });
      }
      this.hiddenInput = this.createElement("input", {
        attrs: {
          type: "text",
          "data-validateHidden": "true",
          "aria-label": "hidden",
          "class": HIDDENELEMENT
        }
      });
      this.inputName = this.inputName !== null ? this.inputName : this.element.id;
      this.element.removeAttribute("name");
      if (this.isAngular && this.angularTagName === "EJS-NUMERICTEXTBOX" && this.cloneElement.id.length > 0) {
        attributes(this.hiddenInput, {
          "name": this.cloneElement.id
        });
      } else {
        attributes(this.hiddenInput, {
          "name": this.inputName
        });
      }
      this.container.insertBefore(this.hiddenInput, this.container.childNodes[1]);
      this.updateDataAttribute(false);
      if (this.inputStyle !== null) {
        attributes(this.container, {
          "style": this.inputStyle
        });
      }
    };
    NumericTextBox2.prototype.updateDataAttribute = function(isDynamic) {
      var attr = {};
      if (!isDynamic) {
        for (var a = 0; a < this.element.attributes.length; a++) {
          attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);
        }
      } else {
        attr = this.htmlAttributes;
      }
      for (var _i = 0, _a = Object.keys(attr); _i < _a.length; _i++) {
        var key = _a[_i];
        if (key.indexOf("data") === 0) {
          this.hiddenInput.setAttribute(key, attr["" + key]);
        }
      }
    };
    NumericTextBox2.prototype.updateHTMLAttrToElement = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var pro = _a[_i];
          if (wrapperAttributes.indexOf(pro) < 0) {
            this.element.setAttribute(pro, this.htmlAttributes["" + pro]);
          }
        }
      }
    };
    NumericTextBox2.prototype.updateCssClass = function(newClass, oldClass) {
      Input.setCssClass(this.getNumericValidClassList(newClass), [this.container], this.getNumericValidClassList(oldClass));
    };
    NumericTextBox2.prototype.getNumericValidClassList = function(numericClassName) {
      var result = numericClassName;
      if (!isNullOrUndefined(numericClassName) && numericClassName !== "") {
        result = numericClassName.replace(/\s+/g, " ").trim();
      }
      return result;
    };
    NumericTextBox2.prototype.updateHTMLAttrToWrapper = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var pro = _a[_i];
          if (wrapperAttributes.indexOf(pro) > -1) {
            if (pro === "class") {
              var updatedClassValue = this.getNumericValidClassList(this.htmlAttributes["" + pro]);
              if (updatedClassValue !== "") {
                addClass([this.container], updatedClassValue.split(" "));
              }
            } else if (pro === "style") {
              var numericStyle = this.container.getAttribute(pro);
              numericStyle = !isNullOrUndefined(numericStyle) ? numericStyle + this.htmlAttributes["" + pro] : this.htmlAttributes["" + pro];
              this.container.setAttribute(pro, numericStyle);
            } else {
              this.container.setAttribute(pro, this.htmlAttributes["" + pro]);
            }
          }
        }
      }
    };
    NumericTextBox2.prototype.setElementWidth = function(width) {
      if (!isNullOrUndefined(width)) {
        if (typeof width === "number") {
          this.container.style.width = formatUnit(width);
        } else if (typeof width === "string") {
          this.container.style.width = width.match(/px|%|em/) ? width : formatUnit(width);
        }
      }
    };
    NumericTextBox2.prototype.spinBtnCreation = function() {
      this.spinDown = Input.appendSpan(SPINICON + " " + SPINDOWN, this.container, this.createElement);
      attributes(this.spinDown, {
        "title": this.l10n.getConstant("decrementTitle")
      });
      this.spinUp = Input.appendSpan(SPINICON + " " + SPINUP, this.container, this.createElement);
      attributes(this.spinUp, {
        "title": this.l10n.getConstant("incrementTitle")
      });
      this.wireSpinBtnEvents();
    };
    NumericTextBox2.prototype.validateMinMax = function() {
      if (!(typeof this.min === "number" && !isNaN(this.min))) {
        this.setProperties({
          min: -Number.MAX_VALUE
        }, true);
      }
      if (!(typeof this.max === "number" && !isNaN(this.max))) {
        this.setProperties({
          max: Number.MAX_VALUE
        }, true);
      }
      if (this.decimals !== null) {
        if (this.min !== -Number.MAX_VALUE) {
          this.setProperties({
            min: this.instance.getNumberParser({
              format: "n"
            })(this.formattedValue(this.decimals, this.min))
          }, true);
        }
        if (this.max !== Number.MAX_VALUE) {
          this.setProperties({
            max: this.instance.getNumberParser({
              format: "n"
            })(this.formattedValue(this.decimals, this.max))
          }, true);
        }
      }
      this.setProperties({
        min: this.min > this.max ? this.max : this.min
      }, true);
      if (this.min !== -Number.MAX_VALUE) {
        attributes(this.element, {
          "aria-valuemin": this.min.toString()
        });
      }
      if (this.max !== Number.MAX_VALUE) {
        attributes(this.element, {
          "aria-valuemax": this.max.toString()
        });
      }
    };
    NumericTextBox2.prototype.formattedValue = function(decimals, value) {
      return this.instance.getNumberFormat({
        maximumFractionDigits: decimals,
        minimumFractionDigits: decimals,
        useGrouping: false
      })(value);
    };
    NumericTextBox2.prototype.validateStep = function() {
      if (this.decimals !== null) {
        this.setProperties({
          step: this.instance.getNumberParser({
            format: "n"
          })(this.formattedValue(this.decimals, this.step))
        }, true);
      }
    };
    NumericTextBox2.prototype.action = function(operation, event2) {
      this.isInteract = true;
      var value = this.isFocused ? this.instance.getNumberParser({
        format: "n"
      })(this.element.value) : this.value;
      this.changeValue(this.performAction(value, this.step, operation));
      this.raiseChangeEvent(event2);
    };
    NumericTextBox2.prototype.checkErrorClass = function() {
      if (this.isValidState) {
        removeClass([this.container], ERROR);
      } else {
        addClass([this.container], ERROR);
      }
      attributes(this.element, {
        "aria-invalid": this.isValidState ? "false" : "true"
      });
    };
    NumericTextBox2.prototype.bindClearEvent = function() {
      if (this.showClearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown touchstart", this.resetHandler, this);
      }
    };
    NumericTextBox2.prototype.resetHandler = function(e) {
      e.preventDefault();
      if (!this.inputWrapper.clearButton.classList.contains("e-clear-icon-hide") || this.inputWrapper.container.classList.contains("e-static-clear")) {
        this.clear(e);
      }
      this.isInteract = true;
      this.raiseChangeEvent(e);
    };
    NumericTextBox2.prototype.clear = function(event2) {
      this.setProperties({
        value: null
      }, true);
      this.setElementValue("");
      this.hiddenInput.value = "";
      var formElement = closest(this.element, "form");
      if (formElement) {
        var element2 = this.element.nextElementSibling;
        var keyupEvent = document.createEvent("KeyboardEvent");
        keyupEvent.initEvent("keyup", false, true);
        element2.dispatchEvent(keyupEvent);
      }
    };
    NumericTextBox2.prototype.resetFormHandler = function() {
      if (this.element.tagName === "EJS-NUMERICTEXTBOX") {
        this.updateValue(null);
      } else {
        this.updateValue(this.inputEleValue);
      }
    };
    NumericTextBox2.prototype.setSpinButton = function() {
      if (!isNullOrUndefined(this.spinDown)) {
        attributes(this.spinDown, {
          "title": this.l10n.getConstant("decrementTitle"),
          "aria-label": this.l10n.getConstant("decrementTitle")
        });
      }
      if (!isNullOrUndefined(this.spinUp)) {
        attributes(this.spinUp, {
          "title": this.l10n.getConstant("incrementTitle"),
          "aria-label": this.l10n.getConstant("incrementTitle")
        });
      }
    };
    NumericTextBox2.prototype.wireEvents = function() {
      EventHandler.add(this.element, "focus", this.focusHandler, this);
      EventHandler.add(this.element, "blur", this.focusOutHandler, this);
      EventHandler.add(this.element, "keydown", this.keyDownHandler, this);
      EventHandler.add(this.element, "keyup", this.keyUpHandler, this);
      EventHandler.add(this.element, "input", this.inputHandler, this);
      EventHandler.add(this.element, "keypress", this.keyPressHandler, this);
      EventHandler.add(this.element, "change", this.changeHandler, this);
      EventHandler.add(this.element, "paste", this.pasteHandler, this);
      if (this.enabled) {
        this.bindClearEvent();
        if (this.formEle) {
          EventHandler.add(this.formEle, "reset", this.resetFormHandler, this);
        }
      }
    };
    NumericTextBox2.prototype.wireSpinBtnEvents = function() {
      EventHandler.add(this.spinUp, Browser.touchStartEvent, this.mouseDownOnSpinner, this);
      EventHandler.add(this.spinDown, Browser.touchStartEvent, this.mouseDownOnSpinner, this);
      EventHandler.add(this.spinUp, Browser.touchEndEvent, this.mouseUpOnSpinner, this);
      EventHandler.add(this.spinDown, Browser.touchEndEvent, this.mouseUpOnSpinner, this);
      EventHandler.add(this.spinUp, Browser.touchMoveEvent, this.touchMoveOnSpinner, this);
      EventHandler.add(this.spinDown, Browser.touchMoveEvent, this.touchMoveOnSpinner, this);
    };
    NumericTextBox2.prototype.unwireEvents = function() {
      EventHandler.remove(this.element, "focus", this.focusHandler);
      EventHandler.remove(this.element, "blur", this.focusOutHandler);
      EventHandler.remove(this.element, "keyup", this.keyUpHandler);
      EventHandler.remove(this.element, "input", this.inputHandler);
      EventHandler.remove(this.element, "keydown", this.keyDownHandler);
      EventHandler.remove(this.element, "keypress", this.keyPressHandler);
      EventHandler.remove(this.element, "change", this.changeHandler);
      EventHandler.remove(this.element, "paste", this.pasteHandler);
      if (this.formEle) {
        EventHandler.remove(this.formEle, "reset", this.resetFormHandler);
      }
    };
    NumericTextBox2.prototype.unwireSpinBtnEvents = function() {
      EventHandler.remove(this.spinUp, Browser.touchStartEvent, this.mouseDownOnSpinner);
      EventHandler.remove(this.spinDown, Browser.touchStartEvent, this.mouseDownOnSpinner);
      EventHandler.remove(this.spinUp, Browser.touchEndEvent, this.mouseUpOnSpinner);
      EventHandler.remove(this.spinDown, Browser.touchEndEvent, this.mouseUpOnSpinner);
      EventHandler.remove(this.spinUp, Browser.touchMoveEvent, this.touchMoveOnSpinner);
      EventHandler.remove(this.spinDown, Browser.touchMoveEvent, this.touchMoveOnSpinner);
    };
    NumericTextBox2.prototype.changeHandler = function(event2) {
      event2.stopPropagation();
      if (!this.element.value.length) {
        this.setProperties({
          value: null
        }, true);
      }
      var parsedInput = this.instance.getNumberParser({
        format: "n"
      })(this.element.value);
      this.updateValue(parsedInput, event2);
    };
    NumericTextBox2.prototype.raiseChangeEvent = function(event2) {
      this.inputValue = isNullOrUndefined(this.inputValue) || isNaN(this.inputValue) ? null : this.inputValue;
      if (this.prevValue !== this.value || this.prevValue !== this.inputValue) {
        var eventArgs = {};
        this.changeEventArgs = {
          value: this.value,
          previousValue: this.prevValue,
          isInteracted: this.isInteract,
          isInteraction: this.isInteract,
          event: event2
        };
        if (event2) {
          this.changeEventArgs.event = event2;
        }
        if (this.changeEventArgs.event === void 0) {
          this.changeEventArgs.isInteracted = false;
          this.changeEventArgs.isInteraction = false;
        }
        merge(eventArgs, this.changeEventArgs);
        this.prevValue = this.value;
        this.isInteract = false;
        this.elementPrevValue = this.element.value;
        this.preventChange = false;
        this.trigger("change", eventArgs);
      }
    };
    NumericTextBox2.prototype.pasteHandler = function() {
      var _this = this;
      if (!this.enabled || this.readonly) {
        return;
      }
      var beforeUpdate = this.element.value;
      setTimeout(function() {
        if (!_this.numericRegex().test(_this.element.value)) {
          _this.setElementValue(beforeUpdate);
        }
      });
    };
    NumericTextBox2.prototype.preventHandler = function() {
      var _this = this;
      var iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);
      setTimeout(function() {
        if (_this.element.selectionStart > 0) {
          var currentPos = _this.element.selectionStart;
          var prevPos = _this.element.selectionStart - 1;
          var start = 0;
          var valArray = _this.element.value.split("");
          var numericObject = getNumericObject(_this.locale);
          var decimalSeparator = getValue("decimal", numericObject);
          var ignoreKeyCode = decimalSeparator.charCodeAt(0);
          if (_this.element.value[prevPos] === " " && _this.element.selectionStart > 0 && !iOS) {
            if (isNullOrUndefined(_this.prevVal)) {
              _this.element.value = _this.element.value.trim();
            } else if (prevPos !== 0) {
              _this.element.value = _this.prevVal;
            } else if (prevPos === 0) {
              _this.element.value = _this.element.value.trim();
            }
            _this.element.setSelectionRange(prevPos, prevPos);
          } else if (isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 1])) && _this.element.value[_this.element.selectionStart - 1].charCodeAt(0) !== 45) {
            if (valArray.indexOf(_this.element.value[_this.element.selectionStart - 1]) !== valArray.lastIndexOf(_this.element.value[_this.element.selectionStart - 1]) && _this.element.value[_this.element.selectionStart - 1].charCodeAt(0) === ignoreKeyCode || _this.element.value[_this.element.selectionStart - 1].charCodeAt(0) !== ignoreKeyCode) {
              _this.element.value = _this.element.value.substring(0, prevPos) + _this.element.value.substring(currentPos, _this.element.value.length);
              _this.element.setSelectionRange(prevPos, prevPos);
              if (isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 1])) && _this.element.selectionStart > 0 && _this.element.value.length) {
                _this.preventHandler();
              }
            }
          } else if (isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 2])) && _this.element.selectionStart > 1 && _this.element.value[_this.element.selectionStart - 2].charCodeAt(0) !== 45) {
            if (valArray.indexOf(_this.element.value[_this.element.selectionStart - 2]) !== valArray.lastIndexOf(_this.element.value[_this.element.selectionStart - 2]) && _this.element.value[_this.element.selectionStart - 2].charCodeAt(0) === ignoreKeyCode || _this.element.value[_this.element.selectionStart - 2].charCodeAt(0) !== ignoreKeyCode) {
              _this.element.setSelectionRange(prevPos, prevPos);
              _this.nextEle = _this.element.value[_this.element.selectionStart];
              _this.cursorPosChanged = true;
              _this.preventHandler();
            }
          }
          if (_this.cursorPosChanged === true && _this.element.value[_this.element.selectionStart] === _this.nextEle && isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 1]))) {
            _this.element.setSelectionRange(_this.element.selectionStart + 1, _this.element.selectionStart + 1);
            _this.cursorPosChanged = false;
            _this.nextEle = null;
          }
          if (_this.element.value.trim() === "") {
            _this.element.setSelectionRange(start, start);
          }
          if (_this.element.selectionStart > 0) {
            if (_this.element.value[_this.element.selectionStart - 1].charCodeAt(0) === 45 && _this.element.selectionStart > 1) {
              if (!isNullOrUndefined(_this.prevVal)) {
                _this.element.value = _this.prevVal;
              }
              _this.element.setSelectionRange(_this.element.selectionStart, _this.element.selectionStart);
            }
            if (_this.element.value[_this.element.selectionStart - 1] === decimalSeparator && _this.decimals === 0 && _this.validateDecimalOnType) {
              _this.element.value = _this.element.value.substring(0, prevPos) + _this.element.value.substring(currentPos, _this.element.value.length);
            }
          }
          _this.prevVal = _this.element.value;
        }
      });
    };
    NumericTextBox2.prototype.keyUpHandler = function() {
      if (!this.enabled || this.readonly) {
        return;
      }
      var iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);
      if (!iOS && Browser.isDevice) {
        this.preventHandler();
      }
      var parseValue = this.instance.getNumberParser({
        format: "n"
      })(this.element.value);
      parseValue = parseValue === null || isNaN(parseValue) ? null : parseValue;
      this.hiddenInput.value = parseValue || parseValue === 0 ? parseValue.toString() : null;
      var formElement = closest(this.element, "form");
      if (formElement) {
        var element2 = this.element.nextElementSibling;
        var keyupEvent = document.createEvent("KeyboardEvent");
        keyupEvent.initEvent("keyup", false, true);
        element2.dispatchEvent(keyupEvent);
      }
    };
    NumericTextBox2.prototype.inputHandler = function(event2) {
      var numerictextboxObj = this;
      if (!this.enabled || this.readonly) {
        return;
      }
      var iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);
      var fireFox = navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
      if ((fireFox || iOS) && Browser.isDevice) {
        this.preventHandler();
      }
      if (this.isAngular && this.element.value !== getValue("decimal", getNumericObject(this.locale)) && this.element.value !== getValue("minusSign", getNumericObject(this.locale))) {
        var parsedValue = this.instance.getNumberParser({
          format: "n"
        })(this.element.value);
        parsedValue = isNaN(parsedValue) ? null : parsedValue;
        numerictextboxObj.localChange({
          value: parsedValue
        });
        this.preventChange = true;
      }
      if (this.isVue) {
        var current = this.instance.getNumberParser({
          format: "n"
        })(this.element.value);
        var previous = this.instance.getNumberParser({
          format: "n"
        })(this.elementPrevValue);
        var nonZeroRegex = new RegExp("[^0-9]+$");
        if (nonZeroRegex.test(this.element.value) || (this.elementPrevValue.indexOf(".") !== -1 || this.elementPrevValue.indexOf("-") !== -1) && this.element.value[this.element.value.length - 1] === "0") {
          current = this.value;
        }
        var eventArgs = {
          event: event2,
          value: current === null || isNaN(current) ? null : current,
          previousValue: previous === null || isNaN(previous) ? null : previous
        };
        this.preventChange = true;
        this.elementPrevValue = this.element.value;
        this.trigger("input", eventArgs);
      }
    };
    NumericTextBox2.prototype.keyDownHandler = function(event2) {
      if (!this.readonly) {
        switch (event2.keyCode) {
          case 38:
            event2.preventDefault();
            this.action(INCREMENT, event2);
            break;
          case 40:
            event2.preventDefault();
            this.action(DECREMENT, event2);
            break;
          default:
            break;
        }
      }
    };
    NumericTextBox2.prototype.performAction = function(value, step, operation) {
      if (value === null || isNaN(value)) {
        value = 0;
      }
      var updatedValue = operation === INCREMENT ? value + step : value - step;
      updatedValue = this.correctRounding(value, step, updatedValue);
      return this.strictMode ? this.trimValue(updatedValue) : updatedValue;
    };
    NumericTextBox2.prototype.correctRounding = function(value, step, result) {
      var floatExp = new RegExp("[,.](.*)");
      var floatValue = floatExp.test(value.toString());
      var floatStep = floatExp.test(step.toString());
      if (floatValue || floatStep) {
        var valueCount = floatValue ? floatExp.exec(value.toString())[0].length : 0;
        var stepCount = floatStep ? floatExp.exec(step.toString())[0].length : 0;
        var max = Math.max(valueCount, stepCount);
        return value = this.roundValue(result, max);
      }
      return result;
    };
    NumericTextBox2.prototype.roundValue = function(result, precision) {
      precision = precision || 0;
      var divide = Math.pow(10, precision);
      return result *= divide, result = Math.round(result) / divide;
    };
    NumericTextBox2.prototype.updateValue = function(value, event2) {
      if (event2) {
        this.isInteract = true;
      }
      if (value !== null && !isNaN(value)) {
        if (this.decimals) {
          value = this.roundNumber(value, this.decimals);
        }
      }
      this.inputValue = value;
      if (!(this.isVue && this.element && this.element.hasAttribute("modelvalue") && this.isDynamicChange)) {
        this.changeValue(value === null || isNaN(value) ? null : this.strictMode ? this.trimValue(value) : value);
      }
      if (!this.isDynamicChange) {
        this.raiseChangeEvent(event2);
      }
    };
    NumericTextBox2.prototype.updateCurrency = function(prop, propVal) {
      setValue(prop, propVal, this.cultureInfo);
      this.updateValue(this.value);
    };
    NumericTextBox2.prototype.changeValue = function(value) {
      if (!(value || value === 0)) {
        value = null;
        this.setProperties({
          value
        }, true);
      } else {
        var numberOfDecimals = this.getNumberOfDecimals(value);
        this.setProperties({
          value: this.roundNumber(value, numberOfDecimals)
        }, true);
      }
      this.modifyText();
      if (!this.strictMode) {
        this.validateState();
      }
    };
    NumericTextBox2.prototype.modifyText = function() {
      if (this.value || this.value === 0) {
        var value = this.formatNumber();
        var elementValue = this.isFocused ? value : this.instance.getNumberFormat(this.cultureInfo)(this.value);
        this.setElementValue(elementValue);
        attributes(this.element, {
          "aria-valuenow": value
        });
        if (!isNullOrUndefined(this.hiddenInput)) {
          this.hiddenInput.value = this.value.toString();
          if (this.value !== null && this.serverDecimalSeparator) {
            this.hiddenInput.value = this.hiddenInput.value.replace(".", this.serverDecimalSeparator);
          }
        }
      } else {
        this.setElementValue("");
        this.element.removeAttribute("aria-valuenow");
        this.hiddenInput.value = null;
      }
    };
    NumericTextBox2.prototype.setElementValue = function(val, element2) {
      Input.setValue(val, element2 ? element2 : this.element, this.floatLabelType, this.showClearButton);
    };
    NumericTextBox2.prototype.validateState = function() {
      this.isValidState = true;
      if (this.value || this.value === 0) {
        this.isValidState = !(this.value > this.max || this.value < this.min);
      }
      this.checkErrorClass();
    };
    NumericTextBox2.prototype.getNumberOfDecimals = function(value) {
      var numberOfDecimals;
      var EXPREGEXP = new RegExp("[eE][-+]?([0-9]+)");
      var valueString = value.toString();
      if (EXPREGEXP.test(valueString)) {
        var result = EXPREGEXP.exec(valueString);
        if (!isNullOrUndefined(result)) {
          valueString = value.toFixed(Math.min(parseInt(result[1], 10), 20));
        }
      }
      var decimalPart = valueString.split(".")[1];
      numberOfDecimals = !decimalPart || !decimalPart.length ? 0 : decimalPart.length;
      if (this.decimals !== null) {
        numberOfDecimals = numberOfDecimals < this.decimals ? numberOfDecimals : this.decimals;
      }
      return numberOfDecimals;
    };
    NumericTextBox2.prototype.formatNumber = function() {
      var numberOfDecimals = this.getNumberOfDecimals(this.value);
      return this.instance.getNumberFormat({
        maximumFractionDigits: numberOfDecimals,
        minimumFractionDigits: numberOfDecimals,
        useGrouping: false
      })(this.value);
    };
    NumericTextBox2.prototype.trimValue = function(value) {
      if (value > this.max) {
        return this.max;
      }
      if (value < this.min) {
        return this.min;
      }
      return value;
    };
    NumericTextBox2.prototype.roundNumber = function(value, precision) {
      var result = value;
      var decimals = precision || 0;
      var result1 = result.toString().split("e");
      result = Math.round(Number(result1[0] + "e" + (result1[1] ? Number(result1[1]) + decimals : decimals)));
      var result2 = result.toString().split("e");
      result = Number(result2[0] + "e" + (result2[1] ? Number(result2[1]) - decimals : -decimals));
      return Number(result.toFixed(decimals));
    };
    NumericTextBox2.prototype.cancelEvent = function(event2) {
      event2.preventDefault();
      return false;
    };
    NumericTextBox2.prototype.keyPressHandler = function(event2) {
      if (!this.enabled || this.readonly) {
        return true;
      }
      if (!Browser.isDevice && Browser.info.version === "11.0" && event2.keyCode === 13) {
        var parsedInput = this.instance.getNumberParser({
          format: "n"
        })(this.element.value);
        this.updateValue(parsedInput, event2);
        return true;
      }
      if (event2.which === 0 || event2.metaKey || event2.ctrlKey || event2.keyCode === 8 || event2.keyCode === 13) {
        return true;
      }
      var currentChar = String.fromCharCode(event2.which);
      var decimalSeparator = getValue("decimal", getNumericObject(this.locale));
      var isAlterNumPadDecimalChar = event2.code === "NumpadDecimal" && currentChar !== decimalSeparator;
      if (isAlterNumPadDecimalChar) {
        currentChar = decimalSeparator;
      }
      var text = this.element.value;
      text = text.substring(0, this.element.selectionStart) + currentChar + text.substring(this.element.selectionEnd);
      if (!this.numericRegex().test(text)) {
        event2.preventDefault();
        event2.stopPropagation();
        return false;
      } else {
        if (isAlterNumPadDecimalChar) {
          var start = this.element.selectionStart + 1;
          this.element.value = text;
          this.element.setSelectionRange(start, start);
          event2.preventDefault();
          event2.stopPropagation();
        }
        return true;
      }
    };
    NumericTextBox2.prototype.numericRegex = function() {
      var numericObject = getNumericObject(this.locale);
      var decimalSeparator = getValue("decimal", numericObject);
      var fractionRule = "*";
      if (decimalSeparator === DECIMALSEPARATOR) {
        decimalSeparator = "\\" + decimalSeparator;
      }
      if (this.decimals === 0 && this.validateDecimalOnType) {
        return INTREGEXP;
      }
      if (this.decimals && this.validateDecimalOnType) {
        fractionRule = "{0," + this.decimals + "}";
      }
      return new RegExp("^\\s*(-)?(((\\d+(" + decimalSeparator + "\\d" + fractionRule + ")?)|(" + decimalSeparator + "\\d" + fractionRule + ")))?$");
    };
    NumericTextBox2.prototype.mouseWheel = function(event2) {
      event2.preventDefault();
      var delta;
      var rawEvent = event2;
      if (rawEvent.wheelDelta) {
        delta = rawEvent.wheelDelta / 120;
      } else if (rawEvent.detail) {
        delta = -rawEvent.detail / 3;
      }
      if (delta > 0) {
        this.action(INCREMENT, event2);
      } else if (delta < 0) {
        this.action(DECREMENT, event2);
      }
      this.cancelEvent(event2);
    };
    NumericTextBox2.prototype.focusHandler = function(event2) {
      var _this = this;
      clearTimeout(selectionTimeOut);
      this.focusEventArgs = {
        event: event2,
        value: this.value,
        container: this.container
      };
      this.trigger("focus", this.focusEventArgs);
      if (!this.enabled || this.readonly) {
        return;
      }
      this.isFocused = true;
      this.prevValue = this.value;
      if (this.value || this.value === 0) {
        var formatValue_1 = this.formatNumber();
        this.setElementValue(formatValue_1);
        if (!this.isPrevFocused) {
          if (!Browser.isDevice && Browser.info.version === "11.0") {
            this.element.setSelectionRange(0, formatValue_1.length);
          } else {
            var delay = Browser.isDevice && Browser.isIos ? 600 : 0;
            selectionTimeOut = setTimeout(function() {
              _this.element.setSelectionRange(0, formatValue_1.length);
            }, delay);
          }
        }
      }
      if (!Browser.isDevice) {
        EventHandler.add(this.element, "mousewheel DOMMouseScroll", this.mouseWheel, this);
      }
    };
    NumericTextBox2.prototype.focusOutHandler = function(event2) {
      var _this = this;
      this.blurEventArgs = {
        event: event2,
        value: this.value,
        container: this.container
      };
      this.trigger("blur", this.blurEventArgs);
      if (!this.enabled || this.readonly) {
        return;
      }
      if (this.isPrevFocused) {
        event2.preventDefault();
        if (Browser.isDevice) {
          var value_1 = this.element.value;
          this.element.focus();
          this.isPrevFocused = false;
          var ele_1 = this.element;
          setTimeout(function() {
            _this.setElementValue(value_1, ele_1);
          }, 200);
        }
      } else {
        this.isFocused = false;
        if (!this.element.value.length) {
          this.setProperties({
            value: null
          }, true);
        }
        var parsedInput = this.instance.getNumberParser({
          format: "n"
        })(this.element.value);
        this.updateValue(parsedInput);
        if (!Browser.isDevice) {
          EventHandler.remove(this.element, "mousewheel DOMMouseScroll", this.mouseWheel);
        }
      }
      var formElement = closest(this.element, "form");
      if (formElement) {
        var element2 = this.element.nextElementSibling;
        var focusEvent = document.createEvent("FocusEvent");
        focusEvent.initEvent("focusout", false, true);
        element2.dispatchEvent(focusEvent);
      }
    };
    NumericTextBox2.prototype.mouseDownOnSpinner = function(event2) {
      var _this = this;
      if (this.isFocused) {
        this.isPrevFocused = true;
        event2.preventDefault();
      }
      if (!this.getElementData(event2)) {
        return;
      }
      this.getElementData(event2);
      var target = event2.currentTarget;
      var action = target.classList.contains(SPINUP) ? INCREMENT : DECREMENT;
      EventHandler.add(target, "mouseleave", this.mouseUpClick, this);
      this.timeOut = setInterval(function() {
        _this.isCalled = true;
        _this.action(action, event2);
      }, 150);
      EventHandler.add(document, "mouseup", this.mouseUpClick, this);
    };
    NumericTextBox2.prototype.touchMoveOnSpinner = function(event2) {
      var target;
      if (event2.type === "touchmove") {
        var touchEvent = event2.touches;
        target = touchEvent.length && document.elementFromPoint(touchEvent[0].pageX, touchEvent[0].pageY);
      } else {
        target = document.elementFromPoint(event2.clientX, event2.clientY);
      }
      if (!target.classList.contains(SPINICON)) {
        clearInterval(this.timeOut);
      }
    };
    NumericTextBox2.prototype.mouseUpOnSpinner = function(event2) {
      this.prevValue = this.value;
      if (this.isPrevFocused) {
        this.element.focus();
        if (!Browser.isDevice) {
          this.isPrevFocused = false;
        }
      }
      if (!Browser.isDevice) {
        event2.preventDefault();
      }
      if (!this.getElementData(event2)) {
        return;
      }
      var target = event2.currentTarget;
      var action = target.classList.contains(SPINUP) ? INCREMENT : DECREMENT;
      EventHandler.remove(target, "mouseleave", this.mouseUpClick);
      if (!this.isCalled) {
        this.action(action, event2);
      }
      this.isCalled = false;
      EventHandler.remove(document, "mouseup", this.mouseUpClick);
      var formElement = closest(this.element, "form");
      if (formElement) {
        var element2 = this.element.nextElementSibling;
        var keyupEvent = document.createEvent("KeyboardEvent");
        keyupEvent.initEvent("keyup", false, true);
        element2.dispatchEvent(keyupEvent);
      }
    };
    NumericTextBox2.prototype.getElementData = function(event2) {
      if (event2.which && event2.which === 3 || event2.button && event2.button === 2 || !this.enabled || this.readonly) {
        return false;
      }
      clearInterval(this.timeOut);
      return true;
    };
    NumericTextBox2.prototype.floatLabelTypeUpdate = function() {
      Input.removeFloating(this.inputWrapper);
      var hiddenInput = this.hiddenInput;
      this.hiddenInput.remove();
      Input.addFloating(this.element, this.floatLabelType, this.placeholder, this.createElement);
      this.container.insertBefore(hiddenInput, this.container.childNodes[1]);
    };
    NumericTextBox2.prototype.mouseUpClick = function(event2) {
      event2.stopPropagation();
      clearInterval(this.timeOut);
      this.isCalled = false;
      if (this.spinUp) {
        EventHandler.remove(this.spinUp, "mouseleave", this.mouseUpClick);
      }
      if (this.spinDown) {
        EventHandler.remove(this.spinDown, "mouseleave", this.mouseUpClick);
      }
    };
    NumericTextBox2.prototype.increment = function(step) {
      if (step === void 0) {
        step = this.step;
      }
      this.isInteract = false;
      this.changeValue(this.performAction(this.value, step, INCREMENT));
      this.raiseChangeEvent();
    };
    NumericTextBox2.prototype.decrement = function(step) {
      if (step === void 0) {
        step = this.step;
      }
      this.isInteract = false;
      this.changeValue(this.performAction(this.value, step, DECREMENT));
      this.raiseChangeEvent();
    };
    NumericTextBox2.prototype.destroy = function() {
      this.unwireEvents();
      if (this.showClearButton) {
        this.clearButton = document.getElementsByClassName("e-clear-icon")[0];
      }
      detach(this.hiddenInput);
      if (this.showSpinButton) {
        this.unwireSpinBtnEvents();
        detach(this.spinUp);
        detach(this.spinDown);
      }
      var attrArray = ["aria-labelledby", "role", "autocomplete", "aria-readonly", "aria-disabled", "autocapitalize", "spellcheck", "aria-autocomplete", "tabindex", "aria-valuemin", "aria-valuemax", "aria-valuenow", "aria-invalid"];
      for (var i = 0; i < attrArray.length; i++) {
        this.element.removeAttribute(attrArray[i]);
      }
      this.element.classList.remove("e-input");
      this.container.insertAdjacentElement("afterend", this.element);
      detach(this.container);
      this.spinUp = null;
      this.spinDown = null;
      this.container = null;
      this.hiddenInput = null;
      this.changeEventArgs = null;
      this.blurEventArgs = null;
      this.focusEventArgs = null;
      this.inputWrapper = null;
      Input.destroy({
        element: this.element,
        floatLabelType: this.floatLabelType,
        properties: this.properties
      }, this.clearButton);
      _super.prototype.destroy.call(this);
    };
    NumericTextBox2.prototype.getText = function() {
      return this.element.value;
    };
    NumericTextBox2.prototype.focusIn = function() {
      if (document.activeElement !== this.element && this.enabled) {
        this.element.focus();
        addClass([this.container], [NUMERIC_FOCUS]);
      }
    };
    NumericTextBox2.prototype.focusOut = function() {
      if (document.activeElement === this.element && this.enabled) {
        this.element.blur();
        removeClass([this.container], [NUMERIC_FOCUS]);
      }
    };
    NumericTextBox2.prototype.getPersistData = function() {
      var keyEntity = ["value"];
      return this.addOnPersist(keyEntity);
    };
    NumericTextBox2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "width":
            this.setElementWidth(newProp.width);
            Input.calculateWidth(this.element, this.container);
            break;
          case "cssClass":
            this.updateCssClass(newProp.cssClass, oldProp.cssClass);
            break;
          case "enabled":
            Input.setEnabled(newProp.enabled, this.element);
            this.bindClearEvent();
            break;
          case "enableRtl":
            Input.setEnableRtl(newProp.enableRtl, [this.container]);
            break;
          case "readonly":
            Input.setReadonly(newProp.readonly, this.element);
            if (this.readonly) {
              attributes(this.element, {
                "aria-readonly": "true"
              });
            } else {
              this.element.removeAttribute("aria-readonly");
            }
            break;
          case "htmlAttributes":
            this.updateHTMLAttrToElement();
            this.updateHTMLAttrToWrapper();
            this.updateDataAttribute(true);
            this.checkAttributes(true);
            Input.validateInputType(this.container, this.element);
            break;
          case "placeholder":
            Input.setPlaceholder(newProp.placeholder, this.element);
            Input.calculateWidth(this.element, this.container);
            break;
          case "step":
            this.step = newProp.step;
            this.validateStep();
            break;
          case "showSpinButton":
            this.updateSpinButton(newProp);
            break;
          case "showClearButton":
            this.updateClearButton(newProp);
            break;
          case "floatLabelType":
            this.floatLabelType = newProp.floatLabelType;
            this.floatLabelTypeUpdate();
            break;
          case "value":
            this.isDynamicChange = (this.isAngular || this.isVue) && this.preventChange;
            this.updateValue(newProp.value);
            if (this.isDynamicChange) {
              this.preventChange = false;
              this.isDynamicChange = false;
            }
            break;
          case "min":
          case "max":
            setValue(prop, getValue(prop, newProp), this);
            this.validateMinMax();
            this.updateValue(this.value);
            break;
          case "strictMode":
            this.strictMode = newProp.strictMode;
            this.updateValue(this.value);
            this.validateState();
            break;
          case "locale":
            this.initCultureFunc();
            this.l10n.setLocale(this.locale);
            this.setSpinButton();
            this.updatePlaceholder();
            Input.setPlaceholder(this.placeholder, this.element);
            this.updateValue(this.value);
            break;
          case "currency":
            {
              var propVal = getValue(prop, newProp);
              this.setProperties({
                currencyCode: propVal
              }, true);
              this.updateCurrency(prop, propVal);
            }
            break;
          case "currencyCode":
            {
              var propValue = getValue(prop, newProp);
              this.setProperties({
                currency: propValue
              }, true);
              this.updateCurrency("currency", propValue);
            }
            break;
          case "format":
            setValue(prop, getValue(prop, newProp), this);
            this.initCultureInfo();
            this.updateValue(this.value);
            break;
          case "decimals":
            this.decimals = newProp.decimals;
            this.updateValue(this.value);
        }
      }
    };
    NumericTextBox2.prototype.updateClearButton = function(newProp) {
      Input.setClearButton(newProp.showClearButton, this.element, this.inputWrapper, void 0, this.createElement);
      this.bindClearEvent();
    };
    NumericTextBox2.prototype.updateSpinButton = function(newProp) {
      if (newProp.showSpinButton) {
        this.spinBtnCreation();
      } else {
        detach(this.spinUp);
        detach(this.spinDown);
      }
    };
    NumericTextBox2.prototype.getModuleName = function() {
      return "numerictextbox";
    };
    __decorate12([Property("")], NumericTextBox2.prototype, "cssClass", void 0);
    __decorate12([Property(null)], NumericTextBox2.prototype, "value", void 0);
    __decorate12([Property(-Number.MAX_VALUE)], NumericTextBox2.prototype, "min", void 0);
    __decorate12([Property(Number.MAX_VALUE)], NumericTextBox2.prototype, "max", void 0);
    __decorate12([Property(1)], NumericTextBox2.prototype, "step", void 0);
    __decorate12([Property(null)], NumericTextBox2.prototype, "width", void 0);
    __decorate12([Property(null)], NumericTextBox2.prototype, "placeholder", void 0);
    __decorate12([Property({})], NumericTextBox2.prototype, "htmlAttributes", void 0);
    __decorate12([Property(true)], NumericTextBox2.prototype, "showSpinButton", void 0);
    __decorate12([Property(false)], NumericTextBox2.prototype, "readonly", void 0);
    __decorate12([Property(true)], NumericTextBox2.prototype, "enabled", void 0);
    __decorate12([Property(false)], NumericTextBox2.prototype, "showClearButton", void 0);
    __decorate12([Property(false)], NumericTextBox2.prototype, "enablePersistence", void 0);
    __decorate12([Property("n2")], NumericTextBox2.prototype, "format", void 0);
    __decorate12([Property(null)], NumericTextBox2.prototype, "decimals", void 0);
    __decorate12([Property(null)], NumericTextBox2.prototype, "currency", void 0);
    __decorate12([Property(null)], NumericTextBox2.prototype, "currencyCode", void 0);
    __decorate12([Property(true)], NumericTextBox2.prototype, "strictMode", void 0);
    __decorate12([Property(false)], NumericTextBox2.prototype, "validateDecimalOnType", void 0);
    __decorate12([Property("Never")], NumericTextBox2.prototype, "floatLabelType", void 0);
    __decorate12([Event()], NumericTextBox2.prototype, "created", void 0);
    __decorate12([Event()], NumericTextBox2.prototype, "destroyed", void 0);
    __decorate12([Event()], NumericTextBox2.prototype, "change", void 0);
    __decorate12([Event()], NumericTextBox2.prototype, "focus", void 0);
    __decorate12([Event()], NumericTextBox2.prototype, "blur", void 0);
    NumericTextBox2 = __decorate12([NotifyPropertyChanges], NumericTextBox2);
    return NumericTextBox2;
  }(Component)
);

// node_modules/@syncfusion/ej2-inputs/src/maskedtextbox/base/mask-base.js
var ERROR2 = "e-error";
var INPUTGROUP = "e-input-group";
var FLOATINPUT = "e-float-input";
var TOPLABEL = "e-label-top";
var BOTTOMLABEL = "e-label-bottom";
var regularExpressions = {
  "0": "[0-9]",
  "9": "[0-9 ]",
  "#": "[0-9 +-]",
  "L": "[A-Za-z]",
  "?": "[A-Za-z ]",
  "&": "[^ ]+",
  "C": "[^]+",
  "A": "[A-Za-z0-9]",
  "a": "[A-Za-z0-9 ]"
};
function createMask() {
  attributes(this.element, {
    "role": "textbox",
    "autocomplete": "off",
    "autocapitalize": "off",
    "spellcheck": "false",
    "aria-live": "assertive"
  });
  if (this.mask) {
    var splitMask = this.mask.split("]");
    for (var i = 0; i < splitMask.length; i++) {
      if (splitMask[i][splitMask[i].length - 1] === "\\") {
        splitMask[i] = splitMask[i] + "]";
        var splitInnerMask = splitMask[i].split("[");
        for (var j = 0; j < splitInnerMask.length; j++) {
          if (splitInnerMask[j][splitInnerMask[j].length - 1] === "\\") {
            splitInnerMask[j] = splitInnerMask[j] + "[";
          }
          pushIntoRegExpCollec.call(this, splitInnerMask[j]);
        }
      } else {
        var splitInnerMask = splitMask[i].split("[");
        if (splitInnerMask.length > 1) {
          var chkSpace = false;
          for (var j = 0; j < splitInnerMask.length; j++) {
            if (splitInnerMask[j] === "\\") {
              this.customRegExpCollec.push("[");
              this.hiddenMask += splitInnerMask[j] + "[";
            } else if (splitInnerMask[j] === "") {
              chkSpace = true;
            } else if (splitInnerMask[j] !== "" && chkSpace || j === splitInnerMask.length - 1) {
              this.customRegExpCollec.push("[" + splitInnerMask[j] + "]");
              this.hiddenMask += this.promptChar;
              chkSpace = false;
            } else {
              pushIntoRegExpCollec.call(this, splitInnerMask[j]);
            }
          }
        } else {
          pushIntoRegExpCollec.call(this, splitInnerMask[0]);
        }
      }
    }
    this.escapeMaskValue = this.hiddenMask;
    this.promptMask = this.hiddenMask.replace(/[09?LCAa#&]/g, this.promptChar);
    if (!isNullOrUndefined(this.customCharacters)) {
      for (var i = 0; i < this.promptMask.length; i++) {
        if (!isNullOrUndefined(this.customCharacters[this.promptMask[i]])) {
          this.promptMask = this.promptMask.replace(new RegExp(this.promptMask[i], "g"), this.promptChar);
        }
      }
    }
    var escapeNumber = 0;
    if (this.hiddenMask.match(new RegExp(/\\/))) {
      for (var i = 0; i < this.hiddenMask.length; i++) {
        var j = 0;
        if (i >= 1) {
          j = i;
        }
        escapeNumber = this.hiddenMask.length - this.promptMask.length;
        j = j - escapeNumber;
        if (i > 0 && this.hiddenMask[i - 1] !== "\\" && (this.hiddenMask[i] === ">" || this.hiddenMask[i] === "<" || this.hiddenMask[i] === "|")) {
          this.promptMask = this.promptMask.substring(0, j) + this.promptMask.substring(i + 1 - escapeNumber, this.promptMask.length);
          this.escapeMaskValue = this.escapeMaskValue.substring(0, j) + this.escapeMaskValue.substring(i + 1 - escapeNumber, this.escapeMaskValue.length);
        }
        if (this.hiddenMask[i] === "\\") {
          this.promptMask = this.promptMask.substring(0, j) + this.hiddenMask[i + 1] + this.promptMask.substring(i + 2 - escapeNumber, this.promptMask.length);
          this.escapeMaskValue = this.escapeMaskValue.substring(0, j) + this.escapeMaskValue[i + 1] + this.escapeMaskValue.substring(i + 2 - escapeNumber, this.escapeMaskValue.length);
        }
      }
    } else {
      this.promptMask = this.promptMask.replace(/[>|<]/g, "");
      this.escapeMaskValue = this.hiddenMask.replace(/[>|<]/g, "");
    }
    attributes(this.element, {
      "aria-invalid": "false"
    });
  }
}
function applyMask() {
  setElementValue.call(this, this.promptMask);
  setMaskValue.call(this, this.value);
}
function wireEvents2() {
  EventHandler.add(this.element, "keydown", maskInputKeyDownHandler, this);
  EventHandler.add(this.element, "keypress", maskInputKeyPressHandler, this);
  EventHandler.add(this.element, "keyup", maskInputKeyUpHandler, this);
  EventHandler.add(this.element, "input", maskInputHandler, this);
  EventHandler.add(this.element, "focus", maskInputFocusHandler, this);
  EventHandler.add(this.element, "blur", maskInputBlurHandler, this);
  EventHandler.add(this.element, "paste", maskInputPasteHandler, this);
  EventHandler.add(this.element, "cut", maskInputCutHandler, this);
  EventHandler.add(this.element, "drop", maskInputDropHandler, this);
  EventHandler.add(this.element, "mousedown", maskInputMouseDownHandler, this);
  EventHandler.add(this.element, "mouseup", maskInputMouseUpHandler, this);
  if (this.enabled) {
    bindClearEvent.call(this);
    if (this.formElement) {
      EventHandler.add(this.formElement, "reset", resetFormHandler, this);
    }
  }
}
function unwireEvents() {
  EventHandler.remove(this.element, "keydown", maskInputKeyDownHandler);
  EventHandler.remove(this.element, "keypress", maskInputKeyPressHandler);
  EventHandler.remove(this.element, "keyup", maskInputKeyUpHandler);
  EventHandler.remove(this.element, "input", maskInputHandler);
  EventHandler.remove(this.element, "focus", maskInputFocusHandler);
  EventHandler.remove(this.element, "blur", maskInputBlurHandler);
  EventHandler.remove(this.element, "paste", maskInputPasteHandler);
  EventHandler.remove(this.element, "cut", maskInputCutHandler);
  EventHandler.remove(this.element, "drop", maskInputDropHandler);
  EventHandler.remove(this.element, "mousedown", maskInputMouseDownHandler);
  EventHandler.remove(this.element, "mouseup", maskInputMouseUpHandler);
  if (this.formElement) {
    EventHandler.remove(this.formElement, "reset", resetFormHandler);
  }
}
function bindClearEvent() {
  if (this.showClearButton) {
    EventHandler.add(this.inputObj.clearButton, "mousedown touchstart", resetHandler, this);
  }
}
function resetHandler(e) {
  e.preventDefault();
  if (!this.inputObj.clearButton.classList.contains("e-clear-icon-hide") || this.inputObj.container.classList.contains("e-static-clear")) {
    clear.call(this, e);
    this.value = "";
  }
}
function clear(event2) {
  var value = this.element.value;
  setElementValue.call(this, this.promptMask);
  this.redoCollec.unshift({
    value: this.promptMask,
    startIndex: this.element.selectionStart,
    endIndex: this.element.selectionEnd
  });
  triggerMaskChangeEvent.call(this, event2, value);
  this.element.setSelectionRange(0, 0);
}
function resetFormHandler() {
  if (this.element.tagName === "EJS-MASKEDTEXTBOX") {
    setElementValue.call(this, this.promptMask);
  } else {
    this.value = this.initInputValue;
  }
}
function unstrippedValue(element2) {
  return element2.value;
}
function strippedValue(element2, maskValues) {
  var value = "";
  var k = 0;
  var checkMask = false;
  var maskValue = !isNullOrUndefined(maskValues) ? maskValues : !isNullOrUndefined(element2) && !isNullOrUndefined(this) ? element2.value : maskValues;
  if (maskValue !== this.promptMask) {
    for (var i = 0; i < this.customRegExpCollec.length; i++) {
      if (checkMask) {
        checkMask = false;
      }
      if (this.customRegExpCollec[k] === ">" || this.customRegExpCollec[k] === "<" || this.customRegExpCollec[k] === "|" || this.customRegExpCollec[k] === "\\") {
        --i;
        checkMask = true;
      }
      if (!checkMask) {
        if (maskValue[i] !== this.promptChar && !isNullOrUndefined(this.customRegExpCollec[k]) && (this._callPasteHandler || !isNullOrUndefined(this.regExpCollec[this.customRegExpCollec[k]]) && !this.maskedRegExp.includes(this.customRegExpCollec[k]) || this.customRegExpCollec[k].length > 2 && this.customRegExpCollec[k][0] === "[" && this.customRegExpCollec[k][this.customRegExpCollec[k].length - 1] === "]" || !isNullOrUndefined(this.customCharacters) && !isNullOrUndefined(this.customCharacters[this.customRegExpCollec[k]])) && maskValue !== "") {
          value += maskValue[i];
        }
      }
      ++k;
    }
  }
  if (this.mask === null || this.mask === "" && this.value !== void 0) {
    value = maskValue;
  }
  return value;
}
function pushIntoRegExpCollec(value) {
  for (var k = 0; k < value.length; k++) {
    this.hiddenMask += value[k];
    if (value[k] !== "\\") {
      this.customRegExpCollec.push(value[k]);
    } else if (value[k] === "\\" && !isNullOrUndefined(this.regExpCollec[value[k + 1]])) {
      this.maskedRegExp.push(value[k + 1]);
    }
  }
}
function maskInputMouseDownHandler() {
  this.isClicked = true;
}
function maskInputMouseUpHandler() {
  this.isClicked = false;
}
function maskInputFocusHandler(event2) {
  var _this = this;
  var inputElement = this.element;
  var startIndex = 0;
  var modelValue = strippedValue.call(this, inputElement);
  var toAllowForward = false;
  var toAllowBackward = false;
  var eventArgs = {
    selectionStart: inputElement.selectionStart,
    event: event2,
    value: this.value,
    maskedValue: inputElement.value,
    container: !isNullOrUndefined(this.inputObj) ? this.inputObj.container : this.inputObj,
    selectionEnd: inputElement.selectionEnd
  };
  if (!this.isClicked) {
    triggerFocus.call(this, eventArgs, inputElement);
  }
  if (this.mask) {
    if (!(!(modelValue === null || modelValue === "") || this.floatLabelType === "Always" || this.placeholder === null || this.placeholder === "")) {
      inputElement.value = this.promptMask;
    }
    setTimeout(function() {
      if (inputElement.selectionStart === _this.promptMask.length || inputElement.value[inputElement.selectionStart] === _this.promptChar) {
        toAllowForward = true;
      } else {
        for (var i = inputElement.selectionStart; i < _this.promptMask.length; i++) {
          if (inputElement.value[i] !== _this.promptChar) {
            if (inputElement.value[i] !== _this.promptMask[i]) {
              toAllowForward = false;
              break;
            }
          } else {
            toAllowForward = true;
            break;
          }
        }
      }
    });
    setTimeout(function() {
      var backSelectionStart = inputElement.selectionStart - 1;
      if (backSelectionStart === _this.promptMask.length - 1 || inputElement.value[backSelectionStart] === _this.promptChar) {
        toAllowBackward = true;
      } else {
        for (var i = backSelectionStart; i >= 0; i--) {
          if (inputElement.value[i] !== _this.promptChar) {
            if (inputElement.value[i] !== _this.promptMask[i]) {
              toAllowBackward = false;
              break;
            }
          } else {
            toAllowBackward = true;
            break;
          }
        }
      }
    });
    if (this.isClicked || this.floatLabelType !== "Always" && (modelValue === null || modelValue === "") && this.placeholder !== null && this.placeholder !== "") {
      for (startIndex = 0; startIndex < this.promptMask.length; startIndex++) {
        if (inputElement.value[startIndex] === this.promptChar) {
          setTimeout(function() {
            if (toAllowForward || toAllowBackward) {
              inputElement.selectionEnd = startIndex;
              inputElement.selectionStart = startIndex;
            }
            eventArgs = {
              selectionStart: inputElement.selectionStart,
              event: event2,
              value: _this.value,
              maskedValue: inputElement.value,
              container: !isNullOrUndefined(_this.inputObj) ? _this.inputObj.container : _this.inputObj,
              selectionEnd: inputElement.selectionEnd
            };
            triggerFocus.call(_this, eventArgs, inputElement);
          }, 110);
          break;
        }
      }
      if (isNullOrUndefined(inputElement.value.match(escapeRegExp(this.promptChar)))) {
        eventArgs = {
          selectionStart: inputElement.selectionStart,
          event: event2,
          value: this.value,
          maskedValue: inputElement.value,
          container: !isNullOrUndefined(this.inputObj) ? this.inputObj.container : this.inputObj,
          selectionEnd: inputElement.selectionEnd
        };
        triggerFocus.call(this, eventArgs, inputElement);
      }
      this.isClicked = false;
    }
  }
}
function triggerFocus(eventArgs, inputElement) {
  this.trigger("focus", eventArgs, function(eventArgs2) {
    inputElement.selectionStart = eventArgs2.selectionStart;
    inputElement.selectionEnd = eventArgs2.selectionEnd;
  });
}
function escapeRegExp(text) {
  return !isNullOrUndefined(text) ? text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&") : text;
}
function maskInputBlurHandler(event2) {
  this.blurEventArgs = {
    event: event2,
    value: this.value,
    maskedValue: this.element.value,
    container: !isNullOrUndefined(this.inputObj) ? this.inputObj.container : this.inputObj
  };
  this.trigger("blur", this.blurEventArgs);
  if (this.mask) {
    this.isFocus = false;
    if (this.placeholder && this.element.value === this.promptMask && this.floatLabelType !== "Always") {
      setElementValue.call(this, "");
      var labelElement = this.element.parentNode.querySelector(".e-float-text");
      if (this.floatLabelType === "Auto" && !isNullOrUndefined(labelElement) && labelElement.classList.contains(TOPLABEL)) {
        removeClass([labelElement], TOPLABEL);
      }
    }
  }
}
function maskInputPasteHandler(event2) {
  var _this = this;
  if (this.mask && !this.readonly) {
    var sIndex_1 = this.element.selectionStart;
    var eIndex_1 = this.element.selectionEnd;
    var oldValue_1 = this.element.value;
    setElementValue.call(this, "");
    this._callPasteHandler = true;
    setTimeout(function() {
      var value = _this.element.value.replace(/ /g, "");
      if (_this.redoCollec.length > 0 && _this.redoCollec[0].value === _this.element.value) {
        value = strippedValue.call(_this, _this.element);
      }
      setElementValue.call(_this, oldValue_1);
      _this.element.selectionStart = sIndex_1;
      _this.element.selectionEnd = eIndex_1;
      var i = 0;
      _this.maskKeyPress = true;
      do {
        validateValue.call(_this, value[i], false, null);
        ++i;
      } while (i < value.length);
      _this.maskKeyPress = false;
      _this._callPasteHandler = false;
      if (_this.element.value === oldValue_1) {
        var i_1 = 0;
        _this.maskKeyPress = true;
        do {
          validateValue.call(_this, value[i_1], false, null);
          ++i_1;
        } while (i_1 < value.length);
        _this.maskKeyPress = false;
      } else {
        triggerMaskChangeEvent.call(_this, event2, oldValue_1);
      }
    }, 1);
  }
}
function maskInputCutHandler(event2) {
  var _this = this;
  if (this.mask && !this.readonly) {
    var preValue_1 = this.element.value;
    var sIndex_2 = this.element.selectionStart;
    var eIndex = this.element.selectionEnd;
    this.undoCollec.push({
      value: this.element.value,
      startIndex: this.element.selectionStart,
      endIndex: this.element.selectionEnd
    });
    var value_1 = this.element.value.substring(0, sIndex_2) + this.promptMask.substring(sIndex_2, eIndex) + this.element.value.substring(eIndex);
    setTimeout(function() {
      setElementValue.call(_this, value_1);
      _this.element.selectionStart = _this.element.selectionEnd = sIndex_2;
      if (_this.element.value !== preValue_1) {
        triggerMaskChangeEvent.call(_this, event2, null);
      }
    }, 0);
  }
}
function maskInputDropHandler(event2) {
  event2.preventDefault();
}
function maskInputHandler(event2) {
  if (Browser.isIE === true && this.element.value === "" && this.floatLabelType === "Never") {
    return;
  }
  var eventArgs = {
    ctrlKey: false,
    keyCode: 229
  };
  extend(event2, eventArgs);
  if (this.mask) {
    if (this.element.value === "") {
      this.redoCollec.unshift({
        value: this.promptMask,
        startIndex: this.element.selectionStart,
        endIndex: this.element.selectionEnd
      });
    }
    if (this.element.value.length === 1) {
      this.element.value = this.element.value + this.promptMask;
      this.element.setSelectionRange(1, 1);
    }
    if (!this._callPasteHandler) {
      removeMaskInputValues.call(this, event2);
    }
    if (this.element.value.length > this.promptMask.length) {
      var startIndex = this.element.selectionStart;
      var addedValues = this.element.value.length - this.promptMask.length;
      var value = this.element.value.substring(startIndex - addedValues, startIndex);
      this.maskKeyPress = false;
      var i = 0;
      do {
        validateValue.call(this, value[i], event2.ctrlKey, event2);
        ++i;
      } while (i < value.length);
      if (this.element.value !== this.preEleVal) {
        triggerMaskChangeEvent.call(this, event2, null);
      }
    }
    var val = strippedValue.call(this, this.element);
    this.prevValue = val;
    this.value = val;
    if (val === "") {
      setElementValue.call(this, this.promptMask);
      this.element.setSelectionRange(0, 0);
    }
  }
}
function maskInputKeyDownHandler(event2) {
  if (this.mask && !this.readonly) {
    if (event2.keyCode !== 229) {
      if (event2.ctrlKey && (event2.keyCode === 89 || event2.keyCode === 90)) {
        event2.preventDefault();
      }
      removeMaskInputValues.call(this, event2);
    }
    var startValue = this.element.value;
    if (event2.ctrlKey && (event2.keyCode === 89 || event2.keyCode === 90)) {
      var collec = void 0;
      if (event2.keyCode === 90 && this.undoCollec.length > 0 && startValue !== this.undoCollec[this.undoCollec.length - 1].value) {
        collec = this.undoCollec[this.undoCollec.length - 1];
        this.redoCollec.unshift({
          value: this.element.value,
          startIndex: this.element.selectionStart,
          endIndex: this.element.selectionEnd
        });
        setElementValue.call(this, collec.value);
        this.element.selectionStart = collec.startIndex;
        this.element.selectionEnd = collec.endIndex;
        this.undoCollec.splice(this.undoCollec.length - 1, 1);
      } else if (event2.keyCode === 89 && this.redoCollec.length > 0 && startValue !== this.redoCollec[0].value) {
        collec = this.redoCollec[0];
        this.undoCollec.push({
          value: this.element.value,
          startIndex: this.element.selectionStart,
          endIndex: this.element.selectionEnd
        });
        setElementValue.call(this, collec.value);
        this.element.selectionStart = collec.startIndex;
        this.element.selectionEnd = collec.endIndex;
        this.redoCollec.splice(0, 1);
      }
    }
  }
}
function mobileRemoveFunction() {
  var collec;
  var sIndex = this.element.selectionStart;
  var eIndex = this.element.selectionEnd;
  if (this.redoCollec.length > 0) {
    collec = this.redoCollec[0];
    setElementValue.call(this, collec.value);
    if (collec.startIndex - sIndex === 1) {
      this.element.selectionStart = collec.startIndex;
      this.element.selectionEnd = collec.endIndex;
    } else {
      this.element.selectionStart = sIndex + 1;
      this.element.selectionEnd = eIndex + 1;
    }
  } else {
    setElementValue.call(this, this.promptMask);
    this.element.selectionStart = this.element.selectionEnd = sIndex;
  }
}
function autoFillMaskInputValues(isRemove, oldEventVal, event2) {
  if (event2.type === "input") {
    isRemove = false;
    oldEventVal = this.element.value;
    setElementValue.call(this, this.promptMask);
    setMaskValue.call(this, oldEventVal);
  }
  return isRemove;
}
function removeMaskInputValues(event2) {
  var isRemove = false;
  var oldEventVal;
  var isDeleted = false;
  if (this.element.value.length < this.promptMask.length) {
    isRemove = true;
    oldEventVal = this.element.value;
    isRemove = autoFillMaskInputValues.call(this, isRemove, oldEventVal, event2);
    mobileRemoveFunction.call(this);
  }
  if (this.element.value.length >= this.promptMask.length && event2.type === "input") {
    isRemove = autoFillMaskInputValues.call(this, isRemove, oldEventVal, event2);
  }
  var initStartIndex = this.element.selectionStart;
  var initEndIndex = this.element.selectionEnd;
  var startIndex = this.element.selectionStart;
  var endIndex = this.element.selectionEnd;
  var maskValue = this.hiddenMask.replace(/[>|\\<]/g, "");
  var curMask = maskValue[startIndex - 1];
  var deleteEndIndex = this.element.selectionEnd;
  if (isRemove || event2.keyCode === 8 || event2.keyCode === 46) {
    this.undoCollec.push({
      value: this.element.value,
      startIndex: this.element.selectionStart,
      endIndex
    });
    var multipleDel = false;
    var preValue = this.element.value;
    if (startIndex > 0 || (event2.keyCode === 8 || event2.keyCode === 46) && startIndex < this.element.value.length && this.element.selectionEnd - startIndex !== this.element.value.length) {
      var index = startIndex;
      if (startIndex !== endIndex) {
        startIndex = endIndex;
        if (event2.keyCode === 46) {
          multipleDel = true;
        }
      } else if (event2.keyCode === 46) {
        ++index;
      } else {
        --index;
      }
      for (var k = startIndex; event2.keyCode === 8 || isRemove || multipleDel ? k > index : k < index; event2.keyCode === 8 || isRemove || multipleDel ? k-- : k++) {
        for (var i = startIndex; event2.keyCode === 8 || isRemove || multipleDel ? i > 0 : i < this.element.value.length; event2.keyCode === 8 || isRemove || multipleDel ? i-- : i++) {
          var sIndex = void 0;
          if ((event2.keyCode === 8 || multipleDel) && (initStartIndex !== initEndIndex && initStartIndex !== startIndex || initStartIndex === initEndIndex) || isRemove) {
            curMask = maskValue[i - 1];
            sIndex = startIndex - 1;
          } else {
            curMask = maskValue[i];
            sIndex = startIndex;
            ++startIndex;
          }
          var oldValue = this.element.value[sIndex];
          if (isNullOrUndefined(this.regExpCollec["" + curMask]) && !isNullOrUndefined(this.customCharacters) && isNullOrUndefined(this.customCharacters["" + curMask]) && this.hiddenMask[sIndex] !== this.promptChar && this.customRegExpCollec[sIndex][0] !== "[" && this.customRegExpCollec[sIndex][this.customRegExpCollec[sIndex].length - 1] !== "]" || this.promptMask[sIndex] !== this.promptChar && isNullOrUndefined(this.customCharacters)) {
            this.element.selectionStart = this.element.selectionEnd = sIndex;
            event2.preventDefault();
            if (event2.keyCode === 46 && !multipleDel) {
              ++this.element.selectionStart;
            }
          } else {
            var value = this.element.value;
            var prompt_1 = this.promptChar;
            var elementValue = value.substring(0, sIndex) + prompt_1 + value.substring(startIndex, value.length);
            setElementValue.call(this, elementValue);
            event2.preventDefault();
            if (event2.keyCode === 46 && !multipleDel) {
              sIndex++;
            }
            this.element.selectionStart = this.element.selectionEnd = sIndex;
            isDeleted = true;
          }
          startIndex = this.element.selectionStart;
          if (!isDeleted && event2.keyCode === 8 || multipleDel || !isDeleted && !(event2.keyCode === 46)) {
            sIndex = startIndex - 1;
          } else {
            sIndex = startIndex;
            isDeleted = false;
          }
          oldValue = this.element.value[sIndex];
          if (initStartIndex !== initEndIndex && this.element.selectionStart === initStartIndex || this.promptMask[sIndex] === this.promptChar || oldValue !== this.promptMask[sIndex] && this.promptMask[sIndex] !== this.promptChar && !isNullOrUndefined(this.customCharacters)) {
            break;
          }
        }
      }
    }
    if (event2.keyCode === 46 && multipleDel && isDeleted) {
      this.element.selectionStart = this.element.selectionEnd = deleteEndIndex;
    }
    if (this.element.selectionStart === 0 && this.element.selectionEnd === this.element.value.length) {
      setElementValue.call(this, this.promptMask);
      event2.preventDefault();
      this.element.selectionStart = this.element.selectionEnd = startIndex;
    }
    this.redoCollec.unshift({
      value: this.element.value,
      startIndex: this.element.selectionStart,
      endIndex: this.element.selectionEnd
    });
    if (this.element.value !== preValue) {
      triggerMaskChangeEvent.call(this, event2, oldEventVal);
    }
  }
}
function maskInputKeyPressHandler(event2) {
  if (this.mask && !this.readonly) {
    var oldValue = this.element.value;
    if (!(event2.ctrlKey || event2.metaKey) || (event2.ctrlKey || event2.metaKey) && event2.code !== "KeyA" && event2.code !== "KeyY" && event2.code !== "KeyZ" && event2.code !== "KeyX" && event2.code !== "KeyC" && event2.code !== "KeyV") {
      this.maskKeyPress = true;
      var key = event2.key;
      if (key === "Spacebar") {
        key = String.fromCharCode(event2.keyCode);
      }
      if (!key) {
        this.isIosInvalid = true;
        validateValue.call(this, String.fromCharCode(event2.keyCode), event2.ctrlKey, event2);
        event2.preventDefault();
        this.isIosInvalid = false;
      } else if (key && key.length === 1) {
        validateValue.call(this, key, event2.ctrlKey, event2);
        event2.preventDefault();
      }
      if (event2.keyCode === 32 && key === " " && this.promptChar === " ") {
        this.element.selectionStart = this.element.selectionEnd = this.element.selectionStart - key.length;
      }
    }
    if (this.element.value !== oldValue) {
      triggerMaskChangeEvent.call(this, event2, oldValue);
    }
  }
}
function triggerMaskChangeEvent(event2, oldValue) {
  var prevOnChange = this.isProtectedOnChange;
  if (!isNullOrUndefined(this.changeEventArgs) && !this.isInitial) {
    var eventArgs = {};
    this.changeEventArgs = {
      value: this.element.value,
      maskedValue: this.element.value,
      isInteraction: false,
      isInteracted: false
    };
    if (this.mask) {
      this.changeEventArgs.value = strippedValue.call(this, this.element);
    }
    if (!isNullOrUndefined(event2)) {
      this.changeEventArgs.isInteracted = true;
      this.changeEventArgs.isInteraction = true;
      this.changeEventArgs.event = event2;
    }
    this.isProtectedOnChange = true;
    this.value = this.changeEventArgs.value;
    this.isProtectedOnChange = prevOnChange;
    merge(eventArgs, this.changeEventArgs);
    if (this.isAngular && this.preventChange) {
      this.preventChange = false;
    } else {
      this.trigger("change", eventArgs);
    }
  }
  this.preEleVal = this.element.value;
  this.prevValue = strippedValue.call(this, this.element);
}
function maskInputKeyUpHandler(event2) {
  if (this.mask && !this.readonly) {
    var collec = void 0;
    if (!this.maskKeyPress && event2.keyCode === 229) {
      var oldEventVal = void 0;
      if (this.element.value.length === 1) {
        this.element.value = this.element.value + this.promptMask;
        this.element.setSelectionRange(1, 1);
      }
      if (this.element.value.length > this.promptMask.length) {
        var startIndex = this.element.selectionStart;
        var addedValues = this.element.value.length - this.promptMask.length;
        var val_1 = this.element.value.substring(startIndex - addedValues, startIndex);
        if (this.undoCollec.length > 0) {
          collec = this.undoCollec[this.undoCollec.length - 1];
          var startIndex_1 = this.element.selectionStart;
          oldEventVal = collec.value;
          var oldVal = collec.value.substring(startIndex_1 - addedValues, startIndex_1);
          collec = this.redoCollec[0];
          val_1 = val_1.trim();
          var isSpace = Browser.isAndroid && val_1 === "";
          if (!isSpace && oldVal !== val_1 && collec.value.substring(startIndex_1 - addedValues, startIndex_1) !== val_1) {
            validateValue.call(this, val_1, event2.ctrlKey, event2);
          } else if (isSpace) {
            preventUnsupportedValues.call(this, event2, startIndex_1 - 1, this.element.selectionEnd - 1, val_1, event2.ctrlKey, false);
          }
        } else {
          oldEventVal = this.promptMask;
          validateValue.call(this, val_1, event2.ctrlKey, event2);
        }
        this.maskKeyPress = false;
        triggerMaskChangeEvent.call(this, event2, oldEventVal);
      }
    } else {
      removeMaskError.call(this);
    }
    var val = strippedValue.call(this, this.element);
    if (!(this.element.selectionStart === 0 && this.promptMask === this.element.value && val === "") || val === "" && this.value !== val) {
      this.prevValue = val;
      this.value = val;
    }
  } else {
    triggerMaskChangeEvent.call(this, event2);
  }
  if (this.element.selectionStart === 0 && this.element.selectionEnd === 0) {
    var temp_1 = this.element;
    setTimeout(function() {
      temp_1.setSelectionRange(0, 0);
    }, 0);
  }
}
function mobileSwipeCheck(key) {
  if (key.length > 1 && this.promptMask.length + key.length < this.element.value.length) {
    var elementValue = this.redoCollec[0].value.substring(0, this.redoCollec[0].startIndex) + key + this.redoCollec[0].value.substring(this.redoCollec[0].startIndex, this.redoCollec[0].value.length);
    setElementValue.call(this, elementValue);
    this.element.selectionStart = this.element.selectionEnd = this.redoCollec[0].startIndex + key.length;
  }
  this.element.selectionStart = this.element.selectionStart - key.length;
  this.element.selectionEnd = this.element.selectionEnd - key.length;
}
function mobileValidation(key) {
  if (!this.maskKeyPress) {
    mobileSwipeCheck.call(this, key);
  }
}
function validateValue(key, isCtrlKey, event2) {
  mobileValidation.call(this, key);
  if (isNullOrUndefined(this) || isNullOrUndefined(key)) {
    return;
  }
  var startIndex = this.element.selectionStart;
  var initStartIndex = startIndex;
  var curMask;
  var allowText = false;
  var value = this.element.value;
  var eventOldVal;
  var prevSupport = false;
  var isEqualVal = false;
  for (var k = 0; k < key.length; k++) {
    var keyValue = key[k];
    startIndex = this.element.selectionStart;
    if (!this.maskKeyPress && initStartIndex === startIndex) {
      startIndex = startIndex + k;
    }
    if (!this.maskKeyPress || startIndex < this.promptMask.length) {
      for (var i = startIndex; i < this.promptMask.length; i++) {
        var maskValue = this.escapeMaskValue;
        curMask = maskValue[startIndex];
        if (this.hiddenMask[startIndex] === "\\" && this.hiddenMask[startIndex + 1] === key) {
          isEqualVal = true;
        }
        if (isNullOrUndefined(this.regExpCollec["" + curMask]) && (isNullOrUndefined(this.customCharacters) || !isNullOrUndefined(this.customCharacters) && isNullOrUndefined(this.customCharacters["" + curMask])) && this.hiddenMask[startIndex] !== this.promptChar && this.customRegExpCollec[startIndex][0] !== "[" && this.customRegExpCollec[startIndex][this.customRegExpCollec[startIndex].length - 1] !== "]" || this.promptMask[startIndex] !== this.promptChar && isNullOrUndefined(this.customCharacters) || this.promptChar === curMask && this.escapeMaskValue === this.mask) {
          this.element.selectionStart = this.element.selectionEnd = startIndex + 1;
          startIndex = this.element.selectionStart;
          curMask = this.hiddenMask[startIndex];
        }
      }
      if (!isNullOrUndefined(this.customCharacters) && !isNullOrUndefined(this.customCharacters["" + curMask])) {
        var customValStr = this.customCharacters["" + curMask];
        var customValArr = customValStr.split(",");
        for (var i = 0; i < customValArr.length; i++) {
          if (keyValue.match(new RegExp("[" + customValArr[i] + "]"))) {
            allowText = true;
            break;
          }
        }
      } else if (!isNullOrUndefined(this.regExpCollec["" + curMask]) && keyValue.match(new RegExp(this.regExpCollec["" + curMask])) && this.promptMask[startIndex] === this.promptChar) {
        allowText = true;
      } else if (this.promptMask[startIndex] === this.promptChar && this.customRegExpCollec[startIndex][0] === "[" && this.customRegExpCollec[startIndex][this.customRegExpCollec[startIndex].length - 1] === "]" && keyValue.match(new RegExp(this.customRegExpCollec[startIndex]))) {
        allowText = true;
      }
      if ((!this.maskKeyPress || startIndex < this.hiddenMask.length) && allowText) {
        if (k === 0) {
          if (this.maskKeyPress) {
            this.undoCollec.push({
              value,
              startIndex,
              endIndex: startIndex
            });
          } else {
            var sIndex = this.element.selectionStart;
            var eIndex = this.element.selectionEnd;
            if (this.redoCollec.length > 0) {
              eventOldVal = this.redoCollec[0].value;
              setElementValue.call(this, eventOldVal);
              this.undoCollec.push(this.redoCollec[0]);
            } else {
              this.undoCollec.push({
                value: this.promptMask,
                startIndex,
                endIndex: startIndex
              });
              eventOldVal = this.promptMask;
              setElementValue.call(this, eventOldVal);
            }
            this.element.selectionStart = sIndex;
            this.element.selectionEnd = eIndex;
          }
        }
        startIndex = this.element.selectionStart;
        applySupportedValues.call(this, event2, startIndex, keyValue, eventOldVal, isEqualVal);
        prevSupport = true;
        if (k === key.length - 1) {
          this.redoCollec.unshift({
            value: this.element.value,
            startIndex: this.element.selectionStart,
            endIndex: this.element.selectionEnd
          });
        }
        allowText = false;
      } else {
        startIndex = this.element.selectionStart;
        preventUnsupportedValues.call(this, event2, startIndex, initStartIndex, key, isCtrlKey, prevSupport);
      }
      if (k === key.length - 1 && !allowText) {
        if (!Browser.isAndroid || Browser.isAndroid && startIndex < this.promptMask.length) {
          this.redoCollec.unshift({
            value: this.element.value,
            startIndex: this.element.selectionStart,
            endIndex: this.element.selectionEnd
          });
        }
      }
    } else {
      if (key.length === 1 && !isCtrlKey && !isNullOrUndefined(event2)) {
        addMaskErrorClass.call(this);
      }
    }
  }
}
function applySupportedValues(event2, startIndex, keyValue, eventOldVal, isEqualVal) {
  if (this.hiddenMask.length > this.promptMask.length) {
    keyValue = changeToLowerUpperCase.call(this, keyValue, this.element.value);
  }
  if (!isEqualVal) {
    var value = this.element.value;
    var elementValue = value.substring(0, startIndex) + keyValue + value.substring(startIndex + 1, value.length);
    setElementValue.call(this, elementValue);
    this.element.selectionStart = this.element.selectionEnd = startIndex + 1;
  }
}
function preventUnsupportedValues(event2, sIdx, idx, key, ctrl, chkSupport) {
  if (!this.maskKeyPress) {
    var value = this.element.value;
    if (sIdx >= this.promptMask.length) {
      setElementValue.call(this, value.substring(0, sIdx));
    } else {
      if (idx === sIdx) {
        setElementValue.call(this, value.substring(0, sIdx) + value.substring(sIdx + 1, value.length));
      } else {
        if (this.promptMask.length === this.element.value.length) {
          setElementValue.call(this, value.substring(0, sIdx) + value.substring(sIdx, value.length));
        } else {
          setElementValue.call(this, value.substring(0, idx) + value.substring(idx + 1, value.length));
        }
      }
      this.element.selectionStart = this.element.selectionEnd = chkSupport || this.element.value[idx] !== this.promptChar ? sIdx : idx;
    }
    addMaskErrorClass.call(this);
  }
  if (key.length === 1 && !ctrl && !isNullOrUndefined(event2)) {
    addMaskErrorClass.call(this);
  }
}
function addMaskErrorClass() {
  var _this = this;
  var parentElement = this.element.parentNode;
  var timer = 200;
  if (parentElement.classList.contains(INPUTGROUP) || parentElement.classList.contains(FLOATINPUT)) {
    addClass([parentElement], ERROR2);
  } else {
    addClass([this.element], ERROR2);
  }
  if (this.isIosInvalid === true) {
    timer = 400;
  }
  attributes(this.element, {
    "aria-invalid": "true"
  });
  setTimeout(function() {
    if (!_this.maskKeyPress) {
      removeMaskError.call(_this);
    }
  }, timer);
}
function removeMaskError() {
  var parentElement = this.element.parentNode;
  if (!isNullOrUndefined(parentElement)) {
    removeClass([parentElement], ERROR2);
  }
  removeClass([this.element], ERROR2);
  attributes(this.element, {
    "aria-invalid": "false"
  });
}
function changeToLowerUpperCase(key, value) {
  var promptMask;
  var i;
  var curVal = value;
  var caseCount = 0;
  for (i = 0; i < this.hiddenMask.length; i++) {
    if (this.hiddenMask[i] === "\\") {
      promptMask = curVal.substring(0, i) + "\\" + curVal.substring(i, curVal.length);
    }
    if (this.hiddenMask[i] === ">" || this.hiddenMask[i] === "<" || this.hiddenMask[i] === "|") {
      if (this.hiddenMask[i] !== curVal[i]) {
        promptMask = curVal.substring(0, i) + this.hiddenMask[i] + curVal.substring(i, curVal.length);
      }
      ++caseCount;
    }
    if (promptMask) {
      if (promptMask[i] === this.promptChar && i > this.element.selectionStart || this.element.value.indexOf(this.promptChar) < 0 && this.element.selectionStart + caseCount === i) {
        caseCount = 0;
        break;
      }
      curVal = promptMask;
    }
  }
  while (i >= 0 && promptMask) {
    if (i === 0 || promptMask[i - 1] !== "\\") {
      if (promptMask[i] === ">") {
        key = key.toUpperCase();
        break;
      } else if (promptMask[i] === "<") {
        key = key.toLowerCase();
        break;
      } else if (promptMask[i] === "|") {
        break;
      }
    }
    --i;
  }
  return key;
}
function setMaskValue(val) {
  if (this.mask && val !== void 0 && (this.prevValue === void 0 || this.prevValue !== val)) {
    this.maskKeyPress = true;
    setElementValue.call(this, this.promptMask);
    if (val !== "" && !(val === null && this.floatLabelType === "Never" && this.placeholder)) {
      this.element.selectionStart = 0;
      this.element.selectionEnd = 0;
    }
    if (val !== null) {
      for (var i = 0; i < val.length; i++) {
        validateValue.call(this, val[i], false, null);
      }
    }
    var newVal = strippedValue.call(this, this.element);
    this.prevValue = newVal;
    this.value = newVal;
    triggerMaskChangeEvent.call(this, null, null);
    this.maskKeyPress = false;
    var labelElement = this.element.parentNode.querySelector(".e-float-text");
    if (this.element.value === this.promptMask && this.floatLabelType === "Auto" && this.placeholder && !isNullOrUndefined(labelElement) && labelElement.classList.contains(TOPLABEL) && !this.isFocus) {
      removeClass([labelElement], TOPLABEL);
      addClass([labelElement], BOTTOMLABEL);
      setElementValue.call(this, "");
    }
  }
  if (this.mask === null || this.mask === "" && this.value !== void 0) {
    setElementValue.call(this, this.value);
  }
}
function setElementValue(val, element2) {
  if (!this.isFocus && this.floatLabelType === "Auto" && this.placeholder && isNullOrUndefined(this.value)) {
    val = "";
  }
  var value = strippedValue.call(this, element2 ? element2 : this.element, val);
  if (value === null || value === "") {
    Input.setValue(val, element2 ? element2 : this.element, this.floatLabelType, false);
    if (this.showClearButton) {
      this.inputObj.clearButton.classList.add("e-clear-icon-hide");
    }
  } else {
    Input.setValue(val, element2 ? element2 : this.element, this.floatLabelType, this.showClearButton);
  }
}
var MaskUndo = (
  /** @class */
  /* @__PURE__ */ function() {
    function MaskUndo2() {
    }
    return MaskUndo2;
  }()
);
var maskUndo = new MaskUndo();

// node_modules/@syncfusion/ej2-inputs/src/maskedtextbox/maskedtextbox/maskedtextbox.js
var __extends14 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate13 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ROOT4 = "e-control-wrapper e-mask";
var INPUT = "e-input";
var COMPONENT2 = "e-maskedtextbox";
var CONTROL2 = "e-control";
var MASKINPUT_FOCUS = "e-input-focus";
var wrapperAttr = ["title", "style", "class"];
var MaskedTextBox = (
  /** @class */
  function(_super) {
    __extends14(MaskedTextBox2, _super);
    function MaskedTextBox2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.initInputValue = "";
      _this.preventChange = false;
      _this.isClicked = false;
      _this.maskOptions = options;
      return _this;
    }
    MaskedTextBox2.prototype.getModuleName = function() {
      return "maskedtextbox";
    };
    MaskedTextBox2.prototype.preRender = function() {
      this.promptMask = "";
      this.hiddenMask = "";
      this.escapeMaskValue = "";
      this.regExpCollec = regularExpressions;
      this.customRegExpCollec = [];
      this.maskedRegExp = [];
      this.undoCollec = [];
      this.redoCollec = [];
      this.changeEventArgs = {};
      this.focusEventArgs = {};
      this.blurEventArgs = {};
      this.maskKeyPress = false;
      this.isFocus = false;
      this.isInitial = false;
      this.isIosInvalid = false;
      var ejInstance = getValue("ej2_instances", this.element);
      this.cloneElement = this.element.cloneNode(true);
      removeClass([this.cloneElement], [CONTROL2, COMPONENT2, "e-lib"]);
      this.angularTagName = null;
      this.formElement = closest(this.element, "form");
      if (this.element.tagName === "EJS-MASKEDTEXTBOX") {
        this.angularTagName = this.element.tagName;
        var input = this.createElement("input");
        for (var i = 0; i < this.element.attributes.length; i++) {
          input.setAttribute(this.element.attributes[i].nodeName, this.element.attributes[i].nodeValue);
          input.innerHTML = this.element.innerHTML;
        }
        if (this.element.hasAttribute("id")) {
          this.element.removeAttribute("id");
        }
        if (this.element.hasAttribute("name")) {
          this.element.removeAttribute("name");
        }
        this.element.classList.remove("e-control", "e-maskedtextbox");
        this.element.classList.add("e-mask-container");
        this.element.appendChild(input);
        this.element = input;
        setValue("ej2_instances", ejInstance, this.element);
      }
      this.updateHTMLAttrToElement();
      this.checkHtmlAttributes(false);
      if (this.formElement) {
        this.initInputValue = this.value;
      }
    };
    MaskedTextBox2.prototype.getPersistData = function() {
      var keyEntity = ["value"];
      return this.addOnPersist(keyEntity);
    };
    MaskedTextBox2.prototype.render = function() {
      if (this.element.tagName.toLowerCase() === "input") {
        if (this.floatLabelType === "Never") {
          addClass([this.element], INPUT);
        }
        this.createWrapper();
        this.updateHTMLAttrToWrapper();
        if (this.element.name === "") {
          this.element.setAttribute("name", this.element.id);
        }
        this.isInitial = true;
        this.resetMaskedTextBox();
        this.isInitial = false;
        this.setMaskPlaceholder(true, false);
        this.setWidth(this.width);
        this.preEleVal = this.element.value;
        if (!Browser.isDevice && (Browser.info.version === "11.0" || Browser.info.name === "edge")) {
          this.element.blur();
        }
        if (Browser.isDevice && Browser.isIos) {
          this.element.blur();
        }
        if (this.element.getAttribute("value") || this.value) {
          this.element.setAttribute("value", this.element.value);
        }
        if (!isNullOrUndefined(closest(this.element, "fieldset")) && closest(this.element, "fieldset").disabled) {
          this.enabled = false;
        }
        if (!this.element.hasAttribute("aria-labelledby") && !this.element.hasAttribute("placeholder") && !this.element.hasAttribute("aria-label")) {
          this.element.setAttribute("aria-label", "maskedtextbox");
        }
        this.renderComplete();
      }
    };
    MaskedTextBox2.prototype.updateHTMLAttrToElement = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (wrapperAttr.indexOf(key) < 0) {
            this.element.setAttribute(key, this.htmlAttributes["" + key]);
          }
        }
      }
    };
    MaskedTextBox2.prototype.updateCssClass = function(newClass, oldClass) {
      Input.setCssClass(this.getValidClassList(newClass), [this.inputObj.container], this.getValidClassList(oldClass));
    };
    MaskedTextBox2.prototype.getValidClassList = function(maskClassName) {
      var result = maskClassName;
      if (!isNullOrUndefined(maskClassName) && maskClassName !== "") {
        result = maskClassName.replace(/\s+/g, " ").trim();
      }
      return result;
    };
    MaskedTextBox2.prototype.updateHTMLAttrToWrapper = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (wrapperAttr.indexOf(key) > -1) {
            if (key === "class") {
              var updatedClassValues = this.htmlAttributes["" + key].replace(/\s+/g, " ").trim();
              if (updatedClassValues !== "") {
                addClass([this.inputObj.container], updatedClassValues.split(" "));
              }
            } else if (key === "style") {
              var maskStyle = this.inputObj.container.getAttribute(key);
              maskStyle = !isNullOrUndefined(maskStyle) ? maskStyle + this.htmlAttributes["" + key] : this.htmlAttributes["" + key];
              this.inputObj.container.setAttribute(key, maskStyle);
            } else {
              this.inputObj.container.setAttribute(key, this.htmlAttributes["" + key]);
            }
          }
        }
      }
    };
    MaskedTextBox2.prototype.resetMaskedTextBox = function() {
      this.promptMask = "";
      this.hiddenMask = "";
      this.escapeMaskValue = "";
      this.customRegExpCollec = [];
      this.undoCollec = [];
      this.redoCollec = [];
      if (this.promptChar && this.promptChar.length > 1) {
        this.promptChar = this.promptChar[0];
      }
      createMask.call(this);
      applyMask.call(this);
      if (this.mask === null || this.mask === "" && this.value !== void 0) {
        setElementValue.call(this, this.value);
      }
      var val = strippedValue.call(this, this.element);
      this.prevValue = val;
      this.value = val;
      if (!this.isInitial) {
        unwireEvents.call(this);
      }
      wireEvents2.call(this);
    };
    MaskedTextBox2.prototype.setMaskPlaceholder = function(setVal, dynamicPlaceholder) {
      if (dynamicPlaceholder || this.placeholder) {
        Input.setPlaceholder(this.placeholder, this.element);
        if (this.element.value === this.promptMask && setVal && this.floatLabelType !== "Always" || this.element.value === this.promptMask && this.floatLabelType === "Never") {
          setElementValue.call(this, "");
        }
      }
    };
    MaskedTextBox2.prototype.setWidth = function(width) {
      if (!isNullOrUndefined(width)) {
        if (typeof width === "number") {
          this.inputObj.container.style.width = formatUnit(width);
          this.element.style.width = formatUnit(width);
        } else if (typeof width === "string") {
          var elementWidth = width.match(/px|%|em/) ? width : formatUnit(width);
          this.inputObj.container.style.width = elementWidth;
          this.element.style.width = elementWidth;
        }
      }
    };
    MaskedTextBox2.prototype.checkHtmlAttributes = function(isDynamic) {
      var attributes2 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ["placeholder", "disabled", "value", "readonly"];
      for (var _i = 0, attributes_1 = attributes2; _i < attributes_1.length; _i++) {
        var key = attributes_1[_i];
        if (!isNullOrUndefined(this.element.getAttribute(key))) {
          switch (key) {
            case "placeholder":
              if (isNullOrUndefined(this.maskOptions) || this.maskOptions["placeholder"] === void 0 || isDynamic) {
                this.setProperties({
                  placeholder: this.element.placeholder
                }, !isDynamic);
              }
              break;
            case "disabled":
              if (isNullOrUndefined(this.maskOptions) || this.maskOptions["enabled"] === void 0 || isDynamic) {
                var isEnabled = this.element.getAttribute(key) === "disabled" || this.element.getAttribute(key) === "" || this.element.getAttribute(key) === "true" ? false : true;
                this.setProperties({
                  enabled: isEnabled
                }, !isDynamic);
              }
              break;
            case "value":
              if (isNullOrUndefined(this.maskOptions) || this.maskOptions["value"] === void 0 || isDynamic) {
                this.setProperties({
                  value: this.element.value
                }, !isDynamic);
              }
              break;
            case "readonly":
              if (isNullOrUndefined(this.maskOptions) || this.maskOptions["readonly"] === void 0 || isDynamic) {
                var isReadonly = this.element.getAttribute(key) === "readonly" || this.element.getAttribute(key) === "" || this.element.getAttribute(key) === "true" ? true : false;
                this.setProperties({
                  readonly: isReadonly
                }, !isDynamic);
              }
              break;
          }
        }
      }
    };
    MaskedTextBox2.prototype.createWrapper = function() {
      var updatedCssClassValues = this.cssClass;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        updatedCssClassValues = this.getValidClassList(this.cssClass);
      }
      this.inputObj = Input.createInput({
        element: this.element,
        floatLabelType: this.floatLabelType,
        properties: {
          enableRtl: this.enableRtl,
          cssClass: updatedCssClassValues,
          enabled: this.enabled,
          readonly: this.readonly,
          placeholder: this.placeholder,
          showClearButton: this.showClearButton
        }
      }, this.createElement);
      this.inputObj.container.setAttribute("class", ROOT4 + " " + this.inputObj.container.getAttribute("class"));
    };
    MaskedTextBox2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "value":
            setMaskValue.call(this, this.value);
            if (this.placeholder && !this.isFocus) {
              this.setMaskPlaceholder(false, false);
            }
            if (this.value === "" && oldProp.value != null) {
              this.element.selectionStart = 0;
              this.element.selectionEnd = 0;
            }
            break;
          case "placeholder":
            this.setMaskPlaceholder(true, true);
            break;
          case "width":
            this.setWidth(newProp.width);
            Input.calculateWidth(this.element, this.inputObj.container);
            break;
          case "cssClass":
            this.updateCssClass(newProp.cssClass, oldProp.cssClass);
            break;
          case "enabled":
            Input.setEnabled(newProp.enabled, this.element, this.floatLabelType, this.inputObj.container);
            break;
          case "readonly":
            Input.setReadonly(newProp.readonly, this.element);
            break;
          case "enableRtl":
            Input.setEnableRtl(newProp.enableRtl, [this.inputObj.container]);
            break;
          case "customCharacters":
            this.customCharacters = newProp.customCharacters;
            this.resetMaskedTextBox();
            break;
          case "showClearButton":
            Input.setClearButton(newProp.showClearButton, this.element, this.inputObj, void 0, this.createElement);
            bindClearEvent.call(this);
            break;
          case "floatLabelType":
            this.floatLabelType = newProp.floatLabelType;
            Input.removeFloating(this.inputObj);
            Input.addFloating(this.element, this.floatLabelType, this.placeholder, this.createElement);
            break;
          case "htmlAttributes":
            this.updateHTMLAttrToElement();
            this.updateHTMLAttrToWrapper();
            this.checkHtmlAttributes(true);
            break;
          case "mask":
            {
              var strippedValue_1 = this.value;
              this.mask = newProp.mask;
              this.maskedRegExp = [];
              this.updateValue(strippedValue_1);
            }
            break;
          case "promptChar": {
            if (newProp.promptChar.length > 1) {
              newProp.promptChar = newProp.promptChar[0];
            }
            if (newProp.promptChar) {
              this.promptChar = newProp.promptChar;
            } else {
              this.promptChar = "_";
            }
            var value = this.element.value.replace(new RegExp("[" + oldProp.promptChar + "]", "g"), this.promptChar);
            if (this.promptMask === this.element.value) {
              value = this.promptMask.replace(new RegExp("[" + oldProp.promptChar + "]", "g"), this.promptChar);
            }
            this.promptMask = this.promptMask.replace(new RegExp("[" + oldProp.promptChar + "]", "g"), this.promptChar);
            this.undoCollec = this.redoCollec = [];
            setElementValue.call(this, value);
            break;
          }
        }
      }
      this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;
    };
    MaskedTextBox2.prototype.updateValue = function(strippedVal) {
      this.resetMaskedTextBox();
      setMaskValue.call(this, strippedVal);
    };
    MaskedTextBox2.prototype.getMaskedValue = function() {
      return unstrippedValue.call(this, this.element);
    };
    MaskedTextBox2.prototype.focusIn = function() {
      if (document.activeElement !== this.element && this.enabled) {
        this.isFocus = true;
        this.element.focus();
        addClass([this.inputObj.container], [MASKINPUT_FOCUS]);
      }
    };
    MaskedTextBox2.prototype.focusOut = function() {
      if (document.activeElement === this.element && this.enabled) {
        this.isFocus = false;
        this.element.blur();
        removeClass([this.inputObj.container], [MASKINPUT_FOCUS]);
      }
    };
    MaskedTextBox2.prototype.destroy = function() {
      unwireEvents.call(this);
      if (this.showClearButton) {
        this.clearButton = document.getElementsByClassName("e-clear-icon")[0];
      }
      var attrArray = ["aria-labelledby", "role", "autocomplete", "aria-readonly", "aria-disabled", "autocapitalize", "spellcheck", "aria-autocomplete", "aria-live", "aria-invalid"];
      for (var i = 0; i < attrArray.length; i++) {
        this.element.removeAttribute(attrArray[i]);
      }
      this.element.classList.remove("e-input");
      if (this.inputObj) {
        this.inputObj.container.insertAdjacentElement("afterend", this.element);
        detach(this.inputObj.container);
      }
      this.blurEventArgs = null;
      Input.destroy({
        element: this.element,
        floatLabelType: this.floatLabelType,
        properties: this.properties
      }, this.clearButton);
      this.changeEventArgs = null;
      this.inputObj = null;
      _super.prototype.destroy.call(this);
    };
    __decorate13([Property(null)], MaskedTextBox2.prototype, "cssClass", void 0);
    __decorate13([Property(null)], MaskedTextBox2.prototype, "width", void 0);
    __decorate13([Property(null)], MaskedTextBox2.prototype, "placeholder", void 0);
    __decorate13([Property("Never")], MaskedTextBox2.prototype, "floatLabelType", void 0);
    __decorate13([Property({})], MaskedTextBox2.prototype, "htmlAttributes", void 0);
    __decorate13([Property(true)], MaskedTextBox2.prototype, "enabled", void 0);
    __decorate13([Property(false)], MaskedTextBox2.prototype, "readonly", void 0);
    __decorate13([Property(false)], MaskedTextBox2.prototype, "showClearButton", void 0);
    __decorate13([Property(false)], MaskedTextBox2.prototype, "enablePersistence", void 0);
    __decorate13([Property(null)], MaskedTextBox2.prototype, "mask", void 0);
    __decorate13([Property("_")], MaskedTextBox2.prototype, "promptChar", void 0);
    __decorate13([Property(null)], MaskedTextBox2.prototype, "value", void 0);
    __decorate13([Property(null)], MaskedTextBox2.prototype, "customCharacters", void 0);
    __decorate13([Event()], MaskedTextBox2.prototype, "created", void 0);
    __decorate13([Event()], MaskedTextBox2.prototype, "destroyed", void 0);
    __decorate13([Event()], MaskedTextBox2.prototype, "change", void 0);
    __decorate13([Event()], MaskedTextBox2.prototype, "focus", void 0);
    __decorate13([Event()], MaskedTextBox2.prototype, "blur", void 0);
    MaskedTextBox2 = __decorate13([NotifyPropertyChanges], MaskedTextBox2);
    return MaskedTextBox2;
  }(Component)
);

// node_modules/@syncfusion/ej2-inputs/src/form-validator/form-validator.js
var __extends15 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate14 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var regex = {
  /* eslint-disable no-useless-escape */
  EMAIL: new RegExp("^[A-Za-z0-9._%+-]{1,}@[A-Za-z0-9._%+-]{1,}([.]{1}[a-zA-Z0-9]{2,}|[.]{1}[a-zA-Z0-9]{2,4}[.]{1}[a-zA-Z0-9]{2,4})$"),
  /* eslint-disable-next-line security/detect-unsafe-regex */
  URL: /^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&'\(\)\*\+,;=.]+$/m,
  DATE_ISO: new RegExp("^([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$"),
  DIGITS: new RegExp("^[0-9]*$"),
  PHONE: new RegExp("^[+]?[0-9]{9,13}$"),
  CREDITCARD: new RegExp("^\\d{13,16}$")
  /* eslint-enable no-useless-escape */
};
var ErrorOption;
(function(ErrorOption2) {
  ErrorOption2[ErrorOption2["Message"] = 0] = "Message";
  ErrorOption2[ErrorOption2["Label"] = 1] = "Label";
})(ErrorOption || (ErrorOption = {}));
var FormValidator = (
  /** @class */
  function(_super) {
    __extends15(FormValidator2, _super);
    function FormValidator2(element2, options) {
      var _this = _super.call(this, options, element2) || this;
      _this.validated = [];
      _this.errorRules = [];
      _this.allowSubmit = false;
      _this.required = "required";
      _this.infoElement = null;
      _this.inputElement = null;
      _this.selectQuery = "input:not([type=reset]):not([type=button]), select, textarea";
      _this.localyMessage = {};
      _this.defaultMessages = {
        required: "This field is required.",
        email: "Please enter a valid email address.",
        url: "Please enter a valid URL.",
        date: "Please enter a valid date.",
        dateIso: "Please enter a valid date ( ISO ).",
        creditcard: "Please enter valid card number",
        number: "Please enter a valid number.",
        digits: "Please enter only digits.",
        maxLength: "Please enter no more than {0} characters.",
        minLength: "Please enter at least {0} characters.",
        rangeLength: "Please enter a value between {0} and {1} characters long.",
        range: "Please enter a value between {0} and {1}.",
        max: "Please enter a value less than or equal to {0}.",
        min: "Please enter a value greater than or equal to {0}.",
        regex: "Please enter a correct value.",
        tel: "Please enter a valid phone number.",
        pattern: "Please enter a correct pattern value.",
        equalTo: "Please enter the valid match text"
      };
      if (typeof _this.rules === "undefined") {
        _this.rules = {};
      }
      _this.l10n = new L10n("formValidator", _this.defaultMessages, _this.locale);
      if (_this.locale) {
        _this.localeFunc();
      }
      onIntlChange.on("notifyExternalChange", _this.afterLocalization, _this);
      element2 = typeof element2 === "string" ? select(element2, document) : element2;
      if (_this.element != null) {
        _this.element.setAttribute("novalidate", "");
        _this.inputElements = selectAll(_this.selectQuery, _this.element);
        _this.createHTML5Rules();
        _this.wireEvents();
      } else {
        return void 0;
      }
      return _this;
    }
    FormValidator_1 = FormValidator2;
    FormValidator2.prototype.addRules = function(name, rules) {
      if (name) {
        if (this.rules.hasOwnProperty(name)) {
          extend(this.rules["" + name], rules, {});
        } else {
          this.rules["" + name] = rules;
        }
      }
    };
    FormValidator2.prototype.removeRules = function(name, rules) {
      if (!name && !rules) {
        this.rules = {};
      } else if (this.rules["" + name] && !rules) {
        delete this.rules["" + name];
      } else if (!isNullOrUndefined(this.rules["" + name] && rules)) {
        for (var i = 0; i < rules.length; i++) {
          delete this.rules["" + name][rules[parseInt(i.toString(), 10)]];
        }
      } else {
        return;
      }
    };
    FormValidator2.prototype.validate = function(selected) {
      var rules = Object.keys(this.rules);
      if (selected && rules.length) {
        this.validateRules(selected);
        return rules.indexOf(selected) !== -1 && this.errorRules.filter(function(data) {
          return data.name === selected;
        }).length === 0;
      } else {
        this.errorRules = [];
        for (var _i = 0, rules_1 = rules; _i < rules_1.length; _i++) {
          var name_1 = rules_1[_i];
          this.validateRules(name_1);
        }
        return this.errorRules.length === 0;
      }
    };
    FormValidator2.prototype.reset = function() {
      this.element.reset();
      this.clearForm();
    };
    FormValidator2.prototype.getInputElement = function(name) {
      this.inputElement = select('[name="' + name + '"]', this.element);
      return this.inputElement;
    };
    FormValidator2.prototype.destroy = function() {
      this.reset();
      this.unwireEvents();
      this.rules = {};
      var elements = selectAll("." + this.errorClass + ", ." + this.validClass, this.element);
      for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
        var element2 = elements_1[_i];
        detach(element2);
      }
      _super.prototype.destroy.call(this);
      this.infoElement = null;
      onIntlChange.off("notifyExternalChange", this.afterLocalization);
    };
    FormValidator2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "locale":
            this.localeFunc();
            break;
        }
      }
    };
    FormValidator2.prototype.localeFunc = function() {
      for (var _i = 0, _a = Object.keys(this.defaultMessages); _i < _a.length; _i++) {
        var key = _a[_i];
        this.l10n.setLocale(this.locale);
        var value = this.l10n.getConstant(key);
        this.localyMessage["" + key] = value;
      }
    };
    FormValidator2.prototype.getModuleName = function() {
      return "formvalidator";
    };
    FormValidator2.prototype.afterLocalization = function(args) {
      this.locale = args.locale;
      this.localeFunc();
    };
    FormValidator2.prototype.refresh = function() {
      this.unwireEvents();
      this.inputElements = selectAll(this.selectQuery, this.element);
      this.wireEvents();
    };
    FormValidator2.prototype.clearForm = function() {
      this.errorRules = [];
      this.validated = [];
      var elements = selectAll(this.selectQuery, this.element);
      for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {
        var element2 = elements_2[_i];
        var input = element2;
        input.removeAttribute("aria-invalid");
        var inputParent = input.parentElement;
        var grandParent = inputParent.parentElement;
        if (inputParent.classList.contains("e-control-wrapper") || inputParent.classList.contains("e-wrapper") || input.classList.contains("e-input") && inputParent.classList.contains("e-input-group")) {
          inputParent.classList.remove(this.errorClass);
        } else if (grandParent != null && (grandParent.classList.contains("e-control-wrapper") || grandParent.classList.contains("e-wrapper"))) {
          grandParent.classList.remove(this.errorClass);
        } else {
          input.classList.remove(this.errorClass);
        }
        if (input.name.length > 0) {
          this.getInputElement(input.name);
          this.getErrorElement(input.name);
          this.hideMessage(input.name);
        }
        if (inputParent.classList.contains("e-control-wrapper") || inputParent.classList.contains("e-wrapper") || input.classList.contains("e-input") && inputParent.classList.contains("e-input-group")) {
          inputParent.classList.remove(this.validClass);
        } else if (grandParent != null && (grandParent.classList.contains("e-control-wrapper") || grandParent.classList.contains("e-wrapper"))) {
          grandParent.classList.remove(this.validClass);
        } else {
          input.classList.remove(this.validClass);
        }
      }
    };
    FormValidator2.prototype.createHTML5Rules = function() {
      var defRules = ["required", "validateHidden", "regex", "rangeLength", "maxLength", "minLength", "dateIso", "digits", "pattern", "data-val-required", "type", "data-validation", "min", "max", "range", "equalTo", "data-val-minlength-min", "data-val-equalto-other", "data-val-maxlength-max", "data-val-range-min", "data-val-regex-pattern", "data-val-length-max", "data-val-creditcard", "data-val-phone"];
      var acceptedTypes = ["hidden", "email", "url", "date", "number", "tel"];
      for (var _i = 0, _a = this.inputElements; _i < _a.length; _i++) {
        var input = _a[_i];
        var allRule = {};
        for (var _b = 0, defRules_1 = defRules; _b < defRules_1.length; _b++) {
          var rule = defRules_1[_b];
          if (input.getAttribute(rule) !== null) {
            switch (rule) {
              case "required":
                this.defRule(input, allRule, rule, input.required);
                break;
              case "data-validation":
                rule = input.getAttribute(rule);
                this.defRule(input, allRule, rule, true);
                break;
              case "type":
                if (acceptedTypes.indexOf(input.type) !== -1) {
                  this.defRule(input, allRule, input.type, true);
                }
                break;
              case "rangeLength":
              case "range":
                this.defRule(input, allRule, rule, JSON.parse(input.getAttribute(rule)));
                break;
              case "equalTo":
                {
                  var id = input.getAttribute(rule);
                  this.defRule(input, allRule, rule, id);
                }
                break;
              default:
                if (input.getAttribute("data-val") === "true") {
                  this.annotationRule(input, allRule, rule, input.getAttribute(rule));
                } else {
                  this.defRule(input, allRule, rule, input.getAttribute(rule));
                }
            }
          }
        }
        if (Object.keys(allRule).length !== 0) {
          this.addRules(input.name, allRule);
        }
      }
    };
    FormValidator2.prototype.annotationRule = function(input, ruleCon, ruleName, value) {
      var annotationRule = ruleName.split("-");
      var rulesList = ["required", "creditcard", "phone", "maxlength", "minlength", "range", "regex", "equalto"];
      var ruleFirstName = annotationRule[annotationRule.length - 1];
      var ruleSecondName = annotationRule[annotationRule.length - 2];
      if (rulesList.indexOf(ruleFirstName) !== -1) {
        switch (ruleFirstName) {
          case "required":
            this.defRule(input, ruleCon, "required", value);
            break;
          case "creditcard":
            this.defRule(input, ruleCon, "creditcard", value);
            break;
          case "phone":
            this.defRule(input, ruleCon, "tel", value);
            break;
        }
      } else if (rulesList.indexOf(ruleSecondName) !== -1) {
        switch (ruleSecondName) {
          case "maxlength":
            this.defRule(input, ruleCon, "maxLength", value);
            break;
          case "minlength":
            this.defRule(input, ruleCon, "minLength", value);
            break;
          case "range":
            {
              var minvalue = input.getAttribute("data-val-range-min");
              var maxvalue = input.getAttribute("data-val-range-max");
              this.defRule(input, ruleCon, "range", [minvalue, maxvalue]);
            }
            break;
          case "equalto":
            {
              var id = input.getAttribute(ruleName).split(".");
              this.defRule(input, ruleCon, "equalTo", id[id.length - 1]);
            }
            break;
          case "regex":
            this.defRule(input, ruleCon, "regex", value);
            break;
        }
      }
    };
    FormValidator2.prototype.defRule = function(input, ruleCon, ruleName, value) {
      var message = input.getAttribute("data-" + ruleName + "-message");
      var annotationMessage = input.getAttribute("data-val-" + ruleName);
      var customMessage;
      if (this.rules[input.name] && ruleName !== "validateHidden" && ruleName !== "hidden") {
        this.getInputElement(input.name);
        customMessage = this.getErrorMessage(this.rules[input.name]["" + ruleName], ruleName);
      }
      if (message) {
        value = [value, message];
      } else if (annotationMessage) {
        value = [value, annotationMessage];
      } else if (customMessage) {
        value = [value, customMessage];
      }
      ruleCon["" + ruleName] = value;
    };
    FormValidator2.prototype.wireEvents = function() {
      for (var _i = 0, _a = this.inputElements; _i < _a.length; _i++) {
        var input = _a[_i];
        if (FormValidator_1.isCheckable(input)) {
          EventHandler.add(input, "click", this.clickHandler, this);
        } else if (input.tagName === "SELECT") {
          EventHandler.add(input, "change", this.changeHandler, this);
        } else {
          EventHandler.add(input, "focusout", this.focusOutHandler, this);
          EventHandler.add(input, "keyup", this.keyUpHandler, this);
        }
      }
      EventHandler.add(this.element, "submit", this.submitHandler, this);
      EventHandler.add(this.element, "reset", this.resetHandler, this);
    };
    FormValidator2.prototype.unwireEvents = function() {
      for (var _i = 0, _a = this.inputElements; _i < _a.length; _i++) {
        var input = _a[_i];
        EventHandler.clearEvents(input);
      }
      EventHandler.remove(this.element, "submit", this.submitHandler);
      EventHandler.remove(this.element, "reset", this.resetHandler);
    };
    FormValidator2.prototype.focusOutHandler = function(e) {
      this.trigger("focusout", e);
      var element2 = e.target;
      if (this.rules[element2.name]) {
        if (this.rules[element2.name][this.required] || element2.value.length > 0) {
          this.validate(element2.name);
        } else if (this.validated.indexOf(element2.name) === -1) {
          this.validated.push(element2.name);
        }
      }
    };
    FormValidator2.prototype.keyUpHandler = function(e) {
      this.trigger("keyup", e);
      var element2 = e.target;
      var excludeKeys = [16, 17, 18, 20, 35, 36, 37, 38, 39, 40, 45, 144, 225];
      if (e.which === 9 && (!this.rules[element2.name] || this.rules[element2.name] && !this.rules[element2.name][this.required])) {
        return;
      }
      if (this.validated.indexOf(element2.name) !== -1 && this.rules[element2.name] && excludeKeys.indexOf(e.which) === -1) {
        this.validate(element2.name);
      }
    };
    FormValidator2.prototype.clickHandler = function(e) {
      this.trigger("click", e);
      var element2 = e.target;
      if (element2.type !== "submit") {
        this.validate(element2.name);
      } else if (element2.getAttribute("formnovalidate") !== null) {
        this.allowSubmit = true;
      }
    };
    FormValidator2.prototype.changeHandler = function(e) {
      this.trigger("change", e);
      var element2 = e.target;
      this.validate(element2.name);
    };
    FormValidator2.prototype.submitHandler = function(e) {
      this.trigger("submit", e);
      if (!this.allowSubmit && !this.validate()) {
        e.preventDefault();
      } else {
        this.allowSubmit = false;
      }
    };
    FormValidator2.prototype.resetHandler = function() {
      this.clearForm();
    };
    FormValidator2.prototype.validateRules = function(name) {
      if (!this.rules["" + name]) {
        return;
      }
      var rules = Object.keys(this.rules["" + name]);
      var hiddenType = false;
      var validateHiddenType = false;
      var vhPos = rules.indexOf("validateHidden");
      var hPos = rules.indexOf("hidden");
      this.getInputElement(name);
      if (hPos !== -1) {
        hiddenType = true;
      }
      if (vhPos !== -1) {
        validateHiddenType = true;
      }
      if (!hiddenType || hiddenType && validateHiddenType) {
        if (vhPos !== -1) {
          rules.splice(vhPos, 1);
        }
        if (hPos !== -1) {
          rules.splice(hPos - 1, 1);
        }
        this.getErrorElement(name);
        for (var _i = 0, rules_2 = rules; _i < rules_2.length; _i++) {
          var rule = rules_2[_i];
          var errorMessage = this.getErrorMessage(this.rules["" + name]["" + rule], rule);
          var errorRule = {
            name,
            message: errorMessage
          };
          var eventArgs = {
            inputName: name,
            element: this.inputElement,
            message: errorMessage
          };
          if (!this.isValid(name, rule) && !this.inputElement.classList.contains(this.ignore)) {
            this.removeErrorRules(name);
            this.errorRules.push(errorRule);
            this.inputElement.setAttribute("aria-invalid", "true");
            this.inputElement.setAttribute("aria-describedby", this.inputElement.id + "-info");
            var inputParent = this.inputElement.parentElement;
            var grandParent = inputParent.parentElement;
            if (inputParent.classList.contains("e-control-wrapper") || inputParent.classList.contains("e-wrapper") || this.inputElement.classList.contains("e-input") && inputParent.classList.contains("e-input-group")) {
              inputParent.classList.add(this.errorClass);
              inputParent.classList.remove(this.validClass);
            } else if (grandParent != null && (grandParent.classList.contains("e-control-wrapper") || grandParent.classList.contains("e-wrapper"))) {
              grandParent.classList.add(this.errorClass);
              grandParent.classList.remove(this.validClass);
            } else {
              this.inputElement.classList.add(this.errorClass);
              this.inputElement.classList.remove(this.validClass);
            }
            if (!this.infoElement) {
              this.createErrorElement(name, errorRule.message, this.inputElement);
            } else {
              this.showMessage(errorRule);
            }
            eventArgs.errorElement = this.infoElement;
            eventArgs.status = "failure";
            if (inputParent.classList.contains("e-control-wrapper") || inputParent.classList.contains("e-wrapper") || this.inputElement.classList.contains("e-input") && inputParent.classList.contains("e-input-group")) {
              inputParent.classList.add(this.errorClass);
              inputParent.classList.remove(this.validClass);
            } else if (grandParent != null && (grandParent.classList.contains("e-control-wrapper") || grandParent.classList.contains("e-wrapper"))) {
              grandParent.classList.add(this.errorClass);
              grandParent.classList.remove(this.validClass);
            } else {
              this.inputElement.classList.add(this.errorClass);
              this.inputElement.classList.remove(this.validClass);
            }
            this.optionalValidationStatus(name, eventArgs);
            this.trigger("validationComplete", eventArgs);
            if (rule === "required") {
              this.inputElement.setAttribute("aria-required", "true");
            }
            break;
          } else {
            this.hideMessage(name);
            eventArgs.status = "success";
            this.trigger("validationComplete", eventArgs);
          }
        }
      } else {
        return;
      }
    };
    FormValidator2.prototype.optionalValidationStatus = function(name, refer) {
      if (!this.rules["" + name][this.required] && !this.inputElement.value.length && !isNullOrUndefined(this.infoElement)) {
        this.infoElement.innerHTML = this.inputElement.value;
        this.infoElement.setAttribute("aria-invalid", "false");
        refer.status = "";
        this.hideMessage(name);
      }
    };
    FormValidator2.prototype.isValid = function(name, rule) {
      var params = this.rules["" + name]["" + rule];
      var param = params instanceof Array && typeof params[1] === "string" ? params[0] : params;
      var currentRule = this.rules["" + name]["" + rule];
      var dateFormat = (rule === "min" || rule === "max") && this.rules["" + name].date && typeof this.rules["" + name].date === "string" ? this.rules["" + name].date : null;
      var args = {
        value: this.inputElement.value,
        param,
        element: this.inputElement,
        formElement: this.element,
        format: dateFormat,
        culture: this.locale
      };
      this.trigger("validationBegin", args);
      if (!args.param && rule === "required") {
        return true;
      }
      if (currentRule && typeof currentRule[0] === "function") {
        var fn = currentRule[0];
        return fn.call(this, {
          element: this.inputElement,
          value: this.inputElement.value
        });
      } else if (FormValidator_1.isCheckable(this.inputElement)) {
        if (rule !== "required") {
          return true;
        }
        return selectAll('input[name="' + name + '"]:checked', this.element).length > 0;
      } else {
        return FormValidator_1.checkValidator["" + rule](args);
      }
    };
    FormValidator2.prototype.getErrorMessage = function(ruleValue, rule) {
      var message = this.inputElement.getAttribute("data-" + rule + "-message") ? this.inputElement.getAttribute("data-" + rule + "-message") : ruleValue instanceof Array && typeof ruleValue[1] === "string" ? ruleValue[1] : Object.keys(this.localyMessage).length !== 0 ? this.localyMessage["" + rule] : this.defaultMessages["" + rule];
      var formats = message.match(/{(\d)}/g);
      if (!isNullOrUndefined(formats)) {
        for (var i = 0; i < formats.length; i++) {
          var value = ruleValue instanceof Array ? ruleValue[parseInt(i.toString(), 10)] : ruleValue;
          message = message.replace(formats[parseInt(i.toString(), 10)], value);
        }
      }
      return message;
    };
    FormValidator2.prototype.createErrorElement = function(name, message, input) {
      var errorElement = createElement(this.errorElement, {
        className: this.errorClass,
        innerHTML: message,
        attrs: {
          for: name
        }
      });
      if (this.errorOption === ErrorOption.Message) {
        errorElement.classList.remove(this.errorClass);
        errorElement.classList.add("e-message");
        errorElement = createElement(this.errorContainer, {
          className: this.errorClass,
          innerHTML: errorElement.outerHTML
        });
      }
      errorElement.id = this.inputElement.name + "-info";
      if (this.element.querySelector('[data-valmsg-for="' + input.id + '"]')) {
        this.element.querySelector('[data-valmsg-for="' + input.id + '"]').appendChild(errorElement);
      } else if (input.hasAttribute("data-msg-containerid") === true) {
        var containerId = input.getAttribute("data-msg-containerid");
        var divElement = select("#" + containerId, this.element);
        divElement.appendChild(errorElement);
      } else if (this.customPlacement != null) {
        this.customPlacement.call(this, this.inputElement, errorElement);
      } else {
        var inputParent = this.inputElement.parentElement;
        var grandParent = inputParent.parentElement;
        if (inputParent.classList.contains("e-control-wrapper") || inputParent.classList.contains("e-wrapper")) {
          grandParent.insertBefore(errorElement, inputParent.nextSibling);
        } else if (grandParent.classList.contains("e-control-wrapper") || grandParent.classList.contains("e-wrapper")) {
          grandParent.parentElement.insertBefore(errorElement, grandParent.nextSibling);
        } else {
          inputParent.insertBefore(errorElement, this.inputElement.nextSibling);
        }
      }
      errorElement.style.display = "block";
      this.getErrorElement(name);
      this.validated.push(name);
      this.checkRequired(name);
    };
    FormValidator2.prototype.getErrorElement = function(name) {
      this.infoElement = select(this.errorElement + "." + this.errorClass, this.inputElement.parentElement);
      if (!this.infoElement) {
        this.infoElement = select(this.errorElement + "." + this.errorClass + '[for="' + name + '"]', this.element);
      }
      return this.infoElement;
    };
    FormValidator2.prototype.removeErrorRules = function(name) {
      for (var i = 0; i < this.errorRules.length; i++) {
        var rule = this.errorRules[parseInt(i.toString(), 10)];
        if (rule.name === name) {
          this.errorRules.splice(i, 1);
        }
      }
    };
    FormValidator2.prototype.showMessage = function(errorRule) {
      this.infoElement.style.display = "block";
      this.infoElement.innerHTML = errorRule.message;
      this.checkRequired(errorRule.name);
    };
    FormValidator2.prototype.hideMessage = function(name) {
      if (this.infoElement) {
        this.infoElement.style.display = "none";
        this.removeErrorRules(name);
        var inputParent = this.inputElement.parentElement;
        var grandParent = inputParent.parentElement;
        if (inputParent.classList.contains("e-control-wrapper") || inputParent.classList.contains("e-wrapper") || this.inputElement.classList.contains("e-input") && inputParent.classList.contains("e-input-group")) {
          inputParent.classList.add(this.validClass);
          inputParent.classList.remove(this.errorClass);
        } else if (grandParent != null && (grandParent.classList.contains("e-control-wrapper") || grandParent.classList.contains("e-wrapper"))) {
          grandParent.classList.add(this.validClass);
          grandParent.classList.remove(this.errorClass);
        } else {
          this.inputElement.classList.add(this.validClass);
          this.inputElement.classList.remove(this.errorClass);
        }
        this.inputElement.setAttribute("aria-invalid", "false");
      }
    };
    FormValidator2.prototype.checkRequired = function(name) {
      if (!this.rules["" + name][this.required] && !this.inputElement.value.length && !isNullOrUndefined(this.infoElement)) {
        this.infoElement.innerHTML = this.inputElement.value;
        this.infoElement.setAttribute("aria-invalid", "false");
        this.hideMessage(name);
      }
    };
    FormValidator2.isCheckable = function(input) {
      var inputType = input.getAttribute("type");
      return inputType && (inputType === "checkbox" || inputType === "radio" || inputType === "submit");
    };
    var FormValidator_1;
    FormValidator2.checkValidator = {
      required: function(option) {
        return !isNaN(Date.parse(option.value)) ? !isNaN(new Date(option.value).getTime()) : option.value.toString().length > 0;
      },
      email: function(option) {
        return regex.EMAIL.test(option.value);
      },
      url: function(option) {
        return regex.URL.test(option.value);
      },
      dateIso: function(option) {
        return regex.DATE_ISO.test(option.value);
      },
      tel: function(option) {
        return regex.PHONE.test(option.value);
      },
      creditcard: function(option) {
        return regex.CREDITCARD.test(option.value);
      },
      number: function(option) {
        return !isNaN(Number(option.value)) && String(option.value).indexOf(" ") === -1;
      },
      digits: function(option) {
        return regex.DIGITS.test(option.value);
      },
      maxLength: function(option) {
        return option.value.length <= Number(option.param);
      },
      minLength: function(option) {
        return option.value.length >= Number(option.param);
      },
      rangeLength: function(option) {
        var param = option.param;
        return option.value.length >= param[0] && option.value.length <= param[1];
      },
      range: function(option) {
        var param = option.param;
        return !isNaN(Number(option.value)) && Number(option.value) >= param[0] && Number(option.value) <= param[1];
      },
      date: function(option) {
        if (!isNullOrUndefined(option.param) && typeof option.param === "string" && option.param !== "") {
          var globalize = option.culture && option.culture !== "" ? new Internationalization(option.culture) : new Internationalization();
          var dateOptions = {
            format: option.param.toString(),
            type: "dateTime",
            skeleton: "yMd"
          };
          var dateValue = globalize.parseDate(option.value, dateOptions);
          return !isNullOrUndefined(dateValue) && dateValue instanceof Date && !isNaN(+dateValue);
        } else {
          return !isNaN(new Date(option.value).getTime());
        }
      },
      max: function(option) {
        if (!isNaN(Number(option.value))) {
          return +option.value <= +option.param;
        }
        if (option.format && option.format !== "") {
          var globalize = option.culture && option.culture !== "" ? new Internationalization(option.culture) : new Internationalization();
          var dateOptions = {
            format: option.format.toString(),
            type: "dateTime",
            skeleton: "yMd"
          };
          var dateValue = globalize.parseDate(option.value, dateOptions);
          var maxValue = typeof option.param === "string" ? globalize.parseDate(JSON.parse(JSON.stringify(option.param)), dateOptions) : option.param;
          return new Date(dateValue).getTime() <= new Date(maxValue).getTime();
        } else {
          return new Date(option.value).getTime() <= new Date(JSON.parse(JSON.stringify(option.param))).getTime();
        }
      },
      min: function(option) {
        if (!isNaN(Number(option.value))) {
          return +option.value >= +option.param;
        } else if (option.value.indexOf(",") !== -1) {
          var uNum = option.value.replace(/,/g, "");
          return parseFloat(uNum) >= Number(option.param);
        } else {
          if (option.format && option.format !== "") {
            var globalize = option.culture && option.culture !== "" ? new Internationalization(option.culture) : new Internationalization();
            var dateOptions = {
              format: option.format.toString(),
              type: "dateTime",
              skeleton: "yMd"
            };
            var dateValue = globalize.parseDate(option.value, dateOptions);
            var minValue = typeof option.param === "string" ? globalize.parseDate(JSON.parse(JSON.stringify(option.param)), dateOptions) : option.param;
            return new Date(dateValue).getTime() >= new Date(minValue).getTime();
          } else {
            return new Date(option.value).getTime() >= new Date(JSON.parse(JSON.stringify(option.param))).getTime();
          }
        }
      },
      regex: function(option) {
        return new RegExp(option.param).test(option.value);
      },
      equalTo: function(option) {
        var compareTo = option.formElement.querySelector("#" + option.param);
        option.param = compareTo.value;
        return option.param === option.value;
      }
    };
    __decorate14([Property("")], FormValidator2.prototype, "locale", void 0);
    __decorate14([Property("e-hidden")], FormValidator2.prototype, "ignore", void 0);
    __decorate14([Property()], FormValidator2.prototype, "rules", void 0);
    __decorate14([Property("e-error")], FormValidator2.prototype, "errorClass", void 0);
    __decorate14([Property("e-valid")], FormValidator2.prototype, "validClass", void 0);
    __decorate14([Property("label")], FormValidator2.prototype, "errorElement", void 0);
    __decorate14([Property("div")], FormValidator2.prototype, "errorContainer", void 0);
    __decorate14([Property(ErrorOption.Label)], FormValidator2.prototype, "errorOption", void 0);
    __decorate14([Event()], FormValidator2.prototype, "focusout", void 0);
    __decorate14([Event()], FormValidator2.prototype, "keyup", void 0);
    __decorate14([Event()], FormValidator2.prototype, "click", void 0);
    __decorate14([Event()], FormValidator2.prototype, "change", void 0);
    __decorate14([Event()], FormValidator2.prototype, "submit", void 0);
    __decorate14([Event()], FormValidator2.prototype, "validationBegin", void 0);
    __decorate14([Event()], FormValidator2.prototype, "validationComplete", void 0);
    __decorate14([Event()], FormValidator2.prototype, "customPlacement", void 0);
    FormValidator2 = FormValidator_1 = __decorate14([NotifyPropertyChanges], FormValidator2);
    return FormValidator2;
  }(Base)
);

// node_modules/@syncfusion/ej2-splitbuttons/src/common/common.js
var __extends16 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate15 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
function getModel(props, model) {
  var obj = extend({}, props);
  for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {
    var prop = _a[_i];
    if (model.indexOf(prop) < 0) {
      deleteObject(obj, prop);
    }
  }
  return obj;
}
function upDownKeyHandler(ul, keyCode) {
  var defaultIdx = keyCode === 40 ? 0 : ul.childElementCount - 1;
  var liIdx = defaultIdx;
  var li;
  var selectedLi = ul.querySelector(".e-selected");
  if (selectedLi) {
    selectedLi.classList.remove("e-selected");
  }
  for (var i = 0, len = ul.children.length; i < len; i++) {
    if (ul.children[i].classList.contains("e-focused")) {
      li = ul.children[i];
      liIdx = i;
      li.classList.remove("e-focused");
      if (keyCode === 40) {
        liIdx++;
      } else {
        liIdx--;
      }
      if (liIdx === (keyCode === 40 ? ul.childElementCount : -1)) {
        liIdx = defaultIdx;
      }
    }
  }
  li = ul.children[liIdx];
  liIdx = isValidLI(ul, li, liIdx, keyCode);
  if (liIdx !== -1) {
    addClass([ul.children[liIdx]], "e-focused");
    ul.children[liIdx].focus();
  }
}
function isValidLI(ul, li, index, keyCode, count) {
  if (count === void 0) {
    count = 0;
  }
  if (li.classList.contains("e-separator") || li.classList.contains("e-disabled")) {
    if (index === (keyCode === 40 ? ul.childElementCount - 1 : 0)) {
      index = keyCode === 40 ? 0 : ul.childElementCount - 1;
    } else {
      if (keyCode === 40) {
        index++;
      } else {
        index--;
      }
    }
  }
  li = ul.children[index];
  if (li.classList.contains("e-separator") || li.classList.contains("e-disabled")) {
    count++;
    if (count === ul.childElementCount) {
      return index = -1;
    }
    index = isValidLI(ul, li, index, keyCode, count);
  }
  return index;
}
function setBlankIconStyle(popup, blankIcon) {
  var blankIconList = [].slice.call(popup.getElementsByClassName("e-blank-icon"));
  if (blankIcon) {
    var menuItem = [].slice.call(popup.getElementsByClassName("e-item"));
    menuItem.forEach(function(li) {
      if (li.style.paddingLeft || li.style.paddingRight) {
        li.removeAttribute("style");
      }
    });
  }
  if (!blankIconList.length) {
    return;
  }
  var iconLi = popup.querySelector(".e-item:not(.e-blank-icon):not(.e-separator)");
  if (isNullOrUndefined(iconLi)) {
    return;
  }
  if (iconLi.classList.contains("e-url")) {
    iconLi = iconLi.querySelector(".e-menu-url");
  }
  var icon = iconLi.querySelector(".e-menu-icon");
  var cssProp;
  var enableRtl = popup.classList.contains("e-rtl");
  if (enableRtl) {
    cssProp = {
      padding: "paddingRight",
      margin: "marginLeft"
    };
  } else {
    cssProp = {
      padding: "paddingLeft",
      margin: "marginRight"
    };
  }
  var size = parseInt(getComputedStyle(icon).fontSize, 10) + parseInt(enableRtl ? getComputedStyle(icon)[cssProp.margin] : getComputedStyle(icon)[cssProp.margin], 10) + parseInt(getComputedStyle(iconLi).paddingLeft, 10) + "px";
  blankIconList.forEach(function(li) {
    if (li.classList.contains("e-url") && li.querySelector(".e-menu-url")) {
      li.querySelector(".e-menu-url").style[cssProp.padding] = size;
    } else {
      li.style[cssProp.padding] = size;
    }
  });
}
var Item = (
  /** @class */
  function(_super) {
    __extends16(Item3, _super);
    function Item3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate15([Property("")], Item3.prototype, "iconCss", void 0);
    __decorate15([Property("")], Item3.prototype, "id", void 0);
    __decorate15([Property(false)], Item3.prototype, "separator", void 0);
    __decorate15([Property("")], Item3.prototype, "text", void 0);
    __decorate15([Property("")], Item3.prototype, "url", void 0);
    __decorate15([Property(false)], Item3.prototype, "disabled", void 0);
    return Item3;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-splitbuttons/src/drop-down-button/drop-down-button.js
var __extends17 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate16 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var classNames2 = {
  DISABLED: "e-disabled",
  FOCUS: "e-focused",
  ICON: "e-menu-icon",
  ITEM: "e-item",
  POPUP: "e-dropdown-popup",
  RTL: "e-rtl",
  SEPARATOR: "e-separator",
  VERTICAL: "e-vertical",
  POPUPWIDTH: "e-dropdown-popup-width"
};
var DropDownMenuAnimationSettings = (
  /** @class */
  function(_super) {
    __extends17(DropDownMenuAnimationSettings2, _super);
    function DropDownMenuAnimationSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate16([Property("SlideDown")], DropDownMenuAnimationSettings2.prototype, "effect", void 0);
    __decorate16([Property(400)], DropDownMenuAnimationSettings2.prototype, "duration", void 0);
    __decorate16([Property("ease")], DropDownMenuAnimationSettings2.prototype, "easing", void 0);
    return DropDownMenuAnimationSettings2;
  }(ChildProperty)
);
var DropDownButton = (
  /** @class */
  function(_super) {
    __extends17(DropDownButton2, _super);
    function DropDownButton2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.isPopupCreated = true;
      return _this;
    }
    DropDownButton2.prototype.preRender = function() {
    };
    DropDownButton2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    DropDownButton2.prototype.toggle = function() {
      if (this.canOpen()) {
        this.openPopUp();
      } else if (this.createPopupOnClick && !this.isPopupCreated) {
        this.createPopup();
        this.openPopUp();
      } else {
        this.closePopup();
      }
    };
    DropDownButton2.prototype.render = function() {
      this.initialize();
      if (!this.disabled) {
        this.wireEvents();
      }
      this.renderComplete();
    };
    DropDownButton2.prototype.addItems = function(items, text) {
      var newItem;
      var idx = this.items.length;
      for (var j = 0, len = this.items.length; j < len; j++) {
        if (text === this.items[j].text) {
          idx = j;
          break;
        }
      }
      for (var i = items.length - 1; i >= 0; i--) {
        newItem = new Item(this, "items", items[i], true);
        this.items.splice(idx, 0, newItem);
      }
      if (!this.canOpen()) {
        this.createItems();
      }
    };
    DropDownButton2.prototype.removeItems = function(items, isUniqueId) {
      var refresh = false;
      for (var i = 0, len = items.length; i < len; i++) {
        for (var j = 0, len_1 = this.items.length; j < len_1; j++) {
          if (items[i] === (isUniqueId ? this.items[j].id : this.items[j].text)) {
            this.items.splice(j, 1);
            refresh = true;
            break;
          }
        }
      }
      if (refresh && this.getULElement()) {
        this.createItems();
      }
    };
    DropDownButton2.prototype.createPopup = function() {
      var _a;
      var div = this.createElement("div", {
        className: this.popupWidth !== "auto" ? classNames2.POPUP + " " + classNames2.POPUPWIDTH : classNames2.POPUP,
        id: this.element.id + "-popup"
      });
      document.body.appendChild(div);
      this.dropDown = new Popup(div, {
        width: this.popupWidth,
        relateTo: this.element,
        collision: {
          X: "fit",
          Y: "flip"
        },
        position: {
          X: "left",
          Y: "bottom"
        },
        targetType: "relative",
        content: this.target ? this.getTargetElement() : "",
        enableRtl: this.enableRtl
      });
      this.dropDown.element.setAttribute("role", "dialog");
      this.dropDown.element.setAttribute("aria-label", "dropdown menu");
      if (!isNullOrUndefined(this.popupContent)) {
        this.popupContent.style.display = "";
      }
      if (this.dropDown.element.style.position === "fixed") {
        this.dropDown.refreshPosition(this.element);
      }
      this.dropDown.hide();
      attributes(this.element, (_a = {}, _a["aria-haspopup"] = this.items.length || this.target ? "true" : "false", _a["aria-expanded"] = "false", _a["type"] = "button", _a));
      if (this.cssClass) {
        addClass([div], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
      }
      this.isPopupCreated = true;
      if (this.createPopupOnClick) {
        var splitButton = getComponent(this.activeElem[0], "split-btn");
        if (splitButton) {
          splitButton.isPopupCreated = true;
        }
      }
    };
    DropDownButton2.prototype.getTargetElement = function() {
      if (this.createPopupOnClick && !this.isColorPicker() && !isNullOrUndefined(this.popupContent)) {
        return this.popupContent;
      }
      return typeof this.target === "string" ? select(this.target) : this.target;
    };
    DropDownButton2.prototype.createItems = function(appendItems) {
      var _this = this;
      var items = this.items;
      var showIcon = this.hasIcon(this.items, "iconCss");
      var span;
      var item;
      var li;
      var eventArgs;
      var ul = this.getULElement();
      if (ul) {
        ul.innerHTML = "";
      } else {
        ul = this.createElement("ul", {
          attrs: {
            "role": "menu",
            "tabindex": "0"
          }
        });
      }
      if (this.itemTemplate) {
        var compiledTemplate_1 = this.compiletemplate(this.itemTemplate);
        items.forEach(function(item2) {
          var li2 = _this.createElement("li", {
            className: item2.separator ? classNames2.ITEM + " " + classNames2.SEPARATOR : classNames2.ITEM,
            attrs: item2.separator ? {
              "role": "separator",
              "tabindex": "-1",
              "aria-label": "separator",
              "aria-hidden": "true"
            } : {
              "role": "menuitem",
              "tabindex": "-1",
              "aria-label": item2.text
            },
            id: item2.id ? item2.id : getUniqueID("e-" + _this.getModuleName() + "-item")
          });
          var compiledElement = compiledTemplate_1(item2, _this, "template", null, false, null, li2);
          if (compiledElement) {
            append(compiledElement, li2);
          }
          if (item2.disabled) {
            li2.classList.add("e-disabled");
          }
          var eventArgs2 = {
            item: item2,
            element: li2
          };
          _this.trigger("beforeItemRender", eventArgs2);
          if (eventArgs2.item.disabled !== item2.disabled) {
            li2.classList[eventArgs2.item.disabled ? "add" : "remove"]("e-disabled");
          }
          ul.appendChild(li2);
        });
        if (this.isReact) {
          this.renderReactTemplates();
        }
      } else {
        for (var i = 0; i < items.length; i++) {
          item = items[i];
          if (this.enableHtmlSanitizer) {
            item.text = SanitizeHtmlHelper.sanitize(item.text);
          }
          var tempItem = item.text;
          li = this.createElement("li", {
            innerHTML: item.url ? "" : tempItem,
            className: item.separator ? classNames2.ITEM + " " + classNames2.SEPARATOR : classNames2.ITEM,
            attrs: item.separator ? {
              "role": "separator",
              "tabindex": "-1",
              "aria-label": "separator",
              "aria-hidden": "true"
            } : {
              "role": "menuitem",
              "tabindex": "-1",
              "aria-label": tempItem
            },
            id: item.id ? item.id : getUniqueID("e-" + this.getModuleName() + "-item")
          });
          if (this.enableHtmlSanitizer) {
            li.textContent = item.url ? "" : tempItem;
          } else {
            li.innerHTML = item.url ? "" : tempItem;
          }
          if (item.url) {
            li.appendChild(this.createAnchor(item));
            li.classList.add("e-url");
          }
          if (item.iconCss) {
            span = this.createElement("span", {
              className: classNames2.ICON + " " + item.iconCss
            });
            if (item.url) {
              li.childNodes[0].appendChild(span);
            } else {
              li.insertBefore(span, li.childNodes[0]);
            }
          } else {
            if (showIcon && !item.separator) {
              li.classList.add("e-blank-icon");
            }
          }
          var beforeDisabled = item.disabled;
          if (item.disabled) {
            li.classList.add("e-disabled");
          }
          eventArgs = {
            item,
            element: li
          };
          this.trigger("beforeItemRender", eventArgs);
          var afterDisabled = eventArgs.item.disabled;
          if (beforeDisabled !== afterDisabled) {
            if (eventArgs.item.disabled) {
              li.classList.add("e-disabled");
            } else {
              li.classList.remove("e-disabled");
            }
          }
          ul.appendChild(li);
        }
      }
      if (appendItems) {
        this.getPopUpElement().appendChild(ul);
      }
      if (showIcon) {
        setBlankIconStyle(this.getPopUpElement());
      }
    };
    DropDownButton2.prototype.compiletemplate = function(template) {
      if (!this.itemTemplate) {
        return void 0;
      }
      try {
        if (typeof this.itemTemplate !== "function") {
          var templateElement = document.querySelector(this.itemTemplate);
          if (templateElement) {
            return compile(templateElement.innerHTML.trim());
          }
        }
        return compile(template);
      } catch (_a) {
        return compile(template);
      }
    };
    DropDownButton2.prototype.hasIcon = function(items, field) {
      for (var i = 0, len = items.length; i < len; i++) {
        if (items[i]["" + field]) {
          return true;
        }
      }
      return false;
    };
    DropDownButton2.prototype.createAnchor = function(item) {
      var tempItem = item.text;
      var anchor = this.createElement("a", {
        className: "e-menu-text e-menu-url",
        attrs: {
          "href": item.url
        }
      });
      if (this.enableHtmlSanitizer) {
        anchor.textContent = tempItem;
      } else {
        anchor.innerHTML = tempItem;
      }
      return anchor;
    };
    DropDownButton2.prototype.initialize = function() {
      this.button = new Button({
        iconCss: this.iconCss,
        iconPosition: this.iconPosition,
        cssClass: this.cssClass,
        content: this.content,
        disabled: this.disabled,
        enableRtl: this.enableRtl,
        enablePersistence: this.enablePersistence
      });
      this.button.createElement = this.createElement;
      this.button.appendTo(this.element);
      if (!this.element.id) {
        this.element.id = getUniqueID("e-" + this.getModuleName());
      }
      this.appendArrowSpan();
      this.setActiveElem([this.element]);
      this.element.setAttribute("tabindex", "0");
      this.element.setAttribute("aria-label", this.element.textContent ? this.element.textContent : "dropdownbutton");
      if (this.target && !this.isColorPicker() && !this.createPopupOnClick || !this.createPopupOnClick) {
        this.createPopup();
      } else {
        this.isPopupCreated = false;
        if (this.target && !this.isColorPicker() && this.createPopupOnClick) {
          this.popupContent = this.getTargetElement();
          this.popupContent.style.display = "none";
        }
      }
    };
    DropDownButton2.prototype.isColorPicker = function() {
      if (!this.element) {
        return false;
      }
      var prevElem = this.element.previousSibling;
      if (prevElem && prevElem.classList && prevElem.classList.contains("e-split-colorpicker")) {
        return true;
      }
      return false;
    };
    DropDownButton2.prototype.appendArrowSpan = function() {
      this.cssClass = isNullOrUndefined(this.cssClass) ? "" : this.cssClass;
      this.element.appendChild(this.createElement("span", {
        className: "e-btn-icon e-icons e-icon-" + (this.cssClass.indexOf(classNames2.VERTICAL) > -1 ? "bottom" : "right") + " e-caret"
      }));
    };
    DropDownButton2.prototype.setActiveElem = function(elem) {
      this.activeElem = elem;
    };
    DropDownButton2.prototype.getModuleName = function() {
      return "dropdown-btn";
    };
    DropDownButton2.prototype.canOpen = function() {
      var val = false;
      if (this.isPopupCreated) {
        val = this.getPopUpElement().classList.contains("e-popup-close");
      }
      return val;
    };
    DropDownButton2.prototype.destroy = function() {
      var _this = this;
      _super.prototype.destroy.call(this);
      if (this.getModuleName() === "dropdown-btn") {
        var classList_1;
        if (this.element.querySelector("span.e-caret")) {
          detach(this.element.querySelector("span.e-caret"));
        }
        if (this.cssClass) {
          classList_1 = this.cssClass.split(" ");
        }
        this.button.destroy();
        if (classList_1) {
          removeClass([this.element], classList_1);
        }
        removeClass(this.activeElem, ["e-active"]);
        var attrList = this.element.getAttribute("class") ? ["aria-haspopup", "aria-expanded", "aria-owns", "type"] : ["aria-haspopup", "aria-expanded", "aria-owns", "type", "class"];
        attrList.forEach(function(key) {
          _this.element.removeAttribute(key);
        });
        this.popupUnWireEvents();
        this.destroyPopup();
        this.isPopupCreated = false;
        if (!this.disabled) {
          this.unWireEvents();
        }
      }
    };
    DropDownButton2.prototype.destroyPopup = function() {
      if (this.isPopupCreated) {
        this.dropDown.destroy();
        if (this.getPopUpElement()) {
          var popupEle = document.getElementById(this.getPopUpElement().id);
          if (popupEle) {
            removeClass([popupEle], ["e-popup-open", "e-popup-close"]);
            detach(popupEle);
          }
        }
        EventHandler.remove(this.getPopUpElement(), "click", this.clickHandler);
        EventHandler.remove(this.getPopUpElement(), "keydown", this.keyBoardHandler);
        if (this.isPopupCreated && this.dropDown) {
          this.dropDown.element = null;
          this.dropDown = void 0;
        }
      }
      this.isPopupCreated = false;
      var splitButton = getComponent(this.activeElem[0], "split-btn");
      if (this.createPopupOnClick && splitButton) {
        var dropDownButton = getComponent(this.activeElem[1], "dropdown-btn");
        if (dropDownButton) {
          dropDownButton.isPopupCreated = false;
        }
      }
    };
    DropDownButton2.prototype.getPopUpElement = function() {
      var val = null;
      if (!this.dropDown && this.activeElem[0].classList.contains("e-split-btn")) {
        var dropDownBtn = getComponent(this.activeElem[1], "dropdown-btn");
        if (dropDownBtn) {
          this.dropDown = dropDownBtn.dropDown;
        }
      }
      if (this.dropDown) {
        val = this.dropDown.element;
      }
      return val;
    };
    DropDownButton2.prototype.getULElement = function() {
      var val = null;
      if (this.getPopUpElement()) {
        val = this.getPopUpElement().children[0];
      }
      return val;
    };
    DropDownButton2.prototype.wireEvents = function() {
      this.delegateMousedownHandler = this.mousedownHandler.bind(this);
      if (!this.createPopupOnClick) {
        EventHandler.add(document, "mousedown touchstart", this.delegateMousedownHandler, this);
      }
      EventHandler.add(this.element, "click", this.clickHandler, this);
      EventHandler.add(this.element, "keydown", this.keyBoardHandler, this);
      EventHandler.add(window, "resize", this.windowResize, this);
    };
    DropDownButton2.prototype.windowResize = function() {
      if (!this.canOpen() && this.dropDown) {
        this.dropDown.refreshPosition(this.element);
      }
    };
    DropDownButton2.prototype.popupWireEvents = function() {
      if (!this.delegateMousedownHandler) {
        this.delegateMousedownHandler = this.mousedownHandler.bind(this);
      }
      var popupElement = this.getPopUpElement();
      if (this.createPopupOnClick) {
        EventHandler.add(document, "mousedown touchstart", this.delegateMousedownHandler, this);
      }
      if (popupElement) {
        EventHandler.add(popupElement, "click", this.clickHandler, this);
        EventHandler.add(popupElement, "keydown", this.keyBoardHandler, this);
        if (this.closeActionEvents) {
          EventHandler.add(popupElement, this.closeActionEvents, this.focusoutHandler, this);
        }
      }
      this.rippleFn = rippleEffect(popupElement, {
        selector: "." + classNames2.ITEM
      });
    };
    DropDownButton2.prototype.popupUnWireEvents = function() {
      var popupElement = this.getPopUpElement();
      if (this.createPopupOnClick) {
        EventHandler.remove(document, "mousedown touchstart", this.delegateMousedownHandler);
      }
      if (popupElement && popupElement.parentElement) {
        EventHandler.remove(popupElement, "click", this.clickHandler);
        EventHandler.remove(popupElement, "keydown", this.keyBoardHandler);
        if (this.closeActionEvents) {
          EventHandler.remove(popupElement, this.closeActionEvents, this.focusoutHandler);
        }
      }
      if (isRippleEnabled && this.rippleFn) {
        this.rippleFn();
      }
    };
    DropDownButton2.prototype.keyBoardHandler = function(e) {
      if (e.target === this.element && (e.keyCode === 9 || !e.altKey && e.keyCode === 40 || e.keyCode === 38)) {
        return;
      }
      if (e.target && (e.target.classList.contains("e-item") || e.target.parentElement && e.target.parentElement.classList.contains("e-split-btn-wrapper")) && e.keyCode === 13) {
        e.preventDefault();
      }
      switch (e.keyCode) {
        case 38:
        case 40:
          if (e.altKey && (e.keyCode === 38 || e.keyCode === 40)) {
            this.keyEventHandler(e);
          } else {
            this.upDownKeyHandler(e);
          }
          break;
        case 9:
        case 13:
        case 27:
        case 32:
          this.keyEventHandler(e);
          break;
      }
    };
    DropDownButton2.prototype.isSafari = function() {
      return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    };
    DropDownButton2.prototype.upDownKeyHandler = function(e) {
      if (this.target && (e.keyCode === 38 || e.keyCode === 40)) {
        return;
      }
      e.preventDefault();
      upDownKeyHandler(this.getULElement(), e.keyCode);
    };
    DropDownButton2.prototype.keyEventHandler = function(e) {
      if (this.target && (e.keyCode === 13 || e.keyCode === 9)) {
        return;
      }
      if (e.keyCode === 13 && this.activeElem[0].classList.contains("e-split-btn")) {
        this.triggerSelect(e);
        this.activeElem[0].focus();
        return;
      }
      if (e.target && e.target.className.indexOf("e-edit-template") > -1 && e.keyCode === 32) {
        return;
      }
      if (e.keyCode !== 9) {
        e.preventDefault();
      }
      if (e.keyCode === 27 || e.keyCode === 38 || e.keyCode === 9) {
        if (!this.canOpen()) {
          this.closePopup(e, this.element);
        }
      } else {
        this.clickHandler(e);
      }
    };
    DropDownButton2.prototype.getLI = function(elem) {
      return elem.tagName === "LI" ? elem : closest(elem, "li");
    };
    DropDownButton2.prototype.mousedownHandler = function(e) {
      var trgt = e.target;
      if (this.dropDown && !this.canOpen() && this.getPopUpElement() && !(closest(trgt, '[id="' + this.getPopUpElement().id + '"]') || closest(trgt, '[id="' + this.element.id + '"]'))) {
        this.closePopup(e);
      }
    };
    DropDownButton2.prototype.focusoutHandler = function(e) {
      if (this.isPopupCreated && !this.canOpen()) {
        var liTarget = e.relatedTarget || e.target;
        if (liTarget && liTarget.className.indexOf("e-item") > -1) {
          var li = this.getLI(liTarget);
          if (li) {
            var liIdx = Array.prototype.indexOf.call(this.getULElement().children, li);
            var item = this.items[liIdx];
            if (item) {
              var selectEventArgs = {
                element: li,
                item,
                event: e
              };
              this.trigger("select", selectEventArgs);
            }
          }
        }
        this.closePopup(e);
      }
    };
    DropDownButton2.prototype.clickHandler = function(e) {
      var trgt = e.target;
      if (closest(trgt, '[id="' + this.element.id + '"]')) {
        if (!this.createPopupOnClick || this.target && this.target !== "" && !this.isColorPicker() && !this.createPopupOnClick) {
          if (this.getPopUpElement().classList.contains("e-popup-close")) {
            this.openPopUp(e);
          } else {
            this.closePopup(e);
          }
        } else if (this.isPopupCreated) {
          this.closePopup(e, this.activeElem[0]);
        } else {
          this.createPopup();
          this.openPopUp(e);
        }
      } else {
        if (closest(trgt, '[id="' + this.getPopUpElement().id + '"]')) {
          var li = this.getLI(e.target);
          if (li) {
            this.triggerSelect(e);
            this.closePopup(e, this.activeElem[0]);
          }
        }
      }
    };
    DropDownButton2.prototype.triggerSelect = function(e) {
      var eventArgs;
      var liIdx;
      var item;
      var li = this.getLI(e.target);
      if (li) {
        liIdx = Array.prototype.indexOf.call(this.getULElement().children, li);
        item = this.items[liIdx];
        if (item) {
          eventArgs = {
            element: li,
            item,
            event: e
          };
          this.trigger("select", eventArgs);
        }
      }
    };
    DropDownButton2.prototype.openPopUp = function(e) {
      var _this = this;
      if (e === void 0) {
        e = null;
      }
      var isReact = false;
      var popupElem = this.getPopUpElement();
      if (this.activeElem[0] && this.activeElem[0].classList.contains("e-dropdown-btn") && popupElem.style.width && popupElem.style.width !== "auto") {
        this.setWidth(popupElem);
      }
      if (!this.target) {
        this.createItems(true);
      } else {
        if (this.activeElem.length > 1) {
          var splitButton = getComponent(this.activeElem[0], "split-btn");
          if (splitButton.isReact && popupElem.childNodes.length < 1) {
            isReact = true;
            if (splitButton.appendReactElement) {
              splitButton.appendReactElement(this.getTargetElement(), this.getPopUpElement());
            }
            this.renderReactTemplates();
          }
        } else {
          if (this.isReact && popupElem.childNodes.length < 1) {
            isReact = true;
            if (this.appendReactElement) {
              this.appendReactElement(this.getTargetElement(), this.getPopUpElement());
            }
            this.renderReactTemplates();
          }
        }
      }
      var ul = this.getULElement();
      this.popupWireEvents();
      var beforeOpenArgs = {
        element: ul,
        items: this.items,
        event: e,
        cancel: false
      };
      this.trigger("beforeOpen", beforeOpenArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          var ul_1 = _this.getULElement();
          var animationOptions = _this.animationSettings.effect !== "None" ? {
            name: _this.animationSettings.effect,
            duration: _this.animationSettings.duration,
            timingFunction: _this.animationSettings.easing
          } : null;
          if (animationOptions) {
            _this.animatePopup(animationOptions, ul_1);
          }
          _this.dropDown.show(null, _this.element);
          addClass([_this.element], "e-active");
          _this.element.setAttribute("aria-expanded", "true");
          _this.element.setAttribute("aria-owns", _this.getPopUpElement().id);
          if (ul_1 && !_this.isSafari()) {
            ul_1.focus();
          }
          if (_this.enableRtl && ul_1.parentElement.style.left !== "0px") {
            var wrapperWidth = void 0;
            if (_this.element.parentElement && _this.element.parentElement.classList.contains("e-split-btn-wrapper")) {
              wrapperWidth = _this.element.parentElement.offsetWidth;
            } else {
              wrapperWidth = _this.element.offsetWidth;
            }
            var popupRect2 = ul_1.parentElement.offsetWidth - wrapperWidth;
            var popupLeft = parseFloat(ul_1.parentElement.style.left) - popupRect2;
            if (popupLeft < 0) {
              popupLeft = 0;
            }
            ul_1.parentElement.style.left = popupLeft + "px";
          }
          var openArgs = {
            element: ul_1,
            items: _this.items
          };
          _this.trigger("open", openArgs);
          if (ul_1 && _this.isSafari()) {
            ul_1.focus();
          }
        }
      });
    };
    DropDownButton2.prototype.animatePopup = function(animationOptions, element2) {
      new Animation(animationOptions).animate(element2, {
        begin: function(args) {
          args.element.parentElement.style.height = args.element.parentElement.offsetHeight + "px";
        }
      });
    };
    DropDownButton2.prototype.setWidth = function(popupElem) {
      var width = formatUnit(popupElem.style.width);
      if (width.indexOf("%") > -1) {
        var btnWidth = this.element.offsetWidth * parseFloat(width) / 100;
        popupElem.style.width = btnWidth + "px";
      }
    };
    DropDownButton2.prototype.closePopup = function(e, focusEle) {
      var _this = this;
      if (e === void 0) {
        e = null;
      }
      var ul = this.getULElement();
      var beforeCloseArgs = {
        element: ul,
        items: this.items,
        event: e,
        cancel: false
      };
      this.trigger("beforeClose", beforeCloseArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          var popupElement = _this.getPopUpElement();
          if (popupElement) {
            EventHandler.remove(popupElement, "keydown", _this.keyBoardHandler);
          }
          _this.popupUnWireEvents();
          var ul_2 = _this.getULElement();
          var selectedLi = void 0;
          if (ul_2) {
            selectedLi = ul_2.querySelector(".e-selected");
          }
          if (selectedLi) {
            selectedLi.classList.remove("e-selected");
          }
          if (_this.dropDown) {
            _this.dropDown.hide();
          }
          removeClass(_this.activeElem, "e-active");
          _this.element.setAttribute("aria-expanded", "false");
          _this.element.removeAttribute("aria-owns");
          if (focusEle) {
            if (!_this.isSafari()) {
              if (!(_this.isColorPicker() && e.keyCode === 27)) {
                focusEle.focus();
              }
            } else {
              focusEle.focus({
                preventScroll: true
              });
            }
          }
          var closeArgs = {
            element: ul_2,
            items: _this.items
          };
          _this.trigger("close", closeArgs);
          if (!_this.target && ul_2) {
            detach(ul_2);
          }
          if (!_this.target || _this.isColorPicker() || _this.target && !_this.isColorPicker()) {
            if (_this.createPopupOnClick) {
              _this.destroyPopup();
            }
          }
        } else {
          if (ul) {
            ul.focus();
          }
        }
      });
    };
    DropDownButton2.prototype.unWireEvents = function() {
      if (!this.createPopupOnClick) {
        EventHandler.remove(document, "mousedown touchstart", this.delegateMousedownHandler);
      }
      EventHandler.remove(this.element, "click", this.clickHandler);
      EventHandler.remove(this.element, "keydown", this.keyBoardHandler);
      if (this.isPopupCreated) {
        EventHandler.remove(this.getPopUpElement(), "click", this.clickHandler);
        EventHandler.remove(this.getPopUpElement(), "keydown", this.keyBoardHandler);
      }
      EventHandler.remove(window, "resize", this.windowResize);
    };
    DropDownButton2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var btnModel = ["content", "cssClass", "iconCss", "iconPosition", "disabled", "enableRtl"];
      this.button.setProperties(getModel(newProp, btnModel));
      var popupElement;
      if (this.isPopupCreated) {
        popupElement = this.getPopUpElement();
        this.dropDown.setProperties(getModel(newProp, ["enableRtl"]));
      }
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "content":
            if (!this.element.querySelector("span.e-caret")) {
              this.appendArrowSpan();
            }
            break;
          case "disabled":
            if (newProp.disabled) {
              this.unWireEvents();
              if (this.isPopupCreated && !this.canOpen()) {
                this.closePopup();
              }
            } else {
              this.wireEvents();
            }
            break;
          case "cssClass":
            oldProp.cssClass = isNullOrUndefined(oldProp.cssClass) ? "" : oldProp.cssClass;
            if (newProp.cssClass.indexOf(classNames2.VERTICAL) > -1 || oldProp.cssClass.indexOf(classNames2.VERTICAL) > -1) {
              if (!this.element.querySelector("span.e-caret")) {
                this.appendArrowSpan();
              }
              var arrowSpan = this.element.querySelector("span.e-caret");
              newProp.cssClass.indexOf(classNames2.VERTICAL) > -1 ? classList(arrowSpan, ["e-icon-bottom"], ["e-icon-right"]) : classList(arrowSpan, ["e-icon-right"], ["e-icon-bottom"]);
            }
            if (this.isPopupCreated) {
              if (oldProp.cssClass) {
                removeClass([popupElement], oldProp.cssClass.split(" "));
              }
              if (newProp.cssClass) {
                addClass([popupElement], newProp.cssClass.replace(/\s+/g, " ").trim().split(" "));
              }
            }
            break;
          case "target":
            this.dropDown.content = this.getTargetElement();
            this.dropDown.dataBind();
            break;
          case "items":
            if (this.isPopupCreated && this.getULElement()) {
              this.createItems();
            }
            break;
          case "createPopupOnClick":
            if (newProp.createPopupOnClick) {
              this.destroyPopup();
            } else {
              this.createPopup();
            }
            break;
        }
      }
    };
    DropDownButton2.prototype.focusIn = function() {
      this.element.focus();
    };
    __decorate16([Property("")], DropDownButton2.prototype, "content", void 0);
    __decorate16([Property("")], DropDownButton2.prototype, "cssClass", void 0);
    __decorate16([Property(false)], DropDownButton2.prototype, "disabled", void 0);
    __decorate16([Property("")], DropDownButton2.prototype, "iconCss", void 0);
    __decorate16([Property("Left")], DropDownButton2.prototype, "iconPosition", void 0);
    __decorate16([Property(true)], DropDownButton2.prototype, "enableHtmlSanitizer", void 0);
    __decorate16([Collection([], Item)], DropDownButton2.prototype, "items", void 0);
    __decorate16([Property(false)], DropDownButton2.prototype, "createPopupOnClick", void 0);
    __decorate16([Property("")], DropDownButton2.prototype, "target", void 0);
    __decorate16([Property("")], DropDownButton2.prototype, "closeActionEvents", void 0);
    __decorate16([Property(null)], DropDownButton2.prototype, "itemTemplate", void 0);
    __decorate16([Property("auto")], DropDownButton2.prototype, "popupWidth", void 0);
    __decorate16([Complex({
      effect: "None"
    }, DropDownMenuAnimationSettings)], DropDownButton2.prototype, "animationSettings", void 0);
    __decorate16([Event()], DropDownButton2.prototype, "beforeItemRender", void 0);
    __decorate16([Event()], DropDownButton2.prototype, "beforeOpen", void 0);
    __decorate16([Event()], DropDownButton2.prototype, "beforeClose", void 0);
    __decorate16([Event()], DropDownButton2.prototype, "close", void 0);
    __decorate16([Event()], DropDownButton2.prototype, "open", void 0);
    __decorate16([Event()], DropDownButton2.prototype, "select", void 0);
    __decorate16([Event()], DropDownButton2.prototype, "created", void 0);
    DropDownButton2 = __decorate16([NotifyPropertyChanges], DropDownButton2);
    return DropDownButton2;
  }(Component)
);

// node_modules/@syncfusion/ej2-splitbuttons/src/split-button/split-button.js
var __extends18 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate17 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RTL6 = "e-rtl";
var TAGNAME = "EJS-SPLITBUTTON";
var SplitButton = (
  /** @class */
  function(_super) {
    __extends18(SplitButton2, _super);
    function SplitButton2(options, element2) {
      return _super.call(this, options, element2) || this;
    }
    SplitButton2.prototype.preRender = function() {
      var ele = this.element;
      if (ele.tagName === TAGNAME) {
        var ejInstance = getValue("ej2_instances", ele);
        var btn = this.createElement("button", {
          attrs: {
            "type": "button"
          }
        });
        var wrapper = this.createElement(TAGNAME, {
          className: "e-" + this.getModuleName() + "-wrapper"
        });
        for (var idx = 0, len = ele.attributes.length; idx < len; idx++) {
          btn.setAttribute(ele.attributes[idx].nodeName, ele.attributes[idx].nodeValue);
        }
        ele.parentNode.insertBefore(wrapper, ele);
        detach(ele);
        ele = btn;
        wrapper.appendChild(ele);
        setValue("ej2_instances", ejInstance, ele);
        this.wrapper = wrapper;
        this.element = ele;
      }
      if (!this.element.id) {
        this.element.id = getUniqueID("e-" + this.getModuleName());
      }
    };
    SplitButton2.prototype.render = function() {
      this.initWrapper();
      this.createPrimaryButton();
      this.renderControl();
    };
    SplitButton2.prototype.renderControl = function() {
      this.createSecondaryButton();
      this.setActiveElem([this.element, this.secondaryBtnObj.element]);
      this.setAria();
      this.wireEvents();
      this.renderComplete();
    };
    SplitButton2.prototype.addItems = function(items, text) {
      _super.prototype.addItems.call(this, items, text);
      this.secondaryBtnObj.items = this.items;
    };
    SplitButton2.prototype.removeItems = function(items, isUniqueId) {
      _super.prototype.removeItems.call(this, items, isUniqueId);
      this.secondaryBtnObj.items = this.items;
    };
    SplitButton2.prototype.initWrapper = function() {
      if (!this.wrapper) {
        this.wrapper = this.createElement("div", {
          className: "e-" + this.getModuleName() + "-wrapper"
        });
        this.element.parentNode.insertBefore(this.wrapper, this.element);
      }
      this.element.classList.remove("e-" + this.getModuleName());
      if (this.enableRtl) {
        this.wrapper.classList.add(RTL6);
      }
      if (this.cssClass) {
        addClass([this.wrapper], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
      }
    };
    SplitButton2.prototype.createPrimaryButton = function() {
      var btnModel = {
        cssClass: this.cssClass,
        enableRtl: this.enableRtl,
        iconCss: this.iconCss,
        iconPosition: this.iconPosition,
        content: this.content,
        disabled: this.disabled
      };
      this.primaryBtnObj = new Button(btnModel);
      this.primaryBtnObj.createElement = this.createElement;
      this.primaryBtnObj.appendTo(this.element);
      this.element.classList.add("e-" + this.getModuleName());
      this.element.type = "button";
      this.wrapper.appendChild(this.element);
    };
    SplitButton2.prototype.createSecondaryButton = function() {
      var _this = this;
      var btnElem = this.createElement("button", {
        className: "e-icon-btn",
        attrs: {
          "tabindex": "-1"
        },
        id: this.element.id + "_dropdownbtn"
      });
      this.wrapper.appendChild(btnElem);
      var dropDownBtnModel = {
        cssClass: this.cssClass,
        disabled: this.disabled,
        enableRtl: this.enableRtl,
        items: this.items,
        target: this.target,
        createPopupOnClick: this.createPopupOnClick
      };
      dropDownBtnModel.beforeItemRender = function(args) {
        if (_this.createPopupOnClick) {
          _this.secondaryBtnObj.dropDown.relateTo = _this.wrapper;
          _this.dropDown = _this.secondaryBtnObj.dropDown;
        }
        _this.trigger("beforeItemRender", args);
      };
      dropDownBtnModel.open = function(args) {
        _this.trigger("open", args);
      };
      dropDownBtnModel.close = function(args) {
        _this.trigger("close", args);
      };
      dropDownBtnModel.select = function(args) {
        _this.trigger("select", args);
      };
      dropDownBtnModel.beforeOpen = function(args) {
        if (_this.createPopupOnClick && _this.items.length === 0) {
          _this.secondaryBtnObj.dropDown.relateTo = _this.wrapper;
          _this.dropDown = _this.secondaryBtnObj.dropDown;
        }
        var callBackPromise = new Deferred2();
        _this.trigger("beforeOpen", args, function(observedArgs) {
          callBackPromise.resolve(observedArgs);
        });
        return callBackPromise;
      };
      dropDownBtnModel.beforeClose = function(args) {
        var callBackPromise = new Deferred2();
        _this.trigger("beforeClose", args, function(observedArgs) {
          callBackPromise.resolve(observedArgs);
        });
        return callBackPromise;
      };
      this.secondaryBtnObj = new DropDownButton(dropDownBtnModel);
      this.secondaryBtnObj.createElement = this.createElement;
      this.secondaryBtnObj.appendTo(btnElem);
      if (!this.createPopupOnClick) {
        this.secondaryBtnObj.dropDown.relateTo = this.wrapper;
        this.dropDown = this.secondaryBtnObj.dropDown;
      }
      this.isPopupCreated = this.secondaryBtnObj.isPopupCreated;
      this.secondaryBtnObj.activeElem = [this.element, this.secondaryBtnObj.element];
      this.secondaryBtnObj.element.querySelector(".e-btn-icon").classList.remove("e-icon-right");
      if (this.disabled) {
        this.wrapper.classList.add("e-splitbtn-disabled");
      }
    };
    SplitButton2.prototype.setAria = function() {
      attributes(this.element, {
        "aria-expanded": "false",
        "aria-haspopup": "true",
        "aria-label": this.element.textContent ? this.element.textContent + " splitbutton" : "splitbutton",
        "aria-owns": this.element.id + "_dropdownbtn-popup"
      });
    };
    SplitButton2.prototype.getModuleName = function() {
      return "split-btn";
    };
    SplitButton2.prototype.toggle = function() {
      this.secondaryBtnObj.toggle();
    };
    SplitButton2.prototype.destroy = function() {
      var _this = this;
      var classList2 = [RTL6];
      if (this.cssClass) {
        classList2 = classList2.concat(this.cssClass.split(" "));
      }
      if (this.element) {
        var element2 = document.getElementById(this.element.id);
        if (element2 && element2.parentElement === this.wrapper) {
          if (this.wrapper.tagName === TAGNAME) {
            this.wrapper.innerHTML = "";
            removeClass([this.wrapper], ["e-rtl", "e-" + this.getModuleName() + "-wrapper"]);
            removeClass([this.wrapper], this.cssClass.split(" "));
          } else {
            removeClass([this.element], classList2);
            ["aria-label", "aria-haspopup", "aria-expanded", "aria-owns", "type"].forEach(function(key) {
              _this.element.removeAttribute(key);
            });
            this.wrapper.parentNode.insertBefore(this.element, this.wrapper);
            remove(this.wrapper);
          }
          this.unWireEvents();
        }
      }
      this.primaryBtnObj.destroy();
      this.secondaryBtnObj.destroy();
      _super.prototype.destroy.call(this);
      if (this.element && !this.element.getAttribute("class")) {
        this.element.removeAttribute("class");
      }
      if (this.refreshing && this.isAngular) {
        this.element = this.wrapper;
        ["e-control", "e-split-btn", "e-lib"].forEach(function(key) {
          _this.element.classList.add(key);
        });
        setValue("ej2_instances", [this], this.element);
      }
      this.wrapper = null;
    };
    SplitButton2.prototype.wireEvents = function() {
      EventHandler.add(this.element, "click", this.primaryBtnClickHandler, this);
      new KeyboardEvents(this.element, {
        keyAction: this.btnKeyBoardHandler.bind(this),
        keyConfigs: {
          altdownarrow: "alt+downarrow",
          enter: "enter"
        }
      });
    };
    SplitButton2.prototype.unWireEvents = function() {
      EventHandler.remove(this.element, "click", this.primaryBtnClickHandler);
      getInstance(this.element, KeyboardEvents).destroy();
    };
    SplitButton2.prototype.primaryBtnClickHandler = function() {
      this.trigger("click", {
        element: this.element
      });
    };
    SplitButton2.prototype.btnKeyBoardHandler = function(e) {
      switch (e.action) {
        case "altdownarrow":
          this.clickHandler(e);
          break;
        case "enter":
          this.clickHandler(e);
          if (this.getPopUpElement() && !this.getPopUpElement().classList.contains("e-popup-close")) {
            this.element.classList.remove("e-active");
            this.secondaryBtnObj.element.classList.add("e-active");
          } else {
            this.secondaryBtnObj.element.classList.remove("e-active");
          }
          break;
      }
    };
    SplitButton2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var model = ["content", "iconCss", "iconPosition", "cssClass", "disabled", "enableRtl"];
      this.primaryBtnObj.setProperties(getModel(newProp, model));
      model = ["beforeOpen", "beforeItemRender", "select", "open", "close", "cssClass", "disabled", "enableRtl", "createPopupOnClick"];
      if (Object.keys(newProp).indexOf("items") > -1) {
        this.secondaryBtnObj.items = newProp.items;
        this.secondaryBtnObj.dataBind();
      }
      this.secondaryBtnObj.setProperties(getModel(newProp, model));
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([this.wrapper], oldProp.cssClass.split(" "));
            }
            addClass([this.wrapper], newProp.cssClass.replace(/\s+/g, " ").trim().split(" "));
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              addClass([this.wrapper], RTL6);
            } else {
              removeClass([this.wrapper], RTL6);
            }
            break;
          case "disabled":
            if (newProp.disabled) {
              addClass([this.wrapper], "e-splitbtn-disabled");
            } else {
              removeClass([this.wrapper], "e-splitbtn-disabled");
            }
        }
      }
    };
    SplitButton2.prototype.focusIn = function() {
      this.element.focus();
    };
    __decorate17([Property("")], SplitButton2.prototype, "content", void 0);
    __decorate17([Property("")], SplitButton2.prototype, "cssClass", void 0);
    __decorate17([Property(false)], SplitButton2.prototype, "disabled", void 0);
    __decorate17([Property("")], SplitButton2.prototype, "iconCss", void 0);
    __decorate17([Property("Left")], SplitButton2.prototype, "iconPosition", void 0);
    __decorate17([Property(false)], SplitButton2.prototype, "createPopupOnClick", void 0);
    __decorate17([Collection([], Item)], SplitButton2.prototype, "items", void 0);
    __decorate17([Property("")], SplitButton2.prototype, "target", void 0);
    __decorate17([Event()], SplitButton2.prototype, "beforeItemRender", void 0);
    __decorate17([Event()], SplitButton2.prototype, "beforeOpen", void 0);
    __decorate17([Event()], SplitButton2.prototype, "beforeClose", void 0);
    __decorate17([Event()], SplitButton2.prototype, "click", void 0);
    __decorate17([Event()], SplitButton2.prototype, "close", void 0);
    __decorate17([Event()], SplitButton2.prototype, "open", void 0);
    __decorate17([Event()], SplitButton2.prototype, "select", void 0);
    __decorate17([Event()], SplitButton2.prototype, "created", void 0);
    SplitButton2 = __decorate17([NotifyPropertyChanges], SplitButton2);
    return SplitButton2;
  }(DropDownButton)
);
var Deferred2 = (
  /** @class */
  /* @__PURE__ */ function() {
    function Deferred3() {
      var _this = this;
      this.promise = new Promise(function(resolve, reject) {
        _this.resolve = resolve;
        _this.reject = reject;
      });
      this.catch = this.promise.catch.bind(this.promise);
      this.then = this.promise.then.bind(this.promise);
    }
    return Deferred3;
  }()
);

// node_modules/@syncfusion/ej2-splitbuttons/src/progress-button/progress-button.js
var __extends19 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate18 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HIDESPINNER = "e-hide-spinner";
var PROGRESS = "e-progress";
var PROGRESSACTIVE = "e-progress-active";
var CONTENTCLS = "e-btn-content";
var SpinSettings = (
  /** @class */
  function(_super) {
    __extends19(SpinSettings2, _super);
    function SpinSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate18([Property(null)], SpinSettings2.prototype, "template", void 0);
    __decorate18([Property(16)], SpinSettings2.prototype, "width", void 0);
    __decorate18([Property("Left")], SpinSettings2.prototype, "position", void 0);
    return SpinSettings2;
  }(ChildProperty)
);
var AnimationSettings2 = (
  /** @class */
  function(_super) {
    __extends19(AnimationSettings3, _super);
    function AnimationSettings3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate18([Property(400)], AnimationSettings3.prototype, "duration", void 0);
    __decorate18([Property("None")], AnimationSettings3.prototype, "effect", void 0);
    __decorate18([Property("ease")], AnimationSettings3.prototype, "easing", void 0);
    return AnimationSettings3;
  }(ChildProperty)
);
var ProgressButton = (
  /** @class */
  function(_super) {
    __extends19(ProgressButton2, _super);
    function ProgressButton2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.step = 1;
      return _this;
    }
    ProgressButton2.prototype.preRender = function() {
      _super.prototype.preRender.call(this);
    };
    ProgressButton2.prototype.render = function() {
      _super.prototype.render.call(this);
      this.init();
      this.wireEvents();
      this.setAria();
      this.renderComplete();
    };
    ProgressButton2.prototype.start = function(percent) {
      this.isPaused = false;
      this.startProgress(percent ? percent : this.percent, this.progressTime);
    };
    ProgressButton2.prototype.stop = function() {
      this.isPaused = true;
      cancelAnimationFrame(this.timerId);
    };
    ProgressButton2.prototype.progressComplete = function() {
      this.isPaused = false;
      this.finishProgress();
    };
    ProgressButton2.prototype.getModuleName = function() {
      return "progress-btn";
    };
    ProgressButton2.prototype.destroy = function() {
      var _this = this;
      var classList2 = [HIDESPINNER, PROGRESSACTIVE, "e-round-corner", "e-" + _super.prototype.getModuleName.call(this)];
      if (this.spinSettings.position) {
        classList2.push("e-spin-" + this.spinSettings.position.toLowerCase());
      }
      _super.prototype.destroy.call(this);
      this.unWireEvents();
      this.element.innerHTML = "";
      if (this.cssClass) {
        classList2 = classList2.concat(this.cssClass.split(" "));
      }
      removeClass([this.element], classList2);
      var css = this.element.getAttribute("class") ? ["aria-label", "aria-valuemin", "aria-valuemax", "aria-valuenow"] : ["aria-label", "aria-valuemin", "aria-valuemax", "aria-valuenow", "class"];
      css.forEach(function(key) {
        _this.element.removeAttribute(key);
      });
      if (this.disabled) {
        this.element.removeAttribute("disabled");
      }
    };
    ProgressButton2.prototype.init = function() {
      this.element.classList.add("e-" + _super.prototype.getModuleName.call(this));
      this.setContent();
      this.createSpinner();
      if (this.enableProgress) {
        this.createProgress();
      }
    };
    ProgressButton2.prototype.createSpinner = function() {
      var spinner = this.createElement("span", {
        className: "e-spinner"
      });
      this.setSpinPosition(spinner);
      createSpinner({
        target: spinner,
        width: this.spinSettings.width || 16,
        template: this.spinSettings.template
      }, this.createElement);
    };
    ProgressButton2.prototype.getSpinner = function() {
      return this.element.getElementsByClassName("e-spinner")[0];
    };
    ProgressButton2.prototype.getProgress = function() {
      return this.element.getElementsByClassName(PROGRESS)[0];
    };
    ProgressButton2.prototype.setSpinPosition = function(ele) {
      var position = this.spinSettings.position || "Left";
      if (position === "Left" || position === "Top") {
        this.element.insertBefore(ele, this.element.getElementsByClassName(CONTENTCLS)[0]);
      } else {
        this.element.appendChild(ele);
      }
      this.element.classList.add("e-spin-" + position.toLowerCase());
    };
    ProgressButton2.prototype.createProgress = function() {
      this.element.appendChild(this.createElement("span", {
        className: PROGRESS
      }));
    };
    ProgressButton2.prototype.setContent = function() {
      var cont;
      cont = this.element.innerHTML;
      if (this.enableHtmlSanitizer) {
        cont = SanitizeHtmlHelper.sanitize(this.element.innerHTML);
      }
      this.element.innerHTML = "";
      this.element.appendChild(this.createElement("span", {
        className: CONTENTCLS,
        innerHTML: cont
      }));
    };
    ProgressButton2.prototype.clickHandler = function() {
      if (this.element.classList.contains(PROGRESSACTIVE)) {
        return;
      }
      this.startProgress();
    };
    ProgressButton2.prototype.startProgress = function(percent, progressTime) {
      var clsList = this.element.classList;
      var isVertical = clsList.contains("e-vertical");
      clsList.add(PROGRESSACTIVE);
      if (!clsList.contains(HIDESPINNER)) {
        showSpinner(this.element.querySelector(".e-spinner"));
      }
      this.startAnimate(Date.now(), progressTime ? progressTime : 0, progressTime ? Date.now() - this.duration * 1 / 100 : Date.now(), percent ? percent : 0, 0, this.step, 0, isVertical);
      this.startContAnimate();
    };
    ProgressButton2.prototype.startAnimate = function(timestamp, progressTime, prevTime, percent, prevPercent, step, prevProgressTime, isVertical) {
      var _this = this;
      try {
        var timeDiff = timestamp - prevTime;
        var stepTime = this.duration * step / 100;
        var timeDiffBuffer_1 = timeDiff ? timeDiff < stepTime ? timeDiff - stepTime : timeDiff % stepTime : 0;
        this.progressTime = progressTime = progressTime + timeDiff - timeDiffBuffer_1;
        prevTime = timestamp - timeDiffBuffer_1;
        percent = percent + (timeDiff - timeDiffBuffer_1) / this.duration * 100;
        prevPercent = (progressTime - prevProgressTime) % stepTime === 0 || percent === 100 ? percent : prevPercent;
        var args = {
          percent: prevPercent,
          currentDuration: progressTime,
          step
        };
        this.eIsVertical = isVertical;
        if (percent === 0) {
          this.trigger("begin", args, function(observedArgs) {
            _this.successCallback(observedArgs, percent, prevPercent, progressTime, prevProgressTime, timeDiffBuffer_1, prevTime);
          });
        } else if (percent === 100 || progressTime === this.duration) {
          this.trigger("end", args, function(observedArgs) {
            _this.successCallback(observedArgs, percent, prevPercent, progressTime, prevProgressTime, timeDiffBuffer_1, prevTime);
          });
        } else {
          this.trigger("progress", args, function(observedArgs) {
            _this.successCallback(observedArgs, percent, prevPercent, progressTime, prevProgressTime, timeDiffBuffer_1, prevTime);
          });
        }
      } catch (e) {
        cancelAnimationFrame(this.timerId);
        this.trigger("fail", e);
      }
    };
    ProgressButton2.prototype.successCallback = function(args, perc, pPerc, prgTim, pPrgTim, timDif, pTim) {
      var _this = this;
      var percent = perc;
      var prevPercent = pPerc;
      var timeDiffBuffer = timDif;
      var progressTime = prgTim;
      var prevProgressTime = pPrgTim;
      var prevTime = pTim;
      var isVertical = this.eIsVertical;
      if (percent !== args.percent && args.percent !== prevPercent) {
        percent = args.percent;
      }
      this.percent = percent;
      this.step = args.step;
      if ((progressTime - prevProgressTime) % (this.duration * args.step / 100) === 0 || percent === 100) {
        this.timerId = requestAnimationFrame(function() {
          if (_this.enableProgress && _this.getProgress()) {
            _this.getProgress().style[isVertical ? "height" : "width"] = percent + "%";
          }
          _this.element.setAttribute("aria-valuenow", percent.toString());
        });
        prevPercent = percent;
        prevProgressTime = progressTime;
      }
      if (!this.isPaused) {
        if (progressTime < this.duration && percent < 100) {
          this.interval = window.setTimeout(function() {
            _this.startAnimate(Date.now(), progressTime, prevTime, percent, prevPercent, args.step, prevProgressTime, isVertical);
          }, this.duration / 100 - timeDiffBuffer);
        } else {
          this.interval = window.setTimeout(function() {
            _this.progressTime = _this.percent = 0;
            if (_this.enableProgress && _this.getProgress()) {
              _this.getProgress().style[isVertical ? "height" : "width"] = "0%";
            }
            _this.element.setAttribute("aria-valuenow", "0");
            _this.hideSpin();
          }, 100);
        }
      }
    };
    ProgressButton2.prototype.startContAnimate = function() {
      var _this = this;
      var ele = this.element.getElementsByClassName(CONTENTCLS)[0];
      if (this.animationSettings.effect !== "None") {
        new Animation({}).animate(ele, {
          duration: this.animationSettings.duration === 0 && animationMode === "Enable" ? 400 : this.animationSettings.duration,
          name: "Progress" + this.animationSettings.effect,
          timingFunction: this.animationSettings.easing,
          begin: function() {
            if (_this.spinSettings.position === "Center") {
              _this.setSpinnerSize();
            }
          },
          end: function() {
            ele.classList.add("e-animate-end");
          }
        });
      } else if (this.spinSettings.position === "Center") {
        this.setSpinnerSize();
      }
    };
    ProgressButton2.prototype.finishProgress = function() {
      var clsList = this.element.classList;
      var isVertical = clsList.contains("e-vertical");
      clsList.add(PROGRESSACTIVE);
      var count = 100;
      for (var i = this.percent; i < count; i++) {
        i += 10;
        if (i > 100) {
          i = 100;
        }
        if (this.enableProgress && this.getProgress()) {
          this.getProgress().style[isVertical ? "height" : "width"] = this.percent < 100 ? i + "%" : "100%";
        }
      }
      this.element.setAttribute("aria-valuenow", "0");
      this.hideSpin();
      var args = {
        step: this.step,
        currentDuration: this.progressTime,
        percent: 100
      };
      clearTimeout(this.interval);
      this.trigger("end", args);
      this.progressTime = this.percent = 0;
    };
    ProgressButton2.prototype.setSpinnerSize = function() {
      var ele = this.element.getElementsByClassName(CONTENTCLS)[0];
      var spinner = this.getSpinner();
      spinner.style.width = Math.max(spinner.offsetWidth, ele.offsetWidth) + "px";
      spinner.style.height = Math.max(spinner.offsetHeight, ele.offsetHeight) + "px";
      ele.classList.add("e-cont-animate");
    };
    ProgressButton2.prototype.hideSpin = function() {
      var cont = this.element.getElementsByClassName(CONTENTCLS)[0];
      if (!this.element.classList.contains(HIDESPINNER)) {
        hideSpinner(this.element.querySelector(".e-spinner"));
      }
      this.element.classList.remove(PROGRESSACTIVE);
      if (this.animationSettings.effect !== "None") {
        cont.classList.remove("e-animate-end");
      }
      if (this.spinSettings.position === "Center") {
        var ele = this.getSpinner();
        cont.classList.remove("e-cont-animate");
        ele.style.width = "auto";
        ele.style.height = "auto";
      }
    };
    ProgressButton2.prototype.setIconSpan = function() {
      var cont = this.element.getElementsByClassName(CONTENTCLS)[0];
      var iconSpan = this.element.getElementsByClassName("e-btn-icon")[0];
      if (cont.childNodes[0] && (this.iconPosition === "Left" || this.iconPosition === "Top")) {
        cont.insertBefore(iconSpan, cont.childNodes[0]);
      } else {
        cont.appendChild(iconSpan);
      }
    };
    ProgressButton2.prototype.setAria = function() {
      attributes(this.element, {
        "aria-label": this.element.textContent + " progress"
      });
    };
    ProgressButton2.prototype.wireEvents = function() {
      EventHandler.add(this.element, "click", this.clickHandler, this);
    };
    ProgressButton2.prototype.unWireEvents = function() {
      EventHandler.remove(this.element, "click", this.clickHandler);
    };
    ProgressButton2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var ele = this.element;
      var isSpinning = false;
      var clsList = this.element.querySelector(".e-spinner-pane").classList;
      if (clsList.contains("e-spin-show")) {
        isSpinning = true;
      }
      _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "content":
            this.setContent();
            this.createSpinner();
            if (isSpinning) {
              showSpinner(this.element.querySelector(".e-spinner"));
              isSpinning = false;
            }
            if (this.enableProgress) {
              this.createProgress();
            }
            ele.setAttribute("aria-label", ele.textContent + " progress");
            break;
          case "iconCss":
            if (!oldProp.iconCss) {
              this.setIconSpan();
            }
            break;
          case "iconPosition":
            this.setIconSpan();
            break;
          case "enableProgress":
            if (newProp.enableProgress) {
              this.createProgress();
            } else {
              remove(this.getProgress());
            }
            break;
          case "spinSettings":
            if (newProp.spinSettings.position) {
              ele.classList.remove("e-spin-" + oldProp.spinSettings.position.toLowerCase());
              this.setSpinPosition(this.getSpinner());
            }
            if (newProp.spinSettings.template || newProp.spinSettings.width) {
              ele.removeChild(this.getSpinner());
              this.createSpinner();
            }
            break;
        }
      }
    };
    ProgressButton2.prototype.focusIn = function() {
      this.element.focus();
    };
    __decorate18([Property(false)], ProgressButton2.prototype, "enableProgress", void 0);
    __decorate18([Property(2e3)], ProgressButton2.prototype, "duration", void 0);
    __decorate18([Property("Left")], ProgressButton2.prototype, "iconPosition", void 0);
    __decorate18([Property("")], ProgressButton2.prototype, "iconCss", void 0);
    __decorate18([Property(false)], ProgressButton2.prototype, "disabled", void 0);
    __decorate18([Property(false)], ProgressButton2.prototype, "isPrimary", void 0);
    __decorate18([Property("")], ProgressButton2.prototype, "cssClass", void 0);
    __decorate18([Property("")], ProgressButton2.prototype, "content", void 0);
    __decorate18([Property(false)], ProgressButton2.prototype, "isToggle", void 0);
    __decorate18([Property(true)], ProgressButton2.prototype, "enableHtmlSanitizer", void 0);
    __decorate18([Complex({}, SpinSettings)], ProgressButton2.prototype, "spinSettings", void 0);
    __decorate18([Complex({}, AnimationSettings2)], ProgressButton2.prototype, "animationSettings", void 0);
    __decorate18([Event()], ProgressButton2.prototype, "created", void 0);
    __decorate18([Event()], ProgressButton2.prototype, "begin", void 0);
    __decorate18([Event()], ProgressButton2.prototype, "progress", void 0);
    __decorate18([Event()], ProgressButton2.prototype, "end", void 0);
    __decorate18([Event()], ProgressButton2.prototype, "fail", void 0);
    ProgressButton2 = __decorate18([NotifyPropertyChanges], ProgressButton2);
    return ProgressButton2;
  }(Button)
);

// node_modules/@syncfusion/ej2-inputs/src/slider/slider.js
var __extends20 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate19 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TicksData = (
  /** @class */
  function(_super) {
    __extends20(TicksData2, _super);
    function TicksData2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate19([Property("None")], TicksData2.prototype, "placement", void 0);
    __decorate19([Property(10)], TicksData2.prototype, "largeStep", void 0);
    __decorate19([Property(1)], TicksData2.prototype, "smallStep", void 0);
    __decorate19([Property(false)], TicksData2.prototype, "showSmallTicks", void 0);
    __decorate19([Property(null)], TicksData2.prototype, "format", void 0);
    return TicksData2;
  }(ChildProperty)
);
var ColorRangeData = (
  /** @class */
  function(_super) {
    __extends20(ColorRangeData2, _super);
    function ColorRangeData2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate19([Property(null)], ColorRangeData2.prototype, "color", void 0);
    __decorate19([Property(null)], ColorRangeData2.prototype, "start", void 0);
    __decorate19([Property(null)], ColorRangeData2.prototype, "end", void 0);
    return ColorRangeData2;
  }(ChildProperty)
);
var LimitData = (
  /** @class */
  function(_super) {
    __extends20(LimitData2, _super);
    function LimitData2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate19([Property(false)], LimitData2.prototype, "enabled", void 0);
    __decorate19([Property(null)], LimitData2.prototype, "minStart", void 0);
    __decorate19([Property(null)], LimitData2.prototype, "minEnd", void 0);
    __decorate19([Property(null)], LimitData2.prototype, "maxStart", void 0);
    __decorate19([Property(null)], LimitData2.prototype, "maxEnd", void 0);
    __decorate19([Property(false)], LimitData2.prototype, "startHandleFixed", void 0);
    __decorate19([Property(false)], LimitData2.prototype, "endHandleFixed", void 0);
    return LimitData2;
  }(ChildProperty)
);
var TooltipData = (
  /** @class */
  function(_super) {
    __extends20(TooltipData2, _super);
    function TooltipData2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate19([Property("")], TooltipData2.prototype, "cssClass", void 0);
    __decorate19([Property("Before")], TooltipData2.prototype, "placement", void 0);
    __decorate19([Property("Focus")], TooltipData2.prototype, "showOn", void 0);
    __decorate19([Property(false)], TooltipData2.prototype, "isVisible", void 0);
    __decorate19([Property(null)], TooltipData2.prototype, "format", void 0);
    return TooltipData2;
  }(ChildProperty)
);
var bootstrapTooltipOffset = 6;
var bootstrap4TooltipOffset = 3;
var tolerance = 1e-10;
var classNames3 = {
  root: "e-slider",
  rtl: "e-rtl",
  sliderHiddenInput: "e-slider-input",
  controlWrapper: "e-control-wrapper",
  sliderHandle: "e-handle",
  rangeBar: "e-range",
  sliderButton: "e-slider-button",
  firstButton: "e-first-button",
  secondButton: "e-second-button",
  scale: "e-scale",
  tick: "e-tick",
  large: "e-large",
  tickValue: "e-tick-value",
  sliderTooltip: "e-slider-tooltip",
  sliderHover: "e-slider-hover",
  sliderFirstHandle: "e-handle-first",
  sliderSecondHandle: "e-handle-second",
  sliderDisabled: "e-disabled",
  sliderContainer: "e-slider-container",
  horizontalTooltipBefore: "e-slider-horizontal-before",
  horizontalTooltipAfter: "e-slider-horizontal-after",
  verticalTooltipBefore: "e-slider-vertical-before",
  verticalTooltipAfter: "e-slider-vertical-after",
  materialTooltip: "e-material-tooltip",
  materialTooltipOpen: "e-material-tooltip-open",
  materialTooltipActive: "e-tooltip-active",
  materialSlider: "e-material-slider",
  sliderTrack: "e-slider-track",
  sliderHorizantalColor: "e-slider-horizantal-color",
  sliderVerticalColor: "e-slider-vertical-color",
  sliderHandleFocused: "e-handle-focused",
  verticalSlider: "e-vertical",
  horizontalSlider: "e-horizontal",
  sliderHandleStart: "e-handle-start",
  sliderTooltipStart: "e-material-tooltip-start",
  sliderTabHandle: "e-tab-handle",
  sliderButtonIcon: "e-button-icon",
  sliderSmallSize: "e-small-size",
  sliderTickPosition: "e-tick-pos",
  sliderFirstTick: "e-first-tick",
  sliderLastTick: "e-last-tick",
  sliderButtonClass: "e-slider-btn",
  sliderTooltipWrapper: "e-tooltip-wrap",
  sliderTabTrack: "e-tab-track",
  sliderTabRange: "e-tab-range",
  sliderActiveHandle: "e-handle-active",
  sliderMaterialHandle: "e-material-handle",
  sliderMaterialRange: "e-material-range",
  sliderMaterialDefault: "e-material-default",
  materialTooltipShow: "e-material-tooltip-show",
  materialTooltipHide: "e-material-tooltip-hide",
  readonly: "e-read-only",
  limits: "e-limits",
  limitBarDefault: "e-limit-bar",
  limitBarFirst: "e-limit-first",
  limitBarSecond: "e-limit-second",
  dragHorizontal: "e-drag-horizontal",
  dragVertical: "e-drag-vertical"
};
var Slider = (
  /** @class */
  function(_super) {
    __extends20(Slider2, _super);
    function Slider2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.horDir = "left";
      _this.verDir = "bottom";
      _this.transition = {
        handle: "left .4s cubic-bezier(.25, .8, .25, 1), right .4s cubic-bezier(.25, .8, .25, 1), top .4s cubic-bezier(.25, .8, .25, 1) , bottom .4s cubic-bezier(.25, .8, .25, 1)",
        rangeBar: "all .4s cubic-bezier(.25, .8, .25, 1)"
      };
      _this.transitionOnMaterialTooltip = {
        handle: "left 1ms ease-out, right 1ms ease-out, bottom 1ms ease-out, top 1ms ease-out",
        rangeBar: "left 1ms ease-out, right 1ms ease-out, bottom 1ms ease-out, width 1ms ease-out, height 1ms ease-out"
      };
      _this.scaleTransform = "transform .4s cubic-bezier(.25, .8, .25, 1)";
      _this.customAriaText = null;
      _this.drag = true;
      _this.isDragComplete = false;
      _this.initialTooltip = true;
      return _this;
    }
    Slider2.prototype.preRender = function() {
      var localeText = {
        incrementTitle: "Increase",
        decrementTitle: "Decrease"
      };
      this.l10n = new L10n("slider", localeText, this.locale);
      this.isElementFocused = false;
      this.tickElementCollection = [];
      this.tooltipFormatInfo = {};
      this.ticksFormatInfo = {};
      this.initCultureInfo();
      this.initCultureFunc();
      this.formChecker();
    };
    Slider2.prototype.formChecker = function() {
      var formElement = closest(this.element, "form");
      if (formElement) {
        this.isForm = true;
        if (!isNullOrUndefined(this.formResetValue)) {
          this.setProperties({
            "value": this.formResetValue
          }, true);
        }
        this.formResetValue = this.value;
        if (this.type === "Range" && (isNullOrUndefined(this.formResetValue) || typeof this.formResetValue !== "object")) {
          this.formResetValue = [parseFloat(formatUnit(this.min)), parseFloat(formatUnit(this.max))];
        } else if (isNullOrUndefined(this.formResetValue)) {
          this.formResetValue = parseFloat(formatUnit(this.min));
        }
        this.formElement = formElement;
      } else {
        this.isForm = false;
      }
    };
    Slider2.prototype.initCultureFunc = function() {
      this.internationalization = new Internationalization(this.locale);
    };
    Slider2.prototype.initCultureInfo = function() {
      this.tooltipFormatInfo.format = !isNullOrUndefined(this.tooltip.format) ? this.tooltip.format : null;
      this.ticksFormatInfo.format = !isNullOrUndefined(this.ticks.format) ? this.ticks.format : null;
    };
    Slider2.prototype.formatString = function(value, formatInfo) {
      var formatValue = null;
      var formatString = null;
      if (value || value === 0) {
        formatValue = this.formatNumber(value);
        var numberOfDecimals = this.numberOfDecimals(value);
        formatString = this.internationalization.getNumberFormat(formatInfo)(this.makeRoundNumber(value, numberOfDecimals));
      }
      return {
        elementVal: formatValue,
        formatString
      };
    };
    Slider2.prototype.formatNumber = function(value) {
      var numberOfDecimals = this.numberOfDecimals(value);
      return this.internationalization.getNumberFormat({
        maximumFractionDigits: numberOfDecimals,
        minimumFractionDigits: numberOfDecimals,
        useGrouping: false
      })(value);
    };
    Slider2.prototype.numberOfDecimals = function(value) {
      var decimalPart = value.toString().split(".")[1];
      var numberOfDecimals = !decimalPart || !decimalPart.length ? 0 : decimalPart.length;
      return numberOfDecimals;
    };
    Slider2.prototype.makeRoundNumber = function(value, precision) {
      var decimals = precision || 0;
      return Number(value.toFixed(decimals));
    };
    Slider2.prototype.render = function() {
      var _this = this;
      this.initialize();
      this.initRender();
      this.wireEvents();
      this.setZindex();
      this.renderComplete();
      if (this.element.tagName === "EJS-SLIDER") {
        if (this.getTheme(this.sliderContainer) === "none") {
          setTimeout(function() {
            _this.refresh();
          }, 0);
        }
      }
    };
    Slider2.prototype.initialize = function() {
      addClass([this.element], classNames3.root);
      this.setCSSClass();
    };
    Slider2.prototype.setElementWidth = function(width) {
      if (!isNullOrUndefined(width) && !isNullOrUndefined(this.sliderContainer)) {
        if (typeof width === "number") {
          this.sliderContainer.style.width = formatUnit(width);
        } else if (typeof width === "string") {
          this.sliderContainer.style.width = width.match(/px|%|em/) ? width : formatUnit(width);
        }
      }
    };
    Slider2.prototype.setCSSClass = function(oldCSSClass) {
      if (oldCSSClass) {
        removeClass([this.element], oldCSSClass.split(" "));
      }
      if (this.cssClass) {
        addClass([this.element], this.cssClass.split(" "));
      }
    };
    Slider2.prototype.setEnabled = function() {
      if (!this.enabled) {
        addClass([this.sliderContainer], [classNames3.sliderDisabled]);
        if (this.tooltip.isVisible && this.tooltipElement && this.tooltip.showOn === "Always") {
          this.tooltipElement.classList.add(classNames3.sliderDisabled);
        }
        this.unwireEvents();
      } else {
        removeClass([this.sliderContainer], [classNames3.sliderDisabled]);
        if (this.tooltip.isVisible && this.tooltipElement && this.tooltip.showOn === "Always") {
          this.tooltipElement.classList.remove(classNames3.sliderDisabled);
        }
        this.wireEvents();
      }
    };
    Slider2.prototype.getTheme = function(container) {
      var theme = window.getComputedStyle(container, ":after").getPropertyValue("content");
      return theme.replace(/['"]+/g, "");
    };
    Slider2.prototype.initRender = function() {
      this.sliderContainer = this.createElement("div", {
        className: classNames3.sliderContainer + " " + classNames3.controlWrapper
      });
      this.element.parentNode.insertBefore(this.sliderContainer, this.element);
      this.sliderContainer.appendChild(this.element);
      this.sliderTrack = this.createElement("div", {
        className: classNames3.sliderTrack
      });
      this.element.appendChild(this.sliderTrack);
      this.setElementWidth(this.width);
      this.element.tabIndex = -1;
      this.getThemeInitialization();
      this.setHandler();
      this.createRangeBar();
      if (this.limits.enabled) {
        this.createLimitBar();
      }
      this.setOrientClass();
      this.hiddenInput = this.createElement("input", {
        attrs: {
          type: "hidden",
          value: isNullOrUndefined(this.value) ? isNullOrUndefined(this.min) ? "0" : this.min.toString() : this.value.toString(),
          name: this.element.getAttribute("name") || this.element.getAttribute("id") || "_" + (Math.random() * 1e3).toFixed(0) + "slider",
          class: classNames3.sliderHiddenInput
        }
      });
      this.hiddenInput.tabIndex = -1;
      this.sliderContainer.appendChild(this.hiddenInput);
      if (this.showButtons) {
        this.setButtons();
      }
      this.setEnableRTL();
      if (this.type === "Range") {
        this.rangeValueUpdate();
      } else {
        this.value = isNullOrUndefined(this.value) ? isNullOrUndefined(this.min) ? 0 : parseFloat(formatUnit(this.min.toString())) : this.value;
      }
      this.previousVal = this.type !== "Range" ? this.checkHandleValue(parseFloat(formatUnit(this.value.toString()))) : [this.checkHandleValue(parseFloat(formatUnit(this.value[0].toString()))), this.checkHandleValue(parseFloat(formatUnit(this.value[1].toString())))];
      this.previousChanged = this.previousVal;
      if (!isNullOrUndefined(this.element.hasAttribute("name"))) {
        this.element.removeAttribute("name");
      }
      this.setValue();
      if (this.limits.enabled) {
        this.setLimitBar();
      }
      if (this.ticks.placement !== "None") {
        this.renderScale();
      }
      if (this.tooltip.isVisible) {
        this.renderTooltip();
      }
      if (!this.enabled) {
        addClass([this.sliderContainer], [classNames3.sliderDisabled]);
      } else {
        removeClass([this.sliderContainer], [classNames3.sliderDisabled]);
      }
      if (this.readonly) {
        addClass([this.sliderContainer], [classNames3.readonly]);
      } else {
        removeClass([this.sliderContainer], [classNames3.readonly]);
      }
    };
    Slider2.prototype.getThemeInitialization = function() {
      this.isMaterial = this.getTheme(this.sliderContainer) === "material" || this.getTheme(this.sliderContainer) === "material-dark";
      this.isMaterial3 = this.getTheme(this.sliderContainer) === "Material3" || this.getTheme(this.sliderContainer) === "Material3-dark";
      this.isBootstrap = this.getTheme(this.sliderContainer) === "bootstrap" || this.getTheme(this.sliderContainer) === "bootstrap-dark";
      this.isBootstrap4 = this.getTheme(this.sliderContainer) === "bootstrap4";
      this.isTailwind = this.getTheme(this.sliderContainer) === "tailwind" || this.getTheme(this.sliderContainer) === "tailwind-dark";
      this.isTailwind3 = this.getTheme(this.sliderContainer) === "tailwind3" || this.getTheme(this.sliderContainer) === "tailwind3-dark";
      this.isBootstrap5 = this.getTheme(this.sliderContainer) === "bootstrap5";
      this.isFluent = this.getTheme(this.sliderContainer) === "FluentUI";
      this.isFluent2 = this.getTheme(this.sliderContainer) === "fluent2";
      this.isBootstrap5Dot3 = this.getTheme(this.sliderContainer) === "bootstrap5.3";
      this.isMaterialTooltip = (this.isMaterial || this.isMaterial3) && this.type !== "Range" && this.tooltip.isVisible;
    };
    Slider2.prototype.createRangeBar = function() {
      if (this.type !== "Default") {
        this.rangeBar = this.createElement("div", {
          attrs: {
            class: classNames3.rangeBar
          }
        });
        this.element.appendChild(this.rangeBar);
        if (this.drag && this.type === "Range") {
          if (this.orientation === "Horizontal") {
            this.rangeBar.classList.add(classNames3.dragHorizontal);
          } else {
            this.rangeBar.classList.add(classNames3.dragVertical);
          }
        }
      }
    };
    Slider2.prototype.createLimitBar = function() {
      var firstElementClassName = this.type !== "Range" ? classNames3.limitBarDefault : classNames3.limitBarFirst;
      firstElementClassName += " " + classNames3.limits;
      this.limitBarFirst = this.createElement("div", {
        attrs: {
          class: firstElementClassName
        }
      });
      this.element.appendChild(this.limitBarFirst);
      if (this.type === "Range") {
        this.limitBarSecond = this.createElement("div", {
          attrs: {
            class: classNames3.limitBarSecond + " " + classNames3.limits
          }
        });
        this.element.appendChild(this.limitBarSecond);
      }
    };
    Slider2.prototype.setOrientClass = function() {
      if (this.orientation !== "Vertical") {
        this.sliderContainer.classList.remove(classNames3.verticalSlider);
        this.sliderContainer.classList.add(classNames3.horizontalSlider);
        this.firstHandle.setAttribute("aria-orientation", "horizontal");
        if (this.type === "Range") {
          this.secondHandle.setAttribute("aria-orientation", "horizontal");
        }
      } else {
        this.sliderContainer.classList.remove(classNames3.horizontalSlider);
        this.sliderContainer.classList.add(classNames3.verticalSlider);
        this.firstHandle.setAttribute("aria-orientation", "vertical");
        if (this.type === "Range") {
          this.secondHandle.setAttribute("aria-orientation", "vertical");
        }
      }
    };
    Slider2.prototype.setAriaAttributes = function(element2) {
      var _this = this;
      var min = this.min;
      var max = this.max;
      if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {
        min = this.customValues[0];
        max = this.customValues[this.customValues.length - 1];
      }
      if (this.type !== "Range") {
        attributes(element2, {
          "aria-valuemin": isNullOrUndefined(min) ? "0" : min.toString(),
          "aria-valuemax": isNullOrUndefined(max) ? "100" : max.toString()
        });
      } else {
        var range = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 ? [[min.toString(), this.customValues[this.value[1]].toString()], [this.customValues[this.value[0]].toString(), max.toString()]] : [[min.toString(), this.value[1].toString()], [this.value[0].toString(), max.toString()]];
        range.forEach(function(range2, index) {
          var element3 = index === 0 ? _this.firstHandle : _this.secondHandle;
          if (element3) {
            attributes(element3, {
              "aria-valuemin": range2[0],
              "aria-valuemax": range2[1]
            });
          }
        });
      }
    };
    Slider2.prototype.createSecondHandle = function() {
      this.secondHandle = this.createElement("div", {
        attrs: {
          class: classNames3.sliderHandle,
          "role": "slider",
          tabIndex: "0",
          "aria-label": "slider"
        }
      });
      this.secondHandle.classList.add(classNames3.sliderSecondHandle);
      this.element.appendChild(this.secondHandle);
    };
    Slider2.prototype.createFirstHandle = function() {
      this.firstHandle = this.createElement("div", {
        attrs: {
          class: classNames3.sliderHandle,
          "role": "slider",
          tabIndex: "0",
          "aria-label": "slider"
        }
      });
      this.firstHandle.classList.add(classNames3.sliderFirstHandle);
      this.element.appendChild(this.firstHandle);
      if (this.isMaterialTooltip) {
        this.materialHandle = this.createElement("div", {
          attrs: {
            class: classNames3.sliderHandle + " " + classNames3.sliderMaterialHandle
          }
        });
        this.element.appendChild(this.materialHandle);
      }
    };
    Slider2.prototype.wireFirstHandleEvt = function(destroy3) {
      if (!destroy3) {
        EventHandler.add(this.firstHandle, "mousedown touchstart", this.handleFocus, this);
        EventHandler.add(this.firstHandle, "transitionend", this.transitionEnd, this);
        EventHandler.add(this.firstHandle, "mouseenter touchenter", this.handleOver, this);
        EventHandler.add(this.firstHandle, "mouseleave touchend", this.handleLeave, this);
      } else {
        EventHandler.remove(this.firstHandle, "mousedown touchstart", this.handleFocus);
        EventHandler.remove(this.firstHandle, "transitionend", this.transitionEnd);
        EventHandler.remove(this.firstHandle, "mouseenter touchenter", this.handleOver);
        EventHandler.remove(this.firstHandle, "mouseleave touchend", this.handleLeave);
      }
    };
    Slider2.prototype.wireSecondHandleEvt = function(destroy3) {
      if (!destroy3) {
        EventHandler.add(this.secondHandle, "mousedown touchstart", this.handleFocus, this);
        EventHandler.add(this.secondHandle, "transitionend", this.transitionEnd, this);
        EventHandler.add(this.secondHandle, "mouseenter touchenter", this.handleOver, this);
        EventHandler.add(this.secondHandle, "mouseleave touchend", this.handleLeave, this);
      } else {
        EventHandler.remove(this.secondHandle, "mousedown touchstart", this.handleFocus);
        EventHandler.remove(this.secondHandle, "transitionend", this.transitionEnd);
        EventHandler.remove(this.secondHandle, "mouseenter touchenter", this.handleOver);
        EventHandler.remove(this.secondHandle, "mouseleave touchend", this.handleLeave);
      }
    };
    Slider2.prototype.handleStart = function() {
      if (this.type !== "Range") {
        this.firstHandle.classList[this.handlePos1 === 0 ? "add" : "remove"](classNames3.sliderHandleStart);
        if (this.isMaterialTooltip) {
          this.materialHandle.classList[this.handlePos1 === 0 ? "add" : "remove"](classNames3.sliderHandleStart);
          if (this.tooltipElement) {
            this.tooltipElement.classList[this.handlePos1 === 0 ? "add" : "remove"](classNames3.sliderTooltipStart);
          }
        }
      }
    };
    Slider2.prototype.transitionEnd = function(e) {
      if (e.propertyName !== "transform") {
        this.handleStart();
        if (!this.enableAnimation) {
          this.getHandle().style.transition = "none";
        }
        if (this.type !== "Default") {
          this.rangeBar.style.transition = "none";
        }
        if ((this.isMaterial || this.isMaterial3) && this.tooltip.isVisible && this.type === "Default") {
          this.tooltipElement.style.transition = this.transition.handle;
        }
        this.tooltipToggle(this.getHandle());
        this.closeTooltip();
      }
    };
    Slider2.prototype.handleFocusOut = function() {
      if (this.firstHandle.classList.contains(classNames3.sliderHandleFocused)) {
        this.firstHandle.classList.remove(classNames3.sliderHandleFocused);
      }
      if (this.type === "Range") {
        if (this.secondHandle.classList.contains(classNames3.sliderHandleFocused)) {
          this.secondHandle.classList.remove(classNames3.sliderHandleFocused);
        }
      }
    };
    Slider2.prototype.handleFocus = function(e) {
      this.focusSliderElement();
      this.sliderBarClick(e);
      if (e.currentTarget === this.firstHandle) {
        this.firstHandle.classList.add(classNames3.sliderHandleFocused);
        this.firstHandle.classList.add(classNames3.sliderTabHandle);
      } else {
        this.secondHandle.classList.add(classNames3.sliderHandleFocused);
        this.secondHandle.classList.add(classNames3.sliderTabHandle);
      }
      EventHandler.add(document, "mousemove touchmove", this.sliderBarMove, this);
      EventHandler.add(document, "mouseup touchend", this.sliderBarUp, this);
    };
    Slider2.prototype.handleOver = function(e) {
      if (this.tooltip.isVisible && this.tooltip.showOn === "Hover") {
        this.tooltipToggle(e.currentTarget);
      }
      if (this.type === "Default") {
        this.tooltipToggle(this.getHandle());
      }
    };
    Slider2.prototype.handleLeave = function(e) {
      if (this.tooltip.isVisible && this.tooltip.showOn === "Hover" && !e.currentTarget.classList.contains(classNames3.sliderHandleFocused) && !e.currentTarget.classList.contains(classNames3.sliderTabHandle)) {
        this.closeTooltip();
      }
    };
    Slider2.prototype.setHandler = function() {
      this.createFirstHandle();
      if (this.type === "Range") {
        this.createSecondHandle();
      }
    };
    Slider2.prototype.setEnableRTL = function() {
      if (this.enableRtl && this.orientation !== "Vertical") {
        addClass([this.sliderContainer], classNames3.rtl);
      } else {
        removeClass([this.sliderContainer], classNames3.rtl);
      }
      var preDir = this.orientation !== "Vertical" ? this.horDir : this.verDir;
      if (this.enableRtl) {
        this.horDir = "right";
        this.verDir = "bottom";
      } else {
        this.horDir = "left";
        this.verDir = "bottom";
      }
      var currDir = this.orientation !== "Vertical" ? this.horDir : this.verDir;
      if (preDir !== currDir) {
        if (this.orientation === "Horizontal") {
          setStyleAttribute(this.firstHandle, {
            "right": "",
            "left": "auto"
          });
          if (this.type === "Range") {
            setStyleAttribute(this.secondHandle, {
              "top": "",
              "left": "auto"
            });
          }
        }
      }
      this.setBarColor();
    };
    Slider2.prototype.tooltipValue = function() {
      var _this = this;
      var text;
      var args = {
        value: this.value,
        text: ""
      };
      if (this.initialTooltip) {
        this.initialTooltip = false;
        this.setTooltipContent();
        args.text = text = typeof this.tooltipObj.content === "function" ? this.tooltipObj.content() : this.tooltipObj.content;
        this.trigger("tooltipChange", args, function(observedArgs) {
          _this.addTooltipClass(observedArgs.text);
          if (text !== observedArgs.text) {
            _this.customAriaText = observedArgs.text;
            if (_this.enableHtmlSanitizer) {
              observedArgs.text = SanitizeHtmlHelper.sanitize(observedArgs.text.toString());
            } else {
              observedArgs.text = observedArgs.text.toString();
            }
            var contentTemp = function() {
              return observedArgs.text;
            };
            _this.tooltipObj.content = initializeCSPTemplate(contentTemp);
            _this.setAriaAttrValue(_this.firstHandle);
            if (_this.type === "Range") {
              _this.setAriaAttrValue(_this.secondHandle);
            }
          }
        });
        if (this.isMaterialTooltip) {
          this.setPreviousVal("change", this.value);
        }
      }
    };
    Slider2.prototype.setTooltipContent = function() {
      var content = this.formatContent(this.tooltipFormatInfo, false);
      var contentTemp = function() {
        return content;
      };
      this.tooltipObj.content = initializeCSPTemplate(contentTemp);
    };
    Slider2.prototype.formatContent = function(formatInfo, ariaContent) {
      var content = "";
      var handle1 = this.handleVal1;
      var handle2 = this.handleVal2;
      if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {
        handle1 = this.customValues[this.handleVal1];
        handle2 = this.customValues[this.handleVal2];
      }
      if (!ariaContent) {
        if (this.type === "Range") {
          if (this.enableRtl && this.orientation !== "Vertical") {
            content = !isNullOrUndefined(formatInfo.format) ? this.formatString(handle2, formatInfo).formatString + " - " + this.formatString(handle1, formatInfo).formatString : handle2.toString() + " - " + handle1.toString();
          } else {
            content = !isNullOrUndefined(formatInfo.format) ? this.formatString(handle1, formatInfo).formatString + " - " + this.formatString(handle2, formatInfo).formatString : handle1.toString() + " - " + handle2.toString();
          }
        } else {
          if (!isNullOrUndefined(handle1)) {
            content = !isNullOrUndefined(formatInfo.format) ? this.formatString(handle1, formatInfo).formatString : handle1.toString();
          }
        }
        return content;
      } else {
        if (this.type === "Range") {
          if (this.enableRtl && this.orientation !== "Vertical") {
            content = !isNullOrUndefined(this.tooltip) && !isNullOrUndefined(this.tooltip.format) ? this.formatString(handle2, formatInfo).elementVal + " - " + this.formatString(handle1, formatInfo).elementVal : handle2.toString() + " - " + handle1.toString();
          } else {
            content = !isNullOrUndefined(this.tooltip) && !isNullOrUndefined(this.tooltip.format) ? this.formatString(handle1, formatInfo).elementVal + " - " + this.formatString(handle2, formatInfo).elementVal : handle1.toString() + " - " + handle2.toString();
          }
        } else {
          if (!isNullOrUndefined(handle1)) {
            content = !isNullOrUndefined(this.tooltip) && !isNullOrUndefined(this.tooltip.format) ? this.formatString(handle1, formatInfo).elementVal : handle1.toString();
          }
        }
        return content;
      }
    };
    Slider2.prototype.addTooltipClass = function(content) {
      if (this.isMaterialTooltip) {
        var count = content.toString().length;
        if (!this.tooltipElement) {
          var cssClass2 = count > 4 ? classNames3.sliderMaterialRange : classNames3.sliderMaterialDefault;
          this.tooltipObj.cssClass = classNames3.sliderTooltip + " " + cssClass2;
        } else {
          var cssClass2 = count > 4 ? {
            oldCss: classNames3.sliderMaterialDefault,
            newCss: classNames3.sliderMaterialRange
          } : {
            oldCss: classNames3.sliderMaterialRange,
            newCss: classNames3.sliderMaterialDefault
          };
          this.tooltipElement.classList.remove(cssClass2.oldCss);
          if (!this.tooltipElement.classList.contains(cssClass2.newCss)) {
            this.tooltipElement.classList.add(cssClass2.newCss);
            this.tooltipElement.style.transform = count > 4 ? "scale(1)" : this.getTooltipTransformProperties(this.previousTooltipClass).rotate;
          }
        }
      }
    };
    Slider2.prototype.tooltipPlacement = function() {
      return this.orientation === "Horizontal" ? this.tooltip.placement === "Before" ? "TopCenter" : "BottomCenter" : this.tooltip.placement === "Before" ? "LeftCenter" : "RightCenter";
    };
    Slider2.prototype.tooltipBeforeOpen = function(args) {
      this.tooltipElement = args.element;
      if (this.tooltip.cssClass) {
        addClass([this.tooltipElement], this.tooltip.cssClass.split(" ").filter(function(css) {
          return css;
        }));
      }
      args.target.removeAttribute("aria-describedby");
      if (this.isMaterialTooltip) {
        this.tooltipElement.firstElementChild.classList.add(classNames3.materialTooltipHide);
        this.handleStart();
        this.setTooltipTransform();
      }
    };
    Slider2.prototype.tooltipCollision = function(position) {
      if (this.isBootstrap || this.isBootstrap4 || (this.isMaterial || this.isMaterial3) && !this.isMaterialTooltip) {
        var tooltipOffsetValue = this.isBootstrap4 ? bootstrap4TooltipOffset : bootstrapTooltipOffset;
        switch (position) {
          case "TopCenter":
            this.tooltipObj.setProperties({
              "offsetY": -tooltipOffsetValue
            }, false);
            break;
          case "BottomCenter":
            this.tooltipObj.setProperties({
              "offsetY": tooltipOffsetValue
            }, false);
            break;
          case "LeftCenter":
            this.tooltipObj.setProperties({
              "offsetX": -tooltipOffsetValue
            }, false);
            break;
          case "RightCenter":
            this.tooltipObj.setProperties({
              "offsetX": tooltipOffsetValue
            }, false);
            break;
        }
      }
    };
    Slider2.prototype.materialTooltipEventCallBack = function(event2) {
      this.sliderBarClick(event2);
      EventHandler.add(document, "mousemove touchmove", this.sliderBarMove, this);
      EventHandler.add(document, "mouseup touchend", this.sliderBarUp, this);
    };
    Slider2.prototype.wireMaterialTooltipEvent = function(destroy3) {
      if (this.isMaterialTooltip) {
        if (!destroy3) {
          EventHandler.add(this.tooltipElement, "mousedown touchstart", this.materialTooltipEventCallBack, this);
        } else {
          EventHandler.remove(this.tooltipElement, "mousedown touchstart", this.materialTooltipEventCallBack);
        }
      }
    };
    Slider2.prototype.tooltipPositionCalculation = function(position) {
      var cssClass2;
      switch (position) {
        case "TopCenter":
          cssClass2 = classNames3.horizontalTooltipBefore;
          break;
        case "BottomCenter":
          cssClass2 = classNames3.horizontalTooltipAfter;
          break;
        case "LeftCenter":
          cssClass2 = classNames3.verticalTooltipBefore;
          break;
        case "RightCenter":
          cssClass2 = classNames3.verticalTooltipAfter;
          break;
      }
      return cssClass2;
    };
    Slider2.prototype.getTooltipTransformProperties = function(className) {
      var transformProperties;
      if (this.tooltipElement) {
        var position = this.orientation === "Horizontal" ? this.tooltipElement.clientHeight + 14 - this.tooltipElement.clientHeight / 2 : this.tooltipElement.clientWidth + 14 - this.tooltipElement.clientWidth / 2;
        transformProperties = this.orientation === "Horizontal" ? className === classNames3.horizontalTooltipBefore ? {
          rotate: "rotate(45deg)",
          translate: "translateY(" + position + "px)"
        } : {
          rotate: "rotate(225deg)",
          translate: "translateY(" + -position + "px)"
        } : className === classNames3.verticalTooltipBefore ? {
          rotate: "rotate(-45deg)",
          translate: "translateX(" + position + "px)"
        } : {
          rotate: "rotate(-225deg)",
          translate: "translateX(" + -position + "px)"
        };
      }
      return transformProperties;
    };
    Slider2.prototype.openMaterialTooltip = function() {
      var _this = this;
      if (this.isMaterialTooltip) {
        this.refreshTooltip(this.firstHandle);
        var tooltipContentElement = this.tooltipElement.firstElementChild;
        tooltipContentElement.classList.remove(classNames3.materialTooltipHide);
        tooltipContentElement.classList.add(classNames3.materialTooltipShow);
        this.firstHandle.style.cursor = "default";
        this.tooltipElement.style.transition = this.scaleTransform;
        this.tooltipElement.classList.add(classNames3.materialTooltipOpen);
        this.materialHandle.style.transform = "scale(0)";
        if (tooltipContentElement.innerText.length > 4) {
          this.tooltipElement.style.transform = "scale(1)";
        } else {
          this.tooltipElement.style.transform = this.getTooltipTransformProperties(this.previousTooltipClass).rotate;
        }
        if (this.type === "Default") {
          setTimeout(function() {
            if (_this.tooltipElement) {
              _this.tooltipElement.style.transition = _this.transition.handle;
            }
          }, 2500);
        } else {
          setTimeout(function() {
            if (_this.tooltipElement) {
              _this.tooltipElement.style.transition = "none";
            }
          }, 2500);
        }
      }
    };
    Slider2.prototype.closeMaterialTooltip = function() {
      var _this = this;
      if (this.isMaterialTooltip) {
        var tooltipContentElement = this.tooltipElement.firstElementChild;
        this.tooltipElement.style.transition = this.scaleTransform;
        tooltipContentElement.classList.remove(classNames3.materialTooltipShow);
        tooltipContentElement.classList.add(classNames3.materialTooltipHide);
        this.firstHandle.style.cursor = "-webkit-grab";
        this.firstHandle.style.cursor = "grab";
        if (this.materialHandle) {
          this.materialHandle.style.transform = "scale(1)";
        }
        this.tooltipElement.classList.remove(classNames3.materialTooltipOpen);
        this.setTooltipTransform();
        this.tooltipTarget = void 0;
        setTimeout(function() {
          if (_this.tooltipElement) {
            _this.tooltipElement.style.transition = "none";
          }
        }, 2500);
      }
    };
    Slider2.prototype.checkTooltipPosition = function(args) {
      var tooltipClass = this.tooltipPositionCalculation(args.collidedPosition);
      if (this.tooltipCollidedPosition === void 0 || this.tooltipCollidedPosition !== args.collidedPosition || !args.element.classList.contains(tooltipClass)) {
        if (this.isMaterialTooltip) {
          if (tooltipClass !== void 0) {
            args.element.classList.remove(this.previousTooltipClass);
            args.element.classList.add(tooltipClass);
            this.previousTooltipClass = tooltipClass;
          }
          if (args.element.style.transform && args.element.classList.contains(classNames3.materialTooltipOpen) && args.element.firstElementChild.innerText.length <= 4) {
            args.element.style.transform = this.getTooltipTransformProperties(this.previousTooltipClass).rotate;
          }
        }
        this.tooltipCollidedPosition = args.collidedPosition;
      }
      if (this.isMaterialTooltip && this.tooltipElement && this.tooltipElement.style.transform.indexOf("translate") !== -1) {
        this.setTooltipTransform();
      }
    };
    Slider2.prototype.setTooltipTransform = function() {
      var transformProperties = this.getTooltipTransformProperties(this.previousTooltipClass);
      if (isNullOrUndefined(this.tooltipElement)) {
        return;
      }
      if (this.tooltipElement.firstElementChild.innerText.length > 4) {
        this.tooltipElement.style.transform = transformProperties.translate + " scale(0.01)";
      } else {
        this.tooltipElement.style.transform = transformProperties.translate + " " + transformProperties.rotate + " scale(0.01)";
      }
    };
    Slider2.prototype.renderTooltip = function() {
      this.tooltipObj = new Tooltip({
        showTipPointer: this.isBootstrap || this.isMaterial || this.isMaterial3 || this.isBootstrap4 || this.isTailwind || this.isTailwind3 || this.isBootstrap5 || this.isFluent || this.isFluent2 || this.isBootstrap5Dot3,
        cssClass: classNames3.sliderTooltip,
        height: this.isMaterial || this.isMaterial3 ? 30 : "auto",
        animation: {
          open: {
            effect: "None"
          },
          close: {
            effect: "FadeOut",
            duration: 500
          }
        },
        opensOn: "Custom",
        beforeOpen: this.tooltipBeforeOpen.bind(this),
        beforeCollision: this.checkTooltipPosition.bind(this),
        beforeClose: this.tooltipBeforeClose.bind(this),
        enableHtmlSanitizer: this.enableHtmlSanitizer
      });
      this.tooltipObj.appendTo(this.firstHandle);
      this.initializeTooltipProps();
    };
    Slider2.prototype.initializeTooltipProps = function() {
      var tooltipShowOn = this.tooltip.showOn === "Auto" ? "Hover" : this.tooltip.showOn;
      this.setProperties({
        tooltip: {
          showOn: tooltipShowOn
        }
      }, true);
      this.tooltipObj.position = this.tooltipPlacement();
      this.tooltipCollision(this.tooltipObj.position);
      [this.firstHandle, this.rangeBar, this.secondHandle].forEach(function(handle) {
        if (!isNullOrUndefined(handle)) {
          handle.style.transition = "none";
        }
      });
      if (this.isMaterialTooltip) {
        this.sliderContainer.classList.add(classNames3.materialSlider);
        this.tooltipValue();
        this.tooltipObj.animation.close.effect = "None";
        this.tooltipObj.open(this.firstHandle);
      }
    };
    Slider2.prototype.tooltipBeforeClose = function() {
      this.tooltipElement = void 0;
      this.tooltipCollidedPosition = void 0;
    };
    Slider2.prototype.setButtons = function() {
      this.firstBtn = this.createElement("div", {
        className: classNames3.sliderButton + " " + classNames3.firstButton
      });
      this.firstBtn.appendChild(this.createElement("span", {
        className: classNames3.sliderButtonIcon
      }));
      if (this.isTailwind || this.isTailwind3) {
        this.firstBtn.querySelector("span").classList.add("e-icons");
      }
      this.firstBtn.tabIndex = -1;
      this.secondBtn = this.createElement("div", {
        className: classNames3.sliderButton + " " + classNames3.secondButton
      });
      this.secondBtn.appendChild(this.createElement("span", {
        className: classNames3.sliderButtonIcon
      }));
      if (this.isTailwind || this.isTailwind3) {
        this.secondBtn.querySelector("span").classList.add("e-icons");
      }
      this.secondBtn.tabIndex = -1;
      this.sliderContainer.classList.add(classNames3.sliderButtonClass);
      this.sliderContainer.appendChild(this.firstBtn);
      this.sliderContainer.appendChild(this.secondBtn);
      this.sliderContainer.appendChild(this.element);
      this.buttonTitle();
    };
    Slider2.prototype.buttonTitle = function() {
      var enabledRTL = this.enableRtl && this.orientation !== "Vertical";
      this.l10n.setLocale(this.locale);
      var decrementTitle = this.l10n.getConstant("decrementTitle");
      var incrementTitle = this.l10n.getConstant("incrementTitle");
      attributes(enabledRTL ? this.secondBtn : this.firstBtn, {
        "aria-label": decrementTitle,
        title: decrementTitle
      });
      attributes(enabledRTL ? this.firstBtn : this.secondBtn, {
        "aria-label": incrementTitle,
        title: incrementTitle
      });
    };
    Slider2.prototype.buttonFocusOut = function() {
      if (this.isMaterial || this.isMaterial3) {
        this.getHandle().classList.remove("e-large-thumb-size");
      }
    };
    Slider2.prototype.repeatButton = function(args) {
      var hVal = this.handleValueUpdate();
      var enabledRTL = this.enableRtl && this.orientation !== "Vertical";
      var value;
      if (args.target.parentElement.classList.contains(classNames3.firstButton) || args.target.classList.contains(classNames3.firstButton)) {
        if (enabledRTL) {
          value = this.add(hVal, parseFloat(this.step.toString()), true);
        } else {
          value = this.add(hVal, parseFloat(this.step.toString()), false);
        }
      } else if (args.target.parentElement.classList.contains(classNames3.secondButton) || args.target.classList.contains(classNames3.secondButton)) {
        if (enabledRTL) {
          value = this.add(hVal, parseFloat(this.step.toString()), false);
        } else {
          value = this.add(hVal, parseFloat(this.step.toString()), true);
        }
      }
      if (this.limits.enabled) {
        value = this.getLimitCorrectedValues(value);
      }
      if (value >= this.min && value <= this.max) {
        this.changeHandleValue(value);
        this.tooltipToggle(this.getHandle());
      }
    };
    Slider2.prototype.repeatHandlerMouse = function(args) {
      args.preventDefault();
      if (args.type === "mousedown" || args.type === "touchstart") {
        this.buttonClick(args);
        this.repeatInterval = setInterval(this.repeatButton.bind(this), 180, args);
      }
    };
    Slider2.prototype.materialChange = function() {
      if (!this.getHandle().classList.contains("e-large-thumb-size")) {
        this.getHandle().classList.add("e-large-thumb-size");
      }
    };
    Slider2.prototype.focusHandle = function() {
      if (!this.getHandle().classList.contains(classNames3.sliderTabHandle)) {
        this.getHandle().classList.add(classNames3.sliderTabHandle);
      }
    };
    Slider2.prototype.repeatHandlerUp = function(e) {
      this.changeEvent("changed", e);
      this.closeTooltip();
      clearInterval(this.repeatInterval);
      this.getHandle().focus();
    };
    Slider2.prototype.customTickCounter = function(bigNum) {
      var tickCount = 4;
      if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {
        if (bigNum > 4) {
          tickCount = 3;
        }
        if (bigNum > 7) {
          tickCount = 2;
        }
        if (bigNum > 14) {
          tickCount = 1;
        }
        if (bigNum > 28) {
          tickCount = 0;
        }
      }
      return tickCount;
    };
    Slider2.prototype.renderScale = function() {
      var orien = this.orientation === "Vertical" ? "v" : "h";
      this.ul = this.createElement("ul", {
        className: classNames3.scale + " e-" + orien + "-scale " + classNames3.tick + "-" + this.ticks.placement.toLowerCase(),
        attrs: {
          role: "presentation",
          "aria-hidden": "true"
        }
      });
      this.ul.style.zIndex = "-1";
      if (Browser.isAndroid && orien === "h") {
        this.ul.classList.add(classNames3.sliderTickPosition);
      }
      var smallStep = this.ticks.smallStep;
      if (!this.ticks.showSmallTicks) {
        if (this.ticks.largeStep > 0) {
          smallStep = this.ticks.largeStep;
        } else {
          smallStep = parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min));
        }
      } else if (smallStep <= 0) {
        smallStep = parseFloat(formatUnit(this.step));
      }
      var min = parseFloat(formatUnit(this.min));
      var max = parseFloat(formatUnit(this.max));
      var steps = parseFloat(formatUnit(smallStep));
      var bigNum = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 && this.customValues.length - 1;
      var customStep = this.customTickCounter(bigNum);
      var count = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 ? bigNum * customStep + bigNum : Math.abs((max - min) / steps);
      this.element.appendChild(this.ul);
      var li;
      var start = parseFloat(this.min.toString());
      if (orien === "v") {
        start = parseFloat(this.max.toString());
      }
      var left = 0;
      var islargeTick;
      var tickWidth = 100 / count;
      if (tickWidth === Infinity) {
        tickWidth = 5;
      }
      for (var i = 0, y = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 ? this.customValues.length - 1 : 0, k = 0; i <= count; i++) {
        li = this.createElement("li", {
          attrs: {
            class: classNames3.tick,
            role: "presentation",
            "aria-hidden": "true"
          }
        });
        if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {
          islargeTick = i % (customStep + 1) === 0;
          if (islargeTick) {
            if (orien === "h") {
              start = this.customValues[k];
              k++;
            } else {
              start = this.customValues[y];
              y--;
            }
            li.setAttribute("title", start.toString());
          }
        } else {
          li.setAttribute("title", start.toString());
          if (this.numberOfDecimals(this.max) === 0 && this.numberOfDecimals(this.min) === 0 && this.numberOfDecimals(this.step) === 0) {
            if (orien === "h") {
              var reminder = (start - parseFloat(this.min.toString())) % this.ticks.largeStep;
              islargeTick = Math.abs(reminder) < tolerance || Math.abs(this.ticks.largeStep - reminder) < tolerance;
            } else {
              var reminder = Math.abs(start - parseFloat(this.max.toString())) % this.ticks.largeStep;
              islargeTick = Math.abs(reminder) < tolerance || Math.abs(this.ticks.largeStep - reminder) < tolerance;
            }
          } else {
            var largestep = this.ticks.largeStep;
            var startValue = start;
            if (orien === "h") {
              var reminder = (startValue - min) % largestep;
              islargeTick = Math.abs(reminder) < tolerance || Math.abs(largestep - reminder) < tolerance;
            } else {
              var reminder = Math.abs(startValue - parseFloat(max.toString())) % largestep;
              islargeTick = Math.abs(reminder) < tolerance || Math.abs(largestep - reminder) < tolerance;
            }
          }
        }
        if (islargeTick) {
          li.classList.add(classNames3.large);
        }
        if (orien === "h") {
          li.style.width = tickWidth + "%";
        } else {
          li.style.height = tickWidth + "%";
        }
        var repeat = islargeTick ? this.ticks.placement === "Both" ? 2 : 1 : 0;
        if (islargeTick) {
          for (var j = 0; j < repeat; j++) {
            this.createTick(li, start);
          }
        } else if (isNullOrUndefined(this.customValues)) {
          this.formatTicksValue(li, start);
        }
        this.ul.appendChild(li);
        this.tickElementCollection.push(li);
        var decimalPoints = void 0;
        if (isNullOrUndefined(this.customValues)) {
          if (this.numberOfDecimals(smallStep) > this.numberOfDecimals(start)) {
            decimalPoints = this.numberOfDecimals(smallStep);
          } else {
            decimalPoints = this.numberOfDecimals(start);
          }
          if (orien === "h") {
            start = this.makeRoundNumber(start + smallStep, decimalPoints);
          } else {
            if (this.min > this.max) {
              start = this.makeRoundNumber(start + smallStep, decimalPoints);
            } else {
              start = this.makeRoundNumber(start - smallStep, decimalPoints);
            }
          }
          left = this.makeRoundNumber(left + smallStep, decimalPoints);
        }
      }
      this.ticksAlignment(orien, tickWidth);
    };
    Slider2.prototype.ticksAlignment = function(orien, tickWidth, triggerEvent) {
      if (triggerEvent === void 0) {
        triggerEvent = true;
      }
      this.firstChild = this.ul.firstElementChild;
      this.lastChild = this.ul.lastElementChild;
      this.firstChild.classList.add(classNames3.sliderFirstTick);
      this.lastChild.classList.add(classNames3.sliderLastTick);
      this.sliderContainer.classList.add(classNames3.scale + "-" + this.ticks.placement.toLowerCase());
      if (orien === "h") {
        this.firstChild.style.width = tickWidth / 2 + "%";
        this.lastChild.style.width = tickWidth / 2 + "%";
      } else {
        this.firstChild.style.height = tickWidth / 2 + "%";
        this.lastChild.style.height = tickWidth / 2 + "%";
      }
      var eventArgs = {
        ticksWrapper: this.ul,
        tickElements: this.tickElementCollection
      };
      if (triggerEvent) {
        this.trigger("renderedTicks", eventArgs);
      }
      this.scaleAlignment();
    };
    Slider2.prototype.createTick = function(li, start) {
      var span = this.createElement("span", {
        className: classNames3.tickValue + " " + classNames3.tick + "-" + this.ticks.placement.toLowerCase(),
        attrs: {
          role: "presentation",
          "aria-hidden": "true"
        }
      });
      li.appendChild(span);
      if (isNullOrUndefined(this.customValues)) {
        this.formatTicksValue(li, start, span);
      } else {
        if (this.enableHtmlSanitizer) {
          span.innerHTML = SanitizeHtmlHelper.sanitize(start.toString());
        } else {
          span.innerHTML = start.toString();
        }
      }
    };
    Slider2.prototype.formatTicksValue = function(li, start, spanElement) {
      var _this = this;
      var tickText = this.formatNumber(start);
      var text = !isNullOrUndefined(this.ticks) && !isNullOrUndefined(this.ticks.format) ? this.formatString(start, this.ticksFormatInfo).formatString : tickText;
      var eventArgs = {
        value: start,
        text,
        tickElement: li
      };
      this.trigger("renderingTicks", eventArgs, function(observedArgs) {
        li.setAttribute("title", observedArgs.text.toString());
        if (spanElement) {
          if (_this.enableHtmlSanitizer) {
            spanElement.innerHTML = SanitizeHtmlHelper.sanitize(observedArgs.text.toString());
          } else {
            spanElement.innerHTML = observedArgs.text.toString();
          }
        }
      });
    };
    Slider2.prototype.scaleAlignment = function() {
      this.tickValuePosition();
      if (this.orientation === "Vertical") {
        if (this.element.getBoundingClientRect().width <= 15) {
          this.sliderContainer.classList.add(classNames3.sliderSmallSize);
        } else {
          this.sliderContainer.classList.remove(classNames3.sliderSmallSize);
        }
      } else {
        if (this.element.getBoundingClientRect().height <= 15) {
          this.sliderContainer.classList.add(classNames3.sliderSmallSize);
        } else {
          this.sliderContainer.classList.remove(classNames3.sliderSmallSize);
        }
      }
    };
    Slider2.prototype.tickValuePosition = function() {
      this.firstChild = this.element.querySelector("ul").children[0];
      var first = this.firstChild.getBoundingClientRect();
      var firstChild;
      var otherChild;
      var smallStep = this.ticks.smallStep;
      var count = Math.abs(parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min))) / smallStep;
      if (this.firstChild.children.length > 0) {
        firstChild = this.firstChild.children[0].getBoundingClientRect();
      }
      var tickElements = [this.sliderContainer.querySelectorAll("." + classNames3.tick + "." + classNames3.large + " ." + classNames3.tickValue)];
      var other;
      if (this.ticks.placement === "Both") {
        other = [].slice.call(tickElements[0], 2);
      } else {
        other = [].slice.call(tickElements[0], 1);
      }
      var tickWidth = this.orientation === "Vertical" ? first.height * 2 : first.width * 2;
      for (var i = 0; i < this.firstChild.children.length; i++) {
        if (this.orientation === "Vertical") {
          this.firstChild.children[i].style.top = -(firstChild.height / 2) + "px";
        } else {
          if (!this.enableRtl) {
            this.firstChild.children[i].style.left = -(firstChild.width / 2) + "px";
          } else {
            this.firstChild.children[i].style.left = (tickWidth - this.firstChild.children[i].getBoundingClientRect().width) / 2 + "px";
          }
        }
      }
      for (var i = 0; i < other.length; i++) {
        otherChild = other[i].getBoundingClientRect();
        if (this.orientation === "Vertical") {
          setStyleAttribute(other[i], {
            top: (tickWidth - otherChild.height) / 2 + "px"
          });
        } else {
          setStyleAttribute(other[i], {
            left: (tickWidth - otherChild.width) / 2 + "px"
          });
        }
      }
      if (this.enableRtl && this.lastChild.children.length && count !== 0) {
        this.lastChild.children[0].style.left = -(this.lastChild.getBoundingClientRect().width / 2) + "px";
        if (this.ticks.placement === "Both") {
          this.lastChild.children[1].style.left = -(this.lastChild.getBoundingClientRect().width / 2) + "px";
        }
      }
      if (count === 0) {
        if (this.orientation === "Horizontal") {
          if (!this.enableRtl) {
            this.firstChild.classList.remove(classNames3.sliderLastTick);
            this.firstChild.style.left = this.firstHandle.style.left;
          } else {
            this.firstChild.classList.remove(classNames3.sliderLastTick);
            this.firstChild.style.right = this.firstHandle.style.right;
            this.firstChild.children[0].style.left = this.firstChild.getBoundingClientRect().width / 2 + 2 + "px";
            if (this.ticks.placement === "Both") {
              this.firstChild.children[1].style.left = this.firstChild.getBoundingClientRect().width / 2 + 2 + "px";
            }
          }
        }
        if (this.orientation === "Vertical") {
          this.firstChild.classList.remove(classNames3.sliderLastTick);
        }
      }
    };
    Slider2.prototype.setAriaAttrValue = function(element2) {
      var ariaValueText;
      var isTickFormatted = !isNullOrUndefined(this.ticks) && !isNullOrUndefined(this.ticks.format) ? true : false;
      var text = !isTickFormatted ? this.formatContent(this.ticksFormatInfo, false) : this.formatContent(this.tooltipFormatInfo, false);
      var valuenow = isTickFormatted ? this.formatContent(this.ticksFormatInfo, true) : this.formatContent(this.tooltipFormatInfo, true);
      text = !this.customAriaText ? text : this.customAriaText;
      if (text.split(" - ").length === 2) {
        ariaValueText = text.split(" - ");
      } else {
        ariaValueText = [text, text];
      }
      this.setAriaAttributes(element2);
      if (this.type !== "Range") {
        attributes(element2, {
          "aria-valuenow": valuenow,
          "aria-valuetext": text
        });
      } else {
        if (!this.enableRtl) {
          if (element2 === this.firstHandle) {
            attributes(element2, {
              "aria-valuenow": valuenow.split(" - ")[0],
              "aria-valuetext": ariaValueText[0]
            });
          } else {
            attributes(element2, {
              "aria-valuenow": valuenow.split(" - ")[1],
              "aria-valuetext": ariaValueText[1]
            });
          }
        } else {
          if (element2 === this.firstHandle) {
            attributes(element2, {
              "aria-valuenow": valuenow.split(" - ")[1],
              "aria-valuetext": ariaValueText[1]
            });
          } else {
            attributes(element2, {
              "aria-valuenow": valuenow.split(" - ")[0],
              "aria-valuetext": ariaValueText[0]
            });
          }
        }
      }
    };
    Slider2.prototype.handleValueUpdate = function() {
      var hVal;
      if (this.type === "Range") {
        if (this.activeHandle === 1) {
          hVal = this.handleVal1;
        } else {
          hVal = this.handleVal2;
        }
      } else {
        hVal = this.handleVal1;
      }
      return hVal;
    };
    Slider2.prototype.getLimitCorrectedValues = function(value) {
      if (this.type === "MinRange" || this.type === "Default") {
        value = this.getLimitValueAndPosition(value, this.limits.minStart, this.limits.minEnd)[0];
      } else {
        if (this.activeHandle === 1) {
          value = this.getLimitValueAndPosition(value, this.limits.minStart, this.limits.minEnd)[0];
        } else {
          value = this.getLimitValueAndPosition(value, this.limits.maxStart, this.limits.maxEnd)[0];
        }
      }
      return value;
    };
    Slider2.prototype.focusSliderElement = function() {
      if (!this.isElementFocused) {
        this.element.focus();
        this.isElementFocused = true;
      }
    };
    Slider2.prototype.buttonClick = function(args) {
      this.focusSliderElement();
      var value;
      var enabledRTL = this.enableRtl && this.orientation !== "Vertical";
      var hVal = this.handleValueUpdate();
      if (args.keyCode === 40 || args.keyCode === 37 || args.currentTarget.classList.contains(classNames3.firstButton)) {
        if (enabledRTL) {
          value = this.add(hVal, parseFloat(this.step.toString()), true);
        } else {
          value = this.add(hVal, parseFloat(this.step.toString()), false);
        }
      } else if (args.keyCode === 38 || args.keyCode === 39 || args.currentTarget.classList.contains(classNames3.secondButton)) {
        if (enabledRTL) {
          value = this.add(hVal, parseFloat(this.step.toString()), false);
        } else {
          value = this.add(hVal, parseFloat(this.step.toString()), true);
        }
      } else if (args.keyCode === 33 || args.currentTarget.classList.contains(classNames3.firstButton)) {
        if (enabledRTL) {
          value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), false);
        } else {
          value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), true);
        }
      } else if (args.keyCode === 34 || args.currentTarget.classList.contains(classNames3.secondButton)) {
        if (enabledRTL) {
          value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), true);
        } else {
          value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), false);
        }
      } else if (args.keyCode === 36) {
        value = parseFloat(this.min < this.max ? this.min.toString() : this.max.toString());
      } else if (args.keyCode === 35) {
        value = parseFloat(this.min < this.max ? this.max.toString() : this.min.toString());
      }
      if (this.limits.enabled) {
        value = this.getLimitCorrectedValues(value);
      }
      this.changeHandleValue(value);
      if ((this.isMaterial || this.isMaterial3) && !this.tooltip.isVisible && !this.getHandle().classList.contains(classNames3.sliderTabHandle)) {
        this.materialChange();
      }
      this.tooltipToggle(this.getHandle());
      this.getHandle().focus();
      this.focusHandle();
      if (args.currentTarget.classList.contains(classNames3.firstButton)) {
        EventHandler.add(this.firstBtn, "mouseup touchend", this.buttonUp, this);
      }
      if (args.currentTarget.classList.contains(classNames3.secondButton)) {
        EventHandler.add(this.secondBtn, "mouseup touchend", this.buttonUp, this);
      }
    };
    Slider2.prototype.tooltipToggle = function(target) {
      if (this.isMaterialTooltip) {
        if (!this.tooltipElement.classList.contains(classNames3.materialTooltipOpen)) {
          this.openMaterialTooltip();
        } else {
          this.refreshTooltip(this.firstHandle);
        }
      } else {
        if (!this.tooltipElement) {
          this.openTooltip(target);
        } else {
          this.refreshTooltip(target);
        }
      }
    };
    Slider2.prototype.buttonUp = function(args) {
      if (args.currentTarget.classList.contains(classNames3.firstButton)) {
        EventHandler.remove(this.firstBtn, "mouseup touchend", this.buttonUp);
      }
      if (args.currentTarget.classList.contains(classNames3.secondButton)) {
        EventHandler.remove(this.secondBtn, "mouseup touchend", this.buttonUp);
      }
    };
    Slider2.prototype.setRangeBar = function() {
      if (this.orientation === "Horizontal" && !isNullOrUndefined(this.rangeBar)) {
        if (this.type === "MinRange") {
          if (this.enableRtl) {
            this.rangeBar.style.right = "0px";
          } else {
            this.rangeBar.style.left = "0px";
          }
          setStyleAttribute(this.rangeBar, {
            "width": isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + "px"
          });
        } else {
          if (this.enableRtl) {
            this.rangeBar.style.right = this.handlePos1 + "px";
          } else {
            this.rangeBar.style.left = this.handlePos1 + "px";
          }
          setStyleAttribute(this.rangeBar, {
            "width": this.handlePos2 - this.handlePos1 + "px"
          });
        }
      } else if (!isNullOrUndefined(this.rangeBar)) {
        if (this.type === "MinRange") {
          this.rangeBar.style.bottom = this.min > this.max ? this.handlePos1 + "px" : "0px";
          setStyleAttribute(this.rangeBar, {
            "height": isNullOrUndefined(this.handlePos1) ? 0 : this.min > this.max ? this.element.clientHeight - this.handlePos1 + "px" : this.handlePos1 + "px"
          });
        } else {
          this.rangeBar.style.bottom = this.min > this.max ? this.handlePos2 + "px" : this.handlePos1 + "px";
          setStyleAttribute(this.rangeBar, {
            "height": this.min > this.max ? this.handlePos1 - this.handlePos2 + "px" : this.handlePos2 - this.handlePos1 + "px"
          });
        }
      }
    };
    Slider2.prototype.checkValidValueAndPos = function(value) {
      value = this.checkHandleValue(value);
      value = this.checkHandlePosition(value);
      return value;
    };
    Slider2.prototype.setLimitBarPositions = function(fromMinPostion, fromMaxpostion, toMinPostion, toMaxpostion) {
      if (this.orientation === "Horizontal") {
        if (!this.enableRtl) {
          this.limitBarFirst.style.left = fromMinPostion + "px";
          this.limitBarFirst.style.width = fromMaxpostion - fromMinPostion + "px";
        } else {
          this.limitBarFirst.style.right = fromMinPostion + "px";
          this.limitBarFirst.style.width = fromMaxpostion - fromMinPostion + "px";
        }
      } else {
        this.limitBarFirst.style.bottom = (this.min < this.max ? fromMinPostion : fromMaxpostion) + "px";
        this.limitBarFirst.style.height = (this.min < this.max ? fromMaxpostion - fromMinPostion : fromMinPostion - fromMaxpostion) + "px";
      }
      if (this.type === "Range") {
        if (this.orientation === "Horizontal") {
          if (!this.enableRtl) {
            this.limitBarSecond.style.left = toMinPostion + "px";
            this.limitBarSecond.style.width = toMaxpostion - toMinPostion + "px";
          } else {
            this.limitBarSecond.style.right = toMinPostion + "px";
            this.limitBarSecond.style.width = toMaxpostion - toMinPostion + "px";
          }
        } else {
          this.limitBarSecond.style.bottom = (this.min < this.max ? toMinPostion : toMaxpostion) + "px";
          this.limitBarSecond.style.height = (this.min < this.max ? toMaxpostion - toMinPostion : toMinPostion - toMaxpostion) + "px";
        }
      }
    };
    Slider2.prototype.setLimitBar = function() {
      if (this.type === "Default" || this.type === "MinRange") {
        var fromPosition = this.getLimitValueAndPosition(this.limits.minStart, this.limits.minStart, this.limits.minEnd, true)[0];
        fromPosition = this.checkValidValueAndPos(fromPosition);
        var toPosition = this.getLimitValueAndPosition(this.limits.minEnd, this.limits.minStart, this.limits.minEnd, true)[0];
        toPosition = this.checkValidValueAndPos(toPosition);
        this.setLimitBarPositions(fromPosition, toPosition);
      } else if (this.type === "Range") {
        var fromMinPostion = this.getLimitValueAndPosition(this.limits.minStart, this.limits.minStart, this.limits.minEnd, true)[0];
        fromMinPostion = this.checkValidValueAndPos(fromMinPostion);
        var fromMaxpostion = this.getLimitValueAndPosition(this.limits.minEnd, this.limits.minStart, this.limits.minEnd, true)[0];
        fromMaxpostion = this.checkValidValueAndPos(fromMaxpostion);
        var toMinPostion = this.getLimitValueAndPosition(this.limits.maxStart, this.limits.maxStart, this.limits.maxEnd, true)[0];
        toMinPostion = this.checkValidValueAndPos(toMinPostion);
        var toMaxpostion = this.getLimitValueAndPosition(this.limits.maxEnd, this.limits.maxStart, this.limits.maxEnd, true)[0];
        toMaxpostion = this.checkValidValueAndPos(toMaxpostion);
        this.setLimitBarPositions(fromMinPostion, fromMaxpostion, toMinPostion, toMaxpostion);
      }
    };
    Slider2.prototype.getLimitValueAndPosition = function(currentValue, minValue, maxValue, limitBar) {
      if (isNullOrUndefined(minValue)) {
        minValue = this.min < this.max ? this.min : this.max;
        if (isNullOrUndefined(currentValue) && limitBar) {
          currentValue = minValue;
        }
      }
      if (isNullOrUndefined(maxValue)) {
        maxValue = this.min < this.max ? this.max : this.min;
        if (isNullOrUndefined(currentValue) && limitBar) {
          currentValue = maxValue;
        }
      }
      if (currentValue < minValue) {
        currentValue = minValue;
      }
      if (currentValue > maxValue) {
        currentValue = maxValue;
      }
      return [currentValue, this.checkHandlePosition(currentValue)];
    };
    Slider2.prototype.setValue = function() {
      if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {
        this.min = 0;
        this.max = this.customValues.length - 1;
        this.setBarColor();
      }
      this.setAriaAttributes(this.firstHandle);
      this.handleVal1 = isNullOrUndefined(this.value) ? this.checkHandleValue(parseFloat(this.min.toString())) : this.checkHandleValue(parseFloat(this.value.toString()));
      this.handlePos1 = this.checkHandlePosition(this.handleVal1);
      this.preHandlePos1 = this.handlePos1;
      if (isNullOrUndefined(this.activeHandle)) {
        this.activeHandle = this.type === "Range" ? 2 : 1;
      }
      if (this.type === "Default" || this.type === "MinRange") {
        if (this.limits.enabled) {
          var values = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);
          this.handleVal1 = values[0];
          this.handlePos1 = values[1];
          this.preHandlePos1 = this.handlePos1;
        }
        this.setHandlePosition(null);
        this.handleStart();
        this.value = this.handleVal1;
        this.setAriaAttrValue(this.firstHandle);
        this.changeEvent("changed", null);
      } else {
        this.validateRangeValue();
      }
      if (this.type !== "Default") {
        this.setRangeBar();
      }
      if (this.limits.enabled) {
        this.setLimitBar();
      }
    };
    Slider2.prototype.rangeValueUpdate = function() {
      if (this.value === null || typeof this.value !== "object") {
        this.value = [parseFloat(formatUnit(this.min)), parseFloat(formatUnit(this.max))];
      }
    };
    Slider2.prototype.validateRangeValue = function() {
      this.rangeValueUpdate();
      this.setRangeValue();
    };
    Slider2.prototype.modifyZindex = function() {
      if (this.type === "Range" && !isNullOrUndefined(this.firstHandle) && !isNullOrUndefined(this.secondHandle)) {
        if (this.activeHandle === 1) {
          this.firstHandle.style.zIndex = this.zIndex + 4 + "";
          this.secondHandle.style.zIndex = this.zIndex + 3 + "";
        } else {
          this.firstHandle.style.zIndex = this.zIndex + 3 + "";
          this.secondHandle.style.zIndex = this.zIndex + 4 + "";
        }
      } else if (this.isMaterialTooltip && this.tooltipElement) {
        this.tooltipElement.style.zIndex = getZindexPartial(this.element) + "";
      }
    };
    Slider2.prototype.setHandlePosition = function(event2) {
      var _this = this;
      var handle;
      var pos = this.activeHandle === 1 ? this.handlePos1 : this.handlePos2;
      if (this.isMaterialTooltip) {
        handle = [this.firstHandle, this.materialHandle];
      } else {
        handle = [this.getHandle()];
      }
      this.handleStart();
      handle.forEach(function(handle2) {
        if (isNullOrUndefined(handle2)) {
          return;
        }
        if (_this.orientation === "Horizontal") {
          if (_this.enableRtl) {
            handle2.style.right = pos + "px";
          } else {
            handle2.style.left = pos + "px";
          }
        } else {
          handle2.style.bottom = pos + "px";
        }
      });
      this.changeEvent("change", event2);
    };
    Slider2.prototype.getHandle = function() {
      return this.activeHandle === 1 ? this.firstHandle : this.secondHandle;
    };
    Slider2.prototype.setRangeValue = function() {
      this.updateRangeValue();
      this.activeHandle = 1;
      this.setHandlePosition(null);
      this.activeHandle = 2;
      this.setHandlePosition(null);
      this.activeHandle = 1;
    };
    Slider2.prototype.changeEvent = function(eventName, e) {
      var previous = eventName === "change" ? this.previousVal : this.previousChanged;
      if (this.type !== "Range") {
        this.setProperties({
          "value": this.handleVal1
        }, true);
        if (previous !== this.value && (!this.isMaterialTooltip || !this.initialTooltip)) {
          this.trigger(eventName, this.changeEventArgs(eventName, e));
          this.initialTooltip = true;
          this.setPreviousVal(eventName, this.value);
        }
        this.setAriaAttrValue(this.firstHandle);
      } else {
        var value = this.value = [this.handleVal1, this.handleVal2];
        this.setProperties({
          "value": value
        }, true);
        if (previous.length === this.value.length && this.value[0] !== previous[0] || this.value[1] !== previous[1]) {
          this.initialTooltip = false;
          this.trigger(eventName, this.changeEventArgs(eventName, e));
          this.initialTooltip = true;
          this.setPreviousVal(eventName, this.value);
        }
        this.setAriaAttrValue(this.getHandle());
      }
      this.hiddenInput.value = this.value.toString();
    };
    Slider2.prototype.changeEventArgs = function(eventName, e) {
      var eventArgs;
      if (this.tooltip.isVisible && this.tooltipObj && this.initialTooltip) {
        this.tooltipValue();
        eventArgs = {
          value: this.value,
          previousValue: eventName === "change" ? this.previousVal : this.previousChanged,
          action: eventName,
          text: typeof this.tooltipObj.content === "function" ? this.tooltipObj.content() : this.tooltipObj.content,
          isInteracted: isNullOrUndefined(e) ? false : true
        };
      } else {
        eventArgs = {
          value: this.value,
          previousValue: eventName === "change" ? this.previousVal : this.previousChanged,
          action: eventName,
          text: isNullOrUndefined(this.ticksFormatInfo.format) ? this.value.toString() : this.type !== "Range" ? this.formatString(this.value, this.ticksFormatInfo).formatString : this.formatString(this.value[0], this.ticksFormatInfo).formatString + " - " + this.formatString(this.value[1], this.ticksFormatInfo).formatString,
          isInteracted: isNullOrUndefined(e) ? false : true
        };
      }
      return eventArgs;
    };
    Slider2.prototype.setPreviousVal = function(eventName, value) {
      if (eventName === "change") {
        this.previousVal = value;
      } else {
        this.previousChanged = value;
      }
    };
    Slider2.prototype.updateRangeValue = function() {
      var values = this.value.toString().split(",").map(Number);
      if (this.enableRtl && this.orientation !== "Vertical" || this.rtl) {
        this.value = [values[1], values[0]];
      } else {
        this.value = [values[0], values[1]];
      }
      if (this.enableRtl && this.orientation !== "Vertical") {
        this.handleVal1 = this.checkHandleValue(this.value[1]);
        this.handleVal2 = this.checkHandleValue(this.value[0]);
      } else {
        this.handleVal1 = this.checkHandleValue(this.value[0]);
        this.handleVal2 = this.checkHandleValue(this.value[1]);
      }
      this.handlePos1 = this.checkHandlePosition(this.handleVal1);
      this.handlePos2 = this.checkHandlePosition(this.handleVal2);
      if (this.min < this.max && this.handlePos1 > this.handlePos2) {
        this.handlePos1 = this.handlePos2;
        this.handleVal1 = this.handleVal2;
      }
      if (this.min > this.max && this.handlePos1 < this.handlePos2) {
        this.handlePos2 = this.handlePos1;
        this.handleVal2 = this.handleVal1;
      }
      this.preHandlePos1 = this.handlePos1;
      this.preHandlePos2 = this.handlePos2;
      if (this.limits.enabled) {
        this.activeHandle = 1;
        var values_1 = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);
        this.handleVal1 = values_1[0];
        this.handlePos1 = values_1[1];
        this.preHandlePos1 = this.handlePos1;
        this.activeHandle = 2;
        values_1 = this.getLimitValueAndPosition(this.handleVal2, this.limits.maxStart, this.limits.maxEnd);
        this.handleVal2 = values_1[0];
        this.handlePos2 = values_1[1];
        this.preHandlePos2 = this.handlePos2;
      }
    };
    Slider2.prototype.checkHandlePosition = function(value) {
      var pos;
      value = 100 * (value - parseFloat(formatUnit(this.min))) / (parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min)));
      if (this.orientation === "Horizontal") {
        pos = this.element.getBoundingClientRect().width * (value / 100);
      } else {
        pos = this.element.getBoundingClientRect().height * (value / 100);
      }
      if (parseFloat(formatUnit(this.max)) === parseFloat(formatUnit(this.min))) {
        if (this.orientation === "Horizontal") {
          pos = this.element.getBoundingClientRect().width;
        } else {
          pos = this.element.getBoundingClientRect().height;
        }
      }
      return pos;
    };
    Slider2.prototype.checkHandleValue = function(value) {
      if (this.min === this.max) {
        return parseFloat(formatUnit(this.max));
      }
      var handle = this.tempStartEnd();
      if (value < handle.start) {
        value = handle.start;
      } else if (value > handle.end) {
        value = handle.end;
      }
      return value;
    };
    Slider2.prototype.reposition = function() {
      var _this = this;
      if (!isNullOrUndefined(this.firstHandle)) {
        this.firstHandle.style.transition = "none";
      }
      if (this.type !== "Default" && !isNullOrUndefined(this.rangeBar)) {
        this.rangeBar.style.transition = "none";
      }
      if (this.type === "Range" && !isNullOrUndefined(this.secondHandle)) {
        this.secondHandle.style.transition = "none";
      }
      this.handlePos1 = this.checkHandlePosition(this.handleVal1);
      if (this.handleVal2) {
        this.handlePos2 = this.checkHandlePosition(this.handleVal2);
      }
      if (this.orientation === "Horizontal") {
        if (this.enableRtl) {
          this.firstHandle.style.right = this.handlePos1 + "px";
        } else {
          this.firstHandle.style.left = this.handlePos1 + "px";
        }
        if (this.isMaterialTooltip && !isNullOrUndefined(this.materialHandle)) {
          if (this.enableRtl) {
            this.materialHandle.style.right = this.handlePos1 + "px";
          } else {
            this.materialHandle.style.left = this.handlePos1 + "px";
          }
        }
        if (this.type === "MinRange" && !isNullOrUndefined(this.rangeBar)) {
          if (this.enableRtl) {
            this.rangeBar.style.right = "0px";
          } else {
            this.rangeBar.style.left = "0px";
          }
          setStyleAttribute(this.rangeBar, {
            "width": isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + "px"
          });
        } else if (this.type === "Range" && !isNullOrUndefined(this.secondHandle) && !isNullOrUndefined(this.rangeBar)) {
          if (this.enableRtl) {
            this.secondHandle.style.right = this.handlePos2 + "px";
            this.rangeBar.style.right = this.handlePos1 + "px";
          } else {
            this.secondHandle.style.left = this.handlePos2 + "px";
            this.rangeBar.style.left = this.handlePos1 + "px";
          }
          setStyleAttribute(this.rangeBar, {
            "width": this.handlePos2 - this.handlePos1 + "px"
          });
        }
      } else {
        this.firstHandle.style.bottom = this.handlePos1 + "px";
        if (this.isMaterialTooltip) {
          this.materialHandle.style.bottom = this.handlePos1 + "px";
        }
        if (this.type === "MinRange") {
          this.rangeBar.style.bottom = this.min > this.max ? this.handlePos1 + "px" : "0px";
          setStyleAttribute(this.rangeBar, {
            "height": isNullOrUndefined(this.handlePos1) ? 0 : this.min > this.max ? this.element.clientHeight - this.handlePos1 + "px" : this.handlePos1 + "px"
          });
        } else if (this.type === "Range") {
          this.secondHandle.style.bottom = this.handlePos2 + "px";
          this.rangeBar.style.bottom = this.min > this.max ? this.handlePos2 + "px" : this.handlePos1 + "px";
          setStyleAttribute(this.rangeBar, {
            "height": this.min > this.max ? this.handlePos1 - this.handlePos2 + "px" : this.handlePos2 - this.handlePos1 + "px"
          });
        }
      }
      if (this.limits.enabled) {
        this.setLimitBar();
      }
      if (this.ticks.placement !== "None" && this.ul) {
        this.removeElement(this.ul);
        this.ul = void 0;
        this.renderScale();
      }
      this.handleStart();
      if (!this.tooltip.isVisible) {
        setTimeout(function() {
          if (!isNullOrUndefined(_this.firstHandle)) {
            _this.firstHandle.style.transition = _this.scaleTransform;
          }
          if (_this.type === "Range" && !isNullOrUndefined(_this.secondHandle)) {
            _this.secondHandle.style.transition = _this.scaleTransform;
          }
        });
      }
      this.refreshTooltip(this.tooltipTarget);
      this.setBarColor();
    };
    Slider2.prototype.changeHandleValue = function(value) {
      var position = null;
      if (this.activeHandle === 1) {
        if (!(this.limits.enabled && this.limits.startHandleFixed)) {
          this.handleVal1 = this.checkHandleValue(value);
          this.handlePos1 = this.checkHandlePosition(this.handleVal1);
          if (this.type === "Range" && (this.handlePos1 > this.handlePos2 && this.min < this.max || this.handlePos1 < this.handlePos2 && this.min > this.max)) {
            this.handlePos1 = this.handlePos2;
            this.handleVal1 = this.handleVal2;
          }
          if (this.handlePos1 !== this.preHandlePos1) {
            position = this.preHandlePos1 = this.handlePos1;
          }
        }
        this.modifyZindex();
      } else {
        if (!(this.limits.enabled && this.limits.endHandleFixed)) {
          this.handleVal2 = this.checkHandleValue(value);
          this.handlePos2 = this.checkHandlePosition(this.handleVal2);
          if (this.type === "Range" && (this.handlePos2 < this.handlePos1 && this.min < this.max || this.handlePos2 > this.handlePos1 && this.min > this.max)) {
            this.handlePos2 = this.handlePos1;
            this.handleVal2 = this.handleVal1;
          }
          if (this.handlePos2 !== this.preHandlePos2) {
            position = this.preHandlePos2 = this.handlePos2;
          }
        }
        this.modifyZindex();
      }
      if (position !== null) {
        if (this.type !== "Default") {
          this.setRangeBar();
        }
        this.setHandlePosition(null);
      }
    };
    Slider2.prototype.tempStartEnd = function() {
      if (this.min > this.max) {
        return {
          start: this.max,
          end: this.min
        };
      } else {
        return {
          start: this.min,
          end: this.max
        };
      }
    };
    Slider2.prototype.xyToPosition = function(position) {
      var pos;
      if (this.min === this.max) {
        return 100;
      }
      if (this.orientation === "Horizontal") {
        var left = position.x - this.element.getBoundingClientRect().left;
        var num = this.element.offsetWidth / 100;
        this.val = left / num;
      } else {
        var top_1 = position.y - this.element.getBoundingClientRect().top;
        var num = this.element.offsetHeight / 100;
        this.val = 100 - top_1 / num;
      }
      var val = this.stepValueCalculation(this.val);
      if (val < 0) {
        val = 0;
      } else if (val > 100) {
        val = 100;
      }
      if (this.enableRtl && this.orientation !== "Vertical") {
        val = 100 - val;
      }
      if (this.orientation === "Horizontal") {
        pos = this.element.getBoundingClientRect().width * (val / 100);
      } else {
        pos = this.element.getBoundingClientRect().height * (val / 100);
      }
      return pos;
    };
    Slider2.prototype.stepValueCalculation = function(value) {
      if (this.step === 0) {
        this.step = 1;
      }
      var percentStep = parseFloat(formatUnit(this.step)) / ((parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min))) / 100);
      var remain = value % Math.abs(percentStep);
      if (remain !== 0) {
        if (percentStep / 2 > remain) {
          value -= remain;
        } else {
          value += Math.abs(percentStep) - remain;
        }
      }
      return value;
    };
    Slider2.prototype.add = function(a, b, addition) {
      var precision;
      var x = Math.pow(10, precision || 3);
      var val;
      if (addition) {
        val = (Math.round(a * x) + Math.round(b * x)) / x;
      } else {
        val = (Math.round(a * x) - Math.round(b * x)) / x;
      }
      return val;
    };
    Slider2.prototype.positionToValue = function(pos) {
      var val;
      var diff = parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min));
      if (this.orientation === "Horizontal") {
        val = pos / this.element.getBoundingClientRect().width * diff;
      } else {
        val = pos / this.element.getBoundingClientRect().height * diff;
      }
      var total = this.add(val, parseFloat(this.min.toString()), true);
      return total;
    };
    Slider2.prototype.sliderBarClick = function(evt) {
      evt.preventDefault();
      var pos;
      if (evt.type === "mousedown" || evt.type === "mouseup" || evt.type === "click") {
        pos = {
          x: evt.clientX,
          y: evt.clientY
        };
      } else if (evt.type === "touchend" || evt.type === "touchstart") {
        pos = {
          x: evt.changedTouches[0].clientX,
          y: evt.changedTouches[0].clientY
        };
      }
      var handlepos = this.xyToPosition(pos);
      var handleVal = this.positionToValue(handlepos);
      if (this.type === "Range" && (this.min < this.max && this.handlePos2 - handlepos < handlepos - this.handlePos1 || this.min > this.max && this.handlePos1 - handlepos > handlepos - this.handlePos2)) {
        this.activeHandle = 2;
        if (!(this.limits.enabled && this.limits.endHandleFixed)) {
          if (this.limits.enabled) {
            var value = this.getLimitValueAndPosition(handleVal, this.limits.maxStart, this.limits.maxEnd);
            handleVal = value[0];
            handlepos = value[1];
          }
          this.secondHandle.classList.add(classNames3.sliderActiveHandle);
          this.handlePos2 = this.preHandlePos2 = handlepos;
          this.handleVal2 = handleVal;
        }
        this.modifyZindex();
        this.secondHandle.focus();
      } else {
        this.activeHandle = 1;
        if (!(this.limits.enabled && this.limits.startHandleFixed)) {
          if (this.limits.enabled) {
            var value = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);
            handleVal = value[0];
            handlepos = value[1];
          }
          this.firstHandle.classList.add(classNames3.sliderActiveHandle);
          this.handlePos1 = this.preHandlePos1 = handlepos;
          this.handleVal1 = handleVal;
        }
        this.modifyZindex();
        this.firstHandle.focus();
      }
      if (this.isMaterialTooltip) {
        this.tooltipElement.classList.add(classNames3.materialTooltipActive);
      }
      var focusedElement = this.element.querySelector("." + classNames3.sliderTabHandle);
      if (focusedElement && this.getHandle() !== focusedElement) {
        focusedElement.classList.remove(classNames3.sliderTabHandle);
      }
      var handle = this.activeHandle === 1 ? this.firstHandle : this.secondHandle;
      var behindElement;
      if ((evt.type === "click" || evt.type === "mousedown") && evt.target === handle) {
        var eventX = evt.clientX, eventY = evt.clientY;
        behindElement = document.elementFromPoint(eventX, eventY);
      }
      if (!this.checkRepeatedValue(handleVal)) {
        return;
      }
      var transition = (this.isMaterial || this.isMaterial3) && this.tooltip.isVisible ? this.transitionOnMaterialTooltip : this.transition;
      this.getHandle().style.transition = transition.handle;
      if (this.type !== "Default") {
        this.rangeBar.style.transition = transition.rangeBar;
      }
      this.setHandlePosition(evt);
      if (this.isMaterialTooltip) {
        this.initialTooltip = false;
      }
      if (evt.target !== handle) {
        this.changeEvent("changed", evt);
      }
      if (this.type !== "Default") {
        this.setRangeBar();
      }
    };
    Slider2.prototype.handleValueAdjust = function(handleValue, assignValue, handleNumber) {
      if (handleNumber === 1) {
        this.handleVal1 = assignValue;
        this.handleVal2 = this.handleVal1 + this.minDiff;
      } else if (handleNumber === 2) {
        this.handleVal2 = assignValue;
        this.handleVal1 = this.handleVal2 - this.minDiff;
      }
      this.handlePos1 = this.checkHandlePosition(this.handleVal1);
      this.handlePos2 = this.checkHandlePosition(this.handleVal2);
    };
    Slider2.prototype.dragRangeBarMove = function(event2) {
      var _a, _b;
      if (event2.type !== "touchmove") {
        event2.preventDefault();
      }
      this.rangeBarDragged = true;
      var pos;
      this.rangeBar.style.transition = "none";
      this.firstHandle.style.transition = "none";
      this.secondHandle.style.transition = "none";
      var xPostion;
      var yPostion;
      if (event2.type === "mousemove") {
        _a = [event2.clientX, event2.clientY], xPostion = _a[0], yPostion = _a[1];
      } else {
        _b = [event2.changedTouches[0].clientX, event2.changedTouches[0].clientY], xPostion = _b[0], yPostion = _b[1];
      }
      if (!(this.limits.enabled && this.limits.startHandleFixed) && !(this.limits.enabled && this.limits.endHandleFixed)) {
        if (!this.enableRtl) {
          pos = {
            x: xPostion - this.firstPartRemain,
            y: yPostion + this.secondPartRemain
          };
        } else {
          pos = {
            x: xPostion + this.secondPartRemain,
            y: yPostion + this.secondPartRemain
          };
        }
        if (this.min > this.max) {
          this.handlePos2 = this.xyToPosition(pos);
          this.handleVal2 = this.positionToValue(this.handlePos2);
        } else {
          this.handlePos1 = this.xyToPosition(pos);
          this.handleVal1 = this.positionToValue(this.handlePos1);
        }
        if (!this.enableRtl) {
          pos = {
            x: xPostion + this.secondPartRemain,
            y: yPostion - this.firstPartRemain
          };
        } else {
          pos = {
            x: xPostion - this.firstPartRemain,
            y: yPostion - this.firstPartRemain
          };
        }
        if (this.min > this.max) {
          this.handlePos1 = this.xyToPosition(pos);
          this.handleVal1 = this.positionToValue(this.handlePos1);
        } else {
          this.handlePos2 = this.xyToPosition(pos);
          this.handleVal2 = this.positionToValue(this.handlePos2);
        }
        if (this.limits.enabled) {
          var value = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);
          this.handleVal1 = value[0];
          this.handlePos1 = value[1];
          if (this.handleVal1 === this.limits.minEnd) {
            this.handleValueAdjust(this.handleVal1, this.limits.minEnd, 1);
          }
          if (this.handleVal1 === this.limits.minStart) {
            this.handleValueAdjust(this.handleVal1, this.limits.minStart, 1);
          }
          value = this.getLimitValueAndPosition(this.handleVal2, this.limits.maxStart, this.limits.maxEnd);
          this.handleVal2 = value[0];
          this.handlePos2 = value[1];
          if (this.handleVal2 === this.limits.maxStart) {
            this.handleValueAdjust(this.handleVal2, this.limits.maxStart, 2);
          }
          if (this.handleVal2 === this.limits.maxEnd) {
            this.handleValueAdjust(this.handleVal2, this.limits.maxEnd, 2);
          }
        }
        if (this.handleVal2 === (this.min > this.max ? this.min : this.max)) {
          this.handleValueAdjust(this.handleVal2, this.min > this.max ? this.min : this.max, 2);
        }
        if (this.handleVal1 === (this.min > this.max ? this.max : this.min)) {
          this.handleValueAdjust(this.handleVal1, this.min > this.max ? this.max : this.min, 1);
        }
      }
      this.activeHandle = 1;
      this.setHandlePosition(event2);
      this.activeHandle = 2;
      this.setHandlePosition(event2);
      this.tooltipToggle(this.rangeBar);
      this.setRangeBar();
    };
    Slider2.prototype.sliderBarUp = function(event2) {
      this.changeEvent("changed", event2);
      this.handleFocusOut();
      this.firstHandle.classList.remove(classNames3.sliderActiveHandle);
      if (this.type === "Range") {
        this.initialTooltip = false;
        this.secondHandle.classList.remove(classNames3.sliderActiveHandle);
      }
      this.closeTooltip();
      if (this.isMaterial || this.isMaterial3) {
        this.getHandle().classList.remove("e-large-thumb-size");
        if (this.isMaterialTooltip) {
          this.tooltipElement.classList.remove(classNames3.materialTooltipActive);
        }
      }
      EventHandler.remove(document, "mousemove touchmove", this.sliderBarMove);
      EventHandler.remove(document, "mouseup touchend", this.sliderBarUp);
    };
    Slider2.prototype.sliderBarMove = function(evt) {
      if (evt.type !== "touchmove") {
        evt.preventDefault();
      }
      var pos;
      if (evt.type === "mousemove") {
        pos = {
          x: evt.clientX,
          y: evt.clientY
        };
      } else {
        pos = {
          x: evt.changedTouches[0].clientX,
          y: evt.changedTouches[0].clientY
        };
      }
      var handlepos = this.xyToPosition(pos);
      var handleVal = this.positionToValue(handlepos);
      handlepos = Math.round(handlepos);
      if (this.type !== "Range" && this.activeHandle === 1) {
        if (!(this.limits.enabled && this.limits.startHandleFixed)) {
          if (this.limits.enabled) {
            var valueAndPostion = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);
            handlepos = valueAndPostion[1];
            handleVal = valueAndPostion[0];
          }
          this.handlePos1 = handlepos;
          this.handleVal1 = handleVal;
        }
        this.firstHandle.classList.add(classNames3.sliderActiveHandle);
      }
      if (this.type === "Range") {
        if (this.activeHandle === 1) {
          this.firstHandle.classList.add(classNames3.sliderActiveHandle);
          if (!(this.limits.enabled && this.limits.startHandleFixed)) {
            if (this.min < this.max && handlepos > this.handlePos2 || this.min > this.max && handlepos < this.handlePos2) {
              handlepos = this.handlePos2;
              handleVal = this.handleVal2;
            }
            if (handlepos !== this.preHandlePos1) {
              if (this.limits.enabled) {
                var value = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);
                handleVal = value[0];
                handlepos = value[1];
              }
              this.handlePos1 = this.preHandlePos1 = handlepos;
              this.handleVal1 = handleVal;
              this.activeHandle = 1;
            }
          }
        } else if (this.activeHandle === 2) {
          this.secondHandle.classList.add(classNames3.sliderActiveHandle);
          if (!(this.limits.enabled && this.limits.endHandleFixed)) {
            if (this.min < this.max && handlepos < this.handlePos1 || this.min > this.max && handlepos > this.handlePos1) {
              handlepos = this.handlePos1;
              handleVal = this.handleVal1;
            }
            if (handlepos !== this.preHandlePos2) {
              if (this.limits.enabled) {
                var value = this.getLimitValueAndPosition(handleVal, this.limits.maxStart, this.limits.maxEnd);
                handleVal = value[0];
                handlepos = value[1];
              }
              this.handlePos2 = this.preHandlePos2 = handlepos;
              this.handleVal2 = handleVal;
              this.activeHandle = 2;
            }
          }
        }
      }
      if (!this.checkRepeatedValue(handleVal)) {
        return;
      }
      this.getHandle().style.transition = this.scaleTransform;
      if (this.type !== "Default") {
        this.rangeBar.style.transition = "none";
      }
      this.setHandlePosition(evt);
      if ((this.isMaterial || this.isMaterial3) && !this.tooltip.isVisible && !this.getHandle().classList.contains(classNames3.sliderTabHandle)) {
        this.materialChange();
      }
      this.tooltipToggle(this.getHandle());
      if (this.type !== "Default") {
        this.setRangeBar();
      }
    };
    Slider2.prototype.dragRangeBarUp = function(event2) {
      if (!this.rangeBarDragged) {
        this.focusSliderElement();
        this.sliderBarClick(event2);
      } else {
        this.isDragComplete = true;
      }
      this.changeEvent("changed", event2);
      this.closeTooltip();
      EventHandler.remove(document, "mousemove touchmove", this.dragRangeBarMove);
      EventHandler.remove(document, "mouseup touchend", this.dragRangeBarUp);
      this.rangeBarDragged = false;
    };
    Slider2.prototype.checkRepeatedValue = function(currentValue) {
      if (this.type === "Range") {
        var previousVal = this.enableRtl && this.orientation !== "Vertical" ? this.activeHandle === 1 ? this.previousVal[1] : this.previousVal[0] : this.activeHandle === 1 ? this.previousVal[0] : this.previousVal[1];
        if (currentValue === previousVal) {
          return 0;
        }
      } else {
        if (currentValue === this.previousVal) {
          return 0;
        }
      }
      return 1;
    };
    Slider2.prototype.refreshTooltip = function(target) {
      if (this.tooltip.isVisible && this.tooltipObj) {
        this.tooltipValue();
        if (target) {
          this.tooltipObj.refresh(target);
          this.tooltipTarget = target;
        }
      }
    };
    Slider2.prototype.openTooltip = function(target) {
      if (this.tooltip.isVisible && this.tooltipObj && !this.isMaterialTooltip) {
        this.tooltipValue();
        this.tooltipObj.open(target);
        this.tooltipTarget = target;
      }
    };
    Slider2.prototype.closeTooltip = function() {
      if (this.tooltip.isVisible && this.tooltipObj && this.tooltip.showOn !== "Always" && !this.isMaterialTooltip) {
        this.tooltipValue();
        this.tooltipObj.close();
        this.tooltipTarget = void 0;
      }
    };
    Slider2.prototype.keyDown = function(event2) {
      switch (event2.keyCode) {
        case 37:
        case 38:
        case 39:
        case 40:
        case 33:
        case 34:
        case 36:
        case 35:
          event2.preventDefault();
          this.buttonClick(event2);
          break;
      }
    };
    Slider2.prototype.wireButtonEvt = function(destroy3) {
      if (!destroy3) {
        EventHandler.add(this.firstBtn, "mouseleave touchleave", this.buttonFocusOut, this);
        EventHandler.add(this.secondBtn, "mouseleave touchleave", this.buttonFocusOut, this);
        EventHandler.add(this.firstBtn, "mousedown touchstart", this.repeatHandlerMouse, this);
        EventHandler.add(this.firstBtn, "mouseup mouseleave touchup touchend", this.repeatHandlerUp, this);
        EventHandler.add(this.secondBtn, "mousedown touchstart", this.repeatHandlerMouse, this);
        EventHandler.add(this.secondBtn, "mouseup mouseleave touchup touchend", this.repeatHandlerUp, this);
        EventHandler.add(this.firstBtn, "focusout", this.sliderFocusOut, this);
        EventHandler.add(this.secondBtn, "focusout", this.sliderFocusOut, this);
      } else {
        EventHandler.remove(this.firstBtn, "mouseleave touchleave", this.buttonFocusOut);
        EventHandler.remove(this.secondBtn, "mouseleave touchleave", this.buttonFocusOut);
        EventHandler.remove(this.firstBtn, "mousedown touchstart", this.repeatHandlerMouse);
        EventHandler.remove(this.firstBtn, "mouseup mouseleave touchup touchend", this.repeatHandlerUp);
        EventHandler.remove(this.secondBtn, "mousedown touchstart", this.repeatHandlerMouse);
        EventHandler.remove(this.secondBtn, "mouseup mouseleave touchup touchend", this.repeatHandlerUp);
        EventHandler.remove(this.firstBtn, "focusout", this.sliderFocusOut);
        EventHandler.remove(this.secondBtn, "focusout", this.sliderFocusOut);
      }
    };
    Slider2.prototype.rangeBarMousedown = function(event2) {
      var _a, _b;
      event2.preventDefault();
      this.focusSliderElement();
      if (this.type === "Range" && this.drag && event2.target === this.rangeBar) {
        var xPostion = void 0;
        var yPostion = void 0;
        if (event2.type === "mousedown") {
          _a = [event2.clientX, event2.clientY], xPostion = _a[0], yPostion = _a[1];
        } else if (event2.type === "touchstart") {
          _b = [event2.changedTouches[0].clientX, event2.changedTouches[0].clientY], xPostion = _b[0], yPostion = _b[1];
        }
        if (this.orientation === "Horizontal") {
          this.firstPartRemain = xPostion - this.rangeBar.getBoundingClientRect().left;
          this.secondPartRemain = this.rangeBar.getBoundingClientRect().right - xPostion;
        } else {
          this.firstPartRemain = yPostion - this.rangeBar.getBoundingClientRect().top;
          this.secondPartRemain = this.rangeBar.getBoundingClientRect().bottom - yPostion;
        }
        this.minDiff = this.handleVal2 - this.handleVal1;
        this.tooltipToggle(this.rangeBar);
        var focusedElement = this.element.querySelector("." + classNames3.sliderTabHandle);
        if (focusedElement) {
          focusedElement.classList.remove(classNames3.sliderTabHandle);
        }
        EventHandler.add(document, "mousemove touchmove", this.dragRangeBarMove, this);
        EventHandler.add(document, "mouseup touchend", this.dragRangeBarUp, this);
      }
    };
    Slider2.prototype.elementClick = function(event2) {
      if (this.isDragComplete) {
        this.isDragComplete = false;
        return;
      }
      event2.preventDefault();
      this.focusSliderElement();
      this.sliderBarClick(event2);
      this.focusHandle();
    };
    Slider2.prototype.wireEvents = function() {
      this.onresize = this.reposition.bind(this);
      window.addEventListener("resize", this.onresize);
      if (this.enabled && !this.readonly) {
        EventHandler.add(this.element, "click", this.elementClick, this);
        if (this.type === "Range" && this.drag) {
          EventHandler.add(this.rangeBar, "mousedown touchstart", this.rangeBarMousedown, this);
        }
        EventHandler.add(this.sliderContainer, "keydown", this.keyDown, this);
        EventHandler.add(this.sliderContainer, "keyup", this.keyUp, this);
        EventHandler.add(this.element, "focusout", this.sliderFocusOut, this);
        EventHandler.add(this.sliderContainer, "mouseover mouseout touchstart touchend", this.hover, this);
        this.wireFirstHandleEvt(false);
        if (this.type === "Range") {
          this.wireSecondHandleEvt(false);
        }
        if (this.showButtons) {
          this.wireButtonEvt(false);
        }
        this.wireMaterialTooltipEvent(false);
        if (this.isForm) {
          EventHandler.add(this.formElement, "reset", this.formResetHandler, this);
        }
      }
    };
    Slider2.prototype.unwireEvents = function() {
      EventHandler.remove(this.element, "click", this.elementClick);
      if (this.type === "Range" && this.drag) {
        EventHandler.remove(this.rangeBar, "mousedown touchstart", this.rangeBarMousedown);
      }
      EventHandler.remove(this.sliderContainer, "keydown", this.keyDown);
      EventHandler.remove(this.sliderContainer, "keyup", this.keyUp);
      EventHandler.remove(this.element, "focusout", this.sliderFocusOut);
      EventHandler.remove(this.sliderContainer, "mouseover mouseout touchstart touchend", this.hover);
      this.wireFirstHandleEvt(true);
      if (this.type === "Range") {
        this.wireSecondHandleEvt(true);
      }
      if (this.showButtons) {
        this.wireButtonEvt(true);
      }
      this.wireMaterialTooltipEvent(true);
      EventHandler.remove(this.element, "reset", this.formResetHandler);
    };
    Slider2.prototype.formResetHandler = function() {
      this.setProperties({
        "value": this.formResetValue
      }, true);
      this.setValue();
    };
    Slider2.prototype.keyUp = function(event2) {
      if (event2.keyCode === 9 && event2.target.classList.contains(classNames3.sliderHandle)) {
        this.focusSliderElement();
        if (!event2.target.classList.contains(classNames3.sliderTabHandle)) {
          if (this.element.querySelector("." + classNames3.sliderTabHandle)) {
            this.element.querySelector("." + classNames3.sliderTabHandle).classList.remove(classNames3.sliderTabHandle);
          }
          event2.target.classList.add(classNames3.sliderTabHandle);
          var parentElement = event2.target.parentElement;
          if (parentElement === this.element) {
            parentElement.querySelector("." + classNames3.sliderTrack).classList.add(classNames3.sliderTabTrack);
            if (this.type === "Range" || this.type === "MinRange") {
              parentElement.querySelector("." + classNames3.rangeBar).classList.add(classNames3.sliderTabRange);
            }
          }
          if (this.type === "Range") {
            var previousSibling = event2.target.previousSibling;
            if (previousSibling && previousSibling.classList.contains(classNames3.sliderHandle)) {
              this.activeHandle = 2;
            } else {
              this.activeHandle = 1;
            }
          }
          this.getHandle().focus();
          this.tooltipToggle(this.getHandle());
        }
      }
      this.closeTooltip();
      this.changeEvent("changed", event2);
    };
    Slider2.prototype.hover = function(event2) {
      if (!isNullOrUndefined(event2)) {
        if (event2.type === "mouseover" || event2.type === "touchmove" || event2.type === "mousemove" || event2.type === "pointermove" || event2.type === "touchstart") {
          this.sliderContainer.classList.add(classNames3.sliderHover);
        } else {
          this.sliderContainer.classList.remove(classNames3.sliderHover);
          var curTarget = event2.currentTarget;
          if (this.tooltip.isVisible && this.tooltip.showOn !== "Always" && this.tooltipObj && this.isMaterialTooltip && !curTarget.classList.contains(classNames3.sliderHandleFocused) && !curTarget.classList.contains(classNames3.sliderTabHandle)) {
            this.closeMaterialTooltip();
          }
        }
      }
    };
    Slider2.prototype.sliderFocusOut = function(event2) {
      if (event2.relatedTarget !== this.secondHandle && event2.relatedTarget !== this.firstHandle && event2.relatedTarget !== this.element && event2.relatedTarget !== this.firstBtn && event2.relatedTarget !== this.secondBtn) {
        this.closeMaterialTooltip();
        this.closeTooltip();
        if (this.element.querySelector("." + classNames3.sliderTabHandle)) {
          this.element.querySelector("." + classNames3.sliderTabHandle).classList.remove(classNames3.sliderTabHandle);
        }
        if (this.element.querySelector("." + classNames3.sliderTabTrack)) {
          this.element.querySelector("." + classNames3.sliderTabTrack).classList.remove(classNames3.sliderTabTrack);
          if ((this.type === "Range" || this.type === "MinRange") && this.element.querySelector("." + classNames3.sliderTabRange)) {
            this.element.querySelector("." + classNames3.sliderTabRange).classList.remove(classNames3.sliderTabRange);
          }
        }
        this.hiddenInput.focus();
        this.hiddenInput.blur();
        this.isElementFocused = false;
      }
    };
    Slider2.prototype.removeElement = function(element2) {
      if (element2.parentNode) {
        element2.parentNode.removeChild(element2);
      }
    };
    Slider2.prototype.changeSliderType = function(type, args) {
      if (this.isMaterialTooltip && this.materialHandle) {
        this.sliderContainer.classList.remove(classNames3.materialSlider);
        this.removeElement(this.materialHandle);
        this.materialHandle = void 0;
      }
      this.removeElement(this.firstHandle);
      this.firstHandle = void 0;
      if (type !== "Default") {
        if (type === "Range") {
          this.removeElement(this.secondHandle);
          this.secondHandle = void 0;
        }
        this.removeElement(this.rangeBar);
        this.rangeBar = void 0;
      }
      if (this.tooltip.isVisible && !isNullOrUndefined(this.tooltipObj)) {
        this.tooltipObj.destroy();
        this.tooltipElement = void 0;
        this.tooltipCollidedPosition = void 0;
      }
      if (this.limits.enabled) {
        if (type === "MinRange" || type === "Default") {
          if (!isNullOrUndefined(this.limitBarFirst)) {
            this.removeElement(this.limitBarFirst);
            this.limitBarFirst = void 0;
          }
        } else {
          if (!isNullOrUndefined(this.limitBarSecond)) {
            this.removeElement(this.limitBarSecond);
            this.limitBarSecond = void 0;
          }
        }
      }
      this.activeHandle = 1;
      this.getThemeInitialization();
      if (this.type === "Range") {
        this.rangeValueUpdate();
      }
      this.createRangeBar();
      if (this.limits.enabled) {
        this.createLimitBar();
      }
      this.setHandler();
      this.setOrientClass();
      this.wireFirstHandleEvt(!this.enabled);
      if (this.type === "Range") {
        this.wireSecondHandleEvt(!this.enabled);
      }
      this.setValue();
      if (this.tooltip.isVisible) {
        this.renderTooltip();
        this.wireMaterialTooltipEvent(false);
      }
      this.setBarColor();
      if (args !== "tooltip") {
        this.updateConfig();
      }
      if (this.readonly) {
        this.sliderContainer.classList.remove(classNames3.readonly);
        this.setReadOnly();
      }
    };
    Slider2.prototype.changeRtl = function() {
      if (!this.enableRtl && this.type === "Range") {
        this.value = [this.handleVal2, this.handleVal1];
      }
      this.updateConfig();
      if (this.tooltip.isVisible) {
        this.tooltipObj.refresh(this.firstHandle);
      }
      if (this.showButtons) {
        var enabledRTL = this.enableRtl && this.orientation !== "Vertical";
        attributes(enabledRTL ? this.secondBtn : this.firstBtn, {
          "aria-label": "Decrease",
          title: "Decrease"
        });
        attributes(enabledRTL ? this.firstBtn : this.secondBtn, {
          "aria-label": "Increase",
          title: "Increase"
        });
      }
    };
    Slider2.prototype.changeOrientation = function() {
      this.changeSliderType(this.type, "null");
    };
    Slider2.prototype.updateConfig = function() {
      this.setEnableRTL();
      this.setValue();
      if (this.tooltip.isVisible) {
        this.refreshTooltip(this.tooltipTarget);
      }
      if (this.ticks.placement !== "None") {
        if (this.ul) {
          this.removeElement(this.ul);
          this.ul = void 0;
          this.renderScale();
        }
      }
      this.limitsPropertyChange();
    };
    Slider2.prototype.limitsPropertyChange = function() {
      if (this.limits.enabled) {
        if (isNullOrUndefined(this.limitBarFirst) && this.type !== "Range") {
          this.createLimitBar();
        }
        if (isNullOrUndefined(this.limitBarFirst) && isNullOrUndefined(this.limitBarSecond) && this.type === "Range") {
          this.createLimitBar();
        }
        this.setLimitBar();
        this.setValue();
      } else {
        if (!isNullOrUndefined(this.limitBarFirst)) {
          detach(this.limitBarFirst);
        }
        if (!isNullOrUndefined(this.limitBarSecond)) {
          detach(this.limitBarSecond);
        }
      }
    };
    Slider2.prototype.getPersistData = function() {
      var keyEntity = ["value"];
      return this.addOnPersist(keyEntity);
    };
    Slider2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.unwireEvents();
      window.removeEventListener("resize", this.onresize);
      removeClass([this.sliderContainer], [classNames3.sliderDisabled]);
      this.firstHandle.removeAttribute("aria-orientation");
      if (this.type === "Range") {
        this.secondHandle.removeAttribute("aria-orientation");
      }
      if (this.sliderContainer.parentNode) {
        this.sliderContainer.parentNode.insertBefore(this.element, this.sliderContainer);
      }
      detach(this.sliderContainer);
      if (this.tooltip.isVisible) {
        this.tooltipObj.destroy();
      }
      this.element.innerHTML = "";
      this.hiddenInput = null;
      this.sliderContainer = null;
      this.sliderTrack = null;
      this.rangeBar = null;
      this.firstHandle = null;
      this.secondHandle = null;
      this.tickElementCollection = null;
      this.ul = null;
      this.firstBtn = null;
      this.secondBtn = null;
      this.materialHandle = null;
      this.tooltipObj = null;
      this.tooltipTarget = null;
      this.limitBarFirst = null;
      this.limitBarSecond = null;
      this.firstChild = null;
      this.lastChild = null;
      this.tooltipElement = null;
    };
    Slider2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var _this = this;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "cssClass":
            this.setCSSClass(oldProp.cssClass);
            break;
          case "value":
            if (newProp && oldProp) {
              var value = isNullOrUndefined(newProp.value) ? this.type === "Range" ? [this.min, this.max] : this.min : newProp.value;
              this.setProperties({
                "value": value
              }, true);
              if (!isNullOrUndefined(oldProp.value) && oldProp.value.toString() !== value.toString()) {
                this.setValue();
                this.refreshTooltip(this.tooltipTarget);
                if (this.type === "Range") {
                  if (isNullOrUndefined(newProp.value) || oldProp.value[1] === value[1]) {
                    this.activeHandle = 1;
                  } else {
                    this.activeHandle = 2;
                  }
                }
              }
            }
            break;
          case "min":
          case "step":
          case "max":
            this.setMinMaxValue();
            break;
          case "tooltip":
            if (!isNullOrUndefined(newProp.tooltip) && !isNullOrUndefined(oldProp.tooltip)) {
              this.initialTooltip = true;
              this.setTooltip(prop);
              if (!this.showButtons) {
                this.wireEvents();
              }
            }
            break;
          case "type":
            if (!isNullOrUndefined(oldProp) && Object.keys(oldProp).length && !isNullOrUndefined(oldProp.type)) {
              this.changeSliderType(oldProp.type, prop);
              this.setZindex();
            }
            break;
          case "enableRtl":
            if (oldProp.enableRtl !== newProp.enableRtl && this.orientation !== "Vertical") {
              this.rtl = oldProp.enableRtl;
              this.changeRtl();
            }
            break;
          case "limits":
            this.limitsPropertyChange();
            break;
          case "orientation":
            this.changeOrientation();
            break;
          case "ticks":
            if (!isNullOrUndefined(this.sliderContainer.querySelector("." + classNames3.scale))) {
              detach(this.ul);
              Array.prototype.forEach.call(this.sliderContainer.classList, function(className) {
                if (className.match(/e-scale-/)) {
                  _this.sliderContainer.classList.remove(className);
                }
              });
            }
            if (this.ticks.placement !== "None") {
              this.renderScale();
              this.setZindex();
            }
            break;
          case "locale":
            if (this.showButtons) {
              this.buttonTitle();
            }
            break;
          case "showButtons":
            if (newProp.showButtons) {
              this.setButtons();
              this.reposition();
              if (this.enabled && !this.readonly) {
                this.wireButtonEvt(false);
              }
            } else {
              if (this.firstBtn && this.secondBtn) {
                this.sliderContainer.removeChild(this.firstBtn);
                this.sliderContainer.removeChild(this.secondBtn);
                this.sliderContainer.classList.remove(classNames3.sliderButtonClass);
                this.firstBtn = void 0;
                this.secondBtn = void 0;
                this.reposition();
              }
            }
            break;
          case "enabled":
            this.setEnabled();
            break;
          case "readonly":
            this.setReadOnly();
            break;
          case "customValues":
            this.setValue();
            this.reposition();
            break;
          case "colorRange":
            this.reposition();
            break;
          case "width":
            this.setElementWidth(newProp.width);
            this.setMinMaxValue();
            if (this.limits) {
              this.limitsPropertyChange();
            }
            break;
        }
      }
    };
    Slider2.prototype.setReadOnly = function() {
      if (this.readonly) {
        this.unwireEvents();
        this.sliderContainer.classList.add(classNames3.readonly);
      } else {
        this.wireEvents();
        this.sliderContainer.classList.remove(classNames3.readonly);
      }
    };
    Slider2.prototype.setMinMaxValue = function() {
      var _this = this;
      this.setValue();
      this.refreshTooltip(this.tooltipTarget);
      if (!isNullOrUndefined(this.sliderContainer.querySelector("." + classNames3.scale))) {
        if (this.ul) {
          detach(this.ul);
          Array.prototype.forEach.call(this.sliderContainer.classList, function(className) {
            if (className.match(/e-scale-/)) {
              _this.sliderContainer.classList.remove(className);
            }
          });
        }
      }
      if (this.ticks.placement !== "None") {
        this.renderScale();
        this.setZindex();
      }
    };
    Slider2.prototype.setZindex = function() {
      this.zIndex = 6;
      if (!isNullOrUndefined(this.ticks) && this.ticks.placement !== "None" && !isNullOrUndefined(this.ul) && !isNullOrUndefined(this.element)) {
        this.ul.style.zIndex = this.zIndex + -7 + "";
        this.element.style.zIndex = this.zIndex + 2 + "";
      }
      if (!this.isMaterial && !this.isMaterial3 && !isNullOrUndefined(this.ticks) && this.ticks.placement === "Both") {
        this.element.style.zIndex = this.zIndex + 2 + "";
      }
      if (!isNullOrUndefined(this.firstHandle)) {
        this.firstHandle.style.zIndex = this.zIndex + 3 + "";
      }
      if (this.type === "Range" && !isNullOrUndefined(this.secondHandle)) {
        this.secondHandle.style.zIndex = this.zIndex + 4 + "";
      }
    };
    Slider2.prototype.setTooltip = function(args) {
      this.changeSliderType(this.type, args);
    };
    Slider2.prototype.setBarColor = function() {
      var trackPosition;
      var trackClassName;
      var child = this.sliderTrack.lastElementChild;
      while (child) {
        this.sliderTrack.removeChild(child);
        child = this.sliderTrack.lastElementChild;
      }
      for (var i = 0; i < this.colorRange.length; i++) {
        if (!isNullOrUndefined(this.colorRange[i].start) && !isNullOrUndefined(this.colorRange[i].end)) {
          if (this.colorRange[i].end > this.colorRange[i].start) {
            if (this.colorRange[i].start < this.min) {
              this.colorRange[i].start = this.min;
            }
            if (this.colorRange[i].end > this.max) {
              this.colorRange[i].end = this.max;
            }
            var startingPosition = this.checkHandlePosition(this.colorRange[i].start);
            var endPosition = this.checkHandlePosition(this.colorRange[i].end);
            var trackContainer = this.createElement("div");
            trackContainer.style.backgroundColor = this.colorRange[i].color;
            trackContainer.style.border = "1px solid " + this.colorRange[i].color;
            if (this.orientation === "Horizontal") {
              trackClassName = classNames3.sliderHorizantalColor;
              if (this.enableRtl) {
                if (isNullOrUndefined(this.customValues)) {
                  trackPosition = this.checkHandlePosition(this.max) - this.checkHandlePosition(this.colorRange[i].end);
                } else {
                  trackPosition = this.checkHandlePosition(this.customValues.length - this.colorRange[i].end - 1);
                }
              } else {
                trackPosition = this.checkHandlePosition(this.colorRange[i].start);
              }
              trackContainer.style.width = endPosition - startingPosition + "px";
              trackContainer.style.left = trackPosition + "px";
            } else {
              trackClassName = classNames3.sliderVerticalColor;
              trackPosition = this.checkHandlePosition(this.colorRange[i].start);
              trackContainer.style.height = endPosition - startingPosition + "px";
              trackContainer.style.bottom = trackPosition + "px";
            }
            trackContainer.classList.add(trackClassName);
            this.sliderTrack.appendChild(trackContainer);
          }
        }
      }
    };
    Slider2.prototype.getModuleName = function() {
      return "slider";
    };
    __decorate19([Property(null)], Slider2.prototype, "value", void 0);
    __decorate19([Property(null)], Slider2.prototype, "customValues", void 0);
    __decorate19([Property(1)], Slider2.prototype, "step", void 0);
    __decorate19([Property(null)], Slider2.prototype, "width", void 0);
    __decorate19([Property(0)], Slider2.prototype, "min", void 0);
    __decorate19([Property(100)], Slider2.prototype, "max", void 0);
    __decorate19([Property(false)], Slider2.prototype, "readonly", void 0);
    __decorate19([Property("Default")], Slider2.prototype, "type", void 0);
    __decorate19([Collection([{}], ColorRangeData)], Slider2.prototype, "colorRange", void 0);
    __decorate19([Complex({}, TicksData)], Slider2.prototype, "ticks", void 0);
    __decorate19([Complex({}, LimitData)], Slider2.prototype, "limits", void 0);
    __decorate19([Property(true)], Slider2.prototype, "enabled", void 0);
    __decorate19([Complex({}, TooltipData)], Slider2.prototype, "tooltip", void 0);
    __decorate19([Property(false)], Slider2.prototype, "showButtons", void 0);
    __decorate19([Property(true)], Slider2.prototype, "enableAnimation", void 0);
    __decorate19([Property("Horizontal")], Slider2.prototype, "orientation", void 0);
    __decorate19([Property("")], Slider2.prototype, "cssClass", void 0);
    __decorate19([Property(true)], Slider2.prototype, "enableHtmlSanitizer", void 0);
    __decorate19([Event()], Slider2.prototype, "created", void 0);
    __decorate19([Event()], Slider2.prototype, "change", void 0);
    __decorate19([Event()], Slider2.prototype, "changed", void 0);
    __decorate19([Event()], Slider2.prototype, "renderingTicks", void 0);
    __decorate19([Event()], Slider2.prototype, "renderedTicks", void 0);
    __decorate19([Event()], Slider2.prototype, "tooltipChange", void 0);
    Slider2 = __decorate19([NotifyPropertyChanges], Slider2);
    return Slider2;
  }(Component)
);

// node_modules/@syncfusion/ej2-inputs/src/color-picker/color-picker.js
var __extends21 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate20 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var APPLY = "e-apply";
var CANCEL = "e-cancel";
var CURRENT = "e-current";
var CONTAINER = "e-container";
var CTRLBTN = "e-ctrl-btn";
var CTRLSWITCH = "e-switch-ctrl-btn";
var DISABLED4 = "e-disabled";
var FORMATSWITCH = "e-value-switch-btn";
var HANDLER = "e-handler";
var HEX = "e-hex";
var HIDEHEX = "e-hide-hex-value";
var HIDEOPACITY = "e-hide-opacity";
var HIDERGBA = "e-hide-switchable-value";
var HIDEVALUE = "e-hide-value";
var HIDEVALUESWITCH = "e-hide-valueswitcher";
var HSVAREA = "e-hsv-color";
var HSVCONTAINER = "e-hsv-container";
var INPUTWRAPPER = "e-selected-value";
var MODESWITCH = "e-mode-switch-btn";
var NOCOLOR = "e-nocolor-item";
var OPACITY = "e-opacity-value";
var PALETTES = "e-palette";
var PALETTECONTENT = "e-color-palette";
var PICKERCONTENT = "e-color-picker";
var PREVIEW = "e-preview-container";
var PREVIOUS = "e-previous";
var RTL7 = "e-rtl";
var SHOWVALUE = "e-show-value";
var SELECT = "e-selected";
var SPLITPREVIEW = "e-split-preview";
var TILE = "e-tile";
var presets = {
  default: ["#000000", "#f44336", "#e91e63", "#9c27b0", "#673ab7", "#2196f3", "#03a9f4", "#00bcd4", "#009688", "#ffeb3b", "#ffffff", "#ffebee", "#fce4ec", "#f3e5f5", "#ede7f6", "#e3f2fd", "#e1f5fe", "#e0f7fa", "#e0f2f1", "#fffde7", "#f2f2f2", "#ffcdd2", "#f8bbd0", "#e1bee7", "#d1c4e9", "#bbdefb", "#b3e5fc", "#b2ebf2", "#b2dfdb", "#fff9c4", "#e6e6e6", "#ef9a9a", "#f48fb1", "#ce93d8", "#b39ddb", "#90caf9", "#81d4fa", "#80deea", "#80cbc4", "#fff59d", "#cccccc", "#e57373", "#f06292", "#ba68c8", "#9575cd", "#64b5f6", "#4fc3f7", "#4dd0e1", "#4db6ac", "#fff176", "#b3b3b3", "#ef5350", "#ec407a", "#ab47bc", "#7e57c2", "#42a5f5", "#29b6f6", "#26c6da", "#26a69a", "#ffee58", "#999999", "#e53935", "#d81b60", "#8e24aa", "#5e35b1", "#1e88e5", "#039be5", "#00acc1", "#00897b", "#fdd835", "#808080", "#d32f2f", "#c2185b", "#7b1fa2", "#512da8", "#1976d2", "#0288d1", "#0097a7", "#00796b", "#fbc02d", "#666666", "#c62828", "#ad1457", "#6a1b9a", "#4527a0", "#1565c0", "#0277bd", "#00838f", "#00695c", "#f9a825", "#4d4d4d", "#b71c1c", "#880e4f", "#4a148c", "#311b92", "#0d47a1", "#01579b", "#006064", "#004d40", "#f57f17"]
};
var ColorPicker = (
  /** @class */
  function(_super) {
    __extends21(ColorPicker2, _super);
    function ColorPicker2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.recentColors = [];
      return _this;
    }
    ColorPicker2.prototype.preRender = function() {
      var ele = this.element;
      this.formElement = closest(this.element, "form");
      if (this.formElement) {
        EventHandler.add(this.formElement, "reset", this.formResetHandler, this);
      }
      var localeText = {
        Apply: "Apply",
        Cancel: "Cancel",
        ModeSwitcher: "Switch Mode",
        RecentColors: "Recent colors"
      };
      this.l10n = new L10n("colorpicker", localeText, this.locale);
      if (ele.getAttribute("ejs-for") && !ele.getAttribute("name")) {
        ele.setAttribute("name", ele.id);
      }
    };
    ColorPicker2.prototype.render = function() {
      this.initWrapper();
      if (this.inline) {
        this.createWidget();
      } else {
        this.createSplitBtn();
      }
      if (!this.enableOpacity) {
        addClass([this.container.parentElement], HIDEOPACITY);
      }
      this.renderComplete();
    };
    ColorPicker2.prototype.initWrapper = function() {
      var wrapper = this.createElement("div", {
        className: "e-" + this.getModuleName() + "-wrapper"
      });
      this.element.parentNode.insertBefore(wrapper, this.element);
      wrapper.appendChild(this.element);
      attributes(this.element, {
        "tabindex": "-1",
        "spellcheck": "false",
        "aria-label": "colorpicker"
      });
      this.container = this.createElement("div", {
        className: CONTAINER
      });
      this.getWrapper().appendChild(this.container);
      var value = this.value ? this.roundValue(this.value).toLowerCase() : "#008000ff";
      if (this.noColor && this.mode === "Palette" && this.value === "") {
        value = "";
      }
      var slicedValue = value.slice(0, 7);
      if (isNullOrUndefined(this.initialInputValue)) {
        this.initialInputValue = slicedValue;
      }
      this.element.value = slicedValue;
      if (this.enableOpacity) {
        this.setProperties({
          "value": value
        }, true);
      } else {
        this.setProperties({
          "value": slicedValue
        }, true);
      }
      if (this.enableRtl) {
        wrapper.classList.add(RTL7);
      }
      if (this.cssClass) {
        addClass([wrapper], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
      }
      this.tileRipple = rippleEffect(this.container, {
        selector: "." + TILE
      });
      this.ctrlBtnRipple = rippleEffect(this.container, {
        selector: ".e-btn"
      });
    };
    ColorPicker2.prototype.getWrapper = function() {
      return this.element.parentElement;
    };
    ColorPicker2.prototype.createWidget = function() {
      if (this.mode === "Palette") {
        this.createPalette();
        if (!this.inline) {
          this.firstPaletteFocus();
        }
      } else {
        this.createPicker();
        if (!this.inline) {
          this.getDragHandler().focus();
        }
      }
      this.isRgb = true;
      this.createInput();
      this.createCtrlBtn();
      if (!this.disabled) {
        this.wireEvents();
      }
      if (this.inline && this.disabled) {
        this.toggleDisabled(true);
      }
      if (Browser.isDevice) {
        this.refreshPopupPos();
      }
    };
    ColorPicker2.prototype.createSplitBtn = function() {
      var _this = this;
      var splitButton = this.createElement("button", {
        className: "e-split-colorpicker"
      });
      this.getWrapper().appendChild(splitButton);
      this.splitBtn = new SplitButton({
        iconCss: "e-selected-color",
        target: this.container,
        disabled: this.disabled,
        enableRtl: this.enableRtl,
        createPopupOnClick: this.createPopupOnClick,
        open: this.onOpen.bind(this),
        click: function() {
          var ev = new MouseEvent("click", {
            bubbles: true,
            cancelable: false
          });
          _this.trigger("change", {
            currentValue: {
              hex: _this.value.slice(0, 7),
              rgba: _this.convertToRgbString(_this.hexToRgb(_this.value))
            },
            previousValue: {
              hex: null,
              rgba: null
            },
            value: _this.value,
            event: ev
          });
        }
      });
      this.splitBtn.createElement = this.createElement;
      this.splitBtn.appendTo(splitButton);
      this.splitBtn.element.setAttribute("aria-label", "colorpicker");
      var preview = this.createElement("span", {
        className: SPLITPREVIEW
      });
      select(".e-selected-color", splitButton).appendChild(preview);
      preview.style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));
      var popupEle = this.getPopupEle();
      addClass([popupEle], "e-colorpicker-popup");
      if (this.cssClass) {
        addClass([popupEle], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
      }
      if (Browser.isDevice && !this.createPopupOnClick) {
        var popupInst = this.getPopupInst();
        popupInst.relateTo = document.body;
        popupInst.position = {
          X: "center",
          Y: "center"
        };
        popupInst.targetType = "container";
        popupInst.collision = {
          X: "fit",
          Y: "fit"
        };
        popupInst.offsetY = 4;
        popupEle.style.zIndex = getZindexPartial(this.splitBtn.element).toString();
      }
      this.bindCallBackEvent();
    };
    ColorPicker2.prototype.onOpen = function() {
      this.trigger("open", {
        element: this.container
      });
      if (!Browser.isDevice) {
        var popupInst = this.getPopupInst();
        var collision = isCollide(popupInst.element);
        if (collision.length > 0) {
          popupInst.collision = {
            X: "flip",
            Y: "fit"
          };
          popupInst.position = {
            X: "right",
            Y: "bottom"
          };
          popupInst.targetType = "container";
        }
      }
    };
    ColorPicker2.prototype.getPopupInst = function() {
      return getInstance(this.getPopupEle(), Popup);
    };
    ColorPicker2.prototype.bindCallBackEvent = function() {
      var _this = this;
      this.splitBtn.beforeOpen = function(args) {
        var callBackPromise = new Deferred2();
        _this.trigger("beforeOpen", args, function(observeOpenArgs) {
          if (!observeOpenArgs.cancel) {
            var popupEle = _this.getPopupEle();
            popupEle.style.top = formatUnit(0 + pageYOffset);
            popupEle.style.left = formatUnit(0 + pageXOffset);
            popupEle.style.display = "block";
            _this.createWidget();
            popupEle.style.display = "";
            if (Browser.isDevice) {
              if (_this.createPopupOnClick) {
                var popupInst = _this.getPopupInst();
                popupInst.relateTo = document.body;
                popupInst.position = {
                  X: "center",
                  Y: "center"
                };
                popupInst.targetType = "container";
                popupInst.collision = {
                  X: "fit",
                  Y: "fit"
                };
                popupInst.offsetY = 4;
                popupEle.style.zIndex = getZindexPartial(_this.splitBtn.element).toString();
              }
              _this.modal = _this.createElement("div");
              _this.modal.className = "e-" + _this.getModuleName() + " e-modal";
              _this.modal.style.display = "none";
              document.body.insertBefore(_this.modal, popupEle);
              document.body.className += " e-colorpicker-overflow";
              _this.modal.style.display = "block";
              _this.modal.style.zIndex = (Number(popupEle.style.zIndex) - 1).toString();
            }
          }
          args.cancel = observeOpenArgs.cancel;
          callBackPromise.resolve(observeOpenArgs);
        });
        return callBackPromise;
      };
      this.splitBtn.beforeClose = function(args) {
        var callBackPromise = new Deferred2();
        if (!isNullOrUndefined(args.event)) {
          var beforeCloseArgs = {
            element: _this.container,
            event: args.event,
            cancel: false
          };
          _this.trigger("beforeClose", beforeCloseArgs, function(observedCloseArgs) {
            if (Browser.isDevice && args.event.target === _this.modal) {
              observedCloseArgs.cancel = true;
            }
            if (!observedCloseArgs.cancel) {
              _this.onPopupClose();
              if (args.event.type === "keydown" && args.event.keyCode === 27) {
                _this.splitBtn.element.focus();
              }
            }
            args.cancel = observedCloseArgs.cancel;
            callBackPromise.resolve(observedCloseArgs);
          });
        } else {
          callBackPromise.resolve(args);
        }
        return callBackPromise;
      };
    };
    ColorPicker2.prototype.onPopupClose = function() {
      this.unWireEvents();
      this.destroyOtherComp();
      this.container.style.width = "";
      select("." + SPLITPREVIEW, this.splitBtn.element).style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));
      this.container.innerHTML = "";
      removeClass([this.container], [PICKERCONTENT, PALETTECONTENT]);
      if (Browser.isDevice && this.modal) {
        removeClass([document.body], "e-colorpicker-overflow");
        this.modal.style.display = "none";
        this.modal.outerHTML = "";
        this.modal = null;
      }
    };
    ColorPicker2.prototype.createPalette = function() {
      classList(this.container, [PALETTECONTENT], [PICKERCONTENT]);
      if (this.presetColors) {
        var paletteGroup = this.createElement("div", {
          className: "e-custom-palette"
        });
        this.appendElement(paletteGroup);
        var keys = Object.keys(this.presetColors);
        if (keys.length === 1) {
          this.appendPalette(this.presetColors[keys[0]], keys[0], paletteGroup);
        } else {
          for (var i = 0, len = keys.length; i < len; i++) {
            this.appendPalette(this.presetColors[keys[i]], keys[i], paletteGroup);
          }
        }
        if (selectAll(".e-row", paletteGroup).length > 10) {
          addClass([paletteGroup], "e-palette-group");
        }
      } else {
        this.appendPalette(presets.default, "default");
      }
      if (this.mode === "Palette" && !this.modeSwitcher && this.noColor) {
        this.setNoColor();
      }
      if (this.showRecentColors && this.recentColors && this.recentColors.length > 0) {
        this.renderRecentColor();
      }
      var width = parseInt(getComputedStyle(this.container).borderBottomWidth, 10);
      this.container.style.width = formatUnit(this.container.children[0].offsetWidth + width + width);
      this.rgb = this.hexToRgb(this.roundValue(this.value));
      this.hsv = this.rgbToHsv.apply(this, this.rgb);
    };
    ColorPicker2.prototype.renderRecentColor = function() {
      var _this = this;
      var recentClrWpr = this.container.querySelector(".e-clr-pal-rec-wpr");
      if (recentClrWpr) {
        detach(recentClrWpr);
      }
      var recentColorWrapper = this.createElement("div", {
        className: "e-clr-pal-rec-wpr"
      });
      var refEle = this.container.querySelector(".e-switch-ctrl-btn");
      if (refEle) {
        this.container.insertBefore(recentColorWrapper, refEle);
      } else {
        this.container.appendChild(recentColorWrapper);
      }
      var recentClrSpan = this.createElement("label", {
        className: "e-recent-clr-span"
      });
      recentClrSpan.textContent = this.l10n.getConstant("RecentColors");
      recentColorWrapper.appendChild(recentClrSpan);
      if (this.recentColors.length > 0) {
        this.recentColors = this.recentColors.filter(function(item, index) {
          return _this.recentColors.indexOf(item) === index;
        });
        while (this.recentColors.length > 10) {
          this.recentColors.pop();
        }
        this.appendPalette(this.recentColors, "recent-color", recentColorWrapper);
      }
    };
    ColorPicker2.prototype.firstPaletteFocus = function() {
      if (!select("." + SELECT, this.container.children[0])) {
        selectAll("." + PALETTES, this.container)[0].focus();
      }
    };
    ColorPicker2.prototype.appendPalette = function(colors, key, refEle) {
      var palette = this.createElement("div", {
        className: PALETTES,
        attrs: {
          "tabindex": "0",
          "role": "grid"
        }
      });
      if (key === "recent-color") {
        palette.classList.add("e-recent-palette");
      }
      if (refEle) {
        refEle.appendChild(palette);
      } else {
        this.appendElement(palette);
      }
      var row;
      var tile;
      var roundedColor;
      for (var i = 0, len = colors.length; i < len; i++) {
        if (i === 0 || i % this.columns === 0) {
          row = this.createElement("div", {
            className: "e-row",
            attrs: {
              "role": "row"
            }
          });
          palette.appendChild(row);
        }
        roundedColor = this.roundValue(colors[i]).toLowerCase();
        tile = this.createElement("span", {
          className: TILE,
          attrs: {
            "role": "gridcell",
            "aria-label": roundedColor,
            "aria-selected": "false"
          }
        });
        this.trigger("beforeTileRender", {
          element: tile,
          presetName: key,
          value: colors[i]
        });
        row.appendChild(tile);
        if (this.value === roundedColor && key !== "recent-color") {
          this.addTileSelection(tile);
          palette.focus();
        }
        tile.style.backgroundColor = this.convertToRgbString(this.hexToRgb(roundedColor));
      }
    };
    ColorPicker2.prototype.setNoColor = function() {
      var noColorEle = this.container.querySelector(".e-row").children[0];
      noColorEle.classList.add(NOCOLOR);
      if (!this.value) {
        noColorEle.classList.add(SELECT);
        closest(noColorEle, "." + PALETTES).focus();
      }
      ["aria-selected", "aria-label"].forEach(function(attr) {
        noColorEle.removeAttribute(attr);
      });
      noColorEle.style.backgroundColor = "";
    };
    ColorPicker2.prototype.appendElement = function(ele, insertPos) {
      if (insertPos === void 0) {
        insertPos = 0;
      }
      var refEle = this.container.children[insertPos];
      if (refEle) {
        this.container.insertBefore(ele, refEle);
      } else {
        this.container.appendChild(ele);
      }
    };
    ColorPicker2.prototype.addTileSelection = function(ele) {
      if (ele) {
        ele.classList.add(SELECT);
        ele.setAttribute("aria-selected", "true");
      }
    };
    ColorPicker2.prototype.createPicker = function() {
      classList(this.container, [PICKERCONTENT], [PALETTECONTENT]);
      var hsvContainer = this.createElement("div", {
        className: HSVCONTAINER
      });
      this.appendElement(hsvContainer);
      hsvContainer.appendChild(this.createElement("div", {
        className: HSVAREA
      }));
      var dragHandler = this.createElement("span", {
        className: HANDLER,
        attrs: {
          "tabindex": "0"
        }
      });
      hsvContainer.appendChild(dragHandler);
      if (this.value === null || this.value === "") {
        this.value = "#008000ff";
      }
      this.rgb = this.hexToRgb(this.value);
      this.hsv = this.rgbToHsv.apply(this, this.rgb);
      this.setHsvContainerBg();
      this.setHandlerPosition();
      this.createSlider();
      this.createDragTooltip();
    };
    ColorPicker2.prototype.setHsvContainerBg = function(h) {
      if (h === void 0) {
        h = this.hsv[0];
      }
      this.getHsvContainer().style.backgroundColor = this.convertToRgbString(this.hsvToRgb(h, 100, 100, 1));
    };
    ColorPicker2.prototype.getHsvContainer = function() {
      return select("." + HSVCONTAINER, this.container);
    };
    ColorPicker2.prototype.setHandlerPosition = function() {
      var dragHandler = this.getDragHandler();
      var hsvArea = select("." + HSVAREA, this.container);
      if (this.enableRtl) {
        dragHandler.style.left = formatUnit((hsvArea.offsetWidth - dragHandler.offsetWidth / 2.5) * Math.abs(100 - this.hsv[1]) / 100);
      } else {
        dragHandler.style.left = formatUnit((hsvArea.offsetWidth - dragHandler.offsetWidth / 2.5) * this.hsv[1] / 100);
      }
      dragHandler.style.top = formatUnit((hsvArea.offsetHeight - dragHandler.offsetHeight / 2.5) * (100 - this.hsv[2]) / 100);
    };
    ColorPicker2.prototype.createSlider = function() {
      var sliderPreviewWrapper = this.createElement("div", {
        className: "e-slider-preview"
      });
      this.appendElement(sliderPreviewWrapper, 1);
      this.createPreview(sliderPreviewWrapper);
      var sliderWrapper = this.createElement("div", {
        className: "e-colorpicker-slider"
      });
      sliderPreviewWrapper.insertBefore(sliderWrapper, sliderPreviewWrapper.children[0]);
      var slider = this.createElement("div", {
        className: "e-hue-slider"
      });
      sliderWrapper.appendChild(slider);
      this.hueSlider = new Slider({
        value: this.hsv[0],
        min: 0,
        max: 359,
        enableRtl: this.enableRtl,
        enabled: !this.disabled,
        change: this.hueChange.bind(this)
      });
      this.hueSlider.createElement = this.createElement;
      this.hueSlider.appendTo(slider);
      if (this.enableOpacity) {
        slider = this.createElement("div", {
          className: "e-opacity-slider"
        });
        sliderWrapper.appendChild(slider);
        this.createOpacitySlider(slider);
      }
    };
    ColorPicker2.prototype.createOpacitySlider = function(slider) {
      this.opacitySlider = new Slider({
        value: this.rgb[3] * 100,
        min: 0,
        max: 100,
        enableRtl: this.enableRtl,
        enabled: !this.disabled,
        change: this.opacityChange.bind(this)
      });
      this.opacitySlider.createElement = this.createElement;
      this.opacitySlider.appendTo(slider);
      var opacityBgTrack = this.createElement("div", {
        className: "e-opacity-empty-track"
      });
      slider.appendChild(opacityBgTrack);
      this.updateOpacitySliderBg();
    };
    ColorPicker2.prototype.updateOpacitySliderBg = function() {
      var direction = this.enableRtl ? "to left" : "to right";
      var opacityEle = select(".e-opacity-empty-track", this.opacitySlider.element);
      if (opacityEle) {
        opacityEle.style.background = "linear-gradient(" + direction + ", rgba(" + this.rgb.slice(0, 3) + ", 0) 0%, " + this.convertToRgbString(this.rgb.slice(0, 3)) + " 100%)";
      }
    };
    ColorPicker2.prototype.hueChange = function(args) {
      this.hsv[0] = args.value;
      this.setHsvContainerBg();
      this.convertToOtherFormat();
    };
    ColorPicker2.prototype.opacityChange = function(args) {
      var value = args.value;
      var pValue = this.rgbToHex(this.rgb);
      this.hsv[3] = value / 100;
      this.rgb[3] = value / 100;
      var cValue = this.rgbToHex(this.rgb);
      this.updateOpacityInput(value);
      var rgb = this.convertToRgbString(this.rgb);
      this.updatePreview(rgb);
      this.triggerEvent(cValue, pValue, rgb);
    };
    ColorPicker2.prototype.updateOpacityInput = function(value) {
      if (this.enableOpacity && !this.getWrapper().classList.contains(HIDEVALUE)) {
        var opacityTextBoxInst = getInstance(select("." + OPACITY, this.container), NumericTextBox);
        opacityTextBoxInst.value = value;
        opacityTextBoxInst.dataBind();
      }
    };
    ColorPicker2.prototype.createPreview = function(parentEle) {
      var previewContainer = this.createElement("div", {
        className: PREVIEW
      });
      parentEle.appendChild(previewContainer);
      var preview = this.createElement("span", {
        className: "e-preview " + CURRENT
      });
      previewContainer.appendChild(preview);
      var colorValue = this.convertToRgbString(this.rgb);
      preview.style.backgroundColor = colorValue;
      preview = this.createElement("span", {
        className: "e-preview " + PREVIOUS
      });
      previewContainer.appendChild(preview);
      preview.style.backgroundColor = colorValue;
    };
    ColorPicker2.prototype.isPicker = function() {
      return !this.container.classList.contains(PALETTECONTENT);
    };
    ColorPicker2.prototype.getPopupEle = function() {
      return this.container.parentElement;
    };
    ColorPicker2.prototype.createNumericInput = function(element2, value, label, max) {
      var _this = this;
      var numericInput = new NumericTextBox({
        value,
        placeholder: label,
        min: 0,
        max,
        format: "###.##",
        showSpinButton: false,
        floatLabelType: "Always",
        enableRtl: this.enableRtl,
        enabled: !this.disabled,
        readonly: this.isPicker() ? false : true,
        change: function(args) {
          if (args.event) {
            _this.inputHandler(args.event);
          }
        }
      });
      numericInput.createElement = this.createElement;
      numericInput.appendTo(element2);
    };
    ColorPicker2.prototype.createInput = function() {
      var isPicker = this.isPicker();
      var wrapper = this.getWrapper();
      if (isPicker && !wrapper.classList.contains(HIDEVALUE) || !isPicker && wrapper.classList.contains(SHOWVALUE)) {
        var inputWrap = this.createElement("div", {
          className: INPUTWRAPPER
        });
        if (isPicker) {
          this.appendElement(inputWrap, 2);
        } else {
          this.appendElement(inputWrap, 1);
        }
        var container = this.createElement("div", {
          className: "e-input-container"
        });
        inputWrap.appendChild(container);
        if (!wrapper.classList.contains(HIDEVALUESWITCH)) {
          this.appendValueSwitchBtn(inputWrap);
        }
        if (!wrapper.classList.contains(HIDEHEX)) {
          var hexInput = this.createElement("input", {
            className: HEX,
            attrs: {
              "maxlength": "7",
              "spellcheck": "false",
              "aria-label": "HEX"
            }
          });
          container.appendChild(hexInput);
          Input.createInput({
            element: hexInput,
            floatLabelType: "Always",
            properties: {
              placeholder: "HEX",
              enableRtl: this.enableRtl,
              enabled: !this.disabled,
              readonly: this.isPicker() ? false : true
            }
          }, this.createElement);
          Input.setValue(this.value.slice(0, 7), hexInput);
          hexInput.addEventListener("input", this.inputHandler.bind(this));
        }
        if (!wrapper.classList.contains(HIDERGBA)) {
          var label = void 0;
          var value = void 0;
          if (this.isRgb) {
            label = "RGB";
            value = this.rgb;
          } else {
            label = "HSV";
            value = this.hsv;
          }
          var clsName = ["rh", "gs", "bv"];
          for (var i = 0; i < 3; i++) {
            this.createNumericInput(container.appendChild(this.createElement("input", {
              className: "e-" + clsName[i] + "-value"
            })), value[i], label[i], 255);
          }
          if (this.enableOpacity) {
            this.appendOpacityValue(container);
          }
        }
      }
    };
    ColorPicker2.prototype.appendOpacityValue = function(container) {
      this.createNumericInput(container.appendChild(this.createElement("input", {
        className: OPACITY
      })), this.rgb[3] * 100, "A", 100);
    };
    ColorPicker2.prototype.appendValueSwitchBtn = function(targetEle) {
      var valueSwitchBtn = this.createElement("button", {
        className: "e-icons e-css e-btn e-flat e-icon-btn " + FORMATSWITCH,
        attrs: {
          "title": "Toggle format"
        }
      });
      targetEle.appendChild(valueSwitchBtn);
      if (this.isPicker() && !this.getWrapper().classList.contains(HIDERGBA)) {
        valueSwitchBtn.addEventListener("click", this.formatSwitchHandler.bind(this));
      }
    };
    ColorPicker2.prototype.createCtrlBtn = function() {
      if (this.modeSwitcher || this.showButtons) {
        this.l10n.setLocale(this.locale);
        var btnWrapper = this.createElement("div", {
          className: CTRLSWITCH
        });
        this.container.appendChild(btnWrapper);
        if (this.showButtons) {
          var controlBtnWrapper = this.createElement("div", {
            className: CTRLBTN
          });
          btnWrapper.appendChild(controlBtnWrapper);
          var apply = this.l10n.getConstant("Apply");
          controlBtnWrapper.appendChild(this.createElement("button", {
            innerHTML: apply,
            className: "e-btn e-css e-flat e-primary e-small " + APPLY,
            attrs: {
              "title": apply
            }
          }));
          var cancel = this.l10n.getConstant("Cancel");
          controlBtnWrapper.appendChild(this.createElement("button", {
            innerHTML: cancel,
            className: "e-btn e-css e-flat e-small " + CANCEL,
            attrs: {
              "title": cancel
            }
          }));
        }
        if (this.modeSwitcher) {
          this.appendModeSwitchBtn();
        }
      }
    };
    ColorPicker2.prototype.appendModeSwitchBtn = function() {
      var modeSwitcher = this.createElement("button", {
        className: "e-icons e-btn e-flat e-icon-btn " + MODESWITCH,
        attrs: {
          title: this.l10n.getConstant("ModeSwitcher")
        }
      });
      select("." + CTRLSWITCH, this.container).insertBefore(modeSwitcher, select("." + CTRLBTN, this.container));
    };
    ColorPicker2.prototype.createDragTooltip = function() {
      var _this = this;
      var tooltip = new Tooltip({
        opensOn: "Custom",
        showTipPointer: false,
        cssClass: "e-color-picker-tooltip",
        htmlAttributes: {
          title: "tooltip"
        },
        beforeOpen: function(args) {
          _this.tooltipEle = args.element;
        },
        animation: {
          open: {
            effect: "None"
          },
          close: {
            effect: "None"
          }
        }
      });
      tooltip.createElement = this.createElement;
      tooltip.appendTo(this.container);
      tooltip.open(this.container);
      this.tooltipEle.style.zIndex = getZindexPartial(this.tooltipEle).toString();
      this.tooltipEle.setAttribute("aria-label", "colorpicker-tooltip");
      select(".e-tip-content", this.tooltipEle).appendChild(this.createElement("div", {
        className: "e-tip-transparent"
      }));
    };
    ColorPicker2.prototype.getTooltipInst = function() {
      return getInstance(this.container, Tooltip);
    };
    ColorPicker2.prototype.setTooltipOffset = function(value) {
      this.getTooltipInst().offsetY = value;
    };
    ColorPicker2.prototype.toggleDisabled = function(enable) {
      if (enable) {
        this.getWrapper().classList.add(DISABLED4);
      } else {
        this.getWrapper().classList.remove(DISABLED4);
      }
      if (this.showButtons) {
        [].slice.call(selectAll(".e-btn", this.container)).forEach(function(ele) {
          if (enable) {
            attributes(ele, {
              "disabled": ""
            });
          } else {
            ele.removeAttribute("disabled");
          }
        });
      }
    };
    ColorPicker2.prototype.convertToRgbString = function(rgb) {
      return rgb.length ? rgb.length === 4 ? "rgba(" + rgb.join() + ")" : "rgb(" + rgb.join() + ")" : "";
    };
    ColorPicker2.prototype.convertToHsvString = function(hsv) {
      return hsv.length === 4 ? "hsva(" + hsv.join() + ")" : "hsv(" + hsv.join() + ")";
    };
    ColorPicker2.prototype.updateHsv = function() {
      this.hsv[1] = this.hsv[1] > 100 ? 100 : this.hsv[1];
      this.hsv[2] = this.hsv[2] > 100 ? 100 : this.hsv[2];
      this.setHandlerPosition();
    };
    ColorPicker2.prototype.convertToOtherFormat = function(isKey, e) {
      if (isKey === void 0) {
        isKey = false;
      }
      var pValue = this.rgbToHex(this.rgb);
      this.rgb = this.hsvToRgb.apply(this, this.hsv);
      var cValue = this.rgbToHex(this.rgb);
      var rgba = this.convertToRgbString(this.rgb);
      this.updatePreview(rgba);
      this.updateInput(cValue);
      this.triggerEvent(cValue, pValue, rgba, isKey, e);
    };
    ColorPicker2.prototype.updateInput = function(value) {
      var wrapper = this.getWrapper();
      if (!wrapper.classList.contains(HIDEVALUE)) {
        if (!wrapper.classList.contains(HIDEHEX)) {
          Input.setValue(value.substr(0, 7), select("." + HEX, this.container));
        }
        if (!wrapper.classList.contains(HIDERGBA)) {
          if (this.isRgb) {
            this.updateValue(this.rgb, false);
          } else {
            this.updateValue(this.hsv, false);
          }
        }
      }
    };
    ColorPicker2.prototype.updatePreview = function(value) {
      if (this.enableOpacity) {
        this.updateOpacitySliderBg();
      }
      select(".e-tip-transparent", this.tooltipEle).style.backgroundColor = value;
      select("." + PREVIEW + " ." + CURRENT, this.container).style.backgroundColor = value;
      select("." + PREVIEW + " ." + PREVIOUS, this.container).style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));
    };
    ColorPicker2.prototype.getDragHandler = function() {
      return select("." + HANDLER, this.container);
    };
    ColorPicker2.prototype.removeTileSelection = function() {
      var selectedEle = [].slice.call(selectAll("." + SELECT, this.container));
      selectedEle.forEach(function(ele) {
        ele.classList.remove(SELECT);
        ele.setAttribute("aria-selected", "false");
      });
    };
    ColorPicker2.prototype.convertRgbToNumberArray = function(value) {
      return value.slice(value.indexOf("(") + 1, value.indexOf(")")).split(",").map(function(n, i) {
        return i !== 3 ? parseInt(n, 10) : parseFloat(n);
      });
    };
    ColorPicker2.prototype.getValue = function(value, type) {
      if (!value) {
        value = this.value;
      }
      type = !type ? "hex" : type.toLowerCase();
      if (value[0] === "r") {
        var cValue = this.convertRgbToNumberArray(value);
        if (type === "hex" || type === "hexa") {
          var hex = this.rgbToHex(cValue);
          return type === "hex" ? hex.slice(0, 7) : hex;
        } else {
          if (type === "hsv") {
            return this.convertToHsvString(this.rgbToHsv.apply(this, cValue.slice(0, 3)));
          } else {
            if (type === "hsva") {
              return this.convertToHsvString(this.rgbToHsv.apply(this, cValue));
            } else {
              return "null";
            }
          }
        }
      } else {
        if (value[0] === "h") {
          var cValue = this.hsvToRgb.apply(this, this.convertRgbToNumberArray(value));
          if (type === "rgba") {
            return this.convertToRgbString(cValue);
          } else {
            if (type === "hex" || type === "hexa") {
              var hex = this.rgbToHex(cValue);
              return type === "hex" ? hex.slice(0, 7) : hex;
            } else {
              if (type === "rgb") {
                return this.convertToRgbString(cValue.slice(0, 3));
              } else {
                return "null";
              }
            }
          }
        } else {
          value = this.roundValue(value);
          var rgb = this.hexToRgb(value);
          if (type === "rgb" || type === "hsv") {
            rgb = rgb.slice(0, 3);
          }
          if (type === "rgba" || type === "rgb") {
            return this.convertToRgbString(rgb);
          } else {
            if (type === "hsva" || type === "hsv") {
              return this.convertToHsvString(this.rgbToHsv.apply(this, rgb));
            } else {
              if (type === "hex") {
                return value.slice(0, 7);
              } else {
                if (type === "a") {
                  return rgb[3].toString();
                } else {
                  return "null";
                }
              }
            }
          }
        }
      }
    };
    ColorPicker2.prototype.toggle = function() {
      if (this.container.parentElement.classList.contains("e-popup-close")) {
        this.splitBtn.toggle();
      } else {
        this.closePopup(null);
      }
    };
    ColorPicker2.prototype.getModuleName = function() {
      return "colorpicker";
    };
    ColorPicker2.prototype.getPersistData = function() {
      return this.addOnPersist(["value"]);
    };
    ColorPicker2.prototype.wireEvents = function() {
      if (this.isPicker()) {
        var dragHandler = this.getDragHandler();
        EventHandler.add(dragHandler, "keydown", this.pickerKeyDown, this);
        var ctrlBtn = select("." + CTRLBTN, this.container);
        if (ctrlBtn) {
          EventHandler.add(ctrlBtn, "keydown", this.ctrlBtnKeyDown, this);
        }
        EventHandler.add(this.getHsvContainer(), "mousedown touchstart", this.handlerDown, this);
        if (this.modeSwitcher || this.showButtons) {
          this.addCtrlSwitchEvent();
        }
        EventHandler.add(select("." + PREVIOUS, this.container), "click", this.previewHandler, this);
      } else {
        EventHandler.add(this.container, "click", this.paletteClickHandler, this);
        EventHandler.add(this.container, "keydown", this.paletteKeyDown, this);
      }
    };
    ColorPicker2.prototype.formResetHandler = function() {
      this.value = this.initialInputValue;
      attributes(this.element, {
        "value": this.initialInputValue
      });
    };
    ColorPicker2.prototype.addCtrlSwitchEvent = function() {
      var ctrlSwitchBtn = select("." + CTRLSWITCH, this.container);
      if (ctrlSwitchBtn) {
        EventHandler.add(ctrlSwitchBtn, "click", this.btnClickHandler, this);
      }
    };
    ColorPicker2.prototype.ctrlBtnKeyDown = function(e) {
      if (e.keyCode === 13) {
        var applyBtn = select("." + APPLY, this.container);
        if (applyBtn) {
          var cValue = this.rgbToHex(this.rgb);
          this.triggerChangeEvent(cValue);
        }
        this.splitBtn.element.focus();
      }
    };
    ColorPicker2.prototype.pickerKeyDown = function(e) {
      switch (e.keyCode) {
        case 39:
          this.handlerDragPosition(1, this.enableRtl ? -1 : 1, e);
          break;
        case 37:
          this.handlerDragPosition(1, this.enableRtl ? 1 : -1, e);
          break;
        case 38:
          this.handlerDragPosition(2, 1, e);
          break;
        case 40:
          this.handlerDragPosition(2, -1, e);
          break;
        case 13: {
          e.preventDefault();
          var cValue = this.rgbToHex(this.rgb);
          this.enterKeyHandler(cValue);
        }
      }
    };
    ColorPicker2.prototype.enterKeyHandler = function(value) {
      this.triggerChangeEvent(value);
      if (!this.inline) {
        this.splitBtn.element.focus();
      }
    };
    ColorPicker2.prototype.closePopup = function(e) {
      var _this = this;
      var beforeCloseArgs = {
        element: this.container,
        event: e,
        cancel: false
      };
      this.trigger("beforeClose", beforeCloseArgs, function(observedcloseArgs) {
        if (!observedcloseArgs.cancel) {
          _this.splitBtn.toggle();
          _this.onPopupClose();
        }
      });
    };
    ColorPicker2.prototype.triggerChangeEvent = function(value, e) {
      var hex = value.slice(0, 7);
      this.trigger("change", {
        currentValue: {
          hex,
          rgba: this.convertToRgbString(this.rgb)
        },
        event: e,
        previousValue: {
          hex: this.value.slice(0, 7),
          rgba: this.convertToRgbString(this.hexToRgb(this.value))
        },
        value: this.enableOpacity ? value : hex
      });
      if (this.showRecentColors) {
        this.recentColors.unshift(hex);
        if (this.inline) {
          this.renderRecentColor();
        }
      }
      if (this.enableOpacity) {
        this.setProperties({
          "value": value
        }, true);
      } else {
        this.setProperties({
          "value": hex
        }, true);
      }
      this.element.value = hex ? hex : "#000000";
    };
    ColorPicker2.prototype.handlerDragPosition = function(prob, value, e) {
      e.preventDefault();
      this.hsv[prob] += value * (e.ctrlKey ? 1 : 3);
      if (this.hsv[prob] < 0) {
        this.hsv[prob] = 0;
      }
      this.updateHsv();
      this.convertToOtherFormat(true, e);
    };
    ColorPicker2.prototype.handlerDown = function(e) {
      e.preventDefault();
      if (e.type === "mousedown") {
        this.clientX = Math.abs(e.pageX - pageXOffset);
        this.clientY = Math.abs(e.pageY - pageYOffset);
        this.setTooltipOffset(8);
      } else {
        this.clientX = Math.abs(e.changedTouches[0].pageX - pageXOffset);
        this.clientY = Math.abs(e.changedTouches[0].pageY - pageYOffset);
        this.setTooltipOffset(-8);
      }
      this.setHsv(this.clientX, this.clientY);
      this.getDragHandler().style.transition = "left .4s cubic-bezier(.25, .8, .25, 1), top .4s cubic-bezier(.25, .8, .25, 1)";
      this.updateHsv();
      this.convertToOtherFormat(false, e);
      this.getDragHandler().focus();
      EventHandler.add(document, "mousemove touchmove", this.handlerMove, this);
      EventHandler.add(document, "mouseup touchend", this.handlerEnd, this);
    };
    ColorPicker2.prototype.handlerMove = function(e) {
      if (e.type !== "touchmove") {
        e.preventDefault();
      }
      var x;
      var y;
      if (e.type === "mousemove") {
        x = Math.abs(e.pageX - pageXOffset);
        y = Math.abs(e.pageY - pageYOffset);
      } else {
        x = Math.abs(e.changedTouches[0].pageX - pageXOffset);
        y = Math.abs(e.changedTouches[0].pageY - pageYOffset);
      }
      this.setHsv(x, y);
      var dragHandler = this.getDragHandler();
      this.updateHsv();
      this.convertToOtherFormat(false, e);
      this.getTooltipInst().refresh(dragHandler);
      if (!this.tooltipEle.style.transform) {
        if (Math.abs(this.clientX - x) > 8 || Math.abs(this.clientY - y) > 8) {
          select("." + HSVAREA, this.container).style.cursor = "pointer";
          dragHandler.style.transition = "none";
          if (!this.inline) {
            this.tooltipEle.style.zIndex = (parseInt(this.getPopupEle().style.zIndex, 10) + 1).toString();
          }
          this.tooltipEle.style.transform = "rotate(45deg)";
          dragHandler.classList.add("e-hide-handler");
        }
      }
    };
    ColorPicker2.prototype.setHsv = function(clientX, clientY) {
      var ele = select("." + HSVAREA, this.container);
      var position = ele.getBoundingClientRect();
      if (this.enableRtl) {
        clientX = clientX > position.right ? 0 : Math.abs(clientX - position.right);
      } else {
        clientX = clientX > position.left ? Math.abs(clientX - position.left) : 0;
      }
      clientY = clientY > position.top ? Math.abs(clientY - position.top) : 0;
      this.hsv[2] = Math.round(Number(100 * (ele.offsetHeight - Math.max(0, Math.min(ele.offsetHeight, clientY - ele.offsetTop))) / ele.offsetHeight) * 10) / 10;
      this.hsv[1] = Math.round(Number(100 * Math.max(0, Math.min(ele.offsetWidth, clientX - ele.offsetLeft)) / ele.offsetWidth) * 10) / 10;
    };
    ColorPicker2.prototype.handlerEnd = function(e) {
      if (e.type !== "touchend") {
        e.preventDefault();
      }
      EventHandler.remove(document, "mousemove touchmove", this.handlerMove);
      EventHandler.remove(document, "mouseup touchend", this.handlerEnd);
      var dragHandler = this.getDragHandler();
      select("." + HSVAREA, this.container).style.cursor = "";
      if (this.tooltipEle.style.transform) {
        this.tooltipEle.style.transform = "";
        dragHandler.classList.remove("e-hide-handler");
      }
      if (!this.inline && !this.showButtons) {
        this.closePopup(e);
      }
    };
    ColorPicker2.prototype.btnClickHandler = function(e) {
      var target = e.target;
      if (closest(target, "." + MODESWITCH)) {
        e.stopPropagation();
        this.switchToPalette();
      } else {
        if (target.classList.contains(APPLY) || target.classList.contains(CANCEL)) {
          this.ctrlBtnClick(target, e);
        }
      }
    };
    ColorPicker2.prototype.switchToPalette = function() {
      this.trigger("beforeModeSwitch", {
        element: this.container,
        mode: "Palette"
      });
      this.unWireEvents();
      this.destroyOtherComp();
      detach(select(".e-slider-preview", this.container));
      if (!this.getWrapper().classList.contains(HIDEVALUE)) {
        remove(select("." + INPUTWRAPPER, this.container));
      }
      detach(this.getHsvContainer());
      this.createPalette();
      this.firstPaletteFocus();
      this.createInput();
      this.refreshPopupPos();
      if (this.element.parentElement && this.element.parentElement.parentElement && this.element.parentElement.parentElement.classList.contains("e-ie-ddb-popup")) {
        this.refreshImageEditorPopupPos();
      }
      this.wireEvents();
      this.trigger("onModeSwitch", {
        element: this.container,
        mode: "Palette"
      });
    };
    ColorPicker2.prototype.refreshImageEditorPopupPos = function() {
      if (Browser.isDevice) {
        var popupEle = this.getPopupEle();
        popupEle.style.left = formatUnit(0 + pageXOffset);
        popupEle.style.top = formatUnit(0 + pageYOffset);
        var btnElem = document.querySelector("#" + this.element.parentElement.parentElement.id.split("-popup")[0]);
        if (btnElem) {
          popupEle.parentElement.ej2_instances[0].refreshPosition(btnElem);
        }
      }
    };
    ColorPicker2.prototype.refreshPopupPos = function() {
      if (!this.inline) {
        var popupEle = this.getPopupEle();
        popupEle.style.left = formatUnit(0 + pageXOffset);
        popupEle.style.top = formatUnit(0 + pageYOffset);
        this.getPopupInst().refreshPosition(this.splitBtn.element.parentElement);
      }
    };
    ColorPicker2.prototype.formatSwitchHandler = function() {
      if (this.isRgb) {
        this.updateValue(this.hsv, true, 3, [360, 100, 100]);
        this.isRgb = false;
      } else {
        this.updateValue(this.rgb, true, 2);
        this.isRgb = true;
      }
    };
    ColorPicker2.prototype.updateValue = function(value, format, idx, max) {
      var clsName = ["e-rh-value", "e-gs-value", "e-bv-value"];
      var inst;
      for (var i = 0, len = clsName.length; i < len; i++) {
        inst = getInstance(select("." + clsName[i], this.container), NumericTextBox);
        inst.value = Math.round(value[i]);
        if (format) {
          inst.placeholder = clsName[i].substr(idx, 1).toUpperCase();
          inst.max = max ? max[i] : 255;
        }
        inst.dataBind();
      }
    };
    ColorPicker2.prototype.previewHandler = function(e) {
      var target = e.target;
      var pValue = this.rgbToHex(this.rgb);
      this.rgb = this.convertRgbToNumberArray(target.style.backgroundColor);
      if (!this.rgb[3]) {
        this.rgb[3] = 1;
      }
      var cValue = this.rgbToHex(this.rgb);
      var hsv = this.rgbToHsv.apply(this, this.rgb);
      if (hsv[0] !== this.hsv[0]) {
        this.hueSlider.setProperties({
          "value": hsv[0]
        }, true);
        this.hueSlider.refresh();
      }
      this.setHsvContainerBg(hsv[0]);
      if (this.enableOpacity && hsv[3] !== this.hsv[3]) {
        this.opacitySlider.setProperties({
          "value": hsv[3] * 100
        }, true);
        this.opacitySlider.refresh();
        this.updateOpacitySliderBg();
      }
      this.hsv = hsv;
      this.setHandlerPosition();
      this.updateInput(cValue);
      select("." + PREVIEW + " ." + CURRENT, this.container).style.backgroundColor = this.convertToRgbString(this.rgb);
      this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb), false, e);
    };
    ColorPicker2.prototype.paletteClickHandler = function(e) {
      e.preventDefault();
      var target = e.target;
      if (target.classList.contains(TILE)) {
        this.removeTileSelection();
        this.addTileSelection(target);
        if (target.classList.contains(NOCOLOR)) {
          this.noColorTile();
        } else {
          var cValue = target.getAttribute("aria-label");
          var pValue = this.rgbToHex(this.rgb);
          this.rgb = this.hexToRgb(this.roundValue(cValue));
          this.hsv = this.rgbToHsv.apply(this, this.rgb);
          if (this.getWrapper().classList.contains(SHOWVALUE)) {
            this.updateInput(cValue);
          }
          this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb), false, e);
        }
        if (!this.inline && !this.showButtons) {
          this.closePopup(e);
        }
      } else {
        if (closest(target, "." + MODESWITCH)) {
          this.switchToPicker();
        } else {
          if (target.classList.contains(APPLY) || target.classList.contains(CANCEL)) {
            this.ctrlBtnClick(target, e);
          } else {
            if (this.getWrapper().classList.contains(SHOWVALUE) && closest(target, "." + FORMATSWITCH)) {
              this.formatSwitchHandler();
            }
          }
        }
      }
    };
    ColorPicker2.prototype.noColorTile = function(isKey) {
      if (isKey === void 0) {
        isKey = false;
      }
      var pValue = this.rgbToHex(this.rgb);
      this.rgb = [];
      this.hsv = [];
      this.triggerEvent("", pValue, "", isKey);
    };
    ColorPicker2.prototype.switchToPicker = function() {
      var wrapper = this.getWrapper();
      this.trigger("beforeModeSwitch", {
        element: this.container,
        mode: "Picker"
      });
      this.unWireEvents();
      [].slice.call(selectAll("." + PALETTES, this.container)).forEach(function(ele) {
        detach(ele);
      });
      if (this.container.querySelector(".e-clr-pal-rec-wpr")) {
        detach(this.container.querySelector(".e-clr-pal-rec-wpr"));
      }
      if (wrapper.classList.contains(SHOWVALUE)) {
        detach(select("." + INPUTWRAPPER, this.container));
      }
      this.container.style.width = "";
      var grpEle = select(".e-custom-palette", this.container);
      if (this.presetColors) {
        remove(grpEle);
      }
      this.createPicker();
      this.getDragHandler().focus();
      this.createInput();
      this.refreshPopupPos();
      if (this.element.parentElement && this.element.parentElement.parentElement && this.element.parentElement.parentElement.classList.contains("e-ie-ddb-popup")) {
        this.refreshImageEditorPopupPos();
      }
      this.wireEvents();
      this.trigger("onModeSwitch", {
        element: this.container,
        mode: "Picker"
      });
    };
    ColorPicker2.prototype.ctrlBtnClick = function(ele, e) {
      if (ele.classList.contains(APPLY)) {
        var cValue = this.rgbToHex(this.rgb);
        this.triggerChangeEvent(cValue, e);
      }
      if (!this.inline) {
        this.closePopup(e);
        this.splitBtn.element.focus();
      } else if (ele.classList.contains(CANCEL)) {
        var beforeCloseArgs = {
          element: this.container,
          event: e,
          cancel: false
        };
        this.trigger("beforeClose", beforeCloseArgs);
      }
    };
    ColorPicker2.prototype.paletteKeyDown = function(e) {
      var target = e.target;
      if (!target.classList.contains(PALETTES)) {
        return;
      }
      var selectedEle;
      var idx;
      var tiles = [].slice.call(selectAll("." + TILE, target));
      var prevSelectedEle = tiles.filter(function(tile) {
        return tile.classList.contains("e-selected");
      }).pop();
      switch (!e.altKey && e.keyCode) {
        case 39:
          e.preventDefault();
          selectedEle = prevSelectedEle ? tiles[this.tilePosition(tiles, prevSelectedEle, this.enableRtl ? -1 : 1)] : tiles[this.enableRtl ? tiles.length - 1 : 0];
          this.keySelectionChanges(selectedEle);
          break;
        case 37:
          e.preventDefault();
          selectedEle = prevSelectedEle ? tiles[this.tilePosition(tiles, prevSelectedEle, this.enableRtl ? 1 : -1)] : tiles[this.enableRtl ? 0 : tiles.length - 1];
          this.keySelectionChanges(selectedEle);
          break;
        case 38:
          e.preventDefault();
          idx = prevSelectedEle ? this.tilePosition(tiles, prevSelectedEle, -this.columns) : 0;
          selectedEle = tiles[idx] ? tiles[idx] : tiles[idx - this.columns];
          this.keySelectionChanges(selectedEle);
          break;
        case 40:
          e.preventDefault();
          idx = prevSelectedEle ? this.tilePosition(tiles, prevSelectedEle, this.columns) : tiles.length - 1;
          if (tiles[idx]) {
            selectedEle = tiles[idx];
          } else {
            idx %= tiles.length;
            idx += tiles[tiles.length - 1].parentElement.childElementCount;
            selectedEle = tiles[idx];
          }
          this.keySelectionChanges(selectedEle);
          break;
        case 13:
          e.preventDefault();
          if (prevSelectedEle) {
            var cValue = prevSelectedEle.getAttribute("aria-label");
            this.enterKeyHandler(cValue ? cValue : "");
          }
          break;
      }
    };
    ColorPicker2.prototype.keySelectionChanges = function(newEle) {
      this.removeTileSelection();
      this.addTileSelection(newEle);
      if (newEle.classList.contains(NOCOLOR)) {
        this.noColorTile(true);
      } else {
        var cValue = newEle.getAttribute("aria-label");
        var pValue = this.rgbToHex(this.rgb);
        this.rgb = this.hexToRgb(cValue);
        this.hsv = this.rgbToHsv.apply(this, this.rgb);
        if (this.getWrapper().classList.contains(SHOWVALUE)) {
          this.updateInput(cValue);
        }
        this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb), true);
      }
    };
    ColorPicker2.prototype.tilePosition = function(items, element2, cIdx) {
      items = Array.prototype.slice.call(items);
      var n = items.length;
      var emptyCount = this.columns - items[n - 1].parentElement.childElementCount;
      var idx = items.indexOf(element2);
      idx += cIdx;
      if (idx < 0) {
        idx += n + emptyCount;
      } else {
        idx %= n + emptyCount;
      }
      return idx;
    };
    ColorPicker2.prototype.inputHandler = function(e) {
      var target = e.target;
      if (!target.value.length) {
        return;
      }
      var hsv;
      var pValue;
      var label = select(".e-float-text", target.parentElement).textContent;
      switch (label) {
        case "HEX": {
          var value = "";
          if (target.value[0] === "#" && target.value.length !== 5 || target.value[0] !== "#" && target.value.length !== 4) {
            value = this.roundValue(target.value);
          }
          if (value.length === 9) {
            pValue = this.rgbToHex(this.rgb);
            this.rgb = this.hexToRgb(value + value.substr(-2));
            this.inputValueChange(this.rgbToHsv.apply(this, this.rgb), pValue, target.value, e);
          } else {
            return;
          }
          break;
        }
        case "R":
          if (this.rgb[0] !== Number(target.value)) {
            pValue = this.rgbToHex(this.rgb);
            this.rgb[0] = Number(target.value);
            hsv = this.rgbToHsv.apply(this, this.rgb);
            this.inputValueChange(hsv, pValue, null, e);
          }
          break;
        case "G":
          if (this.rgb[1] !== Number(target.value)) {
            pValue = this.rgbToHex(this.rgb);
            this.rgb[1] = Number(target.value);
            hsv = this.rgbToHsv.apply(this, this.rgb);
            this.inputValueChange(hsv, pValue, null, e);
          }
          break;
        case "B":
          if (this.rgb[2] !== Number(target.value)) {
            pValue = this.rgbToHex(this.rgb);
            this.rgb[2] = Number(target.value);
            hsv = this.rgbToHsv.apply(this, this.rgb);
            this.inputValueChange(hsv, pValue, null, e);
          }
          break;
        case "H":
          this.hueSlider.value = Number(target.value);
          break;
        case "S":
          if (this.hsv[1] !== Number(target.value)) {
            this.hsv[1] = Number(target.value);
            this.updateHsv();
            this.convertToOtherFormat(false, e);
          }
          break;
        case "V":
          if (this.hsv[2] !== Number(target.value)) {
            this.hsv[2] = Number(target.value);
            this.updateHsv();
            this.convertToOtherFormat(false, e);
          }
          break;
        case "A":
          this.opacitySlider.value = Number(target.value);
          break;
      }
    };
    ColorPicker2.prototype.inputValueChange = function(hsv, pValue, value, e) {
      if (hsv[0] !== this.hsv[0]) {
        this.hueSlider.setProperties({
          "value": hsv[0]
        }, true);
        this.hueSlider.refresh();
        this.setHsvContainerBg(hsv[0]);
      }
      this.hsv = hsv;
      var cValue = this.rgbToHex(this.rgb);
      this.setHandlerPosition();
      this.updateInput(value ? value : cValue);
      var rgba = this.convertToRgbString(this.rgb);
      this.updatePreview(rgba);
      this.triggerEvent(cValue, pValue, rgba, false, e);
    };
    ColorPicker2.prototype.triggerEvent = function(cValue, pValue, rgba, isKey, e) {
      if (isKey === void 0) {
        isKey = false;
      }
      var hex = cValue.slice(0, 7);
      if (isNullOrUndefined(e)) {
        e = new MouseEvent("click", {
          bubbles: true,
          cancelable: false
        });
      }
      if (!this.showButtons && !isKey) {
        this.trigger("change", {
          currentValue: {
            hex,
            rgba
          },
          event: e,
          previousValue: {
            hex: this.value.slice(0, 7),
            rgba: this.convertToRgbString(this.hexToRgb(this.value))
          },
          value: cValue
        });
        if (this.showRecentColors) {
          this.recentColors.unshift(hex);
          if (this.inline) {
            this.renderRecentColor();
          }
        }
        if (this.enableOpacity) {
          this.setProperties({
            "value": cValue
          }, true);
        } else {
          this.setProperties({
            "value": hex
          }, true);
        }
        this.element.value = hex ? hex : "#000000";
      } else {
        this.trigger("select", {
          currentValue: {
            hex,
            rgba
          },
          event: e,
          previousValue: {
            hex: pValue.slice(0, 7),
            rgba: this.convertToRgbString(this.hexToRgb(pValue))
          }
        });
      }
    };
    ColorPicker2.prototype.destroy = function() {
      var _this = this;
      var wrapper = this.getWrapper();
      _super.prototype.destroy.call(this);
      ["tabindex", "spellcheck"].forEach(function(attr) {
        _this.element.removeAttribute(attr);
      });
      if (this.inline) {
        this.unWireEvents();
        this.destroyOtherComp();
      } else {
        if (this.isPopupOpen()) {
          this.unWireEvents();
          this.destroyOtherComp();
        }
        this.splitBtn.destroy();
        this.splitBtn = null;
      }
      this.tileRipple();
      this.tileRipple = null;
      this.ctrlBtnRipple();
      this.ctrlBtnRipple = null;
      if (this.element.nextElementSibling) {
        detach(this.element.nextElementSibling);
      }
      if (wrapper) {
        wrapper.parentElement.insertBefore(this.element, wrapper);
        detach(wrapper);
      }
      this.container = null;
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.formResetHandler);
      }
    };
    ColorPicker2.prototype.destroyOtherComp = function() {
      if (this.isPicker()) {
        var popup = closest(this.hueSlider.element, ".e-color-picker");
        var numericElemColl = popup.querySelectorAll(".e-numerictextbox");
        for (var i = 0; i < numericElemColl.length; i++) {
          getInstance(numericElemColl[i], NumericTextBox).destroy();
        }
        this.hueSlider.destroy();
        if (this.enableOpacity) {
          this.opacitySlider.destroy();
          this.opacitySlider = null;
        }
        this.hueSlider = null;
        var tooltipInst = this.getTooltipInst();
        tooltipInst.close();
        tooltipInst.destroy();
        this.tooltipEle = null;
      }
    };
    ColorPicker2.prototype.isPopupOpen = function() {
      return this.getPopupEle().classList.contains("e-popup-open");
    };
    ColorPicker2.prototype.unWireEvents = function() {
      if (this.isPicker()) {
        var dragHandler = this.getDragHandler();
        EventHandler.remove(dragHandler, "keydown", this.pickerKeyDown);
        var ctrlBtn = select("." + CTRLBTN, this.container);
        if (ctrlBtn) {
          EventHandler.remove(ctrlBtn, "keydown", this.ctrlBtnKeyDown);
        }
        EventHandler.remove(this.getHsvContainer(), "mousedown touchstart", this.handlerDown);
        if (this.modeSwitcher || this.showButtons) {
          EventHandler.remove(select("." + CTRLSWITCH, this.container), "click", this.btnClickHandler);
        }
        EventHandler.remove(select("." + PREVIOUS, this.container), "click", this.previewHandler);
      } else {
        EventHandler.remove(this.container, "click", this.paletteClickHandler);
        EventHandler.remove(this.container, "keydown", this.paletteKeyDown);
      }
    };
    ColorPicker2.prototype.roundValue = function(value) {
      if (!value) {
        return "";
      }
      if (value[0] !== "#") {
        value = "#" + value;
      }
      var len = value.length;
      if (len === 4) {
        value += "f";
        len = 5;
      }
      if (len === 5) {
        var tempValue = "";
        for (var i = 1, len_1 = value.length; i < len_1; i++) {
          tempValue += value.charAt(i) + value.charAt(i);
        }
        value = "#" + tempValue;
        len = 9;
      }
      if (len === 7) {
        value += "ff";
      }
      return value;
    };
    ColorPicker2.prototype.hexToRgb = function(hex) {
      if (!hex) {
        return [];
      }
      hex = hex.trim();
      if (hex.length !== 9) {
        hex = this.roundValue(hex);
      }
      var opacity = Number((parseInt(hex.slice(-2), 16) / 255).toFixed(2));
      hex = hex.slice(1, 7);
      var bigInt = parseInt(hex, 16);
      var h = [];
      h.push(bigInt >> 16 & 255);
      h.push(bigInt >> 8 & 255);
      h.push(bigInt & 255);
      h.push(opacity);
      return h;
    };
    ColorPicker2.prototype.rgbToHsv = function(r, g, b, opacity) {
      if (this.rgb && !this.rgb.length) {
        return [];
      }
      r /= 255;
      g /= 255;
      b /= 255;
      var max = Math.max(r, g, b);
      var min = Math.min(r, g, b);
      var h;
      var v = max;
      var d = max - min;
      var s = max === 0 ? 0 : d / max;
      if (max === min) {
        h = 0;
      } else {
        switch (max) {
          case r:
            h = (g - b) / d + (g < b ? 6 : 0);
            break;
          case g:
            h = (b - r) / d + 2;
            break;
          case b:
            h = (r - g) / d + 4;
            break;
        }
        h /= 6;
      }
      var hsv = [Math.round(h * 360), Math.round(s * 1e3) / 10, Math.round(v * 1e3) / 10];
      if (!isNullOrUndefined(opacity)) {
        hsv.push(opacity);
      }
      return hsv;
    };
    ColorPicker2.prototype.hsvToRgb = function(h, s, v, opacity) {
      var r;
      var g;
      var b;
      s /= 100;
      v /= 100;
      if (s === 0) {
        r = g = b = v;
        return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), opacity];
      }
      h /= 60;
      var i = Math.floor(h);
      var f = h - i;
      var p = v * (1 - s);
      var q = v * (1 - s * f);
      var t = v * (1 - s * (1 - f));
      switch (i) {
        case 0:
          r = v;
          g = t;
          b = p;
          break;
        case 1:
          r = q;
          g = v;
          b = p;
          break;
        case 2:
          r = p;
          g = v;
          b = t;
          break;
        case 3:
          r = p;
          g = q;
          b = v;
          break;
        case 4:
          r = t;
          g = p;
          b = v;
          break;
        default:
          r = v;
          g = p;
          b = q;
      }
      var rgb = [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
      if (!isNullOrUndefined(opacity)) {
        rgb.push(opacity);
      }
      return rgb;
    };
    ColorPicker2.prototype.rgbToHex = function(rgb) {
      return rgb.length ? "#" + this.hex(rgb[0]) + this.hex(rgb[1]) + this.hex(rgb[2]) + (!isNullOrUndefined(rgb[3]) ? rgb[3] !== 0 ? (Math.round(rgb[3] * 255) + 65536).toString(16).substr(-2) : "00" : "") : "";
    };
    ColorPicker2.prototype.hex = function(x) {
      return ("0" + x.toString(16)).slice(-2);
    };
    ColorPicker2.prototype.changeModeSwitcherProp = function(prop) {
      var ctrlSwitchWrapper = select("." + CTRLSWITCH, this.container);
      if (prop) {
        if (ctrlSwitchWrapper) {
          this.appendModeSwitchBtn();
        } else {
          this.createCtrlBtn();
          if (this.isPicker() && !this.disabled) {
            this.addCtrlSwitchEvent();
          }
        }
      } else {
        if (ctrlSwitchWrapper) {
          if (this.showButtons) {
            detach(select("." + MODESWITCH, ctrlSwitchWrapper));
          } else {
            remove(ctrlSwitchWrapper);
          }
        }
      }
    };
    ColorPicker2.prototype.changeShowBtnProps = function(prop) {
      var ctrlBtnWrapper = select("." + CTRLSWITCH, this.container);
      if (prop) {
        if (ctrlBtnWrapper) {
          remove(ctrlBtnWrapper);
        }
        this.createCtrlBtn();
        if (this.isPicker() && !this.disabled) {
          this.addCtrlSwitchEvent();
        }
      } else {
        if (this.modeSwitcher) {
          detach(select("." + CTRLBTN, ctrlBtnWrapper));
        } else {
          remove(ctrlBtnWrapper);
        }
      }
    };
    ColorPicker2.prototype.changeValueProp = function(newProp) {
      if (this.isPicker()) {
        this.rgb = this.hexToRgb(newProp);
        this.hsv = this.rgbToHsv.apply(this, this.rgb);
        this.setHandlerPosition();
        detach(closest(this.hueSlider.element, ".e-slider-preview"));
        this.createSlider();
        this.setHsvContainerBg();
        this.updateInput(newProp);
        if (this.rgb.length === 4) {
          this.updateOpacityInput(this.rgb[3] * 100);
        }
      } else {
        this.removeTileSelection();
        var ele = this.container.querySelector('span[aria-label="' + this.roundValue(newProp) + '"]');
        if (ele) {
          this.addTileSelection(ele);
        }
      }
    };
    ColorPicker2.prototype.setInputEleProps = function() {
      remove(select("." + INPUTWRAPPER, this.container));
      this.createInput();
    };
    ColorPicker2.prototype.changeDisabledProp = function(newProp) {
      if (this.isPicker()) {
        this.hueSlider.enabled = !newProp;
        this.opacitySlider.enabled = !newProp;
        this.setInputEleProps();
      }
      if (newProp) {
        this.toggleDisabled(true);
        this.unWireEvents();
      } else {
        this.toggleDisabled(false);
        this.wireEvents();
      }
    };
    ColorPicker2.prototype.changeCssClassProps = function(newProp, oldProp) {
      var wrapper = this.getWrapper();
      var popupWrapper = this.getPopupEle();
      if (oldProp) {
        removeClass([wrapper, popupWrapper], oldProp.split(" "));
      }
      if (newProp) {
        addClass([wrapper, popupWrapper], newProp.replace(/\s+/g, " ").trim().split(" "));
      }
    };
    ColorPicker2.prototype.changeRtlProps = function(newProp) {
      if (newProp) {
        addClass([this.getWrapper()], "e-rtl");
      } else {
        removeClass([this.getWrapper()], "e-rtl");
      }
    };
    ColorPicker2.prototype.changePaletteProps = function() {
      detach(this.container.children[0]);
      this.container.style.width = "";
      this.createPalette();
    };
    ColorPicker2.prototype.changeOpacityProps = function(newProp) {
      var wrapper = this.getWrapper();
      if (newProp) {
        removeClass([this.container.parentElement], HIDEOPACITY);
        this.createOpacitySlider(select(".e-colorpicker-slider", this.container).appendChild(this.createElement("div", {
          className: "e-opacity-slider"
        })));
        if (!wrapper.classList.contains(HIDEVALUE) && !wrapper.classList.contains(HIDERGBA)) {
          this.appendOpacityValue(select(".e-input-container", this.container));
        }
      } else {
        addClass([this.container.parentElement], HIDEOPACITY);
        this.opacitySlider.destroy();
        remove(this.opacitySlider.element);
        this.opacitySlider = null;
        if (!wrapper.classList.contains(HIDEVALUE) && !wrapper.classList.contains(HIDERGBA)) {
          remove(select("." + OPACITY, this.container).parentElement);
        }
      }
    };
    ColorPicker2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var _this = this;
      if (!isNullOrUndefined(newProp.value)) {
        var value = this.roundValue(newProp.value);
        if (value.length === 9) {
          this.element.value = this.roundValue(value).slice(0, 7);
          var preview = this.splitBtn && select("." + SPLITPREVIEW, this.splitBtn.element);
          if (preview) {
            preview.style.backgroundColor = this.convertToRgbString(this.hexToRgb(newProp.value));
          }
        } else if (this.noColor && this.mode === "Palette" && this.value === "") {
          var preview = this.splitBtn && select("." + SPLITPREVIEW, this.splitBtn.element);
          preview.style.backgroundColor = "";
        } else {
          this.value = oldProp.value;
        }
      }
      if (!this.inline && isNullOrUndefined(newProp.inline)) {
        var otherCompModel = ["disabled", "enableRtl"];
        this.splitBtn.setProperties(getModel(newProp, otherCompModel));
        if (!this.isPopupOpen()) {
          this.changeCssClassProps(newProp.cssClass, oldProp.cssClass);
          this.changeRtlProps(newProp.enableRtl);
          return;
        }
      }
      var _loop_1 = function(prop2) {
        switch (prop2) {
          case "inline":
            if (newProp.inline) {
              this_1.getWrapper().appendChild(this_1.container);
              this_1.splitBtn.destroy();
              detach(this_1.element.nextElementSibling);
              if (!this_1.container.children.length) {
                this_1.createWidget();
              }
            } else {
              this_1.destroyOtherComp();
              this_1.unWireEvents();
              this_1.container.innerHTML = "";
              this_1.createSplitBtn();
            }
            break;
          case "cssClass": {
            this_1.changeCssClassProps(newProp.cssClass, oldProp.cssClass);
            var props = newProp.cssClass.split(" ").concat(oldProp.cssClass.split(" "));
            props = props.reduce(function(a, b) {
              if (a.indexOf(b) < 0) {
                a.push(b);
              }
              return a;
            }, []);
            var count_1 = 0;
            props.forEach(function(cls) {
              if (count_1 === 0 && (cls === HIDEVALUE || cls === HIDEVALUESWITCH || cls === SHOWVALUE || cls === HIDEHEX || cls === HIDERGBA)) {
                var inputWrap = select("." + INPUTWRAPPER, _this.container);
                if (inputWrap) {
                  remove(select("." + INPUTWRAPPER, _this.container));
                }
                _this.createInput();
                count_1++;
              }
            });
            break;
          }
          case "enableRtl":
            if (this_1.isPicker()) {
              this_1.hueSlider.enableRtl = newProp.enableRtl;
              if (this_1.enableOpacity) {
                this_1.opacitySlider.enableRtl = newProp.enableRtl;
              }
              this_1.setInputEleProps();
            }
            this_1.changeRtlProps(newProp.enableRtl);
            break;
          case "disabled":
            this_1.changeDisabledProp(newProp.disabled);
            break;
          case "value":
            if (this_1.value !== oldProp.value) {
              this_1.changeValueProp(newProp.value);
            }
            break;
          case "showButtons":
            this_1.changeShowBtnProps(newProp.showButtons);
            break;
          case "mode":
            if (newProp.mode === "Picker") {
              this_1.switchToPicker();
            } else {
              this_1.switchToPalette();
            }
            break;
          case "modeSwitcher":
            this_1.changeModeSwitcherProp(newProp.modeSwitcher);
            break;
          case "columns":
          case "presetColors":
            if (!this_1.isPicker()) {
              this_1.changePaletteProps();
            }
            break;
          case "noColor":
            if (newProp.noColor) {
              if (this_1.mode === "Palette" && !this_1.modeSwitcher) {
                this_1.setNoColor();
              }
            } else {
              this_1.changePaletteProps();
            }
            break;
          case "enableOpacity":
            this_1.changeOpacityProps(newProp.enableOpacity);
            break;
          case "showRecentColors":
            if (!newProp.showRecentColors) {
              var recentClrWpr = this_1.container.querySelector(".e-clr-pal-rec-wpr");
              if (recentClrWpr) {
                detach(recentClrWpr);
              }
            }
            this_1.recentColors = [];
            break;
        }
      };
      var this_1 = this;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        _loop_1(prop);
      }
    };
    ColorPicker2.prototype.focusIn = function() {
      this.element.parentElement.focus();
    };
    __decorate20([Property("#008000ff")], ColorPicker2.prototype, "value", void 0);
    __decorate20([Property("")], ColorPicker2.prototype, "cssClass", void 0);
    __decorate20([Property(false)], ColorPicker2.prototype, "disabled", void 0);
    __decorate20([Property("Picker")], ColorPicker2.prototype, "mode", void 0);
    __decorate20([Property(true)], ColorPicker2.prototype, "modeSwitcher", void 0);
    __decorate20([Property(null)], ColorPicker2.prototype, "presetColors", void 0);
    __decorate20([Property(true)], ColorPicker2.prototype, "showButtons", void 0);
    __decorate20([Property(10)], ColorPicker2.prototype, "columns", void 0);
    __decorate20([Property(false)], ColorPicker2.prototype, "inline", void 0);
    __decorate20([Property(false)], ColorPicker2.prototype, "noColor", void 0);
    __decorate20([Property(false)], ColorPicker2.prototype, "enablePersistence", void 0);
    __decorate20([Property(true)], ColorPicker2.prototype, "enableOpacity", void 0);
    __decorate20([Property(false)], ColorPicker2.prototype, "createPopupOnClick", void 0);
    __decorate20([Property(false)], ColorPicker2.prototype, "showRecentColors", void 0);
    __decorate20([Event()], ColorPicker2.prototype, "select", void 0);
    __decorate20([Event()], ColorPicker2.prototype, "change", void 0);
    __decorate20([Event()], ColorPicker2.prototype, "beforeTileRender", void 0);
    __decorate20([Event()], ColorPicker2.prototype, "beforeOpen", void 0);
    __decorate20([Event()], ColorPicker2.prototype, "open", void 0);
    __decorate20([Event()], ColorPicker2.prototype, "beforeClose", void 0);
    __decorate20([Event()], ColorPicker2.prototype, "beforeModeSwitch", void 0);
    __decorate20([Event()], ColorPicker2.prototype, "onModeSwitch", void 0);
    __decorate20([Event()], ColorPicker2.prototype, "created", void 0);
    ColorPicker2 = __decorate20([NotifyPropertyChanges], ColorPicker2);
    return ColorPicker2;
  }(Component)
);

// node_modules/@syncfusion/ej2-inputs/src/textbox/textbox.js
var __extends22 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate21 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HIDE_CLEAR = "e-clear-icon-hide";
var TextBox = (
  /** @class */
  function(_super) {
    __extends22(TextBox2, _super);
    function TextBox2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.previousValue = null;
      _this.isHiddenInput = false;
      _this.isForm = false;
      _this.inputPreviousValue = null;
      _this.textboxOptions = options;
      return _this;
    }
    TextBox2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "floatLabelType":
            Input.removeFloating(this.textboxWrapper);
            Input.addFloating(this.respectiveElement, this.floatLabelType, this.placeholder);
            break;
          case "enabled":
            Input.setEnabled(this.enabled, this.respectiveElement, this.floatLabelType, this.textboxWrapper.container);
            this.bindClearEvent();
            break;
          case "width":
            Input.setWidth(newProp.width, this.textboxWrapper.container);
            break;
          case "value":
            {
              var prevOnChange = this.isProtectedOnChange;
              this.isProtectedOnChange = true;
              if (!Input.isBlank(this.value)) {
                this.value = this.value.toString();
              }
              this.isProtectedOnChange = prevOnChange;
              Input.setValue(this.value, this.respectiveElement, this.floatLabelType, this.showClearButton);
              if (this.isHiddenInput) {
                this.element.value = this.respectiveElement.value;
              }
              this.inputPreviousValue = this.respectiveElement.value;
              if ((this.isAngular || this.isVue) && this.preventChange === true) {
                this.previousValue = this.isAngular ? this.value : this.previousValue;
                this.preventChange = false;
              } else if (isNullOrUndefined(this.isAngular) || !this.isAngular || this.isAngular && !this.preventChange || this.isAngular && isNullOrUndefined(this.preventChange)) {
                this.raiseChangeEvent();
              }
            }
            break;
          case "htmlAttributes":
            {
              this.updateHTMLAttributesToElement();
              this.updateHTMLAttributesToWrapper();
              this.checkAttributes(true);
              if (this.multiline && !isNullOrUndefined(this.textarea)) {
                Input.validateInputType(this.textboxWrapper.container, this.textarea);
              } else {
                Input.validateInputType(this.textboxWrapper.container, this.element);
              }
            }
            break;
          case "readonly":
            Input.setReadonly(this.readonly, this.respectiveElement);
            break;
          case "type":
            if (this.respectiveElement.tagName !== "TEXTAREA") {
              this.respectiveElement.setAttribute("type", this.type);
              Input.validateInputType(this.textboxWrapper.container, this.element);
              this.raiseChangeEvent();
            }
            break;
          case "showClearButton":
            Input.setClearButton(this.showClearButton, this.respectiveElement, this.textboxWrapper);
            this.bindClearEvent();
            break;
          case "enableRtl":
            Input.setEnableRtl(this.enableRtl, [this.textboxWrapper.container]);
            break;
          case "placeholder":
            Input.setPlaceholder(this.placeholder, this.respectiveElement);
            Input.calculateWidth(this.respectiveElement, this.textboxWrapper.container);
            break;
          case "autocomplete":
            if (this.autocomplete !== "on" && this.autocomplete !== "") {
              this.respectiveElement.autocomplete = this.autocomplete;
            } else {
              this.removeAttributes(["autocomplete"]);
            }
            break;
          case "cssClass":
            Input.updateCssClass(newProp.cssClass, oldProp.cssClass, this.textboxWrapper.container);
            break;
          case "locale":
            this.globalize = new Internationalization(this.locale);
            this.l10n.setLocale(this.locale);
            this.setProperties({
              placeholder: this.l10n.getConstant("placeholder")
            }, true);
            Input.setPlaceholder(this.placeholder, this.respectiveElement);
            break;
        }
      }
    };
    TextBox2.prototype.getModuleName = function() {
      return "textbox";
    };
    TextBox2.prototype.preRender = function() {
      this.cloneElement = this.element.cloneNode(true);
      this.formElement = closest(this.element, "form");
      if (!isNullOrUndefined(this.formElement)) {
        this.isForm = true;
      }
      if (this.element.tagName === "EJS-TEXTBOX") {
        var ejInstance = getValue("ej2_instances", this.element);
        var inputElement = this.multiline ? this.createElement("textarea") : this.createElement("input");
        var index = 0;
        for (index; index < this.element.attributes.length; index++) {
          var attributeName = this.element.attributes[index].nodeName;
          if (attributeName !== "id" && attributeName !== "class") {
            inputElement.setAttribute(attributeName, this.element.attributes[index].nodeValue);
            inputElement.innerHTML = this.element.innerHTML;
            if (attributeName === "name") {
              this.element.removeAttribute("name");
            }
          } else if (attributeName === "class") {
            inputElement.setAttribute(attributeName, this.element.className.split(" ").filter(function(item) {
              return item.indexOf("ng-") !== 0;
            }).join(" "));
          }
        }
        this.element.appendChild(inputElement);
        this.element = inputElement;
        setValue("ej2_instances", ejInstance, this.element);
      }
      this.updateHTMLAttributesToElement();
      this.checkAttributes(false);
      if ((isNullOrUndefined(this.textboxOptions) || this.textboxOptions["value"] === void 0) && this.element.value !== "") {
        this.setProperties({
          value: this.element.value
        }, true);
      }
      if (this.element.tagName !== "TEXTAREA") {
        this.element.setAttribute("type", this.type);
      }
      if (this.type === "text" || this.element.tagName === "INPUT" && this.multiline && this.isReact) {
        this.element.setAttribute("role", "textbox");
      }
      this.globalize = new Internationalization(this.locale);
      var localeText = {
        placeholder: this.placeholder
      };
      this.l10n = new L10n("textbox", localeText, this.locale);
      if (this.l10n.getConstant("placeholder") !== "") {
        this.setProperties({
          placeholder: this.placeholder || this.l10n.getConstant("placeholder")
        }, true);
      }
      if (!this.element.hasAttribute("id")) {
        this.element.setAttribute("id", getUniqueID("textbox"));
      }
      if (!this.element.hasAttribute("name")) {
        this.element.setAttribute("name", this.element.getAttribute("id"));
      }
      if (this.element.tagName === "INPUT" && this.multiline) {
        this.isHiddenInput = true;
        this.textarea = this.createElement("textarea");
        this.element.parentNode.insertBefore(this.textarea, this.element);
        this.element.setAttribute("type", "hidden");
        this.textarea.setAttribute("name", this.element.getAttribute("name"));
        this.element.removeAttribute("name");
        this.textarea.setAttribute("role", this.element.getAttribute("role"));
        this.element.removeAttribute("role");
        this.textarea.setAttribute("id", getUniqueID("textarea"));
        var apiAttributes = ["placeholder", "disabled", "value", "readonly", "type", "autocomplete"];
        for (var index = 0; index < this.element.attributes.length; index++) {
          var attributeName = this.element.attributes[index].nodeName;
          if (this.element.hasAttribute(attributeName) && containerAttributes.indexOf(attributeName) < 0 && !(attributeName === "id" || attributeName === "type" || attributeName === "e-mappinguid")) {
            this.textarea.setAttribute(attributeName, this.element.attributes[index].nodeValue);
            if (apiAttributes.indexOf(attributeName) < 0) {
              this.element.removeAttribute(attributeName);
              index--;
            }
          }
        }
      }
    };
    TextBox2.prototype.checkAttributes = function(isDynamic) {
      var attrs = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ["placeholder", "disabled", "value", "readonly", "type", "autocomplete"];
      for (var _i = 0, attrs_1 = attrs; _i < attrs_1.length; _i++) {
        var key = attrs_1[_i];
        if (!isNullOrUndefined(this.element.getAttribute(key))) {
          switch (key) {
            case "disabled":
              if (isNullOrUndefined(this.textboxOptions) || this.textboxOptions["enabled"] === void 0 || isDynamic) {
                var enabled = this.element.getAttribute(key) === "disabled" || this.element.getAttribute(key) === "" || this.element.getAttribute(key) === "true" ? false : true;
                this.setProperties({
                  enabled
                }, !isDynamic);
              }
              break;
            case "readonly":
              if (isNullOrUndefined(this.textboxOptions) || this.textboxOptions["readonly"] === void 0 || isDynamic) {
                var readonly = this.element.getAttribute(key) === "readonly" || this.element.getAttribute(key) === "" || this.element.getAttribute(key) === "true" ? true : false;
                this.setProperties({
                  readonly
                }, !isDynamic);
              }
              break;
            case "placeholder":
              if (isNullOrUndefined(this.textboxOptions) || this.textboxOptions["placeholder"] === void 0 || isDynamic) {
                this.setProperties({
                  placeholder: this.element.placeholder
                }, !isDynamic);
              }
              break;
            case "autocomplete":
              if (isNullOrUndefined(this.textboxOptions) || this.textboxOptions["autocomplete"] === void 0 || isDynamic) {
                var autoCompleteTxt = this.element.autocomplete === "off" ? "off" : "on";
                this.setProperties({
                  autocomplete: autoCompleteTxt
                }, !isDynamic);
              }
              break;
            case "value":
              if ((isNullOrUndefined(this.textboxOptions) || this.textboxOptions["value"] === void 0 || isDynamic) && this.element.value !== "") {
                this.setProperties({
                  value: this.element.value
                }, !isDynamic);
              }
              break;
            case "type":
              if (isNullOrUndefined(this.textboxOptions) || this.textboxOptions["type"] === void 0 || isDynamic) {
                this.setProperties({
                  type: this.element.type
                }, !isDynamic);
              }
              break;
          }
        }
      }
    };
    TextBox2.prototype.render = function() {
      var updatedCssClassValue = this.cssClass;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        updatedCssClassValue = Input.getInputValidClassList(this.cssClass);
      }
      this.respectiveElement = this.isHiddenInput ? this.textarea : this.element;
      this.textboxWrapper = Input.createInput({
        element: this.respectiveElement,
        floatLabelType: this.floatLabelType,
        properties: {
          enabled: this.enabled,
          enableRtl: this.enableRtl,
          cssClass: updatedCssClassValue,
          readonly: this.readonly,
          placeholder: this.placeholder,
          showClearButton: this.showClearButton
        }
      });
      this.updateHTMLAttributesToWrapper();
      if (this.isHiddenInput) {
        this.respectiveElement.parentNode.insertBefore(this.element, this.respectiveElement);
      }
      this.wireEvents();
      if (!isNullOrUndefined(this.value)) {
        Input.setValue(this.value, this.respectiveElement, this.floatLabelType, this.showClearButton);
        if (this.isHiddenInput) {
          this.element.value = this.respectiveElement.value;
        }
      }
      if (!isNullOrUndefined(this.value)) {
        this.initialValue = this.value;
        this.setInitialValue();
      }
      if (this.autocomplete !== "on" && this.autocomplete !== "") {
        this.respectiveElement.autocomplete = this.autocomplete;
      } else if (!isNullOrUndefined(this.textboxOptions) && this.textboxOptions["autocomplete"] !== void 0) {
        this.removeAttributes(["autocomplete"]);
      }
      this.previousValue = this.value;
      this.inputPreviousValue = this.value;
      this.respectiveElement.defaultValue = this.respectiveElement.value;
      Input.setWidth(this.width, this.textboxWrapper.container);
      if (!isNullOrUndefined(closest(this.element, "fieldset")) && closest(this.element, "fieldset").disabled) {
        this.enabled = false;
      }
      if (!this.element.hasAttribute("aria-labelledby") && !this.element.hasAttribute("placeholder") && !this.element.hasAttribute("aria-label")) {
        this.element.setAttribute("aria-label", "textbox");
      }
      this.renderComplete();
    };
    TextBox2.prototype.updateHTMLAttributesToWrapper = function() {
      Input.updateHTMLAttributesToWrapper(this.htmlAttributes, this.textboxWrapper.container);
    };
    TextBox2.prototype.updateHTMLAttributesToElement = function() {
      Input.updateHTMLAttributesToElement(this.htmlAttributes, this.respectiveElement ? this.respectiveElement : this.multiline && !isNullOrUndefined(this.textarea) ? this.textarea : this.element);
    };
    TextBox2.prototype.setInitialValue = function() {
      if (!this.isAngular) {
        this.respectiveElement.setAttribute("value", this.initialValue);
      }
    };
    TextBox2.prototype.wireEvents = function() {
      EventHandler.add(this.respectiveElement, "focus", this.focusHandler, this);
      EventHandler.add(this.respectiveElement, "blur", this.focusOutHandler, this);
      EventHandler.add(this.respectiveElement, "keydown", this.keydownHandler, this);
      EventHandler.add(this.respectiveElement, "input", this.inputHandler, this);
      EventHandler.add(this.respectiveElement, "change", this.changeHandler, this);
      if (this.isForm) {
        EventHandler.add(this.formElement, "reset", this.resetForm, this);
      }
      this.bindClearEvent();
      if (!isNullOrUndefined(this.textboxWrapper.container.querySelector(".e-float-text")) && this.floatLabelType === "Auto" && this.textboxWrapper.container.classList.contains("e-autofill") && this.textboxWrapper.container.classList.contains("e-outline")) {
        EventHandler.add(this.textboxWrapper.container.querySelector(".e-float-text"), "animationstart", this.animationHandler, this);
      }
    };
    TextBox2.prototype.animationHandler = function() {
      this.textboxWrapper.container.classList.add("e-valid-input");
      var label = this.textboxWrapper.container.querySelector(".e-float-text");
      if (!isNullOrUndefined(label)) {
        label.classList.add("e-label-top");
        if (label.classList.contains("e-label-bottom")) {
          label.classList.remove("e-label-bottom");
        }
      }
    };
    TextBox2.prototype.resetValue = function(value) {
      var prevOnChange = this.isProtectedOnChange;
      this.isProtectedOnChange = true;
      this.value = value;
      if (value == null && this.textboxWrapper.container.classList.contains("e-valid-input") && !(this.floatLabelType === "Always" && this.textboxWrapper.container.classList.contains("e-outline"))) {
        this.textboxWrapper.container.classList.remove("e-valid-input");
      }
      this.isProtectedOnChange = prevOnChange;
    };
    TextBox2.prototype.resetForm = function() {
      if (this.isAngular) {
        this.resetValue("");
      } else {
        this.resetValue(this.initialValue);
      }
      if (!isNullOrUndefined(this.textboxWrapper)) {
        var label = this.textboxWrapper.container.querySelector(".e-float-text");
        if (!isNullOrUndefined(label) && this.floatLabelType !== "Always") {
          if (isNullOrUndefined(this.initialValue) || this.initialValue === "") {
            label.classList.add("e-label-bottom");
            label.classList.remove("e-label-top");
          } else if (this.initialValue !== "") {
            label.classList.add("e-label-top");
            label.classList.remove("e-label-bottom");
          }
        }
      }
    };
    TextBox2.prototype.focusHandler = function(args) {
      var eventArgs = {
        container: this.textboxWrapper.container,
        event: args,
        value: this.value
      };
      this.trigger("focus", eventArgs);
    };
    TextBox2.prototype.focusOutHandler = function(args) {
      if (!(this.previousValue === null && this.value === null && this.respectiveElement.value === "") && this.previousValue !== this.value) {
        this.raiseChangeEvent(args, true);
      }
      var eventArgs = {
        container: this.textboxWrapper.container,
        event: args,
        value: this.value
      };
      this.trigger("blur", eventArgs);
    };
    TextBox2.prototype.keydownHandler = function(args) {
      if ((args.keyCode === 13 || args.keyCode === 9) && !((this.previousValue === null || this.previousValue === "") && (this.value === null || this.value === "") && this.respectiveElement.value === "")) {
        this.setProperties({
          value: this.respectiveElement.value
        }, true);
      }
    };
    TextBox2.prototype.inputHandler = function(args) {
      var textboxObj = this;
      var eventArgs = {
        event: args,
        value: this.respectiveElement.value,
        previousValue: this.inputPreviousValue,
        container: this.textboxWrapper.container
      };
      this.inputPreviousValue = this.respectiveElement.value;
      if (this.isAngular) {
        textboxObj.localChange({
          value: this.respectiveElement.value
        });
        this.preventChange = true;
      }
      if (this.isVue) {
        this.preventChange = true;
      }
      this.trigger("input", eventArgs);
      args.stopPropagation();
    };
    TextBox2.prototype.changeHandler = function(args) {
      this.setProperties({
        value: this.respectiveElement.value
      }, true);
      if (this.previousValue !== this.value) {
        this.raiseChangeEvent(args, true);
      }
      args.stopPropagation();
    };
    TextBox2.prototype.raiseChangeEvent = function(event2, interaction) {
      var eventArgs = {
        event: event2,
        value: this.value,
        previousValue: this.previousValue,
        container: this.textboxWrapper.container,
        isInteraction: interaction ? interaction : false,
        isInteracted: interaction ? interaction : false
      };
      this.preventChange = false;
      this.trigger("change", eventArgs);
      this.previousValue = this.value;
      if (this.element.tagName === "INPUT" && this.multiline && Browser.info.name === "mozilla") {
        this.element.value = this.respectiveElement.value;
      }
    };
    TextBox2.prototype.bindClearEvent = function() {
      if (this.showClearButton) {
        if (this.enabled) {
          EventHandler.add(this.textboxWrapper.clearButton, "mousedown touchstart", this.resetInputHandler, this);
        } else {
          EventHandler.remove(this.textboxWrapper.clearButton, "mousedown touchstart", this.resetInputHandler);
        }
      }
    };
    TextBox2.prototype.resetInputHandler = function(event2) {
      event2.preventDefault();
      if (!this.textboxWrapper.clearButton.classList.contains(HIDE_CLEAR) || this.textboxWrapper.container.classList.contains("e-static-clear")) {
        Input.setValue("", this.respectiveElement, this.floatLabelType, this.showClearButton);
        if (this.isHiddenInput) {
          this.element.value = this.respectiveElement.value;
        }
        this.setProperties({
          value: this.respectiveElement.value
        }, true);
        var eventArgs = {
          event: event2,
          value: this.respectiveElement.value,
          previousValue: this.inputPreviousValue,
          container: this.textboxWrapper.container
        };
        this.trigger("input", eventArgs);
        this.inputPreviousValue = this.respectiveElement.value;
        this.raiseChangeEvent(event2, true);
        if (closest(this.element, "form")) {
          var element2 = this.element;
          var keyupEvent = document.createEvent("KeyboardEvent");
          keyupEvent.initEvent("keyup", false, true);
          element2.dispatchEvent(keyupEvent);
        }
      }
    };
    TextBox2.prototype.unWireEvents = function() {
      EventHandler.remove(this.respectiveElement, "focus", this.focusHandler);
      EventHandler.remove(this.respectiveElement, "blur", this.focusOutHandler);
      EventHandler.remove(this.respectiveElement, "keydown", this.keydownHandler);
      EventHandler.remove(this.respectiveElement, "input", this.inputHandler);
      EventHandler.remove(this.respectiveElement, "change", this.changeHandler);
      if (this.isForm) {
        EventHandler.remove(this.formElement, "reset", this.resetForm);
      }
      if (!isNullOrUndefined(this.textboxWrapper.container.querySelector(".e-float-text")) && this.floatLabelType === "Auto" && this.textboxWrapper.container.classList.contains("e-outline") && this.textboxWrapper.container.classList.contains("e-autofill")) {
        EventHandler.remove(this.textboxWrapper.container.querySelector(".e-float-text"), "animationstart", this.animationHandler);
      }
    };
    TextBox2.prototype.destroy = function() {
      this.unWireEvents();
      if (this.showClearButton) {
        this.clearButton = document.getElementsByClassName("e-clear-icon")[0];
      }
      if (this.element.tagName === "INPUT" && this.multiline) {
        detach(this.textboxWrapper.container.getElementsByTagName("textarea")[0]);
        this.respectiveElement = this.element;
        this.element.removeAttribute("type");
      }
      this.respectiveElement.value = this.respectiveElement.defaultValue;
      this.respectiveElement.classList.remove("e-input");
      this.removeAttributes(["aria-disabled", "aria-readonly", "aria-labelledby"]);
      if (!isNullOrUndefined(this.textboxWrapper)) {
        this.textboxWrapper.container.insertAdjacentElement("afterend", this.respectiveElement);
        detach(this.textboxWrapper.container);
      }
      this.textboxWrapper = null;
      Input.destroy({
        element: this.respectiveElement,
        floatLabelType: this.floatLabelType,
        properties: this.properties
      }, this.clearButton);
      _super.prototype.destroy.call(this);
    };
    TextBox2.prototype.addIcon = function(position, icons) {
      Input.addIcon(position, icons, this.textboxWrapper.container, this.respectiveElement, this.createElement);
    };
    TextBox2.prototype.getPersistData = function() {
      var keyEntity = ["value"];
      return this.addOnPersist(keyEntity);
    };
    TextBox2.prototype.addAttributes = function(attributes2) {
      for (var _i = 0, _a = Object.keys(attributes2); _i < _a.length; _i++) {
        var key = _a[_i];
        if (key === "disabled") {
          this.setProperties({
            enabled: false
          }, true);
          Input.setEnabled(this.enabled, this.respectiveElement, this.floatLabelType, this.textboxWrapper.container);
        } else if (key === "readonly") {
          this.setProperties({
            readonly: true
          }, true);
          Input.setReadonly(this.readonly, this.respectiveElement);
        } else if (key === "class") {
          this.respectiveElement.classList.add(attributes2["" + key]);
        } else if (key === "placeholder") {
          this.setProperties({
            placeholder: attributes2["" + key]
          }, true);
          Input.setPlaceholder(this.placeholder, this.respectiveElement);
        } else if (key === "rows" && this.respectiveElement.tagName === "TEXTAREA") {
          this.respectiveElement.setAttribute(key, attributes2["" + key]);
        } else {
          this.respectiveElement.setAttribute(key, attributes2["" + key]);
        }
      }
    };
    TextBox2.prototype.removeAttributes = function(attributes2) {
      for (var _i = 0, attributes_1 = attributes2; _i < attributes_1.length; _i++) {
        var key = attributes_1[_i];
        if (key === "disabled") {
          this.setProperties({
            enabled: true
          }, true);
          Input.setEnabled(this.enabled, this.respectiveElement, this.floatLabelType, this.textboxWrapper.container);
        } else if (key === "readonly") {
          this.setProperties({
            readonly: false
          }, true);
          Input.setReadonly(this.readonly, this.respectiveElement);
        } else if (key === "placeholder") {
          this.setProperties({
            placeholder: null
          }, true);
          Input.setPlaceholder(this.placeholder, this.respectiveElement);
        } else {
          this.respectiveElement.removeAttribute(key);
        }
      }
    };
    TextBox2.prototype.focusIn = function() {
      if (document.activeElement !== this.respectiveElement && this.enabled) {
        this.respectiveElement.focus();
        if (this.textboxWrapper.container.classList.contains("e-input-group") || this.textboxWrapper.container.classList.contains("e-outline") || this.textboxWrapper.container.classList.contains("e-filled")) {
          addClass([this.textboxWrapper.container], [TEXTBOX_FOCUS]);
        }
      }
    };
    TextBox2.prototype.focusOut = function() {
      if (document.activeElement === this.respectiveElement && this.enabled) {
        this.respectiveElement.blur();
        if (this.textboxWrapper.container.classList.contains("e-input-group") || this.textboxWrapper.container.classList.contains("e-outline") || this.textboxWrapper.container.classList.contains("e-filled")) {
          removeClass([this.textboxWrapper.container], [TEXTBOX_FOCUS]);
        }
      }
    };
    __decorate21([Property("text")], TextBox2.prototype, "type", void 0);
    __decorate21([Property(false)], TextBox2.prototype, "readonly", void 0);
    __decorate21([Property(null)], TextBox2.prototype, "value", void 0);
    __decorate21([Property("Never")], TextBox2.prototype, "floatLabelType", void 0);
    __decorate21([Property("")], TextBox2.prototype, "cssClass", void 0);
    __decorate21([Property(null)], TextBox2.prototype, "placeholder", void 0);
    __decorate21([Property("on")], TextBox2.prototype, "autocomplete", void 0);
    __decorate21([Property({})], TextBox2.prototype, "htmlAttributes", void 0);
    __decorate21([Property(false)], TextBox2.prototype, "multiline", void 0);
    __decorate21([Property(true)], TextBox2.prototype, "enabled", void 0);
    __decorate21([Property(false)], TextBox2.prototype, "showClearButton", void 0);
    __decorate21([Property(false)], TextBox2.prototype, "enablePersistence", void 0);
    __decorate21([Property(null)], TextBox2.prototype, "width", void 0);
    __decorate21([Event()], TextBox2.prototype, "created", void 0);
    __decorate21([Event()], TextBox2.prototype, "destroyed", void 0);
    __decorate21([Event()], TextBox2.prototype, "change", void 0);
    __decorate21([Event()], TextBox2.prototype, "blur", void 0);
    __decorate21([Event()], TextBox2.prototype, "focus", void 0);
    __decorate21([Event()], TextBox2.prototype, "input", void 0);
    TextBox2 = __decorate21([NotifyPropertyChanges], TextBox2);
    return TextBox2;
  }(Component)
);

// node_modules/@syncfusion/ej2-inputs/src/uploader/uploader.js
var __extends23 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate22 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CONTROL_WRAPPER = "e-upload e-control-wrapper";
var INPUT_WRAPPER = "e-file-select";
var DROP_AREA = "e-file-drop";
var DROP_WRAPPER = "e-file-select-wrap";
var LIST_PARENT = "e-upload-files";
var FILE = "e-upload-file-list";
var STATUS = "e-file-status";
var ACTION_BUTTONS = "e-upload-actions";
var UPLOAD_BUTTONS = "e-file-upload-btn e-css e-btn e-flat e-primary";
var CLEAR_BUTTONS = "e-file-clear-btn e-css e-btn e-flat";
var FILE_NAME = "e-file-name";
var FILE_TYPE = "e-file-type";
var FILE_SIZE = "e-file-size";
var REMOVE_ICON = "e-file-remove-btn";
var DELETE_ICON = "e-file-delete-btn";
var SPINNER_PANE = "e-spinner-pane";
var ABORT_ICON = "e-file-abort-btn";
var RETRY_ICON = "e-file-reload-btn";
var DRAG_HOVER = "e-upload-drag-hover";
var PROGRESS_WRAPPER = "e-upload-progress-wrap";
var PROGRESSBAR = "e-upload-progress-bar";
var PROGRESSBAR_TEXT = "e-progress-bar-text";
var UPLOAD_INPROGRESS = "e-upload-progress";
var UPLOAD_SUCCESS = "e-upload-success";
var UPLOAD_FAILED = "e-upload-fails";
var TEXT_CONTAINER = "e-file-container";
var VALIDATION_FAILS = "e-validation-fails";
var RTL8 = "e-rtl";
var DISABLED5 = "e-disabled";
var RTL_CONTAINER = "e-rtl-container";
var ICON_FOCUSED = "e-clear-icon-focus";
var PROGRESS_INNER_WRAPPER = "e-progress-inner-wrap";
var PAUSE_UPLOAD = "e-file-pause-btn";
var RESUME_UPLOAD = "e-file-play-btn";
var RESTRICT_RETRY = "e-restrict-retry";
var wrapperAttr2 = ["title", "style", "class"];
var FORM_UPLOAD = "e-form-upload";
var HIDDEN_INPUT = "e-hidden-file-input";
var INVALID_FILE = "e-file-invalid";
var INFORMATION = "e-file-information";
var FilesProp = (
  /** @class */
  function(_super) {
    __extends23(FilesProp2, _super);
    function FilesProp2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate22([Property("")], FilesProp2.prototype, "name", void 0);
    __decorate22([Property(null)], FilesProp2.prototype, "size", void 0);
    __decorate22([Property("")], FilesProp2.prototype, "type", void 0);
    return FilesProp2;
  }(ChildProperty)
);
var ButtonsProps = (
  /** @class */
  function(_super) {
    __extends23(ButtonsProps2, _super);
    function ButtonsProps2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate22([Property("Browse...")], ButtonsProps2.prototype, "browse", void 0);
    __decorate22([Property("Upload")], ButtonsProps2.prototype, "upload", void 0);
    __decorate22([Property("Clear")], ButtonsProps2.prototype, "clear", void 0);
    return ButtonsProps2;
  }(ChildProperty)
);
var AsyncSettings = (
  /** @class */
  function(_super) {
    __extends23(AsyncSettings2, _super);
    function AsyncSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate22([Property("")], AsyncSettings2.prototype, "saveUrl", void 0);
    __decorate22([Property("")], AsyncSettings2.prototype, "removeUrl", void 0);
    __decorate22([Property(0)], AsyncSettings2.prototype, "chunkSize", void 0);
    __decorate22([Property(3)], AsyncSettings2.prototype, "retryCount", void 0);
    __decorate22([Property(500)], AsyncSettings2.prototype, "retryAfterDelay", void 0);
    return AsyncSettings2;
  }(ChildProperty)
);
var Uploader = (
  /** @class */
  function(_super) {
    __extends23(Uploader2, _super);
    function Uploader2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.initialAttr = {
        accept: null,
        multiple: false,
        disabled: false
      };
      _this.uploadedFilesData = [];
      _this.base64String = [];
      _this.isForm = false;
      _this.allTypes = false;
      _this.pausedData = [];
      _this.uploadMetaData = [];
      _this.tabIndex = "0";
      _this.btnTabIndex = "0";
      _this.disableKeyboardNavigation = false;
      _this.count = -1;
      _this.actionCompleteCount = 0;
      _this.flag = true;
      _this.selectedFiles = [];
      _this.uploaderName = "UploadFiles";
      _this.fileStreams = [];
      _this.newFileRef = 0;
      _this.isFirstFileOnSelection = false;
      _this.dragCounter = 0;
      _this.fileList = [];
      _this.filesData = [];
      _this.uploaderOptions = options;
      return _this;
    }
    Uploader2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "allowedExtensions":
            this.setExtensions(this.allowedExtensions);
            this.clearAll();
            break;
          case "enabled":
            this.setControlStatus();
            break;
          case "multiple":
            this.setMultipleSelection();
            break;
          case "enableRtl":
            this.setRTL();
            this.reRenderFileList();
            break;
          case "buttons":
            this.buttons.browse = isNullOrUndefined(this.buttons.browse) ? "" : this.buttons.browse;
            this.buttons.clear = isNullOrUndefined(this.buttons.clear) ? "" : this.buttons.clear;
            this.buttons.upload = isNullOrUndefined(this.buttons.upload) ? "" : this.buttons.upload;
            this.renderButtonTemplates();
            break;
          case "dropArea":
            this.unBindDropEvents();
            this.updateDropArea();
            break;
          case "htmlAttributes":
            this.updateHTMLAttrToElement();
            this.updateHTMLAttrToWrapper();
            this.checkHTMLAttributes(true);
            break;
          case "files":
            this.renderPreLoadFiles();
            break;
          case "directoryUpload":
            this.updateDirectoryAttributes();
            break;
          case "template":
            if (this.isReact) {
              this.reRenderFileList();
            } else {
              this.clearAll();
            }
            break;
          case "minFileSize":
          case "maxFileSize":
          case "autoUpload":
            this.clearAll();
            break;
          case "sequentialUpload":
            this.clearAll();
            break;
          case "locale":
            this.l10n.setLocale(this.locale);
            this.setLocalizedTexts();
            this.preLocaleObj = getValue("currentLocale", this.l10n);
            break;
          case "cssClass":
            this.setCSSClass(oldProp.cssClass);
            break;
        }
      }
    };
    Uploader2.prototype.setLocalizedTexts = function() {
      if (isNullOrUndefined(this.template)) {
        if (typeof this.buttons.browse === "string") {
          this.browseButton.innerText = this.buttons.browse === "Browse..." ? this.localizedTexts("Browse") : this.buttons.browse;
          this.browseButton.setAttribute("title", this.browseButton.innerText);
          if (this.uploadWrapper && !isNullOrUndefined(this.uploadWrapper.querySelector("." + DROP_AREA))) {
            this.uploadWrapper.querySelector("." + DROP_AREA).innerHTML = this.localizedTexts("dropFilesHint");
          }
        }
        this.updateFileList();
      }
    };
    Uploader2.prototype.getKeyValue = function(val) {
      var keyValue;
      for (var _i = 0, _a = Object.keys(this.preLocaleObj); _i < _a.length; _i++) {
        var key = _a[_i];
        if (this.preLocaleObj["" + key] === val) {
          keyValue = key;
        }
      }
      return keyValue;
    };
    Uploader2.prototype.updateFileList = function() {
      var element2;
      if (this.fileList.length > 0 && !isNullOrUndefined(this.uploadWrapper.querySelector("." + LIST_PARENT))) {
        for (var i = 0; i < this.fileList.length; i++) {
          element2 = this.fileList[i].querySelector(".e-file-status");
          element2.innerHTML = this.localizedTexts(this.getKeyValue(this.filesData[i].status));
          this.filesData[i].status = this.localizedTexts(this.getKeyValue(this.filesData[i].status));
          if (this.fileList[i].classList.contains(UPLOAD_SUCCESS)) {
            this.fileList[i].querySelector(".e-icons").setAttribute("title", this.localizedTexts("delete"));
          }
          if (this.fileList[i].querySelector(".e-file-play-btn")) {
            this.fileList[i].querySelector(".e-icons").setAttribute("title", this.localizedTexts("resume"));
          }
          if (this.fileList[i].querySelector(".e-file-remove-btn")) {
            this.fileList[i].querySelector(".e-icons").setAttribute("title", this.localizedTexts("remove"));
          }
          if (this.fileList[i].querySelector(".e-file-reload-btn")) {
            this.fileList[i].querySelector(".e-icons").setAttribute("title", this.localizedTexts("retry"));
          }
          if (!this.autoUpload) {
            this.uploadButton.innerText = this.buttons.upload === "Upload" ? this.localizedTexts("Upload") : this.buttons.upload;
            this.uploadButton.setAttribute("title", this.localizedTexts("Upload"));
            this.clearButton.innerText = this.buttons.clear === "Clear" ? this.localizedTexts("Clear") : this.buttons.clear;
            this.clearButton.setAttribute("title", this.localizedTexts("Clear"));
          }
        }
      }
    };
    Uploader2.prototype.reRenderFileList = function() {
      if (this.listParent) {
        detach(this.listParent);
        this.listParent = null;
        this.fileList = [];
        this.internalCreateFileList(this.filesData);
        if (this.actionButtons) {
          this.removeActionButtons();
          this.renderActionButtons();
          this.checkActionButtonStatus();
        }
      }
    };
    Uploader2.prototype.preRender = function() {
      this.localeText = {
        Browse: "Browse...",
        Clear: "Clear",
        Upload: "Upload",
        invalidFileName: "File Name is not allowed",
        dropFilesHint: "Or drop files here",
        invalidMaxFileSize: "File size is too large",
        invalidMinFileSize: "File size is too small",
        invalidFileType: "File type is not allowed",
        uploadFailedMessage: "File failed to upload",
        uploadSuccessMessage: "File uploaded successfully",
        removedSuccessMessage: "File removed successfully",
        removedFailedMessage: "Unable to remove file",
        inProgress: "Uploading",
        readyToUploadMessage: "Ready to upload",
        abort: "Abort",
        remove: "Remove",
        cancel: "Cancel",
        delete: "Delete file",
        pauseUpload: "File upload paused",
        pause: "Pause",
        resume: "Resume",
        retry: "Retry",
        fileUploadCancel: "File upload canceled",
        invalidFileSelection: "Invalid files selected",
        totalFiles: "Total files",
        size: "Size"
      };
      this.l10n = new L10n("uploader", this.localeText, this.locale);
      this.preLocaleObj = getValue("currentLocale", this.l10n);
      this.formRendered();
      this.updateHTMLAttrToElement();
      this.checkHTMLAttributes(false);
      var ejInstance = getValue("ej2_instances", this.element);
      if (this.element.tagName === "EJS-UPLOADER") {
        var inputElement = this.createElement("input", {
          attrs: {
            type: "file"
          }
        });
        var index = 0;
        for (index; index < this.element.attributes.length; index++) {
          if (this.element.attributes[index].nodeName !== "id") {
            inputElement.setAttribute(this.element.attributes[index].nodeName, this.element.attributes[index].nodeValue);
          } else if (this.element.attributes[index].nodeName === "id") {
            inputElement.setAttribute(this.element.attributes[index].nodeName, getUniqueID("uploader"));
          }
          inputElement.innerHTML = this.element.innerHTML;
        }
        if (!inputElement.hasAttribute("name")) {
          inputElement.setAttribute("name", "UploadFiles");
        }
        this.element.appendChild(inputElement);
        this.element = inputElement;
        setValue("ej2_instances", ejInstance, this.element);
      }
      if (ejInstance[0].isPureReactComponent) {
        if (!isNullOrUndefined(ejInstance[0].props.name)) {
          this.element.setAttribute("name", ejInstance[0].props.name);
        } else if (!isNullOrUndefined(ejInstance[0].props.id) && isNullOrUndefined(ejInstance[0].props.name)) {
          this.element.setAttribute("name", ejInstance[0].props.id);
        } else {
          this.element.setAttribute("name", "UploadFiles");
        }
      }
      if (isNullOrUndefined(this.element.getAttribute("name"))) {
        this.element.setAttribute("name", this.element.getAttribute("id"));
      }
      if (!this.element.hasAttribute("type")) {
        this.element.setAttribute("type", "file");
      }
      this.updateDirectoryAttributes();
      this.keyConfigs = {
        enter: "enter"
      };
      if (this.element.hasAttribute("tabindex")) {
        this.tabIndex = this.element.getAttribute("tabindex");
      }
      this.browserName = Browser.info.name;
      this.uploaderName = this.element.getAttribute("name");
    };
    Uploader2.prototype.formRendered = function() {
      var parentEle = closest(this.element, "form");
      if (!isNullOrUndefined(parentEle)) {
        for (; parentEle && parentEle !== document.documentElement; parentEle = parentEle.parentElement) {
          if (parentEle.tagName === "FORM") {
            this.isForm = true;
            this.formElement = parentEle;
            parentEle.setAttribute("enctype", "multipart/form-data");
            parentEle.setAttribute("encoding", "multipart/form-data");
          }
        }
      }
    };
    Uploader2.prototype.getPersistData = function() {
      return this.addOnPersist(["filesData"]);
    };
    Uploader2.prototype.getModuleName = function() {
      return "uploader";
    };
    Uploader2.prototype.updateDirectoryAttributes = function() {
      if (this.directoryUpload) {
        this.element.setAttribute("directory", "true");
        this.element.setAttribute("webkitdirectory", "true");
      } else {
        this.element.removeAttribute("directory");
        this.element.removeAttribute("webkitdirectory");
      }
    };
    Uploader2.prototype.render = function() {
      this.renderBrowseButton();
      this.initializeUpload();
      this.updateHTMLAttrToWrapper();
      this.wireEvents();
      this.setMultipleSelection();
      this.setExtensions(this.allowedExtensions);
      this.setRTL();
      this.renderPreLoadFiles();
      this.setControlStatus();
      this.setCSSClass();
    };
    Uploader2.prototype.renderBrowseButton = function() {
      this.browseButton = this.createElement("button", {
        className: "e-css e-btn",
        attrs: {
          "type": "button"
        }
      });
      this.browseButton.setAttribute("tabindex", this.tabIndex);
      if (typeof this.buttons.browse === "string") {
        this.browseButton.textContent = this.buttons.browse === "Browse..." ? this.localizedTexts("Browse") : this.buttons.browse;
        this.browseButton.setAttribute("title", this.browseButton.innerText);
      } else {
        this.browseButton.appendChild(this.buttons.browse);
      }
      this.element.setAttribute("aria-label", "Uploader");
    };
    Uploader2.prototype.renderActionButtons = function() {
      this.element.setAttribute("tabindex", "-1");
      this.actionButtons = this.createElement("div", {
        className: ACTION_BUTTONS
      });
      this.uploadButton = this.createElement("button", {
        className: UPLOAD_BUTTONS,
        attrs: {
          "type": "button",
          "tabindex": this.btnTabIndex,
          "aria-label": this.localizedTexts("Upload")
        }
      });
      this.clearButton = this.createElement("button", {
        className: CLEAR_BUTTONS,
        attrs: {
          "type": "button",
          "tabindex": this.btnTabIndex,
          "aria-label": this.localizedTexts("Clear")
        }
      });
      this.actionButtons.appendChild(this.clearButton);
      this.actionButtons.appendChild(this.uploadButton);
      this.renderButtonTemplates();
      this.uploadWrapper.appendChild(this.actionButtons);
      this.browseButton.blur();
      if (!this.isPreloadFiles) {
        this.uploadButton.focus();
      }
      this.wireActionButtonEvents();
    };
    Uploader2.prototype.serverActionButtonsEventBind = function(element2) {
      if (element2 && !this.isForm) {
        this.browseButton.blur();
        this.actionButtons = element2;
        this.uploadButton = this.actionButtons.querySelector(".e-file-upload-btn");
        this.clearButton = this.actionButtons.querySelector(".e-file-clear-btn");
        this.uploadButton.focus();
        this.unwireActionButtonEvents();
        this.wireActionButtonEvents();
        this.checkActionButtonStatus();
      }
    };
    Uploader2.prototype.wireActionButtonEvents = function() {
      EventHandler.add(this.uploadButton, "click", this.uploadButtonClick, this);
      EventHandler.add(this.clearButton, "click", this.clearButtonClick, this);
    };
    Uploader2.prototype.unwireActionButtonEvents = function() {
      EventHandler.remove(this.uploadButton, "click", this.uploadButtonClick);
      EventHandler.remove(this.clearButton, "click", this.clearButtonClick);
    };
    Uploader2.prototype.removeActionButtons = function() {
      if (this.actionButtons) {
        this.unwireActionButtonEvents();
        detach(this.actionButtons);
        this.actionButtons = null;
      }
    };
    Uploader2.prototype.renderButtonTemplates = function() {
      if (typeof this.buttons.browse === "string") {
        this.browseButton.textContent = this.buttons.browse === "Browse..." ? this.localizedTexts("Browse") : this.buttons.browse;
        this.browseButton.setAttribute("title", this.browseButton.textContent);
      } else {
        this.browseButton.innerHTML = "";
        this.browseButton.appendChild(this.buttons.browse);
      }
      if (this.uploadButton) {
        var uploadText = isNullOrUndefined(this.buttons.upload) ? "Upload" : this.buttons.upload;
        this.buttons.upload = uploadText;
        if (typeof this.buttons.upload === "string") {
          this.uploadButton.textContent = this.buttons.upload === "Upload" ? this.localizedTexts("Upload") : this.buttons.upload;
          this.uploadButton.setAttribute("title", this.uploadButton.textContent);
        } else {
          this.uploadButton.innerHTML = "";
          this.uploadButton.appendChild(this.buttons.upload);
        }
      }
      if (this.clearButton) {
        var clearText = isNullOrUndefined(this.buttons.clear) ? "Clear" : this.buttons.clear;
        this.buttons.clear = clearText;
        if (typeof this.buttons.clear === "string") {
          this.clearButton.textContent = this.buttons.clear === "Clear" ? this.localizedTexts("Clear") : this.buttons.clear;
          this.clearButton.setAttribute("title", this.clearButton.textContent);
        } else {
          this.clearButton.innerHTML = "";
          this.clearButton.appendChild(this.buttons.clear);
        }
      }
    };
    Uploader2.prototype.initializeUpload = function() {
      this.element.setAttribute("tabindex", "-1");
      var inputWrapper = this.createElement("span", {
        className: INPUT_WRAPPER
      });
      this.element.parentElement.insertBefore(inputWrapper, this.element);
      this.dropAreaWrapper = this.createElement("div", {
        className: DROP_WRAPPER
      });
      this.element.parentElement.insertBefore(this.dropAreaWrapper, this.element);
      inputWrapper.appendChild(this.element);
      this.dropAreaWrapper.appendChild(this.browseButton);
      this.dropAreaWrapper.appendChild(inputWrapper);
      this.uploadWrapper = this.createElement("div", {
        className: CONTROL_WRAPPER
      });
      this.dropAreaWrapper.parentElement.insertBefore(this.uploadWrapper, this.dropAreaWrapper);
      this.uploadWrapper.appendChild(this.dropAreaWrapper);
      this.setDropArea();
    };
    Uploader2.prototype.renderPreLoadFiles = function() {
      if (this.files.length) {
        if (this.enablePersistence && this.filesData.length) {
          this.internalCreateFileList(this.filesData);
          return;
        }
        if (isNullOrUndefined(this.files[0].size)) {
          return;
        }
        this.isPreloadFiles = true;
        var files = [].slice.call(this.files);
        var filesData = [];
        if (!this.multiple) {
          this.clearData();
          files = [files[0]];
        }
        for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {
          var data = files_1[_i];
          var fileData = {
            name: data.name + "." + data.type.split(".")[data.type.split(".").length - 1],
            rawFile: "",
            size: data.size,
            status: this.localizedTexts("uploadSuccessMessage"),
            type: data.type,
            validationMessages: {
              minSize: "",
              maxSize: ""
            },
            statusCode: "2"
          };
          filesData.push(fileData);
          this.filesData.push(fileData);
        }
        this.internalCreateFileList(filesData);
        if (!this.autoUpload && this.listParent && !this.actionButtons && (!this.isForm || this.allowUpload()) && this.showFileList) {
          this.renderActionButtons();
        }
        this.checkActionButtonStatus();
        if (this.sequentialUpload) {
          this.count = this.filesData.length - 1;
        }
        this.isPreloadFiles = false;
      }
    };
    Uploader2.prototype.checkActionButtonStatus = function() {
      if (this.actionButtons) {
        var length_1 = this.uploadWrapper.querySelectorAll("." + VALIDATION_FAILS).length + this.uploadWrapper.querySelectorAll(".e-upload-fails:not(.e-upload-progress)").length + this.uploadWrapper.querySelectorAll("span." + UPLOAD_SUCCESS).length + this.uploadWrapper.querySelectorAll("span." + UPLOAD_INPROGRESS).length;
        if (length_1 > 0 && length_1 === this.uploadWrapper.querySelectorAll("li").length) {
          this.uploadButton.setAttribute("disabled", "disabled");
        } else {
          this.uploadButton.removeAttribute("disabled");
        }
      }
    };
    Uploader2.prototype.setDropArea = function() {
      var dropTextArea = this.dropAreaWrapper.querySelector(".e-file-drop");
      if (this.dropArea) {
        this.dropZoneElement = typeof this.dropArea !== "string" ? this.dropArea : select(this.dropArea, document);
        var element2 = this.element;
        var enableDropText = false;
        while (element2.parentNode) {
          element2 = element2.parentNode;
          if (element2 === this.dropZoneElement) {
            enableDropText = true;
            if (!dropTextArea) {
              this.createDropTextHint();
            } else {
              dropTextArea.innerHTML = this.localizedTexts("dropFilesHint");
            }
          }
        }
        if (!enableDropText && dropTextArea) {
          remove(dropTextArea);
        }
      } else if (!isNullOrUndefined(this.uploaderOptions) && this.uploaderOptions.dropArea === void 0) {
        this.createDropTextHint();
        this.dropZoneElement = this.uploadWrapper;
        this.setProperties({
          dropArea: this.uploadWrapper
        }, true);
      }
      this.bindDropEvents();
    };
    Uploader2.prototype.updateDropArea = function() {
      if (this.dropArea) {
        this.setDropArea();
      } else {
        this.dropZoneElement = null;
        var dropTextArea = this.dropAreaWrapper.querySelector(".e-file-drop");
        if (dropTextArea) {
          remove(dropTextArea);
        }
      }
    };
    Uploader2.prototype.createDropTextHint = function() {
      var fileDropArea = this.createElement("span", {
        className: DROP_AREA
      });
      fileDropArea.innerHTML = this.localizedTexts("dropFilesHint");
      this.dropAreaWrapper.appendChild(fileDropArea);
    };
    Uploader2.prototype.updateHTMLAttrToElement = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var pro = _a[_i];
          if (wrapperAttr2.indexOf(pro) < 0) {
            this.element.setAttribute(pro, this.htmlAttributes["" + pro]);
          }
        }
      }
    };
    Uploader2.prototype.updateHTMLAttrToWrapper = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var pro = _a[_i];
          if (wrapperAttr2.indexOf(pro) > -1) {
            if (pro === "class") {
              var updatedClassValues = this.htmlAttributes["" + pro].replace(/\s+/g, " ").trim();
              if (updatedClassValues !== "") {
                addClass([this.uploadWrapper], updatedClassValues.split(" "));
              }
            } else if (pro === "style") {
              var uploadStyle = this.uploadWrapper.getAttribute(pro);
              uploadStyle = !isNullOrUndefined(uploadStyle) ? uploadStyle + this.htmlAttributes["" + pro] : this.htmlAttributes["" + pro];
              this.uploadWrapper.setAttribute(pro, uploadStyle);
            } else {
              this.uploadWrapper.setAttribute(pro, this.htmlAttributes["" + pro]);
            }
          }
        }
      }
    };
    Uploader2.prototype.setMultipleSelection = function() {
      if (this.multiple && !this.element.hasAttribute("multiple")) {
        var newAttr = document.createAttribute("multiple");
        newAttr.value = "multiple";
        this.element.setAttributeNode(newAttr);
      } else if (!this.multiple) {
        this.element.removeAttribute("multiple");
      }
    };
    Uploader2.prototype.checkAutoUpload = function(fileData) {
      if (this.autoUpload) {
        if (this.sequentialUpload) {
          this.sequenceUpload(fileData);
        } else {
          this.upload(fileData);
        }
        this.removeActionButtons();
      } else if (!this.actionButtons) {
        this.renderActionButtons();
      }
      this.checkActionButtonStatus();
    };
    Uploader2.prototype.sequenceUpload = function(fileData) {
      if (this.filesData.length - fileData.length === 0 || this.filesData[this.filesData.length - fileData.length - 1].statusCode !== "1") {
        if (this.multiple || this.count < 0) {
          ++this.count;
        }
        var isFileListCreated = this.showFileList ? false : true;
        if (typeof this.filesData[this.count] === "object") {
          this.isFirstFileOnSelection = false;
          this.upload(this.filesData[this.count], isFileListCreated);
          if (this.filesData[this.count].statusCode === "0") {
            this.sequenceUpload(fileData);
          }
        } else {
          --this.count;
        }
      }
    };
    Uploader2.prototype.setCSSClass = function(oldCSSClass) {
      var updatedOldCssClass = oldCSSClass;
      if (!isNullOrUndefined(oldCSSClass)) {
        updatedOldCssClass = oldCSSClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(oldCSSClass) && updatedOldCssClass !== "") {
        removeClass([this.uploadWrapper], updatedOldCssClass.split(" "));
      }
      var updatedCssClassValue = this.cssClass;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        updatedCssClassValue = this.cssClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(this.cssClass) && updatedCssClassValue !== "") {
        addClass([this.uploadWrapper], updatedCssClassValue.split(updatedCssClassValue.indexOf(",") > -1 ? "," : " "));
      }
    };
    Uploader2.prototype.wireEvents = function() {
      EventHandler.add(this.browseButton, "click", this.browseButtonClick, this);
      EventHandler.add(this.element, "change", this.onSelectFiles, this);
      EventHandler.add(document, "click", this.removeFocus, this);
      this.keyboardModule = new KeyboardEvents(this.uploadWrapper, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
      if (this.isForm) {
        EventHandler.add(this.formElement, "reset", this.resetForm, this);
      }
    };
    Uploader2.prototype.unWireEvents = function() {
      EventHandler.remove(this.browseButton, "click", this.browseButtonClick);
      EventHandler.remove(this.element, "change", this.onSelectFiles);
      EventHandler.remove(document, "click", this.removeFocus);
      if (this.isForm) {
        EventHandler.remove(this.formElement, "reset", this.resetForm);
      }
      if (this.keyboardModule) {
        this.keyboardModule.destroy();
      }
    };
    Uploader2.prototype.resetForm = function() {
      this.clearAll();
    };
    Uploader2.prototype.keyActionHandler = function(e) {
      var targetElement2 = e.target;
      switch (e.action) {
        case "enter":
          if (e.target === this.clearButton) {
            this.clearButtonClick();
          } else if (e.target === this.uploadButton) {
            this.uploadButtonClick();
          } else if (e.target === this.browseButton) {
            this.browseButtonClick();
          } else if (targetElement2.classList.contains(PAUSE_UPLOAD)) {
            var metaData = this.getCurrentMetaData(null, e);
            metaData.file.statusCode = "4";
            metaData.file.status = this.localizedTexts("pauseUpload");
            this.abortUpload(metaData, false);
          } else if (targetElement2.classList.contains(RESUME_UPLOAD)) {
            this.resumeUpload(this.getCurrentMetaData(null, e), e);
          } else if (targetElement2.classList.contains(RETRY_ICON)) {
            var metaData = this.getCurrentMetaData(null, e);
            if (!isNullOrUndefined(metaData)) {
              metaData.file.statusCode = "1";
              metaData.file.status = this.localizedTexts("readyToUploadMessage");
              this.chunkUpload(metaData.file);
            } else {
              var target = e.target.parentElement;
              var fileData = this.filesData[this.fileList.indexOf(target)];
              this.retry(fileData);
            }
          } else {
            this.removeFiles(e);
            if (!targetElement2.classList.contains(ABORT_ICON)) {
              this.browseButton.focus();
            }
          }
          e.preventDefault();
          e.stopPropagation();
          break;
      }
    };
    Uploader2.prototype.getCurrentMetaData = function(fileInfo, e) {
      var fileData;
      var targetMetaData;
      if (isNullOrUndefined(fileInfo)) {
        var target = e.target.parentElement;
        fileData = this.filesData[this.fileList.indexOf(target)];
      } else {
        fileData = fileInfo;
      }
      for (var i = 0; i < this.uploadMetaData.length; i++) {
        if (this.uploadMetaData[i].file.name === fileData.name) {
          targetMetaData = this.uploadMetaData[i];
        }
      }
      return targetMetaData;
    };
    Uploader2.prototype.removeFocus = function() {
      if (this.uploadWrapper && this.listParent && this.listParent.querySelector("." + ICON_FOCUSED)) {
        document.activeElement.blur();
        this.listParent.querySelector("." + ICON_FOCUSED).classList.remove(ICON_FOCUSED);
      }
    };
    Uploader2.prototype.browseButtonClick = function() {
      this.element.click();
    };
    Uploader2.prototype.uploadButtonClick = function() {
      if (this.sequentialUpload) {
        this.sequenceUpload(this.filesData);
      } else {
        this.upload(this.filesData);
      }
    };
    Uploader2.prototype.clearButtonClick = function() {
      this.clearAll();
      if (this.sequentialUpload) {
        this.count = -1;
      }
      this.actionCompleteCount = 0;
    };
    Uploader2.prototype.bindDropEvents = function() {
      if (this.dropZoneElement) {
        EventHandler.add(this.dropZoneElement, "drop", this.dropElement, this);
        EventHandler.add(this.dropZoneElement, "dragover", this.dragHover, this);
        EventHandler.add(this.dropZoneElement, "dragleave", this.onDragLeave, this);
        EventHandler.add(this.dropZoneElement, "paste", this.onPasteFile, this);
        EventHandler.add(this.dropZoneElement, "dragenter", this.onDragEnter, this);
      }
    };
    Uploader2.prototype.unBindDropEvents = function() {
      if (this.dropZoneElement) {
        EventHandler.remove(this.dropZoneElement, "drop", this.dropElement);
        EventHandler.remove(this.dropZoneElement, "dragover", this.dragHover);
        EventHandler.remove(this.dropZoneElement, "dragleave", this.onDragLeave);
        EventHandler.remove(this.dropZoneElement, "dragenter", this.onDragEnter);
      }
    };
    Uploader2.prototype.onDragEnter = function(e) {
      if (!this.enabled) {
        return;
      }
      this.dropZoneElement.classList.add(DRAG_HOVER);
      this.dragCounter = this.dragCounter + 1;
      e.preventDefault();
      e.stopPropagation();
    };
    Uploader2.prototype.onDragLeave = function() {
      if (!this.enabled) {
        return;
      }
      this.dragCounter = this.dragCounter - 1;
      if (!this.dragCounter) {
        this.dropZoneElement.classList.remove(DRAG_HOVER);
      }
    };
    Uploader2.prototype.dragHover = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.dropEffect !== "Default") {
        e.dataTransfer.dropEffect = this.dropEffect.toLowerCase();
      }
      e.preventDefault();
      e.stopPropagation();
    };
    Uploader2.prototype.dropElement = function(e) {
      this.dragCounter = 0;
      this.dropZoneElement.classList.remove(DRAG_HOVER);
      this.onSelectFiles(e);
      e.preventDefault();
      e.stopPropagation();
    };
    Uploader2.prototype.onPasteFile = function(event2) {
      var item = event2.clipboardData.items;
      if (event2.type === "paste" && this.browserName !== "msie" && this.browserName !== "edge" && this.browserName !== "safari") {
        this.element.files = event2.clipboardData.files;
      }
      if (item.length !== 1 && !this.multiple) {
        return;
      }
      for (var file = 0; file < item.length; file++) {
        var pasteFile = [].slice.call(item)[file];
        if (!isNullOrUndefined(pasteFile.getAsFile()) && (pasteFile.kind === "file" || pasteFile.type.match("^image/"))) {
          this.renderSelectedFiles(event2, [pasteFile.getAsFile()], false, true);
        }
      }
    };
    Uploader2.prototype.getSelectedFiles = function(index) {
      var data = [];
      var liElement = this.fileList[index];
      var allFiles = this.getFilesData();
      var nameElements = +liElement.getAttribute("data-files-count");
      var startIndex = 0;
      for (var i = 0; i < index; i++) {
        startIndex += +this.fileList[i].getAttribute("data-files-count");
      }
      for (var j = startIndex; j < startIndex + nameElements; j++) {
        data.push(allFiles[j]);
      }
      return data;
    };
    Uploader2.prototype.removeFiles = function(args) {
      if (!this.enabled) {
        return;
      }
      var selectedElement = args.target.parentElement;
      var index = this.fileList.indexOf(selectedElement);
      var liElement = this.fileList[index];
      var formUpload = this.isFormUpload();
      var fileData = formUpload ? this.getSelectedFiles(index) : this.getFilesInArray(this.filesData[index]);
      if (isNullOrUndefined(fileData)) {
        return;
      }
      if (args.target.classList.contains(ABORT_ICON) && !formUpload) {
        fileData[0].statusCode = "5";
        if (!isNullOrUndefined(liElement)) {
          var spinnerTarget = liElement.querySelector("." + ABORT_ICON);
          createSpinner({
            target: spinnerTarget,
            width: "20px"
          });
          showSpinner(spinnerTarget);
        }
        if (this.sequentialUpload) {
          this.uploadSequential();
        }
        if (!liElement.classList.contains(RESTRICT_RETRY)) {
          this.checkActionComplete(true);
        }
      } else if (!closest(args.target, "." + SPINNER_PANE)) {
        this.remove(fileData, false, false, true, args);
      }
      if (this.isForm && liElement && liElement.classList.contains(INVALID_FILE)) {
        this.element.value = "";
      }
      this.checkActionButtonStatus();
      if (this.actionButtons && this.clearButton && this.uploadWrapper) {
        var progressBarElements = this.uploadWrapper.querySelectorAll(".e-upload-progress-bar.e-upload-progress:not(.e-upload-success):not(.e-upload-fails)");
        if (progressBarElements.length === 1 && selectedElement.contains(progressBarElements[0]) && this.clearButton.hasAttribute("disabled")) {
          this.clearButton.removeAttribute("disabled");
        }
      }
    };
    Uploader2.prototype.removeFilesData = function(file, customTemplate) {
      var index;
      if (customTemplate) {
        if (!this.showFileList) {
          index = this.filesData.indexOf(file);
          this.filesData.splice(index, 1);
        }
        return;
      }
      var selectedElement = this.getLiElement(file);
      if (isNullOrUndefined(selectedElement)) {
        return;
      }
      this.element.value = "";
      detach(selectedElement);
      index = this.fileList.indexOf(selectedElement);
      this.fileList.splice(index, 1);
      this.filesData.splice(index, 1);
      if (this.fileList.length === 0 && !isNullOrUndefined(this.listParent)) {
        detach(this.listParent);
        this.listParent = null;
        this.removeActionButtons();
      }
      if (this.sequentialUpload) {
        if (index <= this.count) {
          --this.count;
        }
      }
    };
    Uploader2.prototype.removeUploadedFile = function(file, eventArgs, removeDirectly, custom) {
      var _this = this;
      var selectedFiles = file;
      var ajax = new Ajax(this.asyncSettings.removeUrl, "POST", true, null);
      ajax.emitError = false;
      var formData = new FormData();
      ajax.beforeSend = function(e) {
        eventArgs.currentRequest = ajax.httpRequest;
        if (!removeDirectly) {
          _this.trigger("removing", eventArgs, function(eventArgs2) {
            if (eventArgs2.cancel) {
              e.cancel = true;
            } else {
              _this.removingEventCallback(eventArgs2, formData, selectedFiles, file);
            }
          });
        } else {
          _this.removingEventCallback(eventArgs, formData, selectedFiles, file);
        }
      };
      ajax.onLoad = function(e) {
        _this.removeCompleted(e, selectedFiles, custom);
        return {};
      };
      ajax.onError = function(e) {
        _this.removeFailed(e, selectedFiles, custom);
        return {};
      };
      ajax.send(formData);
    };
    Uploader2.prototype.removingEventCallback = function(eventArgs, formData, selectedFiles, file) {
      var name = this.element.getAttribute("name");
      var liElement = this.getLiElement(file);
      if (!isNullOrUndefined(liElement) && (!isNullOrUndefined(liElement.querySelector("." + DELETE_ICON)) || !isNullOrUndefined(liElement.querySelector("." + REMOVE_ICON)))) {
        var spinnerTarget = liElement.querySelector("." + DELETE_ICON) ? liElement.querySelector("." + DELETE_ICON) : liElement.querySelector("." + REMOVE_ICON);
        createSpinner({
          target: spinnerTarget,
          width: "20px"
        });
        showSpinner(spinnerTarget);
      }
      if (eventArgs.postRawFile && !isNullOrUndefined(selectedFiles.rawFile) && selectedFiles.rawFile !== "") {
        formData.append(name, selectedFiles.rawFile, selectedFiles.name);
      } else {
        formData.append(name, selectedFiles.name);
      }
      this.updateFormData(formData, eventArgs.customFormData);
    };
    Uploader2.prototype.updateFormData = function(formData, customData) {
      if (customData.length > 0 && customData[0]) {
        var _loop_1 = function(i2) {
          var data = customData[i2];
          var value = Object.keys(data).map(function(e) {
            return data["" + e];
          });
          formData.append(Object.keys(data)[0], value);
        };
        for (var i = 0; i < customData.length; i++) {
          _loop_1(i);
        }
      }
    };
    Uploader2.prototype.updateCustomheader = function(request, currentRequest) {
      if (currentRequest.length > 0 && currentRequest[0]) {
        var _loop_2 = function(i2) {
          var data = currentRequest[i2];
          var value = Object.keys(data).map(function(e) {
            return data["" + e];
          });
          request.setRequestHeader(Object.keys(data)[0], value);
        };
        for (var i = 0; i < currentRequest.length; i++) {
          _loop_2(i);
        }
      }
    };
    Uploader2.prototype.removeCompleted = function(e, files, customTemplate) {
      var response = e && e.currentTarget ? this.getResponse(e) : null;
      var status = e.target;
      if (status.readyState === 4 && status.status >= 200 && status.status <= 299) {
        var args = {
          e,
          response,
          operation: "remove",
          file: this.updateStatus(files, this.localizedTexts("removedSuccessMessage"), "2")
        };
        this.trigger("success", args);
        this.removeFilesData(files, customTemplate);
        var index = this.uploadedFilesData.indexOf(files);
        this.uploadedFilesData.splice(index, 1);
        this.trigger("change", {
          files: this.uploadedFilesData
        });
      } else {
        this.removeFailed(e, files, customTemplate);
      }
    };
    Uploader2.prototype.removeFailed = function(e, files, customTemplate) {
      var response = e && e.currentTarget ? this.getResponse(e) : null;
      var args = {
        e,
        response,
        operation: "remove",
        file: this.updateStatus(files, this.localizedTexts("removedFailedMessage"), "0")
      };
      if (!customTemplate) {
        var index = this.filesData.indexOf(files);
        var rootElement = this.fileList[index];
        if (rootElement) {
          rootElement.classList.remove(UPLOAD_SUCCESS);
          rootElement.classList.add(UPLOAD_FAILED);
          var statusElement = rootElement.querySelector("." + STATUS);
          if (statusElement) {
            statusElement.classList.remove(UPLOAD_SUCCESS);
            statusElement.classList.add(UPLOAD_FAILED);
          }
        }
        this.checkActionButtonStatus();
      }
      this.trigger("failure", args);
      var liElement = this.getLiElement(files);
      if (!isNullOrUndefined(liElement) && !isNullOrUndefined(liElement.querySelector("." + DELETE_ICON))) {
        var spinnerTarget = liElement.querySelector("." + DELETE_ICON);
        hideSpinner(spinnerTarget);
        detach(liElement.querySelector(".e-spinner-pane"));
      }
    };
    Uploader2.prototype.getFilesFromFolder = function(event2) {
      this.filesEntries = [];
      var items = this.multiple ? event2.dataTransfer.items : [event2.dataTransfer.items[0]];
      var validDirectoryUpload = this.checkDirectoryUpload(items);
      if (!validDirectoryUpload) {
        return;
      }
      var _loop_3 = function(i2) {
        var item = items[i2].webkitGetAsEntry();
        if (item.isFile) {
          var files_2 = [];
          item.file(function(fileObj) {
            var path = item.fullPath;
            files_2.push({
              "path": path,
              "file": fileObj
            });
          });
          this_1.renderSelectedFiles(event2, files_2, true);
        } else if (item.isDirectory) {
          this_1.traverseFileTree(item, event2);
        }
      };
      var this_1 = this;
      for (var i = 0; i < items.length; i++) {
        _loop_3(i);
      }
    };
    Uploader2.prototype.checkDirectoryUpload = function(items) {
      for (var i = 0; items && i < items.length; i++) {
        var item = items[i].webkitGetAsEntry();
        if (item.isDirectory) {
          return true;
        }
      }
      return false;
    };
    Uploader2.prototype.traverseFileTree = function(item, event2) {
      if (item.isFile) {
        this.filesEntries.push(item);
      } else if (item.isDirectory) {
        var directoryReader = item.createReader();
        this.readFileFromDirectory(directoryReader, event2);
      }
    };
    Uploader2.prototype.readFileFromDirectory = function(directoryReader, event2) {
      var _this = this;
      directoryReader.readEntries(function(entries) {
        for (var i = 0; i < entries.length; i++) {
          _this.traverseFileTree(entries[i], event2);
        }
        _this.pushFilesEntries(event2);
        if (entries.length) {
          _this.readFileFromDirectory(directoryReader);
        }
      });
    };
    Uploader2.prototype.pushFilesEntries = function(event2) {
      var _this = this;
      var files = [];
      var _loop_4 = function(i2) {
        this_2.filesEntries[i2].file(function(fileObj) {
          if (_this.filesEntries.length) {
            var path = _this.filesEntries[i2].fullPath;
            files.push({
              "path": path,
              "file": fileObj
            });
            if (i2 === _this.filesEntries.length - 1) {
              _this.filesEntries = [];
              _this.renderSelectedFiles(event2, files, true);
            }
          }
        });
      };
      var this_2 = this;
      for (var i = 0; i < this.filesEntries.length; i++) {
        _loop_4(i);
      }
    };
    Uploader2.prototype.onSelectFiles = function(args) {
      if (!this.enabled) {
        return;
      }
      var targetFiles;
      if (args.type === "drop") {
        if (this.directoryUpload) {
          this.getFilesFromFolder(args);
        } else {
          var files = this.sortFilesList = args.dataTransfer.files;
          if (this.browserName !== "msie" && this.browserName !== "edge" && this.browserName !== "safari") {
            this.element.files = files;
          }
          if (files.length > 0) {
            targetFiles = this.multiple ? this.sortFileList(files) : [files[0]];
            this.renderSelectedFiles(args, targetFiles);
          }
        }
      } else {
        targetFiles = [].slice.call(args.target.files);
        this.renderSelectedFiles(args, targetFiles);
      }
      if (this.isAngular || this.isReact) {
        args.stopPropagation();
      }
    };
    Uploader2.prototype.getBase64 = function(file) {
      return new Promise(function(resolve, reject) {
        var fileReader = new FileReader();
        fileReader.readAsDataURL(file);
        fileReader.onload = function() {
          return resolve(fileReader.result);
        };
        fileReader.onerror = function(error) {
          return reject(error);
        };
      });
    };
    Uploader2.prototype.renderSelectedFiles = function(args, targetFiles, directory, paste) {
      var _this = this;
      this.base64String = [];
      var eventArgs = {
        event: args,
        cancel: false,
        filesData: [],
        isModified: false,
        modifiedFilesData: [],
        progressInterval: "",
        isCanceled: false,
        currentRequest: null,
        customFormData: null
      };
      if (targetFiles.length < 1) {
        eventArgs.isCanceled = true;
        this.trigger("selected", eventArgs);
        return;
      }
      this.flag = true;
      var fileData = [];
      if (!this.multiple) {
        this.clearData(true);
        this.actionCompleteCount = 0;
        targetFiles = [targetFiles[0]];
      }
      for (var i = 0; i < targetFiles.length; i++) {
        var file = directory ? targetFiles[i].file : targetFiles[i];
        this.updateInitialFileDetails(args, targetFiles, file, i, fileData, directory, paste);
      }
      eventArgs.filesData = fileData;
      if (!isNullOrUndefined(this.allowedExtensions) && this.allowedExtensions.indexOf("*") > -1) {
        this.allTypes = true;
      }
      if (this.enableHtmlSanitizer) {
        for (var i = 0; i < fileData.length; i++) {
          var sanitizeFile = SanitizeHtmlHelper.beforeSanitize();
          var sanitizeFileName = SanitizeHtmlHelper.serializeValue(sanitizeFile, fileData[parseInt(i.toString(), 10)].name);
          var currentFileName = fileData[parseInt(i.toString(), 10)].name;
          var isUTF8 = false;
          for (var i_1 = 0; i_1 < currentFileName.length; i_1++) {
            if (currentFileName.charCodeAt(i_1) > 127) {
              isUTF8 = true;
              break;
            }
          }
          var htmlTagRegex = /<([a-z][a-z0-9]*)\b[^>]*>(.*?)<\/\1>/i;
          var hasHTMLString = htmlTagRegex.test(currentFileName);
          if (sanitizeFileName !== fileData[parseInt(i.toString(), 10)].name && !(isUTF8 && !hasHTMLString)) {
            var encodedFileName = targetFiles[parseInt(i.toString(), 10)].name.replace(/[\u00A0-\u9999<>\\&]/g, function(i2) {
              return "&#" + i2.charCodeAt(0) + ";";
            });
            fileData[parseInt(i.toString(), 10)].name = encodedFileName;
            fileData[parseInt(i.toString(), 10)].status = this.localizedTexts("invalidFileName");
            fileData[parseInt(i.toString(), 10)].statusCode = "0";
          }
        }
      }
      if (!this.allTypes) {
        fileData = this.checkExtension(fileData);
      }
      this.trigger("selected", eventArgs, function(eventArgs2) {
        _this._internalRenderSelect(eventArgs2, fileData);
      });
    };
    Uploader2.prototype.updateInitialFileDetails = function(args, targetFiles, file, i, fileData, directory, paste) {
      var fileName = directory ? targetFiles[i].path.substring(1, targetFiles[i].path.length) : paste ? getUniqueID(file.name.substring(0, file.name.lastIndexOf("."))) + "." + this.getFileType(file.name) : this.directoryUpload ? targetFiles[i].webkitRelativePath : file.name;
      var fileDetails = {
        name: fileName,
        rawFile: file,
        size: file.size,
        status: this.localizedTexts("readyToUploadMessage"),
        type: this.getFileType(file.name),
        validationMessages: this.validatedFileSize(file.size),
        statusCode: "1",
        id: getUniqueID(file.name.substring(0, file.name.lastIndexOf("."))) + "." + this.getFileType(file.name)
      };
      if (paste) {
        fileDetails.fileSource = "paste";
      }
      fileDetails.status = fileDetails.validationMessages.minSize !== "" ? this.localizedTexts("invalidMinFileSize") : fileDetails.validationMessages.maxSize !== "" ? this.localizedTexts("invalidMaxFileSize") : fileDetails.status;
      if (fileDetails.validationMessages.minSize !== "" || fileDetails.validationMessages.maxSize !== "") {
        fileDetails.statusCode = "0";
        this.checkActionComplete(true);
      }
      fileData.push(fileDetails);
    };
    Uploader2.prototype._internalRenderSelect = function(eventArgs, fileData) {
      if (!eventArgs.cancel) {
        this.selectedFiles = this.selectedFiles.concat(fileData);
        this.btnTabIndex = this.disableKeyboardNavigation ? "-1" : "0";
        if (this.showFileList) {
          if (eventArgs.isModified && eventArgs.modifiedFilesData.length > 0) {
            for (var j = 0; j < eventArgs.modifiedFilesData.length; j++) {
              for (var k = 0; k < fileData.length; k++) {
                if (eventArgs.modifiedFilesData[j].id === fileData[k].id) {
                  eventArgs.modifiedFilesData[j].rawFile = fileData[k].rawFile;
                }
              }
            }
            var dataFiles = this.allTypes ? eventArgs.modifiedFilesData : this.checkExtension(eventArgs.modifiedFilesData);
            this.updateSortedFileList(dataFiles);
            this.filesData = this.filesData.concat(dataFiles);
            if (!this.isForm || this.allowUpload()) {
              this.checkAutoUpload(dataFiles);
            }
          } else {
            this.internalCreateFileList(fileData);
            if (this.autoUpload && this.sequenceUpload && this.sequentialUpload && this.filesData.length > 0 && this.filesData[this.filesData.length - 1].statusCode !== "2" && this.filesData[this.filesData.length - 1].statusCode !== "0") {
              this.filesData = this.filesData.concat(fileData);
              return;
            }
            this.filesData = this.filesData.concat(fileData);
            if (!this.isForm || this.allowUpload()) {
              this.checkAutoUpload(fileData);
            }
          }
          if (!isNullOrUndefined(eventArgs.progressInterval) && eventArgs.progressInterval !== "") {
            this.progressInterval = eventArgs.progressInterval;
          }
        } else {
          this.filesData = this.filesData.concat(fileData);
          if (this.autoUpload) {
            this.upload(this.filesData, true);
          }
        }
        this.raiseActionComplete();
        this.isFirstFileOnSelection = true;
      }
    };
    Uploader2.prototype.allowUpload = function() {
      var allowFormUpload = false;
      if (this.isForm && !isNullOrUndefined(this.asyncSettings.saveUrl) && this.asyncSettings.saveUrl !== "") {
        allowFormUpload = true;
      }
      return allowFormUpload;
    };
    Uploader2.prototype.isFormUpload = function() {
      var isFormUpload = false;
      if (this.isForm && (isNullOrUndefined(this.asyncSettings.saveUrl) || this.asyncSettings.saveUrl === "") && (isNullOrUndefined(this.asyncSettings.removeUrl) || this.asyncSettings.removeUrl === "")) {
        isFormUpload = true;
      }
      return isFormUpload;
    };
    Uploader2.prototype.clearData = function(singleUpload) {
      if (!isNullOrUndefined(this.listParent)) {
        detach(this.listParent);
        this.listParent = null;
      }
      if (this.browserName !== "msie" && !singleUpload) {
        this.element.value = "";
      }
      this.fileList = [];
      this.filesData = [];
      this.removeActionButtons();
    };
    Uploader2.prototype.updateSortedFileList = function(filesData) {
      var previousListClone = this.createElement("div", {
        id: "clonewrapper"
      });
      var added = -1;
      if (this.listParent) {
        for (var i = 0; i < this.listParent.querySelectorAll("li").length; i++) {
          var liElement = this.listParent.querySelectorAll("li")[i];
          previousListClone.appendChild(liElement.cloneNode(true));
        }
        this.removeActionButtons();
        var oldList = [].slice.call(previousListClone.childNodes);
        this.createParentUL();
        for (var index = 0; index < filesData.length; index++) {
          for (var j = 0; j < this.filesData.length; j++) {
            if (this.filesData[j].name === filesData[index].name) {
              this.listParent.appendChild(oldList[j]);
              EventHandler.add(oldList[j].querySelector(".e-icons"), "click", this.removeFiles, this);
              this.fileList.push(oldList[j]);
              added = index;
            }
          }
          if (added !== index) {
            this.internalCreateFileList([filesData[index]]);
          }
        }
      } else {
        this.internalCreateFileList(filesData);
      }
    };
    Uploader2.prototype.isBlank = function(str) {
      return !str || /^\s*$/.test(str);
    };
    Uploader2.prototype.checkGenericExtension = function(genericType, fileExtension) {
      var validExtensions = [];
      switch (genericType.toLowerCase()) {
        case "image/*":
          validExtensions.push("jpg", "jpeg", "png", "gif", "bmp", "tiff", "svg", "webp", "heic");
          break;
        case "audio/*":
          validExtensions.push("mp3", "wav", "aac", "flac", "ogg", "m4a");
          break;
        case "video/*":
          validExtensions.push("mp4", "mov", "avi", "mkv", "flv", "wmv", "webm", "mpeg");
          break;
        case "application/*":
          validExtensions.push("doc", "docx", "xls", "xlsx", "ppt", "pptx", "zip", "rar", "7z", "tar", "pdf");
          break;
        case "text/*":
          validExtensions.push("txt", "csv", "html", "css", "js", "json", "xml", "md");
          break;
        default:
          break;
      }
      return validExtensions.includes(fileExtension.toLowerCase());
    };
    Uploader2.prototype.checkExtension = function(files) {
      var dropFiles = files;
      if (!this.isBlank(this.allowedExtensions)) {
        var allowedExtensions = [];
        var extensions = !isNullOrUndefined(allowedExtensions) ? this.allowedExtensions.split(",") : [""];
        for (var _i = 0, extensions_1 = extensions; _i < extensions_1.length; _i++) {
          var extension = extensions_1[_i];
          allowedExtensions.push(extension.trim().toLocaleLowerCase());
        }
        for (var i = 0; i < files.length; i++) {
          var checkFileType = files[i].type.indexOf(".") !== -1 ? files[i].type.replace(".", "") : files[i].type;
          if (allowedExtensions[0].indexOf("/*") !== -1) {
            var isValidExtension = this.checkGenericExtension(allowedExtensions[0], checkFileType);
            if (!isValidExtension) {
              files[i].status = this.localizedTexts("invalidFileType");
              files[i].statusCode = "0";
            }
          } else if (allowedExtensions.indexOf(("." + checkFileType).toLocaleLowerCase()) === -1) {
            files[i].status = this.localizedTexts("invalidFileType");
            files[i].statusCode = "0";
          }
        }
      }
      return dropFiles;
    };
    Uploader2.prototype.validatedFileSize = function(fileSize) {
      var minSizeError = "";
      var maxSizeError = "";
      if (fileSize < this.minFileSize) {
        minSizeError = this.localizedTexts("invalidMinFileSize");
      } else if (fileSize > this.maxFileSize) {
        maxSizeError = this.localizedTexts("invalidMaxFileSize");
      } else {
        minSizeError = "";
        maxSizeError = "";
      }
      var errorMessage = {
        minSize: minSizeError,
        maxSize: maxSizeError
      };
      return errorMessage;
    };
    Uploader2.prototype.isPreLoadFile = function(fileData) {
      var isPreload = false;
      for (var i = 0; i < this.files.length; i++) {
        if (this.files[i].name === fileData.name.slice(0, fileData.name.lastIndexOf(".")) && this.files[i].type === fileData.type) {
          isPreload = true;
        }
      }
      return isPreload;
    };
    Uploader2.prototype.createCustomfileList = function(fileData) {
      this.createParentUL();
      for (var _i = 0, fileData_1 = fileData; _i < fileData_1.length; _i++) {
        var listItem = fileData_1[_i];
        var listElement = this.createElement("li", {
          className: FILE,
          attrs: {
            "data-file-name": listItem.name
          }
        });
        this.uploadTemplateFn = this.templateComplier(this.template);
        var liTempCompiler = this.uploadTemplateFn(listItem, this, "template", this.element.id + "Template", this.isStringTemplate, null, listElement);
        if (liTempCompiler) {
          var fromElements = [].slice.call(liTempCompiler);
          append(fromElements, listElement);
        }
        var index = fileData.indexOf(listItem);
        var eventArgs = {
          element: listElement,
          fileInfo: listItem,
          index,
          isPreload: this.isPreLoadFile(listItem)
        };
        var eventsArgs = {
          element: listElement,
          fileInfo: listItem,
          index,
          isPreload: this.isPreLoadFile(listItem)
        };
        this.trigger("rendering", eventArgs);
        this.trigger("fileListRendering", eventsArgs);
        this.listParent.appendChild(listElement);
        this.fileList.push(listElement);
      }
      this.renderReactTemplates();
    };
    Uploader2.prototype.createParentUL = function() {
      if (isNullOrUndefined(this.listParent)) {
        this.listParent = this.createElement("ul", {
          className: LIST_PARENT
        });
        this.uploadWrapper.appendChild(this.listParent);
      }
    };
    Uploader2.prototype.formFileList = function(fileData, files) {
      var fileList = this.createElement("li", {
        className: FILE
      });
      fileList.setAttribute("data-files-count", fileData.length + "");
      var fileContainer = this.createElement("span", {
        className: TEXT_CONTAINER
      });
      var statusMessage;
      for (var _i = 0, fileData_2 = fileData; _i < fileData_2.length; _i++) {
        var listItem = fileData_2[_i];
        var fileNameEle = this.createElement("span", {
          className: FILE_NAME
        });
        fileNameEle.innerHTML = this.getFileNameOnly(listItem.name);
        var fileTypeEle = this.createElement("span", {
          className: FILE_TYPE
        });
        var fileType = this.getFileType(listItem.name);
        fileTypeEle.innerHTML = "." + fileType;
        if (!fileType) {
          fileTypeEle.classList.add("e-hidden");
        }
        if (!this.enableRtl) {
          fileContainer.appendChild(fileNameEle);
          fileContainer.appendChild(fileTypeEle);
        } else {
          var rtlContainer = this.createElement("span", {
            className: RTL_CONTAINER
          });
          rtlContainer.appendChild(fileTypeEle);
          rtlContainer.appendChild(fileNameEle);
          fileContainer.appendChild(rtlContainer);
        }
        this.truncateName(fileNameEle);
        statusMessage = this.formValidateFileInfo(listItem, fileList);
      }
      fileList.appendChild(fileContainer);
      this.setListToFileInfo(fileData, fileList);
      var index = this.listParent.querySelectorAll("li").length;
      var infoEle = this.createElement("span");
      if (fileList.classList.contains(INVALID_FILE)) {
        infoEle.classList.add(STATUS);
        infoEle.classList.add(INVALID_FILE);
        infoEle.innerText = fileData.length > 1 ? this.localizedTexts("invalidFileSelection") : statusMessage;
      } else {
        infoEle.classList.add(fileData.length > 1 ? INFORMATION : FILE_SIZE);
        infoEle.innerText = fileData.length > 1 ? this.localizedTexts("totalFiles") + ": " + fileData.length + " , " + this.localizedTexts("size") + ": " + this.bytesToSize(this.getFileSize(fileData)) : this.bytesToSize(fileData[0].size);
        this.createFormInput(fileData);
      }
      fileContainer.appendChild(infoEle);
      if (isNullOrUndefined(fileList.querySelector(".e-icons"))) {
        var iconElement = this.createElement("span", {
          className: "e-icons",
          attrs: {
            "tabindex": this.btnTabIndex
          }
        });
        if (this.browserName === "msie") {
          iconElement.classList.add("e-msie");
        }
        iconElement.setAttribute("title", this.localizedTexts("remove"));
        fileList.appendChild(fileContainer);
        fileList.appendChild(iconElement);
        EventHandler.add(iconElement, "click", this.removeFiles, this);
        iconElement.classList.add(REMOVE_ICON);
      }
      var eventArgs = {
        element: fileList,
        fileInfo: this.mergeFileInfo(fileData, fileList),
        index,
        isPreload: this.isPreLoadFile(this.mergeFileInfo(fileData, fileList))
      };
      var eventsArgs = {
        element: fileList,
        fileInfo: this.mergeFileInfo(fileData, fileList),
        index,
        isPreload: this.isPreLoadFile(this.mergeFileInfo(fileData, fileList))
      };
      this.trigger("rendering", eventArgs);
      this.trigger("fileListRendering", eventsArgs);
      this.listParent.appendChild(fileList);
      this.fileList.push(fileList);
    };
    Uploader2.prototype.formValidateFileInfo = function(listItem, fileList) {
      var statusMessage = listItem.status;
      var validationMessages = this.validatedFileSize(listItem.size);
      if (validationMessages.minSize !== "" || validationMessages.maxSize !== "") {
        this.addInvalidClass(fileList);
        statusMessage = validationMessages.minSize !== "" ? this.localizedTexts("invalidMinFileSize") : validationMessages.maxSize !== "" ? this.localizedTexts("invalidMaxFileSize") : statusMessage;
      }
      var typeValidationMessage = this.checkExtension(this.getFilesInArray(listItem))[0].status;
      if (typeValidationMessage === this.localizedTexts("invalidFileType")) {
        this.addInvalidClass(fileList);
        statusMessage = typeValidationMessage;
      }
      return statusMessage;
    };
    Uploader2.prototype.addInvalidClass = function(fileList) {
      fileList.classList.add(INVALID_FILE);
    };
    Uploader2.prototype.createFormInput = function(fileData) {
      if (this.browserName !== "safari") {
        var inputElement = this.element.cloneNode(true);
        inputElement.classList.add(HIDDEN_INPUT);
        for (var _i = 0, fileData_3 = fileData; _i < fileData_3.length; _i++) {
          var listItem = fileData_3[_i];
          listItem.input = inputElement;
        }
        inputElement.setAttribute("id", getUniqueID("hiddenUploader"));
        inputElement.setAttribute("name", this.uploaderName);
        this.uploadWrapper.querySelector("." + INPUT_WRAPPER).appendChild(inputElement);
        if (this.browserName !== "msie" && this.browserName !== "edge") {
          this.element.value = "";
        }
      }
    };
    Uploader2.prototype.getFileSize = function(fileData) {
      var fileSize = 0;
      for (var _i = 0, fileData_4 = fileData; _i < fileData_4.length; _i++) {
        var file = fileData_4[_i];
        fileSize += file.size;
      }
      return fileSize;
    };
    Uploader2.prototype.mergeFileInfo = function(fileData, fileList) {
      var result = {
        name: "",
        rawFile: "",
        size: 0,
        status: "",
        type: "",
        validationMessages: {
          minSize: "",
          maxSize: ""
        },
        statusCode: "1",
        list: fileList
      };
      var fileNames = [];
      var type = "";
      for (var _i = 0, fileData_5 = fileData; _i < fileData_5.length; _i++) {
        var listItem = fileData_5[_i];
        fileNames.push(listItem.name);
        type = listItem.type;
      }
      result.name = fileNames.join(", ");
      result.size = this.getFileSize(fileData);
      result.type = type;
      result.status = this.statusForFormUpload(fileData, fileList);
      return result;
    };
    Uploader2.prototype.statusForFormUpload = function(fileData, fileList) {
      var isValid = true;
      var statusMessage;
      for (var _i = 0, fileData_6 = fileData; _i < fileData_6.length; _i++) {
        var listItem = fileData_6[_i];
        statusMessage = listItem.status;
        var validationMessages = this.validatedFileSize(listItem.size);
        if (validationMessages.minSize !== "" || validationMessages.maxSize !== "") {
          isValid = false;
          statusMessage = validationMessages.minSize !== "" ? this.localizedTexts("invalidMinFileSize") : validationMessages.maxSize !== "" ? this.localizedTexts("invalidMaxFileSize") : statusMessage;
        }
        var typeValidationMessage = this.checkExtension(this.getFilesInArray(listItem))[0].status;
        if (typeValidationMessage === this.localizedTexts("invalidFileType")) {
          isValid = false;
          statusMessage = typeValidationMessage;
        }
      }
      if (!isValid) {
        fileList.classList.add(INVALID_FILE);
        statusMessage = fileData.length > 1 ? this.localizedTexts("invalidFileSelection") : statusMessage;
      } else {
        statusMessage = this.localizedTexts("totalFiles") + ": " + fileData.length + " , " + this.localizedTexts("size") + ": " + this.bytesToSize(this.getFileSize(fileData));
      }
      return statusMessage;
    };
    Uploader2.prototype.formCustomFileList = function(fileData, files) {
      this.createParentUL();
      var fileList = this.createElement("li", {
        className: FILE
      });
      fileList.setAttribute("data-files-count", fileData.length + "");
      this.setListToFileInfo(fileData, fileList);
      var result = this.mergeFileInfo(fileData, fileList);
      fileList.setAttribute("data-file-name", result.name);
      this.uploadTemplateFn = this.templateComplier(this.template);
      var liTempCompiler = this.uploadTemplateFn(result, this, "template", this.element.id + "Template", this.isStringTemplate, null, fileList);
      if (liTempCompiler) {
        var fromElements = [].slice.call(liTempCompiler);
        append(fromElements, fileList);
      }
      var index = this.listParent.querySelectorAll("li").length;
      if (!fileList.classList.contains(INVALID_FILE)) {
        this.createFormInput(fileData);
      }
      var eventArgs = {
        element: fileList,
        fileInfo: result,
        index,
        isPreload: this.isPreLoadFile(result)
      };
      var eventsArgs = {
        element: fileList,
        fileInfo: result,
        index,
        isPreload: this.isPreLoadFile(result)
      };
      this.trigger("rendering", eventArgs);
      this.trigger("fileListRendering", eventsArgs);
      this.listParent.appendChild(fileList);
      this.fileList.push(fileList);
      this.renderReactTemplates();
    };
    Uploader2.prototype.createFileList = function(fileData) {
      this.filesData = this.filesData && this.filesData.length > 0 ? this.filesData.concat(fileData) : fileData;
      this.internalCreateFileList(fileData);
    };
    Uploader2.prototype.internalCreateFileList = function(fileData) {
      this.createParentUL();
      if (this.template !== "" && !isNullOrUndefined(this.template)) {
        if (this.isFormUpload()) {
          this.uploadWrapper.classList.add(FORM_UPLOAD);
          this.formCustomFileList(fileData, this.element.files);
        } else {
          this.createCustomfileList(fileData);
        }
      } else if (this.isFormUpload()) {
        this.uploadWrapper.classList.add(FORM_UPLOAD);
        this.formFileList(fileData, this.element.files);
      } else {
        for (var _i = 0, fileData_7 = fileData; _i < fileData_7.length; _i++) {
          var listItem = fileData_7[_i];
          var liElement = this.createElement("li", {
            className: FILE,
            attrs: {
              "data-file-name": listItem.name,
              "data-files-count": "1"
            }
          });
          var textContainer = this.createElement("span", {
            className: TEXT_CONTAINER
          });
          var textElement = this.createElement("span", {
            className: FILE_NAME,
            attrs: {
              "title": listItem.name
            }
          });
          textElement.innerHTML = this.getFileNameOnly(listItem.name);
          var fileExtension = this.createElement("span", {
            className: FILE_TYPE
          });
          var fileType = this.getFileType(listItem.name);
          fileExtension.innerHTML = "." + fileType;
          if (!fileType) {
            fileExtension.classList.add("e-hidden");
          }
          if (!this.enableRtl) {
            textContainer.appendChild(textElement);
            textContainer.appendChild(fileExtension);
          } else {
            var rtlContainer = this.createElement("span", {
              className: RTL_CONTAINER
            });
            rtlContainer.appendChild(fileExtension);
            rtlContainer.appendChild(textElement);
            textContainer.appendChild(rtlContainer);
          }
          var fileSize = this.createElement("span", {
            className: FILE_SIZE
          });
          fileSize.innerHTML = this.bytesToSize(listItem.size);
          textContainer.appendChild(fileSize);
          var statusElement = this.createElement("span", {
            className: STATUS
          });
          textContainer.appendChild(statusElement);
          statusElement.innerHTML = listItem.status;
          liElement.appendChild(textContainer);
          var iconElement = this.createElement("span", {
            className: " e-icons",
            attrs: {
              "tabindex": this.btnTabIndex
            }
          });
          if (this.browserName === "msie") {
            iconElement.classList.add("e-msie");
          }
          iconElement.setAttribute("title", this.localizedTexts("remove"));
          liElement.appendChild(iconElement);
          EventHandler.add(iconElement, "click", this.removeFiles, this);
          if (listItem.statusCode === "2") {
            statusElement.classList.add(UPLOAD_SUCCESS);
            iconElement.classList.add(DELETE_ICON);
            iconElement.setAttribute("title", this.localizedTexts("delete"));
            iconElement.setAttribute("aria-label", this.localizedTexts("delete"));
          } else if (listItem.statusCode !== "1") {
            statusElement.classList.remove(UPLOAD_SUCCESS);
            statusElement.classList.add(VALIDATION_FAILS);
          }
          if (this.autoUpload && listItem.statusCode === "1" && this.asyncSettings.saveUrl !== "") {
            statusElement.innerHTML = "";
          }
          if (!iconElement.classList.contains(DELETE_ICON)) {
            iconElement.classList.add(REMOVE_ICON);
            iconElement.setAttribute("aria-label", this.localizedTexts("remove"));
          }
          var index = fileData.indexOf(listItem);
          var eventArgs = {
            element: liElement,
            fileInfo: listItem,
            index,
            isPreload: this.isPreLoadFile(listItem)
          };
          var eventsArgs = {
            element: liElement,
            fileInfo: listItem,
            index,
            isPreload: this.isPreLoadFile(listItem)
          };
          this.trigger("rendering", eventArgs);
          this.trigger("fileListRendering", eventsArgs);
          this.listParent.appendChild(liElement);
          this.fileList.push(liElement);
          this.truncateName(textElement);
          var preventActionComplete = this.flag;
          if (this.isPreLoadFile(listItem)) {
            this.flag = false;
            this.checkActionComplete(true);
            this.flag = preventActionComplete;
          }
        }
      }
    };
    Uploader2.prototype.getSlicedName = function(nameElement) {
      var text = nameElement.textContent;
      nameElement.dataset.tail = text.slice(text.length - 10);
    };
    Uploader2.prototype.setListToFileInfo = function(fileData, fileList) {
      for (var _i = 0, fileData_8 = fileData; _i < fileData_8.length; _i++) {
        var listItem = fileData_8[_i];
        listItem.list = fileList;
      }
    };
    Uploader2.prototype.truncateName = function(name) {
      var nameElement = name;
      if (this.browserName !== "edge" && nameElement.offsetWidth < nameElement.scrollWidth) {
        this.getSlicedName(nameElement);
      } else if (nameElement.offsetWidth + 1 < nameElement.scrollWidth) {
        this.getSlicedName(nameElement);
      }
    };
    Uploader2.prototype.getFileType = function(name) {
      var extension;
      var index = name.lastIndexOf(".");
      if (index >= 0) {
        extension = name.substring(index + 1);
      }
      return extension ? extension : "";
    };
    Uploader2.prototype.getFileNameOnly = function(name) {
      var type = this.getFileType(name);
      var names = name.split("." + type);
      return type = names[0];
    };
    Uploader2.prototype.setInitialAttributes = function() {
      if (this.initialAttr.accept) {
        this.element.setAttribute("accept", this.initialAttr.accept);
      }
      if (this.initialAttr.disabled) {
        this.element.setAttribute("disabled", "disabled");
      }
      if (this.initialAttr.multiple) {
        var newAttr = document.createAttribute("multiple");
        this.element.setAttributeNode(newAttr);
      }
    };
    Uploader2.prototype.filterfileList = function(files) {
      var filterFiles = [];
      var li;
      for (var i = 0; i < files.length; i++) {
        li = this.getLiElement(files[i]);
        if (!isNullOrUndefined(li) && !li.classList.contains(UPLOAD_SUCCESS)) {
          filterFiles.push(files[i]);
        } else if (!this.showFileList && files[i].status !== "File uploaded successfully") {
          filterFiles.push(files[i]);
        }
      }
      return filterFiles;
    };
    Uploader2.prototype.updateStatus = function(files, status, statusCode, updateLiStatus) {
      if (updateLiStatus === void 0) {
        updateLiStatus = true;
      }
      if (!(status === "" || isNullOrUndefined(status)) && !(statusCode === "" || isNullOrUndefined(statusCode))) {
        files.status = status;
        files.statusCode = statusCode;
      }
      if (updateLiStatus) {
        var li = this.getLiElement(files);
        if (!isNullOrUndefined(li)) {
          if (!isNullOrUndefined(li.querySelector("." + STATUS)) && !(status === "" || isNullOrUndefined(status))) {
            li.querySelector("." + STATUS).textContent = status;
          }
        }
      }
      return files;
    };
    Uploader2.prototype.getLiElement = function(files) {
      var index;
      for (var i = 0; i < this.filesData.length; i++) {
        if (!isNullOrUndefined(files) && (!isNullOrUndefined(this.filesData[i].id) && !isNullOrUndefined(files.id) ? this.filesData[i].name === files.name && this.filesData[i].id === files.id : this.filesData[i].name === files.name)) {
          index = i;
        }
      }
      return this.fileList[index];
    };
    Uploader2.prototype.createProgressBar = function(liElement) {
      var progressbarWrapper = this.createElement("span", {
        className: PROGRESS_WRAPPER
      });
      var progressBar = this.createElement("progressbar", {
        className: PROGRESSBAR,
        attrs: {
          value: "0",
          max: "100"
        }
      });
      var progressbarInnerWrapper = this.createElement("span", {
        className: PROGRESS_INNER_WRAPPER
      });
      progressBar.setAttribute("style", "width: 0%");
      var progressbarText = this.createElement("span", {
        className: PROGRESSBAR_TEXT
      });
      progressbarText.textContent = "0%";
      progressbarInnerWrapper.appendChild(progressBar);
      progressbarWrapper.appendChild(progressbarInnerWrapper);
      progressbarWrapper.appendChild(progressbarText);
      liElement.querySelector("." + TEXT_CONTAINER).appendChild(progressbarWrapper);
    };
    Uploader2.prototype.updateProgressbar = function(e, li) {
      if (!isNaN(Math.round(e.loaded / e.total * 100)) && !isNullOrUndefined(li.querySelector("." + PROGRESSBAR))) {
        if (!isNullOrUndefined(this.progressInterval) && this.progressInterval !== "") {
          var value = Math.round(e.loaded / e.total * 100) % parseInt(this.progressInterval, 10);
          if (value === 0 || value === 100) {
            this.changeProgressValue(li, Math.round(e.loaded / e.total * 100).toString() + "%");
          }
        } else {
          this.changeProgressValue(li, Math.round(e.loaded / e.total * 100).toString() + "%");
        }
      }
    };
    Uploader2.prototype.changeProgressValue = function(li, progressValue) {
      li.querySelector("." + PROGRESSBAR).setAttribute("style", "width:" + progressValue);
      li.querySelector("." + PROGRESSBAR_TEXT).textContent = progressValue;
    };
    Uploader2.prototype.uploadInProgress = function(e, files, customUI, request) {
      var li = this.getLiElement(files);
      if (isNullOrUndefined(li) && !customUI) {
        return;
      }
      if (!isNullOrUndefined(li)) {
        if (files.statusCode === "5") {
          this.cancelUploadingFile(files, e, request, li);
        }
        if (!(li.querySelectorAll("." + PROGRESS_WRAPPER).length > 0) && li.querySelector("." + STATUS)) {
          li.querySelector("." + STATUS).classList.add(UPLOAD_INPROGRESS);
          this.createProgressBar(li);
          this.updateProgressBarClasses(li, UPLOAD_INPROGRESS);
          li.querySelector("." + STATUS).classList.remove(UPLOAD_FAILED);
        }
        this.updateProgressbar(e, li);
        var iconEle = li.querySelector("." + REMOVE_ICON);
        if (!isNullOrUndefined(iconEle)) {
          iconEle.classList.add(ABORT_ICON, UPLOAD_INPROGRESS);
          iconEle.setAttribute("title", this.localizedTexts("abort"));
          iconEle.classList.remove(REMOVE_ICON);
        }
      } else {
        this.cancelUploadingFile(files, e, request);
      }
      var args = {
        e,
        operation: "upload",
        file: this.updateStatus(files, this.localizedTexts("inProgress"), "3")
      };
      this.trigger("progress", args);
    };
    Uploader2.prototype.cancelUploadingFile = function(files, e, request, li) {
      var _this = this;
      if (files.statusCode === "5") {
        var eventArgs = {
          event: e,
          fileData: files,
          cancel: false,
          customFormData: [],
          currentRequest: null
        };
        this.trigger("canceling", eventArgs, function(eventArgs2) {
          if (eventArgs2.cancel) {
            files.statusCode = "3";
            if (!isNullOrUndefined(li)) {
              var spinnerTarget = li.querySelector("." + ABORT_ICON);
              if (!isNullOrUndefined(spinnerTarget)) {
                hideSpinner(spinnerTarget);
                detach(li.querySelector(".e-spinner-pane"));
              }
            }
          } else {
            request.emitError = false;
            request.httpRequest.abort();
            var formData = new FormData();
            if (files.statusCode === "5") {
              var name_1 = _this.element.getAttribute("name");
              formData.append(name_1, files.name);
              formData.append("cancel-uploading", files.name);
              _this.updateFormData(formData, eventArgs2.customFormData);
              var ajax_1 = new Ajax(_this.asyncSettings.removeUrl, "POST", true, null);
              ajax_1.emitError = false;
              ajax_1.beforeSend = function(e2) {
                if (eventArgs2.currentRequest) {
                  _this.updateCustomheader(ajax_1.httpRequest, eventArgs2.currentRequest);
                }
              };
              ajax_1.onLoad = function(e2) {
                _this.removecanceledFile(e2, files);
                return {};
              };
              ajax_1.send(formData);
            }
          }
        });
      }
    };
    Uploader2.prototype.removecanceledFile = function(e, file) {
      var liElement = this.getLiElement(file);
      if (isNullOrUndefined(liElement) || liElement.querySelector("." + RETRY_ICON) || isNullOrUndefined(liElement.querySelector("." + ABORT_ICON))) {
        return;
      }
      this.updateStatus(file, this.localizedTexts("fileUploadCancel"), "5");
      this.renderFailureState(e, file, liElement);
      var spinnerTarget = liElement.querySelector("." + REMOVE_ICON);
      if (!isNullOrUndefined(liElement)) {
        hideSpinner(spinnerTarget);
        if (!isNullOrUndefined(liElement.querySelector(".e-spinner-pane"))) {
          detach(liElement.querySelector(".e-spinner-pane"));
        }
      }
      var requestResponse = e && e.currentTarget ? this.getResponse(e) : null;
      var args = {
        event: e,
        response: requestResponse,
        operation: "cancel",
        file
      };
      this.trigger("success", args);
    };
    Uploader2.prototype.renderFailureState = function(e, file, liElement) {
      var _this = this;
      this.updateProgressBarClasses(liElement, UPLOAD_FAILED);
      this.removeProgressbar(liElement, "failure");
      if (!isNullOrUndefined(liElement.querySelector(".e-file-status"))) {
        liElement.querySelector(".e-file-status").classList.add(UPLOAD_FAILED);
      }
      var deleteIcon = liElement.querySelector("." + ABORT_ICON);
      if (isNullOrUndefined(deleteIcon)) {
        return;
      }
      deleteIcon.classList.remove(ABORT_ICON, UPLOAD_INPROGRESS);
      deleteIcon.classList.add(REMOVE_ICON);
      deleteIcon.setAttribute("title", this.localizedTexts("remove"));
      this.pauseButton = this.createElement("span", {
        className: "e-icons e-file-reload-btn",
        attrs: {
          "tabindex": this.btnTabIndex
        }
      });
      deleteIcon.parentElement.insertBefore(this.pauseButton, deleteIcon);
      this.pauseButton.setAttribute("title", this.localizedTexts("retry"));
      this.pauseButton.setAttribute("aria-label", this.localizedTexts("retry"));
      var retryElement = liElement.querySelector("." + RETRY_ICON);
      retryElement.addEventListener("click", function(e2) {
        _this.reloadcanceledFile(e2, file, liElement, false);
      }, false);
    };
    Uploader2.prototype.reloadcanceledFile = function(e, file, liElement, custom) {
      file.statusCode = "1";
      file.status = this.localizedTexts("readyToUploadMessage");
      if (!custom) {
        if (!isNullOrUndefined(liElement.querySelector("." + STATUS))) {
          liElement.querySelector("." + STATUS).classList.remove(UPLOAD_FAILED);
        }
        if (!isNullOrUndefined(liElement.querySelector("." + RETRY_ICON))) {
          detach(liElement.querySelector("." + RETRY_ICON));
        }
        this.pauseButton = null;
      }
      if (!isNullOrUndefined(liElement)) {
        liElement.classList.add(RESTRICT_RETRY);
      }
      this.upload([file]);
    };
    Uploader2.prototype.uploadComplete = function(e, file, customUI) {
      var status = e.target;
      if (status.readyState === 4 && status.status >= 200 && status.status <= 299) {
        var li = this.getLiElement(file);
        if (isNullOrUndefined(li) && (!customUI || isNullOrUndefined(customUI)) && this.showFileList) {
          return;
        }
        if (!isNullOrUndefined(li)) {
          this.updateProgressBarClasses(li, UPLOAD_SUCCESS);
          this.removeProgressbar(li, "success");
          var iconEle = li.querySelector("." + ABORT_ICON);
          if (!isNullOrUndefined(iconEle)) {
            iconEle.classList.add(DELETE_ICON);
            iconEle.setAttribute("title", this.localizedTexts("delete"));
            iconEle.setAttribute("aria-label", this.localizedTexts("delete"));
            iconEle.classList.remove(ABORT_ICON);
            iconEle.classList.remove(UPLOAD_INPROGRESS);
          }
        }
        this.raiseSuccessEvent(e, file);
      } else {
        this.uploadFailed(e, file);
      }
    };
    Uploader2.prototype.getResponse = function(e) {
      var target = e.currentTarget;
      var response = {
        readyState: target.readyState,
        statusCode: target.status,
        statusText: target.statusText,
        headers: target.getAllResponseHeaders(),
        withCredentials: target.withCredentials
      };
      return response;
    };
    Uploader2.prototype.raiseSuccessEvent = function(e, file) {
      var _this = this;
      var response = e && e.currentTarget ? this.getResponse(e) : null;
      var statusMessage = this.localizedTexts("uploadSuccessMessage");
      var args = {
        e,
        response,
        operation: "upload",
        file: this.updateStatus(file, statusMessage, "2", false),
        statusText: statusMessage
      };
      var liElement = this.getLiElement(file);
      if (!isNullOrUndefined(liElement)) {
        var spinnerEle = liElement.querySelector("." + SPINNER_PANE);
        if (!isNullOrUndefined(spinnerEle)) {
          hideSpinner(liElement);
          detach(spinnerEle);
        }
      }
      this.trigger("success", args, function(args2) {
        _this.updateStatus(file, args2.statusText, "2");
        if (_this.multiple) {
          _this.uploadedFilesData.push(file);
        } else {
          _this.uploadedFilesData = [file];
        }
        _this.trigger("change", {
          file: _this.uploadedFilesData
        });
        _this.checkActionButtonStatus();
        if (_this.fileList.length > 0) {
          if (!_this.getLiElement(file).classList.contains(RESTRICT_RETRY)) {
            _this.uploadSequential();
            _this.checkActionComplete(true);
          } else {
            _this.getLiElement(file).classList.remove(RESTRICT_RETRY);
          }
        } else if (!_this.showFileList) {
          _this.checkActionComplete(true);
        }
      });
    };
    Uploader2.prototype.uploadFailed = function(e, file) {
      var _this = this;
      var li = this.getLiElement(file);
      var response = e && e.currentTarget ? this.getResponse(e) : null;
      var statusMessage = this.localizedTexts("uploadFailedMessage");
      var args = {
        e,
        response,
        operation: "upload",
        file: this.updateStatus(file, statusMessage, "0", false),
        statusText: statusMessage
      };
      if (!isNullOrUndefined(li)) {
        this.renderFailureState(e, file, li);
      }
      this.trigger("failure", args, function(args2) {
        _this.updateStatus(file, args2.statusText, "0");
        _this.checkActionButtonStatus();
        _this.uploadSequential();
        _this.checkActionComplete(true);
      });
    };
    Uploader2.prototype.uploadSequential = function() {
      if (this.sequentialUpload) {
        if (this.autoUpload) {
          this.checkAutoUpload(this.filesData);
        } else {
          this.uploadButtonClick();
        }
      }
    };
    Uploader2.prototype.checkActionComplete = function(increment) {
      if (increment) {
        ++this.actionCompleteCount;
      } else {
        --this.actionCompleteCount;
      }
      this.raiseActionComplete();
    };
    Uploader2.prototype.raiseActionComplete = function() {
      if (this.filesData.length === this.actionCompleteCount && this.flag) {
        this.flag = false;
        var eventArgs = {
          fileData: []
        };
        eventArgs.fileData = this.getSelectedFileStatus(this.selectedFiles);
        this.trigger("actionComplete", eventArgs);
      }
    };
    Uploader2.prototype.getSelectedFileStatus = function(selectedFiles) {
      var matchFiles = [];
      var matchFilesIndex = 0;
      for (var selectFileIndex = 0; selectFileIndex < selectedFiles.length; selectFileIndex++) {
        var selectedFileData = selectedFiles[selectFileIndex];
        for (var fileDataIndex = 0; fileDataIndex < this.filesData.length; fileDataIndex++) {
          if (this.filesData[fileDataIndex].name === selectedFileData.name && this.filesData[fileDataIndex].status === selectedFileData.status) {
            matchFiles[matchFilesIndex] = this.filesData[fileDataIndex];
            ++matchFilesIndex;
            break;
          }
        }
      }
      return matchFiles;
    };
    Uploader2.prototype.updateProgressBarClasses = function(li, className) {
      var progressBar = li.querySelector("." + PROGRESSBAR);
      if (!isNullOrUndefined(progressBar)) {
        progressBar.classList.add(className);
        if (this.actionButtons && this.clearButton && this.uploadWrapper) {
          if (className === "e-upload-progress" && !this.clearButton.hasAttribute("disabled")) {
            this.clearButton.setAttribute("disabled", "disabled");
          } else if ((className === "e-upload-success" || className === "e-upload-fails") && this.uploadWrapper.querySelectorAll(".e-upload-progress-bar.e-upload-progress:not(.e-upload-success):not(.e-upload-fails)").length === 0 && this.clearButton.hasAttribute("disabled")) {
            this.clearButton.removeAttribute("disabled");
          }
        }
      }
    };
    Uploader2.prototype.removeProgressbar = function(li, callType) {
      var _this = this;
      if (!isNullOrUndefined(li.querySelector("." + PROGRESS_WRAPPER))) {
        this.progressAnimation = new Animation({
          duration: 1250
        });
        this.progressAnimation.animate(li.querySelector("." + PROGRESS_WRAPPER), {
          name: "FadeOut"
        });
        this.progressAnimation.animate(li.querySelector("." + PROGRESSBAR_TEXT), {
          name: "FadeOut"
        });
        setTimeout(function() {
          _this.animateProgressBar(li, callType);
        }, 750);
      }
    };
    Uploader2.prototype.animateProgressBar = function(li, callType) {
      if (callType === "success") {
        li.classList.add(UPLOAD_SUCCESS);
        if (!isNullOrUndefined(li.querySelector("." + STATUS))) {
          li.querySelector("." + STATUS).classList.remove(UPLOAD_INPROGRESS);
          this.progressAnimation.animate(li.querySelector("." + STATUS), {
            name: "FadeIn"
          });
          li.querySelector("." + STATUS).classList.add(UPLOAD_SUCCESS);
        }
      } else {
        if (!isNullOrUndefined(li.querySelector("." + STATUS))) {
          li.querySelector("." + STATUS).classList.remove(UPLOAD_INPROGRESS);
          this.progressAnimation.animate(li.querySelector("." + STATUS), {
            name: "FadeIn"
          });
          li.querySelector("." + STATUS).classList.add(UPLOAD_FAILED);
        }
      }
      if (li.querySelector("." + PROGRESS_WRAPPER)) {
        detach(li.querySelector("." + PROGRESS_WRAPPER));
      }
    };
    Uploader2.prototype.setExtensions = function(extensions) {
      if (extensions !== "" && !isNullOrUndefined(extensions)) {
        this.element.setAttribute("accept", extensions);
      } else {
        this.element.removeAttribute("accept");
      }
    };
    Uploader2.prototype.templateComplier = function(uploadTemplate) {
      if (uploadTemplate) {
        try {
          if (typeof uploadTemplate !== "function" && selectAll(uploadTemplate, document).length) {
            return compile(select(uploadTemplate, document).innerHTML.trim());
          } else {
            return compile(uploadTemplate);
          }
        } catch (exception) {
          return compile(uploadTemplate);
        }
      }
      return void 0;
    };
    Uploader2.prototype.setRTL = function() {
      if (this.enableRtl) {
        addClass([this.uploadWrapper], RTL8);
      } else {
        removeClass([this.uploadWrapper], RTL8);
      }
    };
    Uploader2.prototype.localizedTexts = function(localeText) {
      this.l10n.setLocale(this.locale);
      return this.l10n.getConstant(localeText);
    };
    Uploader2.prototype.setControlStatus = function() {
      if (!this.enabled) {
        this.uploadWrapper.classList.add(DISABLED5);
        this.element.setAttribute("disabled", "disabled");
        this.browseButton.setAttribute("disabled", "disabled");
        if (!isNullOrUndefined(this.clearButton)) {
          this.clearButton.setAttribute("disabled", "disabled");
        }
        if (!isNullOrUndefined(this.uploadButton)) {
          this.uploadButton.setAttribute("disabled", "disabled");
        }
      } else {
        if (this.uploadWrapper.classList.contains(DISABLED5)) {
          this.uploadWrapper.classList.remove(DISABLED5);
        }
        if (!isNullOrUndefined(this.browseButton) && this.element.hasAttribute("disabled")) {
          this.element.removeAttribute("disabled");
          this.browseButton.removeAttribute("disabled");
        }
        if (!isNullOrUndefined(this.clearButton) && this.clearButton.hasAttribute("disabled")) {
          this.clearButton.removeAttribute("disabled");
        }
        if (!isNullOrUndefined(this.uploadButton) && this.uploadButton.hasAttribute("disabled")) {
          this.uploadButton.hasAttribute("disabled");
        }
      }
    };
    Uploader2.prototype.checkHTMLAttributes = function(isDynamic) {
      var attributes2 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ["accept", "multiple", "disabled"];
      for (var _i = 0, attributes_1 = attributes2; _i < attributes_1.length; _i++) {
        var prop = attributes_1[_i];
        if (!isNullOrUndefined(this.element.getAttribute(prop))) {
          switch (prop) {
            case "accept":
              if (isNullOrUndefined(this.uploaderOptions) || this.uploaderOptions["allowedExtensions"] === void 0 || isDynamic) {
                this.setProperties({
                  allowedExtensions: this.element.getAttribute("accept")
                }, !isDynamic);
                this.initialAttr.accept = this.allowedExtensions;
              }
              break;
            case "multiple":
              if (isNullOrUndefined(this.uploaderOptions) || this.uploaderOptions["multiple"] === void 0 || isDynamic) {
                var isMutiple = this.element.getAttribute(prop) === "multiple" || this.element.getAttribute(prop) === "" || this.element.getAttribute(prop) === "true" ? true : false;
                this.setProperties({
                  multiple: isMutiple
                }, !isDynamic);
                this.initialAttr.multiple = true;
              }
              break;
            case "disabled":
              if (isNullOrUndefined(this.uploaderOptions) || this.uploaderOptions["enabled"] === void 0 || isDynamic) {
                var isDisabled = this.element.getAttribute(prop) === "disabled" || this.element.getAttribute(prop) === "" || this.element.getAttribute(prop) === "true" ? false : true;
                this.setProperties({
                  enabled: isDisabled
                }, !isDynamic);
                this.initialAttr.disabled = true;
              }
          }
        }
      }
    };
    Uploader2.prototype.chunkUpload = function(file, custom, fileIndex) {
      var start = 0;
      var end = Math.min(this.asyncSettings.chunkSize, file.size);
      var index = 0;
      var blob = file.rawFile.slice(start, end);
      var metaData = {
        chunkIndex: index,
        blob,
        file,
        start,
        end,
        retryCount: 0,
        request: null
      };
      this.sendRequest(file, metaData, custom, fileIndex);
    };
    Uploader2.prototype.sendRequest = function(file, metaData, custom, fileIndex) {
      var _this = this;
      var formData = new FormData();
      var blob = file.rawFile.slice(metaData.start, metaData.end);
      formData.append(this.uploaderName, blob, file.name);
      formData.append("chunk-index", metaData.chunkIndex.toString());
      formData.append("chunkIndex", metaData.chunkIndex.toString());
      var totalChunk = Math.max(Math.ceil(file.size / this.asyncSettings.chunkSize), 1);
      formData.append("total-chunk", totalChunk.toString());
      formData.append("totalChunk", totalChunk.toString());
      var ajax = new Ajax({
        url: this.asyncSettings.saveUrl,
        type: "POST",
        async: true,
        contentType: null
      });
      ajax.emitError = false;
      ajax.onLoad = function(e) {
        _this.chunkUploadComplete(e, metaData, custom);
        return {};
      };
      ajax.onUploadProgress = function(e) {
        _this.chunkUploadInProgress(e, metaData, custom);
        return {};
      };
      var eventArgs = {
        fileData: file,
        customFormData: [],
        cancel: false,
        chunkSize: this.asyncSettings.chunkSize === 0 ? null : this.asyncSettings.chunkSize
      };
      ajax.beforeSend = function(e) {
        eventArgs.currentRequest = ajax.httpRequest;
        eventArgs.currentChunkIndex = metaData.chunkIndex;
        if (eventArgs.currentChunkIndex === 0) {
          _this.trigger("uploading", eventArgs, function(eventArgs2) {
            _this.uploadingEventCallback(formData, eventArgs2, e, file);
          });
        } else {
          _this.trigger("chunkUploading", eventArgs, function(eventArgs2) {
            _this.uploadingEventCallback(formData, eventArgs2, e, file);
          });
        }
      };
      ajax.onError = function(e) {
        _this.chunkUploadFailed(e, metaData, custom);
        return {};
      };
      ajax.send(formData);
      metaData.request = ajax;
    };
    Uploader2.prototype.uploadingEventCallback = function(formData, eventArgs, e, file) {
      if (eventArgs.cancel) {
        this.eventCancelByArgs(e, eventArgs, file);
      } else {
        this.updateFormData(formData, eventArgs.customFormData);
      }
    };
    Uploader2.prototype.eventCancelByArgs = function(e, eventArgs, file) {
      var _this = this;
      e.cancel = true;
      if (eventArgs.fileData.statusCode === "5") {
        return;
      }
      eventArgs.fileData.statusCode = "5";
      eventArgs.fileData.status = this.localizedTexts("fileUploadCancel");
      var liElement = this.getLiElement(eventArgs.fileData);
      if (liElement) {
        if (!isNullOrUndefined(liElement.querySelector("." + STATUS))) {
          liElement.querySelector("." + STATUS).innerHTML = this.localizedTexts("fileUploadCancel");
          liElement.querySelector("." + STATUS).classList.add(UPLOAD_FAILED);
        }
        this.pauseButton = this.createElement("span", {
          className: "e-icons e-file-reload-btn",
          attrs: {
            "tabindex": this.btnTabIndex
          }
        });
        var removeIcon = liElement.querySelector("." + REMOVE_ICON);
        if (removeIcon) {
          removeIcon.parentElement.insertBefore(this.pauseButton, removeIcon);
        }
        this.pauseButton.setAttribute("title", this.localizedTexts("retry"));
        this.pauseButton.addEventListener("click", function(e2) {
          _this.reloadcanceledFile(e2, file, liElement);
        }, false);
        this.checkActionButtonStatus();
      }
    };
    Uploader2.prototype.checkChunkUpload = function() {
      return this.asyncSettings.chunkSize <= 0 || isNullOrUndefined(this.asyncSettings.chunkSize) ? false : true;
    };
    Uploader2.prototype.chunkUploadComplete = function(e, metaData, custom) {
      var _this = this;
      var response = e.target;
      var liElement;
      if (response.readyState === 4 && response.status >= 200 && response.status < 300) {
        var requestResponse = e && e.currentTarget ? this.getResponse(e) : null;
        var totalChunk = Math.max(Math.ceil(metaData.file.size / this.asyncSettings.chunkSize), 1);
        var eventArgs = {
          event: e,
          file: metaData.file,
          chunkIndex: metaData.chunkIndex,
          totalChunk,
          chunkSize: this.asyncSettings.chunkSize,
          response: requestResponse
        };
        this.trigger("chunkSuccess", eventArgs);
        if (isNullOrUndefined(custom) || !custom) {
          liElement = this.getLiElement(metaData.file);
        }
        this.updateMetaData(metaData);
        if (metaData.end === metaData.file.size) {
          metaData.file.statusCode = "3";
        }
        if (metaData.file.statusCode === "5") {
          var eventArgs_1 = {
            event: e,
            fileData: metaData.file,
            cancel: false,
            customFormData: []
          };
          this.trigger("canceling", eventArgs_1, function(eventArgs2) {
            if (eventArgs2.cancel) {
              metaData.file.statusCode = "3";
              var spinnerTarget = liElement.querySelector("." + ABORT_ICON);
              if (!isNullOrUndefined(liElement) && !isNullOrUndefined(spinnerTarget)) {
                hideSpinner(spinnerTarget);
                detach(liElement.querySelector(".e-spinner-pane"));
              }
              _this.sendNextRequest(metaData);
            } else {
              metaData.request.emitError = false;
              response.abort();
              var formData = new FormData();
              var name_2 = _this.element.getAttribute("name");
              formData.append(name_2, metaData.file.name);
              formData.append("cancel-uploading", metaData.file.name);
              formData.append("cancelUploading", metaData.file.name);
              _this.updateFormData(formData, eventArgs2.customFormData);
              var ajax = new Ajax(_this.asyncSettings.removeUrl, "POST", true, null);
              ajax.emitError = false;
              ajax.onLoad = function(e2) {
                _this.removeChunkFile(e2, metaData, custom);
                return {};
              };
              ajax.send(formData);
            }
          });
        } else {
          if (totalChunk - 1 === metaData.chunkIndex && totalChunk > metaData.chunkIndex) {
            var index = this.pausedData.indexOf(metaData);
            if (index >= 0) {
              this.pausedData.splice(index, 1);
            }
            if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom) && liElement) {
              if (liElement && !isNullOrUndefined(liElement.querySelector("." + PAUSE_UPLOAD))) {
                detach(liElement.querySelector("." + PAUSE_UPLOAD));
              }
              this.removeChunkProgressBar(metaData);
            }
            this.raiseSuccessEvent(e, metaData.file);
            return;
          }
          if (metaData.file.statusCode !== "4") {
            this.sendNextRequest(metaData);
          }
        }
      } else {
        this.chunkUploadFailed(e, metaData);
      }
    };
    Uploader2.prototype.sendNextRequest = function(metaData) {
      metaData.start = metaData.end;
      metaData.end += this.asyncSettings.chunkSize;
      metaData.end = Math.min(metaData.end, metaData.file.size);
      metaData.chunkIndex += 1;
      this.sendRequest(metaData.file, metaData);
    };
    Uploader2.prototype.removeChunkFile = function(e, metaData, custom) {
      if (isNullOrUndefined(this.template) && isNullOrUndefined(custom) && !custom) {
        var liElement = this.getLiElement(metaData.file);
        var deleteIcon = liElement.querySelector("." + ABORT_ICON);
        var spinnerTarget = deleteIcon;
        this.updateStatus(metaData.file, this.localizedTexts("fileUploadCancel"), "5");
        this.updateProgressBarClasses(liElement, UPLOAD_FAILED);
        this.removeProgressbar(liElement, "failure");
        if (deleteIcon) {
          deleteIcon.classList.remove(ABORT_ICON);
          deleteIcon.classList.add(REMOVE_ICON);
          deleteIcon.setAttribute("title", this.localizedTexts("remove"));
        }
        var pauseIcon = liElement.querySelector("." + PAUSE_UPLOAD);
        if (pauseIcon) {
          pauseIcon.classList.add(RETRY_ICON);
          pauseIcon.classList.remove(PAUSE_UPLOAD);
          pauseIcon.setAttribute("title", this.localizedTexts("retry"));
        }
        if (!isNullOrUndefined(liElement) && !isNullOrUndefined(deleteIcon) && !isNullOrUndefined(liElement.querySelector(".e-spinner-pane"))) {
          hideSpinner(spinnerTarget);
          detach(liElement.querySelector(".e-spinner-pane"));
        }
      }
    };
    Uploader2.prototype.pauseUpload = function(metaData, e, custom) {
      metaData.file.statusCode = "4";
      metaData.file.status = this.localizedTexts("pause");
      this.updateMetaData(metaData);
      var eventArgs = {
        event: e ? e : null,
        file: metaData.file,
        chunkIndex: metaData.chunkIndex,
        chunkCount: Math.round(metaData.file.size / this.asyncSettings.chunkSize),
        chunkSize: this.asyncSettings.chunkSize
      };
      this.abortUpload(metaData, custom, eventArgs);
      if (this.sequentialUpload) {
        this.uploadSequential();
      }
    };
    Uploader2.prototype.abortUpload = function(metaData, custom, eventArgs) {
      if (metaData.file.statusCode !== "4") {
        metaData.request.emitError = false;
        metaData.request.httpRequest.abort();
      }
      var liElement = this.getLiElement(metaData.file);
      if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom)) {
        var targetElement2 = liElement.querySelector("." + PAUSE_UPLOAD);
        targetElement2.classList.remove(PAUSE_UPLOAD);
        targetElement2.classList.add(RESUME_UPLOAD);
        targetElement2.setAttribute("title", this.localizedTexts("resume"));
        targetElement2.nextElementSibling.classList.add(REMOVE_ICON);
        targetElement2.nextElementSibling.classList.remove(ABORT_ICON);
        targetElement2.nextElementSibling.setAttribute("title", this.localizedTexts("remove"));
      }
      for (var i = 0; i < this.pausedData.length; i++) {
        if (this.pausedData[i].file.name === metaData.file.name) {
          this.pausedData.splice(i, 1);
        }
      }
      this.pausedData.push(metaData);
      this.trigger("pausing", eventArgs);
    };
    Uploader2.prototype.resumeUpload = function(metaData, e, custom) {
      var liElement = this.getLiElement(metaData.file);
      var targetElement2;
      if (!isNullOrUndefined(liElement)) {
        targetElement2 = liElement.querySelector("." + RESUME_UPLOAD);
      }
      if (!isNullOrUndefined(targetElement2) && (isNullOrUndefined(custom) || !custom)) {
        targetElement2.classList.remove(RESUME_UPLOAD);
        targetElement2.classList.add(PAUSE_UPLOAD);
        targetElement2.setAttribute("title", this.localizedTexts("pause"));
        targetElement2.nextElementSibling.classList.remove(REMOVE_ICON);
        targetElement2.nextElementSibling.classList.add(ABORT_ICON);
        targetElement2.nextElementSibling.setAttribute("title", this.localizedTexts("abort"));
      }
      metaData.file.status = this.localizedTexts("inProgress");
      metaData.file.statusCode = "3";
      this.updateMetaData(metaData);
      var eventArgs = {
        event: e ? e : null,
        file: metaData.file,
        chunkIndex: metaData.chunkIndex,
        chunkCount: Math.round(metaData.file.size / this.asyncSettings.chunkSize),
        chunkSize: this.asyncSettings.chunkSize
      };
      this.trigger("resuming", eventArgs);
      for (var i = 0; i < this.pausedData.length; i++) {
        if (this.pausedData[i].end === this.pausedData[i].file.size) {
          this.chunkUploadComplete(e, metaData, custom);
        } else {
          if (this.pausedData[i].file.name === metaData.file.name) {
            this.pausedData[i].start = this.pausedData[i].end;
            this.pausedData[i].end = this.pausedData[i].end + this.asyncSettings.chunkSize;
            this.pausedData[i].end = Math.min(this.pausedData[i].end, this.pausedData[i].file.size);
            this.pausedData[i].chunkIndex = this.pausedData[i].chunkIndex + 1;
            this.sendRequest(this.pausedData[i].file, this.pausedData[i], custom);
          }
        }
      }
    };
    Uploader2.prototype.updateMetaData = function(metaData) {
      if (this.uploadMetaData.indexOf(metaData) === -1) {
        this.uploadMetaData.push(metaData);
      } else {
        this.uploadMetaData.splice(this.uploadMetaData.indexOf(metaData), 1);
        this.uploadMetaData.push(metaData);
      }
    };
    Uploader2.prototype.removeChunkProgressBar = function(metaData) {
      var liElement = this.getLiElement(metaData.file);
      if (!isNullOrUndefined(liElement)) {
        this.updateProgressBarClasses(liElement, UPLOAD_SUCCESS);
        this.removeProgressbar(liElement, "success");
        var cancelButton = liElement.querySelector("." + ABORT_ICON);
        if (!isNullOrUndefined(cancelButton)) {
          cancelButton.classList.add(DELETE_ICON);
          cancelButton.setAttribute("title", this.localizedTexts("delete"));
          cancelButton.classList.remove(ABORT_ICON, UPLOAD_INPROGRESS);
        }
      }
    };
    Uploader2.prototype.chunkUploadFailed = function(e, metaData, custom) {
      var _this = this;
      var chunkCount = Math.max(Math.ceil(metaData.file.size / this.asyncSettings.chunkSize), 1);
      var liElement;
      if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom)) {
        liElement = this.getLiElement(metaData.file);
      }
      var requestResponse = e && e.currentTarget ? this.getResponse(e) : null;
      var eventArgs = {
        event: e,
        file: metaData.file,
        chunkIndex: metaData.chunkIndex,
        totalChunk: chunkCount,
        chunkSize: this.asyncSettings.chunkSize,
        cancel: false,
        response: requestResponse
      };
      this.trigger("chunkFailure", eventArgs, function(eventArgs2) {
        if (!eventArgs2.cancel) {
          if (metaData.retryCount < _this.asyncSettings.retryCount) {
            setTimeout(function() {
              _this.retryRequest(liElement, metaData, custom);
            }, _this.asyncSettings.retryAfterDelay);
          } else {
            if (!isNullOrUndefined(liElement)) {
              var pauseButton = liElement.querySelector("." + PAUSE_UPLOAD) ? liElement.querySelector("." + PAUSE_UPLOAD) : liElement.querySelector("." + RESUME_UPLOAD);
              if (!isNullOrUndefined(pauseButton)) {
                pauseButton.classList.add(RETRY_ICON);
                pauseButton.classList.remove(PAUSE_UPLOAD, RESUME_UPLOAD);
              }
              _this.updateProgressBarClasses(liElement, UPLOAD_FAILED);
              _this.removeProgressbar(liElement, "failure");
              liElement.querySelector(".e-icons").classList.remove(UPLOAD_INPROGRESS);
              var iconElement = liElement.querySelector("." + ABORT_ICON) ? liElement.querySelector("." + ABORT_ICON) : liElement.querySelector("." + REMOVE_ICON);
              iconElement.classList.remove(ABORT_ICON);
              if (!isNullOrUndefined(liElement.querySelector("." + PAUSE_UPLOAD))) {
                detach(liElement.querySelector("." + PAUSE_UPLOAD));
              }
              if (metaData.start > 0) {
                iconElement.classList.add(DELETE_ICON);
                iconElement.setAttribute("title", _this.localizedTexts("delete"));
              } else {
                iconElement.classList.add(REMOVE_ICON);
                iconElement.setAttribute("title", _this.localizedTexts("remove"));
              }
            }
            metaData.retryCount = 0;
            var file_1 = metaData.file;
            var failureMessage = _this.localizedTexts("uploadFailedMessage");
            var args = {
              e,
              response: requestResponse,
              operation: "upload",
              file: _this.updateStatus(file_1, failureMessage, "0", false),
              statusText: failureMessage
            };
            _this.trigger("failure", args, function(args2) {
              _this.updateStatus(file_1, args2.statusText, "0");
              _this.uploadSequential();
              _this.checkActionComplete(true);
            });
          }
        }
      });
    };
    Uploader2.prototype.retryRequest = function(liElement, metaData, custom) {
      if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom) && liElement) {
        this.updateProgressBarClasses(liElement, UPLOAD_FAILED);
      }
      metaData.retryCount += 1;
      this.sendRequest(metaData.file, metaData);
    };
    Uploader2.prototype.checkPausePlayAction = function(e) {
      var targetElement2 = e.target;
      var selectedElement = e.target.parentElement;
      var index = this.fileList.indexOf(selectedElement);
      var fileData = this.filesData[index];
      var metaData = this.getCurrentMetaData(fileData);
      if (targetElement2.classList.contains(PAUSE_UPLOAD)) {
        this.pauseUpload(metaData, e);
      } else if (targetElement2.classList.contains(RESUME_UPLOAD)) {
        this.resumeUpload(metaData, e);
      } else if (targetElement2.classList.contains(RETRY_ICON)) {
        if (metaData.file.status === this.localizedTexts("fileUploadCancel")) {
          this.retryUpload(metaData, false);
        } else {
          this.retryUpload(metaData, true);
        }
      }
    };
    Uploader2.prototype.retryUpload = function(metaData, fromcanceledStage) {
      if (fromcanceledStage) {
        metaData.end = metaData.end + this.asyncSettings.chunkSize;
        metaData.start = metaData.start + this.asyncSettings.chunkSize;
        this.sendRequest(metaData.file, metaData);
      } else {
        metaData.file.statusCode = "1";
        metaData.file.status = this.localizedTexts("readyToUploadMessage");
        this.chunkUpload(metaData.file);
      }
      this.getLiElement(metaData.file).classList.add(RESTRICT_RETRY);
    };
    Uploader2.prototype.chunkUploadInProgress = function(e, metaData, custom) {
      var _this = this;
      if (metaData.file.statusCode === "4") {
        return;
      }
      if (metaData.file.statusCode !== "4" && metaData.file.statusCode !== "5") {
        metaData.file.statusCode = "3";
        metaData.file.status = this.localizedTexts("inProgress");
      }
      this.updateMetaData(metaData);
      var liElement = this.getLiElement(metaData.file);
      if (isNullOrUndefined(liElement)) {
        return;
      }
      var retryElement = liElement.querySelector("." + RETRY_ICON);
      if (!isNullOrUndefined(retryElement)) {
        retryElement.classList.add(PAUSE_UPLOAD);
        retryElement.setAttribute("title", this.localizedTexts("pause"));
        retryElement.classList.remove(RETRY_ICON);
      }
      if (!isNullOrUndefined(liElement)) {
        if (!(liElement.querySelectorAll("." + PROGRESS_WRAPPER).length > 0)) {
          var statusElement = liElement.querySelector("." + STATUS);
          if (isNullOrUndefined(this.template)) {
            statusElement.classList.add(UPLOAD_INPROGRESS);
            statusElement.classList.remove(UPLOAD_FAILED);
            this.createProgressBar(liElement);
            this.updateProgressBarClasses(liElement, UPLOAD_INPROGRESS);
          }
          var clearIcon = liElement.querySelector("." + REMOVE_ICON) ? liElement.querySelector("." + REMOVE_ICON) : liElement.querySelector("." + DELETE_ICON);
          if (!isNullOrUndefined(clearIcon)) {
            clearIcon.classList.add(ABORT_ICON);
            clearIcon.setAttribute("title", this.localizedTexts("abort"));
            clearIcon.classList.remove(REMOVE_ICON);
          }
        }
        if (!isNaN(Math.round(e.loaded / e.total * 100)) && isNullOrUndefined(this.template) && metaData.file.statusCode !== "4") {
          var progressVal = void 0;
          var totalChunks = Math.ceil(metaData.file.size / this.asyncSettings.chunkSize) - 1;
          if (this.asyncSettings.chunkSize && totalChunks) {
            progressVal = Math.round(metaData.chunkIndex / totalChunks * 100);
            this.changeProgressValue(liElement, progressVal.toString() + "%");
          }
        }
        if (metaData.chunkIndex === 0) {
          this.checkActionButtonStatus();
        }
      }
      if (isNullOrUndefined(liElement.querySelector("." + PAUSE_UPLOAD)) && isNullOrUndefined(this.template) && isNullOrUndefined(liElement.querySelector("." + DELETE_ICON))) {
        this.pauseButton = this.createElement("span", {
          className: "e-icons e-file-pause-btn",
          attrs: {
            "tabindex": this.btnTabIndex
          }
        });
        if (this.browserName === "msie") {
          this.pauseButton.classList.add("e-msie");
        }
        var abortIcon = liElement.querySelector("." + ABORT_ICON);
        abortIcon.parentElement.insertBefore(this.pauseButton, abortIcon);
        this.pauseButton.setAttribute("title", this.localizedTexts("pause"));
        this.pauseButton.addEventListener("click", function(e2) {
          _this.checkPausePlayAction(e2);
        }, false);
      }
    };
    Uploader2.prototype.bytesToSize = function(bytes) {
      var i = -1;
      if (!bytes) {
        return "0.0 KB";
      }
      do {
        bytes = bytes / 1024;
        i++;
      } while (bytes > 99);
      if (i >= 2) {
        bytes = bytes * 1024;
        i = 1;
      }
      return Math.max(bytes, 0).toFixed(1) + " " + ["KB", "MB"][i];
    };
    Uploader2.prototype.sortFileList = function(filesData) {
      filesData = filesData ? filesData : this.sortFilesList;
      var files = filesData;
      var fileNames = [];
      for (var i = 0; i < files.length; i++) {
        fileNames.push(files[i].name);
      }
      var sortedFileNames = fileNames.sort();
      var sortedFilesData = [];
      for (var _i = 0, sortedFileNames_1 = sortedFileNames; _i < sortedFileNames_1.length; _i++) {
        var name_3 = sortedFileNames_1[_i];
        for (var i = 0; i < files.length; i++) {
          if (name_3 === files[i].name) {
            sortedFilesData.push(files[i]);
          }
        }
      }
      return sortedFilesData;
    };
    Uploader2.prototype.destroy = function() {
      this.element.value = null;
      this.clearTemplate();
      this.clearAll();
      this.unWireEvents();
      this.unBindDropEvents();
      if (this.multiple) {
        this.element.removeAttribute("multiple");
      }
      if (!this.enabled) {
        this.element.removeAttribute("disabled");
      }
      this.element.removeAttribute("accept");
      this.setInitialAttributes();
      var attributes2 = ["aria-label", "directory", "webkitdirectory", "tabindex"];
      for (var _i = 0, attributes_2 = attributes2; _i < attributes_2.length; _i++) {
        var key = attributes_2[_i];
        this.element.removeAttribute(key);
      }
      if (!isNullOrUndefined(this.uploadWrapper)) {
        this.uploadWrapper.parentElement.appendChild(this.element);
        detach(this.uploadWrapper);
      }
      this.uploadWrapper = null;
      this.uploadWrapper = null;
      this.browseButton = null;
      this.dropAreaWrapper = null;
      this.dropZoneElement = null;
      this.dropArea = null;
      this.keyboardModule = null;
      this.clearButton = null;
      this.uploadButton = null;
      _super.prototype.destroy.call(this);
    };
    Uploader2.prototype.upload = function(files, custom) {
      var _this = this;
      files = files ? files : this.filesData;
      if (this.sequentialUpload && (this.isFirstFileOnSelection || custom)) {
        this.sequenceUpload(files);
      } else {
        var uploadFiles_1 = this.getFilesInArray(files);
        var eventArgs = {
          customFormData: [],
          currentRequest: null,
          cancel: false
        };
        this.trigger("beforeUpload", eventArgs, function(eventArgs2) {
          if (!eventArgs2.cancel) {
            _this.customFormDatas = eventArgs2.customFormData && eventArgs2.customFormData.length > 0 ? eventArgs2.customFormData : _this.customFormDatas;
            _this.uploadFiles(uploadFiles_1, custom);
          }
        });
      }
    };
    Uploader2.prototype.getFilesInArray = function(files) {
      var uploadFiles = [];
      if (files) {
        if (files instanceof Array) {
          uploadFiles = files;
        } else {
          uploadFiles.push(files);
        }
      }
      return uploadFiles;
    };
    Uploader2.prototype.serverReadFileBase64 = function(fileIndex, position, totalCount) {
      var _this = this;
      return new Promise(function(resolve, reject) {
        var file = _this.fileStreams[fileIndex].rawFile;
        try {
          var reader = new FileReader();
          reader.onload = /* @__PURE__ */ function(args) {
            return function() {
              try {
                var contents = args.result;
                var data = contents ? contents.split(";base64,")[1] : null;
                resolve(data);
              } catch (e) {
                reject(e);
              }
            };
          }(reader);
          reader.readAsDataURL(file.slice(position, position + totalCount));
        } catch (e) {
          reject(e);
        }
      });
    };
    Uploader2.prototype.uploadFileCount = function(ele) {
      var files = this.filesData;
      if (!files || files.length === 0) {
        return -1;
      }
      var result = files.length;
      return result;
    };
    Uploader2.prototype.getFileRead = function(index, ele) {
      var files = this.filesData;
      if (!files || files.length === 0) {
        return -1;
      }
      var file = files[index];
      var fileCount = this.newFileRef++;
      this.fileStreams[fileCount] = file;
      return fileCount;
    };
    Uploader2.prototype.uploadFiles = function(files, custom) {
      var selectedFiles = [];
      if (this.asyncSettings.saveUrl === "" || isNullOrUndefined(this.asyncSettings.saveUrl)) {
        return;
      }
      if (!custom || isNullOrUndefined(custom)) {
        if (!this.multiple) {
          var file = [];
          file.push(files[0]);
          selectedFiles = this.filterfileList(file);
        } else {
          selectedFiles = this.filterfileList(files);
        }
      } else {
        selectedFiles = files;
      }
      for (var i = 0; i < selectedFiles.length; i++) {
        this.uploadFilesRequest(selectedFiles, i, custom);
      }
    };
    Uploader2.prototype.uploadFilesRequest = function(selectedFiles, i, custom) {
      var _this = this;
      var chunkEnabled = this.checkChunkUpload();
      var ajax = new Ajax(this.asyncSettings.saveUrl, "POST", true, null);
      ajax.emitError = false;
      var eventArgs = {
        fileData: selectedFiles[i],
        customFormData: [],
        cancel: false
      };
      var formData = new FormData();
      ajax.beforeSend = function(e) {
        eventArgs.currentRequest = ajax.httpRequest;
        _this.trigger("uploading", eventArgs, function(eventArgs2) {
          if (eventArgs2.cancel) {
            _this.eventCancelByArgs(e, eventArgs2, selectedFiles[i]);
          }
          if (_this.customFormDatas && _this.customFormDatas.length > 0) {
            _this.updateFormData(formData, _this.customFormDatas);
          }
          _this.updateFormData(formData, eventArgs2.customFormData);
        });
      };
      if (selectedFiles[i].statusCode === "1") {
        var name_4 = this.element.getAttribute("name");
        formData.append(name_4, selectedFiles[i].rawFile, selectedFiles[i].name);
        if (chunkEnabled && selectedFiles[i].size > this.asyncSettings.chunkSize) {
          this.chunkUpload(selectedFiles[i], custom, i);
        } else {
          ajax.onLoad = function(e) {
            if (eventArgs.cancel) {
              return {};
            } else {
              _this.uploadComplete(e, selectedFiles[i], custom);
              return {};
            }
          };
          ajax.onUploadProgress = function(e) {
            if (eventArgs.cancel) {
              return {};
            } else {
              _this.uploadInProgress(e, selectedFiles[i], custom, ajax);
              return {};
            }
          };
          ajax.onError = function(e) {
            _this.uploadFailed(e, selectedFiles[i]);
            return {};
          };
          ajax.send(formData);
        }
      }
    };
    Uploader2.prototype.spliceFiles = function(liIndex) {
      var liElement = this.fileList[liIndex];
      var allFiles = this.getFilesData();
      var nameElements = +liElement.getAttribute("data-files-count");
      var startIndex = 0;
      for (var i = 0; i < liIndex; i++) {
        startIndex += +this.fileList[i].getAttribute("data-files-count");
      }
      var endIndex = startIndex + nameElements - 1;
      for (var j = endIndex; j >= startIndex; j--) {
        allFiles.splice(j, 1);
      }
    };
    Uploader2.prototype.remove = function(fileData, customTemplate, removeDirectly, postRawFile, args) {
      var _this = this;
      if (isNullOrUndefined(postRawFile)) {
        postRawFile = true;
      }
      var eventArgs = {
        event: args,
        cancel: false,
        filesData: [],
        customFormData: [],
        postRawFile,
        currentRequest: null
      };
      var beforeEventArgs = {
        cancel: false,
        customFormData: [],
        currentRequest: null
      };
      this.trigger("beforeRemove", beforeEventArgs, function(beforeEventArgs2) {
        if (!beforeEventArgs2.cancel) {
          if (_this.isFormUpload()) {
            eventArgs.filesData = fileData;
            _this.trigger("removing", eventArgs, function(eventArgs2) {
              if (!eventArgs2.cancel) {
                var removingFiles = _this.getFilesInArray(fileData);
                var isLiRemoved = false;
                var liIndex = void 0;
                for (var _i2 = 0, removingFiles_1 = removingFiles; _i2 < removingFiles_1.length; _i2++) {
                  var data = removingFiles_1[_i2];
                  if (!isLiRemoved) {
                    liIndex = _this.fileList.indexOf(data.list);
                  }
                  if (liIndex > -1) {
                    var inputElement = !isNullOrUndefined(data.input) ? data.input : null;
                    if (inputElement) {
                      detach(inputElement);
                    }
                    _this.spliceFiles(liIndex);
                    detach(_this.fileList[liIndex]);
                    _this.fileList.splice(liIndex, 1);
                    isLiRemoved = true;
                    liIndex = -1;
                  }
                }
              }
            });
          } else if (_this.isForm && (isNullOrUndefined(_this.asyncSettings.removeUrl) || _this.asyncSettings.removeUrl === "")) {
            eventArgs.filesData = _this.getFilesData();
            _this.trigger("removing", eventArgs, function(eventArgs2) {
              if (!eventArgs2.cancel) {
                _this.clearAll();
              }
            });
          } else {
            var removeFiles = [];
            fileData = !isNullOrUndefined(fileData) ? fileData : _this.filesData;
            if (fileData instanceof Array) {
              removeFiles = fileData;
            } else {
              removeFiles.push(fileData);
            }
            eventArgs.filesData = removeFiles;
            var removeUrl = _this.asyncSettings.removeUrl;
            var validUrl = removeUrl === "" || isNullOrUndefined(removeUrl) ? false : true;
            var _loop_5 = function(files2) {
              var fileUploadedIndex = _this.uploadedFilesData.indexOf(files2);
              if ((files2.statusCode === "2" || files2.statusCode === "4" || files2.statusCode === "0" && fileUploadedIndex !== -1) && validUrl) {
                _this.removeUploadedFile(files2, eventArgs, removeDirectly, customTemplate);
              } else {
                if (!removeDirectly) {
                  _this.trigger("removing", eventArgs, function(eventArgs2) {
                    if (!eventArgs2.cancel) {
                      _this.removeFilesData(files2, customTemplate);
                    }
                  });
                } else {
                  _this.removeFilesData(files2, customTemplate);
                }
              }
              if (args && !args.target.classList.contains(REMOVE_ICON)) {
                _this.checkActionComplete(false);
              }
            };
            for (var _i = 0, removeFiles_1 = removeFiles; _i < removeFiles_1.length; _i++) {
              var files = removeFiles_1[_i];
              _loop_5(files);
            }
          }
        }
      });
    };
    Uploader2.prototype.clearAll = function() {
      var _this = this;
      if (isNullOrUndefined(this.listParent)) {
        if (this.browserName !== "msie") {
          this.element.value = "";
        }
        this.filesData = [];
        return;
      }
      var eventArgs = {
        cancel: false,
        filesData: this.filesData
      };
      this.trigger("clearing", eventArgs, function(eventArgs2) {
        if (!eventArgs2.cancel) {
          _this.clearData();
          _this.actionCompleteCount = 0;
          _this.count = -1;
        }
      });
    };
    Uploader2.prototype.getFilesData = function(index) {
      if (isNullOrUndefined(index)) {
        return this.filesData;
      } else {
        return this.getSelectedFiles(index);
      }
    };
    Uploader2.prototype.pause = function(fileData, custom) {
      fileData = fileData ? fileData : this.filesData;
      var fileDataFiles = this.getFilesInArray(fileData);
      this.pauseUploading(fileDataFiles, custom);
    };
    Uploader2.prototype.pauseUploading = function(fileData, custom) {
      var files = this.getFiles(fileData);
      for (var i = 0; i < files.length; i++) {
        if (files[i].statusCode === "3") {
          this.pauseUpload(this.getCurrentMetaData(files[i], null), null, custom);
        }
      }
    };
    Uploader2.prototype.getFiles = function(fileData) {
      var files = [];
      if (!isNullOrUndefined(fileData) && !(fileData instanceof Array)) {
        files.push(fileData);
      } else {
        files = fileData;
      }
      return files;
    };
    Uploader2.prototype.resume = function(fileData, custom) {
      fileData = fileData ? fileData : this.filesData;
      var fileDataFiles = this.getFilesInArray(fileData);
      this.resumeFiles(fileDataFiles, custom);
    };
    Uploader2.prototype.resumeFiles = function(fileData, custom) {
      var files = this.getFiles(fileData);
      for (var i = 0; i < files.length; i++) {
        if (files[i].statusCode === "4") {
          this.resumeUpload(this.getCurrentMetaData(files[i], null), null, custom);
        }
      }
    };
    Uploader2.prototype.retry = function(fileData, fromcanceledStage, custom) {
      fileData = fileData ? fileData : this.filesData;
      var fileDataFiles = this.getFilesInArray(fileData);
      if (this.sequentialUpload && this.isFirstFileOnSelection) {
        this.isFirstFileOnSelection = false;
      }
      this.retryFailedFiles(fileDataFiles, fromcanceledStage, custom);
    };
    Uploader2.prototype.retryFailedFiles = function(fileData, fromcanceledStage, custom) {
      var files = this.getFiles(fileData);
      for (var i = 0; i < files.length; i++) {
        if (files[i].statusCode === "5" || files[i].statusCode === "0") {
          if (this.asyncSettings.chunkSize > 0 && this.getCurrentMetaData(files[i], null)) {
            this.retryUpload(this.getCurrentMetaData(files[i], null), fromcanceledStage);
          } else {
            var liElement = void 0;
            if (!custom) {
              liElement = this.fileList[this.filesData.indexOf(files[i])];
            }
            this.reloadcanceledFile(null, files[i], liElement, custom);
          }
        }
      }
    };
    Uploader2.prototype.cancel = function(fileData) {
      fileData = fileData ? fileData : this.filesData;
      var cancelingFiles = this.getFilesInArray(fileData);
      this.cancelUpload(cancelingFiles);
    };
    Uploader2.prototype.cancelUpload = function(fileData) {
      var files = this.getFiles(fileData);
      if (this.asyncSettings.chunkSize > 0) {
        for (var i = 0; i < files.length; i++) {
          if (files[i].statusCode === "3") {
            var metaData = this.getCurrentMetaData(files[i], null);
            metaData.file.statusCode = "5";
            metaData.file.status = this.localizedTexts("fileUploadCancel");
            this.updateMetaData(metaData);
            this.showHideUploadSpinner(files[i]);
          }
        }
      } else {
        for (var i = 0; i < files.length; i++) {
          if (files[i].statusCode === "3") {
            files[i].statusCode = "5";
            files[i].status = this.localizedTexts("fileUploadCancel");
            this.showHideUploadSpinner(files[i]);
          }
        }
      }
    };
    Uploader2.prototype.showHideUploadSpinner = function(files) {
      var liElement = this.getLiElement(files);
      if (!isNullOrUndefined(liElement) && isNullOrUndefined(this.template)) {
        var spinnerTarget = liElement.querySelector("." + ABORT_ICON);
        createSpinner({
          target: spinnerTarget,
          width: "20px"
        });
        showSpinner(spinnerTarget);
      }
    };
    __decorate22([Complex({
      saveUrl: "",
      removeUrl: ""
    }, AsyncSettings)], Uploader2.prototype, "asyncSettings", void 0);
    __decorate22([Property(false)], Uploader2.prototype, "sequentialUpload", void 0);
    __decorate22([Property({})], Uploader2.prototype, "htmlAttributes", void 0);
    __decorate22([Property("")], Uploader2.prototype, "cssClass", void 0);
    __decorate22([Property(true)], Uploader2.prototype, "enabled", void 0);
    __decorate22([Property(null)], Uploader2.prototype, "template", void 0);
    __decorate22([Property(true)], Uploader2.prototype, "multiple", void 0);
    __decorate22([Property(true)], Uploader2.prototype, "autoUpload", void 0);
    __decorate22([Property(true)], Uploader2.prototype, "enableHtmlSanitizer", void 0);
    __decorate22([Complex({}, ButtonsProps)], Uploader2.prototype, "buttons", void 0);
    __decorate22([Property("")], Uploader2.prototype, "allowedExtensions", void 0);
    __decorate22([Property(0)], Uploader2.prototype, "minFileSize", void 0);
    __decorate22([Property(3e7)], Uploader2.prototype, "maxFileSize", void 0);
    __decorate22([Property(null)], Uploader2.prototype, "dropArea", void 0);
    __decorate22([Collection([{}], FilesProp)], Uploader2.prototype, "files", void 0);
    __decorate22([Property(true)], Uploader2.prototype, "showFileList", void 0);
    __decorate22([Property(false)], Uploader2.prototype, "directoryUpload", void 0);
    __decorate22([Property("Default")], Uploader2.prototype, "dropEffect", void 0);
    __decorate22([Event()], Uploader2.prototype, "created", void 0);
    __decorate22([Event()], Uploader2.prototype, "actionComplete", void 0);
    __decorate22([Event()], Uploader2.prototype, "rendering", void 0);
    __decorate22([Event()], Uploader2.prototype, "beforeUpload", void 0);
    __decorate22([Event()], Uploader2.prototype, "fileListRendering", void 0);
    __decorate22([Event()], Uploader2.prototype, "selected", void 0);
    __decorate22([Event()], Uploader2.prototype, "uploading", void 0);
    __decorate22([Event()], Uploader2.prototype, "success", void 0);
    __decorate22([Event()], Uploader2.prototype, "failure", void 0);
    __decorate22([Event()], Uploader2.prototype, "removing", void 0);
    __decorate22([Event()], Uploader2.prototype, "beforeRemove", void 0);
    __decorate22([Event()], Uploader2.prototype, "clearing", void 0);
    __decorate22([Event()], Uploader2.prototype, "progress", void 0);
    __decorate22([Event()], Uploader2.prototype, "change", void 0);
    __decorate22([Event()], Uploader2.prototype, "chunkSuccess", void 0);
    __decorate22([Event()], Uploader2.prototype, "chunkFailure", void 0);
    __decorate22([Event()], Uploader2.prototype, "chunkUploading", void 0);
    __decorate22([Event()], Uploader2.prototype, "canceling", void 0);
    __decorate22([Event()], Uploader2.prototype, "pausing", void 0);
    __decorate22([Event()], Uploader2.prototype, "resuming", void 0);
    Uploader2 = __decorate22([NotifyPropertyChanges], Uploader2);
    return Uploader2;
  }(Component)
);

// node_modules/@syncfusion/ej2-inputs/src/textarea/textarea.js
var __extends24 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate23 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HIDE_CLEAR2 = "e-clear-icon-hide";
var AUTO_WIDTH = "e-auto-width";
var RESIZE_X = "e-resize-x";
var RESIZE_Y = "e-resize-y";
var RESIZE_XY = "e-resize-xy";
var RESIZE_NONE = "e-resize-none";
var TextArea = (
  /** @class */
  function(_super) {
    __extends24(TextArea2, _super);
    function TextArea2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.previousValue = null;
      _this.isForm = false;
      _this.inputPreviousValue = null;
      _this.textareaOptions = options;
      return _this;
    }
    TextArea2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "floatLabelType":
            Input.removeFloating(this.textareaWrapper);
            Input.addFloating(this.element, this.floatLabelType, this.placeholder);
            if (this.floatLabelType === "Never") {
              this.element.removeAttribute("aria-labelledby");
            }
            break;
          case "enabled":
            Input.setEnabled(this.enabled, this.element, this.floatLabelType, this.textareaWrapper.container);
            this.bindClearEvent();
            if (!this.enabled && this.resizeMode !== "None") {
              this.element.classList.remove(this.getCurrentResizeClass(this.resizeMode));
              this.element.classList.add(RESIZE_NONE);
            } else {
              this.element.classList.add(this.getCurrentResizeClass(this.resizeMode));
            }
            break;
          case "width":
            if (this.resizeMode !== "None" && this.resizeMode !== "Vertical") {
              this.setElementWidth(newProp.width);
              this.textareaWrapper.container.classList.add(AUTO_WIDTH);
            } else {
              if (this.textareaWrapper.container.classList.contains(AUTO_WIDTH)) {
                this.textareaWrapper.container.classList.remove(AUTO_WIDTH);
              }
              Input.setWidth(newProp.width, this.textareaWrapper.container);
            }
            break;
          case "value":
            {
              var prevOnChange = this.isProtectedOnChange;
              this.isProtectedOnChange = true;
              if (!Input.isBlank(this.value)) {
                this.value = this.value.toString();
              }
              this.isProtectedOnChange = prevOnChange;
              Input.setValue(this.value, this.element, this.floatLabelType, this.showClearButton);
              this.inputPreviousValue = this.element.value;
              if ((this.isAngular || this.isVue) && this.preventChange === true) {
                this.previousValue = this.isAngular ? this.value : this.previousValue;
                this.preventChange = false;
              } else if (isNullOrUndefined(this.isAngular) || !this.isAngular || this.isAngular && !this.preventChange || this.isAngular && isNullOrUndefined(this.preventChange)) {
                this.raiseChangeEvent();
              }
            }
            break;
          case "htmlAttributes":
            {
              this.updateHTMLAttributesToElement();
              this.updateHTMLAttributesToWrapper();
              this.checkAttributes(true);
              Input.validateInputType(this.textareaWrapper.container, this.element);
            }
            break;
          case "readonly":
            Input.setReadonly(this.readonly, this.element);
            if (this.readonly) {
              this.element.setAttribute("aria-readonly", "true");
            } else {
              this.element.removeAttribute("aria-readonly");
            }
            break;
          case "showClearButton":
            Input.setClearButton(this.showClearButton, this.element, this.textareaWrapper);
            this.bindClearEvent();
            break;
          case "enableRtl":
            Input.setEnableRtl(this.enableRtl, [this.textareaWrapper.container]);
            break;
          case "placeholder":
            Input.setPlaceholder(this.placeholder, this.element);
            Input.calculateWidth(this.element, this.textareaWrapper.container);
            break;
          case "cssClass":
            Input.updateCssClass(newProp.cssClass, oldProp.cssClass, this.textareaWrapper.container);
            break;
          case "locale":
            this.globalize = new Internationalization(this.locale);
            this.l10n.setLocale(this.locale);
            this.setProperties({
              placeholder: this.l10n.getConstant("placeholder")
            }, true);
            Input.setPlaceholder(this.placeholder, this.element);
            break;
          case "rows":
            if (this.rows) {
              this.element.setAttribute("rows", this.rows.toString());
            }
            break;
          case "cols":
            if (this.cols) {
              this.element.setAttribute("cols", this.cols.toString());
              if (this.width == null) {
                this.textareaWrapper.container.classList.add(AUTO_WIDTH);
              }
            }
            break;
          case "maxLength":
            if (this.maxLength) {
              this.element.setAttribute("maxlength", this.maxLength.toString());
            }
            break;
          case "resizeMode":
            if (this.enabled) {
              if (this.element.classList.contains(this.getCurrentResizeClass(oldProp.resizeMode))) {
                this.element.classList.remove(this.getCurrentResizeClass(oldProp.resizeMode));
              }
              this.element.classList.add(this.getCurrentResizeClass(this.resizeMode));
              if (this.element.style.width && (this.resizeMode === "None" || this.resizeMode === "Vertical")) {
                Input.setWidth(this.element.style.width, this.textareaWrapper.container);
              } else {
                var currentWidth = this.element.offsetWidth;
                this.element.style.width = currentWidth + "px";
                if (this.textareaWrapper.container.style.width) {
                  this.textareaWrapper.container.style.width = "";
                }
              }
              this.setWrapperWidth();
            }
            break;
        }
      }
    };
    TextArea2.prototype.preRender = function() {
      this.formElement = closest(this.element, "form");
      if (!isNullOrUndefined(this.formElement)) {
        this.isForm = true;
      }
      if (this.element.tagName === "EJS-TEXTAREA" || this.element.tagName === "EJS-SMARTTEXTAREA") {
        var ejInstance = getValue("ej2_instances", this.element);
        var inputElement = this.createElement("textarea");
        var index = 0;
        for (index; index < this.element.attributes.length; index++) {
          var attributeName = this.element.attributes[index].nodeName;
          if (attributeName !== "id" && attributeName !== "class") {
            inputElement.setAttribute(attributeName, this.element.attributes[index].nodeValue);
            inputElement.innerHTML = this.element.innerHTML;
            if (attributeName === "name") {
              this.element.removeAttribute("name");
            }
          } else if (attributeName === "class") {
            inputElement.setAttribute(attributeName, this.element.className.split(" ").filter(function(item) {
              return item.indexOf("ng-") !== 0;
            }).join(" "));
          }
        }
        this.element.appendChild(inputElement);
        this.element = inputElement;
        setValue("ej2_instances", ejInstance, this.element);
      }
      this.updateHTMLAttributesToElement();
      this.checkAttributes(false);
      if ((isNullOrUndefined(this.textareaOptions) || this.textareaOptions["value"] === void 0) && this.element.value !== "") {
        this.setProperties({
          value: this.element.value
        }, true);
      }
      this.globalize = new Internationalization(this.locale);
      var localeText = {
        placeholder: this.placeholder
      };
      this.l10n = new L10n("textarea", localeText, this.locale);
      if (this.l10n.getConstant("placeholder") !== "") {
        this.setProperties({
          placeholder: this.placeholder || this.l10n.getConstant("placeholder")
        }, true);
      }
      if (!this.element.hasAttribute("id")) {
        this.element.setAttribute("id", getUniqueID("textbox"));
      }
      if (!this.element.hasAttribute("name")) {
        this.element.setAttribute("name", this.element.getAttribute("id"));
      }
      if (this.rows) {
        this.element.setAttribute("rows", this.rows.toString());
      }
      if (this.cols) {
        this.element.setAttribute("cols", this.cols.toString());
      }
      if (this.maxLength) {
        this.element.setAttribute("maxlength", this.maxLength.toString());
      }
      if (!this.element.style.resize && this.enabled) {
        this.element.classList.add(this.getCurrentResizeClass(this.resizeMode));
      }
      if (this.enabled) {
        this.element.setAttribute("aria-multiline", "true");
      }
    };
    TextArea2.prototype.render = function() {
      var updatedCssClassValue = this.cssClass;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        updatedCssClassValue = Input.getInputValidClassList(this.cssClass);
      }
      this.textareaWrapper = Input.createInput({
        element: this.element,
        floatLabelType: this.floatLabelType,
        properties: {
          enabled: this.enabled,
          enableRtl: this.enableRtl,
          cssClass: updatedCssClassValue,
          readonly: this.readonly,
          placeholder: this.placeholder,
          showClearButton: this.showClearButton
        }
      });
      this.updateHTMLAttributesToWrapper();
      this.wireEvents();
      if (!isNullOrUndefined(this.value)) {
        Input.setValue(this.value, this.element, this.floatLabelType, this.showClearButton);
      }
      if (!isNullOrUndefined(this.value)) {
        this.initialValue = this.value;
        if (!this.isAngular) {
          this.element.setAttribute("value", this.initialValue);
        }
      }
      this.previousValue = this.value;
      this.inputPreviousValue = this.value;
      this.element.defaultValue = this.element.value;
      Input.setWidth(this.width, this.textareaWrapper.container);
      this.setWrapperWidth();
      this.renderComplete();
    };
    TextArea2.prototype.getModuleName = function() {
      return "textarea";
    };
    TextArea2.prototype.getPersistData = function() {
      var keyEntity = ["value"];
      return this.addOnPersist(keyEntity);
    };
    TextArea2.prototype.checkAttributes = function(isDynamic) {
      var attrs = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ["placeholder", "disabled", "value", "readonly"];
      for (var _i = 0, attrs_1 = attrs; _i < attrs_1.length; _i++) {
        var key = attrs_1[_i];
        if (!isNullOrUndefined(this.element.getAttribute(key))) {
          switch (key) {
            case "disabled":
              if (isNullOrUndefined(this.textareaOptions) || this.textareaOptions["enabled"] === void 0 || isDynamic) {
                var enabled = this.element.getAttribute(key) === "disabled" || this.element.getAttribute(key) === "" || this.element.getAttribute(key) === "true" ? false : true;
                this.setProperties({
                  enabled
                }, !isDynamic);
              }
              break;
            case "readonly":
              if (isNullOrUndefined(this.textareaOptions) || this.textareaOptions["readonly"] === void 0 || isDynamic) {
                var readonly = this.element.getAttribute(key) === "readonly" || this.element.getAttribute(key) === "" || this.element.getAttribute(key) === "true" ? true : false;
                this.setProperties({
                  readonly
                }, !isDynamic);
              }
              break;
            case "placeholder":
              if (isNullOrUndefined(this.textareaOptions) || this.textareaOptions["placeholder"] === void 0 || isDynamic) {
                this.setProperties({
                  placeholder: this.element.placeholder
                }, !isDynamic);
              }
              break;
            case "value":
              if ((isNullOrUndefined(this.textareaOptions) || this.textareaOptions["value"] === void 0 || isDynamic) && this.element.value !== "") {
                this.setProperties({
                  value: this.element.value
                }, !isDynamic);
              }
              break;
          }
        }
      }
    };
    TextArea2.prototype.wireEvents = function() {
      EventHandler.add(this.element, "focus", this.focusHandler, this);
      EventHandler.add(this.element, "blur", this.focusOutHandler, this);
      EventHandler.add(this.element, "keydown", this.keydownHandler, this);
      EventHandler.add(this.element, "input", this.inputHandler, this);
      EventHandler.add(this.element, "change", this.changeHandler, this);
      if (this.isForm) {
        EventHandler.add(this.formElement, "reset", this.resetForm, this);
      }
      this.bindClearEvent();
    };
    TextArea2.prototype.unWireEvents = function() {
      EventHandler.remove(this.element, "focus", this.focusHandler);
      EventHandler.remove(this.element, "blur", this.focusOutHandler);
      EventHandler.remove(this.element, "keydown", this.keydownHandler);
      EventHandler.remove(this.element, "input", this.inputHandler);
      EventHandler.remove(this.element, "change", this.changeHandler);
      if (this.isForm) {
        EventHandler.remove(this.formElement, "reset", this.resetForm);
      }
    };
    TextArea2.prototype.destroy = function() {
      this.unWireEvents();
      if (this.showClearButton) {
        this.clearButton = document.getElementsByClassName("e-clear-icon")[0];
      }
      this.element.value = this.element.defaultValue;
      this.element.classList.remove("e-input", RESIZE_X, RESIZE_Y, RESIZE_XY, RESIZE_NONE);
      if (this.textareaWrapper.container.style.width.includes("%")) {
        EventHandler.remove(this.element, "mousemove", this.onMouseMove);
      }
      this.removeAttributes(["aria-disabled", "aria-readonly", "aria-labelledby", "aria-multiline"]);
      if (!isNullOrUndefined(this.textareaWrapper)) {
        this.textareaWrapper.container.insertAdjacentElement("afterend", this.element);
        detach(this.textareaWrapper.container);
      }
      this.textareaWrapper = null;
      Input.destroy({
        element: this.element,
        floatLabelType: this.floatLabelType,
        properties: this.properties
      }, this.clearButton);
      this.formElement = null;
      _super.prototype.destroy.call(this);
    };
    TextArea2.prototype.focusHandler = function(args) {
      var eventArgs = {
        container: this.textareaWrapper.container,
        event: args,
        value: this.value
      };
      this.trigger("focus", eventArgs);
    };
    TextArea2.prototype.focusOutHandler = function(args) {
      if (!(this.previousValue === null && this.value === null) && this.previousValue !== this.value) {
        this.raiseChangeEvent(args, true);
      }
      var eventArgs = {
        container: this.textareaWrapper.container,
        event: args,
        value: this.value
      };
      this.trigger("blur", eventArgs);
    };
    TextArea2.prototype.keydownHandler = function(args) {
      if ((args.keyCode === 13 || args.keyCode === 9) && !((this.previousValue === null || this.previousValue === "") && (this.value === null || this.value === "") && this.element.value === "")) {
        this.setProperties({
          value: this.element.value
        }, true);
      }
    };
    TextArea2.prototype.inputHandler = function(args) {
      var textareaObj = this;
      var eventArgs = {
        event: args,
        value: this.element.value,
        previousValue: this.inputPreviousValue,
        container: this.textareaWrapper.container
      };
      this.inputPreviousValue = this.element.value;
      if (this.isAngular) {
        textareaObj.localChange({
          value: this.element.value
        });
        this.preventChange = true;
      }
      if (this.isVue) {
        this.preventChange = true;
      }
      this.trigger("input", eventArgs);
      args.stopPropagation();
    };
    TextArea2.prototype.changeHandler = function(args) {
      this.setProperties({
        value: this.element.value
      }, true);
      if (this.previousValue !== this.value) {
        this.raiseChangeEvent(args, true);
      }
      args.stopPropagation();
    };
    TextArea2.prototype.raiseChangeEvent = function(event2, interaction) {
      var eventArgs = {
        event: event2,
        value: this.value,
        previousValue: this.previousValue,
        container: this.textareaWrapper.container,
        isInteraction: interaction ? interaction : false,
        isInteracted: interaction ? interaction : false
      };
      this.preventChange = false;
      this.trigger("change", eventArgs);
      this.previousValue = this.value;
    };
    TextArea2.prototype.updateHTMLAttributesToWrapper = function() {
      Input.updateHTMLAttributesToWrapper(this.htmlAttributes, this.textareaWrapper.container);
    };
    TextArea2.prototype.updateHTMLAttributesToElement = function() {
      Input.updateHTMLAttributesToElement(this.htmlAttributes, this.element);
    };
    TextArea2.prototype.bindClearEvent = function() {
      if (this.showClearButton) {
        if (this.enabled) {
          EventHandler.add(this.textareaWrapper.clearButton, "mousedown touchstart", this.resetInputHandler, this);
        } else {
          EventHandler.remove(this.textareaWrapper.clearButton, "mousedown touchstart", this.resetInputHandler);
        }
      }
    };
    TextArea2.prototype.resetInputHandler = function(event2) {
      event2.preventDefault();
      if (!this.textareaWrapper.clearButton.classList.contains(HIDE_CLEAR2) || this.textareaWrapper.container.classList.contains("e-static-clear")) {
        Input.setValue("", this.element, this.floatLabelType, this.showClearButton);
        this.setProperties({
          value: this.element.value
        }, true);
      }
      var eventArgs = {
        event: event2,
        value: this.element.value,
        previousValue: this.inputPreviousValue,
        container: this.textareaWrapper.container
      };
      this.trigger("input", eventArgs);
      this.inputPreviousValue = this.element.value;
      this.raiseChangeEvent(event2, true);
      if (closest(this.element, "form")) {
        var element2 = this.element;
        var keyupEvent = document.createEvent("KeyboardEvent");
        keyupEvent.initEvent("keyup", false, true);
        element2.dispatchEvent(keyupEvent);
      }
    };
    TextArea2.prototype.addAttributes = function(attributes2) {
      for (var _i = 0, _a = Object.keys(attributes2); _i < _a.length; _i++) {
        var key = _a[_i];
        if (key === "disabled") {
          this.setProperties({
            enabled: false
          }, true);
          Input.setEnabled(this.enabled, this.element, this.floatLabelType, this.textareaWrapper.container);
        } else if (key === "readonly") {
          this.setProperties({
            readonly: true
          }, true);
          Input.setReadonly(this.readonly, this.element);
        } else if (key === "class") {
          this.element.classList.add(attributes2["" + key]);
        } else if (key === "placeholder") {
          this.setProperties({
            placeholder: attributes2["" + key]
          }, true);
          Input.setPlaceholder(this.placeholder, this.element);
        } else {
          this.element.setAttribute(key, attributes2["" + key]);
        }
      }
    };
    TextArea2.prototype.removeAttributes = function(attributes2) {
      for (var _i = 0, attributes_1 = attributes2; _i < attributes_1.length; _i++) {
        var key = attributes_1[_i];
        if (key === "disabled") {
          this.setProperties({
            enabled: true
          }, true);
          Input.setEnabled(this.enabled, this.element, this.floatLabelType, this.textareaWrapper.container);
        } else if (key === "readonly") {
          this.setProperties({
            readonly: false
          }, true);
          Input.setReadonly(this.readonly, this.element);
        } else if (key === "placeholder") {
          this.setProperties({
            placeholder: null
          }, true);
          Input.setPlaceholder(this.placeholder, this.element);
        } else {
          this.element.removeAttribute(key);
        }
      }
    };
    TextArea2.prototype.focusIn = function() {
      if (document.activeElement !== this.element && this.enabled) {
        this.element.focus();
        if (this.textareaWrapper.container.classList.contains("e-input-group") || this.textareaWrapper.container.classList.contains("e-outline") || this.textareaWrapper.container.classList.contains("e-filled")) {
          addClass([this.textareaWrapper.container], [TEXTBOX_FOCUS]);
        }
      }
    };
    TextArea2.prototype.focusOut = function() {
      if (document.activeElement === this.element && this.enabled) {
        this.element.blur();
        if (this.textareaWrapper.container.classList.contains("e-input-group") || this.textareaWrapper.container.classList.contains("e-outline") || this.textareaWrapper.container.classList.contains("e-filled")) {
          removeClass([this.textareaWrapper.container], [TEXTBOX_FOCUS]);
        }
      }
    };
    TextArea2.prototype.setWrapperWidth = function() {
      if (this.enabled && (this.resizeMode !== "None" && this.resizeMode !== "Vertical" || this.cols || this.element.getAttribute("cols"))) {
        if (this.resizeMode !== "None" && this.resizeMode !== "Vertical" && !this.textareaWrapper.container.style.width.includes("%")) {
          this.setElementWidth(this.textareaWrapper.container.style.width);
        }
        if (!this.textareaWrapper.container.style.width.includes("%")) {
          this.textareaWrapper.container.classList.add(AUTO_WIDTH);
          this.textareaWrapper.container.style.width = "";
        }
        if (this.textareaWrapper.container.style.width.includes("%")) {
          EventHandler.add(this.element, "mousemove", this.onMouseMove, this);
        }
      } else {
        if (this.textareaWrapper.container.classList.contains(AUTO_WIDTH)) {
          this.textareaWrapper.container.classList.remove(AUTO_WIDTH);
        }
      }
    };
    TextArea2.prototype.onMouseMove = function() {
      var _this = this;
      if (this.textareaWrapper.container.style.width !== "auto") {
        var initialWidth_1 = this.element.style.width;
        setTimeout(function() {
          var currentWidth = _this.element.style.width;
          if (initialWidth_1 !== currentWidth) {
            _this.textareaWrapper.container.style.width = "auto";
          }
        }, 5);
      }
    };
    TextArea2.prototype.resetForm = function() {
      if (this.isAngular) {
        this.resetValue("");
      } else {
        this.resetValue(this.initialValue);
      }
      if (!isNullOrUndefined(this.textareaWrapper)) {
        var label = this.textareaWrapper.container.querySelector(".e-float-text");
        if (!isNullOrUndefined(label) && this.floatLabelType !== "Always") {
          if (isNullOrUndefined(this.initialValue) || this.initialValue === "") {
            label.classList.add("e-label-bottom");
            label.classList.remove("e-label-top");
          } else if (this.initialValue !== "") {
            label.classList.add("e-label-top");
            label.classList.remove("e-label-bottom");
          }
        }
      }
    };
    TextArea2.prototype.resetValue = function(value) {
      var prevOnChange = this.isProtectedOnChange;
      this.isProtectedOnChange = true;
      this.value = value;
      if (value == null && this.textareaWrapper.container.classList.contains("e-valid-input") && !(this.floatLabelType === "Always" && this.textareaWrapper.container.classList.contains("e-outline"))) {
        this.textareaWrapper.container.classList.remove("e-valid-input");
      }
      this.isProtectedOnChange = prevOnChange;
    };
    TextArea2.prototype.setElementWidth = function(width) {
      if (typeof width === "number") {
        this.element.style.width = formatUnit(width);
      } else if (typeof width === "string") {
        this.element.style.width = width.match(/px|%|em/) ? width : formatUnit(width);
      }
    };
    TextArea2.prototype.getCurrentResizeClass = function(resizeMode) {
      return resizeMode === "None" ? RESIZE_NONE : resizeMode === "Both" ? RESIZE_XY : resizeMode === "Horizontal" ? RESIZE_X : RESIZE_Y;
    };
    __decorate23([Property(false)], TextArea2.prototype, "readonly", void 0);
    __decorate23([Property(null)], TextArea2.prototype, "value", void 0);
    __decorate23([Property("Never")], TextArea2.prototype, "floatLabelType", void 0);
    __decorate23([Property("")], TextArea2.prototype, "cssClass", void 0);
    __decorate23([Property(null)], TextArea2.prototype, "placeholder", void 0);
    __decorate23([Property({})], TextArea2.prototype, "htmlAttributes", void 0);
    __decorate23([Property(true)], TextArea2.prototype, "enabled", void 0);
    __decorate23([Property(false)], TextArea2.prototype, "showClearButton", void 0);
    __decorate23([Property(false)], TextArea2.prototype, "enablePersistence", void 0);
    __decorate23([Property(null)], TextArea2.prototype, "width", void 0);
    __decorate23([Property("Both")], TextArea2.prototype, "resizeMode", void 0);
    __decorate23([Property(null)], TextArea2.prototype, "maxLength", void 0);
    __decorate23([Property(null)], TextArea2.prototype, "cols", void 0);
    __decorate23([Property(null)], TextArea2.prototype, "rows", void 0);
    __decorate23([Event()], TextArea2.prototype, "created", void 0);
    __decorate23([Event()], TextArea2.prototype, "destroyed", void 0);
    __decorate23([Event()], TextArea2.prototype, "change", void 0);
    __decorate23([Event()], TextArea2.prototype, "blur", void 0);
    __decorate23([Event()], TextArea2.prototype, "focus", void 0);
    __decorate23([Event()], TextArea2.prototype, "input", void 0);
    TextArea2 = __decorate23([NotifyPropertyChanges], TextArea2);
    return TextArea2;
  }(Component)
);

// node_modules/@syncfusion/ej2-inputs/src/smart-textarea/caret-helper.js
var CaretPositionHelper = (
  /** @class */
  function() {
    function CaretPositionHelper2() {
    }
    CaretPositionHelper2.createStyledDiv = function(target, htmlContent) {
      var div = document.createElement("div");
      var styles = {
        position: "absolute",
        left: -9999,
        top: 0,
        zIndex: -2e3
      };
      this.properties.forEach(function(prop) {
        styles["" + prop] = getComputedStyle(target)[prop];
      });
      Object.keys(styles).forEach(function(key) {
        div.style["" + key] = styles["" + key];
      });
      var scrollbarWidth = target.offsetWidth - target.clientWidth;
      div.style.width = target.clientWidth + scrollbarWidth + "px";
      div.innerHTML = htmlContent;
      if (target && target.parentNode) {
        target.parentNode.insertBefore(div, target.nextSibling);
      }
      return div;
    };
    CaretPositionHelper2.createCaretMarker = function(target, htmlContent) {
      var div = this.createStyledDiv(target, htmlContent);
      var marker = div.ownerDocument.getElementById("caret-position-marker");
      var position = {
        left: marker.offsetLeft,
        top: marker.offsetTop,
        height: marker.offsetHeight
      };
      if (div && div.parentNode) {
        div.parentNode.removeChild(div);
      }
      return position;
    };
    CaretPositionHelper2.escapeHtml = function(value) {
      return value.replace(/<|>|`|"|&/g, "?").replace(/\r\n|\r|\n/g, "<br/>");
    };
    CaretPositionHelper2.getCaretPosition = function(target) {
      var position = target.selectionStart || 0;
      var textBeforeCaret = target.value.slice(0, position);
      var textAfterCaret = target.value.slice(position);
      var content = '<span style="position: relative; display: inline;">' + this.escapeHtml(textBeforeCaret) + "</span>";
      content += '<span id="caret-position-marker" style="position: relative; display: inline;">|</span>';
      content += '<span style="position: relative; display: inline;">' + this.escapeHtml(textAfterCaret) + "</span>";
      var rect = this.createCaretMarker(target, content);
      rect.pos = position;
      return rect;
    };
    CaretPositionHelper2.adjustScrollToCaretPosition = function(element2) {
      var caretPosition = this.getCaretPosition(element2);
      var lineHeight = parseFloat(window.getComputedStyle(element2).lineHeight);
      if (caretPosition.top > element2.clientHeight + element2.scrollTop - lineHeight) {
        element2.scrollTop = caretPosition.top - element2.clientHeight + lineHeight;
      }
    };
    CaretPositionHelper2.getTextAreaPosition = function(element2) {
      var computedStyle = window.getComputedStyle(element2);
      var position = this.getCaretPosition(element2);
      return {
        top: position.top + parseFloat(computedStyle.borderTopWidth) + element2.offsetTop - element2.scrollTop,
        left: position.left + parseFloat(computedStyle.borderLeftWidth) + element2.offsetLeft - element2.scrollLeft - 0.25,
        height: position.height,
        elemStyle: computedStyle
      };
    };
    CaretPositionHelper2.insertCharacter = function(element2, text) {
      var start = element2.selectionStart;
      var end = element2.selectionEnd;
      element2.value = element2.value.substring(0, start) + text + element2.value.substring(end);
      start += text.length;
      element2.setSelectionRange(start, start);
    };
    CaretPositionHelper2.properties = ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopStyle", "borderRightStyle", "borderBottomStyle", "borderLeftStyle", "borderTopWidth", "boxSizing", "fontFamily", "fontSize", "fontWeight", "height", "letterSpacing", "lineHeight", "marginBottom", "marginLeft", "marginRight", "marginTop", "outlineWidth", "overflow", "overflowX", "overflowY", "paddingBottom", "paddingLeft", "paddingRight", "paddingTop", "textAlign", "textOverflow", "textTransform", "whiteSpace", "wordBreak", "wordWrap", "width"];
    return CaretPositionHelper2;
  }()
);

// node_modules/@syncfusion/ej2-inputs/src/smart-textarea/smart-textarea.js
var __extends25 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate24 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter3 = function(thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : new P(function(resolve2) {
        resolve2(result.value);
      }).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator3 = function(thisArg, body) {
  var _ = {
    label: 0,
    sent: function() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  }, f, y, t, g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};
var ChatMessageRole;
(function(ChatMessageRole2) {
  ChatMessageRole2["System"] = "system";
  ChatMessageRole2["User"] = "user";
  ChatMessageRole2["Assistant"] = "assistant";
})(ChatMessageRole || (ChatMessageRole = {}));
var SmartTextArea = (
  /** @class */
  function(_super) {
    __extends25(SmartTextArea2, _super);
    function SmartTextArea2(options, element2) {
      return _super.call(this, options, element2) || this;
    }
    SmartTextArea2.prototype.render = function() {
      _super.prototype.render.call(this);
      if (!(this.element instanceof HTMLTextAreaElement)) {
        return;
      }
      this.textArea = this.element;
      var smartTextArea = createElement("smart-textarea");
      smartTextArea.classList.add("e-smart-textarea");
      this.textArea.after(smartTextArea);
      if (this.showSuggestionOnPopup !== "None") {
        var suggestionState = this.showSuggestionOnPopup === "Enable" ? "false" : "true";
        this.textArea.setAttribute("data-inline-suggestions", suggestionState);
      }
      this.suggestionDisplay = this.shouldShowInlineSuggestions(this.textArea) ? new InlineSuggestion(smartTextArea, this.textArea) : new ContextSuggestion(smartTextArea, this.textArea);
    };
    SmartTextArea2.prototype.wireEvents = function() {
      var _this = this;
      _super.prototype.wireEvents.call(this);
      EventHandler.add(this.element, "keyup", this.handleKeyUp, this);
      EventHandler.add(this.element, "keydown", this.handleKeyDown, this);
      EventHandler.add(this.element, "mousedown", this.removeExistingOrPendingSuggestion, this);
      EventHandler.add(this.element, "focusout", this.removeExistingOrPendingSuggestion, this);
      this.element.addEventListener("scroll", function() {
        return _this.suggestionDisplay.reject();
      }, {
        passive: true
      });
    };
    SmartTextArea2.prototype.unWireEvents = function() {
      var _this = this;
      _super.prototype.unWireEvents.call(this);
      EventHandler.remove(this.element, "keyup", this.handleKeyUp);
      EventHandler.remove(this.element, "keydown", this.handleKeyDown);
      EventHandler.remove(this.element, "mousedown", this.removeExistingOrPendingSuggestion);
      EventHandler.remove(this.element, "focusout", this.removeExistingOrPendingSuggestion);
      this.element.removeEventListener("scroll", function() {
        return _this.suggestionDisplay.reject();
      });
    };
    SmartTextArea2.prototype.keydownHandler = function() {
    };
    SmartTextArea2.prototype.shouldShowInlineSuggestions = function(textArea) {
      var inlineSuggestions = textArea.getAttribute("data-inline-suggestions");
      if (inlineSuggestions) {
        return inlineSuggestions.toLowerCase() === "true";
      }
      return !("ontouchstart" in window);
    };
    SmartTextArea2.prototype.handleKeyDown = function(event2) {
      switch (event2.key) {
        case "Tab":
          if (this.suggestionDisplay.isShowing()) {
            this.suggestionDisplay.accept();
            event2.preventDefault();
          }
          break;
        case "Alt":
        case "Control":
        case "Shift":
        case "Command":
          break;
        default:
          if (this.suggestionDisplay.isShowing() && this.suggestionDisplay.currentSuggestion.startsWith(event2.key)) {
            CaretPositionHelper.insertCharacter(this.textArea, event2.key);
            event2.preventDefault();
            this.suggestionDisplay.show(this.suggestionDisplay.currentSuggestion.substring(event2.key.length));
            CaretPositionHelper.adjustScrollToCaretPosition(this.textArea);
          } else {
            this.removeExistingOrPendingSuggestion();
          }
          break;
      }
    };
    SmartTextArea2.prototype.handleKeyUp = function() {
      var _this = this;
      if (!this.suggestionDisplay.isShowing()) {
        clearTimeout(this.typingDebounceTimeout);
        this.typingDebounceTimeout = setTimeout(function() {
          return _this.handleTypingPaused();
        }, 350);
      }
    };
    SmartTextArea2.prototype.handleTypingPaused = function() {
      return __awaiter3(this, void 0, void 0, function() {
        return __generator3(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (document.activeElement !== this.textArea) {
                return [
                  2
                  /*return*/
                ];
              }
              if (!(this.textArea.selectionStart === this.textArea.selectionEnd && (this.textArea.selectionStart === this.textArea.value.length || this.textArea.value[this.textArea.selectionStart] === "\n"))) return [3, 2];
              return [4, this.requestSuggestionAsync()];
            case 1:
              _a.sent();
              _a.label = 2;
            case 2:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    SmartTextArea2.prototype.removeExistingOrPendingSuggestion = function() {
      clearTimeout(this.typingDebounceTimeout);
      if (this.pendingSuggestionAbort) {
        this.pendingSuggestionAbort.abort();
        this.pendingSuggestionAbort = null;
      }
      this.suggestionDisplay.reject();
    };
    SmartTextArea2.prototype.createSuggestionPrompt = function(textBefore, textAfter) {
      var stringBuilder = "Predict what text the user in the given ROLE would insert at the cursor position indicated by ^^^.\nOnly give predictions for which you have an EXTREMELY high confidence that the user would insert that EXACT text.\nDo not make up new information. If you are not sure, just reply with NO_PREDICTION.\n\nRULES:\n1. Reply with OK:, then in square brackets the predicted text, then END_INSERTION, and no other output.\n2. When a specific value or quantity cannot be inferred and would need to be provided, use the word NEED_INFO.\n3. If there is not enough information to predict any words that the user would type next, just reply with the word NO_PREDICTION.\n4. NEVER invent new information. If you can not be sure what the user is about to type, ALWAYS stop the prediction with END_INSERTION.";
      var userPhrases = this.UserPhrases;
      if (userPhrases && userPhrases.length > 0) {
        stringBuilder += "\nAlways try to use variations on the following phrases as part of the predictions:\n";
        for (var _i = 0, userPhrases_1 = userPhrases; _i < userPhrases_1.length; _i++) {
          var phrase = userPhrases_1[_i];
          stringBuilder += "- " + phrase + "\n";
        }
      }
      var chatMessageList = [{
        role: ChatMessageRole.System,
        content: stringBuilder
      }, {
        role: ChatMessageRole.User,
        content: "ROLE: Family member sending a text\nUSER_TEXT: Hey, it is a nice day - the weather is ^^^"
      }, {
        role: ChatMessageRole.Assistant,
        content: "OK:[great!]END_INSERTION"
      }, {
        role: ChatMessageRole.User,
        content: "ROLE: Customer service assistant\nUSER_TEXT: You can find more information on^^^\n\nAlternatively, phone us."
      }, {
        role: ChatMessageRole.Assistant,
        content: "OK:[ our website at NEED_INFO]END_INSERTION"
      }, {
        role: ChatMessageRole.User,
        content: "ROLE: Casual\nUSER_TEXT: Oh I see!\n\nWell sure thing, we can"
      }, {
        role: ChatMessageRole.Assistant,
        content: "OK:[ help you out with that!]END_INSERTION"
      }, {
        role: ChatMessageRole.User,
        content: "ROLE: Storyteller\nUSER_TEXT: Sir Digby Chicken Caesar, also know^^^"
      }, {
        role: ChatMessageRole.Assistant,
        content: "OK:[n as NEED_INFO]END_INSERTION"
      }, {
        role: ChatMessageRole.User,
        content: "ROLE: Customer support agent\nUSER_TEXT: Goodbye for now.^^^"
      }, {
        role: ChatMessageRole.Assistant,
        content: "NO_PREDICTION END_INSERTION"
      }, {
        role: ChatMessageRole.User,
        content: "ROLE: Pirate\nUSER_TEXT: Have you found^^^"
      }, {
        role: ChatMessageRole.Assistant,
        content: "OK:[ the treasure, me hearties?]END_INSERTION"
      }, {
        role: ChatMessageRole.User,
        content: "ROLE: " + this.userRole + "\nUSER_TEXT: " + textBefore + "^^^" + textAfter
      }];
      return {
        messages: chatMessageList,
        temperature: 0,
        maxTokens: 400,
        stopSequences: ["END_INSERTION", "NEED_INFO"],
        frequencyPenalty: 0,
        presencePenalty: 0
      };
    };
    SmartTextArea2.prototype.requestSuggestionAsync = function() {
      return __awaiter3(this, void 0, void 0, function() {
        var requestDetails, suggestionData, chatConfig, insertSuggestion, response;
        return __generator3(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (this.pendingSuggestionAbort) {
                this.pendingSuggestionAbort.abort();
                return [
                  2
                  /*return*/
                ];
              }
              this.pendingSuggestionAbort = new AbortController();
              requestDetails = {
                textAreaValue: this.textArea.value,
                cursorPosition: this.textArea.selectionStart
              };
              suggestionData = {
                textBefore: requestDetails.textAreaValue.substring(0, requestDetails.cursorPosition),
                textAfter: requestDetails.textAreaValue.substring(requestDetails.cursorPosition)
              };
              chatConfig = this.createSuggestionPrompt(suggestionData.textBefore, suggestionData.textAfter);
              if (!(typeof this.aiSuggestionHandler === "function")) return [3, 2];
              return [4, this.aiSuggestionHandler(chatConfig)];
            case 1:
              response = _a.sent();
              insertSuggestion = this.validateSuggestion(response, suggestionData.textBefore);
              _a.label = 2;
            case 2:
              if (insertSuggestion && requestDetails.textAreaValue === this.textArea.value && requestDetails.cursorPosition === this.textArea.selectionStart) {
                if (!insertSuggestion.endsWith(" ")) {
                  insertSuggestion += " ";
                }
                this.suggestionDisplay.show(insertSuggestion);
              }
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    SmartTextArea2.prototype.validateSuggestion = function(response, textBefore) {
      var suggestion;
      if (typeof response !== "string" || response.length <= 5 || response.indexOf("OK:[") !== 0) {
        return "";
      }
      var endIndex = this.indexOfAny(response, [".", "?", "!"]);
      if (endIndex > 0 && response.length > endIndex + 1 && response[endIndex + 1] === " ") {
        response = response.substring(0, endIndex + 1);
      }
      suggestion = response.substring(4).replace(/[\]\s]+$/, "");
      if (textBefore.length > 0 && textBefore[textBefore.length - 1] === " ") {
        suggestion = suggestion.replace(/^\s+/, "");
      }
      return suggestion;
    };
    SmartTextArea2.prototype.indexOfAny = function(str, chars) {
      for (var i = 0; i < str.length; i++) {
        if (chars.indexOf(str["" + i]) !== -1) {
          return i;
        }
      }
      return -1;
    };
    SmartTextArea2.prototype.getModuleName = function() {
      return "smarttextarea";
    };
    SmartTextArea2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.textArea = null;
      this.suggestionDisplay = null;
      this.typingDebounceTimeout = null;
    };
    __decorate24([Property("")], SmartTextArea2.prototype, "userRole", void 0);
    __decorate24([Property([])], SmartTextArea2.prototype, "UserPhrases", void 0);
    __decorate24([Property()], SmartTextArea2.prototype, "aiSuggestionHandler", void 0);
    __decorate24([Property("None")], SmartTextArea2.prototype, "showSuggestionOnPopup", void 0);
    return SmartTextArea2;
  }(TextArea)
);
var InlineSuggestion = (
  /** @class */
  function() {
    function InlineSuggestion2(smartTextArea, textArea) {
      this.owner = smartTextArea;
      this.textArea = textArea;
      this.latestSuggestionText = "";
      this.suggestionStartPos = null;
      this.suggestionEndPos = null;
      this.virtualCaret = null;
      this.originalValueProperty = this.getOriginalValueProperty(textArea, "value");
    }
    Object.defineProperty(InlineSuggestion2.prototype, "value", {
      get: function() {
        var value = this.originalValueProperty.get.call(this.textArea);
        return this.isShowing() ? value.substring(0, this.suggestionStartPos) + value.substring(this.suggestionEndPos) : value;
      },
      set: function(newValue) {
        this.originalValueProperty.set.call(this.textArea, newValue);
      },
      enumerable: true,
      configurable: true
    });
    InlineSuggestion2.prototype.getOriginalValueProperty = function(obj, property) {
      while (obj) {
        var descriptor = Object.getOwnPropertyDescriptor(obj, property);
        if (descriptor) {
          return descriptor;
        }
        obj = Object.getPrototypeOf(obj);
      }
      throw new Error("Property " + property + " not found on object or its prototype chain");
    };
    Object.defineProperty(InlineSuggestion2.prototype, "valueIncludingSuggestion", {
      get: function() {
        return this.originalValueProperty.get.call(this.textArea);
      },
      set: function(newValue) {
        this.originalValueProperty.set.call(this.textArea, newValue);
      },
      enumerable: true,
      configurable: true
    });
    InlineSuggestion2.prototype.isShowing = function() {
      return this.suggestionStartPos !== null;
    };
    InlineSuggestion2.prototype.show = function(suggestionText) {
      this.latestSuggestionText = suggestionText;
      this.suggestionStartPos = this.textArea.selectionStart;
      this.suggestionEndPos = this.suggestionStartPos + suggestionText.length;
      this.textArea.setAttribute("data-suggestion-visible", "");
      this.valueIncludingSuggestion = this.valueIncludingSuggestion.substring(0, this.suggestionStartPos) + suggestionText + this.valueIncludingSuggestion.substring(this.suggestionStartPos);
      this.textArea.setSelectionRange(this.suggestionStartPos, this.suggestionEndPos);
      if (!this.virtualCaret) {
        this.virtualCaret = new VirtualCaret(this.owner, this.textArea);
      }
      this.virtualCaret.show();
    };
    Object.defineProperty(InlineSuggestion2.prototype, "currentSuggestion", {
      get: function() {
        return this.latestSuggestionText;
      },
      enumerable: true,
      configurable: true
    });
    InlineSuggestion2.prototype.accept = function() {
      this.textArea.setSelectionRange(this.suggestionEndPos, this.suggestionEndPos);
      this.suggestionStartPos = null;
      this.suggestionEndPos = null;
      if (this.virtualCaret) {
        this.virtualCaret.hide();
      }
      this.textArea.removeAttribute("data-suggestion-visible");
      CaretPositionHelper.adjustScrollToCaretPosition(this.textArea);
    };
    InlineSuggestion2.prototype.reject = function() {
      if (!this.isShowing()) {
        return;
      }
      var selectionStart = this.textArea.selectionStart;
      var selectionEnd = this.textArea.selectionEnd;
      this.valueIncludingSuggestion = this.valueIncludingSuggestion.substring(0, this.suggestionStartPos) + this.valueIncludingSuggestion.substring(this.suggestionEndPos);
      if (this.suggestionStartPos === selectionStart && this.suggestionEndPos === selectionEnd) {
        this.textArea.setSelectionRange(selectionStart, selectionStart);
      }
      this.suggestionStartPos = null;
      this.suggestionEndPos = null;
      this.textArea.removeAttribute("data-suggestion-visible");
      if (this.virtualCaret) {
        this.virtualCaret.hide();
      }
    };
    return InlineSuggestion2;
  }()
);
var ContextSuggestion = (
  /** @class */
  function() {
    function ContextSuggestion2(container, textArea) {
      var _this = this;
      this.latestSuggestionText = "";
      this.showing = false;
      this.textArea = textArea;
      this.suggestionElement = document.createElement("div");
      this.suggestionElement.classList.add("smart-textarea-suggestion-overlay");
      this.suggestionElement.addEventListener("mousedown", function(event2) {
        return _this.handleSuggestionClicked(event2);
      });
      this.suggestionElement.addEventListener("touchend", function(event2) {
        return _this.handleSuggestionClicked(event2);
      });
      this.suggestionPrefixElement = document.createElement("span");
      this.suggestionTextElement = document.createElement("span");
      this.suggestionElement.appendChild(this.suggestionPrefixElement);
      this.suggestionElement.appendChild(this.suggestionTextElement);
      this.suggestionPrefixElement.style.opacity = "0.3";
      var computedStyle = window.getComputedStyle(this.textArea);
      this.suggestionElement.style.font = computedStyle.font;
      this.suggestionElement.style.marginTop = 1.4 * parseFloat(computedStyle.fontSize) + "px";
      container.appendChild(this.suggestionElement);
    }
    Object.defineProperty(ContextSuggestion2.prototype, "currentSuggestion", {
      get: function() {
        return this.latestSuggestionText;
      },
      enumerable: true,
      configurable: true
    });
    ContextSuggestion2.prototype.show = function(suggestionText) {
      this.latestSuggestionText = suggestionText;
      this.suggestionPrefixElement.textContent = suggestionText[0] !== " " ? this.getPrefixText(this.textArea, 20) : "";
      this.suggestionTextElement.textContent = suggestionText;
      var position = CaretPositionHelper.getTextAreaPosition(this.textArea);
      var style = this.suggestionElement.style;
      style.minWidth = null;
      this.suggestionElement.classList.add("smart-textarea-suggestion-overlay-visible");
      style.zIndex = this.textArea.style.zIndex + 1;
      style.top = position.top + "px";
      var leftPosition2 = position.left - this.suggestionPrefixElement.offsetWidth;
      if (!style.left || Math.abs(parseFloat(style.left) - leftPosition2) > 10) {
        style.left = leftPosition2 + "px";
      }
      this.showing = true;
      var computedStyle = window.getComputedStyle(this.suggestionElement);
      var lineHeight = parseFloat(computedStyle.lineHeight);
      var paddingTop = parseFloat(computedStyle.paddingTop);
      var paddingBottom = parseFloat(computedStyle.paddingBottom);
      var lines = Math.round((this.suggestionElement.offsetHeight - paddingTop - paddingBottom) / lineHeight);
      if (lines > 2) {
        var elementWidth = this.suggestionElement.offsetWidth;
        style.minWidth = "calc(min(70vw, " + lines * elementWidth / 2 + "px))";
      }
      var rect = this.suggestionElement.getBoundingClientRect();
      if (rect.right > document.body.clientWidth - 20) {
        style.left = "calc(" + (parseFloat(style.left) - (rect.right - document.body.clientWidth)) + "px - 2rem)";
      }
    };
    ContextSuggestion2.prototype.accept = function() {
      if (this.showing) {
        CaretPositionHelper.insertCharacter(this.textArea, this.currentSuggestion);
        CaretPositionHelper.adjustScrollToCaretPosition(this.textArea);
        this.hide();
      }
    };
    ContextSuggestion2.prototype.reject = function() {
      this.hide();
    };
    ContextSuggestion2.prototype.hide = function() {
      if (this.showing) {
        this.showing = false;
        this.suggestionElement.classList.remove("smart-textarea-suggestion-overlay-visible");
      }
    };
    ContextSuggestion2.prototype.isShowing = function() {
      return this.showing;
    };
    ContextSuggestion2.prototype.handleSuggestionClicked = function(event2) {
      event2.preventDefault();
      event2.stopImmediatePropagation();
      this.accept();
    };
    ContextSuggestion2.prototype.getPrefixText = function(textArea, maxLength) {
      var value = textArea.value;
      var selectionStart = textArea.selectionStart;
      for (var i = selectionStart - 1; i > selectionStart - maxLength; i--) {
        if (i < 0 || /\s/.test(value["" + i])) {
          return value.substring(i + 1, selectionStart);
        }
      }
      return "";
    };
    return ContextSuggestion2;
  }()
);
var VirtualCaret = (
  /** @class */
  function() {
    function VirtualCaret2(smartTextArea, textArea) {
      this.textArea = textArea;
      this.caretDiv = document.createElement("div");
      this.caretDiv.classList.add("smart-textarea-caret");
      smartTextArea.appendChild(this.caretDiv);
    }
    VirtualCaret2.prototype.show = function() {
      var textAreaPosition = CaretPositionHelper.getTextAreaPosition(this.textArea);
      var caretStyle = this.caretDiv.style;
      caretStyle.display = "block";
      caretStyle.top = textAreaPosition.top + "px";
      caretStyle.left = textAreaPosition.left + "px";
      caretStyle.height = textAreaPosition.height + "px";
      caretStyle.zIndex = this.textArea.style.zIndex;
      caretStyle.backgroundColor = textAreaPosition.elemStyle.caretColor;
    };
    VirtualCaret2.prototype.hide = function() {
      this.caretDiv.style.display = "none";
    };
    return VirtualCaret2;
  }()
);

// node_modules/@syncfusion/ej2-inputs/src/common/signature-base.js
var __extends26 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var SignatureBase = (
  /** @class */
  function(_super) {
    __extends26(SignatureBase2, _super);
    function SignatureBase2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.minDistance = 5;
      _this.previous = 0;
      _this.interval = 30;
      _this.timeout = null;
      _this.isSignatureEmpty = true;
      _this.backgroundLoaded = null;
      _this.isBlazor = false;
      _this.isResponsive = false;
      _this.signPointsColl = [];
      _this.signRatioPointsColl = [];
      _this.canRedraw = true;
      return _this;
    }
    SignatureBase2.prototype.initialize = function(element2, dotnetRef) {
      this.clearArray = [];
      this.element = element2;
      this.canvasContext = this.element.getContext("2d");
      this.canvasContext.canvas.tabIndex = -1;
      if (dotnetRef) {
        this.dotnetRef = dotnetRef;
        this.isBlazor = true;
        if (this.signatureValue) {
          this.loadPersistedSignature();
        }
      }
      this.setHTMLProperties();
      if (isNullOrUndefined(this.signatureValue)) {
        this.updateSnapCollection(true);
      }
      this.wireEvents();
      if (!this.isBlazor) {
        this.trigger("created", null);
      }
    };
    SignatureBase2.prototype.wireEvents = function() {
      if (isNullOrUndefined(this.pointColl) && !this.isReadOnly && !this.disabled) {
        EventHandler.add(this.canvasContext.canvas, "mousedown touchstart", this.mouseDownHandler, this);
        EventHandler.add(this.canvasContext.canvas, "keydown", this.keyboardHandler, this);
        window.addEventListener("resize", this.resizeHandler.bind(this));
      } else if (this.pointColl) {
        EventHandler.add(this.canvasContext.canvas, "mousemove touchmove", this.mouseMoveHandler, this);
        EventHandler.add(this.canvasContext.canvas, "mouseup touchend", this.mouseUpHandler, this);
        EventHandler.add(document, "mouseup", this.mouseUpHandler, this);
      }
    };
    SignatureBase2.prototype.unwireEvents = function(type) {
      if (type === "mouseup" || type === "touchend") {
        if (this.canvasContext) {
          EventHandler.remove(this.canvasContext.canvas, "mousemove touchmove", this.mouseMoveHandler);
          EventHandler.remove(this.canvasContext.canvas, "mouseup touchend", this.mouseUpHandler);
        }
        EventHandler.remove(document, "mouseup", this.mouseUpHandler);
      } else {
        if (this.canvasContext) {
          EventHandler.remove(this.canvasContext.canvas, "mousedown touchstart", this.mouseDownHandler);
          EventHandler.remove(this.canvasContext.canvas, "keydown", this.keyboardHandler);
        }
        window.removeEventListener("resize", this.resizeHandler);
      }
    };
    SignatureBase2.prototype.setHTMLProperties = function() {
      if (this.element.height === 150 && this.element.width === 300 && this.element.offsetHeight !== 0 && this.element.offsetWidth !== 0) {
        this.element.height = this.element.offsetHeight;
        this.element.width = this.element.offsetWidth;
        this.isResponsive = true;
      } else if ((this.element.height !== this.element.offsetHeight - 1 || this.element.width !== this.element.offsetWidth - 1) && this.element.offsetHeight !== 0 && this.element.offsetWidth !== 0) {
        this.element.height = this.element.offsetHeight;
        this.element.width = this.element.offsetWidth;
      }
      this.canvasContext.fillStyle = this.strokeColor;
      this.tempCanvas = this.createElement("canvas", {
        className: "e-" + this.getModuleName() + "-temp"
      });
      this.tempContext = this.tempCanvas.getContext("2d");
      this.tempCanvas.width = this.element.width;
      this.tempCanvas.height = this.element.height;
      if (this.backgroundImage) {
        this.canvasContext.canvas.style.backgroundImage = "url(" + this.backgroundImage + ")";
        this.canvasContext.canvas.style.backgroundRepeat = "no-repeat";
        if (this.saveWithBackground) {
          this.setBackgroundImage(this.backgroundImage, "temp");
        }
      } else if (this.backgroundColor) {
        this.canvasContext.canvas.style.backgroundColor = this.backgroundColor;
      }
    };
    SignatureBase2.prototype.mouseDownHandler = function(e) {
      if (e.buttons === 1 || e.buttons === 2 || e.type === "touchstart") {
        if (e.type === "touchstart") {
          e.preventDefault();
          e.stopPropagation();
        }
        this.beginStroke(e);
        this.wireEvents();
      }
    };
    SignatureBase2.prototype.mouseMoveHandler = function(e) {
      if (e.buttons === 1 || e.buttons === 2 || e.type === "touchmove") {
        if (e.type === "touchmove") {
          e.preventDefault();
          e.stopPropagation();
        }
        if (this.interval) {
          this.updateStrokeWithThrottle(e);
        } else {
          this.updateStroke(e);
        }
      }
    };
    SignatureBase2.prototype.mouseUpHandler = function(e) {
      var args = {
        actionName: "strokeUpdate"
      };
      if (e.type === "touchstart") {
        e.preventDefault();
        e.stopPropagation();
      }
      this.endDraw();
      this.updateSnapCollection();
      this.unwireEvents(e.type);
      if (!this.isBlazor) {
        this.trigger("change", args);
      } else {
        this.dotnetRef.invokeMethodAsync("TriggerEventAsync", "mouseUp");
      }
      this.signatureValue = this.snapColl[this.incStep];
      for (var i = 0; i < this.signPointsColl.length; i++) {
        this.signRatioPointsColl.push({
          x: this.signPointsColl[i].x / this.canvasContext.canvas.width,
          y: this.signPointsColl[i].y / this.canvasContext.canvas.height
        });
      }
      this.signPointsColl = [];
    };
    SignatureBase2.prototype.keyboardHandler = function(e) {
      var _this = this;
      var args = {
        fileName: "Signature",
        type: "Png",
        cancel: false
      };
      switch (e.key) {
        case "Delete":
          this.clear();
          break;
        case (e.ctrlKey && "s"):
          if (!this.isBlazor) {
            this.trigger("beforeSave", args, function(observableSaveArgs) {
              if (!args.cancel) {
                _this.save(observableSaveArgs.type, observableSaveArgs.fileName);
              }
            });
          } else {
            this.dotnetRef.invokeMethodAsync("TriggerEventAsync", "beforeSave");
          }
          e.preventDefault();
          e.stopImmediatePropagation();
          break;
        case (e.ctrlKey && "z"):
          this.undo();
          break;
        case (e.ctrlKey && "y"):
          this.redo();
          break;
      }
    };
    SignatureBase2.prototype.resizeHandler = function() {
      var proxy = this;
      if (this.isResponsive && this.canRedraw && this.canvasContext && this.element) {
        this.canvasContext.canvas.width = this.element.offsetWidth;
        this.canvasContext.canvas.height = this.element.offsetHeight;
        this.canvasContext.scale(1, 1);
        this.canvasContext.fillStyle = this.strokeColor;
        var pointSize = (this.minStrokeWidth + this.maxStrokeWidth) / 2;
        for (var i = 0; i < this.signRatioPointsColl.length; i++) {
          this.arcDraw(this.signRatioPointsColl[i].x * this.canvasContext.canvas.width, this.signRatioPointsColl[i].y * this.canvasContext.canvas.height, pointSize);
        }
        this.signPointsColl = [];
        this.canvasContext.closePath();
        this.canvasContext.fill();
      } else if (this.canvasContext && this.element) {
        var restoreImg_1 = new Image();
        restoreImg_1.src = this.snapColl[this.incStep];
        restoreImg_1.onload = function() {
          proxy.canvasContext.clearRect(0, 0, proxy.element.width, proxy.element.height);
          proxy.canvasContext.drawImage(restoreImg_1, 0, 0, proxy.element.width, proxy.element.height);
        };
      }
    };
    SignatureBase2.prototype.beginStroke = function(e) {
      this.internalRefresh();
      this.updateStroke(e);
    };
    SignatureBase2.prototype.updateStroke = function(e) {
      var point = this.createPoint(e);
      this.addPoint(point);
    };
    SignatureBase2.prototype.updateStrokeWithThrottle = function(args) {
      var now = Date.now();
      var remaining = this.interval - (now - this.previous);
      this.storedArgs = args;
      if (remaining <= 0 || remaining > this.interval) {
        if (this.timeout) {
          clearTimeout(this.timeout);
          this.timeout = null;
        }
        this.previous = now;
        this.updateStroke(this.storedArgs);
        if (!this.timeout) {
          this.storedArgs = null;
        }
      } else if (!this.timeout) {
        this.timeout = window.setTimeout(this.delay.bind(this), remaining);
      }
    };
    SignatureBase2.prototype.delay = function() {
      this.previous = Date.now();
      this.timeout = null;
      this.updateStroke(this.storedArgs);
      if (!this.timeout) {
        this.storedArgs = null;
      }
    };
    SignatureBase2.prototype.createPoint = function(e) {
      var rect = this.canvasContext.canvas.getBoundingClientRect();
      if (e.type === "mousedown" || e.type === "mousemove") {
        return this.point(e.clientX - rect.left, e.clientY - rect.top, (/* @__PURE__ */ new Date()).getTime());
      } else {
        return this.point(e.touches[0].clientX - rect.left, e.touches[0].clientY - rect.top, (/* @__PURE__ */ new Date()).getTime());
      }
    };
    SignatureBase2.prototype.point = function(pointX, pointY, time) {
      this.pointX = pointX;
      this.pointY = pointY;
      this.time = time || (/* @__PURE__ */ new Date()).getTime();
      return {
        x: this.pointX,
        y: this.pointY,
        time: this.time
      };
    };
    SignatureBase2.prototype.addPoint = function(point) {
      var points = this.pointColl;
      var controlPoint1;
      var controlPoint2;
      var lastPoint = points.length > 0 && points[points.length - 1];
      var isLastPointTooClose = lastPoint ? this.distanceTo(lastPoint) <= this.minDistance : false;
      if (!lastPoint || !(lastPoint && isLastPointTooClose)) {
        points.push(point);
        if (points.length > 2) {
          if (points.length === 3) {
            points.unshift(points[0]);
          }
          controlPoint1 = this.calculateCurveControlPoints(points[0], points[1], points[2]).controlPoint2;
          controlPoint2 = this.calculateCurveControlPoints(points[1], points[2], points[3]).controlPoint1;
          this.startPoint = points[1];
          this.controlPoint1 = controlPoint1;
          this.controlPoint2 = controlPoint2;
          this.endPoint = points[2];
          this.startDraw();
          points.shift();
        }
      }
    };
    SignatureBase2.prototype.startDraw = function() {
      var velocity;
      velocity = this.pointVelocityCalc(this.startPoint);
      velocity = this.velocity * velocity + (1 - this.velocity) * this.lastVelocity;
      var newWidth = Math.max(this.maxStrokeWidth / (velocity + 1), this.minStrokeWidth);
      this.curveDraw(this.lastWidth, newWidth);
      this.lastVelocity = velocity;
      this.lastWidth = newWidth;
    };
    SignatureBase2.prototype.endDraw = function() {
      if (isNullOrUndefined(this.pointColl)) {
        return;
      }
      var canDrawCurve = this.pointColl.length > 2;
      var point = this.pointColl[0];
      if (!canDrawCurve && point) {
        this.strokeDraw(point);
      }
    };
    SignatureBase2.prototype.curveDraw = function(startWidth, endWidth) {
      var context = this.canvasContext;
      var width;
      var i;
      var t1;
      var t2;
      var t3;
      var u1;
      var u2;
      var u3;
      var x;
      var y;
      var widthValue = endWidth - startWidth;
      var bezierLength = this.bezierLengthCalc();
      var drawSteps = Math.ceil(bezierLength) * 2;
      context.beginPath();
      for (i = 0; i < drawSteps; i++) {
        t1 = i / drawSteps;
        t2 = t1 * t1;
        t3 = t2 * t1;
        u1 = 1 - t1;
        u2 = u1 * u1;
        u3 = u2 * u1;
        x = u3 * this.startPoint.x;
        x += 3 * u2 * t1 * this.controlPoint1.x;
        x += 3 * u1 * t2 * this.controlPoint2.x;
        x += t3 * this.endPoint.x;
        y = u3 * this.startPoint.y;
        y += 3 * u2 * t1 * this.controlPoint1.y;
        y += 3 * u1 * t2 * this.controlPoint2.y;
        y += t3 * this.endPoint.y;
        width = Math.min(startWidth + t3 * widthValue, this.maxStrokeWidth);
        this.arcDraw(x, y, width);
      }
      context.closePath();
      context.fill();
      this.isSignatureEmpty = false;
    };
    SignatureBase2.prototype.strokeDraw = function(point) {
      var context = this.canvasContext;
      var pointSize = (this.minStrokeWidth + this.maxStrokeWidth) / 2;
      context.beginPath();
      this.arcDraw(point.x, point.y, pointSize);
      context.closePath();
      context.fill();
      this.isSignatureEmpty = false;
    };
    SignatureBase2.prototype.arcDraw = function(x, y, size) {
      this.signPointsColl.push({
        x,
        y
      });
      var context = this.canvasContext;
      context.moveTo(x, y);
      context.arc(x, y, size, 0, 2 * Math.PI, false);
    };
    SignatureBase2.prototype.calculateCurveControlPoints = function(p1, p2, p3) {
      var dx1 = p1.x - p2.x;
      var dy1 = p1.y - p2.y;
      var dx2 = p2.x - p3.x;
      var dy2 = p2.y - p3.y;
      var m1 = {
        x: (p1.x + p2.x) / 2,
        y: (p1.y + p2.y) / 2
      };
      var m2 = {
        x: (p2.x + p3.x) / 2,
        y: (p2.y + p3.y) / 2
      };
      var l1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);
      var l2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);
      var dxm = m1.x - m2.x;
      var dym = m1.y - m2.y;
      var k = l2 / (l1 + l2);
      var cm = {
        x: m2.x + dxm * k,
        y: m2.y + dym * k
      };
      var tx = p2.x - cm.x;
      var ty = p2.y - cm.y;
      return {
        controlPoint1: this.point(m1.x + tx, m1.y + ty, 0),
        controlPoint2: this.point(m2.x + tx, m2.y + ty, 0)
      };
    };
    SignatureBase2.prototype.bezierLengthCalc = function() {
      var steps = 10;
      var length = 0;
      var i;
      var t;
      var pointx1;
      var pointy1;
      var pointx2;
      var pointy2;
      var pointx3;
      var pointy3;
      for (i = 0; i <= steps; i++) {
        t = i / steps;
        pointx1 = this.bezierPointCalc(t, this.startPoint.x, this.controlPoint1.x, this.controlPoint2.x, this.endPoint.x);
        pointy1 = this.bezierPointCalc(t, this.startPoint.y, this.controlPoint1.y, this.controlPoint2.y, this.endPoint.y);
        if (i > 0) {
          pointx3 = pointx1 - pointx2;
          pointy3 = pointy1 - pointy2;
          length += Math.sqrt(pointx3 * pointx3 + pointy3 * pointy3);
        }
        pointx2 = pointx1;
        pointy2 = pointy1;
      }
      return length;
    };
    SignatureBase2.prototype.bezierPointCalc = function(t, startpoint, cp1, cp2, endpoint) {
      return startpoint * (1 - t) * (1 - t) * (1 - t) + 3 * cp1 * (1 - t) * (1 - t) * t + 3 * cp2 * (1 - t) * t * t + endpoint * t * t * t;
    };
    SignatureBase2.prototype.pointVelocityCalc = function(startPoint) {
      return this.time !== startPoint.time ? this.distanceTo(startPoint) / (this.time - startPoint.time) : 0;
    };
    SignatureBase2.prototype.distanceTo = function(start) {
      return Math.sqrt(Math.pow(this.pointX - start.x, 2) + Math.pow(this.pointY - start.y, 2));
    };
    SignatureBase2.prototype.isRead = function(isRead) {
      if (isRead) {
        EventHandler.remove(this.canvasContext.canvas, "mousedown touchstart", this.mouseDownHandler);
      } else if (!this.disabled) {
        EventHandler.add(this.canvasContext.canvas, "mousedown touchstart", this.mouseDownHandler, this);
      }
    };
    SignatureBase2.prototype.enableOrDisable = function(isDisable) {
      this.disabled = isDisable;
      if (isDisable) {
        this.canvasContext.canvas.style.filter = "opacity(0.5)";
        this.isRead(true);
      } else {
        this.canvasContext.canvas.style.filter = "";
        this.isRead(false);
      }
    };
    SignatureBase2.prototype.updateSnapCollection = function(isClear) {
      if (isNullOrUndefined(this.incStep)) {
        this.incStep = -1;
        this.incStep++;
        this.snapColl = [];
        this.clearArray = [];
      } else {
        this.incStep++;
      }
      if (this.incStep < this.snapColl.length) {
        this.snapColl.length = this.incStep;
      }
      if (this.incStep > 0) {
        var canvasNew = this.createElement("canvas", {
          className: "e-" + this.getModuleName() + "-wrapper"
        });
        var canvasContextNew = canvasNew.getContext("2d");
        if (this.canvasContext) {
          canvasNew.width = this.canvasContext.canvas.width;
          canvasNew.height = this.canvasContext.canvas.height;
          canvasContextNew.drawImage(this.canvasContext.canvas, 0, 0, canvasNew.width, canvasNew.height);
          this.snapColl.push(canvasNew.toDataURL());
        }
      } else {
        this.snapColl.push(this.canvasContext.canvas.toDataURL());
      }
      if (isClear) {
        this.clearArray.push(this.incStep);
      }
    };
    SignatureBase2.prototype.setBackgroundImage = function(imageSrc, type) {
      var proxy = this;
      var imageObj = new Image();
      imageObj.crossOrigin = "anonymous";
      imageObj.src = imageSrc;
      if (type === "temp") {
        imageObj.onload = function() {
          proxy.tempContext.globalCompositeOperation = "source-over";
          proxy.tempContext.drawImage(imageObj, 0, 0, proxy.element.width, proxy.element.height);
        };
      } else {
        imageObj.onload = function() {
          proxy.canvasContext.globalCompositeOperation = "source-over";
          proxy.canvasContext.drawImage(imageObj, 0, 0, proxy.element.width, proxy.element.height);
          proxy.updateSnapCollection();
          proxy.saveBackground(true);
        };
        this.canvasContext.clearRect(0, 0, this.canvasContext.canvas.width, this.canvasContext.canvas.height);
      }
    };
    SignatureBase2.prototype.setBackgroundColor = function(color) {
      var canvasEle = this.canvasContext;
      canvasEle.strokeStyle = color;
      var i;
      var j;
      for (i = 1; i <= canvasEle.canvas.width; i++) {
        for (j = 1; j <= canvasEle.canvas.height; j++) {
          canvasEle.strokeRect(0, 0, i, j);
        }
      }
      this.updateSnapCollection();
    };
    SignatureBase2.prototype.loadPersistedSignature = function() {
      if (isNullOrUndefined(this.signatureValue)) {
        return;
      }
      var proxy = this;
      var lastImage = new Image();
      lastImage.src = this.signatureValue;
      lastImage.onload = function() {
        proxy.canvasContext.clearRect(0, 0, proxy.element.width, proxy.element.height);
        proxy.canvasContext.drawImage(lastImage, 0, 0);
        proxy.updateSnapCollection();
      };
      this.isSignatureEmpty = false;
    };
    SignatureBase2.prototype.getBlob = function(url) {
      var arr = url.split(",");
      var type = arr[0].match(/:(.*?);/)[1];
      var bstr = atob(arr[1]);
      var n = bstr.length;
      var u8arr = new Uint8Array(n);
      while (n--) {
        u8arr[n] = bstr.charCodeAt(n);
      }
      return new Blob([u8arr], {
        type
      });
    };
    SignatureBase2.prototype.download = function(blob, fileName) {
      var blobUrl = URL.createObjectURL(blob);
      var a = document.createElement("a");
      a.href = blobUrl;
      a.target = "_parent";
      a.download = fileName;
      (document.body || document.documentElement).appendChild(a);
      a.click();
      a.parentNode.removeChild(a);
    };
    SignatureBase2.prototype.internalRefresh = function() {
      this.pointColl = [];
      this.lastVelocity = 0;
      this.lastWidth = (this.minStrokeWidth + this.maxStrokeWidth) / 2;
    };
    SignatureBase2.prototype.refresh = function() {
      this.isResponsive = false;
      this.setHTMLProperties();
      this.resizeHandler();
      this.internalRefresh();
    };
    SignatureBase2.prototype.clear = function() {
      var args = {
        actionName: "clear"
      };
      this.canvasContext.clearRect(0, 0, this.canvasContext.canvas.width, this.canvasContext.canvas.height);
      this.tempContext.clearRect(0, 0, this.tempContext.canvas.width, this.tempContext.canvas.height);
      if (this.saveWithBackground && this.backgroundImage) {
        this.setBackgroundImage(this.backgroundImage, "temp");
      }
      this.internalRefresh();
      this.signRatioPointsColl = [];
      this.updateSnapCollection(true);
      this.isSignatureEmpty = this.canRedraw = true;
      if (!this.isBlazor) {
        this.trigger("change", args);
      } else {
        this.dotnetRef.invokeMethodAsync("TriggerEventAsync", "Clear");
      }
    };
    SignatureBase2.prototype.undo = function() {
      var args = {
        actionName: "undo"
      };
      var proxy = this;
      if (this.incStep > 0) {
        this.incStep--;
        var undoImg_1 = new Image();
        undoImg_1.src = this.snapColl[this.incStep];
        undoImg_1.onload = function() {
          proxy.canvasContext.clearRect(0, 0, proxy.element.width, proxy.element.height);
          proxy.canvasContext.drawImage(undoImg_1, 0, 0, proxy.element.width, proxy.element.height);
        };
      }
      this.isClear();
      if (!this.isBlazor) {
        this.trigger("change", args);
      } else {
        this.dotnetRef.invokeMethodAsync("TriggerEventAsync", "Undo");
      }
    };
    SignatureBase2.prototype.redo = function() {
      var args = {
        actionName: "redo"
      };
      var proxy = this;
      if (this.incStep < this.snapColl.length - 1) {
        this.incStep++;
        var redoImg_1 = new Image();
        redoImg_1.src = this.snapColl[this.incStep];
        redoImg_1.onload = function() {
          proxy.canvasContext.clearRect(0, 0, proxy.element.width, proxy.element.height);
          proxy.canvasContext.drawImage(redoImg_1, 0, 0, proxy.element.width, proxy.element.height);
        };
      }
      this.isClear();
      if (!this.isBlazor) {
        this.trigger("change", args);
      } else {
        this.dotnetRef.invokeMethodAsync("TriggerEventAsync", "Redo");
      }
    };
    SignatureBase2.prototype.isClear = function() {
      if (this.clearArray) {
        var empty = false;
        for (var i = 0; i < this.clearArray.length; i++) {
          if (this.clearArray[i] === this.incStep) {
            this.isSignatureEmpty = true;
            empty = true;
          }
        }
        if (!empty) {
          this.isSignatureEmpty = false;
        }
      }
    };
    SignatureBase2.prototype.isEmpty = function() {
      return this.isSignatureEmpty;
    };
    SignatureBase2.prototype.canUndo = function() {
      return this.incStep > 0;
    };
    SignatureBase2.prototype.canRedo = function() {
      return this.incStep < this.snapColl.length - 1;
    };
    SignatureBase2.prototype.draw = function(text, fontFamily, fontSize, x, y) {
      var args = {
        actionName: "draw-text"
      };
      this.canvasContext.clearRect(0, 0, this.canvasContext.canvas.width, this.canvasContext.canvas.height);
      fontFamily = fontFamily || "Arial";
      fontSize = fontSize || 30;
      this.canvasContext.font = fontSize + "px " + fontFamily;
      var startX = this.element.width / 2;
      var startY = this.element.height / 2;
      if (isNullOrUndefined(x) && isNullOrUndefined(y)) {
        this.canvasContext.textAlign = "center";
        this.canvasContext.textBaseline = "middle";
      } else {
        startX = isNullOrUndefined(x) ? startX : x;
        startY = isNullOrUndefined(y) ? startY + fontSize / 2 : y + fontSize / 2;
      }
      this.canvasContext.fillText(text, startX, startY);
      this.updateSnapCollection();
      this.isSignatureEmpty = false;
      this.trigger("change", args);
    };
    SignatureBase2.prototype.load = function(signature, width, height) {
      height = height || this.element.height;
      width = width || this.element.width;
      this.canvasContext.clearRect(0, 0, this.canvasContext.canvas.width, this.canvasContext.canvas.height);
      var proxy = this;
      var bitmapImage = new Image();
      bitmapImage.src = signature;
      if (signature.slice(0, 4) !== "data") {
        bitmapImage.crossOrigin = "anonymous";
      }
      bitmapImage.onload = function() {
        Promise.all([createImageBitmap(bitmapImage, 0, 0, width, height)]).then(function(results) {
          var tempCanvas = document.createElement("canvas");
          tempCanvas.width = width;
          tempCanvas.height = height;
          tempCanvas.getContext("2d").drawImage(results[0], 0, 0);
          if (signature.slice(0, 4) !== "data") {
            proxy.canvasContext.globalCompositeOperation = "source-over";
          }
          proxy.canvasContext.drawImage(tempCanvas, 0, 0, width, height, 0, 0, proxy.element.width, proxy.element.height);
          proxy.updateSnapCollection();
        });
      };
      this.isSignatureEmpty = this.canRedraw = false;
    };
    SignatureBase2.prototype.saveBackground = function(savebg) {
      var imageSrc;
      if (savebg && this.backgroundImage) {
        imageSrc = this.snapColl[this.incStep - 1];
      } else {
        imageSrc = this.snapColl[this.incStep];
      }
      if (!savebg) {
        this.canvasContext.clearRect(0, 0, this.canvasContext.canvas.width, this.canvasContext.canvas.height);
        if (this.backgroundImage) {
          this.setBackgroundImage(this.backgroundImage);
        } else if (this.backgroundColor) {
          this.setBackgroundColor(this.backgroundColor);
          savebg = true;
        }
      }
      if (savebg) {
        var proxy_1 = this;
        var imageObj_1 = new Image();
        imageObj_1.crossOrigin = "anonymous";
        imageObj_1.src = imageSrc;
        imageObj_1.onload = function() {
          proxy_1.backgroundLoaded = true;
          proxy_1.canvasContext.globalCompositeOperation = "source-over";
          proxy_1.canvasContext.drawImage(imageObj_1, 0, 0, proxy_1.element.width, proxy_1.element.height);
          proxy_1.save(proxy_1.fileType, proxy_1.fileName);
        };
      }
    };
    SignatureBase2.prototype.save = function(type, fileName) {
      if (this.saveWithBackground && this.backgroundLoaded == null && (this.backgroundImage || this.backgroundColor)) {
        this.backgroundLoaded = false;
        this.fileType = type;
        this.fileName = fileName;
        this.saveBackground(false);
      } else if (type === "Svg") {
        fileName = fileName || "Signature";
        this.toSVG(fileName);
      } else if (type === "Jpeg") {
        fileName = fileName || "Signature";
        if (!this.saveWithBackground || this.saveWithBackground && !(this.backgroundImage || this.backgroundColor)) {
          this.toJPEG(fileName);
        } else {
          var dataURL = this.canvasContext.canvas.toDataURL("image/jpeg");
          this.download(this.getBlob(dataURL), fileName + ".jpeg");
        }
      } else {
        fileName = fileName || "Signature";
        var dataURL = this.canvasContext.canvas.toDataURL("image/png");
        this.download(this.getBlob(dataURL), fileName + ".png");
      }
      if (this.saveWithBackground && this.backgroundLoaded) {
        this.resetSnap();
      }
    };
    SignatureBase2.prototype.resetSnap = function() {
      this.canvasContext.clearRect(0, 0, this.canvasContext.canvas.width, this.canvasContext.canvas.height);
      var proxy = this;
      var restoreObj = new Image();
      restoreObj.src = this.snapColl[this.incStep - 1];
      restoreObj.onload = function() {
        proxy.canvasContext.drawImage(restoreObj, 0, 0, proxy.element.width, proxy.element.height);
        proxy.updateSnapCollection();
      };
      this.backgroundLoaded = null;
      this.snapColl.pop();
      this.incStep--;
      this.snapColl.pop();
      this.incStep--;
    };
    SignatureBase2.prototype.toJPEG = function(fileName) {
      var _this = this;
      var imageSrc = this.snapColl[this.incStep];
      this.setBackgroundColor("#ffffff");
      var proxy = this;
      var imageObj = new Image();
      imageObj.crossOrigin = "anonymous";
      imageObj.src = imageSrc;
      imageObj.onload = function() {
        proxy.canvasContext.globalCompositeOperation = "source-over";
        proxy.canvasContext.drawImage(imageObj, 0, 0, proxy.element.width, proxy.element.height);
        var dataURL = proxy.canvasContext.canvas.toDataURL("image/jpeg");
        proxy.download(proxy.getBlob(dataURL), fileName + ".jpeg");
        proxy.canvasContext.clearRect(0, 0, proxy.canvasContext.canvas.width, proxy.canvasContext.canvas.height);
        _this.resizeHandler();
      };
      this.snapColl.pop();
      this.incStep--;
    };
    SignatureBase2.prototype.toSVG = function(fileName, dataUrl) {
      var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
      svg.setAttribute("width", this.canvasContext.canvas.width.toString());
      svg.setAttribute("height", this.canvasContext.canvas.height.toString());
      var XLinkNS = "http://www.w3.org/1999/xlink";
      var img = document.createElementNS("http://www.w3.org/2000/svg", "image");
      img.setAttributeNS(null, "height", this.canvasContext.canvas.height.toString());
      img.setAttributeNS(null, "width", this.canvasContext.canvas.width.toString());
      img.setAttributeNS(XLinkNS, "xlink:href", dataUrl);
      svg.appendChild(img);
      var prefix = "data:image/svg+xml;base64,";
      var header = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"' + (' width="' + this.canvasContext.canvas.width + '"') + (' height="' + this.canvasContext.canvas.height + '"') + ">";
      var footer = "</svg>";
      var body = svg.innerHTML;
      var data = header + body + footer;
      var svgDataUrl = prefix + btoa(data);
      if (fileName == null) {
        return svgDataUrl;
      } else {
        this.download(this.getBlob(svgDataUrl), fileName + ".svg");
        return null;
      }
    };
    SignatureBase2.prototype.saveAsBlob = function() {
      return this.getBlob(this.canvasContext.canvas.toDataURL("image/png"));
    };
    SignatureBase2.prototype.getSignature = function(type) {
      if (this.saveWithBackground && this.backgroundColor && !this.backgroundImage) {
        this.tempContext.fillStyle = this.backgroundColor;
        this.tempContext.fillRect(0, 0, this.canvasContext.canvas.width, this.canvasContext.canvas.height);
      } else if (!this.backgroundColor && !this.backgroundImage && type === "Jpeg") {
        this.tempContext.fillStyle = "#fff";
        this.tempContext.fillRect(0, 0, this.canvasContext.canvas.width, this.canvasContext.canvas.height);
      }
      this.tempContext.drawImage(this.element, 0, 0);
      if (type === "Jpeg") {
        return this.tempCanvas.toDataURL("image/jpeg");
      } else if (type === "Svg") {
        return this.toSVG(null, this.tempCanvas.toDataURL("image/png"));
      } else {
        return this.tempCanvas.toDataURL("image/png");
      }
    };
    SignatureBase2.prototype.getModuleName = function() {
      return "signature";
    };
    SignatureBase2.prototype.getPersistData = function() {
      this.signatureValue = this.snapColl[this.incStep];
      return this.addOnPersist(["signatureValue"]);
    };
    SignatureBase2.prototype.destroy = function() {
      if (this.getModuleName() !== "image-editor") {
        this.unwireEvents(null);
        removeClass([this.element], "e-" + this.getModuleName());
        this.element.removeAttribute("tabindex");
        this.pointColl = null;
        this.tempContext = null;
        this.tempCanvas = null;
        this.canvasContext = null;
      }
      _super.prototype.destroy.call(this);
      this.element = null;
    };
    SignatureBase2.prototype.propertyChanged = function(key, value) {
      var canvasNew = this.canvasContext;
      switch (key) {
        case "backgroundColor":
          canvasNew.canvas.style.backgroundColor = value;
          this.backgroundColor = value;
          break;
        case "backgroundImage":
          canvasNew.canvas.style.backgroundImage = "url(" + value + ")";
          this.backgroundImage = value;
          if (this.saveWithBackground) {
            this.setBackgroundImage(this.backgroundImage, "temp");
          }
          break;
        case "strokeColor":
          canvasNew.fillStyle = value;
          this.strokeColor = value;
          break;
        case "saveWithBackground":
          this.saveWithBackground = value;
          break;
        case "maxStrokeWidth":
          this.maxStrokeWidth = value;
          break;
        case "minStrokeWidth":
          this.minStrokeWidth = value;
          break;
        case "velocity":
          this.velocity = value;
          break;
        case "isReadOnly":
          this.isRead(value);
          break;
        case "disabled":
          this.enableOrDisable(value);
          break;
      }
    };
    return SignatureBase2;
  }(Component)
);

// node_modules/@syncfusion/ej2-inputs/src/signature/signature.js
var __extends27 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate25 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Signature = (
  /** @class */
  function(_super) {
    __extends27(Signature2, _super);
    function Signature2(options, element2) {
      return _super.call(this, options, element2) || this;
    }
    Signature2.prototype.preRender = function() {
    };
    Signature2.prototype.render = function() {
      this.initialize();
    };
    Signature2.prototype.initialize = function() {
      this.element.setAttribute("role", "img");
      this.element.setAttribute("aria-label", "signature");
      addClass([this.element], "e-" + this.getModuleName());
      _super.prototype.initialize.call(this, this.element);
      if (this.enablePersistence) {
        this.loadPersistedSignature();
      }
    };
    Signature2.prototype.getModuleName = function() {
      return _super.prototype.getModuleName.call(this);
    };
    Signature2.prototype.getPersistData = function() {
      return _super.prototype.getPersistData.call(this);
    };
    Signature2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "backgroundColor":
            _super.prototype.propertyChanged.call(this, prop, newProp.backgroundColor);
            break;
          case "backgroundImage":
            _super.prototype.propertyChanged.call(this, prop, newProp.backgroundImage);
            break;
          case "strokeColor":
            if (newProp.strokeColor !== oldProp.strokeColor) {
              _super.prototype.propertyChanged.call(this, prop, newProp.strokeColor);
            }
            break;
          case "maxStrokeWidth":
            if (newProp.maxStrokeWidth !== oldProp.maxStrokeWidth) {
              _super.prototype.propertyChanged.call(this, prop, newProp.maxStrokeWidth);
            }
            break;
          case "minStrokeWidth":
            if (newProp.minStrokeWidth !== oldProp.minStrokeWidth) {
              _super.prototype.propertyChanged.call(this, prop, newProp.minStrokeWidth);
            }
            break;
          case "velocity":
            if (newProp.velocity !== oldProp.velocity) {
              _super.prototype.propertyChanged.call(this, prop, newProp.velocity);
            }
            break;
          case "saveWithBackground":
            _super.prototype.propertyChanged.call(this, prop, newProp.saveWithBackground);
            break;
          case "isReadOnly":
            _super.prototype.propertyChanged.call(this, prop, newProp.isReadOnly);
            break;
          case "disabled":
            _super.prototype.propertyChanged.call(this, prop, newProp.disabled);
            break;
        }
      }
    };
    __decorate25([Property("")], Signature2.prototype, "backgroundColor", void 0);
    __decorate25([Property("")], Signature2.prototype, "backgroundImage", void 0);
    __decorate25([Property(false)], Signature2.prototype, "disabled", void 0);
    __decorate25([Property(false)], Signature2.prototype, "isReadOnly", void 0);
    __decorate25([Property(true)], Signature2.prototype, "saveWithBackground", void 0);
    __decorate25([Property("#000000")], Signature2.prototype, "strokeColor", void 0);
    __decorate25([Property(0.5)], Signature2.prototype, "minStrokeWidth", void 0);
    __decorate25([Property(2)], Signature2.prototype, "maxStrokeWidth", void 0);
    __decorate25([Property(0.7)], Signature2.prototype, "velocity", void 0);
    __decorate25([Property("en-US")], Signature2.prototype, "locale", void 0);
    __decorate25([Property(false)], Signature2.prototype, "enableRtl", void 0);
    __decorate25([Property(false)], Signature2.prototype, "enablePersistence", void 0);
    __decorate25([Event()], Signature2.prototype, "beforeSave", void 0);
    __decorate25([Event()], Signature2.prototype, "change", void 0);
    __decorate25([Event()], Signature2.prototype, "created", void 0);
    Signature2 = __decorate25([NotifyPropertyChanges], Signature2);
    return Signature2;
  }(SignatureBase)
);

// node_modules/@syncfusion/ej2-inputs/src/rating/rating.js
var __extends28 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate26 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ICONCSS = "e-rating-icon e-icons e-star-filled";
var ITEMLIST = "e-rating-item-list";
var ITEMCONTAINER = "e-rating-item-container";
var SELECTED = "e-rating-selected";
var INTERMEDIATE = "e-rating-intermediate";
var LABEL3 = "e-rating-label";
var RESET = "e-icons e-reset";
var HIDDEN = "e-rating-hidden";
var DISABLED6 = "e-disabled";
var READONLY = "e-rating-readonly";
var RTL9 = "e-rtl";
var ANIMATION = "e-rating-animation";
var FULLTEMPLATE = "e-rating-full";
var EMPTYTEMPLATE = "e-rating-empty";
var SELECTEDVALUE = "e-selected-value";
var RATINGVALUE = "--rating-value";
var LabelPosition;
(function(LabelPosition2) {
  LabelPosition2["Top"] = "Top";
  LabelPosition2["Bottom"] = "Bottom";
  LabelPosition2["Left"] = "Left";
  LabelPosition2["Right"] = "Right";
})(LabelPosition || (LabelPosition = {}));
var PrecisionType;
(function(PrecisionType2) {
  PrecisionType2["Full"] = "Full";
  PrecisionType2["Half"] = "Half";
  PrecisionType2["Quarter"] = "Quarter";
  PrecisionType2["Exact"] = "Exact";
})(PrecisionType || (PrecisionType = {}));
var Rating = (
  /** @class */
  function(_super) {
    __extends28(Rating2, _super);
    function Rating2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.itemElements = [];
      return _this;
    }
    Rating2.prototype.preRender = function() {
      if (!this.element.id) {
        this.element.id = getUniqueID("e-" + this.getModuleName());
      }
      this.keyConfigs = {
        downarrow: "downarrow",
        leftarrow: "leftarrow",
        rightarrow: "rightarrow",
        uparrow: "uparrow",
        space: "space"
      };
      this.tooltipOpen = false;
      this.isTouchSelected = false;
      if (closest(this.element, "form") && this.element.getAttribute("value")) {
        this.setProperties({
          value: this.element.getAttribute("value")
        }, true);
      }
    };
    Rating2.prototype.render = function() {
      this.initialize();
      this.updateMinValue();
      this.updateTemplateFunction();
      this.triggerChange(null, this.value, false, true);
      this.renderItems();
      this.displayLabel();
    };
    Rating2.prototype.initialize = function() {
      this.wrapper = this.createElement("div", {
        className: "e-" + this.getModuleName() + "-container "
      });
      this.element.parentNode.insertBefore(this.wrapper, this.element);
      this.wrapper.appendChild(this.element);
      if (this.element.getAttribute("name") == null) {
        this.element.setAttribute("name", this.element.id);
      }
      attributes(this.element, {
        "aria-label": "rating"
      });
      this.renderItemList();
      this.updateReset();
      if (this.readOnly) {
        this.wrapper.classList.add(READONLY);
      }
      if (!this.visible) {
        this.wrapper.classList.add(HIDDEN);
      }
      if (this.enableRtl) {
        this.wrapper.classList.add(RTL9);
      }
      if (this.enableAnimation) {
        this.wrapper.classList.add(ANIMATION);
      }
      if (this.cssClass) {
        addClass([this.wrapper], this.cssClass.split(" "));
      }
      this.updateTooltip();
      this.wireKeyboardEvent();
      this.updateDisabled();
    };
    Rating2.prototype.updateDisabled = function() {
      this.wrapper.classList[this.disabled ? "add" : "remove"](DISABLED6);
      attributes(this.ratingItemList, {
        "tabindex": this.disabled ? "-1" : "0"
      });
      this.updateResetButton();
    };
    Rating2.prototype.updateResetButton = function() {
      if (this.allowReset) {
        if (this.resetElement) {
          this.resetElement.blur();
        }
        var isDisabled = this.value <= this.min || this.disabled;
        this.resetElement.classList[isDisabled ? "add" : "remove"](DISABLED6);
        attributes(this.resetElement, {
          "tabindex": isDisabled ? "-1" : "0",
          "aria-hidden": isDisabled.toString()
        });
      }
    };
    Rating2.prototype.renderItemList = function() {
      var _this = this;
      this.ratingItemList = this.createElement("div", {
        className: ITEMLIST,
        id: this.element.id + "_item-list"
      });
      attributes(this.ratingItemList, {
        "aria-label": "rating",
        "role": "slider"
      });
      this.wrapper.appendChild(this.ratingItemList);
      EventHandler.add(this.ratingItemList, "touchmove", function(e) {
        return _this.touchMoveHandler(e);
      }, this);
      EventHandler.add(this.ratingItemList, Browser.touchEndEvent, this.touchEndHandler, this);
    };
    Rating2.prototype.touchMoveHandler = function(e) {
      if (!this.isTouchSelected) {
        this.wrapper.classList.add("e-rating-touch");
        this.isTouchSelected = true;
      }
      this.wrapper.classList.add("e-touch-select");
      var rect = this.ratingItemList.getBoundingClientRect();
      var x = e.touches[0].clientX - rect.x;
      var currValue = x / rect.width * this.itemsCount;
      currValue = this.enableRtl ? this.itemsCount - currValue : currValue;
      currValue = currValue < this.min ? this.min : currValue > this.itemsCount ? this.itemsCount : currValue;
      currValue = this.validateValue(currValue);
      var element2 = currValue === 0 ? null : this.itemElements[parseInt((Math.ceil(currValue) - 1).toString(), 10)];
      if (currValue === this.currentValue) {
        if (this.showTooltip && element2) {
          this.openRatingTooltip(element2, false);
        }
        return;
      }
      var previousValue = this.currentValue;
      this.triggerChange(e, currValue);
      this.updateCurrentValue(currValue);
      if (this.showTooltip) {
        if (element2) {
          if (Math.ceil(currValue) !== Math.ceil(previousValue)) {
            this.closeRatingTooltip();
          }
          this.openRatingTooltip(element2, true);
        } else {
          this.closeRatingTooltip();
        }
      }
    };
    Rating2.prototype.touchEndHandler = function() {
      this.closeRatingTooltip();
      this.wrapper.classList.remove("e-touch-select");
    };
    Rating2.prototype.updateTemplateFunction = function() {
      this.emptyTemplateFunction = this.emptyTemplate ? this.getTemplateString(this.emptyTemplate) : null;
      this.fullTemplateFunction = this.fullTemplate ? this.getTemplateString(this.fullTemplate) : null;
    };
    Rating2.prototype.renderItems = function() {
      var _this = this;
      for (var i = 0; i < this.itemsCount; i++) {
        var ratingItemContainer = this.createElement("span", {
          className: ITEMCONTAINER
        });
        var spanItem = this.createElement("span", {
          className: "e-rating-item"
        });
        var ratingValue = this.getRatingValue(this.value, i);
        this.renderItemContent(spanItem, ratingValue, i, false);
        ratingItemContainer.appendChild(spanItem);
        this.wireItemsEvents(ratingItemContainer, i + 1);
        this.itemElements.push(ratingItemContainer);
        var eventArgs = {
          element: ratingItemContainer,
          value: i + 1
        };
        this.trigger("beforeItemRender", eventArgs, function(args) {
          _this.ratingItemList.appendChild(args.element);
        });
      }
      attributes(this.ratingItemList, {
        "aria-valuemax": this.itemsCount.toString()
      });
      this.updateItemValue(false);
    };
    Rating2.prototype.renderItemContent = function(spanEle, val, index, isrerender) {
      if (isrerender) {
        this.removeItemContent(spanEle);
      }
      if (this.fullTemplate && val === 1) {
        spanEle.classList.add(FULLTEMPLATE);
        append(this.fullTemplateFunction({
          index,
          ratingValue: val
        }, this, "ratingFullTemplate", this.element.id + "fullTemplate", this.isStringTemplate), spanEle);
      } else if (this.emptyTemplate) {
        spanEle.classList.add(EMPTYTEMPLATE);
        append(this.emptyTemplateFunction({
          index,
          ratingValue: val
        }, this, "ratingEmptyTemplate", this.element.id + "emptyTemplate", this.isStringTemplate), spanEle);
      } else {
        addClass([spanEle], ICONCSS.split(" "));
      }
    };
    Rating2.prototype.removeItemContent = function(spanEle) {
      spanEle.classList.remove(FULLTEMPLATE, EMPTYTEMPLATE);
      removeClass([spanEle], ICONCSS.split(" "));
      if (spanEle.firstChild) {
        spanEle.innerHTML = "";
      }
    };
    Rating2.prototype.updateTooltip = function() {
      if (this.showTooltip) {
        this.tooltipObj = new Tooltip({
          target: ".e-rating-item-container",
          windowCollision: true,
          opensOn: "Custom",
          cssClass: this.cssClass ? "e-rating-tooltip " + this.cssClass : "e-rating-tooltip"
        });
        this.tooltipObj.appendTo(this.ratingItemList);
      } else {
        if (!isNullOrUndefined(this.tooltipObj)) {
          this.tooltipObj.destroy();
          this.tooltipObj = null;
        }
      }
    };
    Rating2.prototype.updateMinValue = function() {
      this.setProperties({
        min: this.validateValue(this.min)
      }, true);
      if (this.min > 0 && this.value < this.min) {
        this.triggerChange(null, this.min, false);
      }
      attributes(this.ratingItemList, {
        "aria-valuemin": this.min.toString()
      });
    };
    Rating2.prototype.validateValue = function(currentValue) {
      if (currentValue > this.itemsCount) {
        currentValue = this.itemsCount;
      } else if (currentValue < 0) {
        currentValue = 0;
      } else {
        currentValue = this.precision === PrecisionType.Full || this.enableSingleSelection ? Math.round(currentValue) : this.precision === PrecisionType.Half ? Math.round(currentValue * 2) / 2 : this.precision === PrecisionType.Quarter ? Math.round(currentValue * 4) / 4 : Math.round(currentValue * 10) / 10;
      }
      return currentValue;
    };
    Rating2.prototype.getRatingValue = function(value, i) {
      return this.enableSingleSelection ? value > i && value <= i + 1 ? 1 : 0 : value >= i + 1 ? 1 : value < i ? 0 : value - i;
    };
    Rating2.prototype.updateItemValue = function(isUpdate) {
      if (isUpdate === void 0) {
        isUpdate = true;
      }
      if (isUpdate && this.isReact) {
        this.clearTemplate(["ratingEmptyTemplate", "ratingFullTemplate"]);
      }
      for (var i = 0; i < this.itemsCount; i++) {
        var itemElement = this.itemElements[parseInt(i.toString(), 10)];
        itemElement.classList.remove(SELECTED, INTERMEDIATE, SELECTEDVALUE);
        var ratingValue = this.getRatingValue(this.currentValue, i);
        if (ratingValue === 1) {
          itemElement.classList.add(SELECTED);
        } else if (ratingValue > 0) {
          itemElement.classList.add(INTERMEDIATE);
        } else if (this.precision === PrecisionType.Full && i + 1 <= this.value && !this.enableSingleSelection) {
          itemElement.classList.add(SELECTEDVALUE);
        }
        if (isUpdate) {
          this.updateItemContent(ratingValue, i);
        }
        itemElement.style.setProperty(RATINGVALUE, ratingValue * 100 + "%");
        itemElement.classList[this.value === 0 && i === 0 || this.value === i + 1 || ratingValue > 0 && ratingValue < 1 ? "add" : "remove"]("e-rating-focus");
      }
      if (isUpdate) {
        this.renderReactTemplates();
      }
      this.updateResetButton();
      attributes(this.ratingItemList, {
        "aria-valuenow": this.currentValue.toString()
      });
      attributes(this.element, {
        "value": this.value.toString()
      });
    };
    Rating2.prototype.updateItemContent = function(ratingValue, index) {
      if (!this.fullTemplate && !this.emptyTemplate) {
        return;
      }
      var spanEle = this.itemElements[parseInt(index.toString(), 10)].querySelector(".e-rating-item");
      if (this.fullTemplate && ratingValue === 1) {
        if (!this.isReact && spanEle.classList.contains(FULLTEMPLATE)) {
          return;
        }
        this.removeItemContent(spanEle);
        spanEle.classList.add(FULLTEMPLATE);
        append(this.fullTemplateFunction({
          ratingValue,
          index
        }, this, "ratingFullTemplate", this.element.id + "fullTemplate" + index, this.isStringTemplate), spanEle);
      } else if (this.emptyTemplate) {
        if (!this.isReact && spanEle.classList.contains(EMPTYTEMPLATE)) {
          return;
        }
        this.removeItemContent(spanEle);
        spanEle.classList.add(EMPTYTEMPLATE);
        append(this.emptyTemplateFunction({
          ratingValue,
          index
        }, this, "ratingEmptyTemplate", this.element.id + "emptyTemplate" + index, this.isStringTemplate), spanEle);
      } else {
        this.removeItemContent(spanEle);
        addClass([spanEle], ICONCSS.split(" "));
      }
    };
    Rating2.prototype.updateTooltipContent = function(isChange) {
      var _this = this;
      if (this.showTooltip) {
        if (this.isReact) {
          this.clearTemplate(["ratingTooltipTemplate"]);
        }
        var content_1;
        if (this.tooltipTemplate) {
          content_1 = this.createElement("span", {
            className: "e-rating-tooltip-content"
          });
          var templateFunction = this.getTemplateString(this.tooltipTemplate);
          append(templateFunction({
            value: this.currentValue
          }, this, "ratingTooltipTemplate", this.element.id + "tooltipTemplate", this.isStringTemplate), content_1);
          this.tooltipObj.setProperties({
            content: content_1
          }, isChange);
          if (this.isAngular) {
            setTimeout(function() {
              var ratingSpan = _this.ratingItemList.querySelectorAll("." + ITEMCONTAINER + "." + SELECTED);
              _this.tooltipObj.refresh(ratingSpan[ratingSpan.length - 1]);
            });
          }
        } else {
          content_1 = this.currentValue.toString();
          this.tooltipObj.setProperties({
            content: initializeCSPTemplate(function() {
              return content_1;
            })
          }, isChange);
        }
        this.renderReactTemplates();
      }
    };
    Rating2.prototype.getTemplateString = function(template) {
      var stringContent = "";
      try {
        if (typeof template !== "function") {
          var tempEle = select(template);
          if (tempEle) {
            stringContent = tempEle.tagName === "SCRIPT" ? tempEle.innerHTML : tempEle.outerHTML;
          } else {
            stringContent = template;
          }
        } else {
          stringContent = template;
        }
      } catch (e) {
        stringContent = template;
      }
      return compile(stringContent);
    };
    Rating2.prototype.displayLabel = function() {
      if (this.showLabel) {
        this.spanLabel = this.createElement("span", {
          className: LABEL3
        });
        this.updateLabel();
        this.updateLabelPosition();
      } else {
        if (this.wrapper.contains(this.spanLabel)) {
          remove(this.spanLabel);
          this.spanLabel = null;
        }
      }
    };
    Rating2.prototype.updateLabel = function() {
      if (this.showLabel) {
        if (this.labelTemplate) {
          if (this.isReact) {
            this.clearTemplate(["ratingLabelTemplate"]);
          }
          if (this.spanLabel.firstChild) {
            this.spanLabel.innerHTML = "";
          }
          var templateFunction = this.getTemplateString(this.labelTemplate);
          append(templateFunction({
            value: this.currentValue
          }, this, "ratingLabelTemplate", this.element.id + "labelTemplate", this.isStringTemplate), this.spanLabel);
          this.renderReactTemplates();
        } else {
          this.spanLabel.textContent = this.currentValue + " / " + this.itemsCount;
        }
      }
    };
    Rating2.prototype.updateReset = function() {
      if (this.allowReset) {
        this.resetElement = this.createElement("span", {
          className: RESET,
          attrs: {
            "aria-label": "resetbutton",
            "role": "button"
          }
        });
        this.updateResetButton();
        EventHandler.add(this.resetElement, "click", this.resetClicked, this);
        this.wrapper.insertBefore(this.resetElement, this.ratingItemList);
      } else {
        if (this.wrapper.contains(this.resetElement)) {
          remove(this.resetElement);
          this.resetElement = null;
        }
      }
    };
    Rating2.prototype.updateLabelPosition = function() {
      this.clearLabelPosition();
      this.spanLabel.classList.add("e-label-" + this.labelPosition.toLowerCase());
      if (this.labelPosition === "Left" || this.labelPosition === "Top") {
        this.wrapper.firstChild.after(this.spanLabel);
      } else {
        this.wrapper.appendChild(this.spanLabel);
      }
    };
    Rating2.prototype.clearLabelPosition = function() {
      var removeCss = this.spanLabel.classList.value.match(/(e-label-[top|bottom|right|left]+)/g);
      if (removeCss) {
        removeClass([this.spanLabel], removeCss);
      }
    };
    Rating2.prototype.wireItemsEvents = function(itemElement, index) {
      var _this = this;
      EventHandler.add(itemElement, "click", function(e) {
        return _this.clickHandler(e);
      }, this);
      EventHandler.add(itemElement, "mousemove", function(e) {
        return _this.mouseMoveHandler(index, e);
      }, this);
      EventHandler.add(itemElement, "mouseleave", this.mouseLeaveHandler, this);
    };
    Rating2.prototype.clickHandler = function(e) {
      this.currentValue = this.min > 0 && this.currentValue < this.min ? this.min : this.currentValue;
      this.triggerChange(e, this.currentValue);
      this.updateItemValue();
      this.updateLabel();
      this.updateResetButton();
    };
    Rating2.prototype.updateValueChange = function(e, val, isInteracted) {
      if (isInteracted === void 0) {
        isInteracted = true;
      }
      this.triggerChange(e, val, isInteracted);
      this.updateItemValue();
      this.updateLabel();
    };
    Rating2.prototype.triggerChange = function(e, val, isInteracted, isInitial) {
      if (isInteracted === void 0) {
        isInteracted = true;
      }
      if (isInitial === void 0) {
        isInitial = false;
      }
      var ratingObj = this;
      val = this.validateValue(val);
      this.currentValue = val;
      if (this.currentValue === this.value) {
        return;
      }
      var eventArgs = {
        event: e,
        isInteracted,
        value: val,
        previousValue: this.value
      };
      this.setProperties({
        value: val
      }, true);
      if (this.isAngular && !isInitial) {
        ratingObj.localChange({
          value: val
        });
      }
      if (!isInitial) {
        this.trigger("valueChanged", eventArgs);
      }
    };
    Rating2.prototype.mouseMoveHandler = function(index, e) {
      if (this.isTouchSelected) {
        this.wrapper.classList.remove("e-rating-touch");
        this.isTouchSelected = false;
      }
      var currValue = this.calculateCurrentValue(index, e);
      currValue = this.validateValue(currValue);
      var element2 = this.itemElements[parseInt((index - 1).toString(), 10)];
      if (currValue === this.currentValue) {
        this.openRatingTooltip(element2, false);
        return;
      }
      this.updateCurrentValue(currValue);
      this.openRatingTooltip(element2, true);
      var eventArgs = {
        element: element2,
        event: e,
        value: currValue
      };
      this.trigger("onItemHover", eventArgs);
    };
    Rating2.prototype.openRatingTooltip = function(element2, isChange) {
      if (this.showTooltip) {
        if (!this.tooltipOpen) {
          this.updateTooltipContent(false);
          this.tooltipObj.open(element2);
          this.tooltipOpen = true;
        } else if (isChange) {
          this.updateTooltipContent(true);
          this.tooltipObj.refresh(element2);
        }
      }
    };
    Rating2.prototype.closeRatingTooltip = function() {
      if (this.tooltipOpen) {
        this.tooltipObj.close();
        this.tooltipOpen = false;
      }
    };
    Rating2.prototype.updateCurrentValue = function(currValue) {
      this.currentValue = currValue;
      this.updateItemValue();
      this.updateLabel();
    };
    Rating2.prototype.mouseLeaveHandler = function() {
      this.closeRatingTooltip();
      this.updateCurrentValue(this.value);
    };
    Rating2.prototype.calculateCurrentValue = function(index, args) {
      var currentValue = index;
      if (!(this.enableSingleSelection || this.precision === PrecisionType.Full)) {
        currentValue = args.offsetX / this.itemElements[index - 1].clientWidth;
        currentValue = this.enableRtl ? 1 - currentValue : currentValue;
        if (this.precision === PrecisionType.Quarter) {
          currentValue = currentValue <= 0.25 ? 0.25 : currentValue <= 0.5 ? 0.5 : currentValue < 0.75 ? 0.75 : 1;
        } else if (this.precision === PrecisionType.Half) {
          currentValue = currentValue <= 0.5 ? 0.5 : 1;
        }
        currentValue = currentValue + index - 1;
      }
      return currentValue;
    };
    Rating2.prototype.reset = function() {
      this.resetClicked(null, false);
    };
    Rating2.prototype.resetClicked = function(e, isInteracted) {
      if (isInteracted === void 0) {
        isInteracted = true;
      }
      this.updateValueChange(e, this.min, isInteracted);
      this.updateResetButton();
    };
    Rating2.prototype.wireKeyboardEvent = function() {
      this.keyboardModuleRating = new KeyboardEvents(this.wrapper, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
    };
    Rating2.prototype.keyActionHandler = function(e) {
      e.preventDefault();
      if (this.disabled || this.readOnly) {
        return;
      }
      if (e.target.classList.contains(ITEMLIST)) {
        switch (e.action) {
          case "uparrow":
            this.handleNavigation(e, true);
            break;
          case "downarrow":
            this.handleNavigation(e, false);
            break;
          case "leftarrow":
            this.handleNavigation(e, this.enableRtl);
            break;
          case "rightarrow":
            this.handleNavigation(e, !this.enableRtl);
            break;
        }
      }
      if (this.allowReset && e.target.classList.contains("e-reset")) {
        switch (e.action) {
          case "space":
            this.resetClicked(e);
            break;
        }
      }
    };
    Rating2.prototype.handleNavigation = function(e, isIncrease) {
      if (!isIncrease && this.value > this.min || isIncrease && this.value < this.itemsCount) {
        var currentValue = this.precision === PrecisionType.Full || this.enableSingleSelection ? 1 : this.precision === PrecisionType.Half ? 0.5 : this.precision === PrecisionType.Quarter ? 0.25 : Math.round(0.1 * 10) / 10;
        currentValue = isIncrease ? this.value + currentValue : this.value - currentValue;
        this.updateValueChange(e, currentValue);
        this.updateResetButton();
      }
    };
    Rating2.prototype.updateContent = function() {
      if (this.isReact) {
        this.clearTemplate(["ratingEmptyTemplate", "ratingFullTemplate"]);
      }
      for (var i = 0; i < this.itemsCount; i++) {
        var itemElement = this.itemElements[parseInt(i.toString(), 10)].firstElementChild;
        this.renderItemContent(itemElement, this.getRatingValue(this.value, i), i, true);
      }
    };
    Rating2.prototype.getModuleName = function() {
      return "rating";
    };
    Rating2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    Rating2.prototype.removeItemElements = function() {
      for (var i = 0; i < this.itemElements.length; i++) {
        remove(this.itemElements[parseInt(i.toString(), 10)]);
      }
      this.itemElements = [];
    };
    Rating2.prototype.destroy = function() {
      var _this = this;
      _super.prototype.destroy.call(this);
      this.removeItemElements();
      this.clearTemplate();
      if (this.spanLabel) {
        remove(this.spanLabel);
        this.spanLabel = null;
      }
      if (this.resetElement) {
        remove(this.resetElement);
        this.resetElement = null;
      }
      if (this.showTooltip) {
        this.tooltipObj.destroy();
        this.tooltipObj = null;
      }
      remove(this.ratingItemList);
      this.ratingItemList = null;
      this.wrapper.parentNode.insertBefore(this.element, this.wrapper);
      remove(this.wrapper);
      this.wrapper = null;
      this.keyboardModuleRating.destroy();
      this.keyboardModuleRating = null;
      ["value", "aria-label", "name"].forEach(function(attr) {
        _this.element.removeAttribute(attr);
      });
    };
    Rating2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "value":
            this.updateValueChange(null, this.value > this.min ? this.value : this.min, false);
            break;
          case "min":
            this.updateMinValue();
            this.updateItemValue();
            this.updateLabel();
            break;
          case "showLabel":
            this.displayLabel();
            break;
          case "visible":
            this.wrapper.classList[!this.visible ? "add" : "remove"](HIDDEN);
            break;
          case "disabled":
            this.updateDisabled();
            break;
          case "readOnly":
            this.wrapper.classList[this.readOnly ? "add" : "remove"](READONLY);
            break;
          case "allowReset":
            this.updateReset();
            break;
          case "enableRtl":
            this.wrapper.classList[this.enableRtl ? "add" : "remove"](RTL9);
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([this.wrapper], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([this.wrapper], newProp.cssClass.split(" "));
            }
            if (this.tooltipObj) {
              this.tooltipObj.setProperties({
                cssClass: this.cssClass ? "e-rating-tooltip " + this.cssClass : "e-rating-tooltip"
              });
            }
            break;
          case "labelPosition":
            this.updateLabelPosition();
            break;
          case "showTooltip":
            this.updateTooltip();
            break;
          case "precision":
            this.updateMinValue();
            this.triggerChange(null, this.value, false);
            this.updateItemValue();
            this.updateLabel();
            break;
          case "enableSingleSelection":
            this.updateValueChange(null, this.currentValue, false);
            break;
          case "enableAnimation":
            this.wrapper.classList[this.enableAnimation ? "add" : "remove"](ANIMATION);
            break;
          case "emptyTemplate":
          case "fullTemplate":
            this.updateTemplateFunction();
            this.updateContent();
            break;
          case "labelTemplate":
            this.updateLabel();
            break;
          case "itemsCount":
            this.removeItemElements();
            this.renderItems();
            this.updateLabel();
            break;
        }
      }
    };
    __decorate26([Property(false)], Rating2.prototype, "allowReset", void 0);
    __decorate26([Property("")], Rating2.prototype, "cssClass", void 0);
    __decorate26([Property(false)], Rating2.prototype, "disabled", void 0);
    __decorate26([Property("")], Rating2.prototype, "emptyTemplate", void 0);
    __decorate26([Property(true)], Rating2.prototype, "enableAnimation", void 0);
    __decorate26([Property(false)], Rating2.prototype, "enableSingleSelection", void 0);
    __decorate26([Property("")], Rating2.prototype, "fullTemplate", void 0);
    __decorate26([Property(5)], Rating2.prototype, "itemsCount", void 0);
    __decorate26([Property(LabelPosition.Right)], Rating2.prototype, "labelPosition", void 0);
    __decorate26([Property("")], Rating2.prototype, "labelTemplate", void 0);
    __decorate26([Property(0)], Rating2.prototype, "min", void 0);
    __decorate26([Property(PrecisionType.Full)], Rating2.prototype, "precision", void 0);
    __decorate26([Property(false)], Rating2.prototype, "readOnly", void 0);
    __decorate26([Property(false)], Rating2.prototype, "showLabel", void 0);
    __decorate26([Property(true)], Rating2.prototype, "showTooltip", void 0);
    __decorate26([Property("")], Rating2.prototype, "tooltipTemplate", void 0);
    __decorate26([Property(0)], Rating2.prototype, "value", void 0);
    __decorate26([Property(true)], Rating2.prototype, "visible", void 0);
    __decorate26([Event()], Rating2.prototype, "beforeItemRender", void 0);
    __decorate26([Event()], Rating2.prototype, "created", void 0);
    __decorate26([Event()], Rating2.prototype, "onItemHover", void 0);
    __decorate26([Event()], Rating2.prototype, "valueChanged", void 0);
    Rating2 = __decorate26([NotifyPropertyChanges], Rating2);
    return Rating2;
  }(Component)
);

// node_modules/@syncfusion/ej2-inputs/src/otp-input/otp-input.js
var __extends29 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate27 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var INPUTFIELD = "e-otp-input-field";
var RTL10 = "e-rtl";
var OtpInputType;
(function(OtpInputType2) {
  OtpInputType2["Number"] = "number";
  OtpInputType2["Text"] = "text";
  OtpInputType2["Password"] = "password";
})(OtpInputType || (OtpInputType = {}));
var OtpInputStyle;
(function(OtpInputStyle2) {
  OtpInputStyle2["Outlined"] = "outlined";
  OtpInputStyle2["Underlined"] = "underlined";
  OtpInputStyle2["Filled"] = "filled";
})(OtpInputStyle || (OtpInputStyle = {}));
var TextTransform;
(function(TextTransform2) {
  TextTransform2["None"] = "none";
  TextTransform2["Uppercase"] = "uppercase";
  TextTransform2["Lowercase"] = "lowercase";
})(TextTransform || (TextTransform = {}));
var OtpInput = (
  /** @class */
  function(_super) {
    __extends29(OtpInput2, _super);
    function OtpInput2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.inputs = [];
      _this.previousValue = "";
      _this.separatorElements = [];
      _this.shouldFireFocus = true;
      _this.shouldFireBlur = true;
      _this.isFocusInCalled = false;
      _this.isFocusOutCalled = false;
      _this.handleWheelEvent = function(e) {
        e.preventDefault();
      };
      return _this;
    }
    OtpInput2.prototype.preRender = function() {
      if (!this.element.id) {
        this.element.id = getUniqueID("e-" + this.getModuleName());
      }
    };
    OtpInput2.prototype.render = function() {
      this.initialize();
    };
    OtpInput2.prototype.initialize = function() {
      attributes(this.element, {
        "role": "group"
      });
      this.renderInputs();
      this.renderSeparator(1, this.inputs.length);
      this.addPlaceHolder();
      this.updateCssClass(this.cssClass);
      this.updateVariantClass();
      this.updateAriaLabel(this.ariaLabels);
      this.setElementAttributes(this.htmlAttributes, this.element);
      if (this.enableRtl) {
        this.element.classList.add(RTL10);
      }
      this.previousValue = this.value.toString();
      if (this.autoFocus) {
        this.focusIn();
      }
    };
    OtpInput2.prototype.renderInputs = function() {
      this.hiddenInputEle = this.createElement("input", {
        id: "otpInput_hidden",
        attrs: {
          name: this.element.id,
          type: "hidden",
          value: this.type === "number" ? this.value.toString().replace(/\D/g, "") : this.value.toString(),
          autoComplete: "off"
        }
      });
      this.element.appendChild(this.hiddenInputEle);
      for (var i = 0; i < this.length; i++) {
        this.createOtpInput(i);
      }
    };
    OtpInput2.prototype.createOtpInput = function(index) {
      var valueContainer = this.getDefaultValue();
      var inputValue = "";
      if (valueContainer) {
        var valueAtIndex = valueContainer[parseInt(index.toString(), 10)];
        if (this.type === "number") {
          if (!isNaN(Number(valueAtIndex))) {
            inputValue = valueAtIndex;
          }
        } else {
          inputValue = valueAtIndex || "";
        }
      }
      var inputEle = this.createElement("input", {
        id: this.element.id + "-" + (index + 1),
        className: INPUTFIELD + " e-input",
        attrs: {
          maxlength: "1",
          type: this.type,
          inputmode: this.htmlAttributes["inputmode"] || (this.type === "number" ? "numeric" : "text")
        }
      });
      if (this.disabled) {
        inputEle.setAttribute("disabled", "disabled");
      }
      this.element.appendChild(inputEle);
      this.inputs.push(inputEle);
      if (inputValue) {
        inputEle.value = inputValue;
      }
      this.wireEvents(inputEle, index);
    };
    OtpInput2.prototype.renderSeparator = function(index, length) {
      if (this.separator.length > 0) {
        for (var i = index; i < length; i++) {
          var separatorElement = this.createElement("span", {
            className: "e-otp-separator"
          });
          separatorElement.textContent = this.separator;
          this.separatorElements.push(separatorElement);
          this.element.insertBefore(separatorElement, this.inputs[parseInt(i.toString(), 10)]);
        }
      }
    };
    OtpInput2.prototype.updateSeparatorValue = function() {
      var _this = this;
      if (this.separator === "") {
        this.separatorElements.forEach(function(element2) {
          return remove(element2);
        });
        this.separatorElements = [];
      } else {
        this.separatorElements.forEach(function(element2) {
          element2.textContent = _this.separator;
        });
      }
    };
    OtpInput2.prototype.addPlaceHolder = function() {
      for (var i = 0; i < this.inputs.length; i++) {
        var placeholderValue = this.placeholder.length <= 1 ? this.placeholder : this.placeholder.charAt(i);
        this.setElementAttributes({
          "placeholder": placeholderValue
        }, this.inputs[parseInt(i.toString(), 10)]);
      }
    };
    OtpInput2.prototype.updateInputType = function(inputType) {
      var inputMode = this.htmlAttributes["inputmode"] || (inputType === "number" ? "numeric" : "text");
      this.inputs.forEach(function(input) {
        input.type = inputType;
        input.setAttribute("inputmode", inputMode);
      });
    };
    OtpInput2.prototype.getDefaultValue = function() {
      var extractedValue = typeof this.value === "number" ? this.value.toString() : this.value;
      if (this.textTransform) {
        extractedValue = this.getTransformedText(extractedValue);
      }
      var value = extractedValue.replace(/\s/g, "");
      return value.length > 0 ? value.split("") : void 0;
    };
    OtpInput2.prototype.getTransformedText = function(transformingText) {
      var transformedText = this.textTransform.toLowerCase() === TextTransform.Lowercase ? transformingText.toLowerCase() : this.textTransform.toLowerCase() === TextTransform.Uppercase ? transformingText.toUpperCase() : transformingText;
      return transformedText;
    };
    OtpInput2.prototype.handleInputChange = function(index, event2) {
      var currentInputElement = this.inputs[parseInt(index.toString(), 10)];
      if (currentInputElement && index < this.length - 1 && currentInputElement.value.length > 0) {
        var nextInputElement = this.inputs[parseInt(index.toString(), 10) + 1];
        this.shouldFireFocus = this.shouldFireBlur = false;
        nextInputElement.focus();
        if (nextInputElement && nextInputElement.value.length > 0) {
          nextInputElement.select();
        }
      }
      var target = event2.target;
      if (target.value.length > 1) {
        target.value = target.value.slice(0, 1);
      }
      if (this.textTransform) {
        target.value = this.getTransformedText(target.value);
      }
      this.triggerInputEvent(index, event2);
      this.triggerValuechanged(event2, true);
    };
    OtpInput2.prototype.handleKeyAction = function(index, event2) {
      if (event2.key.length > 1 && !(index === 0 && event2.key === "Backspace" || index === this.length - 1 && event2.key === "Delete")) {
        this.shouldFireFocus = this.shouldFireBlur = false;
      }
      var currentInputElement = this.inputs[parseInt(index.toString(), 10)];
      var previousInputElement = this.inputs[parseInt(index.toString(), 10) - 1];
      var nextInputElement = this.inputs[parseInt(index.toString(), 10) + 1];
      if (event2.key === "Delete") {
        var value = "";
        if (currentInputElement.value.length > 0) {
          value = currentInputElement.value;
          currentInputElement.value = "";
        } else if (index !== this.inputs.length - 1) {
          value = nextInputElement.value;
          nextInputElement.value = "";
          nextInputElement.focus();
        }
        if (value.length > 0) {
          this.triggerInputEvent(index, event2);
        }
      } else if (event2.key === "Backspace") {
        if (index !== 0 && currentInputElement.value.length === 0) {
          var previousValue = previousInputElement.value;
          previousInputElement.value = "";
          previousInputElement.focus();
          if (previousValue.length > 0) {
            this.triggerInputEvent(index, event2);
          }
        }
      } else if (event2.key === "ArrowLeft" || event2.key === "ArrowRight") {
        if (event2.key === "ArrowLeft" && index > 0) {
          previousInputElement.focus();
          previousInputElement.select();
        } else if (event2.key === "ArrowRight" && index < this.inputs.length - 1) {
          nextInputElement.focus();
          nextInputElement.select();
        }
        event2.preventDefault();
      } else if (event2.key === "ArrowUp" || event2.key === "ArrowDown") {
        event2.preventDefault();
      } else if (event2.key !== "Tab" && !event2.shiftKey && !event2.ctrlKey) {
        if (this.type === "number" && /\D/.test(event2.key.toLocaleLowerCase())) {
          event2.preventDefault();
        }
      }
    };
    OtpInput2.prototype.handleSelection = function(index) {
      var currentInputElement = this.inputs[parseInt(index.toString(), 10)];
      if (currentInputElement.value) {
        currentInputElement.select();
      }
    };
    OtpInput2.prototype.handleFocus = function(index, event2) {
      addClass([this.inputs[parseInt(index.toString(), 10)]], "e-otp-input-focus");
      if (this.shouldFireFocus) {
        var eventArgs = {
          element: this.element,
          event: event2,
          index,
          isInteracted: this.isFocusInCalled ? false : true,
          value: this.value
        };
        this.trigger("focus", eventArgs);
      }
      this.shouldFireFocus = true;
    };
    OtpInput2.prototype.handleBlur = function(index, event2) {
      removeClass([this.inputs[parseInt(index.toString(), 10)]], "e-otp-input-focus");
      if (this.shouldFireBlur) {
        var eventArgs = {
          element: this.element,
          event: event2,
          value: this.value,
          index,
          isInteracted: this.isFocusOutCalled ? false : true
        };
        this.trigger("blur", eventArgs);
      }
      this.shouldFireBlur = true;
    };
    OtpInput2.prototype.handlePaste = function(index, event2) {
      var clipboardData = event2.clipboardData;
      if (clipboardData) {
        var pastedText = clipboardData.getData("text");
        var pastedValues = pastedText.split("");
        var pastedValueIndex = 0;
        for (var i = index; i < this.inputs.length; i++) {
          if (pastedValues.length > 0 && pastedValues[parseInt(pastedValueIndex.toString(), 10)]) {
            this.inputs[parseInt(i.toString(), 10)].value = pastedValues[parseInt(pastedValueIndex.toString(), 10)];
            pastedValueIndex++;
            this.updateValueProperty();
          }
        }
        this.focusIn();
        this.triggerValuechanged(event2, true);
      }
    };
    OtpInput2.prototype.triggerInputEvent = function(index, event2) {
      var previousValue = this.value.toString();
      this.updateValueProperty();
      var inputEventArgs = {
        element: this.element,
        event: event2,
        previousValue,
        value: this.value.toString(),
        index
      };
      this.trigger("input", inputEventArgs);
    };
    OtpInput2.prototype.triggerValuechanged = function(event2, isInteracted) {
      if (this.length === this.value.toString().length) {
        if (this.previousValue !== this.value) {
          var eventArgs = {
            element: this.element,
            event: event2,
            isInteracted: isInteracted ? isInteracted : false,
            previousValue: this.previousValue,
            value: this.value
          };
          this.trigger("valueChanged", eventArgs);
          this.previousValue = this.value.toString();
        }
      }
    };
    OtpInput2.prototype.wireEvents = function(inputEle, index) {
      EventHandler.add(inputEle, "focus", this.handleFocus.bind(this, index), this);
      EventHandler.add(inputEle, "blur", this.handleBlur.bind(this, index), this);
      EventHandler.add(inputEle, "input", this.handleInputChange.bind(this, index), this);
      EventHandler.add(inputEle, "keydown", this.handleKeyAction.bind(this, index), this);
      EventHandler.add(inputEle, "click", this.handleSelection.bind(this, index), this);
      EventHandler.add(inputEle, "paste", this.handlePaste.bind(this, index), this);
      EventHandler.add(inputEle, "wheel", this.handleWheelEvent, this);
    };
    OtpInput2.prototype.unWireEvents = function() {
      for (var i = 0; i < this.inputs.length; i++) {
        var currentInputElement = this.inputs[parseInt(i.toString(), 10)];
        EventHandler.remove(currentInputElement, "focus", this.handleFocus.bind(this, i));
        EventHandler.remove(currentInputElement, "blur", this.handleBlur.bind(this, i));
        EventHandler.remove(currentInputElement, "input", this.handleInputChange.bind(this, i));
        EventHandler.remove(currentInputElement, "keydown", this.handleKeyAction.bind(this, i));
        EventHandler.remove(currentInputElement, "click", this.handleSelection.bind(this, i));
        EventHandler.remove(currentInputElement, "paste", this.handlePaste.bind(this, i));
        EventHandler.remove(currentInputElement, "wheel", this.handleWheelEvent);
      }
    };
    OtpInput2.prototype.updateValueProperty = function() {
      var value = "";
      this.inputs.forEach(function(input) {
        value += input.value;
      });
      var prevOnChange = this.isProtectedOnChange;
      this.isProtectedOnChange = true;
      this.value = typeof this.value === "number" ? parseInt(value, 10) : value;
      this.isProtectedOnChange = prevOnChange;
      this.hiddenInputEle.value = this.value.toString();
    };
    OtpInput2.prototype.updateInputValue = function(previousValue) {
      var stringifiedValue = this.value.toString();
      if (this.textTransform) {
        stringifiedValue = this.getTransformedText(stringifiedValue);
      }
      var previousStringValue = previousValue.toString();
      for (var i = 0; i < this.inputs.length; i++) {
        if (previousStringValue.charAt(i) !== stringifiedValue.charAt(i)) {
          this.inputs[parseInt(i.toString(), 10)].value = stringifiedValue.charAt(i);
          this.hiddenInputEle.value = stringifiedValue;
        }
      }
      this.focusIn();
    };
    OtpInput2.prototype.updateCssClass = function(addCss, removeCss) {
      if (removeCss === void 0) {
        removeCss = "";
      }
      var _a, _b;
      var cssClasses;
      if (removeCss) {
        cssClasses = removeCss.trim().split(" ");
        (_a = this.element.classList).remove.apply(_a, cssClasses);
      }
      if (addCss) {
        cssClasses = addCss.trim().split(" ");
        (_b = this.element.classList).add.apply(_b, cssClasses);
      }
    };
    OtpInput2.prototype.updateVariantClass = function() {
      var variantClass = this.stylingMode.toLocaleLowerCase() === "outlined" ? "outline" : this.stylingMode.toLocaleLowerCase();
      var validClasses = ["underlined", "filled", "outline"];
      if (validClasses.indexOf(variantClass) !== -1) {
        removeClass([this.element], validClasses.map(function(cls) {
          return "e-" + cls;
        }));
        addClass([this.element], "e-" + variantClass);
      }
    };
    OtpInput2.prototype.updateAriaLabel = function(customAriaLabel) {
      this.inputs.forEach(function(input, index) {
        var defaultLabel = "Enter Otp Character " + (index + 1);
        var ariaLabel = customAriaLabel && customAriaLabel.length > 0 ? customAriaLabel[parseInt(index.toString(), 10)] || defaultLabel : defaultLabel;
        input.setAttribute("aria-label", ariaLabel);
      });
    };
    OtpInput2.prototype.updateDisabledState = function() {
      var _this = this;
      this.inputs.forEach(function(input) {
        if (_this.disabled) {
          input.setAttribute("disabled", "disabled");
        } else {
          input.removeAttribute("disabled");
        }
      });
    };
    OtpInput2.prototype.setElementAttributes = function(htmlAttributes, element2) {
      if (!isNullOrUndefined(htmlAttributes)) {
        for (var key in htmlAttributes) {
          if (key === "class") {
            var elementClass2 = htmlAttributes["class"].replace(/\s+/g, " ").trim();
            if (elementClass2) {
              addClass([element2], elementClass2.split(" "));
            }
          } else if (key === "inputmode") {
            this.setInputMode(htmlAttributes["" + key]);
          } else if (key === "name" && this.element.id === element2.id) {
            this.hiddenInputEle.setAttribute(key, htmlAttributes["" + key]);
          } else {
            element2.setAttribute(key, htmlAttributes["" + key]);
          }
        }
      }
    };
    OtpInput2.prototype.setInputMode = function(inputModeValue) {
      for (var i = 0; i < this.inputs.length; i++) {
        this.inputs[parseInt(i.toString(), 10)].setAttribute("inputmode", inputModeValue);
      }
    };
    OtpInput2.prototype.handleLengthChange = function(currentValue, previousValue) {
      var isLengthAdded = currentValue - previousValue > 0;
      if (isLengthAdded) {
        for (var i = previousValue; i < currentValue; i++) {
          this.createOtpInput(i);
        }
        this.renderSeparator(previousValue, currentValue);
        this.addPlaceHolder();
        this.updateAriaLabel(this.ariaLabels);
      } else {
        if (currentValue >= 0 && this.inputs.length > 0) {
          for (var i = currentValue; i < this.inputs.length; i++) {
            remove(this.inputs[parseInt(i.toString(), 10)]);
          }
          this.inputs.splice(currentValue);
          if (this.separatorElements.length > 0) {
            var index = currentValue === 0 ? 0 : currentValue - 1;
            for (var i = index; i < this.separatorElements.length; i++) {
              remove(this.separatorElements[parseInt(i.toString(), 10)]);
            }
            this.separatorElements.splice(index);
          }
        }
      }
    };
    OtpInput2.prototype.getModuleName = function() {
      return "otpinput";
    };
    OtpInput2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    OtpInput2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.unWireEvents();
      this.inputs.forEach(function(input) {
        remove(input);
      });
      this.separatorElements.forEach(function(separatorElement) {
        remove(separatorElement);
      });
      remove(this.hiddenInputEle);
      removeClass([this.element], ["e-underlined", "e-filled", "e-outline", "e-rtl"]);
      if (this.cssClass) {
        removeClass([this.element], this.cssClass.trim().split(" "));
      }
      this.element.removeAttribute("role");
      this.inputs = [];
      this.separatorElements = [];
      this.hiddenInputEle = null;
    };
    OtpInput2.prototype.focusIn = function() {
      this.isFocusInCalled = true;
      var focusIndex = this.inputs.length - 1;
      for (var index = 0; index < this.inputs.length; index++) {
        if (!(this.inputs[parseInt(index.toString(), 10)].value.length > 0)) {
          focusIndex = index;
          break;
        }
      }
      this.inputs[parseInt(focusIndex.toString(), 10)].focus();
      this.isFocusInCalled = false;
    };
    OtpInput2.prototype.focusOut = function() {
      this.isFocusOutCalled = true;
      this.inputs.forEach(function(input) {
        input.blur();
      });
      this.isFocusOutCalled = false;
    };
    OtpInput2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "textTransform":
            this.updateInputValue(this.value);
            break;
          case "value":
            this.updateInputValue(oldProp.value);
            this.triggerValuechanged();
            break;
          case "placeholder":
            this.addPlaceHolder();
            break;
          case "disabled":
            this.updateDisabledState();
            break;
          case "cssClass":
            this.updateCssClass(newProp.cssClass, oldProp.cssClass);
            break;
          case "separator":
            if (oldProp.separator === "") {
              this.renderSeparator(1, this.inputs.length);
            } else {
              this.updateSeparatorValue();
            }
            break;
          case "htmlAttributes":
            this.setElementAttributes(newProp.htmlAttributes, this.element);
            break;
          case "type":
            this.updateInputType(newProp.type);
            break;
          case "stylingMode":
            this.updateVariantClass();
            break;
          case "ariaLabels":
            this.updateAriaLabel(newProp.ariaLabels);
            break;
          case "length":
            this.handleLengthChange(newProp.length, oldProp.length);
            break;
          case "enableRtl":
            this.element.classList[this.enableRtl ? "add" : "remove"](RTL10);
            break;
          case "autoFocus":
            if (this.autoFocus) {
              this.focusIn();
            }
            break;
        }
      }
    };
    __decorate27([Property(4)], OtpInput2.prototype, "length", void 0);
    __decorate27([Property("")], OtpInput2.prototype, "value", void 0);
    __decorate27([Property(OtpInputType.Number)], OtpInput2.prototype, "type", void 0);
    __decorate27([Property("")], OtpInput2.prototype, "separator", void 0);
    __decorate27([Property("")], OtpInput2.prototype, "placeholder", void 0);
    __decorate27([Property(OtpInputStyle.Outlined)], OtpInput2.prototype, "stylingMode", void 0);
    __decorate27([Property(false)], OtpInput2.prototype, "disabled", void 0);
    __decorate27([Property("")], OtpInput2.prototype, "cssClass", void 0);
    __decorate27([Property(false)], OtpInput2.prototype, "autoFocus", void 0);
    __decorate27([Property(TextTransform.None)], OtpInput2.prototype, "textTransform", void 0);
    __decorate27([Property({})], OtpInput2.prototype, "htmlAttributes", void 0);
    __decorate27([Property([])], OtpInput2.prototype, "ariaLabels", void 0);
    __decorate27([Event()], OtpInput2.prototype, "created", void 0);
    __decorate27([Event()], OtpInput2.prototype, "valueChanged", void 0);
    __decorate27([Event()], OtpInput2.prototype, "focus", void 0);
    __decorate27([Event()], OtpInput2.prototype, "blur", void 0);
    __decorate27([Event()], OtpInput2.prototype, "input", void 0);
    OtpInput2 = __decorate27([NotifyPropertyChanges], OtpInput2);
    return OtpInput2;
  }(Component)
);

// node_modules/@syncfusion/ej2-inputs/src/speech-to-text/speech-to-text.js
var __extends30 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate28 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ButtonSettings = (
  /** @class */
  function(_super) {
    __extends30(ButtonSettings2, _super);
    function ButtonSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate28([Property("")], ButtonSettings2.prototype, "content", void 0);
    __decorate28([Property("")], ButtonSettings2.prototype, "stopContent", void 0);
    __decorate28([Property("")], ButtonSettings2.prototype, "iconCss", void 0);
    __decorate28([Property("")], ButtonSettings2.prototype, "stopIconCss", void 0);
    __decorate28([Property("Left")], ButtonSettings2.prototype, "iconPosition", void 0);
    __decorate28([Property(false)], ButtonSettings2.prototype, "isPrimary", void 0);
    return ButtonSettings2;
  }(ChildProperty)
);
var TooltipSettings = (
  /** @class */
  function(_super) {
    __extends30(TooltipSettings2, _super);
    function TooltipSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate28([Property("Start listening")], TooltipSettings2.prototype, "content", void 0);
    __decorate28([Property("Stop listening")], TooltipSettings2.prototype, "stopContent", void 0);
    __decorate28([Property("TopCenter")], TooltipSettings2.prototype, "position", void 0);
    return TooltipSettings2;
  }(ChildProperty)
);
var SpeechToTextState;
(function(SpeechToTextState2) {
  SpeechToTextState2["Inactive"] = "Inactive";
  SpeechToTextState2["Listening"] = "Listening";
  SpeechToTextState2["Stopped"] = "Stopped";
})(SpeechToTextState || (SpeechToTextState = {}));
var SpeechToText = (
  /** @class */
  function(_super) {
    __extends30(SpeechToText2, _super);
    function SpeechToText2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.fullTranscript = "";
      _this.isClicked = false;
      _this.isUserInteracted = false;
      _this.hasStarted = false;
      return _this;
    }
    SpeechToText2.prototype.preRender = function() {
      if (!this.element.id) {
        this.element.id = getUniqueID("e-" + this.getModuleName());
      }
    };
    SpeechToText2.prototype.getDirective = function() {
      return "EJS-SPEECHTOTEXT";
    };
    SpeechToText2.prototype.getModuleName = function() {
      return "speech-to-text";
    };
    SpeechToText2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    SpeechToText2.prototype.render = function() {
      this.renderSpeechToText();
      this.initializeSpeechRecognition();
      if (!isNullOrUndefined(this.listeningState)) {
        this.handleStateChange();
      }
      this.wireEvents();
    };
    SpeechToText2.prototype.initializeLocale = function() {
      this.l10n = new L10n(this.getModuleName(), {
        abortedError: "Speech recognition was aborted.",
        audioCaptureError: "No microphone detected. Ensure your microphone is connected.",
        defaultError: "An unknown error occurred.",
        networkError: "Network error occurred. Check your internet connection.",
        noSpeechError: "No speech detected. Please speak into the microphone.",
        notAllowedError: "Microphone access denied. Allow microphone permissions.",
        serviceNotAllowedError: "Speech recognition service is not allowed in this context.",
        unsupportedBrowserError: "The browser does not support the SpeechRecognition API.",
        startAriaLabel: "Press to start speaking and transcribe your words",
        stopAriaLabel: "Press to stop speaking and end transcription",
        startTooltipText: "Start listening",
        stopTooltipText: "Stop listening"
      }, this.locale);
    };
    SpeechToText2.prototype.renderSpeechToText = function() {
      this.initializeLocale();
      var iconCss = !isNullOrUndefined(this.buttonSettings.iconCss) && this.buttonSettings.iconCss !== "" ? this.buttonSettings.iconCss : "e-icons e-listen-icon";
      this.buttonInst = new Button({
        iconCss,
        isPrimary: this.buttonSettings.isPrimary,
        cssClass: this.updateButtonCssClass(),
        disabled: this.disabled,
        content: this.buttonSettings.content,
        iconPosition: this.buttonSettings.iconPosition,
        enableRtl: this.enableRtl
      });
      this.buttonInst.appendTo(this.element);
      this.updateTooltip();
      this.updateCssClass(this.cssClass, "");
      this.updateAriaLabel();
      if (!isNullOrUndefined(this.htmlAttributes)) {
        this.addHtmlAttributes(this.htmlAttributes);
      }
    };
    SpeechToText2.prototype.updateAriaLabel = function() {
      var ariaLabel;
      if (this.htmlAttributes && this.htmlAttributes["aria-label"]) {
        ariaLabel = this.htmlAttributes["aria-label"];
      } else {
        ariaLabel = this.micOn ? this.l10n.getConstant("stopAriaLabel") : this.l10n.getConstant("startAriaLabel");
      }
      this.element.setAttribute("aria-label", ariaLabel);
    };
    SpeechToText2.prototype.updateCssClass = function(newClass, oldClass) {
      if (oldClass) {
        removeClass([this.element], oldClass.trim().split(" "));
      }
      if (newClass) {
        addClass([this.element], newClass.trim().split(" "));
      }
    };
    SpeechToText2.prototype.updateButtonCssClass = function() {
      var content = this.isClicked ? this.buttonSettings.stopContent : this.buttonSettings.content;
      var cssClass2;
      if (content === "") {
        cssClass2 = "e-round";
      }
      if (this.micOn) {
        cssClass2 += " e-listening-state";
      }
      return cssClass2;
    };
    SpeechToText2.prototype.updateTooltip = function() {
      if (this.showTooltip) {
        if (this.tooltipSettings) {
          if (this.tooltipSettings.content === "Start listening") {
            this.tooltipSettings.content = this.l10n.getConstant("startTooltipText");
          }
          if (this.tooltipSettings.stopContent === "Stop listening") {
            this.tooltipSettings.stopContent = this.l10n.getConstant("stopTooltipText");
          }
        }
        this.tooltipInst = new Tooltip({
          content: this.hasStarted ? this.tooltipSettings.stopContent : this.tooltipSettings.content,
          position: this.tooltipSettings.position,
          windowCollision: true,
          cssClass: this.cssClass ? "e-speech-to-text-tooltip " + this.cssClass : "e-speech-to-text-tooltip",
          opensOn: "Hover",
          enableRtl: this.enableRtl
        });
        this.tooltipInst.appendTo(this.element);
      } else {
        if (!isNullOrUndefined(this.tooltipInst)) {
          this.tooltipInst.destroy();
          this.tooltipInst = null;
        }
      }
    };
    SpeechToText2.prototype.handleStateChange = function() {
      if (this.disabled) {
        return;
      }
      if (this.listeningState === SpeechToTextState.Listening) {
        this.micOn = true;
        this.startSpeechRecognition();
      } else if (this.listeningState === SpeechToTextState.Inactive || this.listeningState === SpeechToTextState.Stopped) {
        if (this.micOn) {
          this.micOn = false;
          this.stopSpeechRecognition();
        } else {
          var prevOnChange = this.isProtectedOnChange;
          this.isProtectedOnChange = true;
          this.listeningState = SpeechToTextState.Inactive;
          this.isProtectedOnChange = prevOnChange;
        }
      }
    };
    SpeechToText2.prototype.addHtmlAttributes = function(attrs) {
      if (attrs) {
        for (var attr in attrs) {
          if (Object.prototype.hasOwnProperty.call(attrs, attr)) {
            this.element.setAttribute(attr, attrs[attr]);
          }
        }
      }
    };
    SpeechToText2.prototype.removeHtmlAttributes = function(attrs) {
      if (attrs) {
        for (var attr in attrs) {
          if (Object.prototype.hasOwnProperty.call(attrs, attr)) {
            this.element.removeAttribute(attr);
          }
        }
      }
    };
    SpeechToText2.prototype.wireEvents = function() {
      EventHandler.add(this.element, "click", this.handleButtonClick, this);
    };
    SpeechToText2.prototype.unWireEvents = function() {
      EventHandler.remove(this.element, "click", this.handleButtonClick);
    };
    SpeechToText2.prototype.handleButtonClick = function(event2) {
      this.isUserInteracted = true;
      this.micOn = !this.micOn;
      if (this.micOn) {
        this.startSpeechRecognition(event2);
      } else {
        this.stopSpeechRecognition(event2);
      }
    };
    SpeechToText2.prototype.triggerUnSupportedError = function() {
      var eventArgs = {
        error: "unsupported-browser",
        errorMessage: this.l10n.getConstant("unsupportedBrowserError")
      };
      this.trigger("onError", eventArgs);
    };
    SpeechToText2.prototype.initializeSpeechRecognition = function() {
      var _this = this;
      var windowInst = window;
      var SpeechRecognition = windowInst.SpeechRecognition || windowInst.webkitSpeechRecognition;
      if (!SpeechRecognition) {
        this.triggerUnSupportedError();
        return;
      }
      this.recognition = new SpeechRecognition();
      this.recognition.continuous = true;
      this.recognition.lang = this.lang;
      this.recognition.interimResults = this.allowInterimResults;
      this.recognition.onstart = function(event2) {
        var prevOnChange = _this.isProtectedOnChange;
        _this.isProtectedOnChange = true;
        _this.transcript = _this.fullTranscript = "";
        _this.isProtectedOnChange = prevOnChange;
        var eventArgs = {
          cancel: false,
          listeningState: SpeechToTextState.Listening,
          event: event2,
          isInteracted: _this.isUserInteracted
        };
        _this.trigger("onStart", eventArgs, function() {
          if (!eventArgs.cancel) {
            _this.handleStartRecognition();
          } else {
            _this.recognition.abort();
            _this.micOn = false;
          }
        });
      };
      this.recognition.onend = function(event2) {
        if (_this.hasStarted) {
          _this.micOn = false;
          _this.handleStopRecognition(event2);
        }
      };
      this.recognition.onerror = function(event2) {
        var errorMessage = "";
        switch (event2.error) {
          case "not-allowed":
            errorMessage = _this.l10n.getConstant("notAllowedError");
            break;
          case "audio-capture":
            errorMessage = _this.l10n.getConstant("audioCaptureError");
            break;
          case "network":
            errorMessage = _this.l10n.getConstant("networkError");
            break;
          case "no-speech":
            errorMessage = _this.l10n.getConstant("noSpeechError");
            break;
          case "aborted":
            errorMessage = _this.l10n.getConstant("abortedError");
            break;
          case "service-not-allowed":
            errorMessage = _this.l10n.getConstant("serviceNotAllowedError");
            break;
          default:
            errorMessage = _this.l10n.getConstant("defaultError");
        }
        var eventArgs = {
          event: event2,
          error: event2.error,
          errorMessage
        };
        _this.trigger("onError", eventArgs);
        _this.isUserInteracted = false;
      };
      this.recognition.onresult = function(event2) {
        var result = event2.results[event2.resultIndex];
        var interimTranscript = "";
        var prevOnChange = _this.isProtectedOnChange;
        _this.isProtectedOnChange = true;
        if (result.isFinal) {
          _this.fullTranscript += result[0].transcript;
          _this.transcript = _this.fullTranscript;
        } else {
          interimTranscript += result[0].transcript;
          _this.transcript = _this.fullTranscript + interimTranscript;
        }
        var eventArgs = {
          event: event2,
          transcript: _this.transcript,
          isInterimResult: !result.isFinal
        };
        _this.trigger("transcriptChanged", eventArgs, function() {
          if (eventArgs.transcript !== _this.transcript) {
            var prevOnChange_1 = _this.isProtectedOnChange;
            _this.isProtectedOnChange = true;
            _this.transcript = _this.fullTranscript = eventArgs.transcript;
            _this.isProtectedOnChange = prevOnChange_1;
          }
        });
        _this.isProtectedOnChange = prevOnChange;
      };
    };
    SpeechToText2.prototype.handleStartRecognition = function() {
      var prevOnChange = this.isProtectedOnChange;
      this.isProtectedOnChange = true;
      this.hasStarted = true;
      this.listeningState = SpeechToTextState.Listening;
      if (!isNullOrUndefined(this.tooltipInst)) {
        this.tooltipInst.content = this.tooltipSettings.stopContent;
      }
      this.updateAriaLabel();
      this.isClicked = true;
      this.buttonInst.cssClass = this.updateButtonCssClass();
      this.buttonInst.content = this.buttonSettings.stopContent;
      var iconCss = !isNullOrUndefined(this.buttonSettings.stopIconCss) && this.buttonSettings.stopIconCss !== "" ? this.buttonSettings.stopIconCss : "e-icons e-listen-stop";
      this.buttonInst.iconCss = iconCss;
      this.isProtectedOnChange = prevOnChange;
    };
    SpeechToText2.prototype.triggerUnSupportedStart = function(event2) {
      var _this = this;
      var prevOnChange = this.isProtectedOnChange;
      this.isProtectedOnChange = true;
      this.transcript = "";
      this.isProtectedOnChange = prevOnChange;
      var eventArgs = {
        cancel: false,
        listeningState: SpeechToTextState.Listening,
        event: event2,
        isInteracted: this.isUserInteracted
      };
      this.trigger("onStart", eventArgs, function() {
        if (!eventArgs.cancel) {
          _this.handleStartRecognition();
        }
      });
    };
    SpeechToText2.prototype.startSpeechRecognition = function(event2) {
      if (this.hasStarted) {
        return;
      }
      if (this.recognition) {
        this.recognition.start();
      } else {
        this.triggerUnSupportedStart(event2);
      }
    };
    SpeechToText2.prototype.stopSpeechRecognition = function(event2) {
      if (this.recognition) {
        this.recognition.stop();
      } else {
        this.handleStopRecognition(event2);
      }
    };
    SpeechToText2.prototype.handleStopRecognition = function(event2) {
      if (!this.hasStarted) {
        return;
      }
      var prevOnChange = this.isProtectedOnChange;
      this.isProtectedOnChange = true;
      this.listeningState = SpeechToTextState.Stopped;
      if (!isNullOrUndefined(this.tooltipInst)) {
        this.tooltipInst.content = this.tooltipSettings.content;
      }
      this.updateAriaLabel();
      this.isClicked = false;
      this.buttonInst.cssClass = this.updateButtonCssClass();
      this.buttonInst.content = this.buttonSettings.content;
      var eventArgs = {
        listeningState: SpeechToTextState.Stopped,
        event: event2,
        isInteracted: this.isUserInteracted
      };
      this.trigger("onStop", eventArgs);
      this.listeningState = SpeechToTextState.Inactive;
      var iconCss = !isNullOrUndefined(this.buttonSettings.iconCss) && this.buttonSettings.iconCss !== "" ? this.buttonSettings.iconCss : "e-icons e-listen-icon";
      this.buttonInst.iconCss = iconCss;
      this.hasStarted = false;
      this.isProtectedOnChange = prevOnChange;
    };
    SpeechToText2.prototype.buttonSettingsChanges = function(oldModel, newModel) {
      if (oldModel.content !== newModel.content || oldModel.stopContent !== newModel.stopContent) {
        this.buttonInst.content = this.hasStarted ? this.buttonSettings.stopContent : this.buttonSettings.content;
        this.buttonInst.cssClass = this.updateButtonCssClass();
      }
      if (oldModel.iconCss !== newModel.iconCss || oldModel.stopIconCss !== newModel.stopIconCss) {
        var iconCss = !isNullOrUndefined(this.buttonSettings.iconCss) && this.buttonSettings.iconCss !== "" ? this.buttonSettings.iconCss : "e-icons e-listen-icon";
        var stopIconCss = !isNullOrUndefined(this.buttonSettings.stopIconCss) && this.buttonSettings.stopIconCss !== "" ? this.buttonSettings.stopIconCss : "e-icons e-listen-stop";
        this.buttonInst.iconCss = this.hasStarted ? stopIconCss : iconCss;
      }
      if (oldModel.iconPosition !== newModel.iconPosition) {
        this.buttonInst.iconPosition = this.buttonSettings.iconPosition;
      }
      if (oldModel.isPrimary !== newModel.isPrimary) {
        this.buttonInst.isPrimary = this.buttonSettings.isPrimary;
      }
    };
    SpeechToText2.prototype.destroyAndNullify = function(obj) {
      if (obj) {
        obj.destroy();
        obj = null;
      }
    };
    SpeechToText2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.unWireEvents();
      this.destroyAndNullify(this.buttonInst);
      this.destroyAndNullify(this.tooltipInst);
      this.recognition = null;
      this.micOn = null;
      this.htmlAttributes = this.tooltipSettings = this.buttonSettings = null;
      this.element.classList.remove("e-rtl");
    };
    SpeechToText2.prototype.startListening = function() {
      if (!this.disabled && !this.isClicked) {
        this.isUserInteracted = false;
        this.micOn = true;
        this.startSpeechRecognition();
      }
    };
    SpeechToText2.prototype.stopListening = function() {
      if (!this.disabled && this.isClicked) {
        this.isUserInteracted = false;
        this.micOn = false;
        this.stopSpeechRecognition();
      }
    };
    SpeechToText2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "lang":
            if (this.recognition) {
              this.recognition.lang = this.lang;
            }
            break;
          case "allowInterimResults":
            if (this.recognition) {
              this.recognition.interimResults = this.allowInterimResults;
            }
            break;
          case "buttonSettings":
            this.buttonSettingsChanges(oldProp.buttonSettings, newProp.buttonSettings);
            break;
          case "cssClass":
            this.updateCssClass(newProp.cssClass, oldProp.cssClass);
            break;
          case "disabled":
            this.buttonInst.disabled = this.disabled;
            this.handleStateChange();
            break;
          case "htmlAttributes":
            this.removeHtmlAttributes(oldProp.htmlAttributes);
            this.addHtmlAttributes(newProp.htmlAttributes);
            break;
          case "listeningState":
            this.handleStateChange();
            break;
          case "tooltipSettings":
          case "showTooltip":
            this.updateTooltip();
            break;
          case "transcript":
            this.transcript = this.fullTranscript = newProp.transcript;
            break;
          case "enableRtl":
            this.buttonInst.enableRtl = this.tooltipInst.enableRtl = this.enableRtl;
            break;
          case "locale":
            this.l10n.setLocale(this.locale);
            this.updateAriaLabel();
            this.updateTooltip();
            break;
        }
      }
    };
    __decorate28([Property("")], SpeechToText2.prototype, "transcript", void 0);
    __decorate28([Property("")], SpeechToText2.prototype, "lang", void 0);
    __decorate28([Property(true)], SpeechToText2.prototype, "allowInterimResults", void 0);
    __decorate28([Property(true)], SpeechToText2.prototype, "showTooltip", void 0);
    __decorate28([Property("Inactive")], SpeechToText2.prototype, "listeningState", void 0);
    __decorate28([Complex({}, ButtonSettings)], SpeechToText2.prototype, "buttonSettings", void 0);
    __decorate28([Complex({}, TooltipSettings)], SpeechToText2.prototype, "tooltipSettings", void 0);
    __decorate28([Property(false)], SpeechToText2.prototype, "disabled", void 0);
    __decorate28([Property("")], SpeechToText2.prototype, "cssClass", void 0);
    __decorate28([Property({})], SpeechToText2.prototype, "htmlAttributes", void 0);
    __decorate28([Event()], SpeechToText2.prototype, "created", void 0);
    __decorate28([Event()], SpeechToText2.prototype, "onStart", void 0);
    __decorate28([Event()], SpeechToText2.prototype, "onStop", void 0);
    __decorate28([Event()], SpeechToText2.prototype, "onError", void 0);
    __decorate28([Event()], SpeechToText2.prototype, "transcriptChanged", void 0);
    SpeechToText2 = __decorate28([NotifyPropertyChanges], SpeechToText2);
    return SpeechToText2;
  }(Component)
);

// node_modules/@syncfusion/ej2-lists/src/common/list-base.js
var cssClass = {
  li: "e-list-item",
  ul: "e-list-parent e-ul",
  group: "e-list-group-item",
  icon: "e-list-icon",
  text: "e-list-text",
  check: "e-list-check",
  checked: "e-checked",
  selected: "e-selected",
  expanded: "e-expanded",
  textContent: "e-text-content",
  hasChild: "e-has-child",
  level: "e-level",
  url: "e-list-url",
  collapsible: "e-icon-collapsible",
  disabled: "e-disabled",
  image: "e-list-img",
  iconWrapper: "e-icon-wrapper",
  anchorWrap: "e-anchor-wrap",
  navigable: "e-navigable"
};
var ListBase;
(function(ListBase2) {
  ListBase2.defaultMappedFields = {
    id: "id",
    text: "text",
    url: "url",
    value: "value",
    isChecked: "isChecked",
    enabled: "enabled",
    expanded: "expanded",
    selected: "selected",
    iconCss: "iconCss",
    child: "child",
    isVisible: "isVisible",
    hasChildren: "hasChildren",
    tooltip: "tooltip",
    htmlAttributes: "htmlAttributes",
    urlAttributes: "urlAttributes",
    imageAttributes: "imageAttributes",
    imageUrl: "imageUrl",
    groupBy: null,
    sortBy: null
  };
  var defaultAriaAttributes = {
    level: 1,
    listRole: "presentation",
    itemRole: "presentation",
    groupItemRole: "group",
    itemText: "list-item",
    wrapperRole: "presentation"
  };
  var defaultListBaseOptions = {
    showCheckBox: false,
    showIcon: false,
    enableHtmlSanitizer: false,
    expandCollapse: false,
    fields: ListBase2.defaultMappedFields,
    ariaAttributes: defaultAriaAttributes,
    listClass: "",
    itemClass: "",
    processSubChild: false,
    sortOrder: "None",
    template: null,
    groupTemplate: null,
    headerTemplate: null,
    expandIconClass: "e-icon-collapsible",
    moduleName: "list",
    expandIconPosition: "Right",
    itemNavigable: false
  };
  function createList(createElement2, dataSource, options, isSingleLevel, componentInstance) {
    var curOpt = extend({}, defaultListBaseOptions, options);
    var ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);
    var type = typeofData(dataSource).typeof;
    if (type === "string" || type === "number") {
      return createListFromArray(createElement2, dataSource, isSingleLevel, options, componentInstance);
    } else {
      return createListFromJson(createElement2, dataSource, options, ariaAttributes.level, isSingleLevel, componentInstance);
    }
  }
  ListBase2.createList = createList;
  function createListFromArray(createElement2, dataSource, isSingleLevel, options, componentInstance) {
    var subChild = createListItemFromArray(createElement2, dataSource, isSingleLevel, options, componentInstance);
    return generateUL(createElement2, subChild, null, options);
  }
  ListBase2.createListFromArray = createListFromArray;
  function createListItemFromArray(createElement2, dataSource, isSingleLevel, options, componentInstance) {
    var subChild = [];
    var curOpt = extend({}, defaultListBaseOptions, options);
    cssClass = getModuleClass(curOpt.moduleName);
    var id = generateId();
    for (var i = 0; i < dataSource.length; i++) {
      if (isNullOrUndefined(dataSource[i])) {
        continue;
      }
      var li = void 0;
      if (curOpt.itemCreating && typeof curOpt.itemCreating === "function") {
        var curData = {
          dataSource,
          curData: dataSource[i],
          text: dataSource[i],
          options: curOpt
        };
        curOpt.itemCreating(curData);
      }
      if (isSingleLevel) {
        li = generateSingleLevelLI(createElement2, dataSource[i], void 0, null, null, [], null, id, i, options);
      } else {
        li = generateLI(createElement2, dataSource[i], void 0, null, null, options, componentInstance);
      }
      if (curOpt.itemCreated && typeof curOpt.itemCreated === "function") {
        var curData = {
          dataSource,
          curData: dataSource[i],
          text: dataSource[i],
          item: li,
          options: curOpt
        };
        curOpt.itemCreated(curData);
      }
      subChild.push(li);
    }
    return subChild;
  }
  ListBase2.createListItemFromArray = createListItemFromArray;
  function createListItemFromJson(createElement2, dataSource, options, level, isSingleLevel, componentInstance) {
    var curOpt = extend({}, defaultListBaseOptions, options);
    cssClass = getModuleClass(curOpt.moduleName);
    var fields = componentInstance && (componentInstance.getModuleName() === "listview" || componentInstance.getModuleName() === "multiselect") ? curOpt.fields : extend({}, ListBase2.defaultMappedFields, curOpt.fields);
    var ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);
    var id;
    var checkboxElement = [];
    if (level) {
      ariaAttributes.level = level;
    }
    var child = [];
    var li;
    var anchorElement;
    if (dataSource && dataSource.length && !isNullOrUndefined(typeofData(dataSource).item) && !Object.prototype.hasOwnProperty.call(typeofData(dataSource).item, fields.id)) {
      id = generateId();
    }
    for (var i = 0; i < dataSource.length; i++) {
      var fieldData = getFieldValues(dataSource[i], fields);
      if (isNullOrUndefined(dataSource[i])) {
        continue;
      }
      if (curOpt.itemCreating && typeof curOpt.itemCreating === "function") {
        var curData = {
          dataSource,
          curData: dataSource[i],
          text: fieldData[fields.text],
          options: curOpt,
          fields
        };
        curOpt.itemCreating(curData);
      }
      var curItem = dataSource[i];
      if (curOpt.itemCreating && typeof curOpt.itemCreating === "function") {
        fieldData = getFieldValues(dataSource[i], fields);
      }
      if (Object.prototype.hasOwnProperty.call(fieldData, fields.id) && !isNullOrUndefined(fieldData[fields.id])) {
        id = fieldData[fields.id];
      }
      var innerEle = [];
      if (curOpt.showCheckBox) {
        if (curOpt.itemNavigable && (fieldData[fields.url] || fieldData[fields.urlAttributes])) {
          checkboxElement.push(createElement2("input", {
            className: cssClass.check,
            attrs: {
              type: "checkbox"
            }
          }));
        } else {
          innerEle.push(createElement2("input", {
            className: cssClass.check,
            attrs: {
              type: "checkbox"
            }
          }));
        }
      }
      if (isSingleLevel === true) {
        if (curOpt.showIcon && Object.prototype.hasOwnProperty.call(fieldData, fields.iconCss) && !isNullOrUndefined(fieldData[fields.iconCss])) {
          innerEle.push(createElement2("span", {
            className: cssClass.icon + " " + fieldData[fields.iconCss]
          }));
        }
        li = generateSingleLevelLI(createElement2, curItem, fieldData, fields, curOpt.itemClass, innerEle, Object.prototype.hasOwnProperty.call(curItem, "isHeader") && curItem.isHeader ? true : false, id, i, options);
        anchorElement = li.querySelector("." + cssClass.anchorWrap);
        if (Object.prototype.hasOwnProperty.call(fieldData, fields.tooltip)) {
          var tooltipText = fieldData[fields.tooltip];
          if (options && options.enableHtmlSanitizer) {
            tooltipText = SanitizeHtmlHelper.sanitize(tooltipText);
          } else {
            var tooltipTextElement = createElement2("span", {
              innerHTML: tooltipText
            });
            tooltipText = tooltipTextElement.innerText;
            tooltipTextElement = null;
          }
          li.setAttribute("title", tooltipText);
        }
        if (curOpt.itemNavigable && checkboxElement.length) {
          prepend(checkboxElement, li.firstElementChild);
        }
      } else {
        li = generateLI(createElement2, curItem, fieldData, fields, curOpt.itemClass, options, componentInstance);
        li.classList.add(cssClass.level + "-" + ariaAttributes.level);
        li.setAttribute("aria-level", ariaAttributes.level.toString());
        if (ariaAttributes.groupItemRole === "presentation" || ariaAttributes.itemRole === "presentation") {
          li.removeAttribute("aria-level");
        }
        anchorElement = li.querySelector("." + cssClass.anchorWrap);
        if (Object.prototype.hasOwnProperty.call(fieldData, fields.tooltip)) {
          var tooltipText = fieldData[fields.tooltip];
          if (options && options.enableHtmlSanitizer) {
            tooltipText = SanitizeHtmlHelper.sanitize(tooltipText);
          } else {
            var tooltipTextElement = createElement2("span", {
              innerHTML: tooltipText
            });
            tooltipText = tooltipTextElement.innerText;
            tooltipTextElement = null;
          }
          li.setAttribute("title", tooltipText);
        }
        if (Object.prototype.hasOwnProperty.call(fieldData, fields.htmlAttributes) && fieldData[fields.htmlAttributes]) {
          var htmlAttributes = fieldData[fields.htmlAttributes];
          if ("class" in htmlAttributes && typeof htmlAttributes["class"] === "string" && htmlAttributes["class"].trim() === "") {
            delete htmlAttributes["class"];
          }
          setAttribute(li, htmlAttributes);
        }
        if (Object.prototype.hasOwnProperty.call(fieldData, fields.enabled) && fieldData[fields.enabled] === false) {
          li.classList.add(cssClass.disabled);
        }
        if (Object.prototype.hasOwnProperty.call(fieldData, fields.isVisible) && fieldData[fields.isVisible] === false) {
          li.style.display = "none";
        }
        if (Object.prototype.hasOwnProperty.call(fieldData, fields.imageUrl) && !isNullOrUndefined(fieldData[fields.imageUrl]) && !curOpt.template) {
          var attr = {
            src: fieldData[fields.imageUrl],
            alt: !isNullOrUndefined(fieldData.name) ? "Displaying " + fieldData.name + " Image" : "Displaying Image"
          };
          merge(attr, fieldData[fields.imageAttributes]);
          var imageElemnt = createElement2("img", {
            className: cssClass.image,
            attrs: attr
          });
          if (anchorElement) {
            anchorElement.insertAdjacentElement("afterbegin", imageElemnt);
          } else {
            prepend([imageElemnt], li.firstElementChild);
          }
        }
        if (curOpt.showIcon && Object.prototype.hasOwnProperty.call(fieldData, fields.iconCss) && !isNullOrUndefined(fieldData[fields.iconCss]) && !curOpt.template) {
          var iconElement = createElement2("div", {
            className: cssClass.icon + " " + fieldData[fields.iconCss]
          });
          if (anchorElement) {
            anchorElement.insertAdjacentElement("afterbegin", iconElement);
          } else {
            prepend([iconElement], li.firstElementChild);
          }
        }
        if (innerEle.length) {
          prepend(innerEle, li.firstElementChild);
        }
        if (curOpt.itemNavigable && checkboxElement.length) {
          prepend(checkboxElement, li.firstElementChild);
        }
        processSubChild(createElement2, fieldData, fields, dataSource, curOpt, li, ariaAttributes.level);
      }
      if (anchorElement) {
        addClass([li], [cssClass.navigable]);
      }
      if (curOpt.itemCreated && typeof curOpt.itemCreated === "function") {
        var curData = {
          dataSource,
          curData: dataSource[i],
          text: fieldData[fields.text],
          item: li,
          options: curOpt,
          fields
        };
        curOpt.itemCreated(curData);
      }
      checkboxElement = [];
      child.push(li);
    }
    return child;
  }
  ListBase2.createListItemFromJson = createListItemFromJson;
  function createListFromJson(createElement2, dataSource, options, level, isSingleLevel, componentInstance) {
    var curOpt = extend({}, defaultListBaseOptions, options);
    var li = createListItemFromJson(createElement2, dataSource, options, level, isSingleLevel, componentInstance);
    return generateUL(createElement2, li, curOpt.listClass, options);
  }
  ListBase2.createListFromJson = createListFromJson;
  function getSiblingLI(elementArray, element2, isPrevious) {
    cssClass = getModuleClass(defaultListBaseOptions.moduleName);
    if (!elementArray || !elementArray.length) {
      return void 0;
    }
    var siblingLI;
    var liIndex;
    var liCollections = Array.prototype.slice.call(elementArray);
    if (element2) {
      liIndex = indexOf(element2, liCollections);
    } else {
      liIndex = isPrevious === true ? liCollections.length : -1;
    }
    siblingLI = liCollections[liIndex + (isPrevious === true ? -1 : 1)];
    while (siblingLI && (!isVisible(siblingLI) || siblingLI.classList.contains(cssClass.disabled))) {
      liIndex = liIndex + (isPrevious === true ? -1 : 1);
      siblingLI = liCollections[liIndex];
    }
    return siblingLI;
  }
  ListBase2.getSiblingLI = getSiblingLI;
  function indexOf(item, elementArray) {
    if (!elementArray || !item) {
      return void 0;
    } else {
      var liCollections = elementArray;
      liCollections = Array.prototype.slice.call(elementArray);
      return liCollections.indexOf(item);
    }
  }
  ListBase2.indexOf = indexOf;
  function groupDataSource(dataSource, fields, sortOrder) {
    if (sortOrder === void 0) {
      sortOrder = "None";
    }
    var curFields = extend({}, ListBase2.defaultMappedFields, fields);
    var cusQuery = new Query().group(curFields.groupBy);
    cusQuery = addSorting(sortOrder, "key", cusQuery);
    var ds = getDataSource(dataSource, cusQuery);
    dataSource = [];
    for (var j = 0; j < ds.length; j++) {
      var itemObj = ds[j].items;
      var grpItem = {};
      var hdr = "isHeader";
      grpItem[curFields.text] = ds[j].key;
      grpItem["" + hdr] = true;
      var newtext = curFields.text;
      if (newtext === "id") {
        newtext = "text";
        grpItem["" + newtext] = ds[j].key;
      }
      grpItem._id = "group-list-item-" + (ds[j].key ? ds[j].key.toString().trim() : "undefined");
      grpItem.items = itemObj;
      dataSource.push(grpItem);
      for (var k = 0; k < itemObj.length; k++) {
        dataSource.push(itemObj[k]);
      }
    }
    return dataSource;
  }
  ListBase2.groupDataSource = groupDataSource;
  function addSorting(sortOrder, sortBy, query) {
    if (query === void 0) {
      query = new Query();
    }
    if (sortOrder === "Ascending") {
      query.sortBy(sortBy, "ascending", true);
    } else if (sortOrder === "Descending") {
      query.sortBy(sortBy, "descending", true);
    } else {
      for (var i = 0; i < query.queries.length; i++) {
        if (query.queries[i].fn === "onSortBy") {
          query.queries.splice(i, 1);
        }
      }
    }
    return query;
  }
  ListBase2.addSorting = addSorting;
  function getDataSource(dataSource, query) {
    return new DataManager(dataSource).executeLocal(query);
  }
  ListBase2.getDataSource = getDataSource;
  function createJsonFromElement(element2, options) {
    var curOpt = extend({}, defaultListBaseOptions, options);
    var fields = extend({}, ListBase2.defaultMappedFields, curOpt.fields);
    var curEle = element2.cloneNode(true);
    var jsonAr = [];
    curEle.classList.add("json-parent");
    var childs = curEle.querySelectorAll(".json-parent>li");
    curEle.classList.remove("json-parent");
    for (var i = 0; i < childs.length; i++) {
      var li = childs[i];
      var anchor = li.querySelector("a");
      var ul = li.querySelector("ul");
      var json = {};
      var childNodes = anchor ? anchor.childNodes : li.childNodes;
      var keys = Object.keys(childNodes);
      for (var i_1 = 0; i_1 < childNodes.length; i_1++) {
        if (!childNodes[Number(keys[i_1])].hasChildNodes()) {
          json[fields.text] = childNodes[Number(keys[i_1])].textContent;
        }
      }
      var attributes_1 = getAllAttributes(li);
      if (attributes_1.id) {
        json[fields.id] = attributes_1.id;
        delete attributes_1.id;
      } else {
        json[fields.id] = generateId();
      }
      if (Object.keys(attributes_1).length) {
        json[fields.htmlAttributes] = attributes_1;
      }
      if (anchor) {
        attributes_1 = getAllAttributes(anchor);
        if (Object.keys(attributes_1).length) {
          json[fields.urlAttributes] = attributes_1;
        }
      }
      if (ul) {
        json[fields.child] = createJsonFromElement(ul, options);
      }
      jsonAr.push(json);
    }
    return jsonAr;
  }
  ListBase2.createJsonFromElement = createJsonFromElement;
  function typeofData(data) {
    var match = {
      typeof: null,
      item: null
    };
    for (var i = 0; i < data.length; i++) {
      if (!isNullOrUndefined(data[i])) {
        return match = {
          typeof: typeof data[i],
          item: data[i]
        };
      }
    }
    return match;
  }
  function setAttribute(element2, elementAttributes) {
    var attr = {};
    merge(attr, elementAttributes);
    if (attr.class) {
      addClass([element2], attr.class.split(" "));
      delete attr.class;
    }
    attributes(element2, attr);
  }
  function getAllAttributes(element2) {
    var attributes2 = {};
    var attr = element2.attributes;
    for (var index = 0; index < attr.length; index++) {
      attributes2[attr[index].nodeName] = attr[index].nodeValue;
    }
    return attributes2;
  }
  function renderContentTemplate(createElement2, template, dataSource, fields, options, componentInstance) {
    cssClass = getModuleClass(defaultListBaseOptions.moduleName);
    var ulElement = createElement2("ul", {
      className: cssClass.ul,
      attrs: {
        role: "presentation"
      }
    });
    var curOpt = extend({}, defaultListBaseOptions, options);
    var curFields = extend({}, ListBase2.defaultMappedFields, fields);
    var compiledString = compileTemplate(template);
    var liCollection = [];
    var value;
    var id = generateId();
    for (var i = 0; i < dataSource.length; i++) {
      var fieldData = getFieldValues(dataSource[i], curFields);
      var curItem = dataSource[i];
      var isHeader = curItem.isHeader;
      if (typeof dataSource[i] === "string" || typeof dataSource[i] === "number") {
        value = curItem;
      } else {
        value = fieldData[curFields.value];
      }
      if (curOpt.itemCreating && typeof curOpt.itemCreating === "function") {
        var curData = {
          dataSource,
          curData: curItem,
          text: value,
          options: curOpt,
          fields: curFields
        };
        curOpt.itemCreating(curData);
      }
      if (curOpt.itemCreating && typeof curOpt.itemCreating === "function") {
        fieldData = getFieldValues(dataSource[i], curFields);
        if (typeof dataSource[i] === "string" || typeof dataSource[i] === "number") {
          value = curItem;
        } else {
          value = fieldData[curFields.value];
        }
      }
      var li = createElement2("li", {
        id: id + "-" + i,
        className: isHeader ? cssClass.group : cssClass.li,
        attrs: {
          role: "presentation"
        }
      });
      if (isHeader) {
        if (typeof dataSource[i] === "string" || typeof dataSource[i] === "number") {
          li.innerText = curItem;
        } else {
          li.innerText = fieldData[curFields.text];
        }
      } else {
        var currentID = isHeader ? curOpt.groupTemplateID : curOpt.templateID;
        if (isHeader) {
          if (componentInstance && componentInstance.getModuleName() !== "listview") {
            var compiledElement = compiledString(curItem, componentInstance, "headerTemplate", currentID, !!curOpt.isStringTemplate, null, li);
            if (compiledElement) {
              append(compiledElement, li);
            }
          } else {
            append(compiledString(curItem, componentInstance, "headerTemplate", currentID, !!curOpt.isStringTemplate), li);
          }
        } else {
          if (componentInstance && componentInstance.getModuleName() !== "listview") {
            var compiledElement = compiledString(curItem, componentInstance, "template", currentID, !!curOpt.isStringTemplate, null, li);
            if (compiledElement) {
              append(compiledElement, li);
            }
          } else {
            append(compiledString(curItem, componentInstance, "template", currentID, !!curOpt.isStringTemplate), li);
          }
        }
        li.setAttribute("data-value", isNullOrUndefined(value) ? "null" : value);
        li.setAttribute("role", "option");
      }
      if (curOpt.itemCreated && typeof curOpt.itemCreated === "function") {
        var curData = {
          dataSource,
          curData: curItem,
          text: value,
          item: li,
          options: curOpt,
          fields: curFields
        };
        curOpt.itemCreated(curData);
      }
      liCollection.push(li);
    }
    append(liCollection, ulElement);
    return ulElement;
  }
  ListBase2.renderContentTemplate = renderContentTemplate;
  function renderGroupTemplate(groupTemplate, groupDataSource2, fields, headerItems, options, componentInstance) {
    var compiledString = compileTemplate(groupTemplate);
    var curFields = extend({}, ListBase2.defaultMappedFields, fields);
    var curOpt = extend({}, defaultListBaseOptions, options);
    var category = curFields.groupBy;
    for (var _i = 0, headerItems_1 = headerItems; _i < headerItems_1.length; _i++) {
      var header = headerItems_1[_i];
      var headerData = {};
      headerData["" + category] = header.textContent;
      header.innerHTML = "";
      if (componentInstance && componentInstance.getModuleName() !== "listview") {
        var compiledElement = compiledString(headerData, componentInstance, "groupTemplate", curOpt.groupTemplateID, !!curOpt.isStringTemplate, null, header);
        if (compiledElement) {
          append(compiledElement, header);
        }
      } else {
        append(compiledString(headerData, componentInstance, "groupTemplate", curOpt.groupTemplateID, !!curOpt.isStringTemplate), header);
      }
    }
    return headerItems;
  }
  ListBase2.renderGroupTemplate = renderGroupTemplate;
  function generateId() {
    return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1);
  }
  ListBase2.generateId = generateId;
  function processSubChild(createElement2, fieldData, fields, ds, options, element2, level) {
    var subDS = fieldData[fields.child] || [];
    var hasChildren = fieldData[fields.hasChildren];
    if (subDS.length) {
      hasChildren = true;
      element2.classList.add(cssClass.hasChild);
      if (options.processSubChild) {
        var subLi = createListFromJson(createElement2, subDS, options, ++level);
        element2.appendChild(subLi);
      }
    }
    if (!!options.expandCollapse && hasChildren && !options.template) {
      element2.firstElementChild.classList.add(cssClass.iconWrapper);
      var expandElement = options.expandIconPosition === "Left" ? prepend : append;
      expandElement([createElement2("div", {
        className: "e-icons " + options.expandIconClass
      })], element2.querySelector("." + cssClass.textContent));
    }
  }
  function generateSingleLevelLI(createElement2, item, fieldData, fields, className, innerElements, grpLI, id, index, options) {
    var curOpt = extend({}, defaultListBaseOptions, options);
    var ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);
    var text = item;
    var value = item;
    var dataSource;
    if (typeof item !== "string" && typeof item !== "number" && typeof item !== "boolean") {
      dataSource = item;
      text = typeof fieldData[fields.text] === "boolean" || typeof fieldData[fields.text] === "number" ? fieldData[fields.text] : fieldData[fields.text] || "";
      value = fieldData[fields.value];
    }
    var elementID;
    if (!isNullOrUndefined(dataSource) && !isNullOrUndefined(fieldData[fields.id]) && fieldData[fields.id] !== "") {
      elementID = id;
    } else {
      elementID = id + "-" + index;
    }
    var li = createElement2("li", {
      className: (grpLI === true ? cssClass.group : cssClass.li) + " " + (isNullOrUndefined(className) ? "" : className),
      id: elementID,
      attrs: ariaAttributes.groupItemRole !== "" && ariaAttributes.itemRole !== "" ? {
        role: grpLI === true ? ariaAttributes.groupItemRole : ariaAttributes.itemRole
      } : {}
    });
    if (dataSource && Object.prototype.hasOwnProperty.call(fieldData, fields.enabled) && fieldData[fields.enabled].toString() === "false") {
      li.classList.add(cssClass.disabled);
    }
    if (options && options.enableHtmlSanitizer) {
      text = SanitizeHtmlHelper.sanitize(text);
    }
    if (grpLI) {
      li.innerText = text;
    } else {
      li.setAttribute("data-value", isNullOrUndefined(value) ? "null" : value);
      li.setAttribute("role", "option");
      if (dataSource && Object.prototype.hasOwnProperty.call(fieldData, fields.htmlAttributes) && fieldData[fields.htmlAttributes]) {
        setAttribute(li, fieldData[fields.htmlAttributes]);
      }
      if (innerElements.length && !curOpt.itemNavigable) {
        append(innerElements, li);
      }
      if (dataSource && (fieldData[fields.url] || fieldData[fields.urlAttributes] && fieldData[fields.urlAttributes].href)) {
        li.appendChild(anchorTag(createElement2, dataSource, fields, text, innerElements, curOpt.itemNavigable));
      } else {
        if (innerElements.length && curOpt.itemNavigable) {
          append(innerElements, li);
        }
        li.appendChild(document.createTextNode(text));
      }
    }
    return li;
  }
  function getModuleClass(moduleName) {
    var moduleClass;
    return moduleClass = {
      li: "e-" + moduleName + "-item",
      ul: "e-" + moduleName + "-parent e-ul",
      group: "e-" + moduleName + "-group-item",
      icon: "e-" + moduleName + "-icon",
      text: "e-" + moduleName + "-text",
      check: "e-" + moduleName + "-check",
      checked: "e-checked",
      selected: "e-selected",
      expanded: "e-expanded",
      textContent: "e-text-content",
      hasChild: "e-has-child",
      level: "e-level",
      url: "e-" + moduleName + "-url",
      collapsible: "e-icon-collapsible",
      disabled: "e-disabled",
      image: "e-" + moduleName + "-img",
      iconWrapper: "e-icon-wrapper",
      anchorWrap: "e-anchor-wrap",
      navigable: "e-navigable"
    };
  }
  function anchorTag(createElement2, dataSource, fields, text, innerElements, isFullNavigation) {
    var fieldData = getFieldValues(dataSource, fields);
    var attr = {
      href: fieldData[fields.url]
    };
    if (Object.prototype.hasOwnProperty.call(fieldData, fields.urlAttributes) && fieldData[fields.urlAttributes]) {
      merge(attr, fieldData[fields.urlAttributes]);
      attr.href = fieldData[fields.url] ? fieldData[fields.url] : fieldData[fields.urlAttributes].href;
    }
    var anchorTag2;
    if (!isFullNavigation) {
      anchorTag2 = createElement2("a", {
        className: cssClass.text + " " + cssClass.url,
        innerHTML: text
      });
    } else {
      anchorTag2 = createElement2("a", {
        className: cssClass.text + " " + cssClass.url
      });
      var anchorWrapper = createElement2("div", {
        className: cssClass.anchorWrap
      });
      if (innerElements && innerElements.length) {
        append(innerElements, anchorWrapper);
      }
      anchorWrapper.appendChild(document.createTextNode(text));
      append([anchorWrapper], anchorTag2);
    }
    setAttribute(anchorTag2, attr);
    return anchorTag2;
  }
  function generateLI(createElement2, item, fieldData, fields, className, options, componentInstance) {
    var curOpt = extend({}, defaultListBaseOptions, options);
    var ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);
    var text = item;
    var uID;
    var grpLI;
    var dataSource;
    if (typeof item !== "string" && typeof item !== "number") {
      dataSource = item;
      text = fieldData[fields.text] || "";
      uID = isNullOrUndefined(fieldData["_id"]) ? fieldData[fields.id] : fieldData["_id"];
      grpLI = Object.prototype.hasOwnProperty.call(item, "isHeader") && item.isHeader ? true : false;
    }
    if (options && options.enableHtmlSanitizer) {
      text = SanitizeHtmlHelper.sanitize(text);
    }
    var li = createElement2("li", {
      className: (grpLI === true ? cssClass.group : cssClass.li) + " " + (isNullOrUndefined(className) ? "" : className),
      attrs: ariaAttributes.groupItemRole !== "" && ariaAttributes.itemRole !== "" ? {
        role: grpLI === true ? ariaAttributes.groupItemRole : ariaAttributes.itemRole
      } : {}
    });
    if (!isNullOrUndefined(uID) === true) {
      li.setAttribute("data-uid", uID);
    } else {
      li.setAttribute("data-uid", generateId());
    }
    if (grpLI && options && options.groupTemplate) {
      var compiledString = compileTemplate(options.groupTemplate);
      if (componentInstance && componentInstance.getModuleName() !== "listview") {
        var compiledElement = compiledString(item, componentInstance, "groupTemplate", curOpt.groupTemplateID, !!curOpt.isStringTemplate, null, li);
        if (compiledElement) {
          append(compiledElement, li);
        }
      } else {
        append(compiledString(item, componentInstance, "groupTemplate", curOpt.groupTemplateID, !!curOpt.isStringTemplate), li);
      }
    } else if (!grpLI && options && options.template) {
      var compiledString = compileTemplate(options.template);
      if (componentInstance && componentInstance.getModuleName() !== "listview") {
        var compiledElement = compiledString(item, componentInstance, "template", curOpt.templateID, !!curOpt.isStringTemplate, null, li);
        if (compiledElement) {
          append(compiledElement, li);
        }
      } else {
        append(compiledString(item, componentInstance, "template", curOpt.templateID, !!curOpt.isStringTemplate), li);
      }
    } else {
      var innerDiv = createElement2("div", {
        className: cssClass.textContent,
        attrs: ariaAttributes.wrapperRole !== "" ? {
          role: ariaAttributes.wrapperRole
        } : {}
      });
      if (dataSource && (fieldData[fields.url] || fieldData[fields.urlAttributes] && fieldData[fields.urlAttributes].href)) {
        innerDiv.appendChild(anchorTag(createElement2, dataSource, fields, text, null, curOpt.itemNavigable));
      } else {
        var element2 = createElement2("span", {
          className: cssClass.text,
          attrs: ariaAttributes.itemText !== "" ? {
            role: ariaAttributes.itemText
          } : {}
        });
        if (options && options.enableHtmlSanitizer) {
          element2.innerText = text;
        } else {
          element2.innerHTML = text;
        }
        innerDiv.appendChild(element2);
      }
      li.appendChild(innerDiv);
    }
    return li;
  }
  function generateUL(createElement2, liElement, className, options) {
    var curOpt = extend({}, defaultListBaseOptions, options);
    var ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);
    cssClass = getModuleClass(curOpt.moduleName);
    var ulElement = createElement2("ul", {
      className: cssClass.ul + " " + (isNullOrUndefined(className) ? "" : className),
      attrs: ariaAttributes.listRole !== "" ? {
        role: ariaAttributes.listRole
      } : {}
    });
    append(liElement, ulElement);
    return ulElement;
  }
  ListBase2.generateUL = generateUL;
  function generateIcon(createElement2, liElement, className, options) {
    var curOpt = extend({}, defaultListBaseOptions, options);
    cssClass = getModuleClass(curOpt.moduleName);
    var expandElement = curOpt.expandIconPosition === "Left" ? prepend : append;
    expandElement([createElement2("div", {
      className: "e-icons " + curOpt.expandIconClass + " " + (isNullOrUndefined(className) ? "" : className)
    })], liElement.querySelector("." + cssClass.textContent));
    return liElement;
  }
  ListBase2.generateIcon = generateIcon;
})(ListBase || (ListBase = {}));
function getFieldValues(dataItem, fields) {
  var fieldData = {};
  if (isNullOrUndefined(dataItem) || typeof dataItem === "string" || typeof dataItem === "number" || !isNullOrUndefined(dataItem.isHeader)) {
    return dataItem;
  } else {
    for (var _i = 0, _a = Object.keys(fields); _i < _a.length; _i++) {
      var field = _a[_i];
      var dataField = fields["" + field];
      var value = !isNullOrUndefined(dataField) && typeof dataField === "string" ? getValue(dataField, dataItem) : void 0;
      if (!isNullOrUndefined(value)) {
        fieldData["" + dataField] = value;
      }
    }
  }
  return fieldData;
}
function compileTemplate(template) {
  if (template) {
    try {
      if (typeof template !== "function" && document.querySelector(template)) {
        return compile(document.querySelector(template).innerHTML.trim());
      } else {
        return compile(template);
      }
    } catch (e) {
      return compile(template);
    }
  }
  return void 0;
}

// node_modules/@syncfusion/ej2-lists/src/list-view/list-view.js
var __extends31 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate29 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var effectsConfig = {
  "None": [],
  "SlideLeft": ["SlideRightOut", "SlideLeftOut", "SlideLeftIn", "SlideRightIn"],
  "SlideDown": ["SlideTopOut", "SlideBottomOut", "SlideBottomIn", "SlideTopIn"],
  "Zoom": ["FadeOut", "FadeZoomOut", "FadeZoomIn", "FadeIn"],
  "Fade": ["FadeOut", "FadeOut", "FadeIn", "FadeIn"]
};
var effectsRTLConfig = {
  "None": [],
  "SlideLeft": ["SlideLeftOut", "SlideRightOut", "SlideRightIn", "SlideLeftIn"],
  "SlideDown": ["SlideBottomOut", "SlideTopOut", "SlideTopIn", "SlideBottomIn"],
  "Zoom": ["FadeZoomOut", "FadeOut", "FadeIn", "FadeZoomIn"],
  "Fade": ["FadeOut", "FadeOut", "FadeIn", "FadeIn"]
};
var classNames4 = {
  root: "e-listview",
  hover: "e-hover",
  selected: "e-active",
  focused: "e-focused",
  parentItem: "e-list-parent",
  listItem: "e-list-item",
  listIcon: "e-list-icon",
  textContent: "e-text-content",
  listItemText: "e-list-text",
  groupListItem: "e-list-group-item",
  hasChild: "e-has-child",
  view: "e-view",
  header: "e-list-header",
  headerText: "e-headertext",
  headerTemplateText: "e-headertemplate-text",
  text: "e-text",
  disable: "e-disabled",
  container: "e-list-container",
  icon: "e-icons",
  backIcon: "e-icon-back",
  backButton: "e-back-button",
  checkboxWrapper: "e-checkbox-wrapper",
  checkbox: "e-checkbox",
  checked: "e-check",
  checklist: "e-checklist",
  checkboxIcon: "e-frame",
  checkboxRight: "e-checkbox-right",
  checkboxLeft: "e-checkbox-left",
  listviewCheckbox: "e-listview-checkbox",
  itemCheckList: "e-checklist",
  virtualElementContainer: "e-list-virtualcontainer"
};
var LISTVIEW_TEMPLATE_PROPERTY = "Template";
var LISTVIEW_GROUPTEMPLATE_PROPERTY = "GroupTemplate";
var LISTVIEW_HEADERTEMPLATE_PROPERTY = "HeaderTemplate";
var swipeVelocity = 0.5;
var FieldSettings = (
  /** @class */
  function(_super) {
    __extends31(FieldSettings3, _super);
    function FieldSettings3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate29([Property("id")], FieldSettings3.prototype, "id", void 0);
    __decorate29([Property("text")], FieldSettings3.prototype, "text", void 0);
    __decorate29([Property("isChecked")], FieldSettings3.prototype, "isChecked", void 0);
    __decorate29([Property("isVisible")], FieldSettings3.prototype, "isVisible", void 0);
    __decorate29([Property("enabled")], FieldSettings3.prototype, "enabled", void 0);
    __decorate29([Property("iconCss")], FieldSettings3.prototype, "iconCss", void 0);
    __decorate29([Property("child")], FieldSettings3.prototype, "child", void 0);
    __decorate29([Property("tooltip")], FieldSettings3.prototype, "tooltip", void 0);
    __decorate29([Property("groupBy")], FieldSettings3.prototype, "groupBy", void 0);
    __decorate29([Property("text")], FieldSettings3.prototype, "sortBy", void 0);
    __decorate29([Property("htmlAttributes")], FieldSettings3.prototype, "htmlAttributes", void 0);
    __decorate29([Property("tableName")], FieldSettings3.prototype, "tableName", void 0);
    return FieldSettings3;
  }(ChildProperty)
);
var ListView = (
  /** @class */
  function(_super) {
    __extends31(ListView2, _super);
    function ListView2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.previousSelectedItems = [];
      _this.hiddenItems = [];
      _this.enabledItems = [];
      _this.disabledItems = [];
      return _this;
    }
    ListView2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "htmlAttributes":
            this.setHTMLAttribute();
            break;
          case "cssClass":
            this.setCSSClass(oldProp.cssClass);
            break;
          case "enable":
            this.setEnable();
            break;
          case "width":
          case "height":
            this.setSize();
            break;
          case "enableRtl":
            this.setEnableRTL();
            break;
          case "fields":
            this.listBaseOption.fields = this.fields.properties;
            if (this.enableVirtualization) {
              this.virtualizationModule.reRenderUiVirtualization();
            } else {
              this.reRender();
            }
            break;
          case "headerTitle":
            if (!this.curDSLevel.length) {
              this.header(this.headerTitle, false, "header");
            }
            break;
          case "query":
            if (this.enableVirtualization) {
              this.virtualizationModule.reRenderUiVirtualization();
            } else {
              this.reRender();
            }
            break;
          case "showHeader":
            this.header(this.headerTitle, false, "header");
            break;
          case "enableVirtualization":
            if (!isNullOrUndefined(this.contentContainer)) {
              detach(this.contentContainer);
            }
            this.refresh();
            break;
          case "showCheckBox":
          case "checkBoxPosition":
            if (this.enableVirtualization) {
              this.virtualizationModule.reRenderUiVirtualization();
            } else {
              this.setCheckbox();
            }
            break;
          case "dataSource":
            this.previousScrollTop = this.element.scrollTop;
            if (this.enableVirtualization) {
              this.virtualizationModule.reRenderUiVirtualization();
            } else {
              this.reRender();
            }
            break;
          case "sortOrder":
          case "template":
            if (!this.enableVirtualization) {
              this.refresh();
            }
            break;
          case "showIcon":
            if (this.enableVirtualization) {
              this.virtualizationModule.reRenderUiVirtualization();
            } else {
              this.listBaseOption.showIcon = this.showIcon;
              this.curViewDS = this.getSubDS();
              this.resetCurrentList();
            }
            break;
          default:
            break;
        }
      }
    };
    ListView2.prototype.setHTMLAttribute = function() {
      if (!isNullOrUndefined(this.htmlAttributes) && Object.keys(this.htmlAttributes).length) {
        attributes(this.element, this.htmlAttributes);
      }
    };
    ListView2.prototype.setCSSClass = function(oldCSSClass) {
      if (this.cssClass) {
        addClass([this.element], this.cssClass.split(" ").filter(function(css) {
          return css;
        }));
      }
      if (oldCSSClass) {
        removeClass([this.element], oldCSSClass.split(" ").filter(function(css) {
          return css;
        }));
      }
    };
    ListView2.prototype.setSize = function() {
      this.element.style.height = formatUnit(this.height);
      this.element.style.width = formatUnit(this.width);
      this.isWindow = this.element.clientHeight ? false : true;
    };
    ListView2.prototype.setEnable = function() {
      this.enableElement(this.element, this.enable);
    };
    ListView2.prototype.setEnableRTL = function() {
      if (this.enableRtl) {
        this.element.classList.add("e-rtl");
      } else {
        this.element.classList.remove("e-rtl");
      }
    };
    ListView2.prototype.enableElement = function(element2, isEnabled) {
      if (isEnabled) {
        element2.classList.remove(classNames4.disable);
      } else {
        element2.classList.add(classNames4.disable);
      }
    };
    ListView2.prototype.header = function(text, showBack, prop) {
      if (this.headerEle === void 0 && this.showHeader) {
        this.headerEle = this.createElement("div", {
          className: classNames4.header
        });
        var innerHeaderEle = this.createElement("span", {
          className: classNames4.headerText
        });
        if (this.enableHtmlSanitizer) {
          this.setProperties({
            headerTitle: SanitizeHtmlHelper.sanitize(this.headerTitle)
          }, true);
          innerHeaderEle.innerText = this.headerTitle;
        } else {
          innerHeaderEle.innerHTML = this.headerTitle;
        }
        var textEle = this.createElement("div", {
          className: classNames4.text,
          innerHTML: innerHeaderEle.outerHTML
        });
        var hedBackButton = this.createElement("div", {
          className: classNames4.icon + " " + classNames4.backIcon + " " + classNames4.backButton,
          attrs: {
            style: "display:none;"
          }
        });
        this.headerEle.appendChild(hedBackButton);
        this.headerEle.appendChild(textEle);
        if (this.headerTemplate) {
          var compiledString = compile(this.headerTemplate);
          var headerTemplateEle = this.createElement("div", {
            className: classNames4.headerTemplateText
          });
          var compiledElement = compiledString({}, this, prop, this.LISTVIEW_HEADERTEMPLATE_ID, null, null, this.headerEle);
          if (compiledElement) {
            append(compiledElement, headerTemplateEle);
          }
          append([headerTemplateEle], this.headerEle);
          if (this.isReact) {
            this.renderReactTemplates();
          }
        }
        if (this.headerTemplate && this.headerTitle) {
          textEle.classList.add("header");
        }
        this.element.classList.add("e-has-header");
        prepend([this.headerEle], this.element);
      } else if (this.headerEle) {
        if (this.showHeader) {
          this.headerEle.style.display = "";
          var textEle = this.headerEle.querySelector("." + classNames4.headerText);
          var hedBackButton = this.headerEle.querySelector("." + classNames4.backIcon);
          if (this.enableHtmlSanitizer) {
            text = SanitizeHtmlHelper.sanitize(text);
          }
          textEle.innerHTML = text;
          if (this.headerTemplate && showBack) {
            textEle.parentElement.classList.remove("header");
            this.headerEle.querySelector("." + classNames4.headerTemplateText).classList.add("nested-header");
          }
          if (this.headerTemplate && !showBack) {
            textEle.parentElement.classList.add("header");
            this.headerEle.querySelector("." + classNames4.headerTemplateText).classList.remove("nested-header");
            this.headerEle.querySelector("." + classNames4.headerTemplateText).classList.add("header");
          }
          if (showBack === true) {
            hedBackButton.style.display = "";
          } else {
            hedBackButton.style.display = "none";
          }
        } else {
          this.headerEle.style.display = "none";
        }
      }
    };
    ListView2.prototype.switchView = function(fromView, toView, reverse) {
      var _this = this;
      if (fromView && toView) {
        var fPos_1 = fromView.style.position;
        var overflow_1 = this.element.style.overflow !== "hidden" ? this.element.style.overflow : "";
        fromView.style.position = "absolute";
        fromView.classList.add("e-view");
        var anim = void 0;
        var duration = this.animation.duration;
        if (this.animation.effect) {
          anim = this.enableRtl ? effectsRTLConfig[this.animation.effect] : effectsConfig[this.animation.effect];
        } else {
          var slideLeft = "SlideLeft";
          anim = effectsConfig["" + slideLeft];
          reverse = this.enableRtl;
          duration = 0;
        }
        this.element.style.overflow = "hidden";
        this.aniObj.animate(fromView, {
          name: reverse === true ? anim[0] : anim[1],
          duration: duration === 0 && animationMode === "Enable" ? 400 : duration,
          timingFunction: this.animation.easing,
          end: function() {
            fromView.style.display = "none";
            _this.element.style.overflow = overflow_1;
            fromView.style.position = fPos_1;
            fromView.classList.remove("e-view");
          }
        });
        toView.style.display = "";
        this.aniObj.animate(toView, {
          name: reverse === true ? anim[2] : anim[3],
          duration: duration === 0 && animationMode === "Enable" ? 400 : duration,
          timingFunction: this.animation.easing,
          end: function() {
            _this.trigger("actionComplete");
          }
        });
        this.curUL = toView;
      }
    };
    ListView2.prototype.preRender = function() {
      if (this.template) {
        try {
          if (typeof this.template !== "function" && document.querySelectorAll(this.template).length) {
            this.setProperties({
              template: document.querySelector(this.template).innerHTML.trim()
            }, true);
          }
        } catch (e) {
          compile(this.template);
        }
      }
      this.listBaseOption = {
        template: this.template,
        headerTemplate: this.headerTemplate,
        groupTemplate: this.groupTemplate,
        expandCollapse: true,
        listClass: "",
        ariaAttributes: {
          itemRole: "listitem",
          listRole: "list",
          itemText: "",
          groupItemRole: "presentation",
          wrapperRole: "presentation"
        },
        fields: this.fields.properties,
        sortOrder: this.sortOrder,
        showIcon: this.showIcon,
        itemCreated: this.renderCheckbox.bind(this),
        templateID: "" + this.element.id + LISTVIEW_TEMPLATE_PROPERTY,
        groupTemplateID: "" + this.element.id + LISTVIEW_GROUPTEMPLATE_PROPERTY,
        enableHtmlSanitizer: this.enableHtmlSanitizer
      };
      this.initialization();
    };
    ListView2.prototype.initialization = function() {
      this.curDSLevel = [];
      this.animateOptions = {};
      this.curViewDS = [];
      this.currentLiElements = [];
      this.isNestedList = false;
      this.selectedData = [];
      this.selectedId = this.enablePersistence ? this.selectedId : [];
      this.LISTVIEW_TEMPLATE_ID = "" + this.element.id + LISTVIEW_TEMPLATE_PROPERTY;
      this.LISTVIEW_GROUPTEMPLATE_ID = "" + this.element.id + LISTVIEW_GROUPTEMPLATE_PROPERTY;
      this.LISTVIEW_HEADERTEMPLATE_ID = "" + this.element.id + LISTVIEW_HEADERTEMPLATE_PROPERTY;
      this.aniObj = new Animation(this.animateOptions);
      this.removeElement(this.curUL);
      this.removeElement(this.ulElement);
      this.removeElement(this.headerEle);
      this.removeElement(this.contentContainer);
      this.curUL = this.ulElement = this.liCollection = this.headerEle = this.contentContainer = void 0;
    };
    ListView2.prototype.renderCheckbox = function(args) {
      var _this = this;
      if (args.item.classList.contains(classNames4.hasChild)) {
        this.isNestedList = true;
      }
      if (this.showCheckBox && args.item.classList.contains(classNames4.listItem)) {
        var fieldData_1;
        var checkboxElement = createCheckBox(this.createElement, false, {
          checked: false,
          enableRtl: this.enableRtl,
          cssClass: classNames4.listviewCheckbox
        });
        checkboxElement.setAttribute("role", "checkbox");
        var frameElement_1 = checkboxElement.querySelector("." + classNames4.checkboxIcon);
        args.item.classList.add(classNames4.itemCheckList);
        args.item.firstElementChild.classList.add(classNames4.checkbox);
        if (typeof this.dataSource[0] !== "string" && typeof this.dataSource[0] !== "number") {
          fieldData_1 = getFieldValues(args.curData, this.listBaseOption.fields);
          if (this.enablePersistence && !isNullOrUndefined(this.selectedId)) {
            var index = this.selectedId.findIndex(function(e) {
              return e === fieldData_1[_this.listBaseOption.fields.id].toString();
            });
            if (index !== -1) {
              this.checkInternally(args, checkboxElement);
            }
          } else if (fieldData_1[this.listBaseOption.fields.isChecked]) {
            this.checkInternally(args, checkboxElement);
          }
        } else if ((typeof this.dataSource[0] === "string" || typeof this.dataSource[0] === "number") && this.selectedData.indexOf(args.text) !== -1) {
          this.checkInternally(args, checkboxElement);
        }
        checkboxElement.setAttribute("aria-checked", frameElement_1.classList.contains(classNames4.checked) ? "true" : "false");
        checkboxElement.setAttribute("aria-label", args.text);
        if (this.checkBoxPosition === "Left") {
          checkboxElement.classList.add(classNames4.checkboxLeft);
          args.item.firstElementChild.classList.add(classNames4.checkboxLeft);
          args.item.firstElementChild.insertBefore(checkboxElement, args.item.firstElementChild.childNodes[0]);
        } else {
          checkboxElement.classList.add(classNames4.checkboxRight);
          args.item.firstElementChild.classList.add(classNames4.checkboxRight);
          args.item.firstElementChild.appendChild(checkboxElement);
        }
        this.currentLiElements.push(args.item);
        if (this.checkBoxPosition === "Left") {
          this.virtualCheckBox = args.item.firstElementChild.children[0];
        } else {
          this.virtualCheckBox = args.item.firstElementChild.lastElementChild;
        }
      }
    };
    ListView2.prototype.checkInternally = function(args, checkboxElement) {
      args.item.classList.add(classNames4.selected);
      checkboxElement.querySelector("." + classNames4.checkboxIcon).classList.add(classNames4.checked);
      checkboxElement.setAttribute("aria-checked", "true");
    };
    ListView2.prototype.checkItem = function(item) {
      this.toggleCheckBase(item, true);
    };
    ListView2.prototype.toggleCheckBase = function(item, checked) {
      if (this.showCheckBox) {
        var liElement = item;
        if (item instanceof Object && item.constructor !== HTMLLIElement) {
          liElement = this.getLiFromObjOrElement(item);
        }
        if (!isNullOrUndefined(liElement)) {
          var checkboxIcon = liElement.querySelector("." + classNames4.checkboxIcon);
          if (checked === true) {
            liElement.classList.add(classNames4.selected);
          } else {
            liElement.classList.remove(classNames4.selected);
          }
          if (checked === true) {
            checkboxIcon.classList.add(classNames4.checked);
          } else {
            checkboxIcon.classList.remove(classNames4.checked);
          }
          checkboxIcon.parentElement.setAttribute("aria-checked", checked ? "true" : "false");
        }
        this.setSelectedItemData(liElement);
        this.updateSelectedId();
      }
    };
    ListView2.prototype.uncheckItem = function(item) {
      this.toggleCheckBase(item, false);
    };
    ListView2.prototype.checkAllItems = function() {
      this.toggleAllCheckBase(true);
    };
    ListView2.prototype.uncheckAllItems = function() {
      this.toggleAllCheckBase(false);
    };
    ListView2.prototype.toggleAllCheckBase = function(checked) {
      if (this.showCheckBox) {
        for (var i = 0; i < this.liCollection.length; i++) {
          var checkIcon = this.liCollection[i].querySelector("." + classNames4.checkboxIcon);
          if (checkIcon) {
            if (checked) {
              if (!checkIcon.classList.contains(classNames4.checked)) {
                this.checkItem(this.liCollection[i]);
              }
            } else {
              if (checkIcon.classList.contains(classNames4.checked)) {
                this.uncheckItem(this.liCollection[i]);
              }
            }
          }
        }
        if (this.enableVirtualization) {
          this.virtualizationModule.checkedItem(checked);
        }
        this.updateSelectedId();
      }
    };
    ListView2.prototype.setCheckbox = function() {
      if (this.showCheckBox) {
        var liCollection = Array.prototype.slice.call(this.element.querySelectorAll("." + classNames4.listItem));
        var args = {
          item: void 0,
          curData: void 0,
          dataSource: void 0,
          fields: void 0,
          options: void 0,
          text: ""
        };
        for (var i = 0; i < liCollection.length; i++) {
          var element2 = liCollection[i];
          args.item = element2;
          args.curData = this.getItemData(element2);
          if (element2.querySelector("." + classNames4.checkboxWrapper)) {
            this.removeElement(element2.querySelector("." + classNames4.checkboxWrapper));
          }
          this.renderCheckbox(args);
          if (args.item.classList.contains(classNames4.selected)) {
            this.checkInternally(args, args.item.querySelector("." + classNames4.checkboxWrapper));
          }
        }
      } else {
        var liCollection = Array.prototype.slice.call(this.element.querySelectorAll("." + classNames4.itemCheckList));
        for (var i = 0; i < liCollection.length; i++) {
          var element2 = liCollection[i];
          element2.classList.remove(classNames4.selected);
          element2.firstElementChild.classList.remove(classNames4.checkbox);
          this.removeElement(element2.querySelector("." + classNames4.checkboxWrapper));
        }
        if (this.selectedItems) {
          this.selectedItems.item.classList.add(classNames4.selected);
        }
      }
    };
    ListView2.prototype.refreshItemHeight = function() {
      if (this.virtualizationModule) {
        this.virtualizationModule.refreshItemHeight();
      }
    };
    ListView2.prototype.handleCheckboxState = function(li, checkIcon, checkboxElement, isCheckedBefore, isFocusedBefore, eventArgs, isSetCheckboxLI, textAreaFocus) {
      this.trigger("select", eventArgs, function(observedArgs) {
        if (observedArgs.cancel) {
          if (isSetCheckboxLI ? isCheckedBefore : !isCheckedBefore) {
            checkIcon.classList.add(classNames4.checked);
            li.classList.add(classNames4.selected);
          } else {
            checkIcon.classList.remove(classNames4.checked);
            li.classList.remove(classNames4.selected);
          }
          checkboxElement.setAttribute("aria-checked", isSetCheckboxLI ? isCheckedBefore ? "true" : "false" : isCheckedBefore ? "false" : "true");
          merge(eventArgs, {
            isChecked: checkIcon.classList.contains(classNames4.checked)
          });
          if (isFocusedBefore) {
            li.classList.remove(classNames4.focused);
            if (textAreaFocus) {
              textAreaFocus.classList.remove("e-focused");
            }
          }
        }
      });
    };
    ListView2.prototype.clickHandler = function(e) {
      if (Array.isArray(this.dataSource) && this.dataSource.length === 0) {
        return;
      }
      var target = e.target;
      this.targetElement = target;
      var classList2 = target.classList;
      var closestElement;
      if (classList2.contains(classNames4.backIcon) || classList2.contains(classNames4.headerText)) {
        if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {
          this.uncheckAllItems();
        }
        this.back();
      } else {
        var li = closest(target.parentNode, "." + classNames4.listItem);
        if (li === null) {
          li = target;
        }
        this.removeFocus();
        if (this.enable && this.showCheckBox && this.isValidLI(li)) {
          if (e.target.classList.contains(classNames4.checkboxIcon)) {
            li.classList.add(classNames4.focused);
            if (isNullOrUndefined(li.querySelector("." + classNames4.checked))) {
              var args = {
                curData: void 0,
                dataSource: void 0,
                fields: void 0,
                options: void 0,
                text: void 0,
                item: li
              };
              this.checkInternally(args, args.item.querySelector("." + classNames4.checkboxWrapper));
            } else {
              this.uncheckItem(li);
              li.classList.add(classNames4.focused);
            }
            if (this.enableVirtualization) {
              this.virtualizationModule.setCheckboxLI(li, e);
            }
            if (e) {
              var eventArgs = this.selectEventData(li, e);
              var checkIcon = li.querySelector("." + classNames4.checkboxIcon);
              merge(eventArgs, {
                isChecked: checkIcon.classList.contains(classNames4.checked)
              });
              var checkboxElement = li.querySelector("." + classNames4.checkboxWrapper);
              var isCheckedBefore = checkIcon.classList.contains(classNames4.checked);
              var isFocusedBefore = li.classList.contains(classNames4.focused);
              this.handleCheckboxState(li, checkIcon, checkboxElement, isCheckedBefore, isFocusedBefore, eventArgs, false);
            }
          } else if (li.classList.contains(classNames4.hasChild)) {
            this.removeHover();
            this.removeSelect();
            this.removeSelect(li);
            this.setSelectLI(li, e);
            li.classList.remove(classNames4.selected);
          } else {
            this.setCheckboxLI(li, e);
            if (target.nodeName === "INPUT" || target.nodeName === "TEXTAREA") {
              target.classList.add("e-focused");
              this.targetElement = target;
            }
          }
        } else {
          this.setSelectLI(li, e);
          if (target.nodeName === "INPUT" || target.nodeName === "TEXTAREA") {
            target.classList.add("e-focused");
            this.targetElement = target;
          }
        }
        closestElement = closest(e.target, "li");
        if (!isNullOrUndefined(closestElement)) {
          if (closestElement.classList.contains("e-has-child") && !e.target.parentElement.classList.contains("e-listview-checkbox")) {
            closestElement.classList.add(classNames4.disable);
          }
        }
      }
      this.updateSelectedId();
    };
    ListView2.prototype.removeElement = function(element2) {
      return element2 && element2.parentNode && element2.parentNode.removeChild(element2);
    };
    ListView2.prototype.hoverHandler = function(e) {
      var curLi = closest(e.target.parentNode, "." + classNames4.listItem);
      this.setHoverLI(curLi);
    };
    ListView2.prototype.leaveHandler = function() {
      this.removeHover();
    };
    ListView2.prototype.homeKeyHandler = function(e, end) {
      e.preventDefault();
      if (Object.keys(this.dataSource).length && this.curUL) {
        var li = this.curUL.querySelectorAll("." + classNames4.listItem);
        var focusedElement = this.curUL.querySelector("." + classNames4.focused) || this.curUL.querySelector("." + classNames4.selected);
        if (focusedElement) {
          focusedElement.classList.remove(classNames4.focused);
          if (!this.showCheckBox) {
            focusedElement.classList.remove(classNames4.selected);
          }
        }
        var index = !end ? 0 : li.length - 1;
        if (li[index].classList.contains(classNames4.hasChild) || this.showCheckBox) {
          li[index].classList.add(classNames4.focused);
        } else {
          this.setSelectLI(li[index], e);
        }
        if (li[index]) {
          this.element.setAttribute("aria-activedescendant", li[index].id.toString());
        } else {
          this.element.removeAttribute("aria-activedescendant");
        }
      }
    };
    ListView2.prototype.onArrowKeyDown = function(e, prev) {
      var siblingLI;
      var li;
      var hasChild = !isNullOrUndefined(this.curUL.querySelector("." + classNames4.hasChild)) ? true : false;
      if (hasChild || this.showCheckBox) {
        li = this.curUL.querySelector("." + classNames4.focused) || this.curUL.querySelector("." + classNames4.selected);
        siblingLI = ListBase.getSiblingLI(this.curUL.querySelectorAll("." + classNames4.listItem), li, prev);
        if (!isNullOrUndefined(siblingLI)) {
          if (li) {
            li.classList.remove(classNames4.focused);
            if (!this.showCheckBox) {
              li.classList.remove(classNames4.selected);
            }
          }
          if (siblingLI.classList.contains(classNames4.hasChild) || this.showCheckBox) {
            siblingLI.classList.add(classNames4.focused);
          } else {
            this.setSelectLI(siblingLI, e);
          }
        }
      } else {
        li = this.curUL.querySelector("." + classNames4.selected);
        siblingLI = ListBase.getSiblingLI(this.curUL.querySelectorAll("." + classNames4.listItem), li, prev);
        this.setSelectLI(siblingLI, e);
      }
      if (siblingLI) {
        this.element.setAttribute("aria-activedescendant", siblingLI.id.toString());
      } else {
        this.element.removeAttribute("aria-activedescendant");
      }
      return siblingLI;
    };
    ListView2.prototype.arrowKeyHandler = function(e, prev) {
      var _this = this;
      e.preventDefault();
      if (Object.keys(this.dataSource).length && this.curUL) {
        var siblingLI = this.onArrowKeyDown(e, prev);
        var elementTop = this.element.getBoundingClientRect().top;
        var elementHeight = this.element.getBoundingClientRect().height;
        var firstItemBounds = this.curUL.querySelector("." + classNames4.listItem).getBoundingClientRect();
        var heightDiff = void 0;
        var groupItemBounds = void 0;
        if (this.fields.groupBy) {
          groupItemBounds = this.curUL.querySelector("." + classNames4.groupListItem).getBoundingClientRect();
        }
        if (siblingLI) {
          var siblingTop = siblingLI.getBoundingClientRect().top;
          var siblingHeight = siblingLI.getBoundingClientRect().height;
          if (!prev) {
            var height = this.isWindow ? window.innerHeight : elementHeight;
            heightDiff = this.isWindow ? siblingTop + siblingHeight : siblingTop - elementTop + siblingHeight;
            if (heightDiff > height) {
              if (this.isWindow === true) {
                window.scroll(0, pageYOffset + (heightDiff - height));
              } else {
                this.element.scrollTop = this.element.scrollTop + (heightDiff - height);
              }
            }
          } else {
            heightDiff = this.isWindow ? siblingTop : siblingTop - elementTop;
            if (heightDiff < 0) {
              if (this.isWindow === true) {
                window.scroll(0, pageYOffset + heightDiff);
              } else {
                this.element.scrollTop = this.element.scrollTop + heightDiff;
              }
            }
          }
        } else if (this.enableVirtualization && prev && this.virtualizationModule.uiFirstIndex) {
          this.onUIScrolled = function() {
            _this.onArrowKeyDown(e, prev);
            _this.onUIScrolled = void 0;
          };
          heightDiff = this.virtualizationModule.listItemHeight;
          if (this.isWindow === true) {
            window.scroll(0, pageYOffset - heightDiff);
          } else {
            this.element.scrollTop = this.element.scrollTop - heightDiff;
          }
        } else if (prev) {
          if (this.showHeader && this.headerEle) {
            var topHeight = groupItemBounds ? groupItemBounds.top : firstItemBounds.top;
            var headerBounds = this.headerEle.getBoundingClientRect();
            heightDiff = headerBounds.top < 0 ? headerBounds.height - topHeight : 0;
            if (this.isWindow === true) {
              window.scroll(0, pageYOffset - heightDiff);
            } else {
              this.element.scrollTop = 0;
            }
          } else if (this.fields.groupBy) {
            heightDiff = this.isWindow ? groupItemBounds.top < 0 ? groupItemBounds.top : 0 : elementTop - firstItemBounds.top + groupItemBounds.height;
            if (this.isWindow === true) {
              window.scroll(0, pageYOffset + heightDiff);
            } else {
              this.element.scrollTop = this.element.scrollTop - heightDiff;
            }
          }
        }
      }
    };
    ListView2.prototype.enterKeyHandler = function(e) {
      if (Object.keys(this.dataSource).length && this.curUL) {
        var hasChild = !isNullOrUndefined(this.curUL.querySelector("." + classNames4.hasChild)) ? true : false;
        var li = this.curUL.querySelector("." + classNames4.focused);
        if (hasChild && li) {
          li.classList.remove(classNames4.focused);
          if (this.showCheckBox) {
            this.removeSelect();
            this.removeSelect(li);
            this.removeHover();
          }
          this.setSelectLI(li, e);
        }
      }
    };
    ListView2.prototype.spaceKeyHandler = function(e) {
      if (this.enable && this.showCheckBox && Object.keys(this.dataSource).length && this.curUL) {
        e.preventDefault();
        var li = this.curUL.querySelector("." + classNames4.focused);
        var checkboxElement = void 0;
        var checkIcon = void 0;
        if (!isNullOrUndefined(li) && isNullOrUndefined(li.querySelector("." + classNames4.checked))) {
          var args = {
            curData: void 0,
            dataSource: void 0,
            fields: void 0,
            options: void 0,
            text: void 0,
            item: li
          };
          checkboxElement = args.item.querySelector("." + classNames4.checkboxWrapper);
          this.checkInternally(args, checkboxElement);
          checkIcon = checkboxElement.querySelector("." + classNames4.checkboxIcon + "." + classNames4.icon);
        } else {
          this.uncheckItem(li);
        }
        var eventArgs = this.selectEventData(li, e);
        merge(eventArgs, {
          isChecked: checkIcon ? checkIcon.classList.contains(classNames4.checked) : false
        });
        if (!isNullOrUndefined(li)) {
          var cbElement = li.querySelector("." + classNames4.checkboxWrapper);
          var checkboxIcon = li.querySelector("." + classNames4.checkboxIcon);
          var isCheckedBefore = checkboxIcon.classList.contains(classNames4.checked);
          var isFocusedBefore = li.classList.contains(classNames4.focused);
          this.handleCheckboxState(li, checkboxIcon, cbElement, isCheckedBefore, isFocusedBefore, eventArgs, false);
        }
        this.updateSelectedId();
      }
    };
    ListView2.prototype.keyActionHandler = function(e) {
      switch (e.keyCode) {
        case 36:
          this.homeKeyHandler(e);
          break;
        case 35:
          this.homeKeyHandler(e, true);
          break;
        case 40:
          this.arrowKeyHandler(e);
          break;
        case 38:
          this.arrowKeyHandler(e, true);
          break;
        case 13:
          this.enterKeyHandler(e);
          break;
        case 8:
          if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {
            this.uncheckAllItems();
          }
          this.back();
          break;
        case 32:
          if (isNullOrUndefined(this.targetElement) || !this.targetElement.classList.contains("e-focused")) {
            this.spaceKeyHandler(e);
          }
          break;
      }
    };
    ListView2.prototype.swipeActionHandler = function(e) {
      if (e.swipeDirection === "Right" && e.velocity > swipeVelocity && e.originalEvent.type === "touchend") {
        if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {
          this.uncheckAllItems();
        }
        this.back();
      }
    };
    ListView2.prototype.focusout = function() {
      if (Object.keys(this.dataSource).length && this.curUL) {
        var focusedElement = this.curUL.querySelector("." + classNames4.focused);
        if (focusedElement) {
          focusedElement.classList.remove(classNames4.focused);
          if (!this.showCheckBox && !isNullOrUndefined(this.selectedLI)) {
            this.selectedLI.classList.add(classNames4.selected);
          }
        }
      }
    };
    ListView2.prototype.wireEvents = function() {
      EventHandler.add(this.element, "keydown", this.keyActionHandler, this);
      EventHandler.add(this.element, "click", this.clickHandler, this);
      EventHandler.add(this.element, "mouseover", this.hoverHandler, this);
      EventHandler.add(this.element, "mouseout", this.leaveHandler, this);
      EventHandler.add(this.element, "focusout", this.focusout, this);
      this.touchModule = new Touch(this.element, {
        swipe: this.swipeActionHandler.bind(this)
      });
      if (!isNullOrUndefined(this.scroll)) {
        EventHandler.add(this.element, "scroll", this.onListScroll, this);
      }
    };
    ListView2.prototype.unWireEvents = function() {
      EventHandler.remove(this.element, "keydown", this.keyActionHandler);
      EventHandler.remove(this.element, "click", this.clickHandler);
      EventHandler.remove(this.element, "mouseover", this.hoverHandler);
      EventHandler.remove(this.element, "mouseout", this.leaveHandler);
      EventHandler.remove(this.element, "mouseover", this.hoverHandler);
      EventHandler.remove(this.element, "mouseout", this.leaveHandler);
      EventHandler.remove(this.element, "focusout", this.focusout);
      if (!isNullOrUndefined(this.scroll)) {
        EventHandler.remove(this.element, "scroll", this.onListScroll);
      }
      if (this.touchModule) {
        this.touchModule.destroy();
      }
      this.touchModule = null;
    };
    ListView2.prototype.removeFocus = function() {
      var focusedLI = this.element.querySelectorAll("." + classNames4.focused);
      for (var _i = 0, focusedLI_1 = focusedLI; _i < focusedLI_1.length; _i++) {
        var ele = focusedLI_1[_i];
        ele.classList.remove(classNames4.focused);
      }
    };
    ListView2.prototype.removeHover = function() {
      var hoverLI = this.element.querySelector("." + classNames4.hover);
      if (hoverLI) {
        hoverLI.classList.remove(classNames4.hover);
      }
    };
    ListView2.prototype.removeSelect = function(li) {
      if (isNullOrUndefined(li)) {
        var selectedLI = this.element.querySelectorAll("." + classNames4.selected);
        for (var _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {
          var ele = selectedLI_1[_i];
          if (this.showCheckBox && ele.querySelector("." + classNames4.checked)) {
            continue;
          } else {
            ele.classList.remove(classNames4.selected);
          }
        }
      } else {
        li.classList.remove(classNames4.selected);
      }
    };
    ListView2.prototype.isValidLI = function(li) {
      return li && li.classList.contains(classNames4.listItem) && !li.classList.contains(classNames4.groupListItem) && !li.classList.contains(classNames4.disable);
    };
    ListView2.prototype.setCheckboxLI = function(li, e) {
      if (this.isValidLI(li) && this.enable && this.showCheckBox) {
        if (this.curUL.querySelector("." + classNames4.focused)) {
          this.curUL.querySelector("." + classNames4.focused).classList.remove(classNames4.focused);
        }
        var textAreaFocus = li.querySelector("textarea") || li.querySelector("input");
        li.classList.add(classNames4.focused);
        if (!isNullOrUndefined(e)) {
          if (e.target === textAreaFocus) {
            textAreaFocus.classList.add("e-focused");
          }
        }
        var checkboxElement = li.querySelector("." + classNames4.checkboxWrapper);
        var checkIcon = checkboxElement.querySelector("." + classNames4.checkboxIcon + "." + classNames4.icon);
        this.removeHover();
        var isCheckedBefore = checkIcon.classList.contains(classNames4.checked);
        var isFocusedBefore = li.classList.contains(classNames4.focused);
        if (!isCheckedBefore) {
          checkIcon.classList.add(classNames4.checked);
          li.classList.add(classNames4.selected);
        } else {
          checkIcon.classList.remove(classNames4.checked);
          li.classList.remove(classNames4.selected);
        }
        checkboxElement.setAttribute("aria-checked", checkIcon.classList.contains(classNames4.checked) ? "true" : "false");
        var eventArgs = this.selectEventData(li, e);
        merge(eventArgs, {
          isChecked: checkIcon.classList.contains(classNames4.checked)
        });
        if (this.enableVirtualization) {
          this.virtualizationModule.setCheckboxLI(li, e);
        }
        this.handleCheckboxState(li, checkIcon, checkboxElement, isCheckedBefore, isFocusedBefore, eventArgs, true, textAreaFocus);
        this.setSelectedItemData(li);
        this.renderSubList(li);
      }
    };
    ListView2.prototype.selectEventData = function(li, e) {
      var data = this.getItemData(li);
      var fieldData = getFieldValues(data, this.listBaseOption.fields);
      var selectedItem;
      if (!isNullOrUndefined(data) && typeof this.dataSource[0] === "string" || typeof this.dataSource[0] === "number") {
        selectedItem = {
          item: li,
          text: li && li.innerText.trim(),
          data: this.dataSource
        };
      } else {
        selectedItem = {
          item: li,
          text: fieldData && fieldData[this.listBaseOption.fields.text],
          data
        };
      }
      var eventArgs = {};
      merge(eventArgs, selectedItem);
      if (e) {
        merge(eventArgs, {
          isInteracted: true,
          event: e,
          cancel: false,
          index: this.curUL && Array.prototype.indexOf.call(this.curUL.children, li)
        });
      }
      return eventArgs;
    };
    ListView2.prototype.setSelectedItemData = function(li) {
      var data = this.getItemData(li);
      var fieldData = getFieldValues(data, this.listBaseOption.fields);
      if (!isNullOrUndefined(data) && (typeof this.dataSource[0] === "string" || typeof this.dataSource[0] === "number")) {
        this.selectedItems = {
          item: li,
          text: li && li.innerText.trim(),
          data: this.dataSource
        };
      } else {
        this.selectedItems = {
          item: li,
          text: fieldData && fieldData[this.listBaseOption.fields.text],
          data
        };
      }
    };
    ListView2.prototype.setSelectLI = function(li, e) {
      var _this = this;
      if (this.isValidLI(li) && !li.classList.contains(classNames4.selected) && this.enable) {
        if (!this.showCheckBox) {
          this.removeSelect();
        }
        li.classList.add(classNames4.selected);
        this.removeHover();
        this.setSelectedItemData(li);
        if (this.enableVirtualization) {
          this.virtualizationModule.setSelectLI(li, e);
        }
        var eventArgs = this.selectEventData(li, e);
        this.trigger("select", eventArgs, function(observedArgs) {
          if (!observedArgs.cancel) {
            _this.selectedLI = li;
            _this.renderSubList(li);
          } else {
            li.classList.remove(classNames4.selected);
            _this.selectedLI = li;
          }
        });
      }
    };
    ListView2.prototype.setHoverLI = function(li) {
      if (this.isValidLI(li) && !li.classList.contains(classNames4.hover) && this.enable) {
        var lastLi = this.element.querySelectorAll("." + classNames4.hover);
        if (lastLi && lastLi.length) {
          removeClass(lastLi, classNames4.hover);
        }
        if (!li.classList.contains(classNames4.selected) || this.showCheckBox) {
          li.classList.add(classNames4.hover);
        }
      }
    };
    ListView2.prototype.getSubDS = function() {
      var levelKeys = this.curDSLevel;
      if (levelKeys.length) {
        var ds = this.localData;
        for (var _i = 0, levelKeys_1 = levelKeys; _i < levelKeys_1.length; _i++) {
          var key = levelKeys_1[_i];
          var field = {};
          field[this.fields.id] = key;
          this.curDSJSON = this.findItemFromDS(ds, field);
          var fieldData = getFieldValues(this.curDSJSON, this.listBaseOption.fields);
          ds = this.curDSJSON ? fieldData[this.fields.child] : ds;
        }
        return ds;
      }
      return this.localData;
    };
    ListView2.prototype.getItemData = function(li) {
      var dataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource;
      var fields = this.getElementUID(li);
      var curDS;
      if (isNullOrUndefined(this.element.querySelector("." + classNames4.hasChild)) && this.fields.groupBy) {
        curDS = this.curViewDS;
      } else {
        curDS = dataSource;
      }
      return this.findItemFromDS(curDS, fields);
    };
    ListView2.prototype.findItemFromDS = function(dataSource, fields, parent) {
      var _this = this;
      var resultJSON;
      if (dataSource && dataSource.length && fields) {
        dataSource.some(function(data) {
          var fieldData = getFieldValues(data, _this.listBaseOption.fields);
          if ((fields[_this.fields.id] || fields[_this.fields.text]) && (!fields[_this.fields.id] || (!isNullOrUndefined(fieldData[_this.fields.id]) && fieldData[_this.fields.id].toString()) === fields[_this.fields.id].toString()) && (!fields[_this.fields.text] || fieldData[_this.fields.text] === fields[_this.fields.text])) {
            resultJSON = parent ? dataSource : data;
          } else if (typeof data !== "object" && dataSource.indexOf(data) !== -1) {
            resultJSON = parent ? dataSource : data;
          } else if (!isNullOrUndefined(fields[_this.fields.id]) && isNullOrUndefined(fieldData[_this.fields.id])) {
            var li = _this.element.querySelector('[data-uid="' + fields[_this.fields.id] + '"]');
            if (li && li.innerText.trim() === fieldData[_this.fields.text]) {
              resultJSON = data;
            }
          } else if (Object.prototype.hasOwnProperty.call(fieldData, _this.fields.child) && fieldData[_this.fields.child].length) {
            resultJSON = _this.findItemFromDS(fieldData[_this.fields.child], fields, parent);
          }
          return !!resultJSON;
        });
      } else {
        resultJSON = dataSource;
      }
      return resultJSON;
    };
    ListView2.prototype.getQuery = function() {
      var columns = [];
      var query = this.query ? this.query : new Query();
      if (!this.query) {
        for (var _i = 0, _a = Object.keys(this.fields.properties); _i < _a.length; _i++) {
          var column = _a[_i];
          if (column !== "tableName" && !!this.fields["" + column] && this.fields["" + column] !== ListBase.defaultMappedFields["" + column] && columns.indexOf(this.fields["" + column]) === -1) {
            columns.push(this.fields["" + column]);
          }
        }
        query.select(columns);
        if (Object.prototype.hasOwnProperty.call(this.fields.properties, "tableName")) {
          query.from(this.fields.tableName);
        }
      }
      return query;
    };
    ListView2.prototype.setViewDataSource = function(dataSource) {
      if (dataSource === void 0) {
        dataSource = this.localData;
      }
      var fieldValue = isNullOrUndefined(this.fields.sortBy) ? this.fields.text : this.fields.sortBy;
      var query = ListBase.addSorting(this.sortOrder, fieldValue);
      if (dataSource && this.fields.groupBy) {
        if (this.sortOrder !== "None") {
          this.curViewDS = ListBase.groupDataSource(ListBase.getDataSource(dataSource, query), this.listBaseOption.fields, this.sortOrder);
        } else {
          this.curViewDS = ListBase.groupDataSource(dataSource, this.listBaseOption.fields, this.sortOrder);
        }
      } else if (dataSource && this.sortOrder !== "None") {
        this.curViewDS = ListBase.getDataSource(dataSource, query);
      } else {
        this.curViewDS = dataSource;
      }
    };
    ListView2.prototype.isInAnimation = function() {
      return this.curUL.classList.contains(".e-animate");
    };
    ListView2.prototype.renderRemoteLists = function(e, listViewComponent) {
      if (this.isDestroyed) {
        return;
      }
      this.localData = e.result;
      listViewComponent.removeElement(listViewComponent.contentContainer);
      this.renderList();
      this.trigger("actionComplete", e);
    };
    ListView2.prototype.triggerActionFailure = function(e) {
      if (this.isDestroyed) {
        return;
      }
      this.trigger("actionFailure", e);
    };
    ListView2.prototype.setLocalData = function() {
      var _this = this;
      this.trigger("actionBegin");
      if (this.dataSource instanceof DataManager) {
        if (this.dataSource.ready) {
          this.dataSource.ready.then(function(e) {
            _this.isOffline = _this.dataSource.dataSource.offline;
            if (_this.dataSource instanceof DataManager && _this.isOffline) {
              _this.renderRemoteLists(e, _this);
            }
          }).catch(function(e) {
            _this.triggerActionFailure(e);
          });
        } else {
          this.dataSource.executeQuery(this.getQuery()).then(function(e) {
            _this.renderRemoteLists(e, _this);
          }).catch(function(e) {
            _this.triggerActionFailure(e);
          });
        }
      } else if (!this.dataSource || !this.dataSource.length) {
        var ul = this.element.querySelector("ul");
        if (ul) {
          remove(ul);
          this.setProperties({
            dataSource: ListBase.createJsonFromElement(ul)
          }, true);
          this.localData = this.dataSource;
          this.renderList();
          this.trigger("actionComplete", {
            data: this.localData
          });
        }
      } else {
        this.localData = this.dataSource;
        this.renderList();
        this.trigger("actionComplete", {
          data: this.localData
        });
      }
    };
    ListView2.prototype.reRender = function() {
      this.removeElement(this.headerEle);
      this.removeElement(this.ulElement);
      this.removeElement(this.contentContainer);
      if (this.isReact) {
        this.clearTemplate();
      }
      if (Object.keys(window).indexOf("ejsInterop") === -1) {
        this.element.innerHTML = "";
      }
      this.headerEle = this.ulElement = this.liCollection = void 0;
      this.header();
      this.setLocalData();
    };
    ListView2.prototype.resetCurrentList = function() {
      this.setViewDataSource(this.curViewDS);
      this.contentContainer.innerHTML = "";
      this.createList();
      this.renderIntoDom(this.curUL);
    };
    ListView2.prototype.setAttributes = function(liElements) {
      for (var i = 0; i < liElements.length; i++) {
        var element2 = liElements[parseInt(i.toString(), 10)];
        if (element2.classList.contains("e-list-item")) {
          element2.setAttribute("id", this.element.id + "_" + element2.getAttribute("data-uid"));
          element2.setAttribute("tabindex", "-1");
        }
      }
    };
    ListView2.prototype.createList = function() {
      this.currentLiElements = [];
      this.isNestedList = false;
      this.ulElement = this.curUL = ListBase.createList(this.createElement, this.curViewDS, this.listBaseOption, null, this);
      this.liCollection = this.curUL.querySelectorAll("." + classNames4.listItem);
      this.setAttributes(this.liCollection);
    };
    ListView2.prototype.renderSubList = function(li) {
      this.liElement = li;
      var uID = li.getAttribute("data-uid");
      if (li.classList.contains(classNames4.hasChild) && uID) {
        var ul = closest(li.parentNode, "." + classNames4.parentItem);
        var ele = this.element.querySelector("[pid='" + uID + "']");
        this.curDSLevel.push(uID);
        this.setViewDataSource(this.getSubDS());
        if (this.enableVirtualization) {
          this.virtualizationModule.updateDOMItemCount();
        }
        if (!ele) {
          var data = this.curViewDS;
          ele = ListBase.createListFromJson(this.createElement, data, this.listBaseOption, this.curDSLevel.length, null, this);
          if (this.isReact) {
            this.renderReactTemplates();
          }
          var lists = ele.querySelectorAll("." + classNames4.listItem);
          this.setAttributes(lists);
          ele.setAttribute("pID", uID);
          ele.style.display = "none";
          this.renderIntoDom(ele);
        }
        this.switchView(ul, ele);
        this.liCollection = this.curUL.querySelectorAll("." + classNames4.listItem);
        if (this.selectedItems) {
          var fieldData = getFieldValues(this.selectedItems.data, this.listBaseOption.fields);
          this.header(fieldData[this.listBaseOption.fields.text], true, "header");
        }
        this.selectedLI = void 0;
      }
    };
    ListView2.prototype.renderIntoDom = function(ele) {
      this.contentContainer.appendChild(ele);
    };
    ListView2.prototype.renderList = function(data) {
      this.setViewDataSource(data);
      if (this.enableVirtualization) {
        if (Object.keys(this.dataSource).length) {
          if ((this.template || this.groupTemplate) && !this.virtualizationModule.isNgTemplate()) {
            this.listBaseOption.itemCreated = this.virtualizationModule.createUIItem.bind(this.virtualizationModule);
          }
        }
        this.virtualizationModule.uiVirtualization();
      } else {
        this.createList();
        this.contentContainer = this.createElement("div", {
          className: classNames4.container
        });
        this.element.appendChild(this.contentContainer);
        this.renderIntoDom(this.ulElement);
        if (this.isReact) {
          this.renderReactTemplates();
        }
      }
    };
    ListView2.prototype.getElementUID = function(obj) {
      var fields = {};
      if (obj instanceof Element) {
        fields[this.fields.id] = obj.getAttribute("data-uid");
      } else {
        fields = obj;
      }
      return fields;
    };
    ListView2.prototype.render = function() {
      this.element.classList.add(classNames4.root);
      attributes(this.element, {
        tabindex: "0"
      });
      this.setCSSClass();
      this.setEnableRTL();
      this.setEnable();
      this.setSize();
      this.wireEvents();
      this.header();
      this.setLocalData();
      this.setHTMLAttribute();
      this.rippleFn = rippleEffect(this.element, {
        selector: "." + classNames4.listItem
      });
      this.renderComplete();
      this.previousScrollTop = this.element.scrollTop;
    };
    ListView2.prototype.destroy = function() {
      if (this.isReact) {
        this.clearTemplate();
      }
      this.unWireEvents();
      var classAr = [classNames4.root, classNames4.disable, "e-rtl", "e-has-header", "e-lib"].concat(this.cssClass ? this.cssClass.split(" ").filter(function(css) {
        return css;
      }) : []);
      removeClass([this.element], classAr);
      this.element.removeAttribute("role");
      this.element.removeAttribute("tabindex");
      this.curUL = this.ulElement = this.liCollection = this.headerEle = void 0;
      this.element.innerHTML = "";
      this.contentContainer = null;
      this.selectedItems = null;
      this.selectedLI = null;
      this.liElement = null;
      this.targetElement = null;
      this.currentLiElements = null;
      this.virtualCheckBox = null;
      _super.prototype.destroy.call(this);
    };
    ListView2.prototype.back = function() {
      var pID = this.curDSLevel[this.curDSLevel.length - 1];
      if (pID === void 0 || this.isInAnimation()) {
        return;
      }
      this.curDSLevel.pop();
      this.setViewDataSource(this.getSubDS());
      if (this.enableVirtualization) {
        this.virtualizationModule.updateDOMItemCount();
      }
      var toUL = this.element.querySelector("[data-uid='" + pID + "']");
      var fromUL = this.curUL;
      if (!toUL) {
        this.createList();
        this.renderIntoDom(this.ulElement);
        toUL = this.curUL;
      } else {
        toUL = toUL.parentElement;
      }
      var fieldData = getFieldValues(this.curDSJSON, this.listBaseOption.fields);
      var text = fieldData[this.fields.text];
      this.switchView(fromUL, toUL, true);
      this.removeFocus();
      var li = this.element.querySelector("[data-uid='" + pID + "']");
      li.classList.remove(classNames4.disable);
      li.classList.add(classNames4.focused);
      if (!(this.showCheckBox && li.querySelector("." + classNames4.checkboxIcon).classList.contains(classNames4.checked))) {
        li.classList.remove(classNames4.selected);
      }
      this.liCollection = this.curUL.querySelectorAll("." + classNames4.listItem);
      if (this.enableHtmlSanitizer) {
        this.setProperties({
          headerTitle: SanitizeHtmlHelper.sanitize(this.headerTitle)
        }, true);
      }
      this.header(this.curDSLevel.length ? text : this.headerTitle, this.curDSLevel.length ? true : false, "header");
    };
    ListView2.prototype.selectItem = function(item) {
      if (this.enableVirtualization) {
        this.virtualizationModule.selectItem(item);
      } else if (this.showCheckBox) {
        this.setCheckboxLI(this.getLiFromObjOrElement(item));
      } else {
        if (isNullOrUndefined(item) === true) {
          this.removeSelect();
        } else {
          this.setSelectLI(this.getLiFromObjOrElement(item));
        }
      }
    };
    ListView2.prototype.unselectItem = function(item) {
      if (isNullOrUndefined(item)) {
        this.removeSelect();
      } else {
        var li = this.getLiFromObjOrElement(item);
        if (!isNullOrUndefined(li)) {
          this.removeSelect(li);
        }
      }
    };
    ListView2.prototype.getLiFromObjOrElement = function(obj) {
      var li;
      var dataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource;
      if (!isNullOrUndefined(obj)) {
        if (typeof dataSource[0] === "string" || typeof dataSource[0] === "number") {
          if (obj instanceof Element) {
            var uid = obj.getAttribute("data-uid").toString();
            for (var i = 0; i < this.liCollection.length; i++) {
              if (this.liCollection[parseInt(i.toString(), 10)].getAttribute("data-uid").toString() === uid) {
                li = this.liCollection[parseInt(i.toString(), 10)];
                break;
              }
            }
          } else {
            Array.prototype.some.call(this.curUL.querySelectorAll("." + classNames4.listItem), function(item) {
              if (item.innerText.trim() === obj.toString()) {
                li = item;
                return true;
              } else {
                return false;
              }
            });
          }
        } else {
          var resultJSON = this.getItemData(obj);
          var fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);
          if (resultJSON) {
            li = this.element.querySelector('[data-uid="' + fieldData[this.fields.id] + '"]');
            if (!this.enableVirtualization && isNullOrUndefined(li)) {
              var curLi = this.element.querySelectorAll("." + classNames4.listItem);
              for (var i = 0; i < curLi.length; i++) {
                if (curLi[parseInt(i.toString(), 10)].innerText.trim() === fieldData[this.fields.text]) {
                  li = curLi[parseInt(i.toString(), 10)];
                }
              }
            }
          }
        }
      }
      return li;
    };
    ListView2.prototype.selectMultipleItems = function(item) {
      if (!isNullOrUndefined(item)) {
        for (var i = 0; i < item.length; i++) {
          if (!isNullOrUndefined(item[parseInt(i.toString(), 10)])) {
            this.selectItem(item[parseInt(i.toString(), 10)]);
          }
        }
      }
    };
    ListView2.prototype.getParentId = function() {
      var parentId = [];
      if (this.isNestedList) {
        for (var i = this.curDSLevel.length - 1; i >= 0; i--) {
          parentId.push(this.curDSLevel[parseInt(i.toString(), 10)]);
        }
      }
      return parentId;
    };
    ListView2.prototype.updateSelectedId = function() {
      this.selectedId = [];
      var liCollection = this.curUL.getElementsByClassName(classNames4.selected);
      for (var i = 0; i < liCollection.length; i++) {
        var tempData = this.getItemData(liCollection[parseInt(i.toString(), 10)]);
        if (!isNullOrUndefined(tempData) && tempData[this.listBaseOption.fields.id]) {
          this.selectedId.push(tempData[this.listBaseOption.fields.id]);
        }
      }
    };
    ListView2.prototype.getSelectedItems = function() {
      var finalValue;
      var isCompleted = false;
      this.selectedId = [];
      var dataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource;
      if (this.enableVirtualization && !isCompleted) {
        finalValue = this.virtualizationModule.getSelectedItems();
        isCompleted = true;
      } else if (this.showCheckBox && !isCompleted) {
        var liCollection = this.curUL.getElementsByClassName(classNames4.selected);
        var liTextCollection = [];
        var liDataCollection = [];
        this.selectedId = [];
        var dataParent = [];
        for (var i = 0; i < liCollection.length; i++) {
          if (typeof dataSource[0] === "string" || typeof dataSource[0] === "number") {
            liTextCollection.push(liCollection[parseInt(i.toString(), 10)].innerText.trim());
          } else {
            var tempData = this.getItemData(liCollection[parseInt(i.toString(), 10)]);
            var fieldData = getFieldValues(tempData, this.listBaseOption.fields);
            if (this.isNestedList) {
              dataParent.push({
                data: tempData,
                parentId: this.getParentId()
              });
            } else {
              liDataCollection.push(tempData);
            }
            if (fieldData) {
              liTextCollection.push(fieldData[this.listBaseOption.fields.text]);
              this.selectedId.push(fieldData[this.listBaseOption.fields.id]);
            } else {
              liTextCollection.push(void 0);
              this.selectedId.push(void 0);
            }
          }
        }
        if ((typeof dataSource[0] === "string" || typeof dataSource[0] === "number") && !isCompleted) {
          finalValue = {
            item: liCollection,
            data: dataSource,
            text: liTextCollection
          };
          isCompleted = true;
        }
        if (this.isNestedList && !isCompleted) {
          finalValue = {
            item: liCollection,
            data: dataParent,
            text: liTextCollection
          };
          isCompleted = true;
        } else if (!isCompleted) {
          finalValue = {
            item: liCollection,
            data: liDataCollection,
            text: liTextCollection
          };
          isCompleted = true;
        }
      } else if (!isCompleted) {
        var liElement = this.element.getElementsByClassName(classNames4.selected)[0];
        var fieldData = getFieldValues(this.getItemData(liElement), this.listBaseOption.fields);
        if ((typeof dataSource[0] === "string" || typeof dataSource[0] === "number") && !isCompleted) {
          finalValue = !isNullOrUndefined(liElement) ? {
            item: liElement,
            data: dataSource,
            text: liElement.innerText.trim()
          } : void 0;
          isCompleted = true;
        } else if (!isCompleted) {
          if (isNullOrUndefined(fieldData) || isNullOrUndefined(liElement)) {
            finalValue = void 0;
            isCompleted = true;
          } else {
            this.selectedId.push(fieldData[this.listBaseOption.fields.id]);
            finalValue = {
              text: fieldData[this.listBaseOption.fields.text],
              item: liElement,
              data: this.getItemData(liElement)
            };
            isCompleted = true;
          }
        }
      }
      return finalValue;
    };
    ListView2.prototype.findItem = function(item) {
      return this.getItemData(item);
    };
    ListView2.prototype.enableItem = function(item) {
      this.setItemState(item, true);
      if (this.enableVirtualization) {
        this.virtualizationModule.enableItem(item);
      }
    };
    ListView2.prototype.disableItem = function(item) {
      this.setItemState(item, false);
      if (this.enableVirtualization) {
        this.virtualizationModule.disableItem(item);
      }
    };
    ListView2.prototype.setItemState = function(item, isEnable) {
      var resultJSON = this.getItemData(item);
      var fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);
      if (resultJSON) {
        var li = this.element.querySelector('[data-uid="' + fieldData[this.fields.id] + '"]');
        if (isEnable) {
          if (li) {
            li.classList.remove(classNames4.disable);
          }
          delete resultJSON[this.fields.enabled];
        } else if (!isEnable) {
          if (li) {
            li.classList.add(classNames4.disable);
          }
          resultJSON[this.fields.enabled] = false;
        }
      }
    };
    ListView2.prototype.showItem = function(item) {
      this.showHideItem(item, false, "");
      if (this.enableVirtualization) {
        this.virtualizationModule.showItem(item);
      }
    };
    ListView2.prototype.hideItem = function(item) {
      this.showHideItem(item, true, "none");
      if (this.enableVirtualization) {
        this.virtualizationModule.hideItem(item);
      }
    };
    ListView2.prototype.showHideItem = function(obj, isHide, display) {
      var resultJSON = this.getItemData(obj);
      var fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);
      if (resultJSON) {
        var li = this.element.querySelector('[data-uid="' + fieldData[this.fields.id] + '"]');
        if (li) {
          li.style.display = display;
        }
        if (isHide) {
          resultJSON[this.fields.isVisible] = false;
        } else {
          delete resultJSON[this.fields.isVisible];
        }
      }
    };
    ListView2.prototype.addItem = function(data, fields, index) {
      if (fields === void 0) {
        fields = void 0;
      }
      var dataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource;
      this.addItemInternally(data, fields, dataSource, index);
    };
    ListView2.prototype.addItemInternally = function(data, fields, dataSource, index) {
      if (data instanceof Array) {
        if (this.enableVirtualization) {
          this.virtualizationModule.addItem(data, fields, dataSource, index);
        } else {
          var ds = this.findItemFromDS(dataSource, fields);
          var child = void 0;
          if (ds) {
            var fieldData = getFieldValues(ds, this.listBaseOption.fields);
            child = fieldData[this.fields.child];
            if (!child) {
              child = [];
            }
            child = child.concat(data);
          }
          if (ds instanceof Array) {
            for (var i = 0; i < data.length; i++) {
              dataSource = this.addItemAtIndex(index, dataSource, data[parseInt(i.toString(), 10)]);
              this.setViewDataSource(dataSource);
              var targetUL = this.contentContainer ? this.contentContainer.children[0] : null;
              if (this.contentContainer && targetUL) {
                this.addItemIntoDom(data[parseInt(i.toString(), 10)], targetUL, this.curViewDS);
              } else {
                this.reRender();
              }
            }
            this.liCollection = this.curUL.querySelectorAll("." + classNames4.listItem);
          } else {
            if (ds) {
              ds[this.fields.child] = child;
              this.addItemInNestedList(ds, data);
            }
          }
        }
      }
    };
    ListView2.prototype.addItemAtIndex = function(index, newDataSource, itemData) {
      var isIndexValid = !isNullOrUndefined(index) && index >= 0 && index < newDataSource.length && isNullOrUndefined(this.listBaseOption.fields.groupBy);
      if (isIndexValid) {
        newDataSource.splice(index, 0, itemData);
      } else {
        newDataSource.push(itemData);
      }
      return newDataSource;
    };
    ListView2.prototype.addItemInNestedList = function(targetItemData, itemQueue) {
      var targetItemId = targetItemData[this.fields.id];
      var targetChildDS = targetItemData[this.fields.child];
      var isAlreadyRenderedUL = this.element.querySelector("[pid='" + targetItemId + "']");
      var targetLi = this.element.querySelector("[data-uid='" + targetItemId + "']");
      var targetUL = isAlreadyRenderedUL ? isAlreadyRenderedUL : targetLi ? closest(targetLi, "ul") : null;
      var targetDS = isAlreadyRenderedUL ? targetChildDS : [targetItemData];
      var isTargetEmptyChild = targetLi ? !targetLi.classList.contains(classNames4.hasChild) : false;
      if (isTargetEmptyChild) {
        var targetRefreshedElement = ListBase.createListItemFromJson(this.createElement, targetDS, this.listBaseOption, null, null, this);
        this.setAttributes(targetRefreshedElement);
        targetUL.insertBefore(targetRefreshedElement[0], targetLi);
        detach(targetLi);
      }
      if (isAlreadyRenderedUL && itemQueue) {
        for (var i = 0; i < itemQueue.length; i++) {
          targetDS.push(itemQueue[parseInt(i.toString(), 10)]);
          this.addItemIntoDom(itemQueue[parseInt(i.toString(), 10)], targetUL, targetDS);
        }
      }
    };
    ListView2.prototype.addItemIntoDom = function(currentItem, targetUL, curViewDS) {
      var index = curViewDS.indexOf(currentItem);
      this.addListItem(currentItem, index, targetUL, curViewDS);
      var curItemDS = curViewDS[index - 1];
      if (curItemDS && curItemDS.isHeader && curItemDS.items.length === 1) {
        this.addListItem(curItemDS, index - 1, targetUL, curViewDS);
      }
    };
    ListView2.prototype.addListItem = function(dataSource, index, ulElement, curViewDS) {
      var target = this.getLiFromObjOrElement(curViewDS[index + 1]) || this.getLiFromObjOrElement(curViewDS[index + 2]) || null;
      var li = ListBase.createListItemFromJson(this.createElement, [dataSource], this.listBaseOption, null, null, this);
      this.setAttributes(li);
      if (this.template && this.isReact) {
        this.renderReactTemplates();
      }
      if (this.fields.groupBy && curViewDS[index + 1] && curViewDS[index + 1].isHeader) {
        var targetEle = this.getLiFromObjOrElement(curViewDS[index - 1]);
        if (targetEle) {
          target = targetEle.nextElementSibling;
        }
      }
      ulElement.insertBefore(li[0], target);
    };
    ListView2.prototype.removeItem = function(item) {
      var listDataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource;
      if (this.enableVirtualization) {
        this.virtualizationModule.removeItem(item);
      } else {
        this.removeItemFromList(item, listDataSource);
      }
    };
    ListView2.prototype.removeItemFromList = function(obj, listDataSource) {
      var _this = this;
      var curViewDS = this.curViewDS;
      var fields = obj instanceof Element ? this.getElementUID(obj) : obj;
      var dataSource = this.findItemFromDS(listDataSource, fields, true);
      if (dataSource) {
        var data_1 = this.findItemFromDS(dataSource, fields);
        var index = curViewDS.indexOf(data_1);
        var li = this.getLiFromObjOrElement(obj);
        var groupLi = void 0;
        this.validateNestedView(li);
        if (this.fields.groupBy && this.curViewDS[index - 1] && curViewDS[index - 1].isHeader && curViewDS[index - 1].items.length === 1) {
          if (li && li.previousElementSibling.classList.contains(classNames4.groupListItem) && (isNullOrUndefined(li.nextElementSibling) || li.nextElementSibling && li.nextElementSibling.classList.contains(classNames4.groupListItem))) {
            groupLi = li.previousElementSibling;
          }
        }
        if (li) {
          detach(li);
        }
        if (groupLi) {
          detach(groupLi);
        }
        var foundData = dataSource.length - 1 <= 0 ? this.findParent(this.localData, this.fields.id, function(value) {
          return value === data_1[_this.fields.id];
        }, null) : null;
        var dsIndex = dataSource.indexOf(data_1);
        dataSource.splice(dsIndex, 1);
        this.setViewDataSource(listDataSource);
        if (foundData && foundData.parent && Array.isArray(foundData.parent[this.fields.child]) && foundData.parent[this.fields.child].length <= 0) {
          var parentLi = this.getLiFromObjOrElement(foundData.parent);
          if (parentLi) {
            var li_1 = ListBase.createListItemFromJson(this.createElement, [foundData.parent], this.listBaseOption, null, null, this);
            this.setAttributes(li_1);
            parentLi.parentElement.insertBefore(li_1[0], parentLi);
            parentLi.parentElement.removeChild(parentLi);
          }
        }
        if (dataSource.length <= 0) {
          this.back();
        }
        this.liCollection = Array.prototype.slice.call(this.element.querySelectorAll("." + classNames4.listItem));
      }
    };
    ListView2.prototype.validateNestedView = function(li) {
      var liID = li ? li.getAttribute("data-uid").toString().toLowerCase() : null;
      if (liID && this.curDSLevel && this.curDSLevel.length > 0) {
        while (this.curDSLevel.some(function(id) {
          return id.toString().toLowerCase() === liID;
        })) {
          this.back();
        }
      }
    };
    ListView2.prototype.removeMultipleItems = function(item) {
      if (item.length) {
        for (var i = 0; i < item.length; i++) {
          this.removeItem(item[parseInt(i.toString(), 10)]);
        }
      }
    };
    ListView2.prototype.findParent = function(dataSource, id, callback, parent) {
      if (Object.prototype.hasOwnProperty.call(dataSource, id) && callback(dataSource[id]) === true) {
        return extend({}, dataSource);
      }
      for (var i = 0; i < Object.keys(dataSource).length; i++) {
        if (dataSource[Object.keys(dataSource)[parseInt(i.toString(), 10)]] && typeof dataSource[Object.keys(dataSource)[parseInt(i.toString(), 10)]] === "object") {
          var result = this.findParent(dataSource[Object.keys(dataSource)[parseInt(i.toString(), 10)]], id, callback, dataSource);
          if (result != null) {
            if (!result.parent) {
              result.parent = parent;
            }
            return result;
          }
        }
      }
      return null;
    };
    ListView2.prototype.getModuleName = function() {
      return "listview";
    };
    ListView2.prototype.requiredModules = function() {
      var modules = [];
      if (this.enableVirtualization) {
        modules.push({
          args: [this],
          member: "virtualization",
          name: "Virtualization"
        });
      }
      return modules;
    };
    ListView2.prototype.onListScroll = function(e) {
      var args = {
        originalEvent: e,
        scrollDirection: "Bottom",
        distanceY: this.element.scrollHeight - this.element.scrollTop
      };
      var currentScrollTop = this.element.scrollTop;
      if (currentScrollTop > this.previousScrollTop) {
        args.scrollDirection = "Bottom";
        args.distanceY = this.element.scrollHeight - this.element.clientHeight - this.element.scrollTop;
        this.trigger("scroll", args);
      } else if (this.previousScrollTop > currentScrollTop) {
        args.scrollDirection = "Top";
        args.distanceY = this.element.scrollTop;
        this.trigger("scroll", args);
      }
      this.previousScrollTop = currentScrollTop;
    };
    ListView2.prototype.getPersistData = function() {
      return this.addOnPersist(["cssClass", "enableRtl", "htmlAttributes", "enable", "fields", "animation", "headerTitle", "sortOrder", "showIcon", "height", "width", "showCheckBox", "checkBoxPosition", "selectedId"]);
    };
    __decorate29([Property("")], ListView2.prototype, "cssClass", void 0);
    __decorate29([Property(false)], ListView2.prototype, "enableVirtualization", void 0);
    __decorate29([Property({})], ListView2.prototype, "htmlAttributes", void 0);
    __decorate29([Property(true)], ListView2.prototype, "enable", void 0);
    __decorate29([Property([])], ListView2.prototype, "dataSource", void 0);
    __decorate29([Property()], ListView2.prototype, "query", void 0);
    __decorate29([Complex(ListBase.defaultMappedFields, FieldSettings)], ListView2.prototype, "fields", void 0);
    __decorate29([Property({
      effect: "SlideLeft",
      duration: 400,
      easing: "ease"
    })], ListView2.prototype, "animation", void 0);
    __decorate29([Property("None")], ListView2.prototype, "sortOrder", void 0);
    __decorate29([Property(false)], ListView2.prototype, "showIcon", void 0);
    __decorate29([Property(false)], ListView2.prototype, "showCheckBox", void 0);
    __decorate29([Property("Left")], ListView2.prototype, "checkBoxPosition", void 0);
    __decorate29([Property("")], ListView2.prototype, "headerTitle", void 0);
    __decorate29([Property(false)], ListView2.prototype, "showHeader", void 0);
    __decorate29([Property(true)], ListView2.prototype, "enableHtmlSanitizer", void 0);
    __decorate29([Property("")], ListView2.prototype, "height", void 0);
    __decorate29([Property("")], ListView2.prototype, "width", void 0);
    __decorate29([Property(null)], ListView2.prototype, "template", void 0);
    __decorate29([Property(null)], ListView2.prototype, "headerTemplate", void 0);
    __decorate29([Property(null)], ListView2.prototype, "groupTemplate", void 0);
    __decorate29([Event()], ListView2.prototype, "select", void 0);
    __decorate29([Event()], ListView2.prototype, "actionBegin", void 0);
    __decorate29([Event()], ListView2.prototype, "actionComplete", void 0);
    __decorate29([Event()], ListView2.prototype, "actionFailure", void 0);
    __decorate29([Event()], ListView2.prototype, "scroll", void 0);
    ListView2 = __decorate29([NotifyPropertyChanges], ListView2);
    return ListView2;
  }(Component)
);

// node_modules/@syncfusion/ej2-lists/src/list-view/virtualization.js
var listElementCount = 1.5;
var windowElementCount = 3;
var Virtualization = (
  /** @class */
  function() {
    function Virtualization2(instance) {
      this.elementDifference = 0;
      this.listViewInstance = instance;
    }
    Virtualization2.prototype.isNgTemplate = function() {
      return !isNullOrUndefined(this.listViewInstance.templateRef) && typeof this.listViewInstance.templateRef !== "string";
    };
    Virtualization2.prototype.isVueFunctionTemplate = function() {
      return this.listViewInstance.isVue && typeof this.listViewInstance.template === "function";
    };
    Virtualization2.prototype.uiVirtualization = function() {
      this.wireScrollEvent(false);
      var curViewDS = this.listViewInstance.curViewDS;
      var isRendered = this.listViewInstance.isRendered;
      var firstIndex = isRendered && !isNullOrUndefined(this.uiFirstIndex) && this.uiLastIndex <= Object.keys(curViewDS).length ? this.uiFirstIndex : 0;
      var firstDs = curViewDS.slice(firstIndex, firstIndex + 1);
      this.listViewInstance.ulElement = this.listViewInstance.curUL = ListBase.createList(this.listViewInstance.createElement, firstDs, this.listViewInstance.listBaseOption, null, this.listViewInstance);
      this.listViewInstance.contentContainer = this.listViewInstance.createElement("div", {
        className: classNames4.container
      });
      this.listViewInstance.element.appendChild(this.listViewInstance.contentContainer);
      this.listViewInstance.contentContainer.appendChild(this.listViewInstance.ulElement);
      this.listItemHeight = this.listViewInstance.ulElement.firstElementChild.getBoundingClientRect().height;
      this.expectedDomItemCount = this.ValidateItemCount(1e4);
      this.updateDOMItemCount();
      var lastIndex = isRendered && !isNullOrUndefined(this.uiLastIndex) && this.listDiff !== 0 ? this.uiLastIndex : this.domItemCount - 1;
      this.uiFirstIndex = firstIndex;
      this.uiLastIndex = lastIndex;
      var otherDs = curViewDS.slice(firstIndex + 1, lastIndex + 1);
      var listItems = ListBase.createListItemFromJson(this.listViewInstance.createElement, otherDs, this.listViewInstance.listBaseOption, null, null, this.listViewInstance);
      append(listItems, this.listViewInstance.ulElement);
      this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll("li");
      this.topElement = this.listViewInstance.createElement("div");
      this.listViewInstance.ulElement.insertBefore(this.topElement, this.listViewInstance.ulElement.firstElementChild);
      this.bottomElement = this.listViewInstance.createElement("div");
      this.listViewInstance.ulElement.insertBefore(this.bottomElement, null);
      this.totalHeight = Object.keys(curViewDS).length * this.listItemHeight - this.domItemCount * this.listItemHeight;
      this.topElement.style.height = isRendered ? this.topElementHeight + "px" : "0px";
      this.bottomElement.style.height = isRendered ? this.totalHeight - this.topElementHeight + "px" : this.totalHeight + "px";
      this.topElementHeight = isRendered ? this.topElementHeight : 0;
      this.bottomElementHeight = isRendered ? this.totalHeight - this.topElementHeight : this.totalHeight;
      this.listDiff = isRendered && Object.keys(curViewDS).length !== this.domItemCount ? this.listDiff : 0;
      if (isRendered) {
        this.listViewInstance.element.scrollTop = this.listViewInstance.previousScrollTop;
      }
      this.uiIndicesInitialization();
    };
    Virtualization2.prototype.wireScrollEvent = function(destroy3) {
      if (!destroy3) {
        if (this.listViewInstance.isWindow) {
          this.onVirtualScroll = this.onVirtualUiScroll.bind(this);
          window.addEventListener("scroll", this.onVirtualScroll);
        } else {
          EventHandler.add(this.listViewInstance.element, "scroll", this.onVirtualUiScroll, this);
        }
      } else {
        if (this.listViewInstance.isWindow === true) {
          window.removeEventListener("scroll", this.onVirtualScroll);
          window.removeEventListener("scroll", this.updateUl);
        } else {
          EventHandler.remove(this.listViewInstance.element, "scroll", this.onVirtualUiScroll);
        }
      }
    };
    Virtualization2.prototype.ValidateItemCount = function(dataSourceLength) {
      var height = parseFloat(formatUnit(this.listViewInstance.height));
      var itemCount;
      if (this.listViewInstance.isWindow) {
        itemCount = Math.round(window.innerHeight / this.listItemHeight * windowElementCount);
      } else {
        if (typeof this.listViewInstance.height === "string" && this.listViewInstance.height.indexOf("%") !== -1) {
          itemCount = Math.round(this.listViewInstance.element.getBoundingClientRect().height / this.listItemHeight * listElementCount);
        } else {
          itemCount = Math.round(height / this.listItemHeight * listElementCount);
        }
      }
      if (itemCount > dataSourceLength) {
        itemCount = dataSourceLength;
      }
      return itemCount;
    };
    Virtualization2.prototype.updateDOMItemCount = function() {
      this.domItemCount = this.ValidateItemCount(Object.keys(this.listViewInstance.curViewDS).length);
    };
    Virtualization2.prototype.uiIndicesInitialization = function() {
      this.uiIndices = {
        "activeIndices": [],
        "disabledItemIndices": [],
        "hiddenItemIndices": []
      };
      var data = this.listViewInstance.curViewDS;
      for (var i = 0; i < data.length; i++) {
        if (this.listViewInstance.showCheckBox && data[i][this.listViewInstance.fields.isChecked]) {
          this.uiIndices.activeIndices.push(i);
        }
        if (!isNullOrUndefined(data[parseInt(i.toString(), 10)][this.listViewInstance.fields.enabled]) && !data[i][this.listViewInstance.fields.enabled]) {
          this.uiIndices.disabledItemIndices.push(i);
        }
      }
      if (this.isNgTemplate()) {
        var items = this.listViewInstance.element.querySelectorAll("." + classNames4.listItem);
        for (var index = 0; index < items.length; index++) {
          items[index].context = this.listViewInstance.viewContainerRef.get(index).context;
        }
      }
    };
    Virtualization2.prototype.refreshItemHeight = function() {
      if (this.listViewInstance.curViewDS.length) {
        var curViewDS = this.listViewInstance.curViewDS;
        this.listItemHeight = this.topElement.nextSibling.getBoundingClientRect().height;
        this.totalHeight = Object.keys(curViewDS).length * this.listItemHeight - this.domItemCount * this.listItemHeight;
        this.bottomElementHeight = this.totalHeight;
        this.bottomElement.style.height = this.totalHeight + "px";
      }
    };
    Virtualization2.prototype.getscrollerHeight = function(startingHeight) {
      return this.listViewInstance.isWindow ? pageYOffset - startingHeight <= 0 ? 0 : pageYOffset - startingHeight : this.listViewInstance.element.scrollTop - startingHeight <= 0 ? 0 : this.listViewInstance.element.scrollTop - startingHeight;
    };
    Virtualization2.prototype.onVirtualUiScroll = function() {
      var _a;
      var startingHeight;
      var curViewDS = this.listViewInstance.curViewDS;
      this.listItemHeight = select(".e-list-item", this.listViewInstance.element).getBoundingClientRect().height;
      this.totalHeight = Object.keys(curViewDS).length * this.listItemHeight - this.domItemCount * this.listItemHeight;
      if (this.listViewInstance.isWindow) {
        startingHeight = this.listViewInstance.ulElement.getBoundingClientRect().top - document.documentElement.getBoundingClientRect().top;
      } else {
        startingHeight = this.listViewInstance.headerEle ? this.listViewInstance.headerEle.getBoundingClientRect().height : 0;
      }
      this.scrollPosition = isNullOrUndefined(this.scrollPosition) ? 0 : this.scrollPosition;
      var scroll = this.getscrollerHeight(startingHeight);
      this.topElementHeight = this.listItemHeight * Math.floor(scroll / this.listItemHeight);
      this.bottomElementHeight = this.totalHeight - this.topElementHeight;
      _a = scroll <= this.totalHeight ? [this.topElementHeight, this.bottomElementHeight] : [this.totalHeight, 0], this.topElementHeight = _a[0], this.bottomElementHeight = _a[1];
      if (this.topElementHeight !== parseFloat(this.topElement.style.height)) {
        this.topElement.style.height = this.topElementHeight + "px";
        this.bottomElement.style.height = this.bottomElementHeight + "px";
        if (scroll > this.scrollPosition) {
          var listDiff = Math.round(this.topElementHeight / this.listItemHeight - this.listDiff);
          if (listDiff > this.expectedDomItemCount + 5) {
            this.onLongScroll(listDiff, true);
          } else {
            this.onNormalScroll(listDiff, true);
          }
        } else {
          var listDiff = Math.round(this.listDiff - this.topElementHeight / this.listItemHeight);
          if (listDiff > this.expectedDomItemCount + 5) {
            this.onLongScroll(listDiff, false);
          } else {
            this.onNormalScroll(listDiff, false);
          }
        }
      }
      this.listDiff = Math.round(this.topElementHeight / this.listItemHeight);
      if (typeof this.listViewInstance.onUIScrolled === "function") {
        this.listViewInstance.onUIScrolled();
      }
      this.scrollPosition = scroll;
    };
    Virtualization2.prototype.onLongScroll = function(listDiff, isScrollingDown) {
      var index = isScrollingDown ? this.uiFirstIndex + listDiff : this.uiFirstIndex - listDiff;
      var elements = this.listViewInstance.ulElement.querySelectorAll("li");
      for (var i = 0; i < elements.length; i++) {
        this.updateUI(elements[i], index);
        index++;
      }
      this.uiLastIndex = isScrollingDown ? this.uiLastIndex + listDiff : this.uiLastIndex - listDiff;
      this.uiFirstIndex = isScrollingDown ? this.uiFirstIndex + listDiff : this.uiFirstIndex - listDiff;
    };
    Virtualization2.prototype.onNormalScroll = function(listDiff, isScrollingDown) {
      if (isScrollingDown) {
        for (var i = 0; i < listDiff; i++) {
          var index = ++this.uiLastIndex;
          this.updateUI(this.topElement.nextElementSibling, index, this.bottomElement);
          this.uiFirstIndex++;
        }
      } else {
        for (var i = 0; i < listDiff; i++) {
          var index = --this.uiFirstIndex;
          var target = this.topElement.nextSibling;
          this.updateUI(this.bottomElement.previousElementSibling, index, target);
          this.uiLastIndex--;
        }
      }
    };
    Virtualization2.prototype.updateUiContent = function(element2, index) {
      var curViewDs = this.listViewInstance.curViewDS;
      if (typeof this.listViewInstance.dataSource[0] === "string" || typeof this.listViewInstance.dataSource[0] === "number") {
        element2.dataset.uid = ListBase.generateId();
        element2.getElementsByClassName(classNames4.listItemText)[0].innerHTML = this.listViewInstance.curViewDS[index].toString();
      } else {
        element2.dataset.uid = curViewDs[parseInt(index.toString(), 10)][this.listViewInstance.fields.id] ? curViewDs[parseInt(index.toString(), 10)][this.listViewInstance.fields.id] : ListBase.generateId();
        element2.getElementsByClassName(classNames4.listItemText)[0].innerHTML = curViewDs[parseInt(index.toString(), 10)][this.listViewInstance.fields.text];
      }
      if (this.listViewInstance.showIcon) {
        if (element2.querySelector("." + classNames4.listIcon)) {
          detach(element2.querySelector("." + classNames4.listIcon));
        }
        if (this.listViewInstance.curViewDS[index][this.listViewInstance.fields.iconCss]) {
          var textContent = element2.querySelector("." + classNames4.textContent);
          var curViewDS = this.listViewInstance.curViewDS[index];
          var iconCss = curViewDS[this.listViewInstance.fields.iconCss].toString();
          var target = this.listViewInstance.createElement("div", {
            className: classNames4.listIcon + " " + iconCss
          });
          textContent.insertBefore(target, element2.querySelector("." + classNames4.listItemText));
        }
      }
      if (this.listViewInstance.showCheckBox && this.listViewInstance.fields.groupBy) {
        if (!this.checkListWrapper) {
          this.checkListWrapper = this.listViewInstance.curUL.querySelector("." + classNames4.checkboxWrapper).cloneNode(true);
        }
        var textContent = element2.querySelector("." + classNames4.textContent);
        if (this.listViewInstance.curViewDS[index].isHeader) {
          if (element2.querySelector("." + classNames4.checkboxWrapper)) {
            element2.classList.remove(classNames4.checklist);
            textContent.classList.remove(classNames4.checkbox);
            detach(element2.querySelector("." + classNames4.checkboxWrapper));
          }
        } else {
          if (!element2.querySelector("." + classNames4.checkboxWrapper)) {
            element2.classList.add(classNames4.checklist);
            textContent.classList.add(classNames4.checkbox);
            if (this.listViewInstance.checkBoxPosition === "Left") {
              textContent.classList.add("e-checkbox-left");
            } else {
              textContent.classList.add("e-checkbox-right");
            }
            textContent.append(this.checkListWrapper.cloneNode(true));
          }
        }
      }
    };
    Virtualization2.prototype.changeElementAttributes = function(element2, index) {
      element2.classList.remove(classNames4.disable);
      if (this.uiIndices.disabledItemIndices.length && this.uiIndices.disabledItemIndices.indexOf(index) !== -1) {
        element2.classList.add(classNames4.disable);
      }
      element2.style.display = "";
      if (this.uiIndices.hiddenItemIndices.length && this.uiIndices.hiddenItemIndices.indexOf(index) !== -1) {
        element2.style.display = "none";
      }
      if (this.listViewInstance.showCheckBox) {
        var checklistElement = element2.querySelector("." + classNames4.checkboxWrapper);
        element2.classList.remove(classNames4.selected);
        element2.classList.remove(classNames4.focused);
        if (checklistElement) {
          checklistElement.removeAttribute("aria-checked");
          checklistElement.firstElementChild.classList.remove(classNames4.checked);
        }
        if (this.uiIndices.activeIndices.length && this.uiIndices.activeIndices.indexOf(index) !== -1 && !this.listViewInstance.curUL.querySelector(classNames4.selected)) {
          element2.classList.add(classNames4.selected);
          checklistElement.firstElementChild.classList.add(classNames4.checked);
          checklistElement.setAttribute("aria-checked", "true");
          if (this.activeIndex === index) {
            element2.classList.add(classNames4.focused);
          }
        }
      } else {
        element2.classList.remove(classNames4.selected);
        element2.removeAttribute("aria-selected");
        if (!isNullOrUndefined(this.activeIndex) && this.activeIndex === index && !this.listViewInstance.curUL.querySelector(classNames4.selected)) {
          element2.classList.add(classNames4.selected);
          element2.setAttribute("aria-selected", "true");
        }
      }
      if (this.listViewInstance.fields.groupBy) {
        if (this.listViewInstance.curViewDS[index].isHeader) {
          if (element2.classList.contains(classNames4.listItem)) {
            element2.classList.remove(classNames4.listItem);
            element2.setAttribute("role", "group");
            element2.classList.add(classNames4.groupListItem);
          }
        } else {
          if (element2.classList.contains(classNames4.groupListItem)) {
            element2.classList.remove(classNames4.groupListItem);
            element2.setAttribute("role", "listitem");
            element2.classList.add(classNames4.listItem);
          }
        }
      }
    };
    Virtualization2.prototype.findDSAndIndexFromId = function(ds, fields) {
      var _this = this;
      var resultJSON = {};
      fields = this.listViewInstance.getElementUID(fields);
      if (!isNullOrUndefined(fields)) {
        ds.some(function(data, index) {
          if (fields[_this.listViewInstance.fields.id] && fields[_this.listViewInstance.fields.id] === (data[_this.listViewInstance.fields.id] && data[_this.listViewInstance.fields.id]) || fields === data) {
            resultJSON.index = index;
            resultJSON.data = data;
            return true;
          } else {
            return false;
          }
        });
      }
      return resultJSON;
    };
    Virtualization2.prototype.getSelectedItems = function() {
      var _this = this;
      if (!isNullOrUndefined(this.activeIndex) || this.listViewInstance.showCheckBox && this.uiIndices.activeIndices.length) {
        var dataCollection = [];
        var textCollection = [];
        if (typeof this.listViewInstance.dataSource[0] === "string" || typeof this.listViewInstance.dataSource[0] === "number") {
          var curViewDS_1 = this.listViewInstance.curViewDS;
          if (this.listViewInstance.showCheckBox) {
            var indices = this.uiIndices.activeIndices;
            for (var i = 0; i < indices.length; i++) {
              dataCollection.push(curViewDS_1[indices[i]]);
            }
            return {
              text: dataCollection,
              data: dataCollection,
              index: this.uiIndices.activeIndices.map(function(index) {
                return _this.listViewInstance.dataSource.indexOf(curViewDS_1[index]);
              })
            };
          } else {
            return {
              text: curViewDS_1[this.activeIndex],
              data: curViewDS_1[this.activeIndex],
              index: this.listViewInstance.dataSource.indexOf(curViewDS_1[this.activeIndex])
            };
          }
        } else {
          var curViewDS_2 = this.listViewInstance.curViewDS;
          var text = this.listViewInstance.fields.text;
          if (this.listViewInstance.showCheckBox) {
            var indexArray = this.uiIndices.activeIndices;
            for (var i = 0; i < indexArray.length; i++) {
              textCollection.push(curViewDS_2[indexArray[i]]["" + text]);
              dataCollection.push(curViewDS_2[indexArray[parseInt(i.toString(), 10)]]);
            }
            var dataSource_1 = this.listViewInstance.dataSource instanceof DataManager ? curViewDS_2 : this.listViewInstance.dataSource;
            return {
              text: textCollection,
              data: dataCollection,
              index: this.uiIndices.activeIndices.map(function(index) {
                return dataSource_1.indexOf(curViewDS_2[index]);
              })
            };
          } else {
            var dataSource = this.listViewInstance.dataSource instanceof DataManager ? curViewDS_2 : this.listViewInstance.dataSource;
            return {
              text: curViewDS_2[this.activeIndex][this.listViewInstance.fields.text],
              data: curViewDS_2[this.activeIndex],
              index: dataSource.indexOf(curViewDS_2[this.activeIndex])
            };
          }
        }
      } else {
        return void 0;
      }
    };
    Virtualization2.prototype.selectItem = function(obj) {
      var _this = this;
      var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);
      if (Object.keys(resutJSON).length) {
        var isSelected = this.activeIndex === resutJSON.index;
        var isChecked_1;
        this.activeIndex = resutJSON.index;
        if (this.listViewInstance.showCheckBox) {
          if (this.uiIndices.activeIndices.indexOf(resutJSON.index) === -1) {
            isChecked_1 = true;
            this.uiIndices.activeIndices.push(resutJSON.index);
          } else {
            isChecked_1 = false;
            this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(resutJSON.index), 1);
          }
          if (this.listViewInstance.curUL.querySelector("." + classNames4.focused)) {
            this.listViewInstance.curUL.querySelector("." + classNames4.focused).classList.remove(classNames4.focused);
          }
        }
        if (this.listViewInstance.getLiFromObjOrElement(obj)) {
          if (this.listViewInstance.showCheckBox) {
            this.listViewInstance.setCheckboxLI(this.listViewInstance.getLiFromObjOrElement(obj));
          } else {
            this.listViewInstance.setSelectLI(this.listViewInstance.getLiFromObjOrElement(obj));
          }
        } else {
          var eventArgs_1;
          if (typeof this.listViewInstance.dataSource[0] === "string" || typeof this.listViewInstance.dataSource[0] === "number") {
            eventArgs_1 = {
              text: this.listViewInstance.curViewDS[this.activeIndex],
              data: this.listViewInstance.curViewDS[this.activeIndex],
              index: this.activeIndex
            };
          } else {
            var curViewDS = this.listViewInstance.curViewDS;
            eventArgs_1 = {
              text: curViewDS[this.activeIndex][this.listViewInstance.fields.text],
              data: curViewDS[this.activeIndex],
              index: this.activeIndex
            };
          }
          if (this.listViewInstance.showCheckBox) {
            this.listViewInstance.trigger("select", eventArgs_1, function(observedArgs) {
              if (observedArgs.cancel) {
                if (!isChecked_1) {
                  eventArgs_1.isChecked = isChecked_1;
                  _this.uiIndices.activeIndices.push(resutJSON.index);
                } else {
                  eventArgs_1.isChecked = !isChecked_1;
                  _this.uiIndices.activeIndices.splice(_this.uiIndices.activeIndices.indexOf(resutJSON.index), 1);
                }
              }
            });
          } else if (!isSelected) {
            this.listViewInstance.removeSelect();
            this.listViewInstance.trigger("select", eventArgs_1, function(observedArgs) {
              if (observedArgs.cancel) {
                _this.activeIndex = void 0;
              }
            });
          }
        }
      } else if (isNullOrUndefined(obj) && !this.listViewInstance.showCheckBox) {
        this.listViewInstance.removeSelect();
        this.activeIndex = void 0;
      }
    };
    Virtualization2.prototype.enableItem = function(obj) {
      var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);
      if (Object.keys(resutJSON).length) {
        this.uiIndices.disabledItemIndices.splice(this.uiIndices.disabledItemIndices.indexOf(resutJSON.index), 1);
      }
    };
    Virtualization2.prototype.disableItem = function(obj) {
      var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);
      if (Object.keys(resutJSON).length && this.uiIndices.disabledItemIndices.indexOf(resutJSON.index) === -1) {
        this.uiIndices.disabledItemIndices.push(resutJSON.index);
      }
    };
    Virtualization2.prototype.showItem = function(obj) {
      var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);
      if (Object.keys(resutJSON).length) {
        this.uiIndices.hiddenItemIndices.splice(this.uiIndices.hiddenItemIndices.indexOf(resutJSON.index), 1);
      }
    };
    Virtualization2.prototype.hideItem = function(obj) {
      var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);
      if (Object.keys(resutJSON).length && this.uiIndices.hiddenItemIndices.indexOf(resutJSON.index) === -1) {
        this.uiIndices.hiddenItemIndices.push(resutJSON.index);
      }
    };
    Virtualization2.prototype.removeItem = function(obj) {
      var dataSource;
      var curViewDS = this.listViewInstance.curViewDS;
      var resutJSON = this.findDSAndIndexFromId(curViewDS, obj);
      if (Object.keys(resutJSON).length) {
        dataSource = resutJSON.data;
        if (curViewDS[resutJSON.index - 1] && curViewDS[resutJSON.index - 1].isHeader && curViewDS[resutJSON.index - 1].items.length === 1) {
          this.removeUiItem(resutJSON.index - 1);
          this.removeUiItem(resutJSON.index - 1);
        } else {
          this.removeUiItem(resutJSON.index);
        }
      }
      var listDataSource = this.listViewInstance.dataSource instanceof DataManager ? this.listViewInstance.localData : this.listViewInstance.dataSource;
      var index = listDataSource.indexOf(dataSource);
      if (index !== -1) {
        listDataSource.splice(index, 1);
        this.listViewInstance.setViewDataSource(listDataSource);
      }
      this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll("li");
    };
    Virtualization2.prototype.setCheckboxLI = function(li, e) {
      var index = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll("li"), li) + this.uiFirstIndex;
      this.activeIndex = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll("li"), li) + this.uiFirstIndex;
      if (li.classList.contains(classNames4.selected)) {
        if (this.uiIndices.activeIndices.indexOf(index) === -1) {
          this.uiIndices.activeIndices.push(index);
        }
      } else {
        this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(index), 1);
      }
    };
    Virtualization2.prototype.setSelectLI = function(li, e) {
      this.activeIndex = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll("li"), li) + this.uiFirstIndex;
    };
    Virtualization2.prototype.checkedItem = function(checked) {
      if (checked) {
        this.uiIndices.activeIndices = [];
        this.activeIndex = void 0;
        var data = this.listViewInstance.curViewDS;
        for (var index = 0; index < data.length; index++) {
          if (!data[index].isHeader) {
            this.uiIndices.activeIndices.push(index);
          }
        }
      } else {
        this.activeIndex = void 0;
        this.uiIndices.activeIndices = [];
      }
    };
    Virtualization2.prototype.addUiItem = function(index) {
      var curViewDs = this.listViewInstance.curViewDS;
      this.changeUiIndices(index, true);
      if (this.activeIndex && this.activeIndex >= index) {
        this.activeIndex++;
      }
      if (this.listViewInstance.showCheckBox && curViewDs[index][this.listViewInstance.fields.isChecked]) {
        this.uiIndices.activeIndices.push(index);
      }
      if (!parseFloat(this.bottomElement.style.height) && !parseFloat(this.topElement.style.height)) {
        this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) + this.listItemHeight + "px";
      }
      if (parseFloat(this.bottomElement.style.height)) {
        var liItem = this.listViewInstance.curUL.lastElementChild.previousSibling;
        var target = this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 1]) || this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 2]);
        if (target) {
          this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) + this.listItemHeight + "px";
          this.updateUI(liItem, index, target);
        }
      } else {
        var liItem = this.listViewInstance.curUL.firstElementChild.nextSibling;
        var target = void 0;
        if (Object.keys(this.listViewInstance.curViewDS).length - 1 === index) {
          target = this.listViewInstance.curUL.lastElementChild;
        } else {
          target = this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 1]) || this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 2]);
        }
        this.topElement.style.height = parseFloat(this.topElement.style.height) + this.listItemHeight + "px";
        this.uiFirstIndex++;
        this.uiLastIndex++;
        if (target) {
          this.updateUI(liItem, index, target);
          if (this.listViewInstance.isWindow === true) {
            window.scrollTo(0, pageYOffset + this.listItemHeight);
          } else {
            this.listViewInstance.element.scrollTop += this.listItemHeight;
          }
        }
      }
      this.totalHeight += this.listItemHeight;
      this.listDiff = Math.round(parseFloat(this.topElement.style.height) / this.listItemHeight);
    };
    Virtualization2.prototype.removeUiItem = function(index) {
      this.totalHeight -= this.listItemHeight;
      var curViewDS = this.listViewInstance.curViewDS[index];
      var liItem = this.listViewInstance.getLiFromObjOrElement(curViewDS);
      this.listViewInstance.curViewDS.splice(index, 1);
      if (this.activeIndex && this.activeIndex >= index) {
        this.activeIndex--;
      }
      if (liItem) {
        if (this.domItemCount > Object.keys(this.listViewInstance.curViewDS).length) {
          detach(liItem);
          this.domItemCount--;
          this.uiLastIndex--;
          this.totalHeight = 0;
        } else {
          if (liItem.classList.contains(classNames4.disable)) {
            liItem.classList.remove(classNames4.disable);
            this.uiIndices.disabledItemIndices.splice(this.uiIndices.disabledItemIndices.indexOf(index), 1);
          }
          if (liItem.style.display === "none") {
            liItem.style.display = "";
            this.uiIndices.hiddenItemIndices.splice(this.uiIndices.hiddenItemIndices.indexOf(index), 1);
          }
          if (this.listViewInstance.showCheckBox && liItem.classList.contains(classNames4.selected)) {
            this.listViewInstance.removeSelect();
            this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(index), 1);
            var checklistElement = liItem.querySelector("." + classNames4.checkboxWrapper);
            checklistElement.removeAttribute("aria-checked");
            checklistElement.firstElementChild.classList.remove(classNames4.checked);
            if (liItem.classList.contains(classNames4.focused)) {
              liItem.classList.remove(classNames4.focused);
              this.activeIndex = void 0;
            }
          } else if (liItem.classList.contains(classNames4.selected)) {
            this.listViewInstance.removeSelect();
            this.activeIndex = void 0;
          }
          if (!parseFloat(this.bottomElement.style.height) && !parseFloat(this.topElement.style.height)) {
            this.updateUI(liItem, this.uiLastIndex, this.bottomElement);
          } else if (parseFloat(this.bottomElement.style.height)) {
            this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) - this.listItemHeight + "px";
            this.updateUI(liItem, this.uiLastIndex, this.bottomElement);
          } else {
            this.topElement.style.height = parseFloat(this.topElement.style.height) - this.listItemHeight + "px";
            this.updateUI(liItem, this.uiFirstIndex - 1, this.topElement.nextSibling);
            this.uiLastIndex--;
            this.uiFirstIndex--;
          }
        }
      }
      this.changeUiIndices(index, false);
      this.listDiff = Math.round(parseFloat(this.topElement.style.height) / this.listItemHeight);
    };
    Virtualization2.prototype.changeUiIndices = function(index, increment) {
      var keys = Object.keys(this.uiIndices);
      for (var ind = 0; ind < keys.length; ind++) {
        this.uiIndices[keys[ind]] = this.uiIndices[keys[ind]].map(function(i) {
          if (i >= index) {
            return increment ? ++i : --i;
          } else {
            return i;
          }
        });
      }
    };
    Virtualization2.prototype.addItem = function(data, fields, dataSource, index) {
      for (var i = 0; i < data.length; i++) {
        var currentItem = data[i];
        dataSource = this.listViewInstance.addItemAtIndex(index, dataSource, currentItem);
        this.listViewInstance.setViewDataSource(dataSource);
        if (!this.domItemCount) {
          if ((this.listViewInstance.template || this.listViewInstance.groupTemplate) && !this.isNgTemplate()) {
            this.listViewInstance.listBaseOption.template = null;
            this.listViewInstance.listBaseOption.groupTemplate = null;
            this.listViewInstance.listBaseOption.itemCreated = this.createUIItem.bind(this);
          }
          this.uiVirtualization();
        } else if (this.domItemCount < this.expectedDomItemCount) {
          var ds = this.listViewInstance.findItemFromDS(dataSource, fields);
          if (ds instanceof Array) {
            if (this.listViewInstance.ulElement) {
              var index_1 = this.listViewInstance.curViewDS.indexOf(currentItem);
              this.createAndInjectNewItem(currentItem, index_1);
              var curViewDS = this.listViewInstance.curViewDS[index_1 - 1];
              if (curViewDS && curViewDS.isHeader && curViewDS.items.length === 1) {
                --index_1;
                this.createAndInjectNewItem(curViewDS, index_1);
              }
            }
            this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll("li");
          }
        } else {
          var index_2 = this.listViewInstance.curViewDS.indexOf(currentItem);
          this.addUiItem(index_2);
          var curViewDS = this.listViewInstance.curViewDS[index_2 - 1];
          if (curViewDS && curViewDS.isHeader && curViewDS.items.length === 1) {
            this.addUiItem(index_2 - 1);
          }
        }
      }
    };
    Virtualization2.prototype.createAndInjectNewItem = function(itemData, index) {
      var target;
      var li = ListBase.createListItemFromJson(this.listViewInstance.createElement, [itemData], this.listViewInstance.listBaseOption, null, null, this.listViewInstance);
      if (Object.keys(this.listViewInstance.curViewDS).length - 1 === index) {
        target = this.listViewInstance.curUL.lastElementChild;
      } else {
        target = this.listViewInstance.getLiFromObjOrElement(this.listViewInstance.curViewDS[index + 1]) || this.listViewInstance.getLiFromObjOrElement(this.listViewInstance.curViewDS[index + 2]);
      }
      if (this.listViewInstance.fields.groupBy && this.listViewInstance.curViewDS[index + 1] && this.listViewInstance.curViewDS[index + 1].isHeader) {
        var targetEle = this.listViewInstance.getLiFromObjOrElement(this.listViewInstance.curViewDS[index - 1]);
        if (targetEle) {
          target = targetEle.nextElementSibling;
        }
      }
      this.listViewInstance.ulElement.insertBefore(li[0], target);
      this.domItemCount++;
      if (this.bottomElementHeight <= 0) {
        this.uiLastIndex++;
      }
      this.refreshItemHeight();
    };
    Virtualization2.prototype.createUIItem = function(args) {
      if (!args.item.classList.contains("e-list-group-item")) {
        this.templateData = args.curData.isHeader ? args.curData.items[0] : args.curData;
        if (this.listViewInstance.showCheckBox) {
          this.listViewInstance.renderCheckbox(args);
          if (!isNullOrUndefined(this.listViewInstance.virtualCheckBox) && !isNullOrUndefined(this.listViewInstance.virtualCheckBox.outerHTML)) {
            var div_1 = document.createElement("div");
            var commonTemplate = '<div class="e-text-content" role="presentation"> <span class="e-list-text"> ${' + this.listViewInstance.fields.text + "} </span></div>";
            var templateFunction = compile(this.listViewInstance.template || commonTemplate, this.listViewInstance);
            var nodes = templateFunction(this.templateData, this.listViewInstance);
            if (this.listViewInstance.template && this.listViewInstance.isReact) {
              this.listViewInstance.renderReactTemplates();
            }
            [].slice.call(nodes).forEach(function(ele) {
              div_1.appendChild(ele);
            });
            if (div_1.children && div_1.children[0]) {
              div_1.children[0].classList.add("e-checkbox");
              if (this.listViewInstance.checkBoxPosition === "Left") {
                div_1.children[0].classList.add("e-checkbox-left");
              } else {
                div_1.children[0].classList.add("e-checkbox-right");
              }
              if (this.listViewInstance.checkBoxPosition === "Left") {
                div_1.children[0].insertBefore(this.listViewInstance.virtualCheckBox, div_1.childNodes[0].children[0]);
              } else {
                div_1.children[0].appendChild(this.listViewInstance.virtualCheckBox);
              }
              while (args.item.lastChild) {
                args.item.removeChild(args.item.lastChild);
              }
              [].slice.call(div_1.children).forEach(function(ele) {
                args.item.appendChild(ele);
              });
            }
          }
        }
      }
    };
    Virtualization2.prototype.reRenderUiVirtualization = function() {
      this.wireScrollEvent(true);
      if (this.listViewInstance.contentContainer) {
        detach(this.listViewInstance.contentContainer);
      }
      this.listViewInstance.preRender();
      this.domItemCount = 0;
      this.listViewInstance.header();
      this.listViewInstance.setLocalData();
    };
    Virtualization2.prototype.updateUI = function(element2, index, targetElement2) {
      var onChange = this.isNgTemplate() ? this.onNgChange : this.onChange;
      if (this.listViewInstance.template || this.listViewInstance.groupTemplate) {
        var curViewDS = this.listViewInstance.curViewDS[index];
        element2.dataset.uid = curViewDS[this.listViewInstance.fields.id] ? curViewDS[this.listViewInstance.fields.id] : ListBase.generateId();
        onChange(curViewDS, element2, this);
      } else {
        this.updateUiContent(element2, index);
      }
      this.changeElementAttributes(element2, index);
      if (targetElement2) {
        this.listViewInstance.ulElement.insertBefore(element2, targetElement2);
      }
    };
    Virtualization2.prototype.onChange = function(newData, listElement, virtualThis) {
      var liItem = ListBase.createListItemFromJson(virtualThis.listViewInstance.createElement, [newData], virtualThis.listViewInstance.listBaseOption, null, null, virtualThis.listViewInstance);
      if (virtualThis.listViewInstance.isReact) {
        virtualThis.listViewInstance.renderReactTemplates();
      }
      while (listElement.lastChild) {
        listElement.removeChild(listElement.lastChild);
      }
      [].slice.call(liItem[0].children).forEach(function(ele) {
        listElement.appendChild(ele);
      });
    };
    Virtualization2.prototype.onNgChange = function(newData, listElement, virtualThis) {
      var templateCompiler = compile(virtualThis.listViewInstance.template);
      var resultElement = templateCompiler(newData);
      while (listElement.lastChild) {
        listElement.removeChild(listElement.lastChild);
      }
      listElement.appendChild(resultElement[0]);
    };
    Virtualization2.prototype.getModuleName = function() {
      return "virtualization";
    };
    Virtualization2.prototype.destroy = function() {
      this.wireScrollEvent(true);
      this.topElement = null;
      this.bottomElement = null;
    };
    return Virtualization2;
  }()
);

// node_modules/@syncfusion/ej2-lists/src/sortable/sortable.js
var __extends32 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate30 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Sortable = (
  /** @class */
  function(_super) {
    __extends32(Sortable2, _super);
    function Sortable2(element2, options) {
      var _this = _super.call(this, options, element2) || this;
      _this.getHelper = function(e) {
        var target = _this.getSortableElement(e.sender.target);
        if (!_this.isValidTarget(target, _this)) {
          return false;
        }
        var element3;
        if (_this.helper) {
          element3 = _this.helper({
            sender: target,
            element: e.element
          });
        } else {
          element3 = target.cloneNode(true);
          element3.style.width = target.offsetWidth + "px";
          element3.style.height = target.offsetHeight + "px";
        }
        addClass([element3], ["e-sortableclone"]);
        document.body.appendChild(element3);
        return element3;
      };
      _this.onDrag = function(e) {
        if (!e.target) {
          return;
        }
        _this.trigger("drag", {
          event: e.event,
          element: _this.element,
          target: e.target
        });
        var newInst = _this.getSortableInstance(e.target);
        var target = _this.getSortableElement(e.target, newInst);
        if ((_this.isValidTarget(target, newInst) || e.target && typeof e.target.className === "string" && e.target.className.indexOf("e-list-group-item") > -1) && (_this.curTarget !== target || !isNullOrUndefined(newInst.placeHolder)) && (newInst.placeHolderElement ? newInst.placeHolderElement !== e.target : true)) {
          if (e.target.classList.contains("e-list-group-item")) {
            target = e.target;
          }
          _this.curTarget = target;
          if (_this.target === target) {
            return;
          }
          var oldIdx = _this.getIndex(newInst.placeHolderElement, newInst);
          var placeHolder = _this.getPlaceHolder(target, newInst);
          var newIdx = void 0;
          if (placeHolder) {
            oldIdx = isNullOrUndefined(oldIdx) ? _this.getIndex(_this.target) : oldIdx;
            newIdx = _this.getIndex(target, newInst, e.event);
            var isPlaceHolderPresent = _this.isPlaceHolderPresent(newInst);
            if (isPlaceHolderPresent && oldIdx === newIdx) {
              return;
            }
            if (isPlaceHolderPresent) {
              _this.removePlaceHolder(newInst);
            }
            newInst.placeHolderElement = placeHolder;
            if (e.target && typeof e.target.className === "string" && e.target.className.indexOf("e-list-group-item") > -1) {
              newInst.element.insertBefore(newInst.placeHolderElement, newInst.element.children[newIdx]);
            } else if (newInst.element !== _this.element && newIdx === newInst.element.childElementCount) {
              newInst.element.appendChild(newInst.placeHolderElement);
            } else {
              newInst.element.insertBefore(newInst.placeHolderElement, newInst.element.children[newIdx]);
            }
          } else {
            oldIdx = isNullOrUndefined(oldIdx) ? _this.getIndex(_this.target) : _this.getIndex(target, newInst) < oldIdx || !oldIdx ? oldIdx : oldIdx - 1;
            newIdx = _this.getIndex(target, newInst);
            var idx = newInst.element !== _this.element ? newIdx : oldIdx < newIdx ? newIdx + 1 : newIdx;
            _this.updateItemClass(newInst);
            newInst.element.insertBefore(_this.target, newInst.element.children[idx]);
            _this.curTarget = _this.target;
            _this.trigger("drop", {
              droppedElement: _this.target,
              element: newInst.element,
              previousIndex: oldIdx,
              currentIndex: newIdx,
              target: e.target,
              helper: document.getElementsByClassName("e-sortableclone")[0],
              event: e.event,
              scope: _this.scope
            });
          }
        } else if (_this.curTarget !== _this.target && _this.scope && _this.curTarget !== target && !isNullOrUndefined(newInst.placeHolder)) {
          _this.removePlaceHolder(_this.getSortableInstance(_this.curTarget));
          _this.curTarget = _this.target;
        }
        newInst = _this.getSortableInstance(_this.curTarget);
        if (isNullOrUndefined(target) && e.target !== newInst.placeHolderElement) {
          if (_this.isPlaceHolderPresent(newInst)) {
            _this.removePlaceHolder(newInst);
          }
        } else {
          var placeHolders = [].slice.call(document.getElementsByClassName("e-sortable-placeholder"));
          var inst_1;
          placeHolders.forEach(function(placeHolder2) {
            inst_1 = _this.getSortableInstance(placeHolder2);
            if (inst_1.element && inst_1 !== newInst) {
              _this.removePlaceHolder(inst_1);
            }
          });
        }
      };
      _this.onDragStart = function(e) {
        _this.target = _this.getSortableElement(e.target);
        if (isNullOrUndefined(_this.target) && closest(_this.element, ".e-listbox-container") && Browser.isDevice) {
          detach(e.dragElement);
          getComponent(_this.element, "draggable").intDestroy(e.event);
          return;
        }
        var cancelDrag = false;
        _this.target.classList.add("e-grabbed");
        _this.curTarget = _this.target;
        e.helper = document.getElementsByClassName("e-sortableclone")[0];
        var args = {
          cancel: false,
          element: _this.element,
          target: _this.target
        };
        _this.trigger("beforeDragStart", args, function(observedArgs) {
          if (observedArgs.cancel) {
            cancelDrag = observedArgs.cancel;
            _this.onDragStop(e);
          }
        });
        if (cancelDrag) {
          return;
        }
        if (isBlazor) {
          _this.trigger("dragStart", {
            event: e.event,
            element: _this.element,
            target: _this.target,
            bindEvents: e.bindEvents,
            dragElement: e.dragElement
          });
        } else {
          _this.trigger("dragStart", {
            event: e.event,
            element: _this.element,
            target: _this.target
          });
        }
      };
      _this.onDragStop = function(e) {
        var dropInst = _this.getSortableInstance(_this.curTarget);
        var prevIdx;
        var curIdx;
        var handled;
        prevIdx = _this.getIndex(_this.target);
        var isPlaceHolderPresent = _this.isPlaceHolderPresent(dropInst);
        if (isPlaceHolderPresent) {
          var curIdx_1 = _this.getIndex(dropInst.placeHolderElement, dropInst);
          prevIdx = _this === dropInst && prevIdx - curIdx_1 >= 1 ? prevIdx - 1 : prevIdx;
          var args = {
            previousIndex: prevIdx,
            currentIndex: curIdx_1,
            target: e.target,
            droppedElement: _this.target,
            helper: e.helper,
            cancel: false,
            handled: false
          };
          _this.trigger("beforeDrop", args, function(observedArgs) {
            if (!observedArgs.cancel) {
              handled = observedArgs.handled;
              _this.updateItemClass(dropInst);
              if (observedArgs.handled) {
                var ele = _this.target.cloneNode(true);
                _this.target.classList.remove("e-grabbed");
                _this.target = ele;
              }
              dropInst.element.insertBefore(_this.target, dropInst.placeHolderElement);
              var curIdx_2 = _this.getIndex(_this.target, dropInst);
              if (observedArgs.currentIndex > observedArgs.previousIndex) {
                prevIdx = _this === dropInst && prevIdx - curIdx_2 >= 1 ? prevIdx - 1 : prevIdx;
              }
              _this.trigger("drop", {
                event: e.event,
                element: dropInst.element,
                previousIndex: prevIdx,
                currentIndex: curIdx_2,
                target: e.target,
                helper: e.helper,
                droppedElement: _this.target,
                scopeName: _this.scope,
                handled
              });
            }
            _this.removePlaceHolder(dropInst);
          });
        }
        dropInst = _this.getSortableInstance(e.target);
        curIdx = dropInst.element.childElementCount;
        prevIdx = _this.getIndex(_this.target);
        if (dropInst.element.querySelector(".e-list-nrt")) {
          curIdx = curIdx - 1;
        }
        if (_this.curTarget === _this.target && e.target === _this.curTarget) {
          curIdx = prevIdx;
        }
        if (dropInst.element === e.target || !isPlaceHolderPresent && _this.curTarget === _this.target) {
          var beforeDropArgs = {
            previousIndex: prevIdx,
            currentIndex: curIdx,
            target: e.target,
            droppedElement: _this.target,
            helper: e.helper,
            cancel: false
          };
          _this.trigger("beforeDrop", beforeDropArgs, function(observedArgs) {
            if ((dropInst.element === e.target || typeof e.target.className === "string" && e.target.className.indexOf("e-list-nrt") > -1 || typeof e.target.className === "string" && e.target.className.indexOf("e-list-nr-template") > -1 || e.target.closest(".e-list-nr-template")) && !observedArgs.cancel) {
              _this.updateItemClass(dropInst);
              dropInst.element.appendChild(_this.target);
              _this.trigger("drop", {
                event: e.event,
                element: dropInst.element,
                previousIndex: prevIdx,
                currentIndex: curIdx,
                target: e.target,
                helper: e.helper,
                droppedElement: _this.target,
                scopeName: _this.scope
              });
            }
          });
        }
        _this.target.classList.remove("e-grabbed");
        _this.target = null;
        _this.curTarget = null;
        remove(e.helper);
        getComponent(_this.element, "draggable").intDestroy(e.event);
      };
      _this.bind();
      return _this;
    }
    Sortable_1 = Sortable2;
    Sortable2.prototype.bind = function() {
      if (!this.element.id) {
        this.element.id = getUniqueID("sortable");
      }
      if (!this.itemClass) {
        this.itemClass = "e-sort-item";
        this.dataBind();
      }
      this.initializeDraggable();
    };
    Sortable2.prototype.initializeDraggable = function() {
      new Draggable(this.element, {
        helper: this.getHelper,
        dragStart: this.onDragStart,
        drag: this.onDrag,
        dragStop: this.onDragStop,
        dragTarget: "." + this.itemClass,
        enableTapHold: true,
        tapHoldThreshold: 200,
        queryPositionInfo: this.queryPositionInfo,
        distance: 1
      });
      this.wireEvents();
    };
    Sortable2.prototype.wireEvents = function() {
      var wrapper = this.element;
      EventHandler.add(wrapper, "keydown", this.keyDownHandler, this);
    };
    Sortable2.prototype.unwireEvents = function() {
      var wrapper = this.element;
      EventHandler.remove(wrapper, "keydown", this.keyDownHandler);
    };
    Sortable2.prototype.keyDownHandler = function(e) {
      if (e.keyCode === 27) {
        var dragStop = getComponent(this.element, "draggable");
        if (dragStop) {
          dragStop.intDestroy(null);
        }
        var dragWrapper = document.getElementsByClassName("e-sortableclone")[0];
        if (dragWrapper) {
          dragWrapper.remove();
        }
        var dragPlaceholder = document.getElementsByClassName("e-sortable-placeholder")[0];
        if (dragPlaceholder) {
          dragPlaceholder.remove();
        }
      }
    };
    Sortable2.prototype.getPlaceHolder = function(target, instance) {
      if (instance.placeHolder) {
        var placeHolderElement = instance.placeHolder({
          element: instance.element,
          grabbedElement: this.target,
          target
        });
        placeHolderElement.classList.add("e-sortable-placeholder");
        return placeHolderElement;
      }
      return null;
    };
    Sortable2.prototype.isValidTarget = function(target, instance) {
      return target && compareElementParent(target, instance.element) && target.classList.contains(instance.itemClass) && !target.classList.contains("e-disabled");
    };
    Sortable2.prototype.removePlaceHolder = function(instance) {
      remove(instance.placeHolderElement);
      instance.placeHolderElement = null;
    };
    Sortable2.prototype.updateItemClass = function(instance) {
      if (this !== instance) {
        this.target.classList.remove(this.itemClass);
        this.target.classList.add(instance.itemClass);
      }
    };
    Sortable2.prototype.getSortableInstance = function(element2) {
      element2 = closest(element2, ".e-" + this.getModuleName());
      if (element2) {
        var inst = getComponent(element2, Sortable_1);
        return inst.scope && this.scope && inst.scope === this.scope ? inst : this;
      } else {
        return this;
      }
    };
    Sortable2.prototype.getIndex = function(target, instance, e) {
      if (instance === void 0) {
        instance = this;
      }
      var idx;
      var placeHolderPresent;
      [].slice.call(instance.element.children).forEach(function(element2, index) {
        if (element2.classList.contains("e-sortable-placeholder")) {
          placeHolderPresent = true;
        }
        if (element2 === target) {
          idx = index;
          if (!isNullOrUndefined(e)) {
            if (placeHolderPresent) {
              idx -= 1;
            }
            var offset = target.getBoundingClientRect();
            var clientY = offset.bottom - (offset.bottom - offset.top) / 2;
            var cltY = e.changedTouches ? e.changedTouches[0].clientY : e.clientY;
            idx = cltY <= clientY ? idx : idx + 1;
          }
          return;
        }
      });
      return idx;
    };
    Sortable2.prototype.getSortableElement = function(element2, instance) {
      if (instance === void 0) {
        instance = this;
      }
      return closest(element2, "." + instance.itemClass);
    };
    Sortable2.prototype.queryPositionInfo = function(value) {
      value.left = scrollX ? parseFloat(value.left) - scrollX + "px" : value.left;
      value.top = scrollY ? parseFloat(value.top) - scrollY + "px" : value.top;
      return value;
    };
    Sortable2.prototype.isPlaceHolderPresent = function(instance) {
      return instance.placeHolderElement && !!closest(instance.placeHolderElement, "#" + instance.element.id);
    };
    Sortable2.prototype.moveTo = function(destination, targetIndexes, insertBefore) {
      moveTo(this.element, destination, targetIndexes, insertBefore);
    };
    Sortable2.prototype.destroy = function() {
      this.unwireEvents();
      if (this.itemClass === "e-sort-item") {
        this.itemClass = null;
        this.dataBind();
      }
      getComponent(this.element, Draggable).destroy();
      _super.prototype.destroy.call(this);
    };
    Sortable2.prototype.getModuleName = function() {
      return "sortable";
    };
    Sortable2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "itemClass":
            [].slice.call(this.element.children).forEach(function(element2) {
              if (element2.classList.contains(oldProp.itemClass)) {
                element2.classList.remove(oldProp.itemClass);
              }
              if (newProp.itemClass) {
                element2.classList.add(newProp.itemClass);
              }
            });
            break;
        }
      }
    };
    var Sortable_1;
    __decorate30([Property(false)], Sortable2.prototype, "enableAnimation", void 0);
    __decorate30([Property(null)], Sortable2.prototype, "itemClass", void 0);
    __decorate30([Property(null)], Sortable2.prototype, "scope", void 0);
    __decorate30([Property()], Sortable2.prototype, "helper", void 0);
    __decorate30([Property()], Sortable2.prototype, "placeHolder", void 0);
    __decorate30([Event()], Sortable2.prototype, "drag", void 0);
    __decorate30([Event()], Sortable2.prototype, "beforeDragStart", void 0);
    __decorate30([Event()], Sortable2.prototype, "dragStart", void 0);
    __decorate30([Event()], Sortable2.prototype, "beforeDrop", void 0);
    __decorate30([Event()], Sortable2.prototype, "drop", void 0);
    Sortable2 = Sortable_1 = __decorate30([NotifyPropertyChanges], Sortable2);
    return Sortable2;
  }(Base)
);
function moveTo(from, to, targetIndexes, insertBefore) {
  var targetElements = [];
  if (!to) {
    to = from;
  }
  if (targetIndexes && targetIndexes.length) {
    targetIndexes.forEach(function(index) {
      targetElements.push(from.children[index]);
    });
  } else {
    targetElements = [].slice.call(from.children);
  }
  if (isNullOrUndefined(insertBefore)) {
    targetElements.forEach(function(target) {
      to.appendChild(target);
    });
  } else {
    var insertElement_1 = to.children[insertBefore];
    targetElements.forEach(function(target) {
      to.insertBefore(target, insertElement_1);
    });
  }
}

// node_modules/@syncfusion/ej2-navigations/src/common/h-scroll.js
var __extends33 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate31 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_ROOT = "e-hscroll";
var CLS_RTL = "e-rtl";
var CLS_DISABLE = "e-overlay";
var CLS_HSCROLLBAR = "e-hscroll-bar";
var CLS_HSCROLLCON = "e-hscroll-content";
var CLS_NAVARROW = "e-nav-arrow";
var CLS_NAVRIGHTARROW = "e-nav-right-arrow";
var CLS_NAVLEFTARROW = "e-nav-left-arrow";
var CLS_HSCROLLNAV = "e-scroll-nav";
var CLS_HSCROLLNAVRIGHT = "e-scroll-right-nav";
var CLS_HSCROLLNAVLEFT = "e-scroll-left-nav";
var CLS_DEVICE = "e-scroll-device";
var CLS_OVERLAY = "e-scroll-overlay";
var CLS_RIGHTOVERLAY = "e-scroll-right-overlay";
var CLS_LEFTOVERLAY = "e-scroll-left-overlay";
var OVERLAY_MAXWID = 40;
var HScroll = (
  /** @class */
  function(_super) {
    __extends33(HScroll2, _super);
    function HScroll2(options, element2) {
      return _super.call(this, options, element2) || this;
    }
    HScroll2.prototype.preRender = function() {
      this.browser = Browser.info.name;
      this.browserCheck = this.browser === "mozilla";
      this.isDevice = Browser.isDevice;
      this.customStep = true;
      var element2 = this.element;
      this.ieCheck = this.browser === "edge" || this.browser === "msie";
      this.initialize();
      if (element2.id === "") {
        element2.id = getUniqueID("hscroll");
        this.uniqueId = true;
      }
      element2.style.display = "block";
      if (this.enableRtl) {
        element2.classList.add(CLS_RTL);
      }
    };
    HScroll2.prototype.render = function() {
      this.touchModule = new Touch(this.element, {
        scroll: this.touchHandler.bind(this),
        swipe: this.swipeHandler.bind(this)
      });
      EventHandler.add(this.scrollEle, "scroll", this.scrollHandler, this);
      if (!this.isDevice) {
        this.createNavIcon(this.element);
      } else {
        this.element.classList.add(CLS_DEVICE);
        this.createOverlay(this.element);
      }
      this.setScrollState();
    };
    HScroll2.prototype.setScrollState = function() {
      if (isNullOrUndefined(this.scrollStep) || this.scrollStep < 0) {
        this.scrollStep = this.scrollEle.offsetWidth;
        this.customStep = false;
      } else {
        this.customStep = true;
      }
    };
    HScroll2.prototype.initialize = function() {
      var scrollEle = this.createElement("div", {
        className: CLS_HSCROLLCON
      });
      var scrollDiv = this.createElement("div", {
        className: CLS_HSCROLLBAR
      });
      scrollDiv.setAttribute("tabindex", "-1");
      var ele = this.element;
      var innerEle = [].slice.call(ele.children);
      for (var _i = 0, innerEle_1 = innerEle; _i < innerEle_1.length; _i++) {
        var ele_1 = innerEle_1[_i];
        scrollEle.appendChild(ele_1);
      }
      scrollDiv.appendChild(scrollEle);
      ele.appendChild(scrollDiv);
      scrollDiv.style.overflowX = "hidden";
      this.scrollEle = scrollDiv;
      this.scrollItems = scrollEle;
    };
    HScroll2.prototype.getPersistData = function() {
      var keyEntity = ["scrollStep"];
      return this.addOnPersist(keyEntity);
    };
    HScroll2.prototype.getModuleName = function() {
      return "hScroll";
    };
    HScroll2.prototype.destroy = function() {
      var ele = this.element;
      ele.style.display = "";
      ele.classList.remove(CLS_ROOT);
      ele.classList.remove(CLS_DEVICE);
      ele.classList.remove(CLS_RTL);
      var nav = selectAll(".e-" + ele.id + "_nav." + CLS_HSCROLLNAV, ele);
      var overlay = selectAll("." + CLS_OVERLAY, ele);
      [].slice.call(overlay).forEach(function(ele2) {
        detach(ele2);
      });
      for (var _i = 0, _a = [].slice.call(this.scrollItems.children); _i < _a.length; _i++) {
        var elem = _a[_i];
        ele.appendChild(elem);
      }
      if (this.uniqueId) {
        this.element.removeAttribute("id");
      }
      detach(this.scrollEle);
      if (nav.length > 0) {
        detach(nav[0]);
        if (!isNullOrUndefined(nav[1])) {
          detach(nav[1]);
        }
      }
      EventHandler.remove(this.scrollEle, "scroll", this.scrollHandler);
      this.touchModule.destroy();
      this.touchModule = null;
      _super.prototype.destroy.call(this);
    };
    HScroll2.prototype.disable = function(value) {
      var navEles = selectAll(".e-scroll-nav:not(." + CLS_DISABLE + ")", this.element);
      if (value) {
        this.element.classList.add(CLS_DISABLE);
      } else {
        this.element.classList.remove(CLS_DISABLE);
      }
      [].slice.call(navEles).forEach(function(el) {
        el.setAttribute("tabindex", !value ? "0" : "-1");
      });
    };
    HScroll2.prototype.createOverlay = function(element2) {
      var id = element2.id.concat("_nav");
      var rightOverlayEle = this.createElement("div", {
        className: CLS_OVERLAY + " " + CLS_RIGHTOVERLAY
      });
      var clsRight = "e-" + element2.id.concat("_nav " + CLS_HSCROLLNAV + " " + CLS_HSCROLLNAVRIGHT);
      var rightEle = this.createElement("div", {
        id: id.concat("_right"),
        className: clsRight
      });
      var navItem = this.createElement("div", {
        className: CLS_NAVRIGHTARROW + " " + CLS_NAVARROW + " e-icons"
      });
      rightEle.appendChild(navItem);
      var leftEle = this.createElement("div", {
        className: CLS_OVERLAY + " " + CLS_LEFTOVERLAY
      });
      if (this.ieCheck) {
        rightEle.classList.add("e-ie-align");
      }
      element2.appendChild(rightOverlayEle);
      element2.appendChild(rightEle);
      element2.insertBefore(leftEle, element2.firstChild);
      this.eventBinding([rightEle]);
    };
    HScroll2.prototype.createNavIcon = function(element2) {
      var id = element2.id.concat("_nav");
      var clsRight = "e-" + element2.id.concat("_nav " + CLS_HSCROLLNAV + " " + CLS_HSCROLLNAVRIGHT);
      var rightAttributes = {
        "role": "button",
        "id": id.concat("_right"),
        "aria-label": "Scroll right"
      };
      var nav = this.createElement("div", {
        className: clsRight,
        attrs: rightAttributes
      });
      nav.setAttribute("aria-disabled", "false");
      var navItem = this.createElement("div", {
        className: CLS_NAVRIGHTARROW + " " + CLS_NAVARROW + " e-icons"
      });
      var clsLeft = "e-" + element2.id.concat("_nav " + CLS_HSCROLLNAV + " " + CLS_HSCROLLNAVLEFT);
      var leftAttributes = {
        "role": "button",
        "id": id.concat("_left"),
        "aria-label": "Scroll left"
      };
      var navEle = this.createElement("div", {
        className: clsLeft + " " + CLS_DISABLE,
        attrs: leftAttributes
      });
      navEle.setAttribute("aria-disabled", "true");
      var navLeftItem = this.createElement("div", {
        className: CLS_NAVLEFTARROW + " " + CLS_NAVARROW + " e-icons"
      });
      navEle.appendChild(navLeftItem);
      nav.appendChild(navItem);
      element2.appendChild(nav);
      element2.insertBefore(navEle, element2.firstChild);
      if (this.ieCheck) {
        nav.classList.add("e-ie-align");
        navEle.classList.add("e-ie-align");
      }
      this.eventBinding([nav, navEle]);
    };
    HScroll2.prototype.onKeyPress = function(e) {
      var _this = this;
      if (e.key === "Enter") {
        var timeoutFun_1 = function() {
          _this.keyTimeout = true;
          _this.eleScrolling(10, e.target, true);
        };
        this.keyTimer = window.setTimeout(function() {
          timeoutFun_1();
        }, 100);
      }
    };
    HScroll2.prototype.onKeyUp = function(e) {
      if (e.key !== "Enter") {
        return;
      }
      if (this.keyTimeout) {
        this.keyTimeout = false;
      } else {
        e.target.click();
      }
      clearTimeout(this.keyTimer);
    };
    HScroll2.prototype.eventBinding = function(ele) {
      var _this = this;
      [].slice.call(ele).forEach(function(el) {
        new Touch(el, {
          tapHold: _this.tabHoldHandler.bind(_this),
          tapHoldThreshold: 500
        });
        el.addEventListener("keydown", _this.onKeyPress.bind(_this));
        el.addEventListener("keyup", _this.onKeyUp.bind(_this));
        el.addEventListener("mouseup", _this.repeatScroll.bind(_this));
        el.addEventListener("touchend", _this.repeatScroll.bind(_this));
        el.addEventListener("contextmenu", function(e) {
          e.preventDefault();
        });
        EventHandler.add(el, "click", _this.clickEventHandler, _this);
      });
    };
    HScroll2.prototype.repeatScroll = function() {
      clearInterval(this.timeout);
    };
    HScroll2.prototype.tabHoldHandler = function(e) {
      var _this = this;
      var trgt = e.originalEvent.target;
      trgt = this.contains(trgt, CLS_HSCROLLNAV) ? trgt.firstElementChild : trgt;
      var scrollDis = 10;
      var timeoutFun = function() {
        _this.eleScrolling(scrollDis, trgt, true);
      };
      this.timeout = window.setInterval(function() {
        timeoutFun();
      }, 50);
    };
    HScroll2.prototype.contains = function(ele, className) {
      return ele.classList.contains(className);
    };
    HScroll2.prototype.eleScrolling = function(scrollDis, trgt, isContinuous) {
      var rootEle = this.element;
      var classList2 = trgt.classList;
      if (classList2.contains(CLS_HSCROLLNAV)) {
        classList2 = trgt.querySelector("." + CLS_NAVARROW).classList;
      }
      if (this.contains(rootEle, CLS_RTL) && this.browserCheck) {
        scrollDis = -scrollDis;
      }
      if (!this.contains(rootEle, CLS_RTL) || this.browserCheck || this.ieCheck) {
        if (classList2.contains(CLS_NAVRIGHTARROW)) {
          this.frameScrollRequest(scrollDis, "add", isContinuous);
        } else {
          this.frameScrollRequest(scrollDis, "", isContinuous);
        }
      } else {
        if (classList2.contains(CLS_NAVLEFTARROW)) {
          this.frameScrollRequest(scrollDis, "add", isContinuous);
        } else {
          this.frameScrollRequest(scrollDis, "", isContinuous);
        }
      }
    };
    HScroll2.prototype.clickEventHandler = function(e) {
      this.eleScrolling(this.scrollStep, e.target, false);
    };
    HScroll2.prototype.swipeHandler = function(e) {
      var swipeEle = this.scrollEle;
      var distance;
      if (e.velocity <= 1) {
        distance = e.distanceX / (e.velocity * 10);
      } else {
        distance = e.distanceX / e.velocity;
      }
      var start = 0.5;
      var animate = function() {
        var step = Math.sin(start);
        if (step <= 0) {
          window.cancelAnimationFrame(step);
        } else {
          if (e.swipeDirection === "Left") {
            swipeEle.scrollLeft += distance * step;
          } else if (e.swipeDirection === "Right") {
            swipeEle.scrollLeft -= distance * step;
          }
          start -= 0.5;
          window.requestAnimationFrame(animate);
        }
      };
      animate();
    };
    HScroll2.prototype.scrollUpdating = function(scrollVal, action) {
      if (action === "add") {
        this.scrollEle.scrollLeft += scrollVal;
      } else {
        this.scrollEle.scrollLeft -= scrollVal;
      }
      if (this.enableRtl && this.scrollEle.scrollLeft > 0) {
        this.scrollEle.scrollLeft = 0;
      }
    };
    HScroll2.prototype.frameScrollRequest = function(scrollVal, action, isContinuous) {
      var _this = this;
      var step = 10;
      if (isContinuous) {
        this.scrollUpdating(scrollVal, action);
        return;
      }
      if (!this.customStep) {
        [].slice.call(selectAll("." + CLS_OVERLAY, this.element)).forEach(function(el) {
          scrollVal -= el.offsetWidth;
        });
      }
      var animate = function() {
        var scrollValue;
        var scrollStep;
        if (_this.contains(_this.element, CLS_RTL) && _this.browserCheck) {
          scrollValue = -scrollVal;
          scrollStep = -step;
        } else {
          scrollValue = scrollVal;
          scrollStep = step;
        }
        if (scrollValue < step) {
          window.cancelAnimationFrame(scrollStep);
        } else {
          _this.scrollUpdating(scrollStep, action);
          scrollVal -= scrollStep;
          window.requestAnimationFrame(animate);
        }
      };
      animate();
    };
    HScroll2.prototype.touchHandler = function(e) {
      var ele = this.scrollEle;
      var distance = e.distanceX;
      if (this.ieCheck && this.contains(this.element, CLS_RTL)) {
        distance = -distance;
      }
      if (e.scrollDirection === "Left") {
        ele.scrollLeft = ele.scrollLeft + distance;
      } else if (e.scrollDirection === "Right") {
        ele.scrollLeft = ele.scrollLeft - distance;
      }
    };
    HScroll2.prototype.arrowDisabling = function(addDisable, removeDisable) {
      if (this.isDevice) {
        var arrowEle = isNullOrUndefined(addDisable) ? removeDisable : addDisable;
        var arrowIcon = arrowEle.querySelector("." + CLS_NAVARROW);
        if (isNullOrUndefined(addDisable)) {
          classList(arrowIcon, [CLS_NAVRIGHTARROW], [CLS_NAVLEFTARROW]);
        } else {
          classList(arrowIcon, [CLS_NAVLEFTARROW], [CLS_NAVRIGHTARROW]);
        }
      } else if (addDisable && removeDisable) {
        addDisable.classList.add(CLS_DISABLE);
        addDisable.setAttribute("aria-disabled", "true");
        addDisable.removeAttribute("tabindex");
        removeDisable.classList.remove(CLS_DISABLE);
        removeDisable.setAttribute("aria-disabled", "false");
        removeDisable.setAttribute("tabindex", "0");
      }
      this.repeatScroll();
    };
    HScroll2.prototype.scrollHandler = function(e) {
      var target = e.target;
      var width = target.offsetWidth;
      var rootEle = this.element;
      var navLeftEle = this.element.querySelector("." + CLS_HSCROLLNAVLEFT);
      var navRightEle = this.element.querySelector("." + CLS_HSCROLLNAVRIGHT);
      var leftOverlay = this.element.querySelector("." + CLS_LEFTOVERLAY);
      var rightOverlay = this.element.querySelector("." + CLS_RIGHTOVERLAY);
      var scrollLeft = target.scrollLeft;
      if (scrollLeft <= 0) {
        scrollLeft = -scrollLeft;
      }
      if (this.isDevice) {
        if (this.enableRtl && !(this.browserCheck || this.ieCheck)) {
          leftOverlay = this.element.querySelector("." + CLS_RIGHTOVERLAY);
          rightOverlay = this.element.querySelector("." + CLS_LEFTOVERLAY);
        }
        if (scrollLeft < OVERLAY_MAXWID) {
          leftOverlay.style.width = scrollLeft + "px";
        } else {
          leftOverlay.style.width = "40px";
        }
        if (target.scrollWidth - Math.ceil(width + scrollLeft) < OVERLAY_MAXWID) {
          rightOverlay.style.width = target.scrollWidth - Math.ceil(width + scrollLeft) + "px";
        } else {
          rightOverlay.style.width = "40px";
        }
      }
      if (scrollLeft === 0) {
        this.arrowDisabling(navLeftEle, navRightEle);
      } else if (Math.ceil(width + scrollLeft + 0.1) >= target.scrollWidth) {
        this.arrowDisabling(navRightEle, navLeftEle);
      } else {
        var disEle = this.element.querySelector("." + CLS_HSCROLLNAV + "." + CLS_DISABLE);
        if (disEle) {
          disEle.classList.remove(CLS_DISABLE);
          disEle.setAttribute("aria-disabled", "false");
          disEle.setAttribute("tabindex", "0");
        }
      }
    };
    HScroll2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "scrollStep":
            this.setScrollState();
            break;
          case "enableRtl":
            newProp.enableRtl ? this.element.classList.add(CLS_RTL) : this.element.classList.remove(CLS_RTL);
            break;
        }
      }
    };
    __decorate31([Property(null)], HScroll2.prototype, "scrollStep", void 0);
    HScroll2 = __decorate31([NotifyPropertyChanges], HScroll2);
    return HScroll2;
  }(Component)
);

// node_modules/@syncfusion/ej2-navigations/src/common/v-scroll.js
var __extends34 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate32 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_ROOT2 = "e-vscroll";
var CLS_RTL2 = "e-rtl";
var CLS_DISABLE2 = "e-overlay";
var CLS_VSCROLLBAR = "e-vscroll-bar";
var CLS_VSCROLLCON = "e-vscroll-content";
var CLS_NAVARROW2 = "e-nav-arrow";
var CLS_NAVUPARROW = "e-nav-up-arrow";
var CLS_NAVDOWNARROW = "e-nav-down-arrow";
var CLS_VSCROLLNAV = "e-scroll-nav";
var CLS_VSCROLLNAVUP = "e-scroll-up-nav";
var CLS_VSCROLLNAVDOWN = "e-scroll-down-nav";
var CLS_DEVICE2 = "e-scroll-device";
var CLS_OVERLAY2 = "e-scroll-overlay";
var CLS_UPOVERLAY = "e-scroll-up-overlay";
var CLS_DOWNOVERLAY = "e-scroll-down-overlay";
var OVERLAY_MAXWID2 = 40;
var VScroll = (
  /** @class */
  function(_super) {
    __extends34(VScroll2, _super);
    function VScroll2(options, element2) {
      return _super.call(this, options, element2) || this;
    }
    VScroll2.prototype.preRender = function() {
      this.browser = Browser.info.name;
      this.browserCheck = this.browser === "mozilla";
      this.isDevice = Browser.isDevice;
      this.customStep = true;
      var ele = this.element;
      this.ieCheck = this.browser === "edge" || this.browser === "msie";
      this.initialize();
      if (ele.id === "") {
        ele.id = getUniqueID("vscroll");
        this.uniqueId = true;
      }
      ele.style.display = "block";
      if (this.enableRtl) {
        ele.classList.add(CLS_RTL2);
      }
    };
    VScroll2.prototype.render = function() {
      this.touchModule = new Touch(this.element, {
        scroll: this.touchHandler.bind(this),
        swipe: this.swipeHandler.bind(this)
      });
      EventHandler.add(this.scrollEle, "scroll", this.scrollEventHandler, this);
      if (!this.isDevice) {
        this.createNavIcon(this.element);
      } else {
        this.element.classList.add(CLS_DEVICE2);
        this.createOverlayElement(this.element);
      }
      this.setScrollState();
      EventHandler.add(this.element, "wheel", this.wheelEventHandler, this);
    };
    VScroll2.prototype.setScrollState = function() {
      if (isNullOrUndefined(this.scrollStep) || this.scrollStep < 0) {
        this.scrollStep = this.scrollEle.offsetHeight;
        this.customStep = false;
      } else {
        this.customStep = true;
      }
    };
    VScroll2.prototype.initialize = function() {
      var scrollCnt = createElement("div", {
        className: CLS_VSCROLLCON
      });
      var scrollBar = createElement("div", {
        className: CLS_VSCROLLBAR
      });
      scrollBar.setAttribute("tabindex", "-1");
      var ele = this.element;
      var innerEle = [].slice.call(ele.children);
      for (var _i = 0, innerEle_1 = innerEle; _i < innerEle_1.length; _i++) {
        var ele_1 = innerEle_1[_i];
        scrollCnt.appendChild(ele_1);
      }
      scrollBar.appendChild(scrollCnt);
      ele.appendChild(scrollBar);
      scrollBar.style.overflow = "hidden";
      this.scrollEle = scrollBar;
      this.scrollItems = scrollCnt;
    };
    VScroll2.prototype.getPersistData = function() {
      var keyEntity = ["scrollStep"];
      return this.addOnPersist(keyEntity);
    };
    VScroll2.prototype.getModuleName = function() {
      return "vScroll";
    };
    VScroll2.prototype.destroy = function() {
      var el = this.element;
      el.style.display = "";
      removeClass([this.element], [CLS_ROOT2, CLS_DEVICE2, CLS_RTL2]);
      var navs = selectAll(".e-" + el.id + "_nav." + CLS_VSCROLLNAV, el);
      var overlays = selectAll("." + CLS_OVERLAY2, el);
      [].slice.call(overlays).forEach(function(ele) {
        detach(ele);
      });
      for (var _i = 0, _a = [].slice.call(this.scrollItems.children); _i < _a.length; _i++) {
        var elem = _a[_i];
        el.appendChild(elem);
      }
      if (this.uniqueId) {
        this.element.removeAttribute("id");
      }
      detach(this.scrollEle);
      if (navs.length > 0) {
        detach(navs[0]);
        if (!isNullOrUndefined(navs[1])) {
          detach(navs[1]);
        }
      }
      EventHandler.remove(this.scrollEle, "scroll", this.scrollEventHandler);
      this.touchModule.destroy();
      this.touchModule = null;
      _super.prototype.destroy.call(this);
    };
    VScroll2.prototype.disable = function(value) {
      var navEle = selectAll(".e-scroll-nav:not(." + CLS_DISABLE2 + ")", this.element);
      if (value) {
        this.element.classList.add(CLS_DISABLE2);
      } else {
        this.element.classList.remove(CLS_DISABLE2);
      }
      [].slice.call(navEle).forEach(function(el) {
        el.setAttribute("tabindex", !value ? "0" : "-1");
      });
    };
    VScroll2.prototype.createOverlayElement = function(element2) {
      var id = element2.id.concat("_nav");
      var downOverlayEle = createElement("div", {
        className: CLS_OVERLAY2 + " " + CLS_DOWNOVERLAY
      });
      var clsDown = "e-" + element2.id.concat("_nav " + CLS_VSCROLLNAV + " " + CLS_VSCROLLNAVDOWN);
      var downEle = createElement("div", {
        id: id.concat("down"),
        className: clsDown
      });
      var navItem = createElement("div", {
        className: CLS_NAVDOWNARROW + " " + CLS_NAVARROW2 + " e-icons"
      });
      downEle.appendChild(navItem);
      var upEle = createElement("div", {
        className: CLS_OVERLAY2 + " " + CLS_UPOVERLAY
      });
      if (this.ieCheck) {
        downEle.classList.add("e-ie-align");
      }
      element2.appendChild(downOverlayEle);
      element2.appendChild(downEle);
      element2.insertBefore(upEle, element2.firstChild);
      this.eventBinding([downEle]);
    };
    VScroll2.prototype.createNavIcon = function(element2) {
      var id = element2.id.concat("_nav");
      var clsDown = "e-" + element2.id.concat("_nav " + CLS_VSCROLLNAV + " " + CLS_VSCROLLNAVDOWN);
      var nav = createElement("div", {
        id: id.concat("_down"),
        className: clsDown
      });
      nav.setAttribute("aria-disabled", "false");
      var navItem = createElement("div", {
        className: CLS_NAVDOWNARROW + " " + CLS_NAVARROW2 + " e-icons"
      });
      var clsUp = "e-" + element2.id.concat("_nav " + CLS_VSCROLLNAV + " " + CLS_VSCROLLNAVUP);
      var navElement = createElement("div", {
        id: id.concat("_up"),
        className: clsUp + " " + CLS_DISABLE2
      });
      navElement.setAttribute("aria-disabled", "true");
      var navUpItem = createElement("div", {
        className: CLS_NAVUPARROW + " " + CLS_NAVARROW2 + " e-icons"
      });
      navElement.appendChild(navUpItem);
      nav.appendChild(navItem);
      nav.setAttribute("tabindex", "0");
      element2.appendChild(nav);
      element2.insertBefore(navElement, element2.firstChild);
      if (this.ieCheck) {
        nav.classList.add("e-ie-align");
        navElement.classList.add("e-ie-align");
      }
      this.eventBinding([nav, navElement]);
    };
    VScroll2.prototype.onKeyPress = function(ev) {
      var _this = this;
      if (ev.key === "Enter") {
        var timeoutFun_1 = function() {
          _this.keyTimeout = true;
          _this.eleScrolling(10, ev.target, true);
        };
        this.keyTimer = window.setTimeout(function() {
          timeoutFun_1();
        }, 100);
      }
    };
    VScroll2.prototype.onKeyUp = function(ev) {
      if (ev.key !== "Enter") {
        return;
      }
      if (this.keyTimeout) {
        this.keyTimeout = false;
      } else {
        ev.target.click();
      }
      clearTimeout(this.keyTimer);
    };
    VScroll2.prototype.eventBinding = function(element2) {
      var _this = this;
      [].slice.call(element2).forEach(function(ele) {
        new Touch(ele, {
          tapHold: _this.tabHoldHandler.bind(_this),
          tapHoldThreshold: 500
        });
        ele.addEventListener("keydown", _this.onKeyPress.bind(_this));
        ele.addEventListener("keyup", _this.onKeyUp.bind(_this));
        ele.addEventListener("mouseup", _this.repeatScroll.bind(_this));
        ele.addEventListener("touchend", _this.repeatScroll.bind(_this));
        ele.addEventListener("contextmenu", function(e) {
          e.preventDefault();
        });
        EventHandler.add(ele, "click", _this.clickEventHandler, _this);
      });
    };
    VScroll2.prototype.repeatScroll = function() {
      clearInterval(this.timeout);
    };
    VScroll2.prototype.tabHoldHandler = function(ev) {
      var _this = this;
      var trgt = ev.originalEvent.target;
      trgt = this.contains(trgt, CLS_VSCROLLNAV) ? trgt.firstElementChild : trgt;
      var scrollDistance = 10;
      var timeoutFun = function() {
        _this.eleScrolling(scrollDistance, trgt, true);
      };
      this.timeout = window.setInterval(function() {
        timeoutFun();
      }, 50);
    };
    VScroll2.prototype.contains = function(element2, className) {
      return element2.classList.contains(className);
    };
    VScroll2.prototype.eleScrolling = function(scrollDis, trgt, isContinuous) {
      var classList2 = trgt.classList;
      if (classList2.contains(CLS_VSCROLLNAV)) {
        classList2 = trgt.querySelector("." + CLS_NAVARROW2).classList;
      }
      if (classList2.contains(CLS_NAVDOWNARROW)) {
        this.frameScrollRequest(scrollDis, "add", isContinuous);
      } else if (classList2.contains(CLS_NAVUPARROW)) {
        this.frameScrollRequest(scrollDis, "", isContinuous);
      }
    };
    VScroll2.prototype.clickEventHandler = function(event2) {
      this.eleScrolling(this.scrollStep, event2.target, false);
    };
    VScroll2.prototype.wheelEventHandler = function(e) {
      e.preventDefault();
      this.frameScrollRequest(this.scrollStep, e.deltaY > 0 ? "add" : "", false);
    };
    VScroll2.prototype.swipeHandler = function(e) {
      var swipeElement = this.scrollEle;
      var distance;
      if (e.velocity <= 1) {
        distance = e.distanceY / (e.velocity * 10);
      } else {
        distance = e.distanceY / e.velocity;
      }
      var start = 0.5;
      var animate = function() {
        var step = Math.sin(start);
        if (step <= 0) {
          window.cancelAnimationFrame(step);
        } else {
          if (e.swipeDirection === "Up") {
            swipeElement.scrollTop += distance * step;
          } else if (e.swipeDirection === "Down") {
            swipeElement.scrollTop -= distance * step;
          }
          start -= 0.02;
          window.requestAnimationFrame(animate);
        }
      };
      animate();
    };
    VScroll2.prototype.scrollUpdating = function(scrollVal, action) {
      if (action === "add") {
        this.scrollEle.scrollTop += scrollVal;
      } else {
        this.scrollEle.scrollTop -= scrollVal;
      }
    };
    VScroll2.prototype.frameScrollRequest = function(scrollValue, action, isContinuous) {
      var _this = this;
      var step = 10;
      if (isContinuous) {
        this.scrollUpdating(scrollValue, action);
        return;
      }
      if (!this.customStep) {
        [].slice.call(selectAll("." + CLS_OVERLAY2, this.element)).forEach(function(el) {
          scrollValue -= el.offsetHeight;
        });
      }
      var animate = function() {
        if (scrollValue < step) {
          window.cancelAnimationFrame(step);
        } else {
          _this.scrollUpdating(step, action);
          scrollValue -= step;
          window.requestAnimationFrame(animate);
        }
      };
      animate();
    };
    VScroll2.prototype.touchHandler = function(e) {
      var el = this.scrollEle;
      var distance = e.distanceY;
      if (e.scrollDirection === "Up") {
        el.scrollTop = el.scrollTop + distance;
      } else if (e.scrollDirection === "Down") {
        el.scrollTop = el.scrollTop - distance;
      }
    };
    VScroll2.prototype.arrowDisabling = function(addDisableCls, removeDisableCls) {
      if (this.isDevice) {
        var arrowEle = isNullOrUndefined(addDisableCls) ? removeDisableCls : addDisableCls;
        var arrowIcon = arrowEle.querySelector("." + CLS_NAVARROW2);
        if (isNullOrUndefined(addDisableCls)) {
          classList(arrowIcon, [CLS_NAVDOWNARROW], [CLS_NAVUPARROW]);
        } else {
          classList(arrowIcon, [CLS_NAVUPARROW], [CLS_NAVDOWNARROW]);
        }
      } else {
        addDisableCls.classList.add(CLS_DISABLE2);
        addDisableCls.setAttribute("aria-disabled", "true");
        addDisableCls.removeAttribute("tabindex");
        removeDisableCls.classList.remove(CLS_DISABLE2);
        removeDisableCls.setAttribute("aria-disabled", "false");
        removeDisableCls.setAttribute("tabindex", "0");
      }
      this.repeatScroll();
    };
    VScroll2.prototype.scrollEventHandler = function(e) {
      var target = e.target;
      var height = target.offsetHeight;
      var navUpEle = this.element.querySelector("." + CLS_VSCROLLNAVUP);
      var navDownEle = this.element.querySelector("." + CLS_VSCROLLNAVDOWN);
      var upOverlay = this.element.querySelector("." + CLS_UPOVERLAY);
      var downOverlay = this.element.querySelector("." + CLS_DOWNOVERLAY);
      var scrollTop = target.scrollTop;
      if (scrollTop <= 0) {
        scrollTop = -scrollTop;
      }
      if (this.isDevice) {
        if (scrollTop < OVERLAY_MAXWID2) {
          upOverlay.style.height = scrollTop + "px";
        } else {
          upOverlay.style.height = "40px";
        }
        if (target.scrollHeight - Math.ceil(height + scrollTop) < OVERLAY_MAXWID2) {
          downOverlay.style.height = target.scrollHeight - Math.ceil(height + scrollTop) + "px";
        } else {
          downOverlay.style.height = "40px";
        }
      }
      if (scrollTop === 0) {
        this.arrowDisabling(navUpEle, navDownEle);
      } else if (Math.ceil(height + scrollTop + 0.1) >= target.scrollHeight) {
        this.arrowDisabling(navDownEle, navUpEle);
      } else {
        var disEle = this.element.querySelector("." + CLS_VSCROLLNAV + "." + CLS_DISABLE2);
        if (disEle) {
          disEle.classList.remove(CLS_DISABLE2);
          disEle.setAttribute("aria-disabled", "false");
          disEle.setAttribute("tabindex", "0");
        }
      }
    };
    VScroll2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "scrollStep":
            this.setScrollState();
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              this.element.classList.add(CLS_RTL2);
            } else {
              this.element.classList.remove(CLS_RTL2);
            }
            break;
        }
      }
    };
    __decorate32([Property(null)], VScroll2.prototype, "scrollStep", void 0);
    VScroll2 = __decorate32([NotifyPropertyChanges], VScroll2);
    return VScroll2;
  }(Component)
);

// node_modules/@syncfusion/ej2-navigations/src/toolbar/toolbar.js
var __extends35 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate33 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_VERTICAL = "e-vertical";
var CLS_ITEMS = "e-toolbar-items";
var CLS_ITEM = "e-toolbar-item";
var CLS_RTL3 = "e-rtl";
var CLS_SEPARATOR = "e-separator";
var CLS_POPUPICON = "e-popup-up-icon";
var CLS_POPUPDOWN = "e-popup-down-icon";
var CLS_POPUPOPEN = "e-popup-open";
var CLS_TEMPLATE = "e-template";
var CLS_DISABLE3 = "e-overlay";
var CLS_POPUPTEXT = "e-toolbar-text";
var CLS_TBARTEXT = "e-popup-text";
var CLS_TBAROVERFLOW = "e-overflow-show";
var CLS_POPOVERFLOW = "e-overflow-hide";
var CLS_TBARBTN = "e-tbar-btn";
var CLS_TBARNAV = "e-hor-nav";
var CLS_TBARSCRLNAV = "e-scroll-nav";
var CLS_TBARRIGHT = "e-toolbar-right";
var CLS_TBARLEFT = "e-toolbar-left";
var CLS_TBARCENTER = "e-toolbar-center";
var CLS_TBARPOS = "e-tbar-pos";
var CLS_HSCROLLCNT = "e-hscroll-content";
var CLS_VSCROLLCNT = "e-vscroll-content";
var CLS_HSCROLLBAR2 = "e-hscroll-bar";
var CLS_POPUPNAV = "e-hor-nav";
var CLS_POPUPCLASS = "e-toolbar-pop";
var CLS_POPUP = "e-toolbar-popup";
var CLS_TBARBTNTEXT = "e-tbar-btn-text";
var CLS_TBARNAVACT = "e-nav-active";
var CLS_TBARIGNORE = "e-ignore";
var CLS_POPPRI = "e-popup-alone";
var CLS_HIDDEN = "e-hidden";
var CLS_MULTIROW = "e-toolbar-multirow";
var CLS_MULTIROWPOS = "e-multirow-pos";
var CLS_MULTIROW_SEPARATOR = "e-multirow-separator";
var CLS_EXTENDABLE_SEPARATOR = "e-extended-separator";
var CLS_EXTEANDABLE_TOOLBAR = "e-extended-toolbar";
var CLS_EXTENDABLECLASS = "e-toolbar-extended";
var CLS_EXTENDPOPUP = "e-expended-nav";
var CLS_EXTENDEDPOPOPEN = "e-tbar-extended";
var Item2 = (
  /** @class */
  function(_super) {
    __extends35(Item3, _super);
    function Item3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate33([Property("")], Item3.prototype, "id", void 0);
    __decorate33([Property("")], Item3.prototype, "text", void 0);
    __decorate33([Property("auto")], Item3.prototype, "width", void 0);
    __decorate33([Property("")], Item3.prototype, "cssClass", void 0);
    __decorate33([Property(false)], Item3.prototype, "showAlwaysInPopup", void 0);
    __decorate33([Property(false)], Item3.prototype, "disabled", void 0);
    __decorate33([Property("")], Item3.prototype, "prefixIcon", void 0);
    __decorate33([Property("")], Item3.prototype, "suffixIcon", void 0);
    __decorate33([Property(true)], Item3.prototype, "visible", void 0);
    __decorate33([Property("None")], Item3.prototype, "overflow", void 0);
    __decorate33([Property("")], Item3.prototype, "template", void 0);
    __decorate33([Property("Button")], Item3.prototype, "type", void 0);
    __decorate33([Property("Both")], Item3.prototype, "showTextOn", void 0);
    __decorate33([Property(null)], Item3.prototype, "htmlAttributes", void 0);
    __decorate33([Property("")], Item3.prototype, "tooltipText", void 0);
    __decorate33([Property("Left")], Item3.prototype, "align", void 0);
    __decorate33([Event()], Item3.prototype, "click", void 0);
    __decorate33([Property(-1)], Item3.prototype, "tabIndex", void 0);
    return Item3;
  }(ChildProperty)
);
var Toolbar = (
  /** @class */
  function(_super) {
    __extends35(Toolbar2, _super);
    function Toolbar2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.resizeContext = _this.resize.bind(_this);
      _this.orientationChangeContext = _this.orientationChange.bind(_this);
      _this.keyConfigs = {
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        moveUp: "uparrow",
        moveDown: "downarrow",
        popupOpen: "enter",
        popupClose: "escape",
        tab: "tab",
        home: "home",
        end: "end"
      };
      return _this;
    }
    Toolbar2.prototype.destroy = function() {
      var _this = this;
      if (this.isReact || this.isAngular) {
        this.clearTemplate();
      }
      var btnItems = this.element.querySelectorAll(".e-control.e-btn");
      [].slice.call(btnItems).forEach(function(el) {
        if (!isNullOrUndefined(el) && !isNullOrUndefined(el.ej2_instances) && !isNullOrUndefined(el.ej2_instances[0]) && !el.ej2_instances[0].isDestroyed) {
          el.ej2_instances[0].destroy();
        }
      });
      this.unwireEvents();
      this.tempId.forEach(function(ele) {
        if (!isNullOrUndefined(_this.element.querySelector(ele))) {
          document.body.appendChild(_this.element.querySelector(ele)).style.display = "none";
        }
      });
      this.destroyItems();
      while (this.element.lastElementChild) {
        this.element.removeChild(this.element.lastElementChild);
      }
      if (this.trgtEle) {
        this.element.appendChild(this.ctrlTem);
        this.trgtEle = null;
        this.ctrlTem = null;
      }
      if (this.popObj) {
        this.popObj.destroy();
        detach(this.popObj.element);
      }
      if (this.activeEle) {
        this.activeEle = null;
      }
      this.popObj = null;
      this.tbarAlign = null;
      this.tbarItemsCol = [];
      this.remove(this.element, "e-toolpop");
      if (this.cssClass) {
        removeClass([this.element], this.cssClass.split(" "));
      }
      this.element.removeAttribute("style");
      ["aria-disabled", "aria-orientation", "role"].forEach(function(attrb) {
        return _this.element.removeAttribute(attrb);
      });
      _super.prototype.destroy.call(this);
    };
    Toolbar2.prototype.preRender = function() {
      var eventArgs = {
        enableCollision: this.enableCollision,
        scrollStep: this.scrollStep
      };
      this.trigger("beforeCreate", eventArgs);
      this.enableCollision = eventArgs.enableCollision;
      this.scrollStep = eventArgs.scrollStep;
      this.scrollModule = null;
      this.popObj = null;
      this.tempId = [];
      this.tbarItemsCol = this.items;
      this.isVertical = this.element.classList.contains(CLS_VERTICAL) ? true : false;
      this.isExtendedOpen = false;
      this.popupPriCount = 0;
      if (this.enableRtl) {
        this.add(this.element, CLS_RTL3);
      }
    };
    Toolbar2.prototype.wireEvents = function() {
      EventHandler.add(this.element, "click", this.clickHandler, this);
      window.addEventListener("resize", this.resizeContext);
      window.addEventListener("orientationchange", this.orientationChangeContext);
      if (this.allowKeyboard) {
        this.wireKeyboardEvent();
      }
    };
    Toolbar2.prototype.wireKeyboardEvent = function() {
      this.keyModule = new KeyboardEvents(this.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs
      });
      EventHandler.add(this.element, "keydown", this.docKeyDown, this);
      this.updateTabIndex("0");
    };
    Toolbar2.prototype.updateTabIndex = function(tabIndex) {
      var ele = this.element.querySelector("." + CLS_ITEM + ":not(." + CLS_DISABLE3 + " ):not(." + CLS_SEPARATOR + " ):not(." + CLS_HIDDEN + " )");
      if (!isNullOrUndefined(ele) && !isNullOrUndefined(ele.firstElementChild)) {
        var dataTabIndex = ele.firstElementChild.getAttribute("data-tabindex");
        if (dataTabIndex && dataTabIndex === "-1" && ele.firstElementChild.tagName !== "INPUT") {
          ele.firstElementChild.setAttribute("tabindex", tabIndex);
        }
      }
    };
    Toolbar2.prototype.unwireKeyboardEvent = function() {
      if (this.keyModule) {
        EventHandler.remove(this.element, "keydown", this.docKeyDown);
        this.keyModule.destroy();
        this.keyModule = null;
      }
    };
    Toolbar2.prototype.docKeyDown = function(e) {
      if (e.target.tagName === "INPUT") {
        return;
      }
      var popCheck = !isNullOrUndefined(this.popObj) && isVisible(this.popObj.element) && this.overflowMode !== "Extended";
      if (e.keyCode === 9 && e.target.classList.contains("e-hor-nav") === true && popCheck) {
        this.popObj.hide({
          name: "FadeOut",
          duration: 100
        });
      }
      var keyCheck = e.keyCode === 40 || e.keyCode === 38 || e.keyCode === 35 || e.keyCode === 36;
      if (keyCheck) {
        e.preventDefault();
      }
    };
    Toolbar2.prototype.unwireEvents = function() {
      EventHandler.remove(this.element, "click", this.clickHandler);
      this.destroyScroll();
      this.unwireKeyboardEvent();
      window.removeEventListener("resize", this.resizeContext);
      window.removeEventListener("orientationchange", this.orientationChangeContext);
      document.removeEventListener("scroll", this.clickEvent);
      document.removeEventListener("click", this.scrollEvent);
      this.scrollEvent = null;
      this.clickEvent = null;
    };
    Toolbar2.prototype.clearProperty = function() {
      this.tbarEle = [];
      this.tbarAlgEle = {
        lefts: [],
        centers: [],
        rights: []
      };
    };
    Toolbar2.prototype.docEvent = function(e) {
      var popEle = closest(e.target, ".e-popup");
      if (this.popObj && isVisible(this.popObj.element) && !popEle && this.overflowMode === "Popup") {
        this.popObj.hide({
          name: "FadeOut",
          duration: 100
        });
      }
    };
    Toolbar2.prototype.destroyScroll = function() {
      if (this.scrollModule) {
        if (this.tbarAlign) {
          this.add(this.scrollModule.element, CLS_TBARPOS);
        }
        this.scrollModule.destroy();
        this.scrollModule = null;
      }
    };
    Toolbar2.prototype.destroyItems = function() {
      if (this.element) {
        [].slice.call(this.element.querySelectorAll("." + CLS_ITEM)).forEach(function(el) {
          detach(el);
        });
      }
      if (this.tbarAlign) {
        var tbarItems = this.element.querySelector("." + CLS_ITEMS);
        [].slice.call(tbarItems.children).forEach(function(el) {
          detach(el);
        });
        this.tbarAlign = false;
        this.remove(tbarItems, CLS_TBARPOS);
      }
      this.clearProperty();
    };
    Toolbar2.prototype.destroyMode = function() {
      if (this.scrollModule) {
        this.remove(this.scrollModule.element, CLS_RTL3);
        this.destroyScroll();
      }
      this.remove(this.element, CLS_EXTENDEDPOPOPEN);
      this.remove(this.element, CLS_EXTEANDABLE_TOOLBAR);
      var tempEle = this.element.querySelector(".e-toolbar-multirow");
      if (tempEle) {
        this.remove(tempEle, CLS_MULTIROW);
      }
      if (this.popObj) {
        this.popupRefresh(this.popObj.element, true);
      }
    };
    Toolbar2.prototype.add = function(ele, val) {
      ele.classList.add(val);
    };
    Toolbar2.prototype.remove = function(ele, val) {
      ele.classList.remove(val);
    };
    Toolbar2.prototype.elementFocus = function(ele) {
      var fChild = ele.firstElementChild;
      if (fChild) {
        fChild.focus();
        this.activeEleSwitch(ele);
      } else {
        ele.focus();
      }
    };
    Toolbar2.prototype.clstElement = function(tbrNavChk, trgt) {
      var clst;
      if (tbrNavChk && this.popObj && isVisible(this.popObj.element)) {
        clst = this.popObj.element.querySelector("." + CLS_ITEM);
      } else if (this.element === trgt || tbrNavChk) {
        clst = this.element.querySelector("." + CLS_ITEM + ":not(." + CLS_DISABLE3 + " ):not(." + CLS_SEPARATOR + " ):not(." + CLS_HIDDEN + " )");
      } else {
        clst = closest(trgt, "." + CLS_ITEM);
      }
      return clst;
    };
    Toolbar2.prototype.keyHandling = function(clst, e, trgt, navChk, scrollChk) {
      var popObj = this.popObj;
      var rootEle = this.element;
      var popAnimate = {
        name: "FadeOut",
        duration: 100
      };
      var value = e.action === "moveUp" ? "previous" : "next";
      var ele;
      var nodes;
      switch (e.action) {
        case "moveRight":
          if (this.isVertical) {
            return;
          }
          if (rootEle === trgt) {
            this.elementFocus(clst);
          } else if (!navChk) {
            this.eleFocus(clst, "next");
          }
          break;
        case "moveLeft":
          if (this.isVertical) {
            return;
          }
          if (!navChk) {
            this.eleFocus(clst, "previous");
          }
          break;
        case "home":
        case "end":
          if (clst) {
            var popupCheck = closest(clst, ".e-popup");
            var extendedPopup = this.element.querySelector("." + CLS_EXTENDABLECLASS);
            if (this.overflowMode === "Extended" && extendedPopup && extendedPopup.classList.contains("e-popup-open")) {
              popupCheck = e.action === "end" ? extendedPopup : null;
            }
            if (popupCheck) {
              if (isVisible(this.popObj.element)) {
                nodes = [].slice.call(popupCheck.children);
                if (e.action === "home") {
                  ele = this.focusFirstVisibleEle(nodes);
                } else {
                  ele = this.focusLastVisibleEle(nodes);
                }
              }
            } else {
              nodes = this.element.querySelectorAll("." + CLS_ITEMS + " ." + CLS_ITEM + ":not(." + CLS_SEPARATOR + ")");
              if (e.action === "home") {
                ele = this.focusFirstVisibleEle(nodes);
              } else {
                ele = this.focusLastVisibleEle(nodes);
              }
            }
            if (ele) {
              this.elementFocus(ele);
            }
          }
          break;
        case "moveUp":
        case "moveDown":
          if (!this.isVertical) {
            if (popObj && closest(trgt, ".e-popup")) {
              var popEle = popObj.element;
              var popFrstEle = popEle.firstElementChild;
              if (value === "previous" && popFrstEle === clst) {
                popEle.lastElementChild.firstChild.focus();
              } else if (value === "next" && popEle.lastElementChild === clst) {
                popFrstEle.firstChild.focus();
              } else {
                this.eleFocus(clst, value);
              }
            } else if (e.action === "moveDown" && popObj && isVisible(popObj.element)) {
              this.elementFocus(clst);
            }
          } else {
            if (e.action === "moveUp") {
              this.eleFocus(clst, "previous");
            } else {
              this.eleFocus(clst, "next");
            }
          }
          break;
        case "tab":
          if (!scrollChk && !navChk) {
            var ele_1 = clst.firstElementChild;
            if (rootEle === trgt) {
              if (this.activeEle) {
                this.activeEle.focus();
              } else {
                this.activeEleRemove(ele_1);
                ele_1.focus();
              }
            }
          }
          break;
        case "popupClose":
          if (popObj && this.overflowMode !== "Extended") {
            popObj.hide(popAnimate);
          }
          break;
        case "popupOpen":
          if (!navChk) {
            return;
          }
          if (popObj && !isVisible(popObj.element)) {
            popObj.element.style.top = rootEle.offsetHeight + "px";
            popObj.show({
              name: "FadeIn",
              duration: 100
            });
          } else {
            popObj.hide(popAnimate);
          }
          break;
      }
    };
    Toolbar2.prototype.keyActionHandler = function(e) {
      var trgt = e.target;
      if (trgt.tagName === "INPUT" || trgt.tagName === "TEXTAREA" || this.element.classList.contains(CLS_DISABLE3)) {
        return;
      }
      e.preventDefault();
      var tbrNavChk = trgt.classList.contains(CLS_TBARNAV);
      var tbarScrollChk = trgt.classList.contains(CLS_TBARSCRLNAV);
      var clst = this.clstElement(tbrNavChk, trgt);
      if (clst || tbarScrollChk) {
        this.keyHandling(clst, e, trgt, tbrNavChk, tbarScrollChk);
      }
    };
    Toolbar2.prototype.disable = function(value) {
      var rootEle = this.element;
      if (value) {
        rootEle.classList.add(CLS_DISABLE3);
      } else {
        rootEle.classList.remove(CLS_DISABLE3);
      }
      if (this.activeEle) {
        this.activeEle.setAttribute("tabindex", this.activeEle.getAttribute("data-tabindex"));
      }
      if (this.scrollModule) {
        this.scrollModule.disable(value);
      }
      if (this.popObj) {
        if (isVisible(this.popObj.element) && this.overflowMode !== "Extended") {
          this.popObj.hide();
        }
        rootEle.querySelector("#" + rootEle.id + "_nav").setAttribute("tabindex", !value ? "0" : "-1");
      }
    };
    Toolbar2.prototype.eleContains = function(el) {
      return el.classList.contains(CLS_SEPARATOR) || el.classList.contains(CLS_DISABLE3) || el.getAttribute("disabled") || el.classList.contains(CLS_HIDDEN) || !isVisible(el) || !el.classList.contains(CLS_ITEM);
    };
    Toolbar2.prototype.focusFirstVisibleEle = function(nodes) {
      var element2;
      var index = 0;
      while (index < nodes.length) {
        var ele = nodes[parseInt(index.toString(), 10)];
        if (!ele.classList.contains(CLS_HIDDEN) && !ele.classList.contains(CLS_DISABLE3)) {
          return ele;
        }
        index++;
      }
      return element2;
    };
    Toolbar2.prototype.focusLastVisibleEle = function(nodes) {
      var element2;
      var index = nodes.length - 1;
      while (index >= 0) {
        var ele = nodes[parseInt(index.toString(), 10)];
        if (!ele.classList.contains(CLS_HIDDEN) && !ele.classList.contains(CLS_DISABLE3)) {
          return ele;
        }
        index--;
      }
      return element2;
    };
    Toolbar2.prototype.eleFocus = function(closest2, pos) {
      var sib = Object(closest2)[pos + "ElementSibling"];
      if (sib) {
        var skipEle = this.eleContains(sib);
        if (skipEle) {
          this.eleFocus(sib, pos);
          return;
        }
        this.elementFocus(sib);
      } else if (this.tbarAlign) {
        var elem = Object(closest2.parentElement)[pos + "ElementSibling"];
        if (!isNullOrUndefined(elem) && elem.children.length === 0) {
          elem = Object(elem)[pos + "ElementSibling"];
        }
        if (!isNullOrUndefined(elem) && elem.children.length > 0) {
          if (pos === "next") {
            var el = elem.querySelector("." + CLS_ITEM);
            if (this.eleContains(el)) {
              this.eleFocus(el, pos);
            } else {
              el.firstElementChild.focus();
              this.activeEleSwitch(el);
            }
          } else {
            var el = elem.lastElementChild;
            if (this.eleContains(el)) {
              this.eleFocus(el, pos);
            } else {
              this.elementFocus(el);
            }
          }
        }
      } else if (!isNullOrUndefined(closest2)) {
        var tbrItems = this.element.querySelectorAll("." + CLS_ITEMS + " ." + CLS_ITEM + ":not(." + CLS_SEPARATOR + "):not(." + CLS_DISABLE3 + "):not(." + CLS_HIDDEN + ")");
        if (pos === "next" && tbrItems) {
          this.elementFocus(tbrItems[0]);
        } else if (pos === "previous" && tbrItems) {
          this.elementFocus(tbrItems[tbrItems.length - 1]);
        }
      }
    };
    Toolbar2.prototype.clickHandler = function(e) {
      var _this = this;
      var trgt = e.target;
      var ele = this.element;
      var isPopupElement = !isNullOrUndefined(closest(trgt, "." + CLS_POPUPCLASS));
      var clsList = trgt.classList;
      var popupNav = closest(trgt, "." + CLS_TBARNAV);
      if (!popupNav) {
        popupNav = trgt;
      }
      if (!ele.children[0].classList.contains("e-hscroll") && !ele.children[0].classList.contains("e-vscroll") && clsList.contains(CLS_TBARNAV)) {
        clsList = trgt.querySelector(".e-icons").classList;
      }
      if (clsList.contains(CLS_POPUPICON) || clsList.contains(CLS_POPUPDOWN)) {
        this.popupClickHandler(ele, popupNav, CLS_RTL3);
      }
      var itemObj;
      var clst = closest(e.target, "." + CLS_ITEM);
      if ((isNullOrUndefined(clst) || clst.classList.contains(CLS_DISABLE3)) && !popupNav.classList.contains(CLS_TBARNAV)) {
        return;
      }
      if (clst) {
        var tempItem = this.items[this.tbarEle.indexOf(clst)];
        itemObj = tempItem;
      }
      var eventArgs = {
        originalEvent: e,
        item: itemObj
      };
      var isClickBinded = itemObj && !isNullOrUndefined(itemObj.click) && typeof itemObj.click == "object" ? !isNullOrUndefined(itemObj.click.observers) && itemObj.click.observers.length > 0 : !isNullOrUndefined(itemObj) && !isNullOrUndefined(itemObj.click);
      if (isClickBinded) {
        this.trigger("items[" + this.tbarEle.indexOf(clst) + "].click", eventArgs);
      }
      if (!eventArgs.cancel) {
        this.trigger("clicked", eventArgs, function(clickedArgs) {
          if (!isNullOrUndefined(_this.popObj) && isPopupElement && !clickedArgs.cancel && _this.overflowMode === "Popup" && clickedArgs.item && clickedArgs.item.type !== "Input") {
            _this.popObj.hide({
              name: "FadeOut",
              duration: 100
            });
          }
        });
      }
    };
    Toolbar2.prototype.popupClickHandler = function(ele, popupNav, CLS_RTL8) {
      var popObj = this.popObj;
      if (isVisible(popObj.element)) {
        popupNav.classList.remove(CLS_TBARNAVACT);
        popObj.hide({
          name: "FadeOut",
          duration: 100
        });
      } else {
        if (ele.classList.contains(CLS_RTL8)) {
          popObj.enableRtl = true;
          popObj.position = {
            X: "left",
            Y: "top"
          };
        }
        if (popObj.offsetX === 0 && !ele.classList.contains(CLS_RTL8)) {
          popObj.enableRtl = false;
          popObj.position = {
            X: "right",
            Y: "top"
          };
        }
        if (this.overflowMode === "Extended") {
          popObj.element.style.minHeight = "0px";
          popObj.width = this.getToolbarPopupWidth(this.element);
        }
        popObj.dataBind();
        popObj.refreshPosition();
        popObj.element.style.top = this.getElementOffsetY() + "px";
        popupNav.classList.add(CLS_TBARNAVACT);
        popObj.show({
          name: "FadeIn",
          duration: 100
        });
      }
    };
    Toolbar2.prototype.getToolbarPopupWidth = function(ele) {
      var eleStyles = window.getComputedStyle(ele);
      return parseFloat(eleStyles.width) + parseFloat(eleStyles.borderRightWidth) * 2;
    };
    Toolbar2.prototype.render = function() {
      var _this = this;
      this.initialize();
      this.renderControl();
      this.wireEvents();
      this.clickEvent = this.docEvent.bind(this);
      this.scrollEvent = this.docEvent.bind(this);
      this.renderComplete();
      if (this.isReact && this.portals && this.portals.length > 0) {
        this.renderReactTemplates(function() {
          _this.refreshOverflow();
        });
      }
    };
    Toolbar2.prototype.initialize = function() {
      var width = formatUnit(this.width);
      var height = formatUnit(this.height);
      if (Browser.info.name !== "msie" || this.height !== "auto" || this.overflowMode === "MultiRow") {
        setStyleAttribute(this.element, {
          "height": height
        });
      }
      setStyleAttribute(this.element, {
        "width": width
      });
      var ariaAttr = {
        "role": "toolbar",
        "aria-disabled": "false",
        "aria-orientation": !this.isVertical ? "horizontal" : "vertical"
      };
      attributes(this.element, ariaAttr);
      if (this.cssClass) {
        addClass([this.element], this.cssClass.split(" "));
      }
    };
    Toolbar2.prototype.renderControl = function() {
      var ele = this.element;
      this.trgtEle = ele.children.length > 0 ? ele.querySelector("div") : null;
      this.tbarAlgEle = {
        lefts: [],
        centers: [],
        rights: []
      };
      this.renderItems();
      this.renderLayout();
    };
    Toolbar2.prototype.renderLayout = function() {
      this.renderOverflowMode();
      if (this.tbarAlign) {
        this.itemPositioning();
      }
      if (this.popObj && this.popObj.element.childElementCount > 1 && this.checkPopupRefresh(this.element, this.popObj.element)) {
        this.popupRefresh(this.popObj.element, false);
      }
      this.separator();
    };
    Toolbar2.prototype.itemsAlign = function(items, itemEleDom) {
      var innerItem;
      var innerPos;
      if (!this.tbarEle) {
        this.tbarEle = [];
      }
      for (var i = 0; i < items.length; i++) {
        innerItem = this.renderSubComponent(items[parseInt(i.toString(), 10)], i);
        if (this.tbarEle.indexOf(innerItem) === -1) {
          this.tbarEle.push(innerItem);
        }
        if (!this.tbarAlign) {
          this.tbarItemAlign(items[parseInt(i.toString(), 10)], itemEleDom, i);
        }
        innerPos = itemEleDom.querySelector(".e-toolbar-" + items[parseInt(i.toString(), 10)].align.toLowerCase());
        if (innerPos) {
          if (!(items[parseInt(i.toString(), 10)].showAlwaysInPopup && items[parseInt(i.toString(), 10)].overflow !== "Show")) {
            this.tbarAlgEle[(items[parseInt(i.toString(), 10)].align + "s").toLowerCase()].push(innerItem);
          }
          innerPos.appendChild(innerItem);
        } else {
          itemEleDom.appendChild(innerItem);
        }
      }
      if (this.isReact) {
        var portals = "portals";
        this.notify("render-react-toolbar-template", this["" + portals]);
        this.renderReactTemplates();
      }
    };
    Toolbar2.prototype.changeOrientation = function() {
      var ele = this.element;
      if (this.isVertical) {
        ele.classList.remove(CLS_VERTICAL);
        this.isVertical = false;
        if (this.height === "auto" || this.height === "100%") {
          ele.style.height = this.height;
        }
        ele.setAttribute("aria-orientation", "horizontal");
      } else {
        ele.classList.add(CLS_VERTICAL);
        this.isVertical = true;
        ele.setAttribute("aria-orientation", "vertical");
        setStyleAttribute(this.element, {
          "height": formatUnit(this.height),
          "width": formatUnit(this.width)
        });
      }
      this.destroyMode();
      this.refreshOverflow();
    };
    Toolbar2.prototype.initScroll = function(element2, innerItems) {
      if (!this.scrollModule && this.checkOverflow(element2, innerItems[0])) {
        if (this.tbarAlign) {
          this.element.querySelector("." + CLS_ITEMS + " ." + CLS_TBARCENTER).removeAttribute("style");
        }
        if (this.isVertical) {
          this.scrollModule = new VScroll({
            scrollStep: this.scrollStep,
            enableRtl: this.enableRtl
          }, innerItems[0]);
        } else {
          this.scrollModule = new HScroll({
            scrollStep: this.scrollStep,
            enableRtl: this.enableRtl
          }, innerItems[0]);
        }
        if (this.cssClass) {
          addClass([innerItems[0]], this.cssClass.split(" "));
        }
        var scrollEle = this.scrollModule.element.querySelector("." + CLS_HSCROLLBAR2 + ", .e-vscroll-bar");
        if (scrollEle) {
          scrollEle.removeAttribute("tabindex");
        }
        this.remove(this.scrollModule.element, CLS_TBARPOS);
        setStyleAttribute(this.element, {
          overflow: "hidden"
        });
      }
    };
    Toolbar2.prototype.itemWidthCal = function(items) {
      var _this = this;
      var width = 0;
      var style;
      [].slice.call(selectAll("." + CLS_ITEM, items)).forEach(function(el) {
        if (isVisible(el)) {
          style = window.getComputedStyle(el);
          width += _this.isVertical ? el.offsetHeight : el.offsetWidth;
          width += parseFloat(_this.isVertical ? style.marginTop : style.marginRight);
          width += parseFloat(_this.isVertical ? style.marginBottom : style.marginLeft);
        }
      });
      return width;
    };
    Toolbar2.prototype.getScrollCntEle = function(innerItem) {
      var trgClass = this.isVertical ? ".e-vscroll-content" : ".e-hscroll-content";
      return innerItem.querySelector(trgClass);
    };
    Toolbar2.prototype.checkOverflow = function(element2, innerItem) {
      if (isNullOrUndefined(element2) || isNullOrUndefined(innerItem) || !isVisible(element2)) {
        return false;
      }
      var eleWidth = this.isVertical ? element2.offsetHeight : element2.offsetWidth;
      var itemWidth = this.isVertical ? innerItem.offsetHeight : innerItem.offsetWidth;
      if (this.tbarAlign || this.scrollModule || eleWidth === itemWidth) {
        itemWidth = this.itemWidthCal(this.scrollModule ? this.getScrollCntEle(innerItem) : innerItem);
      }
      var popNav = element2.querySelector("." + CLS_TBARNAV);
      var scrollNav = element2.querySelector("." + CLS_TBARSCRLNAV);
      var navEleWidth = 0;
      if (popNav) {
        navEleWidth = this.isVertical ? popNav.offsetHeight : popNav.offsetWidth;
      } else if (scrollNav) {
        navEleWidth = this.isVertical ? scrollNav.offsetHeight * 2 : scrollNav.offsetWidth * 2;
      }
      if (eleWidth >= itemWidth && scrollNav) {
        return false;
      } else if (itemWidth > eleWidth - navEleWidth) {
        return true;
      } else {
        return false;
      }
    };
    Toolbar2.prototype.refreshOverflow = function() {
      this.resize();
    };
    Toolbar2.prototype.toolbarAlign = function(innerItems) {
      if (this.tbarAlign) {
        this.add(innerItems, CLS_TBARPOS);
        this.itemPositioning();
      }
    };
    Toolbar2.prototype.renderOverflowMode = function() {
      var ele = this.element;
      var innerItems = ele.querySelector("." + CLS_ITEMS);
      var priorityCheck = this.popupPriCount > 0;
      if (ele && ele.children.length > 0) {
        this.offsetWid = ele.offsetWidth;
        this.remove(this.element, "e-toolpop");
        if (Browser.info.name === "msie" && this.height === "auto") {
          ele.style.height = "";
        }
        switch (this.overflowMode) {
          case "Scrollable":
            if (isNullOrUndefined(this.scrollModule)) {
              this.initScroll(ele, [].slice.call(ele.getElementsByClassName(CLS_ITEMS)));
            }
            break;
          case "Popup":
            this.add(this.element, "e-toolpop");
            if (this.tbarAlign) {
              this.removePositioning();
            }
            if (this.checkOverflow(ele, innerItems) || priorityCheck) {
              this.setOverflowAttributes(ele);
            }
            this.toolbarAlign(innerItems);
            break;
          case "MultiRow":
            this.add(innerItems, CLS_MULTIROW);
            if (this.checkOverflow(ele, innerItems) && this.tbarAlign) {
              this.removePositioning();
              this.add(innerItems, CLS_MULTIROWPOS);
            }
            if (ele.style.overflow === "hidden") {
              ele.style.overflow = "";
            }
            if (Browser.info.name === "msie" || ele.style.height !== "auto") {
              ele.style.height = "auto";
            }
            break;
          case "Extended":
            this.add(this.element, CLS_EXTEANDABLE_TOOLBAR);
            if (this.checkOverflow(ele, innerItems) || priorityCheck) {
              if (this.tbarAlign) {
                this.removePositioning();
              }
              this.setOverflowAttributes(ele);
            }
            this.toolbarAlign(innerItems);
        }
      }
    };
    Toolbar2.prototype.setOverflowAttributes = function(ele) {
      this.createPopupEle(ele, [].slice.call(selectAll("." + CLS_ITEMS + " ." + CLS_ITEM, ele)));
      var ariaAttr = {
        "tabindex": "0",
        "role": "button",
        "aria-haspopup": "true",
        "aria-label": "overflow"
      };
      attributes(this.element.querySelector("." + CLS_TBARNAV), ariaAttr);
    };
    Toolbar2.prototype.separator = function() {
      var element2 = this.element;
      var eleItem = [].slice.call(element2.querySelectorAll("." + CLS_SEPARATOR));
      var multiVar = element2.querySelector("." + CLS_MULTIROW_SEPARATOR);
      var extendVar = element2.querySelector("." + CLS_EXTENDABLE_SEPARATOR);
      var eleInlineItem = this.overflowMode === "MultiRow" ? multiVar : extendVar;
      if (eleInlineItem !== null) {
        if (this.overflowMode === "MultiRow") {
          eleInlineItem.classList.remove(CLS_MULTIROW_SEPARATOR);
        } else if (this.overflowMode === "Extended") {
          eleInlineItem.classList.remove(CLS_EXTENDABLE_SEPARATOR);
        }
      }
      for (var i = 0; i <= eleItem.length - 1; i++) {
        if (eleItem[parseInt(i.toString(), 10)].offsetLeft < 30 && eleItem[parseInt(i.toString(), 10)].offsetLeft !== 0) {
          if (this.overflowMode === "MultiRow") {
            eleItem[parseInt(i.toString(), 10)].classList.add(CLS_MULTIROW_SEPARATOR);
          } else if (this.overflowMode === "Extended") {
            eleItem[parseInt(i.toString(), 10)].classList.add(CLS_EXTENDABLE_SEPARATOR);
          }
        }
      }
    };
    Toolbar2.prototype.createPopupEle = function(ele, innerEle) {
      var innerNav = ele.querySelector("." + CLS_TBARNAV);
      var vertical = this.isVertical;
      if (!innerNav) {
        this.createPopupIcon(ele);
      }
      innerNav = ele.querySelector("." + CLS_TBARNAV);
      var innerNavDom = vertical ? innerNav.offsetHeight : innerNav.offsetWidth;
      var eleWidth = (vertical ? ele.offsetHeight : ele.offsetWidth) - innerNavDom;
      this.element.classList.remove("e-rtl");
      setStyleAttribute(this.element, {
        direction: "initial"
      });
      this.checkPriority(ele, innerEle, eleWidth, true);
      if (this.enableRtl) {
        this.element.classList.add("e-rtl");
      }
      this.element.style.removeProperty("direction");
      this.createPopup();
    };
    Toolbar2.prototype.pushingPoppedEle = function(tbarObj, popupPri, ele, eleHeight, sepHeight) {
      var element2 = tbarObj.element;
      var poppedEle = [].slice.call(selectAll("." + CLS_POPUP, element2.querySelector("." + CLS_ITEMS)));
      var nodes = selectAll("." + CLS_TBAROVERFLOW, ele);
      var nodeIndex = 0;
      var nodePri = 0;
      poppedEle.forEach(function(el, index) {
        nodes = selectAll("." + CLS_TBAROVERFLOW, ele);
        if (el.classList.contains(CLS_TBAROVERFLOW) && nodes.length > 0) {
          if (tbarObj.tbResize && nodes.length > index) {
            ele.insertBefore(el, nodes[parseInt(index.toString(), 10)]);
            ++nodePri;
          } else {
            ele.insertBefore(el, ele.children[nodes.length]);
            ++nodePri;
          }
        } else if (el.classList.contains(CLS_TBAROVERFLOW)) {
          ele.insertBefore(el, ele.firstChild);
          ++nodePri;
        } else if (tbarObj.tbResize && el.classList.contains(CLS_POPOVERFLOW) && ele.children.length > 0 && nodes.length === 0) {
          ele.insertBefore(el, ele.firstChild);
          ++nodePri;
        } else if (el.classList.contains(CLS_POPOVERFLOW)) {
          popupPri.push(el);
        } else if (tbarObj.tbResize) {
          ele.insertBefore(el, ele.childNodes[nodeIndex + nodePri]);
          ++nodeIndex;
        } else {
          ele.appendChild(el);
        }
        if (el.classList.contains(CLS_SEPARATOR)) {
          setStyleAttribute(el, {
            display: "",
            height: sepHeight + "px"
          });
        } else {
          setStyleAttribute(el, {
            display: "",
            height: eleHeight + "px"
          });
        }
      });
      popupPri.forEach(function(el) {
        ele.appendChild(el);
      });
      var tbarEle = selectAll("." + CLS_ITEM, element2.querySelector("." + CLS_ITEMS));
      for (var i = tbarEle.length - 1; i >= 0; i--) {
        var tbarElement = tbarEle[parseInt(i.toString(), 10)];
        if (tbarElement.classList.contains(CLS_SEPARATOR) && this.overflowMode !== "Extended") {
          setStyleAttribute(tbarElement, {
            display: "none"
          });
        } else {
          break;
        }
      }
    };
    Toolbar2.prototype.createPopup = function() {
      var element2 = this.element;
      var sepHeight;
      var sepItem;
      if (this.overflowMode === "Extended") {
        sepItem = element2.querySelector("." + CLS_SEPARATOR);
        sepHeight = element2.style.height === "auto" || element2.style.height === "" ? null : sepItem && sepItem.offsetHeight;
      }
      var eleItem = element2.querySelector("." + CLS_ITEM + ":not(." + CLS_SEPARATOR + "):not(." + CLS_POPUP + ")");
      var eleHeight = element2.style.height === "auto" || element2.style.height === "" ? null : eleItem && eleItem.offsetHeight;
      var ele;
      var popupPri = [];
      if (select("#" + element2.id + "_popup." + CLS_POPUPCLASS, element2)) {
        ele = select("#" + element2.id + "_popup." + CLS_POPUPCLASS, element2);
      } else {
        var extendEle = this.createElement("div", {
          id: element2.id + "_popup",
          className: CLS_POPUPCLASS + " " + CLS_EXTENDABLECLASS
        });
        var popupEle = this.createElement("div", {
          id: element2.id + "_popup",
          className: CLS_POPUPCLASS
        });
        ele = this.overflowMode === "Extended" ? extendEle : popupEle;
      }
      this.pushingPoppedEle(this, popupPri, ele, eleHeight, sepHeight);
      this.popupInit(element2, ele);
    };
    Toolbar2.prototype.getElementOffsetY = function() {
      return this.overflowMode === "Extended" && window.getComputedStyle(this.element).getPropertyValue("box-sizing") === "border-box" ? this.element.clientHeight : this.element.offsetHeight;
    };
    Toolbar2.prototype.popupInit = function(element2, ele) {
      if (!this.popObj) {
        element2.appendChild(ele);
        if (this.cssClass) {
          addClass([ele], this.cssClass.split(" "));
        }
        setStyleAttribute(this.element, {
          overflow: ""
        });
        var popup = new Popup(null, {
          relateTo: this.element,
          offsetY: this.isVertical ? 0 : this.getElementOffsetY(),
          enableRtl: this.enableRtl,
          open: this.popupOpen.bind(this),
          close: this.popupClose.bind(this),
          collision: {
            Y: this.enableCollision ? "flip" : "none"
          },
          position: this.enableRtl ? {
            X: "left",
            Y: "top"
          } : {
            X: "right",
            Y: "top"
          }
        });
        if (this.overflowMode === "Extended") {
          popup.width = this.getToolbarPopupWidth(this.element);
          popup.offsetX = 0;
        }
        popup.appendTo(ele);
        document.addEventListener("scroll", this.clickEvent);
        document.addEventListener("click", this.scrollEvent);
        if (this.overflowMode !== "Extended") {
          popup.element.style.maxHeight = popup.element.offsetHeight + "px";
        }
        if (this.isVertical) {
          popup.element.style.visibility = "hidden";
        }
        if (this.isExtendedOpen) {
          var popupNav = this.element.querySelector("." + CLS_TBARNAV);
          popupNav.classList.add(CLS_TBARNAVACT);
          classList(popupNav.firstElementChild, [CLS_POPUPICON], [CLS_POPUPDOWN]);
          this.element.querySelector("." + CLS_EXTENDABLECLASS).classList.add(CLS_POPUPOPEN);
        } else {
          popup.hide();
        }
        this.popObj = popup;
      } else if (this.overflowMode !== "Extended") {
        var popupEle = this.popObj.element;
        setStyleAttribute(popupEle, {
          maxHeight: "",
          display: "block"
        });
        setStyleAttribute(popupEle, {
          maxHeight: popupEle.offsetHeight + "px",
          display: ""
        });
      }
    };
    Toolbar2.prototype.tbarPopupHandler = function(isOpen) {
      if (this.overflowMode === "Extended") {
        if (isOpen) {
          this.add(this.element, CLS_EXTENDEDPOPOPEN);
        } else {
          this.remove(this.element, CLS_EXTENDEDPOPOPEN);
        }
      }
    };
    Toolbar2.prototype.popupOpen = function(e) {
      var popObj = this.popObj;
      if (!this.isVertical) {
        popObj.offsetY = this.getElementOffsetY();
        popObj.dataBind();
      }
      var popupEle = this.popObj.element;
      var toolEle = this.popObj.element.parentElement;
      var popupNav = toolEle.querySelector("." + CLS_TBARNAV);
      popupNav.setAttribute("aria-expanded", "true");
      if (this.overflowMode === "Extended") {
        popObj.element.style.minHeight = "";
      } else {
        setStyleAttribute(popObj.element, {
          height: "auto",
          maxHeight: ""
        });
        popObj.element.style.maxHeight = popObj.element.offsetHeight + "px";
      }
      var popupElePos = popupEle.offsetTop + popupEle.offsetHeight + calculatePosition(toolEle).top;
      var popIcon = popupNav.firstElementChild;
      popupNav.classList.add(CLS_TBARNAVACT);
      classList(popIcon, [CLS_POPUPICON], [CLS_POPUPDOWN]);
      this.tbarPopupHandler(true);
      var scrollVal = isNullOrUndefined(window.scrollY) ? 0 : window.scrollY;
      if (!this.isVertical && window.innerHeight + scrollVal < popupElePos && this.element.offsetTop < popupEle.offsetHeight) {
        var overflowHeight = popupEle.offsetHeight - (popupElePos - window.innerHeight - scrollVal + 5);
        popObj.height = overflowHeight + "px";
        for (var i = 0; i <= popupEle.childElementCount; i++) {
          var ele = popupEle.children[parseInt(i.toString(), 10)];
          if (ele.offsetTop + ele.offsetHeight > overflowHeight) {
            overflowHeight = ele.offsetTop;
            break;
          }
        }
        if (this.overflowMode !== "Extended") {
          setStyleAttribute(popObj.element, {
            maxHeight: overflowHeight + "px"
          });
        }
      } else if (this.isVertical && this.overflowMode !== "Extended") {
        var tbEleData = this.element.getBoundingClientRect();
        setStyleAttribute(popObj.element, {
          maxHeight: tbEleData.top + this.element.offsetHeight + "px",
          bottom: 0,
          visibility: ""
        });
      }
      if (popObj) {
        var popupOffset = popupEle.getBoundingClientRect();
        if (popupOffset.right > document.documentElement.clientWidth && popupOffset.width > toolEle.getBoundingClientRect().width) {
          popObj.collision = {
            Y: "none"
          };
          popObj.dataBind();
        }
        popObj.refreshPosition();
      }
    };
    Toolbar2.prototype.popupClose = function(e) {
      var element2 = this.element;
      var popupNav = element2.querySelector("." + CLS_TBARNAV);
      popupNav.setAttribute("aria-expanded", "false");
      var popIcon = popupNav.firstElementChild;
      popupNav.classList.remove(CLS_TBARNAVACT);
      classList(popIcon, [CLS_POPUPDOWN], [CLS_POPUPICON]);
      this.tbarPopupHandler(false);
    };
    Toolbar2.prototype.checkPriority = function(ele, inEle, eleWidth, pre) {
      var popPriority = this.popupPriCount > 0;
      var len = inEle.length;
      var eleWid = eleWidth;
      var eleOffset;
      var checkoffset;
      var sepCheck = 0;
      var itemCount = 0;
      var itemPopCount = 0;
      var checkClass = function(ele2, val) {
        var rVal = false;
        val.forEach(function(cls) {
          if (ele2.classList.contains(cls)) {
            rVal = true;
          }
        });
        return rVal;
      };
      for (var i = len - 1; i >= 0; i--) {
        var mrgn = void 0;
        var compuStyle = window.getComputedStyle(inEle[parseInt(i.toString(), 10)]);
        if (this.isVertical) {
          mrgn = parseFloat(compuStyle.marginTop);
          mrgn += parseFloat(compuStyle.marginBottom);
        } else {
          mrgn = parseFloat(compuStyle.marginRight);
          mrgn += parseFloat(compuStyle.marginLeft);
        }
        var fstEleCheck = inEle[parseInt(i.toString(), 10)] === this.tbarEle[0];
        if (fstEleCheck) {
          this.tbarEleMrgn = mrgn;
        }
        eleOffset = this.isVertical ? inEle[parseInt(i.toString(), 10)].offsetHeight : inEle[parseInt(i.toString(), 10)].offsetWidth;
        var eleWid_1 = fstEleCheck ? eleOffset + mrgn : eleOffset;
        if (checkClass(inEle[parseInt(i.toString(), 10)], [CLS_POPPRI]) && popPriority) {
          inEle[parseInt(i.toString(), 10)].classList.add(CLS_POPUP);
          if (this.isVertical) {
            setStyleAttribute(inEle[parseInt(i.toString(), 10)], {
              display: "none",
              minHeight: eleWid_1 + "px"
            });
          } else {
            setStyleAttribute(inEle[parseInt(i.toString(), 10)], {
              display: "none",
              minWidth: eleWid_1 + "px"
            });
          }
          itemPopCount++;
        }
        if (this.isVertical) {
          checkoffset = inEle[parseInt(i.toString(), 10)].offsetTop + inEle[parseInt(i.toString(), 10)].offsetHeight + mrgn > eleWidth;
        } else {
          checkoffset = inEle[parseInt(i.toString(), 10)].offsetLeft + inEle[parseInt(i.toString(), 10)].offsetWidth + mrgn > eleWidth;
        }
        if (checkoffset) {
          if (inEle[parseInt(i.toString(), 10)].classList.contains(CLS_SEPARATOR)) {
            if (this.overflowMode === "Extended") {
              var sepEle = inEle[parseInt(i.toString(), 10)];
              if (checkClass(sepEle, [CLS_SEPARATOR, CLS_TBARIGNORE])) {
                inEle[parseInt(i.toString(), 10)].classList.add(CLS_POPUP);
                itemPopCount++;
              }
              itemCount++;
            } else if (this.overflowMode === "Popup") {
              if (sepCheck > 0 && itemCount === itemPopCount) {
                var sepEle = inEle[i + itemCount + (sepCheck - 1)];
                if (checkClass(sepEle, [CLS_SEPARATOR, CLS_TBARIGNORE])) {
                  setStyleAttribute(sepEle, {
                    display: "none"
                  });
                }
              }
              sepCheck++;
              itemCount = 0;
              itemPopCount = 0;
            }
          } else {
            itemCount++;
          }
          if (inEle[parseInt(i.toString(), 10)].classList.contains(CLS_TBAROVERFLOW) && pre) {
            eleWidth -= (this.isVertical ? inEle[parseInt(i.toString(), 10)].offsetHeight : inEle[parseInt(i.toString(), 10)].offsetWidth) + mrgn;
          } else if (!checkClass(inEle[parseInt(i.toString(), 10)], [CLS_SEPARATOR, CLS_TBARIGNORE])) {
            inEle[parseInt(i.toString(), 10)].classList.add(CLS_POPUP);
            if (this.isVertical) {
              setStyleAttribute(inEle[parseInt(i.toString(), 10)], {
                display: "none",
                minHeight: eleWid_1 + "px"
              });
            } else {
              setStyleAttribute(inEle[parseInt(i.toString(), 10)], {
                display: "none",
                minWidth: eleWid_1 + "px"
              });
            }
            itemPopCount++;
          } else {
            eleWidth -= (this.isVertical ? inEle[parseInt(i.toString(), 10)].offsetHeight : inEle[parseInt(i.toString(), 10)].offsetWidth) + mrgn;
          }
        }
      }
      if (pre) {
        var popedEle = selectAll("." + CLS_ITEM + ":not(." + CLS_POPUP + ")", this.element);
        this.checkPriority(ele, popedEle, eleWid, false);
      }
    };
    Toolbar2.prototype.createPopupIcon = function(element2) {
      var id = element2.id.concat("_nav");
      var className = "e-" + element2.id.concat("_nav " + CLS_POPUPNAV);
      className = this.overflowMode === "Extended" ? className + " " + CLS_EXTENDPOPUP : className;
      var nav = this.createElement("div", {
        id,
        className
      });
      if (Browser.info.name === "msie" || Browser.info.name === "edge") {
        nav.classList.add("e-ie-align");
      }
      var navItem = this.createElement("div", {
        className: CLS_POPUPDOWN + " e-icons"
      });
      nav.appendChild(navItem);
      nav.setAttribute("tabindex", "0");
      nav.setAttribute("role", "button");
      element2.appendChild(nav);
    };
    Toolbar2.prototype.tbarPriRef = function(inEle, indx, sepPri, el, des, elWid, wid, ig, eleStyles) {
      var ignoreCount = ig;
      var popEle = this.popObj.element;
      var query = "." + CLS_ITEM + ":not(." + CLS_SEPARATOR + "):not(." + CLS_TBAROVERFLOW + ")";
      var priEleCnt = selectAll("." + CLS_POPUP + ":not(." + CLS_TBAROVERFLOW + ")", popEle).length;
      var checkClass = function(ele, val) {
        return ele.classList.contains(val);
      };
      if (selectAll(query, inEle).length === 0) {
        var eleSep = inEle.children[indx - (indx - sepPri) - 1];
        var ignoreCheck = !isNullOrUndefined(eleSep) && checkClass(eleSep, CLS_TBARIGNORE);
        if (!isNullOrUndefined(eleSep) && checkClass(eleSep, CLS_SEPARATOR) && !isVisible(eleSep) || ignoreCheck) {
          eleSep.style.display = "unset";
          var eleSepWidth = eleSep.offsetWidth + parseFloat(window.getComputedStyle(eleSep).marginRight) * 2;
          var prevSep = eleSep.previousElementSibling;
          if (elWid + eleSepWidth < wid || des) {
            inEle.insertBefore(el, inEle.children[indx + ignoreCount - (indx - sepPri)]);
            if (!isNullOrUndefined(prevSep)) {
              prevSep.style.display = "";
            }
          } else {
            setStyleAttribute(el, eleStyles);
            if (prevSep.classList.contains(CLS_SEPARATOR)) {
              prevSep.style.display = "none";
            }
          }
          eleSep.style.display = "";
        } else {
          inEle.insertBefore(el, inEle.children[indx + ignoreCount - (indx - sepPri)]);
        }
      } else {
        inEle.insertBefore(el, inEle.children[indx + ignoreCount - priEleCnt]);
      }
    };
    Toolbar2.prototype.popupRefresh = function(popupEle, destroy3) {
      var _this = this;
      var ele = this.element;
      var isVer = this.isVertical;
      var innerEle = ele.querySelector("." + CLS_ITEMS);
      var popNav = ele.querySelector("." + CLS_TBARNAV);
      if (isNullOrUndefined(popNav)) {
        return;
      }
      innerEle.removeAttribute("style");
      popupEle.style.display = "block";
      var dimension;
      if (isVer) {
        dimension = ele.offsetHeight - (popNav.offsetHeight + innerEle.offsetHeight);
      } else {
        dimension = ele.offsetWidth - (popNav.offsetWidth + innerEle.offsetWidth);
      }
      var popupEleWidth = 0;
      [].slice.call(popupEle.children).forEach(function(el) {
        popupEleWidth += _this.popupEleWidth(el);
        setStyleAttribute(el, {
          "position": ""
        });
      });
      if (dimension + (isVer ? popNav.offsetHeight : popNav.offsetWidth) > popupEleWidth && this.popupPriCount === 0) {
        destroy3 = true;
      }
      this.popupEleRefresh(dimension, popupEle, destroy3);
      popupEle.style.display = "";
      if (popupEle.children.length === 0 && popNav && this.popObj) {
        detach(popNav);
        popNav = null;
        this.popObj.destroy();
        detach(this.popObj.element);
        this.popObj = null;
      }
    };
    Toolbar2.prototype.ignoreEleFetch = function(index, innerEle) {
      var ignoreEle = [].slice.call(innerEle.querySelectorAll("." + CLS_TBARIGNORE));
      var ignoreInx = [];
      var count = 0;
      if (ignoreEle.length > 0) {
        ignoreEle.forEach(function(ele) {
          ignoreInx.push([].slice.call(innerEle.children).indexOf(ele));
        });
      } else {
        return 0;
      }
      ignoreInx.forEach(function(val) {
        if (val <= index) {
          count++;
        }
      });
      return count;
    };
    Toolbar2.prototype.checkPopupRefresh = function(root, popEle) {
      popEle.style.display = "block";
      var elWid = this.popupEleWidth(popEle.firstElementChild);
      popEle.firstElementChild.style.removeProperty("Position");
      var tbarWidth = root.offsetWidth - root.querySelector("." + CLS_TBARNAV).offsetWidth;
      var tbarItemsWid = root.querySelector("." + CLS_ITEMS).offsetWidth;
      popEle.style.removeProperty("display");
      if (tbarWidth > elWid + tbarItemsWid) {
        return true;
      }
      return false;
    };
    Toolbar2.prototype.popupEleWidth = function(el) {
      el.style.position = "absolute";
      var style = window.getComputedStyle(el);
      var elWidth = this.isVertical ? el.offsetHeight : el.offsetWidth + parseFloat(style.marginLeft) + parseFloat(style.marginRight);
      var btnText = el.querySelector("." + CLS_TBARBTNTEXT);
      if (el.classList.contains("e-tbtn-align") || el.classList.contains(CLS_TBARTEXT)) {
        var btn = el.children[0];
        if (!isNullOrUndefined(btnText) && el.classList.contains(CLS_TBARTEXT)) {
          btnText.style.display = "none";
        } else if (!isNullOrUndefined(btnText) && el.classList.contains(CLS_POPUPTEXT)) {
          btnText.style.display = "block";
        }
        btn.style.minWidth = "0%";
        elWidth = parseFloat(!this.isVertical ? el.style.minWidth : el.style.minHeight);
        btn.style.minWidth = "";
        btn.style.minHeight = "";
        if (!isNullOrUndefined(btnText)) {
          btnText.style.display = "";
        }
      }
      return elWidth;
    };
    Toolbar2.prototype.popupEleRefresh = function(width, popupEle, destroy3) {
      var popPriority = this.popupPriCount > 0;
      var eleSplice = this.tbarEle;
      var priEleCnt;
      var index;
      var innerEle = this.element.querySelector("." + CLS_ITEMS);
      var ignoreCount = 0;
      var _loop_1 = function(el2) {
        if (el2.classList.contains(CLS_POPPRI) && popPriority && !destroy3) {
          return "continue";
        }
        var elWidth = this_1.popupEleWidth(el2);
        if (el2 === this_1.tbarEle[0]) {
          elWidth += this_1.tbarEleMrgn;
        }
        el2.style.position = "";
        if (elWidth < width || destroy3) {
          var inlineStyles = {
            minWidth: el2.style.minWidth,
            height: el2.style.height,
            minHeight: el2.style.minHeight
          };
          setStyleAttribute(el2, {
            minWidth: "",
            height: "",
            minHeight: ""
          });
          if (!el2.classList.contains(CLS_POPOVERFLOW)) {
            el2.classList.remove(CLS_POPUP);
          }
          index = this_1.tbarEle.indexOf(el2);
          if (this_1.tbarAlign) {
            var pos = this_1.items[parseInt(index.toString(), 10)].align;
            index = this_1.tbarAlgEle[(pos + "s").toLowerCase()].indexOf(el2);
            eleSplice = this_1.tbarAlgEle[(pos + "s").toLowerCase()];
            innerEle = this_1.element.querySelector("." + CLS_ITEMS + " .e-toolbar-" + pos.toLowerCase());
          }
          var sepBeforePri_1 = 0;
          if (this_1.overflowMode !== "Extended") {
            eleSplice.slice(0, index).forEach(function(el3) {
              if (el3.classList.contains(CLS_TBAROVERFLOW) || el3.classList.contains(CLS_SEPARATOR)) {
                if (el3.classList.contains(CLS_SEPARATOR)) {
                  el3.style.display = "";
                  width -= el3.offsetWidth;
                }
                sepBeforePri_1++;
              }
            });
          }
          ignoreCount = this_1.ignoreEleFetch(index, innerEle);
          if (el2.classList.contains(CLS_TBAROVERFLOW)) {
            this_1.tbarPriRef(innerEle, index, sepBeforePri_1, el2, destroy3, elWidth, width, ignoreCount, inlineStyles);
            width -= el2.offsetWidth;
          } else if (index === 0) {
            innerEle.insertBefore(el2, innerEle.firstChild);
            width -= el2.offsetWidth;
          } else {
            priEleCnt = selectAll("." + CLS_TBAROVERFLOW, this_1.popObj.element).length;
            innerEle.insertBefore(el2, innerEle.children[index + ignoreCount - priEleCnt]);
            width -= el2.offsetWidth;
          }
          el2.style.height = "";
        } else {
          return "break";
        }
      };
      var this_1 = this;
      for (var _i = 0, _a = [].slice.call(popupEle.children); _i < _a.length; _i++) {
        var el = _a[_i];
        var state_1 = _loop_1(el);
        if (state_1 === "break") break;
      }
      var checkOverflow = this.checkOverflow(this.element, this.element.getElementsByClassName(CLS_ITEMS)[0]);
      if (checkOverflow && !destroy3) {
        this.renderOverflowMode();
      }
    };
    Toolbar2.prototype.removePositioning = function() {
      var item = this.element.querySelector("." + CLS_ITEMS);
      if (isNullOrUndefined(item) || !item.classList.contains(CLS_TBARPOS)) {
        return;
      }
      this.remove(item, CLS_TBARPOS);
      var innerItem = [].slice.call(item.childNodes);
      innerItem[1].removeAttribute("style");
      innerItem[2].removeAttribute("style");
    };
    Toolbar2.prototype.refreshPositioning = function() {
      var item = this.element.querySelector("." + CLS_ITEMS);
      this.add(item, CLS_TBARPOS);
      this.itemPositioning();
    };
    Toolbar2.prototype.itemPositioning = function() {
      var item = this.element.querySelector("." + CLS_ITEMS);
      var margin;
      if (isNullOrUndefined(item) || !item.classList.contains(CLS_TBARPOS)) {
        return;
      }
      var popupNav = this.element.querySelector("." + CLS_TBARNAV);
      var innerItem;
      if (this.scrollModule) {
        var trgClass = this.isVertical ? CLS_VSCROLLCNT : CLS_HSCROLLCNT;
        innerItem = [].slice.call(item.querySelector("." + trgClass).children);
      } else {
        innerItem = [].slice.call(item.childNodes);
      }
      if (this.isVertical) {
        margin = innerItem[0].offsetHeight + innerItem[2].offsetHeight;
      } else {
        margin = innerItem[0].offsetWidth + innerItem[2].offsetWidth;
      }
      var tbarWid = this.isVertical ? this.element.offsetHeight : this.element.offsetWidth;
      if (popupNav) {
        tbarWid -= this.isVertical ? popupNav.offsetHeight : popupNav.offsetWidth;
        var popWid = (this.isVertical ? popupNav.offsetHeight : popupNav.offsetWidth) + "px";
        innerItem[2].removeAttribute("style");
        if (this.isVertical) {
          if (this.enableRtl) {
            innerItem[2].style.top = popWid;
          } else {
            innerItem[2].style.bottom = popWid;
          }
        } else {
          if (this.enableRtl) {
            innerItem[2].style.left = popWid;
          } else {
            innerItem[2].style.right = popWid;
          }
        }
      }
      if (tbarWid <= margin) {
        return;
      }
      var value = (tbarWid - margin - (!this.isVertical ? innerItem[1].offsetWidth : innerItem[1].offsetHeight)) / 2;
      innerItem[1].removeAttribute("style");
      var mrgn = (!this.isVertical ? innerItem[0].offsetWidth : innerItem[0].offsetHeight) + value + "px";
      if (this.isVertical) {
        if (this.enableRtl) {
          innerItem[1].style.marginBottom = mrgn;
        } else {
          innerItem[1].style.marginTop = mrgn;
        }
      } else {
        if (this.enableRtl) {
          innerItem[1].style.marginRight = mrgn;
        } else {
          innerItem[1].style.marginLeft = mrgn;
        }
      }
    };
    Toolbar2.prototype.tbarItemAlign = function(item, itemEle, pos) {
      var _this = this;
      if (item.showAlwaysInPopup && item.overflow !== "Show") {
        return;
      }
      var alignDiv = [];
      alignDiv.push(this.createElement("div", {
        className: CLS_TBARLEFT,
        attrs: {
          role: "group"
        }
      }));
      alignDiv.push(this.createElement("div", {
        className: CLS_TBARCENTER,
        attrs: {
          role: "group"
        }
      }));
      alignDiv.push(this.createElement("div", {
        className: CLS_TBARRIGHT,
        attrs: {
          role: "group"
        }
      }));
      if (pos === 0 && item.align !== "Left") {
        alignDiv.forEach(function(ele) {
          itemEle.appendChild(ele);
        });
        this.tbarAlign = true;
        this.add(itemEle, CLS_TBARPOS);
      } else if (item.align !== "Left") {
        var alignEle = itemEle.childNodes;
        var leftAlign_1 = alignDiv[0];
        [].slice.call(alignEle).forEach(function(el) {
          _this.tbarAlgEle.lefts.push(el);
          leftAlign_1.appendChild(el);
        });
        itemEle.appendChild(leftAlign_1);
        itemEle.appendChild(alignDiv[1]);
        itemEle.appendChild(alignDiv[2]);
        this.tbarAlign = true;
        this.add(itemEle, CLS_TBARPOS);
      }
    };
    Toolbar2.prototype.ctrlTemplate = function() {
      var _this = this;
      this.ctrlTem = this.trgtEle.cloneNode(true);
      this.add(this.trgtEle, CLS_ITEMS);
      this.tbarEle = [];
      var innerEle = [].slice.call(this.trgtEle.children);
      innerEle.forEach(function(ele) {
        if (ele.tagName === "DIV") {
          _this.tbarEle.push(ele);
          if (!isNullOrUndefined(ele.firstElementChild)) {
            ele.firstElementChild.setAttribute("aria-disabled", "false");
          }
          _this.add(ele, CLS_ITEM);
        }
      });
    };
    Toolbar2.prototype.renderItems = function() {
      var ele = this.element;
      var items = this.items;
      if (this.trgtEle != null) {
        this.ctrlTemplate();
      } else if (ele && items.length > 0) {
        var itemEleDom = void 0;
        if (ele && ele.children.length > 0) {
          itemEleDom = ele.querySelector("." + CLS_ITEMS);
        }
        if (!itemEleDom) {
          itemEleDom = this.createElement("div", {
            className: CLS_ITEMS
          });
        }
        this.itemsAlign(items, itemEleDom);
        ele.appendChild(itemEleDom);
      }
    };
    Toolbar2.prototype.setAttr = function(attr, element2) {
      var key = Object.keys(attr);
      var keyVal;
      for (var i = 0; i < key.length; i++) {
        keyVal = key[parseInt(i.toString(), 10)];
        if (keyVal === "class") {
          this.add(element2, attr["" + keyVal]);
        } else {
          element2.setAttribute(keyVal, attr["" + keyVal]);
        }
      }
    };
    Toolbar2.prototype.enableItems = function(items, isEnable) {
      var _this = this;
      var elements = items;
      var len = elements.length;
      var ele;
      if (isNullOrUndefined(isEnable)) {
        isEnable = true;
      }
      var enable = function(isEnable2, ele2) {
        if (isEnable2) {
          ele2.classList.remove(CLS_DISABLE3);
          if (!isNullOrUndefined(ele2.firstElementChild)) {
            ele2.firstElementChild.setAttribute("aria-disabled", "false");
            _this.updateTabIndex("0");
          }
        } else {
          ele2.classList.add(CLS_DISABLE3);
          if (!isNullOrUndefined(ele2.firstElementChild)) {
            ele2.firstElementChild.setAttribute("aria-disabled", "true");
            ele2.firstElementChild.setAttribute("tabindex", "-1");
            _this.updateTabIndex("0");
          }
        }
      };
      if (!isNullOrUndefined(len) && len >= 1) {
        for (var a = 0, element2 = [].slice.call(elements); a < len; a++) {
          var itemElement = element2[parseInt(a.toString(), 10)];
          if (typeof itemElement === "number") {
            ele = this.getElementByIndex(itemElement);
            if (isNullOrUndefined(ele)) {
              return;
            } else {
              elements[parseInt(a.toString(), 10)] = ele;
            }
          } else {
            ele = itemElement;
          }
          enable(isEnable, ele);
        }
        if (isEnable) {
          removeClass(elements, CLS_DISABLE3);
        } else {
          addClass(elements, CLS_DISABLE3);
        }
      } else {
        if (typeof elements === "number") {
          ele = this.getElementByIndex(elements);
          if (isNullOrUndefined(ele)) {
            return;
          }
        } else {
          ele = items;
        }
        enable(isEnable, ele);
      }
    };
    Toolbar2.prototype.getElementByIndex = function(index) {
      if (this.tbarEle[parseInt(index.toString(), 10)]) {
        return this.tbarEle[parseInt(index.toString(), 10)];
      }
      return null;
    };
    Toolbar2.prototype.addItems = function(items, index) {
      var innerItems;
      this.extendedOpen();
      var itemsDiv = this.element.querySelector("." + CLS_ITEMS);
      if (isNullOrUndefined(itemsDiv)) {
        this.itemsRerender(items);
        return;
      }
      var innerEle;
      var itemAgn = "Left";
      if (isNullOrUndefined(index)) {
        index = 0;
      }
      items.forEach(function(e) {
        if (!isNullOrUndefined(e.align) && e.align !== "Left" && itemAgn === "Left") {
          itemAgn = e.align;
        }
      });
      for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
        var item = items_1[_i];
        if (isNullOrUndefined(item.type)) {
          item.type = "Button";
        }
        innerItems = selectAll("." + CLS_ITEM, this.element);
        item.align = itemAgn;
        innerEle = this.renderSubComponent(item, index);
        if (this.tbarEle.length >= index && innerItems.length >= 0) {
          if (isNullOrUndefined(this.scrollModule)) {
            this.destroyMode();
          }
          var algIndex = item.align[0] === "L" ? 0 : item.align[0] === "C" ? 1 : 2;
          var ele = void 0;
          if (!this.tbarAlign && itemAgn !== "Left") {
            this.tbarItemAlign(item, itemsDiv, 1);
            this.tbarAlign = true;
            ele = closest(innerItems[0], "." + CLS_ITEMS).children[parseInt(algIndex.toString(), 10)];
            ele.appendChild(innerEle);
            this.tbarAlgEle[(item.align + "s").toLowerCase()].push(innerEle);
            this.refreshPositioning();
          } else if (this.tbarAlign) {
            ele = closest(innerItems[0], "." + CLS_ITEMS).children[parseInt(algIndex.toString(), 10)];
            ele.insertBefore(innerEle, ele.children[parseInt(index.toString(), 10)]);
            this.tbarAlgEle[(item.align + "s").toLowerCase()].splice(index, 0, innerEle);
            this.refreshPositioning();
          } else if (innerItems.length === 0) {
            innerItems = selectAll("." + CLS_ITEMS, this.element);
            innerItems[0].appendChild(innerEle);
          } else {
            innerItems[0].parentNode.insertBefore(innerEle, innerItems[parseInt(index.toString(), 10)]);
          }
          this.items.splice(index, 0, item);
          if (item.template) {
            this.tbarEle.splice(this.tbarEle.length - 1, 1);
          }
          this.tbarEle.splice(index, 0, innerEle);
          index++;
          this.offsetWid = itemsDiv.offsetWidth;
        }
      }
      itemsDiv.style.width = "";
      this.renderOverflowMode();
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Toolbar2.prototype.removeItems = function(args) {
      var elements = args;
      var index;
      var innerItems = [].slice.call(selectAll("." + CLS_ITEM, this.element));
      if (typeof elements === "number") {
        index = parseInt(args.toString(), 10);
        this.removeItemByIndex(index, innerItems);
      } else {
        if (elements && elements.length > 1) {
          for (var _i = 0, _a = [].slice.call(elements); _i < _a.length; _i++) {
            var ele = _a[_i];
            index = this.tbarEle.indexOf(ele);
            this.removeItemByIndex(index, innerItems);
            innerItems = selectAll("." + CLS_ITEM, this.element);
          }
        } else {
          var ele = elements && elements.length && elements.length === 1 ? elements[0] : args;
          index = innerItems.indexOf(ele);
          this.removeItemByIndex(index, innerItems);
        }
      }
      this.resize();
    };
    Toolbar2.prototype.removeItemByIndex = function(index, innerItems) {
      if (this.tbarEle[parseInt(index.toString(), 10)] && innerItems[parseInt(index.toString(), 10)]) {
        var eleIdx = this.tbarEle.indexOf(innerItems[parseInt(index.toString(), 10)]);
        if (this.tbarAlign) {
          var indexAgn = this.tbarAlgEle[(this.items[parseInt(eleIdx.toString(), 10)].align + "s").toLowerCase()].indexOf(this.tbarEle[parseInt(eleIdx.toString(), 10)]);
          this.tbarAlgEle[(this.items[parseInt(eleIdx.toString(), 10)].align + "s").toLowerCase()].splice(parseInt(indexAgn.toString(), 10), 1);
        }
        if (this.isReact) {
          this.clearToolbarTemplate(innerItems[parseInt(index.toString(), 10)]);
        }
        var btnItem = innerItems[parseInt(index.toString(), 10)].querySelector(".e-control.e-btn");
        if (!isNullOrUndefined(btnItem) && !isNullOrUndefined(btnItem.ej2_instances[0]) && !btnItem.ej2_instances[0].isDestroyed) {
          btnItem.ej2_instances[0].destroy();
        }
        detach(innerItems[parseInt(index.toString(), 10)]);
        this.items.splice(eleIdx, 1);
        this.tbarEle.splice(eleIdx, 1);
      }
    };
    Toolbar2.prototype.templateRender = function(templateProp, innerEle, item, index) {
      var itemType = item.type;
      var eleObj = templateProp;
      var isComponent;
      if (typeof templateProp === "object") {
        isComponent = typeof eleObj.appendTo === "function";
      }
      if (typeof templateProp === "string" || !isComponent) {
        var templateFn = void 0;
        var val = templateProp;
        var regEx = new RegExp(/<(?=.*? .*?\/ ?>|br|hr|input|!--|wbr)[a-z]+.*?>|<([a-z]+).*?<\/\1>/i);
        val = typeof templateProp === "string" ? templateProp.trim() : templateProp;
        try {
          if (typeof templateProp === "object" && !isNullOrUndefined(templateProp.tagName)) {
            innerEle.appendChild(templateProp);
          } else if (typeof templateProp === "string" && regEx.test(val)) {
            innerEle.innerHTML = val;
          } else if (document.querySelectorAll(val).length) {
            var ele = document.querySelector(val);
            var tempStr = ele.outerHTML.trim();
            innerEle.appendChild(ele);
            ele.style.display = "";
            if (!isNullOrUndefined(tempStr)) {
              this.tempId.push(val);
            }
          } else {
            templateFn = compile(val);
          }
        } catch (e) {
          templateFn = compile(val);
        }
        var tempArray = void 0;
        if (!isNullOrUndefined(templateFn)) {
          var toolbarTemplateID = this.element.id + index + "_template";
          tempArray = templateFn({}, this, "template", toolbarTemplateID, this.isStringTemplate, void 0, void 0, this.root);
        }
        if (!isNullOrUndefined(tempArray) && tempArray.length > 0) {
          [].slice.call(tempArray).forEach(function(ele2) {
            if (!isNullOrUndefined(ele2.tagName)) {
              ele2.style.display = "";
            }
            innerEle.appendChild(ele2);
          });
        }
      } else if (itemType === "Input") {
        var ele = this.createElement("input");
        if (item.id) {
          ele.id = item.id;
        } else {
          ele.id = getUniqueID("tbr-ipt");
        }
        innerEle.appendChild(ele);
        eleObj.appendTo(ele);
      }
      this.add(innerEle, CLS_TEMPLATE);
      var firstChild = innerEle.firstElementChild;
      if (!isNullOrUndefined(firstChild)) {
        firstChild.setAttribute("tabindex", isNullOrUndefined(firstChild.getAttribute("tabIndex")) ? "-1" : this.getDataTabindex(firstChild));
        firstChild.setAttribute("data-tabindex", isNullOrUndefined(firstChild.getAttribute("tabIndex")) ? "-1" : this.getDataTabindex(firstChild));
      }
      this.tbarEle.push(innerEle);
    };
    Toolbar2.prototype.buttonRendering = function(item, innerEle) {
      var dom = this.createElement("button", {
        className: CLS_TBARBTN
      });
      dom.setAttribute("type", "button");
      var textStr = item.text;
      var iconCss;
      var iconPos;
      if (item.id) {
        dom.id = item.id;
      } else {
        dom.id = getUniqueID("e-tbr-btn");
      }
      var btnTxt = this.createElement("span", {
        className: "e-tbar-btn-text"
      });
      if (textStr) {
        btnTxt.innerHTML = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(textStr) : textStr;
        dom.appendChild(btnTxt);
        dom.classList.add("e-tbtn-txt");
      } else {
        this.add(innerEle, "e-tbtn-align");
      }
      if (item.prefixIcon || item.suffixIcon) {
        if (item.prefixIcon && item.suffixIcon || item.prefixIcon) {
          iconCss = item.prefixIcon + " e-icons";
          iconPos = "Left";
        } else {
          iconCss = item.suffixIcon + " e-icons";
          iconPos = "Right";
        }
      }
      var btnObj = new Button({
        iconCss,
        iconPosition: iconPos
      });
      btnObj.createElement = this.createElement;
      btnObj.appendTo(dom);
      if (item.width) {
        setStyleAttribute(dom, {
          "width": formatUnit(item.width)
        });
      }
      return dom;
    };
    Toolbar2.prototype.renderSubComponent = function(item, index) {
      var dom;
      var innerEle = this.createElement("div", {
        className: CLS_ITEM
      });
      var tempDom = this.createElement("div", {
        innerHTML: this.enableHtmlSanitizer && !isNullOrUndefined(item.tooltipText) ? SanitizeHtmlHelper.sanitize(item.tooltipText) : item.tooltipText
      });
      if (!this.tbarEle) {
        this.tbarEle = [];
      }
      if (item.htmlAttributes) {
        this.setAttr(item.htmlAttributes, innerEle);
      }
      if (item.tooltipText) {
        innerEle.setAttribute("title", tempDom.textContent);
      }
      if (item.cssClass) {
        innerEle.className = innerEle.className + " " + item.cssClass;
      }
      if (item.template) {
        this.templateRender(item.template, innerEle, item, index);
      } else {
        switch (item.type) {
          case "Button":
            dom = this.buttonRendering(item, innerEle);
            dom.setAttribute("tabindex", isNullOrUndefined(item.tabIndex) ? "-1" : item.tabIndex.toString());
            dom.setAttribute("data-tabindex", isNullOrUndefined(item.tabIndex) ? "-1" : item.tabIndex.toString());
            dom.setAttribute("aria-label", item.text || item.tooltipText);
            dom.setAttribute("aria-disabled", "false");
            innerEle.appendChild(dom);
            innerEle.addEventListener("click", this.itemClick.bind(this));
            break;
          case "Separator":
            this.add(innerEle, CLS_SEPARATOR);
            break;
        }
      }
      if (item.showTextOn) {
        var sTxt = item.showTextOn;
        if (sTxt === "Toolbar") {
          this.add(innerEle, CLS_POPUPTEXT);
          this.add(innerEle, "e-tbtn-align");
        } else if (sTxt === "Overflow") {
          this.add(innerEle, CLS_TBARTEXT);
        }
      }
      if (item.overflow) {
        var overflow = item.overflow;
        if (overflow === "Show") {
          this.add(innerEle, CLS_TBAROVERFLOW);
        } else if (overflow === "Hide") {
          if (!innerEle.classList.contains(CLS_SEPARATOR)) {
            this.add(innerEle, CLS_POPOVERFLOW);
          }
        }
      }
      if (item.overflow !== "Show" && item.showAlwaysInPopup && !innerEle.classList.contains(CLS_SEPARATOR)) {
        this.add(innerEle, CLS_POPPRI);
        this.popupPriCount++;
      }
      if (item.disabled) {
        this.add(innerEle, CLS_DISABLE3);
      }
      if (item.visible === false) {
        this.add(innerEle, CLS_HIDDEN);
      }
      return innerEle;
    };
    Toolbar2.prototype.getDataTabindex = function(ele) {
      return isNullOrUndefined(ele.getAttribute("data-tabindex")) ? "-1" : ele.getAttribute("data-tabindex");
    };
    Toolbar2.prototype.itemClick = function(e) {
      var itemClosest = !isNullOrUndefined(closest(e.currentTarget, "." + CLS_TEMPLATE));
      if (itemClosest) {
        return;
      }
      this.activeEleSwitch(e.currentTarget);
    };
    Toolbar2.prototype.activeEleSwitch = function(ele) {
      this.activeEleRemove(ele.firstElementChild);
      this.activeEle.focus();
    };
    Toolbar2.prototype.activeEleRemove = function(curEle) {
      var previousEle = this.element.querySelector("." + CLS_ITEM + ":not(." + CLS_DISABLE3 + " ):not(." + CLS_SEPARATOR + " ):not(." + CLS_HIDDEN + " )");
      if (!isNullOrUndefined(this.activeEle)) {
        this.activeEle.setAttribute("tabindex", this.getDataTabindex(this.activeEle));
        if (previousEle) {
          previousEle.removeAttribute("tabindex");
        }
        previousEle = this.activeEle;
      }
      this.activeEle = curEle;
      if (this.getDataTabindex(this.activeEle) === "-1") {
        if (isNullOrUndefined(this.trgtEle) && !curEle.parentElement.classList.contains(CLS_TEMPLATE)) {
          if (!isNullOrUndefined(this.element.querySelector(".e-hor-nav")) && this.element.querySelector(".e-hor-nav").classList.contains("e-nav-active")) {
            this.updateTabIndex("0");
            var tabindexValue = this.getDataTabindex(previousEle) === "-1" ? "0" : this.getDataTabindex(previousEle);
            previousEle.setAttribute("tabindex", tabindexValue);
          } else {
            this.updateTabIndex("-1");
          }
          curEle.removeAttribute("tabindex");
        } else {
          var tabIndex = parseInt(this.getDataTabindex(this.activeEle), 10) + 1;
          this.activeEle.setAttribute("tabindex", tabIndex.toString());
        }
      }
    };
    Toolbar2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    Toolbar2.prototype.getModuleName = function() {
      return "toolbar";
    };
    Toolbar2.prototype.itemsRerender = function(newProp) {
      this.items = this.tbarItemsCol;
      if (this.isReact || this.isAngular) {
        this.clearTemplate();
      }
      this.destroyMode();
      this.destroyItems();
      this.items = newProp;
      this.tbarItemsCol = this.items;
      this.renderItems();
      this.renderOverflowMode();
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Toolbar2.prototype.resize = function() {
      var ele = this.element;
      this.tbResize = true;
      if (this.tbarAlign) {
        this.itemPositioning();
      }
      if (this.popObj && this.overflowMode === "Popup") {
        this.popObj.hide();
      }
      var checkOverflow = this.checkOverflow(ele, ele.getElementsByClassName(CLS_ITEMS)[0]);
      if (!checkOverflow) {
        this.destroyScroll();
        var multirowele = ele.querySelector("." + CLS_ITEMS);
        if (!isNullOrUndefined(multirowele)) {
          this.remove(multirowele, CLS_MULTIROWPOS);
          if (this.tbarAlign) {
            this.add(multirowele, CLS_TBARPOS);
          }
        }
      }
      if (checkOverflow && this.scrollModule && this.offsetWid === ele.offsetWidth) {
        return;
      }
      if (this.offsetWid > ele.offsetWidth || checkOverflow) {
        this.renderOverflowMode();
      }
      if (this.popObj) {
        if (this.overflowMode === "Extended") {
          this.popObj.width = this.getToolbarPopupWidth(this.element);
        }
        if (this.tbarAlign) {
          this.removePositioning();
        }
        this.popupRefresh(this.popObj.element, false);
        if (this.tbarAlign) {
          this.refreshPositioning();
        }
      }
      if (this.element.querySelector("." + CLS_HSCROLLBAR2)) {
        this.scrollStep = this.element.querySelector("." + CLS_HSCROLLBAR2).offsetWidth;
      }
      this.offsetWid = ele.offsetWidth;
      this.tbResize = false;
      this.separator();
    };
    Toolbar2.prototype.orientationChange = function() {
      var _this = this;
      setTimeout(function() {
        _this.resize();
      }, 500);
    };
    Toolbar2.prototype.extendedOpen = function() {
      var sib = this.element.querySelector("." + CLS_EXTENDABLECLASS);
      if (this.overflowMode === "Extended" && sib) {
        this.isExtendedOpen = sib.classList.contains(CLS_POPUPOPEN);
      }
    };
    Toolbar2.prototype.updateHideEleTabIndex = function(ele, isHidden, isElement, eleIndex, innerItems) {
      if (isElement) {
        eleIndex = innerItems.indexOf(ele);
      }
      var nextEle = innerItems[++eleIndex];
      while (nextEle) {
        var skipEle = this.eleContains(nextEle);
        if (!skipEle) {
          var dataTabIndex = nextEle.firstElementChild.getAttribute("data-tabindex");
          if (isHidden && dataTabIndex === "-1") {
            nextEle.firstElementChild.setAttribute("tabindex", "0");
          } else if (dataTabIndex !== nextEle.firstElementChild.getAttribute("tabindex")) {
            nextEle.firstElementChild.setAttribute("tabindex", dataTabIndex);
          }
          break;
        }
        nextEle = innerItems[++eleIndex];
      }
    };
    Toolbar2.prototype.clearToolbarTemplate = function(templateEle) {
      if (this.registeredTemplate && this.registeredTemplate["template"]) {
        var registeredTemplates = this.registeredTemplate;
        for (var index = 0; index < registeredTemplates["template"].length; index++) {
          var registeredItem = registeredTemplates["template"][parseInt(index.toString(), 10)].rootNodes[0];
          var closestItem = closest(registeredItem, "." + CLS_ITEM);
          if (!isNullOrUndefined(closestItem) && closestItem === templateEle) {
            this.clearTemplate(["template"], [registeredTemplates["template"][parseInt(index.toString(), 10)]]);
            break;
          }
        }
      } else if (this.portals && this.portals.length > 0) {
        var portals = this.portals;
        for (var index = 0; index < portals.length; index++) {
          var portalItem = portals[parseInt(index.toString(), 10)];
          var closestItem = closest(portalItem.containerInfo, "." + CLS_ITEM);
          if (!isNullOrUndefined(closestItem) && closestItem === templateEle) {
            this.clearTemplate(["template"], index);
            break;
          }
        }
      }
    };
    Toolbar2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var tEle = this.element;
      this.extendedOpen();
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "items":
            if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {
              var changedProb = Object.keys(newProp.items);
              for (var i = 0; i < changedProb.length; i++) {
                var index = parseInt(Object.keys(newProp.items)[parseInt(i.toString(), 10)], 10);
                var property = Object.keys(newProp.items[parseInt(index.toString(), 10)])[0];
                var newProperty = Object(newProp.items[parseInt(index.toString(), 10)])["" + property];
                if (this.tbarAlign || property === "align") {
                  this.refresh();
                  this.trigger("created");
                  break;
                }
                var popupPriCheck = property === "showAlwaysInPopup" && !newProperty;
                var booleanCheck = property === "overflow" && this.popupPriCount !== 0;
                if (popupPriCheck || this.items[parseInt(index.toString(), 10)].showAlwaysInPopup && booleanCheck) {
                  --this.popupPriCount;
                }
                if (isNullOrUndefined(this.scrollModule)) {
                  this.destroyMode();
                }
                var itemCol = [].slice.call(selectAll("." + CLS_ITEMS + " ." + CLS_ITEM, tEle));
                if (this.isReact && this.items[parseInt(index.toString(), 10)].template) {
                  this.clearToolbarTemplate(itemCol[parseInt(index.toString(), 10)]);
                }
                detach(itemCol[parseInt(index.toString(), 10)]);
                this.tbarEle.splice(index, 1);
                this.addItems([this.items[parseInt(index.toString(), 10)]], index);
                this.items.splice(index, 1);
                if (this.items[parseInt(index.toString(), 10)].template) {
                  this.tbarEle.splice(this.items.length, 1);
                }
              }
            } else {
              this.itemsRerender(newProp.items);
            }
            break;
          case "width":
            setStyleAttribute(tEle, {
              "width": formatUnit(newProp.width)
            });
            this.refreshOverflow();
            break;
          case "height":
            setStyleAttribute(this.element, {
              "height": formatUnit(newProp.height)
            });
            break;
          case "overflowMode":
            this.destroyMode();
            this.renderOverflowMode();
            if (this.enableRtl) {
              this.add(tEle, CLS_RTL3);
            }
            this.refreshOverflow();
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              this.add(tEle, CLS_RTL3);
            } else {
              this.remove(tEle, CLS_RTL3);
            }
            if (!isNullOrUndefined(this.scrollModule)) {
              if (newProp.enableRtl) {
                this.add(this.scrollModule.element, CLS_RTL3);
              } else {
                this.remove(this.scrollModule.element, CLS_RTL3);
              }
            }
            if (!isNullOrUndefined(this.popObj)) {
              if (newProp.enableRtl) {
                this.add(this.popObj.element, CLS_RTL3);
              } else {
                this.remove(this.popObj.element, CLS_RTL3);
              }
            }
            if (this.tbarAlign) {
              this.itemPositioning();
            }
            break;
          case "scrollStep":
            if (this.scrollModule) {
              this.scrollModule.scrollStep = this.scrollStep;
            }
            break;
          case "enableCollision":
            if (this.popObj) {
              this.popObj.collision = {
                Y: this.enableCollision ? "flip" : "none"
              };
            }
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([this.element], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([this.element], newProp.cssClass.split(" "));
            }
            break;
          case "allowKeyboard":
            this.unwireKeyboardEvent();
            if (newProp.allowKeyboard) {
              this.wireKeyboardEvent();
            }
            break;
        }
      }
    };
    Toolbar2.prototype.hideItem = function(index, value) {
      var isElement = typeof index === "object" ? true : false;
      var eleIndex = index;
      var ele;
      if (!isElement && isNullOrUndefined(eleIndex)) {
        return;
      }
      var innerItems = [].slice.call(selectAll("." + CLS_ITEM, this.element));
      if (isElement) {
        ele = index;
      } else if (this.tbarEle[parseInt(eleIndex.toString(), 10)]) {
        var innerItems_1 = [].slice.call(selectAll("." + CLS_ITEM, this.element));
        ele = innerItems_1[parseInt(eleIndex.toString(), 10)];
      }
      if (ele) {
        if (value) {
          ele.classList.add(CLS_HIDDEN);
          if (!ele.classList.contains(CLS_SEPARATOR)) {
            if (isNullOrUndefined(ele.firstElementChild.getAttribute("tabindex")) || ele.firstElementChild.getAttribute("tabindex") !== "-1") {
              this.updateHideEleTabIndex(ele, value, isElement, eleIndex, innerItems);
            }
          }
        } else {
          ele.classList.remove(CLS_HIDDEN);
          if (!ele.classList.contains(CLS_SEPARATOR)) {
            this.updateHideEleTabIndex(ele, value, isElement, eleIndex, innerItems);
          }
        }
        this.refreshOverflow();
      }
    };
    __decorate33([Collection([], Item2)], Toolbar2.prototype, "items", void 0);
    __decorate33([Property("auto")], Toolbar2.prototype, "width", void 0);
    __decorate33([Property("auto")], Toolbar2.prototype, "height", void 0);
    __decorate33([Property("")], Toolbar2.prototype, "cssClass", void 0);
    __decorate33([Property("Scrollable")], Toolbar2.prototype, "overflowMode", void 0);
    __decorate33([Property()], Toolbar2.prototype, "scrollStep", void 0);
    __decorate33([Property(true)], Toolbar2.prototype, "enableCollision", void 0);
    __decorate33([Property(true)], Toolbar2.prototype, "enableHtmlSanitizer", void 0);
    __decorate33([Property(true)], Toolbar2.prototype, "allowKeyboard", void 0);
    __decorate33([Event()], Toolbar2.prototype, "clicked", void 0);
    __decorate33([Event()], Toolbar2.prototype, "created", void 0);
    __decorate33([Event()], Toolbar2.prototype, "destroyed", void 0);
    __decorate33([Event()], Toolbar2.prototype, "beforeCreate", void 0);
    Toolbar2 = __decorate33([NotifyPropertyChanges], Toolbar2);
    return Toolbar2;
  }(Component)
);

// node_modules/@syncfusion/ej2-navigations/src/accordion/accordion.js
var __extends36 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate34 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_ACRDN_ROOT = "e-acrdn-root";
var CLS_ROOT3 = "e-accordion";
var CLS_ITEM2 = "e-acrdn-item";
var CLS_ITEMFOCUS = "e-item-focus";
var CLS_ITEMHIDE = "e-hide";
var CLS_HEADER = "e-acrdn-header";
var CLS_HEADERICN = "e-acrdn-header-icon";
var CLS_HEADERCTN = "e-acrdn-header-content";
var CLS_CONTENT = "e-acrdn-panel";
var CLS_CTENT = "e-acrdn-content";
var CLS_TOOGLEICN = "e-toggle-icon";
var CLS_COLLAPSEICN = "e-tgl-collapse-icon e-icons";
var CLS_EXPANDICN = "e-expand-icon";
var CLS_RTL4 = "e-rtl";
var CLS_CTNHIDE = "e-content-hide";
var CLS_SLCT = "e-select";
var CLS_SLCTED = "e-selected";
var CLS_ACTIVE = "e-active";
var CLS_ANIMATE = "e-animate";
var CLS_DISABLE4 = "e-overlay";
var CLS_TOGANIMATE = "e-toggle-animation";
var CLS_NEST = "e-nested";
var CLS_EXPANDSTATE = "e-expand-state";
var CLS_CONTAINER = "e-accordion-container";
var AccordionActionSettings = (
  /** @class */
  function(_super) {
    __extends36(AccordionActionSettings2, _super);
    function AccordionActionSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate34([Property("SlideDown")], AccordionActionSettings2.prototype, "effect", void 0);
    __decorate34([Property(400)], AccordionActionSettings2.prototype, "duration", void 0);
    __decorate34([Property("linear")], AccordionActionSettings2.prototype, "easing", void 0);
    return AccordionActionSettings2;
  }(ChildProperty)
);
var AccordionAnimationSettings = (
  /** @class */
  function(_super) {
    __extends36(AccordionAnimationSettings2, _super);
    function AccordionAnimationSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate34([Complex({
      effect: "SlideUp",
      duration: 400,
      easing: "linear"
    }, AccordionActionSettings)], AccordionAnimationSettings2.prototype, "collapse", void 0);
    __decorate34([Complex({
      effect: "SlideDown",
      duration: 400,
      easing: "linear"
    }, AccordionActionSettings)], AccordionAnimationSettings2.prototype, "expand", void 0);
    return AccordionAnimationSettings2;
  }(ChildProperty)
);
var AccordionItem = (
  /** @class */
  function(_super) {
    __extends36(AccordionItem2, _super);
    function AccordionItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate34([Property(null)], AccordionItem2.prototype, "content", void 0);
    __decorate34([Property(null)], AccordionItem2.prototype, "header", void 0);
    __decorate34([Property(null)], AccordionItem2.prototype, "cssClass", void 0);
    __decorate34([Property(null)], AccordionItem2.prototype, "iconCss", void 0);
    __decorate34([Property(false)], AccordionItem2.prototype, "expanded", void 0);
    __decorate34([Property(true)], AccordionItem2.prototype, "visible", void 0);
    __decorate34([Property(false)], AccordionItem2.prototype, "disabled", void 0);
    __decorate34([Property()], AccordionItem2.prototype, "id", void 0);
    return AccordionItem2;
  }(ChildProperty)
);
var Accordion = (
  /** @class */
  function(_super) {
    __extends36(Accordion2, _super);
    function Accordion2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.keyConfigs = {
        moveUp: "uparrow",
        moveDown: "downarrow",
        enter: "enter",
        space: "space",
        home: "home",
        end: "end"
      };
      return _this;
    }
    Accordion2.prototype.destroy = function() {
      if (this.isReact || this.isAngular || this.isVue) {
        this.clearTemplate();
      }
      var ele = this.element;
      _super.prototype.destroy.call(this);
      this.unWireEvents();
      this.isDestroy = true;
      this.restoreContent(null);
      [].slice.call(ele.children).forEach(function(el) {
        ele.removeChild(el);
      });
      if (this.trgtEle) {
        this.trgtEle = null;
        while (this.ctrlTem.firstElementChild) {
          ele.appendChild(this.ctrlTem.firstElementChild);
        }
        this.ctrlTem = null;
      }
      ele.classList.remove(CLS_ACRDN_ROOT);
      ele.removeAttribute("style");
      this.element.removeAttribute("data-ripple");
      if (!this.isNested && isRippleEnabled) {
        this.removeRippleEffect();
      }
    };
    Accordion2.prototype.preRender = function() {
      var nested = closest(this.element, "." + CLS_CONTENT);
      this.isNested = false;
      this.templateEle = [];
      if (!this.isDestroy) {
        this.isDestroy = false;
      }
      if (nested && nested.firstElementChild && nested.firstElementChild.firstElementChild) {
        if (nested.firstElementChild.firstElementChild.classList.contains(CLS_ROOT3)) {
          nested.classList.add(CLS_NEST);
          this.isNested = true;
        }
      } else {
        this.element.classList.add(CLS_ACRDN_ROOT);
      }
      if (this.enableRtl) {
        this.add(this.element, CLS_RTL4);
      }
    };
    Accordion2.prototype.add = function(ele, val) {
      ele.classList.add(val);
    };
    Accordion2.prototype.remove = function(ele, val) {
      ele.classList.remove(val);
    };
    Accordion2.prototype.render = function() {
      this.initializeHeaderTemplate();
      this.initializeItemTemplate();
      this.initialize();
      this.renderControl();
      this.wireEvents();
      this.renderComplete();
    };
    Accordion2.prototype.initialize = function() {
      var width = formatUnit(this.width);
      var height = formatUnit(this.height);
      setStyleAttribute(this.element, {
        "width": width,
        "height": height
      });
      if (isNullOrUndefined(this.initExpand)) {
        this.initExpand = [];
      }
      if (!isNullOrUndefined(this.expandedIndices) && this.expandedIndices.length > 0) {
        this.initExpand = this.expandedIndices;
      }
    };
    Accordion2.prototype.renderControl = function() {
      this.trgtEle = this.element.children.length > 0 ? select("div", this.element) : null;
      this.renderItems();
      this.initItemExpand();
    };
    Accordion2.prototype.wireFocusEvents = function() {
      var acrdItem = [].slice.call(this.element.querySelectorAll("." + CLS_ITEM2));
      for (var _i = 0, acrdItem_1 = acrdItem; _i < acrdItem_1.length; _i++) {
        var item = acrdItem_1[_i];
        var headerEle = item.querySelector("." + CLS_HEADER);
        if (item.childElementCount > 0 && headerEle) {
          EventHandler.clearEvents(headerEle);
          EventHandler.add(headerEle, "focus", this.focusIn, this);
          EventHandler.add(headerEle, "blur", this.focusOut, this);
        }
      }
    };
    Accordion2.prototype.unWireEvents = function() {
      EventHandler.remove(this.element, "click", this.clickHandler);
      if (!isNullOrUndefined(this.keyModule)) {
        this.keyModule.destroy();
      }
    };
    Accordion2.prototype.wireEvents = function() {
      EventHandler.add(this.element, "click", this.clickHandler, this);
      if (!this.isNested && !this.isDestroy) {
        this.removeRippleEffect = rippleEffect(this.element, {
          selector: "." + CLS_HEADER
        });
      }
      if (!this.isNested) {
        this.keyModule = new KeyboardEvents(this.element, {
          keyAction: this.keyActionHandler.bind(this),
          keyConfigs: this.keyConfigs,
          eventName: "keydown"
        });
      }
    };
    Accordion2.prototype.templateParser = function(template) {
      if (template) {
        try {
          if (typeof template !== "function" && document.querySelectorAll(template).length) {
            return compile(document.querySelector(template).innerHTML.trim());
          } else {
            return compile(template);
          }
        } catch (error) {
          return compile(template);
        }
      }
      return void 0;
    };
    Accordion2.prototype.initializeHeaderTemplate = function() {
      if (this.headerTemplate) {
        this.headerTemplateFn = this.templateParser(this.headerTemplate);
      }
    };
    Accordion2.prototype.initializeItemTemplate = function() {
      if (this.itemTemplate) {
        this.itemTemplateFn = this.templateParser(this.itemTemplate);
      }
    };
    Accordion2.prototype.getHeaderTemplate = function() {
      return this.headerTemplateFn;
    };
    Accordion2.prototype.getItemTemplate = function() {
      return this.itemTemplateFn;
    };
    Accordion2.prototype.focusIn = function(e) {
      e.target.parentElement.classList.add(CLS_ITEMFOCUS);
    };
    Accordion2.prototype.focusOut = function(e) {
      e.target.parentElement.classList.remove(CLS_ITEMFOCUS);
    };
    Accordion2.prototype.ctrlTemplate = function() {
      this.ctrlTem = this.element.cloneNode(true);
      var innerEles;
      var rootEle = select("." + CLS_CONTAINER, this.element);
      if (rootEle) {
        innerEles = rootEle.children;
      } else {
        innerEles = this.element.children;
      }
      var items = [];
      [].slice.call(innerEles).forEach(function(el) {
        items.push({
          header: el.childElementCount > 0 && el.children[0] ? el.children[0] : "",
          content: el.childElementCount > 1 && el.children[1] ? el.children[1] : ""
        });
        el.parentNode.removeChild(el);
      });
      if (rootEle) {
        this.element.removeChild(rootEle);
      }
      this.setProperties({
        items
      }, true);
    };
    Accordion2.prototype.toggleIconGenerate = function() {
      var tglIcon = this.createElement("div", {
        className: CLS_TOOGLEICN
      });
      var hdrColIcon = this.createElement("span", {
        className: CLS_COLLAPSEICN
      });
      tglIcon.appendChild(hdrColIcon);
      return tglIcon;
    };
    Accordion2.prototype.initItemExpand = function() {
      var len = this.initExpand.length;
      if (len === 0) {
        return;
      }
      if (this.expandMode === "Single") {
        this.expandItem(true, this.initExpand[len - 1]);
      } else {
        for (var i = 0; i < len; i++) {
          this.expandItem(true, this.initExpand[parseInt(i.toString(), 10)]);
        }
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Accordion2.prototype.renderItems = function() {
      var _this = this;
      var ele = this.element;
      var innerItem;
      var innerDataSourceItem;
      if (!isNullOrUndefined(this.trgtEle)) {
        this.ctrlTemplate();
      }
      if (!isNullOrUndefined(this.dataSource) && this.dataSource.length > 0) {
        this.dataSource.forEach(function(item, index) {
          innerDataSourceItem = _this.renderInnerItem(item, index);
          ele.appendChild(innerDataSourceItem);
          if (innerDataSourceItem.childElementCount > 0) {
            EventHandler.add(innerDataSourceItem.querySelector("." + CLS_HEADER), "focus", _this.focusIn, _this);
            EventHandler.add(innerDataSourceItem.querySelector("." + CLS_HEADER), "blur", _this.focusOut, _this);
          }
        });
      } else {
        var items = this.items;
        if (ele && items.length > 0) {
          items.forEach(function(item, index) {
            innerItem = _this.renderInnerItem(item, index);
            ele.appendChild(innerItem);
            if (innerItem.childElementCount > 0) {
              EventHandler.add(innerItem.querySelector("." + CLS_HEADER), "focus", _this.focusIn, _this);
              EventHandler.add(innerItem.querySelector("." + CLS_HEADER), "blur", _this.focusOut, _this);
            }
          });
        }
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Accordion2.prototype.clickHandler = function(e) {
      var trgt = e.target;
      var items = this.getItems();
      var eventArgs = {};
      var tglIcon;
      var acrdEle = closest(trgt, "." + CLS_ROOT3);
      if (acrdEle !== this.element) {
        return;
      }
      trgt.classList.add("e-target");
      var acrdnItem = closest(trgt, "." + CLS_ITEM2);
      var acrdnHdr = closest(trgt, "." + CLS_HEADER);
      var acrdnCtn = closest(trgt, "." + CLS_CONTENT);
      if (acrdnItem && (isNullOrUndefined(acrdnHdr) || isNullOrUndefined(acrdnCtn))) {
        acrdnHdr = acrdnItem.children[0];
        acrdnCtn = acrdnItem.children[1];
      }
      if (acrdnHdr) {
        tglIcon = select("." + CLS_TOOGLEICN, acrdnHdr);
      }
      var acrdnCtnItem;
      if (acrdnHdr) {
        acrdnCtnItem = closest(acrdnHdr, "." + CLS_ITEM2);
      } else if (acrdnCtn) {
        acrdnCtnItem = closest(acrdnCtn, "." + CLS_ITEM2);
      }
      var index = this.getIndexByItem(acrdnItem);
      if (acrdnCtnItem) {
        eventArgs.item = items[this.getIndexByItem(acrdnCtnItem)];
      }
      eventArgs.originalEvent = e;
      var ctnCheck = !isNullOrUndefined(tglIcon) && acrdnItem.childElementCount <= 1;
      if (ctnCheck && (isNullOrUndefined(acrdnCtn) || !isNullOrUndefined(select("." + CLS_HEADER + " ." + CLS_TOOGLEICN, acrdnCtnItem)))) {
        acrdnItem.appendChild(this.contentRendering(index));
        this.ariaAttrUpdate(acrdnItem);
        this.afterContentRender(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem);
      } else {
        this.afterContentRender(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem);
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Accordion2.prototype.afterContentRender = function(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem) {
      var _this = this;
      var acrdActive = [];
      this.trigger("clicked", eventArgs, function(eventArgs2) {
        if (eventArgs2.cancel) {
          return;
        }
        var cntclkCheck = acrdnCtn && !isNullOrUndefined(select(".e-target", acrdnCtn));
        var inlineAcrdnSel = "." + CLS_CONTENT + " ." + CLS_ROOT3;
        var inlineEleAcrdn = acrdnCtn && !isNullOrUndefined(select("." + CLS_ROOT3, acrdnCtn)) && isNullOrUndefined(closest(trgt, inlineAcrdnSel));
        var nestContCheck = acrdnCtn && isNullOrUndefined(select("." + CLS_ROOT3, acrdnCtn)) || !(closest(trgt, "." + CLS_ROOT3) === _this.element);
        cntclkCheck = cntclkCheck && (inlineEleAcrdn || nestContCheck);
        trgt.classList.remove("e-target");
        if (trgt.classList.contains(CLS_CONTENT) || trgt.classList.contains(CLS_CTENT) || cntclkCheck) {
          return;
        }
        var acrdcontainer = _this.element.querySelector("." + CLS_CONTAINER);
        var acrdnchild = acrdcontainer ? acrdcontainer.children : _this.element.children;
        [].slice.call(acrdnchild).forEach(function(el2) {
          if (el2.classList.contains(CLS_ACTIVE)) {
            acrdActive.push(el2);
          }
        });
        var acrdAniEle = [].slice.call(_this.element.querySelectorAll("." + CLS_ITEM2 + " [" + CLS_ANIMATE + "]"));
        if (acrdAniEle.length > 0) {
          for (var _i = 0, acrdAniEle_1 = acrdAniEle; _i < acrdAniEle_1.length; _i++) {
            var el = acrdAniEle_1[_i];
            acrdActive.push(el.parentElement);
          }
        }
        var sameContentCheck = acrdActive.indexOf(acrdnCtnItem) !== -1 && acrdnCtn.getAttribute("e-animate") === "true";
        var sameHeader = false;
        if (!isNullOrUndefined(acrdnItem) && !isNullOrUndefined(acrdnHdr)) {
          var acrdnCtn_1 = select("." + CLS_CONTENT, acrdnItem);
          var acrdnRoot = closest(acrdnItem, "." + CLS_ACRDN_ROOT);
          var expandState = acrdnRoot.querySelector("." + CLS_EXPANDSTATE);
          if (isNullOrUndefined(acrdnCtn_1)) {
            return;
          }
          sameHeader = expandState === acrdnItem;
          if (isVisible(acrdnCtn_1) && (!sameContentCheck || acrdnCtnItem.classList.contains(CLS_SLCTED))) {
            _this.collapse(acrdnCtn_1);
          } else {
            if (acrdActive.length > 0 && _this.expandMode === "Single" && !sameContentCheck) {
              acrdActive.forEach(function(el2) {
                _this.collapse(select("." + CLS_CONTENT, el2));
                el2.classList.remove(CLS_EXPANDSTATE);
              });
            }
            _this.expand(acrdnCtn_1);
          }
          if (!isNullOrUndefined(expandState) && !sameHeader) {
            expandState.classList.remove(CLS_EXPANDSTATE);
          }
        }
      });
    };
    Accordion2.prototype.eleMoveFocus = function(action, root, trgt) {
      var clst;
      var clstItem = closest(trgt, "." + CLS_ITEM2);
      if (trgt === root) {
        clst = (action === "moveUp" ? trgt.lastElementChild : trgt).querySelector("." + CLS_HEADER);
      } else if (trgt.classList.contains(CLS_HEADER)) {
        clstItem = action === "moveUp" ? clstItem.previousElementSibling : clstItem.nextElementSibling;
        if (clstItem) {
          clst = select("." + CLS_HEADER, clstItem);
        }
      }
      if (clst) {
        clst.focus();
      }
    };
    Accordion2.prototype.keyActionHandler = function(e) {
      var trgt = e.target;
      var header = closest(e.target, CLS_HEADER);
      if (isNullOrUndefined(header) && !trgt.classList.contains(CLS_ROOT3) && !trgt.classList.contains(CLS_HEADER)) {
        return;
      }
      var clst;
      var root = this.element;
      var content;
      switch (e.action) {
        case "moveUp":
          this.eleMoveFocus(e.action, root, trgt);
          break;
        case "moveDown":
          this.eleMoveFocus(e.action, root, trgt);
          break;
        case "space":
        case "enter":
          content = trgt.nextElementSibling;
          if (!isNullOrUndefined(content) && content.classList.contains(CLS_CONTENT)) {
            if (content.getAttribute("e-animate") !== "true") {
              trgt.click();
            }
          } else {
            trgt.click();
          }
          e.preventDefault();
          break;
        case "home":
        case "end":
          clst = e.action === "home" ? root.firstElementChild.children[0] : root.lastElementChild.children[0];
          clst.focus();
          e.preventDefault();
          break;
      }
    };
    Accordion2.prototype.headerEleGenerate = function() {
      var header = this.createElement("div", {
        className: CLS_HEADER,
        id: getUniqueID("acrdn_header")
      });
      var ariaAttr = {
        "tabindex": "0",
        "role": "button",
        "aria-disabled": "false",
        "aria-expanded": "false"
      };
      attributes(header, ariaAttr);
      return header;
    };
    Accordion2.prototype.renderInnerItem = function(item, index) {
      var innerEle = this.createElement("div", {
        className: CLS_ITEM2,
        id: item.id || getUniqueID("acrdn_item")
      });
      if (this.headerTemplate) {
        var ctnEle = this.headerEleGenerate();
        var hdrEle = this.createElement("div", {
          className: CLS_HEADERCTN
        });
        ctnEle.appendChild(hdrEle);
        append(this.getHeaderTemplate()(item, this, "headerTemplate", this.element.id + "_headerTemplate", false), hdrEle);
        innerEle.appendChild(ctnEle);
        ctnEle.appendChild(this.toggleIconGenerate());
        this.add(innerEle, CLS_SLCT);
        return innerEle;
      }
      if (item.header && this.angularnativeCondiCheck(item, "header")) {
        var header = item.header;
        if (this.enableHtmlSanitizer && typeof item.header === "string") {
          header = SanitizeHtmlHelper.sanitize(item.header);
        }
        var ctnEle = this.headerEleGenerate();
        var hdrEle = this.createElement("div", {
          className: CLS_HEADERCTN
        });
        ctnEle.appendChild(hdrEle);
        ctnEle.appendChild(this.fetchElement(hdrEle, header, index));
        innerEle.appendChild(ctnEle);
      }
      var hdr = select("." + CLS_HEADER, innerEle);
      if (item.expanded && !isNullOrUndefined(index) && !this.enablePersistence) {
        if (this.initExpand.indexOf(index) === -1) {
          this.initExpand.push(index);
        }
      }
      if (item.cssClass) {
        addClass([innerEle], item.cssClass.split(" "));
      }
      if (item.disabled) {
        addClass([innerEle], CLS_DISABLE4);
      }
      if (item.visible === false) {
        addClass([innerEle], CLS_ITEMHIDE);
      }
      if (item.iconCss) {
        var hdrIcnEle = this.createElement("div", {
          className: CLS_HEADERICN
        });
        var icon = this.createElement("span", {
          className: item.iconCss + " e-icons"
        });
        hdrIcnEle.appendChild(icon);
        if (isNullOrUndefined(hdr)) {
          hdr = this.headerEleGenerate();
          hdr.appendChild(hdrIcnEle);
          innerEle.appendChild(hdr);
        } else {
          hdr.insertBefore(hdrIcnEle, hdr.childNodes[0]);
        }
      }
      if (item.content && this.angularnativeCondiCheck(item, "content")) {
        var hdrIcon = this.toggleIconGenerate();
        if (isNullOrUndefined(hdr)) {
          hdr = this.headerEleGenerate();
          innerEle.appendChild(hdr);
        }
        hdr.appendChild(hdrIcon);
        this.add(innerEle, CLS_SLCT);
      }
      return innerEle;
    };
    Accordion2.prototype.angularnativeCondiCheck = function(item, prop) {
      var property = prop === "content" ? item.content : item.header;
      var content = property;
      if (this.isAngular && !isNullOrUndefined(content.elementRef)) {
        var data = content.elementRef.nativeElement.data;
        if (isNullOrUndefined(data) || data === "" || data.indexOf("bindings=") === -1) {
          return true;
        }
        var parseddata = JSON.parse(content.elementRef.nativeElement.data.replace("bindings=", ""));
        if (!isNullOrUndefined(parseddata) && parseddata["ng-reflect-ng-if"] === "false") {
          return false;
        } else {
          return true;
        }
      } else {
        return true;
      }
    };
    Accordion2.prototype.fetchElement = function(ele, value, index) {
      var templateFn;
      var temString;
      try {
        if (document.querySelectorAll(value).length && value !== "Button") {
          var eleVal = document.querySelector(value);
          temString = eleVal.outerHTML.trim();
          ele.appendChild(eleVal);
          eleVal.style.display = "";
        } else {
          templateFn = compile(value);
        }
      } catch (e) {
        if (typeof value === "string") {
          ele.innerHTML = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(value) : value;
        } else if (value instanceof HTMLElement) {
          ele.appendChild(value);
          if (this.trgtEle) {
            ele.firstElementChild.style.display = "";
          }
        } else {
          templateFn = compile(value);
        }
      }
      var tempArray;
      if (!isNullOrUndefined(templateFn)) {
        if (this.isReact) {
          this.renderReactTemplates();
        }
        var templateProps = void 0;
        var templateName = void 0;
        if (ele.classList.contains(CLS_HEADERCTN)) {
          templateProps = this.element.id + index + "_header";
          templateName = "header";
        } else if (ele.classList.contains(CLS_CTENT)) {
          templateProps = this.element.id + index + "_content";
          templateName = "content";
        }
        tempArray = templateFn({}, this, templateName, templateProps, this.isStringTemplate);
      }
      if (!isNullOrUndefined(tempArray) && tempArray.length > 0 && !(isNullOrUndefined(tempArray[0].tagName) && tempArray.length === 1)) {
        [].slice.call(tempArray).forEach(function(el) {
          if (!isNullOrUndefined(el.tagName)) {
            el.style.display = "";
          }
          ele.appendChild(el);
        });
      } else if (ele.childElementCount === 0) {
        ele.innerHTML = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(value) : value;
      }
      if (!isNullOrUndefined(temString)) {
        if (this.templateEle.indexOf(value) === -1) {
          this.templateEle.push(value);
        }
      }
      return ele;
    };
    Accordion2.prototype.ariaAttrUpdate = function(itemEle) {
      var header = select("." + CLS_HEADER, itemEle);
      var content = select("." + CLS_CONTENT, itemEle);
      header.setAttribute("aria-controls", content.id);
      content.setAttribute("aria-labelledby", header.id);
      content.setAttribute("role", "region");
    };
    Accordion2.prototype.contentRendering = function(index) {
      var itemcnt = this.createElement("div", {
        className: CLS_CONTENT + " " + CLS_CTNHIDE,
        id: getUniqueID("acrdn_panel")
      });
      attributes(itemcnt, {
        "aria-hidden": "true"
      });
      var ctn = this.createElement("div", {
        className: CLS_CTENT
      });
      if (!isNullOrUndefined(this.dataSource) && this.dataSource.length > 0) {
        if (this.isReact) {
          this.renderReactTemplates();
        }
        append(this.getItemTemplate()(this.dataSource[parseInt(index.toString(), 10)], this, "itemTemplate", this.element.id + "_itemTemplate", false), ctn);
        itemcnt.appendChild(ctn);
      } else {
        var content = this.items[parseInt(index.toString(), 10)].content;
        if (this.enableHtmlSanitizer && typeof content === "string") {
          content = SanitizeHtmlHelper.sanitize(content);
        }
        itemcnt.appendChild(this.fetchElement(ctn, content, index));
      }
      return itemcnt;
    };
    Accordion2.prototype.expand = function(trgt) {
      var _this = this;
      var items = this.getItems();
      var trgtItemEle = closest(trgt, "." + CLS_ITEM2);
      if (isNullOrUndefined(trgt) || isVisible(trgt) && trgt.getAttribute("e-animate") !== "true" || trgtItemEle.classList.contains(CLS_DISABLE4)) {
        return;
      }
      var acrdnRoot = closest(trgtItemEle, "." + CLS_ACRDN_ROOT);
      var expandState = acrdnRoot.querySelector("." + CLS_EXPANDSTATE);
      var animation = {
        name: this.animation.expand.effect,
        duration: this.animation.expand.duration,
        timingFunction: this.animation.expand.easing
      };
      var icon = select("." + CLS_TOOGLEICN, trgtItemEle).firstElementChild;
      var eventArgs = {
        element: trgtItemEle,
        item: items[this.getIndexByItem(trgtItemEle)],
        index: this.getIndexByItem(trgtItemEle),
        content: trgtItemEle.querySelector("." + CLS_CONTENT),
        isExpanded: true
      };
      this.trigger("expanding", eventArgs, function(expandArgs) {
        if (!expandArgs.cancel) {
          icon.classList.add(CLS_TOGANIMATE);
          _this.expandedItemsPush(trgtItemEle);
          if (!isNullOrUndefined(expandState)) {
            expandState.classList.remove(CLS_EXPANDSTATE);
          }
          trgtItemEle.classList.add(CLS_EXPANDSTATE);
          if (animation.name === "None" && animationMode !== "Enable" || animationMode === "Disable") {
            _this.expandProgress("begin", icon, trgt, trgtItemEle, expandArgs);
            _this.expandProgress("end", icon, trgt, trgtItemEle, expandArgs);
          } else {
            _this.expandAnimation(animation.name, icon, trgt, trgtItemEle, animation, expandArgs);
          }
        }
      });
    };
    Accordion2.prototype.expandAnimation = function(ef, icn, trgt, trgtItemEle, animate, args) {
      var _this = this;
      if (ef === "None" && animationMode === "Enable") {
        ef = "SlideDown";
        animate.name = "SlideDown";
      }
      var height;
      this.lastActiveItemId = trgtItemEle.id;
      if (ef === "SlideDown") {
        animate.begin = function() {
          _this.expandProgress("begin", icn, trgt, trgtItemEle, args);
          trgt.style.position = "absolute";
          height = trgtItemEle.offsetHeight;
          trgt.style.maxHeight = trgt.offsetHeight + "px";
          trgtItemEle.style.maxHeight = "";
        };
        animate.progress = function() {
          trgtItemEle.style.minHeight = height + trgt.offsetHeight + "px";
        };
        animate.end = function() {
          setStyleAttribute(trgt, {
            "position": "",
            "maxHeight": ""
          });
          trgtItemEle.style.minHeight = "";
          _this.expandProgress("end", icn, trgt, trgtItemEle, args);
        };
      } else {
        animate.begin = function() {
          _this.expandProgress("begin", icn, trgt, trgtItemEle, args);
        };
        animate.end = function() {
          _this.expandProgress("end", icn, trgt, trgtItemEle, args);
        };
      }
      new Animation(animate).animate(trgt);
    };
    Accordion2.prototype.expandProgress = function(progress, icon, trgt, trgtItemEle, eventArgs) {
      this.remove(trgt, CLS_CTNHIDE);
      this.add(trgtItemEle, CLS_SLCTED);
      this.add(icon, CLS_EXPANDICN);
      if (progress === "end") {
        this.add(trgtItemEle, CLS_ACTIVE);
        trgt.setAttribute("aria-hidden", "false");
        attributes(trgt.previousElementSibling, {
          "aria-expanded": "true"
        });
        icon.classList.remove(CLS_TOGANIMATE);
        this.trigger("expanded", eventArgs);
      }
    };
    Accordion2.prototype.expandedItemsPush = function(item) {
      var index = this.getIndexByItem(item);
      if (this.expandedIndices.indexOf(index) === -1) {
        var temp = [].slice.call(this.expandedIndices);
        temp.push(index);
        this.setProperties({
          expandedIndices: temp
        }, true);
      }
    };
    Accordion2.prototype.getIndexByItem = function(item) {
      var itemEle = this.getItemElements();
      return [].slice.call(itemEle).indexOf(item);
    };
    Accordion2.prototype.getItemElements = function() {
      var itemEle = [];
      var itemCollection = this.element.children;
      [].slice.call(itemCollection).forEach(function(el) {
        if (el.classList.contains(CLS_ITEM2)) {
          itemEle.push(el);
        }
      });
      return itemEle;
    };
    Accordion2.prototype.expandedItemsPop = function(item) {
      var index = this.getIndexByItem(item);
      var temp = [].slice.call(this.expandedIndices);
      temp.splice(temp.indexOf(index), 1);
      this.setProperties({
        expandedIndices: temp
      }, true);
    };
    Accordion2.prototype.collapse = function(trgt) {
      var _this = this;
      if (isNullOrUndefined(trgt)) {
        return;
      }
      var items = this.getItems();
      var trgtItemEle = closest(trgt, "." + CLS_ITEM2);
      if (!isVisible(trgt) || trgtItemEle.classList.contains(CLS_DISABLE4)) {
        return;
      }
      var animation = {
        name: this.animation.collapse.effect,
        duration: this.animation.collapse.duration,
        timingFunction: this.animation.collapse.easing
      };
      var icon = select("." + CLS_TOOGLEICN, trgtItemEle).firstElementChild;
      var eventArgs = {
        element: trgtItemEle,
        item: items[this.getIndexByItem(trgtItemEle)],
        index: this.getIndexByItem(trgtItemEle),
        content: trgtItemEle.querySelector("." + CLS_CONTENT),
        isExpanded: false
      };
      this.trigger("expanding", eventArgs, function(expandArgs) {
        if (!expandArgs.cancel) {
          _this.expandedItemsPop(trgtItemEle);
          trgtItemEle.classList.remove(CLS_EXPANDSTATE);
          icon.classList.add(CLS_TOGANIMATE);
          if (animation.name === "None" && animationMode !== "Enable" || animationMode === "Disable") {
            _this.collapseProgress("begin", icon, trgt, trgtItemEle, expandArgs);
            _this.collapseProgress("end", icon, trgt, trgtItemEle, expandArgs);
          } else {
            _this.collapseAnimation(animation.name, trgt, trgtItemEle, icon, animation, expandArgs);
          }
        }
      });
    };
    Accordion2.prototype.collapseAnimation = function(ef, trgt, trgtItEl, icn, animate, args) {
      var _this = this;
      if (ef === "None" && animationMode === "Enable") {
        ef = "SlideUp";
        animate.name = "SlideUp";
      }
      var height;
      var trgtHeight;
      var itemHeight;
      var remain;
      this.lastActiveItemId = trgtItEl.id;
      if (ef === "SlideUp") {
        animate.begin = function() {
          itemHeight = trgtItEl.offsetHeight;
          trgtItEl.style.minHeight = itemHeight + "px";
          trgt.style.position = "absolute";
          height = trgtItEl.offsetHeight;
          trgtHeight = trgt.offsetHeight;
          trgt.style.maxHeight = trgtHeight + "px";
          _this.collapseProgress("begin", icn, trgt, trgtItEl, args);
        };
        animate.progress = function() {
          remain = height - (trgtHeight - trgt.offsetHeight);
          if (remain < itemHeight) {
            trgtItEl.style.minHeight = remain + "px";
          }
        };
        animate.end = function() {
          trgt.style.display = "none";
          _this.collapseProgress("end", icn, trgt, trgtItEl, args);
          trgtItEl.style.minHeight = "";
          setStyleAttribute(trgt, {
            "position": "",
            "maxHeight": "",
            "display": ""
          });
        };
      } else {
        animate.begin = function() {
          _this.collapseProgress("begin", icn, trgt, trgtItEl, args);
        };
        animate.end = function() {
          _this.collapseProgress("end", icn, trgt, trgtItEl, args);
        };
      }
      new Animation(animate).animate(trgt);
    };
    Accordion2.prototype.collapseProgress = function(progress, icon, trgt, trgtItemEle, eventArgs) {
      this.remove(icon, CLS_EXPANDICN);
      this.remove(trgtItemEle, CLS_SLCTED);
      if (progress === "end") {
        this.add(trgt, CLS_CTNHIDE);
        icon.classList.remove(CLS_TOGANIMATE);
        this.remove(trgtItemEle, CLS_ACTIVE);
        trgt.setAttribute("aria-hidden", "true");
        attributes(trgt.previousElementSibling, {
          "aria-expanded": "false"
        });
        this.trigger("expanded", eventArgs);
      }
    };
    Accordion2.prototype.getModuleName = function() {
      return "accordion";
    };
    Accordion2.prototype.getItems = function() {
      var items;
      if (this.itemTemplate && this.headerTemplate) {
        items = this.dataSource;
      } else {
        items = this.items;
      }
      return items;
    };
    Accordion2.prototype.addItem = function(item, index) {
      var _this = this;
      var ele = this.element;
      var itemEle = this.getItemElements();
      var items = this.getItems();
      if (isNullOrUndefined(index)) {
        index = items.length;
      }
      if (ele.childElementCount >= index) {
        var addItems = item instanceof Array ? item : [item];
        addItems.forEach(function(addItem, i) {
          var itemIndex = index + i;
          items.splice(itemIndex, 0, addItem);
          var innerItemEle = _this.renderInnerItem(addItem, itemIndex);
          if (ele.childElementCount === itemIndex) {
            ele.appendChild(innerItemEle);
          } else {
            ele.insertBefore(innerItemEle, itemEle[parseInt(itemIndex.toString(), 10)]);
          }
          EventHandler.add(innerItemEle.querySelector("." + CLS_HEADER), "focus", _this.focusIn, _this);
          EventHandler.add(innerItemEle.querySelector("." + CLS_HEADER), "blur", _this.focusOut, _this);
          _this.expandedIndices = [];
          _this.expandedItemRefresh();
          if (addItem && addItem.expanded) {
            _this.expandItem(true, itemIndex);
          }
        });
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Accordion2.prototype.expandedItemRefresh = function() {
      var _this = this;
      var itemEle = this.getItemElements();
      [].slice.call(itemEle).forEach(function(el) {
        if (el.classList.contains(CLS_SLCTED)) {
          _this.expandedItemsPush(el);
        }
      });
    };
    Accordion2.prototype.removeItem = function(index) {
      if (this.isReact || this.isAngular) {
        var item = selectAll("." + CLS_ITEM2, this.element)[parseInt(index.toString(), 10)];
        var header = select("." + CLS_HEADERCTN, item);
        var content = select("." + CLS_CTENT, item);
        this.clearAccordionTemplate(header, this.dataSource.length > 0 ? "headerTemplate" : "header", CLS_HEADERCTN);
        this.clearAccordionTemplate(content, this.dataSource.length > 0 ? "itemTemplate" : "content", CLS_CTENT);
      }
      var itemEle = this.getItemElements();
      var ele = itemEle[parseInt(index.toString(), 10)];
      var items = this.getItems();
      if (isNullOrUndefined(ele)) {
        return;
      }
      this.restoreContent(index);
      detach(ele);
      items.splice(index, 1);
      this.expandedIndices = [];
      this.expandedItemRefresh();
    };
    Accordion2.prototype.select = function(index) {
      var itemEle = this.getItemElements();
      var ele = itemEle[parseInt(index.toString(), 10)];
      if (isNullOrUndefined(ele) || isNullOrUndefined(select("." + CLS_HEADER, ele))) {
        return;
      }
      ele.children[0].focus();
    };
    Accordion2.prototype.hideItem = function(index, isHidden) {
      var itemEle = this.getItemElements();
      var ele = itemEle[parseInt(index.toString(), 10)];
      if (isNullOrUndefined(ele)) {
        return;
      }
      if (isNullOrUndefined(isHidden)) {
        isHidden = true;
      }
      if (isHidden) {
        this.add(ele, CLS_ITEMHIDE);
      } else {
        this.remove(ele, CLS_ITEMHIDE);
      }
    };
    Accordion2.prototype.enableItem = function(index, isEnable) {
      var itemEle = this.getItemElements();
      var ele = itemEle[parseInt(index.toString(), 10)];
      if (isNullOrUndefined(ele)) {
        return;
      }
      var eleHeader = ele.firstElementChild;
      if (isEnable) {
        this.remove(ele, CLS_DISABLE4);
        attributes(eleHeader, {
          "tabindex": "0",
          "aria-disabled": "false"
        });
        eleHeader.focus();
      } else {
        if (ele.classList.contains(CLS_ACTIVE)) {
          this.expandItem(false, index);
          this.eleMoveFocus("movedown", this.element, eleHeader);
        }
        this.add(ele, CLS_DISABLE4);
        eleHeader.setAttribute("aria-disabled", "true");
        eleHeader.removeAttribute("tabindex");
      }
    };
    Accordion2.prototype.expandItem = function(isExpand, index) {
      var _this = this;
      var itemEle = this.getItemElements();
      if (isNullOrUndefined(index)) {
        if (this.expandMode === "Single" && isExpand) {
          var ele = itemEle[itemEle.length - 1];
          this.itemExpand(isExpand, ele, this.getIndexByItem(ele));
        } else {
          var item = select("#" + this.lastActiveItemId, this.element);
          [].slice.call(itemEle).forEach(function(el) {
            _this.itemExpand(isExpand, el, _this.getIndexByItem(el));
            el.classList.remove(CLS_EXPANDSTATE);
          });
          var expandedItem = select("." + CLS_EXPANDSTATE, this.element);
          if (expandedItem) {
            expandedItem.classList.remove(CLS_EXPANDSTATE);
          }
          if (item) {
            item.classList.add(CLS_EXPANDSTATE);
          }
        }
      } else {
        var ele = itemEle[parseInt(index.toString(), 10)];
        if (isNullOrUndefined(ele) || !ele.classList.contains(CLS_SLCT) || ele.classList.contains(CLS_ACTIVE) && isExpand) {
          return;
        } else {
          if (this.expandMode === "Single") {
            this.expandItem(false);
          }
          this.itemExpand(isExpand, ele, index);
        }
      }
    };
    Accordion2.prototype.itemExpand = function(isExpand, ele, index) {
      var ctn = ele.children[1];
      if (ele.classList.contains(CLS_DISABLE4)) {
        return;
      }
      if (isNullOrUndefined(ctn) && isExpand) {
        ctn = this.contentRendering(index);
        ele.appendChild(ctn);
        this.ariaAttrUpdate(ele);
        this.expand(ctn);
      } else if (!isNullOrUndefined(ctn)) {
        if (isExpand) {
          this.expand(ctn);
        } else {
          this.collapse(ctn);
        }
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Accordion2.prototype.destroyItems = function() {
      this.restoreContent(null);
      if (this.isReact || this.isAngular || this.isVue) {
        this.clearTemplate();
      }
      [].slice.call(this.element.querySelectorAll("." + CLS_ITEM2)).forEach(function(el) {
        detach(el);
      });
    };
    Accordion2.prototype.restoreContent = function(index) {
      var ctnElePos;
      if (isNullOrUndefined(index)) {
        ctnElePos = this.element;
      } else {
        ctnElePos = this.element.querySelectorAll("." + CLS_ITEM2)[parseInt(index.toString(), 10)];
      }
      this.templateEle.forEach(function(eleStr) {
        if (!isNullOrUndefined(ctnElePos.querySelector(eleStr))) {
          document.body.appendChild(ctnElePos.querySelector(eleStr)).style.display = "none";
        }
      });
    };
    Accordion2.prototype.updateItem = function(item, index) {
      if (!isNullOrUndefined(item)) {
        var items = this.getItems();
        var itemObj = items[parseInt(index.toString(), 10)];
        items.splice(index, 1);
        this.restoreContent(index);
        var header = select("." + CLS_HEADERCTN, item);
        var content = select("." + CLS_CTENT, item);
        if (this.isReact || this.isAngular) {
          this.clearAccordionTemplate(header, "header", CLS_HEADERCTN);
          this.clearAccordionTemplate(content, "content", CLS_CTENT);
        }
        detach(item);
        this.addItem(itemObj, index);
      }
    };
    Accordion2.prototype.setTemplate = function(template, toElement, index) {
      this.fetchElement(toElement, template, index);
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Accordion2.prototype.clearAccordionTemplate = function(templateEle, templateName, className) {
      if (this.registeredTemplate && this.registeredTemplate["" + templateName]) {
        var registeredTemplates = this.registeredTemplate;
        for (var index = 0; index < registeredTemplates["" + templateName].length; index++) {
          var registeredItem = registeredTemplates["" + templateName][parseInt(index.toString(), 10)].rootNodes[0];
          var closestItem = closest(registeredItem, "." + className);
          if (!isNullOrUndefined(closestItem) && closestItem === templateEle || isNullOrUndefined(registeredItem.parentNode)) {
            this.clearTemplate([templateName], [registeredTemplates["" + templateName][parseInt(index.toString(), 10)]]);
            break;
          }
        }
      } else if (this.portals && this.portals.length > 0) {
        var portals = this.portals;
        for (var index = 0; index < portals.length; index++) {
          var portalItem = portals[parseInt(index.toString(), 10)];
          var closestItem = closest(portalItem.containerInfo, "." + className);
          if (!isNullOrUndefined(closestItem) && closestItem === templateEle) {
            this.clearTemplate([templateName], index);
            break;
          }
        }
      }
    };
    Accordion2.prototype.getPersistData = function() {
      var keyEntity = ["expandedIndices"];
      return this.addOnPersist(keyEntity);
    };
    Accordion2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var acrdn = this.element;
      var isRefresh = false;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "items":
            if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {
              var changedProp = Object.keys(newProp.items);
              for (var j = 0; j < changedProp.length; j++) {
                var index = parseInt(Object.keys(newProp.items)[parseInt(j.toString(), 10)], 10);
                var property = Object.keys(newProp.items[parseInt(index.toString(), 10)]);
                for (var k = 0; k < property.length; k++) {
                  var item = selectAll("." + CLS_ITEM2, this.element)[parseInt(index.toString(), 10)];
                  var oldVal = Object(oldProp.items[parseInt(index.toString(), 10)])["" + property[parseInt(k.toString(), 10)]];
                  var newVal = Object(newProp.items[parseInt(index.toString(), 10)])["" + property[parseInt(k.toString(), 10)]];
                  var temp = property[parseInt(k.toString(), 10)];
                  var content = select("." + CLS_CTENT, item);
                  if (temp === "header" || temp === "iconCss" || temp === "expanded" || temp === "content" && oldVal === "") {
                    this.updateItem(item, index);
                  }
                  if (property[parseInt(k.toString(), 10)] === "cssClass" && !isNullOrUndefined(item)) {
                    if (oldVal) {
                      removeClass([item], oldVal.split(" "));
                    }
                    if (newVal) {
                      addClass([item], newVal.split(" "));
                    }
                  }
                  if (property[parseInt(k.toString(), 10)] === "visible" && !isNullOrUndefined(item)) {
                    if (Object(newProp.items[parseInt(index.toString(), 10)])["" + property[parseInt(k.toString(), 10)]] === false) {
                      item.classList.add(CLS_ITEMHIDE);
                    } else {
                      item.classList.remove(CLS_ITEMHIDE);
                    }
                  }
                  if (property[parseInt(k.toString(), 10)] === "disabled" && !isNullOrUndefined(item)) {
                    this.enableItem(index, !newVal);
                  }
                  if (property.indexOf("header") < 0 && property[parseInt(k.toString(), 10)] === "content" && !isNullOrUndefined(item) && item.children.length === 2) {
                    if (typeof newVal === "function") {
                      if (this.isAngular || this.isReact) {
                        this.clearAccordionTemplate(content, property[parseInt(k.toString(), 10)], CLS_CTENT);
                      }
                      var activeContent = item.querySelector("." + CLS_CTENT);
                      activeContent.innerHTML = "";
                      this.setTemplate(newVal, activeContent, index);
                    } else {
                      if (item.classList.contains(CLS_SLCTED)) {
                        this.expandItem(false, index);
                      }
                      detach(item.querySelector("." + CLS_CONTENT));
                    }
                  }
                }
              }
            } else {
              isRefresh = true;
            }
            break;
          case "dataSource":
          case "expandedIndices":
            if (this.expandedIndices === null) {
              this.expandedIndices = [];
            }
            isRefresh = true;
            break;
          case "headerTemplate":
            this.initializeHeaderTemplate();
            isRefresh = true;
            break;
          case "itemTemplate":
            this.initializeItemTemplate();
            isRefresh = true;
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              this.add(acrdn, CLS_RTL4);
            } else {
              this.remove(acrdn, CLS_RTL4);
            }
            break;
          case "height":
            setStyleAttribute(this.element, {
              "height": formatUnit(newProp.height)
            });
            break;
          case "width":
            setStyleAttribute(this.element, {
              "width": formatUnit(newProp.width)
            });
            break;
          case "expandMode":
            if (newProp.expandMode === "Single" && !isNullOrUndefined(this.expandedIndices) && this.expandedIndices.length > 1) {
              this.expandItem(false);
            }
            break;
        }
      }
      if (isRefresh) {
        this.initExpand = [];
        if (!isNullOrUndefined(this.expandedIndices) && this.expandedIndices.length > 0) {
          this.initExpand = this.expandedIndices;
        }
        this.destroyItems();
        this.renderItems();
        this.initItemExpand();
      }
    };
    __decorate34([Collection([], AccordionItem)], Accordion2.prototype, "items", void 0);
    __decorate34([Property([])], Accordion2.prototype, "dataSource", void 0);
    __decorate34([Property()], Accordion2.prototype, "itemTemplate", void 0);
    __decorate34([Property()], Accordion2.prototype, "headerTemplate", void 0);
    __decorate34([Property("100%")], Accordion2.prototype, "width", void 0);
    __decorate34([Property("auto")], Accordion2.prototype, "height", void 0);
    __decorate34([Property([])], Accordion2.prototype, "expandedIndices", void 0);
    __decorate34([Property("Multiple")], Accordion2.prototype, "expandMode", void 0);
    __decorate34([Property(true)], Accordion2.prototype, "enableHtmlSanitizer", void 0);
    __decorate34([Complex({}, AccordionAnimationSettings)], Accordion2.prototype, "animation", void 0);
    __decorate34([Event()], Accordion2.prototype, "clicked", void 0);
    __decorate34([Event()], Accordion2.prototype, "expanding", void 0);
    __decorate34([Event()], Accordion2.prototype, "expanded", void 0);
    __decorate34([Event()], Accordion2.prototype, "created", void 0);
    __decorate34([Event()], Accordion2.prototype, "destroyed", void 0);
    Accordion2 = __decorate34([NotifyPropertyChanges], Accordion2);
    return Accordion2;
  }(Component)
);

// node_modules/@syncfusion/ej2-navigations/src/common/menu-scroll.js
function addScrolling(createElement2, container, content, scrollType, enableRtl, offset) {
  var containerOffset;
  var contentOffset;
  var parentElem = container.parentElement;
  if (scrollType === "vscroll") {
    containerOffset = offset || container.getBoundingClientRect().height;
    contentOffset = content.getBoundingClientRect().height;
  } else {
    containerOffset = container.getBoundingClientRect().width;
    contentOffset = content.getBoundingClientRect().width;
  }
  if (containerOffset < contentOffset) {
    return createScrollbar(createElement2, container, content, scrollType, enableRtl, offset);
  } else if (parentElem) {
    var width = parentElem.getBoundingClientRect().width;
    if (width < containerOffset && scrollType === "hscroll") {
      contentOffset = width;
      container.style.maxWidth = width + "px";
      return createScrollbar(createElement2, container, content, scrollType, enableRtl, offset);
    }
    return content;
  } else {
    return content;
  }
}
function createScrollbar(createElement2, container, content, scrollType, enableRtl, offset) {
  var scrollEle = createElement2("div", {
    className: "e-menu-" + scrollType
  });
  container.appendChild(scrollEle);
  scrollEle.appendChild(content);
  if (offset) {
    scrollEle.style.overflow = "hidden";
    scrollEle.style.height = offset + "px";
  } else {
    scrollEle.style.maxHeight = container.style.maxHeight;
    container.style.overflow = "hidden";
  }
  var scrollObj;
  if (scrollType === "vscroll") {
    scrollObj = new VScroll({
      enableRtl
    }, scrollEle);
    scrollObj.scrollStep = select(".e-" + scrollType + "-bar", container).offsetHeight / 2;
  } else {
    scrollObj = new HScroll({
      enableRtl
    }, scrollEle);
    scrollObj.scrollStep = select(".e-" + scrollType + "-bar", container).offsetWidth;
  }
  return scrollEle;
}
function destroyScroll(scrollObj, element2, skipEle) {
  if (scrollObj) {
    var menu = select(".e-menu-parent", element2);
    if (menu) {
      if (!skipEle || skipEle === menu) {
        scrollObj.destroy();
        element2.parentElement.appendChild(menu);
        detach(element2);
      }
    } else {
      scrollObj.destroy();
      detach(element2);
    }
  }
}

// node_modules/@syncfusion/ej2-navigations/src/common/menu-base.js
var __extends37 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate35 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ENTER = "enter";
var ESCAPE = "escape";
var FOCUSED = "e-focused";
var HEADER = "e-menu-header";
var SELECTED2 = "e-selected";
var SEPARATOR = "e-separator";
var UPARROW = "uparrow";
var DOWNARROW = "downarrow";
var LEFTARROW = "leftarrow";
var RIGHTARROW = "rightarrow";
var HOME = "home";
var END = "end";
var TAB = "tab";
var CARET = "e-caret";
var ITEM = "e-menu-item";
var DISABLED7 = "e-disabled";
var HIDE = "e-menu-hide";
var ICONS = "e-icons";
var RTL11 = "e-rtl";
var POPUP = "e-menu-popup";
var TEMPLATE_PROPERTY = "Template";
var FieldSettings2 = (
  /** @class */
  function(_super) {
    __extends37(FieldSettings3, _super);
    function FieldSettings3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate35([Property("id")], FieldSettings3.prototype, "itemId", void 0);
    __decorate35([Property("parentId")], FieldSettings3.prototype, "parentId", void 0);
    __decorate35([Property("text")], FieldSettings3.prototype, "text", void 0);
    __decorate35([Property("iconCss")], FieldSettings3.prototype, "iconCss", void 0);
    __decorate35([Property("url")], FieldSettings3.prototype, "url", void 0);
    __decorate35([Property("separator")], FieldSettings3.prototype, "separator", void 0);
    __decorate35([Property("items")], FieldSettings3.prototype, "children", void 0);
    return FieldSettings3;
  }(ChildProperty)
);
var MenuItem = (
  /** @class */
  function(_super) {
    __extends37(MenuItem2, _super);
    function MenuItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate35([Property(null)], MenuItem2.prototype, "iconCss", void 0);
    __decorate35([Property("")], MenuItem2.prototype, "id", void 0);
    __decorate35([Property(false)], MenuItem2.prototype, "separator", void 0);
    __decorate35([Collection([], MenuItem2)], MenuItem2.prototype, "items", void 0);
    __decorate35([Property("")], MenuItem2.prototype, "text", void 0);
    __decorate35([Property("")], MenuItem2.prototype, "url", void 0);
    __decorate35([Property()], MenuItem2.prototype, "htmlAttributes", void 0);
    return MenuItem2;
  }(ChildProperty)
);
var MenuAnimationSettings = (
  /** @class */
  function(_super) {
    __extends37(MenuAnimationSettings2, _super);
    function MenuAnimationSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate35([Property("SlideDown")], MenuAnimationSettings2.prototype, "effect", void 0);
    __decorate35([Property(400)], MenuAnimationSettings2.prototype, "duration", void 0);
    __decorate35([Property("ease")], MenuAnimationSettings2.prototype, "easing", void 0);
    return MenuAnimationSettings2;
  }(ChildProperty)
);
var MenuBase = (
  /** @class */
  function(_super) {
    __extends37(MenuBase2, _super);
    function MenuBase2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.navIdx = [];
      _this.animation = new Animation({});
      _this.isTapHold = false;
      _this.tempItem = [];
      _this.showSubMenuOn = "Auto";
      _this.isAnimationNone = false;
      _this.isKBDAction = false;
      return _this;
    }
    MenuBase2.prototype.preRender = function() {
      if (!this.isMenu) {
        var ul = void 0;
        if (this.element.tagName === "EJS-CONTEXTMENU") {
          ul = this.createElement("ul", {
            id: getUniqueID(this.getModuleName()),
            className: "e-control e-lib e-" + this.getModuleName()
          });
          var ejInst = getValue("ej2_instances", this.element);
          removeClass([this.element], ["e-control", "e-lib", "e-" + this.getModuleName()]);
          this.clonedElement = this.element;
          this.element = ul;
          setValue("ej2_instances", ejInst, this.element);
        } else {
          ul = this.createElement("ul", {
            id: getUniqueID(this.getModuleName())
          });
          append([].slice.call(this.element.cloneNode(true).children), ul);
          var refEle = this.element.nextElementSibling;
          if (refEle) {
            this.element.parentElement.insertBefore(ul, refEle);
          } else {
            this.element.parentElement.appendChild(ul);
          }
          this.clonedElement = ul;
        }
        this.clonedElement.style.display = "none";
      }
      if (this.element.tagName === "EJS-MENU") {
        var ele = this.element;
        var ejInstance = getValue("ej2_instances", ele);
        var ul = this.createElement("ul");
        var wrapper = this.createElement("EJS-MENU", {
          className: "e-" + this.getModuleName() + "-wrapper"
        });
        for (var idx = 0, len = ele.attributes.length; idx < len; idx++) {
          ul.setAttribute(ele.attributes[idx].nodeName, ele.attributes[idx].nodeValue);
        }
        ele.parentNode.insertBefore(wrapper, ele);
        detach(ele);
        ele = ul;
        wrapper.appendChild(ele);
        setValue("ej2_instances", ejInstance, ele);
        this.clonedElement = wrapper;
        this.element = ele;
        if (!this.element.id) {
          this.element.id = getUniqueID(this.getModuleName());
        }
      }
    };
    MenuBase2.prototype.render = function() {
      var _this = this;
      this.initialize();
      this.renderItems();
      this.wireEvents();
      this.renderComplete();
      var wrapper = this.getWrapper();
      if (this.template && this.enableScrolling && (this.isReact || this.isAngular)) {
        requestAnimationFrame(function() {
          addScrolling(_this.createElement, wrapper, _this.element, "hscroll", _this.enableRtl);
        });
      }
    };
    MenuBase2.prototype.enableTouchScroll = function(scrollList) {
      var touchStartY = 0;
      this.touchStartFn = function(e) {
        touchStartY = e.touches[0].clientY;
      };
      this.touchMoveFn = function(e) {
        var touchEndY = e.touches[0].clientY;
        var touchDiff = touchStartY - touchEndY;
        var atTop = scrollList.scrollTop === 0;
        var atBottom = scrollList.scrollTop + scrollList.clientHeight === scrollList.scrollHeight;
        if (atTop && touchDiff < 0 || atBottom && touchDiff > 0) {
          e.preventDefault();
        }
        touchStartY = touchEndY;
      };
      scrollList.addEventListener("touchstart", this.touchStartFn, {
        passive: false
      });
      scrollList.addEventListener("touchmove", this.touchMoveFn, {
        passive: false
      });
    };
    MenuBase2.prototype.touchOutsideHandler = function(e) {
      var target = e.target;
      if (!closest(target, ".e-" + this.getModuleName() + "-wrapper")) {
        this.closeMenu();
      }
    };
    MenuBase2.prototype.initialize = function() {
      var wrapper = this.getWrapper();
      if (!wrapper) {
        wrapper = this.createElement("div", {
          className: "e-" + this.getModuleName() + "-wrapper"
        });
        if (this.isMenu) {
          this.element.parentElement.insertBefore(wrapper, this.element);
        } else {
          document.body.appendChild(wrapper);
        }
      }
      if (this.cssClass) {
        addClass([wrapper], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
      }
      if (this.enableRtl) {
        wrapper.classList.add(RTL11);
      }
      wrapper.appendChild(this.element);
      if (this.isMenu && this.hamburgerMode) {
        if (!this.target) {
          this.createHeaderContainer(wrapper);
        }
      }
      this.defaultOption = this.showItemOnClick;
    };
    MenuBase2.prototype.renderItems = function() {
      if (!this.items.length) {
        var items = ListBase.createJsonFromElement(this.element, {
          fields: {
            child: "items"
          }
        });
        this.setProperties({
          items
        }, true);
        if (isBlazor() && !this.isMenu) {
          this.element = this.removeChildElement(this.element);
        } else {
          this.element.innerHTML = "";
        }
      }
      var ul = this.createItems(this.items);
      append(Array.prototype.slice.call(ul.children), this.element);
      this.element.classList.add("e-menu-parent");
      if (this.isMenu) {
        if (!this.hamburgerMode && this.element.classList.contains("e-vertical")) {
          this.setBlankIconStyle(this.element);
        }
        if (this.enableScrolling) {
          var wrapper = this.getWrapper();
          if (this.element.classList.contains("e-vertical")) {
            addScrolling(this.createElement, wrapper, this.element, "vscroll", this.enableRtl);
          } else {
            addScrolling(this.createElement, wrapper, this.element, "hscroll", this.enableRtl);
          }
        }
      } else {
        this.element.parentElement.setAttribute("role", "dialog");
        this.element.parentElement.setAttribute("aria-label", "context menu");
      }
    };
    MenuBase2.prototype.wireEvents = function() {
      var wrapper = this.getWrapper();
      if (this.target) {
        var target = void 0;
        var targetElems = selectAll(this.target);
        for (var i = 0, len = targetElems.length; i < len; i++) {
          target = targetElems[i];
          if (this.isMenu) {
            EventHandler.add(target, "click", this.menuHeaderClickHandler, this);
          } else {
            if (Browser.isIos) {
              new Touch(target, {
                tapHold: this.touchHandler.bind(this)
              });
            } else {
              EventHandler.add(target, "contextmenu", this.cmenuHandler, this);
            }
          }
        }
        this.targetElement = target;
        if (!this.isMenu) {
          EventHandler.add(this.targetElement, "scroll", this.scrollHandler, this);
          for (var _i = 0, _a = getScrollableParent(this.targetElement); _i < _a.length; _i++) {
            var parent_1 = _a[_i];
            EventHandler.add(parent_1, "scroll", this.scrollHandler, this);
          }
        }
      }
      if (!Browser.isDevice) {
        this.delegateMoverHandler = this.moverHandler.bind(this);
        this.delegateMouseDownHandler = this.mouseDownHandler.bind(this);
        EventHandler.add(this.isMenu ? document : wrapper, "mouseover", this.delegateMoverHandler, this);
        EventHandler.add(document, "mousedown", this.delegateMouseDownHandler, this);
        EventHandler.add(document, "keydown", this.domKeyHandler, this);
        if (!this.isMenu && !this.target) {
          EventHandler.add(document, "scroll", this.scrollHandler, this);
        }
      }
      this.delegateClickHandler = this.clickHandler.bind(this);
      EventHandler.add(document, "click", this.delegateClickHandler, this);
      this.wireKeyboardEvent(wrapper);
      this.rippleFn = rippleEffect(wrapper, {
        selector: "." + ITEM
      });
      if (!this.isMenu && this.enableScrolling) {
        this.enableTouchScroll(wrapper);
        document.addEventListener("touchstart", this.touchOutsideHandler.bind(this), {
          passive: true
        });
      }
    };
    MenuBase2.prototype.wireKeyboardEvent = function(element2) {
      var keyConfigs = {
        downarrow: DOWNARROW,
        uparrow: UPARROW,
        enter: ENTER,
        leftarrow: LEFTARROW,
        rightarrow: RIGHTARROW,
        escape: ESCAPE
      };
      if (this.isMenu) {
        keyConfigs.home = HOME;
        keyConfigs.end = END;
        keyConfigs.tab = TAB;
      }
      new KeyboardEvents(element2, {
        keyAction: this.keyBoardHandler.bind(this),
        keyConfigs
      });
    };
    MenuBase2.prototype.mouseDownHandler = function(e) {
      if (closest(e.target, ".e-" + this.getModuleName() + "-wrapper") !== this.getWrapper() && !closest(e.target, ".e-" + this.getModuleName() + "-popup")) {
        this.closeMenu(this.isMenu ? null : this.navIdx.length, e);
      }
    };
    MenuBase2.prototype.keyHandler = function(e) {
      if (e.keyCode === 38 || e.keyCode === 40) {
        if (e.target && (e.target.classList.contains("e-contextmenu") || e.target.classList.contains("e-menu-item"))) {
          e.preventDefault();
        }
      }
    };
    MenuBase2.prototype.domKeyHandler = function(e) {
      if (e.keyCode === 27) {
        if (this.isMenuVisible()) {
          e.stopImmediatePropagation();
        }
        e.action = ESCAPE;
        this.leftEscKeyHandler(e);
      }
    };
    MenuBase2.prototype.keyBoardHandler = function(e) {
      var actionName = "";
      var trgt = e.target;
      var actionNeeded = this.isMenu && !this.hamburgerMode && !this.element.classList.contains("e-vertical") && this.navIdx.length < 1;
      e.preventDefault();
      if (this.enableScrolling && e.keyCode === 13 && trgt.classList.contains("e-scroll-nav")) {
        this.removeLIStateByClass([FOCUSED, SELECTED2], [closest(trgt, ".e-" + this.getModuleName() + "-wrapper")]);
      }
      this.isKBDAction = true;
      if (actionNeeded) {
        switch (e.action) {
          case RIGHTARROW:
            actionName = RIGHTARROW;
            e.action = DOWNARROW;
            break;
          case LEFTARROW:
            actionName = LEFTARROW;
            e.action = UPARROW;
            break;
          case DOWNARROW:
            actionName = DOWNARROW;
            e.action = RIGHTARROW;
            break;
          case UPARROW:
            actionName = UPARROW;
            e.action = "";
            break;
        }
      } else if (this.enableRtl) {
        switch (e.action) {
          case LEFTARROW:
            actionNeeded = true;
            actionName = LEFTARROW;
            e.action = RIGHTARROW;
            break;
          case RIGHTARROW:
            actionNeeded = true;
            actionName = RIGHTARROW;
            e.action = LEFTARROW;
            break;
        }
      }
      switch (e.action) {
        case DOWNARROW:
        case UPARROW:
        case END:
        case HOME:
        case TAB:
          this.upDownKeyHandler(e);
          break;
        case RIGHTARROW:
          this.rightEnterKeyHandler(e);
          break;
        case LEFTARROW:
          this.leftEscKeyHandler(e);
          break;
        case ENTER:
          if (this.hamburgerMode && trgt.tagName === "SPAN" && trgt.classList.contains("e-menu-icon")) {
            this.menuHeaderClickHandler(e);
          } else {
            this.rightEnterKeyHandler(e);
          }
          break;
      }
      if (this.isAnimationNone) {
        this.isKBDAction = false;
      }
      if (actionNeeded) {
        e.action = actionName;
      }
    };
    MenuBase2.prototype.upDownKeyHandler = function(e) {
      var cul = this.getUlByNavIdx();
      var defaultIdx = e.action === DOWNARROW || e.action === HOME || e.action === TAB ? 0 : cul.childElementCount - 1;
      var fliIdx = defaultIdx;
      var fli = this.getLIByClass(cul, FOCUSED);
      if (fli) {
        if (e.action !== END && e.action !== HOME) {
          fliIdx = this.getIdx(cul, fli);
        }
        fli.classList.remove(FOCUSED);
        if (e.action !== END && e.action !== HOME) {
          if (e.action === DOWNARROW) {
            fliIdx++;
          } else {
            fliIdx--;
          }
          if (fliIdx === (e.action === DOWNARROW ? cul.childElementCount : -1)) {
            fliIdx = defaultIdx;
          }
        }
      }
      var cli = cul.children[fliIdx];
      fliIdx = this.isValidLI(cli, fliIdx, e.action);
      cul.children[fliIdx].classList.add(FOCUSED);
      cul.children[fliIdx].focus();
    };
    MenuBase2.prototype.isValidLI = function(cli, index, action) {
      var cul = this.getUlByNavIdx();
      var defaultIdx = action === DOWNARROW || action === HOME || action === TAB ? 0 : cul.childElementCount - 1;
      if (cli.classList.contains(SEPARATOR) || cli.classList.contains(DISABLED7) || cli.classList.contains(HIDE)) {
        if (action === DOWNARROW && index === cul.childElementCount - 1) {
          index = defaultIdx;
        } else if (action === UPARROW && index === 0) {
          index = defaultIdx;
        } else if (action === DOWNARROW || action === RIGHTARROW) {
          index++;
        } else if (action === "tab" && cli.classList.contains(SEPARATOR)) {
          index++;
        } else {
          index--;
        }
      }
      cli = cul.children[index];
      if (cli && (cli.classList.contains(SEPARATOR) || cli.classList.contains(DISABLED7) || cli.classList.contains(HIDE))) {
        index = this.isValidLI(cli, index, action);
      }
      return index;
    };
    MenuBase2.prototype.getUlByNavIdx = function(navIdxLen) {
      var _this = this;
      if (navIdxLen === void 0) {
        navIdxLen = this.navIdx.length;
      }
      if (this.isMenu) {
        var popup = [this.getWrapper()].concat([].slice.call(selectAll("." + POPUP)))[navIdxLen];
        var popups_1 = [];
        var allPopup = selectAll("." + POPUP);
        allPopup.forEach(function(elem) {
          if (_this.element.id === elem.id.split("-")[2] || elem.id.split("-")[2] + "-" + elem.id.split("-")[3]) {
            popups_1.push(elem);
          }
        });
        popup = [this.getWrapper()].concat([].slice.call(popups_1))[navIdxLen];
        return isNullOrUndefined(popup) ? null : select(".e-menu-parent", popup);
      } else {
        if (!document.body.contains(this.element) && navIdxLen === 0) {
          return null;
        }
        return this.getWrapper().children[navIdxLen];
      }
    };
    MenuBase2.prototype.rightEnterKeyHandler = function(e) {
      var eventArgs;
      var cul = this.getUlByNavIdx();
      var fli = this.getLIByClass(cul, FOCUSED);
      if (fli) {
        var fliIdx = this.getIdx(cul, fli);
        var navIdx = this.navIdx.concat(fliIdx);
        var item = this.getItem(navIdx);
        if (item.items.length) {
          this.navIdx.push(fliIdx);
          this.keyType = "right";
          this.action = e.action;
          this.openMenu(fli, item, -1, -1, e);
        } else {
          if (e.action === ENTER) {
            if (this.isMenu && this.navIdx.length === 0) {
              this.removeLIStateByClass([SELECTED2], [this.getWrapper()]);
            } else {
              fli.classList.remove(FOCUSED);
            }
            fli.classList.add(SELECTED2);
            eventArgs = {
              element: fli,
              item,
              event: e
            };
            this.trigger("select", eventArgs);
            var aEle = fli.querySelector(".e-menu-url");
            if (item.url && aEle) {
              switch (aEle.getAttribute("target")) {
                case "_blank":
                  window.open(item.url, "_blank");
                  break;
                case "_parent":
                  window.parent.location.href = item.url;
                  break;
                default:
                  window.location.href = item.url;
              }
            }
            this.closeMenu(null, e);
            var sli = this.getLIByClass(this.getUlByNavIdx(), SELECTED2);
            if (sli) {
              sli.classList.add(FOCUSED);
              sli.focus();
            }
          }
        }
      }
    };
    MenuBase2.prototype.leftEscKeyHandler = function(e) {
      if (this.navIdx.length) {
        this.keyType = "left";
        this.closeMenu(this.navIdx.length, e);
      } else {
        if (e.action === ESCAPE) {
          this.closeMenu(null, e);
        }
      }
    };
    MenuBase2.prototype.scrollHandler = function(e) {
      this.closeMenu(null, e);
    };
    MenuBase2.prototype.touchHandler = function(e) {
      this.isTapHold = true;
      this.cmenuHandler(e.originalEvent);
    };
    MenuBase2.prototype.cmenuHandler = function(e) {
      e.preventDefault();
      this.currentTarget = e.target;
      this.isCMenu = true;
      this.pageX = e.changedTouches ? e.changedTouches[0].pageX + 1 : e.pageX + 1;
      this.pageY = e.changedTouches ? e.changedTouches[0].pageY + 1 : e.pageY + 1;
      this.closeMenu(null, e);
      if (this.isCMenu) {
        if (this.canOpen(e.target)) {
          this.openMenu(null, null, this.pageY, this.pageX, e);
        }
        this.isCMenu = false;
      }
    };
    MenuBase2.prototype.closeMenu = function(ulIndex, e, isIterated) {
      var _this = this;
      if (ulIndex === void 0) {
        ulIndex = 0;
      }
      if (e === void 0) {
        e = null;
      }
      if (this.isMenuVisible()) {
        var sli = void 0;
        var item_1;
        var wrapper_1 = this.getWrapper();
        var beforeCloseArgs = void 0;
        var items_1;
        var popups = this.getPopups();
        var isClose = false;
        var cnt = this.isMenu ? popups.length + 1 : wrapper_1.childElementCount;
        var ul_1 = this.isMenu && cnt !== 1 ? select(".e-ul", popups[cnt - 2]) : selectAll(".e-menu-parent", wrapper_1)[cnt - 1];
        if (this.isMenu && ul_1.classList.contains("e-menu")) {
          sli = this.getLIByClass(ul_1, SELECTED2);
          if (sli) {
            sli.classList.remove(SELECTED2);
          }
          isClose = true;
        }
        if (!isClose) {
          var liElem_1 = e && e.target && this.getLI(e.target);
          if (liElem_1) {
            this.cli = liElem_1;
          } else {
            this.cli = ul_1.children[0];
          }
          item_1 = this.navIdx.length ? this.getItem(this.navIdx) : null;
          items_1 = item_1 ? item_1.items : this.items;
          beforeCloseArgs = {
            element: ul_1,
            parentItem: item_1,
            items: items_1,
            event: e,
            cancel: false,
            isFocused: true
          };
          this.trigger("beforeClose", beforeCloseArgs, function(observedCloseArgs) {
            var popupEle;
            var closeArgs;
            var popupId = "";
            var popupObj;
            var isOpen = !observedCloseArgs.cancel;
            if (isOpen || _this.isCMenu) {
              if (_this.isMenu) {
                popupEle = closest(ul_1, "." + POPUP);
                if (_this.hamburgerMode) {
                  popupEle.parentElement.style.minHeight = "";
                  closest(ul_1, ".e-menu-item").setAttribute("aria-expanded", "false");
                }
                _this.unWireKeyboardEvent(popupEle);
                destroyScroll(getInstance(popupEle.children[0], VScroll), popupEle.children[0]);
                popupObj = getInstance(popupEle, Popup);
                popupObj.hide();
                popupId = popupEle.id;
                popupObj.destroy();
                detach(popupEle);
              } else {
                _this.isContextMenuClosed = false;
                _this.toggleAnimation(ul_1, false);
              }
              closeArgs = {
                element: ul_1,
                parentItem: item_1,
                items: items_1
              };
              _this.trigger("onClose", closeArgs);
              _this.navIdx.pop();
              if (_this.navIdx.length === 0 && e && e.type === "keyup") {
                _this.showSubMenu = false;
              }
              if (!_this.isMenu) {
                EventHandler.remove(ul_1, "keydown", _this.keyHandler);
                if (_this.keyType === "right") {
                  _this.keyType = "";
                }
              }
            }
            _this.updateReactTemplate();
            var trgtliId;
            var closedLi;
            var trgtLi;
            var trgtpopUp = _this.getWrapper() && _this.getUlByNavIdx();
            if (_this.isCMenu) {
              if (_this.canOpen(e.target)) {
                _this.openMenu(null, null, _this.pageY, _this.pageX, e);
              }
              _this.isCMenu = false;
            }
            if (_this.isMenu && trgtpopUp && popupId.length) {
              var regExp = RegExp;
              trgtliId = new regExp("(.*)-ej2menu-" + _this.element.id + "-popup").exec(popupId)[1];
              closedLi = trgtpopUp.querySelector('[id="' + trgtliId + '"]');
              trgtLi = liElem_1 && trgtpopUp.querySelector('[id="' + liElem_1.id + '"]');
            } else if (trgtpopUp) {
              closedLi = trgtpopUp.querySelector(".e-menu-item.e-selected");
              trgtLi = liElem_1 && trgtpopUp.querySelector('[id="' + liElem_1.id + '"]');
            }
            var submenus = liElem_1 && liElem_1.querySelectorAll(".e-menu-item");
            if (isOpen && _this.hamburgerMode && ulIndex && !submenus.length) {
              _this.afterCloseMenu(e);
            } else if (isOpen && !_this.hamburgerMode && closedLi && !trgtLi && _this.keyType !== "left" && (_this.navIdx.length || !_this.isMenu && _this.navIdx.length === 0)) {
              var ele = e && e.target.classList && (e.target.classList.contains("e-vscroll") || e.target.classList.contains("e-scroll-nav")) ? closest(e.target, ".e-menu-wrapper") : null;
              if (ele) {
                ele = ele.querySelector(".e-menu-item");
                if (_this.showItemOnClick || ele && _this.getIndex(ele.id, true).length <= _this.navIdx.length) {
                  _this.closeMenu(_this.navIdx[_this.navIdx.length - 1], e, true);
                }
              } else {
                if (!(e && e.target.classList && e.target.classList.contains("e-nav-arrow"))) {
                  _this.closeMenu(_this.navIdx[_this.navIdx.length - 1], e);
                }
              }
            } else if (isOpen && !isIterated && !ulIndex && (_this.hamburgerMode && _this.navIdx.length || _this.navIdx.length === 1 && liElem_1 && trgtpopUp !== liElem_1.parentElement)) {
              _this.closeMenu(null, e);
            } else if (isOpen && isNullOrUndefined(ulIndex) && _this.navIdx.length) {
              _this.closeMenu(null, e);
            } else if (isOpen && !_this.isMenu && !ulIndex && _this.navIdx.length === 0 && !_this.isMenusClosed && !_this.isCmenuHover) {
              _this.isMenusClosed = true;
              _this.closeMenu(0, e);
            } else if (isOpen && _this.isMenu && e && e.target && _this.navIdx.length !== 0 && closest(e.target, ".e-menu-parent.e-control")) {
              _this.closeMenu(0, e);
            } else if (isOpen && !_this.isMenu && selectAll(".e-menu-parent", wrapper_1)[ulIndex - 1] && e.which === 3) {
              _this.closeMenu(null, e);
            } else {
              if (isOpen && (_this.keyType === "right" || _this.keyType === "click")) {
                _this.afterCloseMenu(e);
              } else {
                var cul = _this.getUlByNavIdx();
                var sli_1 = _this.getLIByClass(cul, SELECTED2);
                if (sli_1) {
                  sli_1.setAttribute("aria-expanded", "false");
                  sli_1.classList.remove(SELECTED2);
                  if (observedCloseArgs.isFocused && liElem_1 || _this.keyType === "left") {
                    sli_1.classList.add(FOCUSED);
                    if (!e.target || !e.target.classList.contains("e-edit-template")) {
                      sli_1.focus();
                    }
                  }
                }
                if (!isOpen && _this.hamburgerMode && liElem_1 && liElem_1.getAttribute("aria-expanded") === "false" && liElem_1.getAttribute("aria-haspopup") === "true") {
                  if (closest(liElem_1, ".e-menu-parent.e-control")) {
                    _this.navIdx = [];
                  } else {
                    _this.navIdx.pop();
                  }
                  _this.navIdx.push(_this.cliIdx);
                  var item_2 = _this.getItem(_this.navIdx);
                  liElem_1.setAttribute("aria-expanded", "true");
                  _this.openMenu(liElem_1, item_2, -1, -1, e);
                }
              }
              if (_this.navIdx.length < 1) {
                if (_this.showSubMenuOn === "Hover" || _this.showSubMenuOn === "Click") {
                  _this.showItemOnClick = _this.defaultOption;
                  _this.showSubMenuOn = "Auto";
                }
              }
            }
            _this.removeStateWrapper();
          });
        }
      }
    };
    MenuBase2.prototype.updateReactTemplate = function() {
      if (this.isReact && this.template && this.navIdx.length === 0) {
        var portals = void 0;
        if (this.portals) {
          portals = this.portals.splice(0, this.items.length);
        }
        this.clearTemplate(["template"]);
        this.portals = portals;
        this.renderReactTemplates();
      }
    };
    MenuBase2.prototype.getMenuItemModel = function(item, level) {
      if (isNullOrUndefined(item)) {
        return null;
      }
      if (isNullOrUndefined(level)) {
        level = 0;
      }
      var fields = this.getFields(level);
      return {
        text: item[fields.text],
        id: item[fields.id],
        items: item[fields.child],
        separator: item[fields.separator],
        iconCss: item[fields.iconCss],
        url: item[fields.url]
      };
    };
    MenuBase2.prototype.getPopups = function() {
      var _this = this;
      var popups = [];
      [].slice.call(document.querySelectorAll("." + POPUP)).forEach(function(elem) {
        if (!isNullOrUndefined(elem.querySelector("." + ITEM)) && _this.getIndex(elem.querySelector("." + ITEM).id, true).length) {
          popups.push(elem);
        }
      });
      return popups;
    };
    MenuBase2.prototype.isMenuVisible = function() {
      return this.navIdx.length > 0 || this.element.classList.contains("e-contextmenu") && isVisible(this.element).valueOf();
    };
    MenuBase2.prototype.canOpen = function(target) {
      var canOpen = true;
      if (this.filter) {
        canOpen = false;
        var filter = this.filter.split(" ");
        for (var i = 0, len = filter.length; i < len; i++) {
          if (closest(target, "." + filter[i])) {
            canOpen = true;
            break;
          }
        }
      }
      return canOpen;
    };
    MenuBase2.prototype.openMenu = function(li, item, top, left, e, target) {
      var _this = this;
      if (top === void 0) {
        top = 0;
      }
      if (left === void 0) {
        left = 0;
      }
      if (e === void 0) {
        e = null;
      }
      if (target === void 0) {
        target = this.targetElement;
      }
      var wrapper = this.getWrapper();
      this.lItem = li;
      var elemId = this.element.id !== "" ? this.element.id : "menu";
      this.isMenusClosed = false;
      if (isNullOrUndefined(top)) {
        top = -1;
      }
      if (isNullOrUndefined(left)) {
        left = -1;
      }
      if (li) {
        this.uList = this.createItems(item[this.getField("children", this.navIdx.length - 1)]);
        if (!this.isMenu && Browser.isDevice) {
          wrapper.lastChild.style.display = "none";
          var data = {
            text: item[this.getField("text")].toString(),
            iconCss: ICONS + " e-previous"
          };
          if (this.template) {
            item.iconCss = (item.iconCss || "") + ICONS + " e-previous";
          }
          var hdata = new MenuItem(this.items[0], "items", this.template ? item : data, true);
          var hli = this.createItems([hdata]).children[0];
          hli.classList.add(HEADER);
          this.uList.insertBefore(hli, this.uList.children[0]);
        }
        if (this.isMenu) {
          this.popupWrapper = this.createElement("div", {
            className: "e-" + this.getModuleName() + "-wrapper " + POPUP,
            id: li.id + "-ej2menu-" + elemId + "-popup"
          });
          this.popupWrapper.setAttribute("role", "navigation");
          this.popupWrapper.setAttribute("aria-label", item.text + "-menu-popup");
          if (this.hamburgerMode) {
            top = li.offsetHeight;
            li.appendChild(this.popupWrapper);
          } else {
            document.body.appendChild(this.popupWrapper);
          }
          this.isNestedOrVertical = this.element.classList.contains("e-vertical") || this.navIdx.length !== 1;
          this.popupObj = this.generatePopup(this.popupWrapper, this.uList, li, this.isNestedOrVertical);
          if (this.template) {
            this.renderReactTemplates();
          }
          if (this.hamburgerMode) {
            this.calculateIndentSize(this.uList, li);
          } else {
            if (this.cssClass) {
              addClass([this.popupWrapper], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
            }
            this.popupObj.hide();
          }
          if (!this.hamburgerMode && !this.showItemOnClick && this.hoverDelay) {
            window.clearInterval(this.timer);
            this.timer = window.setTimeout(function() {
              _this.triggerBeforeOpen(li, _this.uList, item, e, 0, 0, "menu");
            }, this.hoverDelay);
          } else {
            this.triggerBeforeOpen(li, this.uList, item, e, 0, 0, "menu");
          }
        } else {
          this.uList.style.zIndex = this.element.style.zIndex;
          wrapper.appendChild(this.uList);
          if (!this.showItemOnClick && this.hoverDelay) {
            window.clearInterval(this.timer);
            this.timer = window.setTimeout(function() {
              _this.triggerBeforeOpen(li, _this.uList, item, e, top, left, "none");
            }, this.hoverDelay);
          } else {
            this.triggerBeforeOpen(li, this.uList, item, e, top, left, "none");
          }
        }
      } else {
        this.uList = this.element;
        this.uList.style.zIndex = getZindexPartial(target ? target : this.element).toString();
        if (isNullOrUndefined(e)) {
          var ev = document.createEvent("MouseEvents");
          ev.initEvent("click", true, false);
          var targetEvent = this.copyObject(ev, {});
          targetEvent.target = targetEvent.srcElement = target;
          targetEvent.currentTarget = target;
          this.triggerBeforeOpen(li, this.uList, item, targetEvent, top, left, "none");
        } else {
          this.triggerBeforeOpen(li, this.uList, item, e, top, left, "none");
        }
      }
    };
    MenuBase2.prototype.copyObject = function(source, destination) {
      for (var prop in source) {
        destination["" + prop] = source["" + prop];
      }
      return destination;
    };
    MenuBase2.prototype.calculateIndentSize = function(ul, li) {
      var liStyle = getComputedStyle(li);
      var liIndent = parseInt(liStyle.textIndent, 10);
      if (this.navIdx.length < 2 && !li.classList.contains("e-blankicon")) {
        liIndent *= 2;
      } else {
        liIndent += liIndent / 4;
      }
      ul.style.textIndent = liIndent + "px";
      var blankIconElem = ul.querySelectorAll(".e-blankicon");
      if (blankIconElem && blankIconElem.length) {
        var menuIconElem = ul.querySelector(".e-menu-icon");
        var menuIconElemStyle = getComputedStyle(menuIconElem);
        var blankIconIndent = parseInt(menuIconElemStyle.marginRight, 10) + menuIconElem.offsetWidth + liIndent;
        for (var i = 0; i < blankIconElem.length; i++) {
          blankIconElem[i].style.textIndent = blankIconIndent + "px";
        }
      }
    };
    MenuBase2.prototype.generatePopup = function(popupWrapper, ul, li, isNestedOrVertical) {
      var _this = this;
      var popupObj = new Popup(popupWrapper, {
        actionOnScroll: this.hamburgerMode ? "none" : "reposition",
        relateTo: li,
        collision: this.hamburgerMode ? {
          X: "none",
          Y: "none"
        } : {
          X: isNestedOrVertical || this.enableRtl ? "none" : "flip",
          Y: "fit"
        },
        position: isNestedOrVertical && !this.hamburgerMode ? {
          X: "right",
          Y: "top"
        } : {
          X: "left",
          Y: "bottom"
        },
        targetType: "relative",
        enableRtl: this.enableRtl,
        content: ul,
        open: function() {
          var scrollEle = select(".e-menu-vscroll", popupObj.element);
          if (scrollEle) {
            scrollEle.style.height = "inherit";
            scrollEle.style.maxHeight = "";
          }
          var ul2 = select(".e-ul", popupObj.element);
          popupObj.element.style.maxHeight = "";
          ul2.focus();
          _this.triggerOpen(ul2);
        }
      });
      return popupObj;
    };
    MenuBase2.prototype.createHeaderContainer = function(wrapper) {
      wrapper = wrapper || this.getWrapper();
      var spanElem = this.createElement("span", {
        className: "e-" + this.getModuleName() + "-header"
      });
      var tempTitle = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(this.title) : this.title;
      var spanTitle = this.createElement("span", {
        className: "e-" + this.getModuleName() + "-title",
        innerHTML: tempTitle
      });
      var spanIcon = this.createElement("span", {
        className: "e-icons e-" + this.getModuleName() + "-icon",
        attrs: {
          "tabindex": "0"
        }
      });
      spanElem.appendChild(spanTitle);
      spanElem.appendChild(spanIcon);
      wrapper.insertBefore(spanElem, this.element);
    };
    MenuBase2.prototype.openHamburgerMenu = function(e) {
      if (this.hamburgerMode) {
        this.triggerBeforeOpen(null, this.element, null, e, 0, 0, "hamburger");
      }
    };
    MenuBase2.prototype.closeHamburgerMenu = function(e) {
      var _this = this;
      var beforeCloseArgs = {
        element: this.element,
        parentItem: null,
        event: e,
        items: this.items,
        cancel: false
      };
      this.trigger("beforeClose", beforeCloseArgs, function(observedHamburgerCloseArgs) {
        if (!observedHamburgerCloseArgs.cancel) {
          _this.closeMenu(null, e);
          _this.element.classList.add("e-hide-menu");
          _this.trigger("onClose", {
            element: _this.element,
            parentItem: null,
            items: _this.items
          });
        }
      });
    };
    MenuBase2.prototype.callFit = function(element2, x, y, top, left) {
      return fit(element2, null, {
        X: x,
        Y: y
      }, {
        top,
        left
      });
    };
    MenuBase2.prototype.triggerBeforeOpen = function(li, ul, item, e, top, left, type) {
      var _this = this;
      var items = li ? item[this.getField("children", this.navIdx.length - 1)] : this.items;
      var eventArgs = {
        element: ul,
        items,
        parentItem: item,
        event: e,
        cancel: false,
        top,
        left,
        showSubMenuOn: "Auto"
      };
      var menuType = type;
      var observedElement;
      this.trigger("beforeOpen", eventArgs, function(observedOpenArgs) {
        switch (menuType) {
          case "menu":
            if (!_this.hamburgerMode) {
              if (observedOpenArgs.showSubMenuOn !== "Auto") {
                _this.showItemOnClick = !_this.defaultOption;
                _this.showSubMenuOn = observedOpenArgs.showSubMenuOn;
              }
              _this.top = observedOpenArgs.top;
              _this.left = observedOpenArgs.left;
            }
            _this.popupWrapper.style.display = "block";
            if (!_this.hamburgerMode) {
              _this.popupWrapper.style.maxHeight = _this.popupWrapper.getBoundingClientRect().height + "px";
              if (_this.enableScrolling) {
                addScrolling(_this.createElement, _this.popupWrapper, _this.uList, "vscroll", _this.enableRtl);
              }
              _this.checkScrollOffset(e);
            }
            if (!_this.hamburgerMode && !_this.left && !_this.top) {
              _this.popupObj.refreshPosition(_this.lItem, true);
              _this.left = parseInt(_this.popupWrapper.style.left, 10);
              _this.top = parseInt(_this.popupWrapper.style.top, 10);
              if (_this.enableRtl) {
                _this.left = _this.isNestedOrVertical ? _this.left - _this.popupWrapper.offsetWidth - _this.lItem.parentElement.offsetWidth + 2 : _this.left - _this.popupWrapper.offsetWidth + _this.lItem.offsetWidth;
              }
              if (_this.template && (_this.isReact || _this.isAngular)) {
                requestAnimationFrame(function() {
                  _this.collision();
                  _this.popupWrapper.style.display = "";
                });
              } else {
                _this.collision();
                _this.popupWrapper.style.display = "";
              }
            } else {
              _this.popupObj.collision = {
                X: "none",
                Y: "none"
              };
              _this.popupWrapper.style.display = "";
            }
            break;
          case "none":
            _this.top = observedOpenArgs.top;
            _this.left = observedOpenArgs.left;
            _this.isContextMenuClosed = true;
            observedElement = observedOpenArgs.element;
            if (_this.enableScrolling && _this.isCMenu && observedElement && observedElement.parentElement) {
              observedElement.style.height = observedElement.parentElement.style.height;
            }
            break;
          case "hamburger":
            if (!observedOpenArgs.cancel) {
              _this.element.classList.remove("e-hide-menu");
              _this.triggerOpen(_this.element);
            }
            break;
        }
        if (menuType !== "hamburger") {
          if (observedOpenArgs.cancel) {
            if (_this.isMenu) {
              _this.popupObj.destroy();
              detach(_this.popupWrapper);
            } else if (ul.className.indexOf("e-ul") > -1) {
              detach(ul);
            }
            _this.navIdx.pop();
          } else {
            if (_this.isMenu) {
              if (_this.hamburgerMode) {
                _this.popupWrapper.style.top = _this.top + "px";
                _this.popupWrapper.style.left = "0px";
                _this.toggleAnimation(_this.popupWrapper);
              } else {
                _this.setBlankIconStyle(_this.popupWrapper);
                _this.wireKeyboardEvent(_this.popupWrapper);
                rippleEffect(_this.popupWrapper, {
                  selector: "." + ITEM
                });
                _this.popupWrapper.style.left = _this.left + "px";
                _this.popupWrapper.style.top = _this.top + "px";
                var animationOptions = _this.animationSettings.effect !== "None" ? {
                  name: _this.animationSettings.effect,
                  duration: _this.animationSettings.duration,
                  timingFunction: _this.animationSettings.easing
                } : null;
                _this.popupObj.show(animationOptions, _this.lItem);
                if (Browser.isDevice) {
                  _this.popupWrapper.style.left = _this.left + "px";
                }
              }
            } else {
              _this.setBlankIconStyle(_this.uList);
              _this.setPosition(_this.lItem, _this.uList, _this.top, _this.left);
              _this.toggleAnimation(_this.uList);
            }
          }
        }
        if (_this.keyType === "right") {
          var cul = _this.getUlByNavIdx();
          li.classList.remove(FOCUSED);
          if (_this.isMenu && _this.navIdx.length === 1) {
            _this.removeLIStateByClass([SELECTED2], [_this.getWrapper()]);
          }
          li.classList.add(SELECTED2);
          if (_this.action === ENTER) {
            var eventArgs_1 = {
              element: li,
              item,
              event: e
            };
            _this.trigger("select", eventArgs_1);
          }
          li.focus();
          cul = _this.getUlByNavIdx();
          var index = _this.isValidLI(cul.children[0], 0, _this.action);
          cul.children[index].classList.add(FOCUSED);
          cul.children[index].focus();
        }
      });
    };
    MenuBase2.prototype.collision = function() {
      var collide;
      collide = isCollide(this.popupWrapper, null, this.left, this.top);
      if ((this.isNestedOrVertical || this.enableRtl) && (collide.indexOf("right") > -1 || collide.indexOf("left") > -1)) {
        this.popupObj.collision.X = "none";
        var offWidth = closest(this.lItem, ".e-" + this.getModuleName() + "-wrapper").offsetWidth;
        this.left = this.enableRtl ? calculatePosition(this.lItem, this.isNestedOrVertical ? "right" : "left", "top").left : this.left - this.popupWrapper.offsetWidth - offWidth + 2;
      }
      collide = isCollide(this.popupWrapper, null, this.left, this.top);
      if (collide.indexOf("left") > -1 || collide.indexOf("right") > -1) {
        this.left = this.callFit(this.popupWrapper, true, false, this.top, this.left).left;
      }
      this.popupWrapper.style.left = this.left + "px";
    };
    MenuBase2.prototype.setBlankIconStyle = function(menu) {
      var blankIconList = [].slice.call(menu.getElementsByClassName("e-blankicon"));
      if (!blankIconList.length) {
        return;
      }
      var iconLi = menu.querySelector(".e-menu-item:not(.e-blankicon):not(.e-separator)");
      if (!iconLi) {
        return;
      }
      var icon = iconLi.querySelector(".e-menu-icon");
      if (!icon) {
        return;
      }
      var cssProp = this.enableRtl ? {
        padding: "paddingRight",
        margin: "marginLeft"
      } : {
        padding: "paddingLeft",
        margin: "marginRight"
      };
      var iconCssProps = getComputedStyle(icon);
      var iconSize = parseInt(iconCssProps.fontSize, 10);
      if (!!parseInt(iconCssProps.width, 10) && parseInt(iconCssProps.width, 10) > iconSize) {
        iconSize = parseInt(iconCssProps.width, 10);
      }
      var size = iconSize + parseInt(
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        iconCssProps[cssProp.margin],
        10
      ) + parseInt(getComputedStyle(iconLi)[cssProp.padding], 10) + "px";
      blankIconList.forEach(function(li) {
        li.style[cssProp.padding] = size;
      });
    };
    MenuBase2.prototype.checkScrollOffset = function(e) {
      var wrapper = this.getWrapper();
      if (wrapper.children[0].classList.contains("e-menu-hscroll") && this.navIdx.length === 1) {
        var trgt = isNullOrUndefined(e) ? this.element : closest(e.target, "." + ITEM);
        var offsetEle = select(".e-hscroll-bar", wrapper);
        if (offsetEle.scrollLeft > trgt.offsetLeft) {
          offsetEle.scrollLeft -= offsetEle.scrollLeft - trgt.offsetLeft;
        }
        var offsetLeft = offsetEle.scrollLeft + offsetEle.offsetWidth;
        var offsetRight = trgt.offsetLeft + trgt.offsetWidth;
        if (offsetLeft < offsetRight) {
          offsetEle.scrollLeft += offsetRight - offsetLeft;
        }
      }
    };
    MenuBase2.prototype.setPosition = function(li, ul, top, left, isOpen) {
      if (isOpen === void 0) {
        isOpen = false;
      }
      var px = "px";
      this.toggleVisiblity(ul);
      if (ul === this.element || left > -1 && top > -1) {
        var collide = isCollide(ul, null, left, top);
        if (collide.indexOf("right") > -1) {
          left = left - ul.offsetWidth;
        }
        if (collide.indexOf("bottom") > -1) {
          var offset = this.callFit(ul, false, true, top, left);
          top = offset.top - 20;
          if (top < 0) {
            var newTop = pageYOffset + document.documentElement.clientHeight - ul.getBoundingClientRect().height;
            if (newTop > -1) {
              top = newTop;
            }
          }
        }
        collide = isCollide(ul, null, left, top);
        if (collide.indexOf("left") > -1) {
          var offset = this.callFit(ul, true, false, top, left);
          left = offset.left;
        }
      } else {
        if (Browser.isDevice) {
          if (!this.isMenu && this.enableScrolling) {
            var menuScrollElement = document.querySelector(".e-menu-vscroll");
            top = Number(menuScrollElement.style.top.replace("px", ""));
            left = Number(menuScrollElement.style.left.replace("px", ""));
          } else {
            top = Number(this.element.style.top.replace(px, ""));
            left = Number(this.element.style.left.replace(px, ""));
          }
        } else {
          var x = this.enableRtl ? "left" : "right";
          var offset = calculatePosition(li, x, "top");
          top = offset.top;
          left = offset.left;
          var collide = isCollide(ul, null, this.enableRtl ? left - ul.offsetWidth : left, top);
          var xCollision = collide.indexOf("left") > -1 || collide.indexOf("right") > -1;
          if (xCollision) {
            offset = calculatePosition(li, this.enableRtl ? "right" : "left", "top");
            left = offset.left;
          }
          if (this.enableRtl || xCollision) {
            left = this.enableRtl && xCollision ? left : left - ul.offsetWidth;
          }
          if (collide.indexOf("bottom") > -1 && (this.isMenu || !this.enableScrolling)) {
            offset = this.callFit(ul, false, true, top, left);
            top = offset.top;
          }
        }
      }
      this.toggleVisiblity(ul, false);
      if (this.isCMenu && this.enableScrolling && ul) {
        ul.style.height = "";
        ul.style.top = "";
        ul.style.left = "";
        ul.style.width = "";
        ul.style.position = "";
      }
      var wrapper = closest(this.element, ".e-" + this.getModuleName() + "-wrapper");
      if (!this.isMenu && this.enableScrolling && ul && wrapper && wrapper.offsetHeight > 0) {
        var menuVScroll = closest(ul, ".e-menu-vscroll");
        ul.style.display = "block";
        if (menuVScroll) {
          destroyScroll(getInstance(menuVScroll, VScroll), menuVScroll);
        }
        var cmenuWidth = Math.ceil(this.getMenuWidth(ul, ul.offsetWidth, this.enableRtl));
        var cmenu = addScrolling(this.createElement, wrapper, ul, "vscroll", this.enableRtl, wrapper.offsetHeight);
        var newOffset = this.callFit(cmenu, false, true, top, left);
        top = newOffset.top;
        Object.assign(cmenu.style, {
          top: top + "px",
          left: left + "px",
          width: cmenuWidth + "px",
          position: "absolute",
          display: !isOpen ? "none" : "block"
        });
      } else {
        ul.style.top = top + px;
        ul.style.left = left + px;
      }
    };
    MenuBase2.prototype.getMenuWidth = function(menuElement, width, isRtl) {
      var caretIcon = menuElement.getElementsByClassName(CARET)[0];
      if (caretIcon) {
        width += parseInt(getComputedStyle(caretIcon)[isRtl ? "marginRight" : "marginLeft"], 10);
      }
      return width < 120 ? 120 : width;
    };
    MenuBase2.prototype.toggleVisiblity = function(ul, isVisible2) {
      if (isVisible2 === void 0) {
        isVisible2 = true;
      }
      ul.style.visibility = isVisible2 ? "hidden" : "";
      ul.style.display = isVisible2 ? "block" : "none";
    };
    MenuBase2.prototype.createItems = function(items) {
      var _this = this;
      var level = this.navIdx ? this.navIdx.length : 0;
      var fields = this.getFields(level);
      var showIcon = this.hasField(items, this.getField("iconCss", level));
      var listBaseOptions = {
        showIcon,
        moduleName: "menu",
        fields,
        template: this.template,
        itemNavigable: true,
        itemCreating: function(args) {
          if (!args.curData[args.fields[fields.id]]) {
            args.curData[args.fields[fields.id]] = getUniqueID("menuitem");
          }
          if (isNullOrUndefined(args.curData.htmlAttributes)) {
            Object.defineProperty(args.curData, "htmlAttributes", {
              value: {},
              writable: true,
              enumerable: true,
              configurable: true
            });
          }
          if (Browser.isIE) {
            if (!args.curData.htmlAttributes.role) {
              args.curData.htmlAttributes.role = "menuitem";
            }
            if (!args.curData.htmlAttributes.tabindex) {
              args.curData.htmlAttributes.tabindex = "-1";
            }
          } else {
            Object.assign(args.curData.htmlAttributes, {
              role: args.curData.htmlAttributes.role || "menuitem",
              tabindex: args.curData.htmlAttributes.tabindex || "-1"
            });
          }
          if (_this.isMenu && !args.curData[_this.getField("separator", level)]) {
            if (!args.curData.htmlAttributes["aria-label"]) {
              args.curData.htmlAttributes["aria-label"] = args.curData[args.fields.text] ? args.curData[args.fields.text] : args.curData[args.fields.id];
            }
          }
          if (args.curData[args.fields[fields.iconCss]] === "") {
            args.curData[args.fields[fields.iconCss]] = null;
          }
        },
        itemCreated: function(args) {
          if (args.curData[_this.getField("separator", level)]) {
            args.item.classList.add(SEPARATOR);
            if (!args.curData.htmlAttributes.role) {
              args.item.setAttribute("role", "separator");
            }
            if (!args.curData.htmlAttributes.ariaLabel) {
              args.item.setAttribute("aria-label", "separator");
            }
          }
          if (showIcon && !args.curData[args.fields.iconCss] && !args.curData[_this.getField("separator", level)]) {
            args.item.classList.add("e-blankicon");
          }
          if (args.curData[args.fields.child] && args.curData[args.fields.child].length) {
            var span = _this.createElement("span", {
              className: ICONS + " " + CARET
            });
            args.item.appendChild(span);
            args.item.setAttribute("aria-haspopup", "true");
            args.item.setAttribute("aria-expanded", "false");
            args.item.classList.add("e-menu-caret-icon");
          }
          if (_this.template) {
            args.item.setAttribute("id", args.curData[args.fields.id].toString());
            args.item.removeAttribute("data-uid");
            if (args.item.classList.contains("e-level-1")) {
              args.item.classList.remove("e-level-1");
            }
            if (args.item.classList.contains("e-has-child")) {
              args.item.classList.remove("e-has-child");
            }
            args.item.removeAttribute("aria-level");
          }
          var eventArgs = {
            item: args.curData,
            element: args.item
          };
          _this.trigger("beforeItemRender", eventArgs);
        }
      };
      this.setProperties({
        "items": this.items
      }, true);
      if (this.isMenu) {
        listBaseOptions.templateID = this.element.id + TEMPLATE_PROPERTY;
      }
      var ul = ListBase.createList(this.createElement, items, listBaseOptions, !this.template, this);
      ul.setAttribute("tabindex", "0");
      if (this.isMenu) {
        ul.setAttribute("role", "menu");
      } else {
        ul.setAttribute("role", "menubar");
      }
      return ul;
    };
    MenuBase2.prototype.moverHandler = function(e) {
      var trgt = e.target;
      this.liTrgt = trgt;
      if (!this.isMenu) {
        this.isCmenuHover = true;
      }
      var cli = this.getLI(trgt);
      var wrapper = cli ? closest(cli, ".e-" + this.getModuleName() + "-wrapper") : this.getWrapper();
      var hdrWrapper = this.getWrapper();
      var regex2 = new RegExp("-ej2menu-(.*)-popup");
      var ulId;
      var isDifferentElem = false;
      if (!wrapper) {
        return;
      }
      if (wrapper.id !== "") {
        ulId = regex2.exec(wrapper.id)[1];
      } else {
        ulId = wrapper.querySelector("ul").id;
      }
      if (ulId !== this.element.id) {
        this.removeLIStateByClass([FOCUSED, SELECTED2], [this.getWrapper()]);
        if (this.navIdx.length) {
          isDifferentElem = true;
        } else {
          return;
        }
      }
      if (cli && closest(cli, ".e-" + this.getModuleName() + "-wrapper") && !isDifferentElem) {
        this.removeLIStateByClass([FOCUSED], this.isMenu ? [wrapper].concat(this.getPopups()) : [wrapper]);
        this.removeLIStateByClass([FOCUSED], this.isMenu ? [hdrWrapper].concat(this.getPopups()) : [hdrWrapper]);
        cli.classList.add(FOCUSED);
        if (!this.showItemOnClick) {
          this.clickHandler(e);
        }
      } else if (this.isMenu && this.showItemOnClick && !isDifferentElem) {
        this.removeLIStateByClass([FOCUSED], [wrapper].concat(this.getPopups()));
      }
      if (this.isMenu) {
        if (!this.showItemOnClick && trgt.parentElement !== wrapper && !closest(trgt, ".e-" + this.getModuleName() + "-popup") && (!cli || cli && !this.getIndex(cli.id, true).length) && this.showSubMenuOn !== "Hover") {
          this.removeLIStateByClass([FOCUSED], [wrapper]);
          if (this.navIdx.length) {
            this.isClosed = true;
            this.closeMenu(null, e);
          }
        } else if (isDifferentElem && !this.showItemOnClick) {
          if (this.navIdx.length) {
            this.isClosed = true;
            this.closeMenu(null, e);
          }
        }
        if (!this.isClosed) {
          this.removeStateWrapper();
        }
        this.isClosed = false;
      }
      if (!this.isMenu) {
        this.isCmenuHover = false;
      }
    };
    MenuBase2.prototype.removeStateWrapper = function() {
      if (this.liTrgt) {
        var wrapper = closest(this.liTrgt, ".e-menu-vscroll");
        if (this.liTrgt.tagName === "DIV" && wrapper) {
          this.removeLIStateByClass([FOCUSED, SELECTED2], [wrapper]);
        }
      }
    };
    MenuBase2.prototype.removeLIStateByClass = function(classList2, element2) {
      var li;
      var _loop_1 = function(i2) {
        classList2.forEach(function(className) {
          li = select("." + className, element2[i2]);
          if (li) {
            li.classList.remove(className);
          }
        });
      };
      for (var i = 0; i < element2.length; i++) {
        _loop_1(i);
      }
    };
    MenuBase2.prototype.getField = function(propName, level) {
      if (level === void 0) {
        level = 0;
      }
      var fieldName = this.fields["" + propName];
      return typeof fieldName === "string" ? fieldName : !fieldName[level] ? fieldName[fieldName.length - 1].toString() : fieldName[level].toString();
    };
    MenuBase2.prototype.getFields = function(level) {
      if (level === void 0) {
        level = 0;
      }
      return {
        id: this.getField("itemId", level),
        iconCss: this.getField("iconCss", level),
        text: this.getField("text", level),
        url: this.getField("url", level),
        child: this.getField("children", level),
        separator: this.getField("separator", level)
      };
    };
    MenuBase2.prototype.hasField = function(items, field) {
      for (var i = 0, len = items.length; i < len; i++) {
        if (items[i]["" + field]) {
          return true;
        }
      }
      return false;
    };
    MenuBase2.prototype.menuHeaderClickHandler = function(e) {
      var menuWrapper = closest(e.target, ".e-menu-wrapper");
      if (menuWrapper && menuWrapper.querySelector("ul.e-menu-parent").id !== this.element.id) {
        return;
      }
      if (this.element.className.indexOf("e-hide-menu") > -1) {
        this.openHamburgerMenu(e);
      } else {
        this.closeHamburgerMenu(e);
      }
    };
    MenuBase2.prototype.clickHandler = function(e) {
      this.isTapHold = this.isTapHold ? false : this.isTapHold;
      var wrapper = this.getWrapper();
      var trgt = e.target;
      var cli = this.cli = this.getLI(trgt);
      var regex2 = new RegExp("-ej2menu-(.*)-popup");
      var cliWrapper = cli ? closest(cli, ".e-" + this.getModuleName() + "-wrapper") : null;
      var isInstLI = cli && cliWrapper && (this.isMenu ? this.getIndex(cli.id, true).length > 0 : wrapper.firstElementChild.id === cliWrapper.firstElementChild.id);
      if (Browser.isDevice && this.isMenu) {
        this.removeLIStateByClass([FOCUSED], [wrapper].concat(this.getPopups()));
        this.mouseDownHandler(e);
      }
      if (cli && cliWrapper && this.isMenu) {
        var cliWrapperId = cliWrapper.id ? regex2.exec(cliWrapper.id)[1] : cliWrapper.querySelector(".e-menu-parent").id;
        if (this.element.id !== cliWrapperId) {
          return;
        }
      }
      if (isInstLI && e.type === "click" && !cli.classList.contains(HEADER)) {
        this.setLISelected(cli);
        var navIdx = this.getIndex(cli.id, true);
        var item = this.getItem(navIdx);
        var eventArgs = {
          element: cli,
          item,
          event: e
        };
        this.trigger("select", eventArgs);
      }
      if (isInstLI && (e.type === "mouseover" || Browser.isDevice || this.showItemOnClick)) {
        var ul = void 0;
        if (cli.classList.contains(HEADER)) {
          ul = wrapper.children[this.navIdx.length - 1];
          this.toggleAnimation(ul);
          var sli = this.getLIByClass(ul, SELECTED2);
          if (sli) {
            sli.classList.remove(SELECTED2);
          }
          var scrollMenu = this.enableScrolling && !this.isMenu ? closest(cli.parentElement, ".e-menu-vscroll") : null;
          if (scrollMenu) {
            destroyScroll(getInstance(scrollMenu, VScroll), scrollMenu);
          }
          detach(cli.parentNode);
          this.navIdx.pop();
        } else {
          if (!cli.classList.contains(SEPARATOR)) {
            this.showSubMenu = true;
            var cul = cli.parentNode;
            if (isNullOrUndefined(cul)) {
              return;
            }
            this.cliIdx = this.getIdx(cul, cli);
            if (this.isMenu || !Browser.isDevice) {
              var culIdx = this.isMenu ? Array.prototype.indexOf.call([wrapper].concat(this.getPopups()), closest(cul, ".e-" + this.getModuleName() + "-wrapper")) : this.getIdx(wrapper, cul);
              if (this.navIdx[culIdx] === this.cliIdx) {
                this.showSubMenu = false;
              }
              if (culIdx !== this.navIdx.length && (e.type !== "mouseover" || this.showSubMenu)) {
                var sli = this.getLIByClass(cul, SELECTED2);
                if (sli) {
                  sli.classList.remove(SELECTED2);
                }
                this.isClosed = true;
                this.keyType = "click";
                if (this.showItemOnClick) {
                  this.setLISelected(cli);
                  if (!this.isMenu) {
                    this.isCmenuHover = true;
                  }
                }
                this.closeMenu(culIdx + 1, e);
                if (this.showItemOnClick) {
                  this.setLISelected(cli);
                  if (!this.isMenu) {
                    this.isCmenuHover = false;
                  }
                }
              }
            }
            if (!this.isClosed) {
              this.afterCloseMenu(e);
            }
            this.isClosed = false;
          }
        }
      } else {
        if (trgt.tagName === "DIV" && closest(trgt, ".e-menu-vscroll") && (this.navIdx.length || !this.isMenu && this.enableScrolling && this.navIdx.length === 0)) {
          var popupEle = this.isMenu ? closest(trgt, "." + POPUP) : closest(trgt, ".e-menu-vscroll");
          var cIdx = this.isMenu ? Array.prototype.indexOf.call(this.getPopups(), popupEle) + 1 : this.getIdx(wrapper, select("ul.e-menu-parent", popupEle));
          if (cIdx < this.navIdx.length) {
            this.closeMenu(cIdx + 1, e);
            if (popupEle) {
              this.removeLIStateByClass([FOCUSED, SELECTED2], [popupEle]);
            }
          }
        } else if (this.isMenu && this.hamburgerMode && trgt.tagName === "SPAN" && trgt.classList.contains("e-menu-icon")) {
          this.menuHeaderClickHandler(e);
        } else {
          if (trgt.tagName !== "UL" || (this.isMenu ? trgt.parentElement.classList.contains("e-menu-wrapper") && !this.getIndex(trgt.querySelector("." + ITEM).id, true).length : trgt.parentElement !== wrapper)) {
            if (!cli) {
              this.removeLIStateByClass([SELECTED2], [wrapper]);
            }
            if (!this.isAnimationNone && !cli || cli && !cli.querySelector("." + CARET)) {
              if (navigator.platform.toUpperCase().indexOf("MAC") < 0 || navigator.platform.toUpperCase().indexOf("MAC") >= 0 && !e.ctrlKey) {
                this.closeMenu(null, e);
              }
            }
          }
        }
      }
    };
    MenuBase2.prototype.afterCloseMenu = function(e) {
      if (isNullOrUndefined(e)) {
        return;
      }
      var isHeader;
      if (this.showSubMenu) {
        if (this.showItemOnClick && this.navIdx.length === 0) {
          isHeader = closest(e.target, ".e-menu-parent.e-control");
        } else {
          isHeader = closest(this.element, ".e-menu-parent.e-control");
        }
        var idx = this.navIdx.concat(this.cliIdx);
        var item = this.getItem(idx);
        if (item && item[this.getField("children", idx.length - 1)] && item[this.getField("children", idx.length - 1)].length) {
          if (e.type === "mouseover" || Browser.isDevice && this.isMenu) {
            this.setLISelected(this.cli);
          }
          if (!this.hamburgerMode && isHeader || this.hamburgerMode && this.cli.getAttribute("aria-expanded") === "false") {
            this.cli.setAttribute("aria-expanded", "true");
            this.navIdx.push(this.cliIdx);
            this.openMenu(this.cli, item, null, null, e);
          }
        } else {
          if (e.type !== "mouseover") {
            this.closeMenu(null, e);
          }
        }
        if (!isHeader) {
          var cul = this.getUlByNavIdx();
          var sli = this.getLIByClass(cul, SELECTED2);
          if (sli) {
            sli.setAttribute("aria-expanded", "false");
            sli.classList.remove(SELECTED2);
          }
        }
      }
      this.keyType = "";
    };
    MenuBase2.prototype.setLISelected = function(li) {
      var sli = this.getLIByClass(li.parentElement, SELECTED2);
      if (sli) {
        sli.classList.remove(SELECTED2);
      }
      if (!this.isMenu) {
        li.classList.remove(FOCUSED);
      }
      li.classList.add(SELECTED2);
    };
    MenuBase2.prototype.getLIByClass = function(ul, classname) {
      if (ul && ul.children) {
        for (var i = 0, len = ul.children.length; i < len; i++) {
          if (ul.children[i].classList.contains(classname)) {
            return ul.children[i];
          }
        }
      }
      return null;
    };
    MenuBase2.prototype.getItemIndex = function(item, isUniqueId) {
      var idx;
      if (typeof item === "string") {
        idx = item;
      } else {
        idx = item.id;
      }
      var isText = isUniqueId === false ? false : true;
      var navIdx = this.getIndex(idx, isText);
      return navIdx;
    };
    MenuBase2.prototype.setItem = function(item, id, isUniqueId) {
      var idx;
      if (isUniqueId) {
        idx = id ? id : item.id;
      } else {
        idx = id ? id : item.text;
      }
      var navIdx = this.getIndex(idx, isUniqueId);
      var newItem = this.getItem(navIdx);
      Object.assign(newItem, item);
    };
    MenuBase2.prototype.getItem = function(navIdx) {
      navIdx = navIdx.slice();
      var idx = navIdx.pop();
      var items = this.getItems(navIdx);
      return items[idx];
    };
    MenuBase2.prototype.getItems = function(navIdx) {
      var items = this.items;
      for (var i = 0; i < navIdx.length; i++) {
        items = items[navIdx[i]][this.getField("children", i)];
      }
      return items;
    };
    MenuBase2.prototype.setItems = function(newItems, navIdx) {
      var items = this.getItems(navIdx);
      items.splice(0, items.length);
      for (var i = 0; i < newItems.length; i++) {
        items.splice(i, 0, newItems[i]);
      }
    };
    MenuBase2.prototype.getIdx = function(ul, li, skipHdr) {
      if (skipHdr === void 0) {
        skipHdr = true;
      }
      var ulElem = !this.isMenu && this.enableScrolling && select(".e-menu-vscroll", ul) ? selectAll(".e-menu-parent", ul) : Array.from(ul.children);
      var idx = Array.prototype.indexOf.call(ulElem, li);
      if (skipHdr && ul.children[0].classList.contains(HEADER)) {
        idx--;
      }
      return idx;
    };
    MenuBase2.prototype.getLI = function(elem) {
      if (elem.tagName === "LI" && elem.classList.contains("e-menu-item")) {
        return elem;
      }
      return closest(elem, "li.e-menu-item");
    };
    MenuBase2.prototype.updateItemsByNavIdx = function() {
      var items = this.items;
      var count = 0;
      for (var index = 0; index < this.navIdx.length; index++) {
        items = items[index].items;
        if (!items) {
          break;
        }
        count++;
        var ul = this.getUlByNavIdx(count);
        if (!ul) {
          break;
        }
        this.updateItem(ul, items);
      }
    };
    MenuBase2.prototype.removeChildElement = function(elem) {
      while (elem.firstElementChild) {
        elem.removeChild(elem.firstElementChild);
      }
      return elem;
    };
    MenuBase2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var _this = this;
      var wrapper = this.getWrapper();
      var _loop_2 = function(prop2) {
        switch (prop2) {
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([wrapper], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([wrapper], newProp.cssClass.replace(/\s+/g, " ").trim().split(" "));
            }
            break;
          case "enableRtl":
            if (this_1.enableRtl) {
              wrapper.classList.add(RTL11);
            } else {
              wrapper.classList.remove(RTL11);
            }
            break;
          case "showItemOnClick":
            this_1.unWireEvents();
            this_1.showItemOnClick = newProp.showItemOnClick;
            this_1.wireEvents();
            break;
          case "enableScrolling":
            if (newProp.enableScrolling) {
              var ul_2;
              if (this_1.element.classList.contains("e-vertical")) {
                addScrolling(this_1.createElement, wrapper, this_1.element, "vscroll", this_1.enableRtl);
              } else {
                addScrolling(this_1.createElement, wrapper, this_1.element, "hscroll", this_1.enableRtl);
              }
              this_1.getPopups().forEach(function(wrapper2) {
                ul_2 = select(".e-ul", wrapper2);
                addScrolling(_this.createElement, wrapper2, ul_2, "vscroll", _this.enableRtl);
              });
            } else {
              var ul_3 = wrapper.children[0];
              if (this_1.element.classList.contains("e-vertical") || !this_1.isMenu) {
                destroyScroll(getInstance(ul_3, VScroll), ul_3);
              } else {
                destroyScroll(getInstance(ul_3, HScroll), ul_3);
              }
              wrapper.style.overflow = "";
              wrapper.appendChild(this_1.element);
              this_1.getPopups().forEach(function(wrapper2) {
                ul_3 = wrapper2.children[0];
                destroyScroll(getInstance(ul_3, VScroll), ul_3);
                wrapper2.style.overflow = "";
              });
            }
            break;
          case "items": {
            var idx = void 0;
            var navIdx = void 0;
            var item = void 0;
            if (this_1.isReact && this_1.template) {
              this_1.clearTemplate(["template"]);
            }
            if (!Object.keys(oldProp.items).length) {
              this_1.updateItem(this_1.element, this_1.items);
              if (this_1.enableScrolling && this_1.element.parentElement.classList.contains("e-custom-scroll")) {
                if (this_1.element.classList.contains("e-vertical")) {
                  addScrolling(this_1.createElement, wrapper, this_1.element, "vscroll", this_1.enableRtl);
                } else {
                  addScrolling(this_1.createElement, wrapper, this_1.element, "hscroll", this_1.enableRtl);
                }
              }
              if (this_1.enableScrolling && this_1.element.classList.contains("e-contextmenu")) {
                this_1.isCMenu = true;
                this_1.setPosition(this_1.lItem, this_1.uList, this_1.top, this_1.left, true);
                this_1.isCMenu = false;
              }
              if (!this_1.hamburgerMode) {
                for (var i = 1, count = wrapper.childElementCount; i < count; i++) {
                  detach(wrapper.lastElementChild);
                }
              }
              this_1.navIdx = [];
            } else {
              var keys = Object.keys(newProp.items);
              for (var i = 0; i < keys.length; i++) {
                navIdx = this_1.getChangedItemIndex(newProp, [], Number(keys[i]));
                if (navIdx.length <= this_1.getWrapper().children.length) {
                  idx = navIdx.pop();
                  item = this_1.getItems(navIdx);
                  this_1.insertAfter([item[idx]], item[idx].text);
                  this_1.removeItem(item, navIdx, idx);
                  this_1.setItems(item, navIdx);
                }
                navIdx.length = 0;
              }
            }
            break;
          }
        }
      };
      var this_1 = this;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        _loop_2(prop);
      }
    };
    MenuBase2.prototype.updateItem = function(ul, items) {
      if (isBlazor() && !this.isMenu) {
        ul = this.removeChildElement(ul);
      } else {
        if (this.enableScrolling) {
          var wrapper1 = this.getWrapper();
          var ul1 = wrapper1.children[0];
          if (this.element.classList.contains("e-vertical")) {
            destroyScroll(getInstance(ul1, VScroll), ul1);
          } else {
            destroyScroll(getInstance(ul1, HScroll), ul1);
          }
        }
        ul.innerHTML = "";
      }
      var lis = [].slice.call(this.createItems(items).children);
      lis.forEach(function(li) {
        ul.appendChild(li);
      });
    };
    MenuBase2.prototype.getChangedItemIndex = function(newProp, index, idx) {
      index.push(idx);
      var key = Object.keys(newProp.items[idx]).pop();
      if (key === "items") {
        var item = newProp.items[idx];
        var popStr = Object.keys(item.items).pop();
        if (popStr) {
          this.getChangedItemIndex(item, index, Number(popStr));
        }
      } else {
        if (key === "isParentArray" && index.length > 1) {
          index.pop();
        }
      }
      return index;
    };
    MenuBase2.prototype.removeItem = function(item, navIdx, idx) {
      item.splice(idx, 1);
      var uls = this.getWrapper().children;
      if (navIdx.length < uls.length) {
        if (this.enableScrolling && !uls[navIdx.length].classList.contains("e-menu-parent")) {
          var ul = uls[navIdx.length].querySelector(".e-menu-parent");
          detach(ul.children[idx]);
        } else {
          detach(uls[navIdx.length].children[idx]);
        }
      }
    };
    MenuBase2.prototype.unWireEvents = function(targetSelctor) {
      if (targetSelctor === void 0) {
        targetSelctor = this.target;
      }
      var wrapper = this.getWrapper();
      if (targetSelctor) {
        var target = void 0;
        var touchModule = void 0;
        var targetElems = selectAll(targetSelctor);
        for (var i = 0, len = targetElems.length; i < len; i++) {
          target = targetElems[i];
          if (this.isMenu) {
            EventHandler.remove(target, "click", this.menuHeaderClickHandler);
          } else {
            if (Browser.isIos) {
              touchModule = getInstance(target, Touch);
              if (touchModule) {
                touchModule.destroy();
              }
            } else {
              EventHandler.remove(target, "contextmenu", this.cmenuHandler);
            }
          }
        }
        if (!this.isMenu) {
          EventHandler.remove(this.targetElement, "scroll", this.scrollHandler);
          for (var _i = 0, _a = getScrollableParent(this.targetElement); _i < _a.length; _i++) {
            var parent_2 = _a[_i];
            EventHandler.remove(parent_2, "scroll", this.scrollHandler);
          }
        }
      }
      if (!Browser.isDevice) {
        EventHandler.remove(this.isMenu ? document : wrapper, "mouseover", this.delegateMoverHandler);
        EventHandler.remove(document, "mousedown", this.delegateMouseDownHandler);
        EventHandler.remove(document, "keydown", this.domKeyHandler);
        if (!this.isMenu && !this.target) {
          EventHandler.remove(document, "scroll", this.scrollHandler);
        }
      }
      EventHandler.remove(document, "click", this.delegateClickHandler);
      this.unWireKeyboardEvent(wrapper);
      this.rippleFn();
      if (!this.isMenu && this.enableScrolling) {
        wrapper.removeEventListener("touchstart", this.touchStartFn);
        wrapper.removeEventListener("touchmove", this.touchMoveFn);
        document.removeEventListener("touchstart", this.touchOutsideHandler);
      }
    };
    MenuBase2.prototype.unWireKeyboardEvent = function(element2) {
      var keyboardModule = getInstance(element2, KeyboardEvents);
      if (keyboardModule) {
        keyboardModule.destroy();
      }
    };
    MenuBase2.prototype.toggleAnimation = function(ul, isMenuOpen) {
      var _this = this;
      if (isMenuOpen === void 0) {
        isMenuOpen = true;
      }
      var pUlHeight;
      var pElement;
      var animateElement = this.enableScrolling && !this.isMenu && closest(ul, ".e-menu-vscroll") ? closest(ul, ".e-menu-vscroll") : ul;
      Animation.stop(animateElement);
      if (this.animationSettings.effect === "None" || !isMenuOpen) {
        if (this.hamburgerMode && ul) {
          ul.style.top = "0px";
        }
        this.isAnimationNone = this.animationSettings.effect === "None";
        this.end(ul, isMenuOpen);
      } else {
        animateElement.style.maxHeight = "";
        this.animation.animate(animateElement, {
          name: this.animationSettings.effect,
          duration: this.animationSettings.duration,
          timingFunction: this.animationSettings.easing,
          begin: function(options) {
            if (_this.hamburgerMode) {
              pElement = options.element.parentElement;
              options.element.style.position = "absolute";
              if (pElement) {
                pUlHeight = pElement.offsetHeight;
              }
              options.element.style.maxHeight = options.element.offsetHeight + "px";
              if (pElement) {
                pElement.style.maxHeight = "";
              }
            } else {
              options.element.style.display = "block";
              options.element.style.maxHeight = options.element.getBoundingClientRect().height + "px";
            }
          },
          progress: function(options) {
            if (_this.hamburgerMode && pElement) {
              pElement.style.minHeight = pUlHeight + options.element.offsetHeight + "px";
            }
          },
          end: function(options) {
            if (_this.hamburgerMode) {
              options.element.style.position = "";
              options.element.style.maxHeight = "";
              if (pElement) {
                pElement.style.minHeight = "";
              }
              options.element.style.top = "0px";
              options.element.children[0].focus();
              _this.triggerOpen(options.element.children[0]);
            } else {
              _this.end(options.element, isMenuOpen);
            }
            _this.isKBDAction = false;
          }
        });
      }
    };
    MenuBase2.prototype.triggerOpen = function(ul) {
      var item = this.navIdx.length ? this.getItem(this.navIdx) : null;
      var eventArgs = {
        element: ul,
        parentItem: item,
        items: item ? item.items : this.items
      };
      this.trigger("onOpen", eventArgs);
      if (!this.isMenu) {
        EventHandler.add(ul, "keydown", this.keyHandler, this);
      }
    };
    MenuBase2.prototype.end = function(ul, isMenuOpen) {
      if (isMenuOpen && this.isContextMenuClosed) {
        if (this.isMenu || !Browser.isDevice || !this.isMenu && this.isAnimationNone && Browser.isDevice) {
          ul.style.display = "block";
        }
        ul.style.maxHeight = "";
        var scrollMenu = this.enableScrolling && !this.isMenu ? closest(ul, ".e-menu-vscroll") : null;
        if (scrollMenu) {
          scrollMenu.style.display = "block";
        }
        this.triggerOpen(ul);
        if (ul.querySelector("." + FOCUSED) && this.isKBDAction) {
          ul.querySelector("." + FOCUSED).focus();
        } else {
          var ele = this.getWrapper().children[this.getIdx(this.getWrapper(), ul) - 1];
          if (this.currentTarget) {
            if (!(this.currentTarget.classList.contains("e-numerictextbox") || this.currentTarget.classList.contains("e-textbox") || this.currentTarget.tagName === "INPUT")) {
              if (ele && this.isKBDAction) {
                ele.querySelector("." + SELECTED2).focus();
              } else {
                this.element.focus();
              }
            }
          } else {
            if (ele && this.isKBDAction) {
              ele.querySelector("." + SELECTED2).focus();
            } else {
              this.element.focus();
            }
          }
        }
      } else {
        var scrollMenu = this.enableScrolling && !this.isMenu ? closest(ul, ".e-menu-vscroll") : null;
        if (scrollMenu) {
          destroyScroll(getInstance(scrollMenu, VScroll), scrollMenu);
        }
        if (ul === this.element) {
          var fli = this.getLIByClass(this.element, FOCUSED);
          if (fli) {
            fli.classList.remove(FOCUSED);
          }
          var sli = this.getLIByClass(this.element, SELECTED2);
          if (sli) {
            sli.classList.remove(SELECTED2);
          }
          ul.style.display = "none";
          this.isAnimationNone = false;
        } else {
          detach(ul);
        }
      }
    };
    MenuBase2.prototype.getPersistData = function() {
      return "";
    };
    MenuBase2.prototype.getWrapper = function() {
      return closest(this.element, ".e-" + this.getModuleName() + "-wrapper");
    };
    MenuBase2.prototype.getIndex = function(data, isUniqueId, items, nIndex, isCallBack, level) {
      if (items === void 0) {
        items = this.items;
      }
      if (nIndex === void 0) {
        nIndex = [];
      }
      if (isCallBack === void 0) {
        isCallBack = false;
      }
      if (level === void 0) {
        level = 0;
      }
      var item;
      level = isCallBack ? level + 1 : 0;
      for (var i = 0, len = items.length; i < len; i++) {
        item = items[i];
        var currentField = isUniqueId ? item[this.getField("itemId", level)] : item[this.getField("text", level)];
        var itemId = item.htmlAttributes && "id" in item.htmlAttributes ? item.htmlAttributes.id : currentField;
        if (itemId === data) {
          nIndex.push(i);
          break;
        } else if (item[this.getField("children", level)] && item[this.getField("children", level)].length) {
          nIndex = this.getIndex(data, isUniqueId, item[this.getField("children", level)], nIndex, true, level);
          if (nIndex[nIndex.length - 1] === -1) {
            if (i !== len - 1) {
              nIndex.pop();
            }
          } else {
            nIndex.unshift(i);
            break;
          }
        } else {
          if (i === len - 1) {
            nIndex.push(-1);
          }
        }
      }
      return !isCallBack && nIndex[0] === -1 ? [] : nIndex;
    };
    MenuBase2.prototype.enableItems = function(items, enable, isUniqueId) {
      if (enable === void 0) {
        enable = true;
      }
      var ul;
      var idx;
      var navIdx;
      var disabled = DISABLED7;
      var skipItem;
      for (var i = 0; i < items.length; i++) {
        navIdx = this.getIndex(items[i], isUniqueId);
        if (this.navIdx.length) {
          if (navIdx.length !== 1) {
            skipItem = false;
            for (var i_1 = 0, len = navIdx.length - 1; i_1 < len; i_1++) {
              if (navIdx[i_1] !== this.navIdx[i_1]) {
                skipItem = true;
                break;
              }
            }
            if (skipItem) {
              continue;
            }
          }
        } else {
          if (navIdx.length !== 1) {
            continue;
          }
        }
        idx = navIdx.pop();
        ul = this.getUlByNavIdx(navIdx.length);
        if (ul && !isNullOrUndefined(idx)) {
          if (enable) {
            if (this.isMenu) {
              ul.children[idx].classList.remove(disabled);
              ul.children[idx].removeAttribute("aria-disabled");
            } else {
              if (Browser.isDevice && !ul.classList.contains("e-contextmenu")) {
                ul.children[idx + 1].classList.remove(disabled);
              } else if (this.enableScrolling && !ul.classList.contains("e-menu-parent")) {
                var mainUl = ul.querySelector(".e-menu-parent");
                mainUl.children[idx].classList.remove(disabled);
              } else {
                ul.children[idx].classList.remove(disabled);
              }
            }
          } else {
            if (this.isMenu) {
              ul.children[idx].classList.add(disabled);
              ul.children[idx].setAttribute("aria-disabled", "true");
            } else {
              if (Browser.isDevice && !ul.classList.contains("e-contextmenu")) {
                ul.children[idx + 1].classList.add(disabled);
              } else {
                if (this.enableScrolling && !ul.classList.contains("e-menu-parent")) {
                  var mainUl = ul.querySelector(".e-menu-parent");
                  mainUl.children[idx].classList.add(disabled);
                } else {
                  ul.children[idx].classList.add(disabled);
                }
              }
            }
          }
        }
      }
    };
    MenuBase2.prototype.showItems = function(items, isUniqueId) {
      this.showHideItems(items, false, isUniqueId);
    };
    MenuBase2.prototype.hideItems = function(items, isUniqueId) {
      this.showHideItems(items, true, isUniqueId);
    };
    MenuBase2.prototype.showHideItems = function(items, ishide, isUniqueId) {
      var ul;
      var index;
      var navIdx;
      var item;
      for (var i = 0; i < items.length; i++) {
        navIdx = this.getIndex(items[i], isUniqueId);
        index = navIdx.pop();
        ul = this.getUlByNavIdx(navIdx.length);
        item = this.getItems(navIdx);
        if (ul) {
          if (this.enableScrolling && !ul.classList.contains("e-menu-parent")) {
            ul = ul.querySelector(".e-menu-parent");
          }
          var validUl = isUniqueId ? ul.children[index].id : item[index].text.toString();
          if (ishide && validUl === items[i]) {
            ul.children[index].classList.add(HIDE);
          } else if (!ishide && validUl === items[i]) {
            ul.children[index].classList.remove(HIDE);
          }
        }
      }
    };
    MenuBase2.prototype.removeItems = function(items, isUniqueId) {
      var idx;
      var navIdx;
      var iitems;
      for (var i = 0; i < items.length; i++) {
        navIdx = this.getIndex(items[i], isUniqueId);
        idx = navIdx.pop();
        iitems = this.getItems(navIdx);
        if (!isNullOrUndefined(idx)) {
          this.removeItem(iitems, navIdx, idx);
        }
      }
    };
    MenuBase2.prototype.insertAfter = function(items, text, isUniqueId) {
      this.insertItems(items, text, isUniqueId);
    };
    MenuBase2.prototype.insertBefore = function(items, text, isUniqueId) {
      this.insertItems(items, text, isUniqueId, false);
    };
    MenuBase2.prototype.insertItems = function(items, text, isUniqueId, isAfter) {
      if (isAfter === void 0) {
        isAfter = true;
      }
      var li;
      var idx;
      var navIdx;
      var iitems;
      var menuitem;
      var parentUl;
      for (var i = 0; i < items.length; i++) {
        navIdx = this.getIndex(text, isUniqueId);
        idx = navIdx.pop();
        iitems = this.getItems(navIdx);
        menuitem = new MenuItem(iitems[0], "items", items[i], true);
        menuitem.parentObj = iitems[0].parentObj;
        iitems.splice(isAfter ? idx + 1 : idx, 0, menuitem);
        var uls = this.isMenu ? [this.getWrapper()].concat(this.getPopups()) : [].slice.call(this.getWrapper().children);
        if (!isNullOrUndefined(idx) && navIdx.length < uls.length) {
          idx = isAfter ? idx + 1 : idx;
          li = this.createItems(iitems).children[idx];
          var ul = parentUl = this.isMenu ? select(".e-menu-parent", uls[navIdx.length]) : uls[navIdx.length];
          if (this.enableScrolling && !ul.classList.contains("e-menu-parent")) {
            ul = ul.querySelector(".e-menu-parent");
          }
          ul.insertBefore(li, ul.children[idx]);
          if (i === items.length - 1 && !this.isMenu && ul.style.display === "block") {
            if (this.enableScrolling) {
              this.setPosition(null, ul, parseFloat(parentUl.style.top), parseFloat(parentUl.style.left));
              var scrollElem = closest(ul, ".e-vscroll");
              if (scrollElem) {
                scrollElem.style.display = "block";
              }
            } else {
              this.setPosition(null, ul, parseFloat(ul.style.top), parseFloat(ul.style.left));
              ul.style.display = "block";
            }
          }
        }
      }
    };
    MenuBase2.prototype.removeAttributes = function() {
      var _this = this;
      ["top", "left", "display", "z-index"].forEach(function(key) {
        _this.element.style.removeProperty(key);
      });
      ["role", "tabindex", "class", "style"].forEach(function(key) {
        if (key === "class" && _this.element.classList.contains("e-menu-parent")) {
          _this.element.classList.remove("e-menu-parent");
        }
        if (["class", "style"].indexOf(key) === -1 || !_this.element.getAttribute(key)) {
          _this.element.removeAttribute(key);
        }
        if (_this.isMenu && key === "class" && _this.element.classList.contains("e-vertical")) {
          _this.element.classList.remove("e-vertical");
        }
      });
    };
    MenuBase2.prototype.destroy = function() {
      var wrapper = this.getWrapper();
      if (wrapper) {
        this.unWireEvents();
        if (!this.isMenu) {
          this.clonedElement.style.display = "";
          if (this.clonedElement.tagName === "EJS-CONTEXTMENU") {
            addClass([this.clonedElement], ["e-control", "e-lib", "e-" + this.getModuleName()]);
            this.element = this.clonedElement;
          } else {
            if (this.refreshing && this.clonedElement.childElementCount && this.clonedElement.children[0].tagName === "LI") {
              this.setProperties({
                "items": []
              }, true);
            }
            if (document.getElementById(this.clonedElement.id)) {
              var refEle = this.clonedElement.nextElementSibling;
              if (refEle && refEle !== wrapper) {
                this.clonedElement.parentElement.insertBefore(this.element, refEle);
              } else {
                this.clonedElement.parentElement.appendChild(this.element);
              }
              if (isBlazor() && !this.isMenu) {
                this.element = this.removeChildElement(this.element);
              } else {
                this.element.innerHTML = "";
              }
              append([].slice.call(this.clonedElement.children), this.element);
              detach(this.clonedElement);
              this.removeAttributes();
            }
          }
          this.clonedElement = null;
        } else {
          this.closeMenu();
          if (isBlazor() && !this.isMenu) {
            this.element = this.removeChildElement(this.element);
          } else {
            this.element.innerHTML = "";
          }
          this.removeAttributes();
          wrapper.parentNode.insertBefore(this.element, wrapper);
          this.clonedElement = null;
        }
        detach(wrapper);
        _super.prototype.destroy.call(this);
        if (this.template) {
          this.clearTemplate(["template"]);
        }
      }
      this.rippleFn = null;
    };
    __decorate35([Event()], MenuBase2.prototype, "beforeItemRender", void 0);
    __decorate35([Event()], MenuBase2.prototype, "beforeOpen", void 0);
    __decorate35([Event()], MenuBase2.prototype, "onOpen", void 0);
    __decorate35([Event()], MenuBase2.prototype, "beforeClose", void 0);
    __decorate35([Event()], MenuBase2.prototype, "onClose", void 0);
    __decorate35([Event()], MenuBase2.prototype, "select", void 0);
    __decorate35([Event()], MenuBase2.prototype, "created", void 0);
    __decorate35([Property("")], MenuBase2.prototype, "cssClass", void 0);
    __decorate35([Property(0)], MenuBase2.prototype, "hoverDelay", void 0);
    __decorate35([Property(false)], MenuBase2.prototype, "showItemOnClick", void 0);
    __decorate35([Property("")], MenuBase2.prototype, "target", void 0);
    __decorate35([Property("")], MenuBase2.prototype, "filter", void 0);
    __decorate35([Property(null)], MenuBase2.prototype, "template", void 0);
    __decorate35([Property(false)], MenuBase2.prototype, "enableScrolling", void 0);
    __decorate35([Property(true)], MenuBase2.prototype, "enableHtmlSanitizer", void 0);
    __decorate35([Complex({
      itemId: "id",
      text: "text",
      parentId: "parentId",
      iconCss: "iconCss",
      url: "url",
      separator: "separator",
      children: "items"
    }, FieldSettings2)], MenuBase2.prototype, "fields", void 0);
    __decorate35([Collection([], MenuItem)], MenuBase2.prototype, "items", void 0);
    __decorate35([Complex({
      duration: 400,
      easing: "ease",
      effect: "SlideDown"
    }, MenuAnimationSettings)], MenuBase2.prototype, "animationSettings", void 0);
    MenuBase2 = __decorate35([NotifyPropertyChanges], MenuBase2);
    return MenuBase2;
  }(Component)
);

// node_modules/@syncfusion/ej2-navigations/src/context-menu/context-menu.js
var __extends38 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate36 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ContextMenu = (
  /** @class */
  function(_super) {
    __extends38(ContextMenu2, _super);
    function ContextMenu2(options, element2) {
      return _super.call(this, options, element2) || this;
    }
    ContextMenu2.prototype.preRender = function() {
      this.isMenu = false;
      this.element.id = this.element.id || getUniqueID("ej2-contextmenu");
      _super.prototype.preRender.call(this);
    };
    ContextMenu2.prototype.initialize = function() {
      this.template = this.itemTemplate ? this.itemTemplate : null;
      _super.prototype.initialize.call(this);
      attributes(this.element, {
        "role": "menubar",
        "tabindex": "0"
      });
      this.element.style.zIndex = getZindexPartial(this.element).toString();
    };
    ContextMenu2.prototype.open = function(top, left, target) {
      _super.prototype.openMenu.call(this, null, null, top, left, null, target);
    };
    ContextMenu2.prototype.close = function() {
      _super.prototype.closeMenu.call(this);
    };
    ContextMenu2.prototype.onPropertyChanged = function(newProp, oldProp) {
      _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "filter":
            this.close();
            this.filter = newProp.filter;
            break;
          case "target":
            this.unWireEvents(oldProp.target);
            this.wireEvents();
            break;
          case "itemTemplate":
            this.itemTemplate = newProp.itemTemplate;
            this.refresh();
        }
      }
    };
    ContextMenu2.prototype.getModuleName = function() {
      return "contextmenu";
    };
    __decorate36([Property("")], ContextMenu2.prototype, "target", void 0);
    __decorate36([Property("")], ContextMenu2.prototype, "filter", void 0);
    __decorate36([Collection([], MenuItem)], ContextMenu2.prototype, "items", void 0);
    __decorate36([Property(null)], ContextMenu2.prototype, "itemTemplate", void 0);
    __decorate36([Property(false)], ContextMenu2.prototype, "enableScrolling", void 0);
    ContextMenu2 = __decorate36([NotifyPropertyChanges], ContextMenu2);
    return ContextMenu2;
  }(MenuBase)
);

// node_modules/@syncfusion/ej2-navigations/src/menu/menu.js
var __extends39 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate37 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var VMENU = "e-vertical";
var SCROLLABLE = "e-scrollable";
var HAMBURGER = "e-hamburger";
var Menu = (
  /** @class */
  function(_super) {
    __extends39(Menu2, _super);
    function Menu2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.tempItems = [];
      return _this;
    }
    Menu2.prototype.getModuleName = function() {
      return "menu";
    };
    Menu2.prototype.preRender = function() {
      this.isMenu = true;
      this.element.id = this.element.id || getUniqueID("ej2-menu");
      if (this.template) {
        try {
          if (typeof this.template !== "function" && document.querySelectorAll(this.template).length) {
            this.template = document.querySelector(this.template).innerHTML.trim();
            this.clearChanges();
          }
        } catch (e) {
        }
        this.updateMenuItems(this.items);
      } else {
        this.updateMenuItems(this.items);
      }
      _super.prototype.preRender.call(this);
    };
    Menu2.prototype.initialize = function() {
      _super.prototype.initialize.call(this);
      attributes(this.element, {
        "role": "menubar",
        "tabindex": "0"
      });
      if (this.orientation === "Vertical") {
        this.element.classList.add(VMENU);
        if (this.hamburgerMode && !this.target) {
          this.element.previousElementSibling.classList.add(VMENU);
        }
        this.element.setAttribute("aria-orientation", "vertical");
      } else {
        if (Browser.isDevice && !this.enableScrolling) {
          this.element.parentElement.classList.add(SCROLLABLE);
        }
      }
      if (this.hamburgerMode) {
        this.element.parentElement.classList.add(HAMBURGER);
        if (this.orientation === "Horizontal") {
          this.element.classList.add("e-hide-menu");
        }
      }
    };
    Menu2.prototype.updateMenuItems = function(items) {
      this.tempItems = items;
      this.items = [];
      this.tempItems.map(this.createMenuItems, this);
      this.setProperties({
        items: this.items
      }, true);
      this.tempItems = [];
    };
    Menu2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var _this = this;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "orientation":
            if (newProp.orientation === "Vertical") {
              this.element.classList.add(VMENU);
              if (this.hamburgerMode) {
                if (!this.target) {
                  this.element.previousElementSibling.classList.add(VMENU);
                }
                this.element.classList.remove("e-hide-menu");
              }
              this.element.setAttribute("aria-orientation", "vertical");
            } else {
              this.element.classList.remove(VMENU);
              if (this.hamburgerMode) {
                if (!this.target) {
                  this.element.previousElementSibling.classList.remove(VMENU);
                }
                this.element.classList.add("e-hide-menu");
              }
              this.element.removeAttribute("aria-orientation");
            }
            break;
          case "items":
            if (!Object.keys(oldProp.items).length) {
              this.updateMenuItems(newProp.items);
            }
            break;
          case "hamburgerMode":
            if (!this.element.previousElementSibling) {
              _super.prototype.createHeaderContainer.call(this);
            }
            if (newProp.hamburgerMode) {
              this.element.parentElement.classList.add(HAMBURGER);
              [].slice.call(this.element.getElementsByClassName("e-blankicon")).forEach(function(li) {
                li.style[_this.enableRtl ? "paddingRight" : "paddingLeft"] = "";
              });
            } else {
              this.element.parentElement.classList.remove(HAMBURGER);
              if (this.orientation === "Vertical") {
                this.setBlankIconStyle(this.element);
              }
            }
            if (this.orientation === "Vertical") {
              if (!this.target) {
                this.element.previousElementSibling.classList.add(VMENU);
              }
              this.element.classList.remove("e-hide-menu");
            } else {
              if (this.target) {
                this.element.previousElementSibling.classList.add(VMENU);
              } else {
                this.element.previousElementSibling.classList.remove(VMENU);
              }
              this.element.classList[newProp.hamburgerMode ? "add" : "remove"]("e-hide-menu");
            }
            break;
          case "title":
            if (this.hamburgerMode && this.element.previousElementSibling) {
              newProp.title = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(newProp.title) : newProp.title;
              this.element.previousElementSibling.querySelector(".e-menu-title").innerHTML = newProp.title;
            }
            break;
          case "target":
            if (this.hamburgerMode) {
              this.unWireEvents(oldProp.target);
              this.wireEvents();
              if (this.orientation === "Horizontal") {
                if (!newProp.target) {
                  if (!this.element.previousElementSibling) {
                    _super.prototype.createHeaderContainer.call(this);
                  }
                  this.element.previousElementSibling.classList.remove(VMENU);
                } else {
                  this.element.previousElementSibling.classList.add(VMENU);
                }
                this.element.classList.add("e-hide-menu");
              }
            }
            break;
          case "template":
            this.template = newProp.template;
            this.refresh();
            break;
        }
      }
      _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
    };
    Menu2.prototype.createMenuItems = function(item) {
      var idx;
      var i;
      var items = this.items;
      var pIdField = this.getField("parentId");
      if (item["" + pIdField]) {
        idx = this.getIndex(item["" + pIdField].toString(), true);
        for (i = 0; i < idx.length; i++) {
          if (!items[idx[i]].items) {
            items[idx[i]].items = [];
          }
          items = items[idx[i]].items;
        }
        items.push(item);
      } else {
        this.items.push(item);
      }
    };
    Menu2.prototype.open = function() {
      _super.prototype.openHamburgerMenu.call(this);
    };
    Menu2.prototype.close = function() {
      _super.prototype.closeHamburgerMenu.call(this);
    };
    __decorate37([Property("Horizontal")], Menu2.prototype, "orientation", void 0);
    __decorate37([Property("")], Menu2.prototype, "target", void 0);
    __decorate37([Property(null)], Menu2.prototype, "template", void 0);
    __decorate37([Property(false)], Menu2.prototype, "enableScrolling", void 0);
    __decorate37([Property(false)], Menu2.prototype, "hamburgerMode", void 0);
    __decorate37([Property("Menu")], Menu2.prototype, "title", void 0);
    __decorate37([Property(true)], Menu2.prototype, "enableHtmlSanitizer", void 0);
    __decorate37([Complex({
      itemId: "id",
      text: "text",
      parentId: "parentId",
      iconCss: "iconCss",
      url: "url",
      separator: "separator",
      children: "items"
    }, FieldSettings2)], Menu2.prototype, "fields", void 0);
    Menu2 = __decorate37([NotifyPropertyChanges], Menu2);
    return Menu2;
  }(MenuBase)
);

// node_modules/@syncfusion/ej2-navigations/src/tab/tab.js
var __extends40 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate38 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_TAB = "e-tab";
var CLS_HEADER2 = "e-tab-header";
var CLS_BLA_TEM = "blazor-template";
var CLS_CONTENT2 = "e-content";
var CLS_NEST2 = "e-nested";
var CLS_ITEMS2 = "e-items";
var CLS_ITEM3 = "e-item";
var CLS_TEMPLATE2 = "e-template";
var CLS_RTL5 = "e-rtl";
var CLS_ACTIVE2 = "e-active";
var CLS_DISABLE5 = "e-disable";
var CLS_HIDDEN2 = "e-hidden";
var CLS_FOCUS = "e-focused";
var CLS_ICONS = "e-icons";
var CLS_ICON = "e-icon";
var CLS_ICON_TAB = "e-icon-tab";
var CLS_ICON_CLOSE = "e-close-icon";
var CLS_CLOSE_SHOW = "e-close-show";
var CLS_TEXT = "e-tab-text";
var CLS_INDICATOR = "e-indicator";
var CLS_WRAP = "e-tab-wrap";
var CLS_TEXT_WRAP = "e-text-wrap";
var CLS_TAB_ICON = "e-tab-icon";
var CLS_TB_ITEMS = "e-toolbar-items";
var CLS_TB_ITEM = "e-toolbar-item";
var CLS_TB_POP = "e-toolbar-pop";
var CLS_TB_POPUP = "e-toolbar-popup";
var CLS_HOR_NAV = "e-hor-nav";
var CLS_POPUP_OPEN = "e-popup-open";
var CLS_POPUP_CLOSE = "e-popup-close";
var CLS_PROGRESS = "e-progress";
var CLS_IGNORE = "e-ignore";
var CLS_OVERLAY3 = "e-overlay";
var CLS_HSCRCNT = "e-hscroll-content";
var CLS_VSCRCNT = "e-vscroll-content";
var CLS_VTAB = "e-vertical-tab";
var CLS_VERTICAL2 = "e-vertical";
var CLS_VLEFT = "e-vertical-left";
var CLS_VRIGHT = "e-vertical-right";
var CLS_HBOTTOM = "e-horizontal-bottom";
var CLS_FILL = "e-fill-mode";
var TABITEMPREFIX = "tabitem_";
var CLS_REORDER_ACTIVE_ITEM = "e-reorder-active-item";
var TabActionSettings = (
  /** @class */
  function(_super) {
    __extends40(TabActionSettings2, _super);
    function TabActionSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate38([Property("SlideLeftIn")], TabActionSettings2.prototype, "effect", void 0);
    __decorate38([Property(600)], TabActionSettings2.prototype, "duration", void 0);
    __decorate38([Property("ease")], TabActionSettings2.prototype, "easing", void 0);
    return TabActionSettings2;
  }(ChildProperty)
);
var TabAnimationSettings = (
  /** @class */
  function(_super) {
    __extends40(TabAnimationSettings2, _super);
    function TabAnimationSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate38([Complex({
      effect: "SlideLeftIn",
      duration: 600,
      easing: "ease"
    }, TabActionSettings)], TabAnimationSettings2.prototype, "previous", void 0);
    __decorate38([Complex({
      effect: "SlideRightIn",
      duration: 600,
      easing: "ease"
    }, TabActionSettings)], TabAnimationSettings2.prototype, "next", void 0);
    return TabAnimationSettings2;
  }(ChildProperty)
);
var Header = (
  /** @class */
  function(_super) {
    __extends40(Header2, _super);
    function Header2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate38([Property("")], Header2.prototype, "text", void 0);
    __decorate38([Property("")], Header2.prototype, "iconCss", void 0);
    __decorate38([Property("left")], Header2.prototype, "iconPosition", void 0);
    return Header2;
  }(ChildProperty)
);
var TabItem = (
  /** @class */
  function(_super) {
    __extends40(TabItem2, _super);
    function TabItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate38([Complex({}, Header)], TabItem2.prototype, "header", void 0);
    __decorate38([Property(null)], TabItem2.prototype, "headerTemplate", void 0);
    __decorate38([Property("")], TabItem2.prototype, "content", void 0);
    __decorate38([Property("")], TabItem2.prototype, "cssClass", void 0);
    __decorate38([Property(false)], TabItem2.prototype, "disabled", void 0);
    __decorate38([Property(true)], TabItem2.prototype, "visible", void 0);
    __decorate38([Property()], TabItem2.prototype, "id", void 0);
    __decorate38([Property(-1)], TabItem2.prototype, "tabIndex", void 0);
    return TabItem2;
  }(ChildProperty)
);
var Tab = (
  /** @class */
  function(_super) {
    __extends40(Tab2, _super);
    function Tab2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.show = {};
      _this.hide = {};
      _this.maxHeight = 0;
      _this.title = "Close";
      _this.isInteracted = false;
      _this.lastIndex = 0;
      _this.isAdd = false;
      _this.isIconAlone = false;
      _this.draggableItems = [];
      _this.resizeContext = _this.refreshActiveTabBorder.bind(_this);
      _this.keyConfigs = {
        tab: "tab",
        home: "home",
        end: "end",
        enter: "enter",
        space: "space",
        delete: "delete",
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        moveUp: "uparrow",
        moveDown: "downarrow"
      };
      return _this;
    }
    Tab2.prototype.destroy = function() {
      if (this.isReact || this.isAngular) {
        this.clearTemplate();
      }
      if (!isNullOrUndefined(this.tbObj)) {
        this.tbObj.destroy();
        this.tbObj = null;
      }
      this.unWireEvents();
      this.element.removeAttribute("aria-disabled");
      this.expTemplateContent();
      if (!this.isTemplate) {
        while (this.element.firstElementChild) {
          remove(this.element.firstElementChild);
        }
      } else {
        var cntEle = select("." + CLS_TAB + " > ." + CLS_CONTENT2, this.element);
        this.element.classList.remove(CLS_TEMPLATE2);
        if (!isNullOrUndefined(cntEle)) {
          cntEle.innerHTML = this.cnt;
        }
      }
      if (this.btnCls) {
        this.btnCls = null;
      }
      this.hdrEle = null;
      this.cntEle = null;
      this.tbItems = null;
      this.tbItem = null;
      this.tbPop = null;
      this.prevItem = null;
      this.popEle = null;
      this.bdrLine = null;
      this.content = null;
      this.dragItem = null;
      this.cloneElement = null;
      this.draggingItems = [];
      if (this.draggableItems && this.draggableItems.length > 0) {
        for (var i = 0; i < this.draggableItems.length; i++) {
          this.draggableItems[i].destroy();
          this.draggableItems[i] = null;
        }
        this.draggableItems = [];
      }
      _super.prototype.destroy.call(this);
      this.trigger("destroyed");
    };
    Tab2.prototype.refresh = function() {
      if (this.isReact) {
        this.clearTemplate();
      }
      _super.prototype.refresh.call(this);
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Tab2.prototype.refreshOverflow = function() {
      if (!isNullOrUndefined(this.tbObj)) {
        this.tbObj.refreshOverflow();
      }
    };
    Tab2.prototype.preRender = function() {
      var nested = closest(this.element, "." + CLS_CONTENT2);
      this.prevIndex = 0;
      this.isNested = false;
      this.isPopup = false;
      this.initRender = true;
      this.isSwiped = false;
      this.itemIndexArray = [];
      this.templateEle = [];
      if (this.allowDragAndDrop) {
        this.dragArea = !isNullOrUndefined(this.dragArea) ? this.dragArea : "#" + this.element.id + " " + ("." + CLS_HEADER2);
      }
      if (!isNullOrUndefined(nested)) {
        nested.parentElement.classList.add(CLS_NEST2);
        this.isNested = true;
      }
      var name = Browser.info.name;
      var css = name === "msie" ? "e-ie" : name === "edge" ? "e-edge" : name === "safari" ? "e-safari" : "";
      setStyleAttribute(this.element, {
        "width": formatUnit(this.width),
        "height": formatUnit(this.height)
      });
      this.setCssClass(this.element, this.cssClass, true);
      attributes(this.element, {
        "aria-disabled": "false"
      });
      this.setCssClass(this.element, css, true);
      this.updatePopAnimationConfig();
    };
    Tab2.prototype.render = function() {
      var _this = this;
      this.btnCls = this.createElement("span", {
        className: CLS_ICONS + " " + CLS_ICON_CLOSE,
        attrs: {
          title: this.title
        }
      });
      this.tabId = this.element.id.length > 0 ? "-" + this.element.id : getRandomId();
      this.renderContainer();
      this.wireEvents();
      this.initRender = false;
      if (this.isReact && this.portals && this.portals.length > 0) {
        this.renderReactTemplates(function() {
          _this.refreshOverflow();
          _this.refreshActiveBorder();
        });
      }
    };
    Tab2.prototype.renderContainer = function() {
      var ele = this.element;
      this.items.forEach(function(item, index) {
        if (isNullOrUndefined(item.id) && !isNullOrUndefined(item.setProperties)) {
          item.setProperties({
            id: TABITEMPREFIX + index.toString()
          }, true);
        }
      });
      if (this.items.length > 0 && ele.children.length === 0) {
        ele.appendChild(this.createElement("div", {
          className: CLS_CONTENT2
        }));
        this.setOrientation(this.headerPlacement, this.createElement("div", {
          className: CLS_HEADER2
        }));
        this.isTemplate = false;
      } else if (this.element.children.length > 0) {
        this.isTemplate = true;
        ele.classList.add(CLS_TEMPLATE2);
        var header = ele.querySelector("." + CLS_HEADER2);
        if (header && this.headerPlacement === "Bottom") {
          this.setOrientation(this.headerPlacement, header);
        }
      }
      if (!isNullOrUndefined(select("." + CLS_HEADER2, this.element)) && !isNullOrUndefined(select("." + CLS_CONTENT2, this.element))) {
        this.renderHeader();
        this.tbItems = select("." + CLS_HEADER2 + " ." + CLS_TB_ITEMS, this.element);
        if (!isNullOrUndefined(this.tbItems)) {
          rippleEffect(this.tbItems, {
            selector: ".e-tab-wrap"
          });
        }
        this.renderContent();
        if (selectAll("." + CLS_TB_ITEM, this.element).length > 0) {
          this.tbItems = select("." + CLS_HEADER2 + " ." + CLS_TB_ITEMS, this.element);
          this.bdrLine = this.createElement("div", {
            className: CLS_INDICATOR + " " + CLS_HIDDEN2 + " " + CLS_IGNORE
          });
          var scrCnt = select("." + this.scrCntClass, this.tbItems);
          if (!isNullOrUndefined(scrCnt)) {
            scrCnt.insertBefore(this.bdrLine, scrCnt.firstChild);
          } else {
            this.tbItems.insertBefore(this.bdrLine, this.tbItems.firstChild);
          }
          this.setContentHeight(true);
          this.select(this.selectedItem);
        }
        this.setRTL(this.enableRtl);
      }
    };
    Tab2.prototype.renderHeader = function() {
      var _this = this;
      var hdrPlace = this.headerPlacement;
      var tabItems = [];
      this.hdrEle = this.getTabHeader();
      this.addVerticalClass();
      if (!this.isTemplate) {
        tabItems = this.parseObject(this.items, 0);
      } else {
        if (this.element.children.length > 1 && this.element.children[1].classList.contains(CLS_HEADER2)) {
          this.setProperties({
            headerPlacement: "Bottom"
          }, true);
        }
        var count = this.hdrEle.children.length;
        var hdrItems = [];
        for (var i = 0; i < count; i++) {
          hdrItems.push(this.hdrEle.children.item(i));
        }
        if (count > 0) {
          var tabItems_1 = this.createElement("div", {
            className: CLS_ITEMS2
          });
          this.hdrEle.appendChild(tabItems_1);
          hdrItems.forEach(function(item, index) {
            _this.lastIndex = index;
            var attr = {
              className: CLS_ITEM3,
              id: CLS_ITEM3 + _this.tabId + "_" + index
            };
            var txt = _this.createElement("span", {
              className: CLS_TEXT,
              attrs: {
                "role": "presentation"
              }
            }).outerHTML;
            var cont = _this.createElement("div", {
              className: CLS_TEXT_WRAP,
              innerHTML: txt + _this.btnCls.outerHTML
            }).outerHTML;
            var wrap = _this.createElement("div", {
              className: CLS_WRAP,
              innerHTML: cont,
              attrs: {
                role: "tab",
                tabIndex: "-1",
                "aria-selected": "false",
                "aria-controls": CLS_CONTENT2 + _this.tabId + "_" + index,
                "aria-disabled": "false"
              }
            });
            wrap.querySelector("." + CLS_TEXT).appendChild(item);
            tabItems_1.appendChild(_this.createElement("div", attr));
            selectAll("." + CLS_ITEM3, tabItems_1)[index].appendChild(wrap);
          });
        }
      }
      this.tbObj = new Toolbar({
        width: hdrPlace === "Left" || hdrPlace === "Right" ? "auto" : "100%",
        height: hdrPlace === "Left" || hdrPlace === "Right" ? "100%" : "auto",
        overflowMode: this.overflowMode,
        items: tabItems.length !== 0 ? tabItems : [],
        clicked: this.clickHandler.bind(this),
        scrollStep: this.scrollStep,
        enableHtmlSanitizer: this.enableHtmlSanitizer,
        cssClass: this.cssClass
      });
      this.tbObj.isStringTemplate = true;
      this.tbObj.createElement = this.createElement;
      this.tbObj.appendTo(this.hdrEle);
      attributes(this.hdrEle, {
        role: "tablist"
      });
      if (!isNullOrUndefined(this.element.getAttribute("aria-label"))) {
        this.hdrEle.setAttribute("aria-label", this.element.getAttribute("aria-label"));
        this.element.removeAttribute("aria-label");
      } else if (!isNullOrUndefined(this.element.getAttribute("aria-labelledby"))) {
        this.hdrEle.setAttribute("aria-labelledby", this.element.getAttribute("aria-labelledby"));
        this.element.removeAttribute("aria-labelledby");
      }
      this.setCloseButton(this.showCloseButton);
      var toolbarHeader = this.tbObj.element.querySelector("." + CLS_TB_ITEMS);
      if (!isNullOrUndefined(toolbarHeader)) {
        if (isNullOrUndefined(toolbarHeader.id) || toolbarHeader.id === "") {
          toolbarHeader.id = this.element.id + "_tab_header_items";
        }
      }
    };
    Tab2.prototype.createContentElement = function(index) {
      var contentElement = this.createElement("div", {
        id: CLS_CONTENT2 + this.tabId + "_" + index,
        className: CLS_ITEM3,
        attrs: {
          "role": "tabpanel",
          "aria-labelledby": CLS_ITEM3 + this.tabId + "_" + index
        }
      });
      if (["Dynamic", "Demand"].indexOf(this.loadOn) !== -1 || this.loadOn === "Init" && index === this.selectedItem) {
        addClass([contentElement], CLS_ACTIVE2);
      }
      return contentElement;
    };
    Tab2.prototype.renderContent = function() {
      this.cntEle = select("." + CLS_CONTENT2, this.element);
      var hdrItem = selectAll("." + CLS_TB_ITEM, this.element);
      if (this.isTemplate) {
        this.cnt = this.cntEle.children.length > 0 ? this.cntEle.innerHTML : "";
        var contents = this.cntEle.children;
        for (var i = 0; i < hdrItem.length; i++) {
          if (contents.length - 1 >= i) {
            addClass([contents.item(i)], CLS_ITEM3);
            attributes(contents.item(i), {
              "role": "tabpanel",
              "aria-labelledby": CLS_ITEM3 + this.tabId + "_" + i
            });
            contents.item(i).id = CLS_CONTENT2 + this.tabId + "_" + i;
          }
        }
      } else {
        if (selectAll("." + CLS_TB_ITEM, this.element).length > 0) {
          if (this.loadOn === "Init") {
            for (var i = 0; i < this.itemIndexArray.length; i++) {
              if (this.itemIndexArray[i]) {
                this.cntEle.appendChild(this.createContentElement(Number(this.extIndex(this.itemIndexArray[i]))));
              }
            }
          } else if (this.loadOn === "Dynamic") {
            this.cntEle.appendChild(this.createContentElement(this.selectedItem > 0 ? this.selectedItem : Number(this.extIndex(this.itemIndexArray[0]))));
          }
        }
      }
    };
    Tab2.prototype.reRenderItems = function() {
      this.renderContainer();
      if (!isNullOrUndefined(this.cntEle)) {
        this.bindSwipeEvents();
      }
    };
    Tab2.prototype.parseObject = function(items, index) {
      var _this = this;
      var tbItems = Array.prototype.slice.call(selectAll(".e-tab-header ." + CLS_TB_ITEM, this.element));
      var maxId = this.lastIndex;
      if (!this.isReplace && tbItems.length > 0) {
        maxId = this.getMaxIndicesFromItems(tbItems);
      }
      var tItems = [];
      var txtWrapEle;
      var spliceArray = [];
      var i = 0;
      items.forEach(function(item, i2) {
        var pos = isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconPosition) ? "" : item.header.iconPosition;
        var css = isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconCss) ? "" : item.header.iconCss;
        if (isNullOrUndefined(item.headerTemplate) && (isNullOrUndefined(item.header) || isNullOrUndefined(item.header.text) || item.header.text.length === 0 && css === "")) {
          spliceArray.push(i2);
          return;
        }
        var txt = item.headerTemplate || item.header.text;
        if (typeof txt === "string" && _this.enableHtmlSanitizer) {
          txt = SanitizeHtmlHelper.sanitize(txt);
        }
        var itemIndex;
        if (_this.isReplace && !isNullOrUndefined(_this.tbId) && _this.tbId !== "") {
          itemIndex = parseInt(_this.tbId.substring(_this.tbId.lastIndexOf("_") + 1), 10);
          _this.tbId = "";
        } else {
          itemIndex = index + i2;
        }
        _this.lastIndex = tbItems.length === 0 ? i2 : _this.isReplace ? itemIndex : maxId + 1 + i2;
        var disabled = item.disabled ? " " + CLS_DISABLE5 + " " + CLS_OVERLAY3 : "";
        var hidden = item.visible === false ? " " + CLS_HIDDEN2 : "";
        txtWrapEle = _this.createElement("div", {
          className: CLS_TEXT,
          attrs: {
            "role": "presentation"
          }
        });
        var tHtml = txt instanceof Object ? txt.outerHTML : txt;
        var txtEmpty = !isNullOrUndefined(tHtml) && tHtml !== "";
        if (!isNullOrUndefined(txt.tagName)) {
          txtWrapEle.appendChild(txt);
        } else {
          _this.headerTextCompile(txtWrapEle, txt, i2);
        }
        var tEle;
        var icon = _this.createElement("span", {
          className: CLS_ICONS + " " + CLS_TAB_ICON + " " + CLS_ICON + "-" + pos + " " + css
        });
        var tCont = _this.createElement("div", {
          className: CLS_TEXT_WRAP
        });
        tCont.appendChild(txtWrapEle);
        if (txt !== "" && txt !== void 0 && css !== "") {
          if (pos === "left" || pos === "top") {
            tCont.insertBefore(icon, tCont.firstElementChild);
          } else {
            tCont.appendChild(icon);
          }
          tEle = txtWrapEle;
          _this.isIconAlone = false;
        } else {
          tEle = css === "" ? txtWrapEle : icon;
          if (tEle === icon) {
            detach(txtWrapEle);
            tCont.appendChild(icon);
            _this.isIconAlone = true;
          }
        }
        var tabIndex = isNullOrUndefined(item.tabIndex) ? "-1" : item.tabIndex.toString();
        var wrapAttrs = item.disabled ? {
          role: "tab",
          "aria-disabled": "true"
        } : {
          tabIndex,
          "data-tabindex": tabIndex,
          role: "tab",
          "aria-selected": "false",
          "aria-disabled": "false"
        };
        tCont.appendChild(_this.btnCls.cloneNode(true));
        var wrap = _this.createElement("div", {
          className: CLS_WRAP,
          attrs: wrapAttrs
        });
        wrap.appendChild(tCont);
        if (_this.itemIndexArray instanceof Array) {
          _this.itemIndexArray.splice(index + i2, 0, CLS_ITEM3 + _this.tabId + "_" + _this.lastIndex);
        }
        var attrObj = {
          id: CLS_ITEM3 + _this.tabId + "_" + _this.lastIndex,
          "data-id": item.id
        };
        var tItem = {
          htmlAttributes: attrObj,
          template: wrap
        };
        tItem.cssClass = (item.cssClass !== void 0 ? item.cssClass : " ") + " " + disabled + " " + hidden + " " + (css !== "" ? "e-i" + pos : "") + " " + (!txtEmpty ? CLS_ICON : "");
        if (pos === "top" || pos === "bottom") {
          _this.element.classList.add("e-vertical-icon");
        }
        tItems.push(tItem);
        i2++;
      });
      if (!this.isAdd) {
        spliceArray.forEach(function(spliceItemIndex) {
          _this.items.splice(spliceItemIndex, 1);
        });
      }
      if (this.isIconAlone) {
        this.element.classList.add(CLS_ICON_TAB);
      } else {
        this.element.classList.remove(CLS_ICON_TAB);
      }
      return tItems;
    };
    Tab2.prototype.removeActiveClass = function() {
      var tabHeader = this.getTabHeader();
      if (tabHeader) {
        var tabItems = selectAll("." + CLS_TB_ITEM + "." + CLS_ACTIVE2, tabHeader);
        [].slice.call(tabItems).forEach(function(node) {
          return node.classList.remove(CLS_ACTIVE2);
        });
        [].slice.call(tabItems).forEach(function(node) {
          return node.firstElementChild.setAttribute("aria-selected", "false");
        });
      }
    };
    Tab2.prototype.checkPopupOverflow = function(ele) {
      this.tbPop = select("." + CLS_TB_POP, this.element);
      var popIcon = select(".e-hor-nav", this.element);
      var tbrItems = select("." + CLS_TB_ITEMS, this.element);
      var lastChild = tbrItems.lastChild;
      var isOverflow = false;
      if (!this.isVertical() && (this.enableRtl && popIcon.offsetLeft + popIcon.offsetWidth > tbrItems.offsetLeft || !this.enableRtl && popIcon.offsetLeft < tbrItems.offsetWidth)) {
        isOverflow = true;
      } else if (this.isVertical() && popIcon.offsetTop < lastChild.offsetTop + lastChild.offsetHeight) {
        isOverflow = true;
      }
      if (isOverflow) {
        ele.classList.add(CLS_TB_POPUP);
        this.tbPop.insertBefore(ele, selectAll("." + CLS_TB_POPUP, this.tbPop)[0]);
      }
      return true;
    };
    Tab2.prototype.popupHandler = function(target) {
      var ripEle = target.querySelector(".e-ripple-element");
      if (!isNullOrUndefined(ripEle)) {
        ripEle.outerHTML = "";
        target.querySelector("." + CLS_WRAP).classList.remove("e-ripple");
      }
      this.tbItem = selectAll("." + CLS_TB_ITEMS + " ." + CLS_TB_ITEM, this.hdrEle);
      var lastChild = this.tbItem[this.tbItem.length - 1];
      if (this.tbItem.length !== 0) {
        target.classList.remove(CLS_TB_POPUP);
        target.removeAttribute("style");
        this.tbItems.appendChild(target);
        this.actEleId = target.id;
        if (this.checkPopupOverflow(lastChild)) {
          var prevEle = this.tbItems.lastChild.previousElementSibling;
          this.checkPopupOverflow(prevEle);
        }
        this.isPopup = true;
      }
      return selectAll("." + CLS_TB_ITEM, this.tbItems).length - 1;
    };
    Tab2.prototype.setCloseButton = function(val) {
      var trg = select("." + CLS_HEADER2, this.element);
      if (val === true) {
        trg.classList.add(CLS_CLOSE_SHOW);
      } else {
        trg.classList.remove(CLS_CLOSE_SHOW);
      }
      this.refreshOverflow();
      this.refreshActiveTabBorder();
    };
    Tab2.prototype.prevCtnAnimation = function(prev, current) {
      var animation;
      var checkRTL = this.enableRtl || this.element.classList.contains(CLS_RTL5);
      if (this.isPopup || prev <= current) {
        if (this.animation.previous.effect === "SlideLeftIn") {
          animation = {
            name: "SlideLeftOut",
            duration: this.animation.previous.duration,
            timingFunction: this.animation.previous.easing
          };
        } else {
          animation = null;
        }
      } else {
        if (this.animation.next.effect === "SlideRightIn") {
          animation = {
            name: "SlideRightOut",
            duration: this.animation.next.duration,
            timingFunction: this.animation.next.easing
          };
        } else {
          animation = null;
        }
      }
      return animation;
    };
    Tab2.prototype.triggerPrevAnimation = function(oldCnt, prevIndex) {
      var _this = this;
      var animateObj = this.prevCtnAnimation(prevIndex, this.selectedItem);
      if (!isNullOrUndefined(animateObj)) {
        animateObj.begin = function() {
          setStyleAttribute(oldCnt, {
            "position": "absolute"
          });
          oldCnt.classList.add(CLS_PROGRESS);
          oldCnt.classList.add("e-view");
        };
        animateObj.end = function() {
          oldCnt.style.display = "none";
          oldCnt.classList.remove(CLS_ACTIVE2);
          oldCnt.classList.remove(CLS_PROGRESS);
          oldCnt.classList.remove("e-view");
          setStyleAttribute(oldCnt, {
            "display": "",
            "position": ""
          });
          if (oldCnt.childNodes.length === 0 && !_this.isTemplate) {
            detach(oldCnt);
          }
        };
        new Animation(animateObj).animate(oldCnt);
      } else {
        oldCnt.classList.remove(CLS_ACTIVE2);
      }
    };
    Tab2.prototype.triggerAnimation = function(id, value) {
      var _this = this;
      var prevIndex = this.prevIndex;
      var oldCnt;
      var itemCollection = [].slice.call(this.element.querySelector("." + CLS_CONTENT2).children);
      itemCollection.forEach(function(item) {
        if (item.id === _this.prevActiveEle) {
          oldCnt = item;
        }
      });
      var prevEle = this.tbItem[prevIndex];
      var newCnt = this.getTrgContent(this.cntEle, this.extIndex(id));
      if (isNullOrUndefined(oldCnt) && !isNullOrUndefined(prevEle)) {
        var idNo = this.extIndex(prevEle.id);
        oldCnt = this.getTrgContent(this.cntEle, idNo);
      }
      if (!isNullOrUndefined(newCnt)) {
        this.prevActiveEle = newCnt.id;
      }
      var isPrevent = isNullOrUndefined(this.animation) || isNullOrUndefined(this.animation.next.effect) || isNullOrUndefined(this.animation.previous.effect) || this.animation.previous.effect === "None" || this.animation.next.effect === "None";
      if (this.initRender || value === false || isPrevent) {
        if (oldCnt && oldCnt !== newCnt) {
          oldCnt.classList.remove(CLS_ACTIVE2);
        }
        return;
      }
      var cnt = select("." + CLS_CONTENT2, this.element);
      var animateObj;
      if (this.prevIndex > this.selectedItem && !this.isPopup) {
        var openEff = this.animation.previous.effect;
        animateObj = {
          name: openEff === "None" ? "" : openEff !== "SlideLeftIn" ? openEff : "SlideLeftIn",
          duration: this.animation.previous.duration === 0 && animationMode === "Enable" ? 600 : this.animation.previous.duration,
          timingFunction: this.animation.previous.easing
        };
      } else if (this.isPopup || this.prevIndex < this.selectedItem || this.prevIndex === this.selectedItem) {
        var clsEff = this.animation.next.effect;
        animateObj = {
          name: clsEff === "None" ? "" : clsEff !== "SlideRightIn" ? clsEff : "SlideRightIn",
          duration: this.animation.next.duration === 0 && animationMode === "Enable" ? 600 : this.animation.next.duration,
          timingFunction: this.animation.next.easing
        };
      }
      animateObj.progress = function() {
        cnt.classList.add(CLS_PROGRESS);
        _this.setActiveBorder();
      };
      animateObj.end = function() {
        cnt.classList.remove(CLS_PROGRESS);
        newCnt.classList.add(CLS_ACTIVE2);
      };
      if (!this.initRender && !isNullOrUndefined(oldCnt)) {
        this.triggerPrevAnimation(oldCnt, prevIndex);
      }
      this.isPopup = false;
      if (animateObj.name === "") {
        newCnt.classList.add(CLS_ACTIVE2);
      } else {
        new Animation(animateObj).animate(newCnt);
      }
    };
    Tab2.prototype.keyPressed = function(trg) {
      var trgParent = closest(trg, "." + CLS_HEADER2 + " ." + CLS_TB_ITEM);
      var trgIndex = this.getEleIndex(trgParent);
      if (!isNullOrUndefined(this.popEle) && trg.classList.contains("e-hor-nav")) {
        this.popEle.classList.contains(CLS_POPUP_OPEN) ? this.popObj.hide(this.hide) : this.popObj.show(this.show);
      } else if (trg.classList.contains("e-scroll-nav")) {
        trg.click();
      } else {
        if (!isNullOrUndefined(trgParent) && trgParent.classList.contains(CLS_ACTIVE2) === false) {
          this.selectTab(trgIndex, null, true);
          if (!isNullOrUndefined(this.popEle)) {
            this.popObj.hide(this.hide);
          }
        }
      }
    };
    Tab2.prototype.getTabHeader = function() {
      if (isNullOrUndefined(this.element)) {
        return void 0;
      }
      var headers = [].slice.call(this.element.children).filter(function(e) {
        return e.classList.contains(CLS_HEADER2);
      });
      if (headers.length > 0) {
        return headers[0];
      } else {
        var wrap = [].slice.call(this.element.children).filter(function(e) {
          return !e.classList.contains(CLS_BLA_TEM);
        })[0];
        if (!wrap) {
          return void 0;
        }
        return [].slice.call(wrap.children).filter(function(e) {
          return e.classList.contains(CLS_HEADER2);
        })[0];
      }
    };
    Tab2.prototype.getEleIndex = function(item) {
      return Array.prototype.indexOf.call(selectAll("." + CLS_TB_ITEM, this.getTabHeader()), item);
    };
    Tab2.prototype.extIndex = function(id) {
      return id.replace(CLS_ITEM3 + this.tabId + "_", "");
    };
    Tab2.prototype.getMaxIndicesFromItems = function(tbItems) {
      var _this = this;
      var idList = [];
      tbItems.forEach(function(item) {
        idList.push(_this.getIndexFromEle(item.id));
      });
      return Math.max.apply(Math, idList);
    };
    Tab2.prototype.expTemplateContent = function() {
      var _this = this;
      this.templateEle.forEach(function(eleStr) {
        if (!isNullOrUndefined(_this.element.querySelector(eleStr))) {
          document.body.appendChild(_this.element.querySelector(eleStr)).style.display = "none";
        }
      });
    };
    Tab2.prototype.templateCompile = function(ele, cnt, index) {
      var tempEle = this.createElement("div");
      this.compileElement(tempEle, cnt, "content", index);
      if (tempEle.childNodes.length !== 0) {
        ele.appendChild(tempEle);
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Tab2.prototype.compileElement = function(ele, val, prop, index) {
      var templateFn;
      if (typeof val === "string") {
        val = val.trim();
        if (this.isVue) {
          templateFn = compile(this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(val) : val);
        } else {
          ele.innerHTML = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(val) : val;
        }
      } else {
        templateFn = compile(val);
      }
      var templateFUN;
      if (!isNullOrUndefined(templateFn)) {
        templateFUN = templateFn({}, this, prop);
      }
      if (!isNullOrUndefined(templateFn) && templateFUN.length > 0) {
        [].slice.call(templateFUN).forEach(function(el) {
          ele.appendChild(el);
        });
      }
    };
    Tab2.prototype.headerTextCompile = function(element2, text, index) {
      this.compileElement(element2, text, "headerTemplate", index);
    };
    Tab2.prototype.getContent = function(ele, cnt, callType, index) {
      var eleStr;
      cnt = isNullOrUndefined(cnt) ? "" : cnt;
      if (typeof cnt === "string" || isNullOrUndefined(cnt.innerHTML)) {
        if (typeof cnt === "string" && this.enableHtmlSanitizer) {
          cnt = SanitizeHtmlHelper.sanitize(cnt);
        }
        if (cnt[0] === "." || cnt[0] === "#") {
          if (document.querySelectorAll(cnt).length) {
            var eleVal = document.querySelector(cnt);
            eleStr = eleVal.outerHTML.trim();
            if (callType === "clone") {
              ele.appendChild(eleVal.cloneNode(true));
            } else {
              ele.appendChild(eleVal);
              eleVal.style.display = "";
            }
          } else {
            this.templateCompile(ele, cnt, index);
          }
        } else {
          this.templateCompile(ele, cnt, index);
        }
      } else {
        ele.appendChild(cnt);
      }
      if (!isNullOrUndefined(eleStr)) {
        if (this.templateEle.indexOf(cnt.toString()) === -1) {
          this.templateEle.push(cnt.toString());
        }
      }
    };
    Tab2.prototype.getTrgContent = function(cntEle, no) {
      var ele;
      if (this.element.classList.contains(CLS_NEST2)) {
        ele = select("." + CLS_NEST2 + "> ." + CLS_CONTENT2 + " > #" + CLS_CONTENT2 + this.tabId + "_" + no, this.element);
      } else {
        ele = this.findEle(cntEle.children, CLS_CONTENT2 + this.tabId + "_" + no);
      }
      return ele;
    };
    Tab2.prototype.findEle = function(items, key) {
      var ele;
      for (var i = 0; i < items.length; i++) {
        if (items[i].id === key) {
          ele = items[i];
          break;
        }
      }
      return ele;
    };
    Tab2.prototype.isVertical = function() {
      var isVertical = this.headerPlacement === "Left" || this.headerPlacement === "Right" ? true : false;
      this.scrCntClass = isVertical ? CLS_VSCRCNT : CLS_HSCRCNT;
      return isVertical;
    };
    Tab2.prototype.addVerticalClass = function() {
      if (this.isVertical()) {
        var tbPos = this.headerPlacement === "Left" ? CLS_VLEFT : CLS_VRIGHT;
        addClass([this.hdrEle], [CLS_VERTICAL2, tbPos]);
        if (!this.element.classList.contains(CLS_NEST2)) {
          addClass([this.element], [CLS_VTAB, tbPos]);
        } else {
          addClass([this.hdrEle], [CLS_VTAB, tbPos]);
        }
      }
      if (this.headerPlacement === "Bottom") {
        addClass([this.hdrEle], [CLS_HBOTTOM]);
      }
    };
    Tab2.prototype.updatePopAnimationConfig = function() {
      this.show = {
        name: this.isVertical() ? "FadeIn" : "SlideDown",
        duration: 100
      };
      this.hide = {
        name: this.isVertical() ? "FadeOut" : "SlideUp",
        duration: 100
      };
    };
    Tab2.prototype.changeOrientation = function(place) {
      this.setOrientation(place, this.hdrEle);
      var activeTab = this.hdrEle.querySelector("." + CLS_ACTIVE2);
      var isVertical = this.hdrEle.classList.contains(CLS_VERTICAL2) ? true : false;
      removeClass([this.element], [CLS_VTAB]);
      removeClass([this.hdrEle], [CLS_VERTICAL2, CLS_VLEFT, CLS_VRIGHT]);
      if (isVertical !== this.isVertical()) {
        this.changeToolbarOrientation();
        if (!isNullOrUndefined(activeTab) && activeTab.classList.contains(CLS_TB_POPUP)) {
          this.popupHandler(activeTab);
        }
      }
      this.addVerticalClass();
      this.setActiveBorder();
      this.focusItem();
    };
    Tab2.prototype.focusItem = function() {
      var curActItem = select(" #" + CLS_ITEM3 + this.tabId + "_" + this.selectedItem, this.hdrEle);
      if (!isNullOrUndefined(curActItem)) {
        curActItem.firstElementChild.focus();
      }
    };
    Tab2.prototype.changeToolbarOrientation = function() {
      this.tbObj.setProperties({
        height: this.isVertical() ? "100%" : "auto",
        width: this.isVertical() ? "auto" : "100%"
      }, true);
      this.tbObj.changeOrientation();
      this.updatePopAnimationConfig();
    };
    Tab2.prototype.setOrientation = function(place, ele) {
      var headerPos = Array.prototype.indexOf.call(this.element.children, ele);
      var contentPos = Array.prototype.indexOf.call(this.element.children, this.element.querySelector("." + CLS_CONTENT2));
      if (place === "Bottom" && contentPos > headerPos) {
        this.element.appendChild(ele);
      } else {
        removeClass([ele], [CLS_HBOTTOM]);
        this.element.insertBefore(ele, select("." + CLS_CONTENT2, this.element));
      }
    };
    Tab2.prototype.setCssClass = function(ele, cls, val) {
      if (cls === "" || isNullOrUndefined(cls)) {
        return;
      }
      var list = cls.split(" ");
      for (var i = 0; i < list.length; i++) {
        if (val) {
          ele.classList.add(list[i]);
        } else {
          ele.classList.remove(list[i]);
        }
      }
    };
    Tab2.prototype.loadContentInitMode = function(ele) {
      if (!ele) {
        return;
      }
      if (this.loadOn === "Init") {
        for (var i = 0; i < this.items.length; i++) {
          if (this.cntEle.children.item(i)) {
            this.getContent(this.cntEle.children.item(i), this.items[i].content, "render", i);
          }
        }
      }
    };
    Tab2.prototype.loadContentElement = function() {
      if (!this.isTemplate) {
        var ele = this.cntEle.children.item(0);
        this.loadContentInitMode(ele);
      }
    };
    Tab2.prototype.setContentHeight = function(val) {
      if (this.element.classList.contains(CLS_FILL)) {
        removeClass([this.element], [CLS_FILL]);
      }
      if (isNullOrUndefined(this.cntEle)) {
        return;
      }
      var hdrEle = this.getTabHeader();
      if (this.heightAdjustMode === "None") {
        this.loadContentElement();
        if (this.height === "auto") {
          return;
        } else {
          if (!this.isVertical()) {
            setStyleAttribute(this.cntEle, {
              "height": this.element.clientHeight - hdrEle.offsetHeight + "px"
            });
          }
        }
      } else if (this.heightAdjustMode === "Fill") {
        addClass([this.element], [CLS_FILL]);
        setStyleAttribute(this.element, {
          "height": "100%"
        });
        this.loadContentElement();
        this.cntEle.style.height = "calc(100% - " + this.hdrEle.offsetHeight + "px)";
      } else if (this.heightAdjustMode === "Auto") {
        if (this.isTemplate === true) {
          var cnt = selectAll("." + CLS_CONTENT2 + " > ." + CLS_ITEM3, this.element);
          for (var i = 0; i < cnt.length; i++) {
            cnt[i].style.display = "block";
            cnt[i].style.visibility = "visible";
            this.maxHeight = Math.max(this.maxHeight, this.getHeight(cnt[i]));
            cnt[i].style.removeProperty("display");
            cnt[i].style.removeProperty("visibility");
          }
        } else {
          this.cntEle = select("." + CLS_CONTENT2, this.element);
          if (val === true && this.loadOn === "Demand") {
            this.cntEle.appendChild(this.createContentElement(Number(this.extIndex(this.itemIndexArray[0]))));
          }
          var ele = this.cntEle.children.item(0);
          for (var i = 0; i < this.items.length; i++) {
            this.getContent(ele, this.items[i].content, "clone", i);
            this.maxHeight = Math.max(this.maxHeight, this.getHeight(ele));
            while (ele.firstChild) {
              ele.removeChild(ele.firstChild);
            }
          }
          if (this.isReact || this.isAngular || this.isVue) {
            this.clearTemplate(["content"]);
          }
          this.templateEle = [];
          if (this.loadOn === "Demand") {
            this.getContent(ele, this.items[0].content, "render", 0);
          }
          this.loadContentInitMode(ele);
          if (this.prevIndex !== this.selectedItem) {
            ele.classList.remove(CLS_ACTIVE2);
          }
        }
        setStyleAttribute(this.cntEle, {
          "height": this.maxHeight + "px"
        });
      } else {
        this.loadContentElement();
        setStyleAttribute(this.cntEle, {
          "height": "auto"
        });
      }
    };
    Tab2.prototype.getHeight = function(ele) {
      var cs = window.getComputedStyle(ele);
      return ele.offsetHeight + parseFloat(cs.getPropertyValue("padding-top")) + parseFloat(cs.getPropertyValue("padding-bottom")) + parseFloat(cs.getPropertyValue("margin-top")) + parseFloat(cs.getPropertyValue("margin-bottom"));
    };
    Tab2.prototype.setActiveBorder = function() {
      var trgHdrEle = this.getTabHeader();
      var trg = select("." + CLS_TB_ITEM + "." + CLS_ACTIVE2, trgHdrEle);
      if (isNullOrUndefined(trg)) {
        return;
      }
      if (!this.reorderActiveTab) {
        if (trg.classList.contains(CLS_TB_POPUP) && !this.bdrLine.classList.contains(CLS_HIDDEN2)) {
          this.bdrLine.classList.add(CLS_HIDDEN2);
        }
        if (trgHdrEle && !trgHdrEle.classList.contains(CLS_REORDER_ACTIVE_ITEM)) {
          trgHdrEle.classList.add(CLS_REORDER_ACTIVE_ITEM);
        }
      } else if (trgHdrEle) {
        trgHdrEle.classList.remove(CLS_REORDER_ACTIVE_ITEM);
      }
      var root = closest(trg, "." + CLS_TAB);
      if (this.element !== root) {
        return;
      }
      this.tbItems = select("." + CLS_TB_ITEMS, trgHdrEle);
      var bar = select("." + CLS_INDICATOR, trgHdrEle);
      var scrollCnt = select("." + CLS_TB_ITEMS + " ." + this.scrCntClass, trgHdrEle);
      if (this.isVertical()) {
        setStyleAttribute(bar, {
          "left": "",
          "right": ""
        });
        var tbHeight = isNullOrUndefined(scrollCnt) ? this.tbItems.offsetHeight : scrollCnt.offsetHeight;
        if (tbHeight !== 0) {
          setStyleAttribute(bar, {
            "top": trg.offsetTop + "px",
            "height": trg.offsetHeight + "px"
          });
        } else {
          setStyleAttribute(bar, {
            "top": 0,
            "height": 0
          });
        }
      } else {
        if (this.overflowMode === "MultiRow") {
          var top_1 = this.headerPlacement === "Bottom" ? trg.offsetTop : trg.offsetHeight + trg.offsetTop;
          setStyleAttribute(bar, {
            "top": top_1 + "px",
            "height": ""
          });
        } else {
          setStyleAttribute(bar, {
            "top": "",
            "height": ""
          });
        }
        var tbWidth = isNullOrUndefined(scrollCnt) ? this.tbItems.offsetWidth : scrollCnt.offsetWidth;
        if (tbWidth !== 0) {
          setStyleAttribute(bar, {
            "left": trg.offsetLeft + "px",
            "right": tbWidth - (trg.offsetLeft + trg.offsetWidth) + "px"
          });
        } else {
          setStyleAttribute(bar, {
            "left": "auto",
            "right": "auto"
          });
        }
      }
      if (!isNullOrUndefined(this.bdrLine) && !trg.classList.contains(CLS_TB_POPUP)) {
        this.bdrLine.classList.remove(CLS_HIDDEN2);
      }
    };
    Tab2.prototype.setActive = function(value, skipDataBind, isInteracted) {
      if (skipDataBind === void 0) {
        skipDataBind = false;
      }
      if (isInteracted === void 0) {
        isInteracted = false;
      }
      this.tbItem = selectAll("." + CLS_TB_ITEM, this.getTabHeader());
      var trg = this.tbItem[value];
      if (value < 0 || isNaN(value) || this.tbItem.length === 0 || !isNullOrUndefined(trg) && trg.classList.contains(CLS_DISABLE5)) {
        return;
      }
      if (value >= 0 && !skipDataBind) {
        this.allowServerDataBinding = false;
        this.setProperties({
          selectedItem: value
        }, true);
        this.allowServerDataBinding = true;
        if (!this.initRender) {
          this.serverDataBind();
        }
      }
      if (trg.classList.contains(CLS_ACTIVE2)) {
        this.setActiveBorder();
        return;
      }
      if (!this.isTemplate) {
        attributes(trg.firstElementChild, {
          "aria-controls": CLS_CONTENT2 + this.tabId + "_" + this.extIndex(trg.id)
        });
      }
      var id = trg.id;
      this.removeActiveClass();
      trg.classList.add(CLS_ACTIVE2);
      trg.firstElementChild.setAttribute("aria-selected", "true");
      var no = Number(this.extIndex(id));
      if (isNullOrUndefined(this.prevActiveEle)) {
        this.prevActiveEle = CLS_CONTENT2 + this.tabId + "_" + no;
      }
      if (this.isTemplate) {
        if (select("." + CLS_CONTENT2, this.element).children.length > 0) {
          var trg_1 = this.findEle(select("." + CLS_CONTENT2, this.element).children, CLS_CONTENT2 + this.tabId + "_" + no);
          if (!isNullOrUndefined(trg_1)) {
            trg_1.classList.add(CLS_ACTIVE2);
          }
          this.triggerAnimation(id, this.enableAnimation);
        }
      } else {
        this.cntEle = select("." + CLS_TAB + " > ." + CLS_CONTENT2, this.element);
        while (this.loadOn === "Dynamic" && this.cntEle.firstElementChild) {
          this.cntEle.removeChild(this.cntEle.firstElementChild);
        }
        var item = this.getTrgContent(this.cntEle, this.extIndex(id));
        if (isNullOrUndefined(item)) {
          this.cntEle.appendChild(this.createElement("div", {
            id: CLS_CONTENT2 + this.tabId + "_" + this.extIndex(id),
            className: CLS_ITEM3 + " " + CLS_ACTIVE2,
            attrs: {
              role: "tabpanel",
              "aria-labelledby": CLS_ITEM3 + this.tabId + "_" + this.extIndex(id)
            }
          }));
          var eleTrg = this.getTrgContent(this.cntEle, this.extIndex(id));
          var itemIndex = Array.prototype.indexOf.call(this.itemIndexArray, id);
          this.getContent(eleTrg, this.items[itemIndex].content, "render", itemIndex);
        } else {
          item.classList.add(CLS_ACTIVE2);
        }
        this.triggerAnimation(id, this.enableAnimation);
      }
      this.setActiveBorder();
      this.refreshItemVisibility(trg);
      if (!this.initRender && !skipDataBind) {
        var eventArg = {
          previousItem: this.prevItem,
          previousIndex: this.prevIndex,
          selectedItem: trg,
          selectedIndex: value,
          selectedContent: select("#" + CLS_CONTENT2 + this.tabId + "_" + this.selectingID, this.content),
          isSwiped: this.isSwiped,
          isInteracted,
          preventFocus: false
        };
        this.trigger("selected", eventArg, function(selectEventArgs) {
          if (!selectEventArgs.preventFocus) {
            trg.firstElementChild.focus();
          }
        });
      }
    };
    Tab2.prototype.setItems = function(items) {
      this.isReplace = true;
      this.tbItems = select("." + CLS_TB_ITEMS, this.getTabHeader());
      this.tbObj.items = this.parseObject(items, 0);
      this.tbObj.dataBind();
      this.isReplace = false;
    };
    Tab2.prototype.setRTL = function(value) {
      this.tbObj.enableRtl = value;
      this.tbObj.dataBind();
      this.setCssClass(this.element, CLS_RTL5, value);
      this.refreshActiveBorder();
    };
    Tab2.prototype.refreshActiveBorder = function() {
      if (!isNullOrUndefined(this.bdrLine)) {
        this.bdrLine.classList.add(CLS_HIDDEN2);
      }
      this.setActiveBorder();
    };
    Tab2.prototype.showPopup = function(config) {
      var tbPop = select(".e-popup.e-toolbar-pop", this.hdrEle);
      if (tbPop && tbPop.classList.contains("e-popup-close")) {
        var tbPopObj = tbPop && tbPop.ej2_instances[0];
        tbPopObj.position.X = this.headerPlacement === "Left" || this.element.classList.contains(CLS_RTL5) ? "left" : "right";
        tbPopObj.dataBind();
        tbPopObj.show(config);
      }
    };
    Tab2.prototype.bindDraggable = function() {
      var _this = this;
      if (this.allowDragAndDrop) {
        var tabHeader = this.element.querySelector("." + CLS_HEADER2);
        if (tabHeader) {
          var items = Array.prototype.slice.call(tabHeader.querySelectorAll("." + CLS_TB_ITEM));
          items.forEach(function(element2) {
            _this.initializeDrag(element2);
          });
        }
      }
    };
    Tab2.prototype.bindSwipeEvents = function() {
      if (this.swipeMode !== "None") {
        this.touchModule = new Touch(this.cntEle, {
          swipe: this.swipeHandler.bind(this)
        });
      }
    };
    Tab2.prototype.wireEvents = function() {
      this.bindDraggable();
      window.addEventListener("resize", this.resizeContext);
      EventHandler.add(this.element, "mouseover", this.hoverHandler, this);
      EventHandler.add(this.element, "keydown", this.spaceKeyDown, this);
      if (!isNullOrUndefined(this.cntEle)) {
        this.bindSwipeEvents();
      }
      this.keyModule = new KeyboardEvents(this.element, {
        keyAction: this.keyHandler.bind(this),
        keyConfigs: this.keyConfigs
      });
      this.tabKeyModule = new KeyboardEvents(this.element, {
        keyAction: this.keyHandler.bind(this),
        keyConfigs: {
          openPopup: "shift+f10",
          tab: "tab",
          shiftTab: "shift+tab"
        },
        eventName: "keydown"
      });
    };
    Tab2.prototype.unWireEvents = function() {
      if (!isNullOrUndefined(this.keyModule)) {
        this.keyModule.destroy();
      }
      if (!isNullOrUndefined(this.tabKeyModule)) {
        this.tabKeyModule.destroy();
      }
      if (!isNullOrUndefined(this.cntEle) && !isNullOrUndefined(this.touchModule)) {
        this.touchModule.destroy();
        this.touchModule = null;
      }
      window.removeEventListener("resize", this.resizeContext);
      EventHandler.remove(this.element, "mouseover", this.hoverHandler);
      EventHandler.remove(this.element, "keydown", this.spaceKeyDown);
      this.element.classList.remove(CLS_RTL5);
      this.element.classList.remove(CLS_FOCUS);
    };
    Tab2.prototype.clickHandler = function(args) {
      this.element.classList.remove(CLS_FOCUS);
      var trg = args.originalEvent.target;
      var trgParent = closest(trg, "." + CLS_TB_ITEM);
      var trgIndex = this.getEleIndex(trgParent);
      if (trg.classList.contains(CLS_ICON_CLOSE)) {
        this.removeTab(trgIndex);
      } else if (this.isVertical() && closest(trg, "." + CLS_HOR_NAV)) {
        this.showPopup(this.show);
      } else {
        this.isPopup = false;
        if (!isNullOrUndefined(trgParent) && trgIndex !== this.selectedItem) {
          this.selectTab(trgIndex, args.originalEvent, true);
        }
      }
    };
    Tab2.prototype.swipeHandler = function(e) {
      if (e.velocity < 3 && isNullOrUndefined(e.originalEvent.changedTouches) || this.swipeMode === "Touch" && (e.originalEvent.type === "mouseup" || e.originalEvent.type === "mouseleave") || this.swipeMode === "Mouse" && e.originalEvent.type === "touchend" || this.swipeMode === "None") {
        return;
      }
      if (this.isNested) {
        this.element.setAttribute("data-swipe", "true");
      }
      var nestedTab = this.element.querySelector('[data-swipe="true"]');
      if (nestedTab) {
        nestedTab.removeAttribute("data-swipe");
        return;
      }
      this.isSwiped = true;
      if (e.swipeDirection === "Right" && this.selectedItem !== 0) {
        for (var k = this.selectedItem - 1; k >= 0; k--) {
          if (!this.tbItem[k].classList.contains(CLS_HIDDEN2)) {
            this.selectTab(k, null, true);
            break;
          }
        }
      } else if (e.swipeDirection === "Left" && this.selectedItem !== selectAll("." + CLS_TB_ITEM, this.element).length - 1) {
        for (var i = this.selectedItem + 1; i < this.tbItem.length; i++) {
          if (!this.tbItem[i].classList.contains(CLS_HIDDEN2)) {
            this.selectTab(i, null, true);
            break;
          }
        }
      }
      this.isSwiped = false;
    };
    Tab2.prototype.spaceKeyDown = function(e) {
      if (e.keyCode === 32 && e.which === 32 || e.keyCode === 35 && e.which === 35) {
        var clstHead = closest(e.target, "." + CLS_HEADER2);
        if (!isNullOrUndefined(clstHead)) {
          e.preventDefault();
        }
      }
    };
    Tab2.prototype.keyHandler = function(e) {
      if (this.element.classList.contains(CLS_DISABLE5)) {
        return;
      }
      this.element.classList.add(CLS_FOCUS);
      var trg = e.target;
      var tabHeader = this.getTabHeader();
      var actEle = select("." + CLS_ACTIVE2, tabHeader);
      this.popEle = select("." + CLS_TB_POP, tabHeader);
      if (!isNullOrUndefined(this.popEle)) {
        this.popObj = this.popEle.ej2_instances[0];
      }
      var item = closest(document.activeElement, "." + CLS_TB_ITEM);
      var trgParent = closest(trg, "." + CLS_TB_ITEM);
      switch (e.action) {
        case "space":
        case "enter":
          if (trg.parentElement.classList.contains(CLS_DISABLE5)) {
            return;
          }
          if (e.action === "enter" && trg.classList.contains("e-hor-nav")) {
            this.showPopup(this.show);
            break;
          }
          this.keyPressed(trg);
          break;
        case "tab":
        case "shiftTab":
          if (trg.classList.contains(CLS_WRAP) && closest(trg, "." + CLS_TB_ITEM).classList.contains(CLS_ACTIVE2) === false) {
            trg.setAttribute("tabindex", trg.getAttribute("data-tabindex"));
          }
          if (this.popObj && isVisible(this.popObj.element)) {
            this.popObj.hide(this.hide);
          }
          if (!isNullOrUndefined(actEle) && actEle.children.item(0).getAttribute("tabindex") === "-1") {
            actEle.children.item(0).setAttribute("tabindex", "0");
          }
          break;
        case "moveLeft":
        case "moveRight":
          if (!isNullOrUndefined(item)) {
            this.refreshItemVisibility(item);
          }
          break;
        case "openPopup":
          e.preventDefault();
          if (!isNullOrUndefined(this.popEle) && this.popEle.classList.contains(CLS_POPUP_CLOSE)) {
            this.popObj.show(this.show);
          }
          break;
        case "delete":
          if (this.showCloseButton === true && !isNullOrUndefined(trgParent)) {
            var nxtSib = trgParent.nextSibling;
            if (!isNullOrUndefined(nxtSib) && nxtSib.classList.contains(CLS_TB_ITEM)) {
              nxtSib.firstElementChild.focus();
            }
            this.removeTab(this.getEleIndex(trgParent));
          }
          this.setActiveBorder();
          break;
      }
    };
    Tab2.prototype.refreshItemVisibility = function(target) {
      var scrCnt = select("." + this.scrCntClass, this.tbItems);
      if (!this.isVertical() && !isNullOrUndefined(scrCnt)) {
        var scrBar = select(".e-hscroll-bar", this.tbItems);
        var scrStart = scrBar.scrollLeft;
        var scrEnd = scrStart + scrBar.offsetWidth;
        var eleStart = target.offsetLeft;
        var eleWidth = target.offsetWidth;
        var eleEnd = target.offsetLeft + target.offsetWidth;
        if (scrStart < eleStart && scrEnd < eleEnd) {
          var eleViewRange = scrEnd - eleStart;
          scrBar.scrollLeft = scrStart + (eleWidth - eleViewRange);
        } else {
          if (scrStart > eleStart && scrEnd > eleEnd) {
            var eleViewRange = eleEnd - scrStart;
            scrBar.scrollLeft = scrStart - (eleWidth - eleViewRange);
          }
        }
      } else {
        return;
      }
    };
    Tab2.prototype.getIndexFromEle = function(id) {
      return parseInt(id.substring(id.lastIndexOf("_") + 1), 10);
    };
    Tab2.prototype.hoverHandler = function(e) {
      var trg = e.target;
      if (!isNullOrUndefined(trg.classList) && trg.classList.contains(CLS_ICON_CLOSE)) {
        trg.setAttribute("title", new L10n("tab", {
          closeButtonTitle: this.title
        }, this.locale).getConstant("closeButtonTitle"));
      }
    };
    Tab2.prototype.evalOnPropertyChangeItems = function(newProp, oldProp) {
      var _this = this;
      if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {
        var changedProp = Object.keys(newProp.items);
        for (var i = 0; i < changedProp.length; i++) {
          var index = parseInt(Object.keys(newProp.items)[i], 10);
          var properties = Object.keys(newProp.items[index]);
          for (var j = 0; j < properties.length; j++) {
            var oldVal = Object(oldProp.items[index])[properties[j]];
            var newVal = Object(newProp.items[index])[properties[j]];
            var hdr = this.element.querySelectorAll("." + CLS_TB_ITEM)[index];
            var itemIndex = void 0;
            if (hdr && !isNullOrUndefined(hdr.id) && hdr.id !== "") {
              itemIndex = this.getIndexFromEle(hdr.id);
            } else {
              itemIndex = index;
            }
            var hdrItem = select("." + CLS_TB_ITEMS + " #" + CLS_ITEM3 + this.tabId + "_" + itemIndex, this.element);
            var cntItem = select("." + CLS_CONTENT2 + " #" + CLS_CONTENT2 + this.tabId + "_" + itemIndex, this.element);
            if (properties[j] === "header" || properties[j] === "headerTemplate") {
              var icon = isNullOrUndefined(this.items[index].header) || isNullOrUndefined(this.items[index].header.iconCss) ? "" : this.items[index].header.iconCss;
              var textVal = this.items[index].headerTemplate || this.items[index].header.text;
              if (properties[j] === "headerTemplate") {
                this.clearTabTemplate(hdrItem, properties[j], CLS_TB_ITEM);
              }
              if (textVal === "" && icon === "") {
                this.removeTab(index);
              } else {
                this.tbId = hdr.id;
                var arr = [];
                arr.push(this.items[index]);
                this.items.splice(index, 1);
                this.itemIndexArray.splice(index, 1);
                this.tbObj.items.splice(index, 1);
                var isHiddenEle = hdrItem.classList.contains(CLS_HIDDEN2);
                detach(hdrItem);
                this.isReplace = true;
                this.addTab(arr, index);
                if (isHiddenEle) {
                  this.hideTab(index);
                }
                this.isReplace = false;
              }
            }
            if (properties[j] === "content" && !isNullOrUndefined(cntItem)) {
              var strVal = typeof newVal === "string" || isNullOrUndefined(newVal.innerHTML);
              if (strVal && (newVal[0] === "." || newVal[0] === "#") && newVal.length) {
                var eleVal = document.querySelector(newVal);
                cntItem.appendChild(eleVal);
                eleVal.style.display = "";
              } else if (newVal === "" && oldVal[0] === "#") {
                document.body.appendChild(this.element.querySelector(oldVal)).style.display = "none";
                cntItem.innerHTML = newVal;
              } else if (this.isAngular || this.isReact) {
                this.clearTabTemplate(cntItem, properties[j], CLS_ITEM3);
                cntItem.innerHTML = "";
                this.templateCompile(cntItem, newVal, index);
              } else if (typeof newVal !== "function") {
                cntItem.innerHTML = newVal;
              }
            }
            if (properties[j] === "cssClass") {
              if (!isNullOrUndefined(hdrItem)) {
                hdrItem.classList.remove(oldVal);
                hdrItem.classList.add(newVal);
              }
              if (!isNullOrUndefined(cntItem)) {
                cntItem.classList.remove(oldVal);
                cntItem.classList.add(newVal);
              }
            }
            if (properties[j] === "disabled") {
              this.enableTab(index, newVal === true ? false : true);
            }
            if (properties[j] === "visible") {
              this.hideTab(index, newVal === true ? false : true);
            }
          }
        }
        if (this.isReact && this.portals && this.portals.length > 0) {
          this.renderReactTemplates(function() {
            _this.refreshActiveTabBorder();
          });
        }
      } else {
        this.lastIndex = 0;
        if (isNullOrUndefined(this.tbObj)) {
          this.reRenderItems();
        } else {
          if (this.isReact || this.isAngular) {
            this.clearTemplate();
          }
          this.setItems(newProp.items);
          if (this.templateEle.length > 0) {
            this.expTemplateContent();
          }
          this.templateEle = [];
          var selectElement = select("." + CLS_TAB + " > ." + CLS_CONTENT2, this.element);
          while (selectElement.firstElementChild) {
            detach(selectElement.firstElementChild);
          }
          this.select(this.selectedItem);
          this.draggableItems = [];
          this.bindDraggable();
        }
      }
    };
    Tab2.prototype.clearTabTemplate = function(templateEle, templateName, className) {
      if (!this.clearTemplates) {
        return;
      }
      if (this.registeredTemplate && this.registeredTemplate[templateName]) {
        var registeredTemplates = this.registeredTemplate;
        for (var index = 0; index < registeredTemplates[templateName].length; index++) {
          var registeredItem = registeredTemplates[templateName][index].rootNodes[0];
          var closestItem = closest(registeredItem, "." + className);
          if (!isNullOrUndefined(closestItem) && closestItem === templateEle) {
            this.clearTemplate([templateName], [registeredTemplates[templateName][index]]);
            break;
          }
        }
      } else if (this.portals && this.portals.length > 0) {
        var portals = this.portals;
        for (var index = 0; index < portals.length; index++) {
          var portalItem = portals[index];
          var closestItem = closest(portalItem.containerInfo, "." + className);
          if (!isNullOrUndefined(closestItem) && closestItem === templateEle) {
            this.clearTemplate([templateName], index);
            break;
          }
        }
      }
    };
    Tab2.prototype.initializeDrag = function(target) {
      var _this = this;
      var dragObj = new Draggable(target, {
        dragArea: this.dragArea,
        dragTarget: "." + CLS_TB_ITEM,
        clone: true,
        helper: this.helper.bind(this),
        dragStart: this.itemDragStart.bind(this),
        drag: function(e) {
          var dragIndex = _this.getEleIndex(_this.dragItem);
          var dropIndex;
          var dropItem;
          var dragArgs = {
            draggedItem: _this.dragItem,
            event: e.event,
            target: e.target,
            droppedItem: e.target.closest("." + CLS_TB_ITEM),
            clonedElement: _this.cloneElement,
            index: dragIndex
          };
          if (!isNullOrUndefined(e.target.closest("." + CLS_TAB)) && !e.target.closest("." + CLS_TAB).isEqualNode(_this.element) && _this.dragArea !== "." + CLS_HEADER2) {
            _this.trigger("dragging", dragArgs);
          } else {
            if (!e.target.closest(_this.dragArea) && _this.overflowMode !== "Popup") {
              document.body.style.cursor = "not-allowed";
              addClass([_this.cloneElement], CLS_HIDDEN2);
              if (_this.dragItem.classList.contains(CLS_HIDDEN2)) {
                removeClass([_this.dragItem], CLS_HIDDEN2);
              }
              _this.dragItem.querySelector("." + CLS_WRAP).style.visibility = "visible";
            } else {
              document.body.style.cursor = "";
              _this.dragItem.querySelector("." + CLS_WRAP).style.visibility = "hidden";
              if (_this.cloneElement.classList.contains(CLS_HIDDEN2)) {
                removeClass([_this.cloneElement], CLS_HIDDEN2);
              }
            }
            if (_this.overflowMode === "Scrollable" && !isNullOrUndefined(_this.element.querySelector(".e-hscroll"))) {
              var scrollRightNavEle = _this.element.querySelector(".e-scroll-right-nav");
              var scrollLeftNavEle = _this.element.querySelector(".e-scroll-left-nav");
              var hscrollBar = _this.element.querySelector(".e-hscroll-bar");
              if (!isNullOrUndefined(scrollRightNavEle) && Math.abs(scrollRightNavEle.offsetWidth / 2 + scrollRightNavEle.offsetLeft) > _this.cloneElement.offsetLeft + _this.cloneElement.offsetWidth) {
                hscrollBar.scrollLeft -= 10;
              }
              if (!isNullOrUndefined(scrollLeftNavEle) && Math.abs(scrollLeftNavEle.offsetLeft + scrollLeftNavEle.offsetWidth - _this.cloneElement.offsetLeft) > scrollLeftNavEle.offsetWidth / 2) {
                hscrollBar.scrollLeft += 10;
              }
            }
            _this.cloneElement.style.pointerEvents = "none";
            dropItem = closest(e.target, "." + CLS_TB_ITEM + ".e-draggable");
            var scrollContentWidth = 0;
            if (_this.overflowMode === "Scrollable" && !isNullOrUndefined(_this.element.querySelector(".e-hscroll"))) {
              scrollContentWidth = _this.element.querySelector(".e-hscroll-content").offsetWidth;
            }
            if (dropItem != null && !dropItem.isSameNode(_this.dragItem) && dropItem.closest("." + CLS_TAB).isSameNode(_this.dragItem.closest("." + CLS_TAB))) {
              dropIndex = _this.getEleIndex(dropItem);
              if (dropIndex < dragIndex && Math.abs(dropItem.offsetLeft + dropItem.offsetWidth - _this.cloneElement.offsetLeft) > dropItem.offsetWidth / 2) {
                _this.dragAction(dropItem, dragIndex, dropIndex);
              }
              if (dropIndex > dragIndex && Math.abs(dropItem.offsetWidth / 2) + dropItem.offsetLeft - scrollContentWidth < _this.cloneElement.offsetLeft + _this.cloneElement.offsetWidth) {
                _this.dragAction(dropItem, dragIndex, dropIndex);
              }
            }
            _this.droppedIndex = _this.getEleIndex(_this.dragItem);
            _this.trigger("dragging", dragArgs);
          }
        },
        dragStop: this.itemDragStop.bind(this)
      });
      this.draggableItems.push(dragObj);
    };
    Tab2.prototype.helper = function(e) {
      this.cloneElement = this.createElement("div");
      if (e.element) {
        this.cloneElement = e.element.cloneNode(true);
        addClass([this.cloneElement], "e-tab-clone-element");
        if (this.element.querySelector("." + CLS_HEADER2).classList.contains(CLS_CLOSE_SHOW)) {
          addClass([this.cloneElement], CLS_CLOSE_SHOW);
        }
        removeClass([this.cloneElement.querySelector("." + CLS_WRAP)], "e-ripple");
        if (!isNullOrUndefined(this.cloneElement.querySelector(".e-ripple-element"))) {
          remove(this.cloneElement.querySelector(".e-ripple-element"));
        }
        document.body.appendChild(this.cloneElement);
      }
      return this.cloneElement;
    };
    Tab2.prototype.itemDragStart = function(e) {
      var _this = this;
      this.draggingItems = this.items.map(function(x) {
        return x;
      });
      this.dragItem = e.element;
      var dragArgs = {
        draggedItem: e.element,
        event: e.event,
        target: e.target,
        droppedItem: null,
        index: this.getEleIndex(this.dragItem),
        clonedElement: this.cloneElement,
        cancel: false
      };
      this.trigger("onDragStart", dragArgs, function(tabItemDragArgs) {
        if (tabItemDragArgs.cancel) {
          var dragObj = e.element.ej2_instances[0];
          if (!isNullOrUndefined(dragObj)) {
            dragObj.intDestroy(e.event);
          }
          detach(_this.cloneElement);
        } else {
          _this.removeActiveClass();
          addClass([_this.tbItems.querySelector("." + CLS_INDICATOR)], CLS_HIDDEN2);
          _this.dragItem.querySelector("." + CLS_WRAP).style.visibility = "hidden";
        }
      });
    };
    Tab2.prototype.dragAction = function(dropItem, dragsIndex, dropIndex) {
      if (this.items.length > 0) {
        var item = this.draggingItems[dragsIndex];
        this.draggingItems.splice(dragsIndex, 1);
        this.draggingItems.splice(dropIndex, 0, item);
      }
      if (this.overflowMode === "MultiRow") {
        dropItem.parentNode.insertBefore(this.dragItem, dropItem.nextElementSibling);
      }
      if (dragsIndex > dropIndex) {
        if (!this.dragItem.parentElement.isSameNode(dropItem.parentElement)) {
          if (this.overflowMode === "Extended") {
            if (dropItem.isSameNode(dropItem.parentElement.lastChild)) {
              var popupContainer = this.dragItem.parentNode;
              dropItem.parentNode.insertBefore(this.dragItem, dropItem);
              popupContainer.insertBefore(dropItem.parentElement.lastChild, popupContainer.childNodes[0]);
            } else {
              this.dragItem.parentNode.insertBefore(dropItem.parentElement.lastChild, this.dragItem.parentElement.childNodes[0]);
              dropItem.parentNode.insertBefore(this.dragItem, dropItem);
            }
          } else {
            var lastEle = dropItem.parentElement.lastChild;
            if (dropItem.isSameNode(lastEle)) {
              var popupContainer = this.dragItem.parentNode;
              dropItem.parentNode.insertBefore(this.dragItem, dropItem);
              popupContainer.insertBefore(lastEle, popupContainer.childNodes[0]);
            } else {
              this.dragItem.parentNode.insertBefore(dropItem.parentElement.lastChild, this.dragItem.parentElement.childNodes[0]);
              dropItem.parentNode.insertBefore(this.dragItem, dropItem);
            }
          }
        } else {
          this.dragItem.parentNode.insertBefore(this.dragItem, dropItem);
        }
      }
      if (dragsIndex < dropIndex) {
        if (!this.dragItem.parentElement.isSameNode(dropItem.parentElement)) {
          if (this.overflowMode === "Extended") {
            this.dragItem.parentElement.appendChild(dropItem.parentElement.firstElementChild);
            dropItem.parentNode.insertBefore(this.dragItem, dropItem.nextSibling);
          } else {
            this.dragItem.parentNode.insertBefore(dropItem.parentElement.lastChild, this.dragItem.parentElement.childNodes[0]);
            dropItem.parentNode.insertBefore(this.dragItem, dropItem);
          }
        } else {
          this.dragItem.parentNode.insertBefore(this.dragItem, dropItem.nextElementSibling);
        }
      }
    };
    Tab2.prototype.itemDragStop = function(e) {
      var _this = this;
      detach(this.cloneElement);
      this.cloneElement = null;
      this.dragItem.querySelector("." + CLS_WRAP).style.visibility = "visible";
      document.body.style.cursor = "";
      var dragStopArgs = {
        draggedItem: this.dragItem,
        event: e.event,
        target: e.target,
        droppedItem: this.tbItem[this.droppedIndex],
        clonedElement: null,
        index: this.droppedIndex,
        cancel: false
      };
      this.trigger("dragged", dragStopArgs, function(tabItemDropArgs) {
        if (tabItemDropArgs.cancel) {
          _this.refresh();
        } else {
          if (_this.items.length > 0 && _this.draggingItems.length > 0) {
            _this.items = _this.draggingItems;
            _this.selectedItem = isNullOrUndefined(_this.droppedIndex) ? _this.getEleIndex(_this.dragItem) : _this.droppedIndex;
            _this.refresh();
          } else {
            _this.dragItem.querySelector("." + CLS_WRAP).style.visibility = "";
            removeClass([_this.tbItems.querySelector("." + CLS_INDICATOR)], CLS_HIDDEN2);
            _this.droppedIndex = isNullOrUndefined(_this.droppedIndex) ? _this.getEleIndex(_this.dragItem) : _this.droppedIndex;
            _this.selectTab(_this.droppedIndex, null, true);
          }
        }
      });
      this.dragItem = null;
      this.droppedIndex = null;
    };
    Tab2.prototype.enableTab = function(index, value) {
      var tbItems = selectAll("." + CLS_TB_ITEM, this.element)[index];
      if (isNullOrUndefined(tbItems)) {
        return;
      }
      if (value === true) {
        tbItems.classList.remove(CLS_DISABLE5, CLS_OVERLAY3);
        tbItems.firstElementChild.setAttribute("tabindex", tbItems.firstElementChild.getAttribute("data-tabindex"));
      } else {
        tbItems.classList.add(CLS_DISABLE5, CLS_OVERLAY3);
        tbItems.firstElementChild.removeAttribute("tabindex");
        if (tbItems.classList.contains(CLS_ACTIVE2)) {
          this.select(index + 1);
        }
      }
      if (!isNullOrUndefined(this.items[index])) {
        this.items[index].disabled = !value;
        this.dataBind();
      }
      tbItems.firstElementChild.setAttribute("aria-disabled", value === true ? "false" : "true");
    };
    Tab2.prototype.addTab = function(items, index) {
      var _this = this;
      var addArgs = {
        addedItems: items,
        cancel: false
      };
      if (!this.isReplace) {
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
          var item = items_1[_i];
          item.disabled = item.disabled || false;
          item.visible = item.visible || true;
        }
        if (items && items.length !== 0 && this.element && this.element.classList.contains(CLS_HIDDEN2)) {
          this.element.classList.remove(CLS_HIDDEN2);
        }
        this.trigger("adding", addArgs, function(tabAddingArgs) {
          if (!tabAddingArgs.cancel) {
            _this.addingTabContent(items, index);
          }
        });
      } else {
        this.addingTabContent(items, index);
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Tab2.prototype.addingTabContent = function(items, index) {
      var _this = this;
      var lastEleIndex = 0;
      this.hdrEle = select("." + CLS_HEADER2, this.element);
      if (isNullOrUndefined(this.hdrEle)) {
        this.items = items;
        this.reRenderItems();
        this.bindDraggable();
      } else {
        var tbItems = Array.from(selectAll(".e-tab-header ." + CLS_TB_ITEM, this.element));
        var itemsCount = tbItems.length;
        if (itemsCount !== 0) {
          lastEleIndex = this.getMaxIndicesFromItems(tbItems) + 1;
        }
        if (isNullOrUndefined(index)) {
          index = itemsCount - 1;
        }
        if (itemsCount < index || index < 0 || isNaN(index)) {
          return;
        }
        if (itemsCount === 0 && !isNullOrUndefined(this.hdrEle)) {
          this.hdrEle.style.display = "";
        }
        if (!isNullOrUndefined(this.bdrLine)) {
          this.bdrLine.classList.add(CLS_HIDDEN2);
        }
        this.tbItems = select("." + CLS_TB_ITEMS, this.getTabHeader());
        this.isAdd = true;
        var tabItems_2 = this.parseObject(items, index);
        this.isAdd = false;
        var i_1 = 0;
        var textValue_1;
        items.forEach(function(item, place) {
          textValue_1 = item.headerTemplate || item.header.text;
          if (!(isNullOrUndefined(item.headerTemplate || item.header) || isNullOrUndefined(textValue_1) || textValue_1.length === 0 && !isNullOrUndefined(item.header) && isNullOrUndefined(item.header.iconCss))) {
            if (tabItems_2[place]) {
              if (isNullOrUndefined(item.id)) {
                item.id = CLS_ITEM3 + _this.tabId + "_" + TABITEMPREFIX + (lastEleIndex + place).toString();
              }
              tabItems_2[place].htmlAttributes["data-id"] = item.id;
            }
            _this.items.splice(index + i_1, 0, item);
            i_1++;
          }
          if (!isNullOrUndefined(item.header) && !isNullOrUndefined(item.header.text) && (_this.isTemplate || _this.loadOn === "Init")) {
            var no = lastEleIndex + place;
            var ele = _this.createElement("div", {
              id: CLS_CONTENT2 + _this.tabId + "_" + no,
              className: CLS_ITEM3,
              attrs: {
                role: "tabpanel",
                "aria-labelledby": CLS_ITEM3 + "_" + no
              }
            });
            _this.cntEle.insertBefore(ele, _this.cntEle.children[index + place]);
            var eleTrg = _this.getTrgContent(_this.cntEle, no.toString());
            _this.getContent(eleTrg, item.content, "render", index);
          }
        });
        this.tbObj.addItems(tabItems_2, index);
        if (!this.isReplace) {
          this.trigger("added", {
            addedItems: items
          });
        }
        if (this.selectedItem === index) {
          this.select(index);
        } else {
          this.setActiveBorder();
          this.tbItem = selectAll("." + CLS_TB_ITEM, this.getTabHeader());
        }
        this.bindDraggable();
      }
    };
    Tab2.prototype.removeTab = function(index) {
      var _this = this;
      var trg = selectAll("." + CLS_TB_ITEM, this.hdrEle)[index];
      if (isNullOrUndefined(trg)) {
        return;
      }
      var removeArgs = {
        removedItem: trg,
        removedIndex: index,
        cancel: false
      };
      this.trigger("removing", removeArgs, function(tabRemovingArgs) {
        if (!tabRemovingArgs.cancel) {
          var header = select("#" + CLS_ITEM3 + _this.tabId + "_" + _this.extIndex(trg.id), select("." + CLS_TB_ITEMS, _this.hdrEle));
          if (!isNullOrUndefined(header)) {
            _this.clearTabTemplate(header, "headerTemplate", CLS_TB_ITEM);
          }
          _this.tbObj.removeItems(index);
          if (_this.allowDragAndDrop && index !== Array.prototype.indexOf.call(_this.itemIndexArray, trg.id)) {
            index = Array.prototype.indexOf.call(_this.itemIndexArray, trg.id);
          }
          var targetEleIndex = _this.itemIndexArray.indexOf(trg.id);
          _this.items.splice(targetEleIndex, 1);
          _this.itemIndexArray.splice(targetEleIndex, 1);
          _this.refreshActiveBorder();
          var cntTrg = select("#" + CLS_CONTENT2 + _this.tabId + "_" + _this.extIndex(trg.id), select("." + CLS_CONTENT2, _this.element));
          if (!isNullOrUndefined(cntTrg)) {
            _this.clearTabTemplate(cntTrg, "content", CLS_ITEM3);
            detach(cntTrg);
          }
          _this.trigger("removed", tabRemovingArgs);
          if (_this.draggableItems && _this.draggableItems.length > 0) {
            _this.draggableItems[index].destroy();
            _this.draggableItems[index] = null;
            _this.draggableItems.splice(index, 1);
          }
          if (trg.classList.contains(CLS_ACTIVE2)) {
            index = index > selectAll("." + CLS_TB_ITEM + ":not(." + CLS_TB_POPUP + ")", _this.element).length - 1 ? index - 1 : index;
            _this.enableAnimation = false;
            _this.tbItem = selectAll("." + CLS_TB_ITEM, _this.getTabHeader());
            index = _this.getSelectingTabIndex(index);
            index = !isNaN(index) && index >= 0 && _this.tbItem.length > index ? index : 0;
            var tabItem = _this.tbItem[index];
            if (tabItem) {
              if (tabItem.classList.contains(CLS_HIDDEN2)) {
                tabItem.classList.remove(CLS_HIDDEN2);
              }
              var firstChild = tabItem.firstElementChild;
              if (firstChild && firstChild.hasAttribute("aria-hidden")) {
                firstChild.removeAttribute("aria-hidden");
              }
            }
            _this.selectedItem = index;
            _this.select(index);
          } else if (index !== _this.selectedItem) {
            if (index < _this.selectedItem) {
              index = _this.itemIndexArray.indexOf(_this.tbItem[_this.selectedItem].id);
              _this.setProperties({
                selectedItem: index > -1 ? index : _this.selectedItem
              }, true);
              _this.prevIndex = _this.selectedItem;
            }
            _this.tbItem = selectAll("." + CLS_TB_ITEM, _this.getTabHeader());
          }
          if (selectAll("." + CLS_TB_ITEM, _this.element).length === 0) {
            var cnt = select("." + CLS_CONTENT2, _this.element);
            detach(_this.hdrEle);
            detach(cnt);
          }
          _this.enableAnimation = true;
        }
      });
    };
    Tab2.prototype.hideTab = function(index, value) {
      var items;
      var tabId;
      if (index >= 0 && index < this.tbItem.length) {
        tabId = this.tbItem[index].getAttribute("id");
      }
      var item = this.element.querySelector('[id="' + tabId + '"]');
      if (isNullOrUndefined(item)) {
        return;
      }
      if (isNullOrUndefined(value)) {
        value = true;
      }
      this.bdrLine.classList.add(CLS_HIDDEN2);
      if (value === true) {
        item.classList.add(CLS_HIDDEN2);
        items = selectAll("." + CLS_TB_ITEM + ":not(." + CLS_HIDDEN2 + ")", this.tbItems);
        if (items.length !== 0 && item.classList.contains(CLS_ACTIVE2)) {
          if (index !== 0) {
            for (var i = index - 1; i >= 0; i--) {
              if (!this.tbItem[i].classList.contains(CLS_HIDDEN2)) {
                this.select(i);
                break;
              } else if (i === 0) {
                for (var k = index + 1; k < this.tbItem.length; k++) {
                  if (!this.tbItem[k].classList.contains(CLS_HIDDEN2)) {
                    this.select(k);
                    break;
                  }
                }
              }
            }
          } else {
            for (var k = index + 1; k < this.tbItem.length; k++) {
              if (!this.tbItem[k].classList.contains(CLS_HIDDEN2)) {
                this.select(k);
                break;
              }
            }
          }
        } else if (items.length === 0) {
          this.element.classList.add(CLS_HIDDEN2);
        }
      } else {
        this.element.classList.remove(CLS_HIDDEN2);
        items = selectAll("." + CLS_TB_ITEM + ":not(." + CLS_HIDDEN2 + ")", this.tbItems);
        item.classList.remove(CLS_HIDDEN2);
        if (items.length === 0) {
          this.select(index);
        }
      }
      this.setActiveBorder();
      if (!isNullOrUndefined(this.items[index])) {
        this.items[index].visible = !value;
        this.dataBind();
      }
      if (!isNullOrUndefined(item.firstElementChild)) {
        item.firstElementChild.setAttribute("aria-hidden", "" + value);
      }
      if (this.overflowMode === "Popup") {
        this.refreshOverflow();
      }
    };
    Tab2.prototype.selectTab = function(args, event2, isInteracted) {
      if (event2 === void 0) {
        event2 = null;
      }
      if (isInteracted === void 0) {
        isInteracted = false;
      }
      this.isInteracted = isInteracted;
      this.select(args, event2);
    };
    Tab2.prototype.select = function(args, event2) {
      var _this = this;
      var tabHeader = this.getTabHeader();
      this.tbItems = select("." + CLS_TB_ITEMS, tabHeader);
      this.tbItem = selectAll("." + CLS_TB_ITEM, tabHeader);
      this.content = select("." + CLS_CONTENT2, this.element);
      this.prevItem = this.tbItem[this.prevIndex];
      if (isNullOrUndefined(this.selectedItem) || this.selectedItem < 0 || this.tbItem.length <= this.selectedItem || isNaN(this.selectedItem)) {
        this.selectedItem = 0;
      } else {
        this.selectedID = this.extIndex(this.tbItem[this.selectedItem].id);
      }
      var trg = this.tbItem[args];
      if (isNullOrUndefined(trg)) {
        this.selectedID = "0";
      } else {
        this.selectingID = this.extIndex(trg.id);
      }
      if (!isNullOrUndefined(this.prevItem) && !this.prevItem.classList.contains(CLS_DISABLE5)) {
        this.prevItem.children.item(0).setAttribute("tabindex", this.prevItem.firstElementChild.getAttribute("tabindex"));
      }
      var eventArg = {
        event: event2,
        previousItem: this.prevItem,
        previousIndex: this.prevIndex,
        selectedItem: this.tbItem[this.selectedItem],
        selectedIndex: this.selectedItem,
        selectedContent: !isNullOrUndefined(this.content) ? select("#" + CLS_CONTENT2 + this.tabId + "_" + this.selectedID, this.content) : null,
        selectingItem: trg,
        selectingIndex: args,
        selectingContent: !isNullOrUndefined(this.content) ? select("#" + CLS_CONTENT2 + this.tabId + "_" + this.selectingID, this.content) : null,
        isSwiped: this.isSwiped,
        isInteracted: this.isInteracted,
        cancel: false
      };
      if (!this.initRender) {
        this.trigger("selecting", eventArg, function(selectArgs) {
          if (!selectArgs.cancel) {
            _this.selectingContent(args, _this.isInteracted);
          }
        });
      } else {
        this.selectingContent(args, this.isInteracted);
      }
      this.isInteracted = false;
    };
    Tab2.prototype.getSelectingTabIndex = function(args) {
      if (!isNullOrUndefined(this.tbItem[args]) && (this.tbItem[args].classList.contains(CLS_DISABLE5) || this.tbItem[args].classList.contains(CLS_HIDDEN2))) {
        for (var i = args + 1; i < this.items.length; i++) {
          if (this.items[i].disabled === false && this.items[i].visible === true) {
            args = i;
            break;
          } else {
            args = 0;
          }
        }
      }
      return args;
    };
    Tab2.prototype.selectingContent = function(args, isInteracted) {
      if (typeof args === "number") {
        args = this.getSelectingTabIndex(args);
        if (this.tbItem.length > args && args >= 0 && !isNaN(args)) {
          this.prevIndex = this.selectedItem;
          this.prevItem = this.tbItem[this.prevIndex];
          if (this.tbItem[args].classList.contains(CLS_TB_POPUP) && this.reorderActiveTab) {
            this.setActive(this.popupHandler(this.tbItem[args]), null, isInteracted);
            if (!isNullOrUndefined(this.items) && this.items.length > 0 && this.allowDragAndDrop) {
              this.tbItem = selectAll("." + CLS_TB_ITEMS + " ." + CLS_TB_ITEM, this.hdrEle);
              var item = this.items[args];
              this.items.splice(args, 1);
              this.items.splice(this.tbItem.length - 1, 0, item);
              var itemId = this.itemIndexArray[args];
              this.itemIndexArray.splice(args, 1);
              this.itemIndexArray.splice(this.tbItem.length - 1, 0, itemId);
            }
          } else {
            this.setActive(args, null, isInteracted);
          }
        } else {
          this.setActive(0, null, isInteracted);
        }
      } else if (args instanceof HTMLElement) {
        this.setActive(this.getEleIndex(args), null, isInteracted);
      }
    };
    Tab2.prototype.getItemIndex = function(tabItemId) {
      var tabIndex;
      for (var i = 0; i < this.tbItem.length; i++) {
        var value = this.tbItem[i].getAttribute("data-id");
        if (tabItemId === value) {
          tabIndex = i;
          break;
        }
      }
      return tabIndex;
    };
    Tab2.prototype.disable = function(value) {
      this.setCssClass(this.element, CLS_DISABLE5, value);
      this.element.setAttribute("aria-disabled", "" + value);
    };
    Tab2.prototype.getPersistData = function() {
      return this.addOnPersist(["selectedItem", "actEleId"]);
    };
    Tab2.prototype.getModuleName = function() {
      return "tab";
    };
    Tab2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var _this = this;
      var sortedKeys = Object.keys(newProp).sort(function(a, b) {
        if (a === "items") return -1;
        if (b === "items") return 1;
        return 0;
      });
      for (var _i = 0, sortedKeys_1 = sortedKeys; _i < sortedKeys_1.length; _i++) {
        var prop = sortedKeys_1[_i];
        switch (prop) {
          case "width":
            setStyleAttribute(this.element, {
              width: formatUnit(newProp.width)
            });
            break;
          case "height":
            setStyleAttribute(this.element, {
              height: formatUnit(newProp.height)
            });
            this.setContentHeight(false);
            break;
          case "cssClass":
            var headerEle = this.element.querySelector("." + CLS_HEADER2);
            if (oldProp.cssClass !== "" && !isNullOrUndefined(oldProp.cssClass)) {
              this.setCssClass(this.element, oldProp.cssClass, false);
              this.setCssClass(this.element, newProp.cssClass, true);
              if (!isNullOrUndefined(headerEle)) {
                this.setCssClass(headerEle, oldProp.cssClass, false);
                this.setCssClass(headerEle, newProp.cssClass, true);
              }
            } else {
              this.setCssClass(this.element, newProp.cssClass, true);
              if (!isNullOrUndefined(headerEle)) {
                this.setCssClass(headerEle, newProp.cssClass, true);
              }
            }
            break;
          case "items":
            this.evalOnPropertyChangeItems(newProp, oldProp);
            break;
          case "showCloseButton":
            this.setCloseButton(newProp.showCloseButton);
            break;
          case "reorderActiveTab":
            this.refreshActiveTabBorder();
            break;
          case "selectedItem":
            this.selectedItem = oldProp.selectedItem;
            this.select(newProp.selectedItem);
            break;
          case "headerPlacement":
            this.changeOrientation(newProp.headerPlacement);
            break;
          case "enableRtl":
            this.setRTL(newProp.enableRtl);
            break;
          case "overflowMode":
            this.tbObj.overflowMode = newProp.overflowMode;
            this.tbObj.dataBind();
            this.refreshActiveTabBorder();
            break;
          case "heightAdjustMode":
            this.setContentHeight(false);
            this.select(this.selectedItem);
            break;
          case "scrollStep":
            if (this.tbObj) {
              this.tbObj.scrollStep = this.scrollStep;
            }
            break;
          case "allowDragAndDrop":
            this.bindDraggable();
            break;
          case "swipeMode":
            if (this.touchModule) {
              this.touchModule.destroy();
              this.touchModule = null;
            }
            this.bindSwipeEvents();
            break;
          case "dragArea":
            if (this.allowDragAndDrop) {
              this.draggableItems.forEach(function(item) {
                item.dragArea = _this.dragArea;
              });
              this.refresh();
            }
            break;
        }
      }
    };
    Tab2.prototype.refreshActiveTab = function() {
      if (this.isReact && this.isTemplate) {
        this.clearTemplate();
      }
      if (!this.isTemplate) {
        if (this.element.querySelector("." + CLS_TB_ITEM + "." + CLS_ACTIVE2)) {
          detach(this.element.querySelector("." + CLS_TB_ITEM + "." + CLS_ACTIVE2).children[0]);
          detach(this.element.querySelector("." + CLS_CONTENT2).querySelector("." + CLS_ACTIVE2).children[0]);
          var item = this.items[this.selectedItem];
          var pos = isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconPosition) ? "" : item.header.iconPosition;
          var css = isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconCss) ? "" : item.header.iconCss;
          var text = item.headerTemplate || item.header.text;
          var txtWrap = this.createElement("div", {
            className: CLS_TEXT,
            attrs: {
              "role": "presentation"
            }
          });
          if (!isNullOrUndefined(text.tagName)) {
            txtWrap.appendChild(text);
          } else {
            this.headerTextCompile(txtWrap, text, this.selectedItem);
          }
          var tEle = void 0;
          var icon = this.createElement("span", {
            className: CLS_ICONS + " " + CLS_TAB_ICON + " " + CLS_ICON + "-" + pos + " " + css
          });
          var tConts = this.createElement("div", {
            className: CLS_TEXT_WRAP
          });
          tConts.appendChild(txtWrap);
          if (text !== "" && text !== void 0 && css !== "") {
            if (pos === "left" || pos === "top") {
              tConts.insertBefore(icon, tConts.firstElementChild);
            } else {
              tConts.appendChild(icon);
            }
            tEle = txtWrap;
            this.isIconAlone = false;
          } else {
            tEle = css === "" ? txtWrap : icon;
            if (tEle === icon) {
              detach(txtWrap);
              tConts.appendChild(icon);
              this.isIconAlone = true;
            }
          }
          var tabIndex = isNullOrUndefined(item.tabIndex) ? "-1" : item.tabIndex.toString();
          var wrapAtt = item.disabled ? {} : {
            tabIndex,
            "data-tabindex": tabIndex,
            role: "tab",
            "aria-selected": "true",
            "aria-disabled": "false"
          };
          tConts.appendChild(this.btnCls.cloneNode(true));
          var wraper = this.createElement("div", {
            className: CLS_WRAP,
            attrs: wrapAtt
          });
          wraper.appendChild(tConts);
          if (pos === "top" || pos === "bottom") {
            this.element.classList.add("e-vertical-icon");
          }
          this.element.querySelector("." + CLS_TB_ITEM + "." + CLS_ACTIVE2).appendChild(wraper);
          var crElem = this.createElement("div");
          var cnt = item.content;
          var eleStr = void 0;
          if (typeof cnt === "string" || isNullOrUndefined(cnt.innerHTML)) {
            if (typeof cnt === "string" && this.enableHtmlSanitizer) {
              cnt = SanitizeHtmlHelper.sanitize(cnt);
            }
            if (cnt[0] === "." || cnt[0] === "#") {
              if (document.querySelectorAll(cnt).length) {
                var eleVal = document.querySelector(cnt);
                eleStr = eleVal.outerHTML.trim();
                crElem.appendChild(eleVal);
                eleVal.style.display = "";
              } else {
                this.compileElement(crElem, cnt, "content", this.selectedItem);
              }
            } else {
              this.compileElement(crElem, cnt, "content", this.selectedItem);
            }
          } else {
            crElem.appendChild(cnt);
          }
          if (!isNullOrUndefined(eleStr)) {
            if (this.templateEle.indexOf(cnt.toString()) === -1) {
              this.templateEle.push(cnt.toString());
            }
          }
          this.element.querySelector("." + CLS_ITEM3 + "." + CLS_ACTIVE2).appendChild(crElem);
        }
      } else {
        var tabItems = this.element.querySelector("." + CLS_TB_ITEMS);
        var element2 = this.element.querySelector("." + CLS_TB_ITEM + "." + CLS_ACTIVE2);
        var index = this.getIndexFromEle(element2.id);
        var header = element2.innerText;
        var detachContent = this.element.querySelector("." + CLS_CONTENT2).querySelector("." + CLS_ACTIVE2).children[0];
        var mainContents = detachContent.innerHTML;
        detach(element2);
        detach(detachContent);
        var attr = {
          className: CLS_TB_ITEM + " " + CLS_TEMPLATE2 + " " + CLS_ACTIVE2,
          id: CLS_ITEM3 + this.tabId + "_" + index
        };
        var txtString = this.createElement("span", {
          className: CLS_TEXT,
          innerHTML: header,
          attrs: {
            "role": "presentation"
          }
        }).outerHTML;
        var conte = this.createElement("div", {
          className: CLS_TEXT_WRAP,
          innerHTML: txtString + this.btnCls.outerHTML
        }).outerHTML;
        var tabIndex = element2.firstElementChild.getAttribute("data-tabindex");
        var wrap = this.createElement("div", {
          className: CLS_WRAP,
          innerHTML: conte,
          attrs: {
            tabIndex,
            "data-tabindex": tabIndex,
            role: "tab",
            "aria-controls": CLS_CONTENT2 + this.tabId + "_" + index,
            "aria-selected": "true",
            "aria-disabled": "false"
          }
        });
        tabItems.insertBefore(this.createElement("div", attr), tabItems.children[index + 1]);
        this.element.querySelector("." + CLS_TB_ITEM + "." + CLS_ACTIVE2).appendChild(wrap);
        var crElem = this.createElement("div", {
          innerHTML: mainContents
        });
        this.element.querySelector("." + CLS_CONTENT2).querySelector("." + CLS_ACTIVE2).appendChild(crElem);
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Tab2.prototype.refreshActiveTabBorder = function() {
      if (this.heightAdjustMode === "None" && this.height !== "auto" && this.cntEle && !this.isVertical()) {
        var hdrEle = this.getTabHeader();
        setStyleAttribute(this.cntEle, {
          "height": this.element.clientHeight - hdrEle.offsetHeight + "px"
        });
      }
      var activeEle = select("." + CLS_TB_ITEM + "." + CLS_TB_POPUP + "." + CLS_ACTIVE2, this.element);
      if (!isNullOrUndefined(activeEle) && this.reorderActiveTab) {
        this.select(this.getEleIndex(activeEle));
      }
      this.refreshActiveBorder();
    };
    __decorate38([Collection([], TabItem)], Tab2.prototype, "items", void 0);
    __decorate38([Property("100%")], Tab2.prototype, "width", void 0);
    __decorate38([Property("Both")], Tab2.prototype, "swipeMode", void 0);
    __decorate38([Property("auto")], Tab2.prototype, "height", void 0);
    __decorate38([Property("")], Tab2.prototype, "cssClass", void 0);
    __decorate38([Property(0)], Tab2.prototype, "selectedItem", void 0);
    __decorate38([Property("Top")], Tab2.prototype, "headerPlacement", void 0);
    __decorate38([Property("Content")], Tab2.prototype, "heightAdjustMode", void 0);
    __decorate38([Property("Scrollable")], Tab2.prototype, "overflowMode", void 0);
    __decorate38([Property("Demand")], Tab2.prototype, "loadOn", void 0);
    __decorate38([Property(false)], Tab2.prototype, "enablePersistence", void 0);
    __decorate38([Property(true)], Tab2.prototype, "enableHtmlSanitizer", void 0);
    __decorate38([Property(false)], Tab2.prototype, "showCloseButton", void 0);
    __decorate38([Property(true)], Tab2.prototype, "reorderActiveTab", void 0);
    __decorate38([Property()], Tab2.prototype, "scrollStep", void 0);
    __decorate38([Property()], Tab2.prototype, "dragArea", void 0);
    __decorate38([Property(false)], Tab2.prototype, "allowDragAndDrop", void 0);
    __decorate38([Property(true)], Tab2.prototype, "clearTemplates", void 0);
    __decorate38([Complex({}, TabAnimationSettings)], Tab2.prototype, "animation", void 0);
    __decorate38([Event()], Tab2.prototype, "created", void 0);
    __decorate38([Event()], Tab2.prototype, "adding", void 0);
    __decorate38([Event()], Tab2.prototype, "added", void 0);
    __decorate38([Event()], Tab2.prototype, "selecting", void 0);
    __decorate38([Event()], Tab2.prototype, "selected", void 0);
    __decorate38([Event()], Tab2.prototype, "removing", void 0);
    __decorate38([Event()], Tab2.prototype, "removed", void 0);
    __decorate38([Event()], Tab2.prototype, "onDragStart", void 0);
    __decorate38([Event()], Tab2.prototype, "dragging", void 0);
    __decorate38([Event()], Tab2.prototype, "dragged", void 0);
    __decorate38([Event()], Tab2.prototype, "destroyed", void 0);
    Tab2 = __decorate38([NotifyPropertyChanges], Tab2);
    return Tab2;
  }(Component)
);

// node_modules/@syncfusion/ej2-navigations/src/treeview/treeview.js
var __extends41 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate39 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ROOT5 = "e-treeview";
var CONTROL3 = "e-control";
var COLLAPSIBLE = "e-icon-collapsible";
var EXPANDABLE = "e-icon-expandable";
var LISTITEM = "e-list-item";
var LISTTEXT = "e-list-text";
var LISTWRAP = "e-text-wrap";
var IELISTWRAP = "e-ie-wrap";
var PARENTITEM = "e-list-parent";
var HOVER = "e-hover";
var ACTIVE2 = "e-active";
var LOAD = "e-icons-spinner";
var PROCESS = "e-process";
var ICON3 = "e-icons";
var TEXTWRAP = "e-text-content";
var INPUT2 = "e-input";
var INPUTGROUP2 = "e-input-group";
var TREEINPUT = "e-tree-input";
var EDITING = "e-editing";
var RTL12 = "e-rtl";
var INTERACTION = "e-interaction";
var DRAGITEM = "e-drag-item";
var DROPPABLE = "e-droppable";
var DRAGGING = "e-dragging";
var SIBLING = "e-sibling";
var DROPIN = "e-drop-in";
var DROPNEXT = "e-drop-next";
var DROPOUT = "e-drop-out";
var NODROP = "e-no-drop";
var FULLROWWRAP = "e-fullrow-wrap";
var FULLROW = "e-fullrow";
var SELECTED3 = "e-selected";
var EXPANDED = "e-expanded";
var NODECOLLAPSED = "e-node-collapsed";
var DISABLE = "e-disable";
var DROPCOUNT = "e-drop-count";
var CHECK2 = "e-check";
var INDETERMINATE2 = "e-stop";
var CHECKBOXWRAP = "e-treeview-checkbox";
var CHECKBOXFRAME = "e-frame";
var CHECKBOXRIPPLE = "e-ripple-container";
var RIPPLE4 = "e-ripple";
var RIPPLEELMENT = "e-ripple-element";
var FOCUS = "e-node-focus";
var IMAGE = "e-list-img";
var BIGGER = "e-bigger";
var SMALL = "e-small";
var CHILD = "e-has-child";
var ITEM_ANIMATION_ACTIVE = "e-animation-active";
var DISABLED8 = "e-disabled";
var PREVENTSELECT = "e-prevent";
var treeAriaAttr = {
  treeRole: "group",
  itemRole: "treeitem",
  listRole: "group",
  itemText: "",
  wrapperRole: ""
};
var FieldsSettings = (
  /** @class */
  function(_super) {
    __extends41(FieldsSettings2, _super);
    function FieldsSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate39([Property("child")], FieldsSettings2.prototype, "child", void 0);
    __decorate39([Property([])], FieldsSettings2.prototype, "dataSource", void 0);
    __decorate39([Property("expanded")], FieldsSettings2.prototype, "expanded", void 0);
    __decorate39([Property("hasChildren")], FieldsSettings2.prototype, "hasChildren", void 0);
    __decorate39([Property("htmlAttributes")], FieldsSettings2.prototype, "htmlAttributes", void 0);
    __decorate39([Property("iconCss")], FieldsSettings2.prototype, "iconCss", void 0);
    __decorate39([Property("id")], FieldsSettings2.prototype, "id", void 0);
    __decorate39([Property("imageUrl")], FieldsSettings2.prototype, "imageUrl", void 0);
    __decorate39([Property("isChecked")], FieldsSettings2.prototype, "isChecked", void 0);
    __decorate39([Property("parentID")], FieldsSettings2.prototype, "parentID", void 0);
    __decorate39([Property(null)], FieldsSettings2.prototype, "query", void 0);
    __decorate39([Property("selectable")], FieldsSettings2.prototype, "selectable", void 0);
    __decorate39([Property("selected")], FieldsSettings2.prototype, "selected", void 0);
    __decorate39([Property(null)], FieldsSettings2.prototype, "tableName", void 0);
    __decorate39([Property("text")], FieldsSettings2.prototype, "text", void 0);
    __decorate39([Property("tooltip")], FieldsSettings2.prototype, "tooltip", void 0);
    __decorate39([Property("navigateUrl")], FieldsSettings2.prototype, "navigateUrl", void 0);
    return FieldsSettings2;
  }(ChildProperty)
);
var ActionSettings = (
  /** @class */
  function(_super) {
    __extends41(ActionSettings2, _super);
    function ActionSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate39([Property("SlideDown")], ActionSettings2.prototype, "effect", void 0);
    __decorate39([Property(400)], ActionSettings2.prototype, "duration", void 0);
    __decorate39([Property("linear")], ActionSettings2.prototype, "easing", void 0);
    return ActionSettings2;
  }(ChildProperty)
);
var NodeAnimationSettings = (
  /** @class */
  function(_super) {
    __extends41(NodeAnimationSettings2, _super);
    function NodeAnimationSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate39([Complex({
      effect: "SlideUp",
      duration: 400,
      easing: "linear"
    }, ActionSettings)], NodeAnimationSettings2.prototype, "collapse", void 0);
    __decorate39([Complex({
      effect: "SlideDown",
      duration: 400,
      easing: "linear"
    }, ActionSettings)], NodeAnimationSettings2.prototype, "expand", void 0);
    return NodeAnimationSettings2;
  }(ChildProperty)
);
var TreeView = (
  /** @class */
  function(_super) {
    __extends41(TreeView2, _super);
    function TreeView2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.isRefreshed = false;
      _this.preventExpand = false;
      _this.checkedElement = [];
      _this.disableNode = [];
      _this.validArr = [];
      _this.validNodes = [];
      _this.expandChildren = [];
      _this.isFieldChange = false;
      _this.changeDataSource = false;
      _this.hasTemplate = false;
      _this.isFirstRender = false;
      _this.isNodeDropped = false;
      _this.isInteracted = false;
      _this.isRightClick = false;
      _this.mouseDownStatus = false;
      _this.isDropIn = false;
      _this.OldCheckedData = [];
      _this.isHiddenItem = false;
      return _this;
    }
    TreeView_1 = TreeView2;
    TreeView2.prototype.getModuleName = function() {
      return "treeview";
    };
    TreeView2.prototype.preRender = function() {
      var _this = this;
      this.checkActionNodes = [];
      this.parentNodeCheck = [];
      this.dragStartAction = false;
      this.isAnimate = false;
      this.keyConfigs = {
        escape: "escape",
        end: "end",
        enter: "enter",
        f2: "f2",
        home: "home",
        moveDown: "downarrow",
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        moveUp: "uparrow",
        ctrlDown: "ctrl+downarrow",
        ctrlUp: "ctrl+uparrow",
        ctrlEnter: "ctrl+enter",
        ctrlHome: "ctrl+home",
        ctrlEnd: "ctrl+end",
        ctrlA: "ctrl+A",
        shiftDown: "shift+downarrow",
        shiftUp: "shift+uparrow",
        shiftEnter: "shift+enter",
        shiftHome: "shift+home",
        shiftEnd: "shift+end",
        csDown: "ctrl+shift+downarrow",
        csUp: "ctrl+shift+uparrow",
        csEnter: "ctrl+shift+enter",
        csHome: "ctrl+shift+home",
        csEnd: "ctrl+shift+end",
        space: "space",
        shiftSpace: "shift+space",
        ctrlSpace: "ctrl+space"
      };
      this.listBaseOption = {
        expandCollapse: true,
        showIcon: true,
        expandIconClass: EXPANDABLE,
        ariaAttributes: treeAriaAttr,
        expandIconPosition: "Left",
        itemCreated: function(e) {
          _this.beforeNodeCreate(e);
        },
        enableHtmlSanitizer: this.enableHtmlSanitizer,
        itemNavigable: this.fullRowNavigable
      };
      this.updateListProp(this.fields);
      this.aniObj = new Animation({});
      this.treeList = [];
      this.isLoaded = false;
      this.isInitalExpand = false;
      this.expandChildren = [];
      this.index = 0;
      this.setTouchClass();
      this.DDTTreeData = JSON.parse(JSON.stringify(this.fields.dataSource));
      if (isNullOrUndefined(this.selectedNodes)) {
        this.setProperties({
          selectedNodes: []
        }, true);
      }
      if (isNullOrUndefined(this.checkedNodes)) {
        this.setProperties({
          checkedNodes: []
        }, true);
      }
      if (isNullOrUndefined(this.expandedNodes)) {
        this.setProperties({
          expandedNodes: []
        }, true);
      } else {
        this.isInitalExpand = true;
      }
    };
    TreeView2.prototype.getPersistData = function() {
      var keyEntity = ["selectedNodes", "checkedNodes", "expandedNodes"];
      return this.addOnPersist(keyEntity);
    };
    TreeView2.prototype.render = function() {
      this.initialRender = true;
      this.initialize();
      this.setDataBinding(false);
      this.setDisabledMode();
      this.setExpandOnType();
      if (!this.disabled) {
        this.setRipple();
      }
      this.wireEditingEvents(this.allowEditing);
      this.setDragAndDrop(this.allowDragAndDrop);
      if (!this.disabled) {
        this.wireEvents();
      }
      this.initialRender = false;
      this.renderComplete();
    };
    TreeView2.prototype.initialize = function() {
      this.element.setAttribute("role", "tree");
      if (!isNullOrUndefined(this.fields.dataSource) && Array.isArray(this.fields.dataSource) && this.fields.dataSource.length !== 0) {
        this.element.setAttribute("aria-activedescendant", this.element.id + "_active");
      }
      this.setCssClass(null, this.cssClass);
      this.setEnableRtl();
      this.setFullRow(this.fullRowSelect);
      this.setTextWrap();
      this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);
    };
    TreeView2.prototype.setDisabledMode = function() {
      if (this.disabled) {
        this.element.classList.add(DISABLED8);
        this.element.setAttribute("aria-disabled", "true");
      } else {
        this.element.classList.remove(DISABLED8);
        this.element.setAttribute("aria-disabled", "false");
      }
    };
    TreeView2.prototype.setEnableRtl = function() {
      (this.enableRtl ? addClass : removeClass)([this.element], RTL12);
    };
    TreeView2.prototype.setRipple = function() {
      var tempStr = "." + FULLROW + ",." + TEXTWRAP;
      var rippleModel = {
        selector: tempStr,
        ignore: "." + TEXTWRAP + " > ." + ICON3 + ",." + INPUTGROUP2 + ",." + INPUT2 + ", ." + CHECKBOXWRAP
      };
      this.rippleFn = rippleEffect(this.element, rippleModel);
      var iconModel = {
        selector: "." + TEXTWRAP + " > ." + ICON3,
        isCenterRipple: true
      };
      this.rippleIconFn = rippleEffect(this.element, iconModel);
    };
    TreeView2.prototype.setFullRow = function(isEnabled) {
      (isEnabled ? addClass : removeClass)([this.element], FULLROWWRAP);
    };
    TreeView2.prototype.setMultiSelect = function(isEnabled) {
      if (isEnabled) {
        this.element.setAttribute("aria-multiselectable", "true");
      } else {
        this.element.setAttribute("aria-multiselectable", "false");
      }
    };
    TreeView2.prototype.templateComplier = function(template) {
      if (template) {
        this.hasTemplate = true;
        this.element.classList.add(INTERACTION);
        try {
          if (typeof template !== "function" && document.querySelectorAll(template).length) {
            return compile(document.querySelector(template).innerHTML.trim());
          } else {
            return compile(template);
          }
        } catch (e) {
          return compile(template);
        }
      }
      this.element.classList.remove(INTERACTION);
      return void 0;
    };
    TreeView2.prototype.setDataBinding = function(changeDataSource) {
      var _this = this;
      this.treeList.push("false");
      if (this.fields.dataSource instanceof DataManager) {
        this.isOffline = this.fields.dataSource.dataSource.offline;
        if (this.fields.dataSource.ready) {
          this.fields.dataSource.ready.then(function(e) {
            _this.isOffline = _this.fields.dataSource.dataSource.offline;
            if (_this.fields.dataSource instanceof DataManager && _this.isOffline) {
              _this.treeList.pop();
              _this.treeData = e.result;
              _this.isNumberTypeId = _this.getType();
              _this.setRootData();
              _this.renderItems(true);
              if (_this.treeList.length === 0 && !_this.isLoaded) {
                _this.finalize();
              }
            }
          }).catch(function(e) {
            _this.trigger("actionFailure", {
              error: e
            });
          });
        } else {
          this.fields.dataSource.executeQuery(this.getQuery(this.fields)).then(function(e) {
            _this.treeList.pop();
            _this.treeData = e.result;
            _this.isNumberTypeId = _this.getType();
            _this.setRootData();
            if (changeDataSource) {
              _this.changeDataSource = true;
            }
            _this.renderItems(true);
            _this.changeDataSource = false;
            if (_this.treeList.length === 0 && !_this.isLoaded) {
              _this.finalize();
            }
          }).catch(function(e) {
            _this.trigger("actionFailure", {
              error: e
            });
          });
        }
      } else {
        this.treeList.pop();
        if (isNullOrUndefined(this.fields.dataSource)) {
          this.rootData = this.treeData = [];
        } else {
          this.treeData = JSON.parse(JSON.stringify(this.fields.dataSource));
          this.setRootData();
        }
        this.isNumberTypeId = this.getType();
        this.renderItems(false);
      }
      if (this.treeList.length === 0 && !this.isLoaded) {
        this.finalize();
      }
    };
    TreeView2.prototype.getQuery = function(mapper, value) {
      if (value === void 0) {
        value = null;
      }
      var columns = [];
      var query;
      if (!mapper.query) {
        query = new Query();
        var prop = this.getActualProperties(mapper);
        for (var _i = 0, _a = Object.keys(prop); _i < _a.length; _i++) {
          var col = _a[_i];
          if (col !== "dataSource" && col !== "tableName" && col !== "child" && !!mapper["" + col] && col !== "url" && columns.indexOf(mapper["" + col]) === -1) {
            columns.push(mapper["" + col]);
          }
        }
        query.select(columns);
        if (Object.prototype.hasOwnProperty.call(prop, "tableName")) {
          query.from(mapper.tableName);
        }
      } else {
        query = mapper.query.clone();
      }
      ListBase.addSorting(this.sortOrder, mapper.text, query);
      if (!isNullOrUndefined(value) && !isNullOrUndefined(mapper.parentID)) {
        query.where(mapper.parentID, "equal", this.isNumberTypeId ? parseFloat(value) : value);
      }
      return query;
    };
    TreeView2.prototype.getType = function() {
      return this.treeData[0] ? typeof getValue(this.fields.id, this.treeData[0]) === "number" ? true : false : false;
    };
    TreeView2.prototype.setRootData = function() {
      this.dataType = this.getDataType(this.treeData, this.fields);
      if (this.dataType === 1) {
        this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
        var rootItems = this.getChildNodes(this.treeData, void 0, true);
        if (isNullOrUndefined(rootItems)) {
          this.rootData = [];
        } else {
          this.rootData = rootItems;
        }
      } else {
        this.rootData = this.treeData;
      }
    };
    TreeView2.prototype.isChildObject = function() {
      if (typeof this.fields.child === "object") {
        return true;
      } else {
        return false;
      }
    };
    TreeView2.prototype.renderItems = function(isSorted) {
      this.listBaseOption.ariaAttributes.level = 1;
      var sortedData = this.getSortedData(this.rootData);
      this.ulElement = ListBase.createList(this.createElement, isSorted ? this.rootData : sortedData, this.listBaseOption);
      this.element.appendChild(this.ulElement);
      var rootNodes = this.ulElement.querySelectorAll(".e-list-item");
      if (this.loadOnDemand === false) {
        var i = 0;
        while (i < rootNodes.length) {
          this.renderChildNodes(rootNodes[parseInt(i.toString(), 10)], true, null, true);
          i++;
        }
      }
      var parentEle = selectAll("." + PARENTITEM, this.element);
      if (parentEle.length === 1 && rootNodes && rootNodes.length !== 0 || this.loadOnDemand) {
        this.finalizeNode(this.element);
      }
      this.parentNodeCheck = [];
      this.parentCheckData = [];
      this.updateCheckedStateFromDS();
      if (this.autoCheck && this.showCheckBox && !this.isLoaded) {
        this.updateParentCheckState();
      }
    };
    TreeView2.prototype.updateCheckedStateFromDS = function() {
      this.validNodes = [];
      if (this.treeData && this.showCheckBox) {
        if (this.dataType === 1) {
          var mapper = this.fields;
          var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, "equal", true, false));
          for (var i = 0; i < resultData.length; i++) {
            var resultId = resultData[parseInt(i.toString(), 10)][this.fields.id] ? resultData[parseInt(i.toString(), 10)][this.fields.id].toString() : null;
            if (this.checkedNodes.indexOf(resultId) === -1 && !this.isLoaded) {
              this.checkDisabledState(resultId, resultData[i]);
            }
            if (resultData[parseInt(i.toString(), 10)][this.fields.hasChildren]) {
              var id = resultData[parseInt(i.toString(), 10)][this.fields.id];
              var childData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, "equal", id, false));
              for (var child = 0; child < childData.length; child++) {
                var childId = childData[parseInt(child.toString(), 10)][this.fields.id] ? childData[parseInt(child.toString(), 10)][this.fields.id].toString() : null;
                if (this.checkedNodes.indexOf(childId) === -1 && this.autoCheck) {
                  this.checkDisabledState(childId, childData[child]);
                }
              }
            }
          }
          for (var i = 0; i < this.checkedNodes.length; i++) {
            var mapper_1 = this.fields;
            var checkState = new DataManager(this.treeData).executeLocal(new Query().where(mapper_1.id, "equal", this.checkedNodes[parseInt(i.toString(), 10)], true));
            if (checkState[0] && this.autoCheck) {
              this.getCheckedNodeDetails(mapper_1, checkState);
              this.checkIndeterminateState(checkState[0]);
            }
            if (checkState.length > 0) {
              var checkedId = checkState[0][this.fields.id] ? checkState[0][this.fields.id].toString() : null;
              if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {
                this.validNodes.push(checkedId);
              }
            }
            var checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper_1.parentID, "equal", this.checkedNodes[parseInt(i.toString(), 10)], true));
            for (var index = 0; index < checkedData.length; index++) {
              var checkedId = checkedData[parseInt(index.toString(), 10)][this.fields.id] ? checkedData[parseInt(index.toString(), 10)][this.fields.id].toString() : null;
              if (this.checkedNodes.indexOf(checkedId) === -1 && this.autoCheck) {
                this.checkDisabledState(checkedId, checkedData[index]);
              }
              if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {
                this.validNodes.push(checkedId);
              }
            }
          }
        } else if (this.dataType === 2 || this.fields.dataSource instanceof DataManager && this.isOffline) {
          for (var index = 0; index < this.treeData.length; index++) {
            var fieldId = this.treeData[parseInt(index.toString(), 10)][this.fields.id] ? this.treeData[parseInt(index.toString(), 10)][this.fields.id].toString() : "";
            if (this.treeData[parseInt(index.toString(), 10)][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(fieldId) === -1) {
              this.checkDisabledState(fieldId, this.treeData[index]);
            }
            if (this.checkedNodes.indexOf(fieldId) > -1 && this.validNodes.indexOf(fieldId) === -1) {
              this.validNodes.push(fieldId);
            }
            var childItems = getValue(this.fields.child.toString(), this.treeData[parseInt(index.toString(), 10)]);
            if (childItems) {
              this.updateChildCheckState(childItems, this.treeData[parseInt(index.toString(), 10)]);
            }
          }
          this.validNodes = this.enablePersistence ? this.checkedNodes : this.validNodes;
        }
        this.setProperties({
          checkedNodes: this.validNodes
        }, true);
      }
    };
    TreeView2.prototype.getCheckedNodeDetails = function(mapper, checkNodes) {
      var id = checkNodes[0][this.fields.parentID] ? checkNodes[0][this.fields.parentID].toString() : null;
      var count = 0;
      var element2 = this.element.querySelector('[data-uid="' + checkNodes[0][this.fields.id] + '"]');
      var parentEle = this.element.querySelector('[data-uid="' + checkNodes[0][this.fields.parentID] + '"]');
      if (!element2 && !parentEle) {
        if (this.parentNodeCheck.indexOf(id) === -1) {
          this.parentNodeCheck.push(id);
        }
        var childNodes = this.getChildNodes(this.treeData, id);
        for (var i = 0; i < childNodes.length; i++) {
          var childId = childNodes[parseInt(i.toString(), 10)][this.fields.id] ? childNodes[parseInt(i.toString(), 10)][this.fields.id].toString() : null;
          if (this.checkedNodes.indexOf(childId) !== -1) {
            count++;
          }
          if (count === childNodes.length && this.checkedNodes.indexOf(id) === -1) {
            this.checkDisabledState(id);
          }
        }
        var preElement = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, "equal", id, true));
        this.getCheckedNodeDetails(mapper, preElement);
      } else if (parentEle) {
        var check = select("." + CHECK2, parentEle);
        if (!check) {
          this.changeState(parentEle, "indeterminate", null, true, true);
        }
      }
    };
    TreeView2.prototype.updateParentCheckState = function() {
      var indeterminate = selectAll("." + INDETERMINATE2, this.element);
      var childCheckedElement;
      var data = this.treeData;
      if (this.element.classList.contains("e-filtering")) {
        data = this.DDTTreeData;
      }
      for (var i = 0; i < indeterminate.length; i++) {
        var node = closest(indeterminate[parseInt(i.toString(), 10)], "." + LISTITEM);
        var nodeId = node.getAttribute("data-uid").toString();
        var OldCheckedNodes = void 0;
        if (this.element.classList.contains("e-filtering")) {
          OldCheckedNodes = new DataManager(this.OldCheckedData).executeLocal(new Query().where("parentID", "equal", nodeId, true));
        }
        if (this.dataType === 1) {
          childCheckedElement = new DataManager(data).executeLocal(new Query().where(this.fields.parentID, "equal", nodeId, true));
        } else {
          childCheckedElement = this.getChildNodes(data, nodeId);
        }
        var count = 0;
        if (childCheckedElement) {
          var _loop_1 = function(j2) {
            var childId = childCheckedElement[parseInt(j2.toString(), 10)][this_1.fields.id].toString();
            if (this_1.checkedNodes.indexOf(childId) !== -1) {
              count++;
            } else if (this_1.element.classList.contains("e-filtering") && OldCheckedNodes.findIndex(function(e) {
              return e["id"] === childId;
            }) !== -1) {
              count++;
            }
          };
          var this_1 = this;
          for (var j = 0; j < childCheckedElement.length; j++) {
            _loop_1(j);
          }
          if (count === childCheckedElement.length) {
            var nodeCheck = node.getAttribute("data-uid");
            if (this.checkedNodes.indexOf(nodeCheck) === -1) {
              this.checkDisabledState(nodeCheck);
            }
            this.changeState(node, "check", null, true, true);
          } else if (count === 0 && this.checkedNodes.length === 0) {
            this.changeState(node, "uncheck", null, true, true);
          }
        }
      }
    };
    TreeView2.prototype.checkIndeterminateState = function(data) {
      var element2;
      if (this.dataType === 1) {
        element2 = this.element.querySelector('[data-uid="' + data[this.fields.parentID] + '"]');
      } else {
        element2 = this.element.querySelector('[data-uid="' + data[this.fields.id] + '"]');
      }
      if (element2) {
        var ariaChecked = element2.getAttribute("aria-checked");
        if (ariaChecked !== "true") {
          this.changeState(element2, "indeterminate", null, true, true);
        }
      } else if (this.dataType === 2) {
        if (this.parentNodeCheck.indexOf(data[this.fields.id].toString()) === -1) {
          this.parentNodeCheck.push(data[this.fields.id].toString());
        }
      }
    };
    TreeView2.prototype.updateChildCheckState = function(childItems, treeData) {
      var count = 0;
      var checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : "";
      for (var index = 0; index < childItems.length; index++) {
        var checkedChild = childItems[parseInt(index.toString(), 10)][this.fields.id] ? childItems[parseInt(index.toString(), 10)][this.fields.id].toString() : "";
        if (childItems[parseInt(index.toString(), 10)][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(checkedChild) === -1) {
          this.checkDisabledState(checkedChild, childItems[index]);
        }
        if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1 && this.autoCheck) {
          this.checkDisabledState(checkedChild, childItems[index]);
        }
        if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {
          count++;
        }
        if (this.checkedNodes.indexOf(checkedChild) > -1 && this.validNodes.indexOf(checkedChild) === -1) {
          this.validNodes.push(checkedChild);
        }
        var subChildItems = getValue(this.fields.child.toString(), childItems[parseInt(index.toString(), 10)]);
        if (subChildItems && subChildItems.length) {
          if (this.parentCheckData.indexOf(treeData) === -1) {
            this.parentCheckData.push(treeData);
          }
          this.updateChildCheckState(subChildItems, childItems[parseInt(index.toString(), 10)]);
        }
        if (count === childItems.length && this.autoCheck && this.checkedNodes.indexOf(checkedParent) === -1) {
          this.checkDisabledState(checkedParent, treeData);
        }
      }
      if (count !== 0 && this.autoCheck) {
        this.checkIndeterminateState(treeData);
        for (var len = 0; len < this.parentCheckData.length; len++) {
          if (treeData !== this.parentCheckData[parseInt(len.toString(), 10)] && this.parentCheckData[parseInt(len.toString(), 10)]) {
            this.checkIndeterminateState(this.parentCheckData[parseInt(len.toString(), 10)]);
          }
        }
      }
      this.parentCheckData = [];
    };
    TreeView2.prototype.beforeNodeCreate = function(e) {
      if (this.showCheckBox) {
        var checkboxEle = createCheckBox(this.createElement, true, {
          cssClass: this.touchClass
        });
        checkboxEle.classList.add(CHECKBOXWRAP);
        var icon = select("div." + EXPANDABLE + ", div." + COLLAPSIBLE, e.item);
        var id = e.item.getAttribute("data-uid");
        e.item.childNodes[0].insertBefore(checkboxEle, e.item.childNodes[0].childNodes[isNullOrUndefined(icon) ? 0 : 1]);
        var checkValue = getValue(e.fields.isChecked, e.curData);
        if (this.checkedNodes.indexOf(id) > -1) {
          select("." + CHECKBOXFRAME, checkboxEle).classList.add(CHECK2);
          e.item.setAttribute("aria-checked", "true");
          this.addCheck(e.item);
        } else if (!isNullOrUndefined(checkValue) && checkValue.toString() === "true") {
          select("." + CHECKBOXFRAME, checkboxEle).classList.add(CHECK2);
          e.item.setAttribute("aria-checked", "true");
          this.addCheck(e.item);
        } else {
          e.item.setAttribute("aria-checked", "false");
        }
        var frame = select("." + CHECKBOXFRAME, checkboxEle);
        EventHandler.add(frame, "mousedown", this.frameMouseHandler, this);
        EventHandler.add(frame, "mouseup", this.frameMouseHandler, this);
      }
      if (this.fullRowSelect) {
        this.createFullRow(e.item);
      }
      if (this.allowMultiSelection && !e.item.classList.contains(SELECTED3)) {
        e.item.setAttribute("aria-selected", "false");
      }
      var fields = e.fields;
      this.addActionClass(e, fields.selected, SELECTED3);
      this.addActionClass(e, fields.expanded, EXPANDED);
      e.item.setAttribute("tabindex", "-1");
      EventHandler.add(e.item, "focus", this.focusIn, this);
      if (!isNullOrUndefined(this.nodeTemplateFn)) {
        var textEle = e.item.querySelector("." + LISTTEXT);
        var dataId = e.item.getAttribute("data-uid");
        textEle.innerHTML = "";
        this.renderNodeTemplate(e.curData, textEle, dataId);
      }
      var eventArgs = {
        node: e.item,
        nodeData: e.curData,
        text: e.text
      };
      if (!this.isRefreshed) {
        this.trigger("drawNode", eventArgs);
        if (e.curData[this.fields.selectable] === false && !this.showCheckBox) {
          e.item.classList.add(PREVENTSELECT);
          var firstChild = e.item.firstElementChild;
          firstChild.style.cursor = "not-allowed";
        }
      }
    };
    TreeView2.prototype.frameMouseHandler = function(e) {
      var rippleSpan = select("." + CHECKBOXRIPPLE, e.target.parentElement);
      rippleMouseHandler(e, rippleSpan);
    };
    TreeView2.prototype.addActionClass = function(e, action, cssClass2) {
      var data = e.curData;
      var actionValue = getValue(action, data);
      if (!isNullOrUndefined(actionValue) && actionValue.toString() !== "false") {
        e.item.classList.add(cssClass2);
      }
    };
    TreeView2.prototype.getDataType = function(ds, mapper) {
      if (this.fields.dataSource instanceof DataManager) {
        for (var i = 0; i < ds.length; i++) {
          if (this.isOffline) {
            if (typeof mapper.child === "string" && isNullOrUndefined(getValue(mapper.child, ds[parseInt(i.toString(), 10)])) && !isNullOrUndefined(getValue(mapper.parentID, ds[parseInt(i.toString(), 10)]))) {
              return 1;
            }
          } else if (typeof mapper.child === "string" && isNullOrUndefined(getValue(mapper.child, ds[parseInt(i.toString(), 10)]))) {
            return 1;
          }
        }
        return 2;
      }
      for (var i = 0, len = ds.length; i < len; i++) {
        if (typeof mapper.child === "string" && (!isNullOrUndefined(getValue(mapper.child, ds[parseInt(i.toString(), 10)])) || Object.prototype.hasOwnProperty.call(ds[parseInt(i.toString(), 10)], mapper.child))) {
          return 2;
        }
        if (this.isChildObject()) {
          return 2;
        }
        if (!isNullOrUndefined(getValue(mapper.parentID, ds[parseInt(i.toString(), 10)])) || !isNullOrUndefined(getValue(mapper.hasChildren, ds[parseInt(i.toString(), 10)]))) {
          return 1;
        }
      }
      return 1;
    };
    TreeView2.prototype.getGroupedData = function(dataSource, groupBy) {
      var cusQuery = new Query().group(groupBy);
      var ds = ListBase.getDataSource(dataSource, cusQuery);
      var grpItem = [];
      for (var j = 0; j < ds.length; j++) {
        var itemObj = ds[parseInt(j.toString(), 10)].items;
        grpItem.push(itemObj);
      }
      return grpItem;
    };
    TreeView2.prototype.getSortedData = function(list) {
      if (list && this.sortOrder !== "None") {
        list = ListBase.getDataSource(list, ListBase.addSorting(this.sortOrder, this.fields.text));
      }
      return list;
    };
    TreeView2.prototype.finalizeNode = function(element2, isFromExpandAll, expandChild) {
      var _this = this;
      if (!isFromExpandAll) {
        this.updateAttributes(element2);
      }
      if (!expandChild) {
        var eNodes = selectAll("." + EXPANDED, element2);
        if (!this.loadOnDemand && this.fields.dataSource instanceof DataManager) {
          this.isInitalExpand = this.treeData.filter(function(e) {
            return e[_this.fields.expanded] === true;
          }).length > 0 ? true : this.isInitalExpand;
        }
        if (!this.isInitalExpand) {
          for (var i = 0; i < eNodes.length; i++) {
            this.renderChildNodes(eNodes[parseInt(i.toString(), 10)]);
          }
        }
        removeClass(eNodes, EXPANDED);
      }
      if (!isFromExpandAll) {
        this.updateList();
      }
      if (this.isLoaded) {
        this.updateCheckedProp();
      }
    };
    TreeView2.prototype.updateAttributes = function(element2) {
      var iNodes = selectAll("." + IMAGE, element2);
      for (var k = 0; k < iNodes.length; k++) {
        iNodes[parseInt(k.toString(), 10)].setAttribute("alt", IMAGE);
      }
      if (this.isLoaded) {
        var sNodes = selectAll("." + SELECTED3, element2);
        for (var i = 0; i < sNodes.length; i++) {
          this.selectNode(sNodes[parseInt(i.toString(), 10)], null);
          break;
        }
        removeClass(sNodes, SELECTED3);
      }
      var cNodes = selectAll("." + LISTITEM + ":not(." + EXPANDED + ")", element2);
      for (var j = 0; j < cNodes.length; j++) {
        var icon = select("div." + ICON3, cNodes[parseInt(j.toString(), 10)]);
        if (icon && icon.classList.contains(EXPANDABLE)) {
          this.disableExpandAttr(cNodes[parseInt(j.toString(), 10)]);
        }
      }
    };
    TreeView2.prototype.updateCheckedProp = function() {
      if (this.showCheckBox) {
        var nodes = [].concat([], this.checkedNodes);
        this.setProperties({
          checkedNodes: nodes
        }, true);
      }
    };
    TreeView2.prototype.ensureIndeterminate = function() {
      if (this.autoCheck) {
        var liElement = selectAll("li", this.element);
        var ulElement = void 0;
        for (var i = 0; i < liElement.length; i++) {
          if (liElement[parseInt(i.toString(), 10)].classList.contains(LISTITEM)) {
            ulElement = select("." + PARENTITEM, liElement[parseInt(i.toString(), 10)]);
            if (ulElement) {
              this.ensureParentCheckState(liElement[parseInt(i.toString(), 10)]);
            } else {
              this.ensureChildCheckState(liElement[parseInt(i.toString(), 10)]);
            }
          }
        }
      } else {
        var indeterminate = selectAll("." + INDETERMINATE2, this.element);
        for (var i = 0; i < indeterminate.length; i++) {
          indeterminate[parseInt(i.toString(), 10)].classList.remove(INDETERMINATE2);
        }
      }
    };
    TreeView2.prototype.ensureParentCheckState = function(element2) {
      if (!isNullOrUndefined(element2)) {
        if (element2.classList.contains(ROOT5)) {
          return;
        }
        var ulElement = element2;
        if (element2.classList.contains(LISTITEM)) {
          ulElement = select("." + PARENTITEM, element2);
        }
        var checkedNodes = selectAll("." + CHECKBOXWRAP + " ." + CHECK2, ulElement);
        var indeterminateNodes = selectAll("." + INDETERMINATE2, ulElement);
        var nodes = selectAll(this.checkDisabledChildren ? "." + LISTITEM : "." + LISTITEM + ":not(." + DISABLE + ")", ulElement);
        var checkBoxEle = element2.getElementsByClassName(CHECKBOXWRAP)[0];
        var count = nodes.length;
        var checkedCount = checkedNodes.length;
        var matchedChildNodes = [];
        var oldChildCount = [];
        var dataUid_1 = element2.getAttribute("data-uid");
        var rootNodeChecked_1 = true;
        var childNodeChecked_1 = false;
        nodes.forEach(function(childNode) {
          if (childNode instanceof HTMLElement) {
            var ariaChecked = childNode.getAttribute("aria-checked");
            if (ariaChecked === "true") {
              childNodeChecked_1 = true;
            } else {
              rootNodeChecked_1 = false;
            }
          }
        });
        var parentNodeChecked = false;
        if (this.element.classList.contains("e-filtering")) {
          var oldCheckedNodes = new DataManager(this.OldCheckedData).executeLocal(new Query().where("parentID", "equal", dataUid_1, true));
          checkedCount = oldCheckedNodes.length;
          var parentNode = new DataManager(this.OldCheckedData).executeLocal(new Query().where("hasChildren", "equal", true, true));
          if (parentNode.length > 0 && childNodeChecked_1 && (this.OldCheckedData.some(function(oldNode) {
            return oldNode.id === dataUid_1;
          }) || this.parentNodeCheck.indexOf(dataUid_1) !== -1)) {
            checkedCount = parentNode.length;
            parentNodeChecked = true;
          }
          var childItems = [];
          if (this.dataType === 1) {
            childItems = new DataManager(this.DDTTreeData).executeLocal(new Query().where(this.fields.parentID, "equal", dataUid_1, true));
          } else {
            childItems = this.getChildNodes(this.DDTTreeData, dataUid_1);
          }
          count = childItems.length;
        }
        if (this.autoCheck && this.showCheckBox && !(this.fields.dataSource instanceof DataManager)) {
          var selectedChildNodeDetails = this.getSelectedChildNodeDetails(dataUid_1);
          matchedChildNodes = selectedChildNodeDetails;
          oldChildCount = new DataManager(this.checkActionNodes).executeLocal(new Query().where("parentID", "equal", dataUid_1, true));
        }
        if (count === 0 && checkedCount === 0) {
          return;
        } else if (count === checkedCount || parentNodeChecked && count > 0 && (oldChildCount.length === matchedChildNodes.length || oldChildCount.length !== matchedChildNodes.length) && oldChildCount.length !== 0 && matchedChildNodes.length !== 0 && rootNodeChecked_1 && this.autoCheck && this.showCheckBox) {
          this.changeState(checkBoxEle, "check", null, true, true);
        } else if (checkedCount > 0 && !parentNodeChecked && this.autoCheck && this.showCheckBox) {
          this.changeState(checkBoxEle, "indeterminate", null, true, true);
        } else if (checkedCount > 0 || indeterminateNodes.length > 0) {
          this.changeState(checkBoxEle, "indeterminate", null, true, true);
        } else if (checkedCount === 0) {
          this.changeState(checkBoxEle, "uncheck", null, true, true);
        }
        var parentUL = closest(element2, "." + PARENTITEM);
        if (!isNullOrUndefined(parentUL)) {
          var currentParent = closest(parentUL, "." + LISTITEM);
          this.ensureParentCheckState(currentParent);
        }
      }
    };
    TreeView2.prototype.getSelectedChildNodeDetails = function(dataUid) {
      var _this = this;
      var childKey = typeof this.fields.child === "string" ? this.fields.child : null;
      var dataId = this.fields.id;
      var parentKey = this.fields.parentID;
      var matchesDataUid = function(childNode) {
        if (!isNullOrUndefined(childKey) && childKey in childNode && Array.isArray(childNode[childKey])) {
          var matchNode = childNode[dataId];
          if (!isNullOrUndefined(matchNode)) {
            return matchNode.toString() === dataUid;
          }
        } else {
          var childNodePid = childNode[parentKey];
          if (!isNullOrUndefined(childNodePid)) {
            return childNodePid.toString() === dataUid;
          }
        }
        return false;
      };
      return this.checkedNodes.map(function(checkedNodeId) {
        return _this.getNodeObject(checkedNodeId);
      }).filter(function(childNode) {
        if (childNode && typeof childNode === "object" && childKey in childNode) {
          return matchesDataUid(childNode);
        } else if (_this.dataType !== 2 && typeof childNode === "object" && (parentKey in childNode || childKey in childNode)) {
          return matchesDataUid(childNode);
        }
        return false;
      });
    };
    TreeView2.prototype.ensureChildCheckState = function(element2, e, isFromExpandAll) {
      var _this = this;
      if (!isNullOrUndefined(element2)) {
        var childElement = select("." + PARENTITEM, element2);
        var checkBoxes = void 0;
        if (!isNullOrUndefined(childElement)) {
          var childCheck = Array.from(childElement.querySelectorAll("li"));
          checkBoxes = selectAll("." + CHECKBOXWRAP, childElement);
          if (this.isFilter) {
            checkBoxes = Array.from(checkBoxes).filter(function(checkbox) {
              var dataUID = checkbox.closest("li").getAttribute("data-uid");
              return dataUID !== null && _this.checkedNodes.indexOf(dataUID) !== -1;
            });
            childCheck = Array.from(childCheck).filter(function(li) {
              var childIds = li.getAttribute("data-uid");
              return childIds !== null && _this.checkedNodes.indexOf(childIds) !== -1;
            });
            if (checkBoxes.length === 0) {
              checkBoxes = selectAll("." + CHECKBOXWRAP, childElement);
              childCheck = Array.from(childElement.querySelectorAll("li"));
            }
          }
          var isChecked = element2.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK2);
          var parentCheck = element2.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(INDETERMINATE2);
          var checkedState = void 0;
          for (var index = 0; index < checkBoxes.length; index++) {
            var childId = childCheck[parseInt(index.toString(), 10)].getAttribute("data-uid");
            if (!isNullOrUndefined(this.currentLoadData) && !isNullOrUndefined(getValue(this.fields.isChecked, this.currentLoadData[parseInt(index.toString(), 10)]))) {
              checkedState = getValue(this.fields.isChecked, this.currentLoadData[parseInt(index.toString(), 10)]) ? "check" : "uncheck";
              if (this.ele !== -1) {
                checkedState = isChecked ? "check" : "uncheck";
              }
              if (checkedState === "uncheck" && !isUndefined(this.parentNodeCheck) && this.autoCheck && this.parentNodeCheck.indexOf(childId) !== -1) {
                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);
                checkedState = "indeterminate";
              }
            } else {
              var isNodeChecked = checkBoxes[parseInt(index.toString(), 10)].getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK2);
              if (isChecked) {
                checkedState = "check";
              } else if (isNodeChecked && !this.isLoaded) {
                checkedState = "check";
              } else if (this.checkedNodes.indexOf(childId) !== -1 && this.isLoaded && (parentCheck || isChecked)) {
                checkedState = "check";
              } else if (childCheck[parseInt(index.toString(), 10)].classList.contains(CHILD) && !isUndefined(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1) {
                checkedState = "indeterminate";
                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);
              } else if (this.dataType === 1 && !isUndefined(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1) {
                checkedState = "indeterminate";
                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);
              } else {
                checkedState = "uncheck";
              }
            }
            this.changeState(checkBoxes[parseInt(index.toString(), 10)], checkedState, e, true, true);
          }
        }
        if (this.autoCheck && this.isLoaded && !isFromExpandAll) {
          this.updateParentCheckState();
        }
      }
    };
    TreeView2.prototype.doCheckBoxAction = function(nodes, doCheck) {
      if (!isNullOrUndefined(nodes)) {
        nodes.reverse();
        for (var len = nodes.length - 1; len >= 0; len--) {
          var liEle = this.getElement(nodes[parseInt(len.toString(), 10)]);
          if (isNullOrUndefined(liEle)) {
            var node = nodes[len - nodes.length] ? nodes[len - nodes.length].toString() : nodes[parseInt(len.toString(), 10)] ? nodes[parseInt(len.toString(), 10)].toString() : null;
            if (node !== "" && doCheck && node) {
              this.setValidCheckedNode(node, nodes);
              this.dynamicCheckState(node, doCheck);
            } else if (this.checkedNodes.indexOf(node) !== -1 && node !== "" && !doCheck) {
              this.checkedNodes.splice(this.checkedNodes.indexOf(node), 1);
              var childItems = this.getChildNodes(this.treeData, node);
              if (childItems) {
                for (var i = 0; i < childItems.length; i++) {
                  var id = childItems[parseInt(i.toString(), 10)][this.fields.id] ? childItems[parseInt(i.toString(), 10)][this.fields.id].toString() : null;
                  if (this.checkedNodes.indexOf(id) !== -1) {
                    this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);
                    var ele = this.element.querySelector('[data-uid="' + id + '"]');
                    if (ele) {
                      this.changeState(ele, "uncheck", null);
                    }
                  }
                }
                if (this.parentNodeCheck.indexOf(node) !== -1) {
                  this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(node), 1);
                }
              }
              if (node) {
                this.dynamicCheckState(node, doCheck);
              }
              this.updateField(this.treeData, this.fields, node, "isChecked", null);
            }
            continue;
          }
          var checkBox = select("." + PARENTITEM + " ." + CHECKBOXWRAP, liEle);
          this.validateCheckNode(checkBox, !doCheck, liEle, null);
        }
      } else {
        var checkBoxes = selectAll("." + CHECKBOXWRAP, this.element);
        if (this.loadOnDemand) {
          for (var index = 0; index < checkBoxes.length; index++) {
            var liEle = closest(checkBoxes[parseInt(index.toString(), 10)], "." + LISTITEM);
            this.updateFieldChecked(checkBoxes[parseInt(index.toString(), 10)], doCheck);
            this.changeState(checkBoxes[parseInt(index.toString(), 10)], doCheck ? "check" : "uncheck", null, null, null, doCheck);
            this.updateOldCheckedData([this.getNodeData(liEle)]);
          }
        } else {
          for (var index = 0; index < checkBoxes.length; index++) {
            var liEle = closest(checkBoxes[parseInt(index.toString(), 10)], "." + LISTITEM);
            this.updateFieldChecked(checkBoxes[parseInt(index.toString(), 10)], doCheck);
            this.changeState(checkBoxes[parseInt(index.toString(), 10)], doCheck ? "check" : "uncheck");
            this.updateOldCheckedData([this.getNodeData(liEle)]);
          }
        }
      }
      if (nodes) {
        for (var j = 0; j < nodes.length - 1; j++) {
          var node = nodes[parseInt(j.toString(), 10)] ? nodes[parseInt(j.toString(), 10)].toString() : "";
          if (!doCheck) {
            this.updateField(this.treeData, this.fields, node, "isChecked", null);
          }
        }
      }
      if (this.autoCheck) {
        this.updateParentCheckState();
      }
    };
    TreeView2.prototype.updateFieldChecked = function(checkbox, doCheck) {
      var currLi = closest(checkbox, "." + LISTITEM);
      var id = currLi.getAttribute("data-uid");
      var nodeDetails = this.getNodeData(currLi);
      if (nodeDetails.isChecked === "true" && !doCheck) {
        this.updateField(this.treeData, this.fields, id, "isChecked", null);
      }
    };
    TreeView2.prototype.dynamicCheckState = function(node, doCheck) {
      if (this.dataType === 1) {
        var count = 0;
        var resultId = new DataManager(this.treeData).executeLocal(new Query().where(this.fields.id, "equal", node, true));
        if (resultId[0]) {
          var id = resultId[0][this.fields.id] ? resultId[0][this.fields.id].toString() : null;
          var parent_1 = resultId[0][this.fields.parentID] ? resultId[0][this.fields.parentID].toString() : null;
          var parentElement = this.element.querySelector('[data-uid="' + parent_1 + '"]');
          var element2 = this.element.querySelector('[data-uid="' + id + '"]');
          var childNodes = this.getChildNodes(this.treeData, parent_1);
          if (childNodes) {
            for (var i = 0; i < childNodes.length; i++) {
              var childId = childNodes[parseInt(i.toString(), 10)][this.fields.id] ? childNodes[parseInt(i.toString(), 10)][this.fields.id].toString() : null;
              if (this.checkedNodes.indexOf(childId) !== -1) {
                count++;
              }
            }
          }
          if (this.checkedNodes.indexOf(node) !== -1 && parentElement && id === node && this.autoCheck) {
            this.changeState(parentElement, "indeterminate", null);
          } else if (this.checkedNodes.indexOf(node) === -1 && element2 && id === node && !doCheck) {
            this.changeState(element2, "uncheck", null);
          } else if (this.checkedNodes.indexOf(node) !== -1 && element2 && id === node && doCheck) {
            this.changeState(element2, "check", null);
          } else if (this.checkedNodes.indexOf(node) === -1 && !element2 && parentElement && id === node && this.autoCheck && count !== 0) {
            this.changeState(parentElement, "indeterminate", null);
          } else if (this.checkedNodes.indexOf(node) === -1 && !element2 && parentElement && id === node && this.autoCheck && count === 0) {
            this.changeState(parentElement, "uncheck", null);
          } else if (!element2 && !parentElement && id === node && this.autoCheck) {
            this.updateIndeterminate(node, doCheck);
          }
        }
      } else if (this.dataType === 2 || this.fields.dataSource instanceof DataManager && this.isOffline) {
        var id = void 0;
        var parentElement = void 0;
        var check = void 0;
        for (var i = 0; i < this.treeData.length; i++) {
          id = this.treeData[parseInt(i.toString(), 10)][this.fields.id] ? this.treeData[parseInt(i.toString(), 10)][this.fields.id].toString() : "";
          parentElement = this.element.querySelector('[data-uid="' + id + '"]');
          check = parentElement ? select("." + CHECK2, parentElement) : null;
          if (this.checkedNodes.indexOf(id) === -1 && parentElement && check && !doCheck) {
            this.changeState(parentElement, "uncheck", null);
          }
          var subChild = getValue(this.fields.child.toString(), this.treeData[parseInt(i.toString(), 10)]);
          if (subChild) {
            this.updateChildIndeterminate(subChild, id, node, doCheck, id);
          }
        }
      }
    };
    TreeView2.prototype.updateIndeterminate = function(node, doCheck) {
      var indeterminateData = this.getTreeData(node);
      var count = 0;
      var parent;
      if (this.dataType === 1) {
        parent = indeterminateData[0][this.fields.parentID] ? indeterminateData[0][this.fields.parentID].toString() : null;
      }
      var childNodes = this.getChildNodes(this.treeData, parent);
      if (childNodes) {
        for (var i = 0; i < childNodes.length; i++) {
          var childId = childNodes[parseInt(i.toString(), 10)][this.fields.id] ? childNodes[parseInt(i.toString(), 10)][this.fields.id].toString() : null;
          if (this.checkedNodes.indexOf(childId) !== -1) {
            count++;
          }
        }
      }
      var parentElement = this.element.querySelector('[data-uid="' + parent + '"]');
      if (parentElement && doCheck) {
        this.changeState(parentElement, "indeterminate", null);
      } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {
        this.changeState(parentElement, "indeterminate", null);
      } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count === 0) {
        this.changeState(parentElement, "uncheck", null);
      } else if (!parentElement) {
        if (!doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) !== -1) {
          this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent), 1);
        } else if (doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) === -1) {
          this.parentNodeCheck.push(parent);
        } else if (!doCheck && this.checkedNodes.indexOf(parent) !== -1 && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {
          this.parentNodeCheck.push(parent);
        }
        this.updateIndeterminate(parent, doCheck);
        if (this.checkedNodes.indexOf(parent) !== -1 && !doCheck) {
          this.checkedNodes.splice(this.checkedNodes.indexOf(parent), 1);
        }
      }
    };
    TreeView2.prototype.updateChildIndeterminate = function(subChild, parent, node, doCheck, child) {
      var count = 0;
      for (var j = 0; j < subChild.length; j++) {
        var subId = subChild[parseInt(j.toString(), 10)][this.fields.id] ? subChild[parseInt(j.toString(), 10)][this.fields.id].toString() : "";
        if (this.checkedNodes.indexOf(subId) !== -1) {
          count++;
        }
        var parentElement = this.element.querySelector('[data-uid="' + parent + '"]');
        var indeterminate = parentElement ? select("." + INDETERMINATE2, parentElement) : null;
        var check = parentElement ? select("." + CHECK2, parentElement) : null;
        var element2 = this.element.querySelector('[data-uid="' + subId + '"]');
        var childElementCheck = element2 ? select("." + CHECK2, element2) : null;
        if (this.checkedNodes.indexOf(node) !== -1 && parentElement && subId === node && this.autoCheck) {
          this.changeState(parentElement, "indeterminate", null);
        } else if (this.checkedNodes.indexOf(node) === -1 && parentElement && !element2 && subId === node && !doCheck) {
          if (this.autoCheck) {
            this.changeState(parentElement, "uncheck", null);
          } else {
            if (count !== 0) {
              this.changeState(parentElement, "indeterminate", null);
            } else {
              this.changeState(parentElement, "uncheck", null);
            }
          }
        } else if (this.checkedNodes.indexOf(node) === -1 && element2 && subId === node && !doCheck) {
          this.changeState(element2, "uncheck", null);
        } else if (this.checkedNodes.indexOf(node) === -1 && indeterminate && subId === node && this.autoCheck && count === 0 && !doCheck) {
          indeterminate.classList.remove(INDETERMINATE2);
        } else if (this.checkedNodes.indexOf(node) === -1 && !element2 && check && subId === node && count === 0) {
          this.changeState(parentElement, "uncheck", null);
        } else if (this.checkedNodes.indexOf(subId) === -1 && element2 && childElementCheck && count === 0) {
          this.changeState(element2, "uncheck", null);
        } else if (!element2 && !parentElement && subId === node || this.parentNodeCheck.indexOf(parent) !== -1 && this.autoCheck) {
          var childElement = this.element.querySelector('[data-uid="' + child + '"]');
          if (doCheck && count !== 0) {
            this.changeState(childElement, "indeterminate", null);
          } else if (doCheck && count === subChild.length && this.checkedNodes.indexOf(parent) === -1) {
            this.checkDisabledState(parent);
          } else if (!doCheck && count === 0 && this.parentNodeCheck.indexOf(parent) !== -1) {
            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent));
          }
          if (this.parentNodeCheck.indexOf(parent) === -1) {
            this.parentNodeCheck.push(parent);
          }
        }
        var innerChild = getValue(this.fields.child.toString(), subChild[parseInt(j.toString(), 10)]);
        if (innerChild) {
          this.updateChildIndeterminate(innerChild, subId, node, doCheck, child);
        }
      }
    };
    TreeView2.prototype.changeState = function(wrapper, state, e, isPrevent, isAdd, doCheck) {
      var _this = this;
      var eventArgs;
      var currLi = closest(wrapper, "." + LISTITEM);
      if (!this.checkDisabledChildren && currLi && (currLi.classList.contains(DISABLE) || this.disableNode && this.disableNode.indexOf(currLi.getAttribute("data-uid")) !== -1)) {
        return;
      }
      if (wrapper === currLi) {
        wrapper = select("." + CHECKBOXWRAP, currLi);
      }
      if (!isPrevent) {
        this.checkActionNodes = [];
        eventArgs = this.getCheckEvent(currLi, state, e);
        this.trigger("nodeChecking", eventArgs, function(observedArgs) {
          if (!observedArgs.cancel) {
            _this.nodeCheckAction(wrapper, state, currLi, observedArgs, e, isPrevent, isAdd, doCheck);
          }
        });
      } else {
        this.nodeCheckAction(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck);
      }
    };
    TreeView2.prototype.nodeCheckAction = function(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck) {
      var ariaState;
      var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];
      if (state === "check" && !frameSpan.classList.contains(CHECK2)) {
        frameSpan.classList.remove(INDETERMINATE2);
        frameSpan.classList.add(CHECK2);
        this.addCheck(currLi);
        ariaState = "true";
      } else if (state === "uncheck" && (frameSpan.classList.contains(CHECK2) || frameSpan.classList.contains(INDETERMINATE2))) {
        removeClass([frameSpan], [CHECK2, INDETERMINATE2]);
        this.removeCheck(currLi);
        ariaState = "false";
      } else if (state === "indeterminate" && this.autoCheck) {
        frameSpan.classList.remove(CHECK2);
        frameSpan.classList.add(INDETERMINATE2);
        this.removeCheck(currLi);
        ariaState = "mixed";
      }
      ariaState = state === "check" ? "true" : state === "uncheck" ? "false" : ariaState;
      if (!isNullOrUndefined(ariaState)) {
        currLi.setAttribute("aria-checked", ariaState);
      }
      if (isAdd) {
        var data = [].concat([], this.checkActionNodes);
        eventArgs = this.getCheckEvent(currLi, state, e);
        if (isUndefined(isPrevent)) {
          eventArgs.data = data;
        }
      }
      if (doCheck !== void 0) {
        this.ensureStateChange(currLi, doCheck);
      }
      if (!isPrevent) {
        if (!isNullOrUndefined(ariaState)) {
          currLi.setAttribute("aria-checked", ariaState);
          eventArgs.data[0].checked = ariaState;
          this.trigger("nodeChecked", eventArgs);
          this.checkActionNodes = [];
        }
      }
    };
    TreeView2.prototype.addCheck = function(liEle) {
      var id = liEle.getAttribute("data-uid");
      if (!isNullOrUndefined(id) && this.checkedNodes.indexOf(id) === -1) {
        this.checkDisabledState(id);
      }
    };
    TreeView2.prototype.removeCheck = function(liEle) {
      var index = this.checkedNodes.indexOf(liEle.getAttribute("data-uid"));
      if (index > -1) {
        this.checkedNodes.splice(index, 1);
      }
    };
    TreeView2.prototype.getCheckEvent = function(currLi, action, e) {
      this.checkActionNodes.push(this.getNodeData(currLi));
      var nodeData = this.checkActionNodes;
      return {
        action,
        cancel: false,
        isInteracted: isNullOrUndefined(e) ? false : true,
        node: currLi,
        data: nodeData
      };
    };
    TreeView2.prototype.finalize = function() {
      var firstUl = select("." + PARENTITEM, this.element);
      if (!isNullOrUndefined(firstUl)) {
        firstUl.setAttribute("role", treeAriaAttr.treeRole);
        this.setMultiSelect(this.allowMultiSelection);
        this.setNodeFocusable();
        if (this.allowTextWrap) {
          this.updateWrap();
        }
        this.renderReactTemplates();
        this.hasPid = this.rootData[0] ? Object.prototype.hasOwnProperty.call(this.rootData[0], this.fields.parentID) : false;
        this.doExpandAction();
      }
    };
    TreeView2.prototype.setTextWrap = function() {
      (this.allowTextWrap ? addClass : removeClass)([this.element], LISTWRAP);
      if (Browser.isIE) {
        (this.allowTextWrap ? addClass : removeClass)([this.element], IELISTWRAP);
      }
    };
    TreeView2.prototype.updateWrap = function(ulEle) {
      if (!this.fullRowSelect) {
        return;
      }
      var liEle = ulEle ? selectAll("." + LISTITEM, ulEle) : this.liList;
      var length = liEle.length;
      for (var i = 0; i < length; i++) {
        this.calculateWrap(liEle[parseInt(i.toString(), 10)]);
      }
    };
    TreeView2.prototype.calculateWrap = function(liEle) {
      var element2 = select("." + FULLROW, liEle);
      if (element2 && element2.nextElementSibling) {
        element2.style.height = this.allowTextWrap ? element2.nextElementSibling.offsetHeight + "px" : "";
      }
    };
    TreeView2.prototype.doExpandAction = function() {
      var _this = this;
      var eUids = this.expandedNodes;
      if (!this.loadOnDemand && this.fields.dataSource instanceof DataManager) {
        this.isInitalExpand = this.treeData.filter(function(e) {
          return e[_this.fields.expanded] === true;
        }).length > 0 ? true : this.isInitalExpand;
      }
      if (this.isInitalExpand && eUids.length > 0) {
        this.setProperties({
          expandedNodes: []
        }, true);
        if (this.fields.dataSource instanceof DataManager) {
          this.expandGivenNodes(eUids);
        } else {
          for (var i = 0; i < eUids.length; i++) {
            var eNode = select('[data-uid="' + eUids[parseInt(i.toString(), 10)] + '"]', this.element);
            if (!isNullOrUndefined(eNode)) {
              var icon = select("." + EXPANDABLE, select("." + TEXTWRAP, eNode));
              if (!isNullOrUndefined(icon)) {
                this.expandAction(eNode, icon, null);
              }
            } else {
              if (eUids[parseInt(i.toString(), 10)] && this.expandChildren.indexOf(eUids[parseInt(i.toString(), 10)]) === -1) {
                this.expandChildren.push(eUids[parseInt(i.toString(), 10)].toString());
              }
              continue;
            }
          }
          this.afterFinalized();
        }
      } else {
        this.afterFinalized();
      }
    };
    TreeView2.prototype.expandGivenNodes = function(arr) {
      var _this = this;
      this.expandCallback(arr[this.index], function() {
        _this.index++;
        if (_this.index < arr.length) {
          _this.expandGivenNodes(arr);
        } else {
          _this.afterFinalized();
        }
      });
      if (this.index > 0) {
        this.index = 0;
      }
    };
    TreeView2.prototype.expandCallback = function(eUid, callback) {
      var eNode = select('[data-uid="' + eUid + '"]', this.element);
      if (!isNullOrUndefined(eNode)) {
        var icon = select("." + EXPANDABLE, select("." + TEXTWRAP, eNode));
        if (!isNullOrUndefined(icon)) {
          this.expandAction(eNode, icon, null, false, callback);
        }
        callback();
      } else {
        callback();
      }
    };
    TreeView2.prototype.afterFinalized = function() {
      this.doSelectionAction();
      this.updateCheckedProp();
      this.isAnimate = true;
      this.isInitalExpand = false;
      if ((!this.isLoaded || this.isFieldChange) && !this.isNodeDropped) {
        var eventArgs = {
          data: this.treeData
        };
        this.trigger("dataBound", eventArgs);
      }
      this.isLoaded = true;
      this.isNodeDropped = false;
    };
    TreeView2.prototype.doSelectionAction = function() {
      var sNodes = selectAll("." + SELECTED3, this.element);
      var sUids = this.selectedNodes;
      if (sUids.length > 0) {
        this.setProperties({
          selectedNodes: []
        }, true);
        for (var i = 0; i < sUids.length; i++) {
          var sNode = select('[data-uid="' + sUids[parseInt(i.toString(), 10)] + '"]', this.element);
          if (sNode && !sNode.classList.contains("e-active")) {
            this.selectNode(sNode, null, true);
          } else {
            this.selectedNodes.push(sUids[parseInt(i.toString(), 10)]);
          }
          if (!this.allowMultiSelection) {
            break;
          }
        }
      } else {
        this.selectGivenNodes(sNodes);
      }
      removeClass(sNodes, SELECTED3);
    };
    TreeView2.prototype.selectGivenNodes = function(sNodes) {
      for (var i = 0; i < sNodes.length; i++) {
        if (!sNodes[parseInt(i.toString(), 10)].classList.contains("e-disable")) {
          this.selectNode(sNodes[parseInt(i.toString(), 10)], null, true);
        }
        if (!this.allowMultiSelection) {
          break;
        }
      }
    };
    TreeView2.prototype.clickHandler = function(event2) {
      var target = Browser.isDevice && event2.originalEvent.changedTouches && !Browser.isIos ? document.elementFromPoint(event2.originalEvent.changedTouches[0].clientX, event2.originalEvent.changedTouches[0].clientY) : event2.originalEvent.target;
      EventHandler.remove(this.element, "contextmenu", this.preventContextMenu);
      if (!target || this.dragStartAction) {
        return;
      } else {
        var classList2 = target.classList;
        var li = closest(target, "." + LISTITEM);
        if (!li || li.classList.contains(PREVENTSELECT) && !(classList2.contains(EXPANDABLE) || classList2.contains(COLLAPSIBLE))) {
          return;
        } else if (event2.originalEvent.which !== 3) {
          var rippleElement = select("." + RIPPLEELMENT, li);
          var rippleIcons = select("." + ICON3, li);
          this.removeHover();
          this.setFocusElement(li);
          var isExpandCollapseIcon = classList2.contains(EXPANDABLE) || classList2.contains(COLLAPSIBLE);
          if (this.showCheckBox && !li.classList.contains("e-disable") && !isExpandCollapseIcon) {
            var checkWrapper = this.checkOnClick ? select("." + CHECKBOXWRAP, li) : closest(target, "." + CHECKBOXWRAP);
            if (!isNullOrUndefined(checkWrapper)) {
              var checkElement = select("." + CHECKBOXFRAME, checkWrapper);
              this.validateCheckNode(checkWrapper, checkElement.classList.contains(CHECK2), li, event2.originalEvent);
              this.triggerClickEvent(event2.originalEvent, li);
              return;
            }
          }
          if (classList2.contains(EXPANDABLE)) {
            this.expandAction(li, target, event2);
          } else if (classList2.contains(COLLAPSIBLE)) {
            this.collapseNode(li, target, event2);
          } else if (rippleElement && rippleIcons) {
            if (rippleIcons.classList.contains(RIPPLE4) && rippleIcons.classList.contains(EXPANDABLE)) {
              this.expandAction(li, rippleIcons, event2);
            } else if (rippleIcons.classList.contains(RIPPLE4) && rippleIcons.classList.contains(COLLAPSIBLE)) {
              this.collapseNode(li, rippleIcons, event2);
            } else if (!classList2.contains(PARENTITEM) && !classList2.contains(LISTITEM)) {
              this.toggleSelect(li, event2.originalEvent, false);
            }
          } else {
            if (!classList2.contains(PARENTITEM) && !classList2.contains(LISTITEM)) {
              this.toggleSelect(li, event2.originalEvent, false);
            }
          }
        }
        if (event2.originalEvent.which === 3) {
          this.isRightClick = true;
        }
        this.triggerClickEvent(event2.originalEvent, li);
      }
    };
    TreeView2.prototype.nodeCheckedEvent = function(wrapper, isCheck, e) {
      var eventArgs = this.getCheckEvent(wrapper, isCheck ? "uncheck" : "check", e);
      eventArgs.data = eventArgs.data.splice(0, eventArgs.data.length - 1);
      this.trigger("nodeChecked", eventArgs);
    };
    TreeView2.prototype.updateOldCheckedData = function(data) {
      var _this = this;
      var dataManager = new DataManager(data);
      var childItems = dataManager.executeLocal(new Query().where("isChecked", "equal", "true", true));
      var uncheckedItems = dataManager.executeLocal(new Query().where("isChecked", "equal", "false", true));
      if (uncheckedItems.length > 0) {
        var index = this.OldCheckedData.findIndex(function(e) {
          return e["id"] === uncheckedItems[0]["id"];
        });
        if (index !== -1) {
          this.OldCheckedData.splice(index, 1);
          var childNodes = this.OldCheckedData.filter(function(e) {
            return e["parentID"] === uncheckedItems[0]["id"];
          });
          if (childNodes.length > 0) {
            childNodes.forEach(function(child) {
              var childIndex = _this.OldCheckedData.findIndex(function(e) {
                return e["id"] === child.id;
              });
              if (childIndex !== -1) {
                _this.OldCheckedData.splice(childIndex, 1);
              }
            });
          }
          return;
        }
      }
      if (childItems.length > 0) {
        var index = this.OldCheckedData.findIndex(function(e) {
          return e["id"] === childItems[0]["id"];
        });
        if (index === -1) {
          this.OldCheckedData.push(childItems[0]);
          return;
        }
      }
    };
    TreeView2.prototype.triggerClickEvent = function(e, li) {
      var eventArgs = {
        event: e,
        node: li
      };
      this.trigger("nodeClicked", eventArgs);
    };
    TreeView2.prototype.expandNode = function(currLi, icon, loaded) {
      var _this = this;
      this.renderReactTemplates();
      if (icon.classList.contains(LOAD)) {
        this.hideSpinner(icon);
      }
      if (!this.initialRender) {
        icon.classList.add("interaction");
      }
      if (loaded !== true || loaded === true && currLi.classList.contains("e-expanded")) {
        if (this.preventExpand !== true) {
          removeClass([icon], EXPANDABLE);
          addClass([icon], COLLAPSIBLE);
          var start_1 = 0;
          var end_1 = 0;
          var ul_1 = select("." + PARENTITEM, currLi);
          var liEle_1 = currLi;
          if (this.isAnimate && !this.isRefreshed) {
            this.setHeight(liEle_1, ul_1);
            var activeElement_1 = select("." + LISTITEM + "." + ACTIVE2, currLi);
            this.aniObj.animate(ul_1, {
              name: this.animation.expand.effect,
              duration: this.animation.expand.duration === 0 && animationMode === "Enable" ? 400 : this.animation.expand.duration,
              timingFunction: this.animation.expand.easing,
              begin: function() {
                liEle_1.style.overflow = "hidden";
                if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {
                  activeElement_1.classList.add(ITEM_ANIMATION_ACTIVE);
                }
                start_1 = liEle_1.offsetHeight;
                end_1 = select("." + TEXTWRAP, currLi).offsetHeight;
              },
              progress: function(args) {
                args.element.style.display = "block";
                _this.animateHeight(args, start_1, end_1);
              },
              end: function(args) {
                args.element.style.display = "block";
                if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {
                  activeElement_1.classList.remove(ITEM_ANIMATION_ACTIVE);
                }
                _this.expandedNode(liEle_1, ul_1, icon);
              }
            });
          } else {
            this.expandedNode(liEle_1, ul_1, icon);
          }
        }
      } else {
        var ul = select("." + PARENTITEM, currLi);
        ul.style.display = "none";
        if (this.fields.dataSource instanceof DataManager === true) {
          this.preventExpand = false;
        }
      }
      if (this.initialRender) {
        icon.classList.add("interaction");
      }
    };
    TreeView2.prototype.expandedNode = function(currLi, ul, icon) {
      ul.style.display = "block";
      currLi.style.display = "block";
      currLi.style.overflow = "";
      currLi.style.height = "";
      removeClass([icon], PROCESS);
      this.addExpand(currLi);
      if (this.allowTextWrap && this.isLoaded && this.isFirstRender) {
        this.updateWrap(currLi);
        this.isFirstRender = false;
      }
      if (this.isLoaded && this.expandArgs && !this.isRefreshed) {
        this.expandArgs = this.getExpandEvent(currLi, null);
        this.expandArgs.isInteracted = this.isInteracted;
        this.trigger("nodeExpanded", this.expandArgs);
      }
      if (this.isHiddenItem) {
        this.collapseAll([this.getNodeData(currLi).id]);
      }
    };
    TreeView2.prototype.addExpand = function(liEle) {
      liEle.setAttribute("aria-expanded", "true");
      removeClass([liEle], NODECOLLAPSED);
      var id = liEle.getAttribute("data-uid");
      if (!isNullOrUndefined(id) && this.expandedNodes.indexOf(id) === -1) {
        this.expandedNodes.push(id);
      }
    };
    TreeView2.prototype.collapseNode = function(currLi, icon, e) {
      var _this = this;
      if (icon.classList.contains(PROCESS)) {
        return;
      } else {
        addClass([icon], PROCESS);
      }
      var colArgs;
      if (this.isLoaded) {
        colArgs = this.getExpandEvent(currLi, e);
        this.isInteracted = colArgs.isInteracted;
        this.trigger("nodeCollapsing", colArgs, function(observedArgs) {
          if (observedArgs.cancel) {
            removeClass([icon], PROCESS);
          } else {
            _this.nodeCollapseAction(currLi, icon, observedArgs);
          }
        });
      } else {
        this.nodeCollapseAction(currLi, icon, colArgs);
      }
    };
    TreeView2.prototype.nodeCollapseAction = function(currLi, icon, colArgs) {
      var _this = this;
      removeClass([icon], COLLAPSIBLE);
      addClass([icon], EXPANDABLE);
      var start = 0;
      var end = 0;
      var ul = select("." + PARENTITEM, currLi);
      var liEle = currLi;
      var activeElement = select("." + LISTITEM + "." + ACTIVE2, currLi);
      if (this.isAnimate) {
        this.aniObj.animate(ul, {
          name: this.animation.collapse.effect,
          duration: this.animation.collapse.duration === 0 && animationMode === "Enable" ? 400 : this.animation.collapse.duration,
          timingFunction: this.animation.collapse.easing,
          begin: function() {
            liEle.style.overflow = "hidden";
            if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {
              activeElement.classList.add(ITEM_ANIMATION_ACTIVE);
            }
            start = select("." + TEXTWRAP, currLi).offsetHeight;
            end = liEle.offsetHeight;
          },
          progress: function(args) {
            _this.animateHeight(args, start, end);
          },
          end: function(args) {
            args.element.style.display = "none";
            if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {
              activeElement.classList.remove(ITEM_ANIMATION_ACTIVE);
            }
            _this.collapsedNode(liEle, ul, icon, colArgs);
          }
        });
      } else {
        this.collapsedNode(liEle, ul, icon, colArgs);
      }
    };
    TreeView2.prototype.collapsedNode = function(liEle, ul, icon, colArgs) {
      ul.style.display = "none";
      liEle.style.overflow = "";
      liEle.style.height = "";
      removeClass([icon], PROCESS);
      this.removeExpand(liEle);
      if (this.isLoaded) {
        colArgs = this.getExpandEvent(liEle, null);
        colArgs.isInteracted = this.isInteracted;
        this.trigger("nodeCollapsed", colArgs);
      }
    };
    TreeView2.prototype.removeExpand = function(liEle, toRemove) {
      if (toRemove) {
        liEle.removeAttribute("aria-expanded");
      } else {
        this.disableExpandAttr(liEle);
      }
      var index = this.expandedNodes.indexOf(liEle.getAttribute("data-uid"));
      if (index > -1) {
        this.expandedNodes.splice(index, 1);
      }
    };
    TreeView2.prototype.disableExpandAttr = function(liEle) {
      liEle.setAttribute("aria-expanded", "false");
      addClass([liEle], NODECOLLAPSED);
    };
    TreeView2.prototype.setHeight = function(currLi, ul) {
      ul.style.display = "block";
      ul.style.visibility = "hidden";
      currLi.style.height = currLi.offsetHeight + "px";
      ul.style.display = "none";
      ul.style.visibility = "";
    };
    TreeView2.prototype.animateHeight = function(args, start, end) {
      if (isNullOrUndefined(args.element.parentElement)) {
        return;
      }
      var remaining = (args.duration - args.timeStamp) / args.duration;
      var currentHeight = (end - start) * remaining + start;
      args.element.parentElement.style.height = currentHeight + "px";
    };
    TreeView2.prototype.renderChildNodes = function(parentLi, expandChild, callback, loaded, isFromExpandAll) {
      var _this = this;
      var eicon = select("div." + ICON3, parentLi);
      if (isNullOrUndefined(eicon)) {
        return;
      }
      this.showSpinner(eicon);
      var childItems;
      if (this.fields.dataSource instanceof DataManager) {
        var level = this.parents(parentLi, "." + PARENTITEM).length;
        var mapper_2 = this.getChildFields(this.fields, level, 1);
        if (isNullOrUndefined(mapper_2) || isNullOrUndefined(mapper_2.dataSource)) {
          detach(eicon);
          this.removeExpand(parentLi, true);
          return;
        }
        this.treeList.push("false");
        if (this.fields.dataSource instanceof DataManager && this.isOffline) {
          this.treeList.pop();
          childItems = this.getChildNodes(this.treeData, parentLi.getAttribute("data-uid"));
          this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);
        } else {
          mapper_2.dataSource.executeQuery(this.getQuery(mapper_2, parentLi.getAttribute("data-uid"))).then(function(e) {
            _this.treeList.pop();
            childItems = e.result;
            if (_this.dataType === 1) {
              _this.dataType = 2;
            }
            _this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);
          }).catch(function(e) {
            _this.trigger("actionFailure", {
              error: e
            });
          });
        }
      } else {
        childItems = this.getChildNodes(this.treeData, parentLi.getAttribute("data-uid"), false, parseFloat(parentLi.getAttribute("aria-level")) + 1);
        this.currentLoadData = this.getSortedData(childItems);
        if (isNullOrUndefined(childItems) || childItems.length === 0) {
          detach(eicon);
          if (eicon.classList.contains(LOAD)) {
            this.hideSpinner(eicon);
          }
          this.removeExpand(parentLi, true);
          return;
        } else {
          this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute("aria-level")) + 1;
          parentLi.appendChild(ListBase.createList(this.createElement, this.currentLoadData, this.listBaseOption));
          this.expandNode(parentLi, eicon, loaded);
          this.setSelectionForChildNodes(childItems);
          this.ensureCheckNode(parentLi, isFromExpandAll);
          this.finalizeNode(parentLi, isFromExpandAll, expandChild);
          this.disableTreeNodes(childItems);
          this.renderSubChild(parentLi, expandChild, loaded, isFromExpandAll);
        }
      }
    };
    TreeView2.prototype.loadChild = function(childItems, mapper, eicon, parentLi, expandChild, callback, loaded) {
      this.currentLoadData = childItems;
      if (isNullOrUndefined(childItems) || childItems.length === 0) {
        detach(eicon);
        this.removeExpand(parentLi, true);
      } else {
        this.updateListProp(mapper);
        if (this.fields.dataSource instanceof DataManager && !this.isOffline) {
          var id = parentLi.getAttribute("data-uid");
          var nodeData = this.getNodeObject(id);
          setValue("child", childItems, nodeData);
        }
        this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute("aria-level")) + 1;
        parentLi.appendChild(ListBase.createList(this.createElement, childItems, this.listBaseOption));
        this.expandNode(parentLi, eicon, loaded);
        this.setSelectionForChildNodes(childItems);
        this.ensureCheckNode(parentLi);
        this.finalizeNode(parentLi);
        this.disableTreeNodes(childItems);
        this.renderSubChild(parentLi, expandChild, loaded);
      }
      if (callback) {
        callback();
      }
      if (expandChild) {
        this.expandedNodes.push(parentLi.getAttribute("data-uid"));
      }
      if (this.treeList.length === 0 && !this.isLoaded) {
        this.finalize();
      }
    };
    TreeView2.prototype.disableTreeNodes = function(childItems) {
      if (isNullOrUndefined(this.disableNode) || this.disableNode.length === 0) {
        return;
      }
      var i = 0;
      while (i < childItems.length) {
        var id = childItems[parseInt(i.toString(), 10)][this.fields.id] ? childItems[parseInt(i.toString(), 10)][this.fields.id].toString() : null;
        if (this.disableNode !== void 0 && this.disableNode.indexOf(id) !== -1) {
          this.doDisableAction([id]);
        }
        i++;
      }
    };
    TreeView2.prototype.setSelectionForChildNodes = function(nodes) {
      if (isNullOrUndefined(this.selectedNodes) || this.selectedNodes.length === 0) {
        return;
      }
      var i;
      for (i = 0; i < nodes.length; i++) {
        var id = nodes[parseInt(i.toString(), 10)][this.fields.id] ? nodes[parseInt(i.toString(), 10)][this.fields.id].toString() : null;
        if (this.selectedNodes !== void 0 && this.selectedNodes.indexOf(id) !== -1) {
          this.doSelectionAction();
        }
      }
    };
    TreeView2.prototype.ensureCheckNode = function(element2, isFromExpandAll) {
      if (this.showCheckBox) {
        this.ele = this.checkedElement ? this.checkedElement.indexOf(element2.getAttribute("data-uid")) : null;
        if (this.autoCheck) {
          this.ensureChildCheckState(element2, null, isFromExpandAll);
          if (isFromExpandAll ? select("." + CHECK2, this.element) || select("." + INDETERMINATE2, this.element) : true) {
            this.ensureParentCheckState(element2);
          }
        }
      }
      this.currentLoadData = null;
    };
    TreeView2.prototype.getFields = function(mapper, nodeLevel, dataLevel) {
      if (nodeLevel === dataLevel) {
        return mapper;
      } else {
        return this.getFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);
      }
    };
    TreeView2.prototype.getChildFields = function(mapper, nodeLevel, dataLevel) {
      if (nodeLevel === dataLevel) {
        return this.getChildMapper(mapper);
      } else {
        return this.getChildFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);
      }
    };
    TreeView2.prototype.getChildMapper = function(mapper) {
      return typeof mapper.child === "string" || isNullOrUndefined(mapper.child) ? mapper : mapper.child;
    };
    TreeView2.prototype.getChildNodes = function(obj, parentId, isRoot, level) {
      var _this = this;
      if (isRoot === void 0) {
        isRoot = false;
      }
      var childNodes;
      if (isNullOrUndefined(obj)) {
        return childNodes;
      }
      if (this.dataType === 1) {
        return this.getChildGroup(this.groupedData, parentId, isRoot);
      }
      if (typeof this.fields.child === "string") {
        return this.findChildNodes(obj, this.fields.id, parentId) || this.findNestedChildNodes(obj, parentId, level) || [];
      }
      if (this.isChildObject()) {
        var tempField = !isNullOrUndefined(level) ? this.fields : this.fields.child;
        var i = 1;
        while (i < level) {
          if (!isNullOrUndefined(tempField.child)) {
            tempField = tempField.child;
          } else {
            break;
          }
          i++;
        }
        this.updateListProp(tempField);
        var index = obj.findIndex(function(data) {
          return getValue(_this.fields.id, data) && getValue(_this.fields.id, data).toString() === parentId;
        });
        if (index !== -1) {
          return getValue("child", obj[parseInt(index.toString(), 10)]);
        }
        if (index === -1) {
          for (var i_1 = 0, objlen = obj.length; i_1 < objlen; i_1++) {
            var tempArray = getValue("child", obj[parseInt(i_1.toString(), 10)]);
            var childIndex = !isNullOrUndefined(tempArray) ? tempArray.findIndex(function(data) {
              return getValue(_this.fields.child.id, data) && getValue(_this.fields.child.id, data).toString() === parentId;
            }) : -1;
            if (childIndex !== -1) {
              return getValue("child", tempArray[parseInt(childIndex.toString(), 10)]);
            } else if (!isNullOrUndefined(tempArray)) {
              childNodes = this.getChildNodes(tempArray, parentId, false, level);
              if (childNodes !== void 0) {
                break;
              }
            }
          }
        }
      }
      return childNodes;
    };
    TreeView2.prototype.findChildNodes = function(items, idField, parentId) {
      var index = items.findIndex(function(data) {
        var value = getValue(idField, data);
        return value && value.toString() === parentId;
      });
      if (index !== -1) {
        return getValue(this.fields.child, items[index]);
      }
      return null;
    };
    TreeView2.prototype.findNestedChildNodes = function(items, parentId, level) {
      for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
        var item = items_1[_i];
        var tempArray = getValue(this.fields.child, item);
        if (!isNullOrUndefined(tempArray)) {
          var childNodes = this.findChildNodes(tempArray, this.fields.id, parentId);
          if (childNodes) {
            return childNodes;
          }
          var nestedChildNodes = this.getChildNodes(tempArray, parentId, false, level);
          if (nestedChildNodes && nestedChildNodes.length > 0) {
            return nestedChildNodes;
          }
        }
      }
      return void 0;
    };
    TreeView2.prototype.getChildGroup = function(data, parentId, isRoot) {
      var childNodes = [];
      if (isNullOrUndefined(data)) {
        return childNodes;
      }
      for (var i = 0, objlen = data.length; i < objlen; i++) {
        if (!isNullOrUndefined(data[parseInt(i.toString(), 10)][0]) && !isNullOrUndefined(getValue(this.fields.parentID, data[parseInt(i.toString(), 10)][0]))) {
          if (getValue(this.fields.parentID, data[parseInt(i.toString(), 10)][0]).toString() === parentId) {
            return data[parseInt(i.toString(), 10)];
          }
        } else if (isRoot) {
          return data[parseInt(i.toString(), 10)];
        }
      }
      return childNodes;
    };
    TreeView2.prototype.renderSubChild = function(element2, expandChild, loaded, isFromExpandAll) {
      if (expandChild) {
        var cIcons = selectAll("." + EXPANDABLE, element2);
        for (var i = 0, len = cIcons.length; i < len; i++) {
          var icon = cIcons[parseInt(i.toString(), 10)];
          if (element2.querySelector(".e-icons") !== cIcons[parseInt(i.toString(), 10)]) {
            var curLi = closest(icon, "." + LISTITEM);
            this.expandArgs = this.getExpandEvent(curLi, null);
            if (loaded !== true) {
              this.trigger("nodeExpanding", this.expandArgs);
            }
            this.renderChildNodes(curLi, expandChild, null, loaded, isFromExpandAll);
          }
        }
      }
    };
    TreeView2.prototype.toggleSelect = function(li, e, multiSelect) {
      if (!li.classList.contains("e-disable")) {
        if (this.allowMultiSelection && (e && e.ctrlKey || multiSelect) && this.isActive(li)) {
          this.unselectNode(li, e);
        } else {
          this.selectNode(li, e, multiSelect);
        }
      }
    };
    TreeView2.prototype.isActive = function(li) {
      return li.classList.contains(ACTIVE2) ? true : false;
    };
    TreeView2.prototype.selectNode = function(li, e, multiSelect) {
      var _this = this;
      if (isNullOrUndefined(li) || !this.allowMultiSelection && this.isActive(li) && !isNullOrUndefined(e)) {
        if (this.checkOnClick) {
          var checkboxElement = select(" ." + CHECKBOXFRAME, li);
          if (!isNullOrUndefined(checkboxElement) && checkboxElement.classList.contains(CHECK2)) {
            addClass([li], ACTIVE2);
          } else {
            removeClass([li], ACTIVE2);
          }
        }
        this.setFocusElement(li);
        return;
      }
      var eventArgs;
      if (this.isLoaded) {
        eventArgs = this.getSelectEvent(li, "select", e);
        this.trigger("nodeSelecting", eventArgs, function(observedArgs) {
          if (!observedArgs.cancel && !observedArgs.node.classList.contains(PREVENTSELECT)) {
            _this.nodeSelectAction(li, e, observedArgs, multiSelect);
          }
        });
      } else {
        this.nodeSelectAction(li, e, eventArgs, multiSelect);
      }
    };
    TreeView2.prototype.nodeSelectAction = function(li, e, eventArgs, multiSelect) {
      if (!this.allowMultiSelection || !multiSelect && (!e || e && !(e.ctrlKey || e.metaKey))) {
        this.removeSelectAll();
      }
      if (this.allowMultiSelection && e && e.shiftKey) {
        if (!this.startNode) {
          this.startNode = li;
        }
        var startIndex = this.liList.indexOf(this.startNode);
        var endIndex = this.liList.indexOf(li);
        if (startIndex > endIndex) {
          var temp = startIndex;
          startIndex = endIndex;
          endIndex = temp;
        }
        for (var i = startIndex; i <= endIndex; i++) {
          var currNode = this.liList[parseInt(i.toString(), 10)];
          if (isVisible(currNode) && !currNode.classList.contains("e-disable")) {
            this.addSelect(currNode);
          }
        }
      } else {
        this.startNode = li;
        this.addSelect(li);
      }
      if (this.isLoaded) {
        eventArgs.nodeData = this.getNodeData(li);
        this.trigger("nodeSelected", eventArgs);
        this.isRightClick = false;
      }
      this.isRightClick = false;
    };
    TreeView2.prototype.unselectNode = function(li, e) {
      var _this = this;
      var eventArgs;
      if (this.isLoaded) {
        eventArgs = this.getSelectEvent(li, "un-select", e);
        this.trigger("nodeSelecting", eventArgs, function(observedArgs) {
          if (!observedArgs.cancel) {
            _this.nodeUnselectAction(li, observedArgs);
          }
        });
      } else {
        this.nodeUnselectAction(li, eventArgs);
      }
    };
    TreeView2.prototype.nodeUnselectAction = function(li, eventArgs) {
      this.removeSelect(li);
      this.setFocusElement(li);
      if (this.isLoaded) {
        eventArgs.nodeData = this.getNodeData(li);
        this.trigger("nodeSelected", eventArgs);
      }
    };
    TreeView2.prototype.setFocusElement = function(li) {
      if (!isNullOrUndefined(li)) {
        var focusedNode = this.getFocusedNode();
        if (focusedNode) {
          removeClass([focusedNode], FOCUS);
          focusedNode.setAttribute("tabindex", "-1");
        }
        addClass([li], FOCUS);
        li.setAttribute("tabindex", "0");
        EventHandler.add(li, "blur", this.focusOut, this);
        this.updateIdAttr(focusedNode, li);
      }
    };
    TreeView2.prototype.addSelect = function(liEle) {
      liEle.setAttribute("aria-selected", "true");
      addClass([liEle], ACTIVE2);
      var id = liEle.getAttribute("data-uid");
      if (!isNullOrUndefined(id) && this.selectedNodes.indexOf(id) === -1) {
        this.selectedNodes.push(id);
      }
    };
    TreeView2.prototype.removeSelect = function(liEle) {
      if (this.allowMultiSelection) {
        liEle.setAttribute("aria-selected", "false");
      } else {
        liEle.removeAttribute("aria-selected");
      }
      removeClass([liEle], ACTIVE2);
      var index = this.selectedNodes.indexOf(liEle.getAttribute("data-uid"));
      if (index > -1) {
        this.selectedNodes.splice(index, 1);
      }
    };
    TreeView2.prototype.removeSelectAll = function() {
      var selectedLI = this.element.querySelectorAll("." + ACTIVE2);
      for (var _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {
        var ele = selectedLI_1[_i];
        if (this.allowMultiSelection) {
          ele.setAttribute("aria-selected", "false");
        } else {
          ele.removeAttribute("aria-selected");
        }
      }
      removeClass(selectedLI, ACTIVE2);
      this.setProperties({
        selectedNodes: []
      }, true);
    };
    TreeView2.prototype.getSelectEvent = function(currLi, action, e) {
      var nodeData = this.getNodeData(currLi);
      return {
        action,
        cancel: false,
        isInteracted: isNullOrUndefined(e) ? false : true,
        node: currLi,
        nodeData
      };
    };
    TreeView2.prototype.setExpandOnType = function() {
      this.expandOnType = this.expandOn === "Auto" ? Browser.isDevice ? "Click" : "DblClick" : this.expandOn;
    };
    TreeView2.prototype.expandHandler = function(e) {
      var target = Browser.isDevice && e.originalEvent.changedTouches && !Browser.isIos ? document.elementFromPoint(e.originalEvent.changedTouches[0].clientX, e.originalEvent.changedTouches[0].clientY) : e.originalEvent.target;
      if (!target || target.classList.contains(INPUT2) || target.classList.contains(ROOT5) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON3) || this.showCheckBox && closest(target, "." + CHECKBOXWRAP)) {
        return;
      } else {
        this.expandCollapseAction(closest(target, "." + LISTITEM), e);
      }
    };
    TreeView2.prototype.expandCollapseAction = function(currLi, e) {
      var icon = select("div." + ICON3, currLi);
      if (!icon || icon.classList.contains(PROCESS)) {
        return;
      } else {
        var classList2 = icon.classList;
        if (classList2.contains(EXPANDABLE)) {
          this.expandAction(currLi, icon, e);
        } else if (classList2.contains(COLLAPSIBLE)) {
          this.collapseNode(currLi, icon, e);
        }
      }
    };
    TreeView2.prototype.expandAction = function(currLi, icon, e, expandChild, callback, isFromExpandAll) {
      var _this = this;
      if (icon.classList.contains(PROCESS)) {
        return;
      } else {
        addClass([icon], PROCESS);
      }
      if (this.isLoaded && !this.isRefreshed) {
        this.expandArgs = this.getExpandEvent(currLi, e);
        this.isInteracted = this.expandArgs.isInteracted;
        this.trigger("nodeExpanding", this.expandArgs, function(observedArgs) {
          if (observedArgs.cancel) {
            removeClass([icon], PROCESS);
          } else {
            _this.nodeExpandAction(currLi, icon, expandChild, callback, isFromExpandAll);
          }
        });
      } else {
        this.nodeExpandAction(currLi, icon, expandChild, callback, isFromExpandAll);
      }
    };
    TreeView2.prototype.nodeExpandAction = function(currLi, icon, expandChild, callback, isFromExpandAll) {
      var ul = select("." + PARENTITEM, currLi);
      if (ul && ul.nodeName === "UL") {
        this.expandNode(currLi, icon);
      } else {
        this.isFirstRender = true;
        this.renderChildNodes(currLi, expandChild, callback, null, isFromExpandAll);
        if (isNullOrUndefined(this.expandChildren) || this.expandChildren.length === 0) {
          return;
        }
        var liEles = selectAll("." + LISTITEM, currLi);
        for (var i = 0; i < liEles.length; i++) {
          var id = this.getId(liEles[parseInt(i.toString(), 10)]);
          if (this.expandChildren.indexOf(id) !== -1 && this.expandChildren !== void 0) {
            var icon_1 = select("." + EXPANDABLE, select("." + TEXTWRAP, liEles[parseInt(i.toString(), 10)]));
            if (!isNullOrUndefined(icon_1)) {
              this.expandAction(liEles[parseInt(i.toString(), 10)], icon_1, null);
            }
            this.expandChildren.splice(this.expandChildren.indexOf(id), 1);
          }
        }
      }
    };
    TreeView2.prototype.keyActionHandler = function(e) {
      var _this = this;
      var target = e.target;
      var focusedNode = this.getFocusedNode();
      if (target && target.classList.contains(INPUT2)) {
        var inpEle = target;
        if (e.action === "enter") {
          inpEle.blur();
        } else if (e.action === "escape") {
          inpEle.value = this.oldText;
          inpEle.blur();
        }
        return;
      }
      e.preventDefault();
      var eventArgs = {
        cancel: false,
        event: e,
        node: focusedNode
      };
      this.trigger("keyPress", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          switch (e.action) {
            case "space":
              if (_this.showCheckBox) {
                _this.checkNode(e);
              } else {
                _this.toggleSelect(focusedNode, e);
              }
              break;
            case "moveRight":
              _this.openNode(_this.enableRtl ? false : true, e);
              break;
            case "moveLeft":
              _this.openNode(_this.enableRtl ? true : false, e);
              break;
            case "shiftDown":
              _this.shiftKeySelect(true, e);
              break;
            case "moveDown":
            case "ctrlDown":
            case "csDown":
              _this.navigateNode(true);
              break;
            case "shiftUp":
              _this.shiftKeySelect(false, e);
              break;
            case "moveUp":
            case "ctrlUp":
            case "csUp":
              _this.navigateNode(false);
              break;
            case "home":
            case "shiftHome":
            case "ctrlHome":
            case "csHome":
              _this.navigateRootNode(true);
              break;
            case "end":
            case "shiftEnd":
            case "ctrlEnd":
            case "csEnd":
              _this.navigateRootNode(false);
              break;
            case "enter":
            case "ctrlEnter":
            case "shiftEnter":
            case "csEnter":
            case "shiftSpace":
            case "ctrlSpace":
              _this.toggleSelect(focusedNode, e);
              break;
            case "f2":
              if (_this.allowEditing && !focusedNode.classList.contains("e-disable")) {
                _this.createTextbox(focusedNode);
              }
              break;
            case "ctrlA":
              if (_this.allowMultiSelection) {
                var sNodes = selectAll("." + LISTITEM + ":not(." + ACTIVE2 + ")", _this.element);
                _this.selectGivenNodes(sNodes);
              }
              break;
          }
        }
      });
    };
    TreeView2.prototype.navigateToFocus = function(isUp) {
      var focusNode = this.getFocusedNode().querySelector("." + TEXTWRAP);
      var pos = focusNode.getBoundingClientRect();
      var parent = this.getScrollParent(this.element);
      if (!isNullOrUndefined(parent)) {
        var parentPos = parent.getBoundingClientRect();
        if (pos.bottom > parentPos.bottom) {
          parent.scrollTop += pos.bottom - parentPos.bottom;
        } else if (pos.top < parentPos.top) {
          parent.scrollTop -= parentPos.top - pos.top;
        }
      }
      var isVisible2 = this.isVisibleInViewport(focusNode);
      if (!isVisible2) {
        focusNode.scrollIntoView(isUp);
      }
    };
    TreeView2.prototype.isVisibleInViewport = function(txtWrap) {
      var pos = txtWrap.getBoundingClientRect();
      return pos.top >= 0 && pos.left >= 0 && pos.bottom <= (window.innerHeight || document.documentElement.clientHeight) && pos.right <= (window.innerWidth || document.documentElement.clientWidth);
    };
    TreeView2.prototype.getScrollParent = function(node) {
      if (isNullOrUndefined(node)) {
        return null;
      }
      return node.scrollHeight > node.clientHeight ? node : this.getScrollParent(node.parentElement);
    };
    TreeView2.prototype.shiftKeySelect = function(isTowards, e) {
      if (this.allowMultiSelection) {
        var focusedNode = this.getFocusedNode();
        var nextNode = isTowards ? this.getNextNode(focusedNode) : this.getPrevNode(focusedNode);
        this.removeHover();
        this.setFocusElement(nextNode);
        this.toggleSelect(nextNode, e, false);
        this.navigateToFocus(!isTowards);
      } else {
        this.navigateNode(isTowards);
      }
    };
    TreeView2.prototype.checkNode = function(e) {
      var focusedNode = this.getFocusedNode();
      var checkWrap = select("." + CHECKBOXWRAP, focusedNode);
      var isChecked = select(" ." + CHECKBOXFRAME, checkWrap).classList.contains(CHECK2);
      if (!focusedNode.classList.contains("e-disable")) {
        if (focusedNode.getElementsByClassName("e-checkbox-disabled").length === 0) {
          this.validateCheckNode(checkWrap, isChecked, focusedNode, e);
        }
      }
    };
    TreeView2.prototype.validateCheckNode = function(checkWrap, isCheck, li, e) {
      var _this = this;
      var currLi = closest(checkWrap, "." + LISTITEM);
      this.checkActionNodes = [];
      var ariaState = !isCheck ? "true" : "false";
      if (!isNullOrUndefined(ariaState)) {
        currLi.setAttribute("aria-checked", ariaState);
      }
      var eventArgs = this.getCheckEvent(currLi, isCheck ? "uncheck" : "check", e);
      this.trigger("nodeChecking", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          _this.nodeCheckingAction(checkWrap, isCheck, li, observedArgs, e);
        }
      });
    };
    TreeView2.prototype.nodeCheckingAction = function(checkWrap, isCheck, li, eventArgs, e) {
      if (this.checkedElement.indexOf(li.getAttribute("data-uid")) === -1) {
        this.checkedElement.push(li.getAttribute("data-uid"));
        if (this.autoCheck) {
          var child = this.getChildNodes(this.treeData, li.getAttribute("data-uid"));
          if (child !== null) {
            this.allCheckNode(child, this.checkedElement, null, null, false);
          } else {
            child = null;
          }
        }
      }
      this.changeState(checkWrap, isCheck ? "uncheck" : "check", e, true);
      this.updateActiveClass(li, isCheck);
      if (this.autoCheck) {
        this.ensureChildCheckState(li);
        this.updateOldCheckedData([this.getNodeData(li)]);
        this.ensureParentCheckState(closest(closest(li, "." + PARENTITEM), "." + LISTITEM));
        var doCheck = void 0;
        if (eventArgs.action === "check") {
          doCheck = true;
        } else if (eventArgs.action === "uncheck") {
          doCheck = false;
        }
        this.ensureStateChange(li, doCheck);
      }
      this.nodeCheckedEvent(checkWrap, isCheck, e);
    };
    TreeView2.prototype.updateActiveClass = function(liElement, checkStatus) {
      if (this.showCheckBox && this.checkOnClick) {
        if (checkStatus === "check" || checkStatus === false) {
          this.removeSelectAll();
          addClass([liElement], ACTIVE2);
        } else if (checkStatus === "uncheck" || checkStatus === "indeterminate" || checkStatus === true) {
          removeClass([liElement], ACTIVE2);
        }
      }
    };
    TreeView2.prototype.ensureStateChange = function(li, doCheck) {
      var _this = this;
      var childElement = select("." + PARENTITEM, li);
      var parentIndex = li.getAttribute("data-uid");
      var mapper = this.fields;
      if (this.dataType === 1 && this.autoCheck) {
        var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, "equal", parentIndex, true));
        var childMatchesCheckedNodes = resultData.filter(function(item) {
          return _this.checkedNodes.indexOf(item[mapper.id].toString()) !== -1;
        }, this);
        if (this.checkedNodes.indexOf(parentIndex) !== -1 && childMatchesCheckedNodes.length !== resultData.length && this.isFilter) {
          if (childMatchesCheckedNodes.length > 0) {
            resultData = childMatchesCheckedNodes;
          }
        }
        for (var i = 0; i < resultData.length; i++) {
          var resultId = resultData[parseInt(i.toString(), 10)][this.fields.id] ? resultData[parseInt(i.toString(), 10)][this.fields.id].toString() : null;
          var isCheck = resultData[parseInt(i.toString(), 10)][this.fields.isChecked] ? resultData[parseInt(i.toString(), 10)][this.fields.isChecked].toString() : null;
          if (this.checkedNodes.indexOf(parentIndex) !== -1 && this.checkedNodes.indexOf(resultId) === -1) {
            this.checkDisabledState(resultId, resultData[i]);
            var childItems = this.getChildNodes(this.treeData, resultId);
            this.getChildItems(childItems, doCheck);
            if (this.parentNodeCheck.indexOf(resultId) !== -1) {
              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);
            }
          } else if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null && this.checkedNodes.indexOf(resultId) !== -1) {
            this.checkedNodes.splice(this.checkedNodes.indexOf(resultId), 1);
            if (isCheck === "true") {
              this.updateField(this.treeData, this.fields, resultId, "isChecked", null);
            }
            if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null || this.parentNodeCheck.indexOf(resultId) !== -1) {
              var childNodes = this.getChildNodes(this.treeData, resultId);
              this.getChildItems(childNodes, doCheck);
              if (this.parentNodeCheck.indexOf(resultId) !== -1) {
                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);
              }
            }
          } else {
            var childItems = this.getChildNodes(this.treeData, resultId);
            this.getChildItems(childItems, doCheck);
          }
        }
      } else if (this.dataType === 1 && !this.autoCheck) {
        if (!doCheck) {
          var checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, "equal", true, false));
          for (var i = 0; i < checkedData.length; i++) {
            var id = checkedData[parseInt(i.toString(), 10)][this.fields.id] ? checkedData[parseInt(i.toString(), 10)][this.fields.id].toString() : null;
            if (this.checkedNodes.indexOf(id) !== -1) {
              this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);
            }
            this.updateField(this.treeData, this.fields, id, "isChecked", null);
          }
          this.checkedNodes = [];
        } else {
          for (var i = 0; i < this.treeData.length; i++) {
            var checkedId = this.treeData[parseInt(i.toString(), 10)][this.fields.id] ? this.treeData[parseInt(i.toString(), 10)][this.fields.id].toString() : null;
            if (this.checkedNodes.indexOf(checkedId) === -1) {
              this.checkDisabledState(checkedId, this.treeData[i]);
            }
          }
        }
      } else {
        var childItems = this.getChildNodes(this.treeData, parentIndex);
        if (childItems) {
          var filteredChildItems = childItems.filter(function(item) {
            var itemValue = String(item[Object.keys(item)[0]]);
            return _this.checkedNodes.indexOf(itemValue) !== -1;
          });
          if (filteredChildItems.length > 0 && childItems.length && this.isFilter) {
            childItems = filteredChildItems;
          }
          this.childStateChange(childItems, parentIndex, childElement, doCheck);
        }
      }
    };
    TreeView2.prototype.checkDisabledState = function(resultId, currentItem) {
      var requiresUpdate = this.checkDisabledChildren;
      if (!requiresUpdate) {
        var shouldPreventUpdate = true;
        if (this.loadOnDemand && this.fields.htmlAttributes) {
          currentItem = isNullOrUndefined(currentItem) ? currentItem : this.getNodeObject(resultId);
          if (!isNullOrUndefined(currentItem)) {
            var htmlAttributes = currentItem[this.fields.htmlAttributes];
            if (htmlAttributes && !isNullOrUndefined(htmlAttributes.class) && htmlAttributes.class.indexOf(DISABLE) !== -1) {
              shouldPreventUpdate = false;
            }
          }
        }
        var liElement = select('[data-uid="' + resultId + '"]', this.element);
        requiresUpdate = liElement ? !liElement.classList.contains(DISABLE) : this.disableNode.indexOf(resultId) === -1 && shouldPreventUpdate;
      }
      if (requiresUpdate) {
        this.checkedNodes.push(resultId);
      }
    };
    TreeView2.prototype.getChildItems = function(childItems, doCheck) {
      for (var i = 0; i < childItems.length; i++) {
        var childId = childItems[parseInt(i.toString(), 10)][this.fields.id] ? childItems[parseInt(i.toString(), 10)][this.fields.id].toString() : null;
        var childIsCheck = childItems[parseInt(i.toString(), 10)][this.fields.isChecked] ? childItems[parseInt(i.toString(), 10)][this.fields.isChecked].toString() : null;
        if (this.checkedNodes.indexOf(childId) !== -1 && !doCheck) {
          this.checkedNodes.splice(this.checkedNodes.indexOf(childId), 1);
        }
        if (this.checkedNodes.indexOf(childId) === -1 && doCheck) {
          this.checkDisabledState(childId, childItems[i]);
        }
        if (childIsCheck === "true" && !doCheck) {
          this.updateField(this.treeData, this.fields, childId, "isChecked", null);
        }
        var subChildItems = this.getChildNodes(this.treeData, childId);
        if (subChildItems.length > 0) {
          this.getChildItems(subChildItems, doCheck);
        }
      }
    };
    TreeView2.prototype.childStateChange = function(childItems, parent, childElement, doCheck) {
      for (var i = 0; i < childItems.length; i++) {
        var checkedChild = childItems[parseInt(i.toString(), 10)][this.fields.id] ? childItems[parseInt(i.toString(), 10)][this.fields.id].toString() : "";
        var isCheck = childItems[parseInt(i.toString(), 10)][this.fields.isChecked] ? childItems[parseInt(i.toString(), 10)][this.fields.isChecked].toString() : null;
        if (this.autoCheck) {
          if (this.checkedNodes.indexOf(parent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {
            this.checkDisabledState(checkedChild, childItems[i]);
            if (this.parentNodeCheck.indexOf(checkedChild) !== -1) {
              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(checkedChild), 1);
            }
          } else if (this.checkedNodes.indexOf(parent) === -1 && this.checkedNodes.indexOf(checkedChild) !== -1 && !doCheck) {
            this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);
            if (isCheck === "true") {
              this.updateField(this.treeData, this.fields, checkedChild, "isChecked", null);
            }
          }
        } else if (!this.autoCheck) {
          if (!doCheck) {
            if (this.checkedNodes.indexOf(checkedChild) !== -1) {
              this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);
            }
            this.updateField(this.treeData, this.fields, checkedChild, "isChecked", null);
            this.checkedNodes = [];
          } else {
            if (this.checkedNodes.indexOf(checkedChild) === -1) {
              this.checkDisabledState(checkedChild, childItems[i]);
            }
          }
        }
        var subChild = this.getChildNodes([childItems[parseInt(i.toString(), 10)]], checkedChild);
        if (subChild) {
          this.childStateChange(subChild, parent, childElement, doCheck);
        }
      }
    };
    TreeView2.prototype.allCheckNode = function(child, newCheck, checked, childCheck, validateCheck) {
      if (child) {
        for (var length_1 = 0; length_1 < child.length; length_1++) {
          var childId = getValue(this.fields.id, child[parseInt(length_1.toString(), 10)]);
          var check = this.element.querySelector('[data-uid="' + childId + '"]');
          if (validateCheck !== false && this.checkedElement.indexOf(childId.toString()) === -1) {
            if (check === null && !isNullOrUndefined(child[parseInt(length_1.toString(), 10)][this.fields.isChecked]) && newCheck.indexOf(childId.toString()) === -1 || childCheck === 0 || checked === 2) {
              if (child[parseInt(length_1.toString(), 10)][this.fields.isChecked] !== false || checked === 2) {
                newCheck.push(childId.toString());
              } else {
                childCheck = null;
              }
              childCheck = child[parseInt(length_1.toString(), 10)][this.fields.isChecked] !== false || checked === 2 ? 0 : null;
            }
          }
          if (newCheck.indexOf(childId.toString()) === -1 && isNullOrUndefined(checked)) {
            newCheck.push(childId.toString());
          }
          var hierChildId = getValue(this.fields.child.toString(), child[parseInt(length_1.toString(), 10)]);
          if (getValue(this.fields.hasChildren, child[parseInt(length_1.toString(), 10)]) === true || hierChildId) {
            var id = getValue(this.fields.id, child[parseInt(length_1.toString(), 10)]);
            var childId_1 = void 0;
            if (this.dataType === 1) {
              childId_1 = this.getChildNodes(this.treeData, id.toString());
            } else {
              childId_1 = hierChildId;
            }
            if (childId_1) {
              if (isNullOrUndefined(validateCheck)) {
                this.allCheckNode(childId_1, newCheck, checked, childCheck);
              } else {
                this.allCheckNode(childId_1, newCheck, checked, childCheck, validateCheck);
              }
              childCheck = null;
            }
          }
          childCheck = null;
        }
      }
    };
    TreeView2.prototype.openNode = function(toBeOpened, e) {
      var focusedNode = this.getFocusedNode();
      var icon = select("div." + ICON3, focusedNode);
      if (toBeOpened) {
        if (!icon) {
          return;
        } else if (icon.classList.contains(EXPANDABLE)) {
          this.expandAction(focusedNode, icon, e);
        } else {
          this.focusNextNode(focusedNode, true);
        }
      } else {
        if (icon && icon.classList.contains(COLLAPSIBLE)) {
          this.collapseNode(focusedNode, icon, e);
        } else {
          var parentLi = closest(closest(focusedNode, "." + PARENTITEM), "." + LISTITEM);
          if (!parentLi) {
            return;
          } else {
            if (!parentLi.classList.contains("e-disable")) {
              this.setFocus(focusedNode, parentLi);
              this.navigateToFocus(true);
            }
          }
        }
      }
    };
    TreeView2.prototype.navigateNode = function(isTowards) {
      var focusedNode = this.getFocusedNode();
      this.focusNextNode(focusedNode, isTowards);
    };
    TreeView2.prototype.navigateRootNode = function(isBackwards) {
      var focusedNode = this.getFocusedNode();
      var rootNode = isBackwards ? this.getRootNode() : this.getEndNode();
      if (!rootNode.classList.contains("e-disable")) {
        this.setFocus(focusedNode, rootNode);
        this.navigateToFocus(isBackwards);
      }
    };
    TreeView2.prototype.getFocusedNode = function() {
      var selectedItem;
      var fNode = select("." + LISTITEM + '[tabindex="0"]', this.element);
      if (!isNullOrUndefined(fNode)) {
        var ariaChecked = fNode.getAttribute("aria-checked");
        if (ariaChecked === "mixed" || ariaChecked === "false") {
          this.isFilter = false;
        }
      }
      if (isNullOrUndefined(fNode)) {
        selectedItem = select("." + LISTITEM, this.element);
      }
      return isNullOrUndefined(fNode) ? isNullOrUndefined(selectedItem) ? this.element.firstElementChild : selectedItem : fNode;
    };
    TreeView2.prototype.focusNextNode = function(li, isTowards) {
      var nextNode = isTowards ? this.getNextNode(li) : this.getPrevNode(li);
      this.setFocus(li, nextNode);
      this.navigateToFocus(!isTowards);
      if (nextNode.classList.contains("e-disable")) {
        var lastChild = nextNode.lastChild;
        if (nextNode.previousSibling == null && nextNode.classList.contains("e-level-1")) {
          this.focusNextNode(nextNode, true);
        } else if (nextNode.nextSibling == null && nextNode.classList.contains("e-node-collapsed")) {
          this.focusNextNode(nextNode, false);
        } else if (nextNode.nextSibling == null && lastChild.classList.contains(TEXTWRAP)) {
          this.focusNextNode(nextNode, false);
        } else {
          this.focusNextNode(nextNode, isTowards);
        }
      }
    };
    TreeView2.prototype.getNextNode = function(li) {
      var index = this.liList.indexOf(li);
      var nextNode;
      do {
        index++;
        nextNode = this.liList[parseInt(index.toString(), 10)];
        if (isNullOrUndefined(nextNode)) {
          return li;
        }
      } while (!isVisible(nextNode));
      return nextNode;
    };
    TreeView2.prototype.getPrevNode = function(li) {
      var index = this.liList.indexOf(li);
      var prevNode;
      do {
        index--;
        prevNode = this.liList[parseInt(index.toString(), 10)];
        if (isNullOrUndefined(prevNode)) {
          return li;
        }
      } while (!isVisible(prevNode));
      return prevNode;
    };
    TreeView2.prototype.getRootNode = function() {
      var index = 0;
      var rootNode;
      do {
        rootNode = this.liList[parseInt(index.toString(), 10)];
        index++;
      } while (!isVisible(rootNode));
      return rootNode;
    };
    TreeView2.prototype.getEndNode = function() {
      var index = this.liList.length - 1;
      var endNode;
      do {
        endNode = this.liList[parseInt(index.toString(), 10)];
        index--;
      } while (!isVisible(endNode));
      return endNode;
    };
    TreeView2.prototype.setFocus = function(preNode, nextNode) {
      removeClass([preNode], FOCUS);
      preNode.setAttribute("tabindex", "-1");
      if (!nextNode.classList.contains("e-disable")) {
        addClass([nextNode], FOCUS);
        nextNode.setAttribute("tabindex", "0");
        nextNode.focus();
        EventHandler.add(nextNode, "blur", this.focusOut, this);
        this.updateIdAttr(preNode, nextNode);
      }
    };
    TreeView2.prototype.updateIdAttr = function(preNode, nextNode) {
      this.element.removeAttribute("aria-activedescendant");
      if (preNode) {
        preNode.removeAttribute("id");
      }
      nextNode.setAttribute("id", this.element.id + "_active");
      this.element.setAttribute("aria-activedescendant", this.element.id + "_active");
    };
    TreeView2.prototype.focusIn = function() {
      if (!this.mouseDownStatus) {
        var focusedElement = this.getFocusedNode();
        if (focusedElement.classList.contains("e-disable")) {
          focusedElement.setAttribute("tabindex", "-1");
          this.navigateNode(true);
        } else {
          focusedElement.setAttribute("tabindex", "0");
          addClass([focusedElement], FOCUS);
          EventHandler.add(focusedElement, "blur", this.focusOut, this);
        }
        this.mouseDownStatus = false;
      }
    };
    TreeView2.prototype.focusOut = function(event2) {
      var focusedElement = this.getFocusedNode();
      if (event2.target === focusedElement) {
        removeClass([focusedElement], FOCUS);
        EventHandler.remove(focusedElement, "blur", this.focusOut);
      }
    };
    TreeView2.prototype.onMouseOver = function(e) {
      if (Browser.isDevice) {
        return;
      }
      var target = e.target;
      var classList2 = target.classList;
      var currentLi = closest(target, "." + LISTITEM);
      if (!currentLi || classList2.contains(PARENTITEM) || classList2.contains(LISTITEM)) {
        this.removeHover();
        return;
      } else {
        if (currentLi && !currentLi.classList.contains("e-disable")) {
          this.setHover(currentLi);
        }
      }
    };
    TreeView2.prototype.setHover = function(li) {
      if (!li.classList.contains(HOVER) && !li.classList.contains(PREVENTSELECT)) {
        this.removeHover();
        addClass([li], HOVER);
      }
    };
    TreeView2.prototype.onMouseLeave = function() {
      this.removeHover();
    };
    TreeView2.prototype.removeHover = function() {
      var hoveredNode = selectAll("." + HOVER, this.element);
      if (hoveredNode && hoveredNode.length) {
        removeClass(hoveredNode, HOVER);
      }
    };
    TreeView2.prototype.getNodeData = function(currLi, fromDS, dragData) {
      if (!isNullOrUndefined(currLi) && currLi.classList.contains(LISTITEM) && !isNullOrUndefined(closest(currLi, "." + CONTROL3)) && closest(currLi, "." + CONTROL3).classList.contains(ROOT5)) {
        var id = currLi.getAttribute("data-uid");
        var text = this.getText(currLi, fromDS, dragData);
        var pNode = closest(currLi.parentNode, "." + LISTITEM);
        var pid = pNode ? pNode.getAttribute("data-uid") : null;
        var selected = currLi.classList.contains(ACTIVE2);
        var selectable = currLi.classList.contains(PREVENTSELECT) ? false : true;
        var expanded = currLi.getAttribute("aria-expanded") === "true" ? true : false;
        var hasChildren = currLi.getAttribute("aria-expanded") !== null ? true : (select("." + EXPANDABLE, currLi) || select("." + COLLAPSIBLE, currLi)) != null ? true : false;
        var checked = null;
        var checkboxElement = select("." + CHECKBOXWRAP, currLi);
        if (this.showCheckBox && checkboxElement) {
          checked = currLi.getAttribute("aria-checked");
        }
        return {
          id,
          text,
          parentID: pid,
          selected,
          selectable,
          expanded,
          isChecked: checked,
          hasChildren
        };
      }
      return {
        id: "",
        text: "",
        parentID: "",
        selected: false,
        expanded: false,
        isChecked: "",
        hasChildren: false
      };
    };
    TreeView2.prototype.getText = function(currLi, fromDS, dragData) {
      if (fromDS) {
        var nodeData = !isNullOrUndefined(dragData) ? dragData : this.getNodeObject(currLi.getAttribute("data-uid"));
        var level = parseFloat(currLi.getAttribute("aria-level"));
        var nodeFields = this.getFields(this.fields, level, 1);
        return !isNullOrUndefined(dragData) ? dragData.text : getValue(nodeFields.text, nodeData);
      }
      return select("." + LISTTEXT, currLi).textContent;
    };
    TreeView2.prototype.getExpandEvent = function(currLi, e) {
      var nodeData = this.getNodeData(currLi);
      return {
        cancel: false,
        isInteracted: isNullOrUndefined(e) ? false : true,
        node: currLi,
        nodeData,
        event: e
      };
    };
    TreeView2.prototype.renderNodeTemplate = function(data, textEle, dataId) {
      var tempArr = this.nodeTemplateFn(data, this, "nodeTemplate" + dataId, this.element.id + "nodeTemplate", this.isStringTemplate, void 0, textEle, this.root);
      if (tempArr) {
        tempArr = Array.prototype.slice.call(tempArr);
        append(tempArr, textEle);
      }
    };
    TreeView2.prototype.destroyTemplate = function(liEle) {
      this.clearTemplate(["nodeTemplate" + liEle.getAttribute("data-uid")]);
    };
    TreeView2.prototype.reRenderNodes = function() {
      this.updateListProp(this.fields);
      if (Browser.isIE) {
        this.ulElement = this.element.querySelector(".e-list-parent.e-ul");
        this.ulElement.parentElement.removeChild(this.ulElement);
      } else {
        this.element.innerHTML = "";
      }
      if (!isNullOrUndefined(this.nodeTemplateFn)) {
        this.clearTemplate();
      }
      this.setTouchClass();
      this.setProperties({
        selectedNodes: [],
        checkedNodes: [],
        expandedNodes: []
      }, true);
      this.checkedElement = [];
      this.isLoaded = false;
      this.setDataBinding(true);
    };
    TreeView2.prototype.setCssClass = function(oldClass, newClass) {
      if (!isNullOrUndefined(oldClass) && oldClass !== "") {
        removeClass([this.element], oldClass.split(" "));
      }
      if (!isNullOrUndefined(newClass) && newClass !== "") {
        addClass([this.element], newClass.split(" "));
      }
    };
    TreeView2.prototype.editingHandler = function(e) {
      var target = e.target;
      if (!target || target.classList.contains(ROOT5) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON3) || target.classList.contains(INPUT2) || target.classList.contains(INPUTGROUP2)) {
        return;
      } else {
        var liEle = closest(target, "." + LISTITEM);
        this.createTextbox(liEle);
      }
    };
    TreeView2.prototype.createTextbox = function(liEle) {
      var _this = this;
      var oldInpEle = select("." + TREEINPUT, this.element);
      if (oldInpEle) {
        oldInpEle.blur();
      }
      var textEle = select("." + LISTTEXT, liEle);
      this.updateOldText(liEle);
      var innerEle = this.createElement("input", {
        className: TREEINPUT,
        attrs: {
          value: this.oldText
        }
      });
      var eventArgs = this.getEditEvent(liEle, null, innerEle.outerHTML);
      this.trigger("nodeEditing", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          var inpWidth = textEle.offsetWidth + 5;
          var widthSize_1 = inpWidth + "px";
          addClass([liEle], EDITING);
          if (!isNullOrUndefined(_this.nodeTemplateFn)) {
            _this.destroyTemplate(liEle);
          }
          if (_this.isReact) {
            setTimeout(function() {
              _this.renderTextBox(eventArgs, textEle, widthSize_1);
            }, 5);
          } else {
            _this.renderTextBox(eventArgs, textEle, widthSize_1);
          }
        }
      });
    };
    TreeView2.prototype.renderTextBox = function(eventArgs, textEle, widthSize) {
      textEle.innerHTML = eventArgs.innerHtml;
      var inpEle = select("." + TREEINPUT, textEle);
      this.inputObj = Input.createInput({
        element: inpEle,
        properties: {
          enableRtl: this.enableRtl
        }
      }, this.createElement);
      this.inputObj.container.style.width = widthSize;
      inpEle.focus();
      var inputEle = inpEle;
      inputEle.setSelectionRange(0, inputEle.value.length);
      this.wireInputEvents(inpEle);
    };
    TreeView2.prototype.updateOldText = function(liEle) {
      var id = liEle.getAttribute("data-uid");
      this.editData = this.getNodeObject(id);
      var level = parseFloat(liEle.getAttribute("aria-level"));
      this.editFields = this.getFields(this.fields, level, 1);
      this.oldText = getValue(this.editFields.text, this.editData);
    };
    TreeView2.prototype.inputFocusOut = function(e) {
      if (!select("." + TREEINPUT, this.element)) {
        return;
      }
      var target = e.target;
      var newText = target.value;
      var txtEle = closest(target, "." + LISTTEXT);
      var liEle = closest(target, "." + LISTITEM);
      detach(this.inputObj.container);
      Input.destroy({
        element: target,
        properties: this.properties
      });
      if (this.fields.dataSource instanceof DataManager && !this.isOffline) {
        this.crudOperation("update", null, liEle, newText, null, null, true);
      } else {
        this.appendNewText(liEle, txtEle, newText, true);
      }
      EventHandler.remove(target, "blur", this.inputFocusOut);
      this.inputObj = null;
      detach(target);
      target = null;
    };
    TreeView2.prototype.appendNewText = function(liEle, txtEle, newText, isInput) {
      var _this = this;
      var eventArgs = this.getEditEvent(liEle, newText, null);
      this.trigger("nodeEdited", eventArgs, function(observedArgs) {
        newText = observedArgs.cancel ? observedArgs.oldText : observedArgs.newText;
        _this.updateText(liEle, txtEle, newText, isInput);
        if (observedArgs.oldText !== newText) {
          _this.triggerEvent("nodeEdited", [_this.getNode(liEle)]);
        }
      });
    };
    TreeView2.prototype.updateText = function(liEle, txtEle, newText, isInput) {
      var newData = setValue(this.editFields.text, newText, this.editData);
      if (!isNullOrUndefined(this.nodeTemplateFn)) {
        txtEle.innerText = "";
        var dataId = liEle.getAttribute("data-uid");
        this.renderNodeTemplate(newData, txtEle, dataId);
        this.renderReactTemplates();
      } else {
        if (this.enableHtmlSanitizer) {
          txtEle.innerText = SanitizeHtmlHelper.sanitize(newText);
        } else {
          txtEle.innerHTML = newText;
        }
      }
      if (isInput) {
        removeClass([liEle], EDITING);
        liEle.focus();
        EventHandler.add(liEle, "blur", this.focusOut, this);
        addClass([liEle], FOCUS);
      }
      if (this.allowTextWrap) {
        this.calculateWrap(liEle);
      }
    };
    TreeView2.prototype.getElement = function(ele) {
      if (isNullOrUndefined(ele)) {
        return null;
      } else if (typeof ele === "string") {
        return this.element.querySelector('[data-uid="' + ele + '"]');
      } else if (typeof ele === "object") {
        return getElement(ele);
      } else {
        return null;
      }
    };
    TreeView2.prototype.getId = function(ele) {
      if (isNullOrUndefined(ele)) {
        return null;
      } else if (typeof ele === "string") {
        return ele;
      } else if (typeof ele === "object") {
        return getElement(ele).getAttribute("data-uid");
      } else {
        return null;
      }
    };
    TreeView2.prototype.getEditEvent = function(liEle, newText, inpEle) {
      var data = this.getNodeData(liEle);
      return {
        cancel: false,
        newText,
        node: liEle,
        nodeData: data,
        oldText: this.oldText,
        innerHtml: inpEle
      };
    };
    TreeView2.prototype.getNodeObject = function(id) {
      var childNodes;
      if (isNullOrUndefined(id)) {
        return childNodes;
      } else if (this.dataType === 1) {
        for (var i = 0, objlen = this.treeData.length; i < objlen; i++) {
          var dataId = getValue(this.fields.id, this.treeData[parseInt(i.toString(), 10)]);
          if (!isNullOrUndefined(this.treeData[parseInt(i.toString(), 10)]) && !isNullOrUndefined(dataId) && dataId.toString() === id) {
            return this.treeData[parseInt(i.toString(), 10)];
          }
        }
      } else {
        return this.getChildNodeObject(this.treeData, this.fields, id);
      }
      return childNodes;
    };
    TreeView2.prototype.getChildNodeObject = function(obj, mapper, id) {
      var newList;
      if (isNullOrUndefined(obj)) {
        return newList;
      }
      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        var dataId = getValue(mapper.id, obj[parseInt(i.toString(), 10)]);
        if (obj[parseInt(i.toString(), 10)] && dataId && dataId.toString() === id) {
          return obj[parseInt(i.toString(), 10)];
        } else if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, obj[parseInt(i.toString(), 10)]))) {
          var childData = getValue(mapper.child, obj[parseInt(i.toString(), 10)]);
          newList = this.getChildNodeObject(childData, this.getChildMapper(mapper), id);
          if (newList !== void 0) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[parseInt(i.toString(), 10)]))) {
          var child = "child";
          newList = this.getChildNodeObject(getValue(child, obj[parseInt(i.toString(), 10)]), this.getChildMapper(mapper), id);
          if (newList !== void 0) {
            break;
          }
        } else if (this.isChildObject()) {
          var children = "child";
          var childData = getValue(children, obj[parseInt(i.toString(), 10)]);
          newList = this.getChildNodeObject(childData, this.getChildMapper(mapper), id);
          if (newList !== void 0) {
            break;
          }
        }
      }
      return newList;
    };
    TreeView2.prototype.setDragAndDrop = function(toBind) {
      if (toBind && !this.disabled) {
        this.initializeDrag();
      } else {
        this.destroyDrag();
      }
    };
    TreeView2.prototype.initializeDrag = function() {
      var _this = this;
      var virtualEle;
      this.dragObj = new Draggable(this.element, {
        enableTailMode: true,
        enableAutoScroll: true,
        dragArea: this.dragArea,
        dragTarget: "." + TEXTWRAP,
        enableTapHold: true,
        tapHoldThreshold: 100,
        helper: function(e) {
          _this.dragTarget = e.sender.target;
          var dragRoot = closest(_this.dragTarget, "." + ROOT5);
          var dragWrap = closest(_this.dragTarget, "." + TEXTWRAP);
          _this.dragLi = closest(_this.dragTarget, "." + LISTITEM);
          if (_this.fullRowSelect && !dragWrap && _this.dragTarget.classList.contains(FULLROW)) {
            dragWrap = _this.dragTarget.nextElementSibling;
          }
          if (!_this.dragTarget || !e.element.isSameNode(dragRoot) || !dragWrap || _this.dragTarget.classList.contains(ROOT5) || _this.dragTarget.classList.contains(PARENTITEM) || _this.dragTarget.classList.contains(LISTITEM) || _this.dragLi.classList.contains("e-disable")) {
            return false;
          }
          var cloneEle = dragWrap.cloneNode(true);
          if (isNullOrUndefined(select("div." + ICON3, cloneEle))) {
            var icon = _this.createElement("div", {
              className: ICON3 + " " + EXPANDABLE
            });
            cloneEle.insertBefore(icon, cloneEle.children[0]);
          }
          var cssClass2 = DRAGITEM + " " + ROOT5 + " " + _this.cssClass + " " + (_this.enableRtl ? RTL12 : "");
          virtualEle = _this.createElement("div", {
            className: cssClass2
          });
          virtualEle.appendChild(cloneEle);
          var nLen = _this.selectedNodes.length;
          if (nLen > 1 && _this.allowMultiSelection && _this.dragLi.classList.contains(ACTIVE2)) {
            var cNode = _this.createElement("span", {
              className: DROPCOUNT,
              innerHTML: "" + nLen
            });
            virtualEle.appendChild(cNode);
          }
          document.body.appendChild(virtualEle);
          document.body.style.cursor = "";
          _this.dragData = _this.getNodeData(_this.dragLi);
          return virtualEle;
        },
        dragStart: function(e) {
          addClass([_this.element], DRAGGING);
          var listItem = closest(e.target, ".e-list-item");
          var level;
          if (listItem) {
            level = parseInt(listItem.getAttribute("aria-level"), 10);
          }
          var eventArgs = _this.getDragEvent(e.event, _this, null, e.target, null, virtualEle, level);
          if (eventArgs.draggedNode.classList.contains(EDITING)) {
            _this.dragObj.intDestroy(e.event);
            _this.dragCancelAction(virtualEle);
          } else {
            _this.trigger("nodeDragStart", eventArgs, function(observedArgs) {
              if (observedArgs.cancel) {
                _this.dragObj.intDestroy(e.event);
                _this.dragCancelAction(virtualEle);
              } else {
                _this.dragStartAction = true;
              }
            });
          }
        },
        drag: function(e) {
          _this.dragObj.setProperties({
            cursorAt: {
              top: !isNullOrUndefined(e.event.targetTouches) || Browser.isDevice ? 60 : -20
            }
          });
          _this.dragAction(e, virtualEle);
        },
        dragStop: function(e) {
          removeClass([_this.element], DRAGGING);
          if (!e.target.classList.contains("e-sibling")) {
            _this.removeVirtualEle();
          }
          var dropTarget = e.target;
          var preventTargetExpand = false;
          var dropRoot = closest(dropTarget, "." + DROPPABLE);
          var isHelperElement = true;
          if (!dropTarget || !dropRoot) {
            detach(e.helper);
            document.body.style.cursor = "";
          }
          var listItem = closest(dropTarget, ".e-list-item");
          var level;
          if (listItem) {
            level = parseInt(listItem.getAttribute("aria-level"), 10);
          }
          var eventArgs = _this.getDragEvent(e.event, _this, dropTarget, dropTarget, null, e.helper, level);
          eventArgs.preventTargetExpand = preventTargetExpand;
          _this.trigger("nodeDragStop", eventArgs, function(observedArgs) {
            _this.dragParent = observedArgs.draggedParentNode;
            _this.preventExpand = observedArgs.preventTargetExpand;
            if (observedArgs.cancel) {
              if (e.helper.parentNode) {
                detach(e.helper);
              }
              document.body.style.cursor = "";
              isHelperElement = false;
              if (dropTarget.classList.contains("e-sibling")) {
                _this.removeVirtualEle();
              }
            }
            _this.dragStartAction = false;
          });
        }
      });
      this.dropObj = new Droppable(this.element, {
        out: function(e) {
          if (!isNullOrUndefined(e) && !e.target.classList.contains(SIBLING) && _this.dropObj.dragData.default && _this.dropObj.dragData.default.helper.classList.contains(ROOT5)) {
            document.body.style.cursor = "not-allowed";
          }
        },
        over: function() {
          document.body.style.cursor = "";
        },
        drop: function(e) {
          _this.dropAction(e);
          _this.removeVirtualEle();
        }
      });
    };
    TreeView2.prototype.dragCancelAction = function(virtualEle) {
      detach(virtualEle);
      removeClass([this.element], DRAGGING);
      this.dragStartAction = false;
    };
    TreeView2.prototype.getOffsetX = function(event2, target) {
      var touchList = event2.changedTouches;
      if (touchList && touchList.length > 0) {
        return touchList[0].clientX - target.getBoundingClientRect().left;
      } else {
        return event2.offsetX;
      }
    };
    TreeView2.prototype.getOffsetY = function(event2, target) {
      var touchList = event2.changedTouches;
      if (touchList && touchList.length > 0) {
        return touchList[0].clientY - target.getBoundingClientRect().top;
      } else {
        return event2.offsetY;
      }
    };
    TreeView2.prototype.dragAction = function(e, virtualEle) {
      var dropRoot = closest(e.target, "." + DROPPABLE);
      var dropWrap = closest(e.target, "." + TEXTWRAP);
      var icon = select("div." + ICON3, virtualEle);
      removeClass([icon], [DROPIN, DROPNEXT, DROPOUT, NODROP]);
      this.isDropIn = false;
      this.removeVirtualEle();
      document.body.style.cursor = "";
      var classList2 = e.target.classList;
      var event2 = e.event;
      var offsetY = this.getOffsetY(event2, e.target);
      var offsetX = this.getOffsetX(event2, e.target);
      if (this.fullRowSelect && !dropWrap && !isNullOrUndefined(classList2) && classList2.contains(FULLROW)) {
        dropWrap = e.target.nextElementSibling;
      }
      if (dropRoot) {
        var dropLi = closest(e.target, "." + LISTITEM);
        var checkWrapper = closest(e.target, "." + CHECKBOXWRAP);
        var collapse = closest(e.target, "." + COLLAPSIBLE);
        var expand = closest(e.target, "." + EXPANDABLE);
        if (!dropRoot.classList.contains(ROOT5) || dropWrap && !dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)) {
          if (this.hasTemplate && dropLi) {
            var templateTarget = select(this.fullRowSelect ? "." + FULLROW : "." + TEXTWRAP, dropLi);
            if (e && !expand && !collapse && offsetY < 7 && !checkWrapper || expand && offsetY < 5 || collapse && offsetX < 3) {
              var index = this.fullRowSelect ? 1 : 0;
              this.appendIndicator(dropLi, icon, index);
            } else if (e && !expand && !collapse && !checkWrapper && templateTarget && offsetY > templateTarget.offsetHeight - 10 || expand && offsetY > 19 || collapse && offsetX > 19) {
              var index = this.fullRowSelect ? 2 : 1;
              this.appendIndicator(dropLi, icon, index);
            } else {
              addClass([icon], DROPIN);
              this.isDropIn = true;
            }
          } else {
            if (dropLi && e && !expand && !collapse && offsetY < 7 && !checkWrapper || expand && offsetY < 5 || collapse && offsetX < 3) {
              var index = this.fullRowSelect ? 1 : 0;
              this.appendIndicator(dropLi, icon, index);
            } else if (dropLi && e && !expand && !collapse && e.target.offsetHeight > 0 && offsetY > e.target.offsetHeight - 10 && !checkWrapper || expand && offsetY > 19 || collapse && offsetX > 19) {
              var index = this.fullRowSelect ? 2 : 1;
              this.appendIndicator(dropLi, icon, index);
            } else {
              addClass([icon], DROPIN);
              this.isDropIn = true;
            }
          }
        } else if (e.target.nodeName === "LI" && !dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)) {
          addClass([icon], DROPNEXT);
          this.renderVirtualEle(e);
        } else if (e.target.classList.contains(SIBLING)) {
          addClass([icon], DROPNEXT);
        } else {
          addClass([icon], DROPOUT);
        }
      } else {
        addClass([icon], NODROP);
        document.body.style.cursor = "not-allowed";
      }
      var listItem = closest(e.target, ".e-list-item");
      var level;
      if (listItem) {
        level = parseInt(listItem.getAttribute("aria-level"), 10);
      }
      var eventArgs = this.getDragEvent(e.event, this, e.target, e.target, null, virtualEle, level);
      if (eventArgs.dropIndicator) {
        removeClass([icon], eventArgs.dropIndicator);
      }
      this.trigger("nodeDragging", eventArgs);
      if (eventArgs.dropIndicator) {
        addClass([icon], eventArgs.dropIndicator);
      }
    };
    TreeView2.prototype.appendIndicator = function(dropLi, icon, index) {
      addClass([icon], DROPNEXT);
      var virEle = this.createElement("div", {
        className: SIBLING
      });
      dropLi.insertBefore(virEle, dropLi.children[parseInt(index.toString(), 10)]);
    };
    TreeView2.prototype.dropAction = function(e) {
      var event2 = e.event;
      var offsetY = this.getOffsetY(event2, e.target);
      var dropTarget = e.target;
      var dragObj;
      var level;
      var drop = false;
      var nodeData = [];
      var liArray = [];
      var dragInstance = e.dragData.draggable;
      for (var i = 0; i < dragInstance.ej2_instances.length; i++) {
        if (dragInstance.ej2_instances[parseInt(i.toString(), 10)] instanceof TreeView_1) {
          dragObj = dragInstance.ej2_instances[parseInt(i.toString(), 10)];
          break;
        }
      }
      if (dragObj && dragObj.dragTarget) {
        var dragTarget = dragObj.dragTarget;
        var dragLi = closest(dragTarget, "." + LISTITEM);
        var dropLi = closest(dropTarget, "." + LISTITEM);
        liArray.push(dragLi);
        if (dropLi == null && dropTarget.classList.contains(ROOT5)) {
          dropLi = dropTarget.firstElementChild;
        }
        detach(e.droppedElement);
        document.body.style.cursor = "";
        if (!dropLi || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {
          if (this.fields.dataSource instanceof DataManager === false) {
            this.preventExpand = false;
          }
          return;
        }
        if (dragObj.allowMultiSelection && dragLi.classList.contains(ACTIVE2)) {
          var sNodes = selectAll("." + ACTIVE2, dragObj.element);
          liArray = sNodes;
          if (e.target.offsetHeight <= 33 && offsetY > e.target.offsetHeight - 10 && offsetY > 6) {
            for (var i = sNodes.length - 1; i >= 0; i--) {
              if (dropLi.isSameNode(sNodes[parseInt(i.toString(), 10)]) || this.isDescendant(sNodes[parseInt(i.toString(), 10)], dropLi)) {
                continue;
              }
              this.appendNode(dropTarget, sNodes[parseInt(i.toString(), 10)], dropLi, e, dragObj, offsetY);
            }
          } else {
            for (var i = 0; i < sNodes.length; i++) {
              if (dropLi.isSameNode(sNodes[parseInt(i.toString(), 10)]) || this.isDescendant(sNodes[parseInt(i.toString(), 10)], dropLi)) {
                continue;
              }
              this.appendNode(dropTarget, sNodes[parseInt(i.toString(), 10)], dropLi, e, dragObj, offsetY);
            }
          }
        } else {
          this.appendNode(dropTarget, dragLi, dropLi, e, dragObj, offsetY);
        }
        level = parseInt(dragLi.getAttribute("aria-level"), 10);
        drop = true;
      }
      if (this.fields.dataSource instanceof DataManager === false) {
        this.preventExpand = false;
      }
      var dragData = isNullOrUndefined(dragObj) ? null : dragObj.dragData;
      for (var i = 0; i < liArray.length; i++) {
        nodeData.push(this.getNodeData(this.getElement(liArray[parseInt(i.toString(), 10)]), true, dragData));
      }
      this.trigger("nodeDropped", this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.dragData.draggedElement, null, level, drop));
      if (dragObj.element.id !== this.element.id) {
        dragObj.triggerEvent("nodeDropped", nodeData);
        this.isNodeDropped = true;
        this.fields.dataSource = this.treeData;
      }
      this.triggerEvent("nodeDropped", nodeData);
    };
    TreeView2.prototype.appendNode = function(dropTarget, dragLi, dropLi, e, dragObj, offsetY) {
      var checkWrapper = closest(dropTarget, "." + CHECKBOXWRAP);
      var collapse = closest(e.target, "." + COLLAPSIBLE);
      var expand = closest(e.target, "." + EXPANDABLE);
      if (!dragLi.classList.contains("e-disable") && !checkWrapper && (expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3 || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19 || !expand && !collapse)) {
        if (dropTarget.nodeName === "LI") {
          this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);
        } else if (dropTarget.firstElementChild && dropTarget.classList.contains(ROOT5)) {
          if (dropTarget.firstElementChild.nodeName === "UL") {
            this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);
          }
        } else if (dropTarget.classList.contains("e-icon-collapsible") || dropTarget.classList.contains("e-icon-expandable")) {
          this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);
        } else {
          this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY, null, dropTarget);
        }
      } else {
        this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY, true, dropTarget);
      }
      if (this.showCheckBox) {
        this.ensureIndeterminate();
      }
    };
    TreeView2.prototype.dropAsSiblingNode = function(dragLi, dropLi, e, dragObj) {
      var dropUl = closest(dropLi, "." + PARENTITEM);
      var dragParentUl = closest(dragLi, "." + PARENTITEM);
      var dragParentLi = closest(dragParentUl, "." + LISTITEM);
      var pre;
      if (e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 2) {
        pre = false;
      } else if (e.event.offsetY < 2) {
        pre = true;
      } else if (e.target.classList.contains("e-icon-expandable") || e.target.classList.contains("e-icon-collapsible")) {
        if (e.event.offsetY < 5 || e.event.offsetX < 3) {
          pre = true;
        } else if (e.event.offsetY > 15 || e.event.offsetX > 17) {
          pre = false;
        }
      }
      if (e.target.classList.contains("e-icon-expandable") || e.target.classList.contains("e-icon-collapsible")) {
        var target = e.target.closest("li");
        dropUl.insertBefore(dragLi, pre ? target : target.nextElementSibling);
      } else {
        dropUl.insertBefore(dragLi, pre ? e.target : e.target.nextElementSibling);
      }
      this.moveData(dragLi, dropLi, dropUl, pre, dragObj);
      this.updateElement(dragParentUl, dragParentLi);
      this.updateAriaLevel(dragLi);
      if (dragObj.element.id === this.element.id) {
        this.updateList();
      } else {
        dragObj.updateInstance();
        this.updateInstance();
      }
    };
    TreeView2.prototype.dropAsChildNode = function(dragLi, dropLi, dragObj, index, e, pos, isCheck, dropTarget) {
      var dragParentUl = closest(dragLi, "." + PARENTITEM);
      var dragParentLi = closest(dragParentUl, "." + LISTITEM);
      var dropParentUl = closest(dropLi, "." + PARENTITEM);
      var templateTarget;
      if (e && e.target) {
        templateTarget = select(this.fullRowSelect ? "." + FULLROW : "." + TEXTWRAP, dropLi);
      }
      if (e && (pos < 7 && !dropTarget.classList.contains("e-sibling") || dropTarget.classList.contains("e-sibling") && !dropLi.lastChild.classList.contains("e-sibling")) && !isCheck) {
        dropParentUl.insertBefore(dragLi, dropLi);
        this.moveData(dragLi, dropLi, dropParentUl, true, dragObj);
      } else if (e && e.target.offsetHeight > 0 && pos > e.target.offsetHeight - 10 && !isCheck && !this.hasTemplate) {
        dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);
        this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);
      } else if (this.hasTemplate && templateTarget && pos > templateTarget.offsetHeight - 10 && !isCheck) {
        dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);
        this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);
      } else {
        var dropUl = this.expandParent(dropLi);
        var childLi = !isNullOrUndefined(index) ? dropUl.childNodes[parseInt(index.toString(), 10)] : null;
        dropUl.insertBefore(dragLi, childLi);
        this.moveData(dragLi, childLi, dropUl, true, dragObj);
      }
      this.updateElement(dragParentUl, dragParentLi);
      this.updateAriaLevel(dragLi);
      if (dragObj.element.id === this.element.id) {
        this.updateList();
      } else {
        dragObj.updateInstance();
        this.updateInstance();
      }
    };
    TreeView2.prototype.moveData = function(dragLi, dropLi, dropUl, pre, dragObj) {
      var dropParentLi = closest(dropUl, "." + LISTITEM);
      var id = this.getId(dragLi);
      var removedData = dragObj.updateChildField(dragObj.treeData, dragObj.fields, id, null, null, true);
      var refId = this.getId(dropLi);
      var index = refId ? this.getDataPos(this.treeData, this.fields, refId) : null;
      var parentId = this.getId(dropParentLi);
      if (this.dataType === 1) {
        this.updateField(this.treeData, this.fields, parentId, "hasChildren", true);
        var pos = isNullOrUndefined(index) ? this.treeData.length : pre ? index : index + 1;
        if (isNullOrUndefined(parentId) && !this.hasPid) {
          delete removedData[0][this.fields.parentID];
        } else {
          var currPid = this.isNumberTypeId ? parseFloat(parentId) : parentId;
          setValue(this.fields.parentID, currPid, removedData[0]);
        }
        this.treeData.splice(pos, 0, removedData[0]);
        if (dragObj.element.id !== this.element.id) {
          var childData = dragObj.removeChildNodes(id);
          pos++;
          for (var i = 0, len = childData.length; i < len; i++) {
            this.treeData.splice(pos, 0, childData[parseInt(i.toString(), 10)]);
            pos++;
          }
          dragObj.groupedData = dragObj.getGroupedData(dragObj.treeData, dragObj.fields.parentID);
        }
        this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
      } else {
        this.addChildData(this.treeData, this.fields, parentId, removedData, pre ? index : index + 1);
      }
    };
    TreeView2.prototype.expandParent = function(dropLi) {
      var dropIcon = select("div." + EXPANDABLE + ", div." + COLLAPSIBLE, dropLi);
      if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && this.preventExpand !== true) {
        this.expandAction(dropLi, dropIcon, null);
      }
      var dropUl = select("." + PARENTITEM, dropLi);
      if (this.preventExpand === true && !dropUl && dropIcon) {
        this.renderChildNodes(dropLi);
      }
      dropUl = select("." + PARENTITEM, dropLi);
      if (!isNullOrUndefined(dropUl) && this.preventExpand && !(dropLi.getAttribute("aria-expanded") === "true")) {
        dropUl.style.display = "none";
      }
      if (!isNullOrUndefined(dropUl) && this.preventExpand === false) {
        dropUl.style.display = "block";
      }
      if (isNullOrUndefined(dropUl) && this.preventExpand === true) {
        if (isNullOrUndefined(dropIcon)) {
          ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);
        }
        var icon = select("div." + EXPANDABLE + ", div." + COLLAPSIBLE, dropLi);
        if (icon) {
          icon.classList.add("e-icon-expandable");
        }
        dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);
        dropLi.appendChild(dropUl);
        if (icon) {
          removeClass([icon], COLLAPSIBLE);
        } else {
          ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);
        }
        dropLi.setAttribute("aria-expanded", "false");
        dropUl.style.display = "none";
      }
      if (isNullOrUndefined(dropUl)) {
        var args = this.expandArgs;
        if (isNullOrUndefined(args) || args && args.name !== "nodeExpanding") {
          this.trigger("nodeExpanding", this.getExpandEvent(dropLi, null));
        }
        if (isNullOrUndefined(dropIcon)) {
          ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);
        }
        var icon = select("div." + EXPANDABLE + ", div." + COLLAPSIBLE, dropLi);
        if (icon) {
          removeClass([icon], EXPANDABLE);
        } else {
          ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);
          icon = select("div." + ICON3, dropLi);
          removeClass([icon], EXPANDABLE);
        }
        dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);
        dropLi.appendChild(dropUl);
        this.addExpand(dropLi);
        this.trigger("nodeExpanded", this.getExpandEvent(dropLi, null));
      }
      var collapseIcon = select("div." + COLLAPSIBLE, dropLi);
      if (!isNullOrUndefined(dropUl) && collapseIcon && this.preventExpand && !(dropLi.getAttribute("aria-expanded") === "true")) {
        removeClass([collapseIcon], COLLAPSIBLE);
        dropLi.setAttribute("aria-expanded", "false");
        addClass([collapseIcon], EXPANDABLE);
      }
      return dropUl;
    };
    TreeView2.prototype.updateElement = function(dragParentUl, dragParentLi) {
      if (dragParentLi && dragParentUl.childElementCount === 0) {
        var dragIcon = select("div." + ICON3, dragParentLi);
        detach(dragParentUl);
        detach(dragIcon);
        var parentId = this.getId(dragParentLi);
        this.updateField(this.treeData, this.fields, parentId, "hasChildren", false);
        this.removeExpand(dragParentLi, true);
      }
    };
    TreeView2.prototype.updateAriaLevel = function(dragLi) {
      var level = this.parents(dragLi, "." + PARENTITEM).length;
      dragLi.setAttribute("aria-level", "" + level);
      this.updateChildAriaLevel(select("." + PARENTITEM, dragLi), level + 1);
    };
    TreeView2.prototype.updateChildAriaLevel = function(element2, level) {
      if (!isNullOrUndefined(element2)) {
        var cNodes = element2.childNodes;
        for (var i = 0, len = cNodes.length; i < len; i++) {
          var liEle = cNodes[parseInt(i.toString(), 10)];
          liEle.setAttribute("aria-level", "" + level);
          this.updateChildAriaLevel(select("." + PARENTITEM, liEle), level + 1);
        }
      }
    };
    TreeView2.prototype.renderVirtualEle = function(e) {
      var pre;
      var event2 = e.event;
      var offsetY = this.getOffsetY(event2, e.target);
      if (offsetY > e.target.offsetHeight - 2) {
        pre = false;
      } else if (offsetY < 2) {
        pre = true;
      }
      var virEle = this.createElement("div", {
        className: SIBLING
      });
      var index = this.fullRowSelect ? pre ? 1 : 2 : pre ? 0 : 1;
      e.target.insertBefore(virEle, e.target.children[parseInt(index.toString(), 10)]);
    };
    TreeView2.prototype.removeVirtualEle = function() {
      var sibEle = select("." + SIBLING);
      if (sibEle) {
        detach(sibEle);
      }
    };
    TreeView2.prototype.destroyDrag = function() {
      if (this.dragObj && this.dropObj) {
        this.dragObj.destroy();
        this.dropObj.destroy();
      }
    };
    TreeView2.prototype.getDragEvent = function(event2, obj, dropTarget, target, dragNode, cloneEle, level, drop) {
      var dropLi = dropTarget ? closest(dropTarget, "." + LISTITEM) : null;
      var dropData = dropLi ? this.getNodeData(dropLi) : null;
      var draggedNode = obj ? obj.dragLi : dragNode;
      var draggedNodeData = obj ? obj.dragData : null;
      var newParent = dropTarget ? this.parents(dropTarget, "." + LISTITEM) : null;
      var dragLiParent = obj.dragLi.parentElement;
      var dragParent = obj.dragLi ? closest(dragLiParent, "." + LISTITEM) : null;
      var targetParent = null;
      var indexValue = null;
      var iconCss = [DROPNEXT, DROPIN, DROPOUT, NODROP];
      var iconClass = null;
      var node = drop === true ? draggedNode : dropLi;
      var index = node ? closest(node, ".e-list-parent") : null;
      var i = 0;
      var position = null;
      dragParent = obj.dragLi && dragParent === null ? closest(dragLiParent, "." + ROOT5) : dragParent;
      dragParent = drop === true ? this.dragParent : dragParent;
      if (cloneEle) {
        while (i < 4) {
          if (select("." + ICON3, cloneEle).classList.contains(iconCss[parseInt(i.toString(), 10)])) {
            iconClass = iconCss[parseInt(i.toString(), 10)];
            break;
          }
          i++;
        }
      }
      if (index) {
        var dropTar = 0;
        for (i = 0; i < index.childElementCount; i++) {
          dropTar = drop !== true && index.children[parseInt(i.toString(), 10)] === draggedNode && dropLi !== draggedNode ? ++dropTar : dropTar;
          if (drop !== true && index.children[parseInt(i.toString(), 10)].classList.contains("e-hover")) {
            indexValue = event2.offsetY >= 23 ? i + 1 : i;
            break;
          } else if (index.children[parseInt(i.toString(), 10)] === node) {
            indexValue = event2.offsetY >= 23 ? i : i;
            break;
          }
        }
        indexValue = dropTar !== 0 ? --indexValue : indexValue;
        position = this.isDropIn ? "Inside" : event2.offsetY < 7 ? "Before" : "After";
      }
      if (dropTarget) {
        if (newParent.length === 0) {
          targetParent = null;
        } else if (dropTarget.classList.contains(LISTITEM)) {
          targetParent = newParent[0];
        } else {
          targetParent = newParent[1];
        }
      }
      if (dropLi === draggedNode) {
        targetParent = dropLi;
      }
      if (dropTarget && target.offsetHeight <= 33 && event2.offsetY < target.offsetHeight - 10 && event2.offsetY > 6) {
        targetParent = dropLi;
        if (drop !== true) {
          level = ++level;
          var parent_2 = targetParent ? select(".e-list-parent", targetParent) : null;
          indexValue = parent_2 ? parent_2.children.length : 0;
          if (!(this.fields.dataSource instanceof DataManager) && parent_2 === null && targetParent) {
            var parent_3 = targetParent.hasAttribute("data-uid") ? this.getChildNodes(this.fields.dataSource, targetParent.getAttribute("data-uid").toString()) : null;
            indexValue = parent_3 ? parent_3.length : 0;
          }
        }
      }
      return {
        cancel: false,
        clonedNode: cloneEle,
        event: event2,
        draggedNode,
        draggedNodeData,
        droppedNode: dropLi,
        droppedNodeData: dropData,
        dropIndex: indexValue,
        dropLevel: level,
        draggedParentNode: dragParent,
        dropTarget: targetParent,
        dropIndicator: iconClass,
        target,
        position
      };
    };
    TreeView2.prototype.addFullRow = function(toAdd) {
      var len = this.liList.length;
      if (toAdd) {
        for (var i = 0; i < len; i++) {
          this.createFullRow(this.liList[parseInt(i.toString(), 10)]);
        }
      } else {
        for (var i = 0; i < len; i++) {
          var rowDiv = select("." + FULLROW, this.liList[parseInt(i.toString(), 10)]);
          detach(rowDiv);
        }
      }
    };
    TreeView2.prototype.createFullRow = function(item) {
      var rowDiv = this.createElement("div", {
        className: FULLROW
      });
      item.insertBefore(rowDiv, item.childNodes[0]);
    };
    TreeView2.prototype.addMultiSelect = function(toAdd) {
      if (toAdd) {
        var liEles = selectAll("." + LISTITEM + ':not([aria-selected="true"])', this.element);
        for (var _i = 0, liEles_1 = liEles; _i < liEles_1.length; _i++) {
          var ele = liEles_1[_i];
          ele.setAttribute("aria-selected", "false");
        }
      } else {
        var liEles = selectAll("." + LISTITEM + '[aria-selected="false"]', this.element);
        for (var _a = 0, liEles_2 = liEles; _a < liEles_2.length; _a++) {
          var ele = liEles_2[_a];
          ele.removeAttribute("aria-selected");
        }
      }
    };
    TreeView2.prototype.collapseByLevel = function(element2, level, excludeHiddenNodes, currentLevel) {
      currentLevel = isNullOrUndefined(currentLevel) ? 1 : currentLevel;
      if (level > 0 && !isNullOrUndefined(element2)) {
        var cNodes = this.getVisibleNodes(excludeHiddenNodes, element2.childNodes);
        for (var i = 0, len = cNodes.length; i < len; i++) {
          var liEle = cNodes[parseInt(i.toString(), 10)];
          var icon = select("." + COLLAPSIBLE, select("." + TEXTWRAP, liEle));
          if (currentLevel >= level && !isNullOrUndefined(icon)) {
            this.collapseNode(liEle, icon, null);
          }
          this.collapseByLevel(select("." + PARENTITEM, liEle), level, excludeHiddenNodes, currentLevel + 1);
        }
      }
    };
    TreeView2.prototype.collapseAllNodes = function(excludeHiddenNodes) {
      var cIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll("." + COLLAPSIBLE, this.element));
      for (var i = 0, len = cIcons.length; i < len; i++) {
        var icon = cIcons[parseInt(i.toString(), 10)];
        var liEle = closest(icon, "." + LISTITEM);
        this.collapseNode(liEle, icon, null);
      }
    };
    TreeView2.prototype.expandByLevel = function(element2, level, excludeHiddenNodes) {
      if (level > 0 && !isNullOrUndefined(element2)) {
        var eNodes = this.getVisibleNodes(excludeHiddenNodes, element2.childNodes);
        for (var i = 0, len = eNodes.length; i < len; i++) {
          var liEle = eNodes[parseInt(i.toString(), 10)];
          var icon = select("." + EXPANDABLE, select("." + TEXTWRAP, liEle));
          if (!isNullOrUndefined(icon)) {
            this.expandAction(liEle, icon, null);
          }
          this.expandByLevel(select("." + PARENTITEM, liEle), level - 1, excludeHiddenNodes);
        }
      }
    };
    TreeView2.prototype.expandAllNodes = function(excludeHiddenNodes) {
      var eIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll("." + EXPANDABLE, this.element));
      for (var _i = 0, eIcons_1 = eIcons; _i < eIcons_1.length; _i++) {
        var icon = eIcons_1[_i];
        var liEle = closest(icon, "." + LISTITEM);
        this.expandAction(liEle, icon, null, true, null, true);
      }
    };
    TreeView2.prototype.getVisibleNodes = function(excludeHiddenNodes, nodes) {
      var vNodes = Array.prototype.slice.call(nodes);
      if (excludeHiddenNodes) {
        for (var i = 0; i < vNodes.length; i++) {
          if (!isVisible(vNodes[parseInt(i.toString(), 10)])) {
            vNodes.splice(i, 1);
            i--;
          }
        }
      }
      return vNodes;
    };
    TreeView2.prototype.removeNode = function(node) {
      var dragParentUl = closest(node, "." + PARENTITEM);
      var dragParentLi = closest(dragParentUl, "." + LISTITEM);
      if (!isNullOrUndefined(this.nodeTemplateFn)) {
        this.destroyTemplate(node);
      }
      detach(node);
      this.updateElement(dragParentUl, dragParentLi);
      this.removeData(node);
    };
    TreeView2.prototype.updateInstance = function() {
      this.updateList();
      this.updateSelectedNodes();
      this.updateExpandedNodes();
    };
    TreeView2.prototype.updateList = function() {
      this.liList = Array.prototype.slice.call(selectAll("." + LISTITEM, this.element));
    };
    TreeView2.prototype.updateSelectedNodes = function() {
      this.setProperties({
        selectedNodes: []
      }, true);
      var sNodes = selectAll("." + ACTIVE2, this.element);
      this.selectGivenNodes(sNodes);
    };
    TreeView2.prototype.updateExpandedNodes = function() {
      this.setProperties({
        expandedNodes: []
      }, true);
      var eNodes = selectAll('[aria-expanded="true"]', this.element);
      for (var i = 0, len = eNodes.length; i < len; i++) {
        this.addExpand(eNodes[parseInt(i.toString(), 10)]);
      }
    };
    TreeView2.prototype.removeData = function(node) {
      if (this.dataType === 1) {
        var dm = new DataManager(this.treeData);
        var id = this.getId(node);
        var data = {};
        var newId = this.isNumberTypeId ? parseFloat(id) : id;
        data[this.fields.id] = newId;
        dm.remove(this.fields.id, data);
        this.removeChildNodes(id);
      } else {
        var id = this.getId(node);
        this.updateChildField(this.treeData, this.fields, id, null, null, true);
      }
    };
    TreeView2.prototype.removeChildNodes = function(parentId) {
      var cNodes = this.getChildGroup(this.groupedData, parentId, false);
      var childData = [];
      for (var i = 0, len = cNodes.length; i < len; i++) {
        var dm = new DataManager(this.treeData);
        var id = getValue(this.fields.id, cNodes[parseInt(i.toString(), 10)]).toString();
        var data = {};
        var currId = this.isNumberTypeId ? parseFloat(id) : id;
        data[this.fields.id] = currId;
        var nodeData = dm.remove(this.fields.id, data);
        childData.push(nodeData[0]);
        this.removeChildNodes(id);
      }
      return childData;
    };
    TreeView2.prototype.doGivenAction = function(nodes, selector, toExpand) {
      for (var i = 0, len = nodes.length; i < len; i++) {
        var liEle = this.getElement(nodes[parseInt(i.toString(), 10)]);
        if (isNullOrUndefined(liEle)) {
          continue;
        }
        var icon = select("." + selector, select("." + TEXTWRAP, liEle));
        if (!isNullOrUndefined(icon)) {
          if (toExpand) {
            this.expandAction(liEle, icon, null);
          } else {
            this.collapseNode(liEle, icon, null);
          }
        }
      }
    };
    TreeView2.prototype.addGivenNodes = function(nodes, dropLi, index, isRemote, dropEle) {
      if (nodes.length === 0) {
        return;
      }
      var sNodes = this.getSortedData(nodes);
      var level = dropLi ? parseFloat(dropLi.getAttribute("aria-level")) + 1 : 1;
      if (isRemote) {
        this.updateMapper(level);
      }
      var li = ListBase.createListItemFromJson(this.createElement, sNodes, this.listBaseOption, level);
      var id = this.getId(dropLi);
      var dropIcon1;
      if (!isNullOrUndefined(dropLi)) {
        dropIcon1 = select("div." + ICON3, dropLi);
      }
      if (this.dataType === 1 && dropIcon1 && dropIcon1.classList.contains(EXPANDABLE) && this.preventExpand && !isNullOrUndefined(this.element.offsetParent) && !this.element.offsetParent.parentElement.classList.contains("e-filemanager")) {
        this.preventExpand = true;
      }
      if (this.dataType !== 1) {
        this.addChildData(this.treeData, this.fields, id, nodes, index);
        this.isFirstRender = false;
      }
      var dropUl;
      if (!dropEle) {
        dropUl = dropLi ? this.expandParent(dropLi) : select("." + PARENTITEM, this.element);
      } else {
        dropUl = dropEle;
      }
      var refNode = !isNullOrUndefined(index) ? dropUl.childNodes[parseInt(index.toString(), 10)] : null;
      if (!this.isFirstRender || this.dataType === 1) {
        var args = this.expandArgs;
        if (refNode || this.sortOrder === "None") {
          for (var i = 0; i < li.length; i++) {
            dropUl.insertBefore(li[parseInt(i.toString(), 10)], refNode);
          }
          if (this.dataType === 1 && !isNullOrUndefined(dropLi) && !this.preventExpand && !isNullOrUndefined(this.element.offsetParent) && !this.element.offsetParent.parentElement.classList.contains("e-filemanager")) {
            this.preventExpand = false;
            var dropIcon = select("div." + ICON3, dropLi);
            if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && (isNullOrUndefined(args) || args.name !== "nodeExpanding")) {
              this.expandAction(dropLi, dropIcon, null);
            }
          }
        }
        if (!refNode && (this.sortOrder === "Ascending" || this.sortOrder === "Descending")) {
          if (dropUl.childNodes.length === 0) {
            for (var i = 0; i < li.length; i++) {
              dropUl.insertBefore(li[parseInt(i.toString(), 10)], refNode);
            }
            if (this.dataType === 1 && !isNullOrUndefined(dropLi) && !this.preventExpand && !isNullOrUndefined(this.element.offsetParent) && !this.element.offsetParent.parentElement.classList.contains("e-filemanager")) {
              this.preventExpand = false;
              var dropIcon = select("div." + ICON3, dropLi);
              if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && (isNullOrUndefined(args) || args.name !== "nodeExpanding")) {
                this.expandAction(dropLi, dropIcon, null);
              }
            }
          } else {
            var cNodes = dropUl.childNodes;
            for (var i = 0; i < li.length; i++) {
              for (var j = 0; j < cNodes.length; j++) {
                var returnValue = this.sortOrder === "Ascending" ? cNodes[parseInt(j.toString(), 10)].textContent.toUpperCase() > li[parseInt(i.toString(), 10)].innerText.toUpperCase() : cNodes[parseInt(j.toString(), 10)].textContent.toUpperCase() < li[parseInt(i.toString(), 10)].innerText.toUpperCase();
                if (returnValue) {
                  dropUl.insertBefore(li[parseInt(i.toString(), 10)], cNodes[parseInt(j.toString(), 10)]);
                  break;
                }
                dropUl.insertBefore(li[parseInt(i.toString(), 10)], cNodes[cNodes.length]);
              }
            }
          }
        }
      }
      if (this.dataType === 1) {
        this.updateField(this.treeData, this.fields, id, "hasChildren", true);
        var refId = this.getId(refNode);
        var pos = isNullOrUndefined(refId) ? this.treeData.length : this.getDataPos(this.treeData, this.fields, refId);
        for (var j = 0; j < nodes.length; j++) {
          if (!isNullOrUndefined(id)) {
            var currId = this.isNumberTypeId ? parseFloat(id) : id;
            setValue(this.fields.parentID, currId, nodes[parseInt(j.toString(), 10)]);
          }
          this.treeData.splice(pos, 0, nodes[parseInt(j.toString(), 10)]);
          pos++;
        }
      }
      this.finalizeNode(dropUl);
    };
    TreeView2.prototype.updateMapper = function(level) {
      var mapper = level === 1 ? this.fields : this.getChildFields(this.fields, level - 1, 1);
      this.updateListProp(mapper);
    };
    TreeView2.prototype.updateListProp = function(mapper) {
      var prop = this.getActualProperties(mapper);
      this.listBaseOption.fields = prop;
      this.listBaseOption.fields.url = Object.prototype.hasOwnProperty.call(prop, "navigateUrl") ? prop.navigateUrl : "navigateUrl";
    };
    TreeView2.prototype.getDataPos = function(obj, mapper, id) {
      var pos = null;
      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        var nodeId = getValue(mapper.id, obj[parseInt(i.toString(), 10)]);
        if (obj[parseInt(i.toString(), 10)] && nodeId && nodeId.toString() === id) {
          return i;
        } else if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, obj[parseInt(i.toString(), 10)]))) {
          var data = getValue(mapper.child, obj[parseInt(i.toString(), 10)]);
          pos = this.getDataPos(data, this.getChildMapper(mapper), id);
          if (pos !== null) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[parseInt(i.toString(), 10)]))) {
          var items = getValue("child", obj[parseInt(i.toString(), 10)]);
          pos = this.getDataPos(items, this.getChildMapper(mapper), id);
          if (pos !== null) {
            break;
          }
        }
      }
      return pos;
    };
    TreeView2.prototype.addChildData = function(obj, mapper, id, data, index) {
      var updated;
      if (isNullOrUndefined(id)) {
        index = isNullOrUndefined(index) ? obj.length : index;
        for (var k = 0, len = data.length; k < len; k++) {
          obj.splice(index, 0, data[parseInt(k.toString(), 10)]);
          index++;
        }
        return updated;
      }
      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        var nodeId = getValue(mapper.id, obj[parseInt(i.toString(), 10)]);
        if (obj[parseInt(i.toString(), 10)] && nodeId && nodeId.toString() === id) {
          if (typeof mapper.child === "string" && Object.prototype.hasOwnProperty.call(obj[parseInt(i.toString(), 10)], mapper.child) && obj[parseInt(i.toString(), 10)][mapper.child] !== null || this.fields.dataSource instanceof DataManager && Object.prototype.hasOwnProperty.call(obj[parseInt(i.toString(), 10)], "child")) {
            var key = typeof mapper.child === "string" ? mapper.child : "child";
            var childData = getValue(key, obj[parseInt(i.toString(), 10)]);
            if (isNullOrUndefined(childData)) {
              childData = [];
            }
            index = isNullOrUndefined(index) ? childData.length : index;
            for (var k = 0, len = data.length; k < len; k++) {
              childData.splice(index, 0, data[parseInt(k.toString(), 10)]);
              index++;
            }
          } else {
            var key = typeof mapper.child === "string" ? mapper.child : "child";
            obj[parseInt(i.toString(), 10)]["" + key] = data;
          }
          return true;
        } else if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, obj[parseInt(i.toString(), 10)]))) {
          var childObj = getValue(mapper.child, obj[parseInt(i.toString(), 10)]);
          updated = this.addChildData(childObj, this.getChildMapper(mapper), id, data, index);
          if (updated !== void 0) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[parseInt(i.toString(), 10)]))) {
          var childData = getValue("child", obj[parseInt(i.toString(), 10)]);
          updated = this.addChildData(childData, this.getChildMapper(mapper), id, data, index);
          if (updated !== void 0) {
            break;
          }
        }
      }
      return updated;
    };
    TreeView2.prototype.doDisableAction = function(nodes) {
      var validNodes = this.nodeType(nodes);
      var validID = this.checkValidId(validNodes);
      this.validArr = [];
      for (var i = 0, len = validID.length; i < len; i++) {
        var id = validID[parseInt(i.toString(), 10)][this.fields.id].toString();
        if (id && this.disableNode.indexOf(id) === -1) {
          this.disableNode.push(id);
        }
        var liEle = this.getElement(id);
        if (liEle) {
          liEle.setAttribute("aria-disabled", "true");
          addClass([liEle], DISABLE);
        }
      }
    };
    TreeView2.prototype.doEnableAction = function(nodes) {
      var strNodes = this.nodeType(nodes);
      for (var i = 0, len = strNodes.length; i < len; i++) {
        var liEle = this.getElement(strNodes[parseInt(i.toString(), 10)]);
        var id = strNodes[parseInt(i.toString(), 10)];
        if (id && this.disableNode.indexOf(id) !== -1) {
          this.disableNode.splice(this.disableNode.indexOf(id), 1);
        }
        if (liEle) {
          liEle.removeAttribute("aria-disabled");
          removeClass([liEle], DISABLE);
        }
      }
    };
    TreeView2.prototype.nodeType = function(nodes) {
      var validID = [];
      for (var i = 0, len = nodes.length; i < len; i++) {
        var id = void 0;
        if (typeof nodes[parseInt(i.toString(), 10)] == "string") {
          id = nodes[parseInt(i.toString(), 10)] ? nodes[parseInt(i.toString(), 10)].toString() : null;
        } else if (typeof nodes[parseInt(i.toString(), 10)] === "object") {
          id = nodes[parseInt(i.toString(), 10)] ? nodes[parseInt(i.toString(), 10)].getAttribute("data-uid").toString() : null;
        }
        if (validID.indexOf(id) === -1) {
          validID.push(id);
        }
      }
      return validID;
    };
    TreeView2.prototype.checkValidId = function(node) {
      var _this = this;
      if (this.dataType === 1) {
        this.validArr = this.treeData.filter(function(data) {
          return node.indexOf(data[_this.fields.id] ? data[_this.fields.id].toString() : null) !== -1;
        });
      } else if (this.dataType === 2) {
        for (var k = 0; k < this.treeData.length; k++) {
          var id = this.treeData[parseInt(k.toString(), 10)][this.fields.id] ? this.treeData[parseInt(k.toString(), 10)][this.fields.id].toString() : null;
          if (node.indexOf(id) !== -1) {
            this.validArr.push(this.treeData[parseInt(k.toString(), 10)]);
          }
          var childItems = getValue(this.fields.child.toString(), this.treeData[parseInt(k.toString(), 10)]);
          if (childItems) {
            this.filterNestedChild(childItems, node);
          }
        }
      }
      return this.validArr;
    };
    TreeView2.prototype.filterNestedChild = function(treeData, nodes) {
      for (var k = 0; k < treeData.length; k++) {
        var id = treeData[parseInt(k.toString(), 10)][this.fields.id] ? treeData[parseInt(k.toString(), 10)][this.fields.id].toString() : null;
        if (nodes.indexOf(id) !== -1) {
          this.validArr.push(treeData[parseInt(k.toString(), 10)]);
        }
        var childItems = getValue(this.fields.child.toString(), treeData[parseInt(k.toString(), 10)]);
        if (childItems) {
          this.filterNestedChild(childItems, nodes);
        }
      }
    };
    TreeView2.prototype.setTouchClass = function() {
      var ele = closest(this.element, "." + BIGGER);
      this.touchClass = isNullOrUndefined(ele) ? "" : SMALL;
    };
    TreeView2.prototype.updatePersistProp = function() {
      this.removeField(this.treeData, this.fields, ["selected", "expanded"]);
      var sleNodes = this.selectedNodes;
      for (var l = 0, slelen = sleNodes.length; l < slelen; l++) {
        this.updateField(this.treeData, this.fields, sleNodes[parseInt(l.toString(), 10)], "selected", true);
      }
      var enodes = this.expandedNodes;
      for (var k = 0, nodelen = enodes.length; k < nodelen; k++) {
        this.updateField(this.treeData, this.fields, enodes[parseInt(k.toString(), 10)], "expanded", true);
      }
      if (this.showCheckBox) {
        this.removeField(this.treeData, this.fields, ["isChecked"]);
        var cnodes = this.checkedNodes;
        for (var m = 0, nodelen = cnodes.length; m < nodelen; m++) {
          this.updateField(this.treeData, this.fields, cnodes[parseInt(m.toString(), 10)], "isChecked", true);
        }
      }
    };
    TreeView2.prototype.removeField = function(obj, mapper, names) {
      if (isNullOrUndefined(obj) || isNullOrUndefined(mapper)) {
        return;
      }
      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        for (var j = 0; j < names.length; j++) {
          var field = this.getMapperProp(mapper, names[parseInt(j.toString(), 10)]);
          if (!isNullOrUndefined(obj[parseInt(i.toString(), 10)]["" + field])) {
            delete obj[parseInt(i.toString(), 10)]["" + field];
          }
        }
        if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, obj[parseInt(i.toString(), 10)]))) {
          this.removeField(getValue(mapper.child, obj[parseInt(i.toString(), 10)]), this.getChildMapper(mapper), names);
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[parseInt(i.toString(), 10)]))) {
          this.removeField(getValue("child", obj[parseInt(i.toString(), 10)]), this.getChildMapper(mapper), names);
        }
      }
    };
    TreeView2.prototype.getMapperProp = function(mapper, fieldName) {
      switch (fieldName) {
        case "selected":
          return !isNullOrUndefined(mapper.selected) ? mapper.selected : "selected";
        case "expanded":
          return !isNullOrUndefined(mapper.expanded) ? mapper.expanded : "expanded";
        case "isChecked":
          return !isNullOrUndefined(mapper.isChecked) ? mapper.isChecked : "isChecked";
        case "hasChildren":
          return !isNullOrUndefined(mapper.hasChildren) ? mapper.hasChildren : "hasChildren";
        default:
          return fieldName;
      }
    };
    TreeView2.prototype.updateField = function(obj, mapper, id, key, value) {
      if (isNullOrUndefined(id)) {
        return;
      } else if (this.dataType === 1) {
        var newId = this.isNumberTypeId ? parseFloat(id) : id;
        var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, "equal", newId, false));
        setValue(this.getMapperProp(mapper, key), value, resultData[0]);
      } else {
        this.updateChildField(obj, mapper, id, key, value);
      }
    };
    TreeView2.prototype.updateChildField = function(obj, mapper, id, key, value, remove2) {
      var removedData;
      if (isNullOrUndefined(obj)) {
        return removedData;
      }
      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        var nodeId = getValue(mapper.id, obj[parseInt(i.toString(), 10)]);
        if (obj[parseInt(i.toString(), 10)] && !isNullOrUndefined(nodeId) && nodeId.toString() === id) {
          if (remove2) {
            removedData = obj.splice(i, 1);
          } else {
            setValue(this.getMapperProp(mapper, key), value, obj[parseInt(i.toString(), 10)]);
            removedData = [];
          }
          return removedData;
        } else if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, obj[parseInt(i.toString(), 10)]))) {
          var childData = getValue(mapper.child, obj[parseInt(i.toString(), 10)]);
          removedData = this.updateChildField(childData, this.getChildMapper(mapper), id, key, value, remove2);
          if (removedData !== void 0) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[parseInt(i.toString(), 10)]))) {
          var childItems = getValue("child", obj[parseInt(i.toString(), 10)]);
          removedData = this.updateChildField(childItems, this.getChildMapper(mapper), id, key, value, remove2);
          if (removedData !== void 0) {
            break;
          }
        }
      }
      return removedData;
    };
    TreeView2.prototype.triggerEvent = function(action, node) {
      this.renderReactTemplates();
      if (action === "addNodes") {
        var nodeData = [];
        for (var i = 0; i < node.length; i++) {
          nodeData.push(this.getNode(this.getElement(isNullOrUndefined(node[parseInt(i.toString(), 10)][this.fields.id]) ? getValue(this.fields.id, node[parseInt(i.toString(), 10)]).toString() : null)));
        }
        node = nodeData;
      }
      var eventArgs = {
        data: this.treeData,
        action,
        nodeData: node
      };
      this.trigger("dataSourceChanged", eventArgs);
    };
    TreeView2.prototype.wireInputEvents = function(inpEle) {
      EventHandler.add(inpEle, "blur", this.inputFocusOut, this);
    };
    TreeView2.prototype.wireEditingEvents = function(toBind) {
      var _this = this;
      if (toBind && !this.disabled) {
        this.touchEditObj = new Touch(this.element, {
          tap: function(e) {
            if (_this.isDoubleTapped(e) && e.tapCount === 2) {
              e.originalEvent.preventDefault();
              _this.editingHandler(e.originalEvent);
            }
          }
        });
      } else {
        if (this.touchEditObj) {
          this.touchEditObj.destroy();
        }
      }
    };
    TreeView2.prototype.wireClickEvent = function(toBind) {
      var _this = this;
      if (toBind) {
        this.touchClickObj = new Touch(this.element, {
          tap: function(e) {
            _this.clickHandler(e);
          }
        });
      } else {
        if (this.touchClickObj) {
          this.touchClickObj.destroy();
        }
      }
    };
    TreeView2.prototype.wireExpandOnEvent = function(toBind) {
      var _this = this;
      if (toBind) {
        this.touchExpandObj = new Touch(this.element, {
          tap: function(e) {
            if ((_this.expandOnType === "Click" || _this.expandOnType === "DblClick" && _this.isDoubleTapped(e) && e.tapCount === 2) && e.originalEvent.which !== 3) {
              _this.expandHandler(e);
            }
          }
        });
      } else {
        if (this.touchExpandObj) {
          this.touchExpandObj.destroy();
        }
      }
    };
    TreeView2.prototype.mouseDownHandler = function(e) {
      this.mouseDownStatus = true;
      if (e.shiftKey || e.ctrlKey) {
        e.preventDefault();
      }
      if (e.ctrlKey && this.allowMultiSelection) {
        EventHandler.add(this.element, "contextmenu", this.preventContextMenu, this);
      }
    };
    TreeView2.prototype.preventContextMenu = function(e) {
      e.preventDefault();
    };
    TreeView2.prototype.wireEvents = function() {
      EventHandler.add(this.element, "mousedown", this.mouseDownHandler, this);
      this.wireClickEvent(true);
      if (this.expandOnType !== "None") {
        this.wireExpandOnEvent(true);
      }
      EventHandler.add(this.element, "mouseover", this.onMouseOver, this);
      EventHandler.add(this.element, "mouseout", this.onMouseLeave, this);
      this.keyboardModule = new KeyboardEvents(this.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
    };
    TreeView2.prototype.unWireEvents = function() {
      EventHandler.remove(this.element, "mousedown", this.mouseDownHandler);
      this.wireClickEvent(false);
      this.wireExpandOnEvent(false);
      EventHandler.remove(this.element, "mouseover", this.onMouseOver);
      EventHandler.remove(this.element, "mouseout", this.onMouseLeave);
      if (!this.disabled) {
        this.keyboardModule.destroy();
      }
    };
    TreeView2.prototype.parents = function(element2, selector) {
      var matched = [];
      var el = element2.parentNode;
      while (!isNullOrUndefined(el)) {
        if (matches(el, selector)) {
          matched.push(el);
        }
        el = el.parentNode;
      }
      return matched;
    };
    TreeView2.prototype.isDoubleTapped = function(e) {
      var target = e.originalEvent.target;
      var secondTap;
      if (target && e.tapCount) {
        if (e.tapCount === 1) {
          this.firstTap = closest(target, "." + LISTITEM);
        } else if (e.tapCount === 2) {
          secondTap = closest(target, "." + LISTITEM);
        }
      }
      return this.firstTap === secondTap;
    };
    TreeView2.prototype.isDescendant = function(parent, child) {
      var node = child.parentNode;
      while (!isNullOrUndefined(node)) {
        if (node === parent) {
          return true;
        }
        node = node.parentNode;
      }
      return false;
    };
    TreeView2.prototype.showSpinner = function(element2) {
      addClass([element2], LOAD);
      createSpinner({
        target: element2,
        width: Browser.isDevice ? 16 : 14
      }, this.createElement);
      showSpinner(element2);
    };
    TreeView2.prototype.hideSpinner = function(element2) {
      hideSpinner(element2);
      element2.innerHTML = "";
      removeClass([element2], LOAD);
    };
    TreeView2.prototype.setCheckedNodes = function(nodes) {
      nodes = JSON.parse(JSON.stringify(nodes));
      if (nodes.length > 1 && typeof this.nodeChecked === "function" && this.nodeChecked.length > 0) {
        this.isFilter = true;
      }
      this.uncheckAll(this.checkedNodes);
      this.setIndeterminate(nodes);
      if (nodes.length > 0) {
        this.checkAll(nodes);
      }
    };
    TreeView2.prototype.setValidCheckedNode = function(node, nodes) {
      if (nodes === void 0) {
        nodes = [];
      }
      if (this.dataType === 1) {
        var mapper = this.fields;
        var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, "equal", node, true));
        if (resultData[0]) {
          this.setChildCheckState(resultData, node, resultData[0], nodes);
          if (this.autoCheck) {
            var parent_4 = resultData[0][this.fields.parentID] ? resultData[0][this.fields.parentID].toString() : null;
            var childNodes = this.getChildNodes(this.treeData, parent_4);
            var count = 0;
            for (var len = 0; len < childNodes.length; len++) {
              var childId = childNodes[parseInt(len.toString(), 10)][this.fields.id].toString();
              if (this.checkedNodes.indexOf(childId) !== -1) {
                count++;
              }
            }
            if (count === childNodes.length && this.checkedNodes.indexOf(parent_4) === -1 && parent_4) {
              this.checkDisabledState(parent_4);
            }
          }
        }
      } else if (this.dataType === 2) {
        for (var a = 0; a < this.treeData.length; a++) {
          var index = this.treeData[parseInt(a.toString(), 10)][this.fields.id] ? this.treeData[parseInt(a.toString(), 10)][this.fields.id].toString() : "";
          if (index === node && this.checkedNodes.indexOf(node) === -1) {
            this.checkDisabledState(node);
            break;
          }
          var childItems = getValue(this.fields.child.toString(), this.treeData[parseInt(a.toString(), 10)]);
          if (childItems) {
            this.setChildCheckState(childItems, node, this.treeData[parseInt(a.toString(), 10)], nodes);
          }
        }
      }
    };
    TreeView2.prototype.setChildCheckState = function(childItems, node, treeData, nodes) {
      if (nodes === void 0) {
        nodes = [];
      }
      var checkedParent;
      var count = 0;
      if (this.dataType === 1) {
        if (treeData) {
          checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : null;
        }
        for (var index = 0; index < childItems.length; index++) {
          var checkNode = childItems[parseInt(index.toString(), 10)][this.fields.id] ? childItems[parseInt(index.toString(), 10)][this.fields.id].toString() : null;
          if (treeData && checkedParent && this.autoCheck) {
            if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkNode) === -1) {
              this.checkDisabledState(checkNode, childItems[index]);
            }
          }
          if (checkNode === node && this.checkedNodes.indexOf(node) === -1) {
            this.checkDisabledState(node);
          }
          var subChildItems = this.getChildNodes(this.treeData, checkNode);
          var isParentNodeCheck = nodes.length === 1 && nodes[0] === checkNode;
          if (subChildItems.length === node.length || isParentNodeCheck) {
            this.setChildCheckState(subChildItems, node, treeData);
          }
        }
      } else {
        if (treeData) {
          checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : "";
        }
        for (var index = 0; index < childItems.length; index++) {
          var checkedChild = childItems[parseInt(index.toString(), 10)][this.fields.id] ? childItems[parseInt(index.toString(), 10)][this.fields.id].toString() : "";
          var isParentNodeCheck = [node].length === 1 && nodes.length === 0;
          if (treeData && checkedParent && this.autoCheck) {
            if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1 && (checkedChild === node || isParentNodeCheck)) {
              this.checkDisabledState(checkedChild, childItems[index]);
            }
          }
          if (checkedChild === node && this.checkedNodes.indexOf(node) === -1) {
            this.checkDisabledState(node);
          }
          var subChildItems = getValue(this.fields.child.toString(), childItems[parseInt(index.toString(), 10)]);
          if (subChildItems) {
            this.setChildCheckState(subChildItems, node, childItems[parseInt(index.toString(), 10)]);
          }
          if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {
            count++;
          }
          if (count === childItems.length && this.checkedNodes.indexOf(checkedParent) === -1 && this.autoCheck) {
            this.checkDisabledState(checkedParent, treeData);
          }
        }
      }
    };
    TreeView2.prototype.setIndeterminate = function(nodes) {
      for (var i = 0; i < nodes.length; i++) {
        this.setValidCheckedNode(nodes[parseInt(i.toString(), 10)], nodes);
      }
    };
    TreeView2.prototype.updatePosition = function(id, newData, isRefreshChild, childValue) {
      if (this.dataType === 1) {
        var pos = this.getDataPos(this.treeData, this.fields, id);
        this.treeData.splice(pos, 1, newData);
        if (isRefreshChild) {
          this.removeChildNodes(id);
          for (var j = 0; j < childValue.length; j++) {
            this.treeData.splice(pos, 0, childValue[parseInt(j.toString(), 10)]);
            pos++;
          }
        }
        this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
      } else {
        this.updateChildPosition(this.treeData, this.fields, id, [newData], void 0);
      }
    };
    TreeView2.prototype.updateChildPosition = function(treeData, mapper, currID, newData, index) {
      var found;
      for (var i = 0, objlen = treeData.length; i < objlen; i++) {
        var nodeId = getValue(mapper.id, treeData[parseInt(i.toString(), 10)]);
        if (treeData[parseInt(i.toString(), 10)] && nodeId && nodeId.toString() === currID) {
          treeData[parseInt(i.toString(), 10)] = newData[0];
          return true;
        } else if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, treeData[parseInt(i.toString(), 10)]))) {
          var childObj = getValue(mapper.child, treeData[parseInt(i.toString(), 10)]);
          found = this.updateChildPosition(childObj, this.getChildMapper(mapper), currID, newData, index);
          if (found !== void 0) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", treeData[parseInt(i.toString(), 10)]))) {
          var childData = getValue("child", treeData[parseInt(i.toString(), 10)]);
          found = this.updateChildPosition(childData, this.getChildMapper(mapper), currID, newData, index);
          if (found !== void 0) {
            break;
          }
        }
      }
      return found;
    };
    TreeView2.prototype.dynamicState = function() {
      this.setDragAndDrop(this.allowDragAndDrop);
      this.wireEditingEvents(this.allowEditing);
      if (!this.disabled) {
        this.wireEvents();
        this.setRipple();
      } else {
        this.unWireEvents();
        this.rippleFn();
        this.rippleIconFn();
      }
    };
    TreeView2.prototype.crudOperation = function(operation, nodes, target, newText, newNode, index, prevent) {
      var _this = this;
      var data = this.fields.dataSource;
      var matchedArr = [];
      var query = this.getQuery(this.fields);
      var key = this.fields.id;
      var crud;
      var changes = {
        addedRecords: [],
        deletedRecords: [],
        changedRecords: []
      };
      var nodesID = [];
      if (nodes) {
        nodesID = this.nodeType(nodes);
      } else if (target) {
        if (typeof target == "string") {
          nodesID[0] = target.toString();
        } else if (typeof target === "object") {
          nodesID[0] = target.getAttribute("data-uid").toString();
        }
      }
      for (var i = 0, len = nodesID.length; i < len; i++) {
        var liEle = this.getElement(nodesID[parseInt(i.toString(), 10)]);
        if (isNullOrUndefined(liEle)) {
          continue;
        }
        var removedData = this.getNodeObject(nodesID[parseInt(i.toString(), 10)]);
        matchedArr.push(removedData);
      }
      switch (operation) {
        case "delete":
          if (nodes.length === 1) {
            crud = data.remove(key, matchedArr[0], query.fromTable, query);
          } else {
            changes.deletedRecords = matchedArr;
            crud = data.saveChanges(changes, key, query.fromTable, query);
          }
          crud.then(function() {
            return _this.deleteSuccess(nodesID);
          }).catch(function(e) {
            return _this.dmFailure(e);
          });
          break;
        case "update":
          matchedArr[0][this.fields.text] = newText;
          crud = data.update(key, matchedArr[0], query.fromTable, query);
          crud.then(function() {
            return _this.editSucess(target, newText, prevent);
          }).catch(function(e) {
            return _this.dmFailure(e, target, prevent);
          });
          break;
        case "insert":
          if (newNode.length === 1) {
            crud = data.insert(newNode[0], query.fromTable, query);
          } else {
            var arr = [];
            for (var i = 0, len = newNode.length; i < len; i++) {
              arr.push(newNode[parseInt(i.toString(), 10)]);
            }
            changes.addedRecords = arr;
            crud = data.saveChanges(changes, key, query.fromTable, query);
          }
          crud.then(function() {
            var dropLi = _this.getElement(target);
            _this.addSuccess(newNode, dropLi, index);
            _this.preventExpand = false;
          }).catch(function(e) {
            return _this.dmFailure(e);
          });
          break;
      }
    };
    TreeView2.prototype.deleteSuccess = function(nodes) {
      var nodeData = [];
      for (var i = 0, len = nodes.length; i < len; i++) {
        var liEle = this.getElement(nodes[parseInt(i.toString(), 10)]);
        nodeData.push(this.getNode(liEle));
        if (isNullOrUndefined(liEle)) {
          continue;
        }
        this.removeNode(liEle);
      }
      this.updateInstance();
      if (this.dataType === 1) {
        this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
      }
      this.triggerEvent("removeNode", nodeData);
    };
    TreeView2.prototype.editSucess = function(target, newText, prevent) {
      var liEle = this.getElement(target);
      var txtEle = select("." + LISTTEXT, liEle);
      this.appendNewText(liEle, txtEle, newText, prevent);
    };
    TreeView2.prototype.addSuccess = function(nodes, dropLi, index) {
      var _this = this;
      var dropUl;
      var icon = dropLi ? dropLi.querySelector("." + ICON3) : null;
      if (dropLi && icon && icon.classList.contains(EXPANDABLE) && dropLi.querySelector("." + PARENTITEM) === null) {
        this.renderChildNodes(dropLi, null, function() {
          dropUl = dropLi.querySelector("." + PARENTITEM);
          _this.addGivenNodes(nodes, dropLi, index, true, dropUl);
          _this.triggerEvent("addNodes", nodes);
        });
      } else {
        this.addGivenNodes(nodes, dropLi, index, true);
        this.triggerEvent("addNodes", nodes);
      }
    };
    TreeView2.prototype.dmFailure = function(e, target, prevent) {
      if (target) {
        this.updatePreviousText(target, prevent);
      }
      this.trigger("actionFailure", {
        error: e
      });
    };
    TreeView2.prototype.updatePreviousText = function(target, prevent) {
      var liEle = this.getElement(target);
      var txtEle = select("." + LISTTEXT, liEle);
      this.updateText(liEle, txtEle, this.oldText, prevent);
    };
    TreeView2.prototype.getHierarchicalParentId = function(node, data, parentsID) {
      var _this = this;
      var index = data.findIndex(function(data2) {
        return data2[_this.fields.id] && data2[_this.fields.id].toString() === node;
      });
      if (index === -1) {
        for (var i = 0; i < data.length; i++) {
          var childItems = getValue(this.fields.child.toString(), data[parseInt(i.toString(), 10)]);
          if (!isNullOrUndefined(childItems)) {
            index = childItems.findIndex(function(data2) {
              return data2[_this.fields.id] && data2[_this.fields.id].toString() === node;
            });
            if (index === -1) {
              this.getHierarchicalParentId(node, childItems, parentsID);
            } else {
              parentsID.push(data[parseInt(i.toString(), 10)][this.fields.id].toString());
              this.getHierarchicalParentId(data[parseInt(i.toString(), 10)][this.fields.id].toString(), this.treeData, parentsID);
              break;
            }
          }
        }
      }
      return parentsID;
    };
    TreeView2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "allowDragAndDrop":
            this.setDragAndDrop(this.allowDragAndDrop);
            break;
          case "dragArea":
            if (this.allowDragAndDrop) {
              this.dragObj.dragArea = this.dragArea;
            }
            break;
          case "allowEditing":
            this.wireEditingEvents(this.allowEditing);
            break;
          case "allowMultiSelection":
            if (this.selectedNodes.length > 1) {
              var sNode = this.getElement(this.selectedNodes[0]);
              this.isLoaded = false;
              this.removeSelectAll();
              this.selectNode(sNode, null);
              this.isLoaded = true;
            }
            this.setMultiSelect(this.allowMultiSelection);
            this.addMultiSelect(this.allowMultiSelection);
            break;
          case "allowTextWrap":
            this.setTextWrap();
            this.updateWrap();
            break;
          case "checkedNodes":
            if (JSON.stringify(oldProp.checkedNodes) !== JSON.stringify(newProp.checkedNodes)) {
              if (this.showCheckBox) {
                this.checkedNodes = oldProp.checkedNodes;
                this.setCheckedNodes(newProp.checkedNodes);
              }
            }
            break;
          case "autoCheck":
            if (this.showCheckBox) {
              this.autoCheck = newProp.autoCheck;
              this.ensureIndeterminate();
            }
            break;
          case "cssClass":
            this.setCssClass(oldProp.cssClass, newProp.cssClass);
            break;
          case "enableRtl":
            this.setEnableRtl();
            break;
          case "expandedNodes":
            this.isAnimate = false;
            this.setProperties({
              expandedNodes: []
            }, true);
            this.collapseAll();
            this.isInitalExpand = true;
            this.setProperties({
              expandedNodes: isNullOrUndefined(newProp.expandedNodes) ? [] : newProp.expandedNodes
            }, true);
            this.doExpandAction();
            this.isInitalExpand = false;
            this.isAnimate = true;
            break;
          case "expandOn":
            this.wireExpandOnEvent(false);
            this.setExpandOnType();
            if (this.expandOnType !== "None" && !this.disabled) {
              this.wireExpandOnEvent(true);
            }
            break;
          case "disabled":
            this.setDisabledMode();
            this.dynamicState();
            break;
          case "fields":
            this.isAnimate = false;
            this.isFieldChange = true;
            this.initialRender = true;
            if (!this.isReact || this.isReact && !(this.fields.dataSource instanceof DataManager)) {
              if (!this.element.classList.contains("e-filtering")) {
                this.DDTTreeData = JSON.parse(JSON.stringify(this.fields.dataSource));
              }
              this.reRenderNodes();
            }
            this.initialRender = false;
            this.isAnimate = true;
            this.isFieldChange = false;
            break;
          case "fullRowSelect":
            this.setFullRow(this.fullRowSelect);
            this.addFullRow(this.fullRowSelect);
            if (this.allowTextWrap) {
              this.setTextWrap();
              this.updateWrap();
            }
            break;
          case "loadOnDemand":
            if (this.loadOnDemand === false && !this.onLoaded) {
              var nodes = this.element.querySelectorAll("li");
              var i = 0;
              while (i < nodes.length) {
                if (nodes[parseInt(i.toString(), 10)].getAttribute("aria-expanded") !== "true") {
                  this.renderChildNodes(nodes[parseInt(i.toString(), 10)], true, null, true);
                }
                i++;
              }
              this.onLoaded = true;
            }
            break;
          case "nodeTemplate":
            this.hasTemplate = false;
            this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);
            this.reRenderNodes();
            break;
          case "selectedNodes":
            this.removeSelectAll();
            this.setProperties({
              selectedNodes: newProp.selectedNodes
            }, true);
            this.doSelectionAction();
            break;
          case "showCheckBox":
          case "checkDisabledChildren":
            this.reRenderNodes();
            break;
          case "sortOrder":
            this.reRenderNodes();
            break;
          case "fullRowNavigable":
            this.setProperties({
              fullRowNavigable: newProp.fullRowNavigable
            }, true);
            this.listBaseOption.itemNavigable = newProp.fullRowNavigable;
            this.reRenderNodes();
            break;
        }
      }
    };
    TreeView2.prototype.destroy = function() {
      this.clearTemplate();
      this.element.removeAttribute("aria-activedescendant");
      this.unWireEvents();
      this.wireEditingEvents(false);
      if (!this.disabled) {
        this.rippleFn();
        this.rippleIconFn();
      }
      this.setCssClass(this.cssClass, null);
      this.setDragAndDrop(false);
      this.setFullRow(false);
      if (this.ulElement && this.ulElement.parentElement) {
        this.ulElement.parentElement.removeChild(this.ulElement);
      }
      this.ulElement = null;
      this.liList = null;
      this.startNode = null;
      this.firstTap = null;
      this.expandArgs = null;
      this.dragLi = null;
      this.dragTarget = null;
      this.dragParent = null;
      this.dragObj = null;
      this.dropObj = null;
      this.inputObj = null;
      this.touchEditObj = null;
      this.touchExpandObj = null;
      this.touchClickObj = null;
      _super.prototype.destroy.call(this);
    };
    TreeView2.prototype.addNodes = function(nodes, target, index, preventTargetExpand) {
      if (isNullOrUndefined(nodes)) {
        return;
      }
      nodes = JSON.parse(JSON.stringify(nodes));
      var dropLi = this.getElement(target);
      this.preventExpand = preventTargetExpand;
      if (this.fields.dataSource instanceof DataManager) {
        if (!this.isOffline) {
          this.crudOperation("insert", null, target, null, nodes, index, this.preventExpand);
        } else {
          this.addSuccess(nodes, dropLi, index);
        }
      } else if (this.dataType === 2) {
        this.addGivenNodes(nodes, dropLi, index);
      } else {
        if (dropLi) {
          this.addGivenNodes(nodes, dropLi, index);
        } else {
          nodes = this.getSortedData(nodes);
          for (var i = 0; i < nodes.length; i++) {
            var pid = getValue(this.fields.parentID, nodes[parseInt(i.toString(), 10)]);
            dropLi = pid ? this.getElement(pid.toString()) : pid;
            if (!isNullOrUndefined(pid) && isNullOrUndefined(dropLi)) {
              this.isHiddenItem = true;
              this.preventExpand = false;
              this.ensureVisible(pid);
              this.preventExpand = preventTargetExpand;
              this.isHiddenItem = false;
              dropLi = this.getElement(pid.toString());
            }
            this.addGivenNodes([nodes[parseInt(i.toString(), 10)]], dropLi, index);
          }
        }
        this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
      }
      this.setNodeFocusable();
      this.updateCheckedStateFromDS();
      if (this.showCheckBox && dropLi) {
        this.ensureParentCheckState(dropLi);
      }
      if (this.fields.dataSource instanceof DataManager === false) {
        this.preventExpand = false;
        this.triggerEvent("addNodes", nodes);
      }
    };
    TreeView2.prototype.beginEdit = function(node) {
      var ele = this.getElement(node);
      if (isNullOrUndefined(ele) || this.disabled) {
        return;
      }
      this.createTextbox(ele);
    };
    TreeView2.prototype.checkAll = function(nodes) {
      if (this.showCheckBox) {
        this.doCheckBoxAction(nodes, true);
      }
    };
    TreeView2.prototype.collapseAll = function(nodes, level, excludeHiddenNodes) {
      if (!isNullOrUndefined(nodes)) {
        this.doGivenAction(nodes, COLLAPSIBLE, false);
      } else {
        if (level > 0) {
          this.collapseByLevel(select("." + PARENTITEM, this.element), level, excludeHiddenNodes);
        } else {
          this.collapseAllNodes(excludeHiddenNodes);
        }
      }
    };
    TreeView2.prototype.disableNodes = function(nodes) {
      if (!isNullOrUndefined(nodes)) {
        this.doDisableAction(nodes);
      }
    };
    TreeView2.prototype.enableNodes = function(nodes) {
      if (!isNullOrUndefined(nodes)) {
        this.doEnableAction(nodes);
      }
    };
    TreeView2.prototype.ensureVisible = function(node) {
      var parentsId = [];
      if (this.dataType === 1) {
        var nodeData = this.getTreeData(node);
        while (nodeData.length !== 0 && !isNullOrUndefined(nodeData[0][this.fields.parentID])) {
          parentsId.push(nodeData[0][this.fields.parentID].toString());
          nodeData = this.getTreeData(nodeData[0][this.fields.parentID].toString());
        }
      } else if (this.dataType === 2) {
        parentsId = this.getHierarchicalParentId(node, this.treeData, parentsId);
      }
      this.expandAll(parentsId.reverse(), null, null, this.isHiddenItem);
      var liEle = this.getElement(node);
      if (!isNullOrUndefined(liEle)) {
        if (typeof node == "object") {
          var parents = this.parents(liEle, "." + LISTITEM);
          this.expandAll(parents);
        }
        setTimeout(function() {
          liEle.scrollIntoView({
            behavior: "smooth"
          });
        }, 450);
      }
    };
    TreeView2.prototype.expandAll = function(nodes, level, excludeHiddenNodes, preventAnimation) {
      this.isAnimate = !preventAnimation;
      if (!isNullOrUndefined(nodes)) {
        this.doGivenAction(nodes, EXPANDABLE, true);
      } else {
        if (level > 0) {
          this.expandByLevel(select("." + PARENTITEM, this.element), level, excludeHiddenNodes);
        } else {
          this.expandAllNodes(excludeHiddenNodes);
          if (!this.loadOnDemand || this.element.classList.contains("e-filtering")) {
            this.updateAttributes(this.element);
            this.updateList();
          }
        }
      }
      this.isAnimate = true;
    };
    TreeView2.prototype.getAllCheckedNodes = function() {
      var checkNodes = this.checkedNodes;
      return checkNodes;
    };
    TreeView2.prototype.getDisabledNodes = function() {
      var disabledNodes = this.disableNode;
      return disabledNodes;
    };
    TreeView2.prototype.getNode = function(node) {
      var ele = this.getElement(node);
      return this.getNodeData(ele, true);
    };
    TreeView2.prototype.getTreeData = function(node) {
      var id = this.getId(node);
      this.updatePersistProp();
      if (isNullOrUndefined(id)) {
        return this.treeData;
      } else {
        var data = this.getNodeObject(id);
        return isNullOrUndefined(data) ? [] : [data];
      }
    };
    TreeView2.prototype.moveNodes = function(sourceNodes, target, index, preventTargetExpand) {
      if (isNullOrUndefined(sourceNodes) || sourceNodes.length === 0) {
        return;
      }
      var dropLi = this.getElement(target);
      var nodeData = [];
      if (isNullOrUndefined(dropLi)) {
        this.isHiddenItem = true;
        this.ensureVisible(target);
        this.isHiddenItem = false;
        dropLi = this.getElement(target);
      }
      for (var i = 0; i < sourceNodes.length; i++) {
        var dragLi = this.getElement(sourceNodes[parseInt(i.toString(), 10)]);
        nodeData.push(this.getNode(dragLi));
        if (isNullOrUndefined(dragLi) || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {
          continue;
        }
        this.preventExpand = preventTargetExpand;
        this.dropAsChildNode(dragLi, dropLi, this, index, null, null, null, dropLi);
      }
      if (this.fields.dataSource instanceof DataManager === false) {
        this.preventExpand = false;
      }
      this.triggerEvent("moveNodes", nodeData);
    };
    TreeView2.prototype.refreshNode = function(target, newData) {
      if (isNullOrUndefined(target) || isNullOrUndefined(newData)) {
        return;
      }
      var isRefreshChild = false;
      if (this.dataType === 1 && newData.length > 1) {
        isRefreshChild = true;
      } else if (this.dataType === 2 && newData.length === 1) {
        var updatedChildValue = getValue(this.fields.child.toString(), newData[0]);
        if (!isNullOrUndefined(updatedChildValue)) {
          isRefreshChild = true;
        }
      }
      var liEle = this.getElement(target);
      var id = liEle ? liEle.getAttribute("data-uid") : target ? target.toString() : null;
      this.refreshData = this.getNodeObject(id);
      newData = JSON.parse(JSON.stringify(newData));
      var newNodeData;
      var parentData;
      if (this.dataType === 1 && isRefreshChild) {
        for (var k = 0; k < newData.length; k++) {
          if (isNullOrUndefined(newData[parseInt(k.toString(), 10)][this.fields.parentID])) {
            parentData = newData[parseInt(k.toString(), 10)];
            newData.splice(k, 1);
            break;
          }
        }
        newNodeData = extend({}, this.refreshData, parentData);
      } else {
        newNodeData = extend({}, this.refreshData, newData[0]);
      }
      if (isNullOrUndefined(liEle)) {
        this.updatePosition(id, newNodeData, isRefreshChild, newData);
        return;
      }
      this.isRefreshed = true;
      var level = parseFloat(liEle.getAttribute("aria-level"));
      var newliEle = ListBase.createListItemFromJson(this.createElement, [newNodeData], this.listBaseOption, level);
      var ul = select("." + PARENTITEM, liEle);
      var childItems = getValue(this.fields.child.toString(), newNodeData);
      if (isRefreshChild && ul || isRefreshChild && !isNullOrUndefined(childItems)) {
        var parentEle = liEle.parentElement;
        var index = Array.prototype.indexOf.call(parentEle.childNodes, liEle);
        remove(liEle);
        parentEle.insertBefore(newliEle[0], parentEle.childNodes[parseInt(index.toString(), 10)]);
        this.updatePosition(id, newNodeData, isRefreshChild, newData);
        if (isRefreshChild && ul) {
          this.expandAll([id]);
        }
      } else {
        var txtEle = select("." + TEXTWRAP, liEle);
        var newTextEle = select("." + TEXTWRAP, newliEle[0]);
        var icon = select("div." + ICON3, txtEle);
        var newIcon = select("div." + ICON3, newTextEle);
        if (icon && newIcon) {
          if (newIcon.classList.contains(EXPANDABLE) && icon.classList.contains(COLLAPSIBLE)) {
            removeClass([newIcon], EXPANDABLE);
            addClass([newIcon], COLLAPSIBLE);
          } else if (newIcon.classList.contains(COLLAPSIBLE) && icon.classList.contains(EXPANDABLE)) {
            removeClass([newIcon], COLLAPSIBLE);
            addClass([newIcon], EXPANDABLE);
          } else if (icon.classList.contains("interaction")) {
            addClass([newIcon], "interaction");
          }
        }
        remove(txtEle);
        var fullEle = select("." + FULLROW, liEle);
        fullEle.parentNode.insertBefore(newTextEle, fullEle.nextSibling);
        this.updatePosition(id, newNodeData, isRefreshChild, newData);
      }
      liEle = this.getElement(target);
      if (newNodeData[this.fields.tooltip]) {
        liEle.setAttribute("title", newNodeData[this.fields.tooltip]);
      }
      if (Object.prototype.hasOwnProperty.call(newNodeData, this.fields.htmlAttributes) && newNodeData[this.fields.htmlAttributes]) {
        var attr = {};
        merge(attr, newNodeData[this.fields.htmlAttributes]);
        if (attr.class) {
          addClass([liEle], attr.class.split(" "));
          delete attr.class;
        } else {
          attributes(liEle, attr);
        }
      }
      if (this.selectedNodes.indexOf(id) !== -1) {
        liEle.setAttribute("aria-selected", "true");
        addClass([liEle], ACTIVE2);
      }
      this.isRefreshed = false;
      this.triggerEvent("refreshNode", [this.getNode(liEle)]);
    };
    TreeView2.prototype.removeNodes = function(nodes) {
      if (!isNullOrUndefined(nodes)) {
        if (this.fields.dataSource instanceof DataManager && !this.isOffline) {
          this.crudOperation("delete", nodes);
        } else {
          this.deleteSuccess(nodes);
        }
      }
    };
    TreeView2.prototype.updateNode = function(target, newText) {
      var _this = this;
      if (isNullOrUndefined(target) || isNullOrUndefined(newText) || !this.allowEditing) {
        return;
      }
      var liEle = this.getElement(target);
      if (isNullOrUndefined(liEle)) {
        return;
      }
      var txtEle = select("." + LISTTEXT, liEle);
      this.updateOldText(liEle);
      var eventArgs = this.getEditEvent(liEle, null, null);
      this.trigger("nodeEditing", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          if (_this.fields.dataSource instanceof DataManager && !_this.isOffline) {
            _this.crudOperation("update", null, target, newText, null, null, false);
          } else {
            _this.appendNewText(liEle, txtEle, newText, false);
          }
        }
      });
    };
    TreeView2.prototype.uncheckAll = function(nodes) {
      if (this.showCheckBox) {
        this.doCheckBoxAction(nodes, false);
      }
    };
    TreeView2.prototype.setNodeFocusable = function() {
      var firstNode = select("." + LISTITEM, this.element);
      if (firstNode) {
        firstNode.setAttribute("tabindex", "0");
        this.updateIdAttr(null, firstNode);
      }
    };
    var TreeView_1;
    __decorate39([Property(false)], TreeView2.prototype, "allowDragAndDrop", void 0);
    __decorate39([Property(false)], TreeView2.prototype, "allowEditing", void 0);
    __decorate39([Property(false)], TreeView2.prototype, "allowMultiSelection", void 0);
    __decorate39([Property(false)], TreeView2.prototype, "allowTextWrap", void 0);
    __decorate39([Complex({}, NodeAnimationSettings)], TreeView2.prototype, "animation", void 0);
    __decorate39([Property()], TreeView2.prototype, "checkedNodes", void 0);
    __decorate39([Property(true)], TreeView2.prototype, "checkDisabledChildren", void 0);
    __decorate39([Property("")], TreeView2.prototype, "cssClass", void 0);
    __decorate39([Property(false)], TreeView2.prototype, "disabled", void 0);
    __decorate39([Property(null)], TreeView2.prototype, "dragArea", void 0);
    __decorate39([Property(true)], TreeView2.prototype, "enableHtmlSanitizer", void 0);
    __decorate39([Property(false)], TreeView2.prototype, "enablePersistence", void 0);
    __decorate39([Property()], TreeView2.prototype, "expandedNodes", void 0);
    __decorate39([Property("Auto")], TreeView2.prototype, "expandOn", void 0);
    __decorate39([Complex({}, FieldsSettings)], TreeView2.prototype, "fields", void 0);
    __decorate39([Property(true)], TreeView2.prototype, "fullRowSelect", void 0);
    __decorate39([Property(true)], TreeView2.prototype, "loadOnDemand", void 0);
    __decorate39([Property()], TreeView2.prototype, "locale", void 0);
    __decorate39([Property()], TreeView2.prototype, "nodeTemplate", void 0);
    __decorate39([Property()], TreeView2.prototype, "selectedNodes", void 0);
    __decorate39([Property("None")], TreeView2.prototype, "sortOrder", void 0);
    __decorate39([Property(false)], TreeView2.prototype, "showCheckBox", void 0);
    __decorate39([Property(false)], TreeView2.prototype, "checkOnClick", void 0);
    __decorate39([Property(true)], TreeView2.prototype, "autoCheck", void 0);
    __decorate39([Property(false)], TreeView2.prototype, "fullRowNavigable", void 0);
    __decorate39([Event()], TreeView2.prototype, "actionFailure", void 0);
    __decorate39([Event()], TreeView2.prototype, "created", void 0);
    __decorate39([Event()], TreeView2.prototype, "dataBound", void 0);
    __decorate39([Event()], TreeView2.prototype, "dataSourceChanged", void 0);
    __decorate39([Event()], TreeView2.prototype, "drawNode", void 0);
    __decorate39([Event()], TreeView2.prototype, "destroyed", void 0);
    __decorate39([Event()], TreeView2.prototype, "keyPress", void 0);
    __decorate39([Event()], TreeView2.prototype, "nodeChecked", void 0);
    __decorate39([Event()], TreeView2.prototype, "nodeChecking", void 0);
    __decorate39([Event()], TreeView2.prototype, "nodeClicked", void 0);
    __decorate39([Event()], TreeView2.prototype, "nodeCollapsed", void 0);
    __decorate39([Event()], TreeView2.prototype, "nodeCollapsing", void 0);
    __decorate39([Event()], TreeView2.prototype, "nodeDragging", void 0);
    __decorate39([Event()], TreeView2.prototype, "nodeDragStart", void 0);
    __decorate39([Event()], TreeView2.prototype, "nodeDragStop", void 0);
    __decorate39([Event()], TreeView2.prototype, "nodeDropped", void 0);
    __decorate39([Event()], TreeView2.prototype, "nodeEdited", void 0);
    __decorate39([Event()], TreeView2.prototype, "nodeEditing", void 0);
    __decorate39([Event()], TreeView2.prototype, "nodeExpanded", void 0);
    __decorate39([Event()], TreeView2.prototype, "nodeExpanding", void 0);
    __decorate39([Event()], TreeView2.prototype, "nodeSelected", void 0);
    __decorate39([Event()], TreeView2.prototype, "nodeSelecting", void 0);
    TreeView2 = TreeView_1 = __decorate39([NotifyPropertyChanges], TreeView2);
    return TreeView2;
  }(Component)
);

// node_modules/@syncfusion/ej2-navigations/src/sidebar/sidebar.js
var __extends42 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate40 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CONTROL4 = "e-control";
var ROOT6 = "e-sidebar";
var DOCKER = "e-dock";
var CLOSE2 = "e-close";
var OPEN = "e-open";
var TRASITION = "e-transition";
var DEFAULTBACKDROP = "e-sidebar-overlay";
var RTL13 = "e-rtl";
var RIGHT = "e-right";
var LEFT = "e-left";
var OVER = "e-over";
var PUSH = "e-push";
var SLIDE = "e-slide";
var VISIBILITY = "e-visibility";
var DISPLAY = "e-sidebar-display";
var MAINCONTENTANIMATION = "e-content-animation";
var DISABLEANIMATION = "e-disable-animation";
var CONTEXT = "e-sidebar-context";
var SIDEBARABSOLUTE = "e-sidebar-absolute";
var Sidebar = (
  /** @class */
  function(_super) {
    __extends42(Sidebar2, _super);
    function Sidebar2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.documentClickContext = _this.documentclickHandler.bind(_this);
      return _this;
    }
    Sidebar2.prototype.preRender = function() {
      this.setWidth();
    };
    Sidebar2.prototype.render = function() {
      this.initialize();
      this.wireEvents();
      this.renderComplete();
    };
    Sidebar2.prototype.initialize = function() {
      this.setTarget();
      this.addClass();
      this.setZindex();
      if (this.enableDock) {
        this.setDock();
      }
      if (this.isOpen) {
        this.show();
        this.firstRender = true;
      } else {
        this.setMediaQuery();
      }
      this.checkType(true);
      this.setType(this.type);
      this.setCloseOnDocumentClick();
      this.setEnableRTL();
      if (Browser.isDevice) {
        this.windowWidth = window.innerWidth;
      }
    };
    Sidebar2.prototype.setEnableRTL = function() {
      (this.enableRtl ? addClass : removeClass)([this.element], RTL13);
    };
    Sidebar2.prototype.setTarget = function() {
      this.targetEle = this.element.nextElementSibling;
      this.sidebarEleCopy = this.element.cloneNode(true);
      if (typeof this.target === "string") {
        this.setProperties({
          target: document.querySelector(this.target)
        }, true);
      }
      if (this.target) {
        this.target.insertBefore(this.element, this.target.children[0]);
        addClass([this.element], SIDEBARABSOLUTE);
        addClass([this.target], CONTEXT);
        this.targetEle = this.getTargetElement();
      }
    };
    Sidebar2.prototype.getTargetElement = function() {
      var siblingElement = this.element.nextElementSibling;
      while (!isNullOrUndefined(siblingElement)) {
        if (!siblingElement.classList.contains(ROOT6)) {
          break;
        }
        siblingElement = siblingElement.nextElementSibling;
      }
      return siblingElement;
    };
    Sidebar2.prototype.setCloseOnDocumentClick = function() {
      if (this.closeOnDocumentClick) {
        document.addEventListener("mousedown", this.documentClickContext);
        document.addEventListener("touchstart", this.documentClickContext);
      } else {
        document.removeEventListener("mousedown", this.documentClickContext);
        document.removeEventListener("touchstart", this.documentClickContext);
      }
    };
    Sidebar2.prototype.setWidth = function() {
      if (this.enableDock && this.position === "Left") {
        setStyleAttribute(this.element, {
          "width": this.setDimension(this.dockSize)
        });
      } else if (this.enableDock && this.position === "Right") {
        setStyleAttribute(this.element, {
          "width": this.setDimension(this.dockSize)
        });
      } else if (!this.enableDock) {
        setStyleAttribute(this.element, {
          "width": this.setDimension(this.width)
        });
      }
    };
    Sidebar2.prototype.setDimension = function(width) {
      if (typeof width === "number") {
        width = formatUnit(width);
      } else if (typeof width === "string") {
        width = width.match(/px|%|em/) ? width : formatUnit(width);
      } else {
        width = "100%";
      }
      return width;
    };
    Sidebar2.prototype.setZindex = function() {
      setStyleAttribute(this.element, {
        "z-index": "" + this.zIndex
      });
    };
    Sidebar2.prototype.addClass = function() {
      if (this.element.tagName === "EJS-SIDEBAR") {
        addClass([this.element], DISPLAY);
      }
      var classELement = document.querySelector(".e-main-content");
      if (!isNullOrUndefined(classELement || this.targetEle)) {
        addClass([classELement || this.targetEle], [MAINCONTENTANIMATION]);
      }
      this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : null;
      if (!this.enableDock && this.type !== "Auto") {
        addClass([this.element], [VISIBILITY]);
      }
      removeClass([this.element], [OPEN, CLOSE2, RIGHT, LEFT, SLIDE, PUSH, OVER]);
      this.element.classList.add(ROOT6);
      addClass([this.element], this.position === "Right" ? RIGHT : LEFT);
      if (this.enableDock) {
        addClass([this.element], DOCKER);
      }
      if (!isNullOrUndefined(this.tabIndex)) {
        this.element.setAttribute("tabindex", this.tabIndex);
      }
      if (this.type === "Auto" && !Browser.isDevice && this.checkMediaQuery()) {
        this.show();
      } else if (!this.isOpen) {
        addClass([this.element], [CLOSE2, DISABLEANIMATION]);
      }
    };
    Sidebar2.prototype.checkType = function(val) {
      if (!(this.type === "Push" || this.type === "Over" || this.type === "Slide")) {
        this.type = "Auto";
      } else {
        if (!this.element.classList.contains(CLOSE2) && !val) {
          this.hide();
        }
      }
    };
    Sidebar2.prototype.transitionEnd = function(e) {
      this.setDock();
      if (!isNullOrUndefined(e) && !this.firstRender) {
        this.triggerChange();
      }
      this.firstRender = false;
      EventHandler.remove(this.element, "transitionend", this.transitionEnd);
    };
    Sidebar2.prototype.destroyBackDrop = function() {
      var sibling = document.querySelector(".e-main-content") || this.targetEle;
      if (this.target && this.showBackdrop && sibling && !isNullOrUndefined(this.defaultBackdropDiv)) {
        removeClass([this.defaultBackdropDiv], DEFAULTBACKDROP);
      } else if (this.showBackdrop && this.modal) {
        this.modal.style.display = "none";
        this.modal.outerHTML = "";
        this.modal = null;
      }
    };
    Sidebar2.prototype.hide = function(e) {
      var _this = this;
      var closeArguments = {
        model: this,
        element: this.element,
        cancel: false,
        isInteracted: !isNullOrUndefined(e),
        event: e || null
      };
      this.trigger("close", closeArguments, function(observedcloseArgs) {
        if (!observedcloseArgs.cancel) {
          if (_this.element.classList.contains(CLOSE2)) {
            return;
          }
          if (_this.element.classList.contains(OPEN) && !_this.animate) {
            _this.triggerChange();
          }
          addClass([_this.element], CLOSE2);
          removeClass([_this.element], OPEN);
          setStyleAttribute(_this.element, {
            "width": formatUnit(_this.enableDock ? _this.dockSize : _this.width)
          });
          _this.setType(_this.type);
          var sibling = document.querySelector(".e-main-content") || _this.targetEle;
          if (!_this.enableDock && sibling) {
            sibling.style.transform = "translateX(0px)";
            sibling.style[_this.position === "Left" ? "marginLeft" : "marginRight"] = "0px";
          }
          _this.destroyBackDrop();
          _this.setAnimation();
          if (_this.type === "Slide") {
            document.body.classList.remove("e-sidebar-overflow");
          }
          _this.setProperties({
            isOpen: false
          }, true);
          if (_this.enableDock) {
            setTimeout(function() {
              return _this.setTimeOut();
            }, 50);
          }
          EventHandler.add(_this.element, "transitionend", _this.transitionEnd, _this);
        }
      });
    };
    Sidebar2.prototype.setTimeOut = function() {
      var sibling = document.querySelector(".e-main-content") || this.targetEle;
      var elementWidth = this.element.getBoundingClientRect().width;
      if (this.element.classList.contains(OPEN) && sibling && !(this.type === "Over" && this.enableDock)) {
        if (this.position === "Left") {
          sibling.style.marginLeft = this.setDimension(this.width === "auto" ? elementWidth : this.width);
        } else {
          sibling.style.marginRight = this.setDimension(this.width === "auto" ? elementWidth : this.width);
        }
      } else if (this.element.classList.contains(CLOSE2) && sibling) {
        if (this.position === "Left") {
          sibling.style.marginLeft = this.setDimension(this.dockSize === "auto" ? elementWidth : this.dockSize);
        } else {
          sibling.style.marginRight = this.setDimension(this.dockSize === "auto" ? elementWidth : this.dockSize);
        }
      }
    };
    Sidebar2.prototype.show = function(e) {
      var _this = this;
      var openArguments = {
        model: this,
        element: this.element,
        cancel: false,
        isInteracted: !isNullOrUndefined(e),
        event: e || null
      };
      this.trigger("open", openArguments, function(observedopenArgs) {
        if (!observedopenArgs.cancel) {
          removeClass([_this.element], [VISIBILITY, DISABLEANIMATION]);
          if (_this.element.classList.contains(OPEN)) {
            return;
          }
          if (_this.element.classList.contains(CLOSE2) && !_this.animate) {
            _this.triggerChange();
          }
          addClass([_this.element], [OPEN, TRASITION]);
          setStyleAttribute(_this.element, {
            "transform": ""
          });
          removeClass([_this.element], CLOSE2);
          setStyleAttribute(_this.element, {
            "width": formatUnit(_this.width)
          });
          _this.setType(_this.type);
          _this.createBackDrop();
          _this.setAnimation();
          if (_this.type === "Slide") {
            document.body.classList.add("e-sidebar-overflow");
          }
          _this.setProperties({
            isOpen: true
          }, true);
          EventHandler.add(_this.element, "transitionend", _this.transitionEnd, _this);
        }
      });
    };
    Sidebar2.prototype.setAnimation = function() {
      if (this.animate) {
        removeClass([this.element], DISABLEANIMATION);
      } else {
        addClass([this.element], DISABLEANIMATION);
      }
    };
    Sidebar2.prototype.triggerChange = function() {
      var changeArguments = {
        name: "change",
        element: this.element
      };
      this.trigger("change", changeArguments);
    };
    Sidebar2.prototype.setDock = function() {
      if (this.enableDock && this.position === "Left" && !this.getState()) {
        setStyleAttribute(this.element, {
          "transform": "translateX(-100%) translateX(" + this.setDimension(this.dockSize) + ")"
        });
      } else if (this.enableDock && this.position === "Right" && !this.getState()) {
        setStyleAttribute(this.element, {
          "transform": "translateX(100%) translateX(-" + this.setDimension(this.dockSize) + ")"
        });
      }
      if (this.element.classList.contains(CLOSE2) && this.enableDock) {
        setStyleAttribute(this.element, {
          "width": this.setDimension(this.dockSize)
        });
      }
    };
    Sidebar2.prototype.createBackDrop = function() {
      if (this.target && this.showBackdrop && this.getState()) {
        var targetString = this.target;
        var sibling = document.querySelector(".e-main-content") || this.targetEle;
        this.defaultBackdropDiv = this.createElement("div");
        addClass([this.defaultBackdropDiv], DEFAULTBACKDROP);
        setStyleAttribute(this.defaultBackdropDiv, {
          height: targetString.style.height
        });
        sibling.appendChild(this.defaultBackdropDiv);
      } else if (this.showBackdrop && !this.modal && this.getState()) {
        this.modal = this.createElement("div");
        this.modal.className = DEFAULTBACKDROP;
        this.modal.style.display = "block";
        document.body.appendChild(this.modal);
      }
    };
    Sidebar2.prototype.getPersistData = function() {
      return this.addOnPersist(["type", "position", "isOpen"]);
    };
    Sidebar2.prototype.getModuleName = function() {
      return "sidebar";
    };
    Sidebar2.prototype.toggle = function() {
      if (this.element.classList.contains(OPEN)) {
        this.hide();
      } else {
        this.show();
      }
    };
    Sidebar2.prototype.getState = function() {
      return this.element.classList.contains(OPEN) ? true : false;
    };
    Sidebar2.prototype.setMediaQuery = function() {
      if (this.mediaQuery) {
        var media = false;
        if (typeof this.mediaQuery === "string") {
          media = window.matchMedia(this.mediaQuery).matches;
        } else {
          media = this.mediaQuery.matches;
        }
        if (media && this.windowWidth !== window.innerWidth) {
          this.show();
        } else if (this.getState() && this.windowWidth !== window.innerWidth) {
          this.hide();
        }
      }
    };
    Sidebar2.prototype.checkMediaQuery = function() {
      if (isNullOrUndefined(this.mediaQuery)) {
        return true;
      }
      return typeof this.mediaQuery === "string" ? window.matchMedia(this.mediaQuery).matches : this.mediaQuery.matches;
    };
    Sidebar2.prototype.resize = function() {
      if (!isNullOrUndefined(this.width) && this.width !== "auto" && typeof this.width === "string" && !this.width.includes("px")) {
        this.setType(this.type);
      }
      if (this.type === "Auto") {
        if (Browser.isDevice) {
          addClass([this.element], OVER);
        } else {
          addClass([this.element], PUSH);
        }
      }
      this.setMediaQuery();
      if (Browser.isDevice) {
        this.windowWidth = window.innerWidth;
      }
    };
    Sidebar2.prototype.documentclickHandler = function(e) {
      if (closest(e.target, "." + CONTROL4 + "." + ROOT6)) {
        return;
      }
      this.hide(e);
    };
    Sidebar2.prototype.enableGestureHandler = function(args) {
      if (!this.isOpen && this.position === "Left" && args.swipeDirection === "Right" && args.startX <= 20 && args.distanceX >= 50 && args.velocity >= 0.5) {
        this.show();
      } else if (this.isOpen && this.position === "Left" && args.swipeDirection === "Left") {
        this.hide(args.originalEvent);
      } else if (this.isOpen && this.position === "Right" && args.swipeDirection === "Right") {
        this.hide(args.originalEvent);
      } else if (!this.isOpen && this.position === "Right" && args.swipeDirection === "Left" && window.innerWidth - args.startX <= 20 && args.distanceX >= 50 && args.velocity >= 0.5) {
        this.show();
      }
    };
    Sidebar2.prototype.setEnableGestures = function() {
      if (this.enableGestures) {
        this.mainContentEle = new Touch(document.body, {
          swipe: this.enableGestureHandler.bind(this)
        });
        this.sidebarEle = new Touch(this.element, {
          swipe: this.enableGestureHandler.bind(this)
        });
      } else {
        if (this.mainContentEle && this.sidebarEle) {
          this.mainContentEle.destroy();
          this.sidebarEle.destroy();
        }
      }
    };
    Sidebar2.prototype.wireEvents = function() {
      this.setEnableGestures();
      EventHandler.add(window, "resize", this.resize, this);
    };
    Sidebar2.prototype.unWireEvents = function() {
      EventHandler.remove(window, "resize", this.resize);
      EventHandler.remove(document, "mousedown touchstart", this.documentclickHandler);
      if (this.mainContentEle) {
        this.mainContentEle.destroy();
      }
      if (this.sidebarEle) {
        this.sidebarEle.destroy();
      }
    };
    Sidebar2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var sibling = document.querySelector(".e-main-content") || this.targetEle;
      var isRendered = this.isServerRendered;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "isOpen":
            if (this.isOpen) {
              this.show();
            } else {
              this.hide();
            }
            break;
          case "width":
            this.setWidth();
            if (!this.getState()) {
              this.setDock();
            }
            break;
          case "animate":
            this.setAnimation();
            break;
          case "type":
            this.checkType(false);
            removeClass([this.element], [VISIBILITY]);
            this.addClass();
            addClass([this.element], this.type === "Auto" ? Browser.isDevice ? ["e-over"] : ["e-push"] : ["e-" + this.type.toLowerCase()]);
            break;
          case "position":
            this.element.style.transform = "";
            this.setDock();
            if (sibling) {
              sibling.style[this.position === "Left" ? "marginRight" : "marginLeft"] = "0px";
            }
            if (this.position === "Right") {
              removeClass([this.element], LEFT);
              addClass([this.element], RIGHT);
            } else {
              removeClass([this.element], RIGHT);
              addClass([this.element], LEFT);
            }
            this.setType(this.type);
            break;
          case "showBackdrop":
            if (this.showBackdrop) {
              this.createBackDrop();
            } else {
              if (this.modal) {
                this.modal.style.display = "none";
                this.modal.outerHTML = "";
                this.modal = null;
              }
            }
            break;
          case "target":
            if (typeof this.target === "string") {
              this.setProperties({
                target: document.querySelector(this.target)
              }, true);
            }
            if (isNullOrUndefined(this.target)) {
              removeClass([this.element], SIDEBARABSOLUTE);
              removeClass([oldProp.target], CONTEXT);
              setStyleAttribute(sibling, {
                "margin-left": 0,
                "margin-right": 0
              });
              document.body.insertAdjacentElement("afterbegin", this.element);
            }
            this.isServerRendered = false;
            _super.prototype.refresh.call(this);
            this.isServerRendered = isRendered;
            break;
          case "closeOnDocumentClick":
            this.setCloseOnDocumentClick();
            break;
          case "enableDock":
            if (!this.getState()) {
              this.setDock();
            }
            break;
          case "zIndex":
            this.setZindex();
            break;
          case "mediaQuery":
            this.setMediaQuery();
            break;
          case "enableGestures":
            this.setEnableGestures();
            break;
          case "enableRtl":
            this.setEnableRTL();
            break;
        }
      }
    };
    Sidebar2.prototype.setType = function(type) {
      var elementWidth = this.element.getBoundingClientRect().width;
      this.setZindex();
      var sibling = document.querySelector(".e-main-content") || this.targetEle;
      if (sibling) {
        sibling.style.transform = "translateX(0px)";
        if (!Browser.isDevice && this.type !== "Auto" && !(this.type === "Over" && this.enableDock)) {
          sibling.style[this.position === "Left" ? "marginLeft" : "marginRight"] = "0px";
        }
      }
      var margin = this.position === "Left" ? elementWidth + "px" : elementWidth + "px";
      var eleWidth = this.position === "Left" ? elementWidth : -elementWidth;
      removeClass([this.element], [PUSH, OVER, SLIDE]);
      switch (type) {
        case "Push":
          addClass([this.element], [PUSH]);
          if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {
            sibling.style[this.position === "Left" ? "marginLeft" : "marginRight"] = margin;
          }
          break;
        case "Slide":
          addClass([this.element], [SLIDE]);
          if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {
            sibling.style.transform = "translateX(" + eleWidth + "px)";
          }
          break;
        case "Over":
          addClass([this.element], [OVER]);
          if (this.enableDock && (this.element.classList.contains(CLOSE2) || this.isOpen)) {
            if (sibling) {
              sibling.style[this.position === "Left" ? "marginLeft" : "marginRight"] = this.setDimension(this.dockSize);
            }
          }
          break;
        case "Auto":
          addClass([this.element], [TRASITION]);
          if (Browser.isDevice) {
            if (sibling && this.enableDock && !this.getState()) {
              sibling.style[this.position === "Left" ? "marginLeft" : "marginRight"] = margin;
              addClass([this.element], PUSH);
            } else {
              addClass([this.element], OVER);
            }
          } else {
            addClass([this.element], PUSH);
            if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {
              sibling.style[this.position === "Left" ? "marginLeft" : "marginRight"] = margin;
            }
          }
          this.createBackDrop();
      }
    };
    Sidebar2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      if (this.target) {
        removeClass([this.target], CONTEXT);
      }
      this.destroyBackDrop();
      if (this.element) {
        removeClass([this.element], [OPEN, CLOSE2, PUSH, SLIDE, OVER, LEFT, RIGHT, TRASITION, DISABLEANIMATION]);
        removeClass([this.element], SIDEBARABSOLUTE);
        this.element.style.width = "";
        this.element.style.zIndex = "";
        this.element.style.transform = "";
        if (!isNullOrUndefined(this.sidebarEleCopy.getAttribute("tabindex"))) {
          this.element.setAttribute("tabindex", this.tabIndex);
        } else {
          this.element.removeAttribute("tabindex");
        }
      }
      this.windowWidth = null;
      var sibling = document.querySelector(".e-main-content") || this.targetEle;
      if (!isNullOrUndefined(sibling)) {
        sibling.style.margin = "";
        sibling.style.transform = "";
      }
      this.unWireEvents();
    };
    __decorate40([Property("auto")], Sidebar2.prototype, "dockSize", void 0);
    __decorate40([Property(null)], Sidebar2.prototype, "mediaQuery", void 0);
    __decorate40([Property(false)], Sidebar2.prototype, "enableDock", void 0);
    __decorate40([Property("en-US")], Sidebar2.prototype, "locale", void 0);
    __decorate40([Property(false)], Sidebar2.prototype, "enablePersistence", void 0);
    __decorate40([Property(true)], Sidebar2.prototype, "enableGestures", void 0);
    __decorate40([Property(false)], Sidebar2.prototype, "isOpen", void 0);
    __decorate40([Property(false)], Sidebar2.prototype, "enableRtl", void 0);
    __decorate40([Property(true)], Sidebar2.prototype, "animate", void 0);
    __decorate40([Property("auto")], Sidebar2.prototype, "height", void 0);
    __decorate40([Property(false)], Sidebar2.prototype, "closeOnDocumentClick", void 0);
    __decorate40([Property("Left")], Sidebar2.prototype, "position", void 0);
    __decorate40([Property(null)], Sidebar2.prototype, "target", void 0);
    __decorate40([Property(false)], Sidebar2.prototype, "showBackdrop", void 0);
    __decorate40([Property("Auto")], Sidebar2.prototype, "type", void 0);
    __decorate40([Property("auto")], Sidebar2.prototype, "width", void 0);
    __decorate40([Property(1e3)], Sidebar2.prototype, "zIndex", void 0);
    __decorate40([Event()], Sidebar2.prototype, "created", void 0);
    __decorate40([Event()], Sidebar2.prototype, "close", void 0);
    __decorate40([Event()], Sidebar2.prototype, "open", void 0);
    __decorate40([Event()], Sidebar2.prototype, "change", void 0);
    __decorate40([Event()], Sidebar2.prototype, "destroyed", void 0);
    Sidebar2 = __decorate40([NotifyPropertyChanges], Sidebar2);
    return Sidebar2;
  }(Component)
);

// node_modules/@syncfusion/ej2-navigations/src/breadcrumb/breadcrumb.js
var __extends43 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate41 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ICONRIGHT = "e-icon-right";
var ITEMTEXTCLASS = "e-breadcrumb-text";
var ICONCLASS = "e-breadcrumb-icon";
var MENUCLASS = "e-breadcrumb-menu";
var ITEMCLASS = "e-breadcrumb-item";
var POPUPCLASS = "e-breadcrumb-popup";
var WRAPMODECLASS = "e-breadcrumb-wrap-mode";
var SCROLLMODECLASS = "e-breadcrumb-scroll-mode";
var TABINDEX = "tabindex";
var DISABLEDCLASS = "e-disabled";
var ARIADISABLED = "aria-disabled";
var DOT = ".";
var BreadcrumbOverflowMode;
(function(BreadcrumbOverflowMode2) {
  BreadcrumbOverflowMode2["Hidden"] = "Hidden";
  BreadcrumbOverflowMode2["Collapsed"] = "Collapsed";
  BreadcrumbOverflowMode2["Menu"] = "Menu";
  BreadcrumbOverflowMode2["Wrap"] = "Wrap";
  BreadcrumbOverflowMode2["Scroll"] = "Scroll";
  BreadcrumbOverflowMode2["None"] = "None";
})(BreadcrumbOverflowMode || (BreadcrumbOverflowMode = {}));
var BreadcrumbItem = (
  /** @class */
  function(_super) {
    __extends43(BreadcrumbItem2, _super);
    function BreadcrumbItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate41([Property("")], BreadcrumbItem2.prototype, "text", void 0);
    __decorate41([Property("")], BreadcrumbItem2.prototype, "id", void 0);
    __decorate41([Property("")], BreadcrumbItem2.prototype, "url", void 0);
    __decorate41([Property(null)], BreadcrumbItem2.prototype, "iconCss", void 0);
    __decorate41([Property(false)], BreadcrumbItem2.prototype, "disabled", void 0);
    return BreadcrumbItem2;
  }(ChildProperty)
);
var Breadcrumb = (
  /** @class */
  function(_super) {
    __extends43(Breadcrumb2, _super);
    function Breadcrumb2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.isPopupCreated = false;
      return _this;
    }
    Breadcrumb2.prototype.preRender = function() {
    };
    Breadcrumb2.prototype.render = function() {
      this.initialize();
      this.renderItems(this.items);
      this.wireEvents();
    };
    Breadcrumb2.prototype.initialize = function() {
      this._maxItems = this.maxItems;
      if (isNullOrUndefined(this.element.getAttribute("aria-label"))) {
        this.element.setAttribute("aria-label", "breadcrumb");
      }
      if (this.cssClass) {
        addClass([this.element], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
      }
      if (this.enableRtl) {
        this.element.classList.add("e-rtl");
      }
      if (this.disabled) {
        this.element.classList.add(DISABLEDCLASS);
        this.element.setAttribute(ARIADISABLED, "true");
      }
      if (this.overflowMode === "Wrap") {
        this.element.classList.add(WRAPMODECLASS);
      } else if (this.overflowMode === "Scroll") {
        this.element.classList.add(SCROLLMODECLASS);
      }
      this.initItems();
      this.initPvtProps();
    };
    Breadcrumb2.prototype.initPvtProps = function() {
      if (this.overflowMode === "Hidden" && this._maxItems > 0) {
        this.endIndex = this.getEndIndex();
        this.startIndex = this.endIndex + 1 - (this._maxItems - 1);
      }
      if (this.overflowMode === "Menu") {
        if (this._maxItems >= 0) {
          this.startIndex = this._maxItems > 1 ? 1 : 0;
          this.endIndex = this.getEndIndex();
          this.popupUl = this.createElement("ul", {
            attrs: {
              TABINDEX: "0",
              "role": "menu"
            }
          });
        } else {
          this.startIndex = this.endIndex = null;
        }
      }
    };
    Breadcrumb2.prototype.getEndIndex = function() {
      var _this = this;
      var endIndex;
      if (this.activeItem) {
        this.items.forEach(function(item, idx) {
          if (item.url === _this.activeItem || item.text === _this.activeItem) {
            endIndex = idx;
          }
        });
      } else {
        endIndex = this.items.length - 1;
      }
      return endIndex;
    };
    Breadcrumb2.prototype.initItems = function() {
      if (!this.items.length) {
        var baseUri = void 0;
        var uri = void 0;
        var items = [];
        if (this.url) {
          var url = new URL(this.url, window.location.origin);
          baseUri = url.origin + "/";
          uri = url.href.split(baseUri)[1].split("/");
        } else {
          baseUri = window.location.origin + "/";
          uri = window.location.href.split(baseUri)[1].split("/");
        }
        items.push({
          iconCss: "e-icons e-home",
          url: baseUri
        });
        for (var i = 0; i < uri.length; i++) {
          if (uri[i]) {
            items.push({
              text: uri[i],
              url: baseUri + uri[i]
            });
            baseUri += uri[i] + "/";
          }
        }
        this.setProperties({
          items
        }, true);
      }
    };
    Breadcrumb2.prototype.renderItems = function(items) {
      var _this = this;
      var item;
      var isSingleLevel;
      var isIconRight = this.element.classList.contains(ICONRIGHT);
      var itemsLength = items.length;
      if (itemsLength) {
        var isActiveItem = void 0;
        var isLastItem = void 0;
        var isLastItemInPopup_1;
        var j_1 = 0;
        var wrapDiv = void 0;
        var len = itemsLength * 2 - 1;
        var isItemCancelled_1 = false;
        var ol = this.createElement("ol", {
          className: this.overflowMode === "Wrap" ? "e-breadcrumb-wrapped-ol" : ""
        });
        var firstOl = this.createElement("ol", {
          className: this.overflowMode === "Wrap" ? "e-breadcrumb-first-ol" : ""
        });
        var showIcon = this.hasField(items, "iconCss");
        var isCollasped = this.overflowMode === "Collapsed" && this._maxItems > 0 && itemsLength > this._maxItems && !this.isExpanded;
        var isDefaultOverflowMode_1 = this.overflowMode === "Hidden" && this._maxItems > 0;
        if (this.overflowMode === "Menu" && this.popupUl) {
          this.popupUl.innerHTML = "";
        }
        var listBaseOptions = {
          moduleName: this.getModuleName(),
          showIcon,
          itemNavigable: true,
          itemCreated: function(args) {
            var isLastItem2 = args.curData.isLastItem;
            if (isLastItem2 && args.item.children.length && !_this.itemTemplate) {
              delete args.curData.isLastItem;
              if (!isLastItemInPopup_1 && !_this.enableActiveItemNavigation) {
                args.item.innerHTML = _this.createElement("span", {
                  className: ITEMTEXTCLASS,
                  innerHTML: args.item.children[0].innerHTML
                }).outerHTML;
              }
            }
            if (args.curData.iconCss && !args.curData.text && !_this.itemTemplate) {
              args.item.classList.add("e-icon-item");
            }
            if (isDefaultOverflowMode_1) {
              args.item.setAttribute("item-index", j_1.toString());
            }
            var eventArgs = {
              item: extend({}, args.curData.properties ? args.curData.properties : args.curData),
              element: args.item,
              cancel: false
            };
            _this.trigger("beforeItemRender", eventArgs);
            isItemCancelled_1 = eventArgs.cancel;
            var containsRightIcon = isIconRight || eventArgs.element.classList.contains(ICONRIGHT);
            if (containsRightIcon && args.curData.iconCss && !_this.itemTemplate) {
              args.item.querySelector(".e-anchor-wrap").appendChild(args.item.querySelector(DOT + ICONCLASS));
            }
            if (eventArgs.item.disabled) {
              args.item.setAttribute(ARIADISABLED, "true");
              args.item.classList.add(DISABLEDCLASS);
            }
            if (eventArgs.item.id) {
              args.item.setAttribute("id", eventArgs.item.id);
            }
            if ((eventArgs.item.disabled || _this.disabled) && args.item.children.length && !_this.itemTemplate) {
              args.item.children[0].setAttribute(TABINDEX, "-1");
            }
            if (args.curData.isEmptyUrl) {
              args.item.children[0].removeAttribute("href");
              if ((!isLastItem2 || isLastItem2 && _this.enableActiveItemNavigation) && !(eventArgs.item.disabled || _this.disabled)) {
                args.item.children[0].setAttribute(TABINDEX, "0");
                EventHandler.add(args.item.children[0], "keydown", _this.keyDownHandler, _this);
              }
            }
            args.item.removeAttribute("role");
            if (isLastItem2) {
              args.item.setAttribute("data-active-item", "");
            }
            if (!_this.itemTemplate) {
              _this.beforeItemRenderChanges(args.curData, eventArgs.item, args.item, containsRightIcon);
            }
          }
        };
        for (var i = 0; i < len; i % 2 && j_1++, i++) {
          isActiveItem = this.activeItem && (this.activeItem === items[j_1].url || this.activeItem === items[j_1].text);
          if (isCollasped && i > 1 && i < len - 2) {
            continue;
          } else if (isDefaultOverflowMode_1 && (j_1 < this.startIndex || j_1 > this.endIndex) && (i % 2 ? j_1 !== this.startIndex - 1 : true) && j_1 !== 0) {
            continue;
          }
          if (i % 2) {
            wrapDiv = this.createElement("div", {
              className: "e-breadcrumb-item-wrapper"
            });
            if (this.separatorTemplate && this.separatorTemplate === "/" || isNullOrUndefined(this.separatorTemplate)) {
              listBaseOptions.template = initializeCSPTemplate(function() {
                return "/";
              });
            } else {
              listBaseOptions.template = this.separatorTemplate;
            }
            listBaseOptions.itemClass = "e-breadcrumb-separator";
            isSingleLevel = false;
            item = [{
              previousItem: items[j_1],
              nextItem: items[j_1 + 1]
            }];
          } else {
            listBaseOptions.itemClass = "";
            if (this.itemTemplate) {
              listBaseOptions.template = this.itemTemplate;
              isSingleLevel = false;
            } else {
              isSingleLevel = true;
            }
            item = [extend({}, items[j_1].properties ? items[j_1].properties : items[j_1])];
            if (!item[0].url && !this.itemTemplate) {
              item = [extend({}, item[0], {
                isEmptyUrl: true,
                url: "#"
              })];
            }
            isLastItem = (isDefaultOverflowMode_1 || this.overflowMode === "Menu") && j_1 === this.endIndex;
            if ((i === len - 1 || isLastItem) && !this.itemTemplate || isActiveItem) {
              item[0].isLastItem = true;
            }
          }
          var parent_1 = ol;
          var lastPopupItemIdx = this.startIndex + this.endIndex - this._maxItems;
          if (this.overflowMode === "Menu" && (j_1 >= this.startIndex && j_1 <= lastPopupItemIdx && (i % 2 ? !(j_1 === lastPopupItemIdx) : true) && this.endIndex >= this._maxItems && this._maxItems > 0 || this._maxItems === 0)) {
            if (i % 2) {
              continue;
            } else {
              parent_1 = this.popupUl;
              if (isLastItem) {
                isLastItemInPopup_1 = true;
              }
            }
          } else if (this.overflowMode === "Wrap") {
            if (i === 0) {
              parent_1 = firstOl;
            } else {
              parent_1 = wrapDiv;
            }
          }
          var li = ListBase.createList(this.createElement, item, listBaseOptions, isSingleLevel, this).childNodes;
          if (!isItemCancelled_1) {
            append(li, parent_1);
          } else if (isDefaultOverflowMode_1 || isCollasped || this.overflowMode === "Menu" || this.overflowMode === "Wrap") {
            items.splice(j_1, 1);
            this.initPvtProps();
            return this.reRenderItems();
          } else if (i === len - 1 || isLastItem) {
            remove(parent_1.lastElementChild);
          }
          if (this.overflowMode === "Wrap" && i !== 0 && i % 2 === 0) {
            ol.appendChild(wrapDiv);
          }
          if (isCollasped && i === 1) {
            var li_1 = this.createElement("li", {
              className: "e-icons e-breadcrumb-collapsed",
              attrs: {
                TABINDEX: "0"
              }
            });
            EventHandler.add(li_1, "keyup", this.expandHandler, this);
            ol.appendChild(li_1);
          }
          if (this.overflowMode === "Menu" && this.startIndex === i && this.endIndex >= this._maxItems && this._maxItems >= 0) {
            var menu = this.getMenuElement();
            EventHandler.add(menu, "keyup", this.keyDownHandler, this);
            ol.appendChild(menu);
          }
          if (isActiveItem || isLastItem) {
            break;
          }
          if (isItemCancelled_1) {
            i++;
          }
        }
        if (this.isReact) {
          this.renderReactTemplates();
          setTimeout(function() {
            _this.calculateMaxItems();
          }, 5);
        }
        if (this.overflowMode === "Wrap") {
          this.element.appendChild(firstOl);
        }
        this.element.appendChild(ol);
        if (!this.isReact) {
          this.calculateMaxItems();
        }
      }
    };
    Breadcrumb2.prototype.calculateMaxItems = function() {
      if (this.overflowMode === "Hidden" || this.overflowMode === "Collapsed" || this.overflowMode === "Menu") {
        var maxItems = void 0;
        var width = this.element.offsetWidth;
        var liElems = [].slice.call(this.element.children[0].children).reverse();
        var liWidth = this.overflowMode === "Menu" ? 0 : liElems[liElems.length - 1].offsetWidth + (liElems[liElems.length - 2] ? liElems[liElems.length - 2].offsetWidth : 0);
        if (this.overflowMode === "Menu") {
          var menuEle = this.getMenuElement();
          this.element.appendChild(menuEle);
          liWidth += menuEle.offsetWidth;
          remove(menuEle);
        }
        for (var i = 0; i < liElems.length - 2; i++) {
          if (liWidth > width) {
            maxItems = Math.ceil((i - 1) / 2) + (this.overflowMode === "Menu" && i <= 2 ? 0 : 1);
            if ((this.maxItems > maxItems && !(this.maxItems > -1 && maxItems === -1) || this.maxItems === -1) && this._maxItems !== maxItems) {
              this._maxItems = maxItems;
              this.initPvtProps();
              return this.reRenderItems();
            } else {
              break;
            }
          } else {
            if (this.overflowMode === "Menu" && i === 2) {
              liWidth += liElems[liElems.length - 1].offsetWidth + liElems[liElems.length - 2].offsetWidth;
              if (liWidth > width) {
                this._maxItems = 1;
                this.initPvtProps();
                return this.reRenderItems();
              }
            }
            if (!(this.overflowMode === "Menu" && liElems[i].classList.contains(MENUCLASS))) {
              liWidth += liElems[i].offsetWidth;
            }
          }
        }
      } else if ((this.overflowMode === "Wrap" || this.overflowMode === "Scroll") && this._maxItems > 0) {
        var width = 0;
        var liElems = this.element.querySelectorAll(DOT + ITEMCLASS);
        if (liElems.length > this._maxItems + this._maxItems - 1) {
          for (var i = this.overflowMode === "Wrap" ? 1 : 0; i < this._maxItems + this._maxItems - 1; i++) {
            width += liElems[i].offsetWidth;
          }
          width = width + 5 + parseInt(getComputedStyle(this.element.children[0]).paddingLeft, 10) * 2;
          if (this.overflowMode === "Wrap") {
            this.element.querySelector(".e-breadcrumb-wrapped-ol").style.width = width + "px";
          } else {
            this.element.style.width = width + "px";
          }
        }
      }
    };
    Breadcrumb2.prototype.hasField = function(items, field) {
      for (var i = 0, len = items.length; i < len; i++) {
        if (items[i]["" + field]) {
          return true;
        }
      }
      return false;
    };
    Breadcrumb2.prototype.getMenuElement = function() {
      return this.createElement("li", {
        className: "e-icons e-breadcrumb-menu",
        attrs: {
          TABINDEX: "0"
        }
      });
    };
    Breadcrumb2.prototype.beforeItemRenderChanges = function(prevItem, currItem, elem, isRightIcon) {
      var wrapElem = elem.querySelector(".e-anchor-wrap");
      if (wrapElem) {
        wrapElem.parentElement.setAttribute("aria-label", "home");
      }
      if (currItem.text !== prevItem.text && wrapElem) {
        wrapElem.childNodes.forEach(function(child) {
          if (child.nodeType === Node.TEXT_NODE) {
            child.textContent = currItem.text;
          }
        });
      }
      if (currItem.iconCss !== prevItem.iconCss && wrapElem) {
        var iconElem = elem.querySelector(DOT + ICONCLASS);
        if (iconElem) {
          if (currItem.iconCss) {
            removeClass([iconElem], prevItem.iconCss.split(" "));
            addClass([iconElem], currItem.iconCss.split(" "));
          } else {
            remove(iconElem);
          }
        } else if (currItem.iconCss) {
          var iconElem_1 = this.createElement("span", {
            className: ICONCLASS + " " + currItem.iconCss
          });
          if (isRightIcon) {
            append([iconElem_1], wrapElem);
          } else {
            wrapElem.insertBefore(iconElem_1, wrapElem.childNodes[0]);
          }
        }
      }
      if (currItem.url !== prevItem.url && this.enableNavigation) {
        var anchor = elem.querySelector("a." + ITEMTEXTCLASS);
        if (anchor) {
          if (currItem.url) {
            anchor.setAttribute("href", currItem.url);
          } else {
            anchor.removeAttribute("href");
          }
        }
      }
    };
    Breadcrumb2.prototype.reRenderItems = function() {
      if (this.overflowMode === "Menu" && this.popupObj && this.popupObj.element.classList.contains("e-popup-open") && this.popupObj.element.querySelector(".e-edit-template")) {
        this.popupObj.hide();
        this.popupObj.destroy();
        this.isPopupCreated = false;
        detach(this.popupObj.element);
      }
      this.element.innerHTML = "";
      this.renderItems(this.items);
    };
    Breadcrumb2.prototype.clickHandler = function(e) {
      var li = closest(e.target, DOT + ITEMCLASS + ":not(.e-breadcrumb-separator)");
      if (!this.enableNavigation) {
        e.preventDefault();
      }
      if (li && (closest(e.target, DOT + ITEMTEXTCLASS) || this.itemTemplate)) {
        var idx = void 0;
        if (this.overflowMode === "Wrap") {
          idx = [].slice.call(this.element.querySelectorAll(DOT + ITEMCLASS)).indexOf(li);
        } else {
          idx = [].slice.call(li.parentElement.children).indexOf(li);
        }
        if (this.overflowMode === "Menu") {
          if (closest(e.target, DOT + POPUPCLASS)) {
            idx += this.startIndex;
            this.endIndex = idx;
            if (e.type === "keydown") {
              this.documentClickHandler(e);
            }
          } else if (this.element.querySelector(DOT + MENUCLASS)) {
            if (idx > [].slice.call(this.element.children[0].children).indexOf(this.element.querySelector(DOT + MENUCLASS))) {
              idx += this.popupUl.childElementCount * 2 - 2;
              idx = Math.floor(idx / 2);
              this.endIndex = idx;
            } else {
              this.startIndex = this.endIndex = idx;
            }
          } else {
            idx = Math.floor(idx / 2);
            this.startIndex = this.endIndex = idx;
          }
        } else {
          idx = Math.floor(idx / 2);
        }
        if (this.overflowMode === "Hidden" && this._maxItems > 0 && this.endIndex !== 0) {
          idx = parseInt(li.getAttribute("item-index"), 10);
          if (this.startIndex > 1) {
            this.startIndex -= this.endIndex - idx;
          }
          this.endIndex = idx;
        }
        var itemClickArgs = {
          element: li,
          item: this.items[idx],
          event: e,
          cancel: false
        };
        this.trigger("itemClick", itemClickArgs);
        if (itemClickArgs.cancel) {
          return;
        }
        if (this.items[idx]) {
          this.activeItem = this.items[idx].url || this.items[idx].text;
        }
        this.dataBind();
      }
      if (e.target.classList.contains("e-breadcrumb-collapsed")) {
        this.isExpanded = true;
        this.reRenderItems();
      }
      if (e.target.classList.contains(MENUCLASS) && !this.isPopupCreated) {
        this.renderPopup();
      }
    };
    Breadcrumb2.prototype.renderPopup = function() {
      var _this = this;
      var wrapper = this.createElement("div", {
        className: POPUPCLASS + " " + this.cssClass + (this.enableRtl ? " e-rtl" : "")
      });
      document.body.appendChild(wrapper);
      this.isPopupCreated = true;
      this.popupObj = new Popup(wrapper, {
        content: this.popupUl,
        relateTo: this.element.querySelector(DOT + MENUCLASS),
        enableRtl: this.enableRtl,
        position: {
          X: "left",
          Y: "bottom"
        },
        collision: {
          X: "fit",
          Y: "flip"
        },
        open: function() {
          if (_this.popupUl) {
            _this.popupUl.focus();
          }
        }
      });
      this.popupWireEvents();
      this.popupObj.show();
    };
    Breadcrumb2.prototype.documentClickHandler = function(e) {
      if (this.overflowMode === "Menu" && this.popupObj && this.popupObj.element.classList.contains("e-popup-open") && !closest(e.target, DOT + MENUCLASS) && !closest(e.target, DOT + "e-edit-template")) {
        this.popupObj.hide();
        this.popupObj.destroy();
        this.isPopupCreated = false;
        detach(this.popupObj.element);
      }
    };
    Breadcrumb2.prototype.resize = function() {
      this._maxItems = this.maxItems;
      this.initPvtProps();
      this.reRenderItems();
    };
    Breadcrumb2.prototype.expandHandler = function(e) {
      if (e.key === "Enter") {
        this.isExpanded = true;
        this.reRenderItems();
      }
    };
    Breadcrumb2.prototype.keyDownHandler = function(e) {
      if (e.key === "Enter") {
        this.clickHandler(e);
      }
    };
    Breadcrumb2.prototype.popupKeyDownHandler = function(e) {
      if (e.key === "Escape") {
        this.documentClickHandler(e);
      }
    };
    Breadcrumb2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "items":
          case "enableActiveItemNavigation":
            this.reRenderItems();
            break;
          case "activeItem":
            this._maxItems = this.maxItems;
            this.initPvtProps();
            this.reRenderItems();
            break;
          case "overflowMode":
          case "maxItems":
            this._maxItems = this.maxItems;
            this.initPvtProps();
            this.reRenderItems();
            if (oldProp.overflowMode === "Wrap") {
              this.element.classList.remove(WRAPMODECLASS);
            } else if (newProp.overflowMode === "Wrap") {
              this.element.classList.add(WRAPMODECLASS);
            }
            if (oldProp.overflowMode === "Scroll") {
              this.element.classList.remove(SCROLLMODECLASS);
            } else if (newProp.overflowMode === "Scroll") {
              this.element.classList.add(SCROLLMODECLASS);
            }
            break;
          case "url":
            this.initItems();
            this.reRenderItems();
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([this.element], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([this.element], newProp.cssClass.replace(/\s+/g, " ").trim().split(" "));
            }
            if (oldProp.cssClass && oldProp.cssClass.indexOf(ICONRIGHT) > -1 && !(newProp.cssClass && newProp.cssClass.indexOf(ICONRIGHT) > -1) || !(oldProp.cssClass && oldProp.cssClass.indexOf(ICONRIGHT) > -1) && newProp.cssClass && newProp.cssClass.indexOf(ICONRIGHT) > -1) {
              this.reRenderItems();
            }
            break;
          case "enableRtl":
            this.element.classList.toggle("e-rtl");
            break;
          case "disabled":
            this.element.classList.toggle(DISABLEDCLASS);
            this.element.setAttribute(ARIADISABLED, newProp.disabled + "");
            break;
        }
      }
    };
    Breadcrumb2.prototype.wireEvents = function() {
      this.delegateClickHanlder = this.documentClickHandler.bind(this);
      EventHandler.add(document, "click", this.delegateClickHanlder, this);
      EventHandler.add(this.element, "click", this.clickHandler, this);
      window.addEventListener("resize", this.resize.bind(this));
    };
    Breadcrumb2.prototype.popupWireEvents = function() {
      EventHandler.add(this.popupObj.element, "click", this.clickHandler, this);
      EventHandler.add(this.popupObj.element, "keydown", this.popupKeyDownHandler, this);
    };
    Breadcrumb2.prototype.unWireEvents = function() {
      EventHandler.remove(document, "click", this.delegateClickHanlder);
      EventHandler.remove(this.element, "click", this.clickHandler);
      window.removeEventListener("resize", this.resize.bind(this));
      if (this.popupObj) {
        EventHandler.remove(this.popupObj.element, "click", this.clickHandler);
        EventHandler.remove(this.popupObj.element, "keydown", this.popupKeyDownHandler);
      }
    };
    Breadcrumb2.prototype.getPersistData = function() {
      return this.addOnPersist(["activeItem"]);
    };
    Breadcrumb2.prototype.getModuleName = function() {
      return "breadcrumb";
    };
    Breadcrumb2.prototype.destroy = function() {
      var _this = this;
      if (this.popupObj && this.popupObj.element.classList.contains("e-popup-open")) {
        this.popupObj.destroy();
        this.isPopupCreated = false;
        detach(this.popupObj.element);
      }
      var classes = [];
      var attributes2 = ["aria-label"];
      if (this.cssClass) {
        classes.concat(this.cssClass.split(" "));
      }
      if (this.enableRtl) {
        classes.push("e-rtl");
      }
      if (this.disabled) {
        classes.push(DISABLEDCLASS);
        attributes2.push(ARIADISABLED);
      }
      if (this.overflowMode === "Wrap") {
        classes.push(WRAPMODECLASS);
      } else if (this.overflowMode === "Scroll") {
        classes.push(SCROLLMODECLASS);
      }
      this.unWireEvents();
      this.element.innerHTML = "";
      removeClass([this.element], classes);
      attributes2.forEach(function(attribute) {
        _this.element.removeAttribute(attribute);
      });
      _super.prototype.destroy.call(this);
    };
    __decorate41([Property("")], Breadcrumb2.prototype, "url", void 0);
    __decorate41([Collection([], BreadcrumbItem)], Breadcrumb2.prototype, "items", void 0);
    __decorate41([Property("")], Breadcrumb2.prototype, "activeItem", void 0);
    __decorate41([Property(-1)], Breadcrumb2.prototype, "maxItems", void 0);
    __decorate41([Property("Menu")], Breadcrumb2.prototype, "overflowMode", void 0);
    __decorate41([Property("")], Breadcrumb2.prototype, "cssClass", void 0);
    __decorate41([Property(null)], Breadcrumb2.prototype, "itemTemplate", void 0);
    __decorate41([Property("/")], Breadcrumb2.prototype, "separatorTemplate", void 0);
    __decorate41([Property(true)], Breadcrumb2.prototype, "enableNavigation", void 0);
    __decorate41([Property(false)], Breadcrumb2.prototype, "enableActiveItemNavigation", void 0);
    __decorate41([Property(false)], Breadcrumb2.prototype, "disabled", void 0);
    __decorate41([Property("")], Breadcrumb2.prototype, "locale", void 0);
    __decorate41([Event()], Breadcrumb2.prototype, "beforeItemRender", void 0);
    __decorate41([Event()], Breadcrumb2.prototype, "itemClick", void 0);
    __decorate41([Event()], Breadcrumb2.prototype, "created", void 0);
    Breadcrumb2 = __decorate41([NotifyPropertyChanges], Breadcrumb2);
    return Breadcrumb2;
  }(Component)
);

// node_modules/@syncfusion/ej2-navigations/src/carousel/carousel.js
var __extends44 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate42 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_CAROUSEL = "e-carousel";
var CLS_ACTIVE3 = "e-active";
var CLS_RTL6 = "e-rtl";
var CLS_PARTIAL = "e-partial";
var CLS_SWIPE = "e-swipe";
var CLS_SLIDE_CONTAINER = "e-carousel-slide-container";
var CLS_ITEMS3 = "e-carousel-items";
var CLS_CLONED = "e-cloned";
var CLS_ITEM4 = "e-carousel-item";
var CLS_PREVIOUS = "e-previous";
var CLS_NEXT = "e-next";
var CLS_PREV_ICON = "e-previous-icon";
var CLS_NEXT_ICON = "e-next-icon";
var CLS_NAVIGATORS = "e-carousel-navigators";
var CLS_INDICATORS = "e-carousel-indicators";
var CLS_INDICATOR_BARS = "e-indicator-bars";
var CLS_INDICATOR_BAR = "e-indicator-bar";
var CLS_INDICATOR2 = "e-indicator";
var CLS_ICON2 = "e-icons";
var CLS_PLAY_PAUSE = "e-play-pause";
var CLS_PLAY_ICON = "e-play-icon";
var CLS_PAUSE_ICON = "e-pause-icon";
var CLS_PREV_BUTTON = "e-previous-button";
var CLS_NEXT_BUTTON = "e-next-button";
var CLS_PLAY_BUTTON = "e-play-button";
var CLS_FLAT = "e-flat";
var CLS_ROUND = "e-round";
var CLS_HOVER_ARROWS = "e-hover-arrows";
var CLS_HOVER = "e-carousel-hover";
var CLS_TEMPLATE3 = "e-template";
var CLS_SLIDE_ANIMATION = "e-carousel-slide-animation";
var CLS_FADE_ANIMATION = "e-carousel-fade-animation";
var CLS_CUSTOM_ANIMATION = "e-carousel-custom-animation";
var CLS_ANIMATION_NONE = "e-carousel-animation-none";
var CLS_PREV_SLIDE = "e-prev";
var CLS_NEXT_SLIDE = "e-next";
var CLS_TRANSITION_START = "e-transition-start";
var CLS_TRANSITION_END = "e-transition-end";
var CarouselSwipeMode;
(function(CarouselSwipeMode2) {
  CarouselSwipeMode2[CarouselSwipeMode2["Touch"] = 1] = "Touch";
  CarouselSwipeMode2[CarouselSwipeMode2["Mouse"] = 2] = "Mouse";
})(CarouselSwipeMode || (CarouselSwipeMode = {}));
var CarouselItem = (
  /** @class */
  function(_super) {
    __extends44(CarouselItem2, _super);
    function CarouselItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate42([Property()], CarouselItem2.prototype, "cssClass", void 0);
    __decorate42([Property()], CarouselItem2.prototype, "interval", void 0);
    __decorate42([Property()], CarouselItem2.prototype, "template", void 0);
    __decorate42([Property()], CarouselItem2.prototype, "htmlAttributes", void 0);
    return CarouselItem2;
  }(ChildProperty)
);
var Carousel = (
  /** @class */
  function(_super) {
    __extends44(Carousel2, _super);
    function Carousel2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.isSwipe = false;
      return _this;
    }
    Carousel2.prototype.getModuleName = function() {
      return CLS_CAROUSEL.replace("e-", "");
    };
    Carousel2.prototype.getPersistData = function() {
      return this.addOnPersist(["selectedIndex"]);
    };
    Carousel2.prototype.preRender = function() {
      this.keyConfigs = {
        home: "home",
        end: "end",
        space: "space",
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        moveUp: "uparrow",
        moveDown: "downarrow"
      };
      var defaultLocale = {
        nextSlide: "Next slide",
        of: "of",
        pauseSlideTransition: "Pause slide transition",
        playSlideTransition: "Play slide transition",
        previousSlide: "Previous slide",
        slide: "Slide",
        slideShow: "Slide show"
      };
      this.localeObj = new L10n(this.getModuleName(), defaultLocale, this.locale);
    };
    Carousel2.prototype.render = function() {
      this.initialize();
      this.renderSlides();
      this.renderNavigators();
      this.renderPlayButton();
      this.renderIndicators();
      this.applyAnimation();
      this.wireEvents();
    };
    Carousel2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var target;
      var rtlElement;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "animationEffect":
            this.applyAnimation();
            break;
          case "cssClass":
            classList(this.element, [newProp.cssClass], [oldProp.cssClass]);
            break;
          case "selectedIndex":
            this.setActiveSlide(this.selectedIndex, oldProp.selectedIndex > this.selectedIndex ? "Previous" : "Next");
            this.autoSlide();
            break;
          case "htmlAttributes":
            if (!isNullOrUndefined(this.htmlAttributes)) {
              this.setHtmlAttributes(this.htmlAttributes, this.element);
            }
            break;
          case "enableTouchSwipe":
            if (!this.enableTouchSwipe && this.touchModule) {
              this.touchModule.destroy();
            }
            if (this.element.querySelector("." + CLS_ITEMS3)) {
              this.renderTouchActions();
            }
            break;
          case "loop":
            if (this.loop && isNullOrUndefined(this.autoSlideInterval)) {
              this.applySlideInterval();
            }
            this.handleNavigatorsActions(this.selectedIndex);
            if (this.partialVisible || !(this.swipeMode === (~CarouselSwipeMode.Touch & ~CarouselSwipeMode.Mouse))) {
              this.reRenderSlides();
            }
            break;
          case "allowKeyboardInteraction":
            if (this.keyModule) {
              this.keyModule.destroy();
              this.keyModule = null;
            }
            if (newProp.allowKeyboardInteraction) {
              this.renderKeyboardActions();
            }
            break;
          case "enableRtl":
            rtlElement = [].slice.call(this.element.querySelectorAll("." + CLS_PREV_BUTTON + ",\n                ." + CLS_NEXT_BUTTON + ", ." + CLS_PLAY_BUTTON));
            rtlElement.push(this.element);
            if (this.enableRtl) {
              addClass(rtlElement, CLS_RTL6);
            } else {
              removeClass(rtlElement, CLS_RTL6);
            }
            if (this.partialVisible || !(this.swipeMode === (~CarouselSwipeMode.Touch & ~CarouselSwipeMode.Mouse))) {
              var cloneCount = this.loop ? this.getNumOfItems() : 0;
              var slideWidth = this.itemsContainer.firstElementChild.clientWidth;
              this.itemsContainer.style.transform = this.getTranslateX(slideWidth, this.selectedIndex + cloneCount);
            }
            break;
          case "buttonsVisibility":
            target = this.element.querySelector("." + CLS_NAVIGATORS);
            if (target) {
              switch (this.buttonsVisibility) {
                case "Hidden":
                  this.resetTemplates(["previousButtonTemplate", "nextButtonTemplate"]);
                  remove(target);
                  break;
                case "VisibleOnHover":
                  addClass([].slice.call(target.childNodes), CLS_HOVER_ARROWS);
                  break;
                case "Visible":
                  removeClass([].slice.call(target.childNodes), CLS_HOVER_ARROWS);
                  break;
              }
            } else {
              this.renderNavigators();
              this.renderPlayButton();
            }
            break;
          case "width":
            setStyleAttribute(this.element, {
              "width": formatUnit(this.width)
            });
            break;
          case "height":
            setStyleAttribute(this.element, {
              "height": formatUnit(this.height)
            });
            break;
          case "autoPlay":
            if (this.showPlayButton && isNullOrUndefined(this.playButtonTemplate)) {
              this.playButtonClickHandler(null, true);
            }
            this.autoSlide();
            break;
          case "interval":
            this.autoSlide();
            break;
          case "showIndicators":
          case "indicatorsType":
            target = this.element.querySelector("." + CLS_INDICATORS);
            if (target) {
              this.resetTemplates(["indicatorsTemplate"]);
              remove(target);
            }
            this.renderIndicators();
            break;
          case "showPlayButton":
            target = this.element.querySelector("." + CLS_PLAY_PAUSE);
            if (!this.showPlayButton && target) {
              remove(target);
              this.resetTemplates(["playButtonTemplate"]);
            }
            this.renderPlayButton();
            break;
          case "items":
          case "dataSource": {
            var selectedData = prop === "dataSource" ? this.dataSource : this.items;
            if (!isNullOrUndefined(selectedData) && selectedData.length > 0 && this.selectedIndex >= selectedData.length) {
              this.setActiveSlide(selectedData.length - 1, "Previous");
              this.autoSlide();
            }
            this.reRenderSlides();
            this.reRenderIndicators();
            break;
          }
          case "partialVisible":
            if (this.partialVisible) {
              addClass([this.element], CLS_PARTIAL);
            } else {
              removeClass([this.element], CLS_PARTIAL);
            }
            this.reRenderSlides();
            break;
          case "swipeMode":
            EventHandler.remove(this.element, "mousedown touchstart", this.swipeStart);
            EventHandler.remove(this.element, "mousemove touchmove", this.swiping);
            EventHandler.remove(this.element, "mouseup touchend", this.swipStop);
            this.swipeModehandlers();
            this.reRenderSlides();
            break;
        }
      }
    };
    Carousel2.prototype.reRenderSlides = function() {
      var target = this.element.querySelector("." + CLS_ITEMS3);
      if (target) {
        this.resetTemplates(["itemTemplate"]);
        remove(target);
      }
      this.renderSlides();
    };
    Carousel2.prototype.reRenderIndicators = function() {
      var target = this.element.querySelector("." + CLS_INDICATORS);
      if (target) {
        this.resetTemplates(["indicatorsTemplate"]);
        remove(target);
      }
      this.renderIndicators();
    };
    Carousel2.prototype.initialize = function() {
      var carouselClasses = [];
      carouselClasses.push(CLS_CAROUSEL);
      if (this.cssClass) {
        carouselClasses.push(this.cssClass);
      }
      if (this.enableRtl) {
        carouselClasses.push(CLS_RTL6);
      }
      if (this.partialVisible) {
        carouselClasses.push(CLS_PARTIAL);
      }
      if (!(this.swipeMode === (~CarouselSwipeMode.Touch & ~CarouselSwipeMode.Mouse))) {
        carouselClasses.push(CLS_SWIPE);
      }
      addClass([this.element], carouselClasses);
      setStyleAttribute(this.element, {
        "width": formatUnit(this.width),
        "height": formatUnit(this.height)
      });
      attributes(this.element, {
        "role": "group",
        "aria-roledescription": "carousel",
        "aria-label": this.localeObj.getConstant("slideShow")
      });
      if (!isNullOrUndefined(this.htmlAttributes)) {
        this.setHtmlAttributes(this.htmlAttributes, this.element);
      }
    };
    Carousel2.prototype.renderSlides = function() {
      var _this = this;
      var slideContainer = this.element.querySelector("." + CLS_SLIDE_CONTAINER);
      if (!slideContainer) {
        slideContainer = this.createElement("div", {
          className: CLS_SLIDE_CONTAINER,
          attrs: {
            "tabindex": "0",
            "role": "tabpanel"
          }
        });
        this.element.appendChild(slideContainer);
      }
      this.itemsContainer = this.createElement("div", {
        className: CLS_ITEMS3,
        attrs: {
          "aria-live": this.autoPlay ? "off" : "polite"
        }
      });
      slideContainer.appendChild(this.itemsContainer);
      var numOfItems = this.getNumOfItems();
      if (numOfItems > 0 && this.loop) {
        if (this.items.length > 0) {
          this.items.slice(-numOfItems).forEach(function(item, index) {
            _this.renderSlide(item, item.template, index, _this.itemsContainer, true);
          });
        } else if (!isNullOrUndefined(this.dataSource) && this.dataSource.length > 0) {
          this.dataSource.slice(-numOfItems).forEach(function(item, index) {
            _this.renderSlide(item, _this.itemTemplate, index, _this.itemsContainer, true);
          });
        }
      }
      if (this.items.length > 0) {
        this.slideItems = this.items;
        this.items.forEach(function(item, index) {
          _this.renderSlide(item, item.template, index, _this.itemsContainer);
        });
      } else if (!isNullOrUndefined(this.dataSource) && this.dataSource.length > 0) {
        this.slideItems = this.dataSource;
        this.dataSource.forEach(function(item, index) {
          _this.renderSlide(item, _this.itemTemplate, index, _this.itemsContainer);
        });
      }
      if (numOfItems > 0 && this.loop) {
        if (this.items.length > 0) {
          this.items.slice(0, numOfItems).forEach(function(item, index) {
            _this.renderSlide(item, item.template, index, _this.itemsContainer, true);
          });
        } else if (!isNullOrUndefined(this.dataSource) && this.dataSource.length > 0) {
          this.dataSource.slice(0, numOfItems).forEach(function(item, index) {
            _this.renderSlide(item, _this.itemTemplate, index, _this.itemsContainer, true);
          });
        }
      }
      this.renderTemplates();
      this.itemsContainer.style.setProperty("--carousel-items-count", "" + this.itemsContainer.children.length);
      var slideWidth = isNullOrUndefined(this.itemsContainer.firstElementChild) ? 0 : this.itemsContainer.firstElementChild.clientWidth;
      this.itemsContainer.style.transitionProperty = "none";
      var cloneCount = this.loop ? numOfItems : 0;
      this.itemsContainer.style.transform = this.getTranslateX(slideWidth, this.selectedIndex + cloneCount);
      this.autoSlide();
      this.renderTouchActions();
      this.renderKeyboardActions();
    };
    Carousel2.prototype.getTranslateX = function(slideWidth, count) {
      if (count === void 0) {
        count = 1;
      }
      return this.enableRtl ? "translateX(" + slideWidth * count + "px)" : "translateX(" + -slideWidth * count + "px)";
    };
    Carousel2.prototype.renderSlide = function(item, itemTemplate, index, container, isClone) {
      if (isClone === void 0) {
        isClone = false;
      }
      var itemEle = this.createElement("div", {
        id: getUniqueID("carousel_item"),
        className: CLS_ITEM4 + " " + (item.cssClass ? item.cssClass : "") + " " + (this.selectedIndex === index && !isClone ? CLS_ACTIVE3 : ""),
        attrs: {
          "aria-hidden": this.selectedIndex === index && !isClone ? "false" : "true",
          "data-index": index.toString(),
          "role": "group",
          "aria-roledescription": "slide"
        }
      });
      if (isClone) {
        itemEle.classList.add(CLS_CLONED);
      }
      if (!(this.selectedIndex === index && !isClone)) {
        itemEle.setAttribute("inert", "true");
      }
      if (!isNullOrUndefined(item.htmlAttributes)) {
        this.setHtmlAttributes(item.htmlAttributes, itemEle);
      }
      var templateId = this.element.id + "_template";
      var template = this.templateParser(itemTemplate)(item, this, "itemTemplate", templateId, false);
      append(template, itemEle);
      container.appendChild(itemEle);
    };
    Carousel2.prototype.renderNavigators = function() {
      if (this.buttonsVisibility === "Hidden") {
        return;
      }
      var navigators = this.createElement("div", {
        className: CLS_NAVIGATORS
      });
      var itemsContainer = this.element.querySelector("." + CLS_SLIDE_CONTAINER);
      itemsContainer.insertAdjacentElement("afterend", navigators);
      if (!isNullOrUndefined(this.slideItems) && this.slideItems.length > 1) {
        this.renderNavigatorButton("Previous");
        this.renderNavigatorButton("Next");
      }
      this.renderTemplates();
    };
    Carousel2.prototype.renderNavigatorButton = function(direction) {
      var buttonContainer = this.createElement("div", {
        className: (direction === "Previous" ? CLS_PREVIOUS : CLS_NEXT) + " " + (this.buttonsVisibility === "VisibleOnHover" ? CLS_HOVER_ARROWS : "")
      });
      if (direction === "Previous" && this.previousButtonTemplate) {
        addClass([buttonContainer], CLS_TEMPLATE3);
        var templateId = this.element.id + "_previousButtonTemplate";
        var template = this.templateParser(this.previousButtonTemplate)({
          type: "Previous"
        }, this, "previousButtonTemplate", templateId, false);
        append(template, buttonContainer);
      } else if (direction === "Next" && this.nextButtonTemplate) {
        addClass([buttonContainer], CLS_TEMPLATE3);
        var templateId = this.element.id + "_nextButtonTemplate";
        var template = this.templateParser(this.nextButtonTemplate)({
          type: "Next"
        }, this, "nextButtonTemplate", templateId, false);
        append(template, buttonContainer);
      } else {
        var button = this.createElement("button", {
          attrs: {
            "aria-label": this.localeObj.getConstant(direction === "Previous" ? "previousSlide" : "nextSlide"),
            "type": "button"
          }
        });
        var buttonObj = new Button({
          cssClass: CLS_FLAT + " " + CLS_ROUND + " " + (direction === "Previous" ? CLS_PREV_BUTTON : CLS_NEXT_BUTTON),
          iconCss: CLS_ICON2 + " " + (direction === "Previous" ? CLS_PREV_ICON : CLS_NEXT_ICON),
          enableRtl: this.enableRtl,
          disabled: !this.loop && this.selectedIndex === (direction === "Previous" ? 0 : this.slideItems.length - 1)
        });
        buttonObj.appendTo(button);
        buttonContainer.appendChild(button);
      }
      this.element.querySelector("." + CLS_NAVIGATORS).appendChild(buttonContainer);
      EventHandler.add(buttonContainer, "click", this.navigatorClickHandler, this);
    };
    Carousel2.prototype.renderPlayButton = function() {
      if (isNullOrUndefined(this.slideItems) || this.buttonsVisibility === "Hidden" || !this.showPlayButton || this.slideItems.length <= 1) {
        return;
      }
      var playPauseWrap = this.createElement("div", {
        className: CLS_PLAY_PAUSE + " " + (this.buttonsVisibility === "VisibleOnHover" ? CLS_HOVER_ARROWS : "")
      });
      if (this.playButtonTemplate) {
        addClass([playPauseWrap], CLS_TEMPLATE3);
        var templateId = this.element.id + "_playButtonTemplate";
        var template = this.templateParser(this.playButtonTemplate)({}, this, "playButtonTemplate", templateId, false);
        append(template, playPauseWrap);
      } else {
        var playButton = this.createElement("button", {
          attrs: {
            "aria-label": this.localeObj.getConstant(this.autoPlay ? "pauseSlideTransition" : "playSlideTransition"),
            "type": "button"
          }
        });
        var isLastSlide = this.selectedIndex === this.slideItems.length - 1 && !this.loop;
        var buttonObj = new Button({
          cssClass: CLS_FLAT + " " + CLS_ROUND + " " + CLS_PLAY_BUTTON,
          iconCss: CLS_ICON2 + " " + (this.autoPlay && !isLastSlide ? CLS_PAUSE_ICON : CLS_PLAY_ICON),
          isToggle: true,
          enableRtl: this.enableRtl
        });
        if (isLastSlide) {
          this.setProperties({
            autoPlay: false
          }, true);
          playButton.setAttribute("aria-label", this.localeObj.getConstant("playSlideTransition"));
          this.itemsContainer.setAttribute("aria-live", "polite");
        }
        buttonObj.appendTo(playButton);
        playPauseWrap.appendChild(playButton);
      }
      var navigators = this.element.querySelector("." + CLS_NAVIGATORS);
      navigators.insertBefore(playPauseWrap, navigators.lastElementChild);
      this.renderTemplates();
      EventHandler.add(playPauseWrap, "click", this.playButtonClickHandler, this);
    };
    Carousel2.prototype.renderIndicators = function() {
      var _this = this;
      if (!this.showIndicators || isNullOrUndefined(this.indicatorsType)) {
        return;
      }
      var indicatorClass = "e-default";
      if (!this.indicatorsTemplate) {
        indicatorClass = "e-" + this.indicatorsType.toLowerCase();
      }
      var indicatorWrap = this.createElement("div", {
        className: CLS_INDICATORS + " " + indicatorClass
      });
      var indicatorBars = this.createElement("div", {
        className: CLS_INDICATOR_BARS
      });
      indicatorWrap.appendChild(indicatorBars);
      var progress;
      if (this.slideItems) {
        switch (this.indicatorsType) {
          case "Fraction":
            if (this.indicatorsTemplate) {
              this.renderIndicatorTemplate(indicatorBars, this.selectedIndex + 1);
            } else {
              indicatorBars.innerText = this.selectedIndex + 1 + " / " + this.slideItems.length;
            }
            break;
          case "Progress":
            if (this.indicatorsTemplate) {
              this.renderIndicatorTemplate(indicatorBars, this.selectedIndex + 1);
            } else {
              progress = this.createElement("div", {
                className: CLS_INDICATOR_BAR
              });
              progress.style.setProperty("--carousel-items-current", "" + (this.selectedIndex + 1));
              progress.style.setProperty("--carousel-items-count", "" + this.slideItems.length);
              indicatorBars.appendChild(progress);
            }
            break;
          case "Default":
          case "Dynamic":
            this.slideItems.forEach(function(item, index) {
              var indicatorBar = _this.createElement("div", {
                className: CLS_INDICATOR_BAR + " " + (_this.selectedIndex === index ? CLS_ACTIVE3 : _this.selectedIndex - 1 === index ? CLS_PREV_SLIDE : _this.selectedIndex + 1 === index ? CLS_NEXT_SLIDE : ""),
                attrs: {
                  "data-index": index.toString(),
                  "aria-current": _this.selectedIndex === index ? "true" : "false"
                }
              });
              indicatorBar.style.setProperty("--carousel-items-current", "" + _this.selectedIndex);
              if (_this.indicatorsTemplate) {
                _this.renderIndicatorTemplate(indicatorBar, index);
              } else if (_this.indicatorsType === "Default") {
                var indicator = _this.createElement("button", {
                  className: CLS_INDICATOR2,
                  attrs: {
                    "type": "button",
                    "aria-label": _this.localeObj.getConstant("slide") + " " + (index + 1) + " " + _this.localeObj.getConstant("of") + " " + _this.slideItems.length
                  }
                });
                indicatorBar.appendChild(indicator);
                indicator.appendChild(_this.createElement("div", {}));
                var buttonObj = new Button({
                  cssClass: "e-flat e-small"
                });
                buttonObj.appendTo(indicator);
              }
              indicatorBars.appendChild(indicatorBar);
              if (_this.indicatorsType === "Default") {
                EventHandler.add(indicatorBar, "click", _this.indicatorClickHandler, _this);
              }
            });
            break;
        }
      }
      this.element.appendChild(indicatorWrap);
    };
    Carousel2.prototype.renderIndicatorTemplate = function(indicatorBar, index) {
      if (index === void 0) {
        index = 0;
      }
      addClass([indicatorBar], CLS_TEMPLATE3);
      var templateId = this.element.id + "_indicatorsTemplate";
      var template = this.templateParser(this.indicatorsTemplate)({
        index,
        selectedIndex: this.selectedIndex
      }, this, "indicatorsTemplate", templateId, false);
      append(template, indicatorBar);
    };
    Carousel2.prototype.renderKeyboardActions = function() {
      if (!this.allowKeyboardInteraction) {
        return;
      }
      this.keyModule = new KeyboardEvents(this.element, {
        keyAction: this.keyHandler.bind(this),
        keyConfigs: this.keyConfigs
      });
    };
    Carousel2.prototype.renderTouchActions = function() {
      if (!this.enableTouchSwipe) {
        return;
      }
      this.touchModule = new Touch(this.element, {
        swipe: this.swipeHandler.bind(this)
      });
    };
    Carousel2.prototype.applyAnimation = function() {
      removeClass([this.element], [CLS_CUSTOM_ANIMATION, CLS_FADE_ANIMATION, CLS_SLIDE_ANIMATION, CLS_ANIMATION_NONE]);
      switch (this.animationEffect) {
        case "Slide":
          addClass([this.element], CLS_SLIDE_ANIMATION);
          break;
        case "Fade":
          addClass([this.element], CLS_FADE_ANIMATION);
          break;
        case "None":
          addClass([this.element], CLS_ANIMATION_NONE);
          break;
        case "Custom":
          addClass([this.element], CLS_CUSTOM_ANIMATION);
          break;
      }
    };
    Carousel2.prototype.autoSlide = function() {
      if (isNullOrUndefined(this.slideItems) || this.slideItems.length <= 1) {
        return;
      }
      this.resetSlideInterval();
      this.applySlideInterval();
    };
    Carousel2.prototype.autoSlideChange = function() {
      var activeSlide = this.element.querySelector("." + CLS_ITEM4 + "." + CLS_ACTIVE3) || this.element.querySelector("." + CLS_INDICATORS + " ." + CLS_ACTIVE3);
      if (isNullOrUndefined(activeSlide)) {
        return;
      }
      var activeIndex = parseInt(activeSlide.dataset.index, 10);
      if (!this.loop && activeIndex === this.slideItems.length - 1) {
        this.resetSlideInterval();
      } else {
        var index = (activeIndex + 1) % this.slideItems.length;
        if (!this.element.classList.contains(CLS_HOVER)) {
          this.setActiveSlide(index, "Next");
        }
        this.autoSlide();
      }
    };
    Carousel2.prototype.applySlideInterval = function() {
      var _this = this;
      if (!this.autoPlay || this.element.classList.contains(CLS_HOVER)) {
        return;
      }
      var itemInterval = this.interval;
      if (this.items.length > 0 && !isNullOrUndefined(this.items[this.selectedIndex || 0].interval)) {
        itemInterval = this.items[this.selectedIndex || 0].interval;
      }
      this.autoSlideInterval = setInterval(function() {
        return _this.autoSlideChange();
      }, itemInterval);
    };
    Carousel2.prototype.resetSlideInterval = function() {
      clearInterval(this.autoSlideInterval);
      this.autoSlideInterval = null;
    };
    Carousel2.prototype.getSlideIndex = function(direction) {
      var currentIndex = this.selectedIndex || 0;
      if (direction === "Previous") {
        currentIndex--;
        if (currentIndex < 0) {
          currentIndex = this.slideItems.length - 1;
        }
      } else {
        currentIndex++;
        if (currentIndex === this.slideItems.length) {
          currentIndex = 0;
        }
      }
      return currentIndex;
    };
    Carousel2.prototype.setActiveSlide = function(currentIndex, direction, isSwiped) {
      var _this = this;
      if (isSwiped === void 0) {
        isSwiped = false;
      }
      if (this.element.querySelectorAll("." + CLS_ITEM4 + "." + CLS_PREV_SLIDE + ",." + CLS_ITEM4 + "." + CLS_NEXT_SLIDE).length > 0) {
        return;
      }
      currentIndex = isNullOrUndefined(currentIndex) ? 0 : currentIndex;
      var allSlides = [].slice.call(this.element.querySelectorAll("." + CLS_ITEM4 + ":not(.e-cloned)"));
      var activeSlide = this.element.querySelector("." + CLS_ITEM4 + "." + CLS_ACTIVE3);
      if (isNullOrUndefined(activeSlide) && this.showIndicators) {
        var activeIndicator = this.element.querySelector("." + CLS_INDICATOR_BAR + "." + CLS_ACTIVE3);
        var activeIndex_1 = parseInt(activeIndicator.dataset.index, 10);
        addClass([allSlides[parseInt(activeIndex_1.toString(), 10)]], CLS_ACTIVE3);
        return;
      } else if (isNullOrUndefined(activeSlide)) {
        addClass([allSlides[parseInt(currentIndex.toString(), 10)]], CLS_ACTIVE3);
        return;
      }
      var activeIndex = parseInt(activeSlide.dataset.index, 10);
      var currentSlide = allSlides[parseInt(currentIndex.toString(), 10)];
      var eventArgs = {
        currentIndex: activeIndex,
        nextIndex: currentIndex,
        currentSlide: activeSlide,
        nextSlide: currentSlide,
        slideDirection: direction,
        isSwiped,
        cancel: false
      };
      this.trigger("slideChanging", eventArgs, function(args) {
        if (args.cancel) {
          return;
        }
        _this.setProperties({
          selectedIndex: currentIndex
        }, true);
        attributes(args.currentSlide, {
          "aria-hidden": "true"
        });
        args.currentSlide.setAttribute("inert", "true");
        attributes(args.nextSlide, {
          "aria-hidden": "false"
        });
        args.nextSlide.removeAttribute("inert");
        _this.refreshIndicators(activeIndex, currentIndex);
        _this.slideChangedEventArgs = {
          currentIndex: args.nextIndex,
          previousIndex: args.currentIndex,
          currentSlide: args.nextSlide,
          previousSlide: args.currentSlide,
          slideDirection: direction,
          isSwiped
        };
        var slideWidth = allSlides[parseInt(currentIndex.toString(), 10)].clientWidth;
        var numOfItems = _this.getNumOfItems();
        if (!_this.isSwipe) {
          _this.itemsContainer.style.transitionDuration = "0.6s";
        }
        _this.isSwipe = false;
        if (_this.animationEffect === "Fade") {
          _this.itemsContainer.classList.add("e-fade-in-out");
        } else {
          _this.itemsContainer.style.transitionProperty = "transform";
        }
        if (_this.loop) {
          if (_this.slideChangedEventArgs.currentIndex === 0 && _this.slideChangedEventArgs.slideDirection === "Next") {
            _this.itemsContainer.style.transform = _this.getTranslateX(slideWidth, allSlides.length + numOfItems);
          } else if (_this.slideChangedEventArgs.currentIndex === _this.slideItems.length - 1 && _this.slideChangedEventArgs.slideDirection === "Previous") {
            _this.itemsContainer.style.transform = _this.partialVisible ? _this.getTranslateX(slideWidth) : "translateX(0px)";
          } else {
            _this.itemsContainer.style.transform = _this.getTranslateX(slideWidth, currentIndex + numOfItems);
          }
        } else {
          _this.itemsContainer.style.transform = _this.getTranslateX(slideWidth, currentIndex);
        }
        if (_this.animationEffect === "Slide") {
          if (direction === "Previous") {
            addClass([args.nextSlide], CLS_PREV_SLIDE);
            args.nextSlide.setAttribute("data-slide-height", args.nextSlide.offsetHeight.toString());
            addClass([args.currentSlide, args.nextSlide], CLS_TRANSITION_END);
          } else {
            addClass([args.nextSlide], CLS_NEXT_SLIDE);
            args.nextSlide.setAttribute("data-slide-height", args.nextSlide.offsetHeight.toString());
            addClass([args.currentSlide, args.nextSlide], CLS_TRANSITION_START);
          }
        } else if (_this.animationEffect === "Fade") {
          removeClass([args.currentSlide], CLS_ACTIVE3);
          addClass([args.nextSlide], CLS_ACTIVE3);
        } else if (_this.animationEffect === "Custom") {
          if (direction === "Previous") {
            addClass([args.nextSlide], CLS_NEXT_SLIDE);
            addClass([args.currentSlide], CLS_PREV_SLIDE);
          } else {
            addClass([args.currentSlide], CLS_PREV_SLIDE);
            addClass([args.nextSlide], CLS_NEXT_SLIDE);
          }
        } else {
          _this.onTransitionEnd();
        }
        _this.handleNavigatorsActions(currentIndex);
      });
    };
    Carousel2.prototype.onTransitionEnd = function() {
      var _this = this;
      removeClass(this.element.querySelectorAll("." + CLS_ITEMS3), "e-fade-in-out");
      var numOfItems = this.getNumOfItems();
      if (this.slideChangedEventArgs) {
        this.itemsContainer.style.transitionProperty = "none";
        if (this.loop && (this.slideChangedEventArgs.currentIndex === 0 && this.slideChangedEventArgs.slideDirection === "Next" || this.slideChangedEventArgs.currentIndex === this.slideItems.length - 1 && this.slideChangedEventArgs.slideDirection === "Previous")) {
          var slideWidth = this.slideChangedEventArgs.currentSlide.clientWidth;
          this.itemsContainer.style.transform = this.getTranslateX(slideWidth, this.slideChangedEventArgs.currentIndex + numOfItems);
        }
        addClass([this.slideChangedEventArgs.currentSlide], CLS_ACTIVE3);
        removeClass([this.slideChangedEventArgs.previousSlide], CLS_ACTIVE3);
        this.trigger("slideChanged", this.slideChangedEventArgs, function() {
          removeClass(_this.element.querySelectorAll("." + CLS_ITEM4), [CLS_PREV_SLIDE, CLS_NEXT_SLIDE, CLS_TRANSITION_START, CLS_TRANSITION_END]);
          _this.slideChangedEventArgs = null;
        });
      }
    };
    Carousel2.prototype.refreshIndicators = function(activeIndex, currentIndex) {
      var _this = this;
      var slideIndicator = this.element.querySelector("." + CLS_INDICATOR_BARS);
      if (isNullOrUndefined(slideIndicator)) {
        return;
      }
      var indicators = [].slice.call(slideIndicator.childNodes);
      switch (this.indicatorsType) {
        case "Default":
        case "Dynamic":
          attributes(indicators[parseInt(activeIndex.toString(), 10)], {
            "aria-current": "false"
          });
          attributes(indicators[parseInt(currentIndex.toString(), 10)], {
            "aria-current": "true"
          });
          removeClass(indicators, [CLS_ACTIVE3, CLS_PREV_SLIDE, CLS_NEXT_SLIDE]);
          addClass([indicators[parseInt(currentIndex.toString(), 10)]], CLS_ACTIVE3);
          if (indicators[currentIndex - 1]) {
            addClass([indicators[currentIndex - 1]], CLS_PREV_SLIDE);
          }
          if (indicators[currentIndex + 1]) {
            addClass([indicators[currentIndex + 1]], CLS_NEXT_SLIDE);
          }
          indicators.forEach(function(item) {
            return item.style.setProperty("--carousel-items-current", "" + _this.selectedIndex);
          });
          break;
        case "Fraction":
          if (this.indicatorsTemplate) {
            if (slideIndicator.children.length > 0) {
              slideIndicator.removeChild(slideIndicator.firstElementChild);
            }
            this.renderIndicatorTemplate(slideIndicator, currentIndex + 1);
          } else {
            slideIndicator.innerText = this.selectedIndex + 1 + " / " + this.slideItems.length;
          }
          break;
        case "Progress":
          if (this.indicatorsTemplate) {
            if (slideIndicator.children.length > 0) {
              slideIndicator.removeChild(slideIndicator.firstElementChild);
            }
            this.renderIndicatorTemplate(slideIndicator, currentIndex + 1);
          } else {
            slideIndicator.firstElementChild.style.setProperty("--carousel-items-current", "" + (this.selectedIndex + 1));
          }
          break;
      }
    };
    Carousel2.prototype.setHtmlAttributes = function(attribute, element2) {
      var keys = Object.keys(attribute);
      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var key = keys_1[_i];
        if (key === "class") {
          addClass([element2], attribute["" + key]);
        } else {
          element2.setAttribute(key, attribute["" + key]);
        }
      }
    };
    Carousel2.prototype.templateParser = function(template) {
      if (template) {
        try {
          if (typeof template !== "function" && document.querySelectorAll(template).length) {
            return compile(document.querySelector(template).innerHTML.trim());
          } else {
            return compile(template);
          }
        } catch (error) {
          return compile(template);
        }
      }
      return void 0;
    };
    Carousel2.prototype.getNavigatorState = function(target, isPrevious) {
      var button = target.querySelector("." + (isPrevious ? CLS_PREV_BUTTON : CLS_NEXT_BUTTON));
      if (button) {
        var buttonObj = getInstance(button, Button);
        return buttonObj.disabled;
      }
      return false;
    };
    Carousel2.prototype.navigatorClickHandler = function(e) {
      var target = e.currentTarget;
      var isDisabled = this.getNavigatorState(target, target.classList.contains(CLS_PREVIOUS));
      if (isDisabled) {
        return;
      }
      var direction = target.classList.contains(CLS_PREVIOUS) ? "Previous" : "Next";
      this.setActiveSlide(this.getSlideIndex(direction), direction);
      this.autoSlide();
    };
    Carousel2.prototype.indicatorClickHandler = function(e) {
      var target = closest(e.target, "." + CLS_INDICATOR_BAR);
      var index = parseInt(target.dataset.index, 10);
      if (this.selectedIndex !== index) {
        this.setActiveSlide(index, this.selectedIndex > index ? "Previous" : "Next");
        this.autoSlide();
      }
    };
    Carousel2.prototype.playButtonClickHandler = function(e, isPropertyChange) {
      if (isPropertyChange === void 0) {
        isPropertyChange = false;
      }
      var playButton = this.element.querySelector("." + CLS_PLAY_BUTTON);
      if (playButton) {
        var buttonObj = getInstance(playButton, Button);
        if (!isPropertyChange) {
          this.setProperties({
            autoPlay: !this.autoPlay
          }, true);
        }
        playButton.setAttribute("aria-label", this.localeObj.getConstant(this.autoPlay ? "pauseSlideTransition" : "playSlideTransition"));
        buttonObj.iconCss = CLS_ICON2 + " " + (this.autoPlay ? CLS_PAUSE_ICON : CLS_PLAY_ICON);
        buttonObj.dataBind();
        this.itemsContainer.setAttribute("aria-live", this.autoPlay ? "off" : "polite");
        if (this.autoPlay && !this.loop && this.selectedIndex === this.slideItems.length - 1) {
          this.setActiveSlide(0, "Next");
        }
        this.autoSlide();
      }
    };
    Carousel2.prototype.keyHandler = function(e) {
      if (!this.allowKeyboardInteraction) {
        return;
      }
      var direction;
      var slideIndex;
      var isSlideTransition = false;
      var target = e.target;
      e.preventDefault();
      switch (e.action) {
        case "space":
          if (this.showIndicators && target.classList.contains(CLS_INDICATOR2)) {
            target.click();
          } else if (target.classList.contains(CLS_CAROUSEL) || target.classList.contains(CLS_PLAY_BUTTON)) {
            this.playButtonClickHandler(e);
          } else if (target.classList.contains(CLS_NEXT_BUTTON)) {
            this.next();
          } else if (target.classList.contains(CLS_PREV_BUTTON)) {
            this.prev();
          }
          break;
        case "end":
          slideIndex = this.slideItems.length - 1;
          direction = "Next";
          isSlideTransition = true;
          break;
        case "home":
          slideIndex = 0;
          direction = "Previous";
          isSlideTransition = true;
          break;
        case "moveUp":
        case "moveLeft":
        case "moveDown":
        case "moveRight":
          if (this.showIndicators && isNullOrUndefined(this.indicatorsTemplate)) {
            this.element.focus();
          }
          direction = e.action === "moveUp" || e.action === "moveLeft" ? "Previous" : "Next";
          slideIndex = this.getSlideIndex(direction);
          isSlideTransition = !this.isSuspendSlideTransition(slideIndex, direction);
          break;
      }
      if (isSlideTransition) {
        this.setActiveSlide(slideIndex, direction);
        this.autoSlide();
        isSlideTransition = false;
      }
    };
    Carousel2.prototype.swipeHandler = function(e) {
      if (this.element.classList.contains(CLS_HOVER) || isNullOrUndefined(this.slideItems) || this.slideItems.length <= 1) {
        return;
      }
      if (this.swipeMode === (~CarouselSwipeMode.Touch & ~CarouselSwipeMode.Mouse)) {
        return;
      }
      var eventType = e.startEvents ? e.startEvents.toString() : null;
      if (eventType && (this.swipeMode === CarouselSwipeMode.Mouse && eventType.includes("Touch") || this.swipeMode === CarouselSwipeMode.Touch && eventType.includes("Mouse"))) {
        return;
      }
      var direction = e.swipeDirection === "Right" ? "Previous" : "Next";
      var slideIndex = this.getSlideIndex(direction);
      if (!this.isSuspendSlideTransition(slideIndex, direction)) {
        this.setActiveSlide(slideIndex, direction, true);
        this.autoSlide();
      }
    };
    Carousel2.prototype.isSuspendSlideTransition = function(index, direction) {
      return !this.loop && (direction === "Next" && index === 0 || direction === "Previous" && index === this.slideItems.length - 1);
    };
    Carousel2.prototype.handleNavigatorsActions = function(index) {
      if (this.buttonsVisibility === "Hidden") {
        return;
      }
      if (this.showPlayButton) {
        var playButton = this.element.querySelector("." + CLS_PLAY_BUTTON);
        var isLastSlide = this.selectedIndex === this.slideItems.length - 1 && !this.loop;
        var isButtonUpdate = isNullOrUndefined(this.playButtonTemplate) && playButton && isLastSlide;
        if (isNullOrUndefined(this.playButtonTemplate) && playButton && !isLastSlide) {
          isButtonUpdate = !playButton.classList.contains(CLS_ACTIVE3);
        }
        if (isButtonUpdate) {
          this.setProperties({
            autoPlay: !isLastSlide
          }, true);
          playButton.setAttribute("aria-label", this.localeObj.getConstant(this.autoPlay ? "pauseSlideTransition" : "playSlideTransition"));
          this.itemsContainer.setAttribute("aria-live", this.autoPlay ? "off" : "polite");
          var buttonObj = getInstance(playButton, Button);
          buttonObj.iconCss = CLS_ICON2 + " " + (this.autoPlay ? CLS_PAUSE_ICON : CLS_PLAY_ICON);
          buttonObj.dataBind();
        }
      }
      var prevButton = this.element.querySelector("." + CLS_PREV_BUTTON);
      if (prevButton && isNullOrUndefined(this.previousButtonTemplate)) {
        var buttonObj = getInstance(prevButton, Button);
        buttonObj.disabled = !this.loop && index === 0;
        buttonObj.dataBind();
      }
      var nextButton = this.element.querySelector("." + CLS_NEXT_BUTTON);
      if (nextButton && isNullOrUndefined(this.nextButtonTemplate)) {
        var buttonObj = getInstance(nextButton, Button);
        buttonObj.disabled = !this.loop && index === this.slideItems.length - 1;
        buttonObj.dataBind();
      }
    };
    Carousel2.prototype.onHoverActions = function(e) {
      var navigator2 = this.element.querySelector("." + CLS_NAVIGATORS);
      switch (e.type) {
        case "mouseenter":
          if (this.buttonsVisibility === "VisibleOnHover" && navigator2) {
            removeClass([].slice.call(navigator2.childNodes), CLS_HOVER_ARROWS);
          }
          if (this.pauseOnHover) {
            addClass([this.element], CLS_HOVER);
          }
          break;
        case "mouseleave":
          if (this.buttonsVisibility === "VisibleOnHover" && navigator2) {
            addClass([].slice.call(navigator2.childNodes), CLS_HOVER_ARROWS);
          }
          removeClass([this.element], CLS_HOVER);
          if (this.isSwipe) {
            this.swipStop();
          }
          break;
      }
      this.autoSlide();
    };
    Carousel2.prototype.onFocusActions = function(e) {
      switch (e.type) {
        case "focusin":
          addClass([this.element], CLS_HOVER);
          break;
        case "focusout":
          removeClass([this.element], CLS_HOVER);
          break;
      }
      this.autoSlide();
    };
    Carousel2.prototype.destroyButtons = function() {
      var buttonCollections = [].slice.call(this.element.querySelectorAll(".e-control.e-btn"));
      for (var _i = 0, buttonCollections_1 = buttonCollections; _i < buttonCollections_1.length; _i++) {
        var button = buttonCollections_1[_i];
        var instance = getInstance(button, Button);
        if (instance) {
          instance.destroy();
        }
      }
    };
    Carousel2.prototype.getNumOfItems = function() {
      return this.partialVisible ? 2 : 1;
    };
    Carousel2.prototype.getTranslateValue = function(element2) {
      var style = getComputedStyle(element2);
      return window.WebKitCSSMatrix ? new WebKitCSSMatrix(style.webkitTransform).m41 : 0;
    };
    Carousel2.prototype.swipeStart = function(e) {
      if (!this.timeStampStart) {
        this.timeStampStart = Date.now();
      }
      e.preventDefault();
      this.isSwipe = false;
      this.itemsContainer.classList.add("e-swipe-start");
      this.prevPageX = e.touches ? e.touches[0].pageX : e.pageX;
      this.initialTranslate = this.getTranslateValue(this.itemsContainer);
    };
    Carousel2.prototype.swiping = function(e) {
      if (!this.itemsContainer.classList.contains("e-swipe-start")) {
        return;
      }
      this.isSwipe = true;
      e.preventDefault();
      var pageX = e.touches ? e.touches[0].pageX : e.pageX;
      var positionDiff = this.prevPageX - pageX;
      if (!this.loop && (this.enableRtl && (this.selectedIndex === 0 && positionDiff > 0 || this.selectedIndex === this.itemsContainer.childElementCount - 1 && positionDiff < 0) || !this.enableRtl && (this.selectedIndex === 0 && positionDiff < 0 || this.selectedIndex === this.itemsContainer.childElementCount - 1 && positionDiff > 0))) {
        return;
      }
      this.itemsContainer.style.transform = "translateX(" + (this.initialTranslate + (this.enableRtl ? positionDiff : -positionDiff)) + "px)";
    };
    Carousel2.prototype.swipStop = function() {
      var time = Date.now() - this.timeStampStart;
      var distanceX = this.getTranslateValue(this.itemsContainer) - this.initialTranslate;
      distanceX = distanceX < 0 ? distanceX * -1 : distanceX;
      if (this.isSwipe) {
        var offsetDist = distanceX * (Browser.isDevice ? 6 : 1.66);
        this.itemsContainer.style.transitionDuration = (Browser.isDevice ? distanceX : offsetDist) / time / 10 + "s";
      }
      var slideWidth = this.itemsContainer.firstElementChild.clientWidth;
      var threshold = slideWidth / 2;
      this.itemsContainer.classList.remove("e-swipe-start");
      var value = this.getTranslateValue(this.itemsContainer);
      if (value - this.initialTranslate < -threshold) {
        this.swipeNavigation(!this.enableRtl);
      } else if (value - this.initialTranslate > threshold) {
        this.swipeNavigation(this.enableRtl);
      } else {
        this.itemsContainer.style.transform = "translateX(" + this.initialTranslate + "px)";
        if (this.animationEffect === "Fade") {
          this.itemsContainer.classList.add("e-fade-in-out");
        }
      }
    };
    Carousel2.prototype.swipeNavigation = function(isRtl) {
      if (isRtl) {
        this.next();
      } else {
        this.prev();
      }
    };
    Carousel2.prototype.swipeModehandlers = function() {
      if ((this.swipeMode & CarouselSwipeMode.Touch) === CarouselSwipeMode.Touch) {
        EventHandler.add(this.itemsContainer, "touchstart", this.swipeStart, this);
        EventHandler.add(this.itemsContainer, "touchmove", this.swiping, this);
        EventHandler.add(this.itemsContainer, "touchend", this.swipStop, this);
      }
      if ((this.swipeMode & CarouselSwipeMode.Mouse) === CarouselSwipeMode.Mouse) {
        EventHandler.add(this.itemsContainer, "mousedown", this.swipeStart, this);
        EventHandler.add(this.itemsContainer, "mousemove", this.swiping, this);
        EventHandler.add(this.itemsContainer, "mouseup", this.swipStop, this);
      }
      if (this.swipeMode === 0 && (this.swipeMode & CarouselSwipeMode.Mouse & CarouselSwipeMode.Touch) === (CarouselSwipeMode.Mouse & CarouselSwipeMode.Touch)) {
        EventHandler.add(this.itemsContainer, "mousedown touchstart", this.swipeStart, this);
        EventHandler.add(this.itemsContainer, "mousemove touchmove", this.swiping, this);
        EventHandler.add(this.itemsContainer, "mouseup touchend", this.swipStop, this);
      }
    };
    Carousel2.prototype.resizeHandler = function() {
      if (this.itemsContainer && this.itemsContainer.firstElementChild) {
        var numOfItems = this.getNumOfItems();
        var slideWidth = this.itemsContainer.firstElementChild.clientWidth;
        if (this.loop) {
          this.itemsContainer.style.transform = this.getTranslateX(slideWidth, this.selectedIndex + numOfItems);
        } else {
          this.itemsContainer.style.transform = this.getTranslateX(slideWidth, this.selectedIndex);
        }
      }
    };
    Carousel2.prototype.wireEvents = function() {
      if (this.animationEffect !== "Custom" && this.enableTouchSwipe) {
        this.swipeModehandlers();
      }
      EventHandler.add(this.element, "focusin focusout", this.onFocusActions, this);
      EventHandler.add(this.element, "mouseenter mouseleave", this.onHoverActions, this);
      EventHandler.add(this.element.firstElementChild, "animationend", this.onTransitionEnd, this);
      EventHandler.add(this.element.firstElementChild, "transitionend", this.onTransitionEnd, this);
      EventHandler.add(window, "resize", this.resizeHandler, this);
    };
    Carousel2.prototype.unWireEvents = function() {
      var _this = this;
      var indicators = [].slice.call(this.element.querySelectorAll("." + CLS_INDICATOR_BAR));
      indicators.forEach(function(indicator) {
        EventHandler.remove(indicator, "click", _this.indicatorClickHandler);
      });
      var navigators = [].slice.call(this.element.querySelectorAll("." + CLS_PREVIOUS + ",." + CLS_NEXT));
      navigators.forEach(function(navigator2) {
        EventHandler.remove(navigator2, "click", _this.navigatorClickHandler);
      });
      var playIcon = this.element.querySelector("." + CLS_PLAY_PAUSE);
      if (playIcon) {
        EventHandler.remove(playIcon, "click", this.playButtonClickHandler);
      }
      EventHandler.remove(this.element.firstElementChild, "animationend", this.onTransitionEnd);
      EventHandler.remove(this.element.firstElementChild, "transitionend", this.onTransitionEnd);
      EventHandler.clearEvents(this.element);
      EventHandler.clearEvents(this.itemsContainer);
      EventHandler.remove(window, "resize", this.resizeHandler);
    };
    Carousel2.prototype.prev = function() {
      if (!this.loop && this.selectedIndex === 0) {
        return;
      }
      var index = this.selectedIndex === 0 ? this.slideItems.length - 1 : this.selectedIndex - 1;
      this.setActiveSlide(index, "Previous");
      this.autoSlide();
    };
    Carousel2.prototype.next = function() {
      if (!this.loop && this.selectedIndex === this.slideItems.length - 1) {
        return;
      }
      var index = this.selectedIndex === this.slideItems.length - 1 ? 0 : this.selectedIndex + 1;
      this.setActiveSlide(index, "Next");
      this.autoSlide();
    };
    Carousel2.prototype.play = function() {
      var playIcon = this.element.querySelector("." + CLS_PLAY_ICON);
      if (this.showPlayButton && playIcon) {
        classList(playIcon, [CLS_PAUSE_ICON], [CLS_PLAY_ICON]);
        var playButton = this.element.querySelector("." + CLS_PLAY_BUTTON);
        playButton.setAttribute("aria-label", this.localeObj.getConstant("pauseSlideTransition"));
      }
      this.setProperties({
        autoPlay: true
      }, true);
      this.itemsContainer.setAttribute("aria-live", "off");
      this.applySlideInterval();
    };
    Carousel2.prototype.pause = function() {
      var pauseIcon = this.element.querySelector("." + CLS_PAUSE_ICON);
      if (this.showPlayButton && pauseIcon) {
        var playButton = this.element.querySelector("." + CLS_PLAY_BUTTON);
        playButton.setAttribute("aria-label", this.localeObj.getConstant("playSlideTransition"));
        classList(pauseIcon, [CLS_PLAY_ICON], [CLS_PAUSE_ICON]);
      }
      this.setProperties({
        autoPlay: false
      }, true);
      this.itemsContainer.setAttribute("aria-live", "off");
      this.resetSlideInterval();
    };
    Carousel2.prototype.renderTemplates = function() {
      if (this.isAngular || this.isReact) {
        this.renderReactTemplates();
      }
    };
    Carousel2.prototype.resetTemplates = function(templates) {
      if (this.isAngular || this.isReact) {
        this.clearTemplate(templates);
      }
    };
    Carousel2.prototype.destroy = function() {
      var _this = this;
      this.resetTemplates();
      if (this.touchModule) {
        this.touchModule.destroy();
        this.touchModule = null;
      }
      if (this.keyModule) {
        this.keyModule.destroy();
        this.keyModule = null;
      }
      this.resetSlideInterval();
      this.destroyButtons();
      this.unWireEvents();
      [].slice.call(this.element.children).forEach(function(ele) {
        _this.element.removeChild(ele);
      });
      removeClass([this.element], [CLS_CAROUSEL, this.cssClass, CLS_RTL6, CLS_SWIPE]);
      ["role", "style"].forEach(function(attr) {
        _this.element.removeAttribute(attr);
      });
      this.itemsContainer = null;
      _super.prototype.destroy.call(this);
    };
    __decorate42([Collection([], CarouselItem)], Carousel2.prototype, "items", void 0);
    __decorate42([Property("Slide")], Carousel2.prototype, "animationEffect", void 0);
    __decorate42([Property()], Carousel2.prototype, "previousButtonTemplate", void 0);
    __decorate42([Property()], Carousel2.prototype, "nextButtonTemplate", void 0);
    __decorate42([Property()], Carousel2.prototype, "indicatorsTemplate", void 0);
    __decorate42([Property()], Carousel2.prototype, "playButtonTemplate", void 0);
    __decorate42([Property()], Carousel2.prototype, "cssClass", void 0);
    __decorate42([Property([])], Carousel2.prototype, "dataSource", void 0);
    __decorate42([Property()], Carousel2.prototype, "itemTemplate", void 0);
    __decorate42([Property(0)], Carousel2.prototype, "selectedIndex", void 0);
    __decorate42([Property("100%")], Carousel2.prototype, "width", void 0);
    __decorate42([Property("100%")], Carousel2.prototype, "height", void 0);
    __decorate42([Property(5e3)], Carousel2.prototype, "interval", void 0);
    __decorate42([Property(true)], Carousel2.prototype, "autoPlay", void 0);
    __decorate42([Property(true)], Carousel2.prototype, "pauseOnHover", void 0);
    __decorate42([Property(true)], Carousel2.prototype, "loop", void 0);
    __decorate42([Property(false)], Carousel2.prototype, "showPlayButton", void 0);
    __decorate42([Property(true)], Carousel2.prototype, "enableTouchSwipe", void 0);
    __decorate42([Property(true)], Carousel2.prototype, "allowKeyboardInteraction", void 0);
    __decorate42([Property(true)], Carousel2.prototype, "showIndicators", void 0);
    __decorate42([Property("Default")], Carousel2.prototype, "indicatorsType", void 0);
    __decorate42([Property("Visible")], Carousel2.prototype, "buttonsVisibility", void 0);
    __decorate42([Property(false)], Carousel2.prototype, "partialVisible", void 0);
    __decorate42([Property(CarouselSwipeMode.Touch)], Carousel2.prototype, "swipeMode", void 0);
    __decorate42([Property()], Carousel2.prototype, "htmlAttributes", void 0);
    __decorate42([Event()], Carousel2.prototype, "slideChanging", void 0);
    __decorate42([Event()], Carousel2.prototype, "slideChanged", void 0);
    Carousel2 = __decorate42([NotifyPropertyChanges], Carousel2);
    return Carousel2;
  }(Component)
);

// node_modules/@syncfusion/ej2-navigations/src/appbar/appbar.js
var __extends45 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate43 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_APPBAR = "e-appbar";
var CLS_HORIZONTAL_BOTTOM = "e-horizontal-bottom";
var CLS_STICKY = "e-sticky";
var CLS_PROMINENT = "e-prominent";
var CLS_DENSE = "e-dense";
var CLS_RTL7 = "e-rtl";
var CLS_LIGHT = "e-light";
var CLS_DARK = "e-dark";
var CLS_PRIMARY = "e-primary";
var CLS_INHERIT = "e-inherit";
var AppBar = (
  /** @class */
  function(_super) {
    __extends45(AppBar2, _super);
    function AppBar2(options, element2) {
      return _super.call(this, options, element2) || this;
    }
    AppBar2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.element.classList.remove(CLS_APPBAR);
      this.element.removeAttribute("style");
      this.element.removeAttribute("role");
    };
    AppBar2.prototype.getModuleName = function() {
      return "appbar";
    };
    AppBar2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    AppBar2.prototype.preRender = function() {
    };
    AppBar2.prototype.render = function() {
      this.element.classList.add(CLS_APPBAR);
      if (this.element.tagName !== "HEADER") {
        this.element.setAttribute("role", "banner");
      }
      if (this.cssClass) {
        addClass([this.element], this.cssClass.split(" "));
      }
      if (this.position === "Bottom") {
        this.element.classList.add(CLS_HORIZONTAL_BOTTOM);
      }
      if (this.isSticky) {
        this.element.classList.add(CLS_STICKY);
      }
      if (this.enableRtl) {
        this.element.classList.add(CLS_RTL7);
      }
      this.setHeightMode();
      this.setColorMode();
      if (!isNullOrUndefined(this.htmlAttributes)) {
        this.setHtmlAttributes(this.htmlAttributes, this.element);
      }
    };
    AppBar2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "mode":
            removeClass([this.element], [CLS_DENSE, CLS_PROMINENT]);
            this.setHeightMode();
            break;
          case "position":
            if (this.position === "Bottom") {
              addClass([this.element], CLS_HORIZONTAL_BOTTOM);
            } else {
              removeClass([this.element], CLS_HORIZONTAL_BOTTOM);
            }
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([this.element], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([this.element], newProp.cssClass.split(" "));
            }
            break;
          case "isSticky":
            if (this.isSticky) {
              addClass([this.element], CLS_STICKY);
            } else {
              removeClass([this.element], CLS_STICKY);
            }
            break;
          case "htmlAttributes":
            if (!isNullOrUndefined(this.htmlAttributes)) {
              if (!isNullOrUndefined(oldProp.htmlAttributes)) {
                var keys = Object.keys(oldProp.htmlAttributes);
                for (var _b = 0, keys_1 = keys; _b < keys_1.length; _b++) {
                  var key = keys_1[_b];
                  if (key === "class") {
                    removeClass([this.element], oldProp.htmlAttributes["" + key]);
                  } else {
                    this.element.removeAttribute(key);
                  }
                }
              }
              this.setHtmlAttributes(newProp.htmlAttributes, this.element);
            }
            break;
          case "colorMode":
            removeClass([this.element], [CLS_DARK, CLS_PRIMARY, CLS_INHERIT, CLS_LIGHT]);
            this.setColorMode();
            break;
          case "enableRtl":
            if (this.enableRtl) {
              addClass([this.element], CLS_RTL7);
            } else {
              removeClass([this.element], CLS_RTL7);
            }
            break;
        }
      }
    };
    AppBar2.prototype.setHtmlAttributes = function(attribute, element2) {
      var keys = Object.keys(attribute);
      for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
        var key = keys_2[_i];
        if (key === "class") {
          addClass([element2], attribute["" + key]);
        } else {
          element2.setAttribute(key, attribute["" + key]);
        }
      }
    };
    AppBar2.prototype.setHeightMode = function() {
      if (this.mode === "Prominent") {
        this.element.classList.add(CLS_PROMINENT);
      } else if (this.mode === "Dense") {
        this.element.classList.add(CLS_DENSE);
      }
    };
    AppBar2.prototype.setColorMode = function() {
      switch (this.colorMode) {
        case "Light":
          this.element.classList.add(CLS_LIGHT);
          break;
        case "Dark":
          this.element.classList.add(CLS_DARK);
          break;
        case "Primary":
          this.element.classList.add(CLS_PRIMARY);
          break;
        case "Inherit":
          this.element.classList.add(CLS_INHERIT);
          break;
      }
    };
    __decorate43([Property("Regular")], AppBar2.prototype, "mode", void 0);
    __decorate43([Property("Top")], AppBar2.prototype, "position", void 0);
    __decorate43([Property()], AppBar2.prototype, "cssClass", void 0);
    __decorate43([Property(false)], AppBar2.prototype, "isSticky", void 0);
    __decorate43([Property()], AppBar2.prototype, "htmlAttributes", void 0);
    __decorate43([Property("Light")], AppBar2.prototype, "colorMode", void 0);
    __decorate43([Event()], AppBar2.prototype, "created", void 0);
    __decorate43([Event()], AppBar2.prototype, "destroyed", void 0);
    AppBar2 = __decorate43([NotifyPropertyChanges], AppBar2);
    return AppBar2;
  }(Component)
);

// node_modules/@syncfusion/ej2-navigations/src/stepper-base/stepper-base.js
var __extends46 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate44 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PROGRESSVALUE = "--progress-value";
var PROGRESSPOS = "--progress-position";
var VERTICALSTEP = "e-vertical";
var HORIZSTEP = "e-horizontal";
var ITEMLIST2 = "e-stepper-steps";
var StepStatus;
(function(StepStatus2) {
  StepStatus2["NotStarted"] = "NotStarted";
  StepStatus2["InProgress"] = "InProgress";
  StepStatus2["Completed"] = "Completed";
})(StepStatus || (StepStatus = {}));
var Step = (
  /** @class */
  function(_super) {
    __extends46(Step2, _super);
    function Step2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate44([Property("")], Step2.prototype, "cssClass", void 0);
    __decorate44([Property(false)], Step2.prototype, "disabled", void 0);
    __decorate44([Property("")], Step2.prototype, "iconCss", void 0);
    __decorate44([Property(null)], Step2.prototype, "isValid", void 0);
    __decorate44([Property("")], Step2.prototype, "label", void 0);
    __decorate44([Property(false)], Step2.prototype, "optional", void 0);
    __decorate44([Property(StepStatus.NotStarted)], Step2.prototype, "status", void 0);
    __decorate44([Property("")], Step2.prototype, "text", void 0);
    return Step2;
  }(ChildProperty)
);
var StepperOrientation;
(function(StepperOrientation2) {
  StepperOrientation2["Horizontal"] = "Horizontal";
  StepperOrientation2["Vertical"] = "Vertical";
})(StepperOrientation || (StepperOrientation = {}));
var StepperBase = (
  /** @class */
  function(_super) {
    __extends46(StepperBase2, _super);
    function StepperBase2(options, element2) {
      return _super.call(this, options, element2) || this;
    }
    StepperBase2.prototype.preRender = function() {
    };
    StepperBase2.prototype.getModuleName = function() {
      return "stepperBase";
    };
    StepperBase2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    StepperBase2.prototype.render = function() {
    };
    StepperBase2.prototype.updateOrientaion = function(wrapper) {
      if (wrapper.classList.contains(HORIZSTEP) || wrapper.classList.contains(VERTICALSTEP)) {
        wrapper.classList.remove(HORIZSTEP, VERTICALSTEP);
      }
      if (!isNullOrUndefined(this.orientation)) {
        wrapper.classList.add("e-" + this.orientation.toLocaleLowerCase());
      }
    };
    StepperBase2.prototype.renderProgressBar = function(wrapper) {
      this.progressStep = this.createElement("div", {
        className: "e-stepper-progressbar"
      });
      this.progressbar = this.createElement("div", {
        className: "e-progressbar-value"
      });
      var beforeLabel = wrapper.querySelector("li").querySelector(".e-step-label-container");
      this.progressStep.appendChild(this.progressbar);
      wrapper.prepend(this.progressStep);
      this.progressbar.style.setProperty(PROGRESSVALUE, "0%");
      if (wrapper.classList.contains(VERTICALSTEP)) {
        if (wrapper.classList.contains("e-label-bottom") || wrapper.classList.contains("e-label-top")) {
          var stepsContainer = wrapper.querySelector("." + ITEMLIST2);
          this.progressStep.style.setProperty(PROGRESSPOS, stepsContainer.offsetWidth / 2 + "px");
        } else {
          this.progressStep.style.setProperty(PROGRESSPOS, this.progressBarPosition / 2 - 1 + "px");
        }
      }
      if (beforeLabel && beforeLabel.classList.contains("e-label-before")) {
        this.progressStep.style.setProperty(PROGRESSPOS, this.progressBarPosition - 1 + 5 + "px");
      }
      if (wrapper.classList.contains(HORIZSTEP)) {
        this.setProgressPosition(wrapper);
      }
    };
    StepperBase2.prototype.setProgressPosition = function(wrapper, isResize) {
      var stepItemContainer = wrapper.querySelector(".e-step-container");
      var stepItemEle = stepItemContainer.firstElementChild;
      if (isResize !== true) {
        var topPos = 0;
        if (wrapper.classList.contains("e-label-before")) {
          topPos = stepItemContainer.offsetParent.offsetHeight - stepItemEle.offsetHeight / 2 - 1;
        } else {
          topPos = stepItemEle.offsetHeight / 2;
        }
        this.progressStep.style.setProperty("--progress-top-position", topPos + "px");
      }
      var lastEle = wrapper.querySelector("." + ITEMLIST2).lastChild.firstChild;
      if (wrapper.classList.contains("e-rtl")) {
        var leftPost = stepItemEle.offsetLeft + stepItemEle.offsetWidth - wrapper.querySelector("." + ITEMLIST2).offsetWidth;
        this.progressStep.style.setProperty("--progress-left-position", Math.abs(leftPost) + "px");
        this.progressStep.style.setProperty("--progress-bar-width", Math.abs(lastEle.offsetLeft - stepItemEle.offsetLeft) + "px");
      } else {
        this.progressStep.style.setProperty("--progress-left-position", stepItemEle.offsetLeft + 1 + "px");
        this.progressStep.style.setProperty("--progress-bar-width", lastEle.offsetWidth + lastEle.offsetLeft - 2 - (stepItemEle.offsetLeft + 2) + "px");
      }
    };
    StepperBase2.prototype.onPropertyChanged = function(newProp, oldProp) {
    };
    __decorate44([Collection([], Step)], StepperBase2.prototype, "steps", void 0);
    __decorate44([Property("")], StepperBase2.prototype, "cssClass", void 0);
    __decorate44([Property(false)], StepperBase2.prototype, "readOnly", void 0);
    __decorate44([Property(StepperOrientation.Horizontal)], StepperBase2.prototype, "orientation", void 0);
    __decorate44([Event()], StepperBase2.prototype, "created", void 0);
    StepperBase2 = __decorate44([NotifyPropertyChanges], StepperBase2);
    return StepperBase2;
  }(Component)
);

// node_modules/@syncfusion/ej2-navigations/src/stepper/stepper.js
var __extends47 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate45 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ITEMCONTAINER2 = "e-step-container";
var ITEMLIST3 = "e-stepper-steps";
var ICONCSS2 = "e-indicator";
var TEXTCSS = "e-step-text-container";
var STEPLABEL = "e-step-label-container";
var OPTIONAL = "e-step-label-optional";
var SELECTED4 = "e-step-selected";
var INPROGRESS = "e-step-inprogress";
var NOTSTARTED = "e-step-notstarted";
var FOCUS2 = "e-step-focus";
var COMPLETED = "e-step-completed";
var DISABLED9 = "e-step-disabled";
var READONLY2 = "e-stepper-readonly";
var PROGRESSVALUE2 = "--progress-value";
var RTL14 = "e-rtl";
var TEMPLATE = "e-step-template";
var LABELAFTER = "e-label-after";
var LABELBEFORE = "e-label-before";
var VERTICALSTEP2 = "e-vertical";
var HORIZSTEP2 = "e-horizontal";
var STEPICON = "e-step-item";
var STEPTEXT = "e-step-text";
var TEXT = "e-text";
var STEPSLABEL = "e-step-label";
var LABEL4 = "e-label";
var STEPINDICATOR = "e-step-type-indicator";
var LABELINDICATOR = "e-step-type-label";
var INDICATORICON = "e-step-indicator";
var STEPPERTOOLTIP = "e-stepper-tooltip";
var STEPPERIPROGRESSTIP = "e-step-inprogress-tip";
var LINEARSTEP = "e-linear";
var PREVSTEP = "e-previous";
var NEXTSTEP = "e-next";
var StepperAnimationSettings = (
  /** @class */
  function(_super) {
    __extends47(StepperAnimationSettings2, _super);
    function StepperAnimationSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate45([Property(true)], StepperAnimationSettings2.prototype, "enable", void 0);
    __decorate45([Property(2e3)], StepperAnimationSettings2.prototype, "duration", void 0);
    __decorate45([Property(0)], StepperAnimationSettings2.prototype, "delay", void 0);
    return StepperAnimationSettings2;
  }(ChildProperty)
);
var StepLabelPosition;
(function(StepLabelPosition2) {
  StepLabelPosition2["Top"] = "Top";
  StepLabelPosition2["Bottom"] = "Bottom";
  StepLabelPosition2["Start"] = "Start";
  StepLabelPosition2["End"] = "End";
})(StepLabelPosition || (StepLabelPosition = {}));
var StepType;
(function(StepType2) {
  StepType2["Default"] = "Default";
  StepType2["Label"] = "Label";
  StepType2["Indicator"] = "Indicator";
})(StepType || (StepType = {}));
var Stepper = (
  /** @class */
  function(_super) {
    __extends47(Stepper2, _super);
    function Stepper2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.stepperItemElements = [];
      return _this;
    }
    Stepper2.prototype.preRender = function() {
      if (!this.element.id) {
        this.element.id = getUniqueID("e-" + this.getModuleName());
      }
      var localeText = {
        optional: "Optional"
      };
      this.l10n = new L10n("stepper", localeText, this.locale);
      this.keyConfigs = {
        downarrow: "downarrow",
        leftarrow: "leftarrow",
        rightarrow: "rightarrow",
        uparrow: "uparrow",
        space: "space",
        enter: "enter",
        home: "home",
        end: "end",
        tab: "tab",
        shiftTab: "shift+tab",
        escape: "escape"
      };
      this.tooltipOpen = false;
    };
    Stepper2.prototype.getModuleName = function() {
      return "stepper";
    };
    Stepper2.prototype.render = function() {
      this.initialize();
      this.navigationHandler(this.activeStep, null, false);
      this.updateStepperStatus(true);
    };
    Stepper2.prototype.initialize = function() {
      this.element.setAttribute("aria-label", this.element.id);
      this.updatePosition();
      this.stepperItemList = this.createElement("ol", {
        className: ITEMLIST3
      });
      this.updateOrientaion(this.element);
      this.updateStepType();
      this.element.appendChild(this.stepperItemList);
      if (this.cssClass) {
        addClass([this.element], this.cssClass.trim().split(" "));
      }
      if (this.readOnly) {
        this.element.classList.add(READONLY2);
      }
      if (this.enableRtl) {
        this.element.classList.add(RTL14);
      }
      this.wireEvents();
      this.updateTemplateFunction();
      this.renderItems();
      if (this.steps.length > 0) {
        this.initiateProgressBar();
        this.checkValidStep();
        this.updateAnimation();
        this.updateTooltip();
        this.wireKeyboardEvent();
      }
    };
    Stepper2.prototype.initiateProgressBar = function() {
      var _this = this;
      if (this.steps.length > 1) {
        if (this.isAngular && this.template) {
          setTimeout(function() {
            _this.renderProgressBar(_this.element);
          });
        } else {
          this.renderProgressBar(this.element);
        }
      }
    };
    Stepper2.prototype.updatePosition = function() {
      this.progressBarPosition = this.beforeLabelWidth = this.textEleWidth = 0;
    };
    Stepper2.prototype.renderDefault = function(index) {
      var step = this.steps[parseInt(index.toString(), 10)];
      return !step.iconCss && !step.text && !step.label;
    };
    Stepper2.prototype.updateAnimation = function() {
      var progressEle = this.element.querySelector(".e-progressbar-value");
      if (this.animation.enable) {
        if (this.animation.duration >= 0) {
          if (progressEle) {
            progressEle.style.setProperty("--duration", this.animation.duration + "ms");
          }
        }
        if (this.animation.delay >= 0) {
          if (progressEle) {
            progressEle.style.setProperty("--delay", this.animation.delay + "ms");
          }
        }
      } else {
        if (progressEle) {
          progressEle.style.setProperty("--delay", "0ms");
          progressEle.style.setProperty("--duration", "0ms");
        }
      }
    };
    Stepper2.prototype.updateStepType = function() {
      if (!isNullOrUndefined(this.stepType)) {
        var stepTypeLower = this.stepType.toLowerCase();
        var validStepTypes = ["indicator", "label", "default"];
        if (validStepTypes.indexOf(stepTypeLower) !== -1) {
          if (stepTypeLower !== "default") {
            this.element.classList.add("e-step-type-" + stepTypeLower);
          }
          if ((stepTypeLower === "indicator" || stepTypeLower === "label") && this.labelContainer) {
            this.clearLabelPosition();
          }
        }
      }
    };
    Stepper2.prototype.wireEvents = function() {
      EventHandler.add(window, "resize", this.updateResize, this);
      EventHandler.add(window, "click", this.updateStepFocus, this);
    };
    Stepper2.prototype.unWireEvents = function() {
      EventHandler.remove(window, "resize", this.updateResize);
      EventHandler.remove(window, "click", this.updateStepFocus);
    };
    Stepper2.prototype.updateResize = function() {
      if (this.stepperItemList && this.progressbar && this.element.classList.contains(HORIZSTEP2)) {
        this.setProgressPosition(this.element, true);
      }
      this.navigateToStep(this.activeStep, null, null, false, false);
    };
    Stepper2.prototype.updateStepFocus = function() {
      if (this.isKeyNavFocus) {
        this.isKeyNavFocus = false;
        var isFocus = this.element.querySelector("." + FOCUS2);
        if (isFocus) {
          isFocus.classList.remove(FOCUS2);
          this.element.classList.remove("e-steps-focus");
        }
      }
    };
    Stepper2.prototype.updateStepperStatus = function(isInitial) {
      for (var index = 0; index < this.steps.length; index++) {
        var item = this.steps[parseInt(index.toString(), 10)];
        var status_1 = item.status.toLowerCase();
        if (isInitial && this.activeStep === 0 && index === 0) {
          var prevOnChange = this.isProtectedOnChange;
          this.isProtectedOnChange = true;
          item.status = StepStatus.InProgress;
          this.isProtectedOnChange = prevOnChange;
        }
        if (item && status_1 !== "notstarted" && index === this.activeStep) {
          for (var i = 0; i < this.steps.length; i++) {
            var itemElement = this.stepperItemElements[parseInt(i.toString(), 10)];
            itemElement.classList.remove(SELECTED4, INPROGRESS, COMPLETED, NOTSTARTED);
            var prevOnChange = this.isProtectedOnChange;
            this.isProtectedOnChange = true;
            if (status_1 === "completed") {
              this.updateStatusClass(i, index, itemElement);
            } else {
              this.updateStatusClass(i, index, itemElement, true);
            }
            this.isProtectedOnChange = prevOnChange;
          }
        } else if (item && status_1 !== "notstarted" && index !== this.activeStep) {
          this.navigationHandler(this.activeStep, null, true);
        }
      }
    };
    Stepper2.prototype.updateStatusClass = function(currentStep, index, ele, isInprogress) {
      var stepItem = this.steps[parseInt(currentStep.toString(), 10)];
      if (currentStep < index) {
        ele.classList.add(COMPLETED);
        stepItem.status = StepStatus.Completed;
      } else if (currentStep === index) {
        ele.classList.add(isInprogress ? INPROGRESS : COMPLETED, SELECTED4);
      } else {
        ele.classList.add(NOTSTARTED);
      }
    };
    Stepper2.prototype.renderItems = function() {
      var _this = this;
      var _a;
      var isHorizontal = this.element.classList.contains(HORIZSTEP2);
      var isVertical = this.element.classList.contains(VERTICALSTEP2);
      var labelPositionLower = !isNullOrUndefined(this.labelPosition) ? this.labelPosition.toLowerCase() : "";
      for (var index = 0; index < this.steps.length; index++) {
        this.stepperItemContainer = this.createElement("li", {
          className: ITEMCONTAINER2
        });
        var stepSpan = this.createElement("span", {
          className: "e-step"
        });
        var item = this.steps[parseInt(index.toString(), 10)];
        var isItemLabel = item.label ? true : false;
        var isItemText = item.text ? true : false;
        var isIndicator = this.element.classList.contains(STEPINDICATOR);
        this.stepperItemContainer.classList[index === 0 ? "add" : "remove"](SELECTED4, INPROGRESS);
        this.stepperItemContainer.classList[index !== 0 ? "add" : "remove"](NOTSTARTED);
        if (isHorizontal) {
          this.stepperItemContainer.style.setProperty("--max-width", 100 / this.steps.length + "%");
        }
        if (this.renderDefault(index) && (isNullOrUndefined(this.template) || this.template === "")) {
          var isIndicator_1 = !this.element.classList.contains("e-step-type-default") && this.stepType.toLowerCase() === "indicator";
          if (isIndicator_1) {
            stepSpan.classList.add("e-icons", INDICATORICON);
          }
          if (!isIndicator_1 && item.isValid == null) {
            stepSpan.classList.add("e-step-content");
            stepSpan.innerHTML = (index + 1).toString();
          }
          this.stepperItemContainer.appendChild(stepSpan);
        } else if (isNullOrUndefined(this.template) || this.template === "") {
          var isRender = true;
          if ((item.iconCss || !item.iconCss && isItemText && isItemLabel) && (!isItemText && !isItemLabel || !this.element.classList.contains(LABELINDICATOR))) {
            if (item.iconCss) {
              var itemIcon = item.iconCss.trim().split(" ");
              (_a = stepSpan.classList).add.apply(_a, [ICONCSS2].concat(itemIcon));
              this.stepperItemContainer.classList.add(STEPICON);
            } else if (!item.iconCss && isItemText && isItemLabel) {
              stepSpan.classList.add(ICONCSS2);
              stepSpan.innerHTML = item.text;
              this.stepperItemContainer.classList.add(STEPICON);
            }
            this.stepperItemContainer.appendChild(stepSpan);
            if ((isHorizontal && (labelPositionLower === "start" || labelPositionLower === "end") && isItemLabel || isVertical && (labelPositionLower === "top" || labelPositionLower === "bottom") && isItemLabel) && !isIndicator) {
              this.element.classList.add("e-label-" + labelPositionLower);
              this.createTextLabelElement(item.label);
              isRender = false;
            }
          }
          if (isItemText && (!item.iconCss || !isIndicator) && isRender && !(item.iconCss && isItemLabel)) {
            if (!item.iconCss && isIndicator || (!item.iconCss || this.element.classList.contains(LABELINDICATOR)) && !isItemLabel) {
              if (!item.iconCss && !isItemLabel) {
                this.element.classList.add("e-step-type-indicator");
              }
              this.checkValidState(item, stepSpan);
              isItemLabel = false;
            } else {
              if (!isItemLabel) {
                this.createTextLabelElement(item.text);
              }
              if (isItemLabel && this.element.classList.contains(LABELINDICATOR)) {
                var textSpan = this.createElement("span", {
                  className: TEXT
                });
                textSpan.innerText = item.label;
              }
              isItemText = isItemLabel ? false : true;
            }
          }
          if (isItemLabel && isItemLabel && (!item.iconCss || !isIndicator) && isRender) {
            if (!item.iconCss && !isItemText && isIndicator) {
              this.checkValidState(item, stepSpan, true);
            } else if (!(this.element.classList.contains(LABELINDICATOR) && isItemText) || this.element.classList.contains(LABELINDICATOR) && isItemLabel) {
              this.createTextLabelElement(item.label, true);
              this.updateLabelPosition();
              if (!item.iconCss && !isItemText && !this.stepperItemContainer.classList.contains(STEPICON) || this.element.classList.contains(LABELINDICATOR)) {
                this.stepperItemContainer.classList.add("e-step-label-only");
                if (item.isValid !== null) {
                  var iconSpan = this.createElement("span", {
                    className: "e-step-validation-icon e-icons"
                  });
                  this.labelContainer.appendChild(iconSpan);
                }
              }
            }
          }
        }
        if (item.optional) {
          var optionalSpan = this.createElement("span", {
            className: OPTIONAL
          });
          this.l10n.setLocale(this.locale);
          var optionalContent = this.l10n.getConstant("optional");
          optionalSpan.innerText = optionalContent;
          if (isItemLabel && this.labelContainer && (this.element.classList.contains(LABELAFTER) && !this.stepperItemContainer.classList.contains("e-step-label-only") || isHorizontal && this.element.classList.contains(LABELBEFORE) && !this.stepperItemContainer.classList.contains("e-step-label-only")) || isVertical && this.element.classList.contains(LABELBEFORE)) {
            this.labelContainer.appendChild(optionalSpan);
          } else {
            this.stepperItemContainer.appendChild(optionalSpan);
          }
          if (item.isValid !== null) {
            this.stepperItemContainer.classList.add(item.isValid ? "e-step-valid" : "e-step-error");
          }
        }
        if (item.cssClass) {
          addClass([this.stepperItemContainer], item.cssClass.trim().split(" "));
        }
        if (item.disabled) {
          this.stepperItemContainer.classList[item.disabled ? "add" : "remove"](DISABLED9);
          attributes(this.stepperItemContainer, {
            "tabindex": "-1",
            "aria-disabled": "true"
          });
        }
        if (item.isValid !== null) {
          if (item.isValid) {
            this.stepperItemContainer.classList.add("e-step-valid");
          } else {
            this.stepperItemContainer.classList.add("e-step-error");
          }
        }
        this.renderItemContent(index, false);
        if (this.stepperItemContainer.classList.contains(INPROGRESS)) {
          attributes(this.stepperItemContainer, {
            "tabindex": "0",
            "aria-current": "true"
          });
        } else {
          attributes(this.stepperItemContainer, {
            "tabindex": "-1"
          });
        }
        this.wireItemsEvents(this.stepperItemContainer, index);
        this.stepperItemElements.push(this.stepperItemContainer);
        var eventArgs = {
          element: this.stepperItemContainer,
          index
        };
        this.trigger("beforeStepRender", eventArgs, function(args) {
          _this.stepperItemList.appendChild(args.element);
        });
        if (isVertical) {
          if (this.isAngular && this.template) {
            setTimeout(function() {
              _this.calculateProgressBarPosition();
            });
          } else {
            this.calculateProgressBarPosition();
          }
        }
      }
      if (isVertical) {
        if (this.element.classList.contains(LABELBEFORE)) {
          var listItems = this.stepperItemList.querySelectorAll("." + LABEL4);
          for (var i = 0; i < listItems.length; i++) {
            var labelEle = listItems[parseInt(i.toString(), 10)];
            labelEle.style.setProperty("--label-width", this.beforeLabelWidth + 5 + "px");
          }
        }
      }
    };
    Stepper2.prototype.createTextLabelElement = function(content, isLabelEle) {
      if (isLabelEle === void 0) {
        isLabelEle = false;
      }
      var spanEle = this.createElement("span", {
        className: isLabelEle ? LABEL4 : TEXTCSS + " " + TEXT
      });
      spanEle.innerText = content;
      if (isLabelEle) {
        this.labelContainer = this.createElement("span", {
          className: STEPLABEL
        });
        this.labelContainer.appendChild(spanEle);
      } else {
        this.stepperItemContainer.appendChild(spanEle);
      }
      this.stepperItemContainer.classList.add(isLabelEle ? STEPSLABEL : STEPTEXT);
    };
    Stepper2.prototype.calculateProgressBarPosition = function() {
      var isBeforeLabel = this.element.classList.contains(LABELBEFORE) ? true : false;
      var iconOnly = this.stepperItemContainer.classList.contains(STEPICON) && !this.stepperItemContainer.classList.contains(STEPTEXT) && !this.stepperItemContainer.classList.contains(STEPSLABEL);
      var textEle = this.stepperItemContainer.querySelector("." + TEXTCSS);
      if (textEle) {
        this.textEleWidth = this.textEleWidth < textEle.offsetWidth ? textEle.offsetWidth : this.textEleWidth;
      }
      if (isBeforeLabel) {
        var labelWidth = this.stepperItemContainer.querySelector("." + LABEL4).offsetWidth + 15;
        this.beforeLabelWidth = Math.max(this.beforeLabelWidth, labelWidth);
        var iconEle = this.element.querySelector("ol").lastChild.querySelector("." + ICONCSS2);
        var textEle_1 = this.stepperItemContainer.querySelector("." + TEXTCSS);
        if (iconEle || textEle_1) {
          var itemWidth = this.beforeLabelWidth + (this.stepperItemContainer.querySelector("." + ICONCSS2) || textEle_1).offsetWidth / 2;
          this.progressBarPosition = Math.max(this.progressBarPosition, itemWidth);
        } else {
          this.progressBarPosition = Math.max(this.progressBarPosition, this.beforeLabelWidth / 2);
        }
      } else {
        var lastChild = this.element.querySelector("ol").lastChild;
        var lastChildWidth = iconOnly ? this.stepperItemContainer.offsetWidth : lastChild.firstChild.offsetWidth;
        this.progressBarPosition = Math.max(this.progressBarPosition, lastChildWidth);
      }
    };
    Stepper2.prototype.checkValidState = function(item, stepSpan, isLabel) {
      if (item.isValid == null) {
        stepSpan.classList.add("e-step-content");
        if (isLabel) {
          stepSpan.innerHTML = item.label;
        } else {
          stepSpan.innerHTML = item.label ? item.label : item.text;
        }
        this.stepperItemContainer.appendChild(stepSpan);
      } else {
        stepSpan.classList.add(ICONCSS2);
        this.stepperItemContainer.appendChild(stepSpan);
        this.stepperItemContainer.classList.add(STEPICON);
      }
    };
    Stepper2.prototype.updateCurrentLabel = function() {
      var labelPos = this.labelPosition.toLowerCase();
      var currentLabelPos = this.element.classList.contains(HORIZSTEP2) ? labelPos === "top" ? "before" : labelPos === "bottom" ? "after" : labelPos : labelPos === "start" ? "before" : labelPos === "end" ? "after" : labelPos;
      return currentLabelPos;
    };
    Stepper2.prototype.updateLabelPosition = function() {
      this.clearLabelPosition();
      this.labelContainer.classList.add("e-label-" + this.updateCurrentLabel());
      if (this.labelPosition.toLowerCase() === "start" && this.orientation.toLowerCase() === "vertical") {
        if (this.stepperItemContainer.firstChild) {
          this.stepperItemContainer.firstChild.before(this.labelContainer);
        } else {
          this.stepperItemContainer.appendChild(this.labelContainer);
        }
      } else {
        this.stepperItemContainer.appendChild(this.labelContainer);
      }
      this.element.classList.add("e-label-" + this.updateCurrentLabel());
    };
    Stepper2.prototype.clearLabelPosition = function() {
      var removeCss = this.labelContainer.classList.value.match(/(e-label-[after|before]+)/g);
      if (removeCss) {
        removeClass([this.labelContainer], removeCss);
        removeClass([this.element], removeCss);
      }
    };
    Stepper2.prototype.checkValidStep = function() {
      var isStepIndicator = this.element.classList.contains(STEPINDICATOR);
      var _loop_1 = function(index2) {
        var item = this_1.steps[parseInt(index2.toString(), 10)];
        var itemElement = this_1.stepperItemElements[parseInt(index2.toString(), 10)];
        if (item.isValid !== null) {
          var indicatorEle = void 0;
          var iconEle_1;
          if (isStepIndicator && !item.iconCss) {
            indicatorEle = itemElement.querySelector("." + ICONCSS2);
          } else {
            iconEle_1 = itemElement.querySelector("." + ICONCSS2);
          }
          if (!indicatorEle && isStepIndicator && this_1.renderDefault(index2)) {
            indicatorEle = itemElement.querySelector("." + INDICATORICON);
          }
          var textLabelIcon = itemElement.querySelector(".e-step-validation-icon");
          var itemIcon = item.iconCss.trim().split(" ");
          var validStep = itemElement.classList.contains("e-step-valid");
          var validIconClass = validStep ? "e-check" : "e-circle-info";
          if (indicatorEle) {
            indicatorEle.classList.remove(INDICATORICON);
            if (indicatorEle.innerHTML !== "") {
              indicatorEle.innerHTML = "";
            }
            indicatorEle.classList.add("e-icons", validIconClass, ICONCSS2);
          }
          if (this_1.renderDefault(index2) && !isStepIndicator) {
            var stepSpan = itemElement.querySelector(".e-step");
            stepSpan.classList.add("e-icons", validIconClass, ICONCSS2);
          }
          if (iconEle_1) {
            if (iconEle_1.innerHTML !== "") {
              iconEle_1.innerHTML = "";
            } else if (itemIcon.length > 0) {
              itemIcon.forEach(function(icon) {
                iconEle_1.classList.remove(icon);
              });
            }
            iconEle_1.classList.add("e-icons", validIconClass);
          }
          if (textLabelIcon) {
            textLabelIcon.classList.add(validStep ? "e-circle-check" : "e-circle-info");
            if (this_1.element.classList.contains(VERTICALSTEP2)) {
              var labelEle = itemElement.querySelector("." + LABEL4);
              var textEle = itemElement.querySelector("." + TEXT);
              var itemWidth = textEle ? textEle.offsetWidth + textEle.getBoundingClientRect().left : labelEle.offsetWidth + labelEle.getBoundingClientRect().left;
              var validationIcon = itemElement.querySelector(".e-step-validation-icon");
              validationIcon.style.setProperty("--icon-position", itemWidth + 20 + "px");
            }
          }
        }
      };
      var this_1 = this;
      for (var index = 0; index < this.steps.length; index++) {
        _loop_1(index);
      }
    };
    Stepper2.prototype.updateTooltip = function() {
      if (this.showTooltip) {
        this.tooltipObj = new Tooltip({
          target: ".e-step-container",
          windowCollision: true,
          opensOn: "Custom",
          cssClass: this.cssClass ? STEPPERTOOLTIP + " " + this.cssClass : STEPPERTOOLTIP,
          position: "TopCenter"
        });
        this.tooltipObj.appendTo(this.stepperItemList);
      } else {
        if (!isNullOrUndefined(this.tooltipObj)) {
          this.tooltipObj.destroy();
          this.tooltipObj = null;
        }
      }
    };
    Stepper2.prototype.wireItemsEvents = function(itemElement, index) {
      EventHandler.add(itemElement, "click", this.linearModeHandler.bind(this, itemElement, index), this);
      EventHandler.add(itemElement, "mouseover", this.openStepperTooltip.bind(this, index), this);
      EventHandler.add(itemElement, "mouseleave", this.closeStepperTooltip, this);
    };
    Stepper2.prototype.unWireItemsEvents = function() {
      for (var index = 0; index < this.steps.length; index++) {
        var itemElement = this.stepperItemElements[parseInt(index.toString(), 10)];
        EventHandler.remove(itemElement, "click", this.linearModeHandler.bind(this, itemElement, index));
        EventHandler.remove(itemElement, "mouseover", this.openStepperTooltip.bind(this, index));
        EventHandler.remove(itemElement, "mouseleave", this.closeStepperTooltip);
      }
    };
    Stepper2.prototype.linearModeHandler = function(itemElement, index, e) {
      if (this.linear) {
        var linearModeValue = index - this.activeStep;
        if (Math.abs(linearModeValue) === 1) {
          this.stepClickHandler(index, e, itemElement);
        }
      } else {
        this.stepClickHandler(index, e, itemElement);
      }
    };
    Stepper2.prototype.openStepperTooltip = function(index) {
      var currentStep = this.steps[parseInt(index.toString(), 10)];
      if (this.showTooltip && (currentStep.label || currentStep.text)) {
        if (!this.tooltipOpen) {
          this.updateTooltipContent(index);
          this.tooltipObj.open(this.stepperItemElements[parseInt(index.toString(), 10)]);
          if (this.stepType.toLocaleLowerCase() !== "label" && (this.stepType.toLocaleLowerCase() === "indicator" || currentStep.label !== "" && currentStep.iconCss !== "" || currentStep.label === null && currentStep.iconCss === "" && currentStep.text !== "")) {
            var tooltipPopupClass = currentStep.status.toLowerCase() === "inprogress" ? STEPPERTOOLTIP + " " + STEPPERIPROGRESSTIP + " " + (this.cssClass ? this.cssClass : "") : STEPPERTOOLTIP + " " + (this.cssClass ? this.cssClass : "");
            this.tooltipObj.setProperties({
              cssClass: tooltipPopupClass.trim()
            });
          }
          this.tooltipOpen = true;
        }
      }
    };
    Stepper2.prototype.closeStepperTooltip = function() {
      if (this.tooltipOpen) {
        this.tooltipObj.close();
        this.tooltipOpen = false;
      }
    };
    Stepper2.prototype.updateTooltipContent = function(index) {
      if (this.showTooltip) {
        if (this.isReact) {
          this.clearTemplate(["stepperTooltipTemplate"]);
        }
        var content = void 0;
        var currentStep = this.steps[parseInt(index.toString(), 10)];
        if (this.tooltipTemplate) {
          content = this.createElement("span", {
            className: "e-stepper-tooltip-content"
          });
          var templateFunction = this.getTemplateFunction(this.tooltipTemplate);
          append(templateFunction({
            value: currentStep
          }, this, "stepperTooltipTemplate", this.element.id + "tooltipTemplate", this.isStringTemplate), content);
          this.tooltipObj.setProperties({
            content
          }, true);
        } else {
          var content_1 = currentStep.label ? currentStep.label : currentStep.text;
          this.tooltipObj.setProperties({
            content: initializeCSPTemplate(function() {
              return content_1;
            })
          }, true);
        }
        this.renderReactTemplates();
      }
    };
    Stepper2.prototype.stepClickHandler = function(index, e, itemElement) {
      var clickEventArgs = {
        element: itemElement,
        event: e,
        previousStep: this.activeStep,
        activeStep: index
      };
      this.trigger("stepClick", clickEventArgs);
      this.navigateToStep(index, e, itemElement, true);
    };
    Stepper2.prototype.updateTemplateFunction = function() {
      this.templateFunction = this.template ? this.getTemplateFunction(this.template) : null;
    };
    Stepper2.prototype.renderItemContent = function(index, isrerender) {
      var listItems = this.stepperItemList.querySelectorAll("li");
      if (isrerender) {
        this.removeItemContent(listItems[parseInt(index.toString(), 10)]);
      }
      if (this.template) {
        if (isrerender) {
          listItems[parseInt(index.toString(), 10)].classList.add(TEMPLATE);
        } else {
          this.stepperItemContainer.classList.add(TEMPLATE);
        }
        var item = this.steps[parseInt(index.toString(), 10)];
        append(this.templateFunction({
          step: item,
          currentStep: index
        }, this, "stepperTemplate", this.element.id + "_stepperTemplate", this.isStringTemplate), isrerender ? listItems[parseInt(index.toString(), 10)] : this.stepperItemContainer);
      }
      this.renderReactTemplates();
    };
    Stepper2.prototype.removeItemContent = function(ele) {
      ele.classList.remove(TEMPLATE);
      var firstChild = ele.firstElementChild;
      for (var i = 0; i < ele.childElementCount; i++) {
        firstChild.remove();
      }
    };
    Stepper2.prototype.updateContent = function() {
      if (this.isReact) {
        this.clearTemplate(["stepperTemplate"]);
      }
      for (var i = 0; i < this.steps.length; i++) {
        this.renderItemContent(i, true);
      }
    };
    Stepper2.prototype.getTemplateFunction = function(template) {
      if (typeof template === "string") {
        var content = "";
        try {
          var tempEle = select(template);
          if (tempEle) {
            content = tempEle.tagName === "SCRIPT" ? tempEle.innerHTML : tempEle.outerHTML;
          } else {
            content = template;
          }
        } catch (e) {
          content = template;
        }
        return compile(content);
      } else {
        return compile(template);
      }
    };
    Stepper2.prototype.navigateToStep = function(index, e, itemElement, isInteracted, isUpdated) {
      var _this = this;
      var eventArgs = {
        element: itemElement,
        event: e,
        isInteracted,
        previousStep: this.activeStep,
        activeStep: index,
        cancel: false
      };
      if (isUpdated !== false) {
        var previousStep_1 = this.activeStep;
        this.trigger("stepChanging", eventArgs, function(args) {
          if (args.cancel) {
            return;
          }
          _this.navigationHandler(index);
          var eventArgs2 = {
            element: itemElement,
            event: e,
            isInteracted,
            previousStep: previousStep_1,
            activeStep: _this.activeStep
          };
          _this.trigger("stepChanged", eventArgs2);
        });
      } else {
        this.navigationHandler(index);
      }
    };
    Stepper2.prototype.navigationHandler = function(index, stepStatus, isUpdated) {
      index = Math.min(index, this.steps.length - 1);
      var Itemslength = this.stepperItemElements.length;
      if (index >= 0 && index < Itemslength - 1) {
        index = this.stepperItemElements[parseInt(index.toString(), 10)].classList.contains(DISABLED9) ? this.activeStep : index;
      }
      var prevOnChange = this.isProtectedOnChange;
      this.isProtectedOnChange = true;
      this.activeStep = parseInt(index.toString(), 10);
      this.isProtectedOnChange = prevOnChange;
      for (var i = 0; i < this.steps.length; i++) {
        var itemElement = this.stepperItemElements[parseInt(i.toString(), 10)];
        var item = this.steps[parseInt(i.toString(), 10)];
        itemElement.classList.remove(SELECTED4, INPROGRESS, COMPLETED, NOTSTARTED);
        if (i === this.activeStep) {
          itemElement.classList.add(SELECTED4);
        }
        if (this.activeStep >= 0 && this.progressbar) {
          if (this.element.classList.contains(HORIZSTEP2)) {
            this.calculateProgressbarPos();
          } else {
            this.progressbar.style.setProperty(PROGRESSVALUE2, 100 / (this.steps.length - 1) * index + "%");
          }
        } else if (this.activeStep < 0 && this.progressbar) {
          this.progressbar.style.setProperty(PROGRESSVALUE2, "0%");
        }
        if (i === this.activeStep) {
          itemElement.classList.add(INPROGRESS);
        } else if (this.activeStep > 0 && i < this.activeStep) {
          itemElement.classList.add(COMPLETED);
        } else {
          itemElement.classList.add(NOTSTARTED);
        }
        if (itemElement.classList.contains(INPROGRESS)) {
          attributes(itemElement, {
            "tabindex": "0",
            "aria-current": "true"
          });
        } else {
          attributes(itemElement, {
            "tabindex": "-1",
            "aria-current": "false"
          });
        }
        var prevOnChange_1 = this.isProtectedOnChange;
        this.isProtectedOnChange = true;
        if (isUpdated !== false) {
          if (i < this.activeStep || this.steps.length - 1 === this.activeStep && item.status.toLowerCase() === "completed") {
            item.status = StepStatus.Completed;
          } else if (i === this.activeStep) {
            item.status = StepStatus.InProgress;
          } else if (i > this.activeStep) {
            item.status = StepStatus.NotStarted;
          }
          if (stepStatus && this.activeStep === i) {
            item.status = stepStatus;
          }
          if (item.status.toLowerCase() === "completed") {
            itemElement.classList.remove(SELECTED4, INPROGRESS, NOTSTARTED);
            itemElement.classList.add(COMPLETED);
          }
          if (item.status.toLowerCase() === "notstarted") {
            itemElement.classList.remove(SELECTED4, INPROGRESS, COMPLETED);
            itemElement.classList.add(NOTSTARTED);
          }
        }
        this.isProtectedOnChange = prevOnChange_1;
        this.updateIndicatorStatus(i, itemElement);
      }
      this.updateStepInteractions();
    };
    Stepper2.prototype.calculateProgressbarPos = function() {
      var _this = this;
      if ((this.element.classList.contains(LABELBEFORE) || this.element.classList.contains(LABELAFTER)) && !this.element.classList.contains(STEPINDICATOR) && this.stepperItemElements[parseInt(this.activeStep.toString(), 10)].classList.contains(STEPICON)) {
        var progressPos = this.element.querySelector(".e-stepper-progressbar");
        var selectedEle = this.stepperItemElements[parseInt(this.activeStep.toString(), 10)].firstChild;
        var value = this.activeStep === 0 ? 0 : (selectedEle.offsetLeft - progressPos.offsetLeft + selectedEle.offsetWidth / 2) / progressPos.offsetWidth * 100;
        if (this.element.classList.contains(RTL14)) {
          value = (progressPos.getBoundingClientRect().right - selectedEle.getBoundingClientRect().right + selectedEle.offsetWidth / 2) / progressPos.offsetWidth * 100;
          this.progressbar.style.setProperty(PROGRESSVALUE2, value + "%");
        } else {
          this.progressbar.style.setProperty(PROGRESSVALUE2, value + "%");
        }
      } else {
        var totalLiWidth_1 = 0;
        var activeLiWidth_1 = 0;
        this.stepperItemElements.forEach(function(element2, index) {
          var itemWidth = element2.offsetWidth;
          totalLiWidth_1 += itemWidth;
          if (index <= _this.activeStep) {
            activeLiWidth_1 += index === _this.activeStep && index !== 0 ? itemWidth / 2 : itemWidth;
          }
        });
        var spaceWidth = (this.stepperItemList.offsetWidth - totalLiWidth_1) / (this.stepperItemElements.length - 1);
        var progressValue = (activeLiWidth_1 + spaceWidth * this.activeStep) / this.stepperItemList.offsetWidth * 100;
        this.progressbar.style.setProperty(PROGRESSVALUE2, progressValue + "%");
      }
    };
    Stepper2.prototype.updateIndicatorStatus = function(index, itemElement) {
      if (this.renderDefault(index) && this.element.classList.contains(STEPINDICATOR) && !itemElement.classList.contains("e-step-valid") && !itemElement.classList.contains("e-step-error")) {
        if (itemElement.classList.contains(COMPLETED)) {
          itemElement.firstChild.classList.remove("e-icons", "e-step-indicator");
          itemElement.firstChild.classList.add(ICONCSS2, "e-icons", "e-check");
        } else if (itemElement.classList.contains(INPROGRESS) || itemElement.classList.contains(NOTSTARTED)) {
          itemElement.firstChild.classList.remove(ICONCSS2, "e-icons", "e-check");
          itemElement.firstChild.classList.add("e-icons", "e-step-indicator");
        }
      }
    };
    Stepper2.prototype.updateStepInteractions = function() {
      var _this = this;
      this.element.classList.toggle(LINEARSTEP, this.linear);
      this.stepperItemElements.forEach(function(step, index) {
        step.classList.toggle(PREVSTEP, index === _this.activeStep - 1);
        step.classList.toggle(NEXTSTEP, index === _this.activeStep + 1);
      });
    };
    Stepper2.prototype.removeItemElements = function() {
      for (var i = 0; i < this.stepperItemElements.length; i++) {
        remove(this.stepperItemElements[parseInt(i.toString(), 10)]);
      }
      this.stepperItemElements = [];
    };
    Stepper2.prototype.nextStep = function() {
      if (this.activeStep !== this.steps.length - 1) {
        this.navigateToStep(this.activeStep + 1, null, null, false);
      }
    };
    Stepper2.prototype.previousStep = function() {
      if (this.activeStep > 0) {
        this.navigateToStep(this.activeStep - 1, null, null, false);
      }
    };
    Stepper2.prototype.reset = function() {
      if (this.activeStep === 0) {
        this.updateStepInteractions();
      } else {
        var isDisabled = this.stepperItemElements[0].classList.contains(DISABLED9) ? true : false;
        this.navigateToStep(isDisabled ? -1 : 0, null, null, false);
      }
    };
    Stepper2.prototype.refreshProgressbar = function() {
      if (this.stepperItemList && this.progressbar) {
        this.setProgressPosition(this.element);
      }
      this.navigateToStep(this.activeStep, null, null, false, false);
    };
    Stepper2.prototype.updateElementClassArray = function() {
      var classArray = [RTL14, READONLY2, "e-steps-focus", LABELAFTER, LABELBEFORE, "e-label-top", "e-label-bottom", "e-label-start", "e-label-end", STEPINDICATOR, LABELINDICATOR, VERTICALSTEP2, HORIZSTEP2, LINEARSTEP];
      removeClass([this.element], classArray);
    };
    Stepper2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.unWireEvents();
      this.unWireItemsEvents();
      this.removeItemElements();
      this.clearTemplate();
      if (this.stepperItemList) {
        remove(this.stepperItemList);
      }
      this.stepperItemList = null;
      if (this.progressStep) {
        remove(this.progressStep);
      }
      this.progressStep = null;
      this.progressbar = null;
      this.progressBarPosition = null;
      this.stepperItemContainer = null;
      this.textContainer = null;
      this.labelContainer = null;
      this.updateElementClassArray();
      this.element.removeAttribute("aria-label");
      if (this.showTooltip) {
        this.tooltipObj.destroy();
        this.tooltipObj = null;
      }
      if (this.keyboardModuleStepper) {
        this.keyboardModuleStepper.destroy();
      }
      this.keyboardModuleStepper = null;
    };
    Stepper2.prototype.wireKeyboardEvent = function() {
      this.keyboardModuleStepper = new KeyboardEvents(this.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
    };
    Stepper2.prototype.keyActionHandler = function(e) {
      if (this.readOnly) {
        return;
      }
      switch (e.action) {
        case "uparrow":
        case "downarrow":
        case "leftarrow":
        case "rightarrow":
        case "tab":
        case "shiftTab":
          this.handleNavigation(this.enableRtl && this.element.classList.contains(HORIZSTEP2) ? e.action === "leftarrow" || e.action === "tab" || e.action === "uparrow" : e.action === "rightarrow" || e.action === "tab" || e.action === "downarrow", e);
          break;
        case "space":
        case "enter":
        case "escape":
          this.handleNavigation(null, e);
          break;
        case "home":
        case "end":
          this.handleNavigation(null, e, this.enableRtl);
          break;
      }
    };
    Stepper2.prototype.handleNavigation = function(isNextStep, e, isRTL) {
      this.isKeyNavFocus = true;
      this.element.classList.add("e-steps-focus");
      var focusedEle = this.element.querySelector("." + FOCUS2);
      if (!focusedEle) {
        focusedEle = this.element.querySelector("." + SELECTED4);
      }
      var stepItems = Array.prototype.slice.call(this.stepperItemList.children);
      var index = stepItems.indexOf(focusedEle);
      if (e.action === "tab" || e.action === "shiftTab" || e.action === "downarrow" || e.action === "uparrow" || e.action === "space" || e.action === "home" || e.action === "end") {
        if (e.action === "tab" && index === stepItems.length - 1 || e.action === "shiftTab" && index === 0) {
          if (focusedEle.classList.contains(FOCUS2)) {
            this.updateStepFocus();
            return;
          }
        } else {
          e.preventDefault();
        }
      }
      if (e.action === "escape") {
        stepItems[parseInt(index.toString(), 10)].classList.remove(FOCUS2);
        this.element.classList.remove("e-steps-focus");
      }
      if (!(e.action === "space" || e.action === "enter")) {
        var prevIndex = index;
        index = isNextStep ? index + 1 : index - 1;
        while (index >= 0 && index < stepItems.length && stepItems[parseInt(index.toString(), 10)].classList.contains(DISABLED9)) {
          index = isNextStep ? index + 1 : index - 1;
        }
        index = index < 0 ? 0 : index > stepItems.length - 1 ? stepItems.length - 1 : index;
        if (stepItems[parseInt(prevIndex.toString(), 10)].classList.contains(FOCUS2)) {
          stepItems[parseInt(prevIndex.toString(), 10)].classList.remove(FOCUS2);
        }
        if (e.action === "home" || e.action === "end") {
          if (e.action === "home") {
            index = isRTL ? stepItems.length - 1 : 0;
          } else {
            index = isRTL ? 0 : stepItems.length - 1;
          }
        }
        if (index >= 0 && index < stepItems.length) {
          stepItems[parseInt(index.toString(), 10)].classList.add(FOCUS2);
        }
      } else if (e.action === "space" || e.action === "enter") {
        var isupdateFocus = false;
        if (this.linear) {
          var linearModeValue = this.activeStep - index;
          if (Math.abs(linearModeValue) === 1) {
            this.navigateToStep(index, null, null, true);
            isupdateFocus = true;
          }
        } else {
          this.navigateToStep(index, null, null, true);
          isupdateFocus = true;
        }
        if (isupdateFocus) {
          this.updateStepFocus();
          this.stepperItemElements[index].focus();
        }
      }
    };
    Stepper2.prototype.renderStepperItems = function(isUpdate, isStepType) {
      this.updateElementClassArray();
      this.removeItemElements();
      this.element.querySelector(".e-stepper-progressbar").remove();
      if (isUpdate) {
        this.updatePosition();
      }
      if (isStepType) {
        this.updateStepType();
      }
      if (this.readOnly && !this.element.classList.contains(READONLY2)) {
        this.element.classList.add(READONLY2);
      }
      if (this.enableRtl && !this.element.classList.contains(RTL14)) {
        this.element.classList.add(RTL14);
      }
      this.updateOrientaion(this.element);
      this.renderItems();
      this.renderProgressBar(this.element);
      this.checkValidStep();
      this.updateAnimation();
      this.navigateToStep(this.activeStep, null, this.stepperItemElements[this.activeStep], true);
    };
    Stepper2.prototype.updateDynamicSteps = function(steps, prevSteps) {
      if (!(steps instanceof Array && prevSteps instanceof Array)) {
        var stepCounts = Object.keys(steps);
        for (var i = 0; i < stepCounts.length; i++) {
          var index = parseInt(Object.keys(steps)[i], 10);
          var changedPropsCount = Object.keys(steps[index]).length;
          for (var j = 0; j < changedPropsCount; j++) {
            var property = Object.keys(steps[index])[j];
            if (property === "status") {
              if (this.activeStep === index) {
                this.navigationHandler(index, steps[index].status);
              } else {
                this.steps[index].status = prevSteps[index].status;
              }
            } else {
              this.removeItemElements();
              this.renderItems();
              this.updateStepperStatus();
            }
            if (property === "label" && (this.steps[index].iconCss || this.steps[index].text) && this.stepType.toLowerCase() === "default") {
              this.refreshProgressbar();
            }
            this.updateStepInteractions();
            this.checkValidStep();
          }
        }
      } else {
        this.renderStepperItems(true, true);
      }
    };
    Stepper2.prototype.updateDynamicActiveStep = function(activeStep, preActiveStep) {
      this.activeStep = activeStep > this.steps.length - 1 || activeStep < -1 ? preActiveStep : this.activeStep;
      if (this.activeStep >= 0 && this.stepperItemElements[parseInt(this.activeStep.toString(), 10)].classList.contains(DISABLED9)) {
        this.activeStep = preActiveStep;
      }
      if (this.linear) {
        var linearModeValue = preActiveStep - this.activeStep;
        if (Math.abs(linearModeValue) === 1) {
          this.navigateToStep(this.activeStep, null, null, true);
        }
      } else {
        this.navigateToStep(this.activeStep, null, this.stepperItemElements[this.activeStep], true);
      }
    };
    Stepper2.prototype.updateDynamicCssClass = function(cssClass2, prevCssClass) {
      if (prevCssClass) {
        removeClass([this.element], prevCssClass.trim().split(" "));
      }
      if (cssClass2) {
        addClass([this.element], cssClass2.trim().split(" "));
      }
      if (this.tooltipObj) {
        this.tooltipObj.setProperties({
          cssClass: this.cssClass ? STEPPERTOOLTIP + " " + this.cssClass : STEPPERTOOLTIP
        });
      }
    };
    Stepper2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "steps": {
            this.updateDynamicSteps(newProp.steps, oldProp.steps);
            break;
          }
          case "orientation":
            this.updateOrientaion(this.element);
            this.renderStepperItems(true);
            break;
          case "activeStep":
            this.updateDynamicActiveStep(newProp.activeStep, oldProp.activeStep);
            break;
          case "enableRtl":
            this.element.classList[this.enableRtl ? "add" : "remove"](RTL14);
            break;
          case "readOnly":
            this.element.classList[this.readOnly ? "add" : "remove"](READONLY2);
            break;
          case "cssClass":
            this.updateDynamicCssClass(newProp.cssClass, oldProp.cssClass);
            break;
          case "labelPosition":
            this.renderStepperItems(true);
            break;
          case "showTooltip":
            this.updateTooltip();
            break;
          case "stepType":
            this.renderStepperItems(true, true);
            break;
          case "template":
            this.updateTemplateFunction();
            this.updateContent();
            break;
          case "animation":
            this.updateAnimation();
            break;
          case "linear":
            this.updateStepInteractions();
            break;
        }
      }
    };
    __decorate45([Property(0)], Stepper2.prototype, "activeStep", void 0);
    __decorate45([Complex({}, StepperAnimationSettings)], Stepper2.prototype, "animation", void 0);
    __decorate45([Property(false)], Stepper2.prototype, "linear", void 0);
    __decorate45([Property(false)], Stepper2.prototype, "showTooltip", void 0);
    __decorate45([Property("")], Stepper2.prototype, "template", void 0);
    __decorate45([Property("")], Stepper2.prototype, "tooltipTemplate", void 0);
    __decorate45([Property(StepLabelPosition.Bottom)], Stepper2.prototype, "labelPosition", void 0);
    __decorate45([Property(StepType.Default)], Stepper2.prototype, "stepType", void 0);
    __decorate45([Event()], Stepper2.prototype, "stepChanged", void 0);
    __decorate45([Event()], Stepper2.prototype, "stepChanging", void 0);
    __decorate45([Event()], Stepper2.prototype, "stepClick", void 0);
    __decorate45([Event()], Stepper2.prototype, "beforeStepRender", void 0);
    Stepper2 = __decorate45([NotifyPropertyChanges], Stepper2);
    return Stepper2;
  }(StepperBase)
);

// node_modules/@syncfusion/ej2-calendars/src/calendar/calendar.js
var __extends48 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate46 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var OTHERMONTH = "e-other-month";
var OTHERDECADE = "e-other-year";
var ROOT7 = "e-calendar";
var DEVICE3 = "e-device";
var HEADER2 = "e-header";
var RTL15 = "e-rtl";
var CONTENT2 = "e-content";
var CONTENTTABLE = "e-calendar-content-table";
var YEAR = "e-year";
var MONTH = "e-month";
var DECADE = "e-decade";
var ICON4 = "e-icons";
var PREVICON = "e-prev";
var NEXTICON = "e-next";
var PREVSPAN = "e-date-icon-prev";
var NEXTSPAN = "e-date-icon-next ";
var ICONCONTAINER = "e-icon-container";
var DISABLED10 = "e-disabled";
var OVERLAY = "e-overlay";
var WEEKEND = "e-weekend";
var WEEKNUMBER = "e-week-number";
var SELECTED5 = "e-selected";
var FOCUSEDDATE = "e-focused-date";
var FOCUSEDCELL = "e-focused-cell";
var OTHERMONTHROW = "e-month-hide";
var TODAY = "e-today";
var TITLE = "e-title";
var LINK = "e-day";
var CELL = "e-cell";
var WEEKHEADER = "e-week-header";
var ZOOMIN = "e-zoomin";
var FOOTER = "e-footer-container";
var BTN = "e-btn";
var FLAT = "e-flat";
var CSS = "e-css";
var PRIMARY = "e-primary";
var DAYHEADERLONG = "e-calendar-day-header-lg";
var dayMilliSeconds = 864e5;
var minutesMilliSeconds = 6e4;
var CalendarBase = (
  /** @class */
  function(_super) {
    __extends48(CalendarBase2, _super);
    function CalendarBase2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.effect = "";
      _this.isPopupClicked = false;
      _this.isDateSelected = true;
      _this.isTodayClicked = false;
      _this.preventChange = false;
      _this.previousDates = false;
      return _this;
    }
    CalendarBase2.prototype.render = function() {
      this.rangeValidation(this.min, this.max);
      this.calendarEleCopy = this.element.cloneNode(true);
      if (this.calendarMode === "Islamic") {
        if (+this.min.setSeconds(0) === +new Date(1900, 0, 1, 0, 0, 0)) {
          this.min = new Date(1944, 2, 18);
        }
        if (+this.max === +new Date(2099, 11, 31)) {
          this.max = new Date(2069, 10, 16);
        }
      }
      this.globalize = new Internationalization(this.locale);
      if (isNullOrUndefined(this.firstDayOfWeek) || this.firstDayOfWeek > 6 || this.firstDayOfWeek < 0) {
        this.setProperties({
          firstDayOfWeek: this.globalize.getFirstDayOfWeek()
        }, true);
      }
      this.todayDisabled = false;
      this.todayDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
      if (this.getModuleName() === "calendar") {
        this.element.classList.add(ROOT7);
        if (this.enableRtl) {
          this.element.classList.add(RTL15);
        }
        if (Browser.isDevice) {
          this.element.classList.add(DEVICE3);
        }
        attributes(this.element, {
          "data-role": "calendar"
        });
        this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : "0";
        this.element.setAttribute("tabindex", this.tabIndex);
      } else {
        this.calendarElement = this.createElement("div");
        this.calendarElement.classList.add(ROOT7);
        if (this.enableRtl) {
          this.calendarElement.classList.add(RTL15);
        }
        if (Browser.isDevice) {
          this.calendarElement.classList.add(DEVICE3);
        }
        attributes(this.calendarElement, {
          "data-role": "calendar"
        });
      }
      if (!isNullOrUndefined(closest(this.element, "fieldset")) && closest(this.element, "fieldset").disabled) {
        this.enabled = false;
      }
      this.createHeader();
      this.createContent();
      this.wireEvents();
    };
    CalendarBase2.prototype.rangeValidation = function(min, max) {
      if (isNullOrUndefined(min)) {
        this.setProperties({
          min: new Date(1900, 0, 1)
        }, true);
      }
      if (isNullOrUndefined(max)) {
        this.setProperties({
          max: new Date(2099, 11, 31)
        }, true);
      }
    };
    CalendarBase2.prototype.getDefaultKeyConfig = function() {
      this.defaultKeyConfigs = {
        controlUp: "ctrl+38",
        controlDown: "ctrl+40",
        moveDown: "downarrow",
        moveUp: "uparrow",
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        select: "enter",
        home: "home",
        end: "end",
        pageUp: "pageup",
        pageDown: "pagedown",
        shiftPageUp: "shift+pageup",
        shiftPageDown: "shift+pagedown",
        controlHome: "ctrl+home",
        controlEnd: "ctrl+end",
        altUpArrow: "alt+uparrow",
        spacebar: "space",
        altRightArrow: "alt+rightarrow",
        altLeftArrow: "alt+leftarrow"
      };
      return this.defaultKeyConfigs;
    };
    CalendarBase2.prototype.validateDate = function(value) {
      this.setProperties({
        min: this.checkDateValue(new Date(this.checkValue(this.min)))
      }, true);
      this.setProperties({
        max: this.checkDateValue(new Date(this.checkValue(this.max)))
      }, true);
      this.currentDate = this.currentDate ? this.currentDate : new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
      if (!isNullOrUndefined(value) && this.min <= this.max && value >= this.min && value <= this.max) {
        this.currentDate = new Date(this.checkValue(value));
      }
    };
    CalendarBase2.prototype.setOverlayIndex = function(popupWrapper, popupElement, modal, isDevice) {
      if (isDevice && !isNullOrUndefined(popupElement) && !isNullOrUndefined(modal) && !isNullOrUndefined(popupWrapper)) {
        var index = parseInt(popupElement.style.zIndex, 10) ? parseInt(popupElement.style.zIndex, 10) : 1e3;
        modal.style.zIndex = (index - 1).toString();
        popupWrapper.style.zIndex = index.toString();
      }
    };
    CalendarBase2.prototype.minMaxUpdate = function(value) {
      if (!(+this.min <= +this.max)) {
        this.setProperties({
          min: this.min
        }, true);
        addClass([this.element], OVERLAY);
      } else {
        removeClass([this.element], OVERLAY);
      }
      this.min = isNullOrUndefined(this.min) || !+this.min ? this.min = new Date(1900, 0, 1) : this.min;
      this.max = isNullOrUndefined(this.max) || !+this.max ? this.max = new Date(2099, 11, 31) : this.max;
      if (+this.min <= +this.max && value && +value <= +this.max && +value >= +this.min) {
        this.currentDate = new Date(this.checkValue(value));
      } else {
        if (+this.min <= +this.max && !value && +this.currentDate > +this.max) {
          this.currentDate = new Date(this.checkValue(this.max));
        } else {
          if (+this.currentDate < +this.min) {
            this.currentDate = new Date(this.checkValue(this.min));
          }
        }
      }
    };
    CalendarBase2.prototype.createHeader = function() {
      var ariaPrevAttrs = {
        "aria-disabled": "false",
        "aria-label": "previous month"
      };
      var ariaNextAttrs = {
        "aria-disabled": "false",
        "aria-label": "next month"
      };
      var ariaTitleAttrs = {
        "aria-atomic": "true",
        "aria-live": "assertive"
      };
      var tabIndexAttr = {
        "tabindex": "0"
      };
      this.headerElement = this.createElement("div", {
        className: HEADER2
      });
      var iconContainer = this.createElement("div", {
        className: ICONCONTAINER
      });
      this.previousIcon = this.createElement("button", {
        className: "" + PREVICON,
        attrs: {
          type: "button"
        }
      });
      rippleEffect(this.previousIcon, {
        duration: 400,
        selector: ".e-prev",
        isCenterRipple: true
      });
      attributes(this.previousIcon, ariaPrevAttrs);
      attributes(this.previousIcon, tabIndexAttr);
      this.nextIcon = this.createElement("button", {
        className: "" + NEXTICON,
        attrs: {
          type: "button"
        }
      });
      rippleEffect(this.nextIcon, {
        selector: ".e-next",
        duration: 400,
        isCenterRipple: true
      });
      if (this.getModuleName() === "daterangepicker") {
        attributes(this.previousIcon, {
          tabIndex: "-1"
        });
        attributes(this.nextIcon, {
          tabIndex: "-1"
        });
      }
      attributes(this.nextIcon, ariaNextAttrs);
      attributes(this.nextIcon, tabIndexAttr);
      this.headerTitleElement = this.createElement("div", {
        className: "" + LINK + " " + TITLE
      });
      attributes(this.headerTitleElement, ariaTitleAttrs);
      attributes(this.headerTitleElement, tabIndexAttr);
      this.headerElement.appendChild(this.headerTitleElement);
      this.previousIcon.appendChild(this.createElement("span", {
        className: "" + PREVSPAN + " " + ICON4
      }));
      this.nextIcon.appendChild(this.createElement("span", {
        className: "" + NEXTSPAN + " " + ICON4
      }));
      iconContainer.appendChild(this.previousIcon);
      iconContainer.appendChild(this.nextIcon);
      this.headerElement.appendChild(iconContainer);
      if (this.getModuleName() === "calendar") {
        this.element.appendChild(this.headerElement);
      } else {
        this.calendarElement.appendChild(this.headerElement);
      }
      this.adjustLongHeaderSize();
    };
    CalendarBase2.prototype.createContent = function() {
      this.contentElement = this.createElement("div", {
        className: CONTENT2
      });
      this.table = this.createElement("table", {
        attrs: {
          "class": CONTENTTABLE,
          "tabIndex": "0",
          "role": "grid",
          "aria-activedescendant": "",
          "aria-labelledby": this.element.id
        }
      });
      if (this.getModuleName() === "calendar") {
        this.element.appendChild(this.contentElement);
      } else {
        this.calendarElement.appendChild(this.contentElement);
      }
      this.contentElement.appendChild(this.table);
      this.createContentHeader();
      this.createContentBody();
      if (this.showTodayButton) {
        this.createContentFooter();
      }
      if (this.getModuleName() !== "daterangepicker") {
        EventHandler.add(this.table, "focus", this.addContentFocus, this);
        EventHandler.add(this.table, "blur", this.removeContentFocus, this);
      }
    };
    CalendarBase2.prototype.addContentFocus = function(args) {
      var focusedDate = this.tableBodyElement.querySelector("tr td.e-focused-date");
      var selectedDate = this.tableBodyElement.querySelector("tr td.e-selected");
      if (!isNullOrUndefined(selectedDate)) {
        selectedDate.classList.add(FOCUSEDCELL);
      } else if (!isNullOrUndefined(focusedDate)) {
        focusedDate.classList.add(FOCUSEDCELL);
      }
    };
    CalendarBase2.prototype.removeContentFocus = function(args) {
      var focusedDate = !isNullOrUndefined(this.tableBodyElement) ? this.tableBodyElement.querySelector("tr td.e-focused-date") : null;
      var selectedDate = !isNullOrUndefined(this.tableBodyElement) ? this.tableBodyElement.querySelector("tr td.e-selected") : null;
      if (!isNullOrUndefined(selectedDate)) {
        selectedDate.classList.remove(FOCUSEDCELL);
      } else if (!isNullOrUndefined(focusedDate)) {
        focusedDate.classList.remove(FOCUSEDCELL);
      }
    };
    CalendarBase2.prototype.getCultureValues = function() {
      var culShortNames = [];
      var cldrObj;
      var dayFormat = !isNullOrUndefined(this.dayHeaderFormat) ? "days.stand-alone." + this.dayHeaderFormat.toLowerCase() : null;
      if ((this.locale === "en" || this.locale === "en-US") && !isNullOrUndefined(dayFormat)) {
        cldrObj = getValue(dayFormat, getDefaultDateObject());
      } else {
        cldrObj = this.getCultureObjects(cldrData, "" + this.locale);
      }
      if (!isNullOrUndefined(cldrObj)) {
        for (var _i = 0, _a = Object.keys(cldrObj); _i < _a.length; _i++) {
          var obj = _a[_i];
          culShortNames.push(getValue(obj, cldrObj));
        }
      }
      return culShortNames;
    };
    CalendarBase2.prototype.toCapitalize = function(text) {
      return !isNullOrUndefined(text) && text.length ? text[0].toUpperCase() + text.slice(1) : text;
    };
    CalendarBase2.prototype.createContentHeader = function() {
      if (this.getModuleName() === "calendar") {
        if (!isNullOrUndefined(this.element.querySelectorAll(".e-content .e-week-header")[0])) {
          detach(this.element.querySelectorAll(".e-content .e-week-header")[0]);
        }
      } else {
        if (!isNullOrUndefined(this.calendarElement.querySelectorAll(".e-content .e-week-header")[0])) {
          detach(this.calendarElement.querySelectorAll(".e-content .e-week-header")[0]);
        }
      }
      var daysCount = 6;
      var html = "";
      if (this.firstDayOfWeek > 6 || this.firstDayOfWeek < 0) {
        this.setProperties({
          firstDayOfWeek: 0
        }, true);
      }
      this.tableHeadElement = this.createElement("thead", {
        className: WEEKHEADER
      });
      if (this.weekNumber) {
        html += '<th class="e-week-number" aria-hidden="true"></th>';
        if (this.getModuleName() === "calendar") {
          addClass([this.element], "" + WEEKNUMBER);
        } else {
          addClass([this.calendarElement], "" + WEEKNUMBER);
        }
      }
      var shortNames = this.getCultureValues().length > 0 && this.getCultureValues() ? this.shiftArray(this.getCultureValues().length > 0 && this.getCultureValues(), this.firstDayOfWeek) : null;
      if (!isNullOrUndefined(shortNames)) {
        for (var days = 0; days <= daysCount; days++) {
          html += '<th  class="">' + this.toCapitalize(shortNames[days]) + "</th>";
        }
      }
      html = "<tr>" + html + "</tr>";
      this.tableHeadElement.innerHTML = html;
      this.table.appendChild(this.tableHeadElement);
    };
    CalendarBase2.prototype.createContentBody = function() {
      if (this.getModuleName() === "calendar") {
        if (!isNullOrUndefined(this.element.querySelectorAll(".e-content tbody")[0])) {
          detach(this.element.querySelectorAll(".e-content tbody")[0]);
        }
      } else {
        if (!isNullOrUndefined(this.calendarElement.querySelectorAll(".e-content tbody")[0])) {
          detach(this.calendarElement.querySelectorAll(".e-content tbody")[0]);
        }
      }
      switch (this.start) {
        case "Year":
          this.renderYears();
          break;
        case "Decade":
          this.renderDecades();
          break;
        default:
          this.renderMonths();
      }
    };
    CalendarBase2.prototype.updateFooter = function() {
      this.todayElement.textContent = this.l10.getConstant("today");
      this.todayElement.setAttribute("aria-label", this.l10.getConstant("today"));
      this.todayElement.setAttribute("tabindex", "0");
    };
    CalendarBase2.prototype.createContentFooter = function() {
      if (this.showTodayButton) {
        var minimum = /* @__PURE__ */ new Date(+this.min);
        var maximum = /* @__PURE__ */ new Date(+this.max);
        var l10nLocale = {
          today: "Today"
        };
        this.globalize = new Internationalization(this.locale);
        this.l10 = new L10n(this.getModuleName(), l10nLocale, this.locale);
        this.todayElement = this.createElement("button", {
          attrs: {
            role: "button"
          }
        });
        rippleEffect(this.todayElement);
        this.updateFooter();
        addClass([this.todayElement], [BTN, TODAY, FLAT, PRIMARY, CSS]);
        if (!(+new Date(minimum.setHours(0, 0, 0, 0)) <= +this.todayDate && +this.todayDate <= +new Date(maximum.setHours(0, 0, 0, 0))) || this.todayDisabled) {
          addClass([this.todayElement], DISABLED10);
        }
        this.footer = this.createElement("div", {
          className: FOOTER
        });
        this.footer.appendChild(this.todayElement);
        if (this.getModuleName() === "calendar") {
          this.element.appendChild(this.footer);
        }
        if (this.getModuleName() === "datepicker") {
          this.calendarElement.appendChild(this.footer);
        }
        if (this.getModuleName() === "datetimepicker") {
          this.calendarElement.appendChild(this.footer);
        }
        if (!this.todayElement.classList.contains(DISABLED10)) {
          EventHandler.add(this.todayElement, "click", this.todayButtonClick, this);
        }
      }
    };
    CalendarBase2.prototype.wireEvents = function(id, ref, keyConfig, moduleName) {
      EventHandler.add(this.headerTitleElement, "click", this.navigateTitle, this);
      this.defaultKeyConfigs = extend(this.defaultKeyConfigs, this.keyConfigs);
      if (this.getModuleName() === "calendar") {
        this.keyboardModule = new KeyboardEvents(this.element, {
          eventName: "keydown",
          keyAction: this.keyActionHandle.bind(this),
          keyConfigs: this.defaultKeyConfigs
        });
      } else {
        this.keyboardModule = new KeyboardEvents(this.calendarElement, {
          eventName: "keydown",
          keyAction: this.keyActionHandle.bind(this),
          keyConfigs: this.defaultKeyConfigs
        });
      }
    };
    CalendarBase2.prototype.dateWireEvents = function(id, ref, keyConfig, moduleName) {
      this.defaultKeyConfigs = this.getDefaultKeyConfig();
      this.defaultKeyConfigs = extend(this.defaultKeyConfigs, keyConfig);
      this.serverModuleName = moduleName;
    };
    CalendarBase2.prototype.todayButtonClick = function(e, value, isCustomDate) {
      if (this.showTodayButton) {
        if (this.currentView() === this.depth) {
          this.effect = "";
        } else {
          this.effect = "e-zoomin";
        }
        if (this.getViewNumber(this.start) >= this.getViewNumber(this.depth)) {
          this.navigateTo(this.depth, new Date(this.checkValue(value)), isCustomDate);
        } else {
          this.navigateTo("Month", new Date(this.checkValue(value)), isCustomDate);
        }
      }
    };
    CalendarBase2.prototype.resetCalendar = function() {
      this.calendarElement && detach(this.calendarElement);
      this.tableBodyElement && detach(this.tableBodyElement);
      this.table && detach(this.table);
      this.tableHeadElement && detach(this.tableHeadElement);
      this.nextIcon && detach(this.nextIcon);
      this.previousIcon && detach(this.previousIcon);
      this.footer && detach(this.footer);
      this.todayElement = null;
      this.renderDayCellArgs = null;
      this.calendarElement = this.tableBodyElement = this.footer = this.tableHeadElement = this.nextIcon = this.previousIcon = this.table = null;
    };
    CalendarBase2.prototype.keyActionHandle = function(e, value, multiSelection) {
      if (this.calendarElement === null && e.action === "escape") {
        return;
      }
      var focusedDate = this.tableBodyElement.querySelector("tr td.e-focused-date");
      var selectedDate;
      if (multiSelection) {
        if (!isNullOrUndefined(focusedDate) && +value === parseInt(focusedDate.getAttribute("id").split("_")[0], 10)) {
          selectedDate = focusedDate;
        } else {
          selectedDate = this.tableBodyElement.querySelector("tr td.e-selected");
        }
      } else {
        selectedDate = this.tableBodyElement.querySelector("tr td.e-selected");
      }
      var view = this.getViewNumber(this.currentView());
      var depthValue = this.getViewNumber(this.depth);
      var levelRestrict = view === depthValue && this.getViewNumber(this.start) >= depthValue;
      this.effect = "";
      switch (e.action) {
        case "moveLeft":
          if (this.getModuleName() !== "daterangepicker" && !isNullOrUndefined(e.target)) {
            this.keyboardNavigate(-1, view, e, this.max, this.min);
            e.preventDefault();
          }
          break;
        case "moveRight":
          if (this.getModuleName() !== "daterangepicker" && !isNullOrUndefined(e.target)) {
            this.keyboardNavigate(1, view, e, this.max, this.min);
            e.preventDefault();
          }
          break;
        case "moveUp":
          if (this.getModuleName() !== "daterangepicker" && !isNullOrUndefined(e.target)) {
            if (view === 0) {
              this.keyboardNavigate(-7, view, e, this.max, this.min);
            } else {
              this.keyboardNavigate(-4, view, e, this.max, this.min);
            }
            e.preventDefault();
          }
          break;
        case "moveDown":
          if (this.getModuleName() !== "daterangepicker" && !isNullOrUndefined(e.target)) {
            if (view === 0) {
              this.keyboardNavigate(7, view, e, this.max, this.min);
            } else {
              this.keyboardNavigate(4, view, e, this.max, this.min);
            }
            e.preventDefault();
          }
          break;
        case "select":
          if (e.target === this.headerTitleElement) {
            this.navigateTitle(e);
          } else if (e.target === this.previousIcon && !e.target.className.includes(DISABLED10)) {
            this.navigatePrevious(e);
          } else if (e.target === this.nextIcon && !e.target.className.includes(DISABLED10)) {
            this.navigateNext(e);
          } else if (e.target === this.todayElement && !e.target.className.includes(DISABLED10)) {
            this.todayButtonClick(e, value);
            if (this.getModuleName() === "datepicker" || this.getModuleName() === "datetimepicker") {
              if (this.isAngular) {
                this.inputElement.focus();
              } else {
                this.element.focus();
              }
            }
          } else {
            var element2 = !isNullOrUndefined(focusedDate) ? focusedDate : selectedDate;
            if (!isNullOrUndefined(element2) && !element2.classList.contains(DISABLED10)) {
              if (levelRestrict) {
                var d = new Date(parseInt("" + element2.id, 0));
                this.selectDate(e, d, element2);
                if (this.getModuleName() === "datepicker" || this.getModuleName() === "datetimepicker") {
                  if (this.isAngular) {
                    this.inputElement.focus();
                  } else {
                    this.element.focus();
                  }
                }
              } else {
                if (!e.target.className.includes(DISABLED10)) {
                  this.contentClick(null, --view, element2, value);
                }
              }
            }
          }
          break;
        case "controlUp":
          this.title();
          e.preventDefault();
          break;
        case "controlDown":
          if (!isNullOrUndefined(focusedDate) && !levelRestrict || !isNullOrUndefined(selectedDate) && !levelRestrict) {
            this.contentClick(null, --view, focusedDate || selectedDate, value);
          }
          e.preventDefault();
          break;
        case "home":
          this.currentDate = this.firstDay(this.currentDate);
          detach(this.tableBodyElement);
          if (view === 0) {
            this.renderMonths(e);
          } else if (view === 1) {
            this.renderYears(e);
          } else {
            this.renderDecades(e);
          }
          e.preventDefault();
          break;
        case "end":
          this.currentDate = this.lastDay(this.currentDate, view);
          detach(this.tableBodyElement);
          if (view === 0) {
            this.renderMonths(e);
          } else if (view === 1) {
            this.renderYears(e);
          } else {
            this.renderDecades(e);
          }
          e.preventDefault();
          break;
        case "pageUp":
          this.addMonths(this.currentDate, -1);
          this.navigateTo("Month", this.currentDate);
          e.preventDefault();
          break;
        case "pageDown":
          this.addMonths(this.currentDate, 1);
          this.navigateTo("Month", this.currentDate);
          e.preventDefault();
          break;
        case "shiftPageUp":
          this.addYears(this.currentDate, -1);
          this.navigateTo("Month", this.currentDate);
          e.preventDefault();
          break;
        case "shiftPageDown":
          this.addYears(this.currentDate, 1);
          this.navigateTo("Month", this.currentDate);
          e.preventDefault();
          break;
        case "controlHome":
          this.navigateTo("Month", new Date(this.currentDate.getFullYear(), 0, 1));
          e.preventDefault();
          break;
        case "controlEnd":
          this.navigateTo("Month", new Date(this.currentDate.getFullYear(), 11, 31));
          e.preventDefault();
          break;
        case "tab":
          if ((this.getModuleName() === "datepicker" || this.getModuleName() === "datetimepicker") && e.target === this.todayElement) {
            e.preventDefault();
            if (this.isAngular) {
              this.inputElement.focus();
            } else {
              this.element.focus();
            }
            this.hide();
          }
          break;
        case "shiftTab":
          if ((this.getModuleName() === "datepicker" || this.getModuleName() === "datetimepicker") && e.target === this.headerTitleElement) {
            e.preventDefault();
            if (this.isAngular) {
              this.inputElement.focus();
            } else {
              this.element.focus();
            }
            this.hide();
          }
          break;
        case "escape":
          if ((this.getModuleName() === "datepicker" || this.getModuleName() === "datetimepicker") && (e.target === this.headerTitleElement || e.target === this.previousIcon || e.target === this.nextIcon || e.target === this.todayElement)) {
            this.hide();
          }
          break;
      }
    };
    CalendarBase2.prototype.keyboardNavigate = function(number, currentView, e, max, min) {
      var date = new Date(this.checkValue(this.currentDate));
      switch (currentView) {
        case 2:
          this.addYears(this.currentDate, number);
          if (this.isMonthYearRange(this.currentDate)) {
            detach(this.tableBodyElement);
            this.renderDecades(e);
          } else {
            this.currentDate = date;
          }
          break;
        case 1:
          this.addMonths(this.currentDate, number);
          if (this.calendarMode === "Gregorian") {
            if (this.isMonthYearRange(this.currentDate)) {
              detach(this.tableBodyElement);
              this.renderYears(e);
            } else {
              this.currentDate = date;
            }
          } else {
            if (this.isMonthYearRange(this.currentDate)) {
              detach(this.tableBodyElement);
              this.renderYears(e);
            } else {
              this.currentDate = date;
            }
          }
          break;
        case 0:
          this.addDay(this.currentDate, number, e, max, min);
          if (this.isMinMaxRange(this.currentDate)) {
            detach(this.tableBodyElement);
            this.renderMonths(e);
          } else {
            this.currentDate = date;
          }
          break;
      }
    };
    CalendarBase2.prototype.preRender = function(value) {
      var _this = this;
      this.navigatePreviousHandler = this.navigatePrevious.bind(this);
      this.navigateNextHandler = this.navigateNext.bind(this);
      this.defaultKeyConfigs = this.getDefaultKeyConfig();
      this.navigateHandler = function(e) {
        _this.triggerNavigate(e);
      };
    };
    CalendarBase2.prototype.minMaxDate = function(localDate) {
      var currentDate = new Date((/* @__PURE__ */ new Date(+localDate)).setHours(0, 0, 0, 0));
      var minDate = new Date((/* @__PURE__ */ new Date(+this.min)).setHours(0, 0, 0, 0));
      var maxDate = new Date((/* @__PURE__ */ new Date(+this.max)).setHours(0, 0, 0, 0));
      if (+currentDate === +minDate || +currentDate === +maxDate) {
        if (+localDate < +this.min) {
          localDate = /* @__PURE__ */ new Date(+this.min);
        }
        if (+localDate > +this.max) {
          localDate = /* @__PURE__ */ new Date(+this.max);
        }
      }
      return localDate;
    };
    CalendarBase2.prototype.renderMonths = function(e, value, isCustomDate) {
      var numCells = this.weekNumber ? 8 : 7;
      var tdEles;
      if (this.calendarMode === "Gregorian") {
        tdEles = this.renderDays(this.currentDate, value, null, null, isCustomDate, e);
      } else {
        tdEles = !isNullOrUndefined(this.islamicModule) ? this.islamicModule.islamicRenderDays(this.currentDate, value) : null;
      }
      this.createContentHeader();
      if (this.calendarMode === "Gregorian") {
        this.renderTemplate(tdEles, numCells, MONTH, e, value);
      } else if (!isNullOrUndefined(this.islamicModule)) {
        this.islamicModule.islamicRenderTemplate(tdEles, numCells, MONTH, e, value);
      }
    };
    CalendarBase2.prototype.renderDays = function(currentDate, value, multiSelection, values, isTodayDate, e) {
      var tdEles = [];
      var cellsCount = 42;
      var todayDate = isTodayDate ? /* @__PURE__ */ new Date(+currentDate) : this.getDate(/* @__PURE__ */ new Date(), this.timezone);
      var localDate = new Date(this.checkValue(currentDate));
      var minMaxDate;
      var currentMonth = localDate.getMonth();
      this.titleUpdate(currentDate, "days");
      var d = localDate;
      localDate = new Date(d.getFullYear(), d.getMonth(), 0, d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());
      while (localDate.getDay() !== this.firstDayOfWeek) {
        this.setStartDate(localDate, -1 * dayMilliSeconds);
      }
      for (var day = 0; day < cellsCount; ++day) {
        var weekEle = this.createElement("td", {
          className: CELL
        });
        var weekAnchor = this.createElement("span");
        if (day % 7 === 0 && this.weekNumber) {
          var numberOfDays = this.weekRule === "FirstDay" ? 6 : this.weekRule === "FirstFourDayWeek" ? 3 : 0;
          var finalDate = new Date(localDate.getFullYear(), localDate.getMonth(), localDate.getDate() + numberOfDays);
          weekAnchor.textContent = "" + this.getWeek(finalDate);
          weekEle.appendChild(weekAnchor);
          addClass([weekEle], "" + WEEKNUMBER);
          tdEles.push(weekEle);
        }
        minMaxDate = /* @__PURE__ */ new Date(+localDate);
        localDate = this.minMaxDate(localDate);
        var dateFormatOptions = {
          type: "dateTime",
          skeleton: "full"
        };
        var date = this.globalize.parseDate(this.globalize.formatDate(localDate, dateFormatOptions), dateFormatOptions);
        var tdEle = this.dayCell(localDate);
        var title = this.globalize.formatDate(localDate, {
          type: "date",
          skeleton: "full"
        });
        var dayLink = this.createElement("span");
        dayLink.textContent = this.globalize.formatDate(localDate, {
          format: "d",
          type: "date",
          skeleton: "yMd"
        });
        var disabled = this.min > localDate || this.max < localDate;
        if (disabled) {
          addClass([tdEle], DISABLED10);
          addClass([tdEle], OVERLAY);
        } else {
          dayLink.setAttribute("title", "" + title);
        }
        if (currentMonth !== localDate.getMonth()) {
          addClass([tdEle], OTHERMONTH);
          dayLink.setAttribute("aria-disabled", "true");
        }
        if (localDate.getDay() === 0 || localDate.getDay() === 6) {
          addClass([tdEle], WEEKEND);
        }
        tdEle.appendChild(dayLink);
        this.renderDayCellArgs = {
          date: localDate,
          isDisabled: false,
          element: tdEle,
          isOutOfRange: disabled
        };
        var argument = this.renderDayCellArgs;
        this.renderDayCellEvent(argument);
        if (argument.isDisabled) {
          var selectDate = new Date(this.checkValue(value));
          var argsDate = new Date(this.checkValue(argument.date));
          if (multiSelection) {
            if (!isNullOrUndefined(values) && values.length > 0) {
              for (var index = 0; index < values.length; index++) {
                var localDateString = +new Date(this.globalize.formatDate(argument.date, {
                  type: "date",
                  skeleton: "yMd"
                }));
                var tempDateString = +new Date(this.globalize.formatDate(values[index], {
                  type: "date",
                  skeleton: "yMd"
                }));
                if (localDateString === tempDateString) {
                  values.splice(index, 1);
                  index = -1;
                }
              }
            }
          } else if (selectDate && +selectDate === +argsDate) {
            this.setProperties({
              value: null
            }, true);
          }
        }
        if (this.renderDayCellArgs.isDisabled && !tdEle.classList.contains(SELECTED5)) {
          addClass([tdEle], DISABLED10);
          addClass([tdEle], OVERLAY);
          dayLink.setAttribute("aria-disabled", "true");
          if (+this.renderDayCellArgs.date === +this.todayDate) {
            this.todayDisabled = true;
          }
        }
        var otherMnthBool = tdEle.classList.contains(OTHERMONTH);
        var disabledCls = tdEle.classList.contains(DISABLED10);
        if (!disabledCls) {
          EventHandler.add(tdEle, "click", this.clickHandler, this);
        }
        var currentTarget = void 0;
        if (!isNullOrUndefined(e) && e.type === "click") {
          currentTarget = e.currentTarget;
        }
        if (multiSelection && !isNullOrUndefined(values) && !disabledCls) {
          for (var tempValue = 0; tempValue < values.length; tempValue++) {
            var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
            var formatOptions = {
              format: null,
              type: "date",
              skeleton: "short",
              calendar: type
            };
            var localDateString = this.globalize.formatDate(localDate, formatOptions);
            var tempDateString = this.globalize.formatDate(values[tempValue], formatOptions);
            if (localDateString === tempDateString && this.getDateVal(localDate, values[tempValue]) || this.getDateVal(localDate, value)) {
              addClass([tdEle], SELECTED5);
            }
            if (!isNullOrUndefined(currentTarget) && currentTarget.innerText === tdEle.innerText && this.previousDates && tdEle.classList.contains(SELECTED5) && currentTarget.classList.contains(SELECTED5)) {
              removeClass([tdEle], SELECTED5);
              this.previousDates = false;
              var copyValues = this.copyValues(values);
              for (var i = 0; i < copyValues.length; i++) {
                var type_1 = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
                var formatOptions_1 = {
                  format: null,
                  type: "date",
                  skeleton: "short",
                  calendar: type_1
                };
                var localDateString_1 = this.globalize.formatDate(date, formatOptions_1);
                var tempDateString_1 = this.globalize.formatDate(copyValues[i], formatOptions_1);
                if (localDateString_1 === tempDateString_1) {
                  var index = copyValues.indexOf(copyValues[i]);
                  copyValues.splice(index, 1);
                  values.splice(index, 1);
                }
              }
              this.setProperties({
                values: copyValues
              }, true);
            } else {
              this.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
            }
          }
          if (values.length <= 0) {
            this.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
          }
        } else if (!disabledCls && this.getDateVal(localDate, value)) {
          addClass([tdEle], SELECTED5);
        }
        this.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
        if (!isNullOrUndefined(date) && date.getFullYear() === todayDate.getFullYear() && date.getMonth() === todayDate.getMonth() && date.getDate() === todayDate.getDate()) {
          addClass([tdEle], TODAY);
        }
        tdEles.push(this.renderDayCellArgs.element);
        localDate = /* @__PURE__ */ new Date(+minMaxDate);
        this.addDay(localDate, 1, null, this.max, this.min);
      }
      return tdEles;
    };
    CalendarBase2.prototype.updateFocus = function(otherMonth, disabled, localDate, tableElement, currentDate) {
      if (currentDate.getDate() === localDate.getDate() && !otherMonth && !disabled) {
        addClass([tableElement], FOCUSEDDATE);
      } else {
        if (currentDate >= this.max && parseInt(tableElement.id, 0) === +this.max && !otherMonth && !disabled) {
          addClass([tableElement], FOCUSEDDATE);
        }
        if (currentDate <= this.min && parseInt(tableElement.id, 0) === +this.min && !otherMonth && !disabled) {
          addClass([tableElement], FOCUSEDDATE);
        }
      }
    };
    CalendarBase2.prototype.renderYears = function(e, value) {
      this.removeTableHeadElement();
      var numCells = 4;
      var tdEles = [];
      var valueUtil = isNullOrUndefined(value);
      var curDate = new Date(this.checkValue(this.currentDate));
      var mon = curDate.getMonth();
      var yr = curDate.getFullYear();
      var localDate = curDate;
      var curYrs = localDate.getFullYear();
      var minYr = new Date(this.checkValue(this.min)).getFullYear();
      var minMonth = new Date(this.checkValue(this.min)).getMonth();
      var maxYr = new Date(this.checkValue(this.max)).getFullYear();
      var maxMonth = new Date(this.checkValue(this.max)).getMonth();
      localDate.setMonth(0);
      this.titleUpdate(this.currentDate, "months");
      localDate.setDate(1);
      for (var month = 0; month < 12; ++month) {
        var tdEle = this.dayCell(localDate);
        var dayLink = this.createElement("span");
        var localMonth = value && value.getMonth() === localDate.getMonth();
        var select2 = value && value.getFullYear() === yr && localMonth;
        var title = this.globalize.formatDate(localDate, {
          type: "date",
          format: "MMM y"
        });
        dayLink.textContent = this.toCapitalize(this.globalize.formatDate(localDate, {
          format: null,
          type: "dateTime",
          skeleton: "MMM"
        }));
        if (this.min && (curYrs < minYr || month < minMonth && curYrs === minYr) || this.max && (curYrs > maxYr || month > maxMonth && curYrs >= maxYr)) {
          addClass([tdEle], DISABLED10);
        } else if (!valueUtil && select2) {
          addClass([tdEle], SELECTED5);
        } else {
          if (localDate.getMonth() === mon && this.currentDate.getMonth() === mon) {
            addClass([tdEle], FOCUSEDDATE);
          }
        }
        localDate.setDate(1);
        localDate.setMonth(localDate.getMonth() + 1);
        if (!tdEle.classList.contains(DISABLED10)) {
          EventHandler.add(tdEle, "click", this.clickHandler, this);
          dayLink.setAttribute("title", "" + title);
        }
        tdEle.appendChild(dayLink);
        tdEles.push(tdEle);
      }
      this.renderTemplate(tdEles, numCells, YEAR, e, value);
    };
    CalendarBase2.prototype.renderDecades = function(e, value) {
      this.removeTableHeadElement();
      var numCells = 4;
      var yearCell = 12;
      var tdEles = [];
      var localDate = new Date(this.checkValue(this.currentDate));
      localDate.setMonth(0);
      localDate.setDate(1);
      var localYr = localDate.getFullYear();
      var startYr = new Date(localDate.setFullYear(localYr - localYr % 10));
      var endYr = new Date(localDate.setFullYear(localYr - localYr % 10 + (10 - 1)));
      var startFullYr = startYr.getFullYear();
      var endFullYr = endYr.getFullYear();
      var startHdrYr = this.globalize.formatDate(startYr, {
        format: null,
        type: "dateTime",
        skeleton: "y"
      });
      var endHdrYr = this.globalize.formatDate(endYr, {
        format: null,
        type: "dateTime",
        skeleton: "y"
      });
      this.headerTitleElement.textContent = startHdrYr + " - " + endHdrYr;
      var start = new Date(localYr - localYr % 10 - 1, 0, 1);
      var startYear = start.getFullYear();
      for (var rowIterator = 0; rowIterator < yearCell; ++rowIterator) {
        var year = startYear + rowIterator;
        localDate.setFullYear(year);
        var tdEle = this.dayCell(localDate);
        var dayLink = this.createElement("span");
        dayLink.textContent = this.globalize.formatDate(localDate, {
          format: null,
          type: "dateTime",
          skeleton: "y"
        });
        if (year < startFullYr || year > endFullYr) {
          addClass([tdEle], OTHERDECADE);
          dayLink.setAttribute("aria-disabled", "true");
          if (!isNullOrUndefined(value) && localDate.getFullYear() === value.getFullYear()) {
            addClass([tdEle], SELECTED5);
          }
          if (year < new Date(this.checkValue(this.min)).getFullYear() || year > new Date(this.checkValue(this.max)).getFullYear()) {
            addClass([tdEle], DISABLED10);
          }
        } else if (year < new Date(this.checkValue(this.min)).getFullYear() || year > new Date(this.checkValue(this.max)).getFullYear()) {
          addClass([tdEle], DISABLED10);
        } else if (!isNullOrUndefined(value) && localDate.getFullYear() === value.getFullYear()) {
          addClass([tdEle], SELECTED5);
        } else {
          if (localDate.getFullYear() === this.currentDate.getFullYear() && !tdEle.classList.contains(DISABLED10)) {
            addClass([tdEle], FOCUSEDDATE);
          }
        }
        if (!tdEle.classList.contains(DISABLED10)) {
          EventHandler.add(tdEle, "click", this.clickHandler, this);
          dayLink.setAttribute("title", "" + dayLink.textContent);
        }
        tdEle.appendChild(dayLink);
        tdEles.push(tdEle);
      }
      this.renderTemplate(tdEles, numCells, "e-decade", e, value);
    };
    CalendarBase2.prototype.dayCell = function(localDate) {
      var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
      var dateFormatOptions = {
        skeleton: "full",
        type: "dateTime",
        calendar: type
      };
      var date = this.globalize.parseDate(this.globalize.formatDate(localDate, dateFormatOptions), dateFormatOptions);
      var value;
      if (!isNullOrUndefined(date)) {
        value = date.valueOf();
      }
      var attrs = {
        className: CELL,
        attrs: {
          "id": "" + getUniqueID("" + value)
        }
      };
      return this.createElement("td", attrs);
    };
    CalendarBase2.prototype.firstDay = function(date) {
      var collection = this.currentView() !== "Decade" ? this.tableBodyElement.querySelectorAll("td:not(." + OTHERMONTH + "):not(." + WEEKNUMBER + ")") : this.tableBodyElement.querySelectorAll("td:not(." + OTHERDECADE);
      if (collection.length) {
        for (var i = 0; i < collection.length; i++) {
          if (!collection[i].classList.contains(DISABLED10)) {
            date = new Date(parseInt(collection[i].id, 0));
            break;
          }
        }
      }
      return date;
    };
    CalendarBase2.prototype.lastDay = function(date, view) {
      var lastDate = new Date(date.getFullYear(), date.getMonth() + 1, 0);
      if (view !== 2) {
        var timeOffset = Math.abs(lastDate.getTimezoneOffset() - this.firstDay(date).getTimezoneOffset());
        if (timeOffset) {
          lastDate.setHours(this.firstDay(date).getHours() + timeOffset / 60);
        }
        return this.findLastDay(lastDate);
      } else {
        return this.findLastDay(this.firstDay(lastDate));
      }
    };
    CalendarBase2.prototype.checkDateValue = function(value) {
      return !isNullOrUndefined(value) && value instanceof Date && !isNaN(+value) ? value : null;
    };
    CalendarBase2.prototype.findLastDay = function(date) {
      var collection = this.currentView() === "Decade" ? this.tableBodyElement.querySelectorAll("td:not(." + OTHERDECADE) : this.tableBodyElement.querySelectorAll("td:not(." + OTHERMONTH + "):not(." + WEEKNUMBER + ")");
      if (collection.length) {
        for (var i = collection.length - 1; i >= 0; i--) {
          if (!collection[i].classList.contains(DISABLED10)) {
            date = new Date(parseInt(collection[i].id, 0));
            break;
          }
        }
      }
      return date;
    };
    CalendarBase2.prototype.removeTableHeadElement = function() {
      if (this.getModuleName() === "calendar") {
        if (!isNullOrUndefined(this.element.querySelectorAll(".e-content table thead")[0])) {
          detach(this.tableHeadElement);
        }
      } else {
        if (!isNullOrUndefined(this.calendarElement.querySelectorAll(".e-content table thead")[0])) {
          detach(this.tableHeadElement);
        }
      }
    };
    CalendarBase2.prototype.renderTemplate = function(elements, count, classNm, e, value) {
      var view = this.getViewNumber(this.currentView());
      var trEle;
      this.tableBodyElement = this.createElement("tbody");
      this.table.appendChild(this.tableBodyElement);
      removeClass([this.contentElement, this.headerElement], [MONTH, DECADE, YEAR]);
      addClass([this.contentElement, this.headerElement], [classNm]);
      var weekNumCell = 41;
      var numberCell = 35;
      var otherMonthCell = 6;
      var row = count;
      var rowIterator = 0;
      for (var dayCell = 0; dayCell < elements.length / count; ++dayCell) {
        trEle = this.createElement("tr");
        for (rowIterator = 0 + rowIterator; rowIterator < row; rowIterator++) {
          if (!elements[rowIterator].classList.contains("e-week-number") && !isNullOrUndefined(elements[rowIterator].children[0])) {
            addClass([elements[rowIterator].children[0]], [LINK]);
            rippleEffect(elements[rowIterator].children[0], {
              duration: 600,
              isCenterRipple: true
            });
          }
          trEle.appendChild(elements[rowIterator]);
          if (this.weekNumber && rowIterator === otherMonthCell + 1 && elements[otherMonthCell + 1].classList.contains(OTHERMONTH)) {
            addClass([trEle], OTHERMONTHROW);
          }
          if (!this.weekNumber && rowIterator === otherMonthCell && elements[otherMonthCell].classList.contains(OTHERMONTH)) {
            addClass([trEle], OTHERMONTHROW);
          }
          if (this.weekNumber) {
            if (rowIterator === weekNumCell && elements[weekNumCell].classList.contains(OTHERMONTH)) {
              addClass([trEle], OTHERMONTHROW);
            }
          } else {
            if (rowIterator === numberCell && elements[numberCell].classList.contains(OTHERMONTH)) {
              addClass([trEle], OTHERMONTHROW);
            }
          }
        }
        row = row + count;
        rowIterator = rowIterator + 0;
        this.tableBodyElement.appendChild(trEle);
      }
      this.table.querySelector("tbody").className = this.effect;
      if (this.calendarMode === "Gregorian") {
        this.iconHandler();
      } else {
        this.islamicModule.islamicIconHandler();
      }
      if (view !== this.getViewNumber(this.currentView()) || view === 0 && view !== this.getViewNumber(this.currentView())) {
        this.navigateHandler(e);
      }
      this.setAriaActiveDescendant();
    };
    CalendarBase2.prototype.clickHandler = function(e, value) {
      this.clickEventEmitter(e);
      var eve = e.currentTarget;
      var view = this.getViewNumber(this.currentView());
      if (eve.classList.contains(OTHERMONTH)) {
        this.contentClick(e, 0, null, value);
      } else if (view === this.getViewNumber(this.depth) && this.getViewNumber(this.start) >= this.getViewNumber(this.depth)) {
        this.contentClick(e, 1, null, value);
      } else if (2 === view) {
        this.contentClick(e, 1, null, value);
      } else if (!eve.classList.contains(OTHERMONTH) && view === 0) {
        this.selectDate(e, this.getIdValue(e, null), null);
      } else {
        this.contentClick(e, 0, eve, value);
      }
      if (this.getModuleName() === "calendar") {
        this.table.focus();
      }
    };
    CalendarBase2.prototype.clickEventEmitter = function(e) {
      e.preventDefault();
    };
    CalendarBase2.prototype.contentClick = function(e, view, element2, value) {
      var currentView = this.getViewNumber(this.currentView());
      var d = this.getIdValue(e, element2);
      switch (view) {
        case 0:
          if (currentView === this.getViewNumber(this.depth) && this.getViewNumber(this.start) >= this.getViewNumber(this.depth)) {
            detach(this.tableBodyElement);
            this.currentDate = d;
            this.effect = ZOOMIN;
            this.renderMonths(e);
          } else {
            if (this.calendarMode === "Gregorian") {
              this.currentDate.setMonth(d.getMonth());
              if (d.getMonth() > 0 && this.currentDate.getMonth() !== d.getMonth()) {
                this.currentDate.setDate(0);
              }
              this.currentDate.setFullYear(d.getFullYear());
            } else {
              this.currentDate = d;
            }
            this.effect = ZOOMIN;
            detach(this.tableBodyElement);
            this.renderMonths(e);
          }
          break;
        case 1:
          if (currentView === this.getViewNumber(this.depth) && this.getViewNumber(this.start) >= this.getViewNumber(this.depth)) {
            this.selectDate(e, d, null);
          } else {
            if (this.calendarMode === "Gregorian") {
              this.currentDate.setFullYear(d.getFullYear());
            } else {
              this.islamicPreviousHeader = this.headerElement.textContent;
              var islamicDate = this.islamicModule.getIslamicDate(d);
              this.currentDate = this.islamicModule.toGregorian(islamicDate.year, islamicDate.month, 1);
            }
            this.effect = ZOOMIN;
            detach(this.tableBodyElement);
            this.renderYears(e);
          }
      }
    };
    CalendarBase2.prototype.switchView = function(view, e, multiSelection, isCustomDate) {
      switch (view) {
        case 0:
          detach(this.tableBodyElement);
          this.renderMonths(e, null, isCustomDate);
          break;
        case 1:
          detach(this.tableBodyElement);
          this.renderYears(e);
          break;
        case 2:
          detach(this.tableBodyElement);
          this.renderDecades(e);
      }
    };
    CalendarBase2.prototype.getModuleName = function() {
      return "calendar";
    };
    CalendarBase2.prototype.requiredModules = function() {
      var modules = [];
      if (this.calendarMode === "Islamic") {
        modules.push({
          args: [this],
          member: "islamic",
          name: "Islamic"
        });
      }
      return modules;
    };
    CalendarBase2.prototype.getPersistData = function() {
      var keyEntity = ["value"];
      return this.addOnPersist(keyEntity);
    };
    CalendarBase2.prototype.onPropertyChanged = function(newProp, oldProp, multiSelection, values) {
      this.effect = "";
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "enableRtl":
            if (newProp.enableRtl) {
              if (this.getModuleName() === "calendar") {
                this.element.classList.add("e-rtl");
              } else {
                this.calendarElement.classList.add("e-rtl");
              }
            } else {
              if (this.getModuleName() === "calendar") {
                this.element.classList.remove("e-rtl");
              } else {
                this.calendarElement.classList.remove("e-rtl");
              }
            }
            break;
          case "dayHeaderFormat":
            this.getCultureValues();
            if (this.getModuleName() !== "datepicker") {
              this.createContentHeader();
            } else if (this.calendarElement) {
              this.createContentHeader();
            }
            this.adjustLongHeaderSize();
            break;
          case "min":
          case "max":
            this.rangeValidation(this.min, this.max);
            if (prop === "min") {
              this.setProperties({
                min: this.checkDateValue(new Date(this.checkValue(newProp.min)))
              }, true);
            } else {
              this.setProperties({
                max: this.checkDateValue(new Date(this.checkValue(newProp.max)))
              }, true);
            }
            this.setProperties({
              start: this.currentView()
            }, true);
            if (this.tableBodyElement) {
              detach(this.tableBodyElement);
            }
            this.minMaxUpdate();
            if (multiSelection) {
              this.validateValues(multiSelection, values);
            }
            if (this.getModuleName() !== "datepicker") {
              this.createContentBody();
            } else if (this.calendarElement) {
              this.createContentBody();
            }
            if ((this.todayDate < this.min || this.max < this.todayDate) && this.footer && this.todayElement) {
              detach(this.todayElement);
              detach(this.footer);
              this.todayElement = this.footer = null;
              this.createContentFooter();
            } else {
              if (this.footer && this.todayElement && this.todayElement.classList.contains("e-disabled")) {
                removeClass([this.todayElement], DISABLED10);
                detach(this.todayElement);
                detach(this.footer);
                this.todayElement = this.footer = null;
                this.createContentFooter();
              }
            }
            break;
          case "start":
          case "depth":
          case "weekNumber":
          case "firstDayOfWeek":
          case "weekRule":
            this.checkView();
            if (this.getModuleName() !== "datepicker") {
              this.createContentHeader();
              this.createContentBody();
            } else if (this.calendarElement) {
              this.createContentHeader();
              this.createContentBody();
            }
            break;
          case "locale":
            this.globalize = new Internationalization(this.locale);
            if (this.getModuleName() !== "datepicker") {
              this.createContentHeader();
              this.createContentBody();
            } else if (this.calendarElement) {
              this.createContentHeader();
              this.createContentBody();
            }
            if (this.getModuleName() === "calendar") {
              var l10nLocale = {
                today: "Today"
              };
              this.l10 = new L10n(this.getModuleName(), l10nLocale, this.locale);
            }
            this.l10.setLocale(this.locale);
            if (this.showTodayButton) {
              this.updateFooter();
            }
            break;
          case "showTodayButton":
            if (newProp.showTodayButton) {
              this.createContentFooter();
            } else {
              if (!isNullOrUndefined(this.todayElement) && !isNullOrUndefined(this.footer)) {
                detach(this.todayElement);
                detach(this.footer);
                this.todayElement = this.footer = void 0;
              }
            }
            this.setProperties({
              showTodayButton: newProp.showTodayButton
            }, true);
            break;
        }
      }
    };
    CalendarBase2.prototype.validateValues = function(multiSelection, values) {
      if (multiSelection && !isNullOrUndefined(values) && values.length > 0) {
        var copyValues = this.copyValues(values);
        for (var skipIndex = 0; skipIndex < copyValues.length; skipIndex++) {
          var tempValue = copyValues[skipIndex];
          var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
          var tempValueFormat = void 0;
          var tempValueString = void 0;
          var tempValueDate = void 0;
          if (this.calendarMode === "Gregorian") {
            tempValueFormat = {
              type: "date",
              skeleton: "yMd"
            };
            tempValueString = this.globalize.formatDate(tempValue, tempValueFormat);
            tempValueDate = this.globalize.parseDate(tempValueString, tempValueFormat);
          } else {
            tempValueFormat = {
              type: "date",
              skeleton: "yMd",
              calendar: "islamic"
            };
            tempValueString = this.globalize.formatDate(tempValue, tempValueFormat);
            tempValueDate = this.globalize.parseDate(tempValueString, tempValueFormat);
          }
          var minFormatOption = {
            type: "date",
            skeleton: "yMd",
            calendar: type
          };
          var minStringValue = this.globalize.formatDate(this.min, minFormatOption);
          var minString = minStringValue;
          var maxFormatOption = {
            type: "date",
            skeleton: "yMd",
            calendar: type
          };
          var maxStringValue = this.globalize.formatDate(this.max, maxFormatOption);
          var maxString = maxStringValue;
          var minDate = this.globalize.parseDate(minString, minFormatOption);
          var maxDate = this.globalize.parseDate(maxString, maxFormatOption);
          if (+tempValueDate < +minDate || +tempValueDate > +maxDate) {
            copyValues.splice(skipIndex, 1);
            skipIndex = -1;
          }
        }
        this.setProperties({
          values: copyValues
        }, true);
      }
    };
    CalendarBase2.prototype.setValueUpdate = function() {
      if (!isNullOrUndefined(this.tableBodyElement)) {
        detach(this.tableBodyElement);
        this.setProperties({
          start: this.currentView()
        }, true);
        this.createContentBody();
      }
    };
    CalendarBase2.prototype.copyValues = function(values) {
      var copyValues = [];
      if (!isNullOrUndefined(values) && values.length > 0) {
        for (var index = 0; index < values.length; index++) {
          copyValues.push(/* @__PURE__ */ new Date(+values[index]));
        }
      }
      return copyValues;
    };
    CalendarBase2.prototype.titleUpdate = function(date, view) {
      var globalize = new Internationalization(this.locale);
      var dayFormatOptions;
      var monthFormatOptions;
      var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
      if (this.calendarMode === "Gregorian") {
        dayFormatOptions = globalize.formatDate(date, {
          type: "dateTime",
          skeleton: "yMMMM",
          calendar: type
        });
        monthFormatOptions = globalize.formatDate(date, {
          format: null,
          type: "dateTime",
          skeleton: "y",
          calendar: type
        });
      } else {
        dayFormatOptions = globalize.formatDate(date, {
          type: "dateTime",
          format: "MMMM y",
          calendar: type
        });
        monthFormatOptions = globalize.formatDate(date, {
          type: "dateTime",
          format: "y",
          calendar: type
        });
      }
      switch (view) {
        case "days":
          this.headerTitleElement.textContent = this.toCapitalize(dayFormatOptions);
          break;
        case "months":
          this.headerTitleElement.textContent = monthFormatOptions;
      }
    };
    CalendarBase2.prototype.setActiveDescendant = function() {
      var id;
      var focusedEle = this.tableBodyElement.querySelector("tr td.e-focused-date");
      var selectedEle = this.tableBodyElement.querySelector("tr td.e-selected");
      var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
      var title;
      var view = this.currentView();
      if (view === "Month") {
        title = this.globalize.formatDate(this.currentDate, {
          type: "date",
          skeleton: "full",
          calendar: type
        });
      } else if (view === "Year") {
        if (type !== "islamic") {
          title = this.globalize.formatDate(this.currentDate, {
            type: "date",
            skeleton: "yMMMM",
            calendar: type
          });
        } else {
          title = this.globalize.formatDate(this.currentDate, {
            type: "date",
            skeleton: "GyMMM",
            calendar: type
          });
        }
      } else {
        title = this.globalize.formatDate(this.currentDate, {
          format: null,
          type: "date",
          skeleton: "y",
          calendar: type
        });
      }
      if (selectedEle || focusedEle) {
        if (!isNullOrUndefined(selectedEle)) {
          selectedEle.setAttribute("aria-selected", "true");
        }
        (focusedEle || selectedEle).setAttribute("aria-label", title);
        id = (focusedEle || selectedEle).getAttribute("id");
      }
      return id;
    };
    CalendarBase2.prototype.iconHandler = function() {
      new Date(this.checkValue(this.currentDate)).setDate(1);
      switch (this.currentView()) {
        case "Month":
          this.previousIconHandler(this.compareMonth(new Date(this.checkValue(this.currentDate)), this.min) < 1);
          this.nextIconHandler(this.compareMonth(new Date(this.checkValue(this.currentDate)), this.max) > -1);
          break;
        case "Year":
          this.previousIconHandler(this.compareYear(new Date(this.checkValue(this.currentDate)), this.min) < 1);
          this.nextIconHandler(this.compareYear(new Date(this.checkValue(this.currentDate)), this.max) > -1);
          break;
        case "Decade":
          this.previousIconHandler(this.compareDecade(new Date(this.checkValue(this.currentDate)), this.min) < 1);
          this.nextIconHandler(this.compareDecade(new Date(this.checkValue(this.currentDate)), this.max) > -1);
      }
    };
    CalendarBase2.prototype.destroy = function() {
      if (this.getModuleName() === "calendar" && this.element) {
        removeClass([this.element], [ROOT7]);
      } else {
        if (this.calendarElement && this.element) {
          removeClass([this.element], [ROOT7]);
        }
      }
      if (this.getModuleName() === "calendar" && this.element) {
        if (!isNullOrUndefined(this.headerTitleElement)) {
          EventHandler.remove(this.headerTitleElement, "click", this.navigateTitle);
        }
        if (this.todayElement) {
          EventHandler.remove(this.todayElement, "click", this.todayButtonClick);
        }
        this.previousIconHandler(true);
        this.nextIconHandler(true);
        this.keyboardModule.destroy();
        this.element.removeAttribute("data-role");
        if (!isNullOrUndefined(this.calendarEleCopy.getAttribute("tabindex"))) {
          this.element.setAttribute("tabindex", this.tabIndex);
        } else {
          this.element.removeAttribute("tabindex");
        }
      }
      if (this.element) {
        this.element.innerHTML = "";
      }
      this.todayElement = null;
      this.tableBodyElement = null;
      this.todayButtonEvent = null;
      this.renderDayCellArgs = null;
      this.headerElement = null;
      this.nextIcon = null;
      this.table = null;
      this.tableHeadElement = null;
      this.previousIcon = null;
      this.headerTitleElement = null;
      this.footer = null;
      this.contentElement = null;
      _super.prototype.destroy.call(this);
    };
    CalendarBase2.prototype.title = function(e) {
      var currentView = this.getViewNumber(this.currentView());
      this.effect = ZOOMIN;
      this.switchView(++currentView, e);
    };
    CalendarBase2.prototype.getViewNumber = function(stringVal) {
      if (stringVal === "Month") {
        return 0;
      } else if (stringVal === "Year") {
        return 1;
      } else {
        return 2;
      }
    };
    CalendarBase2.prototype.navigateTitle = function(e) {
      e.preventDefault();
      this.title(e);
    };
    CalendarBase2.prototype.previous = function() {
      this.effect = "";
      var currentView = this.getViewNumber(this.currentView());
      switch (this.currentView()) {
        case "Month":
          this.addMonths(this.currentDate, -1);
          this.switchView(currentView);
          break;
        case "Year":
          this.addYears(this.currentDate, -1);
          this.switchView(currentView);
          break;
        case "Decade":
          this.addYears(this.currentDate, -10);
          this.switchView(currentView);
          break;
      }
    };
    CalendarBase2.prototype.navigatePrevious = function(e) {
      !Browser.isDevice && e.preventDefault();
      if (this.calendarMode === "Gregorian") {
        this.previous();
      } else {
        this.islamicModule.islamicPrevious();
      }
      this.triggerNavigate(e);
    };
    CalendarBase2.prototype.next = function() {
      this.effect = "";
      var currentView = this.getViewNumber(this.currentView());
      switch (this.currentView()) {
        case "Month":
          this.addMonths(this.currentDate, 1);
          this.switchView(currentView);
          break;
        case "Year":
          this.addYears(this.currentDate, 1);
          this.switchView(currentView);
          break;
        case "Decade":
          this.addYears(this.currentDate, 10);
          this.switchView(currentView);
          break;
      }
    };
    CalendarBase2.prototype.navigateNext = function(eve) {
      !Browser.isDevice && eve.preventDefault();
      if (this.calendarMode === "Gregorian") {
        this.next();
      } else {
        this.islamicModule.islamicNext();
      }
      this.triggerNavigate(eve);
    };
    CalendarBase2.prototype.navigateTo = function(view, date, isCustomDate) {
      if (+date >= +this.min && +date <= +this.max) {
        this.currentDate = date;
      }
      if (+date <= +this.min) {
        this.currentDate = new Date(this.checkValue(this.min));
      }
      if (+date >= +this.max) {
        this.currentDate = new Date(this.checkValue(this.max));
      }
      if (this.getViewNumber(this.depth) >= this.getViewNumber(view)) {
        if (this.getViewNumber(this.depth) <= this.getViewNumber(this.start) || this.getViewNumber(this.depth) === this.getViewNumber(view)) {
          view = this.depth;
        }
      }
      this.switchView(this.getViewNumber(view), null, null, isCustomDate);
    };
    CalendarBase2.prototype.currentView = function() {
      if (!isNullOrUndefined(this.contentElement) && this.contentElement.classList.contains(YEAR)) {
        return "Year";
      } else if (!isNullOrUndefined(this.contentElement) && this.contentElement.classList.contains(DECADE)) {
        return "Decade";
      } else {
        return "Month";
      }
    };
    CalendarBase2.prototype.getDateVal = function(date, value) {
      return !isNullOrUndefined(value) && date.getDate() === value.getDate() && date.getMonth() === value.getMonth() && date.getFullYear() === value.getFullYear();
    };
    CalendarBase2.prototype.getCultureObjects = function(ld, c) {
      var gregorianFormat = !isNullOrUndefined(this.dayHeaderFormat) ? ".dates.calendars.gregorian.days.format." + this.dayHeaderFormat.toLowerCase() : null;
      var islamicFormat = !isNullOrUndefined(this.dayHeaderFormat) ? ".dates.calendars.islamic.days.format." + this.dayHeaderFormat.toLowerCase() : null;
      var mainVal = "main.";
      if (this.calendarMode === "Gregorian") {
        return getValue(mainVal + "" + this.locale + gregorianFormat, ld);
      } else {
        return getValue("main." + this.locale + islamicFormat, ld);
      }
    };
    CalendarBase2.prototype.getWeek = function(d) {
      var currentDate = new Date(this.checkValue(d)).valueOf();
      var date = new Date(d.getFullYear(), 0, 1).valueOf();
      return Math.ceil((currentDate - date + dayMilliSeconds) / dayMilliSeconds / 7);
    };
    CalendarBase2.prototype.setStartDate = function(date, time) {
      var tzOffset = date.getTimezoneOffset();
      var d = new Date(date.getTime() + time);
      var tzOffsetDiff = d.getTimezoneOffset() - tzOffset;
      date.setTime(d.getTime() + tzOffsetDiff * minutesMilliSeconds);
    };
    CalendarBase2.prototype.addMonths = function(date, i) {
      if (this.calendarMode === "Gregorian") {
        var day = date.getDate();
        date.setDate(1);
        date.setMonth(date.getMonth() + i);
        date.setDate(Math.min(day, this.getMaxDays(date)));
      } else {
        var islamicDate = this.islamicModule.getIslamicDate(date);
        this.currentDate = this.islamicModule.toGregorian(islamicDate.year, islamicDate.month + i, 1);
      }
    };
    CalendarBase2.prototype.addYears = function(date, i) {
      if (this.calendarMode === "Gregorian") {
        var day = date.getDate();
        date.setDate(1);
        date.setFullYear(date.getFullYear() + i);
        date.setDate(Math.min(day, this.getMaxDays(date)));
      } else {
        var islamicDate = this.islamicModule.getIslamicDate(date);
        this.currentDate = this.islamicModule.toGregorian(islamicDate.year + i, islamicDate.month, 1);
      }
    };
    CalendarBase2.prototype.getIdValue = function(e, element2) {
      var eve;
      if (e) {
        eve = e.currentTarget;
      } else {
        eve = element2;
      }
      var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
      var dateFormatOptions = {
        type: "dateTime",
        skeleton: "full",
        calendar: type
      };
      var dateString = this.globalize.formatDate(new Date(parseInt("" + eve.getAttribute("id"), 0)), dateFormatOptions);
      var date = this.globalize.parseDate(dateString, dateFormatOptions);
      var value = date.valueOf() - date.valueOf() % 1e3;
      return new Date(value);
    };
    CalendarBase2.prototype.adjustLongHeaderSize = function() {
      removeClass([this.element], DAYHEADERLONG);
      if (this.dayHeaderFormat === "Wide") {
        addClass([this.getModuleName() === "calendar" ? this.element : this.calendarElement], DAYHEADERLONG);
      }
    };
    CalendarBase2.prototype.selectDate = function(e, date, node, multiSelection, values) {
      var element2 = node || e.currentTarget;
      this.isDateSelected = false;
      if (this.currentView() === "Decade") {
        this.setDateDecade(this.currentDate, date.getFullYear());
      } else if (this.currentView() === "Year") {
        this.setDateYear(this.currentDate, date);
      } else {
        if (multiSelection && !this.checkPresentDate(date, values)) {
          var copyValues = this.copyValues(values);
          if (!isNullOrUndefined(values) && copyValues.length > 0) {
            copyValues.push(new Date(this.checkValue(date)));
            this.setProperties({
              values: copyValues
            }, true);
            this.setProperties({
              value: values[values.length - 1]
            }, true);
          } else {
            this.setProperties({
              values: [new Date(this.checkValue(date))]
            }, true);
          }
        } else {
          this.setProperties({
            value: new Date(this.checkValue(date))
          }, true);
        }
        this.currentDate = new Date(this.checkValue(date));
      }
      var tableBodyElement = closest(element2, "." + ROOT7);
      if (isNullOrUndefined(tableBodyElement)) {
        tableBodyElement = this.tableBodyElement;
      }
      if (!multiSelection && !isNullOrUndefined(tableBodyElement.querySelector("." + SELECTED5))) {
        removeClass([tableBodyElement.querySelector("." + SELECTED5)], SELECTED5);
      }
      if (!multiSelection && !isNullOrUndefined(tableBodyElement.querySelector("." + FOCUSEDDATE))) {
        removeClass([tableBodyElement.querySelector("." + FOCUSEDDATE)], FOCUSEDDATE);
      }
      if (!multiSelection && !isNullOrUndefined(tableBodyElement.querySelector("." + FOCUSEDCELL))) {
        removeClass([tableBodyElement.querySelector("." + FOCUSEDCELL)], FOCUSEDCELL);
      }
      if (multiSelection) {
        var copyValues = this.copyValues(values);
        var collection = Array.prototype.slice.call(this.tableBodyElement.querySelectorAll("td"));
        for (var index = 0; index < collection.length; index++) {
          var tempElement = tableBodyElement.querySelectorAll("td." + FOCUSEDDATE)[0];
          var selectedElement = tableBodyElement.querySelectorAll("td." + SELECTED5)[0];
          if (collection[index] === tempElement) {
            removeClass([collection[index]], FOCUSEDDATE);
          }
          if (collection[index] === selectedElement && !this.checkPresentDate(new Date(parseInt(selectedElement.getAttribute("id").split("_")[0], 10)), values)) {
            removeClass([collection[index]], SELECTED5);
          }
        }
        if (element2.classList.contains(SELECTED5)) {
          removeClass([element2], SELECTED5);
          for (var i = 0; i < copyValues.length; i++) {
            var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
            var formatOptions = {
              format: null,
              type: "date",
              skeleton: "short",
              calendar: type
            };
            var localDateString = this.globalize.formatDate(date, formatOptions);
            var tempDateString = this.globalize.formatDate(copyValues[i], formatOptions);
            if (localDateString === tempDateString) {
              var index = copyValues.indexOf(copyValues[i]);
              copyValues.splice(index, 1);
              addClass([element2], FOCUSEDDATE);
            }
          }
          this.setProperties({
            values: copyValues
          }, true);
        } else {
          addClass([element2], SELECTED5);
        }
      } else {
        addClass([element2], SELECTED5);
      }
      this.isDateSelected = true;
    };
    CalendarBase2.prototype.checkPresentDate = function(dates, values) {
      var previousValue = false;
      if (!isNullOrUndefined(values)) {
        for (var checkPrevious = 0; checkPrevious < values.length; checkPrevious++) {
          var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
          var localDateString = this.globalize.formatDate(dates, {
            format: null,
            type: "date",
            skeleton: "short",
            calendar: type
          });
          var tempDateString = this.globalize.formatDate(values[checkPrevious], {
            format: null,
            type: "date",
            skeleton: "short",
            calendar: type
          });
          if (localDateString === tempDateString) {
            previousValue = true;
          }
        }
      }
      return previousValue;
    };
    CalendarBase2.prototype.setAriaActiveDescendant = function() {
      attributes(this.table, {
        "aria-activedescendant": "" + this.setActiveDescendant()
      });
    };
    CalendarBase2.prototype.previousIconHandler = function(disabled) {
      if (disabled) {
        if (!isNullOrUndefined(this.previousIcon)) {
          EventHandler.remove(this.previousIcon, "click", this.navigatePreviousHandler);
          addClass([this.previousIcon], "" + DISABLED10);
          addClass([this.previousIcon], "" + OVERLAY);
          this.previousIcon.setAttribute("aria-disabled", "true");
        }
      } else {
        EventHandler.add(this.previousIcon, "click", this.navigatePreviousHandler);
        removeClass([this.previousIcon], "" + DISABLED10);
        removeClass([this.previousIcon], "" + OVERLAY);
        this.previousIcon.setAttribute("aria-disabled", "false");
      }
    };
    CalendarBase2.prototype.renderDayCellEvent = function(args) {
      extend(this.renderDayCellArgs, {
        name: "renderDayCell"
      });
      this.trigger("renderDayCell", args);
    };
    CalendarBase2.prototype.navigatedEvent = function(eve) {
      extend(this.navigatedArgs, {
        name: "navigated",
        event: eve
      });
      this.trigger("navigated", this.navigatedArgs);
    };
    CalendarBase2.prototype.triggerNavigate = function(event2) {
      this.navigatedArgs = {
        view: this.currentView(),
        date: this.currentDate
      };
      this.navigatedEvent(event2);
    };
    CalendarBase2.prototype.nextIconHandler = function(disabled) {
      if (disabled) {
        if (!isNullOrUndefined(this.previousIcon)) {
          EventHandler.remove(this.nextIcon, "click", this.navigateNextHandler);
          addClass([this.nextIcon], DISABLED10);
          addClass([this.nextIcon], OVERLAY);
          this.nextIcon.setAttribute("aria-disabled", "true");
        }
      } else {
        EventHandler.add(this.nextIcon, "click", this.navigateNextHandler);
        removeClass([this.nextIcon], DISABLED10);
        removeClass([this.nextIcon], OVERLAY);
        this.nextIcon.setAttribute("aria-disabled", "false");
      }
    };
    CalendarBase2.prototype.compare = function(startDate, endDate, modifier) {
      var start = endDate.getFullYear();
      var end;
      var result;
      end = start;
      result = 0;
      if (modifier) {
        start = start - start % modifier;
        end = start - start % modifier + modifier - 1;
      }
      if (startDate.getFullYear() > end) {
        result = 1;
      } else if (startDate.getFullYear() < start) {
        result = -1;
      }
      return result;
    };
    CalendarBase2.prototype.isMinMaxRange = function(date) {
      return +date >= +this.min && +date <= +this.max;
    };
    CalendarBase2.prototype.isMonthYearRange = function(date) {
      if (this.calendarMode === "Gregorian") {
        return date.getMonth() >= this.min.getMonth() && date.getFullYear() >= this.min.getFullYear() && date.getMonth() <= this.max.getMonth() && date.getFullYear() <= this.max.getFullYear();
      } else {
        var islamicDate = this.islamicModule.getIslamicDate(date);
        return islamicDate.month >= this.islamicModule.getIslamicDate(new Date(1944, 1, 18)).month && islamicDate.year >= this.islamicModule.getIslamicDate(new Date(1944, 1, 18)).year && islamicDate.month <= this.islamicModule.getIslamicDate(new Date(2069, 1, 16)).month && islamicDate.year <= this.islamicModule.getIslamicDate(new Date(2069, 1, 16)).year;
      }
    };
    CalendarBase2.prototype.compareYear = function(start, end) {
      return this.compare(start, end, 0);
    };
    CalendarBase2.prototype.compareDecade = function(start, end) {
      return this.compare(start, end, 10);
    };
    CalendarBase2.prototype.shiftArray = function(array, i) {
      return array.slice(i).concat(array.slice(0, i));
    };
    CalendarBase2.prototype.addDay = function(date, i, e, max, min) {
      var column = i;
      var value = /* @__PURE__ */ new Date(+date);
      if (!isNullOrUndefined(this.tableBodyElement) && !isNullOrUndefined(e)) {
        while (this.findNextTD(/* @__PURE__ */ new Date(+date), column, max, min)) {
          column += i;
        }
        var rangeValue = new Date(value.setDate(value.getDate() + column));
        column = +rangeValue > +max || +rangeValue < +min ? column === i ? i - i : i : column;
      }
      date.setDate(date.getDate() + column);
    };
    CalendarBase2.prototype.findNextTD = function(date, column, max, min) {
      var value = new Date(date.setDate(date.getDate() + column));
      var collection = [];
      var isDisabled = false;
      if ((!isNullOrUndefined(value) && value.getMonth()) === (!isNullOrUndefined(this.currentDate) && this.currentDate.getMonth())) {
        var tdEles = void 0;
        if (this.calendarMode === "Gregorian") {
          tdEles = this.renderDays(value);
        } else {
          tdEles = this.islamicModule.islamicRenderDays(this.currentDate, value);
        }
        collection = tdEles.filter(function(element2) {
          return element2.classList.contains(DISABLED10);
        });
      } else {
        collection = this.tableBodyElement.querySelectorAll("td." + DISABLED10);
      }
      if (+value <= +max && +value >= +min) {
        if (collection.length) {
          for (var i = 0; i < collection.length; i++) {
            isDisabled = +value === +new Date(parseInt(collection[i].id, 0)) ? true : false;
            if (isDisabled) {
              break;
            }
          }
        }
      }
      return isDisabled;
    };
    CalendarBase2.prototype.getMaxDays = function(d) {
      var date;
      var tmpDate = new Date(this.checkValue(d));
      date = 28;
      var month = tmpDate.getMonth();
      while (tmpDate.getMonth() === month) {
        ++date;
        tmpDate.setDate(date);
      }
      return date - 1;
    };
    CalendarBase2.prototype.setDateDecade = function(date, year) {
      date.setFullYear(year);
      this.setProperties({
        value: new Date(this.checkValue(date))
      }, true);
    };
    CalendarBase2.prototype.setDateYear = function(date, value) {
      date.setFullYear(value.getFullYear(), value.getMonth(), date.getDate());
      if (value.getMonth() !== date.getMonth()) {
        date.setDate(0);
        this.currentDate = new Date(this.checkValue(value));
      }
      this.setProperties({
        value: new Date(this.checkValue(date))
      }, true);
    };
    CalendarBase2.prototype.compareMonth = function(start, end) {
      var result;
      if (start.getFullYear() > end.getFullYear()) {
        result = 1;
      } else if (start.getFullYear() < end.getFullYear()) {
        result = -1;
      } else {
        result = start.getMonth() === end.getMonth() ? 0 : start.getMonth() > end.getMonth() ? 1 : -1;
      }
      return result;
    };
    CalendarBase2.prototype.checkValue = function(inValue) {
      if (inValue instanceof Date) {
        return inValue.toUTCString();
      } else {
        return "" + inValue;
      }
    };
    CalendarBase2.prototype.checkView = function() {
      if (this.start !== "Decade" && this.start !== "Year") {
        this.setProperties({
          start: "Month"
        }, true);
      }
      if (this.depth !== "Decade" && this.depth !== "Year") {
        this.setProperties({
          depth: "Month"
        }, true);
      }
      if (this.getViewNumber(this.depth) > this.getViewNumber(this.start)) {
        this.setProperties({
          depth: "Month"
        }, true);
      }
    };
    CalendarBase2.prototype.getDate = function(date, timezone) {
      if (timezone) {
        date = new Date(date.toLocaleString("en-US", {
          timeZone: timezone
        }));
      }
      return date;
    };
    __decorate46([Property(new Date(1900, 0, 1))], CalendarBase2.prototype, "min", void 0);
    __decorate46([Property(true)], CalendarBase2.prototype, "enabled", void 0);
    __decorate46([Property(null)], CalendarBase2.prototype, "cssClass", void 0);
    __decorate46([Property(new Date(2099, 11, 31))], CalendarBase2.prototype, "max", void 0);
    __decorate46([Property(null)], CalendarBase2.prototype, "firstDayOfWeek", void 0);
    __decorate46([Property("Gregorian")], CalendarBase2.prototype, "calendarMode", void 0);
    __decorate46([Property("Month")], CalendarBase2.prototype, "start", void 0);
    __decorate46([Property("Month")], CalendarBase2.prototype, "depth", void 0);
    __decorate46([Property(false)], CalendarBase2.prototype, "weekNumber", void 0);
    __decorate46([Property("FirstDay")], CalendarBase2.prototype, "weekRule", void 0);
    __decorate46([Property(true)], CalendarBase2.prototype, "showTodayButton", void 0);
    __decorate46([Property("Short")], CalendarBase2.prototype, "dayHeaderFormat", void 0);
    __decorate46([Property(false)], CalendarBase2.prototype, "enablePersistence", void 0);
    __decorate46([Property(null)], CalendarBase2.prototype, "keyConfigs", void 0);
    __decorate46([Property(null)], CalendarBase2.prototype, "serverTimezoneOffset", void 0);
    __decorate46([Event()], CalendarBase2.prototype, "created", void 0);
    __decorate46([Event()], CalendarBase2.prototype, "destroyed", void 0);
    __decorate46([Event()], CalendarBase2.prototype, "navigated", void 0);
    __decorate46([Event()], CalendarBase2.prototype, "renderDayCell", void 0);
    CalendarBase2 = __decorate46([NotifyPropertyChanges], CalendarBase2);
    return CalendarBase2;
  }(Component)
);
var Calendar = (
  /** @class */
  function(_super) {
    __extends48(Calendar2, _super);
    function Calendar2(options, element2) {
      return _super.call(this, options, element2) || this;
    }
    Calendar2.prototype.render = function() {
      if (this.calendarMode === "Islamic" && this.islamicModule === void 0) {
        throwError("Requires the injectable Islamic modules to render Calendar in Islamic mode");
      }
      if (this.isMultiSelection && typeof this.values === "object" && !isNullOrUndefined(this.values) && this.values.length > 0) {
        var tempValues = [];
        var copyValues = [];
        for (var limit = 0; limit < this.values.length; limit++) {
          if (tempValues.indexOf(+this.values[limit]) === -1) {
            tempValues.push(+this.values[limit]);
            copyValues.push(this.values[limit]);
          }
        }
        this.setProperties({
          values: copyValues
        }, true);
        for (var index = 0; index < this.values.length; index++) {
          if (!this.checkDateValue(this.values[index])) {
            if (typeof this.values[index] === "string" && this.checkDateValue(new Date(this.checkValue(this.values[index])))) {
              var copyDate = new Date(this.checkValue(this.values[index]));
              this.values.splice(index, 1);
              this.values.splice(index, 0, copyDate);
            } else {
              this.values.splice(index, 1);
            }
          }
        }
        this.setProperties({
          value: this.values[this.values.length - 1]
        }, true);
        this.previousValues = this.values.length;
      }
      this.validateDate();
      this.minMaxUpdate();
      if (this.getModuleName() === "calendar") {
        this.setEnable(this.enabled);
        this.setClass(this.cssClass);
      }
      _super.prototype.render.call(this);
      if (this.getModuleName() === "calendar") {
        var form = closest(this.element, "form");
        if (form) {
          EventHandler.add(form, "reset", this.formResetHandler.bind(this));
        }
        this.setTimeZone(this.serverTimezoneOffset);
      }
      this.renderComplete();
    };
    Calendar2.prototype.setEnable = function(enable) {
      if (!enable) {
        addClass([this.element], DISABLED10);
      } else {
        removeClass([this.element], DISABLED10);
      }
    };
    Calendar2.prototype.setClass = function(newCssClass, oldCssClass) {
      if (!isNullOrUndefined(oldCssClass)) {
        oldCssClass = oldCssClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(newCssClass)) {
        newCssClass = newCssClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(oldCssClass) && oldCssClass !== "") {
        removeClass([this.element], oldCssClass.split(" "));
      }
      if (!isNullOrUndefined(newCssClass)) {
        addClass([this.element], newCssClass.split(" "));
      }
    };
    Calendar2.prototype.isDayLightSaving = function() {
      var secondOffset = new Date(this.value.getFullYear(), 6, 1).getTimezoneOffset();
      var firstOffset = new Date(this.value.getFullYear(), 0, 1).getTimezoneOffset();
      return this.value.getTimezoneOffset() < Math.max(firstOffset, secondOffset);
    };
    Calendar2.prototype.setTimeZone = function(offsetValue) {
      if (!isNullOrUndefined(this.serverTimezoneOffset) && this.value) {
        var serverTimezoneDiff = offsetValue;
        var clientTimeZoneDiff = (/* @__PURE__ */ new Date()).getTimezoneOffset() / 60;
        var timeZoneDiff = serverTimezoneDiff + clientTimeZoneDiff;
        timeZoneDiff = this.isDayLightSaving() ? timeZoneDiff-- : timeZoneDiff;
        this.value = new Date(this.value.getTime() + timeZoneDiff * 60 * 60 * 1e3);
      }
    };
    Calendar2.prototype.formResetHandler = function() {
      this.setProperties({
        value: null
      }, true);
    };
    Calendar2.prototype.validateDate = function() {
      if (typeof this.value === "string") {
        this.setProperties({
          value: this.checkDateValue(new Date(this.checkValue(this.value)))
        }, true);
      }
      _super.prototype.validateDate.call(this, this.value);
      if (!isNullOrUndefined(this.value) && this.min <= this.max && this.value >= this.min && this.value <= this.max) {
        this.currentDate = new Date(this.checkValue(this.value));
      }
      if (isNaN(+this.value)) {
        this.setProperties({
          value: null
        }, true);
      }
    };
    Calendar2.prototype.minMaxUpdate = function() {
      if (this.getModuleName() === "calendar") {
        if (!isNullOrUndefined(this.value) && this.value <= this.min && this.min <= this.max) {
          this.setProperties({
            value: this.min
          }, true);
          this.changedArgs = {
            value: this.value
          };
        } else {
          if (!isNullOrUndefined(this.value) && this.value >= this.max && this.min <= this.max) {
            this.setProperties({
              value: this.max
            }, true);
            this.changedArgs = {
              value: this.value
            };
          }
        }
      }
      if (this.getModuleName() !== "calendar" && !isNullOrUndefined(this.value)) {
        if (!isNullOrUndefined(this.value) && this.value < this.min && this.min <= this.max) {
          _super.prototype.minMaxUpdate.call(this, this.min);
        } else {
          if (!isNullOrUndefined(this.value) && this.value > this.max && this.min <= this.max) {
            _super.prototype.minMaxUpdate.call(this, this.max);
          }
        }
      } else {
        _super.prototype.minMaxUpdate.call(this, this.value);
      }
    };
    Calendar2.prototype.generateTodayVal = function(value) {
      var tempValue = /* @__PURE__ */ new Date();
      if (!isNullOrUndefined(this.timezone)) {
        tempValue = _super.prototype.getDate.call(this, tempValue, this.timezone);
      }
      if (value && isNullOrUndefined(this.timezone)) {
        tempValue.setHours(value.getHours());
        tempValue.setMinutes(value.getMinutes());
        tempValue.setSeconds(value.getSeconds());
        tempValue.setMilliseconds(value.getMilliseconds());
      } else {
        tempValue = new Date(tempValue.getFullYear(), tempValue.getMonth(), tempValue.getDate(), 0, 0, 0, 0);
      }
      return tempValue;
    };
    Calendar2.prototype.todayButtonClick = function(e) {
      if (this.showTodayButton) {
        var tempValue = this.generateTodayVal(this.value);
        this.setProperties({
          value: tempValue
        }, true);
        this.isTodayClicked = true;
        this.todayButtonEvent = e;
        if (this.isMultiSelection) {
          var copyValues = this.copyValues(this.values);
          if (!_super.prototype.checkPresentDate.call(this, tempValue, this.values)) {
            copyValues.push(tempValue);
            this.setProperties({
              values: copyValues
            });
          }
        }
        _super.prototype.todayButtonClick.call(this, e, /* @__PURE__ */ new Date(+this.value));
      }
    };
    Calendar2.prototype.keyActionHandle = function(e) {
      _super.prototype.keyActionHandle.call(this, e, this.value, this.isMultiSelection);
    };
    Calendar2.prototype.preRender = function() {
      var _this = this;
      this.changeHandler = function(e) {
        _this.triggerChange(e);
      };
      this.checkView();
      _super.prototype.preRender.call(this, this.value);
    };
    Calendar2.prototype.createContent = function() {
      this.previousDate = this.value;
      this.previousDateTime = this.value;
      _super.prototype.createContent.call(this);
    };
    Calendar2.prototype.minMaxDate = function(localDate) {
      return _super.prototype.minMaxDate.call(this, localDate);
    };
    Calendar2.prototype.renderMonths = function(e, value, isCustomDate) {
      _super.prototype.renderMonths.call(this, e, this.value, isCustomDate);
    };
    Calendar2.prototype.renderDays = function(currentDate, value, isMultiSelect, values, isCustomDate, e) {
      var tempDays = _super.prototype.renderDays.call(this, currentDate, this.value, this.isMultiSelection, this.values, isCustomDate, e);
      if (this.isMultiSelection) {
        _super.prototype.validateValues.call(this, this.isMultiSelection, this.values);
      }
      return tempDays;
    };
    Calendar2.prototype.renderYears = function(e) {
      if (this.calendarMode === "Gregorian") {
        _super.prototype.renderYears.call(this, e, this.value);
      } else {
        this.islamicModule.islamicRenderYears(e, this.value);
      }
    };
    Calendar2.prototype.renderDecades = function(e) {
      if (this.calendarMode === "Gregorian") {
        _super.prototype.renderDecades.call(this, e, this.value);
      } else {
        this.islamicModule.islamicRenderDecade(e, this.value);
      }
    };
    Calendar2.prototype.renderTemplate = function(elements, count, classNm, e) {
      if (this.calendarMode === "Gregorian") {
        _super.prototype.renderTemplate.call(this, elements, count, classNm, e, this.value);
      } else {
        this.islamicModule.islamicRenderTemplate(elements, count, classNm, e, this.value);
      }
      this.changedArgs = {
        value: this.value,
        values: this.values
      };
      e && e.type === "click" && e.currentTarget.classList.contains(OTHERMONTH) ? this.changeHandler(e) : this.changeHandler();
    };
    Calendar2.prototype.clickHandler = function(e) {
      var eve = e.currentTarget;
      this.isPopupClicked = true;
      if (eve.classList.contains(OTHERMONTH)) {
        if (this.isMultiSelection) {
          var copyValues = this.copyValues(this.values);
          if (copyValues.toString().indexOf(this.getIdValue(e, null).toString()) === -1) {
            copyValues.push(this.getIdValue(e, null));
            this.setProperties({
              values: copyValues
            }, true);
            this.setProperties({
              value: this.values[this.values.length - 1]
            }, true);
          } else {
            this.previousDates = true;
          }
        } else {
          this.setProperties({
            value: this.getIdValue(e, null)
          }, true);
        }
      }
      var storeView = this.currentView();
      _super.prototype.clickHandler.call(this, e, this.value);
      if (this.isMultiSelection && this.currentDate !== this.value && !isNullOrUndefined(this.tableBodyElement.querySelectorAll("." + FOCUSEDDATE)[0]) && storeView === "Year") {
        this.tableBodyElement.querySelectorAll("." + FOCUSEDDATE)[0].classList.remove(FOCUSEDDATE);
      }
    };
    Calendar2.prototype.switchView = function(view, e, isMultiSelection, isCustomDate) {
      _super.prototype.switchView.call(this, view, e, this.isMultiSelection, isCustomDate);
    };
    Calendar2.prototype.getModuleName = function() {
      _super.prototype.getModuleName.call(this);
      return "calendar";
    };
    Calendar2.prototype.getPersistData = function() {
      _super.prototype.getPersistData.call(this);
      var keyEntity = ["value", "values"];
      return this.addOnPersist(keyEntity);
    };
    Calendar2.prototype.onPropertyChanged = function(newProp, oldProp) {
      this.effect = "";
      this.rangeValidation(this.min, this.max);
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "value":
            if (this.isDateSelected) {
              if (typeof newProp.value === "string") {
                this.setProperties({
                  value: new Date(this.checkValue(newProp.value))
                }, true);
              } else {
                newProp.value = new Date(this.checkValue(newProp.value));
              }
              if (isNaN(+this.value)) {
                this.setProperties({
                  value: oldProp.value
                }, true);
              }
              this.update();
            }
            break;
          case "values":
            if (this.isDateSelected) {
              if (typeof newProp.values === "string" || typeof newProp.values === "number") {
                this.setProperties({
                  values: null
                }, true);
              } else {
                var copyValues = this.copyValues(this.values);
                for (var index = 0; index < copyValues.length; index++) {
                  var tempDate = copyValues[index];
                  if (this.checkDateValue(tempDate) && !_super.prototype.checkPresentDate.call(this, tempDate, copyValues)) {
                    copyValues.push(tempDate);
                  }
                }
                this.setProperties({
                  values: copyValues
                }, true);
                if (this.values.length > 0) {
                  this.setProperties({
                    value: newProp.values[newProp.values.length - 1]
                  }, true);
                }
              }
              this.validateValues(this.isMultiSelection, this.values);
              this.update();
            }
            break;
          case "isMultiSelection":
            if (this.isDateSelected) {
              this.setProperties({
                isMultiSelection: newProp.isMultiSelection
              }, true);
              this.update();
            }
            break;
          case "enabled":
            this.setEnable(this.enabled);
            break;
          case "cssClass":
            if (this.getModuleName() === "calendar") {
              this.setClass(newProp.cssClass, oldProp.cssClass);
            }
            break;
          default:
            _super.prototype.onPropertyChanged.call(this, newProp, oldProp, this.isMultiSelection, this.values);
        }
      }
      this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;
    };
    Calendar2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      if (this.getModuleName() === "calendar") {
        this.changedArgs = null;
        var form = closest(this.element, "form");
        if (form) {
          EventHandler.remove(form, "reset", this.formResetHandler.bind(this));
        }
      }
    };
    Calendar2.prototype.navigateTo = function(view, date, isCustomDate) {
      this.minMaxUpdate();
      _super.prototype.navigateTo.call(this, view, date, isCustomDate);
    };
    Calendar2.prototype.currentView = function() {
      return _super.prototype.currentView.call(this);
    };
    Calendar2.prototype.addDate = function(dates) {
      if (typeof dates !== "string" && typeof dates !== "number") {
        var copyValues = this.copyValues(this.values);
        if (typeof dates === "object" && dates.length > 0) {
          var tempDates = dates;
          for (var i = 0; i < tempDates.length; i++) {
            if (this.checkDateValue(tempDates[i]) && !_super.prototype.checkPresentDate.call(this, tempDates[i], copyValues)) {
              if (!isNullOrUndefined(copyValues) && copyValues.length > 0) {
                copyValues.push(tempDates[i]);
              } else {
                copyValues = [/* @__PURE__ */ new Date(+tempDates[i])];
              }
            }
          }
        } else {
          if (this.checkDateValue(dates) && !_super.prototype.checkPresentDate.call(this, dates, copyValues)) {
            if (!isNullOrUndefined(copyValues) && copyValues.length > 0) {
              copyValues.push(dates);
            } else {
              copyValues = [/* @__PURE__ */ new Date(+dates)];
            }
          }
        }
        this.setProperties({
          values: copyValues
        }, true);
        if (this.isMultiSelection) {
          this.setProperties({
            value: this.values[this.values.length - 1]
          }, true);
        }
        this.validateValues(this.isMultiSelection, copyValues);
        this.update();
        this.changedArgs = {
          value: this.value,
          values: this.values
        };
        this.changeHandler();
      }
    };
    Calendar2.prototype.removeDate = function(dates) {
      if (typeof dates !== "string" && typeof dates !== "number" && !isNullOrUndefined(this.values) && this.values.length > 0) {
        var copyValues = this.copyValues(this.values);
        if (typeof dates === "object" && dates.length > 0) {
          var tempDates = dates;
          for (var index = 0; index < tempDates.length; index++) {
            for (var i = 0; i < copyValues.length; i++) {
              if (+copyValues[i] === +tempDates[index]) {
                copyValues.splice(i, 1);
              }
            }
          }
        } else {
          for (var i = 0; i < copyValues.length; i++) {
            if (+copyValues[i] === +dates) {
              copyValues.splice(i, 1);
            }
          }
        }
        this.setProperties({
          values: copyValues
        }, false);
        this.update();
        if (this.isMultiSelection) {
          this.setProperties({
            value: this.values[this.values.length - 1]
          }, true);
        }
        this.changedArgs = {
          value: this.value,
          values: this.values
        };
        this.changeHandler();
      }
    };
    Calendar2.prototype.setTodayDate = function(date) {
      var todayDate = /* @__PURE__ */ new Date(+date);
      this.setProperties({
        value: todayDate
      }, true);
      _super.prototype.todayButtonClick.call(this, null, todayDate, true);
    };
    Calendar2.prototype.update = function() {
      this.validateDate();
      this.minMaxUpdate();
      _super.prototype.setValueUpdate.call(this);
    };
    Calendar2.prototype.selectDate = function(e, date, element2) {
      _super.prototype.selectDate.call(this, e, date, element2, this.isMultiSelection, this.values);
      if (this.isMultiSelection && !isNullOrUndefined(this.values) && this.values.length > 0) {
        this.setProperties({
          value: this.values[this.values.length - 1]
        }, true);
      }
      this.changedArgs = {
        value: this.value,
        values: this.values
      };
      this.changeHandler(e);
    };
    Calendar2.prototype.changeEvent = function(e) {
      if ((this.value && this.value.valueOf()) !== (this.previousDate && +this.previousDate.valueOf()) || this.isMultiSelection) {
        if (this.isAngular && this.preventChange) {
          this.preventChange = false;
        } else {
          this.trigger("change", this.changedArgs);
        }
        this.previousDate = /* @__PURE__ */ new Date(+this.value);
      }
    };
    Calendar2.prototype.triggerChange = function(e) {
      if (!isNullOrUndefined(this.todayButtonEvent) && this.isTodayClicked) {
        e = this.todayButtonEvent;
        this.isTodayClicked = false;
      }
      this.changedArgs.event = e || null;
      this.changedArgs.isInteracted = !isNullOrUndefined(e);
      if (!isNullOrUndefined(this.value)) {
        this.setProperties({
          value: this.value
        }, true);
      }
      if (!this.isMultiSelection && +this.value !== Number.NaN && (!isNullOrUndefined(this.value) && !isNullOrUndefined(this.previousDate) || this.previousDate === null && !isNaN(+this.value))) {
        this.changeEvent(e);
      } else if (!isNullOrUndefined(this.values) && this.previousValues !== this.values.length) {
        this.changeEvent(e);
        this.previousValues = this.values.length;
      }
    };
    __decorate46([Property(null)], Calendar2.prototype, "value", void 0);
    __decorate46([Property(null)], Calendar2.prototype, "values", void 0);
    __decorate46([Property(false)], Calendar2.prototype, "isMultiSelection", void 0);
    __decorate46([Event()], Calendar2.prototype, "change", void 0);
    Calendar2 = __decorate46([NotifyPropertyChanges], Calendar2);
    return Calendar2;
  }(CalendarBase)
);

// node_modules/@syncfusion/ej2-calendars/src/datepicker/datepicker.js
var __extends49 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate47 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DATEWRAPPER = "e-date-wrapper";
var ROOT8 = "e-datepicker";
var LIBRARY = "e-lib";
var CONTROL5 = "e-control";
var POPUPWRAPPER = "e-popup-wrapper";
var INPUTWRAPPER2 = "e-input-group-icon";
var POPUP2 = "e-popup";
var INPUTCONTAINER = "e-input-group";
var INPUTFOCUS = "e-input-focus";
var INPUTROOT = "e-input";
var ERROR3 = "e-error";
var ACTIVE3 = "e-active";
var OVERFLOW = "e-date-overflow";
var DATEICON = "e-date-icon";
var ICONS2 = "e-icons";
var OPENDURATION = 300;
var OFFSETVALUE = 4;
var SELECTED6 = "e-selected";
var FOCUSEDDATE2 = "e-focused-date";
var NONEDIT = "e-non-edit";
var containerAttr2 = ["title", "class", "style"];
var DatePicker = (
  /** @class */
  function(_super) {
    __extends49(DatePicker2, _super);
    function DatePicker2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.isDateIconClicked = false;
      _this.isAltKeyPressed = false;
      _this.isInteracted = true;
      _this.invalidValueString = null;
      _this.checkPreviousValue = null;
      _this.maskedDateValue = "";
      _this.preventChange = false;
      _this.isIconClicked = false;
      _this.isDynamicValueChanged = false;
      _this.moduleName = _this.getModuleName();
      _this.isFocused = false;
      _this.isBlur = false;
      _this.isKeyAction = false;
      _this.datepickerOptions = options;
      return _this;
    }
    DatePicker2.prototype.render = function() {
      this.initialize();
      this.bindEvents();
      if (this.floatLabelType !== "Never") {
        Input.calculateWidth(this.inputElement, this.inputWrapper.container);
      }
      if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
        this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
      }
      if (!isNullOrUndefined(closest(this.element, "fieldset")) && closest(this.element, "fieldset").disabled) {
        this.enabled = false;
      }
      this.renderComplete();
      this.setTimeZone(this.serverTimezoneOffset);
    };
    DatePicker2.prototype.setTimeZone = function(offsetValue) {
      if (!isNullOrUndefined(this.serverTimezoneOffset) && this.value) {
        var clientTimeZoneDiff = (/* @__PURE__ */ new Date()).getTimezoneOffset() / 60;
        var serverTimezoneDiff = offsetValue;
        var timeZoneDiff = serverTimezoneDiff + clientTimeZoneDiff;
        timeZoneDiff = this.isDayLightSaving() ? timeZoneDiff-- : timeZoneDiff;
        this.value = new Date(this.value.getTime() + timeZoneDiff * 60 * 60 * 1e3);
        this.updateInput();
        this.changeTrigger(null);
      }
    };
    DatePicker2.prototype.isDayLightSaving = function() {
      var firstOffset = new Date(this.value.getFullYear(), 0, 1).getTimezoneOffset();
      var secondOffset = new Date(this.value.getFullYear(), 6, 1).getTimezoneOffset();
      return this.value.getTimezoneOffset() < Math.max(firstOffset, secondOffset);
    };
    DatePicker2.prototype.setAllowEdit = function() {
      if (this.allowEdit) {
        if (!this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
      } else {
        attributes(this.inputElement, {
          "readonly": ""
        });
      }
      this.updateIconState();
    };
    DatePicker2.prototype.updateIconState = function() {
      if (!this.allowEdit && this.inputWrapper && !this.readonly) {
        if (this.inputElement.value === "") {
          removeClass([this.inputWrapper.container], [NONEDIT]);
        } else {
          addClass([this.inputWrapper.container], [NONEDIT]);
        }
      } else if (this.inputWrapper) {
        removeClass([this.inputWrapper.container], [NONEDIT]);
      }
    };
    DatePicker2.prototype.initialize = function() {
      this.checkInvalidValue(this.value);
      if (this.enableMask) {
        this.notify("createMask", {
          module: "MaskedDateTime"
        });
      }
      this.createInput();
      this.updateHtmlAttributeToWrapper();
      this.setAllowEdit();
      if (this.enableMask && !this.value && this.maskedDateValue && (this.floatLabelType === "Always" || !this.floatLabelType || !this.placeholder)) {
        this.updateInput(true);
        this.updateInputValue(this.maskedDateValue);
      } else if (!this.enableMask) {
        this.updateInput(true);
      }
      this.previousElementValue = this.inputElement.value;
      this.previousDate = !isNullOrUndefined(this.value) ? /* @__PURE__ */ new Date(+this.value) : null;
      this.inputElement.setAttribute("value", this.inputElement.value);
      this.inputValueCopy = this.value;
    };
    DatePicker2.prototype.createInput = function() {
      var ariaAttrs = {
        "aria-atomic": "true",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off",
        "autocorrect": "off",
        "autocapitalize": "off",
        "spellcheck": "false",
        "aria-invalid": "false"
      };
      if (this.getModuleName() === "datepicker") {
        var l10nLocale = {
          placeholder: this.placeholder
        };
        this.globalize = new Internationalization(this.locale);
        this.l10n = new L10n("datepicker", l10nLocale, this.locale);
        this.setProperties({
          placeholder: this.placeholder || this.l10n.getConstant("placeholder")
        }, true);
      }
      if (this.fullScreenMode && Browser.isDevice) {
        this.cssClass += " e-popup-expand";
      }
      var updatedCssClassValues = this.cssClass;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        updatedCssClassValues = this.cssClass.replace(/\s+/g, " ").trim();
      }
      var isBindClearAction = this.enableMask ? false : true;
      this.inputWrapper = Input.createInput({
        element: this.inputElement,
        floatLabelType: this.floatLabelType,
        bindClearAction: isBindClearAction,
        properties: {
          readonly: this.readonly,
          placeholder: this.placeholder,
          cssClass: updatedCssClassValues,
          enabled: this.enabled,
          enableRtl: this.enableRtl,
          showClearButton: this.showClearButton
        },
        buttons: [INPUTWRAPPER2 + " " + DATEICON + " " + ICONS2]
      }, this.createElement);
      this.setWidth(this.width);
      if (this.inputElement.name !== "") {
        this.inputElement.setAttribute("name", "" + this.inputElement.getAttribute("name"));
      } else {
        this.inputElement.setAttribute("name", "" + this.element.id);
      }
      attributes(this.inputElement, ariaAttrs);
      if (!this.inputElement.hasAttribute("aria-label")) {
        this.inputElement.setAttribute("aria-label", this.getModuleName());
      }
      if (!this.enabled) {
        this.inputElement.setAttribute("aria-disabled", "true");
        this.inputElement.tabIndex = -1;
      } else {
        this.inputElement.setAttribute("aria-disabled", "false");
        this.inputElement.setAttribute("tabindex", this.tabIndex);
      }
      Input.addAttributes({
        "aria-label": "select",
        "role": "button"
      }, this.inputWrapper.buttons[0]);
      addClass([this.inputWrapper.container], DATEWRAPPER);
    };
    DatePicker2.prototype.updateInput = function(isDynamic, isBlur) {
      if (isDynamic === void 0) {
        isDynamic = false;
      }
      if (isBlur === void 0) {
        isBlur = false;
      }
      var formatOptions;
      if (this.value && !this.isCalendar()) {
        this.disabledDates(isDynamic, isBlur);
      }
      if (isNaN(+new Date(this.checkValue(this.value)))) {
        this.setProperties({
          value: null
        }, true);
      }
      if (this.strictMode) {
        _super.prototype.validateDate.call(this);
        this.minMaxUpdates();
        _super.prototype.minMaxUpdate.call(this);
      }
      if (!isNullOrUndefined(this.value)) {
        var dateValue = this.value;
        var dateString = void 0;
        var tempFormat = !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat;
        if (this.getModuleName() === "datetimepicker") {
          if (this.calendarMode === "Gregorian") {
            dateString = this.globalize.formatDate(this.value, {
              format: tempFormat,
              type: "dateTime",
              skeleton: "yMd"
            });
          } else {
            dateString = this.globalize.formatDate(this.value, {
              format: tempFormat,
              type: "dateTime",
              skeleton: "yMd",
              calendar: "islamic"
            });
          }
        } else {
          if (this.calendarMode === "Gregorian") {
            formatOptions = {
              format: this.formatString,
              type: "dateTime",
              skeleton: "yMd"
            };
          } else {
            formatOptions = {
              format: this.formatString,
              type: "dateTime",
              skeleton: "yMd",
              calendar: "islamic"
            };
          }
          dateString = this.globalize.formatDate(this.value, formatOptions);
        }
        if (+dateValue <= +this.max && +dateValue >= +this.min) {
          this.updateInputValue(dateString);
        } else {
          var value = +dateValue >= +this.max || !+this.value || !+this.value || +dateValue <= +this.min;
          if (!this.strictMode && value) {
            this.updateInputValue(dateString);
          }
        }
      }
      if (isNullOrUndefined(this.value) && this.strictMode) {
        if (!this.enableMask) {
          this.updateInputValue("");
        } else {
          this.updateInputValue(this.maskedDateValue);
          this.notify("createMask", {
            module: "MaskedDateTime"
          });
        }
      }
      if (!this.strictMode && isNullOrUndefined(this.value) && this.invalidValueString) {
        this.updateInputValue(this.invalidValueString);
      }
      this.changedArgs = {
        value: this.value
      };
      this.errorClass();
      this.updateIconState();
    };
    DatePicker2.prototype.minMaxUpdates = function() {
      if (!isNullOrUndefined(this.value) && this.value < this.min && this.min <= this.max && this.strictMode) {
        this.setProperties({
          value: this.min
        }, true);
        this.changedArgs = {
          value: this.value
        };
      } else {
        if (!isNullOrUndefined(this.value) && this.value > this.max && this.min <= this.max && this.strictMode) {
          this.setProperties({
            value: this.max
          }, true);
          this.changedArgs = {
            value: this.value
          };
        }
      }
    };
    DatePicker2.prototype.checkStringValue = function(val) {
      var returnDate = null;
      var formatOptions = null;
      var formatDateTime = null;
      if (this.getModuleName() === "datetimepicker") {
        var culture = new Internationalization(this.locale);
        if (this.calendarMode === "Gregorian") {
          formatOptions = {
            format: this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd"
          };
          formatDateTime = {
            format: culture.getDatePattern({
              skeleton: "yMd"
            }),
            type: "dateTime"
          };
        } else {
          formatOptions = {
            format: this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd",
            calendar: "islamic"
          };
          formatDateTime = {
            format: culture.getDatePattern({
              skeleton: "yMd"
            }),
            type: "dateTime",
            calendar: "islamic"
          };
        }
      } else {
        if (this.calendarMode === "Gregorian") {
          formatOptions = {
            format: this.formatString,
            type: "dateTime",
            skeleton: "yMd"
          };
        } else {
          formatOptions = {
            format: this.formatString,
            type: "dateTime",
            skeleton: "yMd",
            calendar: "islamic"
          };
        }
      }
      returnDate = this.checkDateValue(this.globalize.parseDate(this.getAmPmValue(val), formatOptions));
      if (isNullOrUndefined(returnDate) && this.getModuleName() === "datetimepicker") {
        returnDate = this.checkDateValue(this.globalize.parseDate(this.getAmPmValue(val), formatDateTime));
      }
      return returnDate;
    };
    DatePicker2.prototype.checkInvalidValue = function(value) {
      if (!(value instanceof Date) && !isNullOrUndefined(value)) {
        var valueDate = null;
        var valueString = value;
        if (typeof value === "number") {
          valueString = value.toString();
        }
        var formatOptions = null;
        var formatDateTime = null;
        if (this.getModuleName() === "datetimepicker") {
          var culture = new Internationalization(this.locale);
          if (this.calendarMode === "Gregorian") {
            formatOptions = {
              format: this.dateTimeFormat,
              type: "dateTime",
              skeleton: "yMd"
            };
            formatDateTime = {
              format: culture.getDatePattern({
                skeleton: "yMd"
              }),
              type: "dateTime"
            };
          } else {
            formatOptions = {
              format: this.dateTimeFormat,
              type: "dateTime",
              skeleton: "yMd",
              calendar: "islamic"
            };
            formatDateTime = {
              format: culture.getDatePattern({
                skeleton: "yMd"
              }),
              type: "dateTime",
              calendar: "islamic"
            };
          }
        } else {
          if (this.calendarMode === "Gregorian") {
            formatOptions = {
              format: this.formatString,
              type: "dateTime",
              skeleton: "yMd"
            };
          } else {
            formatOptions = {
              format: this.formatString,
              type: "dateTime",
              skeleton: "yMd",
              calendar: "islamic"
            };
          }
        }
        var invalid = false;
        if (typeof valueString !== "string") {
          valueString = null;
          invalid = true;
        } else {
          if (typeof valueString === "string") {
            valueString = valueString.trim();
          }
          valueDate = this.checkStringValue(valueString);
          if (!valueDate) {
            var extISOString = null;
            var basicISOString = null;
            extISOString = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
            basicISOString = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
            if (!extISOString.test(valueString) && !basicISOString.test(valueString) || /^[a-zA-Z0-9- ]*$/.test(valueString) || isNaN(+new Date(this.checkValue(valueString)))) {
              invalid = true;
            } else {
              valueDate = new Date(valueString);
            }
          }
        }
        if (invalid) {
          if (!this.strictMode) {
            this.invalidValueString = valueString;
          }
          this.setProperties({
            value: null
          }, true);
        } else {
          this.setProperties({
            value: valueDate
          }, true);
        }
      }
    };
    DatePicker2.prototype.bindInputEvent = function() {
      if (!isNullOrUndefined(this.formatString) || this.enableMask) {
        if (this.enableMask || this.formatString.indexOf("y") === -1) {
          EventHandler.add(this.inputElement, "input", this.inputHandler, this);
        } else {
          EventHandler.remove(this.inputElement, "input", this.inputHandler);
        }
      }
    };
    DatePicker2.prototype.bindEvents = function() {
      EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.dateIconHandler, this);
      EventHandler.add(this.inputElement, "mouseup", this.mouseUpHandler, this);
      EventHandler.add(this.inputElement, "focus", this.inputFocusHandler, this);
      EventHandler.add(this.inputElement, "blur", this.inputBlurHandler, this);
      EventHandler.add(this.inputElement, "keyup", this.keyupHandler, this);
      if (this.enableMask) {
        EventHandler.add(this.inputElement, "keydown", this.keydownHandler, this);
      }
      this.bindInputEvent();
      EventHandler.add(this.inputElement, "change", this.inputChangeHandler, this);
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown touchstart", this.resetHandler, this);
      }
      if (this.formElement) {
        EventHandler.add(this.formElement, "reset", this.resetFormHandler, this);
      }
      this.defaultKeyConfigs = extend(this.defaultKeyConfigs, this.keyConfigs);
      this.keyboardModules = new KeyboardEvents(this.inputElement, {
        eventName: "keydown",
        keyAction: this.inputKeyActionHandle.bind(this),
        keyConfigs: this.defaultKeyConfigs
      });
    };
    DatePicker2.prototype.keydownHandler = function(e) {
      switch (e.code) {
        case "ArrowLeft":
        case "ArrowRight":
        case "ArrowUp":
        case "ArrowDown":
        case "Home":
        case "End":
        case "Backspace":
        case "Delete":
          if (this.enableMask && !this.popupObj && !this.readonly) {
            if (e.code !== "Delete" && e.code !== "Backspace") {
              e.preventDefault();
            }
            this.notify("keyDownHandler", {
              module: "MaskedDateTime",
              e
            });
          }
          break;
        default:
          break;
      }
    };
    DatePicker2.prototype.unBindEvents = function() {
      if (!isNullOrUndefined(this.inputWrapper)) {
        EventHandler.remove(this.inputWrapper.buttons[0], "mousedown", this.dateIconHandler);
      }
      EventHandler.remove(this.inputElement, "mouseup", this.mouseUpHandler);
      EventHandler.remove(this.inputElement, "focus", this.inputFocusHandler);
      EventHandler.remove(this.inputElement, "blur", this.inputBlurHandler);
      EventHandler.remove(this.inputElement, "change", this.inputChangeHandler);
      EventHandler.remove(this.inputElement, "keyup", this.keyupHandler);
      if (this.enableMask) {
        EventHandler.remove(this.inputElement, "keydown", this.keydownHandler);
      }
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.remove(this.inputWrapper.clearButton, "mousedown touchstart", this.resetHandler);
      }
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.resetFormHandler);
      }
    };
    DatePicker2.prototype.resetFormHandler = function() {
      if (!this.enabled) {
        return;
      }
      if (!this.inputElement.disabled) {
        var value = this.inputElement.getAttribute("value");
        if (this.element.tagName === "EJS-DATEPICKER" || this.element.tagName === "EJS-DATETIMEPICKER") {
          value = "";
          this.inputValueCopy = null;
          this.inputElement.setAttribute("value", "");
        }
        this.setProperties({
          value: this.inputValueCopy
        }, true);
        this.restoreValue();
        if (this.inputElement) {
          this.updateInputValue(value);
          this.errorClass();
        }
      }
    };
    DatePicker2.prototype.restoreValue = function() {
      this.currentDate = this.value ? this.value : /* @__PURE__ */ new Date();
      this.previousDate = this.value;
      this.previousElementValue = isNullOrUndefined(this.inputValueCopy) ? "" : this.globalize.formatDate(this.inputValueCopy, {
        format: this.formatString,
        type: "dateTime",
        skeleton: "yMd"
      });
    };
    DatePicker2.prototype.inputChangeHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      e.stopPropagation();
    };
    DatePicker2.prototype.bindClearEvent = function() {
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown touchstart", this.resetHandler, this);
      }
    };
    DatePicker2.prototype.resetHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      e.preventDefault();
      this.clear(e);
    };
    DatePicker2.prototype.mouseUpHandler = function(e) {
      if (this.enableMask) {
        e.preventDefault();
        this.notify("setMaskSelection", {
          module: "MaskedDateTime"
        });
      }
    };
    DatePicker2.prototype.clear = function(event2) {
      this.setProperties({
        value: null
      }, true);
      if (!this.enableMask) {
        this.updateInputValue("");
      }
      var clearedArgs = {
        event: event2
      };
      this.trigger("cleared", clearedArgs);
      this.invalidValueString = "";
      this.updateInput();
      this.popupUpdate();
      this.changeEvent(event2);
      if (this.enableMask) {
        this.notify("clearHandler", {
          module: "MaskedDateTime"
        });
      }
      if (closest(this.element, "form")) {
        var element2 = this.element;
        var keyupEvent = document.createEvent("KeyboardEvent");
        keyupEvent.initEvent("keyup", false, true);
        element2.dispatchEvent(keyupEvent);
      }
    };
    DatePicker2.prototype.preventEventBubbling = function(e) {
      e.preventDefault();
      this.interopAdaptor.invokeMethodAsync("OnDateIconClick");
    };
    DatePicker2.prototype.updateInputValue = function(value) {
      Input.setValue(value, this.inputElement, this.floatLabelType, this.showClearButton);
    };
    DatePicker2.prototype.dateIconHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      this.isIconClicked = true;
      if (Browser.isDevice) {
        this.inputElement.setAttribute("readonly", "");
        this.inputElement.blur();
      }
      e.preventDefault();
      if (!this.readonly) {
        if (this.isCalendar()) {
          this.hide(e);
        } else {
          this.isDateIconClicked = true;
          this.show(null, e);
          if (this.getModuleName() === "datetimepicker") {
            this.inputElement.focus();
          }
          this.inputElement.focus();
          addClass([this.inputWrapper.container], [INPUTFOCUS]);
          addClass(this.inputWrapper.buttons, ACTIVE3);
        }
      }
      this.isIconClicked = false;
    };
    DatePicker2.prototype.updateHtmlAttributeToWrapper = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (!isNullOrUndefined(this.htmlAttributes["" + key])) {
            if (containerAttr2.indexOf(key) > -1) {
              if (key === "class") {
                var updatedClassValues = this.htmlAttributes["" + key].replace(/\s+/g, " ").trim();
                if (updatedClassValues !== "") {
                  addClass([this.inputWrapper.container], updatedClassValues.split(" "));
                }
              } else if (key === "style") {
                var setStyle = this.inputWrapper.container.getAttribute(key);
                if (!isNullOrUndefined(setStyle)) {
                  if (setStyle.charAt(setStyle.length - 1) === ";") {
                    setStyle = setStyle + this.htmlAttributes["" + key];
                  } else {
                    setStyle = setStyle + ";" + this.htmlAttributes["" + key];
                  }
                } else {
                  setStyle = this.htmlAttributes["" + key];
                }
                this.inputWrapper.container.setAttribute(key, setStyle);
              } else {
                this.inputWrapper.container.setAttribute(key, this.htmlAttributes["" + key]);
              }
            }
          }
        }
      }
    };
    DatePicker2.prototype.updateHtmlAttributeToElement = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (containerAttr2.indexOf(key) < 0) {
            this.inputElement.setAttribute(key, this.htmlAttributes["" + key]);
          }
        }
      }
    };
    DatePicker2.prototype.updateCssClass = function(newCssClass, oldCssClass) {
      if (!isNullOrUndefined(oldCssClass)) {
        oldCssClass = oldCssClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(newCssClass)) {
        newCssClass = newCssClass.replace(/\s+/g, " ").trim();
      }
      Input.setCssClass(newCssClass, [this.inputWrapper.container], oldCssClass);
      if (this.popupWrapper) {
        Input.setCssClass(newCssClass, [this.popupWrapper], oldCssClass);
      }
    };
    DatePicker2.prototype.calendarKeyActionHandle = function(e) {
      switch (e.action) {
        case "escape":
          if (this.isCalendar()) {
            this.hide(e);
          } else {
            this.inputWrapper.container.children[this.index].blur();
          }
          break;
        case "enter":
          if (!this.isCalendar()) {
            this.show(null, e);
          } else {
            if (+this.value !== +this.currentDate && !this.isCalendar()) {
              this.inputWrapper.container.children[this.index].focus();
            }
          }
          if (this.getModuleName() === "datetimepicker") {
            this.inputElement.focus();
          }
          break;
      }
    };
    DatePicker2.prototype.inputFocusHandler = function() {
      this.isFocused = true;
      if (!this.enabled) {
        return;
      }
      if (this.enableMask && !this.inputElement.value && this.placeholder) {
        if (this.maskedDateValue && !this.value && (this.floatLabelType === "Auto" || this.floatLabelType === "Never" || this.placeholder)) {
          this.updateInputValue(this.maskedDateValue);
          this.inputElement.selectionStart = 0;
          this.inputElement.selectionEnd = this.inputElement.value.length;
        }
      }
      if (this.enableMask && this.showClearButton && this.inputElement && this.inputElement.value === this.maskedDateValue && this.inputWrapper && this.inputWrapper.clearButton && !this.inputWrapper.clearButton.classList.contains("e-clear-icon-hide")) {
        this.inputWrapper.clearButton.classList.add("e-clear-icon-hide");
      }
      var focusArguments = {
        model: this
      };
      this.isDateIconClicked = false;
      this.trigger("focus", focusArguments);
      this.updateIconState();
      if (this.openOnFocus && !this.isIconClicked) {
        this.show();
      }
    };
    DatePicker2.prototype.inputHandler = function(e) {
      this.isPopupClicked = false;
      if (this.enableMask) {
        if (!isNullOrUndefined(e) && !isNullOrUndefined(e.inputType) && e.inputType === "insertFromPaste") {
          this.notify("maskPasteInputHandler", {
            module: "MaskedDateTime"
          });
        } else {
          this.notify("inputHandler", {
            module: "MaskedDateTime"
          });
        }
      }
    };
    DatePicker2.prototype.inputBlurHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      this.strictModeUpdate();
      if (this.inputElement.value === "" && isNullOrUndefined(this.value)) {
        this.invalidValueString = null;
        this.updateInputValue("");
      }
      this.isBlur = true;
      this.updateInput(false, true);
      this.isBlur = false;
      this.popupUpdate();
      this.changeTrigger(e);
      if (this.enableMask && this.maskedDateValue && this.placeholder && this.floatLabelType !== "Always") {
        if (this.inputElement.value === this.maskedDateValue && !this.value && (this.floatLabelType === "Auto" || this.floatLabelType === "Never" || this.placeholder)) {
          this.updateInputValue("");
        }
      }
      this.errorClass();
      if (this.isCalendar() && document.activeElement === this.inputElement) {
        this.hide(e);
      }
      if (this.getModuleName() === "datepicker") {
        var blurArguments = {
          model: this
        };
        this.trigger("blur", blurArguments);
      }
      if (this.isCalendar()) {
        this.defaultKeyConfigs = extend(this.defaultKeyConfigs, this.keyConfigs);
        this.calendarKeyboardModules = new KeyboardEvents(this.calendarElement.children[1].firstElementChild, {
          eventName: "keydown",
          keyAction: this.calendarKeyActionHandle.bind(this),
          keyConfigs: this.defaultKeyConfigs
        });
      }
      this.isPopupClicked = false;
    };
    DatePicker2.prototype.documentHandler = function(e) {
      if (!isNullOrUndefined(this.popupObj) && !isNullOrUndefined(this.inputWrapper) && (this.inputWrapper.container.contains(e.target) && e.type !== "mousedown" || this.popupObj.element && this.popupObj.element.contains(e.target)) && e.type !== "touchstart") {
        e.preventDefault();
      }
      var target = e.target;
      if (!closest(target, ".e-datepicker.e-popup-wrapper") && !isNullOrUndefined(this.inputWrapper) && !(closest(target, "." + INPUTCONTAINER) === this.inputWrapper.container) && !target.classList.contains("e-day")) {
        this.hide(e);
        if (target.classList.contains("e-dlg-overlay")) {
          e.preventDefault();
        } else {
          this.focusOut();
        }
      } else if (closest(target, ".e-datepicker.e-popup-wrapper")) {
        if (target.classList.contains("e-day") && !isNullOrUndefined(e.target.parentElement) && e.target.parentElement.classList.contains("e-selected") && closest(target, ".e-content") && closest(target, ".e-content").classList.contains("e-" + this.depth.toLowerCase())) {
          this.hide(e);
        } else if (closest(target, ".e-footer-container") && target.classList.contains("e-today") && target.classList.contains("e-btn") && +/* @__PURE__ */ new Date(+this.value) === +_super.prototype.generateTodayVal.call(this, this.value)) {
          this.hide(e);
        }
      }
    };
    DatePicker2.prototype.inputKeyActionHandle = function(e) {
      var clickedView = this.currentView();
      switch (e.action) {
        case "altUpArrow":
          this.isAltKeyPressed = false;
          this.hide(e);
          this.inputElement.focus();
          break;
        case "altDownArrow":
          this.isAltKeyPressed = true;
          this.strictModeUpdate();
          this.updateInput();
          this.changeTrigger(e);
          if (this.getModuleName() === "datepicker") {
            this.show(null, e);
          }
          break;
        case "escape":
          this.hide(e);
          break;
        case "enter":
          this.strictModeUpdate();
          this.updateInput();
          this.popupUpdate();
          this.changeTrigger(e);
          this.errorClass();
          if (!this.isCalendar() && document.activeElement === this.inputElement) {
            this.hide(e);
          }
          if (this.isCalendar()) {
            e.preventDefault();
            e.stopPropagation();
          }
          break;
        case "tab":
        case "shiftTab": {
          var start = this.inputElement.selectionStart;
          var end = this.inputElement.selectionEnd;
          if (this.enableMask && !this.popupObj && !this.readonly) {
            var length_1 = this.inputElement.value.length;
            if (start === 0 && end === length_1 || end !== length_1 && e.action === "tab" || start !== 0 && e.action === "shiftTab") {
              e.preventDefault();
            }
            this.notify("keyDownHandler", {
              module: "MaskedDateTime",
              e
            });
            start = this.inputElement.selectionStart;
            end = this.inputElement.selectionEnd;
          }
          this.strictModeUpdate();
          this.updateInput();
          this.popupUpdate();
          this.changeTrigger(e);
          this.errorClass();
          if (this.enableMask) {
            this.inputElement.selectionStart = start;
            this.inputElement.selectionEnd = end;
          }
          if (e.action === "tab" && e.target === this.inputElement && this.isCalendar() && document.activeElement === this.inputElement) {
            e.preventDefault();
            this.headerTitleElement.focus();
          }
          if (e.action === "shiftTab" && e.target === this.inputElement && this.isCalendar() && document.activeElement === this.inputElement) {
            this.hide(e);
          }
          break;
        }
        default:
          this.defaultAction(e);
          if (e.action === "select" && clickedView === this.depth) {
            this.hide(e);
          }
      }
    };
    DatePicker2.prototype.defaultAction = function(e) {
      this.previousDate = !isNullOrUndefined(this.value) && /* @__PURE__ */ new Date(+this.value) || null;
      if (this.isCalendar()) {
        _super.prototype.keyActionHandle.call(this, e);
        if (this.isCalendar()) {
          attributes(this.inputElement, {
            "aria-activedescendant": "" + this.setActiveDescendant()
          });
        }
      }
    };
    DatePicker2.prototype.popupUpdate = function() {
      if (isNullOrUndefined(this.value) && !isNullOrUndefined(this.previousDate) || this.getModuleName() !== "datetimepicker" && +this.value !== +this.previousDate || this.getModuleName() === "datetimepicker" && +this.value !== +this.previousDateTime) {
        if (this.popupObj) {
          if (this.popupObj.element.querySelectorAll("." + SELECTED6).length > 0) {
            removeClass(this.popupObj.element.querySelectorAll("." + SELECTED6), [SELECTED6]);
          }
        }
        if (!isNullOrUndefined(this.value)) {
          if (+this.value >= +this.min && +this.value <= +this.max) {
            var targetdate = new Date(this.checkValue(this.value));
            _super.prototype.navigateTo.call(this, "Month", targetdate);
          }
        }
      }
    };
    DatePicker2.prototype.strictModeUpdate = function() {
      var format;
      var pattern = /^y/;
      var charPattern = /[^a-zA-Z]/;
      var formatOptions;
      if (this.getModuleName() === "datetimepicker") {
        format = !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat;
      } else if (!pattern.test(this.formatString) || charPattern.test(this.formatString)) {
        format = isNullOrUndefined(this.formatString) ? this.formatString : this.formatString.replace("dd", "d");
      }
      if (!isNullOrUndefined(format)) {
        var len = format.split("M").length - 1;
        if (len < 3) {
          format = format.replace("MM", "M");
        }
      } else {
        format = this.formatString;
      }
      var dateOptions;
      if (this.getModuleName() === "datetimepicker") {
        if (this.calendarMode === "Gregorian") {
          dateOptions = {
            format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd"
          };
        } else {
          dateOptions = {
            format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd",
            calendar: "islamic"
          };
        }
      } else {
        if (this.calendarMode === "Gregorian") {
          formatOptions = {
            format,
            type: "dateTime",
            skeleton: "yMd"
          };
        } else {
          formatOptions = {
            format,
            type: "dateTime",
            skeleton: "yMd",
            calendar: "islamic"
          };
        }
        dateOptions = formatOptions;
      }
      var date;
      if (typeof this.inputElement.value === "string") {
        this.inputElement.value = this.inputElement.value.trim();
      }
      if (this.getModuleName() === "datetimepicker") {
        if (this.checkDateValue(this.globalize.parseDate(this.getAmPmValue(this.inputElement.value), dateOptions))) {
          date = this.globalize.parseDate(this.getAmPmValue(this.inputElement.value), dateOptions);
        } else {
          if (this.calendarMode === "Gregorian") {
            formatOptions = {
              format,
              type: "dateTime",
              skeleton: "yMd"
            };
          } else {
            formatOptions = {
              format,
              type: "dateTime",
              skeleton: "yMd",
              calendar: "islamic"
            };
          }
          date = this.globalize.parseDate(this.getAmPmValue(this.inputElement.value), formatOptions);
        }
        if ((isNullOrUndefined(date) || typeof date === "object" && isNaN(date.getTime())) && !isNullOrUndefined(this.inputFormatsString)) {
          for (var _i = 0, _a = this.inputFormatsString; _i < _a.length; _i++) {
            var format_1 = _a[_i];
            var inputFormatOptions = void 0;
            if (this.calendarMode === "Gregorian") {
              inputFormatOptions = {
                format: format_1,
                type: "dateTime",
                skeleton: "yMd"
              };
            } else {
              inputFormatOptions = {
                format: format_1,
                type: "dateTime",
                skeleton: "yMd",
                calendar: "islamic"
              };
            }
            date = this.globalize.parseDate(this.getAmPmValue(this.inputElement.value), inputFormatOptions);
            if (!isNullOrUndefined(date) && date instanceof Date && !isNaN(date.getTime())) {
              break;
            }
          }
        }
      } else {
        date = this.globalize.parseDate(this.getAmPmValue(this.inputElement.value), dateOptions);
        if ((isNullOrUndefined(date) || typeof date === "object" && isNaN(date.getTime())) && !isNullOrUndefined(this.inputFormatsString)) {
          for (var _b = 0, _c = this.inputFormatsString; _b < _c.length; _b++) {
            var format_2 = _c[_b];
            var inputFormatOptions = void 0;
            if (this.calendarMode === "Gregorian") {
              inputFormatOptions = {
                format: format_2,
                type: "dateTime",
                skeleton: "yMd"
              };
            } else {
              inputFormatOptions = {
                format: format_2,
                type: "dateTime",
                skeleton: "yMd",
                calendar: "islamic"
              };
            }
            date = this.globalize.parseDate(this.getAmPmValue(this.inputElement.value), inputFormatOptions);
            if (!isNullOrUndefined(date) && date instanceof Date && !isNaN(date.getTime())) {
              break;
            }
          }
        }
        date = !isNullOrUndefined(date) && isNaN(+date) ? null : date;
        if (!isNullOrUndefined(this.formatString) && this.inputElement.value !== "" && this.strictMode) {
          if ((this.isPopupClicked || !this.isPopupClicked && this.inputElement.value === this.previousElementValue) && this.formatString.indexOf("y") === -1) {
            date.setFullYear(this.value.getFullYear());
          }
        }
      }
      if (this.getModuleName() === "datepicker" && this.value && !isNaN(+this.value) && date) {
        date.setHours(this.value.getHours(), this.value.getMinutes(), this.value.getSeconds(), this.value.getMilliseconds());
      }
      if (this.strictMode && date) {
        this.updateInputValue(this.globalize.formatDate(date, dateOptions));
        if (this.inputElement.value !== this.previousElementValue) {
          this.setProperties({
            value: date
          }, true);
        }
      } else if (!this.strictMode) {
        if (this.inputElement.value !== this.previousElementValue) {
          this.setProperties({
            value: date
          }, true);
        }
      }
      if (this.strictMode && !date && this.inputElement.value === (this.enableMask ? this.maskedDateValue : "")) {
        this.setProperties({
          value: null
        }, true);
      }
      if (isNaN(+this.value)) {
        this.setProperties({
          value: null
        }, true);
      }
      if (isNullOrUndefined(this.value)) {
        this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
      }
    };
    DatePicker2.prototype.createCalendar = function() {
      var _this = this;
      this.popupWrapper = this.createElement("div", {
        className: "" + ROOT8 + " " + POPUPWRAPPER,
        id: this.inputElement.id + "_options"
      });
      this.popupWrapper.setAttribute("aria-label", this.element.id);
      this.popupWrapper.setAttribute("role", "dialog");
      if (!isNullOrUndefined(this.cssClass)) {
        this.popupWrapper.className += " " + this.cssClass;
      }
      if (Browser.isDevice) {
        this.modelHeader();
        this.modal = this.createElement("div");
        this.modal.className = "" + ROOT8 + " e-date-modal";
        document.body.className += " " + OVERFLOW;
        this.modal.style.display = "block";
        document.body.appendChild(this.modal);
      }
      this.calendarElement.querySelector("table tbody").className = "";
      this.popupObj = new Popup(this.popupWrapper, {
        content: this.calendarElement,
        relateTo: Browser.isDevice ? document.body : this.inputWrapper.container,
        position: Browser.isDevice ? {
          X: "center",
          Y: "center"
        } : this.enableRtl ? {
          X: "right",
          Y: "bottom"
        } : {
          X: "left",
          Y: "bottom"
        },
        offsetY: OFFSETVALUE,
        targetType: "container",
        enableRtl: this.enableRtl,
        zIndex: this.zIndex,
        collision: Browser.isDevice ? {
          X: "fit",
          Y: "fit"
        } : this.enableRtl ? {
          X: "fit",
          Y: "flip"
        } : {
          X: "flip",
          Y: "flip"
        },
        open: function() {
          if (Browser.isDevice && _this.fullScreenMode) {
            _this.iconRight = parseInt(window.getComputedStyle(_this.calendarElement.querySelector(".e-header.e-month .e-prev")).marginRight, 10) > 16 ? true : false;
            _this.touchModule = new Touch(_this.calendarElement.querySelector(".e-content.e-month"), {
              swipe: _this.CalendarSwipeHandler.bind(_this)
            });
            EventHandler.add(_this.calendarElement.querySelector(".e-content.e-month"), "touchstart", _this.TouchStartHandler, _this);
          }
          if (_this.getModuleName() !== "datetimepicker") {
            if (document.activeElement !== _this.inputElement) {
              _this.defaultKeyConfigs = extend(_this.defaultKeyConfigs, _this.keyConfigs);
              _this.calendarElement.children[1].firstElementChild.focus();
              _this.calendarKeyboardModules = new KeyboardEvents(_this.calendarElement.children[1].firstElementChild, {
                eventName: "keydown",
                keyAction: _this.calendarKeyActionHandle.bind(_this),
                keyConfigs: _this.defaultKeyConfigs
              });
              _this.calendarKeyboardModules = new KeyboardEvents(_this.inputWrapper.container.children[_this.index], {
                eventName: "keydown",
                keyAction: _this.calendarKeyActionHandle.bind(_this),
                keyConfigs: _this.defaultKeyConfigs
              });
            }
          }
        },
        close: function() {
          if (_this.isDateIconClicked) {
            _this.inputWrapper.container.children[_this.index].focus();
          }
          if (_this.value) {
            _this.disabledDates();
          }
          if (_this.popupObj) {
            _this.popupObj.destroy();
          }
          _this.resetCalendar();
          detach(_this.popupWrapper);
          _this.popupObj = _this.popupWrapper = null;
          _this.preventArgs = null;
          _this.calendarKeyboardModules = null;
          _this.setAriaAttributes();
        },
        targetExitViewport: function() {
          if (!Browser.isDevice) {
            _this.hide();
          }
        }
      });
      this.popupObj.element.className += " " + this.cssClass;
      this.setAriaAttributes();
    };
    DatePicker2.prototype.getAmPmValue = function(date) {
      try {
        if (typeof date === "string" && date.trim() !== "") {
          return date.replace(/(am|pm|Am|aM|pM|Pm)/g, function(match) {
            return match.toLocaleUpperCase();
          });
        }
        return "";
      } catch (error) {
        console.error("Error occurred while processing date:", error);
        return "";
      }
    };
    DatePicker2.prototype.CalendarSwipeHandler = function(e) {
      var direction = 0;
      if (this.iconRight) {
        switch (e.swipeDirection) {
          case "Left":
            direction = 1;
            break;
          case "Right":
            direction = -1;
            break;
          default:
            break;
        }
      } else {
        switch (e.swipeDirection) {
          case "Up":
            direction = 1;
            break;
          case "Down":
            direction = -1;
            break;
          default:
            break;
        }
      }
      if (this.touchStart) {
        if (direction === 1) {
          this.navigateNext(e);
        } else if (direction === -1) {
          this.navigatePrevious(e);
        }
        this.touchStart = false;
      }
    };
    DatePicker2.prototype.TouchStartHandler = function(e) {
      this.touchStart = true;
    };
    DatePicker2.prototype.setAriaDisabled = function() {
      if (!this.enabled) {
        this.inputElement.setAttribute("aria-disabled", "true");
        this.inputElement.tabIndex = -1;
      } else {
        this.inputElement.setAttribute("aria-disabled", "false");
        this.inputElement.setAttribute("tabindex", this.tabIndex);
      }
    };
    DatePicker2.prototype.modelHeader = function() {
      var dateOptions;
      var modelHeader = this.createElement("div", {
        className: "e-model-header"
      });
      var yearHeading = this.createElement("h1", {
        className: "e-model-year"
      });
      var h2 = this.createElement("div");
      var daySpan = this.createElement("span", {
        className: "e-model-day"
      });
      var monthSpan = this.createElement("span", {
        className: "e-model-month"
      });
      if (this.calendarMode === "Gregorian") {
        dateOptions = {
          format: "y",
          skeleton: "dateTime"
        };
      } else {
        dateOptions = {
          format: "y",
          skeleton: "dateTime",
          calendar: "islamic"
        };
      }
      yearHeading.textContent = "" + this.globalize.formatDate(this.value || /* @__PURE__ */ new Date(), dateOptions);
      if (this.calendarMode === "Gregorian") {
        dateOptions = {
          format: "E",
          skeleton: "dateTime"
        };
      } else {
        dateOptions = {
          format: "E",
          skeleton: "dateTime",
          calendar: "islamic"
        };
      }
      daySpan.textContent = "" + this.globalize.formatDate(this.value || /* @__PURE__ */ new Date(), dateOptions) + ", ";
      if (this.calendarMode === "Gregorian") {
        dateOptions = {
          format: "MMM d",
          skeleton: "dateTime"
        };
      } else {
        dateOptions = {
          format: "MMM d",
          skeleton: "dateTime",
          calendar: "islamic"
        };
      }
      monthSpan.textContent = "" + this.globalize.formatDate(this.value || /* @__PURE__ */ new Date(), dateOptions);
      if (this.fullScreenMode) {
        var modelCloseIcon = this.createElement("span", {
          className: "e-popup-close"
        });
        EventHandler.add(modelCloseIcon, "mousedown touchstart", this.modelCloseHandler, this);
        var modelTodayButton = this.calendarElement.querySelector("button.e-today");
        h2.classList.add("e-day-wrapper");
        modelTodayButton.classList.add("e-outline");
        modelHeader.appendChild(modelCloseIcon);
        modelHeader.appendChild(modelTodayButton);
      }
      if (!this.fullScreenMode) {
        modelHeader.appendChild(yearHeading);
      }
      h2.appendChild(daySpan);
      h2.appendChild(monthSpan);
      modelHeader.appendChild(h2);
      this.calendarElement.insertBefore(modelHeader, this.calendarElement.firstElementChild);
    };
    DatePicker2.prototype.modelCloseHandler = function(e) {
      this.hide();
    };
    DatePicker2.prototype.changeTrigger = function(event2) {
      if (this.inputElement.value !== this.previousElementValue) {
        if ((this.previousDate && this.previousDate.valueOf()) !== (this.value && this.value.valueOf())) {
          if (this.isDynamicValueChanged && this.isCalendar()) {
            this.popupUpdate();
          }
          this.changedArgs.value = this.value;
          this.changedArgs.event = event2 || null;
          this.changedArgs.element = this.element;
          this.changedArgs.isInteracted = !isNullOrUndefined(event2);
          if (this.isAngular && this.preventChange) {
            this.preventChange = false;
          } else {
            this.trigger("change", this.changedArgs);
          }
          this.previousElementValue = this.inputElement.value;
          this.previousDate = !isNaN(+new Date(this.checkValue(this.value))) ? new Date(this.checkValue(this.value)) : null;
          this.isInteracted = true;
        }
      }
      this.isKeyAction = false;
    };
    DatePicker2.prototype.navigatedEvent = function(eve) {
      extend(this.navigatedArgs, {
        name: "navigated",
        event: eve
      });
      this.trigger("navigated", this.navigatedArgs);
    };
    DatePicker2.prototype.keyupHandler = function(e) {
      this.isKeyAction = this.inputElement.value !== this.previousElementValue ? true : false;
      if (this.enableMask && this.showClearButton && this.inputElement && this.inputElement.value === this.maskedDateValue && this.inputWrapper && this.inputWrapper.clearButton && !this.inputWrapper.clearButton.classList.contains("e-clear-icon-hide")) {
        this.inputWrapper.clearButton.classList.add("e-clear-icon-hide");
      }
    };
    DatePicker2.prototype.changeEvent = function(event2) {
      if (!this.isIconClicked && !(this.isBlur || this.isKeyAction)) {
        this.selectCalendar(event2);
      }
      if ((this.previousDate && this.previousDate.valueOf()) !== (this.value && this.value.valueOf())) {
        this.changedArgs.event = event2 ? event2 : null;
        this.changedArgs.element = this.element;
        this.changedArgs.isInteracted = this.isInteracted;
        if (!this.isDynamicValueChanged) {
          this.trigger("change", this.changedArgs);
        }
        this.previousDate = this.value && /* @__PURE__ */ new Date(+this.value);
        if (!this.isDynamicValueChanged) {
          this.hide(event2);
        }
        this.previousElementValue = this.inputElement.value;
        this.errorClass();
      } else if (event2) {
        this.hide(event2);
      }
      this.isKeyAction = false;
    };
    DatePicker2.prototype.requiredModules = function() {
      var modules = [];
      if (this.calendarMode === "Islamic") {
        modules.push({
          args: [this],
          member: "islamic",
          name: "Islamic"
        });
      }
      if (this.enableMask) {
        modules.push({
          args: [this],
          member: "MaskedDateTime"
        });
      }
      return modules;
    };
    DatePicker2.prototype.selectCalendar = function(e) {
      var date;
      var tempFormat;
      var formatOptions;
      if (this.getModuleName() === "datetimepicker") {
        tempFormat = !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat;
      } else {
        tempFormat = this.formatString;
      }
      if (this.value) {
        if (this.getModuleName() === "datetimepicker") {
          if (this.calendarMode === "Gregorian") {
            formatOptions = {
              format: tempFormat,
              type: "dateTime",
              skeleton: "yMd"
            };
          } else {
            formatOptions = {
              format: tempFormat,
              type: "dateTime",
              skeleton: "yMd",
              calendar: "islamic"
            };
          }
          date = this.globalize.formatDate(this.changedArgs.value, formatOptions);
        } else {
          if (this.calendarMode === "Gregorian") {
            formatOptions = {
              format: this.formatString,
              type: "dateTime",
              skeleton: "yMd"
            };
          } else {
            formatOptions = {
              format: this.formatString,
              type: "dateTime",
              skeleton: "yMd",
              calendar: "islamic"
            };
          }
          date = this.globalize.formatDate(this.changedArgs.value, formatOptions);
        }
        if (this.enableMask) {
          this.notify("createMask", {
            module: "MaskedDateTime"
          });
        }
      }
      if (!isNullOrUndefined(date)) {
        this.updateInputValue(date);
        if (this.enableMask) {
          this.notify("setMaskSelection", {
            module: "MaskedDateTime"
          });
        }
      }
    };
    DatePicker2.prototype.isCalendar = function() {
      if (this.popupWrapper && this.popupWrapper.classList.contains("" + POPUPWRAPPER)) {
        return true;
      }
      return false;
    };
    DatePicker2.prototype.setWidth = function(width) {
      if (typeof width === "number") {
        this.inputWrapper.container.style.width = formatUnit(this.width);
      } else if (typeof width === "string") {
        this.inputWrapper.container.style.width = width.match(/px|%|em/) ? this.width : formatUnit(this.width);
      } else {
        this.inputWrapper.container.style.width = "100%";
      }
    };
    DatePicker2.prototype.show = function(type, e) {
      var _this = this;
      if (this.enabled && this.readonly || !this.enabled || this.popupObj) {
        return;
      } else {
        var prevent_1 = true;
        var outOfRange = void 0;
        if (!isNullOrUndefined(this.value) && !(+this.value >= +new Date(this.checkValue(this.min)) && +this.value <= +new Date(this.checkValue(this.max)))) {
          outOfRange = new Date(this.checkValue(this.value));
          this.setProperties({
            "value": null
          }, true);
        } else {
          outOfRange = this.value || null;
        }
        if (!this.isCalendar()) {
          _super.prototype.render.call(this);
          this.setProperties({
            "value": outOfRange || null
          }, true);
          this.previousDate = outOfRange;
          this.createCalendar();
        }
        if (Browser.isDevice) {
          this.mobilePopupWrapper = this.createElement("div", {
            className: "e-datepick-mob-popup-wrap"
          });
          document.body.appendChild(this.mobilePopupWrapper);
        }
        this.preventArgs = {
          preventDefault: function() {
            prevent_1 = false;
          },
          popup: this.popupObj,
          event: e || null,
          cancel: false,
          appendTo: Browser.isDevice ? this.mobilePopupWrapper : document.body
        };
        var eventArgs = this.preventArgs;
        this.trigger("open", eventArgs, function(eventArgs2) {
          _this.preventArgs = eventArgs2;
          if (prevent_1 && !_this.preventArgs.cancel) {
            addClass(_this.inputWrapper.buttons, ACTIVE3);
            _this.preventArgs.appendTo.appendChild(_this.popupWrapper);
            _this.popupObj.refreshPosition(_this.inputElement);
            var openAnimation = {
              name: "FadeIn",
              duration: Browser.isDevice ? 0 : OPENDURATION
            };
            if (_this.zIndex === 1e3) {
              _this.popupObj.show(new Animation(openAnimation), _this.element);
            } else {
              _this.popupObj.show(new Animation(openAnimation), null);
            }
            _super.prototype.setOverlayIndex.call(_this, _this.mobilePopupWrapper, _this.popupObj.element, _this.modal, Browser.isDevice);
            _this.setAriaAttributes();
            if (Browser.isDevice) {
              var dlgOverlay = _this.createElement("div", {
                className: "e-dlg-overlay"
              });
              dlgOverlay.style.zIndex = (_this.zIndex - 1).toString();
              _this.mobilePopupWrapper.appendChild(dlgOverlay);
            }
          } else {
            _this.popupObj.destroy();
            _this.popupWrapper = _this.popupObj = null;
          }
          if (!isNullOrUndefined(_this.inputElement) && _this.inputElement.value === "") {
            if (!isNullOrUndefined(_this.tableBodyElement) && _this.tableBodyElement.querySelectorAll("td.e-selected").length > 0) {
              addClass([_this.tableBodyElement.querySelector("td.e-selected")], FOCUSEDDATE2);
              removeClass(_this.tableBodyElement.querySelectorAll("td.e-selected"), SELECTED6);
            }
          }
          EventHandler.add(document, "mousedown touchstart", _this.documentHandler, _this);
        });
      }
    };
    DatePicker2.prototype.hide = function(event2) {
      var _this = this;
      if (!isNullOrUndefined(this.popupWrapper)) {
        var prevent_2 = true;
        this.preventArgs = {
          preventDefault: function() {
            prevent_2 = false;
          },
          popup: this.popupObj,
          event: event2 || null,
          cancel: false
        };
        removeClass(this.inputWrapper.buttons, ACTIVE3);
        removeClass([document.body], OVERFLOW);
        var eventArgs = this.preventArgs;
        if (this.isCalendar()) {
          this.trigger("close", eventArgs, function(eventArgs2) {
            _this.closeEventCallback(prevent_2, eventArgs2);
          });
        } else {
          this.closeEventCallback(prevent_2, eventArgs);
        }
      } else {
        if (Browser.isDevice && this.allowEdit && !this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
        this.setAllowEdit();
      }
    };
    DatePicker2.prototype.closeEventCallback = function(prevent, eventArgs) {
      this.preventArgs = eventArgs;
      if (this.isCalendar() && prevent && !this.preventArgs.cancel) {
        this.popupObj.hide();
        this.isAltKeyPressed = false;
        this.keyboardModule.destroy();
        removeClass(this.inputWrapper.buttons, ACTIVE3);
      }
      this.setAriaAttributes();
      if (Browser.isDevice && this.modal) {
        this.modal.style.display = "none";
        this.modal.outerHTML = "";
        this.modal = null;
      }
      if (Browser.isDevice) {
        if (!isNullOrUndefined(this.mobilePopupWrapper) && prevent && (isNullOrUndefined(this.preventArgs) || !this.preventArgs.cancel)) {
          this.mobilePopupWrapper.remove();
          this.mobilePopupWrapper = null;
        }
      }
      EventHandler.remove(document, "mousedown touchstart", this.documentHandler);
      if (Browser.isDevice && this.allowEdit && !this.readonly) {
        this.inputElement.removeAttribute("readonly");
      }
      this.setAllowEdit();
    };
    DatePicker2.prototype.focusIn = function(triggerEvent) {
      if (document.activeElement !== this.inputElement && this.enabled) {
        this.inputElement.focus();
        addClass([this.inputWrapper.container], [INPUTFOCUS]);
      }
    };
    DatePicker2.prototype.focusOut = function() {
      if (document.activeElement === this.inputElement) {
        removeClass([this.inputWrapper.container], [INPUTFOCUS]);
        this.inputElement.blur();
      }
    };
    DatePicker2.prototype.currentView = function() {
      var currentView;
      if (this.calendarElement) {
        currentView = _super.prototype.currentView.call(this);
      }
      return currentView;
    };
    DatePicker2.prototype.navigateTo = function(view, date) {
      if (this.calendarElement) {
        _super.prototype.navigateTo.call(this, view, date);
      }
    };
    DatePicker2.prototype.destroy = function() {
      this.unBindEvents();
      if (this.showClearButton) {
        this.clearButton = document.getElementsByClassName("e-clear-icon")[0];
      }
      _super.prototype.destroy.call(this);
      Input.destroy({
        element: this.inputElement,
        floatLabelType: this.floatLabelType,
        properties: this.properties
      }, this.clearButton);
      if (!isNullOrUndefined(this.keyboardModules)) {
        this.keyboardModules.destroy();
      }
      if (this.popupObj && this.popupObj.element.classList.contains(POPUP2)) {
        _super.prototype.destroy.call(this);
      }
      var ariaAttrs = {
        "aria-atomic": "true",
        "aria-disabled": "true",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off",
        "autocorrect": "off",
        "autocapitalize": "off",
        "spellcheck": "false"
      };
      if (this.inputElement.hasAttribute("aria-label")) {
        this.inputElement.removeAttribute("aria-label");
      }
      if (this.inputElement) {
        Input.removeAttributes(ariaAttrs, this.inputElement);
        if (!isNullOrUndefined(this.inputElementCopy.getAttribute("tabindex"))) {
          this.inputElement.setAttribute("tabindex", this.tabIndex);
        } else {
          this.inputElement.removeAttribute("tabindex");
        }
        EventHandler.remove(this.inputElement, "blur", this.inputBlurHandler);
        EventHandler.remove(this.inputElement, "focus", this.inputFocusHandler);
        this.ensureInputAttribute();
      }
      if (this.isCalendar()) {
        if (this.popupWrapper) {
          detach(this.popupWrapper);
        }
        this.popupObj = this.popupWrapper = null;
        this.keyboardModule.destroy();
      }
      if (this.ngTag === null) {
        if (this.inputElement) {
          if (!isNullOrUndefined(this.inputWrapper)) {
            this.inputWrapper.container.insertAdjacentElement("afterend", this.inputElement);
          }
          removeClass([this.inputElement], [INPUTROOT]);
        }
        removeClass([this.element], [ROOT8]);
        if (!isNullOrUndefined(this.inputWrapper)) {
          detach(this.inputWrapper.container);
        }
      }
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.resetFormHandler);
      }
      this.inputWrapper = null;
      this.keyboardModules = null;
    };
    DatePicker2.prototype.ensureInputAttribute = function() {
      var prop = [];
      for (var i = 0; i < this.inputElement.attributes.length; i++) {
        prop[i] = this.inputElement.attributes[i].name;
      }
      for (var i = 0; i < prop.length; i++) {
        if (isNullOrUndefined(this.inputElementCopy.getAttribute(prop[i]))) {
          if (prop[i].toLowerCase() === "value") {
            this.inputElement.value = "";
          }
          this.inputElement.removeAttribute(prop[i]);
        } else {
          if (prop[i].toLowerCase() === "value") {
            this.inputElement.value = this.inputElementCopy.getAttribute(prop[i]);
          }
          this.inputElement.setAttribute(prop[i], this.inputElementCopy.getAttribute(prop[i]));
        }
      }
    };
    DatePicker2.prototype.preRender = function() {
      this.inputElementCopy = this.element.cloneNode(true);
      removeClass([this.inputElementCopy], [ROOT8, CONTROL5, LIBRARY]);
      this.inputElement = this.element;
      this.formElement = closest(this.inputElement, "form");
      this.index = this.showClearButton ? 2 : 1;
      this.ngTag = null;
      if (this.element.tagName === "EJS-DATEPICKER" || this.element.tagName === "EJS-DATETIMEPICKER") {
        this.ngTag = this.element.tagName;
        this.inputElement = this.createElement("input");
        this.element.appendChild(this.inputElement);
      }
      if (this.element.getAttribute("id")) {
        if (this.ngTag !== null) {
          this.inputElement.id = this.element.getAttribute("id") + "_input";
        }
      } else {
        if (this.getModuleName() === "datetimepicker") {
          this.element.id = getUniqueID("ej2-datetimepicker");
          if (this.ngTag !== null) {
            attributes(this.inputElement, {
              "id": this.element.id + "_input"
            });
          }
        } else {
          this.element.id = getUniqueID("ej2-datepicker");
          if (this.ngTag !== null) {
            attributes(this.inputElement, {
              "id": this.element.id + "_input"
            });
          }
        }
      }
      if (this.ngTag !== null) {
        this.validationAttribute(this.element, this.inputElement);
      }
      this.updateHtmlAttributeToElement();
      this.defaultKeyConfigs = this.getDefaultKeyConfig();
      this.checkHtmlAttributes(false);
      if (this.inputFormats) {
        this.checkInputFormats();
      }
      this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : "0";
      this.element.removeAttribute("tabindex");
      _super.prototype.preRender.call(this);
    };
    DatePicker2.prototype.getDefaultKeyConfig = function() {
      this.defaultKeyConfigs = {
        altUpArrow: "alt+uparrow",
        altDownArrow: "alt+downarrow",
        escape: "escape",
        enter: "enter",
        controlUp: "ctrl+38",
        controlDown: "ctrl+40",
        moveDown: "downarrow",
        moveUp: "uparrow",
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        select: "enter",
        home: "home",
        end: "end",
        pageUp: "pageup",
        pageDown: "pagedown",
        shiftPageUp: "shift+pageup",
        shiftPageDown: "shift+pagedown",
        controlHome: "ctrl+home",
        controlEnd: "ctrl+end",
        shiftTab: "shift+tab",
        tab: "tab"
      };
      return this.defaultKeyConfigs;
    };
    DatePicker2.prototype.validationAttribute = function(target, inputElement) {
      var nameAttribute = target.getAttribute("name") ? target.getAttribute("name") : target.getAttribute("id");
      inputElement.setAttribute("name", nameAttribute);
      target.removeAttribute("name");
      var attribute = ["required", "aria-required", "form"];
      for (var i = 0; i < attribute.length; i++) {
        if (isNullOrUndefined(target.getAttribute(attribute[i]))) {
          continue;
        }
        var attr = target.getAttribute(attribute[i]);
        inputElement.setAttribute(attribute[i], attr);
        target.removeAttribute(attribute[i]);
      }
    };
    DatePicker2.prototype.checkFormat = function() {
      var culture = new Internationalization(this.locale);
      if (this.format) {
        if (typeof this.format === "string") {
          this.formatString = this.format;
        } else if (this.format.skeleton !== "" && !isNullOrUndefined(this.format.skeleton)) {
          var skeletonString = this.format.skeleton;
          if (this.getModuleName() === "datetimepicker") {
            this.formatString = culture.getDatePattern({
              skeleton: skeletonString,
              type: "dateTime"
            });
          } else {
            this.formatString = culture.getDatePattern({
              skeleton: skeletonString,
              type: "date"
            });
          }
        } else {
          if (this.getModuleName() === "datetimepicker") {
            this.formatString = this.dateTimeFormat;
          } else {
            this.formatString = null;
          }
        }
      } else {
        this.formatString = null;
      }
    };
    DatePicker2.prototype.checkInputFormats = function() {
      var culture = new Internationalization(this.locale);
      this.inputFormatsString = [];
      if (this.inputFormats) {
        for (var _i = 0, _a = this.inputFormats; _i < _a.length; _i++) {
          var format = _a[_i];
          var formatString = "";
          if (typeof format === "string") {
            formatString = format;
          } else if (format.skeleton !== "" && !isNullOrUndefined(format.skeleton)) {
            var skeletonString = format.skeleton;
            if (this.getModuleName() === "datetimepicker") {
              formatString = culture.getDatePattern({
                skeleton: skeletonString,
                type: "dateTime"
              });
            } else {
              formatString = culture.getDatePattern({
                skeleton: skeletonString,
                type: "date"
              });
            }
          }
          if (formatString) {
            this.inputFormatsString.push(formatString);
          }
        }
        if (this.inputFormatsString.length === 0) {
          this.inputFormatsString = null;
        }
      } else {
        this.inputFormatsString = null;
      }
    };
    DatePicker2.prototype.checkHtmlAttributes = function(dynamic) {
      this.globalize = new Internationalization(this.locale);
      this.checkFormat();
      this.checkView();
      var attributes2 = dynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ["value", "min", "max", "disabled", "readonly", "style", "name", "placeholder", "type"];
      var options;
      if (this.getModuleName() === "datetimepicker") {
        if (this.calendarMode === "Gregorian") {
          options = {
            format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd"
          };
        } else {
          options = {
            format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd",
            calendar: "islamic"
          };
        }
      } else {
        if (this.calendarMode === "Gregorian") {
          options = {
            format: this.formatString,
            type: "dateTime",
            skeleton: "yMd"
          };
        } else {
          options = {
            format: this.formatString,
            type: "dateTime",
            skeleton: "yMd",
            calendar: "islamic"
          };
        }
      }
      for (var _i = 0, attributes_1 = attributes2; _i < attributes_1.length; _i++) {
        var prop = attributes_1[_i];
        if (!isNullOrUndefined(this.inputElement.getAttribute(prop))) {
          switch (prop) {
            case "disabled":
              if (isNullOrUndefined(this.datepickerOptions) || this.datepickerOptions["enabled"] === void 0 || dynamic) {
                var enabled = this.inputElement.getAttribute(prop) === "disabled" || this.inputElement.getAttribute(prop) === "" || this.inputElement.getAttribute(prop) === "true" ? false : true;
                this.setProperties({
                  enabled
                }, !dynamic);
              }
              break;
            case "readonly":
              if (isNullOrUndefined(this.datepickerOptions) || this.datepickerOptions["readonly"] === void 0 || dynamic) {
                var readonly = this.inputElement.getAttribute(prop) === "readonly" || this.inputElement.getAttribute(prop) === "" || this.inputElement.getAttribute(prop) === "true" ? true : false;
                this.setProperties({
                  readonly
                }, !dynamic);
              }
              break;
            case "placeholder":
              if (isNullOrUndefined(this.datepickerOptions) || this.datepickerOptions["placeholder"] === void 0 || dynamic) {
                this.setProperties({
                  placeholder: this.inputElement.getAttribute(prop)
                }, !dynamic);
              }
              break;
            case "style":
              this.inputElement.setAttribute("style", "" + this.inputElement.getAttribute(prop));
              break;
            case "name":
              this.inputElement.setAttribute("name", "" + this.inputElement.getAttribute(prop));
              break;
            case "value":
              if (isNullOrUndefined(this.datepickerOptions) || this.datepickerOptions["value"] === void 0 || dynamic) {
                var value = this.inputElement.getAttribute(prop);
                this.setProperties(setValue(prop, this.globalize.parseDate(this.getAmPmValue(value), options), {}), !dynamic);
              }
              break;
            case "min":
              if (+this.min === +new Date(1900, 0, 1) || dynamic) {
                var min = this.inputElement.getAttribute(prop);
                this.setProperties(setValue(prop, this.globalize.parseDate(this.getAmPmValue(min), options), {}), !dynamic);
              }
              break;
            case "max":
              if (+this.max === +new Date(2099, 11, 31) || dynamic) {
                var max = this.inputElement.getAttribute(prop);
                this.setProperties(setValue(prop, this.globalize.parseDate(this.getAmPmValue(max), options), {}), !dynamic);
              }
              break;
            case "type":
              if (this.inputElement.getAttribute(prop) !== "text") {
                this.inputElement.setAttribute("type", "text");
              }
              break;
          }
        }
      }
    };
    DatePicker2.prototype.getModuleName = function() {
      return "datepicker";
    };
    DatePicker2.prototype.disabledDates = function(isDynamic, isBlur) {
      if (isDynamic === void 0) {
        isDynamic = false;
      }
      if (isBlur === void 0) {
        isBlur = false;
      }
      var formatOptions;
      var globalize;
      var valueCopy = this.checkDateValue(this.value) ? /* @__PURE__ */ new Date(+this.value) : new Date(this.checkValue(this.value));
      var previousValCopy = this.previousDate;
      this.minMaxUpdates();
      if (!isDynamic || isDynamic && !isNullOrUndefined(this.renderDayCell)) {
        _super.prototype.render.call(this);
      }
      this.previousDate = previousValCopy;
      var date = valueCopy && +valueCopy;
      var dateIdString = '*[id^="/id"]'.replace("/id", "" + date);
      if (!this.strictMode) {
        if (typeof this.value === "string" || typeof this.value === "object" && +this.value !== +valueCopy) {
          this.setProperties({
            value: valueCopy
          }, true);
        }
      }
      if (!isNullOrUndefined(this.calendarElement) && !isNullOrUndefined(this.calendarElement.querySelectorAll(dateIdString)[0])) {
        if (this.calendarElement.querySelectorAll(dateIdString)[0].classList.contains("e-disabled")) {
          if (!this.strictMode) {
            this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
          }
        }
      }
      var inputVal;
      if (this.getModuleName() === "datetimepicker") {
        if (this.calendarMode === "Gregorian") {
          globalize = this.globalize.formatDate(valueCopy, {
            format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd"
          });
        } else {
          globalize = this.globalize.formatDate(valueCopy, {
            format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd",
            calendar: "islamic"
          });
        }
        inputVal = globalize;
      } else {
        if (this.calendarMode === "Gregorian") {
          formatOptions = {
            format: this.formatString,
            type: "dateTime",
            skeleton: "yMd"
          };
        } else {
          formatOptions = {
            format: this.formatString,
            type: "dateTime",
            skeleton: "yMd",
            calendar: "islamic"
          };
        }
        inputVal = this.globalize.formatDate(valueCopy, formatOptions);
      }
      if (!this.popupObj) {
        this.updateInputValue(inputVal);
        if (this.enableMask) {
          this.updateInputValue(this.maskedDateValue);
          this.notify("createMask", {
            module: "MaskedDateTime",
            isBlur
          });
        }
      }
    };
    DatePicker2.prototype.setAriaAttributes = function() {
      if (this.isCalendar()) {
        Input.addAttributes({
          "aria-expanded": "true"
        }, this.inputElement);
        attributes(this.inputElement, {
          "aria-owns": this.inputElement.id + "_options"
        });
        attributes(this.inputElement, {
          "aria-controls": this.inputElement.id
        });
        if (this.value) {
          attributes(this.inputElement, {
            "aria-activedescendant": "" + this.setActiveDescendant()
          });
        }
      } else {
        Input.addAttributes({
          "aria-expanded": "false"
        }, this.inputElement);
        this.inputElement.removeAttribute("aria-owns");
        this.inputElement.removeAttribute("aria-controls");
        this.inputElement.removeAttribute("aria-activedescendant");
      }
    };
    DatePicker2.prototype.errorClass = function() {
      var dateIdString = '*[id^="/id"]'.replace("/id", "" + +this.value);
      var isDisabledDate = this.calendarElement && this.calendarElement.querySelectorAll(dateIdString)[0] && this.calendarElement.querySelectorAll(dateIdString)[0].classList.contains("e-disabled");
      if (!isNullOrUndefined(this.value) && !isNullOrUndefined(this.min) && !isNullOrUndefined(this.max) && !(new Date(this.value).setMilliseconds(0) >= new Date(this.min).setMilliseconds(0) && new Date(this.value).setMilliseconds(0) <= new Date(this.max).setMilliseconds(0)) || !this.strictMode && this.inputElement.value !== "" && this.inputElement.value !== this.maskedDateValue && isNullOrUndefined(this.value) || isDisabledDate || !this.isValidTime(this.value)) {
        addClass([this.inputWrapper.container], ERROR3);
        attributes(this.inputElement, {
          "aria-invalid": "true"
        });
      } else if (!isNullOrUndefined(this.inputWrapper)) {
        removeClass([this.inputWrapper.container], ERROR3);
        attributes(this.inputElement, {
          "aria-invalid": "false"
        });
      }
    };
    DatePicker2.prototype.isValidTime = function(value) {
      return true;
    };
    DatePicker2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        var openPopup = ["blur", "change", "cleared", "close", "created", "destroyed", "focus", "navigated", "open", "renderDayCell"];
        if (openPopup.indexOf(prop) > 0 && this.isReact) {
          this.isDynamicValueChanged = true;
        }
        switch (prop) {
          case "value":
            this.isDynamicValueChanged = true;
            this.isInteracted = false;
            this.invalidValueString = null;
            this.checkInvalidValue(newProp.value);
            newProp.value = this.value;
            this.previousElementValue = this.inputElement.value;
            if (isNullOrUndefined(this.value)) {
              if (this.enableMask) {
                this.updateInputValue(this.maskedDateValue);
              } else {
                this.updateInputValue("");
              }
              this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
            }
            this.updateInput(true);
            if (+this.previousDate !== +this.value) {
              this.changeTrigger(null);
            }
            this.isInteracted = true;
            this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
            }
            break;
          case "format":
            this.checkFormat();
            this.bindInputEvent();
            this.updateInput();
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
              if (!this.value) {
                this.updateInputValue(this.maskedDateValue);
              }
            }
            break;
          case "inputFormats":
            this.checkInputFormats();
            break;
          case "allowEdit":
            this.setAllowEdit();
            break;
          case "placeholder":
            Input.setPlaceholder(this.placeholder, this.inputElement);
            break;
          case "readonly":
            Input.setReadonly(this.readonly, this.inputElement);
            break;
          case "enabled":
            Input.setEnabled(this.enabled, this.inputElement);
            this.setAriaDisabled();
            break;
          case "htmlAttributes":
            this.updateHtmlAttributeToElement();
            this.updateHtmlAttributeToWrapper();
            this.checkHtmlAttributes(true);
            break;
          case "locale":
            this.globalize = new Internationalization(this.locale);
            this.l10n.setLocale(this.locale);
            if (this.datepickerOptions && this.datepickerOptions.placeholder == null) {
              this.setProperties({
                placeholder: this.l10n.getConstant("placeholder")
              }, true);
              Input.setPlaceholder(this.placeholder, this.inputElement);
            }
            this.updateInput();
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
            }
            break;
          case "enableRtl":
            Input.setEnableRtl(this.enableRtl, [this.inputWrapper.container]);
            break;
          case "start":
          case "depth":
            this.checkView();
            if (this.calendarElement) {
              _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
            }
            break;
          case "zIndex":
            this.setProperties({
              zIndex: newProp.zIndex
            }, true);
            break;
          case "cssClass":
            this.updateCssClass(newProp.cssClass, oldProp.cssClass);
            break;
          case "showClearButton":
            Input.setClearButton(this.showClearButton, this.inputElement, this.inputWrapper);
            this.bindClearEvent();
            this.index = this.showClearButton ? 2 : 1;
            break;
          case "strictMode":
            this.invalidValueString = null;
            this.updateInput();
            break;
          case "width":
            this.setWidth(newProp.width);
            Input.calculateWidth(this.inputElement, this.inputWrapper.container);
            if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
              this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
            }
            break;
          case "floatLabelType":
            this.floatLabelType = newProp.floatLabelType;
            Input.removeFloating(this.inputWrapper);
            Input.addFloating(this.inputElement, this.floatLabelType, this.placeholder);
            if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
              this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
            }
            break;
          case "enableMask":
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
              this.updateInputValue(this.maskedDateValue);
              this.bindInputEvent();
            } else {
              if (this.inputElement.value === this.maskedDateValue) {
                this.updateInputValue("");
              }
            }
            break;
          default:
            if (this.calendarElement && this.isCalendar()) {
              _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
            }
            if (prop === "min" && isNullOrUndefined(this.min)) {
              this.min = new Date(1900, 0, 1);
            }
            if (prop === "max" && isNullOrUndefined(this.max)) {
              this.max = new Date(2099, 11, 31);
            }
            break;
        }
        if (!this.isDynamicValueChanged) {
          this.hide(null);
        }
        this.isDynamicValueChanged = false;
      }
    };
    DatePicker2.prototype.addDate = function(dates) {
    };
    __decorate47([Property(null)], DatePicker2.prototype, "width", void 0);
    __decorate47([Property(null)], DatePicker2.prototype, "value", void 0);
    __decorate47([Property(null)], DatePicker2.prototype, "cssClass", void 0);
    __decorate47([Property(false)], DatePicker2.prototype, "strictMode", void 0);
    __decorate47([Property(null)], DatePicker2.prototype, "format", void 0);
    __decorate47([Property(null)], DatePicker2.prototype, "inputFormats", void 0);
    __decorate47([Property(true)], DatePicker2.prototype, "enabled", void 0);
    __decorate47([Property(false)], DatePicker2.prototype, "fullScreenMode", void 0);
    __decorate47([Property({})], DatePicker2.prototype, "htmlAttributes", void 0);
    __decorate47([Property(null)], DatePicker2.prototype, "values", void 0);
    __decorate47([Property(false)], DatePicker2.prototype, "isMultiSelection", void 0);
    __decorate47([Property(true)], DatePicker2.prototype, "showClearButton", void 0);
    __decorate47([Property(true)], DatePicker2.prototype, "allowEdit", void 0);
    __decorate47([Property(null)], DatePicker2.prototype, "keyConfigs", void 0);
    __decorate47([Property(false)], DatePicker2.prototype, "enablePersistence", void 0);
    __decorate47([Property(1e3)], DatePicker2.prototype, "zIndex", void 0);
    __decorate47([Property(false)], DatePicker2.prototype, "readonly", void 0);
    __decorate47([Property(null)], DatePicker2.prototype, "placeholder", void 0);
    __decorate47([Property("Never")], DatePicker2.prototype, "floatLabelType", void 0);
    __decorate47([Property(null)], DatePicker2.prototype, "serverTimezoneOffset", void 0);
    __decorate47([Property(false)], DatePicker2.prototype, "openOnFocus", void 0);
    __decorate47([Property(false)], DatePicker2.prototype, "enableMask", void 0);
    __decorate47([Property({
      day: "day",
      month: "month",
      year: "year",
      hour: "hour",
      minute: "minute",
      second: "second",
      dayOfTheWeek: "day of the week"
    })], DatePicker2.prototype, "maskPlaceholder", void 0);
    __decorate47([Event()], DatePicker2.prototype, "open", void 0);
    __decorate47([Event()], DatePicker2.prototype, "cleared", void 0);
    __decorate47([Event()], DatePicker2.prototype, "close", void 0);
    __decorate47([Event()], DatePicker2.prototype, "blur", void 0);
    __decorate47([Event()], DatePicker2.prototype, "focus", void 0);
    __decorate47([Event()], DatePicker2.prototype, "created", void 0);
    __decorate47([Event()], DatePicker2.prototype, "destroyed", void 0);
    DatePicker2 = __decorate47([NotifyPropertyChanges], DatePicker2);
    return DatePicker2;
  }(Calendar)
);

// node_modules/@syncfusion/ej2-calendars/src/daterangepicker/daterangepicker.js
var __extends50 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate48 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DATERANGEWRAPPER = "e-date-range-wrapper";
var INPUTCONTAINER2 = "e-input-group";
var DATERANGEICON = "e-input-group-icon e-range-icon e-icons";
var POPUP3 = "e-popup";
var LEFTCALENDER = "e-left-calendar";
var RIGHTCALENDER = "e-right-calendar";
var LEFTCONTAINER = "e-left-container";
var RIGHTCONTAINER = "e-right-container";
var ROOT9 = "e-daterangepicker";
var LIBRARY2 = "e-lib";
var CONTROL6 = "e-control";
var ERROR4 = "e-error";
var ACTIVE4 = "e-active";
var STARTENDCONTAINER = "e-start-end";
var STARTDATE = "e-start-date";
var ENDDATE = "e-end-date";
var STARTBUTTON = "e-start-btn";
var INPUTFOCUS2 = "e-input-focus";
var ENDBUTTON = "e-end-btn";
var RANGEHOVER = "e-range-hover";
var OTHERMONTH2 = "e-other-month";
var STARTLABEL = "e-start-label";
var ENDLABEL = "e-end-label";
var DISABLED11 = "e-disabled";
var SELECTED7 = "e-selected";
var CALENDAR = "e-calendar";
var NEXTICON2 = "e-next";
var PREVICON2 = "e-prev";
var HEADER3 = "e-header";
var TITLE2 = "e-title";
var ICONCONTAINER2 = "e-icon-container";
var RANGECONTAINER = "e-date-range-container";
var RANGEHEADER = "e-range-header";
var PRESETS = "e-presets";
var FOOTER2 = "e-footer";
var RANGEBORDER = "e-range-border";
var TODAY2 = "e-today";
var FOCUSDATE = "e-focused-date";
var CONTENT3 = "e-content";
var DAYSPAN = "e-day-span";
var WEEKNUMBER2 = "e-week-number";
var DATEDISABLED = "e-date-disabled";
var ICONDISABLED = "e-icon-disabled";
var CALENDARCONTAINER = "e-calendar-container";
var SEPARATOR2 = "e-separator";
var APPLY2 = "e-apply";
var CANCEL2 = "e-cancel";
var DEVICE4 = "e-device";
var OVERLAY2 = "e-overlay";
var CHANGEICON = "e-change-icon e-icons";
var LISTCLASS = "e-list-item";
var RTL16 = "e-rtl";
var HOVER2 = "e-hover";
var OVERFLOW2 = "e-range-overflow";
var OFFSETVALUE2 = 4;
var PRIMARY2 = "e-primary";
var FLAT2 = "e-flat";
var CSS2 = "e-css";
var ZOOMIN2 = "e-zoomin";
var NONEDITABLE = "e-non-edit";
var DAYHEADERLONG2 = "e-daterange-day-header-lg";
var HIDDENELEMENT2 = "e-daterange-hidden";
var wrapperAttr3 = ["title", "class", "style"];
var Presets = (
  /** @class */
  function(_super) {
    __extends50(Presets2, _super);
    function Presets2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate48([Property()], Presets2.prototype, "label", void 0);
    __decorate48([Property()], Presets2.prototype, "start", void 0);
    __decorate48([Property()], Presets2.prototype, "end", void 0);
    return Presets2;
  }(ChildProperty)
);
var DateRangePicker = (
  /** @class */
  function(_super) {
    __extends50(DateRangePicker2, _super);
    function DateRangePicker2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.isCustomRange = false;
      _this.isCustomWindow = false;
      _this.presetsItem = [];
      _this.liCollections = [];
      _this.previousEleValue = "";
      _this.isKeyPopup = false;
      _this.dateDisabled = false;
      _this.isRangeIconClicked = false;
      _this.isMaxDaysClicked = false;
      _this.disabledDays = [];
      _this.preventBlur = false;
      _this.preventFocus = false;
      _this.invalidValueString = null;
      _this.preventChange = false;
      _this.dateRangeOptions = options;
      return _this;
    }
    DateRangePicker2.prototype.render = function() {
      this.initialize();
      this.setProperties({
        startDate: this.startValue
      }, true);
      this.setProperties({
        endDate: this.endValue
      }, true);
      this.setModelValue();
      this.setDataAttribute(false);
      if (this.element.hasAttribute("data-val")) {
        this.element.setAttribute("data-val", "false");
      }
      if (this.floatLabelType !== "Never") {
        Input.calculateWidth(this.inputElement, this.inputWrapper.container);
      }
      if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
        this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
      }
      if (!isNullOrUndefined(closest(this.element, "fieldset")) && closest(this.element, "fieldset").disabled) {
        this.enabled = false;
      }
      this.renderComplete();
    };
    DateRangePicker2.prototype.preRender = function() {
      this.keyInputConfigs = {
        altDownArrow: "alt+downarrow",
        escape: "escape",
        enter: "enter",
        tab: "tab",
        altRightArrow: "alt+rightarrow",
        altLeftArrow: "alt+leftarrow",
        moveUp: "uparrow",
        moveDown: "downarrow",
        spacebar: "space"
      };
      this.defaultConstant = {
        placeholder: this.placeholder,
        startLabel: "Start Date",
        endLabel: "End Date",
        customRange: "Custom Range",
        applyText: "Apply",
        cancelText: "Cancel",
        selectedDays: "Selected Days",
        days: "days"
      };
      this.isMobile = Browser.isDevice ? true : window.matchMedia("(max-width:550px)").matches;
      this.inputElement = this.element;
      this.angularTag = null;
      if (this.element.tagName === "EJS-DATERANGEPICKER") {
        this.angularTag = this.element.tagName;
        this.inputElement = this.createElement("input");
        this.element.appendChild(this.inputElement);
      }
      this.cloneElement = this.element.cloneNode(true);
      removeClass([this.cloneElement], [ROOT9, CONTROL6, LIBRARY2]);
      this.updateHtmlAttributeToElement();
      if (this.element.getAttribute("id")) {
        if (this.angularTag !== null) {
          this.inputElement.id = this.element.getAttribute("id") + "_input";
        }
      } else {
        this.element.id = getUniqueID("ej2-datetimepicker");
        if (this.angularTag !== null) {
          attributes(this.inputElement, {
            "id": this.element.id + "_input"
          });
        }
      }
      this.checkInvalidRange(this.value);
      if (!this.invalidValueString && typeof this.value === "string") {
        var rangeArray = this.value.split(" " + this.separator + " ");
        this.value = [new Date(rangeArray[0]), new Date(rangeArray[1])];
      }
      this.initProperty();
      this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : "0";
      this.element.removeAttribute("tabindex");
      _super.prototype.preRender.call(this);
      this.navNextFunction = this.navNextMonth.bind(this);
      this.navPrevFunction = this.navPrevMonth.bind(this);
      this.deviceNavNextFunction = this.deviceNavNext.bind(this);
      this.deviceNavPrevFunction = this.deviceNavPrevious.bind(this);
      this.initStartDate = this.checkDateValue(this.startValue);
      this.initEndDate = this.checkDateValue(this.endValue);
      this.formElement = closest(this.element, "form");
    };
    DateRangePicker2.prototype.updateValue = function() {
      if (this.value && this.value.length > 0) {
        if (this.value[0] instanceof Date && !isNaN(+this.value[0])) {
          this.setProperties({
            startDate: this.value[0]
          }, true);
          this.startValue = this.value[0];
        } else if (typeof this.value[0] === "string") {
          if (+this.value[0] === 0 || isNaN(+new Date(this.checkValue(this.value[0])))) {
            this.startValue = null;
            this.setValue();
          } else {
            this.setProperties({
              startDate: new Date(this.checkValue(this.value[0]))
            }, true);
            this.startValue = new Date(this.checkValue(this.value[0]));
          }
        } else {
          this.startValue = null;
          this.setValue();
        }
        if (this.value[1] instanceof Date && !isNaN(+this.value[1])) {
          this.setProperties({
            endDate: this.value[1]
          }, true);
          this.endValue = this.value[1];
        } else if (typeof this.value[1] === "string") {
          if (+this.value[0] === 0 || isNaN(+new Date(this.checkValue(this.value[0])))) {
            this.setProperties({
              endDate: null
            }, true);
            this.endValue = null;
            this.setValue();
          } else {
            this.setProperties({
              endDate: new Date(this.checkValue(this.value[1]))
            }, true);
            this.endValue = new Date(this.checkValue(this.value[1]));
            this.setValue();
          }
        } else {
          this.setProperties({
            endDate: null
          }, true);
          this.endValue = null;
          this.setValue();
        }
      } else if (this.value && this.value.start) {
        if (this.value.start instanceof Date && !isNaN(+this.value.start)) {
          this.setProperties({
            startDate: this.value.start
          }, true);
          this.startValue = this.value.start;
        } else if (typeof this.value.start === "string") {
          this.setProperties({
            startDate: new Date(this.checkValue(this.value.start))
          }, true);
          this.startValue = new Date(this.checkValue(this.value.start));
        } else {
          this.startValue = null;
          this.setValue();
        }
        if (this.value.end instanceof Date && !isNaN(+this.value.end)) {
          this.setProperties({
            endDate: this.value.end
          }, true);
          this.endValue = this.value.end;
        } else if (typeof this.value.end === "string") {
          this.setProperties({
            endDate: new Date(this.checkValue(this.value.end))
          }, true);
          this.endValue = new Date(this.checkValue(this.value.end));
          this.setValue();
        } else {
          this.setProperties({
            endDate: null
          }, true);
          this.endValue = null;
          this.setValue();
        }
      } else if (isNullOrUndefined(this.value)) {
        this.endValue = this.checkDateValue(new Date(this.checkValue(this.endDate)));
        this.startValue = this.checkDateValue(new Date(this.checkValue(this.startDate)));
        this.setValue();
      }
    };
    DateRangePicker2.prototype.initProperty = function() {
      this.globalize = new Internationalization(this.locale);
      this.checkFormat();
      this.checkView();
      if (isNullOrUndefined(this.firstDayOfWeek) || this.firstDayOfWeek > 6 || this.firstDayOfWeek < 0) {
        this.setProperties({
          firstDayOfWeek: this.globalize.getFirstDayOfWeek()
        }, true);
      }
      this.updateValue();
    };
    DateRangePicker2.prototype.checkFormat = function() {
      if (this.format) {
        if (typeof this.format === "string") {
          this.formatString = this.format;
        } else if (this.format.skeleton !== "" && !isNullOrUndefined(this.format.skeleton)) {
          var skeletonString = this.format.skeleton;
          this.formatString = this.globalize.getDatePattern({
            skeleton: skeletonString,
            type: "date"
          });
        } else {
          this.formatString = null;
        }
      } else {
        this.formatString = null;
      }
    };
    DateRangePicker2.prototype.initialize = function() {
      if (this.angularTag !== null) {
        this.validationAttribute(this.element, this.inputElement);
      }
      this.checkHtmlAttributes(false);
      merge(this.defaultKeyConfigs, {
        shiftTab: "shift+tab",
        tab: "tab"
      });
      var start = this.checkDateValue(new Date(this.checkValue(this.startValue)));
      this.setProperties({
        startDate: start
      }, true);
      this.setProperties({
        endValue: this.checkDateValue(new Date(this.checkValue(this.endValue)))
      }, true);
      this.setValue();
      this.setProperties({
        min: this.checkDateValue(new Date(this.checkValue(this.min)))
      }, true);
      this.setProperties({
        max: this.checkDateValue(new Date(this.checkValue(this.max)))
      }, true);
      this.l10n = new L10n("daterangepicker", this.defaultConstant, this.locale);
      this.l10n.setLocale(this.locale);
      this.setProperties({
        placeholder: this.placeholder || this.l10n.getConstant("placeholder")
      }, true);
      this.processPresets();
      this.createInput();
      this.updateHtmlAttributeToWrapper();
      this.setRangeAllowEdit();
      this.bindEvents();
    };
    DateRangePicker2.prototype.setDataAttribute = function(isDynamic) {
      var attributes2 = {};
      if (!isDynamic) {
        for (var i = 0; i < this.element.attributes.length; i++) {
          attributes2[this.element.attributes[i].name] = this.element.getAttribute(this.element.attributes[i].name);
        }
      } else {
        attributes2 = this.htmlAttributes;
      }
      for (var _i = 0, _a = Object.keys(attributes2); _i < _a.length; _i++) {
        var pro = _a[_i];
        if (pro.indexOf("data") === 0) {
          this.firstHiddenChild.setAttribute(pro, attributes2["" + pro]);
          this.secondHiddenChild.setAttribute(pro, attributes2["" + pro]);
        }
      }
    };
    DateRangePicker2.prototype.setRangeAllowEdit = function() {
      if (this.allowEdit) {
        if (!this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
      } else {
        attributes(this.inputElement, {
          "readonly": ""
        });
      }
      this.updateClearIconState();
    };
    DateRangePicker2.prototype.updateClearIconState = function() {
      if (!this.allowEdit && this.inputWrapper && !this.readonly) {
        if (this.inputElement.value === "") {
          removeClass([this.inputWrapper.container], [NONEDITABLE]);
        } else {
          addClass([this.inputWrapper.container], [NONEDITABLE]);
        }
      } else if (this.inputWrapper) {
        removeClass([this.inputWrapper.container], [NONEDITABLE]);
      }
    };
    DateRangePicker2.prototype.validationAttribute = function(element2, input) {
      var name = element2.getAttribute("name") ? element2.getAttribute("name") : element2.getAttribute("id");
      input.setAttribute("name", name);
      element2.removeAttribute("name");
      var attributes2 = ["required", "aria-required", "form"];
      for (var i = 0; i < attributes2.length; i++) {
        if (isNullOrUndefined(element2.getAttribute(attributes2[i]))) {
          continue;
        }
        var attr = element2.getAttribute(attributes2[i]);
        input.setAttribute(attributes2[i], attr);
        element2.removeAttribute(attributes2[i]);
      }
    };
    DateRangePicker2.prototype.updateHtmlAttributeToWrapper = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (wrapperAttr3.indexOf(key) > -1) {
            if (key === "class") {
              var updatedClassValue = this.htmlAttributes["" + key].replace(/\s+/g, " ").trim();
              if (updatedClassValue !== "") {
                addClass([this.inputWrapper.container], updatedClassValue.split(" "));
              }
            } else if (key === "style") {
              var dateRangeStyle = this.inputWrapper.container.getAttribute(key);
              dateRangeStyle = !isNullOrUndefined(dateRangeStyle) ? dateRangeStyle + this.htmlAttributes["" + key] : this.htmlAttributes["" + key];
              this.inputWrapper.container.setAttribute(key, dateRangeStyle);
            } else {
              this.inputWrapper.container.setAttribute(key, this.htmlAttributes["" + key]);
            }
          }
        }
      }
    };
    DateRangePicker2.prototype.updateHtmlAttributeToElement = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (wrapperAttr3.indexOf(key) < 0) {
            this.inputElement.setAttribute(key, this.htmlAttributes["" + key]);
          }
        }
      }
    };
    DateRangePicker2.prototype.updateCssClass = function(cssNewClass, cssOldClass) {
      if (!isNullOrUndefined(cssOldClass)) {
        cssOldClass = cssOldClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(cssNewClass)) {
        cssNewClass = cssNewClass.replace(/\s+/g, " ").trim();
      }
      Input.setCssClass(cssNewClass, [this.inputWrapper.container], cssOldClass);
      if (this.popupWrapper) {
        Input.setCssClass(cssNewClass, [this.popupWrapper], cssOldClass);
      }
    };
    DateRangePicker2.prototype.processPresets = function() {
      this.presetsItem = [];
      var i = 0;
      if (!isNullOrUndefined(this.presets[0]) && !isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label)) {
        for (var _i = 0, _a = this.presets; _i < _a.length; _i++) {
          var range = _a[_i];
          var id = range.label.replace(/\s+/g, "") + "_" + ++i;
          if (typeof range.end === "string") {
            this.presetsItem.push({
              id,
              text: range.label,
              end: new Date(this.checkValue(range.end)),
              start: new Date(this.checkValue(range.start))
            });
          } else {
            this.presetsItem.push({
              id,
              text: range.label,
              start: range.start,
              end: range.end
            });
          }
        }
        var startDate = isNullOrUndefined(this.startValue) ? null : /* @__PURE__ */ new Date(+this.startValue);
        var endDate = isNullOrUndefined(this.endValue) ? null : /* @__PURE__ */ new Date(+this.endValue);
        this.presetsItem.push({
          id: "custom_range",
          text: this.l10n.getConstant("customRange"),
          start: startDate,
          end: endDate
        });
        if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue)) {
          this.isCustomRange = true;
          this.activeIndex = this.presetsItem.length - 1;
        }
      }
    };
    DateRangePicker2.prototype.bindEvents = function() {
      EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.rangeIconHandler, this);
      EventHandler.add(this.inputElement, "focus", this.inputFocusHandler, this);
      EventHandler.add(this.inputElement, "blur", this.inputBlurHandler, this);
      EventHandler.add(this.inputElement, "change", this.inputChangeHandler, this);
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown", this.resetHandler, this);
      }
      if (!this.isMobile) {
        this.keyInputConfigs = extend(this.keyInputConfigs, this.keyConfigs);
        this.inputKeyboardModule = new KeyboardEvents(this.inputElement, {
          eventName: "keydown",
          keyAction: this.inputHandler.bind(this),
          keyConfigs: this.keyInputConfigs
        });
      }
      if (this.formElement) {
        EventHandler.add(this.formElement, "reset", this.formResetHandler, this);
      }
      if (this.enabled) {
        this.inputElement.setAttribute("tabindex", this.tabIndex);
      } else {
        this.inputElement.tabIndex = -1;
      }
    };
    DateRangePicker2.prototype.unBindEvents = function() {
      EventHandler.remove(this.inputWrapper.buttons[0], "mousedown", this.rangeIconHandler);
      EventHandler.remove(this.inputElement, "blur", this.inputBlurHandler);
      EventHandler.remove(this.inputElement, "focus", this.inputFocusHandler);
      EventHandler.remove(this.inputElement, "change", this.inputChangeHandler);
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.remove(this.inputWrapper.clearButton, "mousedown touchstart", this.resetHandler);
      }
      if (!this.isMobile) {
        if (!isNullOrUndefined(this.inputKeyboardModule)) {
          this.inputKeyboardModule.destroy();
        }
      }
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.formResetHandler);
      }
      this.inputElement.tabIndex = -1;
    };
    DateRangePicker2.prototype.updateHiddenInput = function() {
      if (this.firstHiddenChild && this.secondHiddenChild) {
        var format = {
          format: this.formatString,
          type: "datetime",
          skeleton: "yMd"
        };
        if (typeof this.startDate === "string") {
          this.startDate = this.globalize.parseDate(this.getAmPmValue(this.startDate), format);
        }
        if (typeof this.endDate === "string") {
          this.endDate = this.globalize.parseDate(this.getAmPmValue(this.endDate), format);
        }
        this.firstHiddenChild.value = this.startDate && this.globalize.formatDate(this.startDate, format) || this.inputElement.value;
        this.secondHiddenChild.value = this.endDate && this.globalize.formatDate(this.endDate, format) || this.inputElement.value;
        this.dispatchEvent(this.firstHiddenChild, "focusout");
        this.dispatchEvent(this.firstHiddenChild, "change");
      }
    };
    DateRangePicker2.prototype.inputChangeHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      e.stopPropagation();
      this.updateHiddenInput();
    };
    DateRangePicker2.prototype.bindClearEvent = function() {
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown", this.resetHandler, this);
      }
    };
    DateRangePicker2.prototype.resetHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      this.valueType = this.value;
      e.preventDefault();
      this.clear();
      var clearedArgs = {
        event: e
      };
      this.setProperties({
        endDate: this.checkDateValue(this.endValue)
      }, true);
      this.setProperties({
        startDate: this.checkDateValue(this.startValue)
      }, true);
      this.trigger("cleared", clearedArgs);
      this.changeTrigger(e);
      this.clearRange();
      this.hide(e);
      if (closest(this.element, "form")) {
        var element2 = this.firstHiddenChild;
        var keyupEvent = document.createEvent("KeyboardEvent");
        keyupEvent.initEvent("keyup", false, true);
        element2.dispatchEvent(keyupEvent);
      }
    };
    DateRangePicker2.prototype.restoreValue = function() {
      this.previousEleValue = this.inputElement.value;
      this.previousStartValue = this.startValue;
      this.previousEndValue = this.endValue;
      this.valueType = null;
      this.initStartDate = this.checkDateValue(this.startValue);
      this.initEndDate = this.checkDateValue(this.endValue);
      this.setValue();
      this.setModelValue();
    };
    DateRangePicker2.prototype.formResetHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.formElement && e.target === this.formElement && !this.inputElement.disabled) {
        var val = this.inputElement.getAttribute("value");
        if (!isNullOrUndefined(this.startCopy)) {
          if (!isNullOrUndefined(this.value) && !isNullOrUndefined(this.value.start)) {
            this.setProperties({
              value: {
                start: this.startCopy,
                end: this.endCopy
              }
            }, true);
            this.startValue = this.value.start;
            this.endValue = this.value.end;
          } else {
            this.setProperties({
              value: [this.startCopy, this.endCopy]
            }, true);
            this.startValue = this.value[0];
            this.endValue = this.value[1];
          }
          this.setProperties({
            startDate: this.startValue,
            endDate: this.endValue
          }, true);
        } else {
          this.setProperties({
            value: null,
            startDate: null,
            endDate: null
          }, true);
          this.startValue = this.endValue = null;
        }
        if (this.element.tagName === "EJS-DATERANGEPICKER") {
          this.setProperties({
            value: null,
            startDate: null,
            endDate: null
          }, true);
          val = "";
          this.startValue = this.endValue = null;
          this.inputElement.setAttribute("value", "");
        }
        this.restoreValue();
        if (this.inputElement) {
          Input.setValue(val, this.inputElement, this.floatLabelType, this.showClearButton);
          this.errorClass();
        }
      }
    };
    DateRangePicker2.prototype.clear = function() {
      if (this.startValue !== null) {
        this.startValue = null;
      }
      if (this.endValue !== null) {
        this.endValue = null;
      }
      if (this.value && this.value.start) {
        this.setProperties({
          value: {
            start: null,
            end: null
          }
        }, true);
      }
      if (this.value !== null && this.value.length > 0) {
        this.setProperties({
          value: null
        }, true);
      }
      Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton);
      if (!isNullOrUndefined(this.applyButton)) {
        this.applyButton.disabled = this.applyButton.element.disabled = true;
      }
      this.removeSelection();
    };
    DateRangePicker2.prototype.rangeIconHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.isMobile) {
        this.inputElement.setAttribute("readonly", "");
      }
      e.preventDefault();
      this.targetElement = null;
      if (this.isPopupOpen() && document.body.contains(this.popupObj.element)) {
        this.applyFunction(e);
      } else {
        this.isRangeIconClicked = true;
        this.inputWrapper.container.children[0].focus();
        this.show(null, e);
        if (!this.isMobile) {
          if (!isNullOrUndefined(this.leftCalendar)) {
            this.isRangeIconClicked = false;
            this.calendarFocus();
            this.isRangeIconClicked = true;
          }
        }
        addClass([this.inputWrapper.container], [INPUTFOCUS2]);
      }
    };
    DateRangePicker2.prototype.checkHtmlAttributes = function(isDynamic) {
      this.globalize = new Internationalization(this.locale);
      var attributes2 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ["startDate", "endDate", "minDays", "maxDays", "min", "max", "disabled", "readonly", "style", "name", "placeholder", "type", "value"];
      var format = {
        format: this.formatString,
        type: "date",
        skeleton: "yMd"
      };
      for (var _i = 0, attributes_1 = attributes2; _i < attributes_1.length; _i++) {
        var prop = attributes_1[_i];
        if (!isNullOrUndefined(this.inputElement.getAttribute(prop))) {
          switch (prop) {
            case "disabled":
              if (isNullOrUndefined(this.dateRangeOptions) || this.dateRangeOptions["enabled"] === void 0 || isDynamic) {
                var disabled = this.inputElement.getAttribute(prop) === "disabled" || this.inputElement.getAttribute(prop) === "" || this.inputElement.getAttribute(prop) === "true" ? true : false;
                this.setProperties({
                  enabled: !disabled
                }, !isDynamic);
              }
              break;
            case "readonly":
              if (isNullOrUndefined(this.dateRangeOptions) || this.dateRangeOptions["readonly"] === void 0 || isDynamic) {
                var readonly = this.inputElement.getAttribute(prop) === "readonly" || this.inputElement.getAttribute(prop) === "true" || this.inputElement.getAttribute(prop) === "" ? true : false;
                this.setProperties({
                  readonly
                }, !isDynamic);
              }
              break;
            case "placeholder":
              if (isNullOrUndefined(this.dateRangeOptions) || this.dateRangeOptions["placeholder"] === void 0 || isDynamic) {
                this.setProperties({
                  placeholder: this.inputElement.getAttribute(prop)
                }, !isDynamic);
              }
              break;
            case "value":
              if (isNullOrUndefined(this.dateRangeOptions) || this.dateRangeOptions["value"] === void 0 || isDynamic) {
                var value = this.inputElement.getAttribute(prop);
                this.setProperties(setValue(prop, value, {}), !isDynamic);
              }
              break;
            case "style":
              this.inputElement.setAttribute("style", "" + this.inputElement.getAttribute(prop));
              break;
            case "min":
              if (isNullOrUndefined(this.min) || +this.min === +new Date(1900, 0, 1) || isDynamic) {
                var dateValue = this.globalize.parseDate(this.getAmPmValue(this.inputElement.getAttribute(prop)), format);
                this.setProperties(setValue(prop, dateValue, {}), !isDynamic);
              }
              break;
            case "name":
              this.inputElement.setAttribute("name", "" + this.inputElement.getAttribute(prop));
              break;
            case "max":
              if (isNullOrUndefined(this.max) || +this.max === +new Date(2099, 11, 31) || isDynamic) {
                var dateValue = this.globalize.parseDate(this.getAmPmValue(this.inputElement.getAttribute(prop)), format);
                this.setProperties(setValue(prop, dateValue, {}), !isDynamic);
              }
              break;
            case "startDate":
              if (isNullOrUndefined(this.startDate)) {
                var dateValue = this.globalize.parseDate(this.getAmPmValue(this.inputElement.getAttribute(prop)), format);
                this.startValue = dateValue;
                this.setValue();
              }
              break;
            case "endDate":
              if (isNullOrUndefined(this.endDate)) {
                var dateValue = this.globalize.parseDate(this.getAmPmValue(this.inputElement.getAttribute(prop)), format);
                this.endValue = dateValue;
                this.setValue();
              }
              break;
            case "minDays":
              if (isNullOrUndefined(this.minDays)) {
                this.setProperties(setValue(prop, parseInt(this.inputElement.getAttribute(prop), 10), {}), true);
              }
              break;
            case "maxDays":
              if (isNullOrUndefined(this.maxDays)) {
                this.setProperties(setValue(prop, parseInt(this.inputElement.getAttribute(prop), 10), {}), true);
              }
              break;
            case "type":
              if (this.inputElement.getAttribute(prop) !== "text") {
                this.inputElement.setAttribute("type", "text");
              }
              break;
          }
        }
      }
    };
    DateRangePicker2.prototype.createPopup = function() {
      for (var i = 0; i < this.presetsItem.length; i++) {
        if (i !== this.presetsItem.length - 1 && this.presetsItem[i].id === "custom_range") {
          this.presetsItem.splice(i, 1);
        }
      }
      this.activeIndex = this.presetsItem.length - 1;
      this.isCustomRange = true;
      for (var i = 0; i <= this.presetsItem.length - 2; i++) {
        var startDate = this.presetsItem[i].start;
        var endDate = this.presetsItem[i].end;
        if (this.startValue && this.endValue) {
          if (startDate.getDate() === this.startValue.getDate() && startDate.getMonth() === this.startValue.getMonth() && startDate.getFullYear() === this.startValue.getFullYear() && endDate.getDate() === this.endValue.getDate() && endDate.getMonth() === this.endValue.getMonth() && endDate.getFullYear() === this.endValue.getFullYear()) {
            this.activeIndex = i;
            this.isCustomRange = false;
          }
        }
      }
      this.popupWrapper = createElement("div", {
        id: this.element.id + "_popup",
        className: ROOT9 + " " + POPUP3
      });
      this.popupWrapper.setAttribute("aria-label", this.element.id);
      this.popupWrapper.setAttribute("role", "dialog");
      this.adjustLongHeaderWidth();
      var isPreset = !this.isCustomRange || this.isMobile;
      if (!isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label) && isPreset) {
        this.isCustomWindow = false;
        this.createPresets();
        this.listRippleEffect();
        this.renderPopup();
      } else {
        this.isCustomWindow = true;
        this.renderControl();
      }
    };
    DateRangePicker2.prototype.renderControl = function() {
      this.createControl();
      this.bindCalendarEvents();
      this.updateRange(this.isMobile ? [this.calendarElement] : [this.leftCalendar, this.rightCalendar]);
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.renderDayCellArgs) && this.renderDayCellArgs.isDisabled) {
        this.disabledDateRender();
      }
      this.updateHeader();
    };
    DateRangePicker2.prototype.clearCalendarEvents = function() {
      if (this.leftCalPrevIcon && this.leftCalNextIcon && this.rightCalPrevIcon && this.rightCalNextIcon) {
        EventHandler.clearEvents(this.leftCalPrevIcon);
        EventHandler.clearEvents(this.leftCalNextIcon);
        EventHandler.clearEvents(this.rightCalPrevIcon);
        EventHandler.clearEvents(this.rightCalNextIcon);
      }
    };
    DateRangePicker2.prototype.updateNavIcons = function() {
      _super.prototype.iconHandler.call(this);
    };
    DateRangePicker2.prototype.calendarIconEvent = function() {
      this.clearCalendarEvents();
      if (this.leftCalPrevIcon && !this.leftCalPrevIcon.classList.contains(DISABLED11)) {
        EventHandler.add(this.leftCalPrevIcon, "mousedown", this.navPrevFunction);
      }
      if (this.leftCalNextIcon && !this.leftCalNextIcon.classList.contains(DISABLED11)) {
        EventHandler.add(this.leftCalNextIcon, "mousedown", this.navNextFunction);
      }
      if (this.rightCalPrevIcon && !this.rightCalPrevIcon.classList.contains(DISABLED11)) {
        EventHandler.add(this.rightCalPrevIcon, "mousedown", this.navPrevFunction);
      }
      if (this.rightCalNextIcon && !this.rightCalNextIcon.classList.contains(DISABLED11)) {
        EventHandler.add(this.rightCalNextIcon, "mousedown", this.navNextFunction);
      }
    };
    DateRangePicker2.prototype.bindCalendarEvents = function() {
      if (!this.isMobile) {
        this.updateNavIcons();
        this.calendarIconEvent();
        this.calendarIconRipple();
        this.headerTitleElement = this.popupObj.element.querySelector("." + RIGHTCALENDER + " ." + HEADER3 + " ." + TITLE2);
        this.headerTitleElement = this.popupObj.element.querySelector("." + LEFTCALENDER + " ." + HEADER3 + " ." + TITLE2);
        this.defaultKeyConfigs = extend(this.defaultKeyConfigs, this.keyConfigs);
        this.leftKeyboardModule = new KeyboardEvents(this.leftCalendar, {
          eventName: "keydown",
          keyAction: this.keyInputHandler.bind(this),
          keyConfigs: this.defaultKeyConfigs
        });
        this.rightKeyboardModule = new KeyboardEvents(this.rightCalendar, {
          eventName: "keydown",
          keyAction: this.keyInputHandler.bind(this),
          keyConfigs: this.defaultKeyConfigs
        });
      } else {
        this.deviceCalendarEvent();
        EventHandler.add(this.startButton.element, "click", this.deviceHeaderClick, this);
        EventHandler.add(this.endButton.element, "click", this.deviceHeaderClick, this);
      }
      if (this.start === this.depth) {
        this.bindCalendarCellEvents();
      }
      this.removeFocusedDate();
    };
    DateRangePicker2.prototype.calendarIconRipple = function() {
      rippleEffect(this.leftCalPrevIcon, {
        selector: ".e-prev",
        duration: 400,
        isCenterRipple: true
      });
      rippleEffect(this.leftCalNextIcon, {
        selector: ".e-next",
        duration: 400,
        isCenterRipple: true
      });
      rippleEffect(this.rightCalPrevIcon, {
        selector: ".e-prev",
        duration: 400,
        isCenterRipple: true
      });
      rippleEffect(this.rightCalNextIcon, {
        selector: ".e-next",
        duration: 400,
        isCenterRipple: true
      });
    };
    DateRangePicker2.prototype.deviceCalendarEvent = function() {
      EventHandler.clearEvents(this.nextIcon);
      EventHandler.clearEvents(this.previousIcon);
      rippleEffect(this.nextIcon, {
        selector: ".e-prev",
        duration: 400,
        isCenterRipple: true
      });
      rippleEffect(this.previousIcon, {
        selector: ".e-next",
        duration: 400,
        isCenterRipple: true
      });
      if (this.nextIcon && !this.nextIcon.classList.contains(DISABLED11)) {
        EventHandler.add(this.nextIcon, "mousedown", this.deviceNavNextFunction);
      }
      if (this.previousIcon && !this.previousIcon.classList.contains(DISABLED11)) {
        EventHandler.add(this.previousIcon, "mousedown", this.deviceNavPrevFunction);
      }
    };
    DateRangePicker2.prototype.deviceNavNext = function(e) {
      var calendar = closest(e.target, "." + CALENDAR);
      this.updateDeviceCalendar(calendar);
      this.navigateNext(e);
      this.deviceNavigation();
    };
    DateRangePicker2.prototype.deviceNavPrevious = function(e) {
      var calendar = closest(e.target, "." + CALENDAR);
      this.updateDeviceCalendar(calendar);
      this.navigatePrevious(e);
      this.deviceNavigation();
    };
    DateRangePicker2.prototype.updateDeviceCalendar = function(calendar) {
      if (calendar) {
        this.previousIcon = calendar.querySelector("." + PREVICON2);
        this.nextIcon = calendar.querySelector("." + NEXTICON2);
        this.calendarElement = calendar;
        this.deviceCalendar = calendar;
        this.contentElement = calendar.querySelector("." + CONTENT3);
        this.tableBodyElement = select("." + CONTENT3 + " tbody", calendar);
        this.table = calendar.querySelector("." + CONTENT3).getElementsByTagName("table")[0];
        this.headerTitleElement = calendar.querySelector("." + HEADER3 + " ." + TITLE2);
        this.headerElement = calendar.querySelector("." + HEADER3);
      }
    };
    DateRangePicker2.prototype.deviceHeaderClick = function(event2) {
      var element2 = event2.currentTarget;
      if (element2.classList.contains(STARTBUTTON) && !isNullOrUndefined(this.startValue)) {
        this.endButton.element.classList.remove(ACTIVE4);
        this.startButton.element.classList.add(ACTIVE4);
        var calendar = this.popupObj.element.querySelector("." + CALENDAR);
        this.updateDeviceCalendar(calendar);
        if (isNullOrUndefined(this.calendarElement.querySelector("." + STARTDATE + ":not(.e-other-month)"))) {
          this.currentDate = /* @__PURE__ */ new Date(+this.startValue);
          remove(this.tableBodyElement);
          this.createContentBody();
          this.deviceNavigation();
        }
        this.removeClassDisabled();
      } else if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue)) {
        this.startButton.element.classList.remove(ACTIVE4);
        this.endButton.element.classList.add(ACTIVE4);
        var calendar = this.popupObj.element.querySelector("." + CALENDAR);
        this.updateDeviceCalendar(calendar);
        if (isNullOrUndefined(this.calendarElement.querySelector("." + ENDDATE + ":not(.e-other-month)"))) {
          this.currentDate = /* @__PURE__ */ new Date(+this.endValue);
          remove(this.tableBodyElement);
          this.createContentBody();
          this.deviceNavigation();
        }
        this.updateMinMaxDays(this.popupObj.element.querySelector("." + CALENDAR));
        this.selectableDates();
      }
    };
    DateRangePicker2.prototype.inputFocusHandler = function() {
      if (!this.enabled) {
        return;
      }
      this.preventBlur = false;
      var focusArguments = {
        model: this
      };
      if (!this.preventFocus) {
        this.trigger("focus", focusArguments);
      }
      this.updateClearIconState();
      if (this.openOnFocus && !this.preventFocus) {
        this.preventFocus = true;
        this.show();
      } else {
        this.preventFocus = true;
      }
    };
    DateRangePicker2.prototype.inputBlurHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (!this.preventBlur) {
        var value = this.inputElement.value;
        if (!isNullOrUndefined(this.presetsItem)) {
          if (this.presetsItem.length > 0 && this.previousEleValue !== this.inputElement.value) {
            this.activeIndex = this.presetsItem.length - 1;
            this.isCustomRange = true;
          }
        }
        if (!isNullOrUndefined(value) && value.trim() !== "") {
          var range = value.split(" " + this.separator + " ");
          if (range.length > 1) {
            this.invalidValueString = null;
            var dateOptions = {
              format: this.formatString,
              type: "date",
              skeleton: "yMd"
            };
            var startDate = this.globalize.parseDate(this.getAmPmValue(range[0]).trim(), dateOptions);
            var endDate = this.globalize.parseDate(this.getAmPmValue(range[1]).trim(), dateOptions);
            if (this.start !== "Decade" && this.start === "Year" && this.depth !== "Month") {
              if (this.inputElement.defaultValue !== value) {
                endDate = this.getStartEndDate(endDate, true);
              }
            }
            if (!isNullOrUndefined(startDate) && !isNaN(+startDate) && !isNullOrUndefined(endDate) && !isNaN(+endDate)) {
              var prevStartVal = this.startValue;
              this.startValue = startDate;
              var prevEndVal = this.endValue;
              this.endValue = endDate;
              this.setValue();
              this.refreshControl();
              if (value !== this.previousEleValue) {
                this.changeTrigger(e);
              }
              if (!this.preventBlur && document.activeElement !== this.inputElement) {
                this.preventFocus = false;
                var blurArguments = {
                  model: this
                };
                this.trigger("blur", blurArguments);
              }
              this.updateHiddenInput();
              if (this.isMobile && this.isPopupOpen()) {
                this.startValue = prevStartVal;
                this.endValue = prevEndVal;
              }
              return;
            } else {
              if (!this.strictMode) {
                this.startValue = null;
                this.endValue = null;
                this.setValue();
              }
            }
          } else {
            if (!this.strictMode) {
              this.startValue = null;
              this.endValue = null;
              this.setValue();
            }
          }
        }
        if (!this.strictMode) {
          if (isNullOrUndefined(this.popupObj)) {
            this.currentDate = null;
          }
          this.previousStartValue = this.previousEndValue = null;
          this.startValue = null;
          this.endValue = null;
          this.setValue();
        } else {
          if (!isNullOrUndefined(value) && value.trim() === "") {
            this.startValue = null;
            this.endValue = null;
          }
          Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton);
          this.updateInput();
        }
        this.errorClass();
        this.changeTrigger(e);
        if (!this.preventBlur && document.activeElement !== this.inputElement) {
          this.preventFocus = false;
          var blurArguments = {
            model: this
          };
          this.trigger("blur", blurArguments);
        }
      }
      this.updateHiddenInput();
    };
    DateRangePicker2.prototype.getStartEndDate = function(date, isEnd) {
      if (this.currentView() === "Year" && !isNullOrUndefined(date) || this.depth === "Year") {
        return new Date(date.getFullYear(), date.getMonth() + (isEnd ? 1 : 0), isEnd ? 0 : 1);
      } else if (this.currentView() === "Decade" && !isNullOrUndefined(date)) {
        return new Date(date.getFullYear(), isEnd ? 11 : 0, isEnd ? 31 : 1);
      } else {
        return null;
      }
    };
    DateRangePicker2.prototype.clearRange = function() {
      this.previousStartValue = this.previousEndValue = null;
      this.currentDate = null;
    };
    DateRangePicker2.prototype.errorClass = function() {
      var inputStr = !isNullOrUndefined(this.inputElement.value) ? this.inputElement.value.trim() : null;
      if ((isNullOrUndefined(this.endValue) && isNullOrUndefined(this.startValue) && inputStr !== "" || !isNullOrUndefined(this.startValue) && +this.startValue < +this.min || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue || !isNullOrUndefined(this.endValue) && +this.endValue > +this.max || this.startValue && this.isDateDisabled(this.startValue) || this.endValue && this.isDateDisabled(this.endValue)) && inputStr !== "") {
        addClass([this.inputWrapper.container], ERROR4);
        attributes(this.inputElement, {
          "aria-invalid": "true"
        });
      } else {
        if (this.inputWrapper) {
          removeClass([this.inputWrapper.container], ERROR4);
          attributes(this.inputElement, {
            "aria-invalid": "false"
          });
        }
      }
    };
    DateRangePicker2.prototype.keyCalendarUpdate = function(isLeftCalendar, ele, isRemoveFocus) {
      if (isRemoveFocus === void 0) {
        isRemoveFocus = true;
      }
      if (isRemoveFocus) {
        this.removeFocusedDate();
      }
      if (isLeftCalendar) {
        this.leftCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
        ele = this.leftCalendar;
      } else {
        this.rightCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
        ele = this.rightCalendar;
      }
      this.updateCalendarElement(ele);
      this.table.focus();
      return ele;
    };
    DateRangePicker2.prototype.navInCalendar = function(e, isLeftCalendar, leftLimit, rightLimit, ele) {
      var view = this.getViewNumber(this.currentView());
      var date;
      var min = this.min;
      var max;
      if (!isNullOrUndefined(this.maxDays) && this.isMaxDaysClicked && !isNullOrUndefined(this.startValue)) {
        max = new Date((/* @__PURE__ */ new Date(+this.startValue)).setDate(this.startValue.getDate() + (this.maxDays - 1)));
      } else {
        max = this.max;
      }
      switch (e.action) {
        case "moveRight":
          date = /* @__PURE__ */ new Date(+this.currentDate);
          this.addDay(date, 1, e, max, min);
          if (isLeftCalendar && +date === +rightLimit) {
            ele = this.keyCalendarUpdate(false, ele);
          }
          this.keyboardNavigate(1, view, e, max, min);
          this.keyNavigation(ele, e);
          break;
        case "moveLeft":
          date = /* @__PURE__ */ new Date(+this.currentDate);
          this.addDay(date, -1, e, max, min);
          if (!isLeftCalendar) {
            if (+date === +leftLimit) {
              ele = this.keyCalendarUpdate(true, ele);
            }
          }
          this.keyboardNavigate(-1, view, e, max, min);
          this.keyNavigation(ele, e);
          break;
        case "moveUp":
          if (view === 0) {
            date = /* @__PURE__ */ new Date(+this.currentDate);
            this.addDay(date, -7, e, max, min);
            if (+date <= +leftLimit && !isLeftCalendar) {
              ele = this.keyCalendarUpdate(true, ele);
            }
            this.keyboardNavigate(-7, view, e, max, min);
          } else {
            this.keyboardNavigate(-4, view, e, this.max, this.min);
          }
          this.keyNavigation(ele, e);
          break;
        case "moveDown":
          if (view === 0) {
            date = /* @__PURE__ */ new Date(+this.currentDate);
            this.addDay(date, 7, e, max, min);
            if (isLeftCalendar && +date >= +rightLimit) {
              ele = this.keyCalendarUpdate(false, ele);
            }
            this.keyboardNavigate(7, view, e, max, min);
          } else {
            this.keyboardNavigate(4, view, e, this.max, this.min);
          }
          this.keyNavigation(ele, e);
          break;
        case "home":
          this.currentDate = this.firstDay(this.currentDate);
          remove(this.tableBodyElement);
          if (view === 0) {
            this.renderMonths(e);
          } else if (view === 1) {
            this.renderYears(e);
          } else {
            this.renderDecades(e);
          }
          this.keyNavigation(ele, e);
          break;
        case "end":
          this.currentDate = this.lastDay(this.currentDate, view);
          remove(this.tableBodyElement);
          if (view === 0) {
            this.renderMonths(e);
          } else if (view === 1) {
            this.renderYears(e);
          } else {
            this.renderDecades(e);
          }
          this.keyNavigation(ele, e);
          break;
        case "tab":
          if (this.tabKeyValidation(ele, LEFTCALENDER)) {
            ele = this.keyCalendarUpdate(false, ele, false);
            this.currentDate = this.firstCellToFocus(this.rightCalendar);
            view = this.getViewNumber(this.currentView());
            this.keyboardNavigate(0, view, e, max, min);
            this.keyNavigation(ele, e);
          }
          break;
        case "shiftTab":
          if (this.tabKeyValidation(ele, RIGHTCALENDER)) {
            ele = this.keyCalendarUpdate(true, ele, false);
            this.currentDate = this.firstCellToFocus(this.leftCalendar);
            this.keyboardNavigate(0, view, e, max, min);
            this.keyNavigation(ele, e);
          }
          break;
      }
    };
    DateRangePicker2.prototype.firstCellToFocus = function(calendar) {
      var focusAbleEle = this.getViewNumber(this.currentView()) === 2 ? calendar.children[1].firstElementChild.querySelector("td.e-cell:not(.e-week-number):not(.e-disabled):not(.e-other-year)") : calendar.children[1].firstElementChild.querySelector("td.e-cell:not(.e-week-number):not(.e-disabled):not(.e-other-month)");
      var focusEleID = focusAbleEle && focusAbleEle.id ? focusAbleEle.id.split("_")[0] : null;
      var currentFirstDay = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), 1);
      var focusDate = focusEleID ? /* @__PURE__ */ new Date(+focusEleID) : currentFirstDay;
      return focusDate;
    };
    DateRangePicker2.prototype.keyInputHandler = function(e, value) {
      var date;
      var view = this.getViewNumber(this.currentView());
      var rightDateLimit = new Date(this.rightCalCurrentDate.getFullYear(), this.rightCalCurrentDate.getMonth(), 1);
      var leftDateLimit = new Date(this.leftCalCurrentDate.getFullYear(), this.leftCalCurrentDate.getMonth() + 1, 0);
      var ele = closest(e.target, "." + RIGHTCALENDER);
      ele = isNullOrUndefined(ele) ? this.leftCalendar : ele;
      var isLeftCalendar = ele.classList.contains(LEFTCALENDER);
      this.updateCalendarElement(ele);
      var selectedDate = this.tableBodyElement.querySelector("tr td.e-selected");
      var focusedDate = ele.querySelector("tr td." + FOCUSDATE);
      var startDate = ele.querySelector("tr td." + STARTDATE);
      var endDate = ele.querySelector("tr td." + ENDDATE);
      var depthValue = this.getViewNumber(this.depth);
      var levelRestrict = view === depthValue && this.getViewNumber(this.start) >= depthValue;
      var leftCalendar = closest(e.target, "." + LEFTCALENDER);
      var rightCalendar = closest(e.target, "." + RIGHTCALENDER);
      var presetElement = closest(e.target, "." + PRESETS);
      if (!isNullOrUndefined(focusedDate)) {
        this.currentDate = this.currentDate;
      } else if (!isNullOrUndefined(endDate) && !this.dateDisabled) {
        this.currentDate = /* @__PURE__ */ new Date(+this.endValue);
      } else if (!isNullOrUndefined(startDate) && !this.dateDisabled) {
        this.currentDate = /* @__PURE__ */ new Date(+this.startValue);
      } else if (!this.dateDisabled) {
        this.currentDate.setDate(1);
      }
      this.effect = "";
      switch (e.action) {
        case "altUpArrow":
          if (this.isPopupOpen()) {
            this.hide(e);
            this.preventFocus = true;
            this.inputElement.focus();
            addClass([this.inputWrapper.container], [INPUTFOCUS2]);
          }
          break;
        case "select":
          if (levelRestrict) {
            var element2 = !isNullOrUndefined(focusedDate) ? focusedDate : startDate;
            if (!isNullOrUndefined(element2) && !element2.classList.contains(DISABLED11)) {
              this.selectRange(null, element2);
            }
          } else {
            if (!isNullOrUndefined(selectedDate) && !levelRestrict || !isNullOrUndefined(focusedDate)) {
              if (!isNullOrUndefined(this.value)) {
                if (this.calendarElement.classList.contains(LEFTCALENDER)) {
                  value = this.startDate;
                } else {
                  value = this.endDate;
                }
              }
              this.controlDown = e;
              this.contentClick(null, --view, focusedDate || selectedDate, value);
            }
          }
          e.preventDefault();
          break;
        case "controlHome":
          {
            var yearDate = new Date(this.currentDate.getFullYear(), 0, 1);
            if (!isLeftCalendar && +yearDate < +leftDateLimit) {
              ele = this.keyCalendarUpdate(true, ele);
            }
            _super.prototype.navigateTo.call(this, "Month", new Date(this.currentDate.getFullYear(), 0, 1));
            this.keyNavigation(ele, e);
          }
          break;
        case "altRightArrow":
          if (!isNullOrUndefined(leftCalendar)) {
            this.rightCalendar.children[1].firstElementChild.focus();
          } else if (!isNullOrUndefined(rightCalendar)) {
            if (!isNullOrUndefined(this.presetElement)) {
              this.presetElement.focus();
              this.removeFocusedDate();
            } else {
              this.cancelButton.element.focus();
            }
          } else {
            if (!isNullOrUndefined(presetElement)) {
              this.cancelButton.element.focus();
            }
          }
          e.preventDefault();
          break;
        case "altLeftArrow":
          if (!isNullOrUndefined(leftCalendar)) {
            if (this.applyButton.element.disabled !== true) {
              this.applyButton.element.focus();
            } else {
              this.cancelButton.element.focus();
            }
          } else {
            if (!isNullOrUndefined(rightCalendar)) {
              this.leftCalendar.children[1].firstElementChild.focus();
            }
          }
          e.preventDefault();
          break;
        case "controlUp":
          if (this.calendarElement.classList.contains(LEFTCALENDER)) {
            this.calendarNavigation(e, this.calendarElement);
          } else {
            this.calendarNavigation(e, this.calendarElement);
          }
          e.preventDefault();
          break;
        case "controlDown":
          if ((!isNullOrUndefined(selectedDate) || !isNullOrUndefined(focusedDate)) && !levelRestrict) {
            if (!isNullOrUndefined(this.value)) {
              if (this.calendarElement.classList.contains(LEFTCALENDER)) {
                value = this.startDate;
              } else {
                value = this.endDate;
              }
            }
            this.controlDown = e;
            this.contentClick(null, --view, selectedDate || focusedDate, value);
          }
          e.preventDefault();
          break;
        case "controlEnd":
          {
            var yearDate = new Date(this.currentDate.getFullYear(), 11, 31);
            if (isLeftCalendar && +yearDate > +rightDateLimit) {
              ele = this.keyCalendarUpdate(false, ele);
            }
            _super.prototype.navigateTo.call(this, "Month", new Date(this.currentDate.getFullYear(), 11, 31));
            this.keyNavigation(ele, e);
          }
          break;
        case "pageUp":
          date = /* @__PURE__ */ new Date(+this.currentDate);
          this.addMonths(date, -1);
          if (!isLeftCalendar && +date <= +leftDateLimit) {
            ele = this.keyCalendarUpdate(true, ele);
          }
          this.addMonths(this.currentDate, -1);
          _super.prototype.navigateTo.call(this, "Month", this.currentDate);
          this.keyNavigation(ele, e);
          break;
        case "pageDown":
          date = /* @__PURE__ */ new Date(+this.currentDate);
          this.addMonths(date, 1);
          if (isLeftCalendar && +date >= +rightDateLimit) {
            ele = this.keyCalendarUpdate(false, ele);
          }
          this.addMonths(this.currentDate, 1);
          _super.prototype.navigateTo.call(this, "Month", this.currentDate);
          this.keyNavigation(ele, e);
          break;
        case "shiftPageUp":
          date = /* @__PURE__ */ new Date(+this.currentDate);
          this.addYears(date, -1);
          if (!isLeftCalendar && +date <= +leftDateLimit) {
            ele = this.keyCalendarUpdate(true, ele);
          }
          this.addYears(this.currentDate, -1);
          _super.prototype.navigateTo.call(this, "Month", this.currentDate);
          this.keyNavigation(ele, e);
          break;
        case "shiftPageDown":
          date = /* @__PURE__ */ new Date(+this.currentDate);
          this.addYears(date, 1);
          if (isLeftCalendar && +date >= +rightDateLimit) {
            ele = this.keyCalendarUpdate(false, ele);
          }
          this.addYears(this.currentDate, 1);
          _super.prototype.navigateTo.call(this, "Month", this.currentDate);
          this.keyNavigation(ele, e);
          break;
        case "shiftTab":
          if (!isNullOrUndefined(this.presetElement)) {
            this.presetElement.setAttribute("tabindex", "0");
            this.presetElement.focus();
            this.removeFocusedDate();
          }
          if (isLeftCalendar) {
            e.preventDefault();
          }
          if (this.tabKeyValidation(ele, RIGHTCALENDER)) {
            this.currentDate = /* @__PURE__ */ new Date(+this.leftCalCurrentDate);
            this.navInCalendar(e, isLeftCalendar, leftDateLimit, rightDateLimit, ele);
          }
          break;
        case "spacebar":
          if (this.applyButton && !this.applyButton.disabled) {
            this.applyFunction(e);
          }
          break;
        case "tab":
          if (this.tabKeyValidation(ele, LEFTCALENDER)) {
            this.currentDate = /* @__PURE__ */ new Date(+this.rightCalCurrentDate);
            this.navInCalendar(e, isLeftCalendar, leftDateLimit, rightDateLimit, ele);
          }
          break;
        default:
          this.navInCalendar(e, isLeftCalendar, leftDateLimit, rightDateLimit, ele);
          this.checkMinMaxDays();
      }
      this.presetHeight();
    };
    DateRangePicker2.prototype.tabKeyValidation = function(ele, calendarPos) {
      var isLeftCalendar = ele.classList.contains(calendarPos);
      var rightHeader = this.rightCalendar.querySelector(".e-header");
      var leftHeader = this.leftCalendar.querySelector(".e-header");
      var isRightMonth = rightHeader ? rightHeader.classList.contains("e-month") : false;
      var isLeftMonth = leftHeader ? leftHeader.classList.contains("e-month") : false;
      var isRightYear = rightHeader ? rightHeader.classList.contains("e-year") : false;
      var isLeftYear = leftHeader ? leftHeader.classList.contains("e-year") : false;
      var isRightDecade = rightHeader ? rightHeader.classList.contains("e-decade") : false;
      var isLeftDecade = leftHeader ? leftHeader.classList.contains("e-decade") : false;
      return isLeftCalendar && (isLeftMonth || isLeftYear || isLeftDecade) && (isRightMonth || isRightYear || isRightDecade) && !this.isMobile;
    };
    DateRangePicker2.prototype.keyNavigation = function(calendar, e) {
      this.bindCalendarCellEvents(calendar);
      if (calendar.classList.contains(LEFTCALENDER)) {
        this.leftCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
      } else {
        this.rightCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
      }
      this.updateNavIcons();
      this.calendarIconEvent();
      this.updateRange([calendar]);
      this.dateDisabled = this.isDateDisabled(this.currentDate);
      e.preventDefault();
    };
    DateRangePicker2.prototype.inputHandler = function(e) {
      switch (e.action) {
        case "altDownArrow":
          if (!this.isPopupOpen()) {
            if (this.inputElement.value === "") {
              this.clear();
              this.changeTrigger(e);
              this.clearRange();
            }
            this.show(null, e);
            this.isRangeIconClicked = false;
            if (!this.isMobile) {
              if (!isNullOrUndefined(this.leftCalendar)) {
                this.calendarFocus();
              }
            }
            this.isKeyPopup = true;
          }
          break;
        case "escape":
          if (this.isPopupOpen()) {
            this.hide(e);
          }
          break;
        case "enter":
          if (document.activeElement === this.inputElement) {
            this.inputBlurHandler(e);
            this.hide(e);
          }
          break;
        case "tab":
          if (document.activeElement === this.inputElement && this.isPopupOpen()) {
            this.hide(e);
            e.preventDefault();
          }
          break;
      }
    };
    DateRangePicker2.prototype.bindCalendarCellEvents = function(calendar) {
      var tdCells;
      if (calendar) {
        tdCells = calendar.querySelectorAll("." + CALENDAR + " td");
      } else {
        tdCells = this.popupObj.element.querySelectorAll("." + CALENDAR + " td");
      }
      for (var _i = 0, tdCells_1 = tdCells; _i < tdCells_1.length; _i++) {
        var cell = tdCells_1[_i];
        EventHandler.clearEvents(cell);
        var disabledCell = cell.classList.contains(DISABLED11) || cell.classList.contains(DATEDISABLED);
        if (!disabledCell && !cell.classList.contains(WEEKNUMBER2)) {
          if (!this.isMobile) {
            EventHandler.add(cell, "mouseover", this.hoverSelection, this);
          }
          EventHandler.add(cell, "mousedown", this.selectRange, this);
        }
      }
    };
    DateRangePicker2.prototype.removeFocusedDate = function() {
      var isDate = !isNullOrUndefined(this.startValue) || !isNullOrUndefined(this.endValue);
      var focusedDate = this.popupObj.element.querySelectorAll("." + CALENDAR + " ." + FOCUSDATE);
      for (var _i = 0, focusedDate_1 = focusedDate; _i < focusedDate_1.length; _i++) {
        var ele = focusedDate_1[_i];
        var today = /* @__PURE__ */ new Date();
        var eleDate = this.getIdValue(null, ele);
        if (this.depth === "Month" && this.currentView() === "Month" && (!ele.classList.contains(TODAY2) || ele.classList.contains(TODAY2) && isDate) || this.depth === "Year" && this.currentView() === "Year" && (!this.isSameMonth(today, eleDate) && !this.isSameYear(today, eleDate) || isDate) || this.depth === "Decade" && this.currentView() === "Decade" && (!this.isSameYear(today, eleDate) || isDate)) {
          ele.classList.remove(FOCUSDATE);
          if (!ele.classList.contains(STARTDATE) && !ele.classList.contains(ENDDATE)) {
            ele.removeAttribute("aria-label");
          }
        }
      }
    };
    DateRangePicker2.prototype.hoverSelection = function(event2, element2) {
      var currentElement = element2 || event2.currentTarget;
      var currentDate = this.getIdValue(null, currentElement);
      if (!isNullOrUndefined(this.startValue) && +this.startValue >= +this.min && +this.startValue <= +this.max) {
        if (!this.isDateDisabled(this.endValue) && !this.isDateDisabled(this.startValue) && isNullOrUndefined(this.endValue) && isNullOrUndefined(this.startValue) || !isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue)) {
          var tdCells = this.popupObj.element.querySelectorAll("." + CALENDAR + " td");
          for (var _i = 0, tdCells_2 = tdCells; _i < tdCells_2.length; _i++) {
            var ele = tdCells_2[_i];
            var isDisabledCell = !ele.classList.contains(DISABLED11) || ele.classList.contains(DATEDISABLED);
            if (!ele.classList.contains(WEEKNUMBER2) && isDisabledCell) {
              var eleDate = this.getIdValue(null, ele);
              var startDateValue = this.currentView() === "Month" ? /* @__PURE__ */ new Date(+this.startValue) : this.getStartEndDate(/* @__PURE__ */ new Date(+this.startValue), false);
              var eleDateValue = /* @__PURE__ */ new Date(+eleDate);
              if (eleDateValue.setHours(0, 0, 0, 0) >= startDateValue.setHours(0, 0, 0, 0) && +eleDate <= +currentDate) {
                addClass([ele], RANGEHOVER);
              } else {
                removeClass([ele], [RANGEHOVER]);
              }
            }
          }
        }
      }
    };
    DateRangePicker2.prototype.isSameStartEnd = function(startVal, endVal) {
      var isSame = false;
      if (this.depth === "Month") {
        if (startVal.setHours(0, 0, 0, 0) === endVal.setHours(0, 0, 0, 0)) {
          isSame = true;
        }
      } else if (this.depth === "Year") {
        if (startVal.getFullYear() === endVal.getFullYear() && startVal.getMonth() === endVal.getMonth()) {
          isSame = true;
        }
      } else if (this.depth === "Decade") {
        if (startVal.getFullYear() === endVal.getFullYear()) {
          isSame = true;
        }
      }
      return isSame;
    };
    DateRangePicker2.prototype.updateRange = function(elementCollection) {
      if (!isNullOrUndefined(this.startValue)) {
        for (var _i = 0, elementCollection_1 = elementCollection; _i < elementCollection_1.length; _i++) {
          var calendar = elementCollection_1[_i];
          var tdCells = calendar.querySelectorAll("." + CALENDAR + " td");
          for (var _a = 0, tdCells_3 = tdCells; _a < tdCells_3.length; _a++) {
            var ele = tdCells_3[_a];
            if (!ele.classList.contains(WEEKNUMBER2) && !ele.classList.contains(DISABLED11)) {
              var eleDate = this.getIdValue(null, ele);
              var eleDateValue = this.getIdValue(null, ele);
              if (!isNullOrUndefined(this.endValue)) {
                var eleStartDateValue = this.currentView() === "Month" ? /* @__PURE__ */ new Date(+this.startValue) : this.getStartEndDate(/* @__PURE__ */ new Date(+this.startValue), false);
                var eleEndDateValue = this.currentView() === "Month" ? /* @__PURE__ */ new Date(+this.endValue) : this.getStartEndDate(/* @__PURE__ */ new Date(+this.endValue), true);
                if (this.currentView() === this.depth && +eleDateValue.setHours(0, 0, 0, 0) >= +eleStartDateValue.setHours(0, 0, 0, 0) && +eleDateValue.setHours(0, 0, 0, 0) <= +eleEndDateValue.setHours(0, 0, 0, 0) && !this.isSameStartEnd(/* @__PURE__ */ new Date(+this.startValue), /* @__PURE__ */ new Date(+this.endValue)) && +(/* @__PURE__ */ new Date(+this.startValue)).setHours(0, 0, 0, 0) >= +this.min && +(/* @__PURE__ */ new Date(+this.endValue)).setHours(0, 0, 0, 0) <= +this.max && !(this.isDateDisabled(this.startValue) || this.isDateDisabled(this.endValue))) {
                  addClass([ele], RANGEHOVER);
                }
              } else {
                removeClass([ele], [RANGEHOVER]);
              }
              if (ele.classList.contains(SELECTED7) && ele.classList.contains(ENDDATE) && +eleDateValue !== +this.endValue) {
                removeClass([ele], [SELECTED7]);
                removeClass([ele], [ENDDATE]);
              }
              if (ele.classList.contains(RANGEHOVER) && +eleDateValue > +this.endValue) {
                removeClass([ele], [RANGEHOVER]);
              }
              if (!ele.classList.contains(OTHERMONTH2)) {
                var startDateValue = this.currentView() === "Month" ? /* @__PURE__ */ new Date(+this.startValue) : this.getStartEndDate(/* @__PURE__ */ new Date(+this.startValue), false);
                var eleDateValue_1 = /* @__PURE__ */ new Date(+eleDate);
                if (this.currentView() === this.depth && +eleDateValue_1.setHours(0, 0, 0, 0) === +startDateValue.setHours(0, 0, 0, 0) && +eleDateValue_1.setHours(0, 0, 0, 0) >= +startDateValue.setHours(0, 0, 0, 0) && +this.startValue >= +this.min && !this.inputWrapper.container.classList.contains("e-error") && !(this.isDateDisabled(this.startValue) || this.isDateDisabled(this.endValue))) {
                  addClass([ele], [STARTDATE, SELECTED7]);
                  this.addSelectedAttributes(ele, this.startValue, true);
                }
                var endDateValue = this.currentView() === "Month" ? /* @__PURE__ */ new Date(+this.endValue) : this.getStartEndDate(/* @__PURE__ */ new Date(+this.endValue), true);
                if (this.currentView() === "Year") {
                  eleDateValue_1 = new Date(eleDateValue_1.getFullYear(), eleDateValue_1.getMonth() + 1, 0);
                } else if (this.currentView() === "Decade") {
                  eleDateValue_1 = new Date(eleDateValue_1.getFullYear(), 11, 31);
                }
                if (this.currentView() === this.depth && !isNullOrUndefined(this.endValue) && +eleDateValue_1.setHours(0, 0, 0, 0) === +endDateValue.setHours(0, 0, 0, 0) && +eleDateValue_1.setHours(0, 0, 0, 0) <= +endDateValue.setHours(0, 0, 0, 0) && +this.startValue >= +this.min && !this.inputWrapper.container.classList.contains("e-error") && !(this.isDateDisabled(this.startValue) || this.isDateDisabled(this.endValue))) {
                  addClass([ele], [ENDDATE, SELECTED7]);
                  this.addSelectedAttributes(ele, this.startValue, false);
                }
                if (+eleDate === +this.startValue && !isNullOrUndefined(this.endValue) && +eleDate === +this.endValue) {
                  this.addSelectedAttributes(ele, this.endValue, false, true);
                }
              }
            }
          }
        }
      }
    };
    DateRangePicker2.prototype.checkMinMaxDays = function() {
      if (!isNullOrUndefined(this.minDays) && this.minDays > 0 || !isNullOrUndefined(this.maxDays) && this.maxDays > 0) {
        if (!this.isMobile) {
          this.updateMinMaxDays(this.popupObj.element.querySelector("." + LEFTCALENDER));
          this.updateMinMaxDays(this.popupObj.element.querySelector("." + RIGHTCALENDER));
        } else {
          this.updateMinMaxDays(this.popupObj.element.querySelector("." + CALENDAR));
        }
      }
    };
    DateRangePicker2.prototype.rangeArgs = function(e) {
      var inputValue;
      var range;
      var startDate = !isNullOrUndefined(this.startValue) ? this.globalize.formatDate(this.startValue, {
        format: this.formatString,
        type: "date",
        skeleton: "yMd"
      }) : null;
      var endDate = !isNullOrUndefined(this.endValue) ? this.globalize.formatDate(this.endValue, {
        format: this.formatString,
        type: "date",
        skeleton: "yMd"
      }) : null;
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
        inputValue = startDate + " " + this.separator + " " + endDate;
        range = Math.round(Math.abs((this.removeTimeValueFromDate(this.startValue).getTime() - this.removeTimeValueFromDate(this.endValue).getTime()) / (1e3 * 60 * 60 * 24))) + 1;
      } else {
        inputValue = "";
        range = 0;
      }
      var args = {
        value: this.value,
        startDate: this.startValue,
        endDate: this.endValue,
        daySpan: range,
        event: e || null,
        element: this.element,
        isInteracted: !isNullOrUndefined(e),
        text: inputValue
      };
      return args;
    };
    DateRangePicker2.prototype.otherMonthSelect = function(ele, isStartDate, sameDate) {
      var value = +this.getIdValue(null, ele);
      var dateIdString = '*[id^="/id"]:not(.e-other-month)'.replace("/id", "" + value);
      var tdCell = this.popupObj && this.popupObj.element.querySelector(dateIdString);
      if (!isNullOrUndefined(tdCell)) {
        if (isStartDate) {
          addClass([tdCell], [STARTDATE, SELECTED7]);
          this.addSelectedAttributes(tdCell, this.startValue, true);
        } else {
          addClass([tdCell], [ENDDATE, SELECTED7]);
          this.addSelectedAttributes(tdCell, this.endValue, true);
        }
        if (sameDate) {
          this.addSelectedAttributes(ele, this.endValue, false, true);
        }
      }
    };
    DateRangePicker2.prototype.selectRange = function(event2, element2) {
      var leftCalendar;
      var rightCalendar;
      if (event2) {
        event2.preventDefault();
      }
      var isValue;
      var startDateValue;
      var endDateValue;
      var value = this.inputElement.value;
      if (!isNullOrUndefined(value) && value.trim() !== "") {
        var range = value.split(" " + this.separator + " ");
        if (range.length > 1 && (this.currentView() === "Year" && this.depth === "Year" || this.currentView() === "Decade" && this.depth === "Decade")) {
          var dateOptions = {
            format: this.formatString,
            type: "date",
            skeleton: "yMd"
          };
          startDateValue = this.globalize.parseDate(this.getAmPmValue(range[0]).trim(), dateOptions);
          endDateValue = this.globalize.parseDate(this.getAmPmValue(range[1]).trim(), dateOptions);
          isValue = true;
        }
      }
      var date = isNullOrUndefined(event2) ? this.getIdValue(null, element2) : this.getIdValue(event2, null);
      if (!isNullOrUndefined(this.startValue)) {
        if (this.currentView() === "Year" && this.depth === "Year") {
          date = new Date(date.getFullYear(), date.getMonth(), this.startValue.getDate());
        } else if (this.currentView() === "Decade" && this.depth === "Decade") {
          date = new Date(date.getFullYear(), this.startValue.getMonth(), this.startValue.getDate());
        }
      }
      var y = date.getFullYear();
      var m = date.getMonth();
      var firstDay = isValue && this.start !== "Year" ? new Date(y, m, startDateValue.getDate(), startDateValue.getHours(), startDateValue.getMinutes(), startDateValue.getSeconds()) : new Date(y, m, 1);
      var lastDay = isValue && this.start !== "Year" ? new Date(y, m, endDateValue.getDate(), endDateValue.getHours(), endDateValue.getMinutes(), endDateValue.getSeconds()) : new Date(y, m + 1, 0);
      var firstMonth = isValue && this.start !== "Year" ? new Date(y, startDateValue.getMonth(), startDateValue.getDate(), startDateValue.getHours(), startDateValue.getMinutes(), startDateValue.getSeconds()) : new Date(y, 0, 1);
      var lastMonth = isValue && this.start !== "Year" ? new Date(y, endDateValue.getMonth(), endDateValue.getDate(), endDateValue.getHours(), endDateValue.getMinutes(), endDateValue.getSeconds()) : new Date(y, 11, 31);
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
        if (!this.isMobile || this.isMobile && !this.endButton.element.classList.contains(ACTIVE4)) {
          this.removeSelection();
        }
      } else if (this.isMobile && this.startButton.element.classList.contains(ACTIVE4)) {
        this.removeSelection();
      }
      var ele = element2 || event2.currentTarget;
      if (isNullOrUndefined(this.startValue)) {
        if (!isNullOrUndefined(this.previousStartValue)) {
          date.setHours(this.previousStartValue.getHours());
          date.setMinutes(this.previousStartValue.getMinutes());
          date.setSeconds(this.previousStartValue.getSeconds());
        }
        this.startValue = this.depth === "Month" ? new Date(this.checkValue(date)) : this.depth === "Year" ? firstDay : firstMonth;
        this.endValue = null;
        this.setValue();
        addClass([ele], STARTDATE);
        this.addSelectedAttributes(ele, this.startValue, true);
        if (ele.classList.contains(OTHERMONTH2)) {
          this.otherMonthSelect(ele, true);
        }
        this.checkMinMaxDays();
        this.applyButton.disabled = true;
        this.applyButton.element.disabled = true;
        if (this.isMobile) {
          this.endButton.element.classList.add(ACTIVE4);
          this.startButton.element.classList.remove(ACTIVE4);
          this.endButton.element.removeAttribute("disabled");
          this.selectableDates();
        }
        this.trigger("select", this.rangeArgs(event2));
      } else {
        if (+date === +this.startValue || +date > +this.startValue) {
          if (+date === +this.startValue && !isNullOrUndefined(this.minDays) && this.minDays > 1) {
            return;
          }
          this.endValue = null;
          this.setValue();
          if (this.isMobile || element2) {
            this.hoverSelection(event2, element2);
          }
          if (!isNullOrUndefined(this.previousEndValue)) {
            date.setHours(this.previousEndValue.getHours());
            date.setMinutes(this.previousEndValue.getMinutes());
            date.setSeconds(this.previousEndValue.getSeconds());
          }
          this.endValue = this.depth === "Month" ? new Date(this.checkValue(date)) : this.depth === "Year" ? lastDay : lastMonth;
          this.setValue();
          var endEle = this.popupObj.element.querySelectorAll("." + ENDDATE);
          if (this.isMobile) {
            this.startButton.element.classList.remove(ACTIVE4);
            this.endButton.element.classList.add(ACTIVE4);
            for (var _i = 0, endEle_1 = endEle; _i < endEle_1.length; _i++) {
              var ele_1 = endEle_1[_i];
              ele_1.removeAttribute("aria-label");
              if (!ele_1.classList.contains(STARTDATE)) {
                ele_1.setAttribute("aria-selected", "false");
                removeClass([ele_1], [ENDDATE, SELECTED7]);
              } else {
                this.addSelectedAttributes(ele_1, this.startValue, true);
                removeClass([ele_1], [ENDDATE]);
              }
            }
          }
          addClass([ele], ENDDATE);
          if (+this.endValue === +this.startValue) {
            this.addSelectedAttributes(ele, this.endValue, false, true);
          } else {
            this.addSelectedAttributes(ele, this.endValue, false);
          }
          if (ele.classList.contains(OTHERMONTH2)) {
            if (+this.endValue === +this.startValue) {
              this.otherMonthSelect(ele, false, true);
            } else {
              this.otherMonthSelect(ele, false);
            }
          }
          endEle = this.popupObj.element.querySelectorAll("." + ENDDATE);
          for (var _a = 0, endEle_2 = endEle; _a < endEle_2.length; _a++) {
            var ele_2 = endEle_2[_a];
            if (ele_2.classList.contains(STARTDATE)) {
              removeClass([ele_2], [RANGEHOVER]);
            }
          }
          this.applyButton.disabled = false;
          this.applyButton.element.disabled = false;
          if (!this.isMobile) {
            this.removeClassDisabled();
          }
          if (!isNullOrUndefined(this.renderDayCellArgs) && this.renderDayCellArgs.isDisabled) {
            this.disabledDateRender();
          }
          this.trigger("select", this.rangeArgs(event2));
        } else if (+date < +this.startValue) {
          this.removeClassDisabled();
          this.startValue = this.depth === "Month" ? new Date(this.checkValue(date)) : this.depth === "Year" ? firstDay : firstMonth;
          this.setValue();
          this.removeSelectedAttributes();
          removeClass(this.popupObj.element.querySelectorAll("." + STARTDATE), [STARTDATE, SELECTED7]);
          addClass([ele], STARTDATE);
          this.addSelectedAttributes(ele, this.startValue, true);
          if (ele.classList.contains(OTHERMONTH2)) {
            this.otherMonthSelect(ele, true);
          }
          this.checkMinMaxDays();
        }
      }
      if (event2) {
        leftCalendar = closest(event2.target, "." + LEFTCALENDER);
      }
      if (!isNullOrUndefined(leftCalendar)) {
        this.leftCalendar.children[1].firstElementChild.focus();
      } else {
        if (event2) {
          rightCalendar = event2 && closest(event2.target, "." + RIGHTCALENDER);
        }
        if (!isNullOrUndefined(rightCalendar)) {
          this.rightCalendar.children[1].firstElementChild.focus();
        }
      }
      addClass([ele], SELECTED7);
      this.calendarIconEvent();
      this.updateHeader();
      this.removeFocusedDate();
    };
    DateRangePicker2.prototype.selectableDates = function() {
      if (!isNullOrUndefined(this.startValue)) {
        var tdCells = this.calendarElement.querySelectorAll("." + CALENDAR + " td");
        var isStartDate = false;
        if (this.currentView() === this.depth) {
          for (var _i = 0, tdCells_4 = tdCells; _i < tdCells_4.length; _i++) {
            var ele = tdCells_4[_i];
            if (!ele.classList.contains(STARTDATE) && !ele.classList.contains(WEEKNUMBER2)) {
              if (!ele.classList.contains(DISABLED11)) {
                var eleDate = this.getIdValue(null, ele);
                if (+eleDate < +this.startValue) {
                  addClass([ele], [DATEDISABLED, DISABLED11, OVERLAY2]);
                  EventHandler.clearEvents(ele);
                  continue;
                } else {
                  break;
                }
              }
            }
            if (ele.classList.contains(STARTDATE) && !ele.classList.contains(OTHERMONTH2)) {
              isStartDate = true;
              break;
            }
          }
          if (isStartDate) {
            if (!this.previousIcon.classList.contains(DISABLED11)) {
              addClass([this.previousIcon], [ICONDISABLED, DISABLED11, OVERLAY2]);
            }
          }
        } else {
          for (var _a = 0, tdCells_5 = tdCells; _a < tdCells_5.length; _a++) {
            var ele = tdCells_5[_a];
            var startMonth = this.startValue.getMonth();
            var startYear = this.startValue.getFullYear();
            var element2 = this.getIdValue(null, ele);
            if (!this.startButton.element.classList.contains(ACTIVE4) && (this.currentView() === "Year" && element2.getMonth() < startMonth && element2.getFullYear() <= startYear || this.currentView() === "Decade" && element2.getMonth() <= startMonth && element2.getFullYear() < startYear)) {
              addClass([ele], [DISABLED11]);
            } else {
              break;
            }
          }
          if (tdCells[0].classList.contains(DISABLED11)) {
            this.previousIconHandler(true);
          } else if (tdCells[tdCells.length - 1].classList.contains(DISABLED11)) {
            this.nextIconHandler(true);
          }
        }
      }
    };
    DateRangePicker2.prototype.updateMinMaxDays = function(calendar) {
      if (!isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue) || this.isMobile && this.endButton && this.endButton.element.classList.contains(ACTIVE4)) {
        if (!isNullOrUndefined(this.minDays) && this.minDays > 0 || !isNullOrUndefined(this.maxDays) && this.maxDays > 0) {
          var startValueSelected = this.removeTimeValueFromDate(this.startValue);
          var minDate = new Date((/* @__PURE__ */ new Date(+startValueSelected)).setDate(startValueSelected.getDate() + (this.minDays - 1)));
          var maxDate = new Date((/* @__PURE__ */ new Date(+startValueSelected)).setDate(startValueSelected.getDate() + (this.maxDays - 1)));
          minDate = !isNullOrUndefined(this.minDays) && this.minDays > 0 ? minDate : null;
          maxDate = !isNullOrUndefined(this.maxDays) && this.maxDays > 0 ? maxDate : null;
          if (this.currentView() === "Year") {
            minDate = isNullOrUndefined(minDate) ? null : new Date(minDate.getFullYear(), minDate.getMonth(), 0);
            maxDate = isNullOrUndefined(maxDate) ? null : new Date(maxDate.getFullYear(), maxDate.getMonth(), 1);
          } else if (this.currentView() === "Decade") {
            minDate = isNullOrUndefined(minDate) ? null : new Date(minDate.getFullYear() - 1, 11, 1);
            maxDate = isNullOrUndefined(maxDate) ? null : new Date(maxDate.getFullYear(), 0, 1);
          }
          var tdCells = calendar.querySelectorAll("." + CALENDAR + " td");
          var maxEle = void 0;
          for (var _i = 0, tdCells_6 = tdCells; _i < tdCells_6.length; _i++) {
            var ele = tdCells_6[_i];
            if (!ele.classList.contains(STARTDATE) && !ele.classList.contains(WEEKNUMBER2)) {
              var eleDate = this.getIdValue(null, ele);
              eleDate = this.removeTimeValueFromDate(eleDate);
              if (!isNullOrUndefined(minDate) && +eleDate === +minDate && ele.classList.contains(DISABLED11)) {
                minDate.setDate(minDate.getDate() + 1);
              }
              if (!ele.classList.contains(DISABLED11)) {
                if (+eleDate <= +startValueSelected) {
                  continue;
                }
                if (!isNullOrUndefined(minDate) && +eleDate < +minDate) {
                  addClass([ele], [DATEDISABLED, DISABLED11, OVERLAY2]);
                  EventHandler.clearEvents(ele);
                }
                if (!isNullOrUndefined(maxDate) && +eleDate > +maxDate) {
                  addClass([ele], [DATEDISABLED, DISABLED11, OVERLAY2]);
                  this.isMaxDaysClicked = true;
                  EventHandler.clearEvents(ele);
                  if (isNullOrUndefined(maxEle) && !ele.classList.contains(OTHERMONTH2)) {
                    maxEle = ele;
                  }
                }
              }
            }
          }
          if (!isNullOrUndefined(maxEle)) {
            if (this.isMobile) {
              if (!this.nextIcon.classList.contains(DISABLED11)) {
                addClass([this.nextIcon], [ICONDISABLED, DISABLED11, OVERLAY2]);
              }
            } else {
              var calendar_1 = closest(maxEle, "." + RIGHTCALENDER);
              calendar_1 = isNullOrUndefined(calendar_1) ? this.leftCalendar : calendar_1;
              var isLeftCalendar = calendar_1.classList.contains(LEFTCALENDER);
              if (!isLeftCalendar) {
                if (!this.rightCalNextIcon.classList.contains(DISABLED11)) {
                  addClass([this.rightCalNextIcon], [ICONDISABLED, DISABLED11, OVERLAY2]);
                }
              } else {
                if (!this.rightCalNextIcon.classList.contains(DISABLED11)) {
                  addClass([this.rightCalNextIcon], [ICONDISABLED, DISABLED11, OVERLAY2]);
                }
                if (!this.leftCalNextIcon.classList.contains(DISABLED11)) {
                  addClass([this.leftCalNextIcon], [ICONDISABLED, DISABLED11, OVERLAY2]);
                }
                if (!this.rightCalPrevIcon.classList.contains(DISABLED11)) {
                  addClass([this.rightCalPrevIcon], [ICONDISABLED, DISABLED11, OVERLAY2]);
                }
              }
            }
          }
        }
      } else {
        this.isMaxDaysClicked = false;
      }
    };
    DateRangePicker2.prototype.removeTimeValueFromDate = function(value) {
      var dateValue = new Date(value.getFullYear(), value.getMonth(), value.getDate());
      return dateValue;
    };
    DateRangePicker2.prototype.removeClassDisabled = function() {
      var tdCells = this.popupObj.element.querySelectorAll("." + CALENDAR + " td." + DATEDISABLED);
      for (var _i = 0, tdCells_7 = tdCells; _i < tdCells_7.length; _i++) {
        var ele = tdCells_7[_i];
        if (ele.classList.contains(DATEDISABLED)) {
          removeClass([ele], [DATEDISABLED, DISABLED11, OVERLAY2]);
          EventHandler.add(ele, "click", this.selectRange, this);
          if (!this.isMobile) {
            EventHandler.add(ele, "mouseover", this.hoverSelection, this);
          }
        }
      }
      if (this.isMobile) {
        if (this.nextIcon.classList.contains(ICONDISABLED)) {
          removeClass([this.nextIcon], [ICONDISABLED, DISABLED11, OVERLAY2]);
        }
        if (this.previousIcon.classList.contains(ICONDISABLED)) {
          removeClass([this.previousIcon], [ICONDISABLED, DISABLED11, OVERLAY2]);
        }
      } else {
        if (this.rightCalNextIcon.classList.contains(ICONDISABLED)) {
          removeClass([this.rightCalNextIcon], [ICONDISABLED, DISABLED11, OVERLAY2]);
        }
        if (this.rightCalPrevIcon.classList.contains(ICONDISABLED)) {
          removeClass([this.rightCalPrevIcon], [ICONDISABLED, DISABLED11, OVERLAY2]);
        }
        if (this.leftCalNextIcon.classList.contains(ICONDISABLED)) {
          removeClass([this.leftCalNextIcon], [ICONDISABLED, DISABLED11, OVERLAY2]);
        }
      }
    };
    DateRangePicker2.prototype.updateHeader = function() {
      var format = {
        type: "date",
        skeleton: "yMMMd"
      };
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
        var range = Math.round(Math.abs((this.removeTimeValueFromDate(this.startValue).getTime() - this.removeTimeValueFromDate(this.endValue).getTime()) / (1e3 * 60 * 60 * 24))) + 1;
        if (!isNullOrUndefined(this.disabledDayCnt)) {
          range = range - this.disabledDayCnt;
          this.disabledDayCnt = null;
        }
        this.popupObj.element.querySelector("." + DAYSPAN).textContent = range.toString() + " " + this.l10n.getConstant("days");
      } else {
        this.popupObj.element.querySelector("." + DAYSPAN).textContent = this.l10n.getConstant("selectedDays");
      }
      if (!this.isMobile) {
        if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
          this.popupObj.element.querySelector("." + ENDLABEL).textContent = this.globalize.formatDate(this.endValue, format);
        } else {
          this.popupObj.element.querySelector("." + ENDLABEL).textContent = this.l10n.getConstant("endLabel");
        }
        if (!isNullOrUndefined(this.startValue)) {
          this.popupObj.element.querySelector("." + STARTLABEL).textContent = this.globalize.formatDate(this.startValue, format);
        } else {
          this.popupObj.element.querySelector("." + STARTLABEL).textContent = this.l10n.getConstant("startLabel");
        }
      } else {
        if (!isNullOrUndefined(this.startValue)) {
          this.startButton.element.textContent = this.globalize.formatDate(this.startValue, format);
        } else {
          this.startButton.element.textContent = this.l10n.getConstant("startLabel");
        }
        if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
          this.endButton.element.textContent = this.globalize.formatDate(this.endValue, format);
        } else {
          this.endButton.element.textContent = this.l10n.getConstant("endLabel");
        }
      }
      if (this.isDateDisabled(this.startValue) || this.isDateDisabled(this.endValue) || !isNullOrUndefined(this.startValue) && +this.startValue < +this.min || !isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue) {
        if (!this.isMobile) {
          this.popupObj.element.querySelector("." + DAYSPAN).textContent = this.l10n.getConstant("selectedDays");
          this.popupObj.element.querySelector("." + STARTLABEL).textContent = this.l10n.getConstant("startLabel");
          this.popupObj.element.querySelector("." + ENDLABEL).textContent = this.l10n.getConstant("endLabel");
        } else {
          this.startButton.element.textContent = this.l10n.getConstant("startLabel");
          this.endButton.element.textContent = this.l10n.getConstant("endLabel");
          this.popupObj.element.querySelector("." + DAYSPAN).textContent = this.l10n.getConstant("selectedDays");
        }
      }
      if (this.popupObj.element.querySelector("#custom_range")) {
        this.popupObj.element.querySelector("#custom_range").textContent = this.l10n.getConstant("customRange") !== "" ? this.l10n.getConstant("customRange") : "Custom Range";
      }
    };
    DateRangePicker2.prototype.removeSelection = function() {
      this.startValue = null;
      this.endValue = null;
      this.setValue();
      this.removeSelectedAttributes();
      if (this.popupObj) {
        if (this.popupObj.element.querySelectorAll("." + SELECTED7).length > 0) {
          removeClass(this.popupObj.element.querySelectorAll("." + SELECTED7), [STARTDATE, ENDDATE, SELECTED7]);
        }
        if (this.popupObj.element.querySelectorAll("." + FOCUSDATE).length > 0) {
          removeClass(this.popupObj.element.querySelectorAll("." + FOCUSDATE), FOCUSDATE);
        }
        if (this.popupObj.element.querySelectorAll("." + RANGEHOVER).length > 0) {
          removeClass(this.popupObj.element.querySelectorAll("." + RANGEHOVER), [RANGEHOVER]);
        }
      }
    };
    DateRangePicker2.prototype.addSelectedAttributes = function(ele, date, isStartDate, sameDate) {
      if (ele) {
        var title = this.globalize.formatDate(date, {
          type: "date",
          skeleton: "full"
        });
        if (!isNullOrUndefined(sameDate) && sameDate) {
          ele.setAttribute("aria-label", "The current start and end date is " + title);
        } else {
          ele.setAttribute("aria-label", "The current " + (isStartDate ? "start" : "end") + " date is " + title);
        }
        ele.setAttribute("aria-selected", "true");
      }
    };
    DateRangePicker2.prototype.removeSelectedAttributes = function() {
      if (this.popupObj) {
        var start = this.popupObj.element.querySelectorAll("." + STARTDATE);
        for (var _i = 0, start_1 = start; _i < start_1.length; _i++) {
          var ele = start_1[_i];
          ele.setAttribute("aria-selected", "false");
          ele.removeAttribute("aria-label");
        }
        var end = this.popupObj.element.querySelectorAll("." + ENDDATE);
        for (var _a = 0, end_1 = end; _a < end_1.length; _a++) {
          var ele = end_1[_a];
          ele.setAttribute("aria-selected", "false");
          ele.removeAttribute("aria-label");
        }
      }
    };
    DateRangePicker2.prototype.updateCalendarElement = function(calendar) {
      if (calendar.classList.contains(LEFTCALENDER)) {
        this.calendarElement = this.leftCalendar;
        this.currentDate = this.leftCalCurrentDate;
        this.previousIcon = this.leftCalPrevIcon;
        this.nextIcon = this.leftCalNextIcon;
      } else {
        this.calendarElement = this.rightCalendar;
        this.currentDate = this.rightCalCurrentDate;
        this.previousIcon = this.rightCalPrevIcon;
        this.nextIcon = this.rightCalNextIcon;
      }
      this.contentElement = calendar.querySelector("." + CONTENT3);
      this.tableBodyElement = select("." + CONTENT3 + " tbody", calendar);
      this.table = calendar.querySelector("." + CONTENT3).getElementsByTagName("table")[0];
      this.headerTitleElement = calendar.querySelector("." + HEADER3 + " ." + TITLE2);
      this.headerElement = calendar.querySelector("." + HEADER3);
    };
    DateRangePicker2.prototype.navPrevMonth = function(e) {
      e.preventDefault();
      var ele = closest(e.target, "." + LEFTCALENDER);
      ele = isNullOrUndefined(ele) ? closest(e.target, "." + RIGHTCALENDER) : ele;
      this.updateCalendarElement(ele);
      this.navigatePrevious(e);
      if (!isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue)) {
        this.updateMinMaxDays(ele);
      }
      this.updateControl(ele);
    };
    DateRangePicker2.prototype.deviceNavigation = function(ele) {
      this.deviceCalendarEvent();
      this.updateRange([this.popupObj.element.querySelector("." + CALENDAR)]);
      if (this.endButton.element.classList.contains(ACTIVE4)) {
        this.updateMinMaxDays(this.popupObj.element.querySelector("." + CALENDAR));
      }
      if (this.endButton.element.classList.contains(ACTIVE4)) {
        this.selectableDates();
      }
      if (this.currentView() === this.depth) {
        this.bindCalendarCellEvents();
      }
      this.removeFocusedDate();
    };
    DateRangePicker2.prototype.updateControl = function(calendar, customDate) {
      if (customDate === void 0) {
        customDate = null;
      }
      if (calendar.classList.contains(RIGHTCALENDER)) {
        this.rightCalCurrentDate = /* @__PURE__ */ new Date(+(customDate ? customDate : this.currentDate));
      } else {
        this.leftCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
      }
      this.calendarIconEvent();
      if (this.depth === "Month" && this.leftCalendar.querySelector(".e-content").classList.contains("e-month") && this.rightCalendar.querySelector(".e-content").classList.contains("e-month") || this.depth === "Year" && this.leftCalendar.querySelector(".e-content").classList.contains("e-year") && this.rightCalendar.querySelector(".e-content").classList.contains("e-year") || this.depth === "Decade" && this.leftCalendar.querySelector(".e-content").classList.contains("e-decade") && this.rightCalendar.querySelector(".e-content").classList.contains("e-decade") || this.isMobile) {
        this.bindCalendarCellEvents();
      }
      this.removeFocusedDate();
      this.updateRange([calendar]);
    };
    DateRangePicker2.prototype.navNextMonth = function(event2) {
      event2.preventDefault();
      var ele = closest(event2.target, "." + LEFTCALENDER);
      ele = isNullOrUndefined(ele) ? closest(event2.target, "." + RIGHTCALENDER) : ele;
      this.updateCalendarElement(ele);
      this.navigateNext(event2);
      if (!isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue)) {
        this.updateMinMaxDays(ele);
      }
      this.updateControl(ele);
    };
    DateRangePicker2.prototype.isPopupOpen = function() {
      if (!isNullOrUndefined(this.popupObj) && this.popupObj.element.classList.contains(POPUP3)) {
        return true;
      }
      return false;
    };
    DateRangePicker2.prototype.createRangeHeader = function() {
      var labelContainer = this.createElement("div", {
        className: STARTENDCONTAINER
      });
      if (!this.isMobile) {
        var startLabel = this.createElement("a", {
          className: STARTLABEL
        });
        var endLabel = this.createElement("a", {
          className: ENDLABEL
        });
        var changeIcon = this.createElement("span", {
          className: CHANGEICON
        });
        attributes(startLabel, {
          "aria-atomic": "true",
          "aria-live": "assertive",
          "aria-label": "Start Date",
          "role": "button"
        });
        attributes(endLabel, {
          "aria-atomic": "true",
          "aria-live": "assertive",
          "aria-label": "End Date",
          "role": "button"
        });
        labelContainer.appendChild(startLabel);
        labelContainer.appendChild(changeIcon);
        labelContainer.appendChild(endLabel);
        startLabel.textContent = this.l10n.getConstant("startLabel");
        endLabel.textContent = this.l10n.getConstant("endLabel");
      } else {
        var endBtn = this.createElement("button", {
          className: ENDBUTTON
        });
        var startBtn = this.createElement("button", {
          className: STARTBUTTON
        });
        this.startButton = new Button({
          content: this.l10n.getConstant("startLabel")
        }, startBtn);
        this.endButton = new Button({
          content: this.l10n.getConstant("endLabel")
        }, endBtn);
        labelContainer.appendChild(startBtn);
        labelContainer.appendChild(endBtn);
      }
      return labelContainer;
    };
    DateRangePicker2.prototype.disableInput = function() {
      if (this.strictMode) {
        if (!isNullOrUndefined(this.previousStartValue) && !isNullOrUndefined(this.previousEndValue)) {
          this.startValue = this.previousStartValue;
          this.endValue = this.previousEndValue;
          this.setValue();
          this.updateInput();
        }
      } else {
        this.updateInput();
        this.clearRange();
        this.setProperties({
          startDate: null
        }, true);
        this.setProperties({
          endDate: null
        }, true);
        this.startValue = null;
        this.endValue = null;
        this.setValue();
        this.errorClass();
      }
      this.setProperties({
        enabled: false
      }, true);
      Input.setEnabled(this.enabled, this.inputElement);
      this.bindEvents();
    };
    DateRangePicker2.prototype.validateMinMax = function() {
      this.min = isNullOrUndefined(this.min) || !+this.min ? this.min = new Date(1900, 0, 1) : this.min;
      this.max = isNullOrUndefined(this.max) || !+this.max ? this.max = new Date(2099, 11, 31) : this.max;
      if (!(this.min <= this.max)) {
        this.disableInput();
        return;
      }
      if (!isNullOrUndefined(this.minDays) && !isNullOrUndefined(this.maxDays)) {
        if (this.maxDays > 0 && this.minDays > 0 && this.minDays > this.maxDays) {
          this.maxDays = null;
        }
      }
      if (!isNullOrUndefined(this.minDays) && this.minDays < 0) {
        this.minDays = null;
      }
      if (!isNullOrUndefined(this.maxDays) && this.maxDays < 0) {
        this.maxDays = null;
      }
    };
    DateRangePicker2.prototype.validateRangeStrict = function() {
      if (!isNullOrUndefined(this.startValue)) {
        if (+this.startValue <= +this.min) {
          this.startValue = this.min;
          this.setValue();
        } else if (+this.startValue >= +this.min && +this.startValue >= +this.max) {
          this.startValue = this.max;
        }
      }
      if (!isNullOrUndefined(this.endValue)) {
        if (+this.endValue > +this.max) {
          this.endValue = this.max;
          this.setValue();
        } else if (+this.endValue < +this.min) {
          this.endValue = this.min;
          this.setValue();
        }
      }
      this.validateMinMaxDays();
    };
    DateRangePicker2.prototype.validateRange = function() {
      this.validateMinMaxDays();
    };
    DateRangePicker2.prototype.validateMinMaxDays = function() {
      if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue)) {
        var range = Math.round(Math.abs((this.removeTimeValueFromDate(this.startValue).getTime() - this.removeTimeValueFromDate(this.endValue).getTime()) / (1e3 * 60 * 60 * 24))) + 1;
        if (!isNullOrUndefined(this.minDays) && this.minDays > 0 && !(range >= this.minDays)) {
          if (this.strictMode) {
            var date = /* @__PURE__ */ new Date(+this.startValue);
            date.setDate(date.getDate() + (this.minDays - 1));
            if (+date > +this.max) {
              this.endValue = this.max;
              this.setValue();
            } else {
              this.endValue = date;
              this.setValue();
            }
          } else {
            this.startValue = null;
            this.endValue = null;
            this.setValue();
          }
        }
        if (!isNullOrUndefined(this.maxDays) && this.maxDays > 0 && !(range <= this.maxDays)) {
          if (this.strictMode) {
            this.endValue = /* @__PURE__ */ new Date(+this.startValue);
            this.endValue.setDate(this.endValue.getDate() + (this.maxDays - 1));
            this.setValue();
          } else {
            this.startValue = null;
            this.endValue = null;
            this.setValue();
          }
        }
      }
    };
    DateRangePicker2.prototype.renderCalendar = function() {
      this.calendarElement = this.createElement("div");
      this.calendarElement.classList.add(CALENDAR);
      if (this.enableRtl) {
        this.calendarElement.classList.add(RTL16);
      }
      attributes(this.calendarElement, {
        "data-role": "calendar"
      });
      _super.prototype.createHeader.call(this);
      _super.prototype.createContent.call(this);
    };
    DateRangePicker2.prototype.isSameMonth = function(start, end) {
      if (start.getMonth() === end.getMonth() && start.getFullYear() === end.getFullYear()) {
        return true;
      }
      return false;
    };
    DateRangePicker2.prototype.isSameYear = function(start, end) {
      if (start.getFullYear() === end.getFullYear()) {
        return true;
      }
      return false;
    };
    DateRangePicker2.prototype.isSameDecade = function(start, end) {
      var startYear = start.getFullYear();
      var endYear = end.getFullYear();
      if (startYear - startYear % 10 === endYear - endYear % 10) {
        return true;
      }
      return false;
    };
    DateRangePicker2.prototype.startMonthCurrentDate = function() {
      if (this.isSameMonth(this.min, this.max) || +this.currentDate > +this.max || this.isSameMonth(this.currentDate, this.max)) {
        this.currentDate = /* @__PURE__ */ new Date(+this.max);
        this.currentDate.setDate(1);
        this.currentDate.setMonth(this.currentDate.getMonth() - 1);
      } else if (this.currentDate < this.min) {
        this.currentDate = new Date(this.checkValue(this.min));
      }
    };
    DateRangePicker2.prototype.selectNextMonth = function() {
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue) && !this.isSameMonth(this.endValue, this.currentDate) && !this.isDateDisabled(this.endValue) && !this.isDateDisabled(this.startValue)) {
        this.currentDate = /* @__PURE__ */ new Date(+this.endValue);
      } else {
        this.currentDate.setDate(1);
        this.currentDate.setMonth(this.currentDate.getMonth() + 1);
        return;
      }
      if (!isNullOrUndefined(this.startValue) && +this.startValue < +this.min || !isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue) {
        this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
        this.currentDate.setDate(1);
        var month = this.currentDate.getMonth() + 1;
        this.currentDate.setMonth(month);
      }
    };
    DateRangePicker2.prototype.selectNextYear = function() {
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue) && !this.isSameYear(this.endValue, this.currentDate) && !this.isDateDisabled(this.endValue) && !this.isDateDisabled(this.startValue)) {
        this.currentDate = /* @__PURE__ */ new Date(+this.endValue);
      } else {
        this.currentDate.setMonth(0);
        var yr = this.currentDate.getFullYear() + 1;
        this.currentDate.setFullYear(yr);
        return;
      }
      if (!isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue || !isNullOrUndefined(this.startValue) && +this.startValue < +this.min) {
        this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
        this.currentDate.setMonth(0);
        this.currentDate.setFullYear(this.currentDate.getFullYear() + 1);
      }
    };
    DateRangePicker2.prototype.selectNextDecade = function() {
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue) && !this.isSameDecade(this.endValue, this.currentDate) && !this.isDateDisabled(this.endValue) && !this.isDateDisabled(this.startValue)) {
        this.currentDate = /* @__PURE__ */ new Date(+this.endValue);
      } else {
        var decyr = this.currentDate.getFullYear() + 10;
        this.currentDate.setFullYear(decyr);
        return;
      }
      if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue || !isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && +this.startValue < +this.min) {
        this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
        this.currentDate.setFullYear(this.currentDate.getFullYear() + 10);
      }
    };
    DateRangePicker2.prototype.selectStartMonth = function() {
      if (!isNullOrUndefined(this.startValue)) {
        if (!isNullOrUndefined(this.max) && this.isSameMonth(this.startValue, this.max)) {
          this.currentDate = /* @__PURE__ */ new Date(+this.max);
          this.currentDate.setDate(1);
          this.currentDate.setMonth(this.currentDate.getMonth() - 1);
        } else if (!(this.startValue >= this.min && this.startValue <= this.max) || this.isDateDisabled(this.startValue)) {
          this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
        } else {
          this.currentDate = /* @__PURE__ */ new Date(+this.startValue);
        }
      } else {
        this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
        this.startMonthCurrentDate();
      }
      if (!isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && +this.startValue < +this.min || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue) {
        this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
      }
      this.startMonthCurrentDate();
    };
    DateRangePicker2.prototype.createCalendar = function() {
      var calendarContainer = this.createElement("div", {
        className: CALENDARCONTAINER
      });
      if (!this.isMobile) {
        this.selectStartMonth();
        this.renderCalendar();
        this.leftCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
        this.calendarElement.classList.add(LEFTCALENDER);
        this.leftCalPrevIcon = this.calendarElement.querySelector("." + LEFTCALENDER + " ." + PREVICON2);
        this.leftCalNextIcon = this.calendarElement.querySelector("." + LEFTCALENDER + " ." + NEXTICON2);
        this.leftTitle = this.calendarElement.querySelector("." + LEFTCALENDER + " ." + TITLE2);
        remove(this.calendarElement.querySelector("." + LEFTCALENDER + " ." + ICONCONTAINER2));
        this.calendarElement.querySelector("." + LEFTCALENDER + " ." + HEADER3).appendChild(this.leftCalNextIcon);
        this.calendarElement.querySelector("." + LEFTCALENDER + " ." + HEADER3).appendChild(this.leftCalPrevIcon);
        prepend([this.leftCalPrevIcon], this.calendarElement.querySelector("." + LEFTCALENDER + " ." + HEADER3));
        this.leftCalendar = this.calendarElement;
        var leftContainer = this.createElement("div", {
          className: LEFTCONTAINER
        });
        var rightContainer = this.createElement("div", {
          className: RIGHTCONTAINER
        });
        leftContainer.appendChild(this.leftCalendar);
        calendarContainer.appendChild(leftContainer);
        if (!this.isMobile) {
          EventHandler.add(this.leftTitle, "click", this.leftNavTitle, this);
        }
        if (this.start === "Month") {
          this.selectNextMonth();
        }
        if (this.start === "Year") {
          this.selectNextYear();
        }
        if (this.start === "Decade") {
          this.selectNextDecade();
        }
        this.renderCalendar();
        this.rightCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
        addClass([this.calendarElement], RIGHTCALENDER);
        this.rightCalendar = this.calendarElement;
        removeClass([this.leftCalendar && this.leftCalendar.querySelector(".e-content tbody")], "e-zoomin");
        removeClass([this.rightCalendar && this.rightCalendar.querySelector(".e-content tbody")], "e-zoomin");
        this.rightCalPrevIcon = this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + PREVICON2);
        this.rightCalNextIcon = this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + NEXTICON2);
        this.rightTitle = this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + TITLE2);
        remove(this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + ICONCONTAINER2));
        this.calendarElement.querySelector("table").setAttribute("tabindex", "0");
        this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + HEADER3).appendChild(this.rightCalNextIcon);
        this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + HEADER3).appendChild(this.rightCalPrevIcon);
        prepend([this.rightCalPrevIcon], this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + HEADER3));
        rightContainer.appendChild(this.rightCalendar);
        calendarContainer.appendChild(rightContainer);
        if (!this.isMobile) {
          EventHandler.add(this.rightTitle, "click", this.rightNavTitle, this);
        }
      } else {
        if (!isNullOrUndefined(this.startValue)) {
          this.currentDate = /* @__PURE__ */ new Date(+this.startValue);
        }
        _super.prototype.validateDate.call(this);
        _super.prototype.minMaxUpdate.call(this);
        _super.prototype.render.call(this);
        var prevIcon = this.calendarElement.querySelector("." + CALENDAR + " ." + PREVICON2);
        var nextIcon = this.calendarElement.querySelector("." + CALENDAR + " ." + NEXTICON2);
        remove(this.calendarElement.querySelector("." + CALENDAR + " ." + ICONCONTAINER2));
        this.calendarElement.querySelector("." + CALENDAR + " ." + HEADER3).appendChild(nextIcon);
        this.calendarElement.querySelector("." + CALENDAR + " ." + HEADER3).appendChild(prevIcon);
        prepend([prevIcon], this.calendarElement.querySelector("." + CALENDAR + " ." + HEADER3));
        this.deviceCalendar = this.calendarElement;
        calendarContainer.appendChild(this.calendarElement);
        this.headerTitleElement = this.calendarElement.querySelector("." + CALENDAR + " ." + HEADER3 + " ." + TITLE2);
      }
      return calendarContainer;
    };
    DateRangePicker2.prototype.leftNavTitle = function(e) {
      if (this.isPopupOpen()) {
        this.calendarElement = this.leftCalendar;
        this.calendarNavigation(e, this.calendarElement);
      }
    };
    DateRangePicker2.prototype.calendarNavigation = function(e, element2) {
      this.table = element2.querySelector("table");
      this.headerTitleElement = element2.querySelector(".e-title");
      this.tableBodyElement = element2.querySelector("tbody");
      this.tableHeadElement = element2.querySelector("thead");
      this.contentElement = element2.querySelector(".e-content");
      this.updateCalendarElement(element2);
      _super.prototype.navigateTitle.call(this, e);
      this.updateNavIcons();
    };
    DateRangePicker2.prototype.rightNavTitle = function(e) {
      if (this.isPopupOpen()) {
        this.calendarElement = this.rightCalendar;
        this.calendarNavigation(e, this.calendarElement);
      }
    };
    DateRangePicker2.prototype.clickEventEmitter = function(e) {
      if (!this.isMobile) {
        if (closest(e.target, ".e-calendar.e-left-calendar")) {
          this.calendarElement = this.leftCalendar;
          this.updateCalendarElement(this.leftCalendar);
        } else {
          this.calendarElement = this.rightCalendar;
          this.updateCalendarElement(this.rightCalendar);
        }
      }
    };
    DateRangePicker2.prototype.currentView = function() {
      return _super.prototype.currentView.call(this);
    };
    DateRangePicker2.prototype.getCalendarView = function(view) {
      if (view === "Year") {
        return "Year";
      } else if (view === "Decade") {
        return "Decade";
      } else {
        return "Month";
      }
    };
    DateRangePicker2.prototype.navigatedEvent = function(e) {
      this.trigger("navigated", this.navigatedArgs);
      if (!isNullOrUndefined(this.popupObj)) {
        var element2 = void 0;
        var view = this.getCalendarView(this.currentView());
        if (this.isMobile) {
          if (view === this.depth) {
            this.bindCalendarCellEvents();
            this.deviceNavigation();
            this.removeFocusedDate();
            this.checkMinMaxDays();
          } else {
            this.selectableDates();
          }
        } else {
          if (!this.isMobile && view === this.depth) {
            element2 = this.calendarElement.classList.contains("e-left-calendar") ? this.leftCalendar : this.rightCalendar;
            if (element2 === this.leftCalendar && (e && !e.currentTarget.children[0].classList.contains("e-icons") || !isNullOrUndefined(this.controlDown))) {
              this.leftCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
              this.effect = "";
              this.currentDate = this.leftCalCurrentDate;
              this.updateCalendarElement(this.leftCalendar);
              this.updateControl(this.leftCalendar);
              this.updateCalendarElement(this.rightCalendar);
              _super.prototype.navigateTo.call(this, view, this.rightCalCurrentDate);
              var customDate = this.rightCalCurrentDate ? this.rightCalCurrentDate : this.currentDate;
              this.updateControl(this.rightCalendar, customDate);
              this.updateNavIcons();
              this.calendarIconEvent();
              this.calendarIconRipple();
              this.controlDown = null;
            } else if (e && !e.currentTarget.children[0].classList.contains("e-icons") || !isNullOrUndefined(this.controlDown)) {
              this.rightCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
              this.effect = "";
              this.currentDate = this.rightCalCurrentDate;
              this.updateCalendarElement(this.rightCalendar);
              this.updateControl(this.rightCalendar);
              this.updateCalendarElement(this.leftCalendar);
              if (this.startValue && isNullOrUndefined(this.endValue)) {
                if (view === "Month" && this.startValue.getMonth() < this.rightCalCurrentDate.getMonth() && this.startValue.getFullYear() <= this.rightCalCurrentDate.getFullYear()) {
                  _super.prototype.navigateTo.call(this, view, /* @__PURE__ */ new Date(+this.startValue));
                } else if (view === "Year" && this.startValue.getFullYear() < this.rightCalCurrentDate.getFullYear()) {
                  _super.prototype.navigateTo.call(this, view, /* @__PURE__ */ new Date(+this.startValue));
                } else {
                  _super.prototype.navigateTo.call(this, view, this.leftCalCurrentDate);
                }
              } else {
                _super.prototype.navigateTo.call(this, view, this.leftCalCurrentDate);
              }
              this.updateControl(this.leftCalendar);
              this.updateNavIcons();
              this.calendarIconEvent();
              this.calendarIconRipple();
              this.controlDown = null;
            }
            this.checkMinMaxDays();
          } else {
            this.updateNavIcons();
            this.calendarIconEvent();
          }
        }
      }
    };
    DateRangePicker2.prototype.createControl = function() {
      var controlContainer = this.createElement("div", {
        className: RANGECONTAINER
      });
      var headerContainer = this.createElement("div", {
        className: RANGEHEADER
      });
      if (this.isMobile && this.fullScreenMode) {
        var modelHeaderIconWrapper = this.createElement("div", {
          className: "e-model-header-wrapper"
        });
        var modelCloseIcon = this.createElement("span", {
          className: "e-popup-close"
        });
        EventHandler.add(modelCloseIcon, "mousedown touchstart", this.modelRangeCloseHandler, this);
        var modelApplyButton = this.createElement("span", {
          className: "e-apply"
        });
        EventHandler.add(modelApplyButton, "mousedown touchstart", this.applyFunction, this);
        modelHeaderIconWrapper.appendChild(modelCloseIcon);
        modelHeaderIconWrapper.appendChild(modelApplyButton);
        headerContainer.appendChild(modelHeaderIconWrapper);
      }
      var labelContainer = this.createRangeHeader();
      headerContainer.appendChild(labelContainer);
      var daySpan = this.createElement("div", {
        className: DAYSPAN
      });
      daySpan.textContent = this.l10n.getConstant("selectedDays");
      headerContainer.appendChild(daySpan);
      var separator = this.createElement("div", {
        className: SEPARATOR2
      });
      var calendarContainer = this.createCalendar();
      controlContainer.appendChild(headerContainer);
      controlContainer.appendChild(separator);
      controlContainer.appendChild(calendarContainer);
      var footerSection = this.createElement("div", {
        className: FOOTER2
      });
      var cancelBtn = this.createElement("button", {
        className: CANCEL2 + " " + FLAT2 + " " + CSS2
      });
      var applyBtn = this.createElement("button");
      addClass([applyBtn], [APPLY2, FLAT2, PRIMARY2, CSS2]);
      footerSection.appendChild(applyBtn);
      footerSection.appendChild(cancelBtn);
      var enable = !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue);
      this.cancelButton = new Button({
        content: this.l10n.getConstant("cancelText")
      }, cancelBtn);
      this.applyButton = new Button({
        content: this.l10n.getConstant("applyText"),
        disabled: !enable
      }, applyBtn);
      EventHandler.add(applyBtn, "click", this.applyFunction, this);
      EventHandler.add(cancelBtn, "click", this.cancelFunction, this);
      this.popupWrapper.appendChild(controlContainer);
      if (!this.isMobile) {
        if (!isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label)) {
          this.createPresets();
          this.listRippleEffect();
          addClass([controlContainer], RANGEBORDER);
          addClass([this.popupWrapper], "e-preset-wrapper");
          var presets2 = this.popupWrapper.querySelector("." + PRESETS);
          presets2.style.height = this.popupWrapper.querySelector("." + RANGECONTAINER).getBoundingClientRect().height + "px";
        }
      }
      this.popupWrapper.appendChild(footerSection);
      if (this.isMobile) {
        this.deviceHeaderUpdate();
      }
      this.renderPopup();
    };
    DateRangePicker2.prototype.modelRangeCloseHandler = function(e) {
      this.hide();
    };
    DateRangePicker2.prototype.cancelFunction = function(eve) {
      if (document.activeElement !== this.inputElement) {
        this.preventFocus = true;
        this.inputElement.focus();
        addClass([this.inputWrapper.container], [INPUTFOCUS2]);
      }
      eve.preventDefault();
      if (this.isKeyPopup) {
        this.inputElement.focus();
        this.isKeyPopup = false;
      }
      this.startValue = null;
      this.endValue = null;
      this.removeSelection();
      this.hide(eve);
    };
    DateRangePicker2.prototype.deviceHeaderUpdate = function() {
      if (isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue)) {
        this.endButton.element.setAttribute("disabled", "");
        this.startButton.element.classList.add(ACTIVE4);
      } else if (!isNullOrUndefined(this.startValue)) {
        this.startButton.element.classList.add(ACTIVE4);
      }
    };
    DateRangePicker2.prototype.applyFunction = function(eve) {
      var isValueChanged = false;
      if (eve.type !== "touchstart") {
        eve.preventDefault();
      }
      if (this.closeEventArgs && this.closeEventArgs.cancel) {
        this.startValue = this.popupWrapper.querySelector(".e-start-date") && this.getIdValue(null, this.popupWrapper.querySelector(".e-start-date"));
        this.endValue = this.popupWrapper.querySelector(".e-end-date") && this.getIdValue(null, this.popupWrapper.querySelector(".e-end-date"));
        this.setValue();
      }
      if (document.activeElement !== this.inputElement) {
        this.preventFocus = true;
        this.inputElement.focus();
        addClass([this.inputWrapper.container], [INPUTFOCUS2]);
      }
      if (eve.type !== "touchstart" && this.closeEventArgs && !this.closeEventArgs.cancel) {
        eve.preventDefault();
      }
      if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue)) {
        if (!(this.previousStartValue && this.previousEndValue && this.startValue.getDate() === this.previousStartValue.getDate() && this.startValue.getMonth() === this.previousStartValue.getMonth() && this.startValue.getFullYear() === this.previousStartValue.getFullYear() && this.endValue.getDate() === this.previousEndValue.getDate() && this.endValue.getMonth() === this.previousEndValue.getMonth() && this.endValue.getFullYear() === this.previousEndValue.getFullYear())) {
          Input.setValue(this.rangeArgs(eve).text, this.inputElement, this.floatLabelType, this.showClearButton);
        }
        this.previousStartValue = /* @__PURE__ */ new Date(+this.startValue);
        this.previousEndValue = /* @__PURE__ */ new Date(+this.endValue);
        this.previousEleValue = this.inputElement.value;
        if (+this.initStartDate !== +this.startValue || +this.initEndDate !== +this.endValue) {
          isValueChanged = true;
        }
        this.changeTrigger(eve);
        this.hide(eve ? eve : null);
        this.errorClass();
        isValueChanged = true;
      } else {
        this.hide(eve ? eve : null);
      }
      if (!closest(eve.target, "." + INPUTCONTAINER2) && !isValueChanged) {
        this.focusOut();
      }
      if (!this.isMobile) {
        this.isKeyPopup = false;
        if (this.isRangeIconClicked) {
          this.inputWrapper.container.children[1].focus();
          this.keyInputConfigs = extend(this.keyInputConfigs, this.keyConfigs);
          this.popupKeyboardModule = new KeyboardEvents(this.inputWrapper.container.children[1], {
            eventName: "keydown",
            keyConfigs: this.keyInputConfigs,
            keyAction: this.popupKeyActionHandle.bind(this)
          });
        }
      }
    };
    DateRangePicker2.prototype.onMouseClick = function(event2, item) {
      if (event2.type === "touchstart") {
        return;
      }
      var target = item || event2.target;
      var li = closest(target, "." + LISTCLASS);
      var isClick = li && li.classList.contains(ACTIVE4);
      if (li && li.classList.contains(LISTCLASS)) {
        this.setListSelection(li, event2);
      }
      this.preventFocus = true;
      this.inputElement.focus();
      if (!this.isMobile) {
        this.preventFocus = true;
        if (li && li.classList.contains(LISTCLASS) && li.getAttribute("id") === "custom_range") {
          this.leftCalendar.children[1].firstElementChild.focus();
        } else {
          if (!isClick && event2.type === "keydown") {
            this.inputElement.focus();
          }
        }
      }
    };
    DateRangePicker2.prototype.onMouseOver = function(event2) {
      var li = closest(event2.target, "." + LISTCLASS);
      if (li && li.classList.contains(LISTCLASS) && !li.classList.contains(HOVER2)) {
        addClass([li], HOVER2);
      }
    };
    DateRangePicker2.prototype.onMouseLeave = function(event2) {
      var item = closest(event2.target, "." + HOVER2);
      if (!isNullOrUndefined(item)) {
        removeClass([item], HOVER2);
      }
    };
    DateRangePicker2.prototype.setListSelection = function(li, event2) {
      if (li && (!li.classList.contains(ACTIVE4) || this.isMobile && li.classList.contains(ACTIVE4))) {
        if (this.isMobile && li.classList.contains(ACTIVE4)) {
          this.activeIndex = Array.prototype.slice.call(this.liCollections).indexOf(li);
          var values_1 = this.presetsItem[this.activeIndex];
          if (values_1.id === "custom_range") {
            this.renderCustomPopup();
            return;
          }
          return;
        }
        this.removeListSelection();
        this.activeIndex = Array.prototype.slice.call(this.liCollections).indexOf(li);
        addClass([li], ACTIVE4);
        li.setAttribute("aria-selected", "true");
        var values = this.presetsItem[this.activeIndex];
        if (values.id === "custom_range") {
          this.renderCustomPopup();
        } else {
          this.applyPresetRange(values, event2);
        }
      }
    };
    DateRangePicker2.prototype.removeListSelection = function() {
      var item = this.presetElement.querySelector("." + ACTIVE4);
      if (!isNullOrUndefined(item)) {
        removeClass([item], ACTIVE4);
        item.removeAttribute("aria-selected");
      }
    };
    DateRangePicker2.prototype.setValue = function() {
      this.modelValue = [this.startValue, this.endValue];
    };
    DateRangePicker2.prototype.applyPresetRange = function(values, e) {
      this.hide(null);
      this.presetsItem[this.presetsItem.length - 1].start = null;
      this.presetsItem[this.presetsItem.length - 1].end = null;
      this.startValue = values.start;
      this.endValue = values.end;
      this.setValue();
      this.refreshControl();
      this.trigger("select", this.rangeArgs(e));
      this.changeTrigger(e);
      this.previousEleValue = this.inputElement.value;
      this.isCustomRange = false;
      this.leftCalendar = this.rightCalendar = null;
      if (this.isKeyPopup) {
        this.isRangeIconClicked = false;
        this.inputElement.focus();
      }
    };
    DateRangePicker2.prototype.showPopup = function(element2, event2) {
      this.presetHeight();
      if (this.zIndex === 1e3) {
        this.popupObj.show(null, this.element);
      } else {
        this.popupObj.show(null, null);
      }
      if (this.isMobile) {
        this.popupObj.refreshPosition();
      }
    };
    DateRangePicker2.prototype.renderCustomPopup = function() {
      var _this = this;
      this.isCustomWindow = true;
      this.popupObj.hide();
      this.popupWrapper = this.createElement("div", {
        id: this.element.id + "_popup",
        className: ROOT9 + " " + POPUP3
      });
      this.renderControl();
      this.openEventArgs = {
        popup: this.popupObj || null,
        cancel: false,
        date: this.inputElement.value,
        model: this,
        event: event ? event : null,
        appendTo: this.isMobile || Browser.isDevice ? this.mobileRangePopupWrap : document.body
      };
      var eventArgs = this.openEventArgs;
      this.trigger("open", eventArgs, function(eventArgs2) {
        _this.openEventArgs = eventArgs2;
        if (_this.openEventArgs.cancel) {
          return;
        }
      });
      this.openEventArgs.appendTo.appendChild(this.popupWrapper);
      this.showPopup();
      this.isCustomRange = true;
      if (!this.isMobile) {
        this.calendarFocus();
      }
    };
    DateRangePicker2.prototype.listRippleEffect = function() {
      for (var _i = 0, _a = this.liCollections; _i < _a.length; _i++) {
        var li = _a[_i];
        rippleEffect(li);
      }
    };
    DateRangePicker2.prototype.createPresets = function() {
      if (!isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label)) {
        this.presetElement = this.createElement("div", {
          className: PRESETS,
          attrs: {
            "tabindex": "0"
          }
        });
        var listTag = ListBase.createList(this.createElement, this.presetsItem, null, true);
        attributes(listTag, {
          "role": "listbox",
          "aria-hidden": "false",
          "id": this.element.id + "_options",
          "tabindex": "0",
          "aria-label": "daterangepicker-preset"
        });
        this.presetElement.appendChild(listTag);
        this.popupWrapper.appendChild(this.presetElement);
        var customElement = this.presetElement.querySelector("#custom_range");
        if (!isNullOrUndefined(customElement)) {
          customElement.textContent = this.l10n.getConstant("customRange") !== "" ? this.l10n.getConstant("customRange") : "Custom Range";
        }
        this.liCollections = this.presetElement.querySelectorAll("." + LISTCLASS);
        this.wireListEvents();
        if (this.isMobile) {
          if (this.fullScreenMode) {
            var modelWrapper = createElement("div", {
              className: "e-range-mob-popup-wrap"
            });
            var modelHeader = this.createElement("div", {
              className: "e-model-header"
            });
            var modelTitleSpan = this.createElement("span", {
              className: "e-model-title"
            });
            modelTitleSpan.textContent = "Select Preset";
            var modelCloseIcon = this.createElement("span", {
              className: "e-popup-close"
            });
            EventHandler.add(modelCloseIcon, "mousedown touchstart", this.modelRangeCloseHandler, this);
            var presetContent = this.presetElement;
            modelHeader.appendChild(modelCloseIcon);
            modelHeader.appendChild(modelTitleSpan);
            modelWrapper.appendChild(modelHeader);
            modelWrapper.appendChild(presetContent);
            this.popupWrapper.insertBefore(modelWrapper, this.popupWrapper.firstElementChild);
            this.presetElement.style.width = "100%";
          } else {
            this.presetElement.style.width = this.inputWrapper.container.getBoundingClientRect().width + "px";
          }
        }
        if (!isNullOrUndefined(this.activeIndex) && this.activeIndex > -1) {
          addClass([this.liCollections[this.activeIndex]], ACTIVE4);
        }
      }
    };
    DateRangePicker2.prototype.wireListEvents = function() {
      EventHandler.add(this.presetElement, "click", this.onMouseClick, this);
      if (!this.isMobile) {
        EventHandler.add(this.presetElement, "mouseover", this.onMouseOver, this);
        EventHandler.add(this.presetElement, "mouseout", this.onMouseLeave, this);
      }
    };
    DateRangePicker2.prototype.unWireListEvents = function() {
      if (!isNullOrUndefined(this.presetElement)) {
        EventHandler.remove(this.presetElement, "click touchstart", this.onMouseClick);
        if (!this.isMobile) {
          EventHandler.remove(this.presetElement, "mouseover", this.onMouseOver);
          EventHandler.remove(this.presetElement, "mouseout", this.onMouseLeave);
        }
      }
    };
    DateRangePicker2.prototype.renderPopup = function() {
      var _this = this;
      this.popupWrapper.classList.add("e-control");
      var popupWidth = this.popupWrapper.getBoundingClientRect().width;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass.trim() !== "") {
        this.popupWrapper.className += " " + this.cssClass;
      }
      if (this.isMobile && this.isCustomWindow) {
        this.modal = this.createElement("div");
        document.body.appendChild(this.modal);
      }
      this.popupObj = new Popup(this.popupWrapper, {
        relateTo: this.isMobile && this.isCustomWindow ? document.body : !isNullOrUndefined(this.targetElement) ? this.targetElement : this.inputWrapper.container,
        position: this.isMobile ? !isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label) && !this.isCustomWindow ? {
          X: "left",
          Y: "bottom"
        } : {
          X: "center",
          Y: "center"
        } : this.enableRtl ? {
          X: "left",
          Y: "bottom"
        } : {
          X: "right",
          Y: "bottom"
        },
        offsetX: this.isMobile || this.enableRtl ? 0 : -popupWidth,
        offsetY: OFFSETVALUE2,
        collision: this.isMobile ? !isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label) && !this.isCustomWindow ? {
          X: "fit"
        } : {
          X: "fit",
          Y: "fit"
        } : {
          X: "fit",
          Y: "flip"
        },
        targetType: this.isMobile && this.isCustomWindow ? "container" : "relative",
        enableRtl: this.enableRtl,
        zIndex: this.zIndex,
        open: function() {
          if (_this.isMobile && _this.fullScreenMode) {
            _this.iconRangeRight = _this.calendarElement && window.getComputedStyle(_this.calendarElement.querySelector(".e-header.e-month .e-prev")).cssFloat;
            if (_this.iconRangeRight) {
              _this.touchRangeModule = new Touch(_this.calendarElement.querySelector(".e-content.e-month"), {
                swipe: _this.dateRangeSwipeHandler.bind(_this)
              });
              EventHandler.add(_this.calendarElement.querySelector(".e-content.e-month"), "touchstart", _this.touchStartRangeHandler, _this);
            }
          }
          attributes(_this.inputElement, {
            "aria-expanded": "true",
            "aria-owns": _this.element.id,
            "aria-controls": _this.inputElement.id
          });
          if (_this.value) {
            attributes(_this.inputElement, {
              "aria-activedescendant": _this.inputElement.id
            });
          } else {
            _this.inputElement.removeAttribute("aria-activedescendant");
          }
          addClass([_this.inputWrapper.buttons[0]], ACTIVE4);
          if (!_this.isMobile) {
            if (_this.cancelButton) {
              _this.btnKeyboardModule = new KeyboardEvents(_this.cancelButton.element, {
                eventName: "keydown",
                keyAction: _this.popupKeyActionHandle.bind(_this),
                keyConfigs: {
                  tab: "tab",
                  altRightArrow: "alt+rightarrow",
                  altLeftArrow: "alt+leftarrow"
                }
              });
              _this.btnKeyboardModule = new KeyboardEvents(_this.applyButton.element, {
                eventName: "keydown",
                keyAction: _this.popupKeyActionHandle.bind(_this),
                keyConfigs: {
                  altRightArrow: "alt+rightarrow",
                  altLeftArrow: "alt+leftarrow"
                }
              });
            }
            if (!isNullOrUndefined(_this.leftCalendar)) {
              if (!_this.isRangeIconClicked) {
                _this.calendarFocus();
              }
            }
            if (!isNullOrUndefined(_this.presetElement)) {
              _this.keyInputConfigs = extend(_this.keyInputConfigs, _this.keyConfigs);
              _this.presetKeyboardModule = new KeyboardEvents(_this.presetElement, {
                eventName: "keydown",
                keyAction: _this.presetKeyActionHandler.bind(_this),
                keyConfigs: _this.keyInputConfigs
              });
              _this.presetKeyboardModule = new KeyboardEvents(_this.presetElement, {
                eventName: "keydown",
                keyAction: _this.popupKeyActionHandle.bind(_this),
                keyConfigs: {
                  altRightArrow: "alt+rightarrow",
                  altLeftArrow: "alt+leftarrow"
                }
              });
              if (isNullOrUndefined(_this.leftCalendar)) {
                _this.preventBlur = true;
                _this.presetElement.focus();
              } else {
                _this.presetElement.setAttribute("tabindex", "-1");
              }
            }
            _this.popupKeyBoardHandler();
          }
          if (_this.isMobile && !Browser.isDevice) {
            EventHandler.add(document, "keydown", _this.popupCloseHandler, _this);
          }
        },
        close: function() {
          attributes(_this.inputElement, {
            "aria-expanded": "false"
          });
          _this.inputElement.removeAttribute("aria-owns");
          _this.inputElement.removeAttribute("aria-controls");
          _this.inputElement.removeAttribute("aria-activedescendant");
          removeClass([_this.inputWrapper.buttons[0]], ACTIVE4);
          if (_this.isRangeIconClicked) {
            _this.inputWrapper.container.children[1].focus();
          }
          if (!isUndefined(_this.presets[0].start && _this.presets[0].end && _this.presets[0].label)) {
            _this.unWireListEvents();
          }
          if (_this.applyButton) {
            _this.applyButton.destroy();
          }
          if (_this.cancelButton) {
            _this.cancelButton.destroy();
          }
          if (_this.isMobile && _this.endButton) {
            _this.endButton.destroy();
          }
          if (_this.isMobile && _this.startButton) {
            _this.startButton.destroy();
          }
          if (!isNullOrUndefined(_this.popupObj)) {
            if (!isNullOrUndefined(_this.popupObj.element.parentElement)) {
              detach(_this.popupObj.element);
            }
            _this.popupObj.destroy();
            _this.popupObj = null;
          }
          if (_this.isMobile && !Browser.isDevice) {
            EventHandler.remove(document, "keydown", _this.popupCloseHandler);
          }
        },
        targetExitViewport: function() {
          var popupEle = _this.popupObj && _this.popupObj.element;
          if (!Browser.isDevice && popupEle && popupEle.getBoundingClientRect().height < window.innerHeight) {
            _this.hide();
          }
        }
      });
      if (this.isMobile) {
        this.popupObj.element.classList.add(DEVICE4);
      }
      if (this.isMobile && this.isCustomWindow) {
        addClass([this.modal], [DEVICE4, ROOT9, "e-range-modal"]);
        document.body.className += " " + OVERFLOW2;
        this.modal.style.display = "block";
      }
      EventHandler.add(document, "mousedown touchstart", this.documentHandler, this);
    };
    DateRangePicker2.prototype.dateRangeSwipeHandler = function(e) {
      var direction = 0;
      if (this.iconRangeRight === "left") {
        switch (e.swipeDirection) {
          case "Left":
            direction = 1;
            break;
          case "Right":
            direction = -1;
            break;
          default:
            break;
        }
      } else {
        switch (e.swipeDirection) {
          case "Up":
            direction = 1;
            break;
          case "Down":
            direction = -1;
            break;
          default:
            break;
        }
      }
      if (this.touchRangeStart) {
        if (direction === 1) {
          this.navigateNext(e);
        } else if (direction === -1) {
          this.navigatePrevious(e);
        }
        this.touchRangeStart = false;
      }
    };
    DateRangePicker2.prototype.touchStartRangeHandler = function(e) {
      this.touchRangeStart = true;
    };
    DateRangePicker2.prototype.popupCloseHandler = function(e) {
      switch (e.keyCode) {
        case 27:
          this.hide(e);
          break;
      }
    };
    DateRangePicker2.prototype.calendarFocus = function() {
      var startDate = this.popupObj && this.popupObj.element.querySelector("." + STARTDATE);
      if (startDate) {
        var ele = closest(startDate, "." + RIGHTCALENDER);
        ele = isNullOrUndefined(ele) ? this.leftCalendar : ele;
        if (this.isRangeIconClicked) {
          this.inputWrapper.container.focus();
        } else {
          this.preventBlur = true;
          ele.children[1].firstElementChild.focus();
        }
        addClass([startDate], FOCUSDATE);
      } else {
        if (this.isRangeIconClicked) {
          this.inputWrapper.container.focus();
        } else {
          this.preventBlur = true;
          this.leftCalendar.children[1].firstElementChild.focus();
        }
      }
    };
    DateRangePicker2.prototype.presetHeight = function() {
      var presets2 = this.popupObj && this.popupObj.element.querySelector("." + PRESETS);
      var rangeContainer = this.popupObj && this.popupObj.element.querySelector("." + RANGECONTAINER);
      if (!isNullOrUndefined(presets2) && !isNullOrUndefined(rangeContainer)) {
        presets2.style.height = rangeContainer.getBoundingClientRect().height + "px";
      }
    };
    DateRangePicker2.prototype.presetKeyActionHandler = function(e) {
      switch (e.action) {
        case "moveDown":
          this.listMoveDown(e);
          this.setScrollPosition();
          e.preventDefault();
          break;
        case "moveUp":
          this.listMoveUp(e);
          this.setScrollPosition();
          e.preventDefault();
          break;
        case "enter":
          {
            var hvrItem = this.getHoverLI();
            var actItem = this.getActiveLI();
            if (!isNullOrUndefined(this.leftCalendar) && !isNullOrUndefined(actItem)) {
              if (isNullOrUndefined(hvrItem) || !isNullOrUndefined(actItem) && actItem === hvrItem) {
                this.activeIndex = Array.prototype.slice.call(this.liCollections).indexOf(actItem);
                var values = this.presetsItem[this.activeIndex];
                if (values.id === "custom_range") {
                  this.calendarFocus();
                  actItem.classList.remove(HOVER2);
                  e.preventDefault();
                  return;
                }
              }
            }
            if (!isNullOrUndefined(hvrItem) || !isNullOrUndefined(actItem)) {
              this.onMouseClick(e, hvrItem || actItem);
            }
            e.preventDefault();
          }
          break;
        case "tab":
          if (this.leftCalendar) {
            var item = this.getHoverLI();
            if (!isNullOrUndefined(item)) {
              item.classList.remove(HOVER2);
            }
          } else {
            this.hide(e);
            e.preventDefault();
          }
          break;
      }
    };
    DateRangePicker2.prototype.listMoveDown = function(e) {
      var hvrItem = this.getHoverLI();
      var actItem = this.getActiveLI();
      if (!isNullOrUndefined(hvrItem)) {
        var li = hvrItem.nextElementSibling;
        if (!isNullOrUndefined(li) && li.classList.contains(LISTCLASS)) {
          removeClass([hvrItem], HOVER2);
          addClass([li], HOVER2);
        }
      } else if (!isNullOrUndefined(actItem)) {
        var li = actItem.nextElementSibling;
        if (!isNullOrUndefined(li) && li.classList.contains(LISTCLASS)) {
          addClass([li], HOVER2);
        }
      } else {
        addClass([this.liCollections[0]], HOVER2);
      }
    };
    DateRangePicker2.prototype.listMoveUp = function(e) {
      var hvrItem = this.getHoverLI();
      var actItem = this.getActiveLI();
      if (!isNullOrUndefined(hvrItem)) {
        var li = hvrItem.previousElementSibling;
        if (!isNullOrUndefined(li) && li.classList.contains(LISTCLASS)) {
          removeClass([hvrItem], HOVER2);
          addClass([li], HOVER2);
        }
      } else if (!isNullOrUndefined(actItem)) {
        var li = actItem.previousElementSibling;
        if (!isNullOrUndefined(li) && li.classList.contains(LISTCLASS)) {
          addClass([li], HOVER2);
        }
      }
    };
    DateRangePicker2.prototype.getHoverLI = function() {
      var item = this.presetElement.querySelector("." + HOVER2);
      return item;
    };
    DateRangePicker2.prototype.getActiveLI = function() {
      var item = this.presetElement.querySelector("." + ACTIVE4);
      return item;
    };
    DateRangePicker2.prototype.popupKeyBoardHandler = function() {
      this.popupKeyboardModule = new KeyboardEvents(this.popupWrapper, {
        eventName: "keydown",
        keyAction: this.popupKeyActionHandle.bind(this),
        keyConfigs: {
          escape: "escape"
        }
      });
      this.keyInputConfigs = extend(this.keyInputConfigs, this.keyConfigs);
      this.popupKeyboardModule = new KeyboardEvents(this.inputWrapper.container.children[1], {
        eventName: "keydown",
        keyAction: this.popupKeyActionHandle.bind(this),
        keyConfigs: this.keyInputConfigs
      });
    };
    DateRangePicker2.prototype.setScrollPosition = function() {
      var listHeight = this.presetElement.getBoundingClientRect().height;
      var hover = this.presetElement.querySelector("." + HOVER2);
      var active = this.presetElement.querySelector("." + ACTIVE4);
      var element2 = !isNullOrUndefined(hover) ? hover : active;
      if (!isNullOrUndefined(element2)) {
        var nextEle = element2.nextElementSibling;
        var height = nextEle ? nextEle.offsetTop : element2.offsetTop;
        var liHeight = element2.getBoundingClientRect().height;
        if (height + element2.offsetTop > listHeight) {
          this.presetElement.scrollTop = nextEle ? height - (listHeight / 2 + liHeight / 2) : height;
        } else {
          this.presetElement.scrollTop = 0;
        }
      }
    };
    DateRangePicker2.prototype.popupKeyActionHandle = function(e) {
      var presetElement = closest(e.target, "." + PRESETS);
      switch (e.action) {
        case "escape":
          if (this.isPopupOpen()) {
            if (this.isKeyPopup) {
              this.inputElement.focus();
              this.isKeyPopup = false;
            }
            this.hide(e);
          } else {
            this.inputWrapper.container.children[1].blur();
          }
          break;
        case "enter":
          if (!this.isPopupOpen()) {
            this.show(null, e);
          } else {
            this.inputWrapper.container.children[1].focus();
          }
          break;
        case "tab":
          this.hide(e);
          break;
        case "altRightArrow":
          if (!isNullOrUndefined(presetElement)) {
            this.cancelButton.element.focus();
          } else {
            if (document.activeElement === this.cancelButton.element && this.applyButton.element.disabled !== true) {
              this.applyButton.element.focus();
            } else {
              this.leftCalendar.children[1].firstElementChild.focus();
            }
          }
          e.preventDefault();
          break;
        case "altLeftArrow":
          if (!isNullOrUndefined(presetElement)) {
            this.rightCalendar.children[1].firstElementChild.focus();
          } else {
            if (document.activeElement === this.applyButton.element && this.applyButton.element.disabled !== true) {
              this.cancelButton.element.focus();
            } else {
              if (!isNullOrUndefined(this.presetElement) && document.activeElement === this.cancelButton.element) {
                this.presetElement.focus();
              } else {
                this.rightCalendar.children[1].firstElementChild.focus();
              }
            }
          }
          e.preventDefault();
          break;
      }
    };
    DateRangePicker2.prototype.documentHandler = function(e) {
      if (isNullOrUndefined(this.popupObj)) {
        return;
      }
      var target = e.target;
      if (!this.inputWrapper.container.contains(target) || !isNullOrUndefined(this.popupObj) && !closest(target, '[id="' + this.popupWrapper.id + '"]') && e.type !== "mousedown") {
        if (e.type !== "touchstart" && (e.type === "mousedown" || this.closeEventArgs && !this.closeEventArgs.cancel)) {
          e.preventDefault();
        }
      }
      if ((isNullOrUndefined(this.targetElement) || !isNullOrUndefined(this.targetElement) && !(target === this.targetElement)) && !closest(target, '[id="' + this.popupWrapper.id + '"]') && !(closest(target, "." + INPUTCONTAINER2) === this.inputWrapper.container) && !(closest(target, ".e-daterangepicker.e-popup") && !target.classList.contains("e-day")) && !target.classList.contains("e-dlg-overlay")) {
        this.preventBlur = false;
        if (this.isPopupOpen() && document.body.contains(this.popupObj.element)) {
          this.applyFunction(e);
          if (!this.isMobile) {
            this.isRangeIconClicked = false;
          }
        }
      }
    };
    DateRangePicker2.prototype.createInput = function() {
      if (this.fullScreenMode && this.isMobile) {
        this.cssClass += " e-popup-expand";
      }
      var updatedCssClassValue = this.cssClass;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        updatedCssClassValue = this.cssClass.replace(/\s+/g, " ").trim();
      }
      this.inputWrapper = Input.createInput({
        floatLabelType: this.floatLabelType,
        element: this.inputElement,
        properties: {
          readonly: this.readonly,
          placeholder: this.placeholder,
          cssClass: updatedCssClassValue,
          enabled: this.enabled,
          enableRtl: this.enableRtl,
          showClearButton: this.showClearButton
        },
        buttons: [DATERANGEICON]
      }, this.createElement);
      attributes(this.inputElement, {
        "tabindex": "0",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off",
        "aria-disabled": !this.enabled ? "true" : "false",
        "autocapitalize": "off",
        "spellcheck": "false"
      });
      if (Browser.isIos) {
        attributes(this.inputElement, {
          "autocorrect": "off"
        });
      }
      Input.addAttributes({
        "aria-label": "select",
        "role": "button"
      }, this.inputWrapper.buttons[0]);
      this.setEleWidth(this.width);
      addClass([this.inputWrapper.container], DATERANGEWRAPPER);
      if (isNullOrUndefined(this.inputElement.getAttribute("name"))) {
        attributes(this.inputElement, {
          "name": this.element.id
        });
      }
      if (this.inputElement.type === "hidden") {
        this.inputWrapper.container.style.display = "none";
      }
      this.refreshControl();
      this.previousEleValue = this.inputElement.value;
      this.inputElement.setAttribute("value", this.inputElement.value);
      this.startCopy = this.startDate;
      this.endCopy = this.endDate;
    };
    DateRangePicker2.prototype.setEleWidth = function(width) {
      if (typeof width === "string") {
        this.inputWrapper.container.style.width = this.width;
      } else if (typeof width === "number") {
        this.inputWrapper.container.style.width = formatUnit(this.width);
      } else {
        this.inputWrapper.container.style.width = "100%";
      }
    };
    DateRangePicker2.prototype.adjustLongHeaderWidth = function() {
      if (this.dayHeaderFormat === "Wide") {
        addClass([this.popupWrapper], DAYHEADERLONG2);
      }
    };
    DateRangePicker2.prototype.refreshControl = function() {
      this.validateMinMax();
      if (this.strictMode) {
        this.validateRangeStrict();
      }
      var isDisabled = this.disabledDates();
      if (this.strictMode && isDisabled) {
        this.startValue = this.previousStartValue;
        this.setProperties({
          startDate: this.startValue
        }, true);
        this.endValue = this.previousEndValue;
        this.setProperties({
          endDate: this.endValue
        }, true);
        this.setValue();
      }
      this.updateInput();
      if (!this.strictMode) {
        this.validateRange();
      }
      if (!this.strictMode && isDisabled) {
        this.clearRange();
      }
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue) && !isDisabled && !isNullOrUndefined(this.renderDayCellArgs) && this.renderDayCellArgs.isDisabled) {
        this.disabledDateRender();
      }
      this.errorClass();
      this.previousStartValue = isNullOrUndefined(this.startValue) || isNaN(+this.startValue) ? null : /* @__PURE__ */ new Date(+this.startValue);
      this.previousEndValue = isNullOrUndefined(this.endValue) || isNaN(+this.endValue) ? null : /* @__PURE__ */ new Date(+this.endValue);
    };
    DateRangePicker2.prototype.updateInput = function() {
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
        var formatOption = {
          format: this.formatString,
          type: "date",
          skeleton: "yMd"
        };
        var startDate = this.globalize.formatDate(this.startValue, formatOption);
        var endDate = this.globalize.formatDate(this.endValue, formatOption);
        Input.setValue(startDate + " " + this.separator + " " + endDate, this.inputElement, this.floatLabelType, this.showClearButton);
        this.previousStartValue = /* @__PURE__ */ new Date(+this.startValue);
        this.previousEndValue = /* @__PURE__ */ new Date(+this.endValue);
      }
      if (!this.strictMode && isNullOrUndefined(this.value) && this.invalidValueString) {
        Input.setValue(this.invalidValueString, this.inputElement, this.floatLabelType, this.showClearButton);
      }
    };
    DateRangePicker2.prototype.checkInvalidRange = function(value) {
      if (!isNullOrUndefined(value)) {
        var invalid = false;
        var startinvalue = void 0;
        var endinvalue = void 0;
        var startString = null;
        var endString = null;
        var valueString = null;
        var startObject = false;
        var endObject = false;
        var invalidobject = false;
        if (typeof value === "string") {
          var range = value.split(" " + this.separator + " ");
          if (range.length === 2) {
            startString = range[0];
            endString = range[1];
          } else {
            invalid = true;
            valueString = value;
          }
        } else {
          if (value.length > 0) {
            startinvalue = value[0];
            endinvalue = value[1];
          } else {
            startinvalue = value.start;
            endinvalue = value.end;
          }
          if (!(startinvalue instanceof Date) && typeof startinvalue !== "object") {
            startString = this.getstringvalue(startinvalue);
          } else if (startinvalue instanceof Date) {
            startObject = true;
          } else if (!isNullOrUndefined(startinvalue)) {
            invalidobject = true;
          }
          if (!(endinvalue instanceof Date) && typeof endinvalue !== "object") {
            endString = this.getstringvalue(endinvalue);
          } else if (endinvalue instanceof Date) {
            endObject = true;
          } else if (!isNullOrUndefined(endinvalue)) {
            invalidobject = true;
          }
        }
        if (isNullOrUndefined(startString) && !startObject && !isNullOrUndefined(endString) || !isNullOrUndefined(startString) && !endObject && isNullOrUndefined(endString)) {
          invalid = true;
        }
        if (invalidobject) {
          startString = endString = valueString = null;
          invalid = true;
        }
        if (startString) {
          invalid = invalid || this.checkInvalidValue(startString);
        }
        if (endString) {
          invalid = invalid || this.checkInvalidValue(endString);
        }
        if (invalid) {
          if (startObject && !invalidobject) {
            startString = startinvalue.toLocaleDateString();
          }
          if (endObject && !invalidobject) {
            endString = endinvalue.toLocaleDateString();
          }
          if (!isNullOrUndefined(startString) && !isNullOrUndefined(endString)) {
            valueString = startString + " " + this.separator + " " + endString;
          } else if (!isNullOrUndefined(startString)) {
            valueString = startString;
          } else if (!isNullOrUndefined(endString)) {
            valueString = endString;
          }
          this.invalidValueString = valueString;
          this.setProperties({
            value: null
          }, true);
          this.setProperties({
            startValue: null
          }, true);
          this.setProperties({
            endValue: null
          }, true);
          this.startDate = null;
          this.endDate = null;
        }
      }
    };
    DateRangePicker2.prototype.getstringvalue = function(value) {
      var stringValue = null;
      if (!isNullOrUndefined(value) && typeof value === "number") {
        stringValue = value.toString();
      } else if (!isNullOrUndefined(value) && typeof value === "string") {
        stringValue = "" + value;
      }
      return stringValue;
    };
    DateRangePicker2.prototype.checkInvalidValue = function(value) {
      var valueString = value;
      var invalid = false;
      var formatOpt = null;
      formatOpt = {
        format: this.formatString,
        type: "date",
        skeleton: "yMd"
      };
      if (typeof valueString !== "string") {
        invalid = true;
      } else {
        var globalize = new Internationalization(this.locale);
        if (!this.checkDateValue(globalize.parseDate(valueString, formatOpt))) {
          var extISOStr = null;
          var basISOString = null;
          extISOStr = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
          basISOString = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
          if (!extISOStr.test(valueString) && !basISOString.test(valueString) || /^[a-zA-Z0-9- ]*$/.test(valueString) || isNaN(+new Date(this.checkValue(valueString)))) {
            invalid = true;
          }
        }
      }
      return invalid;
    };
    DateRangePicker2.prototype.isDateDisabled = function(date) {
      if (isNullOrUndefined(date)) {
        return false;
      }
      var value = /* @__PURE__ */ new Date(+date);
      if (+value < +this.min || +value > +this.max) {
        return true;
      }
      this.virtualRenderCellArgs = {
        date: value,
        isDisabled: false
      };
      var args = this.virtualRenderCellArgs;
      this.virtualRenderCellEvent(args);
      if (args.isDisabled) {
        return true;
      }
      return false;
    };
    DateRangePicker2.prototype.disabledDateRender = function() {
      this.disabledDays = [];
      this.disabledDayCnt = null;
      var localDate = /* @__PURE__ */ new Date(+this.startValue);
      var count = 0;
      while (+localDate <= +this.endValue && +this.endValue <= +this.max) {
        this.virtualRenderCellArgs = {
          date: localDate,
          isDisabled: false
        };
        var args = this.virtualRenderCellArgs;
        this.virtualRenderCellEvent(args);
        if (args.isDisabled) {
          this.disabledDays.push(/* @__PURE__ */ new Date(+args.date));
          if (+localDate > +this.startValue && +localDate < +this.endValue) {
            count++;
          }
        }
        this.addDay(localDate, 1, null, this.max, this.min);
      }
      this.disabledDayCnt = count;
    };
    DateRangePicker2.prototype.virtualRenderCellEvent = function(args) {
      extend(this.virtualRenderCellArgs, {
        name: "renderDayCell"
      });
      this.trigger("renderDayCell", args);
    };
    DateRangePicker2.prototype.disabledDates = function() {
      var isStartDisabled = false;
      var isEndDisabled = false;
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
        isStartDisabled = this.isDateDisabled(this.startValue);
        isEndDisabled = this.isDateDisabled(this.endValue);
        if (!this.isPopupOpen()) {
          this.currentDate = null;
        }
        this.setValue();
      }
      return isStartDisabled || isEndDisabled;
    };
    DateRangePicker2.prototype.setModelValue = function() {
      if (!this.value && this.startDate === null && this.endDate === null) {
        this.setProperties({
          value: null
        }, true);
      } else if (this.value === null || this.value.start === null) {
        if (this.value === null) {
          this.setProperties({
            value: [this.startDate, this.endDate]
          }, true);
        } else if (this.value.start === null) {
          this.setProperties({
            value: {
              start: this.startDate,
              end: this.endDate
            }
          }, true);
        }
      } else {
        if (this.value && this.value.length > 0 || this.valueType && this.valueType.length > 0) {
          if (+this.startDate !== +this.value[0] || +this.endDate !== +this.value[1]) {
            this.setProperties({
              value: [this.startDate, this.endDate]
            }, true);
          }
          if (this.value && this.value[0] == null && this.value[1] == null) {
            this.setProperties({
              value: null
            }, true);
          }
        } else {
          if (this.value && this.value.start) {
            this.setProperties({
              value: {
                start: this.startDate,
                end: this.endDate
              }
            }, true);
          }
        }
      }
      this.createHiddenInput();
    };
    DateRangePicker2.prototype.dispatchEvent = function(element2, type) {
      var evt = document.createEvent("HTMLEvents");
      evt.initEvent(type, false, true);
      element2.dispatchEvent(evt);
      this.firstHiddenChild.dispatchEvent(evt);
    };
    DateRangePicker2.prototype.changeTrigger = function(e) {
      if (+this.initStartDate !== +this.startValue || +this.initEndDate !== +this.endValue) {
        this.setProperties({
          endDate: this.checkDateValue(this.endValue)
        }, true);
        this.setProperties({
          startDate: this.checkDateValue(this.startValue)
        }, true);
        this.setModelValue();
        if (this.isAngular && this.preventChange) {
          this.preventChange = false;
        } else {
          this.trigger("change", this.rangeArgs(e));
        }
      }
      this.previousEleValue = this.inputElement.value;
      this.initStartDate = this.checkDateValue(this.startValue);
      this.initEndDate = this.checkDateValue(this.endValue);
    };
    DateRangePicker2.prototype.navigateTo = function(view, date) {
      if (this.isPopupOpen()) {
        if (view.toLowerCase() === "month") {
          view = "Month";
        } else if (view.toLowerCase() === "year") {
          view = "Year";
        } else if (view.toLowerCase() === "decade") {
          view = "Decade";
        } else {
          return;
        }
        if (this.getViewNumber(view) < this.getViewNumber(this.depth)) {
          view = this.depth;
        }
        if (this.isMobile) {
          _super.prototype.navigateTo.call(this, view, date);
        } else {
          if (date < this.min) {
            date = /* @__PURE__ */ new Date(+this.min);
          } else if (date >= this.max) {
            date = /* @__PURE__ */ new Date(+this.max);
          }
          if (view === "Month" && this.isSameMonth(date, this.max)) {
            date = new Date(this.max.getFullYear(), this.max.getMonth() - 1, this.min.getDate());
          } else if (view === "Year" && this.isSameYear(date, this.max)) {
            date = new Date(this.max.getFullYear() - 1, this.max.getMonth(), this.max.getDate());
          } else if (view === "Decade" && this.isSameDecade(date, this.max)) {
            date = new Date(this.max.getFullYear() - 10, this.max.getMonth(), this.max.getDate());
          }
          this.leftCalCurrentDate = date;
          this.navigate(this.leftCalendar, this.leftCalCurrentDate, view);
          if (view === "Month") {
            date = new Date(this.currentDate.setMonth(this.currentDate.getMonth() + 1));
          } else if (view === "Year") {
            date = new Date(this.currentDate.setFullYear(this.currentDate.getFullYear() + 1));
          } else {
            date = new Date(this.currentDate.setFullYear(this.currentDate.getFullYear() + 10));
          }
          this.rightCalCurrentDate = date;
          this.navigate(this.rightCalendar, this.rightCalCurrentDate, view);
          this.leftKeyboardModule = this.rightKeyboardModule = null;
          this.updateNavIcons();
        }
        if (this.currentView() === this.depth) {
          this.bindCalendarCellEvents();
        }
        this.removeFocusedDate();
        this.updateRange(this.isMobile ? [this.calendarElement] : [this.leftCalendar, this.rightCalendar]);
      }
    };
    DateRangePicker2.prototype.navigate = function(calendar, date, view) {
      this.calendarElement = calendar;
      this.table = calendar.querySelector("table");
      this.tableBodyElement = calendar.querySelector("tbody");
      this.headerTitleElement = calendar.querySelector(".e-title");
      this.tableHeadElement = calendar.querySelector("thead");
      this.contentElement = calendar.querySelector(".e-content");
      this.previousIcon = calendar.querySelector(".e-prev");
      this.nextIcon = calendar.querySelector(".e-next");
      this.effect = ZOOMIN2;
      _super.prototype.navigateTo.call(this, view, date);
    };
    DateRangePicker2.prototype.focusIn = function() {
      if (document.activeElement !== this.inputElement && this.enabled) {
        addClass([this.inputWrapper.container], [INPUTFOCUS2]);
        this.inputElement.focus();
      }
    };
    DateRangePicker2.prototype.focusOut = function() {
      var isBlur = this.preventBlur;
      if (document.activeElement === this.inputElement) {
        removeClass([this.inputWrapper.container], [INPUTFOCUS2]);
        this.preventBlur = false;
        this.inputElement.blur();
        this.preventBlur = isBlur;
      }
    };
    DateRangePicker2.prototype.destroy = function() {
      this.unBindEvents();
      if (this.showClearButton) {
        this.clearButton = document.getElementsByClassName("e-clear-icon")[0];
      }
      this.hide(null);
      var ariaAttrs = {
        "tabindex": "0",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off",
        "aria-disabled": !this.enabled ? "true" : "false",
        "autocorrect": "off",
        "autocapitalize": "off",
        "aria-invalid": "false",
        "spellcheck": "false"
      };
      if (this.inputElement) {
        removeClass([this.inputElement], [ROOT9]);
        EventHandler.remove(this.inputElement, "blur", this.inputBlurHandler);
        Input.removeAttributes(ariaAttrs, this.inputElement);
        if (!isNullOrUndefined(this.cloneElement.getAttribute("tabindex"))) {
          this.inputElement.setAttribute("tabindex", this.tabIndex);
        } else {
          this.inputElement.removeAttribute("tabindex");
        }
        this.ensureInputAttribute();
        this.inputElement.classList.remove("e-input");
        if (!isNullOrUndefined(this.inputWrapper)) {
          EventHandler.remove(this.inputWrapper.buttons[0], "mousedown", this.rangeIconHandler);
          if (this.angularTag === null) {
            this.inputWrapper.container.parentElement.appendChild(this.inputElement);
          }
          detach(this.inputWrapper.container);
        }
      }
      if (!isNullOrUndefined(this.inputKeyboardModule) && !this.isMobile) {
        this.inputKeyboardModule.destroy();
      }
      if (this.popupObj) {
        if (!this.isMobile) {
          this.clearCalendarEvents();
        }
      }
      Input.destroy({
        element: this.inputElement,
        floatLabelType: this.floatLabelType,
        properties: this.properties
      }, this.clearButton);
      _super.prototype.destroy.call(this);
      this.inputWrapper = this.popupWrapper = this.popupObj = this.cloneElement = this.presetElement = null;
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.formResetHandler);
      }
      if (!isNullOrUndefined(this.firstHiddenChild) && !isNullOrUndefined(this.secondHiddenChild)) {
        detach(this.firstHiddenChild);
        detach(this.secondHiddenChild);
        this.firstHiddenChild = this.secondHiddenChild = null;
        this.inputElement.setAttribute("name", this.element.getAttribute("data-name"));
        this.inputElement.removeAttribute("data-name");
      }
      this.closeEventArgs = null;
      this.leftCalendar = null;
      this.rightTitle = null;
      this.leftTitle = null;
      this.openEventArgs = null;
      this.leftCalNextIcon = null;
      this.rightCalendar = null;
      this.closeEventArgs = null;
      this.rightCalPrevIcon = null;
      this.leftCalPrevIcon = null;
      this.popupKeyboardModule = null;
      this.cancelButton = null;
      this.applyButton = null;
      this.calendarElement = null;
      this.leftKeyboardModule = null;
      this.rightCalNextIcon = null;
      this.leftCalNextIcon = null;
      this.btnKeyboardModule = null;
      this.rightKeyboardModule = null;
      this.leftKeyboardModule = null;
      this.presetKeyboardModule = null;
      this.liCollections = null;
      this.popupObj = null;
      this.popupWrapper = null;
    };
    DateRangePicker2.prototype.ensureInputAttribute = function() {
      var attr = [];
      for (var i = 0; i < this.inputElement.attributes.length; i++) {
        attr[i] = this.inputElement.attributes[i].name;
      }
      for (var i = 0; i < attr.length; i++) {
        if (isNullOrUndefined(this.cloneElement.getAttribute(attr[i]))) {
          if (attr[i].toLowerCase() === "value") {
            this.inputElement.value = "";
          }
          this.inputElement.removeAttribute(attr[i]);
        } else {
          if (attr[i].toLowerCase() === "value") {
            this.inputElement.value = this.cloneElement.getAttribute(attr[i]);
          }
          this.inputElement.setAttribute(attr[i], this.cloneElement.getAttribute(attr[i]));
        }
      }
    };
    DateRangePicker2.prototype.getModuleName = function() {
      return "daterangepicker";
    };
    DateRangePicker2.prototype.getPersistData = function() {
      var keyEntity = ["startDate", "endDate", "value"];
      return this.addOnPersist(keyEntity);
    };
    DateRangePicker2.prototype.getSelectedRange = function() {
      var range;
      if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue)) {
        range = Math.round(Math.abs((this.removeTimeValueFromDate(this.startValue).getTime() - this.removeTimeValueFromDate(this.endValue).getTime()) / (1e3 * 60 * 60 * 24))) + 1;
        if (!isNullOrUndefined(this.renderDayCellArgs) && this.renderDayCellArgs.isDisabled) {
          this.disabledDateRender();
        }
        if (!isNullOrUndefined(this.disabledDayCnt)) {
          range = range - this.disabledDayCnt;
          this.disabledDayCnt = null;
        }
      } else {
        range = 0;
      }
      return {
        startDate: this.startValue,
        endDate: this.endValue,
        daySpan: range
      };
    };
    DateRangePicker2.prototype.show = function(element2, event2) {
      var _this = this;
      if (this.isMobile && this.popupObj) {
        this.popupObj.refreshPosition();
      }
      if (this.enabled && this.readonly || !this.enabled || this.popupObj) {
        return;
      } else {
        if (!this.isPopupOpen()) {
          if (element2) {
            this.targetElement = element2;
          }
          this.createPopup();
          if (this.isMobile || Browser.isDevice) {
            this.mobileRangePopupWrap = this.createElement("div", {
              className: "e-daterangepick-mob-popup-wrap"
            });
            document.body.appendChild(this.mobileRangePopupWrap);
          }
          this.openEventArgs = {
            popup: this.popupObj || null,
            cancel: false,
            date: this.inputElement.value,
            model: this,
            event: event2 ? event2 : null,
            appendTo: this.isMobile || Browser.isDevice ? this.mobileRangePopupWrap : document.body
          };
          var eventArgs = this.openEventArgs;
          this.trigger("open", eventArgs, function(eventArgs2) {
            _this.openEventArgs = eventArgs2;
            if (!_this.openEventArgs.cancel) {
              _this.openEventArgs.appendTo.appendChild(_this.popupWrapper);
              _this.showPopup(element2, event2);
              var isPreset = !_this.isCustomRange || _this.isMobile && _this.isCustomRange;
              if (!isUndefined(_this.presets[0].start && _this.presets[0].end && _this.presets[0].label) && isPreset) {
                _this.setScrollPosition();
              }
              _this.checkMinMaxDays();
              if (_this.isMobile && !isNullOrUndefined(_this.startDate) && isNullOrUndefined(_this.endDate)) {
                _this.endButton.element.classList.add(ACTIVE4);
                _this.startButton.element.classList.remove(ACTIVE4);
                _this.endButton.element.removeAttribute("disabled");
                _this.selectableDates();
              }
              _super.prototype.setOverlayIndex.call(_this, _this.mobileRangePopupWrap, _this.popupObj.element, _this.modal, _this.isMobile || Browser.isDevice);
              if (Browser.isDevice) {
                var dlgOverlay = _this.createElement("div", {
                  className: "e-dlg-overlay"
                });
                dlgOverlay.style.zIndex = (_this.zIndex - 1).toString();
                _this.mobileRangePopupWrap.appendChild(dlgOverlay);
              }
            }
          });
        }
      }
    };
    DateRangePicker2.prototype.hide = function(event2) {
      var _this = this;
      if (this.popupObj) {
        if (isNullOrUndefined(this.previousEndValue) && isNullOrUndefined(this.previousStartValue)) {
          this.clearRange();
        } else {
          if (!isNullOrUndefined(this.previousStartValue)) {
            this.startValue = new Date(this.checkValue(this.previousStartValue));
            this.setValue();
            this.currentDate = new Date(this.checkValue(this.startValue));
          } else {
            this.startValue = null;
            this.setValue();
          }
          if (!isNullOrUndefined(this.previousEndValue)) {
            this.endValue = new Date(this.checkValue(this.previousEndValue));
            this.setValue();
          } else {
            this.endValue = null;
            this.setValue();
          }
        }
        if (this.isPopupOpen()) {
          this.closeEventArgs = {
            cancel: false,
            popup: this.popupObj,
            date: this.inputElement.value,
            model: this,
            event: event2 ? event2 : null
          };
          var eventArgs = this.closeEventArgs;
          this.trigger("close", eventArgs, function(eventArgs2) {
            _this.closeEventArgs = eventArgs2;
            if (!_this.closeEventArgs.cancel) {
              if (_this.isMobile) {
                if (!isNullOrUndefined(_this.startButton) && !isNullOrUndefined(_this.endButton)) {
                  EventHandler.remove(_this.startButton.element, "click touchstart", _this.deviceHeaderClick);
                  EventHandler.remove(_this.endButton.element, "click touchstart", _this.deviceHeaderClick);
                }
              }
              if (_this.popupObj) {
                _this.popupObj.hide();
                if (_this.preventBlur) {
                  _this.inputElement.focus();
                  addClass([_this.inputWrapper.container], [INPUTFOCUS2]);
                }
              }
              if (!_this.isMobile) {
                if (!isNullOrUndefined(_this.leftKeyboardModule) && !isNullOrUndefined(_this.rightKeyboardModule)) {
                  _this.leftKeyboardModule.destroy();
                  _this.rightKeyboardModule.destroy();
                }
                if (!isNullOrUndefined(_this.presetElement)) {
                  _this.presetKeyboardModule.destroy();
                }
                if (!isNullOrUndefined(_this.cancelButton)) {
                  _this.btnKeyboardModule.destroy();
                }
              }
              _this.targetElement = null;
              removeClass([document.body], OVERFLOW2);
              EventHandler.remove(document, "mousedown touchstart", _this.documentHandler);
              if (_this.isMobile && _this.modal) {
                _this.modal.style.display = "none";
                _this.modal.outerHTML = "";
                _this.modal = null;
              }
              if (_this.isMobile || Browser.isDevice) {
                if (!isNullOrUndefined(_this.mobileRangePopupWrap)) {
                  _this.mobileRangePopupWrap.remove();
                  _this.mobileRangePopupWrap = null;
                }
              }
              _this.isKeyPopup = _this.dateDisabled = false;
            } else {
              removeClass([_this.inputWrapper.buttons[0]], ACTIVE4);
            }
            _this.updateClearIconState();
            _this.updateHiddenInput();
            if (_this.isMobile && _this.allowEdit && !_this.readonly) {
              _this.inputElement.removeAttribute("readonly");
            }
          });
        }
      } else {
        this.updateClearIconState();
        this.updateHiddenInput();
        if (this.isMobile && this.allowEdit && !this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
      }
    };
    DateRangePicker2.prototype.setLocale = function() {
      this.globalize = new Internationalization(this.locale);
      this.l10n.setLocale(this.locale);
      if (this.dateRangeOptions && this.dateRangeOptions.placeholder == null) {
        this.setProperties({
          placeholder: this.l10n.getConstant("placeholder")
        }, true);
        Input.setPlaceholder(this.placeholder, this.inputElement);
      }
      this.updateInput();
      this.updateHiddenInput();
      this.changeTrigger();
    };
    DateRangePicker2.prototype.refreshChange = function() {
      this.checkView();
      this.refreshControl();
      this.changeTrigger();
    };
    DateRangePicker2.prototype.setDate = function() {
      Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton);
      this.refreshChange();
    };
    DateRangePicker2.prototype.enableInput = function() {
      if (+this.min <= +this.max) {
        this.setProperties({
          enabled: true
        }, true);
        Input.setEnabled(this.enabled, this.inputElement);
        if (this.element.hasAttribute("disabled")) {
          this.bindEvents();
        }
      }
    };
    DateRangePicker2.prototype.clearModelvalue = function(newProp, oldProp) {
      this.setProperties({
        startDate: null
      }, true);
      this.setProperties({
        endDate: null
      }, true);
      if (oldProp.value && oldProp.value.length > 0) {
        this.setProperties({
          value: null
        }, true);
      } else if (oldProp.value && oldProp.value.start) {
        this.setProperties({
          value: {
            start: null,
            end: null
          }
        }, true);
      } else if (oldProp.value && !oldProp.value.start) {
        this.setProperties({
          value: {
            start: null,
            end: null
          }
        }, true);
      }
      this.updateValue();
      this.setDate();
    };
    DateRangePicker2.prototype.createHiddenInput = function() {
      if (isNullOrUndefined(this.firstHiddenChild) && isNullOrUndefined(this.secondHiddenChild)) {
        this.firstHiddenChild = this.createElement("input");
        this.secondHiddenChild = this.createElement("input");
      }
      if (!isNullOrUndefined(this.inputElement.getAttribute("name"))) {
        this.inputElement.setAttribute("data-name", this.inputElement.getAttribute("name"));
        this.inputElement.removeAttribute("name");
      }
      attributes(this.firstHiddenChild, {
        "type": "text",
        "name": this.inputElement.getAttribute("data-name"),
        "class": HIDDENELEMENT2
      });
      attributes(this.secondHiddenChild, {
        "type": "text",
        "name": this.inputElement.getAttribute("data-name"),
        "class": HIDDENELEMENT2
      });
      var format = {
        format: this.formatString,
        type: "datetime",
        skeleton: "yMd"
      };
      this.firstHiddenChild.value = this.startDate && this.globalize.formatDate(this.startDate, format);
      this.secondHiddenChild.value = this.endDate && this.globalize.formatDate(this.endDate, format);
      this.inputElement.parentElement.appendChild(this.firstHiddenChild);
      this.inputElement.parentElement.appendChild(this.secondHiddenChild);
    };
    DateRangePicker2.prototype.setMinMaxDays = function() {
      if (this.isPopupOpen()) {
        this.removeClassDisabled();
        this.checkMinMaxDays();
        if (this.isMobile) {
          this.selectableDates();
        }
        if (!this.strictMode && isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue)) {
          this.removeSelection();
        } else {
          this.updateRange(this.isMobile ? [this.calendarElement] : [this.leftCalendar, this.rightCalendar]);
        }
        this.updateHeader();
      }
    };
    DateRangePicker2.prototype.getAmPmValue = function(date) {
      try {
        if (typeof date === "string" && date.trim() !== "") {
          return date.replace(/(am|pm|Am|aM|pM|Pm)/g, function(match) {
            return match.toLocaleUpperCase();
          });
        }
        return "";
      } catch (error) {
        console.error("Error occurred while processing date:", error);
        return "";
      }
    };
    DateRangePicker2.prototype.getStartEndValue = function(date, isEnd) {
      if (this.depth === "Month") {
        return this.checkDateValue(new Date(this.checkValue(date)));
      } else if (this.depth === "Year") {
        return new Date(date.getFullYear(), date.getMonth() + (isEnd ? 1 : 0), isEnd ? 0 : 1);
      } else {
        return new Date(date.getFullYear(), isEnd ? 11 : 0, isEnd ? 31 : 1);
      }
    };
    DateRangePicker2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var format = {
        format: this.formatString,
        type: "date",
        skeleton: "yMd"
      };
      var isDynamicValueChange = false;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        var openPopup = ["blur", "change", "cleared", "close", "created", "destroyed", "focus", "navigated", "open", "renderDayCell", "select"];
        if (openPopup.indexOf(prop) > 0 && this.isReact) {
          isDynamicValueChange = true;
        }
        switch (prop) {
          case "width":
            this.setEleWidth(this.width);
            Input.calculateWidth(this.inputElement, this.inputWrapper.container);
            if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
              this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
            }
            break;
          case "separator":
            this.previousEleValue = this.inputElement.value;
            this.setProperties({
              separator: newProp.separator
            }, true);
            this.updateInput();
            this.changeTrigger();
            break;
          case "placeholder":
            Input.setPlaceholder(newProp.placeholder, this.inputElement);
            this.setProperties({
              placeholder: newProp.placeholder
            }, true);
            break;
          case "readonly":
            Input.setReadonly(this.readonly, this.inputElement);
            this.setRangeAllowEdit();
            break;
          case "cssClass":
            this.updateCssClass(newProp.cssClass, oldProp.cssClass);
            break;
          case "enabled":
            this.setProperties({
              enabled: newProp.enabled
            }, true);
            Input.setEnabled(this.enabled, this.inputElement);
            if (this.enabled) {
              this.inputElement.setAttribute("tabindex", this.tabIndex);
            } else {
              this.inputElement.tabIndex = -1;
            }
            break;
          case "allowEdit":
            this.setRangeAllowEdit();
            break;
          case "enableRtl":
            this.setProperties({
              enableRtl: newProp.enableRtl
            }, true);
            Input.setEnableRtl(this.enableRtl, [this.inputWrapper.container]);
            break;
          case "zIndex":
            this.setProperties({
              zIndex: newProp.zIndex
            }, true);
            break;
          case "format":
            this.setProperties({
              format: newProp.format
            }, true);
            this.checkFormat();
            this.updateInput();
            this.changeTrigger();
            break;
          case "locale":
            this.globalize = new Internationalization(this.locale);
            this.l10n.setLocale(this.locale);
            if (this.dateRangeOptions && this.dateRangeOptions.placeholder == null) {
              this.setProperties({
                placeholder: this.l10n.getConstant("placeholder")
              }, true);
              Input.setPlaceholder(this.placeholder, this.inputElement);
            }
            this.setLocale();
            break;
          case "htmlAttributes":
            this.updateHtmlAttributeToElement();
            this.updateHtmlAttributeToWrapper();
            this.setDataAttribute(true);
            this.checkHtmlAttributes(true);
            break;
          case "showClearButton":
            Input.setClearButton(this.showClearButton, this.inputElement, this.inputWrapper);
            this.bindClearEvent();
            break;
          case "startDate":
            if (typeof newProp.startDate === "string") {
              newProp.startDate = this.globalize.parseDate(this.getAmPmValue(newProp.startDate), format);
            }
            if (+this.initStartDate !== +newProp.startDate) {
              this.startValue = this.getStartEndValue(newProp.startDate, false);
              this.setDate();
              this.setValue();
            }
            break;
          case "endDate":
            if (typeof newProp.endDate === "string") {
              newProp.endDate = this.globalize.parseDate(this.getAmPmValue(newProp.endDate), format);
            }
            if (+this.initEndDate !== +newProp.endDate) {
              this.endValue = this.getStartEndValue(newProp.endDate, true);
              this.setDate();
              this.setValue();
            }
            break;
          case "value":
            isDynamicValueChange = true;
            this.invalidValueString = null;
            this.checkInvalidRange(newProp.value);
            if (typeof newProp.value === "string") {
              if (!this.invalidValueString) {
                var rangeArray = newProp.value.split(" " + this.separator + " ");
                this.value = [new Date(rangeArray[0]), new Date(rangeArray[1])];
                this.updateValue();
                this.setDate();
              } else {
                this.clearModelvalue(newProp, oldProp);
              }
            } else {
              if (!isNullOrUndefined(newProp.value) && newProp.value.length > 0 || !isNullOrUndefined(newProp.value) && newProp.value.start) {
                this.valueType = newProp.value;
                if (newProp.value[0] === null || newProp.value.start === null) {
                  if (newProp.value.length === 1 || newProp.value.start) {
                    this.clearModelvalue(newProp, oldProp);
                  } else if (newProp.value[1] === null || newProp.value.start === null) {
                    this.clearModelvalue(newProp, oldProp);
                  }
                } else if (+this.initStartDate !== +newProp.value[0] || +this.initEndDate !== +newProp.value[1] || +this.initStartDate !== +(newProp.value.start || +this.initEndDate !== +newProp.value.start)) {
                  if (newProp.value.length === 1) {
                    this.modelValue = newProp.value;
                  } else if (newProp.value.start) {
                    this.modelValue = newProp.value;
                  }
                  this.updateValue();
                  this.setDate();
                }
              } else {
                if (isNullOrUndefined(this.value) || newProp.value.start == null) {
                  this.valueType = newProp.value;
                  this.startValue = null;
                  this.endValue = null;
                  this.clearModelvalue(newProp, oldProp);
                }
              }
            }
            if (this.isPopupOpen()) {
              if (isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue)) {
                this.removeSelection();
                if (this.isMobile) {
                  this.deviceHeaderUpdate();
                }
                return;
              }
              if (this.isMobile) {
                this.navigate(this.deviceCalendar, this.startValue, this.currentView());
                this.deviceHeaderUpdate();
              } else {
                this.navigate(this.leftCalendar, this.startValue, this.currentView());
                this.updateControl(this.leftCalendar);
                this.navigate(this.rightCalendar, this.endValue, this.currentView());
                this.updateControl(this.rightCalendar);
              }
              this.updateRange(this.isMobile ? [this.calendarElement] : [this.leftCalendar, this.rightCalendar]);
              this.updateHeader();
              this.applyButton.disabled = this.applyButton.element.disabled = false;
            }
            this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;
            break;
          case "minDays":
            isDynamicValueChange = true;
            this.setProperties({
              minDays: newProp.minDays
            }, true);
            this.refreshChange();
            this.setMinMaxDays();
            break;
          case "maxDays":
            isDynamicValueChange = true;
            this.setProperties({
              maxDays: newProp.maxDays
            }, true);
            this.refreshChange();
            this.setMinMaxDays();
            break;
          case "min":
            this.setProperties({
              min: this.checkDateValue(new Date(this.checkValue(newProp.min)))
            }, true);
            this.previousEleValue = this.inputElement.value;
            this.enableInput();
            this.refreshChange();
            break;
          case "max":
            this.setProperties({
              max: this.checkDateValue(new Date(this.checkValue(newProp.max)))
            }, true);
            this.enableInput();
            this.refreshChange();
            break;
          case "strictMode":
            this.invalidValueString = null;
            this.setProperties({
              strictMode: newProp.strictMode
            }, true);
            this.refreshChange();
            break;
          case "presets":
            this.setProperties({
              presets: newProp.presets
            }, true);
            this.processPresets();
            break;
          case "floatLabelType":
            this.floatLabelType = newProp.floatLabelType;
            Input.removeFloating(this.inputWrapper);
            Input.addFloating(this.inputElement, this.floatLabelType, this.placeholder);
            if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
              this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
            }
            break;
          case "start":
            this.setProperties({
              start: newProp.start
            }, true);
            this.refreshChange();
            break;
          case "depth":
            this.setProperties({
              depth: newProp.depth
            }, true);
            this.refreshChange();
            break;
        }
        if (!isDynamicValueChange) {
          this.hide(null);
        }
      }
    };
    __decorate48([Property(null)], DateRangePicker2.prototype, "value", void 0);
    __decorate48([Property(false)], DateRangePicker2.prototype, "enablePersistence", void 0);
    __decorate48([Property(new Date(1900, 0, 1))], DateRangePicker2.prototype, "min", void 0);
    __decorate48([Property(new Date(2099, 11, 31))], DateRangePicker2.prototype, "max", void 0);
    __decorate48([Property(null)], DateRangePicker2.prototype, "locale", void 0);
    __decorate48([Property(null)], DateRangePicker2.prototype, "firstDayOfWeek", void 0);
    __decorate48([Property(false)], DateRangePicker2.prototype, "weekNumber", void 0);
    __decorate48([Property("Gregorian")], DateRangePicker2.prototype, "calendarMode", void 0);
    __decorate48([Property(false)], DateRangePicker2.prototype, "openOnFocus", void 0);
    __decorate48([Property(false)], DateRangePicker2.prototype, "fullScreenMode", void 0);
    __decorate48([Event()], DateRangePicker2.prototype, "created", void 0);
    __decorate48([Event()], DateRangePicker2.prototype, "destroyed", void 0);
    __decorate48([Event()], DateRangePicker2.prototype, "change", void 0);
    __decorate48([Event()], DateRangePicker2.prototype, "cleared", void 0);
    __decorate48([Event()], DateRangePicker2.prototype, "navigated", void 0);
    __decorate48([Event()], DateRangePicker2.prototype, "renderDayCell", void 0);
    __decorate48([Property(null)], DateRangePicker2.prototype, "startDate", void 0);
    __decorate48([Property(null)], DateRangePicker2.prototype, "endDate", void 0);
    __decorate48([Collection([{}], Presets)], DateRangePicker2.prototype, "presets", void 0);
    __decorate48([Property("")], DateRangePicker2.prototype, "width", void 0);
    __decorate48([Property(1e3)], DateRangePicker2.prototype, "zIndex", void 0);
    __decorate48([Property(true)], DateRangePicker2.prototype, "showClearButton", void 0);
    __decorate48([Property(true)], DateRangePicker2.prototype, "showTodayButton", void 0);
    __decorate48([Property("Month")], DateRangePicker2.prototype, "start", void 0);
    __decorate48([Property("Month")], DateRangePicker2.prototype, "depth", void 0);
    __decorate48([Property("")], DateRangePicker2.prototype, "cssClass", void 0);
    __decorate48([Property("-")], DateRangePicker2.prototype, "separator", void 0);
    __decorate48([Property(null)], DateRangePicker2.prototype, "minDays", void 0);
    __decorate48([Property(null)], DateRangePicker2.prototype, "maxDays", void 0);
    __decorate48([Property(false)], DateRangePicker2.prototype, "strictMode", void 0);
    __decorate48([Property(null)], DateRangePicker2.prototype, "keyConfigs", void 0);
    __decorate48([Property(null)], DateRangePicker2.prototype, "format", void 0);
    __decorate48([Property(true)], DateRangePicker2.prototype, "enabled", void 0);
    __decorate48([Property(false)], DateRangePicker2.prototype, "readonly", void 0);
    __decorate48([Property(true)], DateRangePicker2.prototype, "allowEdit", void 0);
    __decorate48([Property("Never")], DateRangePicker2.prototype, "floatLabelType", void 0);
    __decorate48([Property(null)], DateRangePicker2.prototype, "placeholder", void 0);
    __decorate48([Property({})], DateRangePicker2.prototype, "htmlAttributes", void 0);
    __decorate48([Event()], DateRangePicker2.prototype, "open", void 0);
    __decorate48([Event()], DateRangePicker2.prototype, "close", void 0);
    __decorate48([Event()], DateRangePicker2.prototype, "select", void 0);
    __decorate48([Event()], DateRangePicker2.prototype, "focus", void 0);
    __decorate48([Event()], DateRangePicker2.prototype, "blur", void 0);
    DateRangePicker2 = __decorate48([NotifyPropertyChanges], DateRangePicker2);
    return DateRangePicker2;
  }(CalendarBase)
);

// node_modules/@syncfusion/ej2-calendars/src/timepicker/timepicker.js
var __extends51 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate49 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var WRAPPERCLASS = "e-time-wrapper";
var POPUP4 = "e-popup";
var ERROR5 = "e-error";
var POPUPDIMENSION = "240px";
var DAY = (/* @__PURE__ */ new Date()).getDate();
var MONTH2 = (/* @__PURE__ */ new Date()).getMonth();
var YEAR2 = (/* @__PURE__ */ new Date()).getFullYear();
var ROOT10 = "e-timepicker";
var LIBRARY3 = "e-lib";
var CONTROL7 = "e-control";
var CONTENT4 = "e-content";
var SELECTED8 = "e-active";
var HOVER3 = "e-hover";
var NAVIGATION = "e-navigation";
var DISABLED12 = "e-disabled";
var ICONANIMATION = "e-icon-anim";
var FOCUS3 = "e-input-focus";
var LISTCLASS2 = "e-list-item";
var HALFPOSITION = 2;
var ANIMATIONDURATION = 50;
var OVERFLOW3 = "e-time-overflow";
var OFFSETVAL = 4;
var EDITABLE = "e-non-edit";
var wrapperAttributes2 = ["title", "class", "style"];
var TimePickerBase;
(function(TimePickerBase2) {
  function createListItems(createdEl, min, max, globalize, timeFormat, step) {
    var formatOptions;
    if (this.calendarMode === "Gregorian") {
      formatOptions = {
        format: timeFormat,
        type: "time"
      };
    } else {
      formatOptions = {
        format: timeFormat,
        type: "time",
        calendar: "islamic"
      };
    }
    var start;
    var interval = step * 6e4;
    var listItems = [];
    var timeCollections = [];
    start = +min.setMilliseconds(0);
    var end = +max.setMilliseconds(0);
    while (end >= start) {
      timeCollections.push(start);
      listItems.push(globalize.formatDate(new Date(start), {
        format: timeFormat,
        type: "time"
      }));
      start += interval;
    }
    var listTag = ListBase.createList(createdEl, listItems, null, true);
    return {
      collection: timeCollections,
      list: listTag
    };
  }
  TimePickerBase2.createListItems = createListItems;
})(TimePickerBase || (TimePickerBase = {}));
var TimeMaskPlaceholder = (
  /** @class */
  function(_super) {
    __extends51(TimeMaskPlaceholder2, _super);
    function TimeMaskPlaceholder2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate49([Property("day")], TimeMaskPlaceholder2.prototype, "day", void 0);
    __decorate49([Property("month")], TimeMaskPlaceholder2.prototype, "month", void 0);
    __decorate49([Property("year")], TimeMaskPlaceholder2.prototype, "year", void 0);
    __decorate49([Property("day of the week")], TimeMaskPlaceholder2.prototype, "dayOfTheWeek", void 0);
    __decorate49([Property("hour")], TimeMaskPlaceholder2.prototype, "hour", void 0);
    __decorate49([Property("minute")], TimeMaskPlaceholder2.prototype, "minute", void 0);
    __decorate49([Property("second")], TimeMaskPlaceholder2.prototype, "second", void 0);
    return TimeMaskPlaceholder2;
  }(ChildProperty)
);
var TimePicker = (
  /** @class */
  function(_super) {
    __extends51(TimePicker2, _super);
    function TimePicker2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.liCollections = [];
      _this.timeCollections = [];
      _this.disableItemCollection = [];
      _this.invalidValueString = null;
      _this.preventChange = false;
      _this.maskedDateValue = "";
      _this.moduleName = _this.getModuleName();
      _this.timeOptions = options;
      return _this;
    }
    TimePicker2.prototype.preRender = function() {
      this.keyConfigure = {
        enter: "enter",
        escape: "escape",
        end: "end",
        tab: "tab",
        home: "home",
        down: "downarrow",
        up: "uparrow",
        left: "leftarrow",
        right: "rightarrow",
        open: "alt+downarrow",
        close: "alt+uparrow"
      };
      this.cloneElement = this.element.cloneNode(true);
      removeClass([this.cloneElement], [ROOT10, CONTROL7, LIBRARY3]);
      this.inputElement = this.element;
      this.angularTag = null;
      this.formElement = closest(this.element, "form");
      if (this.element.tagName === "EJS-TIMEPICKER") {
        this.angularTag = this.element.tagName;
        this.inputElement = this.createElement("input");
        this.element.appendChild(this.inputElement);
      }
      this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : "0";
      this.element.removeAttribute("tabindex");
      this.openPopupEventArgs = {
        appendTo: document.body
      };
    };
    TimePicker2.prototype.render = function() {
      this.initialize();
      this.createInputElement();
      this.updateHtmlAttributeToWrapper();
      this.setTimeAllowEdit();
      this.setEnable();
      this.validateInterval();
      this.bindEvents();
      this.validateDisable();
      this.setTimeZone();
      this.setValue(this.getFormattedValue(this.value));
      if (this.enableMask && !this.value && this.maskedDateValue && (this.floatLabelType === "Always" || !this.floatLabelType || !this.placeholder)) {
        this.updateInputValue(this.maskedDateValue);
        this.checkErrorState(this.maskedDateValue);
      }
      this.anchor = this.inputElement;
      this.inputElement.setAttribute("value", this.inputElement.value);
      this.inputEleValue = this.getDateObject(this.inputElement.value);
      if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
        this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
      }
      if (!isNullOrUndefined(closest(this.element, "fieldset")) && closest(this.element, "fieldset").disabled) {
        this.enabled = false;
      }
      this.renderComplete();
    };
    TimePicker2.prototype.setTimeZone = function() {
      if (!isNullOrUndefined(this.serverTimezoneOffset) && this.value) {
        var clientTimeZoneDiff = (/* @__PURE__ */ new Date()).getTimezoneOffset() / 60;
        var serverTimezoneDiff = this.serverTimezoneOffset;
        var timeZoneDiff = serverTimezoneDiff + clientTimeZoneDiff;
        timeZoneDiff = this.isDayLightSaving() ? timeZoneDiff-- : timeZoneDiff;
        this.value = new Date(this.value.getTime() + timeZoneDiff * 60 * 60 * 1e3);
      }
    };
    TimePicker2.prototype.isDayLightSaving = function() {
      var firstOffset = new Date(this.value.getFullYear(), 0, 1).getTimezoneOffset();
      var secondOffset = new Date(this.value.getFullYear(), 6, 1).getTimezoneOffset();
      return this.value.getTimezoneOffset() < Math.max(firstOffset, secondOffset);
    };
    TimePicker2.prototype.setTimeAllowEdit = function() {
      if (this.allowEdit) {
        if (!this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
      } else {
        attributes(this.inputElement, {
          "readonly": ""
        });
      }
      this.clearIconState();
    };
    TimePicker2.prototype.clearIconState = function() {
      if (!this.allowEdit && this.inputWrapper && !this.readonly) {
        if (this.inputElement.value === "") {
          removeClass([this.inputWrapper.container], [EDITABLE]);
        } else {
          addClass([this.inputWrapper.container], [EDITABLE]);
        }
      } else if (this.inputWrapper) {
        removeClass([this.inputWrapper.container], [EDITABLE]);
      }
    };
    TimePicker2.prototype.validateDisable = function() {
      this.setMinMax(this.initMin, this.initMax);
      if (!isNullOrUndefined(this.value)) {
        this.popupCreation();
        this.popupObj.destroy();
        this.popupWrapper = this.popupObj = null;
      }
      if (!isNaN(+this.value) && this.value !== null) {
        if (!this.valueIsDisable(this.value)) {
          if (this.strictMode) {
            this.resetState();
          }
          this.initValue = null;
          this.initMax = this.getDateObject(this.initMax);
          this.initMin = this.getDateObject(this.initMin);
          this.timeCollections = this.liCollections = [];
          this.setMinMax(this.initMin, this.initMax);
        }
      }
    };
    TimePicker2.prototype.validationAttribute = function(target, input) {
      var name = target.getAttribute("name") ? target.getAttribute("name") : target.getAttribute("id");
      input.setAttribute("name", name);
      target.removeAttribute("name");
      var attributes2 = ["required", "aria-required", "form"];
      for (var i = 0; i < attributes2.length; i++) {
        if (isNullOrUndefined(target.getAttribute(attributes2[i]))) {
          continue;
        }
        var attr = target.getAttribute(attributes2[i]);
        input.setAttribute(attributes2[i], attr);
        target.removeAttribute(attributes2[i]);
      }
    };
    TimePicker2.prototype.initialize = function() {
      this.globalize = new Internationalization(this.locale);
      this.defaultCulture = new Internationalization("en");
      this.checkTimeFormat();
      this.checkInvalidValue(this.value);
      this.setProperties({
        value: this.checkDateValue(new Date(this.checkInValue(this.value)))
      }, true);
      this.setProperties({
        min: this.checkDateValue(new Date(this.checkInValue(this.min)))
      }, true);
      this.setProperties({
        max: this.checkDateValue(new Date(this.checkInValue(this.max)))
      }, true);
      this.setProperties({
        scrollTo: this.checkDateValue(new Date(this.checkInValue(this.scrollTo)))
      }, true);
      if (this.angularTag !== null) {
        this.validationAttribute(this.element, this.inputElement);
      }
      this.updateHtmlAttributeToElement();
      this.checkAttributes(false);
      var localeText = {
        placeholder: this.placeholder
      };
      this.l10n = new L10n("timepicker", localeText, this.locale);
      this.setProperties({
        placeholder: this.placeholder || this.l10n.getConstant("placeholder")
      }, true);
      this.initValue = this.checkDateValue(this.value);
      this.initMin = this.checkDateValue(this.min);
      this.initMax = this.checkDateValue(this.max);
      this.isNavigate = this.isPreventBlur = this.isTextSelected = false;
      this.activeIndex = this.valueWithMinutes = this.prevDate = null;
      if (!isNullOrUndefined(this.element.getAttribute("id"))) {
        if (this.angularTag !== null) {
          this.inputElement.id = this.element.getAttribute("id") + "_input";
        }
      } else {
        this.element.id = getUniqueID("ej2_timepicker");
        if (this.angularTag !== null) {
          attributes(this.inputElement, {
            "id": this.element.id + "_input"
          });
        }
      }
      if (isNullOrUndefined(this.inputElement.getAttribute("name"))) {
        attributes(this.inputElement, {
          "name": this.element.id
        });
      }
      if (this.enableMask) {
        this.notify("createMask", {
          module: "MaskedDateTime"
        });
      }
    };
    TimePicker2.prototype.checkTimeFormat = function() {
      if (this.format) {
        if (typeof this.format === "string") {
          this.formatString = this.format;
        } else if (!isNullOrUndefined(this.format.skeleton) && this.format.skeleton !== "") {
          var skeletonString = this.format.skeleton;
          this.formatString = this.globalize.getDatePattern({
            type: "time",
            skeleton: skeletonString
          });
        } else {
          this.formatString = this.globalize.getDatePattern({
            type: "time",
            skeleton: "short"
          });
        }
      } else {
        this.formatString = null;
      }
    };
    TimePicker2.prototype.checkDateValue = function(value) {
      return !isNullOrUndefined(value) && value instanceof Date && !isNaN(+value) ? value : null;
    };
    TimePicker2.prototype.createInputElement = function() {
      if (this.fullScreenMode && Browser.isDevice) {
        this.cssClass += " e-popup-expand";
      }
      var updatedCssClassesValue = this.cssClass;
      var isBindClearAction = this.enableMask ? false : true;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        updatedCssClassesValue = this.cssClass.replace(/\s+/g, " ").trim();
      }
      this.inputWrapper = Input.createInput({
        element: this.inputElement,
        bindClearAction: isBindClearAction,
        floatLabelType: this.floatLabelType,
        properties: {
          readonly: this.readonly,
          placeholder: this.placeholder,
          cssClass: updatedCssClassesValue,
          enabled: this.enabled,
          enableRtl: this.enableRtl,
          showClearButton: this.showClearButton
        },
        buttons: [" e-input-group-icon e-time-icon e-icons"]
      }, this.createElement);
      this.inputWrapper.container.style.width = this.setWidth(this.width);
      attributes(this.inputElement, {
        "aria-autocomplete": "list",
        "tabindex": "0",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off",
        "autocorrect": "off",
        "autocapitalize": "off",
        "spellcheck": "false",
        "aria-disabled": "false",
        "aria-invalid": "false"
      });
      if (!this.isNullOrEmpty(this.inputStyle)) {
        Input.addAttributes({
          "style": this.inputStyle
        }, this.inputElement);
      }
      addClass([this.inputWrapper.container], WRAPPERCLASS);
    };
    TimePicker2.prototype.getCldrDateTimeFormat = function() {
      var culture = new Internationalization(this.locale);
      var cldrTime;
      var dateFormat = culture.getDatePattern({
        skeleton: "yMd"
      });
      if (this.isNullOrEmpty(this.formatString)) {
        cldrTime = dateFormat + " " + this.cldrFormat("time");
      } else {
        cldrTime = this.formatString;
      }
      return cldrTime;
    };
    TimePicker2.prototype.checkInvalidValue = function(value) {
      var isInvalid = false;
      if (typeof value !== "object" && !isNullOrUndefined(value)) {
        var valueString = value;
        if (typeof valueString === "string") {
          valueString = valueString.trim();
        }
        var valueExpression = null;
        var valueExp = null;
        if (typeof value === "number") {
          valueString = value.toString();
        } else if (typeof value === "string") {
          if (!/^[a-zA-Z0-9- ]*$/.test(value)) {
            valueExpression = this.setCurrentDate(this.getDateObject(value));
            if (isNullOrUndefined(valueExpression)) {
              valueExpression = this.checkDateValue(this.globalize.parseDate(this.getAmPmValue(valueString), {
                format: this.getCldrDateTimeFormat(),
                type: "datetime"
              }));
              if (isNullOrUndefined(valueExpression)) {
                valueExpression = this.checkDateValue(this.globalize.parseDate(this.getAmPmValue(valueString), {
                  format: this.formatString,
                  type: "dateTime",
                  skeleton: "yMd"
                }));
              }
            }
          }
        }
        valueExp = this.globalize.parseDate(this.getAmPmValue(valueString), {
          format: this.getCldrDateTimeFormat(),
          type: "datetime"
        });
        valueExpression = !isNullOrUndefined(valueExp) && valueExp instanceof Date && !isNaN(+valueExp) ? valueExp : null;
        if (isNullOrUndefined(valueExpression) && valueString.replace(/\s/g, "").length) {
          var extISOString = null;
          var basicISOString = null;
          extISOString = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
          basicISOString = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
          if (!extISOString.test(valueString) && !basicISOString.test(valueString) || /^[a-zA-Z0-9- ]*$/.test(value) || isNaN(+/* @__PURE__ */ new Date("" + valueString))) {
            isInvalid = true;
          } else {
            valueExpression = /* @__PURE__ */ new Date("" + valueString);
          }
        }
        if (isInvalid) {
          if (!this.strictMode) {
            this.invalidValueString = valueString;
          }
          this.setProperties({
            value: null
          }, true);
          this.initValue = null;
        } else {
          this.setProperties({
            value: valueExpression
          }, true);
          this.initValue = this.value;
        }
      }
    };
    TimePicker2.prototype.requiredModules = function() {
      var modules = [];
      if (this.enableMask) {
        modules.push({
          args: [this],
          member: "MaskedDateTime"
        });
      }
      return modules;
    };
    TimePicker2.prototype.getAmPmValue = function(date) {
      try {
        if (typeof date === "string" && date.trim() !== "") {
          return date.replace(/(am|pm|Am|aM|pM|Pm)/g, function(match) {
            return match.toLocaleUpperCase();
          });
        }
        return "";
      } catch (error) {
        console.error("Error occurred while processing date:", error);
        return "";
      }
    };
    TimePicker2.prototype.cldrFormat = function(type) {
      var cldrDateTimeString;
      if (this.locale === "en" || this.locale === "en-US") {
        cldrDateTimeString = getValue("timeFormats.short", getDefaultDateObject());
      } else {
        cldrDateTimeString = this.getCultureTimeObject(cldrData, "" + this.locale);
      }
      return cldrDateTimeString;
    };
    TimePicker2.prototype.destroy = function() {
      this.hide();
      if (this.showClearButton) {
        this.clearButton = document.getElementsByClassName("e-clear-icon")[0];
      }
      this.unBindEvents();
      var ariaAttribute = {
        "aria-autocomplete": "list",
        "tabindex": "0",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off",
        "autocorrect": "off",
        "autocapitalize": "off",
        "spellcheck": "false",
        "aria-disabled": "true",
        "aria-invalid": "false"
      };
      if (this.inputElement) {
        Input.removeAttributes(ariaAttribute, this.inputElement);
        if (this.angularTag === null) {
          this.inputWrapper.container.parentElement.appendChild(this.inputElement);
        }
        if (!isNullOrUndefined(this.cloneElement.getAttribute("tabindex"))) {
          this.inputElement.setAttribute("tabindex", this.tabIndex);
        } else {
          this.inputElement.removeAttribute("tabindex");
        }
        this.ensureInputAttribute();
        this.enableElement([this.inputElement]);
        this.inputElement.classList.remove("e-input");
        if (isNullOrUndefined(this.cloneElement.getAttribute("disabled"))) {
          Input.setEnabled(true, this.inputElement, this.floatLabelType);
        }
      }
      if (this.inputWrapper.container) {
        detach(this.inputWrapper.container);
      }
      this.inputWrapper = this.popupWrapper = this.cloneElement = void 0;
      this.liCollections = this.timeCollections = this.disableItemCollection = [];
      if (!isNullOrUndefined(this.rippleFn)) {
        this.rippleFn();
      }
      Input.destroy({
        element: this.inputElement,
        floatLabelType: this.floatLabelType,
        properties: this.properties
      }, this.clearButton);
      _super.prototype.destroy.call(this);
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.formResetHandler);
      }
      this.rippleFn = null;
      this.openPopupEventArgs = null;
      this.selectedElement = null;
      this.listTag = null;
      this.liCollections = null;
    };
    TimePicker2.prototype.ensureInputAttribute = function() {
      var propertyList = [];
      for (var i = 0; i < this.inputElement.attributes.length; i++) {
        propertyList[i] = this.inputElement.attributes[i].name;
      }
      for (var i = 0; i < propertyList.length; i++) {
        if (!isNullOrUndefined(this.cloneElement.getAttribute(propertyList[i]))) {
          this.inputElement.setAttribute(propertyList[i], this.cloneElement.getAttribute(propertyList[i]));
          if (propertyList[i].toLowerCase() === "value") {
            this.inputElement.value = this.cloneElement.getAttribute(propertyList[i]);
          }
        } else {
          this.inputElement.removeAttribute(propertyList[i]);
          if (propertyList[i].toLowerCase() === "value") {
            this.inputElement.value = "";
          }
        }
      }
    };
    TimePicker2.prototype.popupCreation = function() {
      this.popupWrapper = this.createElement("div", {
        className: ROOT10 + " " + POPUP4,
        attrs: {
          "id": this.element.id + "_popup"
        }
      });
      this.popupWrapper.style.visibility = "hidden";
      this.popupWrapper.setAttribute("aria-label", this.element.id);
      this.popupWrapper.setAttribute("role", "dialog");
      if (!isNullOrUndefined(this.cssClass)) {
        this.popupWrapper.className += " " + this.cssClass;
      }
      if (!isNullOrUndefined(this.step) && this.step > 0) {
        this.generateList();
        append([this.listWrapper], this.popupWrapper);
      }
      this.addSelection();
      this.renderPopup();
      detach(this.popupWrapper);
    };
    TimePicker2.prototype.getPopupHeight = function() {
      var height = parseInt(POPUPDIMENSION, 10);
      var popupHeight = this.popupWrapper.getBoundingClientRect().height;
      return popupHeight > height ? height : popupHeight;
    };
    TimePicker2.prototype.generateList = function() {
      this.createListItems();
      this.wireListEvents();
      var rippleModel = {
        duration: 300,
        selector: "." + LISTCLASS2
      };
      this.rippleFn = rippleEffect(this.listWrapper, rippleModel);
      this.liCollections = this.listWrapper.querySelectorAll("." + LISTCLASS2);
    };
    TimePicker2.prototype.renderPopup = function() {
      var _this = this;
      this.containerStyle = this.inputWrapper.container.getBoundingClientRect();
      this.popupObj = new Popup(this.popupWrapper, {
        width: this.setPopupWidth(this.width),
        zIndex: this.zIndex,
        targetType: "relative",
        position: Browser.isDevice ? {
          X: "center",
          Y: "center"
        } : {
          X: "left",
          Y: "bottom"
        },
        collision: Browser.isDevice ? {
          X: "fit",
          Y: "fit"
        } : {
          X: "flip",
          Y: "flip"
        },
        enableRtl: this.enableRtl,
        relateTo: Browser.isDevice ? document.body : this.inputWrapper.container,
        offsetY: OFFSETVAL,
        open: function() {
          _this.popupWrapper.style.visibility = "visible";
          addClass([_this.inputWrapper.buttons[0]], SELECTED8);
        },
        close: function() {
          removeClass([_this.inputWrapper.buttons[0]], SELECTED8);
          _this.unWireListEvents();
          _this.inputElement.removeAttribute("aria-activedescendant");
          remove(_this.popupObj.element);
          _this.popupObj.destroy();
          _this.popupWrapper.innerHTML = "";
          _this.listWrapper = _this.popupWrapper = _this.listTag = void 0;
        },
        targetExitViewport: function() {
          if (!Browser.isDevice) {
            _this.hide();
          }
        }
      });
      if (!Browser.isDevice) {
        this.popupObj.collision = {
          X: "none",
          Y: "flip"
        };
      }
      if (Browser.isDevice && this.fullScreenMode) {
        this.popupObj.element.style.maxHeight = "100%";
        this.popupObj.element.style.width = "100%";
      } else {
        this.popupObj.element.style.maxHeight = POPUPDIMENSION;
      }
      if (Browser.isDevice && this.fullScreenMode) {
        var modelHeader = this.createElement("div", {
          className: "e-model-header"
        });
        var modelTitleSpan = this.createElement("span", {
          className: "e-model-title"
        });
        modelTitleSpan.textContent = "Select time";
        var modelCloseIcon = this.createElement("span", {
          className: "e-popup-close"
        });
        EventHandler.add(modelCloseIcon, "mousedown touchstart", this.timePopupCloseHandler, this);
        modelHeader.appendChild(modelCloseIcon);
        modelHeader.appendChild(modelTitleSpan);
        this.popupWrapper.insertBefore(modelHeader, this.popupWrapper.firstElementChild);
      }
    };
    TimePicker2.prototype.timePopupCloseHandler = function(e) {
      this.hide();
    };
    TimePicker2.prototype.getFormattedValue = function(value) {
      if (isNullOrUndefined(this.checkDateValue(value))) {
        return null;
      } else {
        return this.globalize.formatDate(value, {
          skeleton: "medium",
          type: "time"
        });
      }
    };
    TimePicker2.prototype.getDateObject = function(text) {
      if (!this.isNullOrEmpty(text)) {
        var dateValue = this.createDateObj(text);
        var value = !this.isNullOrEmpty(this.initValue);
        if (this.checkDateValue(dateValue)) {
          var date = value ? this.initValue.getDate() : DAY;
          var month = value ? this.initValue.getMonth() : MONTH2;
          var year = value ? this.initValue.getFullYear() : YEAR2;
          return new Date(year, month, date, dateValue.getHours(), dateValue.getMinutes(), dateValue.getSeconds());
        }
      }
      return null;
    };
    TimePicker2.prototype.updateHtmlAttributeToWrapper = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (wrapperAttributes2.indexOf(key) > -1) {
            if (key === "class") {
              var updatedClassesValue = this.htmlAttributes["" + key].replace(/\s+/g, " ").trim();
              if (updatedClassesValue !== "") {
                addClass([this.inputWrapper.container], updatedClassesValue.split(" "));
              }
            } else if (key === "style") {
              var timeStyle = this.inputWrapper.container.getAttribute(key);
              timeStyle = !isNullOrUndefined(timeStyle) ? timeStyle + this.htmlAttributes["" + key] : this.htmlAttributes["" + key];
              this.inputWrapper.container.setAttribute(key, timeStyle);
            } else {
              this.inputWrapper.container.setAttribute(key, this.htmlAttributes["" + key]);
            }
          }
        }
      }
    };
    TimePicker2.prototype.updateHtmlAttributeToElement = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (wrapperAttributes2.indexOf(key) < 0) {
            this.inputElement.setAttribute(key, this.htmlAttributes["" + key]);
          }
        }
      }
    };
    TimePicker2.prototype.updateCssClass = function(cssClassNew, cssClassOld) {
      if (!isNullOrUndefined(cssClassOld)) {
        cssClassOld = cssClassOld.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(cssClassNew)) {
        cssClassNew = cssClassNew.replace(/\s+/g, " ").trim();
      }
      Input.setCssClass(cssClassNew, [this.inputWrapper.container], cssClassOld);
      if (this.popupWrapper) {
        Input.setCssClass(cssClassNew, [this.popupWrapper], cssClassOld);
      }
    };
    TimePicker2.prototype.removeErrorClass = function() {
      removeClass([this.inputWrapper.container], ERROR5);
      attributes(this.inputElement, {
        "aria-invalid": "false"
      });
    };
    TimePicker2.prototype.checkErrorState = function(val) {
      var value = this.getDateObject(val);
      if (this.validateState(value) && !this.invalidValueString || this.enableMask && this.inputElement.value === this.maskedDateValue) {
        this.removeErrorClass();
      } else {
        addClass([this.inputWrapper.container], ERROR5);
        attributes(this.inputElement, {
          "aria-invalid": "true"
        });
      }
    };
    TimePicker2.prototype.validateInterval = function() {
      if (!isNullOrUndefined(this.step) && this.step > 0) {
        this.enableElement([this.inputWrapper.buttons[0]]);
      } else {
        this.disableTimeIcon();
      }
    };
    TimePicker2.prototype.disableTimeIcon = function() {
      this.disableElement([this.inputWrapper.buttons[0]]);
      this.hide();
    };
    TimePicker2.prototype.disableElement = function(element2) {
      addClass(element2, DISABLED12);
    };
    TimePicker2.prototype.enableElement = function(element2) {
      removeClass(element2, DISABLED12);
    };
    TimePicker2.prototype.selectInputText = function() {
      this.inputElement.setSelectionRange(0, this.inputElement.value.length);
    };
    TimePicker2.prototype.setCursorToEnd = function() {
      this.inputElement.setSelectionRange(this.inputElement.value.length, this.inputElement.value.length);
    };
    TimePicker2.prototype.getMeridianText = function() {
      var meridian;
      if (this.locale === "en" || this.locale === "en-US") {
        meridian = getValue("dayPeriods.format.wide", getDefaultDateObject());
      } else {
        var gregorianFormat = ".dates.calendars.gregorian.dayPeriods.format.abbreviated";
        var mainVal = "main.";
        meridian = getValue(mainVal + "" + this.locale + gregorianFormat, cldrData);
      }
      return meridian;
    };
    TimePicker2.prototype.getCursorSelection = function() {
      var input = this.inputElement;
      var start = 0;
      var end = 0;
      if (!isNaN(input.selectionStart)) {
        start = input.selectionStart;
        end = input.selectionEnd;
      }
      return {
        start: Math.abs(start),
        end: Math.abs(end)
      };
    };
    TimePicker2.prototype.getActiveElement = function() {
      if (!isNullOrUndefined(this.popupWrapper)) {
        return this.popupWrapper.querySelectorAll("." + SELECTED8);
      } else {
        return null;
      }
    };
    TimePicker2.prototype.isNullOrEmpty = function(value) {
      if (isNullOrUndefined(value) || typeof value === "string" && value.trim() === "") {
        return true;
      } else {
        return false;
      }
    };
    TimePicker2.prototype.setWidth = function(width) {
      if (typeof width === "number") {
        width = formatUnit(width);
      } else if (typeof width === "string") {
        width = width.match(/px|%|em/) ? width : formatUnit(width);
      } else {
        width = "100%";
      }
      return width;
    };
    TimePicker2.prototype.setPopupWidth = function(width) {
      width = this.setWidth(width);
      if (width.indexOf("%") > -1) {
        var inputWidth = this.containerStyle.width * parseFloat(width) / 100;
        width = inputWidth.toString() + "px";
      }
      return width;
    };
    TimePicker2.prototype.setScrollPosition = function() {
      var element2 = this.selectedElement;
      if (!isNullOrUndefined(element2)) {
        this.findScrollTop(element2);
      } else if (this.popupWrapper && this.checkDateValue(this.scrollTo)) {
        this.setScrollTo();
      }
    };
    TimePicker2.prototype.findScrollTop = function(element2) {
      var listHeight = this.getPopupHeight();
      var nextEle = element2.nextElementSibling;
      var height = nextEle ? nextEle.offsetTop : element2.offsetTop;
      var liHeight = element2.getBoundingClientRect().height;
      if (height + element2.offsetTop > listHeight) {
        this.popupWrapper.scrollTop = nextEle ? height - (listHeight / HALFPOSITION + liHeight / HALFPOSITION) : height;
      } else {
        this.popupWrapper.scrollTop = 0;
      }
    };
    TimePicker2.prototype.setScrollTo = function() {
      var element2;
      if (!isNullOrUndefined(this.popupWrapper)) {
        var items = this.popupWrapper.querySelectorAll("." + LISTCLASS2);
        if (items.length) {
          var initialTime = this.timeCollections[0];
          var scrollTime = this.getDateObject(this.checkDateValue(this.scrollTo)).getTime();
          element2 = items[Math.round((scrollTime - initialTime) / (this.step * 6e4))];
        }
      } else {
        this.popupWrapper.scrollTop = 0;
      }
      if (!isNullOrUndefined(element2)) {
        this.findScrollTop(element2);
      } else {
        this.popupWrapper.scrollTop = 0;
      }
    };
    TimePicker2.prototype.getText = function() {
      return isNullOrUndefined(this.checkDateValue(this.value)) ? "" : this.getValue(this.value);
    };
    TimePicker2.prototype.getValue = function(value) {
      return isNullOrUndefined(this.checkDateValue(value)) ? null : this.globalize.formatDate(value, {
        format: this.cldrTimeFormat(),
        type: "time"
      });
    };
    TimePicker2.prototype.cldrDateFormat = function() {
      var cldrDate;
      if (this.locale === "en" || this.locale === "en-US") {
        cldrDate = getValue("dateFormats.short", getDefaultDateObject());
      } else {
        cldrDate = this.getCultureDateObject(cldrData, "" + this.locale);
      }
      return cldrDate;
    };
    TimePicker2.prototype.cldrTimeFormat = function() {
      var cldrTime;
      if (this.isNullOrEmpty(this.formatString)) {
        if (this.locale === "en" || this.locale === "en-US") {
          cldrTime = getValue("timeFormats.short", getDefaultDateObject());
        } else {
          cldrTime = this.getCultureTimeObject(cldrData, "" + this.locale);
        }
      } else {
        cldrTime = this.formatString;
      }
      return cldrTime;
    };
    TimePicker2.prototype.dateToNumeric = function() {
      var cldrTime;
      if (this.locale === "en" || this.locale === "en-US") {
        cldrTime = getValue("timeFormats.medium", getDefaultDateObject());
      } else {
        cldrTime = getValue("main." + this.locale + ".dates.calendars.gregorian.timeFormats.medium", cldrData);
      }
      return cldrTime;
    };
    TimePicker2.prototype.getExactDateTime = function(value) {
      if (isNullOrUndefined(this.checkDateValue(value))) {
        return null;
      } else {
        return this.globalize.formatDate(value, {
          format: this.dateToNumeric(),
          type: "time"
        });
      }
    };
    TimePicker2.prototype.setValue = function(value) {
      var time = this.checkValue(value);
      if (!this.strictMode && !this.validateState(time)) {
        if (this.checkDateValue(this.valueWithMinutes) === null) {
          this.initValue = this.valueWithMinutes = null;
        }
        this.validateMinMax(this.value, this.min, this.max);
      } else {
        if (this.isNullOrEmpty(time)) {
          this.initValue = null;
          this.validateMinMax(this.value, this.min, this.max);
        } else {
          this.initValue = this.compareFormatChange(time);
        }
      }
      this.updateInput(true, this.initValue);
    };
    TimePicker2.prototype.compareFormatChange = function(value) {
      if (isNullOrUndefined(value)) {
        return null;
      }
      return value !== this.getText() ? this.getDateObject(value) : this.getDateObject(this.value);
    };
    TimePicker2.prototype.updatePlaceHolder = function() {
      Input.setPlaceholder(this.l10n.getConstant("placeholder"), this.inputElement);
    };
    TimePicker2.prototype.updateInputValue = function(value) {
      Input.setValue(value, this.inputElement, this.floatLabelType, this.showClearButton);
    };
    TimePicker2.prototype.preventEventBubbling = function(e) {
      e.preventDefault();
      this.interopAdaptor.invokeMethodAsync("OnTimeIconClick");
    };
    TimePicker2.prototype.popupHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (Browser.isDevice) {
        this.inputElement.setAttribute("readonly", "");
      }
      e.preventDefault();
      if (this.isPopupOpen()) {
        this.closePopup(0, e);
      } else {
        this.inputElement.focus();
        this.show(e);
      }
    };
    TimePicker2.prototype.mouseDownHandler = function() {
      if (!this.enabled) {
        return;
      }
      if (!this.readonly) {
        this.inputElement.setSelectionRange(0, 0);
        EventHandler.add(this.inputElement, "mouseup", this.mouseUpHandler, this);
      }
    };
    TimePicker2.prototype.mouseUpHandler = function(event2) {
      if (!this.readonly) {
        event2.preventDefault();
        if (this.enableMask) {
          event2.preventDefault();
          this.notify("setMaskSelection", {
            module: "MaskedDateTime"
          });
          return;
        } else {
          EventHandler.remove(this.inputElement, "mouseup", this.mouseUpHandler);
          var curPos = this.getCursorSelection();
          if (!(curPos.start === 0 && curPos.end === this.inputElement.value.length)) {
            if (this.inputElement.value.length > 0) {
              this.cursorDetails = this.focusSelection();
            }
            this.inputElement.setSelectionRange(this.cursorDetails.start, this.cursorDetails.end);
          }
        }
      }
    };
    TimePicker2.prototype.focusSelection = function() {
      var regex2 = new RegExp("^[a-zA-Z0-9]+$");
      var split = this.inputElement.value.split("");
      split.push(" ");
      var curPos = this.getCursorSelection();
      var start = 0;
      var end = 0;
      var isSeparator = false;
      if (!this.isTextSelected) {
        for (var i = 0; i < split.length; i++) {
          if (!regex2.test(split[i])) {
            end = i;
            isSeparator = true;
          }
          if (isSeparator) {
            if (curPos.start >= start && curPos.end <= end) {
              end = end;
              this.isTextSelected = true;
              break;
            } else {
              start = i + 1;
              isSeparator = false;
            }
          }
        }
      } else {
        start = curPos.start;
        end = curPos.end;
        this.isTextSelected = false;
      }
      return {
        start,
        end
      };
    };
    TimePicker2.prototype.inputHandler = function(event2) {
      if (!this.readonly && this.enabled) {
        if (!(event2.action === "right" || event2.action === "left" || event2.action === "tab" || (event2.action === "home" || event2.action === "end" || event2.action === "up" || event2.action === "down") && !this.isPopupOpen() && !this.enableMask)) {
          event2.preventDefault();
        }
        switch (event2.action) {
          case "home":
          case "end":
          case "up":
          case "down":
            if (!this.isPopupOpen()) {
              this.popupCreation();
              this.popupObj.destroy();
              this.popupObj = this.popupWrapper = null;
            }
            if (this.enableMask && !this.readonly && !this.isPopupOpen()) {
              event2.preventDefault();
              this.notify("keyDownHandler", {
                module: "MaskedDateTime",
                e: event2
              });
            }
            if (this.isPopupOpen()) {
              this.keyHandler(event2);
            }
            break;
          case "enter":
            if (this.isNavigate) {
              this.selectedElement = this.liCollections[this.activeIndex];
              this.valueWithMinutes = new Date(this.timeCollections[this.activeIndex]);
              this.updateValue(this.valueWithMinutes, event2);
            } else {
              this.updateValue(this.inputElement.value, event2);
            }
            this.hide();
            this.isNavigate = false;
            if (this.isPopupOpen()) {
              event2.stopPropagation();
            }
            break;
          case "open":
            this.show(event2);
            break;
          case "escape":
            this.updateInputValue(this.objToString(this.value));
            if (this.enableMask) {
              if (!this.value) {
                this.updateInputValue(this.maskedDateValue);
              }
              this.createMask();
            }
            this.previousState(this.value);
            this.hide();
            break;
          case "close":
            this.hide();
            break;
          case "right":
          case "left":
          case "tab":
          case "shiftTab":
            if (!this.isPopupOpen() && this.enableMask && !this.readonly) {
              if (this.inputElement.selectionStart === 0 && this.inputElement.selectionEnd === this.inputElement.value.length || this.inputElement.selectionEnd !== this.inputElement.value.length && event2.action === "tab" || this.inputElement.selectionStart !== 0 && event2.action === "shiftTab" || event2.action === "left" || event2.action === "right") {
                event2.preventDefault();
              }
              this.notify("keyDownHandler", {
                module: "MaskedDateTime",
                e: event2
              });
            }
            break;
          default:
            this.isNavigate = false;
            break;
        }
      }
    };
    TimePicker2.prototype.onMouseClick = function(event2) {
      var target = event2.target;
      var li = this.selectedElement = closest(target, "." + LISTCLASS2);
      this.setSelection(li, event2);
      if (li && li.classList.contains(LISTCLASS2)) {
        this.hide();
      }
    };
    TimePicker2.prototype.closePopup = function(delay, e) {
      var _this = this;
      if (this.isPopupOpen() && this.popupWrapper) {
        var args = {
          popup: this.popupObj,
          event: e || null,
          cancel: false,
          name: "open"
        };
        removeClass([document.body], OVERFLOW3);
        this.trigger("close", args, function(args2) {
          if (!args2.cancel) {
            var animModel = {
              name: "FadeOut",
              duration: ANIMATIONDURATION,
              delay: delay ? delay : 0
            };
            _this.popupObj.hide(new Animation(animModel));
            removeClass([_this.inputWrapper.container], [ICONANIMATION]);
            attributes(_this.inputElement, {
              "aria-expanded": "false"
            });
            _this.inputElement.removeAttribute("aria-owns");
            _this.inputElement.removeAttribute("aria-controls");
            _this.inputElement.removeAttribute("aria-activedescendant");
            EventHandler.remove(document, "mousedown touchstart", _this.documentClickHandler);
          }
          if (Browser.isDevice && _this.modal) {
            _this.modal.style.display = "none";
            _this.modal.outerHTML = "";
            _this.modal = null;
          }
          if (Browser.isDevice) {
            if (!isNullOrUndefined(_this.mobileTimePopupWrap)) {
              _this.mobileTimePopupWrap.remove();
              _this.mobileTimePopupWrap = null;
            }
          }
          if (Browser.isDevice && _this.allowEdit && !_this.readonly) {
            _this.inputElement.removeAttribute("readonly");
          }
        });
      } else {
        if (Browser.isDevice && this.allowEdit && !this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
      }
    };
    TimePicker2.prototype.disposeServerPopup = function() {
      if (this.popupWrapper) {
        this.popupWrapper.style.visibility = "hidden";
        this.popupWrapper.style.top = "-9999px";
        this.popupWrapper.style.left = "-9999px";
        this.popupWrapper.style.width = "0px";
        this.popupWrapper.style.height = "0px";
      }
    };
    TimePicker2.prototype.checkValueChange = function(event2, isNavigation) {
      if (!this.strictMode && !this.validateState(this.valueWithMinutes)) {
        if (this.checkDateValue(this.valueWithMinutes) === null) {
          this.initValue = this.valueWithMinutes = null;
        }
        this.setProperties({
          value: this.compareFormatChange(this.inputElement.value)
        }, true);
        this.initValue = this.valueWithMinutes = this.compareFormatChange(this.inputElement.value);
        this.prevValue = this.inputElement.value;
        if (+this.prevDate !== +this.value) {
          this.changeEvent(event2);
        }
      } else {
        if (!isNavigation) {
          var value = this.compareFormatChange(this.inputElement.value);
          if (+this.prevDate !== +value || isNullOrUndefined(this.checkDateValue(this.value))) {
            this.valueProcess(event2, value);
          }
        } else {
          var value = this.getDateObject(new Date(this.timeCollections[this.activeIndex]));
          if (+this.prevDate !== +value) {
            this.valueProcess(event2, value);
          }
        }
      }
    };
    TimePicker2.prototype.onMouseOver = function(event2) {
      var currentLi = closest(event2.target, "." + LISTCLASS2);
      this.setHover(currentLi, HOVER3);
    };
    TimePicker2.prototype.setHover = function(li, className) {
      if (this.enabled && this.isValidLI(li) && !li.classList.contains(className)) {
        this.removeHover(className);
        addClass([li], className);
        if (className === NAVIGATION) {
          li.setAttribute("aria-selected", "true");
        }
      }
    };
    TimePicker2.prototype.setSelection = function(li, event2) {
      if (this.isValidLI(li)) {
        this.checkValue(li.getAttribute("data-value"));
        if (this.enableMask) {
          this.createMask();
        }
        this.selectedElement = li;
        this.activeIndex = Array.prototype.slice.call(this.liCollections).indexOf(li);
        this.valueWithMinutes = new Date(this.timeCollections[this.activeIndex]);
        addClass([this.selectedElement], SELECTED8);
        this.selectedElement.setAttribute("aria-selected", "true");
        this.checkValueChange(event2, true);
      }
    };
    TimePicker2.prototype.onMouseLeave = function() {
      this.removeHover(HOVER3);
    };
    TimePicker2.prototype.scrollHandler = function() {
      if (this.getModuleName() === "timepicker" && Browser.isDevice) {
        return;
      } else {
        this.hide();
      }
    };
    TimePicker2.prototype.setMinMax = function(minVal, maxVal) {
      if (isNullOrUndefined(this.checkDateValue(minVal))) {
        this.initMin = this.getDateObject("12:00:00 AM");
      }
      if (isNullOrUndefined(this.checkDateValue(maxVal))) {
        this.initMax = this.getDateObject("11:59:59 PM");
      }
    };
    TimePicker2.prototype.validateMinMax = function(dateVal, minVal, maxVal) {
      var value = dateVal instanceof Date ? dateVal : this.getDateObject(dateVal);
      if (!isNullOrUndefined(this.checkDateValue(value))) {
        dateVal = this.strictOperation(this.initMin, this.initMax, dateVal, value);
      } else if (+this.createDateObj(this.getFormattedValue(this.initMin)) > +this.createDateObj(this.getFormattedValue(this.initMax))) {
        this.disableTimeIcon();
      }
      if (this.strictMode) {
        dateVal = this.valueIsDisable(dateVal) ? dateVal : null;
      }
      this.checkErrorState(dateVal);
      return dateVal;
    };
    TimePicker2.prototype.valueIsDisable = function(value) {
      if (!isNullOrUndefined(this.disableItemCollection) && this.disableItemCollection.length > 0) {
        if (this.disableItemCollection.length === this.timeCollections.length) {
          return false;
        }
        var time = value instanceof Date ? this.objToString(value) : value;
        for (var index = 0; index < this.disableItemCollection.length; index++) {
          if (time === this.disableItemCollection[index]) {
            return false;
          }
        }
      }
      return true;
    };
    TimePicker2.prototype.validateState = function(val) {
      if (!this.strictMode) {
        if (this.valueIsDisable(val)) {
          var value = typeof val === "string" ? this.setCurrentDate(this.getDateObject(val)) : this.setCurrentDate(this.getDateObject(val));
          var maxValue = this.setCurrentDate(this.getDateObject(this.initMax));
          var minValue = this.setCurrentDate(this.getDateObject(this.initMin));
          if (!isNullOrUndefined(this.checkDateValue(value))) {
            if (+value > +maxValue || +value < +minValue) {
              return false;
            }
          } else {
            if (+maxValue < +minValue || this.inputElement.value !== "") {
              return false;
            }
          }
        } else {
          return false;
        }
      }
      return true;
    };
    TimePicker2.prototype.strictOperation = function(minimum, maximum, dateVal, val) {
      var maxValue = this.createDateObj(this.getFormattedValue(maximum));
      var minValue = this.createDateObj(this.getFormattedValue(minimum));
      var value = this.createDateObj(this.getFormattedValue(val));
      if (this.strictMode) {
        if (+minValue > +maxValue) {
          this.disableTimeIcon();
          this.initValue = this.getDateObject(maxValue);
          this.updateInputValue(this.getValue(this.initValue));
          if (this.enableMask) {
            this.createMask();
          }
          return this.inputElement.value;
        } else if (+minValue >= +value) {
          return this.getDateObject(minValue);
        } else if (+value >= +maxValue || +minValue === +maxValue) {
          return this.getDateObject(maxValue);
        }
      } else {
        if (+minValue > +maxValue) {
          this.disableTimeIcon();
          if (!isNaN(+this.createDateObj(dateVal))) {
            return dateVal;
          }
        }
      }
      return dateVal;
    };
    TimePicker2.prototype.bindEvents = function() {
      EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.popupHandler, this);
      EventHandler.add(this.inputElement, "blur", this.inputBlurHandler, this);
      EventHandler.add(this.inputElement, "focus", this.inputFocusHandler, this);
      EventHandler.add(this.inputElement, "change", this.inputChangeHandler, this);
      EventHandler.add(this.inputElement, "input", this.inputEventHandler, this);
      if (this.enableMask) {
        EventHandler.add(this.inputElement, "keydown", this.keydownHandler, this);
        EventHandler.add(this.inputElement, "keyup", this.keyupHandler, this);
      }
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown", this.clearHandler, this);
      }
      if (this.formElement) {
        EventHandler.add(this.formElement, "reset", this.formResetHandler, this);
      }
      if (!Browser.isDevice) {
        this.keyConfigure = extend(this.keyConfigure, this.keyConfigs);
        this.inputEvent = new KeyboardEvents(this.inputWrapper.container, {
          keyAction: this.inputHandler.bind(this),
          keyConfigs: this.keyConfigure,
          eventName: "keydown"
        });
        if (this.showClearButton && this.inputElement) {
          EventHandler.add(this.inputElement, "mousedown", this.mouseDownHandler, this);
        }
      }
    };
    TimePicker2.prototype.keydownHandler = function(e) {
      switch (e.code) {
        case "Delete":
          if (this.enableMask && !this.popupObj && !this.readonly) {
            this.notify("keyDownHandler", {
              module: "MaskedDateTime",
              e
            });
          }
          break;
        default:
          break;
      }
    };
    TimePicker2.prototype.keyupHandler = function(e) {
      if ((e.code === "Backspace" || e.code === "Delete") && this.enableMask && this.showClearButton && this.inputElement && this.inputElement.value === this.maskedDateValue && this.inputWrapper && this.inputWrapper.clearButton && !this.inputWrapper.clearButton.classList.contains("e-clear-icon-hide")) {
        this.inputWrapper.clearButton.classList.add("e-clear-icon-hide");
      }
    };
    TimePicker2.prototype.formResetHandler = function() {
      if (!this.enabled) {
        return;
      }
      if (!this.inputElement.disabled) {
        var timeValue = this.inputElement.getAttribute("value");
        var val = this.checkDateValue(this.inputEleValue);
        if (this.element.tagName === "EJS-TIMEPICKER") {
          val = null;
          timeValue = "";
          this.inputElement.setAttribute("value", "");
        }
        this.setProperties({
          value: val
        }, true);
        this.prevDate = this.value;
        this.valueWithMinutes = this.value;
        this.initValue = this.value;
        if (this.inputElement) {
          this.updateInputValue(timeValue);
          if (this.enableMask) {
            if (!timeValue) {
              this.updateInputValue(this.maskedDateValue);
            }
            this.createMask();
          }
          this.checkErrorState(timeValue);
          this.prevValue = this.inputElement.value;
        }
      }
    };
    TimePicker2.prototype.inputChangeHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      e.stopPropagation();
    };
    TimePicker2.prototype.inputEventHandler = function() {
      if (this.enableMask) {
        this.notify("inputHandler", {
          module: "MaskedDateTime"
        });
      }
    };
    TimePicker2.prototype.unBindEvents = function() {
      if (this.inputWrapper) {
        EventHandler.remove(this.inputWrapper.buttons[0], "mousedown touchstart", this.popupHandler);
      }
      EventHandler.remove(this.inputElement, "blur", this.inputBlurHandler);
      EventHandler.remove(this.inputElement, "focus", this.inputFocusHandler);
      EventHandler.remove(this.inputElement, "change", this.inputChangeHandler);
      EventHandler.remove(this.inputElement, "input", this.inputEventHandler);
      if (this.enableMask) {
        EventHandler.remove(this.inputElement, "keyup", this.keyupHandler);
      }
      if (this.inputEvent) {
        this.inputEvent.destroy();
      }
      EventHandler.remove(this.inputElement, "mousedown touchstart", this.mouseDownHandler);
      if (this.showClearButton && !isNullOrUndefined(this.inputWrapper) && !isNullOrUndefined(this.inputWrapper.clearButton)) {
        EventHandler.remove(this.inputWrapper.clearButton, "mousedown touchstart", this.clearHandler);
      }
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.formResetHandler);
      }
    };
    TimePicker2.prototype.bindClearEvent = function() {
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown", this.clearHandler, this);
      }
    };
    TimePicker2.prototype.raiseClearedEvent = function(e) {
      var clearedArgs = {
        event: e
      };
      this.trigger("cleared", clearedArgs);
    };
    TimePicker2.prototype.clearHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      e.preventDefault();
      if (!isNullOrUndefined(this.value)) {
        this.clear(e);
      } else {
        this.resetState();
        this.raiseClearedEvent(e);
      }
      if (this.popupWrapper) {
        this.popupWrapper.scrollTop = 0;
      }
      if (this.enableMask) {
        this.notify("clearHandler", {
          module: "MaskedDateTime"
        });
      }
      if (closest(this.element, "form")) {
        var element2 = this.element;
        var keyupEvent = document.createEvent("KeyboardEvent");
        keyupEvent.initEvent("keyup", false, true);
        element2.dispatchEvent(keyupEvent);
      }
    };
    TimePicker2.prototype.clear = function(event2) {
      this.setProperties({
        value: null
      }, true);
      this.initValue = null;
      this.resetState();
      this.raiseClearedEvent(event2);
      this.changeEvent(event2);
    };
    TimePicker2.prototype.setZIndex = function() {
      if (this.popupObj) {
        this.popupObj.zIndex = this.zIndex;
        this.popupObj.dataBind();
      }
    };
    TimePicker2.prototype.checkAttributes = function(isDynamic) {
      var attributes2 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ["step", "disabled", "readonly", "style", "name", "value", "min", "max", "placeholder"];
      var value;
      for (var _i = 0, attributes_1 = attributes2; _i < attributes_1.length; _i++) {
        var prop = attributes_1[_i];
        if (!isNullOrUndefined(this.inputElement.getAttribute(prop))) {
          switch (prop) {
            case "disabled":
              if (isNullOrUndefined(this.timeOptions) || this.timeOptions["enabled"] === void 0 || isDynamic) {
                var enabled = this.inputElement.getAttribute(prop) === "disabled" || this.inputElement.getAttribute(prop) === "" || this.inputElement.getAttribute(prop) === "true" ? false : true;
                this.setProperties({
                  enabled
                }, !isDynamic);
              }
              break;
            case "style":
              this.inputStyle = this.inputElement.getAttribute(prop);
              break;
            case "readonly":
              if (isNullOrUndefined(this.timeOptions) || this.timeOptions["readonly"] === void 0 || isDynamic) {
                var readonly = this.inputElement.getAttribute(prop) === "readonly" || this.inputElement.getAttribute(prop) === "" || this.inputElement.getAttribute(prop) === "true" ? true : false;
                this.setProperties({
                  readonly
                }, !isDynamic);
              }
              break;
            case "name":
              this.inputElement.setAttribute("name", this.inputElement.getAttribute(prop));
              break;
            case "step":
              this.step = parseInt(this.inputElement.getAttribute(prop), 10);
              break;
            case "placeholder":
              if (isNullOrUndefined(this.timeOptions) || this.timeOptions["placeholder"] === void 0 || isDynamic) {
                this.setProperties({
                  placeholder: this.inputElement.getAttribute(prop)
                }, !isDynamic);
              }
              break;
            case "min":
              if (isNullOrUndefined(this.timeOptions) || this.timeOptions["min"] === void 0 || isDynamic) {
                value = new Date(this.inputElement.getAttribute(prop));
                if (!isNullOrUndefined(this.checkDateValue(value))) {
                  this.setProperties({
                    min: value
                  }, !isDynamic);
                }
              }
              break;
            case "max":
              if (isNullOrUndefined(this.timeOptions) || this.timeOptions["max"] === void 0 || isDynamic) {
                value = new Date(this.inputElement.getAttribute(prop));
                if (!isNullOrUndefined(this.checkDateValue(value))) {
                  this.setProperties({
                    max: value
                  }, !isDynamic);
                }
              }
              break;
            case "value":
              if (isNullOrUndefined(this.timeOptions) || this.timeOptions["value"] === void 0 || isDynamic) {
                value = new Date(this.inputElement.getAttribute(prop));
                if (!isNullOrUndefined(this.checkDateValue(value))) {
                  this.initValue = value;
                  this.updateInput(false, this.initValue);
                  this.setProperties({
                    value
                  }, !isDynamic);
                }
              }
              break;
          }
        }
      }
    };
    TimePicker2.prototype.setCurrentDate = function(value) {
      if (isNullOrUndefined(this.checkDateValue(value))) {
        return null;
      }
      return new Date(YEAR2, MONTH2, DAY, value.getHours(), value.getMinutes(), value.getSeconds());
    };
    TimePicker2.prototype.getTextFormat = function() {
      var time = 0;
      if (this.cldrTimeFormat().split(" ")[0] === "a" || this.cldrTimeFormat().indexOf("a") === 0) {
        time = 1;
      } else if (this.cldrTimeFormat().indexOf("a") < 0) {
        var strArray = this.cldrTimeFormat().split(" ");
        for (var i = 0; i < strArray.length; i++) {
          if (strArray[i].toLowerCase().indexOf("h") >= 0) {
            time = i;
            break;
          }
        }
      }
      return time;
    };
    TimePicker2.prototype.updateValue = function(value, event2) {
      var val;
      if (this.isNullOrEmpty(value)) {
        this.resetState();
      } else {
        val = this.checkValue(value);
        if (this.strictMode) {
          var inputVal = val === null && value.trim().length > 0 ? this.previousState(this.prevDate) : this.inputElement.value;
          this.updateInputValue(inputVal);
          if (this.enableMask) {
            if (!inputVal) {
              this.updateInputValue(this.maskedDateValue);
            }
            if (isNullOrUndefined(val) && value !== this.maskedDateValue) {
              this.createMask();
            }
            if (isNullOrUndefined(val) && value === this.maskedDateValue) {
              this.updateInputValue(this.maskedDateValue);
            }
          }
        }
      }
      this.checkValueChange(event2, typeof value === "string" ? false : true);
    };
    TimePicker2.prototype.previousState = function(date) {
      var value = this.getDateObject(date);
      for (var i = 0; i < this.timeCollections.length; i++) {
        if (+value === this.timeCollections[i]) {
          this.activeIndex = i;
          this.selectedElement = this.liCollections[i];
          this.valueWithMinutes = new Date(this.timeCollections[i]);
          break;
        }
      }
      return this.getValue(date);
    };
    TimePicker2.prototype.resetState = function() {
      this.removeSelection();
      Input.setValue("", this.inputElement, this.floatLabelType, false);
      this.valueWithMinutes = this.activeIndex = null;
      if (!this.strictMode) {
        this.checkErrorState(null);
      }
    };
    TimePicker2.prototype.objToString = function(val) {
      if (isNullOrUndefined(this.checkDateValue(val))) {
        return null;
      } else {
        return this.globalize.formatDate(val, {
          format: this.cldrTimeFormat(),
          type: "time"
        });
      }
    };
    TimePicker2.prototype.checkValue = function(value) {
      if (!this.isNullOrEmpty(value)) {
        var date = value instanceof Date ? value : this.getDateObject(value);
        return this.validateValue(date, value);
      }
      this.resetState();
      return this.valueWithMinutes = null;
    };
    TimePicker2.prototype.validateValue = function(date, value) {
      var time;
      var val = this.validateMinMax(value, this.min, this.max);
      var newval = this.getDateObject(val);
      if (this.getFormattedValue(newval) !== this.getFormattedValue(this.value)) {
        this.valueWithMinutes = isNullOrUndefined(newval) ? null : newval;
        time = this.objToString(this.valueWithMinutes);
      } else {
        if (this.strictMode) {
          date = newval;
        }
        this.valueWithMinutes = this.checkDateValue(date);
        time = this.objToString(this.valueWithMinutes);
      }
      if (!this.strictMode && isNullOrUndefined(time)) {
        var value_1 = val.trim().length > 0 ? val : "";
        this.updateInputValue(value_1);
        if (this.enableMask) {
          if (!value_1) {
            this.updateInputValue(this.maskedDateValue);
          }
        }
      } else {
        this.updateInputValue(time);
        if (this.enableMask) {
          if (time === "") {
            this.updateInputValue(this.maskedDateValue);
          }
          if (isNullOrUndefined(time) && value !== this.maskedDateValue) {
            this.createMask();
          }
          if (isNullOrUndefined(time) && value === this.maskedDateValue) {
            this.updateInputValue(this.maskedDateValue);
          }
        }
      }
      return time;
    };
    TimePicker2.prototype.createMask = function() {
      this.notify("createMask", {
        module: "MaskedDateTime"
      });
    };
    TimePicker2.prototype.findNextElement = function(event2) {
      var textVal = this.inputElement.value;
      var value = isNullOrUndefined(this.valueWithMinutes) ? this.createDateObj(textVal) : this.getDateObject(this.valueWithMinutes);
      var timeVal = null;
      var count = this.liCollections.length;
      var collections = this.timeCollections;
      if (!isNullOrUndefined(this.checkDateValue(value)) || !isNullOrUndefined(this.activeIndex)) {
        if (event2.action === "home") {
          var index = this.validLiElement(0);
          timeVal = +this.createDateObj(new Date(this.timeCollections[index]));
          this.activeIndex = index;
        } else if (event2.action === "end") {
          var index = this.validLiElement(collections.length - 1, true);
          timeVal = +this.createDateObj(new Date(this.timeCollections[index]));
          this.activeIndex = index;
        } else {
          if (event2.action === "down") {
            for (var i = 0; i < count; i++) {
              if (+value < this.timeCollections[i]) {
                var index = this.validLiElement(i);
                timeVal = +this.createDateObj(new Date(this.timeCollections[index]));
                this.activeIndex = index;
                break;
              } else if (i === count - 1) {
                var index = this.validLiElement(0);
                timeVal = +this.createDateObj(new Date(this.timeCollections[index]));
                this.activeIndex = index;
                break;
              }
            }
          } else {
            for (var i = count - 1; i >= 0; i--) {
              if (+value > this.timeCollections[i]) {
                var index = this.validLiElement(i, true);
                timeVal = +this.createDateObj(new Date(this.timeCollections[index]));
                this.activeIndex = index;
                break;
              } else if (i === 0) {
                var index = this.validLiElement(count - 1);
                timeVal = +this.createDateObj(new Date(this.timeCollections[index]));
                this.activeIndex = index;
                break;
              }
            }
          }
        }
        this.selectedElement = this.liCollections[this.activeIndex];
        this.elementValue(isNullOrUndefined(timeVal) ? null : new Date(timeVal));
      } else {
        this.selectNextItem(event2);
      }
    };
    TimePicker2.prototype.selectNextItem = function(event2) {
      var index = this.validLiElement(0, event2.action === "down" ? false : true);
      this.activeIndex = index;
      this.selectedElement = this.liCollections[index];
      this.elementValue(new Date(this.timeCollections[index]));
    };
    TimePicker2.prototype.elementValue = function(value) {
      if (!isNullOrUndefined(this.checkDateValue(value))) {
        this.checkValue(value);
      }
    };
    TimePicker2.prototype.validLiElement = function(index, backward) {
      var elementIndex = null;
      var items = isNullOrUndefined(this.popupWrapper) ? this.liCollections : this.popupWrapper.querySelectorAll("." + LISTCLASS2);
      var isCheck = true;
      if (items.length) {
        if (backward) {
          for (var i = index; i >= 0; i--) {
            if (!items[i].classList.contains(DISABLED12)) {
              elementIndex = i;
              break;
            } else if (i === 0) {
              if (isCheck) {
                index = i = items.length;
                isCheck = false;
              }
            }
          }
        } else {
          for (var i = index; i <= items.length - 1; i++) {
            if (!items[i].classList.contains(DISABLED12)) {
              elementIndex = i;
              break;
            } else if (i === items.length - 1) {
              if (isCheck) {
                index = i = -1;
                isCheck = false;
              }
            }
          }
        }
      }
      return elementIndex;
    };
    TimePicker2.prototype.keyHandler = function(event2) {
      if (isNullOrUndefined(this.step) || this.step <= 0 || !isNullOrUndefined(this.inputWrapper) && this.inputWrapper.buttons[0].classList.contains(DISABLED12)) {
        return;
      }
      var count = this.timeCollections.length;
      if (isNullOrUndefined(this.getActiveElement()) || this.getActiveElement().length === 0) {
        if (this.liCollections.length > 0) {
          if (isNullOrUndefined(this.value) && isNullOrUndefined(this.activeIndex)) {
            var index = this.validLiElement(0, event2.action === "down" ? false : true);
            this.activeIndex = index;
            this.selectedElement = this.liCollections[index];
            this.elementValue(new Date(this.timeCollections[index]));
          } else {
            this.findNextElement(event2);
          }
        } else {
          this.findNextElement(event2);
        }
      } else {
        var nextItem = void 0;
        if (event2.keyCode >= 37 && event2.keyCode <= 40) {
          var index = event2.keyCode === 40 || event2.keyCode === 39 ? ++this.activeIndex : --this.activeIndex;
          this.activeIndex = index = this.activeIndex === count ? 0 : this.activeIndex;
          this.activeIndex = index = this.activeIndex < 0 ? count - 1 : this.activeIndex;
          this.activeIndex = index = this.validLiElement(this.activeIndex, event2.keyCode === 40 || event2.keyCode === 39 ? false : true);
          nextItem = isNullOrUndefined(this.timeCollections[index]) ? this.timeCollections[0] : this.timeCollections[index];
        } else if (event2.action === "home") {
          var index = this.validLiElement(0);
          this.activeIndex = index;
          nextItem = this.timeCollections[index];
        } else if (event2.action === "end") {
          var index = this.validLiElement(count - 1, true);
          this.activeIndex = index;
          nextItem = this.timeCollections[index];
        }
        this.selectedElement = this.liCollections[this.activeIndex];
        this.elementValue(new Date(nextItem));
      }
      this.isNavigate = true;
      this.setHover(this.selectedElement, NAVIGATION);
      this.setActiveDescendant();
      if (this.enableMask) {
        this.selectInputText();
      }
      if (this.isPopupOpen() && this.selectedElement !== null && (!event2 || event2.type !== "click")) {
        this.setScrollPosition();
      }
    };
    TimePicker2.prototype.getCultureTimeObject = function(ld, c) {
      return getValue("main." + c + ".dates.calendars.gregorian.timeFormats.short", ld);
    };
    TimePicker2.prototype.getCultureDateObject = function(ld, c) {
      return getValue("main." + c + ".dates.calendars.gregorian.dateFormats.short", ld);
    };
    TimePicker2.prototype.wireListEvents = function() {
      EventHandler.add(this.listWrapper, "click", this.onMouseClick, this);
      if (!Browser.isDevice) {
        EventHandler.add(this.listWrapper, "mouseover", this.onMouseOver, this);
        EventHandler.add(this.listWrapper, "mouseout", this.onMouseLeave, this);
      }
    };
    TimePicker2.prototype.unWireListEvents = function() {
      if (this.listWrapper) {
        EventHandler.remove(this.listWrapper, "click", this.onMouseClick);
        if (!Browser.isDevice) {
          EventHandler.remove(this.listWrapper, "mouseover", this.onMouseOver);
          EventHandler.remove(this.listWrapper, "mouseout", this.onMouseLeave);
        }
      }
    };
    TimePicker2.prototype.valueProcess = function(event2, value) {
      var result = isNullOrUndefined(this.checkDateValue(value)) ? null : value;
      if (+this.prevDate !== +result) {
        this.initValue = result;
        this.changeEvent(event2);
      }
    };
    TimePicker2.prototype.changeEvent = function(e) {
      this.addSelection();
      this.updateInput(true, this.initValue);
      var eventArgs = {
        event: e || null,
        value: this.value,
        text: this.inputElement.value,
        isInteracted: !isNullOrUndefined(e),
        element: this.element
      };
      eventArgs.value = this.valueWithMinutes || this.getDateObject(this.inputElement.value);
      this.prevDate = this.valueWithMinutes || this.getDateObject(this.inputElement.value);
      if (this.isAngular && this.preventChange) {
        this.preventChange = false;
      } else {
        this.trigger("change", eventArgs);
      }
      this.invalidValueString = null;
      this.checkErrorState(this.value);
    };
    TimePicker2.prototype.updateInput = function(isUpdate, date) {
      if (isUpdate) {
        this.prevValue = this.getValue(this.prevDate);
      }
      this.prevDate = this.valueWithMinutes = date;
      if (typeof date !== "number" || (this.value && +(/* @__PURE__ */ new Date(+this.value)).setMilliseconds(0)) !== +date) {
        this.setProperties({
          value: date
        }, true);
        if (this.enableMask && this.value) {
          this.createMask();
        }
      }
      if (!this.strictMode && isNullOrUndefined(this.value) && this.invalidValueString) {
        this.checkErrorState(this.invalidValueString);
        this.updateInputValue(this.invalidValueString);
      }
      this.clearIconState();
    };
    TimePicker2.prototype.setActiveDescendant = function() {
      if (!isNullOrUndefined(this.selectedElement) && this.value) {
        attributes(this.inputElement, {
          "aria-activedescendant": this.selectedElement.getAttribute("id")
        });
      } else {
        this.inputElement.removeAttribute("aria-activedescendant");
      }
    };
    TimePicker2.prototype.removeSelection = function() {
      this.removeHover(HOVER3);
      if (!isNullOrUndefined(this.popupWrapper)) {
        var items = this.popupWrapper.querySelectorAll("." + SELECTED8);
        if (items.length) {
          removeClass(items, SELECTED8);
          items[0].removeAttribute("aria-selected");
        }
      }
    };
    TimePicker2.prototype.removeHover = function(className) {
      var hoveredItem = this.getHoverItem(className);
      if (hoveredItem && hoveredItem.length) {
        removeClass(hoveredItem, className);
        if (className === NAVIGATION) {
          hoveredItem[0].removeAttribute("aria-selected");
        }
      }
    };
    TimePicker2.prototype.getHoverItem = function(className) {
      var hoveredItem;
      if (!isNullOrUndefined(this.popupWrapper)) {
        hoveredItem = this.popupWrapper.querySelectorAll("." + className);
      }
      return hoveredItem;
    };
    TimePicker2.prototype.setActiveClass = function() {
      if (!isNullOrUndefined(this.popupWrapper)) {
        var items = this.popupWrapper.querySelectorAll("." + LISTCLASS2);
        if (items.length) {
          for (var i = 0; i < items.length; i++) {
            if (this.timeCollections[i] === +this.getDateObject(this.valueWithMinutes)) {
              items[i].setAttribute("aria-selected", "true");
              this.selectedElement = items[i];
              this.activeIndex = i;
              break;
            }
          }
        }
      }
    };
    TimePicker2.prototype.addSelection = function() {
      this.selectedElement = null;
      this.removeSelection();
      this.setActiveClass();
      if (!isNullOrUndefined(this.selectedElement)) {
        addClass([this.selectedElement], SELECTED8);
        this.selectedElement.setAttribute("aria-selected", "true");
      }
    };
    TimePicker2.prototype.isValidLI = function(li) {
      return li && li.classList.contains(LISTCLASS2) && !li.classList.contains(DISABLED12);
    };
    TimePicker2.prototype.createDateObj = function(val) {
      var formatStr = null;
      var today = this.globalize.formatDate(/* @__PURE__ */ new Date(), {
        format: formatStr,
        skeleton: "short",
        type: "date"
      });
      var value = null;
      if (typeof val === "string" && !(this.enableMask && this.maskedDateValue && this.inputElement.value === this.maskedDateValue && !this.value)) {
        if (val.toUpperCase().indexOf("AM") > -1 || val.toUpperCase().indexOf("PM") > -1) {
          today = this.defaultCulture.formatDate(/* @__PURE__ */ new Date(), {
            format: formatStr,
            skeleton: "short",
            type: "date"
          });
          value = isNaN(+/* @__PURE__ */ new Date(today + " " + val)) ? null : new Date((/* @__PURE__ */ new Date(today + " " + val)).setMilliseconds(0));
          if (isNullOrUndefined(value)) {
            value = this.timeParse(today, val);
          }
        } else {
          value = this.timeParse(today, val);
        }
      } else if (val instanceof Date) {
        value = val;
      }
      return value;
    };
    TimePicker2.prototype.timeParse = function(today, val) {
      var value;
      value = this.globalize.parseDate(this.getAmPmValue(today + " " + val), {
        format: this.cldrDateFormat() + " " + this.cldrTimeFormat(),
        type: "datetime"
      });
      value = isNullOrUndefined(value) ? this.globalize.parseDate(this.getAmPmValue(today + " " + val), {
        format: this.cldrDateFormat() + " " + this.dateToNumeric(),
        type: "datetime"
      }) : value;
      value = isNullOrUndefined(value) ? value : new Date(value.setMilliseconds(0));
      return value;
    };
    TimePicker2.prototype.createListItems = function() {
      var _this = this;
      this.listWrapper = this.createElement("div", {
        className: CONTENT4,
        attrs: {
          "tabindex": "-1"
        }
      });
      var start;
      var interval = this.step * 6e4;
      var listItems = [];
      this.timeCollections = [];
      this.disableItemCollection = [];
      start = +this.getDateObject(this.initMin).setMilliseconds(0);
      var end = +this.getDateObject(this.initMax).setMilliseconds(0);
      while (end >= start) {
        this.timeCollections.push(start);
        listItems.push(this.globalize.formatDate(new Date(start), {
          format: this.cldrTimeFormat(),
          type: "time"
        }));
        start += interval;
      }
      var listBaseOptions = {
        itemCreated: function(args) {
          var eventArgs = {
            element: args.item,
            text: args.text,
            value: _this.getDateObject(args.text),
            isDisabled: false
          };
          _this.trigger("itemRender", eventArgs, function(eventArgs2) {
            if (eventArgs2.isDisabled) {
              eventArgs2.element.classList.add(DISABLED12);
            }
            if (eventArgs2.element.classList.contains(DISABLED12)) {
              _this.disableItemCollection.push(eventArgs2.element.getAttribute("data-value"));
            }
          });
        }
      };
      this.listTag = ListBase.createList(this.createElement, listItems, listBaseOptions, true);
      attributes(this.listTag, {
        "role": "listbox",
        "aria-hidden": "false",
        "id": this.element.id + "_options",
        "tabindex": "0"
      });
      append([this.listTag], this.listWrapper);
    };
    TimePicker2.prototype.documentClickHandler = function(event2) {
      var target = event2.target;
      if (!isNullOrUndefined(this.popupObj) && !isNullOrUndefined(this.inputWrapper) && (this.inputWrapper.container.contains(target) && event2.type !== "mousedown" || this.popupObj.element && this.popupObj.element.contains(target)) && event2.type !== "touchstart") {
        event2.preventDefault();
      }
      if (!closest(target, '[id="' + this.popupObj.element.id + '"]') && target !== this.inputElement && target !== (this.inputWrapper && this.inputWrapper.buttons[0]) && target !== (this.inputWrapper && this.inputWrapper.clearButton) && target !== (this.inputWrapper && this.inputWrapper.container)) {
        if (this.isPopupOpen()) {
          this.hide();
          if (target.classList.contains("e-dlg-overlay")) {
            event2.preventDefault();
          } else {
            this.focusOut();
          }
        }
      } else if (target !== this.inputElement) {
        if (!Browser.isDevice) {
          this.isPreventBlur = (Browser.isIE || Browser.info.name === "edge") && document.activeElement === this.inputElement && target === this.popupWrapper;
        }
      }
    };
    TimePicker2.prototype.setEnableRtl = function() {
      Input.setEnableRtl(this.enableRtl, [this.inputWrapper.container]);
      if (this.popupObj) {
        this.popupObj.enableRtl = this.enableRtl;
        this.popupObj.dataBind();
      }
    };
    TimePicker2.prototype.setEnable = function() {
      Input.setEnabled(this.enabled, this.inputElement, this.floatLabelType);
      if (this.enabled) {
        removeClass([this.inputWrapper.container], DISABLED12);
        attributes(this.inputElement, {
          "aria-disabled": "false"
        });
        this.inputElement.setAttribute("tabindex", this.tabIndex);
      } else {
        this.hide();
        addClass([this.inputWrapper.container], DISABLED12);
        attributes(this.inputElement, {
          "aria-disabled": "true"
        });
        this.inputElement.tabIndex = -1;
      }
    };
    TimePicker2.prototype.getProperty = function(date, val) {
      if (val === "min") {
        this.initMin = this.checkDateValue(new Date(this.checkInValue(date.min)));
        this.setProperties({
          min: this.initMin
        }, true);
      } else {
        this.initMax = this.checkDateValue(new Date(this.checkInValue(date.max)));
        this.setProperties({
          max: this.initMax
        }, true);
      }
      if (this.inputElement.value === "") {
        this.validateMinMax(this.value, this.min, this.max);
      } else {
        this.checkValue(this.inputElement.value);
      }
      this.checkValueChange(null, false);
    };
    TimePicker2.prototype.inputBlurHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.isPreventBlur && this.isPopupOpen()) {
        this.inputElement.focus();
        return;
      }
      this.closePopup(0, e);
      if (this.enableMask && this.maskedDateValue && this.placeholder && this.floatLabelType !== "Always") {
        if (this.inputElement.value === this.maskedDateValue && !this.value && (this.floatLabelType === "Auto" || this.floatLabelType === "Never" || this.placeholder)) {
          this.updateInputValue("");
        }
      }
      removeClass([this.inputWrapper.container], [FOCUS3]);
      if (this.getText() !== this.inputElement.value) {
        this.updateValue(this.inputElement.value, e);
      } else if (this.inputElement.value.trim().length === 0) {
        this.resetState();
      }
      this.cursorDetails = null;
      this.isNavigate = false;
      if (this.inputElement.value === "") {
        this.invalidValueString = null;
      }
      var blurArguments = {
        model: this
      };
      this.trigger("blur", blurArguments);
    };
    TimePicker2.prototype.focusOut = function() {
      if (document.activeElement === this.inputElement) {
        this.inputElement.blur();
        removeClass([this.inputWrapper.container], [FOCUS3]);
        var blurArguments = {
          model: this
        };
        this.trigger("blur", blurArguments);
      }
    };
    TimePicker2.prototype.isPopupOpen = function() {
      if (this.popupWrapper && this.popupWrapper.classList.contains("" + ROOT10)) {
        return true;
      }
      return false;
    };
    TimePicker2.prototype.inputFocusHandler = function() {
      if (!this.enabled) {
        return;
      }
      var focusArguments = {
        model: this
      };
      if (!this.readonly && !Browser.isDevice && !this.enableMask) {
        this.selectInputText();
      }
      if (this.enableMask && !this.inputElement.value && this.placeholder) {
        if (this.maskedDateValue && !this.value && (this.floatLabelType === "Auto" || this.floatLabelType === "Never" || this.placeholder)) {
          this.updateInputValue(this.maskedDateValue);
          this.inputElement.selectionStart = 0;
          this.inputElement.selectionEnd = this.inputElement.value.length;
        }
      }
      if (this.enableMask && this.showClearButton && this.inputElement && this.inputElement.value === this.maskedDateValue && this.inputWrapper && this.inputWrapper.clearButton && !this.inputWrapper.clearButton.classList.contains("e-clear-icon-hide")) {
        this.inputWrapper.clearButton.classList.add("e-clear-icon-hide");
      }
      this.trigger("focus", focusArguments);
      this.clearIconState();
      if (this.openOnFocus) {
        this.show();
      }
    };
    TimePicker2.prototype.focusIn = function() {
      if (document.activeElement !== this.inputElement && this.enabled) {
        this.inputElement.focus();
      }
    };
    TimePicker2.prototype.hide = function() {
      this.closePopup(100, null);
      this.clearIconState();
    };
    TimePicker2.prototype.show = function(event2) {
      var _this = this;
      if (this.enabled && this.readonly || !this.enabled || this.popupWrapper) {
        return;
      } else {
        this.popupCreation();
        if (Browser.isDevice && this.listWrapper) {
          this.modal = this.createElement("div");
          this.modal.className = "" + ROOT10 + " e-time-modal";
          document.body.className += " " + OVERFLOW3;
          document.body.appendChild(this.modal);
        }
        if (Browser.isDevice) {
          this.mobileTimePopupWrap = this.createElement("div", {
            className: "e-timepicker-mob-popup-wrap"
          });
          document.body.appendChild(this.mobileTimePopupWrap);
        }
        this.openPopupEventArgs = {
          popup: this.popupObj || null,
          cancel: false,
          event: event2 || null,
          name: "open",
          appendTo: Browser.isDevice ? this.mobileTimePopupWrap : document.body
        };
        var eventArgs = this.openPopupEventArgs;
        this.trigger("open", eventArgs, function(eventArgs2) {
          _this.openPopupEventArgs = eventArgs2;
          if (!_this.openPopupEventArgs.cancel && !_this.inputWrapper.buttons[0].classList.contains(DISABLED12)) {
            _this.openPopupEventArgs.appendTo.appendChild(_this.popupWrapper);
            _this.popupAlignment(_this.openPopupEventArgs);
            _this.setScrollPosition();
            if (!Browser.isDevice) {
              _this.inputElement.focus();
            }
            var openAnimation = {
              name: "FadeIn",
              duration: ANIMATIONDURATION
            };
            _this.popupObj.refreshPosition(_this.anchor);
            if (_this.zIndex === 1e3) {
              _this.popupObj.show(new Animation(openAnimation), _this.element);
            } else {
              _this.popupObj.show(new Animation(openAnimation), null);
            }
            _this.setActiveDescendant();
            attributes(_this.inputElement, {
              "aria-expanded": "true"
            });
            attributes(_this.inputElement, {
              "aria-owns": _this.inputElement.id + "_options"
            });
            attributes(_this.inputElement, {
              "aria-controls": _this.inputElement.id
            });
            addClass([_this.inputWrapper.container], FOCUS3);
            EventHandler.add(document, "mousedown touchstart", _this.documentClickHandler, _this);
            _this.setOverlayIndex(_this.mobileTimePopupWrap, _this.popupObj.element, _this.modal, Browser.isDevice);
            if (Browser.isDevice) {
              var dlgOverlay = _this.createElement("div", {
                className: "e-dlg-overlay"
              });
              dlgOverlay.style.zIndex = (_this.zIndex - 1).toString();
              _this.mobileTimePopupWrap.appendChild(dlgOverlay);
            }
          } else {
            _this.popupObj.destroy();
            _this.popupWrapper = _this.listTag = void 0;
            _this.liCollections = _this.timeCollections = _this.disableItemCollection = [];
            _this.popupObj = null;
          }
        });
      }
    };
    TimePicker2.prototype.setOverlayIndex = function(popupWrapper, timePopupElement, modal, isDevice) {
      if (isDevice && !isNullOrUndefined(timePopupElement) && !isNullOrUndefined(modal) && !isNullOrUndefined(popupWrapper)) {
        var index = parseInt(timePopupElement.style.zIndex, 10) ? parseInt(timePopupElement.style.zIndex, 10) : 1e3;
        modal.style.zIndex = (index - 1).toString();
        popupWrapper.style.zIndex = index.toString();
      }
    };
    TimePicker2.prototype.formatValues = function(type) {
      var value;
      if (typeof type === "number") {
        value = formatUnit(type);
      } else if (typeof type === "string") {
        value = type.match(/px|%|em/) ? type : isNaN(parseInt(type, 10)) ? type : formatUnit(type);
      }
      return value;
    };
    TimePicker2.prototype.popupAlignment = function(args) {
      args.popup.position.X = this.formatValues(args.popup.position.X);
      args.popup.position.Y = this.formatValues(args.popup.position.Y);
      if (!isNaN(parseFloat(args.popup.position.X)) || !isNaN(parseFloat(args.popup.position.Y))) {
        this.popupObj.relateTo = this.anchor = document.body;
        this.popupObj.targetType = "container";
      }
      if (!isNaN(parseFloat(args.popup.position.X))) {
        this.popupObj.offsetX = parseFloat(args.popup.position.X);
      }
      if (!isNaN(parseFloat(args.popup.position.Y))) {
        this.popupObj.offsetY = parseFloat(args.popup.position.Y);
      }
      if (!Browser.isDevice) {
        switch (args.popup.position.X) {
          case "left":
            break;
          case "right":
            args.popup.offsetX = this.containerStyle.width;
            break;
          case "center":
            args.popup.offsetX = -(this.containerStyle.width / 2);
            break;
        }
        switch (args.popup.position.Y) {
          case "top":
            break;
          case "bottom":
            break;
          case "center":
            args.popup.offsetY = -(this.containerStyle.height / 2);
            break;
        }
        if (args.popup.position.X === "center" && args.popup.position.Y === "center") {
          this.popupObj.relateTo = this.inputWrapper.container;
          this.anchor = this.inputElement;
          this.popupObj.targetType = "relative";
        }
      } else {
        if (args.popup.position.X === "center" && args.popup.position.Y === "center") {
          this.popupObj.relateTo = this.anchor = document.body;
          this.popupObj.offsetY = 0;
          this.popupObj.targetType = "container";
          this.popupObj.collision = {
            X: "fit",
            Y: "fit"
          };
        }
      }
    };
    TimePicker2.prototype.getPersistData = function() {
      var keyEntity = ["value"];
      return this.addOnPersist(keyEntity);
    };
    TimePicker2.prototype.getModuleName = function() {
      return "timepicker";
    };
    TimePicker2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "placeholder":
            Input.setPlaceholder(newProp.placeholder, this.inputElement);
            break;
          case "readonly":
            Input.setReadonly(this.readonly, this.inputElement, this.floatLabelType);
            if (this.readonly) {
              this.hide();
            }
            this.setTimeAllowEdit();
            break;
          case "enabled":
            this.setProperties({
              enabled: newProp.enabled
            }, true);
            this.setEnable();
            break;
          case "allowEdit":
            this.setTimeAllowEdit();
            break;
          case "enableRtl":
            this.setProperties({
              enableRtl: newProp.enableRtl
            }, true);
            this.setEnableRtl();
            break;
          case "cssClass":
            this.updateCssClass(newProp.cssClass, oldProp.cssClass);
            break;
          case "zIndex":
            this.setProperties({
              zIndex: newProp.zIndex
            }, true);
            this.setZIndex();
            break;
          case "htmlAttributes":
            this.updateHtmlAttributeToElement();
            this.updateHtmlAttributeToWrapper();
            this.checkAttributes(true);
            break;
          case "min":
          case "max":
            this.getProperty(newProp, prop);
            break;
          case "showClearButton":
            Input.setClearButton(this.showClearButton, this.inputElement, this.inputWrapper);
            this.bindClearEvent();
            break;
          case "locale":
            this.setProperties({
              locale: newProp.locale
            }, true);
            this.globalize = new Internationalization(this.locale);
            this.l10n.setLocale(this.locale);
            if (this.timeOptions && this.timeOptions.placeholder == null) {
              this.updatePlaceHolder();
            }
            this.setValue(this.value);
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
            }
            break;
          case "width":
            setStyleAttribute(this.inputWrapper.container, {
              "width": this.setWidth(newProp.width)
            });
            this.containerStyle = this.inputWrapper.container.getBoundingClientRect();
            Input.calculateWidth(this.inputElement, this.inputWrapper.container);
            if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
              this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
            }
            break;
          case "format":
            this.setProperties({
              format: newProp.format
            }, true);
            this.checkTimeFormat();
            this.setValue(this.value);
            if (this.enableMask) {
              this.createMask();
              if (!this.value) {
                this.updateInputValue(this.maskedDateValue);
              }
            }
            break;
          case "value":
            this.invalidValueString = null;
            this.checkInvalidValue(newProp.value);
            newProp.value = this.value;
            if (!this.invalidValueString) {
              if (typeof newProp.value === "string") {
                this.setProperties({
                  value: this.checkDateValue(new Date(newProp.value))
                }, true);
                newProp.value = this.value;
              } else {
                if ((newProp.value && +(/* @__PURE__ */ new Date(+newProp.value)).setMilliseconds(0)) !== +this.value) {
                  newProp.value = this.checkDateValue(/* @__PURE__ */ new Date("" + newProp.value));
                }
              }
              this.initValue = newProp.value;
              newProp.value = this.compareFormatChange(this.checkValue(newProp.value));
            } else {
              this.updateInputValue(this.invalidValueString);
              this.checkErrorState(this.invalidValueString);
            }
            if (this.enableMask && isNullOrUndefined(newProp.value)) {
              this.updateInputValue(this.maskedDateValue);
              this.checkErrorState(this.maskedDateValue);
            }
            this.checkValueChange(null, false);
            if (this.isPopupOpen()) {
              this.setScrollPosition();
            }
            if (this.isAngular && this.preventChange) {
              this.preventChange = false;
            }
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
            }
            break;
          case "floatLabelType":
            this.floatLabelType = newProp.floatLabelType;
            Input.removeFloating(this.inputWrapper);
            Input.addFloating(this.inputElement, this.floatLabelType, this.placeholder);
            if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
              this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
            }
            break;
          case "strictMode":
            this.invalidValueString = null;
            if (newProp.strictMode) {
              this.checkErrorState(null);
            }
            this.setProperties({
              strictMode: newProp.strictMode
            }, true);
            this.checkValue(this.inputElement.value);
            this.checkValueChange(null, false);
            break;
          case "scrollTo":
            if (this.checkDateValue(new Date(this.checkInValue(newProp.scrollTo)))) {
              if (this.popupWrapper) {
                this.setScrollTo();
              }
              this.setProperties({
                scrollTo: this.checkDateValue(new Date(this.checkInValue(newProp.scrollTo)))
              }, true);
            } else {
              this.setProperties({
                scrollTo: null
              }, true);
            }
            break;
          case "enableMask":
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
              this.updateInputValue(this.maskedDateValue);
            } else {
              if (this.inputElement.value === this.maskedDateValue) {
                this.updateInputValue("");
              }
            }
            break;
        }
      }
    };
    TimePicker2.prototype.checkInValue = function(inValue) {
      if (inValue instanceof Date) {
        return inValue.toUTCString();
      } else {
        return "" + inValue;
      }
    };
    __decorate49([Property(null)], TimePicker2.prototype, "width", void 0);
    __decorate49([Property(null)], TimePicker2.prototype, "cssClass", void 0);
    __decorate49([Property(false)], TimePicker2.prototype, "strictMode", void 0);
    __decorate49([Property(null)], TimePicker2.prototype, "keyConfigs", void 0);
    __decorate49([Property(null)], TimePicker2.prototype, "format", void 0);
    __decorate49([Property(true)], TimePicker2.prototype, "enabled", void 0);
    __decorate49([Property(false)], TimePicker2.prototype, "fullScreenMode", void 0);
    __decorate49([Property(false)], TimePicker2.prototype, "readonly", void 0);
    __decorate49([Property({})], TimePicker2.prototype, "htmlAttributes", void 0);
    __decorate49([Property("Never")], TimePicker2.prototype, "floatLabelType", void 0);
    __decorate49([Property(null)], TimePicker2.prototype, "placeholder", void 0);
    __decorate49([Property(1e3)], TimePicker2.prototype, "zIndex", void 0);
    __decorate49([Property(false)], TimePicker2.prototype, "enablePersistence", void 0);
    __decorate49([Property(true)], TimePicker2.prototype, "showClearButton", void 0);
    __decorate49([Property(30)], TimePicker2.prototype, "step", void 0);
    __decorate49([Property(null)], TimePicker2.prototype, "scrollTo", void 0);
    __decorate49([Property(null)], TimePicker2.prototype, "value", void 0);
    __decorate49([Property(null)], TimePicker2.prototype, "min", void 0);
    __decorate49([Property(null)], TimePicker2.prototype, "max", void 0);
    __decorate49([Property(true)], TimePicker2.prototype, "allowEdit", void 0);
    __decorate49([Property(false)], TimePicker2.prototype, "openOnFocus", void 0);
    __decorate49([Property(false)], TimePicker2.prototype, "enableMask", void 0);
    __decorate49([Property({
      day: "day",
      month: "month",
      year: "year",
      hour: "hour",
      minute: "minute",
      second: "second",
      dayOfTheWeek: "day of the week"
    })], TimePicker2.prototype, "maskPlaceholder", void 0);
    __decorate49([Property(null)], TimePicker2.prototype, "serverTimezoneOffset", void 0);
    __decorate49([Event()], TimePicker2.prototype, "change", void 0);
    __decorate49([Event()], TimePicker2.prototype, "created", void 0);
    __decorate49([Event()], TimePicker2.prototype, "destroyed", void 0);
    __decorate49([Event()], TimePicker2.prototype, "open", void 0);
    __decorate49([Event()], TimePicker2.prototype, "itemRender", void 0);
    __decorate49([Event()], TimePicker2.prototype, "close", void 0);
    __decorate49([Event()], TimePicker2.prototype, "cleared", void 0);
    __decorate49([Event()], TimePicker2.prototype, "blur", void 0);
    __decorate49([Event()], TimePicker2.prototype, "focus", void 0);
    TimePicker2 = __decorate49([NotifyPropertyChanges], TimePicker2);
    return TimePicker2;
  }(Component)
);

// node_modules/@syncfusion/ej2-calendars/src/datetimepicker/datetimepicker.js
var __extends52 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate50 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DATEWRAPPER2 = "e-date-wrapper";
var DATEPICKERROOT = "e-datepicker";
var DATETIMEWRAPPER = "e-datetime-wrapper";
var DAY2 = (/* @__PURE__ */ new Date()).getDate();
var MONTH3 = (/* @__PURE__ */ new Date()).getMonth();
var YEAR3 = (/* @__PURE__ */ new Date()).getFullYear();
var HOUR = (/* @__PURE__ */ new Date()).getHours();
var MINUTE = (/* @__PURE__ */ new Date()).getMinutes();
var SECOND = (/* @__PURE__ */ new Date()).getSeconds();
var MILLISECOND = (/* @__PURE__ */ new Date()).getMilliseconds();
var ROOT11 = "e-datetimepicker";
var DATETIMEPOPUPWRAPPER = "e-datetimepopup-wrapper";
var INPUTWRAPPER3 = "e-input-group-icon";
var POPUP5 = "e-popup";
var TIMEICON = "e-time-icon";
var INPUTFOCUS3 = "e-input-focus";
var POPUPDIMENSION2 = "250px";
var ICONANIMATION2 = "e-icon-anim";
var DISABLED13 = "e-disabled";
var ERROR6 = "e-error";
var CONTENT5 = "e-content";
var NAVIGATION2 = "e-navigation";
var ACTIVE5 = "e-active";
var HOVER4 = "e-hover";
var ICONS3 = "e-icons";
var HALFPOSITION2 = 2;
var LISTCLASS3 = "e-list-item";
var ANIMATIONDURATION2 = 100;
var OVERFLOW4 = "e-time-overflow";
var DateTimePicker = (
  /** @class */
  function(_super) {
    __extends52(DateTimePicker2, _super);
    function DateTimePicker2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.valueWithMinutes = null;
      _this.scrollInvoked = false;
      _this.moduleName = _this.getModuleName();
      _this.formatRegex = /dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yyy|yy|y|'[^']*'|'[^']*'/g;
      _this.dateFormatString = "";
      _this.dateTimeOptions = options;
      return _this;
    }
    DateTimePicker2.prototype.focusHandler = function() {
      if (!this.enabled) {
        return;
      }
      addClass([this.inputWrapper.container], INPUTFOCUS3);
    };
    DateTimePicker2.prototype.focusIn = function() {
      _super.prototype.focusIn.call(this);
    };
    DateTimePicker2.prototype.focusOut = function() {
      if (document.activeElement === this.inputElement) {
        this.inputElement.blur();
        removeClass([this.inputWrapper.container], [INPUTFOCUS3]);
      }
    };
    DateTimePicker2.prototype.blurHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.isTimePopupOpen() && this.isPreventBlur) {
        this.inputElement.focus();
        return;
      }
      removeClass([this.inputWrapper.container], INPUTFOCUS3);
      var blurArguments = {
        model: this
      };
      if (this.isTimePopupOpen()) {
        this.hide(e);
      }
      this.trigger("blur", blurArguments);
    };
    DateTimePicker2.prototype.destroy = function() {
      if (this.showClearButton) {
        this.clearButton = document.getElementsByClassName("e-clear-icon")[0];
      }
      if (this.popupObject && this.popupObject.element.classList.contains(POPUP5)) {
        this.popupObject.destroy();
        detach(this.dateTimeWrapper);
        this.dateTimeWrapper = void 0;
        this.liCollections = this.timeCollections = [];
        if (!isNullOrUndefined(this.rippleFn)) {
          this.rippleFn();
        }
      }
      var ariaAttribute = {
        "aria-live": "assertive",
        "aria-atomic": "true",
        "aria-invalid": "false",
        "autocorrect": "off",
        "autocapitalize": "off",
        "spellcheck": "false",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off"
      };
      if (this.inputElement) {
        Input.removeAttributes(ariaAttribute, this.inputElement);
      }
      if (this.isCalendar()) {
        if (this.popupWrapper) {
          detach(this.popupWrapper);
        }
        this.popupObject = this.popupWrapper = null;
        this.keyboardHandler.destroy();
      }
      this.unBindInputEvents();
      this.liCollections = null;
      this.rippleFn = null;
      this.selectedElement = null;
      this.listTag = null;
      this.timeIcon = null;
      this.popupObject = null;
      this.preventArgs = null;
      this.keyboardModule = null;
      Input.destroy({
        element: this.inputElement,
        floatLabelType: this.floatLabelType,
        properties: this.properties
      }, this.clearButton);
      _super.prototype.destroy.call(this);
    };
    DateTimePicker2.prototype.render = function() {
      this.timekeyConfigure = {
        enter: "enter",
        escape: "escape",
        end: "end",
        tab: "tab",
        home: "home",
        down: "downarrow",
        up: "uparrow",
        left: "leftarrow",
        right: "rightarrow",
        open: "alt+downarrow",
        close: "alt+uparrow"
      };
      this.valueWithMinutes = null;
      this.previousDateTime = null;
      this.isPreventBlur = false;
      this.cloneElement = this.element.cloneNode(true);
      this.dateTimeFormat = this.cldrDateTimeFormat();
      this.initValue = this.value;
      if (typeof this.min === "string") {
        this.min = this.checkDateValue(new Date(this.min));
      }
      if (typeof this.max === "string") {
        this.max = this.checkDateValue(new Date(this.max));
      }
      if (typeof this.minTime === "string") {
        this.minTime = this.checkDateValue(new Date(this.minTime));
      }
      if (typeof this.maxTime === "string") {
        this.maxTime = this.checkDateValue(new Date(this.maxTime));
      }
      if (!isNullOrUndefined(closest(this.element, "fieldset")) && closest(this.element, "fieldset").disabled) {
        this.enabled = false;
      }
      _super.prototype.updateHtmlAttributeToElement.call(this);
      this.checkAttributes(false);
      var localeText = {
        placeholder: this.placeholder
      };
      this.l10n = new L10n("datetimepicker", localeText, this.locale);
      this.setProperties({
        placeholder: this.placeholder || this.l10n.getConstant("placeholder")
      }, true);
      _super.prototype.render.call(this);
      this.createInputElement();
      _super.prototype.updateHtmlAttributeToWrapper.call(this);
      this.bindInputEvents();
      if (this.enableMask) {
        this.notify("createMask", {
          module: "MaskedDateTime"
        });
      }
      this.setValue(true);
      if (this.enableMask && !this.value && this.maskedDateValue && (this.floatLabelType === "Always" || !this.floatLabelType || !this.placeholder)) {
        Input.setValue(this.maskedDateValue, this.inputElement, this.floatLabelType, this.showClearButton);
      }
      this.setProperties({
        scrollTo: this.checkDateValue(new Date(this.checkValue(this.scrollTo)))
      }, true);
      this.previousDateTime = this.value && /* @__PURE__ */ new Date(+this.value);
      if (this.element.tagName === "EJS-DATETIMEPICKER") {
        this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : "0";
        this.element.removeAttribute("tabindex");
        if (!this.enabled) {
          this.inputElement.tabIndex = -1;
        }
      }
      if (this.floatLabelType !== "Never") {
        Input.calculateWidth(this.inputElement, this.inputWrapper.container);
      }
      if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
        this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-date-time-icon");
      }
      this.renderComplete();
    };
    DateTimePicker2.prototype.setValue = function(isDynamic) {
      if (isDynamic === void 0) {
        isDynamic = false;
      }
      this.initValue = this.validateMinMaxRange(this.value);
      if (!this.strictMode && this.isDateObject(this.initValue)) {
        var value = this.validateMinMaxRange(this.initValue);
        Input.setValue(this.getFormattedValue(value), this.inputElement, this.floatLabelType, this.showClearButton);
        this.setProperties({
          value
        }, true);
      } else {
        if (isNullOrUndefined(this.value)) {
          this.initValue = null;
          this.setProperties({
            value: null
          }, true);
        }
      }
      this.valueWithMinutes = this.value;
      _super.prototype.updateInput.call(this, isDynamic);
    };
    DateTimePicker2.prototype.validateMinMaxRange = function(value) {
      var result = value;
      if (this.isDateObject(value)) {
        result = this.validateValue(value);
      } else {
        if (+this.min > +this.max) {
          this.disablePopupButton(true);
        }
      }
      this.checkValidState(result);
      return result;
    };
    DateTimePicker2.prototype.checkValidState = function(value) {
      this.isValidState = true;
      if (!this.strictMode) {
        if (+value > +this.max || +value < +this.min || !this.isValidTime(value)) {
          this.isValidState = false;
        }
      }
      this.checkErrorState();
    };
    DateTimePicker2.prototype.checkErrorState = function() {
      if (this.isValidState) {
        removeClass([this.inputWrapper.container], ERROR6);
      } else {
        addClass([this.inputWrapper.container], ERROR6);
      }
      attributes(this.inputElement, {
        "aria-invalid": this.isValidState ? "false" : "true"
      });
    };
    DateTimePicker2.prototype.isValidTime = function(value) {
      if (value != null && (this.minTime || this.maxTime)) {
        var minTimeValue = void 0;
        var maxTimeValue = void 0;
        var maxValue = void 0;
        var minValue = void 0;
        var valueTime = value.getHours() * 36e5 + value.getMinutes() * 6e4 + value.getSeconds() * 1e3 + value.getMilliseconds();
        if (this.minTime) {
          minTimeValue = this.minTime.getHours() * 36e5 + this.minTime.getMinutes() * 6e4 + this.minTime.getSeconds() * 1e3 + this.minTime.getMilliseconds();
        }
        if (this.maxTime) {
          maxTimeValue = this.maxTime.getHours() * 36e5 + this.maxTime.getMinutes() * 6e4 + this.maxTime.getSeconds() * 1e3 + this.maxTime.getMilliseconds();
        }
        if (this.min && +value.getDate() === +this.min.getDate() && +value.getMonth() === +this.min.getMonth() && +value.getFullYear() === +this.min.getFullYear()) {
          minValue = this.min.getHours() * 36e5 + this.min.getMinutes() * 6e4 + this.min.getSeconds() * 1e3 + this.min.getMilliseconds();
          minTimeValue = minTimeValue < minValue ? minValue : minTimeValue;
        }
        if (this.max && +value.getDate() === +this.max.getDate() && +value.getMonth() === +this.max.getMonth() && +this.max.getFullYear() === +this.max.getFullYear()) {
          maxValue = this.max.getHours() * 36e5 + this.max.getMinutes() * 6e4 + this.max.getSeconds() * 1e3 + this.max.getMilliseconds();
          maxTimeValue = maxTimeValue > maxValue ? maxValue : maxTimeValue;
        }
        if (this.strictMode) {
          var newValue = void 0;
          if (minTimeValue && valueTime < minTimeValue) {
            newValue = new Date(value.getFullYear(), value.getMonth(), value.getDate(), this.minTime.getHours(), this.minTime.getMinutes(), this.minTime.getSeconds(), this.minTime.getMilliseconds());
            this.setProperties({
              value: newValue
            }, true);
            this.changedArgs = {
              value: this.value
            };
          } else if (maxTimeValue && valueTime > maxTimeValue) {
            newValue = new Date(value.getFullYear(), value.getMonth(), value.getDate(), this.maxTime.getHours(), this.maxTime.getMinutes(), this.maxTime.getSeconds(), this.maxTime.getMilliseconds());
            this.setProperties({
              value: newValue
            }, true);
            this.changedArgs = {
              value: this.value
            };
          }
          return true;
        } else {
          return !(minTimeValue && valueTime < minTimeValue || maxTimeValue && valueTime > maxTimeValue);
        }
      }
      return true;
    };
    DateTimePicker2.prototype.validateValue = function(value) {
      var dateVal = value;
      if (this.strictMode) {
        if (+this.min > +this.max) {
          this.disablePopupButton(true);
          dateVal = this.max;
        } else if (+value < +this.min) {
          dateVal = this.min;
        } else if (+value > +this.max) {
          dateVal = this.max;
        }
      } else {
        if (+this.min > +this.max) {
          this.disablePopupButton(true);
          dateVal = value;
        }
      }
      return dateVal;
    };
    DateTimePicker2.prototype.disablePopupButton = function(isDisable) {
      if (isDisable) {
        addClass([this.inputWrapper.buttons[0], this.timeIcon], DISABLED13);
        this.hide();
      } else {
        removeClass([this.inputWrapper.buttons[0], this.timeIcon], DISABLED13);
      }
    };
    DateTimePicker2.prototype.getFormattedValue = function(value) {
      var dateOptions;
      if (!isNullOrUndefined(value)) {
        if (this.calendarMode === "Gregorian") {
          dateOptions = {
            format: this.cldrDateTimeFormat(),
            type: "dateTime",
            skeleton: "yMd"
          };
        } else {
          dateOptions = {
            format: this.cldrDateTimeFormat(),
            type: "dateTime",
            skeleton: "yMd",
            calendar: "islamic"
          };
        }
        return this.globalize.formatDate(value, dateOptions);
      } else {
        return null;
      }
    };
    DateTimePicker2.prototype.isDateObject = function(value) {
      return !isNullOrUndefined(value) && !isNaN(+value) ? true : false;
    };
    DateTimePicker2.prototype.createInputElement = function() {
      removeClass([this.inputElement], DATEPICKERROOT);
      removeClass([this.inputWrapper.container], DATEWRAPPER2);
      addClass([this.inputWrapper.container], DATETIMEWRAPPER);
      addClass([this.inputElement], ROOT11);
      this.renderTimeIcon();
    };
    DateTimePicker2.prototype.renderTimeIcon = function() {
      this.timeIcon = Input.appendSpan(INPUTWRAPPER3 + " " + TIMEICON + " " + ICONS3, this.inputWrapper.container);
    };
    DateTimePicker2.prototype.bindInputEvents = function() {
      EventHandler.add(this.timeIcon, "mousedown", this.timeHandler, this);
      EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.dateHandler, this);
      EventHandler.add(this.inputElement, "blur", this.blurHandler, this);
      EventHandler.add(this.inputElement, "focus", this.focusHandler, this);
      this.defaultKeyConfigs = extend(this.defaultKeyConfigs, this.keyConfigs);
      this.keyboardHandler = new KeyboardEvents(this.inputElement, {
        eventName: "keydown",
        keyAction: this.inputKeyAction.bind(this),
        keyConfigs: this.defaultKeyConfigs
      });
    };
    DateTimePicker2.prototype.unBindInputEvents = function() {
      EventHandler.remove(this.timeIcon, "mousedown touchstart", this.timeHandler);
      EventHandler.remove(this.inputWrapper.buttons[0], "mousedown touchstart", this.dateHandler);
      if (this.inputElement) {
        EventHandler.remove(this.inputElement, "blur", this.blurHandler);
        EventHandler.remove(this.inputElement, "focus", this.focusHandler);
      }
      if (this.keyboardHandler) {
        this.keyboardHandler.destroy();
      }
    };
    DateTimePicker2.prototype.cldrTimeFormat = function() {
      var cldrTime;
      if (this.isNullOrEmpty(this.timeFormat)) {
        if (this.locale === "en" || this.locale === "en-US") {
          cldrTime = getValue("timeFormats.short", getDefaultDateObject());
        } else {
          cldrTime = this.getCultureTimeObject(cldrData, "" + this.locale);
        }
      } else {
        cldrTime = this.timeFormat;
      }
      return cldrTime;
    };
    DateTimePicker2.prototype.cldrDateTimeFormat = function() {
      var cldrTime;
      var culture = new Internationalization(this.locale);
      var dateFormat = culture.getDatePattern({
        skeleton: "yMd"
      });
      if (this.isNullOrEmpty(this.formatString)) {
        cldrTime = dateFormat + " " + this.getCldrFormat("time");
      } else {
        cldrTime = this.formatString;
      }
      return cldrTime;
    };
    DateTimePicker2.prototype.getCldrFormat = function(type) {
      var cldrDateTime;
      if (this.locale === "en" || this.locale === "en-US") {
        cldrDateTime = getValue("timeFormats.short", getDefaultDateObject());
      } else {
        cldrDateTime = this.getCultureTimeObject(cldrData, "" + this.locale);
      }
      return cldrDateTime;
    };
    DateTimePicker2.prototype.isNullOrEmpty = function(value) {
      if (isNullOrUndefined(value) || typeof value === "string" && value.trim() === "") {
        return true;
      } else {
        return false;
      }
    };
    DateTimePicker2.prototype.getCultureTimeObject = function(ld, c) {
      if (this.calendarMode === "Gregorian") {
        return getValue("main." + this.locale + ".dates.calendars.gregorian.timeFormats.short", ld);
      } else {
        return getValue("main." + this.locale + ".dates.calendars.islamic.timeFormats.short", ld);
      }
    };
    DateTimePicker2.prototype.timeHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      this.isIconClicked = true;
      if (Browser.isDevice) {
        this.inputElement.setAttribute("readonly", "");
      }
      if (e.currentTarget === this.timeIcon) {
        e.preventDefault();
      }
      if (this.enabled && !this.readonly) {
        if (this.isDatePopupOpen()) {
          _super.prototype.hide.call(this, e);
        }
        if (this.isTimePopupOpen()) {
          this.closePopup(e);
        } else {
          this.inputElement.focus();
          this.popupCreation("time", e);
          addClass([this.inputWrapper.container], [INPUTFOCUS3]);
        }
      }
      this.isIconClicked = false;
    };
    DateTimePicker2.prototype.dateHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (e.currentTarget === this.inputWrapper.buttons[0]) {
        e.preventDefault();
      }
      if (this.enabled && !this.readonly) {
        if (this.isTimePopupOpen()) {
          this.closePopup(e);
        }
        if (!isNullOrUndefined(this.popupWrapper)) {
          this.popupCreation("date", e);
        }
      }
    };
    DateTimePicker2.prototype.show = function(type, e) {
      if (this.enabled && this.readonly || !this.enabled) {
        return;
      } else {
        if (type === "time" && !this.dateTimeWrapper) {
          if (this.isDatePopupOpen()) {
            this.hide(e);
          }
          this.popupCreation("time", e);
        } else if (!this.popupObj) {
          if (this.isTimePopupOpen()) {
            this.hide(e);
          }
          _super.prototype.show.call(this);
          this.popupCreation("date", e);
        }
      }
    };
    DateTimePicker2.prototype.toggle = function(e) {
      if (this.isDatePopupOpen()) {
        _super.prototype.hide.call(this, e);
        this.show("time", null);
      } else if (this.isTimePopupOpen()) {
        this.hide(e);
        _super.prototype.show.call(this, null, e);
        this.popupCreation("date", null);
      } else {
        this.show(null, e);
      }
    };
    DateTimePicker2.prototype.listCreation = function() {
      var dateObject;
      if (this.calendarMode === "Gregorian") {
        this.cldrDateTimeFormat().replace(this.formatRegex, this.TimePopupFormat());
        if (this.dateFormatString === "") {
          this.dateFormatString = this.cldrDateTimeFormat();
        }
        dateObject = this.globalize.parseDate(this.getAmPmValue(this.inputElement.value), {
          format: this.dateFormatString,
          type: "datetime"
        });
      } else {
        dateObject = this.globalize.parseDate(this.getAmPmValue(this.inputElement.value), {
          format: this.cldrDateTimeFormat(),
          type: "datetime",
          calendar: "islamic"
        });
      }
      var value = isNullOrUndefined(this.value) ? this.inputElement.value !== "" ? dateObject : /* @__PURE__ */ new Date() : this.value;
      this.valueWithMinutes = value;
      this.listWrapper = createElement("div", {
        className: CONTENT5,
        attrs: {
          "tabindex": "0"
        }
      });
      var min = this.startTime(value);
      var max = this.endTime(value);
      var listDetails = TimePickerBase.createListItems(this.createElement, min, max, this.globalize, this.cldrTimeFormat(), this.step);
      this.timeCollections = listDetails.collection;
      this.listTag = listDetails.list;
      attributes(this.listTag, {
        "role": "listbox",
        "aria-hidden": "false",
        "id": this.element.id + "_options"
      });
      append([listDetails.list], this.listWrapper);
      this.wireTimeListEvents();
      var rippleModel = {
        duration: 300,
        selector: "." + LISTCLASS3
      };
      this.rippleFn = rippleEffect(this.listWrapper, rippleModel);
      this.liCollections = this.listWrapper.querySelectorAll("." + LISTCLASS3);
    };
    DateTimePicker2.prototype.popupCreation = function(type, e) {
      if (Browser.isDevice) {
        this.element.setAttribute("readonly", "readonly");
      }
      if (type === "date") {
        if (!this.readonly && this.popupWrapper) {
          addClass([this.popupWrapper], DATETIMEPOPUPWRAPPER);
          attributes(this.popupWrapper, {
            "id": this.element.id + "_options"
          });
        }
      } else {
        if (!this.readonly) {
          var dateTimeWrapperElement = createElement("div", {
            className: ROOT11 + " " + POPUP5,
            attrs: {
              "id": this.element.id + "_timepopup"
            }
          });
          dateTimeWrapperElement.style.cssText = "visibility: hidden; display: block;";
          this.dateTimeWrapper = dateTimeWrapperElement;
          if (!isNullOrUndefined(this.cssClass)) {
            this.dateTimeWrapper.className += " " + this.cssClass;
          }
          if (!isNullOrUndefined(this.step) && this.step > 0) {
            this.listCreation();
            append([this.listWrapper], this.dateTimeWrapper);
          }
          document.body.appendChild(this.dateTimeWrapper);
          this.addTimeSelection();
          this.renderPopup();
          this.setTimeScrollPosition();
          this.openPopup(e);
          if (!Browser.isDevice || Browser.isDevice && !this.fullScreenMode) {
            this.popupObject.refreshPosition(this.inputElement);
          }
          if (Browser.isDevice) {
            this.modelWrapper.style.zIndex = (this.popupObject.zIndex - 1).toString();
            if (this.fullScreenMode) {
              this.dateTimeWrapper.style.left = "0px";
            }
          }
        }
      }
    };
    DateTimePicker2.prototype.openPopup = function(e) {
      var _this = this;
      this.preventArgs = {
        cancel: false,
        popup: this.popupObject,
        event: e || null
      };
      var eventArgs = this.preventArgs;
      this.trigger("open", eventArgs, function(eventArgs2) {
        _this.preventArgs = eventArgs2;
        if (!_this.preventArgs.cancel && !_this.readonly) {
          var openAnimation = {
            name: "FadeIn",
            duration: ANIMATIONDURATION2
          };
          if (_this.zIndex === 1e3) {
            _this.popupObject.show(new Animation(openAnimation), _this.element);
          } else {
            _this.popupObject.show(new Animation(openAnimation), null);
          }
          addClass([_this.inputWrapper.container], [ICONANIMATION2]);
          attributes(_this.inputElement, {
            "aria-expanded": "true"
          });
          attributes(_this.inputElement, {
            "aria-owns": _this.inputElement.id + "_options"
          });
          attributes(_this.inputElement, {
            "aria-controls": _this.inputElement.id
          });
          EventHandler.add(document, "mousedown touchstart", _this.documentClickHandler, _this);
        }
      });
    };
    DateTimePicker2.prototype.documentClickHandler = function(event2) {
      var target = event2.target;
      if (!isNullOrUndefined(this.popupObject) && (this.inputWrapper.container.contains(target) && event2.type !== "mousedown" || this.popupObject.element && this.popupObject.element.contains(target)) && event2.type !== "touchstart") {
        event2.preventDefault();
      }
      if (!closest(target, '[id="' + (this.popupObject && this.popupObject.element.id + '"]')) && target !== this.inputElement && target !== this.timeIcon && !isNullOrUndefined(this.inputWrapper) && target !== this.inputWrapper.container) {
        if (this.isTimePopupOpen()) {
          this.hide(event2);
          if (target.classList.contains("e-dlg-overlay")) {
            event2.preventDefault();
          } else {
            this.focusOut();
          }
        }
      } else if (target !== this.inputElement) {
        if (!Browser.isDevice) {
          this.isPreventBlur = document.activeElement === this.inputElement && (Browser.isIE || Browser.info.name === "edge") && target === this.popupObject.element;
        }
      }
    };
    DateTimePicker2.prototype.isTimePopupOpen = function() {
      return this.dateTimeWrapper && this.dateTimeWrapper.classList.contains("" + ROOT11) ? true : false;
    };
    DateTimePicker2.prototype.isDatePopupOpen = function() {
      return this.popupWrapper && this.popupWrapper.classList.contains("" + DATETIMEPOPUPWRAPPER) ? true : false;
    };
    DateTimePicker2.prototype.renderPopup = function() {
      var _this = this;
      this.containerStyle = this.inputWrapper.container.getBoundingClientRect();
      if (Browser.isDevice) {
        this.timeModal = createElement("div");
        this.timeModal.className = "" + ROOT11 + " e-time-modal";
        document.body.className += " " + OVERFLOW4;
        this.timeModal.style.display = "block";
        document.body.appendChild(this.timeModal);
      }
      if (Browser.isDevice) {
        this.modelWrapper = createElement("div", {
          className: "e-datetime-mob-popup-wrap"
        });
        this.modelWrapper.appendChild(this.dateTimeWrapper);
        var dlgOverlay = createElement("div", {
          className: "e-dlg-overlay"
        });
        dlgOverlay.style.zIndex = (this.zIndex - 1).toString();
        this.modelWrapper.appendChild(dlgOverlay);
        document.body.appendChild(this.modelWrapper);
      }
      var offset = 4;
      this.popupObject = new Popup(this.dateTimeWrapper, {
        width: this.setPopupWidth(),
        zIndex: this.zIndex,
        targetType: "container",
        collision: Browser.isDevice ? {
          X: "fit",
          Y: "fit"
        } : {
          X: "flip",
          Y: "flip"
        },
        relateTo: Browser.isDevice ? document.body : this.inputWrapper.container,
        position: Browser.isDevice ? {
          X: "center",
          Y: "center"
        } : {
          X: "left",
          Y: "bottom"
        },
        enableRtl: this.enableRtl,
        offsetY: offset,
        open: function() {
          _this.dateTimeWrapper.style.visibility = "visible";
          addClass([_this.timeIcon], ACTIVE5);
          if (!Browser.isDevice) {
            _this.timekeyConfigure = extend(_this.timekeyConfigure, _this.keyConfigs);
            _this.inputEvent = new KeyboardEvents(_this.inputWrapper.container, {
              keyAction: _this.timeKeyActionHandle.bind(_this),
              keyConfigs: _this.timekeyConfigure,
              eventName: "keydown"
            });
          }
        },
        close: function() {
          removeClass([_this.timeIcon], ACTIVE5);
          _this.unWireTimeListEvents();
          _this.inputElement.removeAttribute("aria-activedescendant");
          remove(_this.popupObject.element);
          _this.popupObject.destroy();
          _this.dateTimeWrapper.innerHTML = "";
          if (_this.modelWrapper) {
            remove(_this.modelWrapper);
          }
          _this.listWrapper = _this.dateTimeWrapper = void 0;
          if (_this.inputEvent) {
            _this.inputEvent.destroy();
          }
        },
        targetExitViewport: function() {
          if (!Browser.isDevice) {
            _this.hide();
          }
        }
      });
      if (Browser.isDevice && this.fullScreenMode) {
        this.popupObject.element.style.maxHeight = "100%";
        this.popupObject.element.style.width = "100%";
      } else {
        this.popupObject.element.style.maxHeight = POPUPDIMENSION2;
      }
      if (Browser.isDevice && this.fullScreenMode) {
        var modelHeader = this.createElement("div", {
          className: "e-model-header"
        });
        var modelTitleSpan = this.createElement("span", {
          className: "e-model-title"
        });
        modelTitleSpan.textContent = "Select time";
        var modelCloseIcon = this.createElement("span", {
          className: "e-popup-close"
        });
        EventHandler.add(modelCloseIcon, "mousedown touchstart", this.dateTimeCloseHandler, this);
        modelHeader.appendChild(modelCloseIcon);
        modelHeader.appendChild(modelTitleSpan);
        this.dateTimeWrapper.insertBefore(modelHeader, this.dateTimeWrapper.firstElementChild);
      }
    };
    DateTimePicker2.prototype.dateTimeCloseHandler = function(e) {
      this.hide();
    };
    DateTimePicker2.prototype.setDimension = function(width) {
      if (typeof width === "number") {
        width = formatUnit(width);
      } else if (typeof width === "string") {
        width = width;
      } else {
        width = "100%";
      }
      return width;
    };
    DateTimePicker2.prototype.setPopupWidth = function() {
      var width = this.setDimension(this.width);
      if (width.indexOf("%") > -1) {
        var inputWidth = this.containerStyle.width * parseFloat(width) / 100;
        width = inputWidth.toString() + "px";
      }
      return width;
    };
    DateTimePicker2.prototype.wireTimeListEvents = function() {
      EventHandler.add(this.listWrapper, "click", this.onMouseClick, this);
      if (!Browser.isDevice) {
        EventHandler.add(this.listWrapper, "mouseover", this.onMouseOver, this);
        EventHandler.add(this.listWrapper, "mouseout", this.onMouseLeave, this);
      }
    };
    DateTimePicker2.prototype.unWireTimeListEvents = function() {
      if (this.listWrapper) {
        EventHandler.remove(this.listWrapper, "click", this.onMouseClick);
        EventHandler.remove(document, "mousedown touchstart", this.documentClickHandler);
        if (!Browser.isDevice) {
          EventHandler.add(this.listWrapper, "mouseover", this.onMouseOver, this);
          EventHandler.add(this.listWrapper, "mouseout", this.onMouseLeave, this);
        }
      }
    };
    DateTimePicker2.prototype.onMouseOver = function(event2) {
      var currentLi = closest(event2.target, "." + LISTCLASS3);
      this.setTimeHover(currentLi, HOVER4);
    };
    DateTimePicker2.prototype.onMouseLeave = function() {
      this.removeTimeHover(HOVER4);
    };
    DateTimePicker2.prototype.setTimeHover = function(li, className) {
      if (this.enabled && this.isValidLI(li) && !li.classList.contains(className)) {
        this.removeTimeHover(className);
        addClass([li], className);
      }
    };
    DateTimePicker2.prototype.getPopupHeight = function() {
      var height = parseInt(POPUPDIMENSION2, 10);
      var popupHeight = this.dateTimeWrapper.getBoundingClientRect().height;
      if (Browser.isDevice && this.fullScreenMode) {
        return popupHeight;
      } else {
        return popupHeight > height ? height : popupHeight;
      }
    };
    DateTimePicker2.prototype.changeEvent = function(e) {
      _super.prototype.changeEvent.call(this, e);
      if ((this.value && this.value.valueOf()) !== (this.previousDateTime && +this.previousDateTime.valueOf())) {
        this.valueWithMinutes = this.value;
        this.setInputValue("date");
        this.previousDateTime = this.value && /* @__PURE__ */ new Date(+this.value);
      }
    };
    DateTimePicker2.prototype.updateValue = function(e) {
      this.setInputValue("time");
      if (+this.previousDateTime !== +this.value) {
        this.changedArgs = {
          value: this.value,
          event: e || null,
          isInteracted: !isNullOrUndefined(e),
          element: this.element
        };
        this.addTimeSelection();
        this.trigger("change", this.changedArgs);
        this.previousDateTime = this.previousDate = this.value;
      }
    };
    DateTimePicker2.prototype.setTimeScrollPosition = function() {
      var popupElement = this.selectedElement;
      if (!isNullOrUndefined(popupElement)) {
        this.findScrollTop(popupElement);
      } else if (this.dateTimeWrapper && this.checkDateValue(this.scrollTo)) {
        this.setScrollTo();
      }
    };
    DateTimePicker2.prototype.findScrollTop = function(element2) {
      var listHeight = this.getPopupHeight();
      var nextElement = element2.nextElementSibling;
      var height = nextElement ? nextElement.offsetTop : element2.offsetTop;
      var lineHeight = element2.getBoundingClientRect().height;
      if (height + element2.offsetTop > listHeight) {
        if (Browser.isDevice && this.fullScreenMode) {
          var listContent = this.dateTimeWrapper.querySelector(".e-content");
          listContent.scrollTop = nextElement ? height - (listHeight / HALFPOSITION2 + lineHeight / HALFPOSITION2) : height;
        } else {
          this.dateTimeWrapper.scrollTop = nextElement ? height - (listHeight / HALFPOSITION2 + lineHeight / HALFPOSITION2) : height;
        }
      } else {
        this.dateTimeWrapper.scrollTop = 0;
      }
    };
    DateTimePicker2.prototype.setScrollTo = function() {
      var element2;
      var items = this.dateTimeWrapper.querySelectorAll("." + LISTCLASS3);
      if (items.length >= 0) {
        this.scrollInvoked = true;
        var initialTime = this.timeCollections[0];
        var scrollTime = this.getDateObject(this.checkDateValue(this.scrollTo)).getTime();
        element2 = items[Math.round((scrollTime - initialTime) / (this.step * 6e4))];
      } else {
        this.dateTimeWrapper.scrollTop = 0;
      }
      if (!isNullOrUndefined(element2)) {
        this.findScrollTop(element2);
      } else {
        this.dateTimeWrapper.scrollTop = 0;
      }
    };
    DateTimePicker2.prototype.setInputValue = function(type) {
      if (type === "date") {
        this.inputElement.value = this.previousElementValue = this.getFormattedValue(this.getFullDateTime());
        this.setProperties({
          value: this.getFullDateTime()
        }, true);
      } else {
        var tempVal = this.getFormattedValue(new Date(this.timeCollections[this.activeIndex]));
        Input.setValue(tempVal, this.inputElement, this.floatLabelType, this.showClearButton);
        this.previousElementValue = this.inputElement.value;
        this.setProperties({
          value: new Date(this.timeCollections[this.activeIndex])
        }, true);
        if (this.enableMask) {
          this.createMask();
        }
      }
      this.updateIconState();
    };
    DateTimePicker2.prototype.getFullDateTime = function() {
      var value = null;
      if (this.isDateObject(this.valueWithMinutes)) {
        value = this.combineDateTime(this.valueWithMinutes);
      } else {
        value = this.previousDate;
      }
      return this.validateMinMaxRange(value);
    };
    DateTimePicker2.prototype.createMask = function() {
      this.notify("createMask", {
        module: "MaskedDateTime"
      });
    };
    DateTimePicker2.prototype.combineDateTime = function(value) {
      if (this.isDateObject(value)) {
        var day = this.previousDate.getDate();
        var month = this.previousDate.getMonth();
        var year = this.previousDate.getFullYear();
        var hour = value.getHours();
        var minutes = value.getMinutes();
        var seconds = value.getSeconds();
        return new Date(year, month, day, hour, minutes, seconds);
      } else {
        return this.previousDate;
      }
    };
    DateTimePicker2.prototype.onMouseClick = function(event2) {
      var target = event2.target;
      var li = this.selectedElement = closest(target, "." + LISTCLASS3);
      if (li && li.classList.contains(LISTCLASS3)) {
        this.timeValue = li.getAttribute("data-value");
        this.hide(event2);
      }
      this.setSelection(li, event2);
    };
    DateTimePicker2.prototype.setSelection = function(li, event2) {
      if (this.isValidLI(li) && !li.classList.contains(ACTIVE5)) {
        this.selectedElement = li;
        var index = Array.prototype.slice.call(this.liCollections).indexOf(li);
        this.activeIndex = index;
        this.valueWithMinutes = new Date(this.timeCollections[this.activeIndex]);
        addClass([this.selectedElement], ACTIVE5);
        this.selectedElement.setAttribute("aria-selected", "true");
        this.updateValue(event2);
      }
    };
    DateTimePicker2.prototype.setTimeActiveClass = function() {
      var collections = isNullOrUndefined(this.dateTimeWrapper) ? this.listWrapper : this.dateTimeWrapper;
      if (!isNullOrUndefined(collections)) {
        var items = collections.querySelectorAll("." + LISTCLASS3);
        if (items.length) {
          for (var i = 0; i < items.length; i++) {
            if (this.timeCollections[i] === +this.valueWithMinutes) {
              items[i].setAttribute("aria-selected", "true");
              this.selectedElement = items[i];
              this.activeIndex = i;
              this.setTimeActiveDescendant();
              break;
            }
          }
        }
      }
    };
    DateTimePicker2.prototype.setTimeActiveDescendant = function() {
      if (!isNullOrUndefined(this.selectedElement) && this.value) {
        attributes(this.inputElement, {
          "aria-activedescendant": this.selectedElement.getAttribute("id")
        });
      } else {
        this.inputElement.removeAttribute("aria-activedescendant");
      }
    };
    DateTimePicker2.prototype.addTimeSelection = function() {
      this.selectedElement = null;
      this.removeTimeSelection();
      this.setTimeActiveClass();
      if (!isNullOrUndefined(this.selectedElement)) {
        addClass([this.selectedElement], ACTIVE5);
        this.selectedElement.setAttribute("aria-selected", "true");
      }
    };
    DateTimePicker2.prototype.removeTimeSelection = function() {
      this.removeTimeHover(HOVER4);
      if (!isNullOrUndefined(this.dateTimeWrapper)) {
        var items = this.dateTimeWrapper.querySelectorAll("." + ACTIVE5);
        if (items.length) {
          removeClass(items, ACTIVE5);
          items[0].removeAttribute("aria-selected");
        }
      }
    };
    DateTimePicker2.prototype.removeTimeHover = function(className) {
      var hoveredItem = this.getTimeHoverItem(className);
      if (hoveredItem && hoveredItem.length) {
        removeClass(hoveredItem, className);
      }
    };
    DateTimePicker2.prototype.getTimeHoverItem = function(className) {
      var collections = isNullOrUndefined(this.dateTimeWrapper) ? this.listWrapper : this.dateTimeWrapper;
      var hoveredItem;
      if (!isNullOrUndefined(collections)) {
        hoveredItem = collections.querySelectorAll("." + className);
      }
      return hoveredItem;
    };
    DateTimePicker2.prototype.isValidLI = function(li) {
      return li && li.classList.contains(LISTCLASS3) && !li.classList.contains(DISABLED13);
    };
    DateTimePicker2.prototype.calculateStartEnd = function(value, range, method) {
      var day = value.getDate();
      var month = value.getMonth();
      var year = value.getFullYear();
      var hours = value.getHours();
      var minutes = value.getMinutes();
      var seconds = value.getSeconds();
      var milliseconds = value.getMilliseconds();
      if (range) {
        if (method === "starttime") {
          return new Date(year, month, day, 0, 0, 0);
        } else {
          return new Date(year, month, day, 23, 59, 59);
        }
      } else {
        return new Date(year, month, day, hours, minutes, seconds, milliseconds);
      }
    };
    DateTimePicker2.prototype.startTime = function(date) {
      var tempStartValue;
      var start;
      var tempMin = this.min;
      var tempMax = this.max;
      var value = date === null ? /* @__PURE__ */ new Date() : date;
      var isModified = false;
      var startValue;
      if (this.minTime) {
        startValue = new Date(value.getFullYear(), value.getMonth(), value.getDate(), this.minTime.getHours(), this.minTime.getMinutes(), this.minTime.getSeconds(), this.minTime.getMilliseconds());
        isModified = true;
      } else {
        startValue = value;
      }
      if (+startValue.getDate() === +tempMin.getDate() && +startValue.getMonth() === +tempMin.getMonth() && +startValue.getFullYear() === +tempMin.getFullYear() || +new Date(startValue.getFullYear(), startValue.getMonth(), startValue.getDate()) <= +new Date(tempMin.getFullYear(), tempMin.getMonth(), tempMin.getDate())) {
        start = false;
        tempStartValue = tempMin;
        if (isModified && +new Date(startValue.getFullYear(), startValue.getMonth(), startValue.getDate(), startValue.getHours(), startValue.getMinutes(), startValue.getSeconds(), startValue.getMilliseconds()) >= +new Date(tempMin.getFullYear(), tempMin.getMonth(), tempMin.getDate(), tempMin.getHours(), tempMin.getMinutes(), tempMin.getSeconds(), tempMin.getMilliseconds())) {
          tempStartValue.setHours(startValue.getHours(), startValue.getMinutes(), startValue.getSeconds(), startValue.getMilliseconds());
        }
      } else if (+startValue < +tempMax && +startValue > +tempMin) {
        start = !isModified;
        tempStartValue = startValue;
      } else if (+startValue >= +tempMax) {
        start = true;
        tempStartValue = tempMax;
      }
      return this.calculateStartEnd(tempStartValue, start, "starttime");
    };
    DateTimePicker2.prototype.TimePopupFormat = function() {
      var format = "";
      var formatCount = 0;
      var proxy = this;
      function formatValueSpecifier(formattext) {
        switch (formattext) {
          case "d":
          case "dd":
          case "ddd":
          case "dddd":
          case "M":
          case "MM":
          case "MMM":
          case "MMMM":
          case "y":
          case "yy":
          case "yyy":
          case "yyyy":
            if (format === "") {
              format = format + formattext;
            } else {
              format = format + "/" + formattext;
            }
            formatCount = formatCount + 1;
            break;
        }
        if (formatCount > 2) {
          proxy.dateFormatString = format;
        }
        return format;
      }
      return formatValueSpecifier;
    };
    DateTimePicker2.prototype.endTime = function(date) {
      var tempEndValue;
      var end;
      var tempMax = this.max;
      var value = date === null ? /* @__PURE__ */ new Date() : date;
      var isModified = false;
      var endValue;
      if (this.maxTime) {
        endValue = new Date(value.getFullYear(), value.getMonth(), value.getDate(), this.maxTime.getHours(), this.maxTime.getMinutes(), this.maxTime.getSeconds(), this.maxTime.getMilliseconds());
        isModified = true;
      } else {
        endValue = value;
      }
      if (+endValue.getDate() === +tempMax.getDate() && +endValue.getMonth() === +tempMax.getMonth() && +endValue.getFullYear() === +tempMax.getFullYear() || +new Date(endValue.getUTCFullYear(), endValue.getMonth(), endValue.getDate()) >= +new Date(tempMax.getFullYear(), tempMax.getMonth(), tempMax.getDate())) {
        end = false;
        tempEndValue = this.max;
        if (isModified && +new Date(endValue.getUTCFullYear(), endValue.getMonth(), endValue.getDate(), endValue.getHours(), endValue.getMinutes(), endValue.getSeconds(), endValue.getMilliseconds()) <= +new Date(tempMax.getFullYear(), tempMax.getMonth(), tempMax.getDate(), tempMax.getHours(), tempMax.getMinutes(), tempMax.getSeconds(), tempMax.getMilliseconds())) {
          tempEndValue.setHours(endValue.getHours(), endValue.getMinutes(), endValue.getSeconds(), endValue.getMilliseconds());
        }
      } else if (+endValue < +this.max && +endValue > +this.min) {
        end = !isModified;
        tempEndValue = endValue;
      } else if (+endValue <= +this.min) {
        end = true;
        tempEndValue = this.min;
      }
      return this.calculateStartEnd(tempEndValue, end, "endtime");
    };
    DateTimePicker2.prototype.hide = function(e) {
      var _this = this;
      if (this.popupObj || this.dateTimeWrapper) {
        this.preventArgs = {
          cancel: false,
          popup: this.popupObj || this.popupObject,
          event: e || null
        };
        var eventArgs = this.preventArgs;
        if (isNullOrUndefined(this.popupObj)) {
          this.trigger("close", eventArgs, function(eventArgs2) {
            _this.dateTimeCloseEventCallback(e, eventArgs2);
          });
        } else {
          this.dateTimeCloseEventCallback(e, eventArgs);
        }
      } else {
        if (Browser.isDevice && this.allowEdit && !this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
        this.setAllowEdit();
      }
    };
    DateTimePicker2.prototype.dateTimeCloseEventCallback = function(e, eventArgs) {
      this.preventArgs = eventArgs;
      if (!this.preventArgs.cancel) {
        if (this.isDatePopupOpen()) {
          _super.prototype.hide.call(this, e);
        } else if (this.isTimePopupOpen()) {
          this.closePopup(e);
          removeClass([document.body], OVERFLOW4);
          if (Browser.isDevice && this.timeModal) {
            this.timeModal.style.display = "none";
            this.timeModal.outerHTML = "";
            this.timeModal = null;
          }
          this.setTimeActiveDescendant();
        }
      }
      if (Browser.isDevice && this.allowEdit && !this.readonly) {
        this.inputElement.removeAttribute("readonly");
      }
      this.setAllowEdit();
    };
    DateTimePicker2.prototype.closePopup = function(e) {
      if (this.isTimePopupOpen() && this.popupObject) {
        var animModel = {
          name: "FadeOut",
          duration: ANIMATIONDURATION2,
          delay: 0
        };
        this.popupObject.hide(new Animation(animModel));
        this.inputWrapper.container.classList.remove(ICONANIMATION2);
        attributes(this.inputElement, {
          "aria-expanded": "false"
        });
        this.inputElement.removeAttribute("aria-owns");
        this.inputElement.removeAttribute("aria-controls");
        EventHandler.remove(document, "mousedown touchstart", this.documentClickHandler);
      }
    };
    DateTimePicker2.prototype.preRender = function() {
      this.checkFormat();
      this.dateTimeFormat = this.cldrDateTimeFormat();
      _super.prototype.preRender.call(this);
      removeClass([this.inputElementCopy], [ROOT11]);
    };
    DateTimePicker2.prototype.getProperty = function(date, val) {
      if (val === "min") {
        this.setProperties({
          min: this.validateValue(date.min)
        }, true);
      } else {
        this.setProperties({
          max: this.validateValue(date.max)
        }, true);
      }
    };
    DateTimePicker2.prototype.checkAttributes = function(isDynamic) {
      var attributes2 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ["style", "name", "step", "disabled", "readonly", "value", "min", "max", "placeholder", "type"];
      var value;
      for (var _i = 0, attributes_1 = attributes2; _i < attributes_1.length; _i++) {
        var prop = attributes_1[_i];
        if (!isNullOrUndefined(this.inputElement.getAttribute(prop))) {
          switch (prop) {
            case "name":
              this.inputElement.setAttribute("name", this.inputElement.getAttribute(prop));
              break;
            case "step":
              this.step = parseInt(this.inputElement.getAttribute(prop), 10);
              break;
            case "readonly":
              if (isNullOrUndefined(this.dateTimeOptions) || this.dateTimeOptions["readonly"] === void 0 || isDynamic) {
                var readonly = this.inputElement.getAttribute(prop) === "disabled" || this.inputElement.getAttribute(prop) === "" || this.inputElement.getAttribute(prop) === "true" ? true : false;
                this.setProperties({
                  readonly
                }, !isDynamic);
              }
              break;
            case "placeholder":
              if (isNullOrUndefined(this.dateTimeOptions) || this.dateTimeOptions["placeholder"] === void 0 || isDynamic) {
                this.setProperties({
                  placeholder: this.inputElement.getAttribute(prop)
                }, !isDynamic);
              }
              break;
            case "min":
              if (isNullOrUndefined(this.dateTimeOptions) || this.dateTimeOptions["min"] === void 0 || isDynamic) {
                value = new Date(this.inputElement.getAttribute(prop));
                if (!this.isNullOrEmpty(value) && !isNaN(+value)) {
                  this.setProperties({
                    min: value
                  }, !isDynamic);
                }
              }
              break;
            case "disabled":
              if (isNullOrUndefined(this.dateTimeOptions) || this.dateTimeOptions["enabled"] === void 0 || isDynamic) {
                var enabled = this.inputElement.getAttribute(prop) === "disabled" || this.inputElement.getAttribute(prop) === "true" || this.inputElement.getAttribute(prop) === "" ? false : true;
                this.setProperties({
                  enabled
                }, !isDynamic);
              }
              break;
            case "value":
              if (isNullOrUndefined(this.dateTimeOptions) || this.dateTimeOptions["value"] === void 0 || isDynamic) {
                value = new Date(this.inputElement.getAttribute(prop));
                if (!this.isNullOrEmpty(value) && !isNaN(+value)) {
                  this.setProperties({
                    value
                  }, !isDynamic);
                }
              }
              break;
            case "max":
              if (isNullOrUndefined(this.dateTimeOptions) || this.dateTimeOptions["max"] === void 0 || isDynamic) {
                value = new Date(this.inputElement.getAttribute(prop));
                if (!this.isNullOrEmpty(value) && !isNaN(+value)) {
                  this.setProperties({
                    max: value
                  }, !isDynamic);
                }
              }
              break;
          }
        }
      }
    };
    DateTimePicker2.prototype.requiredModules = function() {
      var modules = [];
      if (this.calendarMode === "Islamic") {
        modules.push({
          args: [this],
          member: "islamic",
          name: "Islamic"
        });
      }
      if (this.enableMask) {
        modules.push(this.maskedDateModule());
      }
      return modules;
    };
    DateTimePicker2.prototype.maskedDateModule = function() {
      var modules = {
        args: [this],
        member: "MaskedDateTime"
      };
      return modules;
    };
    DateTimePicker2.prototype.getTimeActiveElement = function() {
      if (!isNullOrUndefined(this.dateTimeWrapper)) {
        return this.dateTimeWrapper.querySelectorAll("." + ACTIVE5);
      } else {
        return null;
      }
    };
    DateTimePicker2.prototype.createDateObj = function(val) {
      return val instanceof Date ? val : null;
    };
    DateTimePicker2.prototype.getDateObject = function(text) {
      if (!this.isNullOrEmpty(text)) {
        var dateValue = this.createDateObj(text);
        var value = this.valueWithMinutes;
        var status_1 = !isNullOrUndefined(value);
        if (this.checkDateValue(dateValue)) {
          var date = status_1 ? value.getDate() : DAY2;
          var month = status_1 ? value.getMonth() : MONTH3;
          var year = status_1 ? value.getFullYear() : YEAR3;
          var hour = status_1 ? value.getHours() : HOUR;
          var minute = status_1 ? value.getMinutes() : MINUTE;
          var second = status_1 ? value.getSeconds() : SECOND;
          var millisecond = status_1 ? value.getMilliseconds() : MILLISECOND;
          if (!this.scrollInvoked) {
            return new Date(year, month, date, hour, minute, second, millisecond);
          } else {
            this.scrollInvoked = false;
            return new Date(year, month, date, dateValue.getHours(), dateValue.getMinutes(), dateValue.getSeconds(), dateValue.getMilliseconds());
          }
        }
      }
      return null;
    };
    DateTimePicker2.prototype.findNextTimeElement = function(event2) {
      var textVal = this.inputElement.value;
      var value = isNullOrUndefined(this.valueWithMinutes) ? this.createDateObj(textVal) : this.getDateObject(this.valueWithMinutes);
      var dateTimeVal = null;
      var listCount = this.liCollections.length;
      if (!isNullOrUndefined(this.activeIndex) || !isNullOrUndefined(this.checkDateValue(value))) {
        if (event2.action === "home") {
          dateTimeVal = +this.createDateObj(new Date(this.timeCollections[0]));
          this.activeIndex = 0;
        } else if (event2.action === "end") {
          dateTimeVal = +this.createDateObj(new Date(this.timeCollections[this.timeCollections.length - 1]));
          this.activeIndex = this.timeCollections.length - 1;
        } else {
          if (event2.action === "down") {
            for (var i = 0; i < listCount; i++) {
              if (+value < this.timeCollections[i]) {
                dateTimeVal = +this.createDateObj(new Date(this.timeCollections[i]));
                this.activeIndex = i;
                break;
              }
            }
          } else {
            for (var i = listCount - 1; i >= 0; i--) {
              if (+value > this.timeCollections[i]) {
                dateTimeVal = +this.createDateObj(new Date(this.timeCollections[i]));
                this.activeIndex = i;
                break;
              }
            }
          }
        }
        this.selectedElement = this.liCollections[this.activeIndex];
        this.timeElementValue(isNullOrUndefined(dateTimeVal) ? null : new Date(dateTimeVal));
      }
    };
    DateTimePicker2.prototype.setTimeValue = function(date, value) {
      var dateString;
      var time;
      var val = this.validateMinMaxRange(value);
      var newval = this.createDateObj(val);
      if (this.getFormattedValue(newval) !== (!isNullOrUndefined(this.value) ? this.getFormattedValue(this.value) : null)) {
        this.valueWithMinutes = isNullOrUndefined(newval) ? null : newval;
        time = /* @__PURE__ */ new Date(+this.valueWithMinutes);
      } else {
        if (this.strictMode) {
          date = newval;
        }
        this.valueWithMinutes = this.checkDateValue(date);
        time = /* @__PURE__ */ new Date(+this.valueWithMinutes);
      }
      if (this.calendarMode === "Gregorian") {
        dateString = this.globalize.formatDate(time, {
          format: !isNullOrUndefined(this.formatString) ? this.formatString : this.cldrDateTimeFormat(),
          type: "dateTime",
          skeleton: "yMd"
        });
      } else {
        dateString = this.globalize.formatDate(time, {
          format: !isNullOrUndefined(this.formatString) ? this.formatString : this.cldrDateTimeFormat(),
          type: "dateTime",
          skeleton: "yMd",
          calendar: "islamic"
        });
      }
      if (!this.strictMode && isNullOrUndefined(time)) {
        Input.setValue(dateString, this.inputElement, this.floatLabelType, this.showClearButton);
      } else {
        Input.setValue(dateString, this.inputElement, this.floatLabelType, this.showClearButton);
      }
      return time;
    };
    DateTimePicker2.prototype.timeElementValue = function(value) {
      if (!isNullOrUndefined(this.checkDateValue(value)) && !this.isNullOrEmpty(value)) {
        var date = value instanceof Date ? value : this.getDateObject(value);
        return this.setTimeValue(date, value);
      }
      return null;
    };
    DateTimePicker2.prototype.timeKeyHandler = function(event2) {
      if (isNullOrUndefined(this.step) || this.step <= 0) {
        return;
      }
      var listCount = this.timeCollections.length;
      if (isNullOrUndefined(this.getTimeActiveElement()) || this.getTimeActiveElement().length === 0) {
        if (this.liCollections.length > 0) {
          if (isNullOrUndefined(this.value) && isNullOrUndefined(this.activeIndex)) {
            this.activeIndex = 0;
            this.selectedElement = this.liCollections[0];
            this.timeElementValue(new Date(this.timeCollections[0]));
          } else {
            this.findNextTimeElement(event2);
          }
        }
      } else {
        var nextItemValue = void 0;
        if (event2.keyCode >= 37 && event2.keyCode <= 40) {
          var index = event2.keyCode === 40 || event2.keyCode === 39 ? ++this.activeIndex : --this.activeIndex;
          this.activeIndex = index = this.activeIndex === listCount ? 0 : this.activeIndex;
          this.activeIndex = index = this.activeIndex < 0 ? listCount - 1 : this.activeIndex;
          nextItemValue = isNullOrUndefined(this.timeCollections[index]) ? this.timeCollections[0] : this.timeCollections[index];
        } else if (event2.action === "home") {
          this.activeIndex = 0;
          nextItemValue = this.timeCollections[0];
        } else if (event2.action === "end") {
          this.activeIndex = listCount - 1;
          nextItemValue = this.timeCollections[listCount - 1];
        }
        this.selectedElement = this.liCollections[this.activeIndex];
        this.timeElementValue(new Date(nextItemValue));
      }
      this.isNavigate = true;
      this.setTimeHover(this.selectedElement, NAVIGATION2);
      this.setTimeActiveDescendant();
      if (this.isTimePopupOpen() && this.selectedElement !== null && (!event2 || event2.type !== "click")) {
        this.setTimeScrollPosition();
      }
    };
    DateTimePicker2.prototype.timeKeyActionHandle = function(event2) {
      if (this.enabled) {
        if (event2.action !== "right" && event2.action !== "left" && event2.action !== "tab") {
          event2.preventDefault();
        }
        switch (event2.action) {
          case "up":
          case "down":
          case "home":
          case "end":
            this.timeKeyHandler(event2);
            break;
          case "enter":
            if (this.isNavigate) {
              this.selectedElement = this.liCollections[this.activeIndex];
              this.valueWithMinutes = new Date(this.timeCollections[this.activeIndex]);
              this.setInputValue("time");
              if (+this.previousDateTime !== +this.value) {
                this.changedArgs.value = this.value;
                this.addTimeSelection();
                this.previousDateTime = this.value;
              }
            } else {
              this.updateValue(event2);
            }
            this.hide(event2);
            addClass([this.inputWrapper.container], INPUTFOCUS3);
            this.isNavigate = false;
            event2.stopPropagation();
            break;
          case "escape":
            this.hide(event2);
            break;
          default:
            this.isNavigate = false;
            break;
        }
      }
    };
    DateTimePicker2.prototype.inputKeyAction = function(event2) {
      switch (event2.action) {
        case "altDownArrow":
          this.strictModeUpdate();
          this.updateInput();
          this.toggle(event2);
          break;
      }
    };
    DateTimePicker2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        var openPopup = ["blur", "change", "cleared", "close", "created", "destroyed", "focus", "navigated", "open", "renderDayCell"];
        if (openPopup.indexOf(prop) > 0 && this.isReact) {
          this.isDynamicValueChanged = true;
        }
        switch (prop) {
          case "value":
            this.isDynamicValueChanged = true;
            this.invalidValueString = null;
            this.checkInvalidValue(newProp.value);
            newProp.value = this.value;
            newProp.value = this.validateValue(newProp.value);
            if (this.enableMask) {
              Input.setValue(this.maskedDateValue, this.inputElement, this.floatLabelType, this.showClearButton);
            } else {
              Input.setValue(this.getFormattedValue(newProp.value), this.inputElement, this.floatLabelType, this.showClearButton);
            }
            this.valueWithMinutes = newProp.value;
            this.setProperties({
              value: newProp.value
            }, true);
            if (this.popupObj) {
              this.popupUpdate();
            }
            this.previousDateTime = new Date(this.inputElement.value);
            this.updateInput();
            this.changeTrigger(null);
            this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;
            if (this.enableMask && this.value) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
            }
            break;
          case "min":
          case "max":
            this.getProperty(newProp, prop);
            this.updateInput();
            break;
          case "enableRtl":
            Input.setEnableRtl(this.enableRtl, [this.inputWrapper.container]);
            break;
          case "cssClass":
            if (!isNullOrUndefined(oldProp.cssClass)) {
              oldProp.cssClass = oldProp.cssClass.replace(/\s+/g, " ").trim();
            }
            if (!isNullOrUndefined(newProp.cssClass)) {
              newProp.cssClass = newProp.cssClass.replace(/\s+/g, " ").trim();
            }
            Input.setCssClass(newProp.cssClass, [this.inputWrapper.container], oldProp.cssClass);
            if (this.dateTimeWrapper) {
              Input.setCssClass(newProp.cssClass, [this.dateTimeWrapper], oldProp.cssClass);
            }
            break;
          case "locale":
            this.globalize = new Internationalization(this.locale);
            this.l10n.setLocale(this.locale);
            if (this.dateTimeOptions && this.dateTimeOptions.placeholder == null) {
              this.setProperties({
                placeholder: this.l10n.getConstant("placeholder")
              }, true);
              Input.setPlaceholder(this.l10n.getConstant("placeholder"), this.inputElement);
            }
            this.dateTimeFormat = this.cldrDateTimeFormat();
            _super.prototype.updateInput.call(this);
            break;
          case "htmlAttributes":
            this.updateHtmlAttributeToElement();
            this.updateHtmlAttributeToWrapper();
            this.checkAttributes(true);
            break;
          case "format":
            this.setProperties({
              format: newProp.format
            }, true);
            this.checkFormat();
            this.dateTimeFormat = this.formatString;
            this.setValue();
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
              if (!this.value) {
                Input.setValue(this.maskedDateValue, this.inputElement, this.floatLabelType, this.showClearButton);
              }
            }
            break;
          case "placeholder":
            Input.setPlaceholder(newProp.placeholder, this.inputElement);
            break;
          case "enabled":
            Input.setEnabled(this.enabled, this.inputElement);
            if (this.enabled) {
              this.inputElement.setAttribute("tabindex", this.tabIndex);
            } else {
              this.inputElement.tabIndex = -1;
            }
            break;
          case "strictMode":
            this.invalidValueString = null;
            this.updateInput();
            break;
          case "width":
            this.setWidth(newProp.width);
            Input.calculateWidth(this.inputElement, this.inputWrapper.container);
            if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
              this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-date-time-icon");
            }
            break;
          case "readonly":
            Input.setReadonly(this.readonly, this.inputElement);
            break;
          case "floatLabelType":
            this.floatLabelType = newProp.floatLabelType;
            Input.removeFloating(this.inputWrapper);
            Input.addFloating(this.inputElement, this.floatLabelType, this.placeholder);
            if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
              this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-date-time-icon");
            }
            break;
          case "scrollTo":
            if (this.checkDateValue(new Date(this.checkValue(newProp.scrollTo)))) {
              if (this.dateTimeWrapper) {
                this.setScrollTo();
              }
              this.setProperties({
                scrollTo: this.checkDateValue(new Date(this.checkValue(newProp.scrollTo)))
              }, true);
            } else {
              this.setProperties({
                scrollTo: null
              }, true);
            }
            break;
          case "enableMask":
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
              Input.setValue(this.maskedDateValue, this.inputElement, this.floatLabelType, this.showClearButton);
            } else {
              if (this.inputElement.value === this.maskedDateValue) {
                this.maskedDateValue = "";
                Input.setValue(this.maskedDateValue, this.inputElement, this.floatLabelType, this.showClearButton);
              }
            }
            break;
          default:
            _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
            break;
        }
        if (!this.isDynamicValueChanged) {
          this.hide(null);
        }
        this.isDynamicValueChanged = false;
      }
    };
    DateTimePicker2.prototype.getModuleName = function() {
      return "datetimepicker";
    };
    DateTimePicker2.prototype.restoreValue = function() {
      this.previousDateTime = this.previousDate;
      this.currentDate = this.value ? this.value : /* @__PURE__ */ new Date();
      this.valueWithMinutes = this.value;
      this.previousDate = this.value;
      this.previousElementValue = this.previousElementValue = isNullOrUndefined(this.inputValueCopy) ? "" : this.getFormattedValue(this.inputValueCopy);
    };
    __decorate50([Property(null)], DateTimePicker2.prototype, "timeFormat", void 0);
    __decorate50([Property(30)], DateTimePicker2.prototype, "step", void 0);
    __decorate50([Property(null)], DateTimePicker2.prototype, "scrollTo", void 0);
    __decorate50([Property(1e3)], DateTimePicker2.prototype, "zIndex", void 0);
    __decorate50([Property(null)], DateTimePicker2.prototype, "value", void 0);
    __decorate50([Property(null)], DateTimePicker2.prototype, "keyConfigs", void 0);
    __decorate50([Property({})], DateTimePicker2.prototype, "htmlAttributes", void 0);
    __decorate50([Property(false)], DateTimePicker2.prototype, "enablePersistence", void 0);
    __decorate50([Property(true)], DateTimePicker2.prototype, "allowEdit", void 0);
    __decorate50([Property(false)], DateTimePicker2.prototype, "isMultiSelection", void 0);
    __decorate50([Property(null)], DateTimePicker2.prototype, "values", void 0);
    __decorate50([Property(true)], DateTimePicker2.prototype, "showClearButton", void 0);
    __decorate50([Property(null)], DateTimePicker2.prototype, "placeholder", void 0);
    __decorate50([Property(false)], DateTimePicker2.prototype, "strictMode", void 0);
    __decorate50([Property(false)], DateTimePicker2.prototype, "fullScreenMode", void 0);
    __decorate50([Property(null)], DateTimePicker2.prototype, "serverTimezoneOffset", void 0);
    __decorate50([Property(new Date(1900, 0, 1))], DateTimePicker2.prototype, "min", void 0);
    __decorate50([Property(new Date(2099, 11, 31))], DateTimePicker2.prototype, "max", void 0);
    __decorate50([Property(null)], DateTimePicker2.prototype, "minTime", void 0);
    __decorate50([Property(null)], DateTimePicker2.prototype, "maxTime", void 0);
    __decorate50([Property(null)], DateTimePicker2.prototype, "firstDayOfWeek", void 0);
    __decorate50([Property("Gregorian")], DateTimePicker2.prototype, "calendarMode", void 0);
    __decorate50([Property("Month")], DateTimePicker2.prototype, "start", void 0);
    __decorate50([Property("Month")], DateTimePicker2.prototype, "depth", void 0);
    __decorate50([Property(false)], DateTimePicker2.prototype, "weekNumber", void 0);
    __decorate50([Property(true)], DateTimePicker2.prototype, "showTodayButton", void 0);
    __decorate50([Property("Short")], DateTimePicker2.prototype, "dayHeaderFormat", void 0);
    __decorate50([Property(false)], DateTimePicker2.prototype, "openOnFocus", void 0);
    __decorate50([Property(false)], DateTimePicker2.prototype, "enableMask", void 0);
    __decorate50([Property({
      day: "day",
      month: "month",
      year: "year",
      hour: "hour",
      minute: "minute",
      second: "second",
      dayOfTheWeek: "day of the week"
    })], DateTimePicker2.prototype, "maskPlaceholder", void 0);
    __decorate50([Event()], DateTimePicker2.prototype, "open", void 0);
    __decorate50([Event()], DateTimePicker2.prototype, "close", void 0);
    __decorate50([Event()], DateTimePicker2.prototype, "cleared", void 0);
    __decorate50([Event()], DateTimePicker2.prototype, "blur", void 0);
    __decorate50([Event()], DateTimePicker2.prototype, "focus", void 0);
    __decorate50([Event()], DateTimePicker2.prototype, "created", void 0);
    __decorate50([Event()], DateTimePicker2.prototype, "destroyed", void 0);
    DateTimePicker2 = __decorate50([NotifyPropertyChanges], DateTimePicker2);
    return DateTimePicker2;
  }(DatePicker)
);

// node_modules/@syncfusion/ej2-calendars/src/maskbase/masked-date-time.js
var ARROWLEFT = "ArrowLeft";
var ARROWRIGHT = "ArrowRight";
var ARROWUP = "ArrowUp";
var ARROWDOWN = "ArrowDown";
var TAB2 = "Tab";
var SHIFTTAB = "shiftTab";
var END2 = "End";
var HOME2 = "Home";
var MaskedDateTime = (
  /** @class */
  function() {
    function MaskedDateTime2(parent) {
      this.mask = "";
      this.defaultConstant = {
        day: "day",
        month: "month",
        year: "year",
        hour: "hour",
        minute: "minute",
        second: "second",
        dayOfTheWeek: "day of the week"
      };
      this.hiddenMask = "";
      this.validCharacters = "dMyhmHfasz";
      this.isDayPart = false;
      this.isMonthPart = false;
      this.isYearPart = false;
      this.isHourPart = false;
      this.isMinutePart = false;
      this.isSecondsPart = false;
      this.isMilliSecondsPart = false;
      this.monthCharacter = "";
      this.periodCharacter = "";
      this.isHiddenMask = false;
      this.isComplete = false;
      this.isNavigate = false;
      this.navigated = false;
      this.isBlur = false;
      this.formatRegex = /EEEEE|EEEE|EEE|EE|E|cccc|ccc|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yyy|yy|y|HH|H|hh|h|mm|m|fff|ff|f|aa|a|ss|s|zzzz|zzz|zz|z|'[^']*'|'[^']*'/g;
      this.isDeletion = false;
      this.isShortYear = false;
      this.isDeleteKey = false;
      this.isDateZero = false;
      this.isMonthZero = false;
      this.isYearZero = false;
      this.isLeadingZero = false;
      this.dayTypeCount = 0;
      this.monthTypeCount = 0;
      this.hourTypeCount = 0;
      this.minuteTypeCount = 0;
      this.secondTypeCount = 0;
      this.parent = parent;
      this.dateformat = this.getCulturedFormat();
      this.maskDateValue = this.parent.value != null ? /* @__PURE__ */ new Date(+this.parent.value) : /* @__PURE__ */ new Date();
      this.maskDateValue.setMonth(0);
      this.maskDateValue.setHours(0);
      this.maskDateValue.setMinutes(0);
      this.maskDateValue.setSeconds(0);
      this.previousDate = new Date(this.maskDateValue.getFullYear(), this.maskDateValue.getMonth(), this.maskDateValue.getDate(), this.maskDateValue.getHours(), this.maskDateValue.getMinutes(), this.maskDateValue.getSeconds());
      this.removeEventListener();
      this.addEventListener();
    }
    MaskedDateTime2.prototype.getModuleName = function() {
      return "MaskedDateTime";
    };
    MaskedDateTime2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on("createMask", this.createMask, this);
      this.parent.on("setMaskSelection", this.validCharacterCheck, this);
      this.parent.on("inputHandler", this.maskInputHandler, this);
      this.parent.on("keyDownHandler", this.maskKeydownHandler, this);
      this.parent.on("clearHandler", this.clearHandler, this);
      this.parent.on("maskPasteInputHandler", this.maskPasteInputHandler, this);
    };
    MaskedDateTime2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off("createMask", this.createMask);
      this.parent.off("setMaskSelection", this.validCharacterCheck);
      this.parent.off("inputHandler", this.maskInputHandler);
      this.parent.off("keyDownHandler", this.maskKeydownHandler);
      this.parent.off("clearHandler", this.clearHandler);
      this.parent.off("maskPasteInputHandler", this.maskPasteInputHandler);
    };
    MaskedDateTime2.prototype.createMask = function(mask) {
      this.isDayPart = this.isMonthPart = this.isYearPart = this.isHourPart = this.isMinutePart = this.isSecondsPart = false;
      this.dateformat = this.getCulturedFormat();
      if (this.parent.maskPlaceholder.day) {
        this.defaultConstant["day"] = this.parent.maskPlaceholder.day;
      }
      if (this.parent.maskPlaceholder.month) {
        this.defaultConstant["month"] = this.parent.maskPlaceholder.month;
      }
      if (this.parent.maskPlaceholder.year) {
        this.defaultConstant["year"] = this.parent.maskPlaceholder.year;
      }
      if (this.parent.maskPlaceholder.hour) {
        this.defaultConstant["hour"] = this.parent.maskPlaceholder.hour;
      }
      if (this.parent.maskPlaceholder.minute) {
        this.defaultConstant["minute"] = this.parent.maskPlaceholder.minute;
      }
      if (this.parent.maskPlaceholder.second) {
        this.defaultConstant["second"] = this.parent.maskPlaceholder.second;
      }
      if (this.parent.maskPlaceholder.dayOfTheWeek) {
        this.defaultConstant["dayOfTheWeek"] = this.parent.maskPlaceholder.dayOfTheWeek.toString();
      }
      this.getCUltureMaskFormat();
      var inputValue = this.dateformat.replace(this.formatRegex, this.formatCheck());
      this.isHiddenMask = true;
      this.hiddenMask = this.dateformat.replace(this.formatRegex, this.formatCheck());
      this.isHiddenMask = false;
      this.previousHiddenMask = this.hiddenMask;
      this.mask = this.previousValue = inputValue;
      this.parent.maskedDateValue = this.mask;
      if (this.parent.value) {
        this.navigated = true;
        this.isBlur = mask.isBlur;
        this.setDynamicValue();
      }
    };
    MaskedDateTime2.prototype.getCUltureMaskFormat = function() {
      this.l10n = new L10n(this.parent.moduleName, this.defaultConstant, this.parent.locale);
      this.objectString = Object.keys(this.defaultConstant);
      for (var i = 0; i < this.objectString.length; i++) {
        this.defaultConstant[this.objectString[i].toString()] = this.l10n.getConstant(this.objectString[i].toString());
      }
    };
    MaskedDateTime2.prototype.validCharacterCheck = function() {
      var start = this.parent.inputElement.selectionStart;
      if (this.parent.moduleName !== "timepicker") {
        if (start === this.hiddenMask.length && this.mask === this.parent.inputElement.value) {
          start = 0;
        }
      }
      for (var i = start, j = start - 1; i < this.hiddenMask.length || j >= 0; i++, j--) {
        if (i < this.hiddenMask.length && this.validCharacters.indexOf(this.hiddenMask[i]) !== -1) {
          this.setSelection(this.hiddenMask[i]);
          return;
        }
        if (j >= 0 && this.validCharacters.indexOf(this.hiddenMask[j]) !== -1) {
          this.setSelection(this.hiddenMask[j]);
          return;
        }
      }
    };
    MaskedDateTime2.prototype.setDynamicValue = function() {
      this.maskDateValue = /* @__PURE__ */ new Date(+this.parent.value);
      this.isDayPart = this.isMonthPart = this.isYearPart = this.isHourPart = this.isMinutePart = this.isSecondsPart = true;
      this.updateValue();
      if (!this.isBlur) {
        this.validCharacterCheck();
      }
    };
    MaskedDateTime2.prototype.setSelection = function(validChar) {
      var start = -1;
      var end = 0;
      for (var i = 0; i < this.hiddenMask.length; i++) {
        if (this.hiddenMask[i] === validChar) {
          end = i + 1;
          if (start === -1) {
            start = i;
          }
        }
      }
      if (start < 0) {
        start = 0;
      }
      this.parent.inputElement.setSelectionRange(start, end);
    };
    MaskedDateTime2.prototype.maskKeydownHandler = function(args) {
      if (args.e.key === "Backspace") {
        var start = this.parent.inputElement.selectionStart;
        var formatText = "";
        if (this.validCharacters.indexOf(this.hiddenMask[start]) !== -1) {
          formatText = this.hiddenMask[start];
        }
        switch (formatText) {
          case "d":
            this.dayTypeCount = Math.max(this.dayTypeCount - 1, 0);
            break;
          case "M":
            this.monthTypeCount = Math.max(this.monthTypeCount - 1, 0);
            break;
          case "H":
          case "h":
            this.hourTypeCount = Math.max(this.hourTypeCount - 1, 0);
            break;
          case "m":
            this.minuteTypeCount = Math.max(this.minuteTypeCount - 1, 0);
            break;
          case "s":
            this.secondTypeCount = Math.max(this.secondTypeCount - 1, 0);
            break;
          default:
            break;
        }
        return;
      }
      this.dayTypeCount = this.monthTypeCount = this.hourTypeCount = this.minuteTypeCount = this.secondTypeCount = 0;
      if (args.e.key === "Delete") {
        this.isDeleteKey = true;
        return;
      }
      if (!args.e.altKey && !args.e.ctrlKey && (args.e.key === ARROWLEFT || args.e.key === ARROWRIGHT || args.e.key === SHIFTTAB || args.e.key === TAB2 || args.e.action === SHIFTTAB || args.e.key === END2 || args.e.key === HOME2)) {
        var start = this.parent.inputElement.selectionStart;
        var end = this.parent.inputElement.selectionEnd;
        var length_1 = this.parent.inputElement.value.length;
        if (start === 0 && end === length_1 && (args.e.key === TAB2 || args.e.action === SHIFTTAB)) {
          var index = args.e.action === SHIFTTAB ? end : 0;
          this.parent.inputElement.selectionStart = this.parent.inputElement.selectionEnd = index;
        }
        if (args.e.key === END2 || args.e.key === HOME2) {
          var range = args.e.key === END2 ? length_1 : 0;
          this.parent.inputElement.selectionStart = this.parent.inputElement.selectionEnd = range;
        }
        this.navigateSelection(args.e.key === ARROWLEFT || args.e.action === SHIFTTAB || args.e.key === END2 ? true : false);
      }
      if (!args.e.altKey && !args.e.ctrlKey && (args.e.key === ARROWUP || args.e.key === ARROWDOWN)) {
        var start = this.parent.inputElement.selectionStart;
        var formatText = "";
        if (this.validCharacters.indexOf(this.hiddenMask[start]) !== -1) {
          formatText = this.hiddenMask[start];
        }
        this.dateAlteration(args.e.key === ARROWDOWN ? true : false);
        var inputValue = this.dateformat.replace(this.formatRegex, this.formatCheck());
        this.isHiddenMask = true;
        this.hiddenMask = this.dateformat.replace(this.formatRegex, this.formatCheck());
        this.isHiddenMask = false;
        this.previousHiddenMask = this.hiddenMask;
        this.previousValue = inputValue;
        this.parent.inputElement.value = inputValue;
        for (var i = 0; i < this.hiddenMask.length; i++) {
          if (formatText === this.hiddenMask[i]) {
            start = i;
            break;
          }
        }
        this.parent.inputElement.selectionStart = start;
        this.validCharacterCheck();
      }
    };
    MaskedDateTime2.prototype.isPersist = function() {
      var isPersist = this.parent.isFocused || this.navigated;
      return isPersist;
    };
    MaskedDateTime2.prototype.differenceCheck = function() {
      var start = this.parent.inputElement.selectionStart;
      var inputValue = this.parent.inputElement.value;
      var previousVal = this.previousValue.substring(0, start + this.previousValue.length - inputValue.length);
      var newVal = inputValue.substring(0, start);
      var newDateValue = /* @__PURE__ */ new Date(+this.maskDateValue);
      var maxDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth() + 1, 0).getDate();
      if (previousVal.indexOf(newVal) === 0 && (newVal.length === 0 || this.previousHiddenMask[newVal.length - 1] !== this.previousHiddenMask[newVal.length])) {
        for (var i = newVal.length; i < previousVal.length; i++) {
          if (this.previousHiddenMask[i] !== "" && this.validCharacters.indexOf(this.previousHiddenMask[i]) >= 0) {
            this.isDeletion = this.handleDeletion(this.previousHiddenMask[i], false);
          }
        }
        if (this.isDeletion) {
          return;
        }
      }
      switch (this.previousHiddenMask[start - 1]) {
        case "d": {
          var date = (this.isDayPart && newDateValue.getDate().toString().length < 2 && !this.isPersist() ? newDateValue.getDate() * 10 : 0) + parseInt(newVal[start - 1], 10);
          this.isDateZero = newVal[start - 1] === "0";
          this.parent.isFocused = this.parent.isFocused ? false : this.parent.isFocused;
          this.navigated = this.navigated ? false : this.navigated;
          if (isNaN(date)) {
            return;
          }
          for (var i = 0; date > maxDate; i++) {
            date = parseInt(date.toString().slice(1), 10);
          }
          if (date >= 1) {
            newDateValue.setDate(date);
            this.isNavigate = date.toString().length === 2;
            this.previousDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth(), newDateValue.getDate());
            if (newDateValue.getMonth() !== this.maskDateValue.getMonth()) {
              return;
            }
            this.isDayPart = true;
            var maxDaysInMonth = new Date(newDateValue.getFullYear(), newDateValue.getMonth() + 1, 0).getDate();
            this.dayTypeCount += this.dayTypeCount === 0 && parseInt(date + "0", 10) > maxDaysInMonth ? 2 : 1;
          } else {
            this.isDayPart = false;
            if (!(this.dayTypeCount === 1 && this.isDateZero)) {
              this.dayTypeCount += this.isDateZero ? 1 : 0;
            }
          }
          break;
        }
        case "M": {
          var month = void 0;
          if (newDateValue.getMonth().toString().length < 2 && !this.isPersist()) {
            month = (this.isMonthPart ? (newDateValue.getMonth() + 1) * 10 : 0) + parseInt(newVal[start - 1], 10);
          } else {
            month = parseInt(newVal[start - 1], 10);
          }
          this.parent.isFocused = this.parent.isFocused ? false : this.parent.isFocused;
          this.navigated = this.navigated ? false : this.navigated;
          this.isMonthZero = newVal[start - 1] === "0";
          if (!isNaN(month)) {
            while (month > 12) {
              month = parseInt(month.toString().slice(1), 10);
            }
            if (month >= 1) {
              newDateValue.setMonth(month - 1);
              if (month >= 10 || month === 1) {
                if (this.isLeadingZero && month === 1) {
                  this.isNavigate = month.toString().length === 1;
                  this.isLeadingZero = false;
                } else {
                  this.isNavigate = month.toString().length === 2;
                }
              } else {
                this.isNavigate = month.toString().length === 1;
              }
              if (newDateValue.getMonth() !== month - 1) {
                newDateValue.setDate(1);
                newDateValue.setMonth(month - 1);
              }
              if (this.isDayPart) {
                var previousMaxDate = new Date(this.previousDate.getFullYear(), this.previousDate.getMonth() + 1, 0).getDate();
                var currentMaxDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth() + 1, 0).getDate();
                if (this.previousDate.getDate() === previousMaxDate && currentMaxDate <= previousMaxDate) {
                  newDateValue.setDate(currentMaxDate);
                }
              }
              this.previousDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth(), newDateValue.getDate());
              this.isMonthPart = true;
              this.monthTypeCount = this.monthTypeCount + 1;
              this.isLeadingZero = false;
            } else {
              newDateValue.setMonth(0);
              this.isLeadingZero = true;
              this.isMonthPart = false;
              if (!(this.monthTypeCount === 1 && this.isMonthZero)) {
                this.monthTypeCount += this.isMonthZero ? 1 : 0;
              }
            }
          } else {
            var monthString = this.getCulturedValue("months[stand-alone].wide");
            var monthValue = Object.keys(monthString);
            this.monthCharacter += newVal[start - 1].toLowerCase();
            while (this.monthCharacter.length > 0) {
              var i = 1;
              for (var _i = 0, monthValue_1 = monthValue; _i < monthValue_1.length; _i++) {
                var months = monthValue_1[_i];
                if (monthString[i].toLowerCase().indexOf(this.monthCharacter) === 0) {
                  newDateValue.setMonth(i - 1);
                  this.isMonthPart = true;
                  this.maskDateValue = newDateValue;
                  return;
                }
                i++;
              }
              this.monthCharacter = this.monthCharacter.substring(1, this.monthCharacter.length);
            }
          }
          break;
        }
        case "y": {
          var year = (this.isYearPart && newDateValue.getFullYear().toString().length < 4 && !this.isShortYear ? newDateValue.getFullYear() * 10 : 0) + parseInt(newVal[start - 1], 10);
          var yearValue = (this.dateformat.match(/y/g) || []).length;
          yearValue = yearValue !== 2 ? 4 : yearValue;
          this.isShortYear = false;
          this.isYearZero = newVal[start - 1] === "0";
          if (isNaN(year)) {
            return;
          }
          while (year > 9999) {
            year = parseInt(year.toString().slice(1), 10);
          }
          if (year < 1) {
            this.isYearPart = false;
          } else {
            newDateValue.setFullYear(year);
            if (year.toString().length === yearValue) {
              this.isNavigate = true;
            }
            this.previousDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth(), newDateValue.getDate());
            this.isYearPart = true;
          }
          break;
        }
        case "h":
          this.hour = (this.isHourPart && (newDateValue.getHours() % 12 || 12).toString().length < 2 && !this.isPersist() ? (newDateValue.getHours() % 12 || 12) * 10 : 0) + parseInt(newVal[start - 1], 10);
          this.parent.isFocused = this.parent.isFocused ? false : this.parent.isFocused;
          this.navigated = this.navigated ? false : this.navigated;
          if (isNaN(this.hour)) {
            return;
          }
          while (this.hour > 12) {
            this.hour = parseInt(this.hour.toString().slice(1), 10);
          }
          newDateValue.setHours(Math.floor(newDateValue.getHours() / 12) * 12 + this.hour % 12);
          this.isNavigate = this.hour.toString().length === 2;
          this.isHourPart = true;
          this.hourTypeCount = this.hourTypeCount === 0 && this.hour && parseInt(this.hour + "0", 10) > 12 ? 2 : this.hourTypeCount + 1;
          break;
        case "H":
          this.hour = (this.isHourPart && newDateValue.getHours().toString().length < 2 && !this.isPersist() ? newDateValue.getHours() * 10 : 0) + parseInt(newVal[start - 1], 10);
          this.parent.isFocused = this.parent.isFocused ? false : this.parent.isFocused;
          this.navigated = this.navigated ? false : this.navigated;
          if (isNaN(this.hour)) {
            return;
          }
          for (var i = 0; this.hour > 23; i++) {
            this.hour = parseInt(this.hour.toString().slice(1), 10);
          }
          newDateValue.setHours(this.hour);
          this.isNavigate = this.hour.toString().length === 2;
          this.isHourPart = true;
          this.hourTypeCount = this.hourTypeCount === 0 && this.hour && parseInt(this.hour + "0", 10) > 23 ? 2 : this.hourTypeCount + 1;
          break;
        case "m": {
          var minutes = (this.isMinutePart && newDateValue.getMinutes().toString().length < 2 && !this.isPersist() ? newDateValue.getMinutes() * 10 : 0) + parseInt(newVal[start - 1], 10);
          this.parent.isFocused = this.parent.isFocused ? false : this.parent.isFocused;
          this.navigated = this.navigated ? false : this.navigated;
          if (isNaN(minutes)) {
            return;
          }
          for (var i = 0; minutes > 59; i++) {
            minutes = parseInt(minutes.toString().slice(1), 10);
          }
          newDateValue.setMinutes(minutes);
          this.isNavigate = minutes.toString().length === 2;
          this.isMinutePart = true;
          this.minuteTypeCount = this.minuteTypeCount === 0 && parseInt(minutes + "0", 10) > 59 ? 2 : this.minuteTypeCount + 1;
          break;
        }
        case "s": {
          var seconds = (this.isSecondsPart && newDateValue.getSeconds().toString().length < 2 && !this.isPersist() ? newDateValue.getSeconds() * 10 : 0) + parseInt(newVal[start - 1], 10);
          this.parent.isFocused = this.parent.isFocused ? false : this.parent.isFocused;
          this.navigated = this.navigated ? false : this.navigated;
          if (isNaN(seconds)) {
            return;
          }
          for (var i = 0; seconds > 59; i++) {
            seconds = parseInt(seconds.toString().slice(1), 10);
          }
          newDateValue.setSeconds(seconds);
          this.isNavigate = seconds.toString().length === 2;
          this.isSecondsPart = true;
          this.secondTypeCount = this.secondTypeCount === 0 && parseInt(seconds + "0", 10) > 59 ? 2 : this.secondTypeCount + 1;
          break;
        }
        case "a": {
          this.periodCharacter += newVal[start - 1].toLowerCase();
          var periodString = this.getCulturedValue("dayPeriods.format.wide");
          var periodkeys = Object.keys(periodString);
          for (var i = 0; this.periodCharacter.length > 0; i++) {
            if (periodString[periodkeys[0]].toLowerCase().indexOf(this.periodCharacter) === 0 && newDateValue.getHours() >= 12 || periodString[periodkeys[1]].toLowerCase().indexOf(this.periodCharacter) === 0 && newDateValue.getHours() < 12) {
              newDateValue.setHours((newDateValue.getHours() + 12) % 24);
              this.maskDateValue = newDateValue;
            }
            this.periodCharacter = this.periodCharacter.substring(1, this.periodCharacter.length);
          }
          break;
        }
        default:
          break;
      }
      this.maskDateValue = newDateValue;
    };
    MaskedDateTime2.prototype.formatCheck = function() {
      var proxy = this;
      function formatValueSpecifier(formattext) {
        var result;
        var daysAbbreviated = proxy.getCulturedValue("days[stand-alone].abbreviated");
        var dayKeyAbbreviated = Object.keys(daysAbbreviated);
        var daysWide = proxy.getCulturedValue("days[stand-alone].wide");
        var dayKeyWide = Object.keys(daysWide);
        var daysNarrow = proxy.getCulturedValue("days[stand-alone].narrow");
        var dayKeyNarrow = Object.keys(daysNarrow);
        var monthAbbreviated = proxy.getCulturedValue("months[stand-alone].abbreviated");
        var monthWide = proxy.getCulturedValue("months[stand-alone].wide");
        var periodString = proxy.getCulturedValue("dayPeriods.format.wide");
        var periodkeys = Object.keys(periodString);
        var milliseconds;
        var dateOptions;
        switch (formattext) {
          case "ddd":
          case "dddd":
          case "d":
            result = proxy.isDayPart ? proxy.maskDateValue.getDate().toString() : proxy.defaultConstant["day"].toString();
            result = proxy.zeroCheck(proxy.isDateZero, proxy.isDayPart, result);
            if (proxy.dayTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.dayTypeCount = 0;
            }
            break;
          case "dd":
            result = proxy.isDayPart ? proxy.roundOff(proxy.maskDateValue.getDate(), 2) : proxy.defaultConstant["day"].toString();
            result = proxy.zeroCheck(proxy.isDateZero, proxy.isDayPart, result);
            if (proxy.dayTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.dayTypeCount = 0;
            }
            break;
          case "E":
          case "EE":
          case "EEE":
          case "ccc":
            result = proxy.isDayPart && proxy.isMonthPart && proxy.isYearPart ? daysAbbreviated[dayKeyAbbreviated[proxy.maskDateValue.getDay()]].toString() : proxy.defaultConstant["dayOfTheWeek"].toString();
            break;
          case "EEEE":
          case "cccc":
            result = proxy.isDayPart && proxy.isMonthPart && proxy.isYearPart ? daysWide[dayKeyWide[proxy.maskDateValue.getDay()]].toString() : proxy.defaultConstant["dayOfTheWeek"].toString();
            break;
          case "EEEEE":
            result = proxy.isDayPart && proxy.isMonthPart && proxy.isYearPart ? daysNarrow[dayKeyNarrow[proxy.maskDateValue.getDay()]].toString() : proxy.defaultConstant["dayOfTheWeek"].toString();
            break;
          case "M":
            result = proxy.isMonthPart ? (proxy.maskDateValue.getMonth() + 1).toString() : proxy.defaultConstant["month"].toString();
            result = proxy.zeroCheck(proxy.isMonthZero, proxy.isMonthPart, result);
            if (proxy.monthTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.monthTypeCount = 0;
            }
            break;
          case "MM":
            result = proxy.isMonthPart ? proxy.roundOff(proxy.maskDateValue.getMonth() + 1, 2) : proxy.defaultConstant["month"].toString();
            result = proxy.zeroCheck(proxy.isMonthZero, proxy.isMonthPart, result);
            if (proxy.monthTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.monthTypeCount = 0;
            }
            break;
          case "MMM":
            result = proxy.isMonthPart ? monthAbbreviated[proxy.maskDateValue.getMonth() + 1] : proxy.defaultConstant["month"].toString();
            break;
          case "MMMM":
            result = proxy.isMonthPart ? monthWide[proxy.maskDateValue.getMonth() + 1] : proxy.defaultConstant["month"].toString();
            break;
          case "yy":
            result = proxy.isYearPart ? proxy.roundOff(proxy.maskDateValue.getFullYear() % 100, 2) : proxy.defaultConstant["year"].toString();
            result = proxy.zeroCheck(proxy.isYearZero, proxy.isYearPart, result);
            break;
          case "y":
          case "yyy":
          case "yyyy":
            result = proxy.isYearPart ? proxy.roundOff(proxy.maskDateValue.getFullYear(), 4) : proxy.defaultConstant["year"].toString();
            result = proxy.zeroCheck(proxy.isYearZero, proxy.isYearPart, result);
            break;
          case "h":
            result = proxy.isHourPart ? (proxy.maskDateValue.getHours() % 12 || 12).toString() : proxy.defaultConstant["hour"].toString();
            if (proxy.hourTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.hourTypeCount = 0;
            }
            break;
          case "hh":
            result = proxy.isHourPart ? proxy.roundOff(proxy.maskDateValue.getHours() % 12 || 12, 2) : proxy.defaultConstant["hour"].toString();
            if (proxy.hourTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.hourTypeCount = 0;
            }
            break;
          case "H":
            result = proxy.isHourPart ? proxy.maskDateValue.getHours().toString() : proxy.defaultConstant["hour"].toString();
            if (proxy.hourTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.hourTypeCount = 0;
            }
            break;
          case "HH":
            result = proxy.isHourPart ? proxy.roundOff(proxy.maskDateValue.getHours(), 2) : proxy.defaultConstant["hour"].toString();
            if (proxy.hourTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.hourTypeCount = 0;
            }
            break;
          case "m":
            result = proxy.isMinutePart ? proxy.maskDateValue.getMinutes().toString() : proxy.defaultConstant["minute"].toString();
            if (proxy.minuteTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.minuteTypeCount = 0;
            }
            break;
          case "mm":
            result = proxy.isMinutePart ? proxy.roundOff(proxy.maskDateValue.getMinutes(), 2) : proxy.defaultConstant["minute"].toString();
            if (proxy.minuteTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.minuteTypeCount = 0;
            }
            break;
          case "s":
            result = proxy.isSecondsPart ? proxy.maskDateValue.getSeconds().toString() : proxy.defaultConstant["second"].toString();
            if (proxy.secondTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.secondTypeCount = 0;
            }
            break;
          case "ss":
            result = proxy.isSecondsPart ? proxy.roundOff(proxy.maskDateValue.getSeconds(), 2) : proxy.defaultConstant["second"].toString();
            if (proxy.secondTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.secondTypeCount = 0;
            }
            break;
          case "f":
            result = Math.floor(proxy.maskDateValue.getMilliseconds() / 100).toString();
            break;
          case "ff":
            milliseconds = proxy.maskDateValue.getMilliseconds();
            if (proxy.maskDateValue.getMilliseconds() > 99) {
              milliseconds = Math.floor(proxy.maskDateValue.getMilliseconds() / 10);
            }
            result = proxy.roundOff(milliseconds, 2);
            break;
          case "fff":
            result = proxy.roundOff(proxy.maskDateValue.getMilliseconds(), 3);
            break;
          case "a":
          case "aa":
            result = proxy.maskDateValue.getHours() < 12 ? periodString["am"] : periodString["pm"];
            break;
          case "z":
          case "zz":
          case "zzz":
          case "zzzz":
            dateOptions = {
              format: formattext,
              type: "dateTime",
              skeleton: "yMd",
              calendar: proxy.parent.calendarMode
            };
            result = proxy.parent.globalize.formatDate(proxy.maskDateValue, dateOptions);
            break;
        }
        result = result !== void 0 ? result : formattext.slice(1, formattext.length - 1);
        if (proxy.isHiddenMask) {
          var hiddenChar = "";
          for (var i = 0; i < result.length; i++) {
            hiddenChar += formattext[0];
          }
          return hiddenChar;
        } else {
          return result;
        }
      }
      return formatValueSpecifier;
    };
    MaskedDateTime2.prototype.isValidDate = function(dateString) {
      var date = new Date(dateString);
      return !isNaN(date.getTime());
    };
    MaskedDateTime2.prototype.maskPasteInputHandler = function() {
      if (this.isValidDate(this.parent.inputElement.value)) {
        this.maskDateValue = new Date(this.parent.inputElement.value);
        this.isDayPart = this.isMonthPart = this.isYearPart = this.isHourPart = this.isMinutePart = this.isSecondsPart = true;
        this.updateValue();
        if (!this.isBlur) {
          this.validCharacterCheck();
        }
        return;
      } else {
        this.maskInputHandler();
      }
    };
    MaskedDateTime2.prototype.maskInputHandler = function() {
      var start = this.parent.inputElement.selectionStart;
      var formatText = "";
      if (this.validCharacters.indexOf(this.hiddenMask[start]) !== -1) {
        formatText = this.hiddenMask[start];
      }
      this.differenceCheck();
      var inputValue = this.dateformat.replace(this.formatRegex, this.formatCheck());
      this.isHiddenMask = true;
      this.hiddenMask = this.dateformat.replace(this.formatRegex, this.formatCheck());
      this.isDateZero = this.isMonthZero = this.isYearZero = false;
      this.isHiddenMask = false;
      this.previousHiddenMask = this.hiddenMask;
      this.previousValue = inputValue;
      this.parent.inputElement.value = inputValue;
      for (var i = 0; i < this.hiddenMask.length; i++) {
        if (formatText === this.hiddenMask[i]) {
          start = i;
          break;
        }
      }
      var scrollPositionY;
      if (Browser.isDevice && (Browser.isIos || Browser.isIos7)) {
        var scrollableParent = this.findScrollableParent(this.parent.inputElement);
        scrollPositionY = scrollableParent ? scrollableParent.getBoundingClientRect().top : window.scrollY;
      }
      this.parent.inputElement.selectionStart = start;
      this.validCharacterCheck();
      if ((this.isNavigate || this.isDeletion) && !this.isDeleteKey) {
        var isbackward = this.isNavigate ? false : true;
        this.isNavigate = this.isDeletion = false;
        this.navigateSelection(isbackward);
        if (Browser.isDevice && (Browser.isIos || Browser.isIos7)) {
          setTimeout(function() {
            window.scrollTo(0, scrollPositionY);
          }, 0);
        }
      }
      if (this.isDeleteKey) {
        this.isDeletion = false;
      }
      this.isDeleteKey = false;
    };
    MaskedDateTime2.prototype.findScrollableParent = function(element2) {
      while (element2) {
        if (this.isScrollable(element2)) {
          return element2;
        }
        element2 = element2.parentElement;
      }
      return null;
    };
    MaskedDateTime2.prototype.isScrollable = function(element2) {
      var overflowY = window.getComputedStyle(element2).overflowY;
      return element2.scrollHeight > element2.clientHeight && (overflowY === "auto" || overflowY === "scroll");
    };
    MaskedDateTime2.prototype.navigateSelection = function(isbackward) {
      var start = this.parent.inputElement.selectionStart;
      var end = this.parent.inputElement.selectionEnd;
      var formatIndex = isbackward ? start - 1 : end;
      this.navigated = true;
      while (formatIndex < this.hiddenMask.length && formatIndex >= 0) {
        if (this.validCharacters.indexOf(this.hiddenMask[formatIndex]) >= 0) {
          this.setSelection(this.hiddenMask[formatIndex]);
          break;
        }
        formatIndex = formatIndex + (isbackward ? -1 : 1);
      }
    };
    MaskedDateTime2.prototype.roundOff = function(val, count) {
      var valueText = val.toString();
      var length = count - valueText.length;
      var result = "";
      for (var i = 0; i < length; i++) {
        result += "0";
      }
      return result + valueText;
    };
    MaskedDateTime2.prototype.zeroCheck = function(isZero, isDayPart, resultValue) {
      var result = resultValue;
      if (isZero && !isDayPart) {
        result = "0";
      }
      return result;
    };
    MaskedDateTime2.prototype.handleDeletion = function(format, isSegment) {
      switch (format) {
        case "d":
          this.isDayPart = isSegment;
          break;
        case "M":
          this.isMonthPart = isSegment;
          if (!isSegment) {
            this.maskDateValue.setMonth(0);
            this.monthCharacter = "";
          }
          break;
        case "y":
          this.isYearPart = isSegment;
          break;
        case "H":
        case "h":
          this.isHourPart = isSegment;
          if (!isSegment) {
            this.periodCharacter = "";
          }
          break;
        case "m":
          this.isMinutePart = isSegment;
          break;
        case "s":
          this.isSecondsPart = isSegment;
          break;
        default:
          return false;
      }
      return true;
    };
    MaskedDateTime2.prototype.dateAlteration = function(isDecrement) {
      var start = this.parent.inputElement.selectionStart;
      var formatText = "";
      if (this.validCharacters.indexOf(this.hiddenMask[start]) !== -1) {
        formatText = this.hiddenMask[start];
      } else {
        return;
      }
      var newDateValue = new Date(this.maskDateValue.getFullYear(), this.maskDateValue.getMonth(), this.maskDateValue.getDate(), this.maskDateValue.getHours(), this.maskDateValue.getMinutes(), this.maskDateValue.getSeconds());
      this.previousDate = new Date(this.maskDateValue.getFullYear(), this.maskDateValue.getMonth(), this.maskDateValue.getDate(), this.maskDateValue.getHours(), this.maskDateValue.getMinutes(), this.maskDateValue.getSeconds());
      var incrementValue = isDecrement ? -1 : 1;
      switch (formatText) {
        case "d":
          newDateValue.setDate(newDateValue.getDate() + incrementValue);
          break;
        case "M": {
          var newMonth = newDateValue.getMonth() + incrementValue;
          newDateValue.setDate(1);
          newDateValue.setMonth(newMonth);
          if (this.isDayPart) {
            var previousMaxDate = new Date(this.previousDate.getFullYear(), this.previousDate.getMonth() + 1, 0).getDate();
            var currentMaxDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth() + 1, 0).getDate();
            if (this.previousDate.getDate() === previousMaxDate && currentMaxDate <= previousMaxDate) {
              newDateValue.setDate(currentMaxDate);
            } else {
              newDateValue.setDate(this.previousDate.getDate());
            }
          } else {
            newDateValue.setDate(this.previousDate.getDate());
          }
          this.previousDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth(), newDateValue.getDate());
          break;
        }
        case "y":
          newDateValue.setFullYear(newDateValue.getFullYear() + incrementValue);
          break;
        case "H":
        case "h":
          newDateValue.setHours(newDateValue.getHours() + incrementValue);
          break;
        case "m":
          newDateValue.setMinutes(newDateValue.getMinutes() + incrementValue);
          break;
        case "s":
          newDateValue.setSeconds(newDateValue.getSeconds() + incrementValue);
          break;
        case "a":
          newDateValue.setHours((newDateValue.getHours() + 12) % 24);
          break;
        default:
          break;
      }
      this.maskDateValue = newDateValue.getFullYear() > 0 ? newDateValue : this.maskDateValue;
      if (this.validCharacters.indexOf(this.hiddenMask[start]) !== -1) {
        this.handleDeletion(this.hiddenMask[start], true);
      }
    };
    MaskedDateTime2.prototype.getCulturedValue = function(format) {
      var locale = this.parent.locale;
      var result;
      if (locale === "en" || locale === "en-US") {
        result = getValue(format, getDefaultDateObject());
      } else {
        result = getValue("main." + locale + (".dates.calendars.gregorian." + format), cldrData);
      }
      return result;
    };
    MaskedDateTime2.prototype.getCulturedFormat = function() {
      var formatString = this.getCulturedValue("dateTimeFormats[availableFormats].yMd").toString();
      if (this.parent.moduleName === "datepicker") {
        formatString = this.getCulturedValue("dateTimeFormats[availableFormats].yMd").toString();
        if (this.parent.format && this.parent.formatString) {
          formatString = this.parent.formatString;
        }
      }
      if (this.parent.moduleName === "datetimepicker") {
        formatString = this.getCulturedValue("dateTimeFormats[availableFormats].yMd").toString();
        if (this.parent.dateTimeFormat) {
          formatString = this.parent.dateTimeFormat;
        }
      }
      if (this.parent.moduleName === "timepicker") {
        formatString = this.parent.cldrTimeFormat();
      }
      return formatString;
    };
    MaskedDateTime2.prototype.clearHandler = function() {
      this.isDayPart = this.isMonthPart = this.isYearPart = this.isHourPart = this.isMinutePart = this.isSecondsPart = false;
      this.updateValue();
      if (this.parent.inputElement && this.parent.inputElement.value === this.parent.maskedDateValue && this.parent.inputWrapper && this.parent.inputWrapper.clearButton && !this.parent.inputWrapper.clearButton.classList.contains("e-clear-icon-hide")) {
        this.parent.inputWrapper.clearButton.classList.add("e-clear-icon-hide");
      }
    };
    MaskedDateTime2.prototype.updateValue = function() {
      this.monthCharacter = this.periodCharacter = "";
      var inputValue = this.dateformat.replace(this.formatRegex, this.formatCheck());
      this.isHiddenMask = true;
      this.hiddenMask = this.dateformat.replace(this.formatRegex, this.formatCheck());
      this.isHiddenMask = false;
      this.previousHiddenMask = this.hiddenMask;
      this.previousValue = inputValue;
      this.parent.updateInputValue(inputValue);
      if (this.parent.strictMode && (this.dayTypeCount !== 0 || this.monthTypeCount !== 0)) {
        this.isLeadingZero = false;
      }
      this.dayTypeCount = 0;
      this.monthTypeCount = 0;
    };
    MaskedDateTime2.prototype.destroy = function() {
      this.removeEventListener();
    };
    return MaskedDateTime2;
  }()
);

// node_modules/@syncfusion/ej2-calendars/src/calendar/islamic.js
var OTHERMONTH3 = "e-other-month";
var YEAR4 = "e-year";
var MONTH4 = "e-month";
var DECADE2 = "e-decade";
var DISABLED14 = "e-disabled";
var OVERLAY3 = "e-overlay";
var WEEKEND2 = "e-weekend";
var WEEKNUMBER3 = "e-week-number";
var SELECTED9 = "e-selected";
var FOCUSEDDATE3 = "e-focused-date";
var OTHERMONTHROW2 = "e-month-hide";
var TODAY3 = "e-today";
var LINK2 = "e-day";
var CELL2 = "e-cell";
var dayMilliSeconds2 = 864e5;
var minDecade = 2060;
var maxDecade = 2069;
var Islamic = (
  /** @class */
  function() {
    function Islamic2(instance) {
      this.calendarInstance = instance;
    }
    Islamic2.prototype.getModuleName = function() {
      return "islamic";
    };
    Islamic2.prototype.islamicTitleUpdate = function(date, view) {
      var globalize = new Internationalization(this.calendarInstance.locale);
      switch (view) {
        case "days":
          this.calendarInstance.headerTitleElement.textContent = globalize.formatDate(date, {
            type: "dateTime",
            format: "MMMMyyyy",
            calendar: "islamic"
          });
          break;
        case "months":
          this.calendarInstance.headerTitleElement.textContent = globalize.formatDate(date, {
            type: "dateTime",
            format: "yyyy",
            calendar: "islamic"
          });
      }
    };
    Islamic2.prototype.islamicRenderDays = function(currentDate, value, multiSelection, values) {
      var tdEles = [];
      var cellsCount = 42;
      var localDate = new Date(this.islamicInValue(currentDate));
      var minMaxDate;
      this.islamicTitleUpdate(currentDate, "days");
      var islamicDate = this.getIslamicDate(localDate);
      var gregorianObject = this.toGregorian(islamicDate.year, islamicDate.month, 1);
      var currentMonth = islamicDate.month;
      localDate = gregorianObject;
      while (localDate.getDay() !== this.calendarInstance.firstDayOfWeek) {
        this.calendarInstance.setStartDate(localDate, -1 * dayMilliSeconds2);
      }
      for (var day = 0; day < cellsCount; ++day) {
        var weekEle = this.calendarInstance.createElement("td", {
          className: CELL2
        });
        var weekAnchor = this.calendarInstance.createElement("span");
        if (day % 7 === 0 && this.calendarInstance.weekNumber) {
          weekAnchor.textContent = "" + this.calendarInstance.getWeek(localDate);
          weekEle.appendChild(weekAnchor);
          addClass([weekEle], "" + WEEKNUMBER3);
          tdEles.push(weekEle);
        }
        minMaxDate = /* @__PURE__ */ new Date(+localDate);
        localDate = this.calendarInstance.minMaxDate(localDate);
        var dateFormatOptions = {
          type: "dateTime",
          skeleton: "full",
          calendar: "islamic"
        };
        var date = this.calendarInstance.globalize.parseDate(this.calendarInstance.globalize.formatDate(localDate, dateFormatOptions), dateFormatOptions);
        var tdEle = this.islamicDayCell(localDate);
        var title = this.calendarInstance.globalize.formatDate(localDate, {
          type: "date",
          skeleton: "full",
          calendar: "islamic"
        });
        var dayLink = this.calendarInstance.createElement("span");
        dayLink.textContent = this.calendarInstance.globalize.formatDate(localDate, {
          type: "date",
          skeleton: "d",
          calendar: "islamic"
        });
        var disabled = this.calendarInstance.min > localDate || this.calendarInstance.max < localDate;
        if (disabled) {
          addClass([tdEle], DISABLED14);
          addClass([tdEle], OVERLAY3);
        } else {
          dayLink.setAttribute("title", "" + title);
        }
        var hijriMonthObject = this.getIslamicDate(localDate);
        if (currentMonth !== hijriMonthObject.month) {
          addClass([tdEle], OTHERMONTH3);
        }
        if (localDate.getDay() === 0 || localDate.getDay() === 6) {
          addClass([tdEle], WEEKEND2);
        }
        tdEle.appendChild(dayLink);
        this.calendarInstance.renderDayCellArgs = {
          date: localDate,
          isDisabled: false,
          element: tdEle,
          isOutOfRange: disabled
        };
        var argument = this.calendarInstance.renderDayCellArgs;
        this.calendarInstance.renderDayCellEvent(argument);
        if (argument.isDisabled) {
          if (this.calendarInstance.isMultiSelection) {
            if (!isNullOrUndefined(this.calendarInstance.values) && this.calendarInstance.values.length > 0) {
              for (var index = 0; index < values.length; index++) {
                var localDateString = +new Date(this.calendarInstance.globalize.formatDate(argument.date, {
                  type: "date",
                  skeleton: "yMd",
                  calendar: "islamic"
                }));
                var tempDateString = +new Date(this.calendarInstance.globalize.formatDate(this.calendarInstance.values[index], {
                  type: "date",
                  skeleton: "yMd",
                  calendar: "islamic"
                }));
                if (localDateString === tempDateString) {
                  this.calendarInstance.values.splice(index, 1);
                  index = -1;
                }
              }
            }
          } else if (value && +value === +argument.date) {
            this.calendarInstance.setProperties({
              value: null
            }, true);
          }
        }
        if (this.calendarInstance.renderDayCellArgs.isDisabled && !tdEle.classList.contains(SELECTED9)) {
          addClass([tdEle], DISABLED14);
          addClass([tdEle], OVERLAY3);
          if (+this.calendarInstance.renderDayCellArgs.date === +this.calendarInstance.todayDate) {
            this.calendarInstance.todayDisabled = true;
          }
        }
        var otherMnthBool = tdEle.classList.contains(OTHERMONTH3);
        var disabledCls = tdEle.classList.contains(DISABLED14);
        if (!disabledCls) {
          EventHandler.add(tdEle, "click", this.calendarInstance.clickHandler, this.calendarInstance);
        }
        if (this.calendarInstance.isMultiSelection && !isNullOrUndefined(this.calendarInstance.values) && !otherMnthBool && !disabledCls) {
          for (var tempValue = 0; tempValue < this.calendarInstance.values.length; tempValue++) {
            var localDateString = this.calendarInstance.globalize.formatDate(localDate, {
              type: "date",
              skeleton: "short",
              calendar: "islamic"
            });
            var tempDateString = this.calendarInstance.globalize.formatDate(this.calendarInstance.values[tempValue], {
              type: "date",
              skeleton: "short",
              calendar: "islamic"
            });
            if (localDateString === tempDateString && this.calendarInstance.getDateVal(localDate, this.calendarInstance.values[tempValue])) {
              addClass([tdEle], SELECTED9);
            } else {
              this.calendarInstance.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
            }
          }
          if (this.calendarInstance.values.length <= 0) {
            this.calendarInstance.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
          }
        } else if (!otherMnthBool && !disabledCls && this.calendarInstance.getDateVal(localDate, value)) {
          addClass([tdEle], SELECTED9);
        } else {
          this.calendarInstance.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
        }
        if (date.getDate() === (/* @__PURE__ */ new Date()).getDate() && date.getMonth() === (/* @__PURE__ */ new Date()).getMonth()) {
          if (date.getFullYear() === (/* @__PURE__ */ new Date()).getFullYear()) {
            addClass([tdEle], TODAY3);
          }
        }
        localDate = /* @__PURE__ */ new Date(+minMaxDate);
        tdEles.push(this.calendarInstance.renderDayCellArgs.element);
        this.calendarInstance.addDay(localDate, 1, null, this.calendarInstance.max, this.calendarInstance.min);
      }
      return tdEles;
    };
    Islamic2.prototype.islamicIconHandler = function() {
      new Date(this.islamicInValue(this.calendarInstance.currentDate)).setDate(1);
      var date = new Date(this.islamicInValue(this.calendarInstance.currentDate));
      switch (this.calendarInstance.currentView()) {
        case "Month":
          {
            var prevMonthCompare = this.islamicCompareMonth(date, this.calendarInstance.min) < 1;
            var nextMonthCompare = this.islamicCompareMonth(date, this.calendarInstance.max) > -1;
            this.calendarInstance.previousIconHandler(prevMonthCompare);
            this.calendarInstance.nextIconHandler(nextMonthCompare);
          }
          break;
        case "Year":
          {
            var prevYearCompare = this.hijriCompareYear(date, this.calendarInstance.min) < 1;
            var nextYearCompare = this.hijriCompareYear(date, this.calendarInstance.max) > -1;
            this.calendarInstance.previousIconHandler(prevYearCompare);
            this.calendarInstance.nextIconHandler(nextYearCompare);
          }
          break;
        case "Decade": {
          var startIslamicYear = 1361;
          var gregorianValue = HijriParser.toGregorian(startIslamicYear, 1, 1);
          var prevDecadeCompare = this.hijriCompareDecade(date, this.calendarInstance.min) < 1;
          var nextDecadeCompare = this.hijriCompareDecade(date, this.calendarInstance.max) > -1;
          prevDecadeCompare = HijriParser.toGregorian(this.calendarInstance.headerTitleElement.textContent.split("-")[0].trim(), 1, 1).getFullYear() === gregorianValue.getFullYear() ? true : prevDecadeCompare;
          this.calendarInstance.previousIconHandler(prevDecadeCompare);
          this.calendarInstance.nextIconHandler(nextDecadeCompare);
        }
      }
    };
    Islamic2.prototype.islamicNext = function() {
      this.calendarInstance.effect = "";
      var view = this.calendarInstance.getViewNumber(this.calendarInstance.currentView());
      var islamicDate = this.getIslamicDate(this.calendarInstance.currentDate);
      switch (this.calendarInstance.currentView()) {
        case "Year":
          this.calendarInstance.currentDate = this.toGregorian(islamicDate.year + 1, islamicDate.month, 1);
          this.calendarInstance.switchView(view);
          break;
        case "Month":
          this.calendarInstance.currentDate = this.toGregorian(islamicDate.year, islamicDate.month + 1, 1);
          this.calendarInstance.switchView(view);
          break;
        case "Decade":
          this.calendarInstance.nextIconClicked = true;
          if (islamicDate.year - this.calendarInstance.headerElement.textContent.split("-")[0].trim() === 1) {
            islamicDate.year = islamicDate.year - this.calendarInstance.headerElement.textContent.split("-")[0].trim() === 1 ? islamicDate.year + 1 : islamicDate.year;
          }
          this.calendarInstance.currentDate = this.toGregorian(islamicDate.year + 10, islamicDate.month, 1);
          this.calendarInstance.switchView(view);
          break;
      }
    };
    Islamic2.prototype.islamicPrevious = function() {
      var currentView = this.calendarInstance.getViewNumber(this.calendarInstance.currentView());
      this.calendarInstance.effect = "";
      var islamicDate = this.getIslamicDate(this.calendarInstance.currentDate);
      switch (this.calendarInstance.currentView()) {
        case "Month":
          this.calendarInstance.currentDate = this.toGregorian(islamicDate.year, islamicDate.month - 1, 1);
          this.calendarInstance.switchView(currentView);
          break;
        case "Year":
          this.calendarInstance.currentDate = this.toGregorian(islamicDate.year - 1, islamicDate.month, 1);
          this.calendarInstance.switchView(currentView);
          break;
        case "Decade":
          this.calendarInstance.previousIconClicked = true;
          this.calendarInstance.currentDate = this.toGregorian(islamicDate.year - 10, islamicDate.month - 1, 1);
          this.calendarInstance.switchView(currentView);
          break;
      }
    };
    Islamic2.prototype.islamicRenderYears = function(e, value) {
      this.calendarInstance.removeTableHeadElement();
      var numCells = 4;
      var tdEles = [];
      var valueUtil = isNullOrUndefined(value);
      var curDate = new Date(this.islamicInValue(this.calendarInstance.currentDate));
      var localDate = curDate;
      var islamicDate = this.getIslamicDate(localDate);
      var gregorianObject = HijriParser.toGregorian(islamicDate.year, 1, 1);
      localDate = gregorianObject;
      var mon = islamicDate.month;
      var yr = islamicDate.year;
      var curYrs = islamicDate.year;
      var minYr = this.getIslamicDate(this.calendarInstance.min).year;
      var minMonth = this.getIslamicDate(this.calendarInstance.min).month;
      var maxYr = this.getIslamicDate(this.calendarInstance.max).year;
      var maxMonth = this.getIslamicDate(this.calendarInstance.max).month;
      this.islamicTitleUpdate(this.calendarInstance.currentDate, "months");
      for (var month = 1; month <= 12; ++month) {
        var islamicDate_1 = this.getIslamicDate(localDate);
        var gregorianObject_1 = HijriParser.toGregorian(islamicDate_1.year, month, 1);
        localDate = gregorianObject_1;
        var tdEle = this.islamicDayCell(localDate);
        var dayLink = this.calendarInstance.createElement("span");
        var localMonth = value && this.getIslamicDate(value).month === this.getIslamicDate(localDate).month;
        var select2 = value && this.getIslamicDate(value).year === yr && localMonth;
        dayLink.textContent = this.calendarInstance.globalize.formatDate(localDate, {
          type: "dateTime",
          format: "MMM",
          calendar: "islamic"
        });
        if (this.calendarInstance.min && (curYrs < minYr || month < minMonth && curYrs === minYr) || this.calendarInstance.max && (curYrs > maxYr || month > maxMonth && curYrs >= maxYr)) {
          addClass([tdEle], DISABLED14);
        } else if (!valueUtil && select2) {
          addClass([tdEle], SELECTED9);
        } else {
          if (this.getIslamicDate(localDate).month === mon && this.getIslamicDate(this.calendarInstance.currentDate).month === mon) {
            addClass([tdEle], FOCUSEDDATE3);
          }
        }
        if (!tdEle.classList.contains(DISABLED14)) {
          EventHandler.add(tdEle, "click", this.calendarInstance.clickHandler, this.calendarInstance);
        }
        tdEle.appendChild(dayLink);
        tdEles.push(tdEle);
      }
      this.islamicRenderTemplate(tdEles, numCells, YEAR4, e, value);
    };
    Islamic2.prototype.islamicRenderDecade = function(e, value) {
      this.calendarInstance.removeTableHeadElement();
      var numCells = 4;
      var yearCell = 12;
      var tdEles = [];
      var localDate = new Date(this.islamicInValue(this.calendarInstance.currentDate));
      var islamicDate = this.getIslamicDate(localDate);
      var gregorianObject = HijriParser.toGregorian(islamicDate.year, 1, 1);
      localDate = gregorianObject;
      var localYr = localDate.getFullYear();
      var startYr = new Date(this.islamicInValue(localYr - localYr % 10));
      var endYr = new Date(this.islamicInValue(localYr - localYr % 10 + (10 - 1)));
      var startFullYr = startYr.getFullYear();
      var endFullYr = endYr.getFullYear();
      var startHdrYr = this.calendarInstance.globalize.formatDate(startYr, {
        type: "dateTime",
        format: "y",
        calendar: "islamic"
      });
      var endHdrYr = this.calendarInstance.globalize.formatDate(endYr, {
        type: "dateTime",
        format: "y",
        calendar: "islamic"
      });
      if (this.calendarInstance.locale === "ar") {
        startHdrYr = Number(startHdrYr.replace(/[٠١٢٣٤٥٦٧٨٩]/g, function(d) {
          return String.fromCharCode(d.charCodeAt(0) - 1632 + 48);
        }));
        endHdrYr = Number(endHdrYr.replace(/[٠١٢٣٤٥٦٧٨٩]/g, function(d) {
          return String.fromCharCode(d.charCodeAt(0) - 1632 + 48);
        }));
      }
      var splityear = this.calendarInstance.headerElement.textContent.split("-");
      if (!isNullOrUndefined(e) && splityear[0] !== startHdrYr && e.action === "home" || !isNullOrUndefined(e) && e.type === "keydown" && e.action === "end") {
        startHdrYr = this.calendarInstance.headerElement.textContent.split("-")[0].trim();
        endHdrYr = this.calendarInstance.headerElement.textContent.split("-")[1].trim();
      }
      if (this.calendarInstance.islamicPreviousHeader) {
        startHdrYr = this.calendarInstance.islamicPreviousHeader.split("-")[0].trim();
        endHdrYr = this.calendarInstance.islamicPreviousHeader.split("-")[1].trim();
        this.calendarInstance.islamicPreviousHeader = null;
      }
      if (this.calendarInstance.previousIconClicked) {
        var i = 0;
        for (i = 0; i <= splityear.length; i++) {
          endHdrYr = endHdrYr - splityear[i] === 2 || splityear[i] - endHdrYr === 2 ? (parseInt(endHdrYr, 10) + 1).toString() : endHdrYr - splityear[i] === 3 || splityear[i] - endHdrYr === 3 ? (parseInt(endHdrYr, 10) + 2).toString() : endHdrYr - splityear[i] === 4 || splityear[i] - endHdrYr === 4 ? (parseInt(endHdrYr, 10) + 3).toString() : endHdrYr - splityear[i] === 5 || splityear[i] - endHdrYr === 5 ? (parseInt(endHdrYr, 10) + 4).toString() : endHdrYr;
          if (endHdrYr - splityear[i] === 0 || splityear[i] - endHdrYr === 0) {
            endHdrYr = (parseInt(endHdrYr, 10) - 1).toString();
          }
        }
        if (endHdrYr - splityear[i] === 8 || splityear[i] - endHdrYr === 8) {
          endHdrYr = (parseInt(endHdrYr, 10) - 9).toString();
          startHdrYr = (parseInt(endHdrYr, 10) - 9).toString();
        }
        if (endHdrYr - splityear[i] === 7 || splityear[i] - endHdrYr === 7) {
          endHdrYr = (parseInt(endHdrYr, 10) - 8).toString();
          startHdrYr = (parseInt(endHdrYr, 10) - 9).toString();
        }
        startHdrYr = endHdrYr - startHdrYr === 10 ? (parseInt(startHdrYr, 10) + 1).toString() : endHdrYr - startHdrYr === 11 ? (parseInt(startHdrYr, 10) + 2).toString() : endHdrYr - startHdrYr === 12 ? (parseInt(startHdrYr, 10) + 3).toString() : startHdrYr;
        if (endHdrYr - startHdrYr === 8) {
          startHdrYr = (parseInt(startHdrYr, 10) - 1).toString();
        }
      }
      if (this.calendarInstance.nextIconClicked) {
        for (var i = 0; i <= splityear.length; i++) {
          if (startHdrYr - splityear[i] === 0 || splityear[i] - startHdrYr === 0) {
            startHdrYr = (parseInt(startHdrYr, 10) + 1).toString();
          }
          if (startHdrYr - splityear[i] === 2 && startHdrYr > splityear[i].trim()) {
            startHdrYr = (parseInt(startHdrYr, 10) - 1).toString();
          }
          if (splityear[i] - startHdrYr === 1 && startHdrYr < splityear[i].trim()) {
            startHdrYr = (parseInt(startHdrYr, 10) + 2).toString();
          }
        }
        if (startHdrYr - this.calendarInstance.headerTitleElement.textContent.split("-")[1].trim() > 1) {
          startHdrYr = (parseInt(this.calendarInstance.headerTitleElement.textContent.split("-")[1].trim(), 10) + 1).toString();
          endHdrYr = (parseInt(startHdrYr, 10) + 9).toString();
        }
        endHdrYr = endHdrYr - startHdrYr === 10 ? (parseInt(endHdrYr, 10) - 1).toString() : endHdrYr;
        endHdrYr = endHdrYr - startHdrYr === 7 ? (parseInt(endHdrYr, 10) + 2).toString() : endHdrYr - startHdrYr === 8 ? (parseInt(endHdrYr, 10) + 1).toString() : endHdrYr;
      }
      if (this.calendarInstance.locale === "ar") {
        var startHeaderYear = this.calendarInstance.globalize.formatDate(startYr, {
          type: "dateTime",
          format: "y",
          calendar: "islamic"
        });
        var endHeaderYear = this.calendarInstance.globalize.formatDate(endYr, {
          type: "dateTime",
          format: "y",
          calendar: "islamic"
        });
        this.calendarInstance.headerTitleElement.textContent = startHeaderYear + " - " + endHeaderYear;
      } else {
        this.calendarInstance.headerTitleElement.textContent = startHdrYr + " - " + endHdrYr;
      }
      this.calendarInstance.nextIconClicked = this.calendarInstance.previousIconClicked = false;
      var year = (parseInt(startHdrYr, 10) - 2).toString();
      startFullYr = Math.round(parseInt(startHdrYr, 10) * 0.97 + 622);
      endFullYr = Math.round(parseInt(endHdrYr, 10) * 0.97 + 622);
      var startYear = Math.round(parseInt(year, 10) * 0.97 + 622);
      for (var rowCount = 1; rowCount <= yearCell; ++rowCount) {
        var year_1 = startYear + rowCount;
        localDate.setFullYear(year_1);
        localDate.setDate(1);
        localDate.setMonth(0);
        if (this.getIslamicDate(localDate).year - islamicDate.year > 1) {
          localDate.setMonth(1);
          rowCount = rowCount - 1;
          localDate.setFullYear(localDate.getFullYear() - 1);
        }
        islamicDate = this.getIslamicDate(localDate);
        var gregorianObject_2 = HijriParser.toGregorian(islamicDate.year, 1, 1);
        localDate = gregorianObject_2;
        if (islamicDate.year === parseInt(startHdrYr, 10) - 1 || islamicDate.year >= startHdrYr && islamicDate.year <= endFullYr || islamicDate.year === parseInt(endHdrYr, 10) + 1) {
          var tdEle = this.islamicDayCell(localDate);
          attributes(tdEle, {
            "role": "gridcell"
          });
          var dayLink = this.calendarInstance.createElement("span");
          dayLink.textContent = this.calendarInstance.globalize.formatDate(localDate, {
            type: "dateTime",
            format: "y",
            calendar: "islamic"
          });
          if (islamicDate.year === parseInt(startHdrYr, 10) - 1 || year_1 < startFullYr || year_1 > endFullYr && islamicDate.year !== parseInt(endHdrYr, 10)) {
            addClass([tdEle], OTHERMONTH3);
          } else if (year_1 < new Date(this.islamicInValue(this.calendarInstance.min)).getFullYear() || year_1 > new Date(this.islamicInValue(this.calendarInstance.max)).getFullYear()) {
            addClass([tdEle], DISABLED14);
          } else if (!isNullOrUndefined(value) && this.getIslamicDate(localDate).year === this.getIslamicDate(value).year) {
            addClass([tdEle], SELECTED9);
          } else {
            if (localDate.getFullYear() === this.calendarInstance.currentDate.getFullYear() && !tdEle.classList.contains(DISABLED14)) {
              addClass([tdEle], FOCUSEDDATE3);
            }
          }
          if (!tdEle.classList.contains(DISABLED14)) {
            EventHandler.add(tdEle, "click", this.calendarInstance.clickHandler, this.calendarInstance);
          }
          tdEle.appendChild(dayLink);
          if (!isNullOrUndefined(e) && e.action === "home" && islamicDate.year.toString() === startHdrYr || !isNullOrUndefined(e) && e.action === "end" && islamicDate.year.toString() === endHdrYr) {
            addClass([tdEle], FOCUSEDDATE3);
          }
          tdEles.push(tdEle);
        }
      }
      this.islamicRenderTemplate(tdEles, numCells, "e-decade", e, value);
    };
    Islamic2.prototype.islamicDayCell = function(localDate) {
      var dateFormatOptions = {
        skeleton: "full",
        type: "dateTime",
        calendar: "islamic"
      };
      var formatDate = this.calendarInstance.globalize.formatDate(localDate, dateFormatOptions);
      var date = this.calendarInstance.globalize.parseDate(formatDate, dateFormatOptions);
      var value = date.valueOf();
      var attrs = {
        className: CELL2,
        attrs: {
          "id": "" + getUniqueID("" + value),
          "aria-selected": "false",
          "role": "gridcell"
        }
      };
      return this.calendarInstance.createElement("td", attrs);
    };
    Islamic2.prototype.islamicRenderTemplate = function(elements, count, classNm, e, value) {
      var view = this.calendarInstance.getViewNumber(this.calendarInstance.currentView());
      var trEle;
      this.calendarInstance.tableBodyElement = this.calendarInstance.createElement("tbody");
      this.calendarInstance.table.appendChild(this.calendarInstance.tableBodyElement);
      removeClass([this.calendarInstance.contentElement, this.calendarInstance.headerElement], [MONTH4, DECADE2, YEAR4]);
      addClass([this.calendarInstance.contentElement, this.calendarInstance.headerElement], [classNm]);
      var weekNumCell = 41;
      var numberCell = 35;
      var otherMonthCell = 6;
      var row = count;
      var rowCount = 0;
      for (var dayCell = 0; dayCell < Math.round(elements.length / count); ++dayCell) {
        trEle = this.calendarInstance.createElement("tr", {
          attrs: {
            "role": "row"
          }
        });
        for (rowCount = 0 + rowCount; rowCount < row; rowCount++) {
          if (!elements[rowCount].classList.contains("e-week-number") && !isNullOrUndefined(elements[rowCount].children[0])) {
            addClass([elements[rowCount].children[0]], [LINK2]);
            rippleEffect(elements[rowCount].children[0], {
              duration: 600,
              isCenterRipple: true
            });
          }
          trEle.appendChild(elements[rowCount]);
          if (this.calendarInstance.weekNumber && rowCount === otherMonthCell + 1 && elements[otherMonthCell + 1].classList.contains(OTHERMONTH3)) {
            addClass([trEle], OTHERMONTHROW2);
          }
          if (!this.calendarInstance.weekNumber && rowCount === otherMonthCell && elements[otherMonthCell].classList.contains(OTHERMONTH3)) {
            addClass([trEle], OTHERMONTHROW2);
          }
          if (this.calendarInstance.weekNumber) {
            if (rowCount === weekNumCell && elements[weekNumCell].classList.contains(OTHERMONTH3)) {
              addClass([trEle], OTHERMONTHROW2);
            }
          } else {
            if (rowCount === numberCell && elements[numberCell].classList.contains(OTHERMONTH3)) {
              addClass([trEle], OTHERMONTHROW2);
            }
          }
        }
        row = row + count;
        rowCount = rowCount + 0;
        this.calendarInstance.tableBodyElement.appendChild(trEle);
      }
      this.calendarInstance.table.querySelector("tbody").className = this.calendarInstance.effect;
      this.islamicIconHandler();
      if (view !== this.calendarInstance.getViewNumber(this.calendarInstance.currentView()) || view === 0 && view !== this.calendarInstance.getViewNumber(this.calendarInstance.currentView())) {
        this.calendarInstance.navigateHandler(e);
      }
      this.calendarInstance.setAriaActiveDescendant();
      this.calendarInstance.changedArgs = {
        value: this.calendarInstance.value,
        values: this.calendarInstance.values
      };
      this.calendarInstance.changeHandler();
    };
    Islamic2.prototype.islamicCompareMonth = function(start, end) {
      var hijriStart = this.getIslamicDate(start);
      var hijriEnd = this.getIslamicDate(end);
      var result;
      if (hijriStart.year > hijriEnd.year) {
        result = 1;
      } else if (hijriStart.year < hijriEnd.year) {
        result = -1;
      } else {
        result = hijriStart.month === hijriEnd.month ? 0 : hijriStart.month > hijriEnd.month ? 1 : -1;
      }
      return result;
    };
    Islamic2.prototype.islamicCompare = function(startDate, endDate, modifier) {
      var hijriStart = this.getIslamicDate(startDate);
      var hijriEnd = this.getIslamicDate(endDate);
      var start = hijriEnd.year;
      var end;
      var result;
      end = start;
      result = 0;
      if (modifier) {
        start = start - start % modifier;
        end = start - start % modifier + modifier - 1;
      }
      if (hijriStart.year > end) {
        result = 1;
      } else if (this.calendarInstance.currentView() === "Decade" && hijriStart.year < start && !(startDate.getFullYear() >= minDecade && startDate.getFullYear() <= maxDecade)) {
        result = -1;
      } else if (hijriStart.year < start && this.calendarInstance.currentView() === "Year") {
        result = -1;
      }
      return result;
    };
    Islamic2.prototype.getIslamicDate = function(date) {
      return HijriParser.getHijriDate(date);
    };
    Islamic2.prototype.toGregorian = function(year, month, date) {
      return HijriParser.toGregorian(year, month, date);
    };
    Islamic2.prototype.hijriCompareYear = function(start, end) {
      return this.islamicCompare(start, end, 0);
    };
    Islamic2.prototype.hijriCompareDecade = function(start, end) {
      return this.islamicCompare(start, end, 10);
    };
    Islamic2.prototype.destroy = function() {
      this.calendarInstance = null;
    };
    Islamic2.prototype.islamicInValue = function(inValue) {
      if (inValue instanceof Date) {
        return inValue.toUTCString();
      } else {
        return "" + inValue;
      }
    };
    return Islamic2;
  }()
);

// node_modules/@syncfusion/ej2-file-utils/src/save.js
var Save = (
  /** @class */
  function() {
    function Save2() {
    }
    Save2.save = function(fileName, buffer) {
      if (fileName === null || fileName === void 0 || fileName === "") {
        throw new Error("ArgumentException: fileName cannot be undefined, null or empty");
      }
      var extension = fileName.substring(fileName.lastIndexOf(".") + 1, fileName.length);
      var mimeType = this.getMimeType(extension);
      if (mimeType !== "") {
        buffer = new Blob([buffer], {
          type: mimeType
        });
      }
      if (this.isMicrosoftBrowser) {
        navigator.msSaveBlob(buffer, fileName);
      } else {
        var downloadLink = document.createElementNS("http://www.w3.org/1999/xhtml", "a");
        this.saveInternal(fileName, extension, buffer, downloadLink, "download" in downloadLink);
      }
    };
    Save2.saveInternal = function(fileName, extension, buffer, downloadLink, hasDownloadAttribute) {
      if (hasDownloadAttribute) {
        downloadLink.download = fileName;
        var dataUrl_1 = window.URL.createObjectURL(buffer);
        downloadLink.href = dataUrl_1;
        var event_1 = document.createEvent("MouseEvent");
        event_1.initEvent("click", true, true);
        downloadLink.dispatchEvent(event_1);
        setTimeout(function() {
          window.URL.revokeObjectURL(dataUrl_1);
          dataUrl_1 = void 0;
        });
      } else {
        if (extension !== "docx" && extension !== "xlsx") {
          var url = window.URL.createObjectURL(buffer);
          var isPopupBlocked = window.open(url, "_blank");
          if (!isPopupBlocked) {
            window.location.href = url;
          }
        } else {
          var reader_1 = new FileReader();
          reader_1.onloadend = function() {
            var isPopupBlocked2 = window.open(reader_1.result, "_blank");
            if (!isPopupBlocked2) {
              window.location.href = reader_1.result;
            }
          };
          reader_1.readAsDataURL(buffer);
        }
      }
    };
    Save2.getMimeType = function(extension) {
      var mimeType = "";
      switch (extension) {
        case "html":
          mimeType = "text/html";
          break;
        case "pdf":
          mimeType = "application/pdf";
          break;
        case "docx":
          mimeType = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
          break;
        case "xlsx":
          mimeType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
          break;
        case "txt":
          mimeType = "text/plain";
          break;
      }
      return mimeType;
    };
    return Save2;
  }()
);

// node_modules/@syncfusion/ej2-file-utils/src/xml-writer.js
var XmlWriter = (
  /** @class */
  function() {
    function XmlWriter2() {
      this.contentPos = 0;
      this.bufferText = "";
      this.bufferBlob = new Blob([""], {
        type: "text/plain"
      });
      this.currentState = "Initial";
      this.namespaceStack = [];
      this.namespaceStack.push(new Namespace());
      this.namespaceStack[0].set("xmlns", "http://www.w3.org/2000/xmlns/", "Special");
      this.namespaceStack.push(new Namespace());
      this.namespaceStack[1].set("xml", "http://www.w3.org/XML/1998/namespace", "Special");
      this.namespaceStack.push(new Namespace());
      this.namespaceStack[2].set("", "", "Implied");
      this.elementStack = [];
      this.elementStack.push(new XmlElement());
      this.elementStack[0].set("", "", "", this.namespaceStack.length - 1);
      this.attributeStack = [];
      Save.isMicrosoftBrowser = !!navigator.msSaveBlob;
    }
    Object.defineProperty(XmlWriter2.prototype, "buffer", {
      /**
       * Gets the content written to the {XmlWriter} as Blob.
       * @returns {Blob}
       */
      get: function() {
        this.flush();
        return this.bufferBlob;
      },
      enumerable: true,
      configurable: true
    });
    XmlWriter2.prototype.writeProcessingInstruction = function(name, text) {
      if (name === void 0 || name === null || name.length === 0) {
        throw new Error("ArgumentException: name should not be undefined, null or empty");
      }
      this.checkName(name);
      if (text === void 0 || text === null) {
        text = "";
      }
      if (name.length === 3 && name === "xml") {
        if (this.currentState !== "Initial") {
          throw new Error("InvalidArgumentException: Cannot write XML declaration.WriteStartDocument method has already written it");
        }
      }
      if (this.currentState !== "Initial" || this.bufferBlob === void 0) {
        throw new Error("InvalidOperationException: Wrong Token");
      } else {
        this.writeStartDocument();
        this.writeProcessingInstructionInternal(name, text);
      }
    };
    XmlWriter2.prototype.writeStartDocument = function(standalone) {
      if (this.currentState !== "Initial" || this.bufferBlob === void 0) {
        throw new Error("InvalidOperationException: Wrong Token");
      }
      this.currentState = "StartDocument";
      this.rawText('<?xml version="1.0" encoding="utf-8');
      if (standalone !== null && standalone !== void 0) {
        this.rawText('" standalone="');
        this.rawText(standalone ? "yes" : "no");
      }
      this.rawText('"?>');
    };
    XmlWriter2.prototype.writeEndDocument = function() {
      while (this.elementStack.length - 1 > 0) {
        this.writeEndElement();
      }
      this.currentState = "EndDocument";
      this.flush();
    };
    XmlWriter2.prototype.writeStartElement = function(prefix, localName, namespace) {
      if (this.bufferBlob === void 0) {
        throw new Error("InvalidOperationException: Wrong Token");
      }
      if (localName === void 0 || localName === null || localName.length === 0) {
        throw new Error("ArgumentException: localName cannot be undefined, null or empty");
      }
      this.checkName(localName);
      if (this.currentState === "Initial") {
        this.writeStartDocument();
      }
      if (this.currentState === "StartElement") {
        this.startElementContent();
      }
      this.currentState = "StartElement";
      if (prefix === void 0 || prefix === null) {
        if (namespace !== void 0 && namespace !== null) {
          prefix = this.lookupPrefix(namespace);
        }
        if (prefix === void 0 || prefix === null) {
          prefix = "";
        }
      } else if (prefix.length > 0) {
        if (namespace === void 0 || namespace === null) {
          namespace = this.lookupNamespace(prefix);
        }
        if (namespace === void 0 || namespace === null || namespace !== void 0 && namespace.length === 0) {
          throw new Error("ArgumentException: Cannot use a prefix with an empty namespace");
        }
      }
      if (namespace === void 0 || namespace === null) {
        namespace = this.lookupNamespace(prefix);
      }
      this.writeStartElementInternal(prefix, localName, namespace);
    };
    XmlWriter2.prototype.writeEndElement = function() {
      if (this.currentState === "StartElement") {
        this.startElementContent();
        this.currentState = "ElementContent";
      } else if (this.currentState === "ElementContent") {
        this.currentState = "ElementContent";
      }
      this.currentState = "EndElement";
      var top = this.elementStack.length - 1;
      this.writeEndElementInternal(this.elementStack[top].prefix, this.elementStack[top].localName);
      this.namespaceStack.splice(this.elementStack[top].previousTop + 1);
      this.elementStack.splice(top);
      if (this.bufferText.length > 10240) {
        this.flush();
      }
    };
    XmlWriter2.prototype.writeElementString = function(prefix, localName, namespace, value) {
      this.writeStartElement(prefix, localName, namespace);
      if (value !== void 0 && value !== null && value.length !== 0) {
        this.writeString(value);
      }
      this.writeEndElement();
    };
    XmlWriter2.prototype.writeAttributeString = function(prefix, localName, namespace, value) {
      this.writeStartAttribute(prefix, localName, namespace, value);
      this.writeStringInternal(value, true);
      this.writeEndAttribute();
    };
    XmlWriter2.prototype.writeString = function(text) {
      this.writeInternal(text, false);
    };
    XmlWriter2.prototype.writeRaw = function(text) {
      this.writeInternal(text, true);
    };
    XmlWriter2.prototype.writeInternal = function(text, isRawString) {
      if (text === void 0 || text === null) {
        return;
      } else {
        if (this.currentState !== "StartElement" && this.currentState !== "ElementContent") {
          throw new Error("InvalidOperationException: Wrong Token");
        }
        if (this.currentState === "StartElement") {
          this.startElementContent();
        }
        this.currentState = "ElementContent";
        if (isRawString) {
          this.rawText(text);
        } else {
          this.writeStringInternal(text, false);
        }
      }
    };
    XmlWriter2.prototype.save = function(fileName) {
      while (this.elementStack.length - 1 > 0) {
        this.writeEndElement();
      }
      if (this.bufferText !== "") {
        this.flush();
      }
      Save.save(fileName, this.buffer);
    };
    XmlWriter2.prototype.destroy = function() {
      this.bufferBlob = void 0;
      for (var i = 0; i < this.namespaceStack.length; i++) {
        this.namespaceStack[i].destroy();
      }
      this.namespaceStack = [];
      for (var i = 0; i < this.elementStack.length; i++) {
        this.elementStack[i].destroy();
      }
      this.elementStack = [];
      this.bufferText = "";
      this.contentPos = 0;
    };
    XmlWriter2.prototype.flush = function() {
      if (this.bufferBlob === void 0) {
        return;
      }
      this.bufferBlob = new Blob([this.bufferBlob, this.bufferText], {
        type: "text/plain"
      });
      this.bufferText = "";
    };
    XmlWriter2.prototype.writeProcessingInstructionInternal = function(name, text) {
      this.bufferText += "<?";
      this.rawText(name);
      if (text.length > 0) {
        this.bufferText += " ";
        text = text.replace(/\?\>/g, "? >");
        this.bufferText += text;
      }
      this.bufferText += "?";
      this.bufferText += ">";
    };
    XmlWriter2.prototype.writeStartAttribute = function(prefix, localName, namespace, value) {
      if (localName === void 0 || localName === null || localName.length === 0) {
        if (prefix === "xmlns") {
          localName = "xmlns";
          prefix = "";
        } else {
          throw new Error("ArgumentException: localName cannot be undefined, null or empty");
        }
      }
      if (this.currentState !== "StartElement") {
        throw new Error("InvalidOperationException: Wrong Token");
      }
      this.checkName(localName);
      this.writeStartAttributePrefixAndNameSpace(prefix, localName, namespace, value);
    };
    XmlWriter2.prototype.writeStartAttributePrefixAndNameSpace = function(prefix, localName, namespace, value) {
      if (prefix === void 0 || prefix === null) {
        if (namespace !== void 0 && namespace !== null) {
          if (!(localName === "xmlns" && namespace === "http://www.w3.org/2000/xmlns/")) {
            prefix = this.lookupPrefix(namespace);
          }
        }
        if (prefix === void 0 || prefix === null) {
          prefix = "";
        }
      }
      if (namespace === void 0 || namespace === null) {
        if (prefix !== void 0 && prefix !== null && prefix.length > 0) {
          namespace = this.lookupNamespace(prefix);
        }
        if (namespace === void 0 || namespace === null) {
          namespace = "";
        }
      }
      this.writeStartAttributeSpecialAttribute(prefix, localName, namespace, value);
    };
    XmlWriter2.prototype.writeStartAttributeSpecialAttribute = function(prefix, localName, namespace, value) {
      if (prefix.length === 0) {
        if (localName[0] === "x" && localName === "xmlns") {
          this.skipPushAndWrite(prefix, localName, namespace);
          this.pushNamespaceExplicit("", value);
          return;
        } else if (namespace.length > 0) {
          prefix = this.lookupPrefix(namespace);
        }
      } else {
        if (prefix[0] === "x") {
          if (prefix === "xmlns") {
            this.skipPushAndWrite(prefix, localName, namespace);
            this.pushNamespaceExplicit(localName, value);
            return;
          } else if (prefix === "xml") {
            if (localName === "space" || localName === "lang") {
              this.skipPushAndWrite(prefix, localName, namespace);
              return;
            }
          }
        }
        if (namespace.length === 0) {
          prefix = "";
        }
      }
      if (prefix !== void 0 && prefix !== null && prefix.length !== 0) {
        this.pushNamespaceImplicit(prefix, namespace);
      }
      this.skipPushAndWrite(prefix, localName, namespace);
    };
    XmlWriter2.prototype.writeEndAttribute = function() {
      this.currentState = "StartElement";
      this.bufferText += '"';
    };
    XmlWriter2.prototype.writeStartElementInternal = function(prefix, localName, namespace) {
      this.bufferText += "<";
      if (prefix.length > 0) {
        this.rawText(prefix);
        this.bufferText += ":";
      }
      this.rawText(localName);
      var top = this.elementStack.length;
      this.elementStack.push(new XmlElement());
      this.elementStack[top].set(prefix, localName, namespace, this.namespaceStack.length - 1);
      this.pushNamespaceImplicit(prefix, namespace);
      for (var i = 0; i < this.attributeStack.length; i++) {
        this.attributeStack[i].destroy();
      }
      this.attributeStack = [];
    };
    XmlWriter2.prototype.writeEndElementInternal = function(prefix, localName) {
      if (this.contentPos !== this.bufferText.length + 1) {
        this.bufferText += "</";
        if (prefix !== void 0 && prefix !== null && prefix.length !== 0) {
          this.rawText(prefix);
          this.bufferText += ":";
        }
        this.rawText(localName);
        this.bufferText += ">";
      } else {
        this.bufferText = this.bufferText.substring(0, this.bufferText.length - 1);
        this.bufferText += " />";
      }
    };
    XmlWriter2.prototype.writeStartAttributeInternal = function(prefix, localName, namespaceName) {
      this.bufferText += " ";
      if (prefix !== void 0 && prefix !== null && prefix.length > 0) {
        this.rawText(prefix);
        this.bufferText += ":";
      }
      this.rawText(localName);
      this.bufferText += "=";
      this.bufferText += '"';
    };
    XmlWriter2.prototype.writeNamespaceDeclaration = function(prefix, namespaceUri) {
      this.writeStartNamespaceDeclaration(prefix);
      this.writeStringInternal(namespaceUri, true);
      this.bufferText += '"';
    };
    XmlWriter2.prototype.writeStartNamespaceDeclaration = function(prefix) {
      if (prefix === void 0 || prefix === null || prefix.length === 0) {
        this.rawText(' xmlns="');
      } else {
        this.rawText(" xmlns:");
        this.rawText(prefix);
        this.bufferText += "=";
        this.bufferText += '"';
      }
    };
    XmlWriter2.prototype.writeStringInternal = function(text, inAttributeValue) {
      if (text === null || text === void 0) {
        text = "";
      }
      var tempText = "";
      text = text.replace(/\&/g, "&amp;");
      text = text.replace(/\</g, "&lt;");
      text = text.replace(/\>/g, "&gt;");
      if (inAttributeValue) {
        text = text.replace(/\"/g, "&quot;");
      }
      this.bufferText += text;
      if (!inAttributeValue) {
        this.contentPos = 0;
      }
    };
    XmlWriter2.prototype.startElementContent = function() {
      var start = this.elementStack[this.elementStack.length - 1].previousTop;
      for (var i = this.namespaceStack.length - 1; i > start; i--) {
        if (this.namespaceStack[i].kind === "NeedToWrite") {
          this.writeNamespaceDeclaration(this.namespaceStack[i].prefix, this.namespaceStack[i].namespaceUri);
        }
      }
      this.bufferText += ">";
      this.contentPos = this.bufferText.length + 1;
    };
    XmlWriter2.prototype.rawText = function(text) {
      this.bufferText += text;
    };
    XmlWriter2.prototype.addNamespace = function(prefix, ns, kind) {
      var top = this.namespaceStack.length;
      this.namespaceStack.push(new Namespace());
      this.namespaceStack[top].set(prefix, ns, kind);
    };
    XmlWriter2.prototype.lookupPrefix = function(namespace) {
      for (var i = this.namespaceStack.length - 1; i >= 0; i--) {
        if (this.namespaceStack[i].namespaceUri === namespace) {
          return this.namespaceStack[i].prefix;
        }
      }
      return void 0;
    };
    XmlWriter2.prototype.lookupNamespace = function(prefix) {
      for (var i = this.namespaceStack.length - 1; i >= 0; i--) {
        if (this.namespaceStack[i].prefix === prefix) {
          return this.namespaceStack[i].namespaceUri;
        }
      }
      return void 0;
    };
    XmlWriter2.prototype.lookupNamespaceIndex = function(prefix) {
      for (var i = this.namespaceStack.length - 1; i >= 0; i--) {
        if (this.namespaceStack[i].prefix === prefix) {
          return i;
        }
      }
      return -1;
    };
    XmlWriter2.prototype.pushNamespaceImplicit = function(prefix, ns) {
      var kind;
      var existingNsIndex = this.lookupNamespaceIndex(prefix);
      if (existingNsIndex !== -1) {
        if (existingNsIndex > this.elementStack[this.elementStack.length - 1].previousTop) {
          if (this.namespaceStack[existingNsIndex].namespaceUri !== ns) {
            throw new Error("XmlException namespace Uri needs to be the same as the one that is already declared");
          }
          return;
        } else {
          if (this.namespaceStack[existingNsIndex].kind === "Special") {
            if (prefix === "xml") {
              if (ns !== this.namespaceStack[existingNsIndex].namespaceUri) {
                throw new Error("InvalidArgumentException: Xml String");
              } else {
                kind = "Implied";
              }
            } else {
              throw new Error('InvalidArgumentException: Prefix "xmlns" is reserved for use by XML.');
            }
          } else {
            kind = this.namespaceStack[existingNsIndex].namespaceUri === ns ? "Implied" : "NeedToWrite";
          }
        }
      } else {
        if (ns === "http://www.w3.org/XML/1998/namespace" && prefix !== "xml" || ns === "http://www.w3.org/2000/xmlns/" && prefix !== "xmlns") {
          throw new Error("InvalidArgumentException");
        }
        kind = "NeedToWrite";
      }
      this.addNamespace(prefix, ns, kind);
    };
    XmlWriter2.prototype.pushNamespaceExplicit = function(prefix, ns) {
      var existingNsIndex = this.lookupNamespaceIndex(prefix);
      if (existingNsIndex !== -1) {
        if (existingNsIndex > this.elementStack[this.elementStack.length - 1].previousTop) {
          this.namespaceStack[existingNsIndex].kind = "Written";
          return;
        }
      }
      this.addNamespace(prefix, ns, "Written");
      return;
    };
    XmlWriter2.prototype.addAttribute = function(prefix, localName, namespaceName) {
      var top = this.attributeStack.length;
      this.attributeStack.push(new XmlAttribute());
      this.attributeStack[top].set(prefix, localName, namespaceName);
      for (var i = 0; i < top; i++) {
        if (this.attributeStack[i].isDuplicate(prefix, localName, namespaceName)) {
          throw new Error("XmlException: duplicate attribute name");
        }
      }
    };
    XmlWriter2.prototype.skipPushAndWrite = function(prefix, localName, namespace) {
      this.addAttribute(prefix, localName, namespace);
      this.writeStartAttributeInternal(prefix, localName, namespace);
    };
    XmlWriter2.prototype.checkName = function(text) {
      var format = /[ !@#$%^&*()+\=\[\]{};':"\\|,<>\/?]/;
      if (format.test(text)) {
        throw new Error("InvalidArgumentException: invalid name character");
      }
    };
    return XmlWriter2;
  }()
);
var Namespace = (
  /** @class */
  function() {
    function Namespace2() {
    }
    Namespace2.prototype.set = function(prefix, namespaceUri, kind) {
      this.prefix = prefix;
      this.namespaceUri = namespaceUri;
      this.kind = kind;
    };
    Namespace2.prototype.destroy = function() {
      this.prefix = void 0;
      this.namespaceUri = void 0;
      this.kind = void 0;
    };
    return Namespace2;
  }()
);
var XmlElement = (
  /** @class */
  function() {
    function XmlElement2() {
    }
    XmlElement2.prototype.set = function(prefix, localName, namespaceUri, previousTop) {
      this.previousTop = previousTop;
      this.prefix = prefix;
      this.namespaceUri = namespaceUri;
      this.localName = localName;
    };
    XmlElement2.prototype.destroy = function() {
      this.previousTop = void 0;
      this.prefix = void 0;
      this.localName = void 0;
      this.namespaceUri = void 0;
    };
    return XmlElement2;
  }()
);
var XmlAttribute = (
  /** @class */
  function() {
    function XmlAttribute2() {
    }
    XmlAttribute2.prototype.set = function(prefix, localName, namespaceUri) {
      this.prefix = prefix;
      this.namespaceUri = namespaceUri;
      this.localName = localName;
    };
    XmlAttribute2.prototype.isDuplicate = function(prefix, localName, namespaceUri) {
      return this.localName === localName && (this.prefix === prefix || this.namespaceUri === namespaceUri);
    };
    XmlAttribute2.prototype.destroy = function() {
      this.prefix = void 0;
      this.namespaceUri = void 0;
      this.localName = void 0;
    };
    return XmlAttribute2;
  }()
);

// node_modules/@syncfusion/ej2-file-utils/src/encoding.js
var Encoding = (
  /** @class */
  function() {
    function Encoding2(includeBom) {
      this.emitBOM = true;
      this.encodingType = "Ansi";
      this.initBOM(includeBom);
    }
    Object.defineProperty(Encoding2.prototype, "includeBom", {
      /**
       * Gets a value indicating whether to write a Unicode byte order mark
       * @returns boolean- true to specify that a Unicode byte order mark is written; otherwise, false
       */
      get: function() {
        return this.emitBOM;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Encoding2.prototype, "type", {
      /**
       * Gets the encoding type.
       * @returns EncodingType
       */
      get: function() {
        return this.encodingType;
      },
      /**
       * Sets the encoding type.
       * @param  {EncodingType} value
       */
      set: function(value) {
        this.encodingType = value;
      },
      enumerable: true,
      configurable: true
    });
    Encoding2.prototype.initBOM = function(includeBom) {
      if (includeBom === void 0 || includeBom === null) {
        this.emitBOM = true;
      } else {
        this.emitBOM = includeBom;
      }
    };
    Encoding2.prototype.getByteCount = function(chars) {
      var byteCount = 0;
      validateNullOrUndefined(chars, "string");
      if (chars === "") {
        var byte = this.utf8Len(chars.charCodeAt(0));
        return byte;
      }
      if (this.type === null || this.type === void 0) {
        this.type = "Ansi";
      }
      return this.getByteCountInternal(chars, 0, chars.length);
    };
    Encoding2.prototype.utf8Len = function(codePoint) {
      var bytes = codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : codePoint <= 2097151 ? 4 : 0;
      return bytes;
    };
    Encoding2.prototype.isHighSurrogate = function(codeUnit) {
      return codeUnit >= 55296 && codeUnit <= 56319;
    };
    Encoding2.prototype.toCodepoint = function(highCodeUnit, lowCodeUnit) {
      highCodeUnit = (1023 & highCodeUnit) << 10;
      var u = highCodeUnit | 1023 & lowCodeUnit;
      return u + 65536;
    };
    Encoding2.prototype.getByteCountInternal = function(chars, charIndex, charCount) {
      var byteCount = 0;
      if (this.encodingType === "Utf8" || this.encodingType === "Unicode") {
        var isUtf8 = this.encodingType === "Utf8";
        for (var i = 0; i < charCount; i++) {
          var charCode = chars.charCodeAt(isUtf8 ? charIndex : charIndex++);
          if (this.isHighSurrogate(charCode)) {
            if (isUtf8) {
              var high = charCode;
              var low = chars.charCodeAt(++charIndex);
              byteCount += this.utf8Len(this.toCodepoint(high, low));
            } else {
              byteCount += 4;
              ++i;
            }
          } else {
            if (isUtf8) {
              byteCount += this.utf8Len(charCode);
            } else {
              byteCount += 2;
            }
          }
          if (isUtf8) {
            charIndex++;
          }
        }
        return byteCount;
      } else {
        byteCount = charCount;
        return byteCount;
      }
    };
    Encoding2.prototype.getBytes = function(s, charIndex, charCount) {
      validateNullOrUndefined(s, "string");
      validateNullOrUndefined(charIndex, "charIndex");
      validateNullOrUndefined(charCount, "charCount");
      if (charIndex < 0 || charCount < 0) {
        throw new RangeError("Argument Out Of Range Exception: charIndex or charCount is less than zero");
      }
      if (s.length - charIndex < charCount) {
        throw new RangeError("Argument Out Of Range Exception: charIndex and charCount do not denote a valid range in string");
      }
      var bytes;
      if (s === "") {
        bytes = new ArrayBuffer(0);
        return bytes;
      }
      if (this.type === null || this.type === void 0) {
        this.type = "Ansi";
      }
      var byteCount = this.getByteCountInternal(s, charIndex, charCount);
      switch (this.type) {
        case "Utf8":
          bytes = this.getBytesOfUtf8Encoding(byteCount, s, charIndex, charCount);
          return bytes;
        case "Unicode":
          bytes = this.getBytesOfUnicodeEncoding(byteCount, s, charIndex, charCount);
          return bytes;
        default:
          bytes = this.getBytesOfAnsiEncoding(byteCount, s, charIndex, charCount);
          return bytes;
      }
    };
    Encoding2.prototype.getString = function(bytes, index, count) {
      validateNullOrUndefined(bytes, "bytes");
      validateNullOrUndefined(index, "index");
      validateNullOrUndefined(count, "count");
      if (index < 0 || count < 0) {
        throw new RangeError("Argument Out Of Range Exception: index or count is less than zero");
      }
      if (bytes.byteLength - index < count) {
        throw new RangeError("Argument Out Of Range Exception: index and count do not denote a valid range in bytes");
      }
      if (bytes.byteLength === 0 || count === 0) {
        return "";
      }
      if (this.type === null || this.type === void 0) {
        this.type = "Ansi";
      }
      var out = "";
      var byteCal = new Uint8Array(bytes);
      switch (this.type) {
        case "Utf8":
          var s = this.getStringOfUtf8Encoding(byteCal, index, count);
          return s;
        case "Unicode":
          var byteUnicode = new Uint16Array(bytes);
          out = this.getStringofUnicodeEncoding(byteUnicode, index, count);
          return out;
        default:
          var j = index;
          for (var i = 0; i < count; i++) {
            var c = byteCal[j];
            out += String.fromCharCode(c);
            j++;
          }
          return out;
      }
    };
    Encoding2.prototype.getBytesOfAnsiEncoding = function(byteCount, s, charIndex, charCount) {
      var bytes = new ArrayBuffer(byteCount);
      var bufview = new Uint8Array(bytes);
      var k = 0;
      for (var i = 0; i < charCount; i++) {
        var charcode = s.charCodeAt(charIndex++);
        if (charcode < 2048) {
          bufview[k] = charcode;
        } else {
          bufview[k] = 63;
        }
        k++;
      }
      return bytes;
    };
    Encoding2.prototype.getBytesOfUtf8Encoding = function(byteCount, s, charIndex, charCount) {
      var bytes = new ArrayBuffer(byteCount);
      var uint = new Uint8Array(bytes);
      var index = charIndex;
      var j = 0;
      for (var i = 0; i < charCount; i++) {
        var charcode = s.charCodeAt(index);
        if (charcode <= 127) {
          uint[j] = charcode;
        } else if (charcode < 2048) {
          uint[j] = 192 | charcode >> 6;
          uint[++j] = 128 | charcode & 63;
        } else if (charcode < 55296 || charcode >= 57344) {
          uint[j] = 224 | charcode >> 12;
          uint[++j] = 128 | charcode >> 6 & 63;
          uint[++j] = 128 | charcode & 63;
        } else {
          uint[j] = 239;
          uint[++j] = 191;
          uint[++j] = 189;
        }
        ++j;
        ++index;
      }
      return bytes;
    };
    Encoding2.prototype.getBytesOfUnicodeEncoding = function(byteCount, s, charIndex, charCount) {
      var bytes = new ArrayBuffer(byteCount);
      var uint16 = new Uint16Array(bytes);
      for (var i = 0; i < charCount; i++) {
        var charcode = s.charCodeAt(i);
        uint16[i] = charcode;
      }
      return bytes;
    };
    Encoding2.prototype.getStringOfUtf8Encoding = function(byteCal, index, count) {
      var j = 0;
      var i = index;
      var s = "";
      for (j; j < count; j++) {
        var c = byteCal[i++];
        while (i > byteCal.length) {
          return s;
        }
        if (c > 127) {
          if (c > 191 && c < 224 && i < count) {
            c = (c & 31) << 6 | byteCal[i] & 63;
          } else if (c > 223 && c < 240 && i < byteCal.byteLength) {
            c = (c & 15) << 12 | (byteCal[i] & 63) << 6 | byteCal[++i] & 63;
          } else if (c > 239 && c < 248 && i < byteCal.byteLength) {
            c = (c & 7) << 18 | (byteCal[i] & 63) << 12 | (byteCal[++i] & 63) << 6 | byteCal[++i] & 63;
          }
          ++i;
        }
        s += String.fromCharCode(c);
      }
      return s;
    };
    Encoding2.prototype.getStringofUnicodeEncoding = function(byteUni, index, count) {
      if (count > byteUni.length) {
        throw new RangeError("ArgumentOutOfRange_Count");
      }
      var byte16 = new Uint16Array(count);
      var out = "";
      for (var i = 0; i < count && i < byteUni.length; i++) {
        byte16[i] = byteUni[index++];
      }
      out = String.fromCharCode.apply(null, byte16);
      return out;
    };
    Encoding2.prototype.destroy = function() {
      this.emitBOM = void 0;
      this.encodingType = void 0;
    };
    return Encoding2;
  }()
);
function validateNullOrUndefined(value, message) {
  if (value === null || value === void 0) {
    throw new Error("ArgumentException: " + message + " cannot be null or undefined");
  }
}

// node_modules/@syncfusion/ej2-file-utils/src/stream-writer.js
var StreamWriter = (
  /** @class */
  function() {
    function StreamWriter2(encoding) {
      this.bufferBlob = new Blob([""]);
      this.bufferText = "";
      this.init(encoding);
      Save.isMicrosoftBrowser = !!navigator.msSaveBlob;
    }
    Object.defineProperty(StreamWriter2.prototype, "buffer", {
      /**
       * Gets the content written to the StreamWriter as Blob.
       * @returns Blob
       */
      get: function() {
        this.flush();
        return this.bufferBlob;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(StreamWriter2.prototype, "encoding", {
      /**
       * Gets the encoding.
       * @returns Encoding
       */
      get: function() {
        return this.enc;
      },
      enumerable: true,
      configurable: true
    });
    StreamWriter2.prototype.init = function(encoding) {
      if (encoding === null || encoding === void 0) {
        this.enc = new Encoding(false);
        this.enc.type = "Utf8";
      } else {
        this.enc = encoding;
        this.setBomByte();
      }
    };
    StreamWriter2.prototype.setBomByte = function() {
      if (this.encoding.includeBom) {
        switch (this.encoding.type) {
          case "Unicode":
            var arrayUnicode = new ArrayBuffer(2);
            var uint8 = new Uint8Array(arrayUnicode);
            uint8[0] = 255;
            uint8[1] = 254;
            this.bufferBlob = new Blob([arrayUnicode]);
            break;
          case "Utf8":
            var arrayUtf8 = new ArrayBuffer(3);
            var utf8 = new Uint8Array(arrayUtf8);
            utf8[0] = 239;
            utf8[1] = 187;
            utf8[2] = 191;
            this.bufferBlob = new Blob([arrayUtf8]);
            break;
          default:
            this.bufferBlob = new Blob([""]);
            break;
        }
      }
    };
    StreamWriter2.prototype.save = function(fileName) {
      if (this.bufferText !== "") {
        this.flush();
      }
      Save.save(fileName, this.buffer);
    };
    StreamWriter2.prototype.write = function(value) {
      if (this.encoding === void 0) {
        throw new Error("Object Disposed Exception: current writer is disposed");
      }
      validateNullOrUndefined(value, "string");
      this.bufferText += value;
      if (this.bufferText.length >= 10240) {
        this.flush();
      }
    };
    StreamWriter2.prototype.flush = function() {
      if (this.bufferText === void 0 || this.bufferText === null || this.bufferText.length === 0) {
        return;
      }
      var bufferArray = this.encoding.getBytes(this.bufferText, 0, this.bufferText.length);
      this.bufferText = "";
      this.bufferBlob = new Blob([this.bufferBlob, bufferArray]);
    };
    StreamWriter2.prototype.writeLine = function(value) {
      if (this.encoding === void 0) {
        throw new Error("Object Disposed Exception: current writer is disposed");
      }
      validateNullOrUndefined(value, "string");
      this.bufferText = this.bufferText + value + "\r\n";
      if (this.bufferText.length >= 10240) {
        this.flush();
      }
    };
    StreamWriter2.prototype.destroy = function() {
      this.bufferBlob = void 0;
      this.bufferText = void 0;
      if (this.enc instanceof Encoding) {
        this.enc.destroy();
      }
      this.enc = void 0;
    };
    return StreamWriter2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/worksheets.js
var __extends53 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Worksheets = (
  /** @class */
  function(_super) {
    __extends53(Worksheets2, _super);
    function Worksheets2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return Worksheets2;
  }(Array)
);

// node_modules/@syncfusion/ej2-excel-export/src/worksheet.js
var __extends54 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Worksheet = (
  /** @class */
  /* @__PURE__ */ function() {
    function Worksheet2() {
      this.isSummaryRowBelow = true;
      this.showGridLines = true;
      this.enableRtl = false;
    }
    return Worksheet2;
  }()
);
var HyperLink = (
  /** @class */
  /* @__PURE__ */ function() {
    function HyperLink2() {
    }
    return HyperLink2;
  }()
);
var Grouping = (
  /** @class */
  /* @__PURE__ */ function() {
    function Grouping2() {
    }
    return Grouping2;
  }()
);
var FreezePane = (
  /** @class */
  /* @__PURE__ */ function() {
    function FreezePane2() {
    }
    return FreezePane2;
  }()
);
var MergeCell = (
  /** @class */
  /* @__PURE__ */ function() {
    function MergeCell2() {
    }
    return MergeCell2;
  }()
);
var MergeCells = (
  /** @class */
  function(_super) {
    __extends54(MergeCells2, _super);
    function MergeCells2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.add = function(mergeCell) {
        var inserted = false;
        var count = 0;
        for (var _i = 0, _a = _this; _i < _a.length; _i++) {
          var mCell = _a[_i];
          if (MergeCells2.isIntersecting(mCell, mergeCell)) {
            var intersectingCell = new MergeCell();
            intersectingCell.x = Math.min(mCell.x, mergeCell.x);
            intersectingCell.y = Math.min(mCell.Y, mergeCell.y);
            intersectingCell.width = Math.max(mCell.Width + mCell.X, mergeCell.width + mergeCell.x);
            intersectingCell.height = Math.max(mCell.Height + mCell.Y, mergeCell.height + mergeCell.y);
            intersectingCell.ref = _this[count].ref.split(":")[0] + ":" + mergeCell.ref.split(":")[1];
            _this[count] = intersectingCell;
            mergeCell = intersectingCell;
            inserted = true;
          }
          count++;
        }
        if (!inserted) {
          _this.push(mergeCell);
        }
        return mergeCell;
      };
      return _this;
    }
    MergeCells2.isIntersecting = function(base, compare) {
      return base.x <= compare.x + compare.width && compare.x <= base.x + base.width && base.y <= compare.y + compare.height && compare.y <= base.y + base.height;
    };
    return MergeCells2;
  }(Array)
);

// node_modules/@syncfusion/ej2-excel-export/src/cell-style.js
var CellStyle = (
  /** @class */
  /* @__PURE__ */ function() {
    function CellStyle2() {
      this.numFmtId = 0;
      this.backColor = "none";
      this.fontName = "Calibri";
      this.fontSize = 10.5;
      this.fontColor = "#000000";
      this.italic = false;
      this.bold = false;
      this.underline = false;
      this.strikeThrough = false;
      this.wrapText = false;
      this.hAlign = "general";
      this.vAlign = "bottom";
      this.indent = 0;
      this.rotation = 0;
      this.numberFormat = "GENERAL";
      this.type = "datetime";
      this.borders = new Borders();
      this.isGlobalStyle = false;
    }
    return CellStyle2;
  }()
);
var Font = (
  /** @class */
  /* @__PURE__ */ function() {
    function Font2() {
      this.sz = 10.5;
      this.name = "Calibri";
      this.u = false;
      this.b = false;
      this.i = false;
      this.color = "FF000000";
      this.strike = false;
    }
    return Font2;
  }()
);
var CellXfs = (
  /** @class */
  /* @__PURE__ */ function() {
    function CellXfs2() {
    }
    return CellXfs2;
  }()
);
var Alignment = (
  /** @class */
  /* @__PURE__ */ function() {
    function Alignment2() {
    }
    return Alignment2;
  }()
);
var CellStyleXfs = (
  /** @class */
  /* @__PURE__ */ function() {
    function CellStyleXfs2() {
    }
    return CellStyleXfs2;
  }()
);
var CellStyles = (
  /** @class */
  /* @__PURE__ */ function() {
    function CellStyles2() {
      this.name = "Normal";
      this.xfId = 0;
    }
    return CellStyles2;
  }()
);
var NumFmt = (
  /** @class */
  /* @__PURE__ */ function() {
    function NumFmt2(id, code) {
      this.numFmtId = id;
      this.formatCode = code;
    }
    return NumFmt2;
  }()
);
var Border = (
  /** @class */
  /* @__PURE__ */ function() {
    function Border2(mLine, mColor) {
      this.lineStyle = mLine;
      this.color = mColor;
    }
    return Border2;
  }()
);
var Borders = (
  /** @class */
  /* @__PURE__ */ function() {
    function Borders2() {
      this.left = new Border("none", "#FFFFFF");
      this.right = new Border("none", "#FFFFFF");
      this.top = new Border("none", "#FFFFFF");
      this.bottom = new Border("none", "#FFFFFF");
      this.all = new Border("none", "#FFFFFF");
    }
    return Borders2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/column.js
var Column = (
  /** @class */
  /* @__PURE__ */ function() {
    function Column2() {
    }
    return Column2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/row.js
var __extends55 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Row = (
  /** @class */
  /* @__PURE__ */ function() {
    function Row2() {
    }
    return Row2;
  }()
);
var Rows = (
  /** @class */
  function(_super) {
    __extends55(Rows2, _super);
    function Rows2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.add = function(row) {
        _this.push(row);
      };
      return _this;
    }
    return Rows2;
  }(Array)
);

// node_modules/@syncfusion/ej2-excel-export/src/image.js
var Image2 = (
  /** @class */
  /* @__PURE__ */ function() {
    function Image3() {
    }
    return Image3;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/cell.js
var __extends56 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Cell = (
  /** @class */
  /* @__PURE__ */ function() {
    function Cell2() {
    }
    return Cell2;
  }()
);
var Cells = (
  /** @class */
  function(_super) {
    __extends56(Cells2, _super);
    function Cells2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.add = function(cell) {
        var inserted = false;
        var count = 0;
        for (var _i = 0, _a = _this; _i < _a.length; _i++) {
          var c = _a[_i];
          if (c.index === cell.index) {
            _this[count] = cell;
            inserted = true;
          }
          count++;
        }
        if (!inserted) {
          _this.push(cell);
        }
      };
      return _this;
    }
    return Cells2;
  }(Array)
);

// node_modules/@syncfusion/ej2-compression/src/utils.js
var Utils = (
  /** @class */
  function() {
    function Utils2() {
    }
    Utils2.bitReverse = function(value) {
      return Utils2.reverseBits[value & 15] << 12 | Utils2.reverseBits[value >> 4 & 15] << 8 | Utils2.reverseBits[value >> 8 & 15] << 4 | Utils2.reverseBits[value >> 12];
    };
    Utils2.bitConverterToInt32 = function(value, index) {
      return value[index] | value[index + 1] << 8 | value[index + 2] << 16 | value[index + 3] << 24;
    };
    Utils2.bitConverterToInt16 = function(value, index) {
      return value[index] | value[index + 1] << 8;
    };
    Utils2.bitConverterToUInt32 = function(value) {
      var uint = new Uint32Array(1);
      uint[0] = value;
      return uint[0];
    };
    Utils2.bitConverterToUInt16 = function(value, index) {
      var uint = new Uint16Array(1);
      uint[0] = value[index] | value[index + 1] << 8;
      return uint[0];
    };
    Utils2.bitConverterUintToInt32 = function(value) {
      var uint = new Int32Array(1);
      uint[0] = value;
      return uint[0];
    };
    Utils2.bitConverterInt32ToUint = function(value) {
      var uint = new Uint32Array(1);
      uint[0] = value;
      return uint[0];
    };
    Utils2.bitConverterInt32ToInt16 = function(value) {
      var uint = new Int16Array(1);
      uint[0] = value;
      return uint[0];
    };
    Utils2.byteToString = function(value) {
      var str = "";
      for (var i = 0; i < value.length; i++) {
        str += String.fromCharCode(value[i]);
      }
      return str;
    };
    Utils2.byteIntToString = function(value) {
      var str = "";
      for (var i = 0; i < value.length; i++) {
        str += String.fromCharCode(value[i]);
      }
      return str;
    };
    Utils2.arrayCopy = function(source, sourceIndex, destination, destinationIndex, dataToCopy) {
      var temp = new Uint8Array(source.buffer, sourceIndex);
      var data = temp.subarray(0, dataToCopy);
      destination.set(data, destinationIndex);
    };
    Utils2.mergeArray = function(arrayOne, arrayTwo) {
      var mergedArray = new Uint8Array(arrayOne.length + arrayTwo.length);
      mergedArray.set(arrayOne);
      mergedArray.set(arrayTwo, arrayOne.length);
      return mergedArray;
    };
    Utils2.encodedString = function(input) {
      var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      var chr1;
      var chr2;
      var chr3;
      var encode1;
      var encode2;
      var encode3;
      var encode4;
      var count = 0;
      var resultIndex = 0;
      input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
      var totalLength = input.length * 3 / 4;
      if (input.charAt(input.length - 1) === keyStr.charAt(64)) {
        totalLength--;
      }
      if (input.charAt(input.length - 2) === keyStr.charAt(64)) {
        totalLength--;
      }
      if (totalLength % 1 !== 0) {
        throw new Error("Invalid base64 input, bad content length.");
      }
      var output = new Uint8Array(totalLength | 0);
      while (count < input.length) {
        encode1 = keyStr.indexOf(input.charAt(count++));
        encode2 = keyStr.indexOf(input.charAt(count++));
        encode3 = keyStr.indexOf(input.charAt(count++));
        encode4 = keyStr.indexOf(input.charAt(count++));
        chr1 = encode1 << 2 | encode2 >> 4;
        chr2 = (encode2 & 15) << 4 | encode3 >> 2;
        chr3 = (encode3 & 3) << 6 | encode4;
        output[resultIndex++] = chr1;
        if (encode3 !== 64) {
          output[resultIndex++] = chr2;
        }
        if (encode4 !== 64) {
          output[resultIndex++] = chr3;
        }
      }
      return output;
    };
    Utils2.reverseBits = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15];
    Utils2.huffCodeLengthOrders = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
    return Utils2;
  }()
);

// node_modules/@syncfusion/ej2-compression/src/zip-archive.js
var CRC32TABLE = [];
var INT_SIZE = 4;
var SHORT_SIZE = 2;
var CentralDirectoryEndSignature = 101010256;
var CentralDirSizeOffset = 12;
var CentralHeaderSignature = 33639248;
var BufferSize = 4096;
var ZipArchive = (
  /** @class */
  function() {
    function ZipArchive2() {
      if (CRC32TABLE.length === 0) {
        ZipArchive2.initCrc32Table();
      }
      this.files = [];
      this.level = "Normal";
      Save.isMicrosoftBrowser = !!navigator.msSaveBlob;
    }
    Object.defineProperty(ZipArchive2.prototype, "items", {
      get: function() {
        return this.files;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ZipArchive2.prototype, "compressionLevel", {
      /**
       * gets compression level
       */
      get: function() {
        return this.level;
      },
      /**
       * sets compression level
       */
      set: function(level) {
        this.level = level;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ZipArchive2.prototype, "length", {
      /**
       * gets items count
       */
      get: function() {
        if (this.files === void 0) {
          return 0;
        }
        return this.files.length;
      },
      enumerable: true,
      configurable: true
    });
    ZipArchive2.prototype.addItem = function(item) {
      if (item === null || item === void 0) {
        throw new Error("ArgumentException: item cannot be null or undefined");
      }
      for (var i = 0; i < this.files.length; i++) {
        var file = this.files[i];
        if (file instanceof ZipArchiveItem) {
          if (file.name === item.name) {
            throw new Error("item with same name already exist");
          }
        }
      }
      this.files.push(item);
    };
    ZipArchive2.prototype.addDirectory = function(directoryName) {
      if (directoryName === null || directoryName === void 0) {
        throw new Error("ArgumentException: string cannot be null or undefined");
      }
      if (directoryName.length === 0) {
        throw new Error("ArgumentException: string cannot be empty");
      }
      if (directoryName.slice(-1) !== "/") {
        directoryName += "/";
      }
      if (this.files.indexOf(directoryName) !== -1) {
        throw new Error("item with same name already exist");
      }
      this.files.push(directoryName);
    };
    ZipArchive2.prototype.getItem = function(index) {
      if (index >= 0 && index < this.files.length) {
        return this.files[index];
      }
      return void 0;
    };
    ZipArchive2.prototype.contains = function(item) {
      return this.files.indexOf(item) !== -1 ? true : false;
    };
    ZipArchive2.prototype.open = function(base64String) {
      var zipArchive = this;
      var zipByteArray = Utils.encodedString(base64String);
      if (zipByteArray.length == 0) throw new DOMException("stream");
      var stream = new Stream(zipByteArray);
      var lCentralDirEndPosition = ZipArchive2.findValueFromEnd(stream, CentralDirectoryEndSignature, 65557);
      if (lCentralDirEndPosition < 0) throw new DOMException("Can't locate end of central directory record. Possible wrong file format or archive is corrupt.");
      stream.position = lCentralDirEndPosition + CentralDirSizeOffset;
      var iCentralDirSize = ZipArchive2.ReadInt32(stream);
      var lCentralDirPosition = lCentralDirEndPosition - iCentralDirSize;
      stream.position = lCentralDirPosition;
      this.readCentralDirectoryDataAndExtractItems(stream);
    };
    ZipArchive2.prototype.readCentralDirectoryDataAndExtractItems = function(stream) {
      if (stream == null) throw new DOMException("stream");
      var itemHelper;
      while (ZipArchive2.ReadInt32(stream) == CentralHeaderSignature) {
        itemHelper = new ZipArchiveItemHelper();
        itemHelper.readCentralDirectoryData(stream);
        itemHelper;
      }
      itemHelper.readData(stream, itemHelper.checkCrc);
      itemHelper.decompressData();
      this.files.push(new ZipArchiveItem(itemHelper.unCompressedStream.buffer, itemHelper.name));
    };
    ZipArchive2.prototype.save = function(fileName) {
      if (fileName === null || fileName === void 0 || fileName.length === 0) {
        throw new Error("ArgumentException: fileName cannot be null or undefined");
      }
      if (this.files.length === 0) {
        throw new Error("InvalidOperation");
      }
      var zipArchive = this;
      var promise;
      return promise = new Promise(function(resolve, reject) {
        zipArchive.saveInternal(fileName, false).then(function() {
          resolve(zipArchive);
        });
      });
    };
    ZipArchive2.prototype.saveAsBlob = function() {
      var zipArchive = this;
      var promise;
      return promise = new Promise(function(resolve, reject) {
        zipArchive.saveInternal("", true).then(function(blob) {
          resolve(blob);
        });
      });
    };
    ZipArchive2.prototype.saveInternal = function(fileName, skipFileSave) {
      var _this = this;
      var zipArchive = this;
      var promise;
      return promise = new Promise(function(resolve, reject) {
        var zipData = [];
        var dirLength = 0;
        for (var i = 0; i < zipArchive.files.length; i++) {
          var compressedObject = _this.getCompressedData(_this.files[i]);
          compressedObject.then(function(data) {
            dirLength = zipArchive.constructZippedObject(zipData, data, dirLength, data.isDirectory);
            if (zipData.length === zipArchive.files.length) {
              var blob = zipArchive.writeZippedContent(fileName, zipData, dirLength, skipFileSave);
              resolve(blob);
            }
          });
        }
      });
    };
    ZipArchive2.prototype.destroy = function() {
      if (this.files !== void 0 && this.files.length > 0) {
        for (var i = 0; i < this.files.length; i++) {
          var file = this.files[i];
          if (file instanceof ZipArchiveItem) {
            file.destroy();
          }
          file = void 0;
        }
        this.files = [];
      }
      this.files = void 0;
      this.level = void 0;
    };
    ZipArchive2.prototype.getCompressedData = function(item) {
      var zipArchive = this;
      var promise = new Promise(function(resolve, reject) {
        if (item instanceof ZipArchiveItem) {
          var reader_1 = new FileReader();
          reader_1.onload = function() {
            var input = new Uint8Array(reader_1.result);
            var data2 = {
              fileName: item.name,
              crc32Value: 0,
              compressedData: [],
              compressedSize: void 0,
              uncompressedDataSize: input.length,
              compressionType: void 0,
              isDirectory: false
            };
            if (zipArchive.level === "Normal") {
              zipArchive.compressData(input, data2, CRC32TABLE);
              var length_1 = 0;
              for (var i = 0; i < data2.compressedData.length; i++) {
                length_1 += data2.compressedData[i].length;
              }
              data2.compressedSize = length_1;
              data2.compressionType = "\b\0";
            } else {
              data2.compressedSize = input.length;
              data2.crc32Value = zipArchive.calculateCrc32Value(0, input, CRC32TABLE);
              data2.compressionType = "\0\0";
              data2.compressedData.push(input);
            }
            resolve(data2);
          };
          reader_1.readAsArrayBuffer(item.data);
        } else {
          var data = {
            fileName: item,
            crc32Value: 0,
            compressedData: "",
            compressedSize: 0,
            uncompressedDataSize: 0,
            compressionType: "\0\0",
            isDirectory: true
          };
          resolve(data);
        }
      });
      return promise;
    };
    ZipArchive2.prototype.compressData = function(input, data, crc32Table) {
      var compressor = new CompressedStreamWriter(true);
      var currentIndex = 0;
      var nextIndex = 0;
      do {
        if (currentIndex >= input.length) {
          compressor.close();
          break;
        }
        nextIndex = Math.min(input.length, currentIndex + 16384);
        var subArray = input.subarray(currentIndex, nextIndex);
        data.crc32Value = this.calculateCrc32Value(data.crc32Value, subArray, crc32Table);
        compressor.write(subArray, 0, nextIndex - currentIndex);
        currentIndex = nextIndex;
      } while (currentIndex <= input.length);
      data.compressedData = compressor.compressedData;
      compressor.destroy();
    };
    ZipArchive2.prototype.constructZippedObject = function(zipParts, data, dirLength, isDirectory) {
      var extFileAttr = 0;
      var date = /* @__PURE__ */ new Date();
      if (isDirectory) {
        extFileAttr = extFileAttr | 16;
      }
      extFileAttr = extFileAttr | 0 & 63;
      var header = this.writeHeader(data, date);
      var localHeader = "PK" + header + data.fileName;
      var centralDir = this.writeCentralDirectory(data, header, dirLength, extFileAttr);
      zipParts.push({
        localHeader,
        centralDir,
        compressedData: data
      });
      return dirLength + localHeader.length + data.compressedSize;
    };
    ZipArchive2.prototype.writeHeader = function(data, date) {
      var zipHeader = "";
      zipHeader += "\n\0\0\0";
      zipHeader += data.compressionType;
      zipHeader += this.getBytes(this.getModifiedTime(date), 2);
      zipHeader += this.getBytes(this.getModifiedDate(date), 2);
      zipHeader += this.getBytes(data.crc32Value, 4);
      zipHeader += this.getBytes(data.compressedSize, 4);
      zipHeader += this.getBytes(data.uncompressedDataSize, 4);
      zipHeader += this.getBytes(data.fileName.length, 2);
      zipHeader += this.getBytes(0, 2);
      return zipHeader;
    };
    ZipArchive2.prototype.writeZippedContent = function(fileName, zipData, localDirLen, skipFileSave) {
      var cenDirLen = 0;
      var buffer = [];
      for (var i = 0; i < zipData.length; i++) {
        var item = zipData[i];
        cenDirLen += item.centralDir.length;
        buffer.push(this.getArrayBuffer(item.localHeader));
        while (item.compressedData.compressedData.length) {
          buffer.push(item.compressedData.compressedData.shift().buffer);
        }
      }
      for (var i = 0; i < zipData.length; i++) {
        buffer.push(this.getArrayBuffer(zipData[i].centralDir));
      }
      buffer.push(this.getArrayBuffer(this.writeFooter(zipData, cenDirLen, localDirLen)));
      var blob = new Blob(buffer, {
        type: "application/zip"
      });
      if (!skipFileSave) {
        Save.save(fileName, blob);
      }
      return blob;
    };
    ZipArchive2.prototype.writeCentralDirectory = function(data, localHeader, offset, externalFileAttribute) {
      var directoryHeader = "PK" + this.getBytes(20, 2) + localHeader + // inherit from file header
      this.getBytes(0, 2) + // comment length
      "\0\0\0\0" + // internal file attributes 
      this.getBytes(externalFileAttribute, 4) + // external file attributes
      this.getBytes(offset, 4) + // local fileHeader relative offset
      data.fileName;
      return directoryHeader;
    };
    ZipArchive2.prototype.writeFooter = function(zipData, centralLength, localLength) {
      var dirEnd = "PK\0\0\0\0" + this.getBytes(zipData.length, 2) + this.getBytes(zipData.length, 2) + this.getBytes(centralLength, 4) + this.getBytes(localLength, 4) + this.getBytes(0, 2);
      return dirEnd;
    };
    ZipArchive2.prototype.getArrayBuffer = function(input) {
      var a = new Uint8Array(input.length);
      for (var j = 0; j < input.length; ++j) {
        a[j] = input.charCodeAt(j) & 255;
      }
      return a.buffer;
    };
    ZipArchive2.prototype.getBytes = function(value, offset) {
      var bytes = "";
      for (var i = 0; i < offset; i++) {
        bytes += String.fromCharCode(value & 255);
        value = value >>> 8;
      }
      return bytes;
    };
    ZipArchive2.prototype.getModifiedTime = function(date) {
      var modTime = date.getHours();
      modTime = modTime << 6;
      modTime = modTime | date.getMinutes();
      modTime = modTime << 5;
      return modTime = modTime | date.getSeconds() / 2;
    };
    ZipArchive2.prototype.getModifiedDate = function(date) {
      var modiDate = date.getFullYear() - 1980;
      modiDate = modiDate << 4;
      modiDate = modiDate | date.getMonth() + 1;
      modiDate = modiDate << 5;
      return modiDate = modiDate | date.getDate();
    };
    ZipArchive2.prototype.calculateCrc32Value = function(crc32Value, input, crc32Table) {
      crc32Value ^= -1;
      for (var i = 0; i < input.length; i++) {
        crc32Value = crc32Value >>> 8 ^ crc32Table[(crc32Value ^ input[i]) & 255];
      }
      return crc32Value ^ -1;
    };
    ZipArchive2.initCrc32Table = function() {
      var i;
      for (var j = 0; j < 256; j++) {
        i = j;
        for (var k = 0; k < 8; k++) {
          i = i & 1 ? 3988292384 ^ i >>> 1 : i >>> 1;
        }
        CRC32TABLE[j] = i;
      }
    };
    ZipArchive2.findValueFromEnd = function(stream, value, maxCount) {
      if (stream == null) throw new DOMException("stream");
      var lStreamSize = stream.inputStream.buffer.byteLength;
      if (lStreamSize < 4) return -1;
      var arrBuffer = new Uint8Array(4);
      var lLastPos = Math.max(0, lStreamSize - maxCount);
      var lCurrentPosition = lStreamSize - 1 - INT_SIZE;
      stream.position = lCurrentPosition;
      stream.read(arrBuffer, 0, INT_SIZE);
      var uiCurValue = arrBuffer[0];
      var bFound = uiCurValue == value;
      if (!bFound) {
        while (lCurrentPosition > lLastPos) {
          uiCurValue <<= 8;
          lCurrentPosition--;
          stream.position = lCurrentPosition;
          uiCurValue += stream.readByte();
          if (uiCurValue == value) {
            bFound = true;
            break;
          }
        }
      }
      return bFound ? lCurrentPosition : -1;
    };
    ZipArchive2.ReadInt32 = function(stream) {
      var buffer = new Uint8Array(INT_SIZE);
      if (stream.read(buffer, 0, INT_SIZE) != INT_SIZE) {
        throw new DOMException("Unable to read value at the specified position - end of stream was reached.");
      }
      return Utils.bitConverterToInt32(buffer, 0);
    };
    ZipArchive2.ReadInt16 = function(stream) {
      var buffer = new Uint8Array(SHORT_SIZE);
      if (stream.read(buffer, 0, SHORT_SIZE) != SHORT_SIZE) {
        throw new DOMException("Unable to read value at the specified position - end of stream was reached.");
      }
      return Utils.bitConverterToInt16(buffer, 0);
    };
    ZipArchive2.ReadUInt16 = function(stream) {
      {
        var buffer = new Uint8Array(SHORT_SIZE);
        if (stream.read(buffer, 0, SHORT_SIZE) != SHORT_SIZE) {
          throw new DOMException("Unable to read value at the specified position - end of stream was reached.");
        }
        return Utils.bitConverterToInt16(buffer, 0);
      }
    };
    return ZipArchive2;
  }()
);
var ZipArchiveItemHelper = (
  /** @class */
  function() {
    function ZipArchiveItemHelper2() {
      this.headerSignature = 67324752;
      this.checkCrc = true;
      this.crc32 = 0;
    }
    ZipArchiveItemHelper2.prototype.readCentralDirectoryData = function(stream) {
      stream.position += 4;
      this.options = ZipArchive.ReadInt16(stream);
      this.compressionMethod = ZipArchive.ReadInt16(stream);
      this.checkCrc = this.compressionMethod != 99;
      var lastModified = ZipArchive.ReadInt32(stream);
      this.crc32 = Utils.bitConverterToUInt32(ZipArchive.ReadInt32(stream));
      this.compressedSize = ZipArchive.ReadInt32(stream);
      this.originalSize = ZipArchive.ReadInt32(stream);
      var iFileNameLength = ZipArchive.ReadInt16(stream);
      var iExtraFieldLenth = ZipArchive.ReadInt16(stream);
      var iCommentLength = ZipArchive.ReadInt16(stream);
      stream.position += 4;
      this.externalAttributes = ZipArchive.ReadInt32(stream);
      this.localHeaderOffset = ZipArchive.ReadInt32(stream);
      var arrBuffer = new Uint8Array(iFileNameLength);
      stream.read(arrBuffer, 0, iFileNameLength);
      var m_strItemName = Utils.byteToString(arrBuffer);
      m_strItemName = m_strItemName.replace("\\", "/");
      this.name = m_strItemName;
      stream.position += iExtraFieldLenth + iCommentLength;
      if (this.options != 0) this.options = 0;
    };
    ZipArchiveItemHelper2.prototype.readData = function(stream, checkCrc) {
      if (stream.length == 0) throw new DOMException("stream");
      stream.position = this.localHeaderOffset;
      this.checkCrc = checkCrc;
      this.readLocalHeader(stream);
      this.readCompressedData(stream);
    };
    ZipArchiveItemHelper2.prototype.decompressData = function() {
      if (this.compressionMethod == 8) {
        if (this.originalSize > 0) {
          this.decompressDataOld();
        }
      }
    };
    ZipArchiveItemHelper2.prototype.decompressDataOld = function() {
      var reader = new CompressedStreamReader(this.compressedStream, true);
      var decompressedData;
      if (this.originalSize > 0) decompressedData = new Stream(new Uint8Array(this.originalSize));
      var arrBuffer = new Uint8Array(BufferSize);
      var iReadBytes;
      var past = new Uint8Array(0);
      while ((iReadBytes = reader.read(arrBuffer, 0, BufferSize)) > 0) {
        decompressedData.write(arrBuffer.subarray(0, iReadBytes), 0, iReadBytes);
      }
      this.unCompressedStream = decompressedData.toByteArray();
      if (this.checkCrc) {
      }
    };
    ZipArchiveItemHelper2.prototype.readLocalHeader = function(stream) {
      if (stream.length == 0) throw new DOMException("stream");
      if (ZipArchive.ReadInt32(stream) != this.headerSignature) throw new DOMException("Can't find local header signature - wrong file format or file is corrupt.");
      stream.position += 22;
      var iNameLength = ZipArchive.ReadInt16(stream);
      var iExtraLength = ZipArchive.ReadUInt16(stream);
      if (this.compressionMethod == 99) {
      } else if (iExtraLength > 2) {
        stream.position += iNameLength;
        var headerVal = ZipArchive.ReadInt16(stream);
        if (headerVal == 23)
          throw new DOMException("UnSupported");
        else stream.position += iExtraLength - 2;
      } else stream.position += iNameLength + iExtraLength;
    };
    ZipArchiveItemHelper2.prototype.readCompressedData = function(stream) {
      var dataStream;
      if (this.compressedSize > 0) {
        var iBytesLeft = this.compressedSize;
        dataStream = new Stream(new Uint8Array(iBytesLeft));
        var arrBuffer = new Uint8Array(BufferSize);
        while (iBytesLeft > 0) {
          var iBytesToRead = Math.min(iBytesLeft, BufferSize);
          if (stream.read(arrBuffer, 0, iBytesToRead) != iBytesToRead) throw new DOMException("End of file reached - wrong file format or file is corrupt.");
          dataStream.write(arrBuffer.subarray(0, iBytesToRead), 0, iBytesToRead);
          iBytesLeft -= iBytesToRead;
        }
        this.compressedStream = new Uint8Array(dataStream.inputStream);
      } else if (this.compressedSize < 0) {
      } else if (this.compressedSize == 0) {
      }
    };
    return ZipArchiveItemHelper2;
  }()
);
var ZipArchiveItem = (
  /** @class */
  function() {
    function ZipArchiveItem2(data, itemName) {
      if (data === null || data === void 0) {
        throw new Error("ArgumentException: data cannot be null or undefined");
      }
      if (itemName === null || itemName === void 0) {
        throw new Error("ArgumentException: string cannot be null or undefined");
      }
      if (itemName.length === 0) {
        throw new Error("string cannot be empty");
      }
      this.data = data;
      this.name = itemName;
    }
    Object.defineProperty(ZipArchiveItem2.prototype, "dataStream", {
      get: function() {
        return this.decompressedStream;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ZipArchiveItem2.prototype, "name", {
      /**
       * Get the name of archive item
       * @returns string
       */
      get: function() {
        return this.fileName;
      },
      /**
       * Set the name of archive item
       * @param  {string} value
       */
      set: function(value) {
        this.fileName = value;
      },
      enumerable: true,
      configurable: true
    });
    ZipArchiveItem2.prototype.destroy = function() {
      this.fileName = void 0;
      this.data = void 0;
    };
    return ZipArchiveItem2;
  }()
);

// node_modules/@syncfusion/ej2-compression/src/compression-writer.js
var ARR_LITERAL_CODES = new Int16Array(286);
var ARR_LITERAL_LENGTHS = new Uint8Array(286);
var ARR_DISTANCE_CODES = new Int16Array(30);
var ARR_DISTANCE_LENGTHS = new Uint8Array(30);
var CompressedStreamWriter = (
  /** @class */
  function() {
    function CompressedStreamWriter2(noWrap) {
      this.pendingBuffer = new Uint8Array(1 << 16);
      this.pendingBufLength = 0;
      this.pendingBufCache = 0;
      this.pendingBufBitsInCache = 0;
      this.bufferPosition = 0;
      this.extraBits = 0;
      this.currentHash = 0;
      this.matchStart = 0;
      this.matchLength = 0;
      this.matchPrevAvail = false;
      this.blockStart = 0;
      this.stringStart = 0;
      this.lookAhead = 0;
      this.totalBytesIn = 0;
      this.inputOffset = 0;
      this.inputEnd = 0;
      this.windowSize = 1 << 15;
      this.windowMask = this.windowSize - 1;
      this.hashSize = 1 << 15;
      this.hashMask = this.hashSize - 1;
      this.hashShift = Math.floor((15 + 3 - 1) / 3);
      this.maxDist = this.windowSize - 262;
      this.checkSum = 1;
      this.noWrap = false;
      if (!CompressedStreamWriter2.isHuffmanTreeInitiated) {
        CompressedStreamWriter2.initHuffmanTree();
        CompressedStreamWriter2.isHuffmanTreeInitiated = true;
      }
      this.treeLiteral = new CompressorHuffmanTree(this, 286, 257, 15);
      this.treeDistances = new CompressorHuffmanTree(this, 30, 1, 15);
      this.treeCodeLengths = new CompressorHuffmanTree(this, 19, 4, 7);
      this.arrDistances = new Uint16Array(1 << 14);
      this.arrLiterals = new Uint8Array(1 << 14);
      this.stream = [];
      this.dataWindow = new Uint8Array(2 * this.windowSize);
      this.hashHead = new Int16Array(this.hashSize);
      this.hashPrevious = new Int16Array(this.windowSize);
      this.blockStart = this.stringStart = 1;
      this.noWrap = noWrap;
      if (!noWrap) {
        this.writeZLibHeader();
      }
    }
    Object.defineProperty(CompressedStreamWriter2.prototype, "compressedData", {
      /**
       * get compressed data
       */
      get: function() {
        return this.stream;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(CompressedStreamWriter2.prototype, "getCompressedString", {
      get: function() {
        var compressedString = "";
        if (this.stream !== void 0) {
          for (var i = 0; i < this.stream.length; i++) {
            compressedString += String.fromCharCode.apply(null, this.stream[i]);
          }
        }
        return compressedString;
      },
      enumerable: true,
      configurable: true
    });
    CompressedStreamWriter2.prototype.write = function(data, offset, length) {
      if (data === void 0 || data === null) {
        throw new Error("ArgumentException: data cannot null or undefined");
      }
      var end = offset + length;
      if (0 > offset || offset > end || end > data.length) {
        throw new Error("ArgumentOutOfRangeException: Offset or length is incorrect");
      }
      if (typeof data === "string") {
        var encode = new Encoding(false);
        encode.type = "Utf8";
        data = new Uint8Array(encode.getBytes(data, 0, data.length));
        end = offset + data.length;
      }
      this.inputBuffer = data;
      this.inputOffset = offset;
      this.inputEnd = end;
      if (!this.noWrap) {
        this.checkSum = ChecksumCalculator.checksumUpdate(this.checkSum, this.inputBuffer, this.inputOffset, end);
      }
      while (!(this.inputEnd === this.inputOffset) || !(this.pendingBufLength === 0)) {
        this.pendingBufferFlush();
        this.compressData(false);
      }
    };
    CompressedStreamWriter2.prototype.writeZLibHeader = function() {
      var headerDate = 8 + (7 << 4) << 8;
      headerDate |= (5 >> 2 & 3) << 6;
      headerDate += 31 - headerDate % 31;
      this.pendingBufferWriteShortBytes(headerDate);
    };
    CompressedStreamWriter2.prototype.pendingBufferWriteShortBytes = function(s) {
      this.pendingBuffer[this.pendingBufLength++] = s >> 8;
      this.pendingBuffer[this.pendingBufLength++] = s;
    };
    CompressedStreamWriter2.prototype.compressData = function(finish) {
      var success;
      do {
        this.fillWindow();
        var canFlush = finish && this.inputEnd === this.inputOffset;
        success = this.compressSlow(canFlush, finish);
      } while (this.pendingBufLength === 0 && success);
      return success;
    };
    CompressedStreamWriter2.prototype.compressSlow = function(flush, finish) {
      if (this.lookAhead < 262 && !flush) {
        return false;
      }
      while (this.lookAhead >= 262 || flush) {
        if (this.lookAhead === 0) {
          return this.lookAheadCompleted(finish);
        }
        if (this.stringStart >= 2 * this.windowSize - 262) {
          this.slideWindow();
        }
        var prevMatch = this.matchStart;
        var prevLen = this.matchLength;
        if (this.lookAhead >= 3) {
          this.discardMatch();
        }
        if (prevLen >= 3 && this.matchLength <= prevLen) {
          prevLen = this.matchPreviousBest(prevMatch, prevLen);
        } else {
          this.matchPreviousAvailable();
        }
        if (this.bufferPosition >= 1 << 14) {
          return this.huffmanIsFull(finish);
        }
      }
      return true;
    };
    CompressedStreamWriter2.prototype.discardMatch = function() {
      var hashHead = this.insertString();
      if (hashHead !== 0 && this.stringStart - hashHead <= this.maxDist && this.findLongestMatch(hashHead)) {
        if (this.matchLength <= 5 && this.matchLength === 3 && this.stringStart - this.matchStart > 4096) {
          this.matchLength = 3 - 1;
        }
      }
    };
    CompressedStreamWriter2.prototype.matchPreviousAvailable = function() {
      if (this.matchPrevAvail) {
        this.huffmanTallyLit(this.dataWindow[this.stringStart - 1] & 255);
      }
      this.matchPrevAvail = true;
      this.stringStart++;
      this.lookAhead--;
    };
    CompressedStreamWriter2.prototype.matchPreviousBest = function(prevMatch, prevLen) {
      this.huffmanTallyDist(this.stringStart - 1 - prevMatch, prevLen);
      prevLen -= 2;
      do {
        this.stringStart++;
        this.lookAhead--;
        if (this.lookAhead >= 3) {
          this.insertString();
        }
      } while (--prevLen > 0);
      this.stringStart++;
      this.lookAhead--;
      this.matchPrevAvail = false;
      this.matchLength = 3 - 1;
      return prevLen;
    };
    CompressedStreamWriter2.prototype.lookAheadCompleted = function(finish) {
      if (this.matchPrevAvail) {
        this.huffmanTallyLit(this.dataWindow[this.stringStart - 1] & 255);
      }
      this.matchPrevAvail = false;
      this.huffmanFlushBlock(this.dataWindow, this.blockStart, this.stringStart - this.blockStart, finish);
      this.blockStart = this.stringStart;
      return false;
    };
    CompressedStreamWriter2.prototype.huffmanIsFull = function(finish) {
      var len = this.stringStart - this.blockStart;
      if (this.matchPrevAvail) {
        len--;
      }
      var lastBlock = finish && this.lookAhead === 0 && !this.matchPrevAvail;
      this.huffmanFlushBlock(this.dataWindow, this.blockStart, len, lastBlock);
      this.blockStart += len;
      return !lastBlock;
    };
    CompressedStreamWriter2.prototype.fillWindow = function() {
      if (this.stringStart >= this.windowSize + this.maxDist) {
        this.slideWindow();
      }
      while (this.lookAhead < 262 && this.inputOffset < this.inputEnd) {
        var more = 2 * this.windowSize - this.lookAhead - this.stringStart;
        if (more > this.inputEnd - this.inputOffset) {
          more = this.inputEnd - this.inputOffset;
        }
        this.dataWindow.set(this.inputBuffer.subarray(this.inputOffset, this.inputOffset + more), this.stringStart + this.lookAhead);
        this.inputOffset += more;
        this.totalBytesIn += more;
        this.lookAhead += more;
      }
      if (this.lookAhead >= 3) {
        this.updateHash();
      }
    };
    CompressedStreamWriter2.prototype.slideWindow = function() {
      this.dataWindow.set(this.dataWindow.subarray(this.windowSize, this.windowSize + this.windowSize), 0);
      this.matchStart -= this.windowSize;
      this.stringStart -= this.windowSize;
      this.blockStart -= this.windowSize;
      for (var i = 0; i < this.hashSize; ++i) {
        var m = this.hashHead[i] & 65535;
        this.hashHead[i] = m >= this.windowSize ? m - this.windowSize : 0;
      }
      for (var i = 0; i < this.windowSize; i++) {
        var m = this.hashPrevious[i] & 65535;
        this.hashPrevious[i] = m >= this.windowSize ? m - this.windowSize : 0;
      }
    };
    CompressedStreamWriter2.prototype.insertString = function() {
      var match;
      var hash = (this.currentHash << this.hashShift ^ this.dataWindow[this.stringStart + (3 - 1)]) & this.hashMask;
      this.hashPrevious[this.stringStart & this.windowMask] = match = this.hashHead[hash];
      this.hashHead[hash] = this.stringStart;
      this.currentHash = hash;
      return match & 65535;
    };
    CompressedStreamWriter2.prototype.findLongestMatch = function(curMatch) {
      var chainLen = 4096;
      var niceLen = 258;
      var scan = this.stringStart;
      var match;
      var bestEnd = this.stringStart + this.matchLength;
      var bestLength = Math.max(this.matchLength, 3 - 1);
      var limit = Math.max(this.stringStart - this.maxDist, 0);
      var stringEnd = this.stringStart + 258 - 1;
      var scanEnd1 = this.dataWindow[bestEnd - 1];
      var scanEnd = this.dataWindow[bestEnd];
      var data = this.dataWindow;
      if (bestLength >= 32) {
        chainLen >>= 2;
      }
      if (niceLen > this.lookAhead) {
        niceLen = this.lookAhead;
      }
      do {
        if (data[curMatch + bestLength] !== scanEnd || data[curMatch + bestLength - 1] !== scanEnd1 || data[curMatch] !== data[scan] || data[curMatch + 1] !== data[scan + 1]) {
          continue;
        }
        match = curMatch + 2;
        scan += 2;
        while (data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && scan < stringEnd) {
        }
        if (scan > bestEnd) {
          this.matchStart = curMatch;
          bestEnd = scan;
          bestLength = scan - this.stringStart;
          if (bestLength >= niceLen) {
            break;
          }
          scanEnd1 = data[bestEnd - 1];
          scanEnd = data[bestEnd];
        }
        scan = this.stringStart;
      } while ((curMatch = this.hashPrevious[curMatch & this.windowMask] & 65535) > limit && --chainLen !== 0);
      this.matchLength = Math.min(bestLength, this.lookAhead);
      return this.matchLength >= 3;
    };
    CompressedStreamWriter2.prototype.updateHash = function() {
      this.currentHash = this.dataWindow[this.stringStart] << this.hashShift ^ this.dataWindow[this.stringStart + 1];
    };
    CompressedStreamWriter2.prototype.huffmanTallyLit = function(literal) {
      this.arrDistances[this.bufferPosition] = 0;
      this.arrLiterals[this.bufferPosition++] = literal;
      this.treeLiteral.codeFrequencies[literal]++;
      return this.bufferPosition >= 1 << 14;
    };
    CompressedStreamWriter2.prototype.huffmanTallyDist = function(dist, len) {
      this.arrDistances[this.bufferPosition] = dist;
      this.arrLiterals[this.bufferPosition++] = len - 3;
      var lc = this.huffmanLengthCode(len - 3);
      this.treeLiteral.codeFrequencies[lc]++;
      if (lc >= 265 && lc < 285) {
        this.extraBits += Math.floor((lc - 261) / 4);
      }
      var dc = this.huffmanDistanceCode(dist - 1);
      this.treeDistances.codeFrequencies[dc]++;
      if (dc >= 4) {
        this.extraBits += Math.floor(dc / 2 - 1);
      }
      return this.bufferPosition >= 1 << 14;
    };
    CompressedStreamWriter2.prototype.huffmanFlushBlock = function(stored, storedOffset, storedLength, lastBlock) {
      this.treeLiteral.codeFrequencies[256]++;
      this.treeLiteral.buildTree();
      this.treeDistances.buildTree();
      this.treeLiteral.calculateBLFreq(this.treeCodeLengths);
      this.treeDistances.calculateBLFreq(this.treeCodeLengths);
      this.treeCodeLengths.buildTree();
      var blTreeCodes = 4;
      for (var i = 18; i > blTreeCodes; i--) {
        if (this.treeCodeLengths.codeLengths[CompressorHuffmanTree.huffCodeLengthOrders[i]] > 0) {
          blTreeCodes = i + 1;
        }
      }
      var opt_len = 14 + blTreeCodes * 3 + this.treeCodeLengths.getEncodedLength() + this.treeLiteral.getEncodedLength() + this.treeDistances.getEncodedLength() + this.extraBits;
      var static_len = this.extraBits;
      for (var i = 0; i < 286; i++) {
        static_len += this.treeLiteral.codeFrequencies[i] * ARR_LITERAL_LENGTHS[i];
      }
      for (var i = 0; i < 30; i++) {
        static_len += this.treeDistances.codeFrequencies[i] * ARR_DISTANCE_LENGTHS[i];
      }
      if (opt_len >= static_len) {
        opt_len = static_len;
      }
      if (storedOffset >= 0 && storedLength + 4 < opt_len >> 3) {
        this.huffmanFlushStoredBlock(stored, storedOffset, storedLength, lastBlock);
      } else if (opt_len == static_len) {
        this.pendingBufferWriteBits((1 << 1) + (lastBlock ? 1 : 0), 3);
        this.treeLiteral.setStaticCodes(ARR_LITERAL_CODES, ARR_LITERAL_LENGTHS);
        this.treeDistances.setStaticCodes(ARR_DISTANCE_CODES, ARR_DISTANCE_LENGTHS);
        this.huffmanCompressBlock();
        this.huffmanReset();
      } else {
        this.pendingBufferWriteBits((2 << 1) + (lastBlock ? 1 : 0), 3);
        this.huffmanSendAllTrees(blTreeCodes);
        this.huffmanCompressBlock();
        this.huffmanReset();
      }
    };
    CompressedStreamWriter2.prototype.huffmanFlushStoredBlock = function(stored, storedOffset, storedLength, lastBlock) {
      this.pendingBufferWriteBits((0 << 1) + (lastBlock ? 1 : 0), 3);
      this.pendingBufferAlignToByte();
      this.pendingBufferWriteShort(storedLength);
      this.pendingBufferWriteShort(~storedLength);
      this.pendingBufferWriteByteBlock(stored, storedOffset, storedLength);
      this.huffmanReset();
    };
    CompressedStreamWriter2.prototype.huffmanLengthCode = function(len) {
      if (len === 255) {
        return 285;
      }
      var code = 257;
      while (len >= 8) {
        code += 4;
        len >>= 1;
      }
      return code + len;
    };
    CompressedStreamWriter2.prototype.huffmanDistanceCode = function(distance) {
      var code = 0;
      while (distance >= 4) {
        code += 2;
        distance >>= 1;
      }
      return code + distance;
    };
    CompressedStreamWriter2.prototype.huffmanSendAllTrees = function(blTreeCodes) {
      this.treeCodeLengths.buildCodes();
      this.treeLiteral.buildCodes();
      this.treeDistances.buildCodes();
      this.pendingBufferWriteBits(this.treeLiteral.treeLength - 257, 5);
      this.pendingBufferWriteBits(this.treeDistances.treeLength - 1, 5);
      this.pendingBufferWriteBits(blTreeCodes - 4, 4);
      for (var rank = 0; rank < blTreeCodes; rank++) {
        this.pendingBufferWriteBits(this.treeCodeLengths.codeLengths[CompressorHuffmanTree.huffCodeLengthOrders[rank]], 3);
      }
      this.treeLiteral.writeTree(this.treeCodeLengths);
      this.treeDistances.writeTree(this.treeCodeLengths);
    };
    CompressedStreamWriter2.prototype.huffmanReset = function() {
      this.bufferPosition = 0;
      this.extraBits = 0;
      this.treeLiteral.reset();
      this.treeDistances.reset();
      this.treeCodeLengths.reset();
    };
    CompressedStreamWriter2.prototype.huffmanCompressBlock = function() {
      for (var i = 0; i < this.bufferPosition; i++) {
        var literalLen = this.arrLiterals[i] & 255;
        var dist = this.arrDistances[i];
        if (dist-- !== 0) {
          var lc = this.huffmanLengthCode(literalLen);
          this.treeLiteral.writeCodeToStream(lc);
          var bits = Math.floor((lc - 261) / 4);
          if (bits > 0 && bits <= 5) {
            this.pendingBufferWriteBits(literalLen & (1 << bits) - 1, bits);
          }
          var dc = this.huffmanDistanceCode(dist);
          this.treeDistances.writeCodeToStream(dc);
          bits = Math.floor(dc / 2 - 1);
          if (bits > 0) {
            this.pendingBufferWriteBits(dist & (1 << bits) - 1, bits);
          }
        } else {
          this.treeLiteral.writeCodeToStream(literalLen);
        }
      }
      this.treeLiteral.writeCodeToStream(256);
    };
    CompressedStreamWriter2.prototype.pendingBufferWriteBits = function(b, count) {
      var uint = new Uint32Array(1);
      uint[0] = this.pendingBufCache | b << this.pendingBufBitsInCache;
      this.pendingBufCache = uint[0];
      this.pendingBufBitsInCache += count;
      this.pendingBufferFlushBits();
    };
    CompressedStreamWriter2.prototype.pendingBufferFlush = function(isClose) {
      this.pendingBufferFlushBits();
      if (this.pendingBufLength > 0) {
        var array = new Uint8Array(this.pendingBufLength);
        array.set(this.pendingBuffer.subarray(0, this.pendingBufLength), 0);
        this.stream.push(array);
      }
      this.pendingBufLength = 0;
    };
    CompressedStreamWriter2.prototype.pendingBufferFlushBits = function() {
      var result = 0;
      while (this.pendingBufBitsInCache >= 8 && this.pendingBufLength < 1 << 16) {
        this.pendingBuffer[this.pendingBufLength++] = this.pendingBufCache;
        this.pendingBufCache >>= 8;
        this.pendingBufBitsInCache -= 8;
        result++;
      }
      return result;
    };
    CompressedStreamWriter2.prototype.pendingBufferWriteByteBlock = function(data, offset, length) {
      var array = data.subarray(offset, offset + length);
      this.pendingBuffer.set(array, this.pendingBufLength);
      this.pendingBufLength += length;
    };
    CompressedStreamWriter2.prototype.pendingBufferWriteShort = function(s) {
      this.pendingBuffer[this.pendingBufLength++] = s;
      this.pendingBuffer[this.pendingBufLength++] = s >> 8;
    };
    CompressedStreamWriter2.prototype.pendingBufferAlignToByte = function() {
      if (this.pendingBufBitsInCache > 0) {
        this.pendingBuffer[this.pendingBufLength++] = this.pendingBufCache;
      }
      this.pendingBufCache = 0;
      this.pendingBufBitsInCache = 0;
    };
    CompressedStreamWriter2.initHuffmanTree = function() {
      var i = 0;
      while (i < 144) {
        ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse(48 + i << 8);
        ARR_LITERAL_LENGTHS[i++] = 8;
      }
      while (i < 256) {
        ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse(400 - 144 + i << 7);
        ARR_LITERAL_LENGTHS[i++] = 9;
      }
      while (i < 280) {
        ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse(0 - 256 + i << 9);
        ARR_LITERAL_LENGTHS[i++] = 7;
      }
      while (i < 286) {
        ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse(192 - 280 + i << 8);
        ARR_LITERAL_LENGTHS[i++] = 8;
      }
      for (i = 0; i < 30; i++) {
        ARR_DISTANCE_CODES[i] = CompressorHuffmanTree.bitReverse(i << 11);
        ARR_DISTANCE_LENGTHS[i] = 5;
      }
    };
    CompressedStreamWriter2.prototype.close = function() {
      do {
        this.pendingBufferFlush(true);
        if (!this.compressData(true)) {
          this.pendingBufferFlush(true);
          this.pendingBufferAlignToByte();
          if (!this.noWrap) {
            this.pendingBufferWriteShortBytes(this.checkSum >> 16);
            this.pendingBufferWriteShortBytes(this.checkSum & 65535);
          }
          this.pendingBufferFlush(true);
        }
      } while (!(this.inputEnd === this.inputOffset) || !(this.pendingBufLength === 0));
    };
    CompressedStreamWriter2.prototype.destroy = function() {
      this.stream = [];
      this.stream = void 0;
      this.pendingBuffer = void 0;
      this.treeLiteral = void 0;
      this.treeDistances = void 0;
      this.treeCodeLengths = void 0;
      this.arrLiterals = void 0;
      this.arrDistances = void 0;
      this.hashHead = void 0;
      this.hashPrevious = void 0;
      this.dataWindow = void 0;
      this.inputBuffer = void 0;
      this.pendingBufLength = void 0;
      this.pendingBufCache = void 0;
      this.pendingBufBitsInCache = void 0;
      this.bufferPosition = void 0;
      this.extraBits = void 0;
      this.currentHash = void 0;
      this.matchStart = void 0;
      this.matchLength = void 0;
      this.matchPrevAvail = void 0;
      this.blockStart = void 0;
      this.stringStart = void 0;
      this.lookAhead = void 0;
      this.totalBytesIn = void 0;
      this.inputOffset = void 0;
      this.inputEnd = void 0;
      this.windowSize = void 0;
      this.windowMask = void 0;
      this.hashSize = void 0;
      this.hashMask = void 0;
      this.hashShift = void 0;
      this.maxDist = void 0;
      this.checkSum = void 0;
      this.noWrap = void 0;
    };
    CompressedStreamWriter2.isHuffmanTreeInitiated = false;
    return CompressedStreamWriter2;
  }()
);
var CompressorHuffmanTree = (
  /** @class */
  function() {
    function CompressorHuffmanTree2(writer, elementCount, minCodes, maxLength) {
      this.writer = writer;
      this.codeMinCount = minCodes;
      this.maxLength = maxLength;
      this.codeFrequency = new Uint16Array(elementCount);
      this.lengthCount = new Int32Array(maxLength);
    }
    Object.defineProperty(CompressorHuffmanTree2.prototype, "treeLength", {
      get: function() {
        return this.codeCount;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(CompressorHuffmanTree2.prototype, "codeLengths", {
      get: function() {
        return this.codeLength;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(CompressorHuffmanTree2.prototype, "codeFrequencies", {
      get: function() {
        return this.codeFrequency;
      },
      enumerable: true,
      configurable: true
    });
    CompressorHuffmanTree2.prototype.setStaticCodes = function(codes, lengths) {
      var temp = new Int16Array(codes.length);
      temp.set(codes, 0);
      this.codes = temp;
      var lengthTemp = new Uint8Array(lengths.length);
      lengthTemp.set(lengths, 0);
      this.codeLength = lengthTemp;
    };
    CompressorHuffmanTree2.prototype.reset = function() {
      for (var i = 0; i < this.codeFrequency.length; i++) {
        this.codeFrequency[i] = 0;
      }
      this.codes = void 0;
      this.codeLength = void 0;
    };
    CompressorHuffmanTree2.prototype.writeCodeToStream = function(code) {
      this.writer.pendingBufferWriteBits(this.codes[code] & 65535, this.codeLength[code]);
    };
    CompressorHuffmanTree2.prototype.buildCodes = function() {
      var nextCode = new Int32Array(this.maxLength);
      this.codes = new Int16Array(this.codeCount);
      var code = 0;
      for (var bitsCount = 0; bitsCount < this.maxLength; bitsCount++) {
        nextCode[bitsCount] = code;
        code += this.lengthCount[bitsCount] << 15 - bitsCount;
      }
      for (var i = 0; i < this.codeCount; i++) {
        var bits = this.codeLength[i];
        if (bits > 0) {
          this.codes[i] = CompressorHuffmanTree2.bitReverse(nextCode[bits - 1]);
          nextCode[bits - 1] += 1 << 16 - bits;
        }
      }
    };
    CompressorHuffmanTree2.bitReverse = function(value) {
      return CompressorHuffmanTree2.reverseBits[value & 15] << 12 | CompressorHuffmanTree2.reverseBits[value >> 4 & 15] << 8 | CompressorHuffmanTree2.reverseBits[value >> 8 & 15] << 4 | CompressorHuffmanTree2.reverseBits[value >> 12];
    };
    CompressorHuffmanTree2.prototype.getEncodedLength = function() {
      var len = 0;
      for (var i = 0; i < this.codeFrequency.length; i++) {
        len += this.codeFrequency[i] * this.codeLength[i];
      }
      return len;
    };
    CompressorHuffmanTree2.prototype.calculateBLFreq = function(blTree) {
      var maxCount;
      var minCount;
      var count;
      var curLen = -1;
      var i = 0;
      while (i < this.codeCount) {
        count = 1;
        var nextLen = this.codeLength[i];
        if (nextLen === 0) {
          maxCount = 138;
          minCount = 3;
        } else {
          maxCount = 6;
          minCount = 3;
          if (curLen !== nextLen) {
            blTree.codeFrequency[nextLen]++;
            count = 0;
          }
        }
        curLen = nextLen;
        i++;
        while (i < this.codeCount && curLen === this.codeLength[i]) {
          i++;
          if (++count >= maxCount) {
            break;
          }
        }
        if (count < minCount) {
          blTree.codeFrequency[curLen] += count;
        } else if (curLen !== 0) {
          blTree.codeFrequency[16]++;
        } else if (count <= 10) {
          blTree.codeFrequency[17]++;
        } else {
          blTree.codeFrequency[18]++;
        }
      }
    };
    CompressorHuffmanTree2.prototype.writeTree = function(blTree) {
      var maxRepeatCount;
      var minRepeatCount;
      var currentRepeatCount;
      var currentCodeLength = -1;
      var i = 0;
      while (i < this.codeCount) {
        currentRepeatCount = 1;
        var nextLen = this.codeLength[i];
        if (nextLen === 0) {
          maxRepeatCount = 138;
          minRepeatCount = 3;
        } else {
          maxRepeatCount = 6;
          minRepeatCount = 3;
          if (currentCodeLength !== nextLen) {
            blTree.writeCodeToStream(nextLen);
            currentRepeatCount = 0;
          }
        }
        currentCodeLength = nextLen;
        i++;
        while (i < this.codeCount && currentCodeLength === this.codeLength[i]) {
          i++;
          if (++currentRepeatCount >= maxRepeatCount) {
            break;
          }
        }
        if (currentRepeatCount < minRepeatCount) {
          while (currentRepeatCount-- > 0) {
            blTree.writeCodeToStream(currentCodeLength);
          }
        } else if (currentCodeLength !== 0) {
          blTree.writeCodeToStream(16);
          this.writer.pendingBufferWriteBits(currentRepeatCount - 3, 2);
        } else if (currentRepeatCount <= 10) {
          blTree.writeCodeToStream(17);
          this.writer.pendingBufferWriteBits(currentRepeatCount - 3, 3);
        } else {
          blTree.writeCodeToStream(18);
          this.writer.pendingBufferWriteBits(currentRepeatCount - 11, 7);
        }
      }
    };
    CompressorHuffmanTree2.prototype.buildTree = function() {
      var codesCount = this.codeFrequency.length;
      var arrTree = new Int32Array(codesCount);
      var treeLength = 0;
      var maxCount = 0;
      for (var n = 0; n < codesCount; n++) {
        var freq = this.codeFrequency[n];
        if (freq !== 0) {
          var pos = treeLength++;
          var pPos = 0;
          while (pos > 0 && this.codeFrequency[arrTree[pPos = Math.floor((pos - 1) / 2)]] > freq) {
            arrTree[pos] = arrTree[pPos];
            pos = pPos;
          }
          arrTree[pos] = n;
          maxCount = n;
        }
      }
      while (treeLength < 2) {
        arrTree[treeLength++] = maxCount < 2 ? ++maxCount : 0;
      }
      this.codeCount = Math.max(maxCount + 1, this.codeMinCount);
      var leafsCount = treeLength;
      var nodesCount = leafsCount;
      var child = new Int32Array(4 * treeLength - 2);
      var values = new Int32Array(2 * treeLength - 1);
      for (var i = 0; i < treeLength; i++) {
        var node = arrTree[i];
        var iIndex = 2 * i;
        child[iIndex] = node;
        child[iIndex + 1] = -1;
        values[i] = this.codeFrequency[node] << 8;
        arrTree[i] = i;
      }
      this.constructHuffmanTree(arrTree, treeLength, values, nodesCount, child);
      this.buildLength(child);
    };
    CompressorHuffmanTree2.prototype.constructHuffmanTree = function(arrTree, treeLength, values, nodesCount, child) {
      do {
        var first = arrTree[0];
        var last = arrTree[--treeLength];
        var lastVal = values[last];
        var pPos = 0;
        var path = 1;
        while (path < treeLength) {
          if (path + 1 < treeLength && values[arrTree[path]] > values[arrTree[path + 1]]) {
            path++;
          }
          arrTree[pPos] = arrTree[path];
          pPos = path;
          path = pPos * 2 + 1;
        }
        while ((path = pPos) > 0 && values[arrTree[pPos = Math.floor((path - 1) / 2)]] > lastVal) {
          arrTree[path] = arrTree[pPos];
        }
        arrTree[path] = last;
        var second = arrTree[0];
        last = nodesCount++;
        child[2 * last] = first;
        child[2 * last + 1] = second;
        var minDepth = Math.min(values[first] & 255, values[second] & 255);
        values[last] = lastVal = values[first] + values[second] - minDepth + 1;
        pPos = 0;
        path = 1;
        while (path < treeLength) {
          if (path + 1 < treeLength && values[arrTree[path]] > values[arrTree[path + 1]]) {
            path++;
          }
          arrTree[pPos] = arrTree[path];
          pPos = path;
          path = pPos * 2 + 1;
        }
        while ((path = pPos) > 0 && values[arrTree[pPos = Math.floor((path - 1) / 2)]] > lastVal) {
          arrTree[path] = arrTree[pPos];
        }
        arrTree[path] = last;
      } while (treeLength > 1);
    };
    CompressorHuffmanTree2.prototype.buildLength = function(child) {
      this.codeLength = new Uint8Array(this.codeFrequency.length);
      var numNodes = Math.floor(child.length / 2);
      var numLeafs = Math.floor((numNodes + 1) / 2);
      var overflow = 0;
      for (var i = 0; i < this.maxLength; i++) {
        this.lengthCount[i] = 0;
      }
      overflow = this.calculateOptimalCodeLength(child, overflow, numNodes);
      if (overflow === 0) {
        return;
      }
      var iIncreasableLength = this.maxLength - 1;
      do {
        while (this.lengthCount[--iIncreasableLength] === 0) {
        }
        do {
          this.lengthCount[iIncreasableLength]--;
          this.lengthCount[++iIncreasableLength]++;
          overflow -= 1 << this.maxLength - 1 - iIncreasableLength;
        } while (overflow > 0 && iIncreasableLength < this.maxLength - 1);
      } while (overflow > 0);
      this.recreateTree(child, overflow, numLeafs);
    };
    CompressorHuffmanTree2.prototype.recreateTree = function(child, overflow, numLeafs) {
      this.lengthCount[this.maxLength - 1] += overflow;
      this.lengthCount[this.maxLength - 2] -= overflow;
      var nodePtr = 2 * numLeafs;
      for (var bits = this.maxLength; bits !== 0; bits--) {
        var n = this.lengthCount[bits - 1];
        while (n > 0) {
          var childPtr = 2 * child[nodePtr++];
          if (child[childPtr + 1] === -1) {
            this.codeLength[child[childPtr]] = bits;
            n--;
          }
        }
      }
    };
    CompressorHuffmanTree2.prototype.calculateOptimalCodeLength = function(child, overflow, numNodes) {
      var lengths = new Int32Array(numNodes);
      lengths[numNodes - 1] = 0;
      for (var i = numNodes - 1; i >= 0; i--) {
        var childIndex = 2 * i + 1;
        if (child[childIndex] !== -1) {
          var bitLength = lengths[i] + 1;
          if (bitLength > this.maxLength) {
            bitLength = this.maxLength;
            overflow++;
          }
          lengths[child[childIndex - 1]] = lengths[child[childIndex]] = bitLength;
        } else {
          var bitLength = lengths[i];
          this.lengthCount[bitLength - 1]++;
          this.codeLength[child[childIndex - 1]] = lengths[i];
        }
      }
      return overflow;
    };
    CompressorHuffmanTree2.reverseBits = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15];
    CompressorHuffmanTree2.huffCodeLengthOrders = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
    return CompressorHuffmanTree2;
  }()
);
var ChecksumCalculator = (
  /** @class */
  function() {
    function ChecksumCalculator3() {
    }
    ChecksumCalculator3.checksumUpdate = function(checksum, buffer, offset, length) {
      var uint = new Uint32Array(1);
      uint[0] = checksum;
      var checksum_uint = uint[0];
      var s1 = uint[0] = checksum_uint & 65535;
      var s2 = uint[0] = checksum_uint >> ChecksumCalculator3.checkSumBitOffset;
      while (length > 0) {
        var steps = Math.min(length, ChecksumCalculator3.checksumIterationCount);
        length -= steps;
        while (--steps >= 0) {
          s1 = s1 + (uint[0] = buffer[offset++] & 255);
          s2 = s2 + s1;
        }
        s1 %= ChecksumCalculator3.checksumBase;
        s2 %= ChecksumCalculator3.checksumBase;
      }
      checksum_uint = s2 << ChecksumCalculator3.checkSumBitOffset | s1;
      return checksum_uint;
    };
    ChecksumCalculator3.checkSumBitOffset = 16;
    ChecksumCalculator3.checksumBase = 65521;
    ChecksumCalculator3.checksumIterationCount = 3800;
    return ChecksumCalculator3;
  }()
);

// node_modules/@syncfusion/ej2-compression/src/decompressor-huffman-tree.js
var DecompressorHuffmanTree = (
  /** @class */
  function() {
    function DecompressorHuffmanTree2(lengths) {
      this.buildTree(lengths);
    }
    DecompressorHuffmanTree2.init = function() {
      var lengths;
      var index;
      lengths = new Uint8Array(288);
      index = 0;
      while (index < 144) {
        lengths[index++] = 8;
      }
      while (index < 256) {
        lengths[index++] = 9;
      }
      while (index < 280) {
        lengths[index++] = 7;
      }
      while (index < 288) {
        lengths[index++] = 8;
      }
      DecompressorHuffmanTree2.m_LengthTree = new DecompressorHuffmanTree2(lengths);
      lengths = new Uint8Array(32);
      index = 0;
      while (index < 32) {
        lengths[index++] = 5;
      }
      DecompressorHuffmanTree2.m_DistanceTree = new DecompressorHuffmanTree2(lengths);
    };
    DecompressorHuffmanTree2.prototype.prepareData = function(blCount, nextCode, lengths) {
      var code = 0;
      var treeSize = 512;
      for (var i = 0; i < lengths.length; i++) {
        var length_1 = lengths[i];
        if (length_1 > 0) {
          blCount[length_1]++;
        }
      }
      for (var bits = 1; bits <= DecompressorHuffmanTree2.MAX_BITLEN; bits++) {
        nextCode[bits] = code;
        code += blCount[bits] << 16 - bits;
        if (bits >= 10) {
          var start = nextCode[bits] & 130944;
          var end = code & 130944;
          treeSize += end - start >> 16 - bits;
        }
      }
      return {
        "code": code,
        "treeSize": treeSize
      };
    };
    DecompressorHuffmanTree2.prototype.treeFromData = function(blCount, nextCode, lengths, code, treeSize) {
      var tree = new Int16Array(treeSize);
      var pointer = 512;
      var increment = 1 << 7;
      for (var bits = DecompressorHuffmanTree2.MAX_BITLEN; bits >= 10; bits--) {
        var end = code & 130944;
        code -= blCount[bits] << 16 - bits;
        var start = code & 130944;
        for (var i = start; i < end; i += increment) {
          tree[Utils.bitReverse(i)] = Utils.bitConverterInt32ToInt16(-pointer << 4 | bits);
          pointer += 1 << bits - 9;
        }
      }
      for (var i = 0; i < lengths.length; i++) {
        var bits = lengths[i];
        if (bits == 0) {
          continue;
        }
        code = nextCode[bits];
        var revcode = Utils.bitReverse(code);
        if (bits <= 9) {
          do {
            tree[revcode] = Utils.bitConverterInt32ToInt16(i << 4 | bits);
            revcode += 1 << bits;
          } while (revcode < 512);
        } else {
          var subTree = tree[revcode & 511];
          var treeLen = 1 << (subTree & 15);
          subTree = -(subTree >> 4);
          do {
            tree[subTree | revcode >> 9] = Utils.bitConverterInt32ToInt16(i << 4 | bits);
            revcode += 1 << bits;
          } while (revcode < treeLen);
        }
        nextCode[bits] = code + (1 << 16 - bits);
      }
      return tree;
    };
    DecompressorHuffmanTree2.prototype.buildTree = function(lengths) {
      var blCount = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      var nextCode = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      var prepareData = this.prepareData(blCount, nextCode, lengths);
      this.m_Tree = this.treeFromData(blCount, nextCode, lengths, prepareData.code, prepareData.treeSize);
    };
    DecompressorHuffmanTree2.prototype.unpackSymbol = function(input) {
      var lookahead;
      var symbol;
      if ((lookahead = input.peekBits(9)) >= 0) {
        if ((symbol = this.m_Tree[lookahead]) >= 0) {
          input.skipBits(symbol & 15);
          return symbol >> 4;
        }
        var subtree = -(symbol >> 4);
        var bitlen = symbol & 15;
        if ((lookahead = input.peekBits(bitlen)) >= 0) {
          symbol = this.m_Tree[subtree | lookahead >> 9];
          input.skipBits(symbol & 15);
          return symbol >> 4;
        } else {
          var bits = input.availableBits;
          lookahead = input.peekBits(bits);
          symbol = this.m_Tree[subtree | lookahead >> 9];
          if ((symbol & 15) <= bits) {
            input.skipBits(symbol & 15);
            return symbol >> 4;
          } else {
            return -1;
          }
        }
      } else {
        var bits = input.availableBits;
        lookahead = input.peekBits(bits);
        symbol = this.m_Tree[lookahead];
        if (symbol >= 0 && (symbol & 15) <= bits) {
          input.skipBits(symbol & 15);
          return symbol >> 4;
        } else {
          return -1;
        }
      }
    };
    Object.defineProperty(DecompressorHuffmanTree2, "lengthTree", {
      /// <summary>
      /// GET huffman tree for encoding and decoding lengths.
      /// </summary>
      get: function() {
        return this.m_LengthTree;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DecompressorHuffmanTree2, "distanceTree", {
      /// <summary>
      /// GET huffman tree for encoding and decoding distances.
      /// </summary>
      get: function() {
        return this.m_DistanceTree;
      },
      enumerable: true,
      configurable: true
    });
    DecompressorHuffmanTree2.MAX_BITLEN = 15;
    return DecompressorHuffmanTree2;
  }()
);

// node_modules/@syncfusion/ej2-compression/src/checksum-calculator.js
var ChecksumCalculator2 = (
  /** @class */
  function() {
    function ChecksumCalculator3() {
    }
    ChecksumCalculator3.ChecksumUpdate = function(checksum, buffer, offset, length) {
      var checkSumUInt = checksum;
      var s1 = checkSumUInt & 65535;
      var s2 = checkSumUInt >> this.DEF_CHECKSUM_BIT_OFFSET;
      while (length > 0) {
        var steps = Math.min(length, this.DEF_CHECKSUM_ITERATIONSCOUNT);
        length -= steps;
        while (--steps >= 0) {
          s1 = s1 + (buffer[offset++] & 255);
          s2 = s2 + s1;
        }
        s1 %= this.DEF_CHECKSUM_BASE;
        s2 %= this.DEF_CHECKSUM_BASE;
      }
      checkSumUInt = s2 << this.DEF_CHECKSUM_BIT_OFFSET | s1;
      checksum = checkSumUInt;
    };
    ChecksumCalculator3.ChecksumGenerate = function(buffer, offset, length) {
      var result = 1;
      ChecksumCalculator3.ChecksumUpdate(result, buffer, offset, length);
      return result;
    };
    ChecksumCalculator3.DEF_CHECKSUM_BIT_OFFSET = 16;
    ChecksumCalculator3.DEF_CHECKSUM_BASE = 65521;
    ChecksumCalculator3.DEF_CHECKSUM_ITERATIONSCOUNT = 3800;
    return ChecksumCalculator3;
  }()
);

// node_modules/@syncfusion/ej2-compression/src/compression-reader.js
var CompressedStreamReader = (
  /** @class */
  function() {
    function CompressedStreamReader2(stream, bNoWrap) {
      this.defaultHuffmanDynamicTree = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
      this.DEF_HEADER_METHOD_MASK = 15 << 8;
      this.DEF_HEADER_INFO_MASK = 240 << 8;
      this.DEF_HEADER_FLAGS_FCHECK = 31;
      this.DEF_HEADER_FLAGS_FDICT = 32;
      this.DEF_HEADER_FLAGS_FLEVEL = 192;
      this.DEF_MAX_WINDOW_SIZE = 65535;
      this.DEF_HUFFMAN_REPEATE_MAX = 258;
      this.DEF_HUFFMAN_END_BLOCK = 256;
      this.DEF_HUFFMAN_LENGTH_MINIMUMCODE = 257;
      this.DEF_HUFFMAN_LENGTH_MAXIMUMCODE = 285;
      this.DEF_HUFFMAN_DISTANCE_MAXIMUMCODE = 29;
      this.mCheckSum = 1;
      this.tBuffer = 0;
      this.mBufferedBits = 0;
      this.mTempBuffer = new Uint8Array(4);
      this.mBlockBuffer = new Uint8Array(this.DEF_MAX_WINDOW_SIZE);
      this.mbNoWrap = false;
      this.mWindowSize = 0;
      this.mCurrentPosition = 0;
      this.mDataLength = 0;
      this.mbCanReadNextBlock = true;
      this.mbCanReadMoreData = true;
      this.mbCheckSumRead = false;
      if (stream == null) {
        throw new DOMException("stream");
      }
      if (stream.length === 0) {
        throw new DOMException("stream - string can not be empty");
      }
      DecompressorHuffmanTree.init();
      this.mInputStream = new Stream(stream);
      this.mbNoWrap = bNoWrap;
      if (!this.mbNoWrap) {
        this.readZLibHeader();
      }
      this.decodeBlockHeader();
    }
    Object.defineProperty(CompressedStreamReader2.prototype, "mBuffer", {
      get: function() {
        return this.tBuffer;
      },
      set: function(value) {
        this.tBuffer = value;
      },
      enumerable: true,
      configurable: true
    });
    CompressedStreamReader2.prototype.peekBits = function(count) {
      if (count < 0) {
        throw new DOMException("count", "Bits count can not be less than zero.");
      }
      if (count > 32) {
        throw new DOMException("count", "Count of bits is too large.");
      }
      if (this.mBufferedBits < count) {
        this.fillBuffer();
      }
      if (this.mBufferedBits < count) {
        return -1;
      }
      var bitMask = ~(4294967295 << count);
      var result = Utils.bitConverterUintToInt32(this.mBuffer & bitMask);
      return result;
    };
    CompressedStreamReader2.prototype.fillBuffer = function() {
      var length = 4 - (this.mBufferedBits >> 3) - ((this.mBufferedBits & 7) !== 0 ? 1 : 0);
      if (length === 0) {
        return;
      }
      var bytesRead = this.mInputStream.read(this.mTempBuffer, 0, length);
      for (var i = 0; i < bytesRead; i++) {
        this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer | Utils.bitConverterInt32ToUint(this.mTempBuffer[i] << this.mBufferedBits));
        this.mBufferedBits += 8;
      }
    };
    CompressedStreamReader2.prototype.skipBits = function(count) {
      if (count < 0) {
        throw new DOMException("count", "Bits count can not be less than zero.");
      }
      if (count === 0) {
        return;
      }
      if (count >= this.mBufferedBits) {
        count -= this.mBufferedBits;
        this.mBufferedBits = 0;
        this.mBuffer = 0;
        if (count > 0) {
          this.mInputStream.position += count >> 3;
          count &= 7;
          if (count > 0) {
            this.fillBuffer();
            this.mBufferedBits -= count;
            this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer >>> count);
          }
        }
      } else {
        this.mBufferedBits -= count;
        this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer >>> count);
      }
    };
    Object.defineProperty(CompressedStreamReader2.prototype, "availableBits", {
      get: function() {
        return this.mBufferedBits;
      },
      enumerable: true,
      configurable: true
    });
    CompressedStreamReader2.prototype.readZLibHeader = function() {
      var header = this.readInt16();
      if (header === -1) {
        throw new DOMException("Header of the stream can not be read.");
      }
      if (header % 31 !== 0) {
        throw new DOMException("Header checksum illegal");
      }
      if ((header & this.DEF_HEADER_METHOD_MASK) !== 8 << 8) {
        throw new DOMException("Unsupported compression method.");
      }
      this.mWindowSize = Math.pow(2, ((header & this.DEF_HEADER_INFO_MASK) >> 12) + 8);
      if (this.mWindowSize > 65535) {
        throw new DOMException("Unsupported window size for deflate compression method.");
      }
      if ((header & this.DEF_HEADER_FLAGS_FDICT) >> 5 === 1) {
        throw new DOMException("Custom dictionary is not supported at the moment.");
      }
    };
    CompressedStreamReader2.prototype.readInt16 = function() {
      var result = this.readBits(8) << 8;
      result |= this.readBits(8);
      return result;
    };
    CompressedStreamReader2.prototype.readBits = function(count) {
      var result = this.peekBits(count);
      if (result === -1) {
        return -1;
      }
      this.mBufferedBits -= count;
      this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer >>> count);
      return result;
    };
    CompressedStreamReader2.prototype.decodeBlockHeader = function() {
      if (!this.mbCanReadNextBlock) {
        return false;
      }
      var bFinalBlock = this.readBits(1);
      if (bFinalBlock === -1) {
        return false;
      }
      var blockType = this.readBits(2);
      if (blockType === -1) {
        return false;
      }
      this.mbCanReadNextBlock = bFinalBlock === 0;
      switch (blockType) {
        case 0:
          this.mbReadingUncompressed = true;
          this.skipToBoundary();
          var length_1 = this.readInt16Inverted();
          var lengthComplement = this.readInt16Inverted();
          if (length_1 !== (lengthComplement ^ 65535)) {
            throw new DOMException("Wrong block length.");
          }
          if (length_1 > 65535) {
            throw new DOMException("Uncompressed block length can not be more than 65535.");
          }
          this.mUncompressedDataLength = length_1;
          this.mCurrentLengthTree = null;
          this.mCurrentDistanceTree = null;
          break;
        case 1:
          this.mbReadingUncompressed = false;
          this.mUncompressedDataLength = -1;
          this.mCurrentLengthTree = DecompressorHuffmanTree.lengthTree;
          this.mCurrentDistanceTree = DecompressorHuffmanTree.distanceTree;
          break;
        case 2:
          this.mbReadingUncompressed = false;
          this.mUncompressedDataLength = -1;
          var trees = this.decodeDynamicHeader(this.mCurrentLengthTree, this.mCurrentDistanceTree);
          this.mCurrentLengthTree = trees.lengthTree;
          this.mCurrentDistanceTree = trees.distanceTree;
          break;
        default:
          throw new DOMException("Wrong block type.");
      }
      return true;
    };
    CompressedStreamReader2.prototype.skipToBoundary = function() {
      this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer >>> (this.mBufferedBits & 7));
      this.mBufferedBits &= ~7;
    };
    CompressedStreamReader2.prototype.readInt16Inverted = function() {
      var result = this.readBits(8);
      result |= this.readBits(8) << 8;
      return result;
    };
    CompressedStreamReader2.prototype.decodeDynamicHeader = function(lengthTree, distanceTree) {
      var bLastSymbol = 0;
      var iLengthsCount = this.readBits(5);
      var iDistancesCount = this.readBits(5);
      var iCodeLengthsCount = this.readBits(4);
      if (iLengthsCount < 0 || iDistancesCount < 0 || iCodeLengthsCount < 0) {
        throw new DOMException("Wrong dynamic huffman codes.");
      }
      iLengthsCount += 257;
      iDistancesCount += 1;
      var iResultingCodeLengthsCount = iLengthsCount + iDistancesCount;
      var arrResultingCodeLengths = new Uint8Array(iResultingCodeLengthsCount);
      var arrDecoderCodeLengths = new Uint8Array(19);
      iCodeLengthsCount += 4;
      var iCurrentCode = 0;
      while (iCurrentCode < iCodeLengthsCount) {
        var len = this.readBits(3);
        if (len < 0) {
          throw new DOMException("Wrong dynamic huffman codes.");
        }
        arrDecoderCodeLengths[this.defaultHuffmanDynamicTree[iCurrentCode++]] = len;
      }
      var treeInternalDecoder = new DecompressorHuffmanTree(arrDecoderCodeLengths);
      iCurrentCode = 0;
      for (; ; ) {
        var symbol = void 0;
        var bNeedBreak = false;
        symbol = treeInternalDecoder.unpackSymbol(this);
        while ((symbol & ~15) === 0) {
          arrResultingCodeLengths[iCurrentCode++] = bLastSymbol = symbol;
          if (iCurrentCode === iResultingCodeLengthsCount) {
            bNeedBreak = true;
            break;
          }
          symbol = treeInternalDecoder.unpackSymbol(this);
        }
        if (bNeedBreak) {
          break;
        }
        if (symbol < 0) {
          throw new DOMException("Wrong dynamic huffman codes.");
        }
        if (symbol >= 17) {
          bLastSymbol = 0;
        } else if (iCurrentCode === 0) {
          throw new DOMException("Wrong dynamic huffman codes.");
        }
        var miRepSymbol = symbol - 16;
        var bits = CompressedStreamReader2.DEF_HUFFMAN_DYNTREE_REPEAT_BITS[miRepSymbol];
        var count = this.readBits(bits);
        if (count < 0) {
          throw new DOMException("Wrong dynamic huffman codes.");
        }
        count += CompressedStreamReader2.DEF_HUFFMAN_DYNTREE_REPEAT_MINIMUMS[miRepSymbol];
        if (iCurrentCode + count > iResultingCodeLengthsCount) {
          throw new DOMException("Wrong dynamic huffman codes.");
        }
        while (count-- > 0) {
          arrResultingCodeLengths[iCurrentCode++] = bLastSymbol;
        }
        if (iCurrentCode === iResultingCodeLengthsCount) {
          break;
        }
      }
      var tempArray = new Uint8Array(iLengthsCount);
      tempArray.set(arrResultingCodeLengths.subarray(0, iLengthsCount), 0);
      lengthTree = new DecompressorHuffmanTree(tempArray);
      tempArray = arrResultingCodeLengths.slice(iLengthsCount, iLengthsCount + iDistancesCount);
      distanceTree = new DecompressorHuffmanTree(tempArray);
      return {
        "lengthTree": lengthTree,
        "distanceTree": distanceTree
      };
    };
    CompressedStreamReader2.prototype.readHuffman = function() {
      var free = this.DEF_MAX_WINDOW_SIZE - (this.mDataLength - this.mCurrentPosition);
      var dataRead = false;
      var readdata = {};
      while (free >= this.DEF_HUFFMAN_REPEATE_MAX) {
        var symbol = void 0;
        symbol = this.mCurrentLengthTree.unpackSymbol(this);
        while ((symbol & ~255) === 0) {
          readdata[(this.mDataLength + 1) % this.DEF_MAX_WINDOW_SIZE] = symbol;
          this.mBlockBuffer[this.mDataLength++ % this.DEF_MAX_WINDOW_SIZE] = symbol;
          dataRead = true;
          if (--free < this.DEF_HUFFMAN_REPEATE_MAX) {
            return true;
          }
          symbol = this.mCurrentLengthTree.unpackSymbol(this);
        }
        if (symbol < this.DEF_HUFFMAN_LENGTH_MINIMUMCODE) {
          if (symbol < this.DEF_HUFFMAN_END_BLOCK) {
            throw new DOMException("Illegal code.");
          }
          var numDataRead = dataRead ? 1 : 0;
          this.mbCanReadMoreData = this.decodeBlockHeader();
          var numReadMore = this.mbCanReadMoreData ? 1 : 0;
          return numDataRead | numReadMore ? true : false;
        }
        if (symbol > this.DEF_HUFFMAN_LENGTH_MAXIMUMCODE) {
          throw new DOMException("Illegal repeat code length.");
        }
        var iRepeatLength = CompressedStreamReader2.DEF_HUFFMAN_REPEAT_LENGTH_BASE[symbol - this.DEF_HUFFMAN_LENGTH_MINIMUMCODE];
        var iRepeatExtraBits = CompressedStreamReader2.DEF_HUFFMAN_REPEAT_LENGTH_EXTENSION[symbol - this.DEF_HUFFMAN_LENGTH_MINIMUMCODE];
        if (iRepeatExtraBits > 0) {
          var extra = this.readBits(iRepeatExtraBits);
          if (extra < 0) {
            throw new DOMException("Wrong data.");
          }
          iRepeatLength += extra;
        }
        symbol = this.mCurrentDistanceTree.unpackSymbol(this);
        if (symbol < 0 || symbol > CompressedStreamReader2.DEF_HUFFMAN_REPEAT_DISTANCE_BASE.length) {
          throw new DOMException("Wrong distance code.");
        }
        var iRepeatDistance = CompressedStreamReader2.DEF_HUFFMAN_REPEAT_DISTANCE_BASE[symbol];
        iRepeatExtraBits = CompressedStreamReader2.DEF_HUFFMAN_REPEAT_DISTANCE_EXTENSION[symbol];
        if (iRepeatExtraBits > 0) {
          var extra = this.readBits(iRepeatExtraBits);
          if (extra < 0) {
            throw new DOMException("Wrong data.");
          }
          iRepeatDistance += extra;
        }
        for (var i = 0; i < iRepeatLength; i++) {
          this.mBlockBuffer[this.mDataLength % this.DEF_MAX_WINDOW_SIZE] = this.mBlockBuffer[(this.mDataLength - iRepeatDistance) % this.DEF_MAX_WINDOW_SIZE];
          this.mDataLength++;
          free--;
        }
        dataRead = true;
      }
      return dataRead;
    };
    CompressedStreamReader2.prototype.read = function(buffer, offset, length) {
      if (buffer == null) {
        throw new DOMException("buffer");
      }
      if (offset < 0 || offset > buffer.length - 1) {
        throw new DOMException("offset", "Offset does not belong to specified buffer.");
      }
      if (length < 0 || length > buffer.length - offset) {
        throw new DOMException("length", "Length is illegal.");
      }
      var initialLength = length;
      while (length > 0) {
        if (this.mCurrentPosition < this.mDataLength) {
          var inBlockPosition = this.mCurrentPosition % this.DEF_MAX_WINDOW_SIZE;
          var dataToCopy = Math.min(this.DEF_MAX_WINDOW_SIZE - inBlockPosition, this.mDataLength - this.mCurrentPosition);
          dataToCopy = Math.min(dataToCopy, length);
          Utils.arrayCopy(this.mBlockBuffer, inBlockPosition, buffer, offset, dataToCopy);
          this.mCurrentPosition += dataToCopy;
          offset += dataToCopy;
          length -= dataToCopy;
        } else {
          if (!this.mbCanReadMoreData) {
            break;
          }
          var oldDataLength = this.mDataLength;
          if (!this.mbReadingUncompressed) {
            if (!this.readHuffman()) {
              break;
            }
          } else {
            if (this.mUncompressedDataLength === 0) {
              this.mbCanReadMoreData = this.decodeBlockHeader();
              if (!this.mbCanReadMoreData) {
                break;
              }
            } else {
              var inBlockPosition = this.mDataLength % this.DEF_MAX_WINDOW_SIZE;
              var dataToRead = Math.min(this.mUncompressedDataLength, this.DEF_MAX_WINDOW_SIZE - inBlockPosition);
              var dataRead = this.readPackedBytes(this.mBlockBuffer, inBlockPosition, dataToRead);
              if (dataToRead !== dataRead) {
                throw new DOMException("Not enough data in stream.");
              }
              this.mUncompressedDataLength -= dataRead;
              this.mDataLength += dataRead;
            }
          }
          if (oldDataLength < this.mDataLength) {
            var start = oldDataLength % this.DEF_MAX_WINDOW_SIZE;
            var end = this.mDataLength % this.DEF_MAX_WINDOW_SIZE;
            if (start < end) {
              this.checksumUpdate(this.mBlockBuffer, start, end - start);
            } else {
              this.checksumUpdate(this.mBlockBuffer, start, this.DEF_MAX_WINDOW_SIZE - start);
              if (end > 0) {
                this.checksumUpdate(this.mBlockBuffer, 0, end);
              }
            }
          }
        }
      }
      if (!this.mbCanReadMoreData && !this.mbCheckSumRead && !this.mbNoWrap) {
        this.skipToBoundary();
        var checkSum = this.readInt32();
        if (checkSum !== this.mCheckSum) {
          throw new DOMException("Checksum check failed.");
        }
        this.mbCheckSumRead = true;
      }
      return initialLength - length;
    };
    CompressedStreamReader2.prototype.readPackedBytes = function(buffer, offset, length) {
      if (buffer == null) {
        throw new DOMException("buffer");
      }
      if (offset < 0 || offset > buffer.length - 1) {
        throw new DOMException('offset", "Offset can not be less than zero or greater than buffer length - 1.');
      }
      if (length < 0) {
        throw new DOMException('length", "Length can not be less than zero.');
      }
      if (length > buffer.length - offset) {
        throw new DOMException('length", "Length is too large.');
      }
      if ((this.mBufferedBits & 7) !== 0) {
        throw new DOMException("Reading of unalligned data is not supported.");
      }
      if (length === 0) {
        return 0;
      }
      var result = 0;
      while (this.mBufferedBits > 0 && length > 0) {
        buffer[offset++] = this.mBuffer;
        this.mBufferedBits -= 8;
        this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer >>> 8);
        length--;
        result++;
      }
      if (length > 0) {
        result += this.mInputStream.read(buffer, offset, length);
      }
      return result;
    };
    CompressedStreamReader2.prototype.readInt32 = function() {
      var result = this.readBits(8) << 24;
      result |= this.readBits(8) << 16;
      result |= this.readBits(8) << 8;
      result |= this.readBits(8);
      return result;
    };
    CompressedStreamReader2.prototype.checksumUpdate = function(buffer, offset, length) {
      ChecksumCalculator2.ChecksumUpdate(this.mCheckSum, buffer, offset, length);
    };
    CompressedStreamReader2.DEF_REVERSE_BITS = new Uint8Array([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]);
    CompressedStreamReader2.DEF_HUFFMAN_DYNTREE_REPEAT_MINIMUMS = [3, 3, 11];
    CompressedStreamReader2.DEF_HUFFMAN_DYNTREE_REPEAT_BITS = [2, 3, 7];
    CompressedStreamReader2.DEF_HUFFMAN_REPEAT_LENGTH_BASE = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258];
    CompressedStreamReader2.DEF_HUFFMAN_REPEAT_LENGTH_EXTENSION = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];
    CompressedStreamReader2.DEF_HUFFMAN_REPEAT_DISTANCE_BASE = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577];
    CompressedStreamReader2.DEF_HUFFMAN_REPEAT_DISTANCE_EXTENSION = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];
    return CompressedStreamReader2;
  }()
);
var Stream = (
  /** @class */
  function() {
    function Stream2(input) {
      this.position = 0;
      this.inputStream = new Uint8Array(input.buffer);
    }
    Object.defineProperty(Stream2.prototype, "length", {
      get: function() {
        return this.inputStream.buffer.byteLength;
      },
      enumerable: true,
      configurable: true
    });
    Stream2.prototype.read = function(buffer, start, length) {
      var temp = new Uint8Array(this.inputStream.buffer, this.position + start);
      var data = temp.subarray(0, length);
      buffer.set(data, 0);
      this.position += data.byteLength;
      return data.byteLength;
    };
    Stream2.prototype.readByte = function() {
      return this.inputStream[this.position++];
    };
    Stream2.prototype.write = function(inputBuffer, offset, count) {
      Utils.arrayCopy(inputBuffer, 0, this.inputStream, this.position + offset, count);
      this.position += count;
    };
    Stream2.prototype.toByteArray = function() {
      return new Uint8Array(this.inputStream.buffer);
    };
    return Stream2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/value-formatter.js
var ValueFormatter = (
  /** @class */
  function() {
    function ValueFormatter2(cultureName) {
      this.intl = new Internationalization();
    }
    ValueFormatter2.prototype.getFormatFunction = function(format, isServerRendered) {
      if (format.type) {
        if (isServerRendered) {
          format.isServerRendered = true;
        }
        return this.intl.getDateFormat(format);
      } else {
        return this.intl.getNumberFormat(format);
      }
    };
    ValueFormatter2.prototype.toView = function(value, format) {
      var result = value;
      if (!isNullOrUndefined(format) && !isNullOrUndefined(value)) {
        result = format(value);
      }
      return result;
    };
    ValueFormatter2.prototype.displayText = function(value, format, isServerRendered) {
      return this.toView(value, this.getFormatFunction(format, isServerRendered));
    };
    return ValueFormatter2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/csv-helper.js
var CsvHelper = (
  /** @class */
  function() {
    function CsvHelper2(json, separator) {
      this.csvStr = "";
      if (separator === null || separator === void 0) {
        this.separator = ",";
      } else {
        this.separator = separator;
      }
      this.formatter = new ValueFormatter();
      this.isMicrosoftBrowser = !!navigator.msSaveBlob;
      if (json.isServerRendered !== null && json.isServerRendered !== void 0) {
        this.isServerRendered = json.isServerRendered;
      }
      if (json.styles !== null && json.styles !== void 0) {
        this.globalStyles = /* @__PURE__ */ new Map();
        for (var i = 0; i < json.styles.length; i++) {
          if (json.styles[i].name !== void 0 && json.styles[i].numberFormat !== void 0) {
            this.globalStyles.set(json.styles[i].name, json.styles[i].numberFormat);
          }
        }
      }
      if (json.worksheets !== null && json.worksheets !== void 0) {
        this.parseWorksheet(json.worksheets[0]);
      }
    }
    CsvHelper2.prototype.parseWorksheet = function(json) {
      if (json.rows !== null && json.rows !== void 0) {
        this.parseRows(json.rows);
      }
    };
    CsvHelper2.prototype.parseRows = function(rows) {
      var count = 1;
      for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
        var row = rows_1[_i];
        if (row.index !== null && row.index !== void 0) {
          while (count < row.index) {
            this.csvStr += "\r\n";
            count++;
          }
          this.parseRow(row);
        } else {
          throw Error("Row index is missing.");
        }
      }
      this.csvStr += "\r\n";
    };
    CsvHelper2.prototype.parseRow = function(row) {
      if (row.cells !== null && row.cells !== void 0) {
        var count = 1;
        for (var _i = 0, _a = row.cells; _i < _a.length; _i++) {
          var cell = _a[_i];
          if (cell.index !== null && cell.index !== void 0) {
            while (count < cell.index) {
              this.csvStr += this.separator;
              count++;
            }
            this.parseCell(cell);
          } else {
            throw Error("Cell index is missing.");
          }
        }
      }
    };
    CsvHelper2.prototype.parseCell = function(cell) {
      var csv = this.csvStr;
      if (cell.value !== void 0) {
        if (cell.value instanceof Date) {
          if (cell.style !== void 0 && cell.style.numberFormat !== void 0) {
            try {
              csv += this.parseCellValue(this.formatter.displayText(cell.value, {
                type: "dateTime",
                skeleton: cell.style.numberFormat
              }, this.isServerRendered));
            } catch (error) {
              csv += this.parseCellValue(this.formatter.displayText(cell.value, {
                type: "dateTime",
                format: cell.style.numberFormat
              }, this.isServerRendered));
            }
          } else if (cell.style !== void 0 && cell.style.name !== void 0 && this.globalStyles.has(cell.style.name)) {
            try {
              csv += this.parseCellValue(this.formatter.displayText(cell.value, {
                type: "dateTime",
                skeleton: this.globalStyles.get(cell.style.name)
              }, this.isServerRendered));
            } catch (error) {
              csv += this.parseCellValue(this.formatter.displayText(cell.value, {
                type: "dateTime",
                format: this.globalStyles.get(cell.style.name)
              }, this.isServerRendered));
            }
          } else {
            csv += cell.value;
          }
        } else if (typeof cell.value === "boolean") {
          csv += cell.value ? "TRUE" : "FALSE";
        } else if (typeof cell.value === "number") {
          if (cell.style !== void 0 && cell.style.numberFormat !== void 0) {
            csv += this.parseCellValue(this.formatter.displayText(cell.value, {
              format: cell.style.numberFormat,
              ignoreCurrency: true
            }, this.isServerRendered));
          } else if (cell.style !== void 0 && cell.style.name !== void 0 && this.globalStyles.has(cell.style.name)) {
            csv += this.parseCellValue(this.formatter.displayText(cell.value, {
              format: this.globalStyles.get(cell.style.name),
              ignoreCurrency: true
            }, this.isServerRendered));
          } else {
            csv += cell.value;
          }
        } else {
          csv += this.parseCellValue(cell.value);
        }
      }
      this.csvStr = csv;
    };
    CsvHelper2.prototype.parseCellValue = function(value) {
      var val = "";
      var length = value.length;
      for (var start = 0; start < length; start++) {
        if (value[start] === '"') {
          val += value[start].replace('"', '""');
        } else {
          val += value[start];
        }
      }
      value = val;
      if (value.indexOf(this.separator) !== -1 || value.indexOf("\n") !== -1 || value.indexOf('"') !== -1) {
        return value = '"' + value + '"';
      } else {
        return value;
      }
    };
    CsvHelper2.prototype.save = function(fileName) {
      this.buffer = new Blob(["\uFEFF" + this.csvStr], {
        type: "text/csv;charset=UTF-8"
      });
      if (this.isMicrosoftBrowser) {
        navigator.msSaveBlob(this.buffer, fileName);
      } else {
        var dataUrl_1 = window.URL.createObjectURL(this.buffer);
        var dwlLink = document.createElementNS("http://www.w3.org/1999/xhtml", "a");
        dwlLink.download = fileName;
        dwlLink.href = dataUrl_1;
        var event_1 = document.createEvent("MouseEvent");
        event_1.initEvent("click", true, true);
        dwlLink.dispatchEvent(event_1);
        setTimeout(function() {
          window.URL.revokeObjectURL(dataUrl_1);
        });
      }
    };
    CsvHelper2.prototype.saveAsBlob = function(encodingType) {
      if (encodingType != void 0) {
        var encoding = new Encoding();
        var encodeString = "UTF-8";
        if (encodingType.toUpperCase() == "ANSI") {
          encoding.type = "Ansi";
          encodeString = "ANSI";
        } else if (encodingType.toUpperCase() == "UNICODE") {
          encoding.type = "Unicode";
          encodeString = "UNICODE";
        } else {
          encoding.type = "Utf8";
          encodeString = "UTF-8";
        }
        var buffer = encoding.getBytes(this.csvStr, 0, this.csvStr.length);
        return new Blob([buffer], {
          type: "text/csv;charset=" + encodeString
        });
      } else return new Blob(["\uFEFF" + this.csvStr], {
        type: "text/csv;charset=UTF-8"
      });
    };
    return CsvHelper2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/blob-helper.js
var BlobHelper = (
  /** @class */
  function() {
    function BlobHelper2() {
      this.parts = [];
    }
    BlobHelper2.prototype.append = function(part) {
      this.parts.push(part);
      this.blob = void 0;
    };
    BlobHelper2.prototype.getBlob = function() {
      return new Blob(this.parts, {
        type: "text/plain"
      });
    };
    return BlobHelper2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/auto-filters.js
var AutoFilters = (
  /** @class */
  /* @__PURE__ */ function() {
    function AutoFilters2() {
    }
    return AutoFilters2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/workbook.js
var Workbook = (
  /** @class */
  function() {
    function Workbook2(json, saveType, culture, currencyString, separator) {
      this.sharedStringCount = 0;
      this.unitsProportions = [96 / 75, 96 / 300, 96, 96 / 25.4, 96 / 2.54, 1, 96 / 72, 96 / 72 / 12700];
      this.hyperlinkStyle = {
        fontColor: "#0000FF",
        underline: true
      };
      if (culture !== void 0) {
        this.culture = culture;
      } else {
        this.culture = "en-US";
      }
      if (currencyString !== void 0) {
        this.currency = currencyString;
      } else {
        this.currency = "USD";
      }
      this.intl = new Internationalization(this.culture);
      this.mSaveType = saveType;
      if (saveType === "xlsx") {
        this.mArchive = new ZipArchive();
        this.sharedString = [];
        this.mFonts = [];
        this.mBorders = [];
        this.mStyles = [];
        this.printTitles = /* @__PURE__ */ new Map();
        this.cellStyles = /* @__PURE__ */ new Map();
        this.mNumFmt = /* @__PURE__ */ new Map();
        this.mFills = /* @__PURE__ */ new Map();
        this.mStyles.push(new CellStyle());
        this.mFonts.push(new Font());
        this.cellStyles.set("Normal", new CellStyles());
        this.mCellXfs = [];
        this.mCellStyleXfs = [];
        this.drawingCount = 0;
        this.imageCount = 0;
        if (json.styles !== null && json.styles !== void 0) {
          this.globalStyles = /* @__PURE__ */ new Map();
          for (var i = 0; i < json.styles.length; i++) {
            if (json.styles[i].name !== void 0) {
              if (!this.cellStyles.has(json.styles[i].name)) {
                var cellStyle = new CellStyle();
                cellStyle.isGlobalStyle = true;
                this.parserCellStyle(json.styles[i], cellStyle, "none");
                var cellStylesIn = new CellStyles();
                cellStylesIn.name = cellStyle.name;
                cellStylesIn.xfId = cellStyle.index - 1;
                this.cellStyles.set(cellStylesIn.name, cellStylesIn);
                var tFormat = {};
                if (json.styles[i].numberFormat !== void 0) {
                  tFormat.format = json.styles[i].numberFormat;
                }
                if (json.styles[i].type !== void 0) {
                  tFormat.type = json.styles[i].type;
                } else {
                  tFormat.type = "datetime";
                }
                if (tFormat.format !== void 0) {
                  this.globalStyles.set(json.styles[i].name, tFormat);
                }
              } else {
                throw Error("Style name " + json.styles[i].name + " is already existed");
              }
            }
          }
        }
        if (json.worksheets !== null && json.worksheets !== void 0) {
          this.parserWorksheets(json.worksheets);
        } else {
          throw Error("Worksheet is expected.");
        }
        if (json.builtInProperties !== null && json.builtInProperties !== void 0) {
          this.builtInProperties = new BuiltInProperties();
          this.parserBuiltInProperties(json.builtInProperties, this.builtInProperties);
        }
      } else {
        this.csvHelper = new CsvHelper(json, separator);
      }
    }
    Workbook2.prototype.parserBuiltInProperties = function(jsonBuiltInProperties, builtInProperties) {
      if (jsonBuiltInProperties.author !== null && jsonBuiltInProperties.author !== void 0) {
        builtInProperties.author = jsonBuiltInProperties.author;
      }
      if (jsonBuiltInProperties.comments !== null && jsonBuiltInProperties.comments !== void 0) {
        builtInProperties.comments = jsonBuiltInProperties.comments;
      }
      if (jsonBuiltInProperties.category !== null && jsonBuiltInProperties.category !== void 0) {
        builtInProperties.category = jsonBuiltInProperties.category;
      }
      if (jsonBuiltInProperties.company !== null && jsonBuiltInProperties.company !== void 0) {
        builtInProperties.company = jsonBuiltInProperties.company;
      }
      if (jsonBuiltInProperties.manager !== null && jsonBuiltInProperties.manager !== void 0) {
        builtInProperties.manager = jsonBuiltInProperties.manager;
      }
      if (jsonBuiltInProperties.subject !== null && jsonBuiltInProperties.subject !== void 0) {
        builtInProperties.subject = jsonBuiltInProperties.subject;
      }
      if (jsonBuiltInProperties.title !== null && jsonBuiltInProperties.title !== void 0) {
        builtInProperties.title = jsonBuiltInProperties.title;
      }
      if (jsonBuiltInProperties.createdDate !== null && jsonBuiltInProperties.createdDate !== void 0) {
        builtInProperties.createdDate = jsonBuiltInProperties.createdDate;
      }
      if (jsonBuiltInProperties.modifiedDate !== null && jsonBuiltInProperties.modifiedDate !== void 0) {
        builtInProperties.modifiedDate = jsonBuiltInProperties.modifiedDate;
      }
      if (jsonBuiltInProperties.tags !== null && jsonBuiltInProperties.tags !== void 0) {
        builtInProperties.tags = jsonBuiltInProperties.tags;
      }
      if (jsonBuiltInProperties.status !== null && jsonBuiltInProperties.status !== void 0) {
        builtInProperties.status = jsonBuiltInProperties.status;
      }
    };
    Workbook2.prototype.parserWorksheets = function(json) {
      this.worksheets = new Worksheets();
      var length = json.length;
      for (var i = 0; i < length; i++) {
        var jsonSheet = json[i];
        var sheet = new Worksheet();
        this.mergeCells = new MergeCells();
        this.mergedCellsStyle = /* @__PURE__ */ new Map();
        this.mHyperLinks = [];
        if (jsonSheet.name !== null && jsonSheet.name !== void 0) {
          sheet.name = jsonSheet.name;
        } else {
          sheet.name = "Sheet" + (i + 1).toString();
        }
        if (jsonSheet.enableRtl !== null && jsonSheet.enableRtl !== void 0) {
          sheet.enableRtl = jsonSheet.enableRtl;
        }
        sheet.index = i + 1;
        if (jsonSheet.columns !== null && jsonSheet.columns !== void 0) {
          this.parserColumns(jsonSheet.columns, sheet);
        }
        if (jsonSheet.rows !== null && jsonSheet.rows !== void 0) {
          this.parserRows(jsonSheet.rows, sheet);
        }
        if (jsonSheet.showGridLines !== null && jsonSheet.showGridLines !== void 0) {
          sheet.showGridLines = jsonSheet.showGridLines;
        }
        if (jsonSheet.freeze !== null && jsonSheet.freeze !== void 0) {
          this.parserFreezePanes(jsonSheet.freeze, sheet);
        }
        if (jsonSheet.printTitle !== null && jsonSheet.printTitle !== void 0) {
          this.parserPrintTitle(jsonSheet.printTitle, sheet);
        }
        if (jsonSheet.pageSetup !== void 0) {
          if (jsonSheet.pageSetup.isSummaryRowBelow !== void 0) {
            sheet.isSummaryRowBelow = jsonSheet.pageSetup.isSummaryRowBelow;
          }
        }
        if (jsonSheet.images !== void 0) {
          this.parserImages(jsonSheet.images, sheet);
        }
        if (jsonSheet.autoFilters !== null && jsonSheet.autoFilters !== void 0) {
          this.parseFilters(jsonSheet.autoFilters, sheet);
        }
        sheet.index = i + 1;
        sheet.mergeCells = this.mergeCells;
        sheet.hyperLinks = this.mHyperLinks;
        this.worksheets.push(sheet);
      }
    };
    Workbook2.prototype.mergeOptions = function(fromJson, toJson) {
      var result = {};
      this.applyProperties(fromJson, result);
      this.applyProperties(toJson, result);
      return result;
    };
    Workbook2.prototype.applyProperties = function(sourceJson, destJson) {
      var keys = Object.keys(sourceJson);
      for (var index = 0; index < keys.length; index++) {
        if (keys[index] !== "name") {
          destJson[keys[index]] = sourceJson[keys[index]];
        }
      }
    };
    Workbook2.prototype.getCellName = function(row, column) {
      return this.getColumnName(column) + row.toString();
    };
    Workbook2.prototype.getColumnName = function(col) {
      col--;
      var strColumnName = "";
      do {
        var iCurrentDigit = col % 26;
        col = col / 26 - 1;
        strColumnName = String.fromCharCode(65 + iCurrentDigit) + strColumnName;
      } while (col >= 0);
      return strColumnName;
    };
    Workbook2.prototype.parserPrintTitle = function(json, sheet) {
      var printTitleName = "";
      var titleRowName;
      if (json.fromRow !== null && json.fromRow !== void 0) {
        var fromRow = json.fromRow;
        var toRow = void 0;
        if (json.toRow !== null && json.toRow !== void 0) {
          toRow = json.toRow;
        } else {
          toRow = json.fromRow;
        }
        titleRowName = "$" + fromRow + ":$" + toRow;
      }
      var titleColName;
      if (json.fromColumn !== null && json.fromColumn !== void 0) {
        var fromColumn = json.fromColumn;
        var toColumn = void 0;
        if (json.toColumn !== null && json.toColumn !== void 0) {
          toColumn = json.toColumn;
        } else {
          toColumn = json.fromColumn;
        }
        titleColName = "$" + this.getColumnName(fromColumn) + ":$" + this.getColumnName(toColumn);
      }
      if (titleRowName !== void 0) {
        printTitleName += sheet.name + "!" + titleRowName;
      }
      if (titleColName !== void 0 && titleRowName !== void 0) {
        printTitleName += "," + (sheet.name + "!" + titleColName);
      } else if (titleColName !== void 0) {
        printTitleName += sheet.name + "!" + titleColName;
      }
      if (printTitleName !== "") {
        this.printTitles.set(sheet.index - 1, printTitleName);
      }
    };
    Workbook2.prototype.parserFreezePanes = function(json, sheet) {
      sheet.freezePanes = new FreezePane();
      if (json.row !== null && json.row !== void 0) {
        sheet.freezePanes.row = json.row;
      } else {
        sheet.freezePanes.row = 0;
      }
      if (json.column !== null && json.column !== void 0) {
        sheet.freezePanes.column = json.column;
      } else {
        sheet.freezePanes.column = 0;
      }
      sheet.freezePanes.leftCell = this.getCellName(sheet.freezePanes.row + 1, sheet.freezePanes.column + 1);
    };
    Workbook2.prototype.parserColumns = function(json, sheet) {
      var columnsLength = json.length;
      sheet.columns = [];
      for (var column = 0; column < columnsLength; column++) {
        var col = new Column();
        if (json[column].index !== null && json[column].index !== void 0) {
          col.index = json[column].index;
        } else {
          throw Error("Column index is missing.");
        }
        if (json[column].width !== null && json[column].width !== void 0) {
          col.width = json[column].width;
        }
        sheet.columns.push(col);
      }
    };
    Workbook2.prototype.parserRows = function(json, sheet) {
      var rowsLength = json.length;
      sheet.rows = new Rows();
      var rowId = 0;
      for (var r = 0; r < rowsLength; r++) {
        var row = this.parserRow(json[r], rowId);
        rowId = row.index;
        sheet.rows.add(row);
      }
      this.insertMergedCellsStyle(sheet);
    };
    Workbook2.prototype.insertMergedCellsStyle = function(sheet) {
      var _this = this;
      if (this.mergeCells.length > 0) {
        this.mergedCellsStyle.forEach(function(value, key) {
          var row = sheet.rows.filter(function(item) {
            return item.index === value.y;
          })[0];
          if (!isNullOrUndefined(row)) {
            var cell = row.cells.filter(function(item) {
              return item.index === value.x;
            })[0];
            if (!isNullOrUndefined(cell)) {
              cell.styleIndex = value.styleIndex;
            } else {
              var cells = row.cells.filter(function(item) {
                return item.index <= value.x;
              });
              var insertIndex = 0;
              if (cells.length > 0) {
                insertIndex = row.cells.indexOf(cells[cells.length - 1]) + 1;
              }
              row.cells.splice(insertIndex, 0, _this.createCell(value, key));
            }
          } else {
            var rows = sheet.rows.filter(function(item) {
              return item.index <= value.y;
            });
            var rowToInsert = new Row();
            rowToInsert.index = value.y;
            rowToInsert.cells = new Cells();
            rowToInsert.cells.add(_this.createCell(value, key));
            var insertIndex = 0;
            if (rows.length > 0) {
              insertIndex = sheet.rows.indexOf(rows[rows.length - 1]) + 1;
            }
            sheet.rows.splice(insertIndex, 0, rowToInsert);
          }
        });
      }
    };
    Workbook2.prototype.createCell = function(value, key) {
      var cellToInsert = new Cell();
      cellToInsert.refName = key;
      cellToInsert.index = value.x;
      cellToInsert.cellStyle = new CellStyle();
      cellToInsert.styleIndex = value.styleIndex;
      return cellToInsert;
    };
    Workbook2.prototype.parserRow = function(json, rowIndex) {
      var row = new Row();
      if (json.height !== null && json.height !== void 0) {
        row.height = json.height;
      }
      if (json.index !== null && json.index !== void 0) {
        row.index = json.index;
      } else {
        throw Error("Row index is missing.");
      }
      if (json.grouping !== null && json.grouping !== void 0) {
        this.parseGrouping(json.grouping, row);
      }
      this.parseCells(json.cells, row);
      return row;
    };
    Workbook2.prototype.parseGrouping = function(json, row) {
      row.grouping = new Grouping();
      if (json.outlineLevel !== void 0) {
        row.grouping.outlineLevel = json.outlineLevel;
      }
      if (json.isCollapsed !== void 0) {
        row.grouping.isCollapsed = json.isCollapsed;
      }
      if (json.isHidden !== void 0) {
        row.grouping.isHidden = json.isHidden;
      }
    };
    Workbook2.prototype.parseCells = function(json, row) {
      row.cells = new Cells();
      var cellsLength = json !== void 0 ? json.length : 0;
      var spanMin = 1;
      var spanMax = 1;
      var curCellIndex = 0;
      for (var cellId = 0; cellId < cellsLength; cellId++) {
        var jsonCell = json[cellId];
        var cell = new Cell();
        if (jsonCell.index !== null && jsonCell.index !== void 0) {
          cell.index = jsonCell.index;
        } else {
          throw Error("Cell index is missing.");
        }
        if (cell.index < spanMin) {
          spanMin = cell.index;
        } else if (cell.index > spanMax) {
          spanMax = cell.index;
        }
        cell.refName = this.getCellName(row.index, cell.index);
        if (jsonCell.rowSpan !== null && jsonCell.rowSpan !== void 0) {
          cell.rowSpan = jsonCell.rowSpan - 1;
        } else {
          cell.rowSpan = 0;
        }
        if (jsonCell.colSpan !== null && jsonCell.colSpan !== void 0) {
          cell.colSpan = jsonCell.colSpan - 1;
        } else {
          cell.colSpan = 0;
        }
        if (jsonCell.hyperlink !== null && jsonCell.hyperlink !== void 0) {
          var hyperLink = new HyperLink();
          if (jsonCell.hyperlink.target !== void 0) {
            hyperLink.target = jsonCell.hyperlink.target;
            if (jsonCell.hyperlink.displayText !== void 0) {
              cell.value = jsonCell.hyperlink.displayText;
            } else {
              cell.value = jsonCell.hyperlink.target;
            }
            cell.type = this.getCellValueType(cell.value);
            hyperLink.ref = cell.refName;
            hyperLink.rId = this.mHyperLinks.length + 1;
            this.mHyperLinks.push(hyperLink);
            cell.cellStyle = new CellStyle();
            this.parserCellStyle(jsonCell.style !== void 0 ? this.mergeOptions(jsonCell.style, this.hyperlinkStyle) : this.hyperlinkStyle, cell.cellStyle, "string");
            cell.styleIndex = cell.cellStyle.index;
          }
        }
        if (jsonCell.formula !== null && jsonCell.formula !== void 0) {
          cell.formula = jsonCell.formula;
          cell.type = "formula";
        }
        if (jsonCell.value !== null && jsonCell.value !== void 0) {
          if (cell.formula !== void 0) {
            cell.value = 0;
          } else {
            cell.value = jsonCell.value;
            cell.type = this.getCellValueType(cell.value);
          }
        }
        if (jsonCell.style !== null && jsonCell.style !== void 0 && cell.styleIndex === void 0) {
          cell.cellStyle = new CellStyle();
          if (cell.value instanceof Date) {
            this.parserCellStyle(jsonCell.style, cell.cellStyle, cell.type, 14);
          } else {
            this.parserCellStyle(jsonCell.style, cell.cellStyle, cell.type);
          }
          cell.styleIndex = cell.cellStyle.index;
        } else if (cell.value instanceof Date) {
          cell.cellStyle = new CellStyle();
          this.parserCellStyle({}, cell.cellStyle, cell.type, 14);
          cell.styleIndex = cell.cellStyle.index;
        }
        this.parseCellType(cell);
        this.mergeCells = this.processMergeCells(cell, row.index, this.mergeCells);
        row.cells.add(cell);
        curCellIndex = cell.index + 1;
      }
      row.spans = spanMin + ":" + spanMax;
    };
    Workbook2.prototype.GetColors = function() {
      var colors;
      colors = /* @__PURE__ */ new Map();
      colors.set("WHITE", "FFFFFFFF");
      colors.set("SILVER", "FFC0C0C0");
      colors.set("GRAY", "FF808080");
      colors.set("BLACK", "FF000000");
      colors.set("RED", "FFFF0000");
      colors.set("MAROON", "FF800000");
      colors.set("YELLOW", "FFFFFF00");
      colors.set("OLIVE", "FF808000");
      colors.set("LIME", "FF00FF00");
      colors.set("GREEN", "FF008000");
      colors.set("AQUA", "FF00FFFF");
      colors.set("TEAL", "FF008080");
      colors.set("BLUE", "FF0000FF");
      colors.set("NAVY", "FF000080");
      colors.set("FUCHSIA", "FFFF00FF");
      colors.set("PURPLE", "FF800080");
      return colors;
    };
    Workbook2.prototype.processColor = function(colorVal) {
      if (colorVal.indexOf("#") === 0) {
        return colorVal.replace("#", "FF");
      }
      colorVal = colorVal.toUpperCase();
      this.rgbColors = this.GetColors();
      if (this.rgbColors.has(colorVal)) {
        colorVal = this.rgbColors.get(colorVal);
      } else {
        colorVal = "FF000000";
      }
      return colorVal;
    };
    Workbook2.prototype.processCellValue = function(value, cell) {
      var cellValue = value;
      if (value.indexOf("<font") !== -1 || value.indexOf("<a") !== -1 || value.indexOf("<b>") !== -1 || value.indexOf("<i>") !== -1 || value.indexOf("<u>") !== -1) {
        var processedVal = "";
        var startindex = value.indexOf("<", 0);
        var endIndex = value.indexOf(">", startindex + 1);
        if (startindex >= 0 && endIndex >= 0) {
          if (startindex !== 0) {
            processedVal += '<r><t xml:space="preserve">' + this.processString(value.substring(0, startindex)) + "</t></r>";
          }
          while (startindex >= 0 && endIndex >= 0) {
            endIndex = value.indexOf(">", startindex + 1);
            if (endIndex >= 0) {
              var subString = value.substring(startindex + 1, endIndex);
              startindex = value.indexOf("<", endIndex + 1);
              if (startindex < 0) {
                startindex = cellValue.length;
              }
              var text = cellValue.substring(endIndex + 1, startindex);
              if (text.length !== 0) {
                var subSplit = subString.split(" ");
                if (subSplit.length > 0) {
                  processedVal += "<r><rPr>";
                }
                if (subSplit.length > 1) {
                  for (var _i = 0, subSplit_1 = subSplit; _i < subSplit_1.length; _i++) {
                    var element2 = subSplit_1[_i];
                    var start = element2.trim().substring(0, 5);
                    switch (start) {
                      case "size=":
                        processedVal += '<sz val="' + element2.substring(6, element2.length - 1) + '"/>';
                        break;
                      case "face=":
                        processedVal += '<rFont val="' + element2.substring(6, element2.length - 1) + '"/>';
                        break;
                      case "color":
                        processedVal += '<color rgb="' + this.processColor(element2.substring(7, element2.length - 1)) + '"/>';
                        break;
                      case "href=":
                        var hyperLink = new HyperLink();
                        hyperLink.target = element2.substring(6, element2.length - 1).trim();
                        hyperLink.ref = cell.refName;
                        hyperLink.rId = this.mHyperLinks.length + 1;
                        this.mHyperLinks.push(hyperLink);
                        processedVal += '<color rgb="FF0000FF"/><u/><b/>';
                        break;
                    }
                  }
                } else if (subSplit.length === 1) {
                  var style = subSplit[0].trim();
                  switch (style) {
                    case "b":
                      processedVal += "<b/>";
                      break;
                    case "i":
                      processedVal += "<i/>";
                      break;
                    case "u":
                      processedVal += "<u/>";
                      break;
                  }
                }
                processedVal += '</rPr><t xml:space="preserve">' + this.processString(text) + "</t></r>";
              }
            }
          }
          if (processedVal === "") {
            return cellValue;
          }
          return processedVal;
        } else {
          return cellValue;
        }
      } else {
        return cellValue;
      }
    };
    Workbook2.prototype.applyGlobalStyle = function(json, cellStyle) {
      var index = 0;
      if (this.cellStyles.has(json.name)) {
        cellStyle.index = this.mStyles.filter(function(a) {
          return a.name === json.name;
        })[0].index;
        cellStyle.name = json.name;
      }
    };
    Workbook2.prototype.parserCellStyle = function(json, cellStyle, cellType, defStyleIndex) {
      if (json.name !== null && json.name !== void 0) {
        if (cellStyle.isGlobalStyle) {
          cellStyle.name = json.name;
        } else {
          this.applyGlobalStyle(json, cellStyle);
          return;
        }
      }
      if (json.backColor !== null && json.backColor !== void 0) {
        cellStyle.backColor = json.backColor;
      }
      cellStyle.borders = new Borders();
      if (json.borders !== null && json.borders !== void 0) {
        this.parserBorder(json.borders, cellStyle.borders.all);
      }
      if (json.leftBorder !== null && json.leftBorder !== void 0) {
        this.parserBorder(json.leftBorder, cellStyle.borders.left);
      }
      if (json.rightBorder !== null && json.rightBorder !== void 0) {
        this.parserBorder(json.rightBorder, cellStyle.borders.right);
      }
      if (json.topBorder !== null && json.topBorder !== void 0) {
        this.parserBorder(json.topBorder, cellStyle.borders.top);
      }
      if (json.bottomBorder !== null && json.bottomBorder !== void 0) {
        this.parserBorder(json.bottomBorder, cellStyle.borders.bottom);
      }
      if (json.fontName !== null && json.fontName !== void 0) {
        cellStyle.fontName = json.fontName;
      }
      if (json.fontSize !== null && json.fontSize !== void 0) {
        cellStyle.fontSize = json.fontSize;
      }
      if (json.fontColor !== null && json.fontColor !== void 0) {
        cellStyle.fontColor = json.fontColor;
      }
      if (json.italic !== null && json.italic !== void 0) {
        cellStyle.italic = json.italic;
      }
      if (json.bold !== null && json.bold !== void 0) {
        cellStyle.bold = json.bold;
      }
      if (json.hAlign !== null && json.hAlign !== void 0) {
        cellStyle.hAlign = json.hAlign.toLowerCase();
      }
      if (json.indent !== null && json.indent !== void 0) {
        cellStyle.indent = json.indent;
        if (!(cellStyle.hAlign === "left" || cellStyle.hAlign === "right")) {
          cellStyle.hAlign = "left";
        }
      }
      if (json.rotation !== null && json.rotation !== void 0) {
        cellStyle.rotation = json.rotation;
      }
      if (json.vAlign !== null && json.vAlign !== void 0) {
        cellStyle.vAlign = json.vAlign.toLowerCase();
      }
      if (json.underline !== null && json.underline !== void 0) {
        cellStyle.underline = json.underline;
      }
      if (json.strikeThrough !== null && json.strikeThrough !== void 0) {
        cellStyle.strikeThrough = json.strikeThrough;
      }
      if (json.wrapText !== null && json.wrapText !== void 0) {
        cellStyle.wrapText = json.wrapText;
      }
      if (json.numberFormat !== null && json.numberFormat !== void 0) {
        if (json.type !== null && json.type !== void 0) {
          cellStyle.numberFormat = this.getNumberFormat(json.numberFormat, json.type);
        } else {
          cellStyle.numberFormat = this.getNumberFormat(json.numberFormat, cellType);
        }
      } else if (defStyleIndex !== void 0) {
        cellStyle.numFmtId = 14;
        cellStyle.numberFormat = "GENERAL";
      } else {
        cellStyle.numberFormat = "GENERAL";
      }
      cellStyle.index = this.processCellStyle(cellStyle);
    };
    Workbook2.prototype.switchNumberFormat = function(numberFormat, type) {
      var format = this.getNumberFormat(numberFormat, type);
      if (format !== numberFormat) {
        var numFmt = this.mNumFmt.get(numberFormat);
        if (numFmt !== void 0) {
          numFmt.formatCode = format;
          if (this.mNumFmt.has(format)) {
            for (var _i = 0, _a = this.mCellStyleXfs; _i < _a.length; _i++) {
              var cellStyleXfs = _a[_i];
              if (cellStyleXfs.numFmtId === numFmt.numFmtId) {
                cellStyleXfs.numFmtId = this.mNumFmt.get(format).numFmtId;
              }
            }
            for (var _b = 0, _c = this.mCellXfs; _b < _c.length; _b++) {
              var cellXfs = _c[_b];
              if (cellXfs.numFmtId === numFmt.numFmtId) {
                cellXfs.numFmtId = this.mNumFmt.get(format).numFmtId;
              }
            }
          }
        }
      }
    };
    Workbook2.prototype.changeNumberFormats = function(value) {
      if (typeof value == "string") {
        var regex2 = new RegExp(this.currency, "g");
        value = value.replace(regex2, "[$" + this.currency + "]");
      } else if (typeof value == "object") {
        for (var i = 0; i < value.length; i++) {
          value[i] = value[i].replace(this.currency, "[$" + this.currency + "]");
        }
      }
      return value;
    };
    Workbook2.prototype.getNumberFormat = function(numberFormat, type) {
      var returnFormat;
      switch (type) {
        case "number":
          try {
            returnFormat = this.intl.getNumberPattern({
              format: numberFormat,
              currency: this.currency,
              useGrouping: true
            }, true);
            if (this.currency.length > 1) {
              returnFormat = this.changeNumberFormats(returnFormat);
            }
          } catch (error) {
            returnFormat = numberFormat;
          }
          break;
        case "datetime":
          try {
            returnFormat = this.intl.getDatePattern({
              skeleton: numberFormat,
              type: "dateTime"
            }, true);
          } catch (error) {
            try {
              returnFormat = this.intl.getDatePattern({
                format: numberFormat,
                type: "dateTime"
              }, true);
            } catch (error2) {
              returnFormat = numberFormat;
            }
          }
          break;
        case "date":
          try {
            returnFormat = this.intl.getDatePattern({
              skeleton: numberFormat,
              type: "date"
            }, true);
          } catch (error) {
            try {
              returnFormat = this.intl.getDatePattern({
                format: numberFormat,
                type: "date"
              }, true);
            } catch (error2) {
              returnFormat = numberFormat;
            }
          }
          break;
        case "time":
          try {
            returnFormat = this.intl.getDatePattern({
              skeleton: numberFormat,
              type: "time"
            }, true);
          } catch (error) {
            try {
              returnFormat = this.intl.getDatePattern({
                format: numberFormat,
                type: "time"
              }, true);
            } catch (error2) {
              returnFormat = numberFormat;
            }
          }
          break;
        default:
          returnFormat = numberFormat;
          break;
      }
      return returnFormat;
    };
    Workbook2.prototype.parserBorder = function(json, border) {
      if (json.color !== null && json.color !== void 0) {
        border.color = json.color;
      } else {
        border.color = "#000000";
      }
      if (json.lineStyle !== null && json.lineStyle !== void 0) {
        border.lineStyle = json.lineStyle;
      } else {
        border.lineStyle = "thin";
      }
    };
    Workbook2.prototype.processCellStyle = function(style) {
      if (style.isGlobalStyle) {
        this.processNumFormatId(style);
        this.mStyles.push(style);
        return this.mStyles.length;
      } else {
        var compareResult = this.compareStyle(style);
        if (!compareResult.result) {
          this.processNumFormatId(style);
          this.mStyles.push(style);
          return this.mStyles.length;
        } else {
          return compareResult.index;
        }
      }
    };
    Workbook2.prototype.processNumFormatId = function(style) {
      if (style.numberFormat !== "GENERAL" && !this.mNumFmt.has(style.numberFormat)) {
        var id = this.mNumFmt.size + 164;
        this.mNumFmt.set(style.numberFormat, new NumFmt(id, style.numberFormat));
      }
    };
    Workbook2.prototype.isNewFont = function(toCompareStyle) {
      var result = false;
      var index = 0;
      for (var _i = 0, _a = this.mFonts; _i < _a.length; _i++) {
        var font = _a[_i];
        index++;
        var fontColor = void 0;
        if (toCompareStyle.fontColor !== void 0) {
          fontColor = "FF" + toCompareStyle.fontColor.replace("#", "");
        }
        result = font.color === fontColor && font.b === toCompareStyle.bold && font.i === toCompareStyle.italic && font.u === toCompareStyle.underline && font.strike === toCompareStyle.strikeThrough && font.name === toCompareStyle.fontName && font.sz === toCompareStyle.fontSize;
        if (result) {
          break;
        }
      }
      index = index - 1;
      return {
        index,
        result
      };
    };
    Workbook2.prototype.isNewBorder = function(toCompareStyle) {
      var bStyle = new CellStyle();
      if (this.isAllBorder(toCompareStyle.borders)) {
        return bStyle.borders.all.color === toCompareStyle.borders.all.color && bStyle.borders.all.lineStyle === toCompareStyle.borders.all.lineStyle;
      } else {
        return bStyle.borders.left.color === toCompareStyle.borders.left.color && bStyle.borders.left.lineStyle === toCompareStyle.borders.left.lineStyle && bStyle.borders.right.color === toCompareStyle.borders.right.color && bStyle.borders.right.lineStyle === toCompareStyle.borders.right.lineStyle && bStyle.borders.top.color === toCompareStyle.borders.top.color && bStyle.borders.top.lineStyle === toCompareStyle.borders.top.lineStyle && bStyle.borders.bottom.color === toCompareStyle.borders.bottom.color && bStyle.borders.bottom.lineStyle === toCompareStyle.borders.bottom.lineStyle;
      }
    };
    Workbook2.prototype.isAllBorder = function(toCompareBorder) {
      var allBorderStyle = new CellStyle();
      return allBorderStyle.borders.all.color !== toCompareBorder.all.color && allBorderStyle.borders.all.lineStyle !== toCompareBorder.all.lineStyle;
    };
    Workbook2.prototype.compareStyle = function(toCompareStyle) {
      var result = true;
      var index = 0;
      var globalStyleIndex = 0;
      for (var _i = 0, _a = this.mStyles; _i < _a.length; _i++) {
        var baseStyle = _a[_i];
        result = baseStyle.isGlobalStyle ? false : baseStyle.backColor === toCompareStyle.backColor && baseStyle.bold === toCompareStyle.bold && baseStyle.numFmtId === toCompareStyle.numFmtId && baseStyle.numberFormat === toCompareStyle.numberFormat && baseStyle.type === toCompareStyle.type && baseStyle.fontColor === toCompareStyle.fontColor && baseStyle.fontName === toCompareStyle.fontName && baseStyle.fontSize === toCompareStyle.fontSize && baseStyle.hAlign === toCompareStyle.hAlign && baseStyle.italic === toCompareStyle.italic && baseStyle.underline === toCompareStyle.underline && baseStyle.strikeThrough === toCompareStyle.strikeThrough && baseStyle.vAlign === toCompareStyle.vAlign && baseStyle.indent === toCompareStyle.indent && baseStyle.rotation === toCompareStyle.rotation && baseStyle.wrapText === toCompareStyle.wrapText && baseStyle.borders.all.color === toCompareStyle.borders.all.color && baseStyle.borders.all.lineStyle === toCompareStyle.borders.all.lineStyle && baseStyle.borders.left.color === toCompareStyle.borders.left.color && baseStyle.borders.left.lineStyle === toCompareStyle.borders.left.lineStyle && baseStyle.borders.right.color === toCompareStyle.borders.right.color && baseStyle.borders.right.lineStyle === toCompareStyle.borders.right.lineStyle && baseStyle.borders.top.color === toCompareStyle.borders.top.color && baseStyle.borders.top.lineStyle === toCompareStyle.borders.top.lineStyle && baseStyle.borders.bottom.color === toCompareStyle.borders.bottom.color && baseStyle.borders.bottom.lineStyle === toCompareStyle.borders.bottom.lineStyle;
        if (result) {
          index = baseStyle.index;
          break;
        }
      }
      return {
        index,
        result
      };
    };
    Workbook2.prototype.contains = function(array, item) {
      var index = array.indexOf(item);
      return index > -1 && index < array.length;
    };
    Workbook2.prototype.getCellValueType = function(value) {
      if (value instanceof Date) {
        return "datetime";
      } else if (typeof value === "boolean") {
        return "boolean";
      } else if (typeof value === "number") {
        return "number";
      } else {
        return "string";
      }
    };
    Workbook2.prototype.parseCellType = function(cell) {
      var type = cell.type;
      var saveType;
      var value = cell.value;
      switch (type) {
        case "datetime":
          value = this.toOADate(value);
          if (cell.cellStyle !== void 0 && cell.cellStyle.name !== void 0) {
            if (this.globalStyles.has(cell.cellStyle.name)) {
              var value_1 = this.globalStyles.get(cell.cellStyle.name);
              this.switchNumberFormat(value_1.format, value_1.type);
            }
          }
          saveType = "n";
          break;
        //TODO: Update the number format index and style
        case "boolean":
          value = value ? 1 : 0;
          saveType = "b";
          break;
        case "number":
          saveType = "n";
          if (cell.cellStyle !== void 0 && cell.cellStyle.name !== void 0) {
            if (this.globalStyles.has(cell.cellStyle.name)) {
              this.switchNumberFormat(this.globalStyles.get(cell.cellStyle.name).format, "number");
            }
          }
          break;
        case "string":
          this.sharedStringCount++;
          saveType = "s";
          var sstvalue = this.processCellValue(value, cell);
          if (!this.contains(this.sharedString, sstvalue)) {
            this.sharedString.push(sstvalue);
          }
          value = this.sharedString.indexOf(sstvalue);
          break;
        default:
          break;
      }
      cell.saveType = saveType;
      cell.value = value;
    };
    Workbook2.prototype.parserImages = function(json, sheet) {
      var imagesLength = json.length;
      sheet.images = [];
      var imageId = 0;
      for (var p = 0; p < imagesLength; p++) {
        var image = this.parserImage(json[p]);
        sheet.images.push(image);
      }
    };
    Workbook2.prototype.parseFilters = function(json, sheet) {
      sheet.autoFilters = new AutoFilters();
      if (json.row !== null && json.row !== void 0) sheet.autoFilters.row = json.row;
      else throw new Error("Argument Null Exception: row null or empty");
      if (json.lastRow !== null && json.lastRow !== void 0) sheet.autoFilters.lastRow = json.lastRow;
      else throw new Error("Argument Null Exception: lastRow cannot be null or empty");
      if (json.column !== null && json.column !== void 0) sheet.autoFilters.column = json.column;
      else throw new Error("Argument Null Exception: column cannot be null or empty");
      if (json.lastColumn !== null && json.row !== void 0) sheet.autoFilters.lastColumn = json.lastColumn;
      else throw new Error("Argument Null Exception: lastColumn cannot be null or empty");
    };
    Workbook2.prototype.parserImage = function(json) {
      var image = new Image2();
      if (json.image !== null && json.image !== void 0) {
        image.image = json.image;
      }
      if (json.row !== null && json.row !== void 0) {
        image.row = json.row;
      }
      if (json.column !== null && json.column !== void 0) {
        image.column = json.column;
      }
      if (json.lastRow !== null && json.lastRow !== void 0) {
        image.lastRow = json.lastRow;
      }
      if (json.lastColumn !== null && json.lastColumn !== void 0) {
        image.lastColumn = json.lastColumn;
      }
      if (json.width !== null && json.width !== void 0) {
        image.width = json.width;
      }
      if (json.height !== null && json.height !== void 0) {
        image.height = json.height;
      }
      if (json.horizontalFlip !== null && json.horizontalFlip !== void 0) {
        image.horizontalFlip = json.horizontalFlip;
      }
      if (json.verticalFlip !== null && json.verticalFlip !== void 0) {
        image.verticalFlip = json.verticalFlip;
      }
      if (json.rotation !== null && json.rotation !== void 0) {
        image.rotation = json.rotation;
      }
      return image;
    };
    Workbook2.prototype.saveAsBlob = function(blobSaveType, encodingType) {
      var _this = this;
      switch (blobSaveType) {
        case "text/csv":
          return new Promise(function(resolve, reject) {
            var obj = {};
            obj.blobData = _this.csvHelper.saveAsBlob(encodingType);
            resolve(obj);
          });
        default:
          return new Promise(function(resolve, reject) {
            _this.saveInternal();
            _this.mArchive.saveAsBlob().then(function(blob) {
              var obj = {};
              obj.blobData = new Blob([blob], {
                type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
              });
              resolve(obj);
            });
          });
      }
    };
    Workbook2.prototype.save = function(fileName, proxyUrl) {
      var _this = this;
      if (fileName === null || fileName === void 0 || fileName === "") {
        throw new Error("Argument Null Exception: fileName cannot be null or empty");
      }
      var xlsxMatch = fileName.match(".xlsx$");
      var csvMatch = fileName.match(".csv$");
      if (xlsxMatch !== null && xlsxMatch[0] === "." + this.mSaveType) {
        this.saveInternal();
        this.mArchive.save(fileName).then(function() {
          _this.mArchive.destroy();
        });
      } else if (csvMatch !== null && csvMatch[0] === "." + this.mSaveType) {
        this.csvHelper.save(fileName);
      } else {
        throw Error("Save type and file extension is different.");
      }
    };
    Workbook2.prototype.saveInternal = function() {
      this.saveWorkbook();
      this.saveWorksheets();
      this.saveSharedString();
      this.saveStyles();
      this.saveApp(this.builtInProperties);
      this.saveCore(this.builtInProperties);
      this.saveContentType();
      this.saveTopLevelRelation();
      this.saveWorkbookRelation();
    };
    Workbook2.prototype.saveWorkbook = function() {
      var workbookTemp = '<?xml version="1.0" encoding="utf-8"?><workbook xmlns:r = "http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns= "http://schemas.openxmlformats.org/spreadsheetml/2006/main"><workbookPr codeName="ThisWorkbook" defaultThemeVersion= "153222"/><bookViews><workbookView activeTab="0"/></bookViews>';
      var sheets = "<sheets>";
      var length = this.worksheets.length;
      for (var i = 0; i < length; i++) {
        var sheetName = this.worksheets[i].name;
        sheetName = sheetName.replace("&", "&amp;");
        sheetName = sheetName.replace("<", "&lt;");
        sheetName = sheetName.replace(">", "&gt;");
        sheetName = sheetName.replace('"', "&quot;");
        sheets += '<sheet name="' + sheetName + '" sheetId="' + (i + 1).toString() + '" r:id ="rId' + (i + 1).toString() + '" />';
      }
      sheets += "</sheets>";
      workbookTemp += sheets;
      if (this.printTitles.size > 0) {
        var printTitle_1 = "<definedNames>";
        this.printTitles.forEach(function(value, key) {
          printTitle_1 += '<definedName name="_xlnm.Print_Titles" localSheetId="' + key + '">' + value + "</definedName>";
        });
        printTitle_1 += "</definedNames>";
        workbookTemp += printTitle_1;
      }
      this.addToArchive(workbookTemp + "</workbook>", "xl/workbook.xml");
    };
    Workbook2.prototype.saveWorksheets = function() {
      var length = this.worksheets.length;
      for (var i = 0; i < length; i++) {
        this.saveWorksheet(this.worksheets[i], i);
      }
    };
    Workbook2.prototype.saveWorksheet = function(sheet, index) {
      var sheetBlob = new BlobHelper();
      var sheetString = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><worksheet xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns:x14="http://schemas.microsoft.com/office/spreadsheetml/2009/9/main" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main">';
      if (!sheet.isSummaryRowBelow) {
        sheetString += '<sheetPr><outlinePr summaryBelow="0" ></outlinePr></sheetPr>';
      } else {
        sheetString += "<sheetPr />";
      }
      sheetString += this.saveSheetView(sheet);
      if (sheet.columns !== void 0) {
        var colString = "<cols>";
        for (var _i = 0, _a = sheet.columns; _i < _a.length; _i++) {
          var column = _a[_i];
          if (column.width !== void 0) {
            colString += '<col min="' + column.index + '" max="' + column.index + '" width="' + this.pixelsToColumnWidth(column.width) + '" customWidth="1" />';
          } else {
            colString += '<col min="' + column.index + '" max="' + column.index + '" width="8.43" customWidth="1" />';
          }
        }
        sheetString += colString + "</cols>";
      }
      sheetString += "<sheetData>";
      sheetBlob.append(sheetString);
      sheetString = "";
      if (sheet.rows !== void 0) {
        for (var _b = 0, _c = sheet.rows; _b < _c.length; _b++) {
          var row = _c[_b];
          var rowString = '<row r="' + row.index + '" ';
          if (!isNullOrUndefined(row.spans)) {
            rowString += 'spans="' + row.spans + '" ';
          }
          if (row.height !== void 0) {
            rowString += 'ht="' + this.pixelsToRowHeight(row.height) + '" customHeight="1" ';
          }
          if (row.grouping !== void 0) {
            if (row.grouping.isHidden) {
              rowString += 'hidden="1" ';
            }
            if (row.grouping.outlineLevel !== void 0) {
              rowString += 'outlineLevel="' + row.grouping.outlineLevel + '" ';
            }
            if (row.grouping.isCollapsed) {
              rowString += 'collapsed="1" ';
            }
          }
          rowString += ">";
          for (var _d = 0, _e = row.cells; _d < _e.length; _d++) {
            var cell = _e[_d];
            if (cell !== void 0 && (cell.value !== void 0 || cell.cellStyle !== void 0)) {
              rowString += '<c r="' + cell.refName + '" ';
              if (cell.saveType !== void 0) {
                rowString += 't="' + cell.saveType + '" ';
              }
              if (cell.styleIndex !== void 0) {
                rowString += 's="' + cell.styleIndex + '" ';
              }
              rowString += " >";
              if (cell.formula !== void 0) {
                rowString += "<f>" + cell.formula + "</f>";
              }
              if (cell.value !== void 0) {
                rowString += "<v>" + cell.value + "</v></c>";
              } else {
                rowString += "</c>";
              }
            }
          }
          rowString += "</row>";
          sheetBlob.append(rowString);
        }
      }
      sheetString += "</sheetData>";
      if (sheet.autoFilters !== null && sheet.autoFilters !== void 0) sheetString += '<autoFilter ref="' + this.getCellName(sheet.autoFilters.row, sheet.autoFilters.column) + ":" + this.getCellName(sheet.autoFilters.lastRow, sheet.autoFilters.lastColumn) + '"/>';
      if (sheet.mergeCells.length > 0) {
        sheetString += '<mergeCells count="' + sheet.mergeCells.length + '">';
        for (var _f = 0, _g = sheet.mergeCells; _f < _g.length; _f++) {
          var mCell = _g[_f];
          sheetString += '<mergeCell ref="' + mCell.ref + '" />';
        }
        sheetString += "</mergeCells>";
      }
      if (sheet.hyperLinks.length > 0) {
        sheetString += "<hyperlinks>";
        for (var _h = 0, _j = sheet.hyperLinks; _h < _j.length; _h++) {
          var hLink = _j[_h];
          sheetString += '<hyperlink ref="' + hLink.ref + '" r:id="rId' + hLink.rId + '" />';
        }
        sheetString += "</hyperlinks>";
      }
      sheetString += '<pageMargins left="0.75" right="0.75" top="1" bottom="1" header="0.5" footer="0.5" /><headerFooter scaleWithDoc="1" alignWithMargins="0" differentFirst="0" differentOddEven="0" />';
      if (sheet.images != void 0 && sheet.images.length > 0) {
        this.drawingCount++;
        this.saveDrawings(sheet, sheet.index);
        sheetString += '<drawing r:id="rId' + (sheet.hyperLinks.length + 1) + '"/>';
      }
      this.addToArchive(this.saveSheetRelations(sheet), "xl/worksheets/_rels/sheet" + sheet.index + ".xml.rels");
      sheetBlob.append(sheetString + "</worksheet>");
      this.addToArchive(sheetBlob.getBlob(), "xl/worksheets/sheet" + (index + 1) + ".xml");
    };
    Workbook2.prototype.saveDrawings = function(sheet, index) {
      var drawings = new BlobHelper();
      var sheetDrawingString = '<xdr:wsDr xmlns:xdr="http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing" xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main">';
      if (sheet.images !== void 0) {
        var imgId = 0;
        for (var _i = 0, _a = sheet.images; _i < _a.length; _i++) {
          var pic = _a[_i];
          if (pic.height !== void 0 && pic.width !== void 0) {
            this.updatelastRowOffset(sheet, pic);
            this.updatelastColumnOffSet(sheet, pic);
            pic.lastRow -= 1;
            pic.lastColumn -= 1;
          } else if (pic.lastRow !== void 0 && pic.lastColumn !== void 0) {
            pic.lastRowOffset = 0;
            pic.lastColOffset = 0;
          }
          imgId++;
          sheetDrawingString += '<xdr:twoCellAnchor editAs="oneCell">';
          sheetDrawingString += "<xdr:from><xdr:col>";
          sheetDrawingString += pic.column - 1;
          sheetDrawingString += "</xdr:col><xdr:colOff>";
          sheetDrawingString += 0;
          sheetDrawingString += "</xdr:colOff><xdr:row>";
          sheetDrawingString += pic.row - 1;
          sheetDrawingString += "</xdr:row><xdr:rowOff>";
          sheetDrawingString += 0;
          sheetDrawingString += "</xdr:rowOff></xdr:from>";
          sheetDrawingString += "<xdr:to><xdr:col>";
          sheetDrawingString += pic.lastColumn;
          sheetDrawingString += "</xdr:col><xdr:colOff>";
          sheetDrawingString += pic.lastColOffset;
          sheetDrawingString += "</xdr:colOff><xdr:row>";
          sheetDrawingString += pic.lastRow;
          sheetDrawingString += "</xdr:row><xdr:rowOff>";
          sheetDrawingString += pic.lastRowOffset;
          sheetDrawingString += "</xdr:rowOff></xdr:to>";
          sheetDrawingString += "<xdr:pic>";
          sheetDrawingString += "<xdr:nvPicPr>";
          sheetDrawingString += '<xdr:cNvPr id="' + imgId + '" name="Picture ' + imgId + '"> </xdr:cNvPr>';
          sheetDrawingString += '<xdr:cNvPicPr><a:picLocks noChangeAspect="1"/></xdr:cNvPicPr> </xdr:nvPicPr>';
          sheetDrawingString += "<xdr:blipFill>";
          sheetDrawingString += '<a:blip xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" r:embed="rId' + imgId + '" cstate="print">';
          sheetDrawingString += "</a:blip><a:stretch><a:fillRect /></a:stretch></xdr:blipFill>";
          sheetDrawingString += "<xdr:spPr>";
          sheetDrawingString += "<a:xfrm";
          if (pic.rotation != void 0 && pic.rotation <= 3600 && pic.rotation >= -3600) {
            sheetDrawingString += ' rot="' + pic.rotation * 6e4 + '"';
          }
          if (pic.verticalFlip != void 0 && pic.verticalFlip != false) {
            sheetDrawingString += ' flipV="1"';
          }
          if (pic.horizontalFlip != void 0 && pic.horizontalFlip != false) {
            sheetDrawingString += ' flipH="1"';
          }
          sheetDrawingString += "/>";
          sheetDrawingString += '<a:prstGeom prst="rect"><a:avLst /></a:prstGeom></xdr:spPr>';
          sheetDrawingString += "</xdr:pic><xdr:clientData /></xdr:twoCellAnchor>";
          var imageFile = new BlobHelper();
          var imageData = this.convertBase64toImage(pic.image);
          this.imageCount += 1;
          this.addToArchive(imageData, "xl/media/image" + this.imageCount + ".png");
        }
        drawings.append(sheetDrawingString);
        drawings.append("</xdr:wsDr>");
        this.saveDrawingRelations(sheet);
        this.addToArchive(drawings.getBlob(), "xl/drawings/drawing" + this.drawingCount + ".xml");
      }
    };
    Workbook2.prototype.updatelastRowOffset = function(sheet, picture) {
      var iCurHeight = picture.height;
      var iCurRow = picture.row;
      var iCurOffset = 0;
      while (iCurHeight >= 0) {
        var iRowHeight = 0;
        if (sheet.rows !== void 0 && sheet.rows[iCurRow - 1] !== void 0) iRowHeight = this.convertToPixels(sheet.rows[iCurRow - 1].height === void 0 ? 15 : sheet.rows[iCurRow - 1].height);
        else iRowHeight = this.convertToPixels(15);
        var iSpaceInCell = iRowHeight - iCurOffset * iRowHeight / 256;
        if (iSpaceInCell > iCurHeight) {
          picture.lastRow = iCurRow;
          picture.lastRowOffset = iCurOffset + iCurHeight * 256 / iRowHeight;
          var rowHiddenHeight = 0;
          if (sheet.rows !== void 0 && sheet.rows[iCurRow - 1] !== void 0) rowHiddenHeight = this.convertToPixels(sheet.rows[iCurRow - 1].height === void 0 ? 15 : sheet.rows[iCurRow - 1].height);
          else rowHiddenHeight = this.convertToPixels(15);
          picture.lastRowOffset = rowHiddenHeight * picture.lastRowOffset / 256;
          picture.lastRowOffset = Math.round(picture.lastRowOffset / this.unitsProportions[7]);
          break;
        } else {
          iCurHeight -= iSpaceInCell;
          iCurRow++;
          iCurOffset = 0;
        }
      }
    };
    Workbook2.prototype.updatelastColumnOffSet = function(sheet, picture) {
      var iCurWidth = picture.width;
      var iCurCol = picture.column;
      var iCurOffset = 0;
      while (iCurWidth >= 0) {
        var iColWidth = 0;
        if (sheet.columns !== void 0 && sheet.columns[iCurCol - 1] !== void 0) iColWidth = this.ColumnWidthToPixels(sheet.columns[iCurCol - 1].width === void 0 ? 8.43 : sheet.columns[iCurCol - 1].width);
        else iColWidth = this.ColumnWidthToPixels(8.43);
        var iSpaceInCell = iColWidth - iCurOffset * iColWidth / 1024;
        if (iSpaceInCell > iCurWidth) {
          picture.lastColumn = iCurCol;
          picture.lastColOffset = iCurOffset + iCurWidth * 1024 / iColWidth;
          var colHiddenWidth = 0;
          if (sheet.columns !== void 0 && sheet.columns[iCurCol - 1] !== void 0) colHiddenWidth = this.ColumnWidthToPixels(sheet.columns[iCurCol - 1].width === void 0 ? 8.43 : sheet.columns[iCurCol - 1].width);
          else colHiddenWidth = this.ColumnWidthToPixels(8.43);
          picture.lastColOffset = colHiddenWidth * picture.lastColOffset / 1024;
          picture.lastColOffset = Math.round(picture.lastColOffset / this.unitsProportions[7]);
          break;
        } else {
          iCurWidth -= iSpaceInCell;
          iCurCol++;
          iCurOffset = 0;
        }
      }
    };
    Workbook2.prototype.convertToPixels = function(value) {
      return value * this.unitsProportions[6];
    };
    Workbook2.prototype.convertBase64toImage = function(img) {
      var byteStr = window.atob(img);
      var buffer = new ArrayBuffer(byteStr.length);
      var data = new Uint8Array(buffer);
      for (var i = 0; i < byteStr.length; i++) {
        data[i] = byteStr.charCodeAt(i);
      }
      var blob = new Blob([data], {
        type: "image/png"
      });
      return blob;
    };
    Workbook2.prototype.saveDrawingRelations = function(sheet) {
      var drawingRelation = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">';
      var length = sheet.images.length;
      var id = this.imageCount - sheet.images.length;
      for (var i = 1; i <= length; i++) {
        id++;
        drawingRelation += '<Relationship Id="rId' + i + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/image" Target="../media/image' + id + '.png" />';
      }
      this.addToArchive(drawingRelation + "</Relationships>", "xl/drawings/_rels/drawing" + this.drawingCount + ".xml.rels");
    };
    Workbook2.prototype.pixelsToColumnWidth = function(pixels) {
      var dDigitWidth = 7;
      var val = pixels > dDigitWidth + 5 ? this.trunc((pixels - 5) / dDigitWidth * 100 + 0.5) / 100 : pixels / (dDigitWidth + 5);
      return val > 1 ? (val * dDigitWidth + 5) / dDigitWidth * 256 / 256 : val * (dDigitWidth + 5) / dDigitWidth * 256 / 256;
    };
    Workbook2.prototype.ColumnWidthToPixels = function(val) {
      var dDigitWidth = 7;
      var fileWidth = val > 1 ? (val * dDigitWidth + 5) / dDigitWidth * 256 / 256 : val * (dDigitWidth + 5) / dDigitWidth * 256 / 256;
      return this.trunc((256 * fileWidth + this.trunc(128 / dDigitWidth)) / 256 * dDigitWidth);
    };
    Workbook2.prototype.trunc = function(x) {
      var n = x - x % 1;
      return n === 0 && (x < 0 || x === 0 && 1 / x !== 1 / 0) ? -0 : n;
    };
    Workbook2.prototype.pixelsToRowHeight = function(pixels) {
      return pixels * this.unitsProportions[5] / this.unitsProportions[6];
    };
    Workbook2.prototype.saveSheetRelations = function(sheet) {
      var relStr = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">';
      for (var _i = 0, _a = sheet.hyperLinks; _i < _a.length; _i++) {
        var hLink = _a[_i];
        relStr += '<Relationship Id="rId' + hLink.rId + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink" Target="' + this.processString(hLink.target) + '" TargetMode="External" />';
      }
      if (sheet.images != void 0 && sheet.images.length > 0) {
        relStr += '<Relationship Id="rId' + (sheet.hyperLinks.length + 1) + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing" Target="../drawings/drawing' + this.drawingCount + '.xml" />';
      }
      relStr += "</Relationships>";
      return relStr;
    };
    Workbook2.prototype.saveSheetView = function(sheet) {
      var paneString = '<sheetViews><sheetView workbookViewId="0" ';
      if (sheet.enableRtl === true) {
        paneString += 'rightToLeft="1"';
      }
      if (sheet.showGridLines === false) {
        paneString += 'showGridLines="0" >';
      } else {
        paneString += ">";
      }
      if (sheet.freezePanes !== void 0) {
        paneString += '<pane state="frozen" topLeftCell="' + sheet.freezePanes.leftCell + '" ';
        if (sheet.freezePanes.row !== 0) {
          paneString += 'ySplit="' + sheet.freezePanes.row + '" ';
        }
        if (sheet.freezePanes.column !== 0) {
          paneString += 'xSplit="' + sheet.freezePanes.column + '" ';
        }
        paneString += "/>";
      }
      paneString += "</sheetView></sheetViews > ";
      return paneString;
    };
    Workbook2.prototype.saveSharedString = function() {
      var length = this.sharedString.length;
      if (length > 0) {
        var sstStart = '<?xml version="1.0" encoding="utf-8"?><sst uniqueCount="' + length + '" count="' + this.sharedStringCount + '" xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main">';
        var si = "";
        for (var i = 0; i < length; i++) {
          if (this.sharedString[i].indexOf("<r>") !== 0) {
            si += "<si><t>";
            si += this.processString(this.sharedString[i]);
            si += "</t></si>";
          } else {
            si += "<si>";
            si += this.sharedString[i];
            si += "</si>";
          }
        }
        si += "</sst>";
        this.addToArchive(sstStart + si, "xl/sharedStrings.xml");
      }
    };
    Workbook2.prototype.processString = function(value) {
      if (typeof value == "string") {
        if (value.indexOf("&") !== -1) {
          value = value.replace(/&/g, "&amp;");
        }
        if (value.indexOf("<") !== -1) {
          value = value.replace(/</g, "&lt;");
        }
        if (value.indexOf(">") !== -1) {
          value = value.replace(/>/g, "&gt;");
        }
        if (value.indexOf("\v") !== -1) {
          value = value.replace(/\v/g, "_x000B_");
        }
      } else if (typeof value == "object") {
        for (var i = 0; i < value.length; i++) {
          if (value[i].indexOf("&") !== -1) {
            value[i] = value[i].replace(/&/g, "&amp;");
          }
          if (value[i].indexOf("<") !== -1) {
            value[i] = value[i].replace(/</g, "&lt;");
          }
          if (value[i].indexOf(">") !== -1) {
            value[i] = value[i].replace(/>/g, "&gt;");
          }
          if (value[i].indexOf("\v") !== -1) {
            value[i] = value[i].replace(/\v/g, "_x000B_");
          }
        }
      }
      return value;
    };
    Workbook2.prototype.saveStyles = function() {
      this.updateCellXfsStyleXfs();
      var styleTemp = '<?xml version="1.0" encoding="utf-8"?><styleSheet xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="x14ac" xmlns:x14ac="http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac" xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main">';
      styleTemp += this.saveNumberFormats();
      styleTemp += this.saveFonts();
      styleTemp += this.saveFills();
      styleTemp += this.saveBorders();
      styleTemp += this.saveCellStyleXfs();
      styleTemp += this.saveCellXfs();
      styleTemp += this.saveCellStyles();
      this.addToArchive(styleTemp + "</styleSheet>", "xl/styles.xml");
    };
    Workbook2.prototype.updateCellXfsStyleXfs = function() {
      for (var _i = 0, _a = this.mStyles; _i < _a.length; _i++) {
        var style = _a[_i];
        var cellXfs = void 0;
        if (style.isGlobalStyle) {
          cellXfs = new CellStyleXfs();
          cellXfs.xfId = style.index - 1;
        } else {
          cellXfs = new CellXfs();
          cellXfs.xfId = 0;
        }
        var compareFontResult = this.isNewFont(style);
        if (!compareFontResult.result) {
          var font = new Font();
          font.b = style.bold;
          font.i = style.italic;
          font.name = style.fontName;
          font.sz = style.fontSize;
          font.u = style.underline;
          font.strike = style.strikeThrough;
          font.color = "FF" + style.fontColor.replace("#", "");
          this.mFonts.push(font);
          cellXfs.fontId = this.mFonts.length - 1;
        } else {
          cellXfs.fontId = compareFontResult.index;
        }
        if (style.backColor !== "none") {
          var backColor = "FF" + style.backColor.replace("#", "");
          if (this.mFills.has(backColor)) {
            var fillId = this.mFills.get(backColor);
            cellXfs.fillId = fillId;
          } else {
            var fillId = this.mFills.size + 2;
            this.mFills.set(backColor, fillId);
            cellXfs.fillId = fillId;
          }
        } else {
          cellXfs.fillId = 0;
        }
        if (!this.isNewBorder(style)) {
          this.mBorders.push(style.borders);
          cellXfs.borderId = this.mBorders.length;
        } else {
          cellXfs.borderId = 0;
        }
        if (style.numberFormat !== "GENERAL") {
          if (this.mNumFmt.has(style.numberFormat)) {
            var numFmt = this.mNumFmt.get(style.numberFormat);
            cellXfs.numFmtId = numFmt.numFmtId;
          } else {
            var id = this.mNumFmt.size + 164;
            this.mNumFmt.set(style.numberFormat, new NumFmt(id, style.numberFormat));
            cellXfs.numFmtId = id;
          }
        } else {
          if (style.numberFormat === "GENERAL" && style.numFmtId === 14) {
            cellXfs.numFmtId = 14;
          } else {
            cellXfs.numFmtId = 0;
          }
        }
        if (!style.isGlobalStyle) {
          cellXfs.applyAlignment = 1;
        }
        cellXfs.alignment = new Alignment();
        cellXfs.alignment.indent = style.indent;
        cellXfs.alignment.horizontal = style.hAlign;
        cellXfs.alignment.vertical = style.vAlign;
        cellXfs.alignment.wrapText = style.wrapText ? 1 : 0;
        cellXfs.alignment.rotation = style.rotation;
        if (style.isGlobalStyle) {
          this.mCellStyleXfs.push(cellXfs);
          this.mCellXfs.push(cellXfs);
        } else {
          this.mCellXfs.push(cellXfs);
        }
      }
    };
    Workbook2.prototype.saveNumberFormats = function() {
      if (this.mNumFmt.size >= 1) {
        var numFmtStyle_1 = '<numFmts count="' + this.mNumFmt.size + '">';
        this.mNumFmt.forEach(function(value, key) {
          numFmtStyle_1 += '<numFmt numFmtId="' + value.numFmtId + '" formatCode="' + value.formatCode.replace(/"/g, "&quot;") + '" />';
        });
        return numFmtStyle_1 += "</numFmts>";
      } else {
        return "";
      }
    };
    Workbook2.prototype.saveFonts = function() {
      var fontStyle = '<fonts count="' + this.mFonts.length + '">';
      if (this.mFonts.length >= 1) {
        for (var _i = 0, _a = this.mFonts; _i < _a.length; _i++) {
          var font = _a[_i];
          fontStyle += "<font>";
          if (font.b) {
            fontStyle += "<b />";
          }
          if (font.i) {
            fontStyle += "<i />";
          }
          if (font.u) {
            fontStyle += "<u />";
          }
          if (font.strike) {
            fontStyle += "<strike />";
          }
          fontStyle += '<sz val="' + font.sz + '" />';
          fontStyle += '<color rgb="' + font.color + '" />';
          fontStyle += '<name val="' + font.name + '" /></font>';
        }
      }
      return fontStyle + "</fonts>";
    };
    Workbook2.prototype.saveFills = function() {
      var fillsStyle = '<fills count="' + (this.mFills.size + 2) + '"><fill><patternFill patternType="none"></patternFill></fill><fill><patternFill patternType="gray125"></patternFill></fill>';
      if (this.mFills.size >= 1) {
        this.mFills.forEach(function(value, key) {
          fillsStyle += '<fill><patternFill patternType="solid"><fgColor rgb="' + key + '" /><bgColor rgb="FFFFFFFF" /></patternFill></fill>';
        });
      }
      return fillsStyle + "</fills>";
    };
    Workbook2.prototype.saveBorders = function() {
      var bordersStyle = '<borders count="' + (this.mBorders.length + 1) + '"><border><left /><right /><top /><bottom /><diagonal /></border>';
      if (this.mBorders.length >= 1) {
        for (var _i = 0, _a = this.mBorders; _i < _a.length; _i++) {
          var borders = _a[_i];
          if (this.isAllBorder(borders)) {
            var color = borders.all.color.replace("#", "");
            var lineStyle = borders.all.lineStyle;
            bordersStyle += '<border><left style="' + lineStyle + '"><color rgb="FF' + color + '" /></left><right style="' + lineStyle + '"><color rgb="FF' + color + '" /></right><top style="' + lineStyle + '"><color rgb="FF' + color + '" /></top><bottom style="' + lineStyle + '"><color rgb="FF' + color + '" /></bottom></border>';
          } else {
            bordersStyle += '<border><left style="' + borders.left.lineStyle + '"><color rgb="FF' + borders.left.color.replace("#", "") + '" /></left><right style="' + borders.right.lineStyle + '"><color rgb="FF' + borders.right.color.replace("#", "") + '" /></right><top style="' + borders.top.lineStyle + '"><color rgb="FF' + borders.top.color.replace("#", "") + '" /></top><bottom style="' + borders.bottom.lineStyle + '"><color rgb="FF' + borders.bottom.color.replace("#", "") + '" /></bottom></border>';
          }
        }
      }
      return bordersStyle + "</borders>";
    };
    Workbook2.prototype.saveCellStyles = function() {
      var _this = this;
      var cellStyleString = '<cellStyles  count="' + this.cellStyles.size + '">';
      this.cellStyles.forEach(function(value, key) {
        cellStyleString += '<cellStyle name="' + key + '" xfId="' + _this.cellStyles.get(key).xfId + '"';
        if (key === "Normal") {
          cellStyleString += ' builtinId="0"';
        }
        cellStyleString += " />";
      });
      return cellStyleString += "</cellStyles>";
    };
    Workbook2.prototype.saveCellStyleXfs = function() {
      var cellXfsStyle = '<cellStyleXfs count="' + (this.mCellStyleXfs.length + 1) + '"><xf numFmtId="0" fontId="0" fillId="0" borderId="0" />';
      if (this.mCellStyleXfs.length >= 1) {
        for (var _i = 0, _a = this.mCellStyleXfs; _i < _a.length; _i++) {
          var cellStyleXf = _a[_i];
          cellXfsStyle += '<xf numFmtId="' + cellStyleXf.numFmtId + '" fontId="' + cellStyleXf.fontId + '" fillId="' + cellStyleXf.fillId + '" borderId="' + cellStyleXf.borderId + '" ';
          if (cellStyleXf.alignment !== void 0) {
            cellXfsStyle += ">" + this.saveAlignment(cellStyleXf) + "</xf>";
          } else {
            cellXfsStyle += " />";
          }
        }
      }
      return cellXfsStyle + "</cellStyleXfs>";
    };
    Workbook2.prototype.saveCellXfs = function() {
      var cellXfsStyle = '<cellXfs count="' + (this.mCellXfs.length + 1) + '"><xf numFmtId="0" fontId="0" fillId="0" borderId="0" xfId="0" />';
      if (this.mCellXfs.length >= 1) {
        for (var _i = 0, _a = this.mCellXfs; _i < _a.length; _i++) {
          var cellXf = _a[_i];
          cellXfsStyle += '<xf numFmtId="' + cellXf.numFmtId + '" fontId="' + cellXf.fontId + '" fillId="' + cellXf.fillId + '" borderId="' + cellXf.borderId + '" xfId="' + cellXf.xfId + '" ';
          if (cellXf.applyAlignment === 1) {
            cellXfsStyle += 'applyAlignment="1"';
          }
          cellXfsStyle += ">" + this.saveAlignment(cellXf) + "</xf>";
        }
      }
      return cellXfsStyle + "</cellXfs>";
    };
    Workbook2.prototype.saveAlignment = function(cellXf) {
      var alignString = "<alignment ";
      if (cellXf.alignment.horizontal !== void 0) {
        alignString += 'horizontal="' + cellXf.alignment.horizontal + '" ';
      }
      if (cellXf.alignment.indent !== void 0 && cellXf.alignment.indent !== 0) {
        alignString += 'indent="' + cellXf.alignment.indent + '" ';
      } else if (cellXf.alignment.rotation !== void 0 && cellXf.alignment.rotation !== 0) {
        alignString += 'textRotation="' + cellXf.alignment.rotation + '" ';
      }
      if (cellXf.alignment.vertical !== void 0) {
        alignString += 'vertical="' + cellXf.alignment.vertical + '" ';
      }
      alignString += 'wrapText="' + cellXf.alignment.wrapText + '" />';
      return alignString;
    };
    Workbook2.prototype.saveApp = function(builtInProperties) {
      var appString = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><Properties xmlns="http://schemas.openxmlformats.org/officeDocument/2006/extended-properties"><Application>Essential XlsIO</Application>';
      if (builtInProperties !== void 0) {
        if (builtInProperties.manager !== void 0) {
          appString += "<Manager>" + builtInProperties.manager + "</Manager>";
        }
        if (builtInProperties.company !== void 0) {
          appString += "<Company>" + builtInProperties.company + "</Company>";
        }
      }
      this.addToArchive(appString + "</Properties>", "docProps/app.xml");
    };
    Workbook2.prototype.saveCore = function(builtInProperties) {
      var createdDate = /* @__PURE__ */ new Date();
      var coreString = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><cp:coreProperties xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:dcmitype="http://purl.org/dc/dcmitype/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cp="http://schemas.openxmlformats.org/package/2006/metadata/core-properties">';
      if (this.builtInProperties !== void 0) {
        if (builtInProperties.author !== void 0) {
          coreString += "<dc:creator>" + builtInProperties.author + "</dc:creator>";
        }
        if (builtInProperties.subject !== void 0) {
          coreString += "<dc:subject>" + builtInProperties.subject + "</dc:subject>";
        }
        if (builtInProperties.category !== void 0) {
          coreString += "<cp:category>" + builtInProperties.category + "</cp:category>";
        }
        if (builtInProperties.comments !== void 0) {
          coreString += "<dc:description>" + builtInProperties.comments + "</dc:description>";
        }
        if (builtInProperties.title !== void 0) {
          coreString += "<dc:title>" + builtInProperties.title + "</dc:title>";
        }
        if (builtInProperties.tags !== void 0) {
          coreString += "<cp:keywords>" + builtInProperties.tags + "</cp:keywords>";
        }
        if (builtInProperties.status !== void 0) {
          coreString += "<cp:contentStatus>" + builtInProperties.status + "</cp:contentStatus>";
        }
        if (builtInProperties.createdDate !== void 0) {
          coreString += '<dcterms:created xsi:type="dcterms:W3CDTF">' + builtInProperties.createdDate.toISOString() + "</dcterms:created>";
        } else {
          coreString += '<dcterms:created xsi:type="dcterms:W3CDTF">' + createdDate.toISOString() + "</dcterms:created>";
        }
        if (builtInProperties.modifiedDate !== void 0) {
          coreString += '<dcterms:modified xsi:type="dcterms:W3CDTF">' + builtInProperties.modifiedDate.toISOString() + "</dcterms:modified>";
        } else {
          coreString += '<dcterms:modified xsi:type="dcterms:W3CDTF">' + createdDate.toISOString() + "</dcterms:modified>";
        }
      } else {
        coreString += '<dcterms:created xsi:type="dcterms:W3CDTF">' + createdDate.toISOString() + "</dcterms:created>";
        coreString += '<dcterms:modified xsi:type="dcterms:W3CDTF">' + createdDate.toISOString() + "</dcterms:modified>";
      }
      coreString += "</cp:coreProperties>";
      this.addToArchive(coreString, "docProps/core.xml");
    };
    Workbook2.prototype.saveTopLevelRelation = function() {
      var topRelation = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships"><Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Target="xl/workbook.xml" /><Relationship Id="rId2" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties" Target="docProps/app.xml" /><Relationship Id="rId3" Type="http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties" Target="docProps/core.xml" /></Relationships>';
      this.addToArchive(topRelation, "_rels/.rels");
    };
    Workbook2.prototype.saveWorkbookRelation = function() {
      var wbRelation = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">';
      var length = this.worksheets.length;
      var count = 0;
      for (var i = 0; i < length; i++, count++) {
        wbRelation += '<Relationship Id="rId' + (i + 1).toString() + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet" Target="worksheets/sheet' + (i + 1).toString() + '.xml" />';
      }
      wbRelation += '<Relationship Id="rId' + (++count).toString() + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles" Target="styles.xml" />';
      if (this.sharedStringCount > 0) {
        wbRelation += '<Relationship Id="rId' + (++count).toString() + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings" Target="sharedStrings.xml" />';
      }
      this.addToArchive(wbRelation + "</Relationships>", "xl/_rels/workbook.xml.rels");
    };
    Workbook2.prototype.saveContentType = function() {
      var contentTypeString = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types"><Default Extension="xml" ContentType="application/xml" /><Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml" /><Override PartName="/xl/styles.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml" /><Override PartName="/xl/workbook.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml" /><Override PartName="/docProps/app.xml" ContentType="application/vnd.openxmlformats-officedocument.extended-properties+xml" /><Override PartName="/docProps/core.xml" ContentType="application/vnd.openxmlformats-package.core-properties+xml" />';
      var sheetsOverride = "";
      var length = this.worksheets.length;
      var drawingIndex = 0;
      for (var i = 0; i < length; i++) {
        sheetsOverride += '<Override PartName="/xl/worksheets/sheet' + (i + 1).toString() + '.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml" />';
        if (this.worksheets[i].images != void 0 && this.worksheets[i].images.length > 0) {
          drawingIndex++;
          sheetsOverride += '<Override PartName="/xl/drawings/drawing' + drawingIndex.toString() + '.xml" ContentType="application/vnd.openxmlformats-officedocument.drawing+xml" />';
        }
      }
      if (this.imageCount > 0) sheetsOverride += '<Default Extension="png" ContentType="image/png" />';
      if (this.sharedStringCount > 0) {
        contentTypeString += '<Override PartName="/xl/sharedStrings.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml" />';
      }
      this.addToArchive(contentTypeString + sheetsOverride + "</Types>", "[Content_Types].xml");
    };
    Workbook2.prototype.addToArchive = function(xmlString, itemName) {
      if (typeof xmlString === "string") {
        var blob = new Blob([xmlString], {
          type: "text/plain"
        });
        var archiveItem = new ZipArchiveItem(blob, itemName);
        this.mArchive.addItem(archiveItem);
      } else {
        var archiveItem = new ZipArchiveItem(xmlString, itemName);
        this.mArchive.addItem(archiveItem);
      }
    };
    Workbook2.prototype.processMergeCells = function(cell, rowIndex, mergeCells) {
      if (cell.rowSpan !== 0 || cell.colSpan !== 0) {
        var mCell = new MergeCell();
        mCell.x = cell.index;
        mCell.width = cell.colSpan;
        mCell.y = rowIndex;
        mCell.height = cell.rowSpan;
        var startCell = this.getCellName(mCell.y, mCell.x);
        var endCell = this.getCellName(rowIndex + mCell.height, cell.index + mCell.width);
        mCell.ref = startCell + ":" + endCell;
        var mergedCell = mergeCells.add(mCell);
        var start = {
          x: mCell.x,
          y: mCell.y
        };
        var end = {
          x: cell.index + mCell.width,
          y: rowIndex + mCell.height
        };
        this.updatedMergedCellStyles(start, end, cell);
      }
      return mergeCells;
    };
    Workbook2.prototype.updatedMergedCellStyles = function(sCell, eCell, cell) {
      for (var x = sCell.x; x <= eCell.x; x++) {
        for (var y = sCell.y; y <= eCell.y; y++) {
          this.mergedCellsStyle.set(this.getCellName(y, x), {
            x,
            y,
            styleIndex: cell.styleIndex
          });
        }
      }
    };
    Workbook2.prototype.dateToTicks = function(year, month, day) {
      var ticksPerDay = 1e4 * 1e3 * 60 * 60 * 24;
      var daysToMonth365 = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];
      var daysToMonth366 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366];
      if (year >= 1 && year <= 9999 && month >= 1 && month <= 12) {
        var days = this.isLeapYear(year) ? daysToMonth366 : daysToMonth365;
        var y = year - 1;
        var n = y * 365 + (y / 4 | 0) - (y / 100 | 0) + (y / 400 | 0) + days[month - 1] + day - 1;
        return n * ticksPerDay;
      }
      throw new Error("Not a valid date");
    };
    Workbook2.prototype.timeToTicks = function(hour, minute, second) {
      if (hour >= 0 && hour < 24 && minute >= 0 && minute < 60 && second >= 0 && second < 60) {
        var totalSeconds = hour * 3600 + minute * 60 + second;
        return totalSeconds * 1e4 * 1e3;
      }
      throw new Error("Not valid time");
    };
    Workbook2.prototype.isLeapYear = function(year) {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    };
    Workbook2.prototype.toOADate = function(date) {
      var ticks = 0;
      ticks = this.dateToTicks(date.getFullYear(), date.getMonth() + 1, date.getDate()) + this.timeToTicks(date.getHours(), date.getMinutes(), date.getSeconds());
      if (ticks === 0) {
        return 0;
      }
      var ticksPerDay = 1e4 * 1e3 * 60 * 60 * 24;
      var daysTo1899 = (((365 * 4 + 1) * 25 - 1) * 4 + 1) * 4 + ((365 * 4 + 1) * 25 - 1) * 3 - 367;
      var doubleDateOffset = daysTo1899 * ticksPerDay;
      var oaDateMinAsTicks = ((365 * 4 + 1) * 25 - 1 - 365) * ticksPerDay;
      if (ticks < oaDateMinAsTicks) {
        throw new Error("Arg_OleAutDateInvalid");
      }
      var millisPerDay = 1e3 * 60 * 60 * 24;
      return (ticks - doubleDateOffset) / 1e4 / millisPerDay;
    };
    return Workbook2;
  }()
);
var BuiltInProperties = (
  /** @class */
  /* @__PURE__ */ function() {
    function BuiltInProperties2() {
    }
    return BuiltInProperties2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/enum.js
var PdfHorizontalAlignment;
(function(PdfHorizontalAlignment2) {
  PdfHorizontalAlignment2[PdfHorizontalAlignment2["Left"] = 0] = "Left";
  PdfHorizontalAlignment2[PdfHorizontalAlignment2["Center"] = 1] = "Center";
  PdfHorizontalAlignment2[PdfHorizontalAlignment2["Right"] = 2] = "Right";
})(PdfHorizontalAlignment || (PdfHorizontalAlignment = {}));
var PdfVerticalAlignment;
(function(PdfVerticalAlignment2) {
  PdfVerticalAlignment2[PdfVerticalAlignment2["Top"] = 0] = "Top";
  PdfVerticalAlignment2[PdfVerticalAlignment2["Middle"] = 1] = "Middle";
  PdfVerticalAlignment2[PdfVerticalAlignment2["Bottom"] = 2] = "Bottom";
})(PdfVerticalAlignment || (PdfVerticalAlignment = {}));
var PdfTextAlignment;
(function(PdfTextAlignment2) {
  PdfTextAlignment2[PdfTextAlignment2["Left"] = 0] = "Left";
  PdfTextAlignment2[PdfTextAlignment2["Center"] = 1] = "Center";
  PdfTextAlignment2[PdfTextAlignment2["Right"] = 2] = "Right";
  PdfTextAlignment2[PdfTextAlignment2["Justify"] = 3] = "Justify";
})(PdfTextAlignment || (PdfTextAlignment = {}));
var TextRenderingMode;
(function(TextRenderingMode2) {
  TextRenderingMode2[TextRenderingMode2["Fill"] = 0] = "Fill";
  TextRenderingMode2[TextRenderingMode2["Stroke"] = 1] = "Stroke";
  TextRenderingMode2[TextRenderingMode2["FillStroke"] = 2] = "FillStroke";
  TextRenderingMode2[TextRenderingMode2["None"] = 3] = "None";
  TextRenderingMode2[TextRenderingMode2["ClipFlag"] = 4] = "ClipFlag";
  TextRenderingMode2[TextRenderingMode2["ClipFill"] = 4] = "ClipFill";
  TextRenderingMode2[TextRenderingMode2["ClipStroke"] = 5] = "ClipStroke";
  TextRenderingMode2[TextRenderingMode2["ClipFillStroke"] = 6] = "ClipFillStroke";
  TextRenderingMode2[TextRenderingMode2["Clip"] = 7] = "Clip";
})(TextRenderingMode || (TextRenderingMode = {}));
var PdfLineJoin;
(function(PdfLineJoin2) {
  PdfLineJoin2[PdfLineJoin2["Miter"] = 0] = "Miter";
  PdfLineJoin2[PdfLineJoin2["Round"] = 1] = "Round";
  PdfLineJoin2[PdfLineJoin2["Bevel"] = 2] = "Bevel";
})(PdfLineJoin || (PdfLineJoin = {}));
var PdfLineCap;
(function(PdfLineCap2) {
  PdfLineCap2[PdfLineCap2["Flat"] = 0] = "Flat";
  PdfLineCap2[PdfLineCap2["Round"] = 1] = "Round";
  PdfLineCap2[PdfLineCap2["Square"] = 2] = "Square";
})(PdfLineCap || (PdfLineCap = {}));
var PdfDashStyle;
(function(PdfDashStyle2) {
  PdfDashStyle2[PdfDashStyle2["Solid"] = 0] = "Solid";
  PdfDashStyle2[PdfDashStyle2["Dash"] = 1] = "Dash";
  PdfDashStyle2[PdfDashStyle2["Dot"] = 2] = "Dot";
  PdfDashStyle2[PdfDashStyle2["DashDot"] = 3] = "DashDot";
  PdfDashStyle2[PdfDashStyle2["DashDotDot"] = 4] = "DashDotDot";
  PdfDashStyle2[PdfDashStyle2["Custom"] = 5] = "Custom";
})(PdfDashStyle || (PdfDashStyle = {}));
var PdfFillMode;
(function(PdfFillMode2) {
  PdfFillMode2[PdfFillMode2["Winding"] = 0] = "Winding";
  PdfFillMode2[PdfFillMode2["Alternate"] = 1] = "Alternate";
})(PdfFillMode || (PdfFillMode = {}));
var PdfColorSpace;
(function(PdfColorSpace2) {
  PdfColorSpace2[PdfColorSpace2["Rgb"] = 0] = "Rgb";
  PdfColorSpace2[PdfColorSpace2["Cmyk"] = 1] = "Cmyk";
  PdfColorSpace2[PdfColorSpace2["GrayScale"] = 2] = "GrayScale";
  PdfColorSpace2[PdfColorSpace2["Indexed"] = 3] = "Indexed";
})(PdfColorSpace || (PdfColorSpace = {}));
var PdfBlendMode;
(function(PdfBlendMode2) {
  PdfBlendMode2[PdfBlendMode2["Normal"] = 0] = "Normal";
  PdfBlendMode2[PdfBlendMode2["Multiply"] = 1] = "Multiply";
  PdfBlendMode2[PdfBlendMode2["Screen"] = 2] = "Screen";
  PdfBlendMode2[PdfBlendMode2["Overlay"] = 3] = "Overlay";
  PdfBlendMode2[PdfBlendMode2["Darken"] = 4] = "Darken";
  PdfBlendMode2[PdfBlendMode2["Lighten"] = 5] = "Lighten";
  PdfBlendMode2[PdfBlendMode2["ColorDodge"] = 6] = "ColorDodge";
  PdfBlendMode2[PdfBlendMode2["ColorBurn"] = 7] = "ColorBurn";
  PdfBlendMode2[PdfBlendMode2["HardLight"] = 8] = "HardLight";
  PdfBlendMode2[PdfBlendMode2["SoftLight"] = 9] = "SoftLight";
  PdfBlendMode2[PdfBlendMode2["Difference"] = 10] = "Difference";
  PdfBlendMode2[PdfBlendMode2["Exclusion"] = 11] = "Exclusion";
  PdfBlendMode2[PdfBlendMode2["Hue"] = 12] = "Hue";
  PdfBlendMode2[PdfBlendMode2["Saturation"] = 13] = "Saturation";
  PdfBlendMode2[PdfBlendMode2["Color"] = 14] = "Color";
  PdfBlendMode2[PdfBlendMode2["Luminosity"] = 15] = "Luminosity";
})(PdfBlendMode || (PdfBlendMode = {}));
var PdfGraphicsUnit;
(function(PdfGraphicsUnit2) {
  PdfGraphicsUnit2[PdfGraphicsUnit2["Centimeter"] = 0] = "Centimeter";
  PdfGraphicsUnit2[PdfGraphicsUnit2["Pica"] = 1] = "Pica";
  PdfGraphicsUnit2[PdfGraphicsUnit2["Pixel"] = 2] = "Pixel";
  PdfGraphicsUnit2[PdfGraphicsUnit2["Point"] = 3] = "Point";
  PdfGraphicsUnit2[PdfGraphicsUnit2["Inch"] = 4] = "Inch";
  PdfGraphicsUnit2[PdfGraphicsUnit2["Document"] = 5] = "Document";
  PdfGraphicsUnit2[PdfGraphicsUnit2["Millimeter"] = 6] = "Millimeter";
})(PdfGraphicsUnit || (PdfGraphicsUnit = {}));
var PdfGridImagePosition;
(function(PdfGridImagePosition2) {
  PdfGridImagePosition2[PdfGridImagePosition2["Fit"] = 0] = "Fit";
  PdfGridImagePosition2[PdfGridImagePosition2["Center"] = 1] = "Center";
  PdfGridImagePosition2[PdfGridImagePosition2["Stretch"] = 2] = "Stretch";
  PdfGridImagePosition2[PdfGridImagePosition2["Tile"] = 3] = "Tile";
})(PdfGridImagePosition || (PdfGridImagePosition = {}));
var PdfTextDirection;
(function(PdfTextDirection2) {
  PdfTextDirection2[PdfTextDirection2["None"] = 0] = "None";
  PdfTextDirection2[PdfTextDirection2["LeftToRight"] = 1] = "LeftToRight";
  PdfTextDirection2[PdfTextDirection2["RightToLeft"] = 2] = "RightToLeft";
})(PdfTextDirection || (PdfTextDirection = {}));

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/pdf-operators.js
var Operators = (
  /** @class */
  function() {
    function Operators2() {
      this.forTest = "test";
      this.forTest = Operators2.obj;
    }
    Operators2.obj = "obj";
    Operators2.endObj = "endobj";
    Operators2.r = "R";
    Operators2.whiteSpace = " ";
    Operators2.slash = "/";
    Operators2.newLine = "\r\n";
    Operators2.stream = "stream";
    Operators2.endStream = "endstream";
    Operators2.xref = "xref";
    Operators2.f = "f";
    Operators2.n = "n";
    Operators2.trailer = "trailer";
    Operators2.startxref = "startxref";
    Operators2.eof = "%%EOF";
    Operators2.header = "%PDF-1.5";
    Operators2.beginText = "BT";
    Operators2.endText = "ET";
    Operators2.beginPath = "m";
    Operators2.appendLineSegment = "l";
    Operators2.stroke = "S";
    Operators2.fill = "f";
    Operators2.fillEvenOdd = "f*";
    Operators2.fillStroke = "B";
    Operators2.fillStrokeEvenOdd = "B*";
    Operators2.appendbeziercurve = "c";
    Operators2.appendRectangle = "re";
    Operators2.saveState = "q";
    Operators2.restoreState = "Q";
    Operators2.paintXObject = "Do";
    Operators2.modifyCtm = "cm";
    Operators2.modifyTM = "Tm";
    Operators2.setLineWidth = "w";
    Operators2.setLineCapStyle = "J";
    Operators2.setLineJoinStyle = "j";
    Operators2.setDashPattern = "d";
    Operators2.setFlatnessTolerance = "i";
    Operators2.closePath = "h";
    Operators2.closeStrokePath = "s";
    Operators2.closeFillStrokePath = "b";
    Operators2.setCharacterSpace = "Tc";
    Operators2.setWordSpace = "Tw";
    Operators2.setHorizontalScaling = "Tz";
    Operators2.setTextLeading = "TL";
    Operators2.setFont = "Tf";
    Operators2.setRenderingMode = "Tr";
    Operators2.setTextRise = "Ts";
    Operators2.setTextScaling = "Tz";
    Operators2.setCoords = "Td";
    Operators2.goToNextLine = "T*";
    Operators2.setText = "Tj";
    Operators2.setTextWithFormatting = "TJ";
    Operators2.setTextOnNewLine = "'";
    Operators2.selectcolorspaceforstroking = "CS";
    Operators2.selectcolorspacefornonstroking = "cs";
    Operators2.setrbgcolorforstroking = "RG";
    Operators2.setrbgcolorfornonstroking = "rg";
    Operators2.setcmykcolorforstroking = "K";
    Operators2.setcmykcolorfornonstroking = "k";
    Operators2.setgraycolorforstroking = "G";
    Operators2.setgraycolorfornonstroking = "g";
    Operators2.clipPath = "W";
    Operators2.clipPathEvenOdd = "W*";
    Operators2.endPath = "n";
    Operators2.setGraphicsState = "gs";
    Operators2.comment = "%";
    Operators2.evenOdd = "*";
    Operators2.setMiterLimit = "M";
    Operators2.setColorAndPattern = "scn";
    Operators2.setColorAndPatternStroking = "SCN";
    return Operators2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/collections/utils.js
function defaultToString(item) {
  if (Object.prototype.toString.call(item) === "[object String]") {
    return "$s" + item;
  } else {
    return "$o" + item.toString();
  }
}

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/collections/dictionary.js
var Dictionary = (
  /** @class */
  function() {
    function Dictionary2(toStringFunction) {
      this.table = {};
      this.nElements = 0;
      this.toStr = toStringFunction || defaultToString;
    }
    Dictionary2.prototype.getValue = function(key) {
      var pair = this.table["$" + this.toStr(key)];
      if (typeof pair === "undefined") {
        return void 0;
      }
      return pair.value;
    };
    Dictionary2.prototype.setValue = function(key, value) {
      var ret;
      var k = "$" + this.toStr(key);
      var previousElement = this.table[k];
      this.nElements++;
      ret = void 0;
      this.table[k] = {
        key,
        value
      };
      return ret;
    };
    Dictionary2.prototype.remove = function(key) {
      var k = "$" + this.toStr(key);
      var previousElement = this.table[k];
      delete this.table[k];
      this.nElements--;
      return previousElement.value;
    };
    Dictionary2.prototype.keys = function() {
      var keysArray = [];
      var namesOfKeys = Object.keys(this.table);
      for (var index1 = 0; index1 < namesOfKeys.length; index1++) {
        var pair1 = this.table[namesOfKeys[index1]];
        keysArray.push(pair1.key);
      }
      return keysArray;
    };
    Dictionary2.prototype.values = function() {
      var valuesArray = [];
      var namesOfValues = Object.keys(this.table);
      for (var index2 = 0; index2 < namesOfValues.length; index2++) {
        var pair2 = this.table[namesOfValues[index2]];
        valuesArray.push(pair2.value);
      }
      return valuesArray;
    };
    Dictionary2.prototype.containsKey = function(key) {
      var retutnValue = true;
      if (typeof this.getValue(key) === "undefined") {
        retutnValue = true;
      } else {
        retutnValue = false;
      }
      return !retutnValue;
    };
    Dictionary2.prototype.clear = function() {
      this.table = {};
      this.nElements = 0;
    };
    Dictionary2.prototype.size = function() {
      return this.nElements;
    };
    return Dictionary2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-number.js
var PdfNumber = (
  /** @class */
  function() {
    function PdfNumber2(value) {
      this.position5 = -1;
      this.value = value;
    }
    Object.defineProperty(PdfNumber2.prototype, "intValue", {
      /**
       * Gets or sets the `integer` value.
       * @private
       */
      get: function() {
        return this.value;
      },
      set: function(value) {
        this.value = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfNumber2.prototype, "isInteger", {
      /**
       * Gets or sets a value indicating whether this instance `is integer`.
       * @private
       */
      get: function() {
        return this.integer;
      },
      set: function(value) {
        this.integer = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfNumber2.prototype, "status", {
      /**
       * Gets or sets the `Status` of the specified object.
       * @private
       */
      get: function() {
        return this.status5;
      },
      set: function(value) {
        this.status5 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfNumber2.prototype, "isSaving", {
      /**
       * Gets or sets a value indicating whether this document `is saving` or not.
       * @private
       */
      get: function() {
        return this.isSaving5;
      },
      set: function(value) {
        this.isSaving5 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfNumber2.prototype, "objectCollectionIndex", {
      /**
       * Gets or sets the `index` value of the specified object.
       * @private
       */
      get: function() {
        return this.index5;
      },
      set: function(value) {
        this.index5 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfNumber2.prototype, "position", {
      /**
       * Gets or sets the `position` of the object.
       * @private
       */
      get: function() {
        return this.position5;
      },
      set: function(value) {
        this.position5 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfNumber2.prototype, "clonedObject", {
      /**
       * Returns `cloned object`.
       * @private
       */
      get: function() {
        var rValue = null;
        return rValue;
      },
      enumerable: true,
      configurable: true
    });
    PdfNumber2.prototype.save = function(writer) {
      writer.write(this.intValue.toString());
    };
    PdfNumber2.prototype.clone = function(crossTable) {
      var newNumber = new PdfNumber2(this.value);
      return newNumber;
    };
    PdfNumber2.floatToString = function(number) {
      var returnString = number.toFixed(2);
      if (returnString === "0.00") {
        returnString = ".00";
      }
      return returnString;
    };
    PdfNumber2.min = function(x, y, z) {
      var r = Math.min(x, y);
      return Math.min(z, r);
    };
    return PdfNumber2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-array.js
var PdfArray = (
  /** @class */
  function() {
    function PdfArray2(array) {
      this.startMark = "[";
      this.endMark = "]";
      this.position9 = -1;
      this.clonedObject9 = null;
      this.isFont = false;
      if (typeof array === "undefined") {
        this.internalElements = [];
      } else {
        if (typeof array !== "undefined" && !(array instanceof PdfArray2)) {
          var tempNumberArray = array;
          for (var index = 0; index < tempNumberArray.length; index++) {
            var pdfNumber = new PdfNumber(tempNumberArray[index]);
            this.add(pdfNumber);
          }
        } else {
          var tempArray = array;
          this.internalElements = [];
          for (var index = 0; index < tempArray.elements.length; index++) {
            this.internalElements.push(tempArray.elements[index]);
          }
        }
      }
    }
    PdfArray2.prototype.items = function(index) {
      return this.internalElements[index];
    };
    Object.defineProperty(PdfArray2.prototype, "count", {
      /**
       * Gets the `count`.
       * @private
       */
      get: function() {
        return this.internalElements.length;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfArray2.prototype, "status", {
      /**
       * Gets or sets the `Status` of the specified object.
       * @private
       */
      get: function() {
        return this.status9;
      },
      set: function(value) {
        this.status9 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfArray2.prototype, "isSaving", {
      /**
       * Gets or sets a value indicating whether this document `is saving` or not.
       * @private
       */
      get: function() {
        return this.isSaving9;
      },
      set: function(value) {
        this.isSaving9 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfArray2.prototype, "clonedObject", {
      /**
       * Returns `cloned object`.
       * @private
       */
      get: function() {
        return this.clonedObject9;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfArray2.prototype, "position", {
      /**
       * Gets or sets the `position` of the object.
       * @private
       */
      get: function() {
        return this.position9;
      },
      set: function(value) {
        this.position9 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfArray2.prototype, "objectCollectionIndex", {
      /**
       * Gets or sets the `index` value of the specified object.
       * @private
       */
      get: function() {
        return this.index9;
      },
      set: function(value) {
        this.index9 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfArray2.prototype, "CrossTable", {
      /**
       * Returns `PdfCrossTable` associated with the object.
       * @private
       */
      get: function() {
        return this.pdfCrossTable;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfArray2.prototype, "elements", {
      /**
       * Gets the `elements` of the Pdf Array.
       * @private
       */
      get: function() {
        return this.internalElements;
      },
      enumerable: true,
      configurable: true
    });
    PdfArray2.prototype.add = function(element2) {
      if (typeof this.internalElements === "undefined") {
        this.internalElements = [];
      }
      this.internalElements.push(element2);
      this.markedChange();
    };
    PdfArray2.prototype.markedChange = function() {
      this.bChanged = true;
    };
    PdfArray2.prototype.contains = function(element2) {
      var returnValue = false;
      for (var index = 0; index < this.internalElements.length; index++) {
        var tempElement = this.internalElements[index];
        var inputElement = element2;
        if (tempElement != null && typeof tempElement !== "undefined" && inputElement != null && typeof inputElement !== "undefined") {
          if (tempElement.value === inputElement.value) {
            return true;
          }
        }
      }
      return returnValue;
    };
    PdfArray2.prototype.getItems = function(index) {
      return this.internalElements[index];
    };
    PdfArray2.prototype.save = function(writer) {
      writer.write(this.startMark);
      for (var i = 0, len = this.count; i < len; i++) {
        this.getItems(i).save(writer);
        if (i + 1 !== len) {
          writer.write(Operators.whiteSpace);
        }
      }
      writer.write(this.endMark);
    };
    PdfArray2.prototype.clone = function(crossTable) {
      this.clonedObject9 = null;
      var newArray = new PdfArray2();
      for (var index = 0; index < this.internalElements.length; index++) {
        var obj = this.internalElements[index];
        newArray.add(obj.clone(crossTable));
      }
      newArray.pdfCrossTable = crossTable;
      this.clonedObject9 = newArray;
      return newArray;
    };
    PdfArray2.fromRectangle = function(bounds) {
      var values = [bounds.x, bounds.y, bounds.width, bounds.height];
      var array = new PdfArray2(values);
      return array;
    };
    PdfArray2.prototype.insert = function(index, element2) {
      if (index < this.internalElements.length && index > 0) {
        var tempElements = [];
        for (var i = 0; i < index; i++) {
          tempElements.push(this.internalElements[i]);
        }
        tempElements.push(element2);
        for (var i = index; i < this.internalElements.length; i++) {
          tempElements.push(this.internalElements[i]);
        }
        this.internalElements = tempElements;
      } else {
        this.internalElements.push(element2);
      }
      this.markChanged();
    };
    PdfArray2.prototype.indexOf = function(element2) {
      return this.internalElements.indexOf(element2);
    };
    PdfArray2.prototype.remove = function(element2) {
      var index = this.internalElements.indexOf(element2);
      this.internalElements[index] = null;
      this.markChanged();
    };
    PdfArray2.prototype.removeAt = function(index) {
      if (this.internalElements.length > index) {
        var tempArray = [];
        for (var i = 0; i < index; i++) {
          tempArray.push(this.internalElements[i]);
        }
        for (var i = index + 1; i < this.internalElements.length; i++) {
          tempArray.push(this.internalElements[i]);
        }
        this.internalElements = tempArray;
      }
      this.markChanged();
    };
    PdfArray2.prototype.clear = function() {
      this.internalElements = [];
      this.markChanged();
    };
    PdfArray2.prototype.markChanged = function() {
      this.bChanged = true;
    };
    return PdfArray2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-color.js
var PdfColor = (
  /** @class */
  function() {
    function PdfColor2(color1, color2, color3, color4) {
      if (typeof color1 === "undefined") {
        if (typeof color2 !== "undefined" && typeof color3 !== "undefined" && typeof color4 !== "undefined") {
          this.assignRGB(color2, color3, color4);
        } else {
          this.filled = false;
        }
      } else if (color1 instanceof PdfColor2) {
        this.redColor = color1.r;
        this.greenColor = color1.g;
        this.blueColor = color1.b;
        this.grayColor = color1.gray;
        this.alpha = color1.alpha;
        this.filled = this.alpha !== 0;
      } else if (typeof color1 === "number" && typeof color2 === "undefined" && typeof color3 === "undefined" && typeof color4 === "undefined") {
        if (color1 < 0) {
          color1 = 0;
        }
        if (color1 > 1) {
          color1 = 1;
        }
        this.redColor = color1 * PdfColor2.maxColourChannelValue;
        this.greenColor = color1 * PdfColor2.maxColourChannelValue;
        this.blueColor = color1 * PdfColor2.maxColourChannelValue;
        this.cyanColor = color1;
        this.magentaColor = color1;
        this.yellowColor = color1;
        this.blackColor = color1;
        this.grayColor = color1;
        this.alpha = PdfColor2.maxColourChannelValue;
        this.filled = true;
      } else if (typeof color4 === "undefined") {
        this.assignRGB(color1, color2, color3);
      } else {
        this.assignRGB(color2, color3, color4, color1);
      }
    }
    PdfColor2.prototype.assignRGB = function(r, g, b, a) {
      if (typeof r === "undefined" || typeof g === "undefined" || typeof b === "undefined") {
        this.filled = false;
      } else {
        this.cyanColor = 0;
        this.magentaColor = 0;
        this.yellowColor = 0;
        this.blackColor = 0;
        this.grayColor = 0;
        this.redColor = r;
        this.greenColor = g;
        this.blueColor = b;
        if (typeof a === "undefined") {
          this.a = PdfColor2.maxColourChannelValue;
        } else {
          this.a = a;
          var isFractional = a >= 0 && a <= 1;
          var scaleFactor = isFractional ? a : a / 255;
          var inverseScale = 1 - scaleFactor;
          this.redColor = Math.max(0, Math.min(255, Math.round(r * scaleFactor + PdfColor2.maxColourChannelValue * inverseScale)));
          this.greenColor = Math.max(0, Math.min(255, Math.round(g * scaleFactor + PdfColor2.maxColourChannelValue * inverseScale)));
          this.blueColor = Math.max(0, Math.min(255, Math.round(b * scaleFactor + PdfColor2.maxColourChannelValue * inverseScale)));
        }
        this.filled = true;
        this.assignCMYK(r, g, b);
      }
    };
    PdfColor2.prototype.assignCMYK = function(r, g, b) {
      var red = r / PdfColor2.maxColourChannelValue;
      var green = g / PdfColor2.maxColourChannelValue;
      var blue = b / PdfColor2.maxColourChannelValue;
      var black = PdfNumber.min(1 - red, 1 - green, 1 - blue);
      var cyan = black === 1 ? 0 : (1 - red - black) / (1 - black);
      var magenta = black === 1 ? 0 : (1 - green - black) / (1 - black);
      var yellow = black === 1 ? 0 : (1 - blue - black) / (1 - black);
      this.blackColor = black;
      this.cyanColor = cyan;
      this.magentaColor = magenta;
      this.yellowColor = yellow;
    };
    Object.defineProperty(PdfColor2.prototype, "r", {
      //Properties
      // public static get Empty():PdfColor
      // {
      //     return this.s_emptyColor
      // }
      /**
       * Gets or sets `Red` channel value.
       * @private
       */
      get: function() {
        return this.redColor;
      },
      set: function(value) {
        this.redColor = value;
        this.assignCMYK(this.redColor, this.greenColor, this.blueColor);
        this.filled = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfColor2.prototype, "red", {
      /**
       * Gets the `Red` color
       * @private
       */
      get: function() {
        return this.r / PdfColor2.maxColourChannelValue;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfColor2.prototype, "b", {
      /**
       * Gets or sets `Blue` channel value.
       * @private
       */
      get: function() {
        return this.blueColor;
      },
      set: function(value) {
        this.blueColor = value;
        this.assignCMYK(this.redColor, this.greenColor, this.blueColor);
        this.filled = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfColor2.prototype, "blue", {
      /**
       * Gets the `blue` color.
       * @private
       */
      get: function() {
        return this.b / PdfColor2.maxColourChannelValue;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfColor2.prototype, "c", {
      /**
       * Gets or sets `Cyan` channel value.
       * @private
       */
      get: function() {
        return this.cyanColor;
      },
      set: function(value) {
        if (value < 0) {
          this.cyanColor = 0;
        } else if (value > 1) {
          this.cyanColor = 1;
        } else {
          this.cyanColor = value;
        }
        this.assignRGB(this.cyanColor, this.magentaColor, this.yellowColor, this.blackColor);
        this.filled = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfColor2.prototype, "k", {
      /**
       * Gets or sets `Black` channel value.
       * @private
       */
      get: function() {
        return this.blackColor;
      },
      set: function(value) {
        if (value < 0) {
          this.blackColor = 0;
        } else if (value > 1) {
          this.blackColor = 1;
        } else {
          this.blackColor = value;
        }
        this.assignRGB(this.cyanColor, this.magentaColor, this.yellowColor, this.blackColor);
        this.filled = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfColor2.prototype, "m", {
      /**
       * Gets or sets `Magenta` channel value.
       * @private
       */
      get: function() {
        return this.magentaColor;
      },
      set: function(value) {
        if (value < 0) {
          this.magentaColor = 0;
        } else if (value > 1) {
          this.magentaColor = 1;
        } else {
          this.magentaColor = value;
        }
        this.assignRGB(this.cyanColor, this.magentaColor, this.yellowColor, this.blackColor);
        this.filled = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfColor2.prototype, "y", {
      /**
       * Gets or sets `Yellow` channel value.
       * @private
       */
      get: function() {
        return this.yellowColor;
      },
      set: function(value) {
        if (value < 0) {
          this.yellowColor = 0;
        } else if (value > 1) {
          this.yellowColor = 1;
        } else {
          this.yellowColor = value;
        }
        this.assignRGB(this.cyanColor, this.magentaColor, this.yellowColor, this.blackColor);
        this.filled = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfColor2.prototype, "g", {
      /**
       *  Gets or sets `Green` channel value.
       * @private
       */
      get: function() {
        return this.greenColor;
      },
      set: function(value) {
        this.greenColor = value;
        this.assignCMYK(this.redColor, this.greenColor, this.blueColor);
        this.filled = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfColor2.prototype, "green", {
      /**
       * Gets the `Green` color.
       * @private
       */
      get: function() {
        return this.g / PdfColor2.maxColourChannelValue;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfColor2.prototype, "gray", {
      /**
       * Gets or sets `Gray` channel value.
       * @private
       */
      get: function() {
        return (this.redColor + this.greenColor + this.blueColor) / (PdfColor2.maxColourChannelValue * 3);
      },
      set: function(value) {
        if (value < 0) {
          this.grayColor = 0;
        } else if (value > 1) {
          this.grayColor = 1;
        } else {
          this.grayColor = value;
        }
        this.r = this.grayColor * PdfColor2.maxColourChannelValue;
        this.g = this.grayColor * PdfColor2.maxColourChannelValue;
        this.b = this.grayColor * PdfColor2.maxColourChannelValue;
        this.assignCMYK(this.redColor, this.greenColor, this.blueColor);
        this.filled = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfColor2.prototype, "isEmpty", {
      /**
       * Gets whether the PDFColor `is Empty` or not.
       * @private
       */
      get: function() {
        return !this.filled;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfColor2.prototype, "a", {
      /**
       * Gets or sets `Alpha` channel value.
       * @private
       */
      get: function() {
        return this.alpha;
      },
      set: function(value) {
        if (value < 0) {
          this.alpha = 0;
        } else {
          this.alpha = value;
        }
        this.filled = true;
      },
      enumerable: true,
      configurable: true
    });
    PdfColor2.prototype.toString = function(colorSpace, stroke) {
      if (this.isEmpty) {
        return "";
      }
      var str = "";
      switch (colorSpace) {
        case PdfColorSpace.Rgb:
          str = this.rgbToString(stroke);
          break;
        case PdfColorSpace.GrayScale:
          str = this.grayScaleToString(stroke);
          break;
        case PdfColorSpace.Cmyk:
          str = this.cmykToString(stroke);
          break;
      }
      return str;
    };
    PdfColor2.prototype.grayScaleToString = function(ifStroking) {
      var gray = this.gray;
      var colour = "";
      var obj = null;
      obj = ifStroking ? PdfColor2.grayStringsSroke.containsKey(gray) ? PdfColor2.grayStringsSroke.getValue(gray) : null : PdfColor2.grayStringsFill.containsKey(gray) ? PdfColor2.grayStringsFill.getValue(gray) : null;
      if (obj == null) {
        if (ifStroking) {
          colour = gray.toString() + " G";
          PdfColor2.grayStringsSroke.setValue(gray, colour);
        }
      } else {
        colour = obj.toString();
      }
      return colour + Operators.newLine;
    };
    PdfColor2.prototype.rgbToString = function(ifStroking) {
      var r = this.r;
      var g = this.g;
      var b = this.b;
      var key = (r << 16) + (g << 8) + b;
      if (ifStroking) {
        key += 1 << 24;
      }
      var colour = "";
      var obj = null;
      if (PdfColor2.rgbStrings.containsKey(key)) {
        obj = PdfColor2.rgbStrings.getValue(key);
      }
      if (obj == null) {
        var red = r / PdfColor2.maxColourChannelValue;
        var green = g / PdfColor2.maxColourChannelValue;
        var blue = b / PdfColor2.maxColourChannelValue;
        if (ifStroking) {
          colour = red.toString() + " " + green.toString() + " " + blue.toString() + " RG";
        } else {
          colour = red.toString() + " " + green.toString() + " " + blue.toString() + " rg";
        }
        PdfColor2.rgbStrings.setValue(key, colour);
      } else {
        colour = obj.toString();
      }
      return colour + Operators.newLine;
    };
    PdfColor2.prototype.cmykToString = function(ifStroking) {
      var cyan = this.c;
      var magenta = this.m;
      var yellow = this.y;
      var black = this.b;
      var colour = "";
      colour = cyan.toString() + " " + magenta.toString() + " " + yellow.toString() + " " + black.toString() + " K";
      return colour + Operators.newLine;
    };
    PdfColor2.prototype.toArray = function(colorSpace) {
      var array = new PdfArray();
      switch (colorSpace) {
        case PdfColorSpace.Rgb:
          array.add(new PdfNumber(this.red));
          array.add(new PdfNumber(this.green));
          array.add(new PdfNumber(this.blue));
          break;
      }
      return array;
    };
    PdfColor2.rgbStrings = new Dictionary();
    PdfColor2.grayStringsSroke = new Dictionary();
    PdfColor2.grayStringsFill = new Dictionary();
    PdfColor2.maxColourChannelValue = 255;
    return PdfColor2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/drawing/pdf-drawing.js
var PointF = (
  /** @class */
  /* @__PURE__ */ function() {
    function PointF2(x, y) {
      if (typeof x === "undefined") {
        this.x = 0;
        this.y = 0;
      } else {
        if (x !== null) {
          this.x = x;
        } else {
          this.x = 0;
        }
        if (y !== null) {
          this.y = y;
        } else {
          this.y = 0;
        }
      }
    }
    return PointF2;
  }()
);
var SizeF = (
  /** @class */
  /* @__PURE__ */ function() {
    function SizeF2(width, height) {
      if (typeof height === "undefined") {
        this.height = 0;
        this.width = 0;
      } else {
        if (height !== null) {
          this.height = height;
        } else {
          this.height = 0;
        }
        if (width !== null) {
          this.width = width;
        } else {
          this.width = 0;
        }
      }
    }
    return SizeF2;
  }()
);
var RectangleF = (
  /** @class */
  /* @__PURE__ */ function() {
    function RectangleF2(arg1, arg2, arg3, arg4) {
      if (typeof arg1 === typeof arg1 && typeof arg1 === "undefined") {
        this.x = 0;
        this.y = 0;
        this.height = 0;
        this.width = 0;
      } else {
        if (arg1 instanceof PointF && arg2 instanceof SizeF && typeof arg3 === "undefined") {
          var pointf = arg1;
          this.x = pointf.x;
          this.y = pointf.y;
          var sizef = arg2;
          this.height = sizef.height;
          this.width = sizef.width;
        } else {
          var x = arg1;
          var y = arg2;
          var width = arg3;
          var height = arg4;
          this.x = x;
          this.y = y;
          this.height = height;
          this.width = width;
        }
      }
    }
    return RectangleF2;
  }()
);
var Rectangle = (
  /** @class */
  function() {
    function Rectangle2(left, top, right, bottom) {
      this.left = left;
      this.top = top;
      this.right = right;
      this.bottom = bottom;
    }
    Object.defineProperty(Rectangle2.prototype, "width", {
      /**
       * Gets a value of width
       */
      get: function() {
        return this.right - this.left;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Rectangle2.prototype, "height", {
      /**
       * Gets a value of height
       */
      get: function() {
        return this.bottom - this.top;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Rectangle2.prototype, "topLeft", {
      /**
       * Gets a value of Top and Left
       */
      get: function() {
        return new PointF(this.left, this.top);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Rectangle2.prototype, "size", {
      /**
       * Gets a value of size
       */
      get: function() {
        return new SizeF(this.width, this.height);
      },
      enumerable: true,
      configurable: true
    });
    Rectangle2.prototype.toString = function() {
      return this.topLeft + "x" + this.size;
    };
    return Rectangle2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/brushes/pdf-brush.js
var PdfBrush = (
  /** @class */
  function() {
    function PdfBrush2() {
    }
    PdfBrush2.prototype.clone = function() {
      return this;
    };
    return PdfBrush2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/brushes/pdf-solid-brush.js
var __extends57 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfSolidBrush = (
  /** @class */
  function(_super) {
    __extends57(PdfSolidBrush2, _super);
    function PdfSolidBrush2(color) {
      var _this = _super.call(this) || this;
      _this.pdfColor = color;
      return _this;
    }
    Object.defineProperty(PdfSolidBrush2.prototype, "color", {
      //Properties
      /**
       * Gets or sets the `color` of the brush.
       * @private
       */
      get: function() {
        return this.pdfColor;
      },
      set: function(value) {
        this.pdfColor = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfSolidBrush2.prototype.monitorChanges = function(brush, streamWriter, getResources, saveChanges, currentColorSpace) {
      if (streamWriter == null) {
        throw new Error("ArgumentNullException:streamWriter");
      }
      var diff = false;
      if (brush == null) {
        diff = true;
        streamWriter.setColorAndSpace(this.pdfColor, currentColorSpace, false);
        return diff;
      } else {
        var sBrush = brush;
        diff = true;
        streamWriter.setColorAndSpace(this.pdfColor, currentColorSpace, false);
        return diff;
      }
    };
    PdfSolidBrush2.prototype.resetChanges = function(streamWriter) {
      streamWriter.setColorAndSpace(new PdfColor(0, 0, 0), PdfColorSpace.Rgb, false);
    };
    return PdfSolidBrush2;
  }(PdfBrush)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/enum.js
var PdfFontStyle;
(function(PdfFontStyle2) {
  PdfFontStyle2[PdfFontStyle2["Regular"] = 0] = "Regular";
  PdfFontStyle2[PdfFontStyle2["Bold"] = 1] = "Bold";
  PdfFontStyle2[PdfFontStyle2["Italic"] = 2] = "Italic";
  PdfFontStyle2[PdfFontStyle2["Underline"] = 4] = "Underline";
  PdfFontStyle2[PdfFontStyle2["Strikeout"] = 8] = "Strikeout";
})(PdfFontStyle || (PdfFontStyle = {}));
var PdfFontFamily;
(function(PdfFontFamily2) {
  PdfFontFamily2[PdfFontFamily2["Helvetica"] = 0] = "Helvetica";
  PdfFontFamily2[PdfFontFamily2["Courier"] = 1] = "Courier";
  PdfFontFamily2[PdfFontFamily2["TimesRoman"] = 2] = "TimesRoman";
  PdfFontFamily2[PdfFontFamily2["Symbol"] = 3] = "Symbol";
  PdfFontFamily2[PdfFontFamily2["ZapfDingbats"] = 4] = "ZapfDingbats";
})(PdfFontFamily || (PdfFontFamily = {}));
var PdfFontType;
(function(PdfFontType2) {
  PdfFontType2[PdfFontType2["Standard"] = 0] = "Standard";
  PdfFontType2[PdfFontType2["TrueType"] = 1] = "TrueType";
  PdfFontType2[PdfFontType2["TrueTypeEmbedded"] = 2] = "TrueTypeEmbedded";
})(PdfFontType || (PdfFontType = {}));
var PdfWordWrapType;
(function(PdfWordWrapType2) {
  PdfWordWrapType2[PdfWordWrapType2["None"] = 0] = "None";
  PdfWordWrapType2[PdfWordWrapType2["Word"] = 1] = "Word";
  PdfWordWrapType2[PdfWordWrapType2["WordOnly"] = 2] = "WordOnly";
  PdfWordWrapType2[PdfWordWrapType2["Character"] = 3] = "Character";
})(PdfWordWrapType || (PdfWordWrapType = {}));
var PdfSubSuperScript;
(function(PdfSubSuperScript2) {
  PdfSubSuperScript2[PdfSubSuperScript2["None"] = 0] = "None";
  PdfSubSuperScript2[PdfSubSuperScript2["SuperScript"] = 1] = "SuperScript";
  PdfSubSuperScript2[PdfSubSuperScript2["SubScript"] = 2] = "SubScript";
})(PdfSubSuperScript || (PdfSubSuperScript = {}));
var FontEncoding;
(function(FontEncoding2) {
  FontEncoding2[FontEncoding2["Unknown"] = 0] = "Unknown";
  FontEncoding2[FontEncoding2["StandardEncoding"] = 1] = "StandardEncoding";
  FontEncoding2[FontEncoding2["MacRomanEncoding"] = 2] = "MacRomanEncoding";
  FontEncoding2[FontEncoding2["MacExpertEncoding"] = 3] = "MacExpertEncoding";
  FontEncoding2[FontEncoding2["WinAnsiEncoding"] = 4] = "WinAnsiEncoding";
  FontEncoding2[FontEncoding2["PdfDocEncoding"] = 5] = "PdfDocEncoding";
  FontEncoding2[FontEncoding2["IdentityH"] = 6] = "IdentityH";
})(FontEncoding || (FontEncoding = {}));
var TtfCmapFormat;
(function(TtfCmapFormat2) {
  TtfCmapFormat2[TtfCmapFormat2["Apple"] = 0] = "Apple";
  TtfCmapFormat2[TtfCmapFormat2["Microsoft"] = 4] = "Microsoft";
  TtfCmapFormat2[TtfCmapFormat2["Trimmed"] = 6] = "Trimmed";
})(TtfCmapFormat || (TtfCmapFormat = {}));
var TtfCmapEncoding;
(function(TtfCmapEncoding2) {
  TtfCmapEncoding2[TtfCmapEncoding2["Unknown"] = 0] = "Unknown";
  TtfCmapEncoding2[TtfCmapEncoding2["Symbol"] = 1] = "Symbol";
  TtfCmapEncoding2[TtfCmapEncoding2["Unicode"] = 2] = "Unicode";
  TtfCmapEncoding2[TtfCmapEncoding2["Macintosh"] = 3] = "Macintosh";
})(TtfCmapEncoding || (TtfCmapEncoding = {}));
var TtfPlatformID;
(function(TtfPlatformID2) {
  TtfPlatformID2[TtfPlatformID2["AppleUnicode"] = 0] = "AppleUnicode";
  TtfPlatformID2[TtfPlatformID2["Macintosh"] = 1] = "Macintosh";
  TtfPlatformID2[TtfPlatformID2["Iso"] = 2] = "Iso";
  TtfPlatformID2[TtfPlatformID2["Microsoft"] = 3] = "Microsoft";
})(TtfPlatformID || (TtfPlatformID = {}));
var TtfMicrosoftEncodingID;
(function(TtfMicrosoftEncodingID2) {
  TtfMicrosoftEncodingID2[TtfMicrosoftEncodingID2["Undefined"] = 0] = "Undefined";
  TtfMicrosoftEncodingID2[TtfMicrosoftEncodingID2["Unicode"] = 1] = "Unicode";
})(TtfMicrosoftEncodingID || (TtfMicrosoftEncodingID = {}));
var TtfMacintoshEncodingID;
(function(TtfMacintoshEncodingID2) {
  TtfMacintoshEncodingID2[TtfMacintoshEncodingID2["Roman"] = 0] = "Roman";
  TtfMacintoshEncodingID2[TtfMacintoshEncodingID2["Japanese"] = 1] = "Japanese";
  TtfMacintoshEncodingID2[TtfMacintoshEncodingID2["Chinese"] = 2] = "Chinese";
})(TtfMacintoshEncodingID || (TtfMacintoshEncodingID = {}));
var FontDescriptorFlags;
(function(FontDescriptorFlags2) {
  FontDescriptorFlags2[FontDescriptorFlags2["FixedPitch"] = 1] = "FixedPitch";
  FontDescriptorFlags2[FontDescriptorFlags2["Serif"] = 2] = "Serif";
  FontDescriptorFlags2[FontDescriptorFlags2["Symbolic"] = 4] = "Symbolic";
  FontDescriptorFlags2[FontDescriptorFlags2["Script"] = 8] = "Script";
  FontDescriptorFlags2[FontDescriptorFlags2["Nonsymbolic"] = 32] = "Nonsymbolic";
  FontDescriptorFlags2[FontDescriptorFlags2["Italic"] = 64] = "Italic";
  FontDescriptorFlags2[FontDescriptorFlags2["ForceBold"] = 262144] = "ForceBold";
})(FontDescriptorFlags || (FontDescriptorFlags = {}));
var TtfCompositeGlyphFlags;
(function(TtfCompositeGlyphFlags2) {
  TtfCompositeGlyphFlags2[TtfCompositeGlyphFlags2["Arg1And2AreWords"] = 1] = "Arg1And2AreWords";
  TtfCompositeGlyphFlags2[TtfCompositeGlyphFlags2["ArgsAreXyValues"] = 2] = "ArgsAreXyValues";
  TtfCompositeGlyphFlags2[TtfCompositeGlyphFlags2["RoundXyToGrid"] = 4] = "RoundXyToGrid";
  TtfCompositeGlyphFlags2[TtfCompositeGlyphFlags2["WeHaveScale"] = 8] = "WeHaveScale";
  TtfCompositeGlyphFlags2[TtfCompositeGlyphFlags2["Reserved"] = 16] = "Reserved";
  TtfCompositeGlyphFlags2[TtfCompositeGlyphFlags2["MoreComponents"] = 32] = "MoreComponents";
  TtfCompositeGlyphFlags2[TtfCompositeGlyphFlags2["WeHaveAnXyScale"] = 64] = "WeHaveAnXyScale";
  TtfCompositeGlyphFlags2[TtfCompositeGlyphFlags2["WeHaveTwoByTwo"] = 128] = "WeHaveTwoByTwo";
  TtfCompositeGlyphFlags2[TtfCompositeGlyphFlags2["WeHaveInstructions"] = 256] = "WeHaveInstructions";
  TtfCompositeGlyphFlags2[TtfCompositeGlyphFlags2["UseMyMetrics"] = 512] = "UseMyMetrics";
})(TtfCompositeGlyphFlags || (TtfCompositeGlyphFlags = {}));

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-string-format.js
var PdfStringFormat = (
  /** @class */
  function() {
    function PdfStringFormat2(arg1, arg2) {
      this.scalingFactor = 100;
      this.wordWrapType = PdfWordWrapType.Word;
      this.internalLineLimit = true;
      this.wordWrapType = PdfWordWrapType.Word;
      if (typeof arg1 !== "undefined" && typeof arg1 !== "string") {
        this.textAlignment = arg1;
      }
      if (typeof arg2 !== "undefined") {
        this.verticalAlignment = arg2;
      }
    }
    Object.defineProperty(PdfStringFormat2.prototype, "alignment", {
      //Properties
      /**
       * Gets or sets the `horizontal` text alignment
       * ```typescript
       * // create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // add a pages to the document
       * let page1 : PdfPage = document.pages.add();
       * // set font
       * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);
       * // set brush
       * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));
       * //
       * // set the format for string
       * let stringFormat : PdfStringFormat = new PdfStringFormat();
       * // set the text alignment
       * stringFormat.alignment = PdfTextAlignment.Center;
       * //
       * // draw the text
       * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);
       * // save the document
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this.textAlignment;
      },
      set: function(value) {
        this.textAlignment = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "textDirection", {
      get: function() {
        return this.direction;
      },
      set: function(value) {
        this.direction = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "lineAlignment", {
      /**
       * Gets or sets the `vertical` text alignment.
       * ```typescript
       * // create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // add a pages to the document
       * let page1 : PdfPage = document.pages.add();
       * // set font
       * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);
       * // set brush
       * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));
       * //
       * // set the format for string
       * let stringFormat : PdfStringFormat = new PdfStringFormat();
       * // set the vertical alignment
       * stringFormat.lineAlignment = PdfVerticalAlignment.Middle;
       * //
       * // draw the text
       * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);
       * // save the document
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        if (typeof this.verticalAlignment === "undefined" || this.verticalAlignment == null) {
          return PdfVerticalAlignment.Top;
        } else {
          return this.verticalAlignment;
        }
      },
      set: function(value) {
        this.verticalAlignment = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "rightToLeft", {
      /**
       * Gets or sets the value that indicates text `direction` mode.
       * @private
       */
      get: function() {
        if (typeof this.isRightToLeft === "undefined" || this.isRightToLeft == null) {
          return false;
        } else {
          return this.isRightToLeft;
        }
      },
      set: function(value) {
        this.isRightToLeft = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "characterSpacing", {
      /**
       * Gets or sets value that indicates a `size` among the characters in the text.
       * ```typescript
       * // create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // add a pages to the document
       * let page1 : PdfPage = document.pages.add();
       * // set font
       * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);
       * // set brush
       * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));
       * //
       * // set the format for string
       * let stringFormat : PdfStringFormat = new PdfStringFormat();
       * // set character spacing
       * stringFormat.characterSpacing = 10;
       * //
       * // draw the text
       * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);
       * // save the document
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        if (typeof this.internalCharacterSpacing === "undefined" || this.internalCharacterSpacing == null) {
          return 0;
        } else {
          return this.internalCharacterSpacing;
        }
      },
      set: function(value) {
        this.internalCharacterSpacing = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "wordSpacing", {
      /**
       * Gets or sets value that indicates a `size` among the words in the text.
       * ```typescript
       * // create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // add a pages to the document
       * let page1 : PdfPage = document.pages.add();
       * // set font
       * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);
       * // set brush
       * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));
       * //
       * // set the format for string
       * let stringFormat : PdfStringFormat = new PdfStringFormat();
       * // set word spacing
       * stringFormat.wordSpacing = 10;
       * //
       * // draw the text
       * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);
       * // save the document
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        if (typeof this.internalWordSpacing === "undefined" || this.internalWordSpacing == null) {
          return 0;
        } else {
          return this.internalWordSpacing;
        }
      },
      set: function(value) {
        this.internalWordSpacing = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "lineSpacing", {
      /**
       * Gets or sets value that indicates the `vertical distance` between the baselines of adjacent lines of text.
       * ```typescript
       * // create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // add a pages to the document
       * let page1 : PdfPage = document.pages.add();
       * // set font
       * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);
       * // set brush
       * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));
       * // set string
       * let text : string = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
       * incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitati';
       * // set rectangle bounds
       * let rectangle : RectangleF = new RectangleF({x : 0, y : 0}, {width : 300, height : 100})
       * //
       * // set the format for string
       * let stringFormat : PdfStringFormat = new PdfStringFormat();
       * // set line spacing
       * stringFormat.lineSpacing = 10;
       * //
       * // draw the text
       * page1.graphics.drawString(text, font, blackBrush, rectangle, stringFormat);
       * // save the document
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        if (typeof this.leading === "undefined" || this.leading == null) {
          return 0;
        } else {
          return this.leading;
        }
      },
      set: function(value) {
        this.leading = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "clipPath", {
      /**
       * Gets or sets a value indicating whether the text is `clipped` or not.
       * @private
       */
      get: function() {
        if (typeof this.clip === "undefined" || this.clip == null) {
          return false;
        } else {
          return this.clip;
        }
      },
      set: function(value) {
        this.clip = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "subSuperScript", {
      /**
       * Gets or sets value indicating whether the text is in `subscript or superscript` mode.
       * @private
       */
      get: function() {
        if (typeof this.pdfSubSuperScript === "undefined" || this.pdfSubSuperScript == null) {
          return PdfSubSuperScript.None;
        } else {
          return this.pdfSubSuperScript;
        }
      },
      set: function(value) {
        this.pdfSubSuperScript = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "paragraphIndent", {
      /**
       * Gets or sets the `indent` of the first line in the paragraph.
       * @private
       */
      get: function() {
        if (typeof this.internalParagraphIndent === "undefined" || this.internalParagraphIndent == null) {
          return 0;
        } else {
          return this.internalParagraphIndent;
        }
      },
      set: function(value) {
        this.internalParagraphIndent = value;
        this.firstLineIndent = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "lineLimit", {
      /**
       * Gets or sets a value indicating whether [`line limit`].
       * @private
       */
      get: function() {
        return this.internalLineLimit;
      },
      set: function(value) {
        this.internalLineLimit = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "measureTrailingSpaces", {
      /**
       * Gets or sets a value indicating whether [`measure trailing spaces`].
       * @private
       */
      get: function() {
        if (typeof this.trailingSpaces === "undefined" || this.trailingSpaces == null) {
          return false;
        } else {
          return this.trailingSpaces;
        }
      },
      set: function(value) {
        this.trailingSpaces = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "noClip", {
      /**
       * Gets or sets a value indicating whether [`no clip`].
       * @private
       */
      get: function() {
        if (typeof this.isNoClip === "undefined" || this.isNoClip == null) {
          return false;
        } else {
          return this.isNoClip;
        }
      },
      set: function(value) {
        this.isNoClip = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "wordWrap", {
      /**
       * Gets or sets value indicating type of the text `wrapping`.
       * @private
       */
      get: function() {
        return this.wordWrapType;
      },
      set: function(value) {
        this.wordWrapType = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "horizontalScalingFactor", {
      /**
       * Gets or sets the `scaling factor`.
       * @private
       */
      get: function() {
        return this.scalingFactor;
      },
      set: function(value) {
        if (value <= 0) {
          throw new Error("ArgumentOutOfRangeException:The scaling factor cant be less of equal to zero, ScalingFactor");
        }
        this.scalingFactor = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "firstLineIndent", {
      /**
       * Gets or sets the `indent` of the first line in the text.
       * @private
       */
      get: function() {
        if (typeof this.initialLineIndent === "undefined" || this.initialLineIndent == null) {
          return 0;
        } else {
          return this.initialLineIndent;
        }
      },
      set: function(value) {
        this.initialLineIndent = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfStringFormat2.prototype.clone = function() {
      var format = this;
      return format;
    };
    return PdfStringFormat2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/string-tokenizer.js
var StringTokenizer = (
  /** @class */
  function() {
    function StringTokenizer2(textValue) {
      this.currentPosition = 0;
      if (textValue == null) {
        throw new Error("ArgumentNullException:text");
      }
      this.text = textValue;
    }
    Object.defineProperty(StringTokenizer2.prototype, "length", {
      // Properties
      /**
       * Gets text `length`.
       * @private
       */
      get: function() {
        return this.text.length;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(StringTokenizer2.prototype, "end", {
      get: function() {
        return this.currentPosition === this.text.length;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(StringTokenizer2.prototype, "position", {
      /**
       * Gets or sets the position.
       * @private
       */
      get: function() {
        return this.currentPosition;
      },
      set: function(value) {
        this.currentPosition = value;
      },
      enumerable: true,
      configurable: true
    });
    StringTokenizer2.getCharsCount = function(text, symbols) {
      if (typeof symbols === "string") {
        if (text == null) {
          throw new Error("ArgumentNullException:wholeText");
        }
        var numSymbols = 0;
        var curIndex = 0;
        for (; ; ) {
          curIndex = text.indexOf(symbols, curIndex);
          if (curIndex === -1) {
            break;
          } else {
            numSymbols++;
            curIndex++;
          }
        }
        return numSymbols;
      } else {
        if (text == null) {
          throw new Error("ArgumentNullException:text");
        }
        if (symbols == null) {
          throw new Error("ArgumentNullException:symbols");
        }
        var count = 0;
        for (var i = 0, len = text.length; i < len; i++) {
          var ch = text[i];
          if (this.contains(symbols, ch)) {
            count++;
          }
        }
        return count;
      }
    };
    StringTokenizer2.prototype.readLine = function() {
      var pos = this.currentPosition;
      while (pos < this.length) {
        var ch = this.text[pos];
        switch (ch) {
          case "\r":
          case "\n": {
            var text = this.text.substr(this.currentPosition, pos - this.currentPosition);
            this.currentPosition = pos + 1;
            if (ch === "\r" && this.currentPosition < this.length && this.text[this.currentPosition] === "\n") {
              this.currentPosition++;
            }
            return text;
          }
        }
        pos++;
      }
      if (pos > this.currentPosition) {
        var text2 = this.text.substr(this.currentPosition, pos - this.currentPosition);
        this.currentPosition = pos;
        return text2;
      }
      return null;
    };
    StringTokenizer2.prototype.peekLine = function() {
      var pos = this.currentPosition;
      var line = this.readLine();
      this.currentPosition = pos;
      return line;
    };
    StringTokenizer2.prototype.readWord = function() {
      var pos = this.currentPosition;
      while (pos < this.length) {
        var ch = this.text[pos];
        switch (ch) {
          case "\r":
          case "\n":
            var textValue = this.text.substr(this.currentPosition, pos - this.currentPosition);
            this.currentPosition = pos + 1;
            if (ch === "\r" && this.currentPosition < this.length && this.text[this.currentPosition] === "\n") {
              this.currentPosition++;
            }
            return textValue;
          case " ":
          case "	": {
            if (pos === this.currentPosition) {
              pos++;
            }
            var text = this.text.substr(this.currentPosition, pos - this.currentPosition);
            this.currentPosition = pos;
            return text;
          }
        }
        pos++;
      }
      if (pos > this.currentPosition) {
        var text2 = this.text.substr(this.currentPosition, pos - this.currentPosition);
        this.currentPosition = pos;
        return text2;
      }
      return null;
    };
    StringTokenizer2.prototype.peekWord = function() {
      var pos = this.currentPosition;
      var word = this.readWord();
      this.currentPosition = pos;
      return word;
    };
    StringTokenizer2.prototype.read = function(count) {
      if (typeof count === "undefined") {
        var ch = "0";
        if (!this.end) {
          ch = this.text[this.currentPosition];
          this.currentPosition++;
        }
        return ch;
      } else {
        var num = 0;
        var builder = "";
        while (!this.end && num < count) {
          var ch = this.read();
          builder = builder + ch;
          num++;
        }
        return builder;
      }
    };
    StringTokenizer2.prototype.peek = function() {
      var ch = "0";
      if (!this.end) {
        ch = this.text[this.currentPosition];
      }
      return ch;
    };
    StringTokenizer2.prototype.close = function() {
      this.text = null;
    };
    StringTokenizer2.prototype.readToEnd = function() {
      var text;
      if (this.currentPosition === 0) {
        text = this.text;
      } else {
        text = this.text.substr(this.currentPosition, this.length - this.currentPosition);
      }
      this.currentPosition = this.length;
      return text;
    };
    StringTokenizer2.contains = function(array, symbol) {
      var contains = false;
      for (var i = 0; i < array.length; i++) {
        if (array[i] === symbol) {
          contains = true;
          break;
        }
      }
      return contains;
    };
    StringTokenizer2.whiteSpace = " ";
    StringTokenizer2.tab = "	";
    StringTokenizer2.spaces = [StringTokenizer2.whiteSpace, StringTokenizer2.tab];
    StringTokenizer2.whiteSpacePattern = "^[ 	]+$";
    return StringTokenizer2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/string-layouter.js
var PdfStringLayouter = (
  /** @class */
  function() {
    function PdfStringLayouter2() {
      this.isOverloadWithPosition = false;
    }
    PdfStringLayouter2.prototype.layout = function(arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
      if (arg4 instanceof RectangleF) {
        this.initialize(arg1, arg2, arg3, arg4, arg5);
        this.isOverloadWithPosition = arg6;
        this.clientSize = arg7;
        var result = this.doLayout();
        this.clear();
        return result;
      } else {
        this.initialize(arg1, arg2, arg3, arg4);
        this.isOverloadWithPosition = arg5;
        this.clientSize = arg6;
        var result = this.doLayout();
        this.clear();
        return result;
      }
    };
    PdfStringLayouter2.prototype.initialize = function(text, font, format, rectSize, pageHeight) {
      if (typeof pageHeight === "number") {
        if (text == null) {
          throw new Error("ArgumentNullException:text");
        }
        if (font == null) {
          throw new Error("ArgumentNullException:font");
        }
        this.text = text;
        this.font = font;
        this.format = format;
        this.size = new SizeF(rectSize.width, rectSize.height);
        this.rectangle = rectSize;
        this.pageHeight = pageHeight;
        this.reader = new StringTokenizer(text);
      } else {
        this.initialize(text, font, format, new RectangleF(new PointF(0, 0), rectSize), 0);
      }
    };
    PdfStringLayouter2.prototype.clear = function() {
      this.font = null;
      this.format = null;
      this.reader.close();
      this.reader = null;
      this.text = null;
    };
    PdfStringLayouter2.prototype.doLayout = function() {
      var result = new PdfStringLayoutResult();
      var lineResult = new PdfStringLayoutResult();
      var lines = [];
      var line = this.reader.peekLine();
      var lineIndent = this.getLineIndent(true);
      while (line != null) {
        lineResult = this.layoutLine(line, lineIndent);
        if (lineResult !== null || typeof lineResult !== "undefined") {
          var numSymbolsInserted = 0;
          var returnedValue = this.copyToResult(
            result,
            lineResult,
            lines,
            /*out*/
            numSymbolsInserted
          );
          var success = returnedValue.success;
          numSymbolsInserted = returnedValue.numInserted;
          if (!success) {
            this.reader.read(numSymbolsInserted);
            break;
          }
        }
        this.reader.readLine();
        line = this.reader.peekLine();
        lineIndent = this.getLineIndent(false);
      }
      this.finalizeResult(result, lines);
      return result;
    };
    PdfStringLayouter2.prototype.getLineIndent = function(firstLine) {
      var lineIndent = 0;
      if (this.format != null) {
        lineIndent = firstLine ? this.format.firstLineIndent : this.format.paragraphIndent;
        lineIndent = this.size.width > 0 ? Math.min(this.size.width, lineIndent) : lineIndent;
      }
      return lineIndent;
    };
    PdfStringLayouter2.prototype.getLineHeight = function() {
      var height = this.font.height;
      if (this.format != null && this.format.lineSpacing !== 0) {
        height = this.format.lineSpacing + this.font.height;
      }
      return height;
    };
    PdfStringLayouter2.prototype.getLineWidth = function(line) {
      var width = this.font.getLineWidth(line, this.format);
      return width;
    };
    PdfStringLayouter2.prototype.layoutLine = function(line, lineIndent) {
      var lineResult = new PdfStringLayoutResult();
      lineResult.layoutLineHeight = this.getLineHeight();
      var lines = [];
      var maxWidth2 = this.size.width;
      var lineWidth = this.getLineWidth(line) + lineIndent;
      var lineType = LineType.FirstParagraphLine;
      var readWord = true;
      if (maxWidth2 <= 0 || Math.round(lineWidth) <= Math.round(maxWidth2)) {
        this.addToLineResult(lineResult, lines, line, lineWidth, LineType.NewLineBreak | lineType);
      } else {
        var builder = "";
        var curLine = "";
        lineWidth = lineIndent;
        var curIndent = lineIndent;
        var reader = new StringTokenizer(line);
        var word = reader.peekWord();
        var isSingleWord = false;
        if (word.length !== reader.length) {
          if (word === " ") {
            curLine = curLine + word;
            builder = builder + word;
            reader.position += 1;
            word = reader.peekWord();
          }
        }
        while (word != null) {
          curLine = curLine + word;
          var curLineWidth = this.getLineWidth(curLine.toString()) + curIndent;
          if (curLine.toString() === " ") {
            curLine = "";
            curLineWidth = 0;
          }
          if (curLineWidth > maxWidth2) {
            if (this.getWrapType() === PdfWordWrapType.None) {
              break;
            }
            if (curLine.length === word.length) {
              if (this.getWrapType() === PdfWordWrapType.WordOnly) {
                lineResult.textRemainder = line.substring(reader.position);
                break;
              } else if (curLine.length === 1) {
                builder = builder + word;
                break;
              } else {
                readWord = false;
                curLine = "";
                word = reader.peek().toString();
                continue;
              }
            } else {
              if (this.getLineWidth(word.toString()) > maxWidth2) {
                this.format.wordWrap = PdfWordWrapType.Character;
              } else {
                if (typeof this.format !== "undefined" && this.format !== null) {
                  this.format.wordWrap = PdfWordWrapType.Word;
                }
              }
              if (this.getWrapType() !== PdfWordWrapType.Character || !readWord) {
                var ln = builder.toString();
                if (ln !== " ") {
                  this.addToLineResult(lineResult, lines, ln, lineWidth, LineType.LayoutBreak | lineType);
                }
                if (this.isOverloadWithPosition) {
                  maxWidth2 = this.clientSize.width;
                }
                curLine = "";
                builder = "";
                lineWidth = 0;
                curIndent = 0;
                curLineWidth = 0;
                lineType = LineType.None;
                word = readWord ? word : reader.peekWord();
                readWord = true;
              } else {
                readWord = false;
                curLine = "";
                curLine = curLine + builder.toString();
                word = reader.peek().toString();
              }
              continue;
            }
          }
          builder = builder + word;
          lineWidth = curLineWidth;
          if (readWord) {
            reader.readWord();
            word = reader.peekWord();
          } else {
            reader.read();
            word = reader.peek().toString();
          }
        }
        if (builder.length > 0) {
          var ln = builder.toString();
          this.addToLineResult(lineResult, lines, ln, lineWidth, LineType.NewLineBreak | LineType.LastParagraphLine);
        }
        reader.close();
      }
      lineResult.layoutLines = [];
      for (var index = 0; index < lines.length; index++) {
        lineResult.layoutLines.push(lines[index]);
      }
      lines = [];
      return lineResult;
    };
    PdfStringLayouter2.prototype.addToLineResult = function(lineResult, lines, line, lineWidth, breakType) {
      var info = new LineInfo();
      info.text = line;
      info.width = lineWidth;
      info.lineType = breakType;
      lines.push(info);
      var size = lineResult.actualSize;
      size.height += this.getLineHeight();
      size.width = Math.max(size.width, lineWidth);
      lineResult.size = size;
    };
    PdfStringLayouter2.prototype.copyToResult = function(result, lineResult, lines, numInserted) {
      var success = true;
      var allowPartialLines = this.format != null && !this.format.lineLimit;
      var height = result.actualSize.height;
      var maxHeight2 = this.size.height;
      if (this.pageHeight > 0 && maxHeight2 + this.rectangle.y > this.pageHeight) {
        maxHeight2 = this.rectangle.y - this.pageHeight;
        maxHeight2 = Math.max(maxHeight2, -maxHeight2);
      }
      numInserted = 0;
      if (lineResult.lines != null) {
        for (var i = 0, len = lineResult.lines.length; i < len; i++) {
          var expHeight = height + lineResult.lineHeight;
          if (expHeight <= maxHeight2 || maxHeight2 <= 0 || allowPartialLines) {
            var info = lineResult.lines[i];
            numInserted += info.text.length;
            info = this.trimLine(info, lines.length === 0);
            lines.push(info);
            var size = result.actualSize;
            size.width = Math.max(size.width, info.width);
            result.size = size;
            height = expHeight;
          } else {
            success = false;
            break;
          }
        }
      }
      if (height != result.size.height) {
        var size1 = result.actualSize;
        size1.height = height;
        result.size = size1;
      }
      return {
        success,
        numInserted
      };
    };
    PdfStringLayouter2.prototype.finalizeResult = function(result, lines) {
      result.layoutLines = [];
      for (var index = 0; index < lines.length; index++) {
        result.layoutLines.push(lines[index]);
      }
      result.layoutLineHeight = this.getLineHeight();
      if (!this.reader.end) {
        result.textRemainder = this.reader.readToEnd();
      }
      lines = [];
    };
    PdfStringLayouter2.prototype.trimLine = function(info, firstLine) {
      var line = info.text;
      var lineWidth = info.width;
      var trimStartSpaces = (info.lineType & LineType.FirstParagraphLine) === 0;
      var start = this.format == null || !this.format.rightToLeft;
      var spaces = StringTokenizer.spaces;
      line = start ? line.trim() : line.trim();
      if (line.length !== info.text.length) {
        lineWidth = this.getLineWidth(line);
        if ((info.lineType & LineType.FirstParagraphLine) > 0) {
          lineWidth += this.getLineIndent(firstLine);
        }
      }
      info.text = line;
      info.width = lineWidth;
      return info;
    };
    PdfStringLayouter2.prototype.getWrapType = function() {
      var wrapType = this.format != null ? this.format.wordWrap : PdfWordWrapType.Word;
      return wrapType;
    };
    return PdfStringLayouter2;
  }()
);
var PdfStringLayoutResult = (
  /** @class */
  function() {
    function PdfStringLayoutResult2() {
    }
    Object.defineProperty(PdfStringLayoutResult2.prototype, "remainder", {
      // Properties
      /**
       * Gets the `text` which is not lay outed.
       * @private
       */
      get: function() {
        return this.textRemainder;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringLayoutResult2.prototype, "actualSize", {
      /**
       * Gets the actual layout text `bounds`.
       * @private
       */
      get: function() {
        if (typeof this.size === "undefined") {
          this.size = new SizeF(0, 0);
        }
        return this.size;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringLayoutResult2.prototype, "lines", {
      /**
       * Gets layout `lines` information.
       * @private
       */
      get: function() {
        return this.layoutLines;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringLayoutResult2.prototype, "lineHeight", {
      /**
       * Gets the `height` of the line.
       * @private
       */
      get: function() {
        return this.layoutLineHeight;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringLayoutResult2.prototype, "empty", {
      /**
       * Gets value that indicates whether any layout text [`empty`].
       * @private
       */
      get: function() {
        return this.layoutLines == null || this.layoutLines.length === 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringLayoutResult2.prototype, "lineCount", {
      /**
       * Gets `number of` the layout lines.
       * @private
       */
      get: function() {
        var count = !this.empty ? this.layoutLines.length : 0;
        return count;
      },
      enumerable: true,
      configurable: true
    });
    return PdfStringLayoutResult2;
  }()
);
var LineInfo = (
  /** @class */
  function() {
    function LineInfo2() {
    }
    Object.defineProperty(LineInfo2.prototype, "lineType", {
      //Properties
      /**
       * Gets the `type` of the line text.
       * @private
       */
      get: function() {
        return this.type;
      },
      set: function(value) {
        this.type = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(LineInfo2.prototype, "text", {
      /**
       * Gets the line `text`.
       * @private
       */
      get: function() {
        return this.content;
      },
      set: function(value) {
        this.content = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(LineInfo2.prototype, "width", {
      /**
       * Gets `width` of the line text.
       * @private
       */
      get: function() {
        return this.lineWidth;
      },
      set: function(value) {
        this.lineWidth = value;
      },
      enumerable: true,
      configurable: true
    });
    return LineInfo2;
  }()
);
var LineType;
(function(LineType2) {
  LineType2[LineType2["None"] = 0] = "None";
  LineType2[LineType2["NewLineBreak"] = 1] = "NewLineBreak";
  LineType2[LineType2["LayoutBreak"] = 2] = "LayoutBreak";
  LineType2[LineType2["FirstParagraphLine"] = 4] = "FirstParagraphLine";
  LineType2[LineType2["LastParagraphLine"] = 8] = "LastParagraphLine";
})(LineType || (LineType = {}));

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/enum.js
var PdfPageOrientation;
(function(PdfPageOrientation2) {
  PdfPageOrientation2[PdfPageOrientation2["Portrait"] = 0] = "Portrait";
  PdfPageOrientation2[PdfPageOrientation2["Landscape"] = 1] = "Landscape";
})(PdfPageOrientation || (PdfPageOrientation = {}));
var PdfPageRotateAngle;
(function(PdfPageRotateAngle2) {
  PdfPageRotateAngle2[PdfPageRotateAngle2["RotateAngle0"] = 0] = "RotateAngle0";
  PdfPageRotateAngle2[PdfPageRotateAngle2["RotateAngle90"] = 1] = "RotateAngle90";
  PdfPageRotateAngle2[PdfPageRotateAngle2["RotateAngle180"] = 2] = "RotateAngle180";
  PdfPageRotateAngle2[PdfPageRotateAngle2["RotateAngle270"] = 3] = "RotateAngle270";
})(PdfPageRotateAngle || (PdfPageRotateAngle = {}));
var PdfNumberStyle;
(function(PdfNumberStyle2) {
  PdfNumberStyle2[PdfNumberStyle2["None"] = 0] = "None";
  PdfNumberStyle2[PdfNumberStyle2["Numeric"] = 1] = "Numeric";
  PdfNumberStyle2[PdfNumberStyle2["LowerLatin"] = 2] = "LowerLatin";
  PdfNumberStyle2[PdfNumberStyle2["LowerRoman"] = 3] = "LowerRoman";
  PdfNumberStyle2[PdfNumberStyle2["UpperLatin"] = 4] = "UpperLatin";
  PdfNumberStyle2[PdfNumberStyle2["UpperRoman"] = 5] = "UpperRoman";
})(PdfNumberStyle || (PdfNumberStyle = {}));
var PdfDockStyle;
(function(PdfDockStyle2) {
  PdfDockStyle2[PdfDockStyle2["None"] = 0] = "None";
  PdfDockStyle2[PdfDockStyle2["Bottom"] = 1] = "Bottom";
  PdfDockStyle2[PdfDockStyle2["Top"] = 2] = "Top";
  PdfDockStyle2[PdfDockStyle2["Left"] = 3] = "Left";
  PdfDockStyle2[PdfDockStyle2["Right"] = 4] = "Right";
  PdfDockStyle2[PdfDockStyle2["Fill"] = 5] = "Fill";
})(PdfDockStyle || (PdfDockStyle = {}));
var PdfAlignmentStyle;
(function(PdfAlignmentStyle2) {
  PdfAlignmentStyle2[PdfAlignmentStyle2["None"] = 0] = "None";
  PdfAlignmentStyle2[PdfAlignmentStyle2["TopLeft"] = 1] = "TopLeft";
  PdfAlignmentStyle2[PdfAlignmentStyle2["TopCenter"] = 2] = "TopCenter";
  PdfAlignmentStyle2[PdfAlignmentStyle2["TopRight"] = 3] = "TopRight";
  PdfAlignmentStyle2[PdfAlignmentStyle2["MiddleLeft"] = 4] = "MiddleLeft";
  PdfAlignmentStyle2[PdfAlignmentStyle2["MiddleCenter"] = 5] = "MiddleCenter";
  PdfAlignmentStyle2[PdfAlignmentStyle2["MiddleRight"] = 6] = "MiddleRight";
  PdfAlignmentStyle2[PdfAlignmentStyle2["BottomLeft"] = 7] = "BottomLeft";
  PdfAlignmentStyle2[PdfAlignmentStyle2["BottomCenter"] = 8] = "BottomCenter";
  PdfAlignmentStyle2[PdfAlignmentStyle2["BottomRight"] = 9] = "BottomRight";
})(PdfAlignmentStyle || (PdfAlignmentStyle = {}));
var TemplateType;
(function(TemplateType2) {
  TemplateType2[TemplateType2["None"] = 0] = "None";
  TemplateType2[TemplateType2["Top"] = 1] = "Top";
  TemplateType2[TemplateType2["Bottom"] = 2] = "Bottom";
  TemplateType2[TemplateType2["Left"] = 3] = "Left";
  TemplateType2[TemplateType2["Right"] = 4] = "Right";
})(TemplateType || (TemplateType = {}));

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-page-size.js
var PdfPageSize = (
  /** @class */
  function() {
    function PdfPageSize2() {
    }
    PdfPageSize2.letter = new SizeF(612, 792);
    PdfPageSize2.note = new SizeF(540, 720);
    PdfPageSize2.legal = new SizeF(612, 1008);
    PdfPageSize2.a0 = new SizeF(2380, 3368);
    PdfPageSize2.a1 = new SizeF(1684, 2380);
    PdfPageSize2.a2 = new SizeF(1190, 1684);
    PdfPageSize2.a3 = new SizeF(842, 1190);
    PdfPageSize2.a4 = new SizeF(595, 842);
    PdfPageSize2.a5 = new SizeF(421, 595);
    PdfPageSize2.a6 = new SizeF(297, 421);
    PdfPageSize2.a7 = new SizeF(210, 297);
    PdfPageSize2.a8 = new SizeF(148, 210);
    PdfPageSize2.a9 = new SizeF(105, 148);
    PdfPageSize2.a10 = new SizeF(74, 105);
    PdfPageSize2.b0 = new SizeF(2836, 4008);
    PdfPageSize2.b1 = new SizeF(2004, 2836);
    PdfPageSize2.b2 = new SizeF(1418, 2004);
    PdfPageSize2.b3 = new SizeF(1002, 1418);
    PdfPageSize2.b4 = new SizeF(709, 1002);
    PdfPageSize2.b5 = new SizeF(501, 709);
    PdfPageSize2.archE = new SizeF(2592, 3456);
    PdfPageSize2.archD = new SizeF(1728, 2592);
    PdfPageSize2.archC = new SizeF(1296, 1728);
    PdfPageSize2.archB = new SizeF(864, 1296);
    PdfPageSize2.archA = new SizeF(648, 864);
    PdfPageSize2.flsa = new SizeF(612, 936);
    PdfPageSize2.halfLetter = new SizeF(396, 612);
    PdfPageSize2.letter11x17 = new SizeF(792, 1224);
    PdfPageSize2.ledger = new SizeF(1224, 792);
    return PdfPageSize2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-margins.js
var PdfMargins = (
  /** @class */
  function() {
    function PdfMargins2() {
      this.pdfMargin = 40;
      this.setMargins(this.pdfMargin);
    }
    Object.defineProperty(PdfMargins2.prototype, "left", {
      //Properties
      /**
       * Gets or sets the `left margin` size.
       * @private
       */
      get: function() {
        return this.leftMargin;
      },
      set: function(value) {
        this.leftMargin = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfMargins2.prototype, "top", {
      /**
       * Gets or sets the `top margin` size.
       * @private
       */
      get: function() {
        return this.topMargin;
      },
      set: function(value) {
        this.topMargin = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfMargins2.prototype, "right", {
      /**
       * Gets or sets the `right margin` size.
       * @private
       */
      get: function() {
        return this.rightMargin;
      },
      set: function(value) {
        this.rightMargin = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfMargins2.prototype, "bottom", {
      /**
       * Gets or sets the `bottom margin` size.
       * @private
       */
      get: function() {
        return this.bottomMargin;
      },
      set: function(value) {
        this.bottomMargin = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfMargins2.prototype, "all", {
      /**
       * Sets the `margins`.
       * @private
       */
      set: function(value) {
        this.setMargins(value);
      },
      enumerable: true,
      configurable: true
    });
    PdfMargins2.prototype.setMargins = function(margin1, margin2, margin3, margin4) {
      if (typeof margin2 === "undefined") {
        this.leftMargin = this.topMargin = this.rightMargin = this.bottomMargin = margin1;
      } else {
        if (typeof margin3 === "undefined") {
          this.leftMargin = this.rightMargin = margin1;
          this.bottomMargin = this.topMargin = margin2;
        } else {
          this.leftMargin = margin1;
          this.topMargin = margin2;
          this.rightMargin = margin3;
          this.bottomMargin = margin4;
        }
      }
    };
    PdfMargins2.prototype.clone = function() {
      return this;
    };
    return PdfMargins2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-page-settings.js
var PdfPageSettings = (
  /** @class */
  function() {
    function PdfPageSettings2(margins) {
      this.pageMargins = new PdfMargins();
      this.pageSize = PdfPageSize.a4;
      this.rotateAngle = PdfPageRotateAngle.RotateAngle0;
      this.pageOrientation = PdfPageOrientation.Portrait;
      this.pageOrigin = new PointF(0, 0);
      this.isRotation = false;
      if (typeof margins === "number") {
        this.pageMargins.setMargins(margins);
      }
    }
    Object.defineProperty(PdfPageSettings2.prototype, "size", {
      //Properties
      /**
       * Gets or sets the `size` of the page.
       * @private
       */
      get: function() {
        return this.pageSize;
      },
      set: function(value) {
        this.setSize(value);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageSettings2.prototype, "orientation", {
      /**
       * Gets or sets the page `orientation`.
       * @private
       */
      get: function() {
        return this.pageOrientation;
      },
      set: function(orientation) {
        if (this.pageOrientation !== orientation) {
          this.pageOrientation = orientation;
          this.updateSize(orientation);
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageSettings2.prototype, "margins", {
      /**
       * Gets or sets the `margins` of the page.
       * @private
       */
      get: function() {
        return this.pageMargins;
      },
      set: function(value) {
        this.pageMargins = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageSettings2.prototype, "width", {
      /**
       * Gets or sets the `width` of the page.
       * @private
       */
      get: function() {
        return this.pageSize.width;
      },
      set: function(value) {
        this.pageSize.width = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageSettings2.prototype, "height", {
      /**
       * Gets or sets the `height` of the page.
       * @private
       */
      get: function() {
        return this.pageSize.height;
      },
      set: function(value) {
        this.pageSize.height = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageSettings2.prototype, "origin", {
      /**
       * Gets or sets the `origin` of the page.
       * @private
       */
      get: function() {
        return this.pageOrigin;
      },
      set: function(value) {
        this.pageOrigin = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageSettings2.prototype, "rotate", {
      /**
       * Gets or sets the number of degrees by which the page should be `rotated` clockwise when displayed or printed.
       * @private
       */
      get: function() {
        return this.rotateAngle;
      },
      set: function(value) {
        this.rotateAngle = value;
        this.isRotation = true;
      },
      enumerable: true,
      configurable: true
    });
    PdfPageSettings2.prototype.updateSize = function(orientation) {
      var min = Math.min(this.pageSize.width, this.pageSize.height);
      var max = Math.max(this.pageSize.width, this.pageSize.height);
      switch (orientation) {
        case PdfPageOrientation.Portrait:
          this.pageSize = new SizeF(min, max);
          break;
        case PdfPageOrientation.Landscape:
          this.pageSize = new SizeF(max, min);
          break;
      }
    };
    PdfPageSettings2.prototype.clone = function() {
      var settings = this;
      settings.pageMargins = this.pageMargins.clone();
      return settings;
    };
    PdfPageSettings2.prototype.getActualSize = function() {
      var width = this.width - (this.margins.left + this.margins.right);
      var height = this.height - (this.margins.top + this.margins.bottom);
      var size = new SizeF(width, height);
      return size;
    };
    PdfPageSettings2.prototype.setSize = function(size) {
      var min = Math.min(size.width, size.height);
      var max = Math.max(size.width, size.height);
      if (this.orientation === PdfPageOrientation.Portrait) {
        this.pageSize = new SizeF(min, max);
      } else {
        this.pageSize = new SizeF(max, min);
      }
    };
    return PdfPageSettings2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-pen.js
var PdfPen = (
  /** @class */
  function() {
    function PdfPen2(arg1, arg2) {
      this.pdfColor = new PdfColor(0, 0, 0);
      this.dashOffsetValue = 0;
      this.penDashPattern = [0];
      this.pdfDashStyle = PdfDashStyle.Solid;
      this.pdfLineCap = 0;
      this.pdfLineJoin = 0;
      this.penWidth = 1;
      this.internalMiterLimit = 0;
      this.colorSpace = PdfColorSpace.Rgb;
      if (arg1 instanceof PdfBrush) {
        this.setBrush(arg1);
      } else if (arg1 instanceof PdfColor) {
        this.color = arg1;
      }
      if (typeof arg2 === "number") {
        this.width = arg2;
      }
    }
    Object.defineProperty(PdfPen2.prototype, "color", {
      //Properties
      /**
       * Gets or sets the `color of the pen`.
       * @private
       */
      get: function() {
        return this.pdfColor;
      },
      set: function(value) {
        this.pdfColor = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPen2.prototype, "dashOffset", {
      /**
       * Gets or sets the `dash offset of the pen`.
       * @private
       */
      get: function() {
        if (typeof this.dashOffsetValue === "undefined" || this.dashOffsetValue == null) {
          return 0;
        } else {
          return this.dashOffsetValue;
        }
      },
      set: function(value) {
        this.dashOffsetValue = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPen2.prototype, "dashPattern", {
      /**
       * Gets or sets the `dash pattern of the pen`.
       * @private
       */
      get: function() {
        return this.penDashPattern;
      },
      set: function(value) {
        this.penDashPattern = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPen2.prototype, "dashStyle", {
      /**
       * Gets or sets the `dash style of the pen`.
       * ```typescript
       * // create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // create a new page
       * let page1 : PdfPage = document.pages.add();
       * // set pen
       * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));
       * //
       * // set pen style
       * pen.dashStyle = PdfDashStyle.DashDot;
       * // get pen style
       * let style : PdfDashStyle = pen.dashStyle;
       * //
       * // draw rectangle
       * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));
       * // save the document.
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this.pdfDashStyle;
      },
      set: function(value) {
        if (this.pdfDashStyle !== value) {
          this.pdfDashStyle = value;
          switch (this.pdfDashStyle) {
            case PdfDashStyle.Custom:
              break;
            case PdfDashStyle.Dash:
              this.penDashPattern = [3, 1];
              break;
            case PdfDashStyle.Dot:
              this.penDashPattern = [1, 1];
              break;
            case PdfDashStyle.DashDot:
              this.penDashPattern = [3, 1, 1, 1];
              break;
            case PdfDashStyle.DashDotDot:
              this.penDashPattern = [3, 1, 1, 1, 1, 1];
              break;
            case PdfDashStyle.Solid:
              break;
            default:
              this.pdfDashStyle = PdfDashStyle.Solid;
              this.penDashPattern = [0];
              break;
          }
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPen2.prototype, "lineCap", {
      /**
       * Gets or sets the `line cap of the pen`.
       * @private
       */
      get: function() {
        return this.pdfLineCap;
      },
      set: function(value) {
        this.pdfLineCap = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPen2.prototype, "lineJoin", {
      /**
       * Gets or sets the `line join style of the pen`.
       * @private
       */
      get: function() {
        return this.pdfLineJoin;
      },
      set: function(value) {
        this.pdfLineJoin = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPen2.prototype, "miterLimit", {
      /**
       * Gets or sets the `miter limit`.
       * @private
       */
      get: function() {
        return this.internalMiterLimit;
      },
      set: function(value) {
        this.internalMiterLimit = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPen2.prototype, "width", {
      /**
       * Gets or sets the `width of the pen`.
       * ```typescript
       * // create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // create a new page
       * let page1 : PdfPage = document.pages.add();
       * // set pen
       * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));
       * //
       * // set pen width
       * pen.width = 2;
       * //
       * // draw rectangle
       * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));
       * // save the document.
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this.penWidth;
      },
      set: function(value) {
        this.penWidth = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfPen2.prototype.clone = function() {
      var pen = this;
      return pen;
    };
    PdfPen2.prototype.setBrush = function(brush) {
      var sBrush = brush;
      if (sBrush != null && sBrush instanceof PdfSolidBrush) {
        this.color = sBrush.color;
        this.pdfBrush = sBrush;
      }
      this.color = sBrush.color;
      this.pdfBrush = sBrush;
    };
    PdfPen2.prototype.monitorChanges = function(currentPen, streamWriter, getResources, saveState, currentColorSpace, matrix) {
      var diff = false;
      saveState = true;
      if (currentPen == null) {
        diff = true;
      }
      diff = this.dashControl(currentPen, saveState, streamWriter);
      streamWriter.setLineWidth(this.width);
      streamWriter.setLineJoin(this.lineJoin);
      streamWriter.setLineCap(this.lineCap);
      var miterLimit = this.miterLimit;
      if (miterLimit > 0) {
        streamWriter.setMiterLimit(miterLimit);
        diff = true;
      }
      var brush = this.pdfBrush;
      streamWriter.setColorAndSpace(this.color, currentColorSpace, true);
      diff = true;
      return diff;
    };
    PdfPen2.prototype.dashControl = function(pen, saveState, streamWriter) {
      saveState = true;
      var lineWidth = this.width;
      var pattern = this.getPattern();
      streamWriter.setLineDashPattern(pattern, this.dashOffset * lineWidth);
      return saveState;
    };
    PdfPen2.prototype.getPattern = function() {
      var pattern = this.dashPattern;
      for (var i = 0; i < pattern.length; ++i) {
        pattern[i] *= this.width;
      }
      return pattern;
    };
    return PdfPen2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/unit-convertor.js
var PdfUnitConverter = (
  /** @class */
  function() {
    function PdfUnitConverter2(dpi) {
      this.updateProportionsHelper(dpi);
    }
    PdfUnitConverter2.prototype.convertUnits = function(value, from, to) {
      return this.convertFromPixels(this.convertToPixels(value, from), to);
    };
    PdfUnitConverter2.prototype.convertToPixels = function(value, from) {
      var index = from;
      var result = value * this.proportions[index];
      return result;
    };
    PdfUnitConverter2.prototype.convertFromPixels = function(value, to) {
      var index = to;
      var result = value / this.proportions[index];
      return result;
    };
    PdfUnitConverter2.prototype.updateProportionsHelper = function(pixelPerInch) {
      this.proportions = [
        pixelPerInch / 2.54,
        pixelPerInch / 6,
        1,
        pixelPerInch / 72,
        pixelPerInch,
        pixelPerInch / 300,
        pixelPerInch / 25.4
        // Millimeter
      ];
    };
    PdfUnitConverter2.horizontalResolution = 96;
    PdfUnitConverter2.verticalResolution = 96;
    return PdfUnitConverter2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/images/pdf-image.js
var PdfImage = (
  /** @class */
  function() {
    function PdfImage2() {
    }
    Object.defineProperty(PdfImage2.prototype, "width", {
      /**
       * Gets and Sets the `width` of an image.
       * @private
       */
      get: function() {
        return this.imageWidth;
      },
      set: function(value) {
        this.imageWidth = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfImage2.prototype, "height", {
      /**
       * Gets and Sets the `height` of an image.
       * @private
       */
      get: function() {
        return this.imageHeight;
      },
      set: function(value) {
        this.imageHeight = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfImage2.prototype, "size", {
      /**
       * Gets or sets the size of the image.
       * @private
       */
      set: function(value) {
        this.width = value.width;
        this.height = value.height;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfImage2.prototype, "physicalDimension", {
      /**
       * Gets the `physical dimension` of an image.
       * @private
       */
      get: function() {
        this.imagePhysicalDimension = this.getPointSize(this.width, this.height, this.horizontalResolution, this.verticalResolution);
        return new SizeF(this.width, this.height);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfImage2.prototype, "element", {
      // /**
      //  * Gets the `image stream as string`.
      //  * @private
      //  */
      // public static fromString(string : string) : PdfImage {
      //     let image : PdfImage = new PdfBitmap(string);
      //     return image;
      // }
      /**
       * Gets the `element` image stream.
       * @private
       */
      get: function() {
        return this.imageStream;
      },
      enumerable: true,
      configurable: true
    });
    PdfImage2.prototype.getPointSize = function(width, height, horizontalResolution, verticalResolution) {
      if (typeof horizontalResolution === "undefined") {
        var dpiX = PdfUnitConverter.horizontalResolution;
        var dpiY = PdfUnitConverter.verticalResolution;
        var size = this.getPointSize(width, height, dpiX, dpiY);
        return size;
      } else {
        var ucX = new PdfUnitConverter(horizontalResolution);
        var ucY = new PdfUnitConverter(verticalResolution);
        var ptWidth = ucX.convertUnits(width, PdfGraphicsUnit.Pixel, PdfGraphicsUnit.Point);
        var ptHeight = ucY.convertUnits(height, PdfGraphicsUnit.Pixel, PdfGraphicsUnit.Point);
        var size = new SizeF(ptWidth, ptHeight);
        return size;
      }
    };
    return PdfImage2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/images/byte-array.js
var ByteArray = (
  /** @class */
  function() {
    function ByteArray2(length) {
      this.mPosition = 0;
      this.buffer = new Uint8Array(length);
      this.dataView = new DataView(this.buffer.buffer);
    }
    Object.defineProperty(ByteArray2.prototype, "position", {
      /**
       * Gets and Sets a current `position` of byte array.
       * @hidden
       * @private
       */
      get: function() {
        return this.mPosition;
      },
      set: function(value) {
        this.mPosition = value;
      },
      enumerable: true,
      configurable: true
    });
    ByteArray2.prototype.read = function(buffer, offset, count) {
      for (var index = offset; index < count; index++) {
        var position = this.position;
        buffer.buffer[index] = this.readByte(position);
        this.position++;
      }
    };
    ByteArray2.prototype.getBuffer = function(index) {
      return this.buffer[index];
    };
    ByteArray2.prototype.writeFromBase64String = function(base64) {
      var arr = this.encodedString(base64);
      this.buffer = arr;
    };
    ByteArray2.prototype.encodedString = function(input) {
      var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      var chr1;
      var chr2;
      var chr3;
      var enc1;
      var enc2;
      var enc3;
      var enc4;
      var i = 0;
      var resultIndex = 0;
      var dataUrlPrefix = "data:";
      input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
      var totalLength = input.length * 3 / 4;
      if (input.charAt(input.length - 1) === keyStr.charAt(64)) {
        totalLength--;
      }
      var output = new Uint8Array(totalLength | 0);
      while (i < input.length) {
        enc1 = keyStr.indexOf(input.charAt(i++));
        enc2 = keyStr.indexOf(input.charAt(i++));
        enc3 = keyStr.indexOf(input.charAt(i++));
        enc4 = keyStr.indexOf(input.charAt(i++));
        chr1 = enc1 << 2 | enc2 >> 4;
        chr2 = (enc2 & 15) << 4 | enc3 >> 2;
        chr3 = (enc3 & 3) << 6 | enc4;
        output[resultIndex++] = chr1;
        output[resultIndex++] = chr2;
        output[resultIndex++] = chr3;
      }
      return output;
    };
    ByteArray2.prototype.readByte = function(offset) {
      return this.buffer[offset];
    };
    Object.defineProperty(ByteArray2.prototype, "internalBuffer", {
      /**
       * @hidden
       */
      get: function() {
        return this.buffer;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ByteArray2.prototype, "count", {
      /**
       * @hidden
       */
      get: function() {
        return this.buffer.byteLength;
      },
      enumerable: true,
      configurable: true
    });
    ByteArray2.prototype.readNextTwoBytes = function(stream) {
      var data = stream.readByte(this.position);
      this.position++;
      data <<= 8;
      data |= stream.readByte(this.position);
      this.position++;
      return data;
    };
    return ByteArray2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-name.js
var PdfName = (
  /** @class */
  function() {
    function PdfName2(value) {
      this.stringStartMark = "/";
      this.internalValue = "";
      this.isSaving6 = false;
      this.position6 = -1;
      this.internalValue = this.normalizeValue(value);
    }
    Object.defineProperty(PdfName2.prototype, "status", {
      //property
      /**
       * Gets or sets the `Status` of the specified object.
       * @private
       */
      get: function() {
        return this.status6;
      },
      set: function(value) {
        this.status6 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfName2.prototype, "isSaving", {
      /**
       * Gets or sets a value indicating whether this document `is saving` or not.
       * @private
       */
      get: function() {
        return this.isSaving6;
      },
      set: function(value) {
        this.isSaving6 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfName2.prototype, "objectCollectionIndex", {
      /**
       * Gets or sets the `index` value of the specified object.
       * @private
       */
      get: function() {
        return this.index6;
      },
      set: function(value) {
        this.index6 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfName2.prototype, "position", {
      /**
       * Gets or sets the `position` of the object.
       * @private
       */
      get: function() {
        return this.position6;
      },
      set: function(value) {
        this.position6 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfName2.prototype, "clonedObject", {
      /**
       * Returns `cloned object`.
       * @private
       */
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfName2.prototype, "value", {
      /**
       * Gets or sets the `value` of the object.
       * @private
       */
      get: function() {
        return this.internalValue;
      },
      set: function(value) {
        var val = value;
        if (value !== null && value.length > 0) {
          val = value;
          this.internalValue = this.normalizeValue(val);
        } else {
          this.internalValue = val;
        }
      },
      enumerable: true,
      configurable: true
    });
    PdfName2.prototype.save = function(writer) {
      writer.write(this.toString());
    };
    PdfName2.prototype.toString = function() {
      return this.stringStartMark + this.escapeString(this.value);
    };
    PdfName2.prototype.clone = function(crossTable) {
      var newName = new PdfName2();
      newName.value = this.internalValue;
      return newName;
    };
    PdfName2.prototype.escapeString = function(stringValue) {
      var result = "";
      var len = 0;
      for (var i = 0, len_1 = stringValue.length; i < len_1; i++) {
        var ch = stringValue[i];
        var index = PdfName2.delimiters.indexOf(ch);
        result = result + ch;
      }
      return result;
    };
    PdfName2.prototype.normalizeValue = function(value, c) {
      var strFormat = "#{0:X}";
      return value;
    };
    PdfName2.delimiters = "()<>[]{}/%}";
    PdfName2.replacements = [" ", "	", "\n", "\r"];
    return PdfName2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/pdf-dictionary-properties.js
var DictionaryProperties = (
  /** @class */
  /* @__PURE__ */ function() {
    function DictionaryProperties2() {
      this.pages = "Pages";
      this.kids = "Kids";
      this.count = "Count";
      this.resources = "Resources";
      this.type = "Type";
      this.size = "Size";
      this.mediaBox = "MediaBox";
      this.parent = "Parent";
      this.root = "Root";
      this.decodeParms = "DecodeParms";
      this.filter = "Filter";
      this.font = "Font";
      this.type1 = "Type1";
      this.baseFont = "BaseFont";
      this.encoding = "Encoding";
      this.subtype = "Subtype";
      this.contents = "Contents";
      this.procset = "ProcSet";
      this.colorSpace = "ColorSpace";
      this.extGState = "ExtGState";
      this.pattern = "Pattern";
      this.xObject = "XObject";
      this.length = "Length";
      this.width = "Width";
      this.height = "Height";
      this.bitsPerComponent = "BitsPerComponent";
      this.image = "Image";
      this.dctdecode = "DCTDecode";
      this.columns = "Columns";
      this.blackIs1 = "BlackIs1";
      this.k = "K";
      this.s = "S";
      this.predictor = "Predictor";
      this.deviceRgb = "DeviceRGB";
      this.next = "Next";
      this.action = "Action";
      this.link = "Link";
      this.a = "A";
      this.annot = "Annot";
      this.p = "P";
      this.c = "C";
      this.rect = "Rect";
      this.uri = "URI";
      this.annots = "Annots";
      this.ca = "ca";
      this.CA = "CA";
      this.xyz = "XYZ";
      this.fit = "Fit";
      this.dest = "Dest";
      this.BM = "BM";
      this.flatedecode = "FlateDecode";
      this.rotate = "Rotate";
      this.bBox = "BBox";
      this.form = "Form";
      this.w = "W";
      this.cIDFontType2 = "CIDFontType2";
      this.cIDToGIDMap = "CIDToGIDMap";
      this.identity = "Identity";
      this.dw = "DW";
      this.fontDescriptor = "FontDescriptor";
      this.cIDSystemInfo = "CIDSystemInfo";
      this.fontName = "FontName";
      this.flags = "Flags";
      this.fontBBox = "FontBBox";
      this.missingWidth = "MissingWidth";
      this.stemV = "StemV";
      this.italicAngle = "ItalicAngle";
      this.capHeight = "CapHeight";
      this.ascent = "Ascent";
      this.descent = "Descent";
      this.leading = "Leading";
      this.avgWidth = "AvgWidth";
      this.fontFile2 = "FontFile2";
      this.maxWidth = "MaxWidth";
      this.xHeight = "XHeight";
      this.stemH = "StemH";
      this.registry = "Registry";
      this.ordering = "Ordering";
      this.supplement = "Supplement";
      this.type0 = "Type0";
      this.identityH = "Identity-H";
      this.toUnicode = "ToUnicode";
      this.descendantFonts = "DescendantFonts";
      this.background = "Background";
      this.shading = "Shading";
      this.matrix = "Matrix";
      this.antiAlias = "AntiAlias";
      this.function = "Function";
      this.extend = "Extend";
      this.shadingType = "ShadingType";
      this.coords = "Coords";
      this.domain = "Domain";
      this.range = "Range";
      this.functionType = "FunctionType";
      this.bitsPerSample = "BitsPerSample";
      this.patternType = "PatternType";
      this.paintType = "PaintType";
      this.tilingType = "TilingType";
      this.xStep = "XStep";
      this.yStep = "YStep";
      this.viewerPreferences = "ViewerPreferences";
      this.centerWindow = "CenterWindow";
      this.displayTitle = "DisplayTitle";
      this.fitWindow = "FitWindow";
      this.hideMenuBar = "HideMenubar";
      this.hideToolBar = "HideToolbar";
      this.hideWindowUI = "HideWindowUI";
      this.pageMode = "PageMode";
      this.pageLayout = "PageLayout";
      this.duplex = "Duplex";
      this.printScaling = "PrintScaling";
    }
    return DictionaryProperties2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-dictionary.js
var PdfDictionary = (
  /** @class */
  function() {
    function PdfDictionary2(dictionary) {
      this.position7 = -1;
      this.primitiveItems = new Dictionary();
      this.prefix = "<<";
      this.suffix = ">>";
      this.resources = [];
      this.object = null;
      this.archive = true;
      this.isResource = false;
      if (typeof dictionary === "undefined") {
        this.primitiveItems = new Dictionary();
        this.encrypt = true;
        this.dictionaryProperties = new DictionaryProperties();
      } else {
        this.primitiveItems = new Dictionary();
        var keys = dictionary.items.keys();
        var values = dictionary.items.values();
        for (var index = 0; index < dictionary.items.size(); index++) {
          this.primitiveItems.setValue(keys[index], values[index]);
        }
        this.status = dictionary.status;
        this.freezeChanges(this);
        this.encrypt = true;
        this.dictionaryProperties = new DictionaryProperties();
      }
    }
    Object.defineProperty(PdfDictionary2.prototype, "items", {
      //Properties
      /**
       * Gets or sets the `IPdfSavable` with the specified key.
       * @private
       */
      get: function() {
        return this.primitiveItems;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDictionary2.prototype, "status", {
      /**
       * Gets or sets the `Status` of the specified object.
       * @private
       */
      get: function() {
        return this.status7;
      },
      set: function(value) {
        this.status7 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDictionary2.prototype, "isSaving", {
      /**
       * Gets or sets a value indicating whether this document `is saving` or not.
       * @private
       */
      get: function() {
        return this.isSaving7;
      },
      set: function(value) {
        this.isSaving7 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDictionary2.prototype, "objectCollectionIndex", {
      /**
       * Gets or sets the `index` value of the specified object.
       * @private
       */
      get: function() {
        return this.index7;
      },
      set: function(value) {
        this.index7 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDictionary2.prototype, "clonedObject", {
      /**
       * Returns `cloned object`.
       * @private
       */
      get: function() {
        return this.object;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDictionary2.prototype, "position", {
      /**
       * Gets or sets the `position` of the object.
       * @private
       */
      get: function() {
        return this.position7;
      },
      set: function(value) {
        this.position7 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDictionary2.prototype, "Count", {
      /**
       * Gets the `count`.
       * @private
       */
      get: function() {
        return this.primitiveItems.size();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDictionary2.prototype, "Dictionary", {
      /**
       * Collection of `items` in the object.
       * @private
       */
      get: function() {
        return this;
      },
      enumerable: true,
      configurable: true
    });
    PdfDictionary2.prototype.getArchive = function() {
      return this.archive;
    };
    PdfDictionary2.prototype.setArchive = function(value) {
      this.archive = value;
    };
    PdfDictionary2.prototype.setEncrypt = function(value) {
      this.encrypt = value;
      this.modify();
    };
    PdfDictionary2.prototype.getEncrypt = function() {
      return this.encrypt;
    };
    PdfDictionary2.prototype.freezeChanges = function(freezer) {
      this.bChanged = false;
    };
    PdfDictionary2.prototype.clone = function(crossTable) {
      var newDict = new PdfDictionary2();
      return newDict;
    };
    PdfDictionary2.prototype.modify = function() {
      this.bChanged = true;
    };
    PdfDictionary2.prototype.remove = function(key) {
      if (typeof key !== "string") {
        this.primitiveItems.remove(key.value);
        this.modify();
      } else {
        this.remove(new PdfName(key));
      }
    };
    PdfDictionary2.prototype.containsKey = function(key) {
      var returnValue = false;
      returnValue = this.primitiveItems.containsKey(key.toString());
      return returnValue;
    };
    PdfDictionary2.prototype.onBeginSave = function() {
      this.beginSave.sender.beginSave();
    };
    PdfDictionary2.prototype.onFontDictionaryBeginSave = function() {
      this.fontDictionaryBeginSave.sender.fontDictionaryBeginSave();
    };
    PdfDictionary2.prototype.onDescendantFontBeginSave = function() {
      this.descendantFontBeginSave.sender.descendantFontBeginSave();
    };
    PdfDictionary2.prototype.onTemplateBeginSave = function() {
      this.pageBeginDrawTemplate.sender.pageBeginSave();
    };
    PdfDictionary2.prototype.onBeginAnnotationSave = function() {
      this.annotationBeginSave.sender.beginSave();
    };
    PdfDictionary2.prototype.onSectionBeginSave = function(writer) {
      var saveEvent = this.sectionBeginSave;
      saveEvent.sender.beginSave(saveEvent.state, writer);
    };
    PdfDictionary2.prototype.save = function(writer, bRaiseEvent) {
      if (typeof bRaiseEvent === "undefined") {
        this.save(writer, true);
      } else {
        writer.write(this.prefix);
        if (typeof this.beginSave !== "undefined") {
          this.onBeginSave();
        }
        if (typeof this.descendantFontBeginSave !== "undefined") {
          this.onDescendantFontBeginSave();
        }
        if (typeof this.fontDictionaryBeginSave !== "undefined") {
          this.onFontDictionaryBeginSave();
        }
        if (typeof this.annotationBeginSave !== "undefined") {
          this.onBeginAnnotationSave();
        }
        if (typeof this.sectionBeginSave !== "undefined") {
          this.onSectionBeginSave(writer);
        }
        if (typeof this.pageBeginDrawTemplate !== "undefined") {
          this.onTemplateBeginSave();
        }
        if (this.Count > 0) {
          this.saveItems(writer);
        }
        writer.write(this.suffix);
        writer.write(Operators.newLine);
      }
    };
    PdfDictionary2.prototype.saveItems = function(writer) {
      writer.write(Operators.newLine);
      var keys = this.primitiveItems.keys();
      var values = this.primitiveItems.values();
      for (var index = 0; index < keys.length; index++) {
        var key = keys[index];
        var name_1 = new PdfName(key);
        name_1.save(writer);
        writer.write(Operators.whiteSpace);
        var resources = values[index];
        resources.save(writer);
        writer.write(Operators.newLine);
      }
    };
    return PdfDictionary2;
  }()
);
var SaveSectionCollectionEventHandler = (
  /** @class */
  /* @__PURE__ */ function() {
    function SaveSectionCollectionEventHandler2(sender) {
      this.sender = sender;
    }
    return SaveSectionCollectionEventHandler2;
  }()
);
var SaveDescendantFontEventHandler = (
  /** @class */
  /* @__PURE__ */ function() {
    function SaveDescendantFontEventHandler2(sender) {
      this.sender = sender;
    }
    return SaveDescendantFontEventHandler2;
  }()
);
var SaveFontDictionaryEventHandler = (
  /** @class */
  /* @__PURE__ */ function() {
    function SaveFontDictionaryEventHandler2(sender) {
      this.sender = sender;
    }
    return SaveFontDictionaryEventHandler2;
  }()
);
var SaveAnnotationEventHandler = (
  /** @class */
  /* @__PURE__ */ function() {
    function SaveAnnotationEventHandler2(sender) {
      this.sender = sender;
    }
    return SaveAnnotationEventHandler2;
  }()
);
var SaveSectionEventHandler = (
  /** @class */
  /* @__PURE__ */ function() {
    function SaveSectionEventHandler2(sender, state) {
      this.sender = sender;
      this.state = state;
    }
    return SaveSectionEventHandler2;
  }()
);
var SaveTemplateEventHandler = (
  /** @class */
  /* @__PURE__ */ function() {
    function SaveTemplateEventHandler2(sender) {
      this.sender = sender;
    }
    return SaveTemplateEventHandler2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-string.js
var InternalEnum;
(function(InternalEnum2) {
  var ForceEncoding;
  (function(ForceEncoding2) {
    ForceEncoding2[ForceEncoding2["None"] = 0] = "None";
    ForceEncoding2[ForceEncoding2["Ascii"] = 1] = "Ascii";
    ForceEncoding2[ForceEncoding2["Unicode"] = 2] = "Unicode";
  })(ForceEncoding = InternalEnum2.ForceEncoding || (InternalEnum2.ForceEncoding = {}));
  var SourceType;
  (function(SourceType2) {
    SourceType2[SourceType2["StringValue"] = 0] = "StringValue";
    SourceType2[SourceType2["ByteBuffer"] = 1] = "ByteBuffer";
  })(SourceType || (SourceType = {}));
})(InternalEnum || (InternalEnum = {}));
var PdfString = (
  /** @class */
  function() {
    function PdfString2(value) {
      this.bHex = false;
      this.position1 = -1;
      this.clonedObject1 = null;
      this.bDecrypted = false;
      this.isParentDecrypted = false;
      this.isPacked = false;
      this.isFormField = false;
      this.isColorSpace = false;
      this.isHexString = true;
      if (typeof value === "undefined") {
        this.bHex = false;
      } else {
        if (!(value.length > 0 && value[0] === "0xfeff")) {
          this.stringValue = value;
          this.data = [];
          for (var i = 0; i < value.length; ++i) {
            this.data.push(value.charCodeAt(i));
          }
        }
      }
    }
    Object.defineProperty(PdfString2.prototype, "hex", {
      //Property
      /**
       * Gets a value indicating whether string is in `hex`.
       * @private
       */
      get: function() {
        return this.bHex;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfString2.prototype, "value", {
      /**
       * Gets or sets string `value` of the object.
       * @private
       */
      get: function() {
        return this.stringValue;
      },
      set: function(value) {
        this.stringValue = value;
        this.data = null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfString2.prototype, "status", {
      /**
       * Gets or sets the `Status` of the specified object.
       * @private
       */
      get: function() {
        return this.status1;
      },
      set: function(value) {
        this.status1 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfString2.prototype, "isSaving", {
      /**
       * Gets or sets a value indicating whether this document `is saving` or not.
       * @private
       */
      get: function() {
        return this.isSaving1;
      },
      set: function(value) {
        this.isSaving1 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfString2.prototype, "objectCollectionIndex", {
      /**
       * Gets or sets the `index` value of the specified object.
       * @private
       */
      get: function() {
        return this.index1;
      },
      set: function(value) {
        this.index1 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfString2.prototype, "clonedObject", {
      /**
       * Returns `cloned object`.
       * @private
       */
      get: function() {
        return this.clonedObject1;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfString2.prototype, "position", {
      /**
       * Gets or sets the `position` of the object.
       * @private
       */
      get: function() {
        return this.position1;
      },
      set: function(value) {
        this.position1 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfString2.prototype, "CrossTable", {
      /**
       * Returns `PdfCrossTable` associated with the object.
       * @private
       */
      get: function() {
        return this.crossTable;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfString2.prototype, "converted", {
      /**
       * Gets a value indicating whether to check if the value has unicode characters.
       * @private
       */
      get: function() {
        return this.bConverted;
      },
      /**
       * sets a value indicating whether to check if the value has unicode characters.
       * @private
       */
      set: function(value) {
        this.bConverted = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfString2.prototype, "encode", {
      /**
       * Gets value indicating whether we should convert data to Unicode.
       */
      get: function() {
        return this.bForceEncoding;
      },
      set: function(value) {
        this.bForceEncoding = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfString2.bytesToHex = function(bytes) {
      if (bytes == null) {
        return "";
      }
      var builder = "";
      return builder;
    };
    PdfString2.prototype.save = function(writer) {
      if (writer === null) {
        throw new Error("ArgumentNullException : writer");
      }
      if (this.encode !== void 0 && this.encode === InternalEnum.ForceEncoding.Ascii) {
        writer.write(this.pdfEncode());
      } else {
        writer.write(PdfString2.stringMark[0] + this.value + PdfString2.stringMark[1]);
      }
    };
    PdfString2.prototype.pdfEncode = function() {
      var result = "";
      if (this.encode !== void 0 && this.encode === InternalEnum.ForceEncoding.Ascii) {
        var data = this.escapeSymbols(this.value);
        for (var i = 0; i < data.length; i++) {
          result += String.fromCharCode(data[i]);
        }
        result = PdfString2.stringMark[0] + result + PdfString2.stringMark[1];
      } else {
        result = this.value;
      }
      return result;
    };
    PdfString2.prototype.escapeSymbols = function(value) {
      var data = [];
      for (var i = 0; i < value.length; i++) {
        var currentData = value.charCodeAt(i);
        switch (currentData) {
          case 40:
          case 41:
            data.push(92);
            data.push(currentData);
            break;
          case 13:
            data.push(92);
            data.push(114);
            break;
          case 92:
            data.push(92);
            data.push(currentData);
            break;
          default:
            data.push(currentData);
            break;
        }
      }
      return data;
    };
    PdfString2.prototype.clone = function(crossTable) {
      if (this.clonedObject1 !== null && this.clonedObject1.CrossTable === crossTable) {
        return this.clonedObject1;
      } else {
        this.clonedObject1 = null;
      }
      var newString = new PdfString2(this.stringValue);
      newString.bHex = this.bHex;
      newString.crossTable = crossTable;
      newString.isColorSpace = this.isColorSpace;
      this.clonedObject1 = newString;
      return newString;
    };
    PdfString2.toUnicodeArray = function(value, bAddPrefix) {
      if (value == null) {
        throw new Error("Argument Null Exception : value");
      }
      var startIndex = 0;
      var output = [];
      for (var i = 0; i < value.length; i++) {
        var code = value.charCodeAt(i);
        output.push(code / 256 >>> 0);
        output.push(code & 255);
      }
      return output;
    };
    PdfString2.byteToString = function(data) {
      if (data == null) {
        throw new Error("Argument Null Exception : stream");
      }
      var result = "";
      for (var i = 0; i < data.length; ++i) {
        result += String.fromCharCode(data[i]);
      }
      return result;
    };
    PdfString2.stringMark = "()";
    PdfString2.hexStringMark = "<>";
    PdfString2.hexFormatPattern = "{0:X2}";
    return PdfString2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-reference.js
var PdfReference = (
  /** @class */
  function() {
    function PdfReference2(objNumber, genNumber) {
      this.index3 = -1;
      this.position3 = -1;
      this.objNumber = 0;
      this.genNumber = 0;
      if (typeof objNumber === "number" && typeof genNumber === "number") {
        this.objNumber = objNumber;
        this.genNumber = genNumber;
      } else {
        this.objNumber = Number(objNumber);
        this.genNumber = Number(genNumber);
      }
    }
    Object.defineProperty(PdfReference2.prototype, "status", {
      //Property
      /**
       * Gets or sets the `Status` of the specified object.
       * @private
       */
      get: function() {
        return this.status3;
      },
      set: function(value) {
        this.status3 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfReference2.prototype, "isSaving", {
      /**
       * Gets or sets a value indicating whether this document `is saving` or not.
       * @private
       */
      get: function() {
        return this.isSaving3;
      },
      set: function(value) {
        this.isSaving3 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfReference2.prototype, "objectCollectionIndex", {
      /**
       * Gets or sets the `index` value of the specified object.
       * @private
       */
      get: function() {
        return this.index3;
      },
      set: function(value) {
        this.index3 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfReference2.prototype, "position", {
      /**
       * Gets or sets the `position` of the object.
       * @private
       */
      get: function() {
        return this.position3;
      },
      set: function(value) {
        this.position3 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfReference2.prototype, "clonedObject", {
      /**
       * Returns `cloned object`.
       * @private
       */
      get: function() {
        var returnObject3 = null;
        return returnObject3;
      },
      enumerable: true,
      configurable: true
    });
    PdfReference2.prototype.save = function(writer) {
      writer.write(this.toString());
    };
    PdfReference2.prototype.toString = function() {
      return this.objNumber.toString() + " " + this.genNumber.toString() + " R";
    };
    PdfReference2.prototype.clone = function(crossTable) {
      return null;
    };
    return PdfReference2;
  }()
);
var PdfReferenceHolder = (
  /** @class */
  function() {
    function PdfReferenceHolder2(obj1, obj2) {
      this.index4 = -1;
      this.position4 = -1;
      this.objectIndex = -1;
      this.dictionaryProperties = new DictionaryProperties();
      this.initialize(obj1);
    }
    Object.defineProperty(PdfReferenceHolder2.prototype, "status", {
      //Properties
      /**
       * Gets or sets the `Status` of the specified object.
       * @private
       */
      get: function() {
        return this.status4;
      },
      set: function(value) {
        this.status4 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfReferenceHolder2.prototype, "isSaving", {
      /**
       * Gets or sets a value indicating whether this document `is saving` or not.
       * @private
       */
      get: function() {
        return this.isSaving4;
      },
      set: function(value) {
        this.isSaving4 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfReferenceHolder2.prototype, "objectCollectionIndex", {
      /**
       * Gets or sets the `index` value of the specified object.
       * @private
       */
      get: function() {
        return this.index4;
      },
      set: function(value) {
        this.index4 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfReferenceHolder2.prototype, "position", {
      /**
       * Gets or sets the `position` of the object.
       * @private
       */
      get: function() {
        return this.position4;
      },
      set: function(value) {
        this.position4 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfReferenceHolder2.prototype, "clonedObject", {
      /**
       * Returns `cloned object`.
       * @private
       */
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfReferenceHolder2.prototype, "object", {
      /**
       * Gets the `object` the reference is of.
       * @private
       */
      get: function() {
        return this.primitiveObject;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfReferenceHolder2.prototype, "reference", {
      /**
       * Gets the `reference`.
       * @private
       */
      get: function() {
        return this.pdfReference;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfReferenceHolder2.prototype, "index", {
      /**
       * Gets the `index` of the object.
       * @private
       */
      get: function() {
        return this.objectIndex;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfReferenceHolder2.prototype, "element", {
      /**
       * Gets the `element`.
       * @private
       */
      get: function() {
        return this.primitiveObject;
      },
      enumerable: true,
      configurable: true
    });
    PdfReferenceHolder2.prototype.initialize = function(obj1) {
      if (obj1 instanceof PdfArray || obj1 instanceof PdfDictionary || obj1 instanceof PdfName || obj1 instanceof PdfNumber || obj1 instanceof PdfStream || obj1 instanceof PdfReference || obj1 instanceof PdfString) {
        this.primitiveObject = obj1;
      } else {
        var tempObj = obj1;
        this.initialize(tempObj.element);
      }
    };
    PdfReferenceHolder2.prototype.save = function(writer) {
      var position = writer.position;
      var cTable = writer.document.crossTable;
      this.object.isSaving = true;
      var reference = null;
      reference = cTable.getReference(this.object);
      reference.save(writer);
    };
    PdfReferenceHolder2.prototype.clone = function(crossTable) {
      var refHolder = null;
      var temp = null;
      var refNum = "";
      var reference = null;
      return null;
    };
    return PdfReferenceHolder2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-stream.js
var __extends58 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfStream = (
  /** @class */
  function(_super) {
    __extends58(PdfStream2, _super);
    function PdfStream2(dictionary, data) {
      var _this = _super.call(this, dictionary) || this;
      _this.dicPrefix = "stream";
      _this.dicSuffix = "endstream";
      _this.clonedObject2 = null;
      _this.bCompress = true;
      if (typeof dictionary !== "undefined" || typeof data !== "undefined") {
        _this.dataStream2 = [];
        _this.dataStream2 = data;
        _this.bCompress2 = false;
      } else {
        _this.dataStream2 = [];
        _this.bCompress2 = true;
      }
      return _this;
    }
    Object.defineProperty(PdfStream2.prototype, "internalStream", {
      /**
       * Gets the `internal` stream.
       * @private
       */
      get: function() {
        return this.dataStream2;
      },
      set: function(value) {
        this.dataStream2 = [];
        this.dataStream2 = value;
        this.modify();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStream2.prototype, "compress", {
      /**
       * Gets or sets `compression` flag.
       * @private
       */
      get: function() {
        return this.bCompress;
      },
      set: function(value) {
        this.bCompress = value;
        this.modify();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStream2.prototype, "data", {
      /**
       * Gets or sets the `data`.
       * @private
       */
      get: function() {
        return this.dataStream2;
      },
      set: function(value) {
        this.dataStream2 = [];
        this.dataStream2 = value;
        this.modify();
      },
      enumerable: true,
      configurable: true
    });
    PdfStream2.prototype.clearStream = function() {
      this.internalStream = [];
      if (this.items.containsKey(this.dictionaryProperties.filter)) {
        this.remove(this.dictionaryProperties.filter);
      }
      this.bCompress = true;
      this.modify();
    };
    PdfStream2.prototype.write = function(text) {
      if (text == null) {
        throw new Error("ArgumentNullException:text");
      }
      if (text.length <= 0) {
        throw new Error("ArgumentException: Can not write an empty string, text");
      }
      this.dataStream2.push(text);
      this.modify();
    };
    PdfStream2.prototype.writeBytes = function(data) {
      if (data === null) {
        throw new Error("ArgumentNullException:data");
      }
      if (data.length <= 0) {
        throw new Error("ArgumentException: Can not write an empty bytes, data");
      }
      var text = "";
      for (var i = 0; i < data.length; i++) {
        text += String.fromCharCode(data[i]);
      }
      this.dataStream2.push(text);
      this.modify();
    };
    PdfStream2.prototype.onCmapBeginSave = function() {
      this.cmapBeginSave.sender.cmapBeginSave();
    };
    PdfStream2.prototype.onFontProgramBeginSave = function() {
      this.fontProgramBeginSave.sender.fontProgramBeginSave();
    };
    PdfStream2.prototype.compressContent = function(data, writer) {
      if (this.bCompress) {
        var byteArray = [];
        for (var i = 0; i < data.length; i++) {
          byteArray.push(data.charCodeAt(i));
        }
        var dataArray = new Uint8Array(byteArray);
        var sw = new CompressedStreamWriter();
        sw.write(dataArray, 0, dataArray.length);
        sw.close();
        data = sw.getCompressedString;
        this.addFilter(this.dictionaryProperties.flatedecode);
      }
      return data;
    };
    PdfStream2.prototype.addFilter = function(filterName) {
      var obj = this.items.getValue(this.dictionaryProperties.filter);
      if (obj instanceof PdfReferenceHolder) {
        var rh = obj;
        obj = rh.object;
      }
      var array = obj;
      var name = obj;
      if (name != null) {
        array = new PdfArray();
        array.insert(0, name);
        this.items.setValue(this.dictionaryProperties.filter, array);
      }
      name = new PdfName(filterName);
      if (array == null) {
        this.items.setValue(this.dictionaryProperties.filter, name);
      } else {
        array.insert(0, name);
      }
    };
    PdfStream2.prototype.save = function(writer) {
      if (typeof this.cmapBeginSave !== "undefined") {
        this.onCmapBeginSave();
      }
      if (typeof this.fontProgramBeginSave !== "undefined") {
        this.onFontProgramBeginSave();
      }
      var data = "";
      for (var i = 0; i < this.data.length; i++) {
        data = data + this.data[i];
      }
      if (data.length > 1 && !this.isResource) {
        data = "q\r\n" + data + "Q\r\n";
      }
      data = this.compressContent(data, writer);
      var length = data.length;
      this.items.setValue(this.dictionaryProperties.length, new PdfNumber(length));
      _super.prototype.save.call(this, writer, false);
      writer.write(this.dicPrefix);
      writer.write(Operators.newLine);
      if (data.length > 0) {
        writer.write(data);
      }
      writer.write(Operators.newLine);
      writer.write(this.dicSuffix);
      writer.write(Operators.newLine);
    };
    PdfStream2.bytesToString = function(byteArray) {
      var output = "";
      for (var i = 0; i < byteArray.length; i++) {
        output = output + String.fromCharCode(byteArray[i]);
      }
      return output;
    };
    return PdfStream2;
  }(PdfDictionary)
);
var SaveCmapEventHandler = (
  /** @class */
  /* @__PURE__ */ function() {
    function SaveCmapEventHandler2(sender) {
      this.sender = sender;
    }
    return SaveCmapEventHandler2;
  }()
);
var SaveFontProgramEventHandler = (
  /** @class */
  /* @__PURE__ */ function() {
    function SaveFontProgramEventHandler2(sender) {
      this.sender = sender;
    }
    return SaveFontProgramEventHandler2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-boolean.js
var PdfBoolean = (
  /** @class */
  function() {
    function PdfBoolean2(value) {
      this.currentPosition = -1;
      this.value = value;
    }
    Object.defineProperty(PdfBoolean2.prototype, "status", {
      //Properties
      /**
       * Gets or sets the `Status` of the specified object.
       * @private
       */
      get: function() {
        return this.objectStatus;
      },
      set: function(value) {
        this.objectStatus = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBoolean2.prototype, "isSaving", {
      /**
       * Gets or sets a value indicating whether this document `is saving` or not.
       * @private
       */
      get: function() {
        return this.saving;
      },
      set: function(value) {
        this.saving = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBoolean2.prototype, "objectCollectionIndex", {
      /**
       * Gets or sets the `index` value of the specified object.
       * @private
       */
      get: function() {
        return this.index;
      },
      set: function(value) {
        this.index = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBoolean2.prototype, "position", {
      /**
       * Gets or sets the `position` of the object.
       * @private
       */
      get: function() {
        return this.currentPosition;
      },
      set: function(value) {
        this.currentPosition = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBoolean2.prototype, "clonedObject", {
      /**
       * Returns `cloned object`.
       * @private
       */
      get: function() {
        var rValue = null;
        return rValue;
      },
      enumerable: true,
      configurable: true
    });
    PdfBoolean2.prototype.save = function(writer) {
      writer.write(this.boolToStr(this.value));
    };
    PdfBoolean2.prototype.clone = function(crossTable) {
      var newNumber = new PdfBoolean2(this.value);
      return newNumber;
    };
    PdfBoolean2.prototype.boolToStr = function(value) {
      return value ? "true" : "false";
    };
    return PdfBoolean2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/images/image-decoder.js
var ImageFormat;
(function(ImageFormat2) {
  ImageFormat2[ImageFormat2["Unknown"] = 0] = "Unknown";
  ImageFormat2[ImageFormat2["Bmp"] = 1] = "Bmp";
  ImageFormat2[ImageFormat2["Emf"] = 2] = "Emf";
  ImageFormat2[ImageFormat2["Gif"] = 3] = "Gif";
  ImageFormat2[ImageFormat2["Jpeg"] = 4] = "Jpeg";
  ImageFormat2[ImageFormat2["Png"] = 5] = "Png";
  ImageFormat2[ImageFormat2["Wmf"] = 6] = "Wmf";
  ImageFormat2[ImageFormat2["Icon"] = 7] = "Icon";
})(ImageFormat || (ImageFormat = {}));
var ImageDecoder = (
  /** @class */
  function() {
    function ImageDecoder2(stream) {
      this.sof1Marker = 193;
      this.sof2Marker = 194;
      this.sof3Marker = 195;
      this.sof5Marker = 197;
      this.sof6Marker = 198;
      this.sof7Marker = 199;
      this.sof9Marker = 201;
      this.sof10Marker = 202;
      this.sof11Marker = 203;
      this.sof13Marker = 205;
      this.sof14Marker = 206;
      this.sof15Marker = 207;
      this.mFormat = ImageFormat.Unknown;
      this.mbitsPerComponent = 8;
      this.dictionaryProperties = new DictionaryProperties();
      this.mStream = stream;
      this.initialize();
    }
    Object.defineProperty(ImageDecoder2.prototype, "height", {
      /**
       * Gets the `height` of image.
       * @hidden
       * @private
       */
      get: function() {
        return this.mHeight;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ImageDecoder2.prototype, "width", {
      /**
       * Gets the `width` of image.
       * @hidden
       * @private
       */
      get: function() {
        return this.mWidth;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ImageDecoder2.prototype, "bitsPerComponent", {
      /**
       * Gets `bits per component`.
       * @hidden
       * @private
       */
      get: function() {
        return this.mbitsPerComponent;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ImageDecoder2.prototype, "size", {
      /**
       * Gets the `size` of an image data.
       * @hidden
       * @private
       */
      get: function() {
        return this.mImageData.count;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ImageDecoder2.prototype, "imageData", {
      /**
       * Gets the value of an `image data`.
       * @hidden
       * @private
       */
      get: function() {
        return this.mImageData;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ImageDecoder2.prototype, "imageDataAsNumberArray", {
      /**
       * Gets the value of an `image data as number array`.
       * @hidden
       * @private
       */
      get: function() {
        return this.mImageData.internalBuffer.buffer;
      },
      enumerable: true,
      configurable: true
    });
    ImageDecoder2.prototype.initialize = function() {
      if (this.mFormat === ImageFormat.Unknown && this.checkIfJpeg()) {
        this.mFormat = ImageFormat.Jpeg;
        this.parseJpegImage();
      } else {
        throw new TypeError("Only the JPEG format is supported");
      }
      this.reset();
      this.mImageData = new ByteArray(this.mStream.count);
      this.mStream.read(this.mImageData, 0, this.mImageData.count);
    };
    ImageDecoder2.prototype.reset = function() {
      this.mStream.position = 0;
    };
    ImageDecoder2.prototype.parseJpegImage = function() {
      this.reset();
      var imgData = new ByteArray(this.mStream.count);
      this.mStream.read(imgData, 0, imgData.count);
      var i = 4;
      var isLengthExceed = false;
      var length = imgData.getBuffer(i) * 256 + imgData.getBuffer(i + 1);
      while (i < imgData.count) {
        i += length;
        if (i < imgData.count) {
          if (imgData.getBuffer(i + 1) === 192) {
            this.mHeight = imgData.getBuffer(i + 5) * 256 + imgData.getBuffer(i + 6);
            this.mWidth = imgData.getBuffer(i + 7) * 256 + imgData.getBuffer(i + 8);
            return;
          } else {
            i += 2;
            length = imgData.getBuffer(i) * 256 + imgData.getBuffer(i + 1);
          }
        } else {
          isLengthExceed = true;
          break;
        }
      }
      if (isLengthExceed) {
        this.mStream.position = 0;
        this.skip(this.mStream, 2);
        this.readExceededJPGImage(this.mStream);
      }
    };
    Object.defineProperty(ImageDecoder2.prototype, "format", {
      /**
       * Gets the image `format`.
       * @private
       * @hidden
       */
      get: function() {
        return this.mFormat;
      },
      enumerable: true,
      configurable: true
    });
    ImageDecoder2.prototype.checkIfJpeg = function() {
      this.reset();
      for (var i = 0; i < ImageDecoder2.mJpegHeader.length; i++) {
        if (ImageDecoder2.mJpegHeader[i] !== this.mStream.readByte(i)) {
          return false;
        }
        this.mStream.position++;
      }
      return true;
    };
    ImageDecoder2.prototype.getImageDictionary = function() {
      if (this.mFormat === ImageFormat.Jpeg) {
        var tempArrayBuffer = this.imageData.internalBuffer.length;
        this.imageStream = new PdfStream();
        this.imageStream.isResource = true;
        var tempString = "";
        var decodedString = "";
        for (var i = 0; i < this.imageDataAsNumberArray.byteLength; i++) {
          tempString += String.fromCharCode(null, this.mStream.readByte(i));
        }
        for (var i = 0; i < tempString.length; i++) {
          if (i % 2 !== 0) {
            decodedString += tempString[i];
          }
        }
        this.imageStream.data = [decodedString];
        this.imageStream.compress = false;
        this.imageStream.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.xObject));
        this.imageStream.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.image));
        this.imageStream.items.setValue(this.dictionaryProperties.width, new PdfNumber(this.width));
        this.imageStream.items.setValue(this.dictionaryProperties.height, new PdfNumber(this.height));
        this.imageStream.items.setValue(this.dictionaryProperties.bitsPerComponent, new PdfNumber(this.bitsPerComponent));
        this.imageStream.items.setValue(this.dictionaryProperties.filter, new PdfName(this.dictionaryProperties.dctdecode));
        this.imageStream.items.setValue(this.dictionaryProperties.colorSpace, new PdfName(this.getColorSpace()));
        this.imageStream.items.setValue(this.dictionaryProperties.decodeParms, this.getDecodeParams());
        return this.imageStream;
      } else {
        return this.imageStream;
      }
    };
    ImageDecoder2.prototype.getColorSpace = function() {
      return this.dictionaryProperties.deviceRgb;
    };
    ImageDecoder2.prototype.getDecodeParams = function() {
      var decodeParams = new PdfDictionary();
      decodeParams.items.setValue(this.dictionaryProperties.columns, new PdfNumber(this.width));
      decodeParams.items.setValue(this.dictionaryProperties.blackIs1, new PdfBoolean(true));
      decodeParams.items.setValue(this.dictionaryProperties.k, new PdfNumber(-1));
      decodeParams.items.setValue(this.dictionaryProperties.predictor, new PdfNumber(15));
      decodeParams.items.setValue(this.dictionaryProperties.bitsPerComponent, new PdfNumber(this.bitsPerComponent));
      return decodeParams;
    };
    ImageDecoder2.prototype.readExceededJPGImage = function(stream) {
      this.mStream = stream;
      var isContinueReading = true;
      while (isContinueReading) {
        var marker = this.getMarker(stream);
        switch (marker) {
          case this.sof1Marker:
          case this.sof2Marker:
          case this.sof3Marker:
          case this.sof5Marker:
          case this.sof6Marker:
          case this.sof7Marker:
          case this.sof9Marker:
          case this.sof10Marker:
          case this.sof11Marker:
          case this.sof13Marker:
          case this.sof14Marker:
          case this.sof15Marker:
            stream.position += 3;
            this.mHeight = this.mStream.readNextTwoBytes(stream);
            this.mWidth = this.mStream.readNextTwoBytes(stream);
            isContinueReading = false;
            break;
          default:
            this.skipStream(stream);
            break;
        }
      }
    };
    ImageDecoder2.prototype.skip = function(stream, noOfBytes) {
      this.mStream = stream;
      var temp = new ByteArray(noOfBytes);
      this.mStream.read(temp, 0, temp.count);
    };
    ImageDecoder2.prototype.getMarker = function(stream) {
      var skippedByte = 0;
      var marker = 32;
      marker = stream.readByte(this.mStream.position);
      stream.position++;
      while (marker !== 255) {
        skippedByte++;
        marker = stream.readByte(this.mStream.position);
        stream.position++;
      }
      do {
        marker = stream.readByte(this.mStream.position);
        stream.position++;
      } while (marker === 255);
      return marker;
    };
    ImageDecoder2.prototype.skipStream = function(stream) {
      var markerLength = this.mStream.readNextTwoBytes(stream) - 2;
      if (markerLength > 0) {
        stream.position += markerLength;
      }
    };
    ImageDecoder2.mPngHeader = [137, 80, 78, 71, 13, 10, 26, 10];
    ImageDecoder2.mJpegHeader = [255, 216];
    ImageDecoder2.GIF_HEADER = "G,I,F,8";
    ImageDecoder2.BMP_HEADER = "B,M";
    return ImageDecoder2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/images/pdf-bitmap.js
var __extends59 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfBitmap = (
  /** @class */
  function(_super) {
    __extends59(PdfBitmap2, _super);
    function PdfBitmap2(encodedString) {
      var _this = _super.call(this) || this;
      _this.imageStatus = true;
      _this.dictionaryProperties = new DictionaryProperties();
      _this.loadImage(encodedString);
      return _this;
    }
    PdfBitmap2.prototype.loadImage = function(encodedString) {
      var task = this.initializeAsync(encodedString);
    };
    PdfBitmap2.prototype.initializeAsync = function(encodedString) {
      var byteArray = new ByteArray(encodedString.length);
      byteArray.writeFromBase64String(encodedString);
      this.decoder = new ImageDecoder(byteArray);
      this.height = this.decoder.height;
      this.width = this.decoder.width;
      this.bitsPerComponent = this.decoder.bitsPerComponent;
    };
    PdfBitmap2.prototype.save = function() {
      this.imageStatus = true;
      this.imageStream = this.decoder.getImageDictionary();
    };
    return PdfBitmap2;
  }(PdfImage)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/enum.js
var PdfLayoutType;
(function(PdfLayoutType2) {
  PdfLayoutType2[PdfLayoutType2["Paginate"] = 0] = "Paginate";
  PdfLayoutType2[PdfLayoutType2["OnePage"] = 1] = "OnePage";
})(PdfLayoutType || (PdfLayoutType = {}));
var PdfLayoutBreakType;
(function(PdfLayoutBreakType2) {
  PdfLayoutBreakType2[PdfLayoutBreakType2["FitPage"] = 0] = "FitPage";
  PdfLayoutBreakType2[PdfLayoutBreakType2["FitElement"] = 1] = "FitElement";
  PdfLayoutBreakType2[PdfLayoutBreakType2["FitColumnsToPage"] = 2] = "FitColumnsToPage";
})(PdfLayoutBreakType || (PdfLayoutBreakType = {}));
var PathPointType;
(function(PathPointType2) {
  PathPointType2[PathPointType2["Start"] = 0] = "Start";
  PathPointType2[PathPointType2["Line"] = 1] = "Line";
  PathPointType2[PathPointType2["Bezier3"] = 3] = "Bezier3";
  PathPointType2[PathPointType2["Bezier"] = 3] = "Bezier";
  PathPointType2[PathPointType2["PathTypeMask"] = 7] = "PathTypeMask";
  PathPointType2[PathPointType2["DashMode"] = 16] = "DashMode";
  PathPointType2[PathPointType2["PathMarker"] = 32] = "PathMarker";
  PathPointType2[PathPointType2["CloseSubpath"] = 128] = "CloseSubpath";
})(PathPointType || (PathPointType = {}));

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/pdf-writer.js
var PdfWriter = (
  /** @class */
  function() {
    function PdfWriter2(stream) {
      this.streamWriter = stream;
    }
    Object.defineProperty(PdfWriter2.prototype, "document", {
      //properties
      /**
       * Gets and Sets the `document`.
       * @private
       */
      get: function() {
        return this.pdfDocument;
      },
      set: function(value) {
        this.pdfDocument = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfWriter2.prototype, "position", {
      /**
       * Gets the `position`.
       * @private
       */
      get: function() {
        return this.streamWriter.buffer.size;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfWriter2.prototype, "length", {
      /**
       * Gets  the `length` of the stream'.
       * @private
       */
      get: function() {
        return this.streamWriter.buffer.size;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfWriter2.prototype, "stream", {
      /**
       * Gets the `stream`.
       * @private
       */
      get: function() {
        return this.streamWriter;
      },
      enumerable: true,
      configurable: true
    });
    PdfWriter2.prototype.write = function(overload) {
      var data = [];
      var tempOverload = overload;
      this.streamWriter.write(tempOverload);
    };
    return PdfWriter2;
  }()
);
var PdfWriterHelper = (
  /** @class */
  function() {
    function PdfWriterHelper2() {
      this.buffer = new PdfArrayBuffer();
    }
    PdfWriterHelper2.prototype.write = function(data) {
      this.buffer.write(data);
    };
    PdfWriterHelper2.prototype.destroy = function() {
      if (this.buffer) {
        this.buffer.destroy();
        this.buffer = void 0;
      }
    };
    return PdfWriterHelper2;
  }()
);
var PdfArrayBuffer = (
  /** @class */
  function() {
    function PdfArrayBuffer2() {
      this.buffer = [];
    }
    Object.defineProperty(PdfArrayBuffer2.prototype, "size", {
      /**
       * Gets the `size`.
       * @private
       */
      get: function() {
        return this.buffer.length;
      },
      enumerable: true,
      configurable: true
    });
    PdfArrayBuffer2.prototype.write = function(value) {
      for (var i = 0; i < value.length; i++) {
        this.buffer.push(value.charCodeAt(i) & 255);
      }
    };
    PdfArrayBuffer2.prototype.destroy = function() {
      if (this.buffer) {
        this.buffer = [];
        this.buffer = void 0;
      }
    };
    return PdfArrayBuffer2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/enum.js
var ObjectStatus;
(function(ObjectStatus2) {
  ObjectStatus2[ObjectStatus2["None"] = 0] = "None";
  ObjectStatus2[ObjectStatus2["Registered"] = 1] = "Registered";
})(ObjectStatus || (ObjectStatus = {}));

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/pdf-main-object-collection.js
var PdfMainObjectCollection = (
  /** @class */
  function() {
    function PdfMainObjectCollection2() {
      this.objectCollections = [];
      this.mainObjectCollection = new Dictionary();
      this.primitiveObjectCollection = new Dictionary();
    }
    Object.defineProperty(PdfMainObjectCollection2.prototype, "count", {
      //Properties
      /**
       * Gets the `count`.
       * @private
       */
      get: function() {
        return this.objectCollections.length;
      },
      enumerable: true,
      configurable: true
    });
    PdfMainObjectCollection2.prototype.items = function(index) {
      return this.objectCollections[index];
    };
    Object.defineProperty(PdfMainObjectCollection2.prototype, "outIsNew", {
      //Methods
      /**
       * Specifies the value of `IsNew`.
       * @private
       */
      get: function() {
        return this.isNew;
      },
      enumerable: true,
      configurable: true
    });
    PdfMainObjectCollection2.prototype.add = function(element2) {
      var objInfo = new ObjectInfo(element2);
      this.objectCollections.push(objInfo);
      if (!this.primitiveObjectCollection.containsKey(element2)) {
        this.primitiveObjectCollection.setValue(element2, this.objectCollections.length - 1);
      }
      element2.position = this.index = this.objectCollections.length - 1;
      element2.status = ObjectStatus.Registered;
    };
    PdfMainObjectCollection2.prototype.lookFor = function(obj) {
      var index = -1;
      if (obj.position !== -1) {
        return obj.position;
      }
      if (this.primitiveObjectCollection.containsKey(obj) && this.count === this.primitiveObjectCollection.size()) {
        index = this.primitiveObjectCollection.getValue(obj);
      } else {
        for (var i = this.count - 1; i >= 0; i--) {
          var oi = this.objectCollections[i];
          if (oi.object === obj) {
            index = i;
            break;
          }
        }
      }
      return index;
    };
    PdfMainObjectCollection2.prototype.getReference = function(index, isNew) {
      this.index = this.lookFor(index);
      var reference;
      this.isNew = false;
      var oi = this.objectCollections[this.index];
      reference = oi.reference;
      var obj = {
        reference,
        wasNew: isNew
      };
      return obj;
    };
    PdfMainObjectCollection2.prototype.trySetReference = function(obj, reference, found) {
      var result = true;
      found = true;
      this.index = this.lookFor(obj);
      var oi = this.objectCollections[this.index];
      oi.setReference(reference);
      return result;
    };
    PdfMainObjectCollection2.prototype.destroy = function() {
      for (var _i = 0, _a = this.objectCollections; _i < _a.length; _i++) {
        var obj = _a[_i];
        if (obj !== void 0) {
          obj.pdfObject.position = -1;
          obj.pdfObject.isSaving = void 0;
          obj.pdfObject.objectCollectionIndex = void 0;
          obj.pdfObject.position = void 0;
        }
      }
      this.objectCollections = [];
      this.mainObjectCollection = new Dictionary();
      this.primitiveObjectCollection = new Dictionary();
    };
    return PdfMainObjectCollection2;
  }()
);
var ObjectInfo = (
  /** @class */
  function() {
    function ObjectInfo2(obj, reference) {
      this.pdfObject = obj;
      this.pdfReference = reference;
    }
    Object.defineProperty(ObjectInfo2.prototype, "object", {
      //Properties
      /**
       * Gets the `object`.
       * @private
       */
      get: function() {
        return this.pdfObject;
      },
      set: function(value) {
        this.pdfObject = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ObjectInfo2.prototype, "reference", {
      /**
       * Gets the `reference`.
       * @private
       */
      get: function() {
        return this.pdfReference;
      },
      enumerable: true,
      configurable: true
    });
    ObjectInfo2.prototype.setReference = function(reference) {
      this.pdfReference = reference;
    };
    return ObjectInfo2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/pdf-document-base.js
var PdfDocumentBase = (
  /** @class */
  function() {
    function PdfDocumentBase2(document2) {
      this.isStreamCopied = false;
      if (document2 instanceof PdfDocument) {
        this.document = document2;
      }
    }
    Object.defineProperty(PdfDocumentBase2.prototype, "pdfObjects", {
      //Prpperties
      /**
       * Gets the `PDF objects` collection, which stores all objects and references to it..
       * @private
       */
      get: function() {
        return this.objects;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentBase2.prototype, "crossTable", {
      /**
       * Gets the `cross-reference` table.
       * @private
       */
      get: function() {
        return this.pdfCrossTable;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentBase2.prototype, "currentSavingObj", {
      /**
       * Gets or sets the current saving `object number`.
       * @private
       */
      get: function() {
        return this.currentSavingObject;
      },
      set: function(value) {
        this.currentSavingObject = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentBase2.prototype, "catalog", {
      /**
       * Gets the PDF document `catalog`.
       * @private
       */
      get: function() {
        return this.pdfCatalog;
      },
      set: function(value) {
        this.pdfCatalog = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentBase2.prototype, "viewerPreferences", {
      /**
       * Gets viewer preferences for presenting the PDF document in a viewer.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets viewer preferences
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this.pdfCatalog.viewerPreferences;
      },
      enumerable: true,
      configurable: true
    });
    PdfDocumentBase2.prototype.setMainObjectCollection = function(mainObjectCollection) {
      this.objects = mainObjectCollection;
    };
    PdfDocumentBase2.prototype.setCrossTable = function(cTable) {
      this.pdfCrossTable = cTable;
    };
    PdfDocumentBase2.prototype.setCatalog = function(catalog) {
      this.pdfCatalog = catalog;
    };
    PdfDocumentBase2.prototype.save = function(filename) {
      var _this = this;
      var encoding = new Encoding(true);
      var SW = new StreamWriter(encoding);
      if (typeof filename === "undefined") {
        var encoding_1 = new Encoding(true);
        var SW_1 = new StreamWriter(encoding_1);
        return new Promise(function(resolve, reject) {
          var obj = {};
          obj.blobData = new Blob([_this.document.docSave(SW_1, true)], {
            type: "application/pdf"
          });
          resolve(obj);
        });
      } else {
        this.document.docSave(SW, filename, true);
      }
    };
    PdfDocumentBase2.prototype.clone = function() {
      return this.document;
    };
    PdfDocumentBase2.prototype._save = function() {
      return this.document._docSave();
    };
    return PdfDocumentBase2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/cross-table.js
var ObjectType;
(function(ObjectType2) {
  ObjectType2[ObjectType2["Free"] = 0] = "Free";
  ObjectType2[ObjectType2["Normal"] = 1] = "Normal";
  ObjectType2[ObjectType2["Packed"] = 2] = "Packed";
})(ObjectType || (ObjectType = {}));

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/pdf-viewer-preferences.js
var PdfViewerPreferences = (
  /** @class */
  function() {
    function PdfViewerPreferences2(catalog) {
      this._dictionaryProperties = new DictionaryProperties();
      this._centerWindow = false;
      this._fitWindow = false;
      this._displayTitle = false;
      this._splitWindow = false;
      this._hideMenuBar = false;
      this._hideToolBar = false;
      this._hideWindowUI = false;
      this._pageMode = PdfPageMode.UseNone;
      this._pageLayout = PdfPageLayout.SinglePage;
      this._dictionary = new PdfDictionary();
      this._duplex = DuplexMode.None;
      this._catalog = catalog;
    }
    Object.defineProperty(PdfViewerPreferences2.prototype, "centerWindow", {
      /**
       * A flag specifying whether to position the document’s window in the center of the screen.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Gets the center window
       * let centerWindow : boolean = viewerPreferences.centerWindow;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this._centerWindow;
      },
      /**
       * A flag specifying whether to position the document’s window in the center of the screen.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Sets the center window
       * viewerPreferences.centerWindow = true;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      set: function(value) {
        this._centerWindow = value;
        this._dictionary.items.setValue(this._dictionaryProperties.centerWindow, new PdfBoolean(this._centerWindow));
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfViewerPreferences2.prototype, "displayTitle", {
      /**
       * A flag specifying whether the window’s title bar should display the document title taken
       * from the Title entry of the document information dictionary. If false, the title bar
       * should instead display the name of the PDF file containing the document.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Gets the display title
       * let displayTitle : boolean = viewerPreferences.displayTitle;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this._displayTitle;
      },
      /**
       * A flag specifying whether the window’s title bar should display the document title taken
       * from the Title entry of the document information dictionary. If false, the title bar
       * should instead display the name of the PDF file containing the document.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Sets the display title
       * viewerPreferences.displayTitle = true;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      set: function(value) {
        this._displayTitle = value;
        this._dictionary.items.setValue(this._dictionaryProperties.displayTitle, new PdfBoolean(this._displayTitle));
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfViewerPreferences2.prototype, "fitWindow", {
      /**
       * A flag specifying whether to resize the document’s window to fit the size of the first
       * displayed page.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Gets the fit window
       * let fitWindow : boolean = viewerPreferences.fitWindow;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this._fitWindow;
      },
      /**
       * A flag specifying whether to resize the document’s window to fit the size of the first
       * displayed page.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Sets the fit window
       * viewerPreferences.fitWindow = true;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      set: function(value) {
        this._fitWindow = value;
        this._dictionary.items.setValue(this._dictionaryProperties.fitWindow, new PdfBoolean(this._fitWindow));
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfViewerPreferences2.prototype, "hideMenuBar", {
      /**
       * A flag specifying whether to hide the viewer application’s menu bar when the
       * document is active.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Gets the hide menu bar
       * let hideMenuBar: boolean = viewerPreferences.hideMenuBar;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this._hideMenuBar;
      },
      /**
       * A flag specifying whether to hide the viewer application’s menu bar when the
       * document is active.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Sets the hide menu bar
       * viewerPreferences.hideMenuBar = true;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      set: function(value) {
        this._hideMenuBar = value;
        this._dictionary.items.setValue(this._dictionaryProperties.hideMenuBar, new PdfBoolean(this._hideMenuBar));
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfViewerPreferences2.prototype, "hideToolBar", {
      /**
       * A flag specifying whether to hide the viewer application’s tool bar when the
       * document is active.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Gets the hide tool bar
       * let hideToolBar: boolean = viewerPreferences.hideToolBar;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this._hideToolBar;
      },
      /**
       * A flag specifying whether to hide the viewer application’s tool bar when the
       * document is active.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Sets the hide tool bar
       * viewerPreferences.hideToolbar = true;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      set: function(value) {
        this._hideToolBar = value;
        this._dictionary.items.setValue(this._dictionaryProperties.hideToolBar, new PdfBoolean(this._hideToolBar));
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfViewerPreferences2.prototype, "hideWindowUI", {
      /**
       * A flag specifying whether to hide user interface elements in the document’s window
       * (such as scroll bars and navigation controls), leaving only the document’s contents displayed.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Gets the hide window UI
       * let hideWindowUI: boolean = viewerPreferences.hideWindowUI;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this._hideWindowUI;
      },
      /**
       * A flag specifying whether to hide user interface elements in the document’s window
       * (such as scroll bars and navigation controls), leaving only the document’s contents displayed.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Sets the hide window UI
       * viewerPreferences.hideWindowUI = true;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      set: function(value) {
        this._hideWindowUI = value;
        this._dictionary.items.setValue(this._dictionaryProperties.hideWindowUI, new PdfBoolean(this._hideWindowUI));
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfViewerPreferences2.prototype, "pageMode", {
      /**
       * A name object specifying how the document should be displayed when opened.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Gets the page mode
       * let pageMode: PdfPageMode = viewerPreferences.pageMode;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this._pageMode;
      },
      /**
       * A name object specifying how the document should be displayed when opened.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Sets the page mode
       * viewerPreferences.pageMode = PdfPageMode.UseOutlines;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      set: function(value) {
        this._pageMode = value;
        this._catalog.items.setValue(this._dictionaryProperties.pageMode, new PdfName(this._mapPageMode(this._pageMode)));
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfViewerPreferences2.prototype, "duplex", {
      /**
       * Gets print duplex mode handling option to use when printing the file from the print dialog.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Gets the duplex
       * let duplex : DuplexMode = viewerPreferences.duplex;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this._duplex;
      },
      /**
       * Sets print duplex mode handling option to use when printing the file from the print dialog.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Sets the duplex
       * viewerPreferences.duplex = DuplexMode.DuplexFlipLongEdge;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      set: function(value) {
        this._duplex = value;
        this._catalog.items.setValue(this._dictionaryProperties.duplex, new PdfName(this._mapDuplexMode(this._duplex)));
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfViewerPreferences2.prototype, "pageLayout", {
      /**
       * A name object specifying the page layout to be used when the document is opened.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Gets the page layout
       * let pageLayout : PdfPageLayout = viewerPreferences.pageLayout;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this._pageLayout;
      },
      /**
       * A name object specifying the page layout to be used when the document is opened.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Sets the page layout
       * viewerPreferences.pageLayout = PdfPageLayout.TwoColumnLeft;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      set: function(value) {
        this._pageLayout = value;
        this._catalog.items.setValue(this._dictionaryProperties.pageLayout, new PdfName(this._mapPageLayout(this._pageLayout)));
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfViewerPreferences2.prototype, "pageScaling", {
      /**
       * Gets the page scaling option to be selected
       * when a print dialog is displayed for this document.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Gets the page scaling
       * let pageScaling : PageScalingMode = viewerPreferences.pageScaling;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this._pageScaling;
      },
      /**
       * Sets the page scaling option to be selected
       * when a print dialog is displayed for this document.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Sets the page scaling
       * viewerPreferences.pageScaling = PageScalingMode.None;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      set: function(value) {
        this._pageScaling = value;
        if (this._pageScaling === PageScalingMode.AppDefault && this._dictionary.items.containsKey(this._dictionaryProperties.printScaling)) {
          this._dictionary.items.remove(this._dictionaryProperties.printScaling);
        } else if (this._pageScaling === PageScalingMode.None) {
          this._dictionary.items.setValue(this._dictionaryProperties.printScaling, new PdfName("None"));
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfViewerPreferences2.prototype, "element", {
      /**
       * Primivie element
       *
       * @private
       */
      get: function() {
        return this._dictionary;
      },
      enumerable: true,
      configurable: true
    });
    PdfViewerPreferences2.prototype._mapDuplexMode = function(mode) {
      switch (mode) {
        case DuplexMode.Simplex:
          return "Simplex";
        case DuplexMode.DuplexFlipShortEdge:
          return "DuplexFlipShortEdge";
        case DuplexMode.DuplexFlipLongEdge:
          return "DuplexFlipLongEdge";
        case DuplexMode.None:
          return "None";
      }
    };
    PdfViewerPreferences2.prototype._mapPageMode = function(mode) {
      switch (mode) {
        case PdfPageMode.UseNone:
          return "UseNone";
        case PdfPageMode.UseOutlines:
          return "UseOutlines";
        case PdfPageMode.UseThumbs:
          return "UseThumbs";
        case PdfPageMode.FullScreen:
          return "FullScreen";
        case PdfPageMode.UseOC:
          return "UseOC";
        case PdfPageMode.UseAttachments:
          return "UseAttachments";
      }
    };
    PdfViewerPreferences2.prototype._mapPageLayout = function(layout) {
      switch (layout) {
        case PdfPageLayout.SinglePage:
          return "SinglePage";
        case PdfPageLayout.OneColumn:
          return "OneColumn";
        case PdfPageLayout.TwoColumnLeft:
          return "TwoColumnLeft";
        case PdfPageLayout.TwoColumnRight:
          return "TwoColumnRight";
        case PdfPageLayout.TwoPageLeft:
          return "TwoPageLeft";
        case PdfPageLayout.TwoPageRight:
          return "TwoPageRight";
      }
    };
    return PdfViewerPreferences2;
  }()
);
var PdfPageMode;
(function(PdfPageMode2) {
  PdfPageMode2[PdfPageMode2["UseNone"] = 0] = "UseNone";
  PdfPageMode2[PdfPageMode2["UseOutlines"] = 1] = "UseOutlines";
  PdfPageMode2[PdfPageMode2["UseThumbs"] = 2] = "UseThumbs";
  PdfPageMode2[PdfPageMode2["FullScreen"] = 3] = "FullScreen";
  PdfPageMode2[PdfPageMode2["UseOC"] = 4] = "UseOC";
  PdfPageMode2[PdfPageMode2["UseAttachments"] = 5] = "UseAttachments";
})(PdfPageMode || (PdfPageMode = {}));
var PdfPageLayout;
(function(PdfPageLayout2) {
  PdfPageLayout2[PdfPageLayout2["SinglePage"] = 0] = "SinglePage";
  PdfPageLayout2[PdfPageLayout2["OneColumn"] = 1] = "OneColumn";
  PdfPageLayout2[PdfPageLayout2["TwoColumnLeft"] = 2] = "TwoColumnLeft";
  PdfPageLayout2[PdfPageLayout2["TwoColumnRight"] = 3] = "TwoColumnRight";
  PdfPageLayout2[PdfPageLayout2["TwoPageLeft"] = 4] = "TwoPageLeft";
  PdfPageLayout2[PdfPageLayout2["TwoPageRight"] = 5] = "TwoPageRight";
})(PdfPageLayout || (PdfPageLayout = {}));
var DuplexMode;
(function(DuplexMode2) {
  DuplexMode2[DuplexMode2["Simplex"] = 0] = "Simplex";
  DuplexMode2[DuplexMode2["DuplexFlipShortEdge"] = 1] = "DuplexFlipShortEdge";
  DuplexMode2[DuplexMode2["DuplexFlipLongEdge"] = 2] = "DuplexFlipLongEdge";
  DuplexMode2[DuplexMode2["None"] = 3] = "None";
})(DuplexMode || (DuplexMode = {}));
var PageScalingMode;
(function(PageScalingMode2) {
  PageScalingMode2[PageScalingMode2["AppDefault"] = 0] = "AppDefault";
  PageScalingMode2[PageScalingMode2["None"] = 1] = "None";
})(PageScalingMode || (PageScalingMode = {}));

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/pdf-catalog.js
var __extends60 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfCatalog = (
  /** @class */
  function(_super) {
    __extends60(PdfCatalog2, _super);
    function PdfCatalog2() {
      var _this = _super.call(this) || this;
      _this.sections = null;
      _this.tempDictionaryProperties = new DictionaryProperties();
      _this.items.setValue(new DictionaryProperties().type, new PdfName("Catalog"));
      return _this;
    }
    Object.defineProperty(PdfCatalog2.prototype, "pages", {
      //Properties
      /**
       * Gets or sets the sections, which contain `pages`.
       * @private
       */
      get: function() {
        return this.sections;
      },
      set: function(value) {
        var dictionary = value.element;
        this.sections = value;
        this.items.setValue(this.tempDictionaryProperties.pages, new PdfReferenceHolder(value));
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfCatalog2.prototype, "viewerPreferences", {
      /**
       * Gets the viewer preferences of the PDF document.
       * @private
       */
      get: function() {
        if (this._viewerPreferences === null || typeof this._viewerPreferences === "undefined") {
          this._viewerPreferences = new PdfViewerPreferences(this);
          this.items.setValue(this.tempDictionaryProperties.viewerPreferences, new PdfReferenceHolder(this._viewerPreferences.element));
        }
        return this._viewerPreferences;
      },
      enumerable: true,
      configurable: true
    });
    return PdfCatalog2;
  }(PdfDictionary)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/pdf-cross-table.js
var PdfCrossTable = (
  /** @class */
  function() {
    function PdfCrossTable2() {
      this.objects = new Dictionary();
      this.maxGenNumIndex = 0;
      this.objectCount = 0;
      this.dictionaryProperties = new DictionaryProperties();
    }
    Object.defineProperty(PdfCrossTable2.prototype, "isMerging", {
      //Properties
      /**
       * Gets or sets if the document `is merged`.
       * @private
       */
      get: function() {
        return this.merging;
      },
      set: function(value) {
        this.merging = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfCrossTable2.prototype, "trailer", {
      /**
       * Gets the `trailer`.
       * @private
       */
      get: function() {
        if (this.internalTrailer == null) {
          this.internalTrailer = new PdfStream();
        }
        return this.internalTrailer;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfCrossTable2.prototype, "document", {
      /**
       * Gets or sets the main `PdfDocument` class instance.
       * @private
       */
      get: function() {
        return this.pdfDocument;
      },
      set: function(value) {
        this.pdfDocument = value;
        this.items = this.pdfDocument.pdfObjects;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfCrossTable2.prototype, "pdfObjects", {
      /**
       * Gets the catched `PDF object` main collection.
       * @private
       */
      get: function() {
        return this.items;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfCrossTable2.prototype, "objectCollection", {
      /**
       * Gets the `object collection`.
       * @private
       */
      get: function() {
        return this.pdfDocument.pdfObjects;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfCrossTable2.prototype, "count", {
      /**
       * Gets or sets the `number of the objects` within the document.
       * @private
       */
      get: function() {
        return this.objectCount;
      },
      set: function(value) {
        this.objectCount = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfCrossTable2.prototype, "nextObjNumber", {
      /**
       * Returns `next available object number`.
       * @private
       */
      get: function() {
        this.count = this.count + 1;
        return this.count;
      },
      enumerable: true,
      configurable: true
    });
    PdfCrossTable2.prototype.save = function(writer, filename) {
      this._saveProcess(writer);
      if (typeof filename === "undefined") {
        return writer.stream.buffer;
      } else {
        writer.stream.save(filename);
      }
    };
    PdfCrossTable2.prototype._saveProcess = function(writer) {
      this.saveHead(writer);
      this.mappedReferences = null;
      this.objects.clear();
      this.markTrailerReferences();
      this.saveObjects(writer);
      var saveCount = this.count;
      var xrefPos = writer.position;
      this.registerObject(0, new PdfReference(0, -1), true);
      var prevXRef = 0;
      writer.write(Operators.xref);
      writer.write(Operators.newLine);
      this.saveSections(writer);
      this.saveTrailer(writer, this.count, prevXRef);
      this.saveTheEndess(writer, xrefPos);
      this.count = saveCount;
      for (var i = 0; i < this.objectCollection.count; ++i) {
        var oi = this.objectCollection.items(i);
        oi.object.isSaving = false;
      }
    };
    PdfCrossTable2.prototype._save = function(writer) {
      this._saveProcess(writer);
      return new Uint8Array(writer.stream.buffer.buffer);
    };
    PdfCrossTable2.prototype.saveTheEndess = function(writer, xrefPos) {
      writer.write(Operators.newLine + Operators.startxref + Operators.newLine);
      writer.write(xrefPos.toString() + Operators.newLine);
      writer.write(Operators.eof + Operators.newLine);
    };
    PdfCrossTable2.prototype.saveTrailer = function(writer, count, prevXRef) {
      writer.write(Operators.trailer + Operators.newLine);
      var trailer = this.trailer;
      trailer.items.setValue(this.dictionaryProperties.size, new PdfNumber(this.objectCount + 1));
      trailer = new PdfDictionary(trailer);
      trailer.setEncrypt(false);
      trailer.save(writer);
    };
    PdfCrossTable2.prototype.saveSections = function(writer) {
      var objectNum = 0;
      var count = 0;
      do {
        count = this.prepareSubsection(objectNum);
        this.saveSubsection(writer, objectNum, count);
        objectNum += count;
      } while (count !== 0);
    };
    PdfCrossTable2.prototype.saveSubsection = function(writer, objectNum, count) {
      if (count <= 0 || objectNum >= this.count) {
        return;
      }
      var subsectionHead = "{0} {1}{2}";
      writer.write(objectNum + " " + (count + 1) + Operators.newLine);
      for (var i = objectNum; i <= objectNum + count; ++i) {
        var obj = this.objects.getValue(i);
        var str = "";
        if (obj.type === ObjectType.Free) {
          str = this.getItem(obj.offset, 65535, true);
        } else {
          str = this.getItem(obj.offset, obj.generation, false);
        }
        writer.write(str);
      }
    };
    PdfCrossTable2.prototype.getItem = function(offset, genNumber, isFree) {
      var returnString = "";
      var addOffsetLength = 10 - offset.toString().length;
      if (genNumber <= 0) {
        genNumber = 0;
      }
      var addGenNumberLength = 5 - genNumber.toString().length <= 0 ? 0 : 5 - genNumber.toString().length;
      for (var index = 0; index < addOffsetLength; index++) {
        returnString = returnString + "0";
      }
      returnString = returnString + offset.toString() + " ";
      for (var index = 0; index < addGenNumberLength; index++) {
        returnString = returnString + "0";
      }
      returnString = returnString + genNumber.toString() + " ";
      returnString = returnString + (isFree ? Operators.f : Operators.n) + Operators.newLine;
      return returnString;
    };
    PdfCrossTable2.prototype.prepareSubsection = function(objectNum) {
      var count = 0;
      var i;
      var total = this.count;
      for (var k = 0; k < this.document.pdfObjects.count; k++) {
        var reference = this.document.pdfObjects.items(k).reference;
        var refString = reference.toString();
        var refArray = refString.split(" ");
      }
      if (objectNum >= total) {
        return count;
      }
      for (i = objectNum; i < total; ++i) {
        break;
      }
      objectNum = i;
      for (; i < total; ++i) {
        ++count;
      }
      return count;
    };
    PdfCrossTable2.prototype.markTrailerReferences = function() {
      var tempArray;
      var keys = this.trailer.items.keys();
      var values = this.trailer.items.values();
    };
    PdfCrossTable2.prototype.saveHead = function(writer) {
      var version = this.generateFileVersion(writer.document);
      writer.write("%PDF-" + version);
      writer.write(Operators.newLine);
    };
    PdfCrossTable2.prototype.generateFileVersion = function(document2) {
      var iVersion = 4;
      var version = "1." + iVersion.toString();
      return version;
    };
    PdfCrossTable2.prototype.getReference = function(obj, bNew) {
      if (typeof bNew === "undefined") {
        var wasNew = false;
        return this.getReference(obj, wasNew);
      } else {
        return this.getSubReference(obj, bNew);
      }
    };
    PdfCrossTable2.prototype.getSubReference = function(obj, bNew) {
      var isNew = false;
      var wasNew;
      var reference = null;
      if (this.items.count > 0 && obj.objectCollectionIndex > 0 && this.items.count > obj.objectCollectionIndex - 1) {
        var tempObj = this.document.pdfObjects.getReference(obj, wasNew);
        reference = tempObj.reference;
        wasNew = tempObj.wasNew;
      }
      if (reference == null) {
        if (obj.status === ObjectStatus.Registered) {
          wasNew = false;
        } else {
          wasNew = true;
        }
      } else {
        wasNew = false;
      }
      if (reference == null) {
        var objnumber = this.nextObjNumber;
        reference = new PdfReference(objnumber, 0);
        var found = void 0;
        if (wasNew) {
          this.document.pdfObjects.add(obj);
          this.document.pdfObjects.trySetReference(obj, reference, found);
          var tempIndex = this.document.pdfObjects.count - 1;
          var tempkey = this.document.pdfObjects.objectCollections[tempIndex].reference.objNumber;
          var tempvalue = this.document.pdfObjects.objectCollections[this.document.pdfObjects.count - 1];
          this.document.pdfObjects.mainObjectCollection.setValue(tempkey, tempvalue);
          obj.position = -1;
        } else {
          this.document.pdfObjects.trySetReference(obj, reference, found);
        }
        obj.objectCollectionIndex = reference.objNumber;
        obj.status = ObjectStatus.None;
        isNew = true;
      }
      bNew = isNew || this.bForceNew;
      return reference;
    };
    PdfCrossTable2.prototype.saveObjects = function(writer) {
      var objectCollection = this.objectCollection;
      for (var i = 0; i < objectCollection.count; ++i) {
        var oi = objectCollection.items(i);
        var obj = oi.object;
        obj.isSaving = true;
        this.saveIndirectObject(obj, writer);
      }
    };
    PdfCrossTable2.prototype.saveIndirectObject = function(obj, writer) {
      var reference = this.getReference(obj);
      if (obj instanceof PdfCatalog) {
        this.trailer.items.setValue(this.dictionaryProperties.root, reference);
      }
      this.pdfDocument.currentSavingObj = reference;
      var tempArchive = false;
      tempArchive = obj.getArchive();
      var allowedType = !(obj instanceof PdfStream || !tempArchive || obj instanceof PdfCatalog);
      var sigFlag = false;
      this.registerObject(writer.position, reference);
      this.doSaveObject(obj, reference, writer);
    };
    PdfCrossTable2.prototype.doSaveObject = function(obj, reference, writer) {
      writer.write(reference.objNumber.toString());
      writer.write(Operators.whiteSpace);
      writer.write(reference.genNumber.toString());
      writer.write(Operators.whiteSpace);
      writer.write(Operators.obj);
      writer.write(Operators.newLine);
      obj.save(writer);
      writer.write(Operators.endObj);
      writer.write(Operators.newLine);
    };
    PdfCrossTable2.prototype.registerObject = function(offset, reference, free) {
      if (typeof free === "boolean") {
        this.objects.setValue(reference.objNumber, new RegisteredObject(offset, reference, free));
        this.maxGenNumIndex = Math.max(this.maxGenNumIndex, reference.genNumber);
      } else if (typeof free === "undefined") {
        this.objects.setValue(reference.objNumber, new RegisteredObject(offset, reference));
        this.maxGenNumIndex = Math.max(this.maxGenNumIndex, reference.genNumber);
      }
    };
    PdfCrossTable2.dereference = function(obj) {
      var rh = obj;
      if (rh != null) {
        obj = rh.object;
      }
      return obj;
    };
    return PdfCrossTable2;
  }()
);
var RegisteredObject = (
  /** @class */
  function() {
    function RegisteredObject2(offset, reference, free) {
      var tempOffset = offset;
      this.offsetNumber = tempOffset;
      var tempReference = reference;
      this.generation = tempReference.genNumber;
      this.object = tempReference.objNumber;
      if (typeof free === "undefined") {
        this.type = ObjectType.Normal;
      } else {
        this.type = ObjectType.Free;
      }
    }
    Object.defineProperty(RegisteredObject2.prototype, "objectNumber", {
      //Properties
      /**
       * Gets the `object number`.
       * @private
       */
      get: function() {
        return this.object;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RegisteredObject2.prototype, "offset", {
      /**
       * Gets the `offset`.
       * @private
       */
      get: function() {
        var result;
        result = this.offsetNumber;
        return result;
      },
      enumerable: true,
      configurable: true
    });
    return RegisteredObject2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/pdf-stream-writer.js
var PdfStreamWriter = (
  /** @class */
  function() {
    function PdfStreamWriter2(stream) {
      if (stream == null) {
        throw new Error("ArgumentNullException:stream");
      }
      this.stream = stream;
    }
    PdfStreamWriter2.prototype.clear = function() {
      this.stream.clearStream();
    };
    PdfStreamWriter2.prototype.setGraphicsState = function(dictionaryName) {
      if (dictionaryName instanceof PdfName) {
        this.stream.write(dictionaryName.toString());
        this.stream.write(Operators.whiteSpace);
        this.writeOperator(Operators.setGraphicsState);
      } else {
        this.stream.write(Operators.slash);
        this.stream.write(dictionaryName);
        this.stream.write(Operators.whiteSpace);
        this.writeOperator(Operators.setGraphicsState);
      }
    };
    PdfStreamWriter2.prototype.executeObject = function(name) {
      this.stream.write(name.toString());
      this.stream.write(Operators.whiteSpace);
      this.writeOperator(Operators.paintXObject);
      this.stream.write(Operators.newLine);
    };
    PdfStreamWriter2.prototype.closePath = function() {
      this.writeOperator(Operators.closePath);
    };
    PdfStreamWriter2.prototype.clipPath = function(useEvenOddRule) {
      this.stream.write(Operators.clipPath);
      if (useEvenOddRule) {
        this.stream.write(Operators.evenOdd);
      }
      this.stream.write(Operators.whiteSpace);
      this.stream.write(Operators.endPath);
      this.stream.write(Operators.newLine);
    };
    PdfStreamWriter2.prototype.closeFillStrokePath = function(useEvenOddRule) {
      this.stream.write(Operators.closeFillStrokePath);
      if (useEvenOddRule) {
        this.stream.write(Operators.evenOdd);
        this.stream.write(Operators.newLine);
      } else {
        this.stream.write(Operators.newLine);
      }
    };
    PdfStreamWriter2.prototype.fillStrokePath = function(useEvenOddRule) {
      this.stream.write(Operators.fillStroke);
      if (useEvenOddRule) {
        this.stream.write(Operators.evenOdd);
        this.stream.write(Operators.newLine);
      } else {
        this.stream.write(Operators.newLine);
      }
    };
    PdfStreamWriter2.prototype.fillPath = function(useEvenOddRule) {
      this.stream.write(Operators.fill);
      if (useEvenOddRule) {
        this.stream.write(Operators.evenOdd);
        this.stream.write(Operators.newLine);
      } else {
        this.stream.write(Operators.newLine);
      }
    };
    PdfStreamWriter2.prototype.endPath = function() {
      this.writeOperator(Operators.n);
    };
    PdfStreamWriter2.prototype.closeFillPath = function(useEvenOddRule) {
      this.writeOperator(Operators.closePath);
      this.stream.write(Operators.fill);
      if (useEvenOddRule) {
        this.stream.write(Operators.evenOdd);
        this.stream.write(Operators.newLine);
      } else {
        this.stream.write(Operators.newLine);
      }
    };
    PdfStreamWriter2.prototype.closeStrokePath = function() {
      this.writeOperator(Operators.closeStrokePath);
    };
    PdfStreamWriter2.prototype.setTextScaling = function(textScaling) {
      this.stream.write(PdfNumber.floatToString(textScaling));
      this.stream.write(Operators.whiteSpace);
      this.writeOperator(Operators.setTextScaling);
    };
    PdfStreamWriter2.prototype.strokePath = function() {
      this.writeOperator(Operators.stroke);
    };
    PdfStreamWriter2.prototype.restoreGraphicsState = function() {
      this.writeOperator(Operators.restoreState);
    };
    PdfStreamWriter2.prototype.saveGraphicsState = function() {
      this.writeOperator(Operators.saveState);
    };
    PdfStreamWriter2.prototype.startNextLine = function(arg1, arg2) {
      if (typeof arg1 === "undefined") {
        this.writeOperator(Operators.goToNextLine);
      } else if (arg1 instanceof PointF) {
        this.writePoint(arg1);
        this.writeOperator(Operators.setCoords);
      } else {
        this.writePoint(arg1, arg2);
        this.writeOperator(Operators.setCoords);
      }
    };
    PdfStreamWriter2.prototype.showText = function(text) {
      this.checkTextParam(text);
      this.writeText(text);
      this.writeOperator(Operators.setText);
    };
    PdfStreamWriter2.prototype.setLeading = function(leading) {
      this.stream.write(PdfNumber.floatToString(leading));
      this.stream.write(Operators.whiteSpace);
      this.writeOperator(Operators.setTextLeading);
    };
    PdfStreamWriter2.prototype.beginPath = function(x, y) {
      this.writePoint(x, y);
      this.writeOperator(Operators.beginPath);
    };
    PdfStreamWriter2.prototype.beginText = function() {
      this.writeOperator(Operators.beginText);
    };
    PdfStreamWriter2.prototype.endText = function() {
      this.writeOperator(Operators.endText);
    };
    PdfStreamWriter2.prototype.appendRectangle = function(arg1, arg2, arg3, arg4) {
      if (arg1 instanceof RectangleF) {
        this.appendRectangle(arg1.x, arg1.y, arg1.width, arg1.height);
      } else {
        this.writePoint(arg1, arg2);
        this.writePoint(arg3, arg4);
        this.writeOperator(Operators.appendRectangle);
      }
    };
    PdfStreamWriter2.prototype.appendLineSegment = function(arg1, arg2) {
      if (arg1 instanceof PointF) {
        this.appendLineSegment(arg1.x, arg1.y);
      } else {
        this.writePoint(arg1, arg2);
        this.writeOperator(Operators.appendLineSegment);
      }
    };
    PdfStreamWriter2.prototype.setTextRenderingMode = function(renderingMode) {
      this.stream.write(renderingMode.toString());
      this.stream.write(Operators.whiteSpace);
      this.writeOperator(Operators.setRenderingMode);
    };
    PdfStreamWriter2.prototype.setCharacterSpacing = function(charSpacing) {
      this.stream.write(PdfNumber.floatToString(charSpacing));
      this.stream.write(Operators.whiteSpace);
      this.stream.write(Operators.setCharacterSpace);
      this.stream.write(Operators.newLine);
    };
    PdfStreamWriter2.prototype.setWordSpacing = function(wordSpacing) {
      this.stream.write(PdfNumber.floatToString(wordSpacing));
      this.stream.write(Operators.whiteSpace);
      this.writeOperator(Operators.setWordSpace);
    };
    PdfStreamWriter2.prototype.showNextLineText = function(arg1, arg2) {
      if (arg1 instanceof PdfString) {
        this.checkTextParam(arg1);
        this.writeText(arg1);
        this.writeOperator(Operators.setTextOnNewLine);
      } else {
        this.checkTextParam(arg1);
        this.writeText(arg1, arg2);
        this.writeOperator(Operators.setTextOnNewLine);
      }
    };
    PdfStreamWriter2.prototype.setColorSpace = function(arg1, arg2) {
      if (arg1 instanceof PdfName && typeof arg2 === "boolean") {
        var temparg1 = arg1;
        var temparg2 = arg2;
        var op = temparg2 ? Operators.selectcolorspaceforstroking : Operators.selectcolorspacefornonstroking;
        this.stream.write(temparg1.toString());
        this.stream.write(Operators.whiteSpace);
        this.stream.write(op);
        this.stream.write(Operators.newLine);
      } else {
        var temparg1 = arg1;
        var temparg2 = arg2;
        this.setColorSpace(new PdfName(temparg1), temparg2);
      }
    };
    PdfStreamWriter2.prototype.modifyCtm = function(matrix) {
      if (matrix == null) {
        throw new Error("ArgumentNullException:matrix");
      }
      this.stream.write(matrix.toString());
      this.stream.write(Operators.whiteSpace);
      this.writeOperator(Operators.modifyCtm);
    };
    PdfStreamWriter2.prototype.setFont = function(font, name, size) {
      if (typeof name === "string") {
        this.setFont(font, new PdfName(name), size);
      } else {
        if (font == null) {
          throw new Error("ArgumentNullException:font");
        }
        this.stream.write(name.toString());
        this.stream.write(Operators.whiteSpace);
        this.stream.write(PdfNumber.floatToString(size));
        this.stream.write(Operators.whiteSpace);
        this.writeOperator(Operators.setFont);
      }
    };
    PdfStreamWriter2.prototype.writeOperator = function(opcode) {
      this.stream.write(opcode);
      this.stream.write(Operators.newLine);
    };
    PdfStreamWriter2.prototype.checkTextParam = function(text) {
      if (text == null) {
        throw new Error("ArgumentNullException:text");
      }
      if (typeof text === "string" && text === "") {
        throw new Error("ArgumentException:The text can not be an empty string, text");
      }
    };
    PdfStreamWriter2.prototype.writeText = function(arg1, arg2) {
      if (arg1 instanceof PdfString && typeof arg2 === "undefined") {
        this.stream.write(arg1.pdfEncode());
      } else {
        var start = void 0;
        var end = void 0;
        if (arg2) {
          start = PdfString.hexStringMark[0];
          end = PdfString.hexStringMark[1];
        } else {
          start = PdfString.stringMark[0];
          end = PdfString.stringMark[1];
        }
        this.stream.write(start);
        this.stream.write(arg1);
        this.stream.write(end);
      }
    };
    PdfStreamWriter2.prototype.writePoint = function(arg1, arg2) {
      if (arg1 instanceof PointF && typeof arg2 === "undefined") {
        this.writePoint(arg1.x, arg1.y);
      } else {
        var temparg1 = arg1;
        this.stream.write(PdfNumber.floatToString(temparg1));
        this.stream.write(Operators.whiteSpace);
        arg2 = this.updateY(arg2);
        this.stream.write(PdfNumber.floatToString(arg2));
        this.stream.write(Operators.whiteSpace);
      }
    };
    PdfStreamWriter2.prototype.updateY = function(arg) {
      return -arg;
    };
    PdfStreamWriter2.prototype.write = function(string) {
      var builder = "";
      builder += string;
      builder += Operators.newLine;
      this.writeOperator(builder);
    };
    PdfStreamWriter2.prototype.writeComment = function(comment) {
      if (comment != null && comment.length > 0) {
        var builder = "";
        builder += Operators.comment;
        builder += Operators.whiteSpace;
        builder += comment;
        this.writeOperator(builder);
      } else {
        throw new Error("Invalid comment");
      }
    };
    PdfStreamWriter2.prototype.setColorAndSpace = function(color, colorSpace, forStroking) {
      if (!color.isEmpty) {
        this.stream.write(color.toString(colorSpace, forStroking));
        this.stream.write(Operators.newLine);
      }
    };
    PdfStreamWriter2.prototype.setLineDashPattern = function(pattern, patternOffset) {
      this.setLineDashPatternHelper(pattern, patternOffset);
    };
    PdfStreamWriter2.prototype.setLineDashPatternHelper = function(pattern, patternOffset) {
      var tempPattern = "[";
      if (pattern.length > 1) {
        for (var index = 0; index < pattern.length; index++) {
          if (index === pattern.length - 1) {
            tempPattern += pattern[index].toString();
          } else {
            tempPattern += pattern[index].toString() + " ";
          }
        }
      }
      tempPattern += "] ";
      tempPattern += patternOffset.toString();
      tempPattern += " " + Operators.setDashPattern;
      this.stream.write(tempPattern);
      this.stream.write(Operators.newLine);
    };
    PdfStreamWriter2.prototype.setMiterLimit = function(miterLimit) {
      this.stream.write(PdfNumber.floatToString(miterLimit));
      this.stream.write(Operators.whiteSpace);
      this.writeOperator(Operators.setMiterLimit);
    };
    PdfStreamWriter2.prototype.setLineWidth = function(width) {
      this.stream.write(PdfNumber.floatToString(width));
      this.stream.write(Operators.whiteSpace);
      this.writeOperator(Operators.setLineWidth);
    };
    PdfStreamWriter2.prototype.setLineCap = function(lineCapStyle) {
      this.stream.write(lineCapStyle.toString());
      this.stream.write(Operators.whiteSpace);
      this.writeOperator(Operators.setLineCapStyle);
    };
    PdfStreamWriter2.prototype.setLineJoin = function(lineJoinStyle) {
      this.stream.write(lineJoinStyle.toString());
      this.stream.write(Operators.whiteSpace);
      this.writeOperator(Operators.setLineJoinStyle);
    };
    Object.defineProperty(PdfStreamWriter2.prototype, "position", {
      //IPdfWriter members
      /**
       * Gets or sets the current `position` within the stream.
       * @private
       */
      get: function() {
        return this.stream.position;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStreamWriter2.prototype, "length", {
      /**
       * Gets `stream length`.
       * @private
       */
      get: function() {
        var returnValue = 0;
        if (this.stream.data.length !== 0 && this.stream.data.length !== -1) {
          for (var index = 0; index < this.stream.data.length; index++) {
            returnValue += this.stream.data[index].length;
          }
        }
        return returnValue;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStreamWriter2.prototype, "document", {
      /**
       * Gets and Sets the `current document`.
       * @private
       */
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    PdfStreamWriter2.prototype.appendBezierSegment = function(arg1, arg2, arg3, arg4, arg5, arg6) {
      if (arg1 instanceof PointF && arg2 instanceof PointF && arg3 instanceof PointF) {
        this.writePoint(arg1.x, arg1.y);
        this.writePoint(arg2.x, arg2.y);
        this.writePoint(arg3.x, arg3.y);
      } else {
        this.writePoint(arg1, arg2);
        this.writePoint(arg3, arg4);
        this.writePoint(arg5, arg6);
      }
      this.writeOperator(Operators.appendbeziercurve);
    };
    PdfStreamWriter2.prototype.setColourWithPattern = function(colours, patternName, forStroking) {
      if (colours != null) {
        var count = colours.length;
        var i = 0;
        for (i = 0; i < count; ++i) {
          this.stream.write(colours[i].toString());
          this.stream.write(Operators.whiteSpace);
        }
      }
      if (patternName != null) {
        this.stream.write(patternName.toString());
        this.stream.write(Operators.whiteSpace);
      }
      if (forStroking) {
        this.writeOperator(Operators.setColorAndPatternStroking);
      } else {
        this.writeOperator(Operators.setColorAndPattern);
      }
    };
    return PdfStreamWriter2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-font.js
var PdfFont = (
  /** @class */
  function() {
    function PdfFont2(size, style) {
      this.fontStyle = PdfFontStyle.Regular;
      if (typeof size === "number" && typeof style === "undefined") {
        this.fontSize = size;
      } else {
        this.fontSize = size;
        this.setStyle(style);
      }
    }
    Object.defineProperty(PdfFont2.prototype, "name", {
      //Properties
      /**
       * Gets the face name of this Font.
       * @private
       */
      get: function() {
        return this.metrics.name;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfFont2.prototype, "size", {
      /**
       * Gets the size of this font.
       * @private
       */
      get: function() {
        return this.fontSize;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfFont2.prototype, "height", {
      /**
       * Gets the height of the font in points.
       * @private
       */
      get: function() {
        return this.metrics.getHeight(null);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfFont2.prototype, "style", {
      /**
       * Gets the style information for this font.
       * @private
       */
      get: function() {
        return this.fontStyle;
      },
      set: function(value) {
        this.fontStyle = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfFont2.prototype, "bold", {
      /**
       * Gets a value indicating whether this `PdfFont` is `bold`.
       * @private
       */
      get: function() {
        return (this.style & PdfFontStyle.Bold) > 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfFont2.prototype, "italic", {
      /**
       * Gets a value indicating whether this `PdfFont` has the `italic` style applied.
       * @private
       */
      get: function() {
        return (this.style & PdfFontStyle.Italic) > 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfFont2.prototype, "strikeout", {
      /**
       * Gets a value indicating whether this `PdfFont` is `strikeout`.
       * @private
       */
      get: function() {
        return (this.style & PdfFontStyle.Strikeout) > 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfFont2.prototype, "underline", {
      /**
       * Gets a value indicating whether this `PdfFont` is `underline`.
       * @private
       */
      get: function() {
        return (this.style & PdfFontStyle.Underline) > 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfFont2.prototype, "metrics", {
      /**
       * Gets or sets the `metrics` for this font.
       * @private
       */
      get: function() {
        return this.fontMetrics;
      },
      set: function(value) {
        this.fontMetrics = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfFont2.prototype, "element", {
      // /**
      //  * Gets and Sets the font `internals`.
      //  * @private
      //  */
      // public get fontInternal() : IPdfPrimitive {
      //     return this.pdfFontInternals;
      // }
      // public set fontInternal(value : IPdfPrimitive) {
      //     this.pdfFontInternals = value;
      // }
      //IPdfWrapper Members
      /**
       * Gets the `element` representing the font.
       * @private
       */
      get: function() {
        return this.pdfFontInternals;
      },
      enumerable: true,
      configurable: true
    });
    PdfFont2.prototype.measureString = function(text, arg2, arg3, arg4, arg5) {
      if (typeof text === "string" && typeof arg2 === "undefined") {
        return this.measureString(text, null);
      } else if (typeof text === "string" && (arg2 instanceof PdfStringFormat || arg2 == null) && typeof arg3 === "undefined" && typeof arg4 === "undefined") {
        var temparg2 = arg2;
        var charactersFitted = 0;
        var linesFilled = 0;
        return this.measureString(text, temparg2, charactersFitted, linesFilled);
      } else if (typeof text === "string" && (arg2 instanceof PdfStringFormat || arg2 == null) && typeof arg3 === "number" && typeof arg4 === "number") {
        var temparg2 = arg2;
        return this.measureString(text, 0, temparg2, arg3, arg4);
      } else if (typeof text === "string" && typeof arg2 === "number" && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === "number" && typeof arg5 === "number") {
        var layoutArea = new SizeF(arg2, 0);
        var temparg3 = arg3;
        return this.measureString(text, layoutArea, temparg3, arg4, arg5);
      } else {
        if (text == null) {
          throw Error('ArgumentNullException("text")');
        }
        var temparg2 = arg2;
        var temparg3 = arg3;
        var layouter = new PdfStringLayouter();
        var result = layouter.layout(text, this, temparg3, temparg2, false, new SizeF(0, 0));
        arg4 = text.length;
        arg5 = result.empty ? 0 : result.lines.length;
        return result.actualSize;
      }
    };
    PdfFont2.prototype.equalsTo = function(obj) {
      var result = this.equalsToFont(obj);
      return result;
    };
    PdfFont2.prototype.getInternals = function() {
      return this.pdfFontInternals;
    };
    PdfFont2.prototype.setInternals = function(internals) {
      if (internals == null) {
        throw new Error("ArgumentNullException:internals");
      }
      this.pdfFontInternals = internals;
    };
    PdfFont2.prototype.setStyle = function(style) {
      this.fontStyle = style;
    };
    PdfFont2.prototype.applyFormatSettings = function(line, format, width) {
      var realWidth = width;
      if (format != null && width > 0) {
        if (format.characterSpacing !== 0) {
          realWidth += (line.length - 1) * format.characterSpacing;
        }
        if (format.wordSpacing !== 0) {
          var symbols = StringTokenizer.spaces;
          var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);
          realWidth += whitespacesCount * format.wordSpacing;
        }
      }
      return realWidth;
    };
    PdfFont2.charSizeMultiplier = 1e-3;
    PdfFont2.syncObject = new Object();
    return PdfFont2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-transformation-matrix.js
var PdfTransformationMatrix = (
  /** @class */
  function() {
    function PdfTransformationMatrix2(value) {
      this.radDegFactor = 180 / Math.PI;
      if (typeof value === "undefined") {
        this.transformationMatrix = new Matrix(1, 0, 0, 1, 0, 0);
      } else {
        this.transformationMatrix = new Matrix(1, 0, 0, -1, 0, 0);
      }
    }
    Object.defineProperty(PdfTransformationMatrix2.prototype, "matrix", {
      // Properties
      /**
       * Gets or sets the `internal matrix object`.
       * @private
       */
      get: function() {
        return this.transformationMatrix;
      },
      set: function(value) {
        this.transformationMatrix = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfTransformationMatrix2.prototype.translate = function(offsetX, offsetY) {
      this.transformationMatrix.translate(offsetX, offsetY);
    };
    PdfTransformationMatrix2.prototype.scale = function(scaleX, scaleY) {
      this.transformationMatrix.elements[0] = scaleX;
      this.transformationMatrix.elements[3] = scaleY;
    };
    PdfTransformationMatrix2.prototype.rotate = function(angle) {
      angle = angle * Math.PI / 180;
      this.transformationMatrix.elements[0] = Math.cos(angle);
      this.transformationMatrix.elements[1] = Math.sin(angle);
      this.transformationMatrix.elements[2] = -Math.sin(angle);
      this.transformationMatrix.elements[3] = Math.cos(angle);
    };
    PdfTransformationMatrix2.prototype.toString = function() {
      var builder = "";
      var whitespace = " ";
      for (var i = 0, len = this.transformationMatrix.elements.length; i < len; i++) {
        var temp = this.matrix.elements[i];
        builder += PdfNumber.floatToString(this.transformationMatrix.elements[i]);
        builder += whitespace;
      }
      return builder;
    };
    PdfTransformationMatrix2.prototype.multiply = function(matrix) {
      this.transformationMatrix.multiply(matrix.matrix);
    };
    PdfTransformationMatrix2.degreesToRadians = function(degreesX) {
      return this.degRadFactor * degreesX;
    };
    PdfTransformationMatrix2.prototype.radiansToDegrees = function(radians) {
      return this.radDegFactor * radians;
    };
    PdfTransformationMatrix2.prototype.clone = function() {
      return this;
    };
    PdfTransformationMatrix2.degRadFactor = Math.PI / 180;
    return PdfTransformationMatrix2;
  }()
);
var Matrix = (
  /** @class */
  function() {
    function Matrix2(arg1, arg2, arg3, arg4, arg5, arg6) {
      if (typeof arg1 === "undefined") {
        this.metrixElements = [];
      } else if (typeof arg1 === "number") {
        this.metrixElements = [];
        this.metrixElements.push(arg1);
        this.metrixElements.push(arg2);
        this.metrixElements.push(arg3);
        this.metrixElements.push(arg4);
        this.metrixElements.push(arg5);
        this.metrixElements.push(arg6);
      } else {
        this.metrixElements = arg1;
      }
    }
    Object.defineProperty(Matrix2.prototype, "elements", {
      // Properties
      /**
       * Gets the `elements`.
       * @private
       */
      get: function() {
        return this.metrixElements;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Matrix2.prototype, "offsetX", {
      /**
       * Gets the off set `X`.
       * @private
       */
      get: function() {
        return this.metrixElements[4];
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Matrix2.prototype, "offsetY", {
      /**
       * Gets the off set `Y`.
       * @private
       */
      get: function() {
        return this.metrixElements[5];
      },
      enumerable: true,
      configurable: true
    });
    Matrix2.prototype.translate = function(offsetX, offsetY) {
      this.metrixElements[4] = offsetX;
      this.metrixElements[5] = offsetY;
    };
    Matrix2.prototype.transform = function(point) {
      var x = point.x;
      var y = point.y;
      var x2 = x * this.elements[0] + y * this.elements[2] + this.offsetX;
      var y2 = x * this.elements[1] + y * this.elements[3] + this.offsetY;
      return new PointF(x2, y2);
    };
    Matrix2.prototype.multiply = function(matrix) {
      var tempMatrix = [];
      tempMatrix.push(this.elements[0] * matrix.elements[0] + this.elements[1] * matrix.elements[2]);
      tempMatrix[1] = this.elements[0] * matrix.elements[1] + this.elements[1] * matrix.elements[3];
      tempMatrix[2] = this.elements[2] * matrix.elements[0] + this.elements[3] * matrix.elements[2];
      tempMatrix[3] = this.elements[2] * matrix.elements[1] + this.elements[3] * matrix.elements[3];
      tempMatrix[4] = this.offsetX * matrix.elements[0] + this.offsetY * matrix.elements[2] + matrix.offsetX;
      tempMatrix[5] = this.offsetX * matrix.elements[1] + this.offsetY * matrix.elements[3] + matrix.offsetY;
      for (var i = 0; i < tempMatrix.length; i++) {
        this.elements[i] = tempMatrix[i];
      }
    };
    Matrix2.prototype.dispose = function() {
      this.metrixElements = null;
    };
    Matrix2.prototype.clone = function() {
      var m = new Matrix2(this.metrixElements);
      return m;
    };
    return Matrix2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/constants.js
var ProcedureSets = (
  /** @class */
  /* @__PURE__ */ function() {
    function ProcedureSets2() {
      this.pdf = "PDF";
      this.text = "Text";
      this.imageB = "ImageB";
      this.imageC = "ImageC";
      this.imageI = "ImageI";
    }
    return ProcedureSets2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/collections/object-object-pair/dictionary.js
var TemporaryDictionary = (
  /** @class */
  function() {
    function TemporaryDictionary2() {
      this.mKeys = [];
      this.mValues = [];
    }
    TemporaryDictionary2.prototype.size = function() {
      return this.mKeys.length;
    };
    TemporaryDictionary2.prototype.add = function(key, value) {
      if (key === void 0 || key === null || value === void 0 || value === null) {
        throw new ReferenceError("Provided key or value is not valid.");
      }
      var index = this.mKeys.indexOf(key);
      if (index < 0) {
        this.mKeys.push(key);
        this.mValues.push(value);
        return 1;
      } else {
        throw new RangeError("An item with the same key has already been added.");
      }
    };
    TemporaryDictionary2.prototype.keys = function() {
      return this.mKeys;
    };
    TemporaryDictionary2.prototype.values = function() {
      return this.mValues;
    };
    TemporaryDictionary2.prototype.getValue = function(key) {
      if (key === void 0 || key === null) {
        throw new ReferenceError("Provided key is not valid.");
      }
      var index = this.mKeys.indexOf(key);
      if (index < 0) {
        throw new RangeError("No item with the specified key has been added.");
      } else {
        return this.mValues[index];
      }
    };
    TemporaryDictionary2.prototype.setValue = function(key, value) {
      if (key === void 0 || key === null) {
        throw new ReferenceError("Provided key is not valid.");
      }
      var index = this.mKeys.indexOf(key);
      if (index < 0) {
        this.mKeys.push(key);
        this.mValues.push(value);
      } else {
        this.mValues[index] = value;
      }
    };
    TemporaryDictionary2.prototype.remove = function(key) {
      if (key === void 0 || key === null) {
        throw new ReferenceError("Provided key is not valid.");
      }
      var index = this.mKeys.indexOf(key);
      if (index < 0) {
        throw new RangeError("No item with the specified key has been added.");
      } else {
        this.mKeys.splice(index, 1);
        this.mValues.splice(index, 1);
        return true;
      }
    };
    TemporaryDictionary2.prototype.containsKey = function(key) {
      if (key === void 0 || key === null) {
        throw new ReferenceError("Provided key is not valid.");
      }
      var index = this.mKeys.indexOf(key);
      if (index < 0) {
        return false;
      }
      return true;
    };
    TemporaryDictionary2.prototype.clear = function() {
      this.mKeys = [];
      this.mValues = [];
    };
    return TemporaryDictionary2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-transparency.js
var PdfTransparency = (
  /** @class */
  function() {
    function PdfTransparency2(stroke, fill, mode) {
      this.dictionary = new PdfDictionary();
      this.dictionaryProperties = new DictionaryProperties();
      this.dictionary.items.setValue(this.dictionaryProperties.CA, new PdfNumber(stroke));
      this.dictionary.items.setValue(this.dictionaryProperties.ca, new PdfNumber(fill));
      this.dictionary.items.setValue(this.dictionaryProperties.BM, new PdfName(mode.toString()));
    }
    Object.defineProperty(PdfTransparency2.prototype, "element", {
      // // Implementation
      // /**
      //  * Gets the `number value`.
      //  * @private
      //  */
      // private getNumber(keyName : string) : number {
      //     let result : number = 0.0;
      //     let numb : PdfNumber = this.dictionary.items.getValue(keyName) as PdfNumber;
      //     result = numb.intValue;
      //     return result;
      // }
      // /**
      //  * Gets the `name value`.
      //  * @private
      //  */
      // private getName(keyName : string) : string {
      //     let result : string = null;
      //     let name : PdfName = this.dictionary.items.getValue(keyName) as PdfName;
      //     result = name.value;
      //     return result;
      // }
      // IPdfWrapper Members
      /**
       * Gets the `element`.
       * @private
       */
      get: function() {
        return this.dictionary;
      },
      enumerable: true,
      configurable: true
    });
    return PdfTransparency2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/automatic-field-info-collection.js
var PdfAutomaticFieldInfoCollection = (
  /** @class */
  function() {
    function PdfAutomaticFieldInfoCollection2() {
      this.automaticFieldsInformation = [];
    }
    Object.defineProperty(PdfAutomaticFieldInfoCollection2.prototype, "automaticFields", {
      /**
       * Gets the `page number fields collection`.
       * @private
       */
      get: function() {
        return this.automaticFieldsInformation;
      },
      enumerable: true,
      configurable: true
    });
    PdfAutomaticFieldInfoCollection2.prototype.add = function(fieldInfo) {
      return this.automaticFields.push(fieldInfo);
    };
    return PdfAutomaticFieldInfoCollection2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/base/graphics-element.js
var PdfGraphicsElement = (
  /** @class */
  function() {
    function PdfGraphicsElement2() {
    }
    PdfGraphicsElement2.prototype.drawHelper = function(graphics, x, y) {
      var bNeedSave = x !== 0 || y !== 0;
      var gState = null;
      if (bNeedSave) {
        gState = graphics.save();
        graphics.translateTransform(x, y);
      }
      this.drawInternal(graphics);
      if (bNeedSave) {
        graphics.restore(gState);
      }
    };
    return PdfGraphicsElement2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/automatic-field.js
var __extends61 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfAutomaticField = (
  /** @class */
  function(_super) {
    __extends61(PdfAutomaticField2, _super);
    function PdfAutomaticField2() {
      var _this = _super.call(this) || this;
      _this.internalBounds = new RectangleF(0, 0, 0, 0);
      _this.internalTemplateSize = new SizeF(0, 0);
      return _this;
    }
    Object.defineProperty(PdfAutomaticField2.prototype, "bounds", {
      // Properties
      get: function() {
        return this.internalBounds;
      },
      set: function(value) {
        this.internalBounds = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAutomaticField2.prototype, "size", {
      get: function() {
        return new SizeF(this.bounds.width, this.bounds.height);
      },
      set: function(value) {
        this.bounds.width = value.width;
        this.bounds.height = value.height;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAutomaticField2.prototype, "location", {
      get: function() {
        return new PointF(this.bounds.x, this.bounds.y);
      },
      set: function(value) {
        this.bounds.x = value.x;
        this.bounds.y = value.y;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAutomaticField2.prototype, "font", {
      get: function() {
        return this.internalFont;
      },
      set: function(value) {
        this.internalFont = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAutomaticField2.prototype, "brush", {
      get: function() {
        return this.internalBrush;
      },
      set: function(value) {
        this.internalBrush = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAutomaticField2.prototype, "pen", {
      get: function() {
        return this.internalPen;
      },
      set: function(value) {
        this.internalPen = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAutomaticField2.prototype, "stringFormat", {
      get: function() {
        return this.internalStringFormat;
      },
      set: function(value) {
        this.internalStringFormat = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfAutomaticField2.prototype.performDrawHelper = function(graphics, location2, scalingX, scalingY) {
      if (this.bounds.height === 0 || this.bounds.width === 0) {
        var text = this.getValue(graphics);
        this.internalTemplateSize = this.getFont().measureString(text, this.size, this.stringFormat);
      }
    };
    PdfAutomaticField2.prototype.draw = function(arg1, arg2, arg3) {
      if (typeof arg2 === "undefined") {
        var location_1 = new PointF(0, 0);
        this.draw(arg1, location_1);
      } else if (arg2 instanceof PointF) {
        this.draw(arg1, arg2.x, arg2.y);
      } else {
        this.drawHelper(arg1, arg2, arg3);
        var info = new PdfAutomaticFieldInfo(this, new PointF(arg2, arg3));
        arg1.automaticFields.add(info);
      }
    };
    PdfAutomaticField2.prototype.getSize = function() {
      if (this.bounds.height === 0 || this.bounds.width === 0) {
        return this.internalTemplateSize;
      } else {
        return this.size;
      }
    };
    PdfAutomaticField2.prototype.drawInternal = function(graphics) {
    };
    PdfAutomaticField2.prototype.getBrush = function() {
      return typeof this.internalBrush === "undefined" || this.internalBrush == null ? new PdfSolidBrush(new PdfColor(0, 0, 0)) : this.internalBrush;
    };
    PdfAutomaticField2.prototype.getFont = function() {
      return typeof this.internalFont === "undefined" || this.internalFont == null ? PdfDocument.defaultFont : this.internalFont;
    };
    PdfAutomaticField2.prototype.getPageFromGraphics = function(graphics) {
      if (typeof graphics.page !== "undefined" && graphics.page !== null) {
        var page = graphics.page;
        return page;
      } else {
        var page = graphics.currentPage;
        return page;
      }
    };
    return PdfAutomaticField2;
  }(PdfGraphicsElement)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/automatic-field-info.js
var PdfAutomaticFieldInfo = (
  /** @class */
  function() {
    function PdfAutomaticFieldInfo2(field, location2, scaleX, scaleY) {
      this.pageNumberFieldLocation = new PointF();
      this.pageNumberField = null;
      this.scaleX = 1;
      this.scaleY = 1;
      if (typeof location2 === "undefined" && field instanceof PdfAutomaticFieldInfo2) {
        this.pageNumberField = field.field;
        this.pageNumberFieldLocation = field.location;
        this.scaleX = field.scalingX;
        this.scaleY = field.scalingY;
      } else if (typeof scaleX === "undefined" && location2 instanceof PointF && field instanceof PdfAutomaticField) {
        this.pageNumberField = field;
        this.pageNumberFieldLocation = location2;
      } else {
        this.pageNumberField = field;
        this.pageNumberFieldLocation = location2;
        this.scaleX = scaleX;
        this.scaleY = scaleY;
      }
    }
    Object.defineProperty(PdfAutomaticFieldInfo2.prototype, "location", {
      /* tslint:enable */
      // Properties
      /**
       * Gets or sets the location.
       * @private
       */
      get: function() {
        return this.pageNumberFieldLocation;
      },
      set: function(value) {
        this.pageNumberFieldLocation = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAutomaticFieldInfo2.prototype, "field", {
      /**
       * Gets or sets the field.
       * @private
       */
      get: function() {
        return this.pageNumberField;
      },
      set: function(value) {
        this.pageNumberField = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAutomaticFieldInfo2.prototype, "scalingX", {
      /**
       * Gets or sets the scaling X factor.
       * @private
       */
      get: function() {
        return this.scaleX;
      },
      set: function(value) {
        this.scaleX = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAutomaticFieldInfo2.prototype, "scalingY", {
      /**
       * Gets or sets the scaling Y factor.
       * @private
       */
      get: function() {
        return this.scaleY;
      },
      set: function(value) {
        this.scaleY = value;
      },
      enumerable: true,
      configurable: true
    });
    return PdfAutomaticFieldInfo2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-table-info.js
var TtfTableInfo = (
  /** @class */
  function() {
    function TtfTableInfo2() {
    }
    Object.defineProperty(TtfTableInfo2.prototype, "empty", {
      //Properties
      /**
       * Gets a value indicating whether this table is empty.
       * @private
       */
      get: function() {
        var empty = this.offset === this.length && this.length === this.checksum && this.checksum === 0;
        return empty;
      },
      enumerable: true,
      configurable: true
    });
    return TtfTableInfo2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-name-table.js
var TtfNameTable = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfNameTable2() {
    }
    return TtfNameTable2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-name-record.js
var TtfNameRecord = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfNameRecord2() {
    }
    return TtfNameRecord2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-head-table.js
var TtfHeadTable = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfHeadTable2() {
    }
    return TtfHeadTable2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-metrics.js
var TtfMetrics = (
  /** @class */
  function() {
    function TtfMetrics2() {
    }
    Object.defineProperty(TtfMetrics2.prototype, "isItalic", {
      //Properties
      /**
       * Gets a value indicating whether this instance is italic.
       */
      get: function() {
        return (this.macStyle & 2) !== 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(TtfMetrics2.prototype, "isBold", {
      /**
       * Gets a value indicating whether this instance is bold.
       */
      get: function() {
        return (this.macStyle & 1) !== 0;
      },
      enumerable: true,
      configurable: true
    });
    return TtfMetrics2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-horizontal-header-table.js
var TtfHorizontalHeaderTable = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfHorizontalHeaderTable2() {
    }
    return TtfHorizontalHeaderTable2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-OS2-Table.js
var TtfOS2Table = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfOS2Table2() {
    }
    return TtfOS2Table2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-post-table.js
var TtfPostTable = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfPostTable2() {
    }
    return TtfPostTable2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-long-hor-metric.js
var TtfLongHorMetric = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfLongHorMetric2() {
    }
    return TtfLongHorMetric2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-cmap-sub-table.js
var TtfCmapSubTable = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfCmapSubTable2() {
    }
    return TtfCmapSubTable2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-cmap-table.js
var TtfCmapTable = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfCmapTable2() {
    }
    return TtfCmapTable2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-glyph-info.js
var TtfGlyphInfo = (
  /** @class */
  function() {
    function TtfGlyphInfo2() {
    }
    Object.defineProperty(TtfGlyphInfo2.prototype, "empty", {
      //Properties
      /**
       * Gets a value indicating whether this TtfGlyphInfo is empty.
       */
      get: function() {
        var empty = this.index === this.width && this.width === this.charCode && this.charCode === 0;
        return empty;
      },
      enumerable: true,
      configurable: true
    });
    TtfGlyphInfo2.prototype.compareTo = function(obj) {
      var glyph = obj;
      return this.index - glyph.index;
    };
    return TtfGlyphInfo2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-loca-table.js
var TtfLocaTable = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfLocaTable2() {
    }
    return TtfLocaTable2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-apple-cmap-sub-table.js
var TtfAppleCmapSubTable = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfAppleCmapSubTable2() {
    }
    return TtfAppleCmapSubTable2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-microsoft-cmap-sub-table.js
var TtfMicrosoftCmapSubTable = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfMicrosoftCmapSubTable2() {
    }
    return TtfMicrosoftCmapSubTable2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-trimmed-cmap-sub-table.js
var TtfTrimmedCmapSubTable = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfTrimmedCmapSubTable2() {
    }
    return TtfTrimmedCmapSubTable2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-glyph-header.js
var TtfGlyphHeader = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfGlyphHeader2() {
    }
    return TtfGlyphHeader2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/big-endian-writer.js
var BigEndianWriter = (
  /** @class */
  function() {
    function BigEndianWriter2(capacity) {
      this.int32Size = 4;
      this.int16Size = 2;
      this.int64Size = 8;
      this.bufferLength = capacity;
      this.buffer = [];
    }
    Object.defineProperty(BigEndianWriter2.prototype, "data", {
      //Properties
      /**
       * Gets data written to the writer.
       */
      get: function() {
        if (this.buffer.length < this.bufferLength) {
          var length_1 = this.bufferLength - this.buffer.length;
          for (var i = 0; i < length_1; i++) {
            this.buffer.push(0);
          }
        }
        return this.buffer;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BigEndianWriter2.prototype, "position", {
      /// <summary>
      /// Gets position of the internal buffer.
      /// </summary>
      get: function() {
        if (this.internalPosition === void 0 || this.internalPosition === null) {
          this.internalPosition = 0;
        }
        return this.internalPosition;
      },
      enumerable: true,
      configurable: true
    });
    BigEndianWriter2.prototype.writeShort = function(value) {
      var bytes = [(value & 65280) >> 8, value & 255];
      this.flush(bytes);
    };
    BigEndianWriter2.prototype.writeInt = function(value) {
      var i1 = (value & 4278190080) >> 24;
      i1 = i1 < 0 ? 256 + i1 : i1;
      var i2 = (value & 16711680) >> 16;
      i2 = i2 < 0 ? 256 + i2 : i2;
      var i3 = (value & 65280) >> 8;
      i3 = i3 < 0 ? 256 + i3 : i3;
      var i4 = value & 255;
      i4 = i4 < 0 ? 256 + i4 : i4;
      var bytes = [(value & 4278190080) >> 24, (value & 16711680) >> 16, (value & 65280) >> 8, value & 255];
      this.flush(bytes);
    };
    BigEndianWriter2.prototype.writeUInt = function(value) {
      var buff = [(value & 4278190080) >> 24, (value & 16711680) >> 16, (value & 65280) >> 8, value & 255];
      this.flush(buff);
    };
    BigEndianWriter2.prototype.writeString = function(value) {
      if (value == null) {
        throw new Error("Argument Null Exception : value");
      }
      var bytes = [];
      for (var i = 0; i < value.length; i++) {
        bytes.push(value.charCodeAt(i));
      }
      this.flush(bytes);
    };
    BigEndianWriter2.prototype.writeBytes = function(value) {
      this.flush(value);
    };
    BigEndianWriter2.prototype.flush = function(buff) {
      if (buff === null) {
        throw new Error("Argument Null Exception : buff");
      }
      var position = this.position;
      for (var i = 0; i < buff.length; i++) {
        this.buffer[position] = buff[i];
        position++;
      }
      this.internalPosition += buff.length;
    };
    return BigEndianWriter2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-reader.js
var TtfReader = (
  /** @class */
  function() {
    function TtfReader2(fontData) {
      this.int32Size = 4;
      this.isTtcFont = false;
      this.isMacTtf = false;
      this.metricsName = "";
      this.isMacTTF = false;
      this.missedGlyphs = 0;
      this.tableNames = ["cvt ", "fpgm", "glyf", "head", "hhea", "hmtx", "loca", "maxp", "prep"];
      this.entrySelectors = [0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4];
      this.fontData = fontData;
      this.initialize();
    }
    Object.defineProperty(TtfReader2.prototype, "macintosh", {
      //Properties
      /**
       * Gets glyphs for Macintosh or Symbol fonts (char - key, glyph - value).
       */
      get: function() {
        if (this.macintoshDictionary === null || this.macintoshDictionary === void 0) {
          this.macintoshDictionary = new Dictionary();
        }
        return this.macintoshDictionary;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(TtfReader2.prototype, "microsoft", {
      /**
       * Gets glyphs for Microsoft or Symbol fonts (char - key, glyph - value).
       */
      get: function() {
        if (this.microsoftDictionary === null || this.microsoftDictionary === void 0) {
          this.microsoftDictionary = new Dictionary();
        }
        return this.microsoftDictionary;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(TtfReader2.prototype, "macintoshGlyphs", {
      /**
       * Gets glyphs for Macintosh or Symbol fonts (glyph index - key, glyph - value).
       */
      get: function() {
        if (this.internalMacintoshGlyphs === null || this.internalMacintoshGlyphs === void 0) {
          this.internalMacintoshGlyphs = new Dictionary();
        }
        return this.internalMacintoshGlyphs;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(TtfReader2.prototype, "microsoftGlyphs", {
      /**
       * Gets glyphs for Microsoft Unicode fonts (glyph index - key, glyph - value).
       */
      get: function() {
        if (this.internalMicrosoftGlyphs === null || this.internalMicrosoftGlyphs === void 0) {
          this.internalMicrosoftGlyphs = new Dictionary();
        }
        return this.internalMicrosoftGlyphs;
      },
      enumerable: true,
      configurable: true
    });
    TtfReader2.prototype.initialize = function() {
      if (this.metrics === void 0) {
        this.metrics = new TtfMetrics();
      }
      this.readFontDictionary();
      var nameTable = this.readNameTable();
      var headTable = this.readHeadTable();
      this.initializeFontName(nameTable);
      this.metrics.macStyle = headTable.macStyle;
    };
    TtfReader2.prototype.readFontDictionary = function() {
      this.offset = 0;
      var version = this.checkPreambula();
      var numTables = this.readInt16(this.offset);
      var searchRange = this.readInt16(this.offset);
      var entrySelector = this.readInt16(this.offset);
      var rangeShift = this.readInt16(this.offset);
      if (this.tableDirectory === void 0) {
        this.tableDirectory = new Dictionary();
      }
      for (var i = 0; i < numTables; ++i) {
        var table = new TtfTableInfo();
        var tableKey = this.readString(this.int32Size);
        table.checksum = this.readInt32(this.offset);
        table.offset = this.readInt32(this.offset);
        table.length = this.readInt32(this.offset);
        this.tableDirectory.setValue(tableKey, table);
      }
      this.lowestPosition = this.offset;
      if (!this.isTtcFont) {
        this.fixOffsets();
      }
    };
    TtfReader2.prototype.fixOffsets = function() {
      var minOffset = Number.MAX_VALUE;
      var tableKeys = this.tableDirectory.keys();
      for (var i = 0; i < tableKeys.length; i++) {
        var value = this.tableDirectory.getValue(tableKeys[i]);
        var offset = value.offset;
        if (minOffset > offset) {
          minOffset = offset;
          if (minOffset <= this.lowestPosition) {
            break;
          }
        }
      }
      var shift = minOffset - this.lowestPosition;
      if (shift !== 0) {
        var table = new Dictionary();
        for (var i = 0; i < tableKeys.length; i++) {
          var value = this.tableDirectory.getValue(tableKeys[i]);
          value.offset -= shift;
          table.setValue(tableKeys[i], value);
        }
        this.tableDirectory = table;
      }
    };
    TtfReader2.prototype.checkPreambula = function() {
      var version = this.readInt32(this.offset);
      this.isMacTtf = version === 1953658213 ? true : false;
      if (version !== 65536 && version !== 1953658213 && version !== 1330926671) {
        this.isTtcFont = true;
        this.offset = 0;
        var fontTag = this.readString(4);
        if (fontTag !== "ttcf") {
          throw new Error("Can not read TTF font data");
        }
        this.offset += 4;
        var ttcIdentificationNumber = this.readInt32(this.offset);
        if (ttcIdentificationNumber < 0) {
          throw new Error("Can not read TTF font data");
        }
        this.offset = this.readInt32(this.offset);
        version = this.readInt32(this.offset);
      }
      return version;
    };
    TtfReader2.prototype.readNameTable = function() {
      var tableInfo = this.getTable("name");
      this.offset = tableInfo.offset;
      var table = new TtfNameTable();
      table.formatSelector = this.readUInt16(this.offset);
      table.recordsCount = this.readUInt16(this.offset);
      table.offset = this.readUInt16(this.offset);
      table.nameRecords = [];
      var recordSize = 12;
      var position = this.offset;
      for (var i = 0; i < table.recordsCount; i++) {
        this.offset = position;
        var record = new TtfNameRecord();
        record.platformID = this.readUInt16(this.offset);
        record.encodingID = this.readUInt16(this.offset);
        record.languageID = this.readUInt16(this.offset);
        record.nameID = this.readUInt16(this.offset);
        record.length = this.readUInt16(this.offset);
        record.offset = this.readUInt16(this.offset);
        this.offset = tableInfo.offset + table.offset + record.offset;
        var unicode = record.platformID === 0 || record.platformID === 3;
        record.name = this.readString(record.length, unicode);
        table.nameRecords[i] = record;
        position += recordSize;
      }
      return table;
    };
    TtfReader2.prototype.readHeadTable = function() {
      var tableInfo = this.getTable("head");
      this.offset = tableInfo.offset;
      var table = new TtfHeadTable();
      table.version = this.readFixed(this.offset);
      table.fontRevision = this.readFixed(this.offset);
      table.checkSumAdjustment = this.readUInt32(this.offset);
      table.magicNumber = this.readUInt32(this.offset);
      table.flags = this.readUInt16(this.offset);
      table.unitsPerEm = this.readUInt16(this.offset);
      table.created = this.readInt64(this.offset);
      table.modified = this.readInt64(this.offset);
      table.xMin = this.readInt16(this.offset);
      table.yMin = this.readInt16(this.offset);
      table.xMax = this.readInt16(this.offset);
      table.yMax = this.readInt16(this.offset);
      table.macStyle = this.readUInt16(this.offset);
      table.lowestReadableSize = this.readUInt16(this.offset);
      table.fontDirectionHint = this.readInt16(this.offset);
      table.indexToLocalFormat = this.readInt16(this.offset);
      table.glyphDataFormat = this.readInt16(this.offset);
      return table;
    };
    TtfReader2.prototype.readHorizontalHeaderTable = function() {
      var tableInfo = this.getTable("hhea");
      this.offset = tableInfo.offset;
      var table = new TtfHorizontalHeaderTable();
      table.version = this.readFixed(this.offset);
      table.ascender = this.readInt16(this.offset);
      table.descender = this.readInt16(this.offset);
      table.lineGap = this.readInt16(this.offset);
      table.advanceWidthMax = this.readUInt16(this.offset);
      table.minLeftSideBearing = this.readInt16(this.offset);
      table.minRightSideBearing = this.readInt16(this.offset);
      table.xMaxExtent = this.readInt16(this.offset);
      table.caretSlopeRise = this.readInt16(this.offset);
      table.caretSlopeRun = this.readInt16(this.offset);
      this.offset += 10;
      table.metricDataFormat = this.readInt16(this.offset);
      table.numberOfHMetrics = this.readUInt16(this.offset);
      return table;
    };
    TtfReader2.prototype.readOS2Table = function() {
      var tableInfo = this.getTable("OS/2");
      this.offset = tableInfo.offset;
      var table = new TtfOS2Table();
      table.version = this.readUInt16(this.offset);
      table.xAvgCharWidth = this.readInt16(this.offset);
      table.usWeightClass = this.readUInt16(this.offset);
      table.usWidthClass = this.readUInt16(this.offset);
      table.fsType = this.readInt16(this.offset);
      table.ySubscriptXSize = this.readInt16(this.offset);
      table.ySubscriptYSize = this.readInt16(this.offset);
      table.ySubscriptXOffset = this.readInt16(this.offset);
      table.ySubscriptYOffset = this.readInt16(this.offset);
      table.ySuperscriptXSize = this.readInt16(this.offset);
      table.ySuperscriptYSize = this.readInt16(this.offset);
      table.ySuperscriptXOffset = this.readInt16(this.offset);
      table.ySuperscriptYOffset = this.readInt16(this.offset);
      table.yStrikeoutSize = this.readInt16(this.offset);
      table.yStrikeoutPosition = this.readInt16(this.offset);
      table.sFamilyClass = this.readInt16(this.offset);
      table.panose = this.readBytes(10);
      table.ulUnicodeRange1 = this.readUInt32(this.offset);
      table.ulUnicodeRange2 = this.readUInt32(this.offset);
      table.ulUnicodeRange3 = this.readUInt32(this.offset);
      table.ulUnicodeRange4 = this.readUInt32(this.offset);
      table.vendorIdentifier = this.readBytes(4);
      table.fsSelection = this.readUInt16(this.offset);
      table.usFirstCharIndex = this.readUInt16(this.offset);
      table.usLastCharIndex = this.readUInt16(this.offset);
      table.sTypoAscender = this.readInt16(this.offset);
      table.sTypoDescender = this.readInt16(this.offset);
      table.sTypoLineGap = this.readInt16(this.offset);
      table.usWinAscent = this.readUInt16(this.offset);
      table.usWinDescent = this.readUInt16(this.offset);
      table.ulCodePageRange1 = this.readUInt32(this.offset);
      table.ulCodePageRange2 = this.readUInt32(this.offset);
      if (table.version > 1) {
        table.sxHeight = this.readInt16(this.offset);
        table.sCapHeight = this.readInt16(this.offset);
        table.usDefaultChar = this.readUInt16(this.offset);
        table.usBreakChar = this.readUInt16(this.offset);
        table.usMaxContext = this.readUInt16(this.offset);
      } else {
        table.sxHeight = 0;
        table.sCapHeight = 0;
        table.usDefaultChar = 0;
        table.usBreakChar = 0;
        table.usMaxContext = 0;
      }
      return table;
    };
    TtfReader2.prototype.readPostTable = function() {
      var tableInfo = this.getTable("post");
      this.offset = tableInfo.offset;
      var table = new TtfPostTable();
      table.formatType = this.readFixed(this.offset);
      table.italicAngle = this.readFixed(this.offset);
      table.underlinePosition = this.readInt16(this.offset);
      table.underlineThickness = this.readInt16(this.offset);
      table.isFixedPitch = this.readUInt32(this.offset);
      table.minType42 = this.readUInt32(this.offset);
      table.maxType42 = this.readUInt32(this.offset);
      table.minType1 = this.readUInt32(this.offset);
      table.maxType1 = this.readUInt32(this.offset);
      return table;
    };
    TtfReader2.prototype.readWidthTable = function(glyphCount, unitsPerEm) {
      var tableInfo = this.getTable("hmtx");
      this.offset = tableInfo.offset;
      var width = [];
      for (var i = 0; i < glyphCount; i++) {
        var glyph = new TtfLongHorMetric();
        glyph.advanceWidth = this.readUInt16(this.offset);
        glyph.lsb = this.readInt16(this.offset);
        var glyphWidth = glyph.advanceWidth * 1e3 / unitsPerEm;
        width.push(Math.floor(glyphWidth));
      }
      return width;
    };
    TtfReader2.prototype.readCmapTable = function() {
      var tableInfo = this.getTable("cmap");
      this.offset = tableInfo.offset;
      var table = new TtfCmapTable();
      table.version = this.readUInt16(this.offset);
      table.tablesCount = this.readUInt16(this.offset);
      var position = this.offset;
      var subTables = [];
      for (var i = 0; i < table.tablesCount; i++) {
        this.offset = position;
        var subTable = new TtfCmapSubTable();
        subTable.platformID = this.readUInt16(this.offset);
        subTable.encodingID = this.readUInt16(this.offset);
        subTable.offset = this.readUInt32(this.offset);
        position = this.offset;
        this.readCmapSubTable(subTable);
        subTables[i] = subTable;
      }
      return subTables;
    };
    TtfReader2.prototype.readCmapSubTable = function(subTable) {
      var tableInfo = this.getTable("cmap");
      this.offset = tableInfo.offset + subTable.offset;
      var format = this.readUInt16(this.offset);
      var encoding = this.getCmapEncoding(subTable.platformID, subTable.encodingID);
      var platform = encoding === TtfCmapEncoding.Macintosh ? TtfPlatformID.Macintosh : TtfPlatformID.Microsoft;
      if (encoding !== TtfCmapEncoding.Unknown) {
        switch (format) {
          case TtfCmapFormat.Apple:
            this.readAppleCmapTable(subTable, encoding);
            break;
          case TtfCmapFormat.Microsoft:
            this.readMicrosoftCmapTable(subTable, encoding);
            break;
          case TtfCmapFormat.Trimmed:
            this.readTrimmedCmapTable(subTable, encoding);
            break;
        }
      }
    };
    TtfReader2.prototype.readAppleCmapTable = function(subTable, encoding) {
      var tableInfo = this.getTable("cmap");
      this.offset = tableInfo.offset + subTable.offset;
      var table = new TtfAppleCmapSubTable();
      table.format = this.readUInt16(this.offset);
      table.length = this.readUInt16(this.offset);
      table.version = this.readUInt16(this.offset);
      if (this.maxMacIndex === null || this.maxMacIndex === void 0) {
        this.maxMacIndex = 0;
      }
      for (var i = 0; i < 256; ++i) {
        var glyphInfo = new TtfGlyphInfo();
        glyphInfo.index = this.readByte(this.offset);
        glyphInfo.width = this.getWidth(glyphInfo.index);
        glyphInfo.charCode = i;
        this.macintosh.setValue(i, glyphInfo);
        this.addGlyph(glyphInfo, encoding);
        this.maxMacIndex = Math.max(i, this.maxMacIndex);
      }
    };
    TtfReader2.prototype.readMicrosoftCmapTable = function(subTable, encoding) {
      var tableInfo = this.getTable("cmap");
      this.offset = tableInfo.offset + subTable.offset;
      var collection = encoding === TtfCmapEncoding.Unicode ? this.microsoft : this.macintosh;
      var table = new TtfMicrosoftCmapSubTable();
      table.format = this.readUInt16(this.offset);
      table.length = this.readUInt16(this.offset);
      table.version = this.readUInt16(this.offset);
      table.segCountX2 = this.readUInt16(this.offset);
      table.searchRange = this.readUInt16(this.offset);
      table.entrySelector = this.readUInt16(this.offset);
      table.rangeShift = this.readUInt16(this.offset);
      var segCount = table.segCountX2 / 2;
      table.endCount = this.readUshortArray(segCount);
      table.reservedPad = this.readUInt16(this.offset);
      table.startCount = this.readUshortArray(segCount);
      table.idDelta = this.readUshortArray(segCount);
      table.idRangeOffset = this.readUshortArray(segCount);
      var length = table.length / 2 - 8 - segCount * 4;
      table.glyphID = this.readUshortArray(length);
      var codeOffset = 0;
      var index = 0;
      for (var j = 0; j < segCount; j++) {
        for (var k = table.startCount[j]; k <= table.endCount[j] && k !== 65535; k++) {
          if (table.idRangeOffset[j] === 0) {
            codeOffset = k + table.idDelta[j] & 65535;
          } else {
            index = j + table.idRangeOffset[j] / 2 - segCount + k - table.startCount[j];
            if (index >= table.glyphID.length) {
              continue;
            }
            codeOffset = table.glyphID[index] + table.idDelta[j] & 65535;
          }
          var glyph = new TtfGlyphInfo();
          glyph.index = codeOffset;
          glyph.width = this.getWidth(glyph.index);
          var id = encoding === TtfCmapEncoding.Symbol ? (k & 65280) === 61440 ? k & 255 : k : k;
          glyph.charCode = id;
          collection.setValue(id, glyph);
          this.addGlyph(glyph, encoding);
        }
      }
    };
    TtfReader2.prototype.readTrimmedCmapTable = function(subTable, encoding) {
      var tableInfo = this.getTable("cmap");
      this.offset = tableInfo.offset + subTable.offset;
      var table = new TtfTrimmedCmapSubTable();
      table.format = this.readUInt16(this.offset);
      table.length = this.readUInt16(this.offset);
      table.version = this.readUInt16(this.offset);
      table.firstCode = this.readUInt16(this.offset);
      table.entryCount = this.readUInt16(this.offset);
      for (var i = 0; i < table.entryCount; ++i) {
        var glyphInfo = new TtfGlyphInfo();
        glyphInfo.index = this.readUInt16(this.offset);
        glyphInfo.width = this.getWidth(glyphInfo.index);
        glyphInfo.charCode = i + table.firstCode;
        this.macintosh.setValue(i, glyphInfo);
        this.addGlyph(glyphInfo, encoding);
        this.maxMacIndex = Math.max(i, this.maxMacIndex);
      }
    };
    TtfReader2.prototype.initializeFontName = function(nameTable) {
      for (var i = 0; i < nameTable.recordsCount; i++) {
        var record = nameTable.nameRecords[i];
        if (record.nameID === 1) {
          this.metrics.fontFamily = record.name;
        } else if (record.nameID === 6) {
          this.metrics.postScriptName = record.name;
        }
        if (this.metrics.fontFamily !== null && this.metrics.fontFamily !== void 0 && this.metrics.postScriptName !== null && this.metrics.postScriptName !== void 0) {
          break;
        }
      }
    };
    TtfReader2.prototype.getTable = function(name) {
      var table = new TtfTableInfo();
      var obj;
      if (this.tableDirectory.containsKey(name)) {
        obj = this.tableDirectory.getValue(name);
      }
      if (obj !== null && obj !== void 0) {
        table = obj;
      }
      return table;
    };
    TtfReader2.prototype.getWidth = function(glyphCode) {
      glyphCode = glyphCode < this.width.length ? glyphCode : this.width.length - 1;
      return this.width[glyphCode];
    };
    TtfReader2.prototype.getCmapEncoding = function(platformID, encodingID) {
      var format = TtfCmapEncoding.Unknown;
      if (platformID == TtfPlatformID.Microsoft && encodingID == TtfMicrosoftEncodingID.Undefined) {
        format = TtfCmapEncoding.Symbol;
      } else if (platformID == TtfPlatformID.Microsoft && encodingID == TtfMicrosoftEncodingID.Unicode) {
        format = TtfCmapEncoding.Unicode;
      } else if (platformID == TtfPlatformID.Macintosh && encodingID == TtfMacintoshEncodingID.Roman) {
        format = TtfCmapEncoding.Macintosh;
      }
      return format;
    };
    TtfReader2.prototype.addGlyph = function(glyph, encoding) {
      var collection = null;
      switch (encoding) {
        case TtfCmapEncoding.Unicode:
          collection = this.microsoftGlyphs;
          break;
        case TtfCmapEncoding.Macintosh:
        case TtfCmapEncoding.Symbol:
          collection = this.macintoshGlyphs;
          break;
      }
      collection.setValue(glyph.index, glyph);
    };
    TtfReader2.prototype.initializeMetrics = function(nameTable, headTable, horizontalHeadTable, os2Table, postTable, cmapTables) {
      this.initializeFontName(nameTable);
      var bSymbol = false;
      for (var i = 0; i < cmapTables.length; i++) {
        var subTable = cmapTables[i];
        var encoding = this.getCmapEncoding(subTable.platformID, subTable.encodingID);
        if (encoding === TtfCmapEncoding.Symbol) {
          bSymbol = true;
          break;
        }
      }
      this.metrics.isSymbol = bSymbol;
      this.metrics.macStyle = headTable.macStyle;
      this.metrics.isFixedPitch = postTable.isFixedPitch !== 0;
      this.metrics.italicAngle = postTable.italicAngle;
      var factor = 1e3 / headTable.unitsPerEm;
      this.metrics.winAscent = os2Table.sTypoAscender * factor;
      this.metrics.macAscent = horizontalHeadTable.ascender * factor;
      this.metrics.capHeight = os2Table.sCapHeight !== 0 ? os2Table.sCapHeight : 0.7 * headTable.unitsPerEm * factor;
      this.metrics.winDescent = os2Table.sTypoDescender * factor;
      this.metrics.macDescent = horizontalHeadTable.descender * factor;
      this.metrics.leading = (os2Table.sTypoAscender - os2Table.sTypoDescender + os2Table.sTypoLineGap) * factor;
      this.metrics.lineGap = Math.ceil(horizontalHeadTable.lineGap * factor);
      var left = headTable.xMin * factor;
      var top = Math.ceil(this.metrics.macAscent + this.metrics.lineGap);
      var right = headTable.xMax * factor;
      var bottom = this.metrics.macDescent;
      this.metrics.fontBox = new Rectangle(left, top, right, bottom);
      this.metrics.stemV = 80;
      this.metrics.widthTable = this.updateWidth();
      this.metrics.contains = this.tableDirectory.containsKey("CFF");
      this.metrics.subScriptSizeFactor = headTable.unitsPerEm / os2Table.ySubscriptYSize;
      this.metrics.superscriptSizeFactor = headTable.unitsPerEm / os2Table.ySuperscriptYSize;
    };
    TtfReader2.prototype.updateWidth = function() {
      var count = 256;
      var bytes = [];
      if (this.metrics.isSymbol) {
        for (var i = 0; i < count; i++) {
          var glyphInfo = this.getGlyph(String.fromCharCode(i));
          bytes[i] = glyphInfo.empty ? 0 : glyphInfo.width;
        }
      } else {
        var byteToProcess = [];
        var unknown = "?";
        var space = String.fromCharCode(32);
        for (var i = 0; i < count; i++) {
          byteToProcess[0] = i;
          var text = this.getString(byteToProcess, 0, byteToProcess.length);
          var ch = text.length > 0 ? text[0] : unknown;
          var glyphInfo = this.getGlyph(ch);
          if (!glyphInfo.empty) {
            bytes[i] = glyphInfo.width;
          } else {
            glyphInfo = this.getGlyph(space);
            bytes[i] = glyphInfo.empty ? 0 : glyphInfo.width;
          }
        }
      }
      return bytes;
    };
    TtfReader2.prototype.getDefaultGlyph = function() {
      var glyph = this.getGlyph(StringTokenizer.whiteSpace);
      return glyph;
    };
    TtfReader2.prototype.getString = function(byteToProcess, start, length) {
      var result = "";
      for (var index = 0; index < length; index++) {
        result += String.fromCharCode(byteToProcess[index + start]);
      }
      return result;
    };
    TtfReader2.prototype.readLocaTable = function(bShort) {
      var tableInfo = this.getTable("loca");
      this.offset = tableInfo.offset;
      var table = new TtfLocaTable();
      var buffer = null;
      if (bShort) {
        var len = tableInfo.length / 2;
        buffer = [];
        for (var i = 0; i < len; i++) {
          buffer[i] = this.readUInt16(this.offset) * 2;
        }
      } else {
        var len = tableInfo.length / 4;
        buffer = [];
        for (var i = 0; i < len; i++) {
          buffer[i] = this.readUInt32(this.offset);
        }
      }
      table.offsets = buffer;
      return table;
    };
    TtfReader2.prototype.updateGlyphChars = function(glyphChars, locaTable) {
      if (!glyphChars.containsKey(0)) {
        glyphChars.setValue(0, 0);
      }
      var clone = new Dictionary();
      var glyphCharKeys = glyphChars.keys();
      for (var i = 0; i < glyphCharKeys.length; i++) {
        clone.setValue(glyphCharKeys[i], glyphChars.getValue(glyphCharKeys[i]));
      }
      for (var i = 0; i < glyphCharKeys.length; i++) {
        var nextKey = glyphCharKeys[i];
        this.processCompositeGlyph(glyphChars, nextKey, locaTable);
      }
    };
    TtfReader2.prototype.processCompositeGlyph = function(glyphChars, glyph, locaTable) {
      if (glyph < locaTable.offsets.length - 1) {
        var glyphOffset = locaTable.offsets[glyph];
        if (glyphOffset !== locaTable.offsets[glyph + 1]) {
          var tableInfo = this.getTable("glyf");
          this.offset = tableInfo.offset + glyphOffset;
          var glyphHeader = new TtfGlyphHeader();
          glyphHeader.numberOfContours = this.readInt16(this.offset);
          glyphHeader.xMin = this.readInt16(this.offset);
          glyphHeader.yMin = this.readInt16(this.offset);
          glyphHeader.xMax = this.readInt16(this.offset);
          glyphHeader.yMax = this.readInt16(this.offset);
          if (glyphHeader.numberOfContours < 0) {
            var skipBytes = 0;
            var entry = true;
            while (entry) {
              var flags = this.readUInt16(this.offset);
              var glyphIndex = this.readUInt16(this.offset);
              if (!glyphChars.containsKey(glyphIndex)) {
                glyphChars.setValue(glyphIndex, 0);
              }
              if ((flags & TtfCompositeGlyphFlags.MoreComponents) === 0) {
                break;
              }
              skipBytes = (flags & TtfCompositeGlyphFlags.Arg1And2AreWords) !== 0 ? 4 : 2;
              if ((flags & TtfCompositeGlyphFlags.WeHaveScale) !== 0) {
                skipBytes += 2;
              } else if ((flags & TtfCompositeGlyphFlags.WeHaveAnXyScale) !== 0) {
                skipBytes += 4;
              } else if ((flags & TtfCompositeGlyphFlags.WeHaveTwoByTwo) !== 0) {
                skipBytes += 2 * 4;
              }
              this.offset += skipBytes;
            }
          }
        }
      }
    };
    TtfReader2.prototype.generateGlyphTable = function(glyphChars, locaTable, newLocaTable, newGlyphTable) {
      newLocaTable = [];
      var activeGlyphs = glyphChars.keys();
      activeGlyphs.sort(function(a, b) {
        return a - b;
      });
      var glyphSize = 0;
      for (var i = 0; i < activeGlyphs.length; i++) {
        var glyphIndex = activeGlyphs[i];
        if (locaTable.offsets.length > 0) {
          glyphSize += locaTable.offsets[glyphIndex + 1] - locaTable.offsets[glyphIndex];
        }
      }
      var glyphSizeAligned = this.align(glyphSize);
      newGlyphTable = [];
      for (var i = 0; i < glyphSizeAligned; i++) {
        newGlyphTable.push(0);
      }
      var nextGlyphOffset = 0;
      var nextGlyphIndex = 0;
      var table = this.getTable("glyf");
      for (var i = 0; i < locaTable.offsets.length; i++) {
        newLocaTable.push(nextGlyphOffset);
        if (nextGlyphIndex < activeGlyphs.length && activeGlyphs[nextGlyphIndex] === i) {
          ++nextGlyphIndex;
          newLocaTable[i] = nextGlyphOffset;
          var oldGlyphOffset = locaTable.offsets[i];
          var oldNextGlyphOffset = locaTable.offsets[i + 1] - oldGlyphOffset;
          if (oldNextGlyphOffset > 0) {
            this.offset = table.offset + oldGlyphOffset;
            var result = this.read(newGlyphTable, nextGlyphOffset, oldNextGlyphOffset);
            newGlyphTable = result.buffer;
            nextGlyphOffset += oldNextGlyphOffset;
          }
        }
      }
      return {
        glyphTableSize: glyphSize,
        newLocaTable,
        newGlyphTable
      };
    };
    TtfReader2.prototype.updateLocaTable = function(newLocaTable, bLocaIsShort, newLocaTableOut) {
      if (newLocaTable === null) {
        throw new Error("Argument Null Exception : newLocaTable");
      }
      var size = bLocaIsShort ? newLocaTable.length * 2 : newLocaTable.length * 4;
      var count = this.align(size);
      var writer = new BigEndianWriter(count);
      for (var i = 0; i < newLocaTable.length; i++) {
        var value = newLocaTable[i];
        if (bLocaIsShort) {
          value /= 2;
          writer.writeShort(value);
        } else {
          writer.writeInt(value);
        }
      }
      return {
        newLocaUpdated: writer.data,
        newLocaSize: size
      };
    };
    TtfReader2.prototype.align = function(value) {
      return value + 3 & ~3;
    };
    TtfReader2.prototype.getFontProgram = function(newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize) {
      if (newLocaTableOut === null) {
        throw new Error("Argument Null Exception : newLocaTableOut");
      }
      if (newGlyphTable === null) {
        throw new Error("Argument Null Exception : newGlyphTable");
      }
      var tableNames = this.tableNames;
      var result = this.getFontProgramLength(newLocaTableOut, newGlyphTable, 0);
      var fontProgramLength = result.fontProgramLength;
      var numTables = result.numTables;
      var writer = new BigEndianWriter(fontProgramLength);
      writer.writeInt(65536);
      writer.writeShort(numTables);
      var entrySelector = this.entrySelectors[numTables];
      writer.writeShort((1 << (entrySelector & 31)) * 16);
      writer.writeShort(entrySelector);
      writer.writeShort((numTables - (1 << (entrySelector & 31))) * 16);
      this.writeCheckSums(writer, numTables, newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize);
      this.writeGlyphs(writer, newLocaTableOut, newGlyphTable);
      return writer.data;
    };
    TtfReader2.prototype.getFontProgramLength = function(newLocaTableOut, newGlyphTable, numTables) {
      if (newLocaTableOut === null) {
        throw new Error("Argument Null Exception : newLocaTableOut");
      }
      if (newGlyphTable === null) {
        throw new Error("Argument Null Exception : newGlyphTable");
      }
      numTables = 2;
      var tableNames = this.tableNames;
      var fontProgramLength = 0;
      for (var i = 0; i < tableNames.length; i++) {
        var tableName = tableNames[i];
        if (tableName !== "glyf" && tableName !== "loca") {
          var table = this.getTable(tableName);
          if (!table.empty) {
            ++numTables;
            fontProgramLength += this.align(table.length);
          }
        }
      }
      fontProgramLength += newLocaTableOut.length;
      fontProgramLength += newGlyphTable.length;
      var usedTablesSize = numTables * 16 + 3 * 4;
      fontProgramLength += usedTablesSize;
      return {
        fontProgramLength,
        numTables
      };
    };
    TtfReader2.prototype.writeCheckSums = function(writer, numTables, newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize) {
      if (writer === null) {
        throw new Error("Argument Null Exception : writer");
      }
      if (newLocaTableOut === null) {
        throw new Error("Argument Null Exception : newLocaTableOut");
      }
      if (newGlyphTable === null) {
        throw new Error("Argument Null Exception : newGlyphTable");
      }
      var tableNames = this.tableNames;
      var usedTablesSize = numTables * 16 + 3 * 4;
      var nextTableSize = 0;
      for (var i = 0; i < tableNames.length; i++) {
        var tableName = tableNames[i];
        var tableInfo = this.getTable(tableName);
        if (tableInfo.empty) {
          continue;
        }
        writer.writeString(tableName);
        if (tableName === "glyf") {
          var checksum = this.calculateCheckSum(newGlyphTable);
          writer.writeInt(checksum);
          nextTableSize = glyphTableSize;
        } else if (tableName === "loca") {
          var checksum = this.calculateCheckSum(newLocaTableOut);
          writer.writeInt(checksum);
          nextTableSize = locaTableSize;
        } else {
          writer.writeInt(tableInfo.checksum);
          nextTableSize = tableInfo.length;
        }
        writer.writeUInt(usedTablesSize);
        writer.writeUInt(nextTableSize);
        usedTablesSize += this.align(nextTableSize);
      }
    };
    TtfReader2.prototype.calculateCheckSum = function(bytes) {
      if (bytes === null) {
        throw new Error("Argument Null Exception : bytes");
      }
      var pos = 0;
      var byte1 = 0;
      var byte2 = 0;
      var byte3 = 0;
      var byte4 = 0;
      for (var i = 0; i < (bytes.length + 1) / 4; i++) {
        byte4 += bytes[pos++] & 255;
        byte3 += bytes[pos++] & 255;
        byte2 += bytes[pos++] & 255;
        byte1 += bytes[pos++] & 255;
      }
      var result = byte1;
      result += byte2 << 8;
      result += byte3 << 16;
      result += byte4 << 24;
      return result;
    };
    TtfReader2.prototype.writeGlyphs = function(writer, newLocaTable, newGlyphTable) {
      if (writer === null) {
        throw new Error("Argument Null Exception : writer");
      }
      if (newLocaTable === null) {
        throw new Error("Argument Null Exception : newLocaTableOut");
      }
      if (newGlyphTable === null) {
        throw new Error("Argument Null Exception : newGlyphTable");
      }
      var tableNames = this.tableNames;
      for (var i = 0; i < tableNames.length; i++) {
        var tableName = tableNames[i];
        var tableInfo = this.getTable(tableName);
        if (tableInfo.empty) {
          continue;
        }
        if (tableName === "glyf") {
          writer.writeBytes(newGlyphTable);
        } else if (tableName === "loca") {
          writer.writeBytes(newLocaTable);
        } else {
          var count = this.align(tableInfo.length);
          var buff = [];
          for (var i_1 = 0; i_1 < count; i_1++) {
            buff.push(0);
          }
          this.offset = tableInfo.offset;
          var result = this.read(buff, 0, tableInfo.length);
          writer.writeBytes(result.buffer);
        }
      }
    };
    TtfReader2.prototype.setOffset = function(offset) {
      this.offset = offset;
    };
    TtfReader2.prototype.createInternals = function() {
      this.metrics = new TtfMetrics();
      var nameTable = this.readNameTable();
      var headTable = this.readHeadTable();
      this.bIsLocaShort = headTable.indexToLocalFormat === 0;
      var horizontalHeadTable = this.readHorizontalHeaderTable();
      var os2Table = this.readOS2Table();
      var postTable = this.readPostTable();
      this.width = this.readWidthTable(horizontalHeadTable.numberOfHMetrics, headTable.unitsPerEm);
      var subTables = this.readCmapTable();
      this.initializeMetrics(nameTable, headTable, horizontalHeadTable, os2Table, postTable, subTables);
    };
    TtfReader2.prototype.getGlyph = function(charCode) {
      if (typeof charCode === "number") {
        var obj1 = null;
        if (!this.metrics.isSymbol && this.microsoftGlyphs != null) {
          if (this.microsoftGlyphs.containsKey(charCode)) {
            obj1 = this.microsoftGlyphs.getValue(charCode);
          }
        } else if (this.metrics.isSymbol && this.macintoshGlyphs != null) {
          if (this.macintoshGlyphs.containsKey(charCode)) {
            obj1 = this.macintoshGlyphs.getValue(charCode);
          }
        }
        var glyph = obj1 != null ? obj1 : this.getDefaultGlyph();
        return glyph;
      } else {
        var obj = null;
        var code = charCode.charCodeAt(0);
        if (!this.metrics.isSymbol && this.microsoft !== null) {
          if (this.microsoft.containsKey(code)) {
            obj = this.microsoft.getValue(code);
            if (code !== StringTokenizer.whiteSpace.charCodeAt(0)) {
              this.isFontPresent = true;
            }
          } else if (code !== StringTokenizer.whiteSpace.charCodeAt(0)) {
            this.isFontPresent = false;
          }
        } else if (this.metrics.isSymbol && this.macintosh !== null || this.isMacTTF) {
          if (this.maxMacIndex !== 0) {
            code %= this.maxMacIndex + 1;
          } else {
            code = (code & 65280) === 61440 ? code & 255 : code;
          }
          if (this.macintosh.containsKey(code)) {
            obj = this.macintosh.getValue(code);
            this.isFontPresent = true;
          }
        }
        if (charCode === StringTokenizer.whiteSpace && obj === null) {
          obj = new TtfGlyphInfo();
        }
        var glyph = obj !== null ? obj : this.getDefaultGlyph();
        return glyph;
      }
    };
    TtfReader2.prototype.getGlyphChars = function(chars) {
      if (chars === null || chars === void 0) {
        throw new Error("Argument Null Exception : chars");
      }
      var dictionary = new Dictionary();
      var charKeys = chars.keys();
      for (var i = 0; i < charKeys.length; i++) {
        var ch = charKeys[i];
        var glyph = this.getGlyph(ch);
        if (!glyph.empty) {
          dictionary.setValue(glyph.index, ch.charCodeAt(0));
        }
      }
      return dictionary;
    };
    TtfReader2.prototype.getAllGlyphs = function() {
      var allGlyphInfo = [];
      var info = new TtfGlyphInfo();
      var index = 0;
      for (var i = 0; i < this.width.length; i++) {
        var width = this.width[i];
        info.index = index;
        info.width = width;
        allGlyphInfo.push(info);
        index++;
      }
      return allGlyphInfo;
    };
    TtfReader2.prototype.readFontProgram = function(chars) {
      var glyphChars = this.getGlyphChars(chars);
      var locaTable = this.readLocaTable(this.bIsLocaShort);
      if (glyphChars.size() < chars.size()) {
        this.missedGlyphs = chars.size() - glyphChars.size();
      }
      this.updateGlyphChars(glyphChars, locaTable);
      var result1 = this.generateGlyphTable(glyphChars, locaTable, null, null);
      var glyphTableSize = result1.glyphTableSize;
      var newLocaTable = result1.newLocaTable;
      var newGlyphTable = result1.newGlyphTable;
      var result2 = this.updateLocaTable(newLocaTable, this.bIsLocaShort, null);
      var newLocaSize = result2.newLocaSize;
      var newLocaUpdated = result2.newLocaUpdated;
      var fontProgram = this.getFontProgram(newLocaUpdated, newGlyphTable, glyphTableSize, newLocaSize);
      return fontProgram;
    };
    TtfReader2.prototype.convertString = function(text) {
      if (text === null) {
        throw new Error("Argument Null Exception : text");
      }
      var glyph = "";
      var i = 0;
      for (var k = 0; k < text.length; k++) {
        var ch = text[k];
        var glyphInfo = this.getGlyph(ch);
        if (!glyphInfo.empty) {
          glyph += String.fromCharCode(glyphInfo.index);
          i++;
        }
      }
      return glyph;
    };
    TtfReader2.prototype.getCharWidth = function(code) {
      var glyphInfo = this.getGlyph(code);
      glyphInfo = !glyphInfo.empty ? glyphInfo : this.getDefaultGlyph();
      var codeWidth = !glyphInfo.empty ? glyphInfo.width : 0;
      return codeWidth;
    };
    TtfReader2.prototype.readString = function(length, isUnicode) {
      if (isUnicode === void 0) {
        return this.readString(length, false);
      } else {
        var result = "";
        if (isUnicode) {
          for (var i = 0; i < length; i++) {
            if (i % 2 !== 0) {
              result += String.fromCharCode(this.fontData[this.offset]);
            }
            this.offset += 1;
          }
        } else {
          for (var i = 0; i < length; i++) {
            result += String.fromCharCode(this.fontData[this.offset]);
            this.offset += 1;
          }
        }
        return result;
      }
    };
    TtfReader2.prototype.readFixed = function(offset) {
      var integer = this.readInt16(offset);
      var sFraction = this.readInt16(offset + 2);
      var fraction = sFraction / 16384;
      return integer + fraction;
    };
    TtfReader2.prototype.readInt32 = function(offset) {
      var i1 = this.fontData[offset + 3];
      var i2 = this.fontData[offset + 2];
      var i3 = this.fontData[offset + 1];
      var i4 = this.fontData[offset];
      this.offset += 4;
      return i1 + (i2 << 8) + (i3 << 16) + (i4 << 24);
    };
    TtfReader2.prototype.readUInt32 = function(offset) {
      var i1 = this.fontData[offset + 3];
      var i2 = this.fontData[offset + 2];
      var i3 = this.fontData[offset + 1];
      var i4 = this.fontData[offset];
      this.offset += 4;
      return i1 | i2 << 8 | i3 << 16 | i4 << 24;
    };
    TtfReader2.prototype.readInt16 = function(offset) {
      var result = (this.fontData[offset] << 8) + this.fontData[offset + 1];
      result = result & 1 << 15 ? result - 65536 : result;
      this.offset += 2;
      return result;
    };
    TtfReader2.prototype.readInt64 = function(offset) {
      var low = this.readInt32(offset + 4);
      var n = this.readInt32(offset) * 4294967296 + low;
      if (low < 0) {
        n += 4294967296;
      }
      return n;
    };
    TtfReader2.prototype.readUInt16 = function(offset) {
      var result = this.fontData[offset] << 8 | this.fontData[offset + 1];
      this.offset += 2;
      return result;
    };
    TtfReader2.prototype.readUshortArray = function(length) {
      var buffer = [];
      for (var i = 0; i < length; i++) {
        buffer[i] = this.readUInt16(this.offset);
      }
      return buffer;
    };
    TtfReader2.prototype.readBytes = function(length) {
      var result = [];
      for (var i = 0; i < length; i++) {
        result.push(this.fontData[this.offset]);
        this.offset += 1;
      }
      return result;
    };
    TtfReader2.prototype.readByte = function(offset) {
      var result = this.fontData[offset];
      this.offset += 1;
      return result;
    };
    TtfReader2.prototype.read = function(buffer, index, count) {
      if (buffer === null) {
        throw new Error("Argument Null Exception : buffer");
      }
      var written = 0;
      var read = 0;
      do {
        for (var i = 0; i < count - written && this.offset + i < this.fontData.length; i++) {
          buffer[index + i] = this.fontData[this.offset + i];
        }
        read = count - written;
        this.offset += read;
        written += read;
      } while (written < count);
      return {
        buffer,
        written
      };
    };
    return TtfReader2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-font-metrics.js
var __extends62 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfFontMetrics = (
  /** @class */
  function() {
    function PdfFontMetrics2() {
      this.lineGap = 0;
    }
    PdfFontMetrics2.prototype.getAscent = function(format) {
      var returnValue = this.ascent * PdfFont.charSizeMultiplier * this.getSize(format);
      return returnValue;
    };
    PdfFontMetrics2.prototype.getDescent = function(format) {
      var returnValue = this.descent * PdfFont.charSizeMultiplier * this.getSize(format);
      return returnValue;
    };
    PdfFontMetrics2.prototype.getLineGap = function(format) {
      var returnValue = this.lineGap * PdfFont.charSizeMultiplier * this.getSize(format);
      return returnValue;
    };
    PdfFontMetrics2.prototype.getHeight = function(format) {
      var height;
      var clearTypeFonts = ["cambria", "candara", "constantia", "corbel", "cariadings"];
      var clearTypeFontCollection = [];
      for (var index = 0; index < clearTypeFonts.length; index++) {
        var font = clearTypeFonts[index];
        clearTypeFontCollection.push(font);
      }
      if (this.getDescent(format) < 0) {
        height = this.getAscent(format) - this.getDescent(format) + this.getLineGap(format);
      } else {
        height = this.getAscent(format) + this.getDescent(format) + this.getLineGap(format);
      }
      return height;
    };
    PdfFontMetrics2.prototype.getSize = function(format) {
      var size = this.size;
      if (format != null) {
        switch (format.subSuperScript) {
          case PdfSubSuperScript.SubScript:
            size /= this.subScriptSizeFactor;
            break;
          case PdfSubSuperScript.SuperScript:
            size /= this.superscriptSizeFactor;
            break;
        }
      }
      return size;
    };
    PdfFontMetrics2.prototype.clone = function() {
      var metrics = this;
      metrics.widthTable = WidthTable.clone();
      return metrics;
    };
    Object.defineProperty(PdfFontMetrics2.prototype, "widthTable", {
      //  Properies
      /**
       * Gets or sets the `width table`.
       * @private
       */
      get: function() {
        return this.internalWidthTable;
      },
      set: function(value) {
        this.internalWidthTable = value;
      },
      enumerable: true,
      configurable: true
    });
    return PdfFontMetrics2;
  }()
);
var WidthTable = (
  /** @class */
  function() {
    function WidthTable2() {
    }
    WidthTable2.clone = function() {
      return null;
    };
    return WidthTable2;
  }()
);
var StandardWidthTable = (
  /** @class */
  function(_super) {
    __extends62(StandardWidthTable2, _super);
    function StandardWidthTable2(widths) {
      var _this = _super.call(this) || this;
      if (widths == null) {
        throw new Error("ArgumentNullException:widths");
      }
      _this.widths = widths;
      return _this;
    }
    StandardWidthTable2.prototype.items = function(index) {
      if (index < 0 || index >= this.widths.length) {
        throw new Error("ArgumentOutOfRangeException:index, The character is not supported by the font.");
      }
      var result = this.widths[index];
      return result;
    };
    Object.defineProperty(StandardWidthTable2.prototype, "length", {
      /**
       * Gets the `length` of the internal array.
       * @private
       */
      get: function() {
        return this.widths.length;
      },
      enumerable: true,
      configurable: true
    });
    StandardWidthTable2.prototype.clone = function() {
      var swt = this;
      swt.widths = this.widths;
      return swt;
    };
    StandardWidthTable2.prototype.toArray = function() {
      var arr = new PdfArray(this.widths);
      return arr;
    };
    return StandardWidthTable2;
  }(WidthTable)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/unicode-true-type-font.js
var UnicodeTrueTypeFont = (
  /** @class */
  function() {
    function UnicodeTrueTypeFont2(base64String, size) {
      this.nameString = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
      this.dictionaryProperties = new DictionaryProperties();
      this.isCompress = false;
      this.isEmbedFont = false;
      this.cmapPrefix = "/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap" + Operators.newLine + "/CIDSystemInfo << /Registry (Adobe)/Ordering (UCS)/Supplement 0>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange" + Operators.newLine;
      this.cmapEndCodespaceRange = "endcodespacerange" + Operators.newLine;
      this.cmapBeginRange = "beginbfrange" + Operators.newLine;
      this.cmapEndRange = "endbfrange" + Operators.newLine;
      this.cmapSuffix = "endbfrange\nendcmap\nCMapName currentdict /CMap defineresource pop\nend end" + Operators.newLine;
      if (base64String === null || base64String === void 0) {
        throw new Error("ArgumentNullException:base64String");
      }
      this.fontSize = size;
      this.fontString = base64String;
      this.Initialize();
    }
    UnicodeTrueTypeFont2.prototype.getCharWidth = function(charCode) {
      var codeWidth = this.ttfReader.getCharWidth(charCode);
      return codeWidth;
    };
    UnicodeTrueTypeFont2.prototype.getLineWidth = function(line) {
      var width = 0;
      for (var i = 0, len = line.length; i < len; i++) {
        var ch = line[i];
        var charWidth = this.getCharWidth(ch);
        width += charWidth;
      }
      return width;
    };
    UnicodeTrueTypeFont2.prototype.Initialize = function() {
      var byteArray = new ByteArray(this.fontString.length);
      byteArray.writeFromBase64String(this.fontString);
      this.fontData = byteArray.internalBuffer;
      this.ttfReader = new TtfReader(this.fontData);
      this.ttfMetrics = this.ttfReader.metrics;
    };
    UnicodeTrueTypeFont2.prototype.createInternals = function() {
      this.fontDictionary = new PdfDictionary();
      this.fontProgram = new PdfStream();
      this.cmap = new PdfStream();
      this.descendantFont = new PdfDictionary();
      this.metrics = new PdfFontMetrics();
      this.ttfReader.createInternals();
      this.ttfMetrics = this.ttfReader.metrics;
      this.initializeMetrics();
      this.subsetName = this.getFontName();
      this.createDescendantFont();
      this.createCmap();
      this.createFontDictionary();
      this.createFontProgram();
    };
    UnicodeTrueTypeFont2.prototype.getInternals = function() {
      return this.fontDictionary;
    };
    UnicodeTrueTypeFont2.prototype.initializeMetrics = function() {
      var ttfMetrics = this.ttfReader.metrics;
      this.metrics.ascent = ttfMetrics.macAscent;
      this.metrics.descent = ttfMetrics.macDescent;
      this.metrics.height = ttfMetrics.macAscent - ttfMetrics.macDescent + ttfMetrics.lineGap;
      this.metrics.name = ttfMetrics.fontFamily;
      this.metrics.postScriptName = ttfMetrics.postScriptName;
      this.metrics.size = this.fontSize;
      this.metrics.widthTable = new StandardWidthTable(ttfMetrics.widthTable);
      this.metrics.lineGap = ttfMetrics.lineGap;
      this.metrics.subScriptSizeFactor = ttfMetrics.subScriptSizeFactor;
      this.metrics.superscriptSizeFactor = ttfMetrics.superscriptSizeFactor;
      this.metrics.isBold = ttfMetrics.isBold;
    };
    UnicodeTrueTypeFont2.prototype.getFontName = function() {
      var builder = "";
      var name;
      for (var i = 0; i < 6; i++) {
        var index = Math.floor(Math.random() * (25 - 0 + 1)) + 0;
        builder += this.nameString[index];
      }
      builder += "+";
      builder += this.ttfReader.metrics.postScriptName;
      name = builder.toString();
      name = this.formatName(name);
      return name;
    };
    UnicodeTrueTypeFont2.prototype.formatName = function(fontName) {
      var ret = fontName.replace("(", "#28");
      ret = ret.replace(")", "#29");
      ret = ret.replace("[", "#5B");
      ret = ret.replace("]", "#5D");
      ret = ret.replace("<", "#3C");
      ret = ret.replace(">", "#3E");
      ret = ret.replace("{", "#7B");
      ret = ret.replace("}", "#7D");
      ret = ret.replace("/", "#2F");
      ret = ret.replace("%", "#25");
      return ret.replace(" ", "#20");
    };
    UnicodeTrueTypeFont2.prototype.createDescendantFont = function() {
      this.descendantFont.isResource = true;
      this.descendantFont.descendantFontBeginSave = new SaveDescendantFontEventHandler(this);
      this.descendantFont.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.font));
      this.descendantFont.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.cIDFontType2));
      this.descendantFont.items.setValue(this.dictionaryProperties.baseFont, new PdfName(this.subsetName));
      this.descendantFont.items.setValue(this.dictionaryProperties.cIDToGIDMap, new PdfName(this.dictionaryProperties.identity));
      this.descendantFont.items.setValue(this.dictionaryProperties.dw, new PdfNumber(1e3));
      this.fontDescriptor = this.createFontDescriptor();
      this.descendantFont.items.setValue(this.dictionaryProperties.fontDescriptor, new PdfReferenceHolder(this.fontDescriptor));
      var systemInfo = this.createSystemInfo();
      this.descendantFont.items.setValue(this.dictionaryProperties.cIDSystemInfo, systemInfo);
    };
    UnicodeTrueTypeFont2.prototype.createFontDescriptor = function() {
      var descriptor = new PdfDictionary();
      var metrics = this.ttfReader.metrics;
      descriptor.isResource = true;
      descriptor.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.fontDescriptor));
      descriptor.items.setValue(this.dictionaryProperties.fontName, new PdfName(this.subsetName));
      descriptor.items.setValue(this.dictionaryProperties.flags, new PdfNumber(this.getDescriptorFlags()));
      descriptor.items.setValue(this.dictionaryProperties.fontBBox, PdfArray.fromRectangle(this.getBoundBox()));
      descriptor.items.setValue(this.dictionaryProperties.missingWidth, new PdfNumber(metrics.widthTable[32]));
      descriptor.items.setValue(this.dictionaryProperties.stemV, new PdfNumber(metrics.stemV));
      descriptor.items.setValue(this.dictionaryProperties.italicAngle, new PdfNumber(metrics.italicAngle));
      descriptor.items.setValue(this.dictionaryProperties.capHeight, new PdfNumber(metrics.capHeight));
      descriptor.items.setValue(this.dictionaryProperties.ascent, new PdfNumber(metrics.winAscent));
      descriptor.items.setValue(this.dictionaryProperties.descent, new PdfNumber(metrics.winDescent));
      descriptor.items.setValue(this.dictionaryProperties.leading, new PdfNumber(metrics.leading));
      descriptor.items.setValue(this.dictionaryProperties.avgWidth, new PdfNumber(metrics.widthTable[32]));
      descriptor.items.setValue(this.dictionaryProperties.fontFile2, new PdfReferenceHolder(this.fontProgram));
      descriptor.items.setValue(this.dictionaryProperties.maxWidth, new PdfNumber(metrics.widthTable[32]));
      descriptor.items.setValue(this.dictionaryProperties.xHeight, new PdfNumber(0));
      descriptor.items.setValue(this.dictionaryProperties.stemH, new PdfNumber(0));
      return descriptor;
    };
    UnicodeTrueTypeFont2.prototype.createCmap = function() {
      this.cmap.cmapBeginSave = new SaveCmapEventHandler(this);
    };
    UnicodeTrueTypeFont2.prototype.createFontDictionary = function() {
      this.fontDictionary.isResource = true;
      this.fontDictionary.fontDictionaryBeginSave = new SaveFontDictionaryEventHandler(this);
      this.fontDictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.font));
      this.fontDictionary.items.setValue(this.dictionaryProperties.baseFont, new PdfName(this.subsetName));
      this.fontDictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.type0));
      this.fontDictionary.items.setValue(this.dictionaryProperties.encoding, new PdfName(this.dictionaryProperties.identityH));
      var descFonts = new PdfArray();
      var reference = new PdfReferenceHolder(this.descendantFont);
      descFonts.isFont = true;
      descFonts.add(reference);
      this.fontDictionary.items.setValue(this.dictionaryProperties.descendantFonts, descFonts);
    };
    UnicodeTrueTypeFont2.prototype.createFontProgram = function() {
      this.fontProgram.fontProgramBeginSave = new SaveFontProgramEventHandler(this);
    };
    UnicodeTrueTypeFont2.prototype.createSystemInfo = function() {
      var systemInfo = new PdfDictionary();
      systemInfo.items.setValue(this.dictionaryProperties.registry, new PdfString("Adobe"));
      systemInfo.items.setValue(this.dictionaryProperties.ordering, new PdfString(this.dictionaryProperties.identity));
      systemInfo.items.setValue(this.dictionaryProperties.supplement, new PdfNumber(0));
      return systemInfo;
    };
    UnicodeTrueTypeFont2.prototype.descendantFontBeginSave = function() {
      if (this.usedChars !== null && this.usedChars !== void 0 && this.usedChars.size() > 0) {
        var width = this.getDescendantWidth();
        if (width !== null) {
          this.descendantFont.items.setValue(this.dictionaryProperties.w, width);
        }
      }
    };
    UnicodeTrueTypeFont2.prototype.cmapBeginSave = function() {
      this.generateCmap();
    };
    UnicodeTrueTypeFont2.prototype.fontDictionaryBeginSave = function() {
      if (this.usedChars !== null && this.usedChars !== void 0 && this.usedChars.size() > 0 && !this.fontDictionary.containsKey(this.dictionaryProperties.toUnicode)) {
        this.fontDictionary.items.setValue(this.dictionaryProperties.toUnicode, new PdfReferenceHolder(this.cmap));
      }
    };
    UnicodeTrueTypeFont2.prototype.fontProgramBeginSave = function() {
      this.isCompress = true;
      this.generateFontProgram();
    };
    UnicodeTrueTypeFont2.prototype.getDescendantWidth = function() {
      var array = new PdfArray();
      if (this.usedChars !== null && this.usedChars !== void 0 && this.usedChars.size() > 0) {
        var glyphInfo = [];
        var keys = this.usedChars.keys();
        for (var i = 0; i < keys.length; i++) {
          var chLen = keys[i];
          var glyph = this.ttfReader.getGlyph(chLen);
          if (glyph.empty) {
            continue;
          }
          glyphInfo.push(glyph);
        }
        glyphInfo.sort(function(a, b) {
          return a.index - b.index;
        });
        var firstGlyphIndex = 0;
        var lastGlyphIndex = 0;
        var firstGlyphIndexWasSet = false;
        var widthDetails = new PdfArray();
        for (var i = 0; i < glyphInfo.length; i++) {
          var glyph = glyphInfo[i];
          if (!firstGlyphIndexWasSet) {
            firstGlyphIndexWasSet = true;
            firstGlyphIndex = glyph.index;
            lastGlyphIndex = glyph.index - 1;
          }
          if ((lastGlyphIndex + 1 !== glyph.index || i + 1 === glyphInfo.length) && glyphInfo.length > 1) {
            array.add(new PdfNumber(firstGlyphIndex));
            if (i !== 0) {
              array.add(widthDetails);
            }
            firstGlyphIndex = glyph.index;
            widthDetails = new PdfArray();
          }
          widthDetails.add(new PdfNumber(glyph.width));
          if (i + 1 === glyphInfo.length) {
            array.add(new PdfNumber(firstGlyphIndex));
            array.add(widthDetails);
          }
          lastGlyphIndex = glyph.index;
        }
      }
      return array;
    };
    UnicodeTrueTypeFont2.prototype.generateCmap = function() {
      if (this.usedChars !== null && this.usedChars !== void 0 && this.usedChars.size() > 0) {
        var glyphChars = this.ttfReader.getGlyphChars(this.usedChars);
        if (glyphChars.size() > 0) {
          var keys = glyphChars.keys().sort();
          var first = keys[0];
          var last = keys[keys.length - 1];
          var middlePart = this.toHexString(first, false) + this.toHexString(last, false) + Operators.newLine;
          var builder = "";
          builder += this.cmapPrefix;
          builder += middlePart;
          builder += this.cmapEndCodespaceRange;
          var nextRange = 0;
          for (var i = 0; i < keys.length; i++) {
            if (nextRange === 0) {
              if (i !== 0) {
                builder += this.cmapEndRange;
              }
              nextRange = Math.min(100, keys.length - i);
              builder += nextRange;
              builder += Operators.whiteSpace;
              builder += this.cmapBeginRange;
            }
            nextRange -= 1;
            var key = keys[i];
            builder += this.toHexString(key, true) + this.toHexString(key, true) + this.toHexString(glyphChars.getValue(key), true) + "\n";
          }
          builder += this.cmapSuffix;
          this.cmap.clearStream();
          this.cmap.isResource = true;
          this.cmap.write(builder);
        }
      }
    };
    UnicodeTrueTypeFont2.prototype.generateFontProgram = function() {
      var fontProgram = null;
      this.usedChars = this.usedChars === null || this.usedChars === void 0 ? new Dictionary() : this.usedChars;
      this.ttfReader.setOffset(0);
      fontProgram = this.ttfReader.readFontProgram(this.usedChars);
      this.fontProgram.clearStream();
      this.fontProgram.isResource = true;
      this.fontProgram.writeBytes(fontProgram);
    };
    UnicodeTrueTypeFont2.prototype.getDescriptorFlags = function() {
      var flags = 0;
      var metrics = this.ttfReader.metrics;
      if (metrics.isFixedPitch) {
        flags |= FontDescriptorFlags.FixedPitch;
      }
      if (metrics.isSymbol) {
        flags |= FontDescriptorFlags.Symbolic;
      } else {
        flags |= FontDescriptorFlags.Nonsymbolic;
      }
      if (metrics.isItalic) {
        flags |= FontDescriptorFlags.Italic;
      }
      if (metrics.isBold) {
        flags |= FontDescriptorFlags.ForceBold;
      }
      return flags;
    };
    UnicodeTrueTypeFont2.prototype.getBoundBox = function() {
      var rect = this.ttfReader.metrics.fontBox;
      var width = Math.abs(rect.right - rect.left);
      var height = Math.abs(rect.top - rect.bottom);
      var rectangle = new RectangleF(rect.left, rect.bottom, width, height);
      return rectangle;
    };
    UnicodeTrueTypeFont2.prototype.toHexString = function(n, isCaseChange) {
      var s = n.toString(16);
      if (isCaseChange) {
        s = s.toUpperCase();
      }
      return "<0000".substring(0, 5 - s.length) + s + ">";
    };
    UnicodeTrueTypeFont2.prototype.setSymbols = function(text) {
      if (text === null) {
        throw new Error("Argument Null Exception : text");
      }
      if (this.usedChars === null || this.usedChars === void 0) {
        this.usedChars = new Dictionary();
      }
      for (var i = 0; i < text.length; i++) {
        var ch = text[i];
        this.usedChars.setValue(ch, String.fromCharCode(0));
      }
      if (this.isEmbedFont === false) {
        this.getDescendantWidth();
      }
    };
    return UnicodeTrueTypeFont2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/rtl/rtl-text-shape.js
var ArabicShapeRenderer = (
  /** @class */
  function() {
    function ArabicShapeRenderer2() {
      this.arabicCharTable = [["ء", "ﺀ"], ["آ", "ﺁ", "ﺂ"], ["أ", "ﺃ", "ﺄ"], ["ؤ", "ﺅ", "ﺆ"], ["إ", "ﺇ", "ﺈ"], ["ئ", "ﺉ", "ﺊ", "ﺋ", "ﺌ"], ["ا", "ﺍ", "ﺎ"], ["ب", "ﺏ", "ﺐ", "ﺑ", "ﺒ"], ["ة", "ﺓ", "ﺔ"], ["ت", "ﺕ", "ﺖ", "ﺗ", "ﺘ"], ["ث", "ﺙ", "ﺚ", "ﺛ", "ﺜ"], ["ج", "ﺝ", "ﺞ", "ﺟ", "ﺠ"], ["ح", "ﺡ", "ﺢ", "ﺣ", "ﺤ"], ["خ", "ﺥ", "ﺦ", "ﺧ", "ﺨ"], ["د", "ﺩ", "ﺪ"], ["ذ", "ﺫ", "ﺬ"], ["ر", "ﺭ", "ﺮ"], ["ز", "ﺯ", "ﺰ"], ["س", "ﺱ", "ﺲ", "ﺳ", "ﺴ"], ["ش", "ﺵ", "ﺶ", "ﺷ", "ﺸ"], ["ص", "ﺹ", "ﺺ", "ﺻ", "ﺼ"], ["ض", "ﺽ", "ﺾ", "ﺿ", "ﻀ"], ["ط", "ﻁ", "ﻂ", "ﻃ", "ﻄ"], ["ظ", "ﻅ", "ﻆ", "ﻇ", "ﻈ"], ["ع", "ﻉ", "ﻊ", "ﻋ", "ﻌ"], ["غ", "ﻍ", "ﻎ", "ﻏ", "ﻐ"], ["ـ", "ـ", "ـ", "ـ", "ـ"], ["ف", "ﻑ", "ﻒ", "ﻓ", "ﻔ"], ["ق", "ﻕ", "ﻖ", "ﻗ", "ﻘ"], ["ك", "ﻙ", "ﻚ", "ﻛ", "ﻜ"], ["ل", "ﻝ", "ﻞ", "ﻟ", "ﻠ"], ["م", "ﻡ", "ﻢ", "ﻣ", "ﻤ"], ["ن", "ﻥ", "ﻦ", "ﻧ", "ﻨ"], ["ه", "ﻩ", "ﻪ", "ﻫ", "ﻬ"], ["و", "ﻭ", "ﻮ"], ["ى", "ﻯ", "ﻰ", "ﯨ", "ﯩ"], ["ي", "ﻱ", "ﻲ", "ﻳ", "ﻴ"], ["ٱ", "ﭐ", "ﭑ"], ["ٹ", "ﭦ", "ﭧ", "ﭨ", "ﭩ"], ["ٺ", "ﭞ", "ﭟ", "ﭠ", "ﭡ"], ["ٻ", "ﭒ", "ﭓ", "ﭔ", "ﭕ"], ["پ", "ﭖ", "ﭗ", "ﭘ", "ﭙ"], ["ٿ", "ﭢ", "ﭣ", "ﭤ", "ﭥ"], ["ڀ", "ﭚ", "ﭛ", "ﭜ", "ﭝ"], ["ڃ", "ﭶ", "ﭷ", "ﭸ", "ﭹ"], ["ڄ", "ﭲ", "ﭳ", "ﭴ", "ﭵ"], ["چ", "ﭺ", "ﭻ", "ﭼ", "ﭽ"], ["ڇ", "ﭾ", "ﭿ", "ﮀ", "ﮁ"], ["ڈ", "ﮈ", "ﮉ"], ["ڌ", "ﮄ", "ﮅ"], ["ڍ", "ﮂ", "ﮃ"], ["ڎ", "ﮆ", "ﮇ"], ["ڑ", "ﮌ", "ﮍ"], ["ژ", "ﮊ", "ﮋ"], ["ڤ", "ﭪ", "ﭫ", "ﭬ", "ﭭ"], ["ڦ", "ﭮ", "ﭯ", "ﭰ", "ﭱ"], ["ک", "ﮎ", "ﮏ", "ﮐ", "ﮑ"], ["ڭ", "ﯓ", "ﯔ", "ﯕ", "ﯖ"], ["گ", "ﮒ", "ﮓ", "ﮔ", "ﮕ"], ["ڱ", "ﮚ", "ﮛ", "ﮜ", "ﮝ"], ["ڳ", "ﮖ", "ﮗ", "ﮘ", "ﮙ"], ["ں", "ﮞ", "ﮟ"], ["ڻ", "ﮠ", "ﮡ", "ﮢ", "ﮣ"], ["ھ", "ﮪ", "ﮫ", "ﮬ", "ﮭ"], ["ۀ", "ﮤ", "ﮥ"], ["ہ", "ﮦ", "ﮧ", "ﮨ", "ﮩ"], ["ۅ", "ﯠ", "ﯡ"], ["ۆ", "ﯙ", "ﯚ"], ["ۇ", "ﯗ", "ﯘ"], ["ۈ", "ﯛ", "ﯜ"], ["ۉ", "ﯢ", "ﯣ"], ["ۋ", "ﯞ", "ﯟ"], ["ی", "ﯼ", "ﯽ", "ﯾ", "ﯿ"], ["ې", "ﯤ", "ﯥ", "ﯦ", "ﯧ"], ["ے", "ﮮ", "ﮯ"], ["ۓ", "ﮰ", "ﮱ"]];
      this.alef = "ا";
      this.alefHamza = "أ";
      this.alefHamzaBelow = "إ";
      this.alefMadda = "آ";
      this.lam = "ل";
      this.hamza = "ء";
      this.zeroWidthJoiner = "‍";
      this.hamzaAbove = "ٔ";
      this.hamzaBelow = "ٕ";
      this.wawHamza = "ؤ";
      this.yehHamza = "ئ";
      this.waw = "و";
      this.alefMaksura = "ى";
      this.yeh = "ي";
      this.farsiYeh = "ی";
      this.shadda = "ّ";
      this.madda = "ٓ";
      this.lwa = "ﻻ";
      this.lwawh = "ﻷ";
      this.lwawhb = "ﻹ";
      this.lwawm = "ﻵ";
      this.bwhb = "ۓ";
      this.fathatan = "ً";
      this.superScriptalef = "ٰ";
      this.vowel = 1;
      this.arabicMapTable = new Dictionary();
      for (var i = 0; i < this.arabicCharTable.length; i++) {
        this.arabicMapTable.setValue(this.arabicCharTable[i][0], this.arabicCharTable[i]);
      }
    }
    ArabicShapeRenderer2.prototype.getCharacterShape = function(input, index) {
      if (input >= this.hamza && input <= this.bwhb) {
        var value = [];
        if (this.arabicMapTable.getValue(input)) {
          value = this.arabicMapTable.getValue(input);
          return value[index + 1];
        }
      } else if (input >= this.lwawm && input <= this.lwa) {
        return input;
      }
      return input;
    };
    ArabicShapeRenderer2.prototype.shape = function(text, level) {
      var builder = "";
      var str2 = "";
      for (var i = 0; i < text.length; i++) {
        var c = text[i];
        if (c >= "؀" && c <= "ۿ") {
          str2 = str2 + c;
        } else {
          if (str2.length > 0) {
            var st = this.doShape(str2.toString(), 0);
            builder = builder + st;
            str2 = "";
          }
          builder = builder + c;
        }
      }
      if (str2.length > 0) {
        var st = this.doShape(str2.toString(), 0);
        builder = builder + st;
      }
      return builder.toString();
    };
    ArabicShapeRenderer2.prototype.doShape = function(input, level) {
      var str = "";
      var ligature = 0;
      var len = 0;
      var i = 0;
      var next = "";
      var previous = new ArabicShape();
      var present = new ArabicShape();
      while (i < input.length) {
        next = input[i++];
        ligature = this.ligature(next, present);
        if (ligature === 0) {
          var shapeCount = this.getShapeCount(next);
          len = shapeCount === 1 ? 0 : 2;
          if (previous.Shapes > 2) {
            len += 1;
          }
          len = len % present.Shapes;
          present.Value = this.getCharacterShape(present.Value, len);
          str = this.append(str, previous, level);
          previous = present;
          present = new ArabicShape();
          present.Value = next;
          present.Shapes = shapeCount;
          present.Ligature++;
        }
      }
      len = previous.Shapes > 2 ? 1 : 0;
      len = len % present.Shapes;
      present.Value = this.getCharacterShape(present.Value, len);
      str = this.append(str, previous, level);
      str = this.append(str, present, level);
      return str.toString();
    };
    ArabicShapeRenderer2.prototype.append = function(builder, shape, level) {
      if (shape.Value !== "") {
        builder = builder + shape.Value;
        shape.Ligature -= 1;
        if (shape.Type !== "") {
          if ((level & this.vowel) === 0) {
            builder = builder + shape.Type;
            shape.Ligature -= 1;
          } else {
            shape.Ligature -= 1;
          }
        }
        if (shape.vowel !== "") {
          if ((level & this.vowel) === 0) {
            builder = builder + shape.vowel;
            shape.Ligature -= 1;
          } else {
            shape.Ligature -= 1;
          }
        }
      }
      return builder;
    };
    ArabicShapeRenderer2.prototype.ligature = function(value, shape) {
      if (shape.Value !== "") {
        var result = 0;
        if (value >= this.fathatan && value <= this.hamzaBelow || value === this.superScriptalef) {
          result = 1;
          if (shape.vowel !== "" && value !== this.shadda) {
            result = 2;
          }
          if (value === this.shadda) {
            if (shape.Type == null) {
              shape.Type = this.shadda;
            } else {
              return 0;
            }
          } else if (value === this.hamzaBelow) {
            if (shape.Value === this.alef) {
              shape.Value = this.alefHamzaBelow;
              result = 2;
            } else if (value === this.lwa) {
              shape.Value = this.lwawhb;
              result = 2;
            } else {
              shape.Type = this.hamzaBelow;
            }
          } else if (value === this.hamzaAbove) {
            if (shape.Value === this.alef) {
              shape.Value = this.alefHamza;
              result = 2;
            } else if (shape.Value === this.lwa) {
              shape.Value = this.lwawh;
              result = 2;
            } else if (shape.Value === this.waw) {
              shape.Value = this.wawHamza;
              result = 2;
            } else if (shape.Value === this.yeh || shape.Value === this.alefMaksura || shape.Value === this.farsiYeh) {
              shape.Value = this.yehHamza;
              result = 2;
            } else {
              shape.Type = this.hamzaAbove;
            }
          } else if (value === this.madda) {
            if (shape.Value === this.alef) {
              shape.Value = this.alefMadda;
              result = 2;
            }
          } else {
            shape.vowel = value;
          }
          if (result === 1) {
            shape.Ligature++;
          }
          return result;
        }
        if (shape.vowel !== "") {
          return 0;
        }
        if (shape.Value === this.lam) {
          if (value === this.alef) {
            shape.Value = this.lwa;
            shape.Shapes = 2;
            result = 3;
          } else if (value === this.alefHamza) {
            shape.Value = this.lwawh;
            shape.Shapes = 2;
            result = 3;
          } else if (value === this.alefHamzaBelow) {
            shape.Value = this.lwawhb;
            shape.Shapes = 2;
            result = 3;
          } else if (value === this.alefMadda) {
            shape.Value = this.lwawm;
            shape.Shapes = 2;
            result = 3;
          }
        }
        return result;
      } else {
        return 0;
      }
    };
    ArabicShapeRenderer2.prototype.getShapeCount = function(shape) {
      if (shape >= this.hamza && shape <= this.bwhb && !(shape >= this.fathatan && shape <= this.hamzaBelow || shape === this.superScriptalef)) {
        var c = [];
        if (this.arabicMapTable.getValue(shape)) {
          c = this.arabicMapTable.getValue(shape);
          return c.length - 1;
        }
      } else if (shape === this.zeroWidthJoiner) {
        return 4;
      }
      return 1;
    };
    return ArabicShapeRenderer2;
  }()
);
var ArabicShape = (
  /** @class */
  function() {
    function ArabicShape2() {
      this.shapeValue = "";
      this.shapeType = "";
      this.shapeVowel = "";
      this.shapeLigature = 0;
      this.shapeShapes = 1;
    }
    Object.defineProperty(ArabicShape2.prototype, "Value", {
      //#endregion
      //#region Properties 
      /**
       * Gets or sets the values.
       * @private
       */
      get: function() {
        return this.shapeValue;
      },
      set: function(value) {
        this.shapeValue = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ArabicShape2.prototype, "Type", {
      /**
       * Gets or sets the values.
       * @private
       */
      get: function() {
        return this.shapeType;
      },
      set: function(value) {
        this.shapeType = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ArabicShape2.prototype, "vowel", {
      /**
       * Gets or sets the values.
       * @private
       */
      get: function() {
        return this.shapeVowel;
      },
      set: function(value) {
        this.shapeVowel = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ArabicShape2.prototype, "Ligature", {
      /**
       * Gets or sets the values.
       * @private
       */
      get: function() {
        return this.shapeLigature;
      },
      set: function(value) {
        this.shapeLigature = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ArabicShape2.prototype, "Shapes", {
      /**
       * Gets or sets the values.
       * @private
       */
      get: function() {
        return this.shapeShapes;
      },
      set: function(value) {
        this.shapeShapes = value;
      },
      enumerable: true,
      configurable: true
    });
    return ArabicShape2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/rtl/rtl-bidirectional.js
var Bidi = (
  /** @class */
  function() {
    function Bidi2() {
      this.indexes = [];
      this.indexLevels = [];
      this.mirroringShapeCharacters = new Dictionary();
      this.update();
    }
    Bidi2.prototype.doMirrorShaping = function(text) {
      var result = [];
      for (var i = 0; i < text.length; i++) {
        if ((this.indexLevels[i] & 1) === 1 && this.mirroringShapeCharacters.containsKey(text[i].charCodeAt(0))) {
          result[i] = String.fromCharCode(this.mirroringShapeCharacters.getValue(text[i].charCodeAt(0)));
        } else {
          result[i] = text[i].toString();
        }
      }
      var res = "";
      for (var j = 0; j < result.length; j++) {
        res = res + result[j];
      }
      return res;
    };
    Bidi2.prototype.getLogicalToVisualString = function(inputText, isRtl) {
      var rtlCharacters = new RtlCharacters();
      this.indexLevels = rtlCharacters.getVisualOrder(inputText, isRtl);
      this.setDefaultIndexLevel();
      this.doOrder(0, this.indexLevels.length - 1);
      var text = this.doMirrorShaping(inputText);
      var resultBuilder = "";
      for (var i = 0; i < this.indexes.length; i++) {
        var index = this.indexes[i];
        resultBuilder += text[index];
      }
      return resultBuilder.toString();
    };
    Bidi2.prototype.setDefaultIndexLevel = function() {
      for (var i = 0; i < this.indexLevels.length; i++) {
        this.indexes[i] = i;
      }
    };
    Bidi2.prototype.doOrder = function(sIndex, eIndex) {
      var max = this.indexLevels[sIndex];
      var min = max;
      var odd = max;
      var even = max;
      for (var i = sIndex + 1; i <= eIndex; ++i) {
        var data = this.indexLevels[i];
        if (data > max) {
          max = data;
        } else if (data < min) {
          min = data;
        }
        odd &= data;
        even |= data;
      }
      if ((even & 1) === 0) {
        return;
      }
      if ((odd & 1) === 1) {
        this.reArrange(sIndex, eIndex + 1);
        return;
      }
      min |= 1;
      while (max >= min) {
        var pstart = sIndex;
        while (true) {
          while (pstart <= eIndex) {
            if (this.indexLevels[pstart] >= max) {
              break;
            }
            pstart += 1;
          }
          if (pstart > eIndex) {
            break;
          }
          var pend = pstart + 1;
          while (pend <= eIndex) {
            if (this.indexLevels[pend] < max) {
              break;
            }
            pend += 1;
          }
          this.reArrange(pstart, pend);
          pstart = pend + 1;
        }
        max -= 1;
      }
    };
    Bidi2.prototype.reArrange = function(i, j) {
      var length = (i + j) / 2;
      --j;
      for (; i < length; ++i, --j) {
        var temp = this.indexes[i];
        this.indexes[i] = this.indexes[j];
        this.indexes[j] = temp;
      }
    };
    Bidi2.prototype.update = function() {
      this.mirroringShapeCharacters.setValue(40, 41);
      this.mirroringShapeCharacters.setValue(41, 40);
      this.mirroringShapeCharacters.setValue(60, 62);
      this.mirroringShapeCharacters.setValue(62, 60);
      this.mirroringShapeCharacters.setValue(91, 93);
      this.mirroringShapeCharacters.setValue(93, 91);
      this.mirroringShapeCharacters.setValue(123, 125);
      this.mirroringShapeCharacters.setValue(125, 123);
      this.mirroringShapeCharacters.setValue(171, 187);
      this.mirroringShapeCharacters.setValue(187, 171);
      this.mirroringShapeCharacters.setValue(8249, 8250);
      this.mirroringShapeCharacters.setValue(8250, 8249);
      this.mirroringShapeCharacters.setValue(8261, 8262);
      this.mirroringShapeCharacters.setValue(8262, 8261);
      this.mirroringShapeCharacters.setValue(8317, 8318);
      this.mirroringShapeCharacters.setValue(8318, 8317);
      this.mirroringShapeCharacters.setValue(8333, 8334);
      this.mirroringShapeCharacters.setValue(8334, 8333);
      this.mirroringShapeCharacters.setValue(8712, 8715);
      this.mirroringShapeCharacters.setValue(8713, 8716);
      this.mirroringShapeCharacters.setValue(8714, 8717);
      this.mirroringShapeCharacters.setValue(8715, 8712);
      this.mirroringShapeCharacters.setValue(8716, 8713);
      this.mirroringShapeCharacters.setValue(8717, 8714);
      this.mirroringShapeCharacters.setValue(8725, 10741);
      this.mirroringShapeCharacters.setValue(8764, 8765);
      this.mirroringShapeCharacters.setValue(8765, 8764);
      this.mirroringShapeCharacters.setValue(8771, 8909);
      this.mirroringShapeCharacters.setValue(8786, 8787);
      this.mirroringShapeCharacters.setValue(8787, 8786);
      this.mirroringShapeCharacters.setValue(8788, 8789);
      this.mirroringShapeCharacters.setValue(8789, 8788);
      this.mirroringShapeCharacters.setValue(8804, 8805);
      this.mirroringShapeCharacters.setValue(8805, 8804);
      this.mirroringShapeCharacters.setValue(8806, 8807);
      this.mirroringShapeCharacters.setValue(8807, 8806);
      this.mirroringShapeCharacters.setValue(8808, 8809);
      this.mirroringShapeCharacters.setValue(8809, 8808);
      this.mirroringShapeCharacters.setValue(8810, 8811);
      this.mirroringShapeCharacters.setValue(8811, 8810);
      this.mirroringShapeCharacters.setValue(8814, 8815);
      this.mirroringShapeCharacters.setValue(8815, 8814);
      this.mirroringShapeCharacters.setValue(8816, 8817);
      this.mirroringShapeCharacters.setValue(8817, 8816);
      this.mirroringShapeCharacters.setValue(8818, 8819);
      this.mirroringShapeCharacters.setValue(8819, 8818);
      this.mirroringShapeCharacters.setValue(8820, 8821);
      this.mirroringShapeCharacters.setValue(8821, 8820);
      this.mirroringShapeCharacters.setValue(8822, 8823);
      this.mirroringShapeCharacters.setValue(8823, 8822);
      this.mirroringShapeCharacters.setValue(8824, 8825);
      this.mirroringShapeCharacters.setValue(8825, 8824);
      this.mirroringShapeCharacters.setValue(8826, 8827);
      this.mirroringShapeCharacters.setValue(8827, 8826);
      this.mirroringShapeCharacters.setValue(8828, 8829);
      this.mirroringShapeCharacters.setValue(8829, 8828);
      this.mirroringShapeCharacters.setValue(8830, 8831);
      this.mirroringShapeCharacters.setValue(8831, 8830);
      this.mirroringShapeCharacters.setValue(8832, 8833);
      this.mirroringShapeCharacters.setValue(8833, 8832);
      this.mirroringShapeCharacters.setValue(8834, 8835);
      this.mirroringShapeCharacters.setValue(8835, 8834);
      this.mirroringShapeCharacters.setValue(8836, 8837);
      this.mirroringShapeCharacters.setValue(8837, 8836);
      this.mirroringShapeCharacters.setValue(8838, 8839);
      this.mirroringShapeCharacters.setValue(8839, 8838);
      this.mirroringShapeCharacters.setValue(8840, 8841);
      this.mirroringShapeCharacters.setValue(8841, 8840);
      this.mirroringShapeCharacters.setValue(8842, 8843);
      this.mirroringShapeCharacters.setValue(8843, 8842);
      this.mirroringShapeCharacters.setValue(8847, 8848);
      this.mirroringShapeCharacters.setValue(8848, 8847);
      this.mirroringShapeCharacters.setValue(8849, 8850);
      this.mirroringShapeCharacters.setValue(8850, 8849);
      this.mirroringShapeCharacters.setValue(8856, 10680);
      this.mirroringShapeCharacters.setValue(8866, 8867);
      this.mirroringShapeCharacters.setValue(8867, 8866);
      this.mirroringShapeCharacters.setValue(8870, 10974);
      this.mirroringShapeCharacters.setValue(8872, 10980);
      this.mirroringShapeCharacters.setValue(8873, 10979);
      this.mirroringShapeCharacters.setValue(8875, 10981);
      this.mirroringShapeCharacters.setValue(8880, 8881);
      this.mirroringShapeCharacters.setValue(8881, 8880);
      this.mirroringShapeCharacters.setValue(8882, 8883);
      this.mirroringShapeCharacters.setValue(8883, 8882);
      this.mirroringShapeCharacters.setValue(8884, 8885);
      this.mirroringShapeCharacters.setValue(8885, 8884);
      this.mirroringShapeCharacters.setValue(8886, 8887);
      this.mirroringShapeCharacters.setValue(8887, 8886);
      this.mirroringShapeCharacters.setValue(8905, 8906);
      this.mirroringShapeCharacters.setValue(8906, 8905);
      this.mirroringShapeCharacters.setValue(8907, 8908);
      this.mirroringShapeCharacters.setValue(8908, 8907);
      this.mirroringShapeCharacters.setValue(8909, 8771);
      this.mirroringShapeCharacters.setValue(8912, 8913);
      this.mirroringShapeCharacters.setValue(8913, 8912);
      this.mirroringShapeCharacters.setValue(8918, 8919);
      this.mirroringShapeCharacters.setValue(8919, 8918);
      this.mirroringShapeCharacters.setValue(8920, 8921);
      this.mirroringShapeCharacters.setValue(8921, 8920);
      this.mirroringShapeCharacters.setValue(8922, 8923);
      this.mirroringShapeCharacters.setValue(8923, 8922);
      this.mirroringShapeCharacters.setValue(8924, 8925);
      this.mirroringShapeCharacters.setValue(8925, 8924);
      this.mirroringShapeCharacters.setValue(8926, 8927);
      this.mirroringShapeCharacters.setValue(8927, 8926);
      this.mirroringShapeCharacters.setValue(8928, 8929);
      this.mirroringShapeCharacters.setValue(8929, 8928);
      this.mirroringShapeCharacters.setValue(8930, 8931);
      this.mirroringShapeCharacters.setValue(8931, 8930);
      this.mirroringShapeCharacters.setValue(8932, 8933);
      this.mirroringShapeCharacters.setValue(8933, 8932);
      this.mirroringShapeCharacters.setValue(8934, 8935);
      this.mirroringShapeCharacters.setValue(8935, 8934);
      this.mirroringShapeCharacters.setValue(8936, 8937);
      this.mirroringShapeCharacters.setValue(8937, 8936);
      this.mirroringShapeCharacters.setValue(8938, 8939);
      this.mirroringShapeCharacters.setValue(8939, 8938);
      this.mirroringShapeCharacters.setValue(8940, 8941);
      this.mirroringShapeCharacters.setValue(8941, 8940);
      this.mirroringShapeCharacters.setValue(8944, 8945);
      this.mirroringShapeCharacters.setValue(8945, 8944);
      this.mirroringShapeCharacters.setValue(8946, 8954);
      this.mirroringShapeCharacters.setValue(8947, 8955);
      this.mirroringShapeCharacters.setValue(8948, 8956);
      this.mirroringShapeCharacters.setValue(8950, 8957);
      this.mirroringShapeCharacters.setValue(8951, 8958);
      this.mirroringShapeCharacters.setValue(8954, 8946);
      this.mirroringShapeCharacters.setValue(8955, 8947);
      this.mirroringShapeCharacters.setValue(8956, 8948);
      this.mirroringShapeCharacters.setValue(8957, 8950);
      this.mirroringShapeCharacters.setValue(8958, 8951);
      this.mirroringShapeCharacters.setValue(8968, 8969);
      this.mirroringShapeCharacters.setValue(8969, 8968);
      this.mirroringShapeCharacters.setValue(8970, 8971);
      this.mirroringShapeCharacters.setValue(8971, 8970);
      this.mirroringShapeCharacters.setValue(9001, 9002);
      this.mirroringShapeCharacters.setValue(9002, 9001);
      this.mirroringShapeCharacters.setValue(10088, 10089);
      this.mirroringShapeCharacters.setValue(10089, 10088);
      this.mirroringShapeCharacters.setValue(10090, 10091);
      this.mirroringShapeCharacters.setValue(10091, 10090);
      this.mirroringShapeCharacters.setValue(10092, 10093);
      this.mirroringShapeCharacters.setValue(10093, 10092);
      this.mirroringShapeCharacters.setValue(10094, 10095);
      this.mirroringShapeCharacters.setValue(10095, 10094);
      this.mirroringShapeCharacters.setValue(10096, 10097);
      this.mirroringShapeCharacters.setValue(10097, 10096);
      this.mirroringShapeCharacters.setValue(10098, 10099);
      this.mirroringShapeCharacters.setValue(10099, 10098);
      this.mirroringShapeCharacters.setValue(10100, 10101);
      this.mirroringShapeCharacters.setValue(10101, 10100);
      this.mirroringShapeCharacters.setValue(10197, 10198);
      this.mirroringShapeCharacters.setValue(10198, 10197);
      this.mirroringShapeCharacters.setValue(10205, 10206);
      this.mirroringShapeCharacters.setValue(10206, 10205);
      this.mirroringShapeCharacters.setValue(10210, 10211);
      this.mirroringShapeCharacters.setValue(10211, 10210);
      this.mirroringShapeCharacters.setValue(10212, 10213);
      this.mirroringShapeCharacters.setValue(10213, 10212);
      this.mirroringShapeCharacters.setValue(10214, 10215);
      this.mirroringShapeCharacters.setValue(10215, 10214);
      this.mirroringShapeCharacters.setValue(10216, 10217);
      this.mirroringShapeCharacters.setValue(10217, 10216);
      this.mirroringShapeCharacters.setValue(10218, 10219);
      this.mirroringShapeCharacters.setValue(10219, 10218);
      this.mirroringShapeCharacters.setValue(10627, 10628);
      this.mirroringShapeCharacters.setValue(10628, 10627);
      this.mirroringShapeCharacters.setValue(10629, 10630);
      this.mirroringShapeCharacters.setValue(10630, 10629);
      this.mirroringShapeCharacters.setValue(10631, 10632);
      this.mirroringShapeCharacters.setValue(10632, 10631);
      this.mirroringShapeCharacters.setValue(10633, 10634);
      this.mirroringShapeCharacters.setValue(10634, 10633);
      this.mirroringShapeCharacters.setValue(10635, 10636);
      this.mirroringShapeCharacters.setValue(10636, 10635);
      this.mirroringShapeCharacters.setValue(10637, 10640);
      this.mirroringShapeCharacters.setValue(10638, 10639);
      this.mirroringShapeCharacters.setValue(10639, 10638);
      this.mirroringShapeCharacters.setValue(10640, 10637);
      this.mirroringShapeCharacters.setValue(10641, 10642);
      this.mirroringShapeCharacters.setValue(10642, 10641);
      this.mirroringShapeCharacters.setValue(10643, 10644);
      this.mirroringShapeCharacters.setValue(10644, 10643);
      this.mirroringShapeCharacters.setValue(10645, 10646);
      this.mirroringShapeCharacters.setValue(10646, 10645);
      this.mirroringShapeCharacters.setValue(10647, 10648);
      this.mirroringShapeCharacters.setValue(10648, 10647);
      this.mirroringShapeCharacters.setValue(10680, 8856);
      this.mirroringShapeCharacters.setValue(10688, 10689);
      this.mirroringShapeCharacters.setValue(10689, 10688);
      this.mirroringShapeCharacters.setValue(10692, 10693);
      this.mirroringShapeCharacters.setValue(10693, 10692);
      this.mirroringShapeCharacters.setValue(10703, 10704);
      this.mirroringShapeCharacters.setValue(10704, 10703);
      this.mirroringShapeCharacters.setValue(10705, 10706);
      this.mirroringShapeCharacters.setValue(10706, 10705);
      this.mirroringShapeCharacters.setValue(10708, 10709);
      this.mirroringShapeCharacters.setValue(10709, 10708);
      this.mirroringShapeCharacters.setValue(10712, 10713);
      this.mirroringShapeCharacters.setValue(10713, 10712);
      this.mirroringShapeCharacters.setValue(10714, 10715);
      this.mirroringShapeCharacters.setValue(10715, 10714);
      this.mirroringShapeCharacters.setValue(10741, 8725);
      this.mirroringShapeCharacters.setValue(10744, 10745);
      this.mirroringShapeCharacters.setValue(10745, 10744);
      this.mirroringShapeCharacters.setValue(10748, 10749);
      this.mirroringShapeCharacters.setValue(10749, 10748);
      this.mirroringShapeCharacters.setValue(10795, 10796);
      this.mirroringShapeCharacters.setValue(10796, 10795);
      this.mirroringShapeCharacters.setValue(10797, 10796);
      this.mirroringShapeCharacters.setValue(10798, 10797);
      this.mirroringShapeCharacters.setValue(10804, 10805);
      this.mirroringShapeCharacters.setValue(10805, 10804);
      this.mirroringShapeCharacters.setValue(10812, 10813);
      this.mirroringShapeCharacters.setValue(10813, 10812);
      this.mirroringShapeCharacters.setValue(10852, 10853);
      this.mirroringShapeCharacters.setValue(10853, 10852);
      this.mirroringShapeCharacters.setValue(10873, 10874);
      this.mirroringShapeCharacters.setValue(10874, 10873);
      this.mirroringShapeCharacters.setValue(10877, 10878);
      this.mirroringShapeCharacters.setValue(10878, 10877);
      this.mirroringShapeCharacters.setValue(10879, 10880);
      this.mirroringShapeCharacters.setValue(10880, 10879);
      this.mirroringShapeCharacters.setValue(10881, 10882);
      this.mirroringShapeCharacters.setValue(10882, 10881);
      this.mirroringShapeCharacters.setValue(10883, 10884);
      this.mirroringShapeCharacters.setValue(10884, 10883);
      this.mirroringShapeCharacters.setValue(10891, 10892);
      this.mirroringShapeCharacters.setValue(10892, 10891);
      this.mirroringShapeCharacters.setValue(10897, 10898);
      this.mirroringShapeCharacters.setValue(10898, 10897);
      this.mirroringShapeCharacters.setValue(10899, 10900);
      this.mirroringShapeCharacters.setValue(10900, 10899);
      this.mirroringShapeCharacters.setValue(10901, 10902);
      this.mirroringShapeCharacters.setValue(10902, 10901);
      this.mirroringShapeCharacters.setValue(10903, 10904);
      this.mirroringShapeCharacters.setValue(10904, 10903);
      this.mirroringShapeCharacters.setValue(10905, 10906);
      this.mirroringShapeCharacters.setValue(10906, 10905);
      this.mirroringShapeCharacters.setValue(10907, 10908);
      this.mirroringShapeCharacters.setValue(10908, 10907);
      this.mirroringShapeCharacters.setValue(10913, 10914);
      this.mirroringShapeCharacters.setValue(10914, 10913);
      this.mirroringShapeCharacters.setValue(10918, 10919);
      this.mirroringShapeCharacters.setValue(10919, 10918);
      this.mirroringShapeCharacters.setValue(10920, 10921);
      this.mirroringShapeCharacters.setValue(10921, 10920);
      this.mirroringShapeCharacters.setValue(10922, 10923);
      this.mirroringShapeCharacters.setValue(10923, 10922);
      this.mirroringShapeCharacters.setValue(10924, 10925);
      this.mirroringShapeCharacters.setValue(10925, 10924);
      this.mirroringShapeCharacters.setValue(10927, 10928);
      this.mirroringShapeCharacters.setValue(10928, 10927);
      this.mirroringShapeCharacters.setValue(10931, 10932);
      this.mirroringShapeCharacters.setValue(10932, 10931);
      this.mirroringShapeCharacters.setValue(10939, 10940);
      this.mirroringShapeCharacters.setValue(10940, 10939);
      this.mirroringShapeCharacters.setValue(10941, 10942);
      this.mirroringShapeCharacters.setValue(10942, 10941);
      this.mirroringShapeCharacters.setValue(10943, 10944);
      this.mirroringShapeCharacters.setValue(10944, 10943);
      this.mirroringShapeCharacters.setValue(10945, 10946);
      this.mirroringShapeCharacters.setValue(10946, 10945);
      this.mirroringShapeCharacters.setValue(10947, 10948);
      this.mirroringShapeCharacters.setValue(10948, 10947);
      this.mirroringShapeCharacters.setValue(10949, 10950);
      this.mirroringShapeCharacters.setValue(10950, 10949);
      this.mirroringShapeCharacters.setValue(10957, 10958);
      this.mirroringShapeCharacters.setValue(10958, 10957);
      this.mirroringShapeCharacters.setValue(10959, 10960);
      this.mirroringShapeCharacters.setValue(10960, 10959);
      this.mirroringShapeCharacters.setValue(10961, 10962);
      this.mirroringShapeCharacters.setValue(10962, 10961);
      this.mirroringShapeCharacters.setValue(10963, 10964);
      this.mirroringShapeCharacters.setValue(10964, 10963);
      this.mirroringShapeCharacters.setValue(10965, 10966);
      this.mirroringShapeCharacters.setValue(10966, 10965);
      this.mirroringShapeCharacters.setValue(10974, 8870);
      this.mirroringShapeCharacters.setValue(10979, 8873);
      this.mirroringShapeCharacters.setValue(10980, 8872);
      this.mirroringShapeCharacters.setValue(10981, 8875);
      this.mirroringShapeCharacters.setValue(10988, 10989);
      this.mirroringShapeCharacters.setValue(10989, 10988);
      this.mirroringShapeCharacters.setValue(10999, 11e3);
      this.mirroringShapeCharacters.setValue(11e3, 10999);
      this.mirroringShapeCharacters.setValue(11001, 11002);
      this.mirroringShapeCharacters.setValue(11002, 11001);
      this.mirroringShapeCharacters.setValue(12296, 12297);
      this.mirroringShapeCharacters.setValue(12297, 12296);
      this.mirroringShapeCharacters.setValue(12298, 12299);
      this.mirroringShapeCharacters.setValue(12299, 12298);
      this.mirroringShapeCharacters.setValue(12300, 12301);
      this.mirroringShapeCharacters.setValue(12301, 12300);
      this.mirroringShapeCharacters.setValue(12302, 12303);
      this.mirroringShapeCharacters.setValue(12303, 12302);
      this.mirroringShapeCharacters.setValue(12304, 12305);
      this.mirroringShapeCharacters.setValue(12305, 12304);
      this.mirroringShapeCharacters.setValue(12308, 12309);
      this.mirroringShapeCharacters.setValue(12309, 12308);
      this.mirroringShapeCharacters.setValue(12310, 12311);
      this.mirroringShapeCharacters.setValue(12311, 12310);
      this.mirroringShapeCharacters.setValue(12312, 12313);
      this.mirroringShapeCharacters.setValue(12313, 12312);
      this.mirroringShapeCharacters.setValue(12314, 12315);
      this.mirroringShapeCharacters.setValue(12315, 12314);
      this.mirroringShapeCharacters.setValue(65288, 65289);
      this.mirroringShapeCharacters.setValue(65289, 65288);
      this.mirroringShapeCharacters.setValue(65308, 65310);
      this.mirroringShapeCharacters.setValue(65310, 65308);
      this.mirroringShapeCharacters.setValue(65339, 65341);
      this.mirroringShapeCharacters.setValue(65341, 65339);
      this.mirroringShapeCharacters.setValue(65371, 65373);
      this.mirroringShapeCharacters.setValue(65373, 65371);
      this.mirroringShapeCharacters.setValue(65375, 65376);
      this.mirroringShapeCharacters.setValue(65376, 65375);
      this.mirroringShapeCharacters.setValue(65378, 65379);
      this.mirroringShapeCharacters.setValue(65379, 65378);
    };
    return Bidi2;
  }()
);
var RtlCharacters = (
  /** @class */
  function() {
    function RtlCharacters2() {
      this.types = [];
      this.textOrder = -1;
      this.rtlCharacterTypes = new Array(65536);
      this.L = 0;
      this.LRE = 1;
      this.LRO = 2;
      this.R = 3;
      this.AL = 4;
      this.RLE = 5;
      this.RLO = 6;
      this.PDF = 7;
      this.EN = 8;
      this.ES = 9;
      this.ET = 10;
      this.AN = 11;
      this.CS = 12;
      this.NSM = 13;
      this.BN = 14;
      this.B = 15;
      this.S = 16;
      this.WS = 17;
      this.ON = 18;
      this.charTypes = [this.L, this.EN, this.BN, this.ES, this.ES, this.S, this.ET, this.ET, this.B, this.AN, this.AN, this.S, this.CS, this.CS, this.WS, this.NSM, this.NSM, this.B, this.BN, 27, this.BN, 28, 30, this.B, 31, 31, this.S, 32, 32, this.WS, 33, 34, this.ON, 35, 37, this.ET, 38, 42, this.ON, 43, 43, this.ET, 44, 44, this.CS, 45, 45, this.ET, 46, 46, this.CS, 47, 47, this.CS, 48, 57, this.EN, 58, 58, this.CS, 59, 64, this.ON, 65, 90, this.L, 91, 96, this.ON, 97, 122, this.L, 123, 126, this.ON, 127, 132, this.BN, 133, 133, this.B, 134, 159, this.BN, 160, 160, this.CS, 161, 161, this.ON, 162, 165, this.ET, 166, 169, this.ON, 170, 170, this.L, 171, 175, this.ON, 176, 177, this.ET, 178, 179, this.EN, 180, 180, this.ON, 181, 181, this.L, 182, 184, this.ON, 185, 185, this.EN, 186, 186, this.L, 187, 191, this.ON, 192, 214, this.L, 215, 215, this.ON, 216, 246, this.L, 247, 247, this.ON, 248, 696, this.L, 697, 698, this.ON, 699, 705, this.L, 706, 719, this.ON, 720, 721, this.L, 722, 735, this.ON, 736, 740, this.L, 741, 749, this.ON, 750, 750, this.L, 751, 767, this.ON, 768, 855, this.NSM, 856, 860, this.L, 861, 879, this.NSM, 880, 883, this.L, 884, 885, this.ON, 886, 893, this.L, 894, 894, this.ON, 895, 899, this.L, 900, 901, this.ON, 902, 902, this.L, 903, 903, this.ON, 904, 1013, this.L, 1014, 1014, this.ON, 1015, 1154, this.L, 1155, 1158, this.NSM, 1159, 1159, this.L, 1160, 1161, this.NSM, 1162, 1417, this.L, 1418, 1418, this.ON, 1419, 1424, this.L, 1425, 1441, this.NSM, 1442, 1442, this.L, 1443, 1465, this.NSM, 1466, 1466, this.L, 1467, 1469, this.NSM, 1470, 1470, this.R, 1471, 1471, this.NSM, 1472, 1472, this.R, 1473, 1474, this.NSM, 1475, 1475, this.R, 1476, 1476, this.NSM, 1477, 1487, this.L, 1488, 1514, this.R, 1515, 1519, this.L, 1520, 1524, this.R, 1525, 1535, this.L, 1536, 1539, this.AL, 1540, 1547, this.L, 1548, 1548, this.CS, 1549, 1549, this.AL, 1550, 1551, this.ON, 1552, 1557, this.NSM, 1558, 1562, this.L, 1563, 1563, this.AL, 1564, 1566, this.L, 1567, 1567, this.AL, 1568, 1568, this.L, 1569, 1594, this.AL, 1595, 1599, this.L, 1600, 1610, this.AL, 1611, 1624, this.NSM, 1625, 1631, this.L, 1632, 1641, this.AN, 1642, 1642, this.ET, 1643, 1644, this.AN, 1645, 1647, this.AL, 1648, 1648, this.NSM, 1649, 1749, this.AL, 1750, 1756, this.NSM, 1757, 1757, this.AL, 1758, 1764, this.NSM, 1765, 1766, this.AL, 1767, 1768, this.NSM, 1769, 1769, this.ON, 1770, 1773, this.NSM, 1774, 1775, this.AL, 1776, 1785, this.EN, 1786, 1805, this.AL, 1806, 1806, this.L, 1807, 1807, this.BN, 1808, 1808, this.AL, 1809, 1809, this.NSM, 1810, 1839, this.AL, 1840, 1866, this.NSM, 1867, 1868, this.L, 1869, 1871, this.AL, 1872, 1919, this.L, 1920, 1957, this.AL, 1958, 1968, this.NSM, 1969, 1969, this.AL, 1970, 2304, this.L, 2305, 2306, this.NSM, 2307, 2363, this.L, 2364, 2364, this.NSM, 2365, 2368, this.L, 2369, 2376, this.NSM, 2377, 2380, this.L, 2381, 2381, this.NSM, 2382, 2384, this.L, 2385, 2388, this.NSM, 2389, 2401, this.L, 2402, 2403, this.NSM, 2404, 2432, this.L, 2433, 2433, this.NSM, 2434, 2491, this.L, 2492, 2492, this.NSM, 2493, 2496, this.L, 2497, 2500, this.NSM, 2501, 2508, this.L, 2509, 2509, this.NSM, 2510, 2529, this.L, 2530, 2531, this.NSM, 2532, 2545, this.L, 2546, 2547, this.ET, 2548, 2560, this.L, 2561, 2562, this.NSM, 2563, 2619, this.L, 2620, 2620, this.NSM, 2621, 2624, this.L, 2625, 2626, this.NSM, 2627, 2630, this.L, 2631, 2632, this.NSM, 2633, 2634, this.L, 2635, 2637, this.NSM, 2638, 2671, this.L, 2672, 2673, this.NSM, 2674, 2688, this.L, 2689, 2690, this.NSM, 2691, 2747, this.L, 2748, 2748, this.NSM, 2749, 2752, this.L, 2753, 2757, this.NSM, 2758, 2758, this.L, 2759, 2760, this.NSM, 2761, 2764, this.L, 2765, 2765, this.NSM, 2766, 2785, this.L, 2786, 2787, this.NSM, 2788, 2800, this.L, 2801, 2801, this.ET, 2802, 2816, this.L, 2817, 2817, this.NSM, 2818, 2875, this.L, 2876, 2876, this.NSM, 2877, 2878, this.L, 2879, 2879, this.NSM, 2880, 2880, this.L, 2881, 2883, this.NSM, 2884, 2892, this.L, 2893, 2893, this.NSM, 2894, 2901, this.L, 2902, 2902, this.NSM, 2903, 2945, this.L, 2946, 2946, this.NSM, 2947, 3007, this.L, 3008, 3008, this.NSM, 3009, 3020, this.L, 3021, 3021, this.NSM, 3022, 3058, this.L, 3059, 3064, this.ON, 3065, 3065, this.ET, 3066, 3066, this.ON, 3067, 3133, this.L, 3134, 3136, this.NSM, 3137, 3141, this.L, 3142, 3144, this.NSM, 3145, 3145, this.L, 3146, 3149, this.NSM, 3150, 3156, this.L, 3157, 3158, this.NSM, 3159, 3259, this.L, 3260, 3260, this.NSM, 3261, 3275, this.L, 3276, 3277, this.NSM, 3278, 3392, this.L, 3393, 3395, this.NSM, 3396, 3404, this.L, 3405, 3405, this.NSM, 3406, 3529, this.L, 3530, 3530, this.NSM, 3531, 3537, this.L, 3538, 3540, this.NSM, 3541, 3541, this.L, 3542, 3542, this.NSM, 3543, 3632, this.L, 3633, 3633, this.NSM, 3634, 3635, this.L, 3636, 3642, this.NSM, 3643, 3646, this.L, 3647, 3647, this.ET, 3648, 3654, this.L, 3655, 3662, this.NSM, 3663, 3760, this.L, 3761, 3761, this.NSM, 3762, 3763, this.L, 3764, 3769, this.NSM, 3770, 3770, this.L, 3771, 3772, this.NSM, 3773, 3783, this.L, 3784, 3789, this.NSM, 3790, 3863, this.L, 3864, 3865, this.NSM, 3866, 3892, this.L, 3893, 3893, this.NSM, 3894, 3894, this.L, 3895, 3895, this.NSM, 3896, 3896, this.L, 3897, 3897, this.NSM, 3898, 3901, this.ON, 3902, 3952, this.L, 3953, 3966, this.NSM, 3967, 3967, this.L, 3968, 3972, this.NSM, 3973, 3973, this.L, 3974, 3975, this.NSM, 3976, 3983, this.L, 3984, 3991, this.NSM, 3992, 3992, this.L, 3993, 4028, this.NSM, 4029, 4037, this.L, 4038, 4038, this.NSM, 4039, 4140, this.L, 4141, 4144, this.NSM, 4145, 4145, this.L, 4146, 4146, this.NSM, 4147, 4149, this.L, 4150, 4151, this.NSM, 4152, 4152, this.L, 4153, 4153, this.NSM, 4154, 4183, this.L, 4184, 4185, this.NSM, 4186, 5759, this.L, 5760, 5760, this.WS, 5761, 5786, this.L, 5787, 5788, this.ON, 5789, 5905, this.L, 5906, 5908, this.NSM, 5909, 5937, this.L, 5938, 5940, this.NSM, 5941, 5969, this.L, 5970, 5971, this.NSM, 5972, 6001, this.L, 6002, 6003, this.NSM, 6004, 6070, this.L, 6071, 6077, this.NSM, 6078, 6085, this.L, 6086, 6086, this.NSM, 6087, 6088, this.L, 6089, 6099, this.NSM, 6100, 6106, this.L, 6107, 6107, this.ET, 6108, 6108, this.L, 6109, 6109, this.NSM, 6110, 6127, this.L, 6128, 6137, this.ON, 6138, 6143, this.L, 6144, 6154, this.ON, 6155, 6157, this.NSM, 6158, 6158, this.WS, 6159, 6312, this.L, 6313, 6313, this.NSM, 6314, 6431, this.L, 6432, 6434, this.NSM, 6435, 6438, this.L, 6439, 6443, this.NSM, 6444, 6449, this.L, 6450, 6450, this.NSM, 6451, 6456, this.L, 6457, 6459, this.NSM, 6460, 6463, this.L, 6464, 6464, this.ON, 6465, 6467, this.L, 6468, 6469, this.ON, 6470, 6623, this.L, 6624, 6655, this.ON, 6656, 8124, this.L, 8125, 8125, this.ON, 8126, 8126, this.L, 8127, 8129, this.ON, 8130, 8140, this.L, 8141, 8143, this.ON, 8144, 8156, this.L, 8157, 8159, this.ON, 8160, 8172, this.L, 8173, 8175, this.ON, 8176, 8188, this.L, 8189, 8190, this.ON, 8191, 8191, this.L, 8192, 8202, this.WS, 8203, 8205, this.BN, 8206, 8206, this.L, 8207, 8207, this.R, 8208, 8231, this.ON, 8232, 8232, this.WS, 8233, 8233, this.B, 8234, 8234, this.LRE, 8235, 8235, this.RLE, 8236, 8236, this.PDF, 8237, 8237, this.LRO, 8238, 8238, this.RLO, 8239, 8239, this.WS, 8240, 8244, this.ET, 8245, 8276, this.ON, 8277, 8278, this.L, 8279, 8279, this.ON, 8280, 8286, this.L, 8287, 8287, this.WS, 8288, 8291, this.BN, 8292, 8297, this.L, 8298, 8303, this.BN, 8304, 8304, this.EN, 8305, 8307, this.L, 8308, 8313, this.EN, 8314, 8315, this.ET, 8316, 8318, this.ON, 8319, 8319, this.L, 8320, 8329, this.EN, 8330, 8331, this.ET, 8332, 8334, this.ON, 8335, 8351, this.L, 8352, 8369, this.ET, 8370, 8399, this.L, 8400, 8426, this.NSM, 8427, 8447, this.L, 8448, 8449, this.ON, 8450, 8450, this.L, 8451, 8454, this.ON, 8455, 8455, this.L, 8456, 8457, this.ON, 8458, 8467, this.L, 8468, 8468, this.ON, 8469, 8469, this.L, 8470, 8472, this.ON, 8473, 8477, this.L, 8478, 8483, this.ON, 8484, 8484, this.L, 8485, 8485, this.ON, 8486, 8486, this.L, 8487, 8487, this.ON, 8488, 8488, this.L, 8489, 8489, this.ON, 8490, 8493, this.L, 8494, 8494, this.ET, 8495, 8497, this.L, 8498, 8498, this.ON, 8499, 8505, this.L, 8506, 8507, this.ON, 8508, 8511, this.L, 8512, 8516, this.ON, 8517, 8521, this.L, 8522, 8523, this.ON, 8524, 8530, this.L, 8531, 8543, this.ON, 8544, 8591, this.L, 8592, 8721, this.ON, 8722, 8723, this.ET, 8724, 9013, this.ON, 9014, 9082, this.L, 9083, 9108, this.ON, 9109, 9109, this.L, 9110, 9168, this.ON, 9169, 9215, this.L, 9216, 9254, this.ON, 9255, 9279, this.L, 9280, 9290, this.ON, 9291, 9311, this.L, 9312, 9371, this.EN, 9372, 9449, this.L, 9450, 9450, this.EN, 9451, 9751, this.ON, 9752, 9752, this.L, 9753, 9853, this.ON, 9854, 9855, this.L, 9856, 9873, this.ON, 9874, 9887, this.L, 9888, 9889, this.ON, 9890, 9984, this.L, 9985, 9988, this.ON, 9989, 9989, this.L, 9990, 9993, this.ON, 9994, 9995, this.L, 9996, 10023, this.ON, 10024, 10024, this.L, 10025, 10059, this.ON, 10060, 10060, this.L, 10061, 10061, this.ON, 10062, 10062, this.L, 10063, 10066, this.ON, 10067, 10069, this.L, 10070, 10070, this.ON, 10071, 10071, this.L, 10072, 10078, this.ON, 10079, 10080, this.L, 10081, 10132, this.ON, 10133, 10135, this.L, 10136, 10159, this.ON, 10160, 10160, this.L, 10161, 10174, this.ON, 10175, 10191, this.L, 10192, 10219, this.ON, 10220, 10223, this.L, 10224, 11021, this.ON, 11022, 11903, this.L, 11904, 11929, this.ON, 11930, 11930, this.L, 11931, 12019, this.ON, 12020, 12031, this.L, 12032, 12245, this.ON, 12246, 12271, this.L, 12272, 12283, this.ON, 12284, 12287, this.L, 12288, 12288, this.WS, 12289, 12292, this.ON, 12293, 12295, this.L, 12296, 12320, this.ON, 12321, 12329, this.L, 12330, 12335, this.NSM, 12336, 12336, this.ON, 12337, 12341, this.L, 12342, 12343, this.ON, 12344, 12348, this.L, 12349, 12351, this.ON, 12352, 12440, this.L, 12441, 12442, this.NSM, 12443, 12444, this.ON, 12445, 12447, this.L, 12448, 12448, this.ON, 12449, 12538, this.L, 12539, 12539, this.ON, 12540, 12828, this.L, 12829, 12830, this.ON, 12831, 12879, this.L, 12880, 12895, this.ON, 12896, 12923, this.L, 12924, 12925, this.ON, 12926, 12976, this.L, 12977, 12991, this.ON, 12992, 13003, this.L, 13004, 13007, this.ON, 13008, 13174, this.L, 13175, 13178, this.ON, 13179, 13277, this.L, 13278, 13279, this.ON, 13280, 13310, this.L, 13311, 13311, this.ON, 13312, 19903, this.L, 19904, 19967, this.ON, 19968, 42127, this.L, 42128, 42182, this.ON, 42183, 64284, this.L, 64285, 64285, this.R, 64286, 64286, this.NSM, 64287, 64296, this.R, 64297, 64297, this.ET, 64298, 64310, this.R, 64311, 64311, this.L, 64312, 64316, this.R, 64317, 64317, this.L, 64318, 64318, this.R, 64319, 64319, this.L, 64320, 64321, this.R, 64322, 64322, this.L, 64323, 64324, this.R, 64325, 64325, this.L, 64326, 64335, this.R, 64336, 64433, this.AL, 64434, 64466, this.L, 64467, 64829, this.AL, 64830, 64831, this.ON, 64832, 64847, this.L, 64848, 64911, this.AL, 64912, 64913, this.L, 64914, 64967, this.AL, 64968, 65007, this.L, 65008, 65020, this.AL, 65021, 65021, this.ON, 65022, 65023, this.L, 65024, 65039, this.NSM, 65040, 65055, this.L, 65056, 65059, this.NSM, 65060, 65071, this.L, 65072, 65103, this.ON, 65104, 65104, this.CS, 65105, 65105, this.ON, 65106, 65106, this.CS, 65107, 65107, this.L, 65108, 65108, this.ON, 65109, 65109, this.CS, 65110, 65118, this.ON, 65119, 65119, this.ET, 65120, 65121, this.ON, 65122, 65123, this.ET, 65124, 65126, this.ON, 65127, 65127, this.L, 65128, 65128, this.ON, 65129, 65130, this.ET, 65131, 65131, this.ON, 65132, 65135, this.L, 65136, 65140, this.AL, 65141, 65141, this.L, 65142, 65276, this.AL, 65277, 65278, this.L, 65279, 65279, this.BN, 65280, 65280, this.L, 65281, 65282, this.ON, 65283, 65285, this.ET, 65286, 65290, this.ON, 65291, 65291, this.ET, 65292, 65292, this.CS, 65293, 65293, this.ET, 65294, 65294, this.CS, 65295, 65295, this.ES, 65296, 65305, this.EN, 65306, 65306, this.CS, 65307, 65312, this.ON, 65313, 65338, this.L, 65339, 65344, this.ON, 65345, 65370, this.L, 65371, 65381, this.ON, 65382, 65503, this.L, 65504, 65505, this.ET, 65506, 65508, this.ON, 65509, 65510, this.ET, 65511, 65511, this.L, 65512, 65518, this.ON, 65519, 65528, this.L, 65529, 65531, this.BN, 65532, 65533, this.ON, 65534, 65535, this.L];
      for (var i = 0; i < this.charTypes.length; ++i) {
        var start = this.charTypes[i];
        var end = this.charTypes[++i];
        var b = this.charTypes[++i];
        while (start <= end) {
          this.rtlCharacterTypes[start++] = b;
        }
      }
    }
    RtlCharacters2.prototype.getVisualOrder = function(inputText, isRtl) {
      this.types = this.getCharacterCode(inputText);
      this.textOrder = isRtl ? this.LRE : this.L;
      this.doVisualOrder();
      var result = [];
      for (var i = 0; i < this.levels.length; i++) {
        result[i] = this.levels[i];
      }
      return result;
    };
    RtlCharacters2.prototype.getCharacterCode = function(text) {
      var characterCodes = [];
      for (var i = 0; i < text.length; i++) {
        characterCodes[i] = this.rtlCharacterTypes[text[i].charCodeAt(0)];
      }
      return characterCodes;
    };
    RtlCharacters2.prototype.setDefaultLevels = function() {
      for (var i = 0; i < this.length; i++) {
        this.levels[i] = this.textOrder;
      }
    };
    RtlCharacters2.prototype.setLevels = function() {
      this.setDefaultLevels();
      for (var n = 0; n < this.length; ++n) {
        var level = this.levels[n];
        if ((level & 128) !== 0) {
          level &= 127;
          this.result[n] = (level & 1) === 0 ? this.L : this.R;
        }
        this.levels[n] = level;
      }
    };
    RtlCharacters2.prototype.updateLevels = function(index, level, length) {
      if ((level & 1) === 0) {
        for (var i = index; i < length; ++i) {
          if (this.result[i] === this.R) {
            this.levels[i] += 1;
          } else if (this.result[i] !== this.L) {
            this.levels[i] += 2;
          }
        }
      } else {
        for (var i = index; i < length; ++i) {
          if (this.result[i] !== this.R) {
            this.levels[i] += 1;
          }
        }
      }
    };
    RtlCharacters2.prototype.doVisualOrder = function() {
      this.length = this.types.length;
      this.result = this.types;
      this.levels = [];
      this.setLevels();
      this.length = this.getEmbeddedCharactersLength();
      var preview = this.textOrder;
      var i = 0;
      while (i < this.length) {
        var level = this.levels[i];
        var preType = (Math.max(preview, level) & 1) === 0 ? this.L : this.R;
        var length_1 = i + 1;
        while (length_1 < this.length && this.levels[length_1] === level) {
          ++length_1;
        }
        var success = length_1 < this.length ? this.levels[length_1] : this.textOrder;
        var type = (Math.max(success, level) & 1) === 0 ? this.L : this.R;
        this.checkNSM(i, length_1, level, preType, type);
        this.updateLevels(i, level, length_1);
        preview = level;
        i = length_1;
      }
      this.checkEmbeddedCharacters(this.length);
    };
    RtlCharacters2.prototype.getEmbeddedCharactersLength = function() {
      var index = 0;
      for (var i = 0; i < this.length; ++i) {
        if (!(this.types[i] === this.LRE || this.types[i] === this.RLE || this.types[i] === this.LRO || this.types[i] === this.RLO || this.types[i] === this.PDF || this.types[i] === this.BN)) {
          this.result[index] = this.result[i];
          this.levels[index] = this.levels[i];
          index++;
        }
      }
      return index;
    };
    RtlCharacters2.prototype.checkEmbeddedCharacters = function(length) {
      for (var i = this.types.length - 1; i >= 0; --i) {
        if (this.types[i] === this.LRE || this.types[i] === this.RLE || this.types[i] === this.LRO || this.types[i] === this.RLO || this.types[i] === this.PDF || this.types[i] === this.BN) {
          this.result[i] = this.types[i];
          this.levels[i] = -1;
        } else {
          length -= 1;
          this.result[i] = this.result[length];
          this.levels[i] = this.levels[length];
        }
      }
      for (var i = 0; i < this.types.length; i++) {
        if (this.levels[i] === -1) {
          if (i === 0) {
            this.levels[i] = this.textOrder;
          } else {
            this.levels[i] = this.levels[i - 1];
          }
        }
      }
    };
    RtlCharacters2.prototype.checkNSM = function(index, length, level, startType, endType) {
      var charType = startType;
      for (var i = index; i < length; ++i) {
        if (this.result[i] === this.NSM) {
          this.result[i] = charType;
        } else {
          charType = this.result[i];
        }
      }
      this.checkEuropeanDigits(index, length, level, startType, endType);
    };
    RtlCharacters2.prototype.checkEuropeanDigits = function(index, length, level, startType, endType) {
      for (var i = index; i < length; ++i) {
        if (this.result[i] === this.EN) {
          for (var j = i - 1; j >= index; --j) {
            if (this.result[j] === this.L || this.result[j] === this.R || this.result[j] === this.AL) {
              if (this.result[j] === this.AL) {
                this.result[i] = this.AN;
              }
              break;
            }
          }
        }
      }
      this.checkArabicCharacters(index, length, level, startType, endType);
    };
    RtlCharacters2.prototype.checkArabicCharacters = function(index, length, level, startType, endType) {
      for (var i = index; i < length; ++i) {
        if (this.result[i] === this.AL) {
          this.result[i] = this.R;
        }
      }
      this.checkEuropeanNumberSeparator(index, length, level, startType, endType);
    };
    RtlCharacters2.prototype.checkEuropeanNumberSeparator = function(index, length, level, startType, endType) {
      for (var i = index + 1; i < length - 1; ++i) {
        if (this.result[i] === this.ES || this.result[i] === this.CS) {
          var preview = this.result[i - 1];
          var success = this.result[i + 1];
          if (preview === this.EN && success === this.EN) {
            this.result[i] = this.EN;
          } else if (this.result[i] === this.CS && preview === this.AN && success === this.AN) {
            this.result[i] = this.AN;
          }
        }
      }
      this.checkEuropeanNumberTerminator(index, length, level, startType, endType);
    };
    RtlCharacters2.prototype.checkEuropeanNumberTerminator = function(index, length, level, startType, endType) {
      for (var i = index; i < length; ++i) {
        if (this.result[i] === this.ET) {
          var s = i;
          var b = [];
          b.push(this.ET);
          var l = this.getLength(s, length, b);
          var data = s === index ? startType : this.result[s - 1];
          if (data !== this.EN) {
            data = l === length ? endType : this.result[l];
          }
          if (data === this.EN) {
            for (var j = s; j < l; ++j) {
              this.result[j] = this.EN;
            }
          }
          i = l;
        }
      }
      this.checkOtherNeutrals(index, length, level, startType, endType);
    };
    RtlCharacters2.prototype.checkOtherNeutrals = function(index, length, level, startType, endType) {
      for (var i = index; i < length; ++i) {
        if (this.result[i] === this.ES || this.result[i] === this.ET || this.result[i] === this.CS) {
          this.result[i] = this.ON;
        }
      }
      this.checkOtherCharacters(index, length, level, startType, endType);
    };
    RtlCharacters2.prototype.checkOtherCharacters = function(index, length, level, startType, endType) {
      for (var i = index; i < length; ++i) {
        if (this.result[i] === this.EN) {
          var pst = startType;
          for (var j = i - 1; j >= index; --j) {
            if (this.result[j] === this.L || this.result[j] === this.R) {
              pst = this.result[j];
              break;
            }
          }
          if (pst === this.L) {
            this.result[i] = this.L;
          }
        }
      }
      this.checkCommanCharacters(index, length, level, startType, endType);
    };
    RtlCharacters2.prototype.getLength = function(index, length, validSet) {
      --index;
      while (++index < length) {
        var t = this.result[index];
        for (var i = 0; i < validSet.length; ++i) {
          if (t === validSet[i]) {
            index = this.getLength(++index, length, validSet);
          }
        }
        return index;
      }
      return length;
    };
    RtlCharacters2.prototype.checkCommanCharacters = function(index, length, level, startType, endType) {
      for (var i = index; i < length; ++i) {
        if (this.result[i] === this.WS || this.result[i] === this.ON || this.result[i] === this.B || this.result[i] === this.S) {
          var s = i;
          var byte = [this.B, this.S, this.WS, this.ON];
          var l = this.getLength(s, length, byte);
          var lt = 0;
          var tt = 0;
          var rt = 0;
          if (s === index) {
            lt = startType;
          } else {
            lt = this.result[s - 1];
            if (lt === this.AN) {
              lt = this.R;
            } else if (lt === this.EN) {
              lt = this.R;
            }
          }
          if (l === length) {
            tt = endType;
          } else {
            tt = this.result[l];
            if (tt === this.AN) {
              tt = this.R;
            } else if (tt === this.EN) {
              tt = this.R;
            }
          }
          if (lt === tt) {
            rt = lt;
          } else {
            rt = (level & 1) === 0 ? this.L : this.R;
          }
          for (var j = s; j < l; ++j) {
            this.result[j] = rt;
          }
          i = l;
        }
      }
    };
    return RtlCharacters2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/rtl-renderer.js
var RtlRenderer = (
  /** @class */
  function() {
    function RtlRenderer2() {
      this.openBracket = "(";
      this.closeBracket = ")";
    }
    RtlRenderer2.prototype.layout = function(line, font, rtl, wordSpace, format) {
      if (line == null) {
        throw new Error("ArgumentNullException : line");
      }
      if (font == null) {
        throw new Error("ArgumentNullException : font");
      }
      var result = [];
      if (font.Unicode) {
        result = this.customLayout(line, rtl, format, font, wordSpace);
      } else {
        result = [];
        result[0] = line;
      }
      return result;
    };
    RtlRenderer2.prototype.splitLayout = function(line, font, rtl, wordSpace, format) {
      if (line == null) {
        throw new Error("ArgumentNullException : line");
      }
      if (font == null) {
        throw new Error("ArgumentNullException : font");
      }
      var words = [];
      var system = false;
      if (!system || words == null) {
        words = this.customSplitLayout(line, font, rtl, wordSpace, format);
      }
      return words;
    };
    RtlRenderer2.prototype.getGlyphIndex = function(line, font, rtl, glyphs, custom) {
      var success = true;
      var fail = false;
      if (line == null) {
        throw new Error("ArgumentNullException : line");
      }
      if (font == null) {
        throw new Error("ArgumentNullException : font");
      }
      glyphs = null;
      if (line.length === 0) {
        return {
          success: fail,
          glyphs
        };
      }
      var renderer = new ArabicShapeRenderer();
      var text = renderer.shape(line, 0);
      var internalFont = font.fontInternal;
      var ttfReader = internalFont.ttfReader;
      glyphs = new Uint16Array(text.length);
      var i = 0;
      for (var k = 0, len = text.length; k < len; k++) {
        var ch = text[k];
        var glyphInfo = ttfReader.getGlyph(ch);
        if (glyphInfo !== null && typeof glyphInfo !== "undefined") {
          glyphs[i++] = glyphInfo.index;
        }
      }
      return {
        success,
        glyphs
      };
    };
    RtlRenderer2.prototype.customLayout = function(line, rtl, format, font, wordSpace) {
      if (wordSpace === null || typeof wordSpace === "undefined") {
        if (line == null) {
          throw new Error("ArgumentNullException : line");
        }
        var result = null;
        if (format !== null && typeof format !== "undefined" && format.textDirection !== PdfTextDirection.None) {
          var bidi = new Bidi();
          result = bidi.getLogicalToVisualString(line, rtl);
        }
        return result;
      } else {
        if (line == null) {
          throw new Error("ArgumentNullException : line");
        }
        if (font == null) {
          throw new Error("ArgumentNullException : font");
        }
        var layouted = null;
        if (format !== null && typeof format !== "undefined" && format.textDirection !== PdfTextDirection.None) {
          var renderer = new ArabicShapeRenderer();
          var txt = renderer.shape(line, 0);
          layouted = this.customLayout(txt, rtl, format);
        }
        var result = [];
        if (wordSpace) {
          var words = layouted.split("");
          var count = words.length;
          for (var i = 0; i < count; i++) {
            words[i] = this.addChars(font, words[i]);
          }
          result = words;
        } else {
          result = [];
          result[0] = this.addChars(font, layouted);
        }
        return result;
      }
    };
    RtlRenderer2.prototype.addChars = function(font, glyphs) {
      var line = glyphs;
      if (font == null) {
        throw new Error("ArgumentNullException : font");
      }
      if (line == null) {
        throw new Error("ArgumentNullException : line");
      }
      var text = line;
      var internalFont = font.fontInternal;
      var ttfReader = internalFont.ttfReader;
      font.setSymbols(text);
      text = ttfReader.convertString(text);
      var bytes = PdfString.toUnicodeArray(text, false);
      text = PdfString.byteToString(bytes);
      return text;
    };
    RtlRenderer2.prototype.customSplitLayout = function(line, font, rtl, wordSpace, format) {
      if (line == null) {
        throw new Error("ArgumentNullException : line");
      }
      if (font == null) {
        throw new Error("ArgumentNullException : font");
      }
      var reversedLine = this.customLayout(line, rtl, format);
      var words = reversedLine.split("");
      return words;
    };
    return RtlRenderer2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/brushes/pdf-gradient-brush.js
var __extends63 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfGradientBrush = (
  /** @class */
  function(_super) {
    __extends63(PdfGradientBrush2, _super);
    function PdfGradientBrush2(shading) {
      var _this = _super.call(this) || this;
      _this.mbackground = new PdfColor(255, 255, 255);
      _this.mbStroking = false;
      _this.mfunction = null;
      _this.dictionaryProperties = new DictionaryProperties();
      _this.mpatternDictionary = new PdfDictionary();
      _this.mpatternDictionary.items.setValue(_this.dictionaryProperties.type, new PdfName(_this.dictionaryProperties.pattern));
      _this.mpatternDictionary.items.setValue(_this.dictionaryProperties.patternType, new PdfNumber(2));
      _this.shading = shading;
      _this.colorSpace = PdfColorSpace.Rgb;
      return _this;
    }
    Object.defineProperty(PdfGradientBrush2.prototype, "background", {
      //Properties
      /**
       * Gets or sets the background color of the brush.
       * @public
       */
      get: function() {
        return this.mbackground;
      },
      set: function(value) {
        this.mbackground = value;
        var sh = this.shading;
        if (value.isEmpty) {
          sh.remove(this.dictionaryProperties.background);
        } else {
          sh.items.setValue(this.dictionaryProperties.background, value.toArray(this.colorSpace));
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGradientBrush2.prototype, "antiAlias", {
      /**
       * Gets or sets a value indicating whether use anti aliasing algorithm.
       * @public
       */
      get: function() {
        var sh = this.shading;
        var aa = sh.items.getValue(this.dictionaryProperties.antiAlias);
        return aa.value;
      },
      set: function(value) {
        var sh = this.shading;
        var aa = sh.items.getValue(this.dictionaryProperties.antiAlias);
        if (aa == null && typeof aa === "undefined") {
          aa = new PdfBoolean(value);
          sh.items.setValue(this.dictionaryProperties.antiAlias, aa);
        } else {
          aa.value = value;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGradientBrush2.prototype, "function", {
      /**
       * Gets or sets the function of the brush.
       * @protected
       */
      get: function() {
        return this.mfunction;
      },
      set: function(value) {
        this.mfunction = value;
        if (value != null && typeof value !== "undefined") {
          this.shading.items.setValue(this.dictionaryProperties.function, new PdfReferenceHolder(this.mfunction));
        } else {
          this.shading.remove(this.dictionaryProperties.function);
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGradientBrush2.prototype, "bBox", {
      /**
       * Gets or sets the boundary box of the brush.
       * @protected
       */
      get: function() {
        var sh = this.shading;
        var box = sh.items.getValue(this.dictionaryProperties.bBox);
        return box;
      },
      set: function(value) {
        var sh = this.shading;
        if (value == null && typeof value === "undefined") {
          sh.remove(this.dictionaryProperties.bBox);
        } else {
          sh.items.setValue(this.dictionaryProperties.bBox, value);
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGradientBrush2.prototype, "colorSpace", {
      /**
       * Gets or sets the color space of the brush.
       * @public
       */
      get: function() {
        return this.mcolorSpace;
      },
      set: function(value) {
        var colorSpace = this.shading.items.getValue(this.dictionaryProperties.colorSpace);
        if (value !== this.mcolorSpace || colorSpace == null) {
          this.mcolorSpace = value;
          var csValue = this.colorSpaceToDeviceName(value);
          this.shading.items.setValue(this.dictionaryProperties.colorSpace, new PdfName(csValue));
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGradientBrush2.prototype, "stroking", {
      /**
       * Gets or sets a value indicating whether this PdfGradientBrush is stroking.
       * @public
       */
      get: function() {
        return this.mbStroking;
      },
      set: function(value) {
        this.mbStroking = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGradientBrush2.prototype, "patternDictionary", {
      /**
       * Gets the pattern dictionary.
       * @protected
       */
      get: function() {
        if (this.mpatternDictionary == null) {
          this.mpatternDictionary = new PdfDictionary();
        }
        return this.mpatternDictionary;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGradientBrush2.prototype, "shading", {
      /**
       * Gets or sets the shading dictionary.
       * @protected
       */
      get: function() {
        return this.mshading;
      },
      set: function(value) {
        if (value == null) {
          throw new Error("ArgumentNullException : Shading");
        }
        if (value !== this.mshading) {
          this.mshading = value;
          this.patternDictionary.items.setValue(this.dictionaryProperties.shading, new PdfReferenceHolder(this.mshading));
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGradientBrush2.prototype, "matrix", {
      /**
       * Gets or sets the transformation matrix.
       * @public
       */
      get: function() {
        return this.mmatrix;
      },
      set: function(value) {
        if (value == null) {
          throw new Error("ArgumentNullException : Matrix");
        }
        if (value !== this.mmatrix) {
          this.mmatrix = value.clone();
          var m = new PdfArray(this.mmatrix.matrix.elements);
          this.mpatternDictionary.items.setValue(this.dictionaryProperties.matrix, m);
        }
      },
      enumerable: true,
      configurable: true
    });
    PdfGradientBrush2.prototype.monitorChanges = function(brush, streamWriter, getResources, saveChanges, currentColorSpace) {
      var diff = false;
      if (brush instanceof PdfGradientBrush2) {
        if (this.colorSpace !== currentColorSpace) {
          this.colorSpace = currentColorSpace;
          this.resetFunction();
        }
        streamWriter.setColorSpace("Pattern", this.mbStroking);
        var resources = getResources.getResources();
        var name_1 = resources.getName(this);
        streamWriter.setColourWithPattern(null, name_1, this.mbStroking);
        diff = true;
      }
      return diff;
    };
    PdfGradientBrush2.prototype.resetChanges = function(streamWriter) {
    };
    PdfGradientBrush2.prototype.colorSpaceToDeviceName = function(colorSpace) {
      var result;
      switch (colorSpace) {
        case PdfColorSpace.Rgb:
          result = "DeviceRGB";
          break;
      }
      return result;
    };
    PdfGradientBrush2.prototype.resetPatternDictionary = function(dictionary) {
      this.mpatternDictionary = dictionary;
    };
    PdfGradientBrush2.prototype.cloneAntiAliasingValue = function(brush) {
      if (brush == null) {
        throw new Error("ArgumentNullException : brush");
      }
      var sh = this.shading;
      var aa = sh.items.getValue(this.dictionaryProperties.antiAlias);
      if (aa != null) {
        brush.shading.items.setValue(this.dictionaryProperties.antiAlias, new PdfBoolean(aa.value));
      }
    };
    PdfGradientBrush2.prototype.cloneBackgroundValue = function(brush) {
      var background = this.background;
      if (!background.isEmpty) {
        brush.background = background;
      }
    };
    Object.defineProperty(PdfGradientBrush2.prototype, "element", {
      /* tslint:enable */
      // IPdfWrapper Members
      /**
       * Gets the `element`.
       * @private
       */
      get: function() {
        return this.patternDictionary;
      },
      enumerable: true,
      configurable: true
    });
    return PdfGradientBrush2;
  }(PdfBrush)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/pdf-template.js
var PdfTemplate = (
  /** @class */
  function() {
    function PdfTemplate2(arg1, arg2) {
      this.dictionaryProperties = new DictionaryProperties();
      this.writeTransformation = true;
      if (typeof arg1 === "undefined") {
      } else if (arg1 instanceof SizeF && typeof arg2 === "undefined") {
        this.content = new PdfStream();
        var tempSize = new SizeF(arg1.width, arg1.height);
        this.setSize(tempSize);
        this.initialize();
      } else {
        this.content = new PdfStream();
        this.setSize(new SizeF(arg1, arg2));
        this.initialize();
      }
    }
    Object.defineProperty(PdfTemplate2.prototype, "size", {
      //Properties
      /**
       * Gets the size of the 'PdfTemplate'.
       */
      get: function() {
        return this.templateSize;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfTemplate2.prototype, "width", {
      /**
       * Gets the width of the 'PdfTemplate'.
       */
      get: function() {
        return this.size.width;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfTemplate2.prototype, "height", {
      /**
       * Gets the height of the 'PdfTemplate'.
       */
      get: function() {
        return this.size.height;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfTemplate2.prototype, "graphics", {
      /**
       * Gets the `graphics` of the 'PdfTemplate'.
       */
      get: function() {
        if (this.pdfGraphics == null || typeof this.pdfGraphics === "undefined") {
          var gr = new GetResourceEventHandler(this);
          var g = new PdfGraphics(this.size, gr, this.content);
          this.pdfGraphics = g;
          this.pdfGraphics.initializeCoordinates();
        }
        return this.pdfGraphics;
      },
      enumerable: true,
      configurable: true
    });
    PdfTemplate2.prototype.getResources = function() {
      if (this.resources == null) {
        this.resources = new PdfResources();
        this.content.items.setValue(this.dictionaryProperties.resources, this.resources);
      }
      return this.resources;
    };
    PdfTemplate2.prototype.initialize = function() {
      this.addType();
      this.addSubType();
    };
    PdfTemplate2.prototype.addType = function() {
      var value = new PdfName(this.dictionaryProperties.xObject);
      this.content.items.setValue(this.dictionaryProperties.type, value);
    };
    PdfTemplate2.prototype.addSubType = function() {
      var value = new PdfName(this.dictionaryProperties.form);
      this.content.items.setValue(this.dictionaryProperties.subtype, value);
    };
    PdfTemplate2.prototype.reset = function(size) {
      if (typeof size === "undefined") {
        if (this.resources != null) {
          this.resources = null;
          this.content.remove(this.dictionaryProperties.resources);
        }
        if (this.graphics != null) {
          this.graphics.reset(this.size);
        }
      } else {
        this.setSize(size);
        this.reset();
      }
    };
    PdfTemplate2.prototype.setSize = function(size) {
      var rect = new RectangleF(new PointF(0, 0), size);
      var val = PdfArray.fromRectangle(rect);
      this.content.items.setValue(this.dictionaryProperties.bBox, val);
      this.templateSize = size;
    };
    Object.defineProperty(PdfTemplate2.prototype, "element", {
      // /**
      //  * Returns the value of current graphics.
      //  * @private
      //  */
      // public GetGraphics(g : PdfGraphics) : PdfGraphics {
      //     if (this.graphics == null || typeof this.graphics === 'undefined') {
      //         this.graphics = g;
      //         this.graphics.Size = this.Size;
      //         this.graphics.StreamWriter = new PdfStreamWriter(this.content)
      //         this.graphics.Initialize();
      //         if(this.writeTransformation) {
      //             this.graphics.InitializeCoordinates();
      //         }
      //     }
      //     return this.graphics;
      // }
      // IPdfWrapper Members
      /**
       * Gets the `content stream` of 'PdfTemplate' class.
       * @private
       */
      get: function() {
        return this.content;
      },
      enumerable: true,
      configurable: true
    });
    return PdfTemplate2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-resources.js
var __extends64 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfResources = (
  /** @class */
  function(_super) {
    __extends64(PdfResources2, _super);
    function PdfResources2(baseDictionary) {
      var _this = _super.call(this, baseDictionary) || this;
      _this.properties = new PdfDictionary();
      return _this;
    }
    Object.defineProperty(PdfResources2.prototype, "names", {
      //Properties
      /**
       * Gets the `font names`.
       * @private
       */
      get: function() {
        return this.getNames();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfResources2.prototype, "document", {
      /**
       * Get or set the `page document`.
       * @private
       */
      get: function() {
        return this.pdfDocument;
      },
      set: function(value) {
        this.pdfDocument = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfResources2.prototype.getName = function(obj) {
      var primitive = obj.element;
      var name = null;
      if (this.names.containsKey(primitive)) {
        name = this.names.getValue(primitive);
      }
      if (name == null) {
        var sName = this.generateName();
        name = new PdfName(sName);
        this.names.setValue(primitive, name);
        if (obj instanceof PdfFont) {
          this.add(obj, name);
        } else if (obj instanceof PdfTemplate) {
          this.add(obj, name);
        } else if (obj instanceof PdfGradientBrush || obj instanceof PdfTilingBrush) {
          this.add(obj, name);
        } else if (obj instanceof PdfTransparency) {
          this.add(obj, name);
        } else if (obj instanceof PdfImage || obj instanceof PdfBitmap) {
          this.add(obj, name);
        }
      }
      return name;
    };
    PdfResources2.prototype.getNames = function() {
      if (this.pdfNames == null) {
        this.pdfNames = new TemporaryDictionary();
      }
      var fonts = this.items.getValue(this.dictionaryProperties.font);
      if (fonts != null) {
        var reference = fonts;
        var dictionary = fonts;
        dictionary = PdfCrossTable.dereference(fonts);
      }
      return this.pdfNames;
    };
    PdfResources2.prototype.requireProcedureSet = function(procedureSetName) {
      if (procedureSetName == null) {
        throw new Error("ArgumentNullException:procedureSetName");
      }
      var procSets = this.items.getValue(this.dictionaryProperties.procset);
      if (procSets == null) {
        procSets = new PdfArray();
        this.items.setValue(this.dictionaryProperties.procset, procSets);
      }
      var name = new PdfName(procedureSetName);
      if (!procSets.contains(name)) {
        procSets.add(name);
      }
    };
    PdfResources2.prototype.removeFont = function(name) {
      var key = null;
      var keys = this.pdfNames.keys();
      for (var index = 0; index < this.pdfNames.size(); index++) {
        if (this.pdfNames.getValue(keys[index]) === new PdfName(name)) {
          key = keys[index];
          break;
        }
      }
      if (key != null) {
        this.pdfNames.remove(key);
      }
    };
    PdfResources2.prototype.generateName = function() {
      var name = Guid.getNewGuidString();
      return name;
    };
    PdfResources2.prototype.add = function(arg1, arg2) {
      if (arg1 instanceof PdfFont) {
        var dictionary = null;
        var fonts = this.items.getValue(this.dictionaryProperties.font);
        if (fonts != null) {
          var reference = fonts;
          dictionary = fonts;
          dictionary = fonts;
        } else {
          dictionary = new PdfDictionary();
          this.items.setValue(this.dictionaryProperties.font, dictionary);
        }
        dictionary.items.setValue(arg2.value, new PdfReferenceHolder(arg1.element));
      } else if (arg1 instanceof PdfTemplate) {
        var xobjects = void 0;
        xobjects = this.items.getValue(this.dictionaryProperties.xObject);
        if (xobjects == null) {
          xobjects = new PdfDictionary();
          this.items.setValue(this.dictionaryProperties.xObject, xobjects);
        }
        xobjects.items.setValue(arg2.value, new PdfReferenceHolder(arg1.element));
      } else if (arg1 instanceof PdfBrush) {
        if (arg1 instanceof PdfGradientBrush || arg1 instanceof PdfTilingBrush) {
          var savable = arg1.element;
          if (savable != null) {
            var pattern = this.items.getValue(this.dictionaryProperties.pattern);
            if (pattern == null) {
              pattern = new PdfDictionary();
              this.items.setValue(this.dictionaryProperties.pattern, pattern);
            }
            pattern.items.setValue(arg2.value, new PdfReferenceHolder(savable));
          }
        }
      } else if (arg1 instanceof PdfTransparency) {
        var savable = arg1.element;
        var transDic = null;
        transDic = this.items.getValue(this.dictionaryProperties.extGState);
        if (transDic == null) {
          transDic = new PdfDictionary();
          this.items.setValue(this.dictionaryProperties.extGState, transDic);
        }
        transDic.items.setValue(arg2.value, new PdfReferenceHolder(savable));
      } else {
        var xobjects = this.Dictionary.items.getValue(this.dictionaryProperties.xObject);
        var parentXObjects = void 0;
        if (typeof this.pdfDocument !== "undefined") {
          parentXObjects = this.pdfDocument.sections.element.items.getValue(this.dictionaryProperties.resources).items.getValue(this.dictionaryProperties.xObject);
        }
        var values = this.Dictionary.items.values();
        var hasSameImageStream = false;
        var oldReference = void 0;
        if (typeof this.pdfDocument !== "undefined" && (typeof parentXObjects === void 0 || parentXObjects == null)) {
          parentXObjects = new PdfDictionary();
          this.pdfDocument.sections.element.items.getValue(this.dictionaryProperties.resources).items.setValue(this.dictionaryProperties.xObject, parentXObjects);
        } else if (typeof this.pdfDocument !== "undefined") {
          var values_1 = parentXObjects.items.values();
          for (var i = 0; i < values_1.length; i++) {
            if (typeof values_1[i] !== "undefined" && typeof values_1[i].element !== "undefined") {
              if (values_1[i].element.data[0] === arg1.element.data[0]) {
                oldReference = values_1[i];
                hasSameImageStream = true;
              }
            }
          }
        }
        if (xobjects == null) {
          xobjects = new PdfDictionary();
          this.Dictionary.items.setValue(this.dictionaryProperties.xObject, xobjects);
        }
        if (hasSameImageStream && typeof oldReference !== "undefined") {
          xobjects.items.setValue(arg2.value, oldReference);
        } else {
          var reference = new PdfReferenceHolder(arg1.element);
          xobjects.items.setValue(arg2.value, reference);
          if (typeof this.pdfDocument !== "undefined") {
            parentXObjects.items.setValue(arg2.value, reference);
          }
        }
      }
    };
    return PdfResources2;
  }(PdfDictionary)
);
var Guid = (
  /** @class */
  function() {
    function Guid2() {
    }
    Guid2.getNewGuidString = function() {
      return "aaaaaaaa-aaaa-4aaa-baaa-aaaaaaaaaaaa".replace(/[ab]/g, function(c) {
        var random = Math.random() * 16 | 0;
        var result = c === "a" ? random : random & 3 | 8;
        return result.toString(16);
      });
    };
    return Guid2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/brushes/pdf-tiling-brush.js
var __extends65 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfTilingBrush = (
  /** @class */
  function(_super) {
    __extends65(PdfTilingBrush2, _super);
    function PdfTilingBrush2(arg1, arg2) {
      var _this = _super.call(this) || this;
      _this.mStroking = false;
      _this.mLocation = new PointF(0, 0);
      _this.mDictionaryProperties = new DictionaryProperties();
      var rect = null;
      if (arg1 instanceof Rectangle) {
        rect = arg1;
      } else if (arg1 instanceof SizeF) {
        rect = new Rectangle(0, 0, arg1.width, arg1.height);
      }
      if (arg2 !== null && arg2 instanceof PdfPage) {
        _this.mPage = arg2;
      }
      _this.brushStream = new PdfStream();
      _this.mResources = new PdfResources();
      _this.brushStream.items.setValue(_this.mDictionaryProperties.resources, _this.mResources);
      _this.setBox(rect);
      _this.setObligatoryFields();
      if (arg2 !== null && arg2 instanceof PdfPage) {
        _this.mPage = arg2;
        _this.graphics.colorSpace = arg2.document.colorSpace;
      }
      return _this;
    }
    PdfTilingBrush2.prototype.initialize = function(rectangle, page, location2, matrix) {
      this.mPage = page;
      this.mLocation = location2;
      this.mTransformationMatrix = matrix;
      this.tempBrushStream = this.brushStream;
      this.brushStream = new PdfStream();
      var tempResource = new PdfResources();
      this.brushStream.items.setValue(this.mDictionaryProperties.resources, tempResource);
      this.setBox(rectangle);
      this.setObligatoryFields();
      return this;
    };
    Object.defineProperty(PdfTilingBrush2.prototype, "location", {
      //Properties
      /**
       * Location representing the start position of the tiles.
       * @public
       */
      get: function() {
        return this.mLocation;
      },
      set: function(value) {
        this.mLocation = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfTilingBrush2.prototype.setObligatoryFields = function() {
      this.brushStream.items.setValue(this.mDictionaryProperties.patternType, new PdfNumber(1));
      this.brushStream.items.setValue(this.mDictionaryProperties.paintType, new PdfNumber(1));
      this.brushStream.items.setValue(this.mDictionaryProperties.tilingType, new PdfNumber(1));
      this.brushStream.items.setValue(this.mDictionaryProperties.xStep, new PdfNumber(this.mBox.right - this.mBox.left));
      this.brushStream.items.setValue(this.mDictionaryProperties.yStep, new PdfNumber(this.mBox.bottom - this.mBox.top));
      if (this.mPage != null && this.mLocation != null) {
        if (this.mTransformationMatrix == null && typeof this.mTransformationMatrix === "undefined") {
          var tileTransform = this.mPage.size.height % this.rectangle.size.height - this.mLocation.y;
          this.brushStream.items.setValue(this.mDictionaryProperties.matrix, new PdfArray([1, 0, 0, 1, this.mLocation.x, tileTransform]));
        } else {
          var tileTransform = 0;
          var elements = this.mTransformationMatrix.matrix.elements;
          if (this.mPage.size.height > this.rectangle.size.height) {
            tileTransform = this.mTransformationMatrix.matrix.offsetY - this.mPage.size.height % this.rectangle.size.height;
          } else {
            tileTransform = this.mPage.size.height % this.rectangle.size.height + this.mTransformationMatrix.matrix.offsetY;
          }
          this.brushStream.items.setValue(this.mDictionaryProperties.matrix, new PdfArray([elements[0], elements[1], elements[2], elements[3], elements[4], tileTransform]));
        }
      }
    };
    PdfTilingBrush2.prototype.setBox = function(box) {
      this.mBox = box;
      var rect = new RectangleF(this.mBox.left, this.mBox.top, this.mBox.right, this.mBox.bottom);
      this.brushStream.items.setValue(this.mDictionaryProperties.bBox, PdfArray.fromRectangle(rect));
    };
    Object.defineProperty(PdfTilingBrush2.prototype, "rectangle", {
      //Properties
      /**
       * Gets the boundary box of the smallest brush cell.
       * @public
       */
      get: function() {
        return this.mBox;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfTilingBrush2.prototype, "size", {
      /**
       * Gets the size of the smallest brush cell.
       * @public
       */
      get: function() {
        return this.mBox.size;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfTilingBrush2.prototype, "graphics", {
      /**
       * Gets Graphics context of the brush.
       */
      get: function() {
        if (this.mGraphics == null && typeof this.mGraphics === "undefined") {
          var gr = new GetResourceEventHandler(this);
          var g = new PdfGraphics(this.size, gr, this.brushStream);
          this.mGraphics = g;
          this.mResources = this.getResources();
          this.mGraphics.initializeCoordinates();
        }
        return this.mGraphics;
      },
      enumerable: true,
      configurable: true
    });
    PdfTilingBrush2.prototype.getResources = function() {
      return this.mResources;
    };
    Object.defineProperty(PdfTilingBrush2.prototype, "stroking", {
      /**
       * Gets or sets a value indicating whether this PdfTilingBrush
       * is used for stroking operations.
       */
      get: function() {
        return this.mStroking;
      },
      set: function(value) {
        this.mStroking = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfTilingBrush2.prototype.clone = function() {
      var brush = this.initialize(this.rectangle, this.mPage, this.location, this.mTransformationMatrix);
      if (this.mTransformationMatrix != null && this.mTransformationMatrix.matrix != null) {
        brush.brushStream.items.setValue(this.mDictionaryProperties.matrix, new PdfArray(this.mTransformationMatrix.matrix.elements));
      }
      brush.brushStream.data = this.tempBrushStream.data;
      brush.mResources = new PdfResources(this.mResources);
      brush.brushStream.items.setValue(this.mDictionaryProperties.resources, brush.mResources);
      return brush;
    };
    PdfTilingBrush2.prototype.monitorChanges = function(brush, streamWriter, getResources, saveChanges, currentColorSpace) {
      var diff = false;
      if (brush !== this) {
        streamWriter.setColorSpace("Pattern", this.mStroking);
        var resources1 = getResources.getResources();
        var name1 = resources1.getName(this);
        streamWriter.setColourWithPattern(null, name1, this.mStroking);
        diff = true;
      } else if (brush instanceof PdfTilingBrush2) {
        streamWriter.setColorSpace("Pattern", this.mStroking);
        var resources = getResources.getResources();
        var name_1 = resources.getName(this);
        streamWriter.setColourWithPattern(null, name_1, this.mStroking);
        diff = true;
      }
      return diff;
    };
    PdfTilingBrush2.prototype.resetChanges = function(streamWriter) {
    };
    Object.defineProperty(PdfTilingBrush2.prototype, "element", {
      /* tslint:enable */
      // IPdfWrapper Members
      /**
       * Gets the `element`.
       * @public
       */
      get: function() {
        return this.brushStream;
      },
      enumerable: true,
      configurable: true
    });
    return PdfTilingBrush2;
  }(PdfBrush)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-graphics.js
var PdfGraphics = (
  /** @class */
  function() {
    function PdfGraphics2(arg1, arg2, arg3) {
      this.currentColorSpace = PdfColorSpace.Rgb;
      this.previousTextRenderingMode = TextRenderingMode.Fill;
      this.previousCharacterSpacing = 0;
      this.previousWordSpacing = 0;
      this.previousTextScaling = 100;
      this.procedureSets = new ProcedureSets();
      this.isNormalRender = true;
      this.isUseFontSize = false;
      this.isItalic = false;
      this.isEmfTextScaled = false;
      this.isEmf = false;
      this.isEmfPlus = false;
      this.isBaselineFormat = true;
      this.emfScalingFactor = new SizeF(0, 0);
      this.colorSpaceChanged = false;
      this.dictionaryProperties = new DictionaryProperties();
      this.isOverloadWithPosition = false;
      this.isPointOverload = false;
      this.currentColorSpaces = ["RGB", "CMYK", "GrayScale", "Indexed"];
      this.isImageOptimized = false;
      this.graphicsState = [];
      this.istransparencySet = false;
      this.internalAutomaticFields = null;
      this.startCutIndex = -1;
      this.getResources = arg2;
      this.canvasSize = arg1;
      if (arg3 instanceof PdfStreamWriter) {
        this.pdfStreamWriter = arg3;
      } else {
        this.pdfStreamWriter = new PdfStreamWriter(arg3);
      }
      this.initialize();
    }
    Object.defineProperty(PdfGraphics2.prototype, "stringLayoutResult", {
      //  Properties
      /**
       * Returns the `result` after drawing string.
       * @private
       */
      get: function() {
        return this.pdfStringLayoutResult;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphics2.prototype, "size", {
      /**
       * Gets the `size` of the canvas.
       * @private
       */
      get: function() {
        return this.canvasSize;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphics2.prototype, "mediaBoxUpperRightBound", {
      /**
       * Gets and Sets the value of `MediaBox upper right bound`.
       * @private
       */
      get: function() {
        if (typeof this.internalMediaBoxUpperRightBound === "undefined") {
          this.internalMediaBoxUpperRightBound = 0;
        }
        return this.internalMediaBoxUpperRightBound;
      },
      set: function(value) {
        this.internalMediaBoxUpperRightBound = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphics2.prototype, "clientSize", {
      /**
       * Gets the `size` of the canvas reduced by margins and page templates.
       * @private
       */
      get: function() {
        return new SizeF(this.clipBounds.width, this.clipBounds.height);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphics2.prototype, "colorSpace", {
      /**
       * Gets or sets the current `color space` of the document
       * @private
       */
      get: function() {
        return this.currentColorSpace;
      },
      set: function(value) {
        this.currentColorSpace = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphics2.prototype, "streamWriter", {
      /**
       * Gets the `stream writer`.
       * @private
       */
      get: function() {
        return this.pdfStreamWriter;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphics2.prototype, "matrix", {
      /**
       * Gets the `transformation matrix` reflecting current transformation.
       * @private
       */
      get: function() {
        if (this.transformationMatrix == null) {
          this.transformationMatrix = new PdfTransformationMatrix();
        }
        return this.transformationMatrix;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphics2.prototype, "layer", {
      /**
       * Gets the `layer` for the graphics, if exists.
       * @private
       */
      get: function() {
        return this.pageLayer;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphics2.prototype, "page", {
      /**
       * Gets the `page` for this graphics, if exists.
       * @private
       */
      get: function() {
        return this.pageLayer.page;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphics2.prototype, "automaticFields", {
      get: function() {
        if (this.internalAutomaticFields == null || typeof this.internalAutomaticFields === "undefined") {
          this.internalAutomaticFields = new PdfAutomaticFieldInfoCollection();
        }
        return this.internalAutomaticFields;
      },
      enumerable: true,
      configurable: true
    });
    PdfGraphics2.prototype.initialize = function() {
      this.bStateSaved = false;
      this.currentPen = null;
      this.currentBrush = null;
      this.currentFont = null;
      this.currentColorSpace = PdfColorSpace.Rgb;
      this.bCSInitialized = false;
      this.transformationMatrix = null;
      this.previousTextRenderingMode = -1;
      this.previousCharacterSpacing = -1;
      this.previousWordSpacing = -1;
      this.previousTextScaling = -100;
      this.currentStringFormat = null;
      this.clipBounds = new RectangleF(new PointF(0, 0), this.size);
      this.getResources.getResources().requireProcedureSet(this.procedureSets.pdf);
    };
    PdfGraphics2.prototype.drawPdfTemplate = function(template, location2, size) {
      if (typeof size === "undefined") {
        if (template == null) {
          throw Error("ArgumentNullException-template");
        }
        this.drawPdfTemplate(template, location2, template.size);
      } else {
        if (template == null) {
          throw Error("ArgumentNullException-template");
        }
        var scaleX = template.width > 0 ? size.width / template.width : 1;
        var scaleY = template.height > 0 ? size.height / template.height : 1;
        var bNeedScale = !(scaleX === 1 && scaleY === 1);
        var state = this.save();
        var matrix = new PdfTransformationMatrix();
        if (this.pageLayer != null) {
          this.getTranslateTransform(location2.x, location2.y + size.height, matrix);
        }
        if (bNeedScale) {
          this.getScaleTransform(scaleX, scaleY, matrix);
        }
        this.pdfStreamWriter.modifyCtm(matrix);
        var resources = this.getResources.getResources();
        var name_1 = resources.getName(template);
        this.pdfStreamWriter.executeObject(name_1);
        this.restore(state);
        var g = template.graphics;
        if (g != null) {
          for (var index = 0; index < g.automaticFields.automaticFields.length; index++) {
            var fieldInfo = g.automaticFields.automaticFields[index];
            var newLocation = new PointF(fieldInfo.location.x + location2.x, fieldInfo.location.y + location2.y);
            var scalingX = template.size.width == 0 ? 0 : size.width / template.size.width;
            var scalingY = template.size.height == 0 ? 0 : size.height / template.size.height;
            this.automaticFields.add(new PdfAutomaticFieldInfo(fieldInfo.field, newLocation, scalingX, scalingY));
            this.page.dictionary.modify();
          }
        }
        this.getResources.getResources().requireProcedureSet(this.procedureSets.imageB);
        this.getResources.getResources().requireProcedureSet(this.procedureSets.imageC);
        this.getResources.getResources().requireProcedureSet(this.procedureSets.imageI);
        this.getResources.getResources().requireProcedureSet(this.procedureSets.text);
      }
    };
    PdfGraphics2.prototype.drawString = function(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {
      if (typeof arg1 === "string" && arg2 instanceof PdfFont && (arg3 instanceof PdfPen || arg3 === null) && (arg4 instanceof PdfBrush || arg4 === null) && typeof arg5 === "number" && typeof arg6 === "number" && (arg7 instanceof PdfStringFormat || arg7 === null) && typeof arg8 === "undefined") {
        this.isOverloadWithPosition = true;
        this.drawString(arg1, arg2, arg3, arg4, arg5, arg6, this.clientSize.width - arg5, 0, arg7);
      } else {
        var temparg3 = arg3;
        var temparg4 = arg4;
        var temparg5 = arg5;
        var temparg6 = arg6;
        var temparg7 = arg7;
        var temparg8 = arg8;
        var temparg9 = arg9;
        var layouter = new PdfStringLayouter();
        var result = layouter.layout(arg1, arg2, temparg9, new SizeF(temparg7, temparg8), this.isOverloadWithPosition, this.clientSize);
        if (!result.empty) {
          var rect = this.checkCorrectLayoutRectangle(result.actualSize, temparg5, temparg6, temparg9);
          if (temparg7 <= 0) {
            temparg5 = rect.x;
            temparg7 = rect.width;
          }
          if (temparg8 <= 0) {
            temparg6 = rect.y;
            temparg8 = rect.height;
          }
          this.drawStringLayoutResult(result, arg2, temparg3, temparg4, new RectangleF(temparg5, temparg6, temparg7, temparg8), temparg9);
          this.isEmfTextScaled = false;
          this.emfScalingFactor = new SizeF(0, 0);
        }
        this.getResources.getResources().requireProcedureSet(this.procedureSets.text);
        this.isNormalRender = true;
        this.pdfStringLayoutResult = result;
        this.isUseFontSize = false;
      }
    };
    PdfGraphics2.prototype.drawLine = function(arg1, arg2, arg3, arg4, arg5) {
      if (arg2 instanceof PointF) {
        var temparg2 = arg2;
        var temparg3 = arg3;
        this.drawLine(arg1, temparg2.x, temparg2.y, temparg3.x, temparg3.y);
      } else {
        var temparg2 = arg2;
        var temparg3 = arg3;
        var temparg4 = arg4;
        var temparg5 = arg5;
        this.stateControl(arg1, null, null);
        var sw = this.streamWriter;
        sw.beginPath(temparg2, temparg3);
        sw.appendLineSegment(temparg4, temparg5);
        sw.strokePath();
        this.getResources.getResources().requireProcedureSet(this.procedureSets.pdf);
      }
    };
    PdfGraphics2.prototype.drawRectangle = function(arg1, arg2, arg3, arg4, arg5, arg6) {
      if (arg1 instanceof PdfPen && typeof arg2 === "number") {
        var temparg3 = arg3;
        this.drawRectangle(arg1, null, arg2, temparg3, arg4, arg5);
      } else if (arg1 instanceof PdfBrush && typeof arg2 === "number") {
        var temparg3 = arg3;
        this.drawRectangle(null, arg1, arg2, temparg3, arg4, arg5);
      } else {
        var temparg3 = arg3;
        var temparg4 = arg4;
        var temparg5 = arg5;
        var temparg6 = arg6;
        if (arg2 instanceof PdfTilingBrush) {
          this.bCSInitialized = false;
          var xOffset = this.matrix.matrix.offsetX + temparg3;
          var yOffset = void 0;
          if (this.layer != null && this.layer.page != null) {
            yOffset = this.layer.page.size.height - this.matrix.matrix.offsetY + temparg4;
          } else {
            yOffset = this.clientSize.height - this.matrix.matrix.offsetY + temparg4;
          }
          arg2.location = new PointF(xOffset, yOffset);
          arg2.graphics.colorSpace = this.colorSpace;
        } else if (arg2 instanceof PdfGradientBrush) {
          arg2.colorSpace = this.colorSpace;
        }
        if (arg2 instanceof PdfSolidBrush && arg2.color.isEmpty) {
          arg2 = null;
        }
        var temparg1 = arg1;
        var temparg2 = arg2;
        this.stateControl(temparg1, temparg2, null);
        this.streamWriter.appendRectangle(temparg3, temparg4, temparg5, temparg6);
        this.drawPathHelper(temparg1, temparg2, false);
      }
    };
    PdfGraphics2.prototype.drawRoundedRectangle = function(pen, brush, x, y, width, height, radius) {
      if (pen === null) {
        throw new Error("pen");
      }
      if (brush === null) {
        throw new Error("brush");
      }
      if (radius === 0) {
        this.drawRectangle(pen, brush, x, y, width, height);
      } else {
        var bounds = [x, y, width, height];
        var diameter = radius * 2;
        var size = [diameter, diameter];
        var arc = [bounds[0], bounds[1], size[0], size[1]];
        this._pathPoints = [];
        this._pathTypes = [];
        var startFigure = true;
        startFigure = this._addArc(arc[0], arc[1], arc[2], arc[3], 180, 90, startFigure);
        arc[0] = bounds[0] + bounds[2] - diameter;
        startFigure = this._addArc(arc[0], arc[1], arc[2], arc[3], 270, 90, startFigure);
        arc[1] = bounds[1] + bounds[3] - diameter;
        startFigure = this._addArc(arc[0], arc[1], arc[2], arc[3], 0, 90, startFigure);
        arc[0] = bounds[0];
        startFigure = this._addArc(arc[0], arc[1], arc[2], arc[3], 90, 90, startFigure);
        var index = this._pathPoints.length - 1;
        var type = this._pathTypes[index];
        type = type | PathPointType.CloseSubpath;
        this._pathTypes[index] = type;
        this._drawPath(pen, brush, this._pathPoints, this._pathTypes, PdfFillMode.Alternate);
        this._pathPoints = [];
        this._pathTypes = [];
      }
    };
    PdfGraphics2.prototype._addArc = function(x, y, width, height, startAngle, sweepAngle, startFigure) {
      var points = this._getBezierArcPoints(x, y, x + width, y + height, startAngle, sweepAngle);
      for (var i = 0; i < points.length; i = i + 8) {
        var point = [points[i], points[i + 1], points[i + 2], points[i + 3], points[i + 4], points[i + 5], points[i + 6], points[i + 7]];
        startFigure = this._addArcPoints(point, PathPointType.Bezier3, startFigure);
      }
      return startFigure;
    };
    PdfGraphics2.prototype._addArcPoints = function(points, pointType, startFigure) {
      for (var i = 0; i < points.length; i++) {
        var point = new PointF(points[i], points[i + 1]);
        if (i === 0) {
          if (this._pathPoints.length === 0 || startFigure) {
            this._addPoint(point, PathPointType.Start);
            startFigure = false;
          } else if (point.x !== this._getLastPoint().x || point.y !== this._getLastPoint().y) {
            this._addPoint(point, PathPointType.Line);
          }
        } else {
          this._addPoint(point, pointType);
        }
        i++;
      }
      return startFigure;
    };
    PdfGraphics2.prototype._getLastPoint = function() {
      var lastPoint = new PointF(0, 0);
      var count = this._pathPoints.length;
      if (count > 0) {
        lastPoint.x = this._pathPoints[count - 1].x;
        lastPoint.y = this._pathPoints[count - 1].y;
      }
      return lastPoint;
    };
    PdfGraphics2.prototype._addPoint = function(point, type) {
      this._pathPoints.push(point);
      this._pathTypes.push(type);
    };
    PdfGraphics2.prototype._getBezierArcPoints = function(x1, y1, x2, y2, s1, e1) {
      if (x1 > x2) {
        var tmp = void 0;
        tmp = x1;
        x1 = x2;
        x2 = tmp;
      }
      if (y2 > y1) {
        var tmp = void 0;
        tmp = y1;
        y1 = y2;
        y2 = tmp;
      }
      var fragAngle;
      var numFragments;
      if (Math.abs(e1) <= 90) {
        fragAngle = e1;
        numFragments = 1;
      } else {
        numFragments = Math.ceil(Math.abs(e1) / 90);
        fragAngle = e1 / numFragments;
      }
      var xcen = (x1 + x2) / 2;
      var ycen = (y1 + y2) / 2;
      var rx = (x2 - x1) / 2;
      var ry = (y2 - y1) / 2;
      var halfAng = fragAngle * (Math.PI / 360);
      var kappa = Math.abs(4 / 3 * (1 - Math.cos(halfAng)) / Math.sin(halfAng));
      var pointList = [];
      for (var i = 0; i < numFragments; i++) {
        var theta0 = (s1 + i * fragAngle) * (Math.PI / 180);
        var theta1 = (s1 + (i + 1) * fragAngle) * (Math.PI / 180);
        var cos0 = Math.cos(theta0);
        var cos1 = Math.cos(theta1);
        var sin0 = Math.sin(theta0);
        var sin1 = Math.sin(theta1);
        if (fragAngle > 0) {
          pointList.push(xcen + rx * cos0, ycen - ry * sin0, xcen + rx * (cos0 - kappa * sin0), ycen - ry * (sin0 + kappa * cos0), xcen + rx * (cos1 + kappa * sin1), ycen - ry * (sin1 - kappa * cos1), xcen + rx * cos1, ycen - ry * sin1);
        } else {
          pointList.push(xcen + rx * cos0, ycen - ry * sin0, xcen + rx * (cos0 + kappa * sin0), ycen - ry * (sin0 - kappa * cos0), xcen + rx * (cos1 - kappa * sin1), ycen - ry * (sin1 + kappa * cos1), xcen + rx * cos1, ycen - ry * sin1);
        }
      }
      return pointList;
    };
    PdfGraphics2.prototype.drawPathHelper = function(arg1, arg2, arg3, arg4) {
      if (typeof arg3 === "boolean") {
        var temparg3 = arg3;
        this.drawPathHelper(arg1, arg2, PdfFillMode.Winding, temparg3);
      } else {
        var temparg3 = arg3;
        var temparg4 = arg4;
        var isPen = arg1 != null;
        var isBrush = arg2 != null;
        var isEvenOdd = temparg3 === PdfFillMode.Alternate;
        if (isPen && isBrush) {
          this.streamWriter.fillStrokePath(isEvenOdd);
        } else if (!isPen && !isBrush) {
          this.streamWriter.endPath();
        } else if (isPen) {
          this.streamWriter.strokePath();
        } else {
          this.streamWriter.fillPath(isEvenOdd);
        }
      }
    };
    PdfGraphics2.prototype.drawImage = function(arg1, arg2, arg3, arg4, arg5) {
      if (typeof arg2 === "number" && typeof arg3 === "number" && typeof arg4 === "undefined") {
        var size = arg1.physicalDimension;
        this.drawImage(arg1, arg2, arg3, size.width, size.height);
      } else {
        var temparg2 = arg2;
        var temparg3 = arg3;
        var temparg4 = arg4;
        var temparg5 = arg5;
        arg1.save();
        var matrix = new PdfTransformationMatrix();
        this.getTranslateTransform(temparg2, temparg3 + temparg5, matrix);
        this.getScaleTransform(arg4, arg5, matrix);
        this.pdfStreamWriter.write("q");
        this.pdfStreamWriter.modifyCtm(matrix);
        var resources = this.getResources.getResources();
        if (typeof this.pageLayer !== "undefined" && this.page != null) {
          resources.document = this.page.document;
        }
        var name_2 = resources.getName(arg1);
        if (typeof this.pageLayer !== "undefined") {
          this.page.setResources(resources);
        }
        this.pdfStreamWriter.executeObject(name_2);
        this.pdfStreamWriter.write(Operators.restoreState);
        this.pdfStreamWriter.write(Operators.newLine);
        var resource = this.getResources.getResources();
        resource.requireProcedureSet(this.procedureSets.imageB);
        resource.requireProcedureSet(this.procedureSets.imageC);
        resource.requireProcedureSet(this.procedureSets.imageI);
        resource.requireProcedureSet(this.procedureSets.text);
      }
    };
    PdfGraphics2.prototype.getLineBounds = function(lineIndex, result, font, layoutRectangle, format) {
      var bounds;
      if (!result.empty && lineIndex < result.lineCount && lineIndex >= 0) {
        var line = result.lines[lineIndex];
        var vShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);
        var y = vShift + layoutRectangle.y + result.lineHeight * lineIndex;
        var lineWidth = line.width;
        var hShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);
        var lineIndent = this.getLineIndent(line, format, layoutRectangle, lineIndex === 0);
        hShift += !this.rightToLeft(format) ? lineIndent : 0;
        var x = layoutRectangle.x + hShift;
        var width = !this.shouldJustify(line, layoutRectangle.width, format) ? lineWidth - lineIndent : layoutRectangle.width - lineIndent;
        var height = result.lineHeight;
        bounds = new RectangleF(x, y, width, height);
      } else {
        bounds = new RectangleF(0, 0, 0, 0);
      }
      return bounds;
    };
    PdfGraphics2.prototype.checkCorrectLayoutRectangle = function(textSize, x, y, format) {
      var layoutedRectangle = new RectangleF(x, y, textSize.width, textSize.width);
      if (format != null) {
        switch (format.alignment) {
          case PdfTextAlignment.Center:
            layoutedRectangle.x -= layoutedRectangle.width / 2;
            break;
          case PdfTextAlignment.Right:
            layoutedRectangle.x -= layoutedRectangle.width;
            break;
        }
        switch (format.lineAlignment) {
          case PdfVerticalAlignment.Middle:
            layoutedRectangle.y -= layoutedRectangle.height / 2;
            break;
          case PdfVerticalAlignment.Bottom:
            layoutedRectangle.y -= layoutedRectangle.height;
            break;
        }
      }
      return layoutedRectangle;
    };
    PdfGraphics2.prototype.setLayer = function(layer) {
      this.pageLayer = layer;
      var page = layer.page;
      if (page != null && typeof page !== "undefined") {
        page.beginSave = this.pageSave;
      }
    };
    PdfGraphics2.prototype.pageSave = function(page) {
      if (page.graphics.automaticFields != null) {
        for (var i = 0; i < page.graphics.automaticFields.automaticFields.length; i++) {
          var fieldInfo = page.graphics.automaticFields.automaticFields[i];
          fieldInfo.field.performDraw(page.graphics, fieldInfo.location, fieldInfo.scalingX, fieldInfo.scalingY);
        }
      }
    };
    PdfGraphics2.prototype.drawStringLayoutResult = function(result, font, pen, brush, layoutRectangle, format) {
      if (!result.empty) {
        this.applyStringSettings(font, pen, brush, format, layoutRectangle);
        var textScaling = format != null ? format.horizontalScalingFactor : 100;
        if (textScaling !== this.previousTextScaling && !this.isEmfTextScaled) {
          this.pdfStreamWriter.setTextScaling(textScaling);
          this.previousTextScaling = textScaling;
        }
        var height = format == null || format.lineSpacing === 0 ? font.height : format.lineSpacing + font.height;
        var subScript = format != null && format.subSuperScript === PdfSubSuperScript.SubScript;
        var shift = 0;
        shift = subScript ? height - (font.height + font.metrics.getDescent(format)) : height - font.metrics.getAscent(format);
        this.shift = shift;
        this.pdfStreamWriter.startNextLine(layoutRectangle.x, layoutRectangle.y - shift);
        this.pdfStreamWriter.setLeading(+height);
        var resultHeight = 0;
        var remainingString = "";
        for (var i = 0; i < result.lines.length; i++) {
          resultHeight += result.lineHeight;
          if (layoutRectangle.y + resultHeight > this.clientSize.height) {
            this.startCutIndex = i;
            break;
          }
        }
        for (var j = this.startCutIndex; j < result.lines.length && j >= 0; j++) {
          remainingString += result.lines[j].text;
        }
        var bounds = new RectangleF(layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height);
        this.drawLayoutResult(result, font, format, layoutRectangle);
        this.underlineStrikeoutText(pen, brush, result, font, bounds, format);
        this.isEmfPlus = false;
        this.isUseFontSize = false;
        if (this.startCutIndex !== -1) {
          var page = this.getNextPage();
          page.graphics.drawString(remainingString, font, pen, brush, layoutRectangle.x, 0, layoutRectangle.width, 0, format);
        }
      } else {
        throw new Error("ArgumentNullException:result");
      }
    };
    PdfGraphics2.prototype.getNextPage = function() {
      var section = this.currentPage.section;
      var nextPage = null;
      var index = section.indexOf(this.currentPage);
      if (index === section.count - 1) {
        nextPage = section.add();
      } else {
        nextPage = section.getPages()[index + 1];
      }
      return nextPage;
    };
    PdfGraphics2.prototype.setClip = function(rectangle, mode) {
      if (typeof mode === "undefined") {
        this.setClip(rectangle, PdfFillMode.Winding);
      } else {
        this.pdfStreamWriter.appendRectangle(rectangle);
        this.pdfStreamWriter.clipPath(mode === PdfFillMode.Alternate);
      }
    };
    PdfGraphics2.prototype.applyStringSettings = function(font, pen, brush, format, bounds) {
      if (brush instanceof PdfTilingBrush) {
        this.bCSInitialized = false;
        brush.graphics.colorSpace = this.colorSpace;
      } else if (brush instanceof PdfGradientBrush) {
        this.bCSInitialized = false;
        brush.colorSpace = this.colorSpace;
      }
      var setLineWidth = false;
      var tm = this.getTextRenderingMode(pen, brush, format);
      this.stateControl(pen, brush, font, format);
      this.pdfStreamWriter.beginText();
      if (tm !== this.previousTextRenderingMode) {
        this.pdfStreamWriter.setTextRenderingMode(tm);
        this.previousTextRenderingMode = tm;
      }
      var cs = format != null ? format.characterSpacing : 0;
      if (cs !== this.previousCharacterSpacing && !this.isEmfTextScaled) {
        this.pdfStreamWriter.setCharacterSpacing(cs);
        this.previousCharacterSpacing = cs;
      }
      var ws = format != null ? format.wordSpacing : 0;
      if (ws !== this.previousWordSpacing) {
        this.pdfStreamWriter.setWordSpacing(ws);
        this.previousWordSpacing = ws;
      }
    };
    PdfGraphics2.prototype.getTextVerticalAlignShift = function(textHeight, boundsHeight, format) {
      var shift = 0;
      if (boundsHeight >= 0 && format != null && format.lineAlignment !== PdfVerticalAlignment.Top) {
        switch (format.lineAlignment) {
          case PdfVerticalAlignment.Middle:
            shift = (boundsHeight - textHeight) / 2;
            break;
          case PdfVerticalAlignment.Bottom:
            shift = boundsHeight - textHeight;
            break;
        }
      }
      return shift;
    };
    PdfGraphics2.prototype.drawLayoutResult = function(result, font, format, layoutRectangle) {
      var vAlignShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);
      if (vAlignShift !== 0) {
        this.pdfStreamWriter.startNextLine(0, vAlignShift);
      }
      var ttfFont = font;
      var unicode = ttfFont != null && ttfFont.isUnicode;
      var embed = ttfFont != null && ttfFont.isEmbedFont;
      var lines = result.lines;
      for (var i = 0, len = lines.length; i < len && i !== this.startCutIndex; i++) {
        var lineInfo = lines[i];
        var line = lineInfo.text;
        var lineWidth = lineInfo.width;
        var hAlignShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);
        var lineIndent = this.getLineIndent(lineInfo, format, layoutRectangle, i === 0);
        hAlignShift += !this.rightToLeft(format) ? lineIndent : 0;
        if (hAlignShift !== 0 && !this.isEmfTextScaled) {
          this.pdfStreamWriter.startNextLine(hAlignShift, 0);
        }
        if (unicode) {
          this.drawUnicodeLine(lineInfo, layoutRectangle, font, format);
        } else {
          this.drawAsciiLine(lineInfo, layoutRectangle, font, format);
        }
        if (hAlignShift !== 0 && !this.isEmfTextScaled) {
          this.pdfStreamWriter.startNextLine(-hAlignShift, 0);
        }
        if (this.isOverloadWithPosition && lines.length > 1) {
          this.pdfStreamWriter.startNextLine(-layoutRectangle.x, 0);
          layoutRectangle.x = 0;
          layoutRectangle.width = this.clientSize.width;
          this.isOverloadWithPosition = false;
          this.isPointOverload = true;
        } else if (this.isOverloadWithPosition) {
          this.isOverloadWithPosition = false;
        }
      }
      this.getResources.getResources().requireProcedureSet(this.procedureSets.text);
      if (vAlignShift !== 0) {
        this.pdfStreamWriter.startNextLine(0, -(vAlignShift - result.lineHeight));
      }
      this.pdfStreamWriter.endText();
    };
    PdfGraphics2.prototype.drawAsciiLine = function(lineInfo, layoutRectangle, font, format) {
      this.justifyLine(lineInfo, layoutRectangle.width, format);
      var value = "";
      if (lineInfo.text.indexOf("(") !== -1 || lineInfo.text.indexOf(")") !== -1) {
        for (var i = 0; i < lineInfo.text.length; i++) {
          if (lineInfo.text[i] === "(") {
            value += "\\(";
          } else if (lineInfo.text[i] === ")") {
            value += "\\)";
          } else {
            value += lineInfo.text[i];
          }
        }
      }
      if (value === "") {
        value = lineInfo.text;
      }
      var line = "(" + value + ")";
      this.pdfStreamWriter.showNextLineText(new PdfString(line));
    };
    PdfGraphics2.prototype.drawUnicodeLine = function(lineInfo, layoutRectangle, font, format) {
      var line = lineInfo.text;
      var lineWidth = lineInfo.width;
      var rtl = format !== null && typeof format !== "undefined" && format.rightToLeft;
      var useWordSpace = format !== null && typeof format !== "undefined" && (format.wordSpacing !== 0 || format.alignment === PdfTextAlignment.Justify);
      var ttfFont = font;
      var wordSpacing = this.justifyLine(lineInfo, layoutRectangle.width, format);
      var rtlRender = new RtlRenderer();
      if (rtl || format !== null && typeof format !== "undefined" && format.textDirection !== PdfTextDirection.None) {
        var blocks = null;
        var rightAlign = format !== null && typeof format !== "undefined" && format.alignment === PdfTextAlignment.Right;
        if (format !== null && typeof format !== "undefined" && format.textDirection !== PdfTextDirection.None) {
          blocks = rtlRender.layout(line, ttfFont, format.textDirection === PdfTextDirection.RightToLeft ? true : false, useWordSpace, format);
        } else {
          blocks = rtlRender.layout(line, ttfFont, rightAlign, useWordSpace, format);
        }
        var words = null;
        if (blocks.length > 1) {
          if (format !== null && typeof format !== "undefined" && format.textDirection !== PdfTextDirection.None) {
            words = rtlRender.splitLayout(line, ttfFont, format.textDirection === PdfTextDirection.RightToLeft ? true : false, useWordSpace, format);
          } else {
            words = rtlRender.splitLayout(line, ttfFont, rightAlign, useWordSpace, format);
          }
        } else {
          words = [line];
        }
        this.drawUnicodeBlocks(blocks, words, ttfFont, format, wordSpacing);
      } else {
        if (useWordSpace) {
          var result = this.breakUnicodeLine(line, ttfFont, null);
          var blocks = result.tokens;
          var words = result.words;
          this.drawUnicodeBlocks(blocks, words, ttfFont, format, wordSpacing);
        } else {
          var token = this.convertToUnicode(line, ttfFont);
          var value = this.getUnicodeString(token);
          this.streamWriter.showNextLineText(value);
        }
      }
    };
    PdfGraphics2.prototype.drawUnicodeBlocks = function(blocks, words, font, format, wordSpacing) {
      if (blocks == null) {
        throw new Error("Argument Null Exception : blocks");
      }
      if (words == null) {
        throw new Error("Argument Null Exception : words");
      }
      if (font == null) {
        throw new Error("Argument Null Exception : font");
      }
      this.streamWriter.startNextLine();
      var x = 0;
      var xShift = 0;
      var firstLineIndent = 0;
      var paragraphIndent = 0;
      try {
        if (format !== null && typeof format !== "undefined") {
          firstLineIndent = format.firstLineIndent;
          paragraphIndent = format.paragraphIndent;
          format.firstLineIndent = 0;
          format.paragraphIndent = 0;
        }
        var spaceWidth = font.getCharWidth(StringTokenizer.whiteSpace, format) + wordSpacing;
        var characterSpacing = format != null ? format.characterSpacing : 0;
        var wordSpace = format !== null && typeof format !== "undefined" && wordSpacing === 0 ? format.wordSpacing : 0;
        spaceWidth += characterSpacing + wordSpace;
        for (var i = 0; i < blocks.length; i++) {
          var token = blocks[i];
          var word = words[i];
          var tokenWidth = 0;
          if (x !== 0) {
            this.streamWriter.startNextLine(x, 0);
          }
          if (word.length > 0) {
            tokenWidth += /*Utils.Round(*/
            font.measureString(word, format).width;
            tokenWidth += characterSpacing;
            var val = this.getUnicodeString(token);
            this.streamWriter.showText(val);
          }
          if (i !== blocks.length - 1) {
            x = tokenWidth + spaceWidth;
            xShift += x;
          }
        }
        if (xShift > 0) {
          this.streamWriter.startNextLine(-xShift, 0);
        }
      } finally {
        if (format !== null && typeof format !== "undefined") {
          format.firstLineIndent = firstLineIndent;
          format.paragraphIndent = paragraphIndent;
        }
      }
    };
    PdfGraphics2.prototype.breakUnicodeLine = function(line, ttfFont, words) {
      if (line === null) {
        throw new Error("Argument Null Exception : line");
      }
      words = line.split(null);
      var tokens = [];
      for (var i = 0; i < words.length; i++) {
        var word = words[i];
        var token = this.convertToUnicode(word, ttfFont);
        tokens[i] = token;
      }
      return {
        tokens,
        words
      };
    };
    PdfGraphics2.prototype.getUnicodeString = function(token) {
      if (token === null) {
        throw new Error("Argument Null Exception : token");
      }
      var val = new PdfString(token);
      val.converted = true;
      val.encode = InternalEnum.ForceEncoding.Ascii;
      return val;
    };
    PdfGraphics2.prototype.convertToUnicode = function(text, ttfFont) {
      var token = null;
      if (text == null) {
        throw new Error("Argument Null Exception : text");
      }
      if (ttfFont == null) {
        throw new Error("Argument Null Exception : ttfFont");
      }
      if (ttfFont.fontInternal instanceof UnicodeTrueTypeFont) {
        var ttfReader = ttfFont.fontInternal.ttfReader;
        ttfFont.setSymbols(text);
        token = ttfReader.convertString(text);
        var bytes = PdfString.toUnicodeArray(token, false);
        token = PdfString.byteToString(bytes);
      }
      return token;
    };
    PdfGraphics2.prototype.justifyLine = function(lineInfo, boundsWidth, format) {
      var line = lineInfo.text;
      var lineWidth = lineInfo.width;
      var shouldJustify = this.shouldJustify(lineInfo, boundsWidth, format);
      var hasWordSpacing = format != null && format.wordSpacing !== 0;
      var symbols = StringTokenizer.spaces;
      var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);
      var wordSpace = 0;
      if (shouldJustify) {
        if (hasWordSpacing) {
          lineWidth -= whitespacesCount * format.wordSpacing;
        }
        var difference = boundsWidth - lineWidth;
        wordSpace = difference / whitespacesCount;
        this.pdfStreamWriter.setWordSpacing(wordSpace);
      } else {
        if (hasWordSpacing) {
          this.pdfStreamWriter.setWordSpacing(format.wordSpacing);
        } else {
          this.pdfStreamWriter.setWordSpacing(0);
        }
      }
      return wordSpace;
    };
    PdfGraphics2.prototype.reset = function(size) {
      this.canvasSize = size;
      this.streamWriter.clear();
      this.initialize();
      this.initializeCoordinates();
    };
    PdfGraphics2.prototype.shouldJustify = function(lineInfo, boundsWidth, format) {
      var line = lineInfo.text;
      var lineWidth = lineInfo.width;
      var justifyStyle = format != null && format.alignment === PdfTextAlignment.Justify;
      var goodWidth = boundsWidth >= 0 && lineWidth < boundsWidth;
      var symbols = StringTokenizer.spaces;
      var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);
      var hasSpaces = whitespacesCount > 0 && line[0] !== StringTokenizer.whiteSpace;
      var goodLineBreakStyle = (lineInfo.lineType & LineType.LayoutBreak) > 0 || format && format.wordWrap === PdfWordWrapType.None;
      var shouldJustify = justifyStyle && goodWidth && hasSpaces && goodLineBreakStyle;
      return shouldJustify;
    };
    PdfGraphics2.prototype.underlineStrikeoutText = function(pen, brush, result, font, layoutRectangle, format) {
      if (font.underline || font.strikeout) {
        var linePen = this.createUnderlineStikeoutPen(pen, brush, font, format);
        if (linePen != null) {
          var vShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);
          var underlineYOffset = 0;
          underlineYOffset = layoutRectangle.y + vShift + font.metrics.getAscent(format) + 1.5 * linePen.width;
          var strikeoutYOffset = layoutRectangle.y + vShift + font.metrics.getHeight(format) / 2 + 1.5 * linePen.width;
          var lines = result.lines;
          for (var i = 0, len = result.lineCount; i < len; i++) {
            var lineInfo = lines[i];
            var line = lineInfo.text;
            var lineWidth = lineInfo.width;
            var hShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);
            var lineIndent = this.getLineIndent(lineInfo, format, layoutRectangle, i === 0);
            hShift += !this.rightToLeft(format) ? lineIndent : 0;
            var x1 = layoutRectangle.x + hShift;
            var x2 = !this.shouldJustify(lineInfo, layoutRectangle.width, format) ? x1 + lineWidth - lineIndent : x1 + layoutRectangle.width - lineIndent;
            if (font.underline) {
              var y = underlineYOffset;
              this.drawLine(linePen, x1, y, x2, y);
              underlineYOffset += result.lineHeight;
            }
            if (font.strikeout) {
              var y = strikeoutYOffset;
              this.drawLine(linePen, x1, y, x2, y);
              strikeoutYOffset += result.lineHeight;
            }
            if (this.isPointOverload && lines.length > 1) {
              layoutRectangle.x = 0;
              layoutRectangle.width = this.clientSize.width;
            }
          }
          this.isPointOverload = false;
        }
      }
    };
    PdfGraphics2.prototype.createUnderlineStikeoutPen = function(pen, brush, font, format) {
      var lineWidth = font.metrics.getSize(format) / 20;
      var linePen = null;
      if (pen != null) {
        linePen = new PdfPen(pen.color, lineWidth);
      } else if (brush != null) {
        linePen = new PdfPen(brush, lineWidth);
      }
      return linePen;
    };
    PdfGraphics2.prototype.getTextRenderingMode = function(pen, brush, format) {
      var tm = TextRenderingMode.None;
      if (pen != null && brush != null) {
        tm = TextRenderingMode.FillStroke;
      } else if (pen != null) {
        tm = TextRenderingMode.Stroke;
      } else {
        tm = TextRenderingMode.Fill;
      }
      if (format != null && format.clipPath) {
        tm |= TextRenderingMode.ClipFlag;
      }
      return tm;
    };
    PdfGraphics2.prototype.getLineIndent = function(lineInfo, format, layoutBounds, firstLine) {
      var lineIndent = 0;
      var firstParagraphLine = (lineInfo.lineType & LineType.FirstParagraphLine) > 0;
      if (format != null && firstParagraphLine) {
        lineIndent = firstLine ? format.firstLineIndent : format.paragraphIndent;
        lineIndent = layoutBounds.width > 0 ? Math.min(layoutBounds.width, lineIndent) : lineIndent;
      }
      return lineIndent;
    };
    PdfGraphics2.prototype.getHorizontalAlignShift = function(lineWidth, boundsWidth, format) {
      var shift = 0;
      if (boundsWidth >= 0 && format != null && format.alignment !== PdfTextAlignment.Left) {
        switch (format.alignment) {
          case PdfTextAlignment.Center:
            shift = (boundsWidth - lineWidth) / 2;
            break;
          case PdfTextAlignment.Right:
            shift = boundsWidth - lineWidth;
            break;
        }
      }
      return shift;
    };
    PdfGraphics2.prototype.rightToLeft = function(format) {
      var rtl = format !== null && typeof format !== "undefined" && format.rightToLeft;
      if (format !== null && typeof format !== "undefined") {
        if (format.textDirection !== PdfTextDirection.None && typeof format.textDirection !== "undefined") {
          rtl = true;
        }
      }
      return rtl;
    };
    PdfGraphics2.prototype.stateControl = function(pen, brush, font, format) {
      if (typeof format === "undefined") {
        this.stateControl(pen, brush, font, null);
      } else {
        if (brush instanceof PdfGradientBrush) {
          this.bCSInitialized = false;
          brush.colorSpace = this.colorSpace;
        }
        if (brush instanceof PdfTilingBrush) {
          this.bCSInitialized = false;
          brush.graphics.colorSpace = this.colorSpace;
        }
        var saveState = false;
        if (brush !== null) {
          var solidBrush = brush;
          if (typeof this.pageLayer !== "undefined" && this.pageLayer != null) {
            if (this.colorSpaceChanged === false) {
              this.lastDocumentCS = this.pageLayer.page.document.colorSpace;
              this.lastGraphicsCS = this.pageLayer.page.graphics.colorSpace;
              this.colorSpace = this.pageLayer.page.document.colorSpace;
              this.currentColorSpace = this.pageLayer.page.document.colorSpace;
              this.colorSpaceChanged = true;
            }
          }
          this.initCurrentColorSpace(this.currentColorSpace);
        } else if (pen != null) {
          var pdfPen = pen;
          if (typeof this.pageLayer !== "undefined" && this.pageLayer != null) {
            this.colorSpace = this.pageLayer.page.document.colorSpace;
            this.currentColorSpace = this.pageLayer.page.document.colorSpace;
          }
          this.initCurrentColorSpace(this.currentColorSpace);
        }
        this.penControl(pen, saveState);
        this.brushControl(brush, saveState);
        this.fontControl(font, format, saveState);
      }
    };
    PdfGraphics2.prototype.initCurrentColorSpace = function(colorspace) {
      var re = this.getResources.getResources();
      if (!this.bCSInitialized) {
        if (this.currentColorSpace != PdfColorSpace.GrayScale) {
          this.pdfStreamWriter.setColorSpace("Device" + this.currentColorSpaces[this.currentColorSpace], true);
          this.pdfStreamWriter.setColorSpace("Device" + this.currentColorSpaces[this.currentColorSpace], false);
          this.bCSInitialized = true;
        } else {
          this.pdfStreamWriter.setColorSpace("DeviceGray", true);
          this.pdfStreamWriter.setColorSpace("DeviceGray", false);
          this.bCSInitialized = true;
        }
      }
    };
    PdfGraphics2.prototype.penControl = function(pen, saveState) {
      if (pen != null) {
        this.currentPen = pen;
        pen.monitorChanges(this.currentPen, this.pdfStreamWriter, this.getResources, saveState, this.colorSpace, this.matrix.clone());
        this.currentPen = pen.clone();
      }
    };
    PdfGraphics2.prototype.brushControl = function(brush, saveState) {
      if (brush != null && typeof brush !== "undefined") {
        var b = brush.clone();
        var lgb = b;
        if (lgb !== null && typeof lgb !== "undefined" && !(brush instanceof PdfSolidBrush) && !(brush instanceof PdfTilingBrush)) {
          var m = lgb.matrix;
          var matrix = this.matrix.clone();
          if (m != null) {
            m.multiply(matrix);
            matrix = m;
          }
          lgb.matrix = matrix;
        }
        this.currentBrush = lgb;
        var br = brush;
        b.monitorChanges(this.currentBrush, this.pdfStreamWriter, this.getResources, saveState, this.colorSpace);
        this.currentBrush = brush;
        brush = null;
      }
    };
    PdfGraphics2.prototype.fontControl = function(font, format, saveState) {
      if (font != null) {
        var curSubSuper = format != null ? format.subSuperScript : PdfSubSuperScript.None;
        var prevSubSuper = this.currentStringFormat != null ? this.currentStringFormat.subSuperScript : PdfSubSuperScript.None;
        if (saveState || font !== this.currentFont || curSubSuper !== prevSubSuper) {
          var resources = this.getResources.getResources();
          this.currentFont = font;
          this.currentStringFormat = format;
          var size = font.metrics.getSize(format);
          this.isEmfTextScaled = false;
          var fontName = resources.getName(font);
          this.pdfStreamWriter.setFont(font, fontName, size);
        }
      }
    };
    PdfGraphics2.prototype.setTransparency = function(arg1, arg2, arg3) {
      if (typeof arg2 === "undefined") {
        this.istransparencySet = true;
        this.setTransparency(arg1, arg1, PdfBlendMode.Normal);
      } else if (typeof arg2 === "number" && typeof arg3 === "undefined") {
        this.setTransparency(arg1, arg2, PdfBlendMode.Normal);
      } else {
        if (this.trasparencies == null) {
          this.trasparencies = new TemporaryDictionary();
        }
        var transp = null;
        var td = new TransparencyData(arg1, arg2, arg3);
        if (this.trasparencies.containsKey(td)) {
          transp = this.trasparencies.getValue(td);
        }
        if (transp == null) {
          transp = new PdfTransparency(arg1, arg2, arg3);
          this.trasparencies.setValue(td, transp);
        }
        var resources = this.getResources.getResources();
        var name_3 = resources.getName(transp);
        var sw = this.streamWriter;
        sw.setGraphicsState(name_3);
      }
    };
    PdfGraphics2.prototype.clipTranslateMargins = function(x, y, left, top, right, bottom) {
      if (x instanceof RectangleF && typeof y === "undefined") {
        this.clipBounds = x;
        this.pdfStreamWriter.writeComment("Clip margins.");
        this.pdfStreamWriter.appendRectangle(x);
        this.pdfStreamWriter.closePath();
        this.pdfStreamWriter.clipPath(false);
        this.pdfStreamWriter.writeComment("Translate co-ordinate system.");
        this.translateTransform(x.x, x.y);
      } else if (typeof x === "number") {
        var clipArea = new RectangleF(left, top, this.size.width - left - right, this.size.height - top - bottom);
        this.clipBounds = clipArea;
        this.pdfStreamWriter.writeComment("Clip margins.");
        this.pdfStreamWriter.appendRectangle(clipArea);
        this.pdfStreamWriter.closePath();
        this.pdfStreamWriter.clipPath(false);
        this.pdfStreamWriter.writeComment("Translate co-ordinate system.");
        this.translateTransform(x, y);
      }
    };
    PdfGraphics2.prototype.updateY = function(y) {
      return -y;
    };
    PdfGraphics2.prototype.translateTransform = function(offsetX, offsetY) {
      var matrix = new PdfTransformationMatrix();
      this.getTranslateTransform(offsetX, offsetY, matrix);
      this.pdfStreamWriter.modifyCtm(matrix);
      this.matrix.multiply(matrix);
    };
    PdfGraphics2.prototype.getTranslateTransform = function(x, y, input) {
      input.translate(x, this.updateY(y));
      return input;
    };
    PdfGraphics2.prototype.scaleTransform = function(scaleX, scaleY) {
      var matrix = new PdfTransformationMatrix();
      this.getScaleTransform(scaleX, scaleY, matrix);
      this.pdfStreamWriter.modifyCtm(matrix);
      this.matrix.multiply(matrix);
    };
    PdfGraphics2.prototype.getScaleTransform = function(x, y, input) {
      if (input == null) {
        input = new PdfTransformationMatrix();
      }
      input.scale(x, y);
      return input;
    };
    PdfGraphics2.prototype.rotateTransform = function(angle) {
      var matrix = new PdfTransformationMatrix();
      this.getRotateTransform(angle, matrix);
      this.pdfStreamWriter.modifyCtm(matrix);
      this.matrix.multiply(matrix);
    };
    PdfGraphics2.prototype.initializeCoordinates = function() {
      this.pdfStreamWriter.writeComment("Change co-ordinate system to left/top.");
      if (this.mediaBoxUpperRightBound !== -this.size.height) {
        if (this.cropBox == null) {
          if (this.mediaBoxUpperRightBound === this.size.height || this.mediaBoxUpperRightBound === 0) {
            this.translateTransform(0, this.updateY(this.size.height));
          } else {
            this.translateTransform(0, this.updateY(this.mediaBoxUpperRightBound));
          }
        }
      }
    };
    PdfGraphics2.prototype.getRotateTransform = function(angle, input) {
      if (input == null || typeof input === "undefined") {
        input = new PdfTransformationMatrix();
      }
      input.rotate(this.updateY(angle));
      return input;
    };
    PdfGraphics2.prototype.save = function() {
      var state = new PdfGraphicsState(this, this.matrix.clone());
      state.brush = this.currentBrush;
      state.pen = this.currentPen;
      state.font = this.currentFont;
      state.colorSpace = this.currentColorSpace;
      state.characterSpacing = this.previousCharacterSpacing;
      state.wordSpacing = this.previousWordSpacing;
      state.textScaling = this.previousTextScaling;
      state.textRenderingMode = this.previousTextRenderingMode;
      this.graphicsState.push(state);
      this.pdfStreamWriter.saveGraphicsState();
      return state;
    };
    PdfGraphics2.prototype.restore = function(state) {
      if (typeof state === "undefined") {
        if (this.graphicsState.length > 0) {
          this.doRestoreState();
        }
      } else {
        if (this.graphicsState.indexOf(state) !== -1) {
          for (; ; ) {
            if (this.graphicsState.length === 0) {
              break;
            }
            var popState = this.doRestoreState();
            if (popState === state) {
              break;
            }
          }
        }
      }
    };
    PdfGraphics2.prototype.doRestoreState = function() {
      var state = this.graphicsState.pop();
      this.transformationMatrix = state.matrix;
      this.currentBrush = state.brush;
      this.currentPen = state.pen;
      this.currentFont = state.font;
      this.currentColorSpace = state.colorSpace;
      this.previousCharacterSpacing = state.characterSpacing;
      this.previousWordSpacing = state.wordSpacing;
      this.previousTextScaling = state.textScaling;
      this.previousTextRenderingMode = state.textRenderingMode;
      this.pdfStreamWriter.restoreGraphicsState();
      return state;
    };
    PdfGraphics2.prototype.drawPath = function(pen, brush, path) {
      this._drawPath(pen, brush, path.pathPoints, path.pathTypes, path.fillMode);
    };
    PdfGraphics2.prototype._drawPath = function(pen, brush, pathPoints, pathTypes, fillMode) {
      if (brush instanceof PdfTilingBrush) {
        this.bCSInitialized = false;
        brush.graphics.colorSpace = this.colorSpace;
      } else if (brush instanceof PdfGradientBrush) {
        this.bCSInitialized = false;
        brush.colorSpace = this.colorSpace;
      }
      this.stateControl(pen, brush, null);
      this.buildUpPath(pathPoints, pathTypes);
      this.drawPathHelper(pen, brush, fillMode, false);
    };
    PdfGraphics2.prototype.drawArc = function(arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
      if (arg2 instanceof RectangleF) {
        this.drawArc(arg1, arg2.x, arg2.y, arg2.width, arg2.height, arg3, arg4);
      } else {
        if (arg7 !== 0) {
          this.stateControl(arg1, null, null);
          this.constructArcPath(arg2, arg3, arg2 + arg4, arg3 + arg5, arg6, arg7);
          this.drawPathHelper(arg1, null, false);
        }
      }
    };
    PdfGraphics2.prototype.buildUpPath = function(arg1, arg2) {
      var cnt = arg1.length;
      for (var i = 0; i < cnt; ++i) {
        var typeValue = 0;
        var point = arg1[i];
        switch (arg2[i] & PdfGraphics2.pathTypesValuesMask) {
          case PathPointType.Start:
            this.pdfStreamWriter.beginPath(point.x, point.y);
            break;
          case PathPointType.Bezier3:
            var p2 = new PointF(0, 0);
            var p3 = new PointF(0, 0);
            var result1 = this.getBezierPoints(arg1, arg2, i, p2, p3);
            this.pdfStreamWriter.appendBezierSegment(point, result1.p2, result1.p3);
            i = result1.i;
            break;
          case PathPointType.Line:
            this.pdfStreamWriter.appendLineSegment(point);
            break;
          default:
            throw new Error("ArithmeticException - Incorrect path formation.");
        }
        typeValue = arg2[i];
        this.checkFlags(typeValue);
      }
    };
    PdfGraphics2.prototype.getBezierPoints = function(points, types, i, p2, p3) {
      var errorMsg = "Malforming path.";
      ++i;
      if ((types[i] & PdfGraphics2.pathTypesValuesMask) === PathPointType.Bezier3) {
        p2 = points[i];
        ++i;
        if ((types[i] & PdfGraphics2.pathTypesValuesMask) === PathPointType.Bezier3) {
          p3 = points[i];
        } else {
          throw new Error("ArgumentException : errorMsg");
        }
      } else {
        throw new Error("ArgumentException : errorMsg");
      }
      return {
        i,
        p2,
        p3
      };
    };
    PdfGraphics2.prototype.checkFlags = function(type) {
      if ((type & PathPointType.CloseSubpath) === PathPointType.CloseSubpath) {
        this.pdfStreamWriter.closePath();
      }
    };
    PdfGraphics2.prototype.constructArcPath = function(x1, y1, x2, y2, startAng, sweepAngle) {
      var points = this.getBezierArc(x1, y1, x2, y2, startAng, sweepAngle);
      if (points.length === 0) {
        return;
      }
      var pt = [points[0], points[1], points[2], points[3], points[4], points[5], points[6], points[7]];
      this.pdfStreamWriter.beginPath(pt[0], pt[1]);
      var i = 0;
      for (i = 0; i < points.length; i = i + 8) {
        pt = [points[i], points[i + 1], points[i + 2], points[i + 3], points[i + 4], points[i + 5], points[i + 6], points[i + 7]];
        this.pdfStreamWriter.appendBezierSegment(pt[2], pt[3], pt[4], pt[5], pt[6], pt[7]);
      }
    };
    PdfGraphics2.prototype.getBezierArc = function(numX1, numY1, numX2, numY2, s1, e1) {
      if (numX1 > numX2) {
        var tmp = void 0;
        tmp = numX1;
        numX1 = numX2;
        numX2 = tmp;
      }
      if (numY2 > numY1) {
        var tmp = void 0;
        tmp = numY1;
        numY1 = numY2;
        numY2 = tmp;
      }
      var fragAngle1;
      var numFragments;
      if (Math.abs(e1) <= 90) {
        fragAngle1 = e1;
        numFragments = 1;
      } else {
        numFragments = Math.ceil(Math.abs(e1) / 90);
        fragAngle1 = e1 / numFragments;
      }
      var xcen = (numX1 + numX2) / 2;
      var ycen = (numY1 + numY2) / 2;
      var rx = (numX2 - numX1) / 2;
      var ry = (numY2 - numY1) / 2;
      var halfAng = fragAngle1 * (Math.PI / 360);
      var kappa = Math.abs(4 / 3 * (1 - Math.cos(halfAng)) / Math.sin(halfAng));
      var pointsList = [];
      for (var i = 0; i < numFragments; i++) {
        var thetaValue0 = (s1 + i * fragAngle1) * (Math.PI / 180);
        var thetaValue1 = (s1 + (i + 1) * fragAngle1) * (Math.PI / 180);
        var cos0 = Math.cos(thetaValue0);
        var cos1 = Math.cos(thetaValue1);
        var sin0 = Math.sin(thetaValue0);
        var sin1 = Math.sin(thetaValue1);
        if (fragAngle1 > 0) {
          pointsList.push(xcen + rx * cos0, ycen - ry * sin0, xcen + rx * (cos0 - kappa * sin0), ycen - ry * (sin0 + kappa * cos0), xcen + rx * (cos1 + kappa * sin1), ycen - ry * (sin1 - kappa * cos1), xcen + rx * cos1, ycen - ry * sin1);
        } else {
          pointsList.push(xcen + rx * cos0, ycen - ry * sin0, xcen + rx * (cos0 + kappa * sin0), ycen - ry * (sin0 - kappa * cos0), xcen + rx * (cos1 - kappa * sin1), ycen - ry * (sin1 + kappa * cos1), xcen + rx * cos1, ycen - ry * sin1);
        }
      }
      return pointsList;
    };
    PdfGraphics2.pathTypesValuesMask = 15;
    PdfGraphics2.transparencyObject = false;
    return PdfGraphics2;
  }()
);
var GetResourceEventHandler = (
  /** @class */
  function() {
    function GetResourceEventHandler2(sender) {
      this.sender = sender;
    }
    GetResourceEventHandler2.prototype.getResources = function() {
      return this.sender.getResources();
    };
    return GetResourceEventHandler2;
  }()
);
var PdfGraphicsState = (
  /** @class */
  function() {
    function PdfGraphicsState2(graphics, matrix) {
      this.internalTextRenderingMode = TextRenderingMode.Fill;
      this.internalCharacterSpacing = 0;
      this.internalWordSpacing = 0;
      this.internalTextScaling = 100;
      this.pdfColorSpace = PdfColorSpace.Rgb;
      if (typeof graphics !== "undefined") {
        this.pdfGraphics = graphics;
        var elements_1 = [];
        graphics.matrix.matrix.elements.forEach(function(element2) {
          elements_1.push(element2);
        });
        this.transformationMatrix = new PdfTransformationMatrix();
        this.transformationMatrix.matrix = new Matrix(elements_1);
      }
    }
    Object.defineProperty(PdfGraphicsState2.prototype, "graphics", {
      // Properties
      /**
       * Gets the parent `graphics object`.
       * @private
       */
      get: function() {
        return this.pdfGraphics;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphicsState2.prototype, "matrix", {
      /**
       * Gets the `current matrix`.
       * @private
       */
      get: function() {
        return this.transformationMatrix;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphicsState2.prototype, "characterSpacing", {
      /**
       * Gets or sets the `current character spacing`.
       * @private
       */
      get: function() {
        return this.internalCharacterSpacing;
      },
      set: function(value) {
        this.internalCharacterSpacing = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphicsState2.prototype, "wordSpacing", {
      /**
       * Gets or sets the `word spacing` value.
       * @private
       */
      get: function() {
        return this.internalWordSpacing;
      },
      set: function(value) {
        this.internalWordSpacing = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphicsState2.prototype, "textScaling", {
      /**
       * Gets or sets the `text scaling` value.
       * @private
       */
      get: function() {
        return this.internalTextScaling;
      },
      set: function(value) {
        this.internalTextScaling = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphicsState2.prototype, "pen", {
      /**
       * Gets or sets the `current pen` object.
       * @private
       */
      get: function() {
        return this.pdfPen;
      },
      set: function(value) {
        this.pdfPen = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphicsState2.prototype, "brush", {
      /**
       * Gets or sets the `brush`.
       * @private
       */
      get: function() {
        return this.pdfBrush;
      },
      set: function(value) {
        this.pdfBrush = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphicsState2.prototype, "font", {
      /**
       * Gets or sets the `current font` object.
       * @private
       */
      get: function() {
        return this.pdfFont;
      },
      set: function(value) {
        this.pdfFont = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphicsState2.prototype, "colorSpace", {
      /**
       * Gets or sets the `current color space` value.
       * @private
       */
      get: function() {
        return this.pdfColorSpace;
      },
      set: function(value) {
        this.pdfColorSpace = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphicsState2.prototype, "textRenderingMode", {
      /**
       * Gets or sets the `text rendering mode`.
       * @private
       */
      get: function() {
        return this.internalTextRenderingMode;
      },
      set: function(value) {
        this.internalTextRenderingMode = value;
      },
      enumerable: true,
      configurable: true
    });
    return PdfGraphicsState2;
  }()
);
var TransparencyData = (
  /** @class */
  /* @__PURE__ */ function() {
    function TransparencyData2(alphaPen, alphaBrush, blendMode) {
      this.alphaPen = alphaPen;
      this.alphaBrush = alphaBrush;
      this.blendMode = blendMode;
    }
    return TransparencyData2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-page-layer.js
var PdfPageLayer = (
  /** @class */
  function() {
    function PdfPageLayer2(page, streamClipPageTemplates) {
      this.pdfColorSpace = PdfColorSpace.Rgb;
      this.isVisible = true;
      this.sublayer = false;
      this.contentLength = 0;
      this.dictionaryProperties = new DictionaryProperties();
      if (page === null) {
        throw new Error("ArgumentNullException:page");
      }
      this.pdfPage = page;
      this.clipPageTemplates = true;
      if (typeof streamClipPageTemplates === "undefined") {
        this.content = new PdfStream();
      } else if (streamClipPageTemplates instanceof PdfStream || streamClipPageTemplates === null) {
        if (streamClipPageTemplates === null) {
          throw new Error("ArgumentNullException:stream");
        }
        this.content = streamClipPageTemplates;
      } else {
        this.content = new PdfStream();
        this.clipPageTemplates = streamClipPageTemplates;
      }
    }
    Object.defineProperty(PdfPageLayer2.prototype, "colorSpace", {
      // Properties
      /**
       * Get or set the `color space`.
       * @private
       */
      get: function() {
        return this.pdfColorSpace;
      },
      set: function(value) {
        this.pdfColorSpace = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageLayer2.prototype, "page", {
      /**
       * Gets parent `page` of the layer.
       * @private
       */
      get: function() {
        return this.pdfPage;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageLayer2.prototype, "layerId", {
      /**
       * Gets and Sets the `id of the layer`.
       * @private
       */
      get: function() {
        return this.layerid;
      },
      set: function(value) {
        this.layerid = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageLayer2.prototype, "name", {
      /**
       * Gets or sets the `name` of the layer.
       * @private
       */
      get: function() {
        return this.layerName;
      },
      set: function(value) {
        this.layerName = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageLayer2.prototype, "visible", {
      /**
       * Gets or sets the `visibility` of the layer.
       * @private
       */
      get: function() {
        return this.isVisible;
      },
      set: function(value) {
        this.isVisible = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageLayer2.prototype, "graphics", {
      /**
       * Gets `Graphics` context of the layer, used to draw various graphical content on layer.
       * @private
       */
      get: function() {
        if (this.pdfGraphics == null) {
          this.initializeGraphics(this.page);
        }
        return this.pdfGraphics;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageLayer2.prototype, "layers", {
      /**
       * Gets the collection of `PdfPageLayer`, this collection handle by the class 'PdfPageLayerCollection'.
       * @private
       */
      get: function() {
        if (this.layer == null) {
          this.layer = new PdfPageLayerCollection(this.page);
          this.layer.sublayer = true;
          return this.layer;
        } else {
          return this.layer;
        }
      },
      enumerable: true,
      configurable: true
    });
    PdfPageLayer2.prototype.add = function() {
      var layer = new PdfPageLayer2(this.pdfPage);
      layer.name = "";
      return layer;
    };
    PdfPageLayer2.prototype.sign = function(number) {
      if (number === 0) {
        return 0;
      } else if (number > 0) {
        return 1;
      } else {
        return -1;
      }
    };
    PdfPageLayer2.prototype.initializeGraphics = function(page) {
      var oPage = page;
      var gr = new GetResourceEventHandler(this.page);
      var cropBox = null;
      this.pdfGraphics = new PdfGraphics(page.size, gr, this.content);
      this.pdfGraphics.mediaBoxUpperRightBound = 0;
      if (oPage != null) {
        var sc = oPage.section.parent;
        if (sc != null) {
          this.pdfGraphics.colorSpace = sc.document.colorSpace;
          this.colorSpace = sc.document.colorSpace;
        }
      }
      var isSame = this.sign(page.origin.y) === this.sign(page.origin.x);
      if (page.origin.x >= 0 && page.origin.y >= 0 || !isSame) {
        this.pdfGraphics.initializeCoordinates();
      } else {
      }
      var clipRect = oPage.section.getActualBounds(oPage, true);
      var margins = oPage.section.pageSettings.margins;
      if (this.clipPageTemplates) {
        if (page.origin.x >= 0 && page.origin.y >= 0) {
          this.pdfGraphics.clipTranslateMargins(clipRect);
        }
      } else {
        this.graphics.clipTranslateMargins(clipRect.x, clipRect.y, margins.left, margins.top, margins.right, margins.bottom);
      }
      this.pdfGraphics.setLayer(this);
    };
    Object.defineProperty(PdfPageLayer2.prototype, "element", {
      // IPdfWrapper Members
      /**
       * Gets the wrapped `element`.
       * @private
       */
      get: function() {
        return this.content;
      },
      enumerable: true,
      configurable: true
    });
    return PdfPageLayer2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/general/pdf-collection.js
var PdfCollection = (
  /** @class */
  function() {
    function PdfCollection2() {
    }
    Object.defineProperty(PdfCollection2.prototype, "count", {
      // Properties
      /**
       * Gets the `Count` of stored objects.
       * @private
       */
      get: function() {
        if (typeof this.collection === "undefined") {
          this.collection = [];
        }
        return this.collection.length;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfCollection2.prototype, "list", {
      /**
       * Gets the `list` of stored objects.
       * @private
       */
      get: function() {
        if (typeof this.collection === "undefined") {
          this.collection = [];
        }
        return this.collection;
      },
      enumerable: true,
      configurable: true
    });
    return PdfCollection2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-page-layer-collection.js
var __extends66 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfPageLayerCollection = (
  /** @class */
  function(_super) {
    __extends66(PdfPageLayerCollection2, _super);
    function PdfPageLayerCollection2(page) {
      var _this = _super.call(this) || this;
      _this.parentLayerCount = 0;
      _this.sublayer = false;
      _this.optionalContent = new PdfDictionary();
      if (page instanceof PdfPageBase) {
        _this.page = page;
        var lPage = page;
        _this.parseLayers(lPage);
      }
      return _this;
    }
    PdfPageLayerCollection2.prototype.items = function(index, value) {
      if (typeof index === "number" && typeof value === "undefined") {
        var obj = this.list[index];
        return obj;
      } else {
        if (value == null) {
          throw new Error("ArgumentNullException: layer");
        }
        if (value.page !== this.page) {
          throw new Error("ArgumentException: The layer belongs to another page");
        }
      }
    };
    PdfPageLayerCollection2.prototype.add = function(firstArgument, secondArgument) {
      if (typeof firstArgument === "undefined") {
        var layer = new PdfPageLayer(this.page);
        layer.name = "";
        this.add(layer);
        return layer;
      } else if (firstArgument instanceof PdfPageLayer) {
        var index = this.list.push(firstArgument);
        this.addLayer(index, firstArgument);
        return index;
      } else {
        return 0;
      }
    };
    PdfPageLayerCollection2.prototype.addLayer = function(index, layer) {
      var reference = new PdfReferenceHolder(layer);
      this.page.contents.add(reference);
    };
    PdfPageLayerCollection2.prototype.insert = function(index, layer) {
      var list = [];
      var length = this.list.length;
      for (var i = index; i < length; i++) {
        list.push(this.list.pop());
      }
      this.list.push(layer);
      for (var i = 0; i < list.length; i++) {
        this.list.push(list[i]);
      }
      this.insertLayer(index, layer);
    };
    PdfPageLayerCollection2.prototype.insertLayer = function(index, layer) {
      if (layer == null) {
        throw new Error("ArgumentNullException:layer");
      }
      var reference = new PdfReferenceHolder(layer);
      this.page.contents.insert(index, reference);
    };
    PdfPageLayerCollection2.prototype.parseLayers = function(loadedPage) {
      var contents = this.page.contents;
      var resource = this.page.getResources();
      var crossTable = null;
      var ocproperties = null;
      var propertie = null;
      var isLayerAdded = false;
      crossTable = loadedPage.crossTable;
      var saveStream = new PdfStream();
      var restoreStream = new PdfStream();
      var saveState = "q";
      var newLine = "\n";
      var restoreState = "Q";
      var saveData = [];
      saveData.push(saveState);
      saveStream.data = saveData;
      contents.insert(0, new PdfReferenceHolder(saveStream));
      saveData = [];
      saveData.push(restoreState);
      restoreStream.data = saveData;
      contents.insert(contents.count, new PdfReferenceHolder(restoreStream));
    };
    PdfPageLayerCollection2.prototype.indexOf = function(layer) {
      if (layer == null) {
        throw new Error("ArgumentNullException: layer");
      }
      var index = this.list.indexOf(layer);
      return index;
    };
    return PdfPageLayerCollection2;
  }(PdfCollection)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-page-base.js
var PdfPageBase = (
  /** @class */
  function() {
    function PdfPageBase2(dictionary) {
      this.defLayerIndex = -1;
      this.modified = false;
      this.dictionaryProperties = new DictionaryProperties();
      this.pageDictionary = dictionary;
    }
    Object.defineProperty(PdfPageBase2.prototype, "section", {
      //Properties
      /**
       * Gets the `section` of a page.
       * @private
       */
      get: function() {
        return this.pdfSection;
      },
      set: function(value) {
        this.pdfSection = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageBase2.prototype, "dictionary", {
      /**
       * Gets the page `dictionary`.
       * @private
       */
      get: function() {
        return this.pageDictionary;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageBase2.prototype, "element", {
      /**
       * Gets the wrapped `element`.
       * @private
       */
      get: function() {
        return this.pageDictionary;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageBase2.prototype, "defaultLayer", {
      /**
       * Gets the `default layer` of the page (Read only).
       * @private
       */
      get: function() {
        var layer = this.layers;
        var index = this.defaultLayerIndex;
        var returnlayer = layer.items(index);
        return returnlayer;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageBase2.prototype, "defaultLayerIndex", {
      /**
       * Gets or sets `index of the default layer`.
       * @private
       */
      get: function() {
        if (this.layerCollection.count === 0 || this.defLayerIndex === -1) {
          var layer = this.layerCollection.add();
          this.defLayerIndex = this.layerCollection.indexOf(layer);
        }
        return this.defLayerIndex;
      },
      /**
       * Gets or sets` index of the default layer`.
       * @private
       */
      set: function(value) {
        if (value < 0 || value > this.layers.count - 1) {
          throw new Error("ArgumentOutOfRangeException : value, Index can not be less 0 and greater Layers.Count - 1");
        } else {
          this.defLayerIndex = value;
          this.modified = true;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageBase2.prototype, "layers", {
      /**
       * Gets the collection of the page's `layers` (Read only).
       * @private
       */
      get: function() {
        if (this.layerCollection == null || typeof this.layerCollection === "undefined") {
          this.layerCollection = new PdfPageLayerCollection(this);
        }
        return this.layerCollection;
      },
      enumerable: true,
      configurable: true
    });
    PdfPageBase2.prototype.getResources = function() {
      if (this.resources == null) {
        this.resources = new PdfResources();
        this.dictionary.items.setValue(this.dictionaryProperties.resources, this.resources);
      }
      return this.resources;
    };
    Object.defineProperty(PdfPageBase2.prototype, "contents", {
      /**
       * Gets `array of page's content`.
       * @private
       */
      get: function() {
        var obj = this.pageDictionary.items.getValue(this.dictionaryProperties.contents);
        var contents = obj;
        var rh = obj;
        if (contents == null) {
          contents = new PdfArray();
          this.pageDictionary.items.setValue(this.dictionaryProperties.contents, contents);
        }
        return contents;
      },
      enumerable: true,
      configurable: true
    });
    PdfPageBase2.prototype.setResources = function(res) {
      this.resources = res;
      this.dictionary.items.setValue(this.dictionaryProperties.resources, this.resources);
      this.modified = true;
    };
    return PdfPageBase2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/annotations/annotation-collection.js
var PdfAnnotationCollection = (
  /** @class */
  function() {
    function PdfAnnotationCollection2(page) {
      this.alreadyExistsAnnotationError = "This annotatation had been already added to page";
      this.missingAnnotationException = "Annotation is not contained in collection.";
      this.dictionaryProperties = new DictionaryProperties();
      this.internalAnnotations = new PdfArray();
      this.lists = [];
      if (typeof page !== "undefined") {
        this.page = page;
      }
    }
    Object.defineProperty(PdfAnnotationCollection2.prototype, "annotations", {
      /**
       * Gets the `PdfAnnotation` object at the specified index. Read-Only.
       * @private
       */
      get: function() {
        return this.internalAnnotations;
      },
      set: function(value) {
        this.internalAnnotations = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfAnnotationCollection2.prototype.add = function(annotation) {
      this.doAdd(annotation);
    };
    PdfAnnotationCollection2.prototype.doAdd = function(annotation) {
      if (typeof annotation.destination !== "undefined") {
        var layout = new PdfStringLayouter();
        var layoutResult = layout.layout(annotation.text, annotation.font, annotation.stringFormat, new SizeF(annotation.bounds.width, 0), false, new SizeF(0, 0));
        var lastPosition = annotation.bounds.y;
        if (layoutResult.lines.length === 1) {
          var size = annotation.font.measureString(layoutResult.lines[0].text);
          annotation.bounds = new RectangleF(new PointF(annotation.bounds.x, lastPosition), size);
          annotation.text = layoutResult.lines[0].text;
          this.page.graphics.drawString(annotation.text, annotation.font, null, annotation.brush, annotation.bounds.x, annotation.bounds.y, annotation.bounds.width, annotation.bounds.height, null);
          annotation.setPage(this.page);
          this.setColor(annotation);
          this.internalAnnotations.add(new PdfReferenceHolder(annotation));
          this.lists.push(annotation);
        } else {
          for (var i = 0; i < layoutResult.lines.length; i++) {
            var size = annotation.font.measureString(layoutResult.lines[i].text);
            if (i === 0) {
              annotation.bounds = new RectangleF(annotation.bounds.x, lastPosition, size.width, size.height);
              annotation.text = layoutResult.lines[i].text;
              this.page.graphics.drawString(annotation.text, annotation.font, null, annotation.brush, annotation.bounds.x, lastPosition, size.width, size.height, null);
              annotation.setPage(this.page);
              this.setColor(annotation);
              this.internalAnnotations.add(new PdfReferenceHolder(annotation));
              this.lists.push(annotation);
              lastPosition += annotation.bounds.height;
            } else {
              var annot = annotation.clone();
              annot.bounds = new RectangleF(new PointF(annotation.bounds.x, lastPosition), size);
              annot.text = layoutResult.lines[i].text;
              this.page.graphics.drawString(annot.text, annot.font, null, annot.brush, annot.bounds.x, annot.bounds.y, annot.bounds.width, annot.bounds.height, null);
              annot.setPage(this.page);
              this.setColor(annot);
              this.internalAnnotations.add(new PdfReferenceHolder(annot));
              this.lists.push(annot);
              lastPosition += annot.bounds.height;
            }
          }
        }
      } else {
        annotation.setPage(this.page);
        this.internalAnnotations.add(new PdfReferenceHolder(annotation));
        return this.lists.push(annotation);
      }
    };
    PdfAnnotationCollection2.prototype.setColor = function(annotation) {
      var cs = PdfColorSpace.Rgb;
      var colours = annotation.color.toArray(cs);
      annotation.dictionary.items.setValue(this.dictionaryProperties.c, colours);
    };
    Object.defineProperty(PdfAnnotationCollection2.prototype, "element", {
      // IPdfWrapper Members
      /**
       * Gets the `Element` representing this object.
       * @private
       */
      get: function() {
        return this.internalAnnotations;
      },
      enumerable: true,
      configurable: true
    });
    return PdfAnnotationCollection2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-page.js
var __extends67 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfPage = (
  /** @class */
  function(_super) {
    __extends67(PdfPage2, _super);
    function PdfPage2() {
      var _this = _super.call(this, new PdfDictionary()) || this;
      _this.annotationCollection = null;
      _this.beginSave = null;
      _this.initialize();
      return _this;
    }
    Object.defineProperty(PdfPage2.prototype, "document", {
      //Properties
      /**
       * Gets current `document`.
       * @private
       */
      get: function() {
        if (this.section !== null && this.section.parent !== null) {
          return this.section.parent.document;
        } else {
          return null;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPage2.prototype, "graphics", {
      /**
       * Get the current `graphics`.
       * ```typescript
       * // create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // add a new page to the document
       * let page1 : PdfPage = document.pages.add();
       * //
       * // get graphics
       * let graphics : PdfGraphics = page1.graphics;
       * //
       * // set the font
       * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);
       * // create black brush
       * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));
       * // draw the text
       * graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));
       * // save the document
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        var result = this.defaultLayer.graphics;
        result.currentPage = this;
        return result;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPage2.prototype, "crossTable", {
      /**
       * Gets the `cross table`.
       * @private
       */
      get: function() {
        if (this.section === null) {
          throw new Error("PdfDocumentException : Page is not created");
        }
        return this.section.parent === null ? this.section.parentDocument.crossTable : this.section.parent.document.crossTable;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPage2.prototype, "size", {
      /**
       * Gets the size of the PDF page- Read only.
       * @public
       */
      get: function() {
        return this.section.pageSettings.size;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPage2.prototype, "origin", {
      /**
       * Gets the `origin` of the page.
       * @private
       */
      get: function() {
        return this.section.pageSettings.origin;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPage2.prototype, "annotations", {
      /**
       * Gets a collection of the `annotations` of the page- Read only.
       * @private
       */
      get: function() {
        if (this.annotationCollection == null) {
          this.annotationCollection = new PdfAnnotationCollection(this);
          this.dictionary.items.setValue(this.dictionaryProperties.annots, this.annotationCollection.element);
          this.annotationCollection.annotations = this.dictionary.items.getValue(this.dictionaryProperties.annots);
        }
        return this.annotationCollection;
      },
      enumerable: true,
      configurable: true
    });
    PdfPage2.prototype.initialize = function() {
      this.dictionary.items.setValue(this.dictionaryProperties.type, new PdfName("Page"));
      this.dictionary.pageBeginDrawTemplate = new SaveTemplateEventHandler(this);
    };
    PdfPage2.prototype.setSection = function(section) {
      this.section = section;
      this.dictionary.items.setValue(this.dictionaryProperties.parent, new PdfReferenceHolder(section));
    };
    PdfPage2.prototype.resetProgress = function() {
      this.isProgressOn = false;
    };
    PdfPage2.prototype.getClientSize = function() {
      var returnValue = this.section.getActualBounds(this, true);
      return new SizeF(returnValue.width, returnValue.height);
    };
    PdfPage2.prototype.pageBeginSave = function() {
      var doc = this.document;
      if (typeof doc !== void 0 && doc != null) {
        this.drawPageTemplates(doc);
      }
      if (this.beginSave != null && typeof this.beginSave !== "undefined") {
        this.beginSave(this);
      }
    };
    PdfPage2.prototype.drawPageTemplates = function(document2) {
      var hasBackTemplates = this.section.containsTemplates(document2, this, false);
      if (hasBackTemplates) {
        var backLayer = new PdfPageLayer(this, false);
        this.layers.insert(0, backLayer);
        this.section.drawTemplates(this, backLayer, document2, false);
        if (backLayer.graphics !== null && typeof backLayer.graphics !== "undefined") {
          for (var i = 0; i < backLayer.graphics.automaticFields.automaticFields.length; i++) {
            var fieldInfo = backLayer.graphics.automaticFields.automaticFields[i];
            fieldInfo.field.performDraw(backLayer.graphics, fieldInfo.location, fieldInfo.scalingX, fieldInfo.scalingY);
          }
        }
      }
      var hasFrontTemplates = this.section.containsTemplates(document2, this, true);
      if (hasFrontTemplates) {
        var frontLayer = new PdfPageLayer(this, false);
        this.layers.add(frontLayer);
        this.section.drawTemplates(this, frontLayer, document2, true);
      }
    };
    return PdfPage2;
  }(PdfPageBase)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/page-added-event-arguments.js
var PageAddedEventArgs = (
  /** @class */
  function() {
    function PageAddedEventArgs2(page) {
      if (typeof page !== "undefined") {
        this.pdfPage = page;
      } else {
        this.pdfPage = null;
      }
    }
    Object.defineProperty(PageAddedEventArgs2.prototype, "page", {
      /**
       * Gets the `newly added page`.
       * @private
       */
      get: function() {
        return this.pdfPage;
      },
      enumerable: true,
      configurable: true
    });
    return PageAddedEventArgs2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-section-page-collection.js
var PdfSectionPageCollection = (
  /** @class */
  function() {
    function PdfSectionPageCollection2(section) {
      this.pdfSection = null;
      if (section == null) {
        throw Error('ArgumentNullException("section")');
      }
      this.section = section;
    }
    Object.defineProperty(PdfSectionPageCollection2.prototype, "section", {
      // Properties
      /**
       * Gets the `PdfPage` at the specified index.
       * @private
       */
      get: function() {
        return this.pdfSection;
      },
      set: function(value) {
        this.pdfSection = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfSectionPageCollection2.prototype.contains = function(page) {
      return this.section.contains(page);
    };
    PdfSectionPageCollection2.prototype.remove = function(page) {
      this.section.remove(page);
    };
    PdfSectionPageCollection2.prototype.add = function() {
      return this.section.add();
    };
    return PdfSectionPageCollection2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/pdf-document-template.js
var PdfDocumentTemplate = (
  /** @class */
  function() {
    function PdfDocumentTemplate2() {
    }
    Object.defineProperty(PdfDocumentTemplate2.prototype, "left", {
      // private m_stamps : PdfStampCollection;
      // Properties
      /**
       * `Left` page template object.
       * @public
       */
      get: function() {
        return this.leftTemplate;
      },
      set: function(value) {
        this.leftTemplate = this.checkElement(value, TemplateType.Left);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentTemplate2.prototype, "top", {
      /**
       * `Top` page template object.
       * @public
       */
      get: function() {
        return this.topTemplate;
      },
      set: function(value) {
        this.topTemplate = this.checkElement(value, TemplateType.Top);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentTemplate2.prototype, "right", {
      /**
       * `Right` page template object.
       * @public
       */
      get: function() {
        return this.rightTemplate;
      },
      set: function(value) {
        this.rightTemplate = this.checkElement(value, TemplateType.Right);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentTemplate2.prototype, "bottom", {
      /**
       * `Bottom` page template object.
       * @public
       */
      get: function() {
        return this.bottomTemplate;
      },
      set: function(value) {
        this.bottomTemplate = this.checkElement(value, TemplateType.Bottom);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentTemplate2.prototype, "EvenLeft", {
      /**
       * `EvenLeft` page template object.
       * @public
       */
      get: function() {
        return this.evenLeft;
      },
      set: function(value) {
        this.evenLeft = this.checkElement(value, TemplateType.Left);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentTemplate2.prototype, "EvenTop", {
      /**
       * `EvenTop` page template object.
       * @public
       */
      get: function() {
        return this.evenTop;
      },
      set: function(value) {
        this.evenTop = this.checkElement(value, TemplateType.Top);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentTemplate2.prototype, "EvenRight", {
      /**
       * `EvenRight` page template object.
       * @public
       */
      get: function() {
        return this.evenRight;
      },
      set: function(value) {
        this.evenRight = this.checkElement(value, TemplateType.Right);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentTemplate2.prototype, "EvenBottom", {
      /**
       * `EvenBottom` page template object.
       * @public
       */
      get: function() {
        return this.evenBottom;
      },
      set: function(value) {
        this.evenBottom = this.checkElement(value, TemplateType.Bottom);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentTemplate2.prototype, "OddLeft", {
      /**
       * `OddLeft` page template object.
       * @public
       */
      get: function() {
        return this.oddLeft;
      },
      set: function(value) {
        this.oddLeft = this.checkElement(value, TemplateType.Left);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentTemplate2.prototype, "OddTop", {
      /**
       * `OddTop` page template object.
       * @public
       */
      get: function() {
        return this.oddTop;
      },
      set: function(value) {
        this.oddTop = this.checkElement(value, TemplateType.Top);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentTemplate2.prototype, "OddRight", {
      /**
       * `OddRight` page template object.
       * @public
       */
      get: function() {
        return this.oddRight;
      },
      set: function(value) {
        this.oddRight = this.checkElement(value, TemplateType.Right);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentTemplate2.prototype, "OddBottom", {
      /**
       * `OddBottom` page template object.
       * @public
       */
      get: function() {
        return this.oddBottom;
      },
      set: function(value) {
        this.oddBottom = this.checkElement(value, TemplateType.Bottom);
      },
      enumerable: true,
      configurable: true
    });
    PdfDocumentTemplate2.prototype.getLeft = function(page) {
      if (page == null) {
        throw new Error("ArgumentNullException:page");
      }
      var template = null;
      var even = this.isEven(page);
      if (even) {
        template = this.EvenLeft != null ? this.EvenLeft : this.left;
      } else {
        template = this.OddLeft != null ? this.OddLeft : this.left;
      }
      return template;
    };
    PdfDocumentTemplate2.prototype.getTop = function(page) {
      if (page == null) {
        throw new Error("ArgumentNullException:page");
      }
      var template = null;
      var even = this.isEven(page);
      if (even) {
        template = this.EvenTop != null ? this.EvenTop : this.top;
      } else {
        template = this.OddTop != null ? this.OddTop : this.top;
      }
      return template;
    };
    PdfDocumentTemplate2.prototype.getRight = function(page) {
      if (page == null) {
        throw new Error("ArgumentNullException:page");
      }
      var template = null;
      var even = this.isEven(page);
      if (even) {
        template = this.EvenRight != null ? this.EvenRight : this.right;
      } else {
        template = this.OddRight != null ? this.OddRight : this.right;
      }
      return template;
    };
    PdfDocumentTemplate2.prototype.getBottom = function(page) {
      if (page == null) {
        throw new Error("ArgumentNullException:page");
      }
      var template = null;
      var even = this.isEven(page);
      if (even) {
        template = this.EvenBottom != null ? this.EvenBottom : this.bottom;
      } else {
        template = this.OddBottom != null ? this.OddBottom : this.bottom;
      }
      return template;
    };
    PdfDocumentTemplate2.prototype.isEven = function(page) {
      var pages = page.section.document.pages;
      var index = 0;
      if (pages.pageCollectionIndex.containsKey(page)) {
        index = pages.pageCollectionIndex.getValue(page) + 1;
      } else {
        index = pages.indexOf(page) + 1;
      }
      var even = index % 2 === 0;
      return even;
    };
    PdfDocumentTemplate2.prototype.checkElement = function(templateElement, type) {
      if (templateElement != null) {
        if (typeof templateElement.type !== "undefined" && templateElement.type !== TemplateType.None) {
          throw new Error("NotSupportedException:Can not reassign the template element. Please, create new one.");
        }
        templateElement.type = type;
      }
      return templateElement;
    };
    return PdfDocumentTemplate2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-section-templates.js
var __extends68 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfSectionTemplate = (
  /** @class */
  function(_super) {
    __extends68(PdfSectionTemplate2, _super);
    function PdfSectionTemplate2() {
      var _this = _super.call(this) || this;
      _this.leftValue = _this.topValue = _this.rightValue = _this.bottomValue = _this.stampValue = true;
      return _this;
    }
    Object.defineProperty(PdfSectionTemplate2.prototype, "applyDocumentLeftTemplate", {
      // Properties
      /**
       * Gets or sets value indicating whether parent `Left page template should be used or not`.
       * @private
       */
      get: function() {
        return this.leftValue;
      },
      set: function(value) {
        this.leftValue = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSectionTemplate2.prototype, "applyDocumentTopTemplate", {
      /**
       * Gets or sets value indicating whether parent `Top page template should be used or not`.
       * @private
       */
      get: function() {
        return this.topValue;
      },
      set: function(value) {
        this.topValue = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSectionTemplate2.prototype, "applyDocumentRightTemplate", {
      /**
       * Gets or sets value indicating whether parent `Right page template should be used or not`.
       * @private
       */
      get: function() {
        return this.rightValue;
      },
      set: function(value) {
        this.rightValue = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSectionTemplate2.prototype, "applyDocumentBottomTemplate", {
      /**
       * Gets or sets value indicating whether parent `Bottom page template should be used or not`.
       * @private
       */
      get: function() {
        return this.bottomValue;
      },
      set: function(value) {
        this.bottomValue = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSectionTemplate2.prototype, "applyDocumentStamps", {
      /**
       * Gets or sets value indicating whether the `stamp value` is true or not.
       * @private
       */
      get: function() {
        return this.stampValue;
      },
      set: function(value) {
        this.stampValue = value;
      },
      enumerable: true,
      configurable: true
    });
    return PdfSectionTemplate2;
  }(PdfDocumentTemplate)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-section.js
var PdfSection = (
  /** @class */
  function() {
    function PdfSection2(document2, pageSettings) {
      this.pageAdded = new PageAddedEventArgs();
      this.pdfPages = [];
      this.dictionaryProperties = new DictionaryProperties();
      this.pdfDocument = document2;
      if (typeof pageSettings === "undefined") {
        this.settings = document2.pageSettings.clone();
        this.initialSettings = this.settings.clone();
      } else {
        this.settings = pageSettings.clone();
        this.initialSettings = this.settings.clone();
      }
      this.initialize();
    }
    Object.defineProperty(PdfSection2.prototype, "parent", {
      //Property
      /**
       * Gets or sets the `parent`.
       * @private
       */
      get: function() {
        return this.sectionCollection;
      },
      set: function(value) {
        this.sectionCollection = value;
        this.section.items.setValue(this.dictionaryProperties.parent, new PdfReferenceHolder(value));
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSection2.prototype, "parentDocument", {
      /**
       * Gets the `parent document`.
       * @private
       */
      get: function() {
        return this.pdfDocument;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSection2.prototype, "pageSettings", {
      /**
       * Gets or sets the `page settings` of the section.
       * @private
       */
      get: function() {
        return this.settings;
      },
      set: function(value) {
        if (value != null) {
          this.settings = value;
        } else {
          throw Error("Value can not be null.");
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSection2.prototype, "element", {
      /**
       * Gets the wrapped `element`.
       * @private
       */
      get: function() {
        return this.section;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSection2.prototype, "count", {
      /**
       * Gets the `count` of the pages in the section.
       * @private
       */
      get: function() {
        return this.pagesReferences.count;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSection2.prototype, "template", {
      /**
       * Gets or sets a `template` for the pages in the section.
       * @private
       */
      get: function() {
        if (this.pageTemplate == null) {
          this.pageTemplate = new PdfSectionTemplate();
        }
        return this.pageTemplate;
      },
      set: function(value) {
        this.pageTemplate = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSection2.prototype, "document", {
      /**
       * Gets the `document`.
       * @private
       */
      get: function() {
        return this.sectionCollection.document;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSection2.prototype, "pages", {
      /**
       * Gets the collection of `pages` in a section (Read only)
       * @private
       */
      get: function() {
        if (this.pagesCollection == null || typeof this.pagesCollection === "undefined") {
          this.pagesCollection = new PdfSectionPageCollection(this);
        }
        return this.pagesCollection;
      },
      enumerable: true,
      configurable: true
    });
    PdfSection2.prototype.getPages = function() {
      return this.pdfPages;
    };
    PdfSection2.prototype.pointToNativePdf = function(page, point) {
      var bounds = this.getActualBounds(page, true);
      point.x += bounds.x;
      point.y = this.pageSettings.height - point.y;
      return point;
    };
    PdfSection2.prototype.setPageSettings = function(settings) {
      this.settings = settings;
      this.state.orientation = settings.orientation;
      this.state.rotate = settings.rotate;
      this.state.size = settings.size;
      this.state.origin = settings.origin;
    };
    PdfSection2.prototype.initialize = function() {
      this.pagesReferences = new PdfArray();
      this.section = new PdfDictionary();
      this.state = new PageSettingsState(this.pdfDocument);
      this.section.sectionBeginSave = new SaveSectionEventHandler(this, this.state);
      this.pageCount = new PdfNumber(0);
      this.section.items.setValue(this.dictionaryProperties.count, this.pageCount);
      this.section.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.pages));
      this.section.items.setValue(this.dictionaryProperties.kids, this.pagesReferences);
    };
    PdfSection2.prototype.containsTemplates = function(document2, page, foreground) {
      var documentHeaders = this.getDocumentTemplates(document2, page, foreground);
      var sectionTemplates = this.getSectionTemplates(page, foreground);
      return documentHeaders.length > 0 || sectionTemplates.length > 0;
    };
    PdfSection2.prototype.getDocumentTemplates = function(document2, page, foreground) {
      var templates = [];
      if (this.template.applyDocumentTopTemplate && document2.template.getTop(page) != null) {
        if (!(document2.template.getTop(page).foreground || foreground) || document2.template.getTop(page).foreground && foreground) {
          templates.push(document2.template.getTop(page));
        }
      }
      if (this.template.applyDocumentBottomTemplate && document2.template.getBottom(page) != null) {
        if (!(document2.template.getBottom(page).foreground || foreground) || document2.template.getBottom(page).foreground && foreground) {
          templates.push(document2.template.getBottom(page));
        }
      }
      if (this.template.applyDocumentLeftTemplate && document2.template.getLeft(page) != null) {
        if (!(document2.template.getLeft(page).foreground || foreground) || document2.template.getLeft(page).foreground && foreground) {
          templates.push(document2.template.getLeft(page));
        }
      }
      if (this.template.applyDocumentRightTemplate && document2.template.getRight(page) != null) {
        if (!(document2.template.getRight(page).foreground || foreground) || document2.template.getRight(page).foreground && foreground) {
          templates.push(document2.template.getRight(page));
        }
      }
      return templates;
    };
    PdfSection2.prototype.getSectionTemplates = function(page, foreground) {
      var templates = [];
      if (this.template.getTop(page) != null) {
        var pageTemplate = this.template.getTop(page);
        if (!(pageTemplate.foreground || foreground) || pageTemplate.foreground && foreground) {
          templates.push(pageTemplate);
        }
      }
      if (this.template.getBottom(page) != null) {
        var pageTemplate = this.template.getBottom(page);
        if (!(pageTemplate.foreground || foreground) || pageTemplate.foreground && foreground) {
          templates.push(pageTemplate);
        }
      }
      if (this.template.getLeft(page) != null) {
        var pageTemplate = this.template.getLeft(page);
        if (!(pageTemplate.foreground || foreground) || pageTemplate.foreground && foreground) {
          templates.push(pageTemplate);
        }
      }
      if (this.template.getRight(page) != null) {
        var pageTemplate = this.template.getRight(page);
        if (!(pageTemplate.foreground || foreground) || pageTemplate.foreground && foreground) {
          templates.push(pageTemplate);
        }
      }
      return templates;
    };
    PdfSection2.prototype.add = function(page) {
      if (typeof page === "undefined") {
        var page_1 = new PdfPage();
        this.add(page_1);
        return page_1;
      } else {
        var r = this.checkPresence(page);
        this.pdfPages.push(page);
        this.pagesReferences.add(r);
        page.setSection(this);
        page.resetProgress();
        this.pageAddedMethod(page);
      }
    };
    PdfSection2.prototype.checkPresence = function(page) {
      var rh = new PdfReferenceHolder(page);
      var contains = false;
      var sc = this.parent;
      for (var index = 0; index < sc.section.length; index++) {
        var section = sc.section[index];
        contains = contains || section.contains(page);
      }
      return rh;
    };
    PdfSection2.prototype.contains = function(page) {
      var index = this.indexOf(page);
      return 0 <= index;
    };
    PdfSection2.prototype.indexOf = function(page) {
      for (var index = 0; index < this.pdfPages.length; index++) {
        if (this.pdfPages[index] === page) {
          return this.pdfPages.indexOf(page);
        }
      }
      var r = new PdfReferenceHolder(page);
      return this.pagesReferences.indexOf(r);
    };
    PdfSection2.prototype.pageAddedMethod = function(page) {
      var args = new PageAddedEventArgs(page);
      this.onPageAdded(args);
      var parent = this.parent;
      parent.document.pages.onPageAdded(args);
      this.pageCount.intValue = this.count;
    };
    PdfSection2.prototype.onPageAdded = function(args) {
    };
    PdfSection2.prototype.getActualBounds = function(arg1, arg2, arg3) {
      if (arg1 instanceof PdfPage && typeof arg2 === "boolean") {
        var result = void 0;
        var document_1 = this.parent.document;
        result = this.getActualBounds(document_1, arg1, arg2);
        return result;
      } else {
        arg1 = arg1;
        arg2 = arg2;
        arg3 = arg3;
        var bounds = new RectangleF(0, 0, 0, 0);
        bounds.height = arg3 ? this.pageSettings.size.height : this.pageSettings.getActualSize().height;
        bounds.width = arg3 ? this.pageSettings.size.width : this.pageSettings.getActualSize().width;
        var left = this.getLeftIndentWidth(arg1, arg2, arg3);
        var top_1 = this.getTopIndentHeight(arg1, arg2, arg3);
        var right = this.getRightIndentWidth(arg1, arg2, arg3);
        var bottom = this.getBottomIndentHeight(arg1, arg2, arg3);
        bounds.x += left;
        bounds.y += top_1;
        bounds.width -= left + right;
        bounds.height -= top_1 + bottom;
        return bounds;
      }
    };
    PdfSection2.prototype.getLeftIndentWidth = function(document2, page, includeMargins) {
      if (document2 == null) {
        throw new Error("ArgumentNullException:document");
      }
      if (page == null) {
        throw new Error("ArgumentNullException:page");
      }
      var value = includeMargins ? this.pageSettings.margins.left : 0;
      var templateWidth = this.template.getLeft(page) != null ? this.template.getLeft(page).width : 0;
      var docTemplateWidth = document2.template.getLeft(page) != null ? document2.template.getLeft(page).width : 0;
      value += this.template.applyDocumentLeftTemplate ? Math.max(templateWidth, docTemplateWidth) : templateWidth;
      return value;
    };
    PdfSection2.prototype.getTopIndentHeight = function(document2, page, includeMargins) {
      if (document2 == null) {
        throw new Error("ArgumentNullException:document");
      }
      if (page == null) {
        throw new Error("ArgumentNullException:page");
      }
      var value = includeMargins ? this.pageSettings.margins.top : 0;
      var templateHeight = this.template.getTop(page) != null ? this.template.getTop(page).height : 0;
      var docTemplateHeight = document2.template.getTop(page) != null ? document2.template.getTop(page).height : 0;
      value += this.template.applyDocumentTopTemplate ? Math.max(templateHeight, docTemplateHeight) : templateHeight;
      return value;
    };
    PdfSection2.prototype.getRightIndentWidth = function(document2, page, includeMargins) {
      if (document2 == null) {
        throw new Error("ArgumentNullException:document");
      }
      if (page == null) {
        throw new Error("ArgumentNullException:page");
      }
      var value = includeMargins ? this.pageSettings.margins.right : 0;
      var templateWidth = this.template.getRight(page) != null ? this.template.getRight(page).width : 0;
      var docTemplateWidth = document2.template.getRight(page) != null ? document2.template.getRight(page).width : 0;
      value += this.template.applyDocumentRightTemplate ? Math.max(templateWidth, docTemplateWidth) : templateWidth;
      return value;
    };
    PdfSection2.prototype.getBottomIndentHeight = function(document2, page, includeMargins) {
      if (document2 == null) {
        throw new Error("ArgumentNullException:document");
      }
      if (page == null) {
        throw new Error("ArgumentNullException:page");
      }
      var value = includeMargins ? this.pageSettings.margins.bottom : 0;
      var templateHeight = this.template.getBottom(page) != null ? this.template.getBottom(page).height : 0;
      var docTemplateHeight = document2.template.getBottom(page) != null ? document2.template.getBottom(page).height : 0;
      value += this.template.applyDocumentBottomTemplate ? Math.max(templateHeight, docTemplateHeight) : templateHeight;
      return value;
    };
    PdfSection2.prototype.remove = function(page) {
      if (page == null) {
        throw Error('ArgumentNullException("page")');
      }
      var index = this.pdfPages.indexOf(page);
      this.pagesReferences.removeAt(index);
      var temproaryPages = [];
      for (var j = 0; j < index; j++) {
        temproaryPages.push(this.pdfPages[j]);
      }
      for (var j = index + 1; j < this.pdfPages.length; j++) {
        temproaryPages.push(this.pdfPages[j]);
      }
      this.pdfPages = temproaryPages;
    };
    PdfSection2.prototype.applyPageSettings = function(container, parentSettings, state) {
      var bounds = new RectangleF(state.origin, state.size);
      container.items.setValue(this.dictionaryProperties.mediaBox, PdfArray.fromRectangle(bounds));
      var rotate = 0;
      rotate = PdfSectionCollection.rotateFactor * state.rotate;
      var angle = new PdfNumber(rotate);
      container.items.setValue(this.dictionaryProperties.rotate, angle);
    };
    PdfSection2.prototype.beginSave = function(state, writer) {
      var doc = writer.document;
      this.applyPageSettings(this.section, doc.pageSettings, state);
    };
    PdfSection2.prototype.drawTemplates = function(page, layer, document2, foreground) {
      var documentHeaders = this.getDocumentTemplates(document2, page, foreground);
      var sectionHeaders = this.getSectionTemplates(page, foreground);
      this.drawTemplatesHelper(layer, document2, documentHeaders);
      this.drawTemplatesHelper(layer, document2, sectionHeaders);
    };
    PdfSection2.prototype.drawTemplatesHelper = function(layer, document2, templates) {
      if (templates != null && templates.length > 0) {
        var len = templates.length;
        for (var i = 0; i < len; i++) {
          var template = templates[i];
          template.draw(layer, document2);
        }
      }
    };
    return PdfSection2;
  }()
);
var PageSettingsState = (
  /** @class */
  function() {
    function PageSettingsState2(document2) {
      this.pageOrientation = document2.pageSettings.orientation;
      this.pageRotate = document2.pageSettings.rotate;
      this.pageSize = document2.pageSettings.size;
      this.pageOrigin = document2.pageSettings.origin;
    }
    Object.defineProperty(PageSettingsState2.prototype, "orientation", {
      //public Properties
      /**
       * @hidden
       * @private
       */
      get: function() {
        return this.pageOrientation;
      },
      set: function(value) {
        this.pageOrientation = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PageSettingsState2.prototype, "rotate", {
      /**
       * @hidden
       * @private
       */
      get: function() {
        return this.pageRotate;
      },
      set: function(value) {
        this.pageRotate = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PageSettingsState2.prototype, "size", {
      /**
       * @hidden
       * @private
       */
      get: function() {
        return this.pageSize;
      },
      set: function(value) {
        this.pageSize = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PageSettingsState2.prototype, "origin", {
      /**
       * @hidden
       * @private
       */
      get: function() {
        return this.pageOrigin;
      },
      set: function(value) {
        this.pageOrigin = value;
      },
      enumerable: true,
      configurable: true
    });
    return PageSettingsState2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-section-collection.js
var PdfSectionCollection = (
  /** @class */
  function() {
    function PdfSectionCollection2(document2) {
      this.sections = [];
      this.dictionaryProperties = new DictionaryProperties();
      this.pdfDocument = document2.clone();
      this.initialize();
    }
    Object.defineProperty(PdfSectionCollection2.prototype, "section", {
      //Properties
      /**
       * Gets the `Section` collection.
       */
      get: function() {
        return this.sections;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSectionCollection2.prototype, "document", {
      /**
       * Gets a parent `document`.
       * @private
       */
      get: function() {
        return this.pdfDocument;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSectionCollection2.prototype, "count", {
      /**
       * Gets the `number of sections` in a document.
       * @private
       */
      get: function() {
        return this.sections.length;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSectionCollection2.prototype, "element", {
      /**
       * Gets the wrapped `element`.
       * @private
       */
      get: function() {
        return this.pages;
      },
      enumerable: true,
      configurable: true
    });
    PdfSectionCollection2.prototype.initialize = function() {
      this.sectionCount = new PdfNumber(0);
      this.sectionCollection = new PdfArray();
      this.pages = new PdfDictionary();
      this.pages.beginSave = new SaveSectionCollectionEventHandler(this);
      this.pages.items.setValue(this.dictionaryProperties.type, new PdfName("Pages"));
      this.pages.items.setValue(this.dictionaryProperties.kids, this.sectionCollection);
      this.pages.items.setValue(this.dictionaryProperties.count, this.sectionCount);
      this.pages.items.setValue(this.dictionaryProperties.resources, new PdfDictionary());
      this.setPageSettings(this.pages, this.pdfDocument.pageSettings);
    };
    PdfSectionCollection2.prototype.pdfSectionCollection = function(index) {
      if (index < 0 || index >= this.count) {
        throw new Error("IndexOutOfRangeException()");
      }
      return this.sections[index];
    };
    PdfSectionCollection2.prototype.setPageSettings = function(container, pageSettings) {
      var bounds = new RectangleF(new PointF(), pageSettings.size);
      container.items.setValue(this.dictionaryProperties.mediaBox, PdfArray.fromRectangle(bounds));
    };
    PdfSectionCollection2.prototype.add = function(section) {
      if (typeof section === "undefined") {
        var section_1 = new PdfSection(this.pdfDocument);
        this.add(section_1);
        return section_1;
      } else {
        var r = this.checkSection(section);
        this.sections.push(section);
        section.parent = this;
        this.sectionCollection.add(r);
        return this.sections.indexOf(section);
      }
    };
    PdfSectionCollection2.prototype.checkSection = function(section) {
      var r = new PdfReferenceHolder(section);
      var contains = this.sectionCollection.contains(r);
      return r;
    };
    PdfSectionCollection2.prototype.countPages = function() {
      var count = 0;
      this.sections.forEach(function(n) {
        return count += n.count;
      });
      return count;
    };
    PdfSectionCollection2.prototype.beginSave = function() {
      this.sectionCount.intValue = this.countPages();
    };
    PdfSectionCollection2.rotateFactor = 90;
    return PdfSectionCollection2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-document-page-collection.js
var PdfDocumentPageCollection = (
  /** @class */
  function() {
    function PdfDocumentPageCollection2(document2) {
      this.pdfPageCollectionIndex = new Dictionary();
      this.document = document2;
    }
    Object.defineProperty(PdfDocumentPageCollection2.prototype, "count", {
      //Property
      /**
       * Gets the total `number of the pages`.
       * @private
       */
      get: function() {
        return this.countPages();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentPageCollection2.prototype, "pageCollectionIndex", {
      /**
       * Gets a `page index` from the document.
       * @private
       */
      get: function() {
        return this.pdfPageCollectionIndex;
      },
      enumerable: true,
      configurable: true
    });
    PdfDocumentPageCollection2.prototype.add = function(page) {
      if (typeof page === "undefined") {
        var page_1 = new PdfPage();
        this.add(page_1);
        return page_1;
      } else {
        var section = this.getLastSection();
        section.add(page);
      }
    };
    PdfDocumentPageCollection2.prototype.getLastSection = function() {
      var sc = this.document.sections;
      if (sc.section.length === 0) {
        sc.add();
      }
      var section = sc.section[sc.section.length - 1];
      return section;
    };
    PdfDocumentPageCollection2.prototype.onPageAdded = function(args) {
    };
    PdfDocumentPageCollection2.prototype.countPages = function() {
      var sc = this.document.sections;
      var count = 0;
      for (var index = 0; index < sc.section.length; index++) {
        count += sc.section[index].count;
      }
      return count;
    };
    PdfDocumentPageCollection2.prototype.getPageByIndex = function(index) {
      return this.getPage(index);
    };
    PdfDocumentPageCollection2.prototype.getPage = function(index) {
      if (index < 0 || index >= this.count) {
        throw Error('ArgumentOutOfRangeException("index", "Value can not be less 0")');
      }
      var page = null;
      var sectionStartIndex = 0;
      var sectionCount = 0;
      var pageIndex = 0;
      var length = this.document.sections.count;
      for (var i = 0; i < length; i++) {
        var section = this.document.sections.section[i];
        sectionCount = section.count;
        pageIndex = index - sectionStartIndex;
        if (index >= sectionStartIndex && pageIndex < sectionCount) {
          page = section.getPages()[pageIndex];
          break;
        }
        sectionStartIndex += sectionCount;
      }
      return page;
    };
    PdfDocumentPageCollection2.prototype.indexOf = function(page) {
      var index = -1;
      if (page == null) {
        throw new Error("ArgumentNullException: page");
      } else {
        var numPages = 0;
        for (var i = 0, len = this.document.sections.count; i < len; i++) {
          var section = this.document.sections.pdfSectionCollection(i);
          index = section.indexOf(page);
          if (index >= 0) {
            index += numPages;
            break;
          } else {
            index = -1;
          }
          numPages += section.count;
        }
      }
      return index;
    };
    PdfDocumentPageCollection2.prototype.remove = function(page) {
      if (page == null) {
        throw Error('ArgumentNullException("page")');
      }
      var section = null;
      var len;
      for (var i = 0, len_1 = this.document.sections.count; i < len_1; i++) {
        section = this.document.sections.pdfSectionCollection(i);
        if (section.pages.contains(page)) {
          section.pages.remove(page);
          break;
        }
      }
      return section;
    };
    return PdfDocumentPageCollection2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/general/pdf-cache-collection.js
var PdfCacheCollection = (
  /** @class */
  function() {
    function PdfCacheCollection2() {
      this.referenceObjects = [];
      this.pdfFontCollection = new Dictionary();
    }
    PdfCacheCollection2.prototype.search = function(obj) {
      var result = null;
      var group = this.getGroup(obj);
      if (group == null) {
        group = this.createNewGroup();
      } else if (group.length > 0) {
        result = group[0];
      }
      group.push(obj);
      return result;
    };
    PdfCacheCollection2.prototype.createNewGroup = function() {
      var group = [];
      this.referenceObjects.push(group);
      return group;
    };
    PdfCacheCollection2.prototype.getGroup = function(result) {
      var group = null;
      if (result !== null) {
        var len = this.referenceObjects.length;
        for (var i = 0; i < len; i++) {
          if (this.referenceObjects.length > 0) {
            var tGroup = this.referenceObjects[i];
            if (tGroup.length > 0) {
              var representative = tGroup[0];
              if (result.equalsTo(representative)) {
                group = tGroup;
                break;
              }
            } else {
              this.removeGroup(tGroup);
            }
          }
          len = this.referenceObjects.length;
        }
      }
      return group;
    };
    PdfCacheCollection2.prototype.removeGroup = function(group) {
      if (group !== null) {
        var index = this.referenceObjects.indexOf(group);
        this.referenceObjects.slice(index, index + 1);
      }
    };
    PdfCacheCollection2.prototype.destroy = function() {
      this.pdfFontCollection = void 0;
      this.referenceObjects = void 0;
    };
    return PdfCacheCollection2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-standard-font-metrics-factory.js
var PdfStandardFontMetricsFactory = (
  /** @class */
  function() {
    function PdfStandardFontMetricsFactory2() {
    }
    PdfStandardFontMetricsFactory2.getMetrics = function(fontFamily, fontStyle, size) {
      var metrics = null;
      switch (fontFamily) {
        case PdfFontFamily.Helvetica:
          metrics = this.getHelveticaMetrics(fontFamily, fontStyle, size);
          break;
        case PdfFontFamily.Courier:
          metrics = this.getCourierMetrics(fontFamily, fontStyle, size);
          break;
        case PdfFontFamily.TimesRoman:
          metrics = this.getTimesMetrics(fontFamily, fontStyle, size);
          break;
        case PdfFontFamily.Symbol:
          metrics = this.getSymbolMetrics(fontFamily, fontStyle, size);
          break;
        case PdfFontFamily.ZapfDingbats:
          metrics = this.getZapfDingbatsMetrics(fontFamily, fontStyle, size);
          break;
        default:
          metrics = this.getHelveticaMetrics(PdfFontFamily.Helvetica, fontStyle, size);
          break;
      }
      metrics.name = fontFamily.toString();
      metrics.subScriptSizeFactor = this.subSuperScriptFactor;
      metrics.superscriptSizeFactor = this.subSuperScriptFactor;
      return metrics;
    };
    PdfStandardFontMetricsFactory2.getHelveticaMetrics = function(fontFamily, fontStyle, size) {
      var metrics = new PdfFontMetrics();
      if ((fontStyle & PdfFontStyle.Bold) > 0 && (fontStyle & PdfFontStyle.Italic) > 0) {
        metrics.ascent = this.helveticaBoldItalicAscent;
        metrics.descent = this.helveticaBoldItalicDescent;
        metrics.postScriptName = this.helveticaBoldItalicName;
        metrics.size = size;
        metrics.widthTable = new StandardWidthTable(this.arialBoldWidth);
        metrics.height = metrics.ascent - metrics.descent;
      } else if ((fontStyle & PdfFontStyle.Bold) > 0) {
        metrics.ascent = this.helveticaBoldAscent;
        metrics.descent = this.helveticaBoldDescent;
        metrics.postScriptName = this.helveticaBoldName;
        metrics.size = size;
        metrics.widthTable = new StandardWidthTable(this.arialBoldWidth);
        metrics.height = metrics.ascent - metrics.descent;
      } else if ((fontStyle & PdfFontStyle.Italic) > 0) {
        metrics.ascent = this.helveticaItalicAscent;
        metrics.descent = this.helveticaItalicDescent;
        metrics.postScriptName = this.helveticaItalicName;
        metrics.size = size;
        metrics.widthTable = new StandardWidthTable(this.arialWidth);
        metrics.height = metrics.ascent - metrics.descent;
      } else {
        metrics.ascent = this.helveticaAscent;
        metrics.descent = this.helveticaDescent;
        metrics.postScriptName = this.helveticaName;
        metrics.size = size;
        metrics.widthTable = new StandardWidthTable(this.arialWidth);
        metrics.height = metrics.ascent - metrics.descent;
      }
      return metrics;
    };
    PdfStandardFontMetricsFactory2.getCourierMetrics = function(fontFamily, fontStyle, size) {
      var metrics = new PdfFontMetrics();
      if ((fontStyle & PdfFontStyle.Bold) > 0 && (fontStyle & PdfFontStyle.Italic) > 0) {
        metrics.ascent = this.courierBoldItalicAscent;
        metrics.descent = this.courierBoldItalicDescent;
        metrics.postScriptName = this.courierBoldItalicName;
        metrics.size = size;
        metrics.widthTable = new StandardWidthTable(this.fixedWidth);
        metrics.height = metrics.ascent - metrics.descent;
      } else if ((fontStyle & PdfFontStyle.Bold) > 0) {
        metrics.ascent = this.courierBoldAscent;
        metrics.descent = this.courierBoldDescent;
        metrics.postScriptName = this.courierBoldName;
        metrics.size = size;
        metrics.widthTable = new StandardWidthTable(this.fixedWidth);
        metrics.height = metrics.ascent - metrics.descent;
      } else if ((fontStyle & PdfFontStyle.Italic) > 0) {
        metrics.ascent = this.courierItalicAscent;
        metrics.descent = this.courierItalicDescent;
        metrics.postScriptName = this.courierItalicName;
        metrics.size = size;
        metrics.widthTable = new StandardWidthTable(this.fixedWidth);
        metrics.height = metrics.ascent - metrics.descent;
      } else {
        metrics.ascent = this.courierAscent;
        metrics.descent = this.courierDescent;
        metrics.postScriptName = this.courierName;
        metrics.size = size;
        metrics.widthTable = new StandardWidthTable(this.fixedWidth);
        metrics.height = metrics.ascent - metrics.descent;
      }
      return metrics;
    };
    PdfStandardFontMetricsFactory2.getTimesMetrics = function(fontFamily, fontStyle, size) {
      var metrics = new PdfFontMetrics();
      if ((fontStyle & PdfFontStyle.Bold) > 0 && (fontStyle & PdfFontStyle.Italic) > 0) {
        metrics.ascent = this.timesBoldItalicAscent;
        metrics.descent = this.timesBoldItalicDescent;
        metrics.postScriptName = this.timesBoldItalicName;
        metrics.size = size;
        metrics.widthTable = new StandardWidthTable(this.timesRomanBoldItalicWidths);
        metrics.height = metrics.ascent - metrics.descent;
      } else if ((fontStyle & PdfFontStyle.Bold) > 0) {
        metrics.ascent = this.timesBoldAscent;
        metrics.descent = this.timesBoldDescent;
        metrics.postScriptName = this.timesBoldName;
        metrics.size = size;
        metrics.widthTable = new StandardWidthTable(this.timesRomanBoldWidth);
        metrics.height = metrics.ascent - metrics.descent;
      } else if ((fontStyle & PdfFontStyle.Italic) > 0) {
        metrics.ascent = this.timesItalicAscent;
        metrics.descent = this.timesItalicDescent;
        metrics.postScriptName = this.timesItalicName;
        metrics.size = size;
        metrics.widthTable = new StandardWidthTable(this.timesRomanItalicWidth);
        metrics.height = metrics.ascent - metrics.descent;
      } else {
        metrics.ascent = this.timesAscent;
        metrics.descent = this.timesDescent;
        metrics.postScriptName = this.timesName;
        metrics.size = size;
        metrics.widthTable = new StandardWidthTable(this.timesRomanWidth);
        metrics.height = metrics.ascent - metrics.descent;
      }
      return metrics;
    };
    PdfStandardFontMetricsFactory2.getSymbolMetrics = function(fontFamily, fontStyle, size) {
      var metrics = new PdfFontMetrics();
      metrics.ascent = this.symbolAscent;
      metrics.descent = this.symbolDescent;
      metrics.postScriptName = this.symbolName;
      metrics.size = size;
      metrics.widthTable = new StandardWidthTable(this.symbolWidth);
      metrics.height = metrics.ascent - metrics.descent;
      return metrics;
    };
    PdfStandardFontMetricsFactory2.getZapfDingbatsMetrics = function(fontFamily, fontStyle, size) {
      var metrics = new PdfFontMetrics();
      metrics.ascent = this.zapfDingbatsAscent;
      metrics.descent = this.zapfDingbatsDescent;
      metrics.postScriptName = this.zapfDingbatsName;
      metrics.size = size;
      metrics.widthTable = new StandardWidthTable(this.zapfDingbatsWidth);
      metrics.height = metrics.ascent - metrics.descent;
      return metrics;
    };
    PdfStandardFontMetricsFactory2.subSuperScriptFactor = 1.52;
    PdfStandardFontMetricsFactory2.helveticaAscent = 931;
    PdfStandardFontMetricsFactory2.helveticaDescent = -225;
    PdfStandardFontMetricsFactory2.helveticaName = "Helvetica";
    PdfStandardFontMetricsFactory2.helveticaBoldAscent = 962;
    PdfStandardFontMetricsFactory2.helveticaBoldDescent = -228;
    PdfStandardFontMetricsFactory2.helveticaBoldName = "Helvetica-Bold";
    PdfStandardFontMetricsFactory2.helveticaItalicAscent = 931;
    PdfStandardFontMetricsFactory2.helveticaItalicDescent = -225;
    PdfStandardFontMetricsFactory2.helveticaItalicName = "Helvetica-Oblique";
    PdfStandardFontMetricsFactory2.helveticaBoldItalicAscent = 962;
    PdfStandardFontMetricsFactory2.helveticaBoldItalicDescent = -228;
    PdfStandardFontMetricsFactory2.helveticaBoldItalicName = "Helvetica-BoldOblique";
    PdfStandardFontMetricsFactory2.courierAscent = 805;
    PdfStandardFontMetricsFactory2.courierDescent = -250;
    PdfStandardFontMetricsFactory2.courierName = "Courier";
    PdfStandardFontMetricsFactory2.courierBoldAscent = 801;
    PdfStandardFontMetricsFactory2.courierBoldDescent = -250;
    PdfStandardFontMetricsFactory2.courierBoldName = "Courier-Bold";
    PdfStandardFontMetricsFactory2.courierItalicAscent = 805;
    PdfStandardFontMetricsFactory2.courierItalicDescent = -250;
    PdfStandardFontMetricsFactory2.courierItalicName = "Courier-Oblique";
    PdfStandardFontMetricsFactory2.courierBoldItalicAscent = 801;
    PdfStandardFontMetricsFactory2.courierBoldItalicDescent = -250;
    PdfStandardFontMetricsFactory2.courierBoldItalicName = "Courier-BoldOblique";
    PdfStandardFontMetricsFactory2.timesAscent = 898;
    PdfStandardFontMetricsFactory2.timesDescent = -218;
    PdfStandardFontMetricsFactory2.timesName = "Times-Roman";
    PdfStandardFontMetricsFactory2.timesBoldAscent = 935;
    PdfStandardFontMetricsFactory2.timesBoldDescent = -218;
    PdfStandardFontMetricsFactory2.timesBoldName = "Times-Bold";
    PdfStandardFontMetricsFactory2.timesItalicAscent = 883;
    PdfStandardFontMetricsFactory2.timesItalicDescent = -217;
    PdfStandardFontMetricsFactory2.timesItalicName = "Times-Italic";
    PdfStandardFontMetricsFactory2.timesBoldItalicAscent = 921;
    PdfStandardFontMetricsFactory2.timesBoldItalicDescent = -218;
    PdfStandardFontMetricsFactory2.timesBoldItalicName = "Times-BoldItalic";
    PdfStandardFontMetricsFactory2.symbolAscent = 1010;
    PdfStandardFontMetricsFactory2.symbolDescent = -293;
    PdfStandardFontMetricsFactory2.symbolName = "Symbol";
    PdfStandardFontMetricsFactory2.zapfDingbatsAscent = 820;
    PdfStandardFontMetricsFactory2.zapfDingbatsDescent = -143;
    PdfStandardFontMetricsFactory2.zapfDingbatsName = "ZapfDingbats";
    PdfStandardFontMetricsFactory2.arialWidth = [278, 278, 355, 556, 556, 889, 667, 191, 333, 333, 389, 584, 278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 278, 278, 584, 584, 584, 556, 1015, 667, 667, 722, 722, 667, 611, 778, 722, 278, 500, 667, 556, 833, 722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 278, 278, 278, 469, 556, 333, 556, 556, 500, 556, 556, 278, 556, 556, 222, 222, 500, 222, 833, 556, 556, 556, 556, 333, 500, 278, 556, 500, 722, 500, 500, 500, 334, 260, 334, 584, 0, 556, 0, 222, 556, 333, 1e3, 556, 556, 333, 1e3, 667, 333, 1e3, 0, 611, 0, 0, 222, 222, 333, 333, 350, 556, 1e3, 333, 1e3, 500, 333, 944, 0, 500, 667, 0, 333, 556, 556, 556, 556, 260, 556, 333, 737, 370, 556, 584, 0, 737, 333, 400, 584, 333, 333, 333, 556, 537, 278, 333, 333, 365, 556, 834, 834, 834, 611, 667, 667, 667, 667, 667, 667, 1e3, 722, 667, 667, 667, 667, 278, 278, 278, 278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722, 722, 667, 667, 611, 556, 556, 556, 556, 556, 556, 889, 500, 556, 556, 556, 556, 278, 278, 278, 278, 556, 556, 556, 556, 556, 556, 556, 584, 611, 556, 556, 556, 556, 500, 556, 500];
    PdfStandardFontMetricsFactory2.arialBoldWidth = [278, 333, 474, 556, 556, 889, 722, 238, 333, 333, 389, 584, 278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 333, 333, 584, 584, 584, 611, 975, 722, 722, 722, 722, 667, 611, 778, 722, 278, 556, 722, 611, 833, 722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 333, 278, 333, 584, 556, 333, 556, 611, 556, 611, 556, 333, 611, 611, 278, 278, 556, 278, 889, 611, 611, 611, 611, 389, 556, 333, 611, 556, 778, 556, 556, 500, 389, 280, 389, 584, 0, 556, 0, 278, 556, 500, 1e3, 556, 556, 333, 1e3, 667, 333, 1e3, 0, 611, 0, 0, 278, 278, 500, 500, 350, 556, 1e3, 333, 1e3, 556, 333, 944, 0, 500, 667, 0, 333, 556, 556, 556, 556, 280, 556, 333, 737, 370, 556, 584, 0, 737, 333, 400, 584, 333, 333, 333, 611, 556, 278, 333, 333, 365, 556, 834, 834, 834, 611, 722, 722, 722, 722, 722, 722, 1e3, 722, 667, 667, 667, 667, 278, 278, 278, 278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722, 722, 667, 667, 611, 556, 556, 556, 556, 556, 556, 889, 556, 556, 556, 556, 556, 278, 278, 278, 278, 611, 611, 611, 611, 611, 611, 611, 584, 611, 611, 611, 611, 611, 556, 611, 556];
    PdfStandardFontMetricsFactory2.fixedWidth
    PdfStandardFontMetricsFactory2.timesRomanWidth = [250, 333, 408, 500, 500, 833, 778, 180, 333, 333, 500, 564, 250, 333, 250, 278, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 278, 278, 564, 564, 564, 444, 921, 722, 667, 667, 722, 611, 556, 722, 722, 333, 389, 722, 611, 889, 722, 722, 556, 722, 667, 556, 611, 722, 722, 944, 722, 722, 611, 333, 278, 333, 469, 500, 333, 444, 500, 444, 500, 444, 333, 500, 500, 278, 278, 500, 278, 778, 500, 500, 500, 500, 333, 389, 278, 500, 500, 722, 500, 500, 444, 480, 200, 480, 541, 0, 500, 0, 333, 500, 444, 1e3, 500, 500, 333, 1e3, 556, 333, 889, 0, 611, 0, 0, 333, 333, 444, 444, 350, 500, 1e3, 333, 980, 389, 333, 722, 0, 444, 722, 0, 333, 500, 500, 500, 500, 200, 500, 333, 760, 276, 500, 564, 0, 760, 333, 400, 564, 300, 300, 333, 500, 453, 250, 333, 300, 310, 500, 750, 750, 750, 444, 722, 722, 722, 722, 722, 722, 889, 667, 611, 611, 611, 611, 333, 333, 333, 333, 722, 722, 722, 722, 722, 722, 722, 564, 722, 722, 722, 722, 722, 722, 556, 500, 444, 444, 444, 444, 444, 444, 667, 444, 444, 444, 444, 444, 278, 278, 278, 278, 500, 500, 500, 500, 500, 500, 500, 564, 500, 500, 500, 500, 500, 500, 500, 500];
    PdfStandardFontMetricsFactory2.timesRomanBoldWidth = [250, 333, 555, 500, 500, 1e3, 833, 278, 333, 333, 500, 570, 250, 333, 250, 278, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 333, 333, 570, 570, 570, 500, 930, 722, 667, 722, 722, 667, 611, 778, 778, 389, 500, 778, 667, 944, 722, 778, 611, 778, 722, 556, 667, 722, 722, 1e3, 722, 722, 667, 333, 278, 333, 581, 500, 333, 500, 556, 444, 556, 444, 333, 500, 556, 278, 333, 556, 278, 833, 556, 500, 556, 556, 444, 389, 333, 556, 500, 722, 500, 500, 444, 394, 220, 394, 520, 0, 500, 0, 333, 500, 500, 1e3, 500, 500, 333, 1e3, 556, 333, 1e3, 0, 667, 0, 0, 333, 333, 500, 500, 350, 500, 1e3, 333, 1e3, 389, 333, 722, 0, 444, 722, 0, 333, 500, 500, 500, 500, 220, 500, 333, 747, 300, 500, 570, 0, 747, 333, 400, 570, 300, 300, 333, 556, 540, 250, 333, 300, 330, 500, 750, 750, 750, 500, 722, 722, 722, 722, 722, 722, 1e3, 722, 667, 667, 667, 667, 389, 389, 389, 389, 722, 722, 778, 778, 778, 778, 778, 570, 778, 722, 722, 722, 722, 722, 611, 556, 500, 500, 500, 500, 500, 500, 722, 444, 444, 444, 444, 444, 278, 278, 278, 278, 500, 556, 500, 500, 500, 500, 500, 570, 500, 556, 556, 556, 556, 500, 556, 500];
    PdfStandardFontMetricsFactory2.timesRomanItalicWidth = [250, 333, 420, 500, 500, 833, 778, 214, 333, 333, 500, 675, 250, 333, 250, 278, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 333, 333, 675, 675, 675, 500, 920, 611, 611, 667, 722, 611, 611, 722, 722, 333, 444, 667, 556, 833, 667, 722, 611, 722, 611, 500, 556, 722, 611, 833, 611, 556, 556, 389, 278, 389, 422, 500, 333, 500, 500, 444, 500, 444, 278, 500, 500, 278, 278, 444, 278, 722, 500, 500, 500, 500, 389, 389, 278, 500, 444, 667, 444, 444, 389, 400, 275, 400, 541, 0, 500, 0, 333, 500, 556, 889, 500, 500, 333, 1e3, 500, 333, 944, 0, 556, 0, 0, 333, 333, 556, 556, 350, 500, 889, 333, 980, 389, 333, 667, 0, 389, 556, 0, 389, 500, 500, 500, 500, 275, 500, 333, 760, 276, 500, 675, 0, 760, 333, 400, 675, 300, 300, 333, 500, 523, 250, 333, 300, 310, 500, 750, 750, 750, 500, 611, 611, 611, 611, 611, 611, 889, 667, 611, 611, 611, 611, 333, 333, 333, 333, 722, 667, 722, 722, 722, 722, 722, 675, 722, 722, 722, 722, 722, 556, 611, 500, 500, 500, 500, 500, 500, 500, 667, 444, 444, 444, 444, 444, 278, 278, 278, 278, 500, 500, 500, 500, 500, 500, 500, 675, 500, 500, 500, 500, 500, 444, 500, 444];
    PdfStandardFontMetricsFactory2.timesRomanBoldItalicWidths = [250, 389, 555, 500, 500, 833, 778, 278, 333, 333, 500, 570, 250, 333, 250, 278, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 333, 333, 570, 570, 570, 500, 832, 667, 667, 667, 722, 667, 667, 722, 778, 389, 500, 667, 611, 889, 722, 722, 611, 722, 667, 556, 611, 722, 667, 889, 667, 611, 611, 333, 278, 333, 570, 500, 333, 500, 500, 444, 500, 444, 333, 500, 556, 278, 278, 500, 278, 778, 556, 500, 500, 500, 389, 389, 278, 556, 444, 667, 500, 444, 389, 348, 220, 348, 570, 0, 500, 0, 333, 500, 500, 1e3, 500, 500, 333, 1e3, 556, 333, 944, 0, 611, 0, 0, 333, 333, 500, 500, 350, 500, 1e3, 333, 1e3, 389, 333, 722, 0, 389, 611, 0, 389, 500, 500, 500, 500, 220, 500, 333, 747, 266, 500, 606, 0, 747, 333, 400, 570, 300, 300, 333, 576, 500, 250, 333, 300, 300, 500, 750, 750, 750, 500, 667, 667, 667, 667, 667, 667, 944, 667, 667, 667, 667, 667, 389, 389, 389, 389, 722, 722, 722, 722, 722, 722, 722, 570, 722, 722, 722, 722, 722, 611, 611, 500, 500, 500, 500, 500, 500, 500, 722, 444, 444, 444, 444, 444, 278, 278, 278, 278, 500, 556, 500, 500, 500, 500, 500, 570, 500, 556, 556, 556, 556, 444, 500, 444];
    PdfStandardFontMetricsFactory2.symbolWidth = [250, 333, 713, 500, 549, 833, 778, 439, 333, 333, 500, 549, 250, 549, 250, 278, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 278, 278, 549, 549, 549, 444, 549, 722, 667, 722, 612, 611, 763, 603, 722, 333, 631, 722, 686, 889, 722, 722, 768, 741, 556, 592, 611, 690, 439, 768, 645, 795, 611, 333, 863, 333, 658, 500, 500, 631, 549, 549, 494, 439, 521, 411, 603, 329, 603, 549, 549, 576, 521, 549, 549, 521, 549, 603, 439, 576, 713, 686, 493, 686, 494, 480, 200, 480, 549, 750, 620, 247, 549, 167, 713, 500, 753, 753, 753, 753, 1042, 987, 603, 987, 603, 400, 549, 411, 549, 549, 713, 494, 460, 549, 549, 549, 549, 1e3, 603, 1e3, 658, 823, 686, 795, 987, 768, 768, 823, 768, 768, 713, 713, 713, 713, 713, 713, 713, 768, 713, 790, 790, 890, 823, 549, 250, 713, 603, 603, 1042, 987, 603, 987, 603, 494, 329, 790, 790, 786, 713, 384, 384, 384, 384, 384, 384, 494, 494, 494, 494, 329, 274, 686, 686, 686, 384, 384, 384, 384, 384, 384, 494, 494, 494, -1];
    PdfStandardFontMetricsFactory2.zapfDingbatsWidth = [278, 974, 961, 974, 980, 719, 789, 790, 791, 690, 960, 939, 549, 855, 911, 933, 911, 945, 974, 755, 846, 762, 761, 571, 677, 763, 760, 759, 754, 494, 552, 537, 577, 692, 786, 788, 788, 790, 793, 794, 816, 823, 789, 841, 823, 833, 816, 831, 923, 744, 723, 749, 790, 792, 695, 776, 768, 792, 759, 707, 708, 682, 701, 826, 815, 789, 789, 707, 687, 696, 689, 786, 787, 713, 791, 785, 791, 873, 761, 762, 762, 759, 759, 892, 892, 788, 784, 438, 138, 277, 415, 392, 392, 668, 668, 390, 390, 317, 317, 276, 276, 509, 509, 410, 410, 234, 234, 334, 334, 732, 544, 544, 910, 667, 760, 760, 776, 595, 694, 626, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 894, 838, 1016, 458, 748, 924, 748, 918, 927, 928, 928, 834, 873, 828, 924, 924, 917, 930, 931, 463, 883, 836, 836, 867, 867, 696, 696, 874, 874, 760, 946, 771, 865, 771, 888, 967, 888, 831, 873, 927, 970, 918];
    return PdfStandardFontMetricsFactory2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-standard-font.js
var __extends69 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfStandardFont = (
  /** @class */
  function(_super) {
    __extends69(PdfStandardFont2, _super);
    function PdfStandardFont2(fontFamilyPrototype, size, style) {
      var _this = _super.call(this, size, typeof style === "undefined" ? fontFamilyPrototype instanceof PdfStandardFont2 ? fontFamilyPrototype.style : PdfFontStyle.Regular : style) || this;
      _this.dictionaryProperties = new DictionaryProperties();
      _this.encodings = ["Unknown", "StandardEncoding", "MacRomanEncoding", "MacExpertEncoding", "WinAnsiEncoding", "PDFDocEncoding", "IdentityH"];
      if (typeof fontFamilyPrototype === "undefined") {
        _this.pdfFontFamily = PdfFontFamily.Helvetica;
      } else if (fontFamilyPrototype instanceof PdfStandardFont2) {
        _this.pdfFontFamily = fontFamilyPrototype.fontFamily;
      } else {
        _this.pdfFontFamily = fontFamilyPrototype;
      }
      _this.checkStyle();
      _this.initializeInternals();
      return _this;
    }
    Object.defineProperty(PdfStandardFont2.prototype, "fontFamily", {
      /* tslint:enable */
      //Properties
      /**
       * Gets the `FontFamily`.
       * @private
       */
      get: function() {
        return this.pdfFontFamily;
      },
      enumerable: true,
      configurable: true
    });
    PdfStandardFont2.prototype.checkStyle = function() {
      if (this.fontFamily === PdfFontFamily.Symbol || this.fontFamily === PdfFontFamily.ZapfDingbats) {
        var style = this.style;
        style &= ~(PdfFontStyle.Bold | PdfFontStyle.Italic);
        this.setStyle(style);
      }
    };
    PdfStandardFont2.prototype.getLineWidth = function(line, format) {
      if (line == null) {
        throw new Error("ArgumentNullException:line");
      }
      var width = 0;
      var name = this.name;
      line = PdfStandardFont2.convert(line);
      for (var i = 0, len = line.length; i < len; i++) {
        var ch = line[i];
        var charWidth = this.getCharWidthInternal(ch, format);
        width += charWidth;
      }
      var size = this.metrics.getSize(format);
      width *= PdfFont.charSizeMultiplier * size;
      width = this.applyFormatSettings(line, format, width);
      return width;
    };
    PdfStandardFont2.prototype.equalsToFont = function(font) {
      var equal = false;
      var stFont = font;
      if (stFont != null) {
        var fontFamilyEqual = this.fontFamily === stFont.fontFamily;
        var lineReducer = ~(PdfFontStyle.Underline | PdfFontStyle.Strikeout);
        var styleEqual = (this.style & lineReducer) === (stFont.style & lineReducer);
        equal = fontFamilyEqual && styleEqual;
      }
      return equal;
    };
    PdfStandardFont2.prototype.initializeInternals = function() {
      var equalFont = null;
      equalFont = PdfDocument.cache.search(this);
      var internals = null;
      var metrics = PdfStandardFontMetricsFactory.getMetrics(this.pdfFontFamily, this.style, this.size);
      this.metrics = metrics;
      internals = this.createInternals();
      this.setInternals(internals);
    };
    PdfStandardFont2.prototype.createInternals = function() {
      var dictionary = new PdfDictionary();
      dictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.font));
      dictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.type1));
      dictionary.items.setValue(this.dictionaryProperties.baseFont, new PdfName(this.metrics.postScriptName));
      if (this.fontFamily !== PdfFontFamily.Symbol && this.fontFamily !== PdfFontFamily.ZapfDingbats) {
        var encoding = this.encodings[FontEncoding.WinAnsiEncoding];
        dictionary.items.setValue(this.dictionaryProperties.encoding, new PdfName(encoding));
      }
      return dictionary;
    };
    PdfStandardFont2.prototype.getCharWidthInternal = function(charCode, format) {
      var width = 0;
      var code = 0;
      code = charCode.charCodeAt(0);
      if (this.name === "0" || this.name === "1" || this.name === "2" || this.name === "3" || this.name === "4") {
        code = code - PdfStandardFont2.charOffset;
      }
      code = code >= 0 && code !== 128 ? code : 0;
      var metrics = this.metrics;
      var widthTable = metrics.widthTable;
      width = widthTable.items(code);
      return width;
    };
    PdfStandardFont2.convert = function(text) {
      return text;
    };
    PdfStandardFont2.charOffset = 32;
    return PdfStandardFont2;
  }(PdfFont)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/pdf-document.js
var __extends70 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfDocument = (
  /** @class */
  function(_super) {
    __extends70(PdfDocument2, _super);
    function PdfDocument2(isMerging) {
      var _this = _super.call(this) || this;
      _this.defaultMargin = 40;
      _this.streamWriter = null;
      _this.document = _this;
      var isMerge = false;
      if (typeof isMerging === "undefined") {
        PdfDocument2.cacheCollection = new PdfCacheCollection();
        isMerge = false;
      } else {
        isMerge = isMerging;
      }
      var objects = new PdfMainObjectCollection();
      _this.setMainObjectCollection(objects);
      var crossTable = new PdfCrossTable();
      crossTable.isMerging = isMerge;
      crossTable.document = _this;
      _this.setCrossTable(crossTable);
      var catalog = new PdfCatalog();
      _this.setCatalog(catalog);
      objects.add(catalog);
      catalog.position = -1;
      _this.sectionCollection = new PdfSectionCollection(_this);
      _this.documentPageCollection = new PdfDocumentPageCollection(_this);
      catalog.pages = _this.sectionCollection;
      return _this;
    }
    Object.defineProperty(PdfDocument2, "defaultFont", {
      //Properties
      /**
       * Gets the `default font`. It is used for complex objects when font is not explicitly defined.
       * @private
       */
      get: function() {
        if (this.defaultStandardFont == null) {
          this.defaultStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 8);
        }
        return this.defaultStandardFont;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocument2.prototype, "sections", {
      /**
       * Gets the collection of the `sections` in the document.
       * @private
       */
      get: function() {
        return this.sectionCollection;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocument2.prototype, "pageSettings", {
      /**
       * Gets the document's page setting.
       * @public
       */
      get: function() {
        if (this.settings == null) {
          this.settings = new PdfPageSettings(this.defaultMargin);
        }
        return this.settings;
      },
      /**
       * Sets the document's page setting.
       * ```typescript
       * // create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       *
       * // sets the right margin of the page
       * document.pageSettings.margins.right = 0;
       * // set the page size.
       * document.pageSettings.size = new SizeF(500, 500);
       * // change the page orientation to landscape
       * document.pageSettings.orientation = PdfPageOrientation.Landscape;
       * // apply 90 degree rotation on the page
       * document.pageSettings.rotate = PdfPageRotateAngle.RotateAngle90;
       *
       * // add a pages to the document
       * let page1 : PdfPage = document.pages.add();
       * // set font
       * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);
       * // set brush
       * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));
       * // set the specified Point
       * let point : PointF = new PointF(page1.getClientSize().width - 200, page1.getClientSize().height - 200);
       * // draw the text
       * page1.graphics.drawString('Hello World', font, blackBrush, point);
       * // save the document
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       */
      set: function(value) {
        this.settings = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocument2.prototype, "pages", {
      /**
       * Represents the collection of pages in the PDF document.
       * ```typescript
       * // create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * //
       * // get the collection of pages in the document
       * let pageCollection : PdfDocumentPageCollection  = document.pages;
       * //
       * // add pages
       * let page1 : PdfPage = pageCollection.add();
       * // save the document
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this.documentPageCollection;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocument2, "cache", {
      /**
       * Gets collection of the `cached objects`.
       * @private
       */
      get: function() {
        if (typeof PdfDocument2.cacheCollection === "undefined" || PdfDocument2.cacheCollection == null) {
          return new PdfCacheCollection();
        }
        return PdfDocument2.cacheCollection;
      },
      /**
       * Sets collection of the `cached objects`.
       * @private
       */
      set: function(value) {
        this.cacheCollection = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocument2, "enableCache", {
      /**
       * Gets the value of enable cache.
       * @private
       */
      get: function() {
        return this.isCacheEnabled;
      },
      /**
       * Sets thie value of enable cache.
       * @private
       */
      set: function(value) {
        this.isCacheEnabled = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocument2.prototype, "colorSpace", {
      /* tslint:disable */
      /**
       * Gets or sets the `color space` of the document. This property can be used to create PDF document in RGB, Gray scale or CMYK color spaces.
       * @private
       */
      get: function() {
        if (this.pdfColorSpace === PdfColorSpace.Rgb || this.pdfColorSpace === PdfColorSpace.Cmyk || this.pdfColorSpace === PdfColorSpace.GrayScale) {
          return this.pdfColorSpace;
        } else {
          return PdfColorSpace.Rgb;
        }
      },
      set: function(value) {
        if (value === PdfColorSpace.Rgb || value === PdfColorSpace.Cmyk || value === PdfColorSpace.GrayScale) {
          this.pdfColorSpace = value;
        } else {
          this.pdfColorSpace = PdfColorSpace.Rgb;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocument2.prototype, "template", {
      /* tslint:enable */
      /**
       * Gets or sets a `template` to all pages in the document.
       * @private
       */
      get: function() {
        if (this.pageTemplate == null) {
          this.pageTemplate = new PdfDocumentTemplate();
        }
        return this.pageTemplate;
      },
      set: function(value) {
        this.pageTemplate = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfDocument2.prototype.docSave = function(stream, arg2, arg3) {
      this.checkPagesPresence();
      if (stream === null) {
        throw new Error("ArgumentNullException : stream");
      }
      this.streamWriter = stream;
      var writer = new PdfWriter(stream);
      writer.document = this;
      if (typeof arg2 === "boolean" && typeof arg3 === "undefined") {
        return this.crossTable.save(writer);
      } else {
        this.crossTable.save(writer, arg2);
      }
    };
    PdfDocument2.prototype._docSave = function() {
      var stream = new PdfWriterHelper();
      this.checkPagesPresence();
      if (stream === null) {
        throw new Error("ArgumentNullException : stream");
      }
      this.streamWriter = stream;
      var writer = new PdfWriter(stream);
      writer.document = this;
      return this.crossTable._save(writer);
    };
    PdfDocument2.prototype.checkPagesPresence = function() {
      if (this.pages.count === 0) {
        this.pages.add();
      }
    };
    PdfDocument2.prototype.destroy = function() {
      this.catalog = void 0;
      this.colorSpace = void 0;
      this.currentSavingObj = void 0;
      this.documentPageCollection = void 0;
      this.isStreamCopied = void 0;
      this.pageSettings = void 0;
      this.pageTemplate = void 0;
      this.pdfColorSpace = void 0;
      this.sectionCollection = void 0;
      PdfDocument2.cache.destroy();
      this.crossTable.pdfObjects.destroy();
      PdfDocument2.cache = void 0;
      if (this.streamWriter) {
        this.streamWriter.destroy();
      }
    };
    PdfDocument2.defaultStandardFont = null;
    PdfDocument2.isCacheEnabled = true;
    return PdfDocument2;
  }(PdfDocumentBase)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/base/element-layouter.js
var ElementLayouter = (
  /** @class */
  function() {
    function ElementLayouter2(element2) {
      this.layoutElement = element2;
    }
    Object.defineProperty(ElementLayouter2.prototype, "elements", {
      // Properties
      /**
       * Gets the `element`.
       * @private
       */
      get: function() {
        return this.layoutElement;
      },
      enumerable: true,
      configurable: true
    });
    ElementLayouter2.prototype.getElement = function() {
      return this.layoutElement;
    };
    ElementLayouter2.prototype.layout = function(param) {
      return this.layoutInternal(param);
    };
    ElementLayouter2.prototype.Layouter = function(param) {
      return this.layoutInternal(param);
    };
    ElementLayouter2.prototype.getNextPage = function(currentPage) {
      var section = currentPage.section;
      var nextPage = section.add();
      return nextPage;
    };
    ElementLayouter2.prototype.getPaginateBounds = function(param) {
      if (param == null) {
        throw new Error("ArgumentNullException : param");
      }
      var result = param.format.usePaginateBounds ? param.format.paginateBounds : new RectangleF(param.bounds.x, 0, param.bounds.width, param.bounds.height);
      return result;
    };
    return ElementLayouter2;
  }()
);
var PdfLayoutFormat = (
  /** @class */
  function() {
    function PdfLayoutFormat2(baseFormat) {
      if (typeof baseFormat === "undefined") {
      } else {
        this.break = baseFormat.break;
        this.layout = baseFormat.layout;
        this.paginateBounds = baseFormat.paginateBounds;
        this.boundsSet = baseFormat.usePaginateBounds;
      }
    }
    Object.defineProperty(PdfLayoutFormat2.prototype, "layout", {
      // Properties
      /**
       * Gets or sets `layout` type of the element.
       * @private
       */
      get: function() {
        return this.layoutType;
      },
      set: function(value) {
        this.layoutType = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfLayoutFormat2.prototype, "break", {
      /**
       * Gets or sets `break` type of the element.
       * @private
       */
      get: function() {
        return this.breakType;
      },
      set: function(value) {
        this.breakType = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfLayoutFormat2.prototype, "paginateBounds", {
      /**
       * Gets or sets the `bounds` on the next page.
       * @private
       */
      get: function() {
        if (typeof this.layoutPaginateBounds === "undefined" && this.layoutPaginateBounds == null) {
          this.layoutPaginateBounds = new RectangleF(0, 0, 0, 0);
        }
        return this.layoutPaginateBounds;
      },
      set: function(value) {
        this.layoutPaginateBounds = value;
        this.boundsSet = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfLayoutFormat2.prototype, "usePaginateBounds", {
      /**
       * Gets a value indicating whether [`use paginate bounds`].
       * @private
       */
      get: function() {
        return this.boundsSet;
      },
      enumerable: true,
      configurable: true
    });
    return PdfLayoutFormat2;
  }()
);
var PdfLayoutParams = (
  /** @class */
  function() {
    function PdfLayoutParams2() {
    }
    Object.defineProperty(PdfLayoutParams2.prototype, "page", {
      // Properties
      /**
       * Gets or sets the layout `page` for the element.
       * @private
       */
      get: function() {
        return this.pdfPage;
      },
      set: function(value) {
        this.pdfPage = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfLayoutParams2.prototype, "bounds", {
      /**
       * Gets or sets layout `bounds` for the element.
       * @private
       */
      get: function() {
        return new RectangleF(this.layoutBounds.x, this.layoutBounds.y, this.layoutBounds.width, this.layoutBounds.height);
      },
      set: function(value) {
        this.layoutBounds = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfLayoutParams2.prototype, "format", {
      /**
       * Gets or sets `layout settings` for the element.
       * @private
       */
      get: function() {
        return this.layoutFormat;
      },
      set: function(value) {
        this.layoutFormat = value;
      },
      enumerable: true,
      configurable: true
    });
    return PdfLayoutParams2;
  }()
);
var PdfLayoutResult = (
  /** @class */
  function() {
    function PdfLayoutResult2(page, bounds) {
      this.pdfPage = page;
      this.layoutBounds = bounds;
    }
    Object.defineProperty(PdfLayoutResult2.prototype, "page", {
      // Properties
      /**
       * Gets the last `page` where the element was drawn.
       * @private
       */
      get: function() {
        return this.pdfPage;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfLayoutResult2.prototype, "bounds", {
      /**
       * Gets the `bounds` of the element on the last page where it was drawn.
       * @private
       */
      get: function() {
        return this.layoutBounds;
      },
      enumerable: true,
      configurable: true
    });
    return PdfLayoutResult2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/styles/pdf-borders.js
var PdfBorders = (
  /** @class */
  function() {
    function PdfBorders2() {
      var defaultBorderPenLeft = new PdfPen(new PdfColor(0, 0, 0));
      defaultBorderPenLeft.dashStyle = PdfDashStyle.Solid;
      var defaultBorderPenRight = new PdfPen(new PdfColor(0, 0, 0));
      defaultBorderPenRight.dashStyle = PdfDashStyle.Solid;
      var defaultBorderPenTop = new PdfPen(new PdfColor(0, 0, 0));
      defaultBorderPenTop.dashStyle = PdfDashStyle.Solid;
      var defaultBorderPenBottom = new PdfPen(new PdfColor(0, 0, 0));
      defaultBorderPenBottom.dashStyle = PdfDashStyle.Solid;
      this.leftPen = defaultBorderPenLeft;
      this.rightPen = defaultBorderPenRight;
      this.topPen = defaultBorderPenTop;
      this.bottomPen = defaultBorderPenBottom;
    }
    Object.defineProperty(PdfBorders2.prototype, "left", {
      // Properties
      /**
       * Gets or sets the `Left`.
       * @private
       */
      get: function() {
        return this.leftPen;
      },
      set: function(value) {
        this.leftPen = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBorders2.prototype, "right", {
      /**
       * Gets or sets the `Right`.
       * @private
       */
      get: function() {
        return this.rightPen;
      },
      set: function(value) {
        this.rightPen = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBorders2.prototype, "top", {
      /**
       * Gets or sets the `Top`.
       * @private
       */
      get: function() {
        return this.topPen;
      },
      set: function(value) {
        this.topPen = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBorders2.prototype, "bottom", {
      /**
       * Gets or sets the `Bottom`.
       * @private
       */
      get: function() {
        return this.bottomPen;
      },
      set: function(value) {
        this.bottomPen = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBorders2.prototype, "all", {
      /**
       * sets the `All`.
       * @private
       */
      set: function(value) {
        this.leftPen = this.rightPen = this.topPen = this.bottomPen = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBorders2.prototype, "isAll", {
      /**
       * Gets a value indicating whether this instance `is all`.
       * @private
       */
      get: function() {
        return this.leftPen === this.rightPen && this.leftPen === this.topPen && this.leftPen === this.bottomPen;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBorders2, "default", {
      /**
       * Gets the `default`.
       * @private
       */
      get: function() {
        return new PdfBorders2();
      },
      enumerable: true,
      configurable: true
    });
    return PdfBorders2;
  }()
);
var PdfPaddings = (
  /** @class */
  function() {
    function PdfPaddings2(left, right, top, bottom) {
      this.hasLeftPad = false;
      this.hasRightPad = false;
      this.hasTopPad = false;
      this.hasBottomPad = false;
      if (typeof left === "undefined") {
        this.bottomPad = this.topPad = this.leftPad = this.rightPad = 0.5;
      } else {
        this.leftPad = left;
        this.rightPad = right;
        this.topPad = top;
        this.bottomPad = bottom;
        this.hasLeftPad = true;
        this.hasRightPad = true;
        this.hasTopPad = true;
        this.hasBottomPad = true;
      }
    }
    Object.defineProperty(PdfPaddings2.prototype, "left", {
      // Properties
      /**
       * Gets or sets the `left` value of the edge
       * @private
       */
      get: function() {
        return this.leftPad;
      },
      set: function(value) {
        this.leftPad = value;
        this.hasLeftPad = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPaddings2.prototype, "right", {
      /**
       * Gets or sets the `right` value of the edge.
       * @private
       */
      get: function() {
        return this.rightPad;
      },
      set: function(value) {
        this.rightPad = value;
        this.hasRightPad = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPaddings2.prototype, "top", {
      /**
       * Gets or sets the `top` value of the edge
       * @private
       */
      get: function() {
        return this.topPad;
      },
      set: function(value) {
        this.topPad = value;
        this.hasTopPad = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPaddings2.prototype, "bottom", {
      /**
       * Gets or sets the `bottom` value of the edge.
       * @private
       */
      get: function() {
        return this.bottomPad;
      },
      set: function(value) {
        this.bottomPad = value;
        this.hasBottomPad = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPaddings2.prototype, "all", {
      /**
       * Sets value to all sides `left,right,top and bottom`.s
       * @private
       */
      set: function(value) {
        this.leftPad = this.rightPad = this.topPad = this.bottomPad = value;
        this.hasLeftPad = true;
        this.hasRightPad = true;
        this.hasTopPad = true;
        this.hasBottomPad = true;
      },
      enumerable: true,
      configurable: true
    });
    return PdfPaddings2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/layout-element.js
var PdfLayoutElement = (
  /** @class */
  function() {
    function PdfLayoutElement2() {
    }
    Object.defineProperty(PdfLayoutElement2.prototype, "raiseBeginPageLayout", {
      // Property
      /**
       * Gets a value indicating whether the `start page layout event` should be raised.
       * @private
       */
      get: function() {
        return typeof this.beginPageLayout !== "undefined";
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfLayoutElement2.prototype, "raiseEndPageLayout", {
      /**
       * Gets a value indicating whether the `ending page layout event` should be raised.
       * @private
       */
      get: function() {
        return typeof this.endPageLayout !== "undefined";
      },
      enumerable: true,
      configurable: true
    });
    PdfLayoutElement2.prototype.onBeginPageLayout = function(args) {
      if (this.beginPageLayout) {
        this.beginPageLayout(this, args);
      }
    };
    PdfLayoutElement2.prototype.onEndPageLayout = function(args) {
      if (this.endPageLayout) {
        this.endPageLayout(this, args);
      }
    };
    PdfLayoutElement2.prototype.drawHelper = function(arg2, arg3, arg4, arg5) {
      if (arg3 instanceof PointF && typeof arg3.width === "undefined" && typeof arg4 === "undefined") {
        return this.drawHelper(arg2, arg3.x, arg3.y);
      } else if (typeof arg3 === "number" && typeof arg4 === "number" && typeof arg5 === "undefined") {
        return this.drawHelper(arg2, arg3, arg4, null);
      } else if (arg3 instanceof RectangleF && typeof arg3.width !== "undefined" && typeof arg4 === "undefined") {
        return this.drawHelper(arg2, arg3, null);
      } else if (arg3 instanceof PointF && typeof arg3.width === "undefined" && arg4 instanceof PdfLayoutFormat) {
        return this.drawHelper(arg2, arg3.x, arg3.y, arg4);
      } else if (typeof arg3 === "number" && typeof arg4 === "number" && (arg5 instanceof PdfLayoutFormat || arg5 == null)) {
        var width = arg2.graphics.clientSize.width - arg3;
        var layoutRectangle = new RectangleF(arg3, arg4, width, 0);
        return this.drawHelper(arg2, layoutRectangle, arg5);
      } else if (arg3 instanceof RectangleF && typeof arg3.width !== "undefined" && typeof arg4 === "boolean") {
        this.bEmbedFonts = arg4;
        return this.drawHelper(arg2, arg3, null);
      } else {
        var param = new PdfLayoutParams();
        var temparg3 = arg3;
        var temparg4 = arg4;
        param.page = arg2;
        param.bounds = temparg3;
        if (param != null) {
          var x = param.bounds.x;
          var y = param.bounds.y;
          if (param.bounds.x === 0) {
            x = PdfBorders.default.right.width / 2;
          }
          if (param.bounds.y === 0) {
            y = PdfBorders.default.top.width / 2;
          }
          var newBound = new RectangleF(x, y, param.bounds.width, param.bounds.height);
          param.bounds = newBound;
        }
        param.format = temparg4 != null ? temparg4 : new PdfLayoutFormat();
        var result = this.layout(param);
        return result;
      }
    };
    return PdfLayoutElement2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/base/text-layouter.js
var __extends71 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var TextLayouter = (
  /** @class */
  function(_super) {
    __extends71(TextLayouter2, _super);
    function TextLayouter2(element2) {
      return _super.call(this, element2) || this;
    }
    Object.defineProperty(TextLayouter2.prototype, "element", {
      /**
       * Gets the layout `element`.
       * @private
       */
      get: function() {
        return _super.prototype.getElement.call(this);
      },
      enumerable: true,
      configurable: true
    });
    TextLayouter2.prototype.layoutInternal = function(param) {
      this.format = this.element.stringFormat !== null && typeof this.element.stringFormat !== "undefined" ? this.element.stringFormat : null;
      var currentPage = param.page;
      var currentBounds = param.bounds;
      var text = this.element.value;
      var result = null;
      var pageResult = new TextPageLayoutResult();
      pageResult.page = currentPage;
      pageResult.remainder = text;
      for (; ; ) {
        pageResult = this.layoutOnPage(text, currentPage, currentBounds, param);
        result = this.getLayoutResult(pageResult);
        break;
      }
      return result;
    };
    TextLayouter2.prototype.getLayoutResult = function(pageResult) {
      var result = new PdfTextLayoutResult(pageResult.page, pageResult.bounds, pageResult.remainder, pageResult.lastLineBounds);
      return result;
    };
    TextLayouter2.prototype.layoutOnPage = function(text, currentPage, currentBounds, param) {
      var result = new TextPageLayoutResult();
      result.remainder = text;
      result.page = currentPage;
      currentBounds = this.checkCorrectBounds(currentPage, currentBounds);
      var layouter = new PdfStringLayouter();
      var stringResult = layouter.layout(text, this.element.font, this.format, currentBounds, currentPage.getClientSize().height, false, new SizeF(0, 0));
      var textFinished = stringResult.remainder == null;
      var doesntFit = param.format.break === PdfLayoutBreakType.FitElement;
      var canDraw = !(doesntFit || stringResult.empty);
      var graphics = currentPage.graphics;
      var brush = this.element.getBrush();
      if (this.element instanceof PdfTextWebLink) {
        brush.color = new PdfColor(0, 0, 255);
        if (!this.element._isLastElement && this.element.stringFormat && this.element.stringFormat.alignment === PdfTextAlignment.Justify) {
          stringResult.layoutLines[0].type = LineType.LayoutBreak | LineType.FirstParagraphLine;
        }
      }
      if (this.element && this.element instanceof PdfTextElement && !this.element._isLastElement && this.element.stringFormat && this.element.stringFormat.alignment === PdfTextAlignment.Justify) {
        stringResult.layoutLines[0].type = LineType.LayoutBreak | LineType.FirstParagraphLine;
      }
      graphics.drawStringLayoutResult(stringResult, this.element.font, this.element.pen, brush, currentBounds, this.format);
      var lineInfo = stringResult.lines[stringResult.lineCount - 1];
      result.lastLineBounds = graphics.getLineBounds(stringResult.lineCount - 1, stringResult, this.element.font, currentBounds, this.format);
      result.bounds = this.getTextPageBounds(currentPage, currentBounds, stringResult);
      result.remainder = stringResult.remainder;
      result.end = textFinished;
      return result;
    };
    TextLayouter2.prototype.checkCorrectBounds = function(currentPage, currentBounds) {
      var pageSize = currentPage.graphics.clientSize;
      currentBounds.height = currentBounds.height > 0 ? currentBounds.height : pageSize.height - currentBounds.y;
      return currentBounds;
    };
    TextLayouter2.prototype.getTextPageBounds = function(currentPage, currentBounds, stringResult) {
      var textSize = stringResult.actualSize;
      var x = currentBounds.x;
      var y = currentBounds.y;
      var width = currentBounds.width > 0 ? currentBounds.width : textSize.width;
      var height = textSize.height;
      var shiftedRect = currentPage.graphics.checkCorrectLayoutRectangle(textSize, currentBounds.x, currentBounds.y, this.format);
      x = shiftedRect.x;
      var verticalShift = currentPage.graphics.getTextVerticalAlignShift(textSize.height, currentBounds.height, this.format);
      y += verticalShift;
      var bounds = new RectangleF(x, y, width, height);
      return bounds;
    };
    return TextLayouter2;
  }(ElementLayouter)
);
var TextPageLayoutResult = (
  /** @class */
  /* @__PURE__ */ function() {
    function TextPageLayoutResult2() {
    }
    return TextPageLayoutResult2;
  }()
);
var PdfTextLayoutResult = (
  /** @class */
  function(_super) {
    __extends71(PdfTextLayoutResult2, _super);
    function PdfTextLayoutResult2(page, bounds, remainder, lastLineBounds) {
      var _this = _super.call(this, page, bounds) || this;
      _this.remainderText = remainder;
      _this.lastLineTextBounds = lastLineBounds;
      return _this;
    }
    Object.defineProperty(PdfTextLayoutResult2.prototype, "remainder", {
      // Properties
      /**
       * Gets a value that contains the `text` that was not printed.
       * @private
       */
      get: function() {
        return this.remainderText;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfTextLayoutResult2.prototype, "lastLineBounds", {
      /**
       * Gets a value that indicates the `bounds` of the last line that was printed on the page.
       * @private
       */
      get: function() {
        return this.lastLineTextBounds;
      },
      enumerable: true,
      configurable: true
    });
    return PdfTextLayoutResult2;
  }(PdfLayoutResult)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/text-element.js
var __extends72 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfTextElement = (
  /** @class */
  function(_super) {
    __extends72(PdfTextElement2, _super);
    function PdfTextElement2(arg1, arg2, arg3, arg4, arg5) {
      var _this = _super.call(this) || this;
      _this.content = "";
      _this.elementValue = "";
      _this.hasPointOverload = false;
      _this._isLastElement = false;
      _this.isPdfTextElement = false;
      if (typeof arg1 === "undefined") {
      } else if (typeof arg1 === "string" && typeof arg2 === "undefined") {
        _this.content = arg1;
        _this.elementValue = arg1;
      } else if (typeof arg1 === "string" && arg2 instanceof PdfFont && typeof arg3 === "undefined") {
        _this.content = arg1;
        _this.elementValue = arg1;
        _this.pdfFont = arg2;
      } else if (typeof arg1 === "string" && arg2 instanceof PdfFont && arg3 instanceof PdfPen && typeof arg4 === "undefined") {
        _this.content = arg1;
        _this.elementValue = arg1;
        _this.pdfFont = arg2;
        _this.pdfPen = arg3;
      } else if (typeof arg1 === "string" && arg2 instanceof PdfFont && arg3 instanceof PdfBrush && typeof arg4 === "undefined") {
        _this.content = arg1;
        _this.elementValue = arg1;
        _this.pdfFont = arg2;
        _this.pdfBrush = arg3;
      } else {
        _this.content = arg1;
        _this.elementValue = arg1;
        _this.pdfFont = arg2;
        _this.pdfPen = arg3;
        _this.pdfBrush = arg4;
        _this.format = arg5;
      }
      return _this;
    }
    Object.defineProperty(PdfTextElement2.prototype, "text", {
      // Properties
      /**
       * Gets or sets a value indicating the `text` that should be printed.
       * ```typescript
       * // create a new PDF document.
       * let document : PdfDocument = new PdfDocument();
       * // add a page to the document.
       * let page1 : PdfPage = document.pages.add();
       * // create the font
       * let font : PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
       * // create the Text Web Link
       * let textLink : PdfTextWebLink = new PdfTextWebLink();
       * // set the hyperlink
       * textLink.url = 'http://www.google.com';
       * //
       * // set the link text
       * textLink.text = 'Google';
       * //
       * // set the font
       * textLink.font = font;
       * // draw the hyperlink in PDF page
       * textLink.draw(page1, new PointF(10, 40));
       * // save the document.
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this.content;
      },
      set: function(value) {
        this.elementValue = value;
        this.content = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfTextElement2.prototype, "value", {
      //get value
      /**
       * Gets or sets a `value` indicating the text that should be printed.
       * @private
       */
      get: function() {
        return this.elementValue;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfTextElement2.prototype, "pen", {
      //get pen
      /**
       * Gets or sets a `PdfPen` that determines the color, width, and style of the text
       * @private
       */
      get: function() {
        return this.pdfPen;
      },
      //Set pen value
      set: function(value) {
        this.pdfPen = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfTextElement2.prototype, "brush", {
      //get brush
      /**
       * Gets or sets the `PdfBrush` that will be used to draw the text with color and texture.
       * @private
       */
      get: function() {
        return this.pdfBrush;
      },
      //Set brush value
      set: function(value) {
        this.pdfBrush = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfTextElement2.prototype, "font", {
      //get font
      /**
       * Gets or sets a `PdfFont` that defines the text format.
       * ```typescript
       * // create a new PDF document.
       * let document : PdfDocument = new PdfDocument();
       * // add a page to the document.
       * let page1 : PdfPage = document.pages.add();
       * // create the font
       * let font : PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
       * // create the Text Web Link
       * let textLink : PdfTextWebLink = new PdfTextWebLink();
       * // set the hyperlink
       * textLink.url = 'http://www.google.com';
       * // set the link text
       * textLink.text = 'Google';
       * //
       * // set the font
       * textLink.font = font;
       * //
       * // draw the hyperlink in PDF page
       * textLink.draw(page1, new PointF(10, 40));
       * // save the document.
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this.pdfFont;
      },
      set: function(value) {
        this.pdfFont = value;
        if (this.pdfFont instanceof PdfStandardFont && this.content != null) {
          this.elementValue = PdfStandardFont.convert(this.content);
        } else {
          this.elementValue = this.content;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfTextElement2.prototype, "stringFormat", {
      /**
       * Gets or sets the `PdfStringFormat` that will be used to set the string format
       * @private
       */
      get: function() {
        return this.format;
      },
      set: function(value) {
        this.format = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfTextElement2.prototype.getBrush = function() {
      return this.pdfBrush == null || typeof this.pdfBrush === "undefined" ? new PdfSolidBrush(new PdfColor(0, 0, 0)) : this.pdfBrush;
    };
    PdfTextElement2.prototype.layout = function(param) {
      var layouter = new TextLayouter(this);
      var result = layouter.layout(param);
      return result;
    };
    PdfTextElement2.prototype.drawText = function(arg2, arg3, arg4, arg5) {
      if (arg3 instanceof PointF && typeof arg3.width === "undefined" && typeof arg4 === "undefined") {
        this.hasPointOverload = true;
        return this.drawText(arg2, arg3.x, arg3.y);
      } else if (typeof arg3 === "number" && typeof arg4 === "number" && typeof arg5 === "undefined") {
        this.hasPointOverload = true;
        return this.drawText(arg2, arg3, arg4, null);
      } else if (arg3 instanceof RectangleF && typeof arg3.width !== "undefined" && typeof arg4 === "undefined") {
        return this.drawText(arg2, arg3, null);
      } else if (arg3 instanceof PointF && typeof arg3.width === "undefined" && arg4 instanceof PdfLayoutFormat) {
        this.hasPointOverload = true;
        return this.drawText(arg2, arg3.x, arg3.y, arg4);
      } else if (typeof arg3 === "number" && typeof arg4 === "number" && (arg5 instanceof PdfLayoutFormat || arg5 == null)) {
        this.hasPointOverload = true;
        var width = arg2.graphics.clientSize.width - arg3;
        var layoutRectangle = new RectangleF(arg3, arg4, width, 0);
        return this.drawText(arg2, layoutRectangle, arg5);
      } else if (arg3 instanceof RectangleF && typeof arg3.width !== "undefined" && typeof arg4 === "boolean") {
        return this.drawText(arg2, arg3, null);
      } else {
        var layout = new PdfStringLayouter();
        if (this.hasPointOverload) {
          var stringLayoutResult = layout.layout(this.value, this.font, this.stringFormat, new SizeF(arg2.graphics.clientSize.width - arg3.x, 0), true, arg2.graphics.clientSize);
          var layoutResult = void 0;
          var param = new PdfLayoutParams();
          var temparg3 = arg3;
          var temparg4 = arg4;
          param.page = arg2;
          var previousPage = arg2;
          param.bounds = temparg3;
          param.format = temparg4 != null ? temparg4 : new PdfLayoutFormat();
          if (stringLayoutResult.lines.length > 1) {
            this.text = stringLayoutResult.layoutLines[0].text;
            if (param.bounds.y <= param.page.graphics.clientSize.height) {
              var previousPosition = new PointF(param.bounds.x, param.bounds.y);
              layoutResult = this.layout(param);
              var bounds = new RectangleF(0, layoutResult.bounds.y + stringLayoutResult.lineHeight, arg2.graphics.clientSize.width, stringLayoutResult.lineHeight);
              var isPaginate = false;
              for (var i = 1; i < stringLayoutResult.lines.length; i++) {
                param.page = layoutResult.page;
                param.bounds = new RectangleF(new PointF(bounds.x, bounds.y), new SizeF(bounds.width, bounds.height));
                this.text = stringLayoutResult.layoutLines[i].text;
                if (bounds.y + stringLayoutResult.lineHeight > layoutResult.page.graphics.clientSize.height) {
                  isPaginate = true;
                  param.page = param.page.graphics.getNextPage();
                  if (previousPosition.y > layoutResult.page.graphics.clientSize.height - layoutResult.bounds.height) {
                    bounds = new RectangleF(0, layoutResult.bounds.height, layoutResult.page.graphics.clientSize.width, stringLayoutResult.lineHeight);
                  } else {
                    bounds = new RectangleF(0, 0, layoutResult.page.graphics.clientSize.width, stringLayoutResult.lineHeight);
                  }
                  param.bounds = bounds;
                }
                if (i === stringLayoutResult.lines.length - 1) {
                  this._isLastElement = true;
                }
                layoutResult = this.layout(param);
                if (i !== stringLayoutResult.lines.length - 1) {
                  bounds = new RectangleF(0, layoutResult.bounds.y + stringLayoutResult.lineHeight, layoutResult.page.graphics.clientSize.width, stringLayoutResult.lineHeight);
                } else {
                  var lineWidth = this.font.measureString(this.text, this.format).width;
                  layoutResult = this.calculateResultBounds(layoutResult, lineWidth, layoutResult.page.graphics.clientSize.width, 0);
                }
              }
            }
            return layoutResult;
          } else {
            var lineSize = this.font.measureString(this.text, this.format);
            if (param.bounds.y <= param.page.graphics.clientSize.height) {
              layoutResult = this.layout(param);
              layoutResult = this.calculateResultBounds(layoutResult, lineSize.width, layoutResult.page.graphics.clientSize.width, 0);
            }
            return layoutResult;
          }
        } else {
          var layoutResult = layout.layout(this.value, this.font, this.stringFormat, new SizeF(arg3.width, 0), false, arg2.graphics.clientSize);
          var result = void 0;
          var param = new PdfLayoutParams();
          var temparg3 = arg3;
          var temparg4 = arg4;
          param.page = arg2;
          param.bounds = temparg3;
          param.format = temparg4 != null ? temparg4 : new PdfLayoutFormat();
          if (layoutResult.lines.length > 1) {
            this.text = layoutResult.layoutLines[0].text;
            if (param.bounds.y <= param.page.graphics.clientSize.height) {
              var previousPosition = new PointF(param.bounds.x, param.bounds.y);
              result = this.layout(param);
              var bounds = new RectangleF(temparg3.x, result.bounds.y + layoutResult.lineHeight, temparg3.width, layoutResult.lineHeight);
              var isPaginate = false;
              for (var i = 1; i < layoutResult.lines.length; i++) {
                param.page = result.page;
                param.bounds = new RectangleF(bounds.x, bounds.y, bounds.width, bounds.height);
                this.text = layoutResult.layoutLines[i].text;
                if (bounds.y + layoutResult.lineHeight > result.page.graphics.clientSize.height) {
                  isPaginate = true;
                  param.page = param.page.graphics.getNextPage();
                  if (previousPosition.y > result.page.graphics.clientSize.height - result.bounds.height) {
                    bounds = new RectangleF(temparg3.x, layoutResult.lineHeight, temparg3.width, layoutResult.lineHeight);
                  } else {
                    bounds = new RectangleF(temparg3.x, 0, temparg3.width, layoutResult.lineHeight);
                  }
                  param.bounds = bounds;
                }
                result = this.layout(param);
                if (i !== layoutResult.lines.length - 1) {
                  bounds = new RectangleF(temparg3.x, result.bounds.y + layoutResult.lineHeight, temparg3.width, layoutResult.lineHeight);
                } else {
                  var lineWidth = this.font.measureString(this.text, this.format).width;
                  result = this.calculateResultBounds(result, lineWidth, temparg3.width, temparg3.x);
                }
              }
            }
            return result;
          } else {
            var lineSize = this.font.measureString(this.text, this.format);
            if (param.bounds.y <= param.page.graphics.clientSize.height) {
              result = this.layout(param);
              result = this.calculateResultBounds(result, lineSize.width, temparg3.width, temparg3.x);
            }
            return result;
          }
        }
      }
    };
    PdfTextElement2.prototype.calculateResultBounds = function(result, lineWidth, maximumWidth, startPosition) {
      var shift = 0;
      if (this.stringFormat != null && typeof this.stringFormat !== "undefined" && this.stringFormat.alignment === PdfTextAlignment.Center) {
        result.bounds.x = startPosition + (maximumWidth - lineWidth) / 2;
        result.bounds.width = lineWidth;
      } else if (this.stringFormat != null && typeof this.stringFormat !== "undefined" && this.stringFormat.alignment === PdfTextAlignment.Right) {
        result.bounds.x = startPosition + (maximumWidth - lineWidth);
        result.bounds.width = lineWidth;
      } else if (this.stringFormat != null && typeof this.stringFormat !== "undefined" && this.stringFormat.alignment === PdfTextAlignment.Justify) {
        result.bounds.x = startPosition;
        result.bounds.width = maximumWidth;
      } else {
        result.bounds.width = startPosition;
        result.bounds.width = lineWidth;
      }
      return result;
    };
    return PdfTextElement2;
  }(PdfLayoutElement)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/annotations/annotation.js
var PdfAnnotation = (
  /** @class */
  function() {
    function PdfAnnotation2(arg1) {
      this.dictionaryProperties = new DictionaryProperties();
      this.pdfColor = new PdfColor(255, 255, 255);
      this.rectangle = new RectangleF(0, 0, 0, 0);
      this.pdfPage = null;
      this.textBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));
      this.textFont = new PdfStandardFont(PdfFontFamily.TimesRoman, 10);
      this.format = new PdfStringFormat(PdfTextAlignment.Left);
      this.content = "";
      this.pdfDictionary = new PdfDictionary();
      this.internalColor = new PdfColor();
      this.darkness = 1;
      if (typeof arg1 === "undefined") {
        this.initialize();
      } else {
        this.initialize();
        this.bounds = arg1;
      }
    }
    Object.defineProperty(PdfAnnotation2.prototype, "color", {
      // Properties
      /**
       * `Color` of the annotation
       * @private
       */
      get: function() {
        return this.pdfColor;
      },
      set: function(value) {
        this.pdfColor = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAnnotation2.prototype, "innerColor", {
      /**
       * To specifying the `Inner color` with which to fill the annotation
       * @private
       */
      get: function() {
        return this.internalColor;
      },
      set: function(value) {
        this.internalColor = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAnnotation2.prototype, "bounds", {
      /**
       * `bounds` of the annotation.
       * @private
       */
      get: function() {
        return this.rectangle;
      },
      set: function(value) {
        this.rectangle = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAnnotation2.prototype, "page", {
      /**
       * Parent `page` of the annotation.
       * @private
       */
      get: function() {
        return this.pdfPage;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAnnotation2.prototype, "font", {
      /**
       * To specifying the `Font of the text` in the annotation.
       * @private
       */
      get: function() {
        return this.textFont;
      },
      set: function(value) {
        this.textFont = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAnnotation2.prototype, "stringFormat", {
      /**
       * To specifying the `StringFormat of the text` in the annotation.
       * @private
       */
      get: function() {
        return this.format;
      },
      set: function(value) {
        this.format = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAnnotation2.prototype, "brush", {
      /**
       * To specifying the `Brush of the text` in the annotation.
       * @private
       */
      get: function() {
        return this.textBrush;
      },
      set: function(value) {
        this.textBrush = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAnnotation2.prototype, "text", {
      /**
       * `Text` of the annotation.
       * @private
       */
      get: function() {
        return this.content;
      },
      set: function(value) {
        this.content = value;
        this.dictionary.items.setValue(this.dictionaryProperties.contents, new PdfString(this.content));
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAnnotation2.prototype, "dictionary", {
      /**
       * Internal variable to store `dictionary`.
       * @hidden
       */
      get: function() {
        return this.pdfDictionary;
      },
      set: function(value) {
        this.pdfDictionary = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfAnnotation2.prototype.initialize = function() {
      this.pdfDictionary.annotationBeginSave = new SaveAnnotationEventHandler(this);
      this.pdfDictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.annot));
    };
    PdfAnnotation2.prototype.setPage = function(page) {
      this.pdfPage = page;
      this.pdfDictionary.items.setValue(this.dictionaryProperties.p, new PdfReferenceHolder(this.pdfPage));
    };
    PdfAnnotation2.prototype.beginSave = function() {
      this.save();
    };
    PdfAnnotation2.prototype.save = function() {
      var nativeRectangle = new RectangleF(this.rectangle.x, this.rectangle.y, this.rectangle.width, this.rectangle.height);
      var section = this.pdfPage.section;
      var initialHeight = nativeRectangle.height;
      var tempLoacation = section.pointToNativePdf(this.page, new PointF(nativeRectangle.x, nativeRectangle.y));
      nativeRectangle.x = tempLoacation.x;
      nativeRectangle.width = tempLoacation.x + nativeRectangle.width;
      nativeRectangle.y = tempLoacation.y - this.page.document.pageSettings.margins.top;
      nativeRectangle.height = nativeRectangle.y - initialHeight;
      this.pdfDictionary.items.setValue(this.dictionaryProperties.rect, PdfArray.fromRectangle(nativeRectangle));
      this.dictionary.items.setValue(this.dictionaryProperties.ca, new PdfNumber(this.darkness));
    };
    Object.defineProperty(PdfAnnotation2.prototype, "element", {
      /* tslint:enable */
      // IPdfWrapper Members
      /**
       * Gets the `element`.
       * @private
       */
      get: function() {
        return this.pdfDictionary;
      },
      enumerable: true,
      configurable: true
    });
    return PdfAnnotation2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/annotations/link-annotation.js
var __extends73 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfLinkAnnotation = (
  /** @class */
  function(_super) {
    __extends73(PdfLinkAnnotation2, _super);
    function PdfLinkAnnotation2(rectangle) {
      return _super.call(this, rectangle) || this;
    }
    PdfLinkAnnotation2.prototype.initialize = function() {
      _super.prototype.initialize.call(this);
      this.dictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.link));
    };
    return PdfLinkAnnotation2;
  }(PdfAnnotation)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/annotations/action-link-annotation.js
var __extends74 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfActionLinkAnnotation = (
  /** @class */
  function(_super) {
    __extends74(PdfActionLinkAnnotation2, _super);
    function PdfActionLinkAnnotation2(rectangle) {
      var _this = _super.call(this, rectangle) || this;
      _this.pdfAction = null;
      return _this;
    }
    PdfActionLinkAnnotation2.prototype.getSetAction = function(value) {
      if (typeof value === "undefined") {
        return this.pdfAction;
      } else {
        this.pdfAction = value;
      }
    };
    return PdfActionLinkAnnotation2;
  }(PdfLinkAnnotation)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/actions/action.js
var PdfAction = (
  /** @class */
  function() {
    function PdfAction2() {
      this.action = null;
      this.dictionaryProperties = new DictionaryProperties();
      this.initialize();
    }
    Object.defineProperty(PdfAction2.prototype, "next", {
      // Properties
      /**
       * Gets and Sets the `Next` action to perform.
       * @private
       */
      get: function() {
        return this.action;
      },
      set: function(value) {
        this.action = value;
        this.dictionary.items.setValue(this.dictionaryProperties.next, new PdfReferenceHolder(this.action));
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAction2.prototype, "dictionary", {
      /**
       * Gets and Sets the instance of PdfDictionary class for `Dictionary`.
       * @private
       */
      get: function() {
        if (typeof this.pdfDictionary === "undefined") {
          this.pdfDictionary = new PdfDictionary();
        }
        return this.pdfDictionary;
      },
      enumerable: true,
      configurable: true
    });
    PdfAction2.prototype.initialize = function() {
      this.dictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.action));
    };
    Object.defineProperty(PdfAction2.prototype, "element", {
      // IPdfWrapper Members
      /**
       * Gets the `Element` as IPdfPrimitive class.
       * @private
       */
      get: function() {
        return this.dictionary;
      },
      enumerable: true,
      configurable: true
    });
    return PdfAction2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/actions/uri-action.js
var __extends75 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfUriAction = (
  /** @class */
  function(_super) {
    __extends75(PdfUriAction2, _super);
    function PdfUriAction2(uri) {
      var _this = _super.call(this) || this;
      _this.uniformResourceIdentifier = "";
      return _this;
    }
    Object.defineProperty(PdfUriAction2.prototype, "uri", {
      // Properties
      /**
       * Gets and Sets the value of `Uri`.
       * @private
       */
      get: function() {
        return this.uniformResourceIdentifier;
      },
      set: function(value) {
        this.uniformResourceIdentifier = value;
        this.dictionary.items.setValue(this.dictionaryProperties.uri, new PdfString(this.uniformResourceIdentifier));
      },
      enumerable: true,
      configurable: true
    });
    PdfUriAction2.prototype.initialize = function() {
      _super.prototype.initialize.call(this);
      this.dictionary.items.setValue(this.dictionaryProperties.s, new PdfName(this.dictionaryProperties.uri));
    };
    return PdfUriAction2;
  }(PdfAction)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/annotations/uri-annotation.js
var __extends76 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfUriAnnotation = (
  /** @class */
  function(_super) {
    __extends76(PdfUriAnnotation2, _super);
    function PdfUriAnnotation2(rectangle, uri) {
      var _this = _super.call(this, rectangle) || this;
      if (typeof uri !== "undefined") {
        _this.uri = uri;
      }
      return _this;
    }
    Object.defineProperty(PdfUriAnnotation2.prototype, "uriAction", {
      /**
       * Get `action` of the annotation.
       * @private
       */
      get: function() {
        if (typeof this.pdfUriAction === "undefined") {
          this.pdfUriAction = new PdfUriAction();
        }
        return this.pdfUriAction;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfUriAnnotation2.prototype, "uri", {
      // Properties
      /**
       * Gets or sets the `Uri` address.
       * @private
       */
      get: function() {
        return this.uriAction.uri;
      },
      set: function(value) {
        if (this.uriAction.uri !== value) {
          this.uriAction.uri = value;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfUriAnnotation2.prototype, "action", {
      /**
       * Gets or sets the `action`.
       * @private
       */
      get: function() {
        return this.getSetAction();
      },
      set: function(value) {
        this.getSetAction(value);
        this.uriAction.next = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfUriAnnotation2.prototype.initialize = function() {
      _super.prototype.initialize.call(this);
      this.dictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.link));
      var tempPrimitive = this.uriAction.element;
      this.dictionary.items.setValue(this.dictionaryProperties.a, this.uriAction.element);
    };
    return PdfUriAnnotation2;
  }(PdfActionLinkAnnotation)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/annotations/pdf-text-web-link.js
var __extends77 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfTextWebLink = (
  /** @class */
  function(_super) {
    __extends77(PdfTextWebLink2, _super);
    function PdfTextWebLink2() {
      var _this = _super.call(this) || this;
      _this.uniformResourceLocator = "";
      _this.uriAnnotation = null;
      _this.recalculateBounds = false;
      _this.defaultBorder = new PdfArray();
      for (var i = 0; i < 3; i++) {
        _this.defaultBorder.add(new PdfNumber(0));
      }
      return _this;
    }
    Object.defineProperty(PdfTextWebLink2.prototype, "url", {
      // Properties
      /**
       * Gets or sets the `Uri address`.
       * ```typescript
       * // create a new PDF document.
       * let document : PdfDocument = new PdfDocument();
       * // add a page to the document.
       * let page1 : PdfPage = document.pages.add();
       * // create the font
       * let font : PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
       * // create the Text Web Link
       * let textLink : PdfTextWebLink = new PdfTextWebLink();
       * //
       * // set the hyperlink
       * textLink.url = 'http://www.google.com';
       * //
       * // set the link text
       * textLink.text = 'Google';
       * // set the font
       * textLink.font = font;
       * // draw the hyperlink in PDF page
       * textLink.draw(page1, new PointF(10, 40));
       * // save the document.
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this.uniformResourceLocator;
      },
      set: function(value) {
        if (value.length === 0) {
          throw new Error("ArgumentException : Url - string can not be empty");
        }
        this.uniformResourceLocator = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfTextWebLink2.prototype.draw = function(arg1, arg2) {
      if (arg1 instanceof PdfPage) {
        var layout = new PdfStringLayouter();
        var previousFontStyle = this.font.style;
        if (arg2 instanceof PointF) {
          this.recalculateBounds = true;
          this.font.style = PdfFontStyle.Underline;
          var layoutResult = layout.layout(this.value, this.font, this.stringFormat, new SizeF(arg1.graphics.clientSize.width - arg2.x, 0), true, arg1.graphics.clientSize);
          if (layoutResult.lines.length === 1) {
            var textSize = this.font.measureString(this.value);
            var rect = new RectangleF(arg2, textSize);
            rect = this.calculateBounds(rect, textSize.width, arg1.graphics.clientSize.width, arg2.x);
            this.uriAnnotation = new PdfUriAnnotation(rect, this.url);
            this.uriAnnotation.dictionary.items.setValue("Border", this.defaultBorder);
            arg1.annotations.add(this.uriAnnotation);
            var result = this.drawText(arg1, arg2);
            this.font.style = previousFontStyle;
            return result;
          } else {
            var result = this.drawMultipleLineWithPoint(layoutResult, arg1, arg2);
            this.font.style = previousFontStyle;
            return result;
          }
        } else {
          var layoutResult = layout.layout(this.value, this.font, this.stringFormat, new SizeF(arg2.width, 0), false, new SizeF(0, 0));
          this.font.style = PdfFontStyle.Underline;
          if (layoutResult.lines.length === 1) {
            var textSize = this.font.measureString(this.value);
            var rect = new RectangleF(new PointF(arg2.x, arg2.y), textSize);
            rect = this.calculateBounds(rect, textSize.width, arg2.width, arg2.x);
            this.uriAnnotation = new PdfUriAnnotation(rect, this.url);
            this.uriAnnotation.dictionary.items.setValue("Border", this.defaultBorder);
            arg1.annotations.add(this.uriAnnotation);
            var returnValue = this.drawText(arg1, arg2);
            this.font.style = previousFontStyle;
            return returnValue;
          } else {
            var returnValue = this.drawMultipleLineWithBounds(layoutResult, arg1, arg2);
            this.font.style = previousFontStyle;
            return returnValue;
          }
        }
      } else {
        var page = new PdfPage();
        page = arg1.page;
        return this.draw(page, arg2);
      }
    };
    PdfTextWebLink2.prototype.drawMultipleLineWithPoint = function(result, page, location2) {
      var layoutResult;
      for (var i = 0; i < result.layoutLines.length; i++) {
        var size = this.font.measureString(result.lines[i].text);
        if (i === result.layoutLines.length - 1 && this.stringFormat && this.stringFormat.alignment === PdfTextAlignment.Justify) {
          this._isLastElement = true;
        }
        var bounds = new RectangleF(location2, size);
        if (i !== 0) {
          bounds.x = 0;
        }
        this.text = result.lines[i].text;
        if (bounds.y + size.height > page.graphics.clientSize.height) {
          if (i !== 0) {
            page = page.graphics.getNextPage();
            bounds = new RectangleF(0, 0, page.graphics.clientSize.width, size.height);
            location2.y = 0;
          } else {
            break;
          }
        }
        bounds = this.calculateBounds(bounds, size.width, page.graphics.clientSize.width, bounds.x);
        this.uriAnnotation = new PdfUriAnnotation(bounds, this.url);
        this.uriAnnotation.dictionary.items.setValue("Border", this.defaultBorder);
        page.annotations.add(this.uriAnnotation);
        if (i !== 0) {
          layoutResult = this.drawText(page, new PointF(0, bounds.y));
        } else {
          layoutResult = this.drawText(page, bounds.x, bounds.y);
        }
        location2.y += size.height;
      }
      return layoutResult;
    };
    PdfTextWebLink2.prototype.drawMultipleLineWithBounds = function(result, page, bounds) {
      var layoutResult;
      for (var i = 0; i < result.layoutLines.length; i++) {
        var size = this.font.measureString(result.lines[i].text);
        var internalBounds = new RectangleF(new PointF(bounds.x, bounds.y), size);
        internalBounds = this.calculateBounds(internalBounds, size.width, bounds.width, bounds.x);
        this.text = result.lines[i].text;
        if (bounds.y + size.height > page.graphics.clientSize.height) {
          if (i !== 0) {
            page = page.graphics.getNextPage();
            bounds = new RectangleF(bounds.x, 0, bounds.width, size.height);
            internalBounds.y = 0;
          } else {
            break;
          }
        }
        this.uriAnnotation = new PdfUriAnnotation(internalBounds, this.url);
        this.uriAnnotation.dictionary.items.setValue("Border", this.defaultBorder);
        page.annotations.add(this.uriAnnotation);
        layoutResult = this.drawText(page, bounds);
        bounds.y += size.height;
      }
      return layoutResult;
    };
    PdfTextWebLink2.prototype.calculateBounds = function(currentBounds, lineWidth, maximumWidth, startPosition) {
      var shift = 0;
      if (this.stringFormat != null && typeof this.stringFormat !== "undefined" && this.stringFormat.alignment === PdfTextAlignment.Center) {
        currentBounds.x = startPosition + (maximumWidth - lineWidth) / 2;
        currentBounds.width = lineWidth;
      } else if (this.stringFormat != null && typeof this.stringFormat !== "undefined" && this.stringFormat.alignment === PdfTextAlignment.Right) {
        currentBounds.x = startPosition + (maximumWidth - lineWidth);
        currentBounds.width = lineWidth;
      } else if (this.stringFormat != null && typeof this.stringFormat !== "undefined" && this.stringFormat.alignment === PdfTextAlignment.Justify) {
        currentBounds.x = startPosition;
        currentBounds.width = maximumWidth;
      } else {
        currentBounds.width = startPosition;
        currentBounds.width = lineWidth;
      }
      return currentBounds;
    };
    return PdfTextWebLink2;
  }(PdfTextElement)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/pdf-numbers-convertor.js
var PdfNumbersConvertor = (
  /** @class */
  function() {
    function PdfNumbersConvertor2() {
    }
    PdfNumbersConvertor2.convert = function(intArabic, numberStyle) {
      var result = "";
      switch (numberStyle) {
        case PdfNumberStyle.None:
          result = "";
          break;
        case PdfNumberStyle.Numeric:
          result = intArabic.toString();
          break;
        case PdfNumberStyle.LowerLatin:
          result = this.arabicToLetter(intArabic).toLowerCase();
          break;
        case PdfNumberStyle.LowerRoman:
          result = this.arabicToRoman(intArabic).toLowerCase();
          break;
        case PdfNumberStyle.UpperLatin:
          result = this.arabicToLetter(intArabic);
          break;
        case PdfNumberStyle.UpperRoman:
          result = this.arabicToRoman(intArabic);
          break;
      }
      return result;
    };
    PdfNumbersConvertor2.arabicToRoman = function(intArabic) {
      var retval = "";
      var retvalM = this.generateNumber(intArabic, 1e3, "M");
      retval += retvalM.returnValue;
      intArabic = retvalM.intArabic;
      var retvalCM = this.generateNumber(intArabic, 900, "CM");
      retval += retvalCM.returnValue;
      intArabic = retvalCM.intArabic;
      var retvalD = this.generateNumber(intArabic, 500, "D");
      retval += retvalD.returnValue;
      intArabic = retvalD.intArabic;
      var retvalCD = this.generateNumber(intArabic, 400, "CD");
      retval += retvalCD.returnValue;
      intArabic = retvalCD.intArabic;
      var retvalC = this.generateNumber(intArabic, 100, "C");
      retval += retvalC.returnValue;
      intArabic = retvalC.intArabic;
      var retvalXC = this.generateNumber(intArabic, 90, "XC");
      retval += retvalXC.returnValue;
      intArabic = retvalXC.intArabic;
      var retvalL = this.generateNumber(intArabic, 50, "L");
      retval += retvalL.returnValue;
      intArabic = retvalL.intArabic;
      var retvalXL = this.generateNumber(intArabic, 40, "XL");
      retval += retvalXL.returnValue;
      intArabic = retvalXL.intArabic;
      var retvalX = this.generateNumber(intArabic, 10, "X");
      retval += retvalX.returnValue;
      intArabic = retvalX.intArabic;
      var retvalIX = this.generateNumber(intArabic, 9, "IX");
      retval += retvalIX.returnValue;
      intArabic = retvalIX.intArabic;
      var retvalV = this.generateNumber(intArabic, 5, "V");
      retval += retvalV.returnValue;
      intArabic = retvalV.intArabic;
      var retvalIV = this.generateNumber(intArabic, 4, "IV");
      retval += retvalIV.returnValue;
      intArabic = retvalIV.intArabic;
      var retvalI = this.generateNumber(intArabic, 1, "I");
      retval += retvalI.returnValue;
      intArabic = retvalI.intArabic;
      return retval.toString();
    };
    PdfNumbersConvertor2.arabicToLetter = function(arabic) {
      var stack = this.convertToLetter(arabic);
      var result = "";
      while (stack.length > 0) {
        var num = stack.pop();
        result = this.appendChar(result, num);
      }
      return result.toString();
    };
    PdfNumbersConvertor2.generateNumber = function(value, magnitude, letter) {
      var numberstring = "";
      while (value >= magnitude) {
        value -= magnitude;
        numberstring += letter;
      }
      return {
        returnValue: numberstring.toString(),
        intArabic: value
      };
    };
    PdfNumbersConvertor2.convertToLetter = function(arabic) {
      if (arabic <= 0) {
        throw Error("ArgumentOutOfRangeException-arabic, Value can not be less 0");
      }
      var stack = [];
      while (arabic > this.letterLimit) {
        var remainder = arabic % this.letterLimit;
        if (remainder === 0) {
          arabic = arabic / this.letterLimit - 1;
          remainder = this.letterLimit;
        } else {
          arabic /= this.letterLimit;
        }
        stack.push(remainder);
      }
      stack.push(arabic);
      return stack;
    };
    PdfNumbersConvertor2.appendChar = function(builder, value) {
      var letter = String.fromCharCode(PdfNumbersConvertor2.acsiiStartIndex + value);
      builder += letter;
      return builder;
    };
    PdfNumbersConvertor2.letterLimit = 26;
    PdfNumbersConvertor2.acsiiStartIndex = 65 - 1;
    return PdfNumbersConvertor2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/pdf-template-value-pair.js
var PdfTemplateValuePair = (
  /** @class */
  function() {
    function PdfTemplateValuePair2(template, value) {
      this.pdfTemplate = null;
      this.content = "";
      if (typeof template === "undefined") {
      } else {
        this.template = template;
        this.value = value;
      }
    }
    Object.defineProperty(PdfTemplateValuePair2.prototype, "template", {
      // Properties
      /**
       * Gets or sets the template.
       * @private
       */
      get: function() {
        return this.pdfTemplate;
      },
      set: function(value) {
        this.pdfTemplate = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfTemplateValuePair2.prototype, "value", {
      /**
       * Gets or sets the value.
       * @private
       */
      get: function() {
        return this.content;
      },
      set: function(value) {
        this.content = value;
      },
      enumerable: true,
      configurable: true
    });
    return PdfTemplateValuePair2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/multiple-value-field.js
var __extends78 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfMultipleValueField = (
  /** @class */
  function(_super) {
    __extends78(PdfMultipleValueField2, _super);
    function PdfMultipleValueField2() {
      var _this = _super.call(this) || this;
      _this.list = new TemporaryDictionary();
      return _this;
    }
    PdfMultipleValueField2.prototype.performDraw = function(graphics, location2, scalingX, scalingY) {
      _super.prototype.performDrawHelper.call(this, graphics, location2, scalingX, scalingY);
      var value = this.getValue(graphics);
      var template = new PdfTemplate(this.getSize());
      this.list.setValue(graphics, new PdfTemplateValuePair(template, value));
      var g = template.graphics;
      var size = this.getSize();
      template.graphics.drawString(value, this.getFont(), this.pen, this.getBrush(), 0, 0, size.width, size.height, this.stringFormat);
      var drawLocation = new PointF(location2.x + this.location.x, location2.y + this.location.y);
      graphics.drawPdfTemplate(template, drawLocation, new SizeF(template.width * scalingX, template.height * scalingY));
    };
    return PdfMultipleValueField2;
  }(PdfAutomaticField)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/pdf-page-number-field.js
var __extends79 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfPageNumberField = (
  /** @class */
  function(_super) {
    __extends79(PdfPageNumberField2, _super);
    function PdfPageNumberField2(font, arg2) {
      var _this = _super.call(this) || this;
      _this.internalNumberStyle = PdfNumberStyle.Numeric;
      if (typeof arg2 === "undefined") {
        _this.font = font;
      } else if (arg2 instanceof PdfBrush) {
        _this.font = font;
        _this.brush = arg2;
      } else {
        _this.font = font;
        _this.bounds = arg2;
      }
      return _this;
    }
    Object.defineProperty(PdfPageNumberField2.prototype, "numberStyle", {
      // Properties
      /**
       * Gets and sets the number style of the page number field.
       * @private
       */
      get: function() {
        return this.internalNumberStyle;
      },
      set: function(value) {
        this.internalNumberStyle = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfPageNumberField2.prototype.getValue = function(graphics) {
      var result = null;
      var page = this.getPageFromGraphics(graphics);
      result = this.internalGetValue(page);
      return result;
    };
    PdfPageNumberField2.prototype.internalGetValue = function(page) {
      var document2 = page.document;
      var pageIndex = document2.pages.indexOf(page) + 1;
      return PdfNumbersConvertor.convert(pageIndex, this.numberStyle);
    };
    return PdfPageNumberField2;
  }(PdfMultipleValueField)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/composite-field.js
var __extends80 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfCompositeField = (
  /** @class */
  function(_super) {
    __extends80(PdfCompositeField2, _super);
    function PdfCompositeField2(font, brush, text) {
      var list = [];
      for (var _i = 3; _i < arguments.length; _i++) {
        list[_i - 3] = arguments[_i];
      }
      var _this = _super.call(this) || this;
      _this.internalAutomaticFields = null;
      _this.internalText = "";
      _this.font = font;
      _this.brush = brush;
      _this.text = text;
      _this.automaticFields = list;
      return _this;
    }
    Object.defineProperty(PdfCompositeField2.prototype, "text", {
      // Properties
      /**
       * Gets and sets the content of the field.
       * @public
       */
      get: function() {
        return this.internalText;
      },
      set: function(value) {
        this.internalText = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfCompositeField2.prototype, "automaticFields", {
      /**
       * Gets and sets the list of the field to drawn.
       * @public
       */
      get: function() {
        return this.internalAutomaticFields;
      },
      set: function(value) {
        this.internalAutomaticFields = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfCompositeField2.prototype.getValue = function(graphics) {
      var values = [];
      var text = this.text.toString();
      if (typeof this.automaticFields !== "undefined" && this.automaticFields != null && this.automaticFields.length > 0) {
        for (var i = 0; i < this.automaticFields.length; i++) {
          var automaticField = this.automaticFields[i];
          text = text.replace("{" + i + "}", automaticField.getValue(graphics));
        }
      }
      return text;
    };
    return PdfCompositeField2;
  }(PdfMultipleValueField)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/single-value-field.js
var __extends81 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfSingleValueField = (
  /** @class */
  function(_super) {
    __extends81(PdfSingleValueField2, _super);
    function PdfSingleValueField2() {
      var _this = _super.call(this) || this;
      _this.list = new TemporaryDictionary();
      _this.painterGraphics = [];
      return _this;
    }
    PdfSingleValueField2.prototype.performDraw = function(graphics, location2, scalingX, scalingY) {
      _super.prototype.performDrawHelper.call(this, graphics, location2, scalingX, scalingY);
      var page = this.getPageFromGraphics(graphics);
      var document2 = page.document;
      var textValue = this.getValue(graphics);
      if (this.list.containsKey(document2)) {
        var pair = this.list.getValue(document2);
        var drawLocation = new PointF(location2.x + this.location.x, location2.y + this.location.y);
        graphics.drawPdfTemplate(pair.template, drawLocation, new SizeF(pair.template.width * scalingX, pair.template.height * scalingY));
        this.painterGraphics.push(graphics);
      } else {
        var size = this.getSize();
        var template = new PdfTemplate(size);
        this.list.setValue(document2, new PdfTemplateValuePair(template, textValue));
        template.graphics.drawString(textValue, this.getFont(), this.pen, this.getBrush(), 0, 0, size.width, size.height, this.stringFormat);
        var drawLocation = new PointF(location2.x + this.location.x, location2.y + this.location.y);
        graphics.drawPdfTemplate(template, drawLocation, new SizeF(template.width * scalingX, template.height * scalingY));
        this.painterGraphics.push(graphics);
      }
    };
    return PdfSingleValueField2;
  }(PdfAutomaticField)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/page-count-field.js
var __extends82 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfPageCountField = (
  /** @class */
  function(_super) {
    __extends82(PdfPageCountField2, _super);
    function PdfPageCountField2(font, arg2) {
      var _this = _super.call(this) || this;
      _this.internalNumberStyle = PdfNumberStyle.Numeric;
      if (typeof arg2 === "undefined") {
        _this.font = font;
      } else if (arg2 instanceof PdfBrush) {
        _this.font = font;
        _this.brush = arg2;
      } else {
        _this.font = font;
        _this.bounds = arg2;
      }
      return _this;
    }
    Object.defineProperty(PdfPageCountField2.prototype, "numberStyle", {
      // Properties
      /**
       * Gets and sets the number style of the field.
       * @public
       */
      get: function() {
        return this.internalNumberStyle;
      },
      set: function(value) {
        this.internalNumberStyle = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfPageCountField2.prototype.getValue = function(graphics) {
      var result = null;
      var page = this.getPageFromGraphics(graphics);
      var document2 = page.section.parent.document;
      var count = document2.pages.count;
      result = PdfNumbersConvertor.convert(count, this.numberStyle);
      return result;
    };
    return PdfPageCountField2;
  }(PdfSingleValueField)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/tables/light-tables/enum.js
var PdfBorderOverlapStyle;
(function(PdfBorderOverlapStyle2) {
  PdfBorderOverlapStyle2[PdfBorderOverlapStyle2["Overlap"] = 0] = "Overlap";
  PdfBorderOverlapStyle2[PdfBorderOverlapStyle2["Inside"] = 1] = "Inside";
})(PdfBorderOverlapStyle || (PdfBorderOverlapStyle = {}));

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/styles/style.js
var __extends83 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfGridStyleBase = (
  /** @class */
  function() {
    function PdfGridStyleBase2() {
    }
    Object.defineProperty(PdfGridStyleBase2.prototype, "backgroundBrush", {
      // Properties
      /**
       * Gets or sets the `background brush`.
       * @private
       */
      get: function() {
        return this.gridBackgroundBrush;
      },
      set: function(value) {
        this.gridBackgroundBrush = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridStyleBase2.prototype, "textBrush", {
      /**
       * Gets or sets the `text brush`.
       * @private
       */
      get: function() {
        return this.gridTextBrush;
      },
      set: function(value) {
        this.gridTextBrush = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridStyleBase2.prototype, "textPen", {
      /**
       * Gets or sets the `text pen`.
       * @private
       */
      get: function() {
        return this.gridTextPen;
      },
      set: function(value) {
        this.gridTextPen = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridStyleBase2.prototype, "font", {
      /**
       * Gets or sets the `font`.
       * @private
       */
      get: function() {
        return this.gridFont;
      },
      set: function(value) {
        this.gridFont = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridStyleBase2.prototype, "backgroundImage", {
      /**
       * Gets or sets the `background Image`.
       * @private
       */
      get: function() {
        return this.gridBackgroundImage;
      },
      set: function(value) {
        this.gridBackgroundImage = value;
      },
      enumerable: true,
      configurable: true
    });
    return PdfGridStyleBase2;
  }()
);
var PdfGridStyle = (
  /** @class */
  function(_super) {
    __extends83(PdfGridStyle2, _super);
    function PdfGridStyle2() {
      var _this = _super.call(this) || this;
      _this.gridBorderOverlapStyle = PdfBorderOverlapStyle.Overlap;
      _this.bAllowHorizontalOverflow = false;
      _this.gridHorizontalOverflowType = PdfHorizontalOverflowType.LastPage;
      return _this;
    }
    Object.defineProperty(PdfGridStyle2.prototype, "cellSpacing", {
      //Properties
      /**
       * Gets or sets the `cell spacing` of the 'PdfGrid'.
       * @private
       */
      get: function() {
        if (typeof this.gridCellSpacing === "undefined") {
          this.gridCellSpacing = 0;
        }
        return this.gridCellSpacing;
      },
      set: function(value) {
        this.gridCellSpacing = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridStyle2.prototype, "horizontalOverflowType", {
      /**
       * Gets or sets the type of the `horizontal overflow` of the 'PdfGrid'.
       * @private
       */
      get: function() {
        return this.gridHorizontalOverflowType;
      },
      set: function(value) {
        this.gridHorizontalOverflowType = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridStyle2.prototype, "allowHorizontalOverflow", {
      /**
       * Gets or sets a value indicating whether to `allow horizontal overflow`.
       * @private
       */
      get: function() {
        return this.bAllowHorizontalOverflow;
      },
      set: function(value) {
        this.bAllowHorizontalOverflow = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridStyle2.prototype, "cellPadding", {
      /**
       * Gets or sets the `cell padding`.
       * @private
       */
      get: function() {
        if (typeof this.gridCellPadding === "undefined") {
          this.gridCellPadding = new PdfPaddings();
        }
        return this.gridCellPadding;
      },
      set: function(value) {
        if (typeof this.gridCellPadding === "undefined") {
          this.gridCellPadding = new PdfPaddings();
          this.gridCellPadding = value;
        } else {
          this.gridCellPadding = value;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridStyle2.prototype, "borderOverlapStyle", {
      /**
       * Gets or sets the `border overlap style` of the 'PdfGrid'.
       * @private
       */
      get: function() {
        return this.gridBorderOverlapStyle;
      },
      set: function(value) {
        this.gridBorderOverlapStyle = value;
      },
      enumerable: true,
      configurable: true
    });
    return PdfGridStyle2;
  }(PdfGridStyleBase)
);
var PdfGridCellStyle = (
  /** @class */
  function(_super) {
    __extends83(PdfGridCellStyle2, _super);
    function PdfGridCellStyle2() {
      var _this = _super.call(this) || this;
      _this.gridCellBorders = PdfBorders.default;
      return _this;
    }
    Object.defineProperty(PdfGridCellStyle2.prototype, "stringFormat", {
      //Properties
      /**
       * Gets the `string format` of the 'PdfGridCell'.
       * @private
       */
      get: function() {
        return this.format;
      },
      set: function(value) {
        this.format = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCellStyle2.prototype, "borders", {
      /**
       * Gets or sets the `border` of the 'PdfGridCell'.
       * @private
       */
      get: function() {
        return this.gridCellBorders;
      },
      set: function(value) {
        this.gridCellBorders = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCellStyle2.prototype, "cellPadding", {
      /**
       * Gets or sets the `cell padding`.
       * @private
       */
      get: function() {
        return this.gridCellPadding;
      },
      set: function(value) {
        if (this.gridCellPadding == null || typeof this.gridCellPadding === "undefined") {
          this.gridCellPadding = new PdfPaddings();
        }
        this.gridCellPadding = value;
      },
      enumerable: true,
      configurable: true
    });
    return PdfGridCellStyle2;
  }(PdfGridStyleBase)
);
var PdfGridRowStyle = (
  /** @class */
  function() {
    function PdfGridRowStyle2() {
    }
    Object.defineProperty(PdfGridRowStyle2.prototype, "backgroundBrush", {
      // Properties
      /**
       * Gets or sets the `background brush`.
       * @private
       */
      get: function() {
        return this.gridRowBackgroundBrush;
      },
      enumerable: true,
      configurable: true
    });
    PdfGridRowStyle2.prototype.setBackgroundBrush = function(value) {
      this.gridRowBackgroundBrush = value;
      if (typeof this.parent !== "undefined") {
        for (var i = 0; i < this.parent.cells.count; i++) {
          this.parent.cells.getCell(i).style.backgroundBrush = value;
        }
      }
    };
    Object.defineProperty(PdfGridRowStyle2.prototype, "textBrush", {
      /**
       * Gets or sets the `text brush`.
       * @private
       */
      get: function() {
        return this.gridRowTextBrush;
      },
      enumerable: true,
      configurable: true
    });
    PdfGridRowStyle2.prototype.setTextBrush = function(value) {
      this.gridRowTextBrush = value;
      if (typeof this.parent !== "undefined") {
        for (var i = 0; i < this.parent.cells.count; i++) {
          this.parent.cells.getCell(i).style.textBrush = value;
        }
      }
    };
    Object.defineProperty(PdfGridRowStyle2.prototype, "textPen", {
      /**
       * Gets or sets the `text pen`.
       * @private
       */
      get: function() {
        return this.gridRowTextPen;
      },
      enumerable: true,
      configurable: true
    });
    PdfGridRowStyle2.prototype.setTextPen = function(value) {
      this.gridRowTextPen = value;
      if (typeof this.parent !== "undefined") {
        for (var i = 0; i < this.parent.cells.count; i++) {
          this.parent.cells.getCell(i).style.textPen = value;
        }
      }
    };
    Object.defineProperty(PdfGridRowStyle2.prototype, "font", {
      /**
       * Gets or sets the `font`.
       * @private
       */
      get: function() {
        return this.gridRowFont;
      },
      enumerable: true,
      configurable: true
    });
    PdfGridRowStyle2.prototype.setFont = function(value) {
      this.gridRowFont = value;
      if (typeof this.parent !== "undefined") {
        for (var i = 0; i < this.parent.cells.count; i++) {
          this.parent.cells.getCell(i).style.font = value;
        }
      }
    };
    Object.defineProperty(PdfGridRowStyle2.prototype, "border", {
      /**
       * Gets or sets the `border` of the current row.
       * @private
       */
      get: function() {
        if (typeof this.gridRowBorder === "undefined") {
          this.setBorder(new PdfBorders());
        }
        return this.gridRowBorder;
      },
      enumerable: true,
      configurable: true
    });
    PdfGridRowStyle2.prototype.setBorder = function(value) {
      this.gridRowBorder = value;
      if (typeof this.parent !== "undefined") {
        for (var i = 0; i < this.parent.cells.count; i++) {
          this.parent.cells.getCell(i).style.borders = value;
        }
      }
    };
    PdfGridRowStyle2.prototype.setParent = function(parent) {
      this.parent = parent;
    };
    Object.defineProperty(PdfGridRowStyle2.prototype, "backgroundImage", {
      /**
       * Gets or sets the `backgroundImage` of the 'PdfGridCell'.
       * @private
       */
      get: function() {
        return this.gridRowBackgroundImage;
      },
      enumerable: true,
      configurable: true
    });
    PdfGridRowStyle2.prototype.setBackgroundImage = function(value) {
      this.gridRowBackgroundImage = value;
    };
    return PdfGridRowStyle2;
  }()
);
var PdfHorizontalOverflowType;
(function(PdfHorizontalOverflowType2) {
  PdfHorizontalOverflowType2[PdfHorizontalOverflowType2["NextPage"] = 0] = "NextPage";
  PdfHorizontalOverflowType2[PdfHorizontalOverflowType2["LastPage"] = 1] = "LastPage";
})(PdfHorizontalOverflowType || (PdfHorizontalOverflowType = {}));

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/layout/grid-layouter.js
var __extends84 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfGridLayouter = (
  /** @class */
  function(_super) {
    __extends84(PdfGridLayouter2, _super);
    function PdfGridLayouter2(baseFormat) {
      var _this = _super.call(this, baseFormat) || this;
      _this.gridInitialWidth = 0;
      _this.gridSize = new SizeF(0, 0);
      _this.parentCellIndex = 0;
      _this.tempWidth = 0;
      _this.childheight = 0;
      _this.isChildGrid = false;
      _this.hasRowSpanSpan = false;
      _this.isRearranged = false;
      _this.pageBounds = new RectangleF();
      _this.listOfNavigatePages = [];
      _this.flag = true;
      _this.columnRanges = [];
      _this.currentLocation = new PointF(0, 0);
      _this.breakRow = true;
      _this.slr = null;
      _this.remainderText = null;
      _this.isPaginate = false;
      _this.isOverloadWithPosition = false;
      return _this;
    }
    Object.defineProperty(PdfGridLayouter2.prototype, "Grid", {
      //Properties
      get: function() {
        return this.elements;
      },
      enumerable: true,
      configurable: true
    });
    PdfGridLayouter2.prototype.getFormat = function(format) {
      var f = format;
      return f;
    };
    PdfGridLayouter2.prototype.layoutInternal = function(param) {
      var format = this.getFormat(param.format);
      this.gridLayoutFormat = this.getFormat(param.format);
      this.currentPage = param.page;
      if (this.currentPage !== null) {
        var pageHeight = this.currentPage.getClientSize().height;
        var pageWidth = this.currentPage.getClientSize().width;
        this.currentPageBounds = this.currentPage.getClientSize();
      } else {
        throw Error("Can not set page as null");
      }
      this.currentGraphics = this.currentPage.graphics;
      var index = 0;
      index = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);
      this.listOfNavigatePages.push(index);
      if (format != null && format.break === PdfLayoutBreakType.FitColumnsToPage) {
        this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), new SizeF(this.Grid.columns.width, this.currentGraphics.clientSize.height));
      } else {
        this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize);
      }
      if (this.Grid.rows.count !== 0) {
        this.currentBounds.width = param.bounds.width > 0 ? param.bounds.width : this.currentBounds.width - this.Grid.rows.getRow(0).cells.getCell(0).style.borders.left.width / 2;
      } else if (this.Grid.headers.count !== 0) {
        this.currentBounds.width = param.bounds.width;
      } else {
        throw Error("Please add row or header into grid");
      }
      this.startLocation = new PointF(param.bounds.x, param.bounds.y);
      if (param.bounds.height > 0 && !this.Grid.isChildGrid) {
        this.currentBounds.height = param.bounds.height;
      }
      if (!this.Grid.isChildGrid) {
        this.hType = this.Grid.style.horizontalOverflowType;
      }
      if (!this.Grid.style.allowHorizontalOverflow) {
        this.columnRanges = [];
        if (typeof this.Grid.isChildGrid !== "undefined" && typeof this.Grid.isChildGrid) {
          this.Grid.measureColumnsWidth(this.currentBounds);
        } else {
          this.Grid.measureColumnsWidth(new RectangleF(this.currentBounds.x, this.currentBounds.y, this.currentBounds.x + this.currentBounds.width, this.currentBounds.height));
        }
        this.columnRanges.push([0, this.Grid.columns.count - 1]);
      } else {
        this.Grid.measureColumnsWidth();
        this.determineColumnDrawRanges();
      }
      if (this.Grid.hasRowSpanSpan) {
        for (var i = 0; i < this.Grid.rows.count; i++) {
          if (this.Grid.rows.getRow(i).height !== -1 && !this.Grid.rows.getRow(i).isRowHeightSet) {
            this.Grid.rows.getRow(i).isRowHeightSet = true;
          }
        }
      }
      var result = this.layoutOnPage(param);
      return result;
    };
    PdfGridLayouter2.prototype.determineColumnDrawRanges = function() {
      var startColumn = 0;
      var endColumn = 0;
      var cellWidths = 0;
      var availableWidth = this.currentGraphics.clientSize.width - this.currentBounds.x;
      for (var i = 0; i < this.Grid.columns.count; i++) {
        cellWidths += this.Grid.columns.getColumn(i).width;
        if (cellWidths >= availableWidth) {
          var subWidths = 0;
          for (var j = startColumn; j <= i; j++) {
            subWidths += this.Grid.columns.getColumn(j).width;
            if (subWidths > availableWidth) {
              break;
            }
            endColumn = j;
          }
          this.columnRanges.push([startColumn, endColumn]);
          startColumn = endColumn + 1;
          endColumn = startColumn;
          cellWidths = endColumn <= i ? this.Grid.columns.getColumn(i).width : 0;
        }
      }
      this.columnRanges.push([startColumn, this.Grid.columns.count - 1]);
    };
    PdfGridLayouter2.prototype.layoutOnPage = function(param) {
      this.pageBounds.x = param.bounds.x;
      this.pageBounds.y = param.bounds.y;
      this.pageBounds.height = param.bounds.height;
      var format = this.getFormat(param.format);
      var endArgs = null;
      var result = null;
      var layoutedPages = new TemporaryDictionary();
      var startPage = param.page;
      var isParentCell = false;
      var cellBounds = [];
      for (var index = 0; index < this.columnRanges.length; index++) {
        var range = this.columnRanges[index];
        this.cellStartIndex = range[0];
        this.cellEndIndex = range[1];
        var returnObject = this.raiseBeforePageLayout(this.currentPage, this.currentBounds, this.currentRowIndex);
        this.currentBounds = returnObject.currentBounds;
        this.currentRowIndex = returnObject.currentRowIndex;
        var drawHeader = void 0;
        for (var i_1 = 0; i_1 < this.Grid.headers.count; i_1++) {
          var row = this.Grid.headers.getHeader(i_1);
          var headerHeight = this.currentBounds.y;
          this.isHeader = true;
          if (startPage != this.currentPage) {
            for (var k = this.cellStartIndex; k <= this.cellEndIndex; k++) {
              if (row.cells.getCell(k).isCellMergeContinue) {
                row.cells.getCell(k).isCellMergeContinue = false;
                row.cells.getCell(k).value = "";
              }
            }
          }
          var headerResult = this.drawRow(row);
          if (headerHeight === this.currentBounds.y) {
            drawHeader = true;
            if (PdfGridLayouter2.repeatRowIndex === -1) {
              PdfGridLayouter2.repeatRowIndex = i_1;
            }
          } else {
            drawHeader = false;
          }
          if (!headerResult.isFinish && startPage !== null && format.layout !== PdfLayoutType.OnePage && drawHeader) {
            this.startLocation.x = this.currentBounds.x;
            this.currentPage = this.getNextPageformat(format);
            this.startLocation.y = this.currentBounds.y;
            if (typeof format.paginateBounds !== "undefined" && format.paginateBounds.x === 0 && format.paginateBounds.y === 0 && format.paginateBounds.width === 0 && format.paginateBounds.height === 0) this.currentBounds.x += this.startLocation.x;
            this.drawRow(row);
          }
          this.isHeader = false;
        }
        var i = 0;
        var length_1 = this.Grid.rows.count;
        var repeatRow = void 0;
        var startingHeight = 0;
        var flag = true;
        cellBounds = [];
        for (var j = 0; j < this.Grid.rows.count; j++) {
          var row = this.Grid.rows.getRow(j);
          i++;
          this.currentRowIndex = i - 1;
          var originalHeight2 = this.currentBounds.y;
          startPage = this.currentPage;
          PdfGridLayouter2.repeatRowIndex = -1;
          if (flag && row.grid.isChildGrid) {
            startingHeight = originalHeight2;
            flag = false;
          }
          var rowResult = null;
          if (this.Grid.splitChildRowIndex == -1) {
            rowResult = this.drawRow(row);
            row.isrowFinish = true;
          } else {
            if (row.grid.ParentCell.row.grid.isGridSplit && this.Grid.splitChildRowIndex <= row.rowIndex) {
              rowResult = this.drawRow(row);
              row.isrowFinish = true;
            } else if (row.isrowFinish) {
              continue;
            } else {
              break;
            }
          }
          cellBounds.push(rowResult.bounds.width);
          if (originalHeight2 === this.currentBounds.y) {
            repeatRow = true;
            PdfGridLayouter2.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);
          } else {
            repeatRow = false;
            PdfGridLayouter2.repeatRowIndex = -1;
          }
          while (!rowResult.isFinish && startPage != null) {
            var tempResult = this.getLayoutResult();
            endArgs = this.raisePageLayouted(tempResult);
            if (endArgs.cancel || repeatRow) break;
            else if (this.Grid.allowRowBreakAcrossPages) {
              this.currentPage = this.getNextPageformat(format);
              originalHeight2 = this.currentBounds.y;
              var location_1 = new PointF(PdfBorders.default.right.width / 2, PdfBorders.default.top.width / 2);
              if (format.paginateBounds.x === 0 && format.paginateBounds.y === 0 && format.paginateBounds.width === 0 && format.paginateBounds.height === 0 && this.startLocation.x === location_1.x && this.startLocation.y === location_1.y) {
                this.currentBounds.x += this.startLocation.x;
                this.currentBounds.y += this.startLocation.y;
              }
              if (this.isPaginate) {
                this.startLocation.y = this.currentBounds.y;
                this.isPaginate = false;
              }
              if (this.Grid.isChildGrid && row.grid.ParentCell != null) {
                if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {
                  if (row.rowBreakHeight + this.Grid.ParentCell.row.grid.style.cellPadding.top < this.currentBounds.height) {
                    this.currentBounds.y = this.Grid.ParentCell.row.grid.style.cellPadding.top;
                  }
                }
              }
              if (row.grid.ParentCell != null) {
                row.grid.ParentCell.row.isRowBreaksNextPage = true;
                row.grid.ParentCell.row.rowBreakHeightValue = row.rowBreakHeight + this.Grid.ParentCell.row.grid.style.cellPadding.top + this.Grid.ParentCell.row.grid.style.cellPadding.bottom;
                for (var i_2 = row.rowIndex + 1; i_2 < row.grid.rows.count; i_2++) {
                  row.grid.ParentCell.row.rowBreakHeightValue += row.grid.rows.getRow(i_2).height;
                }
              }
              if (row.grid.isChildGrid) {
                row.isrowFinish = false;
                row.grid.splitChildRowIndex = row.rowIndex;
                row.grid.ParentCell.row.grid.splitChildRowIndex = row.grid.ParentCell.row.rowIndex;
                if (row.grid.ParentCell.row.grid.isGridSplit) {
                  row.grid.ParentCell.row.noOfPageCount += 1;
                  row.grid.ParentCell.row.grid.isGridSplit = false;
                }
                break;
              }
              if (row.noOfPageCount < 1) {
                if (row.grid.splitChildRowIndex != -1) {
                  row.grid.isGridSplit = true;
                }
                if (row.style.border != null && (row.style.border.left != null && row.style.border.left.width !== 1 || row.style.border.top != null && row.style.border.top.width !== 1)) {
                  var x = row.style.border.left.width / 2;
                  var y = row.style.border.top.width / 2;
                  if (this.currentBounds.x === PdfBorders.default.right.width / 2 && this.currentBounds.y === PdfBorders.default.right.width / 2) {
                    var newBound = new RectangleF(x, y, this.currentBounds.width, this.currentBounds.height);
                    this.currentBounds = newBound;
                  }
                }
                if (this.Grid.repeatHeader) {
                  for (var j_1 = 0; j_1 < this.Grid.headers.count; j_1++) {
                    var headerRepeat = this.Grid.headers.getHeader(j_1);
                    this.drawRow(headerRepeat);
                  }
                }
                rowResult = this.drawRow(row);
                if (row.noOfPageCount >= 1) {
                  var temp = row.rowBreakHeightValue;
                  for (var j_2 = 0; j_2 < row.noOfPageCount; j_2++) {
                    var tempResult1 = this.getLayoutResult();
                    endArgs = this.raisePageLayouted(tempResult1);
                    this.currentPage = this.getNextPageformat(format);
                    originalHeight2 = this.currentBounds.y;
                    if (row.grid.splitChildRowIndex != -1) {
                      row.grid.isGridSplit = true;
                    }
                    this.currentBounds.y = 0.5;
                    if (this.Grid.repeatHeader) {
                      for (var i_3 = 0; i_3 < this.Grid.headers.count; i_3++) {
                        var header = this.Grid.headers.getHeader(i_3);
                        this.drawRow(header);
                      }
                    }
                    this.drawRow(row);
                  }
                }
                row.grid.splitChildRowIndex = -1;
                row.grid.isGridSplit = false;
                rowResult.isFinish = this.checkIsFisished(row);
                for (var i_4 = 0; i_4 < row.cells.count; i_4++) {
                  if (row.cells.getCell(i_4).value instanceof PdfGrid) {
                    row.cells.getCell(i_4).value.splitChildRowIndex = -1;
                  }
                }
              }
            }
          }
          if (!rowResult.isFinish && startPage !== null && format.layout !== PdfLayoutType.OnePage && repeatRow) {
            this.startLocation.x = this.currentBounds.x;
            var isAddNextPage = false;
            this.currentPage = this.getNextPageformat(format);
            if (this.raiseBeforePageLayout(this.currentPage, this.currentBounds, this.currentRowIndex).returnValue) {
              break;
            }
            if (param.format !== null && !param.format.usePaginateBounds && param.bounds !== null && param.bounds.height > 0 && !this.Grid.isChildGrid) {
              this.currentBounds.height = param.bounds.height;
            }
            if (typeof param.format !== "undefined" && param.format != null && typeof param.format.usePaginateBounds !== "undefined" && !param.format.usePaginateBounds && !(param.format.paginateBounds.x === 0 && param.format.paginateBounds.y === 0 && param.format.paginateBounds.width === 0 && param.format.paginateBounds.height === 0) && param.format.paginateBounds.y === 0) {
              this.currentBounds.y = PdfBorders.default.top.width / 2;
            } else {
              this.currentBounds.y = format == null ? 0 : format.paginateBounds.y;
              if (format != null && (format.paginateBounds.x !== 0 || format.paginateBounds.y !== 0 || format.paginateBounds.height !== 0 || format.paginateBounds.width !== 0)) {
                this.currentBounds.x = format.paginateBounds.x;
                this.currentBounds.width = format.paginateBounds.width;
                this.currentBounds.height = format.paginateBounds.height;
              }
            }
            if (typeof param.format !== "undefined" && param.format !== null && typeof param.format.usePaginateBounds !== "undefined" && !param.format.usePaginateBounds && param.bounds !== null && param.bounds.y > 0 && !this.Grid.isChildGrid) {
              this.currentBounds.y = param.bounds.y;
            }
            this.startLocation.y = this.currentBounds.y;
            if (format.paginateBounds.x === format.paginateBounds.y && format.paginateBounds.y === format.paginateBounds.height && format.paginateBounds.height === format.paginateBounds.width && format.paginateBounds.width === 0) {
              this.currentBounds.x += this.startLocation.x;
            }
            if (this.currentBounds.x === PdfBorders.default.left.width / 2) {
              this.currentBounds.y += this.startLocation.x;
            }
            if (this.Grid.repeatHeader) {
              for (var i_5 = 0; i_5 < this.Grid.headers.count; i_5++) {
                var header = this.Grid.headers.getHeader(i_5);
                this.drawRow(header);
              }
            }
            this.drawRow(row);
            if (this.currentPage !== null && !layoutedPages.containsKey(this.currentPage)) {
              layoutedPages.add(this.currentPage, range);
            }
          }
          if (row.NestedGridLayoutResult != null) {
            this.currentPage = row.NestedGridLayoutResult.page;
            this.currentGraphics = this.currentPage.graphics;
            this.startLocation = new PointF(row.NestedGridLayoutResult.bounds.x, row.NestedGridLayoutResult.bounds.y);
            var recalHeight = this.ReCalculateHeight(row, row.NestedGridLayoutResult.bounds.height);
            this.currentBounds.y = recalHeight;
            if (startPage != this.currentPage) {
              var section = this.currentPage.section;
              var startIndex = section.indexOf(startPage) + 1;
              var endIndex = section.indexOf(this.currentPage);
              for (var page = startIndex; page < endIndex + 1; page++) {
                var pageGraphics = section.getPages()[page].graphics;
                var location_2 = new PointF(format.paginateBounds.x, format.paginateBounds.y);
                var height = page == endIndex ? row.NestedGridLayoutResult.bounds.height - param.bounds.y : this.currentBounds.height - location_2.y;
                if (height <= pageGraphics.clientSize.height) height += param.bounds.y;
                location_2.y = format == null ? 0.5 : format.paginateBounds.y;
                for (var c = 0; c < row.cells.count; c++) {
                  var cell = row.cells.getCell(c);
                  var cellWidth = 0;
                  var totalwidth = 0;
                  var childGridCell = void 0;
                  if (cell.value instanceof PdfGrid) {
                    if (!childGridCell) {
                      childGridCell = cell;
                    }
                    for (var i_6 = 0; i_6 < cell.value.columns.count; i_6++) {
                      totalwidth += cell.value.columns.getColumn(i_6).columnWidth;
                    }
                  } else {
                    totalwidth = cell.width;
                  }
                  if (cell.columnSpan > 1) {
                    for (; c < cell.columnSpan; c++) cellWidth += row.grid.columns.getColumn(c).width;
                  } else cellWidth = Math.max(totalwidth, row.grid.columns.getColumn(c).width);
                  var bottomPadding = void 0;
                  if (childGridCell && childGridCell.style && childGridCell.style.cellPadding) {
                    bottomPadding = childGridCell.style.cellPadding.bottom;
                  } else {
                    bottomPadding = this.Grid.style.cellPadding.bottom;
                  }
                  if (typeof bottomPadding === "number" && height + bottomPadding < pageGraphics.clientSize.height) {
                    height += bottomPadding;
                    this.currentBounds.y += bottomPadding;
                  }
                  cell.drawCellBorders(pageGraphics, new RectangleF(location_2, new SizeF(cellWidth, height)));
                  var rowWidth = this.Grid.rows.getRow(this.Grid.rows.count - 1).width;
                  if (cellWidth !== rowWidth) {
                    cell.drawCellBorders(pageGraphics, new RectangleF(location_2, new SizeF(rowWidth, height)));
                  }
                  location_2.x += cellWidth;
                  c += cell.columnSpan - 1;
                }
              }
              startPage = this.currentPage;
            }
          }
        }
        var isPdfGrid = false;
        var maximumCellBoundsWidth = 0;
        if (cellBounds.length > 0) {
          maximumCellBoundsWidth = cellBounds[0];
        }
        var largeNavigatePage = [[1, 2]];
        for (var c = 0; c < this.Grid.rows.count; c++) {
          if (this.cellEndIndex != -1 && this.Grid.rows.getRow(c).cells.getCell(this.cellEndIndex).value instanceof PdfGrid) {
            var grid = this.Grid.rows.getRow(c).cells.getCell(this.cellEndIndex).value;
            this.rowLayoutBoundsWidth = grid.rowLayoutBoundsWidth;
            isPdfGrid = true;
          }
        }
        if (!isPdfGrid && cellBounds.length > 0) {
          for (var c = 0; c < i - 1; c++) {
            if (maximumCellBoundsWidth < cellBounds[c]) {
              maximumCellBoundsWidth = cellBounds[c];
            }
          }
          this.rowLayoutBoundsWidth = maximumCellBoundsWidth;
        } else {
          this.rowLayoutBoundsWidth = largeNavigatePage[0][1];
        }
        if (this.columnRanges.indexOf(range) < this.columnRanges.length - 1 && startPage != null && format.layout != PdfLayoutType.OnePage) {
          isParentCell = this.Grid.isChildGrid;
          if (largeNavigatePage[0][0] != 0) {
            var section = this.currentPage.section;
            var pageIndex = section.indexOf(this.currentPage);
            this.currentGraphics = this.currentPage.graphics;
            this.currentBounds = new RectangleF(new PointF(0, 0), this.currentPage.getClientSize());
            var pageindex = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);
          } else {
            this.currentPage = this.getNextPageformat(format);
          }
        }
        if (this.columnRanges.length - 1 !== index && this.columnRanges.length > 1 && format.layout !== PdfLayoutType.OnePage) {
          this.currentPage = this.getNextPageformat(format);
          if (format.paginateBounds.x === format.paginateBounds.y && format.paginateBounds.y === format.paginateBounds.height && format.paginateBounds.height === format.paginateBounds.width && format.paginateBounds.width === 0) {
            this.currentBounds.x += this.startLocation.x;
            this.currentBounds.y += this.startLocation.y;
          }
        }
      }
      result = this.getLayoutResult();
      if (this.Grid.style.allowHorizontalOverflow && this.Grid.style.horizontalOverflowType == PdfHorizontalOverflowType.NextPage) {
        this.reArrangePages(layoutedPages);
      }
      this.raisePageLayouted(result);
      return result;
    };
    PdfGridLayouter2.prototype.checkIsFisished = function(row) {
      var result = true;
      for (var i = 0; i < row.cells.count; i++) {
        if (!row.cells.getCell(i).FinishedDrawingCell) {
          result = false;
        }
      }
      return result;
    };
    PdfGridLayouter2.prototype.getNextPageformat = function(format) {
      var section = this.currentPage.section;
      var nextPage = null;
      var index = section.indexOf(this.currentPage);
      this.flag = false;
      if (index === section.count - 1) {
        nextPage = section.add();
      } else {
        nextPage = section.getPages()[index + 1];
      }
      this.currentGraphics = nextPage.graphics;
      var pageindex = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);
      if (!(this.listOfNavigatePages.indexOf(pageindex) !== -1)) {
        this.listOfNavigatePages.push(pageindex);
      }
      this.currentBounds = new RectangleF(new PointF(0, 0), nextPage.getClientSize());
      if (typeof format !== "undefined" && format != null && format.usePaginateBounds && typeof format.paginateBounds !== "undefined" && format.paginateBounds != null && format.paginateBounds.x !== format.paginateBounds.y && format.paginateBounds.y !== format.paginateBounds.height && format.paginateBounds.height !== format.paginateBounds.width && format.paginateBounds.width !== 0) {
        this.currentBounds.x = format.paginateBounds.x;
        this.currentBounds.y = format.paginateBounds.y;
        this.currentBounds.height = format.paginateBounds.height;
      }
      return nextPage;
    };
    PdfGridLayouter2.prototype.CheckIfDefaultFormat = function(format) {
      var defaultFormat = new PdfStringFormat();
      return format.alignment === defaultFormat.alignment && format.characterSpacing === defaultFormat.characterSpacing && format.clipPath === defaultFormat.clipPath && format.firstLineIndent === defaultFormat.firstLineIndent && format.horizontalScalingFactor === defaultFormat.horizontalScalingFactor && format.lineAlignment === defaultFormat.lineAlignment && format.lineLimit === defaultFormat.lineLimit && format.lineSpacing === defaultFormat.lineSpacing && format.measureTrailingSpaces === defaultFormat.measureTrailingSpaces && format.noClip === defaultFormat.noClip && format.paragraphIndent === defaultFormat.paragraphIndent && format.rightToLeft === defaultFormat.rightToLeft && format.subSuperScript === defaultFormat.subSuperScript && format.wordSpacing === defaultFormat.wordSpacing && format.wordWrap === defaultFormat.wordWrap;
    };
    PdfGridLayouter2.prototype.RaiseBeforeCellDraw = function(graphics, rowIndex, cellIndex, bounds, value, style) {
      var args = null;
      if (this.Grid.raiseBeginCellDraw) {
        args = new PdfGridBeginCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style);
        this.Grid.onBeginCellDraw(args);
        style = args.style;
      }
      return style;
    };
    PdfGridLayouter2.prototype.raiseAfterCellDraw = function(graphics, rowIndex, cellIndex, bounds, value, cellstyle) {
      var args = null;
      if (this.Grid.raiseEndCellDraw) {
        args = new PdfGridEndCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, cellstyle);
        this.Grid.onEndCellDraw(args);
      }
    };
    PdfGridLayouter2.prototype.reArrangePages = function(layoutedPages) {
      var document2 = this.currentPage.document;
      var pages = [];
      var keys = layoutedPages.keys();
      var values = layoutedPages.values();
      for (var i = 0; i < keys.length; i++) {
        var page = keys[i];
        page.section = null;
        pages.push(page);
        document2.pages.remove(page);
      }
      for (var i = 0; i < layoutedPages.size(); i++) {
        var count = 0;
        for (var j = i, count_1 = layoutedPages.size() / this.columnRanges.length; j < layoutedPages.size(); j += count_1) {
          var page = pages[j];
          if (typeof page !== "undefined" && document2.pages.indexOf(page) === -1) {
            document2.pages.add(page);
          }
        }
      }
    };
    PdfGridLayouter2.prototype.getLayoutResult = function() {
      if (this.Grid.isChildGrid && this.Grid.allowRowBreakAcrossPages) {
        for (var i = 0; i < this.Grid.rows.count; i++) {
          var row = this.Grid.rows.getRow(i);
          if (row.rowBreakHeight > 0 && row.repeatFlag) {
            this.startLocation.y = this.currentPage.origin.y;
          }
        }
      }
      var bounds;
      if (!this.isChanged) {
        bounds = new RectangleF(this.startLocation, new SizeF(this.currentBounds.width, this.currentBounds.y - this.startLocation.y));
      }
      return new PdfGridLayoutResult(this.currentPage, bounds);
    };
    PdfGridLayouter2.prototype.ReCalculateHeight = function(row, height) {
      var newHeight = 0;
      for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {
        if (!(row.cells.getCell(i).remainingString === null || row.cells.getCell(i).remainingString === "" || typeof row.cells.getCell(i).remainingString === "undefined")) {
          newHeight = Math.max(newHeight, row.cells.getCell(i).measureHeight());
        }
      }
      return Math.max(height, newHeight);
    };
    PdfGridLayouter2.prototype.raiseBeforePageLayout = function(currentPage, currentBounds, currentRow) {
      var cancel = false;
      if (this.Grid.raiseBeginPageLayout) {
        var args = new PdfGridBeginPageLayoutEventArgs(currentBounds, currentPage, currentRow);
        this.Grid.onBeginPageLayout(args);
        cancel = typeof args.cancel === "undefined" ? false : args.cancel;
        currentBounds = args.bounds;
        currentRow = args.startRowIndex;
      }
      return {
        returnValue: cancel,
        currentBounds,
        currentRowIndex: currentRow
      };
    };
    PdfGridLayouter2.prototype.raisePageLayouted = function(result) {
      var args = new PdfGridEndPageLayoutEventArgs(result);
      if (this.Grid.raiseEndPageLayout) {
        this.Grid.onEndPageLayout(args);
      }
      return args;
    };
    PdfGridLayouter2.prototype.drawRow = function(row, result, height) {
      if (typeof result === "undefined") {
        var result_1 = new RowLayoutResult();
        var rowHeightWithSpan = 0;
        var location_3 = new PointF(0, 0);
        var size = new SizeF(0, 0);
        var isHeader = false;
        var allowRowBreak = true;
        if (row.rowSpanExists) {
          var maxSpan = 0;
          var currRowIndex = this.Grid.rows.rowCollection.indexOf(row);
          if (currRowIndex === -1) {
            currRowIndex = this.Grid.headers.indexOf(row);
            if (currRowIndex !== -1) {
              isHeader = true;
            }
          }
          for (var i = 0; i < row.cells.count; i++) {
            var cell = row.cells.getCell(i);
            maxSpan = Math.max(maxSpan, cell.rowSpan);
          }
          for (var i = currRowIndex; i < currRowIndex + maxSpan; i++) {
            rowHeightWithSpan += isHeader ? this.Grid.headers.getHeader(i).height : this.Grid.rows.getRow(i).height;
          }
          if (rowHeightWithSpan > this.currentBounds.height || rowHeightWithSpan + this.currentBounds.y > this.currentBounds.height) {
            if (row.rowSpanExists && (this.Grid.LayoutFormat.break === PdfLayoutBreakType.FitElement || !this.Grid.allowRowBreakAcrossPages)) {
              allowRowBreak = false;
            }
          }
          if ((rowHeightWithSpan > this.currentBounds.height || rowHeightWithSpan + this.currentBounds.y > this.currentBounds.height) && allowRowBreak) {
            rowHeightWithSpan = 0;
            row.isPageBreakRowSpanApplied = true;
            for (var i = 0; i < row.cells.count; i++) {
              var cell = row.cells.getCell(i);
              maxSpan = cell.rowSpan;
              for (var i_7 = currRowIndex; i_7 < currRowIndex + maxSpan; i_7++) {
                rowHeightWithSpan += isHeader ? this.Grid.headers.getHeader(i_7).height : this.Grid.rows.getRow(i_7).height;
                var layoutFormat = this.Grid.LayoutFormat;
                var currentBoundsHeight = this.currentPageBounds.height;
                if (layoutFormat.usePaginateBounds && layoutFormat.paginateBounds && layoutFormat.paginateBounds.height > 0) {
                  var bottom = layoutFormat.paginateBounds.y + layoutFormat.paginateBounds.height;
                  if (!this.Grid.isChildGrid && this.Grid.listOfNavigatePages.length === 1) {
                    bottom += this.Grid._gridLocation.y;
                  }
                  if (bottom < currentBoundsHeight) {
                    currentBoundsHeight = bottom;
                    this.currentPageBounds.height = currentBoundsHeight;
                    this.currentBounds.height = currentBoundsHeight;
                  }
                }
                if (this.currentBounds.y + rowHeightWithSpan > currentBoundsHeight) {
                  rowHeightWithSpan -= isHeader ? this.Grid.headers.getHeader(i_7).height : this.Grid.rows.getRow(i_7).height;
                  for (var j = 0; j < this.Grid.rows.getRow(currRowIndex).cells.count; j++) {
                    var newSpan = i_7 - currRowIndex;
                    if (!isHeader && this.Grid.rows.getRow(currRowIndex).cells.getCell(j).rowSpan === maxSpan && newSpan !== 0) {
                      var currCell = this.Grid.rows.getRow(currRowIndex).cells.getCell(j);
                      var nextCell = this.Grid.rows.getRow(i_7).cells.getCell(j);
                      currCell.rowSpan = newSpan === 0 ? 1 : newSpan;
                      this.Grid.rows.getRow(currRowIndex).maximumRowSpan = newSpan === 0 ? 1 : newSpan;
                      nextCell.rowSpan = maxSpan - newSpan;
                      if (this.Grid.rows.getRow(i_7).maximumRowSpan < maxSpan - newSpan) {
                        this.Grid.rows.getRow(i_7).maximumRowSpan = maxSpan - newSpan;
                      }
                      var pdfGrid = currCell.value;
                      nextCell.stringFormat = currCell.stringFormat;
                      nextCell.style = currCell.style;
                      nextCell.style.backgroundImage = null;
                      nextCell.columnSpan = currCell.columnSpan;
                      if (pdfGrid instanceof PdfGrid && this.currentBounds.y + pdfGrid.size.height + this.Grid.rows.getRow(i_7).height + pdfGrid.style.cellPadding.top + pdfGrid.style.cellPadding.bottom >= this.currentBounds.height) {
                        nextCell.value = currCell.value;
                      } else if (!(pdfGrid instanceof PdfGrid)) {
                        nextCell.value = currCell.value;
                      }
                      if (i_7 > 0) this.Grid.rows.getRow(i_7 - 1).rowSpanExists = true;
                      nextCell.isRowMergeContinue = false;
                      nextCell.isRowMergeStart = true;
                    } else if (isHeader && this.Grid.headers.getHeader(currRowIndex).cells.getCell(j).rowSpan === maxSpan) {
                      var headerCell = this.Grid.headers.getHeader(currRowIndex).cells.getCell(j);
                      var nextHeaderCell = this.Grid.headers.getHeader(i_7).cells.getCell(j);
                      headerCell.rowSpan = newSpan === 0 ? 1 : newSpan;
                      nextHeaderCell.rowSpan = maxSpan - newSpan;
                      nextHeaderCell.stringFormat = headerCell.stringFormat;
                      nextHeaderCell.style = headerCell.style;
                      nextHeaderCell.columnSpan = headerCell.columnSpan;
                      nextHeaderCell.value = headerCell.value;
                      this.Grid.headers.getHeader(i_7 - 1).rowSpanExists = false;
                      nextHeaderCell.isRowMergeContinue = false;
                      nextHeaderCell.isRowMergeStart = true;
                    }
                  }
                  break;
                }
              }
              rowHeightWithSpan = 0;
            }
          }
        }
        var calculatedHeight = row.rowBreakHeight > 0 ? row.rowBreakHeight : row.height;
        if (typeof this.Grid.isChildGrid !== "undefined" && this.Grid.isChildGrid && typeof this.Grid.ParentCell !== "undefined" && this.Grid.ParentCell != null) {
          if (this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom + calculatedHeight > this.currentPageBounds.height || this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom + calculatedHeight > this.currentBounds.height || this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom + rowHeightWithSpan > this.currentPageBounds.height) {
            if (typeof this.Grid.ParentCell.row.grid.LayoutFormat !== "undefined" && this.Grid.ParentCell.row.grid.LayoutFormat.break === PdfLayoutBreakType.FitPage) {
              PdfGridLayouter2.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);
              this.Grid.splitChildRowIndex = this.Grid.rows.rowCollection.indexOf(row);
            }
            if (PdfGridLayouter2.repeatRowIndex > -1 && PdfGridLayouter2.repeatRowIndex === row.rowIndex) {
              if (this.Grid.allowRowBreakAcrossPages) {
                result_1.isFinish = true;
                result_1.bounds = this.currentBounds;
                this.drawRowWithBreak(result_1, row, calculatedHeight);
                row.repeatFlag = true;
                row.repeatRowNumber = PdfGridLayouter2.repeatRowIndex;
              }
            }
          } else {
            result_1.isFinish = true;
            if (row.grid.ParentCell.row.rowBreakHeightValue > 0) {
              row.repeatFlag = true;
            } else {
              row.repeatFlag = false;
              calculatedHeight = row.height;
            }
            if (this.Grid.isChildGrid && row.rowBreakHeight > 0) {
              if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {
                calculatedHeight += this.Grid.ParentCell.row.grid.style.cellPadding.bottom;
              }
            }
            this.drawRow(row, result_1, calculatedHeight);
          }
        } else {
          if (calculatedHeight > this.currentPageBounds.height) {
            if (this.Grid.allowRowBreakAcrossPages) {
              result_1.isFinish = true;
              this.drawRowWithBreak(result_1, row, calculatedHeight);
              row.isrowFinish = true;
              row.repeatFlag = true;
              if (row.grid.splitChildRowIndex !== -1) {
                result_1.isFinish = false;
              }
            }
          } else if (this.currentBounds.y + calculatedHeight > this.currentPageBounds.height || this.currentBounds.y + calculatedHeight > this.currentBounds.height + this.startLocation.y || this.currentBounds.y + rowHeightWithSpan > this.currentPageBounds.height) {
            var isFit = false;
            if (this.Grid.allowRowBreakAcrossPages && !this.Grid.repeatHeader && !row.isRowHeightSet && !row.rowMergeComplete) {
              if (this.Grid.LayoutFormat !== null && this.Grid.LayoutFormat.paginateBounds.height > 0) {
                isFit = this.isFitToCell(this.currentBounds.height + this.startLocation.y - this.currentBounds.y, this.Grid, row);
              } else isFit = this.isFitToCell(this.currentPageBounds.height - this.currentBounds.y, this.Grid, row);
              if (isFit) {
                this.isPaginate = true;
              }
            } else if (this.Grid.allowRowBreakAcrossPages && this.Grid.LayoutFormat != null && this.Grid.LayoutFormat.layout == PdfLayoutType.Paginate && this.Grid.LayoutFormat.break != PdfLayoutBreakType.FitElement && row.isRowHeightSet && this.currentBounds.y + height > this.currentPageBounds.height) {
              isFit = this.isFitToCell(this.currentPageBounds.height - this.currentBounds.y, this.Grid, row);
              if (!isFit) isFit = !(this.slr !== null && this.slr.actualSize.height == 0 && this.slr.remainder != null && this.slr.remainder.length > 0 && this.remainderText == this.slr.remainder);
              if (isFit && this.slr != null && this.slr.lineCount > 1) {
                isFit = false;
              }
              this.remainderText = null;
            }
            if (PdfGridLayouter2.repeatRowIndex > -1 && PdfGridLayouter2.repeatRowIndex === row.rowIndex || isFit) {
              if (this.Grid.allowRowBreakAcrossPages) {
                result_1.isFinish = true;
                this.drawRowWithBreak(result_1, row, calculatedHeight);
                row.repeatFlag = true;
                row.repeatRowNumber = PdfGridLayouter2.repeatRowIndex;
                if (row.grid.splitChildRowIndex !== -1) {
                  result_1.isFinish = false;
                }
              } else {
                result_1.isFinish = false;
                this.drawRow(row, result_1, calculatedHeight);
              }
            } else {
              result_1.isFinish = false;
            }
          } else {
            result_1.isFinish = true;
            this.drawRow(row, result_1, calculatedHeight);
            row.repeatFlag = false;
          }
        }
        return result_1;
      } else {
        var skipcell = false;
        var location_4 = new PointF(this.currentBounds.x, this.currentBounds.y);
        result.bounds = new RectangleF(location_4, new SizeF(0, 0));
        height = this.ReCalculateHeight(row, height);
        for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {
          var cancelSpans = i > this.cellEndIndex + 1 && row.cells.getCell(i).columnSpan > 1;
          if (!cancelSpans) {
            for (var j = 1; j < row.cells.getCell(i).columnSpan; j++) {
              row.cells.getCell(i + j).isCellMergeContinue = true;
            }
          }
          var size = new SizeF(this.Grid.columns.getColumn(i).width, height);
          if (!this.CheckIfDefaultFormat(this.Grid.columns.getColumn(i).format) && this.CheckIfDefaultFormat(row.cells.getCell(i).stringFormat)) {
            row.cells.getCell(i).stringFormat = this.Grid.columns.getColumn(i).format;
          }
          var cellstyle = row.cells.getCell(i).style;
          var tempValue = typeof row.cells.getCell(i).value === "string" && row.cells.getCell(i).value !== null ? row.cells.getCell(i).value : "";
          row.cells.getCell(i).style = this.RaiseBeforeCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location_4, size), tempValue, cellstyle);
          if (!skipcell) {
            if (row.cells.getCell(i).value instanceof PdfGrid) {
              var grid = row.cells.getCell(i).value;
              grid.parentCellIndex = i;
            }
            var stringResult = row.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location_4, size), cancelSpans);
            if (row.grid.style.allowHorizontalOverflow && (row.cells.getCell(i).columnSpan > this.cellEndIndex || i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1) && this.cellEndIndex < row.cells.count - 1) {
              row.rowOverflowIndex = this.cellEndIndex;
            }
            if (row.grid.style.allowHorizontalOverflow && row.rowOverflowIndex > 0 && (row.cells.getCell(i).columnSpan > this.cellEndIndex || i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1) && row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1 > 0) {
              row.cells.getCell(row.rowOverflowIndex + 1).value = stringResult !== null ? stringResult.remainder !== void 0 ? stringResult.remainder : "" : "";
              row.cells.getCell(row.rowOverflowIndex + 1).stringFormat = row.cells.getCell(i).stringFormat;
              row.cells.getCell(row.rowOverflowIndex + 1).style = row.cells.getCell(i).style;
              row.cells.getCell(row.rowOverflowIndex + 1).columnSpan = row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1;
            }
          }
          tempValue = typeof row.cells.getCell(i).value === "string" && row.cells.getCell(i).value !== null ? row.cells.getCell(i).value : "";
          if (!cancelSpans) {
            this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location_4, size), tempValue, row.cells.getCell(i).style);
          }
          if (row.cells.getCell(i).value instanceof PdfGrid) {
            var grid = row.cells.getCell(i).value;
            if (this.Grid.columns.getColumn(i).width >= this.currentGraphics.clientSize.width) {
              location_4.x = grid.rowLayoutBoundsWidth;
              location_4.x += grid.style.cellSpacing;
            } else {
              location_4.x += this.Grid.columns.getColumn(i).width;
            }
          } else {
            location_4.x += this.Grid.columns.getColumn(i).width;
          }
        }
        if (!row.rowMergeComplete || row.isRowHeightSet) {
          this.currentBounds.y += height;
        }
        result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location_4.x, location_4.y));
      }
    };
    PdfGridLayouter2.prototype.isFitToCell = function(currentHeight, grid, gridRow) {
      var isFit = false;
      var layouter = new PdfStringLayouter();
      for (var i = 0; i < gridRow.cells.count; i++) {
        var cell = gridRow.cells.getCell(i);
        if (typeof cell.value !== "undefined" && cell.value !== null && typeof cell.value === "string") {
          var font = null;
          if (typeof cell.style.font !== "undefined" && cell.style.font != null) {
            font = cell.style.font;
          } else if (typeof cell.row.style.font !== "undefined" && cell.row.style.font != null) {
            font = cell.row.style.font;
          } else if (typeof cell.row.grid.style.font !== "undefined" && cell.row.grid.style.font != null) {
            font = cell.row.grid.style.font;
          } else {
            font = PdfDocument.defaultFont;
          }
          this.remainderText = cell.value;
          var width = cell.width;
          var column = grid.columns.getColumn(i);
          if (column.isCustomWidth && cell.width > column.width) {
            width = column.width;
          }
          this.slr = layouter.layout(cell.value, font, cell.stringFormat, new SizeF(width, currentHeight), false, this.currentPageBounds);
          var height = this.slr.actualSize.height;
          if (cell.value !== "" && height === 0) {
            isFit = false;
            break;
          }
          if (cell.style !== null && cell.style.borders !== null && cell.style.borders.top !== null && cell.style.borders.bottom !== null) {
            height += (cell.style.borders.top.width + cell.style.borders.bottom.width) * 2;
          }
          if (this.slr.lineCount > 1 && cell.stringFormat != null && cell.stringFormat.lineSpacing != 0) {
            height += (this.slr.lineCount - 1) * cell.style.stringFormat.lineSpacing;
          }
          if (cell.style.cellPadding === null) {
            height += grid.style.cellPadding.top + grid.style.cellPadding.bottom;
          } else {
            height += grid.style.cellPadding.top + grid.style.cellPadding.bottom;
          }
          height += grid.style.cellSpacing;
          if (currentHeight > height || typeof this.slr.remainder !== "undefined" && this.slr.remainder !== null) {
            isFit = true;
            break;
          }
        }
      }
      return isFit;
    };
    PdfGridLayouter2.prototype.drawRowWithBreak = function(result, row, calculateHeight) {
      var location2 = new PointF(this.currentBounds.x, this.currentBounds.y);
      if (row.grid.isChildGrid && row.grid.allowRowBreakAcrossPages && this.startLocation.x !== this.currentBounds.x) {
        location2.x = this.startLocation.x;
      }
      result.bounds = new RectangleF(location2, new SizeF(0, 0));
      this.gridHeight = row.rowBreakHeight > 0 ? this.currentPageBounds.height : 0;
      if (row.grid.style.cellPadding.top + this.currentBounds.y + row.grid.style.cellPadding.bottom < this.currentPageBounds.height) {
        row.rowBreakHeight = this.currentBounds.y + calculateHeight - this.currentPageBounds.height;
      }
      for (var i = 0; i < row.cells.count; i++) {
        var cell = row.cells.getCell(i);
        var cellHeight = cell.measureHeight();
        if (cellHeight === calculateHeight && cell.value instanceof PdfGrid) {
          row.rowBreakHeight = 0;
        }
      }
      for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {
        var gridColumnWidth = this.Grid.columns.getColumn(i).width;
        var cancelSpans = row.cells.getCell(i).columnSpan + i > this.cellEndIndex + 1 && row.cells.getCell(i).columnSpan > 1;
        if (!cancelSpans) {
          for (var k = 1; k < row.cells.getCell(i).columnSpan; k++) {
            row.cells.getCell(i + k).isCellMergeContinue = true;
            gridColumnWidth += this.Grid.columns.getColumn(i + k).width;
          }
        }
        var size = new SizeF(gridColumnWidth, this.gridHeight > 0 ? this.gridHeight : this.currentPageBounds.height);
        var cellstyle1 = row.cells.getCell(i).style;
        row.cells.getCell(i).style = cellstyle1;
        var skipcell = false;
        var stringResult = null;
        if (!skipcell) {
          row.cells.getCell(i)._rowHeight = row.height;
          stringResult = row.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location2, size), cancelSpans);
        }
        if (row.rowBreakHeight > 0) {
          if (stringResult != null && typeof stringResult.remainder !== "undefined") {
            row.cells.getCell(i).FinishedDrawingCell = false;
            row.cells.getCell(i).remainingString = stringResult.remainder == null ? " " : stringResult.remainder;
            row.rowBreakHeight = calculateHeight - stringResult.actualSize.height;
          }
        }
        result.isFinish = !result.isFinish ? result.isFinish : row.cells.getCell(i).FinishedDrawingCell;
        if (row.cells.getCell(i).value instanceof PdfGrid) {
          var grid = row.cells.getCell(i).value;
          this.rowBreakPageHeightCellIndex = i;
          if (this.Grid.columns.getColumn(i).width >= this.currentGraphics.clientSize.width) {
            location2.x = this.rowLayoutBoundsWidth;
            location2.x += grid.style.cellSpacing;
          } else {
            location2.x += this.Grid.columns.getColumn(i).width;
          }
        } else {
          location2.x += this.Grid.columns.getColumn(i).width;
        }
      }
      this.currentBounds.y += this.gridHeight > 0 ? this.gridHeight : calculateHeight;
      result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location2.x, location2.y));
    };
    PdfGridLayouter2.repeatRowIndex = -1;
    return PdfGridLayouter2;
  }(ElementLayouter)
);
var PdfGridLayoutResult = (
  /** @class */
  function(_super) {
    __extends84(PdfGridLayoutResult2, _super);
    function PdfGridLayoutResult2(page, bounds) {
      return _super.call(this, page, bounds) || this;
    }
    return PdfGridLayoutResult2;
  }(PdfLayoutResult)
);
var PdfGridLayoutFormat = (
  /** @class */
  function(_super) {
    __extends84(PdfGridLayoutFormat2, _super);
    function PdfGridLayoutFormat2(baseFormat) {
      return _super.call(this, baseFormat) || this;
    }
    return PdfGridLayoutFormat2;
  }(PdfLayoutFormat)
);
var GridCellEventArgs = (
  /** @class */
  function() {
    function GridCellEventArgs2(graphics, rowIndex, cellIndex, bounds, value) {
      this.gridRowIndex = rowIndex;
      this.gridCellIndex = cellIndex;
      this.internalValue = value;
      this.gridBounds = bounds;
      this.pdfGraphics = graphics;
    }
    Object.defineProperty(GridCellEventArgs2.prototype, "rowIndex", {
      // Properties
      /**
       * Gets the value of current `row index`.
       * @private
       */
      get: function() {
        return this.gridRowIndex;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(GridCellEventArgs2.prototype, "cellIndex", {
      /**
       * Gets the value of current `cell index`.
       * @private
       */
      get: function() {
        return this.gridCellIndex;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(GridCellEventArgs2.prototype, "value", {
      /**
       * Gets the actual `value` of current cell.
       * @private
       */
      get: function() {
        return this.internalValue;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(GridCellEventArgs2.prototype, "bounds", {
      /**
       * Gets the `bounds` of current cell.
       * @private
       */
      get: function() {
        return this.gridBounds;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(GridCellEventArgs2.prototype, "graphics", {
      /**
       * Gets the instance of `current graphics`.
       * @private
       */
      get: function() {
        return this.pdfGraphics;
      },
      enumerable: true,
      configurable: true
    });
    return GridCellEventArgs2;
  }()
);
var PdfGridBeginCellDrawEventArgs = (
  /** @class */
  function(_super) {
    __extends84(PdfGridBeginCellDrawEventArgs2, _super);
    function PdfGridBeginCellDrawEventArgs2(graphics, rowIndex, cellIndex, bounds, value, style) {
      var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;
      _this.style = style;
      return _this;
    }
    Object.defineProperty(PdfGridBeginCellDrawEventArgs2.prototype, "skip", {
      // Properties
      /**
       * Gets or sets a value indicating whether the value of this cell should be `skipped`.
       * @private
       */
      get: function() {
        return this.bSkip;
      },
      set: function(value) {
        this.bSkip = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridBeginCellDrawEventArgs2.prototype, "style", {
      /**
       * Gets or sets a `style` value of the cell.
       * @private
       */
      get: function() {
        return this.cellStyle;
      },
      set: function(value) {
        this.cellStyle = value;
      },
      enumerable: true,
      configurable: true
    });
    return PdfGridBeginCellDrawEventArgs2;
  }(GridCellEventArgs)
);
var PdfGridEndCellDrawEventArgs = (
  /** @class */
  function(_super) {
    __extends84(PdfGridEndCellDrawEventArgs2, _super);
    function PdfGridEndCellDrawEventArgs2(graphics, rowIndex, cellIndex, bounds, value, style) {
      var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;
      _this.cellStyle = style;
      return _this;
    }
    Object.defineProperty(PdfGridEndCellDrawEventArgs2.prototype, "style", {
      // Propertise
      /**
       * Get the `PdfGridCellStyle`.
       * @private
       */
      get: function() {
        return this.cellStyle;
      },
      enumerable: true,
      configurable: true
    });
    return PdfGridEndCellDrawEventArgs2;
  }(GridCellEventArgs)
);
var PdfCancelEventArgs = (
  /** @class */
  function() {
    function PdfCancelEventArgs2() {
    }
    Object.defineProperty(PdfCancelEventArgs2.prototype, "cancel", {
      // Properties
      /**
       * Gets and Sets the value of `cancel`.
       * @private
       */
      get: function() {
        return this.isCancel;
      },
      set: function(value) {
        this.isCancel = value;
      },
      enumerable: true,
      configurable: true
    });
    return PdfCancelEventArgs2;
  }()
);
var BeginPageLayoutEventArgs = (
  /** @class */
  function(_super) {
    __extends84(BeginPageLayoutEventArgs2, _super);
    function BeginPageLayoutEventArgs2(bounds, page) {
      var _this = _super.call(this) || this;
      _this.bounds = bounds;
      _this.pdfPage = page;
      return _this;
    }
    Object.defineProperty(BeginPageLayoutEventArgs2.prototype, "bounds", {
      // Properties
      /**
       * Gets or sets value that indicates the lay outing `bounds` on the page.
       * @private
       */
      get: function() {
        return this.cellBounds;
      },
      set: function(value) {
        this.cellBounds = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BeginPageLayoutEventArgs2.prototype, "page", {
      /**
       * Gets the `page` where the lay outing should start.
       * @private
       */
      get: function() {
        return this.pdfPage;
      },
      enumerable: true,
      configurable: true
    });
    return BeginPageLayoutEventArgs2;
  }(PdfCancelEventArgs)
);
var EndPageLayoutEventArgs = (
  /** @class */
  function(_super) {
    __extends84(EndPageLayoutEventArgs2, _super);
    function EndPageLayoutEventArgs2(result) {
      var _this = _super.call(this) || this;
      _this.layoutResult = result;
      return _this;
    }
    Object.defineProperty(EndPageLayoutEventArgs2.prototype, "result", {
      // Properties
      /**
       * Gets the lay outing `result` of the page.
       * @private
       */
      get: function() {
        return this.layoutResult;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(EndPageLayoutEventArgs2.prototype, "nextPage", {
      /**
       * Gets or sets a value indicating the `next page` where the element should be layout.
       * @private
       */
      get: function() {
        return this.nextPdfPage;
      },
      set: function(value) {
        this.nextPdfPage = value;
      },
      enumerable: true,
      configurable: true
    });
    return EndPageLayoutEventArgs2;
  }(PdfCancelEventArgs)
);
var PdfGridBeginPageLayoutEventArgs = (
  /** @class */
  function(_super) {
    __extends84(PdfGridBeginPageLayoutEventArgs2, _super);
    function PdfGridBeginPageLayoutEventArgs2(bounds, page, startRow) {
      var _this = _super.call(this, bounds, page) || this;
      _this.startRow = startRow;
      return _this;
    }
    Object.defineProperty(PdfGridBeginPageLayoutEventArgs2.prototype, "startRowIndex", {
      // Properties
      /**
       * Gets the `start row index`.
       * @private
       */
      get: function() {
        return this.startRow;
      },
      enumerable: true,
      configurable: true
    });
    return PdfGridBeginPageLayoutEventArgs2;
  }(BeginPageLayoutEventArgs)
);
var PdfGridEndPageLayoutEventArgs = (
  /** @class */
  function(_super) {
    __extends84(PdfGridEndPageLayoutEventArgs2, _super);
    function PdfGridEndPageLayoutEventArgs2(result) {
      return _super.call(this, result) || this;
    }
    return PdfGridEndPageLayoutEventArgs2;
  }(EndPageLayoutEventArgs)
);
var RowLayoutResult = (
  /** @class */
  function() {
    function RowLayoutResult2() {
      this.layoutedBounds = new RectangleF(0, 0, 0, 0);
    }
    Object.defineProperty(RowLayoutResult2.prototype, "isFinish", {
      /**
       * Gets or sets a value indicating whether this instance `is finish`.
       * @private
       */
      get: function() {
        return this.bIsFinished;
      },
      set: function(value) {
        this.bIsFinished = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RowLayoutResult2.prototype, "bounds", {
      /**
       * Gets or sets the `bounds`.
       * @private
       */
      get: function() {
        return this.layoutedBounds;
      },
      set: function(value) {
        this.layoutedBounds = value;
      },
      enumerable: true,
      configurable: true
    });
    return RowLayoutResult2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/pdf-grid-cell.js
var PdfGridCell = (
  /** @class */
  function() {
    function PdfGridCell2(row) {
      this.cellWidth = 0;
      this.cellHeight = 0;
      this.tempval = 0;
      this.fontSpilt = false;
      this.finsh = true;
      this.rowSpanRemainingHeight = 0;
      this.hasRowSpan = false;
      this.hasColSpan = false;
      this.isFinish = true;
      this.present = false;
      this.gridRowSpan = 1;
      this.colSpan = 1;
      if (typeof row !== "undefined") {
        this.gridRow = row;
      }
    }
    Object.defineProperty(PdfGridCell2.prototype, "isCellMergeContinue", {
      //Properties
      get: function() {
        return this.internalIsCellMergeContinue;
      },
      set: function(value) {
        this.internalIsCellMergeContinue = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCell2.prototype, "isRowMergeContinue", {
      get: function() {
        return this.internalIsRowMergeContinue;
      },
      set: function(value) {
        this.internalIsRowMergeContinue = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCell2.prototype, "isCellMergeStart", {
      get: function() {
        return this.internalIsCellMergeStart;
      },
      set: function(value) {
        this.internalIsCellMergeStart = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCell2.prototype, "isRowMergeStart", {
      get: function() {
        return this.internalIsRowMergeStart;
      },
      set: function(value) {
        this.internalIsRowMergeStart = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCell2.prototype, "remainingString", {
      /**
       * Gets or sets the `remaining string` after the row split between pages.
       * @private
       */
      get: function() {
        return this.remaining;
      },
      set: function(value) {
        this.remaining = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCell2.prototype, "FinishedDrawingCell", {
      /**
       * Gets or sets the `FinishedDrawingCell` .
       * @private
       */
      get: function() {
        return this.isFinish;
      },
      set: function(value) {
        this.isFinish = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCell2.prototype, "stringFormat", {
      /**
       * Gets or sets the `string format`.
       * @private
       */
      get: function() {
        if (this.format == null) {
          this.format = new PdfStringFormat();
        }
        return this.format;
      },
      set: function(value) {
        this.format = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCell2.prototype, "row", {
      /**
       * Gets or sets the parent `row`.
       * @private
       */
      get: function() {
        return this.gridRow;
      },
      set: function(value) {
        this.gridRow = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCell2.prototype, "value", {
      /**
       * Gets or sets the `value` of the cell.
       * @private
       */
      get: function() {
        return this.objectValue;
      },
      set: function(value) {
        this.objectValue = value;
        if (this.objectValue instanceof PdfGrid) {
          this.row.grid.isSingleGrid = false;
          var grid = this.objectValue;
          grid.ParentCell = this;
          this.objectValue.isChildGrid = true;
          var rowCount = this.row.grid.rows.count;
          for (var i = 0; i < rowCount; i++) {
            var row = this.row.grid.rows.getRow(i);
            var colCount = row.cells.count;
            for (var j = 0; j < colCount; j++) {
              var cell = row.cells.getCell(j);
              cell.parent = this;
            }
          }
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCell2.prototype, "rowSpan", {
      /**
       * Gets or sets a value that indicates the total number of rows that cell `spans` within a PdfGrid.
       * @private
       */
      get: function() {
        return this.gridRowSpan;
      },
      set: function(value) {
        if (value < 1) {
          throw new Error("ArgumentException : Invalid span specified, must be greater than or equal to 1");
        } else {
          this.gridRowSpan = value;
          this.row.rowSpanExists = true;
          this.row.grid.hasRowSpanSpan = true;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCell2.prototype, "style", {
      /**
       * Gets or sets the cell `style`.
       * @private
       */
      get: function() {
        if (this.cellStyle == null) {
          this.cellStyle = new PdfGridCellStyle();
        }
        return this.cellStyle;
      },
      set: function(value) {
        this.cellStyle = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCell2.prototype, "height", {
      /**
       * Gets the `height` of the PdfGrid cell.[Read-Only].
       * @private
       */
      get: function() {
        if (this.cellHeight === 0) {
          this.cellHeight = this.measureHeight();
        }
        return this.cellHeight;
      },
      set: function(value) {
        this.cellHeight = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCell2.prototype, "columnSpan", {
      /**
       * Gets or sets a value that indicates the total number of columns that cell `spans` within a PdfGrid.
       * @private
       */
      get: function() {
        return this.colSpan;
      },
      set: function(value) {
        if (value < 1) {
          throw Error("Invalid span specified, must be greater than or equal to 1");
        } else {
          this.colSpan = value;
          this.row.columnSpanExists = true;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCell2.prototype, "width", {
      /**
       * Gets the `width` of the PdfGrid cell.[Read-Only].
       * @private
       */
      get: function() {
        if (this.cellWidth === 0 || this.row.grid.isComplete) {
          this.cellWidth = this.measureWidth();
        }
        return Math.round(this.cellWidth);
      },
      set: function(value) {
        this.cellWidth = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfGridCell2.prototype.measureWidth = function() {
      var width = 0;
      var layouter = new PdfStringLayouter();
      if (typeof this.objectValue === "string") {
        var slr = layouter.layout(this.objectValue, this.getTextFont(), this.stringFormat, new SizeF(Number.MAX_VALUE, Number.MAX_VALUE), false, new SizeF(0, 0));
        width += slr.actualSize.width;
        width += (this.style.borders.left.width + this.style.borders.right.width) * 2;
      } else if (this.objectValue instanceof PdfGrid) {
        width = this.objectValue.size.width;
      } else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {
        width += this.objectValue.width;
      } else if (this.objectValue instanceof PdfTextWebLink) {
        var webLink = this.objectValue;
        var result = layouter.layout(webLink.text, webLink.font, webLink.stringFormat, new SizeF(0, 0), false, new SizeF(0, 0));
        width += result.actualSize.width;
        width += (this.style.borders.left.width + this.style.borders.right.width) * 2;
      }
      if (!(this.objectValue instanceof PdfGrid)) {
        if (this.style.cellPadding != null) {
          width += this.style.cellPadding.left + this.style.cellPadding.right;
        } else {
          width += this.row.grid.style.cellPadding.left + this.row.grid.style.cellPadding.right;
        }
      } else {
        if (this.style.cellPadding != null || typeof this.style.cellPadding !== "undefined") {
          if (typeof this.style.cellPadding.left !== "undefined" && this.style.cellPadding.hasLeftPad) {
            width += this.style.cellPadding.left;
          }
          if (typeof this.style.cellPadding.right !== "undefined" && this.style.cellPadding.hasRightPad) {
            width += this.style.cellPadding.right;
          }
        } else {
          if (typeof this.row.grid.style.cellPadding.left !== "undefined" && this.row.grid.style.cellPadding.hasLeftPad) {
            width += this.row.grid.style.cellPadding.left;
          }
          if (typeof this.row.grid.style.cellPadding.right !== "undefined" && this.row.grid.style.cellPadding.hasRightPad) {
            width += this.row.grid.style.cellPadding.right;
          }
        }
      }
      width += this.row.grid.style.cellSpacing;
      return width;
    };
    PdfGridCell2.prototype.drawCellBackground = function(graphics, bounds) {
      var backgroundBrush = this.getBackgroundBrush();
      if (backgroundBrush != null) {
        graphics.save();
        graphics.drawRectangle(backgroundBrush, bounds.x, bounds.y, bounds.width, bounds.height);
        graphics.restore();
      }
      if (this.style.backgroundImage != null) {
        var image = this.getBackgroundImage();
        graphics.drawImage(this.style.backgroundImage, bounds.x, bounds.y, bounds.width, bounds.height);
      }
    };
    PdfGridCell2.prototype.adjustContentLayoutArea = function(bounds) {
      var returnBounds = new RectangleF(bounds.x, bounds.y, bounds.width, bounds.height);
      if (!(this.objectValue instanceof PdfGrid)) {
        if (typeof this.style.cellPadding === "undefined" || this.style.cellPadding == null) {
          returnBounds.x += this.gridRow.grid.style.cellPadding.left;
          returnBounds.y += this.gridRow.grid.style.cellPadding.top;
          returnBounds.width -= this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left;
          returnBounds.height -= this.gridRow.grid.style.cellPadding.bottom + this.gridRow.grid.style.cellPadding.top;
        } else {
          returnBounds.x += this.style.cellPadding.left;
          returnBounds.y += this.style.cellPadding.top;
          returnBounds.width -= this.style.cellPadding.right + this.style.cellPadding.left;
          returnBounds.height -= this.style.cellPadding.bottom + this.style.cellPadding.top;
          if (this.rowSpan === 1) {
            returnBounds.width -= this.style.borders.left.width;
          }
        }
        if (typeof this.style.borders === "undefined" || this.style.borders == null) {
          returnBounds.x += this.gridRow.style.border.left.width;
          returnBounds.y += this.gridRow.style.border.top.width;
          returnBounds.width -= this.gridRow.style.border.left.width + this.gridRow.style.border.right.width;
          returnBounds.height -= this.gridRow.style.border.top.width + this.gridRow.style.border.bottom.width;
        } else {
          returnBounds.x += this.style.borders.left.width;
          returnBounds.y += this.style.borders.top.width;
          returnBounds.width -= this.style.borders.left.width + this.style.borders.right.width;
          returnBounds.height -= this.style.borders.top.width + this.style.borders.bottom.width;
          if (this.rowSpan === 1) {
            returnBounds.width -= this.style.borders.left.width;
          }
        }
      } else {
        if (this.style.cellPadding == null || typeof this.style.cellPadding === "undefined") {
          if (this.gridRow.grid.style.cellPadding !== null && typeof this.gridRow.grid.style.cellPadding !== "undefined") {
            var hasLeftPad = this.gridRow.grid.style.cellPadding.hasLeftPad;
            var hasTopPad = this.gridRow.grid.style.cellPadding.hasTopPad;
            var hasRightPad = this.gridRow.grid.style.cellPadding.hasRightPad;
            var hasBottomPad = this.gridRow.grid.style.cellPadding.hasBottomPad;
            if (hasLeftPad || hasTopPad || hasRightPad || hasBottomPad) {
              if (typeof this.gridRow.grid.style.cellPadding.left !== "undefined" && hasLeftPad) {
                returnBounds.x += this.gridRow.grid.style.cellPadding.left + this.cellStyle.borders.left.width;
                returnBounds.width -= this.gridRow.grid.style.cellPadding.left;
              }
              if (typeof this.gridRow.grid.style.cellPadding.top !== "undefined" && hasTopPad) {
                returnBounds.y += this.gridRow.grid.style.cellPadding.top + this.cellStyle.borders.top.width;
                returnBounds.height -= this.gridRow.grid.style.cellPadding.top;
              }
              if (typeof this.gridRow.grid.style.cellPadding.right !== "undefined" && hasRightPad) {
                returnBounds.width -= this.gridRow.grid.style.cellPadding.right;
              }
              if (typeof this.gridRow.grid.style.cellPadding.bottom !== "undefined" && hasBottomPad) {
                returnBounds.height -= this.gridRow.grid.style.cellPadding.bottom;
              }
            } else {
              var format = this.getStringFormat();
              if (format.alignment === null || typeof format.alignment === "undefined") {
                returnBounds.x += this.row.grid.style.cellPadding.left;
                returnBounds.y += this.row.grid.style.cellPadding.top;
              }
            }
          } else {
            var format = this.getStringFormat();
            if (format.alignment === null || typeof format.alignment === "undefined") {
              returnBounds.x += this.row.grid.style.cellPadding.left;
              returnBounds.y += this.row.grid.style.cellPadding.top;
            }
          }
        } else {
          if (typeof this.style.cellPadding.left !== "undefined" && this.style.cellPadding.hasLeftPad) {
            returnBounds.x += this.style.cellPadding.left + this.cellStyle.borders.left.width;
            returnBounds.width -= this.style.cellPadding.left;
          }
          if (typeof this.style.cellPadding.top !== "undefined" && this.style.cellPadding.hasTopPad) {
            returnBounds.y += this.style.cellPadding.top + this.cellStyle.borders.top.width;
            returnBounds.height -= this.style.cellPadding.top;
          }
          if (typeof this.style.cellPadding.right !== "undefined" && this.style.cellPadding.hasRightPad) {
            returnBounds.width -= this.style.cellPadding.right;
          }
          if (typeof this.style.cellPadding.bottom !== "undefined" && this.style.cellPadding.hasBottomPad) {
            returnBounds.height -= this.style.cellPadding.bottom;
          }
        }
        returnBounds.width -= this.cellStyle.borders.left.width + this.cellStyle.borders.right.width;
        returnBounds.height -= this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width;
      }
      return returnBounds;
    };
    PdfGridCell2.prototype.draw = function(graphics, bounds, cancelSubsequentSpans) {
      var isrowbreak = false;
      var result = null;
      if (this.internalIsCellMergeContinue || this.internalIsRowMergeContinue) {
        if (this.internalIsCellMergeContinue && this.row.grid.style.allowHorizontalOverflow) {
          if (this.row.rowOverflowIndex > 0 && this.row.cells.indexOf(this) != this.row.rowOverflowIndex + 1 || this.row.rowOverflowIndex == 0 && this.internalIsCellMergeContinue) {
            return result;
          }
        } else {
          return result;
        }
      }
      bounds = this.adjustOuterLayoutArea(bounds, graphics);
      this.drawCellBackground(graphics, bounds);
      var textPen = this.getTextPen();
      var textBrush = this.getTextBrush();
      if (typeof textPen === "undefined" && typeof textBrush === "undefined") {
        textBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));
      }
      var font = this.getTextFont();
      var strFormat = this.getStringFormat();
      var innerLayoutArea = bounds;
      if (innerLayoutArea.height >= graphics.clientSize.height) {
        if (this.row.grid.allowRowBreakAcrossPages) {
          innerLayoutArea.height -= innerLayoutArea.y;
          if (typeof this._rowHeight !== "undefined" && this._rowHeight !== null && innerLayoutArea.height > this._rowHeight) {
            innerLayoutArea.height = this._rowHeight;
          }
        }
      }
      innerLayoutArea = this.adjustContentLayoutArea(innerLayoutArea);
      if (typeof this.objectValue === "string" || typeof this.remaining === "string") {
        var temp = void 0;
        var layoutRectangle = void 0;
        if (innerLayoutArea.height < font.height) layoutRectangle = new RectangleF(innerLayoutArea.x, innerLayoutArea.y, innerLayoutArea.width, font.height);
        else layoutRectangle = innerLayoutArea;
        if (innerLayoutArea.height < font.height && this.row.grid.isChildGrid && this.row.grid.ParentCell != null) {
          var height = layoutRectangle.height - this.row.grid.ParentCell.row.grid.style.cellPadding.bottom - this.row.grid.style.cellPadding.bottom;
          if (this.row.grid.splitChildRowIndex != -1) {
            this.fontSpilt = true;
            this.row.rowFontSplit = true;
          }
          if (height > 0 && height < font.height) layoutRectangle.height = height;
        }
        if (this.gridRow.grid.style.cellSpacing != 0) {
          layoutRectangle.width -= this.gridRow.grid.style.cellSpacing;
          bounds.width -= this.gridRow.grid.style.cellSpacing;
        }
        if (this.isFinish) {
          temp = this.remaining === "" ? this.remaining : this.objectValue;
          graphics.drawString(temp, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);
          if (this.row.grid.splitChildRowIndex != -1 && !this.row.grid.isChildGrid && typeof this.remaining === "undefined") {
            this.remaining = "";
          }
        } else {
          if (typeof this.remaining == "undefined" || this.remaining === null) {
            this.remaining = "";
          }
          if (this.row.repeatFlag) {
            graphics.drawString(this.remaining, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);
          }
          this.isFinish = true;
        }
        result = graphics.stringLayoutResult;
      } else if (this.objectValue instanceof PdfGrid) {
        var childGrid = this.objectValue;
        childGrid.isChildGrid = true;
        childGrid.ParentCell = this;
        var layoutRect = void 0;
        layoutRect = innerLayoutArea;
        if (this.gridRow.grid.style.cellSpacing != 0) {
          bounds.width -= this.gridRow.grid.style.cellSpacing;
        }
        var layouter = new PdfGridLayouter(childGrid);
        var format = new PdfGridLayoutFormat();
        if (this.row.grid.LayoutFormat != null) format = this.row.grid.LayoutFormat;
        else format.layout = PdfLayoutType.Paginate;
        var param = new PdfLayoutParams();
        if (graphics.layer != null) {
          param.page = graphics.page;
          param.bounds = layoutRect;
          param.format = format;
          childGrid.setSpan();
          childGrid.checkSpan();
          var childGridResult = layouter.Layouter(param);
          this.value = childGrid;
          if (this.row.grid.splitChildRowIndex !== -1) {
            this.height = this.row.rowBreakHeightValue;
          }
          if (param.page != childGridResult.page) {
            if (this.row.rowBreakHeightValue !== null && typeof this.row.rowBreakHeightValue !== "undefined") childGridResult.bounds.height = this.row.rowBreakHeightValue;
            if (this.row.rowBreakHeight == 0) this.row.NestedGridLayoutResult = childGridResult;
            else this.row.rowBreakHeight = this.row.rowBreakHeightValue;
          }
        }
      } else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {
        var imageBounds = new RectangleF(innerLayoutArea.x, innerLayoutArea.y, innerLayoutArea.width, innerLayoutArea.height);
        var image = this.objectValue;
        if (image.width <= innerLayoutArea.width) {
          imageBounds.width = image.width;
        }
        if (image.height <= innerLayoutArea.height) {
          imageBounds.height = image.height;
        }
        graphics.drawImage(this.objectValue, imageBounds.x, imageBounds.y, imageBounds.width, imageBounds.height);
      } else if (this.objectValue instanceof PdfTextWebLink) {
        this.objectValue.draw(graphics.currentPage, innerLayoutArea);
      } else if (typeof this.objectValue === "undefined") {
        this.objectValue = "";
        graphics.drawString(this.objectValue, font, textPen, textBrush, innerLayoutArea.x, innerLayoutArea.y, innerLayoutArea.width, innerLayoutArea.height, strFormat);
        if (this.style.cellPadding != null && this.style.cellPadding.bottom == 0 && this.style.cellPadding.left == 0 && this.style.cellPadding.right == 0 && this.style.cellPadding.top == 0) {
          bounds.width -= this.style.borders.left.width + this.style.borders.right.width;
        }
        if (this.gridRow.grid.style.cellSpacing != 0) {
          bounds.width -= this.gridRow.grid.style.cellSpacing;
        }
      }
      if (this.style.borders != null) {
        if (!this.fontSpilt) this.drawCellBorders(graphics, bounds);
        else {
          if (this.row.grid.ParentCell.row.grid.splitChildRowIndex != -1) {
            this.row.rowFontSplit = false;
            this.drawCellBorders(graphics, bounds);
          }
        }
      }
      return result;
    };
    PdfGridCell2.prototype.drawCellBorders = function(graphics, bounds) {
      if (this.row.grid.style.borderOverlapStyle === PdfBorderOverlapStyle.Inside) {
        bounds.x += this.style.borders.left.width;
        bounds.y += this.style.borders.top.width;
        bounds.width -= this.style.borders.right.width;
        bounds.height -= this.style.borders.bottom.width;
      }
      var p1 = new PointF(bounds.x, bounds.y + bounds.height);
      var p2 = new PointF(bounds.x, bounds.y);
      var pen = this.cellStyle.borders.left;
      if (this.cellStyle.borders.left.dashStyle === PdfDashStyle.Solid) {
        pen.lineCap = PdfLineCap.Square;
      }
      if (pen.width !== 0) {
        graphics.drawLine(pen, p1, p2);
      }
      p1 = new PointF(bounds.x + bounds.width, bounds.y);
      p2 = new PointF(bounds.x + bounds.width, bounds.y + bounds.height);
      pen = this.cellStyle.borders.right;
      if (bounds.x + bounds.width > graphics.clientSize.width - pen.width / 2) {
        p1 = new PointF(graphics.clientSize.width - pen.width / 2, bounds.y);
        p2 = new PointF(graphics.clientSize.width - pen.width / 2, bounds.y + bounds.height);
      }
      if (this.cellStyle.borders.right.dashStyle === PdfDashStyle.Solid) {
        pen.lineCap = PdfLineCap.Square;
      }
      if (pen.width !== 0) {
        graphics.drawLine(pen, p1, p2);
      }
      p1 = new PointF(bounds.x, bounds.y);
      p2 = new PointF(bounds.x + bounds.width, bounds.y);
      pen = this.cellStyle.borders.top;
      if (this.cellStyle.borders.top.dashStyle === PdfDashStyle.Solid) {
        pen.lineCap = PdfLineCap.Square;
      }
      if (pen.width !== 0) {
        graphics.drawLine(pen, p1, p2);
      }
      p1 = new PointF(bounds.x + bounds.width, bounds.y + bounds.height);
      p2 = new PointF(bounds.x, bounds.y + bounds.height);
      pen = this.cellStyle.borders.bottom;
      if (bounds.y + bounds.height > graphics.clientSize.height - pen.width / 2) {
        p1 = new PointF(bounds.x + bounds.width, graphics.clientSize.height - pen.width / 2);
        p2 = new PointF(bounds.x, graphics.clientSize.height - pen.width / 2);
      }
      if (this.cellStyle.borders.bottom.dashStyle === PdfDashStyle.Solid) {
        pen.lineCap = PdfLineCap.Square;
      }
      if (pen.width !== 0) {
        graphics.drawLine(pen, p1, p2);
      }
    };
    PdfGridCell2.prototype.adjustOuterLayoutArea = function(bounds, g) {
      var isHeader = false;
      var cellSpacing = this.row.grid.style.cellSpacing;
      if (cellSpacing > 0) {
        bounds = new RectangleF(bounds.x + cellSpacing, bounds.y + cellSpacing, bounds.width - cellSpacing, bounds.height - cellSpacing);
      }
      var currentColIndex = this.row.cells.indexOf(this);
      if (this.columnSpan > 1 || this.row.rowOverflowIndex > 0 && currentColIndex == this.row.rowOverflowIndex + 1 && this.isCellMergeContinue) {
        var span = this.columnSpan;
        if (span == 1 && this.isCellMergeContinue) {
          for (var j = currentColIndex + 1; j < this.row.grid.columns.count; j++) {
            if (this.row.cells.getCell(j).isCellMergeContinue) span++;
            else break;
          }
        }
        var totalWidth = 0;
        for (var i = currentColIndex; i < currentColIndex + span; i++) {
          if (this.row.grid.style.allowHorizontalOverflow) {
            var width = void 0;
            var compWidth = this.row.grid.size.width < g.clientSize.width ? this.row.grid.size.width : g.clientSize.width;
            if (this.row.grid.size.width > g.clientSize.width) {
              width = bounds.x + totalWidth + this.row.grid.columns.getColumn(i).width;
            } else {
              width = totalWidth + this.row.grid.columns.getColumn(i).width;
            }
            if (width > compWidth) {
              break;
            }
          }
          totalWidth += this.row.grid.columns.getColumn(i).width;
        }
        totalWidth -= this.row.grid.style.cellSpacing;
        bounds.width = totalWidth;
      }
      if (this.rowSpan > 1 || this.row.rowSpanExists) {
        var span = this.rowSpan;
        var currentRowIndex = this.row.grid.rows.rowCollection.indexOf(this.row);
        if (currentRowIndex == -1) {
          currentRowIndex = this.row.grid.headers.indexOf(this.row);
          if (currentRowIndex != -1) {
            isHeader = true;
          }
        }
        var totalHeight = 0;
        var max = 0;
        for (var i = currentRowIndex; i < currentRowIndex + span; i++) {
          totalHeight += isHeader ? this.row.grid.headers.getHeader(i).height : this.row.grid.rows.getRow(i).height;
          var row = this.row.grid.rows.getRow(i);
          var rowIndex = this.row.grid.rows.rowCollection.indexOf(row);
        }
        var cellIndex = this.row.cells.indexOf(this);
        totalHeight -= this.row.grid.style.cellSpacing;
        bounds.height = totalHeight;
        if (!this.row.rowMergeComplete) {
          bounds.height = totalHeight;
        }
      }
      return bounds;
    };
    PdfGridCell2.prototype.getTextFont = function() {
      if (typeof this.style.font !== "undefined" && this.style.font != null) {
        return this.style.font;
      } else if (typeof this.row.style.font !== "undefined" && this.row.style.font != null) {
        return this.row.style.font;
      } else if (typeof this.row.grid.style.font !== "undefined" && this.row.grid.style.font != null) {
        return this.row.grid.style.font;
      } else {
        return PdfDocument.defaultFont;
      }
    };
    PdfGridCell2.prototype.getTextBrush = function() {
      if (typeof this.style.textBrush !== "undefined" && this.style.textBrush != null) {
        return this.style.textBrush;
      } else if (typeof this.row.style.textBrush !== "undefined" && this.row.style.textBrush != null) {
        return this.row.style.textBrush;
      } else {
        return this.row.grid.style.textBrush;
      }
    };
    PdfGridCell2.prototype.getTextPen = function() {
      if (typeof this.style.textPen !== "undefined" && this.style.textPen != null) {
        return this.style.textPen;
      } else if (typeof this.row.style.textPen !== "undefined" && this.row.style.textPen != null) {
        return this.row.style.textPen;
      } else {
        return this.row.grid.style.textPen;
      }
    };
    PdfGridCell2.prototype.getBackgroundBrush = function() {
      if (typeof this.style.backgroundBrush !== "undefined" && this.style.backgroundBrush != null) {
        return this.style.backgroundBrush;
      } else if (typeof this.row.style.backgroundBrush !== "undefined" && this.row.style.backgroundBrush != null) {
        return this.row.style.backgroundBrush;
      } else {
        return this.row.grid.style.backgroundBrush;
      }
    };
    PdfGridCell2.prototype.getBackgroundImage = function() {
      if (typeof this.style.backgroundImage !== "undefined" && this.style.backgroundImage != null) {
        return this.style.backgroundImage;
      } else if (typeof this.row.style.backgroundImage !== "undefined" && this.row.style.backgroundImage != null) {
        return this.row.style.backgroundImage;
      } else {
        return this.row.grid.style.backgroundImage;
      }
    };
    PdfGridCell2.prototype.getStringFormat = function() {
      if (typeof this.style.stringFormat !== "undefined" && this.style.stringFormat != null) {
        return this.style.stringFormat;
      } else {
        return this.stringFormat;
      }
    };
    PdfGridCell2.prototype.measureHeight = function() {
      var width = this.calculateWidth();
      if (this.style.cellPadding == null || typeof this.style.cellPadding === "undefined") {
        width -= this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left;
      } else {
        width -= this.style.cellPadding.right + this.style.cellPadding.left;
        width -= this.style.borders.left.width + this.style.borders.right.width;
      }
      var height = 0;
      var layouter = new PdfStringLayouter();
      if (typeof this.objectValue === "string" || typeof this.remaining === "string") {
        var currentValue = this.objectValue;
        if (!this.isFinish) currentValue = !(this.remaining === null || this.remaining === "" || typeof this.remaining === "undefined") ? this.remaining : this.objectValue;
        var slr = null;
        var cellIndex = this.row.cells.indexOf(this);
        if (this.gridRow.grid.style.cellSpacing != 0) {
          width -= this.gridRow.grid.style.cellSpacing * 2;
        }
        if (!this.row.cells.getCell(cellIndex).hasColSpan && !this.row.cells.getCell(cellIndex).hasRowSpan) {
          if (this.gridRow.grid.isChildGrid) {
            if (width < 0) {
              this.tempval = width;
              if (this.style.cellPadding == null || typeof this.style.cellPadding === "undefined") {
                this.tempval += this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left;
              } else {
                this.tempval += this.style.cellPadding.right + this.style.cellPadding.left;
                this.tempval += this.style.borders.left.width + this.style.borders.right.width;
              }
            } else {
              this.tempval = width;
            }
            slr = layouter.layout(currentValue, this.getTextFont(), this.stringFormat, new SizeF(this.tempval, 0), false, new SizeF(0, 0));
            height += slr.actualSize.height;
          } else {
            slr = layouter.layout(currentValue, this.getTextFont(), this.stringFormat, new SizeF(width, 0), false, new SizeF(0, 0));
            height += slr.actualSize.height;
          }
        }
        height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;
      } else if (this.objectValue instanceof PdfGrid) {
        var cellIndex = this.row.cells.indexOf(this);
        var internalWidth = 0;
        if (this.style.cellPadding != null || typeof this.style.cellPadding !== "undefined") {
          internalWidth = this.calculateWidth();
          if (typeof this.style.cellPadding.left !== "undefined" && this.style.cellPadding.hasLeftPad) {
            internalWidth -= this.style.cellPadding.left;
          }
          if (typeof this.style.cellPadding.right !== "undefined" && this.style.cellPadding.hasRightPad) {
            internalWidth -= this.style.cellPadding.right;
          }
        } else if (this.row.grid.style.cellPadding != null || typeof this.row.grid.style.cellPadding !== "undefined") {
          internalWidth = this.calculateWidth();
          if (typeof this.row.grid.style.cellPadding.left !== "undefined" && this.row.grid.style.cellPadding.hasLeftPad) {
            internalWidth -= this.row.grid.style.cellPadding.left;
          }
          if (typeof this.row.grid.style.cellPadding.right !== "undefined" && this.row.grid.style.cellPadding.hasRightPad) {
            internalWidth -= this.row.grid.style.cellPadding.right;
          }
        } else {
          internalWidth = this.calculateWidth();
        }
        this.objectValue.tempWidth = internalWidth;
        if (!this.row.cells.getCell(cellIndex).hasColSpan && !this.row.cells.getCell(cellIndex).hasRowSpan) {
          height = this.objectValue.size.height;
        } else {
          height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;
        }
        if (this.gridRow.grid.style.cellSpacing !== 0) {
          width -= this.gridRow.grid.style.cellSpacing * 2;
        }
        if (this.style.cellPadding != null || typeof this.style.cellPadding !== "undefined") {
          if (typeof this.row.grid.style.cellPadding.top !== "undefined" && this.row.grid.style.cellPadding.hasTopPad) {
            height += this.row.grid.style.cellPadding.top;
          }
          if (this.row.grid.style.cellPadding.hasBottomPad && typeof this.row.grid.style.cellPadding.bottom !== "undefined") {
            height += this.row.grid.style.cellPadding.bottom;
          }
        }
        height += this.objectValue.style.cellSpacing;
      } else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {
        height += this.objectValue.height;
      } else if (this.objectValue instanceof PdfTextWebLink) {
        var webLink = this.objectValue;
        var slr = layouter.layout(webLink.text, webLink.font, webLink.stringFormat, new SizeF(width, 0), false, new SizeF(0, 0));
        height += slr.actualSize.height;
        height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;
      } else if (typeof this.objectValue === "undefined") {
        if (this.style.cellPadding == null || typeof this.style.cellPadding === "undefined") {
          width -= this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left;
        } else {
          width -= this.style.cellPadding.right + this.style.cellPadding.left;
          width -= this.style.borders.left.width + this.style.borders.right.width;
        }
        height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;
      }
      if (!(this.objectValue instanceof PdfGrid)) {
        if (this.style.cellPadding == null || typeof this.style.cellPadding === "undefined") {
          height += this.row.grid.style.cellPadding.top + this.row.grid.style.cellPadding.bottom;
        } else {
          height += this.style.cellPadding.top + this.style.cellPadding.bottom;
        }
      } else {
        if (this.style.cellPadding == null || typeof this.style.cellPadding === "undefined") {
          if (typeof this.row.grid.style.cellPadding.top !== "undefined" && this.row.grid.style.cellPadding.hasTopPad) {
            height += this.row.grid.style.cellPadding.top;
          }
          if (typeof this.row.grid.style.cellPadding.bottom !== "undefined" && this.row.grid.style.cellPadding.hasBottomPad) {
            height += this.row.grid.style.cellPadding.bottom;
          }
        } else {
          if (typeof this.style.cellPadding.top !== "undefined" && this.style.cellPadding.hasTopPad) {
            height += this.style.cellPadding.top;
          }
          if (typeof this.style.cellPadding.bottom !== "undefined" && this.style.cellPadding.hasBottomPad) {
            height += this.style.cellPadding.bottom;
          }
        }
      }
      height += this.row.grid.style.cellSpacing;
      return height;
    };
    PdfGridCell2.prototype.calculateWidth = function() {
      var cellIndex = this.row.cells.indexOf(this);
      var rowindex = this.row.grid.rows.rowCollection.indexOf(this.row);
      var columnSpan = this.columnSpan;
      var width = 0;
      if (columnSpan === 1) {
        for (var i = 0; i < columnSpan; i++) {
          width += this.row.grid.columns.getColumn(cellIndex + i).width;
        }
      } else if (columnSpan > 1) {
        for (var i = 0; i < columnSpan; i++) {
          width += this.row.grid.columns.getColumn(cellIndex + i).width;
          if (i + 1 < columnSpan) {
            this.row.cells.getCell(cellIndex + i + 1).hasColSpan = true;
          }
        }
      }
      if (this.parent != null && this.parent.row.width > 0) {
        if (this.row.grid.isChildGrid && this.parent != null && this.row.width > this.parent.row.width) {
          width = 0;
          for (var j = 0; j < this.parent.columnSpan; j++) {
            width += this.parent.row.grid.columns.getColumn(j).width;
          }
          width = width / this.row.cells.count;
        }
      }
      return width;
    };
    return PdfGridCell2;
  }()
);
var PdfGridCellCollection = (
  /** @class */
  function() {
    function PdfGridCellCollection2(row) {
      this.cells = [];
      this.gridRow = row;
    }
    PdfGridCellCollection2.prototype.getCell = function(index) {
      if (index < 0 || index >= this.count) {
        throw new Error("IndexOutOfRangeException");
      }
      return this.cells[index];
    };
    Object.defineProperty(PdfGridCellCollection2.prototype, "count", {
      /**
       * Gets the cells `count`.[Read-Only].
       * @private
       */
      get: function() {
        return this.cells.length;
      },
      enumerable: true,
      configurable: true
    });
    PdfGridCellCollection2.prototype.add = function(cell) {
      if (typeof cell === "undefined") {
        var tempcell = new PdfGridCell();
        this.add(tempcell);
        return cell;
      } else {
        cell.row = this.gridRow;
        this.cells.push(cell);
      }
    };
    PdfGridCellCollection2.prototype.indexOf = function(cell) {
      return this.cells.indexOf(cell);
    };
    return PdfGridCellCollection2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/pdf-grid-column.js
var PdfGridColumn = (
  /** @class */
  function() {
    function PdfGridColumn2(grid) {
      this.columnWidth = 0;
      this.grid = grid;
    }
    Object.defineProperty(PdfGridColumn2.prototype, "width", {
      /**
       * Gets or sets the `width` of the 'PdfGridColumn'.
       * @private
       */
      get: function() {
        return this.columnWidth;
      },
      set: function(value) {
        this.isCustomWidth = true;
        this.columnWidth = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridColumn2.prototype, "format", {
      /**
       * Gets or sets the information about the text `formatting`.
       * @private
       */
      get: function() {
        if (this.stringFormat == null) {
          this.stringFormat = new PdfStringFormat();
        }
        return this.stringFormat;
      },
      set: function(value) {
        this.stringFormat = value;
      },
      enumerable: true,
      configurable: true
    });
    return PdfGridColumn2;
  }()
);
var PdfGridColumnCollection = (
  /** @class */
  function() {
    function PdfGridColumnCollection2(grid) {
      this.internalColumns = [];
      this.columnWidth = 0;
      this.grid = grid;
      this.internalColumns = [];
    }
    PdfGridColumnCollection2.prototype.add = function(count) {
      for (var i = 0; i < count; i++) {
        this.internalColumns.push(new PdfGridColumn(this.grid));
        for (var index = 0; index < this.grid.rows.count; index++) {
          var row = this.grid.rows.getRow(index);
          var cell = new PdfGridCell();
          cell.value = "";
          row.cells.add(cell);
        }
      }
    };
    Object.defineProperty(PdfGridColumnCollection2.prototype, "count", {
      /**
       * Gets the `number of columns` in the 'PdfGrid'.[Read-Only].
       * @private
       */
      get: function() {
        return this.internalColumns.length;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridColumnCollection2.prototype, "width", {
      /**
       * Gets the `widths`.
       * @private
       */
      get: function() {
        if (this.columnWidth === 0) {
          this.columnWidth = this.measureColumnsWidth();
        }
        if (this.grid.initialWidth !== 0 && this.columnWidth !== this.grid.initialWidth && !this.grid.style.allowHorizontalOverflow) {
          this.columnWidth = this.grid.initialWidth;
          this.grid.isPageWidth = true;
        }
        return this.columnWidth;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridColumnCollection2.prototype, "columns", {
      /**
       * Gets the `array of PdfGridColumn`.[Read-Only]
       * @private
       */
      get: function() {
        return this.internalColumns;
      },
      enumerable: true,
      configurable: true
    });
    PdfGridColumnCollection2.prototype.getColumn = function(index) {
      if (index >= 0 && index <= this.columns.length) {
        return this.columns[index];
      } else {
        throw Error("can not get the column from the index: " + index);
      }
    };
    PdfGridColumnCollection2.prototype.measureColumnsWidth = function() {
      var totalWidth = 0;
      this.grid.measureColumnsWidth();
      for (var i = 0, count = this.internalColumns.length; i < count; i++) {
        totalWidth += this.internalColumns[i].width;
      }
      return totalWidth;
    };
    PdfGridColumnCollection2.prototype.getDefaultWidths = function(totalWidth) {
      var widths = [];
      var summ = 0;
      var subFactor = this.count;
      for (var i = 0; i < this.count; i++) {
        if (this.grid.isPageWidth && totalWidth >= 0 && !this.internalColumns[i].isCustomWidth) {
          this.internalColumns[i].width = 0;
        } else {
          widths[i] = this.internalColumns[i].width;
          if (this.internalColumns[i].width > 0 && this.internalColumns[i].isCustomWidth) {
            totalWidth -= this.internalColumns[i].width;
            subFactor--;
          } else {
            widths[i] = 0;
          }
        }
      }
      for (var i = 0; i < this.count; i++) {
        var width = totalWidth / subFactor;
        if (widths[i] <= 0) {
          widths[i] = width;
        }
      }
      return widths;
    };
    return PdfGridColumnCollection2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/pdf-grid-row.js
var PdfGridRow = (
  /** @class */
  function() {
    function PdfGridRow2(grid) {
      this.gridRowOverflowIndex = 0;
      this.rowHeight = 0;
      this.rowWidth = 0;
      this.isrowFinish = false;
      this.isRowSpanRowHeightSet = false;
      this.noOfPageCount = 0;
      this.isRowHeightSet = false;
      this.isPageBreakRowSpanApplied = false;
      this.isRowMergeComplete = true;
      this.repeatFlag = false;
      this.rowFontSplit = false;
      this.isHeaderRow = false;
      this.pdfGrid = grid;
    }
    Object.defineProperty(PdfGridRow2.prototype, "rowSpanExists", {
      //Properties
      /**
       * Gets or sets a value indicating [`row span exists`].
       * @private
       */
      get: function() {
        return this.bRowSpanExists;
      },
      set: function(value) {
        this.bRowSpanExists = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridRow2.prototype, "cells", {
      /**
       * Gets the `cells` from the selected row.[Read-Only].
       * @private
       */
      get: function() {
        if (this.gridCells == null) {
          this.gridCells = new PdfGridCellCollection(this);
        }
        return this.gridCells;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridRow2.prototype, "grid", {
      /**
       * Gets or sets the parent `grid`.
       * @private
       */
      get: function() {
        return this.pdfGrid;
      },
      set: function(value) {
        this.pdfGrid = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridRow2.prototype, "style", {
      /**
       * Gets or sets the row `style`.
       * @private
       */
      get: function() {
        if (typeof this.rowStyle === "undefined") {
          this.rowStyle = new PdfGridRowStyle();
          this.rowStyle.setParent(this);
        }
        return this.rowStyle;
      },
      set: function(value) {
        this.rowStyle = value;
        for (var i = 0; i < this.cells.count; i++) {
          this.cells.getCell(i).style.borders = value.border;
          if (typeof value.font !== "undefined") {
            this.cells.getCell(i).style.font = value.font;
          }
          if (typeof value.backgroundBrush !== "undefined") {
            this.cells.getCell(i).style.backgroundBrush = value.backgroundBrush;
          }
          if (typeof value.backgroundImage !== "undefined") {
            this.cells.getCell(i).style.backgroundImage = value.backgroundImage;
          }
          if (typeof value.textBrush !== "undefined") {
            this.cells.getCell(i).style.textBrush = value.textBrush;
          }
          if (typeof value.textPen !== "undefined") {
            this.cells.getCell(i).style.textPen = value.textPen;
          }
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridRow2.prototype, "rowBreakHeight", {
      /**
       * `Height` of the row yet to be drawn after split.
       * @private
       */
      get: function() {
        if (typeof this.gridRowBreakHeight === "undefined") {
          this.gridRowBreakHeight = 0;
        }
        return this.gridRowBreakHeight;
      },
      set: function(value) {
        this.gridRowBreakHeight = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridRow2.prototype, "rowOverflowIndex", {
      /**
       * `over flow index` of the row.
       * @private
       */
      get: function() {
        return this.gridRowOverflowIndex;
      },
      set: function(value) {
        this.gridRowOverflowIndex = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridRow2.prototype, "height", {
      /**
       * Gets or sets the `height` of the row.
       * @private
       */
      get: function() {
        if (!this.isRowHeightSet) {
          this.rowHeight = this.measureHeight();
        }
        return this.rowHeight;
      },
      set: function(value) {
        this.rowHeight = value;
        this.isRowHeightSet = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridRow2.prototype, "width", {
      /**
       * Gets or sets the `width` of the row.
       * @private
       */
      get: function() {
        if (this.rowWidth === 0 || typeof this.rowWidth === "undefined") {
          this.rowWidth = this.measureWidth();
        }
        return this.rowWidth;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridRow2.prototype, "NestedGridLayoutResult", {
      /**
       * Gets or sets the row `Nested grid Layout Result`.
       * @private
       */
      get: function() {
        return this.gridResult;
      },
      set: function(value) {
        this.gridResult = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridRow2.prototype, "columnSpanExists", {
      /**
       * Gets or sets a value indicating [`column span exists`].
       * @private
       */
      get: function() {
        return this.bColumnSpanExists;
      },
      set: function(value) {
        this.bColumnSpanExists = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridRow2.prototype, "rowMergeComplete", {
      /**
       * Check whether the Row `has row span or row merge continue`.
       * @private
       */
      get: function() {
        return this.isRowMergeComplete;
      },
      set: function(value) {
        this.isRowMergeComplete = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridRow2.prototype, "rowIndex", {
      /**
       * Returns `index` of the row.
       * @private
       */
      get: function() {
        return this.grid.rows.rowCollection.indexOf(this);
      },
      enumerable: true,
      configurable: true
    });
    PdfGridRow2.prototype.measureHeight = function() {
      var rowSpanRemainingHeight = 0;
      var rowHeight;
      var maxHeight2 = 0;
      if (this.cells.getCell(0).rowSpan > 1) {
        rowHeight = 0;
      } else {
        rowHeight = this.cells.getCell(0).height;
      }
      for (var i = 0; i < this.cells.count; i++) {
        var cell = this.cells.getCell(i);
        if (cell.rowSpanRemainingHeight > rowSpanRemainingHeight) {
          rowSpanRemainingHeight = cell.rowSpanRemainingHeight;
        }
        this.rowMergeComplete = false;
        if (cell.rowSpan > 1) {
          var cellIn = i;
          var rowin = this.isHeaderRow ? this.grid.headers.indexOf(this) : this.grid.rows.rowCollection.indexOf(this);
          for (var j = 0; j < cell.rowSpan; j++) {
            if (j + 1 < cell.rowSpan) {
              (this.isHeaderRow ? this.grid.headers.getHeader(rowin + j + 1) : this.grid.rows.getRow(rowin + j + 1)).cells.getCell(cellIn).hasRowSpan = true;
            }
          }
          if (maxHeight2 < cell.height) {
            maxHeight2 = cell.height;
          }
          continue;
        }
        rowHeight = Math.max(rowHeight, cell.height);
      }
      if (maxHeight2 > rowHeight) {
        rowHeight = maxHeight2;
      }
      if (rowHeight === 0) {
        rowHeight = maxHeight2;
      } else if (rowSpanRemainingHeight > 0) {
        rowHeight += rowSpanRemainingHeight;
      }
      return rowHeight;
    };
    PdfGridRow2.prototype.measureWidth = function() {
      var rowWid = 0;
      for (var i = 0; i < this.grid.columns.count; i++) {
        var column = this.grid.columns.getColumn(i);
        rowWid += column.width;
      }
      return rowWid;
    };
    return PdfGridRow2;
  }()
);
var PdfGridRowCollection = (
  /** @class */
  function() {
    function PdfGridRowCollection2(grid) {
      this.rows = [];
      this.grid = grid;
    }
    Object.defineProperty(PdfGridRowCollection2.prototype, "count", {
      //Properties
      /**
       * Gets the number of header in the `PdfGrid`.[Read-Only].
       * @private
       */
      get: function() {
        return this.rows.length;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridRowCollection2.prototype, "rowCollection", {
      //Implementation
      /**
       * Return the row collection of the `grid`.
       * @private
       */
      get: function() {
        return this.rows;
      },
      enumerable: true,
      configurable: true
    });
    PdfGridRowCollection2.prototype.addRow = function(arg) {
      if (typeof arg === "undefined") {
        var temprow = new PdfGridRow(this.grid);
        this.addRow(temprow);
        return temprow;
      } else {
        arg.style.setBackgroundBrush(this.grid.style.backgroundBrush);
        arg.style.setFont(this.grid.style.font);
        arg.style.setTextBrush(this.grid.style.textBrush);
        arg.style.setTextPen(this.grid.style.textPen);
        if (arg.cells.count === 0) {
          for (var i = 0; i < this.grid.columns.count; i++) {
            arg.cells.add(new PdfGridCell());
          }
        }
        this.rows.push(arg);
      }
    };
    PdfGridRowCollection2.prototype.getRow = function(index) {
      return this.rows[index];
    };
    return PdfGridRowCollection2;
  }()
);
var PdfGridHeaderCollection = (
  /** @class */
  function() {
    function PdfGridHeaderCollection2(grid) {
      this.rows = [];
      this.grid = grid;
      this.rows = [];
    }
    PdfGridHeaderCollection2.prototype.getHeader = function(index) {
      return this.rows[index];
    };
    Object.defineProperty(PdfGridHeaderCollection2.prototype, "count", {
      /**
       * Gets the `number of header` in the 'PdfGrid'.[Read-Only]
       * @private
       */
      get: function() {
        return this.rows.length;
      },
      enumerable: true,
      configurable: true
    });
    PdfGridHeaderCollection2.prototype.add = function(arg) {
      if (typeof arg === "number") {
        var row = void 0;
        for (var i = 0; i < arg; i++) {
          row = new PdfGridRow(this.grid);
          row.isHeaderRow = true;
          for (var j = 0; j < this.grid.columns.count; j++) {
            row.cells.add(new PdfGridCell());
          }
          this.rows.push(row);
        }
        return this.rows;
      } else {
        this.rows.push(arg);
      }
    };
    PdfGridHeaderCollection2.prototype.indexOf = function(row) {
      return this.rows.indexOf(row);
    };
    return PdfGridHeaderCollection2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/pdf-grid.js
var __extends85 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfGrid = (
  /** @class */
  function(_super) {
    __extends85(PdfGrid2, _super);
    function PdfGrid2() {
      var _this = _super.call(this) || this;
      _this.gridSize = new SizeF(0, 0);
      _this.isGridSplit = false;
      _this.isRearranged = false;
      _this.pageBounds = new RectangleF();
      _this.listOfNavigatePages = [];
      _this.parentCellIndex = 0;
      _this.tempWidth = 0;
      _this.breakRow = true;
      _this.splitChildRowIndex = -1;
      _this.hasRowSpanSpan = false;
      _this.hasColumnSpan = false;
      _this.isSingleGrid = true;
      return _this;
    }
    Object.defineProperty(PdfGrid2.prototype, "raiseBeginCellDraw", {
      //Properties
      /**
       * Gets a value indicating whether the `start cell layout event` should be raised.
       * @private
       */
      get: function() {
        return typeof this.beginCellDraw !== "undefined" && typeof this.beginCellDraw !== null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGrid2.prototype, "raiseEndCellDraw", {
      /**
       * Gets a value indicating whether the `end cell layout event` should be raised.
       * @private
       */
      get: function() {
        return typeof this.endCellDraw !== "undefined" && typeof this.endCellDraw !== null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGrid2.prototype, "repeatHeader", {
      /**
       * Gets or sets a value indicating whether to `repeat header`.
       * @private
       */
      get: function() {
        if (this.bRepeatHeader == null || typeof this.bRepeatHeader === "undefined") {
          this.bRepeatHeader = false;
        }
        return this.bRepeatHeader;
      },
      set: function(value) {
        this.bRepeatHeader = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGrid2.prototype, "allowRowBreakAcrossPages", {
      /**
       * Gets or sets a value indicating whether to split or cut rows that `overflow a page`.
       * @private
       */
      get: function() {
        return this.breakRow;
      },
      set: function(value) {
        this.breakRow = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGrid2.prototype, "columns", {
      /**
       * Gets the `column` collection of the PdfGrid.[Read-Only]
       * @private
       */
      get: function() {
        if (this.gridColumns == null || typeof this.gridColumns === "undefined") {
          this.gridColumns = new PdfGridColumnCollection(this);
        }
        return this.gridColumns;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGrid2.prototype, "rows", {
      /**
       * Gets the `row` collection from the PdfGrid.[Read-Only]
       * @private
       */
      get: function() {
        if (this.gridRows == null) {
          this.gridRows = new PdfGridRowCollection(this);
        }
        return this.gridRows;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGrid2.prototype, "headers", {
      /**
       * Gets the `headers` collection from the PdfGrid.[Read-Only]
       * @private
       */
      get: function() {
        if (this.gridHeaders == null || typeof this.gridHeaders === "undefined") {
          this.gridHeaders = new PdfGridHeaderCollection(this);
        }
        return this.gridHeaders;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGrid2.prototype, "initialWidth", {
      /**
       * Indicating `initial width` of the page.
       * @private
       */
      get: function() {
        return this.gridInitialWidth;
      },
      set: function(value) {
        this.gridInitialWidth = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGrid2.prototype, "style", {
      /**
       * Gets or sets the `grid style`.
       * @private
       */
      get: function() {
        if (this.gridStyle == null) {
          this.gridStyle = new PdfGridStyle();
        }
        return this.gridStyle;
      },
      set: function(value) {
        if (this.gridStyle == null) {
          this.gridStyle = value;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGrid2.prototype, "isPageWidth", {
      /**
       * Gets a value indicating whether the grid column width is considered to be `page width`.
       * @private
       */
      get: function() {
        return this.ispageWidth;
      },
      set: function(value) {
        this.ispageWidth = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGrid2.prototype, "isChildGrid", {
      /**
       * Gets or set if grid `is nested grid`.
       * @private
       */
      get: function() {
        return this.ischildGrid;
      },
      set: function(value) {
        this.ischildGrid = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGrid2.prototype, "size", {
      /**
       * Gets or set if grid ' is split or not'
       * @public
       */
      // public get isGridSplit() : boolean {
      //     return this.isgridSplit;
      // }
      // public set isGridSplit(value : boolean) {
      //     this.isgridSplit = value;
      // }public get isGridSplit() : boolean {
      //     return this.isgridSplit;
      // }
      // public set isGridSplit(value : boolean) {
      //     this.isgridSplit = value;
      // }
      /**
       * Gets the `size`.
       * @private
       */
      get: function() {
        if ((this.gridSize.width === 0 || typeof this.gridSize.width === "undefined") && this.gridSize.height === 0) {
          this.gridSize = this.measure();
        }
        return this.gridSize;
      },
      set: function(value) {
        this.gridSize = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGrid2.prototype, "ParentCell", {
      get: function() {
        return this.parentCell;
      },
      set: function(value) {
        this.parentCell = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGrid2.prototype, "LayoutFormat", {
      get: function() {
        return this.layoutFormat;
      },
      enumerable: true,
      configurable: true
    });
    PdfGrid2.prototype.draw = function(arg1, arg2, arg3, arg4) {
      if (arg2 instanceof PointF && typeof arg2.width === "undefined" && typeof arg3 === "undefined") {
        return this.drawHelper(arg1, arg2.x, arg2.y);
      } else if (typeof arg2 === "number" && typeof arg3 === "number" && typeof arg4 === "undefined") {
        return this.drawHelper(arg1, arg2, arg3, null);
      } else if (arg2 instanceof RectangleF && typeof arg2.width !== "undefined" && typeof arg3 === "undefined") {
        return this.drawHelper(arg1, arg2, null);
      } else if (arg2 instanceof PointF && typeof arg2.width === "undefined" && arg3 instanceof PdfLayoutFormat) {
        return this.drawHelper(arg1, arg2.x, arg2.y, arg3);
      } else if (typeof arg2 === "number" && typeof arg3 === "number" && (arg4 instanceof PdfLayoutFormat || arg4 == null)) {
        var width = arg1.graphics.clientSize.width - arg2;
        var layoutRectangle = new RectangleF(arg2, arg3, width, 0);
        return this.drawHelper(arg1, layoutRectangle, arg4);
      } else if (arg2 instanceof RectangleF && typeof arg2.width !== "undefined" && typeof arg3 === "boolean") {
        return this.drawHelper(arg1, arg2, null);
      } else {
        return this.drawHelper(arg1, arg2, arg3);
      }
    };
    PdfGrid2.prototype.measure = function() {
      var height = 0;
      var width = this.columns.width;
      for (var i = 0; i < this.headers.count; i++) {
        var row = this.headers.getHeader(i);
        height += row.height;
      }
      for (var i = 0; i < this.rows.count; i++) {
        var row = this.rows.getRow(i);
        height += row.height;
      }
      return new SizeF(width, height);
    };
    PdfGrid2.prototype.onBeginCellDraw = function(args) {
      if (this.raiseBeginCellDraw) {
        this.beginCellDraw(this, args);
      }
    };
    PdfGrid2.prototype.onEndCellDraw = function(args) {
      if (this.raiseEndCellDraw) {
        this.endCellDraw(this, args);
      }
    };
    PdfGrid2.prototype.layout = function(param) {
      var width = param.bounds.width;
      var height = param.bounds.height;
      var hasChanged = false;
      if (typeof param.bounds.width === "undefined" || param.bounds.width === 0) {
        width = param.page.getClientSize().width - param.bounds.x;
        hasChanged = true;
      }
      if (typeof param.bounds.height === "undefined" || param.bounds.height === 0) {
        height = param.page.getClientSize().height - param.bounds.y;
        hasChanged = true;
      }
      if (hasChanged) {
        param.bounds = new RectangleF(param.bounds.x, param.bounds.y, width, height);
      }
      if (this.rows.count !== 0) {
        var currentRow = this.rows.getRow(0).cells.getCell(0).style;
        if (currentRow.borders != null && (currentRow.borders.left != null && currentRow.borders.left.width !== 1 || currentRow.borders.top != null && currentRow.borders.top.width !== 1)) {
          var x = currentRow.borders.left.width / 2;
          var y = currentRow.borders.top.width / 2;
          if (param.bounds.x === PdfBorders.default.right.width / 2 && param.bounds.y === PdfBorders.default.right.width / 2) {
            var newBound = new RectangleF(x, y, this.gridSize.width, this.gridSize.height);
            param.bounds = newBound;
          }
        }
      }
      this.setSpan();
      this.checkSpan();
      this.layoutFormat = param.format;
      this._gridLocation = param.bounds;
      var layouter = new PdfGridLayouter(this);
      var result = layouter.Layouter(param);
      return result;
    };
    PdfGrid2.prototype.setSpan = function() {
      var colSpan = 1;
      var rowSpan = 1;
      var currentCellIndex = 0;
      var currentRowIndex = 0;
      var maxSpan = 0;
      var rowCount = this.headers.count;
      for (var i = 0; i < rowCount; i++) {
        var row = this.headers.getHeader(i);
        maxSpan = 0;
        var colCount = row.cells.count;
        for (var j = 0; j < colCount; j++) {
          var cell = row.cells.getCell(j);
          maxSpan = Math.max(maxSpan, cell.rowSpan);
          if (!cell.isCellMergeContinue && !cell.isRowMergeContinue && (cell.columnSpan > 1 || cell.rowSpan > 1)) {
            if (cell.columnSpan + j > row.cells.count) {
              throw new Error("Invalid span specified at row " + j.toString() + " column " + i.toString());
            }
            if (cell.rowSpan + i > this.headers.count) {
              throw new Error("Invalid span specified at Header " + j.toString() + " column " + i.toString());
            }
            if (cell.columnSpan > 1 && cell.rowSpan > 1) {
              colSpan = cell.columnSpan;
              rowSpan = cell.rowSpan;
              currentCellIndex = j;
              currentRowIndex = i;
              cell.isCellMergeStart = true;
              cell.isRowMergeStart = true;
              while (colSpan > 1) {
                currentCellIndex++;
                row.cells.getCell(currentCellIndex).isCellMergeContinue = true;
                row.cells.getCell(currentCellIndex).isRowMergeContinue = true;
                row.cells.getCell(currentCellIndex).rowSpan = rowSpan;
                colSpan--;
              }
              currentCellIndex = j;
              colSpan = cell.columnSpan;
              while (rowSpan > 1) {
                currentRowIndex++;
                this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;
                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;
                rowSpan--;
                while (colSpan > 1) {
                  currentCellIndex++;
                  this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;
                  this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;
                  colSpan--;
                }
                colSpan = cell.columnSpan;
                currentCellIndex = j;
              }
            } else if (cell.columnSpan > 1 && cell.rowSpan === 1) {
              colSpan = cell.columnSpan;
              currentCellIndex = j;
              cell.isCellMergeStart = true;
              while (colSpan > 1) {
                currentCellIndex++;
                row.cells.getCell(currentCellIndex).isCellMergeContinue = true;
                colSpan--;
              }
            } else if (cell.columnSpan === 1 && cell.rowSpan > 1) {
              rowSpan = cell.rowSpan;
              currentRowIndex = i;
              while (rowSpan > 1) {
                currentRowIndex++;
                this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;
                rowSpan--;
              }
            }
          }
        }
        row.maximumRowSpan = maxSpan;
      }
    };
    PdfGrid2.prototype.checkSpan = function() {
      var cellcolSpan;
      var cellrowSpan = 1;
      var cellmaxSpan = 0;
      var currentCellIndex;
      var currentRowIndex = 0;
      cellcolSpan = cellrowSpan = 1;
      currentCellIndex = currentRowIndex = 0;
      if (this.hasRowSpanSpan || this.hasColumnSpan) {
        var rowCount = this.rows.count;
        for (var i = 0; i < rowCount; i++) {
          var row = this.rows.getRow(i);
          cellmaxSpan = 0;
          var colCount = row.cells.count;
          for (var j = 0; j < colCount; j++) {
            var cell = row.cells.getCell(j);
            cellmaxSpan = Math.max(cellmaxSpan, cell.rowSpan);
            if (!cell.isCellMergeContinue && !cell.isRowMergeContinue && (cell.columnSpan > 1 || cell.rowSpan > 1)) {
              if (cell.columnSpan + j > row.cells.count) {
                throw new Error("Invalid span specified at row  " + j.toString() + " column " + i.toString());
              }
              if (cell.rowSpan + i > this.rows.count) {
                throw new Error("Invalid span specified at row  " + j.toString() + " column " + i.toString());
              }
              if (cell.columnSpan > 1 && cell.rowSpan > 1) {
                cellcolSpan = cell.columnSpan;
                cellrowSpan = cell.rowSpan;
                currentCellIndex = j;
                currentRowIndex = i;
                cell.isCellMergeStart = true;
                cell.isRowMergeStart = true;
                while (cellcolSpan > 1) {
                  currentCellIndex++;
                  row.cells.getCell(currentCellIndex).isCellMergeContinue = true;
                  row.cells.getCell(currentCellIndex).isRowMergeContinue = true;
                  cellcolSpan--;
                }
                currentCellIndex = j;
                cellcolSpan = cell.columnSpan;
                while (cellrowSpan > 1) {
                  currentRowIndex++;
                  this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;
                  this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;
                  cellrowSpan--;
                  while (cellcolSpan > 1) {
                    currentCellIndex++;
                    this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;
                    this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;
                    cellcolSpan--;
                  }
                  cellcolSpan = cell.columnSpan;
                  currentCellIndex = j;
                }
              } else if (cell.columnSpan > 1 && cell.rowSpan === 1) {
                cellcolSpan = cell.columnSpan;
                currentCellIndex = j;
                cell.isCellMergeStart = true;
                while (cellcolSpan > 1) {
                  currentCellIndex++;
                  row.cells.getCell(currentCellIndex).isCellMergeContinue = true;
                  cellcolSpan--;
                }
              } else if (cell.columnSpan === 1 && cell.rowSpan > 1) {
                cellrowSpan = cell.rowSpan;
                currentRowIndex = i;
                while (cellrowSpan > 1) {
                  currentRowIndex++;
                  this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;
                  cellrowSpan--;
                }
              }
            }
          }
          row.maximumRowSpan = cellmaxSpan;
        }
      }
    };
    PdfGrid2.prototype.measureColumnsWidth = function(bounds) {
      if (typeof bounds !== "undefined") {
        this.isPageWidth = false;
        var widths = this.columns.getDefaultWidths(bounds.width - bounds.x);
        for (var i = 0, count = this.columns.count; i < count; i++) {
          this.columns.getColumn(i).columnWidth = widths[i];
          this.tempWidth = widths[i];
        }
        if (this.ParentCell != null && this.style.allowHorizontalOverflow == false && this.ParentCell.row.grid.style.allowHorizontalOverflow == false) {
          var padding = 0;
          var columnWidth = 0;
          var columnCount = this.columns.count;
          var childGridColumnWidth = 0;
          if (this.ParentCell.style.cellPadding != null || typeof this.ParentCell.style.cellPadding !== "undefined") {
            if (typeof this.ParentCell.style.cellPadding.left != "undefined" && this.ParentCell.style.cellPadding.hasLeftPad) {
              padding += this.ParentCell.style.cellPadding.left;
            }
            if (typeof this.ParentCell.style.cellPadding.right != "undefined" && this.ParentCell.style.cellPadding.hasRightPad) {
              padding += this.ParentCell.style.cellPadding.right;
            }
          }
          for (var i = 0; i < this.ParentCell.columnSpan; i++) {
            columnWidth += this.ParentCell.row.grid.columns.getColumn(this.parentCellIndex + i).width;
          }
          for (var j = 0; j < this.columns.count; j++) {
            if (this.gridColumns.getColumn(j).width > 0 && this.gridColumns.getColumn(j).isCustomWidth) {
              columnWidth -= this.gridColumns.getColumn(j).width;
              columnCount--;
            }
          }
          if (this.ParentCell.row.grid.style.cellPadding != null || typeof this.ParentCell.row.grid.style.cellPadding != "undefined") {
            if (typeof this.ParentCell.row.grid.style.cellPadding.top != "undefined" && this.ParentCell.row.grid.style.cellPadding.hasTopPad) {
              padding += this.ParentCell.row.grid.style.cellPadding.top;
            }
            if (typeof this.ParentCell.row.grid.style.cellPadding.bottom != "undefined" && this.ParentCell.row.grid.style.cellPadding.hasBottomPad) {
              padding += this.ParentCell.row.grid.style.cellPadding.bottom;
            }
          }
          if (this.ParentCell.row.grid.style.cellSpacing != 0) {
            columnWidth -= this.ParentCell.row.grid.style.cellSpacing * 2;
          }
          if (columnWidth > padding) {
            childGridColumnWidth = (columnWidth - padding) / columnCount;
            this.tempWidth = childGridColumnWidth;
            if (this.ParentCell != null) {
              for (var j = 0; j < this.columns.count; j++) {
                if (!this.columns.getColumn(j).isCustomWidth) this.columns.getColumn(j).columnWidth = childGridColumnWidth;
              }
            }
          }
        }
      } else {
        var widths = [this.columns.count];
        for (var n = 0; n < this.columns.count; n++) {
          widths[n] = 0;
        }
        var cellWidth = 0;
        var cellWidths = 0;
        if (typeof this.isChildGrid === "undefined" && typeof this._gridLocation !== "undefined" || this.isChildGrid === null && typeof this._gridLocation !== "undefined") {
          this.initialWidth = this._gridLocation.width;
        }
        if (this.headers.count > 0) {
          var colCount_1 = this.headers.getHeader(0).cells.count;
          var rowCount = this.headers.count;
          for (var i = 0; i < colCount_1; i++) {
            cellWidth = 0;
            for (var j = 0; j < rowCount; j++) {
              var rowWidth = Math.min(this.initialWidth, this.headers.getHeader(j).cells.getCell(i).width);
              cellWidth = Math.max(cellWidth, rowWidth);
            }
            widths[i] = cellWidth;
          }
        }
        cellWidth = 0;
        for (var i = 0, colCount_2 = this.columns.count; i < colCount_2; i++) {
          for (var j = 0, rowCount = this.rows.count; j < rowCount; j++) {
            if (this.rows.getRow(j).cells.getCell(i).columnSpan == 1 && !this.rows.getRow(j).cells.getCell(i).isCellMergeContinue || this.rows.getRow(j).cells.getCell(i).value != null) {
              if (this.rows.getRow(j).cells.getCell(i).value != null && !this.rows.getRow(j).grid.style.allowHorizontalOverflow) {
                var value = this.rows.getRow(j).grid.style.cellPadding.right + this.rows.getRow(j).grid.style.cellPadding.left + this.rows.getRow(j).cells.getCell(i).style.borders.left.width / 2;
              }
              var rowWidth = 0;
              rowWidth = this.initialWidth > 0 ? Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width) : this.rows.getRow(j).cells.getCell(i).width;
              cellWidth = Math.max(widths[i], Math.max(cellWidth, rowWidth));
              cellWidth = Math.max(this.columns.getColumn(i).width, cellWidth);
            }
          }
          if (this.rows.count != 0) widths[i] = cellWidth;
          cellWidth = 0;
        }
        for (var i = 0, RowCount = this.rows.count; i < RowCount; i++) {
          for (var j = 0, ColCount = this.columns.count; j < ColCount; j++) {
            if (this.rows.getRow(i).cells.getCell(j).columnSpan > 1) {
              var total = widths[j];
              for (var k = 1; k < this.rows.getRow(i).cells.getCell(j).columnSpan; k++) {
                total += widths[j + k];
              }
            }
          }
        }
        for (var i = 0, count = this.columns.count; i < count; i++) {
          if (this.columns.getColumn(i).width <= 0) this.columns.getColumn(i).columnWidth = widths[i];
          else if (this.columns.getColumn(i).width > 0 && !this.columns.getColumn(i).isCustomWidth) this.columns.getColumn(i).columnWidth = widths[i];
        }
        var padding = 0;
        var colWidth = 0;
        var colCount = this.columns.count;
        var childGridColWidth = 0;
        colWidth = this.tempWidth;
        for (var j = 0; j < this.columns.count; j++) {
          if (this.gridColumns.getColumn(j).width > 0 && this.gridColumns.getColumn(j).isCustomWidth) {
            colWidth -= this.gridColumns.getColumn(j).width;
            colCount--;
          }
        }
        if (colWidth > 0) {
          if (this.ParentCell.row.grid.style.cellSpacing != 0) {
            colWidth -= this.ParentCell.row.grid.style.cellSpacing * 2;
          }
        }
        if (colWidth > padding) {
          childGridColWidth = colWidth / colCount;
          if (this.ParentCell != null) {
            for (var j = 0; j < this.columns.count; j++) {
              if (!this.columns.getColumn(j).isCustomWidth) this.columns.getColumn(j).columnWidth = childGridColWidth;
            }
          }
        }
      }
    };
    return PdfGrid2;
  }(PdfLayoutElement)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-true-type-font.js
var __extends86 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfTrueTypeFont = (
  /** @class */
  function(_super) {
    __extends86(PdfTrueTypeFont2, _super);
    function PdfTrueTypeFont2(base64String, size, style) {
      var _this = _super.call(this, size) || this;
      _this.isEmbedFont = false;
      _this.isUnicode = true;
      if (style !== void 0) {
        _this.createFontInternal(base64String, style);
      } else {
        _this.createFontInternal(base64String, PdfFontStyle.Regular);
      }
      return _this;
    }
    PdfTrueTypeFont2.prototype.equalsToFont = function(font) {
      var result = false;
      return result;
    };
    PdfTrueTypeFont2.prototype.getLineWidth = function(line, format) {
      var width = 0;
      if (format !== null && typeof format !== "undefined" && format.textDirection !== PdfTextDirection.None) {
        var returnValue = this.getUnicodeLineWidth(
          line,
          /*out*/
          width,
          format
        );
        width = returnValue.width;
      } else {
        width = this.fontInternal.getLineWidth(line);
      }
      var size = this.metrics.getSize(format);
      width *= PdfFont.charSizeMultiplier * size;
      width = this.applyFormatSettings(line, format, width);
      return width;
    };
    PdfTrueTypeFont2.prototype.getCharWidth = function(charCode, format) {
      var codeWidth = this.fontInternal.getCharWidth(charCode);
      var size = this.metrics.getSize(format);
      codeWidth *= 1e-3 * size;
      return codeWidth;
    };
    PdfTrueTypeFont2.prototype.createFontInternal = function(base64String, style) {
      this.fontInternal = new UnicodeTrueTypeFont(base64String, this.size);
      this.calculateStyle(style);
      this.initializeInternals();
    };
    PdfTrueTypeFont2.prototype.calculateStyle = function(style) {
      var iStyle = this.fontInternal.ttfMetrics.macStyle;
      if ((style & PdfFontStyle.Underline) !== 0) {
        iStyle |= PdfFontStyle.Underline;
      }
      if ((style & PdfFontStyle.Strikeout) !== 0) {
        iStyle |= PdfFontStyle.Strikeout;
      }
      this.setStyle(iStyle);
    };
    PdfTrueTypeFont2.prototype.initializeInternals = function() {
      var equalFont = null;
      if (PdfDocument.enableCache) {
        equalFont = PdfDocument.cache.search(this);
      }
      var internals = null;
      if (equalFont !== null && equalFont !== void 0) {
        internals = equalFont.getInternals();
        var metrics = equalFont.metrics;
        metrics = metrics.clone();
        metrics.size = this.size;
        this.metrics = metrics;
        this.fontInternal = equalFont.fontInternal;
      } else {
        if (equalFont == null) {
          if (this.fontInternal instanceof UnicodeTrueTypeFont) {
            this.fontInternal.isEmbed = this.isEmbedFont;
          }
          this.fontInternal.createInternals();
          internals = this.fontInternal.getInternals();
          this.metrics = this.fontInternal.metrics;
        }
      }
      this.metrics.isUnicodeFont = true;
      this.setInternals(internals);
    };
    PdfTrueTypeFont2.prototype.setSymbols = function(text) {
      var internalFont = this.fontInternal;
      if (internalFont != null) {
        internalFont.setSymbols(text);
      }
    };
    Object.defineProperty(PdfTrueTypeFont2.prototype, "Unicode", {
      /**
       * Property
       *
       */
      get: function() {
        return this.isUnicode;
      },
      enumerable: true,
      configurable: true
    });
    PdfTrueTypeFont2.prototype.getUnicodeLineWidth = function(line, width, format) {
      width = 0;
      var glyphIndices = null;
      var rtlRender = new RtlRenderer();
      var result = rtlRender.getGlyphIndex(
        line,
        this,
        format.textDirection === PdfTextDirection.RightToLeft ? true : false,
        /*out*/
        glyphIndices,
        true
      );
      var resultGlyph = result.success;
      glyphIndices = result.glyphs;
      if (resultGlyph && glyphIndices !== null) {
        var ttfReader = this.fontInternal.ttfReader;
        for (var i = 0, len = glyphIndices.length; i < len; i++) {
          var glyphIndex = glyphIndices[i];
          var glyph = ttfReader.getGlyph(glyphIndex);
          if (glyph !== null && typeof glyph !== "undefined") {
            width += glyph.width;
          }
        }
      }
      return {
        success: resultGlyph,
        width
      };
    };
    return PdfTrueTypeFont2;
  }(PdfFont)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-page-template-element.js
var PdfPageTemplateElement = (
  /** @class */
  function() {
    function PdfPageTemplateElement2(arg1, arg2, arg3, arg4, arg5) {
      if (arg1 instanceof RectangleF && typeof arg2 === "undefined") {
        this.InitiateBounds(arg1.x, arg1.y, arg1.width, arg1.height, null);
      } else if (arg1 instanceof RectangleF && arg2 instanceof PdfPage && typeof arg3 === "undefined") {
        this.InitiateBounds(arg1.x, arg1.y, arg1.width, arg1.height, arg2);
      } else if (arg1 instanceof PointF && arg2 instanceof SizeF && typeof arg3 === "undefined") {
        this.InitiateBounds(arg1.x, arg1.y, arg2.width, arg2.height, null);
      } else if (arg1 instanceof PointF && arg2 instanceof SizeF && arg3 instanceof PdfPage && typeof arg4 === "undefined") {
        this.InitiateBounds(arg1.x, arg1.y, arg2.width, arg2.height, arg3);
      } else if (arg1 instanceof SizeF && typeof arg2 === "undefined") {
        this.InitiateBounds(0, 0, arg1.width, arg1.height, null);
      } else if (typeof arg1 === "number" && typeof arg2 === "number" && typeof arg3 === "undefined") {
        this.InitiateBounds(0, 0, arg1, arg2, null);
      } else if (typeof arg1 === "number" && typeof arg2 === "number" && arg3 instanceof PdfPage && typeof arg4 === "undefined") {
        this.InitiateBounds(0, 0, arg1, arg2, arg3);
      } else if (typeof arg1 === "number" && typeof arg2 === "number" && typeof arg3 === "number" && typeof arg4 === "number" && typeof arg5 === "undefined") {
        this.InitiateBounds(arg1, arg2, arg3, arg4, null);
      } else {
        this.InitiateBounds(arg1, arg2, arg3, arg4, null);
      }
    }
    Object.defineProperty(PdfPageTemplateElement2.prototype, "dock", {
      // Properties
      /**
       * Gets or sets the `dock style` of the page template element.
       * @private
       */
      get: function() {
        return this.dockStyle;
      },
      set: function(value) {
        this.dockStyle = value;
        this.resetAlignment();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageTemplateElement2.prototype, "alignment", {
      /**
       * Gets or sets `alignment` of the page template element.
       * @private
       */
      get: function() {
        return this.alignmentStyle;
      },
      set: function(value) {
        this.setAlignment(value);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageTemplateElement2.prototype, "foreground", {
      /**
       * Indicates whether the page template is located `in front of the page layers or behind of it`.
       * @private
       */
      get: function() {
        return this.isForeground;
      },
      set: function(value) {
        this.isForeground = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageTemplateElement2.prototype, "background", {
      /**
       * Indicates whether the page template is located `behind of the page layers or in front of it`.
       * @private
       */
      get: function() {
        return !this.isForeground;
      },
      set: function(value) {
        this.isForeground = !value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageTemplateElement2.prototype, "location", {
      /**
       * Gets or sets `location` of the page template element.
       * @private
       */
      get: function() {
        return this.currentLocation;
      },
      set: function(value) {
        if (this.type === TemplateType.None) {
          this.currentLocation = value;
        } else {
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageTemplateElement2.prototype, "x", {
      /**
       * Gets or sets `X` co-ordinate of the template element on the page.
       * @private
       */
      get: function() {
        var value = typeof this.currentLocation !== "undefined" ? this.currentLocation.x : 0;
        return value;
      },
      set: function(value) {
        if (this.type === TemplateType.None) {
          this.currentLocation.x = value;
        } else {
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageTemplateElement2.prototype, "y", {
      /**
       * Gets or sets `Y` co-ordinate of the template element on the page.
       * @private
       */
      get: function() {
        var value = typeof this.currentLocation !== "undefined" ? this.currentLocation.y : 0;
        return value;
      },
      set: function(value) {
        if (this.type === TemplateType.None) {
          this.currentLocation.y = value;
        } else {
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageTemplateElement2.prototype, "size", {
      /**
       * Gets or sets `size` of the page template element.
       * @private
       */
      get: function() {
        return this.template.size;
      },
      set: function(value) {
        if (this.type === TemplateType.None) {
          this.template.reset(value);
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageTemplateElement2.prototype, "width", {
      /**
       * Gets or sets `width` of the page template element.
       * @private
       */
      get: function() {
        return this.template.width;
      },
      set: function(value) {
        if (this.template.width !== value && this.type === TemplateType.None) {
          var size = this.template.size;
          size.width = value;
          this.template.reset(size);
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageTemplateElement2.prototype, "height", {
      /**
       * Gets or sets `height` of the page template element.
       * @private
       */
      get: function() {
        return this.template.height;
      },
      set: function(value) {
        if (this.template.height !== value && this.type === TemplateType.None) {
          var size = this.template.size;
          size.height = value;
          this.template.reset(size);
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageTemplateElement2.prototype, "graphics", {
      /**
       * Gets `graphics` context of the page template element.
       * @private
       */
      get: function() {
        return this.template.graphics;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageTemplateElement2.prototype, "template", {
      /**
       * Gets Pdf `template` object.
       * @private
       */
      get: function() {
        return this.pdfTemplate;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageTemplateElement2.prototype, "type", {
      /**
       * Gets or sets `type` of the usage of this page template.
       * @private
       */
      get: function() {
        return this.templateType;
      },
      set: function(value) {
        this.updateDocking(value);
        this.templateType = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageTemplateElement2.prototype, "bounds", {
      /**
       * Gets or sets `bounds` of the page template.
       * @public
       */
      get: function() {
        return new RectangleF(new PointF(this.x, this.y), this.size);
      },
      set: function(value) {
        if (this.type === TemplateType.None) {
          this.location = new PointF(value.x, value.y);
          this.size = new SizeF(value.width, value.height);
        }
      },
      enumerable: true,
      configurable: true
    });
    PdfPageTemplateElement2.prototype.InitiateBounds = function(arg1, arg2, arg3, arg4, arg5) {
      this.x = arg1;
      this.y = arg2;
      this.pdfTemplate = new PdfTemplate(arg3, arg4);
    };
    PdfPageTemplateElement2.prototype.updateDocking = function(type) {
      if (type !== TemplateType.None) {
        switch (type) {
          case TemplateType.Top:
            this.dock = PdfDockStyle.Top;
            break;
          case TemplateType.Bottom:
            this.dock = PdfDockStyle.Bottom;
            break;
          case TemplateType.Left:
            this.dock = PdfDockStyle.Left;
            break;
          case TemplateType.Right:
            this.dock = PdfDockStyle.Right;
            break;
        }
        this.resetAlignment();
      }
    };
    PdfPageTemplateElement2.prototype.resetAlignment = function() {
      this.alignment = PdfAlignmentStyle.None;
    };
    PdfPageTemplateElement2.prototype.setAlignment = function(alignment) {
      if (this.dock === PdfDockStyle.None) {
        this.alignmentStyle = alignment;
      } else {
        var canBeSet = false;
        switch (this.dock) {
          case PdfDockStyle.Left:
            canBeSet = alignment === PdfAlignmentStyle.TopLeft || alignment === PdfAlignmentStyle.MiddleLeft || alignment === PdfAlignmentStyle.BottomLeft || alignment === PdfAlignmentStyle.None;
            break;
          case PdfDockStyle.Top:
            canBeSet = alignment === PdfAlignmentStyle.TopLeft || alignment === PdfAlignmentStyle.TopCenter || alignment === PdfAlignmentStyle.TopRight || alignment === PdfAlignmentStyle.None;
            break;
          case PdfDockStyle.Right:
            canBeSet = alignment === PdfAlignmentStyle.TopRight || alignment === PdfAlignmentStyle.MiddleRight || alignment === PdfAlignmentStyle.BottomRight || alignment === PdfAlignmentStyle.None;
            break;
          case PdfDockStyle.Bottom:
            canBeSet = alignment === PdfAlignmentStyle.BottomLeft || alignment === PdfAlignmentStyle.BottomCenter || alignment === PdfAlignmentStyle.BottomRight || alignment === PdfAlignmentStyle.None;
            break;
          case PdfDockStyle.Fill:
            canBeSet = alignment === PdfAlignmentStyle.MiddleCenter || alignment === PdfAlignmentStyle.None;
            break;
        }
        if (canBeSet) {
          this.alignmentStyle = alignment;
        }
      }
    };
    PdfPageTemplateElement2.prototype.draw = function(layer, document2) {
      var page = layer.page;
      var bounds = this.calculateBounds(page, document2);
      layer.graphics.drawPdfTemplate(this.template, new PointF(bounds.x, bounds.y), new SizeF(bounds.width, bounds.height));
    };
    PdfPageTemplateElement2.prototype.calculateBounds = function(page, document2) {
      var result = this.bounds;
      if (this.alignmentStyle !== PdfAlignmentStyle.None) {
        result = this.getAlignmentBounds(page, document2);
      } else if (this.dockStyle !== PdfDockStyle.None) {
        result = this.getDockBounds(page, document2);
      }
      return result;
    };
    PdfPageTemplateElement2.prototype.getAlignmentBounds = function(page, document2) {
      var result = this.bounds;
      if (this.type === TemplateType.None) {
        result = this.getSimpleAlignmentBounds(page, document2);
      } else {
        result = this.getTemplateAlignmentBounds(page, document2);
      }
      return result;
    };
    PdfPageTemplateElement2.prototype.getSimpleAlignmentBounds = function(page, document2) {
      var bounds = this.bounds;
      var pdfSection = page.section;
      var actualBounds = pdfSection.getActualBounds(document2, page, false);
      var x = this.x;
      var y = this.y;
      switch (this.alignmentStyle) {
        case PdfAlignmentStyle.TopLeft:
          x = 0;
          y = 0;
          break;
        case PdfAlignmentStyle.TopCenter:
          x = (actualBounds.width - this.width) / 2;
          y = 0;
          break;
        case PdfAlignmentStyle.TopRight:
          x = actualBounds.width - this.width;
          y = 0;
          break;
        case PdfAlignmentStyle.MiddleLeft:
          x = 0;
          y = (actualBounds.height - this.height) / 2;
          break;
        case PdfAlignmentStyle.MiddleCenter:
          x = (actualBounds.width - this.width) / 2;
          y = (actualBounds.height - this.height) / 2;
          break;
        case PdfAlignmentStyle.MiddleRight:
          x = actualBounds.width - this.width;
          y = (actualBounds.height - this.height) / 2;
          break;
        case PdfAlignmentStyle.BottomLeft:
          x = 0;
          y = actualBounds.height - this.height;
          break;
        case PdfAlignmentStyle.BottomCenter:
          x = (actualBounds.width - this.width) / 2;
          y = actualBounds.height - this.height;
          break;
        case PdfAlignmentStyle.BottomRight:
          x = actualBounds.width - this.width;
          y = actualBounds.height - this.height;
          break;
      }
      bounds.x = x;
      bounds.y = y;
      return bounds;
    };
    PdfPageTemplateElement2.prototype.getTemplateAlignmentBounds = function(page, document2) {
      var result = this.bounds;
      var section = page.section;
      var actualBounds = section.getActualBounds(document2, page, false);
      var x = this.x;
      var y = this.y;
      switch (this.alignmentStyle) {
        case PdfAlignmentStyle.TopLeft:
          if (this.type === TemplateType.Left) {
            x = this.convertSign(actualBounds.x);
            y = 0;
          } else if (this.type === TemplateType.Top) {
            x = this.convertSign(actualBounds.x);
            y = this.convertSign(actualBounds.y);
          }
          break;
        case PdfAlignmentStyle.TopCenter:
          x = (actualBounds.width - this.width) / 2;
          y = this.convertSign(actualBounds.y);
          break;
        case PdfAlignmentStyle.TopRight:
          if (this.type === TemplateType.Right) {
            x = actualBounds.width + section.getRightIndentWidth(document2, page, false) - this.width;
            y = 0;
          } else if (this.type === TemplateType.Top) {
            x = actualBounds.width + section.getRightIndentWidth(document2, page, false) - this.width;
            y = this.convertSign(actualBounds.y);
          }
          break;
        case PdfAlignmentStyle.MiddleLeft:
          x = this.convertSign(actualBounds.x);
          y = (actualBounds.height - this.height) / 2;
          break;
        case PdfAlignmentStyle.MiddleCenter:
          x = (actualBounds.width - this.width) / 2;
          y = (actualBounds.height - this.height) / 2;
          break;
        case PdfAlignmentStyle.MiddleRight:
          x = actualBounds.width + section.getRightIndentWidth(document2, page, false) - this.width;
          y = (actualBounds.height - this.height) / 2;
          break;
        case PdfAlignmentStyle.BottomLeft:
          if (this.type === TemplateType.Left) {
            x = this.convertSign(actualBounds.x);
            y = actualBounds.height - this.height;
          } else if (this.type === TemplateType.Bottom) {
            x = this.convertSign(actualBounds.x);
            y = actualBounds.height + section.getBottomIndentHeight(document2, page, false) - this.height;
          }
          break;
        case PdfAlignmentStyle.BottomCenter:
          x = (actualBounds.width - this.width) / 2;
          y = actualBounds.height + section.getBottomIndentHeight(document2, page, false) - this.height;
          break;
        case PdfAlignmentStyle.BottomRight:
          if (this.type === TemplateType.Right) {
            x = actualBounds.width + section.getRightIndentWidth(document2, page, false) - this.width;
            y = actualBounds.height - this.height;
          } else if (this.type === TemplateType.Bottom) {
            x = actualBounds.width + section.getRightIndentWidth(document2, page, false) - this.width;
            y = actualBounds.height + section.getBottomIndentHeight(document2, page, false) - this.height;
          }
          break;
      }
      result.x = x;
      result.y = y;
      return result;
    };
    PdfPageTemplateElement2.prototype.getDockBounds = function(page, document2) {
      var result = this.bounds;
      if (this.type === TemplateType.None) {
        result = this.getSimpleDockBounds(page, document2);
      } else {
        result = this.getTemplateDockBounds(page, document2);
      }
      return result;
    };
    PdfPageTemplateElement2.prototype.getSimpleDockBounds = function(page, document2) {
      var result = this.bounds;
      var section = page.section;
      var actualBounds = section.getActualBounds(document2, page, false);
      var x = this.x;
      var y = this.y;
      var width = this.width;
      var height = this.height;
      switch (this.dockStyle) {
        case PdfDockStyle.Left:
          x = 0;
          y = 0;
          width = this.width;
          height = actualBounds.height;
          break;
        case PdfDockStyle.Top:
          x = 0;
          y = 0;
          width = actualBounds.width;
          height = this.height;
          break;
        case PdfDockStyle.Right:
          x = actualBounds.width - this.width;
          y = 0;
          width = this.width;
          height = actualBounds.height;
          break;
        case PdfDockStyle.Bottom:
          x = 0;
          y = actualBounds.height - this.height;
          width = actualBounds.width;
          height = this.height;
          break;
        case PdfDockStyle.Fill:
          x = 0;
          x = 0;
          width = actualBounds.width;
          height = actualBounds.height;
          break;
      }
      result = new RectangleF(x, y, width, height);
      return result;
    };
    PdfPageTemplateElement2.prototype.getTemplateDockBounds = function(page, document2) {
      var result = this.bounds;
      var section = page.section;
      var actualBounds = section.getActualBounds(document2, page, false);
      var actualSize = section.pageSettings.getActualSize();
      var x = this.x;
      var y = this.y;
      var width = this.width;
      var height = this.height;
      switch (this.dockStyle) {
        case PdfDockStyle.Left:
          x = this.convertSign(actualBounds.x);
          y = 0;
          width = this.width;
          height = actualBounds.height;
          break;
        case PdfDockStyle.Top:
          x = this.convertSign(actualBounds.x);
          y = this.convertSign(actualBounds.y);
          width = actualSize.width;
          height = this.height;
          if (actualBounds.height < 0) {
            y = actualSize.height - actualBounds.y;
          }
          break;
        case PdfDockStyle.Right:
          x = actualBounds.width + section.getRightIndentWidth(document2, page, false) - this.width;
          y = 0;
          width = this.width;
          height = actualBounds.height;
          break;
        case PdfDockStyle.Bottom:
          x = this.convertSign(actualBounds.x);
          y = actualBounds.height + section.getBottomIndentHeight(document2, page, false) - this.height;
          width = actualSize.width;
          height = this.height;
          if (actualBounds.height < 0) {
            y -= actualSize.height;
          }
          break;
        case PdfDockStyle.Fill:
          x = 0;
          x = 0;
          width = actualBounds.width;
          height = actualBounds.height;
          break;
      }
      result = new RectangleF(x, y, width, height);
      return result;
    };
    PdfPageTemplateElement2.prototype.convertSign = function(value) {
      return value !== 0 || value === 0 && 1 / value === -Infinity ? -value : value;
    };
    return PdfPageTemplateElement2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/annotations/document-link-annotation.js
var __extends87 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfDocumentLinkAnnotation = (
  /** @class */
  function(_super) {
    __extends87(PdfDocumentLinkAnnotation2, _super);
    function PdfDocumentLinkAnnotation2(rectangle, destination) {
      var _this = _super.call(this, rectangle) || this;
      _this.pdfDestination = null;
      if (typeof destination !== "undefined") {
        _this.destination = destination;
      }
      return _this;
    }
    Object.defineProperty(PdfDocumentLinkAnnotation2.prototype, "destination", {
      // Properties
      /**
       * Gets or sets the `destination` of the annotation.
       * ```typescript
       * // create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // create new pages
       * let page1 : PdfPage = document.pages.add();
       * let page2 : PdfPage = document.pages.add();
       * // create a new rectangle
       * let bounds : RectangleF = new RectangleF({x : 10, y : 200}, {width : 300, height : 25});
       * //
       * // create a new document link annotation
       * let documentLinkAnnotation : PdfDocumentLinkAnnotation = new PdfDocumentLinkAnnotation(bounds);
       * // set the annotation text
       * documentLinkAnnotation.text = 'Document link annotation';
       * // set the destination
       * documentLinkAnnotation.destination = new PdfDestination(page2);
       * // set the documentlink annotation location
       * documentLinkAnnotation.destination.location = new PointF(10, 0);
       * // add this annotation to a new page
       * page1.annotations.add(documentLinkAnnotation);
       * //
       * // save the document to disk
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       * @default null
       */
      get: function() {
        return this.pdfDestination;
      },
      set: function(value) {
        this.pdfDestination = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfDocumentLinkAnnotation2.prototype.save = function() {
      _super.prototype.save.call(this);
      if (this.pdfDestination != null) {
        this.dictionary.items.setValue(this.dictionaryProperties.dest, this.pdfDestination.element);
      }
    };
    PdfDocumentLinkAnnotation2.prototype.clone = function() {
      var annot = new PdfDocumentLinkAnnotation2(this.bounds, this.destination);
      annot.color = this.color;
      annot.brush = this.brush;
      annot.destination = this.destination;
      annot.font = this.font;
      return annot;
    };
    return PdfDocumentLinkAnnotation2;
  }(PdfLinkAnnotation)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/general/enum.js
var PdfDestinationMode;
(function(PdfDestinationMode2) {
  PdfDestinationMode2[PdfDestinationMode2["Location"] = 0] = "Location";
  PdfDestinationMode2[PdfDestinationMode2["FitToPage"] = 1] = "FitToPage";
  PdfDestinationMode2[PdfDestinationMode2["FitR"] = 2] = "FitR";
})(PdfDestinationMode || (PdfDestinationMode = {}));

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/general/pdf-destination.js
var PdfDestination = (
  /** @class */
  function() {
    function PdfDestination2(arg1, arg2) {
      this.dictionaryProperties = new DictionaryProperties();
      this.destinationMode = PdfDestinationMode.Location;
      this.zoomFactor = 0;
      this.destinationLocation = new PointF(0, 0);
      this.bounds = new RectangleF();
      this.array = new PdfArray();
      var angle = PdfPageRotateAngle.RotateAngle0;
      this.destinationLocation = new PointF(0, this.destinationLocation.y);
      this.pdfPage = arg1;
      if (arg2 instanceof PointF) {
        this.destinationLocation = arg2;
      } else {
        this.bounds = arg2;
      }
    }
    Object.defineProperty(PdfDestination2.prototype, "zoom", {
      // Properties
      /**
       * Gets and Sets the `zoom` factor.
       * @private
       */
      get: function() {
        return this.zoomFactor;
      },
      set: function(value) {
        this.zoomFactor = value;
        this.initializePrimitive();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDestination2.prototype, "page", {
      /**
       * Gets and Sets the `page` object.
       * @private
       */
      get: function() {
        return this.pdfPage;
      },
      set: function(value) {
        this.pdfPage = value;
        this.initializePrimitive();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDestination2.prototype, "mode", {
      /**
       * Gets and Sets the destination `mode`.
       * @private
       */
      get: function() {
        return this.destinationMode;
      },
      set: function(value) {
        this.destinationMode = value;
        this.initializePrimitive();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDestination2.prototype, "location", {
      /**
       * Gets and Sets the `location`.
       * @private
       */
      get: function() {
        return this.destinationLocation;
      },
      set: function(value) {
        this.destinationLocation = value;
        this.initializePrimitive();
      },
      enumerable: true,
      configurable: true
    });
    PdfDestination2.prototype.pointToNativePdf = function(page, point) {
      var section = page.section;
      return section.pointToNativePdf(page, point);
    };
    PdfDestination2.prototype.initializePrimitive = function() {
      this.array.clear();
      this.array.add(new PdfReferenceHolder(this.pdfPage));
      switch (this.destinationMode) {
        case PdfDestinationMode.Location:
          var simplePage = this.pdfPage;
          var point = new PointF();
          point = this.pointToNativePdf(simplePage, this.destinationLocation);
          this.array.add(new PdfName(this.dictionaryProperties.xyz));
          this.array.add(new PdfNumber(point.x));
          this.array.add(new PdfNumber(point.y));
          this.array.add(new PdfNumber(this.zoomFactor));
          break;
        case PdfDestinationMode.FitToPage:
          this.array.add(new PdfName(this.dictionaryProperties.fit));
          break;
      }
    };
    Object.defineProperty(PdfDestination2.prototype, "element", {
      /**
       * Gets the `element` representing this object.
       * @private
       */
      get: function() {
        this.initializePrimitive();
        return this.array;
      },
      enumerable: true,
      configurable: true
    });
    return PdfDestination2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/general/functions/pdf-function.js
var PdfFunction = (
  /** @class */
  function() {
    function PdfFunction2(dictionary) {
      this.mDictionary = null;
      this.mDictionaryProperties = new DictionaryProperties();
      this.mDictionary = dictionary;
    }
    Object.defineProperty(PdfFunction2.prototype, "domain", {
      //Properties
      /**
       * Gets or sets the domain of the function.
       * @public
       */
      get: function() {
        var domain = this.mDictionary.items.getValue(this.mDictionaryProperties.domain);
        return domain;
      },
      set: function(value) {
        this.mDictionary.items.setValue(this.mDictionaryProperties.domain, value);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfFunction2.prototype, "range", {
      /**
       * Gets or sets the range.
       * @public
       */
      get: function() {
        var range = this.mDictionary.items.getValue(this.mDictionaryProperties.range);
        return range;
      },
      set: function(value) {
        this.mDictionary.items.setValue(this.mDictionaryProperties.range, value);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfFunction2.prototype, "dictionary", {
      /**
       * Gets the dictionary.
       */
      get: function() {
        return this.mDictionary;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfFunction2.prototype, "element", {
      //IPdfWrapper Members
      /**
       * Gets the element.
       */
      get: function() {
        return this.mDictionary;
      },
      enumerable: true,
      configurable: true
    });
    return PdfFunction2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/general/functions/pdf-sampled-function.js
var __extends88 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfSampledFunction = (
  /** @class */
  function(_super) {
    __extends88(PdfSampledFunction2, _super);
    function PdfSampledFunction2(domain, range, sizes, samples) {
      var _this = _super.call(this, new PdfStream()) || this;
      if (typeof domain === "undefined") {
        _this.dictionary.items.setValue(_this.mDictionaryProperties.functionType, new PdfNumber(0));
      } else {
        _this.dictionary.items.setValue(_this.mDictionaryProperties.functionType, new PdfNumber(0));
        _this.checkParams(domain, range, sizes, samples);
        _this.setDomainAndRange(domain, range);
        _this.setSizeAndValues(sizes, samples);
      }
      return _this;
    }
    PdfSampledFunction2.prototype.checkParams = function(domain, range, sizes, samples) {
      var rLength = range.length;
      var dLength = domain.length;
      var sLength = samples.length;
      var frameLength = rLength * (dLength / 4);
    };
    PdfSampledFunction2.prototype.setDomainAndRange = function(domain, range) {
      this.domain = new PdfArray(domain);
      this.range = new PdfArray(range);
    };
    PdfSampledFunction2.prototype.setSizeAndValues = function(sizes, samples) {
      var s = this.dictionary;
      s.isResource = true;
      this.dictionary.items.setValue(this.mDictionaryProperties.size, new PdfArray(sizes));
      this.dictionary.items.setValue(this.mDictionaryProperties.bitsPerSample, new PdfNumber(8));
      s.writeBytes(samples);
    };
    return PdfSampledFunction2;
  }(PdfFunction)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/brushes/enum.js
var PdfExtend;
(function(PdfExtend2) {
  PdfExtend2[PdfExtend2["None"] = 0] = "None";
  PdfExtend2[PdfExtend2["Start"] = 1] = "Start";
  PdfExtend2[PdfExtend2["End"] = 2] = "End";
  PdfExtend2[PdfExtend2["Both"] = 3] = "Both";
})(PdfExtend || (PdfExtend = {}));
var PdfLinearGradientMode;
(function(PdfLinearGradientMode2) {
  PdfLinearGradientMode2[PdfLinearGradientMode2["BackwardDiagonal"] = 0] = "BackwardDiagonal";
  PdfLinearGradientMode2[PdfLinearGradientMode2["ForwardDiagonal"] = 1] = "ForwardDiagonal";
  PdfLinearGradientMode2[PdfLinearGradientMode2["Horizontal"] = 2] = "Horizontal";
  PdfLinearGradientMode2[PdfLinearGradientMode2["Vertical"] = 3] = "Vertical";
})(PdfLinearGradientMode || (PdfLinearGradientMode = {}));
var ShadingType;
(function(ShadingType2) {
  ShadingType2[ShadingType2["Function"] = 1] = "Function";
  ShadingType2[ShadingType2["Axial"] = 2] = "Axial";
  ShadingType2[ShadingType2["Radial"] = 3] = "Radial";
})(ShadingType || (ShadingType = {}));
var KnownColor;
(function(KnownColor2) {
  KnownColor2[KnownColor2["ActiveBorder"] = 1] = "ActiveBorder";
  KnownColor2[KnownColor2["ActiveCaption"] = 2] = "ActiveCaption";
  KnownColor2[KnownColor2["ActiveCaptionText"] = 3] = "ActiveCaptionText";
  KnownColor2[KnownColor2["AppWorkspace"] = 4] = "AppWorkspace";
  KnownColor2[KnownColor2["Control"] = 5] = "Control";
  KnownColor2[KnownColor2["ControlDark"] = 6] = "ControlDark";
  KnownColor2[KnownColor2["ControlDarkDark"] = 7] = "ControlDarkDark";
  KnownColor2[KnownColor2["ControlLight"] = 8] = "ControlLight";
  KnownColor2[KnownColor2["ControlLightLight"] = 9] = "ControlLightLight";
  KnownColor2[KnownColor2["ControlText"] = 10] = "ControlText";
  KnownColor2[KnownColor2["Desktop"] = 11] = "Desktop";
  KnownColor2[KnownColor2["GrayText"] = 12] = "GrayText";
  KnownColor2[KnownColor2["Highlight"] = 13] = "Highlight";
  KnownColor2[KnownColor2["HighlightText"] = 14] = "HighlightText";
  KnownColor2[KnownColor2["HotTrack"] = 15] = "HotTrack";
  KnownColor2[KnownColor2["InactiveBorder"] = 16] = "InactiveBorder";
  KnownColor2[KnownColor2["InactiveCaption"] = 17] = "InactiveCaption";
  KnownColor2[KnownColor2["InactiveCaptionText"] = 18] = "InactiveCaptionText";
  KnownColor2[KnownColor2["Info"] = 19] = "Info";
  KnownColor2[KnownColor2["InfoText"] = 20] = "InfoText";
  KnownColor2[KnownColor2["Menu"] = 21] = "Menu";
  KnownColor2[KnownColor2["MenuText"] = 22] = "MenuText";
  KnownColor2[KnownColor2["ScrollBar"] = 23] = "ScrollBar";
  KnownColor2[KnownColor2["Window"] = 24] = "Window";
  KnownColor2[KnownColor2["WindowFrame"] = 25] = "WindowFrame";
  KnownColor2[KnownColor2["WindowText"] = 26] = "WindowText";
  KnownColor2[KnownColor2["Transparent"] = 27] = "Transparent";
  KnownColor2[KnownColor2["AliceBlue"] = 28] = "AliceBlue";
  KnownColor2[KnownColor2["AntiqueWhite"] = 29] = "AntiqueWhite";
  KnownColor2[KnownColor2["Aqua"] = 30] = "Aqua";
  KnownColor2[KnownColor2["Aquamarine"] = 31] = "Aquamarine";
  KnownColor2[KnownColor2["Azure"] = 32] = "Azure";
  KnownColor2[KnownColor2["Beige"] = 33] = "Beige";
  KnownColor2[KnownColor2["Bisque"] = 34] = "Bisque";
  KnownColor2[KnownColor2["Black"] = 35] = "Black";
  KnownColor2[KnownColor2["BlanchedAlmond"] = 36] = "BlanchedAlmond";
  KnownColor2[KnownColor2["Blue"] = 37] = "Blue";
  KnownColor2[KnownColor2["BlueViolet"] = 38] = "BlueViolet";
  KnownColor2[KnownColor2["Brown"] = 39] = "Brown";
  KnownColor2[KnownColor2["BurlyWood"] = 40] = "BurlyWood";
  KnownColor2[KnownColor2["CadetBlue"] = 41] = "CadetBlue";
  KnownColor2[KnownColor2["Chartreuse"] = 42] = "Chartreuse";
  KnownColor2[KnownColor2["Chocolate"] = 43] = "Chocolate";
  KnownColor2[KnownColor2["Coral"] = 44] = "Coral";
  KnownColor2[KnownColor2["CornflowerBlue"] = 45] = "CornflowerBlue";
  KnownColor2[KnownColor2["Cornsilk"] = 46] = "Cornsilk";
  KnownColor2[KnownColor2["Crimson"] = 47] = "Crimson";
  KnownColor2[KnownColor2["Cyan"] = 48] = "Cyan";
  KnownColor2[KnownColor2["DarkBlue"] = 49] = "DarkBlue";
  KnownColor2[KnownColor2["DarkCyan"] = 50] = "DarkCyan";
  KnownColor2[KnownColor2["DarkGoldenrod"] = 51] = "DarkGoldenrod";
  KnownColor2[KnownColor2["DarkGray"] = 52] = "DarkGray";
  KnownColor2[KnownColor2["DarkGreen"] = 53] = "DarkGreen";
  KnownColor2[KnownColor2["DarkKhaki"] = 54] = "DarkKhaki";
  KnownColor2[KnownColor2["DarkMagenta"] = 55] = "DarkMagenta";
  KnownColor2[KnownColor2["DarkOliveGreen"] = 56] = "DarkOliveGreen";
  KnownColor2[KnownColor2["DarkOrange"] = 57] = "DarkOrange";
  KnownColor2[KnownColor2["DarkOrchid"] = 58] = "DarkOrchid";
  KnownColor2[KnownColor2["DarkRed"] = 59] = "DarkRed";
  KnownColor2[KnownColor2["DarkSalmon"] = 60] = "DarkSalmon";
  KnownColor2[KnownColor2["DarkSeaGreen"] = 61] = "DarkSeaGreen";
  KnownColor2[KnownColor2["DarkSlateBlue"] = 62] = "DarkSlateBlue";
  KnownColor2[KnownColor2["DarkSlateGray"] = 63] = "DarkSlateGray";
  KnownColor2[KnownColor2["DarkTurquoise"] = 64] = "DarkTurquoise";
  KnownColor2[KnownColor2["DarkViolet"] = 65] = "DarkViolet";
  KnownColor2[KnownColor2["DeepPink"] = 66] = "DeepPink";
  KnownColor2[KnownColor2["DeepSkyBlue"] = 67] = "DeepSkyBlue";
  KnownColor2[KnownColor2["DimGray"] = 68] = "DimGray";
  KnownColor2[KnownColor2["DodgerBlue"] = 69] = "DodgerBlue";
  KnownColor2[KnownColor2["Firebrick"] = 70] = "Firebrick";
  KnownColor2[KnownColor2["FloralWhite"] = 71] = "FloralWhite";
  KnownColor2[KnownColor2["ForestGreen"] = 72] = "ForestGreen";
  KnownColor2[KnownColor2["Fuchsia"] = 73] = "Fuchsia";
  KnownColor2[KnownColor2["Gainsboro"] = 74] = "Gainsboro";
  KnownColor2[KnownColor2["GhostWhite"] = 75] = "GhostWhite";
  KnownColor2[KnownColor2["Gold"] = 76] = "Gold";
  KnownColor2[KnownColor2["Goldenrod"] = 77] = "Goldenrod";
  KnownColor2[KnownColor2["Gray"] = 78] = "Gray";
  KnownColor2[KnownColor2["Green"] = 79] = "Green";
  KnownColor2[KnownColor2["GreenYellow"] = 80] = "GreenYellow";
  KnownColor2[KnownColor2["Honeydew"] = 81] = "Honeydew";
  KnownColor2[KnownColor2["HotPink"] = 82] = "HotPink";
  KnownColor2[KnownColor2["IndianRed"] = 83] = "IndianRed";
  KnownColor2[KnownColor2["Indigo"] = 84] = "Indigo";
  KnownColor2[KnownColor2["Ivory"] = 85] = "Ivory";
  KnownColor2[KnownColor2["Khaki"] = 86] = "Khaki";
  KnownColor2[KnownColor2["Lavender"] = 87] = "Lavender";
  KnownColor2[KnownColor2["LavenderBlush"] = 88] = "LavenderBlush";
  KnownColor2[KnownColor2["LawnGreen"] = 89] = "LawnGreen";
  KnownColor2[KnownColor2["LemonChiffon"] = 90] = "LemonChiffon";
  KnownColor2[KnownColor2["LightBlue"] = 91] = "LightBlue";
  KnownColor2[KnownColor2["LightCoral"] = 92] = "LightCoral";
  KnownColor2[KnownColor2["LightCyan"] = 93] = "LightCyan";
  KnownColor2[KnownColor2["LightGoldenrodYellow"] = 94] = "LightGoldenrodYellow";
  KnownColor2[KnownColor2["LightGray"] = 95] = "LightGray";
  KnownColor2[KnownColor2["LightGreen"] = 96] = "LightGreen";
  KnownColor2[KnownColor2["LightPink"] = 97] = "LightPink";
  KnownColor2[KnownColor2["LightSalmon"] = 98] = "LightSalmon";
  KnownColor2[KnownColor2["LightSeaGreen"] = 99] = "LightSeaGreen";
  KnownColor2[KnownColor2["LightSkyBlue"] = 100] = "LightSkyBlue";
  KnownColor2[KnownColor2["LightSlateGray"] = 101] = "LightSlateGray";
  KnownColor2[KnownColor2["LightSteelBlue"] = 102] = "LightSteelBlue";
  KnownColor2[KnownColor2["LightYellow"] = 103] = "LightYellow";
  KnownColor2[KnownColor2["Lime"] = 104] = "Lime";
  KnownColor2[KnownColor2["LimeGreen"] = 105] = "LimeGreen";
  KnownColor2[KnownColor2["Linen"] = 106] = "Linen";
  KnownColor2[KnownColor2["Magenta"] = 107] = "Magenta";
  KnownColor2[KnownColor2["Maroon"] = 108] = "Maroon";
  KnownColor2[KnownColor2["MediumAquamarine"] = 109] = "MediumAquamarine";
  KnownColor2[KnownColor2["MediumBlue"] = 110] = "MediumBlue";
  KnownColor2[KnownColor2["MediumOrchid"] = 111] = "MediumOrchid";
  KnownColor2[KnownColor2["MediumPurple"] = 112] = "MediumPurple";
  KnownColor2[KnownColor2["MediumSeaGreen"] = 113] = "MediumSeaGreen";
  KnownColor2[KnownColor2["MediumSlateBlue"] = 114] = "MediumSlateBlue";
  KnownColor2[KnownColor2["MediumSpringGreen"] = 115] = "MediumSpringGreen";
  KnownColor2[KnownColor2["MediumTurquoise"] = 116] = "MediumTurquoise";
  KnownColor2[KnownColor2["MediumVioletRed"] = 117] = "MediumVioletRed";
  KnownColor2[KnownColor2["MidnightBlue"] = 118] = "MidnightBlue";
  KnownColor2[KnownColor2["MintCream"] = 119] = "MintCream";
  KnownColor2[KnownColor2["MistyRose"] = 120] = "MistyRose";
  KnownColor2[KnownColor2["Moccasin"] = 121] = "Moccasin";
  KnownColor2[KnownColor2["NavajoWhite"] = 122] = "NavajoWhite";
  KnownColor2[KnownColor2["Navy"] = 123] = "Navy";
  KnownColor2[KnownColor2["OldLace"] = 124] = "OldLace";
  KnownColor2[KnownColor2["Olive"] = 125] = "Olive";
  KnownColor2[KnownColor2["OliveDrab"] = 126] = "OliveDrab";
  KnownColor2[KnownColor2["Orange"] = 127] = "Orange";
  KnownColor2[KnownColor2["OrangeRed"] = 128] = "OrangeRed";
  KnownColor2[KnownColor2["Orchid"] = 129] = "Orchid";
  KnownColor2[KnownColor2["PaleGoldenrod"] = 130] = "PaleGoldenrod";
  KnownColor2[KnownColor2["PaleGreen"] = 131] = "PaleGreen";
  KnownColor2[KnownColor2["PaleTurquoise"] = 132] = "PaleTurquoise";
  KnownColor2[KnownColor2["PaleVioletRed"] = 133] = "PaleVioletRed";
  KnownColor2[KnownColor2["PapayaWhip"] = 134] = "PapayaWhip";
  KnownColor2[KnownColor2["PeachPuff"] = 135] = "PeachPuff";
  KnownColor2[KnownColor2["Peru"] = 136] = "Peru";
  KnownColor2[KnownColor2["Pink"] = 137] = "Pink";
  KnownColor2[KnownColor2["Plum"] = 138] = "Plum";
  KnownColor2[KnownColor2["PowderBlue"] = 139] = "PowderBlue";
  KnownColor2[KnownColor2["Purple"] = 140] = "Purple";
  KnownColor2[KnownColor2["Red"] = 141] = "Red";
  KnownColor2[KnownColor2["RosyBrown"] = 142] = "RosyBrown";
  KnownColor2[KnownColor2["RoyalBlue"] = 143] = "RoyalBlue";
  KnownColor2[KnownColor2["SaddleBrown"] = 144] = "SaddleBrown";
  KnownColor2[KnownColor2["Salmon"] = 145] = "Salmon";
  KnownColor2[KnownColor2["SandyBrown"] = 146] = "SandyBrown";
  KnownColor2[KnownColor2["SeaGreen"] = 147] = "SeaGreen";
  KnownColor2[KnownColor2["SeaShell"] = 148] = "SeaShell";
  KnownColor2[KnownColor2["Sienna"] = 149] = "Sienna";
  KnownColor2[KnownColor2["Silver"] = 150] = "Silver";
  KnownColor2[KnownColor2["SkyBlue"] = 151] = "SkyBlue";
  KnownColor2[KnownColor2["SlateBlue"] = 152] = "SlateBlue";
  KnownColor2[KnownColor2["SlateGray"] = 153] = "SlateGray";
  KnownColor2[KnownColor2["Snow"] = 154] = "Snow";
  KnownColor2[KnownColor2["SpringGreen"] = 155] = "SpringGreen";
  KnownColor2[KnownColor2["SteelBlue"] = 156] = "SteelBlue";
  KnownColor2[KnownColor2["Tan"] = 157] = "Tan";
  KnownColor2[KnownColor2["Teal"] = 158] = "Teal";
  KnownColor2[KnownColor2["Thistle"] = 159] = "Thistle";
  KnownColor2[KnownColor2["Tomato"] = 160] = "Tomato";
  KnownColor2[KnownColor2["Turquoise"] = 161] = "Turquoise";
  KnownColor2[KnownColor2["Violet"] = 162] = "Violet";
  KnownColor2[KnownColor2["Wheat"] = 163] = "Wheat";
  KnownColor2[KnownColor2["White"] = 164] = "White";
  KnownColor2[KnownColor2["WhiteSmoke"] = 165] = "WhiteSmoke";
  KnownColor2[KnownColor2["Yellow"] = 166] = "Yellow";
  KnownColor2[KnownColor2["YellowGreen"] = 167] = "YellowGreen";
  KnownColor2[KnownColor2["ButtonFace"] = 168] = "ButtonFace";
  KnownColor2[KnownColor2["ButtonHighlight"] = 169] = "ButtonHighlight";
  KnownColor2[KnownColor2["ButtonShadow"] = 170] = "ButtonShadow";
  KnownColor2[KnownColor2["GradientActiveCaption"] = 171] = "GradientActiveCaption";
  KnownColor2[KnownColor2["GradientInactiveCaption"] = 172] = "GradientInactiveCaption";
  KnownColor2[KnownColor2["MenuBar"] = 173] = "MenuBar";
  KnownColor2[KnownColor2["MenuHighlight"] = 174] = "MenuHighlight";
})(KnownColor || (KnownColor = {}));

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/brushes/pdf-brushes.js
var PdfBrushes = (
  /** @class */
  function() {
    function PdfBrushes2() {
    }
    Object.defineProperty(PdfBrushes2, "AliceBlue", {
      //Static Properties
      /**
       * Gets the AliceBlue brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.AliceBlue)) {
          brush = this.sBrushes.getValue(KnownColor.AliceBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.AliceBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "AntiqueWhite", {
      /**
       * Gets the antique white brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.AntiqueWhite)) {
          brush = this.sBrushes.getValue(KnownColor.AntiqueWhite);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.AntiqueWhite);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Aqua", {
      /**
       * Gets the Aqua default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Aqua)) {
          brush = this.sBrushes.getValue(KnownColor.Aqua);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Aqua);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Aquamarine", {
      /**
       * Gets the Aquamarine default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Aquamarine)) {
          brush = this.sBrushes.getValue(KnownColor.Aquamarine);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Aquamarine);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Azure", {
      /**
       * Gets the Azure default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Azure)) {
          brush = this.sBrushes.getValue(KnownColor.Azure);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Azure);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Beige", {
      /**
       * Gets the Beige default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Beige)) {
          brush = this.sBrushes.getValue(KnownColor.Beige);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Beige);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Bisque", {
      /**
       * Gets the Bisque default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Bisque)) {
          brush = this.sBrushes.getValue(KnownColor.Bisque);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Bisque);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Black", {
      /**
       * Gets the Black default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Black)) {
          brush = this.sBrushes.getValue(KnownColor.Black);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Black);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "BlanchedAlmond", {
      /**
       * Gets the BlanchedAlmond default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.BlanchedAlmond)) {
          brush = this.sBrushes.getValue(KnownColor.BlanchedAlmond);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.BlanchedAlmond);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Blue", {
      /**
       * Gets the Blue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Blue)) {
          brush = this.sBrushes.getValue(KnownColor.Blue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Blue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "BlueViolet", {
      /**
       * Gets the BlueViolet default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.BlueViolet)) {
          brush = this.sBrushes.getValue(KnownColor.BlueViolet);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.BlueViolet);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Brown", {
      /**
       * Gets the Brown default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Brown)) {
          brush = this.sBrushes.getValue(KnownColor.Brown);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Brown);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "BurlyWood", {
      /**
       * Gets the BurlyWood default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.BurlyWood)) {
          brush = this.sBrushes.getValue(KnownColor.BurlyWood);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.BurlyWood);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "CadetBlue", {
      /**
       * Gets the CadetBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.CadetBlue)) {
          brush = this.sBrushes.getValue(KnownColor.CadetBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.CadetBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Chartreuse", {
      /**
       * Gets the Chartreuse default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Chartreuse)) {
          brush = this.sBrushes.getValue(KnownColor.Chartreuse);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Chartreuse);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Chocolate", {
      /**
       * Gets the Chocolate default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Chocolate)) {
          brush = this.sBrushes.getValue(KnownColor.Chocolate);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Chocolate);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Coral", {
      /**
       * Gets the Coral default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Coral)) {
          brush = this.sBrushes.getValue(KnownColor.Coral);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Coral);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "CornflowerBlue", {
      /**
       * Gets the CornflowerBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.CornflowerBlue)) {
          brush = this.sBrushes.getValue(KnownColor.CornflowerBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.CornflowerBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Cornsilk", {
      /**
       * Gets the Corn silk default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Cornsilk)) {
          brush = this.sBrushes.getValue(KnownColor.Cornsilk);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Cornsilk);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Crimson", {
      /**
       *  Gets the Crimson default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Crimson)) {
          brush = this.sBrushes.getValue(KnownColor.Crimson);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Crimson);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Cyan", {
      /**
       * Gets the Cyan default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Cyan)) {
          brush = this.sBrushes.getValue(KnownColor.Cyan);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Cyan);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkBlue", {
      /**
       * Gets the DarkBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkBlue)) {
          brush = this.sBrushes.getValue(KnownColor.DarkBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkCyan", {
      /**
       * Gets the DarkCyan default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkCyan)) {
          brush = this.sBrushes.getValue(KnownColor.DarkCyan);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkCyan);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkGoldenrod", {
      /**
       * Gets the DarkGoldenrod default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkGoldenrod)) {
          brush = this.sBrushes.getValue(KnownColor.DarkGoldenrod);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkGoldenrod);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkGray", {
      /**
       * Gets the DarkGray default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkGray)) {
          brush = this.sBrushes.getValue(KnownColor.DarkGray);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkGray);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkGreen", {
      /**
       * Gets the DarkGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkGreen)) {
          brush = this.sBrushes.getValue(KnownColor.DarkGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkKhaki", {
      /**
       * Gets the DarkKhaki default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkKhaki)) {
          brush = this.sBrushes.getValue(KnownColor.DarkKhaki);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkKhaki);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkMagenta", {
      /**
       * Gets the DarkMagenta default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkMagenta)) {
          brush = this.sBrushes.getValue(KnownColor.DarkMagenta);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkMagenta);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkOliveGreen", {
      /**
       * Gets the DarkOliveGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkOliveGreen)) {
          brush = this.sBrushes.getValue(KnownColor.DarkOliveGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkOliveGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkOrange", {
      /**
       * Gets the DarkOrange default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkOrange)) {
          brush = this.sBrushes.getValue(KnownColor.DarkOrange);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkOrange);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkOrchid", {
      /**
       * Gets the DarkOrchid default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkOrchid)) {
          brush = this.sBrushes.getValue(KnownColor.DarkOrchid);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkOrchid);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkRed", {
      /**
       * Gets the DarkRed default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkRed)) {
          brush = this.sBrushes.getValue(KnownColor.DarkRed);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkRed);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkSalmon", {
      /**
       * Gets the DarkSalmon default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkSalmon)) {
          brush = this.sBrushes.getValue(KnownColor.DarkSalmon);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkSalmon);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkSeaGreen", {
      /**
       * Gets the DarkSeaGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkSeaGreen)) {
          brush = this.sBrushes.getValue(KnownColor.DarkSeaGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkSeaGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkSlateBlue", {
      /**
       * Gets the DarkSlateBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkSlateBlue)) {
          brush = this.sBrushes.getValue(KnownColor.DarkSlateBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkSlateBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkSlateGray", {
      /**
       * Gets the DarkSlateGray default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkSlateGray)) {
          brush = this.sBrushes.getValue(KnownColor.DarkSlateGray);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkSlateGray);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkTurquoise", {
      /**
       * Gets the DarkTurquoise default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkTurquoise)) {
          brush = this.sBrushes.getValue(KnownColor.DarkTurquoise);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkTurquoise);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkViolet", {
      /**
       * Gets the DarkViolet default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkViolet)) {
          brush = this.sBrushes.getValue(KnownColor.DarkViolet);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkViolet);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DeepPink", {
      /**
       * Gets the DeepPink default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DeepPink)) {
          brush = this.sBrushes.getValue(KnownColor.DeepPink);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DeepPink);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DeepSkyBlue", {
      /**
       * Gets the DeepSkyBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DeepSkyBlue)) {
          brush = this.sBrushes.getValue(KnownColor.DeepSkyBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DeepSkyBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DimGray", {
      /**
       * Gets the DimGray default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DimGray)) {
          brush = this.sBrushes.getValue(KnownColor.DimGray);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DimGray);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DodgerBlue", {
      /**
       * Gets the DodgerBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DodgerBlue)) {
          brush = this.sBrushes.getValue(KnownColor.DodgerBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DodgerBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Firebrick", {
      /**
       * Gets the Firebrick default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Firebrick)) {
          brush = this.sBrushes.getValue(KnownColor.Firebrick);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Firebrick);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "FloralWhite", {
      /**
       * Gets the FloralWhite default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.FloralWhite)) {
          brush = this.sBrushes.getValue(KnownColor.FloralWhite);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.FloralWhite);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "ForestGreen", {
      /**
       * Gets the ForestGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.ForestGreen)) {
          brush = this.sBrushes.getValue(KnownColor.ForestGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.ForestGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Fuchsia", {
      /**
       * Gets the Fuchsia default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Fuchsia)) {
          brush = this.sBrushes.getValue(KnownColor.Fuchsia);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Fuchsia);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Gainsboro", {
      /**
       * Gets the Gainsborough default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Gainsboro)) {
          brush = this.sBrushes.getValue(KnownColor.Gainsboro);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Gainsboro);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "GhostWhite", {
      /**
       * Gets the GhostWhite default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.GhostWhite)) {
          brush = this.sBrushes.getValue(KnownColor.GhostWhite);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.GhostWhite);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Gold", {
      /**
       * Gets the Gold default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Gold)) {
          brush = this.sBrushes.getValue(KnownColor.Gold);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Gold);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Goldenrod", {
      /**
       * Gets the Goldenrod default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Goldenrod)) {
          brush = this.sBrushes.getValue(KnownColor.Goldenrod);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Goldenrod);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Gray", {
      /**
       * Gets the Gray default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Gray)) {
          brush = this.sBrushes.getValue(KnownColor.Gray);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Gray);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Green", {
      /**
       * Gets the Green default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Green)) {
          brush = this.sBrushes.getValue(KnownColor.Green);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Green);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "GreenYellow", {
      /**
       * Gets the GreenYellow default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.GreenYellow)) {
          brush = this.sBrushes.getValue(KnownColor.GreenYellow);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.GreenYellow);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Honeydew", {
      /**
       * Gets the Honeydew default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Honeydew)) {
          brush = this.sBrushes.getValue(KnownColor.Honeydew);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Honeydew);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "HotPink", {
      /**
       * Gets the HotPink default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.HotPink)) {
          brush = this.sBrushes.getValue(KnownColor.HotPink);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.HotPink);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "IndianRed", {
      /**
       * Gets the IndianRed default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.IndianRed)) {
          brush = this.sBrushes.getValue(KnownColor.IndianRed);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.IndianRed);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Indigo", {
      /**
       * Gets the Indigo default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Indigo)) {
          brush = this.sBrushes.getValue(KnownColor.Indigo);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Indigo);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Ivory", {
      /**
       * Gets the Ivory default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Ivory)) {
          brush = this.sBrushes.getValue(KnownColor.Ivory);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Ivory);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Khaki", {
      /**
       * Gets the Khaki default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Khaki)) {
          brush = this.sBrushes.getValue(KnownColor.Khaki);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Khaki);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Lavender", {
      /**
       * Gets the Lavender default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Lavender)) {
          brush = this.sBrushes.getValue(KnownColor.Lavender);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Lavender);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LavenderBlush", {
      /**
       * Gets the LavenderBlush default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LavenderBlush)) {
          brush = this.sBrushes.getValue(KnownColor.LavenderBlush);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LavenderBlush);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LawnGreen", {
      /**
       * Gets the LawnGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LawnGreen)) {
          brush = this.sBrushes.getValue(KnownColor.LawnGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LawnGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LemonChiffon", {
      /**
       * Gets the LemonChiffon default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LemonChiffon)) {
          brush = this.sBrushes.getValue(KnownColor.LemonChiffon);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LemonChiffon);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LightBlue", {
      /**
       * Gets the LightBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LightBlue)) {
          brush = this.sBrushes.getValue(KnownColor.LightBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LightBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LightCoral", {
      /**
       * Gets the LightCoral default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LightCoral)) {
          brush = this.sBrushes.getValue(KnownColor.LightCoral);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LightCoral);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LightCyan", {
      /**
       * Gets the LightCyan default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LightCyan)) {
          brush = this.sBrushes.getValue(KnownColor.LightCyan);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LightCyan);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LightGoldenrodYellow", {
      /**
       * Gets the LightGoldenrodYellow default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LightGoldenrodYellow)) {
          brush = this.sBrushes.getValue(KnownColor.LightGoldenrodYellow);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LightGoldenrodYellow);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LightGray", {
      /**
       * Gets the LightGray default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LightGray)) {
          brush = this.sBrushes.getValue(KnownColor.LightGray);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LightGray);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LightGreen", {
      /**
       * Gets the LightGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LightGreen)) {
          brush = this.sBrushes.getValue(KnownColor.LightGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LightGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LightPink", {
      /**
       * Gets the LightPink default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LightPink)) {
          brush = this.sBrushes.getValue(KnownColor.LightPink);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LightPink);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LightSalmon", {
      /**
       * Gets the LightSalmon default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LightSalmon)) {
          brush = this.sBrushes.getValue(KnownColor.LightSalmon);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LightSalmon);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LightSeaGreen", {
      /**
       * Gets the LightSeaGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LightSeaGreen)) {
          brush = this.sBrushes.getValue(KnownColor.LightSeaGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LightSeaGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LightSkyBlue", {
      /**
       * Gets the LightSkyBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LightSkyBlue)) {
          brush = this.sBrushes.getValue(KnownColor.LightSkyBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LightSkyBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LightSlateGray", {
      /**
       * Gets the LightSlateGray default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LightSlateGray)) {
          brush = this.sBrushes.getValue(KnownColor.LightSlateGray);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LightSlateGray);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LightSteelBlue", {
      /**
       * Gets the LightSteelBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LightSteelBlue)) {
          brush = this.sBrushes.getValue(KnownColor.LightSteelBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LightSteelBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LightYellow", {
      /**
       * Gets the LightYellow default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LightYellow)) {
          brush = this.sBrushes.getValue(KnownColor.LightYellow);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LightYellow);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Lime", {
      /**
       * Gets the Lime default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Lime)) {
          brush = this.sBrushes.getValue(KnownColor.Lime);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Lime);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LimeGreen", {
      /**
       * Gets the LimeGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LimeGreen)) {
          brush = this.sBrushes.getValue(KnownColor.LimeGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LimeGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Linen", {
      /**
       * Gets the Linen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Linen)) {
          brush = this.sBrushes.getValue(KnownColor.Linen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Linen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Magenta", {
      /**
       * Gets the Magenta default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Magenta)) {
          brush = this.sBrushes.getValue(KnownColor.Magenta);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Magenta);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Maroon", {
      /**
       * Gets the Maroon default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Maroon)) {
          brush = this.sBrushes.getValue(KnownColor.Maroon);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Maroon);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "MediumAquamarine", {
      /**
       * Gets the MediumAquamarine default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.MediumAquamarine)) {
          brush = this.sBrushes.getValue(KnownColor.MediumAquamarine);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.MediumAquamarine);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "MediumBlue", {
      /**
       * Gets the MediumBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.MediumBlue)) {
          brush = this.sBrushes.getValue(KnownColor.MediumBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.MediumBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "MediumOrchid", {
      /**
       * Gets the MediumOrchid default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.MediumOrchid)) {
          brush = this.sBrushes.getValue(KnownColor.MediumOrchid);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.MediumOrchid);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "MediumPurple", {
      /**
       * Gets the MediumPurple default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.MediumPurple)) {
          brush = this.sBrushes.getValue(KnownColor.MediumPurple);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.MediumPurple);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "MediumSeaGreen", {
      /**
       * Gets the MediumSeaGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.MediumSeaGreen)) {
          brush = this.sBrushes.getValue(KnownColor.MediumSeaGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.MediumSeaGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "MediumSlateBlue", {
      /**
       * Gets the MediumSlateBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.MediumSlateBlue)) {
          brush = this.sBrushes.getValue(KnownColor.MediumSlateBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.MediumSlateBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "MediumSpringGreen", {
      /**
       * Gets the MediumSpringGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.MediumSpringGreen)) {
          brush = this.sBrushes.getValue(KnownColor.MediumSpringGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.MediumSpringGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "MediumTurquoise", {
      /**
       * Gets the MediumTurquoise default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.MediumTurquoise)) {
          brush = this.sBrushes.getValue(KnownColor.MediumTurquoise);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.MediumTurquoise);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "MediumVioletRed", {
      /**
       * Gets the MediumVioletRed default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.MediumVioletRed)) {
          brush = this.sBrushes.getValue(KnownColor.MediumVioletRed);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.MediumVioletRed);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "MidnightBlue", {
      /**
       * Gets the MidnightBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.MidnightBlue)) {
          brush = this.sBrushes.getValue(KnownColor.MidnightBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.MidnightBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "MintCream", {
      /**
       * Gets the MintCream default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.MintCream)) {
          brush = this.sBrushes.getValue(KnownColor.MintCream);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.MintCream);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "MistyRose", {
      /**
       * Gets the MistyRose default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.MistyRose)) {
          brush = this.sBrushes.getValue(KnownColor.MistyRose);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.MistyRose);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Moccasin", {
      /**
       * Gets the Moccasin default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Moccasin)) {
          brush = this.sBrushes.getValue(KnownColor.Moccasin);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Moccasin);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "NavajoWhite", {
      /**
       * Gets the NavajoWhite default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.NavajoWhite)) {
          brush = this.sBrushes.getValue(KnownColor.NavajoWhite);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.NavajoWhite);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Navy", {
      /**
       * Gets the Navy default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Navy)) {
          brush = this.sBrushes.getValue(KnownColor.Navy);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Navy);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "OldLace", {
      /**
       * Gets the OldLace default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.OldLace)) {
          brush = this.sBrushes.getValue(KnownColor.OldLace);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.OldLace);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Olive", {
      /**
       * Gets the Olive default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Olive)) {
          brush = this.sBrushes.getValue(KnownColor.Olive);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Olive);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "OliveDrab", {
      /**
       * Gets the OliveDrab default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.OliveDrab)) {
          brush = this.sBrushes.getValue(KnownColor.OliveDrab);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.OliveDrab);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Orange", {
      /**
       * Gets the Orange default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Orange)) {
          brush = this.sBrushes.getValue(KnownColor.Orange);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Orange);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "OrangeRed", {
      /**
       * Gets the OrangeRed default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.OrangeRed)) {
          brush = this.sBrushes.getValue(KnownColor.OrangeRed);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.OrangeRed);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Orchid", {
      /**
       * Gets the Orchid default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Orchid)) {
          brush = this.sBrushes.getValue(KnownColor.Orchid);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Orchid);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "PaleGoldenrod", {
      /**
       * Gets the PaleGoldenrod default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.PaleGoldenrod)) {
          brush = this.sBrushes.getValue(KnownColor.PaleGoldenrod);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.PaleGoldenrod);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "PaleGreen", {
      /**
       * Gets the PaleGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.PaleGreen)) {
          brush = this.sBrushes.getValue(KnownColor.PaleGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.PaleGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "PaleTurquoise", {
      /**
       * Gets the PaleTurquoise default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.PaleTurquoise)) {
          brush = this.sBrushes.getValue(KnownColor.PaleTurquoise);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.PaleTurquoise);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "PaleVioletRed", {
      /**
       * Gets the PaleVioletRed default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.PaleVioletRed)) {
          brush = this.sBrushes.getValue(KnownColor.PaleVioletRed);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.PaleVioletRed);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "PapayaWhip", {
      /**
       * Gets the PapayaWhip default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.PapayaWhip)) {
          brush = this.sBrushes.getValue(KnownColor.PapayaWhip);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.PapayaWhip);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "PeachPuff", {
      /**
       * Gets the PeachPuff default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.PeachPuff)) {
          brush = this.sBrushes.getValue(KnownColor.PeachPuff);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.PeachPuff);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Peru", {
      /**
       * Gets the Peru default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Peru)) {
          brush = this.sBrushes.getValue(KnownColor.Peru);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Peru);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Pink", {
      /**
       * Gets the Pink default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Pink)) {
          brush = this.sBrushes.getValue(KnownColor.Pink);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Pink);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Plum", {
      /**
       * Gets the Plum default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Plum)) {
          brush = this.sBrushes.getValue(KnownColor.Plum);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Plum);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "PowderBlue", {
      /**
       * Gets the PowderBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.PowderBlue)) {
          brush = this.sBrushes.getValue(KnownColor.PowderBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.PowderBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Purple", {
      /**
       * Gets the Purple default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Purple)) {
          brush = this.sBrushes.getValue(KnownColor.Purple);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Purple);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Red", {
      /**
       * Gets the Red default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Red)) {
          brush = this.sBrushes.getValue(KnownColor.Red);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Red);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "RosyBrown", {
      /**
       * Gets the RosyBrown default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.RosyBrown)) {
          brush = this.sBrushes.getValue(KnownColor.RosyBrown);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.RosyBrown);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "RoyalBlue", {
      /**
       * Gets the RoyalBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.RoyalBlue)) {
          brush = this.sBrushes.getValue(KnownColor.RoyalBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.RoyalBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "SaddleBrown", {
      /**
       * Gets the SaddleBrown default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.SaddleBrown)) {
          brush = this.sBrushes.getValue(KnownColor.SaddleBrown);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.SaddleBrown);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Salmon", {
      /**
       * Gets the Salmon default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Salmon)) {
          brush = this.sBrushes.getValue(KnownColor.Salmon);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Salmon);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "SandyBrown", {
      /**
       * Gets the SandyBrown default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.SandyBrown)) {
          brush = this.sBrushes.getValue(KnownColor.SandyBrown);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.SandyBrown);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "SeaGreen", {
      /**
       * Gets the SeaGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.SeaGreen)) {
          brush = this.sBrushes.getValue(KnownColor.SeaGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.SeaGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "SeaShell", {
      /**
       * Gets the SeaShell default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.SeaShell)) {
          brush = this.sBrushes.getValue(KnownColor.SeaShell);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.SeaShell);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Sienna", {
      /**
       * Gets the Sienna default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Sienna)) {
          brush = this.sBrushes.getValue(KnownColor.Sienna);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Sienna);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Silver", {
      /**
       * Gets the Silver default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Silver)) {
          brush = this.sBrushes.getValue(KnownColor.Silver);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Silver);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "SkyBlue", {
      /**
       * Gets the SkyBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.SkyBlue)) {
          brush = this.sBrushes.getValue(KnownColor.SkyBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.SkyBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "SlateBlue", {
      /**
       * Gets the SlateBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.SlateBlue)) {
          brush = this.sBrushes.getValue(KnownColor.SlateBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.SlateBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "SlateGray", {
      /**
       * Gets the SlateGray default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.SlateGray)) {
          brush = this.sBrushes.getValue(KnownColor.SlateGray);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.SlateGray);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Snow", {
      /**
       * Gets the Snow default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Snow)) {
          brush = this.sBrushes.getValue(KnownColor.Snow);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Snow);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "SpringGreen", {
      /**
       * Gets the SpringGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.SpringGreen)) {
          brush = this.sBrushes.getValue(KnownColor.SpringGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.SpringGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "SteelBlue", {
      /**
       * Gets the SteelBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.SteelBlue)) {
          brush = this.sBrushes.getValue(KnownColor.SteelBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.SteelBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Tan", {
      /**
       * Gets the Tan default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Tan)) {
          brush = this.sBrushes.getValue(KnownColor.Tan);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Tan);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Teal", {
      /**
       * Gets the Teal default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Teal)) {
          brush = this.sBrushes.getValue(KnownColor.Teal);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Teal);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Thistle", {
      /**
       * Gets the Thistle default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Thistle)) {
          brush = this.sBrushes.getValue(KnownColor.Thistle);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Thistle);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Tomato", {
      /**
       * Gets the Tomato default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Tomato)) {
          brush = this.sBrushes.getValue(KnownColor.Tomato);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Tomato);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Transparent", {
      /**
       * Gets the Transparent default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Transparent)) {
          brush = this.sBrushes.getValue(KnownColor.Transparent);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Transparent);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Turquoise", {
      /**
       * Gets the Turquoise default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Turquoise)) {
          brush = this.sBrushes.getValue(KnownColor.Turquoise);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Turquoise);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Violet", {
      /**
       * Gets the Violet default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Violet)) {
          brush = this.sBrushes.getValue(KnownColor.Violet);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Violet);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Wheat", {
      /**
       * Gets the Wheat default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Wheat)) {
          brush = this.sBrushes.getValue(KnownColor.Wheat);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Wheat);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "White", {
      /**
       * Gets the White default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.White)) {
          brush = this.sBrushes.getValue(KnownColor.White);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.White);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "WhiteSmoke", {
      /**
       * Gets the WhiteSmoke default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.WhiteSmoke)) {
          brush = this.sBrushes.getValue(KnownColor.WhiteSmoke);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.WhiteSmoke);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Yellow", {
      /**
       * Gets the Yellow default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Yellow)) {
          brush = this.sBrushes.getValue(KnownColor.Yellow);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Yellow);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "YellowGreen", {
      /**
       * Gets the YellowGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.YellowGreen)) {
          brush = this.sBrushes.getValue(KnownColor.YellowGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.YellowGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    PdfBrushes2.getBrush = function(colorName) {
      var pdfColor = this.getColorValue(colorName);
      var brush = new PdfSolidBrush(pdfColor);
      this.sBrushes.setValue(colorName, brush);
      return brush;
    };
    PdfBrushes2.getColorValue = function(colorName) {
      var color = new PdfColor();
      switch (colorName) {
        case KnownColor.Transparent:
          color = new PdfColor(0, 255, 255, 255);
          break;
        case KnownColor.AliceBlue:
          color = new PdfColor(255, 240, 248, 255);
          break;
        case KnownColor.AntiqueWhite:
          color = new PdfColor(255, 250, 235, 215);
          break;
        case KnownColor.Aqua:
          color = new PdfColor(255, 0, 255, 255);
          break;
        case KnownColor.Aquamarine:
          color = new PdfColor(255, 127, 255, 212);
          break;
        case KnownColor.Azure:
          color = new PdfColor(255, 240, 255, 255);
          break;
        case KnownColor.Beige:
          color = new PdfColor(255, 245, 245, 220);
          break;
        case KnownColor.Bisque:
          color = new PdfColor(255, 255, 228, 196);
          break;
        case KnownColor.Black:
          color = new PdfColor(255, 0, 0, 0);
          break;
        case KnownColor.BlanchedAlmond:
          color = new PdfColor(255, 255, 235, 205);
          break;
        case KnownColor.Blue:
          color = new PdfColor(255, 0, 0, 255);
          break;
        case KnownColor.BlueViolet:
          color = new PdfColor(255, 138, 43, 226);
          break;
        case KnownColor.Brown:
          color = new PdfColor(255, 165, 42, 42);
          break;
        case KnownColor.BurlyWood:
          color = new PdfColor(255, 222, 184, 135);
          break;
        case KnownColor.CadetBlue:
          color = new PdfColor(255, 95, 158, 160);
          break;
        case KnownColor.Chartreuse:
          color = new PdfColor(255, 127, 255, 0);
          break;
        case KnownColor.Chocolate:
          color = new PdfColor(255, 210, 105, 30);
          break;
        case KnownColor.Coral:
          color = new PdfColor(255, 255, 127, 80);
          break;
        case KnownColor.CornflowerBlue:
          color = new PdfColor(255, 100, 149, 237);
          break;
        case KnownColor.Cornsilk:
          color = new PdfColor(255, 255, 248, 220);
          break;
        case KnownColor.Crimson:
          color = new PdfColor(255, 220, 20, 60);
          break;
        case KnownColor.Cyan:
          color = new PdfColor(255, 0, 255, 255);
          break;
        case KnownColor.DarkBlue:
          color = new PdfColor(255, 0, 0, 139);
          break;
        case KnownColor.DarkCyan:
          color = new PdfColor(255, 0, 139, 139);
          break;
        case KnownColor.DarkGoldenrod:
          color = new PdfColor(255, 184, 134, 11);
          break;
        case KnownColor.DarkGray:
          color = new PdfColor(255, 169, 169, 169);
          break;
        case KnownColor.DarkGreen:
          color = new PdfColor(255, 0, 100, 0);
          break;
        case KnownColor.DarkKhaki:
          color = new PdfColor(255, 189, 183, 107);
          break;
        case KnownColor.DarkMagenta:
          color = new PdfColor(255, 139, 0, 139);
          break;
        case KnownColor.DarkOliveGreen:
          color = new PdfColor(255, 85, 107, 47);
          break;
        case KnownColor.DarkOrange:
          color = new PdfColor(255, 255, 140, 0);
          break;
        case KnownColor.DarkOrchid:
          color = new PdfColor(255, 153, 50, 204);
          break;
        case KnownColor.DarkRed:
          color = new PdfColor(255, 139, 0, 0);
          break;
        case KnownColor.DarkSalmon:
          color = new PdfColor(255, 233, 150, 122);
          break;
        case KnownColor.DarkSeaGreen:
          color = new PdfColor(255, 143, 188, 139);
          break;
        case KnownColor.DarkSlateBlue:
          color = new PdfColor(255, 72, 61, 139);
          break;
        case KnownColor.DarkSlateGray:
          color = new PdfColor(255, 47, 79, 79);
          break;
        case KnownColor.DarkTurquoise:
          color = new PdfColor(255, 0, 206, 209);
          break;
        case KnownColor.DarkViolet:
          color = new PdfColor(255, 148, 0, 211);
          break;
        case KnownColor.DeepPink:
          color = new PdfColor(255, 255, 20, 147);
          break;
        case KnownColor.DeepSkyBlue:
          color = new PdfColor(255, 0, 191, 255);
          break;
        case KnownColor.DimGray:
          color = new PdfColor(255, 105, 105, 105);
          break;
        case KnownColor.DodgerBlue:
          color = new PdfColor(255, 30, 144, 255);
          break;
        case KnownColor.Firebrick:
          color = new PdfColor(255, 178, 34, 34);
          break;
        case KnownColor.FloralWhite:
          color = new PdfColor(255, 255, 250, 240);
          break;
        case KnownColor.ForestGreen:
          color = new PdfColor(255, 34, 139, 34);
          break;
        case KnownColor.Fuchsia:
          color = new PdfColor(255, 255, 0, 255);
          break;
        case KnownColor.Gainsboro:
          color = new PdfColor(255, 220, 220, 220);
          break;
        case KnownColor.GhostWhite:
          color = new PdfColor(255, 248, 248, 255);
          break;
        case KnownColor.Gold:
          color = new PdfColor(255, 255, 215, 0);
          break;
        case KnownColor.Goldenrod:
          color = new PdfColor(255, 218, 165, 32);
          break;
        case KnownColor.Gray:
          color = new PdfColor(255, 128, 128, 128);
          break;
        case KnownColor.Green:
          color = new PdfColor(255, 0, 128, 0);
          break;
        case KnownColor.GreenYellow:
          color = new PdfColor(255, 173, 255, 47);
          break;
        case KnownColor.Honeydew:
          color = new PdfColor(255, 240, 255, 240);
          break;
        case KnownColor.HotPink:
          color = new PdfColor(255, 255, 105, 180);
          break;
        case KnownColor.IndianRed:
          color = new PdfColor(255, 205, 92, 92);
          break;
        case KnownColor.Indigo:
          color = new PdfColor(255, 75, 0, 130);
          break;
        case KnownColor.Ivory:
          color = new PdfColor(255, 255, 255, 240);
          break;
        case KnownColor.Khaki:
          color = new PdfColor(255, 240, 230, 140);
          break;
        case KnownColor.Lavender:
          color = new PdfColor(255, 230, 230, 250);
          break;
        case KnownColor.LavenderBlush:
          color = new PdfColor(255, 255, 240, 245);
          break;
        case KnownColor.LawnGreen:
          color = new PdfColor(255, 124, 252, 0);
          break;
        case KnownColor.LemonChiffon:
          color = new PdfColor(255, 255, 250, 205);
          break;
        case KnownColor.LightBlue:
          color = new PdfColor(255, 173, 216, 230);
          break;
        case KnownColor.LightCoral:
          color = new PdfColor(255, 240, 128, 128);
          break;
        case KnownColor.LightCyan:
          color = new PdfColor(255, 224, 255, 255);
          break;
        case KnownColor.LightGoldenrodYellow:
          color = new PdfColor(255, 250, 250, 210);
          break;
        case KnownColor.LightGreen:
          color = new PdfColor(255, 144, 238, 144);
          break;
        case KnownColor.LightGray:
          color = new PdfColor(255, 211, 211, 211);
          break;
        case KnownColor.LightPink:
          color = new PdfColor(255, 255, 182, 193);
          break;
        case KnownColor.LightSalmon:
          color = new PdfColor(255, 255, 160, 122);
          break;
        case KnownColor.LightSeaGreen:
          color = new PdfColor(255, 32, 178, 170);
          break;
        case KnownColor.LightSkyBlue:
          color = new PdfColor(255, 135, 206, 250);
          break;
        case KnownColor.LightSlateGray:
          color = new PdfColor(255, 119, 136, 153);
          break;
        case KnownColor.LightSteelBlue:
          color = new PdfColor(255, 176, 196, 222);
          break;
        case KnownColor.LightYellow:
          color = new PdfColor(255, 255, 255, 224);
          break;
        case KnownColor.Lime:
          color = new PdfColor(255, 0, 255, 0);
          break;
        case KnownColor.LimeGreen:
          color = new PdfColor(255, 50, 205, 50);
          break;
        case KnownColor.Linen:
          color = new PdfColor(255, 250, 240, 230);
          break;
        case KnownColor.Magenta:
          color = new PdfColor(255, 255, 0, 255);
          break;
        case KnownColor.Maroon:
          color = new PdfColor(255, 128, 0, 0);
          break;
        case KnownColor.MediumAquamarine:
          color = new PdfColor(255, 102, 205, 170);
          break;
        case KnownColor.MediumBlue:
          color = new PdfColor(255, 0, 0, 205);
          break;
        case KnownColor.MediumOrchid:
          color = new PdfColor(255, 186, 85, 211);
          break;
        case KnownColor.MediumPurple:
          color = new PdfColor(255, 147, 112, 219);
          break;
        case KnownColor.MediumSeaGreen:
          color = new PdfColor(255, 60, 179, 113);
          break;
        case KnownColor.MediumSlateBlue:
          color = new PdfColor(255, 123, 104, 238);
          break;
        case KnownColor.MediumSpringGreen:
          color = new PdfColor(255, 0, 250, 154);
          break;
        case KnownColor.MediumTurquoise:
          color = new PdfColor(255, 72, 209, 204);
          break;
        case KnownColor.MediumVioletRed:
          color = new PdfColor(255, 199, 21, 133);
          break;
        case KnownColor.MidnightBlue:
          color = new PdfColor(255, 25, 25, 112);
          break;
        case KnownColor.MintCream:
          color = new PdfColor(255, 245, 255, 250);
          break;
        case KnownColor.MistyRose:
          color = new PdfColor(255, 255, 228, 225);
          break;
        case KnownColor.Moccasin:
          color = new PdfColor(255, 255, 228, 181);
          break;
        case KnownColor.NavajoWhite:
          color = new PdfColor(255, 255, 222, 173);
          break;
        case KnownColor.Navy:
          color = new PdfColor(255, 0, 0, 128);
          break;
        case KnownColor.OldLace:
          color = new PdfColor(255, 253, 245, 230);
          break;
        case KnownColor.Olive:
          color = new PdfColor(255, 128, 128, 0);
          break;
        case KnownColor.OliveDrab:
          color = new PdfColor(255, 107, 142, 35);
          break;
        case KnownColor.Orange:
          color = new PdfColor(255, 255, 165, 0);
          break;
        case KnownColor.OrangeRed:
          color = new PdfColor(255, 255, 69, 0);
          break;
        case KnownColor.Orchid:
          color = new PdfColor(255, 218, 112, 214);
          break;
        case KnownColor.PaleGoldenrod:
          color = new PdfColor(255, 238, 232, 170);
          break;
        case KnownColor.PaleGreen:
          color = new PdfColor(255, 152, 251, 152);
          break;
        case KnownColor.PaleTurquoise:
          color = new PdfColor(255, 175, 238, 238);
          break;
        case KnownColor.PaleVioletRed:
          color = new PdfColor(255, 219, 112, 147);
          break;
        case KnownColor.PapayaWhip:
          color = new PdfColor(255, 255, 239, 213);
          break;
        case KnownColor.PeachPuff:
          color = new PdfColor(255, 255, 218, 185);
          break;
        case KnownColor.Peru:
          color = new PdfColor(255, 205, 133, 63);
          break;
        case KnownColor.Pink:
          color = new PdfColor(255, 255, 192, 203);
          break;
        case KnownColor.Plum:
          color = new PdfColor(255, 221, 160, 221);
          break;
        case KnownColor.PowderBlue:
          color = new PdfColor(255, 176, 224, 230);
          break;
        case KnownColor.Purple:
          color = new PdfColor(255, 128, 0, 128);
          break;
        case KnownColor.Red:
          color = new PdfColor(255, 255, 0, 0);
          break;
        case KnownColor.RosyBrown:
          color = new PdfColor(255, 188, 143, 143);
          break;
        case KnownColor.RoyalBlue:
          color = new PdfColor(255, 65, 105, 225);
          break;
        case KnownColor.SaddleBrown:
          color = new PdfColor(255, 139, 69, 19);
          break;
        case KnownColor.Salmon:
          color = new PdfColor(255, 250, 128, 114);
          break;
        case KnownColor.SandyBrown:
          color = new PdfColor(255, 244, 164, 96);
          break;
        case KnownColor.SeaGreen:
          color = new PdfColor(255, 46, 139, 87);
          break;
        case KnownColor.SeaShell:
          color = new PdfColor(255, 255, 245, 238);
          break;
        case KnownColor.Sienna:
          color = new PdfColor(255, 160, 82, 45);
          break;
        case KnownColor.Silver:
          color = new PdfColor(255, 192, 192, 192);
          break;
        case KnownColor.SkyBlue:
          color = new PdfColor(255, 135, 206, 235);
          break;
        case KnownColor.SlateBlue:
          color = new PdfColor(255, 106, 90, 205);
          break;
        case KnownColor.SlateGray:
          color = new PdfColor(255, 112, 128, 144);
          break;
        case KnownColor.Snow:
          color = new PdfColor(255, 255, 250, 250);
          break;
        case KnownColor.SpringGreen:
          color = new PdfColor(255, 0, 255, 127);
          break;
        case KnownColor.SteelBlue:
          color = new PdfColor(255, 70, 130, 180);
          break;
        case KnownColor.Tan:
          color = new PdfColor(255, 210, 180, 140);
          break;
        case KnownColor.Teal:
          color = new PdfColor(255, 0, 128, 128);
          break;
        case KnownColor.Thistle:
          color = new PdfColor(255, 216, 191, 216);
          break;
        case KnownColor.Tomato:
          color = new PdfColor(255, 255, 99, 71);
          break;
        case KnownColor.Turquoise:
          color = new PdfColor(255, 64, 224, 208);
          break;
        case KnownColor.Violet:
          color = new PdfColor(255, 238, 130, 238);
          break;
        case KnownColor.Wheat:
          color = new PdfColor(255, 245, 222, 179);
          break;
        case KnownColor.White:
          color = new PdfColor(255, 255, 255, 255);
          break;
        case KnownColor.WhiteSmoke:
          color = new PdfColor(255, 245, 245, 245);
          break;
        case KnownColor.Yellow:
          color = new PdfColor(255, 255, 255, 0);
          break;
        case KnownColor.YellowGreen:
          color = new PdfColor(255, 154, 205, 50);
          break;
      }
      return color;
    };
    PdfBrushes2.sBrushes = new Dictionary();
    return PdfBrushes2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/brushes/pdf-blend.js
var PdfBlend = (
  /** @class */
  function() {
    function PdfBlend2(count) {
      this.precision = 1e3;
    }
    Object.defineProperty(PdfBlend2.prototype, "factors", {
      //Properties
      /**
       * Gets or sets the array of factor to the blend.
       * @public
       */
      get: function() {
        return this.mFactors;
      },
      set: function(value) {
        if (value == null) {
          throw new Error("ArgumentNullException : Factors");
        }
        this.mFactors = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBlend2.prototype, "positions", {
      /**
       * 'positions' Gets or sets the array of positions
       * @public
       */
      get: function() {
        return this.mPositions;
      },
      set: function(value) {
        var positionarray = value;
        for (var i = 0; i < positionarray.length; i++) {
          if (positionarray[i] < 0 || positionarray[i] > 1) {
            positionarray[i] = 0;
          }
        }
        this.mPositions = positionarray;
        this.mPositions = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBlend2.prototype, "count", {
      /**
       * Gets the number of elements that specify the blend.
       * @protected
       */
      get: function() {
        return this.mCount;
      },
      enumerable: true,
      configurable: true
    });
    PdfBlend2.prototype.generateColorBlend = function(colours, colorSpace) {
      if (colours == null) {
        throw new Error("ArgumentNullException : colours");
      }
      if (this.positions == null) {
        this.positions = [0];
      }
      var cBlend = new PdfColorBlend(this.count);
      var positions = this.positions;
      var clrs = null;
      if (positions.length === 1) {
        positions = [3];
        positions[0] = 0;
        positions[1] = this.positions[0];
        positions[2] = 1;
        clrs = new Array(3);
        clrs[0] = colours[0];
        clrs[1] = colours[0];
        clrs[2] = colours[1];
      } else {
        var c1 = colours[0];
        var c2 = colours[1];
        clrs = new Array(this.count);
        var i = 0;
        var count = this.count;
        for (i = 0; i < count; ++i) {
          clrs[i] = this.interpolate(this.mFactors[i], c1, c2, colorSpace);
        }
      }
      cBlend.positions = positions;
      cBlend.colors = clrs;
      return cBlend;
    };
    PdfBlend2.prototype.clonePdfBlend = function() {
      var blend = this;
      if (this.mFactors != null) {
        blend.factors = this.mFactors;
      }
      if (this.positions != null) {
        blend.positions = this.positions;
      }
      return blend;
    };
    PdfBlend2.prototype.gcd = function(u, v) {
      if (typeof u === "number" && typeof v === "number" && typeof v !== "undefined") {
        if (u < 0 || u > 1) {
          throw new Error("ArgumentOutOfRangeException : u");
        }
        if (v < 0 || v > 1) {
          throw new Error("ArgumentOutOfRangeException : v");
        }
        var iU = Math.max(1, u * this.precision);
        var iV = Math.max(1, v * this.precision);
        var iResult = this.gcdInt(iU, iV);
        var result = iResult / this.precision;
        return result;
      } else {
        var values = u;
        if (values == null) {
          throw new Error("ArgumentNullException : values");
        }
        if (values.length < 1) {
          throw new Error("ArgumentException : Not enough values in the array. - values");
        }
        var gcd = values[0];
        if (values.length > 1) {
          var count = values.length;
          for (var i = 1; i < count; ++i) {
            gcd = this.gcd(values[i], gcd);
            if (gcd === 1 / this.precision) {
              break;
            }
          }
        }
        return gcd;
      }
    };
    PdfBlend2.prototype.gcdInt = function(u, v) {
      if (u <= 0) {
        throw new Error("ArgumentOutOfRangeException" + u + "The arguments cannot be less or equal to zero.");
      }
      if (v <= 0) {
        throw new Error("ArgumentOutOfRangeException" + v + "The arguments cannot be less or equal to zero.");
      }
      if (u === 1 || v === 1) {
        return 1;
      }
      var shift = 0;
      while (this.isEven(u, v)) {
        ++shift;
        u >>= 1;
        v >>= 1;
      }
      while ((u & 1) <= 0) {
        u >>= 1;
      }
      do {
        while ((v & 1) <= 0) {
          v >>= 1;
        }
        if (u > v) {
          var t = v;
          v = u;
          u = t;
        }
        v = v - u;
      } while (v !== 0);
      return u << shift;
    };
    PdfBlend2.prototype.isEven = function(arg1, arg2) {
      if (typeof arg2 === "number" && typeof arg2 !== "undefined") {
        var result = true;
        result = result && (arg1 & 1) <= 0;
        result = result && (arg2 & 1) <= 0;
        return result;
      } else {
        return (arg1 & 1) <= 0;
      }
    };
    PdfBlend2.prototype.interpolate = function(t, color1, color2, colorSpace) {
      if (color1 instanceof PdfColor) {
        var color = new PdfColor();
        switch (colorSpace) {
          case PdfColorSpace.Rgb:
            var red = this.interpolate(t, color1.red, color2.red);
            var green = this.interpolate(t, color1.green, color2.green);
            var blue = this.interpolate(t, color1.blue, color2.blue);
            color = new PdfColor(red, green, blue);
            break;
          case PdfColorSpace.GrayScale:
            var gray = this.interpolate(t, color1.gray, color2.gray);
            color = new PdfColor(gray);
            break;
          case PdfColorSpace.Cmyk:
            var cyan = this.interpolate(t, color1.c, color2.c);
            var magenta = this.interpolate(t, color1.m, color2.m);
            var yellow = this.interpolate(t, color1.y, color2.y);
            var black = this.interpolate(t, color1.k, color2.k);
            color = new PdfColor(cyan, magenta, yellow, black);
            break;
        }
        return color;
      } else {
        var t0 = 0;
        var t1 = 1;
        var result = 0;
        if (t === t0) {
          result = color1;
        } else if (t === t1) {
          result = color2;
        } else {
          result = color1 + (t - t0) * ((color2 - color1) / (t1 - t0));
        }
        return result;
      }
    };
    return PdfBlend2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/brushes/pdf-color-blend.js
var __extends89 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfColorBlend = (
  /** @class */
  function(_super) {
    __extends89(PdfColorBlend2, _super);
    function PdfColorBlend2(count) {
      var _this = _super.call(this) || this;
      if (typeof count === "number") {
        _this = _super.call(this, count) || this;
      }
      return _this;
    }
    Object.defineProperty(PdfColorBlend2.prototype, "colors", {
      //Properties
      /**
       * Gets or sets the array of colors.
       * @public
       */
      get: function() {
        return this.mcolors;
      },
      set: function(value) {
        if (value == null) {
          throw new Error("ArgumentNullException : Colors");
        }
        this.mcolors = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfColorBlend2.prototype.getFunction = function(colorSpace) {
      var domain = [0, 1];
      var colourComponents = this.getColorComponentsCount(colorSpace);
      var maxComponentValue = this.getMaxComponentValue(colorSpace);
      var range = this.setRange(colourComponents, maxComponentValue);
      var func = null;
      if (this.mbrush == null && typeof this.mbrush === "undefined") {
        var sizes = [1];
        var samplesCount = void 0;
        var step = 1;
        if (this.positions.length === 2) {
          samplesCount = 2;
        } else {
          var positions = this.positions;
          var intervals = this.getIntervals(positions);
          var gcd = this.gcd(intervals);
          step = gcd;
          samplesCount = 1 / gcd + 1;
        }
        sizes[0] = samplesCount;
        var samples = this.getSamplesValues(colorSpace, samplesCount, maxComponentValue, step);
        func = new PdfSampledFunction(domain, range, sizes, samples);
        return func;
      }
      return func;
    };
    PdfColorBlend2.prototype.cloneColorBlend = function() {
      var cBlend = this;
      if (this.mcolors != null && typeof this.mcolors !== "undefined") {
        cBlend.colors = this.mcolors;
      }
      if (this.positions != null && typeof this.positions !== "undefined") {
        cBlend.positions = this.positions;
      }
      return cBlend;
    };
    PdfColorBlend2.prototype.setRange = function(colourComponents, maxValue) {
      var range = [colourComponents * 2];
      for (var i = 0; i < colourComponents; ++i) {
        range[i * 2] = 0;
        range[i * 2 + 1] = 1;
      }
      return range;
    };
    PdfColorBlend2.prototype.getColorComponentsCount = function(colorSpace) {
      var count = 0;
      switch (colorSpace) {
        case PdfColorSpace.Rgb:
          count = 3;
          break;
        case PdfColorSpace.Cmyk:
          count = 4;
          break;
        case PdfColorSpace.GrayScale:
          count = 1;
          break;
        default:
          throw new Error("ArgumentException - Unsupported color space: " + colorSpace + " colorSpace");
      }
      return count;
    };
    PdfColorBlend2.prototype.getSamplesValues = function(colorSpace, sampleCount, maxComponentValue, step) {
      var values;
      switch (colorSpace) {
        case PdfColorSpace.GrayScale:
          values = this.getGrayscaleSamples(sampleCount, maxComponentValue, step);
          break;
        case PdfColorSpace.Cmyk:
          values = this.getCmykSamples(sampleCount, maxComponentValue, step);
          break;
        case PdfColorSpace.Rgb:
          values = this.getRgbSamples(sampleCount, maxComponentValue, step);
          break;
        default:
          throw new Error("ArgumentException - Unsupported color space: " + colorSpace + " colorSpace");
      }
      return values;
    };
    PdfColorBlend2.prototype.getGrayscaleSamples = function(sampleCount, maxComponentValue, step) {
      var values = [sampleCount * 2];
      for (var i = 0; i < sampleCount; ++i) {
        var color = this.getNextColor(i, step, PdfColorSpace.GrayScale);
        var index = i * 2;
      }
      return values;
    };
    PdfColorBlend2.prototype.getRgbSamples = function(sampleCount, maxComponentValue, step) {
      var values = [sampleCount * 3];
      for (var i = 0; i < sampleCount; ++i) {
        var color = this.getNextColor(i, step, PdfColorSpace.Rgb);
        var index = i * 3;
        values[index] = color.r;
        values[index + 1] = color.g;
        values[index + 2] = color.b;
      }
      return values;
    };
    PdfColorBlend2.prototype.getCmykSamples = function(sampleCount, maxComponentValue, step) {
      var values = [sampleCount * 4];
      for (var i = 0; i < sampleCount; i++) {
        var color = this.getNextColor(i, step, PdfColorSpace.Cmyk);
        var index = i * 4;
        values[index] = color.c * maxComponentValue;
        values[index + 1] = color.m * maxComponentValue;
        values[index + 2] = color.y * maxComponentValue;
        values[index + 3] = color.k * maxComponentValue;
      }
      return values;
    };
    PdfColorBlend2.prototype.getNextColor = function(index, step, colorSpace) {
      var position = step * index;
      var indexHi;
      var indexLow;
      var result = this.getIndices(position, indexLow, indexHi);
      indexLow = result.indexLow;
      indexHi = result.indexHi;
      var color;
      if (indexLow === indexHi) {
        color = this.mcolors[indexLow];
      } else {
        var positionLow = this.positions[indexLow];
        var positionHi = this.positions[indexHi];
        var colorLow = this.mcolors[indexLow];
        var colorHi = this.mcolors[indexHi];
        var t = (position - positionLow) / (positionHi - positionLow);
        color = this.interpolate(t, colorLow, colorHi, colorSpace);
      }
      return color;
    };
    PdfColorBlend2.prototype.getIndices = function(position, indexLow, indexHi) {
      var positions = this.positions;
      indexLow = 0;
      indexHi = 0;
      for (var i = 0; i < this.mcolors.length; ++i) {
        var currPos = positions[i];
        if (currPos === position) {
          indexHi = i;
          indexLow = i;
          break;
        } else if (currPos > position) {
          indexHi = i;
          break;
        }
        indexLow = i;
        indexHi = i;
      }
      return {
        indexLow,
        indexHi
      };
    };
    PdfColorBlend2.prototype.getMaxComponentValue = function(colorSpace) {
      var result = 0;
      switch (colorSpace) {
        case PdfColorSpace.Cmyk:
        case PdfColorSpace.Rgb:
          result = 255;
          break;
        case PdfColorSpace.GrayScale:
          result = 65535;
          break;
        default:
          throw new Error("ArgumentException - Unsupported color space: " + colorSpace + "colorSpace");
      }
      return result;
    };
    PdfColorBlend2.prototype.getIntervals = function(positions) {
      var count = positions.length;
      var intervals = [count - 1];
      var prev = positions[0];
      for (var i = 1; i < count; ++i) {
        var v = positions[i];
        intervals[i - 1] = v - prev;
        prev = v;
      }
      return intervals;
    };
    return PdfColorBlend2;
  }(PdfBlend)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/brushes/pdf-linear-gradient-brush.js
var __extends90 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfLinearGradientBrush = (
  /** @class */
  function(_super) {
    __extends90(PdfLinearGradientBrush2, _super);
    function PdfLinearGradientBrush2(arg1, arg2, arg3, arg4) {
      var _this = _super.call(this, new PdfDictionary()) || this;
      _this.mDictionaryProperties = new DictionaryProperties();
      if (arg1 instanceof PointF && arg2 instanceof PointF && arg3 instanceof PdfColor && arg4 instanceof PdfColor) {
        _this.initialize(arg3, arg4);
        _this.mPointStart = arg1;
        _this.mPointEnd = arg2;
        _this.setPoints(_this.mPointStart, _this.mPointEnd);
      } else if (arg1 instanceof Rectangle) {
        _this.initialize(arg2, arg3);
        if (arg4 === PdfLinearGradientMode.BackwardDiagonal || arg4 === PdfLinearGradientMode.ForwardDiagonal || arg4 === PdfLinearGradientMode.Horizontal || arg4 === PdfLinearGradientMode.Vertical) {
          _this.mBoundaries = arg1;
          switch (arg4) {
            case PdfLinearGradientMode.BackwardDiagonal:
              _this.mPointStart = new PointF(arg1.right, arg1.top);
              _this.mPointEnd = new PointF(arg1.left, arg1.bottom);
              break;
            case PdfLinearGradientMode.ForwardDiagonal:
              _this.mPointStart = new PointF(arg1.left, arg1.top);
              _this.mPointEnd = new PointF(arg1.right, arg1.bottom);
              break;
            case PdfLinearGradientMode.Horizontal:
              _this.mPointStart = new PointF(arg1.left, arg1.top);
              _this.mPointEnd = new PointF(arg1.right, arg1.top);
              break;
            case PdfLinearGradientMode.Vertical:
              _this.mPointStart = new PointF(arg1.left, arg1.top);
              _this.mPointEnd = new PointF(arg1.left, arg1.bottom);
              break;
            default:
              throw new Error("ArgumentException -- Unsupported linear gradient mode: " + arg4 + " mode");
          }
          _this.setPoints(_this.mPointStart, _this.mPointEnd);
        } else if (typeof arg4 === "number" && typeof arg4 !== "undefined") {
          _this.mBoundaries = arg1;
          arg4 = arg4 % 360;
          if (arg4 === 0) {
            _this.mPointStart = new PointF(arg1.left, arg1.top);
            _this.mPointEnd = new PointF(arg1.right, arg1.top);
          } else if (arg4 === 90) {
            _this.mPointStart = new PointF(arg1.left, arg1.top);
            _this.mPointEnd = new PointF(arg1.left, arg1.bottom);
          } else if (arg4 === 180) {
            _this.mPointEnd = new PointF(arg1.left, arg1.top);
            _this.mPointStart = new PointF(arg1.right, arg1.top);
          } else if (arg4 === 270) {
            _this.mPointEnd = new PointF(arg1.left, arg1.top);
            _this.mPointStart = new PointF(arg1.left, arg1.bottom);
          } else {
            var d2r = Math.PI / 180;
            var radAngle = arg4 * d2r;
            var k = Math.tan(radAngle);
            var x = _this.mBoundaries.left + (_this.mBoundaries.right - _this.mBoundaries.left) / 2;
            var y = _this.mBoundaries.top + (_this.mBoundaries.bottom - _this.mBoundaries.top) / 2;
            var centre = new PointF(x, y);
            x = _this.mBoundaries.width / (2 * Math.cos(radAngle));
            y = k * x;
            x = x + centre.x;
            y = y + centre.y;
            var p1 = new PointF(x, y);
            var cp1 = _this.subPoints(p1, centre);
            var p = _this.choosePoint(arg4);
            var coef = _this.mulPoints(_this.subPoints(p, centre), cp1) / _this.mulPoints(cp1, cp1);
            _this.mPointEnd = _this.addPoints(centre, _this.mulPoint(cp1, coef));
            _this.mPointStart = _this.addPoints(centre, _this.mulPoint(cp1, coef * -1));
          }
          _this.setPoints(_this.mPointEnd, _this.mPointStart);
        }
      }
      return _this;
    }
    PdfLinearGradientBrush2.prototype.initialize = function(color1, color2) {
      this.mColours = [color1, color2];
      this.mColourBlend = new PdfColorBlend(2);
      this.mColourBlend.positions = [0, 1];
      this.mColourBlend.colors = this.mColours;
      this.initShading();
    };
    Object.defineProperty(PdfLinearGradientBrush2.prototype, "blend", {
      //Properties
      /**
       * Gets or sets a PdfBlend that specifies positions
       * and factors that define a custom falloff for the gradient.
       * @public
       */
      get: function() {
        return this.mBlend;
      },
      set: function(value) {
        if (value == null) {
          throw new Error("ArgumentNullException : Blend");
        }
        if (this.mColours == null) {
          throw new Error("NotSupportedException : There is no starting and ending colours specified.");
        }
        this.mBlend = value;
        this.mColourBlend = this.mBlend.generateColorBlend(this.mColours, this.colorSpace);
        this.resetFunction();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfLinearGradientBrush2.prototype, "interpolationColors", {
      /**
       * Gets or sets a ColorBlend that defines a multicolor linear gradient.
       * @public
       */
      get: function() {
        return this.mColourBlend;
      },
      set: function(value) {
        if (value == null) {
          throw new Error("ArgumentNullException : InterpolationColors");
        }
        this.mBlend = null;
        this.mColours = null;
        this.mColourBlend = value;
        this.resetFunction();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfLinearGradientBrush2.prototype, "linearColors", {
      /**
       * Gets or sets the starting and ending colors of the gradient.
       * @public
       */
      get: function() {
        return this.mColours;
      },
      set: function(value) {
        if (value == null) {
          throw new Error("ArgumentNullException : LinearColors");
        }
        if (value.length < 2) {
          throw new Error("ArgumentException : The array is too small - LinearColors");
        }
        if (this.mColours == null && typeof this.mColours === "undefined") {
          this.mColours = [value[0], value[1]];
        } else {
          this.mColours[0] = value[0];
          this.mColours[1] = value[1];
        }
        if (this.mBlend == null && typeof this.mBlend === "undefined") {
          this.mColourBlend = new PdfColorBlend(2);
          this.mColourBlend.colors = this.mColours;
          this.mColourBlend.positions = [0, 1];
        } else {
          this.mColourBlend = this.mBlend.generateColorBlend(this.mColours, this.colorSpace);
        }
        this.resetFunction();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfLinearGradientBrush2.prototype, "rectangle", {
      /**
       * Gets a rectangular region that defines the boundaries of the gradient.
       * @public
       */
      get: function() {
        return this.mBoundaries;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfLinearGradientBrush2.prototype, "extend", {
      /**
       * Gets or sets the value indicating whether the gradient should extend starting and ending points.
       * @public
       */
      get: function() {
        var result = PdfExtend.None;
        var extend2 = this.shading.items.getValue(this.mDictionaryProperties.extend);
        if (extend2 != null) {
          var extStart = extend2.items(0);
          var extEnd = extend2.items(1);
          if (extStart.value) {
            result = result | PdfExtend.Start;
          }
          if (extEnd.value) {
            result = result | PdfExtend.End;
          }
        }
        return result;
      },
      set: function(value) {
        var extend2 = this.shading.items.getValue(this.mDictionaryProperties.extend);
        var extStart;
        var extEnd;
        if (extend2 == null) {
          extStart = new PdfBoolean(false);
          extEnd = new PdfBoolean(false);
          extend2 = new PdfArray();
          extend2.add(extStart);
          extend2.add(extEnd);
          this.shading.items.setValue(this.mDictionaryProperties.extend, extend2);
        } else {
          extStart = extend2.items(0);
          extEnd = extend2.items(1);
        }
      },
      enumerable: true,
      configurable: true
    });
    PdfLinearGradientBrush2.prototype.addPoints = function(point1, point2) {
      var x = point1.x + point2.x;
      var y = point1.y + point2.y;
      var result = new PointF(x, y);
      return result;
    };
    PdfLinearGradientBrush2.prototype.subPoints = function(point1, point2) {
      var x = point1.x - point2.x;
      var y = point1.y - point2.y;
      var result = new PointF(x, y);
      return result;
    };
    PdfLinearGradientBrush2.prototype.mulPoints = function(point1, point2) {
      var result = point1.x * point2.x + point1.y * point2.y;
      return result;
    };
    PdfLinearGradientBrush2.prototype.mulPoint = function(point, value) {
      point.x = point.x * value;
      point.y = point.y * value;
      return point;
    };
    PdfLinearGradientBrush2.prototype.choosePoint = function(angle) {
      var point = new PointF(0, 0);
      if (angle < 90 && angle > 0) {
        point = new PointF(this.mBoundaries.right, this.mBoundaries.bottom);
      } else if (angle < 180 && angle > 90) {
        point = new PointF(this.mBoundaries.left, this.mBoundaries.bottom);
      } else if (angle < 270 && angle > 180) {
        point = new PointF(this.mBoundaries.left, this.mBoundaries.top);
      } else if (angle > 270) {
        point = new PointF(this.mBoundaries.right, this.mBoundaries.top);
      } else {
        throw new Error("PdfException - Internal error.");
      }
      return point;
    };
    PdfLinearGradientBrush2.prototype.setPoints = function(point1, point2) {
      var points = new PdfArray();
      points.add(new PdfNumber(point1.x));
      points.add(new PdfNumber(this.updateY(point1.y)));
      points.add(new PdfNumber(point2.x));
      points.add(new PdfNumber(this.updateY(point2.y)));
      this.shading.items.setValue(this.mDictionaryProperties.coords, points);
    };
    PdfLinearGradientBrush2.prototype.updateY = function(y) {
      if (y !== 0) {
        return -y;
      } else {
        return y;
      }
    };
    PdfLinearGradientBrush2.prototype.initShading = function() {
      this.colorSpace = PdfColorSpace.Rgb;
      this.function = this.mColourBlend.getFunction(this.colorSpace);
      this.shading.items.setValue(this.mDictionaryProperties.shadingType, new PdfNumber(ShadingType.Axial));
    };
    PdfLinearGradientBrush2.prototype.clone = function() {
      var brush = this;
      brush.resetPatternDictionary(new PdfDictionary(this.patternDictionary));
      brush.shading = new PdfDictionary();
      brush.initShading();
      brush.setPoints(brush.mPointStart, brush.mPointEnd);
      if (brush !== null && brush instanceof PdfLinearGradientBrush2) {
        if (this.matrix != null && typeof this.matrix !== "undefined") {
          brush.matrix = this.matrix.clone();
        }
      }
      if (this.mColours != null && typeof this.mColours !== "undefined") {
        brush.mColours = this.mColours;
      }
      if (this.blend != null && typeof this.blend !== "undefined") {
        brush.blend = this.blend.clonePdfBlend();
      } else if (this.interpolationColors != null && typeof this.interpolationColors !== "undefined") {
        brush.interpolationColors = this.interpolationColors.cloneColorBlend();
      }
      brush.extend = this.extend;
      this.cloneBackgroundValue(brush);
      this.cloneAntiAliasingValue(brush);
      return brush;
    };
    PdfLinearGradientBrush2.prototype.resetFunction = function() {
      this.function = this.mColourBlend.getFunction(this.colorSpace);
    };
    return PdfLinearGradientBrush2;
  }(PdfGradientBrush)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/brushes/pdf-radial-gradient-brush.js
var __extends91 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfRadialGradientBrush = (
  /** @class */
  function(_super) {
    __extends91(PdfRadialGradientBrush2, _super);
    function PdfRadialGradientBrush2(centerStart, radiusStart, centerEnd, radiusEnd, colorStart, colorEnd) {
      var _this = _super.call(this, new PdfDictionary()) || this;
      _this.mDictionaryProperties = new DictionaryProperties();
      _this.initialize(colorStart, colorEnd);
      if (radiusStart < 0) {
        throw new Error("ArgumentOutOfRangeException : radiusStart - The radius cannot be less then zero.");
      }
      if (radiusEnd < 0) {
        throw new Error("ArgumentOutOfRangeException : radiusEnd - The radius cannpt be less then zero.");
      }
      _this.mPointEnd = centerEnd;
      _this.mPointStart = centerStart;
      _this.mRadiusStart = radiusStart;
      _this.mRadiusEnd = radiusEnd;
      _this.setPoints(_this.mPointStart, _this.mPointEnd, _this.mRadiusStart, _this.mRadiusEnd);
      return _this;
    }
    PdfRadialGradientBrush2.prototype.initialize = function(color1, color2) {
      this.mColour = [color1, color2];
      this.mColourBlends = new PdfColorBlend(2);
      this.mColourBlends.positions = [0, 1];
      this.mColourBlends.colors = this.mColour;
      this.initShading();
    };
    Object.defineProperty(PdfRadialGradientBrush2.prototype, "blend", {
      //Properties
      /**
       * Gets or sets a PdfBlend that specifies positions and factors that define a custom falloff for the gradient.
       * @public
       */
      get: function() {
        return this.mBlend;
      },
      set: function(value) {
        if (value == null) {
          throw new Error("ArgumentNullException : Blend");
        }
        if (this.mColour == null && typeof this.mColour === "undefined") {
          throw new Error("NotSupportedException : There is no starting and ending colours specified.");
        }
        this.mBlend = value;
        this.mColourBlends = this.mBlend.generateColorBlend(this.mColour, this.colorSpace);
        this.resetFunction();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfRadialGradientBrush2.prototype, "interpolationColors", {
      /**
       * Gets or sets a ColorBlend that defines a multicolor radial gradient.
       * @public
       */
      get: function() {
        return this.mColourBlends;
      },
      set: function(value) {
        if (value == null) {
          throw new Error("ArgumentNullException : InterpolationColors");
        }
        this.mBlend = null;
        this.mColour = null;
        this.mColourBlends = value;
        this.resetFunction();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfRadialGradientBrush2.prototype, "linearColors", {
      /**
       * Gets or sets the starting and ending colors of the radial gradient.
       * @public
       */
      get: function() {
        return this.mColour;
      },
      set: function(value) {
        if (value == null) {
          throw new Error("ArgumentNullException : radial LinearColors");
        }
        if (value.length < 2) {
          throw new Error("ArgumentException : The array is too small LinearColors");
        }
        if (this.mColour == null && typeof this.mColour === "undefined") {
          this.mColour = [value[0], value[1]];
        } else {
          this.mColour[0] = value[0];
          this.mColour[1] = value[1];
        }
        if (this.mBlend == null && typeof this.mBlend === "undefined") {
          this.mColourBlends = new PdfColorBlend(2);
          this.mColourBlends.colors = this.mColour;
          this.mColourBlends.positions = [0, 1];
        } else {
          this.mColourBlends = this.mBlend.generateColorBlend(this.mColour, this.colorSpace);
        }
        this.resetFunction();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfRadialGradientBrush2.prototype, "rectangle", {
      /**
       * Gets or sets the rectangle.
       * @public
       */
      get: function() {
        return this.mBoundaries;
      },
      set: function(value) {
        this.mBoundaries = value;
        this.bBox = PdfArray.fromRectangle(value);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfRadialGradientBrush2.prototype, "extend", {
      /**
       * Gets or sets the value indicating whether the gradient
       *  should extend starting and ending points.
       * @public
       */
      get: function() {
        var result1 = PdfExtend.None;
        var extend1 = this.shading.items.getValue(this.mDictionaryProperties.extend);
        if (extend1 !== null && typeof extend1 !== "undefined") {
          var extStart = extend1.items(0);
          var extEnd = extend1.items(1);
          if (extStart.value) {
            result1 = result1 | PdfExtend.Start;
          }
          if (extEnd.value) {
            result1 = result1 | PdfExtend.End;
          }
        }
        return result1;
      },
      set: function(value) {
        var extend2 = this.shading.items.getValue(this.mDictionaryProperties.extend);
        var extStart;
        var extEnd1;
        if (extend2 == null && typeof extend2 === "undefined") {
          extStart = new PdfBoolean(false);
          extEnd1 = new PdfBoolean(false);
          extend2 = new PdfArray();
          extend2.add(extStart);
          extend2.add(extEnd1);
          this.shading.items.setValue(this.mDictionaryProperties.extend, extend2);
        } else {
          extStart = extend2.items(0);
          extEnd1 = extend2.items(1);
        }
      },
      enumerable: true,
      configurable: true
    });
    PdfRadialGradientBrush2.prototype.setPoints = function(pointStart, pointEnd, radiusStart, radiusEnd) {
      var points = new PdfArray();
      points.add(new PdfNumber(pointStart.x));
      points.add(new PdfNumber(this.updateY(pointStart.y)));
      points.add(new PdfNumber(radiusStart));
      points.add(new PdfNumber(pointEnd.x));
      points.add(new PdfNumber(this.updateY(pointEnd.y)));
      if (radiusStart !== radiusEnd) {
        points.add(new PdfNumber(radiusEnd));
      } else {
        points.add(new PdfNumber(0));
      }
      this.shading.items.setValue(this.mDictionaryProperties.coords, points);
    };
    PdfRadialGradientBrush2.prototype.updateY = function(y) {
      if (y !== 0) {
        return -y;
      } else {
        return y;
      }
    };
    PdfRadialGradientBrush2.prototype.initShading = function() {
      this.colorSpace = PdfColorSpace.Rgb;
      this.function = this.mColourBlends.getFunction(this.colorSpace);
      this.shading.items.setValue(this.mDictionaryProperties.shadingType, new PdfNumber(ShadingType.Radial));
    };
    PdfRadialGradientBrush2.prototype.clone = function() {
      var rBrush = this;
      rBrush.resetPatternDictionary(new PdfDictionary(this.patternDictionary));
      rBrush.shading = new PdfDictionary();
      rBrush.initShading();
      rBrush.setPoints(this.mPointStart, this.mPointEnd, this.mRadiusStart, this.mRadiusEnd);
      if (rBrush instanceof PdfRadialGradientBrush2) {
        if (this.matrix !== null && typeof this.matrix !== "undefined") {
          rBrush.matrix = this.matrix.clone();
        }
      }
      if (this.mColour !== null && typeof this.mColour !== "undefined") {
        rBrush.mColour = this.mColour;
      }
      if (this.blend !== null && typeof this.blend !== "undefined") {
        rBrush.blend = this.blend.clonePdfBlend();
      } else if (this.interpolationColors !== null && typeof this.interpolationColors !== "undefined") {
        rBrush.interpolationColors = this.interpolationColors.cloneColorBlend();
      }
      rBrush.extend = this.extend;
      this.cloneBackgroundValue(rBrush);
      this.cloneAntiAliasingValue(rBrush);
      return rBrush;
    };
    PdfRadialGradientBrush2.prototype.resetFunction = function() {
      this.function = this.mColourBlends.getFunction(this.colorSpace);
    };
    return PdfRadialGradientBrush2;
  }(PdfGradientBrush)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/base/shape-layouter.js
var __extends92 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ShapeLayouter = (
  /** @class */
  function(_super) {
    __extends92(ShapeLayouter2, _super);
    function ShapeLayouter2(element2) {
      var _this = _super.call(this, element2) || this;
      _this.olderPdfForm = 0;
      _this.shapeBounds = new RectangleF();
      _this.totalPageSize = 0;
      return _this;
    }
    Object.defineProperty(ShapeLayouter2.prototype, "element", {
      // Properties
      /**
       * Gets shape element.
       * @private
       */
      get: function() {
        return this.elements;
      },
      enumerable: true,
      configurable: true
    });
    ShapeLayouter2.prototype.layoutInternal = function(param) {
      var currentPage = param.page;
      var currentBounds = param.bounds;
      var shapeLayoutBounds = this.element.getBounds();
      shapeLayoutBounds.x = 0;
      shapeLayoutBounds.y = 0;
      var isEmpty = this.shapeBounds.x === this.shapeBounds.y && this.shapeBounds.y === this.shapeBounds.width && this.shapeBounds.width === this.shapeBounds.height && this.shapeBounds.height === 0 ? true : false;
      if (this.isPdfGrid && !isEmpty) {
        shapeLayoutBounds = this.shapeBounds;
      }
      var result = null;
      var pageResult = new ShapeLayoutResult();
      pageResult.page = currentPage;
      while (true) {
        var result1 = this.raiseBeforePageLayout(currentPage, currentBounds);
        currentBounds = result1.currentBounds;
        var endArgs = null;
        if (!result1.cancel) {
          pageResult = this.layoutOnPage(currentPage, currentBounds, shapeLayoutBounds, param);
          endArgs = this.raiseEndPageLayout(pageResult);
          result1.cancel = endArgs === null ? false : endArgs.cancel;
        }
        if (!pageResult.end && !result1.cancel) {
          currentBounds = this.getPaginateBounds(param);
          shapeLayoutBounds = this.getNextShapeBounds(shapeLayoutBounds, pageResult);
          currentPage = endArgs === null || endArgs.nextPage === null ? this.getNextPage(currentPage) : endArgs.nextPage;
          if (this.isPdfGrid) {
            result = this.getLayoutResult(pageResult);
            break;
          }
        } else {
          result = this.getLayoutResult(pageResult);
          break;
        }
      }
      return result;
    };
    ShapeLayouter2.prototype.raiseBeforePageLayout = function(currentPage, currentBounds) {
      var cancel = false;
      if (this.element.raiseBeginPageLayout) {
        var args = new BeginPageLayoutEventArgs(currentBounds, currentPage);
        this.element.onBeginPageLayout(args);
        cancel = args.cancel;
        currentBounds = args.bounds;
      }
      return {
        currentBounds,
        cancel
      };
    };
    ShapeLayouter2.prototype.raiseEndPageLayout = function(pageResult) {
      var args = null;
      if (this.element.raiseEndPageLayout) {
        var res = this.getLayoutResult(pageResult);
        args = new EndPageLayoutEventArgs(res);
        this.element.onEndPageLayout(args);
      }
      return args;
    };
    ShapeLayouter2.prototype.getLayoutResult = function(pageResult) {
      var result = new PdfLayoutResult(pageResult.page, pageResult.bounds);
      return result;
    };
    ShapeLayouter2.prototype.getNextShapeBounds = function(shapeLayoutBounds, pageResult) {
      var layoutedBounds = pageResult.bounds;
      shapeLayoutBounds.y = shapeLayoutBounds.y + layoutedBounds.height;
      shapeLayoutBounds.height = shapeLayoutBounds.height - layoutedBounds.height;
      return shapeLayoutBounds;
    };
    ShapeLayouter2.prototype.layoutOnPage = function(currentPage, curBounds, sBounds, param) {
      var result = new ShapeLayoutResult();
      curBounds = this.checkCorrectCurrentBounds(currentPage, curBounds, param);
      var fitToPage = this.fitsToBounds(curBounds, sBounds);
      var canDraw = !(param.format.break === PdfLayoutBreakType.FitElement && !fitToPage && currentPage === param.page);
      var shapeFinished = false;
      if (canDraw) {
        var drawRectangle = this.getDrawBounds(curBounds, sBounds);
        this.drawShape(currentPage.graphics, curBounds, drawRectangle);
        result.bounds = this.getPageResultBounds(curBounds, sBounds);
        shapeFinished = curBounds.height >= sBounds.height;
      }
      result.end = shapeFinished || param.format.layout === PdfLayoutType.OnePage;
      result.page = currentPage;
      return result;
    };
    ShapeLayouter2.prototype.getDrawBounds = function(currentBounds, shapeLayoutBounds) {
      var result = currentBounds;
      result.y = result.y - shapeLayoutBounds.y;
      result.height = result.height + shapeLayoutBounds.y;
      return result;
    };
    ShapeLayouter2.prototype.drawShape = function(g, currentBounds, drawRectangle) {
      var gState = g.save();
      try {
        g.setClip(currentBounds);
        this.element.drawGraphicsHelper(g, new PointF(drawRectangle.x, drawRectangle.y));
      } finally {
        g.restore(gState);
      }
    };
    ShapeLayouter2.prototype.checkCorrectCurrentBounds = function(currentPage, curBounds, param) {
      var pageSize = currentPage.graphics.clientSize;
      curBounds.width = curBounds.width > 0 ? curBounds.width : pageSize.width - curBounds.x;
      curBounds.height = curBounds.height > 0 ? curBounds.height : pageSize.height - curBounds.y;
      if (this.isPdfGrid) {
        curBounds.height = curBounds.height - this.bottomCellPadding;
      }
      return curBounds;
    };
    ShapeLayouter2.prototype.getPageResultBounds = function(currentBounds, shapeLayoutBounds) {
      var result = currentBounds;
      result.height = Math.min(result.height, shapeLayoutBounds.height);
      return result;
    };
    ShapeLayouter2.prototype.fitsToBounds = function(currentBounds, shapeLayoutBounds) {
      var fits = shapeLayoutBounds.height <= currentBounds.height;
      return fits;
    };
    ShapeLayouter2.index = 0;
    ShapeLayouter2.splitDiff = 0;
    ShapeLayouter2.last = false;
    ShapeLayouter2.borderWidth = 0;
    return ShapeLayouter2;
  }(ElementLayouter)
);
var ShapeLayoutResult = (
  /** @class */
  /* @__PURE__ */ function() {
    function ShapeLayoutResult2() {
    }
    return ShapeLayoutResult2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/base/pdf-shape-element.js
var __extends93 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfShapeElement = (
  /** @class */
  function(_super) {
    __extends93(PdfShapeElement2, _super);
    function PdfShapeElement2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    PdfShapeElement2.prototype.getBounds = function() {
      var rect = this.getBoundsInternal();
      return rect;
    };
    PdfShapeElement2.prototype.drawGraphicsHelper = function(graphics, location2) {
      if (graphics == null) {
        throw new Error("ArgumentNullException :graphics");
      }
      this.drawShapeHelper(graphics, location2.x, location2.y);
    };
    PdfShapeElement2.prototype.drawShapeHelper = function(graphics, x, y) {
      var bNeedSave = x !== 0.5 || y !== 0.5;
      var gState = null;
      if (bNeedSave) {
        gState = graphics.save();
        graphics.translateTransform(x, y);
      }
      this.drawInternal(graphics);
      if (bNeedSave) {
        graphics.restore(gState);
      }
    };
    PdfShapeElement2.prototype.layout = function(param) {
      var layouter = new ShapeLayouter(this);
      var result = layouter.layout(param);
      return result;
    };
    return PdfShapeElement2;
  }(PdfLayoutElement)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/base/draw-element.js
var __extends94 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfDrawElement = (
  /** @class */
  function(_super) {
    __extends94(PdfDrawElement2, _super);
    function PdfDrawElement2(pen) {
      var _this = _super.call(this) || this;
      if (typeof pen !== "undefined") {
        _this.mpen = pen;
      }
      return _this;
    }
    Object.defineProperty(PdfDrawElement2.prototype, "pen", {
      // Properties
      /**
       * Gets or sets a pen that will be used to draw the element.
       * @public
       */
      get: function() {
        return this.mpen;
      },
      set: function(value) {
        this.mpen = value;
      },
      enumerable: true,
      configurable: true
    });
    return PdfDrawElement2;
  }(PdfShapeElement)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/base/fill-element.js
var __extends95 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfFillElement = (
  /** @class */
  function(_super) {
    __extends95(PdfFillElement2, _super);
    function PdfFillElement2(arg1, arg2) {
      var _this = _super.call(this) || this;
      _this.mbrush = null;
      if (typeof arg1 === "undefined") {
      } else if (arg1 instanceof PdfPen) {
        _this = _super.call(this, arg1) || this;
      } else {
        _this.mbrush = arg2;
      }
      return _this;
    }
    Object.defineProperty(PdfFillElement2.prototype, "brush", {
      // Properties
      /**
       * Gets or sets a brush of the element.
       * @public
       */
      get: function() {
        return this.mbrush;
      },
      set: function(value) {
        this.mbrush = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfFillElement2.prototype.obtainPen = function() {
      return this.mbrush == null && this.pen == null ? new PdfPen(new PdfColor(0, 0, 0)) : this.pen;
    };
    return PdfFillElement2;
  }(PdfDrawElement)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/path.js
var __extends96 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfPath = (
  /** @class */
  function(_super) {
    __extends96(PdfPath2, _super);
    function PdfPath2(arg1, arg2, arg3, arg4) {
      var _this = _super.call(this) || this;
      _this.mpoints = null;
      _this.mpathTypes = null;
      _this.mStartFigure = true;
      _this.mfillMode = PdfFillMode.Alternate;
      _this.isBeziers3 = false;
      _this.isXps = false;
      if (typeof arg1 === "undefined") {
      } else if (arg1 instanceof PdfPen) {
        _this = _super.call(this, arg1) || this;
        if (arg2 instanceof PdfBrush) {
          _this = _super.call(this, arg1, arg2) || this;
          _this.fillMode = arg3;
        } else if (arg2 !== null && typeof arg2 !== "undefined" && arg3 !== null && typeof arg3 !== "undefined") {
          _this.addPath(arg2, arg3);
        }
      } else if (arg1 instanceof PdfBrush) {
        _this = _super.call(this, arg1) || this;
        if (arg2 !== null && typeof arg2 !== "undefined") {
          _this.fillMode = arg2;
        }
        if (arg3 !== null && typeof arg3 !== "undefined" && arg4 !== null && typeof arg4 !== "undefined") {
          _this.addPath(arg3, arg4);
        }
      } else {
        _this.addPath(arg1, arg2);
      }
      return _this;
    }
    Object.defineProperty(PdfPath2.prototype, "fillMode", {
      // Properties
      /**
       * Gets or sets the fill mode.
       * @public
       */
      get: function() {
        return this.mfillMode;
      },
      set: function(value) {
        this.mfillMode = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPath2.prototype, "pathPoints", {
      /**
       * Gets the path points.
       * @public
       */
      get: function() {
        return this.points;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPath2.prototype, "pathTypes", {
      /**
       * Gets the path point types.
       * @public
       */
      get: function() {
        return this.types;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPath2.prototype, "pointCount", {
      /**
       * Gets the point count.
       * @public
       */
      get: function() {
        var count = 0;
        if (this.mpoints != null) {
          count = this.mpoints.length;
        }
        return count;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPath2.prototype, "lastPoint", {
      /**
       * Gets the last points.
       * @public
       */
      get: function() {
        return this.getLastPoint();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPath2.prototype, "points", {
      /**
       * Gets the points list.
       * @private
       */
      get: function() {
        if (this.mpoints == null) {
          this.mpoints = [];
        }
        return this.mpoints;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPath2.prototype, "types", {
      /**
       * Gets the types.
       * @private
       */
      get: function() {
        if (this.mpathTypes == null) {
          this.mpathTypes = [];
        }
        return this.mpathTypes;
      },
      enumerable: true,
      configurable: true
    });
    PdfPath2.prototype.draw = function(arg1, arg2, arg3, arg4) {
      if (arg2 instanceof PointF && typeof arg2.width === "undefined" && typeof arg3 === "undefined") {
        return this.drawHelper(arg1, arg2.x, arg2.y);
      } else if (arg2 instanceof RectangleF && typeof arg2.width !== "undefined" && typeof arg3 === "undefined") {
        return this.drawHelper(arg1, arg2, null);
      } else if (typeof arg2 === "number" && typeof arg3 === "number" && typeof arg4 === "undefined") {
        return this.drawHelper(arg1, arg2, arg3, null);
      } else if (arg2 instanceof PointF && arg3 instanceof PdfLayoutFormat) {
        return this.drawHelper(arg1, arg2.x, arg2.y, arg3);
      } else if (typeof arg2 === "number" && (arg4 instanceof PdfLayoutFormat || arg4 == null) && typeof arg3 === "number") {
        var widthValue = arg1.graphics.clientSize.width - arg2;
        var layoutRect = new RectangleF(arg2, arg3, widthValue, 0);
        return this.drawHelper(arg1, layoutRect, arg4);
      } else if (arg2 instanceof RectangleF && arg3 instanceof PdfLayoutFormat) {
        return this.drawHelper(arg1, arg2, arg3);
      } else {
        return this.drawHelper(arg1, arg2, arg3);
      }
    };
    PdfPath2.prototype.addArc = function(arg1, arg2, arg3, arg4, arg5, arg6) {
      if (arg1 instanceof RectangleF) {
        this.addArc(arg1.x, arg1.y, arg1.width, arg1.height, arg2, arg3);
      } else {
        var points = this.getBezierArcPoints(arg1, arg2, arg2 + arg3, arg2 + arg4, arg5, arg6);
        for (var i = 0; i < points.length; i = i + 8) {
          var point = [points[i], points[i + 1], points[i + 2], points[i + 3], points[i + 4], points[i + 5], points[i + 6], points[i + 7]];
          this.addPoints(point, PathPointType.Bezier3);
        }
      }
    };
    PdfPath2.prototype.addBezier = function(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
      if (arg1 instanceof PointF && arg2 instanceof PointF && arg3 instanceof PointF && arg4 instanceof PointF) {
        this.addBezier(arg1.x, arg1.y, arg2.x, arg2.y, arg3.x, arg3.y, arg4.x, arg4.y);
      } else {
        var points = [];
        points.push(arg1);
        points.push(arg2);
        points.push(arg3);
        points.push(arg4);
        points.push(arg5);
        points.push(arg6);
        points.push(arg7);
        points.push(arg8);
        this.addPoints(points, PathPointType.Bezier3);
      }
    };
    PdfPath2.prototype.addEllipse = function(arg1, arg2, arg3, arg4) {
      if (arg1 instanceof RectangleF) {
        this.addEllipse(arg1.x, arg1.y, arg1.width, arg1.height);
      } else {
        this.startFigure();
        this.addArc(arg1, arg2, arg3, arg4, 0, 360);
        this.closeFigure();
      }
    };
    PdfPath2.prototype.addLine = function(arg1, arg2, arg3, arg4) {
      if (arg1 instanceof PointF && arg2 instanceof PointF) {
        this.addLine(arg1.x, arg1.y, arg2.x, arg2.y);
      } else {
        var points = [];
        points.push(arg1);
        points.push(arg2);
        points.push(arg3);
        points.push(arg4);
        this.addPoints(points, PathPointType.Line);
      }
    };
    PdfPath2.prototype.addPath = function(arg1, arg2) {
      if (arg1 instanceof PdfPath2) {
        this.addPath(arg1.pathPoints, arg1.pathTypes);
      } else {
        if (arg1 == null) {
          throw new Error("ArgumentNullException:pathPoints");
        }
        if (arg2 == null) {
          throw new Error("ArgumentNullException:pathTypes");
        }
        var count = arg1.length;
        if (count !== arg2.length) {
          throw new Error("The argument arrays should be of equal length.");
        }
      }
    };
    PdfPath2.prototype.addPie = function(arg1, arg2, arg3, arg4, arg5, arg6) {
      if (arg1 instanceof RectangleF) {
        this.addPie(arg1.x, arg1.y, arg1.width, arg1.height, arg2, arg3);
      } else {
        this.startFigure();
        this.addArc(arg1, arg2, arg3, arg4, arg5, arg6);
        this.addPoint(new PointF(arg1 + arg3 / 2, arg2 + arg4 / 2), PathPointType.Line);
        this.closeFigure();
      }
    };
    PdfPath2.prototype.addPolygon = function(points) {
      var count = points.length * 2;
      var p = [];
      this.startFigure();
      for (var i = 0; i < points.length; i++) {
        p.push(points[i].x);
        p.push(points[i].y);
      }
      this.addPoints(p, PathPointType.Line);
      this.closeFigure();
    };
    PdfPath2.prototype.addRectangle = function(arg1, y, width, height) {
      if (arg1 instanceof RectangleF) {
        this.addRectangle(arg1.x, arg1.y, arg1.width, arg1.height);
      } else {
        var points = [];
        this.startFigure();
        points.push(arg1);
        points.push(y);
        points.push(arg1 + width);
        points.push(y);
        points.push(arg1 + width);
        points.push(y + height);
        points.push(arg1);
        points.push(y + height);
        this.addPoints(points, PathPointType.Line);
        this.closeFigure();
      }
    };
    PdfPath2.prototype.startFigure = function() {
      this.mStartFigure = true;
    };
    PdfPath2.prototype.closeAllFigures = function() {
      var startPath = this.pathPoints[0];
      for (var i = 0; i < this.mpathTypes.length; i++) {
        var pt = this.types[i];
        var flag = false;
        if (i !== 0 && pt === PathPointType.Start) {
          this.closeFigure(i - 1);
          flag = true;
        } else if (i === this.mpathTypes.length - 1 && !flag && this.isXps) {
          if (startPath.x === this.pathPoints[i].y) {
            this.closeFigure(i);
          }
        }
      }
    };
    PdfPath2.prototype.getLastPoint = function() {
      var lastPoint = new PointF(0, 0);
      var count = this.pointCount;
      if (count > 0 && this.mpoints != null) {
        lastPoint.x = this.mpoints[count - 1].x;
        lastPoint.y = this.mpoints[count - 1].y;
      }
      return lastPoint;
    };
    PdfPath2.prototype.getBezierArcPoints = function(x1, y1, x2, y2, s1, e1) {
      if (x1 > x2) {
        var tmp = void 0;
        tmp = x1;
        x1 = x2;
        x2 = tmp;
      }
      if (y2 > y1) {
        var tmp = void 0;
        tmp = y1;
        y1 = y2;
        y2 = tmp;
      }
      var fragAngle;
      var numFragments;
      if (Math.abs(e1) <= 90) {
        fragAngle = e1;
        numFragments = 1;
      } else {
        numFragments = Math.ceil(Math.abs(e1) / 90);
        fragAngle = e1 / numFragments;
      }
      var xcen = (x1 + x2) / 2;
      var ycen = (y1 + y2) / 2;
      var rx = (x2 - x1) / 2;
      var ry = (y2 - y1) / 2;
      var halfAng = fragAngle * (Math.PI / 360);
      var kappa = Math.abs(4 / 3 * (1 - Math.cos(halfAng)) / Math.sin(halfAng));
      var pointList = [];
      for (var i = 0; i < numFragments; i++) {
        var theta0 = (s1 + i * fragAngle) * (Math.PI / 180);
        var theta1 = (s1 + (i + 1) * fragAngle) * (Math.PI / 180);
        var cos0 = Math.cos(theta0);
        var cos1 = Math.cos(theta1);
        var sin0 = Math.sin(theta0);
        var sin1 = Math.sin(theta1);
        if (fragAngle > 0) {
          pointList.push(xcen + rx * cos0, ycen - ry * sin0, xcen + rx * (cos0 - kappa * sin0), ycen - ry * (sin0 + kappa * cos0), xcen + rx * (cos1 + kappa * sin1), ycen - ry * (sin1 - kappa * cos1), xcen + rx * cos1, ycen - ry * sin1);
        } else {
          pointList.push(xcen + rx * cos0, ycen - ry * sin0, xcen + rx * (cos0 + kappa * sin0), ycen - ry * (sin0 - kappa * cos0), xcen + rx * (cos1 - kappa * sin1), ycen - ry * (sin1 + kappa * cos1), xcen + rx * cos1, ycen - ry * sin1);
        }
      }
      return pointList;
    };
    PdfPath2.prototype.getBoundsInternal = function() {
      var points = this.pathPoints;
      var bounds = new RectangleF(0, 0, 0, 0);
      if (points.length > 0) {
        var xmin = points[0].x;
        var xmax = points[0].x;
        var ymin = points[0].y;
        var ymax = points[0].y;
        for (var i = 1; i < points.length; i++) {
          var point = points[i];
          xmin = Math.min(point.x, xmin);
          xmax = Math.max(point.x, xmax);
          ymin = Math.min(point.y, ymin);
          ymax = Math.max(point.y, ymax);
        }
        bounds = new RectangleF(xmin, ymin, xmax - xmin, ymax - ymin);
      }
      return bounds;
    };
    PdfPath2.prototype.drawInternal = function(graphics) {
      if (graphics == null) {
        throw new Error("ArgumentNullException :graphics");
      }
      graphics.drawPath(this.obtainPen(), this.brush, this);
    };
    PdfPath2.prototype.addPoints = function(points, pointType, startIndex, endIndex) {
      if (typeof startIndex === "undefined" && typeof endIndex === "undefined") {
        this.addPoints(points, pointType, 0, points.length);
      } else {
        for (var i = startIndex; i < endIndex; i++) {
          var point = new PointF(points[i], points[i + 1]);
          if (i === startIndex) {
            if (this.pointCount <= 0 || this.mStartFigure) {
              this.addPoint(point, PathPointType.Start);
              this.mStartFigure = false;
            } else if (point.x !== this.lastPoint.x && point.y !== this.lastPoint.y && !this.isBeziers3) {
              this.addPoint(point, PathPointType.Line);
            } else if (point.x !== this.lastPoint.x && point.y !== this.lastPoint.y) {
              this.addPoint(point, PathPointType.Bezier3);
            }
          } else {
            this.addPoint(point, pointType);
          }
          i++;
        }
      }
    };
    PdfPath2.prototype.addPoint = function(point, pointType) {
      this.points.push(point);
      this.types.push(pointType);
    };
    PdfPath2.prototype.closeFigure = function(index) {
      if (typeof index === "undefined") {
        if (this.pointCount > 0) {
          this.closeFigure(this.pointCount - 1);
        }
        this.startFigure();
      } else {
        if (index < 0) {
          throw new Error("IndexOutOfRangeException()");
        }
        var pt = this.types[index];
        pt = pt | PathPointType.CloseSubpath;
        this.types[index] = pt;
      }
    };
    return PdfPath2;
  }(PdfFillElement)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/rectangle-area.js
var __extends97 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfRectangleArea = (
  /** @class */
  function(_super) {
    __extends97(PdfRectangleArea2, _super);
    function PdfRectangleArea2(arg1, arg2, arg3, arg4, arg5, arg6) {
      var _this = _super.call(this) || this;
      _this.bounds = new RectangleF(0, 0, 0, 0);
      if (typeof arg1 === "undefined") {
      } else if (arg1 instanceof PdfPen) {
        _this = _super.call(this, arg1, arg2) || this;
        if (arg3 instanceof RectangleF) {
          _this.bounds = arg3;
        } else {
          _this.bounds = new RectangleF(arg3, arg4, arg5, arg6);
        }
      } else if (arg1 instanceof RectangleF) {
        _this.bounds = arg1;
      } else {
        _this.bounds = new RectangleF(arg1, arg2, arg3, arg4);
      }
      return _this;
    }
    Object.defineProperty(PdfRectangleArea2.prototype, "x", {
      //Properties
      /**
       * Gets or sets the X co-ordinate of the upper-left corner of this the element.
       * @public
       */
      get: function() {
        return this.bounds.x;
      },
      set: function(value) {
        this.bounds.x = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfRectangleArea2.prototype, "y", {
      /**
       * Gets or sets the Y co-ordinate of the upper-left corner of this the element.
       * @public
       */
      get: function() {
        return this.bounds.y;
      },
      set: function(value) {
        this.bounds.y = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfRectangleArea2.prototype, "width", {
      /**
       * Gets or sets the width of this element.
       * @public
       */
      get: function() {
        return this.bounds.width;
      },
      set: function(value) {
        this.bounds.width = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfRectangleArea2.prototype, "height", {
      /**
       * Gets or sets the height of this element.
       * @public
       */
      get: function() {
        return this.bounds.height;
      },
      set: function(value) {
        this.bounds.height = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfRectangleArea2.prototype.getBoundsInternal = function() {
      return this.bounds;
    };
    return PdfRectangleArea2;
  }(PdfFillElement)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/ellipse-part.js
var __extends98 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfEllipsePart = (
  /** @class */
  function(_super) {
    __extends98(PdfEllipsePart2, _super);
    function PdfEllipsePart2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
      var _this = _super.call(this) || this;
      _this.startAngle = 0;
      _this.sweepAngle = 0;
      if (typeof arg1 === "undefined") {
      } else if (arg1 instanceof RectangleF && typeof arg2 !== "undefined" && typeof arg3 !== "undefined") {
        _this = _super.call(this, arg1) || this;
        _this.startAngle = arg2;
        _this.sweepAngle = arg3;
      } else if (arg1 instanceof PdfPen) {
        if (arg3 instanceof RectangleF) {
          _this = _super.call(this, arg1, arg2, arg3) || this;
          _this.startAngle = arg4;
          _this.sweepAngle = arg5;
        } else {
          _this = _super.call(this, arg1, arg2, arg3, arg4, arg5, arg6) || this;
          _this.startAngle = arg7;
          _this.sweepAngle = arg8;
        }
      } else {
        _this = _super.call(this, arg1, arg2, arg3, arg4) || this;
        _this.startAngle = arg5;
        _this.sweepAngle = arg6;
      }
      return _this;
    }
    return PdfEllipsePart2;
  }(PdfRectangleArea)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/arc.js
var __extends99 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfArc = (
  /** @class */
  function(_super) {
    __extends99(PdfArc2, _super);
    function PdfArc2(arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
      var _this = this;
      if (typeof arg1 === "undefined") {
        _this = _super.call(this) || this;
      } else if (arg1 instanceof RectangleF) {
        _this = _super.call(this, arg1, arg2, arg3) || this;
      } else if (arg1 instanceof PdfPen) {
        if (arg2 instanceof RectangleF) {
          _this = _super.call(this, arg1, null, arg2, arg3, arg4) || this;
        } else if (typeof arg6 === "undefined" && typeof arg7 === "undefined") {
          _this = _super.call(this, arg1, null, 0, 0, arg2, arg3, arg4, arg5) || this;
        } else if (typeof arg6 !== "undefined" && typeof arg7 !== "undefined") {
          _this = _super.call(this, arg1, null, arg2, arg3, arg4, arg5, arg6, arg7) || this;
        }
      } else if (typeof arg1 !== "undefined" && typeof arg5 === "undefined" && typeof arg6 === "undefined") {
        _this = _super.call(this, 0, 0, arg1, arg2, arg3, arg4) || this;
      } else if (typeof arg1 !== "undefined" && typeof arg5 !== "undefined" && typeof arg6 !== "undefined") {
        _this = _super.call(this, arg1, arg2, arg3, arg4, arg5, arg6) || this;
      }
      return _this;
    }
    PdfArc2.prototype.draw = function(argu1, arg2, arg3, arg4) {
      if (arg2 instanceof PointF && typeof arg2.width === "undefined" && typeof arg3 === "undefined") {
        return this.drawHelper(argu1, arg2.x, arg2.y);
      } else if (arg2 instanceof RectangleF && typeof arg2.width !== "undefined" && typeof arg3 === "undefined") {
        return this.drawHelper(argu1, arg2, null);
      } else if (typeof arg2 === "number" && typeof arg3 === "number" && typeof arg4 === "undefined") {
        return this.drawHelper(argu1, arg2, arg3, null);
      } else if (arg2 instanceof PointF && arg3 instanceof PdfLayoutFormat) {
        return this.drawHelper(argu1, arg2.x, arg2.y, arg3);
      } else if (typeof arg2 === "number" && (arg4 instanceof PdfLayoutFormat || arg4 == null) && typeof arg3 === "number") {
        var widthValue = argu1.graphics.clientSize.width - arg2;
        var layoutRect = new RectangleF(arg2, arg3, widthValue, 0);
        return this.drawHelper(argu1, layoutRect, arg4);
      } else {
        return this.drawHelper(argu1, arg2, arg3);
      }
    };
    PdfArc2.prototype.drawInternal = function(graphics) {
      if (graphics == null) {
        throw new Error("ArgumentNullException : graphics");
      }
      graphics.drawArc(this.obtainPen(), this.bounds, this.startAngle, this.sweepAngle);
    };
    return PdfArc2;
  }(PdfEllipsePart)
);

export {
  Query,
  Predicate,
  DataUtil,
  JsonAdaptor,
  UrlAdaptor,
  ODataAdaptor,
  ODataV4Adaptor,
  WebApiAdaptor,
  WebMethodAdaptor,
  RemoteSaveAdaptor,
  CacheAdaptor,
  DataManager,
  Deferred,
  calculateRelativeBasedPosition,
  calculatePosition,
  isCollide,
  Popup,
  getScrollableParent,
  getZindexPartial,
  createCheckBox,
  Button,
  CheckBox,
  RadioButton,
  Switch,
  Dialog,
  Tooltip,
  createSpinner,
  showSpinner,
  hideSpinner,
  Input,
  NumericTextBox,
  MaskedTextBox,
  FormValidator,
  Uploader,
  DropDownButton,
  SplitButton,
  ColorPicker,
  TextBox,
  cssClass,
  ListBase,
  ListView,
  Sortable,
  moveTo,
  MenuItem,
  Item2 as Item,
  Toolbar,
  Accordion,
  ContextMenu,
  Menu,
  Tab,
  TreeView,
  DatePicker,
  DateRangePicker,
  TimePicker,
  DateTimePicker,
  MaskedDateTime,
  Save,
  Workbook,
  PdfVerticalAlignment,
  PdfTextAlignment,
  PdfLineCap,
  PdfDashStyle,
  PdfColor,
  PointF,
  SizeF,
  RectangleF,
  PdfSolidBrush,
  PdfFontStyle,
  PdfFontFamily,
  PdfWordWrapType,
  PdfStringFormat,
  PdfStringLayouter,
  PdfPageOrientation,
  PdfPageSettings,
  PdfPen,
  PdfImage,
  PdfBitmap,
  PdfLayoutType,
  PdfLayoutBreakType,
  PdfPage,
  PdfDocument,
  PdfStandardFont,
  ElementLayouter,
  PdfLayoutFormat,
  PdfLayoutResult,
  PdfBorders,
  PdfPaddings,
  PdfLayoutElement,
  PdfTextWebLink,
  PdfPageNumberField,
  PdfCompositeField,
  PdfPageCountField,
  PdfBrushes,
  PdfLinearGradientBrush,
  PdfBorderOverlapStyle,
  PdfGrid,
  PdfGridLayoutFormat,
  RowLayoutResult,
  PdfPath,
  PdfTrueTypeFont,
  PdfPageTemplateElement
};
//# sourceMappingURL=chunk-LIV5E5HL.js.map
