import {
  AccumulationChart,
  AccumulationDataLabel,
  AccumulationLegend,
  AccumulationTooltip,
  AreaSeries,
  BarSeries,
  BubbleSeries,
  Category,
  Chart,
  ColumnSeries,
  Crosshair,
  DataLabel,
  Export,
  FunnelSeries,
  Legend,
  LineSeries,
  MultiColoredAreaSeries,
  MultiColoredLineSeries,
  MultiLevelLabel,
  ParetoSeries,
  PieSeries,
  PolarSeries,
  PyramidSeries,
  RadarSeries,
  RangeAreaSeries,
  RangeColumnSeries,
  ScatterSeries,
  ScrollBar,
  Selection as Selection2,
  SplineAreaSeries,
  SplineSeries,
  StackingAreaSeries,
  StackingBarSeries,
  StackingColumnSeries,
  StackingLineSeries,
  StepAreaSeries,
  StepLineSeries,
  StripLine,
  Tooltip as Tooltip2,
  Zoom,
  getSeriesColor,
  titleSettings
} from "./chunk-DIHZL7EQ.js";
import {
  CheckBoxSelection,
  ColumnChooser,
  CommandColumn,
  ContextMenu as ContextMenu2,
  DropDownList,
  Edit,
  ExcelExport,
  Freeze,
  Grid,
  MultiSelect,
  Page,
  Pager,
  PdfExport,
  Reorder,
  Resize,
  Selection,
  Toolbar as Toolbar2,
  VirtualScroll,
  getObject,
  getScrollBarWidth,
  headerRefreshed,
  setStyleAndAttributes
} from "./chunk-SOHG4NXT.js";
import {
  SvgRenderer
} from "./chunk-JYQ5LDSI.js";
import {
  Accordion,
  Button,
  CheckBox,
  ColorPicker,
  ContextMenu,
  DataManager,
  DateTimePicker,
  Deferred,
  Dialog,
  DropDownButton,
  MaskedTextBox,
  Menu,
  NumericTextBox,
  PdfBitmap,
  PdfBorders,
  PdfColor,
  PdfCompositeField,
  PdfDocument,
  PdfFontFamily,
  PdfFontStyle,
  PdfGrid,
  PdfPageCountField,
  PdfPageNumberField,
  PdfPageOrientation,
  PdfPageTemplateElement,
  PdfPen,
  PdfSolidBrush,
  PdfStandardFont,
  PdfStringFormat,
  PdfTextAlignment,
  PdfVerticalAlignment,
  PointF,
  Query,
  RadioButton,
  RectangleF,
  Save,
  SizeF,
  Tab,
  TextBox,
  Toolbar,
  Tooltip,
  TreeView,
  Workbook,
  createSpinner,
  hideSpinner,
  showSpinner
} from "./chunk-LIV5E5HL.js";
import {
  ComponentBase,
  ComponentMixins,
  Template,
  setValue as setValue2
} from "./chunk-CDRQPQ4F.js";
import {
  Ajax,
  Browser,
  ChildProperty,
  Collection,
  Complex,
  Component as Component2,
  Draggable,
  Droppable,
  Event,
  EventHandler,
  Fetch,
  Internationalization,
  KeyboardEvents,
  L10n,
  NotifyPropertyChanges,
  Property,
  SanitizeHtmlHelper,
  Touch,
  addClass,
  append,
  closest,
  compile,
  createElement,
  detach,
  extend,
  formatUnit,
  getElement,
  getInstance,
  initializeCSPTemplate,
  isNullOrUndefined,
  prepend,
  remove,
  removeClass,
  select,
  selectAll,
  setStyleAttribute,
  setValue
} from "./chunk-J6KMUI6T.js";
import {
  CommonModule
} from "./chunk-PDYOBC5X.js";
import "./chunk-JL63MSYC.js";
import {
  ChangeDetectionStrategy,
  Component,
  ContentChild,
  ElementRef,
  Injector,
  NgModule,
  Renderer2,
  ViewContainerRef,
  __decorate,
  setClassMetadata,
  ɵɵInheritDefinitionFeature,
  ɵɵcontentQuery,
  ɵɵdefineComponent,
  ɵɵdefineInjector,
  ɵɵdefineNgModule,
  ɵɵdirectiveInject,
  ɵɵloadQuery,
  ɵɵqueryRefresh
} from "./chunk-UOGKAELO.js";
import "./chunk-WDMUDEB6.js";

// node_modules/@syncfusion/ej2-pivotview/src/common/base/css-constant.js
var ROOT = "e-pivotfieldlist";
var RTL = "e-rtl";
var PIVOTCHART_LTR = "e-ltr";
var DEVICE = "e-device";
var ICON = "e-icons";
var ICON_DISABLE = "e-disable";
var ICON_HIDDEN = "e-hide";
var FIRST_PAGER_ICON = "e-icon-first";
var LAST_PAGER_ICON = "e-icon-last";
var PREV_PAGER_ICON = "e-icon-prev";
var NEXT_PAGER_ICON = "e-icon-next";
var AXISFIELD_ICON_CLASS = "e-dropdown-icon";
var WRAPPER_CLASS = "e-pivotfieldlist-container";
var OLAP_WRAPPER_CLASS = "e-olapfieldlist-container";
var CONTAINER_CLASS = "e-field-list-container";
var TOGGLE_FIELD_LIST_CLASS = "e-toggle-field-list";
var STATIC_FIELD_LIST_CLASS = "e-static";
var TOGGLE_SELECT_CLASS = "e-select-table";
var FIELD_TABLE_CLASS = "e-field-table";
var BUTTON_DRAGGABLE = "e-draggable";
var OLAP_FIELD_TABLE_CLASS = "e-olap-field-table";
var FIELD_LIST_CLASS = "e-field-list";
var OLAP_FIELD_LIST_CLASS = "e-olap-field-list-tree";
var FIELD_LIST_TREE_CLASS = "e-field-list-tree";
var FIELD_LIST_TREE_OUTER_DIV_CLASS = "e-field-list-tree-outer-div";
var FIELD_LIST_TREE_OUTER_DIV_SEARCH_CLASS = "e-field-list-tree-outer-div-searchMode";
var FIELD_LIST_SEARCH_MODE_CLASS = "e-search-mode";
var FIELD_HEADER_CLASS = "e-field-header";
var FIELD_TREE_PARENT = "e-pivot-parent";
var FIELD_TREE_CHILD = "e-pivot-child";
var FIELD_HEADER_CONTAINER_CLASS = "e-field-header-container";
var FIELD_LIST_TITLE_CLASS = "e-field-list-title";
var FIELD_LIST_TITLE_CONTENT_CLASS = "e-title-content";
var FIELD_LIST_SEARCH_CLASS = "e-field-list-search";
var FIELD_LIST_SEARCH_INPUT_CLASS = "e-field-list-search-input";
var FIELD_LIST_SEARCH_ICON_CLASS = "e-field-list-search-icon";
var FIELD_LIST_FOOTER_CLASS = "e-field-list-footer";
var CALCULATED_FIELD_CLASS = "e-calculated-field";
var AXIS_TABLE_CLASS = "e-axis-table";
var OLAP_AXIS_TABLE_CLASS = "e-olap-axis-table";
var LEFT_AXIS_PANEL_CLASS = "e-left-axis-fields";
var RIGHT_AXIS_PANEL_CLASS = "e-right-axis-fields";
var ALL_FIELDS_PANEL_CLASS = "e-all-fields-axis";
var AXIS_HEADER_CLASS = "e-axis-header";
var AXIS_CONTENT_CLASS = "e-axis-content";
var AXIS_PROMPT_CLASS = "e-draggable-prompt";
var PIVOT_BUTTON_WRAPPER_CLASS = "e-pvt-btn-div";
var PIVOT_BUTTON_CLASS = "e-pivot-button";
var CONTENT_CLASS = "e-content";
var PIVOT_BUTTON_CONTENT_CLASS = "e-pvt-btn-content";
var DRAG_CLONE_CLASS = "e-button-drag-clone";
var SORT_CLASS = "e-sort";
var MEMBER_SORT_CLASS = "e-member-sort";
var SORT_DESCEND_CLASS = "e-descend";
var FILTER_COMMON_CLASS = "e-btn-filter";
var FILTER_CLASS = "e-pv-filter";
var FILTERED_CLASS = "e-pv-filtered";
var REMOVE_CLASS = "e-remove";
var DRAG_CLASS = "e-drag";
var DRAG_DISABLE_CLASS = "e-disable-drag";
var DROP_INDICATOR_CLASS = "e-drop-indicator";
var INDICATOR_HOVER_CLASS = "e-drop-hover";
var MEMBER_EDITOR_DIALOG_CLASS = "e-member-editor-dialog";
var EDITOR_TREE_WRAPPER_CLASS = "e-member-editor-outer-container";
var EDITOR_TREE_CONTAINER_CLASS = "e-member-editor-container";
var DRILLTHROUGH_GRID_CLASS = "e-drillthrough-grid";
var DRILLTHROUGH_BODY_CLASS = "e-drillthrough-body";
var DRILLTHROUGH_BODY_HEADER_CONTAINER_CLASS = "e-drillthrough-body-header-container";
var DRILLTHROUGH_BODY_HEADER_CLASS = "e-drillthrough-body-header";
var DRILLTHROUGH_BODY_HEADER_COMMON_CLASS = "e-drillthrough-body-header-common";
var DRILLTHROUGH_BODY_HEADER_VALUE_CLASS = "e-drillthrough-body-header-value";
var DRILLTHROUGH_DIALOG = "e-drillthrough-dialog";
var EDITOR_LABEL_WRAPPER_CLASS = "e-editor-label-container";
var EDITOR_LABEL_CLASS = "e-editor-label";
var CHECK_BOX_FRAME_CLASS = "e-frame";
var NODE_CHECK_CLASS = "e-check";
var NODE_STOP_CLASS = "e-stop";
var OK_BUTTON_CLASS = "e-ok-btn";
var CANCEL_BUTTON_CLASS = "e-cancel-btn";
var ERROR_DIALOG_CLASS = "e-pivot-error-dialog";
var DROPPABLE_CLASS = "e-droppable";
var ROW_AXIS_CLASS = "e-rows";
var COLUMN_AXIS_CLASS = "e-columns";
var VALUE_AXIS_CLASS = "e-values";
var FILTER_AXIS_CLASS = "e-filters";
var GROUPING_BAR_CLASS = "e-grouping-bar";
var GROUP_ALL_FIELDS_CLASS = "e-group-all-fields";
var GROUP_ROW_CLASS = "e-group-rows";
var GROUP_COLUMN_CLASS = "e-group-columns";
var GROUP_VALUE_CLASS = "e-group-values";
var GROUP_FILTER_CLASS = "e-group-filters";
var NO_DRAG_CLASS = "e-drag-restrict";
var SELECTED_NODE_CLASS = "e-list-selected";
var TITLE_HEADER_CLASS = "e-title-header";
var TITLE_CONTENT_CLASS = "e-title-content";
var TEXT_CONTENT_CLASS = "e-text-content";
var FOOTER_CONTENT_CLASS = "e-footer-content";
var ADAPTIVE_CONTAINER_CLASS = "e-adaptive-container";
var ADAPTIVE_FIELD_LIST_BUTTON_CLASS = "e-field-list-btn";
var ADAPTIVE_CALCULATED_FIELD_BUTTON_CLASS = "e-calculated-field-btn";
var BUTTON_SMALL_CLASS = "e-small";
var BUTTON_ROUND_CLASS = "e-round";
var ADD_ICON_CLASS = "e-add-icon";
var BUTTON_FLAT_CLASS = "e-flat";
var STATIC_CENTER_DIV_CLASS = "e-center-div";
var STATIC_CENTER_HEADER_CLASS = "e-center-title";
var ADAPTIVE_FIELD_LIST_DIALOG_CLASS = "e-adaptive-field-list-dialog";
var LIST_TEXT_CLASS = "e-list-text";
var LIST_SELECT_CLASS = "e-selected-node";
var FOCUSED_CLASS = "e-focused";
var SELECT_CLASS = "e-select";
var SELECTED_OPTION_ICON_CLASS = "e-selected-option-icon";
var SELECTED_LEVEL_ICON_CLASS = "e-selected-level-icon";
var FILTER_DIV_CONTENT_CLASS = "e-filter-div-content";
var FILTER_TEXT_DIV_CLASS = "e-filter-text-div";
var BETWEEN_TEXT_DIV_CLASS = "e-between-text-div";
var SEPARATOR_DIV_CLASS = "e-separator-div";
var FILTER_OPTION_WRAPPER_1_CLASS = "e-filter-option-container-1";
var FILTER_OPTION_WRAPPER_2_CLASS = "e-filter-option-container-2";
var FILTER_INPUT_DIV_1_CLASS = "e-filter-input-div-1";
var FILTER_INPUT_DIV_2_CLASS = "e-filter-input-div-2";
var VALUE_OPTIONS_CLASS = "e-value-options";
var LEVEL_OPTIONS_CLASS = "e-level-options";
var FILTER_OPERATOR_CLASS = "e-filter-operator";
var FILTER_SORT_CLASS = "e-filter-sort";
var SORT_ASCEND_ICON_CLASS = "e-sort-ascend-icon";
var SORT_DESCEND_ICON_CLASS = "e-sort-descend-icon";
var SORT_SELECTED_CLASS = "e-active";
var COLLAPSE = "e-collapse";
var EXPAND = "e-expand";
var TABLE = "e-table";
var COLUMNSHEADER = "e-columnsheader";
var ROWSHEADER = "e-rowsheader";
var VALUESCONTENT = "e-valuescontent";
var HEADERCELL = "e-headercell";
var SUMMARY = "e-summary";
var CELLVALUE = "e-cellvalue";
var PIVOTTOOLTIP = "e-pivottooltip";
var TOOLTIP_HEADER = "e-tooltipheader";
var TOOLTIP_CONTENT = "e-tooltipcontent";
var NEXTSPAN = "e-nextspan";
var LASTSPAN = "e-lastspan";
var EDITOR_SEARCH_WRAPPER_CLASS = "e-editor-search-container";
var EDITOR_SEARCH_CLASS = "e-editor-search";
var EDITOR_SEARCH__INPUT_CLASS = "e-editor-search-input";
var SELECT_ALL_WRAPPER_CLASS = "e-select-all-container";
var SELECT_ALL_CLASS = "e-select-all";
var PIVOTCALC = "e-pivot-calc";
var CALCDIALOG = "e-pivot-calc-dialog-div";
var OLAP_CALCDIALOG = "e-olap-calc-dialog-div";
var CALCRADIO = "e-pivot-calc-radio";
var CALCCHECK = "e-pivot-calc-check";
var CALCINPUT = "e-pivot-calc-input";
var CALC_FORMAT_INPUT = "e-custom-format-input";
var CALCINPUTDIV = "e-pivot-calc-input-div";
var PIVOT_CALC_CUSTOM_FORMAT_INPUTDIV = "e-pivot-calc-custom-format-div";
var CALC_HIERARCHY_LIST_DIV = "e-olap-calc-hierarchy-list-div";
var CALC_FORMAT_TYPE_DIV = "e-pivot-calc-format-type-div";
var CALC_MEMBER_TYPE_DIV = "e-olap-calc-member-type-div";
var MEMBER_OPTIONS_CLASS = "e-member-options";
var CALCOUTERDIV = "e-pivot-calc-outer-div";
var OLAP_CALCOUTERDIV = "e-olap-calc-outer-div";
var FLAT = "e-flat";
var FORMAT = "e-format";
var FORMULA = "e-pivot-formula";
var TREEVIEW = "e-pivot-treeview";
var TREEVIEWOUTER = "e-pivot-treeview-outer";
var TREE_CONTAINER = "e-treeContainer";
var CALCCANCELBTN = "e-pivot-cancel-button";
var CALCADDBTN = "e-pivot-add-button";
var CALCOKBTN = "e-pivot-ok-button";
var CALCACCORD = "e-pivot-accord";
var CALCBUTTONDIV = "e-pivot-button-div";
var AXIS_ICON_CLASS = "e-axis";
var AXIS_ROW_CLASS = "e-axis-row";
var AXIS_COLUMN_CLASS = "e-axis-column";
var AXIS_VALUE_CLASS = "e-axis-value";
var AXIS_FILTER_CLASS = "e-axis-filter";
var GRID_CLASS = "e-grid";
var PIVOT_VIEW_CLASS = "e-pivotview";
var PIVOT_ALL_FIELD_TITLE_CLASS = "e-pivot-all-field-title";
var PIVOT_FIELD_TITLE_CLASS = "e-pivot-field-name-title";
var PIVOT_FORMULA_TITLE_CLASS = "e-pivot-formula-title";
var OLAP_HIERARCHY_TITLE_CLASS = "e-olap-hierarchy-title";
var PIVOT_FORMAT_TITLE_CLASS = "e-pivot-format-title";
var OLAP_MEMBER_TITLE_CLASS = "e-olap-member-title";
var PIVOT_CONTEXT_MENU_CLASS = "e-pivot-context-menu";
var MENU_DISABLE = "e-disabled";
var MENU_HIDE = "e-menu-hide";
var EMPTY_MEMBER_CLASS = "e-member-prompt";
var CALC_EDIT = "e-edit";
var CALC_EDITED = "e-edited";
var CALC_INFO = "e-info";
var EMPTY_FIELD = "e-empty-field";
var FORMAT_DIALOG = "e-pivot-formatting-dialog";
var FORMAT_CONDITION_BUTTON = "e-format-condition-button";
var FORMAT_NEW = "e-new-format";
var FORMAT_OUTER = "e-format-outer-div";
var FORMAT_INNER = "e-format-inner-div";
var FORMAT_TABLE = "e-format-table";
var FORMAT_VALUE_LABEL = "e-format-value-label";
var FORMAT_LABEL = "e-format-label";
var INPUT = "e-input";
var FORMAT_VALUE1 = "e-format-value1";
var FORMAT_VALUE2 = "e-format-value2";
var HIDDEN = "e-visible-hide";
var FORMAT_INPUT_VALUE = "e-format-input-value";
var FORMAT_VALUE_SPAN = "e-format-value-span";
var FORMAT_FONT_COLOR = "e-format-font-color";
var FORMAT_BACK_COLOR = "e-format-back-color";
var FORMAT_VALUE_PREVIEW = "e-format-value-preview";
var FORMAT_COLOR_PICKER = "e-format-color-picker";
var GRANDTOTAL_CHECKBOX_TABLE = "e-grandtotal-checkbox-table";
var FORMAT_DELETE_ICON = "e-format-delete-icon";
var FORMAT_DELETE_BUTTON = "e-format-delete-button";
var SELECTED_COLOR = "e-selected-color";
var DIALOG_HEADER = "e-dlg-header";
var FORMAT_APPLY_BUTTON = "e-format-apply-button";
var FORMAT_CANCEL_BUTTON = "e-format-cancel-button";
var FORMAT_ROUND_BUTTON = "e-small e-round";
var VIRTUALTRACK_DIV = "e-virtualtrack";
var VIRTUALTABLE_DIV = "e-movablescrolldiv";
var CONTENT_VIRTUALTABLE_DIV = "e-content-virtualtable";
var VIRTUALSCROLL_DIV = "e-movablescroll";
var MOVABLEHEADER_DIV = "e-headercontent";
var DEFER_APPLY_BUTTON = "e-defer-apply-button";
var DEFER_CANCEL_BUTTON = "e-defer-cancel-button";
var LAYOUT_FOOTER = "e-layout-footer";
var CELL_SELECTED_BGCOLOR = "e-cellselectionbackground";
var SELECTED_BGCOLOR = "e-selectionbackground";
var BUTTON_LAYOUT = "e-button-layout";
var CHECKBOX_LAYOUT = "e-checkbox-layout";
var CHECKBOX_CONTAINER = "e-checkbox-wrapper";
var DEFER_UPDATE_BUTTON = "e-defer-update-btn";
var HEADERCONTENT = "e-headercontent";
var BACK_ICON = "e-field-list-back-icon";
var TITLE_MOBILE_HEADER = "e-title-mobile-header";
var TITLE_MOBILE_CONTENT = "e-title-mobile-content";
var ROW_CELL_CLASS = "e-rowcell";
var CELL_ACTIVE_BGCOLOR = "e-active";
var SPAN_CLICKED = "e-spanclicked";
var ROW_SELECT = "e-rowselect";
var GRID_HEADER = "e-gridheader";
var GRID_CONTENT = "e-gridcontent";
var GRID_EXPORT = "e-export";
var PIVOTVIEW_EXPORT = "e-pivotview-export";
var PIVOTVIEW_GRID = "e-pivotview-grid";
var PIVOTVIEW_EXPAND = "e-pivotview-expand";
var PIVOTVIEW_COLLAPSE = "e-pivotview-collapse";
var PIVOTVIEW_GROUP = "e-pivotview-group";
var PIVOTVIEW_UN_GROUP = "e-pivotview-ungroup";
var GRID_PDF_EXPORT = "e-pivotview-pdf-export";
var GRID_EXCEL_EXPORT = "e-pivotview-excel-export";
var GRID_CSV_EXPORT = "e-pivotview-csv-export";
var GRID_PNG_EXPORT = "e-pivotview-png-export";
var GRID_JPEG_EXPORT = "e-pivotview-jpeg-export";
var GRID_SVG_EXPORT = "e-pivotview-svg-export";
var GRID_LOAD = "e-load-report";
var GRID_NEW = "e-new-report";
var GRID_RENAME = "e-rename-report";
var GRID_REMOVE = "e-remove-report";
var GRID_SAVEAS = "e-saveas-report";
var GRID_SAVE = "e-save-report";
var GRID_SUB_TOTAL = "e-sub-total";
var GRID_GRAND_TOTAL = "e-grand-total";
var GRID_FORMATTING = "e-toolbar-formatting";
var GRID_TOOLBAR = "e-pivot-toolbar";
var GRID_REPORT_LABEL = "e-pivotview-report-label";
var GRID_REPORT_INPUT = "e-pivotview-report-input";
var GRID_REPORT_OUTER = "e-report-outer";
var GRID_REPORT_DIALOG = "e-pivotview-report-dialog";
var TOOLBAR_FIELDLIST = "e-toolbar-fieldlist";
var TOOLBAR_GRID = "e-toolbar-grid";
var TOOLBAR_CHART = "e-toolbar-chart";
var REPORT_LIST_DROP = "e-reportlist-drop";
var PIVOTCHART = "e-pivotchart";
var GROUP_CHART_ROW = "e-group-chart-rows";
var GROUP_CHART_COLUMN = "e-group-chart-columns";
var GROUP_CHART_VALUE = "e-group-chart-values";
var GROUP_CHART_MULTI_VALUE = "e-group-chart-multi-values";
var GROUP_CHART_ACCUMULATION_COLUMN = "e-group-chart-accumulation-column";
var GROUP_CHART_FILTER = "e-group-chart-filters";
var GROUP_CHART_VALUE_DROPDOWN_DIV = "e-group-chart-values-drodown-div";
var GROUP_CHART_VALUE_DROPDOWN = "e-group-chart-values-drodown";
var GROUP_CHART_COLUMN_DROPDOWN_DIV = "e-group-chart-columns-dropdown-div";
var GROUP_CHART_COLUMN_DROPDOWN = "e-group-chart-columns-dropdown";
var CHART_GROUPING_BAR_CLASS = "e-chart-grouping-bar";
var PIVOT_DISABLE_ICON = "e-pivotview-disable-icon";
var PIVOT_SELECT_ICON = "e-pivotview-select-icon";
var VALUESHEADER = "e-valuesheader";
var ICON_ASC = "e-icon-ascending";
var ICON_DESC = "e-icon-descending";
var GRID_GROUPING_BAR_CLASS = "e-pivot-grouping-bar";
var MDX_QUERY = "e-mdx-query";
var MDX_QUERY_CONTENT = "e-mdx-query-content";
var GRID_MDX_DIALOG = "e-pivotview-mdx-dialog";
var GRID_MDX = "e-mdx";
var FORMATTING_DIALOG = "e-pivot-format-dialog";
var FORMATTING_DIALOG_OUTER = "e-pivot-format-dialog-outer";
var FORMATTING_VALUE_LABLE = "e-pivot-format-value-lable";
var FORMATTING_VALUE_DROP = "e-pivot-format-value-drop";
var FORMATTING_FORMAT_LABLE = "e-pivot-format-lable";
var FORMATTING_FORMAT_DROP = "e-pivot-format-drop";
var FORMATTING_CUSTOM_LABLE = "e-pivot-format-custom-lable";
var FORMATTING_CUSTOM_TEXT = "e-pivot-format-custom-text";
var FORMATTING_GROUPING_LABLE = "e-pivot-format-grouping-lable";
var FORMATTING_GROUPING_DROP = "e-pivot-format-grouping-drop";
var FORMATTING_DECIMAL_LABLE = "e-pivot-format-decimal-lable";
var FORMATTING_DECIMAL_DROP = "e-pivot-format-decimal-drop";
var FORMATTING_TOOLBAR = "e-pivot-format-toolbar";
var FORMATTING_TABLE = "e-pivot-format-table";
var FORMATTING_MENU = "e-pivot-format-menu";
var NUMBER_FORMATTING_MENU = "e-pivot-number-format-menu";
var EMPTY_FORMAT = "e-pivot-conditional-empty-format";
var CONDITIONAL_FORMATTING_MENU = "e-pivot-conditional-format-menu";
var PIVOTCHART_INNER = "e-pivotchart-inner";
var PIVOTCHART_TYPE_DIALOG = "e-pivotchart-type-dialog";
var FORMAT_FONT_COLOR_PICKER = "e-format-font-color-picker";
var GROUP_PIVOT_ROW = "e-group-pivot-rows";
var TOOLBAR_MENU = "e-pivot-toolbar-menu";
var DISABLE_FIRST_PAGE = "e-firstpagedisabled";
var DISABLE_PREV_PAGE = "e-prevpagedisabled";
var DISABLE_NEXT_PAGE = "e-nextpagedisabled";
var DISABLE_LAST_PAGE = "e-lastpagedisabled";
var GRID_PAGER = "e-pivot-pager";
var GRID_PAGER_DIV = "e-pivot-pager-maindiv";
var PIVOT_ROW_PAGER_DIV = "e-pivot-pager-row-maindiv";
var PIVOT_COLUMN_PAGER_DIV = "e-pivot-pager-column-maindiv";
var PIVOT_ROW_PAGER_SETTINGS = "e-pivot-row-pager-settings";
var PIVOT_COLUMN_PAGER_SETTINGS = "e-pivot-column-pager-settings";
var PIVOT_BOTH_PAGER_SETTINGS = "e-pivot-both-pager-settings";
var PIVOT_PAGER_CONTAINER = "e-pagercontainer";
var PIVOT_V_SEPARATOR = "e-pivotview-vseparator";
var PIVOT_H_SEPARATOR = "e-pivotview-hseparator";
var PIVOT_TEXT_DIV = "e-pivotview-text-div";
var PIVOT_TEXT_DIV_1 = "e-pivotview-text-div-1";
var PIVOT_ROW_SIZE = "e-pivotview-row-size";
var PIVOT_ROW_PAGER_NUMBER = "e-pivotview-row-pagerNumber";
var PIVOT_COLUMN_SIZE = "e-pivotview-column-size";
var PIVOT_COLUMN_PAGER_NUMBER = "e-pivotview-column-pagerNumber";
var PIVOT_ROW_PAGER_STRING = "e-pivotview-row-pagerString";
var PIVOT_COLUMN_PAGER_STRING = "e-pivotview-column-pagerString";
var PIVOT_ROW_OF_STRING = "e-pivot-row-of-string";
var PIVOT_COLUMN_OF_STRING = "e-pivot-column-of-string";
var PIVOT_ROW_DROPDOWN = "e-pivot-pager-row-dropdown";
var PIVOT_COLUMN_DROPDOWN = "e-pivot-pager-column-dropdown";
var PIVOT_ROW_SIZE_LIST = "e-pivot-row-size-list";
var PIVOT_COLUMN_SIZE_LIST = "e-pivot-column-size-list";
var INVERSE = "e-inverse-view";
var COMPACT_VIEW = "e-compact-view";
var PAGE_SIZE_DISABLE = "e-page-size-disable";
var PIVOT_ROW_OF_STRING_MAINDIV = "e-pivot-row-of-string-maindiv";
var PIVOT_COLUMN_OF_STRING_MAINDIV = "e-pivot-column-of-string-maindiv";
var PIVOT_PAGE_SIZE_LIST_MAINDIV = "e-pager-dropdown";
var PIVOT_FIRST_ICON_DEFAULT = "e-first e-icons e-icon-first";
var PIVOT_PREV_ICON_DEFAULT = "e-prev e-icons e-icon-prev";
var PIVOT_NEXT_ICON_DEFAULT = "e-next e-icons e-icon-next";
var PIVOT_LAST_ICON_DEFAULT = "e-last e-icons e-icon-last";
var PIVOT_FIRST_ICON_ENABLE = "e-firstpage e-pager-default";
var PIVOT_PREV_ICON_ENABLE = "e-prevpage e-pager-default";
var PIVOT_NEXT_ICON_ENABLE = "e-nextpage e-pager-default";
var PIVOT_LAST_ICON_ENABLE = "e-lastpage e-pager-default";
var GRID_PAGER_TOP = "e-pivot-pager-top";
var GRID_PAGER_BOTTOM = "e-pivot-pager-bottom";
var GRID_PAGER_SINGLE_DIV = "e-pivot-pager-single-maindiv";
var PIVOT_PAGER_NAV_CONTAINER = "e-pivot-pager-nav-container";
var PIVOT_PAGER_INFO_CONTAINER = "e-pivot-pager-info-container";
var PIVOT_CELL_CONTAINER = "e-pivotcell-container";
var PIVOT_ROW_CONTAINER = "e-pivotrow-container";
var PIVOT_FILTER_TAB_CONTAINER = "e-filter-tab-container";
var PIVOT_FILTER_MEMBER_LIMIT = "e-node-limit";
var FREEZED_CELL = "e-leftfreeze";
var PIVOT_CONTENT_LOADER = "e-pivot-content-loader";
var PIVOT_HIDE_LOADER = "e-hide-loader";
var COLLAPSIBLE = "e-icon-collapsible";
var EXPANDABLE = "e-icon-expandable";
var PIVOT_VIEW_AUTOFIT = "e-pivotview-autofit";
var RHANDLER = "e-rhandler";
var RCURSOR = "e-rcursor";
var RESIZED = "e-resized";
var TABULAR_ROW_BUTTON = "e-tabular-row-btn";
var TABULAR_PIVOT_BUTTON = "e-tabular-pvt-btn";
var GROUP_ROW = "e-group-row";
var FREEZE_LEFT_BORDER = "e-freezeleftborder";
var ROWCELL = "e-rowcell";
var ROW_CLASS = "e-row";
var TABULAR_GROUP_ROWS = "e-tabular-group-rows";
var TABULAR_LAYOUT_HEADER = "e-tabular-layout-header";

// node_modules/@syncfusion/ej2-pivotview/src/base/util.js
var PivotUtil = (
  /** @class */
  function() {
    function PivotUtil2() {
    }
    PivotUtil2.getType = function(value) {
      var val;
      var dateValue = new Date(value);
      if (typeof value === "boolean") {
        val = "boolean";
      } else if (!isNaN(Number(value))) {
        val = "number";
      } else if (dateValue instanceof Date && !isNaN(dateValue.valueOf())) {
        val = dateValue && dateValue.getDay() && (dateValue.getHours() > 0 || dateValue.getMinutes() > 0 || dateValue.getSeconds() > 0 || dateValue.getMilliseconds() > 0) ? "datetime" : "date";
      } else {
        val = typeof value;
      }
      return val;
    };
    PivotUtil2.resetTime = function(date) {
      date.setHours(0, 0, 0, 0);
      return date;
    };
    PivotUtil2.getClonedData = function(data) {
      var clonedData = [];
      if (data) {
        for (var _i = 0, _a = data; _i < _a.length; _i++) {
          var item = _a[_i];
          var fields = Object.keys(item);
          var keyPos = 0;
          var framedSet = {};
          while (keyPos < fields.length) {
            framedSet[fields[keyPos]] = item[fields[keyPos]];
            keyPos++;
          }
          clonedData.push(framedSet);
        }
      }
      return clonedData;
    };
    PivotUtil2.getClonedCSVData = function(data) {
      var clonedData = data.map(function(row) {
        return row.slice();
      });
      return clonedData;
    };
    PivotUtil2.getDefinedObj = function(data) {
      var keyPos = 0;
      var framedSet = {};
      if (!(data === null || data === void 0)) {
        var fields = Object.keys(data);
        while (keyPos < fields.length) {
          if (!(data[fields[keyPos]] === null || data[fields[keyPos]] === void 0)) {
            framedSet[fields[keyPos]] = data[fields[keyPos]];
          }
          keyPos++;
        }
      } else {
        framedSet = data;
      }
      return framedSet;
    };
    PivotUtil2.inArray = function(value, collection) {
      if (collection) {
        for (var i = 0, cnt = collection.length; i < cnt; i++) {
          if (collection[i] === value) {
            return i;
          }
        }
      }
      return -1;
    };
    PivotUtil2.setPivotProperties = function(control, properties) {
      control.allowServerDataBinding = false;
      if (control.pivotGridModule) {
        control.pivotGridModule.allowServerDataBinding = false;
      }
      control.setProperties(properties, true);
      control.allowServerDataBinding = true;
      if (control.pivotGridModule) {
        control.pivotGridModule.allowServerDataBinding = true;
      }
    };
    PivotUtil2.getClonedDataSourceSettings = function(dataSourceSettings) {
      var clonesDataSource = this.getDefinedObj({
        type: dataSourceSettings.type,
        catalog: dataSourceSettings.catalog,
        cube: dataSourceSettings.cube,
        providerType: dataSourceSettings.providerType,
        url: dataSourceSettings.url,
        localeIdentifier: dataSourceSettings.localeIdentifier,
        excludeFields: isNullOrUndefined(dataSourceSettings.excludeFields) ? [] : dataSourceSettings.excludeFields.slice(),
        expandAll: dataSourceSettings.expandAll,
        allowLabelFilter: dataSourceSettings.allowLabelFilter,
        allowValueFilter: dataSourceSettings.allowValueFilter,
        allowMemberFilter: dataSourceSettings.allowMemberFilter,
        enableSorting: dataSourceSettings.enableSorting ? true : false,
        rows: this.cloneFieldSettings(dataSourceSettings.rows),
        columns: this.cloneFieldSettings(dataSourceSettings.columns),
        filters: this.cloneFieldSettings(dataSourceSettings.filters),
        values: this.cloneFieldSettings(dataSourceSettings.values),
        filterSettings: this.cloneFilterSettings(dataSourceSettings.filterSettings),
        sortSettings: this.cloneSortSettings(dataSourceSettings.sortSettings),
        drilledMembers: this.cloneDrillMemberSettings(dataSourceSettings.drilledMembers),
        valueSortSettings: this.CloneValueSortObject(dataSourceSettings.valueSortSettings),
        valueAxis: dataSourceSettings.valueAxis,
        valueIndex: dataSourceSettings.valueIndex,
        grandTotalsPosition: dataSourceSettings.grandTotalsPosition,
        formatSettings: this.cloneFormatSettings(dataSourceSettings.formatSettings),
        calculatedFieldSettings: this.cloneCalculatedFieldSettings(dataSourceSettings.calculatedFieldSettings),
        fieldMapping: this.cloneFieldSettings(dataSourceSettings.fieldMapping),
        showSubTotals: dataSourceSettings.showSubTotals,
        showRowSubTotals: dataSourceSettings.showRowSubTotals,
        showColumnSubTotals: dataSourceSettings.showColumnSubTotals,
        subTotalsPosition: dataSourceSettings.subTotalsPosition,
        showGrandTotals: dataSourceSettings.showGrandTotals,
        showRowGrandTotals: dataSourceSettings.showRowGrandTotals,
        showColumnGrandTotals: dataSourceSettings.showColumnGrandTotals,
        showHeaderWhenEmpty: dataSourceSettings.showHeaderWhenEmpty,
        alwaysShowValueHeader: dataSourceSettings.alwaysShowValueHeader,
        conditionalFormatSettings: this.cloneConditionalFormattingSettings(dataSourceSettings.conditionalFormatSettings),
        emptyCellsTextContent: dataSourceSettings.emptyCellsTextContent,
        groupSettings: this.cloneGroupSettings(dataSourceSettings.groupSettings),
        showAggregationOnValueField: dataSourceSettings.showAggregationOnValueField,
        authentication: this.CloneAuthenticationObject(dataSourceSettings.authentication)
      });
      return clonesDataSource;
    };
    PivotUtil2.getClonedFieldList = function(fieldListObj, isMemberIncluded) {
      var keys = Object.keys(fieldListObj);
      var clonedfieldlistObj = {};
      for (var i = 0, keysLength = keys.length; i < keysLength; i++) {
        var fieldlistObj = fieldListObj[keys[i]];
        if (fieldListObj[keys[i]]) {
          clonedfieldlistObj[keys[i]] = {
            type: fieldlistObj.type,
            caption: fieldlistObj.caption,
            id: fieldlistObj.id,
            isSelected: fieldlistObj.isSelected,
            sort: fieldlistObj.sort,
            filterType: fieldlistObj.filterType,
            index: fieldlistObj.index,
            filter: isMemberIncluded ? [] : fieldlistObj.filter,
            isCustomField: fieldlistObj.isCustomField,
            showRemoveIcon: fieldlistObj.showRemoveIcon,
            showFilterIcon: fieldlistObj.showFilterIcon,
            showSortIcon: fieldlistObj.showSortIcon,
            showNoDataItems: fieldlistObj.showNoDataItems,
            isCalculatedField: fieldlistObj.isCalculatedField,
            showEditIcon: fieldlistObj.showEditIcon,
            showValueTypeIcon: fieldlistObj.showValueTypeIcon,
            allowDragAndDrop: fieldlistObj.allowDragAndDrop,
            showSubTotals: fieldlistObj.showSubTotals,
            expandAll: fieldlistObj.expandAll,
            pid: fieldlistObj.pid,
            aggregateType: fieldlistObj.aggregateType,
            baseField: fieldlistObj.baseField,
            baseItem: fieldlistObj.baseItem,
            dateMember: isMemberIncluded ? [] : this.cloneDateMembers(fieldlistObj.dateMember),
            members: isMemberIncluded ? {} : this.cloneFormatMembers(fieldlistObj.members),
            formatString: fieldlistObj.formatString,
            format: fieldlistObj.format,
            formula: fieldlistObj.formula,
            isExcelFilter: fieldlistObj.isExcelFilter,
            membersOrder: fieldlistObj.membersOrder ? fieldlistObj.membersOrder.slice() : fieldlistObj.membersOrder,
            isAlphanumeric: fieldlistObj.isAlphanumeric,
            tag: fieldlistObj.tag,
            expanded: fieldlistObj.expanded,
            spriteCssClass: fieldlistObj.spriteCssClass,
            name: fieldlistObj.name,
            defaultHierarchy: fieldlistObj.defaultHierarchy,
            hasAllMember: fieldlistObj.hasAllMember,
            allMember: fieldlistObj.allMember,
            isChecked: fieldlistObj.isChecked,
            filterMembers: this.cloneFieldMembers(fieldlistObj.filterMembers),
            childMembers: isMemberIncluded ? [] : this.cloneFieldMembers(fieldlistObj.childMembers),
            searchMembers: isMemberIncluded ? [] : this.cloneFieldMembers(fieldlistObj.searchMembers),
            htmlAttributes: this.getDefinedObj(fieldlistObj.htmlAttributes),
            currrentMembers: isMemberIncluded ? {} : this.cloneFormatMembers(fieldlistObj.currrentMembers),
            isHierarchy: fieldlistObj.isHierarchy,
            isNamedSets: fieldlistObj.isNamedSets,
            actualFilter: fieldlistObj.actualFilter ? fieldlistObj.actualFilter.slice() : fieldlistObj.actualFilter,
            levels: isMemberIncluded ? [] : this.cloneFieldMembers(fieldlistObj.levels),
            levelCount: fieldlistObj.levelCount,
            fieldType: fieldlistObj.fieldType,
            memberType: fieldlistObj.memberType,
            parentHierarchy: fieldlistObj.parentHierarchy
          };
        }
      }
      return clonedfieldlistObj;
    };
    PivotUtil2.cloneDateMembers = function(collection) {
      if (collection) {
        var clonedCollection = [];
        for (var _i = 0, collection_1 = collection; _i < collection_1.length; _i++) {
          var set = collection_1[_i];
          clonedCollection.push({
            formattedText: set.formattedText,
            actualText: set.actualText
          });
        }
        return clonedCollection;
      } else {
        return collection;
      }
    };
    PivotUtil2.cloneFormatMembers = function(collection) {
      if (collection) {
        var keys = Object.keys(collection);
        var clonedFormatMembers = {};
        for (var i = 0, keysLength = keys.length; i < keysLength; i++) {
          var cloneFormatMembersObj = collection[keys[i]];
          clonedFormatMembers[keys[i]] = {
            index: cloneFormatMembersObj.index ? cloneFormatMembersObj.index.slice() : cloneFormatMembersObj.index,
            isDrilled: cloneFormatMembersObj.isDrilled,
            ordinal: cloneFormatMembersObj.ordinal
          };
        }
        return clonedFormatMembers;
      } else {
        return collection;
      }
    };
    PivotUtil2.cloneFieldMembers = function(collection) {
      if (collection) {
        var clonedCollection = [];
        for (var _i = 0, collection_2 = collection; _i < collection_2.length; _i++) {
          var set = collection_2[_i];
          clonedCollection.push({
            caption: set.caption,
            hasChildren: set.hasChildren,
            id: set.id,
            isSelected: set.isSelected,
            name: set.name,
            tag: set.tag,
            htmlAttributes: this.getDefinedObj(set.htmlAttributes),
            type: set.type,
            spriteCssClass: set.spriteCssClass,
            pid: set.pid,
            isChecked: set.isChecked
          });
        }
        return clonedCollection;
      } else {
        return collection;
      }
    };
    PivotUtil2.updateDataSourceSettings = function(control, dataSourceSettings) {
      if (control) {
        this.setPivotProperties(control, {
          dataSourceSettings: this.getDefinedObj({
            type: dataSourceSettings.type,
            catalog: dataSourceSettings.catalog,
            cube: dataSourceSettings.cube,
            providerType: dataSourceSettings.providerType,
            url: dataSourceSettings.url,
            localeIdentifier: dataSourceSettings.localeIdentifier,
            excludeFields: isNullOrUndefined(dataSourceSettings.excludeFields) ? [] : dataSourceSettings.excludeFields,
            expandAll: dataSourceSettings.expandAll,
            allowLabelFilter: dataSourceSettings.allowLabelFilter,
            allowValueFilter: dataSourceSettings.allowValueFilter,
            allowMemberFilter: dataSourceSettings.allowMemberFilter,
            enableSorting: dataSourceSettings.enableSorting ? true : false,
            rows: dataSourceSettings.rows,
            columns: dataSourceSettings.columns,
            filters: dataSourceSettings.filters,
            values: dataSourceSettings.values,
            filterSettings: dataSourceSettings.filterSettings,
            sortSettings: dataSourceSettings.sortSettings,
            drilledMembers: dataSourceSettings.drilledMembers,
            valueSortSettings: dataSourceSettings.valueSortSettings,
            valueAxis: dataSourceSettings.valueAxis,
            grandTotalsPosition: dataSourceSettings.grandTotalsPosition,
            formatSettings: dataSourceSettings.formatSettings,
            calculatedFieldSettings: dataSourceSettings.calculatedFieldSettings,
            fieldMapping: dataSourceSettings.fieldMapping,
            showSubTotals: dataSourceSettings.showSubTotals,
            showRowSubTotals: dataSourceSettings.showRowSubTotals,
            showColumnSubTotals: dataSourceSettings.showColumnSubTotals,
            subTotalsPosition: dataSourceSettings.subTotalsPosition,
            showGrandTotals: dataSourceSettings.showGrandTotals,
            showRowGrandTotals: dataSourceSettings.showRowGrandTotals,
            showColumnGrandTotals: dataSourceSettings.showColumnGrandTotals,
            showHeaderWhenEmpty: dataSourceSettings.showHeaderWhenEmpty,
            alwaysShowValueHeader: dataSourceSettings.alwaysShowValueHeader,
            conditionalFormatSettings: dataSourceSettings.conditionalFormatSettings,
            emptyCellsTextContent: dataSourceSettings.emptyCellsTextContent,
            groupSettings: dataSourceSettings.groupSettings,
            showAggregationOnValueField: dataSourceSettings.showAggregationOnValueField,
            authentication: this.CloneAuthenticationObject(dataSourceSettings.authentication)
          })
        });
      }
    };
    PivotUtil2.cloneFieldSettings = function(collection) {
      if (collection) {
        var clonedCollection = [];
        for (var _i = 0, collection_3 = collection; _i < collection_3.length; _i++) {
          var set = collection_3[_i];
          clonedCollection.push(this.getDefinedObj({
            name: set.name,
            caption: set.caption,
            axis: set.axis,
            baseField: set.baseField,
            baseItem: set.baseItem,
            isCalculatedField: set.isCalculatedField,
            isNamedSet: set.isNamedSet,
            showNoDataItems: set.showNoDataItems,
            showSubTotals: set.showSubTotals,
            type: set.type,
            dataType: set.dataType,
            showFilterIcon: set.showFilterIcon,
            showSortIcon: set.showSortIcon,
            showRemoveIcon: set.showRemoveIcon,
            showValueTypeIcon: set.showValueTypeIcon,
            showEditIcon: set.showEditIcon,
            allowDragAndDrop: set.allowDragAndDrop,
            expandAll: set.expandAll,
            groupName: set.groupName
          }));
        }
        return clonedCollection;
      } else {
        return collection;
      }
    };
    PivotUtil2.cloneOlapFieldSettings = function(collection) {
      if (collection) {
        var clonedCollection = [];
        for (var _i = 0, collection_4 = collection; _i < collection_4.length; _i++) {
          var set = collection_4[_i];
          clonedCollection.push(this.getDefinedObj({
            caption: set.caption,
            hasChildren: set.hasChildren,
            id: set.id,
            isSelected: set.isSelected,
            name: set.name,
            spriteCssClass: set.spriteCssClass,
            tag: set.tag,
            type: set.type,
            pid: set.pid,
            expanded: set.expanded,
            defaultHierarchy: set.defaultHierarchy,
            hasAllMember: set.hasAllMember,
            allMember: set.allMember,
            isChecked: set.isChecked,
            filterMembers: set.filterMembers,
            formula: set.formula,
            childMembers: set.childMembers,
            searchMembers: set.searchMembers,
            htmlAttributes: this.getDefinedObj(set.htmlAttributes),
            currrentMembers: set.currrentMembers,
            isHierarchy: set.isHierarchy,
            isNamedSets: set.isNamedSets,
            formatString: set.formatString,
            actualFilter: set.actualFilter,
            levels: set.levels,
            levelCount: set.levelCount,
            memberType: set.memberType,
            fieldType: set.fieldType,
            parentHierarchy: set.parentHierarchy
          }));
        }
        return clonedCollection;
      } else {
        return collection;
      }
    };
    PivotUtil2.cloneFilterSettings = function(collection) {
      if (collection) {
        var clonedCollection = [];
        for (var _i = 0, collection_5 = collection; _i < collection_5.length; _i++) {
          var set = collection_5[_i];
          clonedCollection.push(this.getDefinedObj({
            name: set.name,
            type: set.type,
            condition: set.condition,
            items: set.items ? set.items.slice() : set.items,
            levelCount: set.levelCount,
            measure: set.measure,
            selectedField: set.selectedField,
            showDateFilter: set.showDateFilter,
            showLabelFilter: set.showLabelFilter,
            showNumberFilter: set.showNumberFilter,
            value1: set.value1,
            value2: set.value2
          }));
        }
        return clonedCollection;
      } else {
        return collection;
      }
    };
    PivotUtil2.cloneSortSettings = function(collection) {
      if (collection) {
        var clonedCollection = [];
        for (var _i = 0, collection_6 = collection; _i < collection_6.length; _i++) {
          var set = collection_6[_i];
          clonedCollection.push(this.getDefinedObj({
            name: set.name,
            order: set.order,
            membersOrder: set.membersOrder ? set.membersOrder.slice() : set.membersOrder
          }));
        }
        return clonedCollection;
      } else {
        return collection;
      }
    };
    PivotUtil2.getFormattedHeader = function(headerCell, engine) {
      var clonedHeader = PivotUtil2.frameHeaderWithKeys(headerCell);
      if (clonedHeader.valueSort && clonedHeader.valueSort["axis"]) {
        var fieldName = clonedHeader.valueSort["axis"];
        var isDateType = this.isDateField(fieldName, engine);
        clonedHeader.formattedText = isDateType || !engine.formatFields[fieldName] || headerCell.isSum === true ? clonedHeader.formattedText : engine.getFormattedValue(clonedHeader.actualText, fieldName).formattedText;
      }
      return clonedHeader;
    };
    PivotUtil2.getFormattedMembers = function(members, fieldName, engine) {
      var isDateField = this.isDateField(fieldName, engine);
      if (isDateField || engine.groupingFields[fieldName]) {
        var fieldMembers = {};
        var keys = Object.keys(members);
        var dateMember = engine.fieldList[fieldName].dateMember;
        for (var i = 0, j = keys.length; i < j; i++) {
          var values = members[keys[i]];
          if (isDateField) {
            fieldMembers[values.caption] = values;
          } else {
            var commonValue = dateMember[values.ordinal - 1].actualText;
            fieldMembers[commonValue] = values;
          }
        }
        return fieldMembers;
      }
      return members;
    };
    PivotUtil2.isDateField = function(fieldName, engineModule) {
      return engineModule.formatFields[fieldName] && ["date", "dateTime", "time"].indexOf(engineModule.formatFields[fieldName].type) > -1;
    };
    PivotUtil2.formatChartHeaders = function(values, chartModule, isColumnHeader, cell) {
      var formattedValues = [];
      for (var i = 0, j = values.length; i < j; i++) {
        var fieldName = isColumnHeader ? chartModule.parent.dataSourceSettings.columns.length > 0 && !isNullOrUndefined(chartModule.parent.dataSourceSettings.columns[i]) ? chartModule.parent.dataSourceSettings.columns[i].name : void 0 : chartModule.parent.dataSourceSettings.rows.length > 0 && !isNullOrUndefined(chartModule.parent.dataSourceSettings.rows[i]) ? chartModule.parent.dataSourceSettings.rows[i].name : void 0;
        if (!isNullOrUndefined(fieldName)) {
          if (chartModule.engineModule.formatFields[fieldName] && ["date", "dateTime", "time"].indexOf(chartModule.engineModule.formatFields[fieldName].type) > -1) {
            formattedValues.push(values[i]);
          } else {
            formattedValues.push(chartModule.engineModule.getFormattedValue(values[i], fieldName).formattedText);
          }
        } else if (cell && cell.isGrandSum) {
          formattedValues.push(chartModule.parent.localeObj.getConstant("grandTotal"));
        } else {
          formattedValues.push(values[i]);
        }
      }
      return formattedValues.join(" - ");
    };
    PivotUtil2.cloneDrillMemberSettings = function(collection) {
      if (collection) {
        var clonedCollection = [];
        for (var _i = 0, collection_7 = collection; _i < collection_7.length; _i++) {
          var set = collection_7[_i];
          clonedCollection.push(this.getDefinedObj({
            name: set.name,
            delimiter: set.delimiter,
            items: set.items ? set.items.slice() : set.items
          }));
        }
        return clonedCollection;
      } else {
        return collection;
      }
    };
    PivotUtil2.cloneFormatSettings = function(collection) {
      if (collection) {
        var clonedCollection = [];
        for (var _i = 0, collection_8 = collection; _i < collection_8.length; _i++) {
          var set = collection_8[_i];
          clonedCollection.push(this.getDefinedObj({
            name: set.name,
            calendar: set.calendar,
            currency: set.currency,
            format: set.format,
            maximumFractionDigits: set.maximumFractionDigits,
            maximumSignificantDigits: set.maximumSignificantDigits,
            minimumFractionDigits: set.minimumFractionDigits,
            minimumIntegerDigits: set.minimumIntegerDigits,
            minimumSignificantDigits: set.minimumSignificantDigits,
            skeleton: set.skeleton,
            type: set.type,
            useGrouping: set.useGrouping
          }));
        }
        return clonedCollection;
      } else {
        return collection;
      }
    };
    PivotUtil2.CloneValueSortObject = function(collection) {
      if (collection) {
        var clonedCollection = {
          columnIndex: collection.columnIndex,
          headerDelimiter: collection.headerDelimiter,
          headerText: collection.headerText,
          measure: collection.measure,
          sortOrder: collection.sortOrder
        };
        return clonedCollection;
      } else {
        return collection;
      }
    };
    PivotUtil2.CloneAuthenticationObject = function(collection) {
      if (collection) {
        var clonedCollection = {
          userName: collection.userName,
          password: collection.password
        };
        return clonedCollection;
      } else {
        return collection;
      }
    };
    PivotUtil2.cloneCalculatedFieldSettings = function(collection) {
      if (collection) {
        var clonedCollection = [];
        for (var _i = 0, collection_9 = collection; _i < collection_9.length; _i++) {
          var set = collection_9[_i];
          clonedCollection.push(this.getDefinedObj({
            name: set.name,
            formatString: set.formatString,
            formula: set.formula,
            hierarchyUniqueName: set.hierarchyUniqueName
          }));
        }
        return clonedCollection;
      } else {
        return collection;
      }
    };
    PivotUtil2.cloneConditionalFormattingSettings = function(collection) {
      if (collection) {
        var clonedCollection = [];
        for (var _i = 0, collection_10 = collection; _i < collection_10.length; _i++) {
          var set = collection_10[_i];
          clonedCollection.push(this.getDefinedObj({
            applyGrandTotals: set.applyGrandTotals,
            conditions: set.conditions,
            label: set.label,
            measure: set.measure,
            style: set.style ? {
              backgroundColor: set.style.backgroundColor,
              color: set.style.color,
              fontFamily: set.style.fontFamily,
              fontSize: set.style.fontSize
            } : set.style,
            value1: set.value1,
            value2: set.value2
          }));
        }
        return clonedCollection;
      } else {
        return collection;
      }
    };
    PivotUtil2.cloneGroupSettings = function(collection) {
      if (collection) {
        var clonedCollection = [];
        for (var _i = 0, collection_11 = collection; _i < collection_11.length; _i++) {
          var set = collection_11[_i];
          clonedCollection.push(this.getDefinedObj({
            name: set.name,
            caption: set.caption,
            customGroups: this.cloneCustomGroups(set.customGroups),
            endingAt: set.endingAt,
            startingAt: set.startingAt,
            groupInterval: set.groupInterval,
            rangeInterval: set.rangeInterval,
            type: set.type
          }));
        }
        return clonedCollection;
      } else {
        return collection;
      }
    };
    PivotUtil2.cloneCustomGroups = function(collection) {
      if (collection) {
        var clonedCollection = [];
        for (var _i = 0, collection_12 = collection; _i < collection_12.length; _i++) {
          var set = collection_12[_i];
          clonedCollection.push(this.getDefinedObj({
            groupName: set.groupName,
            items: set.items ? set.items.slice() : set.items
          }));
        }
        return clonedCollection;
      } else {
        return collection;
      }
    };
    PivotUtil2.getFilterItemByName = function(fieldName, fields) {
      var filterItems = new DataManager({
        json: fields
      }).executeLocal(new Query().where("name", "equal", fieldName));
      if (filterItems && filterItems.length > 0) {
        return filterItems[filterItems.length - 1];
      }
      return void 0;
    };
    PivotUtil2.getFieldByName = function(fieldName, fields) {
      return new DataManager({
        json: fields
      }).executeLocal(new Query().where("name", "equal", fieldName))[0];
    };
    PivotUtil2.getFieldInfo = function(fieldName, control, hasAllField) {
      if (!hasAllField) {
        var rows = this.cloneFieldSettings(control.dataSourceSettings.rows);
        var columns = this.cloneFieldSettings(control.dataSourceSettings.columns);
        var values = this.cloneFieldSettings(control.dataSourceSettings.values);
        var filters = this.cloneFieldSettings(control.dataSourceSettings.filters);
        var fields = [rows, columns, values, filters];
        for (var i = 0, len = fields.length; i < len; i++) {
          for (var j = 0, cnt = fields[i] ? fields[i].length : 0; j < cnt; j++) {
            if (fields[i][j] && fields[i][j].name === fieldName) {
              return {
                fieldName,
                fieldItem: fields[i][j],
                axis: i === 0 ? "rows" : i === 1 ? "columns" : i === 2 ? "values" : "filters",
                position: j
              };
            }
          }
        }
      }
      var fieldList = control.dataType === "olap" ? control.olapEngineModule.fieldList[fieldName] : control.engineModule.fieldList[fieldName];
      var fieldItem = fieldList ? {
        name: fieldName,
        caption: fieldList.caption,
        baseField: fieldList.baseField,
        baseItem: fieldList.baseItem,
        isCalculatedField: fieldList.isCalculatedField,
        isNamedSet: fieldList.isNamedSets,
        showNoDataItems: fieldList.showNoDataItems,
        showSubTotals: fieldList.showSubTotals,
        type: fieldList.aggregateType,
        showFilterIcon: fieldList.showFilterIcon,
        showSortIcon: fieldList.showSortIcon,
        showRemoveIcon: fieldList.showRemoveIcon,
        showValueTypeIcon: fieldList.showValueTypeIcon,
        showEditIcon: fieldList.showEditIcon,
        allowDragAndDrop: fieldList.allowDragAndDrop,
        expandAll: fieldList.expandAll
      } : void 0;
      return {
        fieldName,
        fieldItem,
        axis: "fieldlist",
        position: -1
      };
    };
    PivotUtil2.isButtonIconRefesh = function(prop, oldProp, newProp) {
      var isButtonRefresh = false;
      try {
        if (prop === "dataSourceSettings" && oldProp.dataSourceSettings && newProp.dataSourceSettings) {
          var propValidation = ["notAvail", "notAvail", "notAvail", "notAvail"];
          var oldAxesProp = Object.keys(oldProp.dataSourceSettings);
          var newAxesProp = Object.keys(newProp.dataSourceSettings);
          if (oldAxesProp && newAxesProp && newAxesProp.length > 0 && oldAxesProp.length === newAxesProp.length) {
            var axes = ["rows", "columns", "values", "filters"];
            for (var i = 0; i < newAxesProp.length; i++) {
              var oldAxis = newAxesProp[i] in oldProp.dataSourceSettings && !isNullOrUndefined(oldProp.dataSourceSettings[newAxesProp[i]]) ? Object.keys(oldProp.dataSourceSettings[newAxesProp[i]]) : [];
              var newAxis = newAxesProp[i] in newProp.dataSourceSettings && !isNullOrUndefined(newProp.dataSourceSettings[newAxesProp[i]]) ? Object.keys(newProp.dataSourceSettings[newAxesProp[i]]) : [];
              if (axes.indexOf(newAxesProp[i]) !== -1 && axes.indexOf(oldAxesProp[i]) !== -1 && oldAxis && newAxis && newAxis.length > 0 && oldAxis.length === newAxis.length) {
                var options = ["showFilterIcon", "showSortIcon", "showRemoveIcon", "showValueTypeIcon", "showEditIcon", "allowDragAndDrop", "expandAll"];
                for (var j = 0; j < newAxis.length; j++) {
                  var oldAxisProp = Object.keys(oldProp.dataSourceSettings[newAxesProp[i]][newAxis[j]]);
                  var newAxisProp = Object.keys(newProp.dataSourceSettings[newAxesProp[i]][newAxis[j]]);
                  for (var k = 0; k < newAxisProp.length; k++) {
                    if (options.indexOf(newAxisProp[k]) !== -1 && options.indexOf(oldAxisProp[k]) !== -1) {
                      propValidation[i] = "update";
                    } else {
                      propValidation[i] = "break";
                      break;
                    }
                  }
                  if (propValidation[i] === "break") {
                    break;
                  }
                }
              } else {
                propValidation[i] = "break";
              }
              if (propValidation[i] === "break") {
                break;
              }
            }
          }
          var a = 0;
          var b = 0;
          var c = 0;
          for (var _i = 0, propValidation_1 = propValidation; _i < propValidation_1.length; _i++) {
            var validation = propValidation_1[_i];
            if (validation === "break") {
              a++;
            }
            if (validation === "notAvail") {
              b++;
            }
            if (validation === "update") {
              c++;
            }
          }
          isButtonRefresh = a > 0 || b === 4 ? false : a === 0 && b < 4 && c > 0;
        }
      } catch (exception) {
        isButtonRefresh = false;
      }
      return isButtonRefresh;
    };
    PivotUtil2.frameContent = function(pivotValues, type, rowPosition, control) {
      var dataContent = [];
      var pivot = control;
      if (pivot.dataSourceSettings.values.length > 0 && !pivot.engineModule.isEmptyData) {
        if (pivot.enableValueSorting || !pivot.engineModule.isEngineUpdated) {
          var rowCnt = 0;
          var start = type === "value" ? rowPosition : 0;
          var end = type === "value" ? pivotValues.length : rowPosition;
          for (var rCnt = start; rCnt < end; rCnt++) {
            if (pivotValues[rCnt]) {
              rowCnt = type === "header" ? rCnt : rowCnt;
              dataContent[rowCnt] = {};
              for (var cCnt = 0; cCnt < pivotValues[rCnt].length; cCnt++) {
                if (pivotValues[rCnt][cCnt]) {
                  dataContent[rowCnt][cCnt] = pivotValues[rCnt][cCnt];
                }
              }
              rowCnt++;
            }
          }
        }
      }
      return dataContent;
    };
    PivotUtil2.getLocalizedObject = function(control) {
      var locale = {};
      locale["Null"] = control.localeObj.getConstant("null");
      locale["Years"] = control.localeObj.getConstant("Years");
      locale["Quarters"] = control.localeObj.getConstant("Quarters");
      locale["Months"] = control.localeObj.getConstant("Months");
      locale["Days"] = control.localeObj.getConstant("Days");
      locale["Hours"] = control.localeObj.getConstant("Hours");
      locale["Minutes"] = control.localeObj.getConstant("Minutes");
      locale["Seconds"] = control.localeObj.getConstant("Seconds");
      locale["QuarterYear"] = control.localeObj.getConstant("QuarterYear");
      locale["Of"] = control.localeObj.getConstant("of");
      locale["Qtr"] = control.localeObj.getConstant("qtr");
      locale["Undefined"] = control.localeObj.getConstant("undefined");
      locale["GroupOutOfRange"] = control.localeObj.getConstant("groupOutOfRange");
      locale["Group"] = control.localeObj.getConstant("group");
      return locale;
    };
    PivotUtil2.generateUUID = function() {
      var d = (/* @__PURE__ */ new Date()).getTime();
      var d2 = performance && performance.now && performance.now() * 1e3 || 0;
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
        var r = Math.random() * 16;
        if (d > 0) {
          r = (d + r) % 16 | 0;
          d = Math.floor(d / 16);
        } else {
          r = (d2 + r) % 16 | 0;
          d2 = Math.floor(d2 / 16);
        }
        return (c === "x" ? r : r & 3 | 8).toString(16);
      });
    };
    PivotUtil2.applyCustomSort = function(sortDetails, sortMembersOrder, type, hasMembersOrder, isOlap) {
      var grandTotal;
      var order = [];
      if (sortDetails.IsOrderChanged) {
        order = sortDetails.members;
      } else {
        order = sortDetails.sortOrder === "Ascending" || sortDetails.sortOrder === "None" || sortDetails.sortOrder === void 0 ? [].concat(sortDetails.members) : [].concat(sortDetails.members).reverse();
      }
      if (order.length > sortMembersOrder.length) {
        order = order.filter(function(item) {
          return sortMembersOrder.some(function(member2) {
            var sortText2 = isOlap ? member2.formattedText : type === "string" || type === "number" ? member2.actualText : member2.dateText;
            return typeof item === typeof sortText2 && sortText2 === item;
          });
        });
      }
      var updatedMembers = [];
      var isNormalType = type === void 0 || type === "string" || type === "number";
      if (sortMembersOrder.length > 0 && sortMembersOrder[0].actualText === "Grand Total") {
        grandTotal = sortMembersOrder[0];
        sortMembersOrder.shift();
      }
      for (var i = 0, j = 0; i < sortMembersOrder.length; i++) {
        var member = sortMembersOrder[i];
        var sortText = isOlap ? member.formattedText : isNormalType ? member.actualText : type === true ? member.actualText.toString() : member.dateText;
        if (order[j] === sortText) {
          sortMembersOrder.splice(j++, 0, member);
          sortMembersOrder.splice(++i, 1);
          if (j < order.length) {
            i = -1;
          } else {
            if (!hasMembersOrder) {
              updatedMembers.splice(--j, 0, sortText);
            }
            break;
          }
        }
        if (i >= 0 && !hasMembersOrder) {
          updatedMembers[i] = sortText;
        }
      }
      if (!hasMembersOrder) {
        for (var i = updatedMembers.length; i < sortMembersOrder.length; i++) {
          var member = sortMembersOrder[i];
          var sortText = isOlap ? member.formattedText : isNormalType ? member.actualText : type === true ? member.actualText.toString() : member.dateText;
          updatedMembers[i] = sortText;
        }
        if (updatedMembers[updatedMembers.length - 1] === "Grand Total") {
          updatedMembers.pop();
        }
        sortDetails.members = updatedMembers;
      }
      if (grandTotal) {
        sortMembersOrder.splice(0, 0, grandTotal);
      }
      return sortMembersOrder;
    };
    PivotUtil2.applyHeadersSort = function(sortMembersOrder, sortOrder, type, isNumberGroupSorting) {
      if (isNumberGroupSorting) {
        sortMembersOrder = sortMembersOrder.sort(function(a, b) {
          var aText = a.actualText;
          var bText = b.actualText;
          return aText === "Grand Total" || bText === "Grand Total" ? 0 : aText === "Out of Range" ? 1 : bText === "Out of Range" ? -1 : !isNaN(parseFloat(aText)) && !isNaN(parseFloat(bText)) ? sortOrder === "Ascending" ? parseFloat(aText) - parseFloat(bText) : parseFloat(bText) - parseFloat(aText) : sortOrder === "Ascending" ? aText.localeCompare(bText, void 0, {
            numeric: true,
            sensitivity: "base"
          }) : bText.localeCompare(aText, void 0, {
            numeric: true,
            sensitivity: "base"
          });
        });
      } else if (type === "datetime" || type === "date" || type === "time") {
        sortMembersOrder = sortOrder === "Ascending" ? sortMembersOrder.sort(function(a, b) {
          if (a.dateText === "Out of Range") {
            return 1;
          }
          if (b.dateText === "Out of Range") {
            return -1;
          }
          return a.dateText > b.dateText ? 1 : a.dateText < b.dateText ? -1 : 0;
        }) : sortOrder === "Descending" ? sortMembersOrder.sort(function(a, b) {
          if (a.dateText === "Out of Range") {
            return 1;
          }
          if (b.dateText === "Out of Range") {
            return -1;
          }
          return a.dateText < b.dateText ? 1 : a.dateText > b.dateText ? -1 : 0;
        }) : sortMembersOrder;
      } else if (type === true) {
        sortMembersOrder = sortOrder === "Ascending" ? sortMembersOrder.sort(function(a, b) {
          return a.actualText === "Grand Total" || b.actualText === "Grand Total" ? 0 : a.actualText === "Out of Range" ? 1 : b.actualText === "Out of Range" ? -1 : Number(a.actualText.toString().match(/\d+/)) > Number(b.actualText.toString().match(/\d+/)) ? 1 : Number(b.actualText.toString().match(/\d+/)) > Number(a.actualText.toString().match(/\d+/)) ? -1 : 0;
        }) : sortOrder === "Descending" ? sortMembersOrder.sort(function(a, b) {
          return a.actualText === "Grand Total" || b.actualText === "Grand Total" ? 0 : a.actualText === "Out of Range" ? -1 : b.actualText === "Out of Range" ? 1 : Number(a.actualText.toString().match(/\d+/)) < Number(b.actualText.toString().match(/\d+/)) ? 1 : Number(b.actualText.toString().match(/\d+/)) < Number(a.actualText.toString().match(/\d+/)) ? -1 : 0;
        }) : sortMembersOrder;
      } else if (type === "string") {
        var sortElements = function(a, b) {
          return sortOrder === "Ascending" ? a.actualText === "Grand Total" || b.actualText === "Grand Total" ? 0 : a.actualText.localeCompare(b.actualText, void 0, {
            sensitivity: "base"
          }) : a.actualText === "Grand Total" || b.actualText === "Grand Total" ? 0 : b.actualText.localeCompare(a.actualText, void 0, {
            sensitivity: "base"
          });
        };
        sortMembersOrder.sort(sortElements);
      } else {
        sortMembersOrder = sortOrder === "Ascending" ? sortMembersOrder.sort(function(a, b) {
          return a.actualText === "Grand Total" || b.actualText === "Grand Total" ? 0 : a.actualText > b.actualText ? 1 : b.actualText > a.actualText ? -1 : 0;
        }) : sortOrder === "Descending" ? sortMembersOrder.sort(function(a, b) {
          return a.actualText === "Grand Total" || b.actualText === "Grand Total" ? 0 : a.actualText < b.actualText ? 1 : b.actualText < a.actualText ? -1 : 0;
        }) : sortMembersOrder;
      }
      return sortMembersOrder;
    };
    PivotUtil2.renderOlapEngine = function(pivot, customProperties) {
      try {
        pivot.olapEngineModule.renderEngine(pivot.dataSourceSettings, customProperties ? customProperties : pivot.frameCustomProperties(pivot.olapEngineModule.fieldListData, pivot.olapEngineModule.fieldList), pivot.onHeadersSort ? pivot.getHeaderSortInfo.bind(pivot) : void 0);
        pivot.setProperties({
          dataSourceSettings: {
            valueIndex: pivot.olapEngineModule.measureIndex
          }
        }, true);
      } catch (exception) {
        pivot.actionObj.actionName = "engineFormation";
        if (pivot.olapEngineModule.errorInfo) {
          pivot.actionFailureMethod(pivot.olapEngineModule.errorInfo);
          pivot.olapEngineModule.errorInfo = void 0;
        } else {
          pivot.actionFailureMethod(exception);
        }
      }
    };
    PivotUtil2.frameHeaderWithKeys = function(header) {
      var keys = Object.keys(header);
      var keyPos = 0;
      var framedHeader = {};
      while (keyPos < keys.length) {
        framedHeader[keys[keyPos]] = header[keys[keyPos]];
        keyPos++;
      }
      return framedHeader;
    };
    PivotUtil2.getPageSize = function(pageSize) {
      switch (pageSize) {
        case "Letter":
          return new SizeF(612, 792);
        case "Note":
          return new SizeF(540, 720);
        case "Legal":
          return new SizeF(612, 1008);
        case "A0":
          return new SizeF(2380, 3368);
        case "A1":
          return new SizeF(1684, 2380);
        case "A2":
          return new SizeF(1190, 1684);
        case "A3":
          return new SizeF(842, 1190);
        case "A5":
          return new SizeF(421, 595);
        case "A6":
          return new SizeF(297, 421);
        case "A7":
          return new SizeF(210, 297);
        case "A8":
          return new SizeF(148, 210);
        case "A9":
          return new SizeF(105, 148);
        case "B0":
          return new SizeF(2836, 4008);
        case "B1":
          return new SizeF(2004, 2836);
        case "B2":
          return new SizeF(1418, 2004);
        case "B3":
          return new SizeF(1002, 1418);
        case "B4":
          return new SizeF(709, 1002);
        case "B5":
          return new SizeF(501, 709);
        case "Archa":
          return new SizeF(648, 864);
        case "Archb":
          return new SizeF(864, 1296);
        case "Archc":
          return new SizeF(1296, 1728);
        case "Archd":
          return new SizeF(1728, 2592);
        case "Arche":
          return new SizeF(2592, 3456);
        case "Flsa":
          return new SizeF(612, 936);
        case "HalfLetter":
          return new SizeF(396, 612);
        case "Letter11x17":
          return new SizeF(792, 1224);
        case "Ledger":
          return new SizeF(1224, 792);
        default:
          return new SizeF(595, 842);
      }
    };
    PivotUtil2.getSortedValue = function(aggreColl, sortOrder) {
      aggreColl.sort(function(a, b) {
        return sortOrder === "Descending" ? (b["value"] || b["header"]["type"] === "grand sum" ? b["value"] : 0) - (a["value"] || a["header"]["type"] === "grand sum" ? a["value"] : 0) : (a["value"] || a["header"]["type"] === "grand sum" ? a["value"] : 0) - (b["value"] || b["header"]["type"] === "grand sum" ? b["value"] : 0);
      });
      return aggreColl.map(function(item) {
        return item["header"];
      });
    };
    PivotUtil2.toggleFieldListIconVisibility = function(control) {
      if (control.showFieldList && select("#" + control.element.id + "_PivotFieldList", control.element)) {
        if (control.toolbar && control.toolbar.indexOf("FieldList") !== -1) {
          select("#" + control.element.id + "_PivotFieldList", control.element).style.display = "none";
        } else {
          select("#" + control.element.id + "_PivotFieldList", control.element).style.top = control.element.querySelector("." + GRID_TOOLBAR).offsetHeight.toString() + "px";
          select("#" + control.element.id + "_PivotFieldList", control.element).style.position = "relative";
        }
      }
      if (control.toolbar && control.toolbar.indexOf("FieldList") !== -1 && control.showToolbar && control.element.querySelector(".e-toggle-field-list")) {
        control.element.querySelector(".e-toggle-field-list").style.display = "none";
      }
    };
    return PivotUtil2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/base/engine.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var PivotEngine = (
  /** @class */
  function() {
    function PivotEngine2() {
      this.aggregatedValueMatrix = [];
      this.valueContent = [];
      this.formatFields = {};
      this.groupingFieldsInfo = {};
      this.dateFormatFunction = {};
      this.calculatedFields = {};
      this.calculatedFormulas = {};
      this.valueAxis = 0;
      this.saveDataHeaders = {};
      this.columnCount = 0;
      this.rowCount = 0;
      this.columnPageCount = 0;
      this.rowPageCount = 0;
      this.colFirstLvl = 0;
      this.rowFirstLvl = 0;
      this.rowStartPos = 0;
      this.colStartPos = 0;
      this.enableValueSorting = false;
      this.headerCollection = {
        rowHeaders: [],
        columnHeaders: [],
        rowHeadersCount: 0,
        columnHeadersCount: 0
      };
      this.rMembers = [];
      this.cMembers = [];
      this.groupingFields = {};
      this.isLastHeaderHasMeasures = true;
      this.measureIndex = -1;
      this.isPagingOrVirtualizationEnabled = false;
      this.rowMaxLevel = 0;
      this.valueMatrix = [];
      this.memberCnt = -1;
      this.pageInLimit = false;
      this.endPos = 0;
      this.removeCount = 0;
      this.colHdrBufferCalculated = false;
      this.colValuesLength = 1;
      this.rowValuesLength = 1;
      this.slicedHeaders = [];
      this.fieldFilterMem = {};
      this.filterPosObj = {};
      this.selectedHeaders = {
        selectedHeader: [],
        values: []
      };
      this.rowGrandTotal = null;
      this.columnGrandTotal = null;
      this.removeRowGrandTotal = false;
      this.removeColumnGrandTotal = false;
      this.isValueHasAdvancedAggregate = false;
      this.rawIndexObject = {};
      this.reformAxisCount = 0;
      this.isEditing = false;
      this.valueAxisFields = {};
      this.data = [];
      this.actualData = [];
      this.groupRawIndex = {};
      this.fieldKeys = {};
      this.allowDataCompression = false;
      this.dataSourceSettings = {};
      this.frameHeaderObjectsCollection = false;
      this.headerObjectsCollection = {};
      this.columnKeys = {};
      this.fieldDrillCollection = {};
      this.formatRegex = /^(?:[ncpae])(?:([0-9]|1[0-9]|20))?$/i;
      this.measureNames = {};
      this.enablePaging = false;
      this.enableVirtualization = false;
      this.enableHtmlSanitizer = false;
      this.enableOptimizedRendering = false;
      this.groupedDataType = {};
      this.emptyRowsLength = 0;
      this.tabularPivotValues = [];
      this.viewportPageCount = 3;
    }
    PivotEngine2.prototype.clearProperties = function(isExport) {
      if (!this.isPagingOrVirtualizationEnabled && !isExport) {
        this.columnKeys = {};
        this.headerCollection = {
          rowHeaders: [],
          columnHeaders: [],
          rowHeadersCount: 0,
          columnHeadersCount: 0
        };
      }
      if (this.enableValueSorting) {
        this.valueContent = [];
      }
      this.saveDataHeaders = this.allowValueFilter ? this.saveDataHeaders : {};
      this.rMembers = [];
      this.cMembers = [];
      this.slicedHeaders = [];
      this.fieldFilterMem = {};
      this.filterPosObj = {};
      this.selectedHeaders = {
        selectedHeader: [],
        values: []
      };
      this.rowGrandTotal = null;
      this.columnGrandTotal = null;
      this.rawIndexObject = {};
      if (this.dataSourceSettings.valueIndex > -1) {
        this.valueAxisFields = {};
      }
      this.headerObjectsCollection = {};
      this.fieldDrillCollection = {};
    };
    PivotEngine2.prototype.renderEngine = function(dataSource, customProperties, fn, onHeadersSort2) {
      this.getValueCellInfo = fn;
      this.getHeaderSortInfo = onHeadersSort2;
      this.customProperties = customProperties;
      if (this.fieldList) {
        for (var i = 0, j = dataSource.formatSettings; i < j.length; i++) {
          if (!this.formatFields[j[i].name] && this.fieldList[j[i].name]) {
            this.fieldList[j[i].name].members = {};
            this.fieldList[j[i].name].formattedMembers = {};
            this.fieldList[j[i].name].dateMember = [];
          }
        }
      }
      this.formatFields = {};
      this.dateFormatFunction = {};
      this.calculatedFields = {};
      this.calculatedFormulas = {};
      this.valueAxis = 0;
      this.saveDataHeaders = {};
      this.columnCount = 0;
      this.rowCount = 0;
      this.columnPageCount = 0;
      this.rowPageCount = 0;
      this.colFirstLvl = 0;
      this.rowFirstLvl = 0;
      this.rowStartPos = 0;
      this.colStartPos = 0;
      this.dataSourceSettings.excludeFields = isNullOrUndefined(dataSource.excludeFields) ? [] : dataSource.excludeFields;
      this.enableValueSorting = false;
      this.headerCollection = {
        rowHeaders: [],
        columnHeaders: [],
        rowHeadersCount: 0,
        columnHeadersCount: 0
      };
      this.aggregatedValueMatrix = [];
      this.rMembers = [];
      this.cMembers = [];
      this.memberCnt = -1;
      this.pageInLimit = false;
      this.endPos = 0;
      this.removeCount = 0;
      this.colHdrBufferCalculated = false;
      this.colValuesLength = 1;
      this.rowValuesLength = 1;
      this.slicedHeaders = [];
      this.fieldFilterMem = {};
      this.filterPosObj = {};
      this.selectedHeaders = {
        selectedHeader: [],
        values: []
      };
      this.rowGrandTotal = null;
      this.columnGrandTotal = null;
      this.removeRowGrandTotal = false;
      this.removeColumnGrandTotal = false;
      this.isValueHasAdvancedAggregate = false;
      this.rawIndexObject = {};
      this.isLastHeaderHasMeasures = true;
      this.isEditing = false;
      var fields;
      this.globalize = customProperties && customProperties.globalize ? customProperties.globalize : new Internationalization();
      this.currencyCode = customProperties && customProperties.currenyCode ? customProperties.currenyCode : void 0;
      this.localeObj = customProperties ? customProperties.localeObj : void 0;
      this.fieldsType = customProperties ? customProperties.fieldsType : {};
      this.clonedReport = customProperties ? customProperties.clonedReport && customProperties.clonedReport.properties ? customProperties.clonedReport.properties : customProperties.clonedReport : {};
      this.enablePaging = customProperties.enablePaging;
      this.enableVirtualization = customProperties.enableVirtualization;
      this.enableOptimizedRendering = customProperties.enableOptimizedRendering;
      this.enableHtmlSanitizer = customProperties.enableHtmlSanitizer;
      this.isPagingOrVirtualizationEnabled = this.enablePaging || this.enableVirtualization;
      this.enableSort = dataSource.enableSorting;
      this.dataSourceSettings.alwaysShowValueHeader = dataSource.alwaysShowValueHeader;
      this.dataSourceSettings.showHeaderWhenEmpty = isNullOrUndefined(dataSource.showHeaderWhenEmpty) ? true : dataSource.showHeaderWhenEmpty;
      this.dataSourceSettings.showSubTotals = isNullOrUndefined(dataSource.showSubTotals) ? true : dataSource.showSubTotals;
      this.dataSourceSettings.showRowSubTotals = isNullOrUndefined(dataSource.showRowSubTotals) ? true : dataSource.showRowSubTotals;
      this.dataSourceSettings.showColumnSubTotals = isNullOrUndefined(dataSource.showColumnSubTotals) ? true : dataSource.showColumnSubTotals;
      this.dataSourceSettings.showGrandTotals = isNullOrUndefined(dataSource.showGrandTotals) ? true : dataSource.showGrandTotals;
      this.dataSourceSettings.grandTotalsPosition = isNullOrUndefined(dataSource.grandTotalsPosition) ? "Bottom" : dataSource.grandTotalsPosition;
      this.dataSourceSettings.showRowGrandTotals = isNullOrUndefined(dataSource.showRowGrandTotals) ? true : dataSource.showRowGrandTotals;
      this.dataSourceSettings.showColumnGrandTotals = isNullOrUndefined(dataSource.showColumnGrandTotals) ? true : dataSource.showColumnGrandTotals;
      this.showSubTotalsAtTop = this.dataSourceSettings.showSubTotals && this.dataSourceSettings.showColumnSubTotals && dataSource.subTotalsPosition === "Top";
      this.showSubTotalsAtBottom = this.dataSourceSettings.showSubTotals && this.dataSourceSettings.showRowSubTotals && dataSource.subTotalsPosition === "Bottom" || customProperties.isTabularLayout;
      this.allowValueFilter = dataSource.allowValueFilter;
      this.isValueFilterEnabled = false;
      this.enableValueSorting = customProperties ? customProperties.enableValueSorting : false;
      this.isDrillThrough = customProperties ? customProperties.isDrillThrough ? customProperties.isDrillThrough : false : false;
      this.valueContent = [];
      this.dataSourceSettings = PivotUtil.getClonedDataSourceSettings(dataSource);
      if (!(dataSource.dataSource instanceof DataManager)) {
        if (dataSource.type === "CSV") {
          this.data = dataSource.dataSource.map(function(innerArray) {
            return innerArray.slice();
          });
          if (this.fieldList) {
            this.data.shift();
          }
        } else {
          this.data = dataSource.dataSource;
        }
      }
      if (this.data && this.data[0]) {
        if (!this.fieldList) {
          if (dataSource.type === "CSV") {
            this.fields = this.data.shift();
          } else {
            this.fields = Object.keys(this.data[0]);
          }
          this.fieldKeys = {};
          for (var i = 0; i < this.fields.length; i++) {
            this.fieldKeys[this.fields[i]] = dataSource.type === "CSV" ? i : this.fields[i];
          }
        }
        if (customProperties && customProperties.pageSettings && customProperties.allowDataCompression) {
          this.actualData = this.data;
          this.data = this.getGroupedRawData(dataSource);
        }
        this.dataSourceSettings.rows = dataSource.rows ? dataSource.rows : [];
        this.dataSourceSettings.columns = dataSource.columns ? dataSource.columns : [];
        this.dataSourceSettings.filters = dataSource.filters ? dataSource.filters : [];
        this.dataSourceSettings.values = dataSource.values ? dataSource.values : [];
        this.dataSourceSettings.formatSettings = dataSource.formatSettings ? dataSource.formatSettings : [];
        this.dataSourceSettings.groupSettings = dataSource.groupSettings ? dataSource.groupSettings : [];
        this.dataSourceSettings.calculatedFieldSettings = dataSource.calculatedFieldSettings ? dataSource.calculatedFieldSettings : [];
        this.enableSort = dataSource.enableSorting === void 0 ? true : dataSource.enableSorting;
        this.dataSourceSettings.fieldMapping = dataSource.fieldMapping ? dataSource.fieldMapping : [];
        this.valueAxisFields = {};
        for (var _i = 0, _a = this.dataSourceSettings.values; _i < _a.length; _i++) {
          var value = _a[_i];
          this.valueAxisFields[value.name] = value;
        }
        fields = this.getGroupData(this.data);
        this.validateFilters(dataSource);
        this.isExpandAll = this.isValueFiltersAvail && dataSource.allowValueFilter ? true : dataSource.expandAll;
        this.drilledMembers = dataSource.drilledMembers ? this.isValueFiltersAvail && dataSource.allowValueFilter ? [] : dataSource.drilledMembers : [];
        this.isMultiMeasures = this.dataSourceSettings.values.length > 1 ? true : false;
        this.valueAxis = dataSource.valueAxis === "row" ? 1 : 0;
        this.measureIndex = !isNullOrUndefined(dataSource.valueIndex) ? dataSource.valueIndex : -1;
        this.emptyCellTextContent = dataSource.emptyCellsTextContent ? dataSource.emptyCellsTextContent : "";
        this.rowValuesLength = this.valueAxis === 1 ? this.dataSourceSettings.values.length : 1;
        this.colValuesLength = this.valueAxis === 0 ? this.dataSourceSettings.values.length : 1;
        this.valueSortSettings = dataSource.valueSortSettings || {
          sortOrder: "None",
          headerDelimiter: ".",
          headerText: "",
          columnIndex: void 0
        };
        this.valueSortData = [];
        this.pageSettings = customProperties ? customProperties.pageSettings ? customProperties.pageSettings : this.pageSettings : void 0;
        this.allowDataCompression = customProperties && customProperties.allowDataCompression;
        this.savedFieldList = customProperties ? customProperties.savedFieldList : void 0;
        this.getFieldList(fields, this.enableSort, dataSource.allowValueFilter);
        this.removeIrrelevantFields(Object.keys(this.fieldList));
        this.fillFieldMembers();
        this.updateSortSettings(dataSource.sortSettings, this.enableSort);
        this.filterMembers = [];
        var columnLength = this.dataSourceSettings.columns.length - 1;
        this.columnKeys = {};
        while (columnLength > -1) {
          this.columnKeys[this.dataSourceSettings.columns[columnLength].name] = this.dataSourceSettings.columns[columnLength];
          columnLength--;
        }
        this.updateFilterMembers(dataSource);
        this.generateGridData(dataSource);
      }
    };
    PivotEngine2.prototype.removeIrrelevantFields = function(fields) {
      var report = {};
      report[0] = this.dataSourceSettings.rows;
      report[1] = this.dataSourceSettings.columns;
      report[2] = this.dataSourceSettings.values;
      report[3] = this.dataSourceSettings.filters;
      var pos = 0;
      while (pos < 4) {
        if (report[pos]) {
          for (var cnt = 0; cnt < report[pos].length; cnt++) {
            var fieldName = report[pos][cnt].name;
            if (this.dataSourceSettings.excludeFields.indexOf(fieldName) > -1 || !isNullOrUndefined(fields) && fields.indexOf(fieldName) === -1) {
              report[pos].splice(cnt, 1);
              cnt--;
            } else if (pos === 2) {
              this.measureNames[fieldName] = report[pos][cnt].caption ? report[pos][cnt].caption : fieldName;
              this.measureNames[report[pos][cnt].caption ? report[pos][cnt].caption : fieldName] = fieldName;
            }
          }
        }
        pos++;
      }
      this.isMultiMeasures = this.dataSourceSettings.values.length > 1 ? true : false;
      this.measureIndex = this.measureIndex === -1 ? this.valueAxis ? report[0].length : report[1].length : this.measureIndex;
    };
    PivotEngine2.prototype.updateDataSourceSettings = function(dataSource, requireDatasourceUpdate) {
      if (requireDatasourceUpdate) {
        this.emptyCellTextContent = dataSource.emptyCellsTextContent ? dataSource.emptyCellsTextContent : "";
        this.valueAxis = dataSource.valueAxis === "row" ? 1 : 0;
        this.rowValuesLength = this.valueAxis === 1 ? this.dataSourceSettings.values.length : 1;
        this.colValuesLength = this.valueAxis === 0 ? this.dataSourceSettings.values.length : 1;
        this.measureIndex = !isNullOrUndefined(dataSource.valueIndex) ? dataSource.valueIndex : -1;
        this.enableSort = dataSource.enableSorting;
        this.dataSourceSettings.alwaysShowValueHeader = dataSource.alwaysShowValueHeader;
        this.dataSourceSettings.showHeaderWhenEmpty = isNullOrUndefined(dataSource.showHeaderWhenEmpty) ? true : dataSource.showHeaderWhenEmpty;
        this.dataSourceSettings.showSubTotals = isNullOrUndefined(dataSource.showSubTotals) ? true : dataSource.showSubTotals;
        this.dataSourceSettings.showRowSubTotals = isNullOrUndefined(dataSource.showRowSubTotals) ? true : dataSource.showRowSubTotals;
        this.dataSourceSettings.showColumnSubTotals = isNullOrUndefined(dataSource.showColumnSubTotals) ? true : dataSource.showColumnSubTotals;
        this.dataSourceSettings.showGrandTotals = isNullOrUndefined(dataSource.showGrandTotals) ? true : dataSource.showGrandTotals;
        this.dataSourceSettings.grandTotalsPosition = isNullOrUndefined(dataSource.grandTotalsPosition) ? "Bottom" : dataSource.grandTotalsPosition;
        this.dataSourceSettings.showRowGrandTotals = isNullOrUndefined(dataSource.showRowGrandTotals) ? true : dataSource.showRowGrandTotals;
        this.dataSourceSettings.showColumnGrandTotals = isNullOrUndefined(dataSource.showColumnGrandTotals) ? true : dataSource.showColumnGrandTotals;
        this.showSubTotalsAtTop = this.dataSourceSettings.showSubTotals && dataSource.subTotalsPosition === "Top" && dataSource.showColumnSubTotals;
        this.showSubTotalsAtBottom = this.customProperties.isTabularLayout ? true : this.dataSourceSettings.showSubTotals && dataSource.subTotalsPosition === "Bottom" && dataSource.showRowSubTotals;
        this.allowValueFilter = dataSource.allowValueFilter;
        this.dataSourceSettings.formatSettings = dataSource.formatSettings ? dataSource.formatSettings : [];
        this.dataSourceSettings.groupSettings = dataSource.groupSettings ? dataSource.groupSettings : [];
        this.dataSourceSettings.calculatedFieldSettings = dataSource.calculatedFieldSettings ? dataSource.calculatedFieldSettings : [];
        this.enableSort = dataSource.enableSorting === void 0 ? true : dataSource.enableSorting;
        this.dataSourceSettings.fieldMapping = dataSource.fieldMapping ? dataSource.fieldMapping : [];
        this.dataSourceSettings.values = dataSource.values ? dataSource.values : [];
        this.dataSourceSettings.rows = dataSource.rows ? dataSource.rows : [];
        this.dataSourceSettings.columns = dataSource.columns ? dataSource.columns : [];
        this.dataSourceSettings.filters = dataSource.filters ? dataSource.filters : [];
        this.dataSourceSettings.filterSettings = dataSource.filterSettings ? dataSource.filterSettings : [];
        this.dataSourceSettings.sortSettings = dataSource.sortSettings ? dataSource.sortSettings : [];
        this.dataSourceSettings.conditionalFormatSettings = dataSource.conditionalFormatSettings ? dataSource.conditionalFormatSettings : [];
        this.dataSourceSettings.valueSortSettings = dataSource.valueSortSettings ? dataSource.valueSortSettings : {};
        this.removeIrrelevantFields(Object.keys(this.fieldList));
      }
    };
    PivotEngine2.prototype.getGroupedRawData = function(dataSourceSettings) {
      this.data = [];
      for (var _i = 0, _a = this.actualData; _i < _a.length; _i++) {
        var data = _a[_i];
        this.data[this.data.length] = PivotUtil.frameHeaderWithKeys(data);
      }
      var countFields = dataSourceSettings.values.filter(function(item) {
        return item.type === "Count" || item.type === "DistinctCount";
      }).map(function(item) {
        return item.name;
      });
      var hasCountField = countFields.length > 0;
      var realData = this.data;
      var headerFields = dataSourceSettings.rows.concat(dataSourceSettings.columns.concat(dataSourceSettings.filters)).map(function(item) {
        return item.name;
      });
      var groupRawData = {};
      var finalData = [];
      this.groupRawIndex = {};
      var groupKeys = {};
      var indexLength = 0;
      for (var i = 0; i < realData.length; i++) {
        var currData = realData[i];
        var members = [];
        if (hasCountField) {
          for (var vPos = 0; vPos < countFields.length; vPos++) {
            currData[this.fieldKeys[countFields[vPos]]] = isNullOrUndefined(currData[this.fieldKeys[countFields[vPos]]]) ? currData[this.fieldKeys[countFields[vPos]]] : 1;
          }
        }
        for (var hPos = 0; hPos < headerFields.length; hPos++) {
          members.push(currData[this.fieldKeys[headerFields[hPos]]]);
        }
        var memberJoin = members.join("-");
        if (groupRawData[memberJoin]) {
          for (var vPos = 0; vPos < dataSourceSettings.values.length; vPos++) {
            var currFieldName = dataSourceSettings.values[vPos].name;
            var currValue = currData[this.fieldKeys[currFieldName]];
            var savedData = groupRawData[memberJoin];
            var summType = dataSourceSettings.values[vPos].type;
            if (!isNullOrUndefined(currValue)) {
              if (typeof currValue !== "number" || summType === "DistinctCount") {
                summType = "Count";
              }
              if (isNullOrUndefined(savedData[currFieldName])) {
                savedData[currFieldName] = summType === "Product" ? 1 : summType === "Min" || summType === "Max" ? void 0 : 0;
              } else if (typeof savedData[currFieldName] !== "number") {
                savedData[currFieldName] = 1;
              }
              if (summType === "Count") {
                savedData[currFieldName] += 1;
              } else if (summType === "Min") {
                if (!isNullOrUndefined(savedData[currFieldName])) {
                  savedData[currFieldName] = savedData[currFieldName] > currValue ? currValue : savedData[currFieldName];
                }
              } else if (summType === "Max") {
                if (!isNullOrUndefined(savedData[currFieldName])) {
                  savedData[currFieldName] = savedData[currFieldName] < currValue ? currValue : savedData[currFieldName];
                }
              } else if (summType === "Product") {
                savedData[currFieldName] *= currValue;
              } else {
                savedData[currFieldName] += currValue;
              }
            }
          }
          if (this.isDrillThrough) {
            this.groupRawIndex[groupKeys[memberJoin]].push(i);
          }
        } else {
          groupRawData[memberJoin] = currData;
          finalData.push(currData);
          if (this.isDrillThrough) {
            this.groupRawIndex[indexLength] = [i];
            groupKeys[memberJoin] = indexLength;
            indexLength++;
          }
        }
      }
      return finalData;
    };
    PivotEngine2.prototype.getGroupData = function(data) {
      var _this = this;
      var fieldkeySet = data[0];
      var _loop_1 = function(i2, groupElements2) {
        var group = groupElements2[i2];
        var fieldName = group.name;
        var caption = group.caption;
        if (this_1.fields.indexOf(fieldName) > -1) {
          var groupFields = {};
          var customGroupFieldName = void 0;
          if (group.type === "Date" && this_1.groupingFields[fieldName] || group.type === "Custom" && this_1.groupingFields[fieldName]) {
            return {
              value: fieldkeySet
            };
          } else if (group.type === "Number") {
            if (PivotUtil.getType(fieldkeySet[fieldName]) === "number" || !this_1.groupingFields[fieldName]) {
              if (group.rangeInterval) {
                data.sort(function(a, b) {
                  return Number(a[_this.fieldKeys[fieldName]]) > Number(b[_this.fieldKeys[fieldName]]) ? 1 : Number(b[_this.fieldKeys[fieldName]]) > Number(a[_this.fieldKeys[fieldName]]) ? -1 : 0;
                });
              }
            } else {
              return {
                value: fieldkeySet
              };
            }
          }
          var len = data.length;
          while (len--) {
            var item = data[len];
            if (item[this_1.fieldKeys[fieldName]] && group.type === "Date") {
              var date = new Date(item[this_1.fieldKeys[fieldName]].toString());
              if (!isNullOrUndefined(date) && group.groupInterval.length > 0) {
                for (var i_1 = 0, len_1 = group.groupInterval.length; i_1 < len_1; i_1++) {
                  var interval = group.groupInterval[i_1];
                  var isInRangeAvail = this_1.getRange(group, date.getTime());
                  var newDate = PivotUtil.resetTime(/* @__PURE__ */ new Date());
                  switch (interval) {
                    case "Years":
                      {
                        var newFieldName = i_1 === group.groupInterval.length - 1 ? fieldName : fieldName + "_date_group_years";
                        groupFields[newFieldName] = interval;
                        this_1.fieldKeys[newFieldName] = this_1.dataSourceSettings.type === "CSV" ? this_1.fieldKeys[newFieldName] ? this_1.fieldKeys[newFieldName] : this_1.fields.length : newFieldName;
                        if (this_1.fields.indexOf(newFieldName) === -1) {
                          this_1.fields.push(newFieldName);
                        }
                        item[this_1.fieldKeys[newFieldName]] = isInRangeAvail ? void 0 : new Date(newDate.setFullYear(date.getFullYear())).toString();
                      }
                      break;
                    case "Quarters":
                      {
                        var newFieldName = i_1 === group.groupInterval.length - 1 ? fieldName : fieldName + "_date_group_quarters";
                        groupFields[newFieldName] = interval;
                        var month = Math.ceil((date.getMonth() + 1) / 3);
                        this_1.fieldKeys[newFieldName] = this_1.dataSourceSettings.type === "CSV" ? this_1.fieldKeys[newFieldName] ? this_1.fieldKeys[newFieldName] : this_1.fields.length : newFieldName;
                        if (this_1.fields.indexOf(newFieldName) === -1) {
                          this_1.fields.push(newFieldName);
                        }
                        item[this_1.fieldKeys[newFieldName]] = isInRangeAvail ? void 0 : (this_1.localeObj ? this_1.localeObj.getConstant("qtr") : "Qtr") + month.toString();
                      }
                      break;
                    case "QuarterYear":
                      {
                        var newFieldName = i_1 === group.groupInterval.length - 1 ? fieldName : fieldName + "_date_group_quarterYear";
                        groupFields[newFieldName] = interval;
                        var month = Math.ceil((date.getMonth() + 1) / 3);
                        this_1.fieldKeys[newFieldName] = this_1.dataSourceSettings.type === "CSV" ? this_1.fieldKeys[newFieldName] ? this_1.fieldKeys[newFieldName] : this_1.fields.length : newFieldName;
                        if (this_1.fields.indexOf(newFieldName) === -1) {
                          this_1.fields.push(newFieldName);
                        }
                        item[this_1.fieldKeys[newFieldName]] = isInRangeAvail ? void 0 : (this_1.localeObj ? this_1.localeObj.getConstant("qtr") : "Qtr") + month.toString() + " " + (this_1.localeObj ? this_1.localeObj.getConstant("of") : "of") + " " + date.getFullYear().toString();
                      }
                      break;
                    case "Months":
                      {
                        var newFieldName = i_1 === group.groupInterval.length - 1 ? fieldName : fieldName + "_date_group_months";
                        groupFields[newFieldName] = interval;
                        this_1.fieldKeys[newFieldName] = this_1.dataSourceSettings.type === "CSV" ? this_1.fieldKeys[newFieldName] ? this_1.fieldKeys[newFieldName] : this_1.fields.length : newFieldName;
                        if (this_1.fields.indexOf(newFieldName) === -1) {
                          this_1.fields.push(newFieldName);
                        }
                        item[this_1.fieldKeys[newFieldName]] = isInRangeAvail ? void 0 : new Date(newDate.setMonth(date.getMonth(), 1)).toString();
                      }
                      break;
                    case "Days":
                      {
                        var newFieldName = i_1 === group.groupInterval.length - 1 ? fieldName : fieldName + "_date_group_days";
                        groupFields[newFieldName] = interval;
                        this_1.fieldKeys[newFieldName] = this_1.dataSourceSettings.type === "CSV" ? this_1.fieldKeys[newFieldName] ? this_1.fieldKeys[newFieldName] : this_1.fields.length : newFieldName;
                        if (this_1.fields.indexOf(newFieldName) === -1) {
                          this_1.fields.push(newFieldName);
                        }
                        item[this_1.fieldKeys[newFieldName]] = isInRangeAvail ? void 0 : new Date(newDate.setMonth(date.getMonth(), date.getDate())).toString();
                      }
                      break;
                    case "Hours":
                      {
                        var newFieldName = i_1 === group.groupInterval.length - 1 ? fieldName : fieldName + "_date_group_hours";
                        groupFields[newFieldName] = interval;
                        this_1.fieldKeys[newFieldName] = this_1.dataSourceSettings.type === "CSV" ? this_1.fieldKeys[newFieldName] ? this_1.fieldKeys[newFieldName] : this_1.fields.length : newFieldName;
                        if (this_1.fields.indexOf(newFieldName) === -1) {
                          this_1.fields.push(newFieldName);
                        }
                        item[this_1.fieldKeys[newFieldName]] = isInRangeAvail ? void 0 : new Date(newDate.setHours(date.getHours())).toString();
                      }
                      break;
                    case "Minutes":
                      {
                        var newFieldName = i_1 === group.groupInterval.length - 1 ? fieldName : fieldName + "_date_group_minutes";
                        groupFields[newFieldName] = interval;
                        this_1.fieldKeys[newFieldName] = this_1.dataSourceSettings.type === "CSV" ? this_1.fieldKeys[newFieldName] ? this_1.fieldKeys[newFieldName] : this_1.fields.length : newFieldName;
                        if (this_1.fields.indexOf(newFieldName) === -1) {
                          this_1.fields.push(newFieldName);
                        }
                        item[this_1.fieldKeys[newFieldName]] = isInRangeAvail ? void 0 : new Date(newDate.setMinutes(date.getMinutes())).toString();
                      }
                      break;
                    case "Seconds":
                      {
                        var newFieldName = i_1 === group.groupInterval.length - 1 ? fieldName : fieldName + "_date_group_seconds";
                        groupFields[newFieldName] = interval;
                        this_1.fieldKeys[newFieldName] = this_1.dataSourceSettings.type === "CSV" ? this_1.fieldKeys[newFieldName] ? this_1.fieldKeys[newFieldName] : this_1.fields.length : newFieldName;
                        if (this_1.fields.indexOf(newFieldName) === -1) {
                          this_1.fields.push(newFieldName);
                        }
                        item[this_1.fieldKeys[newFieldName]] = isInRangeAvail ? void 0 : new Date(newDate.setSeconds(date.getSeconds())).toString();
                      }
                      break;
                  }
                }
              }
            } else if (!isNaN(Number(item[this_1.fieldKeys[fieldName]])) && group.type === "Number") {
              var isInRangeAvail = this_1.getRange(group, Number(item[this_1.fieldKeys[fieldName]]));
              item[this_1.fieldKeys[fieldName]] = isInRangeAvail ? void 0 : item[this_1.fieldKeys[fieldName]];
            } else if (item[this_1.fieldKeys[fieldName]] && group.type === "Custom" && group.customGroups && group.customGroups.length > 0) {
              var newFieldName = fieldName + "_custom_group";
              var customGroups = group.customGroups;
              var groupValue = void 0;
              this_1.groupingFieldsInfo[fieldName] = fieldName;
              this_1.groupingFieldsInfo[newFieldName] = fieldName;
              for (var i_2 = 0, len_2 = customGroups.length; i_2 < len_2; i_2++) {
                var cGroup = customGroups[i_2];
                if (cGroup.items && cGroup.items.length > 1) {
                  customGroupFieldName = newFieldName;
                  this_1.fieldKeys[newFieldName] = this_1.dataSourceSettings.type === "CSV" ? this_1.fieldKeys[newFieldName] ? this_1.fieldKeys[newFieldName] : this_1.fields.length : newFieldName;
                  if (this_1.fields.indexOf(newFieldName) === -1) {
                    this_1.fields.push(newFieldName);
                  }
                  var isDataMatch = PivotUtil.inArray(item[this_1.fieldKeys[fieldName]].toString(), cGroup.items) === -1 ? false : true;
                  item[this_1.fieldKeys[newFieldName]] = isDataMatch ? cGroup.groupName && cGroup.groupName !== "" ? cGroup.groupName : this_1.localeObj.getConstant("group") + " " + i_2 : groupValue && groupValue !== item[this_1.fieldKeys[fieldName]].toString() ? groupValue : item[this_1.fieldKeys[fieldName]].toString();
                  groupValue = item[this_1.fieldKeys[newFieldName]];
                }
              }
            }
            var keys = Object.keys(item);
            var isCompleteSet = [];
            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
              var key = keys_1[_i];
              isCompleteSet.push(item[key] ? true : false);
            }
            fieldkeySet = isCompleteSet.indexOf(false) === -1 && keys.length === Object.keys(data[0]).length ? item : fieldkeySet;
          }
          if (group.type === "Date") {
            var isDataSource = false;
            var axisFields = [this_1.dataSourceSettings.rows, this_1.dataSourceSettings.columns, this_1.dataSourceSettings.values, this_1.dataSourceSettings.filters];
            var groupKeys = Object.keys(groupFields);
            var gCnt = Object.keys(groupKeys).length;
            var groupField = void 0;
            for (var _a = 0, axisFields_1 = axisFields; _a < axisFields_1.length; _a++) {
              var axis = axisFields_1[_a];
              if (!isDataSource && axis) {
                var cnt = axis.length;
                var i_3 = 0;
                while (i_3 < cnt) {
                  if (axis[i_3].name === fieldName) {
                    isDataSource = true;
                    var actualField = axis[i_3];
                    axis.splice(i_3, 1);
                    var dataFields = this_1.dataSourceSettings.rows;
                    dataFields = dataFields.concat(this_1.dataSourceSettings.columns, this_1.dataSourceSettings.values, this_1.dataSourceSettings.filters);
                    while (gCnt--) {
                      var caption_1 = actualField.caption ? actualField.caption : actualField.name;
                      if (this_1.clonedReport) {
                        var clonedFields = this_1.clonedReport.rows;
                        clonedFields = clonedFields.concat(this_1.clonedReport.columns, this_1.clonedReport.values, this_1.clonedReport.filters);
                        var cloneField = PivotUtil.getFieldByName(groupKeys[gCnt], clonedFields);
                        if (cloneField) {
                          caption_1 = cloneField.caption ? cloneField.caption : cloneField.name;
                        }
                      }
                      if (!PivotUtil.getFieldByName(groupKeys[gCnt], dataFields)) {
                        groupField = groupFields[groupKeys[gCnt]];
                        caption_1 = caption_1.indexOf(" (") !== -1 && caption_1.indexOf(")") !== -1 ? caption_1.slice(caption_1.indexOf("(") + 1, caption_1.length - 1) : caption_1;
                        var newField = {
                          name: groupKeys[gCnt],
                          caption: (this_1.localeObj ? this_1.localeObj.getConstant(groupField) : groupField) + " (" + caption_1 + ")",
                          type: "Count",
                          showNoDataItems: actualField.showNoDataItems,
                          baseField: actualField.baseField,
                          baseItem: actualField.baseItem,
                          showFilterIcon: actualField.showFilterIcon,
                          showSortIcon: actualField.showSortIcon,
                          showEditIcon: actualField.showEditIcon,
                          showRemoveIcon: actualField.showRemoveIcon,
                          showSubTotals: actualField.showValueTypeIcon,
                          allowDragAndDrop: actualField.allowDragAndDrop,
                          expandAll: actualField.expandAll,
                          groupName: actualField.groupName
                        };
                        axis.splice(i_3, 0, newField);
                        this_1.groupingFieldsInfo[newField.name] = fieldName;
                      } else {
                        this_1.groupingFieldsInfo[groupKeys[gCnt]] = fieldName;
                      }
                    }
                    break;
                  } else if (axis[i_3].name.indexOf(fieldName) > -1) {
                    var axisField = groupFields[axis[i_3].name];
                    var currentField = axis.filter(function(axisField2) {
                      return axisField2.name === fieldName;
                    })[0];
                    if (!isNullOrUndefined(currentField)) {
                      var currentFieldCaption = currentField.caption ? currentField.caption.indexOf(" (") !== -1 && currentField.caption.indexOf(")") !== -1 ? currentField.caption.slice(currentField.caption.indexOf("(") + 1, currentField.caption.length - 1) : currentField.caption : fieldName;
                      axis[i_3].caption = (this_1.localeObj ? this_1.localeObj.getConstant(axisField) : currentField) + " (" + currentFieldCaption + ")";
                    }
                  }
                  i_3++;
                }
                if (isDataSource) {
                  break;
                }
              }
            }
            gCnt = Object.keys(groupKeys).length;
            var field = this_1.getMappingField(fieldName, this_1.clonedReport ? this_1.clonedReport.fieldMapping : this_1.dataSourceSettings.fieldMapping);
            var caption_2 = field.caption ? field.caption : fieldName;
            while (gCnt--) {
              groupField = groupFields[groupKeys[gCnt]];
              for (var i_4 = 0, len_3 = this_1.dataSourceSettings.formatSettings.length; i_4 < len_3; i_4++) {
                if (this_1.dataSourceSettings.formatSettings[i_4].name === groupKeys[gCnt]) {
                  this_1.dataSourceSettings.formatSettings.splice(i_4, 1);
                  break;
                }
              }
              if (groupField !== "Quarters" && groupField !== "QuarterYear") {
                var formatSettings = {
                  name: groupKeys[gCnt],
                  type: ["Years", "Months", "Days"].indexOf(groupField) > -1 ? "date" : "time",
                  format: groupField === "Years" ? "yyyy" : groupField === "Months" ? "MMM" : groupField === "Days" ? "d-MMM" : groupField === "Hours" ? "hh a" : groupField === "Minutes" ? ":mm" : groupField === "Seconds" ? ":ss" : void 0
                };
                this_1.dataSourceSettings.formatSettings.push(formatSettings);
              }
              if (!isDataSource) {
                var mappingField = this_1.getMappingField(groupKeys[gCnt], this_1.dataSourceSettings.fieldMapping);
                if (groupKeys[gCnt] !== fieldName && isNullOrUndefined(mappingField.name)) {
                  var newField = {
                    name: groupKeys[gCnt],
                    caption: (this_1.localeObj ? this_1.localeObj.getConstant(groupField) : groupField) + " (" + caption_2 + ")"
                  };
                  this_1.dataSourceSettings.fieldMapping.push(newField);
                  this_1.groupingFieldsInfo[newField.name] = fieldName;
                } else if (groupKeys[gCnt] !== fieldName) {
                  mappingField.caption = (this_1.localeObj ? this_1.localeObj.getConstant(groupField) : groupField) + " (" + caption_2 + ")";
                  this_1.groupingFieldsInfo[mappingField.name] = fieldName;
                }
              }
            }
            if (!isDataSource) {
              var mappingField = this_1.getMappingField(fieldName, this_1.dataSourceSettings.fieldMapping);
              groupField = groupFields[fieldName];
              if (groupKeys[gCnt] !== fieldName && isNullOrUndefined(mappingField.name)) {
                var newField = {
                  name: fieldName,
                  caption: (this_1.localeObj ? this_1.localeObj.getConstant(groupField) : groupField) + " (" + caption_2 + ")"
                };
                this_1.dataSourceSettings.fieldMapping.push(newField);
                this_1.groupingFieldsInfo[newField.name] = fieldName;
              } else {
                mappingField.caption = (this_1.localeObj ? this_1.localeObj.getConstant(groupField) : groupField) + " (" + caption_2 + ")";
                this_1.groupingFieldsInfo[mappingField.name] = fieldName;
              }
            }
          } else if (group.type === "Number" && group.rangeInterval) {
            var cEndValue = void 0;
            var framedSet = [];
            var unframedSet = [];
            var dataLength = data.length;
            var cnt = 0;
            this_1.groupingFields[fieldName] = fieldName;
            var endingAt = void 0;
            var groupName = [];
            while (cnt < dataLength) {
              var numericFieldName = Number(data[cnt][fieldName]);
              unframedSet.push(numericFieldName);
              if (!isNaN(numericFieldName) && framedSet.indexOf(numericFieldName) === -1) {
                framedSet.push(numericFieldName);
              }
              cnt++;
            }
            dataLength = data.length;
            cnt = 0;
            while (cnt < dataLength) {
              var currentData = data[cnt];
              if (currentData && !isNaN(Number(currentData[fieldName]))) {
                endingAt = typeof group.endingAt === "string" ? parseInt(group.endingAt, 10) : group.endingAt;
                cEndValue = endingAt ? endingAt : Math.max.apply(Math, framedSet);
                var decimalCnt = !Number.isInteger(group.rangeInterval) ? this_1.countDecimalPlaces(group.rangeInterval) : 0;
                var range = void 0;
                switch (decimalCnt) {
                  case 10:
                    range = 1e-10;
                    break;
                  case 9:
                    range = 1e-9;
                    break;
                  case 8:
                    range = 1e-8;
                    break;
                  case 7:
                    range = 1e-7;
                    break;
                  case 6:
                    range = 1e-6;
                    break;
                  case 5:
                    range = 1e-5;
                    break;
                  case 4:
                    range = 1e-4;
                    break;
                  case 3:
                    range = 1e-3;
                    break;
                  case 2:
                    range = 0.01;
                    break;
                  case 1:
                    range = 0.1;
                    break;
                  default:
                    range = 1;
                }
                var currentStartValue = Number.isInteger(group.rangeInterval) ? Math.floor(Number(currentData[fieldName])) : Number(currentData[fieldName].toFixed(decimalCnt));
                var currentEndValue = Number.isInteger(group.rangeInterval) ? Math.floor(Number(currentStartValue + (group.rangeInterval - 1))) : Number((currentStartValue + group.rangeInterval).toFixed(decimalCnt));
                if (currentStartValue >= groupName[0] && currentStartValue <= groupName[groupName.length - 1]) {
                  var startValue = groupName[0];
                  var endValue = Number.isInteger(group.rangeInterval) ? Math.floor(groupName[groupName.length - 1]) : Number(groupName[groupName.length - 1].toFixed(decimalCnt));
                  this_1.processGrouping(currentData, fieldName, startValue, endValue, cEndValue, group.rangeInterval, decimalCnt);
                  if (isNullOrUndefined(this_1.groupedDataType[fieldName])) {
                    this_1.groupedDataType[fieldName] = "string";
                  }
                } else {
                  if (groupName.length === 0) {
                    for (var i_5 = currentStartValue; i_5 <= currentEndValue; i_5 = Number((i_5 + range).toFixed(decimalCnt))) {
                      groupName.push(i_5);
                    }
                    var startValue = groupName[0];
                    var endValue = Number.isInteger(group.rangeInterval) ? Math.floor(groupName[groupName.length - 1]) : Number(groupName[groupName.length - 1].toFixed(decimalCnt));
                    this_1.processGrouping(currentData, fieldName, startValue, endValue, cEndValue, group.rangeInterval, decimalCnt);
                    if (isNullOrUndefined(this_1.groupedDataType[fieldName])) {
                      this_1.groupedDataType[fieldName] = "string";
                    }
                  } else {
                    var startValue = Number.isInteger(group.rangeInterval) ? Math.floor(groupName[groupName.length - 1]) + 1 : Number(groupName[groupName.length - 1].toFixed(decimalCnt));
                    var endValue = Number.isInteger(group.rangeInterval) ? Math.floor(startValue + (group.rangeInterval - 1)) : Number((startValue + group.rangeInterval).toFixed(decimalCnt));
                    var grouping = true;
                    groupName.splice(0, groupName.length);
                    while (grouping) {
                      if (currentStartValue >= startValue && currentStartValue <= endValue) {
                        this_1.processGrouping(currentData, fieldName, startValue, endValue, cEndValue, group.rangeInterval, decimalCnt);
                        if (isNullOrUndefined(this_1.groupedDataType[fieldName])) {
                          this_1.groupedDataType[fieldName] = "string";
                        }
                        groupName.push(startValue);
                        groupName.push(endValue);
                        grouping = false;
                      }
                      startValue = Number.isInteger(group.rangeInterval) ? endValue + 1 : endValue;
                      endValue = Number.isInteger(group.rangeInterval) ? Math.floor(startValue + (group.rangeInterval - 1)) : Number((startValue + group.rangeInterval).toFixed(decimalCnt));
                    }
                  }
                }
                var keys = Object.keys(currentData);
                var isCompleteSet = [];
                for (var _b = 0, keys_2 = keys; _b < keys_2.length; _b++) {
                  var key = keys_2[_b];
                  isCompleteSet.push(currentData[key] ? true : false);
                }
                fieldkeySet = isCompleteSet.indexOf(false) === -1 && keys.length === Object.keys(data[0]).length ? currentData : fieldkeySet;
              }
              cnt++;
            }
            var axisFields = [this_1.dataSourceSettings.rows, this_1.dataSourceSettings.columns, this_1.dataSourceSettings.values, this_1.dataSourceSettings.filters];
            for (var _c = 0, axisFields_2 = axisFields; _c < axisFields_2.length; _c++) {
              var fields = axisFields_2[_c];
              var field = PivotUtil.getFieldByName(fieldName, fields);
              if (field) {
                field = field.properties ? field.properties : field;
                field.type = "Count";
              }
            }
            for (var i_6 = 0, len_4 = this_1.dataSourceSettings.formatSettings.length; i_6 < len_4; i_6++) {
              if (this_1.dataSourceSettings.formatSettings[i_6].name === fieldName) {
                this_1.dataSourceSettings.formatSettings.splice(i_6, 1);
                break;
              }
            }
          } else if (group.type === "Custom" && customGroupFieldName) {
            var customFieldName = customGroupFieldName;
            var isDataSource = false;
            var axisFields = [this_1.dataSourceSettings.rows, this_1.dataSourceSettings.columns, this_1.dataSourceSettings.values, this_1.dataSourceSettings.filters];
            var dataFields = this_1.dataSourceSettings.rows;
            dataFields = dataFields.concat(this_1.dataSourceSettings.columns, this_1.dataSourceSettings.values, this_1.dataSourceSettings.filters);
            var pattern = [];
            if (!caption || caption === "") {
              pattern = customFieldName.match(/_custom_group/g);
            }
            var parentField = PivotUtil.getFieldByName(fieldName.replace(/_custom_group/g, ""), dataFields);
            var customGroupField = PivotUtil.getFieldByName(customFieldName, dataFields);
            for (var _d = 0, axisFields_3 = axisFields; _d < axisFields_3.length; _d++) {
              var axis = axisFields_3[_d];
              if (!isDataSource && axis) {
                var cnt = axis.length;
                var i_7 = 0;
                while (i_7 < cnt) {
                  if (axis[i_7].name === group.name && !customGroupField) {
                    isDataSource = true;
                    var actualField = axis[i_7];
                    var newField = {
                      name: customFieldName,
                      caption: !caption || caption === "" ? (parentField.caption ? parentField.caption : parentField.name) + (pattern.length + 1) : caption,
                      type: "Count",
                      showNoDataItems: actualField.showNoDataItems,
                      baseField: actualField.baseField,
                      baseItem: actualField.baseItem,
                      showSubTotals: actualField.showValueTypeIcon,
                      allowDragAndDrop: actualField.allowDragAndDrop,
                      showFilterIcon: actualField.showFilterIcon,
                      showSortIcon: actualField.showSortIcon,
                      showRemoveIcon: actualField.showRemoveIcon,
                      showEditIcon: actualField.showEditIcon,
                      expandAll: actualField.expandAll,
                      groupName: actualField.groupName
                    };
                    axis.splice(i_7, 0, newField);
                    this_1.groupingFieldsInfo[newField.name] = fieldName;
                    this_1.groupingFieldsInfo[fieldName] = fieldName;
                    break;
                  } else if (axis[i_7].name === customFieldName && customGroupField) {
                    var newField = {
                      name: customGroupField.name,
                      caption: !caption || caption === "" ? customGroupField.caption : caption,
                      type: customGroupField.type,
                      showNoDataItems: customGroupField.showNoDataItems,
                      baseField: customGroupField.baseField,
                      baseItem: customGroupField.baseItem,
                      showRemoveIcon: customGroupField.showRemoveIcon,
                      showSubTotals: customGroupField.showValueTypeIcon,
                      allowDragAndDrop: customGroupField.allowDragAndDrop,
                      showFilterIcon: customGroupField.showFilterIcon,
                      showSortIcon: customGroupField.showSortIcon,
                      showEditIcon: customGroupField.showEditIcon,
                      expandAll: customGroupField.expandAll,
                      groupName: customGroupField.groupName
                    };
                    axis.splice(i_7, 1, newField);
                    this_1.groupingFieldsInfo[newField.name] = fieldName;
                    this_1.groupingFieldsInfo[fieldName] = fieldName;
                    break;
                  }
                  i_7++;
                }
                if (isDataSource) {
                  break;
                }
              }
            }
            var formatfield = PivotUtil.getFieldByName(fieldName, PivotUtil.cloneFormatSettings(this_1.dataSourceSettings.formatSettings));
            if (formatfield) {
              formatfield.name = customFieldName;
              this_1.dataSourceSettings.formatSettings.push(formatfield);
            }
            this_1.groupingFields[fieldName] = fieldName;
          }
          this_1.groupingFields = extend(this_1.groupingFields, groupFields);
        } else {
          if (i2 < groupElements2.length - 1) {
            return "continue";
          } else {
            return {
              value: fieldkeySet
            };
          }
        }
      };
      var this_1 = this;
      for (var i = 0, groupElements = this.dataSourceSettings.groupSettings; i < groupElements.length; i++) {
        var state_1 = _loop_1(i, groupElements);
        if (typeof state_1 === "object") return state_1.value;
      }
      return fieldkeySet;
    };
    PivotEngine2.prototype.countDecimalPlaces = function(num) {
      var decimalValue = num.toString();
      return decimalValue.includes(".") ? decimalValue.split(".")[1].length : 0;
    };
    PivotEngine2.prototype.processGrouping = function(currentData, fieldName, startValue, endValue, cEndValue, rangeInterval, decimalCnt) {
      if (Number.isInteger(currentData[fieldName]) || !Number.isInteger(currentData[fieldName]) && (Number(currentData[fieldName]) < endValue || cEndValue <= Number(currentData[fieldName]))) {
        currentData[fieldName] = this.getNumberGroupHeaders(startValue, endValue, cEndValue);
      } else if (!Number.isInteger(currentData[fieldName]) && Number(currentData[fieldName]) >= endValue) {
        currentData[fieldName] = this.getNumberGroupHeaders(Number((startValue + rangeInterval).toFixed(decimalCnt)), Number((endValue + rangeInterval).toFixed(decimalCnt)), cEndValue);
      }
    };
    PivotEngine2.prototype.getNumberGroupHeaders = function(startValue, endValue, cEndValue) {
      var fieldName = startValue === endValue ? startValue.toString() : cEndValue >= startValue && cEndValue <= endValue ? cEndValue === startValue ? startValue.toString() : startValue.toString() + "-" + cEndValue.toString() : startValue.toString() + "-" + endValue.toString();
      return fieldName;
    };
    PivotEngine2.prototype.getRange = function(group, cValue) {
      var isRangeAvail;
      if (group.type === "Date") {
        var cDate = new Date(cValue);
        var startDate = typeof group.startingAt === "string" ? new Date(group.startingAt) : group.startingAt;
        var endDate = typeof group.endingAt === "string" ? new Date(group.endingAt) : group.endingAt;
        if (startDate && cDate.getTime() < startDate.getTime() || endDate && cDate.getTime() > endDate.getTime()) {
          isRangeAvail = true;
        } else {
          isRangeAvail = false;
        }
      } else {
        var startValue = typeof group.startingAt === "string" ? parseFloat(group.startingAt) : group.startingAt;
        var endValue = typeof group.endingAt === "string" ? parseFloat(group.endingAt) : group.endingAt;
        if (!isNaN(startValue) && cValue < startValue || !isNaN(endValue) && cValue > endValue) {
          isRangeAvail = true;
        } else {
          isRangeAvail = false;
        }
      }
      return isRangeAvail;
    };
    PivotEngine2.prototype.getPercentFormat = function(formatField, currentField) {
      var isHavingFormat = !isNullOrUndefined(formatField[currentField]) && !isNullOrUndefined(this.formatFields[currentField].format) ? this.formatFields[currentField].format.toLowerCase().match(/p[0-9]/) : void 0;
      return !isNullOrUndefined(isHavingFormat) ? Number(this.formatFields[currentField].format.replace(/[^0-9]/g, "")) : 2;
    };
    PivotEngine2.prototype.getFormattedFields = function(dataSourceSettings) {
      this.formatFields = this.setFormattedFields(dataSourceSettings.formatSettings);
    };
    PivotEngine2.prototype.setFormattedFields = function(formatSettings) {
      var cnt = formatSettings.length;
      var formatFields = {};
      while (cnt--) {
        formatFields[formatSettings[cnt].name] = formatSettings[cnt];
        if (formatSettings[cnt].type) {
          this.dateFormatFunction[formatSettings[cnt].name] = {
            exactFormat: this.globalize.getDateFormat(formatSettings[cnt]),
            fullFormat: this.globalize.getDateFormat({
              format: "yyyy/MM/dd/HH/mm/ss",
              type: formatSettings[cnt].type
            })
          };
        }
      }
      return formatFields;
    };
    PivotEngine2.prototype.getFieldList = function(fields, isSort, isValueFilteringEnabled) {
      var _this = this;
      var type;
      var lenE = this.dataSourceSettings.excludeFields.length - 1;
      while (lenE > -1) {
        var index = this.fields.indexOf(this.dataSourceSettings.excludeFields[lenE]);
        if (index !== -1) {
          this.fields.splice(index, 1);
        }
        if (this.fieldList) {
          delete this.fieldList[this.dataSourceSettings.excludeFields[lenE]];
        }
        lenE--;
      }
      var keys = this.fields;
      var dataFields = extend([], this.dataSourceSettings.rows, null, true);
      dataFields = dataFields.concat(this.dataSourceSettings.columns, this.dataSourceSettings.values, this.dataSourceSettings.filters);
      this.getFormattedFields(this.dataSourceSettings);
      this.getCalculatedField(keys);
      keys = this.fields;
      var len = keys.length;
      var dataTypes = ["string", "number", "datetime", "date", "boolean"];
      if (this.savedFieldList) {
        this.fieldList = this.savedFieldList;
        while (len--) {
          var key = keys[len];
          var field = this.getMappingField(key, this.dataSourceSettings.fieldMapping);
          if (this.fieldList[key]) {
            this.fieldList[key].isSelected = false;
            this.fieldList[key].index = len;
            this.fieldList[key].filter = [];
            this.fieldList[key].sort = isSort ? "Ascending" : "None";
            this.fieldList[key].isExcelFilter = false;
            this.fieldList[key].filterType = "";
            this.fieldList[key].showFilterIcon = field && "showFilterIcon" in field ? field.showFilterIcon : true;
            this.fieldList[key].showRemoveIcon = field && "showRemoveIcon" in field ? field.showRemoveIcon : true;
            this.fieldList[key].showSortIcon = field && "showSortIcon" in field ? field.showSortIcon : true;
            this.fieldList[key].showEditIcon = field && "showEditIcon" in field ? field.showEditIcon : true;
            this.fieldList[key].showValueTypeIcon = field && "showValueTypeIcon" in field ? field.showValueTypeIcon : true;
            this.fieldList[key].allowDragAndDrop = field && "allowDragAndDrop" in field ? field.allowDragAndDrop : true;
            this.fieldList[key].isCalculatedField = field && "isCalculatedField" in field ? field.isCalculatedField : false;
            this.fieldList[key].showNoDataItems = field && "showNoDataItems" in field ? field.showNoDataItems : false;
            this.fieldList[key].showSubTotals = field && "showSubTotals" in field ? field.showSubTotals : true;
            this.fieldList[key].expandAll = field && "expandAll" in field ? field.expandAll : false;
            this.fieldList[key].pid = field && "groupName" in field && field.groupName ? field.groupName : this.groupingFieldsInfo[key] ? this.groupingFieldsInfo[key] : void 0;
            if (this.isValueFiltersAvail && isValueFilteringEnabled) {
              this.fieldList[key].dateMember = [];
              this.fieldList[key].members = {};
              this.fieldList[key].isMembersFilled = false;
            }
            this.updateMembersOrder(key);
          } else {
            if (!isNullOrUndefined(this.groupedDataType[key])) {
              type = this.groupedDataType[key];
            } else {
              type = field && "dataType" in field && field.dataType && dataTypes.indexOf(field.dataType.toLowerCase()) > -1 ? field.dataType.toLowerCase() : type;
            }
            this.fieldList[key] = {
              caption: field && "caption" in field && field.caption ? field.caption : key,
              id: key,
              type: key.indexOf("_custom_group") !== -1 || key.indexOf("_date_group") !== -1 ? "string" : type === void 0 || type === "undefined" ? "number" : type,
              isSelected: false,
              sort: isSort ? "Ascending" : "None",
              filterType: "",
              index: len,
              filter: [],
              isCustomField: key.indexOf("_custom_group") !== -1 || key.indexOf("_date_group") !== -1,
              showRemoveIcon: field && "showRemoveIcon" in field ? field.showRemoveIcon : true,
              showFilterIcon: field && "showFilterIcon" in field ? field.showFilterIcon : true,
              showSortIcon: field && "showSortIcon" in field ? field.showSortIcon : true,
              showNoDataItems: field && "showNoDataItems" in field ? field.showNoDataItems : false,
              isCalculatedField: field && "isCalculatedField" in field ? field.isCalculatedField : false,
              showEditIcon: field && "showEditIcon" in field ? field.showEditIcon : true,
              showValueTypeIcon: field && "showValueTypeIcon" in field ? field.showValueTypeIcon : true,
              allowDragAndDrop: field && "allowDragAndDrop" in field ? field.allowDragAndDrop : true,
              showSubTotals: field && "showSubTotals" in field ? field.showSubTotals : true,
              expandAll: field && "expandAll" in field ? field.expandAll : false,
              pid: field && "groupName" in field && field.groupName ? field.groupName : this.groupingFieldsInfo[key] ? this.groupingFieldsInfo[key] : void 0,
              aggregateType: field && "type" in field ? field.type : (key.indexOf("_custom_group") !== -1 || key.indexOf("_date_group") !== -1 ? "string" : type === void 0 || type === "undefined" ? "number" : type) === "number" ? "Sum" : "Count",
              baseField: field && "baseField" in field ? field.baseField : void 0,
              baseItem: field && "baseItem" in field ? field.baseItem : void 0
            };
            this.updateMembersOrder(key);
          }
        }
      } else {
        this.fieldList = {};
        var _loop_2 = function() {
          var key2 = keys[len];
          var field2 = this_2.getMappingField(key2, this_2.dataSourceSettings.fieldMapping);
          if (!isNullOrUndefined(this_2.groupedDataType[key2])) {
            type = this_2.groupedDataType[key2];
          } else {
            type = field2 && "dataType" in field2 && field2.dataType && dataTypes.indexOf(field2.dataType.toLowerCase()) > -1 ? field2.dataType.toLowerCase() : PivotUtil.getType(fields[this_2.fieldKeys[key2]]);
          }
          if (type === void 0 || type === "undefined") {
            if (this_2.dataSourceSettings.groupSettings.length > 0) {
              this_2.dataSourceSettings.groupSettings.forEach(function(setting) {
                if (_this.fieldKeys[key2] === setting.name && setting.type.toLocaleLowerCase() === "number") {
                  type = "string";
                } else {
                  type = "number";
                }
              });
            } else {
              type = "number";
            }
          }
          this_2.fieldList[key2] = {
            id: key2,
            pid: field2 && "groupName" in field2 && field2.groupName ? field2.groupName : this_2.groupingFieldsInfo[key2] ? this_2.groupingFieldsInfo[key2] : void 0,
            caption: field2 && "caption" in field2 && field2.caption ? field2.caption : key2,
            type: key2.indexOf("_custom_group") !== -1 || key2.indexOf("_date_group") !== -1 ? "string" : type,
            filterType: "",
            index: len,
            filter: [],
            sort: isSort ? "Ascending" : "None",
            isSelected: false,
            isCustomField: key2.indexOf("_custom_group") !== -1 || key2.indexOf("_date_group") !== -1,
            showFilterIcon: field2 && "showFilterIcon" in field2 ? field2.showFilterIcon : true,
            showRemoveIcon: field2 && "showRemoveIcon" in field2 ? field2.showRemoveIcon : true,
            showSortIcon: field2 && "showSortIcon" in field2 ? field2.showSortIcon : true,
            showEditIcon: field2 && "showEditIcon" in field2 ? field2.showEditIcon : true,
            showValueTypeIcon: field2 && "showValueTypeIcon" in field2 ? field2.showValueTypeIcon : true,
            allowDragAndDrop: field2 && "allowDragAndDrop" in field2 ? field2.allowDragAndDrop : true,
            showSubTotals: field2 && "showSubTotals" in field2 ? field2.showSubTotals : true,
            showNoDataItems: field2 && "showNoDataItems" in field2 ? field2.showNoDataItems : false,
            isCalculatedField: field2 && "isCalculatedField" in field2 ? field2.isCalculatedField : false,
            expandAll: field2 && "expandAll" in field2 ? field2.expandAll : false,
            aggregateType: field2 && "type" in field2 ? field2.type : (key2.indexOf("_custom_group") !== -1 || key2.indexOf("_date_group") !== -1 ? "string" : type === void 0 || type === "undefined" ? "number" : type) === "number" ? "Sum" : "Count",
            baseField: field2 && "baseField" in field2 ? field2.baseField : void 0,
            baseItem: field2 && "baseItem" in field2 ? field2.baseItem : void 0
          };
          this_2.updateMembersOrder(key2);
        };
        var this_2 = this;
        while (len--) {
          _loop_2();
        }
      }
      this.groupedDataType = {};
      this.updateTreeViewData(dataFields);
    };
    PivotEngine2.prototype.updateMembersOrder = function(key) {
      for (var _i = 0, _a = this.dataSourceSettings.sortSettings; _i < _a.length; _i++) {
        var sortInfo = _a[_i];
        if (key === sortInfo.name && sortInfo.membersOrder) {
          this.fieldList[key].membersOrder = sortInfo.membersOrder;
          break;
        }
      }
    };
    PivotEngine2.prototype.getMappingField = function(key, fieldMapping) {
      var field = {};
      if (fieldMapping && fieldMapping.length > 0) {
        for (var index = 0, cnt = fieldMapping.length; index < cnt; index++) {
          if (fieldMapping[index].name === key) {
            field = fieldMapping[index];
            break;
          }
        }
      }
      return field;
    };
    PivotEngine2.prototype.updateFieldList = function(savedFieldList) {
      var keys = this.fields;
      var len = keys.length;
      while (len--) {
        this.fieldList[keys[len]].isExcelFilter = savedFieldList[keys[len]].isExcelFilter;
      }
    };
    PivotEngine2.prototype.updateTreeViewData = function(fields) {
      var _this = this;
      var cnt = fields.length;
      var lnt = this.dataSourceSettings.calculatedFieldSettings.length;
      while (cnt--) {
        if (this.fieldList[fields[cnt].name]) {
          var field = this.fieldList[fields[cnt].name];
          field.type = fields[cnt].dataType ? fields[cnt].dataType.toLowerCase() : field.type;
          field.caption = fields[cnt].caption ? fields[cnt].caption : fields[cnt].name;
          field.isSelected = true;
          field.showNoDataItems = fields[cnt].showNoDataItems;
          field.aggregateType = fields[cnt].type;
          field.baseField = fields[cnt].baseField;
          field.baseItem = fields[cnt].baseItem;
          field.allowDragAndDrop = fields[cnt].allowDragAndDrop;
          field.showFilterIcon = fields[cnt].showFilterIcon;
          field.showSortIcon = fields[cnt].showSortIcon;
          field.showRemoveIcon = fields[cnt].showRemoveIcon;
          field.showValueTypeIcon = fields[cnt].showValueTypeIcon;
          field.showEditIcon = fields[cnt].showEditIcon;
          field.showSubTotals = fields[cnt].showSubTotals;
          field.expandAll = fields[cnt].expandAll;
        }
      }
      while (lnt--) {
        if (this.fieldList[this.dataSourceSettings.calculatedFieldSettings[lnt].name]) {
          this.fieldList[this.dataSourceSettings.calculatedFieldSettings[lnt].name].aggregateType = "CalculatedField";
          this.fieldList[this.dataSourceSettings.calculatedFieldSettings[lnt].name].isCalculatedField = true;
          this.fieldList[this.dataSourceSettings.calculatedFieldSettings[lnt].name].formula = this.dataSourceSettings.calculatedFieldSettings[lnt].formula;
        }
      }
      var unBoundFields = this.dataSourceSettings.groupSettings.filter(function(groupSetting) {
        return !fields.some(function(field2) {
          return groupSetting.name === field2.name;
        });
      });
      var groupingTypes = ["_date_group_years", "_date_group_quarters", "_date_group_quarterYear", "_date_group_months", "_date_group_days", "_date_group_hours", "_date_group_minutes", "_date_group_seconds"];
      unBoundFields.forEach(function(unBoundField) {
        var fieldName = unBoundField.name;
        var fieldType = unBoundField.type.toLowerCase();
        Object.keys(_this.fieldList).forEach(function(key) {
          if (fieldType === "date" && !isNullOrUndefined(unBoundField.caption) && (groupingTypes.some(function(dateType) {
            return key === "" + fieldName + dateType;
          }) || key === fieldName)) {
            _this.fieldList[key].caption = _this.fieldList[key].caption.replace(unBoundField.name, unBoundField.caption);
          } else if (fieldType === "custom" && !isNullOrUndefined(unBoundField.caption) && key === fieldName + "_custom_group") {
            _this.fieldList[key].caption = unBoundField.caption;
          } else if (fieldType === "number" && !isNullOrUndefined(unBoundField.caption) && key === fieldName) {
            _this.fieldList[key].caption = unBoundField.caption;
          }
        });
      });
    };
    PivotEngine2.prototype.getCalculatedField = function(keys) {
      for (var _i = 0, _a = this.dataSourceSettings.calculatedFieldSettings; _i < _a.length; _i++) {
        var field = _a[_i];
        this.calculatedFields[field.name] = extend({}, field, null, true);
        this.calculatedFields[field.name].actualFormula = field.formula;
      }
      var fieldKeys = Object.keys(this.calculatedFields);
      var _loop_3 = function(calc2, cnt2) {
        var field2 = this_3.calculatedFields[fieldKeys[calc2]];
        var calcProperties = field2.properties;
        var actualFormula = (calcProperties ? calcProperties.formula : field2.formula).trim();
        var formula = actualFormula.replace(/"/g, "");
        field2.formula = formula.indexOf("^") > -1 ? this_3.powerFunction(formula) : formula;
        if (field2.formula.indexOf("Math.min(") === -1 && field2.formula.indexOf("min(") > -1) {
          field2.formula = field2.formula.replace(/min\(/g, "Math.min(");
        }
        if (field2.formula.indexOf("Math.max(") === -1 && field2.formula.indexOf("max(") > -1) {
          field2.formula = field2.formula.replace(/max\(/g, "Math.max(");
        }
        if (field2.formula.indexOf("Math.abs(") === -1 && field2.formula.indexOf("abs(") > -1) {
          field2.formula = field2.formula.replace(/abs\(/g, "Math.abs(");
        }
        field2.name = calcProperties ? calcProperties.name : field2.name;
        if (this_3.dataSourceSettings.type === "CSV") {
          if (keys.indexOf(field2.name) === -1) {
            keys.push(field2.name);
          }
        } else {
          keys = keys.filter(function(key) {
            return key !== field2.name;
          });
          keys.push(field2.name);
        }
        var formulaType = actualFormula.split('"');
        for (var len = 0, lmt = formulaType.length; len < lmt; len++) {
          var type = formulaType[len].trim();
          var aggregateValue = type.split(/[ .:;?!~,`"&|()<>{}[\]\r\n/\\]+/);
          var matchStrings = type.match(/^([^()]+)\((.*)\)$/);
          var selectedString = aggregateValue[0] === "DistinctCount" ? "DistinctCount" : aggregateValue[0] === "PopulationStDev" ? "PopulationStDev" : aggregateValue[0] === "SampleStDev" ? "SampleStDev" : aggregateValue[0] === "PopulationVar" ? "PopulationVar" : aggregateValue[0] === "SampleVar" ? "SampleVar" : aggregateValue[0];
          if (["Sum", "Count", "Min", "Max", "Avg", "Product", "DistinctCount", "PopulationStDev", "SampleStDev", "PopulationVar", "SampleVar", "Median"].indexOf(selectedString) !== -1) {
            var index = keys.indexOf(aggregateValue[1]) === -1 && matchStrings[2] ? keys.indexOf(matchStrings[2]) : keys.indexOf(aggregateValue[1]);
            if (!this_3.calculatedFormulas[field2.name]) {
              this_3.calculatedFormulas[field2.name] = [{
                index,
                type: selectedString,
                formula: type
              }];
            } else {
              this_3.calculatedFormulas[field2.name].push({
                index,
                type: selectedString,
                formula: type
              });
            }
          }
        }
      };
      var this_3 = this;
      for (var calc = 0, cnt = fieldKeys.length; calc < cnt; calc++) {
        _loop_3(calc, cnt);
      }
      this.fields = keys;
    };
    PivotEngine2.prototype.validateFilters = function(data) {
      this.isValueFiltersAvail = false;
      var filterElements = data.filterSettings ? data.filterSettings : [];
      var dataFields = extend([], this.dataSourceSettings.rows, null, true);
      dataFields = dataFields.concat(this.dataSourceSettings.columns);
      for (var _i = 0, filterElements_1 = filterElements; _i < filterElements_1.length; _i++) {
        var filter = filterElements_1[_i];
        for (var _a = 0, dataFields_1 = dataFields; _a < dataFields_1.length; _a++) {
          var field = dataFields_1[_a];
          if (filter.name === field.name && filter.type === "Value") {
            this.isValueFiltersAvail = true;
            break;
          }
        }
        if (this.isValueFiltersAvail) {
          break;
        }
      }
    };
    PivotEngine2.prototype.validateValueFields = function() {
      this.isValueHasAdvancedAggregate = false;
      for (var _i = 0, _a = this.dataSourceSettings.values; _i < _a.length; _i++) {
        var value = _a[_i];
        if (["DifferenceFrom", "PercentageOfDifferenceFrom", "PercentageOfParentRowTotal", "PercentageOfParentColumnTotal", "PercentageOfParentTotal", "RunningTotals"].indexOf(value.type) !== -1) {
          this.isValueHasAdvancedAggregate = true;
          break;
        }
      }
    };
    PivotEngine2.prototype.fetchFieldMembers = function(fieldName) {
      var fieldPosition = this.fieldList[fieldName].index;
      this.generateMembers(fieldPosition, /* @__PURE__ */ new Set());
    };
    PivotEngine2.prototype.generateMembers = function(kl, formulaFields) {
      var dlen = this.data.length;
      var keys = this.fields;
      var fList = this.fieldList;
      var key = keys[kl];
      if (!fList[key].members || this.allowDataCompression) {
        fList[key].members = {};
        if (this.allowDataCompression) {
          fList[key].isMembersFilled = false;
        }
      }
      if (!fList[key].dateMember || this.allowDataCompression) {
        fList[key].dateMember = [];
      }
      var members = fList[key].members;
      var dateMember = fList[key].dateMember;
      if ((fList[key].isSelected || formulaFields.has(kl)) && !fList[key].isMembersFilled) {
        var isDataAvail = Object.keys(members).length > 0;
        var membersCnt = 0;
        var isFieldHasExpandAll = fList[key].expandAll;
        var isDateType = PivotUtil.isDateField(key, this);
        for (var dl = 0; dl < dlen; dl++) {
          var memberkey = this.data[dl][this.fieldKeys[key]];
          var mkey = memberkey;
          mkey = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(mkey) : mkey;
          if (!isDataAvail) {
            var formattedValue = isDateType ? this.getFormattedValue(mkey, key) : {
              formattedText: mkey === null ? this.localeObj ? this.localeObj.getConstant("null") : String(mkey) : mkey === void 0 ? this.localeObj ? key in this.groupingFields ? this.localeObj.getConstant("groupOutOfRange") : this.localeObj.getConstant("undefined") : String(mkey) : mkey.toString(),
              actualText: mkey === null ? this.localeObj ? this.localeObj.getConstant("null") : String(mkey) : mkey === void 0 ? this.localeObj ? key in this.groupingFields ? this.localeObj.getConstant("groupOutOfRange") : this.localeObj.getConstant("undefined") : String(mkey) : mkey
            };
            if (!Object.prototype.hasOwnProperty.call(members, mkey)) {
              membersCnt++;
              members[mkey] = {
                index: [dl],
                ordinal: membersCnt,
                isDrilled: this.isExpandAll || isFieldHasExpandAll,
                caption: formattedValue.formattedText
              };
              dateMember.push({
                formattedText: formattedValue.formattedText,
                actualText: isDateType ? formattedValue.dateText : formattedValue.actualText
              });
            } else {
              members[mkey].index.push(dl);
            }
          }
          var memberName = isNullOrUndefined(memberkey) ? memberkey : fList[key].type === "number" ? !isNaN(Number(memberkey)) ? Number(memberkey) : void 0 : 1;
          var valueMatrixInfo = {
            ordinal: members[mkey].ordinal,
            member: memberName
          };
          if (!this.valueMatrix[dl]) {
            this.valueMatrix[dl] = [];
          }
          this.valueMatrix[dl][kl] = valueMatrixInfo;
        }
        fList[key].isMembersFilled = true;
      }
    };
    PivotEngine2.prototype.fillFieldMembers = function() {
      var keys = this.fields;
      var fList = this.fieldList;
      var kLn = keys.length;
      if (this.data.length - this.valueMatrix.length < 0) {
        this.valueMatrix = this.valueMatrix.slice(0, this.data.length);
      }
      var formulaFields = /* @__PURE__ */ new Set();
      if (this.calculatedFormulas && Object.keys(this.calculatedFormulas).length > 0) {
        for (var key in this.calculatedFormulas) {
          if (fList[key] && fList[key].isSelected) {
            var calculatedFormulas = this.calculatedFormulas[key];
            for (var i = 0; i < calculatedFormulas.length; i++) {
              var values = calculatedFormulas[i];
              formulaFields.add(values.index);
            }
          }
        }
      }
      for (var kl = 0; kl < kLn; kl++) {
        this.generateMembers(kl, formulaFields);
      }
    };
    PivotEngine2.prototype.generateValueMatrix = function() {
      var keys = this.fields;
      var len = this.data.length;
      var keyLen = keys.length;
      var flList = this.fieldList;
      while (len--) {
        var tkln = keyLen;
        while (tkln--) {
          var key = keys[tkln];
          var field = flList[key];
          if (field.isMembersFilled) {
            var fieldValue = this.data[len][this.fieldKeys[key]];
            this.valueMatrix[len][tkln].member = isNullOrUndefined(fieldValue) ? fieldValue : field.type === "number" ? !isNaN(Number(fieldValue)) ? Number(fieldValue) : void 0 : 1;
          }
        }
      }
    };
    PivotEngine2.prototype.updateSortSettings = function(sortSettings, isSort) {
      for (var sln = 0, slt = sortSettings ? sortSettings.length : 0; sln < slt && isSort; sln++) {
        if (this.fieldList[sortSettings[sln].name]) {
          this.fieldList[sortSettings[sln].name].sort = sortSettings[sln].order;
        }
      }
    };
    PivotEngine2.prototype.updateFilterMembers = function(source) {
      var filterRw = this.filterMembers;
      var list = {};
      var isInclude = this.getFilters(source, list);
      var dln = this.valueMatrix.length;
      if (isInclude) {
        var keys = list.include.index;
        for (var ln = 0; ln < keys.length; ln++) {
          if (list.exclude === void 0 || list.exclude.indexObject[keys[ln]] === void 0) {
            filterRw.push(keys[ln]);
          }
        }
      } else {
        for (var ln = 0; ln < dln; ln++) {
          if (list.exclude === void 0 || list.exclude.indexObject[ln] === void 0) {
            filterRw.push(ln);
          }
        }
      }
    };
    PivotEngine2.prototype.getFilters = function(source, ilist) {
      var filterElements = source.filterSettings ? source.filterSettings : [];
      var isInclude = false;
      var filter = [];
      for (var rln = 0, rlt = filterElements.length; rln < rlt; rln++) {
        var filterElement = filterElements[rln].properties ? filterElements[rln].properties : filterElements[rln];
        if (this.fieldList[filterElement.name] && this.fieldList[filterElement.name].isSelected && this.isValidFilterField(filterElement, source.allowMemberFilter, source.allowLabelFilter)) {
          this.applyLabelFilter(filterElement);
          if (filterElement) {
            filter = filterElement.items;
          }
          if (filterElement.type && filterElement.type === "Include") {
            this.frameFilterList(filter, filterElement.name, ilist, "include", filterElement.showLabelFilter, isInclude);
            isInclude = true;
          } else {
            this.frameFilterList(filter, filterElement.name, ilist, "exclude", filterElement.showLabelFilter);
          }
          if (filterElement.showLabelFilter) {
            filterElement.items = [];
            filterElement.type = filterElement.showDateFilter ? "Date" : filterElement.showNumberFilter ? "Number" : "Label";
          }
        }
      }
      return isInclude;
    };
    PivotEngine2.prototype.isValidFilterField = function(filterElement, allowMemberFiltering, allowLabelFiltering) {
      var fieldName = filterElement.name;
      var isValidFilterElement = false;
      var filterTypes = ["Include", "Exclude"];
      var dataFields = extend([], this.dataSourceSettings.rows, null, true);
      dataFields = dataFields.concat(this.dataSourceSettings.columns);
      if (this.fieldList[fieldName].isSelected && allowMemberFiltering && filterTypes.indexOf(filterElement.type) >= 0) {
        isValidFilterElement = true;
        for (var _i = 0, _a = this.dataSourceSettings.values; _i < _a.length; _i++) {
          var field = _a[_i];
          if (fieldName === field.name) {
            isValidFilterElement = false;
            break;
          }
        }
      } else if (allowLabelFiltering) {
        for (var _b = 0, dataFields_2 = dataFields; _b < dataFields_2.length; _b++) {
          var field = dataFields_2[_b];
          if (fieldName === field.name && ["Label", "Date", "Number"].indexOf(filterElement.type) >= 0) {
            isValidFilterElement = true;
            break;
          }
        }
      }
      return isValidFilterElement;
    };
    PivotEngine2.prototype.applyLabelFilter = function(filterElement) {
      if (["Label", "Date", "Number"].indexOf(filterElement.type) >= 0) {
        var members = Object.keys(this.fieldList[filterElement.name].members);
        filterElement.showLabelFilter = true;
        if (filterElement.type === "Label") {
          filterElement.items = this.getLabelFilterMembers(members, filterElement.condition, filterElement.value1, filterElement.value2);
        } else if (filterElement.type === "Date") {
          filterElement.showDateFilter = true;
          var date1 = typeof filterElement.value1 === "string" ? new Date(filterElement.value1) : filterElement.value1;
          var date2 = typeof filterElement.value2 === "string" ? new Date(filterElement.value2) : filterElement.value2;
          filterElement.items = this.getDateFilterMembers(members, filterElement.name, filterElement.condition, date1, date2);
        } else {
          filterElement.showNumberFilter = true;
          filterElement.items = [];
          for (var _i = 0, members_1 = members; _i < members_1.length; _i++) {
            var member = members_1[_i];
            var operand1 = this.getParsedValue(filterElement.name, filterElement.value1);
            var operand2 = this.getParsedValue(filterElement.name, filterElement.value2);
            var cValue = this.getParsedValue(filterElement.name, member);
            if (this.validateFilterValue(cValue, filterElement.condition, operand1, operand2)) {
              filterElement.items.push(member);
            }
          }
        }
        var excludeOperators = ["DoesNotBeginWith", "DoesNotContains", "DoesNotEndsWith", "DoesNotEquals", "NotBetween"];
        filterElement.type = filterElement.condition ? excludeOperators.indexOf(filterElement.condition) > -1 && !filterElement.showNumberFilter ? "Exclude" : "Include" : "Exclude";
      } else {
        filterElement.showLabelFilter = false;
      }
    };
    PivotEngine2.prototype.getLabelFilterMembers = function(members, operator, value1, value2) {
      var items = [];
      for (var _i = 0, members_2 = members; _i < members_2.length; _i++) {
        var member = members_2[_i];
        var filterValue = member.toLowerCase();
        if (value1.toString()) {
          switch (operator) {
            case "Equals":
            case "DoesNotEquals":
              if (filterValue === value1.toLowerCase()) {
                items.push(member);
              }
              break;
            case "BeginWith":
            case "DoesNotBeginWith":
              if (filterValue.indexOf(value1.toLowerCase()) === 0) {
                items.push(member);
              }
              break;
            case "EndsWith":
            case "DoesNotEndsWith":
              if (filterValue.match(value1.toLowerCase() + "$") !== null) {
                items.push(member);
              }
              break;
            case "Contains":
            case "DoesNotContains":
              if (filterValue.indexOf(value1.toLowerCase()) > -1) {
                items.push(member);
              }
              break;
            case "GreaterThan":
              if (filterValue > value1.toLowerCase()) {
                items.push(member);
              }
              break;
            case "GreaterThanOrEqualTo":
              if (filterValue >= value1.toLowerCase()) {
                items.push(member);
              }
              break;
            case "LessThan":
              if (filterValue < value1.toLowerCase()) {
                items.push(member);
              }
              break;
            case "LessThanOrEqualTo":
              if (filterValue <= value1.toLowerCase()) {
                items.push(member);
              }
              break;
            case "Between":
            case "NotBetween":
              if (filterValue >= value1.toLowerCase() && filterValue <= value2.toLowerCase()) {
                items.push(member);
              }
              break;
            default:
              if (filterValue === value1.toLowerCase()) {
                items.push(member);
              }
              break;
          }
        }
      }
      return items;
    };
    PivotEngine2.prototype.getDateFilterMembers = function(members, name, operator, value1, value2) {
      var items = [];
      for (var _i = 0, members_3 = members; _i < members_3.length; _i++) {
        var member = members_3[_i];
        var filterValue = new Date(member);
        if (value1) {
          switch (operator) {
            case "Equals":
            case "DoesNotEquals":
              if (this.getFormattedValue(filterValue.toString(), name).formattedText === this.getFormattedValue(value1.toString(), name).formattedText) {
                items.push(this.getFormattedValue(member, name).formattedText);
              }
              break;
            case "After":
              if (filterValue.getTime() > value1.getTime()) {
                items.push(this.getFormattedValue(member, name).formattedText);
              }
              break;
            case "AfterOrEqualTo":
              if (filterValue.getTime() >= value1.getTime()) {
                items.push(this.getFormattedValue(member, name).formattedText);
              }
              break;
            case "Before":
              if (filterValue.getTime() < value1.getTime()) {
                items.push(this.getFormattedValue(member, name).formattedText);
              }
              break;
            case "BeforeOrEqualTo":
              if (filterValue.getTime() <= value1.getTime()) {
                items.push(this.getFormattedValue(member, name).formattedText);
              }
              break;
            case "Between":
            case "NotBetween":
              if (filterValue.getTime() >= value1.getTime() && filterValue.getTime() <= value2.getTime()) {
                items.push(this.getFormattedValue(member, name).formattedText);
              }
              break;
            default:
              if (this.getFormattedValue(filterValue.toString(), name).formattedText === this.getFormattedValue(value1.toString(), name).formattedText) {
                items.push(this.getFormattedValue(member, name).formattedText);
              }
              break;
          }
        }
      }
      return items;
    };
    PivotEngine2.prototype.validateFilterValue = function(val, operator, value1, value2) {
      var isMemberInclude = false;
      if (typeof value1 === "number") {
        switch (operator) {
          case "Equals":
            if (val === value1) {
              isMemberInclude = true;
            }
            break;
          case "DoesNotEquals":
            if (val !== value1) {
              isMemberInclude = true;
            }
            break;
          case "GreaterThan":
            if (val > value1) {
              isMemberInclude = true;
            }
            break;
          case "GreaterThanOrEqualTo":
            if (val >= value1) {
              isMemberInclude = true;
            }
            break;
          case "LessThan":
            if (val < value1) {
              isMemberInclude = true;
            }
            break;
          case "LessThanOrEqualTo":
            if (val <= value1) {
              isMemberInclude = true;
            }
            break;
          case "Between":
            if (val >= value1 && val <= value2) {
              isMemberInclude = true;
            }
            break;
          case "NotBetween":
            if (!(val >= value1 && val <= value2)) {
              isMemberInclude = true;
            }
            break;
          default:
            if (val !== value1) {
              isMemberInclude = true;
            }
            break;
        }
      }
      return isMemberInclude;
    };
    PivotEngine2.prototype.frameFilterList = function(filter, name, list, type, isLabelFilter, isInclude) {
      if (!list[type]) {
        list[type] = {
          indexObject: {},
          index: []
        };
        this.updateFilter(filter, name, list, type, isLabelFilter, isInclude);
      } else {
        this.updateFilter(filter, name, list, type, isLabelFilter, isInclude);
      }
    };
    PivotEngine2.prototype.updateFilter = function(filter, name, list, type, isLabelFilter, isInclude) {
      var fln = 0;
      var field = this.fieldList[name];
      field.filter = filter;
      field.filterType = type;
      field.isExcelFilter = isLabelFilter;
      var members = PivotUtil.getFormattedMembers(field.members, name, this);
      var allowFil = isInclude;
      var final = {};
      var filterObj = {};
      final[type] = {
        indexObject: {},
        index: []
      };
      this.fieldFilterMem[name] = {
        memberObj: {}
      };
      while (!isNullOrUndefined(filter[fln])) {
        if (members[filter[fln]]) {
          var indx = members[filter[fln]].index;
          if (type === "include") {
            for (var iln = 0, ilt = indx.length; iln < ilt; iln++) {
              if (!allowFil || list[type].indexObject[indx[iln]] !== void 0) {
                final[type].indexObject[indx[iln]] = indx[iln];
                final[type].index.push(indx[iln]);
              }
            }
          } else {
            for (var iln = 0, ilt = indx.length; iln < ilt; iln++) {
              if (list[type].indexObject[indx[iln]] === void 0) {
                list[type].indexObject[indx[iln]] = indx[iln];
                list[type].index.push(indx[iln]);
              }
            }
            this.fieldFilterMem[name].memberObj[filter[fln]] = filter[fln];
          }
        }
        fln++;
      }
      if (type === "include") {
        list[type] = final[type];
        for (var iln = 0; iln < filter.length; iln++) {
          if (members[filter[iln]]) {
            filterObj[filter[iln]] = filter[iln];
          }
        }
        var items = Object.keys(members);
        for (var iln = 0, ilt = items.length; iln < ilt; iln++) {
          if (filterObj[items[iln]] === void 0) {
            this.fieldFilterMem[name].memberObj[items[iln]] = items[iln];
          }
        }
      }
    };
    PivotEngine2.prototype.applyValueFiltering = function(rowData, level, rows, columns, valueFilter, rowFilterData, type) {
      this.isValueFiltered = false;
      var allMember = extend({}, type === "row" && this.rowGrandTotal ? this.rowGrandTotal : type === "column" && this.columnGrandTotal ? this.columnGrandTotal : !(this.dataSourceSettings.grandTotalsPosition === "Top") ? rows[rows.length - 1] : rows[0], null, true);
      this.getFilteredData(rows, columns, valueFilter, rowFilterData, level, rowData.name, allMember, type);
      if (this.isValueFiltered) {
        if (type === "row" && this.rowGrandTotal === null || type === "column" && this.columnGrandTotal === null) {
          rowFilterData.push(allMember);
        }
        rows = rowFilterData;
      }
      return rows;
    };
    PivotEngine2.prototype.getFilteredData = function(rows, columns, filterSettings, rowFilterData, level, fieldName, allMember, type) {
      var rLen = rows.length;
      for (var i = 0; i < rLen; i++) {
        if (filterSettings[fieldName]) {
          if (rows[i].level === level) {
            this.isValueFiltered = true;
            this.fieldList[fieldName].isExcelFilter = true;
            var value = 0;
            var measure = filterSettings[fieldName].measure;
            var mPos = this.fieldList[measure].index;
            var aggregate = this.fieldList[measure].aggregateType;
            this.rawIndexObject = {};
            value = type === "row" ? this.getAggregateValue(rows[i].index, columns.indexObject, mPos, aggregate, false) : this.getAggregateValue(columns.index, rows[i].indexObject, mPos, aggregate, false);
            var cellDetails = {
              fieldName: measure,
              row: rows[i],
              column: columns,
              value,
              cellSets: this.getValueCellInfo ? this.getCellSet(this.rawIndexObject) : [],
              rowCellType: rows[i].hasChild && rows[i].isDrilled ? "subTotal" : rows[i].type === "grand sum" ? "grandTotal" : "value",
              columnCellType: columns.hasChild && columns.isDrilled ? "subTotal" : columns.type === "grand sum" ? "grandTotal" : "value",
              aggregateType: aggregate,
              skipFormatting: false
            };
            if (this.getValueCellInfo) {
              this.getValueCellInfo(cellDetails);
            }
            value = cellDetails.value;
            this.rawIndexObject = {};
            var operand1 = this.getParsedValue(measure, filterSettings[fieldName].value1);
            var operand2 = this.getParsedValue(measure, filterSettings[fieldName].value2);
            if (!this.validateFilterValue(value, filterSettings[fieldName].condition, operand1, operand2) && rows[i].type !== "grand sum") {
              var data = this.removefilteredData(rows[i], this.valueFilteredData);
              var row = data ? data : rows[i];
              this.validateFilteredParentData(row, this.valueFilteredData, allMember, 0, level, type);
            } else if (rows[i].type !== "grand sum") {
              rowFilterData.push(extend({}, rows[i], null, true));
              rowFilterData[rowFilterData.length - 1].isLevelFiltered = true;
            }
          } else if (rows[i].hasChild && rows[i].members.length > 0 && rows[i].type !== "grand sum") {
            rowFilterData.push(extend({}, rows[i], null, true));
            rowFilterData[rowFilterData.length - 1].members = [];
            rowFilterData[rowFilterData.length - 1].isLevelFiltered = true;
            this.getFilteredData(rows[i].members, columns, filterSettings, rowFilterData[rowFilterData.length - 1].members, level, fieldName, allMember, type);
          }
        }
      }
    };
    PivotEngine2.prototype.getParsedValue = function(measure, value) {
      var cValue = value ? value.toString() : "";
      if (this.formatFields[measure] && value) {
        var formatSetting = extend({}, this.formatFields[measure], null, true);
        delete formatSetting.name;
        return this.globalize.parseNumber(cValue, formatSetting);
      } else {
        return this.globalize.parseNumber(cValue, {
          format: "N"
        });
      }
    };
    PivotEngine2.prototype.removefilteredData = function(row, rowFilterData) {
      var rows = extend([], rowFilterData, null, true);
      var filteredData;
      for (var i = 0; i < rows.length; i++) {
        if (row.isLevelFiltered && row.axis === rows[i].axis && row.valueSort.levelName === rows[i].valueSort.levelName && row.actualText === rows[i].actualText && row.axis === rows[i].axis && row.level === rows[i].level && row.ordinal === rows[i].ordinal) {
          filteredData = rows[i];
          rowFilterData.splice(i, 1);
          break;
        } else if (rowFilterData[i].hasChild && rowFilterData[i].members.length > 0) {
          this.removefilteredData(row, rowFilterData[i].members);
        }
      }
      return filteredData;
    };
    PivotEngine2.prototype.validateFilteredParentData = function(row, rows, allMemberData, i, level, type) {
      if (rows.length > 0) {
        for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
          var rowFilteredData = rows_1[_i];
          if (rowFilteredData.level === i) {
            if (type === "row") {
              var index = row.index;
              for (var _a = 0, index_1 = index; _a < index_1.length; _a++) {
                var key = index_1[_a];
                if (allMemberData.index.indexOf(key) >= 0) {
                  allMemberData.index.splice(allMemberData.index.indexOf(key), 1);
                }
                if (row.valueSort.levelName.toString().indexOf(rowFilteredData.valueSort.levelName.toString()) >= 0 && rowFilteredData.level !== level && rowFilteredData.index.indexOf(key) >= 0) {
                  rowFilteredData.index.splice(rowFilteredData.index.indexOf(key), 1);
                }
              }
            } else {
              var index = row.indexObject;
              for (var _b = 0, _c = Object.keys(index); _b < _c.length; _b++) {
                var key = _c[_b];
                if (Object.prototype.hasOwnProperty.call(index, key)) {
                  delete allMemberData.indexObject[key];
                  if (row.valueSort.levelName.toString().indexOf(rowFilteredData.valueSort.levelName.toString()) >= 0 && rowFilteredData.level !== level) {
                    delete rowFilteredData.indexObject[key];
                  }
                }
              }
            }
            if (rowFilteredData && rowFilteredData.members.length > 0 && rowFilteredData.members[0].level === i + 1 && rowFilteredData.members[0].level !== level) {
              this.validateFilteredParentData(row, rowFilteredData.members, allMemberData, i + 1, level, type);
            }
          }
        }
      } else {
        if (type === "row") {
          var index = row.index;
          for (var _d = 0, index_2 = index; _d < index_2.length; _d++) {
            var key = index_2[_d];
            if (allMemberData.index.indexOf(key) >= 0) {
              allMemberData.index.splice(allMemberData.index.indexOf(key), 1);
            }
          }
        } else {
          var index = row.indexObject;
          for (var _e = 0, _f = Object.keys(index); _e < _f.length; _e++) {
            var key = _f[_e];
            if (Object.prototype.hasOwnProperty.call(index, key)) {
              delete allMemberData.indexObject[key];
            }
          }
        }
      }
    };
    PivotEngine2.prototype.updateFramedHeaders = function(framedHeaders, dataHeaders, filteredHeaders, headers, type) {
      for (var _i = 0, framedHeaders_1 = framedHeaders; _i < framedHeaders_1.length; _i++) {
        var dHeader = framedHeaders_1[_i];
        this.isHeaderAvail = false;
        if (this.validateFilteredHeaders(dHeader, filteredHeaders, type) || dHeader.type === "grand sum") {
          if (type === "row") {
            this.rowCount += this.rowValuesLength;
          } else {
            this.columnCount += this.customProperties.isTabularLayout ? this.rowMaxLevel + this.colValuesLength : this.colValuesLength;
          }
          headers.push(extend({}, dHeader, null, true));
          headers[headers.length - 1].members = [];
          if (dHeader.hasChild && dHeader.isDrilled && dHeader.members.length > 0) {
            this.updateFramedHeaders(dHeader.members, dataHeaders, filteredHeaders, headers[headers.length - 1].members, type);
          }
        }
      }
      return this.filterFramedHeaders;
    };
    PivotEngine2.prototype.validateFilteredHeaders = function(dHeader, filteredHeaders, type) {
      for (var _i = 0, filteredHeaders_1 = filteredHeaders; _i < filteredHeaders_1.length; _i++) {
        var vHeader = filteredHeaders_1[_i];
        if (!this.isHeaderAvail) {
          if (dHeader.actualText === vHeader.actualText && dHeader.level === vHeader.level && dHeader.valueSort.levelName === vHeader.valueSort.levelName) {
            if (type === "row") {
              if (vHeader.index.length > 0) {
                this.isHeaderAvail = true;
                dHeader.index = vHeader.index;
                return true;
              } else {
                this.isHeaderAvail = false;
                dHeader.index = vHeader.index;
                return false;
              }
            } else {
              if (Object.keys(vHeader.indexObject).length > 0) {
                this.isHeaderAvail = true;
                dHeader.indexObject = vHeader.indexObject;
                return true;
              } else {
                this.isHeaderAvail = false;
                dHeader.indexObject = vHeader.indexObject;
                return false;
              }
            }
          } else if (vHeader.hasChild && vHeader.members.length > 0 && vHeader.type !== "grand sum") {
            this.validateFilteredHeaders(dHeader, vHeader.members, type);
          }
        }
      }
      return this.isHeaderAvail;
    };
    PivotEngine2.prototype.isEmptyDataAvail = function(rowHeaders, columnHeaders) {
      this.isEmptyData = false;
      if (rowHeaders.length > 0 && rowHeaders[rowHeaders.length - 1].type === "grand sum" && rowHeaders[rowHeaders.length - 1].index.length === 0) {
        this.isEmptyData = true;
      }
      if (columnHeaders.length > 0 && columnHeaders[columnHeaders.length - 1].type === "grand sum" && Object.keys(columnHeaders[columnHeaders.length - 1].indexObject).length === 0) {
        this.isEmptyData = true;
      }
      if (rowHeaders.length === 0 || columnHeaders.length === 0) {
        this.isEmptyData = true;
      }
    };
    PivotEngine2.prototype.updateGridData = function(dataSource) {
      this.updateDataSourceSettings(dataSource, true);
      this.data = dataSource.dataSource;
      if (this.allowDataCompression) {
        this.actualData = this.data;
        this.data = this.getGroupedRawData(dataSource);
      }
      for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {
        var field = _a[_i];
        this.fieldList[field].members = {};
        this.fieldList[field].dateMember = [];
        this.fieldList[field].isMembersFilled = false;
      }
      this.fillFieldMembers();
      this.filterMembers = [];
      this.cMembers = [];
      this.rMembers = [];
      this.updateFilterMembers(dataSource);
      this.isEditing = true;
      this.isDrillThrough = true;
      this.generateGridData(dataSource);
      this.isEditing = false;
    };
    PivotEngine2.prototype.generateGridData = function(dataSource, requireDatasourceUpdate, isExport, headerCollection, isScrolled) {
      if (requireDatasourceUpdate === void 0) {
        requireDatasourceUpdate = false;
      }
      if (isScrolled === void 0) {
        isScrolled = false;
      }
      if (isNullOrUndefined(headerCollection) && this.customProperties.isTabularLayout) {
        this.rowMaxLevel = 0;
      }
      this.updateDataSourceSettings(dataSource, requireDatasourceUpdate);
      var columns = dataSource.columns ? dataSource.columns : [];
      var data = this.data;
      var rows = dataSource.rows ? dataSource.rows : [];
      var filterSettings = dataSource.filterSettings;
      var values = dataSource.values ? dataSource.values : [];
      this.removeCount = 0;
      this.isExpandAll = dataSource.expandAll;
      this.drilledMembers = dataSource.drilledMembers ? dataSource.drilledMembers : [];
      this.isEmptyData = false;
      var filterMembers = [];
      var showNoDataItems = rows[0] && rows[0].showNoDataItems || columns[0] && columns[0].showNoDataItems;
      if (showNoDataItems) {
        for (var ln = 0; ln < this.valueMatrix.length; ln++) {
          filterMembers.push(ln);
        }
      }
      for (var ln = 0; ln < this.filterMembers.length; ln++) {
        this.filterPosObj[this.filterMembers[ln]] = this.filterMembers[ln];
      }
      this.valueSortSettings.columnIndex = void 0;
      this.validateValueFields();
      this.frameDrillObject();
      if (!this.isValueFilterEnabled || this.isEditing) {
        if (!headerCollection) {
          this.isLastHeaderHasMeasures = true;
          this.columnCount = 0;
          this.rowCount = 0;
          this.cMembers = [];
          this.rMembers = [];
          if (rows.length !== 0 && values.length !== 0) {
            this.rMembers = this.getIndexedHeaders(rows, data, this.customProperties.isTabularLayout ? this.rowMaxLevel : 0, rows[0].showNoDataItems ? filterMembers : this.filterMembers, "row", "", this.allowValueFilter);
          }
          if (columns.length !== 0 && values.length !== 0) {
            this.cMembers = this.getIndexedHeaders(columns, data, 0, columns[0].showNoDataItems ? filterMembers : this.filterMembers, "column", "", this.allowValueFilter);
          }
          this.insertAllMembersCommon();
          this.saveDataHeaders = this.isValueFiltersAvail && dataSource.allowValueFilter ? {
            rowHeaders: extend([], this.rMembers, null, true),
            columnHeaders: extend([], this.cMembers, null, true)
          } : {};
        }
      }
      if (this.customProperties.isTabularLayout) {
        this.showSubTotalsAtBottom = true;
      }
      this.pivotValues = [];
      this.headerContent = [];
      this.valueContent = [];
      this.valueFilteredData = [];
      this.filterFramedHeaders = [];
      var rowheads = [];
      var colheads = [];
      var rowFilteredData = [];
      var columnFilteredData = [];
      var updatedRowMembers = [];
      var valuesCount = this.dataSourceSettings.values.length;
      if (this.isValueFiltersAvail && dataSource.allowValueFilter && !headerCollection) {
        this.valueFilteredData = [];
        var rowHeaders = this.saveDataHeaders.rowHeaders ? this.saveDataHeaders.rowHeaders : [];
        var columnHeaders = this.saveDataHeaders.columnHeaders ? this.saveDataHeaders.columnHeaders : [];
        if (filterSettings.length > 0) {
          var valueFilters = {};
          var valueFields = {};
          for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
            var value = values_1[_i];
            valueFields[value.name] = value;
          }
          for (var _a = 0, filterSettings_1 = filterSettings; _a < filterSettings_1.length; _a++) {
            var filter = filterSettings_1[_a];
            rowHeaders = rowFilteredData.length > 0 ? rowFilteredData : rowHeaders;
            columnHeaders = columnFilteredData.length > 0 ? columnFilteredData : columnHeaders;
            this.valueFilteredData = [];
            var filterElement = filter.properties ? filter.properties : filter;
            if (filterElement.type === "Value" && this.fieldList[filter.name] && this.fieldList[filter.name].isSelected) {
              valueFilters[filter.name] = filter;
              filterElement.items = [];
              var isAvail = false;
              var rLen = rows.length;
              var cLen = columns.length;
              for (var i = 0; i < rLen; i++) {
                if (filterElement.name === rows[i].name && valueFields[filterElement.measure] && !isAvail) {
                  isAvail = true;
                  rowFilteredData = this.applyValueFiltering(rows[i], i, rowHeaders, this.columnGrandTotal ? this.columnGrandTotal : this.dataSourceSettings.grandTotalsPosition === "Top" && this.dataSourceSettings.showGrandTotals ? columnHeaders[0] : columnHeaders[columnHeaders.length - 1], valueFilters, this.valueFilteredData, "row");
                  break;
                }
              }
              for (var j = 0; j < cLen; j++) {
                if (filterElement.name === columns[j].name && valueFields[filterElement.measure] && !isAvail) {
                  isAvail = true;
                  columnFilteredData = this.applyValueFiltering(columns[j], j, columnHeaders, this.rowGrandTotal ? this.rowGrandTotal : this.dataSourceSettings.grandTotalsPosition === "Top" && this.dataSourceSettings.showGrandTotals ? rowHeaders[0] : rowHeaders[rowHeaders.length - 1], valueFilters, this.valueFilteredData, "column");
                  break;
                }
              }
            }
          }
        }
        rowFilteredData = rowFilteredData.length > 0 ? rowFilteredData : rowHeaders;
        columnFilteredData = columnFilteredData.length > 0 ? columnFilteredData : columnHeaders;
        this.isEmptyDataAvail(rowFilteredData, columnFilteredData);
        var savedFieldList = PivotUtil.getClonedFieldList(this.fieldList);
        var fields = this.data[0];
        this.getFieldList(fields, this.enableSort, dataSource.allowValueFilter);
        this.fillFieldMembers();
        this.updateSortSettings(dataSource.sortSettings, this.enableSort);
        this.filterMembers = [];
        this.updateFilterMembers(dataSource);
        this.isLastHeaderHasMeasures = true;
        this.rMembers = rows.length !== 0 ? this.getIndexedHeaders(rows, data, 0, rows[0].showNoDataItems ? filterMembers : this.filterMembers, "row", "") : [];
        this.cMembers = columns.length !== 0 ? this.getIndexedHeaders(columns, data, 0, columns[0].showNoDataItems ? filterMembers : this.filterMembers, "column", "") : [];
        this.insertAllMembersCommon();
        this.updateFieldList(savedFieldList);
        this.rowCount = 0;
        this.columnCount = 0;
        this.rMembers = this.updateFramedHeaders(this.rMembers, this.rMembers, rowFilteredData, this.filterFramedHeaders, "row");
        this.filterFramedHeaders = [];
        this.cMembers = this.updateFramedHeaders(this.cMembers, this.cMembers, columnFilteredData, this.filterFramedHeaders, "column");
        this.isValueFilterEnabled = true;
      }
      if (!headerCollection) {
        this.applyValueSorting();
      }
      if (this.isPagingOrVirtualizationEnabled) {
        if (!headerCollection) {
          this.headerCollection.rowHeaders = this.rMembers;
          this.headerCollection.columnHeaders = this.cMembers;
          this.headerCollection.rowHeadersCount = this.rowCount;
          this.headerCollection.columnHeadersCount = this.columnCount;
        } else {
          this.rMembers = headerCollection.rowHeaders;
          this.cMembers = headerCollection.columnHeaders;
          this.rowCount = this.customProperties.isTabularLayout ? this.rowCount + this.emptyRowsLength : headerCollection.rowHeadersCount;
          this.columnCount = headerCollection.columnHeadersCount;
        }
        this.calculatePagingValues();
      }
      if (!this.valueAxis && this.isLastHeaderHasMeasures) {
        this.getAggregatedHeaders(rows, columns, this.rMembers, this.cMembers, values);
      }
      this.getHeaderData(rows, columns, values, updatedRowMembers, this.cMembers, colheads, this.pivotValues, 0, this.valueAxis ? 1 : valuesCount);
      this.insertSubTotals();
      this.getTableData(updatedRowMembers.length > 0 ? updatedRowMembers : this.rMembers, rowheads, colheads, 0, this.pivotValues, valuesCount, 0, this.rowGrandTotal ? this.rowGrandTotal : this.rMembers[this.rMembers.length - 1], this.columnGrandTotal ? this.columnGrandTotal : this.cMembers[this.cMembers.length - 1]);
      this.applyAdvancedAggregate(rowheads, colheads, this.pivotValues);
      if (this.customProperties.isTabularLayout) {
        this.pivotValues = this.getTabularPivotValues(requireDatasourceUpdate, false, isScrolled);
        this.setRowSpan();
        this.rowCount = this.rowCount - this.emptyRowsLength;
      }
      this.isEngineUpdated = true;
      this.isEmptyDataAvail(this.rMembers, this.cMembers);
      this.clearProperties(isExport);
    };
    PivotEngine2.prototype.updateHeaders = function(rowFlag, columnFlag) {
      rowFlag = isNullOrUndefined(rowFlag) ? this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showRowGrandTotals ? true : this.dataSourceSettings.rows.length > 0 ? false : true : rowFlag;
      if ((this.pageSettings && this.removeRowGrandTotal || !rowFlag && !this.rowGrandTotal) && this.rMembers[this.rMembers.length - 1].type === "grand sum") {
        this.rMembers = this.rMembers.slice(0, this.rMembers.length - 1);
      }
      columnFlag = isNullOrUndefined(columnFlag) ? this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showColumnGrandTotals ? true : this.dataSourceSettings.columns.length > 0 ? false : true : columnFlag;
      if ((this.pageSettings && this.removeColumnGrandTotal || !columnFlag && !this.columnGrandTotal) && this.cMembers[this.cMembers.length - 1].type === "grand sum") {
        this.cMembers = this.cMembers.slice(0, this.cMembers.length - 1);
      }
    };
    PivotEngine2.prototype.updatePivotValues = function(updateHeaders) {
      var rowFlag = this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showRowGrandTotals ? true : this.dataSourceSettings.rows.length > 0 ? false : true;
      var columnFlag = this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showColumnGrandTotals ? true : this.dataSourceSettings.columns.length > 0 ? false : true;
      if (updateHeaders) {
        this.updateHeaders(rowFlag, columnFlag);
      }
      if ((this.pageSettings && this.removeRowGrandTotal || !rowFlag && !this.rowGrandTotal) && this.valueContent.length > 0) {
        var slicePos = 1;
        if (this.valueAxis && this.dataSourceSettings.values.length > 0) {
          slicePos = 1 + this.dataSourceSettings.values.length;
        }
        if (this.pivotValues[this.pivotValues.length - slicePos] && this.pivotValues[this.pivotValues.length - slicePos][0].type === "grand sum") {
          this.pivotValues = this.pivotValues.slice(0, this.pivotValues.length - slicePos);
          this.valueContent = this.valueContent.slice(0, this.valueContent.length - slicePos);
        }
      }
      if ((this.pageSettings && this.removeColumnGrandTotal || !columnFlag && !this.columnGrandTotal) && this.headerContent.length > 0) {
        var slicePos = this.dataSourceSettings.values.length;
        if (this.valueAxis && this.dataSourceSettings.values.length > 0) {
          slicePos = 1;
        }
        if (this.pivotValues[0][this.pivotValues[0].length - slicePos] && this.pivotValues[0][this.pivotValues[0].length - slicePos].type === "grand sum") {
          for (var ln = 0; ln < this.pivotValues.length; ln++) {
            if (this.pivotValues[ln]) {
              this.pivotValues[ln] = this.pivotValues[ln].slice(0, this.pivotValues[ln].length - slicePos);
            }
            if (this.headerContent[ln]) {
              for (var pos = this.pivotValues[ln].length; pos < this.pivotValues[ln].length + slicePos; pos++) {
                delete this.headerContent[ln][pos];
              }
            }
          }
        }
      }
      this.removeRowGrandTotal = this.removeColumnGrandTotal = false;
    };
    PivotEngine2.prototype.onDrill = function(drilledItem) {
      if (!this.enableVirtualization && !this.enablePaging && this.customProperties.isTabularLayout) {
        this.rowMaxLevel = 0;
      }
      this.frameDrillObject(drilledItem);
      var headersInfo = this.getHeadersInfo(drilledItem.fieldName, drilledItem.axis);
      this.performDrillOperation(headersInfo.headers, drilledItem, headersInfo.fields, headersInfo.position, 0);
      this.headerCollection.rowHeadersCount = this.rowCount;
      this.headerCollection.columnHeadersCount = this.columnCount;
      if (headersInfo.axis === "row") {
        this.headerCollection.rowHeaders = headersInfo.headers;
      } else {
        this.headerCollection.columnHeaders = headersInfo.headers;
      }
      this.updateEngine();
    };
    PivotEngine2.prototype.onSort = function(sortItem, dataSource) {
      if (dataSource) {
        this.updateDataSourceSettings(dataSource, true);
      }
      var headersInfo = this.getHeadersInfo(sortItem.name, "");
      this.fieldList[sortItem.name].sort = sortItem.order;
      this.performSortOperation(headersInfo.headers, sortItem, headersInfo, 0);
      this.updateEngine();
    };
    PivotEngine2.prototype.onFilter = function(filterItem, dataSource) {
      this.updateDataSourceSettings(dataSource, true);
      var headersInfo = this.getHeadersInfo(filterItem.name, "");
      this.isLastHeaderHasMeasures = this.valueAxis && headersInfo.axis === "row" || !this.valueAxis && headersInfo.axis === "column" ? true : this.isLastHeaderHasMeasures;
      if (filterItem.type === "Include" && filterItem.items.length === this.fieldList[filterItem.name].dateMember.length) {
        this.fieldList[filterItem.name].filter = [];
        this.fieldList[filterItem.name].filterType = "";
      } else {
        this.fieldList[filterItem.name].filter = filterItem.items;
        this.fieldList[filterItem.name].filterType = filterItem.type;
      }
      var posObj = {};
      for (var _i = 0, _a = this.filterMembers; _i < _a.length; _i++) {
        var pos = _a[_i];
        posObj[pos] = pos;
      }
      this.filterMembers = [];
      this.fieldFilterMem = {};
      this.updateFilterMembers(dataSource);
      var addPos = this.filterMembers.filter(function(pos2) {
        return posObj[pos2] === void 0;
      });
      var itemsObj = {};
      for (var _b = 0, _c = filterItem.items; _b < _c.length; _b++) {
        var item = _c[_b];
        itemsObj[item] = item;
      }
      var showNoDataItems = this.dataSourceSettings.rows[0] && this.dataSourceSettings.rows[0].showNoDataItems || this.dataSourceSettings.columns[0] && this.dataSourceSettings.columns[0].showNoDataItems;
      if (showNoDataItems && this.columnKeys[filterItem.name]) {
        showNoDataItems = this.dataSourceSettings.columns[0] && this.dataSourceSettings.columns[0].showNoDataItems ? true : false;
      } else if (showNoDataItems && headersInfo.axis === "row") {
        showNoDataItems = this.dataSourceSettings.rows[0] && this.dataSourceSettings.rows[0].showNoDataItems ? true : false;
      }
      if (showNoDataItems) {
        var filterMembers = [];
        this.filterPosObj = {};
        for (var ln = 0; ln < addPos.length; ln++) {
          this.filterPosObj[addPos[ln]] = addPos[ln];
        }
        for (var ln = 0; ln < this.valueMatrix.length; ln++) {
          filterMembers.push(ln);
        }
        addPos = filterMembers;
      }
      this.performFilterCommonUpdate(filterItem, headersInfo, addPos);
      if (headersInfo.axis === "column") {
        headersInfo = this.getHeadersInfo("", "row");
        this.performFilterCommonUpdate(filterItem, headersInfo, addPos);
      } else {
        headersInfo = this.getHeadersInfo("", "column");
        this.performFilterCommonUpdate(filterItem, headersInfo, addPos);
      }
      this.frameHeaderObjectsCollection = false;
      this.headerObjectsCollection = {};
      if (this.customProperties.isTabularLayout) {
        this.rowCount = this.rowCount - this.emptyRowsLength;
      }
      this.updateEngine();
    };
    PivotEngine2.prototype.onAggregation = function(field, dataSource) {
      if (dataSource) {
        this.updateDataSourceSettings(dataSource, true);
      }
      this.fieldList[field.name].aggregateType = field.type;
      this.rMembers = this.headerCollection.rowHeaders;
      this.cMembers = this.headerCollection.columnHeaders;
      if (this.allowDataCompression) {
        this.data = this.getGroupedRawData(this.dataSourceSettings);
        this.generateValueMatrix();
      }
      this.updateEngine();
    };
    PivotEngine2.prototype.onCalcOperation = function(field, dataSourceSettings) {
      this.dataSourceSettings.calculatedFieldSettings = dataSourceSettings.calculatedFieldSettings ? dataSourceSettings.calculatedFieldSettings : [];
      this.dataSourceSettings.values = dataSourceSettings.values ? dataSourceSettings.values : [];
      this.rMembers = this.headerCollection.rowHeaders;
      this.cMembers = this.headerCollection.columnHeaders;
      this.getCalculatedField(this.fields);
      if (this.fieldList[field.name]) {
        this.fieldList[field.name].formula = field.formula;
      } else {
        this.fieldList[field.name] = {
          id: field.name,
          caption: field.name,
          type: "number",
          aggregateType: "CalculatedField",
          filterType: "",
          index: this.fields.length - 1,
          filter: [],
          sort: this.enableSort ? "Ascending" : "None",
          isSelected: true,
          isExcelFilter: false,
          formula: field.formula
        };
        if (this.valueAxis === 1) {
          this.headerCollection.rowHeadersCount = this.rowCount = this.rowCount / (this.dataSourceSettings.values.length - 1) * this.dataSourceSettings.values.length;
        } else {
          this.headerCollection.columnHeadersCount = this.columnCount = this.columnCount / (this.dataSourceSettings.values.length - 1) * this.dataSourceSettings.values.length;
        }
      }
      this.getFormattedFields(dataSourceSettings);
      this.fillFieldMembers();
      this.updateEngine();
    };
    PivotEngine2.prototype.performDrillOperation = function(headers, drilledItem, fields, position, currentPosition) {
      var count = 0;
      while (count < headers.length) {
        if (position === currentPosition) {
          var levelName = headers[count].valueSort.levelName.split(this.valueSortSettings.headerDelimiter);
          if (drilledItem.memberName === levelName.join(drilledItem.delimiter ? drilledItem.delimiter : "**")) {
            if (drilledItem.action === "down") {
              headers[count].isDrilled = true;
              headers[count].members = this.getIndexedHeaders(fields, this.data, position + 1, headers[count].index, drilledItem.axis, drilledItem.memberName.split(drilledItem.delimiter ? drilledItem.delimiter : "**").join(this.valueSortSettings.headerDelimiter));
              var sortedHeaders = void 0;
              if (drilledItem.axis === "row") {
                sortedHeaders = this.applyValueSorting(headers[count].members, this.cMembers);
                headers[count].members = sortedHeaders.rMembers;
                this.rowCount += this.showSubTotalsAtBottom ? 1 : 0;
              } else {
                var showSubTotals2 = this.dataSourceSettings.showSubTotals && this.dataSourceSettings.showColumnSubTotals && fields[position].showSubTotals;
                this.columnCount -= !showSubTotals2 ? this.colValuesLength : 0;
                sortedHeaders = this.applyValueSorting(this.rMembers, headers[count].members);
                headers[count].members = sortedHeaders.cMembers;
              }
            } else {
              headers[count].isDrilled = false;
              this.updateHeadersCount(headers[count].members, drilledItem.axis, position, fields, "minus", true);
              headers[count].members = [];
              if (drilledItem.axis === "row") {
                this.rowCount -= this.showSubTotalsAtBottom ? 1 : 0;
              }
            }
            break;
          }
        } else if (headers[count].members.length > 0) {
          headers[count].members = this.performDrillOperation(headers[count].members, drilledItem, fields, position, currentPosition + 1);
        }
        count++;
      }
      return headers;
    };
    PivotEngine2.prototype.performSortOperation = function(headers, sortItem, headersInfo, currentPosition) {
      var count = 0;
      while (count < headers.length) {
        if (headersInfo.position === currentPosition) {
          headers = this.getSortedHeaders(headers, sortItem.order.toString());
          break;
        } else if (headers[count].members.length > 0) {
          headers[count].members = this.performSortOperation(headers[count].members, sortItem, headersInfo, currentPosition + 1);
        }
        count++;
      }
      return headers;
    };
    PivotEngine2.prototype.performFilterDeletion = function(headers, filterItem, headersInfo, filterObjects, currentPosition) {
      var count = 0;
      var loopIn = true;
      var _loop_4 = function() {
        if (headersInfo.position === currentPosition) {
          var engine_1 = this_4;
          headers = headers.filter(function(item) {
            return engine_1.fieldFilterMem[filterItem.name].memberObj[item.formattedText] === "" ? false : !engine_1.fieldFilterMem[filterItem.name].memberObj[item.formattedText] || item.type === "grand sum";
          });
          loopIn = false;
        } else if (headers[count].members.length > 0) {
          headers[count].members = this_4.performFilterDeletion(headers[count].members, filterItem, headersInfo, filterObjects, currentPosition + 1);
        }
        count++;
      };
      var this_4 = this;
      while (count < headers.length && loopIn) {
        _loop_4();
      }
      var engine = this;
      return headers.filter(function(item) {
        return item.members.length > 0 || item.type === "grand sum" ? true : engine.matchIndexes(item.indexObject, filterObjects);
      });
    };
    PivotEngine2.prototype.matchIndexes = function(index, filterObjects) {
      var keys = Object.keys(index);
      var len = keys.length;
      if (len === 0) {
        return true;
      }
      while (len > -1) {
        if (filterObjects[index[keys[len]]] !== void 0) {
          return true;
        }
        len--;
      }
      return false;
    };
    PivotEngine2.prototype.performFilterAddition = function(headers, fields, headersInfo) {
      var count = 0;
      var _loop_5 = function() {
        var levelName = headers[count].valueSort.levelName;
        if (this_5.headerObjectsCollection[levelName]) {
          var memberNameObj_1 = {};
          for (var _i = 0, _a = headers[count].members; _i < _a.length; _i++) {
            var member = _a[_i];
            memberNameObj_1[member.valueSort.levelName.toString()] = member.valueSort.levelName.toString();
          }
          var excessHeaders = this_5.headerObjectsCollection[levelName].filter(function(member2) {
            return !memberNameObj_1[member2.valueSort.levelName.toString()];
          });
          headers[count].members = headers[count].members.concat(excessHeaders);
          headers[count].members = this_5.getSortedHeaders(headers[count].members, this_5.fieldList[headersInfo.fields[headers[count].members[0].level].name].sort);
          delete this_5.headerObjectsCollection[levelName];
        }
        if (headers[count].members.length > 0) {
          headers[count].members = this_5.performFilterAddition(headers[count].members, fields, headersInfo);
        }
        count++;
      };
      var this_5 = this;
      while (count < headers.length) {
        _loop_5();
      }
      return headers;
    };
    PivotEngine2.prototype.performFilterCommonUpdate = function(filterItem, headersInfo, addPos) {
      if (headersInfo.axis === "row" || headersInfo.axis === "column") {
        var rawHeaders = headersInfo.axis === "row" ? this.rMembers : this.cMembers;
        var filterObjects = {};
        for (var _i = 0, _a = this.filterMembers; _i < _a.length; _i++) {
          var item = _a[_i];
          filterObjects[item] = item;
        }
        if (this.fieldFilterMem[filterItem.name]) {
          rawHeaders = this.performFilterDeletion(headersInfo.headers, filterItem, headersInfo, filterObjects, 0);
        }
        if (addPos.length > 0 && headersInfo.fields.length > 0) {
          this.frameHeaderObjectsCollection = true;
          if (headersInfo.fields.filter(function(item2) {
            return item2.showNoDataItems;
          }).length > 0) {
            for (var i = 0; i < this.data.length; i++) {
              addPos.push(i);
            }
          }
          this.headerObjectsCollection["parent"] = this.getIndexedHeaders(headersInfo.fields, this.data, 0, addPos, headersInfo.axis, "");
          rawHeaders = this.performFilterAddition(rawHeaders, headersInfo.fields, headersInfo);
          var headerNames_1 = {};
          for (var _b = 0, rawHeaders_1 = rawHeaders; _b < rawHeaders_1.length; _b++) {
            var header = rawHeaders_1[_b];
            headerNames_1[header.valueSort.levelName.toString()] = header.valueSort.levelName.toString();
          }
          var excessHeaders = this.headerObjectsCollection["parent"].filter(function(header2) {
            return !headerNames_1[header2.valueSort.levelName.toString()];
          });
          var grandHeader = rawHeaders.filter(function(item2) {
            return item2.type === "grand sum";
          });
          if (grandHeader.length > 0) {
            rawHeaders.pop();
          }
          rawHeaders = this.getSortedHeaders(rawHeaders.concat(excessHeaders), this.fieldList[headersInfo.fields[0].name].sort).concat(grandHeader);
          if (headersInfo.axis === "row") {
            this.cMembers = this.getIndexedHeaders(this.dataSourceSettings.columns, this.data, 0, this.filterMembers, "column", "");
            this.insertAllMember(this.cMembers, this.filterMembers, "", "column");
          } else {
            this.rMembers = this.getIndexedHeaders(this.dataSourceSettings.rows, this.data, 0, this.filterMembers, "row", "");
            this.insertAllMember(this.rMembers, this.filterMembers, "", "row");
          }
        }
        if (headersInfo.axis === "row") {
          this.rowCount = 0;
        } else {
          this.columnCount = 0;
        }
        this.updateHeadersCount(rawHeaders, headersInfo.axis, 0, headersInfo.fields, "plus", false);
        if (headersInfo.axis === "row") {
          if (headersInfo.position > 0) {
            this.insertPosition(this.dataSourceSettings.rows, this.data, 0, this.filterMembers, "row", "", rawHeaders);
          }
          this.insertTotalPosition(rawHeaders);
          this.rMembers = this.headerCollection.rowHeaders = rawHeaders;
          this.headerCollection.rowHeadersCount = this.rowCount;
        } else {
          if (headersInfo.position > 0) {
            this.insertPosition(this.dataSourceSettings.columns, this.data, 0, this.filterMembers, "column", "", rawHeaders);
          }
          this.insertTotalPosition(rawHeaders);
          this.cMembers = this.headerCollection.columnHeaders = rawHeaders;
          this.headerCollection.columnHeadersCount = this.columnCount;
        }
      } else {
        var showNoDataItems = this.dataSourceSettings.rows[0] && this.dataSourceSettings.rows[0].showNoDataItems || this.dataSourceSettings.columns[0] && this.dataSourceSettings.columns[0].showNoDataItems;
        this.rMembers = this.getIndexedHeaders(this.dataSourceSettings.rows, this.data, 0, showNoDataItems ? addPos : this.filterMembers, "row", "");
        this.cMembers = this.getIndexedHeaders(this.dataSourceSettings.columns, this.data, 0, showNoDataItems ? addPos : this.filterMembers, "column", "");
        this.insertAllMembersCommon();
        this.rowCount = 0;
        this.columnCount = 0;
        this.updateHeadersCount(this.cMembers, "column", 0, this.dataSourceSettings.columns, "plus", false);
        this.updateHeadersCount(this.rMembers, "row", 0, this.dataSourceSettings.rows, "plus", false);
        if (showNoDataItems) {
          this.insertPosition(this.dataSourceSettings.rows, this.data, 0, this.filterMembers, "row", "", this.rMembers);
          this.insertPosition(this.dataSourceSettings.columns, this.data, 0, this.filterMembers, "column", "", this.cMembers);
        }
        this.headerCollection.rowHeaders = this.rMembers;
        this.headerCollection.rowHeadersCount = this.rowCount;
        this.headerCollection.columnHeaders = this.cMembers;
        this.headerCollection.columnHeadersCount = this.columnCount;
      }
      this.applyValueSorting();
    };
    PivotEngine2.prototype.getHeadersInfo = function(fieldName, axis) {
      this.rMembers = this.headerCollection.rowHeaders;
      this.cMembers = this.headerCollection.columnHeaders;
      axis = axis === "" ? this.getAxisByFieldName(fieldName) : axis;
      var headers = axis === "row" ? this.rMembers : this.cMembers;
      var fields = axis === "row" ? this.dataSourceSettings.rows : this.dataSourceSettings.columns;
      var position = 0;
      for (var _i = 0, fields_1 = fields; _i < fields_1.length; _i++) {
        var field = fields_1[_i];
        if (field.name === fieldName) {
          break;
        }
        position++;
      }
      return {
        axis,
        fields,
        headers,
        position
      };
    };
    PivotEngine2.prototype.updateEngine = function() {
      if (this.customProperties.isTabularLayout) {
        this.rowCount = this.rowCount + this.emptyRowsLength;
      }
      this.removeCount = 0;
      this.validateValueFields();
      this.calculatePagingValues();
      this.pivotValues = [];
      this.headerContent = [];
      this.valueContent = [];
      var rowheads = [];
      var colheads = [];
      var updatedRowMembers = [];
      var valuesCount = this.dataSourceSettings.values.length;
      this.frameDrillObject();
      this.getAggregatedHeaders(this.dataSourceSettings.rows, this.dataSourceSettings.columns, this.rMembers, this.cMembers, this.dataSourceSettings.values);
      this.getHeaderData(this.dataSourceSettings.rows, this.dataSourceSettings.columns, this.dataSourceSettings.values, updatedRowMembers, this.cMembers, colheads, this.pivotValues, 0, this.valueAxis ? 1 : valuesCount);
      this.insertSubTotals();
      this.getTableData(updatedRowMembers.length > 0 ? updatedRowMembers : this.rMembers, rowheads, colheads, 0, this.pivotValues, valuesCount, 0, this.rowGrandTotal ? this.rowGrandTotal : this.rMembers[this.rMembers.length - 1], this.columnGrandTotal ? this.columnGrandTotal : this.cMembers[this.cMembers.length - 1]);
      this.applyAdvancedAggregate(rowheads, colheads, this.pivotValues);
      if (this.customProperties.isTabularLayout) {
        this.pivotValues = this.getTabularPivotValues(true, true);
        this.setRowSpan();
        this.rowCount = this.rowCount - this.emptyRowsLength;
      }
      this.isEngineUpdated = true;
      this.isEmptyDataAvail(this.rMembers, this.cMembers);
    };
    PivotEngine2.prototype.getAxisByFieldName = function(fieldName) {
      var axisCount = 0;
      var axis = "";
      while (axisCount < 4 && axis === "") {
        switch (axisCount) {
          case 0:
            axis = this.getFieldByName(fieldName, this.dataSourceSettings.rows) ? "row" : "";
            break;
          case 1:
            axis = this.getFieldByName(fieldName, this.dataSourceSettings.columns) ? "column" : "";
            break;
        }
        axisCount++;
      }
      return axis;
    };
    PivotEngine2.prototype.getFieldByName = function(fieldName, fields) {
      return new DataManager({
        json: fields
      }).executeLocal(new Query().where("name", "equal", fieldName))[0];
    };
    PivotEngine2.prototype.updateHeadersCount = function(headers, axis, position, fields, action, isDrill) {
      var lenCnt = 0;
      var field = fields[position];
      var showSubTotals2 = true;
      if (axis === "column") {
        showSubTotals2 = this.dataSourceSettings.showSubTotals && this.dataSourceSettings.showColumnSubTotals && (field ? field.showSubTotals : true);
      } else {
        showSubTotals2 = this.dataSourceSettings.showSubTotals && this.dataSourceSettings.showRowSubTotals && (field ? field.showSubTotals : true);
      }
      while (lenCnt < headers.length) {
        if (axis === "row") {
          this.rowCount = this.rowCount - (action === "plus" ? -(this.valueAxis === 1 ? this.dataSourceSettings.values.length : 1) : this.valueAxis === 1 ? this.dataSourceSettings.values.length : 1);
        } else {
          this.columnCount = this.columnCount - (action === "plus" ? -(this.valueAxis === 1 ? 1 : this.dataSourceSettings.values.length) : this.valueAxis === 1 ? 1 : this.dataSourceSettings.values.length);
        }
        if (headers[lenCnt].members.length > 0) {
          this.updateHeadersCount(headers[lenCnt].members, axis, position + 1, fields, action, true);
          if (axis === "row") {
            this.rowCount -= this.showSubTotalsAtBottom && headers[lenCnt].hasChild && headers[lenCnt].isDrilled ? 1 : 0;
          }
        }
        lenCnt++;
      }
      if (axis === "column" && !showSubTotals2 && isDrill) {
        this.columnCount += action === "plus" ? -this.colValuesLength : this.colValuesLength;
      }
    };
    PivotEngine2.prototype.getSortedHeaders = function(headers, sortOrder) {
      var fieldName = headers[0].actualText !== "Grand Total" ? headers[0].valueSort.axis : headers[1].valueSort.axis;
      var isNotDateType = !(this.formatFields && this.formatFields[fieldName] && this.formatFields[fieldName].type);
      var childrens = this.fieldList[fieldName];
      if (isNotDateType) {
        if (childrens && childrens.type === "number" && headers.length > 0 && typeof headers[0].actualText === "string") {
          var stringValue = [];
          var alphaNumbervalue = [];
          var nullValue = [];
          for (var i = 0; i < headers.length; i++) {
            if (isNaN(Number(headers[i].actualText.toString().charAt(0)))) {
              stringValue.push(headers[i]);
            } else if (headers[i].actualText === "") {
              nullValue.push(headers[i]);
            } else {
              alphaNumbervalue.push(headers[i]);
              break;
            }
          }
          if (alphaNumbervalue.length > 0) {
            alphaNumbervalue = this.sortHeaders(fieldName, childrens, headers, childrens.sort, childrens.isAlphanumeric);
          }
          return headers;
        } else {
          return this.sortHeaders(fieldName, childrens, headers, sortOrder, childrens.type);
        }
      } else {
        return this.sortHeaders(fieldName, childrens, headers, sortOrder, "date");
      }
    };
    PivotEngine2.prototype.sortHeaders = function(fieldName, childrens, sortMembersOrder, sortOrder, type) {
      var isHeaderSortByDefault = false;
      var membersInfo = this.fieldList[fieldName] && this.fieldList[fieldName].membersOrder ? this.fieldList[fieldName].membersOrder.slice() : [];
      var sortDetails = {
        fieldName,
        sortOrder,
        members: membersInfo && membersInfo.length > 0 ? membersInfo : Object.keys(childrens.members),
        IsOrderChanged: false
      };
      type = type === "datetime" || type === "date" || type === "time" ? this.formatFields[fieldName] && ["date", "dateTime", "time"].indexOf(this.formatFields[fieldName].type) > -1 ? type : "string" : type;
      var isDateType = type === "datetime" || type === "date" || type === "time";
      var isNumberGroupSorting = false;
      if (this.dataSourceSettings.groupSettings.length > 0) {
        var groupField = this.dataSourceSettings.groupSettings.filter(function(field) {
          return field.name === childrens.id;
        });
        if (!isNullOrUndefined(groupField) && groupField.length > 0) {
          isNumberGroupSorting = groupField[0].type.toLocaleLowerCase() === "number" && childrens.type.toLocaleLowerCase() === "string";
        }
      }
      if (membersInfo && membersInfo.length > 0) {
        PivotUtil.applyCustomSort(sortDetails, sortMembersOrder, type);
      } else {
        PivotUtil.applyHeadersSort(sortMembersOrder, sortOrder, type, isNumberGroupSorting);
        isHeaderSortByDefault = true;
      }
      if (isHeaderSortByDefault && this.getHeaderSortInfo) {
        var copyOrder = [];
        for (var m = 0, n = 0; m < sortMembersOrder.length; m++) {
          var member = sortMembersOrder[m];
          var sortText = isDateType ? member.dateText : member.actualText;
          if (member.actualText !== "Grand Total") {
            copyOrder[n++] = sortText;
          }
        }
        sortDetails.members = copyOrder;
      }
      if (this.getHeaderSortInfo) {
        this.getHeaderSortInfo(sortDetails);
      }
      if (sortDetails.IsOrderChanged) {
        PivotUtil.applyCustomSort(sortDetails, sortMembersOrder, type, true);
      }
      return sortMembersOrder;
    };
    PivotEngine2.prototype.applyValueSorting = function(rMembers, cMembers) {
      var isNullArgument = false;
      if (rMembers === void 0 || cMembers === void 0) {
        this.valueSortHeaderText = void 0;
        if (this.enableValueSorting && this.valueSortSettings.headerText && !this.valueSortHeaderText && this.valueSortSettings.headerText !== "" && this.dataSourceSettings.values.length > 0) {
          this.valueSortHeaderText = this.valueSortSettings.headerText;
          var textArray = this.valueSortHeaderText.split(this.valueSortSettings.headerDelimiter);
          for (var _i = 0, _a = this.dataSourceSettings.values; _i < _a.length; _i++) {
            var field = _a[_i];
            var name_1 = field.caption ? field.caption : field.name;
            var valueIndex = textArray.indexOf(name_1);
            if (valueIndex > -1) {
              textArray.splice(valueIndex, 1);
              textArray.push(name_1);
              this.valueSortHeaderText = textArray.join(this.valueSortSettings.headerDelimiter);
              break;
            }
          }
        }
        rMembers = this.rMembers;
        cMembers = this.cMembers;
        isNullArgument = true;
      }
      if (this.valueSortHeaderText) {
        var textArray = this.valueSortHeaderText.split(this.valueSortSettings.headerDelimiter);
        var hText = "";
        var mIndex = void 0;
        var mType = void 0;
        var caption = void 0;
        for (var i = 0; i < this.dataSourceSettings.values.length; i++) {
          if (this.dataSourceSettings.values[i].caption === textArray[textArray.length - 1]) {
            caption = this.dataSourceSettings.values[i].name;
            break;
          } else {
            caption = textArray[textArray.length - 1];
          }
        }
        if ((this.dataSourceSettings.values.length === 1 && this.dataSourceSettings.columns.length === 0 || this.dataSourceSettings.values.length > 1) && caption && this.fieldList[caption]) {
          for (var i = 0; i < textArray.length - 1; i++) {
            hText = hText === "" ? textArray[i] : hText + this.valueSortSettings.headerDelimiter + textArray[i];
          }
          mIndex = this.fieldList[caption].index;
          mType = this.fieldList[caption].aggregateType;
        } else {
          if (!this.dataSourceSettings.alwaysShowValueHeader || textArray.length === 1) {
            hText = this.valueSortHeaderText;
          } else {
            for (var i = 0; i < textArray.length - 1; i++) {
              hText = hText === "" ? textArray[i] : hText + this.valueSortSettings.headerDelimiter + textArray[i];
            }
          }
          mIndex = this.fieldList[this.dataSourceSettings.values[0].name].index;
          mType = this.fieldList[this.dataSourceSettings.values[0].name].aggregateType;
        }
        var member = void 0;
        if (this.valueAxis === 0) {
          member = this.getMember(cMembers, hText);
          if (member) {
            rMembers = this.sortByValueRow(rMembers, member, this.valueSortSettings.sortOrder, mIndex, mType);
          }
        } else {
          member = this.getMember(rMembers, hText);
          if (member) {
            cMembers = this.sortByValueRow(cMembers, member, this.valueSortSettings.sortOrder, mIndex, mType);
          }
        }
        if (isNullArgument) {
          this.rMembers = rMembers;
          this.cMembers = cMembers;
          if (this.isPagingOrVirtualizationEnabled) {
            this.headerCollection.rowHeaders = this.rMembers;
            this.headerCollection.columnHeaders = this.cMembers;
          }
        }
      }
      return {
        rMembers,
        cMembers
      };
    };
    PivotEngine2.prototype.getMember = function(cMembers, headerText) {
      var vlen = cMembers.length;
      var member;
      for (var j = 0; j < vlen; j++) {
        if (cMembers[j].valueSort.levelName === headerText) {
          member = cMembers[j];
          break;
        } else if (cMembers[j].members.length > 0) {
          member = this.getMember(cMembers[j].members, headerText);
        }
        if (member) {
          return member;
        }
      }
      return member;
    };
    PivotEngine2.prototype.sortByValueRow = function(rMembers, member, sortOrder, mIndex, mType) {
      var aggreColl = [];
      for (var _i = 0, rMembers_1 = rMembers; _i < rMembers_1.length; _i++) {
        var header = rMembers_1[_i];
        if (header.type === "grand sum") {
          aggreColl.push({
            "header": header
          });
        } else {
          this.rawIndexObject = {};
          var value = this.getAggregateValue(header.index, member.indexObject, mIndex, mType, false);
          var cellDetails = {
            fieldName: this.fields[mIndex],
            row: header,
            column: member,
            value,
            cellSets: this.getValueCellInfo ? this.getCellSet(this.rawIndexObject) : [],
            rowCellType: header.hasChild && header.isDrilled ? "subTotal" : header.type === "grand sum" ? "grandTotal" : "value",
            columnCellType: member.hasChild && member.isDrilled ? "subTotal" : member.type === "grand sum" ? "grandTotal" : "value",
            aggregateType: mType,
            skipFormatting: false
          };
          if (this.getValueCellInfo) {
            this.getValueCellInfo(cellDetails);
          }
          value = cellDetails.value;
          this.rawIndexObject = {};
          aggreColl.push({
            "header": header,
            "value": value
          });
        }
      }
      rMembers = PivotUtil.getSortedValue(aggreColl, sortOrder);
      for (var _a = 0, rMembers_2 = rMembers; _a < rMembers_2.length; _a++) {
        var header = rMembers_2[_a];
        if (header.members.length > 0) {
          header.members = this.sortByValueRow(header.members, member, sortOrder, mIndex, mType);
        }
      }
      return rMembers;
    };
    PivotEngine2.prototype.insertAllMembersCommon = function() {
      this.rowGrandTotal = this.columnGrandTotal = null;
      var rowFlag = this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showRowGrandTotals ? true : this.dataSourceSettings.rows.length > 0 ? false : true;
      var columnFlag = this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showColumnGrandTotals ? true : this.dataSourceSettings.columns.length > 0 ? false : true;
      if (this.isValueHasAdvancedAggregate) {
        this.insertAllMember(this.rMembers, this.filterMembers, "", "row");
        if (rowFlag) {
          this.rowCount += this.rowValuesLength;
        }
        this.insertAllMember(this.cMembers, this.filterMembers, "", "column");
        if (columnFlag) {
          this.columnCount += this.colValuesLength;
        }
      } else {
        if (rowFlag) {
          this.insertAllMember(this.rMembers, this.filterMembers, "", "row");
          this.rowCount += this.rowValuesLength;
        } else {
          this.rowGrandTotal = this.insertAllMember([], this.filterMembers, "", "row")[0];
        }
        if (columnFlag) {
          this.insertAllMember(this.cMembers, this.filterMembers, "", "column");
          this.columnCount += this.colValuesLength;
        } else {
          this.columnGrandTotal = this.insertAllMember([], this.filterMembers, "", "column")[0];
        }
      }
    };
    PivotEngine2.prototype.insertSubTotals = function() {
      var rowLength = this.pivotValues.length;
      for (var rowCnt = 0; rowCnt < rowLength; rowCnt++) {
        var rowCells = this.pivotValues[rowCnt];
        if (rowCells) {
          var savedCell = void 0;
          var spanCnt = 1;
          var colLength = rowCells.length;
          var indexObj = void 0;
          var startIndex = 1;
          var lastIndex = this.showSubTotalsAtTop ? this.reformAxisCount : colLength;
          var colCnt = this.showSubTotalsAtTop ? startIndex : lastIndex - 1;
          var columnSpan = void 0;
          var memberCnt = void 0;
          while (startIndex < lastIndex) {
            var cell = rowCells[colCnt];
            if (cell) {
              if (savedCell) {
                savedCell.colSpan = spanCnt;
                savedCell.colIndex = this.showSubTotalsAtTop ? savedCell.colIndex + (spanCnt - 1) : savedCell.colIndex - (spanCnt - 1);
              }
              if (this.showSubTotalsAtTop) {
                columnSpan = memberCnt = this.getMemberSpanCount(this.pivotValues[rowCnt], colCnt);
              }
              indexObj = {
                index: cell.index,
                indexObject: cell.indexObject
              };
              cell.index = [];
              cell.indexObject = {};
              savedCell = extend({}, cell, null, true);
              cell.index = indexObj.index;
              cell.indexObject = indexObj.indexObject;
              var rowPos = rowCnt + 1;
              while (this.pivotValues[rowPos] && !this.pivotValues[rowPos][colCnt]) {
                var curentCell = this.pivotValues[rowCnt][colCnt];
                if (!curentCell.isDrilled && !(!this.valueAxis && !this.isLastHeaderHasMeasures && curentCell.members && curentCell.members.length > 0 && rowPos > this.measureIndex)) {
                  curentCell.rowSpan = rowPos - rowCnt + 1;
                  savedCell.rowSpan = rowPos - rowCnt + 1;
                }
                var cellType = cell.type === "sum" || cell.type === "grand sum" ? cell.type : "sum";
                this.pivotValues[rowPos][colCnt] = this.headerContent[rowPos][colCnt] = {
                  type: cellType,
                  formattedText: cell.type === "sum" || cell.type === "grand sum" ? cell.formattedText : cell.formattedText + " Total",
                  axis: "column",
                  hierarchyName: cell.hierarchyName,
                  level: -1,
                  colIndex: colCnt,
                  rowIndex: rowPos,
                  valueSort: cell.valueSort
                };
                if (cell.valueSort && cell.valueSort[this.valueSortSettings.headerText]) {
                  this.valueSortSettings.columnIndex = colCnt;
                }
                var isSpanned = false;
                if (cellType === "grand sum") {
                  curentCell.rowSpan = rowPos - rowCnt + 1;
                  savedCell.rowSpan = rowPos - rowCnt + 1;
                } else if (curentCell.type !== "sum" && (curentCell.isDrilled || this.valueAxisFields[curentCell.actualText] && !this.valueAxis && !this.isLastHeaderHasMeasures && curentCell.members && curentCell.members.length > 0)) {
                  this.pivotValues[rowCnt + 1][colCnt].rowSpan = rowPos - rowCnt;
                  isSpanned = true;
                } else {
                  this.pivotValues[rowPos][colCnt].rowSpan = -1;
                }
                if (rowPos > rowCnt + 1 && (curentCell.type === "sum" || isSpanned)) {
                  this.pivotValues[rowPos][colCnt].rowSpan = -1;
                }
                rowPos++;
              }
              spanCnt = 1;
            } else {
              rowCells[colCnt] = this.headerContent[rowCnt][colCnt] = extend({}, savedCell, null, true);
              rowCells[colCnt].index = this.headerContent[rowCnt][colCnt].index = indexObj.index;
              rowCells[colCnt].indexObject = this.headerContent[rowCnt][colCnt].indexObject = indexObj.indexObject;
              spanCnt++;
              if (this.showSubTotalsAtTop) {
                memberCnt--;
                rowCells[colCnt].colSpan = memberCnt;
                rowCells[colCnt].colIndex = rowCells[colCnt].colIndex + (spanCnt - 1);
              } else {
                rowCells[colCnt].colSpan = spanCnt;
                rowCells[colCnt].colIndex = rowCells[colCnt].colIndex - (spanCnt - 1);
              }
            }
            if (colCnt === 1 && savedCell) {
              if (this.showSubTotalsAtTop) {
                savedCell.colSpan = columnSpan;
                savedCell.colIndex = savedCell.colIndex + (spanCnt - 1);
              } else {
                savedCell.colSpan = spanCnt;
                savedCell.colIndex = savedCell.colIndex - (spanCnt - 1);
              }
            }
            if (this.showSubTotalsAtTop && (rowCells[colCnt + 1] || colCnt + 1 === this.reformAxisCount)) {
              var cell_1 = this.pivotValues[rowCnt][colCnt - spanCnt + 1];
              cell_1.colSpan = columnSpan;
              this.pivotValues[rowCnt][colCnt - spanCnt + 1] = cell_1;
            }
            colCnt = this.showSubTotalsAtTop ? colCnt + 1 : colCnt - 1;
            startIndex++;
          }
        }
      }
    };
    PivotEngine2.prototype.getMemberSpanCount = function(rowCellArray, cellIndex) {
      var colIndex = 1;
      for (var i = cellIndex + 1; i < this.reformAxisCount; i++) {
        if (!rowCellArray[i]) {
          colIndex++;
        } else {
          break;
        }
      }
      return colIndex;
    };
    PivotEngine2.prototype.frameDrillObject = function(vDrilledItem) {
      if (vDrilledItem === void 0) {
        vDrilledItem = null;
      }
      this.fieldDrillCollection = {};
      for (var fieldCnt = 0; fieldCnt < this.drilledMembers.length; fieldCnt++) {
        var drillOption = this.drilledMembers[fieldCnt];
        var hasValueField = false;
        var levelCount = 1;
        var isFieldAvail = false;
        var field = this.fieldList[drillOption.name];
        var isDrillMemberExpand = field && field.expandAll;
        for (var i = 0; i < this.dataSourceSettings.rows.length; i++) {
          if (this.dataSourceSettings.rows[i].name === drillOption.name) {
            var hasMeasureIndex = this.valueAxis && (this.isMultiMeasures || this.dataSourceSettings.alwaysShowValueHeader) && this.measureIndex > -1 && this.measureIndex <= i;
            levelCount = (hasMeasureIndex ? i + 1 : i) + 1;
            hasValueField = hasMeasureIndex ? true : false;
            isFieldAvail = true;
            break;
          }
        }
        if (!isFieldAvail) {
          for (var i = 0; i < this.dataSourceSettings.columns.length; i++) {
            if (this.dataSourceSettings.columns[i].name === drillOption.name) {
              var hasMeasureIndex = !this.valueAxis && (this.isMultiMeasures || this.dataSourceSettings.alwaysShowValueHeader) && this.measureIndex > -1 && this.measureIndex <= i;
              levelCount = (hasMeasureIndex ? i + 1 : i) + 1;
              hasValueField = hasMeasureIndex ? true : false;
              isFieldAvail = true;
              break;
            }
          }
        }
        for (var _i = 0, _a = drillOption.items; _i < _a.length; _i++) {
          var drilledItem = _a[_i];
          var members = drilledItem.split(drillOption.delimiter);
          if (levelCount === members.length) {
            var memberString = drillOption.name + this.valueSortSettings.headerDelimiter + members.join(this.valueSortSettings.headerDelimiter);
            this.fieldDrillCollection[memberString] = memberString;
            if (hasValueField) {
              var isAllValuesAvail = false;
              if (this.isExpandAll || isDrillMemberExpand) {
                for (var _b = 0, _c = this.dataSourceSettings.values; _b < _c.length; _b++) {
                  var field_1 = _c[_b];
                  var name_2 = field_1.caption ? field_1.caption : field_1.name;
                  members[this.measureIndex] = name_2;
                  if (drillOption.items.indexOf(members.join(drillOption.delimiter)) > -1) {
                    isAllValuesAvail = true;
                  } else {
                    isAllValuesAvail = false;
                    break;
                  }
                }
              }
              if ((this.isExpandAll || isDrillMemberExpand) && isAllValuesAvail || !this.isExpandAll || !isDrillMemberExpand) {
                members = drilledItem.split(drillOption.delimiter);
                members.splice(this.measureIndex, 1);
                if (vDrilledItem && vDrilledItem.memberName === drilledItem) {
                  vDrilledItem.memberName = members.join(drillOption.delimiter);
                }
                memberString = drillOption.name + this.valueSortSettings.headerDelimiter + members.join(this.valueSortSettings.headerDelimiter);
                this.fieldDrillCollection[memberString] = memberString;
              }
            }
          }
        }
      }
    };
    PivotEngine2.prototype.getIndexedHeaders = function(keys, data, keyInd, position, axis, parentMember, valueFil) {
      var hierarchy = [];
      var keysPos = 0;
      if (keys && keys.length > 0) {
        keysPos++;
        var rlen = keys.length;
        var decisionObj = {};
        var fieldName = keys[keyInd].name;
        var field = keys[keyInd];
        var childrens = this.fieldList[fieldName];
        if (isNullOrUndefined(this.reportDataType)) {
          this.reportDataType = {};
          for (var i = 0; i < this.dataSourceSettings.rows.length; i++) {
            this.reportDataType[this.dataSourceSettings.rows[i].name] = this.dataSourceSettings.rows[i].dataType;
          }
          for (var i = 0; i < this.dataSourceSettings.columns.length; i++) {
            this.reportDataType[this.dataSourceSettings.columns[i].name] = this.dataSourceSettings.columns[i].dataType;
          }
          for (var i = 0; i < this.dataSourceSettings.values.length; i++) {
            this.reportDataType[this.dataSourceSettings.values[i].name] = this.dataSourceSettings.values[i].dataType;
          }
        }
        childrens.type = !isNullOrUndefined(this.reportDataType[childrens.id]) ? this.reportDataType[childrens.id] : childrens.type;
        var isNoData = false;
        var isDateType = this.formatFields[fieldName] && ["date", "dateTime", "time"].indexOf(this.formatFields[fieldName].type) > -1;
        var showNoDataItems = position.length < 1 && keyInd > 0 || field.showNoDataItems;
        var savedMembers = {};
        if (showNoDataItems) {
          var members = Object.keys(childrens.members);
          for (var pos = 0, lt = members.length; pos < lt; pos++) {
            if (this.dataSourceSettings.showHeaderWhenEmpty || this.localeObj && members[pos] !== this.localeObj.getConstant("undefined")) {
              savedMembers[members[pos]] = members[pos];
            }
          }
          if (position.length < 1) {
            isNoData = true;
            position.length = members.length;
          }
        }
        if (axis === this.dataSourceSettings.valueAxis && this.measureIndex === keyInd && (this.dataSourceSettings.values.length > 1 || this.dataSourceSettings.alwaysShowValueHeader)) {
          this.isLastHeaderHasMeasures = false;
        }
        for (var pos = 0, lt = position.length; pos < lt; pos++) {
          var member = {};
          if (!isNullOrUndefined(keys[keyInd].showSubTotals) && !keys[keyInd].showSubTotals) {
            member.showSubTotals = false;
          }
          member.hasChild = keyInd < rlen - 1;
          member.level = keyInd;
          member.axis = axis;
          member.colSpan = 1;
          this.rowMaxLevel = axis === "row" && this.rowMaxLevel < keyInd ? keyInd : this.rowMaxLevel;
          var memInd = isNoData ? childrens.members[Object.keys(savedMembers)[0]].ordinal : this.valueMatrix[position[pos]][childrens.index].ordinal;
          var headerValue = isNoData ? Object.keys(savedMembers)[0] : data[position[pos]][this.fieldKeys[fieldName]];
          headerValue = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(headerValue) : headerValue;
          if ((isNullOrUndefined(headerValue) || this.localeObj && headerValue === this.localeObj.getConstant("undefined")) && !this.dataSourceSettings.showHeaderWhenEmpty) {
            if (showNoDataItems && !isNoData && keyInd > 0 && pos + 1 === position.length && Object.keys(savedMembers).length > 0) {
              lt = Object.keys(savedMembers).length;
              isNoData = true;
              pos = -1;
            }
            continue;
          }
          delete savedMembers[headerValue];
          if (showNoDataItems && this.fieldFilterMem[fieldName] && this.fieldFilterMem[fieldName].memberObj[headerValue] === headerValue) {
            continue;
          }
          var formattedValue = isDateType ? {
            actualText: headerValue,
            formattedText: childrens.dateMember[memInd - 1].formattedText,
            dateText: childrens.dateMember[memInd - 1].actualText
          } : {
            formattedText: headerValue === null ? this.localeObj ? this.localeObj.getConstant("null") : String(headerValue) : headerValue === void 0 ? this.localeObj ? fieldName in this.groupingFields ? this.localeObj.getConstant("groupOutOfRange") : this.localeObj.getConstant("undefined") : String(headerValue) : String(headerValue),
            actualText: headerValue === null ? this.localeObj ? this.localeObj.getConstant("null") : String(headerValue) : headerValue === void 0 ? this.localeObj ? fieldName in this.groupingFields ? this.localeObj.getConstant("groupOutOfRange") : this.localeObj.getConstant("undefined") : String(headerValue) : headerValue
          };
          member.actualText = formattedValue.actualText;
          member.formattedText = formattedValue.formattedText;
          if (isDateType) {
            member.dateText = formattedValue.dateText;
          }
          var availData = showNoDataItems ? this.filterPosObj[position[pos]] !== void 0 && !isNoData ? true : false : true;
          var isFiltered = false;
          if (showNoDataItems && childrens.filter.length > 0 && childrens.filterType === "include") {
            isFiltered = true;
          }
          if (!(decisionObj && decisionObj[memInd]) && (!isFiltered || isFiltered && childrens.filter.indexOf(headerValue.toString()) > -1)) {
            decisionObj[memInd] = {
              index: [],
              indexObject: {}
            };
            member.index = decisionObj[memInd].index;
            member.indexObject = decisionObj[memInd].indexObject;
            if (availData) {
              member.index = decisionObj[memInd].index = [position[pos]];
              decisionObj[memInd].indexObject[position[pos]] = position[pos];
              member.indexObject = decisionObj[memInd].indexObject;
            }
            member.ordinal = memInd;
            member.valueSort = {};
            member.valueSort.axis = fieldName;
            if (keyInd !== 0) {
              member.valueSort.levelName = parentMember + this.valueSortSettings.headerDelimiter + (this.customProperties.isTabularLayout ? this.getFormattedValue(member.formattedText, childrens.caption).formattedText : member.formattedText);
              member.valueSort[parentMember + this.valueSortSettings.headerDelimiter + member.formattedText] = 1;
              member.valueSort.uniqueName = parentMember + this.valueSortSettings.headerDelimiter + (member.actualText ? member.actualText : member.formattedText);
              member.valueSort[parentMember + this.valueSortSettings.headerDelimiter + (member.actualText ? member.actualText : member.formattedText)] = 1;
            } else {
              member.valueSort[member.formattedText] = 1;
              member.valueSort.levelName = this.customProperties.isTabularLayout ? this.getFormattedValue(member.formattedText, childrens.caption).formattedText : member.formattedText;
              member.valueSort[member.actualText ? member.actualText : member.formattedText] = 1;
              member.valueSort.uniqueName = member.actualText ? member.actualText : member.formattedText;
            }
            var memberString = member.valueSort.axis + this.valueSortSettings.headerDelimiter + member.valueSort.levelName;
            var isExpandMember = this.isExpandAll || field && field.expandAll;
            member.isDrilled = valueFil && this.isValueFiltersAvail ? true : member.hasChild && this.fieldDrillCollection[memberString] ? isExpandMember ? !this.valueAxis && !this.isLastHeaderHasMeasures && keysPos >= this.measureIndex ? true : false : true : isExpandMember;
            member.members = [];
            hierarchy.push(member);
          } else if (availData) {
            decisionObj[memInd].index.push(position[pos]);
            decisionObj[memInd].indexObject[position[pos]] = position[pos];
          }
          if (showNoDataItems && !isNoData && keyInd > 0 && pos + 1 === position.length && Object.keys(savedMembers).length > 0) {
            isNoData = true;
            lt = Object.keys(savedMembers).length;
            pos = -1;
          }
        }
        for (var iln = 0, ilt = hierarchy.length; iln < ilt; iln++) {
          if (!this.frameHeaderObjectsCollection) {
            if (axis === "row") {
              this.rowCount += this.rowValuesLength + (hierarchy[iln].isDrilled && hierarchy[iln].hasChild && this.showSubTotalsAtBottom ? 1 : 0);
            } else {
              this.columnCount += this.colValuesLength;
            }
          }
          var level = null;
          if (hierarchy[iln].valueSort && hierarchy[iln].valueSort.levelName) {
            level = hierarchy[iln].valueSort.levelName;
          }
          parentMember = level || hierarchy[iln].formattedText;
          if (!this.dataSourceSettings.showHeaderWhenEmpty && rlen - 1 > keyInd && hierarchy[iln].index && hierarchy[iln].index.length > 0) {
            if (showNoDataItems && keys[keyInd + 1] && keys[keyInd + 1].name && Object.keys(this.fieldList[keys[keyInd + 1].name].members).length > 0) {
              hierarchy[iln].hasChild = true;
            } else {
              var hIndLen = hierarchy[iln].index.length;
              var count = 0;
              for (var len = 0; len < hIndLen; len++) {
                var headerValue = data[hierarchy[iln].index[len]][this.fieldKeys[keys[keyInd + 1].name]];
                if (isNullOrUndefined(headerValue) || this.localeObj && headerValue === this.localeObj.getConstant("undefined")) {
                  count++;
                }
              }
              hierarchy[iln].hasChild = count !== hIndLen;
            }
          }
          if (rlen - 1 > keyInd && hierarchy[iln].isDrilled) {
            this.columnCount -= !(this.dataSourceSettings.showSubTotals && this.dataSourceSettings.showColumnSubTotals && field.showSubTotals) && axis === "column" ? this.colValuesLength : 0;
            var filterPosition = hierarchy[iln].index;
            hierarchy[iln].members = this.getIndexedHeaders(keys, data, keyInd + 1, filterPosition === void 0 ? [] : filterPosition, axis, parentMember, valueFil);
            if (this.frameHeaderObjectsCollection) {
              this.headerObjectsCollection[parentMember] = hierarchy[iln].members;
            }
          }
        }
        if (this.enableSort) {
          if (isDateType) {
            return this.sortHeaders(fieldName, childrens, hierarchy, childrens.sort, "date");
          } else {
            if (childrens.type.toLowerCase() === "number" && hierarchy.length > 0 && typeof hierarchy[0].actualText === "string" && hierarchy[0].actualText.match(/[a-zA-Z]+/g)) {
              var stringValue = [];
              var outOfRange = void 0;
              var alphaNumbervalue = [];
              var nullValue = [];
              for (var i = 0; i < hierarchy.length; i++) {
                if (isNullOrUndefined(hierarchy[i].actualText.toString().match(/\d+/))) {
                  stringValue.push(hierarchy[i]);
                  if (!outOfRange && childrens.sort !== "None") {
                    if (hierarchy[i].actualText === "Out of Range") {
                      outOfRange = hierarchy[i];
                      hierarchy.splice(i, 1);
                    }
                  }
                } else if (hierarchy[i].actualText === "") {
                  nullValue.push(hierarchy[i]);
                } else {
                  this.fieldList[fieldName].isAlphanumeric = true;
                  alphaNumbervalue.push(hierarchy[i]);
                  break;
                }
              }
              if (outOfRange) {
                if (childrens.sort === "Ascending") {
                  if (hierarchy[0].actualText === "Grand Total") {
                    hierarchy.splice(1, 0, outOfRange);
                  } else {
                    hierarchy.splice(0, 0, outOfRange);
                  }
                } else {
                  if (hierarchy[hierarchy.length - 1].actualText === "Grand Total") {
                    hierarchy.splice(hierarchy.length - 1, 0, outOfRange);
                  } else {
                    hierarchy.splice(hierarchy.length, 0, outOfRange);
                  }
                }
              }
              if (alphaNumbervalue.length > 0) {
                this.sortHeaders(fieldName, childrens, hierarchy, childrens.sort, childrens.isAlphanumeric);
              }
              return hierarchy;
            } else {
              return this.sortHeaders(fieldName, childrens, hierarchy, childrens.sort, childrens.type);
            }
          }
        } else {
          return hierarchy;
        }
      } else {
        return hierarchy;
      }
    };
    PivotEngine2.prototype.getOrderedIndex = function(headers) {
      var orderedIndex = {};
      for (var i = 0; i < headers.length; i++) {
        if (headers[i].type !== "grand sum") {
          orderedIndex[headers[i].ordinal] = i;
        }
      }
      return orderedIndex;
    };
    PivotEngine2.prototype.insertPosition = function(keys, data, keyInd, position, axis, parentMember, slicedHeaders) {
      var hierarchy = [];
      var orderedIndex = this.getOrderedIndex(slicedHeaders);
      if (keys) {
        var decisionObj = {};
        var field = keys[keyInd].name;
        var childrens = this.fieldList[field];
        for (var pos = 0, lt = position.length; pos < lt; pos++) {
          var member = {};
          var memInd = this.valueMatrix[position[pos]][childrens.index].ordinal;
          var slicedHeader = slicedHeaders[orderedIndex[memInd]];
          var value = data[position[pos]][this.fieldKeys[field]];
          value = value === null ? this.localeObj ? this.localeObj.getConstant("null") : String(value) : value;
          var formattedValue = this.formatFields[field] && ["date", "dateTime", "time"].indexOf(this.formatFields[field].type) > -1 ? this.getFormattedValue(value, field) : {
            formattedText: value.toString(),
            actualText: value.toString()
          };
          if (!(slicedHeader && slicedHeader.formattedText === formattedValue.formattedText)) {
            continue;
          }
          if (!(decisionObj && decisionObj[memInd])) {
            decisionObj[memInd] = {
              index: [],
              indexObject: {}
            };
            slicedHeader.index = decisionObj[memInd].index = [position[pos]];
            decisionObj[memInd].indexObject[position[pos]] = position[pos];
            slicedHeader.indexObject = decisionObj[memInd].indexObject;
            slicedHeader.valueSort = {};
            slicedHeader.valueSort.axis = field;
            if (keyInd !== 0) {
              slicedHeader.valueSort.levelName = parentMember + this.valueSortSettings.headerDelimiter + slicedHeader.formattedText;
              slicedHeader.valueSort[parentMember + this.valueSortSettings.headerDelimiter + slicedHeader.formattedText] = 1;
              slicedHeader.valueSort.uniqueName = parentMember + this.valueSortSettings.headerDelimiter + (slicedHeader.actualText ? slicedHeader.actualText : slicedHeader.formattedText);
              slicedHeader.valueSort[parentMember + this.valueSortSettings.headerDelimiter + (slicedHeader.actualText ? slicedHeader.actualText : slicedHeader.formattedText)] = 1;
            } else {
              slicedHeader.valueSort[slicedHeader.formattedText] = 1;
              slicedHeader.valueSort.levelName = slicedHeader.formattedText;
              slicedHeader.valueSort[slicedHeader.actualText ? slicedHeader.actualText : slicedHeader.formattedText] = 1;
              slicedHeader.valueSort.uniqueName = slicedHeader.actualText ? slicedHeader.actualText : slicedHeader.formattedText;
            }
            member.members = [];
            hierarchy.push(member);
          } else {
            decisionObj[memInd].index.push(position[pos]);
            decisionObj[memInd].indexObject[position[pos]] = position[pos];
          }
        }
        var diff = slicedHeaders.length - hierarchy.length;
        while (diff > 0) {
          hierarchy.push({
            members: []
          });
          diff--;
        }
        for (var iln = 0, ilt = hierarchy.length; iln < ilt; iln++) {
          if (slicedHeaders[iln].members.length > 0) {
            var level = null;
            if (slicedHeaders[iln].valueSort && slicedHeaders[iln].valueSort.levelName) {
              level = slicedHeaders[iln].valueSort.levelName;
            }
            parentMember = level || slicedHeaders[iln].formattedText;
            hierarchy[iln].members = this.insertPosition(keys, data, keyInd + 1, slicedHeaders[iln].index, axis, parentMember, slicedHeaders[iln].members);
          }
        }
        return hierarchy;
      } else {
        return hierarchy;
      }
    };
    PivotEngine2.prototype.insertTotalPosition = function(headers) {
      var summCell = headers[headers.length - 1];
      if (summCell && summCell.type === "grand sum") {
        summCell.index = this.filterMembers;
        summCell.indexObject = {};
        for (var ln = 0, lt = this.filterMembers.length; ln < lt; ln++) {
          summCell.indexObject[this.filterMembers[ln]] = this.filterMembers[ln];
        }
      }
      return headers;
    };
    PivotEngine2.prototype.calculatePagingValues = function() {
      if (this.isPagingOrVirtualizationEnabled) {
        if (this.valueAxis === 1) {
          this.rowValuesLength = this.dataSourceSettings.values.length;
        } else {
          this.colValuesLength = this.dataSourceSettings.values.length;
        }
        this.columnPageCount = Math.ceil(this.columnCount / this.pageSettings.columnPageSize);
        this.rowPageCount = Math.ceil(this.rowCount / this.pageSettings.rowPageSize);
        this.pageSettings.currentColumnPage = this.pageSettings.currentColumnPage >= this.columnPageCount || this.enableOptimizedRendering && this.pageSettings.currentColumnPage > 1 && (this.pageSettings.currentColumnPage + 1) * this.colValuesLength >= this.columnPageCount ? this.columnPageCount : this.pageSettings.currentColumnPage;
        this.pageSettings.currentRowPage = this.pageSettings.currentRowPage >= this.rowPageCount || this.enableOptimizedRendering && this.pageSettings.currentRowPage > 1 && (this.pageSettings.currentRowPage + 1) * this.rowValuesLength >= this.rowPageCount ? this.rowPageCount : this.pageSettings.currentRowPage;
        var requirePageCount = this.enablePaging ? 1 : this.enableOptimizedRendering ? 1.5 : this.viewportPageCount;
        this.memberCnt = this.enablePaging ? 0 : -this.rowValuesLength;
        this.rowStartPos = (this.pageSettings.currentRowPage * this.pageSettings.rowPageSize - this.pageSettings.rowPageSize) * (this.enablePaging ? 1 : this.rowValuesLength) + (this.enablePaging ? 1 : 0);
        var exactStartPos = this.enablePaging ? this.rowStartPos : this.rowStartPos + this.pageSettings.rowPageSize * requirePageCount * this.rowValuesLength > this.rowCount ? this.rowCount - this.pageSettings.rowPageSize * requirePageCount * this.rowValuesLength : this.rowStartPos;
        if (exactStartPos < 0) {
          exactStartPos = this.rowStartPos = 0;
          this.pageSettings.currentRowPage = 1;
        }
        this.rowFirstLvl = (this.rowStartPos - exactStartPos) % this.pageSettings.rowPageSize;
        this.rowStartPos = exactStartPos;
        this.endPos = this.rowStartPos + this.pageSettings.rowPageSize * requirePageCount * (this.enablePaging ? 1 : this.rowValuesLength) - (this.enablePaging ? 1 : 0);
        this.endPos = this.endPos > this.rowCount + 1 ? this.rowCount + 1 : this.endPos;
        this.rMembers = this.performSlicing(this.rMembers, [], this.rowStartPos, "row");
        this.memberCnt = this.enablePaging ? 0 : -this.colValuesLength;
        this.pageInLimit = false;
        this.colHdrBufferCalculated = false;
        this.colStartPos = (this.pageSettings.currentColumnPage * this.pageSettings.columnPageSize - this.pageSettings.columnPageSize) * (this.enablePaging ? 1 : this.colValuesLength) + (this.enablePaging ? 1 : 0);
        exactStartPos = this.enablePaging ? this.colStartPos : this.colStartPos + this.pageSettings.columnPageSize * requirePageCount * this.colValuesLength > this.columnCount ? this.columnCount - this.pageSettings.columnPageSize * requirePageCount * this.colValuesLength : this.colStartPos;
        if (exactStartPos < 0) {
          exactStartPos = this.colStartPos = 0;
          this.pageSettings.currentColumnPage = 1;
        }
        this.colFirstLvl = (this.colStartPos - exactStartPos) % this.pageSettings.columnPageSize;
        this.colStartPos = exactStartPos;
        this.endPos = this.colStartPos + this.pageSettings.columnPageSize * requirePageCount * (this.enablePaging ? 1 : this.colValuesLength) - (this.enablePaging ? 1 : 0);
        this.endPos = this.endPos > this.columnCount + 1 ? this.columnCount + 1 : this.endPos;
        this.cMembers = this.performSlicing(this.cMembers, [], this.colStartPos, "column");
        this.memberCnt = -1;
        this.pageInLimit = false;
        if (this.isValueHasAdvancedAggregate) {
          if (this.rMembers[this.rMembers.length - 1].type !== "grand sum" && this.headerCollection.rowHeaders[this.headerCollection.rowHeaders.length - 1].type === "grand sum") {
            this.rMembers.push(this.headerCollection.rowHeaders[this.headerCollection.rowHeaders.length - 1]);
            this.removeRowGrandTotal = true;
          }
          if (this.cMembers[this.cMembers.length - 1].type !== "grand sum" && this.headerCollection.columnHeaders[this.headerCollection.columnHeaders.length - 1].type === "grand sum") {
            this.cMembers.push(this.headerCollection.columnHeaders[this.headerCollection.columnHeaders.length - 1]);
            this.removeColumnGrandTotal = true;
          }
        } else {
          this.rowGrandTotal = this.rowGrandTotal ? this.rowGrandTotal : this.headerCollection.rowHeaders[this.headerCollection.rowHeaders.length - 1];
          this.columnGrandTotal = this.columnGrandTotal ? this.columnGrandTotal : this.headerCollection.columnHeaders[this.headerCollection.columnHeaders.length - 1];
        }
      }
    };
    PivotEngine2.prototype.performSlicing = function(headers, slicedHeaders, startPos, axis) {
      var pos = 0;
      while (headers[pos]) {
        if (this.enablePaging && this.endPos <= this.memberCnt && pos !== 0) {
          break;
        }
        this.memberCnt += headers[pos].level <= this.measureIndex ? axis === "column" ? this.colValuesLength : this.rowValuesLength : 1;
        if (!this.pageInLimit && startPos <= this.memberCnt) {
          if (axis === "column") {
            this.colFirstLvl = this.colFirstLvl + headers[pos].level;
          } else {
            this.rowFirstLvl = this.rowFirstLvl + headers[pos].level;
          }
          this.pageInLimit = true;
        }
        if (this.pageInLimit && !this.enablePaging) {
          if (this.endPos <= this.memberCnt) {
            if (axis === "column") {
              if (headers[pos].members.length === 0) {
                if (this.colHdrBufferCalculated) {
                  break;
                }
                this.colHdrBufferCalculated = true;
                this.endPos += headers[pos].level * this.colValuesLength;
              } else if (this.colHdrBufferCalculated) {
                break;
              }
            } else {
              break;
            }
          }
        }
        slicedHeaders.push(headers[pos].members.length > 0 ? this.removeChildMembers(headers[pos]) : headers[pos]);
        if (headers[pos].members.length > 0) {
          if (axis === "column") {
            this.memberCnt -= !(this.dataSourceSettings.showSubTotals && this.dataSourceSettings.showColumnSubTotals && this.columnKeys[headers[pos].valueSort.axis].showSubTotals) ? this.colValuesLength : 0;
          } else if (this.showSubTotalsAtBottom) {
            this.memberCnt++;
          }
          slicedHeaders[slicedHeaders.length - 1].members = this.performSlicing(headers[pos].members, [], startPos, axis);
        }
        if (!this.pageInLimit) {
          slicedHeaders.pop();
        }
        if (headers[pos].level === 0 && this.pageInLimit && this.endPos <= this.memberCnt) {
          break;
        }
        pos++;
      }
      return slicedHeaders;
    };
    PivotEngine2.prototype.removeChildMembers = function(member) {
      var keys = Object.keys(member);
      var keyPos = 0;
      var framedMember = {};
      while (keyPos < keys.length) {
        framedMember[keys[keyPos]] = member[keys[keyPos]];
        if (keys[keyPos] === "members") {
          framedMember["members"] = [];
        }
        keyPos++;
      }
      return framedMember;
    };
    PivotEngine2.prototype.insertAllMember = function(set, filter, customText, axis) {
      var len = set.length;
      customText = " Total";
      var grandTotalSet = {
        hasChild: false,
        index: filter,
        level: 0,
        axis,
        isDrilled: false,
        indexObject: {},
        members: [],
        actualText: "Grand" + customText,
        formattedText: this.localeObj ? this.localeObj.getConstant("grandTotal") : "Grand" + customText,
        ordinal: len,
        type: "grand sum",
        valueSort: {}
      };
      grandTotalSet.valueSort[grandTotalSet.formattedText] = 1;
      grandTotalSet.valueSort.levelName = grandTotalSet.formattedText;
      grandTotalSet.valueSort[grandTotalSet.actualText] = 1;
      grandTotalSet.valueSort.uniqueName = grandTotalSet.actualText;
      for (var ln = 0, lt = filter.length; ln < lt; ln++) {
        grandTotalSet.indexObject[filter[ln]] = filter[ln];
      }
      if (this.dataSourceSettings.grandTotalsPosition === "Top" && this.dataSourceSettings.showGrandTotals) {
        set.unshift(grandTotalSet);
      } else {
        set.push(grandTotalSet);
      }
      return set;
    };
    PivotEngine2.prototype.getTableData = function(rows, reformAxis, columns, pIndex, data, vlt, level, rTotal, cTotal, valueParentIndex) {
      for (var rlt = rows.length, rln = 0; rln < rlt; rln++) {
        var tnum = !this.valueAxis && !this.isLastHeaderHasMeasures && data.length < this.dataSourceSettings.columns.length + 1 ? this.dataSourceSettings.columns.length + 1 : data.length;
        var row = rows[rln];
        reformAxis[tnum] = row;
        var actCnt = tnum - Number(Object.keys(reformAxis)[0]);
        var isLeastNode = !reformAxis[tnum].members.length;
        row.colIndex = 0;
        row.rowIndex = tnum;
        var isRowFieldsAvail = false;
        var delimiter = this.dataSourceSettings.valueSortSettings.headerDelimiter;
        if (this.valueAxis && this.dataSourceSettings.rows.length === 0 && this.dataSourceSettings.values.length > 1) {
          this.rowIndex = isNullOrUndefined(this.rowIndex) && !isLeastNode && this.dataSourceSettings.rows.length === 0 ? row.index : this.rowIndex;
          isRowFieldsAvail = this.valueAxis && this.dataSourceSettings.rows.length === 0 && row.valueSort.levelName && row.valueSort.levelName.toString().indexOf("Grand Total" + delimiter) !== 0;
          if (this.valueAxis && this.dataSourceSettings.rows.length === 0 && row.valueSort.levelName.toString().indexOf("Grand Total" + delimiter) === 0) {
            row.index = this.rowIndex;
          }
        }
        if (!isRowFieldsAvail) {
          var isValue = false;
          if (this.showSubTotalsAtBottom && reformAxis[pIndex] && reformAxis[pIndex].hasChild) {
            var axis = void 0;
            for (var _i = 0, _a = reformAxis[pIndex].members; _i < _a.length; _i++) {
              axis = _a[_i];
              if (axis.type === "value") {
                isValue = true;
                break;
              }
            }
          }
          if (isValue && !reformAxis[tnum].isSum && reformAxis[tnum].members && reformAxis[tnum].members.length === 0) {
            continue;
          }
          if (!data[tnum]) {
            data[tnum] = [];
            this.valueContent[actCnt] = {};
          }
          data[tnum][0] = reformAxis[tnum] = this.valueContent[actCnt][0] = PivotUtil.getFormattedHeader(row, this);
          if (this.valueAxis && (this.isMultiMeasures || this.dataSourceSettings.alwaysShowValueHeader)) {
            var hPos = tnum;
            var actpos = actCnt;
            var rowIndex = tnum;
            var isValueCellUpdated = false;
            if ((!(level === 0 && this.measureIndex === 0) && !isLeastNode || isLeastNode) && row.type === "value" && !row.valueSort.axis || level > this.measureIndex && row.axis === "row" && row.valueSort.axis) {
              var vln = 0;
              var isValueIndexFound = false;
              var rowUniqueName = row.valueSort.uniqueName ? row.valueSort.uniqueName.toString().split(this.valueSortSettings.headerDelimiter) : [];
              for (var cln = 0, dln = 1, clt = columns.length; cln < clt; ++cln) {
                if (!isValueIndexFound) {
                  for (vln = 0; vln < vlt; vln++) {
                    if (rowUniqueName.indexOf(this.dataSourceSettings.values[vln].name) > -1) {
                      isValueIndexFound = true;
                      isValueCellUpdated = true;
                      break;
                    }
                  }
                }
                if (level > this.measureIndex && row.axis === "row" && row.valueSort.axis) {
                  this.updateRowData(rows, columns, tnum, data, vln, rln, cln, dln, actCnt, rTotal, cTotal);
                } else {
                  if (!reformAxis[pIndex]) {
                    isValueCellUpdated = false;
                    break;
                  }
                  var parentIndex = this.showSubTotalsAtBottom && valueParentIndex ? valueParentIndex : pIndex;
                  this.updateRowData(reformAxis, columns, tnum, data, vln, parentIndex, cln, dln, actCnt, rTotal, cTotal);
                }
                dln = data[tnum].length;
              }
            }
            if (!isValueCellUpdated) {
              for (var cln = 0, dln = 1, clt = columns.length; cln < clt; ++cln) {
                dln = data[tnum].length;
                data[hPos][dln] = this.valueContent[actpos][dln] = {
                  axis: "value",
                  actualText: "",
                  colSpan: 1,
                  colIndex: dln,
                  formattedText: "",
                  hasChild: false
                };
              }
            }
            this.recursiveRowData(rows, reformAxis, columns, rowIndex, data, vlt, isLeastNode, rln, vlt, level, rTotal, cTotal);
          } else {
            for (var cln = 0, dln = 1, clt = columns.length; cln < clt; ++cln) {
              var columnUniqueName = columns[cln].valueSort.uniqueName ? columns[cln].valueSort.uniqueName.toString().split(this.valueSortSettings.headerDelimiter) : [];
              for (var vln = 0; vln < vlt; vln++) {
                if (!this.valueAxis && !this.isLastHeaderHasMeasures) {
                  if (columnUniqueName.indexOf(this.dataSourceSettings.values[vln].name) > -1) {
                    this.updateRowData(rows, columns, tnum, data, vln, rln, cln, dln, actCnt, rTotal, cTotal);
                    dln = data[tnum].length;
                  }
                } else {
                  this.updateRowData(rows, columns, tnum, data, vln, rln, cln, dln, actCnt, rTotal, cTotal);
                  dln = data[tnum].length;
                }
              }
            }
            this.recursiveRowData(rows, reformAxis, columns, tnum, data, vlt, isLeastNode, rln, 0, level, rTotal, cTotal);
          }
        } else if (!isLeastNode) {
          this.recursiveRowData(rows, reformAxis, columns, tnum, data, vlt, isLeastNode, rln, 0, level, rTotal, cTotal);
        }
      }
    };
    PivotEngine2.prototype.insertRowSubTotals = function(reformAxis, columns, tnum, data, vlt, level, rTotal, cTotal) {
      var isValueAxis = reformAxis[tnum].type ? reformAxis[tnum].type === "value" && reformAxis[tnum].valueSort.levelName !== reformAxis[tnum].actualText : false;
      if (reformAxis[tnum].hasChild && reformAxis[tnum].members.length > 0) {
        var parentIndexes = [];
        var subTotal = PivotUtil.frameHeaderWithKeys(reformAxis[tnum]);
        if (reformAxis[tnum].members[0].type === "value") {
          var startIndex = 0;
          var valueCells = [];
          var i = 1;
          for (var _i = 0, _a = subTotal.members; _i < _a.length; _i++) {
            var axis = _a[_i];
            if (axis.type === "value") {
              valueCells[valueCells.length] = axis;
            }
          }
          while (startIndex < valueCells.length) {
            var valueCell = PivotUtil.frameHeaderWithKeys(valueCells[startIndex]);
            var index = void 0;
            for (i; i < reformAxis.length; i++) {
              if (reformAxis[i] && reformAxis[i].valueSort.levelName === valueCell.valueSort.levelName) {
                index = reformAxis.indexOf(reformAxis[i]);
                break;
              }
            }
            if (index > -1) {
              parentIndexes[parentIndexes.length] = index;
            }
            valueCell.formattedText = subTotal.formattedText + " " + valueCell.formattedText;
            valueCell.isSum = true;
            valueCell.members = [];
            this.getTableData([valueCell], reformAxis, columns, tnum, data, vlt, level, rTotal, cTotal);
            startIndex++;
          }
        } else {
          subTotal.formattedText = subTotal.formattedText + " Total";
          subTotal.members = [];
          subTotal.isDrilled = false;
          subTotal.hasChild = false;
          subTotal.isSum = true;
          subTotal.type = "sum";
          var parentIndex = isValueAxis ? this.getParentIndex(reformAxis, subTotal) : 0;
          this.getTableData([subTotal], reformAxis, columns, tnum, data, vlt, level, rTotal, cTotal, parentIndex);
          parentIndexes = [tnum];
        }
        for (var index = 0; index < parentIndexes.length; index++) {
          var parentInfo = data[parentIndexes[index]];
          parentInfo = parentInfo.map(function(dataValue) {
            dataValue.formattedText = dataValue.colIndex === 0 ? dataValue.formattedText : "";
            return dataValue;
          });
          data[parentIndexes[index]] = parentInfo;
        }
      }
    };
    PivotEngine2.prototype.getParentIndex = function(reformAxis, axis) {
      var parentIndex = 0;
      for (var i = reformAxis.length - 1; i > 0; i--) {
        if (axis.level === reformAxis[i].level && reformAxis[i].index) {
          parentIndex = i;
          break;
        }
      }
      return parentIndex;
    };
    PivotEngine2.prototype.getAggregatedHeaders = function(rows, columns, rMembers, cMembers, values) {
      this.selectedHeaders = {
        selectedHeader: [],
        values: []
      };
      for (var vlt = values.length, vln = 0; vln < vlt; vln++) {
        switch (values[vln].type) {
          case "DifferenceFrom":
          case "PercentageOfDifferenceFrom":
            {
              var baseField = void 0;
              var baseItem = void 0;
              this.selectedHeaders.values.push(values[vln].name);
              if (values[vln].baseField && values[vln].baseItem) {
                baseField = values[vln].baseField;
                baseItem = values[vln].baseItem;
              } else if (this.valueAxis && (this.isMultiMeasures || this.dataSourceSettings.alwaysShowValueHeader) && columns.length > 0) {
                baseField = columns[0].name;
                baseItem = Object.keys(this.fieldList[columns[0].name].members)[0];
              } else if (rows.length > 0) {
                baseField = rows[0].name;
                baseItem = Object.keys(this.fieldList[rows[0].name].members)[0];
              }
              var isHeaderSelected = false;
              for (var _i = 0, rows_2 = rows; _i < rows_2.length; _i++) {
                var row = rows_2[_i];
                if (row.name === baseField) {
                  this.getAggregatedHeaderData(rMembers, values[vln].name, baseItem, false, "row", values[vln].type, this.selectedHeaders.selectedHeader, vln);
                  isHeaderSelected = true;
                  break;
                }
              }
              if (!isHeaderSelected) {
                for (var _a = 0, columns_1 = columns; _a < columns_1.length; _a++) {
                  var column = columns_1[_a];
                  if (column.name === baseField) {
                    this.getAggregatedHeaderData(cMembers, values[vln].name, baseItem, false, "column", values[vln].type, this.selectedHeaders.selectedHeader, vln);
                    break;
                  }
                }
              }
            }
            break;
          case "PercentageOfParentRowTotal":
          case "PercentageOfParentColumnTotal":
            {
              this.selectedHeaders.values.push(values[vln].name);
              this.getAggregatedHeaderData(values[vln].type === "PercentageOfParentRowTotal" ? rMembers : cMembers, values[vln].name, void 0, false, values[vln].type === "PercentageOfParentRowTotal" ? "row" : "column", values[vln].type, this.selectedHeaders.selectedHeader, vln);
            }
            break;
          case "RunningTotals":
            {
              this.selectedHeaders.values.push(values[vln].name);
              this.getAggregatedHeaderData(this.valueAxis && (this.isMultiMeasures || this.dataSourceSettings.alwaysShowValueHeader) ? cMembers : rMembers, values[vln].name, void 0, false, this.valueAxis && (this.isMultiMeasures || this.dataSourceSettings.alwaysShowValueHeader) ? "column" : "row", values[vln].type, this.selectedHeaders.selectedHeader, vln);
            }
            break;
          case "PercentageOfParentTotal":
            {
              var baseField = void 0;
              this.selectedHeaders.values.push(values[vln].name);
              if (values[vln].baseField) {
                baseField = values[vln].baseField;
              } else if (this.valueAxis && (this.isMultiMeasures || this.dataSourceSettings.alwaysShowValueHeader) && columns.length > 0) {
                baseField = columns[0].name;
              } else if (rows.length > 0) {
                baseField = rows[0].name;
              }
              var isHeaderSelected = false;
              for (var len = rows.length, i = 0; i < len; i++) {
                if (rows[i].name === baseField) {
                  var level = i >= this.measureIndex ? i + 1 : i;
                  this.getAggregatedHeaderData(rMembers, values[vln].name, void 0, false, "row", values[vln].type, this.selectedHeaders.selectedHeader, vln, level);
                  isHeaderSelected = true;
                  break;
                }
              }
              if (!isHeaderSelected) {
                for (var len = columns.length, i = 0; i < len; i++) {
                  if (columns[i].name === baseField) {
                    var level = i;
                    if (!this.valueAxis && !this.isLastHeaderHasMeasures) {
                      level = i >= this.measureIndex ? i + 1 : i;
                    }
                    this.getAggregatedHeaderData(cMembers, values[vln].name, void 0, false, "column", values[vln].type, this.selectedHeaders.selectedHeader, vln, level);
                    break;
                  }
                }
              }
            }
            break;
        }
      }
    };
    PivotEngine2.prototype.getAggregatedHeaderData = function(headers, name, baseItem, isChildren, type, aggregateType, selectedHeaders, vln, level) {
      for (var _i = 0, headers_1 = headers; _i < headers_1.length; _i++) {
        var rln = headers_1[_i];
        switch (aggregateType) {
          case "DifferenceFrom":
          case "PercentageOfDifferenceFrom":
            {
              var levelName = rln.valueSort.levelName.toString().split(this.valueSortSettings.headerDelimiter);
              if (levelName.indexOf(baseItem) !== -1) {
                var actualHeaders = [];
                if (!isChildren && type === "row") {
                  for (var _a = 0, headers_2 = headers; _a < headers_2.length; _a++) {
                    var header = headers_2[_a];
                    if (header.level >= rln.level) {
                      actualHeaders.push(header);
                    }
                  }
                }
                selectedHeaders.push(this.updateSelectedHeaders(baseItem, rln.level, type, isChildren, name, aggregateType, rln.valueSort.levelName, isChildren ? [rln] : type === "column" ? headers : actualHeaders, vln + 1));
                if (rln.members.length > 0) {
                  var isValuesAvail = false;
                  var members = [];
                  if (type === "row") {
                    for (var _b = 0, _c = rln.members; _b < _c.length; _b++) {
                      var member = _c[_b];
                      if (member.type === "value" && member.members.length === 0) {
                        isValuesAvail = true;
                      } else {
                        members.push(member);
                        isValuesAvail = false;
                        break;
                      }
                    }
                  }
                  if (!isValuesAvail && members.length > 0 || type === "column") {
                    this.getAggregatedHeaderData(type === "column" ? rln.members : members, name, baseItem, true, type, aggregateType, selectedHeaders[selectedHeaders.length - 1].childMembers, vln);
                  }
                }
              } else if (rln.members.length > 0) {
                this.getAggregatedHeaderData(rln.members, name, baseItem, false, type, aggregateType, selectedHeaders, vln);
              }
            }
            break;
          case "RunningTotals":
          case "PercentageOfParentRowTotal":
          case "PercentageOfParentColumnTotal":
            {
              if (rln.type === "grand sum") {
                selectedHeaders.push(this.updateSelectedHeaders(void 0, rln.level, type, false, name, aggregateType, rln.valueSort.levelName, headers, vln + 1));
              } else {
                if (rln.members.length > 0) {
                  selectedHeaders.push(this.updateSelectedHeaders(void 0, rln.level, type, false, name, aggregateType, rln.valueSort.levelName, rln.members, vln + 1));
                  this.getAggregatedHeaderData(rln.members, name, void 0, false, type, aggregateType, selectedHeaders, vln);
                }
              }
            }
            break;
          case "PercentageOfParentTotal":
            {
              if (rln.type !== "grand sum") {
                if (rln.valueSort.levelName.split(this.valueSortSettings.headerDelimiter).length - 1 === level) {
                  if (rln.members.length > 0) {
                    if (isChildren) {
                      var aggregateHeaders = selectedHeaders[selectedHeaders.length - 1].aggregateHeaders;
                      for (var _d = 0, _e = rln.members; _d < _e.length; _d++) {
                        var member = _e[_d];
                        aggregateHeaders.push(extend({}, member, null, true));
                      }
                    } else {
                      var children = extend([], rln.members, null, true);
                      selectedHeaders.push(this.updateSelectedHeaders(void 0, rln.level, type, false, name, aggregateType, rln.valueSort.levelName, children, vln + 1));
                      var aggregateHeaders = selectedHeaders[selectedHeaders.length - 1].aggregateHeaders;
                      aggregateHeaders.push(extend({}, rln, null, true));
                    }
                    this.getAggregatedHeaderData(rln.members, name, void 0, true, type, aggregateType, selectedHeaders, vln, level + 1);
                  } else {
                    if (!isChildren) {
                      selectedHeaders.push(this.updateSelectedHeaders(void 0, rln.level, type, false, name, aggregateType, rln.valueSort.levelName, [rln], vln + 1));
                    }
                  }
                } else if (rln.members.length > 0) {
                  this.getAggregatedHeaderData(rln.members, name, void 0, false, type, aggregateType, selectedHeaders, vln, level);
                }
              }
            }
            break;
        }
      }
    };
    PivotEngine2.prototype.updateSelectedHeaders = function(baseItem, level, type, isChildren, name, aggregateType, levelName, headers, vCount) {
      var headerData = {
        name: baseItem,
        level,
        axis: type,
        isChild: isChildren,
        value: name,
        type: aggregateType,
        uniqueName: levelName,
        aggregateHeaders: extend([], headers, null, true),
        childMembers: [],
        valueCount: vCount
      };
      return headerData;
    };
    PivotEngine2.prototype.applyAdvancedAggregate = function(rowheads, colheads, data) {
      this.aggregatedValueMatrix = [];
      if (this.selectedHeaders.values.length > 0) {
        var pivotIndex = {};
        var colIndex = [];
        var rowIndex = [];
        var isIndexFilled = false;
        for (var rlt = data.length, rln = 0; rln < rlt; rln++) {
          if (data[rln] !== void 0 && data[rln][0] !== void 0) {
            if (!isIndexFilled) {
              for (var clt = data[rln].length, cln = 0; cln < clt; cln++) {
                var actualText = data[rln][cln].actualText;
                if (data[rln][cln].axis === "value" && this.selectedHeaders.values.indexOf(actualText) !== -1) {
                  colIndex.push(cln);
                  isIndexFilled = true;
                }
              }
            }
            var isTotal = this.showSubTotalsAtBottom && data[rln][0].isDrilled && data[rln][0].hasChild;
            if (!isTotal) {
              if (colIndex.length > 0 && data[rln][colIndex[0]].axis === "value" && this.selectedHeaders.values.indexOf(data[rln][colIndex[0]].actualText) !== -1) {
                rowIndex.push(rln);
                for (var _i = 0, colIndex_1 = colIndex; _i < colIndex_1.length; _i++) {
                  var index = colIndex_1[_i];
                  pivotIndex[rln + "," + index] = [rln, index];
                }
              }
            }
          }
        }
        this.updateAggregates(rowheads, colheads, data, this.selectedHeaders.selectedHeader, colIndex, rowIndex, pivotIndex);
        var indexCollection = Object.keys(pivotIndex);
        for (var _a = 0, indexCollection_1 = indexCollection; _a < indexCollection_1.length; _a++) {
          var index = indexCollection_1[_a];
          var currentSet = data[pivotIndex[index][0]][pivotIndex[index][1]];
          currentSet.formattedText = this.selectedHeaders.selectedHeader.length > 0 ? this.emptyCellTextContent : "#N/A";
          if (!this.aggregatedValueMatrix[pivotIndex[index][0]]) {
            this.aggregatedValueMatrix[pivotIndex[index][0]] = [];
          }
          this.aggregatedValueMatrix[pivotIndex[index][0]][pivotIndex[index][1]] = 0;
        }
        this.updatePivotValues(true);
      } else {
        return;
      }
    };
    PivotEngine2.prototype.updateAggregates = function(rowheads, colheads, data, selectedHeaders, colIndex, rowIndex, pivotIndex) {
      for (var _i = 0, selectedHeaders_1 = selectedHeaders; _i < selectedHeaders_1.length; _i++) {
        var headers = selectedHeaders_1[_i];
        var selectedHeaderCollection = headers.aggregateHeaders;
        var name_3 = headers.value;
        var aggregateType = headers.type;
        var uniqueName = headers.uniqueName;
        var axis = headers.axis;
        var isRowBaseField = axis === "row" ? true : false;
        var activeValues = void 0;
        var indexCollection = [];
        var activeColumn = [];
        var columnHeaders = [];
        var rowindexCollection = [];
        var selectedRowValues = [];
        var selectedColumnValues = [];
        if (["DifferenceFrom", "PercentageOfDifferenceFrom", "PercentageOfParentRowTotal", "PercentageOfParentColumnTotal", "PercentageOfParentTotal", "RunningTotals"].indexOf(headers.type) !== -1) {
          if (isRowBaseField) {
            if (headers.type !== "RunningTotals") {
              for (var _a = 0, rowIndex_1 = rowIndex; _a < rowIndex_1.length; _a++) {
                var rln = rowIndex_1[_a];
                if (rowheads[rln] !== void 0) {
                  if (rowheads[rln].valueSort[uniqueName]) {
                    activeValues = rowheads[rln];
                    if (this.valueAxis === 0 || this.valueAxis && data[rln] && data[rln][1] && data[rln][1].actualText === name_3) {
                      selectedRowValues = data[rln];
                    } else {
                      selectedRowValues = [];
                    }
                    break;
                  }
                }
              }
            }
          } else {
            for (var len_5 = data.length, i = 0; i < len_5; i++) {
              if (data[i] !== void 0 && data[i][0] === void 0) {
                columnHeaders.push(data[i]);
              } else {
                break;
              }
            }
            var len = columnHeaders.length;
            while (len--) {
              var axisObj = columnHeaders[len][colIndex[0]];
              var cLevelName = axisObj.actualText;
              if (this.selectedHeaders.values.indexOf(cLevelName) === -1) {
                activeColumn = columnHeaders[len];
                len = 0;
              }
            }
            if (headers.type !== "RunningTotals") {
              for (var clt = activeColumn.length, cln = 0; cln < clt; cln++) {
                var isSelectedColumn = false;
                if (activeColumn[cln] !== void 0 && activeColumn[cln].valueSort[uniqueName]) {
                  activeValues = activeColumn[cln];
                  for (var len_6 = data.length, i = 0; i < len_6; i++) {
                    var axisObj = data[i];
                    if (axisObj !== void 0 && axisObj[0] !== void 0 && axisObj[cln].axis === "value" && this.selectedHeaders.values.indexOf(axisObj[cln].actualText) !== -1) {
                      isSelectedColumn = true;
                      selectedColumnValues[i] = axisObj[cln];
                      rowindexCollection.push(i);
                    }
                  }
                  if (isSelectedColumn) {
                    break;
                  }
                }
              }
              if (selectedColumnValues.length === 0 && rowindexCollection.length === 0) {
                for (var clt = activeColumn.length, cln = 0; cln < clt; cln++) {
                  var isSelectedColumn = false;
                  if (activeColumn[cln] !== void 0 && activeColumn[cln].valueSort.levelName.indexOf(uniqueName) === 0) {
                    activeValues = activeColumn[cln];
                    for (var lnt = data.length, j = 0; j < lnt; j++) {
                      var axisObj = data[j];
                      if (axisObj !== void 0 && axisObj[0] !== void 0 && axisObj[cln].axis === "value" && this.selectedHeaders.values.indexOf(axisObj[cln].actualText) !== -1) {
                        isSelectedColumn = true;
                        rowindexCollection.push(j);
                      }
                    }
                    if (isSelectedColumn) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
        switch (headers.type) {
          case "DifferenceFrom":
          case "PercentageOfDifferenceFrom":
            {
              var isChildren = headers.isChild;
              if (isRowBaseField) {
                if (!isChildren) {
                  for (var _b = 0, selectedHeaderCollection_1 = selectedHeaderCollection; _b < selectedHeaderCollection_1.length; _b++) {
                    var item = selectedHeaderCollection_1[_b];
                    for (var _c = 0, rowIndex_2 = rowIndex; _c < rowIndex_2.length; _c++) {
                      var rln = rowIndex_2[_c];
                      if (rowheads[rln] !== void 0) {
                        if (rowheads[rln].valueSort[item.valueSort.levelName] && rowheads[rln].level === activeValues.level && rowheads[rln].type !== "grand sum") {
                          for (var _d = 0, colIndex_2 = colIndex; _d < colIndex_2.length; _d++) {
                            var index = colIndex_2[_d];
                            var currentSet = data[rln][index];
                            if (currentSet.axis === "value" && currentSet.actualText === name_3) {
                              indexCollection.push([rln, index]);
                              if (pivotIndex[rln + "," + index]) {
                                delete pivotIndex[rln + "," + index];
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  var uniqueLevelName = uniqueName.split(this.valueSortSettings.headerDelimiter);
                  for (var _e = 0, rowIndex_3 = rowIndex; _e < rowIndex_3.length; _e++) {
                    var rlen = rowIndex_3[_e];
                    if (rowheads[rlen] !== void 0) {
                      var levelName = rowheads[rlen].valueSort.levelName.split(this.valueSortSettings.headerDelimiter);
                      if (levelName.indexOf(uniqueLevelName[uniqueLevelName.length - 1]) !== -1 && activeValues && rowheads[rlen].level === activeValues.level) {
                        for (var _f = 0, colIndex_3 = colIndex; _f < colIndex_3.length; _f++) {
                          var index = colIndex_3[_f];
                          var currentSet = data[rlen][index];
                          if (currentSet.axis === "value" && currentSet.actualText === name_3) {
                            indexCollection.push([rlen, index]);
                            if (pivotIndex[rlen + "," + index]) {
                              delete pivotIndex[rlen + "," + index];
                            }
                          }
                        }
                      }
                    }
                  }
                }
                for (var _g = 0, indexCollection_2 = indexCollection; _g < indexCollection_2.length; _g++) {
                  var index = indexCollection_2[_g];
                  var currentSet = data[index[0]][index[1]];
                  var actualValue = isNullOrUndefined(selectedRowValues[index[1]].actualValue) ? 0 : selectedRowValues[index[1]].actualValue;
                  var cVal = (isNullOrUndefined(currentSet.actualValue) ? 0 : currentSet.actualValue) - actualValue;
                  cVal = isNaN(cVal) ? 0 : currentSet.value === 0 && selectedRowValues[index[1]].value === 0 ? 0 : cVal;
                  if (!this.aggregatedValueMatrix[index[0]]) {
                    this.aggregatedValueMatrix[index[0]] = [];
                  }
                  if (aggregateType === "DifferenceFrom") {
                    this.aggregatedValueMatrix[index[0]][index[1]] = cVal;
                    currentSet.formattedText = cVal === 0 ? this.emptyCellTextContent : this.getFormattedValue(cVal, name_3).formattedText;
                  } else {
                    cVal = actualValue === 0 ? 0 : cVal / actualValue;
                    this.aggregatedValueMatrix[index[0]][index[1]] = cVal;
                    currentSet.formattedText = currentSet.showSubTotals ? cVal !== 0 ? this.globalize.formatNumber(cVal, {
                      format: "P",
                      maximumFractionDigits: this.getPercentFormat(this.formatFields, currentSet.actualText)
                    }) : this.emptyCellTextContent : currentSet.formattedText;
                  }
                }
              } else {
                if (!isChildren) {
                  for (var _h = 0, selectedHeaderCollection_2 = selectedHeaderCollection; _h < selectedHeaderCollection_2.length; _h++) {
                    var item = selectedHeaderCollection_2[_h];
                    for (var clt = activeColumn.length, cln = 0; cln < clt; cln++) {
                      var isSelectedColumn = false;
                      if (activeColumn[cln] !== void 0 && activeColumn[cln].valueSort[item.valueSort.levelName] && activeValues && activeColumn[cln].level === activeValues.level && activeColumn[cln].type !== "grand sum") {
                        for (var _j = 0, rowindexCollection_1 = rowindexCollection; _j < rowindexCollection_1.length; _j++) {
                          var index = rowindexCollection_1[_j];
                          var currentSet = data[index][cln];
                          if (currentSet.axis === "value" && currentSet.actualText === name_3) {
                            isSelectedColumn = true;
                            indexCollection.push([index, cln]);
                            if (pivotIndex[index + "," + cln]) {
                              delete pivotIndex[index + "," + cln];
                            }
                          }
                        }
                        if (isSelectedColumn) {
                          break;
                        }
                      }
                    }
                  }
                } else {
                  var uniqueLevelName = uniqueName.split(this.valueSortSettings.headerDelimiter);
                  for (var clt = activeColumn.length, clen = 0; clen < clt; clen++) {
                    var isSelectedColumn = false;
                    if (activeColumn[clen] !== void 0) {
                      var levelName = activeColumn[clen].valueSort.levelName.split(this.valueSortSettings.headerDelimiter);
                      if (levelName.indexOf(uniqueLevelName[uniqueLevelName.length - 1]) !== -1 && activeColumn[clen].level === activeValues.level) {
                        for (var _k = 0, rowindexCollection_2 = rowindexCollection; _k < rowindexCollection_2.length; _k++) {
                          var index = rowindexCollection_2[_k];
                          var currentSet = data[index][clen];
                          if (currentSet.axis === "value" && currentSet.actualText === name_3) {
                            isSelectedColumn = true;
                            indexCollection.push([index, clen]);
                            if (pivotIndex[index + "," + clen]) {
                              delete pivotIndex[index + "," + clen];
                            }
                          }
                        }
                        if (isSelectedColumn) {
                          break;
                        }
                      }
                    }
                  }
                }
                var selectedColumn = void 0;
                if (selectedColumnValues.length === 0) {
                  selectedColumn = this.getSelectedColumn(headers.uniqueName, colheads);
                }
                for (var _l = 0, indexCollection_3 = indexCollection; _l < indexCollection_3.length; _l++) {
                  var index = indexCollection_3[_l];
                  var currentSet = data[index[0]][index[1]];
                  var selectedColumnValue = 0;
                  if (selectedColumnValues.length === 0) {
                    var selectedRow = this.getSelectedRow(currentSet.rowHeaders, rowheads);
                    selectedColumnValue = this.getAggregateValue(selectedRow.index, selectedColumn.indexObject, this.fieldList[name_3].index, headers.type, false);
                  } else {
                    selectedColumnValue = selectedColumnValues[index[0]].value;
                  }
                  var cVal = currentSet.value - selectedColumnValue;
                  cVal = isNaN(cVal) ? 0 : cVal;
                  if (!this.aggregatedValueMatrix[index[0]]) {
                    this.aggregatedValueMatrix[index[0]] = [];
                  }
                  if (aggregateType === "DifferenceFrom") {
                    currentSet.formattedText = cVal === 0 ? this.emptyCellTextContent : this.getFormattedValue(cVal, name_3).formattedText;
                    this.aggregatedValueMatrix[index[0]][index[1]] = cVal;
                  } else {
                    cVal = selectedColumnValues[index[0]].value === 0 ? 0 : cVal / selectedColumnValues[index[0]].value;
                    currentSet.formattedText = cVal !== 0 ? this.globalize.formatNumber(cVal, {
                      format: "P",
                      maximumFractionDigits: this.getPercentFormat(this.formatFields, currentSet.actualText)
                    }) : this.emptyCellTextContent;
                    this.aggregatedValueMatrix[index[0]][index[1]] = cVal;
                  }
                }
              }
              if (headers.childMembers.length > 0) {
                this.updateAggregates(rowheads, colheads, data, headers.childMembers, colIndex, rowIndex, pivotIndex);
              }
            }
            break;
          case "PercentageOfParentRowTotal":
          case "PercentageOfParentColumnTotal":
          case "PercentageOfParentTotal":
            {
              if (isRowBaseField) {
                for (var _m = 0, selectedHeaderCollection_3 = selectedHeaderCollection; _m < selectedHeaderCollection_3.length; _m++) {
                  var item = selectedHeaderCollection_3[_m];
                  for (var _o = 0, rowIndex_4 = rowIndex; _o < rowIndex_4.length; _o++) {
                    var i = rowIndex_4[_o];
                    if (rowheads[i] !== void 0) {
                      if (rowheads[i].valueSort[item.valueSort.levelName] && rowheads[i].level === item.level) {
                        for (var _p = 0, colIndex_4 = colIndex; _p < colIndex_4.length; _p++) {
                          var index = colIndex_4[_p];
                          var currentSet = data[i][index];
                          if (currentSet.axis === "value" && currentSet.actualText === name_3) {
                            indexCollection.push([i, index]);
                            if (pivotIndex[i + "," + index]) {
                              delete pivotIndex[i + "," + index];
                            }
                          }
                        }
                      }
                    }
                  }
                }
                for (var _q = 0, indexCollection_4 = indexCollection; _q < indexCollection_4.length; _q++) {
                  var i = indexCollection_4[_q];
                  var currentSet = data[i[0]][i[1]];
                  var selectedRowValue = 0;
                  if (selectedRowValues.length === 0 && activeValues) {
                    selectedRowValue = this.getAggregateValue(activeValues.index, colheads[i[1] - 1].indexObject, this.fieldList[name_3].index, headers.type, false);
                  } else {
                    selectedRowValue = selectedRowValues[i[1]] ? selectedRowValues[i[1]].actualValue : 0;
                  }
                  var cVal = currentSet.value / selectedRowValue;
                  cVal = isNaN(cVal) ? 0 : cVal;
                  currentSet.formattedText = currentSet.showSubTotals ? cVal !== 0 ? this.globalize.formatNumber(cVal, {
                    format: "P",
                    maximumFractionDigits: this.getPercentFormat(this.formatFields, currentSet.actualText)
                  }) : this.emptyCellTextContent : currentSet.formattedText;
                  if (!this.aggregatedValueMatrix[i[0]]) {
                    this.aggregatedValueMatrix[i[0]] = [];
                  }
                  this.aggregatedValueMatrix[i[0]][i[1]] = cVal;
                }
              } else {
                for (var _r = 0, selectedHeaderCollection_4 = selectedHeaderCollection; _r < selectedHeaderCollection_4.length; _r++) {
                  var item = selectedHeaderCollection_4[_r];
                  for (var clt = activeColumn.length, j = 0; j < clt; j++) {
                    var isSelectedColumn = false;
                    if (activeColumn[j] !== void 0 && activeColumn[j].valueSort[item.valueSort.levelName]) {
                      for (var _s = 0, rowindexCollection_3 = rowindexCollection; _s < rowindexCollection_3.length; _s++) {
                        var index = rowindexCollection_3[_s];
                        var isTotals = this.showSubTotalsAtBottom && data[index][0].isDrilled && data[index][0].hasChild;
                        if (!isTotals) {
                          var currentSet = data[index][j];
                          if (currentSet.axis === "value" && currentSet.actualText === name_3) {
                            isSelectedColumn = true;
                            indexCollection.push([index, j]);
                            if (pivotIndex[index + "," + j]) {
                              delete pivotIndex[index + "," + j];
                            }
                          }
                        }
                      }
                      if (isSelectedColumn) {
                        break;
                      }
                    }
                  }
                }
                var selectedCol = void 0;
                if (selectedColumnValues.length === 0) {
                  selectedCol = this.getSelectedColumn(headers.uniqueName, colheads);
                }
                for (var _t = 0, indexCollection_5 = indexCollection; _t < indexCollection_5.length; _t++) {
                  var i = indexCollection_5[_t];
                  var currentSet = data[i[0]][i[1]];
                  var selectedColValue = 0;
                  if (selectedColumnValues.length === 0) {
                    var selectedRow = this.getSelectedRow(currentSet.rowHeaders, rowheads);
                    selectedColValue = this.getAggregateValue(selectedRow.index, selectedCol.indexObject, this.fieldList[name_3].index, headers.type, false);
                  } else {
                    selectedColValue = selectedColumnValues[i[0]].value;
                  }
                  var val = currentSet.value / selectedColValue;
                  val = isNaN(val) ? 0 : val;
                  currentSet.formattedText = val !== 0 ? this.globalize.formatNumber(val, {
                    format: "P",
                    maximumFractionDigits: this.getPercentFormat(this.formatFields, currentSet.actualText)
                  }) : this.emptyCellTextContent;
                  if (!this.aggregatedValueMatrix[i[0]]) {
                    this.aggregatedValueMatrix[i[0]] = [];
                  }
                  this.aggregatedValueMatrix[i[0]][i[1]] = val;
                }
              }
            }
            break;
          case "RunningTotals":
            {
              if (isRowBaseField) {
                for (var _u = 0, colIndex_5 = colIndex; _u < colIndex_5.length; _u++) {
                  var index = colIndex_5[_u];
                  var cVal = 0;
                  for (var _v = 0, selectedHeaderCollection_5 = selectedHeaderCollection; _v < selectedHeaderCollection_5.length; _v++) {
                    var item = selectedHeaderCollection_5[_v];
                    for (var _w = 0, rowIndex_5 = rowIndex; _w < rowIndex_5.length; _w++) {
                      var rlen = rowIndex_5[_w];
                      if (rowheads[rlen] !== void 0) {
                        var currentSet = data[rlen][index];
                        if (rowheads[rlen] !== void 0 && rowheads[rlen].valueSort[item.valueSort.levelName] && rowheads[rlen].level === item.level && currentSet.axis === "value" && currentSet.actualText === name_3) {
                          if (rowheads[rlen].type !== "grand sum") {
                            cVal += !currentSet.showSubTotals && !(!isNullOrUndefined(currentSet.actualValue) && isNaN(currentSet.actualValue)) ? currentSet.actualValue : !isNullOrUndefined(currentSet.value) && !isNaN(currentSet.value) ? currentSet.value : null;
                            currentSet.formattedText = currentSet.showSubTotals ? cVal === 0 && currentSet.actualValue && currentSet.actualValue !== 0 ? "" : this.getFormattedValue(cVal, name_3).formattedText : currentSet.formattedText;
                            if (!this.aggregatedValueMatrix[rlen]) {
                              this.aggregatedValueMatrix[rlen] = [];
                            }
                            this.aggregatedValueMatrix[rlen][index] = cVal;
                          }
                          if (pivotIndex[rlen + "," + index]) {
                            delete pivotIndex[rlen + "," + index];
                          }
                          break;
                        }
                      }
                    }
                  }
                }
              } else {
                for (var _x = 0, rowIndex_6 = rowIndex; _x < rowIndex_6.length; _x++) {
                  var rln = rowIndex_6[_x];
                  if (data[rln] !== void 0) {
                    var cVal = 0;
                    for (var _y = 0, selectedHeaderCollection_6 = selectedHeaderCollection; _y < selectedHeaderCollection_6.length; _y++) {
                      var item = selectedHeaderCollection_6[_y];
                      var subTotal = rowheads[rln].hasChild && rowheads[rln].isDrilled && (!isNullOrUndefined(rowheads[rln].showSubTotals) && !rowheads[rln].showSubTotals || !this.dataSourceSettings.showSubTotals || !this.dataSourceSettings.showRowSubTotals);
                      for (var clt = activeColumn.length, cln = 0; cln < clt; cln++) {
                        var currentSet = data[rln][cln];
                        if (activeColumn[cln] !== void 0 && activeColumn[cln].valueSort[item.valueSort.levelName] && currentSet.axis === "value" && currentSet.actualText === name_3) {
                          if (activeColumn[cln].type !== "grand sum") {
                            if (!isNullOrUndefined(currentSet.value)) {
                              cVal += currentSet.value;
                            }
                            currentSet.formattedText = subTotal ? "" : this.getFormattedValue(cVal, name_3).formattedText;
                            if (!this.aggregatedValueMatrix[rln]) {
                              this.aggregatedValueMatrix[rln] = [];
                            }
                            this.aggregatedValueMatrix[rln][cln] = cVal;
                          }
                          if (pivotIndex[rln + "," + cln]) {
                            delete pivotIndex[rln + "," + cln];
                          }
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
            break;
        }
      }
    };
    PivotEngine2.prototype.getSelectedColumn = function(name, colheads) {
      var set = {
        axis: "column",
        index: [],
        indexObject: {}
      };
      for (var _i = 0, colheads_1 = colheads; _i < colheads_1.length; _i++) {
        var head = colheads_1[_i];
        if (head && head.valueSort && head.valueSort.levelName.indexOf(name) === 0) {
          set.index = set.index.concat(head.index).sort(function(a, b) {
            return a - b;
          });
          set.indexObject = __assign({}, set.indexObject, head.indexObject);
        }
      }
      return set;
    };
    PivotEngine2.prototype.getSelectedRow = function(name, rowheads) {
      for (var _i = 0, rowheads_1 = rowheads; _i < rowheads_1.length; _i++) {
        var head = rowheads_1[_i];
        if (head) {
          if (head.valueSort && head.valueSort.levelName === name) {
            return head;
          } else if (name === "" && head.type === "grand sum") {
            return head;
          }
        }
      }
      return null;
    };
    PivotEngine2.prototype.recursiveRowData = function(rows, reformAxis, columns, tnum, data, vlt, isLeastNode, rln, vln, level, rTotal, cTotal) {
      if (!isLeastNode) {
        this.getTableData(reformAxis[tnum].members, reformAxis, columns, tnum, data, vlt, level + 1, rTotal, cTotal);
      }
      if (this.showSubTotalsAtBottom && (!isNullOrUndefined(rows[rln].showSubTotals) ? rows[rln].showSubTotals : true)) {
        this.insertRowSubTotals(reformAxis, columns, tnum, data, vlt, level, rTotal, cTotal);
      }
      if (!this.isPagingOrVirtualizationEnabled) {
        reformAxis[tnum].members = [];
      }
    };
    PivotEngine2.prototype.updateRowData = function(rows, columns, tnum, data, vln, rln, cln, dln, actCnt, rTotal, cTotal) {
      var mPos = this.fieldList[this.dataSourceSettings.values[vln].name].index;
      var aggregate = this.fieldList[this.dataSourceSettings.values[vln].name].aggregateType;
      var field = this.dataSourceSettings.values[vln].name;
      var gTotalIndex = [];
      var totalValues = {};
      var value = 0;
      var actualValue = 0;
      switch (aggregate) {
        case "Index":
          {
            gTotalIndex = [[rows[rln], columns[cln]], [rows[rln], cTotal], [rTotal, columns[cln]], [rTotal, cTotal]];
            var valueContent = ["cVal", "rTotalVal", "cTotalVal", "gTotalVal"];
            var i = 0;
            for (var _i = 0, gTotalIndex_1 = gTotalIndex; _i < gTotalIndex_1.length; _i++) {
              var rIndex = gTotalIndex_1[_i];
              totalValues[valueContent[i]] = this.getAggregateValue(rIndex[0].index, rIndex[1].indexObject, mPos, aggregate, i === 0 ? false : true);
              i++;
            }
            var val = totalValues.cVal * totalValues.gTotalVal / (totalValues.rTotalVal * totalValues.cTotalVal);
            value = rows[rln].members.length > 0 && rows[rln].hasChild && rows[rln].isDrilled && (!isNullOrUndefined(rows[rln].showSubTotals) && !rows[rln].showSubTotals || !this.dataSourceSettings.showRowSubTotals || !this.dataSourceSettings.showSubTotals) ? void 0 : isNullOrUndefined(totalValues.cVal) ? totalValues.cVal : isNaN(val) ? 0 : val;
            actualValue = isNullOrUndefined(totalValues.cVal) ? totalValues.cVal : isNaN(val) ? 0 : val;
          }
          break;
        case "PercentageOfGrandTotal":
        case "PercentageOfColumnTotal":
        case "PercentageOfRowTotal":
          {
            gTotalIndex = [[rows[rln], columns[cln]]];
            gTotalIndex.push(aggregate === "PercentageOfGrandTotal" ? [rTotal, cTotal] : aggregate === "PercentageOfColumnTotal" ? [rTotal, columns[cln]] : [rows[rln], cTotal]);
            var valueContent = ["cVal", "gTotalVal"];
            var i = 0;
            for (var _a = 0, gTotalIndex_2 = gTotalIndex; _a < gTotalIndex_2.length; _a++) {
              var rIndex = gTotalIndex_2[_a];
              totalValues[valueContent[i]] = this.getAggregateValue(rIndex[0].index, rIndex[1].indexObject, mPos, aggregate, i === 0 ? false : true);
              i++;
            }
            var val = totalValues.cVal / totalValues.gTotalVal;
            value = rows[rln].members.length > 0 && rows[rln].hasChild && rows[rln].isDrilled && (!isNullOrUndefined(rows[rln].showSubTotals) && !rows[rln].showSubTotals || !this.dataSourceSettings.showSubTotals || !this.dataSourceSettings.showRowSubTotals) ? void 0 : isNullOrUndefined(totalValues.cVal) ? totalValues.cVal : isNaN(val) ? 0 : val;
            actualValue = isNullOrUndefined(totalValues.cVal) ? totalValues.cVal : isNaN(val) ? 0 : val;
          }
          break;
        default:
          {
            var val = this.getAggregateValue(rows[rln].index, columns[cln].indexObject, mPos, aggregate, false);
            value = rows[rln].members.length > 0 && rows[rln].hasChild && rows[rln].isDrilled && (!isNullOrUndefined(rows[rln].showSubTotals) && !rows[rln].showSubTotals || !this.dataSourceSettings.showSubTotals || !this.dataSourceSettings.showRowSubTotals) ? void 0 : val;
            actualValue = val;
          }
          break;
      }
      var cellDetails = {
        fieldName: this.dataSourceSettings.values[vln].name,
        row: rows[rln],
        column: columns[cln],
        value,
        cellSets: this.getValueCellInfo ? this.getCellSet(this.rawIndexObject) : [],
        rowCellType: rows[rln].hasChild && rows[rln].isDrilled ? "subTotal" : rows[rln].type === "grand sum" ? "grandTotal" : "value",
        columnCellType: columns[cln].hasChild && columns[cln].isDrilled ? "subTotal" : columns[cln].type === "grand sum" ? "grandTotal" : "value",
        aggregateType: aggregate,
        skipFormatting: false
      };
      if (this.getValueCellInfo) {
        this.getValueCellInfo(cellDetails);
      }
      value = cellDetails.value;
      var isSum = rows[rln].hasChild || columns[cln].hasChild || rows[rln].type === "grand sum" || columns[cln].type === "grand sum" || this.showSubTotalsAtBottom && rows[rln].isSum;
      var isGrand = rows[rln].type === "grand sum" || columns[cln].type === "grand sum";
      var subTotal = rows[rln].members.length > 0 && rows[rln].hasChild && rows[rln].isDrilled && (!isNullOrUndefined(rows[rln].showSubTotals) && !rows[rln].showSubTotals || !this.dataSourceSettings.showSubTotals || !this.dataSourceSettings.showRowSubTotals);
      var formattedText = subTotal ? "" : value === void 0 ? this.emptyCellTextContent : aggregate === "Count" || aggregate === "DistinctCount" ? value.toLocaleString() : this.getFormattedValue(value, field).formattedText;
      if (!isNaN(value) && !isNullOrUndefined(value) && ["PercentageOfGrandTotal", "PercentageOfColumnTotal", "PercentageOfRowTotal"].indexOf(aggregate) >= 0) {
        formattedText = this.globalize.formatNumber(value, {
          format: "P",
          maximumFractionDigits: this.getPercentFormat(this.formatFields, cellDetails.fieldName)
        });
      } else if (!subTotal && isNaN(value) && !isNullOrUndefined(value) && ["PopulationStDev", "SampleStDev", "PopulationVar", "SampleVar"].indexOf(aggregate) !== -1) {
        formattedText = "#DIV/0!";
        value = 0;
      }
      formattedText = cellDetails.skipFormatting ? isNullOrUndefined(value) ? this.emptyCellTextContent : value.toString() : formattedText;
      data[tnum][dln] = this.valueContent[actCnt][dln] = {
        axis: "value",
        actualText: field,
        indexObject: this.isDrillThrough ? this.rawIndexObject : {},
        rowHeaders: rows[rln].type === "grand sum" ? "" : rows[rln].valueSort.levelName,
        columnHeaders: columns[cln].type === "grand sum" ? "" : columns[cln].valueSort.levelName,
        formattedText,
        value,
        hierarchyName: columns[cln].hierarchyName,
        actualValue,
        rowIndex: tnum,
        colIndex: dln,
        isSum,
        isGrandSum: isGrand,
        showSubTotals: !subTotal
      };
      this.rawIndexObject = {};
    };
    PivotEngine2.prototype.getCellSet = function(rawIndexObject) {
      var currentCellSets = [];
      var keys = Object.keys(rawIndexObject);
      for (var _i = 0, keys_3 = keys; _i < keys_3.length; _i++) {
        var index = keys_3[_i];
        if (this.data[parseInt(index, 10)]) {
          currentCellSets.push(this.data[parseInt(index, 10)]);
        }
      }
      return currentCellSets;
    };
    PivotEngine2.prototype.updateValueMembers = function(hasMeasureIndex, headerInfo, levelInfo, columnHeaders, axis, vcnt, levelIndex) {
      var levelName = levelInfo && !isNullOrUndefined(levelInfo.levelName) ? levelInfo.levelName.toString() : void 0;
      var uniqueName = levelInfo && !isNullOrUndefined(levelInfo.uniqueName) ? levelInfo.uniqueName.toString() : void 0;
      if (hasMeasureIndex) {
        for (var vln = 0; vln < vcnt; vln++) {
          var field = this.dataSourceSettings.values[vln];
          var name_4 = field.caption ? field.caption : field.name;
          var calObj = {
            axis: this.valueAxis ? "row" : "column",
            rowIndex: !this.valueAxis ? headerInfo && levelIndex <= headerInfo.rowIndex ? headerInfo.rowIndex + 1 : levelIndex : 0,
            actualText: field.name,
            formattedText: name_4,
            level: 0,
            valueSort: {},
            // colIndex: (tnum) + 1 + vln,
            // rowIndex: this.measureIndex,
            members: [],
            type: this.valueAxis ? "value" : headerInfo ? headerInfo.type : null,
            index: !this.valueAxis && headerInfo ? headerInfo.index : null,
            indexObject: !this.valueAxis && headerInfo ? headerInfo.indexObject : null
          };
          if (axis.length > 0) {
            calObj.showSubTotals = field.showSubTotals;
          }
          var vData = calObj.valueSort;
          vData.axis = !this.valueAxis ? field.name : void 0;
          vData[(levelName ? levelName + this.valueSortSettings.headerDelimiter : "") + name_4] = 1;
          vData[(uniqueName ? uniqueName + this.valueSortSettings.headerDelimiter : "") + field.name] = 1;
          vData.levelName = (levelName ? levelName + this.valueSortSettings.headerDelimiter : "") + name_4;
          vData.uniqueName = (uniqueName ? uniqueName + this.valueSortSettings.headerDelimiter : "") + field.name;
          columnHeaders.push(calObj);
          this.updateValueMembers(false, headerInfo, vData, calObj.members, axis, vcnt, levelIndex + 1);
        }
      } else {
        for (var rln = 0, rlt = axis.length; rln < rlt; rln++) {
          var header = PivotUtil.frameHeaderWithKeys(axis[rln]);
          header.members = [];
          header.rowIndex = !this.valueAxis ? levelIndex < 0 ? 0 : levelIndex : header.rowIndex;
          var hData = {};
          hData.axis = header.valueSort.axis;
          hData[(levelName ? levelName + this.valueSortSettings.headerDelimiter : "") + header.formattedText] = 1;
          hData[(uniqueName ? uniqueName + this.valueSortSettings.headerDelimiter : "") + header.actualText] = 1;
          hData.levelName = (levelName ? levelName + this.valueSortSettings.headerDelimiter : "") + header.formattedText;
          hData.uniqueName = (uniqueName ? uniqueName + this.valueSortSettings.headerDelimiter : "") + header.actualText;
          header.hierarchyName = header.valueSort.uniqueName;
          header.valueSort = hData;
          var drillInfo = hData.axis + this.valueSortSettings.headerDelimiter + hData.levelName;
          var isFieldValueHeader = this.fieldList[hData.axis];
          if (header.isDrilled && ((this.isExpandAll || isFieldValueHeader.expandAll) && this.fieldDrillCollection[drillInfo] || !this.isExpandAll && !isFieldValueHeader.expandAll && !this.fieldDrillCollection[drillInfo])) {
            header.isDrilled = false;
          }
          columnHeaders.push(header);
          if (header.isDrilled && axis[rln].members.length > 0) {
            if (this.valueAxis && levelIndex < this.measureIndex && this.measureIndex !== levelIndex + 1 && !(axis[rln].hasChild && (!isNullOrUndefined(axis[rln].showSubTotals) && !axis[rln].showSubTotals || !this.dataSourceSettings.showSubTotals || !this.dataSourceSettings.showRowSubTotals))) {
              this.updateValueMembers(true, header, hData, columnHeaders[columnHeaders.length - 1].members, [], vcnt, levelIndex);
            }
            this.updateValueMembers(this.measureIndex === levelIndex + 1, header, hData, columnHeaders[columnHeaders.length - 1].members, axis[rln].members, vcnt, levelIndex + 1);
            if (!this.valueAxis && levelIndex < this.measureIndex && this.measureIndex !== levelIndex + 1 && !(axis[rln].hasChild && (!isNullOrUndefined(axis[rln].showSubTotals) && !axis[rln].showSubTotals || !this.dataSourceSettings.showSubTotals || !this.dataSourceSettings.showColumnSubTotals))) {
              this.updateValueMembers(true, header, hData, columnHeaders[columnHeaders.length - 1].members, [], vcnt, levelIndex);
            }
          } else if (levelIndex < this.measureIndex) {
            this.updateValueMembers(true, header, hData, columnHeaders[columnHeaders.length - 1].members, [], vcnt, levelIndex);
          }
        }
      }
    };
    PivotEngine2.prototype.reArrangeValueMember = function(member) {
      var valueAxis = [];
      for (var _i = 0, member_1 = member; _i < member_1.length; _i++) {
        var axis = member_1[_i];
        if (this.valueAxisFields[axis.actualText]) {
          valueAxis[valueAxis.length] = axis;
        }
      }
      return valueAxis.concat(member).slice(0, member.length);
    };
    PivotEngine2.prototype.frameDefinedHeaderData = function(axis, reformAxis, data, levelIndex, tnum, vcnt) {
      for (var rln = 0, rlt = axis.length; rln < rlt; rln++) {
        var showSubTotals2 = true;
        if (axis[rln].members.length > 0 && (!isNullOrUndefined(axis[rln].showSubTotals) && !axis[rln].showSubTotals || !this.dataSourceSettings.showSubTotals || !this.dataSourceSettings.showColumnSubTotals)) {
          showSubTotals2 = false;
        }
        var index = this.measureIndex < levelIndex && showSubTotals2 ? 1 : this.measureIndex > levelIndex && axis[rln].members.length > 0 || !(this.measureIndex === levelIndex + 1 && axis[rln].isDrilled) ? this.measureIndex === levelIndex && this.measureIndex !== 0 && showSubTotals2 ? 1 : this.measureIndex > levelIndex && showSubTotals2 && axis[rln].valueSort && axis[rln].valueSort.axis && this.measureNames[axis[rln].valueSort.axis.toString()] ? 1 : 0 : this.measureIndex === 0 || !showSubTotals2 ? 0 : 1;
        if (axis[rln].members.length) {
          var pos = void 0;
          var members = axis[rln].members;
          if (this.showSubTotalsAtTop) {
            if (levelIndex + 1 < this.measureIndex && showSubTotals2) {
              pos = tnum;
              members = this.reArrangeValueMember(members);
            } else {
              pos = tnum + index;
            }
          } else {
            pos = tnum;
          }
          this.frameDefinedHeaderData(members, reformAxis, data, levelIndex + 1, pos, vcnt);
        }
        var level = this.measureIndex > levelIndex && axis[rln].valueSort && axis[rln].valueSort.axis && this.measureNames[axis[rln].valueSort.axis.toString()] ? this.measureIndex : levelIndex;
        tnum = this.showSubTotalsAtTop ? tnum + 1 : reformAxis.length + index;
        if (!reformAxis[tnum - 1]) {
          reformAxis[tnum - 1] = PivotUtil.frameHeaderWithKeys(axis[rln]);
        }
        axis[rln].colIndex = tnum;
        if (!data[level]) {
          data[level] = [];
          this.headerContent[level] = {};
          data[level][tnum] = this.headerContent[level][tnum] = PivotUtil.frameHeaderWithKeys(axis[rln]);
        } else {
          data[level][tnum] = this.headerContent[level][tnum] = PivotUtil.frameHeaderWithKeys(axis[rln]);
        }
        if (!this.isPagingOrVirtualizationEnabled && (this.showSubTotalsAtTop ? index !== 0 : true)) {
          if (reformAxis[tnum - 1]) {
            reformAxis[tnum - 1].members = [];
          }
        }
        if (this.showSubTotalsAtTop) {
          tnum = reformAxis.length;
          if (rln + 1 === rlt && axis[rln].level === 0) {
            this.reformAxisCount = reformAxis.length + 1;
          }
        }
      }
    };
    PivotEngine2.prototype.getHeaderData = function(rows, columns, values, rowAxis, axis, reformAxis, data, tnum, vcnt) {
      if (!this.valueAxis && !this.isLastHeaderHasMeasures) {
        var columnHeaders = [];
        if (this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showColumnGrandTotals && axis[axis.length - 1].type === "grand sum") {
          this.updateValueMembers(this.measureIndex === 0 && axis.length > 1, null, null, columnHeaders, axis.slice(0, axis.length - 1), vcnt, 0);
          this.updateValueMembers(false, null, null, columnHeaders, axis.slice(axis.length - 1, axis.length), vcnt, -1);
        } else if (this.dataSourceSettings.grandTotalsPosition === "Top" && this.dataSourceSettings.showGrandTotals && this.measureIndex === 0) {
          this.updateValueMembers(false, null, null, columnHeaders, axis.slice(0, 1), vcnt, -1);
          this.updateValueMembers(this.measureIndex === 0 && axis.length > 1, null, null, columnHeaders, axis.slice(1, axis.length), vcnt, 0);
        } else {
          var hasColumnTotal = columns.length === 0 && axis.length === 1 && axis[0].type === "grand sum";
          this.updateValueMembers(!hasColumnTotal && this.measureIndex === 0, null, null, columnHeaders, axis, vcnt, hasColumnTotal ? -1 : 0);
        }
        this.getAggregatedHeaders(rows, columns, this.rMembers, columnHeaders, values);
        if (this.selectedHeaders.values.length > 0) {
          for (var clt = this.selectedHeaders.selectedHeader.length, i = 0; i < clt; i++) {
            var headerData = this.selectedHeaders.selectedHeader[i];
            if (headerData.axis === "column") {
              if (headerData.uniqueName === headerData.value) {
                this.selectedHeaders.selectedHeader.splice(i, 1);
                i--;
                clt--;
              } else if (headerData.uniqueName === "Grand Total") {
                for (var clt_1 = headerData.aggregateHeaders.length, j = 0; j < clt_1; j++) {
                  if (headerData.aggregateHeaders[j] && headerData.aggregateHeaders[j].members.length > 0) {
                    for (var _i = 0, _a = headerData.aggregateHeaders[j].members; _i < _a.length; _i++) {
                      var member = _a[_i];
                      if (member.actualText === headerData.value) {
                        headerData.aggregateHeaders[j] = member;
                        if (member.type === "grand sum") {
                          headerData.uniqueName = member.valueSort.levelName;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        this.frameDefinedHeaderData(columnHeaders, reformAxis, data, 0, this.showSubTotalsAtTop ? 0 : 1, vcnt);
        return;
      } else if (rowAxis.length === 0 && this.valueAxis && (this.isMultiMeasures || this.dataSourceSettings.alwaysShowValueHeader) && this.dataSourceSettings.values.length > 0) {
        if (this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showRowGrandTotals && this.rMembers[this.rMembers.length - 1].type === "grand sum") {
          this.updateValueMembers(this.measureIndex === 0 && this.rMembers.length > 1, null, null, rowAxis, this.rMembers.slice(0, this.rMembers.length - 1), this.dataSourceSettings.values.length, 0);
          this.updateValueMembers(false, null, null, rowAxis, this.rMembers.slice(this.rMembers.length - 1, this.rMembers.length), this.dataSourceSettings.values.length, -1);
        } else if (this.dataSourceSettings.grandTotalsPosition === "Top" && this.dataSourceSettings.showGrandTotals && this.measureIndex === 0) {
          this.updateValueMembers(false, null, null, rowAxis, this.rMembers.slice(0, 1), this.dataSourceSettings.values.length, -1);
          this.updateValueMembers(this.measureIndex === 0 && this.rMembers.length > 1, null, null, rowAxis, this.rMembers.slice(1, this.rMembers.length), this.dataSourceSettings.values.length, 0);
        } else {
          var hasRowTotal = rows.length === 0 && this.rMembers.length === 1 && this.rMembers[0].type === "grand sum";
          this.updateValueMembers(!hasRowTotal && this.measureIndex === 0, null, null, rowAxis, this.rMembers, this.dataSourceSettings.values.length, hasRowTotal ? -1 : 0);
        }
        this.getAggregatedHeaders(rows, columns, rowAxis, axis, values);
        if (this.selectedHeaders.values.length > 0) {
          for (var clt = this.selectedHeaders.selectedHeader.length, i = 0; i < clt; i++) {
            var headerData = this.selectedHeaders.selectedHeader[i];
            if (headerData.axis === "row") {
              for (var clt_2 = headerData.aggregateHeaders.length, j = 0; j < clt_2; j++) {
                if (headerData.aggregateHeaders[j].actualText === headerData.value) {
                  if (headerData.aggregateHeaders[j].valueSort.levelName.indexOf(headerData.uniqueName) !== -1) {
                    headerData.uniqueName = headerData.aggregateHeaders[j].valueSort.levelName;
                    headerData.aggregateHeaders.splice(j, 1);
                    j--;
                    clt_2--;
                  } else {
                    for (var count = headerData.aggregateHeaders[j].members.length, k = 0; k < count; k++) {
                      var member = headerData.aggregateHeaders[j].members[k];
                      if (member.type !== "value" && member.level === headerData.aggregateHeaders[j].level) {
                        var members = extend([], headerData.aggregateHeaders[j].members, null, true);
                        headerData.aggregateHeaders = [].concat(headerData.aggregateHeaders, members, headerData.aggregateHeaders.splice(j));
                        headerData.aggregateHeaders.splice(members.length + j, 1);
                        j = members.length + j - 1;
                        clt_2 = headerData.aggregateHeaders.length;
                      }
                    }
                  }
                } else if (headerData.aggregateHeaders[j].actualText !== headerData.value && headerData.aggregateHeaders[j].members.length > 0) {
                  for (var count = headerData.aggregateHeaders[j].members.length, k = 0; k < count; k++) {
                    var member = headerData.aggregateHeaders[j].members[k];
                    if (member.actualText === headerData.value) {
                      if (headerData.uniqueName === headerData.aggregateHeaders[j].valueSort.levelName) {
                        headerData.uniqueName = member.valueSort.levelName;
                      }
                      headerData.aggregateHeaders[j].members.splice(k, 1);
                      headerData.aggregateHeaders[j] = member;
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
      var rlt = axis.length;
      var colItmLn = this.dataSourceSettings.columns.length;
      var sortText = this.valueSortSettings.headerText;
      for (var rln = 0; rln < rlt; rln++) {
        var isHidden = !isNullOrUndefined(axis[rln].showSubTotals) && !axis[rln].showSubTotals;
        if (axis[rln].members.length) {
          this.getHeaderData(rows, columns, values, rowAxis, axis[rln].members, reformAxis, data, this.showSubTotalsAtTop && !isHidden ? tnum + 1 : tnum, vcnt);
        }
        var isTotalHide = true;
        tnum = this.showSubTotalsAtTop ? tnum : reformAxis.length;
        if (isHidden || !this.dataSourceSettings.showSubTotals || !this.dataSourceSettings.showColumnSubTotals) {
          if (!(axis[rln].members.length > 0)) {
            reformAxis[this.showSubTotalsAtTop ? tnum : reformAxis.length] = PivotUtil.frameHeaderWithKeys(axis[rln]);
          } else {
            this.removeCount++;
            isTotalHide = false;
          }
          tnum = this.showSubTotalsAtTop ? tnum : reformAxis.length - 1;
        } else {
          reformAxis[tnum] = PivotUtil.frameHeaderWithKeys(axis[rln]);
        }
        var lvl = axis[rln].level;
        axis[rln].rowIndex = lvl;
        var index = tnum * vcnt + (this.showSubTotalsAtTop ? 1 : vcnt);
        axis[rln].colIndex = index;
        if (!data[lvl]) {
          data[lvl] = [];
          this.headerContent[lvl] = {};
        }
        data[lvl][index] = this.headerContent[lvl][index] = PivotUtil.getFormattedHeader(axis[rln], this);
        var isSingleMeasure = this.dataSourceSettings.columns.length === 0 && this.dataSourceSettings.values.length === 1 ? true : false;
        if ((this.isMultiMeasures || this.dataSourceSettings.alwaysShowValueHeader || isSingleMeasure) && !this.valueAxis && isTotalHide) {
          for (var vln = 0; vln < vcnt; vln++) {
            var name_5 = this.dataSourceSettings.values[vln].caption ? this.dataSourceSettings.values[vln].caption : this.dataSourceSettings.values[vln].name;
            var calObj = {
              axis: "column",
              actualText: this.dataSourceSettings.values[vln].name,
              formattedText: name_5,
              level: 0,
              valueSort: {},
              colIndex: tnum * vcnt + 1 + vln,
              rowIndex: colItmLn
            };
            if (!data[colItmLn]) {
              data[colItmLn] = [];
              this.headerContent[colItmLn] = {};
              data[colItmLn][tnum * vcnt + 1 + vln] = this.headerContent[colItmLn][tnum * vcnt + 1 + vln] = calObj;
            } else {
              data[colItmLn][tnum * vcnt + 1 + vln] = this.headerContent[colItmLn][tnum * vcnt + 1 + vln] = calObj;
            }
            var vData = data[colItmLn][tnum * vcnt + 1 + vln].valueSort;
            vData[axis[rln].valueSort.levelName + this.valueSortSettings.headerDelimiter + name_5] = 1;
            vData.levelName = axis[rln].valueSort.levelName + this.valueSortSettings.headerDelimiter + name_5;
            vData[axis[rln].valueSort.uniqueName + this.valueSortSettings.headerDelimiter + this.dataSourceSettings.values[vln].name] = 1;
            vData.uniqueName = axis[rln].valueSort.uniqueName + this.valueSortSettings.headerDelimiter + this.dataSourceSettings.values[vln].name;
            if (vData && vData[sortText]) {
              this.valueSortSettings.columnIndex = tnum * vcnt + 1 + vln;
            }
          }
        } else if (axis[rln].valueSort && axis[rln].valueSort[sortText]) {
          this.valueSortSettings.columnIndex = tnum * vcnt + 1;
        }
        if (!this.isPagingOrVirtualizationEnabled) {
          reformAxis[tnum].members = [];
        }
        if (this.showSubTotalsAtTop) {
          tnum = reformAxis.length;
          if (axis[rln].level === 0 && rln + 1 === rlt) {
            this.reformAxisCount = reformAxis.length * vcnt + 1;
          }
        }
      }
    };
    PivotEngine2.prototype.getAggregateValue = function(rowIndex, columnIndex, value, type, isGrandTotal) {
      var ri = 0;
      var cellValue = 0;
      var avgCnt = 0;
      var isInit = true;
      var isValueExist = false;
      switch (type.toLowerCase()) {
        case "median":
          {
            var values = [];
            var position = 0;
            while (rowIndex[ri] !== void 0) {
              var index = rowIndex[ri];
              if (columnIndex[index] !== void 0) {
                isValueExist = true;
                this.rawIndexObject[index] = index;
                if (!isNullOrUndefined(this.valueMatrix[index][value].member)) {
                  values.push(this.valueMatrix[index][value].member);
                }
              }
              ri++;
            }
            var len = values.length;
            if (len > 0) {
              values.sort(function(a, b) {
                return a - b;
              });
              if (len % 2 === 0) {
                position = len / 2 <= 1 ? 0 : len / 2 - 1;
                cellValue = (values[position] + values[position + 1]) / 2;
              } else {
                position = (len + 1) / 2 <= 1 ? 0 : (len + 1) / 2 - 1;
                cellValue = values[position];
              }
            }
          }
          break;
        case "count":
          {
            while (rowIndex[ri] !== void 0) {
              var index = rowIndex[ri];
              if (columnIndex[index] !== void 0) {
                isValueExist = true;
                this.rawIndexObject[index] = index;
                cellValue += isNullOrUndefined(this.valueMatrix[index][value].member) ? 0 : this.allowDataCompression ? this.valueMatrix[index][value].member : 1;
              }
              ri++;
            }
          }
          break;
        case "distinctcount":
          {
            var duplicateValues = [];
            while (rowIndex[ri] !== void 0) {
              if (columnIndex[rowIndex[ri]] !== void 0) {
                this.rawIndexObject[rowIndex[ri]] = rowIndex[ri];
                isValueExist = true;
                var val = this.data[rowIndex[ri]][this.fieldKeys[this.fields[value]]];
                if (!isNullOrUndefined(val)) {
                  var currentVal = val.toString();
                  if (duplicateValues.length === 0 || duplicateValues.length > 0 && duplicateValues.indexOf(currentVal) === -1) {
                    cellValue += this.allowDataCompression && typeof val === "number" ? val : 1;
                    duplicateValues.push(currentVal);
                  }
                }
              }
              ri++;
            }
          }
          break;
        case "product":
          {
            while (rowIndex[ri] !== void 0) {
              var index = rowIndex[ri];
              if (columnIndex[index] !== void 0) {
                this.rawIndexObject[index] = index;
                isValueExist = true;
                var currentVal = this.valueMatrix[index][value].member;
                if (!isNullOrUndefined(currentVal)) {
                  cellValue = isInit || isNullOrUndefined(cellValue) ? 1 : cellValue;
                  cellValue *= currentVal;
                } else if (isInit) {
                  cellValue = currentVal;
                }
                isInit = false;
              }
              ri++;
            }
          }
          break;
        case "populationstdev":
        case "samplestdev":
        case "populationvar":
        case "samplevar":
          {
            var i = 0;
            var val = 0;
            var indexVal = [];
            var avgVal = 0;
            var cVal = 0;
            var avgDifferenceVal = 0;
            while (rowIndex[ri] !== void 0) {
              var index = rowIndex[ri];
              if (columnIndex[index] !== void 0) {
                isValueExist = true;
                this.rawIndexObject[index] = index;
                var currentVal = this.valueMatrix[index][value].member;
                if (!isNullOrUndefined(currentVal)) {
                  val += currentVal;
                  indexVal.push(currentVal);
                  i++;
                }
              }
              ri++;
            }
            if (i > 0) {
              avgVal = val / i;
              for (var _i = 0, indexVal_1 = indexVal; _i < indexVal_1.length; _i++) {
                var index = indexVal_1[_i];
                avgDifferenceVal += Math.pow(index - avgVal, 2);
              }
              if (["populationstdev", "samplestdev"].indexOf(type.toLowerCase()) !== -1) {
                cVal = Math.sqrt(avgDifferenceVal / (type.toLowerCase() === "populationstdev" ? i : i - 1));
              } else {
                cVal = avgDifferenceVal / (type.toLowerCase() === "populationvar" ? i : i - 1);
              }
              cellValue = cVal === 0 ? NaN : cVal;
            } else {
              cellValue = val;
            }
          }
          break;
        case "min":
          {
            var isFirst = true;
            cellValue = void 0;
            while (rowIndex[ri] !== void 0) {
              var index = rowIndex[ri];
              if (columnIndex[index] !== void 0 && this.valueMatrix[index][value].member !== void 0) {
                isValueExist = true;
                this.rawIndexObject[index] = index;
                if (isNullOrUndefined(cellValue) && isNullOrUndefined(this.valueMatrix[index][value].member)) {
                  cellValue = this.valueMatrix[index][value].member;
                } else {
                  if (isFirst) {
                    cellValue = this.valueMatrix[index][value].member;
                    isFirst = false;
                  } else {
                    cellValue = this.valueMatrix[index][value].member < cellValue ? this.valueMatrix[index][value].member : cellValue;
                  }
                }
              }
              ri++;
            }
          }
          break;
        case "max":
          {
            var isMaxFirst = true;
            while (rowIndex[ri] !== void 0) {
              var index = rowIndex[ri];
              if (columnIndex[index] !== void 0 && this.valueMatrix[index][value].member !== void 0) {
                isValueExist = true;
                this.rawIndexObject[index] = index;
                if (isMaxFirst) {
                  cellValue = this.valueMatrix[index][value].member;
                  isMaxFirst = false;
                } else {
                  cellValue = this.valueMatrix[index][value].member > cellValue ? this.valueMatrix[index][value].member : cellValue;
                }
              }
              ri++;
            }
          }
          break;
        case "calculatedfield":
          {
            isValueExist = true;
            var calcField = this.calculatedFields[this.fields[value]];
            var actualFormula = calcField.formula;
            var aggregateField2 = {};
            if (this.calculatedFormulas[calcField.name]) {
              var calculatedFormulas = this.calculatedFormulas[calcField.name];
              for (var len = 0, lmt = calculatedFormulas.length; len < lmt; len++) {
                var aggregatedValue = calculatedFormulas[len];
                var value_1 = aggregateField2[aggregatedValue.formula];
                if (value_1 === void 0) {
                  var type_1 = aggregatedValue.type;
                  value_1 = this.getAggregateValue(rowIndex, columnIndex, aggregatedValue.index, type_1, false);
                  aggregateField2[aggregatedValue.formula] = value_1;
                }
                actualFormula = actualFormula.replace(aggregatedValue.formula, String(value_1));
              }
            }
            cellValue = this.evaluate(actualFormula);
            cellValue = cellValue === Infinity || cellValue === -Infinity ? Infinity : cellValue === void 0 || isNaN(cellValue) ? void 0 : JSON.parse(String(cellValue));
          }
          break;
        default:
          {
            cellValue = void 0;
            while (rowIndex[ri] !== void 0) {
              var index = rowIndex[ri];
              if (columnIndex[index] !== void 0) {
                isValueExist = true;
                if (!isGrandTotal) {
                  this.rawIndexObject[index] = index;
                }
                var currentVal = this.valueMatrix[index][value].member;
                if (isNullOrUndefined(cellValue) && isNullOrUndefined(currentVal)) {
                  cellValue = currentVal;
                } else {
                  if (isNullOrUndefined(cellValue)) {
                    cellValue = 0;
                  }
                  cellValue += isNullOrUndefined(currentVal) ? 0 : currentVal;
                }
                if (!isNullOrUndefined(currentVal)) {
                  avgCnt++;
                }
              }
              ri++;
            }
          }
          break;
      }
      return type && type.toLowerCase() === "avg" && cellValue !== 0 && !isNullOrUndefined(cellValue) ? cellValue / avgCnt : isValueExist ? cellValue : void 0;
    };
    PivotEngine2.prototype.evaluate = function(obj) {
      return Function('"use strict";return (' + obj + ")")();
    };
    PivotEngine2.prototype.getFormattedValue = function(value, fieldName) {
      var commonValue = value === null ? this.localeObj ? this.localeObj.getConstant("null") : String(value) : value === void 0 ? this.localeObj ? fieldName in this.groupingFields ? this.localeObj.getConstant("groupOutOfRange") : this.localeObj.getConstant("undefined") : String(value) : value;
      var formattedValue = {
        formattedText: commonValue.toString(),
        actualText: commonValue,
        dateText: commonValue
      };
      if (this.formatFields[fieldName] && (this.formatFields[fieldName].format || this.formatFields[fieldName].skeleton) && !isNullOrUndefined(value)) {
        try {
          var formatField = this.formatFields[fieldName].properties ? this.formatFields[fieldName].properties : this.formatFields[fieldName];
          var formatSetting = extend({}, formatField, null, true);
          delete formatSetting.name;
          if (!formatSetting.minimumSignificantDigits && formatSetting.minimumSignificantDigits < 1) {
            delete formatSetting.minimumSignificantDigits;
          }
          if (!formatSetting.maximumSignificantDigits && formatSetting.maximumSignificantDigits < 1) {
            delete formatSetting.maximumSignificantDigits;
          }
          if (formatSetting.type) {
            formattedValue.formattedText = this.dateFormatFunction[fieldName].exactFormat(new Date(value)) === null ? formattedValue.formattedText : this.dateFormatFunction[fieldName].exactFormat(new Date(value));
            formattedValue.actualText = value;
          } else {
            delete formatSetting.type;
            if (formatSetting.format && !this.formatRegex.test(formatSetting.format)) {
              if (isNullOrUndefined(formatSetting.minimumFractionDigits)) {
                delete formatSetting.minimumFractionDigits;
              }
              if (isNullOrUndefined(formatSetting.maximumFractionDigits)) {
                delete formatSetting.maximumFractionDigits;
              }
              if (isNullOrUndefined(formatSetting.minimumIntegerDigits)) {
                delete formatSetting.minimumIntegerDigits;
              }
            }
            formattedValue.formattedText = this.globalize.formatNumber(!isNaN(Number(value)) ? Number(value) : value, formatSetting);
            formattedValue.actualText = !isNaN(Number(value)) ? Number(value) : value;
            formattedValue.dateText = !isNaN(Number(value)) ? Number(value) : value;
          }
          if (this.fieldList[fieldName].sort !== "None" && formatSetting.type && ["date", "dateTime", "time"].indexOf(this.formatFields[fieldName].type) > -1) {
            formattedValue.dateText = this.dateFormatFunction[fieldName].fullFormat(new Date(value));
          }
          if (this.fieldList[fieldName].isCustomField) {
            formattedValue.formattedText = formattedValue.formattedText === "NaN" ? commonValue.toString() : formattedValue.formattedText;
            formattedValue.dateText = formattedValue.dateText === "NaN" ? commonValue.toString() : formattedValue.dateText;
          }
        } catch (exception) {
          if (!this.fieldList[fieldName].isCustomField) {
            throw exception;
          }
        } finally {
          if (this.fieldList[fieldName].isCustomField) {
            formattedValue.formattedText = isNullOrUndefined(formattedValue.formattedText) || formattedValue.formattedText === "NaN" ? commonValue.toString() : formattedValue.formattedText;
            formattedValue.dateText = isNullOrUndefined(formattedValue.dateText) || formattedValue.dateText === "NaN" ? commonValue.toString() : formattedValue.dateText;
          }
        }
      }
      return formattedValue;
    };
    PivotEngine2.prototype.powerFunction = function(formula) {
      if (formula.indexOf("^") > -1) {
        var items_1 = [];
        while (formula.indexOf("(") > -1) {
          formula = formula.replace(/(\([^()]*\))/g, function(text, item) {
            items_1.push(item);
            return "~" + (items_1.length - 1);
          });
        }
        items_1.push(formula);
        formula = "~" + (items_1.length - 1);
        while (formula.indexOf("~") > -1) {
          formula = formula.replace(new RegExp("~(\\d+)", "g"), function(text, index) {
            return items_1[index].replace(/(\w*)\^(\w*)/g, "Math.pow($1,$2)");
          });
        }
      }
      return formula;
    };
    PivotEngine2.prototype.getTabularPivotValues = function(requireDatasourceUpdate, isDrilled, isScrolled) {
      this.tabularPivotValues = [];
      var colIndex;
      this.emptyRowsLength = 0;
      var isGrouping = Object.keys(this.groupingFields).length > 0;
      if (this.dataSourceSettings.valueAxis === "row" && (this.dataSourceSettings.values.length > 1 || this.dataSourceSettings.alwaysShowValueHeader) && !isDrilled && !isScrolled) {
        this.rowMaxLevel = this.rowMaxLevel + 1;
      }
      for (var i = 0; i < this.pivotValues.length; i++) {
        var rowPivotValues = void 0;
        var drillMem = false;
        var isValue = true;
        var levelName = void 0;
        var levelNameParts = void 0;
        var valueAxis = void 0;
        while (isNullOrUndefined(this.pivotValues[i]) && i < this.pivotValues.length) {
          this.tabularPivotValues.length++;
          i++;
        }
        if (i < this.pivotValues.length) {
          rowPivotValues = this.pivotValues[i];
        }
        var firstRow = rowPivotValues[0] ? rowPivotValues[0] : void 0;
        if (firstRow) {
          levelName = firstRow.valueSort.levelName;
          levelNameParts = levelName.split(this.dataSourceSettings.valueSortSettings.headerDelimiter);
          if ((!this.dataSourceSettings.showSubTotals || this.dataSourceSettings.showColumnSubTotals && !this.dataSourceSettings.showRowSubTotals) && firstRow.formattedText !== this.localeObj.getConstant("grandTotal")) {
            if (firstRow.isSum) {
              isValue = false;
            }
          }
          if (isGrouping) {
            var pivotValue = this.pivotValues[i - 1][0];
            var previousValue = this.tabularPivotValues[this.tabularPivotValues.length - 1][this.rowMaxLevel - 1];
            if (!isNullOrUndefined(pivotValue) || !isNullOrUndefined(previousValue)) {
              var pivotValueAxis = pivotValue.valueSort.axis;
              var previousValueAxis = void 0;
              if (!isNullOrUndefined(previousValue) && previousValue.valueSort.axis) {
                previousValueAxis = previousValue.valueSort.axis;
              }
              if (pivotValueAxis.includes("custom_group") || !isNullOrUndefined(previousValueAxis) && previousValueAxis.includes("custom_group")) {
                if (pivotValue.formattedText === levelNameParts[this.rowMaxLevel - 1] && pivotValue.formattedText !== levelNameParts[levelNameParts.length - 1] || previousValue && previousValue.formattedText === levelNameParts[this.rowMaxLevel - 1]) {
                  valueAxis = pivotValue.valueSort.axis ? pivotValue.valueSort.axis : previousValue.valueSort.axis;
                } else {
                  valueAxis = firstRow.valueSort.axis;
                }
              } else {
                valueAxis = firstRow.valueSort.axis;
              }
            }
          }
        }
        if (firstRow && this.dataSourceSettings.valueAxis === "row" && (this.dataSourceSettings.values.length > 1 || this.dataSourceSettings.alwaysShowValueHeader)) {
          if (firstRow.type === "value") {
            if (levelNameParts.length - 1 !== this.rowMaxLevel && levelNameParts[0] !== this.localeObj.getConstant("grandTotal")) {
              for (var w = 0; w < this.dataSourceSettings.values.length; w++) {
                if (firstRow.formattedText === this.dataSourceSettings.values[w].name) {
                  isValue = false;
                  firstRow.hasChild = false;
                  break;
                }
              }
            }
          }
          if (levelNameParts.length - 1 !== this.rowMaxLevel) {
            firstRow.isDrilled = true;
            if (!firstRow.hasChild && !firstRow.type) {
              firstRow.hasChild = true;
            } else if (levelNameParts[0] === this.localeObj.getConstant("grandTotal") && firstRow.type === "grand sum") {
              firstRow.hasChild = true;
            } else {
              firstRow.level = levelNameParts.length - 1;
            }
          } else {
            firstRow.level = levelNameParts.length - 1;
          }
          for (var n = 0; n < this.drilledMembers.length; n++) {
            var drillItems = this.drilledMembers[n].items;
            for (var v = 0; v < drillItems.length; v++) {
              var splitdrillItems = drillItems[v].split(this.drilledMembers[n].delimiter);
              var rowText = firstRow.formattedText.split(" ");
              var rowFormatText = [];
              var formattedRowText = void 0;
              for (var z = 0; z < rowText.length; z++) {
                rowFormatText.push(rowText[z]);
                formattedRowText = rowFormatText.join(" ");
                if (formattedRowText === splitdrillItems[splitdrillItems.length - 1] && splitdrillItems[0] === levelNameParts[0]) {
                  drillMem = true;
                  break;
                }
              }
            }
          }
        }
        if (isValue && levelNameParts && levelNameParts.length > 1 && firstRow.type === "sum") {
          if (levelNameParts[levelNameParts.length - 1] === levelNameParts[levelNameParts.length - 2]) {
            isValue = false;
          }
        }
        if (!isNullOrUndefined(firstRow) && firstRow.axis === "row") {
          if (!isNullOrUndefined(rowPivotValues[1]) && !(firstRow.hasChild && firstRow.isDrilled) && isValue) {
            var levelNameArray = [];
            if (this.dataSourceSettings.valueAxis === "row" && (this.dataSourceSettings.values.length > 1 || this.dataSourceSettings.alwaysShowValueHeader) && (requireDatasourceUpdate && drillMem ? levelNameParts.length - 1 < this.rowMaxLevel : levelNameParts.length <= this.rowMaxLevel) && firstRow.type === "value" && (!this.dataSourceSettings.expandAll ? drillMem : !drillMem) || levelNameParts[0] === this.localeObj.getConstant("grandTotal")) {
              for (var b = levelNameParts.length - 1; b >= 0; b--) {
                if (levelNameParts[b] === levelNameParts[levelNameParts.length - 2]) {
                  levelNameArray[b] = levelNameParts[levelNameParts.length - 2] + " " + levelNameParts[levelNameParts.length - 1];
                  if (b === 0) {
                    break;
                  } else {
                    while (b >= 0) {
                      levelNameArray[b - 1] = levelNameParts[b - 1];
                      b--;
                    }
                    break;
                  }
                } else {
                  levelNameArray[b] = levelNameParts[levelNameParts.length - 2] + " " + levelNameParts[levelNameParts.length - 1];
                }
              }
              levelNameParts = levelNameArray;
            }
            colIndex = firstRow.colIndex;
            var currentRow = [];
            var dLevelName = levelNameParts[0];
            var level = 0;
            for (var k = 0; k < levelNameParts.length - 1 || k < this.rowMaxLevel; k++) {
              var valueIsDrill = void 0;
              var valueHasChild = void 0;
              var duplIsDrilled = firstRow.isDrilled;
              var dupliHasChild = firstRow.hasChild;
              if (this.dataSourceSettings.valueAxis === "row" && (this.dataSourceSettings.values.length > 1 || this.dataSourceSettings.alwaysShowValueHeader)) {
                valueIsDrill = false;
                valueHasChild = false;
                if (levelNameParts[levelNameParts.length - 1] !== levelNameParts[levelNameParts.length - 2]) {
                  var currentRowIndex = levelNameParts.length - 1 === this.rowMaxLevel && this.dataSourceSettings.rows.length === this.rowMaxLevel ? levelNameParts.length - 2 : levelNameParts.length - 1;
                  if (k < currentRowIndex) {
                    valueHasChild = true;
                  }
                  if (k < levelNameParts.length - 2) {
                    valueIsDrill = true;
                  }
                }
              } else {
                if (k < this.rowMaxLevel) {
                  dupliHasChild = true;
                }
                if (levelNameParts.length > 1 || k === 0) {
                  duplIsDrilled = true;
                }
              }
              if (k < levelNameParts.length - 1) {
                if (k > 0) {
                  dLevelName = dLevelName + this.dataSourceSettings.valueSortSettings.headerDelimiter + levelNameParts[k];
                }
                currentRow.push({
                  actualText: levelNameParts[k],
                  axis: firstRow.axis,
                  formattedText: levelNameParts[k],
                  rowIndex: this.tabularPivotValues.length,
                  hasChild: this.dataSourceSettings.valueAxis === "row" && (this.dataSourceSettings.values.length > 1 || this.dataSourceSettings.alwaysShowValueHeader) && firstRow.type !== "grand sum" ? valueHasChild : dupliHasChild,
                  isDrilled: this.dataSourceSettings.valueAxis === "row" && (this.dataSourceSettings.values.length > 1 || this.dataSourceSettings.alwaysShowValueHeader) && firstRow.type !== "grand sum" ? valueIsDrill : duplIsDrilled,
                  level,
                  valueSort: {
                    levelName: dLevelName,
                    axis: isGrouping ? valueAxis ? valueAxis.includes("custom_group") ? valueAxis : this.dataSourceSettings.rows[k].name : firstRow.valueSort.axis : this.dataSourceSettings.rows[k].name
                  },
                  colIndex: colIndex++,
                  colSpan: 1,
                  rowSpan: 1
                });
              }
              if (k >= firstRow.level) {
                var span = k === 0 ? this.rowMaxLevel : this.rowMaxLevel - 1;
                currentRow.push({
                  actualText: this.dataSourceSettings.valueAxis === "row" && (this.dataSourceSettings.values.length > 1 || this.dataSourceSettings.alwaysShowValueHeader) ? levelNameParts[k] === void 0 ? levelNameParts[levelNameParts.length - 1] : levelNameParts[k] : firstRow.formattedText,
                  axis: firstRow.axis,
                  formattedText: this.dataSourceSettings.valueAxis === "row" && (this.dataSourceSettings.values.length > 1 || this.dataSourceSettings.alwaysShowValueHeader) ? levelNameParts[k] === void 0 ? levelNameParts[levelNameParts.length - 1] : levelNameParts[k] : firstRow.formattedText,
                  rowIndex: this.tabularPivotValues.length,
                  hasChild: this.dataSourceSettings.valueAxis === "row" && (this.dataSourceSettings.values.length > 1 || this.dataSourceSettings.alwaysShowValueHeader) && firstRow.type !== "grand sum" ? valueHasChild : firstRow.hasChild,
                  isDrilled: this.dataSourceSettings.valueAxis === "row" && (this.dataSourceSettings.values.length > 1 || this.dataSourceSettings.alwaysShowValueHeader) && firstRow.type !== "grand sum" ? valueIsDrill : firstRow.isDrilled,
                  level,
                  valueSort: {
                    levelName: firstRow.valueSort.levelName,
                    axis: isGrouping ? valueAxis ? valueAxis.includes("custom_group") ? valueAxis : this.dataSourceSettings.rows[k].name : firstRow.valueSort.axis : this.dataSourceSettings.rows[k].name
                  },
                  colIndex: colIndex++,
                  colSpan: span,
                  rowSpan: 1
                });
              }
              level++;
            }
            firstRow.colIndex = colIndex;
            firstRow.rowIndex = this.tabularPivotValues.length;
            firstRow.colSpan = 1;
            firstRow.rowSpan = 1;
            if (this.dataSourceSettings.valueAxis === "row" && (this.dataSourceSettings.values.length > 1 || this.dataSourceSettings.alwaysShowValueHeader)) {
              firstRow.formattedText = levelNameParts[levelNameParts.length - 1];
            }
            currentRow.push(firstRow);
            this.setColumnSpan(currentRow, firstRow);
            var colData = rowPivotValues.slice(1, rowPivotValues.length);
            for (var i_8 = 1; i_8 < rowPivotValues.length; i_8++) {
              var colDataValues = rowPivotValues[i_8];
              colDataValues.colIndex = colIndex + 1;
              colDataValues.rowIndex = this.tabularPivotValues.length;
              colIndex++;
            }
            currentRow = currentRow.concat(colData);
            this.tabularPivotValues.push(currentRow);
          } else {
            this.emptyRowsLength++;
          }
        } else {
          var emptyRow = [];
          var headerColIndex = this.rowMaxLevel + 1;
          for (var j = 0; j < this.rowMaxLevel; j++) {
            emptyRow.push(void 0);
          }
          emptyRow.push(firstRow);
          var colData = rowPivotValues.slice(1, rowPivotValues.length);
          for (var i_9 = 0; i_9 < colData.length; i_9++) {
            colData[i_9].colIndex = headerColIndex;
            colData[i_9].rowIndex = this.tabularPivotValues.length;
            headerColIndex++;
          }
          emptyRow = emptyRow.concat(colData);
          this.tabularPivotValues.push(emptyRow);
        }
      }
      return this.tabularPivotValues;
    };
    PivotEngine2.prototype.setColumnSpan = function(currentRow, firstRow) {
      var spanlength = 1;
      for (var f = currentRow.length - 1; f >= 0; f--) {
        if (f !== 0) {
          if (currentRow[f].formattedText === currentRow[f - 1].formattedText) {
            currentRow[f].colSpan = 0;
            spanlength++;
            currentRow[f - 1].colSpan = spanlength;
          }
        }
        var currentRowindex = this.dataSourceSettings.valueAxis === "row" && (this.dataSourceSettings.values.length > 1 || this.dataSourceSettings.alwaysShowValueHeader) ? currentRow.length - 2 : currentRow.length - 1;
        if (f < currentRowindex && (firstRow.type !== "grand sum" || firstRow.isSum) && currentRow[currentRow.length - 1].formattedText !== currentRow[currentRow.length - 2].formattedText && firstRow.type !== "grand sum") {
          currentRow[f].hasChild = true;
          var drillMem = this.dataSourceSettings.drilledMembers;
          for (var drillItem = 0; drillItem < drillMem.length; drillItem++) {
            for (var item = 0; item < drillMem[drillItem].items.length; item++) {
              if (drillMem[drillItem].items[item] === currentRow[f].formattedText) {
                currentRow[f].isDrilled = currentRow[f].isDrilled ? true : false;
              }
            }
          }
        }
      }
    };
    PivotEngine2.prototype.setRowSpan = function() {
      var emptyHeaderLength = this.headerContent.length;
      for (var m = 0; m < this.rowMaxLevel; m++) {
        var rowSpan = 1;
        if (this.tabularPivotValues.length > this.rowMaxLevel + emptyHeaderLength) {
          for (var j = this.tabularPivotValues.length - 1; j >= emptyHeaderLength - 1; j--) {
            if (j !== emptyHeaderLength - 1) {
              var tabluarValue = this.tabularPivotValues;
              if (isNullOrUndefined(tabluarValue[j - 1])) {
                break;
              }
              if (!isNullOrUndefined(tabluarValue[j - 1][m]) && tabluarValue[j][m].formattedText === tabluarValue[j - 1][m].formattedText) {
                tabluarValue[j][m].rowSpan = 0;
                rowSpan++;
                tabluarValue[j - 1][m].rowSpan = rowSpan;
              } else {
                rowSpan = 1;
              }
            }
          }
        }
      }
    };
    return PivotEngine2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/common/base/constant.js
var load = "load";
var enginePopulating = "enginePopulating";
var enginePopulated = "enginePopulated";
var onFieldDropped = "onFieldDropped";
var fieldDrop = "fieldDrop";
var beforePivotTableRender = "beforePivotTableRender";
var afterPivotTableRender = "afterPivotTableRender";
var beforeExport = "beforeExport";
var exportComplete = "exportComplete";
var excelHeaderQueryCellInfo = "excelHeaderQueryCellInfo";
var pdfHeaderQueryCellInfo = "pdfHeaderQueryCellInfo";
var excelQueryCellInfo = "excelQueryCellInfo";
var pdfQueryCellInfo = "pdfQueryCellInfo";
var onPdfCellRender = "onPdfCellRender";
var dataBound = "dataBound";
var queryCellInfo = "queryCellInfo";
var headerCellInfo = "headerCellInfo";
var hyperlinkCellClick = "hyperlinkCellClick";
var resizing = "resizing";
var resizeStop = "resizeStop";
var cellClick = "cellClick";
var drillThrough = "drillThrough";
var beforeColumnsRender = "beforeColumnsRender";
var selected = "selected";
var selecting = "selecting";
var cellSelecting = "cellSelecting";
var drill = "drill";
var cellSelected = "cellSelected";
var cellDeselected = "cellDeselected";
var rowSelected = "rowSelected";
var rowDeselected = "rowDeselected";
var beginDrillThrough = "beginDrillThrough";
var editCompleted = "editCompleted";
var multiLevelLabelClick = "multiLevelLabelClick";
var saveReport = "saveReport";
var fetchReport = "fetchReport";
var loadReport = "loadReport";
var renameReport = "renameReport";
var removeReport = "removeReport";
var newReport = "newReport";
var toolbarRender = "toolbarRender";
var toolbarClick = "toolbarClick";
var chartTooltipRender = "chartTooltipRender";
var chartLegendClick = "chartLegendClick";
var chartLoaded = "chartLoaded";
var multiLevelLabelRender = "multiLevelLabelRender";
var beforePrint = "beforePrint";
var animationComplete = "animationComplete";
var legendRender = "legendRender";
var textRender = "textRender";
var pointRender = "pointRender";
var seriesRender = "seriesRender";
var chartMouseMove = "chartMouseMove";
var chartMouseClick = "chartMouseClick";
var pointMove = "pointMove";
var chartMouseLeave = "chartMouseLeave";
var chartMouseDown = "chartMouseDown";
var chartMouseUp = "chartMouseUp";
var dragComplete = "dragComplete";
var zoomComplete = "zoomComplete";
var scrollStart = "scrollStart";
var scrollEnd = "scrollEnd";
var scrollChanged = "scrollChanged";
var chartLoad = "chartLoad";
var chartResized = "chartResized";
var chartAxisLabelRender = "chartAxisLabelRender";
var chartSeriesCreated = "chartSeriesCreated";
var aggregateCellInfo = "aggregateCellInfo";
var onHeadersSort = "onHeadersSort";
var contextMenuClick = "contextMenuClick";
var contextMenuOpen = "contextMenuOpen";
var fieldListRefreshed = "fieldListRefreshed";
var conditionalFormatting = "conditionalFormatting";
var beforePdfExport = "beforePdfExport";
var beforeExcelExport = "beforeExcelExport";
var memberFiltering = "memberFiltering";
var calculatedFieldCreate = "calculatedFieldCreate";
var memberEditorOpen = "memberEditorOpen";
var fieldRemove = "fieldRemove";
var numberFormatting = "numberFormatting";
var aggregateMenuOpen = "aggregateMenuOpen";
var fieldDragStart = "fieldDragStart";
var chartPointClick = "chartPointClick";
var beforeServiceInvoke = "beforeServiceInvoke";
var afterServiceInvoke = "afterServiceInvoke";
var actionBegin = "actionBegin";
var actionComplete = "actionComplete";
var actionFailure = "actionFailure";
var initialLoad = "initial-load";
var uiUpdate = "ui-update";
var scroll = "scroll";
var verticalScroll = "vertical-scroll";
var horizontalScroll = "horizontal-scroll";
var contentReady = "content-ready";
var dataReady = "data-ready";
var initSubComponent = "init-groupingbar";
var treeViewUpdate = "tree-view-update";
var pivotButtonUpdate = "pivot-button-update";
var initCalculatedField = "init-calculatedfield";
var click = "click";
var initToolbar = "init-toolbar";
var initPivotPager = "init-pivotPager";
var initFormatting = "init-formatting";
var initGrouping = "init-grouping";
var sortValue = "Sort value";
var drillUp = "Drill up";
var drillDown = "Drill down";
var addNewReport = "Add new report";
var saveCurrentReport = "Save current report";
var saveAsCurrentReport = "Save as current report";
var renameCurrentReport = "Rename current report";
var removeCurrentReport = "Remove current report";
var loadReports = "Load report";
var openConditionalFormatting = "Open conditional formatting dialog";
var openNumberFormatting = "Open number formatting dialog";
var MdxQuery = "MdxQuery";
var showFieldList = "Open field list";
var tableView = "Show table view";
var chartView = "Show chart view";
var multipleAxis = "Multiple Axis";
var showLegend = "Show legend";
var pdfExport = "PDF export";
var pngExport = "PNG export";
var excelExport = "Excel export";
var csvExport = "CSV export";
var jpegExport = "JPEG export";
var svgExport = "SVG export";
var hideSubTotals = "Hide sub-totals";
var subTotalsRow = "Show row sub-totals";
var subTotalsColumn = "Show column sub-totals";
var showSubTotals = "Show sub-totals";
var hideGrandTotals = "Hide grand totals";
var grandTotalsRow = "Show row grand totals";
var grandTotalsColumn = "Show column grand totals";
var showGrandTotals = "Show grand totals";
var numberFormattingMenu = "Number Formatting menu";
var conditionalFormattingMenu = "Conditional Formatting menu";
var reportChange = "Report change";
var sortFieldTree = "Sort field tree";
var editCalculatedField = "Edit calculated field";
var sortField = "Sort field";
var filterField = "Filter field";
var removeField = "Remove field";
var openCalculatedField = "Open calculated field dialog";
var editRecord = "Edit record";
var saveEditedRecords = "Save edited records";
var addNewRecord = "Add new record";
var removeRecord = "Remove record";
var aggregateField = "Aggregate field";
var contextMenuCalculatedField = "CalculatedField Context menu";
var windowResize = "Window resize";
var rowPageNavigation = "Navigate row page";
var columnPageNavigation = "Navigate column page";
var calculatedFieldApplied = "Calculated field applied";
var editedRecordsSaved = "Edited records saved";
var newRecordAdded = "New record added";
var recordRemoved = "Record removed";
var closeFieldlist = "Field list closed";
var fieldTreeSorted = "Field tree sorted";
var reportSaved = "Report saved";
var newReportAdded = "New report added";
var reportReSaved = "Report re-saved";
var reportRenamed = "Report renamed";
var reportRemoved = "Report removed";
var excelExported = "Excel exported";
var csvExported = "CSV exported";
var pdfExported = "PDF exported";
var pngExported = "PNG exported";
var jpegExported = "JPEG exported";
var svgExported = "SVG exported";
var conditionallyFormatted = "Conditional formatting applied";
var numberFormatted = "Number formatting applied";
var tableViewed = "Table view shown";
var chartViewed = "Chart view shown";
var subTotalsHidden = "Sub-totals hidden";
var subTotalsRowShown = "Row sub-totals shown";
var subTotalsColumnShown = "Column sub-totals shown";
var subTotalsShown = "Sub-totals shown";
var grandTotalsHidden = "Grand totals hidden";
var grandTotalsRowShown = "Row grand totals shown";
var grandTotalsColumnShown = "Column grand totals shown";
var grandTotalsShown = "Grand totals shown";
var valueSorted = "Value sorted";
var calculatedFieldEdited = "Calculated field edited";
var fieldSorted = "Field sorted";
var fieldFiltered = "Field filtered";
var fieldRemoved = "Field removed";
var fieldAggregated = "Field aggregated";
var recordEdited = "Record edited";
var reportChanged = "Report changed";
var windowResized = "Window resized";
var recordUpdated = "Records updated";
var drillThroughClosed = "Drill-through closed";
var verticalScrolled = "Vertically scrolled";
var horizontalScrolled = "Horizontally scrolled";
var rowPageNavigated = "Row page navigated";
var columnPageNavigated = "Column page navigated";
var actionDropped = "Action dropped";
var invalidFormula = "Invalid formula";

// node_modules/@syncfusion/ej2-pivotview/src/common/popups/aggregate-menu.js
var AggregateMenu = (
  /** @class */
  function() {
    function AggregateMenu2(parent) {
      this.menuInfo = [];
      this.stringAggregateTypes = ["Count", "DistinctCount"];
      this.parent = parent;
    }
    AggregateMenu2.prototype.render = function(args, parentElement) {
      this.parentElement = parentElement;
      this.openContextMenu(args);
    };
    AggregateMenu2.prototype.openContextMenu = function(args) {
      var _this = this;
      var fieldName = args.target.parentElement.getAttribute("data-uid");
      var fieldInfo = PivotUtil.getFieldInfo(fieldName, this.parent);
      this.buttonElement = args.target.parentElement;
      var isStringField = this.parent.engineModule.fieldList[fieldName].type !== "number" ? 1 : 0;
      var summaryTypes = this.getMenuItem(isStringField).slice();
      this.parent.actionObj.actionName = aggregateField;
      this.parent.actionObj.fieldInfo = fieldInfo.fieldItem;
      if (this.parent.actionBeginMethod()) {
        return;
      }
      var eventArgs = {
        cancel: false,
        fieldName,
        aggregateTypes: summaryTypes,
        displayMenuCount: 7
      };
      var control = this.parent.getModuleName() === "pivotfieldlist" && this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;
      try {
        control.trigger(aggregateMenuOpen, eventArgs, function(observedArgs) {
          if (!observedArgs.cancel) {
            summaryTypes = observedArgs.aggregateTypes;
            _this.createContextMenu(isStringField, summaryTypes, observedArgs.displayMenuCount);
            _this.currentMenu = args.target;
            var pos = _this.currentMenu.getBoundingClientRect();
            if (_this.parent.enableRtl) {
              _this.menuInfo[isStringField].open(pos.top + (window.scrollY || document.documentElement.scrollTop), pos.left - 105);
            } else {
              _this.menuInfo[isStringField].open(pos.top + (window.scrollY || document.documentElement.scrollTop), pos.left);
            }
          }
        });
      } catch (execption) {
        this.parent.actionFailureMethod(execption);
      }
    };
    AggregateMenu2.prototype.createContextMenu = function(isStringField, summaryTypes, displayMenuCount) {
      var _this = this;
      var menuItems = [];
      menuItems[isStringField] = [];
      if (this.menuInfo[isStringField] && !this.menuInfo[isStringField].isDestroyed) {
        this.menuInfo[isStringField].destroy();
      }
      var checkDuplicates = [];
      for (var i = 0; i < summaryTypes.length; i++) {
        var key = summaryTypes[i];
        if (isStringField) {
          if (this.stringAggregateTypes.indexOf(key) > -1 && checkDuplicates.indexOf(key) < 0) {
            menuItems[isStringField].push({
              text: this.parent.localeObj.getConstant(key),
              id: this.parent.element.id + "StringMenu_" + key
            });
            checkDuplicates.push(key);
          }
        } else {
          if (this.parent.getAllSummaryType().indexOf(key) > -1 && checkDuplicates.indexOf(key) < 0) {
            menuItems[isStringField].push({
              text: this.parent.localeObj.getConstant(key),
              id: this.parent.element.id + "_" + key
            });
            checkDuplicates.push(key);
          }
        }
      }
      if (menuItems[isStringField].length > displayMenuCount) {
        menuItems[isStringField].splice(displayMenuCount);
        menuItems[isStringField].push({
          text: this.parent.localeObj.getConstant("MoreOption"),
          id: this.parent.element.id + "_MoreOption"
        });
      }
      var menuOptions = {
        items: menuItems[isStringField],
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        cssClass: this.parent.cssClass,
        beforeOpen: this.beforeMenuOpen.bind(this, isStringField),
        onClose: function() {
          select("#" + _this.buttonElement.id, _this.parentElement).focus();
        },
        select: this.selectOptionInContextMenu.bind(this)
      };
      var contextMenu = document.getElementById(this.parent.element.id + (isStringField ? "valueFieldStringContextMenu" : "valueFieldContextMenu"));
      if (contextMenu !== null) {
        contextMenu.innerHTML = "";
      } else {
        contextMenu = createElement("ul", {
          id: this.parent.element.id + (isStringField ? "valueFieldStringContextMenu" : "valueFieldContextMenu")
        });
      }
      this.parent.element.appendChild(contextMenu);
      this.menuInfo[isStringField] = new ContextMenu(menuOptions);
      this.menuInfo[isStringField].isStringTemplate = true;
      this.menuInfo[isStringField].appendTo(contextMenu);
    };
    AggregateMenu2.prototype.getMenuItem = function(isStringField) {
      var menuItems = [];
      for (var i = 0; i < this.parent.aggregateTypes.length; i++) {
        var key = this.parent.aggregateTypes[i];
        if (isStringField) {
          if (this.stringAggregateTypes.indexOf(key) > -1 && menuItems.indexOf(key) === -1) {
            menuItems.push(key);
          }
        } else {
          if (this.parent.getAllSummaryType().indexOf(key) > -1 && menuItems.indexOf(key) === -1) {
            menuItems.push(key);
          }
        }
      }
      return menuItems;
    };
    AggregateMenu2.prototype.beforeMenuOpen = function(isString, args) {
      args.element.style.zIndex = (this.menuInfo[isString].element.style.zIndex + 3).toString();
      args.element.style.display = "inline";
    };
    AggregateMenu2.prototype.createValueSettingsDialog = function(target, parentElement, type) {
      this.parentElement = parentElement;
      var valueDialogElement = createElement("div", {
        id: this.parentElement.id + "_ValueDialog",
        className: "e-value-field-settings",
        attrs: {
          "data-field": target.getAttribute("data-uid") ? target.getAttribute("data-uid") : target.getAttribute("data-field")
        }
      });
      this.parentElement.appendChild(valueDialogElement);
      var valueDialog = new Dialog({
        animationSettings: {
          effect: "Fade"
        },
        allowDragging: true,
        header: this.parent.localeObj.getConstant("valueFieldSettings"),
        content: this.createFieldOptions(target, type),
        isModal: true,
        visible: true,
        showCloseIcon: true,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        width: "320px",
        height: "auto",
        position: {
          X: "center",
          Y: "center"
        },
        buttons: [{
          click: this.updateValueSettings.bind(this),
          isFlat: false,
          buttonModel: {
            cssClass: OK_BUTTON_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
            content: this.parent.localeObj.getConstant("ok"),
            isPrimary: true
          }
        }, {
          click: function() {
            valueDialog.hide();
          },
          isFlat: false,
          buttonModel: {
            cssClass: CANCEL_BUTTON_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
            content: this.parent.localeObj.getConstant("cancel")
          }
        }],
        closeOnEscape: this.parent.getModuleName() === "pivotfieldlist" && this.parent.renderMode === "Popup" ? false : true,
        target: this.parentElement,
        close: this.removeDialog.bind(this),
        cssClass: this.parent.cssClass
      });
      valueDialog.isStringTemplate = true;
      valueDialog.appendTo(valueDialogElement);
    };
    AggregateMenu2.prototype.createFieldOptions = function(buttonElement, type) {
      var _this = this;
      var fieldCaption = buttonElement.getAttribute("data-caption");
      var summaryType = type && type !== "MoreOption" ? type : buttonElement.getAttribute("data-type");
      var baseField = buttonElement.getAttribute("data-basefield");
      var baseItem = buttonElement.getAttribute("data-baseitem");
      summaryType = summaryType.toString() !== "undefined" ? summaryType : "Sum";
      var summaryDataSource = [];
      var summaryItems = this.parent.aggregateTypes;
      var checkDuplicates = [];
      for (var i = 0; i < summaryItems.length; i++) {
        if (this.parent.getAllSummaryType().indexOf(summaryItems[i]) > -1 && checkDuplicates.indexOf(summaryItems[i]) < 0) {
          summaryDataSource.push({
            value: summaryItems[i],
            text: this.parent.localeObj.getConstant(summaryItems[i])
          });
          checkDuplicates.push(summaryItems[i]);
        }
      }
      var baseItemTypes = ["DifferenceFrom", "PercentageOfDifferenceFrom"];
      var baseFieldTypes = ["DifferenceFrom", "PercentageOfDifferenceFrom", "PercentageOfParentTotal"];
      var dataFields = extend([], this.parent.dataSourceSettings.rows, null, true);
      dataFields = dataFields.concat(this.parent.dataSourceSettings.columns);
      var fieldDataSource = [];
      var fieldItemDataSource = [];
      for (var _i = 0, dataFields_1 = dataFields; _i < dataFields_1.length; _i++) {
        var field = dataFields_1[_i];
        var value = field.name;
        var text = field.caption ? field.caption : field.name;
        fieldDataSource.push({
          value,
          text
        });
      }
      if (Object.keys(fieldDataSource).length === 0) {
        fieldDataSource.push({
          value: "",
          text: ""
        });
        baseField = "";
        fieldItemDataSource = [];
      } else {
        baseField = baseField && baseField.toString() !== "undefined" && baseField.toString() !== "null" ? baseField : fieldDataSource[0].value;
        var fieldName_1 = baseField.toString() !== "undefined" ? baseField : fieldDataSource[0].value;
        var isDateField_1 = PivotUtil.isDateField(fieldName_1, this.parent.engineModule);
        fieldItemDataSource = this.parent.engineModule.fieldList[fieldName_1].dateMember.map(function(item) {
          return isDateField_1 ? item.formattedText : _this.parent.engineModule.getFormattedValue(item.actualText, fieldName_1).formattedText;
        });
      }
      baseItem = baseItem.toString() !== "undefined" ? baseItem : fieldItemDataSource[0];
      var mainDiv = createElement("div", {
        className: "e-value-field-div-content",
        id: this.parentElement.id + "_field_div_content",
        attrs: {
          "data-type": summaryType,
          "data-caption": fieldCaption,
          "data-basefield": baseField,
          "data-baseitem": baseItem
        }
      });
      var textWrappper = createElement("div", {
        className: "e-field-name-text-container"
      });
      var filterWrapperDiv1 = createElement("div", {
        className: "e-field-option-container"
      });
      var optionWrapperDiv1 = createElement("div", {
        className: "e-type-option-container"
      });
      var optionWrapperDiv2 = createElement("div", {
        className: "e-base-field-option-container"
      });
      var optionWrapperDiv3 = createElement("div", {
        className: "e-base-item-option-container"
      });
      var texttitle = createElement("div", {
        className: "e-field-name-title"
      });
      texttitle.innerText = this.parent.localeObj.getConstant("sourceName") + " ";
      var textContent = createElement("div", {
        className: "e-field-name-content"
      });
      textContent.innerText = this.parent.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(buttonElement.getAttribute("data-uid") ? buttonElement.getAttribute("data-uid") : buttonElement.getAttribute("data-field")) : buttonElement.getAttribute("data-uid") ? buttonElement.getAttribute("data-uid") : buttonElement.getAttribute("data-field");
      this.buttonElement = this.buttonElement ? this.buttonElement : document.getElementsByClassName(textContent.innerText)[0];
      var inputTextDiv1 = createElement("div", {
        className: "e-type-option-text"
      });
      inputTextDiv1.innerText = this.parent.localeObj.getConstant("sourceCaption");
      var optionTextDiv1 = createElement("div", {
        className: "e-base-field-option-text"
      });
      optionTextDiv1.innerText = this.parent.localeObj.getConstant("summarizeValuesBy");
      var optionTextDiv2 = createElement("div", {
        className: "e-base-item-option-text"
      });
      optionTextDiv2.innerText = this.parent.localeObj.getConstant("baseField");
      var optionTextDiv3 = createElement("div", {
        className: "e-type-option-text"
      });
      optionTextDiv3.innerText = this.parent.localeObj.getConstant("baseItem");
      var inputDiv1 = createElement("div", {
        className: "e-caption-input-container"
      });
      var dropOptionDiv1 = createElement("div", {
        id: this.parentElement.id + "_type_option"
      });
      var dropOptionDiv2 = createElement("div", {
        id: this.parentElement.id + "_base_field_option"
      });
      var dropOptionDiv3 = createElement("div", {
        id: this.parentElement.id + "_base_item_option"
      });
      var inputField1 = createElement("input", {
        id: this.parentElement.id + "type_input_option",
        className: "e-caption-input-text",
        attrs: {
          "type": "text"
        }
      });
      textWrappper.appendChild(texttitle);
      textWrappper.appendChild(textContent);
      inputDiv1.appendChild(inputTextDiv1);
      inputDiv1.appendChild(inputField1);
      optionWrapperDiv1.appendChild(optionTextDiv1);
      optionWrapperDiv2.appendChild(optionTextDiv2);
      optionWrapperDiv3.appendChild(optionTextDiv3);
      optionWrapperDiv1.appendChild(dropOptionDiv1);
      optionWrapperDiv2.appendChild(dropOptionDiv2);
      optionWrapperDiv3.appendChild(dropOptionDiv3);
      filterWrapperDiv1.appendChild(textWrappper);
      filterWrapperDiv1.appendChild(inputDiv1);
      filterWrapperDiv1.appendChild(optionWrapperDiv1);
      filterWrapperDiv1.appendChild(optionWrapperDiv2);
      filterWrapperDiv1.appendChild(optionWrapperDiv3);
      mainDiv.appendChild(filterWrapperDiv1);
      var popupInstance = this;
      var optionWrapper1 = new DropDownList({
        dataSource: summaryDataSource,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        fields: {
          value: "value",
          text: "text"
        },
        value: summaryType,
        // popupWidth: 'auto',
        cssClass: VALUE_OPTIONS_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
        width: "100%",
        change: function(args) {
          optionWrapper2.enabled = baseFieldTypes.indexOf(args.value) !== -1 ? true : false;
          optionWrapper3.enabled = baseItemTypes.indexOf(args.value) !== -1 ? true : false;
          if (optionWrapper3.enabled && optionWrapper3.dataSource.length === 1) {
            optionWrapper3.dataSource = fieldItemDataSource;
            optionWrapper3.dataBind();
          }
        }
      });
      optionWrapper1.isStringTemplate = true;
      optionWrapper1.appendTo(dropOptionDiv1);
      var optionWrapper2 = new DropDownList({
        dataSource: fieldDataSource,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        fields: {
          value: "value",
          text: "text"
        },
        value: baseField,
        // popupWidth: 'auto',
        enabled: baseFieldTypes.indexOf(summaryType) !== -1 ? true : false,
        cssClass: VALUE_OPTIONS_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
        width: "100%",
        change: function(args) {
          var isDateField = PivotUtil.isDateField(args.value, _this.parent.engineModule);
          fieldItemDataSource = popupInstance.parent.engineModule.fieldList[args.value].dateMember.map(function(item) {
            return isDateField ? item.formattedText : _this.parent.engineModule.getFormattedValue(item.actualText, args.value).formattedText;
          });
          optionWrapper3.dataSource = fieldItemDataSource;
          optionWrapper3.value = fieldItemDataSource[0];
          optionWrapper3.filterBarPlaceholder = popupInstance.parent.localeObj.getConstant("example") + " " + fieldItemDataSource[0];
          optionWrapper3["itemData"] = null;
          optionWrapper3.dataBind();
        }
      });
      optionWrapper2.isStringTemplate = true;
      optionWrapper2.appendTo(dropOptionDiv2);
      var optionWrapper3 = new DropDownList({
        dataSource: fieldItemDataSource,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        value: baseItem,
        // popupWidth: 'auto',
        allowFiltering: true,
        filterBarPlaceholder: this.parent.localeObj.getConstant("example") + " " + fieldItemDataSource[0],
        enabled: baseItemTypes.indexOf(summaryType) !== -1 ? true : false,
        cssClass: FILTER_OPERATOR_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
        width: "100%"
      });
      optionWrapper3.isStringTemplate = true;
      optionWrapper3.appendTo(dropOptionDiv3);
      var inputObj1 = new MaskedTextBox({
        placeholder: "Enter field caption",
        // floatLabelType: 'Auto',
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        value: fieldCaption,
        width: "100%",
        cssClass: this.parent.cssClass
      });
      inputObj1.isStringTemplate = true;
      inputObj1.appendTo(inputField1);
      return mainDiv;
    };
    AggregateMenu2.prototype.selectOptionInContextMenu = function(menu) {
      if (menu.item.text !== null) {
        var buttonElement = this.currentMenu.parentElement;
        var fieldInfo = PivotUtil.getFieldInfo(buttonElement ? buttonElement.getAttribute("data-uid") : "", this.parent);
        this.parent.actionObj.actionName = aggregateField;
        this.parent.actionObj.fieldInfo = fieldInfo.fieldItem;
        if (this.parent.actionBeginMethod()) {
          return;
        }
        var type = menu.item.id.split("_").pop();
        try {
          if (type === "MoreOption" || type === "PercentageOfDifferenceFrom" || type === "PercentageOfParentTotal" || type === "DifferenceFrom") {
            this.createValueSettingsDialog(buttonElement, this.parentElement, type);
          } else {
            var field = buttonElement.getAttribute("data-uid");
            var valuefields = this.parent.dataSourceSettings.values;
            var contentElement = buttonElement.querySelector("." + PIVOT_BUTTON_CONTENT_CLASS);
            var captionName = menu.item.text + " " + this.parent.localeObj.getConstant("of") + " " + this.parent.engineModule.fieldList[field].caption;
            captionName = this.parent.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(captionName) : captionName;
            if (this.parent.dataSourceSettings.showAggregationOnValueField) {
              contentElement.innerText = captionName;
            }
            contentElement.setAttribute("title", captionName);
            buttonElement.setAttribute("data-type", type);
            for (var vCnt = 0; vCnt < this.parent.dataSourceSettings.values.length; vCnt++) {
              if (this.parent.dataSourceSettings.values[vCnt].name === field) {
                var dataSourceItem = extend({}, valuefields[vCnt].properties ? valuefields[vCnt].properties : valuefields[vCnt], null, true);
                dataSourceItem.type = type;
                this.parent.engineModule.fieldList[field].aggregateType = type;
                valuefields.splice(vCnt, 1, dataSourceItem);
                this.parent.lastAggregationInfo = dataSourceItem;
              }
            }
            this.updateDataSource();
          }
        } catch (execption) {
          this.parent.actionFailureMethod(execption);
        }
      }
    };
    AggregateMenu2.prototype.updateDataSource = function(isRefreshed) {
      if (this.parent.isDeferLayoutUpdate === false || this.parent.pivotGridModule && this.parent.pivotGridModule.pivotDeferLayoutUpdate === false || this.parent.getModuleName() === "pivotview" || this.parent.isAdaptive && this.parent.getModuleName() === "pivotfieldlist" && this.parent.renderMode === "Popup") {
        this.parent.updateDataSource(isRefreshed);
      } else {
        if (this.parent.getModuleName() === "pivotfieldlist" && this.parent.renderMode === "Popup") {
          this.parent.pivotGridModule.setProperties({
            dataSourceSettings: this.parent.dataSourceSettings.properties
          }, true);
          this.parent.pivotGridModule.notify(uiUpdate, this);
          this.parent.pivotGridModule.engineModule = this.parent.engineModule;
        } else {
          this.parent.triggerPopulateEvent();
        }
      }
    };
    AggregateMenu2.prototype.updateValueSettings = function() {
      var valueDialog = getInstance(select("#" + this.parentElement.id + "_ValueDialog", document), Dialog);
      var dialogElement = valueDialog.element;
      var captionInstance = getInstance(select("#" + this.parentElement.id + "type_input_option"), MaskedTextBox);
      var summaryInstance = getInstance(select("#" + this.parentElement.id + "_type_option"), DropDownList);
      var baseFieldInstance = getInstance(select("#" + this.parentElement.id + "_base_field_option"), DropDownList);
      var baseItemInstance = getInstance(select("#" + this.parentElement.id + "_base_item_option"), DropDownList);
      var fieldName = dialogElement.getAttribute("data-field");
      var buttonElement;
      if (this.parentElement.querySelector("." + PIVOT_BUTTON_CLASS)) {
        buttonElement = this.parentElement.getElementsByClassName(PIVOT_BUTTON_CLASS + " " + fieldName.replace(/[^A-Z0-9]/ig, ""))[0];
      }
      if (buttonElement) {
        var contentElement = buttonElement.querySelector("." + PIVOT_BUTTON_CONTENT_CLASS);
        var captionName = this.parent.dataSourceSettings.showAggregationOnValueField ? this.parent.localeObj.getConstant(summaryInstance.value) + " " + this.parent.localeObj.getConstant("of") + " " + captionInstance.value : captionInstance.value;
        captionName = this.parent.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(captionName) : captionName;
        contentElement.innerText = captionName;
        contentElement.setAttribute("title", captionName);
        buttonElement.setAttribute("data-type", summaryInstance.value);
        buttonElement.setAttribute("data-caption", captionInstance.value);
        buttonElement.setAttribute("data-basefield", baseFieldInstance.value);
        buttonElement.setAttribute("data-baseitem", baseItemInstance.value);
      }
      var selectedField = PivotUtil.getFieldByName(fieldName, this.parent.dataSourceSettings.values);
      selectedField = selectedField.properties ? selectedField.properties : selectedField;
      selectedField.caption = captionInstance.value;
      selectedField.type = summaryInstance.value;
      selectedField.baseField = baseFieldInstance.value;
      selectedField.baseItem = baseItemInstance.value;
      this.parent.engineModule.fieldList[fieldName].aggregateType = selectedField.type;
      valueDialog.close();
      this.parent.lastAggregationInfo = selectedField;
      this.updateDataSource(true);
    };
    AggregateMenu2.prototype.removeDialog = function() {
      if (this.buttonElement && select("#" + this.buttonElement.id, this.parentElement)) {
        select("#" + this.buttonElement.id, this.parentElement).focus();
      }
      var element = select("#" + this.parentElement.id + "_ValueDialog", document);
      var valueDialog = element ? getInstance(element, Dialog) : null;
      if (valueDialog && !valueDialog.isDestroyed) {
        valueDialog.destroy();
      }
      if (document.getElementById(this.parentElement.id + "_ValueDialog")) {
        remove(document.getElementById(this.parentElement.id + "_ValueDialog"));
      }
    };
    AggregateMenu2.prototype.destroy = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      if (this.menuInfo) {
        if (this.menuInfo[1] !== void 0 && !this.menuInfo[1].isDestroyed) {
          this.menuInfo[1].destroy();
        }
        if (this.menuInfo[0] !== void 0 && !this.menuInfo[0].isDestroyed) {
          this.menuInfo[0].destroy();
        }
      } else {
        return;
      }
    };
    return AggregateMenu2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/pivotview/renderer/render.js
var Render = (
  /** @class */
  function() {
    function Render3(parent) {
      this.isAutoFitEnabled = false;
      this.pivotColumns = [];
      this.indentCollection = {};
      this.colPos = 0;
      this.lastSpan = 0;
      this.lvlCollection = {};
      this.hierarchyCollection = {};
      this.lvlPosCollection = {};
      this.hierarchyPosCollection = {};
      this.position = 0;
      this.measurePos = 0;
      this.maxMeasurePos = 0;
      this.hierarchyCount = 0;
      this.actualText = "";
      this.drilledLevelInfo = {};
      this.parent = parent;
      this.resColWidth = this.parent.showGroupingBar && this.parent.groupingBarModule ? this.parent.isAdaptive ? 180 : 250 : this.parent.isAdaptive ? 140 : 200;
      this.engine = this.parent.dataType === "olap" ? this.parent.olapEngineModule : this.parent.engineModule;
      this.gridSettings = this.parent.gridSettings;
      this.formatList = this.getFormatList();
      this.aggMenu = new AggregateMenu(this.parent);
    }
    Render3.prototype.render = function(refreshRequired) {
      if (refreshRequired) {
        this.initProperties();
      }
      this.resColWidth = this.parent.isTabular ? this.gridSettings.columnWidth : this.parent.showGroupingBar && this.parent.groupingBarModule ? this.parent.isAdaptive ? 180 : 250 : this.parent.isAdaptive ? 140 : 200;
      this.engine = this.parent.dataType === "olap" ? this.parent.olapEngineModule : this.parent.engineModule;
      this.gridSettings = this.parent.gridSettings;
      this.formatList = this.getFormatList();
      this.parent.gridCellCollection = {};
      this.injectGridModules(this.parent);
      this.rowStartPos = this.getRowStartPos();
      if (this.parent.grid && this.parent.grid.element && this.parent.element.querySelector("." + GRID_CLASS)) {
        this.parent.notEmpty = true;
        if (!this.engine.isEngineUpdated) {
          this.engine.headerContent = this.frameDataSource("header");
          this.engine.valueContent = this.frameDataSource("value");
        } else {
          if (this.parent.dataType !== "olap") {
            if (this.parent.isTabular) {
              this.engine.headerContent = this.frameDataSource("header");
            }
            if (this.parent.enableValueSorting || this.parent.isTabular) {
              this.engine.valueContent = this.frameDataSource("value");
            }
          }
        }
        this.engine.isEngineUpdated = false;
        var frozenColumnsLength = this.parent.isTabular ? this.parent.engineModule.rowMaxLevel + 1 : 1;
        this.parent.grid.setProperties({
          frozenColumns: frozenColumnsLength,
          columns: this.frameStackedHeaders(),
          dataSource: (this.parent.dataType === "olap" && this.parent.dataSourceSettings.url !== "" ? true : this.parent.dataSourceSettings.dataSource && this.parent.engineModule.data.length > 0 && this.parent.dataSourceSettings.values.length > 0) && !this.engine.isEmptyData ? this.frameGridDataSource(this.engine.valueContent) : this.frameDataSource("value")
        }, true);
        this.parent.grid.notify("datasource-modified", {});
        if (this.parent.isScrolling) {
          this.parent.resizeInfo = {};
        }
        this.parent.grid.width = this.calculateGridWidth();
        this.parent.grid.refreshColumns();
        if (this.parent.showGroupingBar && this.parent.groupingBarModule && this.parent.element.querySelector("." + GROUPING_BAR_CLASS)) {
          this.parent.groupingBarModule.setGridRowWidth();
        }
        if (this.isAutoFitEnabled) {
          this.addPivotAutoFitClass();
        } else {
          this.removePivotAutoFitClass();
        }
        if (!this.gridSettings.allowAutoResizing && this.parent.showGroupingBar && this.parent.groupingBarModule && this.parent.element.querySelector("." + GROUPING_BAR_CLASS)) {
          this.parent.groupingBarModule.refreshUI();
        }
        if (!this.parent.isScrolling) {
          this.calculateGridHeight(true);
        }
      } else {
        this.parent.element.innerHTML = "";
        this.bindGrid(this.parent, this.engine.isEmptyData ? true : false);
        var gridElement = createElement("div", {
          id: this.parent.element.id + "_grid"
        });
        this.parent.element.appendChild(gridElement);
        this.parent.grid.isStringTemplate = true;
        this.parent.grid.appendTo(gridElement);
      }
      this.parent.grid.on(headerRefreshed, this.refreshHeader, this);
    };
    Render3.prototype.initProperties = function() {
      this.rowStartPos = void 0;
      this.maxIndent = void 0;
      this.resColWidth = void 0;
      this.isOverflows = void 0;
      this.indentCollection = {};
      this.formatList = void 0;
      this.colPos = 0;
      this.colGrandPos = void 0;
      this.rowGrandPos = void 0;
      this.lastSpan = 0;
      this.field = void 0;
      this.fieldCaption = void 0;
      this.lvlCollection = {};
      this.hierarchyCollection = {};
      this.lvlPosCollection = {};
      this.hierarchyPosCollection = {};
      this.position = 0;
      this.measurePos = 0;
      this.maxMeasurePos = 0;
      this.hierarchyCount = 0;
      this.actualText = "";
      this.timeOutObj = void 0;
    };
    Render3.prototype.refreshHeader = function() {
      var mCont = this.parent.element.querySelector("." + CONTENT_VIRTUALTABLE_DIV);
      if (this.parent.enableVirtualization && !isNullOrUndefined(mCont)) {
        var virtualTable = closest(mCont, "." + GRID_CONTENT).querySelector("." + VIRTUALTABLE_DIV);
        var mHdr = this.parent.element.querySelector("." + MOVABLEHEADER_DIV);
        var vtr = mCont.querySelector("." + VIRTUALTRACK_DIV);
        this.parent.virtualHeaderDiv = mHdr.querySelector("." + VIRTUALTRACK_DIV);
        if (mHdr.querySelector("." + VIRTUALTRACK_DIV)) {
          remove(mHdr.querySelector("." + VIRTUALTRACK_DIV));
        } else {
          this.parent.virtualHeaderDiv = createElement("div", {
            className: VIRTUALTRACK_DIV
          });
        }
        mHdr.appendChild(this.parent.virtualHeaderDiv);
        if (vtr) {
          setStyleAttribute(this.parent.virtualHeaderDiv, {
            height: 0,
            width: vtr.style.width
          });
        }
        if (mHdr.querySelector("." + TABLE)) {
          setStyleAttribute(mHdr.querySelector("." + TABLE), {
            transform: mCont.querySelector("." + TABLE).style.transform.split(",")[0] + ",0px)"
          });
          var freezedCellValue = parseInt(mHdr.querySelector("." + TABLE).style.transform.split("(")[1].split(",")[0].split("px")[0], 10);
          if (this.parent.enableRtl) {
            this.parent.element.querySelector("." + FREEZED_CELL).style.right = Number(freezedCellValue) + "px";
          } else {
            this.parent.element.querySelector("." + FREEZED_CELL).style.left = Number(-freezedCellValue) + "px";
          }
        }
        var ele = this.parent.isAdaptive ? mCont : virtualTable && virtualTable.style.display !== "none" ? virtualTable : mCont.parentElement;
        mHdr.scrollLeft = ele.scrollLeft;
      }
    };
    Render3.prototype.bindGrid = function(parent, isEmpty) {
      this.injectGridModules(parent);
      this.parent.grid = new Grid({
        cssClass: this.parent.cssClass,
        frozenColumns: 1,
        frozenRows: 0,
        enableHover: false,
        dataSource: isEmpty ? this.frameEmptyData() : this.frameDataSource("value"),
        columns: isEmpty ? this.frameEmptyColumns() : this.frameStackedHeaders(),
        height: isEmpty ? "auto" : this.calculateGridHeight(),
        width: isEmpty ? this.gridSettings.allowAutoResizing ? this.parent.width : 400 : this.calculateGridWidth(),
        locale: parent.locale,
        enableRtl: parent.enableRtl,
        allowExcelExport: parent.allowExcelExport,
        allowPdfExport: parent.allowPdfExport,
        allowResizing: this.gridSettings.allowResizing,
        allowTextWrap: this.gridSettings.allowTextWrap,
        clipMode: this.gridSettings.clipMode,
        allowReordering: this.gridSettings.allowReordering,
        allowSelection: this.gridSettings.allowSelection,
        contextMenuItems: this.gridSettings.contextMenuItems,
        selectedRowIndex: this.gridSettings.selectedRowIndex,
        selectionSettings: this.gridSettings.selectionSettings,
        textWrapSettings: this.gridSettings.textWrapSettings,
        printMode: this.gridSettings.printMode,
        rowHeight: this.gridSettings.rowHeight,
        gridLines: this.gridSettings.gridLines,
        contextMenuClick: this.contextMenuClick.bind(this),
        contextMenuOpen: this.contextMenuOpen.bind(this),
        beforeCopy: this.gridSettings.beforeCopy ? this.gridSettings.beforeCopy.bind(this.parent) : void 0,
        beforePrint: this.gridSettings.beforePrint ? this.gridSettings.beforePrint.bind(this.parent) : void 0,
        printComplete: this.gridSettings.printComplete ? this.gridSettings.printComplete.bind(this.parent) : void 0,
        rowSelecting: this.gridSettings.rowSelecting ? this.gridSettings.rowSelecting.bind(this.parent) : void 0,
        rowSelected: this.rowSelected.bind(this),
        rowDeselecting: this.gridSettings.rowDeselecting ? this.gridSettings.rowDeselecting.bind(this.parent) : void 0,
        rowDeselected: this.rowDeselected.bind(this),
        cellSelecting: this.cellSelecting.bind(this),
        cellSelected: this.cellSelected.bind(this),
        cellDeselecting: this.gridSettings.cellDeselecting ? this.gridSettings.cellDeselecting.bind(this.parent) : void 0,
        cellDeselected: this.cellDeselected.bind(this),
        resizeStart: this.gridSettings.resizeStart ? this.gridSettings.resizeStart.bind(this.parent) : void 0,
        columnDragStart: this.gridSettings.columnDragStart ? this.gridSettings.columnDragStart.bind(this) : void 0,
        columnDrag: this.gridSettings.columnDrag ? this.gridSettings.columnDrag.bind(this) : void 0,
        columnDrop: this.gridSettings.columnDrop ? this.gridSettings.columnDrop.bind(this) : void 0,
        beforeExcelExport: this.beforeExcelExport.bind(this),
        resizing: this.setGroupWidth.bind(this),
        resizeStop: this.onResizeStop.bind(this),
        queryCellInfo: this.queryCellInfo.bind(this),
        dataBound: this.dataBound.bind(this),
        headerCellInfo: this.headerCellInfo.bind(this),
        excelHeaderQueryCellInfo: this.excelHeaderQueryCellInfo.bind(this),
        pdfHeaderQueryCellInfo: this.pdfHeaderQueryCellInfo.bind(this),
        excelQueryCellInfo: this.excelQueryCellInfo.bind(this),
        pdfQueryCellInfo: this.pdfQueryCellInfo.bind(this),
        beforePdfExport: this.gridSettings.beforePdfExport ? this.gridSettings.beforePdfExport.bind(this) : void 0,
        pdfExportComplete: this.pdfExportComplete.bind(this),
        excelExportComplete: this.excelExportComplete.bind(this),
        actionComplete: this.actionComplete.bind(this)
      });
      this.parent.grid.on("header-refreshed", this.headerRefreshed.bind(this));
      this.parent.grid.on("export-DataBound", this.excelDataBound.bind(this));
    };
    Render3.prototype.actionComplete = function(args) {
      if (args && args.requestType === "refresh" && this.isAutoFitEnabled) {
        this.removePivotAutoFitClass();
      }
    };
    Render3.prototype.addPivotAutoFitClass = function() {
      if (!document.body.classList.contains(PIVOT_VIEW_CLASS)) {
        document.body.classList.add(PIVOT_VIEW_CLASS);
      }
      if (!document.body.classList.contains(PIVOT_VIEW_AUTOFIT)) {
        document.body.classList.add(PIVOT_VIEW_AUTOFIT);
      }
    };
    Render3.prototype.removePivotAutoFitClass = function() {
      if (document.body.classList.contains(PIVOT_VIEW_CLASS)) {
        document.body.classList.remove(PIVOT_VIEW_CLASS);
      }
      if (document.body.classList.contains(PIVOT_VIEW_AUTOFIT)) {
        document.body.classList.remove(PIVOT_VIEW_AUTOFIT);
      }
    };
    Render3.prototype.headerRefreshed = function() {
      var mHdr = this.parent.element.querySelector("." + MOVABLEHEADER_DIV);
      if (this.parent.lastGridSettings && Object.keys(this.parent.lastGridSettings).indexOf("allowResizing") > -1 && !isNullOrUndefined(mHdr) && mHdr.querySelector("." + TABLE) && this.parent.showGroupingBar && this.parent.groupingBarModule && this.parent.element.querySelector("." + GROUPING_BAR_CLASS)) {
        this.parent.lastGridSettings = void 0;
        this.parent.groupingBarModule.setGridRowWidth();
      }
    };
    Render3.prototype.beforeExcelExport = function(args) {
      if (!isNullOrUndefined(args.gridObject.columns) && !isNullOrUndefined(this.parent.pivotColumns)) {
        args.gridObject.columns[args.gridObject.columns.length - 1].width = this.parent.pivotColumns[this.parent.pivotColumns.length - 1].width;
      }
      this.parent.trigger(beforeExcelExport, args);
    };
    Render3.prototype.rowSelected = function(args) {
      this.parent.renderModule.selected();
      this.parent.trigger(rowSelected, args);
    };
    Render3.prototype.rowDeselected = function(args) {
      this.parent.renderModule.selected();
      this.parent.trigger(rowDeselected, args);
    };
    Render3.prototype.cellSelected = function(args) {
      if (this.parent.rowRangeSelection.enable) {
        this.parent.grid.selectionModule.selectRowsByRange(this.parent.rowRangeSelection.startIndex, this.parent.rowRangeSelection.endIndex);
        this.parent.rowRangeSelection.enable = false;
      } else {
        this.parent.renderModule.selected();
        this.parent.trigger(selected, args);
      }
    };
    Render3.prototype.cellSelecting = function(args) {
      var target = this.parent.grid.selectionModule["actualTarget"];
      if (!isNullOrUndefined(target) && (target.classList.contains("e-expand") || target.classList.contains("e-collapse") || this.parent.allowGrouping && !!target.closest(".e-valuescontent"))) {
        args.cancel = true;
      }
      this.parent.trigger(selecting, args);
    };
    Render3.prototype.cellDeselected = function(args) {
      this.parent.renderModule.selected();
      this.parent.trigger(cellDeselected, args);
    };
    Render3.prototype.queryCellInfo = function(args) {
      this.parent.renderModule.rowCellBoundEvent(args);
    };
    Render3.prototype.headerCellInfo = function(args) {
      this.parent.renderModule.columnCellBoundEvent(args);
    };
    Render3.prototype.excelHeaderQueryCellInfo = function(args) {
      this.parent.renderModule.excelColumnEvent(args);
    };
    Render3.prototype.pdfQueryCellInfo = function(args) {
      this.parent.renderModule.pdfRowEvent(args);
    };
    Render3.prototype.excelQueryCellInfo = function(args) {
      this.parent.renderModule.excelRowEvent(args);
    };
    Render3.prototype.pdfHeaderQueryCellInfo = function(args) {
      this.parent.renderModule.pdfColumnEvent(args);
    };
    Render3.prototype.pdfExportComplete = function(args) {
      if (this.parent.lastColumn !== void 0 && this.parent.lastColumn && this.parent.lastColumn.width !== "auto") {
        this.parent.lastColumn.width = "auto";
        this.parent.lastColumn = void 0;
      }
      var exportCompleteEventArgs = {
        type: "PDF",
        promise: args.promise
      };
      this.parent.trigger(exportComplete, exportCompleteEventArgs);
    };
    Render3.prototype.excelExportComplete = function(args) {
      if (this.parent.lastColumn !== void 0 && this.parent.lastColumn && this.parent.lastColumn.width !== "auto") {
        this.parent.lastColumn.width = "auto";
        this.parent.lastColumn = void 0;
      }
      var exportCompleteEventArgs = {
        type: "Excel/CSV",
        promise: args.promise
      };
      this.parent.trigger(exportComplete, exportCompleteEventArgs);
    };
    Render3.prototype.dataBound = function() {
      if (this.parent.notEmpty) {
        this.calculateGridHeight(true);
      }
      this.parent.isScrolling = false;
      this.setFocusOnLastCell();
      if (!isNullOrUndefined(this.parent["renderReactTemplates"])) {
        this.parent["renderReactTemplates"]();
      }
      if (this.parent.isInitial) {
        this.parent.isInitial = false;
        this.parent.refreshData();
        if (this.parent.enableVirtualization) {
          this.parent.onContentReady();
        }
      }
      this.parent.notify(contentReady, {});
    };
    Render3.prototype.setFocusOnLastCell = function() {
      if (this.parent.keyboardModule && this.parent.keyboardModule.event && this.parent.keyboardModule.event.target.nodeName === "TD") {
        var gridFocus = this.parent.grid.serviceLocator.getService("focus");
        gridFocus.setFocusedElement(this.parent.keyboardModule.event.target);
        gridFocus.focus(this.parent.keyboardModule.event);
        addClass([this.parent.keyboardModule.event.target], ["e-focused", "e-focus"]);
        this.parent.keyboardModule.event.target.setAttribute("tabindex", "0");
        this.parent.keyboardModule.event = void 0;
      }
    };
    Render3.prototype.getCellElement = function(target) {
      var currentElement = closest(target, "td");
      if (isNullOrUndefined(currentElement)) {
        currentElement = closest(target, "th");
      }
      return currentElement;
    };
    Render3.prototype.contextMenuOpen = function(args) {
      var _this = this;
      if (args.element && this.parent.cssClass) {
        addClass([args.element.parentElement], this.parent.cssClass);
      }
      var _loop_1 = function(item2) {
        var cellTarget = this_1.parent.lastCellClicked ? this_1.parent.lastCellClicked : this_1.parent.isAdaptive ? args.event.target : this_1.parent.lastCellClicked;
        var elem = this_1.getCellElement(cellTarget);
        var bool = void 0;
        var isGroupElement = void 0;
        if (!elem || elem && Number(elem.getAttribute("index")) === 0 && parseInt(elem.getAttribute("aria-colindex"), 10) - 1 === 0) {
          args.cancel = true;
          return {
            value: void 0
          };
        }
        if (elem.classList.contains("e-valuesheader") || elem.classList.contains("e-stot")) {
          bool = true;
        }
        if (this_1.parent.allowGrouping && this_1.parent.groupingModule && !this_1.validateField(elem)) {
          isGroupElement = true;
        }
        var rowIndex = Number(elem.getAttribute("index"));
        var colIndex = parseInt(elem.getAttribute("aria-colindex"), 10) - 1;
        var pivotValue1 = this_1.parent.pivotValues[rowIndex][colIndex];
        var selectedID = item2.id;
        switch (selectedID) {
          case this_1.parent.element.id + "_expand":
            if (elem.querySelectorAll("." + EXPAND).length > 0) {
              if (selectAll("#" + this_1.parent.element.id + "_expand", args.element)) {
                select("#" + this_1.parent.element.id + "_expand", args.element).classList.add(MENU_DISABLE);
              }
              if (select("#" + this_1.parent.element.id + "_expand", args.element).classList.contains(MENU_DISABLE)) {
                select("#" + this_1.parent.element.id + "_expand", args.element).classList.remove(MENU_DISABLE);
              }
              if (select("#" + this_1.parent.element.id + "_expand", args.element).classList.contains(MENU_HIDE)) {
                select("#" + this_1.parent.element.id + "_expand", args.element).classList.remove(MENU_HIDE);
                select("#" + this_1.parent.element.id + "_collapse", args.element).classList.remove(MENU_HIDE);
              }
            } else {
              if (bool) {
                select("#" + this_1.parent.element.id + "_expand", args.element).classList.add(MENU_HIDE);
              } else {
                select("#" + this_1.parent.element.id + "_expand", args.element).classList.add(MENU_DISABLE);
              }
            }
            break;
          case this_1.parent.element.id + "_collapse":
            if (elem.querySelectorAll("." + COLLAPSE).length > 0) {
              if (select("#" + this_1.parent.element.id + "_expand", args.element)) {
                select("#" + this_1.parent.element.id + "_expand", args.element).classList.add(MENU_DISABLE);
              }
              if (select("#" + this_1.parent.element.id + "_collapse", args.element).classList.contains(MENU_DISABLE)) {
                select("#" + this_1.parent.element.id + "_collapse", args.element).classList.remove(MENU_DISABLE);
              }
              if (select("#" + this_1.parent.element.id + "_collapse", args.element).classList.contains(MENU_HIDE)) {
                select("#" + this_1.parent.element.id + "_collapse", args.element).classList.remove(MENU_HIDE);
                select("#" + this_1.parent.element.id + "_expand", args.element).classList.remove(MENU_HIDE);
              }
            } else {
              if (bool) {
                select("#" + this_1.parent.element.id + "_collapse", args.element).classList.add(MENU_HIDE);
              } else {
                select("#" + this_1.parent.element.id + "_collapse", args.element).classList.add(MENU_DISABLE);
              }
            }
            break;
          case this_1.parent.element.id + "_custom_group":
            if (!isGroupElement && args.items.length === 2) {
              args.cancel = true;
            }
            if (selectAll("#" + this_1.parent.element.id + "_custom_group", args.element)) {
              addClass([select("#" + this_1.parent.element.id + "_custom_group", args.element)], MENU_HIDE);
            }
            if (isGroupElement) {
              if (selectAll("#" + this_1.parent.element.id + "_custom_group", args.element)) {
                removeClass([select("#" + this_1.parent.element.id + "_custom_group", args.element)], MENU_HIDE);
              }
            }
            break;
          case this_1.parent.element.id + "_custom_ungroup":
            if (selectAll("#" + this_1.parent.element.id + "_custom_ungroup", args.element)) {
              addClass([select("#" + this_1.parent.element.id + "_custom_ungroup", args.element)], MENU_HIDE);
            }
            if (isGroupElement) {
              var isUngroupOption = false;
              var fieldName = elem.getAttribute("fieldname");
              var groupField = PivotUtil.getFieldByName(fieldName, this_1.parent.dataSourceSettings.groupSettings);
              if (groupField && groupField.type === "Custom" || this_1.parent.engineModule.fieldList[fieldName].isCustomField && fieldName.indexOf("_custom_group") > -1) {
                groupField = PivotUtil.getFieldByName(fieldName.replace("_custom_group", ""), this_1.parent.dataSourceSettings.groupSettings);
                if (groupField) {
                  var cell = this_1.parent.engineModule.pivotValues[Number(elem.getAttribute("index"))][parseInt(elem.getAttribute("aria-colindex"), 10) - 1];
                  var selectedCellsInfo = this_1.parent.groupingModule.getSelectedCells(cell.axis, fieldName, cell.actualText.toString());
                  selectedCellsInfo.push({
                    axis: cell.axis,
                    fieldName,
                    name: cell.actualText.toString(),
                    cellInfo: cell
                  });
                  var selectedOptions = this_1.parent.groupingModule.getSelectedOptions(selectedCellsInfo);
                  for (var _i2 = 0, _a2 = groupField.customGroups; _i2 < _a2.length; _i2++) {
                    var customGroup = _a2[_i2];
                    if (selectedOptions.indexOf(customGroup.groupName) > -1) {
                      isUngroupOption = true;
                      break;
                    }
                  }
                }
              } else if (groupField && (groupField.type === "Date" || groupField.type === "Number") || this_1.parent.engineModule.fieldList[fieldName].isCustomField && fieldName.indexOf("_date_group") > -1) {
                isUngroupOption = true;
              }
              if (selectAll("#" + this_1.parent.element.id + "_custom_ungroup", args.element) && isUngroupOption) {
                removeClass([select("#" + this_1.parent.element.id + "_custom_ungroup", args.element)], MENU_HIDE);
              }
            }
            break;
          case this_1.parent.element.id + "_drillthrough":
            if (!this_1.parent.allowDrillThrough) {
              if (select("#" + this_1.parent.element.id + "_drillthrough", args.element)) {
                select("#" + this_1.parent.element.id + "_drillthrough", args.element).classList.add(MENU_DISABLE);
              }
            } else if (!elem.classList.contains("e-summary")) {
              if (elem.innerText === "") {
                if (select("#" + this_1.parent.element.id + "_drillthrough", args.element)) {
                  select("#" + this_1.parent.element.id + "_drillthrough", args.element).classList.add(MENU_DISABLE);
                }
              }
            } else {
              if (select("#" + this_1.parent.element.id + "_drillthrough", args.element).classList.contains(MENU_DISABLE)) {
                select("#" + this_1.parent.element.id + "_drillthrough", args.element).classList.remove(MENU_DISABLE);
              }
            }
            break;
          case this_1.parent.element.id + "_sortasc":
            if (!this_1.parent.enableValueSorting) {
              if (select("#" + this_1.parent.element.id + "_sortasc", args.element)) {
                select("#" + this_1.parent.element.id + "_sortasc", args.element).classList.add(MENU_DISABLE);
              }
            } else if (elem.querySelectorAll(".e-icon-descending").length > 0) {
              if (select("#" + this_1.parent.element.id + "_sortdesc", args.element)) {
                select("#" + this_1.parent.element.id + "_sortdesc", args.element).classList.add(MENU_DISABLE);
              } else {
                select("#" + this_1.parent.element.id + "_sortdesc", args.element).classList.remove(MENU_DISABLE);
              }
              if (select("#" + this_1.parent.element.id + "_sortasc", args.element).classList.contains(MENU_DISABLE)) {
                select("#" + this_1.parent.element.id + "_sortasc", args.element).classList.remove(MENU_DISABLE);
              }
            } else if (select("#" + this_1.parent.element.id + "_sortdesc", args.element).classList.contains(MENU_DISABLE)) {
              select("#" + this_1.parent.element.id + "_sortdesc", args.element).classList.remove(MENU_DISABLE);
            }
            break;
          case this_1.parent.element.id + "_sortdesc":
            if (!this_1.parent.enableValueSorting) {
              if (select("#" + this_1.parent.element.id + "_sortdesc", args.element)) {
                select("#" + this_1.parent.element.id + "_sortdesc", args.element).classList.add(MENU_DISABLE);
              }
            } else if (elem.querySelectorAll(".e-icon-ascending").length > 0) {
              if (select("#" + this_1.parent.element.id + "_sortasc", args.element)) {
                select("#" + this_1.parent.element.id + "_sortasc", args.element).classList.add(MENU_DISABLE);
              } else {
                select("#" + this_1.parent.element.id + "_sortasc", args.element).classList.remove(MENU_DISABLE);
              }
              if (select("#" + this_1.parent.element.id + "_sortdesc", args.element).classList.contains(MENU_DISABLE)) {
                select("#" + this_1.parent.element.id + "_sortdesc", args.element).classList.remove(MENU_DISABLE);
              }
            } else if (select("#" + this_1.parent.element.id + "_sortasc", args.element).classList.contains(MENU_DISABLE)) {
              select("#" + this_1.parent.element.id + "_sortasc", args.element).classList.remove(MENU_DISABLE);
            }
            break;
          case this_1.parent.element.id + "_CalculatedField":
            if (!this_1.parent.allowCalculatedField) {
              select("#" + this_1.parent.element.id + "_CalculatedField", args.element).classList.add(MENU_DISABLE);
            }
            break;
          case this_1.parent.element.id + "_pdf":
            if (!this_1.parent.allowPdfExport) {
              select("#" + this_1.parent.element.id + "_pdf", args.element).classList.add(MENU_DISABLE);
            }
            break;
          case this_1.parent.element.id + "_excel":
            if (!this_1.parent.allowExcelExport) {
              select("#" + this_1.parent.element.id + "_excel", args.element).classList.add(MENU_DISABLE);
            }
            break;
          case this_1.parent.element.id + "_csv":
            if (!this_1.parent.allowExcelExport) {
              select("#" + this_1.parent.element.id + "_csv", args.element).classList.add(MENU_DISABLE);
            }
            break;
          case this_1.parent.element.id + "_exporting":
            if (!this_1.parent.allowExcelExport && !this_1.parent.allowPdfExport) {
              select("#" + this_1.parent.element.id + "_exporting", args.element).classList.add(MENU_DISABLE);
            }
            break;
          case this_1.parent.element.id + "_aggregate":
            if (select("#" + this_1.parent.element.id + "_aggregate", args.element) && !select("#" + this_1.parent.element.id + "_aggregate", args.element).classList.contains(MENU_DISABLE)) {
              select("#" + this_1.parent.element.id + "_aggregate", args.element).classList.add(MENU_DISABLE);
            }
            if ((elem.classList.contains("e-valuesheader") || elem.classList.contains("e-valuescontent") || elem.classList.contains("e-stot") && elem.classList.contains("e-rowsheader")) && this_1.parent.dataType !== "olap") {
              var fieldType_1;
              if (!(elem.innerText === "")) {
                fieldType_1 = this_1.parent.engineModule.fieldList[pivotValue1.actualText.toString()].type;
              }
              var eventArgs = {
                cancel: false,
                fieldName: pivotValue1.actualText.toString(),
                aggregateTypes: this_1.getMenuItem(fieldType_1).slice(),
                displayMenuCount: 7
              };
              this_1.parent.trigger(aggregateMenuOpen, eventArgs, function(observedArgs) {
                if (!observedArgs.cancel && !(elem.innerText === "")) {
                  var menuItem = [];
                  var checkDuplicates = [];
                  for (var i = 0; i < observedArgs.aggregateTypes.length; i++) {
                    var key = observedArgs.aggregateTypes[i];
                    if (fieldType_1 !== "number") {
                      if (["Count", "DistinctCount"].indexOf(key) > -1 && checkDuplicates.indexOf(key) < 0) {
                        menuItem.push({
                          text: _this.parent.localeObj.getConstant(key),
                          id: _this.parent.element.id + "_Agg" + key
                        });
                        checkDuplicates.push(key);
                      }
                    } else {
                      if (_this.parent.getAllSummaryType().indexOf(key) > -1 && checkDuplicates.indexOf(key) < 0) {
                        menuItem.push({
                          text: _this.parent.localeObj.getConstant(key),
                          id: _this.parent.element.id + "_Agg" + key
                        });
                        checkDuplicates.push(key);
                      }
                    }
                  }
                  if (menuItem.length > observedArgs.displayMenuCount) {
                    menuItem.splice(observedArgs.displayMenuCount);
                    menuItem.push({
                      text: _this.parent.localeObj.getConstant("MoreOption"),
                      id: _this.parent.element.id + "_AggMoreOption"
                    });
                  }
                  if (menuItem && menuItem.length >= 1) {
                    item2.items = menuItem;
                    select("#" + _this.parent.element.id + "_aggregate", args.element).classList.remove(MENU_DISABLE);
                  }
                }
              });
            }
            break;
        }
      };
      var this_1 = this;
      for (var _i = 0, _a = args.items; _i < _a.length; _i++) {
        var item = _a[_i];
        var state_1 = _loop_1(item);
        if (typeof state_1 === "object") return state_1.value;
      }
      this.parent.trigger(contextMenuOpen, args);
    };
    Render3.prototype.getMenuItem = function(isStringField) {
      var menuItems = [];
      for (var i = 0; i < this.parent.aggregateTypes.length; i++) {
        var key = this.parent.aggregateTypes[i];
        if (isStringField !== "string") {
          if (this.parent.getAllSummaryType().indexOf(key) > -1 && menuItems.indexOf(key) === -1) {
            menuItems.push(key);
          }
        } else {
          if (["Count", "DistinctCount"].indexOf(key) > -1 && menuItems.indexOf(key) === -1) {
            menuItems.push(key);
          }
        }
      }
      return menuItems;
    };
    Render3.prototype.contextMenuClick = function(args) {
      var _this = this;
      var target = this.parent.lastCellClicked;
      var selected2 = args.item.id;
      var exportArgs = {};
      var ele = this.getCellElement(target);
      var rowIndx = Number(ele.getAttribute("index"));
      var colIndx = parseInt(ele.getAttribute("aria-colindex"), 10) - 1;
      var pivotValue = this.parent.pivotValues[rowIndx][colIndx];
      var aggregateType;
      if (args.item.id.indexOf(this.parent.element.id + "_Agg") > -1) {
        this.field = this.parent.engineModule.fieldList[pivotValue.actualText.toString()].id;
        this.fieldCaption = this.parent.engineModule.fieldList[pivotValue.actualText.toString()].caption;
        aggregateType = args.item.id.split("_Agg")[1];
      }
      switch (selected2) {
        case this.parent.element.id + "_pdf":
          exportArgs = {
            pdfDoc: void 0,
            isBlob: false,
            isMultipleExport: false,
            pdfExportProperties: {
              fileName: "Export.pdf"
            }
          };
          this.parent.trigger(beforeExport, exportArgs, function(observedArgs) {
            _this.parent.pdfExport(observedArgs.pdfExportProperties, observedArgs.isMultipleExport, observedArgs.pdfDoc, observedArgs.isBlob);
          });
          break;
        case this.parent.element.id + "_excel":
          exportArgs = {
            isBlob: false,
            isMultipleExport: false,
            workbook: void 0,
            excelExportProperties: {
              fileName: "Export.xlsx"
            }
          };
          this.parent.trigger(beforeExport, exportArgs, function(observedArgs) {
            _this.parent.excelExport(observedArgs.excelExportProperties, observedArgs.isMultipleExport, observedArgs.workbook, observedArgs.isBlob);
          });
          break;
        case this.parent.element.id + "_csv":
          exportArgs = {
            isBlob: false,
            workbook: void 0,
            isMultipleExport: false,
            excelExportProperties: {
              fileName: "Export.csv"
            }
          };
          this.parent.trigger(beforeExport, exportArgs, function(observedArgs) {
            _this.parent.csvExport(observedArgs.excelExportProperties, observedArgs.isMultipleExport, observedArgs.workbook, observedArgs.isBlob);
          });
          break;
        case this.parent.element.id + "_drillthrough_menu": {
          var event_1 = new MouseEvent("dblclick", {
            "view": window,
            "bubbles": true,
            "cancelable": true
          });
          ele.dispatchEvent(event_1);
          break;
        }
        case this.parent.element.id + "_sortasc":
          this.parent.setProperties({
            dataSourceSettings: {
              valueSortSettings: {
                headerText: pivotValue.valueSort.levelName,
                headerDelimiter: this.parent.dataSourceSettings.valueSortSettings.headerDelimiter
              }
            }
          });
          this.parent.dataSourceSettings.valueSortSettings.sortOrder = "Ascending";
          break;
        case this.parent.element.id + "_sortdesc":
          this.parent.setProperties({
            dataSourceSettings: {
              valueSortSettings: {
                headerText: pivotValue.valueSort.levelName,
                headerDelimiter: this.parent.dataSourceSettings.valueSortSettings.headerDelimiter
              }
            }
          });
          this.parent.dataSourceSettings.valueSortSettings.sortOrder = "Descending";
          break;
        case this.parent.element.id + "_expand":
          if (ele.querySelectorAll("." + EXPAND)) {
            var exp = ele.querySelectorAll("." + EXPAND)[0];
            this.parent.onDrill(exp);
          }
          break;
        case this.parent.element.id + "_collapse":
          if (ele.querySelectorAll("." + COLLAPSE)) {
            var colp = ele.querySelectorAll("." + COLLAPSE)[0];
            this.parent.onDrill(colp);
          }
          break;
        case this.parent.element.id + "_CalculatedField":
          this.parent.calculatedFieldModule.createCalculatedFieldDialog();
          break;
        case this.parent.element.id + "_AggMoreOption":
        case this.parent.element.id + "_AggDifferenceFrom":
        case this.parent.element.id + "_AggPercentageOfDifferenceFrom":
        case this.parent.element.id + "_AggPercentageOfParentTotal":
          ele.setAttribute("id", this.field);
          ele.setAttribute("data-caption", this.fieldCaption);
          ele.setAttribute("data-field", this.field);
          ele.setAttribute("data-type", this.engine.fieldList[pivotValue.actualText.toString()].aggregateType);
          ele.setAttribute("data-basefield", this.engine.fieldList[pivotValue.actualText.toString()].baseField);
          ele.setAttribute("data-baseItem", this.engine.fieldList[pivotValue.actualText.toString()].baseItem);
          this.aggMenu.createValueSettingsDialog(ele, this.parent.element, aggregateType);
          break;
        case this.parent.element.id + "_Agg" + aggregateType:
          this.updateAggregate(aggregateType);
          break;
        case this.parent.element.id + "_custom_group":
        case this.parent.element.id + "_custom_ungroup":
          if (this.parent.groupingModule) {
            var args_1 = {
              target: ele,
              option: selected2,
              parentElement: this.parent.element
            };
            this.parent.notify(initGrouping, args_1);
            this.parent.grid.contextMenuModule.contextMenu.close();
          }
          break;
      }
      this.parent.trigger(contextMenuClick, args);
    };
    Render3.prototype.validateColumnTotalcell = function(columnIndex) {
      var headerPosKeys = Object.keys(this.engine.headerContent);
      var keysLength = headerPosKeys.length;
      var sumLock = false;
      var fieldName = "";
      for (var pos = keysLength - 1; pos >= 0; pos--) {
        var cell = this.engine.headerContent[Number(headerPosKeys[pos])][columnIndex];
        if (cell) {
          sumLock = sumLock && fieldName !== "" ? fieldName === cell.valueSort.axis : false;
          fieldName = cell.valueSort.axis ? cell.valueSort.axis.toString() : "";
          if (cell.type === "sum") {
            sumLock = true;
          }
          if (sumLock && cell.members && cell.members.length > 0) {
            return true;
          }
        } else {
          return false;
        }
      }
      return false;
    };
    Render3.prototype.validateField = function(target) {
      var isValueField = false;
      if (target.classList.contains("e-stot") || target.classList.contains("e-gtot") || target.classList.contains("e-valuescontent") || target.classList.contains("e-valuesheader")) {
        isValueField = true;
      } else {
        var fieldName = target.getAttribute("fieldName");
        if (!fieldName || fieldName === "") {
          var rowIndx = Number(target.getAttribute("index"));
          var colIndx = parseInt(target.getAttribute("aria-colindex"), 10) - 1;
          fieldName = this.engine.pivotValues[rowIndx][colIndx].actualText;
        }
        var valuefields = this.parent.dataSourceSettings.values;
        for (var valueCnt = 0; valueCnt < valuefields.length; valueCnt++) {
          if (this.parent.dataSourceSettings.values[valueCnt].name === fieldName) {
            isValueField = true;
            break;
          }
        }
      }
      return isValueField;
    };
    Render3.prototype.updateAggregate = function(aggregate) {
      if (this.parent.getAllSummaryType().indexOf(aggregate) > -1) {
        var valuefields = this.parent.dataSourceSettings.values;
        for (var valueCnt = 0; valueCnt < this.parent.dataSourceSettings.values.length; valueCnt++) {
          if (this.parent.dataSourceSettings.values[valueCnt].name === this.field) {
            var dataSourceItem = valuefields[valueCnt];
            dataSourceItem.type = aggregate;
          }
        }
      }
    };
    Render3.prototype.injectGridModules = function(parent) {
      Grid.Inject(Freeze);
      if (parent.allowExcelExport) {
        Grid.Inject(ExcelExport);
      }
      if (parent.allowPdfExport) {
        Grid.Inject(PdfExport);
      }
      Grid.Inject(Selection, Reorder, Resize);
      if (this.gridSettings.contextMenuItems) {
        Grid.Inject(ContextMenu2);
      }
    };
    Render3.prototype.updateGridSettings = function() {
      this.injectGridModules(this.parent);
      this.parent.grid.allowResizing = this.gridSettings.allowResizing;
      this.parent.grid.clipMode = this.gridSettings.clipMode;
      this.parent.grid.allowTextWrap = this.gridSettings.allowTextWrap;
      this.parent.grid.allowReordering = this.gridSettings.allowReordering;
      this.parent.grid.allowSelection = this.gridSettings.allowSelection;
      this.parent.grid.contextMenuItems = this.gridSettings.contextMenuItems;
      this.parent.grid.selectedRowIndex = this.gridSettings.selectedRowIndex;
      this.parent.grid.selectionSettings = this.gridSettings.selectionSettings;
      this.parent.grid.textWrapSettings = this.gridSettings.textWrapSettings;
      this.parent.grid.printMode = this.gridSettings.printMode;
      this.parent.grid.rowHeight = this.gridSettings.rowHeight;
      this.parent.grid.gridLines = this.gridSettings.gridLines;
      if (this.parent.lastGridSettings) {
        var keys = Object.keys(this.parent.lastGridSettings);
        if (keys.indexOf("height") > -1) {
          this.parent.grid.height = this.gridSettings.height;
        }
        if (keys.indexOf("width") > -1) {
          this.parent.grid.width = this.gridSettings.width;
        }
        this.updatePivotColumns();
        if (keys.indexOf("allowTextWrap") > -1 || keys.indexOf("clipMode") > -1) {
          this.parent.layoutRefresh();
        }
      }
      this.clearColumnSelection();
    };
    Render3.prototype.updatePivotColumns = function() {
      var keys = Object.keys(this.parent.lastGridSettings);
      for (var colPos = 0; colPos < this.parent.pivotColumns.length; colPos++) {
        var pivotColumn = this.parent.pivotColumns[colPos];
        for (var keyPos = 0; keyPos < keys.length; keyPos++) {
          var key = keys[keyPos];
          if (!isNullOrUndefined(this.parent.pivotColumns[colPos][key])) {
            pivotColumn[key] = this.parent.lastGridSettings[key];
          }
        }
      }
      this.parent.fillGridColumns(this.parent.grid.columns);
    };
    Render3.prototype.clearColumnSelection = function() {
      removeClass(this.parent.element.querySelectorAll("." + CELL_ACTIVE_BGCOLOR), [CELL_ACTIVE_BGCOLOR, SELECTED_BGCOLOR]);
    };
    Render3.prototype.appendValueSortIcon = function(cell, tCell, rCnt, cCnt, column) {
      var engine = this.parent.dataType === "pivot" ? this.parent.engineModule : this.parent.olapEngineModule;
      var vSort = this.parent.dataSourceSettings.valueSortSettings;
      if (this.parent.enableValueSorting && vSort && vSort.headerText !== "") {
        var len = cell.type === "grand sum" && this.parent.dataSourceSettings.values.length === 1 && !this.parent.dataSourceSettings.alwaysShowValueHeader ? 0 : this.parent.dataSourceSettings.values.length > 1 || this.parent.dataSourceSettings.alwaysShowValueHeader ? engine.headerContent.length - 1 : this.parent.dataSourceSettings.columns.length === 0 ? 0 : engine.headerContent.length - 1;
        var lock = vSort && vSort.headerText ? cell.valueSort.levelName === vSort.headerText : cCnt === vSort.columnIndex;
        if (vSort !== void 0 && lock && (rCnt === len || rCnt + 1 === len && cell.level > -1 && engine.headerContent[rCnt + 1][cCnt] && engine.headerContent[rCnt + 1][cCnt].level === -1) && this.parent.dataSourceSettings.valueAxis === "column") {
          tCell.querySelector("div div").appendChild(createElement("span", {
            className: (vSort.sortOrder === "Descending" ? "e-icon-descending e-icons e-descending e-sortfilterdiv e-value-sort-icon" : "e-icon-ascending e-icons e-ascending e-sortfilterdiv e-value-sort-icon") + (cell.hasChild ? " e-value-sort-align" : ""),
            styles: column.headerTextAlign === "Right" ? "float : left" : ""
          }));
        }
      }
      return tCell;
    };
    Render3.prototype.onResizeStop = function(args) {
      if (args.column.columns && args.column.columns.length > 0) {
        this.getChildColumnWidth(args.column.columns);
      } else {
        var column = this.parent.isTabular ? args.column.index < this.parent.engineModule.rowMaxLevel + 1 ? args.column.index + ".formattedText" : "" + args.column.customAttributes.cell.valueSort.levelName : args.column.field === "0.formattedText" ? "0.formattedText" : "" + args.column.customAttributes.cell.valueSort.levelName;
        this.parent.resizeInfo[column] = Number(args.column.width.toString().split("px")[0]);
      }
      if (this.parent.enableVirtualization && args.column.field === "0.formattedText") {
        if (this.parent.dataSourceSettings.values.length > 1 && !isNullOrUndefined(this.parent.grid.columns[this.parent.grid.columns.length - 1].columns)) {
          var gridColumns = this.parent.grid.columns[this.parent.grid.columns.length - 1].columns;
          gridColumns[gridColumns.length - 1].minWidth = this.parent.gridSettings.columnWidth;
        } else {
          this.parent.grid.columns[this.parent.grid.columns.length - 1].minWidth = this.parent.gridSettings.columnWidth;
        }
        this.parent.layoutRefresh();
      }
      this.setGroupWidth(args);
      this.calculateGridHeight(true);
      this.parent.grid.hideScroll();
    };
    Render3.prototype.getChildColumnWidth = function(parentColumn) {
      for (var _i = 0, parentColumn_1 = parentColumn; _i < parentColumn_1.length; _i++) {
        var column = parentColumn_1[_i];
        if (column.columns && column.columns.length > 0) {
          this.getChildColumnWidth(column.columns);
        } else {
          var colName = column.customAttributes.cell.valueSort.levelName;
          this.parent.resizeInfo[colName] = Number(column.width.toString().split("px")[0]);
        }
      }
    };
    Render3.prototype.setGroupWidth = function(args) {
      if (this.parent.enableVirtualization && args.column.field === "0.formattedText") {
        if (this.parent.showGroupingBar && this.parent.groupingBarModule && this.parent.element.querySelector("." + GROUPING_BAR_CLASS) && Number(args.column.width.toString().split("px")[0]) < 250) {
          args.cancel = true;
        }
      }
      if (this.parent.showGroupingBar && this.parent.groupingBarModule && this.parent.element.querySelector("." + GROUPING_BAR_CLASS)) {
        this.parent.groupingBarModule.refreshUI();
        if (this.parent.element.querySelector(".e-group-row").offsetWidth < 245 && !this.parent.firstColWidth) {
          args.cancel = true;
          var gridColumn = this.parent.grid.columns;
          if (gridColumn && gridColumn.length > 0) {
            gridColumn[0].width = this.resColWidth;
          }
          this.parent.element.querySelector("." + HEADERCONTENT).querySelector("col").style.width = this.resColWidth + "px";
          this.parent.element.querySelector("." + CONTENT_CLASS).querySelector("col").style.width = this.resColWidth + "px";
        }
        this.parent.element.querySelector(".e-group-rows").style.height = "auto";
        this.parent.element.querySelector(".e-group-values").style.width = this.parent.element.querySelector(".e-group-row").offsetWidth + "px";
        var firstRowHeight = this.parent.element.querySelector("." + HEADERCONTENT).offsetHeight;
        this.parent.element.querySelector(".e-group-rows").style.height = firstRowHeight + "px";
      }
      if (args.cancel) {
        var column = args.column.field === "0.formattedText" ? "0.formattedText" : args.column.customAttributes.cell.valueSort.levelName;
        this.parent.resizeInfo[column] = Number(args.column.width.toString().split("px")[0]);
        if (this.parent.enableVirtualization) {
          this.parent.layoutRefresh();
        }
      }
      if (this.parent.enableVirtualization) {
        this.parent.resizedValue = args.cancel || args.column.field !== "0.formattedText" ? this.parent.resizedValue : Number(args.column.width.toString().split("px")[0]);
      }
      this.parent.trigger(args.e.type === "touchend" || args.e.type === "mouseup" ? resizeStop : resizing, args);
    };
    Render3.prototype.selected = function() {
      clearTimeout(this.timeOutObj);
      this.timeOutObj = setTimeout(this.onSelect.bind(this), 300);
    };
    Render3.prototype.onSelect = function() {
      var pivotArgs = {
        selectedCellsInfo: [],
        pivotValues: this.parent.pivotValues,
        currentCell: null
      };
      var selectedElements = this.parent.element.querySelectorAll("." + CELL_SELECTED_BGCOLOR + ",." + SELECTED_BGCOLOR);
      for (var i = 0; i < selectedElements.length; i++) {
        var element = selectedElements[i];
        var colIndex = parseInt(element.getAttribute("aria-colindex"), 10) - 1;
        var rowIndex = Number(element.getAttribute("index"));
        var cell = this.engine.pivotValues[rowIndex][colIndex];
        if (cell) {
          if (cell.axis === "value") {
            pivotArgs.selectedCellsInfo.push({
              currentCell: cell,
              value: cell.value,
              columnHeaders: cell.columnHeaders,
              rowHeaders: cell.rowHeaders,
              measure: cell.actualText.toString()
            });
          } else if (cell.axis === "column") {
            pivotArgs.selectedCellsInfo.push({
              currentCell: cell,
              value: cell.formattedText,
              columnHeaders: cell.valueSort.levelName,
              rowHeaders: "",
              measure: ""
            });
          } else {
            pivotArgs.selectedCellsInfo.push({
              currentCell: cell,
              value: cell.formattedText,
              columnHeaders: "",
              rowHeaders: cell.valueSort.levelName,
              measure: ""
            });
          }
        }
      }
      this.parent.trigger(cellSelected, pivotArgs);
    };
    Render3.prototype.rowCellBoundEvent = function(args) {
      var tCell = args.cell;
      var rowOuterDiv = createElement("div", {
        className: PIVOT_ROW_CONTAINER
      });
      if (tCell && this.parent.notEmpty && this.engine.headerContent) {
        var customClass = this.parent.hyperlinkSettings.cssClass;
        var colIndex = parseInt(tCell.getAttribute("aria-colindex"), 10) - 1;
        var index = this.parent.isTabular ? colIndex.toString() : "0";
        var cell = args.data[Number(index)];
        var isRowFieldsAvail = cell.valueSort && cell.valueSort.levelName === (this.parent.dataSourceSettings.rows.length === 0 && this.parent.dataSourceSettings.valueAxis === "row" && this.parent.localeObj.getConstant("grandTotal") + this.parent.dataSourceSettings.valueSortSettings.headerDelimiter + cell.formattedText);
        tCell.setAttribute("index", cell.rowIndex ? cell.rowIndex.toString() : "0");
        var pivotValue = this.parent.pivotValues[cell.rowIndex] && this.parent.pivotValues[cell.rowIndex][colIndex] ? this.parent.pivotValues[cell.rowIndex][colIndex] : null;
        var dataColIndex = this.parent.isTabular ? this.parent.engineModule.rowMaxLevel : 0;
        if (colIndex <= dataColIndex) {
          if (this.parent.dataType === "pivot") {
            var isValueCell = cell.type && cell.type === "value";
            tCell.innerText = "";
            var levelName = cell.valueSort ? cell.valueSort.levelName.toString() : "";
            var memberPos = cell.actualText ? cell.actualText.toString().split(this.parent.dataSourceSettings.valueSortSettings.headerDelimiter).length : 0;
            var levelPosition = levelName.split(this.parent.dataSourceSettings.valueSortSettings.headerDelimiter).length - (memberPos ? memberPos - 1 : memberPos);
            var level = levelPosition ? levelPosition - 1 : 0;
            if (this.parent.dataSourceSettings.subTotalsPosition === "Bottom" && !isNullOrUndefined(levelName)) {
              var cellLevelName = !cell.isSum ? levelName : cell.type === "value" ? levelName.split(this.parent.dataSourceSettings.valueSortSettings.headerDelimiter + (this.parent.engineModule.valueAxisFields[cell.actualText].caption ? this.parent.engineModule.valueAxisFields[cell.actualText].caption : this.parent.engineModule.valueAxisFields[cell.actualText].name))[0] : "";
              if (cell.isSum && (cell.type === "value" ? this.drilledLevelInfo[cellLevelName] : true)) {
                level = level - 1;
              } else if (!cell.isSum) {
                if (cellLevelName.split(this.parent.dataSourceSettings.valueSortSettings.headerDelimiter).length === 1) {
                  this.drilledLevelInfo = {};
                }
                if (cell.members && cell.members.length > 0) {
                  this.drilledLevelInfo[cellLevelName] = cell.isDrilled;
                }
              }
            }
            if (!this.parent.isTabular) {
              do {
                if (level > 0) {
                  rowOuterDiv.appendChild(createElement("span", {
                    className: level === 0 ? "" : NEXTSPAN
                  }));
                }
                level--;
              } while (level > -1);
              level = levelPosition ? levelPosition - 1 : 0;
              this.lastSpan = levelPosition ? this.lastSpan : 0;
              if (!cell.hasChild && (!isValueCell ? level : 0) > 0) {
                rowOuterDiv.appendChild(createElement("span", {
                  className: LASTSPAN
                }));
              }
            }
            var fieldName = void 0;
            if (this.parent.dataSourceSettings.rows.length > 0 && (cell.valueSort ? Object.keys(cell.valueSort).length > 0 : true)) {
              if (isValueCell) {
                for (var _i = 0, _a = this.parent.dataSourceSettings.values; _i < _a.length; _i++) {
                  var field = _a[_i];
                  var name_1 = field.caption ? field.caption : field.name;
                  if (levelName.indexOf(name_1) > -1) {
                    fieldName = field.name;
                    break;
                  }
                }
              } else {
                fieldName = cell.level > -1 && this.parent.dataSourceSettings.rows[cell.level] ? this.parent.dataSourceSettings.rows[cell.level].name : "";
              }
              tCell.setAttribute("fieldname", fieldName);
            }
          } else {
            rowOuterDiv = this.onOlapRowCellBoundEvent(tCell, rowOuterDiv, cell);
          }
          var localizedText = cell.formattedText;
          if (cell.type) {
            if (cell.type === "grand sum") {
              this.rowGrandPos = cell.rowIndex;
              tCell.classList.add("e-gtot");
              var values = this.parent.dataSourceSettings.values;
              localizedText = isNullOrUndefined(cell.valueSort.axis) ? this.parent.dataSourceSettings.rows.length === 0 && values.length === 1 && this.parent.dataSourceSettings.valueAxis === "row" ? this.parent.localeObj.getConstant("total") + " " + this.parent.localeObj.getConstant(values[values.length - 1].type) + " " + this.parent.localeObj.getConstant("of") + " " + (!isNullOrUndefined(values[values.length - 1].caption) ? values[values.length - 1].caption : values[values.length - 1].name) : this.parent.localeObj.getConstant("grandTotal") : cell.formattedText;
            } else if (cell.valueSort.levelName === this.parent.localeObj.getConstant("grandTotal") + this.parent.dataSourceSettings.valueSortSettings.headerDelimiter + cell.formattedText) {
              tCell.classList.add("e-gtot");
              localizedText = isRowFieldsAvail ? this.parent.localeObj.getConstant("total") + " " + this.parent.localeObj.getConstant(this.parent.engineModule.fieldList[cell.actualText].aggregateType) + " " + this.parent.localeObj.getConstant("of") + " " + cell.formattedText : localizedText;
            } else if (cell.type === "sum" && cell.memberType !== 3) {
              localizedText = cell.formattedText.split("Total")[0] + this.parent.localeObj.getConstant("total");
            } else {
              tCell.classList.add("e-stot");
            }
          }
          if (this.parent.isTabular) {
            this.setSpanAttributes("rowspan", cell.rowSpan, tCell);
            this.setSpanAttributes("colspan", cell.colSpan, tCell);
          } else {
            tCell.classList.add(ROWSHEADER);
          }
          if (cell.hasChild === true && !cell.isNamedSet) {
            rowOuterDiv.appendChild(createElement("div", {
              className: (cell.isDrilled === true ? COLLAPSE : EXPAND) + " " + ICON,
              attrs: {
                "title": cell.isDrilled === true ? this.parent.localeObj.getConstant("collapse") : this.parent.localeObj.getConstant("expand")
              }
            }));
          }
          rowOuterDiv.appendChild(createElement("span", {
            className: CELLVALUE,
            innerHTML: this.parent.isRowCellHyperlink || cell.enableHyperlink ? '<a  data-url="' + localizedText + '" class="e-hyperlinkcell ' + customClass + '">' + localizedText + "</a>" : localizedText
          }));
          var vSort = this.parent.pivotView.dataSourceSettings.valueSortSettings;
          if (this.parent.enableValueSorting) {
            if (vSort && vSort.headerText && this.parent.dataSourceSettings.valueAxis === "row" && this.parent.pivotValues[Number(tCell.getAttribute("index"))][0] && this.parent.pivotValues[Number(tCell.getAttribute("index"))][0].valueSort.levelName) {
              if (this.parent.pivotValues[Number(tCell.getAttribute("index"))][0].valueSort.levelName === vSort.headerText) {
                rowOuterDiv.appendChild(createElement("span", {
                  className: (vSort.sortOrder === "Descending" ? "e-icon-descending e-icons e-descending e-sortfilterdiv e-value-sort-icon" : "e-icon-ascending e-icons e-ascending e-sortfilterdiv e-value-sort-icon") + (cell.hasChild ? " e-value-sort-align" : ""),
                  styles: rowOuterDiv.style.textAlign === "right" ? "float: left" : ""
                }));
              }
            }
          }
          tCell.appendChild(rowOuterDiv);
        } else {
          var innerText = tCell.innerText;
          tCell.innerText = "";
          tCell.classList.add(VALUESCONTENT);
          cell = args.data[colIndex];
          cell = isNullOrUndefined(cell) ? args.column.customAttributes.cell : cell;
          cell.isGrandSum = isRowFieldsAvail ? true : cell.isGrandSum;
          if (cell.isSum) {
            tCell.classList.add(SUMMARY);
          }
          var isGrandSum = isNullOrUndefined(cell.isGrandSum) && !isNullOrUndefined(this.parent.olapEngineModule) && this.parent.olapEngineModule.olapValueAxis === "column" && this.parent.dataType === "olap" && this.colGrandPos - this.parent.dataSourceSettings.values.length < colIndex;
          if (cell.isGrandSum || isGrandSum || this.colGrandPos === colIndex || this.rowGrandPos === Number(tCell.getAttribute("index"))) {
            tCell.classList.add("e-gtot");
          } else if (this.parent.dataType === "olap" ? cell.isSum : this.validateColumnTotalcell(cell.colIndex)) {
            tCell.classList.add("e-colstot");
          }
          if (pivotValue && pivotValue.cssClass) {
            tCell.classList.add(pivotValue.cssClass);
          }
          tCell.appendChild(createElement("span", {
            className: CELLVALUE,
            innerHTML: tCell.className.indexOf("e-summary") !== -1 && this.parent.isSummaryCellHyperlink || tCell.className.indexOf("e-summary") === -1 && this.parent.isValueCellHyperlink || cell.enableHyperlink ? '<a data-url="' + innerText + '" class="e-hyperlinkcell ' + customClass + '">' + innerText + "</a>" : innerText
          }));
          if (this.parent.gridSettings.allowReordering) {
            tCell.setAttribute("aria-colindex", args.column.customAttributes ? (args.column.customAttributes.cell.colIndex + 1).toString() : args.column.index.toString());
          }
        }
        if (this.parent.cellTemplate) {
          this.appendTemplate(tCell, pivotValue);
        }
        this.unWireEvents(tCell);
        this.wireEvents(tCell);
      }
      args.pivotview = this.parent;
      this.parent.trigger(queryCellInfo, args);
    };
    Render3.prototype.appendTemplate = function(tCell, pivotValue) {
      var element = this.parent.getCellTemplate()({
        targetCell: tCell,
        cellInfo: pivotValue
      }, this.parent, "cellTemplate", this.parent.element.id + "_cellTemplate", null, null, tCell);
      if (element && element !== "" && element.length > 0) {
        if (this.parent.enableHtmlSanitizer) {
          if (this.parent.isVue || this.parent.isVue3) {
            var container = createElement("div");
            container.innerHTML = SanitizeHtmlHelper.sanitize(element);
            append([container.firstChild], tCell);
          } else {
            this.parent.appendHtml(tCell, SanitizeHtmlHelper.sanitize(element[0].outerHTML));
          }
        } else {
          if (this.parent.isVue || this.parent.isVue3) {
            append(element, tCell);
          } else {
            this.parent.appendHtml(tCell, element[0].outerHTML);
          }
        }
      }
    };
    Render3.prototype.onOlapRowCellBoundEvent = function(tCell, rowOuterDiv, cell) {
      tCell.innerText = "";
      var rowMeasurePos = this.engine.rowMeasurePos;
      if (this.parent.enableVirtualization) {
        if (cell.ordinal > -1 && this.parent.olapEngineModule.tupRowInfo.length > 0) {
          var tupInfo = this.parent.olapEngineModule.tupRowInfo[cell.ordinal];
          var cellActualText = cell.memberType === 3 ? this.engine.fieldList[cell.actualText.toString()].tag.toString() : cell.actualText.toString();
          var memberPosition = tupInfo.uNameCollection.indexOf(cellActualText);
          var cropUName = tupInfo.uNameCollection.substring(0, memberPosition) + (cell.memberType === 3 ? "" : cell.actualText.toString());
          var fieldSep = cropUName.split("::[").map(function(item) {
            return item[0] === "[" ? item : "[" + item;
          });
          if (cell.memberType === 3 && rowMeasurePos) {
            fieldSep.push(cell.actualText.toString());
          }
          var nxtIndextCount = -1;
          var lastIndextCount = 0;
          var prevHasChild = false;
          for (var fPos = 0; fPos < fieldSep.length; fPos++) {
            var fieldMembers = fieldSep[fPos];
            var membersCount = fieldMembers.split("~~").length;
            nxtIndextCount += membersCount;
            var hasChild = tupInfo.typeCollection[fPos] !== "2" ? this.engine.fieldList[tupInfo.members[fPos].getAttribute("Hierarchy")] && this.engine.fieldList[tupInfo.members[fPos].getAttribute("Hierarchy")].isHierarchy && fPos < this.parent.dataSourceSettings.rows.length - 1 && !this.parent.dataSourceSettings.rows[fPos + 1].isNamedSet && this.parent.dataSourceSettings.rows[fPos + 1].name.indexOf("[Measures]") < 0 && this.engine.fieldList[this.parent.dataSourceSettings.rows[fPos + 1].name] && this.engine.fieldList[this.parent.dataSourceSettings.rows[fPos + 1].name].hasAllMember ? true : Number(tupInfo.members[fPos].querySelector("CHILDREN_CARDINALITY").textContent) > 0 : false;
            lastIndextCount += fPos > 0 && prevHasChild && !hasChild ? 1 : 0;
            prevHasChild = hasChild;
          }
          var indent = 0;
          for (var iPos = 0; iPos < nxtIndextCount; iPos++) {
            rowOuterDiv.appendChild(createElement("span", {
              className: NEXTSPAN
            }));
            indent++;
          }
          for (var iPos = 0; iPos < lastIndextCount && nxtIndextCount > 0; iPos++) {
            rowOuterDiv.appendChild(createElement("span", {
              className: LASTSPAN
            }));
          }
          this.indentCollection[cell.rowIndex] = indent;
          this.maxIndent = this.maxIndent > indent ? this.maxIndent : indent;
        }
      } else {
        var hierarchyName = cell.hierarchy;
        var actualLevelName = cell.valueSort ? cell.valueSort.levelName.toString() : "";
        var levelPosition = cell.level === -1 ? this.measurePos : actualLevelName.split(this.parent.dataSourceSettings.valueSortSettings.headerDelimiter).length - 1;
        var levelName = cell.memberType === 3 ? levelPosition + "." + cell.levelUniqueName : cell.levelUniqueName;
        var hasChild = cell.hasChild;
        var isSubTotalCell = false;
        if (cell.isSum && cell.memberType === 3) {
          var currPos_1 = this.lvlCollection[cell.parentUniqueName].position;
          for (var i = currPos_1 + 1; i < this.position; i++) {
            delete this.lvlCollection[this.lvlPosCollection[i]];
            delete this.lvlPosCollection[i];
          }
          this.position = this.position > currPos_1 + 1 ? currPos_1 + 1 : this.position;
          isSubTotalCell = true;
          this.measurePos = this.lvlCollection[cell.parentUniqueName].position;
        }
        if (!this.lvlCollection[levelName] && levelName) {
          this.lvlPosCollection[this.position] = levelName;
          this.lvlCollection[levelName] = {
            position: this.position,
            hasChild
          };
          this.position++;
        } else if (levelName) {
          var currPos_2 = this.lvlCollection[levelName].position;
          for (var pos = currPos_2 + 1; pos < this.position; pos++) {
            delete this.lvlCollection[this.lvlPosCollection[pos]];
            delete this.lvlPosCollection[pos];
          }
          this.position = this.position > currPos_2 + 1 ? currPos_2 + 1 : this.position;
        }
        if (!this.hierarchyCollection[hierarchyName] && hierarchyName) {
          this.hierarchyPosCollection[this.hierarchyCount] = hierarchyName;
          this.hierarchyCollection[hierarchyName] = {
            lvlPosition: this.position - 1,
            hierarchyPOs: this.hierarchyCount
          };
          this.hierarchyCount++;
        } else if (hierarchyName) {
          var currPos_3 = this.hierarchyCollection[hierarchyName].hierarchyPOs;
          for (var pos = currPos_3 + 1; pos < this.hierarchyCount; pos++) {
            delete this.hierarchyCollection[this.hierarchyPosCollection[pos]];
            delete this.hierarchyPosCollection[pos];
          }
          this.hierarchyCount = this.hierarchyCount > currPos_3 + 1 ? currPos_3 + 1 : this.hierarchyCount;
        }
        if (cell.memberType !== 3 && levelName && this.lvlCollection[levelName]) {
          var currHierarchyPos = this.hierarchyCollection[hierarchyName] ? this.hierarchyCollection[hierarchyName].hierarchyPOs : -1;
          this.measurePos = rowMeasurePos <= currHierarchyPos && this.hierarchyPosCollection[rowMeasurePos + 1] ? this.measurePos : this.lvlCollection[levelName].position;
        }
        var currPos = this.lvlCollection[levelName] ? this.lvlCollection[levelName].position : -1;
        currPos = isSubTotalCell ? currPos - 1 : currPos;
        var lvlPos = 0;
        var indent = 0;
        while (lvlPos <= currPos && currPos > 0 && cell.level > -1) {
          var hasChild_1 = this.lvlCollection[this.lvlPosCollection[lvlPos]].hasChild;
          var prevHasChild = lvlPos > 0 ? this.lvlCollection[this.lvlPosCollection[lvlPos - 1]].hasChild : false;
          if (prevHasChild && !hasChild_1) {
            rowOuterDiv.appendChild(createElement("span", {
              className: LASTSPAN
            }));
          }
          if (lvlPos !== currPos) {
            rowOuterDiv.appendChild(createElement("span", {
              className: NEXTSPAN
            }));
            indent++;
          }
          lvlPos++;
        }
        if (this.parent.dataSourceSettings.grandTotalsPosition === "Top" && !isNullOrUndefined(this.parent.olapEngineModule) && this.parent.olapEngineModule.olapValueAxis === "row" && this.parent.dataType === "olap" && cell.valueSort.levelName.toString().indexOf(this.parent.localeObj.getConstant("grandTotal") + this.parent.dataSourceSettings.valueSortSettings.headerDelimiter) === 0) {
          rowOuterDiv.appendChild(createElement("span", {
            className: NEXTSPAN
          }));
        }
        if (cell.memberType === 3 && cell.level === -1 && Object.keys(this.lvlCollection).length > 1) {
          rowOuterDiv.appendChild(createElement("span", {
            className: NEXTSPAN
          }));
          indent++;
        }
        this.indentCollection[cell.rowIndex] = indent;
        this.maxIndent = this.maxIndent > indent ? this.maxIndent : indent;
      }
      rowOuterDiv.setAttribute("fieldname", cell.hierarchy);
      tCell.setAttribute("fieldname", cell.hierarchy);
      var grandTotal = this.parent.olapEngineModule.tupRowInfo[cell.ordinal] ? this.parent.olapEngineModule.tupRowInfo[cell.ordinal].measurePosition === 0 ? this.parent.olapEngineModule.tupRowInfo[cell.ordinal].allStartPos === 1 : this.parent.olapEngineModule.tupRowInfo[cell.ordinal].allStartPos === 0 : false;
      if (grandTotal) {
        tCell.classList.add("e-gtot");
      }
      return rowOuterDiv;
    };
    Render3.prototype.columnCellBoundEvent = function(args) {
      if (args.cell.column && args.cell.column.customAttributes) {
        var cell = args.cell.column.customAttributes.cell;
        var tCell = args.node;
        if (cell) {
          var customClass = this.parent.hyperlinkSettings.cssClass;
          var isValueCell = false;
          for (var _i = 0, _a = this.parent.dataSourceSettings.values; _i < _a.length; _i++) {
            var field = _a[_i];
            if (field.name === cell.actualText) {
              isValueCell = true;
              tCell.setAttribute("fieldname", field.name);
            }
          }
          if (cell.level === -1 && !cell.rowSpan || cell.rowSpan === -1) {
            args.node.style.display = "none";
          } else if (cell.rowSpan > 1) {
            args.node.setAttribute("rowspan", cell.rowSpan.toString());
            args.node.setAttribute("aria-rowspan", cell.rowSpan.toString());
            if (cell.rowIndex + cell.rowSpan === this.engine.headerContent.length) {
              args.node.style.borderBottomWidth = "0px";
            }
          }
          args.node.setAttribute("aria-colindex", (cell.colIndex + 1).toString());
          args.node.setAttribute("index", cell.rowIndex.toString());
          var fieldName = void 0;
          if (this.parent.dataType === "pivot") {
            if (!isValueCell && !(this.parent.dataSourceSettings.values && this.parent.dataSourceSettings.valueAxis === "column" && this.parent.dataSourceSettings.values.length > 1 && isValueCell && cell.rowIndex === this.engine.headerContent.length - 1) && this.parent.dataSourceSettings.columns && this.parent.dataSourceSettings.columns.length > 0) {
              fieldName = cell.level > -1 && this.parent.dataSourceSettings.columns[cell.level] ? this.parent.dataSourceSettings.columns[cell.level].name : "";
              tCell.setAttribute("fieldname", fieldName);
            }
            if (this.validateColumnTotalcell(cell.colIndex)) {
              tCell.classList.add("e-colstot");
            }
          } else {
            tCell = this.onOlapColumnCellBoundEvent(tCell, cell);
          }
          var isColumnFieldsAvail = this.parent.dataSourceSettings.columns.length === 0 && this.parent.dataSourceSettings.valueAxis === "column" && cell.valueSort && cell.valueSort.levelName === this.parent.localeObj.getConstant("grandTotal") + this.parent.dataSourceSettings.valueSortSettings.headerDelimiter + cell.formattedText;
          if (cell.type || isColumnFieldsAvail) {
            tCell.classList.add(cell.type === "grand sum" ? "e-gtot" : "e-stot");
            if (cell.type === "grand sum") {
              this.colGrandPos = cell.colIndex;
            } else if (cell.type) {
              tCell.classList.add("e-colstot");
            }
            var engine = this.parent.dataType === "olap" ? this.parent.olapEngineModule : this.parent.engineModule;
            var localizedText = cell.type === "grand sum" ? isNullOrUndefined(cell.valueSort.axis) || this.parent.dataType === "olap" ? this.parent.localeObj.getConstant("grandTotal") : cell.formattedText : cell.formattedText.split("Total")[0] + this.parent.localeObj.getConstant("total");
            localizedText = isColumnFieldsAvail && engine.fieldList ? this.parent.localeObj.getConstant("total") + " " + this.parent.localeObj.getConstant(engine.fieldList[cell.actualText].aggregateType) + " " + this.parent.localeObj.getConstant("of") + " " + cell.formattedText : localizedText;
            if (tCell.querySelector(".e-headertext") !== null) {
              tCell.querySelector(".e-headertext").innerText = localizedText;
            } else {
              tCell.querySelector(".e-stackedheadercelldiv").innerText = localizedText;
            }
          }
          tCell.classList.add(COLUMNSHEADER);
          if (this.parent.isColumnCellHyperlink || cell.enableHyperlink) {
            if (tCell.querySelector(".e-stackedheadercelldiv")) {
              var innerText = tCell.querySelector(".e-stackedheadercelldiv").innerText;
              tCell.querySelector(".e-stackedheadercelldiv").innerHTML = '<a data-url="' + innerText + '" class="e-hyperlinkcell ' + customClass + '">' + innerText + "</a>";
            } else if (tCell.querySelector(".e-headertext")) {
              var innerText = tCell.querySelector(".e-headertext").innerText;
              tCell.querySelector(".e-headertext").innerHTML = '<a data-url="' + innerText + '" class="e-hyperlinkcell ' + customClass + '">' + innerText + "</a>";
            }
          }
          if (cell.hasChild === true && !cell.isNamedSet) {
            var hdrdiv = tCell.querySelector(".e-headercelldiv");
            if (hdrdiv) {
              hdrdiv.style.height = "auto";
              hdrdiv.style.lineHeight = "normal";
            }
            var div = createElement("div", {
              className: (cell.isDrilled === true ? COLLAPSE : EXPAND) + " " + ICON,
              attrs: {
                "title": cell.isDrilled === true ? this.parent.localeObj.getConstant("collapse") : this.parent.localeObj.getConstant("expand")
              }
            });
            if (window.navigator.userAgent.indexOf("Edge") > -1 || window.navigator.userAgent.indexOf("Trident") > -1) {
              tCell.children[0].style.display = "table";
            } else {
              tCell.children[0].style.display = "block";
            }
            this.updateWrapper(tCell, div);
          } else {
            this.updateWrapper(tCell);
          }
          tCell = this.appendValueSortIcon(cell, tCell, cell.rowIndex, cell.colIndex, args.cell.column);
          if (this.parent.cellTemplate) {
            this.appendTemplate(tCell, cell);
          }
          var len = this.parent.dataSourceSettings.values.length;
          for (var vCnt = 0; vCnt < len; vCnt++) {
            if (this.parent.dataSourceSettings.values[vCnt].name === cell.actualText) {
              if (this.parent.dataType === "olap") {
                var grandTotal = this.parent.olapEngineModule.tupColumnInfo[cell.ordinal] ? this.parent.olapEngineModule.tupColumnInfo[cell.ordinal].measurePosition === 0 ? this.parent.olapEngineModule.tupColumnInfo[cell.ordinal].allStartPos === 1 : this.parent.olapEngineModule.tupColumnInfo[cell.ordinal].allStartPos === 0 : false;
                if (grandTotal) {
                  tCell.classList.add("e-gtot");
                }
              }
              if (cell.valueSort.levelName === this.parent.localeObj.getConstant("grandTotal") + this.parent.dataSourceSettings.valueSortSettings.headerDelimiter + cell.formattedText || cell.valueSort.levelName === "Grand Total" + this.parent.dataSourceSettings.valueSortSettings.headerDelimiter + cell.formattedText) {
                tCell.classList.add("e-gtot");
              } else {
                tCell.classList.add(VALUESHEADER);
              }
            }
          }
          this.unWireEvents(tCell);
          this.wireEvents(tCell);
        }
      } else {
        if (this.parent.isTabular) {
          var colSpan = this.parent.engineModule.rowMaxLevel + 1;
          if (args.cell && args.cell.column && args.cell.column.index === 0) {
            args.node.setAttribute("colspan", colSpan.toString());
            args.node.classList.add(FREEZE_LEFT_BORDER);
          } else {
            args.node.style.display = "none";
          }
        }
      }
      this.parent.trigger(headerCellInfo, args);
    };
    Render3.prototype.updateWrapper = function(tCell, div) {
      if (tCell.querySelectorAll(".e-headercelldiv").length > 0 || tCell.querySelectorAll(".e-stackedheadercelldiv").length > 0) {
        var outerDiv = createElement("div", {
          className: PIVOT_CELL_CONTAINER
        });
        var innerDiv = createElement("div", {
          className: (div ? "e-stackedheadertext" : "e-headertext") + " " + CELLVALUE,
          innerHTML: tCell.querySelectorAll(".e-headercelldiv").length > 0 ? tCell.querySelector(".e-headercelldiv").innerHTML : tCell.querySelector(".e-stackedheadercelldiv").innerHTML
        });
        if (div) {
          outerDiv.append(div);
        }
        outerDiv.append(innerDiv);
        tCell.children[0].innerHTML = "";
        tCell.children[0].append(outerDiv);
      }
      return tCell;
    };
    Render3.prototype.onOlapColumnCellBoundEvent = function(tCell, cell) {
      tCell.setAttribute("fieldname", cell.memberType === 3 ? cell.actualText.toString() : cell.hierarchy);
      var prevCell = this.engine.headerContent[cell.rowIndex] ? this.engine.headerContent[cell.rowIndex][cell.colIndex - 1] : void 0;
      if (prevCell && prevCell.actualText === cell.actualText && prevCell.type === cell.type && prevCell.colSpan > 1) {
        tCell.style.display = "none";
      } else {
      }
      if (cell.rowIndex === this.engine.headerContent.length - 1 && cell.memberType === 2) {
        tCell.style.display = this.isSpannedCell(this.engine.headerContent.length, cell) ? "none" : tCell.style.display;
      }
      return tCell;
    };
    Render3.prototype.isSpannedCell = function(colLength, currCell) {
      var prevCell = this.engine.headerContent[currCell.rowIndex - 1] ? this.engine.headerContent[currCell.rowIndex - 1][currCell.colIndex] : void 0;
      var parentCellSpan;
      var parentCellPos;
      while (prevCell && (prevCell.memberType === currCell.memberType || prevCell.type && currCell.type)) {
        if (prevCell.rowSpan > 0) {
          parentCellSpan = prevCell.rowSpan;
          parentCellPos = prevCell.rowIndex;
        }
        prevCell = this.engine.headerContent[prevCell.rowIndex - 1] ? this.engine.headerContent[prevCell.rowIndex - 1][currCell.colIndex] : void 0;
      }
      return parentCellPos + parentCellSpan >= colLength;
    };
    Render3.prototype.onHyperCellClick = function(e) {
      var cell = e.target.closest("td.e-rowcell") ? e.target.closest("td.e-rowcell") : e.target.closest("th");
      var args = {
        currentCell: cell,
        data: this.engine.pivotValues[Number(cell.getAttribute("index"))][parseInt(cell.getAttribute("aria-colindex"), 10) - 1],
        cancel: true,
        nativeEvent: e
      };
      this.parent.trigger(hyperlinkCellClick, args, function(observedArgs) {
        if (!observedArgs.cancel) {
          args.currentCell = getElement(args.currentCell);
          var url = args.currentCell.getAttribute("data-url") ? args.currentCell.getAttribute("data-url") : args.currentCell.querySelector("a").getAttribute("data-url");
          window.open(url);
        }
      });
    };
    Render3.prototype.getRowStartPos = function() {
      var pivotValues = this.parent.pivotValues;
      var rowPos;
      for (var rCnt = 0; rCnt < (pivotValues ? pivotValues.length : 0); rCnt++) {
        if (pivotValues[rCnt] && pivotValues[rCnt][0] && pivotValues[rCnt][0].axis === "row") {
          rowPos = rCnt;
          break;
        }
      }
      return rowPos;
    };
    Render3.prototype.frameDataSource = function(type) {
      var dataContent = [];
      if ((this.parent.dataType === "pivot" && this.parent.dataSourceSettings.dataSource && this.parent.engineModule.data.length > 0 || this.parent.dataType === "olap" && this.parent.dataSourceSettings.url !== "" || this.parent.dataSourceSettings.mode === "Server" && this.parent.dataSourceSettings.url !== "" && this.engine.pivotValues.length > 0) && this.parent.dataSourceSettings.values.length > 0 && !this.engine.isEmptyData) {
        if (this.parent.enableValueSorting || !this.engine.isEngineUpdated || this.gridSettings.layout === "Tabular") {
          var rowCnt = 0;
          var pivotValues = this.parent.pivotValues;
          var start = type === "value" ? this.rowStartPos : 0;
          var end = type === "value" ? pivotValues ? pivotValues.length : 0 : this.rowStartPos;
          for (var rCnt = start; rCnt < end; rCnt++) {
            if (pivotValues[rCnt]) {
              rowCnt = type === "header" ? rCnt : rowCnt;
              dataContent[rowCnt] = {};
              for (var cCnt = 0; cCnt < pivotValues[rCnt].length; cCnt++) {
                if (pivotValues[rCnt][cCnt]) {
                  dataContent[rowCnt][cCnt] = pivotValues[rCnt][cCnt];
                }
              }
              rowCnt++;
            }
          }
        } else {
          dataContent = type === "value" ? this.engine.valueContent : this.engine.headerContent;
        }
      } else {
        dataContent = this.frameEmptyData();
      }
      return dataContent;
    };
    Render3.prototype.frameEmptyData = function() {
      var dataContent = [{
        0: {
          formattedText: this.parent.localeObj.getConstant("grandTotal")
        },
        1: {
          formattedText: this.parent.localeObj.getConstant("emptyData")
        }
      }];
      return dataContent;
    };
    Render3.prototype.calculateColWidth = function(colCount) {
      if (!isNullOrUndefined(this.parent.resizedValue)) {
        this.parent.resizedValue = this.parent.showGroupingBar && this.parent.resizedValue < 250 ? 250 : this.parent.resizedValue;
      }
      this.resColWidth = !isNullOrUndefined(this.parent.resizedValue) ? this.parent.resizedValue : this.resColWidth;
      var offsetWidth = this.calculateGridWidth();
      var eleWidth = this.parent.element.getBoundingClientRect().width ? this.parent.element.getBoundingClientRect().width : this.parent.element.offsetWidth;
      var parWidth = isNaN(this.parent.width) ? this.parent.width.toString().indexOf("%") > -1 ? parseFloat(this.parent.width.toString()) / 100 * eleWidth : offsetWidth : Number(this.parent.width);
      parWidth = parWidth - (this.gridSettings.columnWidth > this.resColWidth ? this.gridSettings.columnWidth : this.parent.isTabular ? (this.parent.engineModule.rowMaxLevel + 1) * this.resColWidth : this.resColWidth);
      colCount = this.parent.isTabular ? colCount - (this.parent.engineModule.rowMaxLevel + 1) : colCount - 1;
      this.isOverflows = !(colCount * this.gridSettings.columnWidth < parWidth);
      if (!this.isOverflows) {
        var gridHeight = this.calculateGridHeight();
        var parentHeight = gridHeight === "auto" ? this.parent.getHeightAsNumber() : gridHeight;
        var headersLength = this.engine && this.engine.headerContent ? Object.keys(this.engine.headerContent).length : 1;
        var height = parentHeight - this.gridSettings.rowHeight * headersLength;
        if (this.engine && this.engine.valueContent && this.gridSettings.rowHeight * this.engine.valueContent.length > height) {
          parWidth = parWidth - getScrollBarWidth();
        }
      }
      var colWidth = colCount * this.gridSettings.columnWidth < parWidth ? parWidth / colCount : this.gridSettings.columnWidth;
      return !this.isOverflows && !this.gridSettings.allowAutoResizing ? this.gridSettings.columnWidth : colWidth;
    };
    Render3.prototype.resizeColWidth = function(colCount) {
      if (!isNullOrUndefined(this.parent.resizedValue)) {
        this.parent.resizedValue = this.parent.showGroupingBar && this.parent.resizedValue < 250 ? 250 : this.parent.resizedValue;
      }
      this.resColWidth = !isNullOrUndefined(this.parent.resizedValue) ? this.parent.resizedValue : this.resColWidth;
      var parWidth = isNaN(this.parent.width) ? this.parent.width.toString().indexOf("%") > -1 ? parseFloat(this.parent.width.toString()) / 100 * this.parent.element.offsetWidth : this.parent.element.offsetWidth : Number(this.parent.width);
      colCount = colCount - 1;
      parWidth = parWidth - (this.gridSettings.columnWidth > this.resColWidth ? this.gridSettings.columnWidth : this.resColWidth);
      this.isOverflows = !(colCount * this.gridSettings.columnWidth < parWidth);
      var colWidth = colCount * this.gridSettings.columnWidth < parWidth ? parWidth / colCount : this.gridSettings.columnWidth;
      return !this.isOverflows && !this.gridSettings.allowAutoResizing ? this.gridSettings.columnWidth : colWidth;
    };
    Render3.prototype.calculateGridWidth = function() {
      var parWidth = this.parent.width;
      var eleWidth = this.parent.element.getBoundingClientRect().width ? this.parent.element.getBoundingClientRect().width : this.parent.element.offsetWidth;
      if (eleWidth === 0) {
        eleWidth = this.parent.element.parentElement.getBoundingClientRect().width ? this.parent.element.parentElement.getBoundingClientRect().width : this.parent.element.parentElement.offsetWidth;
      }
      if (this.gridSettings.width === "auto") {
        if (this.parent.width === "auto") {
          parWidth = eleWidth;
        } else if (this.parent.width.toString().indexOf("%") > -1) {
          parWidth = parseFloat(this.parent.width.toString()) / 100 * eleWidth;
        } else if (this.parent.width.toString().indexOf("px") > -1) {
          parWidth = this.parent.width.toString().split("px")[0];
        }
      } else {
        parWidth = this.gridSettings.width;
      }
      return !this.gridSettings.allowAutoResizing && parWidth > this.parent.totColWidth ? this.parent.totColWidth : parWidth;
    };
    Render3.prototype.calculateGridHeight = function(elementCreated) {
      var contentElement = this.parent.element.querySelector("." + GRID_CLASS + " ." + CONTENT_CLASS);
      var gridHeight = this.parent.height;
      var parHeight = this.parent.getHeightAsNumber();
      if (contentElement) {
        if (isNaN(parHeight)) {
          parHeight = parHeight > this.parent.minHeight ? parHeight : this.parent.minHeight;
        } else {
          parHeight = contentElement.offsetWidth < contentElement.querySelector("." + TABLE).offsetWidth ? parHeight - getScrollBarWidth() : parHeight;
        }
        if (this.parent.showToolbar && this.parent.currentView !== "Chart" || !this.parent.showToolbar && this.parent.displayOption.view !== "Chart") {
          if (this.gridSettings.height === "auto" && parHeight && this.parent.element.querySelector("." + GRID_HEADER)) {
            var rowColHeight = this.parent.element.querySelector("." + GRID_HEADER).offsetHeight;
            var gBarHeight = rowColHeight + (this.parent.element.querySelector("." + GRID_GROUPING_BAR_CLASS) ? this.parent.element.querySelector("." + GRID_GROUPING_BAR_CLASS).offsetHeight : 0);
            var toolBarHeight = this.parent.element.querySelector("." + GRID_TOOLBAR) ? 42 : 0;
            var pagerHeight = this.parent.element.querySelector("." + GRID_PAGER) ? this.parent.element.querySelector("." + GRID_PAGER).offsetHeight : 0;
            gridHeight = parHeight - (gBarHeight + toolBarHeight + pagerHeight) - 1;
            gridHeight = gridHeight < 40 ? 40 : gridHeight;
            if (elementCreated) {
              var tableHeight = contentElement.querySelector("." + TABLE).offsetHeight;
              var contentHeight = contentElement.querySelector("." + TABLE).offsetHeight;
              var tableWidth = contentElement.querySelector("." + TABLE).offsetWidth;
              var contentWidth = contentElement.offsetWidth;
              var horizontalOverflow = contentWidth <= tableWidth;
              var commonOverflow = horizontalOverflow && gridHeight - tableHeight < 18 ? true : false;
              if (gridHeight >= tableHeight && (horizontalOverflow ? gridHeight >= contentHeight : true) && !commonOverflow) {
                this.parent.grid.height = "auto";
              } else {
                this.parent.grid.height = gridHeight;
                this.parent.grid.dataBind();
              }
            } else {
              if (gridHeight > this.engine.valueContent.length * this.gridSettings.rowHeight) {
                gridHeight = "auto";
              }
            }
          } else {
            gridHeight = this.gridSettings.height;
          }
        }
      }
      return gridHeight < this.parent.gridSettings.rowHeight ? this.parent.gridSettings.rowHeight : gridHeight;
    };
    Render3.prototype.frameStackedHeaders = function() {
      var pivotColumns = this.parent.pivotColumns;
      var engine = this.parent.dataType === "pivot" ? this.parent.engineModule : this.parent.olapEngineModule;
      var gridColumns = this.parent.grid["columnModel"];
      var autoFitApplied = false;
      var refreshColumn = this.parent.toolbarModule && this.parent.toolbarModule.isReportChange ? true : this.parent.actionObj ? this.parent.actionObj.actionName === "Sort value" && engine.valueAxis === 1 || this.parent.actionObj.actionName === "Sort field" && this.parent.actionObj.fieldInfo.axis === "columns" || this.parent.pivotFieldListModule && this.parent.pivotFieldListModule.actionObj.actionName === "Sort field" && this.parent.pivotFieldListModule.actionObj.fieldInfo.axis === "columns" : false;
      this.pivotColumns = [];
      if (((this.parent.dataType === "olap" && this.parent.dataSourceSettings.url !== "" ? true : this.parent.dataSourceSettings.values.length > 0 && this.parent.dataSourceSettings.dataSource && this.parent.engineModule.data.length > 0) || this.parent.dataSourceSettings.mode === "Server" && this.parent.dataSourceSettings.values.length > 0 && this.parent.dataSourceSettings.url !== "" && this.engine.pivotValues.length > 0) && !this.engine.isEmptyData) {
        var headerCnt = this.engine.headerContent.length;
        var headerSplit = [];
        var splitPos = [];
        var colWidth = this.calculateColWidth(this.engine.pivotValues && this.engine.pivotValues[0] ? this.engine.pivotValues[0].length : 0);
        var measureFlag = this.parent.dataType === "olap" && !isNullOrUndefined(this.engine.colMeasurePos) && this.engine.colDepth - 1 === this.parent.olapEngineModule.colMeasurePos;
        do {
          var columnModel = [];
          var actualCnt = 0;
          headerCnt--;
          var colField = this.engine.headerContent[headerCnt];
          var colCount = colField ? Object.keys(colField).length : 0;
          if (colField) {
            var colLength = this.parent.isTabular ? this.parent.engineModule.rowMaxLevel + 1 : colField[0] ? 0 : 1;
            for (var cCnt = 0, cLen = Object.keys(colField).length + colLength; cCnt < cLen; cCnt++) {
              var colSpan = colField[cCnt] && colField[cCnt].colSpan ? colField[cCnt].memberType !== 3 || colField[cCnt].memberType === 3 && !measureFlag || headerCnt === 0 ? colField[cCnt].colSpan : headerSplit[cCnt] : 1;
              colSpan = this.parent.dataType === "olap" && isNullOrUndefined(colSpan) ? 1 : colSpan;
              var formattedText = colField[cCnt] ? colField[cCnt].type === "grand sum" ? isNullOrUndefined(colField[cCnt].valueSort.axis) ? this.parent.localeObj.getConstant("grandTotal") : colField[cCnt].formattedText : colField[cCnt].type === "sum" ? colField[cCnt].formattedText.split("Total")[0] + this.parent.localeObj.getConstant("total") : colField[cCnt].formattedText : "";
              formattedText = this.parent.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(formattedText) : formattedText;
              if (headerCnt === this.engine.headerContent.length - 1) {
                colSpan = 1;
                autoFitApplied = pivotColumns.length - 1 !== colCount ? false : !refreshColumn && !this.parent.isEmptyGrid && pivotColumns[actualCnt] && pivotColumns[actualCnt].autoFit;
                columnModel[actualCnt] = {
                  field: cCnt + ".formattedText",
                  headerText: formattedText,
                  customAttributes: {
                    "cell": this.cloneDataWithoutIndex(colField[cCnt])
                  },
                  width: autoFitApplied && gridColumns[actualCnt] ? gridColumns[actualCnt].width : colField[cCnt] ? colField[cCnt].valueSort ? this.setSavedWidth(colField[cCnt].valueSort.levelName, colWidth) : this.resColWidth : this.resColWidth,
                  minWidth: autoFitApplied && actualCnt === colCount ? gridColumns[gridColumns.length - 1].minWidth : 30,
                  allowReordering: this.parent.gridSettings.allowReordering,
                  allowResizing: this.parent.gridSettings.allowResizing,
                  visible: true,
                  textAlign: this.parent.enableRtl ? "Left" : "Right",
                  headerTextAlign: this.parent.enableRtl ? "Right" : "Left"
                };
                if (cCnt === colCount) {
                  columnModel[actualCnt].width = columnModel[actualCnt].width - 3;
                  this.lastColumn = columnModel[actualCnt];
                }
              } else if (headerSplit[cCnt]) {
                var tmpSpan = colSpan;
                var innerModel = [];
                var innerPos = cCnt;
                while (tmpSpan > 0) {
                  if (columnModel[actualCnt]) {
                    if (!this.pivotColumns[splitPos[innerPos]]) {
                      break;
                    }
                    innerModel.push(this.pivotColumns[splitPos[innerPos]]);
                  } else {
                    columnModel[actualCnt] = {
                      headerText: formattedText,
                      field: colField[cCnt] ? colField[cCnt].valueSort.levelName : "",
                      customAttributes: {
                        "cell": this.cloneDataWithoutIndex(colField[cCnt])
                      },
                      width: autoFitApplied && actualCnt === 0 && !refreshColumn && !this.parent.isEmptyGrid && pivotColumns[0].autoFit ? gridColumns[0].width : colField[cCnt] ? this.setSavedWidth(colField[cCnt].valueSort.levelName, colWidth) : this.resColWidth,
                      minWidth: 30,
                      allowReordering: this.parent.gridSettings.allowReordering,
                      allowResizing: this.parent.gridSettings.allowResizing,
                      visible: true,
                      headerTextAlign: this.parent.enableRtl ? "Right" : "Left"
                    };
                    innerModel = [this.pivotColumns[splitPos[innerPos]]];
                  }
                  this.isAutoFitEnabled = this.isAutoFitEnabled ? true : autoFitApplied;
                  tmpSpan = tmpSpan - headerSplit[innerPos];
                  innerPos = innerPos + headerSplit[innerPos];
                }
                columnModel[actualCnt].columns = innerModel;
              }
              if (columnModel[actualCnt]) {
                columnModel[actualCnt].clipMode = this.gridSettings.clipMode;
              }
              headerSplit[cCnt] = colSpan;
              splitPos[cCnt] = actualCnt;
              actualCnt++;
              cCnt = cCnt + colSpan - 1;
            }
          }
          this.pivotColumns = columnModel.length > 0 ? columnModel : this.pivotColumns;
        } while (headerCnt > 0);
        if (this.parent.isTabular) {
          for (var n = 0; n < this.parent.engineModule.rowMaxLevel + 1; n++) {
            if (this.parent.showGroupingBar && !this.parent.isAdaptive) {
              var groupRowElement = this.parent.element.querySelector("." + GROUP_ROW);
              var buttonDivs = groupRowElement.querySelectorAll(".e-pvt-btn-div");
              var rowHeaderWidth = 0;
              if (this.parent.engineModule.rowMaxLevel !== buttonDivs.length - 1 && n === this.parent.engineModule.rowMaxLevel) {
                rowHeaderWidth = this.getTotalColumnWidth(buttonDivs, n);
              } else {
                if (groupRowElement.querySelectorAll(".e-pvt-btn-div").length === 1) {
                  rowHeaderWidth = 250;
                } else {
                  if (this.parent.element.getBoundingClientRect().width * 0.8 <= this.getTotalColumnWidth(buttonDivs, 0)) {
                    rowHeaderWidth = this.gridSettings.columnWidth;
                  } else {
                    var buttonWidth = groupRowElement.querySelectorAll(".e-pvt-btn-div")[n].getBoundingClientRect().width < this.parent.gridSettings.columnWidth ? this.parent.gridSettings.columnWidth : groupRowElement.querySelectorAll(".e-pvt-btn-div")[n].getBoundingClientRect().width;
                    rowHeaderWidth = buttonWidth + 6;
                  }
                }
              }
              this.pivotColumns[n] = {
                field: n + ".formattedText",
                width: rowHeaderWidth > this.gridSettings.columnWidth ? rowHeaderWidth : this.resColWidth,
                minWidth: 30,
                headerText: "",
                allowReordering: false,
                allowResizing: this.parent.gridSettings.allowResizing,
                visible: true,
                clipMode: this.parent.gridSettings.clipMode
              };
            } else {
              for (var n_1 = 0; n_1 < this.parent.engineModule.rowMaxLevel + 1; n_1++) {
                this.updatePivotColumn(this.pivotColumns, n_1, autoFitApplied, refreshColumn, gridColumns);
              }
            }
          }
        } else {
          this.updatePivotColumn(this.pivotColumns, 0, autoFitApplied, refreshColumn, gridColumns);
        }
      } else {
        this.pivotColumns = this.frameEmptyColumns();
      }
      if (this.parent.toolbarModule && this.parent.showToolbar) {
        this.parent.toolbarModule.isReportChange = false;
      }
      this.parent.triggerColumnRenderEvent(this.pivotColumns);
      autoFitApplied = this.parent.pivotColumns.length > 0 && this.parent.pivotColumns[this.parent.pivotColumns.length - 1].autoFit;
      return this.pivotColumns;
    };
    Render3.prototype.setSavedWidth = function(column, width) {
      if (column === "0.formattedText" && !isNullOrUndefined(this.parent.resizedValue)) {
        width = this.parent.resizedValue;
      } else {
        if (this.parent.isTabular && this.parent.element.querySelector("." + ROW_CLASS).querySelector("." + ROWCELL) && this.parent.showGroupingBar && column === "0.formattedText" && this.parent.dataSourceSettings.values.length === 0) {
          var rowHeaderWidth = 0;
          var buttonDivs = this.parent.element.querySelector("." + GROUP_ROW).querySelectorAll(".e-pvt-btn-div");
          for (var i = 0; i < buttonDivs.length; i++) {
            rowHeaderWidth += buttonDivs[i].getBoundingClientRect().width + 6;
          }
          width = rowHeaderWidth;
        }
        width = this.parent.resizeInfo[column] ? this.parent.resizeInfo[column] : width;
      }
      return width;
    };
    Render3.prototype.frameEmptyColumns = function() {
      var columns = [];
      var colWidth = this.calculateColWidth(2);
      columns.push({
        field: "0.formattedText",
        headerText: "",
        minWidth: 30,
        width: this.resColWidth
      });
      columns.push({
        field: "1.formattedText",
        headerText: this.parent.localeObj.getConstant("grandTotal"),
        minWidth: 30,
        width: colWidth - 3
      });
      return columns;
    };
    Render3.prototype.getFormatList = function() {
      var formatArray = {};
      for (var vCnt = 0; vCnt < this.parent.dataSourceSettings.values.length; vCnt++) {
        var field = this.parent.dataSourceSettings.values[vCnt];
        var format = "N";
        if (this.parent.dataType === "olap") {
          if (this.parent.olapEngineModule.fieldList[field.name] && !isNullOrUndefined(this.parent.olapEngineModule.fieldList[field.name].formatString)) {
            var fString = this.parent.olapEngineModule.formatFields[field.name] ? this.parent.olapEngineModule.formatFields[field.name].format : this.parent.olapEngineModule.fieldList[field.name].formatString;
            fString = fString === "Standard" ? "Number" : fString;
            format = fString.indexOf("#") > -1 || fString.match(/\d/) !== null ? fString : fString[0] + "2";
          }
        } else {
          if (["PercentageOfDifferenceFrom", "PercentageOfRowTotal", "PercentageOfColumnTotal", "PercentageOfGrandTotal", "PercentageOfParentRowTotal", "PercentageOfParentColumnTotal", "PercentageOfParentTotal"].indexOf(field.type) > -1) {
            format = "P2";
          } else if (["PopulationStDev", "SampleStDev", "PopulationVar", "SampleVar", "Index"].indexOf(field.type) > -1) {
            format = void 0;
          }
          if (this.parent.dataSourceSettings.formatSettings.length > 0) {
            for (var fCnt = 0; fCnt < this.parent.dataSourceSettings.formatSettings.length; fCnt++) {
              var formatSettings = this.parent.dataSourceSettings.formatSettings[fCnt];
              if (field.name === formatSettings.name) {
                format = formatSettings.format;
                break;
              } else {
                continue;
              }
            }
          }
        }
        formatArray[field.name] = format;
      }
      return formatArray;
    };
    Render3.prototype.getValidHeader = function(args, axis) {
      var values = this.parent.dataSourceSettings.values;
      var cellValue;
      if (axis === "row") {
        var cellInfo = args;
        if (this.parent.dataSourceSettings.rows.length === 0 || this.parent.dataSourceSettings.columns.length === 0) {
          if (this.parent.dataSourceSettings.rows.length === 0 && this.parent.dataSourceSettings.valueAxis === "row" && this.parent.localeObj.getConstant("grandTotal") + this.parent.dataSourceSettings.valueSortSettings.headerDelimiter + cellInfo.value === cellInfo.data[0].valueSort.levelName) {
            return this.parent.localeObj.getConstant("total") + " " + this.parent.localeObj.getConstant(this.parent.engineModule.fieldList[cellInfo.value.toString()].aggregateType) + " " + this.parent.localeObj.getConstant("of") + " " + cellInfo.value.toString();
          } else if (values.length === 1 && this.parent.dataSourceSettings.rows.length === 0) {
            return this.parent.localeObj.getConstant("total") + " " + this.parent.localeObj.getConstant(values[values.length - 1].type) + " " + this.parent.localeObj.getConstant("of") + " " + (!isNullOrUndefined(values[values.length - 1].caption) ? values[values.length - 1].caption : values[values.length - 1].name);
          }
        }
        cellValue = cellInfo.value;
      } else if (axis === "column") {
        var cellInfo = args;
        if (this.parent.dataSourceSettings.rows.length === 0 || this.parent.dataSourceSettings.columns.length === 0) {
          if (!isNullOrUndefined(args.gridCell.column.customAttributes) && this.parent.dataSourceSettings.columns.length === 0 && this.parent.dataSourceSettings.valueAxis === "column" && this.parent.localeObj.getConstant("grandTotal") + this.parent.dataSourceSettings.valueSortSettings.headerDelimiter + cellInfo.gridCell.column.customAttributes.cell.formattedText === cellInfo.gridCell.column.customAttributes.cell.valueSort.levelName) {
            return this.parent.localeObj.getConstant("total") + " " + this.parent.localeObj.getConstant(this.parent.engineModule.fieldList[cellInfo.gridCell.column.customAttributes.cell.actualText].aggregateType) + " " + this.parent.localeObj.getConstant("of") + " " + cellInfo.gridCell.column.customAttributes.cell.formattedText;
          }
        }
        cellValue = cellInfo.cell.value;
      }
      return cellValue;
    };
    Render3.prototype.excelColumnEvent = function(args) {
      if (this.parent.dataSourceSettings.columns.length === 0 && this.parent.dataSourceSettings.valueAxis === "column") {
        args.cell.value = this.getValidHeader(args, "column");
      }
      if (args.gridCell !== void 0 && args.gridCell.column.width === "auto") {
        this.parent.lastColumn = args.gridCell.column;
        args.gridCell.column.width = args.gridCell.column.minWidth;
      }
      args = this.exportHeaderEvent(args, "XLSX");
      this.parent.trigger(excelHeaderQueryCellInfo, args);
    };
    Render3.prototype.pdfColumnEvent = function(args) {
      if (this.parent.dataSourceSettings.columns.length === 0 && this.parent.dataSourceSettings.valueAxis === "column") {
        args.cell.value = this.getValidHeader(args, "column");
      }
      if (args.gridCell !== void 0 && args.gridCell.column.width === "auto") {
        this.parent.lastColumn = args.gridCell.column;
        args.gridCell.column.width = args.gridCell.column.minWidth;
      }
      if (args.gridCell.column.index === 0) {
        args.cell.colSpan = this.parent.isTabular ? this.parent.engineModule.rowMaxLevel + 1 : 1;
      }
      this.parent.trigger(pdfHeaderQueryCellInfo, args);
    };
    Render3.prototype.excelRowEvent = function(args) {
      var pivotValue;
      var rowMaxLevel = this.parent.isTabular ? this.parent.engineModule.rowMaxLevel : 0;
      var colIndex = args.column ? args.column.index : void 0;
      if (colIndex >= 0 && colIndex <= rowMaxLevel) {
        var cell = args.data[colIndex];
        var isValueCell = cell.type && cell.type === "value";
        var level = 0;
        if (this.parent.dataType === "olap") {
          level = this.indentCollection[cell.rowIndex];
        } else {
          var levelName = cell.valueSort ? cell.valueSort.levelName.toString() : "";
          var memberPos = cell.actualText ? cell.actualText.toString().split(this.parent.dataSourceSettings.valueSortSettings.headerDelimiter).length : 0;
          var levelPosition = levelName.split(this.parent.dataSourceSettings.valueSortSettings.headerDelimiter).length - (memberPos ? memberPos - 1 : memberPos);
          level = levelPosition ? levelPosition - 1 : 0;
        }
        this.colPos = 0;
        args.style = {
          hAlign: "Left",
          indent: level * 2
        };
        this.lastSpan = isValueCell ? this.lastSpan : level;
        if ((args.data[colIndex].rowSpan === 0 || args.data[colIndex].colSpan === 0) && this.parent.exportType === "CSV" && this.parent.isTabular) {
          args.value = "";
        }
      } else {
        this.colPos++;
        pivotValue = args.data[args.column.customAttributes.cell ? args.column.customAttributes.cell.colIndex : this.colPos];
        if (isNullOrUndefined(pivotValue.value) || isNullOrUndefined(pivotValue.formattedText) || pivotValue.formattedText === "") {
          args.value = this.parent.exportType === "Excel" ? null : "";
        } else {
          var aggMatrix = this.parent.dataType === "pivot" && this.parent.engineModule ? this.parent.engineModule.aggregatedValueMatrix : void 0;
          if (aggMatrix && aggMatrix[pivotValue.rowIndex] && aggMatrix[pivotValue.rowIndex][pivotValue.colIndex]) {
            args.value = aggMatrix[pivotValue.rowIndex][pivotValue.colIndex];
          } else {
            args.value = !isNullOrUndefined(pivotValue.value) ? pivotValue.formattedText === "#DIV/0!" ? pivotValue.formattedText : pivotValue.value : pivotValue.formattedText;
          }
        }
      }
      args = this.exportContentEvent(args);
      if (this.parent.dataSourceSettings.rows.length === 0 && this.parent.dataSourceSettings.valueAxis === "row") {
        args.value = args.column.field === "0.formattedText" ? this.getValidHeader(args, "row") : args.value;
      }
      this.parent.trigger(excelQueryCellInfo, args);
      if (pivotValue && !isNullOrUndefined(args.value) && args.value !== "") {
        if (args.style && this.formatList[pivotValue.actualText]) {
          args.style.type = "number";
          args.style.numberFormat = args.style.numberFormat ? args.style.numberFormat : this.formatList[pivotValue.actualText];
        } else if (this.formatList[pivotValue.actualText]) {
          args.style = {
            numberFormat: this.formatList[pivotValue.actualText]
          };
        }
        args.column.format = this.formatList[pivotValue.actualText];
      }
    };
    Render3.prototype.pdfRowEvent = function(args) {
      args = this.exportContentEvent(args);
      if (args.column.field === "0.formattedText") {
        var level = 0;
        var cell = args.data[0];
        var isValueCell = cell.type && cell.type === "value";
        if (this.parent.dataType === "olap") {
          level = this.indentCollection[cell.rowIndex];
        } else {
          var levelName = cell.valueSort ? cell.valueSort.levelName.toString() : "";
          var memberPos = cell.actualText ? cell.actualText.toString().split(this.parent.dataSourceSettings.valueSortSettings.headerDelimiter).length : 0;
          var levelPosition = levelName.split(this.parent.dataSourceSettings.valueSortSettings.headerDelimiter).length - (memberPos ? memberPos - 1 : memberPos);
          level = levelPosition ? levelPosition - 1 : 0;
        }
        args.style = {
          paragraphIndent: level * 10
        };
        this.lastSpan = isValueCell ? this.lastSpan : level;
        if (this.parent.dataSourceSettings.rows.length === 0 && this.parent.dataSourceSettings.valueAxis === "row") {
          args.value = this.getValidHeader(args, "row");
        }
      }
      this.parent.trigger(pdfQueryCellInfo, args);
    };
    Render3.prototype.excelDataBound = function(args) {
      var excelRows = args.excelRows;
      var rowStartPos = Object.keys(this.engine.headerContent).length;
      for (var i = 0; i < rowStartPos; i++) {
        var cells = excelRows[i].cells;
        var tmpCell = [];
        for (var j = 0; j < cells.length; j++) {
          if (cells[j].rowSpan !== -1) {
            tmpCell.push(cells[j]);
          }
        }
        excelRows[i].cells = tmpCell;
      }
    };
    Render3.prototype.exportHeaderEvent = function(args, exportType) {
      var rowSpan = 1;
      if (args.gridCell.column.customAttributes) {
        var cell = args.gridCell.column.customAttributes.cell;
        rowSpan = cell.rowSpan > 0 ? cell.rowSpan : 1;
        if (exportType === "XLSX") {
          if (cell.rowSpan > 0) {
            rowSpan = cell.rowSpan;
          } else if (!isNullOrUndefined(cell.type) && cell.level !== 0) {
            rowSpan = 1;
            args.cell.rowSpan = 1;
          }
        }
        this.actualText = cell.actualText;
      } else {
        rowSpan = Object.keys(this.engine.headerContent).length;
      }
      if (args.cell.rowSpan !== rowSpan && rowSpan > 0) {
        args.cell.rowSpan = rowSpan;
      }
      return args;
    };
    Render3.prototype.frameGridDataSource = function(actualData) {
      var framedDataSource = [];
      for (var i = 0; i < actualData.length; i++) {
        var keyPos = 0;
        framedDataSource[i] = {};
        var keys = Object.keys(actualData[i]);
        for (var j = 0; actualData[i] != null && j < keys.length; j++) {
          while (keyPos < keys.length) {
            framedDataSource[i][Number(keys[keyPos])] = this.cloneDataWithoutIndex(actualData[i][Number(keys[keyPos])]);
            keyPos++;
          }
        }
      }
      return framedDataSource;
    };
    Render3.prototype.cloneDataWithoutIndex = function(data) {
      if (!isNullOrUndefined(data)) {
        var keys = Object.keys(data);
        var keyPos = 0;
        var clonedData = {};
        while (keyPos < keys.length) {
          if (keys[keyPos] !== "indexObject" && keys[keyPos] !== "index") {
            clonedData[keys[keyPos]] = data[keys[keyPos]];
          }
          keyPos++;
        }
        return clonedData;
      }
      return data;
    };
    Render3.prototype.exportContentEvent = function(args) {
      var cell = args.data[Number(args.column.field.split(".formattedText")[0])];
      if (cell.rowSpan > 0 && cell.axis === "row") {
        args.cell.rowSpan = cell.rowSpan;
      }
      if (cell.colSpan > 0 && cell.axis === "row") {
        args.colSpan = cell.colSpan;
      }
      args.value = cell.type === "grand sum" ? isNullOrUndefined(cell.valueSort.axis) ? this.parent.localeObj.getConstant("grandTotal") : cell.formattedText : args.value;
      return args;
    };
    Render3.prototype.unWireEvents = function(cell) {
      if (cell.querySelector(".e-hyperlinkcell")) {
        EventHandler.remove(cell.querySelector(".e-hyperlinkcell"), this.parent.isAdaptive ? "touchend" : "click", this.onHyperCellClick);
      } else {
        return;
      }
    };
    Render3.prototype.wireEvents = function(cell) {
      if (cell.querySelector(".e-hyperlinkcell")) {
        EventHandler.add(cell.querySelector(".e-hyperlinkcell"), this.parent.isAdaptive ? "touchend" : "click", this.onHyperCellClick, this);
      } else {
        return;
      }
    };
    Render3.prototype.setSpanAttributes = function(attrName, spanValue, element) {
      element.setAttribute(attrName, spanValue ? spanValue.toString() : "1");
      element.classList.add(ROWSHEADER, FREEZE_LEFT_BORDER, TABULAR_LAYOUT_HEADER);
      if (spanValue === 0) {
        element.classList.add(ICON_DISABLE);
      }
    };
    Render3.prototype.updatePivotColumn = function(pivotColumns, n, autoFitApplied, refreshColumn, gridColumns) {
      pivotColumns[n] = {
        field: n + ".formattedText",
        width: autoFitApplied && !refreshColumn && !this.parent.isEmptyGrid && pivotColumns[n].autoFit ? gridColumns[n].width : this.resColWidth,
        minWidth: 30,
        headerText: "",
        allowReordering: false,
        allowResizing: this.parent.gridSettings.allowResizing,
        visible: true,
        clipMode: this.parent.gridSettings.clipMode
      };
    };
    Render3.prototype.getTotalColumnWidth = function(buttonDivs, n) {
      var totalColumnWidth = 0;
      for (var i = n; i < buttonDivs.length; i++) {
        var buttonWidth = buttonDivs[i].getBoundingClientRect().width < this.parent.gridSettings.columnWidth ? this.parent.gridSettings.columnWidth : buttonDivs[i].getBoundingClientRect().width;
        totalColumnWidth += buttonWidth + 6;
      }
      return totalColumnWidth;
    };
    return Render3;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/common/actions/keyboard.js
var CommonKeyboardInteraction = (
  /** @class */
  function() {
    function CommonKeyboardInteraction2(parent) {
      this.keyConfigs = {
        shiftF: "shift+F",
        shiftS: "shift+S",
        shiftE: "shift+E",
        delete: "delete",
        enter: "enter",
        escape: "escape",
        upArrow: "upArrow",
        downArrow: "downArrow",
        altJ: "alt+J"
      };
      this.parent = parent;
      this.parent.element.tabIndex = this.parent.element.tabIndex === -1 ? 0 : this.parent.element.tabIndex;
      this.keyboardModule = new KeyboardEvents(this.parent.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
    }
    CommonKeyboardInteraction2.prototype.keyActionHandler = function(e) {
      switch (e.action) {
        case "shiftF":
          this.processFilter(e);
          break;
        case "shiftS":
          this.processSort(e);
          break;
        case "shiftE":
          this.processEdit(e);
          break;
        case "delete":
          this.processDelete(e);
          break;
        case "enter":
          this.processEnter(e);
          break;
        case "escape":
          this.processClose(e);
          break;
        case "upArrow":
        case "downArrow":
          this.processFilterNodeSelection(e);
          break;
        case "altJ":
          this.processComponentFocus(e);
      }
    };
    CommonKeyboardInteraction2.prototype.processComponentFocus = function(e) {
      if (this.parent.element) {
        this.parent.element.focus();
        e.stopPropagation();
        e.preventDefault();
        return;
      }
    };
    CommonKeyboardInteraction2.prototype.getButtonElement = function(target) {
      var allPivotButtons = [].slice.call(this.parent.element.querySelectorAll("." + PIVOT_BUTTON_CLASS));
      for (var i = 0, len = allPivotButtons.length; i < len; i++) {
        if (allPivotButtons[i].getAttribute("data-uid") === target.getAttribute("data-uid")) {
          return allPivotButtons[i];
        }
      }
      return target;
    };
    CommonKeyboardInteraction2.prototype.processEnter = function(e) {
      var target = e.target;
      if (target && closest(target, "." + PIVOT_BUTTON_CLASS)) {
        if (target.querySelector("." + AXISFIELD_ICON_CLASS) && closest(target, "." + VALUE_AXIS_CLASS)) {
          target.querySelector("." + AXISFIELD_ICON_CLASS).click();
        } else if (target.querySelector("." + CALC_EDIT)) {
          target.querySelector("." + CALC_EDIT).click();
        } else if (target.querySelector("." + SORT_CLASS) && !closest(target, "." + VALUE_AXIS_CLASS) && !closest(target, "." + AXIS_FILTER_CLASS)) {
          target.querySelector("." + SORT_CLASS).click();
          this.getButtonElement(target).focus();
        } else if (target.querySelector("." + FILTER_COMMON_CLASS) && !closest(target, "." + VALUE_AXIS_CLASS)) {
          target.querySelector("." + FILTER_COMMON_CLASS).click();
        }
        e.preventDefault();
        return;
      }
    };
    CommonKeyboardInteraction2.prototype.processSort = function(e) {
      var target = e.target;
      if (target && closest(target, "." + PIVOT_BUTTON_CLASS) && target.querySelector("." + SORT_CLASS) && !closest(target, "." + VALUE_AXIS_CLASS) && !closest(target, "." + AXIS_FILTER_CLASS)) {
        target.querySelector("." + SORT_CLASS).click();
        this.getButtonElement(target).focus();
        e.preventDefault();
        return;
      }
    };
    CommonKeyboardInteraction2.prototype.processEdit = function(e) {
      var target = e.target;
      if (target && closest(target, "." + PIVOT_BUTTON_CLASS) && target.querySelector("." + CALC_EDIT)) {
        target.querySelector("." + CALC_EDIT).click();
        e.preventDefault();
        return;
      }
    };
    CommonKeyboardInteraction2.prototype.processFilter = function(e) {
      var target = e.target;
      if (target && closest(target, "." + PIVOT_BUTTON_CLASS) && target.querySelector("." + FILTER_COMMON_CLASS) && !closest(target, "." + VALUE_AXIS_CLASS)) {
        target.querySelector("." + FILTER_COMMON_CLASS).click();
        if (this.parent && this.parent.control && this.parent.moduleName === "pivotview" && this.parent.control.grid && this.parent.control.showGroupingBar && this.parent.control.groupingBarModule && closest(target, "." + GROUP_ROW_CLASS) && this.parent.filterDialog && this.parent.filterDialog.dialogPopUp && !this.parent.filterDialog.dialogPopUp.isDestroyed && this.parent.filterDialog.dialogPopUp.element) {
          var dialogElement_1 = this.parent.filterDialog.dialogPopUp.element;
          var isExcelFilter_1 = this.parent.filterDialog.allowExcelLikeFilter;
          clearTimeout(this.timeOutObj);
          this.timeOutObj = setTimeout(function() {
            if (dialogElement_1 && dialogElement_1.classList.contains("e-popup-open")) {
              if (isExcelFilter_1 && dialogElement_1.querySelector(".e-dlg-closeicon-btn")) {
                dialogElement_1.querySelector(".e-dlg-closeicon-btn").focus();
              } else if (dialogElement_1.querySelector("input")) {
                dialogElement_1.querySelector("input").focus();
              }
            }
          });
        }
        e.preventDefault();
        return;
      }
    };
    CommonKeyboardInteraction2.prototype.processFilterNodeSelection = function(e) {
      var target = e.target;
      if (target && closest(target, "." + SELECT_ALL_CLASS) && e.keyCode === 40) {
        var memberEditorTree = closest(target, "." + EDITOR_TREE_WRAPPER_CLASS).querySelector("." + EDITOR_TREE_CONTAINER_CLASS);
        if (memberEditorTree && memberEditorTree.querySelector("li")) {
          var firstLi = memberEditorTree.querySelector("li");
          if (memberEditorTree.querySelector("li#_active")) {
            removeClass([memberEditorTree.querySelector("li#_active")], ["e-node-focus"]);
            memberEditorTree.querySelector("li#_active").removeAttribute("id");
          }
          firstLi.setAttribute("id", "_active");
          addClass([firstLi], ["e-node-focus"]);
          firstLi.focus();
          e.preventDefault();
          return;
        }
      } else if (target && closest(target, "." + EDITOR_TREE_CONTAINER_CLASS) && e.keyCode === 38) {
        var memberEditorTree = closest(target, "." + EDITOR_TREE_CONTAINER_CLASS);
        if (memberEditorTree.querySelector("li#_active.e-node-focus") && memberEditorTree.querySelector("li") && memberEditorTree.querySelector("li").classList.contains("e-prev-active-node") && memberEditorTree.querySelector("li") === memberEditorTree.querySelector("li#_active.e-node-focus")) {
          removeClass(memberEditorTree.querySelectorAll("li.e-prev-active-node"), "e-prev-active-node");
          var allMemberEditorTree = closest(target, "." + EDITOR_TREE_WRAPPER_CLASS).querySelector("." + SELECT_ALL_CLASS);
          if (allMemberEditorTree && allMemberEditorTree.querySelector("li")) {
            var firstLi = allMemberEditorTree.querySelector("li");
            firstLi.setAttribute("id", "_active");
            addClass([firstLi], ["e-node-focus"]);
            firstLi.focus();
            e.preventDefault();
            return;
          }
        }
      } else if (target && target.id === this.parent.parentID + "_inputbox") {
        if (e.action === "upArrow") {
          target.parentElement.querySelector(".e-spin-up").click();
        } else if (e.action === "downArrow") {
          target.parentElement.querySelector(".e-spin-down").click();
        }
      }
    };
    CommonKeyboardInteraction2.prototype.processDelete = function(e) {
      var target = e.target;
      if (target && closest(target, "." + PIVOT_BUTTON_CLASS) && target.querySelector("." + REMOVE_CLASS)) {
        target.querySelector("." + REMOVE_CLASS).click();
        e.preventDefault();
        return;
      }
    };
    CommonKeyboardInteraction2.prototype.processClose = function(e) {
      var target = e.target;
      if (target && closest(target, ".e-popup.e-popup-open")) {
        var dialogInstance = getInstance(closest(target, ".e-popup.e-popup-open"), Dialog);
        if (dialogInstance && !dialogInstance.closeOnEscape) {
          var button = dialogInstance.element.getAttribute("data-fieldName");
          dialogInstance.hide();
          if (this.parent.element) {
            var pivotButtons = [].slice.call(this.parent.element.querySelectorAll(".e-pivot-button"));
            for (var _i = 0, pivotButtons_1 = pivotButtons; _i < pivotButtons_1.length; _i++) {
              var item = pivotButtons_1[_i];
              if (item.getAttribute("data-uid") === button) {
                item.focus();
                break;
              }
            }
          }
          e.preventDefault();
          return;
        }
      }
    };
    CommonKeyboardInteraction2.prototype.destroy = function() {
      if (this.keyboardModule) {
        this.keyboardModule.destroy();
        this.keyboardModule = null;
      } else {
        return;
      }
    };
    return CommonKeyboardInteraction2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/common/actions/event-base.js
var EventBase = (
  /** @class */
  function() {
    function EventBase2(parent) {
      this.searchListItem = [];
      this.parent = parent;
    }
    EventBase2.prototype.updateSorting = function(args) {
      if (!args.target.classList.contains(FILTER_COMMON_CLASS) && !args.target.classList.contains(REMOVE_CLASS)) {
        if (this.parent.filterDialog.dialogPopUp) {
          this.parent.filterDialog.dialogPopUp.close();
        }
        var target = args.target;
        var fieldName = void 0;
        var checkisDescending = void 0;
        var isDescending = void 0;
        if (target.id) {
          fieldName = target.getAttribute("data-uid");
          checkisDescending = [].slice.call(target.querySelectorAll("." + SORT_DESCEND_CLASS));
        } else {
          fieldName = target.parentElement.getAttribute("data-uid");
          checkisDescending = [].slice.call(target.parentElement.querySelectorAll("." + SORT_DESCEND_CLASS));
        }
        if (checkisDescending.length === 0) {
          isDescending = false;
        } else {
          isDescending = true;
        }
        var sortObj = PivotUtil.getFieldByName(fieldName, this.parent.dataSourceSettings.sortSettings);
        var addMembersOrder = this.parent.engineModule && this.parent.engineModule.fieldList[fieldName] && this.parent.engineModule.fieldList[fieldName].membersOrder ? this.parent.engineModule.fieldList[fieldName].membersOrder.slice() : [];
        if (!isNullOrUndefined(sortObj)) {
          for (var i = 0; i < this.parent.dataSourceSettings.sortSettings.length; i++) {
            if (this.parent.dataSourceSettings.sortSettings[i].name === fieldName) {
              this.parent.dataSourceSettings.sortSettings.splice(i, 1);
              break;
            }
          }
          var newSortObj = {
            name: fieldName,
            order: isDescending ? "Ascending" : "Descending",
            membersOrder: sortObj ? sortObj.membersOrder : addMembersOrder
          };
          this.parent.dataSourceSettings.sortSettings.push(newSortObj);
        } else {
          var newSortObj = {
            name: fieldName,
            order: isDescending ? "Ascending" : "Descending",
            membersOrder: sortObj ? sortObj.membersOrder : addMembersOrder
          };
          this.parent.dataSourceSettings.sortSettings.push(newSortObj);
        }
        this.parent.control.lastSortInfo = this.parent.dataSourceSettings.sortSettings[this.parent.dataSourceSettings.sortSettings.length - 1];
        if (isDescending) {
          removeClass([target], SORT_DESCEND_CLASS);
        } else {
          addClass([target], SORT_DESCEND_CLASS);
        }
      }
    };
    EventBase2.prototype.updateFiltering = function(args) {
      var target = args.target;
      var fieldName = target.parentElement.getAttribute("data-uid");
      var fieldCaption = target.parentElement.textContent;
      var isInclude = false;
      var filterItems = [];
      var treeData = [];
      if (this.parent.dataSourceSettings.allowMemberFilter) {
        if (this.parent.dataType === "olap") {
          treeData = this.getOlapData(fieldName, isInclude);
        } else {
          var fieldInfo = this.parent.engineModule.fieldList[fieldName];
          var members = PivotUtil.getClonedData(fieldInfo.dateMember);
          this.parent.isDateField = PivotUtil.isDateField(fieldName, this.parent.engineModule);
          var membersInfo = fieldInfo && fieldInfo.membersOrder ? fieldInfo.membersOrder.slice() : [];
          var outOfRange = void 0;
          if (members[0].actualText === "Out of Range") {
            outOfRange = members[0];
            members.splice(0, 1);
          } else if (members[members.length - 1].actualText === "Out of Range") {
            outOfRange = members[members.length - 1];
            members.splice(members.length - 1, 1);
          }
          var sortDetails = {
            fieldName,
            sortOrder: fieldInfo.sort,
            members: membersInfo && membersInfo.length > 0 ? membersInfo : Object.keys(members),
            IsOrderChanged: false
          };
          var isHeaderSortByDefault = false;
          var sortType = fieldInfo && fieldInfo.isAlphanumeric ? true : void 0;
          if (membersInfo && membersInfo.length > 0) {
            members = PivotUtil.applyCustomSort(sortDetails, members, sortType);
          } else {
            var groupField = this.parent.dataSourceSettings.groupSettings.filter(function(field) {
              return field.name === fieldName && field.type.toLocaleLowerCase() === "number";
            });
            var isNumberGroupSorting = !isNullOrUndefined(groupField) && groupField.length > 0 ? true : false;
            members = PivotUtil.applyHeadersSort(members, sortDetails.sortOrder, sortType, isNumberGroupSorting);
            isHeaderSortByDefault = true;
          }
          var filterObj = PivotUtil.getFilterItemByName(fieldName, this.parent.dataSourceSettings.filterSettings);
          if (!isNullOrUndefined(filterObj)) {
            isInclude = this.isValidFilterItemsAvail(fieldName, filterObj) && filterObj.type === "Include" ? true : false;
            filterItems = filterObj.items ? filterObj.items : [];
          }
          if (outOfRange) {
            if (sortDetails.sortOrder === "Ascending") {
              if (members[members.length - 1].actualText === "Grand Total") {
                members.splice(members.length - 1, 0, outOfRange);
              } else {
                members.splice(members.length, 0, outOfRange);
              }
            } else {
              if (members[0].actualText === "Grand Total") {
                members.splice(1, 0, outOfRange);
              } else {
                members.splice(0, 0, outOfRange);
              }
            }
          }
          if (isHeaderSortByDefault) {
            var copyOrder = [];
            for (var m = 0, n = 0; m < members.length; m++) {
              if (members[m].actualText !== "Grand Total") {
                copyOrder[n++] = members[m].actualText;
              }
            }
            sortDetails.members = copyOrder;
          }
          this.parent.control.trigger(onHeadersSort, sortDetails);
          if (sortDetails.IsOrderChanged) {
            members = PivotUtil.applyCustomSort(sortDetails, members, sortType, true);
          }
          treeData = this.getTreeData(isInclude, members, filterItems, fieldName);
        }
      }
      if (this.parent.filterDialog.dialogPopUp) {
        this.parent.filterDialog.dialogPopUp.close();
      }
      var popupTarget = this.parent.control.filterTargetID;
      if (isNullOrUndefined(popupTarget)) {
        popupTarget = this.parent.moduleName !== "pivotfieldlist" ? this.parent.element : document.getElementById(this.parent.parentID + "_Container");
      }
      this.parent.filterDialog.createFilterDialog(treeData, fieldName, fieldCaption, popupTarget);
    };
    EventBase2.prototype.isValidFilterItemsAvail = function(fieldName, filterObj) {
      var isItemAvail = false;
      var filterTypes = ["Include", "Exclude"];
      if (filterObj && filterTypes.indexOf(filterObj.type) >= 0) {
        if (filterObj.type === "Include" && filterObj.items.length === 0) {
          isItemAvail = true;
        } else {
          var engineModule = this.parent.engineModule;
          var field = engineModule.fieldList[fieldName];
          var members = void 0;
          if (this.parent.dataSourceSettings.mode === "Server") {
            members = field.members;
          } else {
            members = this.parent.dataType === "olap" ? field.members : PivotUtil.getFormattedMembers(field.members, fieldName, engineModule);
          }
          for (var _i = 0, _a = filterObj.items; _i < _a.length; _i++) {
            var item = _a[_i];
            if (members[item]) {
              isItemAvail = true;
              break;
            }
          }
        }
      }
      return isItemAvail;
    };
    EventBase2.prototype.getOlapData = function(fieldName, isInclude) {
      var treeData = [];
      var filterItems = [];
      this.parent.filterDialog.isSearchEnabled = false;
      var updatedTreeData = [];
      var engineModule = this.parent.engineModule;
      var filterObj = PivotUtil.getFilterItemByName(fieldName, this.parent.dataSourceSettings.filterSettings);
      if (engineModule.fieldList[fieldName].filterMembers.length === 0) {
        if (!this.parent.control.loadOnDemandInMemberEditor) {
          engineModule.getMembers(this.parent.dataSourceSettings, fieldName, true);
        } else if (filterObj && filterObj.levelCount > 1 && engineModule.fieldList[fieldName].levels.length > 1) {
          engineModule.getFilterMembers(this.parent.dataSourceSettings, fieldName, filterObj.levelCount);
        } else {
          engineModule.fieldList[fieldName].levelCount = 1;
          engineModule.getMembers(this.parent.dataSourceSettings, fieldName);
        }
      } else {
        engineModule.fieldList[fieldName].currrentMembers = {};
        engineModule.fieldList[fieldName].searchMembers = [];
      }
      var isHierarchy = engineModule.fieldList[fieldName].isHierarchy;
      treeData = engineModule.fieldList[fieldName].filterMembers;
      if (!isNullOrUndefined(filterObj)) {
        isInclude = filterObj.type ? filterObj.type === "Include" ? true : false : true;
        filterItems = filterObj.items ? filterObj.items : [];
      }
      var filterItemObj = {};
      var dummyfilterItems = {};
      var memberObject = engineModule.fieldList[fieldName].members;
      for (var _i = 0, filterItems_1 = filterItems; _i < filterItems_1.length; _i++) {
        var item = filterItems_1[_i];
        filterItemObj[item] = item;
        dummyfilterItems[item] = item;
        if (memberObject[item]) {
          dummyfilterItems = this.getParentNode(fieldName, item, dummyfilterItems);
        }
      }
      treeData = this.getFilteredTreeNodes(fieldName, treeData, dummyfilterItems, updatedTreeData);
      treeData = this.getOlapTreeData(isInclude, PivotUtil.getClonedData(treeData), filterItemObj, fieldName, isHierarchy);
      treeData = this.sortOlapFilterData(treeData, engineModule.fieldList[fieldName].sort);
      return treeData;
    };
    EventBase2.prototype.sortOlapFilterData = function(treeData, order) {
      if (treeData.length > 0) {
        var isHeaderSortByDefault = false;
        var members = [];
        for (var i = 0; i < treeData.length; i++) {
          members.push(treeData[i].caption);
        }
        var fieldName = treeData[0].caption !== "Grand Total" || treeData[0].caption === void 0 ? treeData[0].htmlAttributes["data-fieldName"] : treeData[1].htmlAttributes["data-fieldName"];
        var engineModule = this.parent.engineModule;
        var fieldInfo = engineModule.fieldList[fieldName];
        var membersInfo = fieldInfo && fieldInfo.membersOrder ? fieldInfo.membersOrder.slice() : [];
        var sortDetails = {
          fieldName,
          sortOrder: order,
          members: membersInfo && membersInfo.length > 0 ? membersInfo : members,
          IsOrderChanged: false
        };
        if (membersInfo && membersInfo.length > 0) {
          this.applyFilterCustomSort(treeData, sortDetails);
        } else {
          treeData = order === "Ascending" ? treeData.sort(function(a, b) {
            return a.caption > b.caption ? 1 : b.caption > a.caption ? -1 : 0;
          }) : order === "Descending" ? treeData.sort(function(a, b) {
            return a.caption < b.caption ? 1 : b.caption < a.caption ? -1 : 0;
          }) : treeData;
          isHeaderSortByDefault = true;
        }
        if (isHeaderSortByDefault) {
          var copyOrder = [];
          for (var m = 0, n = 0; m < treeData.length; m++) {
            if (treeData[m].caption !== "Grand Total") {
              copyOrder[n++] = treeData[m].caption;
            }
          }
          sortDetails.members = copyOrder;
        }
        this.parent.control.trigger(onHeadersSort, sortDetails);
        if (sortDetails.IsOrderChanged) {
          this.applyFilterCustomSort(treeData, sortDetails, true);
        }
      }
      return treeData;
    };
    EventBase2.prototype.applyFilterCustomSort = function(headers, sortDetails, hasMembersOrder) {
      var order = [];
      var updatedMembers = [];
      var grandTotal;
      if (sortDetails.IsOrderChanged) {
        order = sortDetails.members;
      } else {
        order = sortDetails.sortOrder === "Ascending" || sortDetails.sortOrder === "None" || sortDetails.sortOrder === void 0 ? [].concat(sortDetails.members) : [].concat(sortDetails.members).reverse();
      }
      if (headers[0].caption === "Grand Total") {
        grandTotal = headers[0];
        headers.shift();
      }
      for (var i = 0, j = 0; i < headers.length; i++) {
        var sortText = headers[i].caption;
        if (order[j] === sortText) {
          headers.splice(j++, 0, headers[i]);
          headers.splice(++i, 1);
          if (j < order.length) {
            i = -1;
          } else {
            if (!hasMembersOrder) {
              updatedMembers.splice(--j, 0, sortText);
            }
            break;
          }
        }
        if (i >= 0 && !hasMembersOrder) {
          updatedMembers[i] = headers[i].caption;
        }
      }
      if (!hasMembersOrder) {
        for (var i = updatedMembers.length; i < headers.length; i++) {
          updatedMembers[i] = headers[i].caption;
        }
        if (updatedMembers[updatedMembers.length - 1] === "Grand Total") {
          updatedMembers.pop();
        }
        sortDetails.members = updatedMembers;
      }
      if (grandTotal) {
        headers.splice(0, 0, grandTotal);
      }
      return headers;
    };
    EventBase2.prototype.getParentIDs = function(treeObj, id, parent) {
      var data = treeObj.fields.dataSource;
      var pid;
      for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
        var li = data_1[_i];
        if (li.id === id) {
          pid = li.pid;
          break;
        }
      }
      if (pid) {
        parent.push(pid);
        this.getParentIDs(treeObj, pid, parent);
      }
      return parent;
    };
    EventBase2.prototype.getChildIDs = function(treeObj, id, children) {
      var data = treeObj.fields.dataSource;
      var cID;
      for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
        var li = data_2[_i];
        if (li.pid === id) {
          cID = li.id;
          break;
        }
      }
      if (cID) {
        children.push(cID);
        this.getParentIDs(treeObj, cID, children);
      }
      return children;
    };
    EventBase2.prototype.searchTreeNodes = function(args, treeObj, isFieldCollection, isHierarchy) {
      if (isFieldCollection) {
        var searchList = [];
        var nonSearchList = [];
        var list = [].slice.call(treeObj.element.querySelectorAll("li"));
        for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
          var element = list_1[_i];
          if (element.querySelector(".e-list-text").textContent.toLowerCase().indexOf(args.value.toLowerCase()) > -1) {
            searchList.push(element);
          } else {
            nonSearchList.push(element);
          }
        }
        treeObj.enableNodes(searchList);
        removeClass(searchList, ICON_DISABLE);
        treeObj.disableNodes(nonSearchList);
        addClass(nonSearchList, ICON_DISABLE);
        if (searchList.length > 0 && nonSearchList.length > 0) {
          for (var _a = 0, searchList_1 = searchList; _a < searchList_1.length; _a++) {
            var currentNode = searchList_1[_a];
            var id = currentNode.getAttribute("data-uid");
            var parentIDs = this.getParentIDs(treeObj, id, []);
            var childIDs = this.getChildIDs(treeObj, id, []);
            var pNodes = [];
            if (parentIDs.length > 0) {
              for (var _b = 0, nonSearchList_1 = nonSearchList; _b < nonSearchList_1.length; _b++) {
                var li = nonSearchList_1[_b];
                if (PivotUtil.inArray(li.getAttribute("data-uid"), parentIDs) !== -1) {
                  pNodes.push(li);
                }
              }
            }
            if (childIDs.length > 0) {
              for (var _c = 0, nonSearchList_2 = nonSearchList; _c < nonSearchList_2.length; _c++) {
                var li = nonSearchList_2[_c];
                if (PivotUtil.inArray(li.getAttribute("data-uid"), childIDs) !== -1) {
                  pNodes.push(li);
                }
              }
            }
            treeObj.enableNodes(pNodes);
            removeClass(pNodes, ICON_DISABLE);
          }
        }
        if ([].slice.call(treeObj.element.querySelectorAll("li." + ICON_DISABLE)).length === 0) {
          treeObj.collapseAll();
        } else {
          treeObj.expandAll(void 0, void 0, true);
        }
        this.searchListItem = searchList;
      } else {
        this.parent.searchTreeItems = [];
        if (this.parent.dataType === "olap" && !isHierarchy) {
          this.updateOlapSearchTree(args, treeObj, isHierarchy);
        } else {
          var searchList = [];
          var memberCount = 0;
          memberCount = 1;
          for (var _d = 0, _e = this.parent.currentTreeItems; _d < _e.length; _d++) {
            var item = _e[_d];
            if (item.name.toLowerCase().indexOf(args.value.toLowerCase()) > -1) {
              this.parent.searchTreeItems.push(item);
              if (memberCount <= this.parent.control.maxNodeLimitInMemberEditor) {
                searchList.push(item);
              }
              memberCount++;
            }
          }
          memberCount--;
          if (memberCount > this.parent.control.maxNodeLimitInMemberEditor) {
            this.parent.editorLabelElement.innerText = memberCount - this.parent.control.maxNodeLimitInMemberEditor + this.parent.control.localeObj.getConstant("editorDataLimitMsg");
            this.parent.filterDialog.dialogPopUp.height = this.parent.filterDialog.allowExcelLikeFilter ? "440px" : "400px";
            this.parent.isDataOverflow = true;
          } else {
            this.parent.editorLabelElement.innerText = "";
            this.parent.filterDialog.dialogPopUp.height = this.parent.filterDialog.allowExcelLikeFilter ? "400px" : "350px";
            this.parent.isDataOverflow = false;
          }
          this.parent.isDataOverflow = memberCount > this.parent.control.maxNodeLimitInMemberEditor;
          this.parent.editorLabelElement.parentElement.style.display = this.parent.isDataOverflow ? "block" : "none";
          treeObj.fields = {
            dataSource: searchList,
            id: "id",
            text: "name",
            isChecked: "isSelected",
            parentID: "pid"
          };
          treeObj.dataBind();
        }
      }
    };
    EventBase2.prototype.updateOlapSearchTree = function(args, treeObj, isHierarchy) {
      var treeData = [];
      var filterDialog = this.parent.filterDialog.dialogPopUp.element;
      var fieldName = filterDialog.getAttribute("data-fieldname");
      if (args.value.toLowerCase() === "") {
        this.parent.filterDialog.isSearchEnabled = false;
        this.parent.engineModule.fieldList[fieldName].searchMembers = [];
        var updatedTreeData = [];
        var filterItemObj = {};
        var dummyfilterItems = {};
        var memberObject = this.parent.engineModule.fieldList[fieldName].members;
        var members = Object.keys(memberObject);
        var filterItems = [];
        for (var _i = 0, members_1 = members; _i < members_1.length; _i++) {
          var item = members_1[_i];
          if (memberObject[item].isSelected) {
            if (!(memberObject[item].parent && memberObject[memberObject[item].parent].isSelected)) {
              filterItems.push(item);
            }
          }
        }
        for (var _a = 0, filterItems_2 = filterItems; _a < filterItems_2.length; _a++) {
          var item = filterItems_2[_a];
          filterItemObj[item] = item;
          dummyfilterItems[item] = item;
          if (memberObject[item]) {
            dummyfilterItems = this.getParentNode(fieldName, item, dummyfilterItems);
          }
        }
        var searchData = this.parent.engineModule.fieldList[fieldName].filterMembers;
        treeData = this.getFilteredTreeNodes(fieldName, searchData, dummyfilterItems, updatedTreeData);
        treeData = this.getOlapTreeData(true, PivotUtil.getClonedData(treeData), filterItemObj, fieldName, isHierarchy, true);
      } else {
        this.parent.filterDialog.isSearchEnabled = true;
        var searchData = this.parent.engineModule.fieldList[fieldName].searchMembers;
        treeData = PivotUtil.getClonedData(searchData);
        treeData = this.getOlapSearchTreeData(true, treeData, fieldName);
      }
      treeObj.fields = {
        dataSource: treeData,
        id: "id",
        text: "name",
        isChecked: "isSelected",
        parentID: "pid"
      };
      treeObj.dataBind();
    };
    EventBase2.prototype.getTreeData = function(isInclude, members, filterItems, fieldName) {
      this.parent.currentTreeItems = [];
      this.parent.searchTreeItems = [];
      this.parent.currentTreeItemsPos = {};
      this.parent.savedTreeFilterPos = {};
      var engineModule = this.parent.engineModule;
      var list = [];
      var memberCount = 1;
      var filterObj = {};
      for (var _i = 0, filterItems_3 = filterItems; _i < filterItems_3.length; _i++) {
        var item = filterItems_3[_i];
        filterObj[item] = item;
      }
      var modifiedFieldName = fieldName.replace(/[^a-zA-Z0-9 ]/g, "_");
      for (var _a = 0, members_2 = members; _a < members_2.length; _a++) {
        var member = members_2[_a];
        var memberName = member.actualText.toString();
        memberName = this.parent.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(memberName) : memberName;
        var actualText = this.parent.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(member.actualText) : member.actualText;
        var nodeAttr = {
          "data-fieldName": fieldName,
          "data-memberId": actualText.toString()
        };
        var obj = {
          id: modifiedFieldName + "_" + memberCount,
          htmlAttributes: nodeAttr,
          actualText,
          name: this.parent.isDateField ? member.formattedText : engineModule.getFormattedValue(actualText, fieldName).formattedText,
          isSelected: isInclude ? false : true
        };
        var memberText = this.parent.dataSourceSettings.mode === "Server" ? member.actualText : member.formattedText;
        if (filterObj[this.parent.isDateField ? memberText : memberName] !== void 0) {
          obj.isSelected = isInclude ? true : false;
        }
        if (memberCount <= this.parent.control.maxNodeLimitInMemberEditor) {
          list.push(obj);
        }
        if (!obj.isSelected) {
          this.parent.savedTreeFilterPos[memberCount - 1] = this.parent.isDateField ? member.formattedText : memberName;
        }
        this.parent.currentTreeItems.push(obj);
        this.parent.searchTreeItems.push(obj);
        this.parent.currentTreeItemsPos[actualText] = {
          index: memberCount - 1,
          isSelected: obj.isSelected
        };
        memberCount++;
      }
      this.parent.isDataOverflow = memberCount - 1 > this.parent.control.maxNodeLimitInMemberEditor;
      return list;
    };
    EventBase2.prototype.getOlapTreeData = function(isInclude, members, filterObj, fieldName, isHierarchy, isSearchRender) {
      var engineModule = this.parent.engineModule;
      var fieldList = engineModule.fieldList[fieldName];
      this.parent.currentTreeItems = [];
      this.parent.searchTreeItems = [];
      this.parent.currentTreeItemsPos = {};
      var list = [];
      var memberCount = 1;
      for (var _i = 0, members_3 = members; _i < members_3.length; _i++) {
        var member = members_3[_i];
        var obj = member;
        var memberName = member.id.toString();
        if (!isSearchRender) {
          obj.isSelected = isInclude ? false : true;
        }
        if (filterObj[memberName] !== void 0) {
          obj.isSelected = isInclude ? true : false;
        }
        if (!isSearchRender && member.hasChildren) {
          this.updateChildNodeStates(fieldList.filterMembers, fieldName, member.id, obj.isSelected);
        }
        fieldList.members[memberName].isSelected = obj.isSelected;
        if (fieldList.currrentMembers && fieldList.currrentMembers[memberName]) {
          fieldList.currrentMembers[memberName].isSelected = obj.isSelected;
        }
        if (memberCount <= this.parent.control.maxNodeLimitInMemberEditor && isHierarchy) {
          list.push(obj);
        }
        this.parent.currentTreeItems.push(obj);
        this.parent.searchTreeItems.push(obj);
        this.parent.currentTreeItemsPos[memberName] = {
          index: memberCount - 1,
          isSelected: obj.isSelected
        };
        memberCount++;
      }
      this.parent.isDataOverflow = isHierarchy ? memberCount - 1 > this.parent.control.maxNodeLimitInMemberEditor : false;
      return isHierarchy ? list : members;
    };
    EventBase2.prototype.getOlapSearchTreeData = function(isInclude, members, fieldName) {
      var cMembers = this.parent.engineModule.fieldList[fieldName].members;
      for (var _i = 0, members_4 = members; _i < members_4.length; _i++) {
        var member = members_4[_i];
        var memberName = member.id.toString();
        if (cMembers[memberName]) {
          member.isSelected = cMembers[memberName].isSelected;
        }
        this.parent.searchTreeItems.push(member);
      }
      return members;
    };
    EventBase2.prototype.updateChildNodeStates = function(members, fieldName, node, state) {
      var cMembers = this.parent.engineModule.fieldList[fieldName].members;
      var sMembers = this.parent.engineModule.fieldList[fieldName].currrentMembers;
      for (var _i = 0, members_5 = members; _i < members_5.length; _i++) {
        var member = members_5[_i];
        if (member.pid && member.pid.toString() === node) {
          cMembers[member.id].isSelected = state;
          if (sMembers && sMembers[member.id]) {
            sMembers[member.id].isSelected = state;
          }
          if (member.hasChildren) {
            this.updateChildNodeStates(members, fieldName, member.id, state);
          }
        }
      }
    };
    EventBase2.prototype.getParentNode = function(fieldName, item, filterObj) {
      var members = this.parent.engineModule.fieldList[fieldName].members;
      if (members[item].parent && item !== members[item].parent) {
        var parentItem = members[item].parent;
        filterObj[parentItem] = parentItem;
        this.getParentNode(fieldName, parentItem, filterObj);
      }
      return filterObj;
    };
    EventBase2.prototype.getFilteredTreeNodes = function(fieldName, members, filterObj, treeData) {
      var parentNodes = [];
      var memberObject = this.parent.engineModule.fieldList[fieldName].members;
      var selectedNodes = filterObj ? Object.keys(filterObj) : [];
      for (var _i = 0, selectedNodes_1 = selectedNodes; _i < selectedNodes_1.length; _i++) {
        var node = selectedNodes_1[_i];
        var parent_1 = memberObject[node] ? memberObject[node].parent : void 0;
        if (parent_1 !== void 0 && PivotUtil.inArray(parent_1, parentNodes) === -1) {
          parentNodes.push(parent_1);
        }
      }
      for (var _a = 0, members_6 = members; _a < members_6.length; _a++) {
        var member = members_6[_a];
        if (isNullOrUndefined(member.pid) || PivotUtil.inArray(member.pid, parentNodes) !== -1) {
          treeData.push(member);
          if (isNullOrUndefined(member.pid) && PivotUtil.inArray(member.id, parentNodes) !== -1) {
            memberObject[member.id].isNodeExpand = true;
          } else if (!isNullOrUndefined(member.pid) && PivotUtil.inArray(member.pid, parentNodes) !== -1) {
            memberObject[member.id].isNodeExpand = false;
            memberObject[member.pid].isNodeExpand = true;
          } else {
            memberObject[member.id].isNodeExpand = false;
          }
        } else {
          memberObject[member.id].isNodeExpand = false;
        }
      }
      return treeData;
    };
    return EventBase2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/common/actions/node-state-modified.js
var NodeStateModified = (
  /** @class */
  function() {
    function NodeStateModified2(parent) {
      this.parent = parent;
    }
    NodeStateModified2.prototype.onStateModified = function(args, fieldName) {
      var droppedClass = "";
      var nodeDropped = true;
      var target = closest(args.target, "." + DROPPABLE_CLASS);
      var droppedPosition = -1;
      this.parent.dataSourceUpdate.btnElement = args.element ? args.element.parentElement : void 0;
      if (target) {
        droppedClass = target.classList[1] === ROW_AXIS_CLASS ? "rows" : target.classList[1] === COLUMN_AXIS_CLASS ? "columns" : target.classList[1] === VALUE_AXIS_CLASS ? "values" : target.classList[1] === FILTER_AXIS_CLASS ? "filters" : "";
      }
      if (this.parent.dataType === "olap" || this.parent.dataType === "pivot") {
        var actualFieldName = this.parent.dataType === "olap" && this.parent.engineModule.fieldList[fieldName] && this.parent.engineModule.fieldList[fieldName].isCalculatedField ? this.parent.engineModule.fieldList[fieldName].tag : fieldName;
        if (args.cancel && droppedClass === "") {
          nodeDropped = false;
          return nodeDropped;
        } else if (this.parent.dataSourceUpdate.btnElement && this.parent.dataSourceUpdate.btnElement.getAttribute("isValue") === "true" && (droppedClass === "filters" || droppedClass === "values") || this.parent.dataSourceUpdate.btnElement && this.parent.dataSourceUpdate.btnElement.getAttribute("isValue") === "false" && actualFieldName.toLowerCase().indexOf("[measures].") > -1 && this.parent.dataType === "olap" && (droppedClass === "filters" || droppedClass === "rows" || droppedClass === "columns") || this.parent.dataSourceUpdate.btnElement && this.parent.dataSourceUpdate.btnElement.getAttribute("isValue") === "false" && this.parent.dataType === "olap" && actualFieldName.toLowerCase().indexOf("[measures].") === -1 && this.parent.engineModule.fieldList[fieldName] && this.parent.engineModule.fieldList[fieldName].isNamedSets && (droppedClass === "filters" || droppedClass === "values") || this.parent.dataSourceUpdate.btnElement && this.parent.dataSourceUpdate.btnElement.getAttribute("isValue") === "false" && this.parent.dataType === "olap" && actualFieldName.toLowerCase().indexOf("[measures].") === -1 && droppedClass === "values") {
          var title = this.parent.localeObj.getConstant("warning");
          var description = this.parent.localeObj.getConstant("fieldDropErrorAction");
          this.parent.errorDialog.createErrorDialog(title, description);
          nodeDropped = false;
          return nodeDropped;
        }
      } else {
        if (args.cancel && droppedClass === "" || this.parent.dataSourceUpdate.btnElement && this.parent.dataSourceUpdate.btnElement.getAttribute("isValue") === "true" && (droppedClass === "filters" || droppedClass === "values" || droppedClass.indexOf(this.parent.dataSourceSettings.valueAxis) > -1)) {
          nodeDropped = false;
          return nodeDropped;
        }
      }
      if (droppedClass !== "") {
        if (this.parent.dataType === "olap" || this.parent.dataType === "pivot") {
          var actualFieldName = this.parent.dataType === "olap" && this.parent.engineModule.fieldList[fieldName] && this.parent.engineModule.fieldList[fieldName].isCalculatedField ? this.parent.engineModule.fieldList[fieldName].tag : fieldName;
          if (actualFieldName.toLowerCase().indexOf("[measures].") > -1 && this.parent.dataType === "olap" && (droppedClass === "filters" || droppedClass === "rows" || droppedClass === "columns") || this.parent.engineModule.fieldList[fieldName] && this.parent.engineModule.fieldList[fieldName].isNamedSets && droppedClass === "filters" || this.parent.dataType === "olap" && droppedClass === "values" && actualFieldName.toLowerCase().indexOf("[measures].") === -1) {
            var title = this.parent.localeObj.getConstant("warning");
            var description = this.parent.localeObj.getConstant("fieldDropErrorAction");
            this.parent.errorDialog.createErrorDialog(title, description);
            nodeDropped = false;
            return nodeDropped;
          }
        }
        if (this.parent.dataType === "pivot" && this.parent.engineModule.fieldList[fieldName] && this.parent.engineModule.fieldList[fieldName].aggregateType === "CalculatedField" && droppedClass !== "values") {
          var title = this.parent.localeObj.getConstant("warning");
          var description = this.parent.localeObj.getConstant("dropAction");
          this.parent.errorDialog.createErrorDialog(title, description);
          nodeDropped = false;
          return nodeDropped;
        }
        droppedPosition = this.getButtonPosition(args.target, droppedClass);
      } else if (this.parent.engineModule.fieldList[fieldName]) {
        this.parent.engineModule.fieldList[fieldName].isSelected = false;
        if (this.parent.dataType === "olap") {
          this.parent.engineModule.updateFieldlistData(fieldName);
        }
      }
      nodeDropped = this.parent.dataSourceUpdate.updateDataSource(fieldName, droppedClass, droppedPosition);
      return nodeDropped;
    };
    NodeStateModified2.prototype.getButtonPosition = function(target, droppedClass) {
      var droppedPosition = -1;
      var targetBtn = closest(target, "." + PIVOT_BUTTON_WRAPPER_CLASS);
      if (!isNullOrUndefined(targetBtn)) {
        targetBtn = targetBtn.querySelector("." + PIVOT_BUTTON_CLASS);
        var axisPanel = this.parent.element.querySelector(".e-" + droppedClass);
        var pivotButtons = [].slice.call(axisPanel.querySelectorAll("." + PIVOT_BUTTON_CLASS));
        for (var i = 0, n = pivotButtons.length; i < n; i++) {
          if (pivotButtons[i].id === targetBtn.id) {
            droppedPosition = i;
            break;
          }
        }
      }
      return droppedPosition;
    };
    return NodeStateModified2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/common/actions/dataSource-update.js
var DataSourceUpdate = (
  /** @class */
  function() {
    function DataSourceUpdate2(parent) {
      this.parent = parent;
    }
    DataSourceUpdate2.prototype.updateDataSource = function(fieldName, droppedClass, droppedPosition) {
      var _this = this;
      var dataSourceItem;
      var draggedClass;
      var draggedPosition = -1;
      var nodeDropped = true;
      var row = this.parent.dataSourceSettings.rows;
      var column = this.parent.dataSourceSettings.columns;
      var value = this.parent.dataSourceSettings.values;
      var filter = this.parent.dataSourceSettings.filters;
      var field = [row, column, value, filter];
      for (var len = 0, lnt = field.length; len < lnt; len++) {
        if (field[len]) {
          for (var i = 0, n = field[len].length; i < n; i++) {
            if (field[len][i].name === fieldName || this.parent.dataType === "olap" && field[len][i].name.toLowerCase() === "[measures]" && field[len][i].name.toLowerCase() === fieldName) {
              draggedClass = len === 0 ? "rows" : len === 1 ? "columns" : len === 2 ? "values" : "filters";
              draggedPosition = i;
            }
            if (!draggedClass) {
              draggedClass = "fieldList";
            }
          }
        }
      }
      var eventdrop = {
        fieldName,
        dropField: PivotUtil.getFieldInfo(fieldName, this.control).fieldItem,
        dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings),
        dropAxis: droppedClass,
        dropPosition: droppedPosition,
        draggedAxis: draggedClass,
        cancel: false
      };
      var control = this.control.getModuleName() === "pivotfieldlist" && this.control.isPopupView ? this.control.pivotGridModule : this.control;
      control.trigger(fieldDrop, eventdrop, function(observedArgs) {
        if (!observedArgs.cancel) {
          droppedClass = observedArgs.dropAxis;
          droppedPosition = observedArgs.dropPosition;
          fieldName = observedArgs.dropField ? observedArgs.dropField.name : observedArgs.fieldName;
          dataSourceItem = observedArgs.dropField;
          if (_this.control && _this.btnElement && _this.btnElement.getAttribute("isvalue") === "true") {
            switch (droppedClass) {
              case "":
                _this.control.setProperties({
                  dataSourceSettings: {
                    values: []
                  }
                }, true);
                break;
              case "rows":
                droppedPosition = droppedPosition === _this.parent.dataSourceSettings.rows.length ? -1 : droppedPosition;
                _this.control.setProperties({
                  dataSourceSettings: {
                    valueAxis: "row",
                    valueIndex: droppedPosition
                  }
                }, true);
                break;
              case "columns":
                droppedPosition = droppedPosition === _this.parent.dataSourceSettings.columns.length ? -1 : droppedPosition;
                _this.control.setProperties({
                  dataSourceSettings: {
                    valueAxis: "column",
                    valueIndex: droppedPosition
                  }
                }, true);
                break;
            }
          } else {
            _this.removeFieldFromReport(fieldName.toString());
            if (_this.parent.dataType === "pivot" && _this.control.showValuesButton && _this.parent.dataSourceSettings.values.length > 1) {
              var dropAxisFields = _this.parent.dataSourceSettings.valueAxis === "row" && droppedClass === "rows" ? _this.parent.dataSourceSettings.rows : _this.parent.dataSourceSettings.valueAxis === "column" && droppedClass === "columns" ? _this.parent.dataSourceSettings.columns : void 0;
              if (draggedPosition < _this.parent.dataSourceSettings.valueIndex && (_this.parent.dataSourceSettings.valueAxis === "row" && draggedClass === "rows" || _this.parent.dataSourceSettings.valueAxis === "column" && draggedClass === "columns")) {
                _this.control.setProperties({
                  dataSourceSettings: {
                    valueIndex: _this.parent.dataSourceSettings.valueIndex - 1
                  }
                }, true);
              }
              if (!isNullOrUndefined(dropAxisFields)) {
                if (droppedPosition === -1 && _this.parent.dataSourceSettings.valueIndex === -1) {
                  _this.control.setProperties({
                    dataSourceSettings: {
                      valueIndex: dropAxisFields.length
                    }
                  }, true);
                } else if (droppedPosition > -1 && droppedPosition <= _this.parent.dataSourceSettings.valueIndex) {
                  _this.control.setProperties({
                    dataSourceSettings: {
                      valueIndex: _this.parent.dataSourceSettings.valueIndex + 1
                    }
                  }, true);
                } else if (_this.parent.dataSourceSettings.valueIndex > -1 && droppedPosition > _this.parent.dataSourceSettings.valueIndex) {
                  droppedPosition = droppedPosition - 1;
                }
              }
            }
            dataSourceItem = _this.getNewField(fieldName.toString(), observedArgs.dropField);
            if (dataSourceItem.type === "CalculatedField" && droppedClass !== "") {
              droppedClass = "values";
            }
          }
          if (_this.parent.dataType === "olap") {
            _this.removeFieldFromReport(fieldName.toString());
            dataSourceItem = _this.getNewField(fieldName.toString(), observedArgs.dropField);
            if (_this.parent.dataSourceSettings.values.length === 0) {
              _this.removeFieldFromReport("[measures]");
            }
            if (dataSourceItem.type === "CalculatedField" && droppedClass !== "") {
              droppedClass = "values";
            }
          }
          if (_this.control) {
            var eventArgs = {
              fieldName,
              droppedField: dataSourceItem,
              dataSourceSettings: PivotUtil.getClonedDataSourceSettings(_this.parent.dataSourceSettings),
              droppedAxis: droppedClass,
              droppedPosition
            };
            control.trigger(onFieldDropped, eventArgs, function(droppedArgs) {
              dataSourceItem = droppedArgs.droppedField;
              if (dataSourceItem) {
                droppedPosition = droppedArgs.droppedPosition;
                droppedClass = droppedArgs.droppedAxis;
                switch (droppedClass) {
                  case "filters":
                    if (droppedPosition !== -1) {
                      _this.parent.dataSourceSettings.filters.splice(droppedPosition, 0, dataSourceItem);
                    } else {
                      _this.parent.dataSourceSettings.filters.push(dataSourceItem);
                    }
                    break;
                  case "rows":
                    if (droppedPosition !== -1) {
                      _this.parent.dataSourceSettings.rows.splice(droppedPosition, 0, dataSourceItem);
                    } else {
                      _this.parent.dataSourceSettings.rows.push(dataSourceItem);
                    }
                    break;
                  case "columns":
                    if (droppedPosition !== -1) {
                      _this.parent.dataSourceSettings.columns.splice(droppedPosition, 0, dataSourceItem);
                    } else {
                      _this.parent.dataSourceSettings.columns.push(dataSourceItem);
                    }
                    break;
                  case "values":
                    if (droppedPosition !== -1) {
                      _this.parent.dataSourceSettings.values.splice(droppedPosition, 0, dataSourceItem);
                    } else {
                      _this.parent.dataSourceSettings.values.push(dataSourceItem);
                    }
                    if (_this.parent.dataType === "olap" && !_this.parent.engineModule.isMeasureAvail && !(_this.parent.dataSourceSettings.values.length > 1)) {
                      var measureField = {
                        name: "[Measures]",
                        caption: "Measures",
                        showRemoveIcon: true,
                        allowDragAndDrop: true
                      };
                      var fieldAxis = _this.parent.dataSourceSettings.valueAxis === "row" ? _this.parent.dataSourceSettings.rows : _this.parent.dataSourceSettings.columns;
                      fieldAxis.push(measureField);
                    }
                    break;
                }
                var fieldCount = droppedClass === "columns" ? control.dataSourceSettings.columns.length : droppedClass === "rows" ? control.dataSourceSettings.rows.length : 0;
                if (fieldCount !== 0 && control.dataSourceSettings.valueIndex === fieldCount) {
                  _this.control.setProperties({
                    dataSourceSettings: {
                      valueIndex: -1
                    }
                  }, true);
                }
              }
            });
          }
        } else {
          nodeDropped = false;
        }
      });
      return nodeDropped;
    };
    DataSourceUpdate2.prototype.removeFieldFromReport = function(fieldName) {
      var dataSourceItem;
      var isDataSource = false;
      var rows = this.parent.dataSourceSettings.rows;
      var columns = this.parent.dataSourceSettings.columns;
      var values = this.parent.dataSourceSettings.values;
      var filters = this.parent.dataSourceSettings.filters;
      var fields = [rows, columns, values, filters];
      var field = this.parent.engineModule.fieldList[fieldName];
      for (var len = 0, lnt = fields.length; len < lnt; len++) {
        if (!isDataSource && fields[len]) {
          for (var i = 0, n = fields[len].length; i < n; i++) {
            if (fields[len][i].name === fieldName || this.parent.dataType === "olap" && fields[len][i].name.toLowerCase() === "[measures]" && fields[len][i].name.toLowerCase() === fieldName) {
              dataSourceItem = fields[len][i].properties ? fields[len][i].properties : fields[len][i];
              dataSourceItem.type = field && field.type === "number" ? dataSourceItem.type : "Count";
              fields[len].splice(i, 1);
              if (this.parent.dataType === "olap") {
                var engineModule = this.parent.engineModule;
                if (engineModule && engineModule.fieldList[fieldName]) {
                  engineModule.fieldList[fieldName].currrentMembers = {};
                  engineModule.fieldList[fieldName].searchMembers = [];
                }
              }
              isDataSource = true;
              break;
            }
          }
        }
      }
      return dataSourceItem;
    };
    DataSourceUpdate2.prototype.getNewField = function(fieldName, fieldItem) {
      var newField;
      if (this.parent.dataType === "olap") {
        var field = this.parent.engineModule.fieldList[fieldName];
        newField = {
          name: fieldItem ? fieldItem.name : fieldName,
          caption: fieldItem ? fieldItem.caption : field.caption,
          isNamedSet: fieldItem ? fieldItem.isNamedSet : field.isNamedSets,
          isCalculatedField: fieldItem ? fieldItem.isCalculatedField : field.isCalculatedField,
          type: fieldItem ? fieldItem.type === void 0 ? field.type === "number" ? "Sum" : "Count" : fieldItem.type : field.aggregateType === void 0 ? field.type === "number" ? "Sum" : "Count" : field.aggregateType,
          showFilterIcon: fieldItem ? fieldItem.showFilterIcon : field.showFilterIcon,
          showSortIcon: fieldItem ? fieldItem.showSortIcon : field.showSortIcon,
          showEditIcon: fieldItem ? fieldItem.showEditIcon : field.showEditIcon,
          showRemoveIcon: fieldItem ? fieldItem.showRemoveIcon : field.showRemoveIcon,
          showValueTypeIcon: fieldItem ? fieldItem.showValueTypeIcon : field.showValueTypeIcon,
          allowDragAndDrop: fieldItem ? fieldItem.allowDragAndDrop : field.allowDragAndDrop,
          showSubTotals: fieldItem ? fieldItem.showSubTotals : field.showSubTotals,
          expandAll: fieldItem ? fieldItem.expandAll : field.expandAll
        };
      } else {
        var field = this.parent.engineModule.fieldList[fieldName];
        newField = {
          name: fieldItem ? fieldItem.name : fieldName,
          caption: fieldItem ? fieldItem.caption : field.caption,
          type: fieldItem ? fieldItem.type === void 0 || fieldItem.type === null ? field.type === "number" ? "Sum" : "Count" : fieldItem.type : field.aggregateType === void 0 || field.aggregateType === null ? field.type === "number" ? "Sum" : "Count" : field.aggregateType,
          showNoDataItems: fieldItem ? fieldItem.showNoDataItems : field.showNoDataItems,
          baseField: fieldItem ? fieldItem.baseField : field.baseField,
          baseItem: fieldItem ? fieldItem.baseItem : field.baseItem,
          allowDragAndDrop: fieldItem ? fieldItem.allowDragAndDrop : field.allowDragAndDrop,
          showSubTotals: fieldItem ? fieldItem.showSubTotals : field.showSubTotals,
          showFilterIcon: fieldItem ? fieldItem.showFilterIcon : field.showFilterIcon,
          showSortIcon: fieldItem ? fieldItem.showSortIcon : field.showSortIcon,
          showEditIcon: fieldItem ? fieldItem.showEditIcon : field.showEditIcon,
          showRemoveIcon: fieldItem ? fieldItem.showRemoveIcon : field.showRemoveIcon,
          showValueTypeIcon: fieldItem ? fieldItem.showValueTypeIcon : field.showValueTypeIcon,
          expandAll: fieldItem ? fieldItem.expandAll : field.expandAll
        };
      }
      return newField;
    };
    return DataSourceUpdate2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/common/popups/error-dialog.js
var ErrorDialog = (
  /** @class */
  function() {
    function ErrorDialog2(parent) {
      this.parent = parent;
    }
    ErrorDialog2.prototype.createErrorDialog = function(title, description) {
      var errorDialog = createElement("div", {
        id: this.parent.parentID + "_ErrorDialog",
        className: ERROR_DIALOG_CLASS
      });
      this.parent.element.appendChild(errorDialog);
      this.errorPopUp = new Dialog({
        animationSettings: {
          effect: "Fade"
        },
        allowDragging: false,
        header: title,
        content: description,
        isModal: true,
        visible: true,
        showCloseIcon: true,
        enableRtl: this.parent.enableRtl,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        width: "auto",
        height: "auto",
        position: {
          X: "center",
          Y: "center"
        },
        buttons: [{
          click: this.closeErrorDialog.bind(this),
          isFlat: false,
          buttonModel: {
            cssClass: OK_BUTTON_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
            content: this.parent.localeObj.getConstant("ok"),
            isPrimary: true
          }
        }],
        cssClass: this.parent.cssClass,
        closeOnEscape: true,
        target: document.body,
        close: this.removeErrorDialog.bind(this)
      });
      this.errorPopUp.isStringTemplate = true;
      this.errorPopUp.appendTo(errorDialog);
    };
    ErrorDialog2.prototype.closeErrorDialog = function() {
      this.errorPopUp.close();
    };
    ErrorDialog2.prototype.removeErrorDialog = function() {
      if (this.errorPopUp && !this.errorPopUp.isDestroyed) {
        this.errorPopUp.destroy();
        this.errorPopUp = null;
      }
      if (document.getElementById(this.parent.parentID + "_ErrorDialog")) {
        remove(document.getElementById(this.parent.parentID + "_ErrorDialog"));
      }
    };
    return ErrorDialog2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/common/popups/filter-dialog.js
var FilterDialog = (
  /** @class */
  function() {
    function FilterDialog2(parent) {
      this.parent = parent;
    }
    FilterDialog2.prototype.createFilterDialog = function(treeData, fieldName, fieldCaption, target) {
      var _this = this;
      var editorDialog = createElement("div", {
        id: this.parent.parentID + "_EditorTreeView",
        className: MEMBER_EDITOR_DIALOG_CLASS + " " + (this.parent.dataType === "olap" ? "e-olap-editor-dialog" : "") + (this.parent.isDataOverflow ? " " + PIVOT_FILTER_MEMBER_LIMIT : ""),
        attrs: {
          "data-fieldName": fieldName,
          "aria-label": fieldCaption
        }
      });
      var filterCaption = this.parent.engineModule.fieldList[fieldName].caption;
      var headerTemplate = this.parent.localeObj.getConstant("filter") + ' "' + fieldCaption + '" ' + this.parent.localeObj.getConstant("by");
      this.filterObject = this.getFilterObject(fieldName);
      this.isSearchEnabled = false;
      this.allowExcelLikeFilter = this.isExcelFilter(fieldName);
      this.parent.element.appendChild(editorDialog);
      this.dialogPopUp = new Dialog({
        animationSettings: {
          effect: this.allowExcelLikeFilter ? "None" : "Fade"
        },
        allowDragging: false,
        header: this.allowExcelLikeFilter ? headerTemplate : filterCaption,
        // content: (this.allowExcelLikeFilter ? '' : this.createTreeView(treeData, fieldCaption, fieldName)),
        content: "",
        isModal: true,
        visible: true,
        showCloseIcon: this.allowExcelLikeFilter ? true : false,
        enableRtl: this.parent.enableRtl,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        width: "320px",
        height: this.parent.isDataOverflow ? this.allowExcelLikeFilter ? "440px" : "400px" : this.allowExcelLikeFilter ? "400px" : "350px",
        position: {
          X: "center",
          Y: "center"
        },
        buttons: [{
          isFlat: false,
          buttonModel: {
            cssClass: "e-clear-filter-button" + (this.allowExcelLikeFilter ? "" : " " + ICON_DISABLE) + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
            iconCss: "e-icons e-clear-filter-icon",
            enableRtl: this.parent.enableRtl,
            content: this.parent.localeObj.getConstant("clearFilter"),
            disabled: this.filterObject ? false : true
          }
        }, {
          isFlat: false,
          buttonModel: {
            cssClass: OK_BUTTON_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
            content: this.parent.localeObj.getConstant("ok"),
            isPrimary: true
          }
        }, {
          click: this.closeFilterDialog.bind(this),
          isFlat: false,
          buttonModel: {
            cssClass: CANCEL_BUTTON_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
            content: this.parent.localeObj.getConstant("cancel")
          }
        }],
        closeOnEscape: this.parent.renderMode === "Popup" ? false : true,
        target,
        cssClass: this.parent.cssClass,
        close: this.removeFilterDialog.bind(this)
      });
      this.dialogPopUp.isStringTemplate = true;
      this.dialogPopUp.appendTo(editorDialog);
      var filterArgs = {
        cancel: false,
        fieldName,
        fieldMembers: this.parent.dataSourceSettings.allowMemberFilter ? treeData : [],
        filterSetting: this.filterObject
      };
      var control = this.parent.moduleName === "pivotfieldlist" && this.parent.control.isPopupView ? this.parent.control.pivotGridModule : this.parent.control;
      control.trigger(memberEditorOpen, filterArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          treeData = observedArgs.fieldMembers;
          if (_this.allowExcelLikeFilter) {
            _this.createTabMenu(treeData, fieldCaption, fieldName);
            addClass([_this.dialogPopUp.element], "e-excel-filter");
            _this.updateCheckedState();
          } else {
            _this.dialogPopUp.content = _this.createTreeView(treeData, fieldCaption, fieldName);
            _this.updateCheckedState();
          }
          setStyleAttribute(_this.dialogPopUp.element, {
            "visibility": "visible"
          });
          if (_this.allowExcelLikeFilter) {
            _this.dialogPopUp.element.querySelector(".e-dlg-closeicon-btn").focus();
          }
          _this.memberTreeView.nodeChecked = _this.parent.control.pivotButtonModule.nodeStateModified.bind(_this.parent.control.pivotButtonModule);
          _this.allMemberSelect.nodeChecked = _this.parent.control.pivotButtonModule.nodeStateModified.bind(_this.parent.control.pivotButtonModule);
        } else {
          _this.dialogPopUp.close();
          _this.dialogPopUp = void 0;
        }
      });
    };
    FilterDialog2.prototype.createTreeView = function(treeData, fieldCaption, fieldName) {
      var _this = this;
      var editorTreeWrapper = createElement("div", {
        id: this.parent.parentID + "EditorDiv",
        className: EDITOR_TREE_WRAPPER_CLASS + (this.allowExcelLikeFilter ? " e-excelfilter" : "")
      });
      var levelWrapper = createElement("button", {
        id: this.parent.parentID + "_LevelDiv",
        className: "e-level-container-class",
        attrs: {
          "type": "button"
        }
      });
      var searchWrapper = createElement("div", {
        id: this.parent.parentID + "_SearchDiv",
        attrs: {
          "tabindex": "-1"
        },
        className: EDITOR_SEARCH_WRAPPER_CLASS
      });
      var filterCaption = this.parent.engineModule.fieldList[fieldName].caption;
      var editorSearch = createElement("input", {
        attrs: {
          "type": "text",
          className: EDITOR_SEARCH__INPUT_CLASS
        }
      });
      var nodeLimitText = this.parent.isDataOverflow ? this.parent.currentTreeItems.length - this.parent.control.maxNodeLimitInMemberEditor + this.parent.control.localeObj.getConstant("editorDataLimitMsg") : "";
      var labelWrapper = createElement("div", {
        id: this.parent.parentID + "_LabelDiv",
        attrs: {
          "tabindex": "-1",
          "title": nodeLimitText
        },
        className: EDITOR_LABEL_WRAPPER_CLASS
      });
      this.parent.editorLabelElement = createElement("label", {
        className: EDITOR_LABEL_CLASS
      });
      this.parent.editorLabelElement.innerText = nodeLimitText;
      labelWrapper.style.display = this.parent.isDataOverflow ? "block" : "none";
      labelWrapper.appendChild(this.parent.editorLabelElement);
      searchWrapper.appendChild(editorSearch);
      this.createSortOptions(fieldName, searchWrapper, treeData);
      var selectAllWrapper = createElement("div", {
        id: this.parent.parentID + "_AllDiv",
        attrs: {
          "tabindex": "-1"
        },
        className: SELECT_ALL_WRAPPER_CLASS
      });
      var selectAllContainer = createElement("div", {
        id: this.parent.parentID + "_SelectAllContainer",
        className: SELECT_ALL_CLASS
      });
      var treeOuterDiv = createElement("div", {
        className: EDITOR_TREE_CONTAINER_CLASS + "-outer-div"
      });
      var treeViewContainer = createElement("div", {
        className: EDITOR_TREE_CONTAINER_CLASS
      });
      var promptDiv = createElement("div", {
        className: EMPTY_MEMBER_CLASS + " " + ICON_DISABLE
      });
      promptDiv.innerText = this.parent.localeObj.getConstant("noMatches");
      if (this.parent.dataType === "olap" && this.parent.control.loadOnDemandInMemberEditor && !this.parent.engineModule.fieldList[fieldName].isHierarchy && !this.parent.engineModule.fieldList[fieldName].isNamedSets) {
        searchWrapper.appendChild(levelWrapper);
        this.createLevelWrapper(levelWrapper, fieldName);
      }
      selectAllWrapper.appendChild(selectAllContainer);
      editorTreeWrapper.appendChild(searchWrapper);
      editorTreeWrapper.appendChild(selectAllWrapper);
      editorTreeWrapper.appendChild(promptDiv);
      this.editorSearch = new MaskedTextBox({
        placeholder: this.parent.localeObj.getConstant("search") + " &#8220" + filterCaption + "&#8220",
        enableRtl: this.parent.enableRtl,
        cssClass: EDITOR_SEARCH_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
        showClearButton: true,
        change: function(e) {
          if (_this.parent.dataType === "olap") {
            _this.searchOlapTreeView(e, promptDiv);
          } else {
            _this.parent.eventBase.searchTreeNodes(e, _this.memberTreeView, false);
            var filterDialog = _this.dialogPopUp.element;
            var liList = [].slice.call(_this.memberTreeView.element.querySelectorAll("li"));
            if (liList.length === 0) {
              _this.allMemberSelect.disableNodes([_this.allMemberSelect.element.querySelector("li")]);
              filterDialog.querySelector("." + OK_BUTTON_CLASS).setAttribute("disabled", "disabled");
              removeClass([promptDiv], ICON_DISABLE);
            } else {
              _this.allMemberSelect.enableNodes([_this.allMemberSelect.element.querySelector("li")]);
              filterDialog.querySelector("." + OK_BUTTON_CLASS).removeAttribute("disabled");
              addClass([promptDiv], ICON_DISABLE);
            }
            _this.updateCheckedState();
          }
        }
      });
      this.editorSearch.isStringTemplate = true;
      this.editorSearch.appendTo(editorSearch);
      var nodeAttr = {
        "data-fieldName": fieldName,
        "data-memberId": "all"
      };
      var data = [{
        id: "all",
        name: this.parent.localeObj.getConstant("all"),
        isSelected: true,
        htmlAttributes: nodeAttr
      }];
      this.allMemberSelect = new TreeView({
        fields: {
          dataSource: data,
          id: "id",
          text: "name",
          isChecked: "isSelected"
        },
        showCheckBox: true,
        expandOn: "None",
        enableRtl: this.parent.enableRtl,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        nodeClicked: this.nodeCheck.bind(this, true),
        keyPress: this.nodeCheck.bind(this, true),
        nodeSelected: function(args) {
          removeClass([args.node], "e-active");
          args.cancel = true;
        },
        cssClass: this.parent.cssClass
      });
      this.allMemberSelect.isStringTemplate = true;
      if (!isNullOrUndefined(this.parent.currentTreeItems)) {
        for (var i = 0; i < this.parent.currentTreeItems.length; i++) {
          if (this.parent.currentTreeItems[i].id.indexOf("\n") || this.parent.currentTreeItems[i].id.indexOf("\n") === 0) {
            this.parent.currentTreeItems[i].id = this.parent.currentTreeItems[i].id.replace("\n", " ");
          }
        }
      }
      this.allMemberSelect.appendTo(selectAllContainer);
      treeOuterDiv.appendChild(treeViewContainer);
      editorTreeWrapper.appendChild(treeOuterDiv);
      this.memberTreeView = new TreeView({
        fields: {
          dataSource: treeData,
          id: "id",
          text: "name",
          isChecked: "isSelected",
          parentID: "pid"
        },
        showCheckBox: true,
        enableRtl: this.parent.enableRtl,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        nodeChecking: this.validateTreeNode.bind(this),
        nodeClicked: this.nodeCheck.bind(this, false),
        keyPress: this.nodeCheck.bind(this, false),
        nodeExpanding: this.updateChildNodes.bind(this),
        nodeSelected: function(args) {
          removeClass([args.node], "e-active");
          args.cancel = true;
        },
        expandOn: "None",
        cssClass: this.parent.cssClass
      });
      this.memberTreeView.isStringTemplate = true;
      this.memberTreeView.appendTo(treeViewContainer);
      if (this.parent.isDataOverflow && this.parent.control.maxNodeLimitInMemberEditor < this.parent.currentTreeItems.length) {
        editorTreeWrapper.appendChild(labelWrapper);
      }
      return editorTreeWrapper;
    };
    FilterDialog2.prototype.createSortOptions = function(fieldName, target, treeData) {
      if (this.parent.dataType === "pivot" && treeData && treeData.length > 0) {
        var sortOrder = this.parent.engineModule.fieldList[fieldName].sort;
        var sortWrapper = createElement("div", {
          className: FILTER_SORT_CLASS + " e-btn-group" + (this.parent.enableRtl ? " " + RTL : "") + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
          id: this.parent.element.id + "_Member_Sort"
        });
        this.parent.element.appendChild(sortWrapper);
        var sortAscendElement = createElement("button", {
          className: (sortOrder === "Ascending" ? SORT_SELECTED_CLASS + " " : "") + MEMBER_SORT_CLASS,
          id: this.parent.element.id + "_Sort_Ascend",
          attrs: {
            "type": "button",
            "aria-label": "button"
          }
        });
        var sortDescendElement = createElement("button", {
          className: (sortOrder === "Descending" ? SORT_SELECTED_CLASS + " " : "") + MEMBER_SORT_CLASS,
          id: this.parent.element.id + "_Sort_Descend",
          attrs: {
            "type": "button",
            "aria-label": "button"
          }
        });
        var sortBtnElement = new Button({
          iconCss: ICON + " " + SORT_ASCEND_ICON_CLASS,
          enableRtl: this.parent.enableRtl,
          cssClass: this.parent.cssClass,
          enableHtmlSanitizer: this.parent.enableHtmlSanitizer
        });
        sortBtnElement.appendTo(sortAscendElement);
        sortBtnElement = new Button({
          iconCss: ICON + " " + SORT_DESCEND_ICON_CLASS,
          enableRtl: this.parent.enableRtl,
          cssClass: this.parent.cssClass,
          enableHtmlSanitizer: this.parent.enableHtmlSanitizer
        });
        sortBtnElement.appendTo(sortDescendElement);
        sortWrapper.appendChild(sortAscendElement);
        sortWrapper.appendChild(sortDescendElement);
        target.appendChild(sortWrapper);
        this.unWireEvent(sortAscendElement);
        this.unWireEvent(sortDescendElement);
        this.wireEvent(sortAscendElement, fieldName);
        this.wireEvent(sortDescendElement, fieldName);
      }
    };
    FilterDialog2.prototype.createLevelWrapper = function(levelWrapper, fieldName) {
      var _this = this;
      var engineModule = this.parent.engineModule;
      var levels = engineModule.fieldList[fieldName].levels;
      var levelCount = engineModule.fieldList[fieldName].levelCount;
      var items = [];
      for (var i = 0, cnt = levels.length; i < cnt; i++) {
        items.push({
          id: levels[i].id,
          text: levels[i].name
        });
      }
      this.dropMenu = new DropDownButton({
        cssClass: "e-level-drop e-caret-hide" + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
        items,
        iconCss: "e-icons e-dropdown-icon",
        disabled: levelCount === levels.length,
        enableRtl: this.parent.enableRtl,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        beforeOpen: function(args) {
          var items2 = [].slice.call(args.element.querySelectorAll("li"));
          var engineModule2 = _this.parent.engineModule;
          var levelCount2 = engineModule2.fieldList[fieldName].levelCount;
          removeClass(items2, MENU_DISABLE);
          for (var i2 = 0, cnt2 = items2.length; i2 < cnt2; i2++) {
            if (i2 < levelCount2) {
              addClass([items2[i2]], MENU_DISABLE);
            }
          }
        },
        select: function(args) {
          var fieldName2 = _this.dialogPopUp.element.getAttribute("data-fieldname");
          var engineModule2 = _this.parent.engineModule;
          var selectedLevel;
          for (var i2 = 0, cnt2 = items.length; i2 < cnt2; i2++) {
            if (items[i2].id === args.item.id) {
              selectedLevel = i2;
            }
          }
          engineModule2.getFilterMembers(_this.parent.dataSourceSettings, fieldName2, selectedLevel + 1, false, true);
        },
        close: function() {
          var engineModule2 = _this.parent.engineModule;
          var levels2 = engineModule2.fieldList[fieldName].levels;
          var levelCount2 = engineModule2.fieldList[fieldName].levelCount;
          if (levelCount2 === levels2.length) {
            _this.dropMenu.disabled = true;
            _this.dropMenu.dataBind();
          } else {
            _this.dropMenu.disabled = false;
          }
        }
      });
      this.dropMenu.appendTo(levelWrapper);
    };
    FilterDialog2.prototype.searchOlapTreeView = function(e, promptDiv) {
      var popupInstance = this;
      clearTimeout(this.timeOutObj);
      this.timeOutObj = setTimeout(function() {
        var engineModule = popupInstance.parent.engineModule;
        var filterDialog = popupInstance.dialogPopUp.element;
        var fieldName = filterDialog.getAttribute("data-fieldname");
        var nodeLimit = popupInstance.parent.control.maxNodeLimitInMemberEditor ? popupInstance.parent.control.maxNodeLimitInMemberEditor : 5e3;
        if (!engineModule.fieldList[fieldName].isHierarchy) {
          if (popupInstance.dropMenu && e.value !== "") {
            popupInstance.dropMenu.disabled = true;
          } else {
            popupInstance.dropMenu.disabled = false;
          }
          if (!popupInstance.parent.control.loadOnDemandInMemberEditor) {
            engineModule.getSearchMembers(popupInstance.parent.dataSourceSettings, fieldName, e.value.toLowerCase(), nodeLimit, true);
          } else {
            var levelCount = engineModule.fieldList[fieldName].levelCount ? engineModule.fieldList[fieldName].levelCount : 1;
            engineModule.getSearchMembers(popupInstance.parent.dataSourceSettings, fieldName, e.value.toLowerCase(), nodeLimit, false, levelCount);
          }
          popupInstance.parent.eventBase.searchTreeNodes(e, popupInstance.memberTreeView, false, false);
        } else {
          popupInstance.parent.eventBase.searchTreeNodes(e, popupInstance.memberTreeView, false, true);
        }
        var liList = [].slice.call(popupInstance.memberTreeView.element.querySelectorAll("li"));
        if (liList.length === 0) {
          popupInstance.allMemberSelect.disableNodes([popupInstance.allMemberSelect.element.querySelector("li")]);
          filterDialog.querySelector("." + OK_BUTTON_CLASS).setAttribute("disabled", "disabled");
          removeClass([promptDiv], ICON_DISABLE);
        } else {
          popupInstance.allMemberSelect.enableNodes([popupInstance.allMemberSelect.element.querySelector("li")]);
          filterDialog.querySelector("." + OK_BUTTON_CLASS).removeAttribute("disabled");
          addClass([promptDiv], ICON_DISABLE);
        }
        popupInstance.updateCheckedState();
      }, 500);
    };
    FilterDialog2.prototype.nodeCheck = function(isAllMember, args) {
      var checkedNode = [args.node];
      var target = args.event.target;
      if (target.classList.contains("e-fullrow") || args.event.key === "Enter") {
        var memberObj = isAllMember ? this.allMemberSelect : this.memberTreeView;
        var getNodeDetails = memberObj.getNode(args.node);
        if (getNodeDetails.isChecked === "true") {
          memberObj.uncheckAll(checkedNode);
        } else {
          memberObj.checkAll(checkedNode);
        }
      } else if (args.event.keyCode === 38 && !isAllMember) {
        removeClass(this.memberTreeView.element.querySelectorAll("li.e-prev-active-node"), "e-prev-active-node");
        addClass(checkedNode, "e-prev-active-node");
      }
    };
    FilterDialog2.prototype.applySorting = function(fieldName, args) {
      var target = closest(args.target, "." + MEMBER_SORT_CLASS);
      if (target) {
        var sortElements = [].slice.call(closest(target, "." + FILTER_SORT_CLASS).querySelectorAll("." + MEMBER_SORT_CLASS));
        if (target.querySelector("." + SORT_ASCEND_ICON_CLASS) && !target.classList.contains(SORT_SELECTED_CLASS)) {
          this.updateFilterMembers("Ascending", fieldName);
          addClass([target], SORT_SELECTED_CLASS);
          removeClass([sortElements[1]], SORT_SELECTED_CLASS);
        } else if (target.querySelector("." + SORT_DESCEND_ICON_CLASS) && !target.classList.contains(SORT_SELECTED_CLASS)) {
          this.updateFilterMembers("Descending", fieldName);
          addClass([target], SORT_SELECTED_CLASS);
          removeClass([sortElements[0]], SORT_SELECTED_CLASS);
        } else {
          this.updateFilterMembers("None", fieldName);
          removeClass(sortElements, SORT_SELECTED_CLASS);
        }
      }
    };
    FilterDialog2.prototype.updateFilterMembers = function(order, fieldName) {
      var fieldInfo = this.parent.engineModule.fieldList[fieldName];
      var members = order === "None" ? PivotUtil.getClonedData(fieldInfo.dateMember) : this.parent.currentTreeItems.slice();
      var sortType = fieldInfo.isAlphanumeric ? true : void 0;
      var isHeaderSortByDefault = false;
      var membersInfo = fieldInfo && fieldInfo.membersOrder ? fieldInfo.membersOrder.slice() : [];
      var sortDetails = {
        fieldName,
        sortOrder: order,
        members: membersInfo && membersInfo.length > 0 ? membersInfo : Object.keys(members),
        IsOrderChanged: false
      };
      if (membersInfo && membersInfo.length > 0) {
        members = PivotUtil.applyCustomSort(sortDetails, members, sortType);
      } else {
        var groupField = this.parent.dataSourceSettings.groupSettings.filter(function(field) {
          return field.name === fieldName && field.type.toLocaleLowerCase() === "number";
        });
        var isNumberGroupSorting = !isNullOrUndefined(groupField) && groupField.length > 0 ? true : false;
        members = PivotUtil.applyHeadersSort(members, sortDetails.sortOrder, sortType, isNumberGroupSorting);
        isHeaderSortByDefault = true;
      }
      var control = this.parent.moduleName === "pivotfieldlist" && this.parent.control.isPopupView ? this.parent.control.pivotGridModule : this.parent.control;
      if (isHeaderSortByDefault) {
        var copyOrder = [];
        for (var m = 0, n = 0; m < members.length; m++) {
          if (members[m].actualText !== "Grand Total") {
            copyOrder[n++] = members[m].actualText;
          }
        }
        sortDetails.members = copyOrder;
      }
      control.trigger(onHeadersSort, sortDetails);
      if (sortDetails.IsOrderChanged) {
        members = PivotUtil.applyCustomSort(sortDetails, members, sortType, true);
      }
      this.parent.currentTreeItems = [];
      this.parent.searchTreeItems = [];
      var treeData = [];
      var modifiedFieldName = fieldName.replace(/[^a-zA-Z0-9 ]/g, "_");
      var engineModule = this.parent.engineModule;
      for (var i = 0, lnt = members.length; i < lnt; i++) {
        if (order === "None") {
          var memberName = members[i].actualText.toString();
          var nodeAttr = {
            "data-fieldName": fieldName,
            "data-memberId": memberName
          };
          var obj = {
            id: modifiedFieldName + "_" + (i + 1),
            htmlAttributes: nodeAttr,
            actualText: members[i].actualText,
            name: this.parent.isDateField ? members[i].formattedText : engineModule.getFormattedValue(memberName, fieldName).formattedText,
            isSelected: this.parent.currentTreeItemsPos[members[i].actualText].isSelected
          };
          this.parent.currentTreeItems.push(obj);
          if (this.editorSearch.value !== "") {
            if (obj.name.toLowerCase().indexOf(this.editorSearch.value.toLowerCase()) > -1) {
              this.parent.searchTreeItems.push(obj);
              treeData.push(obj);
            }
          } else {
            this.parent.searchTreeItems.push(obj);
            treeData.push(obj);
          }
        } else {
          this.parent.currentTreeItems.push(members[i]);
          if (this.editorSearch.value !== "") {
            if (members[i].name.toLowerCase().indexOf(this.editorSearch.value.toLowerCase()) > -1) {
              this.parent.searchTreeItems.push(members[i]);
              treeData.push(members[i]);
            }
          } else {
            this.parent.searchTreeItems.push(members[i]);
            treeData.push(members[i]);
          }
        }
        this.parent.currentTreeItemsPos[members[i].actualText].index = i;
      }
      var dataCount = this.memberTreeView.fields.dataSource.length;
      this.memberTreeView.fields = {
        dataSource: treeData.slice(0, dataCount),
        id: "id",
        text: "name",
        isChecked: "isSelected",
        parentID: "pid"
      };
      this.memberTreeView.dataBind();
    };
    FilterDialog2.prototype.updateChildNodes = function(args) {
      if (this.parent.dataType === "olap") {
        var engineModule = this.parent.engineModule;
        var fieldName = args.node.getAttribute("data-fieldname");
        var fieldList = engineModule.fieldList[fieldName];
        var filterItems = [];
        if (fieldList && fieldList.filterMembers.length > 0 && !this.isSearchEnabled && !fieldList.members[args.nodeData.id].isNodeExpand) {
          var childNodes = [];
          for (var _i = 0, _a = fieldList.filterMembers; _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.pid === args.nodeData.id.toString()) {
              childNodes.push(item);
            }
          }
          if (childNodes.length === 0) {
            fieldList.childMembers = [];
            engineModule.getChildMembers(this.parent.dataSourceSettings, args.nodeData.id.toString(), fieldName);
            childNodes = fieldList.childMembers;
            fieldList.childMembers = [];
          }
          var treeData = PivotUtil.getClonedData(childNodes);
          var curTreeData = this.memberTreeView.fields.dataSource;
          var isInclude = false;
          if (!isNullOrUndefined(this.filterObject)) {
            isInclude = this.filterObject.type === "Include" ? true : false;
            filterItems = this.filterObject.items ? this.filterObject.items : [];
          }
          treeData = this.updateChildData(isInclude, treeData, filterItems, fieldName, args.nodeData);
          treeData = this.parent.eventBase.sortOlapFilterData(treeData, engineModule.fieldList[fieldName].sort);
          for (var _b = 0, treeData_1 = treeData; _b < treeData_1.length; _b++) {
            var node = treeData_1[_b];
            curTreeData.push(node);
          }
          fieldList.members[args.nodeData.id].isNodeExpand = true;
          this.memberTreeView.addNodes(treeData, args.node);
        }
      }
    };
    FilterDialog2.prototype.updateChildData = function(isInclude, members, filterItems, fieldName, parentNode) {
      var memberCount = Object.keys(this.parent.currentTreeItemsPos).length;
      var fieldList = this.parent.engineModule.fieldList[fieldName];
      var list = [];
      var childMemberCount = 1;
      for (var _i = 0, members_1 = members; _i < members_1.length; _i++) {
        var member = members_1[_i];
        var obj = member;
        var memberName = member.id.toString();
        fieldList.members[memberName].isNodeExpand = false;
        member.isSelected = parentNode.isChecked === "true";
        if (childMemberCount <= this.parent.control.maxNodeLimitInMemberEditor) {
          list.push(obj);
        }
        this.parent.currentTreeItems.push(obj);
        this.parent.searchTreeItems.push(obj);
        this.parent.currentTreeItemsPos[memberName] = {
          index: memberCount,
          isSelected: obj.isSelected
        };
        memberCount++;
        childMemberCount++;
      }
      this.parent.isDataOverflow = false;
      return list;
    };
    FilterDialog2.prototype.createTabMenu = function(treeData, fieldCaption, fieldName) {
      var wrapper = createElement("div", {
        id: this.parent.parentID + "_FilterTabContainer",
        className: PIVOT_FILTER_TAB_CONTAINER,
        attrs: {
          "tabindex": "-1"
        }
      });
      this.dialogPopUp.content = wrapper;
      this.dialogPopUp.dataBind();
      var types = ["Label", "Value", "Include", "Exclude"];
      var regx = "((-|\\+)?[0-9]+(\\.[0-9]+)?)+";
      var member = Object.keys(this.parent.engineModule.fieldList[fieldName].members)[0];
      var fieldType = this.parent.engineModule.fieldList[fieldName].type;
      var formatObj = PivotUtil.getFieldByName(fieldName, this.parent.dataSourceSettings.formatSettings);
      var items = [{
        header: {
          text: this.parent.localeObj.getConstant("member"),
          iconCss: this.filterObject && types.indexOf(this.filterObject.type) > 1 ? SELECTED_OPTION_ICON_CLASS : ""
        },
        content: this.createTreeView(treeData, fieldCaption, fieldName)
      }];
      for (var _i = 0, types_1 = types; _i < types_1.length; _i++) {
        var type = types_1[_i];
        if (type === "Label" && this.parent.dataSourceSettings.allowLabelFilter || type === "Value" && this.parent.dataSourceSettings.allowValueFilter) {
          var filterType = type === "Label" && member && member.match(regx) && member.match(regx)[0].length === member.length && fieldType === "number" ? "Number" : type === "Label" && member && new Date(member).toString() !== "Invalid Date" && (formatObj && formatObj.type || this.filterObject && this.filterObject.type === "Date") ? "Date" : type;
          var item = {
            header: {
              text: filterType === "Number" ? this.parent.localeObj.getConstant("label") : this.parent.localeObj.getConstant(filterType.toLowerCase()),
              iconCss: this.filterObject && this.filterObject.type === filterType ? SELECTED_OPTION_ICON_CLASS : ""
            },
            content: this.createCustomFilter(fieldName, this.filterObject && this.filterObject.type === filterType ? this.filterObject : void 0, filterType.toLowerCase())
          };
          items.push(item);
        }
      }
      var selectedIndex = this.filterObject ? ["Label", "Date", "Number"].indexOf(this.filterObject.type) >= 0 ? 1 : this.filterObject.type === "Value" ? this.parent.dataSourceSettings.allowLabelFilter && this.parent.dataSourceSettings.allowValueFilter ? 2 : 1 : 0 : 0;
      selectedIndex = !this.parent.dataSourceSettings.allowMemberFilter && selectedIndex === 0 ? 1 : selectedIndex;
      this.tabObj = new Tab({
        heightAdjustMode: "Auto",
        items,
        height: "100%",
        selectedItem: selectedIndex,
        enableRtl: this.parent.enableRtl,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        cssClass: this.parent.cssClass
      });
      this.tabObj.isStringTemplate = true;
      this.tabObj.appendTo(wrapper);
      if (!this.parent.dataSourceSettings.allowMemberFilter) {
        this.tabObj.hideTab(0);
      }
      if (selectedIndex > 0) {
        addClass([this.dialogPopUp.element.querySelector(".e-filter-div-content." + (selectedIndex === 1 && this.parent.dataSourceSettings.allowLabelFilter ? "e-label-filter" : "e-value-filter"))], "e-selected-tab");
      }
    };
    FilterDialog2.prototype.createCustomFilter = function(fieldName, filterObject, type) {
      var dataSource = [];
      var valueOptions = [];
      var levelOptions = [];
      var measures = this.parent.dataSourceSettings.values;
      var selectedOption = "DoesNotEquals";
      var selectedValueIndex = 0;
      var selectedLevelIndex = 0;
      var options = {
        label: ["Equals", "DoesNotEquals", "BeginWith", "DoesNotBeginWith", "EndsWith", "DoesNotEndsWith", "Contains", "DoesNotContains", "GreaterThan", "GreaterThanOrEqualTo", "LessThan", "LessThanOrEqualTo", "Between", "NotBetween"],
        date: ["Equals", "DoesNotEquals", "Before", "BeforeOrEqualTo", "After", "AfterOrEqualTo", "Between", "NotBetween"],
        value: ["Equals", "DoesNotEquals", "GreaterThan", "GreaterThanOrEqualTo", "LessThan", "LessThanOrEqualTo", "Between", "NotBetween"]
      };
      var betweenOperators = ["Between", "NotBetween"];
      var operatorCollection = type === "label" ? options.label : type === "date" ? options.date : options.value;
      for (var _i = 0, operatorCollection_1 = operatorCollection; _i < operatorCollection_1.length; _i++) {
        var operator = operatorCollection_1[_i];
        selectedOption = filterObject && operator === filterObject.condition ? operatorCollection.indexOf(filterObject.condition) >= 0 ? filterObject.condition : operatorCollection[0] : selectedOption;
        dataSource.push({
          value: operator,
          text: this.parent.localeObj.getConstant(operator)
        });
      }
      var len = measures.length;
      while (len--) {
        valueOptions.unshift({
          value: measures[len].name,
          text: measures[len].caption ? measures[len].caption : measures[len].name
        });
        selectedValueIndex = filterObject && filterObject.type === "Value" && filterObject.measure === measures[len].name && filterObject.condition === selectedOption ? len : selectedValueIndex;
      }
      if (this.parent.dataType === "olap") {
        var engineModule = this.parent.engineModule;
        var levels = engineModule.fieldList[fieldName].levels;
        if (this.parent.engineModule.fieldList[fieldName].isHierarchy) {
          var levelObj = void 0;
          var fieldlistData = this.parent.engineModule.fieldListData;
          for (var _a = 0, fieldlistData_1 = fieldlistData; _a < fieldlistData_1.length; _a++) {
            var item = fieldlistData_1[_a];
            if (item && item.pid === fieldName) {
              levelObj = item;
              break;
            }
          }
          levelOptions.push({
            value: levelObj ? levelObj.id : fieldName,
            text: levelObj ? levelObj.caption : engineModule.fieldList[fieldName].name
          });
          selectedLevelIndex = 0;
          if (filterObject && filterObject.name === fieldName && filterObject.type.toLowerCase() === type) {
            levelOptions[levelOptions.length - 1]["iconClass"] = ICON + " " + SELECTED_LEVEL_ICON_CLASS;
          }
        } else {
          for (var i = 0, cnt = levels.length; i < cnt; i++) {
            selectedLevelIndex = filterObject && filterObject.selectedField === levels[i].id ? i : selectedLevelIndex;
            levelOptions.push({
              value: levels[i].id,
              text: levels[i].name
            });
            for (var _b = 0, _c = this.parent.dataSourceSettings.filterSettings; _b < _c.length; _b++) {
              var field = _c[_b];
              if (field.name === fieldName && field.selectedField === levels[i].id && field.type.toLowerCase() === type) {
                levelOptions[levelOptions.length - 1]["iconClass"] = ICON + " " + SELECTED_LEVEL_ICON_CLASS;
                break;
              }
            }
          }
        }
      }
      var mainDiv = createElement("div", {
        className: FILTER_DIV_CONTENT_CLASS + " e-" + (["date", "number"].indexOf(type) >= 0 ? "label" : type) + "-filter" + (this.parent.isDataOverflow ? " " + PIVOT_FILTER_MEMBER_LIMIT : ""),
        id: this.parent.parentID + "_" + type + "_filter_div_content",
        attrs: {
          "data-type": type,
          "data-fieldName": fieldName,
          "data-operator": selectedOption,
          "data-selectedField": this.parent.dataType === "olap" && levelOptions.length > 0 ? levelOptions[selectedLevelIndex].value.toString() : "",
          "data-measure": this.parent.dataSourceSettings.values.length > 0 ? this.parent.dataSourceSettings.values[selectedValueIndex].name : "",
          "data-value1": filterObject && selectedOption === filterObject.condition ? filterObject.value1 ? filterObject.value1.toString() : "" : "",
          "data-value2": filterObject && selectedOption === filterObject.condition ? filterObject.value2 ? filterObject.value2.toString() : "" : ""
        }
      });
      var textContentdiv = createElement("div", {
        className: FILTER_TEXT_DIV_CLASS
      });
      textContentdiv.innerText = this.parent.localeObj.getConstant(type + "TextContent");
      var betweenTextContentdiv = createElement("div", {
        className: BETWEEN_TEXT_DIV_CLASS + " " + (betweenOperators.indexOf(selectedOption) === -1 ? ICON_DISABLE : "")
      });
      betweenTextContentdiv.innerText = this.parent.localeObj.getConstant("And");
      var separatordiv = createElement("div", {
        className: SEPARATOR_DIV_CLASS
      });
      var filterWrapperDiv1 = createElement("div", {
        className: FILTER_OPTION_WRAPPER_1_CLASS
      });
      var levelWrapperDiv = createElement("div", {
        className: "e-level-option-container " + (this.parent.dataType === "olap" ? "" : ICON_DISABLE)
      });
      var optionWrapperDiv1 = createElement("div", {
        className: "e-measure-option-container " + (["label", "date", "number"].indexOf(type) >= 0 ? ICON_DISABLE : "")
      });
      var optionWrapperDiv2 = createElement("div", {
        className: "e-condition-option-container"
      });
      var filterWrapperDiv2 = createElement("div", {
        className: FILTER_OPTION_WRAPPER_2_CLASS
      });
      var levelDropOption = createElement("div", {
        id: this.parent.parentID + "_" + type + "_level_option_container"
      });
      var dropOptionDiv1 = createElement("div", {
        id: this.parent.parentID + "_" + type + "_measure_option_container"
      });
      var dropOptionDiv2 = createElement("div", {
        id: this.parent.parentID + "_" + type + "_contition_option_container"
      });
      var inputDiv1 = createElement("div", {
        className: FILTER_INPUT_DIV_1_CLASS
      });
      var inputDiv2 = createElement("div", {
        className: FILTER_INPUT_DIV_2_CLASS + " " + (betweenOperators.indexOf(selectedOption) === -1 ? ICON_DISABLE : "")
      });
      var inputField1 = createElement("input", {
        id: this.parent.parentID + "_" + type + "_input_option_1",
        attrs: {
          "type": "text"
        }
      });
      var inputField2 = createElement("input", {
        id: this.parent.parentID + "_" + type + "_input_option_2",
        attrs: {
          "type": "text"
        }
      });
      inputDiv1.appendChild(inputField1);
      inputDiv2.appendChild(inputField2);
      levelWrapperDiv.appendChild(levelDropOption);
      levelWrapperDiv.appendChild(separatordiv.cloneNode(true));
      optionWrapperDiv1.appendChild(dropOptionDiv1);
      optionWrapperDiv1.appendChild(separatordiv);
      optionWrapperDiv2.appendChild(dropOptionDiv2);
      filterWrapperDiv1.appendChild(levelWrapperDiv);
      filterWrapperDiv1.appendChild(optionWrapperDiv1);
      filterWrapperDiv1.appendChild(optionWrapperDiv2);
      filterWrapperDiv2.appendChild(inputDiv1);
      filterWrapperDiv2.appendChild(betweenTextContentdiv);
      filterWrapperDiv2.appendChild(inputDiv2);
      this.createElements(filterObject, betweenOperators, dropOptionDiv1, dropOptionDiv2, inputField1, inputField2, valueOptions, dataSource, selectedValueIndex, selectedOption, type, levelDropOption, levelOptions, selectedLevelIndex);
      mainDiv.appendChild(textContentdiv);
      mainDiv.appendChild(filterWrapperDiv1);
      mainDiv.appendChild(filterWrapperDiv2);
      return mainDiv;
    };
    FilterDialog2.prototype.createElements = function(filterObj, operators, optionDiv1, optionDiv2, inputDiv1, inputDiv2, vDataSource, oDataSource, valueIndex, option, type, levelDropOption, lDataSource, levelIndex) {
      var popupInstance = this;
      if (this.parent.dataType === "olap") {
        var levelWrapper = new DropDownList({
          dataSource: lDataSource,
          enableRtl: this.parent.enableRtl,
          fields: {
            value: "value",
            text: "text",
            iconCss: "iconClass"
          },
          index: levelIndex,
          cssClass: LEVEL_OPTIONS_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
          width: "100%",
          change: function(args) {
            var element = popupInstance.dialogPopUp.element.querySelector(".e-selected-tab");
            var fieldName = element.getAttribute("data-fieldName");
            var type2 = element.getAttribute("data-type");
            if (!isNullOrUndefined(element)) {
              popupInstance.updateInputValues(element, type2, inputDiv1, inputDiv2);
              setStyleAndAttributes(element, {
                "data-selectedField": args.value
              });
              var filterObj_1;
              for (var _i = 0, _a = popupInstance.parent.dataSourceSettings.filterSettings; _i < _a.length; _i++) {
                var field = _a[_i];
                if (field.name === fieldName && field.selectedField === args.value) {
                  filterObj_1 = field;
                  break;
                }
              }
              if (filterObj_1) {
                if (type2 === "value" && filterObj_1.measure && filterObj_1.measure !== "") {
                  optionWrapper1.value = filterObj_1.measure ? filterObj_1.measure : vDataSource[0].value;
                }
                if (filterObj_1.condition) {
                  optionWrapper.value = filterObj_1.condition ? filterObj_1.condition : "DoesNotEquals";
                } else {
                  optionWrapper.value = "DoesNotEquals";
                }
                var inputObj1 = void 0;
                var inputObj2 = void 0;
                if (type2 === "value") {
                  inputObj1 = getInstance(inputDiv1, NumericTextBox);
                  inputObj2 = getInstance(inputDiv2, NumericTextBox);
                  if (inputObj1) {
                    inputObj1.value = filterObj_1.value1 ? parseInt(filterObj_1.value1, 10) : void 0;
                  }
                  if (inputObj2) {
                    inputObj2.value = filterObj_1.value2 ? parseInt(filterObj_1.value2, 10) : void 0;
                  }
                } else {
                  inputObj1 = getInstance(inputDiv1, MaskedTextBox);
                  inputObj2 = getInstance(inputDiv2, MaskedTextBox);
                  if (inputObj1) {
                    inputObj1.value = filterObj_1.value1 ? filterObj_1.value1 : "";
                  }
                  if (inputObj2) {
                    inputObj2.value = filterObj_1.value2 ? filterObj_1.value2 : "";
                  }
                }
              }
              popupInstance.updateInputValues(element, type2, inputDiv1, inputDiv2);
            } else {
              return;
            }
          }
        });
        levelWrapper.isStringTemplate = true;
        levelWrapper.appendTo(levelDropOption);
      }
      var optionWrapper1 = new DropDownList({
        dataSource: vDataSource,
        enableRtl: this.parent.enableRtl,
        fields: {
          value: "value",
          text: "text"
        },
        index: valueIndex,
        cssClass: VALUE_OPTIONS_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
        width: "100%",
        change: function(args) {
          var element = popupInstance.dialogPopUp.element.querySelector(".e-selected-tab");
          if (!isNullOrUndefined(element)) {
            popupInstance.updateInputValues(element, type, inputDiv1, inputDiv2);
            setStyleAndAttributes(element, {
              "data-measure": args.value
            });
          } else {
            return;
          }
        }
      });
      optionWrapper1.isStringTemplate = true;
      optionWrapper1.appendTo(optionDiv1);
      var optionWrapper = new DropDownList({
        dataSource: oDataSource,
        enableRtl: this.parent.enableRtl,
        fields: {
          value: "value",
          text: "text"
        },
        value: option,
        cssClass: FILTER_OPERATOR_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
        width: "100%",
        change: function(args) {
          var element = popupInstance.dialogPopUp.element.querySelector(".e-selected-tab");
          if (!isNullOrUndefined(element)) {
            popupInstance.updateInputValues(element, type, inputDiv1, inputDiv2);
            var disabledClasses = [BETWEEN_TEXT_DIV_CLASS, FILTER_INPUT_DIV_2_CLASS];
            for (var _i = 0, disabledClasses_1 = disabledClasses; _i < disabledClasses_1.length; _i++) {
              var className = disabledClasses_1[_i];
              if (operators.indexOf(args.value) >= 0) {
                removeClass([element.querySelector("." + className)], ICON_DISABLE);
              } else {
                addClass([element.querySelector("." + className)], ICON_DISABLE);
              }
            }
            setStyleAndAttributes(element, {
              "data-operator": args.value
            });
          } else {
            return;
          }
        }
      });
      optionWrapper.isStringTemplate = true;
      optionWrapper.appendTo(optionDiv2);
      if (type === "date") {
        var inputObj1_1 = new DateTimePicker({
          placeholder: this.parent.localeObj.getConstant("chooseDate"),
          enableRtl: this.parent.enableRtl,
          format: "dd/MM/yyyy hh:mm:ss a",
          showClearButton: true,
          value: filterObj && option === filterObj.condition ? typeof filterObj.value1 === "string" ? new Date(filterObj.value1) : filterObj.value1 : null,
          change: function(e) {
            var element = popupInstance.dialogPopUp.element.querySelector(".e-selected-tab");
            if (!isNullOrUndefined(element)) {
              setStyleAndAttributes(element, {
                "data-value1": e.value,
                "data-value2": inputObj2_1.value
              });
            } else {
              return;
            }
          },
          width: "100%",
          cssClass: this.parent.cssClass
        });
        var inputObj2_1 = new DateTimePicker({
          placeholder: this.parent.localeObj.getConstant("chooseDate"),
          enableRtl: this.parent.enableRtl,
          format: "dd/MM/yyyy hh:mm:ss a",
          showClearButton: true,
          value: filterObj && option === filterObj.condition ? typeof filterObj.value2 === "string" ? new Date(filterObj.value2) : filterObj.value2 : null,
          change: function(e) {
            var element = popupInstance.dialogPopUp.element.querySelector(".e-selected-tab");
            if (!isNullOrUndefined(element)) {
              setStyleAndAttributes(element, {
                "data-value1": inputObj1_1.value,
                "data-value2": e.value
              });
            } else {
              return;
            }
          },
          width: "100%",
          cssClass: this.parent.cssClass
        });
        inputObj1_1.isStringTemplate = true;
        inputObj1_1.appendTo(inputDiv1);
        inputObj2_1.isStringTemplate = true;
        inputObj2_1.appendTo(inputDiv2);
      } else if (type === "value") {
        var inputObj1_2 = new NumericTextBox({
          placeholder: this.parent.localeObj.getConstant("enterValue"),
          enableRtl: this.parent.enableRtl,
          showClearButton: true,
          format: "###.##",
          value: filterObj && option === filterObj.condition ? parseInt(filterObj.value1, 10) : void 0,
          change: function(e) {
            var element = popupInstance.dialogPopUp.element.querySelector(".e-selected-tab");
            if (!isNullOrUndefined(element)) {
              setStyleAndAttributes(element, {
                "data-value1": e.value ? e.value.toString() : "0",
                "data-value2": inputObj2_2.value ? inputObj2_2.value.toString() : "0"
              });
            } else {
              return;
            }
          },
          width: "100%",
          cssClass: this.parent.cssClass
        });
        var inputObj2_2 = new NumericTextBox({
          placeholder: this.parent.localeObj.getConstant("enterValue"),
          enableRtl: this.parent.enableRtl,
          showClearButton: true,
          format: "###.##",
          value: filterObj && option === filterObj.condition ? parseInt(filterObj.value2, 10) : void 0,
          change: function(e) {
            var element = popupInstance.dialogPopUp.element.querySelector(".e-selected-tab");
            if (!isNullOrUndefined(element)) {
              setStyleAndAttributes(element, {
                "data-value1": inputObj1_2.value ? inputObj1_2.value.toString() : "0",
                "data-value2": e.value ? e.value.toString() : "0"
              });
            } else {
              return;
            }
          },
          width: "100%",
          cssClass: this.parent.cssClass
        });
        inputObj1_2.isStringTemplate = true;
        inputObj1_2.appendTo(inputDiv1);
        inputObj2_2.isStringTemplate = true;
        inputObj2_2.appendTo(inputDiv2);
      } else {
        var inputObj1_3 = new MaskedTextBox({
          placeholder: this.parent.localeObj.getConstant("enterValue"),
          enableRtl: this.parent.enableRtl,
          showClearButton: true,
          value: filterObj && option === filterObj.condition ? filterObj.value1 : "",
          change: function(e) {
            var element = popupInstance.dialogPopUp.element.querySelector(".e-selected-tab");
            if (!isNullOrUndefined(element)) {
              setStyleAndAttributes(element, {
                "data-value1": e.value,
                "data-value2": inputObj2_3.value
              });
            } else {
              return;
            }
          },
          width: "100%",
          cssClass: this.parent.cssClass
        });
        var inputObj2_3 = new MaskedTextBox({
          placeholder: this.parent.localeObj.getConstant("enterValue"),
          enableRtl: this.parent.enableRtl,
          showClearButton: true,
          value: filterObj && option === filterObj.condition ? filterObj.value2 : "",
          change: function(e) {
            var element = popupInstance.dialogPopUp.element.querySelector(".e-selected-tab");
            if (!isNullOrUndefined(element)) {
              setStyleAndAttributes(element, {
                "data-value1": inputObj1_3.value,
                "data-value2": e.value
              });
            } else {
              return;
            }
          },
          width: "100%",
          cssClass: this.parent.cssClass
        });
        inputObj1_3.isStringTemplate = true;
        inputObj1_3.appendTo(inputDiv1);
        inputObj2_3.isStringTemplate = true;
        inputObj2_3.appendTo(inputDiv2);
      }
    };
    FilterDialog2.prototype.updateInputValues = function(element, type, inputDiv1, inputDiv2) {
      var inputObj1 = getInstance(inputDiv1, type === "date" ? DateTimePicker : type === "value" ? NumericTextBox : MaskedTextBox);
      var inputObj2 = getInstance(inputDiv2, type === "date" ? DateTimePicker : type === "value" ? NumericTextBox : MaskedTextBox);
      var value1 = !isNullOrUndefined(inputObj1.value) ? inputObj1.value.toString() : "";
      var value2 = !isNullOrUndefined(inputObj2.value) ? inputObj2.value.toString() : "";
      setStyleAndAttributes(element, {
        "data-value1": value1,
        "data-value2": value2
      });
    };
    FilterDialog2.prototype.validateTreeNode = function(e) {
      if (e.node.classList.contains(ICON_DISABLE)) {
        e.cancel = true;
      } else {
        return;
      }
    };
    FilterDialog2.prototype.updateCheckedState = function() {
      var filterDialog = this.dialogPopUp.element;
      var list = [].slice.call(this.memberTreeView.element.querySelectorAll("li"));
      var fieldName = filterDialog.getAttribute("data-fieldname");
      var uncheckedNodes = this.getUnCheckedNodes(fieldName);
      var checkedNodes = this.getCheckedNodes(fieldName);
      var firstNode = this.allMemberSelect.element.querySelector("li").querySelector("span." + CHECK_BOX_FRAME_CLASS);
      if (list.length > 0) {
        if (checkedNodes > 0) {
          if (uncheckedNodes > 0) {
            removeClass([firstNode], NODE_CHECK_CLASS);
            addClass([firstNode], NODE_STOP_CLASS);
            var checkBoxNodes = this.allMemberSelect.element.querySelector("li");
            checkBoxNodes.setAttribute("aria-checked", "false");
          } else if (uncheckedNodes === 0) {
            removeClass([firstNode], NODE_STOP_CLASS);
            addClass([firstNode], NODE_CHECK_CLASS);
          }
          this.dialogPopUp.buttons[0].buttonModel.disabled = false;
          filterDialog.querySelector("." + OK_BUTTON_CLASS).removeAttribute("disabled");
        } else if (uncheckedNodes > 0 && checkedNodes === 0) {
          removeClass([firstNode], [NODE_CHECK_CLASS, NODE_STOP_CLASS]);
          if (this.getCheckedNodes(fieldName) === checkedNodes) {
            this.dialogPopUp.buttons[0].buttonModel.disabled = true;
            filterDialog.querySelector("." + OK_BUTTON_CLASS).setAttribute("disabled", "disabled");
          }
        }
      } else {
        this.dialogPopUp.buttons[0].buttonModel.disabled = true;
        filterDialog.querySelector("." + OK_BUTTON_CLASS).setAttribute("disabled", "disabled");
      }
    };
    FilterDialog2.prototype.getCheckedNodes = function(fieldName) {
      var engineModule = this.parent.engineModule;
      var nodeList = [];
      var checkeNodes = [];
      if (this.parent.dataType === "olap" && engineModule && !engineModule.fieldList[fieldName].isHierarchy) {
        nodeList = this.memberTreeView.getAllCheckedNodes();
        return nodeList.length;
      } else {
        for (var _i = 0, _a = this.parent.searchTreeItems; _i < _a.length; _i++) {
          var item = _a[_i];
          if (item.isSelected) {
            checkeNodes.push(item);
          }
        }
        return checkeNodes.length;
      }
    };
    FilterDialog2.prototype.getUnCheckedNodes = function(fieldName) {
      var unCheckeNodes = [];
      var nodeList = [];
      var engineModule = this.parent.engineModule;
      if (this.parent.dataType === "olap" && engineModule && !engineModule.fieldList[fieldName].isHierarchy) {
        nodeList = this.memberTreeView.getAllCheckedNodes();
        return this.memberTreeView.fields.dataSource.length - nodeList.length;
      } else {
        for (var _i = 0, _a = this.parent.searchTreeItems; _i < _a.length; _i++) {
          var item = _a[_i];
          if (!item.isSelected) {
            unCheckeNodes.push(item);
          }
        }
        return unCheckeNodes.length;
      }
    };
    FilterDialog2.prototype.isExcelFilter = function(fieldName) {
      var isFilterField = false;
      for (var _i = 0, _a = this.parent.dataSourceSettings.filters; _i < _a.length; _i++) {
        var field = _a[_i];
        if (field.name === fieldName) {
          isFilterField = true;
          break;
        }
      }
      if (!isFilterField && (this.parent.dataSourceSettings.allowLabelFilter || this.parent.dataSourceSettings.allowValueFilter)) {
        return true;
      } else {
        return false;
      }
    };
    FilterDialog2.prototype.getFilterObject = function(fieldName) {
      var filterObj = PivotUtil.getFilterItemByName(fieldName, PivotUtil.cloneFilterSettings(this.parent.dataSourceSettings.filterSettings));
      if (filterObj && (["Label", "Date", "Number"].indexOf(filterObj.type) >= 0 && this.parent.dataSourceSettings.allowLabelFilter || filterObj.type === "Value" && this.parent.dataSourceSettings.allowValueFilter || ["Include", "Exclude"].indexOf(filterObj.type) >= 0 && this.parent.eventBase.isValidFilterItemsAvail(fieldName, filterObj))) {
        return filterObj;
      }
      return void 0;
    };
    FilterDialog2.prototype.wireEvent = function(element, fieldName) {
      EventHandler.add(element, "click", this.applySorting.bind(this, fieldName), this);
    };
    FilterDialog2.prototype.unWireEvent = function(element) {
      EventHandler.remove(element, "click", this.applySorting);
    };
    FilterDialog2.prototype.closeFilterDialog = function() {
      this.dialogPopUp.close();
    };
    FilterDialog2.prototype.removeFilterDialog = function() {
      if (this.editorSearch && !this.editorSearch.isDestroyed) {
        this.editorSearch.destroy();
        this.editorSearch = null;
      }
      if (this.allowExcelLikeFilter) {
        if (this.tabObj && !this.tabObj.isDestroyed) {
          this.tabObj.destroy();
          this.tabObj = null;
        }
      }
      if (this.dropMenu && !this.dropMenu.isDestroyed) {
        this.dropMenu.destroy();
        this.dropMenu = null;
      }
      if (this.memberTreeView && !this.memberTreeView.isDestroyed) {
        this.memberTreeView.destroy();
        this.memberTreeView = null;
      }
      if (this.allMemberSelect && !this.allMemberSelect.isDestroyed) {
        this.allMemberSelect.destroy();
        this.allMemberSelect = null;
      }
      if (document.getElementById(this.parent.parentID + "_LevelDiv-popup")) {
        remove(document.getElementById(this.parent.parentID + "_LevelDiv-popup"));
      }
      if (this.dialogPopUp && !this.dialogPopUp.isDestroyed) {
        this.dialogPopUp.destroy();
        this.dialogPopUp = null;
        setTimeout(this.setFocus.bind(this));
      }
      if (document.getElementById(this.parent.parentID + "_EditorTreeView")) {
        remove(document.getElementById(this.parent.parentID + "_EditorTreeView"));
      }
    };
    FilterDialog2.prototype.setFocus = function() {
      if (this.parent.control.pivotButtonModule.parentElement) {
        var pivotButtons = [].slice.call(this.parent.control.pivotButtonModule.parentElement.querySelectorAll(".e-pivot-button"));
        for (var _i = 0, pivotButtons_1 = pivotButtons; _i < pivotButtons_1.length; _i++) {
          var item = pivotButtons_1[_i];
          if (item.getAttribute("data-uid") === this.parent.control.pivotButtonModule.fieldName) {
            item.focus();
            break;
          }
        }
      }
    };
    return FilterDialog2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/common/base/pivot-common.js
var PivotCommon = (
  /** @class */
  function() {
    function PivotCommon2(control) {
      this.currentTreeItems = [];
      this.savedTreeFilterPos = {};
      this.currentTreeItemsPos = {};
      this.searchTreeItems = [];
      this.isDataOverflow = false;
      this.isDateField = false;
      this.element = control.element;
      this.moduleName = control.moduleName;
      this.dataSourceSettings = control.dataSourceSettings;
      this.engineModule = control.pivotEngine;
      this.enableRtl = control.enableRtl;
      this.enableHtmlSanitizer = control.enableHtmlSanitizer;
      this.isAdaptive = control.isAdaptive;
      this.renderMode = control.renderMode;
      this.parentID = control.id;
      this.localeObj = control.localeObj;
      this.dataType = control.dataType;
      this.cssClass = control.cssClass;
      this.nodeStateModified = new NodeStateModified(this);
      this.dataSourceUpdate = new DataSourceUpdate(this);
      this.eventBase = new EventBase(this);
      this.filterDialog = new FilterDialog(this);
      this.errorDialog = new ErrorDialog(this);
      this.keyboardModule = new CommonKeyboardInteraction(this);
      return this;
    }
    PivotCommon2.prototype.destroy = function() {
      if (this.keyboardModule) {
        this.keyboardModule.destroy();
        this.keyboardModule = null;
      }
    };
    return PivotCommon2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/common/actions/common.js
var Common = (
  /** @class */
  function() {
    function Common2(parent) {
      this.parent = parent;
      this.parent.commonModule = this;
      this.addEventListener();
    }
    Common2.prototype.getModuleName = function() {
      return "common";
    };
    Common2.prototype.initiateCommonModule = function() {
      if (!this.parent.pivotCommon) {
        var args = {
          pivotEngine: this.parent.dataType === "olap" ? this.parent.olapEngineModule : this.parent.engineModule,
          dataSourceSettings: this.parent.dataSourceSettings.properties ? this.parent.dataSourceSettings.properties : this.parent.dataSourceSettings,
          id: this.parent.element.id,
          element: this.parent.element,
          moduleName: this.parent.getModuleName(),
          enableRtl: this.parent.enableRtl,
          enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
          isAdaptive: Browser.isDevice,
          renderMode: "Popup",
          localeObj: this.parent.localeObj,
          dataType: this.parent.dataType,
          cssClass: this.parent.cssClass
        };
        this.parent.pivotCommon = new PivotCommon(args);
      } else {
        this.parent.pivotCommon.element = this.parent.element;
        this.parent.pivotCommon.engineModule = this.parent.dataType === "olap" ? this.parent.olapEngineModule : this.parent.engineModule;
        this.parent.pivotCommon.parentID = this.parent.element.id;
        this.parent.pivotCommon.dataSourceSettings = this.parent.dataSourceSettings.properties ? this.parent.dataSourceSettings.properties : this.parent.dataSourceSettings;
        this.parent.pivotCommon.moduleName = this.parent.getModuleName();
        this.parent.pivotCommon.enableRtl = this.parent.enableRtl;
        this.parent.pivotCommon.isAdaptive = Browser.isDevice;
        this.parent.pivotCommon.renderMode = "Popup";
        this.parent.pivotCommon.localeObj = this.parent.localeObj;
        this.parent.pivotCommon.dataType = this.parent.dataType;
        this.parent.pivotCommon.cssClass = this.parent.cssClass;
      }
      this.parent.pivotCommon.control = this.parent;
    };
    Common2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(initialLoad, this.initiateCommonModule, this);
      this.parent.on(uiUpdate, this.initiateCommonModule, this);
    };
    Common2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(initialLoad, this.initiateCommonModule);
      this.parent.off(uiUpdate, this.initiateCommonModule);
    };
    Common2.prototype.destroy = function() {
      this.removeEventListener();
      if (this.parent.pivotCommon) {
        this.parent.pivotCommon.destroy();
        this.parent.pivotCommon = null;
      }
    };
    return Common2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/model/datasourcesettings.js
var __extends = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate2 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FieldOptions = (
  /** @class */
  function(_super) {
    __extends(FieldOptions2, _super);
    function FieldOptions2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate2([Property()], FieldOptions2.prototype, "name", void 0);
    __decorate2([Property()], FieldOptions2.prototype, "caption", void 0);
    __decorate2([Property("Sum")], FieldOptions2.prototype, "type", void 0);
    __decorate2([Property()], FieldOptions2.prototype, "axis", void 0);
    __decorate2([Property(false)], FieldOptions2.prototype, "showNoDataItems", void 0);
    __decorate2([Property()], FieldOptions2.prototype, "baseField", void 0);
    __decorate2([Property()], FieldOptions2.prototype, "baseItem", void 0);
    __decorate2([Property(true)], FieldOptions2.prototype, "showSubTotals", void 0);
    __decorate2([Property(false)], FieldOptions2.prototype, "isNamedSet", void 0);
    __decorate2([Property(false)], FieldOptions2.prototype, "isCalculatedField", void 0);
    __decorate2([Property(true)], FieldOptions2.prototype, "showFilterIcon", void 0);
    __decorate2([Property(true)], FieldOptions2.prototype, "showSortIcon", void 0);
    __decorate2([Property(true)], FieldOptions2.prototype, "showRemoveIcon", void 0);
    __decorate2([Property(true)], FieldOptions2.prototype, "showValueTypeIcon", void 0);
    __decorate2([Property(true)], FieldOptions2.prototype, "showEditIcon", void 0);
    __decorate2([Property(true)], FieldOptions2.prototype, "allowDragAndDrop", void 0);
    __decorate2([Property()], FieldOptions2.prototype, "dataType", void 0);
    __decorate2([Property(false)], FieldOptions2.prototype, "expandAll", void 0);
    __decorate2([Property()], FieldOptions2.prototype, "groupName", void 0);
    return FieldOptions2;
  }(ChildProperty)
);
var FieldListFieldOptions = (
  /** @class */
  function(_super) {
    __extends(FieldListFieldOptions2, _super);
    function FieldListFieldOptions2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return FieldListFieldOptions2;
  }(FieldOptions)
);
var Style = (
  /** @class */
  function(_super) {
    __extends(Style2, _super);
    function Style2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate2([Property()], Style2.prototype, "backgroundColor", void 0);
    __decorate2([Property()], Style2.prototype, "color", void 0);
    __decorate2([Property()], Style2.prototype, "fontFamily", void 0);
    __decorate2([Property()], Style2.prototype, "fontSize", void 0);
    return Style2;
  }(ChildProperty)
);
var Filter = (
  /** @class */
  function(_super) {
    __extends(Filter2, _super);
    function Filter2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate2([Property()], Filter2.prototype, "name", void 0);
    __decorate2([Property("Include")], Filter2.prototype, "type", void 0);
    __decorate2([Property()], Filter2.prototype, "items", void 0);
    __decorate2([Property("DoesNotEquals")], Filter2.prototype, "condition", void 0);
    __decorate2([Property()], Filter2.prototype, "value1", void 0);
    __decorate2([Property()], Filter2.prototype, "value2", void 0);
    __decorate2([Property()], Filter2.prototype, "measure", void 0);
    __decorate2([Property(1)], Filter2.prototype, "levelCount", void 0);
    __decorate2([Property()], Filter2.prototype, "selectedField", void 0);
    return Filter2;
  }(ChildProperty)
);
var ConditionalFormatSettings = (
  /** @class */
  function(_super) {
    __extends(ConditionalFormatSettings2, _super);
    function ConditionalFormatSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate2([Property()], ConditionalFormatSettings2.prototype, "measure", void 0);
    __decorate2([Property()], ConditionalFormatSettings2.prototype, "label", void 0);
    __decorate2([Property()], ConditionalFormatSettings2.prototype, "conditions", void 0);
    __decorate2([Property()], ConditionalFormatSettings2.prototype, "value1", void 0);
    __decorate2([Property()], ConditionalFormatSettings2.prototype, "value2", void 0);
    __decorate2([Property()], ConditionalFormatSettings2.prototype, "style", void 0);
    __decorate2([Property(true)], ConditionalFormatSettings2.prototype, "applyGrandTotals", void 0);
    return ConditionalFormatSettings2;
  }(ChildProperty)
);
var Sort = (
  /** @class */
  function(_super) {
    __extends(Sort2, _super);
    function Sort2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate2([Property()], Sort2.prototype, "name", void 0);
    __decorate2([Property("Ascending")], Sort2.prototype, "order", void 0);
    __decorate2([Property([])], Sort2.prototype, "membersOrder", void 0);
    return Sort2;
  }(ChildProperty)
);
var FormatSettings = (
  /** @class */
  function(_super) {
    __extends(FormatSettings2, _super);
    function FormatSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate2([Property()], FormatSettings2.prototype, "name", void 0);
    __decorate2([Property()], FormatSettings2.prototype, "minimumFractionDigits", void 0);
    __decorate2([Property()], FormatSettings2.prototype, "maximumFractionDigits", void 0);
    __decorate2([Property()], FormatSettings2.prototype, "minimumSignificantDigits", void 0);
    __decorate2([Property()], FormatSettings2.prototype, "maximumSignificantDigits", void 0);
    __decorate2([Property(true)], FormatSettings2.prototype, "useGrouping", void 0);
    __decorate2([Property()], FormatSettings2.prototype, "skeleton", void 0);
    __decorate2([Property()], FormatSettings2.prototype, "type", void 0);
    __decorate2([Property()], FormatSettings2.prototype, "currency", void 0);
    __decorate2([Property()], FormatSettings2.prototype, "minimumIntegerDigits", void 0);
    __decorate2([Property()], FormatSettings2.prototype, "format", void 0);
    return FormatSettings2;
  }(ChildProperty)
);
var GroupSettings = (
  /** @class */
  function(_super) {
    __extends(GroupSettings2, _super);
    function GroupSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate2([Property()], GroupSettings2.prototype, "name", void 0);
    __decorate2([Property()], GroupSettings2.prototype, "groupInterval", void 0);
    __decorate2([Property()], GroupSettings2.prototype, "startingAt", void 0);
    __decorate2([Property()], GroupSettings2.prototype, "endingAt", void 0);
    __decorate2([Property("Date")], GroupSettings2.prototype, "type", void 0);
    __decorate2([Property()], GroupSettings2.prototype, "rangeInterval", void 0);
    __decorate2([Property()], GroupSettings2.prototype, "caption", void 0);
    __decorate2([Property()], GroupSettings2.prototype, "customGroups", void 0);
    return GroupSettings2;
  }(ChildProperty)
);
var CustomGroups = (
  /** @class */
  function(_super) {
    __extends(CustomGroups2, _super);
    function CustomGroups2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate2([Property()], CustomGroups2.prototype, "groupName", void 0);
    __decorate2([Property([])], CustomGroups2.prototype, "items", void 0);
    return CustomGroups2;
  }(ChildProperty)
);
var CalculatedFieldSettings = (
  /** @class */
  function(_super) {
    __extends(CalculatedFieldSettings2, _super);
    function CalculatedFieldSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate2([Property()], CalculatedFieldSettings2.prototype, "name", void 0);
    __decorate2([Property()], CalculatedFieldSettings2.prototype, "formula", void 0);
    __decorate2([Property()], CalculatedFieldSettings2.prototype, "hierarchyUniqueName", void 0);
    __decorate2([Property()], CalculatedFieldSettings2.prototype, "formatString", void 0);
    return CalculatedFieldSettings2;
  }(ChildProperty)
);
var DrillOptions = (
  /** @class */
  function(_super) {
    __extends(DrillOptions2, _super);
    function DrillOptions2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate2([Property()], DrillOptions2.prototype, "name", void 0);
    __decorate2([Property()], DrillOptions2.prototype, "items", void 0);
    __decorate2([Property()], DrillOptions2.prototype, "delimiter", void 0);
    return DrillOptions2;
  }(ChildProperty)
);
var ValueSortSettings = (
  /** @class */
  function(_super) {
    __extends(ValueSortSettings2, _super);
    function ValueSortSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate2([Property()], ValueSortSettings2.prototype, "headerText", void 0);
    __decorate2([Property(".")], ValueSortSettings2.prototype, "headerDelimiter", void 0);
    __decorate2([Property("None")], ValueSortSettings2.prototype, "sortOrder", void 0);
    __decorate2([Property()], ValueSortSettings2.prototype, "measure", void 0);
    return ValueSortSettings2;
  }(ChildProperty)
);
var Authentication = (
  /** @class */
  function(_super) {
    __extends(Authentication2, _super);
    function Authentication2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate2([Property()], Authentication2.prototype, "userName", void 0);
    __decorate2([Property()], Authentication2.prototype, "password", void 0);
    return Authentication2;
  }(ChildProperty)
);
var DataSourceSettings = (
  /** @class */
  function(_super) {
    __extends(DataSourceSettings2, _super);
    function DataSourceSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate2([Property("Local")], DataSourceSettings2.prototype, "mode", void 0);
    __decorate2([Property()], DataSourceSettings2.prototype, "catalog", void 0);
    __decorate2([Property()], DataSourceSettings2.prototype, "cube", void 0);
    __decorate2([Property()], DataSourceSettings2.prototype, "roles", void 0);
    __decorate2([Property("Relational")], DataSourceSettings2.prototype, "providerType", void 0);
    __decorate2([Property()], DataSourceSettings2.prototype, "url", void 0);
    __decorate2([Property(1033)], DataSourceSettings2.prototype, "localeIdentifier", void 0);
    __decorate2([Property()], DataSourceSettings2.prototype, "dataSource", void 0);
    __decorate2([Collection([], FieldOptions)], DataSourceSettings2.prototype, "rows", void 0);
    __decorate2([Collection([], FieldOptions)], DataSourceSettings2.prototype, "columns", void 0);
    __decorate2([Collection([], FieldOptions)], DataSourceSettings2.prototype, "values", void 0);
    __decorate2([Collection([], FieldOptions)], DataSourceSettings2.prototype, "filters", void 0);
    __decorate2([Collection([], FieldOptions)], DataSourceSettings2.prototype, "fieldMapping", void 0);
    __decorate2([Property([])], DataSourceSettings2.prototype, "excludeFields", void 0);
    __decorate2([Property(false)], DataSourceSettings2.prototype, "expandAll", void 0);
    __decorate2([Property("column")], DataSourceSettings2.prototype, "valueAxis", void 0);
    __decorate2([Property(-1)], DataSourceSettings2.prototype, "valueIndex", void 0);
    __decorate2([Collection([], Filter)], DataSourceSettings2.prototype, "filterSettings", void 0);
    __decorate2([Collection([], Sort)], DataSourceSettings2.prototype, "sortSettings", void 0);
    __decorate2([Property(true)], DataSourceSettings2.prototype, "enableSorting", void 0);
    __decorate2([Property("JSON")], DataSourceSettings2.prototype, "type", void 0);
    __decorate2([Property(true)], DataSourceSettings2.prototype, "allowMemberFilter", void 0);
    __decorate2([Property(false)], DataSourceSettings2.prototype, "allowLabelFilter", void 0);
    __decorate2([Property(false)], DataSourceSettings2.prototype, "allowValueFilter", void 0);
    __decorate2([Property(true)], DataSourceSettings2.prototype, "showSubTotals", void 0);
    __decorate2([Property(true)], DataSourceSettings2.prototype, "showRowSubTotals", void 0);
    __decorate2([Property(true)], DataSourceSettings2.prototype, "showColumnSubTotals", void 0);
    __decorate2([Property("Auto")], DataSourceSettings2.prototype, "subTotalsPosition", void 0);
    __decorate2([Property(true)], DataSourceSettings2.prototype, "showGrandTotals", void 0);
    __decorate2([Property("Bottom")], DataSourceSettings2.prototype, "grandTotalsPosition", void 0);
    __decorate2([Property(true)], DataSourceSettings2.prototype, "showRowGrandTotals", void 0);
    __decorate2([Property(true)], DataSourceSettings2.prototype, "showColumnGrandTotals", void 0);
    __decorate2([Property(false)], DataSourceSettings2.prototype, "alwaysShowValueHeader", void 0);
    __decorate2([Property(true)], DataSourceSettings2.prototype, "showHeaderWhenEmpty", void 0);
    __decorate2([Property(true)], DataSourceSettings2.prototype, "showAggregationOnValueField", void 0);
    __decorate2([Collection([], FormatSettings)], DataSourceSettings2.prototype, "formatSettings", void 0);
    __decorate2([Collection([], DrillOptions)], DataSourceSettings2.prototype, "drilledMembers", void 0);
    __decorate2([Complex({}, ValueSortSettings)], DataSourceSettings2.prototype, "valueSortSettings", void 0);
    __decorate2([Collection([], CalculatedFieldSettings)], DataSourceSettings2.prototype, "calculatedFieldSettings", void 0);
    __decorate2([Collection([], ConditionalFormatSettings)], DataSourceSettings2.prototype, "conditionalFormatSettings", void 0);
    __decorate2([Property()], DataSourceSettings2.prototype, "emptyCellsTextContent", void 0);
    __decorate2([Collection([], GroupSettings)], DataSourceSettings2.prototype, "groupSettings", void 0);
    __decorate2([Complex({}, Authentication)], DataSourceSettings2.prototype, "authentication", void 0);
    return DataSourceSettings2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-pivotview/src/pivotview/model/gridsettings.js
var __extends2 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate3 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PivotSelectionSettings = (
  /** @class */
  function(_super) {
    __extends2(PivotSelectionSettings2, _super);
    function PivotSelectionSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate3([Property("Row")], PivotSelectionSettings2.prototype, "mode", void 0);
    __decorate3([Property("Flow")], PivotSelectionSettings2.prototype, "cellSelectionMode", void 0);
    __decorate3([Property("Single")], PivotSelectionSettings2.prototype, "type", void 0);
    __decorate3([Property(false)], PivotSelectionSettings2.prototype, "checkboxOnly", void 0);
    __decorate3([Property(false)], PivotSelectionSettings2.prototype, "persistSelection", void 0);
    __decorate3([Property("Default")], PivotSelectionSettings2.prototype, "checkboxMode", void 0);
    __decorate3([Property(false)], PivotSelectionSettings2.prototype, "enableSimpleMultiRowSelection", void 0);
    return PivotSelectionSettings2;
  }(ChildProperty)
);
var GridSettings = (
  /** @class */
  function(_super) {
    __extends2(GridSettings2, _super);
    function GridSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate3([Property("auto")], GridSettings2.prototype, "height", void 0);
    __decorate3([Property("auto")], GridSettings2.prototype, "width", void 0);
    __decorate3([Property("Both")], GridSettings2.prototype, "gridLines", void 0);
    __decorate3([Property(false)], GridSettings2.prototype, "allowTextWrap", void 0);
    __decorate3([Property(false)], GridSettings2.prototype, "allowReordering", void 0);
    __decorate3([Property(true)], GridSettings2.prototype, "allowResizing", void 0);
    __decorate3([Property(true)], GridSettings2.prototype, "allowAutoResizing", void 0);
    __decorate3([Property(null)], GridSettings2.prototype, "rowHeight", void 0);
    __decorate3([Property(110)], GridSettings2.prototype, "columnWidth", void 0);
    __decorate3([Property("Compact")], GridSettings2.prototype, "layout", void 0);
    __decorate3([Property("Ellipsis")], GridSettings2.prototype, "clipMode", void 0);
    __decorate3([Property(false)], GridSettings2.prototype, "allowSelection", void 0);
    __decorate3([Property(-1)], GridSettings2.prototype, "selectedRowIndex", void 0);
    __decorate3([Property({
      mode: "Row",
      cellSelectionMode: "Flow",
      type: "Single"
    })], GridSettings2.prototype, "selectionSettings", void 0);
    __decorate3([Property({
      wrapMode: "Both"
    })], GridSettings2.prototype, "textWrapSettings", void 0);
    __decorate3([Property("AllPages")], GridSettings2.prototype, "printMode", void 0);
    __decorate3([Property()], GridSettings2.prototype, "contextMenuItems", void 0);
    __decorate3([Event()], GridSettings2.prototype, "beforeCopy", void 0);
    __decorate3([Event()], GridSettings2.prototype, "printComplete", void 0);
    __decorate3([Event()], GridSettings2.prototype, "beforePrint", void 0);
    __decorate3([Event()], GridSettings2.prototype, "beforePdfExport", void 0);
    __decorate3([Event()], GridSettings2.prototype, "beforeExcelExport", void 0);
    __decorate3([Event()], GridSettings2.prototype, "contextMenuOpen", void 0);
    __decorate3([Event()], GridSettings2.prototype, "contextMenuClick", void 0);
    __decorate3([Event()], GridSettings2.prototype, "queryCellInfo", void 0);
    __decorate3([Event()], GridSettings2.prototype, "headerCellInfo", void 0);
    __decorate3([Event()], GridSettings2.prototype, "rowSelecting", void 0);
    __decorate3([Event()], GridSettings2.prototype, "rowSelected", void 0);
    __decorate3([Event()], GridSettings2.prototype, "rowDeselecting", void 0);
    __decorate3([Event()], GridSettings2.prototype, "rowDeselected", void 0);
    __decorate3([Event()], GridSettings2.prototype, "cellSelecting", void 0);
    __decorate3([Event()], GridSettings2.prototype, "cellSelected", void 0);
    __decorate3([Event()], GridSettings2.prototype, "cellDeselecting", void 0);
    __decorate3([Event()], GridSettings2.prototype, "cellDeselected", void 0);
    __decorate3([Event()], GridSettings2.prototype, "resizeStart", void 0);
    __decorate3([Event()], GridSettings2.prototype, "resizing", void 0);
    __decorate3([Event()], GridSettings2.prototype, "resizeStop", void 0);
    __decorate3([Event()], GridSettings2.prototype, "pdfHeaderQueryCellInfo", void 0);
    __decorate3([Event()], GridSettings2.prototype, "pdfQueryCellInfo", void 0);
    __decorate3([Event()], GridSettings2.prototype, "excelHeaderQueryCellInfo", void 0);
    __decorate3([Event()], GridSettings2.prototype, "excelQueryCellInfo", void 0);
    __decorate3([Event()], GridSettings2.prototype, "columnDragStart", void 0);
    __decorate3([Event()], GridSettings2.prototype, "columnDrag", void 0);
    __decorate3([Event()], GridSettings2.prototype, "columnDrop", void 0);
    __decorate3([Event()], GridSettings2.prototype, "columnRender", void 0);
    return GridSettings2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-pivotview/src/pivotview/actions/keyboard.js
var KeyboardInteraction = (
  /** @class */
  function() {
    function KeyboardInteraction2(parent) {
      this.keyConfigs = {
        tab: "tab",
        shiftTab: "shift+tab",
        enter: "enter",
        shiftUp: "shift+upArrow",
        shiftDown: "shift+downArrow",
        shiftLeft: "shift+leftArrow",
        shiftRight: "shift+rightArrow",
        shiftEnter: "shift+enter",
        ctrlEnter: "ctrl+enter",
        upArrow: "upArrow",
        downArrow: "downArrow",
        leftArrow: "leftArrow",
        rightArrow: "rightArrow",
        escape: "escape",
        ctrlShiftF: "ctrl+shift+f"
      };
      this.parent = parent;
      this.event = void 0;
      this.parent.element.tabIndex = this.parent.element.tabIndex === -1 ? 0 : this.parent.element.tabIndex;
      this.pivotViewKeyboardModule = new KeyboardEvents(this.parent.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
    }
    KeyboardInteraction2.prototype.keyActionHandler = function(e) {
      switch (e.action) {
        case "tab":
          this.processTab(e);
          break;
        case "shiftTab":
          this.processShiftTab(e);
          break;
        case "enter":
        case "shiftEnter":
        case "ctrlEnter":
          this.processEnter(e);
          break;
        case "shiftUp":
        case "shiftDown":
        case "shiftLeft":
        case "shiftRight":
        case "upArrow":
        case "downArrow":
        case "leftArrow":
        case "rightArrow":
          this.processSelection(e);
          break;
        case "escape":
          this.clearSelection();
          break;
        case "ctrlShiftF":
          this.toggleFieldList(e);
          break;
      }
    };
    KeyboardInteraction2.prototype.getNextButton = function(target) {
      var allPivotButtons = this.allpivotButtons(target);
      removeClass(allPivotButtons, "e-btn-focused");
      if (this.parent.grid.element.querySelector("." + PIVOT_BUTTON_CLASS)) {
        var len = allPivotButtons.length;
        for (var i = 0; i < len; i++) {
          if (allPivotButtons[i].getAttribute("data-uid") === target.getAttribute("data-uid")) {
            return allPivotButtons[i + 1] ? allPivotButtons[i + 1] : target;
          }
        }
      }
      return target;
    };
    KeyboardInteraction2.prototype.getPrevButton = function(target) {
      var allPivotButtons = this.allpivotButtons(target);
      removeClass(allPivotButtons, "e-btn-focused");
      if (this.parent.grid.element.querySelector("." + PIVOT_BUTTON_CLASS)) {
        var len = allPivotButtons.length;
        for (var i = 0; i < len; i++) {
          if (allPivotButtons[i].getAttribute("data-uid") === target.getAttribute("data-uid")) {
            return allPivotButtons[i - 1] ? allPivotButtons[i - 1] : target;
          }
        }
      }
      return target;
    };
    KeyboardInteraction2.prototype.allpivotButtons = function(target) {
      var buttons = [];
      if (target && this.parent.showGroupingBar) {
        var columnFilterValueGroup = closest(target, "." + GRID_GROUPING_BAR_CLASS);
        var rowGroup = closest(target, "." + GROUP_PIVOT_ROW);
        var chartGroup = closest(target, "." + CHART_GROUPING_BAR_CLASS);
        var tableAxis = target.classList.contains(ROWSHEADER);
        var chartAxis = void 0;
        var rowAxis = void 0;
        var columnFilterValueAxis = void 0;
        if (columnFilterValueGroup !== null) {
          rowAxis = columnFilterValueGroup.classList.contains(GRID_GROUPING_BAR_CLASS);
        } else if (rowGroup !== null) {
          columnFilterValueAxis = rowGroup.classList.contains(GROUP_PIVOT_ROW);
        } else if (chartGroup !== null) {
          chartAxis = chartGroup.classList.contains(CHART_GROUPING_BAR_CLASS);
        }
        if (rowAxis || columnFilterValueAxis || tableAxis) {
          var groupingbarButton = [].slice.call(this.parent.element.querySelector("." + GRID_GROUPING_BAR_CLASS).querySelectorAll("." + PIVOT_BUTTON_CLASS));
          var headerButton = [].slice.call(this.parent.element.querySelector("." + GROUP_PIVOT_ROW).querySelectorAll("." + PIVOT_BUTTON_CLASS));
          buttons = groupingbarButton.concat(headerButton);
        } else if (chartAxis) {
          buttons = [].slice.call(this.parent.element.querySelector("." + CHART_GROUPING_BAR_CLASS).querySelectorAll("." + PIVOT_BUTTON_CLASS));
        }
      }
      return buttons;
    };
    KeyboardInteraction2.prototype.processTab = function(e) {
      var target = e.target;
      if (target && (closest(target, "." + PIVOT_BUTTON_CLASS) || target.classList.contains("e-group-row"))) {
        if (this.parent.grid) {
          var gridFocus = this.parent.grid.serviceLocator.getService("focus");
          if (target.classList.contains("e-group-row") && target.querySelector(".e-btn-focused")) {
            target = target.querySelector(".e-btn-focused");
          } else if (target.classList.contains("e-group-row")) {
            gridFocus.focus();
            var element = gridFocus.getFocusedElement();
            addClass([element], ["e-focused", "e-focus"]);
            element.setAttribute("tabindex", "0");
            e.preventDefault();
            return;
          }
          var nextButton = this.getNextButton(target);
          if (nextButton.getAttribute("data-uid") !== target.getAttribute("data-uid")) {
            if (this.parent.element.querySelector(".e-focused")) {
              this.parent.element.querySelector(".e-focused").setAttribute("tabindex", "-1");
              removeClass(this.parent.element.querySelectorAll(".e-focus"), "e-focus");
              removeClass(this.parent.element.querySelectorAll(".e-focused"), "e-focused");
              gridFocus.setFocusedElement(this.parent.element.querySelector(".e-headercell"));
              this.parent.element.querySelector(".e-headercell").setAttribute("tabindex", "0");
            } else {
              gridFocus.currentInfo.skipAction = true;
            }
            addClass([nextButton], "e-btn-focused");
            nextButton.focus();
          } else {
            gridFocus.focus();
            var element = gridFocus.getFocusedElement();
            addClass([element], ["e-focused", "e-focus"]);
            element.setAttribute("tabindex", "0");
          }
          e.preventDefault();
          return;
        }
      } else if (!this.parent.showGroupingBar && this.parent.showFieldList && target && closest(target, "." + TOGGLE_FIELD_LIST_CLASS)) {
        if (this.parent.grid) {
          var gridFocus = this.parent.grid.serviceLocator.getService("focus");
          gridFocus.focus();
          var element = gridFocus.getFocusedElement();
          addClass([element], ["e-focused", "e-focus"]);
          element.setAttribute("tabindex", "0");
          e.preventDefault();
          return;
        }
      } else if (!this.parent.showGroupingBar && !this.parent.showFieldList && target && closest(target, "." + PIVOT_VIEW_CLASS) && !closest(target, ".e-popup.e-popup-open")) {
        if (this.parent.grid) {
          var gridElement = closest(target, "." + PIVOT_VIEW_CLASS);
          var gridFocus = this.parent.grid.serviceLocator.getService("focus");
          var rows = [].slice.call(gridElement.getElementsByTagName("tr"));
          if (target.innerHTML === rows[rows.length - 1].lastChild.innerHTML) {
            gridFocus.currentInfo.skipAction = true;
          } else {
            gridFocus.focus();
            var element = gridFocus.getFocusedElement();
            addClass([element], ["e-focused", "e-focus"]);
            element.setAttribute("tabindex", "0");
            e.preventDefault();
            return;
          }
        }
      } else if (target && closest(target, "." + GRID_TOOLBAR) && this.parent.toolbar && this.parent.toolbarModule) {
        clearTimeout(this.timeOutObj);
        this.timeOutObj = setTimeout(function() {
          removeClass(closest(target, "." + GRID_TOOLBAR).querySelectorAll(".e-menu-item.e-focused"), "e-focused");
          if (document.activeElement && document.activeElement.classList.contains("e-menu-item")) {
            addClass([document.activeElement], "e-focused");
          }
        });
      } else if (target.classList.contains("e-numerictextbox")) {
        var gridFocus = this.parent.grid.serviceLocator.getService("focus");
        gridFocus.focus();
        var element = gridFocus.getFocusedElement();
        removeClass([element], ["e-focused", "e-focus"]);
        element.setAttribute("tabindex", "0");
        e.preventDefault();
      }
    };
    KeyboardInteraction2.prototype.processShiftTab = function(e) {
      var target = e.target;
      if (target && (closest(target, "." + PIVOT_BUTTON_CLASS) || target.classList.contains("e-group-row"))) {
        if (this.parent.grid) {
          var gridFocus = this.parent.grid.serviceLocator.getService("focus");
          if (target.classList.contains("e-group-row") && target.querySelector(".e-btn-focused")) {
            target = target.querySelector(".e-btn-focused");
          } else if (target.classList.contains("e-group-row")) {
            target = this.parent.element.querySelector(".e-btn-focused") ? this.parent.element.querySelector(".e-btn-focused") : this.parent.element.querySelector("." + GRID_GROUPING_BAR_CLASS);
            var allPivotButtons = this.allpivotButtons(target);
            if (allPivotButtons.length > 0 && allPivotButtons[allPivotButtons.length - 1]) {
              gridFocus.currentInfo.skipAction = true;
              allPivotButtons[allPivotButtons.length - 1].focus();
              removeClass(allPivotButtons, "e-btn-focused");
              addClass([allPivotButtons[allPivotButtons.length - 1]], "e-btn-focused");
              e.preventDefault();
              return;
            }
          }
          var prevButton = this.getPrevButton(target);
          if (prevButton.getAttribute("data-uid") !== target.getAttribute("data-uid")) {
            gridFocus.currentInfo.skipAction = true;
            prevButton.focus();
            e.preventDefault();
            return;
          }
        }
      } else if (target && this.parent.grid && (target.classList.contains("e-movablefirst") || target.classList.contains("e-rowsheader") && closest(target, "tr").getAttribute("data-uid") === this.parent.grid.element.querySelector(".e-frozencontent tr").getAttribute("data-uid"))) {
        var gridFocus = this.parent.grid.serviceLocator.getService("focus");
        if (target.classList.contains("e-movablefirst")) {
          target = this.parent.element.querySelector("." + GROUP_ROW_CLASS + " .e-btn-focused") ? this.parent.element.querySelector("." + GROUP_ROW_CLASS + " .e-btn-focused") : this.parent.element.querySelector("." + GROUP_ROW_CLASS);
          var element = gridFocus.getFocusedElement();
          removeClass([element], ["e-focused", "e-focus"]);
        }
        var allPivotButtons_1 = this.allpivotButtons(target);
        if (allPivotButtons_1.length > 0) {
          gridFocus.currentInfo.skipAction = true;
          setTimeout(function() {
            allPivotButtons_1[allPivotButtons_1.length - 1].focus();
          });
          removeClass(allPivotButtons_1, "e-btn-focused");
          addClass([allPivotButtons_1[allPivotButtons_1.length - 1]], "e-btn-focused");
          e.preventDefault();
          return;
        }
      } else if (target && closest(target, "." + GRID_TOOLBAR) && this.parent.toolbar && this.parent.toolbarModule) {
        clearTimeout(this.timeOutObj);
        this.timeOutObj = setTimeout(function() {
          removeClass(closest(target, "." + GRID_TOOLBAR).querySelectorAll(".e-menu-item.e-focused"), "e-focused");
          if (document.activeElement && document.activeElement.classList.contains("e-menu-item")) {
            addClass([document.activeElement], "e-focused");
          }
        });
      } else if (target.classList.contains("e-numerictextbox")) {
        var gridFocus = this.parent.grid.serviceLocator.getService("focus");
        gridFocus.focus();
        var element = gridFocus.getFocusedElement();
        removeClass([element], ["e-focused", "e-focus"]);
        element.setAttribute("tabindex", "0");
        e.preventDefault();
      }
    };
    KeyboardInteraction2.prototype.processEnter = function(e) {
      var target = e.target;
      if (target && closest(target, "." + GRID_CLASS)) {
        var gridFocus = this.parent.grid.serviceLocator.getService("focus");
        if (e.keyCode === 13 && !e.shiftKey && !e.ctrlKey) {
          if (target.querySelector("." + ICON)) {
            this.event = e;
            target.querySelector("." + ICON).click();
            gridFocus.focus();
            var element = gridFocus.getFocusedElement();
            addClass([element], ["e-focused", "e-focus"]);
            element.setAttribute("tabindex", "0");
          } else if (target.classList.contains("e-valuescontent")) {
            target.dispatchEvent(new MouseEvent("dblclick", {
              "view": window,
              "bubbles": true,
              "cancelable": true
            }));
            if (target.querySelector(".e-numerictextbox")) {
              target.click();
            }
          } else if (target.classList.contains("e-numerictextbox")) {
            gridFocus.focus();
            var element = gridFocus.getFocusedElement();
            removeClass([element], ["e-focused", "e-focus"]);
          }
        } else if (e.keyCode === 13 && e.shiftKey && !e.ctrlKey) {
          if (this.parent.enableValueSorting) {
            this.event = e;
            target.click();
            gridFocus.focus();
            var element = gridFocus.getFocusedElement();
            addClass([element], ["e-focused", "e-focus"]);
            element.setAttribute("tabindex", "0");
          }
        } else if (e.keyCode === 13 && !e.shiftKey && e.ctrlKey) {
          if (this.parent.hyperlinkSettings && target.querySelector("a")) {
            target.querySelector("a").click();
          }
        }
        e.preventDefault();
        return;
      }
    };
    KeyboardInteraction2.prototype.clearSelection = function() {
      var control = this.parent;
      removeClass(control.element.querySelectorAll("." + CELL_SELECTED_BGCOLOR + ",." + SELECTED_BGCOLOR), [SELECTED_BGCOLOR, CELL_SELECTED_BGCOLOR, CELL_ACTIVE_BGCOLOR]);
      this.parent.renderModule.selected();
    };
    KeyboardInteraction2.prototype.processSelection = function(e) {
      var target = e.target;
      if (this.parent.grid && this.parent.gridSettings.allowSelection && this.parent.gridSettings.selectionSettings.mode !== "Row" && !target.classList.contains("e-numerictextbox")) {
        var control_1 = this.parent;
        var colIndex_1 = parseInt(e.target.getAttribute("aria-colindex"), 10) - 1;
        var rowIndex_1 = Number(e.target.getAttribute("index"));
        var ele_1;
        if (target.nodeName === "TH" || target.nodeName === "TD") {
          if (e.action === "shiftUp" || e.action === "upArrow") {
            ele_1 = rowIndex_1 === 0 || colIndex_1 === 0 || target.nodeName !== "TH" && control_1.renderModule.rowStartPos !== rowIndex_1 ? null : this.getParentElement(control_1, ele_1, colIndex_1, rowIndex_1 - 1);
          } else if (e.action === "shiftDown" || e.action === "downArrow") {
            ele_1 = control_1.element.querySelector('th[aria-colindex="' + (colIndex_1 + 1) + '"][index="' + (rowIndex_1 + 1) + '"]');
          } else if (e.action === "shiftLeft" || e.action === "leftArrow") {
            ele_1 = e.target.previousSibling;
          } else {
            ele_1 = e.target.nextSibling;
          }
        }
        if (!isNullOrUndefined(ele_1)) {
          if (control_1.gridSettings.selectionSettings.mode === "Both" ? !ele_1.classList.contains(ROW_CELL_CLASS) : true) {
            colIndex_1 = parseInt(ele_1.getAttribute("aria-colindex"), 10) - 1;
            rowIndex_1 = Number(ele_1.getAttribute("index"));
            var colSpan_1 = Number(ele_1.getAttribute("aria-colspan"));
            control_1.clearSelection(ele_1, e);
            var selectArgs = {
              cancel: false,
              isCellClick: true,
              currentCell: ele_1,
              data: control_1.pivotValues[rowIndex_1][colIndex_1]
            };
            control_1.trigger(cellSelecting, selectArgs, function(observedArgs) {
              if (!observedArgs.cancel) {
                control_1.applyColumnSelection(e, ele_1, colIndex_1, colIndex_1 + (colSpan_1 > 0 ? colSpan_1 - 1 : 0), rowIndex_1);
              }
            });
          } else {
            control_1.clearSelection(ele_1, e);
          }
        } else {
          if (e.action === "upArrow") {
            ele_1 = control_1.element.querySelector('[aria-colindex="' + (colIndex_1 + 1) + '"][index="' + (rowIndex_1 - 1) + '"]');
            rowIndex_1--;
          } else if (e.action === "downArrow") {
            ele_1 = control_1.element.querySelector('[aria-colindex="' + (colIndex_1 + 1) + '"][index="' + (rowIndex_1 + 1) + '"]');
            rowIndex_1++;
          }
          if (!isNullOrUndefined(ele_1)) {
            control_1.clearSelection(ele_1, e);
          }
        }
      } else if (target && (e.keyCode === 37 || e.keyCode === 38) && this.parent && this.parent.showGroupingBar && this.parent.groupingBarModule && !target.classList.contains("e-numerictextbox")) {
        if (this.parent.grid && this.parent.element.querySelector(".e-frozenheader") && this.parent.element.querySelector(".e-frozenheader").querySelectorAll(".e-focus").length > 0) {
          removeClass(this.parent.element.querySelector(".e-frozenheader").querySelectorAll(".e-focus"), "e-focus");
          removeClass(this.parent.element.querySelector(".e-frozenheader").querySelectorAll(".e-focused"), "e-focused");
          this.parent.element.querySelector(".e-headercell").setAttribute("tabindex", "-1");
          var gridFocus = this.parent.grid.serviceLocator.getService("focus");
          gridFocus.setFocusedElement(target);
          addClass([target], ["e-focused", "e-focus"]);
          target.setAttribute("tabindex", "0");
          target.focus();
          e.preventDefault();
          return;
        }
      } else if (target.classList.contains("e-numerictextbox") && (e.action === "rightArrow" || e.action === "leftArrow")) {
        target.click();
      }
    };
    KeyboardInteraction2.prototype.getParentElement = function(control, ele, colIndex, rowIndex) {
      while (!ele) {
        ele = control.element.querySelector('[aria-colindex="' + (colIndex + 1) + '"][index="' + rowIndex + '"]');
        colIndex--;
      }
      return ele;
    };
    KeyboardInteraction2.prototype.toggleFieldList = function(e) {
      if (this.parent && !this.parent.isDestroyed && this.parent.showFieldList && this.parent.pivotFieldListModule && !this.parent.pivotFieldListModule.isDestroyed && this.parent.element.querySelector("." + TOGGLE_FIELD_LIST_CLASS)) {
        if (!this.parent.element.querySelector("." + TOGGLE_FIELD_LIST_CLASS).classList.contains(ICON_HIDDEN)) {
          this.parent.element.querySelector("." + TOGGLE_FIELD_LIST_CLASS).click();
          e.preventDefault();
          return;
        } else if (this.parent.element.querySelector("." + TOGGLE_FIELD_LIST_CLASS).classList.contains(ICON_HIDDEN) && this.parent.pivotFieldListModule.dialogRenderer && this.parent.pivotFieldListModule.dialogRenderer.fieldListDialog && !this.parent.pivotFieldListModule.dialogRenderer.fieldListDialog.isDestroyed) {
          this.parent.pivotFieldListModule.dialogRenderer.fieldListDialog.hide();
        }
      }
    };
    KeyboardInteraction2.prototype.destroy = function() {
      if (this.pivotViewKeyboardModule) {
        this.pivotViewKeyboardModule.destroy();
      } else {
        return;
      }
    };
    return KeyboardInteraction2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/common/popups/context-menu.js
var PivotContextMenu = (
  /** @class */
  function() {
    function PivotContextMenu2(parent) {
      this.parent = parent;
      this.parent.contextMenuModule = this;
    }
    PivotContextMenu2.prototype.render = function() {
      this.renderContextMenu();
    };
    PivotContextMenu2.prototype.renderContextMenu = function() {
      var menuItems = [{
        text: this.parent.localeObj.getConstant("addToFilter"),
        id: this.parent.element.id + "_Filters"
      }, {
        text: this.parent.localeObj.getConstant("addToRow"),
        id: this.parent.element.id + "_Rows"
      }, {
        text: this.parent.localeObj.getConstant("addToColumn"),
        id: this.parent.element.id + "_Columns"
      }, {
        text: this.parent.localeObj.getConstant("addToValue"),
        id: this.parent.element.id + "_Values"
      }];
      var menuOptions = {
        cssClass: PIVOT_CONTEXT_MENU_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
        items: menuItems,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        beforeOpen: this.onBeforeMenuOpen.bind(this),
        select: this.onSelectContextMenu.bind(this)
      };
      var cMenu = createElement("ul", {
        id: this.parent.element.id + "_PivotContextMenu"
      });
      this.parent.element.appendChild(cMenu);
      this.menuObj = new ContextMenu(menuOptions);
      this.menuObj.isStringTemplate = true;
      this.menuObj.appendTo(cMenu);
    };
    PivotContextMenu2.prototype.onBeforeMenuOpen = function(args) {
      var items = [].slice.call(args.element.querySelectorAll("li"));
      var fieldType = this.parent.dataType === "olap" ? this.fieldElement.getAttribute("data-type") : this.fieldElement.querySelector("." + PIVOT_BUTTON_CONTENT_CLASS).getAttribute("data-type");
      removeClass(items, MENU_DISABLE);
      if (fieldType === "CalculatedField" || fieldType === "isMeasureFieldsAvail") {
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
          var item = items_1[_i];
          if (item.textContent !== this.parent.localeObj.getConstant("addToValue")) {
            addClass([item], MENU_DISABLE);
          }
        }
      } else if (fieldType === "isMeasureAvail") {
        for (var _a = 0, items_2 = items; _a < items_2.length; _a++) {
          var item = items_2[_a];
          if (item.textContent !== this.parent.localeObj.getConstant("addToRow") && item.textContent !== this.parent.localeObj.getConstant("addToColumn")) {
            addClass([item], MENU_DISABLE);
          }
        }
      } else if (this.parent.dataType === "olap") {
        for (var _b = 0, items_3 = items; _b < items_3.length; _b++) {
          var item = items_3[_b];
          if (item.textContent === this.parent.localeObj.getConstant("addToValue")) {
            addClass([item], MENU_DISABLE);
            break;
          }
        }
      } else if (this.fieldElement.getAttribute("isvalue") === "true") {
        for (var _c = 0, items_4 = items; _c < items_4.length; _c++) {
          var item = items_4[_c];
          if (item.textContent === this.parent.localeObj.getConstant("addToValue") || item.textContent === this.parent.localeObj.getConstant("addToFilter")) {
            addClass([item], MENU_DISABLE);
          }
        }
      }
    };
    PivotContextMenu2.prototype.onSelectContextMenu = function(menu) {
      if (menu.element.textContent !== null) {
        var fieldName = this.fieldElement.getAttribute("data-uid");
        var dropClass = menu.item.id.replace(this.parent.element.id + "_", "").toLowerCase();
        this.parent.pivotCommon.dataSourceUpdate.control = this.parent.getModuleName() === "pivotview" ? this.parent : this.parent.pivotGridModule ? this.parent.pivotGridModule : this.parent;
        this.parent.pivotCommon.dataSourceUpdate.btnElement = this.fieldElement;
        this.parent.pivotCommon.dataSourceUpdate.updateDataSource(fieldName, dropClass, -1);
        this.parent.updateDataSource(true);
        this.fieldElement = void 0;
      }
    };
    PivotContextMenu2.prototype.destroy = function() {
      if (!this.parent.isDestroyed) {
        return;
      }
      if (this.menuObj && !this.menuObj.isDestroyed) {
        this.menuObj.destroy();
        if (select("#" + this.parent.element.id + "_PivotContextMenu", document)) {
          remove(select("#" + this.parent.element.id + "_PivotContextMenu", document));
        }
      } else {
        return;
      }
    };
    return PivotContextMenu2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/pivotview/actions/virtualscroll.js
var VirtualScroll2 = (
  /** @class */
  function() {
    function VirtualScroll3(parent) {
      this.previousValues = {
        top: 0,
        left: 0
      };
      this.frozenPreviousValues = {
        top: 0,
        left: 0
      };
      this.eventType = "";
      this.isFireFox = Browser.userAgent.toLowerCase().indexOf("firefox") > -1;
      this.isScrolling = false;
      this.scrollingDirection = "Up";
      this.parent = parent;
      this.addInternalEvents();
    }
    VirtualScroll3.prototype.getModuleName = function() {
      return "virtualscroll";
    };
    VirtualScroll3.prototype.addInternalEvents = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(contentReady, this.wireEvents, this);
    };
    VirtualScroll3.prototype.wireEvents = function() {
      this.engineModule = this.parent.dataType === "pivot" ? this.parent.engineModule : this.parent.olapEngineModule;
      if (this.parent.displayOption.view !== "Chart") {
        var mCont = this.parent.element.querySelector("." + CONTENT_VIRTUALTABLE_DIV);
        var gridContent = this.parent.element.querySelector("." + GRID_CONTENT);
        var mHdr = this.parent.element.querySelector("." + MOVABLEHEADER_DIV);
        var mScrollBar = gridContent.querySelector("." + VIRTUALTABLE_DIV);
        EventHandler.clearEvents(mCont);
        if (this.isFireFox) {
          EventHandler.clearEvents(mHdr);
        }
        if (this.engineModule) {
          var ele = this.parent.isAdaptive ? mCont : gridContent.querySelector("." + VIRTUALTABLE_DIV);
          EventHandler.add(ele, "scroll touchmove pointermove", this.onHorizondalScroll(mHdr, mCont), this);
          EventHandler.add(mCont.parentElement, "scroll wheel touchmove pointermove", this.onHorizondalScroll(mHdr, mCont), this);
          EventHandler.add(mCont.parentElement, "scroll wheel touchmove pointermove keyup keydown", this.onVerticalScroll(mCont.parentElement, mCont), this);
          if (this.isFireFox) {
            EventHandler.add(ele, "mouseup touchend scroll", this.common(mHdr, mCont, mCont), this);
            if (!this.parent.isAdaptive) {
              EventHandler.add(mCont.parentElement, "mouseup touchend scroll", this.common(mHdr, mCont.parentElement, mCont), this);
            }
          } else {
            EventHandler.add(ele, "mouseup touchend", this.common(mHdr, mCont, mCont), this);
            if (!this.parent.isAdaptive) {
              EventHandler.add(mCont.parentElement, "mouseup touchend", this.common(mHdr, mCont.parentElement, mCont), this);
            }
          }
          EventHandler.add(mScrollBar, "scroll", this.onCustomScrollbarScroll(mCont, mHdr), this);
          EventHandler.add(mCont, "scroll", this.onCustomScrollbarScroll(mScrollBar, mHdr), this);
          EventHandler.add(mHdr, "scroll", this.onCustomScrollbarScroll(mScrollBar, mCont), this);
          EventHandler.add(mHdr, "touchstart pointerdown", this.setPageXY(), this);
          EventHandler.add(mHdr, "touchmove pointermove", this.onTouchScroll(mHdr, mCont), this);
          EventHandler.add(mCont, "touchstart pointerdown", this.setPageXY(), this);
          EventHandler.add(mCont, "touchmove pointermove", this.onTouchScroll(mHdr, mCont), this);
        }
        this.parent.grid.on("check-scroll-reset", function(args) {
          args.cancel = true;
        });
        this.parent.grid.on("prevent-frozen-scroll-refresh", function(args) {
          args.cancel = true;
        });
        this.parent.grid.isPreventScrollEvent = true;
      }
    };
    VirtualScroll3.prototype.onWheelScroll = function(mCont) {
      var _this = this;
      var element = mCont;
      return function(e) {
        var top = element.scrollTop + (e.deltaMode === 1 ? e.deltaY * 30 : e.deltaY);
        if (_this.frozenPreviousValues.top === top) {
          return;
        }
        e.preventDefault();
        _this.frozenPreviousValues.top = top;
        _this.eventType = e.type;
      };
    };
    VirtualScroll3.prototype.getPointXY = function(e) {
      var pageXY = {
        x: 0,
        y: 0
      };
      if (!(e.touches && e.touches.length)) {
        pageXY.x = e.pageX;
        pageXY.y = e.pageY;
      } else {
        pageXY.x = e.touches[0].pageX;
        pageXY.y = e.touches[0].pageY;
      }
      return pageXY;
    };
    VirtualScroll3.prototype.onCustomScrollbarScroll = function(mCont, mHdr) {
      var _this = this;
      var content = mCont;
      var header = mHdr;
      return function(e) {
        var eContent = _this.parent.element.querySelector("." + CONTENT_CLASS);
        if (eContent.querySelector("tbody") === null) {
          return;
        }
        var target = e.target;
        var left = target.scrollLeft;
        if (_this.previousValues.left === left || _this.isFireFox && target.classList.contains(MOVABLEHEADER_DIV)) {
          return;
        }
        content.scrollLeft = left;
        header.scrollLeft = left;
        if (_this.parent.isDestroyed) {
          return;
        }
      };
    };
    VirtualScroll3.prototype.onTouchScroll = function(mHdr, mCont) {
      var _this = this;
      var element = mCont;
      return function(e) {
        if (e.pointerType === "mouse") {
          return;
        }
        var pageXY = _this.getPointXY(e);
        var top = _this.parent.element.querySelector("." + GRID_CLASS + " ." + CONTENT_CLASS).scrollTop + (_this.pageXY.y - pageXY.y);
        var ele = _this.parent.isAdaptive ? mCont : element.parentElement.parentElement.querySelector("." + VIRTUALTABLE_DIV);
        var left = ele.scrollLeft + (_this.pageXY.x - pageXY.x);
        if (_this.frozenPreviousValues.left === left || left < 0) {
          return;
        }
        mHdr.scrollLeft = left;
        ele.scrollLeft = left;
        _this.pageXY.x = pageXY.x;
        _this.frozenPreviousValues.left = left;
        if (_this.frozenPreviousValues.top === top || top < 0) {
          return;
        }
        _this.pageXY.y = pageXY.y;
        _this.frozenPreviousValues.top = top;
        _this.eventType = e.type;
      };
    };
    VirtualScroll3.prototype.update = function(top, left, e, ele, mHdr, mCont) {
      var _this = this;
      var virtualTable = this.parent.element.querySelector("." + CONTENT_VIRTUALTABLE_DIV);
      this.parent.isScrolling = true;
      var engine = this.parent.dataType === "pivot" ? this.parent.engineModule : this.parent.olapEngineModule;
      var args = {
        dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings)
      };
      var enableOptimizedRendering = this.parent.virtualScrollSettings && this.parent.virtualScrollSettings.allowSinglePage && this.parent.dataType === "pivot";
      var pageCnt = this.parent.engineModule ? this.parent.engineModule.viewportPageCount : 3;
      if (this.parent.pageSettings && engine.pageSettings) {
        if (this.direction === "vertical") {
          var vScrollPos = mCont.parentElement.scrollHeight - (top + mCont.parentElement.offsetHeight);
          var rowValues = this.parent.dataType === "pivot" ? this.parent.dataSourceSettings.valueAxis === "row" ? this.parent.dataSourceSettings.values.length : 1 : 1;
          var exactSize = this.parent.pageSettings.rowPageSize * rowValues * this.parent.gridSettings.rowHeight;
          var section = this.scrollingDirection === "Up" ? Math.ceil(top / exactSize) : Math.ceil(top / exactSize) - 1;
          section += enableOptimizedRendering && vScrollPos <= 0 ? 1 : 0;
          if ((this.parent.scrollPosObject.vertical === section || engine.pageSettings.rowPageSize >= engine.rowCount || virtualTable && virtualTable.scrollHeight < virtualTable.parentElement.clientHeight * pageCnt) && !enableOptimizedRendering) {
            return;
          }
          this.parent.actionObj.actionName = verticalScroll;
          if (enableOptimizedRendering && this.parent.grid && this.parent.grid.element.querySelector(".e-spinner-inner")) {
            addClass([this.parent.grid.element.querySelector(".e-spinner-inner")], [PIVOT_HIDE_LOADER]);
          }
          this.parent.actionBeginMethod();
          if (!enableOptimizedRendering) {
            this.parent.showWaitingPopup();
          }
          this.parent.scrollPosObject.vertical = section;
          this.parent.pageSettings.currentRowPage = engine.pageSettings.currentRowPage = section > 1 ? section : 1;
          var rowStartPos_1 = 0;
          this.parent.trigger(enginePopulating, args, function() {
            if (_this.parent.dataType === "pivot") {
              if (_this.parent.dataSourceSettings.mode === "Server") {
                _this.parent.getEngine("onScroll", null, null, null, null, null, null);
              } else {
                _this.parent.engineModule.generateGridData(_this.parent.dataSourceSettings, true, false, _this.parent.engineModule.headerCollection, true);
                rowStartPos_1 = _this.parent.engineModule.rowStartPos;
              }
            } else {
              _this.parent.olapEngineModule.scrollPage();
              rowStartPos_1 = _this.parent.olapEngineModule.pageRowStartPos;
            }
            _this.enginePopulatedEventMethod(engine);
          });
          var exactPage = Math.ceil(rowStartPos_1 / (this.parent.pageSettings.rowPageSize * rowValues));
          var pos = exactSize * exactPage - engine.rowFirstLvl * rowValues * this.parent.gridSettings.rowHeight;
          this.parent.scrollPosObject.verticalSection = pos;
        } else {
          var hScrollPos = ele.scrollWidth - (ele.scrollLeft + ele.offsetWidth);
          var colValues = this.parent.dataType === "pivot" ? this.parent.dataSourceSettings.valueAxis === "column" ? this.parent.dataSourceSettings.values.length : 1 : 1;
          var exactSize = this.parent.pageSettings.columnPageSize * colValues * this.parent.gridSettings.columnWidth;
          var section = Math.ceil(Math.abs(left) / exactSize);
          var enableOptimizedRendering_1 = this.parent.virtualScrollSettings && this.parent.virtualScrollSettings.allowSinglePage && this.parent.dataType === "pivot";
          section += enableOptimizedRendering_1 && hScrollPos <= 0 ? 1 : 0;
          if ((this.parent.scrollPosObject.horizontal === section || virtualTable && virtualTable.scrollWidth < virtualTable.parentElement.clientWidth * pageCnt) && !enableOptimizedRendering_1) {
            return;
          }
          this.parent.actionObj.actionName = horizontalScroll;
          if (enableOptimizedRendering_1 && this.parent.grid && this.parent.grid.element.querySelector(".e-spinner-inner")) {
            addClass([this.parent.grid.element.querySelector(".e-spinner-inner")], [PIVOT_HIDE_LOADER]);
            if (mHdr) {
              removeClass([mHdr, mCont], ["e-virtual-pivot-content"]);
            }
          }
          this.parent.actionBeginMethod();
          if (!enableOptimizedRendering_1) {
            this.parent.showWaitingPopup();
          }
          var pivot_1 = this.parent;
          pivot_1.scrollPosObject.horizontal = section;
          this.parent.pageSettings.currentColumnPage = engine.pageSettings.currentColumnPage = section > 1 ? section : 1;
          var colStartPos_1 = 0;
          this.parent.trigger(enginePopulating, args, function() {
            if (pivot_1.dataType === "pivot") {
              if (_this.parent.dataSourceSettings.mode === "Server") {
                _this.parent.getEngine("onScroll", null, null, null, null, null, null);
              } else {
                pivot_1.engineModule.generateGridData(pivot_1.dataSourceSettings, true, false, pivot_1.engineModule.headerCollection);
                colStartPos_1 = pivot_1.engineModule.colStartPos;
              }
            } else {
              pivot_1.olapEngineModule.scrollPage();
              colStartPos_1 = pivot_1.olapEngineModule.pageColStartPos;
            }
            _this.enginePopulatedEventMethod(engine);
          });
          var exactPage = Math.ceil(colStartPos_1 / (pivot_1.pageSettings.columnPageSize * colValues));
          var pos = exactSize * exactPage - engine.colFirstLvl * colValues * pivot_1.gridSettings.columnWidth;
          pivot_1.scrollPosObject.horizontalSection = pos;
        }
        this.parent.actionObj.actionName = this.parent.getActionCompleteName();
        if (this.parent.actionObj.actionName) {
          this.parent.actionCompleteMethod();
        }
      }
    };
    VirtualScroll3.prototype.enginePopulatedEventMethod = function(engine, control) {
      var _this = this;
      var pivot = control ? control : this.parent;
      var eventArgs = {
        dataSourceSettings: pivot.dataSourceSettings,
        pivotValues: engine.pivotValues
      };
      pivot.trigger(enginePopulated, eventArgs, function(observedArgs) {
        _this.parent.pivotValues = observedArgs.pivotValues;
      });
    };
    VirtualScroll3.prototype.setPageXY = function() {
      var _this = this;
      return function(e) {
        if (e.pointerType === "mouse") {
          return;
        }
        _this.pageXY = _this.getPointXY(e);
      };
    };
    VirtualScroll3.prototype.common = function(mHdr, mCont, fCont) {
      var _this = this;
      return function(e) {
        var enableOptimizedRendering = _this.parent.virtualScrollSettings && _this.parent.virtualScrollSettings.allowSinglePage && _this.parent.dataType === "pivot";
        if (_this.isScrolling || !enableOptimizedRendering) {
          _this.isScrolling = false;
          var ele = _this.parent.isAdaptive ? mCont : closest(mCont, "." + GRID_CONTENT).querySelector("." + VIRTUALTABLE_DIV);
          if (enableOptimizedRendering) {
            if (_this.direction === "vertical") {
              if (_this.parent.element.querySelector("." + PIVOT_CONTENT_LOADER)) {
                addClass([fCont], ["e-virtual-pivot-content"]);
                removeClass([_this.parent.element.querySelector("." + PIVOT_CONTENT_LOADER)], [PIVOT_HIDE_LOADER]);
              }
            } else {
              if (_this.parent.element.querySelector("." + PIVOT_CONTENT_LOADER)) {
                addClass([mHdr, mCont], ["e-virtual-pivot-content"]);
                removeClass([_this.parent.element.querySelector("." + PIVOT_CONTENT_LOADER)], [PIVOT_HIDE_LOADER]);
              }
            }
          }
          _this.update(_this.parent.element.querySelector("." + GRID_CLASS + " ." + CONTENT_CLASS).scrollTop * _this.parent.verticalScrollScale, ele.scrollLeft * _this.parent.horizontalScrollScale, e, ele, mHdr, mCont);
        }
      };
    };
    VirtualScroll3.prototype.onHorizondalScroll = function(mHdr, mCont) {
      var _this = this;
      var timeOutObj;
      var ele = this.parent.isAdaptive ? mCont : closest(mCont, "." + GRID_CONTENT).querySelector("." + VIRTUALTABLE_DIV);
      var eleScrollLeft = Math.abs(ele.scrollLeft);
      var left = eleScrollLeft * this.parent.horizontalScrollScale;
      var horiOffset = left - this.parent.scrollPosObject.horizontalSection - eleScrollLeft;
      horiOffset = this.parent.enableRtl ? horiOffset : -horiOffset;
      if (ele.style.display !== "none") {
        this.alignFreezedCells(horiOffset, false);
      }
      return function(e) {
        eleScrollLeft = Math.abs(ele.scrollLeft);
        left = eleScrollLeft * _this.parent.horizontalScrollScale;
        if (e.type === "wheel" || e.type === "touchmove" || _this.eventType === "wheel" || _this.eventType === "touchmove") {
          clearTimeout(timeOutObj);
          timeOutObj = setTimeout(function() {
            left = e.type === "touchmove" ? eleScrollLeft : left;
            _this.update(mCont.parentElement.scrollTop * _this.parent.verticalScrollScale, left, e, ele, mHdr, mCont);
          }, 300);
        }
        if (_this.previousValues.left === left) {
          return;
        }
        _this.parent.scrollDirection = _this.direction = "horizondal";
        _this.isScrolling = true;
        horiOffset = left - _this.parent.scrollPosObject.horizontalSection - eleScrollLeft;
        horiOffset = _this.parent.enableRtl ? horiOffset : -horiOffset;
        var vertiOffset = mCont.querySelector("." + TABLE).style.transform.split(",").length > 1 ? mCont.querySelector("." + TABLE).style.transform.split(",")[1].trim() : "0px)";
        if (eleScrollLeft < _this.parent.scrollerBrowserLimit) {
          setStyleAttribute(mCont.querySelector("." + TABLE), {
            transform: "translate(" + horiOffset + "px," + vertiOffset
          });
          setStyleAttribute(mHdr.querySelector("." + TABLE), {
            transform: "translate(" + horiOffset + "px,0px)"
          });
          _this.alignFreezedCells(horiOffset, false);
        }
        var excessMove = _this.parent.scrollPosObject.horizontalSection > left ? -(_this.parent.scrollPosObject.horizontalSection - left) : left + (mHdr.offsetWidth - mHdr.querySelector(".e-headercell.e-leftfreeze").offsetWidth) - (_this.parent.scrollPosObject.horizontalSection + (mCont.querySelector("." + TABLE).offsetWidth - mCont.querySelector("." + TABLE).querySelector(".e-leftfreeze.e-rowsheader").offsetWidth));
        var notLastPage = Math.ceil(_this.parent.scrollPosObject.horizontalSection / _this.parent.horizontalScrollScale) < _this.parent.scrollerBrowserLimit;
        if (_this.parent.scrollPosObject.horizontalSection > left ? true : excessMove > 1 && notLastPage) {
          var enableOptimizedRendering = _this.parent.virtualScrollSettings && _this.parent.virtualScrollSettings.allowSinglePage && _this.parent.dataType === "pivot";
          if (enableOptimizedRendering && _this.parent.element.querySelector("." + PIVOT_CONTENT_LOADER)) {
            addClass([mHdr, mCont], ["e-virtual-pivot-content"]);
            removeClass([_this.parent.element.querySelector("." + PIVOT_CONTENT_LOADER)], [PIVOT_HIDE_LOADER]);
          }
          if (left > mHdr.clientWidth) {
            if (_this.parent.scrollPosObject.left < 1) {
              _this.parent.scrollPosObject.left = mHdr.clientWidth;
            }
            _this.parent.scrollPosObject.left = _this.parent.scrollPosObject.left - 50;
            excessMove = _this.parent.scrollPosObject.horizontalSection > left ? excessMove - _this.parent.scrollPosObject.left : excessMove + _this.parent.scrollPosObject.left;
          } else {
            excessMove = -_this.parent.scrollPosObject.horizontalSection;
          }
          horiOffset = -(left - (_this.parent.scrollPosObject.horizontalSection + excessMove) - closest(mCont, "." + GRID_CONTENT).querySelector("." + VIRTUALTABLE_DIV).scrollLeft);
          var vWidth = _this.parent.gridSettings.columnWidth * _this.engineModule.columnCount;
          if (vWidth > _this.parent.scrollerBrowserLimit) {
            _this.parent.horizontalScrollScale = vWidth / _this.parent.scrollerBrowserLimit;
            vWidth = _this.parent.scrollerBrowserLimit;
          }
          if (horiOffset > vWidth && horiOffset > left) {
            horiOffset = left;
            excessMove = 0;
          }
          setStyleAttribute(mCont.querySelector("." + TABLE), {
            transform: "translate(" + horiOffset + "px," + vertiOffset
          });
          setStyleAttribute(mHdr.querySelector("." + TABLE), {
            transform: "translate(" + horiOffset + "px,0px)"
          });
          _this.alignFreezedCells(horiOffset, false);
          _this.parent.scrollPosObject.horizontalSection = _this.parent.scrollPosObject.horizontalSection + excessMove;
        }
        var hScrollPos = ele.scrollWidth - (eleScrollLeft + (ele.offsetWidth - _this.parent.element.querySelector("." + GRID_CLASS).querySelector("." + HEADERCELL + "." + FREEZED_CELL).offsetWidth));
        if (hScrollPos <= 0) {
          var virtualDiv = mCont.querySelector("." + VIRTUALTRACK_DIV);
          virtualDiv.style.display = "none";
          var mCntScrollPos = mCont.scrollWidth - (mCont.scrollLeft + mCont.offsetWidth);
          virtualDiv.style.display = "";
          var mCntVScrollPos = mCont.scrollWidth - (mCont.scrollLeft + mCont.offsetWidth);
          _this.parent.scrollPosObject.horizontalSection -= mCntScrollPos > hScrollPos ? mCntScrollPos : -mCntVScrollPos;
          horiOffset = eleScrollLeft > _this.parent.scrollerBrowserLimit ? Number(mCont.querySelector("." + TABLE).style.transform.split(",")[0].split("px")[0].trim()) : -(eleScrollLeft * _this.parent.horizontalScrollScale - _this.parent.scrollPosObject.horizontalSection - eleScrollLeft);
          setStyleAttribute(mCont.querySelector("." + TABLE), {
            transform: "translate(" + horiOffset + "px," + vertiOffset
          });
          setStyleAttribute(mHdr.querySelector("." + TABLE), {
            transform: "translate(" + horiOffset + "px,0px)"
          });
          _this.alignFreezedCells(horiOffset, false);
        }
        _this.previousValues.left = left;
        _this.frozenPreviousValues.left = left;
        _this.eventType = "";
        mHdr.scrollLeft = ele.scrollLeft;
        mCont.scrollLeft = ele.scrollLeft;
      };
    };
    VirtualScroll3.prototype.alignFreezedCells = function(horiOffset, isParentCells) {
      for (var i = 0, j = this.parent.element.querySelectorAll("." + FREEZED_CELL); i < j.length; i++) {
        if (this.parent.isTabular && this.parent.dataSourceSettings.rows.length > 1) {
          var rowsHeaderElement = j[i];
          this.setFrozenColumnPosition(horiOffset, rowsHeaderElement, i, j, isParentCells);
        } else {
          if (isParentCells) {
            if (this.parent.enableRtl) {
              j[i].style.right = -horiOffset + "px";
            } else {
              j[i].style.left = horiOffset + "px";
            }
          } else {
            if (this.parent.enableRtl) {
              j[i].style.right = Number(horiOffset) + "px";
            } else {
              j[i].style.left = Number(-horiOffset) + "px";
            }
          }
        }
      }
    };
    VirtualScroll3.prototype.onVerticalScroll = function(mCont, fCont) {
      var _this = this;
      var timeOutObj;
      var virtualTableElement = mCont.querySelector("." + CONTENT_VIRTUALTABLE_DIV) ? mCont.querySelector("." + CONTENT_VIRTUALTABLE_DIV) : mCont;
      return function(e) {
        var pageCnt = _this.parent.engineModule ? _this.parent.engineModule.viewportPageCount : 3;
        if (_this.parent.isAdaptive || virtualTableElement.scrollHeight > virtualTableElement.parentElement.clientHeight * pageCnt) {
          var top_1 = mCont.scrollTop * _this.parent.verticalScrollScale;
          if (e.type === "wheel" || e.type === "touchmove" || e.type === "scroll" || _this.eventType === "wheel" || _this.eventType === "touchmove" || e.type === "keyup" || e.type === "keydown") {
            var ele_1 = _this.parent.isAdaptive ? mCont : closest(mCont, "." + GRID_CONTENT).querySelector("." + VIRTUALTABLE_DIV);
            clearTimeout(timeOutObj);
            timeOutObj = setTimeout(function() {
              var scrollLeft = 0;
              if (_this.parent.isAdaptive) {
                var contentTable = ele_1.querySelector("." + CONTENT_VIRTUALTABLE_DIV);
                scrollLeft = ele_1.scrollLeft === contentTable.scrollLeft ? ele_1.scrollLeft : contentTable.scrollLeft;
              } else {
                scrollLeft = ele_1.scrollLeft;
              }
              _this.update(mCont.scrollTop * _this.parent.verticalScrollScale, scrollLeft * _this.parent.horizontalScrollScale, e, ele_1, null, mCont);
            }, 300);
          }
          if (_this.previousValues.top === top_1) {
            return;
          }
          if (_this.parent.scrollPosObject.horizontalSection < 0) {
            _this.parent.scrollPosObject.horizontalSection = 0;
          }
          _this.parent.scrollDirection = _this.direction = "vertical";
          _this.isScrolling = true;
          var vertiOffset = -(top_1 - _this.parent.scrollPosObject.verticalSection - mCont.scrollTop);
          var horiOffset = mCont.querySelector("." + TABLE).style.transform.split(",")[0].trim();
          if (vertiOffset > _this.parent.virtualDiv.clientHeight) {
            vertiOffset = _this.parent.virtualDiv.clientHeight;
          }
          if (mCont.scrollTop < _this.parent.scrollerBrowserLimit) {
            setStyleAttribute(mCont.querySelector("." + TABLE), {
              transform: "translate(0px," + vertiOffset + "px)"
            });
            setStyleAttribute(mCont.querySelector("." + TABLE), {
              transform: horiOffset + "," + vertiOffset + "px)"
            });
          }
          var excessMove = _this.parent.scrollPosObject.verticalSection > top_1 ? -(_this.parent.scrollPosObject.verticalSection - top_1) : top_1 + mCont.clientHeight - (_this.parent.scrollPosObject.verticalSection + mCont.querySelector("." + TABLE).offsetHeight);
          var notLastPage = Math.ceil(_this.parent.scrollPosObject.verticalSection / _this.parent.verticalScrollScale) < _this.parent.scrollerBrowserLimit;
          if (_this.parent.scrollPosObject.verticalSection > top_1 ? true : excessMove > 1 && notLastPage) {
            var enableOptimizedRendering = _this.parent.virtualScrollSettings && _this.parent.virtualScrollSettings.allowSinglePage && _this.parent.dataType === "pivot";
            if (enableOptimizedRendering && _this.parent.element.querySelector("." + PIVOT_CONTENT_LOADER)) {
              addClass([fCont], ["e-virtual-pivot-content"]);
              removeClass([_this.parent.element.querySelector("." + PIVOT_CONTENT_LOADER)], [PIVOT_HIDE_LOADER]);
            }
            if (top_1 > mCont.clientHeight) {
              if (_this.parent.scrollPosObject.top < 1) {
                _this.parent.scrollPosObject.top = mCont.clientHeight;
              }
              _this.parent.scrollPosObject.top = _this.parent.scrollPosObject.top - 50;
              excessMove = _this.parent.scrollPosObject.verticalSection > top_1 ? excessMove - _this.parent.scrollPosObject.top : excessMove + _this.parent.scrollPosObject.top;
            } else {
              excessMove = -_this.parent.scrollPosObject.verticalSection;
            }
            var movableTable = _this.parent.element.querySelector("." + CONTENT_CLASS).querySelector("." + TABLE);
            vertiOffset = -(top_1 - (_this.parent.scrollPosObject.verticalSection + excessMove) - mCont.scrollTop);
            var vHeight = _this.parent.gridSettings.rowHeight * _this.engineModule.rowCount + 0.1 - movableTable.clientHeight;
            if (vHeight > _this.parent.scrollerBrowserLimit) {
              _this.parent.verticalScrollScale = vHeight / _this.parent.scrollerBrowserLimit;
              vHeight = _this.parent.scrollerBrowserLimit;
            }
            if (vertiOffset > vHeight && vertiOffset > top_1) {
              vertiOffset = top_1;
              excessMove = 0;
            }
            if (vertiOffset > _this.parent.virtualDiv.clientHeight) {
              vertiOffset = _this.parent.virtualDiv.clientHeight;
            }
            setStyleAttribute(mCont.querySelector("." + TABLE), {
              transform: "translate(0px," + vertiOffset + "px)"
            });
            setStyleAttribute(mCont.querySelector("." + TABLE), {
              transform: horiOffset + "," + vertiOffset + "px)"
            });
            _this.parent.scrollPosObject.verticalSection = _this.parent.scrollPosObject.verticalSection + excessMove;
          }
          _this.scrollingDirection = _this.previousValues.top < mCont.scrollTop ? "Up" : "Down";
          _this.previousValues.top = top_1;
          _this.frozenPreviousValues.top = top_1;
          _this.eventType = "";
        }
      };
    };
    VirtualScroll3.prototype.removeInternalEvents = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(contentReady, this.wireEvents);
    };
    VirtualScroll3.prototype.destroy = function() {
      this.removeInternalEvents();
    };
    VirtualScroll3.prototype.setFrozenColumnPosition = function(horiOffset, rowsHeaderElement, i, j, isParentCells) {
      if (rowsHeaderElement && rowsHeaderElement instanceof HTMLTableCellElement) {
        var columnWidth = 0;
        var colIndex = rowsHeaderElement.cellIndex + 1;
        if (colIndex > 1) {
          for (var y = 0; y < colIndex - 1; y++) {
            columnWidth = columnWidth + this.parent.pivotColumns[y].width;
          }
        }
        if (isParentCells) {
          if (this.parent.enableRtl) {
            j[i].style.right = -(horiOffset - columnWidth) + "px";
          } else {
            j[i].style.left = horiOffset + columnWidth + "px";
          }
        } else {
          if (this.parent.enableRtl) {
            j[i].style.right = Number(horiOffset + columnWidth) + "px";
          } else {
            j[i].style.left = Number(-(horiOffset - columnWidth)) + "px";
          }
        }
      }
    };
    return VirtualScroll3;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/common/popups/drillthrough-dialog.js
var DrillThroughDialog = (
  /** @class */
  function() {
    function DrillThroughDialog2(parent) {
      this.indexString = [];
      this.isUpdated = false;
      this.parent = parent;
      this.engine = this.parent.dataType === "olap" ? this.parent.olapEngineModule : this.parent.engineModule;
    }
    DrillThroughDialog2.prototype.showDrillThroughDialog = function(eventArgs) {
      var _this = this;
      var gridData = eventArgs.rawData;
      var clonedData = [];
      var gridIndexObjects = {};
      for (var i = 0; i < eventArgs.rawData.length; i++) {
        clonedData.push(PivotUtil.frameHeaderWithKeys(eventArgs.rawData[i]));
      }
      try {
        if (this.parent.currentView === "Table" && this.parent.editSettings.allowInlineEditing && this.parent.editSettings.allowEditing && eventArgs.rawData.length === 1) {
          this.parent.actionObj.actionName = editRecord;
          if (this.parent.actionBeginMethod()) {
            return;
          }
          this.editCell(eventArgs, gridData);
        } else {
          this.removeDrillThroughDialog();
          var drillThroughDialog = createElement("div", {
            id: this.parent.element.id + "_drillthrough",
            className: DRILLTHROUGH_DIALOG
          });
          this.parent.element.appendChild(drillThroughDialog);
          this.dialogPopUp = new Dialog({
            animationSettings: {
              effect: "Fade"
            },
            allowDragging: false,
            header: this.parent.localeObj.getConstant("details"),
            content: this.createDrillThroughGrid(eventArgs, gridData),
            cssClass: this.parent.cssClass,
            beforeOpen: function() {
              _this.drillThroughGrid.setProperties({
                dataSource: _this.parent.editSettings.allowEditing ? _this.dataWithPrimarykey(eventArgs, gridData, gridIndexObjects) : gridData,
                height: !_this.parent.editSettings.allowEditing ? 300 : 220
              }, false);
            },
            beforeClose: function() {
              if (_this.parent.editSettings.allowEditing && _this.isUpdated) {
                if (_this.parent.dataSourceSettings.type === "CSV") {
                  _this.updateData(_this.drillThroughGrid.dataSource);
                }
                var gridIndexObjectsValue = Object.keys(gridIndexObjects);
                var previousPosition = [];
                for (var _i = 0, gridIndexObjectsValue_1 = gridIndexObjectsValue; _i < gridIndexObjectsValue_1.length; _i++) {
                  var value = gridIndexObjectsValue_1[_i];
                  previousPosition.push(gridIndexObjects[value]);
                }
                var count = Object.keys(gridIndexObjects).length;
                var addItems = [];
                var prevItems = [];
                var index = 0;
                for (var _a = 0, _b = _this.drillThroughGrid.dataSource; _a < _b.length; _a++) {
                  var item = _b[_a];
                  if (item["__index"] === "0" || item["__index"] === "") {
                    for (var _c = 0, _d = _this.engine.fields; _c < _d.length; _c++) {
                      var field = _d[_c];
                      if (isNullOrUndefined(item[field])) {
                        delete item[field];
                      }
                    }
                    delete item["__index"];
                    addItems.push(item);
                  } else if (count > 0) {
                    delete gridIndexObjects[item["__index"].toString()];
                    prevItems.push(item);
                    count--;
                  }
                  if (_this.parent.dataSourceSettings.mode === "Server") {
                    if (item["__index"]) {
                      delete item["__index"];
                    }
                    if (gridData[index]["__index"]) {
                      delete gridData[index]["__index"];
                    }
                  }
                  index++;
                }
                count = 0;
                if (_this.parent.dataSourceSettings.mode === "Server") {
                  var gridIndex = [];
                  var keys = Object.keys(gridIndexObjects);
                  for (var len = 0; len < keys.length; len++) {
                    delete _this.parent.drillThroughValue.indexObject[gridIndexObjects[keys[len]]];
                    gridIndex.push({
                      Key: keys[len],
                      Value: gridIndexObjects[keys[len]]
                    });
                  }
                  _this.parent.getEngine("updateRawData", null, null, null, null, null, null, null, {
                    "addedData": addItems,
                    "removedData": gridIndex,
                    "updatedData": prevItems,
                    indexObject: _this.parent.drillThroughValue.indexObject
                  });
                } else {
                  var items = [];
                  var data = _this.parent.allowDataCompression ? _this.parent.engineModule.actualData : _this.parent.engineModule.data;
                  for (var _e = 0, _f = data; _e < _f.length; _e++) {
                    var item = _f[_e];
                    delete item["__index"];
                    if (gridIndexObjects[count.toString()] === void 0) {
                      items.push(item);
                    }
                    count++;
                  }
                  items = items.concat(addItems);
                  var eventArgs_1 = {
                    currentData: _this.drillThroughGrid.dataSource,
                    previousData: clonedData,
                    previousPosition,
                    cancel: false
                  };
                  _this.parent.trigger(editCompleted, eventArgs_1);
                  if (!eventArgs_1.cancel) {
                    _this.parent.setProperties({
                      dataSourceSettings: {
                        dataSource: items
                      }
                    }, true);
                    _this.engine.updateGridData(_this.parent.dataSourceSettings);
                    _this.parent.pivotValues = _this.engine.pivotValues;
                  }
                }
                _this.parent.actionObj.actionName = recordUpdated;
                var actionInfo = {
                  editInfo: {
                    type: _this.drillThroughGrid.editSettings.mode,
                    action: "Update",
                    currentData: _this.drillThroughGrid.dataSource,
                    previousData: clonedData,
                    previousPosition
                  }
                };
                _this.parent.actionObj.actionInfo = actionInfo;
              }
              _this.isUpdated = false;
              gridIndexObjects = {};
            },
            isModal: true,
            visible: true,
            showCloseIcon: true,
            locale: this.parent.locale,
            enableRtl: this.parent.enableRtl,
            enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
            width: this.parent.isAdaptive ? "100%" : "60%",
            position: {
              X: "center",
              Y: "center"
            },
            closeOnEscape: !this.parent.editSettings.allowEditing,
            target: document.body,
            close: this.removeDrillThroughDialog.bind(this)
          });
          this.dialogPopUp.isStringTemplate = true;
          this.dialogPopUp.appendTo(drillThroughDialog);
          setStyleAttribute(this.dialogPopUp.element, {
            "visibility": "visible"
          });
          var drillKeyConfigs = {
            escape: "escape"
          };
          if (this.parent.editSettings.allowEditing) {
            this.drillthroughKeyboardModule = new KeyboardEvents(this.dialogPopUp.element, {
              keyAction: this.drillthroughKeyActionHandler.bind(this),
              keyConfigs: drillKeyConfigs,
              eventName: "keydown"
            });
          }
        }
      } catch (execption) {
        this.parent.actionFailureMethod(execption);
      }
    };
    DrillThroughDialog2.prototype.editCell = function(eventArgs, gridData) {
      var _this = this;
      var gridResize = this.parent.gridSettings.allowResizing;
      var actualText = eventArgs.currentCell.actualText.toString();
      var indexObject = Number(Object.keys(eventArgs.currentCell.indexObject));
      eventArgs.currentTarget.firstElementChild.style.display = "none";
      var cellValue = Number(eventArgs.rawData[0][actualText]);
      var previousData = PivotUtil.frameHeaderWithKeys(eventArgs.rawData[eventArgs.rawData.length - 1]);
      var currentData = eventArgs.rawData[eventArgs.rawData.length - 1];
      var actionInfo = {
        editInfo: {
          type: "Inline editing",
          action: "update",
          data: gridData
        }
      };
      this.parent.actionObj.actionInfo = actionInfo;
      var numericTextBox = new NumericTextBox({
        value: cellValue,
        enableRtl: this.parent.enableRtl,
        enabled: true,
        format: "####.##",
        locale: this.parent.locale,
        cssClass: this.parent.cssClass,
        change: function() {
          var textBoxValue = isNullOrUndefined(numericTextBox.value) ? 0 : numericTextBox.value;
          var indexValue = eventArgs.currentCell.indexObject[indexObject];
          eventArgs.rawData[0][actualText] = textBoxValue;
          _this.parent.engineModule.data[indexValue] = eventArgs.rawData[0];
        },
        blur: function() {
          var eventArgs2 = {
            currentData: [currentData],
            previousData: [previousData],
            previousPosition: [currentData.index],
            cancel: false
          };
          _this.parent.trigger(editCompleted, eventArgs2);
          if (!eventArgs2.cancel) {
            if (_this.parent.dataSourceSettings.mode === "Server") {
              var dataIndex = {};
              dataIndex[indexObject] = indexObject;
              var prevItems = [currentData];
              _this.parent.getEngine("updateRawData", null, null, null, null, null, null, null, {
                "addedData": [],
                "removedData": [],
                "updatedData": prevItems,
                indexObject: dataIndex
              });
            } else {
              _this.parent.setProperties({
                dataSourceSettings: {
                  dataSource: _this.parent.engineModule.data
                }
              }, true);
              _this.engine.updateGridData(_this.parent.dataSourceSettings);
              _this.parent.pivotValues = _this.engine.pivotValues;
              _this.parent.gridSettings.allowResizing = gridResize;
            }
          }
        }
      });
      var textBoxElement = createElement("input", {
        id: this.parent.element.id + "_inputbox"
      });
      eventArgs.currentTarget.appendChild(textBoxElement);
      numericTextBox.appendTo(textBoxElement);
      eventArgs.currentCell.value = numericTextBox.value;
      numericTextBox.focusIn();
      this.parent.gridSettings.allowResizing = false;
    };
    DrillThroughDialog2.prototype.updateData = function(dataSource) {
      var dataPos = 0;
      var data = this.parent.allowDataCompression ? this.parent.engineModule.actualData : this.parent.engineModule.data;
      while (dataPos < dataSource.length) {
        var fields = Object.keys(dataSource[dataPos]);
        var keyPos = 0;
        var framedSet = [];
        while (keyPos < fields.length) {
          if (!isNullOrUndefined(this.parent.engineModule.fieldKeys[fields[keyPos]])) {
            framedSet[this.parent.engineModule.fieldKeys[fields[keyPos]]] = dataSource[dataPos][fields[keyPos]];
          }
          keyPos++;
        }
        data[Number(dataSource[dataPos]["__index"])] = framedSet;
        dataPos++;
      }
      if (this.parent.allowDataCompression) {
        this.parent.engineModule.actualData = data;
      } else {
        this.parent.engineModule.data = data;
      }
    };
    DrillThroughDialog2.prototype.removeDrillThroughDialog = function() {
      if (this.dialogPopUp && !this.dialogPopUp.isDestroyed) {
        this.parent.actionObj.actionName = drillThroughClosed;
        if (this.parent.actionObj.actionName) {
          this.parent.actionCompleteMethod();
        }
        this.dialogPopUp.destroy();
      }
      var dialogElement = document.getElementById(this.parent.element.id + "_drillthrough");
      if (dialogElement) {
        remove(dialogElement);
      }
      if (document.getElementById(this.parent.element.id + "_drillthroughgrid_ccdlg")) {
        remove(document.getElementById(this.parent.element.id + "_drillthroughgrid_ccdlg"));
      }
    };
    DrillThroughDialog2.prototype.createDrillThroughGrid = function(eventArgs, gridData) {
      var _this = this;
      var drillThroughBody = createElement("div", {
        id: this.parent.element.id + "_drillthroughbody",
        className: DRILLTHROUGH_BODY_CLASS
      });
      var drillThroughBodyHeader = createElement("div", {
        id: this.parent.element.id + "_drillthroughbodyheader",
        className: DRILLTHROUGH_BODY_HEADER_CONTAINER_CLASS
      });
      if (eventArgs.rowHeaders !== "") {
        drillThroughBodyHeader.innerHTML = "<span class=" + DRILLTHROUGH_BODY_HEADER_COMMON_CLASS + "><span class=" + DRILLTHROUGH_BODY_HEADER_CLASS + ">" + this.parent.localeObj.getConstant("row") + "</span> : <span class=" + DRILLTHROUGH_BODY_HEADER_VALUE_CLASS + ">" + eventArgs.rowHeaders + "</span></span>";
      }
      if (eventArgs.columnHeaders !== "") {
        drillThroughBodyHeader.innerHTML = drillThroughBodyHeader.innerHTML + "<span class=" + DRILLTHROUGH_BODY_HEADER_COMMON_CLASS + "><span class=" + DRILLTHROUGH_BODY_HEADER_CLASS + ">" + this.parent.localeObj.getConstant("column") + "</span> : <span class=" + DRILLTHROUGH_BODY_HEADER_VALUE_CLASS + ">" + eventArgs.columnHeaders + "</span></span>";
      }
      if (eventArgs.value !== "") {
        var measure = eventArgs.value.split("(")[0];
        var value = eventArgs.value.split("(")[1].split(")")[0];
        if (value !== "0") {
          drillThroughBodyHeader.innerHTML = drillThroughBodyHeader.innerHTML + "<span class=" + DRILLTHROUGH_BODY_HEADER_COMMON_CLASS + "><span class=" + DRILLTHROUGH_BODY_HEADER_CLASS + ">" + measure + "</span> : <span class=" + DRILLTHROUGH_BODY_HEADER_VALUE_CLASS + ">" + value + "</span></span>";
        }
      }
      var toolbarItems = ["ColumnChooser"];
      if (this.parent.editSettings.allowEditing) {
        if (this.parent.editSettings.allowCommandColumns) {
          toolbarItems = ["ColumnChooser", "Add"];
        } else if (this.parent.editSettings.mode === "Batch") {
          toolbarItems = ["ColumnChooser", "Add", "Delete", "Update", "Cancel"];
        } else if (this.parent.editSettings.mode === "Dialog") {
          toolbarItems = ["ColumnChooser", "Add", "Edit", "Delete"];
        } else {
          toolbarItems = ["ColumnChooser", "Add", "Edit", "Delete", "Update", "Cancel"];
        }
      }
      var drillThroughGrid = createElement("div", {
        id: this.parent.element.id + "_drillthroughgrid",
        className: DRILLTHROUGH_GRID_CLASS
      });
      Grid.Inject(Selection, Reorder, Resize, Toolbar2, ColumnChooser);
      this.drillThroughGrid = new Grid({
        cssClass: this.parent.cssClass,
        gridLines: "Default",
        allowResizing: true,
        allowReordering: true,
        showColumnChooser: true,
        enableHover: false,
        toolbar: toolbarItems,
        columns: eventArgs.gridColumns,
        locale: this.parent.locale,
        enableRtl: this.parent.enableRtl,
        enableVirtualization: !this.parent.editSettings.allowEditing,
        allowPaging: this.parent.editSettings.allowEditing,
        pageSettings: {
          pageSize: 20
        },
        rowHeight: this.parent.gridSettings.rowHeight,
        height: "100%"
      });
      if (this.parent.dataType === "olap") {
        this.formatData(gridData);
      }
      var dialogModule = this;
      this.parent.trigger(beginDrillThrough, {
        cellInfo: eventArgs,
        gridObj: this.drillThroughGrid,
        type: "editing"
      });
      if (this.drillThroughGrid.allowExcelExport) {
        Grid.Inject(ExcelExport);
      }
      if (this.drillThroughGrid.allowPdfExport) {
        Grid.Inject(PdfExport);
      }
      if (this.parent.editSettings.allowEditing) {
        Grid.Inject(Edit, Page);
        try {
          this.drillThroughGrid.editSettings = this.parent.editSettings;
          this.drillThroughGrid.actionBegin = function(args) {
            var actionName = args.requestType === "save" ? saveEditedRecords : args.requestType === "add" ? addNewRecord : args.requestType === "delete" ? removeRecord : "";
            _this.parent.actionObj.actionName = actionName;
            if (_this.parent.actionObj.actionName) {
              if (_this.parent.actionBeginMethod()) {
                return;
              }
            }
          };
          if (this.parent.editSettings.allowCommandColumns) {
            this.drillThroughGrid.editSettings.mode = "Normal";
            this.drillThroughGrid.editSettings.allowEditOnDblClick = false;
            Grid.Inject(CommandColumn);
            this.drillThroughGrid.columns.push({
              headerText: this.parent.localeObj.getConstant("manageRecords"),
              width: 160,
              showInColumnChooser: false,
              commands: [{
                type: "Edit",
                buttonOption: {
                  iconCss: " e-icons e-edit",
                  cssClass: "e-flat" + (this.parent.cssClass ? " " + this.parent.cssClass : "")
                }
              }, {
                type: "Delete",
                buttonOption: {
                  iconCss: "e-icons e-delete",
                  cssClass: "e-flat" + (this.parent.cssClass ? " " + this.parent.cssClass : "")
                }
              }, {
                type: "Save",
                buttonOption: {
                  iconCss: "e-icons e-update",
                  cssClass: "e-flat" + (this.parent.cssClass ? " " + this.parent.cssClass : "")
                }
              }, {
                type: "Cancel",
                buttonOption: {
                  iconCss: "e-icons e-cancel-icon",
                  cssClass: "e-flat" + (this.parent.cssClass ? " " + this.parent.cssClass : "")
                }
              }]
            });
          } else {
            this.drillThroughGrid.editSettings.allowEditOnDblClick = this.parent.editSettings.allowEditOnDblClick;
          }
          this.drillThroughGrid.columns.push({
            field: "__index",
            visible: false,
            isPrimaryKey: true,
            type: "string",
            showInColumnChooser: false,
            defaultValue: "0",
            validationRules: {
              required: true
            }
          });
        } catch (execption) {
          this.parent.actionFailureMethod(execption);
        }
        this.drillThroughGrid.actionComplete = function(args) {
          if (args.requestType === "batchsave" || args.requestType === "save" || args.requestType === "delete") {
            dialogModule.isUpdated = true;
          }
          _this.parent.actionObj.actionName = _this.parent.getActionCompleteName();
          var actionInfo = {
            editInfo: {
              type: _this.drillThroughGrid.editSettings.mode,
              action: args.requestType,
              data: gridData
            }
          };
          _this.parent.actionObj.actionInfo = actionInfo;
          if (_this.parent.actionObj.actionName) {
            _this.parent.actionCompleteMethod();
          }
          if (dialogModule.drillThroughGrid.editSettings.mode === "Normal" && args.requestType === "save" && dialogModule.drillThroughGrid.element.querySelectorAll(".e-tbar-btn:hover").length > 0 && !dialogModule.parent.editSettings.allowCommandColumns || args.requestType === "batchsave") {
            dialogModule.dialogPopUp.hide();
          }
        };
        this.drillThroughGrid.beforeBatchSave = function() {
          dialogModule.isUpdated = true;
        };
      } else {
        Grid.Inject(VirtualScroll);
      }
      document.body.appendChild(drillThroughGrid);
      this.drillThroughGrid.isStringTemplate = true;
      this.drillThroughGrid.appendTo(drillThroughGrid);
      drillThroughBody.appendChild(drillThroughBodyHeader);
      drillThroughBody.appendChild(drillThroughGrid);
      return drillThroughBody;
    };
    DrillThroughDialog2.prototype.frameGridColumns = function(rawData) {
      this.engine = this.parent.dataType === "olap" ? this.parent.olapEngineModule : this.parent.engineModule;
      var keys = this.parent.dataType === "olap" ? rawData[0] ? Object.keys(rawData[0]) : [] : Object.keys(this.engine.fieldList);
      var columns = [];
      var formatList = {};
      if (this.parent.dataSourceSettings.formatSettings.length > 0) {
        for (var i = 0; i < this.parent.dataSourceSettings.formatSettings.length; i++) {
          formatList[this.parent.dataSourceSettings.formatSettings[i].name] = this.parent.dataSourceSettings.formatSettings[i].format;
        }
      }
      if (this.parent.dataType === "olap") {
        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
          var key = keys_1[_i];
          columns.push({
            field: key.replace(/_x005B_|_x0020_|_x005D_|_x0024_/g, "").replace("].[", "").split(".").reverse().join(""),
            headerText: key.replace(/_x005B_|_x005D_|_x0024_/g, "").replace(/_x0020_/g, " ").replace("].[", "").split(".").reverse().join("."),
            width: 120,
            visible: true,
            validationRules: {
              required: true
            },
            format: !isNullOrUndefined(formatList[key]) ? formatList[key] : null,
            type: !isNullOrUndefined(formatList[key]) ? null : "string"
          });
        }
      } else {
        for (var _a = 0, keys_2 = keys; _a < keys_2.length; _a++) {
          var key = keys_2[_a];
          if (this.engine.fieldList[key].aggregateType !== "CalculatedField") {
            var editType = "";
            var type = null;
            var isDateField = (this.engine.fieldList[key].type === "date" || this.engine.fieldList[key].type === "datetime") && (this.isDateFieldExist(key) || rawData[0] && rawData[0][key] && rawData[0][key].toString().indexOf(" ") === -1) ? true : false;
            if (this.engine.fieldList[key].type === "number") {
              editType = "numericedit";
              type = "number";
            } else if (this.engine.fieldList[key].type === "date" && isDateField) {
              editType = "datepickeredit";
              type = "date";
            } else if (this.engine.fieldList[key].type === "datetime" && isDateField) {
              editType = "datetimepickeredit";
              type = "date";
            } else {
              editType = "defaultedit";
            }
            if (this.parent.engineModule.formatFields[key]) {
              type = this.parent.engineModule.formatFields[key].type;
            }
            var caption = this.parent.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(this.engine.fieldList[key].caption) : this.engine.fieldList[key].caption;
            columns.push({
              field: key,
              headerText: caption,
              width: 120,
              visible: this.engine.fieldList[key].isSelected,
              validationRules: {
                required: true
              },
              editType,
              format: !isNullOrUndefined(formatList[key]) ? formatList[key] : void 0,
              type: !isNullOrUndefined(formatList[key]) ? type : "string"
            });
          }
        }
      }
      return columns;
    };
    DrillThroughDialog2.prototype.isDateFieldExist = function(key) {
      for (var len = 0; len < this.parent.dataSourceSettings.formatSettings.length; len++) {
        if (this.parent.dataSourceSettings.formatSettings[len].name === key && this.parent.dataSourceSettings.formatSettings[len].type.indexOf("date") > -1) {
          return true;
        }
      }
      for (var len = 0; len < this.parent.dataSourceSettings.fieldMapping.length; len++) {
        if (this.parent.dataSourceSettings.fieldMapping[len].name === key && this.parent.dataSourceSettings.fieldMapping[len].dataType && this.parent.dataSourceSettings.fieldMapping[len].dataType.indexOf("date") > -1) {
          return true;
        }
      }
      return false;
    };
    DrillThroughDialog2.prototype.formatData = function(gridData) {
      var index = 0;
      while (index < gridData.length) {
        var data = gridData[index];
        var keys = Object.keys(gridData[index]);
        var newData = {};
        var i = 0;
        while (i < keys.length) {
          var key = keys[i].replace(/_x005B_|_x0020_|_x005D_|_x0024_/g, "").replace("].[", "").split(".").reverse().join("");
          newData[key] = data[keys[i]];
          i++;
        }
        gridData[index] = newData;
        index++;
      }
    };
    DrillThroughDialog2.prototype.dataWithPrimarykey = function(eventArgs, gridData, gridIndexObjects) {
      var indexString = this.indexString.length > 0 ? this.indexString : Object.keys(eventArgs.currentCell.indexObject);
      var rawData = gridData;
      var count = 0;
      for (var _i = 0, rawData_1 = rawData; _i < rawData_1.length; _i++) {
        var item = rawData_1[_i];
        item["__index"] = indexString[count];
        gridIndexObjects[indexString[count].toString()] = Number(indexString[count]);
        count++;
      }
      return rawData;
    };
    DrillThroughDialog2.prototype.drillthroughKeyActionHandler = function(e) {
      switch (e.action) {
        case "escape":
          this.processClose(e);
          break;
      }
    };
    DrillThroughDialog2.prototype.processClose = function(e) {
      var target = e.target;
      if (target && closest(target, ".e-popup.e-popup-open")) {
        var dialogInstance = getInstance(closest(target, ".e-popup.e-popup-open"), Dialog);
        if (dialogInstance && !dialogInstance.closeOnEscape) {
          var button = dialogInstance.element.getAttribute("data-fieldName");
          dialogInstance.hide();
          if (this.parent.element) {
            var pivotButtons = [].slice.call(this.parent.element.querySelectorAll(".e-pivot-button"));
            for (var _i = 0, pivotButtons_1 = pivotButtons; _i < pivotButtons_1.length; _i++) {
              var item = pivotButtons_1[_i];
              if (item.getAttribute("data-uid") === button) {
                item.focus();
                break;
              }
            }
          }
          e.preventDefault();
          return;
        }
      }
    };
    DrillThroughDialog2.prototype.destroy = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      if (this.drillthroughKeyboardModule && !this.drillthroughKeyboardModule.isDestroyed) {
        this.drillthroughKeyboardModule.destroy();
        this.drillthroughKeyboardModule = null;
      } else {
        return;
      }
    };
    return DrillThroughDialog2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/pivotview/actions/drill-through.js
var DrillThrough = (
  /** @class */
  function() {
    function DrillThrough2(parent) {
      this.parent = parent;
      this.drillThroughDialog = new DrillThroughDialog(this.parent);
      this.addInternalEvents();
    }
    DrillThrough2.prototype.getModuleName = function() {
      return "drillThrough";
    };
    DrillThrough2.prototype.addInternalEvents = function() {
      this.parent.on(contentReady, this.wireEvents, this);
    };
    DrillThrough2.prototype.wireEvents = function() {
      this.unWireEvents();
      EventHandler.add(this.parent.element, "dblclick", this.mouseClickHandler, this);
    };
    DrillThrough2.prototype.unWireEvents = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      EventHandler.remove(this.parent.element, "dblclick", this.mouseClickHandler);
    };
    DrillThrough2.prototype.mouseClickHandler = function(e) {
      var target = e.target;
      var ele = null;
      if (target.classList.contains("e-stackedheadercelldiv") || target.classList.contains("e-headercelldiv") || target.classList.contains("e-stackedheadertext") || target.classList.contains("e-headertext")) {
        ele = closest(target.parentElement, "th");
      } else if (target.classList.contains("e-cellvalue")) {
        ele = target.parentElement;
      } else if (target.classList.contains("e-headercell") || target.classList.contains("e-rowcell")) {
        ele = target;
      }
      if (ele) {
        if (this.parent.pivotValues.length > 0 && this.parent.dataSourceSettings.values.length > 0 && (this.parent.allowDrillThrough || this.parent.editSettings.allowEditing) && ele.classList.contains("e-valuescontent")) {
          var colIndex = parseInt(ele.getAttribute("aria-colindex"), 10) - 1;
          var rowIndex = Number(ele.getAttribute("index"));
          if (!isNullOrUndefined(this.parent.pivotValues[rowIndex]) && !isNullOrUndefined(this.parent.pivotValues[rowIndex][colIndex])) {
            this.executeDrillThrough(this.parent.pivotValues[rowIndex][colIndex], rowIndex, colIndex, ele);
          }
        }
      }
    };
    DrillThrough2.prototype.executeDrillThrough = function(pivotValue, rowIndex, colIndex, element) {
      this.parent.drillThroughElement = element;
      this.parent.drillThroughValue = pivotValue;
      var engine = this.parent.dataType === "olap" ? this.parent.olapEngineModule : this.parent.engineModule;
      var valueCaption = "";
      var aggType = "";
      var rawData = [];
      if (!isNullOrUndefined(pivotValue.rowHeaders) && !isNullOrUndefined(pivotValue.columnHeaders)) {
        if (this.parent.dataType === "olap") {
          var tupleInfo = void 0;
          if (this.parent.dataSourceSettings.valueAxis === "row") {
            tupleInfo = engine.tupRowInfo[pivotValue.rowOrdinal];
          } else {
            tupleInfo = engine.tupColumnInfo[pivotValue.colOrdinal];
          }
          var measureName = tupleInfo ? engine.getUniqueName(tupleInfo.measureName) : pivotValue.actualText;
          if (engine.fieldList[measureName] && engine.fieldList[measureName].isCalculatedField) {
            this.parent.pivotCommon.errorDialog.createErrorDialog(this.parent.localeObj.getConstant("error"), this.parent.localeObj.getConstant("drillError"));
            return;
          }
          valueCaption = engine.fieldList[measureName || pivotValue.actualText].caption;
          aggType = engine.fieldList[measureName || pivotValue.actualText].aggregateType;
          try {
            this.parent.olapEngineModule.getDrillThroughData(pivotValue, this.parent.maxRowsInDrillThrough);
            rawData = JSON.parse(engine.gridJSON);
          } catch (exception) {
            if (this.parent.olapEngineModule.errorInfo) {
              this.parent.actionFailureMethod(this.parent.olapEngineModule.errorInfo);
            }
            this.parent.pivotCommon.errorDialog.createErrorDialog(this.parent.localeObj.getConstant("error"), this.parent.olapEngineModule.errorInfo ? this.parent.olapEngineModule.errorInfo : engine.gridJSON);
            this.parent.olapEngineModule.errorInfo = void 0;
            return;
          }
        } else {
          valueCaption = engine.fieldList[pivotValue.actualText.toString()] ? engine.fieldList[pivotValue.actualText.toString()].caption : pivotValue.actualText.toString();
          aggType = engine.fieldList[pivotValue.actualText] ? engine.fieldList[pivotValue.actualText].aggregateType : "";
          if (this.parent.dataSourceSettings.mode === "Server") {
            this.parent.getEngine("fetchRawData", null, null, null, null, null, null, {
              rowIndex,
              columnIndex: colIndex
            });
          } else {
            if (this.parent.allowDataCompression) {
              var indexArray = Object.keys(pivotValue.indexObject);
              this.drillThroughDialog.indexString = [];
              for (var _i = 0, indexArray_1 = indexArray; _i < indexArray_1.length; _i++) {
                var cIndex = indexArray_1[_i];
                for (var _a = 0, _b = this.parent.engineModule.groupRawIndex[Number(cIndex)]; _a < _b.length; _a++) {
                  var aIndex = _b[_a];
                  rawData.push(this.parent.engineModule.actualData[aIndex]);
                  this.drillThroughDialog.indexString.push(aIndex.toString());
                }
              }
            } else {
              var indexArray = Object.keys(pivotValue.indexObject);
              for (var _c = 0, indexArray_2 = indexArray; _c < indexArray_2.length; _c++) {
                var index = indexArray_2[_c];
                rawData.push(this.parent.engineModule.data[Number(index)]);
              }
            }
          }
        }
        if (this.parent.dataSourceSettings.mode !== "Server") {
          this.triggerDialog(valueCaption, aggType, rawData, pivotValue, element);
        }
      }
    };
    DrillThrough2.prototype.frameData = function(eventArgs) {
      var keyPos = 0;
      var dataPos = 0;
      var data = [];
      while (dataPos < eventArgs.rawData.length) {
        var framedHeader = {};
        while (keyPos < eventArgs.gridColumns.length) {
          framedHeader[eventArgs.gridColumns[keyPos].field] = this.parent.dataSourceSettings.mode === "Server" ? eventArgs.rawData[dataPos][this.parent.engineModule.fields.indexOf(eventArgs.gridColumns[keyPos].field) !== -1 ? this.parent.engineModule.fields.indexOf(eventArgs.gridColumns[keyPos].field) : 0] : eventArgs.rawData[dataPos][this.parent.engineModule.fieldKeys[eventArgs.gridColumns[keyPos].field]];
          keyPos++;
        }
        data.push(framedHeader);
        dataPos++;
        keyPos = 0;
      }
      eventArgs.rawData = data;
      return eventArgs;
    };
    DrillThrough2.prototype.triggerDialog = function(valueCaption, aggType, rawData, pivotValue, element) {
      var valuetText = aggType === "CalculatedField" ? valueCaption.toString() : aggType !== "" ? this.parent.localeObj.getConstant(aggType) + " " + this.parent.localeObj.getConstant("of") + " " + valueCaption : valueCaption;
      valuetText = this.parent.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(valuetText) : valuetText;
      var rowHeaders = this.parent.dataSourceSettings.valueAxis === "row" ? this.parent.getRowText(Number(element.getAttribute("index")), 0) : pivotValue.rowHeaders === "" ? "" : pivotValue.rowHeaders.toString().split(this.parent.dataSourceSettings.valueSortSettings.headerDelimiter).join(" - ");
      var eventArgs = {
        currentTarget: element,
        currentCell: pivotValue,
        rawData,
        rowHeaders,
        columnHeaders: pivotValue.columnHeaders === "" ? "" : pivotValue.columnHeaders.toString().split(this.parent.dataSourceSettings.valueSortSettings.headerDelimiter).join(" - "),
        value: valuetText + "(" + pivotValue.formattedText + ")",
        gridColumns: this.drillThroughDialog.frameGridColumns(rawData),
        cancel: false
      };
      if (this.parent.dataSourceSettings.type === "CSV") {
        eventArgs = this.frameData(eventArgs);
      }
      var drillThrough2 = this;
      this.parent.trigger(drillThrough, eventArgs, function(observedArgs) {
        if (!eventArgs.cancel) {
          drillThrough2.drillThroughDialog.showDrillThroughDialog(observedArgs);
        }
      });
    };
    DrillThrough2.prototype.destroy = function() {
      this.unWireEvents();
      if (this.drillThroughDialog) {
        this.drillThroughDialog.destroy();
        this.drillThroughDialog = null;
      } else {
        return;
      }
    };
    return DrillThrough2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/pivotchart/base/pivotchart.js
var PivotChart = (
  /** @class */
  function() {
    function PivotChart2(parent) {
      this.headerColl = {};
      this.maxLevel = 0;
      this.columnGroupObject = {};
      this.selectedLegend = 0;
      this.chartSeriesInfo = {};
      this.measurePos = -1;
      this.measuresNames = {};
      this.accumulationType = ["Pie", "Pyramid", "Doughnut", "Funnel"];
      this.isChartInitial = true;
      this.parent = parent;
    }
    PivotChart2.prototype.getModuleName = function() {
      return "pivotChart";
    };
    PivotChart2.prototype.loadChart = function(parent, chartSettings) {
      this.parent = parent;
      this.measuresNames = {};
      this.engineModule = this.parent.dataType === "olap" ? this.parent.olapEngineModule : this.parent.engineModule;
      this.dataSourceSettings = this.parent.dataSourceSettings;
      this.chartSettings = chartSettings;
      var isDataAvail = parent.dataType === "olap" ? parent.dataSourceSettings.url !== "" && !parent.olapEngineModule.isEmptyData && parent.olapEngineModule.tupColumnInfo.length > 0 && parent.olapEngineModule.tupRowInfo.length > 0 && (!isNullOrUndefined(parent.olapEngineModule.colMeasurePos) || !isNullOrUndefined(parent.olapEngineModule.rowMeasurePos)) : this.parent.dataSourceSettings.mode === "Server" ? !isNullOrUndefined(parent.dataSourceSettings.url) && parent.dataSourceSettings.url !== "" && parent.dataSourceSettings.values.length > 0 && !parent.engineModule.isEmptyData : parent.dataSourceSettings.values.length > 0 && parent.dataSourceSettings.dataSource && (parent.dataSourceSettings.dataSource.length > 0 || parent.dataSourceSettings.dataSource instanceof DataManager) && !parent.engineModule.isEmptyData;
      if (isDataAvail) {
        if (!this.parent.chart && (this.parent.element.querySelector(".e-chart") || this.parent.element.querySelector(".e-accumulationchart"))) {
          remove(select("#" + this.parent.element.id + "_chart", this.parent.element));
        }
        if (this.chartSettings.enableMultipleAxis && this.accumulationType.indexOf(chartSettings.chartSeries.type) < 0 && this.chartSettings.chartSeries.type !== "Pareto") {
          this.measureList = this.dataSourceSettings.values.map(function(item) {
            return item.name;
          });
        } else {
          this.measureList = [chartSettings.value === "" ? this.dataSourceSettings.values[0].name : chartSettings.value];
        }
        for (var _i = 0, _a = this.dataSourceSettings.values; _i < _a.length; _i++) {
          var field = _a[_i];
          var fieldName = field.name.replace(/[^A-Z0-9]+/ig, "_");
          this.measuresNames[field.name] = fieldName;
          this.measuresNames[fieldName] = field.name;
          if (this.chartSettings.chartSeries.type === "Polar" || this.chartSettings.chartSeries.type === "Radar") {
            this.measuresNames[field.caption ? field.caption : field.name] = field.name;
          }
        }
      } else if (this.parent.chart) {
        if (this.parent.element.querySelector(".e-chart")) {
          this.parent.chart.series = [];
          this.parent.chart.rows = [];
          this.parent.chart.primaryXAxis.title = "";
          this.parent.chart.primaryYAxis.title = "";
          this.parent.chart.primaryXAxis.multiLevelLabels = [];
          this.parent.chart.primaryYAxis.multiLevelLabels = [];
          if (this.parent.chart.axes.length > 0) {
            this.parent.chart.axes[0].title = "";
          }
          this.parent.chart.primaryXAxis.zoomFactor = isNullOrUndefined(this.parent.chartSettings.primaryXAxis.zoomFactor) ? 1 : this.parent.chartSettings.primaryXAxis.zoomFactor;
        } else if (this.parent.element.querySelector(".e-accumulationchart")) {
          this.parent.chart.series[0].dataSource = [{}];
          this.parent.chart.series[0].dataLabel = {};
        }
        this.parent.chart.refresh();
        return;
      } else {
        this.parent.appendChartElement();
        if (this.parent.enableVirtualization && this.isChartInitial) {
          this.isChartInitial = false;
          this.parent.onContentReady();
        }
        this.parent.notify(contentReady, {});
        return;
      }
      this.columnGroupObject = {};
      this.accEmptyPoint = false;
      var pivotValues = this.engineModule.pivotValues;
      this.currentMeasure = chartSettings.enableMultipleAxis && this.accumulationType.indexOf(chartSettings.chartSeries.type) < 0 && this.chartSettings.chartSeries.type !== "Pareto" ? this.measureList[0] : (chartSettings.value === "" || this.dataSourceSettings.values.filter(function(item) {
        return item.name === chartSettings.value;
      }).length === 0) && this.dataSourceSettings.values.length > 0 ? this.dataSourceSettings.values[0].name : chartSettings.value;
      var totColIndex = this.getColumnTotalIndex(pivotValues);
      var rKeys = Object.keys(pivotValues);
      var prevLevel;
      var firstLevelUName;
      var levelCollection = {};
      var prevCell;
      var integratedLevel = 0;
      var indexCount = -0.5;
      this.headerColl = {};
      this.maxLevel = 0;
      var levelPos = {};
      var lastHierarchy = "";
      var lastDimension = "";
      var memberCell;
      var drillDimension = "";
      this.chartSeriesInfo = {};
      this.selectedLegend = 0;
      var isDrill = false;
      var measureNames = {};
      var isValidHeader = false;
      var delimiter = this.parent.dataSourceSettings.valueSortSettings.headerDelimiter;
      for (var _b = 0, _c = this.dataSourceSettings.values; _b < _c.length; _b++) {
        var field = _c[_b];
        var fieldName = field.name;
        measureNames[fieldName] = field.caption ? field.caption : fieldName;
        measureNames[field.caption ? field.caption : fieldName] = fieldName;
      }
      if (this.parent.dataType === "olap") {
        var fieldPosition = [];
        levelPos = this.groupHierarchyWithLevels(pivotValues, fieldPosition);
        lastHierarchy = fieldPosition[fieldPosition.length - 1];
        lastDimension = this.measurePos === fieldPosition.length - 1 && fieldPosition.length > 1 ? fieldPosition[fieldPosition.length - 2] : lastHierarchy;
        drillDimension = lastDimension;
      }
      var reductionLevel = 0;
      var reductionLevelCount = 0;
      var finalReductionLevel = 0;
      var rowsInclude = false;
      var ignoreCount = 0;
      var rowReduction = 0;
      var previousHeader = 0;
      for (var _d = 0, rKeys_1 = rKeys; _d < rKeys_1.length; _d++) {
        var rKey = rKeys_1[_d];
        var rowIndex = Number(rKey);
        var drillMem = void 0;
        var previousRow = false;
        var firstRowCell = void 0;
        var indexReduction = void 0;
        if (rowsInclude) {
          firstRowCell = pivotValues[rowIndex - rowReduction][this.parent.engineModule.rowMaxLevel];
        } else {
          firstRowCell = pivotValues[rowIndex][this.parent.gridSettings.layout === "Tabular" ? this.parent.engineModule.rowMaxLevel : 0];
        }
        if (firstRowCell) {
          indexReduction = rowReduction === firstRowCell.level ? 1 : rowReduction + 1;
        }
        if (this.parent.gridSettings.layout === "Tabular" && (!this.parent.dataSourceSettings.showSubTotals || !this.parent.dataSourceSettings.showRowSubTotals && this.parent.dataSourceSettings.showColumnSubTotals)) {
          if (firstRowCell && pivotValues[rowIndex - (rowReduction === firstRowCell.level ? 1 : rowReduction + 1)] && pivotValues[rowIndex - indexReduction][this.parent.engineModule.rowMaxLevel]) {
            var previousRowCell = rowsInclude ? pivotValues[rowIndex - (rowReduction + 1)][this.parent.engineModule.rowMaxLevel] : pivotValues[rowIndex - indexReduction][this.parent.engineModule.rowMaxLevel];
            var previousRowLevelName = previousRowCell.valueSort.levelName;
            var previousRowLevelNameCollection = previousRowLevelName.split(delimiter);
            var firstRowLevelName = firstRowCell.valueSort.levelName;
            var levelNameCollection = firstRowLevelName.split(delimiter);
            var previousRowTextCollection = previousRowCell.formattedText.split(" ");
            drillMem = this.isMemberDrilled(previousRowCell, previousRowTextCollection);
            for (var z = previousRowLevelNameCollection.length - 2 - previousHeader; z >= 0; z--) {
              if (previousRowLevelNameCollection[z] !== levelNameCollection[z] && !drillMem) {
                if (ignoreCount !== 1) {
                  firstRowCell = rowsInclude ? pivotValues[rowIndex - (rowReduction + 1)][z] : pivotValues[rowIndex - (rowReduction === firstRowCell.level ? 1 : rowReduction + 1)][z];
                  previousRow = true;
                  rowsInclude = true;
                  ignoreCount++;
                  rowReduction++;
                  var rowKeys = Number(rKeys[rKeys.length - 1]) + 1;
                  rKeys[rKeys.length] = rowKeys.toString();
                  if (previousRowLevelNameCollection[z - 1] && previousRowLevelNameCollection[z - 1] !== levelNameCollection[z - 1]) {
                    ignoreCount = 0;
                    previousHeader++;
                  } else {
                    previousHeader = 0;
                  }
                } else {
                  ignoreCount--;
                }
                break;
              }
            }
          }
        }
        if (!isNullOrUndefined(pivotValues[rowIndex - rowReduction])) {
          var colIndex = this.parent.gridSettings.layout === "Tabular" ? this.parent.engineModule.rowMaxLevel : 0;
          var header = pivotValues[rowIndex - rowReduction][colIndex];
          var valueSort = header && header.valueSort && !isNullOrUndefined(header.valueSort.levelName) ? header.valueSort.levelName.toString().split(delimiter) : void 0;
          isValidHeader = false;
          if (valueSort && valueSort[0] !== "Grand Total") {
            if (chartSettings.enableMultipleAxis && this.accumulationType.indexOf(chartSettings.chartSeries.type) < 0 && this.chartSettings.chartSeries.type !== "Pareto" || valueSort.indexOf(measureNames[this.currentMeasure]) > -1) {
              isValidHeader = true;
            }
            if (!isValidHeader) {
              for (var _e = 0, valueSort_1 = valueSort; _e < valueSort_1.length; _e++) {
                var levelName = valueSort_1[_e];
                if (measureNames[levelName]) {
                  isValidHeader = true;
                  break;
                }
              }
              isValidHeader = isValidHeader ? false : true;
            }
          }
          if (header && header.axis === "row" && (this.dataSourceSettings.rows.length === 0 ? true : header.type !== "grand sum" && isValidHeader)) {
            if (this.parent.gridSettings.layout !== "Tabular") {
              if (firstRowCell.isSum) {
                continue;
              }
            }
            var tupInfo = this.parent.dataType === "olap" ? this.engineModule.tupRowInfo[firstRowCell.ordinal] : void 0;
            var fieldPos = -1;
            var currrentLevel = firstRowCell.level;
            if (this.parent.dataType === "olap") {
              isDrill = firstRowCell.hierarchy === "[Measures]" ? isDrill : this.isAttributeDrill(firstRowCell.hierarchy, tupInfo.drillInfo);
              drillDimension = drillDimension === lastDimension ? lastDimension : firstRowCell.hierarchy === "[Measures]" || firstRowCell.isNamedSet || this.engineModule.fieldList[firstRowCell.hierarchy] && !this.engineModule.fieldList[firstRowCell.hierarchy].hasAllMember ? lastDimension : drillDimension;
              fieldPos = tupInfo.drillInfo.length - 1;
              if (firstRowCell.memberType !== 3 && (tupInfo.measureName ? tupInfo.measureName === this.dataSourceSettings.values[0].name : true)) {
                firstLevelUName = firstLevelUName === void 0 ? firstRowCell.levelUniqueName : firstLevelUName;
                integratedLevel = firstLevelUName === firstRowCell.levelUniqueName ? 0 : integratedLevel;
                levelCollection = integratedLevel === 0 ? {} : levelCollection;
                integratedLevel = prevCell && firstLevelUName !== firstRowCell.levelUniqueName ? prevCell.hierarchy === firstRowCell.hierarchy ? integratedLevel + (firstRowCell.level - prevCell.level) : isNullOrUndefined(levelCollection[firstRowCell.levelUniqueName]) ? levelPos[firstRowCell.hierarchy].start : levelCollection[firstRowCell.levelUniqueName] : integratedLevel;
                levelCollection[firstRowCell.levelUniqueName] = integratedLevel;
                currrentLevel = integratedLevel;
                indexCount += prevCell && drillDimension === prevCell.hierarchy && !(prevCell.isDrilled && prevCell.hasChild) ? 1 : 0;
                drillDimension = isDrill ? firstRowCell.hierarchy : lastDimension;
                prevLevel = integratedLevel;
                prevCell = firstRowCell;
              }
            } else if (firstRowCell.type !== "value") {
              if (this.parent.gridSettings.layout === "Tabular") {
                var firstRowLevelName = firstRowCell.valueSort.levelName;
                var levelNameCollection = firstRowLevelName.split(delimiter);
                var formattedTextCollection = firstRowCell.formattedText.split(" ");
                drillMem = this.isMemberDrilled(firstRowCell, levelNameCollection);
                var valueSortIndex = valueSort.length - 2 !== this.parent.engineModule.rowMaxLevel - 1 ? valueSort.length - 2 : this.parent.engineModule.rowMaxLevel - 1;
                for (var k = 0; k <= this.parent.engineModule.rowMaxLevel; k++) {
                  if (this.headerColl[indexCount] && this.headerColl[indexCount][k] || previousRow) {
                    if (firstRowCell.isSum || previousRow) {
                      if (firstRowCell.level > 0) {
                        indexCount = indexCount - (firstRowCell.level === this.parent.engineModule.rowMaxLevel - 1 ? reductionLevel - 1 : reductionLevelCount - 1);
                        firstRowCell.formattedText = !this.parent.dataSourceSettings.showSubTotals || !this.parent.dataSourceSettings.showRowSubTotals && this.parent.dataSourceSettings.showColumnSubTotals ? firstRowCell.formattedText : formattedTextCollection.length > 2 ? formattedTextCollection.slice(0, formattedTextCollection.length - 1).join(" ") : formattedTextCollection[0];
                        firstRowCell.hasChild = true;
                        break;
                      } else {
                        indexCount = indexCount - (finalReductionLevel - 1);
                        firstRowCell.formattedText = !this.parent.dataSourceSettings.showSubTotals || !this.parent.dataSourceSettings.showRowSubTotals && this.parent.dataSourceSettings.showColumnSubTotals ? firstRowCell.formattedText : formattedTextCollection.length > 2 ? formattedTextCollection.slice(0, formattedTextCollection.length - 1).join(" ") : formattedTextCollection[0];
                        firstRowCell.hasChild = true;
                        break;
                      }
                    } else {
                      if (this.headerColl[indexCount][k] && valueSort[valueSortIndex] !== this.headerColl[indexCount][k].name) {
                        indexCount++;
                        break;
                      }
                    }
                  }
                }
                if (!firstRowCell.isSum && !previousRow) {
                  reductionLevel++;
                  reductionLevelCount++;
                  finalReductionLevel++;
                }
                if (!this.parent.dataSourceSettings.expandAll) {
                  firstRowCell.isDrilled = drillMem ? true : false;
                } else {
                  firstRowCell.isDrilled = drillMem ? false : true;
                }
              } else {
                if (!(prevLevel === void 0 || prevLevel < currrentLevel)) {
                  indexCount++;
                }
              }
              prevLevel = currrentLevel;
            }
            this.maxLevel = currrentLevel > this.maxLevel ? currrentLevel : this.maxLevel;
            var name_1 = this.parent.dataType === "olap" ? firstRowCell.formattedText : firstRowCell.actualText ? firstRowCell.actualText.toString() : firstRowCell.formattedText.toString();
            var values = this.engineModule.fieldList[this.currentMeasure];
            var text = this.parent.dataSourceSettings.rows.length === 0 ? this.parent.localeObj.getConstant("total") + " " + this.parent.localeObj.getConstant(values.aggregateType) + " " + this.parent.localeObj.getConstant("of") + " " + (!isNullOrUndefined(values.caption) ? values.caption : values.name) : firstRowCell.formattedText ? firstRowCell.formattedText.toString() : name_1;
            var caption = firstRowCell.hasChild && !firstRowCell.isNamedSet ? (firstRowCell.isDrilled ? " - " : " + ") + text : text;
            var levelName = tupInfo ? tupInfo.uNameCollection : firstRowCell.valueSort.levelName.toString();
            var cellInfo = {
              name: name_1,
              text: caption,
              hasChild: firstRowCell.hasChild,
              isDrilled: firstRowCell.isDrilled,
              levelName,
              level: currrentLevel,
              fieldName: firstRowCell.valueSort.axis ? firstRowCell.valueSort.axis.toString() : "",
              rowIndex: rowIndex - rowReduction,
              colIndex: 0,
              cell: firstRowCell
            };
            if (this.parent.dataType === "olap" ? firstRowCell.memberType !== 3 : firstRowCell.type !== "value") {
              if (this.headerColl[indexCount]) {
                this.headerColl[indexCount][currrentLevel] = cellInfo;
              } else {
                this.headerColl[indexCount] = {};
                this.headerColl[indexCount][currrentLevel] = cellInfo;
              }
              if (this.parent.gridSettings.layout === "Tabular") {
                if (firstRowCell.isSum || previousRow) {
                  if (firstRowCell.level > 0) {
                    indexCount = indexCount + (firstRowCell.level === this.parent.engineModule.rowMaxLevel - 1 ? reductionLevel - 1 : reductionLevelCount - 1);
                  } else {
                    indexCount = indexCount + (finalReductionLevel - 1);
                  }
                }
                if (firstRowCell.level === 0) {
                  reductionLevelCount = 0;
                  reductionLevel = 0;
                  finalReductionLevel = 0;
                } else if (firstRowCell.level === this.parent.engineModule.rowMaxLevel - 1) {
                  reductionLevel = 0;
                } else if (firstRowCell.level < this.parent.engineModule.rowMaxLevel - 1 && firstRowCell.level !== 0) {
                  reductionLevelCount = 0;
                }
              }
            }
            var rows = this.parent.gridSettings.layout === "Tabular" ? pivotValues[rowIndex - rowReduction] : pivotValues[rowIndex];
            var cKeys = Object.keys(rows);
            var prevMemberCell = void 0;
            if (this.parent.dataType === "olap") {
              memberCell = firstRowCell.memberType !== 3 ? firstRowCell : memberCell;
            } else {
              memberCell = firstRowCell.type !== "value" ? firstRowCell : memberCell;
              if (firstRowCell.type !== "value") {
                memberCell = firstRowCell;
              } else {
                var valueSort_2 = firstRowCell && firstRowCell.valueSort && firstRowCell.valueSort.levelName && firstRowCell.valueSort.levelName.toString().split(delimiter);
                var levelName_1 = void 0;
                if (valueSort_2 && valueSort_2.length > 0) {
                  valueSort_2.splice(valueSort_2.length - 1, 1);
                  levelName_1 = valueSort_2.join(delimiter);
                }
                if (this.parent.dataSourceSettings.valueIndex <= 0 || this.engineModule.valueAxis && this.dataSourceSettings.rows.length === this.engineModule.measureIndex || isNullOrUndefined(memberCell.valueSort) || levelName_1 === memberCell.valueSort.levelName) {
                  memberCell = memberCell;
                } else {
                  var prevIndex = rowIndex;
                  while (prevIndex > -1) {
                    if (pivotValues[prevIndex] && pivotValues[prevIndex][0] && pivotValues[prevIndex][0].valueSort && pivotValues[prevIndex][0].valueSort.levelName === levelName_1) {
                      memberCell = pivotValues[prevIndex][0];
                      prevIndex = 0;
                    }
                    prevIndex--;
                  }
                }
              }
            }
            for (var f = this.parent.gridSettings.layout === "Tabular" ? this.parent.engineModule.rowMaxLevel : 0; f < cKeys.length; f++) {
              var cKey = cKeys[f];
              var cellIndex = Number(cKey);
              var cell = pivotValues[rowIndex - rowReduction][cellIndex];
              var measureAllow = isNullOrUndefined(cell.rowHeaders) ? this.dataSourceSettings.rows.length === 0 : true;
              var actualText = this.parent.dataType === "olap" && tupInfo && tupInfo.measureName ? tupInfo.measureName : cell.actualText;
              if (!(this.parent.dataType === "olap" && cell.isGrandSum) && !totColIndex[cell.colIndex] && cell.axis === "value" && firstRowCell.type !== "header" && actualText !== "" && (chartSettings.enableMultipleAxis && this.accumulationType.indexOf(chartSettings.chartSeries.type) < 0 && this.chartSettings.chartSeries.type !== "Pareto" ? true : actualText === this.currentMeasure)) {
                if (isNullOrUndefined(firstRowCell.members)) {
                  firstRowCell.members = [];
                }
                if (this.parent.dataType === "olap" ? lastHierarchy === firstRowCell.hierarchy || isDrill ? firstRowCell.memberType === 3 && prevMemberCell ? fieldPos === this.measurePos ? prevMemberCell.isDrilled && prevMemberCell.hasChild : true : firstRowCell.isDrilled && firstRowCell.hasChild : true : (firstRowCell.type === "value" && prevMemberCell ? !isNullOrUndefined(prevMemberCell.members) && prevMemberCell.hasChild && prevMemberCell.isDrilled : firstRowCell.hasChild && firstRowCell.isDrilled) || !measureAllow) {
                  break;
                }
                if (this.parent.dataType === "olap" && cell.isSum === true && this.parent.dataSourceSettings.valueAxis === "row") {
                  continue;
                }
                var colHeaders = "";
                if (this.parent.dataType === "olap") {
                  colHeaders = cell.columnHeaders.toString().split(/~~|::/).join(" - ");
                } else {
                  var values_1 = cell.columnHeaders.toString().split(delimiter);
                  colHeaders = PivotUtil.formatChartHeaders(values_1, this, true, cell);
                }
                var rowHeaders = "";
                if (this.parent.dataType === "olap") {
                  rowHeaders = cell.rowHeaders.toString().split(/~~|::/).join(" - ");
                } else {
                  var values_2 = cell.rowHeaders.toString().split(delimiter);
                  rowHeaders = PivotUtil.formatChartHeaders(values_2, this, false, cell);
                }
                var columnSeries = colHeaders + " | " + actualText;
                this.chartSeriesInfo[colHeaders] = {
                  uniqueName: colHeaders,
                  caption: cell.hierarchyName && cell.hierarchyName.toString().split(delimiter).join(" - "),
                  colorIndex: []
                };
                this.chartSeriesInfo[this.chartSeriesInfo[colHeaders].caption] = this.chartSeriesInfo[colHeaders];
                var yValue = this.parent.dataType === "pivot" ? this.engineModule.aggregatedValueMatrix[rowIndex] && !isNullOrUndefined(this.engineModule.aggregatedValueMatrix[rowIndex][cellIndex]) ? Number(this.engineModule.aggregatedValueMatrix[rowIndex][cellIndex]) : !isNullOrUndefined(cell.value) ? Number(cell.value) : cell.value : !isNullOrUndefined(cell.value) ? Number(cell.value) : cell.value;
                yValue = yValue === Infinity ? null : yValue;
                if (yValue === 0) {
                  this.accEmptyPoint = true;
                }
                if (this.columnGroupObject[columnSeries]) {
                  this.columnGroupObject[columnSeries].push({
                    x: this.dataSourceSettings.rows.length === 0 ? firstRowCell.formattedText : rowHeaders,
                    y: yValue,
                    rIndex: rowIndex - rowReduction,
                    cIndex: cellIndex
                  });
                } else {
                  this.columnGroupObject[columnSeries] = [{
                    x: this.dataSourceSettings.rows.length === 0 ? firstRowCell.formattedText : rowHeaders,
                    y: yValue,
                    rIndex: rowIndex - rowReduction,
                    cIndex: cellIndex
                  }];
                }
              }
              prevMemberCell = memberCell;
            }
          }
        }
      }
      this.refreshChart();
    };
    PivotChart2.prototype.refreshChart = function() {
      this.chartSeries = [];
      var prevColorIndex = 0;
      var chartSeriesInfo = {};
      var columnKeys = Object.keys(this.columnGroupObject);
      this.persistSettings = JSON.parse(this.parent.getChartSettings()).chartSettings;
      var seriesColors = this.persistSettings.palettes && this.persistSettings.palettes.length > 0 ? this.persistSettings.palettes : getSeriesColor(this.chartSettings.theme);
      var delimiter = this.parent.chartSettings.columnDelimiter ? this.parent.chartSettings.columnDelimiter : "-";
      var columnHeader = this.parent.chartSettings.columnHeader && this.parent.chartSettings.columnHeader !== "" ? this.parent.chartSettings.columnHeader.split(delimiter).join(" - ") : "";
      var chartType = this.chartSettings.chartSeries ? this.chartSettings.chartSeries.type : void 0;
      var fieldWithCaption = {};
      for (var i = 0; i < this.parent.dataSourceSettings.values.length; i++) {
        fieldWithCaption[this.parent.dataSourceSettings.values[i].name] = !isNullOrUndefined(this.parent.dataSourceSettings.values[i].caption) ? this.parent.dataSourceSettings.values[i].caption : void 0;
      }
      if (this.accumulationType.indexOf(chartType) > -1 && columnKeys.length > 0) {
        this.currentColumn = columnKeys.indexOf(columnHeader + " | " + this.currentMeasure) > -1 && columnHeader !== void 0 ? columnHeader + " | " + this.currentMeasure : columnKeys[0];
        var currentSeries = {};
        currentSeries = this.persistSettings.chartSeries ? this.frameChartSeries(this.persistSettings.chartSeries) : currentSeries;
        if ((isNullOrUndefined(currentSeries.palettes) || currentSeries.palettes.length === 0) && !isNullOrUndefined(this.persistSettings.palettes) && this.persistSettings.palettes.length > 0) {
          currentSeries.palettes = this.persistSettings.palettes;
        }
        currentSeries.dataSource = this.columnGroupObject[this.currentColumn];
        currentSeries.xName = "x";
        currentSeries.yName = "y";
        if (this.persistSettings.chartSeries && this.persistSettings.chartSeries.dataLabel) {
          currentSeries.dataLabel = this.persistSettings.chartSeries.dataLabel;
          currentSeries.dataLabel.name = "x";
        } else {
          currentSeries.dataLabel = {
            visible: true,
            position: "Outside",
            name: "x"
          };
          this.parent.setProperties({
            chartSettings: {
              chartSeries: {
                dataLabel: {
                  visible: true,
                  position: "Outside"
                }
              }
            }
          }, true);
        }
        if (this.accEmptyPoint && currentSeries.emptyPointSettings) {
          currentSeries.emptyPointSettings.mode = "Zero";
        } else if (this.accEmptyPoint) {
          currentSeries.emptyPointSettings = {
            mode: "Zero"
          };
        }
        currentSeries.name = this.currentColumn;
        if (chartType === "Doughnut") {
          currentSeries.type = "Pie";
          currentSeries.innerRadius = this.chartSettings.chartSeries.innerRadius ? this.chartSettings.chartSeries.innerRadius : "40%";
        } else if (chartType === "Pie") {
          currentSeries.innerRadius = this.chartSettings.chartSeries.innerRadius ? this.chartSettings.chartSeries.innerRadius : "0";
        }
        this.chartSeries = this.chartSeries.concat(currentSeries);
      } else {
        for (var _i = 0, columnKeys_1 = columnKeys; _i < columnKeys_1.length; _i++) {
          var key = columnKeys_1[_i];
          var currentSeries = {};
          currentSeries = this.persistSettings.chartSeries ? this.frameChartSeries(this.persistSettings.chartSeries) : currentSeries;
          if (!isNullOrUndefined(currentSeries.palettes) && currentSeries.palettes.length > 0 && (isNullOrUndefined(this.persistSettings.palettes) || this.persistSettings.palettes.length === 0)) {
            this.chartSettings.palettes = currentSeries.palettes;
          }
          for (var i = 0; i < this.columnGroupObject[key].length; i++) {
            var values = this.engineModule.fieldList[this.currentMeasure];
            this.columnGroupObject[key][i].x = this.parent.dataSourceSettings.rows.length === 0 && !this.chartSettings.showMultiLevelLabels ? this.parent.localeObj.getConstant("total") + " " + this.parent.localeObj.getConstant(values.aggregateType) + " " + this.parent.localeObj.getConstant("of") + " " + (!isNullOrUndefined(values.caption) ? values.caption : values.name) : this.columnGroupObject[key][i].x === "" ? this.parent.localeObj.getConstant("blank") : this.columnGroupObject[key][i].x;
          }
          currentSeries.dataSource = this.columnGroupObject[key];
          currentSeries.xName = "x";
          currentSeries.yName = "y";
          currentSeries.visible = true;
          var multiAxisKey = void 0;
          var fieldName = void 0;
          var currentSeriesName = void 0;
          for (var i = 0, j = key.split(" | "); i < j.length; i++) {
            if (this.measuresNames && this.measuresNames[j[i]]) {
              fieldName = j[i];
              currentSeriesName = key.split(" | " + fieldName)[0];
            }
          }
          if (this.chartSettings.enableMultipleAxis) {
            var fieldCaptionName = fieldName;
            fieldCaptionName = !isNullOrUndefined(fieldWithCaption[fieldCaptionName]) ? fieldWithCaption[fieldCaptionName] : fieldCaptionName;
            multiAxisKey = currentSeriesName + " | " + fieldCaptionName;
          }
          currentSeries.name = this.chartSettings.enableMultipleAxis ? multiAxisKey : currentSeriesName;
          if (this.chartSettings.showPointColorByMembers && this.chartSettings.enableMultipleAxis) {
            currentSeries.name = currentSeriesName;
            var seriesName = this.chartSeriesInfo[currentSeries.name].caption;
            currentSeries.name = seriesName !== void 0 && seriesName !== null ? seriesName : currentSeries.name;
            if (!chartSeriesInfo[currentSeries.name]) {
              prevColorIndex = seriesColors[prevColorIndex] ? prevColorIndex : 0;
              chartSeriesInfo[currentSeries.name] = {
                name: currentSeries.name,
                color: seriesColors[prevColorIndex]
              };
              currentSeries.fill = seriesColors[prevColorIndex++];
              this.chartSeriesInfo[currentSeries.name].colorIndex.push(this.selectedLegend++);
            } else {
              currentSeries.fill = chartSeriesInfo[currentSeries.name].color;
              this.chartSeriesInfo[currentSeries.name].colorIndex.push(this.selectedLegend++);
              currentSeries.name = void 0;
            }
          }
          if (["Radar", "Polar"].indexOf(chartType) < 0) {
            var measure = fieldName;
            currentSeries.tooltipMappingName = this.measuresNames[measure];
            currentSeries.yAxisName = this.chartSettings.enableMultipleAxis && this.chartSettings.multipleAxisMode === "Combined" ? this.measureList.join("_") : this.measuresNames[measure] ? this.measuresNames[measure] : measure;
          }
          if (this.persistSettings.chartSeries && this.persistSettings.chartSeries.emptyPointSettings) {
            currentSeries.emptyPointSettings = this.persistSettings.chartSeries.emptyPointSettings;
          }
          if (!currentSeries.emptyPointSettings) {
            currentSeries.emptyPointSettings = {
              mode: "Zero"
            };
          }
          this.chartSeries = this.chartSeries.concat(currentSeries);
        }
      }
      var seriesEvent = {
        series: this.chartSeries,
        cancel: false
      };
      var pivotChart = this;
      this.parent.trigger(chartSeriesCreated, seriesEvent, function(observedArgs) {
        if (!observedArgs.cancel) {
          pivotChart.bindChart();
        } else {
          if (pivotChart.element) {
            remove(pivotChart.element);
          }
          pivotChart.parent.notify(contentReady, {});
        }
      });
    };
    PivotChart2.prototype.frameObjectWithKeys = function(series) {
      var keys = Object.keys(series);
      var keyPos = 0;
      var framedSeries = {};
      while (keyPos < keys.length) {
        framedSeries[keys[keyPos]] = series[keys[keyPos]];
        keyPos++;
      }
      return framedSeries;
    };
    PivotChart2.prototype.frameChartSeries = function(series) {
      var keys = Object.keys(series);
      var keyPos = 0;
      var framedSeries = {};
      while (keyPos < keys.length) {
        if (this.accumulationType.indexOf(this.parent.chartSettings.chartSeries.type) > -1 && ["fill", "dashArray", "width", "segmentAxis", "drawType", "isClosed", "segments", "stackingGroup", "marker", "errorBar", "trendlines", "minRadius", "splineType", "maxRadius", "cardinalSplineTension", "columnWidth", "columnSpacing", "cornerRadius"].indexOf(keys[keyPos]) > -1 || this.accumulationType.indexOf(this.parent.chartSettings.chartSeries.type) < 0 && ["endAngle", "explode", "explodeAll", "explodeIndex", "explodeOffset", "gapRatio", "groupMode", "groupTo", "neckHeight", "neckWidth", "pyramidMode", "startAngle", "dataLabel", "innerRadius"].indexOf(keys[keyPos]) > -1) {
          keyPos++;
          continue;
        }
        framedSeries[keys[keyPos]] = series[keys[keyPos]];
        keyPos++;
      }
      return framedSeries;
    };
    PivotChart2.prototype.bindChart = function() {
      this.parent.showWaitingPopup();
      var currentXAxis = this.configXAxis();
      var currentTooltipSettings = this.configTooltipSettings();
      var currentLegendSettings = this.configLegendSettings();
      var currentZoomSettings = this.configZoomSettings();
      var axesWithRows = this.frameAxesWithRows();
      var type = this.chartSettings.chartSeries.type;
      if (this.parent.displayOption.view === "Both") {
        this.element = this.parent.displayOption.primary === "Chart" ? this.parent.element.insertBefore(!this.element ? createElement("div", {
          className: PIVOTCHART,
          id: this.parent.element.id + "_chart"
        }) : this.element, this.parent.element.querySelector("." + GRID_CLASS)) : this.parent.element.appendChild(!this.element ? createElement("div", {
          className: PIVOTCHART,
          id: this.parent.element.id + "_chart"
        }) : this.element);
      } else if (!this.element) {
        this.element = this.parent.element.appendChild(createElement("div", {
          className: PIVOTCHART,
          id: this.parent.element.id + "_chart"
        }));
      }
      if (!this.chartElement && this.parent.chartSettings.enableScrollOnMultiAxis && this.parent.chartSettings.enableMultipleAxis && this.chartSettings.chartSeries.type !== "Pareto") {
        this.parent.element.querySelector("." + PIVOTCHART).innerHTML = "";
        this.chartElement = this.parent.element.querySelector("." + PIVOTCHART).appendChild(createElement("div", {
          className: PIVOTCHART_INNER,
          id: this.parent.element.id + "_chartInner"
        }));
      }
      if (this.parent.element.querySelector("." + PIVOTCHART_INNER)) {
        this.parent.element.querySelector("." + PIVOTCHART_INNER).innerHTML = "";
      }
      if (this.parent.showGroupingBar) {
        this.element.style.minWidth = this.parent.minWidth ? this.parent.minWidth + "px" : "400px !important";
      } else {
        this.element.style.minWidth = this.parent.minWidth ? this.parent.minWidth + "px" : "310px !important";
      }
      var width = this.parent.width.toString();
      if (this.parent.showToolbar && this.parent.grid) {
        width = this.parent.getGridWidthAsNumber().toString();
      }
      var height = this.getChartHeight();
      if (this.parent.chartSettings.enableScrollOnMultiAxis && this.parent.chartSettings.enableMultipleAxis && this.accumulationType.indexOf(type) < 0 && this.chartSettings.chartSeries.type !== "Pareto") {
        this.parent.element.querySelector("." + PIVOTCHART).style.height = (height === "auto" ? this.getChartAutoHeight() : height) + "px";
        this.parent.element.querySelector("." + PIVOTCHART).style.width = width + "px";
        if (this.parent.chartSettings.chartSeries.type !== "Polar" && this.parent.chartSettings.chartSeries.type !== "Radar") {
          this.parent.element.querySelector("." + PIVOTCHART).style.overflow = "auto";
          this.parent.element.querySelector("." + PIVOTCHART).style.overflowX = "hidden";
        }
      }
      if (this.parent.chart && (this.parent.chart.getModuleName() === "accumulationchart" && this.accumulationType.indexOf(type) < 0 || this.parent.chart.getModuleName() === "chart" && this.accumulationType.indexOf(type) > -1 && this.chartSettings.chartSeries.type !== "Pareto")) {
        this.parent.chart.destroy();
        if (select("#" + this.parent.element.id + "_chart", this.parent.element)) {
          select("#" + this.parent.element.id + "_chart", this.parent.element).innerHTML = "";
          select("#" + this.parent.element.id + "_chart", this.parent.element).appendChild(createElement("div", {
            className: PIVOTCHART_INNER,
            id: this.parent.element.id + "_chartInner"
          }));
        }
      }
      if (!(this.parent.chart && this.parent.chart.element && this.parent.element.querySelector(".e-chart") || this.parent.element.querySelector(".e-accumulationchart")) || this.parent.toolbarModule && this.parent.toolbarModule.isMultiAxisChange) {
        if (this.parent.toolbarModule && this.parent.toolbarModule.isMultiAxisChange && this.parent.chart) {
          if (!this.parent.chart.isDestroyed) {
            this.parent.chart.destroy();
          }
          this.parent.chart = void 0;
          select("#" + this.parent.element.id + "_chart", this.parent.element).innerHTML = "";
          select("#" + this.parent.element.id + "_chart", this.parent.element).appendChild(createElement("div", {
            className: PIVOTCHART_INNER,
            id: this.parent.element.id + "_chartInner"
          }));
          this.parent.toolbarModule.isMultiAxisChange = false;
        }
        Chart.Inject(ColumnSeries, StackingColumnSeries, RangeColumnSeries, BarSeries, StackingBarSeries, ScatterSeries, BubbleSeries, LineSeries, StepLineSeries, SplineSeries, SplineAreaSeries, MultiColoredLineSeries, PolarSeries, RadarSeries, AreaSeries, RangeAreaSeries, StackingAreaSeries, StepAreaSeries, StackingLineSeries, MultiColoredAreaSeries, ParetoSeries, Legend, Tooltip2, Category, MultiLevelLabel, ScrollBar, Zoom, Export, Crosshair, Selection2, StripLine, DataLabel);
        AccumulationChart.Inject(PieSeries, FunnelSeries, PyramidSeries, AccumulationDataLabel, AccumulationLegend, AccumulationTooltip, Export);
        if (this.accumulationType.indexOf(type) > -1) {
          this.parent.chart = new AccumulationChart({
            series: this.chartSeries.length > 0 ? this.chartSeries : [{}],
            legendSettings: currentLegendSettings,
            tooltip: currentTooltipSettings,
            width,
            height: height.toString(),
            title: this.chartSettings.title,
            enableSmartLabels: this.chartSettings.enableSmartLabels,
            center: this.chartSettings.pieCenter,
            enableBorderOnMouseMove: this.chartSettings.enableBorderOnMouseMove,
            highlightMode: this.chartSettings.highlightMode,
            highlightPattern: this.chartSettings.highlightPattern,
            titleStyle: this.chartSettings.titleStyle,
            subTitle: this.chartSettings.subTitle,
            subTitleStyle: this.chartSettings.subTitleStyle,
            margin: this.chartSettings.margin,
            border: this.chartSettings.border,
            background: this.chartSettings.background,
            theme: this.chartSettings.theme,
            selectionMode: this.chartSettings.accumulationSelectionMode,
            isMultiSelect: this.chartSettings.isMultiSelect,
            enableExport: this.chartSettings.enableExport,
            selectedDataIndexes: this.chartSettings.selectedDataIndexes,
            enableAnimation: this.chartSettings.enableAnimation,
            useGroupingSeparator: this.chartSettings.useGroupingSeparator,
            locale: this.parent.locale,
            enableRtl: this.parent.enableRtl,
            beforePrint: this.beforePrint.bind(this),
            animationComplete: this.animationComplete.bind(this),
            legendRender: this.legendRender.bind(this),
            textRender: this.textRender.bind(this),
            pointRender: this.pointRender.bind(this),
            seriesRender: this.seriesRender.bind(this),
            chartMouseMove: this.chartMouseMove.bind(this),
            chartMouseClick: this.chartMouseClick.bind(this),
            pointMove: this.pointMove.bind(this),
            pointClick: this.pointClick.bind(this),
            chartMouseLeave: this.chartMouseLeave.bind(this),
            chartMouseDown: this.chartMouseDown.bind(this),
            chartMouseUp: this.chartMouseUp.bind(this),
            tooltipRender: this.tooltipRender.bind(this),
            loaded: this.loaded.bind(this),
            load: this.load.bind(this),
            resized: this.resized.bind(this)
          });
        } else {
          this.parent.chart = new Chart({
            series: this.chartSeries.length > 0 ? this.chartSeries : [{}],
            legendSettings: currentLegendSettings,
            tooltip: currentTooltipSettings,
            zoomSettings: currentZoomSettings,
            axes: type === "Polar" || type === "Radar" ? [] : axesWithRows.axes,
            rows: type === "Polar" || type === "Radar" ? [{}] : type === "Bar" || type === "StackingBar" || type === "StackingBar100" || type === "Pareto" && this.chartSettings.enableMultipleAxis ? [{
              height: "100%"
            }] : axesWithRows.rows,
            columns: type === "Polar" || type === "Radar" ? [{}] : type === "Bar" || type === "StackingBar" || type === "StackingBar100" && this.chartSettings.enableMultipleAxis ? axesWithRows.columns : [{
              width: "100%"
            }],
            primaryYAxis: type === "Polar" || type === "Radar" ? axesWithRows.axes[0] : {
              visible: false
            },
            primaryXAxis: currentXAxis,
            width,
            height: this.parent.chartSettings.chartSeries.type !== "Polar" && this.parent.chartSettings.chartSeries.type !== "Radar" && this.parent.chartSettings.enableScrollOnMultiAxis && this.parent.chartSettings.enableMultipleAxis && this.parent.chartSettings.chartSeries.type !== "Pareto" && this.parent.dataSourceSettings.values.length > 0 ? Number(height) > this.parent.dataSourceSettings.values.length * 235 + 100 ? isNaN(Number(height)) ? height.toString() : (Number(height) - 5).toString() : !isNaN(Number(height)) || this.parent.dataSourceSettings.values.length > 1 ? (this.parent.dataSourceSettings.values.length * 235 + 100).toString() : height.toString() : height.toString(),
            title: this.chartSettings.title,
            titleStyle: this.chartSettings.titleStyle,
            subTitle: this.chartSettings.subTitle,
            subTitleStyle: this.chartSettings.subTitleStyle,
            margin: this.chartSettings.margin,
            border: this.chartSettings.border,
            background: this.chartSettings.background,
            chartArea: !isNullOrUndefined(this.persistSettings.chartArea) ? this.persistSettings.chartArea : this.chartSettings.chartArea,
            palettes: this.chartSettings.palettes,
            theme: this.chartSettings.theme,
            crosshair: this.chartSettings.crosshair,
            selectionMode: this.chartSettings.selectionMode,
            isMultiSelect: this.chartSettings.isMultiSelect,
            enableExport: this.chartSettings.enableExport,
            selectedDataIndexes: this.chartSettings.selectedDataIndexes,
            isTransposed: this.chartSettings.isTransposed,
            enableAnimation: this.chartSettings.enableAnimation,
            enableCanvas: this.chartSettings.enableCanvas,
            useGroupingSeparator: this.chartSettings.useGroupingSeparator,
            description: this.chartSettings.description,
            tabIndex: this.chartSettings.tabIndex,
            locale: this.parent.locale,
            enableRtl: this.parent.enableRtl,
            enableSideBySidePlacement: this.chartSettings.enableSideBySidePlacement,
            beforePrint: this.beforePrint.bind(this),
            animationComplete: this.animationComplete.bind(this),
            legendRender: this.legendRender.bind(this),
            textRender: this.textRender.bind(this),
            pointRender: this.pointRender.bind(this),
            seriesRender: this.seriesRender.bind(this),
            chartMouseMove: this.chartMouseMove.bind(this),
            chartMouseClick: this.chartMouseClick.bind(this),
            pointMove: this.pointMove.bind(this),
            pointClick: this.pointClick.bind(this),
            chartMouseLeave: this.chartMouseLeave.bind(this),
            chartMouseDown: this.chartMouseDown.bind(this),
            chartMouseUp: this.chartMouseUp.bind(this),
            dragComplete: this.dragComplete.bind(this),
            zoomComplete: this.zoomComplete.bind(this),
            scrollStart: this.scrollStart.bind(this),
            scrollEnd: this.scrollEnd.bind(this),
            scrollChanged: this.scrollChanged.bind(this),
            tooltipRender: this.tooltipRender.bind(this),
            legendClick: this.legendClick.bind(this),
            loaded: this.loaded.bind(this),
            load: this.load.bind(this),
            resized: this.resized.bind(this),
            axisLabelRender: this.axisLabelRender.bind(this),
            multiLevelLabelClick: this.multiLevelLabelClick.bind(this),
            axisMultiLabelRender: this.multiLevelLabelRender.bind(this)
          });
        }
        this.parent.chart.isStringTemplate = true;
      } else {
        this.parent.chart.series = this.chartSeries;
        this.parent.chart.title = this.parent.chartSettings.title;
        this.parent.chart.subTitle = this.parent.chartSettings.subTitle;
        this.parent.chart.background = this.parent.chartSettings.background;
        this.parent.chart.theme = this.parent.chartSettings.theme;
        this.parent.chart.legendSettings = currentLegendSettings;
        this.parent.chart.selectionMode = this.parent.chartSettings.selectionMode;
        this.parent.chart.enableExport = this.chartSettings.enableExport;
        this.parent.chart.isMultiSelect = this.parent.chartSettings.isMultiSelect;
        this.parent.chart.enableAnimation = this.parent.chartSettings.enableAnimation;
        this.parent.chart.useGroupingSeparator = this.parent.chartSettings.useGroupingSeparator;
        this.parent.chart.highlightPattern = this.parent.chartSettings.highlightPattern;
        if (this.accumulationType.indexOf(type) > -1) {
          this.parent.chart.enableBorderOnMouseMove = this.parent.chartSettings.enableBorderOnMouseMove;
          this.parent.chart.highlightMode = this.parent.chartSettings.highlightMode;
          this.parent.chart.enableSmartLabels = this.parent.chartSettings.enableSmartLabels;
        } else {
          this.parent.chart.palettes = this.parent.chartSettings.palettes;
          this.parent.chart.isTransposed = this.parent.chartSettings.isTransposed;
          this.parent.chart.enableSideBySidePlacement = this.parent.chartSettings.enableSideBySidePlacement;
          this.parent.chart.tabIndex = this.parent.chartSettings.tabIndex;
          this.parent.chart.description = this.parent.chartSettings.description;
          this.parent.chart.enableCanvas = this.parent.chartSettings.enableCanvas;
        }
        if (type === "Polar" || type === "Radar") {
          this.parent.chart.primaryXAxis = currentXAxis;
          this.parent.chart.primaryYAxis.visible = true;
          this.parent.chart.primaryYAxis = axesWithRows.axes[0];
          this.parent.chart.axes = [];
          this.parent.chart.rows = [{}];
        } else if (this.accumulationType.indexOf(type) < 0 && this.parent.chart.getModuleName() === "chart") {
          this.parent.chart.primaryYAxis.visible = false;
          this.parent.chart.primaryXAxis = currentXAxis;
          this.parent.chart.axes = axesWithRows.axes;
          if (type === "Bar" || type === "StackingBar" || type === "StackingBar100" && this.chartSettings.enableMultipleAxis) {
            this.parent.chart.rows = [{
              height: "100%"
            }];
            this.parent.chart.columns = axesWithRows.columns;
          } else if (type === "Pareto" && this.chartSettings.enableMultipleAxis) {
            this.parent.chart.rows = [{
              height: "100%"
            }];
            this.parent.chart.columns = [{
              width: "100%"
            }];
          } else {
            this.parent.chart.rows = axesWithRows.rows;
            this.parent.chart.columns = [{
              width: "100%"
            }];
          }
        }
        this.parent.chart.refresh();
        if (this.accumulationType.indexOf(type) > -1 && this.parent.chart.getModuleName() === "accumulationchart" && (this.parent.dataSourceSettings.rows.length === 0 || this.parent.dataSourceSettings.columns.length === 0)) {
          this.parent.hideWaitingPopup();
          if (this.parent.pivotFieldListModule) {
            hideSpinner(this.parent.pivotFieldListModule.fieldListSpinnerElement);
          }
        }
      }
      if (this.parent.chartSettings.enableScrollOnMultiAxis && this.parent.chartSettings.enableMultipleAxis) {
        this.parent.chart.appendTo(select("#" + this.parent.element.id + "_chartInner", this.parent.element));
      } else {
        this.parent.chart.appendTo(select("#" + this.parent.element.id + "_chart", this.parent.element));
      }
    };
    PivotChart2.prototype.legendClick = function(args) {
      if (this.chartSettings.showPointColorByMembers && this.chartSettings.enableMultipleAxis) {
        var colorIndex = this.chartSeriesInfo[args.legendText].colorIndex;
        for (var i = 1; i < colorIndex.length; i++) {
          args.chart.series[colorIndex[i]].visible = !args.chart.series[colorIndex[i]].visible;
        }
      }
      this.parent.trigger(chartLegendClick, args);
    };
    PivotChart2.prototype.pointClick = function(args) {
      var dataSource = args.series.dataSource ? args.series.dataSource : this.parent.chart.series[args.seriesIndex].dataSource;
      if ((["Pie", "Funnel", "Doughnut", "Pyramid", "Radar", "Polar"].indexOf(this.parent.chartSettings.chartSeries.type) > -1 || !this.parent.chartSettings.showMultiLevelLabels) && (this.parent.dataType === "olap" ? true : this.parent.dataSourceSettings.rows.length > 1)) {
        this.pivotIndex = {
          rIndex: dataSource ? dataSource[args.pointIndex].rIndex : void 0,
          cIndex: dataSource ? dataSource[args.pointIndex].cIndex : void 0
        };
        this.creatMenu();
        var pos = this.parent.element.getBoundingClientRect();
        var y = (this.parent.element.querySelector(".e-pivot-toolbar") ? this.parent.element.querySelector(".e-pivot-toolbar").clientHeight : 0) + (this.parent.element.querySelector(".e-chart-grouping-bar") ? this.parent.element.querySelector(".e-chart-grouping-bar").clientHeight : 0) + (window.scrollY || document.documentElement.scrollTop) + pos.top;
        this.accumulationMenu.open(y + args.y, args.x + pos.left + (window.scrollX || document.documentElement.scrollLeft));
      } else if ((this.parent.allowDrillThrough || this.parent.editSettings.allowEditing) && this.parent.drillThroughModule) {
        var rIndex = dataSource[args.pointIndex].rIndex;
        var cIndex = dataSource[args.pointIndex].cIndex;
        this.parent.drillThroughModule.executeDrillThrough(this.parent.pivotValues[rIndex][cIndex], rIndex, cIndex);
      }
      this.parent.trigger(chartPointClick, args);
    };
    PivotChart2.prototype.frameAxesWithRows = function() {
      var axes = [];
      var rows = [];
      var columns = [];
      var yAxisTitles = [];
      var percentChart = this.persistSettings.chartSeries && (this.persistSettings.chartSeries.type === "StackingColumn100" || this.persistSettings.chartSeries.type === "StackingBar100" || this.persistSettings.chartSeries.type === "StackingArea100" || this.persistSettings.chartSeries.type === "StackingLine100");
      var percentAggregateTypes = ["PercentageOfGrandTotal", "PercentageOfColumnTotal", "PercentageOfRowTotal", "PercentageOfDifferenceFrom", "PercentageOfParentRowTotal", "PercentageOfParentColumnTotal", "PercentageOfParentTotal"];
      if (this.chartSettings.enableMultipleAxis) {
        var valCnt = 0;
        var divider = 100 / this.dataSourceSettings.values.length + "%";
        for (var _i = 0, _a = this.dataSourceSettings.values; _i < _a.length; _i++) {
          var item = _a[_i];
          var measureField = this.engineModule.fieldList[item.name];
          var measureAggregatedName = (this.parent.dataType === "olap" ? "" : this.parent.localeObj.getConstant(measureField.aggregateType) + " " + this.parent.localeObj.getConstant("of") + " ") + measureField.caption;
          yAxisTitles.push(measureAggregatedName);
          var formatSetting = void 0;
          for (var _b = 0, _c = this.dataSourceSettings.formatSettings; _b < _c.length; _b++) {
            var field = _c[_b];
            if (field.name === item.name) {
              formatSetting = field;
              break;
            }
          }
          var format = PivotUtil.inArray(measureField.aggregateType, percentAggregateTypes) !== -1 ? "P2" : formatSetting ? formatSetting.format : this.parent.dataType === "olap" ? this.getFormat(measureField.formatString) : "N";
          var resFormat = this.chartSettings.chartSeries.type === "Polar" || this.chartSettings.chartSeries.type === "Radar" ? true : false;
          var currentYAxis = {};
          currentYAxis = this.persistSettings.primaryYAxis ? this.frameObjectWithKeys(this.persistSettings.primaryYAxis) : currentYAxis;
          currentYAxis.labelFormat = currentYAxis.labelFormat ? currentYAxis.labelFormat : percentChart ? "" : !resFormat ? format : "N";
          currentYAxis.title = currentYAxis.title ? currentYAxis.title : this.chartSettings.multipleAxisMode === "Combined" ? yAxisTitles.join(" - ") : measureAggregatedName;
          currentYAxis.zoomFactor = isNullOrUndefined(this.chartSettings.primaryYAxis.zoomFactor) ? 1 : this.chartSettings.primaryYAxis.zoomFactor;
          currentYAxis.edgeLabelPlacement = this.chartSettings.primaryYAxis.edgeLabelPlacement ? this.chartSettings.primaryYAxis.edgeLabelPlacement : this.persistSettings.primaryYAxis.edgeLabelPlacement;
          if (this.chartSettings.chartSeries.type === "Bar" || this.chartSettings.chartSeries.type === "StackingBar" || this.chartSettings.chartSeries.type === "StackingBar100") {
            currentYAxis.plotOffsetRight = currentYAxis.plotOffsetRight ? currentYAxis.plotOffsetRight : 30;
          } else {
            currentYAxis.plotOffsetTop = currentYAxis.plotOffsetTop ? currentYAxis.plotOffsetTop : 30;
          }
          if (!resFormat) {
            currentYAxis.name = this.chartSettings.multipleAxisMode === "Combined" ? this.measureList.join("_") : this.measuresNames[item.name] ? this.measuresNames[item.name] : item.name;
          }
          axes = axes.concat(currentYAxis);
          if (this.chartSettings.multipleAxisMode === "Combined") {
            axes = [axes[axes.length - 1]];
          }
          if (this.chartSettings.multipleAxisMode === "Stacked") {
            currentYAxis.rowIndex = valCnt;
            currentYAxis.columnIndex = valCnt;
            rows.push({
              height: divider
            });
            columns.push({
              width: divider
            });
          } else {
            currentYAxis.rowIndex = 0;
            currentYAxis.columnIndex = 0;
            rows = [{
              height: "100%"
            }];
            columns = [{
              width: "100%"
            }];
          }
          valCnt++;
        }
      } else {
        var measureField = this.engineModule.fieldList[this.currentMeasure];
        var measureAggregatedName = (this.parent.dataType === "olap" ? "" : this.parent.localeObj.getConstant(measureField.aggregateType) + " " + this.parent.localeObj.getConstant("of") + " ") + measureField.caption;
        var formatSetting = void 0;
        for (var _d = 0, _e = this.dataSourceSettings.formatSettings; _d < _e.length; _d++) {
          var item = _e[_d];
          if (item.name === this.currentMeasure) {
            formatSetting = item;
            break;
          }
        }
        var currentYAxis = {};
        var format = PivotUtil.inArray(measureField.aggregateType, percentAggregateTypes) !== -1 ? "P2" : formatSetting ? formatSetting.format : this.parent.dataType === "olap" ? this.getFormat(measureField.formatString) : "N";
        currentYAxis = this.persistSettings.primaryYAxis ? this.frameObjectWithKeys(this.persistSettings.primaryYAxis) : currentYAxis;
        currentYAxis.zoomFactor = isNullOrUndefined(this.chartSettings.primaryYAxis.zoomFactor) ? 1 : this.chartSettings.primaryYAxis.zoomFactor;
        currentYAxis.rowIndex = 0;
        currentYAxis.columnIndex = 0;
        currentYAxis.edgeLabelPlacement = this.chartSettings.primaryYAxis.edgeLabelPlacement ? this.chartSettings.primaryYAxis.edgeLabelPlacement : this.persistSettings.primaryYAxis.edgeLabelPlacement;
        if (!(this.chartSettings.chartSeries.type === "Polar" || this.chartSettings.chartSeries.type === "Radar")) {
          currentYAxis.name = this.measuresNames[this.currentMeasure] ? this.measuresNames[this.currentMeasure] : this.currentMeasure;
        }
        currentYAxis.labelFormat = currentYAxis.labelFormat ? currentYAxis.labelFormat : percentChart ? "" : format;
        currentYAxis.title = currentYAxis.title ? currentYAxis.title : measureAggregatedName;
        axes = axes.concat(currentYAxis);
        rows.push({
          height: "100%"
        });
        columns.push({
          width: "100%"
        });
      }
      return {
        axes,
        rows,
        columns
      };
    };
    PivotChart2.prototype.getFormat = function(format) {
      if (format === "Currency") {
        format = "C";
      } else if (format === "Percent") {
        format = "P";
      } else {
        format = "N";
      }
      return format;
    };
    PivotChart2.prototype.getColumnTotalIndex = function(pivotValues) {
      var colIndexColl = {};
      var rKeys = Object.keys(pivotValues);
      for (var _i = 0, rKeys_2 = rKeys; _i < rKeys_2.length; _i++) {
        var rowIndex = rKeys_2[_i];
        var rows = pivotValues[Number(rowIndex)];
        var cKeys = void 0;
        if (!isNullOrUndefined(rows)) {
          cKeys = Object.keys(rows);
          for (var _a = 0, cKeys_1 = cKeys; _a < cKeys_1.length; _a++) {
            var cellIndex = cKeys_1[_a];
            var cell = rows[Number(cellIndex)];
            if (!isNullOrUndefined(cell)) {
              if (cell.axis !== "column") {
                return colIndexColl;
              } else if ((cell.type === "sum" || (this.dataSourceSettings && this.dataSourceSettings.columns && this.dataSourceSettings.columns.length === 0 ? false : cell.type === "grand sum")) && cell.rowSpan !== -1) {
                colIndexColl[cell.colIndex] = cell.colIndex;
              }
            }
          }
        }
      }
      return colIndexColl;
    };
    PivotChart2.prototype.groupHierarchyWithLevels = function(pivotValues, fieldPosition) {
      var _a, _b;
      var group = {};
      var fieldCount = 0;
      var levelPos = {};
      this.measurePos = this.engineModule.tupRowInfo[0].measurePosition;
      for (var rowPos = 0; rowPos < pivotValues.length; rowPos++) {
        var cell = pivotValues[rowPos][0];
        if (cell && cell.axis === "row" && cell.type !== "grand sum") {
          if (isNullOrUndefined(group[cell.hierarchy])) {
            if (cell.memberType === 3) {
              if (fieldCount === this.measurePos) {
                fieldPosition[this.measurePos] = cell.hierarchy;
                group[cell.hierarchy] = (_a = {}, _a[cell.levelUniqueName] = cell.levelUniqueName, _a);
              } else {
                fieldCount--;
              }
            } else {
              fieldPosition[fieldCount] = cell.hierarchy;
              group[cell.hierarchy] = (_b = {}, _b[cell.levelUniqueName] = cell.levelUniqueName, _b);
            }
            fieldCount++;
          } else {
            group[cell.hierarchy][cell.levelUniqueName] = cell.levelUniqueName;
          }
        }
      }
      var lastEnd = -1;
      for (var pos = 0; pos < fieldPosition.length; pos++) {
        if (this.measurePos !== pos) {
          levelPos[fieldPosition[pos]] = {
            start: lastEnd + 1,
            end: lastEnd + Object.keys(group[fieldPosition[pos]]).length
          };
          lastEnd = levelPos[fieldPosition[pos]].end;
        }
      }
      return levelPos;
    };
    PivotChart2.prototype.frameMultiLevelLabels = function() {
      var startKeys = Object.keys(this.headerColl);
      var parentHeaders = this.headerColl[-0.5];
      for (var _i = 0, startKeys_1 = startKeys; _i < startKeys_1.length; _i++) {
        var startKey = startKeys_1[_i];
        var sKey = Number(startKey);
        var headers = this.headerColl[sKey];
        var levelPos = 0;
        var isAvail = false;
        while (levelPos <= this.maxLevel) {
          if (!isAvail) {
            if (!headers[levelPos]) {
              headers[levelPos] = parentHeaders[levelPos];
            } else {
              isAvail = true;
            }
          } else if (!headers[levelPos]) {
            headers[levelPos] = {
              name: headers[levelPos - 1].name,
              // text: headers[levelPos - 1].text,
              text: "",
              hasChild: headers[levelPos - 1].hasChild,
              isDrilled: headers[levelPos - 1].isDrilled,
              levelName: headers[levelPos - 1].levelName,
              level: headers[levelPos - 1].level,
              fieldName: headers[levelPos - 1].fieldName,
              rowIndex: headers[levelPos - 1].rowIndex,
              colIndex: headers[levelPos - 1].colIndex,
              span: -1
            };
          }
          levelPos++;
        }
        parentHeaders = this.headerColl[sKey];
      }
      var gRows = {};
      for (var _a = 0, startKeys_2 = startKeys; _a < startKeys_2.length; _a++) {
        var startKey = startKeys_2[_a];
        var sKey = Number(startKey);
        var headers = this.headerColl[sKey];
        var lKeys = Object.keys(headers);
        for (var _b = 0, lKeys_1 = lKeys; _b < lKeys_1.length; _b++) {
          var levelKey = lKeys_1[_b];
          var lKey = Number(levelKey);
          if (gRows[lKey]) {
            var len = gRows[lKey].length;
            if (headers[lKey].levelName === parentHeaders[lKey].levelName) {
              gRows[lKey][len - 1].end = gRows[lKey][len - 1].end + 1;
            } else {
              gRows[lKey].push({
                start: sKey,
                end: sKey + 1,
                text: headers[lKey].text,
                type: headers[lKey].span === -1 ? "WithoutTopandBottomBorder" : "WithoutTopBorder",
                customAttributes: headers[lKey]
              });
            }
          } else {
            gRows[lKey] = [{
              start: sKey,
              end: sKey + 1,
              text: headers[lKey].text,
              type: headers[lKey].span === -1 ? "WithoutTopandBottomBorder" : "WithoutTopBorder",
              customAttributes: headers[lKey]
            }];
          }
        }
        parentHeaders = headers;
      }
      var levellength = Object.keys(gRows).length;
      var multiLevelLabels = [];
      for (var level = levellength - 1; level > -1; level--) {
        multiLevelLabels.push({
          categories: gRows[level],
          border: {
            width: 1
          },
          overflow: "Trim"
        });
      }
      return multiLevelLabels;
    };
    PivotChart2.prototype.getZoomFactor = function() {
      this.calculatedWidth = this.getCalulatedWidth();
      var seriesLength = this.chartSeries.length * 10 > 120 ? this.chartSeries.length * 10 : 120;
      var zoomFactor = this.chartSeries.length > 0 ? this.calculatedWidth / (Object.keys(this.chartSeries[0].dataSource).length * seriesLength) : 1;
      zoomFactor = zoomFactor < 1 && zoomFactor > 0 ? zoomFactor : 1;
      return zoomFactor;
    };
    PivotChart2.prototype.getCalulatedWidth = function() {
      if (!isNaN(Number(this.parent.width))) {
        this.calculatedWidth = Number(this.parent.width);
      } else if (this.parent.width.indexOf("%") > -1) {
        this.calculatedWidth = this.parent.element.clientWidth * (parseFloat(this.parent.width) / 100);
      } else if (this.parent.width.indexOf("px") > -1) {
        this.calculatedWidth = Number(this.parent.width.toString().split("px")[0]);
      } else {
        this.calculatedWidth = this.parent.element.clientWidth;
      }
      return this.calculatedWidth;
    };
    PivotChart2.prototype.configTooltipSettings = function() {
      var tooltip = this.persistSettings.tooltip ? this.persistSettings.tooltip : this.chartSettings.tooltip;
      tooltip.enable = tooltip.enable === void 0 ? true : tooltip.enable;
      if (tooltip.enable && tooltip.template) {
        this.templateFn = this.parent.templateParser(tooltip.template);
      }
      if (this.parent.tooltipTemplate) {
        tooltip.template = tooltip.template ? tooltip.template : this.parent.tooltipTemplate;
      }
      tooltip.header = tooltip.header ? tooltip.header : "";
      tooltip.enableMarker = tooltip.enableMarker === void 0 ? true : tooltip.enableMarker;
      return tooltip;
    };
    PivotChart2.prototype.configLegendSettings = function() {
      var legendSettings = {};
      if (this.chartSettings.legendSettings) {
        var keyPos = 0;
        var keys = Object.keys(this.chartSettings.legendSettings);
        while (keyPos < keys.length) {
          legendSettings[keys[keyPos]] = this.chartSettings.legendSettings[keys[keyPos]];
          keyPos++;
        }
      }
      legendSettings.visible = legendSettings.visible !== false;
      legendSettings.padding = legendSettings.padding ? legendSettings.padding : 25;
      legendSettings.shapePadding = legendSettings.shapePadding ? legendSettings.shapePadding : 10;
      return legendSettings;
    };
    PivotChart2.prototype.configXAxis = function() {
      var currentXAxis = {};
      currentXAxis = this.persistSettings.primaryXAxis ? this.frameObjectWithKeys(this.persistSettings.primaryXAxis) : currentXAxis;
      currentXAxis.valueType = "Category";
      currentXAxis.labelIntersectAction = currentXAxis.labelIntersectAction ? currentXAxis.labelIntersectAction : "Rotate45";
      currentXAxis.title = currentXAxis.title ? currentXAxis.title : this.dataSourceSettings.rows.map(function(args) {
        return args.caption || args.name;
      }).join(" / ");
      currentXAxis.zoomFactor = isNullOrUndefined(this.parent.chartSettings.primaryXAxis.zoomFactor) ? this.getZoomFactor() : this.parent.chartSettings.primaryXAxis.zoomFactor;
      if (!this.parent.chartSettings.zoomSettings.enableScrollbar) {
        currentXAxis.zoomFactor = 1;
      }
      if (this.chartSettings.showMultiLevelLabels && this.chartSettings.chartSeries.type !== "Pareto") {
        currentXAxis.multiLevelLabels = this.frameMultiLevelLabels();
        currentXAxis.border = {
          width: 1,
          type: "WithoutTopandBottomBorder"
        };
        currentXAxis.majorTickLines = {
          width: 0,
          height: -10
        };
      } else {
        currentXAxis.multiLevelLabels = [];
        currentXAxis.border = {
          width: 1,
          type: "Rectangle"
        };
        currentXAxis.majorTickLines = {
          width: 0,
          height: 5
        };
      }
      return currentXAxis;
    };
    PivotChart2.prototype.configZoomSettings = function() {
      var zoomSettings = this.chartSettings.zoomSettings;
      zoomSettings.enableSelectionZooming = zoomSettings.enableSelectionZooming === void 0 ? true : zoomSettings.enableSelectionZooming;
      zoomSettings.enableScrollbar = zoomSettings.enableScrollbar === void 0 ? true : zoomSettings.enableScrollbar;
      return zoomSettings;
    };
    PivotChart2.prototype.tooltipRender = function(args) {
      var measure = this.chartSettings.enableMultipleAxis && this.chartSettings.multipleAxisMode === "Combined" && this.accumulationType.indexOf(this.chartSettings.chartSeries.type) < 0 && this.chartSettings.chartSeries.type !== "Radar" && this.chartSettings.chartSeries.type !== "Polar" ? args.series.tooltipMappingName : args.series.yAxisName ? args.series.yAxisName.split("_CumulativeAxis")[0] : this.chartSettings.enableMultipleAxis && this.accumulationType.indexOf(this.chartSettings.chartSeries.type) < 0 && this.chartSettings.chartSeries.type !== "Pareto" ? args.series.name ? args.series.name.split(" | ")[1] : args.data.seriesName ? args.data.seriesName.split(" | ")[1] : this.currentMeasure : this.measuresNames[this.currentMeasure] ? this.measuresNames[this.currentMeasure] : this.currentMeasure;
      var dataSource = args.series.dataSource ? args.series.dataSource : this.parent.chart.series[args.data.seriesIndex].dataSource;
      var rowIndex = dataSource ? dataSource[args.data.pointIndex].rIndex : void 0;
      var colIndex = dataSource ? dataSource[args.data.pointIndex].cIndex : void 0;
      var measureField = this.engineModule.fieldList[this.measuresNames[measure] ? this.measuresNames[measure] : measure];
      var aggregateType = this.parent.dataType === "olap" ? "" : this.parent.localeObj.getConstant(measureField.aggregateType);
      var measureAggregatedName = (this.parent.dataType === "olap" ? "" : aggregateType + " " + this.parent.localeObj.getConstant("of") + " ") + measureField.caption;
      var formattedText = this.engineModule.pivotValues[rowIndex][colIndex].formattedText;
      var formatField = this.engineModule.formatFields[measureField.id];
      var valueFormat = this.engineModule.getFormattedValue(args.point.y, measureField.id, formattedText);
      var formattedValue = formatField && formatField.format && formatField.format.toLowerCase().match(/n|p|c/) !== null && this.chartSettings.useGroupingSeparator ? this.parent.dataType === "olap" ? valueFormat.toString() : valueFormat.formattedText : formattedText;
      var cell = this.parent.pivotValues[rowIndex][colIndex];
      var text = cell.columnHeaders;
      var columnText = "";
      if (isNullOrUndefined(text)) {
        columnText = void 0;
      } else if (this.parent.dataType === "olap") {
        columnText = this.chartSeriesInfo[text.toString().split(/~~|::/).join(" - ")].uniqueName;
      } else {
        var values = text.toString().split(this.parent.dataSourceSettings.valueSortSettings.headerDelimiter);
        text = PivotUtil.formatChartHeaders(values, this, true, cell);
        columnText = this.chartSeriesInfo[text.toString()].uniqueName;
      }
      var rowText = args.point.x;
      if (this.parent.tooltipTemplate && this.parent.getTooltipTemplate() !== void 0 || this.chartSettings.tooltip.template) {
        var rowFields = dataSource ? this.parent.getHeaderField(rowIndex, colIndex, "row") : "";
        var columnFields = dataSource ? this.parent.getHeaderField(rowIndex, colIndex, "Column") : "";
        var templateVariable = {
          rowHeaders: rowText,
          columnHeaders: columnText,
          aggregateType,
          value: formattedValue,
          valueField: measureField.caption,
          rowFields,
          columnFields
        };
        var template = void 0;
        if (this.parent.chartSettings && this.parent.chartSettings.tooltip && this.parent.chartSettings.tooltip.enable && this.parent.chartSettings.tooltip.template) {
          template = this.tooltipTemplateFn()(templateVariable, this, "tooltipTemplate", this.element.id + "1tooltipTemplate")[0].outerHTML;
        } else {
          template = this.parent.getTooltipTemplate()(templateVariable, this, "tooltipTemplate", this.element.id + "tooltipTemplate")[0].outerHTML;
        }
        args.template = template;
      } else {
        args.text = measureAggregatedName + ": " + formattedValue + (this.dataSourceSettings.columns.length === 0 ? "" : " <br/>" + this.parent.localeObj.getConstant("column") + ": " + columnText) + (this.dataSourceSettings.rows.length === 0 ? "" : " <br/>" + this.parent.localeObj.getConstant("row") + ": " + rowText) + (args.data && args.data.seriesName === "Pareto" ? " <br/>" + this.parent.localeObj.getConstant("pareto") + ": " + args.data.pointY + "%" : "");
        this.parent.trigger(chartTooltipRender, args);
      }
    };
    PivotChart2.prototype.tooltipTemplateFn = function() {
      return this.templateFn;
    };
    PivotChart2.prototype.loaded = function(args) {
      this.parent.isChartLoaded = true;
      var width = this.parent.grid ? this.parent.getGridWidthAsNumber().toString() : this.parent.getWidthAsNumber().toString();
      if (this.parent.chart && this.parent.showGroupingBar && this.parent.groupingBarModule && this.parent.showFieldList && this.parent.currentView === "Chart") {
        this.parent.groupingBarModule.alignIcon();
      }
      if (this.chartSettings.showMultiLevelLabels) {
        var multilabelAxisName = PivotUtil.inArray(this.chartSettings.chartSeries.type, ["Bar", "StackingBar", "StackingBar100"]) > -1 ? "_chartYAxisMultiLevelLabel0" : "_chartXAxisMultiLevelLabel0";
        if (!isNullOrUndefined(select("#" + this.parent.element.id + multilabelAxisName, this.parent.element))) {
          this.parent.element.querySelector("#" + this.parent.element.id + multilabelAxisName).setAttribute("cursor", "pointer");
        }
      }
      var height = this.getChartHeight();
      this.parent.chart.height = height;
      if (this.parent.chartSettings.enableScrollOnMultiAxis && this.parent.chartSettings.enableMultipleAxis) {
        if (["Pie", "Funnel", "Pyramid", "Doughnut", "Radar", "Polar", "Pareto"].indexOf(this.parent.chartSettings.chartSeries.type) >= 0) {
          this.parent.element.querySelector("." + PIVOTCHART).style.overflow = "visible";
        } else {
          this.parent.element.querySelector("." + PIVOTCHART).style.overflow = "auto";
          this.parent.element.querySelector("." + PIVOTCHART).style.overflowX = "hidden";
        }
        this.parent.element.querySelector("." + PIVOTCHART).style.width = width + "px";
        this.parent.element.querySelector("." + PIVOTCHART).style.height = height + "px";
      }
      this.updateView();
      if (this.parent.displayOption.primary === "Chart" || this.parent.displayOption.view === "Chart") {
        this.parent.notify(contentReady, {});
      }
      this.parent.trigger(chartLoaded, args);
      if (this.parent.dataSourceSettings.mode === "Server" && this.parent.isServerWaitingPopup || this.parent.dataSourceSettings.mode === "Local") {
        this.parent.hideWaitingPopup();
      }
    };
    PivotChart2.prototype.updateView = function() {
      if (this.parent.grid && this.parent.chart && this.parent.showToolbar) {
        var groupingTable = this.parent.element.querySelector(".e-pivot-grouping-bar");
        var groupingChartTable = this.parent.element.querySelector(".e-chart-grouping-bar");
        if (this.parent.currentView === "Table") {
          this.parent.grid.element.style.display = "";
          this.parent.chart.element.style.display = "none";
          if (this.parent.showGroupingBar && this.parent.groupingBarModule) {
            if (groupingTable) {
              groupingTable.style.display = "";
              if (groupingTable.querySelector("." + ALL_FIELDS_PANEL_CLASS) && this.parent.groupingBarModule.gridPanel != null && !this.parent.groupingBarModule.gridPanel.isDestroyed) {
                this.parent.groupingBarModule.gridPanel.refreshOverflow();
              }
            }
            if (groupingChartTable) {
              groupingChartTable.style.display = "none";
            }
          }
          if (this.parent.chartSettings.enableMultipleAxis && this.parent.chartSettings.enableScrollOnMultiAxis) {
            this.parent.element.querySelector(".e-pivotchart").style.display = "none";
          }
        } else {
          this.parent.grid.element.style.display = "none";
          this.parent.chart.element.style.display = "";
          if (this.parent.showGroupingBar && this.parent.groupingBarModule) {
            if (groupingTable) {
              groupingTable.style.display = "none";
            }
            if (groupingChartTable) {
              groupingChartTable.style.display = "";
              if (groupingChartTable.querySelector("." + ALL_FIELDS_PANEL_CLASS) && this.parent.groupingBarModule.chartPanel != null && !this.parent.groupingBarModule.chartPanel.isDestroyed) {
                this.parent.groupingBarModule.chartPanel.refreshOverflow();
              }
            }
          }
          if (this.parent.chartSettings.enableMultipleAxis && this.parent.chartSettings.enableScrollOnMultiAxis) {
            this.parent.element.querySelector(".e-pivotchart").style.display = "";
          }
        }
      }
    };
    PivotChart2.prototype.creatMenu = function() {
      if (this.accumulationMenu && !this.accumulationMenu.isDestroyed) {
        this.accumulationMenu.destroy();
      }
      var items = (this.parent.allowDrillThrough || this.parent.editSettings.allowEditing) && this.parent.drillThroughModule ? ["expand", "collapse", "drillThrough", "exit"] : ["expand", "collapse", "exit"];
      var option = [];
      for (var i = 0; i < items.length; i++) {
        option.push({
          id: this.parent.element.id + "_DrillMenuChart_" + items[i],
          text: this.parent.localeObj.getConstant(items[i]),
          items: []
        });
      }
      var getString = this.getMenuItems();
      var expand = [];
      var collapse = [];
      for (var i = 0; i < getString.length; i++) {
        if (getString[i].type === "expand") {
          expand.push({
            id: this.element.id + "drillExpand_" + getString[i].key,
            text: getString[i].value
          });
        } else {
          collapse.push({
            id: this.element.id + "drillCollapse_" + getString[i].key,
            text: getString[i].value
          });
        }
      }
      if (expand.length > 0) {
        option[0].items = expand;
      }
      if (collapse.length > 0) {
        option[1].items = collapse;
      }
      var menuOptions = {
        cssClass: this.parent.element.id + "_accumulationChart" + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
        items: option,
        enableRtl: this.parent.enableRtl,
        beforeOpen: this.drillMenuOpen.bind(this),
        select: this.drillMenuSelect.bind(this),
        locale: this.parent.locale
      };
      this.accumulationMenu = new ContextMenu(menuOptions);
      var contextMenu;
      if (select("#" + this.parent.element.id + "_accumulationChart", this.parent.element)) {
        contextMenu = select("#" + this.parent.element.id + "_accumulationChart", this.parent.element);
        contextMenu.innerHTML = "";
      } else {
        contextMenu = createElement("ul", {
          id: this.parent.element.id + "_accumulationChart"
        });
        this.parent.element.appendChild(contextMenu);
      }
      this.accumulationMenu.isStringTemplate = true;
      this.accumulationMenu.appendTo(contextMenu);
    };
    PivotChart2.prototype.drillMenuOpen = function(args) {
      if (args.items[0] && args.items[0].text === this.parent.localeObj.getConstant("expand") && args.items[0].items && args.items[0].items.length === 0) {
        this.accumulationMenu.enableItems([this.parent.localeObj.getConstant("expand")], false);
      }
      if (args.items[1] && args.items[1].text === this.parent.localeObj.getConstant("collapse") && args.items[1].items && args.items[1].items.length === 0) {
        this.accumulationMenu.enableItems([this.parent.localeObj.getConstant("collapse")], false);
      }
    };
    PivotChart2.prototype.getMenuItems = function() {
      var rowIndex = this.pivotIndex.rIndex;
      var menuItem = [];
      var pivotValues = this.engineModule.pivotValues;
      var levelCol = [];
      var pivotValue = pivotValues[rowIndex][this.pivotIndex.cIndex];
      var level = !pivotValues[rowIndex][0].isNamedSet && pivotValues[rowIndex][0].hasChild ? pivotValues[rowIndex][0].level : void 0;
      var levels = this.parent.dataType === "olap" ? pivotValue.rowHeaders.toString().split(/~~|::/) : pivotValue.rowHeaders.toString().split(this.engineModule.valueSortSettings.headerDelimiter);
      while (pivotValues[rowIndex][0]) {
        pivotValue = pivotValues[rowIndex][0];
        if (levels.length !== 0 && levels.indexOf(pivotValue.formattedText.toString()) === levels.length - 1) {
          if (pivotValue.hasChild && !pivotValue.isNamedSet && levelCol.indexOf(pivotValue.level) < 0 && (level ? level >= pivotValue.level : level === 0 ? pivotValue.level === 0 : true)) {
            if (!(pivotValue.isDrilled && pivotValue.hasChild)) {
              menuItem.push({
                key: rowIndex,
                type: "expand",
                value: pivotValue.formattedText
              });
            } else {
              menuItem.push({
                key: rowIndex,
                type: "collapse",
                value: pivotValue.formattedText
              });
            }
            levelCol.push(pivotValue.level);
            level = level ? level - 1 : pivotValue.level - 1;
          }
          var index = levels.indexOf(pivotValue.formattedText.toString());
          levels.splice(index, 1);
        }
        if (pivotValue.level === 0 && pivotValue.hasChild && !pivotValue.isNamedSet) {
          level = void 0;
          levelCol = [];
        }
        rowIndex--;
      }
      return menuItem;
    };
    PivotChart2.prototype.drillMenuSelect = function(args) {
      var pivotValues = this.parent.dataType === "olap" ? this.parent.olapEngineModule.pivotValues : this.parent.engineModule.pivotValues;
      var option = args.element.id.split("_DrillMenuChart_")[1];
      if (args.element.id.indexOf(this.element.id + "drill") === 0) {
        var type = args.element.id.split(this.element.id + "drill")[1].indexOf("Expand") >= 0 ? "drillExpand" : "drillCollapse";
        var rowIndex = Number(args.element.id.split(this.element.id + type + "_")[1]);
        var pivotValue = pivotValues[rowIndex][0];
        var name_2 = this.parent.dataType === "olap" ? pivotValue.formattedText : pivotValue.actualText ? pivotValue.actualText.toString() : pivotValue.formattedText.toString();
        var text = pivotValue.formattedText ? pivotValue.formattedText.toString() : name_2;
        var caption = pivotValue.hasChild && !pivotValue.isNamedSet ? (pivotValue.isDrilled ? " - " : " + ") + text : text;
        var tupInfo = this.parent.dataType === "olap" ? this.engineModule.tupRowInfo[pivotValue.ordinal] : void 0;
        var levelName = tupInfo ? tupInfo.uNameCollection : pivotValue.valueSort.levelName.toString();
        var customAttributes = {
          fieldName: pivotValue.valueSort.axis,
          level: pivotValue.level,
          hasChild: pivotValue.hasChild,
          levelName,
          name: name_2,
          text: caption,
          rowIndex,
          colIndex: 0,
          isDrilled: pivotValue.isDrilled,
          cell: pivotValue
        };
        if (this.parent.dataType === "olap") {
          this.parent.onDrill(void 0, customAttributes);
        } else {
          this.onDrill({
            customAttributes
          });
        }
      } else if (option === "drillThrough") {
        this.parent.drillThroughModule.executeDrillThrough(pivotValues[this.pivotIndex.rIndex][this.pivotIndex.cIndex], this.pivotIndex.rIndex, this.pivotIndex.rIndex);
      } else if (option === "exit") {
        this.accumulationMenu.close();
      }
    };
    PivotChart2.prototype.getChartHeight = function() {
      var height;
      var offSetHeight;
      if (isNullOrUndefined(this.parent.getHeightAsNumber())) {
        height = "auto";
      } else {
        var offSetVal = this.parent.showToolbar ? 6 : 5;
        height = (this.parent.getHeightAsNumber() - offSetVal).toString();
        offSetHeight = this.parent.getHeightAsNumber() - offSetVal;
      }
      if (!isNullOrUndefined(this.parent.getHeightAsNumber())) {
        var isNone = false;
        if (this.parent.element.querySelector(".e-chart-grouping-bar") !== null && this.parent.element.querySelector(".e-chart-grouping-bar").style.display.toLowerCase() === "none") {
          isNone = true;
          this.parent.element.querySelector(".e-chart-grouping-bar").style.display = "block";
        }
        if (this.parent.showToolbar && this.parent.showGroupingBar) {
          height = (offSetHeight - (this.parent.element.querySelector(".e-pivot-toolbar") ? this.parent.element.querySelector(".e-pivot-toolbar").clientHeight : 42) - (this.parent.element.querySelector(".e-chart-grouping-bar") ? this.parent.element.querySelector(".e-chart-grouping-bar").clientHeight : 62)).toString();
        } else if (this.parent.showToolbar) {
          height = (offSetHeight - (this.parent.element.querySelector(".e-pivot-toolbar") ? this.parent.element.querySelector(".e-pivot-toolbar").clientHeight : 42)).toString();
        } else if (this.parent.showGroupingBar) {
          height = (offSetHeight - (this.parent.element.querySelector(".e-chart-grouping-bar") ? this.parent.element.querySelector(".e-chart-grouping-bar").clientHeight : 62)).toString();
        } else if (this.parent.chart && parseInt(this.parent.chart.height, 10) < 200 || offSetHeight < 200) {
          height = "200";
        }
        if (isNone) {
          this.parent.element.querySelector(".e-chart-grouping-bar").style.display = "none";
        }
      } else {
        height = "auto";
      }
      return height;
    };
    PivotChart2.prototype.getChartAutoHeight = function() {
      var height = this.parent.element.offsetHeight < this.parent.minHeight ? this.parent.minHeight : this.parent.element.offsetHeight;
      if (this.parent.showToolbar && this.parent.showGroupingBar) {
        height = height - (this.parent.element.querySelector(".e-pivot-toolbar") ? this.parent.element.querySelector(".e-pivot-toolbar").clientHeight : 42) - (this.parent.element.querySelector(".e-chart-grouping-bar") ? this.parent.element.querySelector(".e-chart-grouping-bar").clientHeight : 62);
      } else if (this.parent.showToolbar) {
        height = height - (this.parent.element.querySelector(".e-pivot-toolbar") ? this.parent.element.querySelector(".e-pivot-toolbar").clientHeight : 42);
      } else if (this.parent.showGroupingBar) {
        height = height - (this.parent.element.querySelector(".e-chart-grouping-bar") ? this.parent.element.querySelector(".e-chart-grouping-bar").clientHeight : 62);
      }
      return height;
    };
    PivotChart2.prototype.axisLabelRender = function(args) {
      if (this.chartSettings.showMultiLevelLabels && this.chartSettings.chartSeries.type !== "Pareto") {
        if (args.axis.name === "primaryXAxis") {
          args.text = "";
        }
      }
      if (args.axis.name !== "primaryXAxis" && !(this.parent.chartSettings.chartSeries.type === "StackingColumn100" || this.parent.chartSettings.chartSeries.type === "StackingBar100" || this.parent.chartSettings.chartSeries.type === "StackingArea100" || this.parent.chartSettings.chartSeries.type === "StackingLine100")) {
        var key = this.chartSettings.enableMultipleAxis && this.chartSettings.multipleAxisMode === "Combined" ? this.currentMeasure : this.parent.dataType === "olap" ? this.measuresNames[args.axis.name] : args.axis.name;
        var formatField = this.engineModule.formatFields[key] || null;
        var valueFormat = this.engineModule.getFormattedValue(args.value, this.chartSettings.enableMultipleAxis && this.chartSettings.multipleAxisMode === "Combined" ? this.currentMeasure : args.axis.name, args.text);
        var formattedValue = formatField && formatField.format && this.chartSettings.useGroupingSeparator ? this.parent.dataType === "olap" ? valueFormat.toString() : valueFormat.formattedText : args.value.toString();
        args.text = formattedValue;
      }
      this.parent.trigger(chartAxisLabelRender, args);
    };
    PivotChart2.prototype.multiLevelLabelClick = function(args) {
      var eventArgs = {
        axis: args.axis,
        text: args.text,
        cell: !isNullOrUndefined(args.customAttributes) ? args.customAttributes.cell : void 0,
        cancel: false
      };
      this.parent.trigger(multiLevelLabelClick, eventArgs);
      if (!eventArgs.cancel && args.customAttributes && args.customAttributes.hasChild && !args.customAttributes.cell.isNamedSet) {
        if (this.parent.dataType === "olap") {
          this.parent.onDrill(void 0, args.customAttributes);
        } else {
          this.onDrill(args);
        }
      }
    };
    PivotChart2.prototype.onDrill = function(args) {
      var labelInfo = args.customAttributes;
      var delimiter = this.dataSourceSettings.drilledMembers[0] && this.dataSourceSettings.drilledMembers[0].delimiter ? this.dataSourceSettings.drilledMembers[0].delimiter : "**";
      var fieldName = labelInfo.fieldName;
      var currentColIndex = this.parent.gridSettings.layout === "Tabular" ? !this.parent.dataSourceSettings.showSubTotals || !this.parent.dataSourceSettings.showRowSubTotals && this.parent.dataSourceSettings.showColumnSubTotals ? labelInfo.level : this.parent.engineModule.rowMaxLevel : labelInfo.colIndex;
      var currentCell = this.engineModule.pivotValues[labelInfo.rowIndex][currentColIndex];
      var memberUqName = currentCell.valueSort.levelName.split(this.engineModule.valueSortSettings.headerDelimiter).join(delimiter);
      var fieldAvail = false;
      if (this.dataSourceSettings.drilledMembers.length === 0) {
        this.parent.setProperties({
          dataSourceSettings: {
            drilledMembers: [{
              name: fieldName,
              items: [memberUqName],
              delimiter
            }]
          }
        }, true);
      } else {
        for (var fCnt = 0; fCnt < this.dataSourceSettings.drilledMembers.length; fCnt++) {
          var field = this.dataSourceSettings.drilledMembers[fCnt];
          memberUqName = memberUqName.split(delimiter).join(field.delimiter ? field.delimiter : delimiter);
          delimiter = field.delimiter = field.delimiter ? field.delimiter : delimiter;
          if (field.name === fieldName) {
            fieldAvail = true;
            var memIndex = field.items.indexOf(memberUqName);
            if (memIndex > -1) {
              field.items.splice(memIndex, 1);
            } else {
              field.items.push(memberUqName);
            }
          } else {
            continue;
          }
        }
        if (!fieldAvail) {
          this.dataSourceSettings.drilledMembers.push({
            name: fieldName,
            items: [memberUqName],
            delimiter
          });
        }
      }
      this.parent.showWaitingPopup();
      var pivot = this;
      var drilledItem = {
        fieldName,
        memberName: memberUqName,
        delimiter,
        axis: "row",
        action: labelInfo.isDrilled ? "up" : "down",
        currentCell
      };
      var drillArgs = {
        drillInfo: drilledItem,
        pivotview: pivot.parent
      };
      pivot.parent.trigger(drill, drillArgs);
      var enginePopulatingEventArgs = {
        dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings)
      };
      this.parent.trigger(enginePopulating, enginePopulatingEventArgs);
      this.parent.setProperties({
        dataSourceSettings: enginePopulatingEventArgs.dataSourceSettings
      }, true);
      if (pivot.parent.enableVirtualization || pivot.parent.enablePaging) {
        if (pivot.parent.dataSourceSettings.mode === "Server") {
          pivot.parent.getEngine("onDrill", drilledItem, null, null, null, null, null);
        } else {
          pivot.engineModule.drilledMembers = pivot.dataSourceSettings.drilledMembers;
          pivot.engineModule.onDrill(drilledItem);
        }
      } else if (pivot.parent.dataSourceSettings.mode === "Server") {
        pivot.parent.getEngine("onDrill", drilledItem, null, null, null, null, null);
      } else {
        pivot.engineModule.generateGridData(pivot.dataSourceSettings, true);
      }
      pivot.parent.allowServerDataBinding = false;
      pivot.parent.setProperties({
        pivotValues: pivot.engineModule.pivotValues
      }, true);
      pivot.parent.allowServerDataBinding = true;
      var eventArgs = {
        dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings),
        pivotValues: this.parent.pivotValues
      };
      this.parent.trigger(enginePopulated, eventArgs);
      pivot.engineModule.pivotValues = eventArgs.pivotValues;
      pivot.parent.renderPivotGrid();
    };
    PivotChart2.prototype.isAttributeDrill = function(hierarchy, drillInfo) {
      var isDrill = false;
      for (var i = 0; i < this.dataSourceSettings.drilledMembers.length; i++) {
        if (this.dataSourceSettings.drilledMembers[i].name === hierarchy) {
          for (var j = 0; j < this.dataSourceSettings.drilledMembers[i].items.length; j++) {
            var drillItems = this.dataSourceSettings.drilledMembers[i].items[j].split(this.dataSourceSettings.drilledMembers[i].delimiter);
            var levelName = "";
            for (var k = 0; k < drillItems.length; k++) {
              if (drillInfo[k] && drillInfo[k].uName) {
                levelName = levelName + (levelName === "" ? "" : this.dataSourceSettings.drilledMembers[i].delimiter) + (drillInfo[k].uName.indexOf("[Measures]") > -1 ? "[Measures]" : drillInfo[k].uName);
              }
            }
            if (levelName === this.dataSourceSettings.drilledMembers[i].items[j]) {
              isDrill = true;
              break;
            }
          }
        }
      }
      return isDrill;
    };
    PivotChart2.prototype.load = function(args) {
      if (args.chart.zoomModule) {
        args.chart.zoomModule.isZoomed = true;
      }
      this.parent.trigger(chartLoad, args);
    };
    PivotChart2.prototype.beforePrint = function(args) {
      this.parent.trigger(beforePrint, args);
    };
    PivotChart2.prototype.animationComplete = function(args) {
      this.parent.trigger(animationComplete, args);
    };
    PivotChart2.prototype.legendRender = function(args) {
      this.parent.trigger(legendRender, args);
    };
    PivotChart2.prototype.textRender = function(args) {
      this.parent.trigger(textRender, args);
    };
    PivotChart2.prototype.pointRender = function(args) {
      this.parent.trigger(pointRender, args);
    };
    PivotChart2.prototype.seriesRender = function(args) {
      this.parent.trigger(seriesRender, args);
    };
    PivotChart2.prototype.chartMouseMove = function(args) {
      this.parent.trigger(chartMouseMove, args);
    };
    PivotChart2.prototype.chartMouseClick = function(args) {
      this.parent.trigger(chartMouseClick, args);
    };
    PivotChart2.prototype.pointMove = function(args) {
      this.parent.trigger(pointMove, args);
    };
    PivotChart2.prototype.chartMouseLeave = function(args) {
      this.parent.trigger(chartMouseLeave, args);
    };
    PivotChart2.prototype.chartMouseDown = function(args) {
      this.parent.trigger(chartMouseDown, args);
    };
    PivotChart2.prototype.chartMouseUp = function(args) {
      this.parent.trigger(chartMouseUp, args);
    };
    PivotChart2.prototype.dragComplete = function(args) {
      this.parent.trigger(dragComplete, args);
    };
    PivotChart2.prototype.zoomComplete = function(args) {
      this.parent.trigger(zoomComplete, args);
    };
    PivotChart2.prototype.scrollStart = function(args) {
      this.parent.trigger(scrollStart, args);
    };
    PivotChart2.prototype.scrollEnd = function(args) {
      this.parent.trigger(scrollEnd, args);
    };
    PivotChart2.prototype.scrollChanged = function(args) {
      this.parent.trigger(scrollChanged, args);
    };
    PivotChart2.prototype.multiLevelLabelRender = function(args) {
      this.parent.trigger(multiLevelLabelRender, args);
    };
    PivotChart2.prototype.resized = function(args) {
      if (this.accumulationType.indexOf(this.chartSettings.chartSeries.type) < 0) {
        args.chart.primaryXAxis.zoomFactor = isNullOrUndefined(this.parent.chartSettings.primaryXAxis.zoomFactor) ? this.getZoomFactor() : this.parent.chartSettings.primaryXAxis.zoomFactor;
        if (!this.parent.chartSettings.zoomSettings.enableScrollbar) {
          args.chart.primaryXAxis.zoomFactor = isNullOrUndefined(this.parent.chartSettings.primaryXAxis.zoomFactor) ? 1 : this.parent.chartSettings.primaryXAxis.zoomFactor;
        }
      }
      this.parent.trigger(chartResized, args);
    };
    PivotChart2.prototype.isMemberDrilled = function(previousRowCell, previousRowTextCollection) {
      var drillMem = false;
      for (var n = 0; n < this.parent.dataSourceSettings.drilledMembers.length; n++) {
        var drillItems = this.parent.dataSourceSettings.drilledMembers[n].items;
        for (var v = 0; v < drillItems.length; v++) {
          var drillItemsCollection = drillItems[v].split(this.parent.dataSourceSettings.drilledMembers[n].delimiter);
          if (drillItemsCollection[drillItemsCollection.length - 1] === previousRowCell.formattedText.split(" ")[0] && drillItemsCollection[0] === previousRowTextCollection[0]) {
            drillMem = true;
            break;
          }
        }
      }
      return drillMem;
    };
    PivotChart2.prototype.getResizedChartHeight = function() {
      var height = ["Pie", "Funnel", "Pyramid", "Doughnut", "Radar", "Polar", "Pareto"].indexOf(this.parent.chartSettings.chartSeries.type) < 0 && this.parent.chartSettings.enableScrollOnMultiAxis && this.parent.chartSettings.enableMultipleAxis && this.parent.dataSourceSettings.values.length > 0 ? Number(this.parent.chart.height) > this.parent.dataSourceSettings.values.length * 235 + 100 ? isNaN(Number(this.getChartHeight())) ? this.getChartHeight().toString() : (Number(this.getChartHeight()) - 5).toString() : !isNaN(Number(this.getChartHeight())) || this.parent.dataSourceSettings.values.length > 1 ? (this.parent.dataSourceSettings.values.length * 235 + 100).toString() : this.getChartHeight().toString() : this.getChartHeight().toString();
      return height;
    };
    PivotChart2.prototype.destroy = function() {
      if (this.parent && this.parent.isDestroyed) {
        return;
      }
      if (this.engineModule && !this.parent.destroyEngine) {
        this.engineModule.fieldList = {};
        this.engineModule = {};
      }
      if (this.chartSeries) {
        this.chartSeries = null;
      }
      if (this.columnGroupObject) {
        this.columnGroupObject = null;
      }
      if (this.chartSeriesInfo) {
        this.chartSeriesInfo = {};
        this.selectedLegend = null;
      }
      if (this.chartSettings) {
        this.chartSettings = null;
      }
      if (this.dataSourceSettings) {
        this.dataSourceSettings = null;
      }
      if (this.accumulationMenu && !this.accumulationMenu.isDestroyed) {
        this.accumulationMenu.destroy();
        this.accumulationMenu = null;
      }
      if (this.parent && this.parent.chart && !this.parent.chart.isDestroyed) {
        this.parent.chart.destroy();
        this.parent.chart = null;
      } else {
        return;
      }
    };
    return PivotChart2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/common/base/themes.js
var axisLabelFont = {
  size: "12px",
  fontWeight: "Normal",
  color: null,
  fontStyle: "Normal",
  fontFamily: "Segoe UI"
};
var axisTitleFont = {
  size: "14px",
  fontWeight: "Normal",
  color: null,
  fontStyle: "Normal",
  fontFamily: "Segoe UI"
};
var chartTitleFont = {
  size: "15px",
  fontWeight: "500",
  color: null,
  fontStyle: "Normal",
  fontFamily: "Segoe UI"
};
var chartSubTitleFont = {
  size: "11px",
  fontWeight: "500",
  color: null,
  fontStyle: "Normal",
  fontFamily: "Segoe UI"
};
var crosshairLabelFont = {
  size: "13px",
  fontWeight: "Normal",
  color: null,
  fontStyle: "Normal",
  fontFamily: "Segoe UI"
};
var tooltipLabelFont = {
  size: "13px",
  fontWeight: "Normal",
  color: null,
  fontStyle: "Normal",
  fontFamily: "Segoe UI"
};
var legendLabelFont = {
  size: "13px",
  fontWeight: "Normal",
  color: null,
  fontStyle: "Normal",
  fontFamily: "Segoe UI"
};
var stripLineLabelFont = {
  size: "12px",
  fontWeight: "Regular",
  color: "#353535",
  fontStyle: "Normal",
  fontFamily: "Segoe UI"
};
var stockEventFont = {
  size: "13px",
  fontWeight: "Normal",
  color: null,
  fontStyle: "Normal",
  fontFamily: "Segoe UI"
};

// node_modules/@syncfusion/ej2-pivotview/src/pivotview/model/chartsettings.js
var __extends3 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate4 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Animation = (
  /** @class */
  function(_super) {
    __extends3(Animation2, _super);
    function Animation2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property(true)], Animation2.prototype, "enable", void 0);
    __decorate4([Property(1e3)], Animation2.prototype, "duration", void 0);
    __decorate4([Property(0)], Animation2.prototype, "delay", void 0);
    return Animation2;
  }(ChildProperty)
);
var ChartSegment = (
  /** @class */
  function(_super) {
    __extends3(ChartSegment2, _super);
    function ChartSegment2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property(null)], ChartSegment2.prototype, "value", void 0);
    __decorate4([Property(null)], ChartSegment2.prototype, "color", void 0);
    __decorate4([Property("0")], ChartSegment2.prototype, "dashArray", void 0);
    return ChartSegment2;
  }(ChildProperty)
);
var Font = (
  /** @class */
  function(_super) {
    __extends3(Font2, _super);
    function Font2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property("Normal")], Font2.prototype, "fontStyle", void 0);
    __decorate4([Property("16px")], Font2.prototype, "size", void 0);
    __decorate4([Property("Normal")], Font2.prototype, "fontWeight", void 0);
    __decorate4([Property("")], Font2.prototype, "color", void 0);
    __decorate4([Property("Center")], Font2.prototype, "textAlignment", void 0);
    __decorate4([Property("Segoe UI")], Font2.prototype, "fontFamily", void 0);
    __decorate4([Property(1)], Font2.prototype, "opacity", void 0);
    __decorate4([Property("Trim")], Font2.prototype, "textOverflow", void 0);
    return Font2;
  }(ChildProperty)
);
var Margin = (
  /** @class */
  function(_super) {
    __extends3(Margin2, _super);
    function Margin2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property(10)], Margin2.prototype, "left", void 0);
    __decorate4([Property(10)], Margin2.prototype, "right", void 0);
    __decorate4([Property(10)], Margin2.prototype, "top", void 0);
    __decorate4([Property(10)], Margin2.prototype, "bottom", void 0);
    return Margin2;
  }(ChildProperty)
);
var Border = (
  /** @class */
  function(_super) {
    __extends3(Border2, _super);
    function Border2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property("")], Border2.prototype, "color", void 0);
    __decorate4([Property(1)], Border2.prototype, "width", void 0);
    return Border2;
  }(ChildProperty)
);
var Offset = (
  /** @class */
  function(_super) {
    __extends3(Offset2, _super);
    function Offset2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property(0)], Offset2.prototype, "x", void 0);
    __decorate4([Property(0)], Offset2.prototype, "y", void 0);
    return Offset2;
  }(ChildProperty)
);
var Indexes = (
  /** @class */
  function(_super) {
    __extends3(Indexes2, _super);
    function Indexes2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property(0)], Indexes2.prototype, "series", void 0);
    __decorate4([Property(0)], Indexes2.prototype, "point", void 0);
    return Indexes2;
  }(ChildProperty)
);
var ChartArea = (
  /** @class */
  function(_super) {
    __extends3(ChartArea2, _super);
    function ChartArea2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Complex({}, Border)], ChartArea2.prototype, "border", void 0);
    __decorate4([Property("transparent")], ChartArea2.prototype, "background", void 0);
    __decorate4([Property(1)], ChartArea2.prototype, "opacity", void 0);
    __decorate4([Property(null)], ChartArea2.prototype, "backgroundImage", void 0);
    return ChartArea2;
  }(ChildProperty)
);
var CrosshairSettings = (
  /** @class */
  function(_super) {
    __extends3(CrosshairSettings2, _super);
    function CrosshairSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property(false)], CrosshairSettings2.prototype, "enable", void 0);
    __decorate4([Property("")], CrosshairSettings2.prototype, "dashArray", void 0);
    __decorate4([Complex({
      color: null,
      width: 1
    }, Border)], CrosshairSettings2.prototype, "line", void 0);
    __decorate4([Property("Both")], CrosshairSettings2.prototype, "lineType", void 0);
    return CrosshairSettings2;
  }(ChildProperty)
);
var DataLabelSettings = (
  /** @class */
  function(_super) {
    __extends3(DataLabelSettings2, _super);
    function DataLabelSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property(false)], DataLabelSettings2.prototype, "visible", void 0);
    __decorate4([Property(null)], DataLabelSettings2.prototype, "name", void 0);
    __decorate4([Property("transparent")], DataLabelSettings2.prototype, "fill", void 0);
    __decorate4([Property(1)], DataLabelSettings2.prototype, "opacity", void 0);
    __decorate4([Property(0)], DataLabelSettings2.prototype, "angle", void 0);
    __decorate4([Property(false)], DataLabelSettings2.prototype, "enableRotation", void 0);
    __decorate4([Property("Auto")], DataLabelSettings2.prototype, "position", void 0);
    __decorate4([Property(5)], DataLabelSettings2.prototype, "rx", void 0);
    __decorate4([Property(5)], DataLabelSettings2.prototype, "ry", void 0);
    __decorate4([Property("Center")], DataLabelSettings2.prototype, "alignment", void 0);
    __decorate4([Complex({
      width: null,
      color: null
    }, Border)], DataLabelSettings2.prototype, "border", void 0);
    __decorate4([Complex({
      left: 5,
      right: 5,
      top: 5,
      bottom: 5
    }, Margin)], DataLabelSettings2.prototype, "margin", void 0);
    __decorate4([Complex({
      size: "11px",
      color: "",
      fontStyle: "Normal",
      fontWeight: "Normal",
      fontFamily: "Segoe UI"
    }, Font)], DataLabelSettings2.prototype, "font", void 0);
    __decorate4([Property(null)], DataLabelSettings2.prototype, "template", void 0);
    return DataLabelSettings2;
  }(ChildProperty)
);
var PivotChartConnectorStyle = (
  /** @class */
  function(_super) {
    __extends3(PivotChartConnectorStyle2, _super);
    function PivotChartConnectorStyle2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property("Line")], PivotChartConnectorStyle2.prototype, "type", void 0);
    __decorate4([Property(null)], PivotChartConnectorStyle2.prototype, "color", void 0);
    __decorate4([Property(1)], PivotChartConnectorStyle2.prototype, "width", void 0);
    __decorate4([Property(null)], PivotChartConnectorStyle2.prototype, "length", void 0);
    __decorate4([Property("")], PivotChartConnectorStyle2.prototype, "dashArray", void 0);
    return PivotChartConnectorStyle2;
  }(ChildProperty)
);
var PivotChartDataLabel = (
  /** @class */
  function(_super) {
    __extends3(PivotChartDataLabel2, _super);
    function PivotChartDataLabel2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property(true)], PivotChartDataLabel2.prototype, "visible", void 0);
    __decorate4([Complex({
      width: null,
      color: null
    }, Border)], PivotChartDataLabel2.prototype, "border", void 0);
    __decorate4([Complex({
      size: "11px",
      color: "",
      fontStyle: "Normal",
      fontWeight: "Normal",
      fontFamily: "Segoe UI"
    }, Font)], PivotChartDataLabel2.prototype, "font", void 0);
    __decorate4([Property("transparent")], PivotChartDataLabel2.prototype, "fill", void 0);
    __decorate4([Property(0)], PivotChartDataLabel2.prototype, "angle", void 0);
    __decorate4([Property(false)], PivotChartDataLabel2.prototype, "enableRotation", void 0);
    __decorate4([Property("Outside")], PivotChartDataLabel2.prototype, "position", void 0);
    __decorate4([Property(5)], PivotChartDataLabel2.prototype, "rx", void 0);
    __decorate4([Property(5)], PivotChartDataLabel2.prototype, "ry", void 0);
    __decorate4([Property(null)], PivotChartDataLabel2.prototype, "template", void 0);
    __decorate4([Complex({}, PivotChartConnectorStyle)], PivotChartDataLabel2.prototype, "connectorStyle", void 0);
    return PivotChartDataLabel2;
  }(ChildProperty)
);
var MarkerSettings = (
  /** @class */
  function(_super) {
    __extends3(MarkerSettings2, _super);
    function MarkerSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property(false)], MarkerSettings2.prototype, "visible", void 0);
    __decorate4([Property("Circle")], MarkerSettings2.prototype, "shape", void 0);
    __decorate4([Property("")], MarkerSettings2.prototype, "imageUrl", void 0);
    __decorate4([Property(5)], MarkerSettings2.prototype, "width", void 0);
    __decorate4([Property(5)], MarkerSettings2.prototype, "height", void 0);
    __decorate4([Complex({
      width: 2,
      color: null
    }, Border)], MarkerSettings2.prototype, "border", void 0);
    __decorate4([Complex({
      x: 0,
      y: 0
    }, Offset)], MarkerSettings2.prototype, "offset", void 0);
    __decorate4([Property(null)], MarkerSettings2.prototype, "fill", void 0);
    __decorate4([Property(1)], MarkerSettings2.prototype, "opacity", void 0);
    __decorate4([Complex({}, DataLabelSettings)], MarkerSettings2.prototype, "dataLabel", void 0);
    return MarkerSettings2;
  }(ChildProperty)
);
var ErrorBarCapSettings = (
  /** @class */
  function(_super) {
    __extends3(ErrorBarCapSettings2, _super);
    function ErrorBarCapSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property(1)], ErrorBarCapSettings2.prototype, "width", void 0);
    __decorate4([Property(10)], ErrorBarCapSettings2.prototype, "length", void 0);
    __decorate4([Property(null)], ErrorBarCapSettings2.prototype, "color", void 0);
    __decorate4([Property(1)], ErrorBarCapSettings2.prototype, "opacity", void 0);
    return ErrorBarCapSettings2;
  }(ChildProperty)
);
var ErrorBarSettings = (
  /** @class */
  function(_super) {
    __extends3(ErrorBarSettings2, _super);
    function ErrorBarSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property(false)], ErrorBarSettings2.prototype, "visible", void 0);
    __decorate4([Property("Fixed")], ErrorBarSettings2.prototype, "type", void 0);
    __decorate4([Property("Both")], ErrorBarSettings2.prototype, "direction", void 0);
    __decorate4([Property("Vertical")], ErrorBarSettings2.prototype, "mode", void 0);
    __decorate4([Property(1)], ErrorBarSettings2.prototype, "verticalError", void 0);
    __decorate4([Property(null)], ErrorBarSettings2.prototype, "color", void 0);
    __decorate4([Property(1)], ErrorBarSettings2.prototype, "width", void 0);
    __decorate4([Property(1)], ErrorBarSettings2.prototype, "horizontalError", void 0);
    __decorate4([Property(3)], ErrorBarSettings2.prototype, "verticalNegativeError", void 0);
    __decorate4([Property(3)], ErrorBarSettings2.prototype, "verticalPositiveError", void 0);
    __decorate4([Property(1)], ErrorBarSettings2.prototype, "horizontalNegativeError", void 0);
    __decorate4([Property(1)], ErrorBarSettings2.prototype, "horizontalPositiveError", void 0);
    __decorate4([Complex(null, ErrorBarCapSettings)], ErrorBarSettings2.prototype, "errorBarCap", void 0);
    return ErrorBarSettings2;
  }(ChildProperty)
);
var Trendline = (
  /** @class */
  function(_super) {
    __extends3(Trendline2, _super);
    function Trendline2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property("")], Trendline2.prototype, "name", void 0);
    __decorate4([Property("0")], Trendline2.prototype, "dashArray", void 0);
    __decorate4([Property(true)], Trendline2.prototype, "visible", void 0);
    __decorate4([Property(2)], Trendline2.prototype, "period", void 0);
    __decorate4([Property("Linear")], Trendline2.prototype, "type", void 0);
    __decorate4([Property(0)], Trendline2.prototype, "backwardForecast", void 0);
    __decorate4([Property(0)], Trendline2.prototype, "forwardForecast", void 0);
    __decorate4([Property(2)], Trendline2.prototype, "polynomialOrder", void 0);
    __decorate4([Complex({}, MarkerSettings)], Trendline2.prototype, "marker", void 0);
    __decorate4([Property(true)], Trendline2.prototype, "enableTooltip", void 0);
    __decorate4([Complex({}, Animation)], Trendline2.prototype, "animation", void 0);
    __decorate4([Property("")], Trendline2.prototype, "fill", void 0);
    __decorate4([Property(1)], Trendline2.prototype, "width", void 0);
    __decorate4([Property(null)], Trendline2.prototype, "intercept", void 0);
    __decorate4([Property("SeriesType")], Trendline2.prototype, "legendShape", void 0);
    return Trendline2;
  }(ChildProperty)
);
var EmptyPointSettings = (
  /** @class */
  function(_super) {
    __extends3(EmptyPointSettings2, _super);
    function EmptyPointSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property(null)], EmptyPointSettings2.prototype, "fill", void 0);
    __decorate4([Complex({
      color: "transparent",
      width: 0
    }, Border)], EmptyPointSettings2.prototype, "border", void 0);
    __decorate4([Property("Zero")], EmptyPointSettings2.prototype, "mode", void 0);
    return EmptyPointSettings2;
  }(ChildProperty)
);
var CornerRadius = (
  /** @class */
  function(_super) {
    __extends3(CornerRadius2, _super);
    function CornerRadius2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property(0)], CornerRadius2.prototype, "topLeft", void 0);
    __decorate4([Property(0)], CornerRadius2.prototype, "topRight", void 0);
    __decorate4([Property(0)], CornerRadius2.prototype, "bottomLeft", void 0);
    __decorate4([Property(0)], CornerRadius2.prototype, "bottomRight", void 0);
    return CornerRadius2;
  }(ChildProperty)
);
var CrosshairTooltip = (
  /** @class */
  function(_super) {
    __extends3(CrosshairTooltip2, _super);
    function CrosshairTooltip2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property(false)], CrosshairTooltip2.prototype, "enable", void 0);
    __decorate4([Property(null)], CrosshairTooltip2.prototype, "fill", void 0);
    __decorate4([Complex(crosshairLabelFont, Font)], CrosshairTooltip2.prototype, "textStyle", void 0);
    return CrosshairTooltip2;
  }(ChildProperty)
);
var StripLineSettings = (
  /** @class */
  function(_super) {
    __extends3(StripLineSettings2, _super);
    function StripLineSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property(true)], StripLineSettings2.prototype, "visible", void 0);
    __decorate4([Property(false)], StripLineSettings2.prototype, "startFromAxis", void 0);
    __decorate4([Property(null)], StripLineSettings2.prototype, "start", void 0);
    __decorate4([Property(null)], StripLineSettings2.prototype, "end", void 0);
    __decorate4([Property(null)], StripLineSettings2.prototype, "size", void 0);
    __decorate4([Property("#808080")], StripLineSettings2.prototype, "color", void 0);
    __decorate4([Property(null)], StripLineSettings2.prototype, "dashArray", void 0);
    __decorate4([Property("Auto")], StripLineSettings2.prototype, "sizeType", void 0);
    __decorate4([Property(false)], StripLineSettings2.prototype, "isRepeat", void 0);
    __decorate4([Property(null)], StripLineSettings2.prototype, "repeatEvery", void 0);
    __decorate4([Property(null)], StripLineSettings2.prototype, "repeatUntil", void 0);
    __decorate4([Property(false)], StripLineSettings2.prototype, "isSegmented", void 0);
    __decorate4([Property(null)], StripLineSettings2.prototype, "segmentStart", void 0);
    __decorate4([Property(null)], StripLineSettings2.prototype, "segmentEnd", void 0);
    __decorate4([Property(null)], StripLineSettings2.prototype, "segmentAxisName", void 0);
    __decorate4([Complex({
      color: "transparent",
      width: 1
    }, Border)], StripLineSettings2.prototype, "border", void 0);
    __decorate4([Property("")], StripLineSettings2.prototype, "text", void 0);
    __decorate4([Property(null)], StripLineSettings2.prototype, "rotation", void 0);
    __decorate4([Property("Middle")], StripLineSettings2.prototype, "horizontalAlignment", void 0);
    __decorate4([Property("Middle")], StripLineSettings2.prototype, "verticalAlignment", void 0);
    __decorate4([Complex(stripLineLabelFont, Font)], StripLineSettings2.prototype, "textStyle", void 0);
    __decorate4([Property("Behind")], StripLineSettings2.prototype, "zIndex", void 0);
    __decorate4([Property(1)], StripLineSettings2.prototype, "opacity", void 0);
    return StripLineSettings2;
  }(ChildProperty)
);
var LabelBorder = (
  /** @class */
  function(_super) {
    __extends3(LabelBorder2, _super);
    function LabelBorder2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property("")], LabelBorder2.prototype, "color", void 0);
    __decorate4([Property(1)], LabelBorder2.prototype, "width", void 0);
    __decorate4([Property("Rectangle")], LabelBorder2.prototype, "type", void 0);
    return LabelBorder2;
  }(ChildProperty)
);
var MajorGridLines = (
  /** @class */
  function(_super) {
    __extends3(MajorGridLines2, _super);
    function MajorGridLines2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property(1)], MajorGridLines2.prototype, "width", void 0);
    __decorate4([Property("")], MajorGridLines2.prototype, "dashArray", void 0);
    __decorate4([Property(null)], MajorGridLines2.prototype, "color", void 0);
    return MajorGridLines2;
  }(ChildProperty)
);
var MinorGridLines = (
  /** @class */
  function(_super) {
    __extends3(MinorGridLines2, _super);
    function MinorGridLines2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property(0.7)], MinorGridLines2.prototype, "width", void 0);
    __decorate4([Property("")], MinorGridLines2.prototype, "dashArray", void 0);
    __decorate4([Property(null)], MinorGridLines2.prototype, "color", void 0);
    return MinorGridLines2;
  }(ChildProperty)
);
var AxisLine = (
  /** @class */
  function(_super) {
    __extends3(AxisLine2, _super);
    function AxisLine2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property(1)], AxisLine2.prototype, "width", void 0);
    __decorate4([Property("")], AxisLine2.prototype, "dashArray", void 0);
    __decorate4([Property(null)], AxisLine2.prototype, "color", void 0);
    return AxisLine2;
  }(ChildProperty)
);
var MajorTickLines = (
  /** @class */
  function(_super) {
    __extends3(MajorTickLines2, _super);
    function MajorTickLines2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property(1)], MajorTickLines2.prototype, "width", void 0);
    __decorate4([Property(5)], MajorTickLines2.prototype, "height", void 0);
    __decorate4([Property(null)], MajorTickLines2.prototype, "color", void 0);
    return MajorTickLines2;
  }(ChildProperty)
);
var MinorTickLines = (
  /** @class */
  function(_super) {
    __extends3(MinorTickLines2, _super);
    function MinorTickLines2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property(0.7)], MinorTickLines2.prototype, "width", void 0);
    __decorate4([Property(5)], MinorTickLines2.prototype, "height", void 0);
    __decorate4([Property(null)], MinorTickLines2.prototype, "color", void 0);
    return MinorTickLines2;
  }(ChildProperty)
);
var ChartLocation = (
  /** @class */
  function(_super) {
    __extends3(ChartLocation2, _super);
    function ChartLocation2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property(0)], ChartLocation2.prototype, "x", void 0);
    __decorate4([Property(0)], ChartLocation2.prototype, "y", void 0);
    return ChartLocation2;
  }(ChildProperty)
);
var PivotChartSeriesBorder = (
  /** @class */
  function() {
    function PivotChartSeriesBorder2() {
    }
    __decorate4([Property("")], PivotChartSeriesBorder2.prototype, "color", void 0);
    __decorate4([Property(1)], PivotChartSeriesBorder2.prototype, "width", void 0);
    return PivotChartSeriesBorder2;
  }()
);
var PivotChartSeriesAnimation = (
  /** @class */
  function() {
    function PivotChartSeriesAnimation2() {
    }
    __decorate4([Property(true)], PivotChartSeriesAnimation2.prototype, "enable", void 0);
    __decorate4([Property(1e3)], PivotChartSeriesAnimation2.prototype, "duration", void 0);
    __decorate4([Property(0)], PivotChartSeriesAnimation2.prototype, "delay", void 0);
    return PivotChartSeriesAnimation2;
  }()
);
var PivotChartSeriesSegment = (
  /** @class */
  function() {
    function PivotChartSeriesSegment2() {
    }
    __decorate4([Property(null)], PivotChartSeriesSegment2.prototype, "value", void 0);
    __decorate4([Property(null)], PivotChartSeriesSegment2.prototype, "color", void 0);
    __decorate4([Property("0")], PivotChartSeriesSegment2.prototype, "dashArray", void 0);
    return PivotChartSeriesSegment2;
  }()
);
var PivotChartSeriesMarkerSettings = (
  /** @class */
  function() {
    function PivotChartSeriesMarkerSettings2() {
    }
    __decorate4([Property(false)], PivotChartSeriesMarkerSettings2.prototype, "visible", void 0);
    __decorate4([Property("Circle")], PivotChartSeriesMarkerSettings2.prototype, "shape", void 0);
    __decorate4([Property("")], PivotChartSeriesMarkerSettings2.prototype, "imageUrl", void 0);
    __decorate4([Property(5)], PivotChartSeriesMarkerSettings2.prototype, "height", void 0);
    __decorate4([Property(5)], PivotChartSeriesMarkerSettings2.prototype, "width", void 0);
    __decorate4([Complex({
      width: 2,
      color: null
    }, Border)], PivotChartSeriesMarkerSettings2.prototype, "border", void 0);
    __decorate4([Property(null)], PivotChartSeriesMarkerSettings2.prototype, "fill", void 0);
    __decorate4([Property(1)], PivotChartSeriesMarkerSettings2.prototype, "opacity", void 0);
    __decorate4([Complex({}, DataLabelSettings)], PivotChartSeriesMarkerSettings2.prototype, "dataLabel", void 0);
    return PivotChartSeriesMarkerSettings2;
  }()
);
var PivotChartSeriesErrorSettings = (
  /** @class */
  function() {
    function PivotChartSeriesErrorSettings2() {
    }
    __decorate4([Property(false)], PivotChartSeriesErrorSettings2.prototype, "visible", void 0);
    __decorate4([Property("Fixed")], PivotChartSeriesErrorSettings2.prototype, "type", void 0);
    __decorate4([Property("Both")], PivotChartSeriesErrorSettings2.prototype, "direction", void 0);
    __decorate4([Property("Vertical")], PivotChartSeriesErrorSettings2.prototype, "mode", void 0);
    __decorate4([Property(null)], PivotChartSeriesErrorSettings2.prototype, "color", void 0);
    __decorate4([Property(1)], PivotChartSeriesErrorSettings2.prototype, "verticalError", void 0);
    __decorate4([Property(1)], PivotChartSeriesErrorSettings2.prototype, "width", void 0);
    __decorate4([Property(1)], PivotChartSeriesErrorSettings2.prototype, "horizontalError", void 0);
    __decorate4([Property(3)], PivotChartSeriesErrorSettings2.prototype, "verticalPositiveError", void 0);
    __decorate4([Property(3)], PivotChartSeriesErrorSettings2.prototype, "verticalNegativeError", void 0);
    __decorate4([Property(1)], PivotChartSeriesErrorSettings2.prototype, "horizontalPositiveError", void 0);
    __decorate4([Property(1)], PivotChartSeriesErrorSettings2.prototype, "horizontalNegativeError", void 0);
    __decorate4([Complex(null, ErrorBarCapSettings)], PivotChartSeriesErrorSettings2.prototype, "errorBarCap", void 0);
    return PivotChartSeriesErrorSettings2;
  }()
);
var PivotChartSeriesTrendline = (
  /** @class */
  function() {
    function PivotChartSeriesTrendline2() {
    }
    __decorate4([Property("")], PivotChartSeriesTrendline2.prototype, "name", void 0);
    __decorate4([Property("Linear")], PivotChartSeriesTrendline2.prototype, "type", void 0);
    __decorate4([Property(2)], PivotChartSeriesTrendline2.prototype, "period", void 0);
    __decorate4([Property(2)], PivotChartSeriesTrendline2.prototype, "polynomialOrder", void 0);
    __decorate4([Property(0)], PivotChartSeriesTrendline2.prototype, "backwardForecast", void 0);
    __decorate4([Property(0)], PivotChartSeriesTrendline2.prototype, "forwardForecast", void 0);
    __decorate4([Complex({}, Animation)], PivotChartSeriesTrendline2.prototype, "animation", void 0);
    __decorate4([Complex({}, MarkerSettings)], PivotChartSeriesTrendline2.prototype, "marker", void 0);
    __decorate4([Property(true)], PivotChartSeriesTrendline2.prototype, "enableTooltip", void 0);
    __decorate4([Property(null)], PivotChartSeriesTrendline2.prototype, "intercept", void 0);
    __decorate4([Property("")], PivotChartSeriesTrendline2.prototype, "fill", void 0);
    __decorate4([Property(1)], PivotChartSeriesTrendline2.prototype, "width", void 0);
    __decorate4([Property("SeriesType")], PivotChartSeriesTrendline2.prototype, "legendShape", void 0);
    return PivotChartSeriesTrendline2;
  }()
);
var PivotChartSeriesEmptyPointSettings = (
  /** @class */
  function() {
    function PivotChartSeriesEmptyPointSettings2() {
    }
    __decorate4([Property(null)], PivotChartSeriesEmptyPointSettings2.prototype, "fill", void 0);
    __decorate4([Complex({
      color: "transparent",
      width: 0
    }, Border)], PivotChartSeriesEmptyPointSettings2.prototype, "border", void 0);
    __decorate4([Property("Zero")], PivotChartSeriesEmptyPointSettings2.prototype, "mode", void 0);
    return PivotChartSeriesEmptyPointSettings2;
  }()
);
var PivotChartSeriesCornerRadius = (
  /** @class */
  function() {
    function PivotChartSeriesCornerRadius2() {
    }
    __decorate4([Property(0)], PivotChartSeriesCornerRadius2.prototype, "topLeft", void 0);
    __decorate4([Property(0)], PivotChartSeriesCornerRadius2.prototype, "topRight", void 0);
    __decorate4([Property(0)], PivotChartSeriesCornerRadius2.prototype, "bottomLeft", void 0);
    __decorate4([Property(0)], PivotChartSeriesCornerRadius2.prototype, "bottomRight", void 0);
    return PivotChartSeriesCornerRadius2;
  }()
);
var PivotChartAxisFont = (
  /** @class */
  function() {
    function PivotChartAxisFont2() {
    }
    __decorate4([Property("Normal")], PivotChartAxisFont2.prototype, "fontStyle", void 0);
    __decorate4([Property("16px")], PivotChartAxisFont2.prototype, "size", void 0);
    __decorate4([Property("Normal")], PivotChartAxisFont2.prototype, "fontWeight", void 0);
    __decorate4([Property("")], PivotChartAxisFont2.prototype, "color", void 0);
    __decorate4([Property("Center")], PivotChartAxisFont2.prototype, "textAlignment", void 0);
    __decorate4([Property("Segoe UI")], PivotChartAxisFont2.prototype, "fontFamily", void 0);
    __decorate4([Property(1)], PivotChartAxisFont2.prototype, "opacity", void 0);
    __decorate4([Property("Trim")], PivotChartAxisFont2.prototype, "textOverflow", void 0);
    return PivotChartAxisFont2;
  }()
);
var PivotChartAxisCrosshairTooltip = (
  /** @class */
  function() {
    function PivotChartAxisCrosshairTooltip2() {
    }
    __decorate4([Property(false)], PivotChartAxisCrosshairTooltip2.prototype, "enable", void 0);
    __decorate4([Property(null)], PivotChartAxisCrosshairTooltip2.prototype, "fill", void 0);
    __decorate4([Complex(crosshairLabelFont, Font)], PivotChartAxisCrosshairTooltip2.prototype, "textStyle", void 0);
    return PivotChartAxisCrosshairTooltip2;
  }()
);
var PivotChartAxisMajorTickLines = (
  /** @class */
  function() {
    function PivotChartAxisMajorTickLines2() {
    }
    __decorate4([Property(1)], PivotChartAxisMajorTickLines2.prototype, "width", void 0);
    __decorate4([Property(5)], PivotChartAxisMajorTickLines2.prototype, "height", void 0);
    __decorate4([Property(null)], PivotChartAxisMajorTickLines2.prototype, "color", void 0);
    return PivotChartAxisMajorTickLines2;
  }()
);
var PivotChartAxisMajorGridLines = (
  /** @class */
  function() {
    function PivotChartAxisMajorGridLines2() {
    }
    __decorate4([Property(1)], PivotChartAxisMajorGridLines2.prototype, "width", void 0);
    __decorate4([Property("")], PivotChartAxisMajorGridLines2.prototype, "dashArray", void 0);
    __decorate4([Property(null)], PivotChartAxisMajorGridLines2.prototype, "color", void 0);
    return PivotChartAxisMajorGridLines2;
  }()
);
var PivotChartAxisMinorTickLines = (
  /** @class */
  function() {
    function PivotChartAxisMinorTickLines2() {
    }
    __decorate4([Property(0.7)], PivotChartAxisMinorTickLines2.prototype, "width", void 0);
    __decorate4([Property(5)], PivotChartAxisMinorTickLines2.prototype, "height", void 0);
    __decorate4([Property(null)], PivotChartAxisMinorTickLines2.prototype, "color", void 0);
    return PivotChartAxisMinorTickLines2;
  }()
);
var PivotChartAxisMinorGridLines = (
  /** @class */
  function() {
    function PivotChartAxisMinorGridLines2() {
    }
    __decorate4([Property(0.7)], PivotChartAxisMinorGridLines2.prototype, "width", void 0);
    __decorate4([Property("")], PivotChartAxisMinorGridLines2.prototype, "dashArray", void 0);
    __decorate4([Property(null)], PivotChartAxisMinorGridLines2.prototype, "color", void 0);
    return PivotChartAxisMinorGridLines2;
  }()
);
var PivotChartAxisAxisLine = (
  /** @class */
  function() {
    function PivotChartAxisAxisLine2() {
    }
    __decorate4([Property(1)], PivotChartAxisAxisLine2.prototype, "width", void 0);
    __decorate4([Property("")], PivotChartAxisAxisLine2.prototype, "dashArray", void 0);
    __decorate4([Property(null)], PivotChartAxisAxisLine2.prototype, "color", void 0);
    return PivotChartAxisAxisLine2;
  }()
);
var PivotChartAxisStripLineSettings = (
  /** @class */
  function() {
    function PivotChartAxisStripLineSettings2() {
    }
    __decorate4([Property(true)], PivotChartAxisStripLineSettings2.prototype, "visible", void 0);
    __decorate4([Property(false)], PivotChartAxisStripLineSettings2.prototype, "startFromAxis", void 0);
    __decorate4([Property(null)], PivotChartAxisStripLineSettings2.prototype, "start", void 0);
    __decorate4([Property(null)], PivotChartAxisStripLineSettings2.prototype, "end", void 0);
    __decorate4([Property(null)], PivotChartAxisStripLineSettings2.prototype, "size", void 0);
    __decorate4([Property("#808080")], PivotChartAxisStripLineSettings2.prototype, "color", void 0);
    __decorate4([Property(null)], PivotChartAxisStripLineSettings2.prototype, "dashArray", void 0);
    __decorate4([Property("Auto")], PivotChartAxisStripLineSettings2.prototype, "sizeType", void 0);
    __decorate4([Property(false)], PivotChartAxisStripLineSettings2.prototype, "isRepeat", void 0);
    __decorate4([Property(null)], PivotChartAxisStripLineSettings2.prototype, "repeatEvery", void 0);
    __decorate4([Property(null)], PivotChartAxisStripLineSettings2.prototype, "repeatUntil", void 0);
    __decorate4([Property(false)], PivotChartAxisStripLineSettings2.prototype, "isSegmented", void 0);
    __decorate4([Property(null)], PivotChartAxisStripLineSettings2.prototype, "segmentStart", void 0);
    __decorate4([Property(null)], PivotChartAxisStripLineSettings2.prototype, "segmentEnd", void 0);
    __decorate4([Property(null)], PivotChartAxisStripLineSettings2.prototype, "segmentAxisName", void 0);
    __decorate4([Complex({
      color: "transparent",
      width: 1
    }, Border)], PivotChartAxisStripLineSettings2.prototype, "border", void 0);
    __decorate4([Property("")], PivotChartAxisStripLineSettings2.prototype, "text", void 0);
    __decorate4([Property(null)], PivotChartAxisStripLineSettings2.prototype, "rotation", void 0);
    __decorate4([Property("Middle")], PivotChartAxisStripLineSettings2.prototype, "horizontalAlignment", void 0);
    __decorate4([Property("Middle")], PivotChartAxisStripLineSettings2.prototype, "verticalAlignment", void 0);
    __decorate4([Complex(stripLineLabelFont, Font)], PivotChartAxisStripLineSettings2.prototype, "textStyle", void 0);
    __decorate4([Property("Behind")], PivotChartAxisStripLineSettings2.prototype, "zIndex", void 0);
    __decorate4([Property(1)], PivotChartAxisStripLineSettings2.prototype, "opacity", void 0);
    return PivotChartAxisStripLineSettings2;
  }()
);
var PivotChartAxisLabelBorder = (
  /** @class */
  function() {
    function PivotChartAxisLabelBorder2() {
    }
    __decorate4([Property("")], PivotChartAxisLabelBorder2.prototype, "color", void 0);
    __decorate4([Property(1)], PivotChartAxisLabelBorder2.prototype, "width", void 0);
    __decorate4([Property("Rectangle")], PivotChartAxisLabelBorder2.prototype, "type", void 0);
    return PivotChartAxisLabelBorder2;
  }()
);
var PivotChartSettingsChartArea = (
  /** @class */
  function() {
    function PivotChartSettingsChartArea2() {
    }
    __decorate4([Complex({}, Border)], PivotChartSettingsChartArea2.prototype, "border", void 0);
    __decorate4([Property("transparent")], PivotChartSettingsChartArea2.prototype, "background", void 0);
    __decorate4([Property(1)], PivotChartSettingsChartArea2.prototype, "opacity", void 0);
    return PivotChartSettingsChartArea2;
  }()
);
var PivotChartSettingsCrosshairSettings = (
  /** @class */
  function() {
    function PivotChartSettingsCrosshairSettings2() {
    }
    __decorate4([Property(false)], PivotChartSettingsCrosshairSettings2.prototype, "enable", void 0);
    __decorate4([Property("")], PivotChartSettingsCrosshairSettings2.prototype, "dashArray", void 0);
    __decorate4([Complex({
      color: null,
      width: 1
    }, Border)], PivotChartSettingsCrosshairSettings2.prototype, "line", void 0);
    __decorate4([Property("Both")], PivotChartSettingsCrosshairSettings2.prototype, "lineType", void 0);
    return PivotChartSettingsCrosshairSettings2;
  }()
);
var PivotChartSettingsLegendSettings = (
  /** @class */
  function() {
    function PivotChartSettingsLegendSettings2() {
    }
    __decorate4([Property(true)], PivotChartSettingsLegendSettings2.prototype, "visible", void 0);
    __decorate4([Property(null)], PivotChartSettingsLegendSettings2.prototype, "height", void 0);
    __decorate4([Property(null)], PivotChartSettingsLegendSettings2.prototype, "width", void 0);
    __decorate4([Complex({
      x: 0,
      y: 0
    }, ChartLocation)], PivotChartSettingsLegendSettings2.prototype, "location", void 0);
    __decorate4([Property("Auto")], PivotChartSettingsLegendSettings2.prototype, "position", void 0);
    __decorate4([Property(8)], PivotChartSettingsLegendSettings2.prototype, "padding", void 0);
    __decorate4([Property("Center")], PivotChartSettingsLegendSettings2.prototype, "alignment", void 0);
    __decorate4([Complex(legendLabelFont, Font)], PivotChartSettingsLegendSettings2.prototype, "textStyle", void 0);
    __decorate4([Property(10)], PivotChartSettingsLegendSettings2.prototype, "shapeHeight", void 0);
    __decorate4([Property(10)], PivotChartSettingsLegendSettings2.prototype, "shapeWidth", void 0);
    __decorate4([Complex({}, Border)], PivotChartSettingsLegendSettings2.prototype, "border", void 0);
    __decorate4([Complex({
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    }, Margin)], PivotChartSettingsLegendSettings2.prototype, "margin", void 0);
    __decorate4([Property(5)], PivotChartSettingsLegendSettings2.prototype, "shapePadding", void 0);
    __decorate4([Property("transparent")], PivotChartSettingsLegendSettings2.prototype, "background", void 0);
    __decorate4([Property(1)], PivotChartSettingsLegendSettings2.prototype, "opacity", void 0);
    __decorate4([Property(true)], PivotChartSettingsLegendSettings2.prototype, "toggleVisibility", void 0);
    __decorate4([Property(null)], PivotChartSettingsLegendSettings2.prototype, "description", void 0);
    __decorate4([Property(3)], PivotChartSettingsLegendSettings2.prototype, "tabIndex", void 0);
    return PivotChartSettingsLegendSettings2;
  }()
);
var PivotChartSettingsIndexes = (
  /** @class */
  function() {
    function PivotChartSettingsIndexes2() {
    }
    __decorate4([Property(0)], PivotChartSettingsIndexes2.prototype, "series", void 0);
    __decorate4([Property(0)], PivotChartSettingsIndexes2.prototype, "point", void 0);
    return PivotChartSettingsIndexes2;
  }()
);
var PivotChartSettingsMargin = (
  /** @class */
  function() {
    function PivotChartSettingsMargin2() {
    }
    __decorate4([Property(10)], PivotChartSettingsMargin2.prototype, "left", void 0);
    __decorate4([Property(10)], PivotChartSettingsMargin2.prototype, "right", void 0);
    __decorate4([Property(10)], PivotChartSettingsMargin2.prototype, "top", void 0);
    __decorate4([Property(10)], PivotChartSettingsMargin2.prototype, "bottom", void 0);
    return PivotChartSettingsMargin2;
  }()
);
var PivotSeries = (
  /** @class */
  function(_super) {
    __extends3(PivotSeries2, _super);
    function PivotSeries2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property(null)], PivotSeries2.prototype, "fill", void 0);
    __decorate4([Property(null)], PivotSeries2.prototype, "endAngle", void 0);
    __decorate4([Property(false)], PivotSeries2.prototype, "explode", void 0);
    __decorate4([Property(false)], PivotSeries2.prototype, "explodeAll", void 0);
    __decorate4([Property(null)], PivotSeries2.prototype, "explodeIndex", void 0);
    __decorate4([Property(null)], PivotSeries2.prototype, "innerRadius", void 0);
    __decorate4([Property("30%")], PivotSeries2.prototype, "explodeOffset", void 0);
    __decorate4([Property(0)], PivotSeries2.prototype, "gapRatio", void 0);
    __decorate4([Property("Value")], PivotSeries2.prototype, "groupMode", void 0);
    __decorate4([Property(null)], PivotSeries2.prototype, "groupTo", void 0);
    __decorate4([Property("20%")], PivotSeries2.prototype, "neckHeight", void 0);
    __decorate4([Property("20%")], PivotSeries2.prototype, "neckWidth", void 0);
    __decorate4([Property("Linear")], PivotSeries2.prototype, "pyramidMode", void 0);
    __decorate4([Property([])], PivotSeries2.prototype, "palettes", void 0);
    __decorate4([Property(0)], PivotSeries2.prototype, "startAngle", void 0);
    __decorate4([Complex(null, Animation)], PivotSeries2.prototype, "animation", void 0);
    __decorate4([Complex(null, PivotChartDataLabel)], PivotSeries2.prototype, "dataLabel", void 0);
    __decorate4([Property("0")], PivotSeries2.prototype, "dashArray", void 0);
    __decorate4([Property(1)], PivotSeries2.prototype, "width", void 0);
    __decorate4([Property("X")], PivotSeries2.prototype, "segmentAxis", void 0);
    __decorate4([Property("Line")], PivotSeries2.prototype, "drawType", void 0);
    __decorate4([Property(true)], PivotSeries2.prototype, "isClosed", void 0);
    __decorate4([Collection([], ChartSegment)], PivotSeries2.prototype, "segments", void 0);
    __decorate4([Property("")], PivotSeries2.prototype, "stackingGroup", void 0);
    __decorate4([Complex({
      color: "transparent",
      width: 0
    }, Border)], PivotSeries2.prototype, "border", void 0);
    __decorate4([Property(true)], PivotSeries2.prototype, "visible", void 0);
    __decorate4([Property(1)], PivotSeries2.prototype, "opacity", void 0);
    __decorate4([Property("Line")], PivotSeries2.prototype, "type", void 0);
    __decorate4([Complex(null, MarkerSettings)], PivotSeries2.prototype, "marker", void 0);
    __decorate4([Complex(null, ErrorBarSettings)], PivotSeries2.prototype, "errorBar", void 0);
    __decorate4([Property(true)], PivotSeries2.prototype, "enableTooltip", void 0);
    __decorate4([Collection([], Trendline)], PivotSeries2.prototype, "trendlines", void 0);
    __decorate4([Property("")], PivotSeries2.prototype, "tooltipMappingName", void 0);
    __decorate4([Property("SeriesType")], PivotSeries2.prototype, "legendShape", void 0);
    __decorate4([Property(1)], PivotSeries2.prototype, "minRadius", void 0);
    __decorate4([Property(null)], PivotSeries2.prototype, "selectionStyle", void 0);
    __decorate4([Property("Natural")], PivotSeries2.prototype, "splineType", void 0);
    __decorate4([Property(3)], PivotSeries2.prototype, "maxRadius", void 0);
    __decorate4([Property(0.5)], PivotSeries2.prototype, "cardinalSplineTension", void 0);
    __decorate4([Property(null)], PivotSeries2.prototype, "columnWidth", void 0);
    __decorate4([Complex(null, EmptyPointSettings)], PivotSeries2.prototype, "emptyPointSettings", void 0);
    __decorate4([Complex(null, CornerRadius)], PivotSeries2.prototype, "cornerRadius", void 0);
    __decorate4([Property(0)], PivotSeries2.prototype, "columnSpacing", void 0);
    return PivotSeries2;
  }(ChildProperty)
);
var PivotAxis = (
  /** @class */
  function(_super) {
    __extends3(PivotAxis2, _super);
    function PivotAxis2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property("Rotate45")], PivotAxis2.prototype, "labelIntersectAction", void 0);
    __decorate4([Complex(axisLabelFont, Font)], PivotAxis2.prototype, "labelStyle", void 0);
    __decorate4([Property("")], PivotAxis2.prototype, "title", void 0);
    __decorate4([Property(null)], PivotAxis2.prototype, "zoomFactor", void 0);
    __decorate4([Complex({}, CrosshairTooltip)], PivotAxis2.prototype, "crosshairTooltip", void 0);
    __decorate4([Property("")], PivotAxis2.prototype, "labelFormat", void 0);
    __decorate4([Complex(axisTitleFont, Font)], PivotAxis2.prototype, "titleStyle", void 0);
    __decorate4([Property(false)], PivotAxis2.prototype, "isIndexed", void 0);
    __decorate4([Property(0)], PivotAxis2.prototype, "plotOffset", void 0);
    __decorate4([Property("Shift")], PivotAxis2.prototype, "edgeLabelPlacement", void 0);
    __decorate4([Property("BetweenTicks")], PivotAxis2.prototype, "labelPlacement", void 0);
    __decorate4([Property("Outside")], PivotAxis2.prototype, "tickPosition", void 0);
    __decorate4([Property(false)], PivotAxis2.prototype, "opposedPosition", void 0);
    __decorate4([Property(true)], PivotAxis2.prototype, "visible", void 0);
    __decorate4([Property("Outside")], PivotAxis2.prototype, "labelPosition", void 0);
    __decorate4([Property(0)], PivotAxis2.prototype, "labelRotation", void 0);
    __decorate4([Property(0)], PivotAxis2.prototype, "minorTicksPerInterval", void 0);
    __decorate4([Property(null)], PivotAxis2.prototype, "maximum", void 0);
    __decorate4([Property(null)], PivotAxis2.prototype, "minimum", void 0);
    __decorate4([Property(34)], PivotAxis2.prototype, "maximumLabelWidth", void 0);
    __decorate4([Property(null)], PivotAxis2.prototype, "interval", void 0);
    __decorate4([Complex({}, MajorTickLines)], PivotAxis2.prototype, "majorTickLines", void 0);
    __decorate4([Property(false)], PivotAxis2.prototype, "enableTrim", void 0);
    __decorate4([Complex({}, MajorGridLines)], PivotAxis2.prototype, "majorGridLines", void 0);
    __decorate4([Complex({}, MinorTickLines)], PivotAxis2.prototype, "minorTickLines", void 0);
    __decorate4([Complex({}, AxisLine)], PivotAxis2.prototype, "lineStyle", void 0);
    __decorate4([Complex({}, MinorGridLines)], PivotAxis2.prototype, "minorGridLines", void 0);
    __decorate4([Property(false)], PivotAxis2.prototype, "isInversed", void 0);
    __decorate4([Property(null)], PivotAxis2.prototype, "description", void 0);
    __decorate4([Property(0)], PivotAxis2.prototype, "startAngle", void 0);
    __decorate4([Property(100)], PivotAxis2.prototype, "coefficient", void 0);
    __decorate4([Collection([], StripLineSettings)], PivotAxis2.prototype, "stripLines", void 0);
    __decorate4([Property(2)], PivotAxis2.prototype, "tabIndex", void 0);
    __decorate4([Complex({
      color: null,
      width: 0,
      type: "Rectangle"
    }, LabelBorder)], PivotAxis2.prototype, "border", void 0);
    return PivotAxis2;
  }(ChildProperty)
);
var PivotTooltipSettings = (
  /** @class */
  function(_super) {
    __extends3(PivotTooltipSettings2, _super);
    function PivotTooltipSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property(false)], PivotTooltipSettings2.prototype, "enableMarker", void 0);
    __decorate4([Property(true)], PivotTooltipSettings2.prototype, "enable", void 0);
    __decorate4([Property(null)], PivotTooltipSettings2.prototype, "fill", void 0);
    __decorate4([Property(false)], PivotTooltipSettings2.prototype, "shared", void 0);
    __decorate4([Property(0.75)], PivotTooltipSettings2.prototype, "opacity", void 0);
    __decorate4([Property(null)], PivotTooltipSettings2.prototype, "header", void 0);
    __decorate4([Property(null)], PivotTooltipSettings2.prototype, "format", void 0);
    __decorate4([Complex(tooltipLabelFont, Font)], PivotTooltipSettings2.prototype, "textStyle", void 0);
    __decorate4([Property(null)], PivotTooltipSettings2.prototype, "template", void 0);
    __decorate4([Complex({
      color: "#cccccc",
      width: 0.5
    }, Border)], PivotTooltipSettings2.prototype, "border", void 0);
    __decorate4([Property(true)], PivotTooltipSettings2.prototype, "enableAnimation", void 0);
    return PivotTooltipSettings2;
  }(ChildProperty)
);
var PivotPieChartCenter = (
  /** @class */
  function(_super) {
    __extends3(PivotPieChartCenter2, _super);
    function PivotPieChartCenter2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property("50%")], PivotPieChartCenter2.prototype, "x", void 0);
    __decorate4([Property("50%")], PivotPieChartCenter2.prototype, "y", void 0);
    return PivotPieChartCenter2;
  }(ChildProperty)
);
var PivotZoomSettings = (
  /** @class */
  function(_super) {
    __extends3(PivotZoomSettings2, _super);
    function PivotZoomSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property(false)], PivotZoomSettings2.prototype, "enablePinchZooming", void 0);
    __decorate4([Property(true)], PivotZoomSettings2.prototype, "enableSelectionZooming", void 0);
    __decorate4([Property(false)], PivotZoomSettings2.prototype, "enableDeferredZooming", void 0);
    __decorate4([Property(false)], PivotZoomSettings2.prototype, "enableMouseWheelZooming", void 0);
    __decorate4([Property("XY")], PivotZoomSettings2.prototype, "mode", void 0);
    __decorate4([Property(["Zoom", "ZoomIn", "ZoomOut", "Pan", "Reset"])], PivotZoomSettings2.prototype, "toolbarItems", void 0);
    __decorate4([Property(true)], PivotZoomSettings2.prototype, "enableScrollbar", void 0);
    __decorate4([Property(false)], PivotZoomSettings2.prototype, "enablePan", void 0);
    return PivotZoomSettings2;
  }(ChildProperty)
);
var ChartSettings = (
  /** @class */
  function(_super) {
    __extends3(ChartSettings2, _super);
    function ChartSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Complex({}, PivotSeries)], ChartSettings2.prototype, "chartSeries", void 0);
    __decorate4([Complex({}, PivotAxis)], ChartSettings2.prototype, "primaryXAxis", void 0);
    __decorate4([Complex({}, PivotAxis)], ChartSettings2.prototype, "primaryYAxis", void 0);
    __decorate4([Property("")], ChartSettings2.prototype, "value", void 0);
    __decorate4([Property("")], ChartSettings2.prototype, "columnHeader", void 0);
    __decorate4([Property("-")], ChartSettings2.prototype, "columnDelimiter", void 0);
    __decorate4([Property(false)], ChartSettings2.prototype, "enableMultipleAxis", void 0);
    __decorate4([Property("Stacked")], ChartSettings2.prototype, "multipleAxisMode", void 0);
    __decorate4([Property(false)], ChartSettings2.prototype, "enableScrollOnMultiAxis", void 0);
    __decorate4([Property(false)], ChartSettings2.prototype, "showMemberSeries", void 0);
    __decorate4([Property(false)], ChartSettings2.prototype, "showPointColorByMembers", void 0);
    __decorate4([Complex({
      border: {
        color: null,
        width: 0.5
      },
      background: "transparent"
    }, titleSettings)], ChartSettings2.prototype, "titleStyle", void 0);
    __decorate4([Property("")], ChartSettings2.prototype, "title", void 0);
    __decorate4([Complex({
      border: {
        color: null,
        width: 0.5
      },
      background: "transparent"
    }, titleSettings)], ChartSettings2.prototype, "subTitleStyle", void 0);
    __decorate4([Property("")], ChartSettings2.prototype, "subTitle", void 0);
    __decorate4([Complex({
      color: "#DDDDDD",
      width: 0
    }, Border)], ChartSettings2.prototype, "border", void 0);
    __decorate4([Complex({}, Margin)], ChartSettings2.prototype, "margin", void 0);
    __decorate4([Complex({
      border: {
        color: null,
        width: 0.5
      },
      background: "transparent"
    }, ChartArea)], ChartSettings2.prototype, "chartArea", void 0);
    __decorate4([Property(null)], ChartSettings2.prototype, "background", void 0);
    __decorate4([Property("Material")], ChartSettings2.prototype, "theme", void 0);
    __decorate4([Property([])], ChartSettings2.prototype, "palettes", void 0);
    __decorate4([Complex({}, CrosshairSettings)], ChartSettings2.prototype, "crosshair", void 0);
    __decorate4([Complex({}, PivotTooltipSettings)], ChartSettings2.prototype, "tooltip", void 0);
    __decorate4([Complex(null, PivotPieChartCenter)], ChartSettings2.prototype, "pieCenter", void 0);
    __decorate4([Complex({}, PivotZoomSettings)], ChartSettings2.prototype, "zoomSettings", void 0);
    __decorate4([Property()], ChartSettings2.prototype, "legendSettings", void 0);
    __decorate4([Property("None")], ChartSettings2.prototype, "selectionMode", void 0);
    __decorate4([Property("None")], ChartSettings2.prototype, "accumulationSelectionMode", void 0);
    __decorate4([Property(true)], ChartSettings2.prototype, "enableSmartLabels", void 0);
    __decorate4([Property(true)], ChartSettings2.prototype, "enableBorderOnMouseMove", void 0);
    __decorate4([Property("None")], ChartSettings2.prototype, "highlightMode", void 0);
    __decorate4([Property("None")], ChartSettings2.prototype, "highlightPattern", void 0);
    __decorate4([Property(true)], ChartSettings2.prototype, "enableExport", void 0);
    __decorate4([Property(false)], ChartSettings2.prototype, "isMultiSelect", void 0);
    __decorate4([Collection([], Indexes)], ChartSettings2.prototype, "selectedDataIndexes", void 0);
    __decorate4([Property(true)], ChartSettings2.prototype, "enableAnimation", void 0);
    __decorate4([Property(false)], ChartSettings2.prototype, "enableCanvas", void 0);
    __decorate4([Property(true)], ChartSettings2.prototype, "useGroupingSeparator", void 0);
    __decorate4([Property(false)], ChartSettings2.prototype, "isTransposed", void 0);
    __decorate4([Property(1)], ChartSettings2.prototype, "tabIndex", void 0);
    __decorate4([Property(null)], ChartSettings2.prototype, "description", void 0);
    __decorate4([Event()], ChartSettings2.prototype, "resized", void 0);
    __decorate4([Property(true)], ChartSettings2.prototype, "enableSideBySidePlacement", void 0);
    __decorate4([Event()], ChartSettings2.prototype, "loaded", void 0);
    __decorate4([Event()], ChartSettings2.prototype, "beforePrint", void 0);
    __decorate4([Event()], ChartSettings2.prototype, "animationComplete", void 0);
    __decorate4([Event()], ChartSettings2.prototype, "load", void 0);
    __decorate4([Event()], ChartSettings2.prototype, "textRender", void 0);
    __decorate4([Event()], ChartSettings2.prototype, "legendRender", void 0);
    __decorate4([Event()], ChartSettings2.prototype, "seriesRender", void 0);
    __decorate4([Event()], ChartSettings2.prototype, "multiLevelLabelRender", void 0);
    __decorate4([Event()], ChartSettings2.prototype, "pointRender", void 0);
    __decorate4([Event()], ChartSettings2.prototype, "tooltipRender", void 0);
    __decorate4([Event()], ChartSettings2.prototype, "legendClick", void 0);
    __decorate4([Event()], ChartSettings2.prototype, "axisLabelRender", void 0);
    __decorate4([Event()], ChartSettings2.prototype, "multiLevelLabelClick", void 0);
    __decorate4([Event()], ChartSettings2.prototype, "chartMouseClick", void 0);
    __decorate4([Event()], ChartSettings2.prototype, "chartMouseMove", void 0);
    __decorate4([Event()], ChartSettings2.prototype, "pointMove", void 0);
    __decorate4([Event()], ChartSettings2.prototype, "pointClick", void 0);
    __decorate4([Event()], ChartSettings2.prototype, "chartMouseDown", void 0);
    __decorate4([Event()], ChartSettings2.prototype, "chartMouseLeave", void 0);
    __decorate4([Event()], ChartSettings2.prototype, "dragComplete", void 0);
    __decorate4([Event()], ChartSettings2.prototype, "chartMouseUp", void 0);
    __decorate4([Event()], ChartSettings2.prototype, "scrollStart", void 0);
    __decorate4([Event()], ChartSettings2.prototype, "zoomComplete", void 0);
    __decorate4([Event()], ChartSettings2.prototype, "scrollChanged", void 0);
    __decorate4([Event()], ChartSettings2.prototype, "scrollEnd", void 0);
    __decorate4([Property(true)], ChartSettings2.prototype, "showMultiLevelLabels", void 0);
    return ChartSettings2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-pivotview/src/base/olap/mdx-query.js
var MDXQuery = (
  /** @class */
  function() {
    function MDXQuery2() {
    }
    MDXQuery2.getCellSets = function(dataSourceSettings, olapEngine, refPaging, drillInfo, isQueryUpdate) {
      this.engine = olapEngine;
      this.isMondrian = olapEngine.isMondrian;
      this.isMeasureAvail = olapEngine.isMeasureAvail;
      this.isPaging = olapEngine.isPaging;
      this.pageSettings = olapEngine.pageSettings;
      this.rows = olapEngine.rows;
      this.columns = olapEngine.columns;
      this.values = olapEngine.values;
      this.filters = olapEngine.filters;
      this.allowLabelFilter = olapEngine.allowLabelFilter;
      this.allowValueFilter = olapEngine.allowValueFilter;
      this.drilledMembers = olapEngine.updateDrilledItems(dataSourceSettings.drilledMembers);
      this.calculatedFieldSettings = olapEngine.calculatedFieldSettings;
      this.valueAxis = dataSourceSettings.valueAxis === "row" ? "rows" : "columns";
      if (drillInfo) {
        drillInfo.axis = drillInfo.axis === "row" ? "rows" : "columns";
      }
      this.filterMembers = extend({}, olapEngine.filterMembers, null, true);
      this.fieldDataObj = olapEngine.fieldListObj;
      this.fieldList = olapEngine.fieldList;
      this.cellSetInfo = "\nDIMENSION PROPERTIES PARENT_UNIQUE_NAME, HIERARCHY_UNIQUE_NAME, CHILDREN_CARDINALITY, MEMBER_TYPE, MEMBER_VALUE";
      var measureQuery = this.getMeasuresQuery(this.values);
      var rowQuery = this.getDimensionsQuery(this.rows, measureQuery, "rows", drillInfo).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/'/g, "&apos;").replace(/"/g, "&quot;");
      var columnQuery = this.getDimensionsQuery(this.columns, measureQuery, "columns", drillInfo).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/'/g, "&apos;").replace(/"/g, "&quot;");
      if (this.isPaging && refPaging && this.pageSettings !== void 0) {
        var pagingQuery = this.getPagingQuery(rowQuery, columnQuery);
        rowQuery = pagingQuery.rowQuery;
        columnQuery = pagingQuery.columnQuery;
      } else if (this.isPaging && !refPaging && this.pageSettings !== void 0) {
        var pagingQuery = this.getPagingCountQuery(rowQuery, columnQuery);
        rowQuery = pagingQuery.rowQuery;
        columnQuery = pagingQuery.columnQuery;
      }
      rowQuery = rowQuery.length > 0 ? rowQuery + (this.isPaging && !refPaging ? "" : this.cellSetInfo + " ON ROWS") : "";
      columnQuery = columnQuery.length > 0 ? columnQuery + (this.isPaging && !refPaging ? "" : this.cellSetInfo + " ON COLUMNS") : "";
      var slicerQuery = this.getSlicersQuery(this.filters, "filters").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/'/g, "&apos;").replace(/"/g, "&quot;");
      var filterQuery = this.getfilterQuery(this.filterMembers, dataSourceSettings.cube).replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/'/g, "&apos;").replace(/"/g, "&quot;");
      var caclQuery = this.getCalculatedFieldQuery(this.calculatedFieldSettings).replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/'/g, "&apos;").replace(/"/g, "&quot;");
      var query = this.frameMDXQuery(rowQuery, columnQuery, slicerQuery, filterQuery, caclQuery, refPaging);
      var args = {
        catalog: dataSourceSettings.catalog,
        cube: dataSourceSettings.cube,
        url: dataSourceSettings.url,
        request: query,
        LCID: dataSourceSettings.localeIdentifier.toString(),
        roles: dataSourceSettings.roles
      };
      olapEngine.mdxQuery = query.replace(/&amp;/g, "&").replace(/&gt;/g, ">").replace(/&lt;/g, "<").replace(/%280/g, '"').replace(/&apos;/g, "'");
      if (drillInfo) {
        drillInfo.axis = drillInfo.axis === "rows" ? "row" : "column";
      }
      if (!isQueryUpdate) {
        this.getTableCellData(args, this.isPaging && !refPaging ? this.engine.generatePagingData.bind(this.engine) : this.engine.generateEngine.bind(this.engine), drillInfo ? {
          action: drillInfo.action,
          drillInfo
        } : {
          dataSourceSettings,
          action: "loadTableElements"
        });
      }
    };
    MDXQuery2.getTableCellData = function(args, successMethod, customArgs) {
      var connectionString = this.engine.getConnectionInfo(args.url, args.LCID);
      var soapMessage = '<Envelope xmlns="http://schemas.xmlsoap.org/soap/envelope/"> <Header></Header> <Body> <Execute xmlns="urn:schemas-microsoft-com:xml-analysis"> <Command> <Statement>' + args.request + "</Statement> </Command> <Properties> <PropertyList> <Catalog>" + args.catalog + "</Catalog> <LocaleIdentifier>" + connectionString.LCID + "</LocaleIdentifier>" + (args.roles ? "<Roles>" + args.roles + "</Roles>" : "") + "</PropertyList> </Properties></Execute> </Body> </Envelope>";
      this.engine.doAjaxPost("POST", connectionString.url, soapMessage, successMethod, customArgs);
      if (this.engine.errorInfo) {
        throw this.engine.errorInfo;
      }
    };
    MDXQuery2.frameMDXQuery = function(rowQuery, columnQuery, slicerQuery, filterQuery, caclQuery, refPaging) {
      var query = this.isPaging && !refPaging ? caclQuery !== "" ? "" : "\nWITH" : "\nSelect ";
      if (columnQuery.length > 0) {
        query = query + columnQuery;
      }
      if (rowQuery.length > 0) {
        query = query + (columnQuery.length > 0 ? this.isPaging && !refPaging ? "" : ", " : "") + rowQuery;
      }
      query = caclQuery + query + (this.isPaging && !refPaging ? "\nMEMBER [Measures].[3d268ce0-664d-4092-b9cb-fece97175006] AS Count([e16a30d0-2174-4874-8dae-a5085a75a3e2]) MEMBER [Measures].[8d7fe8c1-f09f-410e-b9ba-eaab75a1fc3e] AS Count ([d1876d2b-e50e-4547-85fe-5b8ed9d629de])\nSELECT { [Measures].[3d268ce0-664d-4092-b9cb-fece97175006] , [Measures].[8d7fe8c1-f09f-410e-b9ba-eaab75a1fc3e] } ON AXIS(0)" : "") + " " + filterQuery + slicerQuery + "\nCELL PROPERTIES VALUE, FORMAT_STRING, FORMATTED_VALUE\n";
      return query;
    };
    MDXQuery2.getPagingQuery = function(rowQuery, columnQuery) {
      rowQuery = rowQuery.replace("NON EMPTY ( ", "").slice(0, -1);
      columnQuery = columnQuery.replace("NON EMPTY ( ", "").slice(0, -1);
      var rowQueryCpy = rowQuery;
      var calRowPage = (this.pageSettings.currentRowPage - 1) * this.pageSettings.rowPageSize;
      var calColPage = (this.pageSettings.currentColumnPage - 1) * this.pageSettings.columnPageSize;
      var calRowSize = this.engine.isExporting && this.engine.exportSpeciedPages && this.engine.exportSpeciedPages.rowSize ? this.engine.exportSpeciedPages.rowSize : this.pageSettings.rowPageSize * 3;
      var calColumnSize = this.engine.isExporting && this.engine.exportSpeciedPages && this.engine.exportSpeciedPages.columnSize ? this.engine.exportSpeciedPages.columnSize : this.pageSettings.columnPageSize * 3;
      calRowPage = this.engine.rowCount < calRowPage + calRowSize ? this.engine.rowCount > calRowSize ? this.engine.rowCount - calRowSize : 0 : calRowPage;
      this.engine.pageRowStartPos = calRowPage;
      calColPage = this.engine.columnCount < calColPage + calColumnSize ? this.engine.columnCount > calColumnSize ? this.engine.columnCount - calColumnSize : 0 : calColPage;
      this.engine.pageColStartPos = calColPage;
      var axisQuery = {
        rowQuery: rowQuery !== "" ? "\nSUBSET ({ " + (this.isMondrian ? "" : "NONEMPTY") + " (" + rowQuery + (!this.isMondrian && columnQuery !== "" ? "," + columnQuery : "") + ")}," + calRowPage + "," + calRowSize + ")" : "",
        columnQuery: columnQuery !== "" ? "\nSUBSET ({ " + (this.isMondrian ? "" : "NONEMPTY") + " (" + columnQuery + (!this.isMondrian && rowQueryCpy !== "" ? "," + rowQueryCpy : "") + ")}," + calColPage + "," + calColumnSize + ")" : ""
      };
      return axisQuery;
    };
    MDXQuery2.getPagingCountQuery = function(rowQuery, columnQuery) {
      rowQuery = rowQuery.replace("NON EMPTY ( ", "").slice(0, -1);
      columnQuery = columnQuery.replace("NON EMPTY ( ", "").slice(0, -1);
      var rowQueryCpy = rowQuery;
      var axisQuery = {
        rowQuery: rowQuery !== "" ? "SET [d1876d2b-e50e-4547-85fe-5b8ed9d629de] as " + (this.isMondrian ? "" : "NONEMPTY") + " (" + rowQuery + (!this.isMondrian && columnQuery !== "" ? "," + columnQuery : "") + ")\n" : "",
        columnQuery: columnQuery !== "" ? "\nSET [e16a30d0-2174-4874-8dae-a5085a75a3e2] as " + (this.isMondrian ? "" : "NONEMPTY") + " (" + columnQuery + (!this.isMondrian && rowQueryCpy !== "" ? "," + rowQueryCpy : "") + ")\n" : ""
      };
      return axisQuery;
    };
    MDXQuery2.getDimensionsQuery = function(dimensions, measureQuery, axis, drillInfo) {
      var query = "";
      if (dimensions.length > 0) {
        query = "\nNON EMPTY ( " + (this.drilledMembers.length > 0 ? "HIERARCHIZE ({" : "");
        var i = 0;
        while (i < dimensions.length) {
          var hierarchy = "";
          if (i === 0) {
            if (dimensions[i].name.toLowerCase() === "[measures]") {
              if (measureQuery !== "") {
                query = query + measureQuery;
              }
            } else {
              hierarchy = "({" + this.getDimensionQuery(dimensions[i], axis) + "})";
              query = query + hierarchy;
            }
          } else {
            if (dimensions[i].name.toLowerCase() === "[measures]") {
              if (measureQuery !== "") {
                query = query + " * " + measureQuery;
              }
            } else {
              hierarchy = "({" + this.getDimensionQuery(dimensions[i], axis) + "})";
              query = query + " * " + hierarchy;
            }
          }
          i++;
        }
        var drillQueryObj = this.getDrillQuery(dimensions, measureQuery, axis, drillInfo);
        query = drillInfo && drillInfo.axis === axis ? "\nNON EMPTY ( " + (this.drilledMembers.length > 0 ? "HIERARCHIZE ({" : "") + drillQueryObj.query : query + (drillQueryObj.query !== "" ? "," : "") + drillQueryObj.query;
        var drillQuery = this.getAttributeDrillQuery(dimensions, measureQuery, axis, drillInfo);
        query = query + (this.isPaging ? (drillQuery !== "" ? "-" : "") + drillQuery : "") + (this.drilledMembers.length > 0 ? "})" : "") + (!this.isPaging ? (drillQuery !== "" ? "-" : "") + drillQuery : "") + ")";
      }
      return query;
    };
    MDXQuery2.getAttributeDrillQuery = function(dimensions, measureQuery, axis, drillInfo) {
      var query = "";
      var drilledMembers = [];
      if (drillInfo && drillInfo.axis === axis && drillInfo.action.toLowerCase() === "down") {
        drilledMembers = [{
          name: drillInfo.fieldName,
          items: [drillInfo.memberName],
          delimiter: "~~"
        }];
      } else {
        drilledMembers = this.drilledMembers;
      }
      var measurePos = axis === this.valueAxis ? this.getMeasurePos(axis) : 0;
      for (var _i = 0, drilledMembers_1 = drilledMembers; _i < drilledMembers_1.length; _i++) {
        var field = drilledMembers_1[_i];
        var isHierarchy = this.engine.fieldList[field.name] ? this.engine.fieldList[field.name].isHierarchy : false;
        if (isHierarchy) {
          for (var _a = 0, _b = field.items; _a < _b.length; _a++) {
            var item = _b[_a];
            var drillQuery = [];
            var drillInfo_1 = item.split(field.delimiter ? field.delimiter : "~~");
            var result = this.getDrillLevel(dimensions, drillInfo_1);
            var fieldPosition = this.getDimensionPos(axis, field.name);
            var index = dimensions.length - (measurePos > fieldPosition ? 1 : 0);
            var isExist = this.isPaging ? this.isAttributeMemberExist(field.name, item.split(field.delimiter ? field.delimiter : "~~"), field.delimiter, drillInfo_1, axis) : false;
            while (result.level > 0 && result.isDrill && fieldPosition + 1 !== measurePos && !isExist) {
              var levelQuery = [];
              var i = 0;
              while (i < dimensions.length) {
                if (dimensions[i].name.toLowerCase() === "[measures]") {
                  if (measureQuery !== "") {
                    levelQuery.push(drillInfo_1[i] ? "({{" + drillInfo_1[i] + "}})" : "(" + measureQuery + ")");
                  }
                } else if (drillInfo_1[i] && (drillInfo_1[i].indexOf(dimensions[i].name) !== -1 || dimensions[i].isNamedSet && this.fieldList[dimensions[i].name] && drillInfo_1[i].indexOf(this.fieldList[dimensions[i].name].pid.split("Sets_")[1]) !== -1)) {
                  levelQuery.push(this.getHierarchyQuery(drillInfo_1[i], false, false, false, result.level, true));
                } else if (!drillInfo_1[i] && dimensions[i]) {
                  levelQuery.push(this.getHierarchyQuery(dimensions[i].name, this.isPaging && result.level === 2 || !this.isPaging && index > i ? true : false, dimensions[i].isNamedSet, dimensions[i].isCalculatedField, result.level, false));
                } else {
                  levelQuery = [];
                  break;
                }
                i++;
              }
              if (levelQuery.length > 0) {
                drillQuery.push("(" + levelQuery.join("*") + ")");
              }
              result.level--;
              index--;
            }
            if (drillQuery.length > 0) {
              query = query + (query !== "" ? "-" : "") + drillQuery.join(this.isPaging ? "+" : "-");
            }
          }
        }
      }
      return query;
    };
    MDXQuery2.getDimensionPos = function(axis, field) {
      var position = 0;
      var dimensions = axis === "rows" ? this.rows : this.columns;
      for (var i = 0; i < dimensions.length; i++) {
        if (dimensions[i].name === field) {
          position = i;
          break;
        }
      }
      return position;
    };
    MDXQuery2.getMeasurePos = function(axis) {
      var position = 0;
      var dimensions = axis === "rows" ? this.rows : this.columns;
      for (var i = 0; i < dimensions.length; i++) {
        if (dimensions[i].name.indexOf("[Measures]") === 0) {
          position = i;
          break;
        }
      }
      return position;
    };
    MDXQuery2.getDrillLevel = function(dimensions, drillInfo) {
      var level = dimensions.length;
      var isDrill = false;
      var i = 0;
      while (i < dimensions.length) {
        if (drillInfo[i] && drillInfo[i].indexOf(dimensions[i].name) !== -1) {
          level -= 1;
          if (dimensions[i + 1] && !(dimensions[i + 1].isNamedSet || dimensions[i + 1].name.indexOf("[Measures]") === 0 || this.fieldList[dimensions[i + 1].name] && !this.fieldList[dimensions[i + 1].name].hasAllMember)) {
            isDrill = true;
          }
        } else if (dimensions[i].isNamedSet || dimensions[i].name.indexOf("[Measures]") === 0 || this.fieldList[dimensions[i].name] && !this.fieldList[dimensions[i].name].hasAllMember) {
          level -= 1;
        }
        i++;
      }
      return {
        level: this.isPaging ? 2 : level,
        isDrill
      };
    };
    MDXQuery2.getHierarchyQuery = function(name, isChildren, isNamedSet, isCalculatedField, level, isDrill) {
      name = isCalculatedField ? this.fieldList[name].tag : name;
      return this.fieldList[name] && !this.fieldList[name].hasAllMember && !isNamedSet && !isCalculatedField ? "((" + name + ").levels(0).AllMembers)" : isNamedSet || isCalculatedField ? "({" + name + "})" : this.isPaging ? "({" + name + (isChildren ? ".CHILDREN})" : !isDrill && level === 1 ? ".[All]})" : "})") : "({DrilldownLevel({" + name + (isChildren ? ".CHILDREN" : "") + "},,,INCLUDE_CALC_MEMBERS)})";
    };
    MDXQuery2.isAttributeMemberExist = function(hierarchy, item, delimiter, drillInfo, axis) {
      item.splice(drillInfo.length - 1, 1);
      var isAvailable = false;
      if (item.join(delimiter) !== "" && !(this.isPaging && item.length === 1 && item.join(delimiter) === "[Measures]") && this.engine.fieldList[hierarchy] && this.engine.fieldList[hierarchy].hasAllMember) {
        var hierarchyPosition = this.getDimensionPos(axis, hierarchy);
        for (var i = 0; i < this.drilledMembers.length; i++) {
          if (hierarchy !== this.drilledMembers[i].name) {
            var isHierarchy = this.engine.fieldList[this.drilledMembers[i].name] ? this.engine.fieldList[this.drilledMembers[i].name].isHierarchy : false;
            if (isHierarchy) {
              var fieldPosition = this.getDimensionPos(axis, this.drilledMembers[i].name);
              for (var j = 0; j < this.drilledMembers[i].items.length; j++) {
                var result = this.getDrillLevel(axis === "rows" ? this.rows : this.columns, this.drilledMembers[i].items[j].split(this.drilledMembers[i].delimiter ? this.drilledMembers[i].delimiter : "~~"));
                if ((this.isPaging ? fieldPosition < hierarchyPosition && result.isDrill : true) && (this.drilledMembers[i].items[j].indexOf(item.join(delimiter)) === 0 || item.join(delimiter).indexOf(this.drilledMembers[i].items[j]) === 0)) {
                  isAvailable = true;
                  break;
                }
              }
            }
          }
        }
      }
      return isAvailable;
    };
    MDXQuery2.getDrillQuery = function(dimensions, measureQuery, axis, drillInfo) {
      var query = "";
      var rawDrillQuery = [];
      var drilledMembers = [];
      var isOnDemandDrill = false;
      var onDemandDrillQuery = "";
      if (drillInfo && drillInfo.axis === axis && drillInfo.action.toLowerCase() === "down") {
        isOnDemandDrill = true;
        drilledMembers = [{
          name: drillInfo.fieldName,
          items: [drillInfo.memberName],
          delimiter: "~~"
        }];
      } else {
        drilledMembers = this.drilledMembers;
      }
      for (var _i = 0, drilledMembers_2 = drilledMembers; _i < drilledMembers_2.length; _i++) {
        var field = drilledMembers_2[_i];
        var isHierarchy = this.engine.fieldList[field.name] ? this.engine.fieldList[field.name].isHierarchy : false;
        if (!isHierarchy) {
          for (var _a = 0, _b = field.items; _a < _b.length; _a++) {
            var item = _b[_a];
            var drillQuery = [];
            var rawQuery = [];
            var i = 0;
            var drillInfo_2 = item.split(field.delimiter ? field.delimiter : "~~");
            var isExist = this.isAttributeMemberExist(field.name, item.split(field.delimiter ? field.delimiter : "~~"), field.delimiter ? field.delimiter : "~~", drillInfo_2, axis);
            while (i < dimensions.length && !isExist) {
              if (drillInfo_2[i] && drillInfo_2[i].indexOf(dimensions[i].name) !== -1) {
                if (drillInfo_2[drillInfo_2.length - 1].indexOf(dimensions[i].name) !== -1) {
                  if (isOnDemandDrill) {
                    onDemandDrillQuery = onDemandDrillQuery + (onDemandDrillQuery !== "" ? " * " : "") + "({" + drillInfo_2[i] + ".CHILDREN})";
                  } else {
                    drillQuery.push("(" + drillInfo_2[i] + ".CHILDREN)");
                    rawQuery.push("(" + drillInfo_2[i] + ")");
                  }
                } else {
                  if (drillInfo_2[i].toLowerCase() === "[measures]" && measureQuery !== "") {
                    if (isOnDemandDrill) {
                      onDemandDrillQuery = onDemandDrillQuery + (onDemandDrillQuery !== "" ? " * " : "") + "(" + measureQuery + ")";
                    } else {
                      drillQuery.push("(" + measureQuery + ")");
                      rawQuery.push("(" + measureQuery + ")");
                    }
                  } else if (drillInfo_2[i].toLowerCase().indexOf("[measures]") !== -1) {
                    if (isOnDemandDrill) {
                      onDemandDrillQuery = onDemandDrillQuery + (onDemandDrillQuery !== "" ? " * " : "") + "({" + drillInfo_2[i] + "})";
                    } else {
                      drillQuery.push("({" + drillInfo_2[i] + "})");
                      rawQuery.push("({" + drillInfo_2[i] + "})");
                    }
                  } else {
                    if (isOnDemandDrill) {
                      onDemandDrillQuery = onDemandDrillQuery + (onDemandDrillQuery !== "" ? " * " : "") + "({" + drillInfo_2[i] + "})";
                    } else {
                      drillQuery.push("(" + drillInfo_2[i] + ")");
                      rawQuery.push("(" + drillInfo_2[i] + ")");
                    }
                  }
                }
              } else if (!drillInfo_2[i] && dimensions[i]) {
                if (dimensions[i].name.toLowerCase() === "[measures]" && measureQuery !== "") {
                  if (isOnDemandDrill) {
                    onDemandDrillQuery = onDemandDrillQuery + (onDemandDrillQuery !== "" ? " * " : "") + "(" + measureQuery + ")";
                  } else {
                    drillQuery.push("(" + measureQuery + ")");
                    rawQuery.push("(" + measureQuery + ")");
                  }
                } else {
                  var dimensionQuery = this.getDimensionQuery(dimensions[i], axis);
                  if (isOnDemandDrill) {
                    onDemandDrillQuery = onDemandDrillQuery + (onDemandDrillQuery !== "" ? " * " : "") + "({" + dimensionQuery + "})";
                  } else {
                    drillQuery.push("(" + dimensionQuery + ")");
                    rawQuery.push("(" + dimensionQuery + ")");
                  }
                }
              } else {
                drillQuery = [];
                break;
              }
              i++;
            }
            if (drillQuery.length > 0 && drillQuery.length < drillInfo_2.length) {
              drillQuery = [];
              rawQuery = [];
            }
            query = query + (query !== "" && drillQuery.length > 0 ? "," : "") + (drillQuery.length > 0 ? "(" + drillQuery.toString() + ")" : "");
            if (rawQuery.length > 0) {
              rawDrillQuery.push("(" + rawQuery.toString() + ")");
            }
          }
        }
      }
      var queryCollection = {
        query: isOnDemandDrill ? onDemandDrillQuery : query,
        collection: isOnDemandDrill ? [onDemandDrillQuery] : rawDrillQuery
      };
      return queryCollection;
    };
    MDXQuery2.getSlicersQuery = function(slicers, axis) {
      var _this = this;
      var query = "";
      var dataFields = extend([], this.rows, null, true);
      dataFields = dataFields.concat(this.columns);
      if (slicers.length > 0) {
        var i_1 = 0;
        while (i_1 < slicers.length) {
          var isCol = dataFields.filter(function(field) {
            var colUqName = _this.getDimensionUniqueName(field.name);
            var slicerUqName = _this.getDimensionUniqueName(slicers[i_1].name);
            var isMatch = false;
            isMatch = colUqName === slicerUqName && !(_this.isMondrian && slicerUqName === "" && colUqName === "");
            return isMatch;
          }).length > 0;
          if (!isCol) {
            if (slicers[i_1].name !== void 0 && !this.filterMembers[slicers[i_1].name]) {
              query = query + (query !== "" ? " * " : "") + "{" + this.getDimensionQuery(slicers[i_1], axis) + "}";
            } else if (this.filterMembers[slicers[i_1].name]) {
              query = query + (query !== "" ? " * " : "") + "{" + this.filterMembers[slicers[i_1].name].toString() + "}";
            }
          }
          i_1++;
        }
        query = query === "" ? "" : "\nWHERE (" + query.replace(/DrilldownLevel/g, "") + ")";
      }
      return query;
    };
    MDXQuery2.getDimensionQuery = function(dimension, axis) {
      var query = "";
      var name = dimension.isCalculatedField ? this.fieldList[dimension.name].tag : dimension.name;
      var hasAllMember = this.fieldList[dimension.name] && this.fieldList[dimension.name].hasAllMember;
      if (!hasAllMember && !dimension.isNamedSet && !dimension.isCalculatedField) {
        query = "((" + name + ").levels(0).AllMembers)";
      } else {
        query = dimension.isNamedSet || dimension.isCalculatedField ? "{" + name + "}" : this.isPaging ? name + ".CHILDREN" : "DrilldownLevel({" + name + "}" + (axis === "rows" || axis === "columns" ? ",,,INCLUDE_CALC_MEMBERS" : "") + ")";
      }
      return query;
    };
    MDXQuery2.getDimensionUniqueName = function(headerText) {
      var hierarchyNode = this.fieldDataObj.hierarchy;
      var curElement = [];
      if (hierarchyNode) {
        for (var _i = 0, hierarchyNode_1 = hierarchyNode; _i < hierarchyNode_1.length; _i++) {
          var item = hierarchyNode_1[_i];
          if (item.id.toLowerCase() === headerText.toLowerCase()) {
            curElement.push(item);
          }
        }
        return curElement.length > 0 ? curElement[0].pid : "";
      } else {
        return headerText.split(".")[0];
      }
    };
    MDXQuery2.getMeasuresQuery = function(measures) {
      var query = "";
      if (measures.length > 0) {
        query = "{{";
        var values = "";
        for (var _i = 0, measures_1 = measures; _i < measures_1.length; _i++) {
          var measure = measures_1[_i];
          var name_1 = measure.isCalculatedField ? this.fieldList[measure.name].tag : measure.name;
          if (values.length > 0) {
            values = values + ", " + name_1;
          } else {
            values = name_1;
          }
        }
        query = query + values + "}}";
      }
      return query;
    };
    MDXQuery2.getfilterQuery = function(filters, cube) {
      var query = "\nFROM [" + cube + "]";
      var filterQuery = "\nFROM( SELECT (";
      var advancedFilters = [];
      var advancedFilterQuery = [];
      var rowFilter = [];
      var columnFilter = [];
      for (var _i = 0, _a = this.rows; _i < _a.length; _i++) {
        var field = _a[_i];
        if (filters[field.name] && filters[field.name].length > 0) {
          if (typeof filters[field.name][0] === "string") {
            rowFilter.push(filters[field.name]);
          } else {
            filters[field.name][1] = filters[field.name][0].type;
            advancedFilters.push(filters[field.name]);
            delete filters[field.name];
          }
        }
      }
      for (var _b = 0, _c = this.columns; _b < _c.length; _b++) {
        var field = _c[_b];
        if (filters[field.name] && filters[field.name].length > 0) {
          if (typeof filters[field.name][0] === "string") {
            columnFilter.push(filters[field.name]);
          } else {
            var filter = filters[field.name];
            filter[1] = filter[0].type;
            advancedFilters.push(filters[field.name]);
            delete filters[field.name];
          }
        }
      }
      for (var _d = 0, _e = this.filters; _d < _e.length; _d++) {
        var field = _e[_d];
        var isFound = false;
        for (var _f = 0, _g = this.columns; _f < _g.length; _f++) {
          var column = _g[_f];
          if (!isFound && this.getDimensionUniqueName(column.name) === this.getDimensionUniqueName(field.name)) {
            if (filters[field.name]) {
              columnFilter.push(filters[field.name]);
              isFound = true;
            }
          }
        }
        if (!isFound) {
          for (var _h = 0, _j = this.rows; _h < _j.length; _h++) {
            var row = _j[_h];
            if (!isFound && this.getDimensionUniqueName(row.name) === this.getDimensionUniqueName(field.name)) {
              if (filters[field.name]) {
                rowFilter.push(filters[field.name]);
                isFound = true;
              }
            }
          }
        }
      }
      if ((this.allowLabelFilter || this.allowValueFilter) && advancedFilters.length > 0) {
        var axes = ["Value", "Label"];
        for (var _k = 0, axes_1 = axes; _k < axes_1.length; _k++) {
          var axis = axes_1[_k];
          for (var _l = 0, advancedFilters_1 = advancedFilters; _l < advancedFilters_1.length; _l++) {
            var filterItems = advancedFilters_1[_l];
            if (filterItems && filterItems.length === 2 && typeof filterItems[1] === "string" && filterItems[1] === axis) {
              advancedFilterQuery.push(this.getAdvancedFilterQuery(filterItems[0], filterQuery, "COLUMNS"));
            }
          }
        }
      }
      for (var i = 0, cnt = columnFilter.length; i < cnt; i++) {
        filterQuery = i === 0 ? filterQuery + "{" + columnFilter[i].toString() + "}" : filterQuery + ",{" + columnFilter[i].toString() + "}";
      }
      if (columnFilter.length > 0) {
        filterQuery = rowFilter.length > 0 ? filterQuery + " ) ON COLUMNS ,(" : filterQuery + " ) ON COLUMNS";
      }
      for (var i = 0, cnt = rowFilter.length; i < cnt; i++) {
        filterQuery = i > 0 ? filterQuery + ",{" + rowFilter[i].toString() + "}" : filterQuery + "{" + rowFilter[i].toString() + "}";
      }
      filterQuery = columnFilter.length > 0 && rowFilter.length > 0 ? filterQuery = filterQuery + ") ON ROWS " : columnFilter.length === 0 && rowFilter.length > 0 ? filterQuery + ") ON COLUMNS " : filterQuery;
      var updatedFilterQuery = "";
      if (advancedFilterQuery.length > 0) {
        updatedFilterQuery = advancedFilterQuery.join(" ") + " " + (columnFilter.length > 0 || rowFilter.length > 0 ? filterQuery : "") + " " + query + Array(advancedFilterQuery.length + 1 + (columnFilter.length > 0 || rowFilter.length > 0 ? 1 : 0)).join(")");
      }
      query = columnFilter.length === 0 && rowFilter.length === 0 ? query : filterQuery + query + ")";
      return updatedFilterQuery.length > 0 ? updatedFilterQuery : query;
    };
    MDXQuery2.getAdvancedFilterQuery = function(filterItem, query, currentAxis) {
      var filterQuery = "\nFROM (SELECT Filter(" + filterItem.selectedField + ".AllMembers, " + this.getAdvancedFilterCondtions(filterItem.name, filterItem.condition, filterItem.value1, filterItem.value2, filterItem.type, filterItem.measure) + ")) on " + currentAxis;
      return filterQuery;
    };
    MDXQuery2.getAdvancedFilterCondtions = function(fieldName, filterOperator, value1, value2, filterType, measures) {
      var advancedFilterQuery = "";
      switch (filterOperator) {
        case "Equals":
          advancedFilterQuery = "(" + (filterType !== "Value" ? fieldName + '.CurrentMember.member_caption ="' + value1 + '"' : measures + " = " + value1);
          break;
        case "DoesNotEquals":
          advancedFilterQuery = "(" + (filterType !== "Value" ? fieldName + '.CurrentMember.member_caption <>"' + value1 + '"' : measures + " <>" + value1);
          break;
        case "Contains":
          advancedFilterQuery = "( InStr (1," + fieldName + '.CurrentMember.member_caption,"' + value1 + '") >0';
          break;
        case "DoesNotContains":
          advancedFilterQuery = "( InStr (1," + fieldName + '.CurrentMember.member_caption,"' + value1 + '")=0';
          break;
        case "BeginWith":
          advancedFilterQuery = "( Left (" + fieldName + ".CurrentMember.member_caption," + value1.length + ')="' + value1 + '"';
          break;
        case "DoesNotBeginWith":
          advancedFilterQuery = "( Left (" + fieldName + ".CurrentMember.member_caption," + value1.length + ') <>"' + value1 + '"';
          break;
        case "EndsWith":
          advancedFilterQuery = "( Right (" + fieldName + ".CurrentMember.member_caption," + value1.length + ')="' + value1 + '"';
          break;
        case "DoesNotEndsWith":
          advancedFilterQuery = "( Right (" + fieldName + ".CurrentMember.member_caption," + value1.length + ') <>"' + value1 + '"';
          break;
        case "GreaterThan":
          advancedFilterQuery = "(" + (filterType !== "Value" ? fieldName + '.CurrentMember.member_caption >"' + value1 + '"' : measures + " >" + value1);
          break;
        case "GreaterThanOrEqualTo":
          advancedFilterQuery = "(" + (filterType !== "Value" ? fieldName + '.CurrentMember.member_caption >="' + value1 + '"' : measures + " >=" + value1);
          break;
        case "LessThan":
          advancedFilterQuery = "(" + (filterType !== "Value" ? fieldName + '.CurrentMember.member_caption <"' + value1 + '"' : measures + " <" + value1);
          break;
        case "LessThanOrEqualTo":
          advancedFilterQuery = "(" + (filterType !== "Value" ? fieldName + '.CurrentMember.member_caption <="' + value1 + '"' : measures + " <=" + value1);
          break;
        case "Between":
          advancedFilterQuery = "(" + (filterType !== "Value" ? fieldName + '.CurrentMember.member_caption >="' + value1 + '"AND ' + fieldName + '.CurrentMember.member_caption <="' + value2 + '"' : measures + " >=" + value1 + " AND " + measures + " <=" + value2);
          break;
        case "NotBetween":
          advancedFilterQuery = "(" + (filterType !== "Value" ? fieldName + '.CurrentMember.member_caption >="' + value1 + '"OR ' + fieldName + '.CurrentMember.member_caption <="' + value2 + '"' : measures + " >=" + value1 + " OR " + measures + " <=" + value2);
          break;
        default:
          advancedFilterQuery = "( InStr (1," + fieldName + '.CurrentMember.member_caption,"' + value1 + '") >0';
          break;
      }
      return advancedFilterQuery;
    };
    MDXQuery2.getCalculatedFieldQuery = function(calcMembers) {
      var calcQuery = "";
      if (calcMembers.length > 0) {
        calcQuery = "\nWITH";
        for (var _i = 0, calcMembers_1 = calcMembers; _i < calcMembers_1.length; _i++) {
          var member = calcMembers_1[_i];
          var prefixName = member.formula.indexOf("Measure") > -1 ? "[Measures]." : member.hierarchyUniqueName + ".";
          var aliasName = prefixName + "[" + member.name + "]";
          var formatString = !isNullOrUndefined(member.formatString) ? member.formatString : null;
          calcQuery += "\nMEMBER " + aliasName + "as (" + member.formula + ") " + (!isNullOrUndefined(formatString) ? ', FORMAT_STRING ="' + formatString.trim() + '"' : "");
        }
      }
      return calcQuery;
    };
    return MDXQuery2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/base/olap/engine.js
var OlapEngine = (
  /** @class */
  function() {
    function OlapEngine2() {
      this.fieldList = {};
      this.columnCount = 0;
      this.rowCount = 0;
      this.colFirstLvl = 0;
      this.rowFirstLvl = 0;
      this.pageColStartPos = 0;
      this.enableSort = false;
      this.enableValueSorting = false;
      this.dataFields = {};
      this.formatFields = {};
      this.filterMembers = {};
      this.drilledSets = {};
      this.isExporting = false;
      this.aggregatedValueMatrix = [];
      this.mappingFields = {};
      this.formatRegex = /^(?:[ncpae])(?:([0-9]|1[0-9]|20))?$/i;
      this.clonedValTuple = [];
      this.clonedColumnTuple = [];
      this.clonedRowTuple = [];
      this.pivotValues = [];
      this.valueContent = [];
      this.headerContent = [];
      this.rowStartPos = 0;
      this.pageRowStartPos = 0;
      this.tupColumnInfo = [];
      this.tupRowInfo = [];
      this.gridJSON = "";
      this.namedSetsPosition = {};
      this.colDepth = 0;
      this.totalCollection = [];
      this.parentObjCollection = {};
      this.curDrillEndPos = -1;
      this.headerGrouping = {};
      this.lastLevel = [];
      this.showRowSubTotals = true;
      this.showColumnSubTotals = true;
      this.hideRowTotalsObject = {};
      this.hideColumnTotalsObject = {};
      this.sortObject = {};
      this.isColDrill = false;
    }
    OlapEngine2.prototype.renderEngine = function(dataSourceSettings, customProperties, onHeadersSort2) {
      this.isEmptyData = false;
      this.getHeaderSortInfo = onHeadersSort2;
      this.mdxQuery = "";
      this.isMeasureAvail = false;
      this.allowMemberFilter = false;
      this.allowLabelFilter = false;
      this.allowValueFilter = false;
      this.isMondrian = false;
      this.aggregatedValueMatrix = [];
      this.measureReportItems = [];
      this.calcChildMembers = [];
      this.selectedItems = [];
      this.savedFieldList = void 0;
      this.savedFieldListData = void 0;
      this.formatFields = {};
      this.filterMembers = {};
      this.dataFields = {};
      this.valueAxis = "";
      this.columnCount = 0;
      this.rowCount = 0;
      this.colFirstLvl = 0;
      this.rowFirstLvl = 0;
      this.pageColStartPos = 0;
      this.sortObject = {};
      this.globalize = new Internationalization();
      this.locale = this.globalize.culture ? this.globalize.culture : "en-US";
      this.localeObj = customProperties ? customProperties.localeObj : void 0;
      this.enableValueSorting = customProperties ? customProperties.enableValueSorting : false;
      if (dataSourceSettings.url) {
        this.dataSourceSettings = dataSourceSettings;
        this.measureIndex = !isNullOrUndefined(dataSourceSettings.valueIndex) ? dataSourceSettings.valueIndex : -1;
        this.valueAxis = dataSourceSettings.valueAxis === "row" ? "row" : "column";
        this.getAxisFields();
        this.formats = dataSourceSettings.formatSettings ? dataSourceSettings.formatSettings : [];
        this.enableSort = dataSourceSettings.enableSorting === void 0 ? true : dataSourceSettings.enableSorting;
        this.valueSortSettings = dataSourceSettings.valueSortSettings ? dataSourceSettings.valueSortSettings : void 0;
        this.filterSettings = dataSourceSettings.filterSettings ? dataSourceSettings.filterSettings : [];
        this.sortSettings = dataSourceSettings.sortSettings ? dataSourceSettings.sortSettings : [];
        this.allowMemberFilter = dataSourceSettings.allowMemberFilter ? true : false;
        this.allowLabelFilter = dataSourceSettings.allowLabelFilter ? true : false;
        this.allowValueFilter = dataSourceSettings.allowValueFilter ? true : false;
        this.drilledMembers = dataSourceSettings.drilledMembers ? this.updateDrilledItems(dataSourceSettings.drilledMembers) : [];
        this.calculatedFieldSettings = dataSourceSettings.calculatedFieldSettings ? dataSourceSettings.calculatedFieldSettings : [];
        this.emptyCellTextContent = dataSourceSettings.emptyCellsTextContent ? dataSourceSettings.emptyCellsTextContent : "";
        this.pageSettings = customProperties ? customProperties.pageSettings ? customProperties.pageSettings : this.pageSettings : void 0;
        this.isPaging = this.pageSettings && (customProperties.enablePaging || customProperties.enableVirtualization) ? true : false;
        this.frameSortObject();
        this.getFormattedFields(this.formats);
        this.savedFieldList = customProperties ? customProperties.savedFieldList : void 0;
        this.savedFieldListData = customProperties ? customProperties.savedFieldListData : void 0;
        this.fieldListData = [];
        this.fieldListObj = {};
        this.setNamedSetsPosition();
        if (!(this.savedFieldList && Object.keys(this.savedFieldList).length > 0 && this.savedFieldListData)) {
          this.getCubes(dataSourceSettings);
          this.getFieldList(dataSourceSettings);
        } else {
          this.updateFieldlist(true);
        }
        this.loadCalculatedMemberElements(this.calculatedFieldSettings);
        var measuresInfo = this.getMeasureInfo();
        this.olapVirtualization = this.isPaging && dataSourceSettings.showSubTotals && measuresInfo.measureIndex === (measuresInfo.measureAxis === "column" ? dataSourceSettings.columns.length - 1 : dataSourceSettings.rows.length - 1) && !isNullOrUndefined(this.pageSettings) && dataSourceSettings.showGrandTotals;
        this.isPaging = this.isPaging ? !this.olapVirtualization : this.isPaging;
        this.measureReportItems = [];
        this.updateFilterItems(this.filterSettings);
        this.generateGridData(dataSourceSettings);
      }
    };
    OlapEngine2.prototype.generateGridData = function(dataSourceSettings, action) {
      var refPaging = action && action === "navPaging" && this.isPaging && this.pageSettings !== void 0 ? true : false;
      if (this.rows.length > 0 || this.columns.length > 0 || this.values.length > 0 || this.filters.length > 0) {
        MDXQuery.getCellSets(dataSourceSettings, this, refPaging);
      } else {
        MDXQuery.getCellSets(dataSourceSettings, this, true, void 0, true);
        this.generateEngine(void 0, void 0, {
          dataSourceSettings,
          action: "loadTableElements"
        });
      }
    };
    OlapEngine2.prototype.generatePagingData = function(xmlDoc, request, customArgs) {
      var xmlaCellSet = [].slice.call(xmlDoc.querySelectorAll("Axes, CellData"));
      var countCells = xmlaCellSet[1] ? xmlaCellSet[1].querySelectorAll("FmtValue") : null;
      if (countCells && countCells.length > 0) {
        this.columnCount = Number(countCells[0].textContent);
        this.rowCount = Number(countCells[1].textContent);
      }
      var dataSourceSettings = customArgs.dataSourceSettings;
      MDXQuery.getCellSets(dataSourceSettings, this, true);
    };
    OlapEngine2.prototype.scrollPage = function() {
      if (this.olapVirtualization) {
        var virtualScrollingData = this.getVirtualScrollingData(this.clonedColumnTuple, this.clonedRowTuple);
        if (virtualScrollingData.isCalculated) {
          this.pivotValues = [];
          this.clearEngineProperties();
          this.performEngine(virtualScrollingData.columnTuple, virtualScrollingData.rowTuple, virtualScrollingData.valueTuple);
        }
        this.pivotValues = this.pivotValues.slice();
      } else {
        MDXQuery.getCellSets(this.dataSourceSettings, this, true);
      }
    };
    OlapEngine2.prototype.getVirtualScrollingData = function(colTuples, rowTuples) {
      var valTuples = this.clonedValTuple.slice();
      var isCalculated = false;
      var calColPage = (this.pageSettings.currentColumnPage - 1) * this.pageSettings.columnPageSize;
      var calRowPage = (this.pageSettings.currentRowPage - 1) * this.pageSettings.rowPageSize;
      var calColSize = this.pageSettings.columnPageSize * 3;
      var calRowSize = this.pageSettings.rowPageSize * 3;
      calColPage = this.columnCount < calColPage + calColSize ? this.columnCount > calColSize ? this.columnCount - calColSize : 0 : calColPage;
      calRowPage = this.rowCount < calRowPage + calRowSize ? this.rowCount > calRowSize ? this.rowCount - calRowSize : 0 : calRowPage;
      if (calColPage !== this.pageColStartPos || calRowPage !== this.pageRowStartPos || !(colTuples.length <= calColSize && rowTuples.length <= calRowSize)) {
        isCalculated = true;
        var measureInfo = this.getMeasureInfo();
        var isColGrandTolExists = !isNullOrUndefined(colTuples[0]) && Number(colTuples[0].querySelectorAll("Member")[0].querySelector("LNum").textContent) === 0;
        var isRowGrandTolExists = !isNullOrUndefined(rowTuples[0]) && Number(rowTuples[0].querySelectorAll("Member")[0].querySelector("LNum").textContent) === 0;
        var isAddColGrandTotals = isColGrandTolExists ? calColPage + calColSize >= colTuples.length - 1 : false;
        var isAddRowGrandTotals = isRowGrandTolExists ? calRowPage + calRowSize >= rowTuples.length - 1 : false;
        var colDepth = isColGrandTolExists ? this.getAxisdepth(colTuples) : measureInfo.measureAxis === "column" ? measureInfo.valueInfo.length : 1;
        var rowDepth = isRowGrandTolExists ? this.getAxisdepth(rowTuples) : measureInfo.measureAxis === "row" ? measureInfo.valueInfo.length : 1;
        var colTuplesOffset = (isColGrandTolExists ? colDepth : 0) + calColPage;
        var rowTuplesOffset = (isRowGrandTolExists ? rowDepth : 0) + calRowPage;
        var virtualColTuples = colTuples.slice(colTuplesOffset, colTuplesOffset + calColSize);
        var virtualRowTuples = rowTuples.slice(rowTuplesOffset, rowTuplesOffset + calRowSize);
        var colLastLevel = virtualColTuples[0] ? Number(virtualColTuples[0].querySelectorAll("Member")[0].querySelector("LNum").textContent) : 0;
        var rowLastLevel = virtualRowTuples[0] ? Number(virtualRowTuples[0].querySelectorAll("Member")[0].querySelector("LNum").textContent) : 0;
        var colData = this.getVirtualTotals(colTuples.slice(0, colTuplesOffset), colLastLevel, isAddColGrandTotals, "column", colDepth);
        var rowData = this.getVirtualTotals(rowTuples.slice(0, rowTuplesOffset), rowLastLevel, isAddRowGrandTotals, "row", rowDepth);
        colTuplesOffset = virtualColTuples.length + colData.totalsCollection.length > calColSize ? Math.max(virtualColTuples.length + colData.totalsCollection.length - calColSize) : 0;
        rowTuplesOffset = virtualRowTuples.length + rowData.totalsCollection.length > calRowSize ? Math.max(virtualRowTuples.length + rowData.totalsCollection.length - calRowSize) : 0;
        virtualColTuples = colData.totalsCollection.concat(virtualColTuples.slice(colTuplesOffset, virtualColTuples.length));
        virtualRowTuples = rowData.totalsCollection.concat(virtualRowTuples.slice(rowTuplesOffset, virtualRowTuples.length));
        var virtualValuesTupples = this.getVirtualValues(valTuples, calColPage + colTuplesOffset, calRowPage + rowTuplesOffset, calColSize, calRowSize, colData.indexCollection, rowData.indexCollection, colTuples.length, rowTuples.length, colDepth, rowDepth, isRowGrandTolExists);
        colTuples = virtualColTuples.slice();
        rowTuples = virtualRowTuples.slice();
        valTuples = virtualValuesTupples.slice();
      }
      this.pageColStartPos = calColPage;
      this.pageRowStartPos = calRowPage;
      return {
        columnTuple: colTuples,
        rowTuple: rowTuples,
        valueTuple: valTuples,
        isCalculated
      };
    };
    OlapEngine2.prototype.getAxisdepth = function(tuplesCollection) {
      var depth = 0;
      for (var i = 0; i < tuplesCollection.length; i++) {
        var level = Number(tuplesCollection[i].querySelectorAll("Member")[0].querySelector("LNum").textContent);
        if (level === 0) {
          depth++;
        } else {
          break;
        }
      }
      return depth;
    };
    OlapEngine2.prototype.getVirtualTotals = function(tuplesCollection, lastLevel, isAddGrandTotals, axis, axisDepth) {
      var totalsCollection = [];
      var indexCollection = [];
      if (lastLevel !== 1) {
        for (var i = tuplesCollection.length - 1; i > 0; i--) {
          var currLevel = Number(tuplesCollection[i].querySelectorAll("Member")[0].querySelector("LNum").textContent);
          if (currLevel === 0) {
            break;
          } else if (lastLevel > currLevel) {
            lastLevel = currLevel;
            var nextLevel = Number(tuplesCollection[i - 1].querySelectorAll("Member")[0].querySelector("LNum").textContent);
            if (nextLevel === currLevel) {
              for (var offset = 0; offset < axisDepth; offset++) {
                totalsCollection[totalsCollection.length] = tuplesCollection[i - offset];
                indexCollection[indexCollection.length] = i - offset;
              }
              i = axisDepth > 1 ? i - (axisDepth - 1) : i;
            } else {
              totalsCollection[totalsCollection.length] = tuplesCollection[i];
              indexCollection[indexCollection.length] = i;
            }
          } else if (currLevel === 1) {
            break;
          }
        }
      }
      if (isAddGrandTotals) {
        for (var i = axisDepth; i > 0; i--) {
          totalsCollection = totalsCollection.concat([tuplesCollection[i - 1]]);
          indexCollection = indexCollection.concat([i - 1]);
        }
      }
      return {
        totalsCollection: totalsCollection.reverse(),
        indexCollection: indexCollection.reverse()
      };
    };
    OlapEngine2.prototype.getVirtualValues = function(valueTuples, calColumnPage, calRowPage, calColunmnSize, calRowSize, colTotalsIndex, rowTotalsIndex, colTuplesLen, rowTuplesLen, columnDepth, rowDepth, isRowGrandTolExists) {
      var framedVirtValTuples = [];
      var virtValTuples = valueTuples;
      if (rowTuplesLen > calRowSize) {
        var rowValuesOffset = ((isRowGrandTolExists ? rowDepth : 0) + calRowPage) * colTuplesLen;
        virtValTuples = valueTuples.slice(rowValuesOffset, rowValuesOffset + calRowSize * colTuplesLen);
        var virtRowTotalValues = [];
        for (var i = 0; i < rowTotalsIndex.length; i++) {
          virtRowTotalValues = virtRowTotalValues.concat(valueTuples.slice(rowTotalsIndex[i] * colTuplesLen, rowTotalsIndex[i] * colTuplesLen + colTuplesLen));
        }
        virtValTuples = virtRowTotalValues.concat(virtValTuples);
      }
      for (var i = 0, j = virtValTuples.length / colTuplesLen; i < j; i++) {
        var rows = virtValTuples.slice(i * colTuplesLen, i * colTuplesLen + colTuplesLen);
        var virtRows = rows.slice(calColumnPage + columnDepth, calColumnPage + columnDepth + calColunmnSize);
        var virtTotals = [];
        for (var x = 0; x < colTotalsIndex.length; x++) {
          virtTotals[virtTotals.length] = rows[colTotalsIndex[x]];
        }
        framedVirtValTuples = framedVirtValTuples.concat(virtTotals.concat(virtRows));
      }
      return framedVirtValTuples;
    };
    OlapEngine2.prototype.generateEngine = function(xmlDoc, request, customArgs) {
      if (customArgs.action !== "down") {
        this.clearEngineProperties();
      }
      this.xmlDoc = xmlDoc ? xmlDoc.cloneNode(true) : void 0;
      this.request = request;
      this.customArgs = customArgs;
      this.parentObjCollection = {};
      this.curDrillEndPos = -1;
      this.onDemandDrillEngine = [];
      this.getSubTotalsVisibility();
      this.xmlaCellSet = xmlDoc ? xmlDoc.querySelectorAll("Axes, CellData") : void 0;
      var columnTuples = this.xmlaCellSet && this.xmlaCellSet.length > 0 ? [].slice.call(this.xmlaCellSet[0].querySelectorAll('Axis[name|="Axis0"] Tuple')) : [];
      var rowTuples = this.xmlaCellSet && this.xmlaCellSet.length > 0 ? [].slice.call(this.xmlaCellSet[0].querySelectorAll('Axis[name|="Axis1"] Tuple')) : [];
      var valCollection = this.xmlaCellSet && this.xmlaCellSet.length > 1 ? [].slice.call(this.xmlaCellSet[1].querySelectorAll("Cell")) : [];
      if (this.olapVirtualization && !isNullOrUndefined(this.pageSettings)) {
        if (columnTuples.length * rowTuples.length !== valCollection.length) {
          var valueCollection = [];
          for (var colPos = 0; colPos < valCollection.length; colPos++) {
            if (!isNullOrUndefined(valCollection[colPos])) {
              valueCollection[Number(valCollection[colPos].getAttribute("CellOrdinal"))] = valCollection[colPos];
            }
          }
          valCollection = valueCollection;
        }
        this.clonedValTuple = valCollection;
        var drillInfo = this.getDrillInfo("columns");
        var columnData = this.getActualTuples(columnTuples, drillInfo);
        drillInfo = this.getDrillInfo("rows");
        var rowData = this.getActualTuples(rowTuples, drillInfo, columnData.indexColls, columnTuples.length);
        this.clonedColumnTuple = columnData.tupColls;
        this.clonedRowTuple = rowData.tupColls;
        this.columnCount = this.clonedColumnTuple.length;
        this.rowCount = this.clonedRowTuple.length;
        columnData = rowData = void 0;
        var virtualScrollingData = this.getVirtualScrollingData(this.clonedColumnTuple, this.clonedRowTuple);
        this.performEngine(virtualScrollingData.columnTuple, virtualScrollingData.rowTuple, virtualScrollingData.valueTuple);
      } else {
        this.performEngine(columnTuples, rowTuples, valCollection);
      }
    };
    OlapEngine2.prototype.getDrillInfo = function(axis) {
      var drilledMembers = {};
      var fieldColls = [];
      if (axis === "columns") {
        fieldColls = this.dataSourceSettings.columns.map(function(field) {
          return field.name;
        });
      } else if (axis === "rows") {
        fieldColls = this.dataSourceSettings.rows.map(function(field) {
          return field.name;
        });
      }
      if (fieldColls.length > 0) {
        for (var i = 0, j = this.drilledMembers.length; i < j; i++) {
          var drilledMember = this.drilledMembers[i];
          var index = fieldColls.indexOf(drilledMember.name);
          if (index > -1) {
            if (!drilledMembers[index]) {
              drilledMembers[index] = [];
            }
            drilledMembers[index] = drilledMembers[index].concat(drilledMember.items);
          }
        }
      }
      return drilledMembers;
    };
    OlapEngine2.prototype.getActualTuples = function(tuplesColl, drillInfo, indexCollection, deapth) {
      var tupColls = [];
      var indexColls = [];
      var valueCollection = [];
      if (tuplesColl.length > 0) {
        var _loop_1 = function(i2, j2) {
          var tuples = tuplesColl[i2];
          var isAddElement = true;
          var isGrandSum = false;
          var isSum = false;
          var memTypeColl = tuples.getElementsByTagName("MEMBER_TYPE");
          var uNameColl = tuples.getElementsByTagName("UName");
          for (var k = 0, l = memTypeColl.length; k < l; k++) {
            var memType = Number(memTypeColl[k].textContent);
            var uName = uNameColl[k].textContent;
            if (isSum && memType < 2) {
              isAddElement = false;
            } else if (memType === 2) {
              isGrandSum = true;
            } else if (isGrandSum && memType < 2) {
              isAddElement = false;
            }
            if (drillInfo[k] && drillInfo[k].indexOf(uName) > -1) {
              isSum = true;
            }
            if (!isAddElement) {
              break;
            }
          }
          if (isAddElement) {
            tupColls[tupColls.length] = tuples;
            if (indexCollection) {
              var rowColls_1 = this_1.clonedValTuple.slice(i2 * deapth, i2 * deapth + deapth);
              valueCollection = valueCollection.concat(indexCollection.map(function(index) {
                return rowColls_1[index];
              }));
            } else {
              indexColls[indexColls.length] = i2;
            }
          }
        };
        var this_1 = this;
        for (var i = 0, j = tuplesColl.length; i < j; i++) {
          _loop_1(i, j);
        }
      } else if (indexCollection) {
        var rowColls_2 = this.clonedValTuple.slice(0, deapth);
        valueCollection = valueCollection.concat(indexCollection.map(function(index) {
          return rowColls_2[index];
        }));
      }
      if (valueCollection.length > 0) {
        this.clonedValTuple = valueCollection;
      }
      return {
        tupColls,
        indexColls
      };
    };
    OlapEngine2.prototype.clearEngineProperties = function() {
      this.pivotValues = [];
      this.valueContent = [];
      this.headerContent = [];
      this.colDepth = 0;
      this.tupColumnInfo = [];
      this.tupRowInfo = [];
      this.colMeasures = {};
      this.colMeasurePos = void 0;
      this.rowMeasurePos = void 0;
      this.rowStartPos = -1;
    };
    OlapEngine2.prototype.performEngine = function(columnTuples, rowTuples, valCollection) {
      this.totalCollection = [];
      var measureInfo = this.getMeasureInfo();
      if (this.drilledMembers.length > 0) {
        var orderedInfo = void 0;
        var valCount = columnTuples.length && rowTuples.length ? columnTuples.length * rowTuples.length : columnTuples.length ? columnTuples.length : rowTuples.length;
        orderedInfo = this.frameMeasureOrder(measureInfo, "column", columnTuples, valCollection, columnTuples.length, valCount);
        columnTuples = orderedInfo.orderedHeaderTuples;
        valCollection = orderedInfo.orderedValueTuples;
        orderedInfo = this.frameMeasureOrder(measureInfo, "row", rowTuples, valCollection, columnTuples.length, valCount);
        rowTuples = orderedInfo.orderedHeaderTuples;
        valCollection = orderedInfo.orderedValueTuples;
      }
      if (this.customArgs.action === "down") {
        this.updateTupCollection(this.customArgs.drillInfo.axis === "row" ? rowTuples.length : columnTuples.length);
      }
      var framedValCollection = {};
      for (var colPos = 0; colPos < valCollection.length; colPos++) {
        if (!isNullOrUndefined(valCollection[colPos])) {
          framedValCollection[this.olapVirtualization ? colPos : Number(valCollection[colPos].getAttribute("CellOrdinal"))] = valCollection[colPos];
        }
      }
      var valueSortData;
      this.valueSortSettings.columnIndex = void 0;
      if (this.enableValueSorting && this.valueSortSettings && !this.isPaging && !this.olapVirtualization) {
        valueSortData = this.getValueSortInfo(columnTuples, rowTuples, measureInfo);
      }
      if (this.customArgs.action === "down" ? this.customArgs.drillInfo.axis === "column" : true) {
        this.frameColumnHeader(columnTuples);
        if (!this.isPaging && !this.olapVirtualization) {
          this.performColumnSorting(framedValCollection, valueSortData);
        }
      }
      if (this.customArgs.action === "down" ? this.customArgs.drillInfo.axis === "row" : true) {
        this.frameRowHeader(rowTuples);
        if (!this.isPaging && !this.olapVirtualization) {
          this.performRowSorting(framedValCollection, valueSortData);
        }
      }
      this.frameValues(framedValCollection, columnTuples.length);
      this.performColumnSpanning();
      if (!this.isPaging && !this.olapVirtualization && this.enableSort) {
        for (var i = 0; i < this.headerContent.length; i++) {
          this.headerContent[i] = this.pivotValues[i];
        }
      }
      this.isEngineUpdated = true;
      this.isEmptyData = columnTuples.length === 0;
    };
    OlapEngine2.prototype.getValueSortInfo = function(columnTuples, rowTuples, measureInfo) {
      var memberIndex;
      if (this.valueSortSettings.headerText) {
        var headersCollection = this.valueSortSettings.headerText.split(this.valueSortSettings.headerDelimiter);
        var granSumPos = headersCollection.indexOf("Grand Total");
        if (granSumPos > -1) {
          var measure = headersCollection.join("").split(headersCollection[granSumPos]).join("");
          headersCollection = [];
          headersCollection[measureInfo.measureIndex] = measure;
        }
        var measureAxis = "";
        var measureIndex = measureInfo.measureIndex;
        for (var i = 0; i < this.dataSourceSettings.values.length; i++) {
          measureIndex = headersCollection.indexOf(this.dataSourceSettings.values[i].caption);
          if (this.dataSourceSettings.values[i].caption === headersCollection[measureIndex]) {
            headersCollection[measureIndex] = this.fieldList[this.dataSourceSettings.values[i].name].name;
            measureAxis = headersCollection[measureIndex];
            break;
          }
        }
        if (measureIndex !== -1) {
          if (measureIndex < measureInfo.measureIndex) {
            headersCollection = this.reArrangeHeaders(headersCollection, measureInfo.measureIndex, measureAxis);
          }
          var membersColls = this.olapValueAxis === "column" ? columnTuples : rowTuples;
          if (membersColls.length > 0) {
            var level = membersColls[0].getElementsByTagName("Member").length - (granSumPos > -1 ? measureIndex : 0);
            var member = this.getParentElement(membersColls, headersCollection, level, measureInfo.measureIndex, measureAxis, granSumPos > -1)[0];
            memberIndex = membersColls.indexOf(member);
          }
        }
      }
      return {
        memberIndex,
        columnLength: columnTuples.length,
        rowLength: rowTuples.length,
        isValueSorting: memberIndex > -1
      };
    };
    OlapEngine2.prototype.getParentElement = function(membersColls, headersCollection, level, measureIndex, measureAxis, isGrandTotal) {
      var selectedMember = [];
      var parentLevel = 0;
      var isParentAvail = false;
      var isChildAvail = false;
      var index = membersColls[0].getElementsByTagName("Member").length - level;
      for (var i = 0; i < membersColls.length; i++) {
        if (isNullOrUndefined(membersColls[i].getElementsByTagName("Member")[index])) {
          selectedMember = [];
          break;
        }
        var memberUName = membersColls[i].getElementsByTagName("UName")[index].textContent;
        var memberCaption = membersColls[i].getElementsByTagName("Caption")[index].textContent;
        var memberLevel = Number(membersColls[i].getElementsByTagName("LNum")[index].textContent);
        var isParent = memberUName === headersCollection[index] || memberCaption === headersCollection[index] || isNullOrUndefined(headersCollection[index]) && memberLevel === 0;
        if (isParent) {
          selectedMember[selectedMember.length] = membersColls[i];
          isParentAvail = true;
          parentLevel = memberLevel;
          if (isGrandTotal) {
            break;
          }
        } else if (isParentAvail && parentLevel < memberLevel) {
          var childMember = [];
          for (var j = i; j < membersColls.length; j++) {
            var childUName = membersColls[j].getElementsByTagName("UName")[index].textContent;
            var childCaption = membersColls[j].getElementsByTagName("Caption")[index].textContent;
            var childLevel = Number(membersColls[j].getElementsByTagName("LNum")[index].textContent);
            var isChild = childUName === headersCollection[index + 1] || childCaption === headersCollection[index + 1] || isNullOrUndefined(headersCollection[index + 1]) && childLevel === 0;
            if (parentLevel + 1 === childLevel && isChild) {
              childMember[childMember.length] = membersColls[j];
              isChildAvail = true;
            } else if (parentLevel + 1 < childLevel) {
              if (isChildAvail) {
                childMember[childMember.length] = membersColls[j];
              } else {
                break;
              }
            } else if (parentLevel + 1 > childLevel) {
              break;
            }
          }
          if (isChildAvail) {
            var childHeaderCollection = headersCollection.slice(0, index).concat(headersCollection.slice(index + 1, headersCollection.length));
            var childMeasureIndex = childHeaderCollection.indexOf(measureAxis);
            if (childMeasureIndex < measureIndex) {
              childHeaderCollection = this.reArrangeHeaders(childHeaderCollection, measureIndex, measureAxis);
            }
            selectedMember = this.getParentElement(childMember, childHeaderCollection, childMember[0].getElementsByTagName("Member").length, measureIndex, measureAxis);
          }
          break;
        } else if (isParentAvail && !isParent) {
          break;
        }
      }
      if (isGrandTotal) {
        return selectedMember;
      } else if (index < headersCollection.length - 1 && selectedMember.length > 0 && !isChildAvail) {
        selectedMember = this.getParentElement(selectedMember, headersCollection, level - 1, measureIndex, measureAxis);
      }
      return selectedMember;
    };
    OlapEngine2.prototype.reArrangeHeaders = function(headersCollection, measureIndex, measureAxis) {
      var actualIndex = headersCollection.indexOf(measureAxis);
      var headerColl1 = headersCollection.slice(0, actualIndex);
      var headerColl2 = headersCollection.slice(actualIndex + 1, headersCollection.length);
      headerColl1[measureIndex] = headersCollection[actualIndex];
      return headerColl1.concat(headerColl2);
    };
    OlapEngine2.prototype.getSubTotalsVisibility = function() {
      this.showRowSubTotals = this.dataSourceSettings.showRowSubTotals && this.dataSourceSettings.showSubTotals;
      this.showColumnSubTotals = this.dataSourceSettings.showColumnSubTotals && this.dataSourceSettings.showSubTotals;
      this.showSubTotalsAtTop = this.showColumnSubTotals && this.dataSourceSettings.subTotalsPosition === "Top";
      this.showSubTotalsAtBottom = this.showRowSubTotals && this.dataSourceSettings.subTotalsPosition === "Bottom";
      this.hideRowTotalsObject = {};
      this.hideColumnTotalsObject = {};
      var axisCount = 1;
      do {
        if (axisCount === 1) {
          if (this.showColumnSubTotals) {
            for (var cCnt = 0; cCnt < this.dataSourceSettings.columns.length; cCnt++) {
              if (this.dataSourceSettings.columns[cCnt].showSubTotals === false) {
                this.hideColumnTotalsObject[this.dataSourceSettings.columns[cCnt].name] = cCnt;
              }
            }
          }
        } else {
          if (this.showRowSubTotals) {
            for (var rCnt = 0; rCnt < this.dataSourceSettings.rows.length; rCnt++) {
              if (this.dataSourceSettings.rows[rCnt].showSubTotals === false) {
                this.hideRowTotalsObject[this.dataSourceSettings.rows[rCnt].name] = rCnt;
              }
            }
          }
        }
        axisCount++;
      } while (axisCount < 3);
    };
    OlapEngine2.prototype.frameRowHeader = function(tuples) {
      var _this = this;
      this.headerGrouping = {};
      this.lastLevel = [];
      var isGrandTotalAdd = true;
      var position = this.pivotValues.length;
      var pivotValues = [];
      var valueContent = [];
      if (this.customArgs.action !== "down") {
        pivotValues = this.pivotValues;
        valueContent = this.valueContent;
      } else {
        position = this.customArgs.drillInfo.currentCell.rowIndex + 1;
      }
      this.rowStartPos = this.rowStartPos > 0 ? this.rowStartPos : position;
      var tupPos = 0;
      var lastAllStartPos;
      var lastAllCount;
      var prevUNArray = [];
      var allType = {};
      var rowMembers = [];
      var availAllMember = false;
      var withoutAllStartPos = -1;
      var withoutAllEndPos = -1;
      var minLevel = [];
      var gTotals = [{
        actualText: "Grand Total",
        axis: "row",
        colIndex: 0,
        formattedText: "Grand Total",
        hasChild: false,
        level: -1,
        rowIndex: 0,
        index: [],
        type: "grand sum",
        ordinal: 0,
        colSpan: 1,
        rowSpan: 1,
        memberType: 2,
        isDrilled: false,
        valueSort: {
          "Grand Total": 1,
          levelName: "Grand Total"
        }
      }];
      var maxLevel = [];
      var measurePos;
      var newTupPosition = this.customArgs.drillInfo && this.customArgs.drillInfo.axis === "row" ? this.customArgs.drillInfo.currentCell.ordinal + 1 : 0;
      while (tupPos < tuples.length) {
        var members = tuples[tupPos].querySelectorAll("Member");
        maxLevel = this.frameTupCollection(members, maxLevel, tupPos + newTupPosition, this.tupRowInfo, this.showRowSubTotals, this.hideRowTotalsObject, "row");
        tupPos++;
      }
      tupPos = 0;
      var prevTupInfo;
      var tuplesLength = tuples.length;
      if (this.customArgs.action === "down") {
        var ordinal = this.customArgs.drillInfo.currentCell.ordinal + 1;
        tupPos = ordinal;
        tuplesLength += ordinal;
        lastAllCount = this.tupRowInfo[ordinal - 1].allCount;
        lastAllStartPos = this.tupRowInfo[ordinal - 1].allStartPos;
        prevTupInfo = this.tupRowInfo[ordinal - 1];
      }
      var startTupPos = tupPos;
      var pagingAllowFlag = true;
      var lastMesPos = 0;
      var isGrandTotalTop = false;
      var subTotals = [];
      while (tupPos < tuplesLength && pagingAllowFlag) {
        var members = tuples[this.customArgs.action === "down" ? tupPos - (this.customArgs.drillInfo.currentCell.ordinal + 1) : tupPos].querySelectorAll("Member");
        var memPos = 0;
        var prevParent = void 0;
        var allCount = this.tupRowInfo[tupPos].allCount;
        var allStartPos = this.tupRowInfo[tupPos].allStartPos;
        var measure = this.tupRowInfo[tupPos].measure;
        var typeColl = this.tupRowInfo[tupPos].typeCollection;
        var drillStartPos = this.tupRowInfo[tupPos].drillStartPos;
        var startDrillUniquename = this.tupRowInfo[tupPos].startDrillUniquename;
        if (tupPos === 0 || tupPos === startTupPos) {
          var firstTupMembers = this.customArgs.action === "down" ? this.tupRowInfo[0].members : members;
          while (memPos < firstTupMembers.length) {
            if (firstTupMembers[memPos].querySelector("MEMBER_TYPE").textContent === "1" && Number(firstTupMembers[memPos].querySelector("LNum").textContent) === 0) {
              minLevel[memPos] = 0;
            } else {
              minLevel[memPos] = Number(firstTupMembers[memPos].querySelector("LNum").textContent);
            }
            if (firstTupMembers[memPos].querySelector("MEMBER_TYPE").textContent === "1") {
              allType[memPos] = 0;
              withoutAllStartPos = withoutAllStartPos === -1 ? memPos : withoutAllStartPos;
              withoutAllEndPos = memPos;
            } else {
              allType[memPos] = 1;
              availAllMember = firstTupMembers[memPos].querySelector("MEMBER_TYPE").textContent === "3" ? availAllMember : true;
            }
            memPos++;
          }
          measurePos = typeColl.indexOf("3");
        }
        memPos = 0;
        if (tupPos === 0 && (members.length > allCount + (measure ? 1 : 0) || members.length === 1 && measure)) {
          gTotals.pop();
        }
        if (tupPos === 0 && this.isPaging ? gTotals.length === 0 : !availAllMember || allCount === lastAllCount || allStartPos !== lastAllStartPos || members.length === 1 && measure) {
          var attrDrill = this.checkAttributeDrill(this.tupRowInfo[tupPos].drillInfo, "rows");
          var drillAllow = drillStartPos > -1 ? allCount > 0 ? attrDrill || allStartPos > drillStartPos : true : true;
          drillAllow = prevTupInfo && drillAllow && drillStartPos > -1 ? prevTupInfo.startDrillUniquename !== startDrillUniquename ? true : (withoutAllEndPos > prevTupInfo.measurePosition ? false : prevTupInfo.measureName !== this.tupRowInfo[tupPos].measureName) && (allStartPos === drillStartPos + 1 || this.tupRowInfo[tupPos].measurePosition === drillStartPos + 1) : drillAllow;
          var withoutAllAllow = withoutAllStartPos > -1 && allCount > 0 ? attrDrill || allStartPos > withoutAllEndPos : true;
          isGrandTotalTop = this.dataSourceSettings.grandTotalsPosition === "Top" && this.olapRowValueIndex === 0 && this.olapValueAxis === "row" && this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showRowGrandTotals && (this.olapValueAxis === "row" ? this.dataSourceSettings.rows.length > 1 : true);
          if (isGrandTotalTop && gTotals.length === 1) {
            gTotals = this.frameGrandTotalValues(tuples, gTotals, typeColl, measurePos);
          }
          if (members.length === allCount + (measure ? 1 : 0) && measure && !isGrandTotalTop) {
            var levelName = "Grand Total" + this.valueSortSettings.headerDelimiter + this.dataFields[this.getUniqueName(members[measurePos].querySelector("UName").textContent)].caption ? this.dataFields[this.getUniqueName(members[measurePos].querySelector("UName").textContent)].caption : members[measurePos].querySelector("Caption").textContent;
            var formattedText = typeColl[measurePos] === "3" && this.dataFields[this.getUniqueName(members[measurePos].querySelector("UName").textContent)] && this.dataFields[this.getUniqueName(members[measurePos].querySelector("UName").textContent)].caption ? this.dataFields[this.getUniqueName(members[measurePos].querySelector("UName").textContent)].caption : members[measurePos].querySelector("Caption").textContent;
            gTotals = this.frameGrandTotalAxisSet(gTotals, this.getUniqueName(members[measurePos].querySelector("UName").textContent), formattedText, position, tupPos, Number(typeColl[measurePos]), members[measurePos].querySelector("PARENT_UNIQUE_NAME") ? members[measurePos].querySelector("PARENT_UNIQUE_NAME").textContent : void 0, members[measurePos].querySelector("LName").textContent, members[measurePos].getAttribute("Hierarchy"), {
              levelName,
              axis: members[measurePos].getAttribute("Hierarchy")
            });
            gTotals[gTotals.length - 1].valueSort[levelName] = 1;
          } else if (!(allStartPos === 0 || measurePos === 0 && allStartPos === 1) && drillAllow && withoutAllAllow) {
            if (this.dataSourceSettings.grandTotalsPosition === "Top" && isGrandTotalAdd && this.dataSourceSettings.showGrandTotals && (this.olapValueAxis === "row" ? this.dataSourceSettings.rows.length > 1 : true)) {
              this.insertRowGrandTotal(gTotals, valueContent, pivotValues, tuples, position);
              position = this.pivotValues.length;
              isGrandTotalAdd = false;
            }
            prevTupInfo = this.tupRowInfo[tupPos];
            var lastPos = position;
            var lastMemPos = memPos;
            prevParent = {};
            var withoutAllDrilled = false;
            while (memPos < members.length && pagingAllowFlag) {
              var member = members[memPos];
              if (member.querySelector("UName").textContent !== prevUNArray[memPos] && typeColl[memPos] !== "2" && ((Object.keys(prevParent).length > 0 ? prevParent.isDrilled && !this.fieldList[prevParent.hierarchy].isHierarchy : withoutAllDrilled) ? typeColl[memPos] === "3" && allType[memPos - 1] && allType[memPos + 1] !== 0 : true)) {
                var lvl = Number(member.querySelector("LNum").textContent) - (allType[memPos] && typeColl[memPos] !== "3" ? 1 : minLevel[memPos]);
                var isNamedSet = this.namedSetsPosition["row"][memPos] ? true : false;
                var uniqueName = this.getUniqueName(member.querySelector("UName").textContent);
                var depth = this.getDepth(this.tupRowInfo[tupPos], uniqueName, Number(typeColl[memPos]));
                var levelName = this.getCaptionCollectionWithMeasure(this.tupRowInfo[tupPos], memPos, true);
                if (this.showSubTotalsAtBottom && position > this.rowStartPos) {
                  lastPos = position = this.insertRowSubTotal(pivotValues, valueContent, subTotals, position, lvl, levelName);
                }
                if (!(this.isPaging && pivotValues[lastMesPos][0] && this.fieldList[pivotValues[lastMesPos][0].hierarchy] && this.fieldList[pivotValues[lastMesPos][0].hierarchy].isHierarchy && pivotValues[lastMesPos][0].hasChild && !pivotValues[lastMesPos][0].isDrilled && !this.rows[memPos].isNamedSet && (this.rows[memPos].name.indexOf("[Measures]") === 0 || this.fieldList[member.getAttribute("Hierarchy")] && (this.fieldList[member.getAttribute("Hierarchy")].isHierarchy || this.fieldList[member.getAttribute("Hierarchy")].hasAllMember)) && pivotValues[lastMesPos][0].depth < depth)) {
                  pivotValues[position] = [{
                    axis: "row",
                    actualText: uniqueName,
                    colIndex: 0,
                    formattedText: typeColl[memPos] === "3" && this.dataFields[uniqueName] && this.dataFields[uniqueName].caption ? this.dataFields[uniqueName].caption : member.querySelector("Caption").textContent,
                    hasChild: this.fieldList[member.getAttribute("Hierarchy")] && this.fieldList[member.getAttribute("Hierarchy")].isHierarchy && memPos < this.rows.length - 1 && !this.rows[memPos + 1].isNamedSet && this.rows[memPos + 1].name.indexOf("[Measures]") < 0 && this.fieldList[this.rows[memPos + 1].name] && this.fieldList[this.rows[memPos + 1].name].hasAllMember ? true : Number(member.querySelector("CHILDREN_CARDINALITY").textContent) > 0 ? true : false,
                    level: lvl,
                    depth,
                    rowIndex: position,
                    index: [],
                    ordinal: tupPos,
                    type: "header",
                    colSpan: 1,
                    rowSpan: 1,
                    memberType: Number(typeColl[memPos]),
                    isDrilled: this.fieldList[member.getAttribute("Hierarchy")] && this.fieldList[member.getAttribute("Hierarchy")].isHierarchy && !this.isAttributeDrill(member.getAttribute("Hierarchy"), this.tupRowInfo[tupPos].drillInfo, "rows") ? true : this.tupRowInfo[tupPos].drillInfo[memPos].isDrilled,
                    parentUniqueName: member.querySelector("PARENT_UNIQUE_NAME") ? member.querySelector("PARENT_UNIQUE_NAME").textContent : void 0,
                    levelUniqueName: member.querySelector("LName").textContent,
                    hierarchy: member.getAttribute("Hierarchy"),
                    isNamedSet,
                    valueSort: {
                      levelName: "",
                      axis: member.getAttribute("Hierarchy")
                    }
                  }];
                  if (this.olapVirtualization && pivotValues[position][0].type === "header") {
                    delete pivotValues[position][0].type;
                  }
                  prevParent = typeColl[memPos] !== "3" ? pivotValues[position][0] : prevParent;
                  if (!prevParent) {
                    rowMembers.push(member.querySelector("Caption").textContent);
                  }
                  levelName = this.getCaptionCollectionWithMeasure(this.tupRowInfo[tupPos], memPos, false);
                  pivotValues[position][0].valueSort.levelName = levelName;
                  pivotValues[position][0].valueSort[levelName] = 1;
                  valueContent[position - this.rowStartPos] = {};
                  valueContent[position - this.rowStartPos][0] = pivotValues[position][0];
                  if (measure && measurePos > memPos) {
                    prevUNArray[measurePos] = "";
                  }
                  for (var pos = memPos + 1; pos < members.length; pos++) {
                    prevUNArray[pos] = "";
                  }
                  prevUNArray[memPos] = member.querySelector("UName").textContent;
                  lastMesPos = Number(typeColl[memPos]) !== 3 ? position : lastMesPos;
                  position++;
                  lastMemPos = memPos;
                }
              } else if (typeColl[memPos] === "2") {
                lastMemPos = memPos;
              } else {
                if (this.tupRowInfo[tupPos].drillInfo[memPos].isDrilled && allType[memPos] === 0) {
                  withoutAllDrilled = true;
                }
              }
              if (this.tupRowInfo[tupPos].drillInfo[memPos].isDrilled && this.tupRowInfo[tupPos].showTotals) {
                this.tupRowInfo[tupPos].showTotals = !this.showRowSubTotals ? false : this.hideRowTotalsObject[this.tupRowInfo[tupPos].drillInfo[memPos].hierarchy] === void 0;
              }
              memPos++;
            }
            if (lastPos < position && lastMemPos >= members.length - 1) {
              pivotValues[position - 1][0].ordinal = tupPos;
              if (pivotValues[position - 1][0].type === "header") {
                delete pivotValues[position - 1][0].type;
              }
            }
          }
          lastAllCount = allCount;
          lastAllStartPos = allStartPos;
        }
        tupPos++;
      }
      if (this.showSubTotalsAtBottom && subTotals.length > 0) {
        subTotals.reverse();
        subTotals.forEach(function(axis) {
          pivotValues[position] = [axis];
          valueContent[position - _this.rowStartPos] = {};
          valueContent[position - _this.rowStartPos][0] = pivotValues[position][0];
          position++;
        });
      }
      if (!(this.dataSourceSettings.grandTotalsPosition === "Top") || this.olapValueAxis === "row" && this.dataSourceSettings.rows.length === 1 && this.dataSourceSettings.grandTotalsPosition === "Top" || this.dataSourceSettings.rows.length === 0) {
        this.insertRowGrandTotal(gTotals, valueContent, pivotValues, tuples, position);
      }
    };
    OlapEngine2.prototype.insertRowSubTotal = function(pivotValues, valueContent, subTotals, position, lvl, levelName) {
      var prevRowParent = PivotUtil.frameHeaderWithKeys(pivotValues[position - 1][0]);
      if (prevRowParent.level < lvl && prevRowParent.type !== "grand sum" && (prevRowParent.isDrilled || prevRowParent.memberType === 3)) {
        if (prevRowParent.memberType === 3) {
          var valueCells = [];
          var index = 1;
          while (pivotValues[position - index][0].memberType === 3) {
            valueCells[valueCells.length] = pivotValues[position - index][0];
            index++;
          }
          if (pivotValues[position - index][0].isDrilled && valueCells.length !== 0) {
            for (var i = 0, axislength = valueCells.length; i < axislength; i++) {
              valueCells[i].formattedText = pivotValues[position - index][0].formattedText + " " + valueCells[i].formattedText;
              valueCells[i].isSum = true;
              valueCells[i].type = "sum";
              valueCells[i].parentUniqueName = pivotValues[position - index][0].levelUniqueName;
              subTotals[subTotals.length] = valueCells[i];
            }
            index--;
            position -= index;
          }
        } else {
          prevRowParent.hasChild = false;
          prevRowParent.isDrilled = false;
          prevRowParent.isSum = true;
          prevRowParent.type = "sum";
          prevRowParent.formattedText = prevRowParent.formattedText + " Total";
          subTotals[Object.keys(subTotals).length] = prevRowParent;
        }
      }
      if (subTotals.length > 0) {
        var j = subTotals.length - 1;
        var subTotalLevel = subTotals[j].valueSort.levelName.split(".").length;
        var nextLevels = levelName.split(".").length;
        while (subTotalLevel >= nextLevels) {
          pivotValues[position] = [subTotals[j]];
          valueContent[position - this.rowStartPos] = {};
          valueContent[position - this.rowStartPos][0] = pivotValues[position][0];
          position++;
          subTotals.splice(subTotals.length - 1, 1);
          if (Object.keys(subTotals).length > 0) {
            j--;
            subTotalLevel = subTotals[j].valueSort.levelName.split(".").length;
          } else {
            break;
          }
        }
      }
      return position;
    };
    OlapEngine2.prototype.insertRowGrandTotal = function(gTotals, valueContent, pivotValues, tuples, position) {
      if (gTotals.length > 1 && gTotals[0].memberType !== 3) {
        gTotals[0].ordinal = -1;
      }
      if (this.customArgs.action !== "down") {
        var grandTotalFlag = this.dataSourceSettings.rows.length === 0 || this.dataSourceSettings.rows.length === 1 && this.dataSourceSettings.rows[0].name === "[Measures]";
        if (this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showRowGrandTotals || grandTotalFlag) {
          for (var totPos = 0; totPos < gTotals.length; totPos++) {
            gTotals[totPos].rowIndex = position;
            pivotValues[position] = [gTotals[totPos]];
            valueContent[position - this.rowStartPos] = {};
            valueContent[position - this.rowStartPos][0] = pivotValues[position][0];
            position++;
          }
        }
      } else {
        this.updateRowEngine(pivotValues, valueContent, tuples.length);
        this.onDemandDrillEngine = pivotValues;
      }
      return gTotals;
    };
    OlapEngine2.prototype.frameGrandTotalAxisSet = function(gTotals, actualText, formattedText, rowIndex, ordinal, memberType, parentUniqueName, levelUniqueName, hierarchy, valueSort) {
      gTotals.push({
        axis: "row",
        actualText,
        colIndex: 0,
        formattedText,
        hasChild: false,
        level: -1,
        rowIndex,
        index: [],
        ordinal,
        colSpan: 1,
        rowSpan: 1,
        memberType,
        isDrilled: false,
        parentUniqueName,
        levelUniqueName,
        hierarchy,
        valueSort
      });
      return gTotals;
    };
    OlapEngine2.prototype.getDepth = function(tupInfo, uniqueName, memberType) {
      var memberPosition = tupInfo.uNameCollection.indexOf(uniqueName);
      var cropUName = tupInfo.uNameCollection.substring(0, memberPosition) + (memberType === 3 ? "" : uniqueName);
      var fieldSep = cropUName.split("::[").map(function(item) {
        return item[0] === "[" ? item : "[" + item;
      });
      if (memberType === 3 && this.rowMeasurePos === fieldSep.length) {
        fieldSep.push(uniqueName);
      }
      var nxtIndextCount = -1;
      for (var fPos = 0; fPos < fieldSep.length; fPos++) {
        var fieldMembers = fieldSep[fPos];
        var membersCount = fieldMembers.split("~~").length;
        nxtIndextCount += membersCount;
      }
      return nxtIndextCount;
    };
    OlapEngine2.prototype.checkAttributeDrill = function(drillInfo, axis) {
      var isDrill = false;
      for (var i = 0; i < drillInfo.length; i++) {
        isDrill = this.isAttributeDrill(drillInfo[i].hierarchy, drillInfo, axis);
        if (isDrill) {
          break;
        }
      }
      return isDrill;
    };
    OlapEngine2.prototype.frameTupCollection = function(members, maxLevel, tupPos, tupInfo, showSubTotals2, hideTotalsObject, axis) {
      var _a, _b;
      var memPos = 0;
      var allCount = 0;
      var allStartPos;
      var measure;
      var measureName;
      var measurePosition;
      var typeColl = [];
      var levelColl = [];
      var drillState = [];
      var uNameCollection = "";
      var captionCollection = "";
      var showTotals = true;
      var hideFieldPos = -1;
      while (memPos < members.length) {
        var member = members[memPos];
        var memberlevel = Number(member.querySelector("LNum").textContent);
        var memberUName = member.querySelector("UName").textContent;
        if (Number(member.querySelector("MEMBER_TYPE").textContent) > 3) {
          member.querySelector("MEMBER_TYPE").textContent = memberUName.indexOf("[Measures]") === 0 ? "3" : "1";
        }
        var memberType = memberUName.indexOf("[Measures]") === 0 ? "3" : Number(member.querySelector("MEMBER_TYPE").textContent) > 3 ? "1" : member.querySelector("MEMBER_TYPE").textContent;
        var memberCaption = member.querySelector("Caption").textContent;
        if (this.fieldList[memberCaption] && this.fieldList[memberCaption].type === "CalculatedField") {
          memberCaption = this.fieldList[memberCaption].caption;
          member.querySelector("Caption").textContent = memberCaption;
        }
        var hierarchy = member.getAttribute("Hierarchy");
        var parentUName = member.querySelector("PARENT_UNIQUE_NAME") ? member.querySelector("PARENT_UNIQUE_NAME").textContent : "";
        if (memberType === "2") {
          if (!this.isPaging) {
            allCount++;
          }
          allStartPos = isNullOrUndefined(allStartPos) ? memPos : allStartPos;
        } else if (memberType === "3") {
          measure = member;
          measureName = memberUName;
          measurePosition = memPos;
          if (axis === "column") {
            this.colMeasures[memberUName] = member;
            this.colMeasurePos = memPos;
          } else {
            this.rowMeasurePos = memPos;
          }
        } else {
          hideFieldPos = hideTotalsObject[hierarchy];
        }
        if (memberType !== "2") {
          if (this.headerGrouping[memPos]) {
            if (memberlevel > this.lastLevel[memPos]) {
              this.lastLevel[memPos] = memberlevel;
            } else if (memberlevel < this.lastLevel[memPos]) {
              var levelPos = this.lastLevel[memPos];
              while (levelPos >= memberlevel) {
                delete this.headerGrouping[memPos].UName[levelPos];
                delete this.headerGrouping[memPos].Caption[levelPos];
                levelPos--;
              }
              this.lastLevel[memPos] = memberlevel;
            }
            this.headerGrouping[memPos].UName[memberlevel] = memberUName;
            this.headerGrouping[memPos].Caption[memberlevel] = memberCaption;
          } else {
            this.lastLevel[memPos] = memberlevel;
            this.headerGrouping[memPos] = {
              UName: (_a = {}, _a[memberlevel] = memberUName, _a),
              Caption: (_b = {}, _b[memberlevel] = memberCaption, _b)
            };
          }
          if (this.isPaging) {
            var currUName = parentUName;
            while (this.drilledSets[currUName]) {
              var currCaption = this.drilledSets[currUName].querySelector("Caption").textContent;
              var currLevel = Number(this.drilledSets[currUName].querySelector("LNum").textContent);
              this.headerGrouping[memPos].UName[currLevel] = currUName;
              this.headerGrouping[memPos].Caption[currLevel] = currCaption;
              currUName = this.drilledSets[currUName].querySelector("PARENT_UNIQUE_NAME") === null ? "" : this.drilledSets[currUName].querySelector("PARENT_UNIQUE_NAME").textContent;
            }
          }
          var uNames = "";
          var uNamesKeys = Object.keys(this.headerGrouping[memPos].UName);
          for (var i = 0; i < uNamesKeys.length; i++) {
            var j = uNamesKeys[i];
            if (i === 0) {
              uNames = this.headerGrouping[memPos].UName[Number(j)];
            } else {
              uNames = uNames + "~~" + this.headerGrouping[memPos].UName[Number(j)];
            }
          }
          uNameCollection = uNameCollection === "" ? uNames : uNameCollection + "::" + uNames;
          var captions = "";
          var captionsKeys = Object.keys(this.headerGrouping[memPos].Caption);
          for (var i = 0; i < captionsKeys.length; i++) {
            var j = captionsKeys[i];
            if (i === 0) {
              captions = this.headerGrouping[memPos].Caption[Number(j)];
            } else {
              captions = captions + "~~" + this.headerGrouping[memPos].Caption[Number(j)];
            }
          }
          if (memPos !== measurePosition) {
            captionCollection = captionCollection === "" ? captions : captionCollection + "::" + captions;
          }
        }
        typeColl.push(memberType);
        levelColl.push(memberlevel);
        if (isNullOrUndefined(maxLevel[memPos]) || maxLevel[memPos] < memberlevel) {
          maxLevel[memPos] = memberlevel;
        }
        drillState.push({
          level: memberlevel,
          uName: memberUName,
          hierarchy,
          isDrilled: false
        });
        if (tupInfo[tupPos - 1] && tupInfo[tupPos - 1].typeCollection[memPos] === "1" && drillState[memPos].level > tupInfo[tupPos - 1].drillInfo[memPos].level) {
          var uCollection = uNameCollection.split(/~~|::\[/).map(function(item) {
            return item[0] === "[" ? item : "[" + item;
          });
          uCollection.pop();
          var parentLevel = uCollection.join("~~");
          this.setDrillInfo(parentUName, parentLevel, memPos, tupPos, tupInfo);
        }
        memPos++;
      }
      if (hideFieldPos > -1) {
        showTotals = typeColl[hideFieldPos + 1] !== "2";
      }
      tupInfo[tupPos] = {
        allCount,
        allStartPos,
        measure,
        measureName,
        measurePosition,
        members,
        typeCollection: typeColl,
        uNameCollection,
        captionCollection,
        levelCollection: levelColl,
        drillInfo: drillState,
        drillStartPos: -1,
        drillEndPos: -1,
        showTotals: !showSubTotals2 && allCount > 0 && allStartPos > (measurePosition === 0 ? 1 : 0) ? false : showTotals
      };
      return maxLevel;
    };
    OlapEngine2.prototype.getCaptionCollectionWithMeasure = function(tuple, memPos, isAddTotals) {
      var captionColection = tuple.captionCollection;
      var isMeasureAdd = true;
      if (!isAddTotals && tuple.typeCollection[memPos] !== "3") {
        for (var i = 0; i < this.measurePosition; i++) {
          if (tuple.drillInfo[memPos].hierarchy === this.dataSourceSettings.rows[i].name) {
            isMeasureAdd = false;
            break;
          }
        }
      }
      if (tuple.measure && isMeasureAdd) {
        var uName = this.getUniqueName(tuple.measure.querySelector("UName").textContent);
        var measureName = this.dataFields[uName] && this.dataFields[uName].caption ? this.dataFields[uName].caption : tuple.measure.querySelector("Caption").textContent;
        var measurePosition = tuple.uNameCollection.split(/[~~::]+/g).indexOf(tuple.measureName);
        var captionCollectionArray = tuple.captionCollection.split(/[~~::]+/g);
        captionCollectionArray.splice(measurePosition, 0, measureName);
        captionColection = captionCollectionArray.join(this.valueSortSettings.headerDelimiter);
      } else {
        var captionCollectionArray = tuple.captionCollection.split(/[~~::]+/g);
        captionColection = captionCollectionArray.join(this.valueSortSettings.headerDelimiter);
      }
      return captionColection;
    };
    OlapEngine2.prototype.setNamedSetsPosition = function() {
      this.namedSetsPosition = {};
      var axis = 0;
      do {
        var setsPositions = {};
        var axisFields = axis ? this.dataSourceSettings.rows : this.dataSourceSettings.columns;
        for (var fPos = 0; fPos < axisFields.length; fPos++) {
          if (axisFields[fPos].isNamedSet) {
            setsPositions[fPos] = axisFields[fPos].name;
          }
        }
        this.namedSetsPosition[axis ? "row" : "column"] = setsPositions;
        axis++;
      } while (axis < 2);
    };
    OlapEngine2.prototype.updateRowEngine = function(pivotValues, valueContent, tuplesLength) {
      var currEngineCount = this.pivotValues.length - 1;
      var newEngineCount = Object.keys(pivotValues).length;
      while (currEngineCount > this.customArgs.drillInfo.currentCell.rowIndex) {
        this.pivotValues[currEngineCount + newEngineCount] = this.pivotValues[currEngineCount];
        this.pivotValues[currEngineCount + newEngineCount][0].ordinal += tuplesLength;
        this.pivotValues[currEngineCount + newEngineCount][0].rowIndex += newEngineCount;
        this.valueContent[currEngineCount + newEngineCount - this.rowStartPos] = this.valueContent[currEngineCount - this.rowStartPos];
        currEngineCount--;
      }
      for (var key = 0; key < pivotValues.length; key++) {
        this.pivotValues[key] = pivotValues[key];
        this.valueContent[Number(key) - this.rowStartPos] = valueContent[Number(key) - this.rowStartPos];
      }
      this.pivotValues[this.customArgs.drillInfo.currentCell.rowIndex][0].isDrilled = true;
    };
    OlapEngine2.prototype.updateTupCollection = function(newTuplesCount) {
      var tupCollection = this.customArgs.drillInfo.axis === "row" ? this.tupRowInfo : this.tupColumnInfo;
      var currTupCount = tupCollection.length - 1;
      while (currTupCount > this.customArgs.drillInfo.currentCell.ordinal) {
        tupCollection[currTupCount + newTuplesCount] = tupCollection[currTupCount];
        currTupCount--;
      }
    };
    OlapEngine2.prototype.frameGrandTotalValues = function(tuples, gTotals, typeColl, measurePos) {
      var tupPos = 0;
      var lastAllStartPos;
      var lastAllCount;
      var availAllMember = false;
      var withoutAllEndPos = -1;
      var isGrandtoalDataAdd = false;
      var prevTupInfo;
      var isGrandTotalTop = false;
      while (tupPos < tuples.length && !isGrandtoalDataAdd) {
        var members = tuples[this.customArgs.action === "down" ? tupPos - (this.customArgs.drillInfo.currentCell.ordinal + 1) : tupPos].querySelectorAll("Member");
        var allCount = this.tupRowInfo[tupPos].allCount;
        var allStartPos = this.tupRowInfo[tupPos].allStartPos;
        var measure = this.tupRowInfo[tupPos].measure;
        var typeColl_1 = this.tupRowInfo[tupPos].typeCollection;
        var drillStartPos = this.tupRowInfo[tupPos].drillStartPos;
        var startDrillUniquename = this.tupRowInfo[tupPos].startDrillUniquename;
        if (tupPos === 0 && (members.length > allCount + (measure ? 1 : 0) || members.length === 1 && measure)) {
          gTotals.pop();
        }
        if (tupPos === 0 && this.isPaging ? gTotals.length === 0 : !availAllMember || allCount === lastAllCount || allStartPos !== lastAllStartPos || members.length === 1 && measure) {
          var attrDrill = this.checkAttributeDrill(this.tupRowInfo[tupPos].drillInfo, "rows");
          var drillAllow = drillStartPos > -1 ? allCount > 0 ? attrDrill || allStartPos > drillStartPos : true : true;
          drillAllow = prevTupInfo && drillAllow && drillStartPos > -1 ? prevTupInfo.startDrillUniquename !== startDrillUniquename ? true : (withoutAllEndPos > prevTupInfo.measurePosition ? false : prevTupInfo.measureName !== this.tupRowInfo[tupPos].measureName) && (allStartPos === drillStartPos + 1 || this.tupRowInfo[tupPos].measurePosition === drillStartPos + 1) : drillAllow;
          if (members.length === allCount + (measure ? 1 : 0) && measure && !isGrandTotalTop) {
            var levelName = "Grand Total" + this.valueSortSettings.headerDelimiter + members[measurePos].querySelector("Caption").textContent;
            var formattedText = typeColl_1[measurePos] === "3" && this.dataFields[this.getUniqueName(members[measurePos].querySelector("UName").textContent)] && this.dataFields[this.getUniqueName(members[measurePos].querySelector("UName").textContent)].caption ? this.dataFields[this.getUniqueName(members[measurePos].querySelector("UName").textContent)].caption : members[measurePos].querySelector("Caption").textContent;
            gTotals = this.frameGrandTotalAxisSet(gTotals, this.getUniqueName(members[measurePos].querySelector("UName").textContent), formattedText, this.pivotValues.length, tupPos, Number(typeColl_1[measurePos]), members[measurePos].querySelector("PARENT_UNIQUE_NAME") ? members[measurePos].querySelector("PARENT_UNIQUE_NAME").textContent : void 0, members[measurePos].querySelector("LName").textContent, members[measurePos].getAttribute("Hierarchy"), {
              levelName,
              axis: members[measurePos].getAttribute("Hierarchy")
            });
            gTotals[gTotals.length - 1].valueSort["Grand Total" + this.valueSortSettings.headerDelimiter + members[measurePos].querySelector("Caption").textContent] = 1;
          }
          lastAllCount = allCount;
          lastAllStartPos = allStartPos;
        }
        isGrandtoalDataAdd = this.dataSourceSettings.values.length + 1 === gTotals.length ? true : false;
        tupPos++;
      }
      return gTotals;
    };
    OlapEngine2.prototype.frameColumnHeader = function(tuples) {
      var _this = this;
      this.headerGrouping = {};
      this.lastLevel = [];
      var tupPos = 0;
      var maxLevel = [];
      var allType = [];
      var minLevel = [];
      var withoutAllStartPos = -1;
      var withoutAllEndPos = -1;
      var newTupPosition = this.customArgs.drillInfo && this.customArgs.drillInfo.axis === "column" ? this.customArgs.drillInfo.currentCell.ordinal + 1 : 0;
      while (tupPos < tuples.length) {
        var members = tuples[tupPos].querySelectorAll("Member");
        maxLevel = this.frameTupCollection(members, maxLevel, tupPos + newTupPosition, this.tupColumnInfo, this.showColumnSubTotals, this.hideColumnTotalsObject, "column");
        tupPos++;
      }
      if (this.olapVirtualization) {
        maxLevel = maxLevel.slice(0, maxLevel.length - 1).map(function(level) {
          return level === 0 ? 1 : level;
        }).concat(maxLevel.slice(maxLevel.length - 1));
      }
      if (tuples.length > 0) {
        var members = tuples[0].querySelectorAll("Member");
        var memPos = 0;
        while (memPos < members.length) {
          minLevel[memPos] = members[memPos].querySelector("MEMBER_TYPE").textContent === "1" && Number(members[memPos].querySelector("LNum").textContent) === 0 ? 0 : Number(members[memPos].querySelector("LNum").textContent);
          if (members[memPos].querySelector("MEMBER_TYPE").textContent === "1" && (this.isPaging || Number(members[memPos].querySelector("LNum").textContent) === 0)) {
            allType[memPos] = 0;
            withoutAllStartPos = withoutAllStartPos === -1 ? memPos : withoutAllStartPos;
            withoutAllEndPos = memPos;
          } else {
            allType[memPos] = 1;
          }
          memPos++;
        }
      }
      tupPos = 0;
      var position = 1;
      var lastSavedInfo = {};
      var isSubTotIncluded = true;
      var withoutAllAvail = false;
      var lastRealTup;
      var _loop_2 = function() {
        var members2 = tuples[tupPos].querySelectorAll("Member");
        var allCount = this_2.tupColumnInfo[tupPos].allCount;
        var allStartPos = this_2.tupColumnInfo[tupPos].allStartPos;
        var measure = this_2.tupColumnInfo[tupPos].measure;
        var typeColl = this_2.tupColumnInfo[tupPos].typeCollection;
        var drillInfo = this_2.tupColumnInfo[tupPos].drillInfo;
        var drillStartPos = this_2.tupColumnInfo[tupPos].drillStartPos;
        var startDrillUniquename = this_2.tupColumnInfo[tupPos].startDrillUniquename;
        var endDrillUniquename = this_2.tupColumnInfo[tupPos].endDrillUniquename;
        var drillEndPos = this_2.tupColumnInfo[tupPos].drillEndPos;
        var levelColl = this_2.tupColumnInfo[tupPos].levelCollection;
        var isStartCol = typeColl[0] === "2" ? false : typeColl[0] === "3" ? typeColl[1] !== "2" : true;
        var depth = 0;
        maxLevel.map(function(item, pos) {
          depth = depth + (allType[pos] === 0 ? item + (1 - (minLevel[pos] > 1 ? 1 : minLevel[pos])) : item === 0 ? _this.isPaging && typeColl[pos] === "2" ? 0 : 1 : item);
        });
        this_2.colDepth = this_2.colDepth > depth ? this_2.colDepth : depth;
        if (tupPos === 0 && members2.length > allCount + (measure ? 1 : 0)) {
          withoutAllAvail = true;
          isStartCol = allCount > 0 && isStartCol ? allStartPos > withoutAllStartPos : isStartCol;
        }
        var isGrandTotalTop = false;
        if (this_2.dataSourceSettings.grandTotalsPosition === "Top" && this_2.dataSourceSettings.showGrandTotals && this_2.dataSourceSettings.showColumnGrandTotals) {
          var count = 0;
          for (var i = 0; i < members2.length; i++) {
            if (members2[i].querySelector("Caption").textContent.indexOf("All") === 0) {
              count++;
            }
          }
          isGrandTotalTop = count === (this_2.olapValueAxis === "column" ? this_2.dataSourceSettings.columns.length - 1 : this_2.dataSourceSettings.columns.length);
        }
        if (isStartCol || isGrandTotalTop) {
          if (allCount === 0 || isGrandTotalTop) {
            var levelComp = [-1, -1, -1];
            if (this_2.tupColumnInfo[tupPos - 1] && this_2.tupColumnInfo[tupPos - 1].allCount === 0) {
              levelComp = this_2.levelCompare(levelColl, this_2.tupColumnInfo[tupPos - 1].levelCollection);
            } else if (withoutAllAvail && lastRealTup) {
              levelComp = this_2.levelCompare(levelColl, lastRealTup.levelCollection);
            }
            if (this_2.tupColumnInfo[tupPos].drillStartPos < 0 || this_2.showSubTotalsAtTop) {
              if (!isSubTotIncluded && levelComp[0] > -1 && levelComp[2] > -1) {
                position = this_2.mergeTotCollection(position, allCount, maxLevel, minLevel, allType, allStartPos, drillInfo, levelComp);
              }
              this_2.setParentCollection(members2);
              this_2.frameCommonColumnLoop(members2, tupPos, position, maxLevel, allType, minLevel);
              if (!this_2.tupColumnInfo[tupPos].showTotals) {
                position--;
              }
              if (!isSubTotIncluded && levelComp[0] > -1 && levelComp[2] > -1) {
                position = this_2.mergeTotCollection(position, allCount, maxLevel, minLevel, allType, allStartPos, drillInfo, levelComp);
              }
              isSubTotIncluded = false;
              if (!this_2.isColDrill) {
                position++;
              } else {
                this_2.isColDrill = false;
              }
            } else if (lastSavedInfo.drillStartPos === drillStartPos ? lastSavedInfo.startDrillUniquename !== startDrillUniquename || lastSavedInfo.allCount === allCount : true) {
              if (!isSubTotIncluded && levelComp[0] > -1 && levelComp[2] > -1) {
                position = this_2.mergeTotCollection(position, allCount, maxLevel, minLevel, allType, allStartPos, drillInfo, levelComp);
                isSubTotIncluded = true;
              }
              this_2.setParentCollection(members2);
              if (withoutAllAvail ? withoutAllEndPos <= drillStartPos : true) {
                if (!isGrandTotalTop) {
                  this_2.totalCollection[this_2.totalCollection.length] = {
                    allCount,
                    ordinal: tupPos,
                    members: members2,
                    drillInfo
                  };
                }
                lastSavedInfo.allCount = allCount;
                lastSavedInfo.allStartPos = allStartPos;
                lastSavedInfo.drillStartPos = drillStartPos;
                lastSavedInfo.startDrillUniquename = startDrillUniquename;
                lastSavedInfo.endDrillUniquename = endDrillUniquename;
              }
            }
            lastRealTup = this_2.tupColumnInfo[tupPos];
          }
        }
        var attrDrill2 = this_2.checkAttributeDrill(this_2.tupColumnInfo[tupPos].drillInfo, "columns");
        if (allCount > 0 && (withoutAllAvail ? isStartCol && (attrDrill2 || withoutAllEndPos < allStartPos) : true)) {
          if (allCount === lastSavedInfo.allCount || allStartPos !== lastSavedInfo.allStartPos) {
            var endAllow = drillEndPos !== drillStartPos ? lastSavedInfo.endDrillUniquename === endDrillUniquename : true;
            var allow = allStartPos !== lastSavedInfo.allStartPos ? lastSavedInfo.startDrillUniquename !== startDrillUniquename : endAllow;
            if (drillStartPos > -1 ? allow : true) {
              if (!isSubTotIncluded) {
                position = this_2.mergeTotCollection(position, allCount, maxLevel, minLevel, allType, allStartPos, drillInfo);
                isSubTotIncluded = true;
              }
              this_2.setParentCollection(members2);
              if (withoutAllAvail && drillStartPos > -1 ? withoutAllEndPos <= drillStartPos : true) {
                if (!isGrandTotalTop) {
                  this_2.totalCollection[this_2.totalCollection.length] = {
                    allCount,
                    ordinal: tupPos,
                    members: members2,
                    allStartPos,
                    drillInfo
                  };
                }
                lastSavedInfo.allCount = allCount;
                lastSavedInfo.allStartPos = allStartPos;
                lastSavedInfo.drillStartPos = drillStartPos;
                lastSavedInfo.startDrillUniquename = startDrillUniquename;
                lastSavedInfo.endDrillUniquename = endDrillUniquename;
              }
            }
          }
        }
        tupPos++;
      };
      var this_2 = this;
      while (tupPos < tuples.length) {
        _loop_2();
      }
      if (this.totalCollection.length > 0) {
        if (Object.keys(this.colMeasures).length > 1) {
          this.orderTotals(position, maxLevel, allType, minLevel);
        } else {
          this.totalCollection = this.totalCollection.reverse();
          for (var _i = 0, _a = this.totalCollection; _i < _a.length; _i++) {
            var coll = _a[_i];
            var isGrandTotal = this.tupColumnInfo[coll.ordinal].measurePosition === 0 ? this.tupColumnInfo[coll.ordinal].allStartPos === 1 : this.tupColumnInfo[coll.ordinal].allStartPos === 0;
            if (isGrandTotal ? this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showColumnGrandTotals : true) {
              this.frameCommonColumnLoop(coll.members, coll.ordinal, position, maxLevel, minLevel, allType);
              var attrDrill = this.checkAttributeDrill(this.tupColumnInfo[coll.ordinal].drillInfo, "columns");
              if (this.tupColumnInfo[coll.ordinal].showTotals || attrDrill) {
                position++;
              }
            }
          }
        }
      }
    };
    OlapEngine2.prototype.orderTotals = function(position, maxLevel, allType, minLevel) {
      var groupColl = {};
      var maxCnt = 1;
      for (var _i = 0, _a = this.totalCollection; _i < _a.length; _i++) {
        var coll = _a[_i];
        var isGrandTotal = this.tupColumnInfo[coll.ordinal].measurePosition === 0 ? this.tupColumnInfo[coll.ordinal].allStartPos === 1 : this.tupColumnInfo[coll.ordinal].allStartPos === 0;
        if (isGrandTotal ? this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showColumnGrandTotals : true) {
          var measureName = this.tupColumnInfo[coll.ordinal].measure.querySelector("UName").textContent;
          if (groupColl[measureName]) {
            groupColl[measureName].coll.push(coll);
            groupColl[measureName].count++;
            maxCnt = maxCnt < groupColl[measureName].count ? groupColl[measureName].count : maxCnt;
          } else {
            groupColl[measureName] = {
              coll: [coll],
              count: 1
            };
          }
        }
      }
      var keys = Object.keys(groupColl);
      var collLength = maxCnt - 1;
      while (collLength > -1) {
        for (var _b = 0, keys_1 = keys; _b < keys_1.length; _b++) {
          var key = keys_1[_b];
          var coll = groupColl[key].coll[collLength];
          if (coll) {
            this.frameCommonColumnLoop(coll.members, coll.ordinal, position, maxLevel, allType, minLevel);
            if (this.tupColumnInfo[coll.ordinal].showTotals) {
              position++;
            }
          }
        }
        collLength--;
      }
    };
    OlapEngine2.prototype.setParentCollection = function(members) {
      var memPos = 0;
      while (members.length > memPos) {
        var member = members[memPos];
        var memberType = Number(member.querySelector("MEMBER_TYPE").textContent) > 2 ? "3" : member.querySelector("MEMBER_TYPE").textContent;
        var memberlevel = Number(member.querySelector("LNum").textContent);
        var memberUName = member.querySelector("UName").textContent;
        var parentUName = member.querySelector("PARENT_UNIQUE_NAME") ? member.querySelector("PARENT_UNIQUE_NAME").textContent : "";
        var isSameParent = true;
        var isWithoutAllMember = false;
        if (this.parentObjCollection[memPos]) {
          var levelCollection = Object.keys(this.parentObjCollection[memPos]);
          var parentMember = this.parentObjCollection[memPos][memberlevel - 1];
          isSameParent = parentMember ? parentUName === parentMember.querySelector("UName").textContent : levelCollection.length === 0;
          isWithoutAllMember = this.tupColumnInfo[0].typeCollection[memPos] === "1";
        }
        if (memberType === "2") {
          delete this.parentObjCollection[memPos];
        } else {
          if (this.isPaging || isWithoutAllMember ? !isSameParent : false) {
            delete this.parentObjCollection[memPos];
          }
          if (!this.parentObjCollection[memPos]) {
            this.parentObjCollection[memPos] = {};
            this.parentObjCollection[memPos][memberlevel] = member;
          } else if (!this.parentObjCollection[memPos][memberlevel] || this.parentObjCollection[memPos][memberlevel].querySelector("UName").textContent !== memberUName) {
            this.parentObjCollection[memPos][memberlevel] = member;
          }
        }
        memPos++;
      }
    };
    OlapEngine2.prototype.setDrillInfo = function(pUName, parentLvlCollection, memPos, tupPos, tupInfo) {
      tupPos--;
      while (tupInfo[tupPos] && tupInfo[tupPos].drillInfo[memPos].uName === pUName) {
        var prevUcollection = tupInfo[tupPos].uNameCollection.split(/~~|::\[/).map(function(item) {
          return item[0] === "[" ? item : "[" + item;
        });
        if (prevUcollection.join("~~").indexOf(parentLvlCollection) < 0) {
          break;
        }
        tupInfo[tupPos].drillInfo[memPos].isDrilled = true;
        if (this.curDrillEndPos <= memPos) {
          tupInfo[tupPos].drillEndPos = this.curDrillEndPos = memPos;
          tupInfo[tupPos].endDrillUniquename = pUName;
        }
        if (tupInfo[tupPos].drillStartPos > memPos || tupInfo[tupPos].drillStartPos === -1) {
          tupInfo[tupPos].drillStartPos = memPos;
        }
        tupInfo[tupPos].startDrillUniquename = pUName;
        tupPos--;
      }
    };
    OlapEngine2.prototype.levelCompare = function(newLevels, oldLevels) {
      var changePos = [-1, 0];
      for (var lPos = 0; lPos < oldLevels.length; lPos++) {
        if (newLevels[lPos] !== oldLevels[lPos]) {
          changePos = [lPos, newLevels[lPos], oldLevels[lPos] - newLevels[lPos]];
          break;
        }
      }
      return changePos;
    };
    OlapEngine2.prototype.mergeTotCollection = function(position, allCount, maxLevel, allType, minLevel, allStartPos, drillInfo, levelComp) {
      var prevHdrPos = isNullOrUndefined(allStartPos) ? levelComp[0] : allStartPos - (this.colMeasurePos === allStartPos - 1 ? 2 : 1);
      var flagLevel = drillInfo[prevHdrPos] && drillInfo[prevHdrPos].level;
      var flagLevelString = this.getLevelsAsString(prevHdrPos - 1, drillInfo);
      var groupColl = {};
      var maxCnt = 1;
      var enterFlag = false;
      for (var _i = 0, _a = this.totalCollection; _i < _a.length; _i++) {
        var coll = _a[_i];
        if (enterFlag || coll.allCount <= allCount && (flagLevel > -1 && coll.drillInfo[prevHdrPos] ? coll.drillInfo[prevHdrPos].level >= flagLevel && this.getLevelsAsString(prevHdrPos - 1, coll.drillInfo) === flagLevelString : true)) {
          var measureName = this.tupColumnInfo[coll.ordinal].measure ? this.tupColumnInfo[coll.ordinal].measure.querySelector("UName").textContent : "measure";
          if (groupColl[measureName]) {
            groupColl[measureName].coll.push(coll);
            groupColl[measureName].count++;
            maxCnt = maxCnt < groupColl[measureName].count ? groupColl[measureName].count : maxCnt;
          } else {
            groupColl[measureName] = {
              coll: [coll],
              count: 1
            };
          }
          enterFlag = false;
        }
      }
      var keys = Object.keys(groupColl);
      var collLength = maxCnt - 1;
      while (collLength > -1) {
        for (var _b = 0, keys_2 = keys; _b < keys_2.length; _b++) {
          var key = keys_2[_b];
          var coll1 = groupColl[key].coll[collLength];
          if (coll1) {
            var isGrandTotal = this.tupColumnInfo[coll1.ordinal].measurePosition === 0 ? this.tupColumnInfo[coll1.ordinal].allStartPos === 1 : this.tupColumnInfo[coll1.ordinal].allStartPos === 0;
            if (isGrandTotal ? this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showColumnGrandTotals : true) {
              this.frameCommonColumnLoop(coll1.members, coll1.ordinal, position, maxLevel, minLevel, allType);
              if (this.tupColumnInfo[coll1.ordinal].showTotals) {
                position++;
              }
            }
            this.totalCollection.pop();
          }
        }
        collLength--;
      }
      return position;
    };
    OlapEngine2.prototype.getLevelsAsString = function(prevHdrPos, drillInfo) {
      var lvlCollection = [];
      for (var pos = 0; pos < prevHdrPos; pos++) {
        lvlCollection[pos] = drillInfo[pos].level;
      }
      return lvlCollection.length > 0 ? lvlCollection.toString() : "";
    };
    OlapEngine2.prototype.frameCommonColumnLoop = function(members, tupPos, position, maxLevel, minLevel, allType) {
      var _a;
      var drillMemberPosition = -1;
      if (this.tupColumnInfo[tupPos].showTotals) {
        var memberPos = 0;
        var memberDepth = 0;
        while (memberPos < members.length) {
          memberDepth += allType[memberPos] > 0 && this.getMeasurePosition(this.tupColumnInfo[tupPos].uNameCollection, this.tupColumnInfo[tupPos].measurePosition) !== memberPos ? maxLevel[memberPos] : maxLevel[memberPos] + (1 - minLevel[memberPos]);
          if (this.tupColumnInfo[tupPos].drillInfo[memberPos].isDrilled && this.tupColumnInfo[tupPos].showTotals) {
            this.tupColumnInfo[tupPos].showTotals = !this.showColumnSubTotals ? false : this.hideColumnTotalsObject[this.tupColumnInfo[tupPos].drillInfo[memberPos].hierarchy] === void 0;
            memberDepth -= maxLevel[memberPos] - this.tupColumnInfo[tupPos].levelCollection[memberPos];
            drillMemberPosition = this.tupColumnInfo[tupPos].showTotals ? -1 : memberDepth - 1;
          }
          memberPos++;
        }
      }
      var attrDrill = this.checkAttributeDrill(this.tupColumnInfo[tupPos].drillInfo, "columns");
      if (this.tupColumnInfo[tupPos].showTotals || attrDrill) {
        var memPos = 0;
        var spanMemPos = 0;
        var colMembers = {};
        var isGrandTotal = members[0].querySelector("LNum").textContent === "0";
        while (memPos < members.length) {
          var member = members[memPos];
          var memberType = Number(member.querySelector("MEMBER_TYPE").textContent) > 2 ? "3" : member.querySelector("MEMBER_TYPE").textContent;
          var memDup = 0;
          var memberLevel = member.querySelector("LNum").textContent;
          for (var rowDepthPos = memberType !== "2" ? allType[memPos] ? 1 : minLevel[memPos] : 1; rowDepthPos <= (memberType === "3" ? 1 : maxLevel[memPos]); rowDepthPos++) {
            var isDrilled = false;
            if (!this.pivotValues[spanMemPos]) {
              this.pivotValues[spanMemPos] = [];
            }
            if (Number(members[memPos].querySelector("LNum").textContent) > rowDepthPos && memberType !== "2") {
              if (!this.parentObjCollection[memPos][rowDepthPos]) {
                this.getDrilledParent(members[memPos], rowDepthPos, this.parentObjCollection[memPos]);
              }
              if (this.parentObjCollection[memPos][rowDepthPos]) {
                member = this.parentObjCollection[memPos][rowDepthPos];
              }
              isDrilled = true;
            } else {
              member = members[memPos];
              memDup++;
            }
            var uName = this.getUniqueName(member.querySelector("UName").textContent);
            if (memberType !== "2") {
              colMembers[uName] = memberType === "3" && this.dataFields[uName] && this.dataFields[uName].caption ? this.dataFields[uName].caption : member.querySelector("Caption").textContent;
            } else if (memberType === "2" && memberLevel === "0" && isGrandTotal) {
              colMembers[uName] = "Grand Total";
              isGrandTotal = false;
            }
            var levelNameKeys = Object.keys(colMembers);
            var levelName = memPos >= this.measurePosition && Number(member.getElementsByTagName("LNum")[0].textContent) === 0 && levelNameKeys.length === 1 ? "Grand Total" + this.valueSortSettings.headerDelimiter : "";
            for (var i = 0; i < levelNameKeys.length; i++) {
              var j = levelNameKeys[i];
              if (i === 0) {
                levelName = levelName + colMembers[j];
              } else {
                levelName = levelName + this.valueSortSettings.headerDelimiter + colMembers[j];
              }
            }
            var isNamedSet = this.namedSetsPosition["column"][memPos] ? true : false;
            var depth = this.getDepth(this.tupColumnInfo[tupPos], uName, Number(memberType));
            if (!(this.isPaging && this.pivotValues[spanMemPos - 1] && this.pivotValues[spanMemPos - 1][position] && this.fieldList[this.pivotValues[spanMemPos - 1][position].hierarchy] && this.fieldList[this.pivotValues[spanMemPos - 1][position].hierarchy].isHierarchy && this.pivotValues[spanMemPos - 1][position].hasChild && !this.pivotValues[spanMemPos - 1][position].isDrilled && !this.columns[memPos].isNamedSet && this.fieldList[member.getAttribute("Hierarchy")] && (this.fieldList[member.getAttribute("Hierarchy")].isHierarchy || this.fieldList[member.getAttribute("Hierarchy")].hasAllMember) && this.pivotValues[spanMemPos - 1][position].depth < depth)) {
              this.pivotValues[spanMemPos][position] = {
                axis: "column",
                actualText: uName,
                colIndex: position,
                formattedText: memberType === "3" && this.dataFields[uName] && this.dataFields[uName].caption ? this.dataFields[uName].caption : member.querySelector("Caption").textContent,
                hasChild: this.fieldList[member.getAttribute("Hierarchy")] && this.fieldList[member.getAttribute("Hierarchy")].isHierarchy && memPos < this.columns.length - 1 && !this.columns[memPos + 1].isNamedSet && this.columns[memPos + 1].name.indexOf("[Measures]") < 0 && this.fieldList[this.columns[memPos + 1].name] && this.fieldList[this.columns[memPos + 1].name].hasAllMember ? true : Number(member.querySelector("CHILDREN_CARDINALITY").textContent) > 0 ? true : false,
                level: memDup > 1 ? -1 : Number(member.querySelector("LNum").textContent) - (allType[memPos] && memberType !== "3" ? 1 : 0),
                rowIndex: spanMemPos,
                ordinal: tupPos,
                memberType: Number(memberType),
                depth,
                isDrilled: this.fieldList[member.getAttribute("Hierarchy")] && this.fieldList[member.getAttribute("Hierarchy")].isHierarchy && !this.isAttributeDrill(member.getAttribute("Hierarchy"), this.tupColumnInfo[tupPos].drillInfo, "columns") ? true : isDrilled || this.tupColumnInfo[tupPos].drillInfo[memPos].isDrilled,
                parentUniqueName: member.querySelector("PARENT_UNIQUE_NAME") ? member.querySelector("PARENT_UNIQUE_NAME").textContent : void 0,
                levelUniqueName: member.querySelector("LName").textContent,
                hierarchy: member.getAttribute("Hierarchy"),
                isNamedSet,
                valueSort: (_a = {
                  levelName
                }, _a[levelName] = 1, _a.axis = member.getAttribute("Hierarchy"), _a)
              };
              if (!this.headerContent[spanMemPos]) {
                this.headerContent[spanMemPos] = {};
              }
              this.headerContent[spanMemPos][position] = this.pivotValues[spanMemPos][position];
              spanMemPos++;
            } else {
              this.isColDrill = true;
              break;
            }
          }
          memPos++;
        }
      } else {
        if (drillMemberPosition > -1) {
          this.pivotValues[drillMemberPosition][position - 1].ordinal = tupPos;
        } else if (this.tupColumnInfo[tupPos].allCount > 0) {
          var memberPos = 0;
          var memberDepth = 0;
          while (memberPos < this.tupColumnInfo[tupPos].allStartPos) {
            memberDepth += allType[memberPos] > 0 && this.getMeasurePosition(this.tupColumnInfo[tupPos].uNameCollection, this.tupColumnInfo[tupPos].measurePosition) !== memberPos ? maxLevel[memberPos] : maxLevel[memberPos] + (1 - minLevel[memberPos]);
            memberPos++;
          }
          if (this.tupColumnInfo[tupPos].allStartPos === this.tupColumnInfo[tupPos].measurePosition + 1) {
            memberDepth -= maxLevel[this.tupColumnInfo[tupPos].allStartPos - 2] - this.tupColumnInfo[tupPos].levelCollection[this.tupColumnInfo[tupPos].allStartPos - 2] + 1;
          } else {
            memberDepth -= maxLevel[this.tupColumnInfo[tupPos].allStartPos - 1] - this.tupColumnInfo[tupPos].levelCollection[this.tupColumnInfo[tupPos].allStartPos - 1];
          }
          if (this.pivotValues[memberDepth - 1]) {
            this.pivotValues[memberDepth - 1][position - 1].ordinal = tupPos;
          }
        }
      }
    };
    OlapEngine2.prototype.isAttributeDrill = function(hierarchy, drillInfo, axis) {
      var isDrill = false;
      var isAdjacent = this.isAdjacentToMeasure(hierarchy, axis);
      if (!isAdjacent) {
        for (var i = 0; i < this.drilledMembers.length; i++) {
          if (this.drilledMembers[i].name === hierarchy) {
            for (var j = 0; j < this.drilledMembers[i].items.length; j++) {
              var delimiter = this.drilledMembers[i].delimiter;
              var drillItems = this.drilledMembers[i].items[j].split(delimiter);
              var levelName = "";
              for (var k = 0; k < drillItems.length; k++) {
                if (drillInfo[k] && drillInfo[k].uName) {
                  levelName = levelName + (levelName === "" ? "" : this.drilledMembers[i].delimiter) + drillInfo[k].uName;
                }
              }
              if (levelName === this.drilledMembers[i].items[j]) {
                isDrill = true;
                break;
              }
            }
          }
        }
      }
      return isDrill;
    };
    OlapEngine2.prototype.isAdjacentToMeasure = function(hierarchy, axis) {
      var isAdjacent = false;
      var fields = axis === "rows" ? this.rows : this.columns;
      for (var i = 0; i < fields.length; i++) {
        if (fields[i].name === hierarchy && fields[i + 1] && (fields[i + 1].name === "[Measures]" || fields[i + 1].isNamedSet || this.fieldList[fields[i + 1].name] && !this.fieldList[fields[i + 1].name].hasAllMember)) {
          isAdjacent = true;
          break;
        }
      }
      return isAdjacent;
    };
    OlapEngine2.prototype.getDrilledParent = function(childMember, parentLevel, savedCollection) {
      var childlevel = Number(childMember.querySelector("LNum").textContent);
      var currentChild = childMember;
      for (var lvl = childlevel - 1; lvl >= parentLevel; lvl--) {
        var currentParent = this.drilledSets[currentChild.querySelector("PARENT_UNIQUE_NAME").textContent];
        if (currentParent) {
          savedCollection[lvl] = currentParent;
          currentChild = currentParent;
        } else {
          break;
        }
      }
    };
    OlapEngine2.prototype.performRowSorting = function(valCollection, valueSortData) {
      var _a;
      if ((this.enableSort || this.enableValueSorting) && this.tupRowInfo.length > 0) {
        var rowCount = this.pivotValues.length;
        var lvlGrouping = {};
        var measureObjects = {};
        var gSumGrouping = [];
        var gSumFlag = false;
        var withoutAllLastPos = this.tupRowInfo[0].typeCollection.lastIndexOf("1");
        var isDrilled = void 0;
        for (var rPos = this.colDepth; rPos < rowCount; rPos++) {
          var currentCell = this.pivotValues[rPos][0];
          if (this.showSubTotalsAtBottom && currentCell.isSum && currentCell.memberType !== 3) {
            continue;
          }
          var currentTuple = this.tupRowInfo[currentCell.ordinal];
          var uniqueName = currentTuple ? currentTuple.measurePosition === 0 && currentCell.memberType === 3 ? currentTuple.measureName : currentTuple.uNameCollection : "";
          if (uniqueName !== "") {
            if (withoutAllLastPos > -1) {
              uniqueName = this.frameUniqueName(uniqueName, currentCell, currentTuple);
            }
            var level = uniqueName.split(/~~|::\[/).length;
            if (currentCell.memberType === 3 && this.tupRowInfo[0].measurePosition > 0) {
              var parentUName = this.getParentUname(uniqueName, currentCell, true, true);
              if (measureObjects[parentUName]) {
                measureObjects[parentUName].push(currentCell);
              } else {
                measureObjects[parentUName] = [currentCell];
              }
            } else if (lvlGrouping[level]) {
              lvlGrouping[level][uniqueName] = [currentCell];
            } else {
              lvlGrouping[level] = (_a = {}, _a[uniqueName] = [currentCell], _a);
            }
          }
          if (gSumFlag) {
            gSumGrouping.push(currentCell);
          }
          if (currentCell.type === "grand sum") {
            gSumFlag = true;
          }
        }
        var isMeasureAvail = Object.keys(measureObjects).length > 0 && this.tupRowInfo[0].measurePosition > 0;
        var levels = Object.keys(lvlGrouping).map(function(item) {
          return Number(item);
        }).sort(function(a, b) {
          return a > b ? 1 : b > a ? -1 : 0;
        });
        var sortLvlGrouping = {};
        for (var lPos = levels.length - 1; lPos >= 0; lPos--) {
          var parentGrouping = {};
          var objCollection = lvlGrouping[levels[lPos]];
          var objKeys = Object.keys(objCollection);
          for (var oPos = 0; oPos < objKeys.length; oPos++) {
            var parentUName = lPos === 0 ? "parent" : this.getParentUname(objKeys[oPos], objCollection[objKeys[oPos]][0], isMeasureAvail, false);
            if (parentGrouping[parentUName]) {
              parentGrouping[parentUName].push(objCollection[objKeys[oPos]][0]);
            } else {
              parentGrouping[parentUName] = [objCollection[objKeys[oPos]]][0];
            }
          }
          var pKeys = Object.keys(parentGrouping);
          for (var kPos = 0; kPos < pKeys.length; kPos++) {
            parentGrouping[pKeys[kPos]] = this.sortRowHeaders(parentGrouping[pKeys[kPos]], valCollection, valueSortData);
          }
          if (sortLvlGrouping[levels[lPos + 1]]) {
            for (var kPos = 0; kPos < pKeys.length; kPos++) {
              var groupSets = [];
              var axisSets = parentGrouping[pKeys[kPos]];
              for (var aPos = 0; aPos < axisSets.length; aPos++) {
                var tupInfo = this.tupRowInfo[axisSets[aPos].ordinal];
                var uName = tupInfo.measurePosition === 0 && axisSets[aPos].memberType === 3 ? tupInfo.measureName : tupInfo.uNameCollection;
                groupSets.push(axisSets[aPos]);
                if (withoutAllLastPos > -1) {
                  uName = this.frameUniqueName(uName, axisSets[aPos], tupInfo);
                }
                var isMembersIncluded = false;
                if (isMeasureAvail) {
                  var parentUName = this.getParentUname(uName, axisSets[aPos], isMeasureAvail, true);
                  if (measureObjects[parentUName]) {
                    measureObjects[parentUName] = this.sortRowHeaders(measureObjects[parentUName], valCollection, valueSortData);
                    var isLastMeasure = uName.lastIndexOf("::[") === uName.indexOf("::[Measures]");
                    var isFullLength = uName.split("::[").length - 1 === tupInfo.measurePosition;
                    var isLastNotDrilledMember = !tupInfo.drillInfo[tupInfo.measurePosition - 1].isDrilled;
                    var isActualLastMember = tupInfo.members.length > tupInfo.measurePosition + 1;
                    if (isLastMeasure && isFullLength && isLastNotDrilledMember && isActualLastMember) {
                      isMembersIncluded = true;
                      for (var mPos = 0; mPos < measureObjects[parentUName].length; mPos++) {
                        groupSets.push(measureObjects[parentUName][mPos]);
                        var matchParent = uName.substring(0, uName.indexOf("::[Measures]")) + "::" + measureObjects[parentUName][mPos].actualText;
                        if (sortLvlGrouping[levels[lPos + 1]][matchParent]) {
                          groupSets = groupSets.concat(sortLvlGrouping[levels[lPos + 1]][matchParent]);
                        }
                      }
                    } else {
                      isDrilled = this.showSubTotalsAtBottom && groupSets[groupSets.length - 1].isDrilled;
                      groupSets = groupSets.concat(measureObjects[parentUName]);
                    }
                  }
                }
                if (!isMembersIncluded && sortLvlGrouping[levels[lPos + 1]][uName]) {
                  if (this.showSubTotalsAtBottom && groupSets[groupSets.length - 1].memberType === 3 && groupSets[groupSets.length - 1].level > -1 && isDrilled) {
                    var valueColl = [];
                    var sliceIndex = 0;
                    for (var i = groupSets.length - 1; i >= 0; i--) {
                      if (groupSets[i].memberType === 3) {
                        valueColl[valueColl.length] = groupSets[i];
                      } else {
                        valueColl = valueColl.reverse();
                        sliceIndex = i + 1;
                        break;
                      }
                    }
                    groupSets = groupSets.slice(0, sliceIndex).concat(sortLvlGrouping[levels[lPos + 1]][uName]).concat(valueColl);
                  } else {
                    var currentCell = groupSets[groupSets.length - 1];
                    var subTotal = void 0;
                    if (this.showSubTotalsAtBottom && currentCell.isDrilled) {
                      subTotal = PivotUtil.frameHeaderWithKeys(currentCell);
                      subTotal.hasChild = false;
                      subTotal.isDrilled = false;
                      subTotal.isSum = true;
                      subTotal.formattedText = subTotal.formattedText + " Total";
                    }
                    groupSets = groupSets.concat(sortLvlGrouping[levels[lPos + 1]][uName]);
                    if (subTotal) {
                      groupSets[groupSets.length] = subTotal;
                    }
                  }
                }
              }
              parentGrouping[pKeys[kPos]] = groupSets;
            }
          } else if (isMeasureAvail) {
            for (var kPos = 0; kPos < pKeys.length; kPos++) {
              var axisSets = parentGrouping[pKeys[kPos]];
              var groupSets = [];
              for (var aPos = 0; aPos < axisSets.length; aPos++) {
                groupSets.push(axisSets[aPos]);
                var uName = this.tupRowInfo[axisSets[aPos].ordinal].uNameCollection;
                if (withoutAllLastPos > -1) {
                  uName = this.frameUniqueName(uName, axisSets[aPos], this.tupRowInfo[axisSets[aPos].ordinal]);
                }
                var parentUName = this.getParentUname(uName, axisSets[aPos], true, true);
                if (measureObjects[parentUName]) {
                  measureObjects[parentUName] = this.sortRowHeaders(measureObjects[parentUName], valCollection, valueSortData);
                  groupSets = groupSets.concat(measureObjects[parentUName]);
                }
              }
              parentGrouping[pKeys[kPos]] = groupSets;
            }
          }
          sortLvlGrouping[levels[lPos]] = parentGrouping;
        }
        var newPos = 0;
        var totPos = 0;
        var valuePos = 0;
        gSumFlag = false;
        gSumGrouping = this.sortRowHeaders(gSumGrouping, valCollection, valueSortData);
        for (var rPos = this.colDepth; rPos < rowCount; rPos++) {
          if (this.dataSourceSettings.grandTotalsPosition === "Top" && this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showRowGrandTotals && (this.olapValueAxis === "column" && this.colDepth + 1 === rPos || this.olapValueAxis === "row" && this.colDepth + this.dataSourceSettings.values.length + 1 === rPos)) {
            newPos = 0;
            gSumFlag = false;
          }
          var cell = gSumFlag ? gSumGrouping : sortLvlGrouping[levels[0]]["parent"];
          var currPos = this.dataSourceSettings.grandTotalsPosition === "Top" && this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showRowGrandTotals && this.colDepth === rPos ? cell.length : gSumFlag ? newPos - totPos : newPos;
          if (cell[currPos]) {
            this.pivotValues[rPos] = [cell[currPos]];
            this.pivotValues[rPos][0].rowIndex = rPos;
            this.valueContent[valuePos][0] = this.pivotValues[rPos][0];
          }
          newPos++;
          valuePos++;
          if (this.pivotValues[rPos][0].type === "grand sum") {
            gSumFlag = true;
            totPos = newPos;
          }
        }
      }
    };
    OlapEngine2.prototype.performColumnSorting = function(valCollection, valueSortData) {
      if (this.enableSort || this.enableValueSorting) {
        for (var i = 0; i < this.dataSourceSettings.columns.length; i++) {
          var temporary = [];
          var index = 0;
          var grandTotal = [];
          for (var j = 0; j < this.pivotValues.length; j++) {
            var header = this.pivotValues[j];
            var keys = void 0;
            var arrange = {};
            var arrangeHeaders = [];
            var value = 1;
            grandTotal[index] = [];
            temporary[index] = [];
            var k = 1;
            var fieldName = header[k].hierarchy;
            var levelName = header[k].levelUniqueName;
            for (k; k < header.length; k++) {
              if (!header[k].isNamedSet) {
                if (header[k].memberType !== 2 && header[k].hierarchy !== "[Measures]" && header[k].level !== -1) {
                  if (isNullOrUndefined(arrange[header[k].formattedText]) || isNullOrUndefined(this.pivotValues[j - 1])) {
                    if (!arrange[header[k].formattedText]) {
                      arrange[header[k].formattedText] = [];
                    }
                    if (!header[k + 1] || header[k].formattedText !== header[k + 1].formattedText) {
                      arrangeHeaders[arrangeHeaders.length] = header[k];
                    }
                    arrange[header[k].formattedText][header[k].colIndex] = header[k];
                  } else if (arrange[header[k].formattedText] && this.pivotValues[j - 1]) {
                    var prevRowCell = this.pivotValues[j - 1][header[k].colIndex];
                    var prevColValue = Number(Object.keys(arrange[header[k].formattedText])[0]);
                    var prevColIndex = arrange[header[k].formattedText][prevColValue].colIndex;
                    var prevColRowCell = this.pivotValues[j - 1][prevColIndex];
                    if (prevRowCell.formattedText !== prevColRowCell.formattedText) {
                      keys = this.sortColumnHeaders(arrange, arrangeHeaders, this.sortObject[header[k - 1].levelUniqueName] || this.sortObject[header[k].hierarchy], valCollection, valueSortData, fieldName, levelName);
                      temporary[index] = isNullOrUndefined(temporary[index]) ? [] : temporary[index];
                      for (var keyPos = 0; keyPos < keys.length; keyPos++) {
                        var length_1 = Object.keys(arrange[keys[keyPos]]).length;
                        for (var cellPos = 0; cellPos < length_1; cellPos++) {
                          value = temporary[index].length === 0 ? 1 : 0;
                          temporary[index][temporary[index].length + value] = arrange[keys[keyPos]][Number(Object.keys(arrange[keys[keyPos]])[cellPos])];
                        }
                      }
                      arrange = {};
                      arrangeHeaders = [];
                      arrange[header[k].formattedText] = [];
                      arrangeHeaders[arrangeHeaders.length] = header[k];
                      arrange[header[k].formattedText][header[k].colIndex] = header[k];
                    } else {
                      arrange[header[k].formattedText][header[k].colIndex] = header[k];
                    }
                  }
                } else if (Object.keys(arrange).length > 0) {
                  grandTotal[index][grandTotal[index].length + value] = header[k];
                  keys = this.sortColumnHeaders(arrange, arrangeHeaders, this.sortObject[header[k - 1].levelUniqueName] || this.sortObject[header[k].hierarchy], valCollection, valueSortData, fieldName, levelName);
                  temporary[index] = isNullOrUndefined(temporary[index]) ? [] : temporary[index];
                  for (var l = 0; l < keys.length; l++) {
                    var length_2 = Object.keys(arrange[keys[l]]).length;
                    for (var q = 0; q < length_2; q++) {
                      value = temporary[index].length === 0 ? 1 : 0;
                      temporary[index][temporary[index].length + value] = arrange[keys[l]][Number(Object.keys(arrange[keys[l]])[q])];
                    }
                  }
                } else if ((header[k].level === -1 || header[k].level === 0) && Object.keys(arrange).length >= 0 && header[k].hierarchy !== "[Measures]") {
                  grandTotal[index][grandTotal[index].length + value] = header[k];
                }
                if (header[k].level !== -1 && Object.keys(arrange).length === 1 && header[k].hierarchy !== "[Measures]" && !isNullOrUndefined(header[k + 1]) && header[k + 1].level === -1) {
                  var height = Object.keys(arrange[header[k].formattedText]).length;
                  var weight = Object.keys(arrange[header[k].formattedText]);
                  if (height > 1) {
                    for (var hgt = 0; hgt < height; hgt++) {
                      value = grandTotal[index].length === 0 ? 1 : 0;
                      grandTotal[index][grandTotal[index].length + value] = arrange[header[k].formattedText][Number(weight[hgt])];
                    }
                  } else {
                    grandTotal[index][grandTotal[index].length + value] = header[k];
                  }
                }
                if (Object.keys(grandTotal[index]).length > 0) {
                  value = temporary[index].length === 0 ? 1 : 0;
                  var height1 = grandTotal[index].length;
                  if (height1 > 2) {
                    for (var hgt1 = 1; hgt1 < height1; hgt1++) {
                      value = temporary[index].length === 0 ? 1 : 0;
                      temporary[index][temporary[index].length + value] = grandTotal[index][hgt1];
                    }
                  } else {
                    temporary[index][temporary[index].length + value] = grandTotal[index][1] || grandTotal[index][0];
                  }
                  arrange = {};
                  arrangeHeaders = [];
                  grandTotal[index] = [];
                }
              }
            }
            if (Object.keys(arrange).length > 0) {
              grandTotal[index][grandTotal[index].length + value] = header[k];
              var order = this.sortObject[header[k - 1].levelUniqueName] || this.sortObject[header[k - 1].hierarchy];
              keys = this.sortColumnHeaders(arrange, arrangeHeaders, order, valCollection, valueSortData, fieldName, levelName);
              temporary[index] = isNullOrUndefined(temporary[index]) ? [] : temporary[index];
              for (var len = 0; len < keys.length; len++) {
                var leng = Object.keys(arrange[keys[len]]).length;
                for (var q = 0; q < leng; q++) {
                  value = temporary[index].length === 0 ? 1 : 0;
                  temporary[index][temporary[index].length + value] = arrange[keys[len]][Number(Object.keys(arrange[keys[len]])[q])];
                }
              }
            }
            for (var m = 1; m < temporary[index].length; m++) {
              this.pivotValues[index][m] = temporary[index][m];
            }
            for (var n = j; n < this.pivotValues.length; n++) {
              var pElement = extend({}, this.pivotValues[n + 1], null, true);
              var cElement = extend({}, this.pivotValues[n], null, true);
              if (Object.keys(pElement).length === Object.keys(cElement).length && Object.keys(pElement).length > 2) {
                for (var o = 1; o < this.pivotValues[j].length; o++) {
                  if (Object.keys(pElement).length > 0 && cElement[o].colIndex !== pElement[o].colIndex) {
                    this.pivotValues[n + 1][o] = pElement[cElement[o].colIndex];
                  }
                }
                break;
              }
            }
            index++;
            arrange = {};
          }
          for (var i_1 = 0; i_1 < this.pivotValues.length; i_1++) {
            var header = this.pivotValues[i_1];
            for (var j = 1; j < header.length; j++) {
              header[j].colIndex = j;
            }
          }
        }
      }
    };
    OlapEngine2.prototype.frameUniqueName = function(uniqueName, currentCell, currentTuple) {
      var hasLastMeasure = uniqueName.indexOf(currentCell.actualText.toString() + "::[Measures]") > -1;
      uniqueName = uniqueName.substring(0, uniqueName.indexOf(currentCell.actualText.toString())) + currentCell.actualText.toString();
      var measureAvail = uniqueName.split("::[").length <= this.getMeasurePosition(uniqueName, currentTuple.measurePosition);
      uniqueName = uniqueName + (hasLastMeasure || measureAvail ? "::" + currentTuple.measureName : "");
      return uniqueName;
    };
    OlapEngine2.prototype.getMeasurePosition = function(uniqueName, measurePosition) {
      var position = measurePosition;
      var collection = uniqueName.split("::[");
      for (var i = 0; i < collection.length; i++) {
        if (collection[i] && collection[i].indexOf("Measures") > -1) {
          position = i;
          break;
        }
      }
      return position;
    };
    OlapEngine2.prototype.sortRowHeaders = function(headers, valCollection, valueSortData) {
      if (this.enableValueSorting && this.olapValueAxis === "column" && valueSortData.isValueSorting && !isNullOrUndefined(this.valueSortSettings)) {
        var aggreColl = [];
        for (var i = 0; i < headers.length; i++) {
          var header = headers[i];
          var valueElement = valCollection[header.ordinal * valueSortData.columnLength + valueSortData.memberIndex];
          var valueArray = valueElement ? valueElement.getElementsByTagName("Value") : void 0;
          var value = valueElement && valueArray.length > 0 ? Number(valueArray[0].textContent) : 0;
          aggreColl.push({
            "header": header,
            "value": value
          });
        }
        headers = PivotUtil.getSortedValue(aggreColl, this.valueSortSettings.sortOrder);
      } else if (this.enableSort && headers.length > 0 && headers[0].memberType !== 3 && !headers[0].isNamedSet) {
        var sortMembers = [];
        for (var i = 0; i < headers.length; i++) {
          sortMembers[i] = headers[i].actualText;
        }
        var isHeaderSortByDefault = false;
        var fieldName = headers[0].actualText !== "Grand Total" ? headers[0].hierarchy : headers[1].hierarchy;
        var membersInfo = this.fieldList[fieldName] && this.fieldList[fieldName].membersOrder ? this.fieldList[fieldName].membersOrder.slice() : [];
        var sortDetails = {
          fieldName,
          levelName: headers[0].levelUniqueName,
          sortOrder: this.sortObject[headers[0].hierarchy] || this.sortObject[headers[0].levelUniqueName],
          members: membersInfo && membersInfo.length > 0 ? membersInfo : sortMembers,
          IsOrderChanged: false
        };
        if (membersInfo && membersInfo.length > 0) {
          PivotUtil.applyCustomSort(sortDetails, headers, "string", false, true);
        } else {
          if (sortDetails.sortOrder === "Ascending" || sortDetails.sortOrder === void 0) {
            headers.sort(function(a, b) {
              return a.formattedText > b.formattedText ? 1 : b.formattedText > a.formattedText ? -1 : 0;
            });
          } else if (sortDetails.sortOrder === "Descending") {
            headers.sort(function(a, b) {
              return a.formattedText < b.formattedText ? 1 : b.formattedText < a.formattedText ? -1 : 0;
            });
          }
          isHeaderSortByDefault = true;
        }
        if (isHeaderSortByDefault && this.getHeaderSortInfo) {
          var copyOrder = [];
          for (var m = 0, n = 0; m < headers.length; m++) {
            if (headers[m].actualText !== "Grand Total") {
              copyOrder[n++] = headers[m].formattedText;
            }
          }
          sortDetails.members = copyOrder;
        }
        if (this.getHeaderSortInfo) {
          this.getHeaderSortInfo(sortDetails);
        }
        if (sortDetails.IsOrderChanged) {
          PivotUtil.applyCustomSort(sortDetails, headers, "string", true, true);
        }
      }
      return headers;
    };
    OlapEngine2.prototype.sortColumnHeaders = function(arrange, headers, order, valCollection, valueSortData, header, levelName) {
      var keys = Object.keys(arrange);
      if (this.enableValueSorting && this.olapValueAxis === "row" && valueSortData.isValueSorting && !isNullOrUndefined(this.valueSortSettings)) {
        var aggreColl = [];
        for (var i = 0; i < keys.length; i++) {
          var childCollection = arrange[keys[i]];
          var header_1 = this.showSubTotalsAtTop ? childCollection[0] : childCollection[childCollection.length - 1];
          var valueElement = valCollection[valueSortData.memberIndex * valueSortData.columnLength + header_1.ordinal];
          var valueArray = valueElement ? valueElement.getElementsByTagName("Value") : void 0;
          var value = valueElement && valueArray.length > 0 ? Number(valueArray[0].textContent) : 0;
          aggreColl.push({
            "header": header_1,
            "value": value
          });
        }
        headers = PivotUtil.getSortedValue(aggreColl, this.valueSortSettings.sortOrder);
        keys = headers.map(function(header2) {
          return header2.formattedText;
        });
      } else if (this.enableSort) {
        var isHeaderSortByDefault = false;
        var membersInfo = this.fieldList[header] && this.fieldList[header].membersOrder ? this.fieldList[header].membersOrder.slice() : [];
        var sortDetails = {
          fieldName: header,
          levelName,
          sortOrder: order,
          members: membersInfo && membersInfo.length > 0 ? membersInfo : keys,
          IsOrderChanged: false
        };
        if (membersInfo && membersInfo.length > 0) {
          this.applyCustomSort(keys, sortDetails);
        } else {
          if (sortDetails.sortOrder === "Ascending" || sortDetails.sortOrder === void 0) {
            keys.sort(function(a, b) {
              return a > b ? 1 : b > a ? -1 : 0;
            });
          } else if (sortDetails.sortOrder === "Descending") {
            keys.sort(function(a, b) {
              return a < b ? 1 : b < a ? -1 : 0;
            });
          }
          isHeaderSortByDefault = true;
        }
        if (isHeaderSortByDefault && this.getHeaderSortInfo) {
          var copyOrder = [];
          for (var m = 0, n = 0; m < keys.length; m++) {
            if (keys[m] !== "Grand Total") {
              copyOrder[n++] = keys[m];
            }
          }
          sortDetails.members = copyOrder;
        }
        if (this.getHeaderSortInfo) {
          this.getHeaderSortInfo(sortDetails);
        }
        if (sortDetails.IsOrderChanged) {
          this.applyCustomSort(keys, sortDetails, true);
        }
      }
      return keys;
    };
    OlapEngine2.prototype.applyCustomSort = function(headers, sortDetails, hasMembersOrder) {
      var order = [];
      var updatedMembers = [];
      var grandTotal;
      if (sortDetails.IsOrderChanged) {
        order = sortDetails.members;
      } else {
        order = sortDetails.sortOrder === "Ascending" || sortDetails.sortOrder === "None" || sortDetails.sortOrder === void 0 ? [].concat(sortDetails.members) : [].concat(sortDetails.members).reverse();
      }
      if (headers[0] === "Grand Total") {
        grandTotal = headers[0];
        headers.shift();
      }
      for (var i = 0, j = 0; i < headers.length; i++) {
        var sortText = headers[i];
        if (order[j] === sortText) {
          headers.splice(j++, 0, sortText);
          headers.splice(++i, 1);
          if (j < order.length) {
            i = -1;
          } else {
            if (!hasMembersOrder) {
              updatedMembers.splice(--j, 0, sortText);
            }
            break;
          }
        }
        if (i >= 0 && !hasMembersOrder) {
          updatedMembers[i] = headers[i];
        }
      }
      if (!hasMembersOrder) {
        for (var i = updatedMembers.length; i < headers.length; i++) {
          updatedMembers[i] = headers[i];
        }
        if (updatedMembers[updatedMembers.length - 1] === "Grand Total") {
          updatedMembers.pop();
        }
        sortDetails.members = updatedMembers;
      }
      if (grandTotal) {
        headers.splice(0, 0, grandTotal);
      }
      return headers;
    };
    OlapEngine2.prototype.frameSortObject = function() {
      if (this.enableSort) {
        for (var fPos = 0; fPos < this.sortSettings.length; fPos++) {
          this.sortObject[this.sortSettings[fPos].name] = this.sortSettings[fPos].order;
        }
      }
    };
    OlapEngine2.prototype.getParentUname = function(uniqueNameColl, cell, isMeasureAvail, isLastMeasure) {
      var parentString = "";
      if (isMeasureAvail && !isLastMeasure) {
        var tuple = this.tupRowInfo[cell.ordinal];
        var sepPos = [];
        var sepObjects = {};
        for (var i = 0; i < uniqueNameColl.length; i++) {
          if (uniqueNameColl[i] === "~" || uniqueNameColl[i] === ":") {
            sepPos.push(i);
            sepObjects[i] = uniqueNameColl[i] + uniqueNameColl[i];
            i++;
          }
        }
        if (this.getMeasurePosition(uniqueNameColl, tuple.measurePosition) >= uniqueNameColl.split("::[").length - 1) {
          if (sepPos[sepPos.length - 2] > -1) {
            parentString = uniqueNameColl.substring(0, sepPos[sepPos.length - 2]) + sepObjects[sepPos[sepPos.length - 1]] + tuple.measureName;
          } else {
            parentString = "parent";
          }
        } else {
          var lastPosition = uniqueNameColl.lastIndexOf("~~") > uniqueNameColl.lastIndexOf("::[") ? uniqueNameColl.lastIndexOf("~~") : uniqueNameColl.lastIndexOf("::[");
          parentString = lastPosition > -1 ? uniqueNameColl.substring(0, lastPosition) : "parent";
        }
      } else {
        var lastPosition = uniqueNameColl.lastIndexOf("~~") > uniqueNameColl.lastIndexOf("::[") ? uniqueNameColl.lastIndexOf("~~") : uniqueNameColl.lastIndexOf("::[");
        parentString = lastPosition > -1 ? uniqueNameColl.substring(0, lastPosition) : "parent";
      }
      return parentString;
    };
    OlapEngine2.prototype.performColumnSpanning = function() {
      var spanCollection = {};
      var rowPos = this.rowStartPos - 1;
      var colMeasureCount = Object.keys(this.colMeasures).length;
      var measurePosition = this.tupColumnInfo[0] ? this.tupColumnInfo[0].measurePosition : this.measureIndex;
      for (var i = rowPos; i > -1; i--) {
        if (this.pivotValues[i][1].memberType === 3) {
          measurePosition = i;
          break;
        }
      }
      while (rowPos > -1) {
        spanCollection[rowPos] = {};
        var colPos = this.pivotValues[rowPos].length - 1;
        while (colPos > 0) {
          spanCollection[rowPos][colPos] = 1;
          var nextColCell = this.pivotValues[rowPos][colPos + 1];
          var nextRowCell = this.pivotValues[rowPos + 1] && this.rowStartPos - rowPos > 1 ? this.pivotValues[rowPos + 1][colPos] : void 0;
          var currCell = this.pivotValues[rowPos][colPos];
          var colflag = false;
          var rowflag = false;
          var tupColInfo = this.tupColumnInfo[currCell.ordinal];
          var isSubTot = tupColInfo.allStartPos > (tupColInfo.typeCollection[0] === "3" ? 1 : 0);
          var attrDrill = this.checkAttributeDrill(tupColInfo.drillInfo, "columns");
          if (this.showSubTotalsAtTop && currCell.isDrilled && nextColCell && nextColCell.actualText !== currCell.actualText && currCell.level > -1) {
            currCell.ordinal = this.getOrdinal(currCell, this.pivotValues[rowPos + 1]);
          }
          if (nextRowCell && nextColCell && (currCell.memberType === 2 || currCell.level === -1 ? nextColCell.actualText === currCell.actualText : currCell.memberType === 3 && currCell.actualText === nextColCell.actualText || nextColCell.valueSort.levelName === currCell.valueSort.levelName)) {
            if (currCell.memberType === 2) {
              if (isSubTot ? nextColCell.type === "sum" : true) {
                currCell.colSpan = nextColCell.colSpan + 1 > (measurePosition > rowPos ? colMeasureCount : 0) ? 1 : nextColCell.colSpan + 1;
              } else {
                currCell.colSpan = 1;
              }
            } else {
              currCell.colSpan = nextColCell.colSpan + 1;
              currCell.ordinal = nextColCell.ordinal;
            }
            colflag = true;
          }
          if (currCell.memberType === 2) {
            if (isSubTot) {
              if (!attrDrill) {
                currCell.type = "sum";
              }
              currCell.formattedText = "Total";
              currCell.valueSort[currCell.valueSort.levelName.toString()] = 1;
            } else {
              currCell.type = "grand sum";
              currCell.formattedText = "Grand Total";
              if (rowPos < this.measureIndex) {
                var levelName = "Grand Total";
                currCell.valueSort.levelName = levelName;
                currCell.valueSort[levelName.toString()] = 1;
              }
            }
            currCell.hasChild = false;
          } else if (currCell.level === -1) {
            currCell.type = "sum";
            currCell.formattedText = "Total";
            currCell.hasChild = false;
            currCell.valueSort[currCell.valueSort.levelName.toString()] = 1;
          }
          if (nextRowCell) {
            if (currCell.memberType === 2 && nextRowCell.memberType === 2 || nextRowCell.actualText === currCell.actualText) {
              spanCollection[rowPos][colPos] = spanCollection[rowPos + 1] ? spanCollection[rowPos + 1][colPos] + 1 : 1;
              if (rowPos === 0 || currCell.memberType === 1 && currCell.level > -1 && nextRowCell.memberType === 1 && nextRowCell.level === -1) {
                currCell.rowSpan = currCell.isDrilled && (this.fieldList[currCell.hierarchy] && this.fieldList[currCell.hierarchy].isHierarchy ? currCell.hasChild : true) ? 1 : spanCollection[rowPos + 1][colPos] + 1;
                nextRowCell.rowSpan = nextRowCell.isDrilled && (this.fieldList[nextRowCell.hierarchy] && this.fieldList[nextRowCell.hierarchy].isHierarchy ? nextRowCell.hasChild : true) && nextRowCell.level === -1 ? spanCollection[rowPos + 1][colPos] : nextRowCell.rowSpan;
              } else {
                if (currCell.memberType === 3) {
                  currCell.rowSpan = 1;
                } else {
                  currCell.rowSpan = -1;
                }
              }
              rowflag = true;
            } else if (currCell.isDrilled && (this.fieldList[currCell.hierarchy] && this.fieldList[currCell.hierarchy].isHierarchy ? currCell.hasChild : true) && currCell.level === -1 && nextRowCell.memberType === 2) {
              spanCollection[rowPos][colPos] = spanCollection[rowPos + 1] ? spanCollection[rowPos + 1][colPos] + 1 : 1;
              currCell.rowSpan = -1;
              rowflag = true;
            } else {
              currCell.rowSpan = rowPos === 0 ? spanCollection[rowPos][colPos] : -1;
              nextRowCell.rowSpan = nextRowCell.level > -1 && !(nextRowCell.isDrilled && (this.fieldList[nextRowCell.hierarchy] && this.fieldList[nextRowCell.hierarchy].isHierarchy ? nextRowCell.hasChild : true)) || currCell.memberType !== 2 && nextRowCell.memberType === 2 ? spanCollection[rowPos + 1][colPos] : 1;
            }
          } else {
            currCell.rowSpan = currCell.level > -1 || this.rowStartPos === 1 ? spanCollection[rowPos][colPos] : -1;
          }
          if (!colflag) {
            currCell.colSpan = 1;
          }
          if (!rowflag) {
            spanCollection[rowPos][colPos] = 1;
          }
          colPos--;
        }
        rowPos--;
      }
    };
    OlapEngine2.prototype.getOrdinal = function(currCell, nextRow) {
      var newOrdinal = 0;
      for (var cellIndex = currCell.colIndex; cellIndex > 0; cellIndex--) {
        if (nextRow[cellIndex].level === -1) {
          newOrdinal = nextRow[cellIndex].ordinal;
          break;
        }
      }
      return newOrdinal;
    };
    OlapEngine2.prototype.frameValues = function(valCollection, colLength) {
      var rowStartPos = this.colDepth;
      var rowEndPos = this.pivotValues.length;
      var startRowOrdinal = 0;
      if (this.customArgs.action === "down") {
        var keys = Object.keys(this.onDemandDrillEngine);
        rowStartPos = Number(keys[0]);
        rowEndPos = Number(keys[keys.length - 1]) + 1;
        startRowOrdinal = this.onDemandDrillEngine[rowStartPos][0].ordinal;
      }
      for (var rowPos = rowStartPos; rowPos < rowEndPos; rowPos++) {
        var columns = this.pivotValues[rowPos];
        var rowOrdinal = columns[0].ordinal;
        for (var colPos = 1; colPos < this.pivotValues[0].length; colPos++) {
          if (this.pivotValues[this.colDepth - 1][colPos]) {
            var colOrdinal = this.pivotValues[this.colDepth - 1][colPos].ordinal;
            var lastColCell = this.pivotValues[this.colDepth - 1][colPos];
            var measure = columns[0].memberType === 3 ? columns[0].actualText.toString() : this.tupColumnInfo[lastColCell.ordinal] && this.tupColumnInfo[lastColCell.ordinal].measure ? this.tupColumnInfo[lastColCell.ordinal].measure.querySelector("UName").textContent : columns[0].actualText;
            if (columns[0].type === "header") {
              columns[colPos] = {
                axis: "value",
                actualText: this.getUniqueName(measure),
                formattedText: "",
                value: 0,
                colIndex: colPos,
                rowIndex: rowPos
              };
            } else {
              var formattedText = void 0;
              var value = "0";
              var measureName = this.getUniqueName(measure);
              var showTotals = true;
              var attrDrill = this.fieldList[columns[0].hierarchy] && this.fieldList[columns[0].hierarchy].isHierarchy ? columns[0].isDrilled : true;
              if (this.tupRowInfo[rowOrdinal]) {
                showTotals = this.tupRowInfo[rowOrdinal].showTotals;
              } else {
                var grandTotalFlag = this.dataSourceSettings.rows.length === 0 || this.dataSourceSettings.rows.length === 1 && this.dataSourceSettings.rows[0].name === "[Measures]";
                showTotals = this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showRowGrandTotals || grandTotalFlag;
              }
              var valElement = valCollection[(rowOrdinal - startRowOrdinal) * colLength + colOrdinal];
              formattedText = this.showSubTotalsAtBottom && columns[0].isDrilled ? "" : !showTotals && attrDrill ? "" : !isNullOrUndefined(valElement) && !isNullOrUndefined(valElement.querySelector("FmtValue")) ? valElement.querySelector("FmtValue").textContent : this.emptyCellTextContent;
              value = !showTotals && attrDrill ? "0" : !isNullOrUndefined(valElement) && !isNullOrUndefined(valElement.querySelector("Value")) ? valElement.querySelector("Value").textContent : null;
              formattedText = this.showSubTotalsAtBottom && columns[0].isDrilled ? "" : showTotals && !isNullOrUndefined(value) ? this.getFormattedValue(Number(value), measureName, formattedText !== "" ? formattedText : value) : formattedText;
              var isSum = (this.tupColumnInfo[colOrdinal] ? this.tupColumnInfo[colOrdinal].allCount > 0 || this.tupColumnInfo[colOrdinal].drillStartPos > -1 : true) || (this.tupRowInfo[rowOrdinal] ? this.tupRowInfo[rowOrdinal].allCount > 0 || this.tupRowInfo[rowOrdinal].drillStartPos > -1 : true);
              var isGrand = (this.tupRowInfo[rowOrdinal] ? this.tupRowInfo[rowOrdinal].measurePosition === 0 ? this.tupRowInfo[rowOrdinal].allStartPos === 1 : this.tupRowInfo[rowOrdinal].allStartPos === 0 : false) || (this.tupColumnInfo[colOrdinal] ? this.tupColumnInfo[colOrdinal].measurePosition === 0 ? this.tupColumnInfo[colOrdinal].allStartPos === 1 : this.tupColumnInfo[colOrdinal].allStartPos === 0 : false);
              columns[colPos] = {
                axis: "value",
                actualText: measureName,
                formattedText,
                colOrdinal,
                rowOrdinal,
                columnHeaders: this.tupColumnInfo[colOrdinal] ? this.tupColumnInfo[colOrdinal].captionCollection : "",
                rowHeaders: this.tupRowInfo[rowOrdinal] ? this.tupRowInfo[rowOrdinal].captionCollection : "",
                value: !isNullOrUndefined(value) ? Number(value) : null,
                colIndex: colPos,
                rowIndex: rowPos,
                isSum,
                isGrandSum: isGrand
              };
            }
            this.valueContent[rowPos - this.rowStartPos][colPos] = columns[colPos];
          }
        }
      }
    };
    OlapEngine2.prototype.getFormattedValue = function(value, fieldName, formattedText) {
      var formattedValue = formattedText;
      if (this.formatFields[fieldName] && !isNullOrUndefined(value)) {
        var formatField = this.formatFields[fieldName].properties ? this.formatFields[fieldName].properties : this.formatFields[fieldName];
        var formatObj = extend({}, formatField, null, true);
        delete formatObj.name;
        if (!formatObj.minimumSignificantDigits && formatObj.minimumSignificantDigits < 1) {
          delete formatObj.minimumSignificantDigits;
        }
        if (!formatObj.maximumSignificantDigits && formatObj.maximumSignificantDigits < 1) {
          delete formatObj.maximumSignificantDigits;
        }
        if (formatObj.type) {
          formattedValue = this.globalize.formatDate(new Date(value.toString()), formatObj);
        } else {
          delete formatObj.type;
          formattedValue = this.globalize.formatNumber(value, formatObj);
        }
      }
      return formattedValue;
    };
    OlapEngine2.prototype.getMeasureInfo = function() {
      this.olapValueAxis = void 0;
      this.olapRowValueIndex = void 0;
      var mAxis = "column";
      var mIndex;
      var values = [];
      for (var _i = 0, _a = this.values; _i < _a.length; _i++) {
        var field = _a[_i];
        values[values.length] = field.isCalculatedField ? this.fieldList[field.name].tag : field.name;
      }
      if (values.length > 0) {
        if (this.isMeasureAvail) {
          var isAvail = false;
          var fieldCount = 0;
          for (var i = 0, cnt = this.rows.length; i < cnt; i++) {
            if (this.rows[i].name.toLowerCase() === "[measures]") {
              mAxis = "row";
              mIndex = i;
              isAvail = true;
              fieldCount = this.dataSourceSettings.rows.length;
              this.olapRowValueIndex = mIndex;
              break;
            }
          }
          if (!isAvail) {
            for (var i = 0, cnt = this.columns.length; i < cnt; i++) {
              if (this.columns[i].name.toLowerCase() === "[measures]") {
                mAxis = "column";
                mIndex = i;
                isAvail = true;
                fieldCount = this.dataSourceSettings.columns.length;
                break;
              }
            }
          }
          this.olapValueAxis = mAxis;
          this.measurePosition = mIndex;
          this.measureIndex = mIndex === fieldCount - 1 ? -1 : mIndex;
        } else {
          mAxis = this.valueAxis;
          mIndex = mAxis === "row" ? this.rows.length - 1 : this.columns.length - 1;
        }
        return {
          measureAxis: mAxis,
          measureIndex: mIndex,
          valueInfo: values
        };
      } else {
        return {
          measureAxis: mAxis,
          measureIndex: -1,
          valueInfo: []
        };
      }
    };
    OlapEngine2.prototype.frameMeasureOrder = function(measureInfo, axis, tuples, vTuples, cLen, valuesCount) {
      var orderedTuples = [];
      var orderedVTuples = [];
      var orderedIndex = [];
      var levels = {};
      var cLevels = [];
      var measureAxis = measureInfo.measureAxis;
      var measureIndex = measureInfo.measureIndex;
      var values = measureInfo.valueInfo;
      if (measureAxis === axis && values.length > 0) {
        var levelCollection = {};
        var uniqueLevels = [];
        for (var j = 0, lnt = tuples.length; j < lnt; j++) {
          var node = tuples[j];
          var members = [].slice.call(node.querySelectorAll("Member"));
          var level = "";
          var cLevel = "";
          var i = 0;
          while (i < members.length) {
            level = level + (level !== "" ? "~~" : "") + members[i].querySelector("UName").textContent;
            if (i === measureIndex && measureIndex === 0) {
              cLevel = level;
            } else if (i === measureIndex - 1) {
              cLevel = level;
            }
            i++;
          }
          if (levelCollection[cLevel]) {
            levelCollection[cLevel][levelCollection[cLevel].length] = level;
          } else {
            levelCollection[cLevel] = [level];
            uniqueLevels[uniqueLevels.length] = cLevel;
          }
          levels[level] = {
            index: j,
            node
          };
          cLevels[cLevels.length] = level;
        }
        if (cLevels.length > 0) {
          if (uniqueLevels.length > 0) {
            if (measureIndex === 0) {
              for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
                var name_1 = values_1[_i];
                for (var _a = 0, uniqueLevels_1 = uniqueLevels; _a < uniqueLevels_1.length; _a++) {
                  var key = uniqueLevels_1[_a];
                  if (key === name_1) {
                    for (var _b = 0, _c = levelCollection[key]; _b < _c.length; _b++) {
                      var level = _c[_b];
                      orderedIndex[orderedIndex.length] = levels[level].index;
                      orderedTuples[orderedTuples.length] = levels[level].node;
                    }
                  }
                }
              }
            } else {
              for (var _d = 0, uniqueLevels_2 = uniqueLevels; _d < uniqueLevels_2.length; _d++) {
                var key = uniqueLevels_2[_d];
                for (var _e = 0, values_2 = values; _e < values_2.length; _e++) {
                  var name_2 = values_2[_e];
                  for (var _f = 0, _g = levelCollection[key]; _f < _g.length; _f++) {
                    var level = _g[_f];
                    var levelInfo = level.split("~~");
                    if (levelInfo[measureIndex] === name_2) {
                      orderedIndex[orderedIndex.length] = levels[level].index;
                      orderedTuples[orderedTuples.length] = levels[level].node;
                    }
                  }
                }
              }
            }
          }
        }
        var clonedValTuple = [];
        if (vTuples.length > 0) {
          var valueIndex = [];
          var vOrdinalIndex = [];
          var vOrdinalIndexPos = 0;
          var len = 0;
          var cRow = 0;
          for (var j = 0, cnt = valuesCount; j < cnt; j++) {
            if (len > cLen - 1) {
              cRow++;
              len = 0;
              if (!valueIndex[cRow]) {
                valueIndex[cRow] = [];
              }
              valueIndex[cRow][len] = j;
              len++;
            } else {
              if (!valueIndex[cRow]) {
                valueIndex[cRow] = [];
              }
              valueIndex[cRow][len] = j;
              len++;
            }
            var vTupleOrdinal = void 0;
            if (vTuples[vOrdinalIndexPos]) {
              vTupleOrdinal = this.olapVirtualization ? j : Number(vTuples[vOrdinalIndexPos].getAttribute("CellOrdinal"));
            } else {
              vOrdinalIndexPos++;
            }
            if (vTupleOrdinal === j) {
              vOrdinalIndex[j] = vTupleOrdinal;
              clonedValTuple[vTupleOrdinal] = vTuples[vOrdinalIndexPos];
              vOrdinalIndexPos++;
            }
          }
          vTuples = clonedValTuple;
          if (measureAxis === "column") {
            if (valueIndex.length > 0 && valueIndex[0].length === orderedIndex.length) {
              for (var i = 0, cnt = orderedIndex.length; i < cnt; i++) {
                var j = 0;
                while (j < valueIndex.length) {
                  var index = j * cLen + i;
                  if (!isNullOrUndefined(valueIndex[j]) && !isNullOrUndefined(orderedIndex[i])) {
                    var ordinalValue = vOrdinalIndex[index] ? vOrdinalIndex[index].toString() : index.toString();
                    var tuple = vTuples[Number(valueIndex[j][orderedIndex[i]])];
                    if (tuple) {
                      tuple.setAttribute("CellOrdinal", ordinalValue.toString());
                      orderedVTuples[index] = tuple;
                    }
                  }
                  j++;
                }
              }
            }
          } else {
            if (valueIndex.length === orderedIndex.length) {
              for (var i = 0, cnt = orderedIndex.length; i < cnt; i++) {
                var j = 0;
                while (j < valueIndex[orderedIndex[i]].length) {
                  var index = i * cLen + j;
                  var ordinalValue = vOrdinalIndex[index] ? vOrdinalIndex[index].toString() : index.toString();
                  var tuple = vTuples[Number(valueIndex[orderedIndex[i]][j])];
                  if (tuple) {
                    tuple.setAttribute("CellOrdinal", ordinalValue.toString());
                    orderedVTuples[orderedVTuples.length] = tuple;
                  }
                  j++;
                }
              }
            }
          }
        }
        return {
          orderedHeaderTuples: orderedTuples,
          orderedValueTuples: orderedVTuples
        };
      } else {
        return {
          orderedHeaderTuples: tuples,
          orderedValueTuples: vTuples
        };
      }
    };
    OlapEngine2.prototype.getDrilledSets = function(uNameCollection, currentCell, fieldPos, axis) {
      var levels = [];
      var memberName = currentCell.actualText.toString();
      var tupCollection = axis === "row" ? this.tupRowInfo : this.tupColumnInfo;
      var currTuple = tupCollection[currentCell.ordinal];
      var measurePos = tupCollection[0].typeCollection.indexOf("3");
      var allStartPos = measurePos === 0 ? 1 : 0;
      var tupPos = 0;
      var isWithoutAllMember = tupCollection[0].typeCollection[fieldPos] === "1";
      while (tupPos < tupCollection.length) {
        if (isNullOrUndefined(tupCollection[tupPos].allStartPos) || tupCollection[tupPos].allStartPos > allStartPos) {
          levels[levels.length] = tupCollection[tupPos].uNameCollection;
        }
        tupPos++;
      }
      var memberArray = uNameCollection.split("::[").map(function(item2) {
        return item2[0] === "[" ? item2 : "[" + item2;
      });
      var joinArray = [];
      for (var memPos = 0; memPos <= fieldPos; memPos++) {
        if (memberArray[memPos]) {
          if ((isWithoutAllMember || this.isPaging) && memPos === fieldPos) {
            var splitLevels = memberArray[memPos].split("~~");
            var drillLevel = splitLevels.indexOf(memberName);
            var cropLevels = [];
            for (var lPos = 0; lPos <= drillLevel; lPos++) {
              cropLevels.push(splitLevels[lPos]);
            }
            joinArray[joinArray.length] = cropLevels.length > 0 ? cropLevels.join("~~") : memberArray[memPos];
          } else {
            joinArray[joinArray.length] = memberArray[memPos];
          }
        }
      }
      uNameCollection = joinArray.join("::");
      var childSets = [];
      var memberObj = {};
      for (var _i = 0, levels_1 = levels; _i < levels_1.length; _i++) {
        var item = levels_1[_i];
        if (item.indexOf(uNameCollection) === 0) {
          childSets.push(item);
          if (this.isPaging) {
            var drillField = item.split("::[")[fieldPos];
            drillField = drillField[0] === "[" ? drillField : "[" + drillField;
            var drillFieldSep = drillField.split("~~");
            for (var fPos = drillFieldSep.indexOf(memberName); fPos < drillFieldSep.length; fPos++) {
              memberObj[drillFieldSep[fPos]] = drillFieldSep[fPos];
            }
          }
        }
      }
      if (this.isPaging) {
        var fieldSep = currTuple.uNameCollection.split("::[").map(function(item2) {
          return item2[0] === "[" ? item2 : "[" + item2;
        });
        var cropArray = [];
        for (var fPos = 0; fPos < fieldSep.length; fPos++) {
          if (fPos !== fieldPos) {
            cropArray[fPos] = fieldSep[fPos];
          }
        }
        var drillFieldSep = Object.keys(memberObj);
        for (var fPos = 0; fPos < drillFieldSep.length; fPos++) {
          cropArray[fieldPos] = drillFieldSep[fPos];
          childSets.push(cropArray.join("::"));
        }
      }
      var drillSets = {};
      for (var _a = 0, childSets_1 = childSets; _a < childSets_1.length; _a++) {
        var level = childSets_1[_a];
        var fields = level.split("::[").map(function(item2) {
          return item2[0] === "[" ? item2 : "[" + item2;
        });
        var set = "";
        for (var pos = 0; pos <= fieldPos; pos++) {
          var field = fields[pos];
          if (field) {
            var members = field.split("~~");
            set = set + (set !== "" ? "~~" : "") + members[members.length - 1];
          }
        }
        drillSets[set] = set;
      }
      return drillSets;
    };
    OlapEngine2.prototype.updateDrilledInfo = function(dataSourceSettings) {
      this.dataSourceSettings = dataSourceSettings;
      this.drilledMembers = dataSourceSettings.drilledMembers ? this.updateDrilledItems(dataSourceSettings.drilledMembers) : [];
      this.generateGridData(dataSourceSettings);
    };
    OlapEngine2.prototype.updateCalcFields = function(dataSourceSettings, lastcalcInfo) {
      this.dataSourceSettings = dataSourceSettings;
      this.calculatedFieldSettings = dataSourceSettings.calculatedFieldSettings ? dataSourceSettings.calculatedFieldSettings : [];
      this.getAxisFields();
      this.updateFieldlist();
      this.loadCalculatedMemberElements(this.calculatedFieldSettings);
      if (this.dataFields[lastcalcInfo.name]) {
        this.generateGridData(dataSourceSettings);
      } else {
        MDXQuery.getCellSets(dataSourceSettings, this, true, void 0, true);
      }
    };
    OlapEngine2.prototype.onSort = function(dataSourceSettings, isValueSort) {
      this.dataSourceSettings = dataSourceSettings;
      if (!isValueSort) {
        this.sortSettings = dataSourceSettings.sortSettings ? dataSourceSettings.sortSettings : [];
        this.getAxisFields();
        this.frameSortObject();
        this.updateFieldlist();
      }
      if (this.xmlaCellSet.length > 0 && this.xmlDoc) {
        this.generateEngine(this.xmlDoc, this.request, this.customArgs);
      } else {
        this.generateGridData(dataSourceSettings);
      }
    };
    OlapEngine2.prototype.updateFieldlist = function(isInit) {
      var i = 0;
      while (i < this.savedFieldListData.length) {
        var fieldName = this.savedFieldListData[i].id;
        var parentID = this.savedFieldListData[i].pid;
        if (this.savedFieldList[fieldName]) {
          var sortOrder = this.enableSort ? this.sortObject[fieldName] ? this.sortObject[fieldName] : "Ascending" : "None";
          this.savedFieldList[fieldName].isSelected = false;
          this.savedFieldList[fieldName].isExcelFilter = false;
          this.savedFieldList[fieldName].sort = sortOrder;
          this.savedFieldList[fieldName].allowDragAndDrop = true;
          this.savedFieldList[fieldName].showFilterIcon = true;
          this.savedFieldList[fieldName].showSortIcon = true;
          this.savedFieldList[fieldName].showEditIcon = true;
          this.savedFieldList[fieldName].showRemoveIcon = true;
          this.savedFieldList[fieldName].showValueTypeIcon = true;
          this.savedFieldList[fieldName].showSubTotals = true;
          this.savedFieldListData[i].sort = sortOrder;
          this.savedFieldListData[i].allowDragAndDrop = true;
          this.savedFieldListData[i].showFilterIcon = true;
          this.savedFieldListData[i].showSortIcon = true;
          this.savedFieldListData[i].showEditIcon = true;
          this.savedFieldListData[i].showRemoveIcon = true;
          this.savedFieldListData[i].showValueTypeIcon = true;
          this.savedFieldListData[i].showSubTotals = true;
          if (isInit) {
            this.savedFieldList[fieldName].filter = [];
            this.savedFieldList[fieldName].actualFilter = [];
          }
        }
        if (this.dataFields[fieldName] && this.savedFieldList[fieldName] && this.selectedItems.indexOf(fieldName) > -1) {
          this.savedFieldList[fieldName].isSelected = true;
          this.savedFieldList[fieldName].allowDragAndDrop = this.dataFields[fieldName] ? this.dataFields[fieldName].allowDragAndDrop : true;
          this.savedFieldList[fieldName].showFilterIcon = this.dataFields[fieldName] ? this.dataFields[fieldName].showFilterIcon : true;
          this.savedFieldList[fieldName].showSortIcon = this.dataFields[fieldName] ? this.dataFields[fieldName].showSortIcon : true;
          this.savedFieldList[fieldName].showEditIcon = this.dataFields[fieldName] ? this.dataFields[fieldName].showEditIcon : true;
          this.savedFieldList[fieldName].showRemoveIcon = this.dataFields[fieldName] ? this.dataFields[fieldName].showRemoveIcon : true;
          this.savedFieldList[fieldName].showValueTypeIcon = this.dataFields[fieldName] ? this.dataFields[fieldName].showValueTypeIcon : true;
          this.savedFieldList[fieldName].showSubTotals = this.dataFields[fieldName] ? this.dataFields[fieldName].showSubTotals : true;
          this.savedFieldListData[i].isSelected = true;
          this.savedFieldListData[i].allowDragAndDrop = this.dataFields[fieldName] ? this.dataFields[fieldName].allowDragAndDrop : true;
          this.savedFieldListData[i].showFilterIcon = this.dataFields[fieldName] ? this.dataFields[fieldName].showFilterIcon : true;
          this.savedFieldListData[i].showSortIcon = this.dataFields[fieldName] ? this.dataFields[fieldName].showSortIcon : true;
          this.savedFieldListData[i].showEditIcon = this.dataFields[fieldName] ? this.dataFields[fieldName].showEditIcon : true;
          this.savedFieldListData[i].showRemoveIcon = this.dataFields[fieldName] ? this.dataFields[fieldName].showRemoveIcon : true;
          this.savedFieldListData[i].showValueTypeIcon = this.dataFields[fieldName] ? this.dataFields[fieldName].showValueTypeIcon : true;
          this.savedFieldListData[i].showSubTotals = this.dataFields[fieldName] ? this.dataFields[fieldName].showSubTotals : true;
        } else {
          if (this.dataFields[parentID] && this.savedFieldList[parentID] && this.selectedItems.indexOf(parentID) > -1) {
            this.savedFieldListData[i].isSelected = true;
          } else {
            this.savedFieldListData[i].isSelected = false;
          }
        }
        if (this.savedFieldList[fieldName] && this.savedFieldList[fieldName].isCalculatedField || fieldName.toLowerCase() === "[calculated members].[_0]") {
          var isAvail = false;
          for (var _i = 0, _a = this.calculatedFieldSettings; _i < _a.length; _i++) {
            var field = _a[_i];
            if (fieldName === field.name) {
              var expression = field.formula;
              var formatString = field.formatString;
              this.savedFieldListData[i].formula = expression;
              this.savedFieldListData[i].formatString = formatString;
              this.savedFieldListData[i].parentHierarchy = expression.toLowerCase().indexOf("measure") > -1 ? void 0 : field.hierarchyUniqueName;
              this.savedFieldList[fieldName].formula = expression;
              this.savedFieldList[fieldName].formatString = formatString;
              this.savedFieldList[fieldName].parentHierarchy = this.savedFieldListData[i].parentHierarchy;
              isAvail = true;
            }
          }
          if (!isAvail && fieldName.toLowerCase() !== "[calculated members].[_0]" || fieldName.toLowerCase() === "[calculated members].[_0]" && this.calculatedFieldSettings.length === 0) {
            this.savedFieldListData.splice(i, 1);
            i--;
            if (this.savedFieldList[fieldName]) {
              delete this.savedFieldList[fieldName];
            }
          }
        }
        i++;
      }
      this.fieldList = this.savedFieldList;
      this.fieldListData = this.savedFieldListData;
    };
    OlapEngine2.prototype.updateFieldlistData = function(name, isSelect) {
      for (var _i = 0, _a = this.fieldListData; _i < _a.length; _i++) {
        var item = _a[_i];
        if (item.id === name) {
          item.isSelected = isSelect ? true : false;
          break;
        }
      }
    };
    OlapEngine2.prototype.getFormattedFields = function(formats) {
      this.formatFields = {};
      var cnt = formats.length;
      while (cnt--) {
        this.formatFields[formats[cnt].name] = formats[cnt];
      }
    };
    OlapEngine2.prototype.getCubes = function(dataSourceSettings) {
      var connectionString = this.getConnectionInfo(dataSourceSettings.url, dataSourceSettings.localeIdentifier.toString());
      var soapMessage = '<Envelope xmlns="http://schemas.xmlsoap.org/soap/envelope/"><Header/><Body><Discover xmlns="urn:schemas-microsoft-com:xml-analysis"><RequestType>MDSCHEMA_CUBES</RequestType><Restrictions><RestrictionList><CATALOG_NAME>' + dataSourceSettings.catalog + "</CATALOG_NAME></RestrictionList></Restrictions><Properties><PropertyList><Catalog>" + dataSourceSettings.catalog + "</Catalog> <LocaleIdentifier>" + connectionString.LCID + "</LocaleIdentifier>" + (dataSourceSettings.roles ? "<Roles>" + dataSourceSettings.roles + "</Roles>" : "") + "</PropertyList></Properties></Discover></Body></Envelope>";
      this.doAjaxPost("POST", connectionString.url, soapMessage, this.validateCube.bind(this), {
        dataSourceSettings,
        action: "getCubes"
      });
      if (this.errorInfo) {
        throw this.errorInfo;
      }
    };
    OlapEngine2.prototype.validateCube = function(xmlDoc, request, customArgs) {
      var fields = [].slice.call(xmlDoc.querySelectorAll("row"));
      var isCubeExist = false;
      for (var _i = 0, fields_1 = fields; _i < fields_1.length; _i++) {
        var field = fields_1[_i];
        var cubeName = field.querySelector("CUBE_NAME").textContent;
        if (cubeName === customArgs.dataSourceSettings.cube) {
          isCubeExist = true;
          break;
        }
      }
      if (!isCubeExist && fields.length > 0) {
        this.errorInfo = "Invalid cube name " + this.dataSourceSettings.cube;
      }
    };
    OlapEngine2.prototype.getFieldList = function(dataSourceSettings) {
      var args = {
        catalog: dataSourceSettings.catalog,
        cube: dataSourceSettings.cube,
        url: dataSourceSettings.url,
        LCID: dataSourceSettings.localeIdentifier.toString(),
        request: "MDSCHEMA_HIERARCHIES",
        roles: dataSourceSettings.roles
      };
      this.getTreeData(args, this.getFieldListItems.bind(this), {
        dataSourceSettings,
        action: "loadFieldElements"
      });
    };
    OlapEngine2.prototype.getTreeData = function(args, successMethod, customArgs) {
      var connectionString = this.getConnectionInfo(args.url, args.LCID);
      var soapMessage = '<Envelope xmlns="http://schemas.xmlsoap.org/soap/envelope/"><Header/><Body><Discover xmlns="urn:schemas-microsoft-com:xml-analysis"><RequestType>' + args.request + "</RequestType><Restrictions><RestrictionList><CATALOG_NAME>" + args.catalog + "</CATALOG_NAME><CUBE_NAME>" + args.cube + "</CUBE_NAME></RestrictionList></Restrictions><Properties><PropertyList><Catalog>" + args.catalog + "</Catalog> <LocaleIdentifier>" + connectionString.LCID + "</LocaleIdentifier>" + (args.roles ? "<Roles>" + args.roles + "</Roles>" : "") + "</PropertyList></Properties></Discover></Body></Envelope>";
      this.doAjaxPost("POST", connectionString.url, soapMessage, successMethod, customArgs);
      if (this.errorInfo) {
        throw this.errorInfo;
      }
    };
    OlapEngine2.prototype.getAxisFields = function() {
      this.rows = this.dataSourceSettings.rows ? this.dataSourceSettings.rows : [];
      this.columns = this.dataSourceSettings.columns ? this.dataSourceSettings.columns : [];
      this.filters = this.dataSourceSettings.filters ? this.dataSourceSettings.filters : [];
      this.values = this.dataSourceSettings.values ? this.dataSourceSettings.values : [];
      var dataFields = extend([], this.rows, null, true);
      dataFields = dataFields.concat(this.columns, this.values, this.filters);
      var len = dataFields.length;
      while (len--) {
        this.dataFields[dataFields[len].name] = dataFields[len];
        if (dataFields[len].name.toLowerCase() === "[measures]") {
          this.isMeasureAvail = true;
        } else {
          this.selectedItems.push(dataFields[len].name);
        }
      }
      this.mappingFields = {};
      if (this.dataSourceSettings.fieldMapping) {
        for (var _i = 0, _a = this.dataSourceSettings.fieldMapping; _i < _a.length; _i++) {
          var field = _a[_i];
          this.mappingFields[field.name] = field;
        }
      }
      if (!this.isMeasureAvail && this.values.length > 0) {
        var measureField = {
          name: "[Measures]",
          caption: "Measures",
          showRemoveIcon: true,
          allowDragAndDrop: true
        };
        if (this.valueAxis === "row") {
          this.rows.push(measureField);
        } else {
          this.columns.push(measureField);
        }
        this.isMeasureAvail = true;
      }
    };
    OlapEngine2.prototype.getAggregateType = function(fieldName, aggregateType) {
      var type;
      switch (aggregateType) {
        case "1":
          type = "Sum";
          break;
        case "2":
          type = "Count";
          break;
        case "3":
          type = "Min";
          break;
        case "4":
          type = "Max";
          break;
        case "5":
          type = "Avg";
          break;
        case "8":
          type = "DistinctCount";
          break;
        case "127":
          type = "CalculatedField";
          break;
        default:
          type = void 0;
          break;
      }
      if (type) {
        return type;
      } else {
        return void 0;
      }
    };
    OlapEngine2.prototype.getUniqueName = function(name) {
      var uName = name;
      for (var _i = 0, _a = this.calculatedFieldSettings; _i < _a.length; _i++) {
        var item = _a[_i];
        var expression = item.formula;
        var prefixName = expression.toLowerCase().indexOf("measure") > -1 ? "[Measures]." : item.hierarchyUniqueName + ".";
        var uniqueName = prefixName + "[" + item.name + "]";
        if (name === uniqueName) {
          uName = item.name;
          break;
        }
      }
      return uName;
    };
    OlapEngine2.prototype.updateFilterItems = function(filterItems) {
      var dataFields = extend([], this.rows, null, true);
      dataFields = dataFields.concat(this.columns);
      for (var _i = 0, filterItems_1 = filterItems; _i < filterItems_1.length; _i++) {
        var filter = filterItems_1[_i];
        if (filter.type === "Include" && this.allowMemberFilter && this.fieldList[filter.name]) {
          var members = this.fieldList[filter.name].members;
          var isMembersAvail = members && Object.keys(members).length > 0;
          this.fieldList[filter.name].actualFilter = filter.items.slice();
          var selectedElements = extend([], filter.items, null, true);
          if (isMembersAvail) {
            var i = 0;
            while (i < selectedElements.length) {
              var parentNodes = [];
              parentNodes = this.getParentNode(selectedElements[i], members, parentNodes);
              for (var _a = 0, parentNodes_1 = parentNodes; _a < parentNodes_1.length; _a++) {
                var node = parentNodes_1[_a];
                var index = PivotUtil.inArray(node, filter.items);
                if (index !== -1) {
                  filter.items.splice(index, 1);
                }
              }
              i++;
            }
          }
          var currentItems = [];
          for (var _b = 0, _c = filter.items; _b < _c.length; _b++) {
            var selectedElement = _c[_b];
            var filterCaption = void 0;
            if (!isMembersAvail && filter.items.length === 1) {
              this.getMembers(this.dataSourceSettings, filter.name, void 0, void 0, void 0, filter.items[0]);
              filterCaption = this.fieldList[filter.name].actualFilter[0];
            }
            currentItems.push(selectedElement);
            if (isMembersAvail) {
              this.fieldList[filter.name].filter.push(members[selectedElement].caption);
            } else {
              this.fieldList[filter.name].filter.push(filterCaption ? filterCaption : selectedElement);
            }
          }
          this.filterMembers[filter.name] = currentItems;
          this.fieldList[filter.name].isExcelFilter = false;
        } else if ((this.allowValueFilter || this.allowLabelFilter) && ["Date", "Label", "Number", "Value"].indexOf(filter.type) !== -1) {
          for (var _d = 0, dataFields_1 = dataFields; _d < dataFields_1.length; _d++) {
            var item = dataFields_1[_d];
            if (item.name === filter.name) {
              var filterMembers = this.filterMembers[filter.name];
              if (filterMembers && typeof filterMembers[0] === "object" && filterMembers[0].type === filter.type) {
                filterMembers[filterMembers.length] = filter;
              } else {
                this.filterMembers[filter.name] = [filter];
              }
              this.fieldList[filter.name].isExcelFilter = true;
              break;
            }
          }
        }
      }
    };
    OlapEngine2.prototype.getParentNode = function(name, members, items) {
      if (members[name].parent && name !== members[name].parent) {
        var parentItem = members[name].parent;
        items.push(parentItem);
        this.getParentNode(parentItem, members, items);
      }
      return items;
    };
    OlapEngine2.prototype.updateDrilledItems = function(drilledMembers) {
      var drilledItems = [];
      var dataFields = extend([], this.rows, null, true);
      dataFields = dataFields.concat(this.columns);
      for (var _i = 0, drilledMembers_1 = drilledMembers; _i < drilledMembers_1.length; _i++) {
        var item = drilledMembers_1[_i];
        for (var _a = 0, dataFields_2 = dataFields; _a < dataFields_2.length; _a++) {
          var field = dataFields_2[_a];
          if (item.name === field.name) {
            drilledItems.push(item);
            break;
          }
        }
      }
      return drilledItems;
    };
    OlapEngine2.prototype.getDrillThroughData = function(pivotValue, maxRows) {
      var column = this.tupColumnInfo[pivotValue.colOrdinal] && this.tupColumnInfo[pivotValue.colOrdinal].uNameCollection && this.tupColumnInfo[pivotValue.colOrdinal].uNameCollection !== "" ? this.tupColumnInfo[pivotValue.colOrdinal].uNameCollection.split("::[").map(function(item) {
        return item[0] === "[" ? item : "[" + item;
      }) : [];
      var row = this.tupRowInfo[pivotValue.rowOrdinal] && this.tupRowInfo[pivotValue.rowOrdinal].uNameCollection && this.tupRowInfo[pivotValue.rowOrdinal].uNameCollection !== "" ? this.tupRowInfo[pivotValue.rowOrdinal].uNameCollection.split("::[").map(function(item) {
        return item[0] === "[" ? item : "[" + item;
      }) : [];
      var filters;
      var filteritems = [];
      var filterQuery = "";
      for (var i = 0; i < this.filters.length; i++) {
        filters = this.filterMembers[this.filters[i].name];
        if (filters) {
          for (var j = 0; j < filters.length; j++) {
            filterQuery = filterQuery + filters[j];
            filterQuery = j < filters.length - 1 ? filterQuery + "," : filterQuery + "";
          }
          filteritems[i] = filterQuery;
          filterQuery = "";
        }
      }
      for (var i = 0; i < filteritems.length; i++) {
        filterQuery = filterQuery === "" ? "{" + filteritems[i] + "}" : filterQuery + ",{" + filteritems[i] + "}";
      }
      var columnQuery = "";
      var rowQuery = "";
      for (var i = 0; i < column.length; i++) {
        columnQuery = (columnQuery.length > 0 ? columnQuery + "," : "") + (column[i].split("~~").length > 1 ? column[i].split("~~")[column[i].split("~~").length - 1] : column[i]);
      }
      for (var i = 0; i < row.length; i++) {
        rowQuery = (rowQuery.length > 0 ? rowQuery + "," : "") + (row[i].split("~~").length > 1 ? row[i].split("~~")[row[i].split("~~").length - 1] : row[i]);
      }
      var drillQuery = "DRILLTHROUGH MAXROWS " + maxRows + " Select(" + (columnQuery.length > 0 ? columnQuery : "") + (columnQuery.length > 0 && rowQuery.length > 0 ? "," : "") + (rowQuery.length > 0 ? rowQuery : "") + ") on 0 from " + (filterQuery === "" ? "[" + this.dataSourceSettings.cube + "]" : "(SELECT (" + filterQuery + ") ON COLUMNS FROM [" + this.dataSourceSettings.cube + "])");
      drillQuery = drillQuery.replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/'/g, "&apos;").replace(/"/g, "&quot;");
      var xmla = this.getSoapMsg(this.dataSourceSettings, drillQuery);
      var connectionString = this.getConnectionInfo(this.dataSourceSettings.url, this.dataSourceSettings.localeIdentifier);
      this.doAjaxPost("POST", connectionString.url, xmla, this.drillThroughSuccess.bind(this), {
        dataSourceSettings: this.dataSourceSettings,
        action: "drillThrough"
      });
      if (this.errorInfo) {
        throw this.errorInfo;
      }
    };
    OlapEngine2.prototype.drillThroughSuccess = function(xmlDoc) {
      var tag = [].slice.call(xmlDoc.querySelectorAll("row"));
      var gridJSON = "";
      if (tag.length > 0) {
        var json = [];
        var i = 0;
        while (i < tag.length) {
          var child = [].slice.call(tag[i].children);
          var j = 0;
          while (j < child.length) {
            json.push('"' + child[j].tagName + '":"' + child[j].textContent + '"');
            j++;
          }
          i++;
        }
        var value = json[0];
        var k = 0;
        while (k < json.length) {
          if (Object.keys(JSON.parse("[{" + json[k] + "}]")[0])[0] === Object.keys(JSON.parse("[{" + value + "}]")[0])[0]) {
            gridJSON += gridJSON === "" ? "[{" + json[k] : "}, {" + json[k];
            k++;
            continue;
          }
          gridJSON += "," + json[k];
          k++;
        }
        gridJSON += "}]";
      } else {
        var tag_1 = [].slice.call(xmlDoc.querySelectorAll("faultstring"));
        var i = 0;
        while (i < tag_1.length) {
          gridJSON += tag_1[i].textContent;
          i++;
        }
      }
      this.gridJSON = gridJSON;
    };
    OlapEngine2.prototype.getFilterMembers = function(dataSourceSettings, fieldName, levelCount, isSearchFilter, loadLevelMember) {
      var levels = this.fieldList[fieldName].levels;
      var cLevel = this.fieldList[fieldName].levelCount;
      var filterQuery;
      if (loadLevelMember) {
        filterQuery = "Descendants({" + levels[cLevel].id + "}, " + levels[levelCount - 1].id + ", " + (levelCount - cLevel === 1 ? "SELF)" : "SELF_AND_BEFORE)");
      } else {
        filterQuery = fieldName + ", Descendants({" + levels[0].id + "}, " + levels[levelCount - 1].id + ", SELF_AND_BEFORE)";
      }
      this.fieldList[fieldName].levelCount = levelCount;
      if (!isSearchFilter) {
        this.getMembers(dataSourceSettings, fieldName, false, filterQuery, loadLevelMember);
      }
      return filterQuery;
    };
    OlapEngine2.prototype.getMembers = function(dataSourceSettings, fieldName, isAllFilterData, filterParentQuery, loadLevelMember, filterItemName) {
      var dimProp = "DIMENSION PROPERTIES PARENT_UNIQUE_NAME, HIERARCHY_UNIQUE_NAME, CHILDREN_CARDINALITY, MEMBER_TYPE, MEMBER_VALUE";
      var mdxQuery;
      var hasAllMember = this.fieldList[fieldName].hasAllMember;
      var hierarchy = (hasAllMember ? fieldName : fieldName + ".LEVELS(0)").replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/'/g, "&apos;").replace(/"/g, "&quot;");
      if (!isAllFilterData && !filterItemName) {
        mdxQuery = "SELECT ({" + (filterParentQuery ? filterParentQuery : hasAllMember ? hierarchy + ", " + hierarchy + ".CHILDREN" : hierarchy + ".ALLMEMBERS") + "})" + dimProp + " ON 0 FROM [" + dataSourceSettings.cube + "]";
      } else if (filterItemName) {
        filterItemName = filterItemName.replace(/&/g, "&amp;");
        mdxQuery = "SELECT {" + filterItemName + "} ON 0 FROM [" + dataSourceSettings.cube + "] WHERE {}";
      } else {
        mdxQuery = "SELECT ({" + hierarchy + ".ALLMEMBERS})" + dimProp + " ON 0 FROM [" + dataSourceSettings.cube + "]";
      }
      var xmla = this.getSoapMsg(dataSourceSettings, mdxQuery);
      var connectionString = this.getConnectionInfo(dataSourceSettings.url, dataSourceSettings.localeIdentifier);
      if (!loadLevelMember) {
        this.fieldList[fieldName].filterMembers = [];
        this.fieldList[fieldName].childMembers = [];
        this.fieldList[fieldName].searchMembers = [];
        this.fieldList[fieldName].members = {};
        this.fieldList[fieldName].currrentMembers = {};
      }
      this.doAjaxPost("POST", connectionString.url, xmla, filterItemName ? this.getOlapFilterText.bind(this) : this.generateMembers.bind(this), {
        dataSourceSettings,
        fieldName,
        loadLevelMembers: loadLevelMember,
        action: "fetchMembers"
      });
      if (this.errorInfo) {
        throw this.errorInfo;
      }
    };
    OlapEngine2.prototype.getOlapFilterText = function(xmlDoc, request, customArgs) {
      var fields = [].slice.call(xmlDoc.querySelectorAll('Axis[name="Axis0"] Tuple'));
      if (fields.length > 0 && this.fieldList[customArgs.fieldName] && fields[fields.length - 1].getElementsByTagName("Caption") && fields[fields.length - 1].getElementsByTagName("Caption")[0]) {
        this.fieldList[customArgs.fieldName].actualFilter[0] = fields[fields.length - 1].getElementsByTagName("Caption")[0].textContent;
      }
    };
    OlapEngine2.prototype.getChildMembers = function(dataSourceSettings, memberUQName, fieldName) {
      var dimProp = "DIMENSION PROPERTIES PARENT_UNIQUE_NAME, HIERARCHY_UNIQUE_NAME, CHILDREN_CARDINALITY, MEMBER_TYPE, MEMBER_VALUE";
      var mdxQuery = "SELECT ({" + memberUQName.replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/'/g, "&apos;").replace(/"/g, "&quot;") + ".CHILDREN})" + dimProp + " ON 0 FROM [" + dataSourceSettings.cube + "]";
      var xmla = this.getSoapMsg(dataSourceSettings, mdxQuery);
      var connectionString = this.getConnectionInfo(dataSourceSettings.url, dataSourceSettings.localeIdentifier);
      this.doAjaxPost("POST", connectionString.url, xmla, this.generateMembers.bind(this), {
        dataSourceSettings,
        fieldName,
        action: "fetchChildMembers"
      });
      if (this.errorInfo) {
        throw this.errorInfo;
      }
    };
    OlapEngine2.prototype.getCalcChildMembers = function(dataSourceSettings, memberUQName) {
      this.calcChildMembers = [];
      var dimProp = "DIMENSION PROPERTIES PARENT_UNIQUE_NAME, HIERARCHY_UNIQUE_NAME, CHILDREN_CARDINALITY, MEMBER_TYPE, MEMBER_VALUE";
      var mdxQuery = "SELECT ({" + memberUQName.replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/'/g, "&apos;").replace(/"/g, "&quot;") + ".MEMBERS})" + dimProp + " ON 0 FROM [" + dataSourceSettings.cube + "]";
      var connectionString = this.getConnectionInfo(dataSourceSettings.url, dataSourceSettings.localeIdentifier);
      var xmla = this.getSoapMsg(dataSourceSettings, mdxQuery);
      this.doAjaxPost("POST", connectionString.url, xmla, this.generateMembers.bind(this), {
        dataSourceSettings,
        action: "fetchCalcChildMembers"
      });
      if (this.errorInfo) {
        throw this.errorInfo;
      }
    };
    OlapEngine2.prototype.getSearchMembers = function(dataSourceSettings, fieldName, searchString, maxNodeLimit, isAllFilterData, levelCount) {
      this.fieldList[fieldName].searchMembers = [];
      this.fieldList[fieldName].currrentMembers = {};
      if (searchString !== "") {
        var dimProp = "DIMENSION PROPERTIES PARENT_UNIQUE_NAME, HIERARCHY_UNIQUE_NAME, CHILDREN_CARDINALITY, MEMBER_TYPE, MEMBER_VALUE";
        var hierarchy = fieldName.replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/'/g, "&apos;").replace(/"/g, "&quot;");
        var mdxQuery = "WITH SET [SearchMembersSet] AS &#39;FILTER(" + (isAllFilterData ? hierarchy + ".ALLMEMBERS, " : "{" + (levelCount > 1 ? this.getFilterMembers(dataSourceSettings, fieldName, levelCount, true) : hierarchy + ", " + hierarchy + ".CHILDREN") + "},") + "(INSTR(1, " + hierarchy + '.CurrentMember.member_caption, "' + searchString + '") > 0))&#39;SET [SearchParentsSet] AS &#39;GENERATE([SearchMembersSet], ASCENDANTS([SearchMembersSet].Current))&#39;SET [SearchSet] AS &#39;HIERARCHIZE(DISTINCT({[SearchMembersSet], [SearchParentsSet]}))&#39;SELECT SUBSET([SearchSet], 0, ' + maxNodeLimit + ")" + dimProp + " ON 0 FROM [" + dataSourceSettings.cube + "]";
        var xmla = this.getSoapMsg(dataSourceSettings, mdxQuery);
        var connectionString = this.getConnectionInfo(dataSourceSettings.url, dataSourceSettings.localeIdentifier);
        this.doAjaxPost("POST", connectionString.url, xmla, this.generateMembers.bind(this), {
          dataSourceSettings,
          fieldName,
          action: "fetchSearchMembers"
        });
        if (this.errorInfo) {
          throw this.errorInfo;
        }
      } else {
        return;
      }
    };
    OlapEngine2.prototype.generateMembers = function(xmlDoc, request, customArgs) {
      var fields = [].slice.call(xmlDoc.querySelectorAll('Axis[name="Axis0"] Tuple'));
      var fieldName = customArgs.fieldName;
      var allMember;
      var filterMembers = {};
      for (var _i = 0, fields_2 = fields; _i < fields_2.length; _i++) {
        var field = fields_2[_i];
        var member = field.querySelector("Member");
        var memberType = member.querySelector("MEMBER_TYPE").textContent;
        var memberUqName = member.querySelector("UName").textContent;
        var caption = member.querySelector("Caption").textContent;
        var parentUqName = member.querySelector("PARENT_UNIQUE_NAME") ? member.querySelector("PARENT_UNIQUE_NAME").textContent : "";
        var nodeAttr = {
          "data-fieldName": fieldName,
          "data-memberId": memberUqName
        };
        if (parentUqName === "" && memberType === "1") {
          filterMembers = {
            hasChildren: field.querySelector("CHILDREN_CARDINALITY") ? field.querySelector("CHILDREN_CARDINALITY").textContent !== "0" ? true : false : false,
            isSelected: false,
            id: memberUqName,
            tag: memberUqName,
            name: caption,
            caption,
            htmlAttributes: nodeAttr
          };
          if (customArgs.action === "fetchMembers" || customArgs.action === "fetchChildMembers") {
            this.fieldList[fieldName].members[memberUqName] = {
              name: memberUqName,
              caption,
              parent: void 0,
              isNodeExpand: false,
              isSelected: false
            };
            this.fieldList[fieldName].filterMembers.push(filterMembers);
            this.fieldList[fieldName].childMembers.push(filterMembers);
          } else if (customArgs.action === "fetchSearchMembers") {
            this.fieldList[fieldName].currrentMembers[memberUqName] = {
              name: memberUqName,
              caption,
              parent: void 0,
              isNodeExpand: false,
              isSelected: false
            };
            this.fieldList[fieldName].searchMembers.push(filterMembers);
            filterMembers.expanded = true;
          } else {
            this.calcChildMembers.push(filterMembers);
          }
        } else if (parentUqName !== "" && memberType === "1") {
          if (parentUqName === allMember && memberType === "1") {
            filterMembers = {
              hasChildren: field.querySelector("CHILDREN_CARDINALITY") ? field.querySelector("CHILDREN_CARDINALITY").textContent !== "0" ? true : false : false,
              id: memberUqName,
              name: caption,
              isSelected: false,
              caption,
              htmlAttributes: nodeAttr,
              tag: memberUqName
            };
            if (customArgs.action === "fetchMembers" || customArgs.action === "fetchChildMembers") {
              this.fieldList[fieldName].filterMembers.push(filterMembers);
              this.fieldList[fieldName].childMembers.push(filterMembers);
              this.fieldList[fieldName].members[memberUqName] = {
                name: memberUqName,
                caption,
                parent: void 0,
                isNodeExpand: false,
                isSelected: false
              };
            } else if (customArgs.action === "fetchSearchMembers") {
              filterMembers.expanded = true;
              this.fieldList[fieldName].searchMembers.push(filterMembers);
              this.fieldList[fieldName].currrentMembers[memberUqName] = {
                name: memberUqName,
                caption,
                parent: void 0,
                isNodeExpand: false,
                isSelected: false
              };
            } else {
              this.calcChildMembers.push(filterMembers);
            }
          } else {
            if (customArgs.action === "fetchMembers" && this.fieldList[fieldName].members[memberUqName]) {
              continue;
            }
            var nodeSelect = customArgs.loadLevelMembers ? this.fieldList[fieldName].members[parentUqName].isSelected : false;
            filterMembers = {
              hasChildren: field.querySelector("CHILDREN_CARDINALITY") ? field.querySelector("CHILDREN_CARDINALITY").textContent !== "0" ? true : false : false,
              htmlAttributes: nodeAttr,
              isSelected: false,
              id: memberUqName,
              pid: parentUqName,
              name: caption,
              caption,
              tag: memberUqName
            };
            if (customArgs.action === "fetchMembers" || customArgs.action === "fetchChildMembers") {
              this.fieldList[fieldName].isHierarchy = false;
              this.fieldList[fieldName].filterMembers.push(filterMembers);
              this.fieldList[fieldName].childMembers.push(filterMembers);
              this.fieldList[fieldName].members[memberUqName] = {
                name: memberUqName,
                caption,
                parent: parentUqName,
                isNodeExpand: false,
                isSelected: nodeSelect
              };
            } else if (customArgs.action === "fetchSearchMembers") {
              this.fieldList[fieldName].searchMembers.push(filterMembers);
              filterMembers.expanded = true;
              this.fieldList[fieldName].currrentMembers[memberUqName] = {
                name: memberUqName,
                caption,
                parent: parentUqName,
                isNodeExpand: false,
                isSelected: false
              };
            } else {
              this.calcChildMembers.push(filterMembers);
            }
          }
        } else if (memberType === "2") {
          allMember = memberUqName;
        }
      }
    };
    OlapEngine2.prototype.getFieldListItems = function(xmlDoc, request, customArgs) {
      var fieldDate = {};
      var hierarchyElements = [];
      var fields = [].slice.call(xmlDoc.querySelectorAll("row"));
      for (var _i = 0, fields_3 = fields; _i < fields_3.length; _i++) {
        var field = fields_3[_i];
        var isAllMemberAvail = [].slice.call(field.querySelectorAll("ALL_MEMBER")).length > 0;
        var dimensionName = field.querySelector("DIMENSION_UNIQUE_NAME").textContent;
        var hierarchyName = field.querySelector("HIERARCHY_UNIQUE_NAME").textContent;
        var isSameDim = dimensionName === hierarchyName && dimensionName.toLowerCase() !== "[measures]" && hierarchyName.toLowerCase() !== "[measures]";
        hierarchyElements.push({
          pid: this.isMondrian || isSameDim ? dimensionName + "~#^Dim" : dimensionName,
          id: hierarchyName,
          name: field.querySelector("HIERARCHY_CAPTION").textContent,
          caption: field.querySelector("HIERARCHY_CAPTION").textContent,
          tag: hierarchyName,
          hasAllMember: isAllMemberAvail,
          allMember: isAllMemberAvail ? field.querySelectorAll("ALL_MEMBER")[0].textContent : void 0,
          // aggregateType: this.getAggregateType(field.querySelector('HIERARCHY_UNIQUE_NAME').textContent),
          type: "string"
        });
      }
      fieldDate = {
        hierarchy: hierarchyElements,
        hierarchySuccess: xmlDoc,
        measures: []
      };
      this.fieldListObj = fieldDate;
      var args = {
        catalog: customArgs.dataSourceSettings.catalog,
        cube: customArgs.dataSourceSettings.cube,
        url: customArgs.dataSourceSettings.url,
        LCID: customArgs.dataSourceSettings.localeIdentifier.toString(),
        request: "MDSCHEMA_DIMENSIONS",
        roles: customArgs.dataSourceSettings.roles
      };
      this.getTreeData(args, this.loadDimensionElements.bind(this), customArgs);
    };
    OlapEngine2.prototype.loadCalculatedMemberElements = function(calcMembers) {
      if (calcMembers.length > 0) {
        var fieldListElements = this.fieldListData;
        var calcObj = {
          hasChildren: true,
          isSelected: false,
          id: "[Calculated Members].[_0]",
          name: "[Calculated Members].[_0]",
          caption: "Calculated Members",
          spriteCssClass: "e-calcMemberGroupCDB " + ICON,
          tag: "[Calculated Members].[_0]",
          //aggregateType: this.getAggregateType(dimensionName),
          type: "string"
        };
        if (fieldListElements.length > 0 && fieldListElements[0].id.toLowerCase() === "[measures]") {
          fieldListElements.splice(0, 0, calcObj);
        }
        for (var _i = 0, calcMembers_1 = calcMembers; _i < calcMembers_1.length; _i++) {
          var field = calcMembers_1[_i];
          if (!this.fieldList[field.name]) {
            var expression = field.formula;
            var prefixName = expression.toLowerCase().indexOf("measure") > -1 ? "[Measures]." : field.hierarchyUniqueName + ".";
            var uniqueName = prefixName + "[" + field.name + "]";
            var caption = this.dataFields[field.name] && this.dataFields[field.name].caption ? this.dataFields[field.name].caption : this.mappingFields[field.name] && this.mappingFields[field.name].caption ? this.mappingFields[field.name].caption : field.name;
            var formatString = field.formatString;
            var calcField = {
              hasChildren: false,
              isSelected: false,
              id: field.name,
              pid: "[Calculated Members].[_0]",
              name: field.name,
              caption,
              spriteCssClass: "e-calc-member " + (expression.toLowerCase().indexOf("measure") > -1 ? "e-calc-measure-icon" : "e-calc-dimension-icon") + " " + ICON,
              tag: uniqueName,
              formula: expression,
              formatString,
              aggregateType: void 0,
              type: "CalculatedField",
              filter: [],
              dateMember: [],
              sort: "Ascending",
              actualFilter: [],
              filterMembers: [],
              childMembers: [],
              searchMembers: [],
              members: {},
              currrentMembers: {},
              isHierarchy: true,
              isExcelFilter: false,
              isCalculatedField: true,
              allowDragAndDrop: this.dataFields[field.name] ? this.dataFields[field.name].allowDragAndDrop : this.mappingFields[field.name] ? this.mappingFields[field.name].allowDragAndDrop : true,
              showFilterIcon: this.dataFields[field.name] ? this.dataFields[field.name].showFilterIcon : this.mappingFields[field.name] ? this.mappingFields[field.name].showFilterIcon : true,
              showSortIcon: this.dataFields[field.name] ? this.dataFields[field.name].showSortIcon : this.mappingFields[field.name] ? this.mappingFields[field.name].showSortIcon : true,
              showEditIcon: this.dataFields[field.name] ? this.dataFields[field.name].showEditIcon : this.mappingFields[field.name] ? this.mappingFields[field.name].showEditIcon : true,
              showRemoveIcon: this.dataFields[field.name] ? this.dataFields[field.name].showRemoveIcon : this.mappingFields[field.name] ? this.mappingFields[field.name].showRemoveIcon : true,
              showValueTypeIcon: this.dataFields[field.name] ? this.dataFields[field.name].showValueTypeIcon : this.mappingFields[field.name] ? this.mappingFields[field.name].showValueTypeIcon : true,
              showSubTotals: this.dataFields[field.name] ? this.dataFields[field.name].showSubTotals : this.mappingFields[field.name] ? this.mappingFields[field.name].showSubTotals : true,
              fieldType: expression.toLowerCase().indexOf("measure") > -1 ? "Measure" : "Dimension",
              parentHierarchy: expression.toLowerCase().indexOf("measure") > -1 ? void 0 : field.hierarchyUniqueName
            };
            fieldListElements.push(calcField);
            this.fieldList[calcField.id] = calcField;
            this.updateMembersOrder(field.name);
          }
        }
      } else {
        return;
      }
    };
    OlapEngine2.prototype.loadDimensionElements = function(xmlDoc, request, customArgs) {
      var hierarchyElements = [];
      var fields = [].slice.call(xmlDoc.querySelectorAll("row"));
      var measure = {};
      for (var _i = 0, fields_4 = fields; _i < fields_4.length; _i++) {
        var field = fields_4[_i];
        var dimensionName = field.querySelector("DIMENSION_UNIQUE_NAME").textContent;
        var defaultHierarchy = field.querySelector("DEFAULT_HIERARCHY").textContent;
        var dimensionCaption = field.querySelector("DIMENSION_CAPTION").textContent;
        var isSameDim = dimensionName === defaultHierarchy;
        if (dimensionName.toLowerCase().indexOf("[measure") >= 0) {
          measure = {
            hasChildren: true,
            isSelected: false,
            id: dimensionName,
            name: dimensionName,
            caption: dimensionCaption,
            spriteCssClass: dimensionName.toLowerCase() === "[measures]" ? "e-measureGroupCDB-icon " + ICON : "e-dimensionCDB-icon " + ICON,
            tag: dimensionName,
            // aggregateType: this.getAggregateType(dimensionName),
            type: "string"
          };
        } else if (isNullOrUndefined(fields[0].querySelector("HIERARCHY_CAPTION"))) {
          hierarchyElements.push({
            hasChildren: true,
            isSelected: false,
            id: this.isMondrian || isSameDim ? dimensionName + "~#^Dim" : dimensionName,
            name: dimensionName,
            caption: dimensionCaption,
            spriteCssClass: "e-dimensionCDB-icon " + ICON,
            tag: dimensionName,
            defaultHierarchy: field.querySelector("DEFAULT_HIERARCHY").textContent,
            // aggregateType: this.getAggregateType(dimensionName),
            type: "string"
          });
        }
      }
      hierarchyElements.splice(0, 0, measure);
      this.fieldListData = hierarchyElements;
      var args = {
        catalog: customArgs.dataSourceSettings.catalog,
        cube: customArgs.dataSourceSettings.cube,
        url: customArgs.dataSourceSettings.url,
        LCID: customArgs.dataSourceSettings.localeIdentifier.toString(),
        request: "MDSCHEMA_SETS",
        roles: customArgs.dataSourceSettings.roles
      };
      this.getTreeData(args, this.loadNamedSetElements.bind(this), customArgs);
    };
    OlapEngine2.prototype.loadNamedSetElements = function(xmlDoc, request, customArgs) {
      var dataFields = extend([], this.rows, null, true);
      dataFields = dataFields.concat(this.columns, this.filters);
      var dimensionElements = this.fieldListData;
      var reportElement = [];
      for (var _i = 0, dataFields_3 = dataFields; _i < dataFields_3.length; _i++) {
        var field = dataFields_3[_i];
        reportElement.push(field.name);
      }
      var measureGroupItems = [];
      var fields = [].slice.call(xmlDoc.querySelectorAll("row"));
      for (var _a = 0, fields_5 = fields; _a < fields_5.length; _a++) {
        var field = fields_5[_a];
        if (!(measureGroupItems.indexOf(field.querySelector("DIMENSIONS").textContent.split(".")[0]) >= 0)) {
          dimensionElements.push({
            hasChildren: true,
            isSelected: false,
            pid: field.querySelector("DIMENSIONS").textContent.split(".")[0],
            id: field.querySelector("SET_DISPLAY_FOLDER").textContent + "_" + field.querySelector("DIMENSIONS").textContent.split(".")[0],
            name: field.querySelector("SET_DISPLAY_FOLDER").textContent,
            spriteCssClass: "e-folderCDB-icon " + ICON + " namedSets",
            caption: field.querySelector("SET_DISPLAY_FOLDER").textContent,
            // aggregateType: this.getAggregateType(field.querySelector('SET_DISPLAY_FOLDER').textContent + '_' + field.querySelector('DIMENSIONS').textContent.split('.')[0]),
            type: "string"
          });
          measureGroupItems.push(field.querySelector("DIMENSIONS").textContent.split(".")[0]);
        }
        var id = "[" + field.querySelector("SET_NAME").textContent.trim() + "]";
        var fieldObj = {
          hasChildren: true,
          isNamedSets: true,
          isSelected: reportElement.indexOf("[" + field.querySelector("SET_NAME").textContent + "]") >= 0,
          pid: field.querySelector("SET_DISPLAY_FOLDER").textContent + "_" + field.querySelector("DIMENSIONS").textContent.split(".")[0],
          id,
          name: field.querySelector("SET_CAPTION").textContent,
          caption: this.dataFields[id] && this.dataFields[id].caption ? this.dataFields[id].caption : this.mappingFields[id] && this.mappingFields[id].caption ? this.mappingFields[id].caption : field.querySelector("SET_CAPTION").textContent,
          spriteCssClass: "e-namedSetCDB-icon " + ICON,
          tag: field.querySelector("EXPRESSION").textContent,
          // aggregateType: this.getAggregateType(id),
          type: "string",
          filter: [],
          dateMember: [],
          // sort: 'Ascending',
          actualFilter: [],
          filterMembers: [],
          childMembers: [],
          searchMembers: [],
          members: {},
          currrentMembers: {},
          isHierarchy: true,
          isExcelFilter: false,
          allowDragAndDrop: this.dataFields[id] ? this.dataFields[id].allowDragAndDrop : this.mappingFields[id] ? this.mappingFields[id].allowDragAndDrop : true,
          showFilterIcon: this.dataFields[id] ? this.dataFields[id].showFilterIcon : this.mappingFields[id] ? this.mappingFields[id].showFilterIcon : true,
          showSortIcon: this.dataFields[id] ? this.dataFields[id].showSortIcon : this.mappingFields[id] ? this.mappingFields[id].showSortIcon : true,
          showEditIcon: this.dataFields[id] ? this.dataFields[id].showEditIcon : this.mappingFields[id] ? this.mappingFields[id].showEditIcon : true,
          showRemoveIcon: this.dataFields[id] ? this.dataFields[id].showRemoveIcon : this.mappingFields[id] ? this.mappingFields[id].showRemoveIcon : true,
          showValueTypeIcon: this.dataFields[id] ? this.dataFields[id].showValueTypeIcon : this.mappingFields[id] ? this.mappingFields[id].showValueTypeIcon : true,
          showSubTotals: this.dataFields[id] ? this.dataFields[id].showSubTotals : this.mappingFields[id] ? this.mappingFields[id].showSubTotals : true
        };
        dimensionElements.push(fieldObj);
        this.fieldList[id] = fieldObj;
        this.updateMembersOrder(id);
      }
      customArgs.hierarchy = this.fieldListData;
      customArgs.hierarchySuccess = this.fieldListObj.hierarchySuccess;
      this.loadHierarchyElements(customArgs);
    };
    OlapEngine2.prototype.loadHierarchyElements = function(customArgs) {
      var data = customArgs.hierarchySuccess;
      var dimensionElements = customArgs.hierarchy;
      var dataFields = extend([], this.rows, null, true);
      dataFields = dataFields.concat(this.columns, this.filters);
      var reportElement = [];
      for (var _i = 0, dataFields_4 = dataFields; _i < dataFields_4.length; _i++) {
        var field = dataFields_4[_i];
        reportElement.push(field.name);
      }
      var fields = [].slice.call(data.querySelectorAll("row"));
      for (var _a = 0, fields_6 = fields; _a < fields_6.length; _a++) {
        var field = fields_6[_a];
        var dimensionName = field.querySelector("DIMENSION_UNIQUE_NAME").textContent;
        var hierarchyName = field.querySelector("HIERARCHY_UNIQUE_NAME").textContent;
        var isAllMemberAvail = [].slice.call(field.querySelectorAll("ALL_MEMBER")).length > 0;
        var allMember = void 0;
        if (isAllMemberAvail) {
          var stringCollection = field.querySelectorAll("ALL_MEMBER")[0].textContent.replace(/[&[\]']+/g, "").split(".");
          allMember = stringCollection[stringCollection.length - 1].trim();
        } else {
          allMember = void 0;
        }
        var hierarchyFolderName = field.querySelector("HIERARCHY_DISPLAY_FOLDER") ? field.querySelector("HIERARCHY_DISPLAY_FOLDER").textContent : "";
        var curElement = [];
        for (var _b = 0, dimensionElements_1 = dimensionElements; _b < dimensionElements_1.length; _b++) {
          var item = dimensionElements_1[_b];
          if (item.tag === dimensionName) {
            curElement.push(item);
          }
        }
        if (curElement.length > 0) {
          var isSameDim = dimensionName === hierarchyName && dimensionName.toLowerCase() !== "[measures]" && hierarchyName.toLowerCase() !== "[measures]";
          if (dimensionName.toLowerCase() !== "[measures]" && hierarchyName.toLowerCase() !== "[measures]") {
            var parentID = dimensionName + (this.isMondrian || isSameDim ? "~#^Dim" : "");
            if (hierarchyFolderName !== "") {
              var folderName = dimensionName + (this.isMondrian || isSameDim ? "~#^Dim" : "") + "_" + hierarchyFolderName;
              var curParentElement = [];
              for (var _c = 0, dimensionElements_2 = dimensionElements; _c < dimensionElements_2.length; _c++) {
                var item = dimensionElements_2[_c];
                if (item.tag === folderName && item.pid === parentID) {
                  curParentElement.push(item);
                }
              }
              if (curParentElement.length === 0) {
                var fieldObj_1 = {
                  hasChildren: true,
                  isSelected: false,
                  pid: dimensionName + (this.isMondrian || isSameDim ? "~#^Dim" : ""),
                  id: folderName,
                  name: hierarchyFolderName,
                  spriteCssClass: "e-folderCDB-icon " + ICON,
                  tag: folderName,
                  caption: hierarchyFolderName,
                  // aggregateType: this.getAggregateType(hierarchyFolderName),
                  type: "string"
                };
                dimensionElements.push(fieldObj_1);
              }
              parentID = folderName;
            }
            var fieldObj = {
              hasChildren: field.querySelector("HIERARCHY_ORIGIN") ? field.querySelector("HIERARCHY_ORIGIN").textContent !== "2" && field.querySelector("HIERARCHY_ORIGIN").textContent !== "6" ? true : false : true,
              // hasChildren: true,
              isSelected: reportElement.indexOf(hierarchyName) >= 0,
              pid: parentID,
              id: hierarchyName,
              name: field.querySelector("HIERARCHY_CAPTION").textContent,
              spriteCssClass: (field.querySelector("HIERARCHY_ORIGIN") ? field.querySelector("HIERARCHY_ORIGIN").textContent !== "2" && field.querySelector("HIERARCHY_ORIGIN").textContent !== "6" ? "e-hierarchyCDB-icon" : "e-attributeCDB-icon" : "e-hierarchyCDB-icon") + " " + ICON,
              hasAllMember: isAllMemberAvail,
              allMember,
              tag: hierarchyName,
              caption: this.dataFields[hierarchyName] && this.dataFields[hierarchyName].caption ? this.dataFields[hierarchyName].caption : this.mappingFields[hierarchyName] && this.mappingFields[hierarchyName].caption ? this.mappingFields[hierarchyName].caption : field.querySelector("HIERARCHY_CAPTION").textContent,
              // aggregateType: this.getAggregateType(hierarchyName),
              type: "string",
              filter: [],
              dateMember: [],
              sort: this.enableSort ? this.sortObject[hierarchyName] ? this.sortObject[hierarchyName] : "Ascending" : "None",
              actualFilter: [],
              filterMembers: [],
              childMembers: [],
              searchMembers: [],
              members: {},
              currrentMembers: {},
              levels: [],
              levelCount: 1,
              isHierarchy: field.querySelector("HIERARCHY_ORIGIN") ? field.querySelector("HIERARCHY_ORIGIN").textContent !== "2" && field.querySelector("HIERARCHY_ORIGIN").textContent !== "6" ? false : true : false,
              isExcelFilter: false,
              allowDragAndDrop: this.dataFields[hierarchyName] ? this.dataFields[hierarchyName].allowDragAndDrop : this.mappingFields[hierarchyName] ? this.mappingFields[hierarchyName].allowDragAndDrop : true,
              showFilterIcon: this.dataFields[hierarchyName] ? this.dataFields[hierarchyName].showFilterIcon : this.mappingFields[hierarchyName] ? this.mappingFields[hierarchyName].showFilterIcon : true,
              showSortIcon: this.dataFields[hierarchyName] ? this.dataFields[hierarchyName].showSortIcon : this.mappingFields[hierarchyName] ? this.mappingFields[hierarchyName].showSortIcon : true,
              showEditIcon: this.dataFields[hierarchyName] ? this.dataFields[hierarchyName].showEditIcon : this.mappingFields[hierarchyName] ? this.mappingFields[hierarchyName].showEditIcon : true,
              showRemoveIcon: this.dataFields[hierarchyName] ? this.dataFields[hierarchyName].showRemoveIcon : this.mappingFields[hierarchyName] ? this.mappingFields[hierarchyName].showRemoveIcon : true,
              showValueTypeIcon: this.dataFields[hierarchyName] ? this.dataFields[hierarchyName].showValueTypeIcon : this.mappingFields[hierarchyName] ? this.mappingFields[hierarchyName].showValueTypeIcon : true,
              showSubTotals: this.dataFields[hierarchyName] ? this.dataFields[hierarchyName].showSubTotals : this.mappingFields[hierarchyName] ? this.mappingFields[hierarchyName].showSubTotals : true
            };
            dimensionElements.push(fieldObj);
            this.fieldList[hierarchyName] = fieldObj;
            this.updateMembersOrder(hierarchyName);
          }
        }
      }
      var args = {
        catalog: customArgs.dataSourceSettings.catalog,
        cube: customArgs.dataSourceSettings.cube,
        url: customArgs.dataSourceSettings.url,
        LCID: customArgs.dataSourceSettings.localeIdentifier.toString(),
        request: "MDSCHEMA_LEVELS",
        roles: customArgs.dataSourceSettings.roles
      };
      this.getTreeData(args, this.loadLevelElements.bind(this), customArgs);
    };
    OlapEngine2.prototype.updateMembersOrder = function(key) {
      for (var _i = 0, _a = this.sortSettings; _i < _a.length; _i++) {
        var sortInfo = _a[_i];
        if (key === sortInfo.name && sortInfo.membersOrder) {
          this.fieldList[key].membersOrder = sortInfo.membersOrder;
          break;
        }
      }
    };
    OlapEngine2.prototype.loadLevelElements = function(xmlDoc, request, customArgs) {
      var newDataSource = [];
      var dimensionElements = this.fieldListData;
      newDataSource = [];
      var fields = [].slice.call(xmlDoc.querySelectorAll("row"));
      for (var _i = 0, fields_7 = fields; _i < fields_7.length; _i++) {
        var field = fields_7[_i];
        if (parseInt(field.querySelector("LEVEL_TYPE").textContent, 10) !== 1 && field.querySelector("HIERARCHY_UNIQUE_NAME").textContent.toLowerCase() !== "[measures]") {
          var dimensionName = field.querySelector("HIERARCHY_UNIQUE_NAME").textContent;
          var levelName = field.querySelector("LEVEL_UNIQUE_NAME").textContent;
          var levelCaption = field.querySelector("LEVEL_CAPTION").textContent;
          var levelObj = {
            hasChildren: false,
            isChecked: false,
            isSelected: this.fieldList[dimensionName].isSelected,
            pid: dimensionName,
            id: levelName,
            name: levelCaption,
            tag: levelName,
            spriteCssClass: "e-level-members e-hierarchy-level-" + parseInt(field.querySelector("LEVEL_NUMBER").textContent, 10) + "-icon " + ICON,
            caption: levelCaption,
            // aggregateType: this.getAggregateType(levelName),
            type: "string"
          };
          newDataSource.push(levelObj);
          if (this.fieldList[dimensionName] && this.fieldList[dimensionName].spriteCssClass && this.fieldList[dimensionName].spriteCssClass.indexOf("e-attributeCDB-icon") === -1) {
            this.fieldList[dimensionName].levels.push(levelObj);
            this.fieldList[dimensionName].isHierarchy = false;
          } else {
            this.fieldList[dimensionName].isHierarchy = true;
          }
        }
      }
      this.fieldListData = dimensionElements = dimensionElements.concat(newDataSource);
      var args = {
        catalog: customArgs.dataSourceSettings.catalog,
        cube: customArgs.dataSourceSettings.cube,
        url: customArgs.dataSourceSettings.url,
        LCID: customArgs.dataSourceSettings.localeIdentifier.toString(),
        request: "MDSCHEMA_MEASURES",
        roles: customArgs.dataSourceSettings.roles
      };
      this.getTreeData(args, this.loadMeasureElements.bind(this), customArgs);
    };
    OlapEngine2.prototype.loadMeasureElements = function(xmlDoc, request, customArgs) {
      var dimensionElements = this.fieldListData;
      var measureGroupItems = [];
      var caption;
      var dataFields = extend([], this.values, null, true);
      var reportElement = [];
      for (var _i = 0, dataFields_5 = dataFields; _i < dataFields_5.length; _i++) {
        var field = dataFields_5[_i];
        reportElement.push(field.name);
      }
      if (this.locale !== "en-US") {
        var args = {
          catalog: customArgs.dataSourceSettings.catalog,
          cube: customArgs.dataSourceSettings.cube,
          url: customArgs.dataSourceSettings.url,
          LCID: customArgs.dataSourceSettings.localeIdentifier.toString(),
          request: "MDSCHEMA_MEASUREGROUPS",
          roles: customArgs.dataSourceSettings.roles
        };
        this.getTreeData(args, this.loadMeasureGroups.bind(this), customArgs);
      }
      var fields = [].slice.call(xmlDoc.querySelectorAll("row"));
      for (var _a = 0, fields_8 = fields; _a < fields_8.length; _a++) {
        var field = fields_8[_a];
        var measureGRPName = isNullOrUndefined(field.querySelector("MEASUREGROUP_NAME")) ? "" : field.querySelector("MEASUREGROUP_NAME").textContent;
        var measureName = field.querySelector("MEASURE_UNIQUE_NAME").textContent;
        var formatString = field.querySelector("DEFAULT_FORMAT_STRING") ? field.querySelector("DEFAULT_FORMAT_STRING").textContent : "#,#";
        var aggregateType = field.querySelector("MEASURE_AGGREGATOR") ? field.querySelector("MEASURE_AGGREGATOR").textContent : "1";
        if (!(measureGroupItems.indexOf(measureGRPName) >= 0)) {
          if (this.locale !== "en-US") {
            var measureInfo = [];
            for (var _b = 0, _c = this.fieldListObj.measuresGroups; _b < _c.length; _b++) {
              var item = _c[_b];
              if (item.querySelector("MEASUREGROUP_NAME").textContent === measureGRPName) {
                measureInfo.push(item);
              }
            }
            caption = measureInfo.length > 0 ? measureInfo[0].querySelector("MEASUREGROUP_CAPTION").textContent : measureGRPName;
          } else {
            caption = measureGRPName;
          }
          if (measureGRPName !== "") {
            dimensionElements.push({
              hasChildren: true,
              isChecked: false,
              isSelected: false,
              pid: "[Measures]",
              id: measureGRPName,
              name: caption,
              spriteCssClass: "e-measureCDB e-folderCDB-icon " + ICON,
              tag: measureGRPName,
              caption,
              aggregateType: this.getAggregateType(measureGRPName, aggregateType),
              type: "string"
            });
            measureGroupItems.push(measureGRPName);
          }
        }
        var fieldObj = {
          hasChildren: false,
          isSelected: reportElement.indexOf(measureName) >= 0,
          pid: measureGRPName === "" ? "[Measures]" : measureGRPName,
          id: measureName,
          name: field.querySelector("MEASURE_CAPTION").textContent,
          spriteCssClass: "e-measure-icon " + ICON,
          tag: measureName,
          caption: this.dataFields[measureName] && this.dataFields[measureName].caption ? this.dataFields[measureName].caption : this.mappingFields[measureName] && this.mappingFields[measureName].caption ? this.mappingFields[measureName].caption : field.querySelector("MEASURE_CAPTION").textContent,
          aggregateType: this.getAggregateType(measureName, aggregateType),
          type: "number",
          filter: [],
          // sort: 'Ascending',
          actualFilter: [],
          filterMembers: [],
          childMembers: [],
          searchMembers: [],
          members: {},
          currrentMembers: {},
          formatString,
          allowDragAndDrop: this.dataFields[measureName] ? this.dataFields[measureName].allowDragAndDrop : this.mappingFields[measureName] ? this.mappingFields[measureName].allowDragAndDrop : true,
          showFilterIcon: this.dataFields[measureName] ? this.dataFields[measureName].showFilterIcon : this.mappingFields[measureName] ? this.mappingFields[measureName].showFilterIcon : true,
          showSortIcon: this.dataFields[measureName] ? this.dataFields[measureName].showSortIcon : this.mappingFields[measureName] ? this.mappingFields[measureName].showSortIcon : true,
          showEditIcon: this.dataFields[measureName] ? this.dataFields[measureName].showEditIcon : this.mappingFields[measureName] ? this.mappingFields[measureName].showEditIcon : true,
          showRemoveIcon: this.dataFields[measureName] ? this.dataFields[measureName].showRemoveIcon : this.mappingFields[measureName] ? this.mappingFields[measureName].showRemoveIcon : true,
          showValueTypeIcon: this.dataFields[measureName] ? this.dataFields[measureName].showValueTypeIcon : this.mappingFields[measureName] ? this.mappingFields[measureName].showValueTypeIcon : true,
          showSubTotals: this.dataFields[measureName] ? this.dataFields[measureName].showSubTotals : this.mappingFields[measureName] ? this.mappingFields[measureName].showSubTotals : true
        };
        dimensionElements.push(fieldObj);
        this.fieldList[measureName] = fieldObj;
        if (reportElement.indexOf(measureName) >= 0) {
          reportElement.splice(reportElement.indexOf(measureName), 1);
        }
      }
      this.measureReportItems = reportElement;
    };
    OlapEngine2.prototype.loadMeasureGroups = function(xmlDoc) {
      if (isNullOrUndefined(this.fieldListObj)) {
        this.fieldListObj = {};
      }
      this.fieldListObj.measuresGroups = [].slice.call(xmlDoc.querySelectorAll("row"));
    };
    OlapEngine2.prototype.doAjaxPost = function(type, url, data, success, customArgs) {
      var _this = this;
      var ajax = new Ajax({
        mode: false,
        contentType: "text/xml",
        url,
        data,
        dataType: "xml",
        type,
        beforeSend: this.beforeSend.bind(this),
        onSuccess: function(args, request) {
          var parser = new DOMParser();
          var xmlDoc = parser.parseFromString(args, "text/xml");
          var body = xmlDoc.querySelector("Body");
          if (!body.querySelector("OlapInfo")) {
            if (!body.querySelector("DiscoverResponse")) {
              if (body.querySelector("Fault") && body.querySelector("Fault").querySelector("faultstring")) {
                _this.errorInfo = body.querySelector("Fault").querySelector("faultstring").innerHTML;
              } else if (body.querySelector("return") && body.querySelector("return").querySelector("Error")) {
                _this.errorInfo = body.querySelector("return").querySelector("Error").getAttribute("Description");
              }
            }
          }
          success(xmlDoc, request, customArgs);
        },
        onFailure: function(e) {
          _this.errorInfo = e;
        }
      });
      ajax.send();
    };
    OlapEngine2.prototype.beforeSend = function(args) {
      if (this.dataSourceSettings.authentication.userName && this.dataSourceSettings.authentication.password) {
        args.httpRequest.setRequestHeader("Authorization", "Basic " + btoa(this.dataSourceSettings.authentication.userName + ":" + this.dataSourceSettings.authentication.password));
      }
    };
    OlapEngine2.prototype.getSoapMsg = function(dataSourceSettings, query) {
      var xmlMsg = "";
      var sourceInfo = "";
      var connectionString = this.getConnectionInfo(dataSourceSettings.url, dataSourceSettings.localeIdentifier);
      if (this.isMondrian) {
        sourceInfo = "";
        xmlMsg = '<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><SOAP-ENV:Body><Execute xmlns="urn:schemas-microsoft-com:xml-analysis"><Command><Statement><![CDATA[' + query + "]]></Statement></Command><Properties><PropertyList><DataSourceInfo>" + sourceInfo + "</DataSourceInfo><Catalog>" + dataSourceSettings.catalog + "</Catalog><AxisFormat>TupleFormat</AxisFormat><Content>Data</Content><Format>Multidimensional</Format></PropertyList></Properties></Execute></SOAP-ENV:Body></SOAP-ENV:Envelope>";
      } else {
        xmlMsg = '<Envelope xmlns="http://schemas.xmlsoap.org/soap/envelope/"> <Header></Header> <Body> <Execute xmlns="urn:schemas-microsoft-com:xml-analysis"> <Command> <Statement> ' + query + " </Statement> </Command> <Properties> <PropertyList> <Catalog>" + dataSourceSettings.catalog + "</Catalog> <LocaleIdentifier>" + connectionString.LCID + "</LocaleIdentifier>" + (dataSourceSettings.roles ? "<Roles>" + dataSourceSettings.roles + "</Roles>" : "") + "</PropertyList> </Properties> </Execute> </Body> </Envelope>";
      }
      return xmlMsg;
    };
    OlapEngine2.prototype.getConnectionInfo = function(connectionString, locale) {
      var connectionInfo = {
        url: "",
        LCID: !isNullOrUndefined(locale) ? locale.toString() : "1033"
      };
      if (connectionString !== "") {
        for (var _i = 0, _a = connectionString.split(";"); _i < _a.length; _i++) {
          var obj = _a[_i];
          if (obj.toLowerCase().indexOf("locale") < 0 && connectionInfo.url.length === 0) {
            connectionInfo.url = obj;
          } else if (obj.toLowerCase().indexOf("locale") >= 0) {
            connectionInfo.LCID = obj.replace(/ /g, "").split("=")[1];
          }
        }
      }
      return connectionInfo;
    };
    OlapEngine2.prototype.getMDXQuery = function(dataSourceSettings) {
      MDXQuery.getCellSets(dataSourceSettings, this, true, void 0, true);
      return this.mdxQuery;
    };
    return OlapEngine2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/pivotview/actions/pdf-export-helper.js
var PDFExportHelper = (
  /** @class */
  function() {
    function PDFExportHelper2() {
    }
    PDFExportHelper2.prototype.drawHeader = function(pdfExportProperties, pdfDocument) {
      var clientSize = pdfDocument.pageSettings.size;
      var header = pdfExportProperties.header;
      var position = new PointF(0, header && header.fromTop ? header.fromTop : 0);
      var size = new SizeF(clientSize.width - 80, header && header.height ? header.height * 0.75 : 50);
      var bounds = new RectangleF(position, size);
      pdfDocument.template.top = this.drawPageTemplate(new PdfPageTemplateElement(bounds), header);
    };
    PDFExportHelper2.prototype.drawFooter = function(pdfExportProperties, pdfDocument) {
      var clientSize = pdfDocument.pageSettings.size;
      var footer = pdfExportProperties.footer;
      var position = new PointF(0, clientSize.width - 80 - (footer && footer.fromBottom ? footer.fromBottom * 0.75 : 0));
      var size = new SizeF(clientSize.width - 80, footer && footer.height ? footer.height * 0.75 : 50);
      var bounds = new RectangleF(position, size);
      pdfDocument.template.bottom = this.drawPageTemplate(new PdfPageTemplateElement(bounds), footer);
    };
    PDFExportHelper2.prototype.drawPageTemplate = function(template, element) {
      for (var _i = 0, _a = element.contents; _i < _a.length; _i++) {
        var content = _a[_i];
        this.processContentValidation(content);
        switch (content.type) {
          case "Text":
            if (content.value === "" || isNullOrUndefined(content.value) || typeof content.value !== "string") {
              throw new Error("please enter the valid input value in text content...");
            }
            this.drawText(template, content);
            break;
          case "PageNumber":
            this.drawPageNumber(template, content);
            break;
          case "Image":
            if (isNullOrUndefined(content.src) || content.src === "") {
              throw new Error("please enter the valid base64 string in image content...");
            }
            this.drawImage(template, content);
            break;
          case "Line":
            this.drawLine(template, content);
            break;
        }
      }
      return template;
    };
    PDFExportHelper2.prototype.processContentValidation = function(content) {
      if (isNullOrUndefined(content.type)) {
        throw new Error("please set valid content type...");
      } else {
        if (content.type === "Line") {
          if (isNullOrUndefined(content.points)) {
            throw new Error("please enter valid points in " + content.type + " content...");
          } else {
            if (isNullOrUndefined(content.points.x1) || typeof content.points.x1 !== "number") {
              throw new Error("please enter valid x1 co-ordinate in " + content.type + " points...");
            }
            if (isNullOrUndefined(content.points.y1) || typeof content.points.y1 !== "number") {
              throw new Error("please enter valid y1 co-ordinate in " + content.type + " points...");
            }
            if (isNullOrUndefined(content.points.x2) || typeof content.points.x2 !== "number") {
              throw new Error("please enter valid x2 co-ordinate in " + content.type + " points...");
            }
            if (isNullOrUndefined(content.points.y2) || typeof content.points.y2 !== "number") {
              throw new Error("please enter valid y2 co-ordinate in " + content.type + " points...");
            }
          }
        } else {
          if (isNullOrUndefined(content.position)) {
            throw new Error("please enter valid position in " + content.type + " content...");
          } else {
            if (isNullOrUndefined(content.position.x) || typeof content.position.x !== "number") {
              throw new Error("please enter valid x co-ordinate in " + content.type + " position...");
            }
            if (isNullOrUndefined(content.position.y) || typeof content.position.y !== "number") {
              throw new Error("please enter valid y co-ordinate in " + content.type + " position...");
            }
          }
        }
      }
    };
    PDFExportHelper2.prototype.drawText = function(pageTemplate, content) {
      var font = this.getFontFromContent(content);
      var brush = this.getBrushFromContent(content);
      var pen = null;
      if (!isNullOrUndefined(content.style) && !isNullOrUndefined(content.style.textPenColor)) {
        var penColor = this.hexDecToRgb(content.style.textPenColor);
        pen = new PdfPen(new PdfColor(penColor.r, penColor.g, penColor.b));
      }
      if (brush == null && pen == null) {
        brush = new PdfSolidBrush(new PdfColor(0, 0, 0));
      }
      var value = content.value.toString();
      var x = content.position.x * 0.75;
      var y = content.position.y * 0.75;
      var format = new PdfStringFormat();
      if (!isNullOrUndefined(content.stringFormat)) {
        format = content.stringFormat;
      }
      var result = this.setContentFormat(content, format);
      if (result !== null && !isNullOrUndefined(result.format) && !isNullOrUndefined(result.size)) {
        pageTemplate.graphics.drawString(value, font, pen, brush, x, y, result.size.width, result.size.height, result.format);
      } else {
        pageTemplate.graphics.drawString(value, font, pen, brush, x, y, format);
      }
    };
    PDFExportHelper2.prototype.drawPageNumber = function(documentHeader, content) {
      var font = this.getFontFromContent(content);
      var brush = null;
      if (!isNullOrUndefined(content.style) && !isNullOrUndefined(content.style.textBrushColor)) {
        var brushColor = this.hexDecToRgb(content.style.textBrushColor);
        brush = new PdfSolidBrush(new PdfColor(brushColor.r, brushColor.g, brushColor.b));
      } else {
        brush = new PdfSolidBrush(new PdfColor(0, 0, 0));
      }
      var pageNumber = new PdfPageNumberField(font, brush);
      pageNumber.numberStyle = this.getPageNumberStyle(content.pageNumberType);
      var compositeField;
      var format;
      if (!isNullOrUndefined(content.format)) {
        var total = "$total";
        var current = "$current";
        if (content.format.indexOf(total) !== -1 && content.format.indexOf(current) !== -1) {
          var pageCount = new PdfPageCountField(font);
          pageCount.numberStyle = this.getPageNumberStyle(content.pageNumberType);
          if (content.format.indexOf(total) > content.format.indexOf(current)) {
            format = content.format.replace(current, "0");
            format = format.replace(total, "1");
          } else {
            format = content.format.replace(current, "1");
            format = format.replace(total, "0");
          }
          compositeField = new PdfCompositeField(font, brush, format, pageNumber, pageCount);
        } else if (content.format.indexOf(current) !== -1 && content.format.indexOf(total) === -1) {
          format = content.format.replace(current, "0");
          compositeField = new PdfCompositeField(font, brush, format, pageNumber);
        } else {
          var pageCount = new PdfPageCountField(font);
          format = content.format.replace(total, "0");
          compositeField = new PdfCompositeField(font, brush, format, pageCount);
        }
      } else {
        format = "{0}";
        compositeField = new PdfCompositeField(font, brush, format, pageNumber);
      }
      var x = content.position.x * 0.75;
      var y = content.position.y * 0.75;
      var result = this.setContentFormat(content, compositeField.stringFormat);
      if (result !== null && !isNullOrUndefined(result.format) && !isNullOrUndefined(result.size)) {
        compositeField.stringFormat = result.format;
        compositeField.bounds = new RectangleF(x, y, result.size.width, result.size.height);
      }
      compositeField.draw(documentHeader.graphics, x, y);
    };
    PDFExportHelper2.prototype.drawImage = function(documentHeader, content) {
      var x = content.position.x * 0.75;
      var y = content.position.y * 0.75;
      var width = !isNullOrUndefined(content.size) && !isNullOrUndefined(content.size.width) ? content.size.width * 0.75 : void 0;
      var height = !isNullOrUndefined(content.size) && !isNullOrUndefined(content.size.height) ? content.size.height * 0.75 : void 0;
      var image = new PdfBitmap(content.src);
      if (!isNullOrUndefined(width)) {
        documentHeader.graphics.drawImage(image, x, y, width, height);
      } else {
        documentHeader.graphics.drawImage(image, x, y);
      }
    };
    PDFExportHelper2.prototype.drawLine = function(documentHeader, content) {
      var x1 = content.points.x1 * 0.75;
      var y1 = content.points.y1 * 0.75;
      var x2 = content.points.x2 * 0.75;
      var y2 = content.points.y2 * 0.75;
      var pen = this.getPenFromContent(content);
      if (!isNullOrUndefined(content.style)) {
        if (!isNullOrUndefined(content.style.penSize) && typeof content.style.penSize === "number") {
          pen.width = content.style.penSize * 0.75;
        }
        pen.dashStyle = this.getDashStyle(content.style.dashStyle);
      }
      documentHeader.graphics.drawLine(pen, x1, y1, x2, y2);
    };
    PDFExportHelper2.prototype.getFontFromContent = function(content) {
      var fontSize = !isNullOrUndefined(content.font) && !isNullOrUndefined(content.font["fontSize"]) ? content.font["fontSize"] * 0.75 : !isNullOrUndefined(content.style) && !isNullOrUndefined(content.style.fontSize) ? content.style.fontSize * 0.75 : 9.75;
      var fontFamily = !isNullOrUndefined(content.font) && !isNullOrUndefined(content.font["pdfFontFamily"]) ? content.font["pdfFontFamily"] : PdfFontFamily.TimesRoman;
      var fontStyle = PdfFontStyle.Regular;
      if (!isNullOrUndefined(content.font) && !isNullOrUndefined(content.font.bold)) {
        fontStyle |= PdfFontStyle.Bold;
      }
      if (!isNullOrUndefined(content.font) && !isNullOrUndefined(content.font.italic)) {
        fontStyle |= PdfFontStyle.Italic;
      }
      if (!isNullOrUndefined(content.font) && !isNullOrUndefined(content.font.underline)) {
        fontStyle |= PdfFontStyle.Underline;
      }
      if (!isNullOrUndefined(content.font) && !isNullOrUndefined(content.font.strikeout)) {
        fontStyle |= PdfFontStyle.Strikeout;
      }
      return new PdfStandardFont(fontFamily, fontSize, fontStyle);
    };
    PDFExportHelper2.prototype.getPenFromContent = function(content) {
      var pen = new PdfPen(new PdfColor(0, 0, 0));
      if (!isNullOrUndefined(content.style) && content.style !== null && !isNullOrUndefined(content.style.penColor)) {
        var penColor = this.hexDecToRgb(content.style.penColor);
        pen = new PdfPen(new PdfColor(penColor.r, penColor.g, penColor.b));
      }
      return pen;
    };
    PDFExportHelper2.prototype.getBrushFromContent = function(content) {
      var brush = null;
      if (!isNullOrUndefined(content.style) && !isNullOrUndefined(content.style.textBrushColor)) {
        var brushColor = this.hexDecToRgb(content.style.textBrushColor);
        brush = new PdfSolidBrush(new PdfColor(brushColor.r, brushColor.g, brushColor.b));
      }
      return brush;
    };
    PDFExportHelper2.prototype.setContentFormat = function(content, format) {
      if (!isNullOrUndefined(content.size)) {
        var width = content.size.width * 0.75;
        var height = content.size.height * 0.75;
        format = new PdfStringFormat(PdfTextAlignment.Left, PdfVerticalAlignment.Middle);
        if (!isNullOrUndefined(content.style) && !isNullOrUndefined(content.style.hAlign)) {
          switch (content.style.hAlign) {
            case "Right":
              format.alignment = PdfTextAlignment.Right;
              break;
            case "Center":
              format.alignment = PdfTextAlignment.Center;
              break;
            case "Justify":
              format.alignment = PdfTextAlignment.Justify;
              break;
          }
        }
        if (!isNullOrUndefined(content.style) && !isNullOrUndefined(content.style.vAlign)) {
          switch (content.style.vAlign) {
            case "Bottom":
              format.lineAlignment = PdfVerticalAlignment.Bottom;
              break;
            case "Top":
              format.lineAlignment = PdfVerticalAlignment.Top;
              break;
          }
        }
        return {
          format,
          size: new SizeF(width, height)
        };
      }
      return null;
    };
    PDFExportHelper2.prototype.getPageNumberStyle = function(pageNumberType) {
      switch (pageNumberType) {
        case "LowerLatin":
          return 2;
        case "LowerRoman":
          return 3;
        case "UpperLatin":
          return 4;
        case "UpperRoman":
          return 5;
        default:
          return 1;
      }
    };
    PDFExportHelper2.prototype.getDashStyle = function(dashType) {
      switch (dashType) {
        case "Dash":
          return 1;
        case "Dot":
          return 2;
        case "DashDot":
          return 3;
        case "DashDotDot":
          return 4;
        default:
          return 0;
      }
    };
    PDFExportHelper2.prototype.hexDecToRgb = function(hexDec) {
      if (hexDec === null || hexDec === "" || hexDec.length !== 7) {
        throw new Error("please set valid hex value for color..");
      }
      hexDec = hexDec.substring(1);
      var bigint = parseInt(hexDec, 16);
      var r = bigint >> 16 & 255;
      var g = bigint >> 8 & 255;
      var b = bigint & 255;
      return {
        r,
        g,
        b
      };
    };
    return PDFExportHelper2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/pivotchart/actions/chart-export.js
var ChartExport = (
  /** @class */
  function() {
    function ChartExport2(parent) {
      this.parent = parent;
      this.pdfExportHelper = new PDFExportHelper();
    }
    ChartExport2.prototype.getModuleName = function() {
      return "chartExport";
    };
    ChartExport2.prototype.pdfChartExport = function(pdfExportProperties, pdfDoc, isMultipleExport, isBlob) {
      var _this = this;
      var controls = [this.parent.chart];
      var chartInfo = this.getChartInfo(controls);
      var width = chartInfo.width;
      var height = chartInfo.height;
      var element = this.parent.chart.svgObject;
      if (this.parent.enableRtl && chartInfo.svg) {
        chartInfo.svg.querySelector("#" + this.parent.element.id + "_chart_svg").setAttribute("direction", "rtl");
      }
      var isCanvas = this.parent.chart.enableCanvas;
      if (!isCanvas) {
        element = createElement("canvas", {
          id: "ej2-canvas",
          attrs: {
            "width": width.toString(),
            "height": height.toString()
          }
        });
      }
      var url = window.URL.createObjectURL(new Blob([new XMLSerializer().serializeToString(chartInfo.svg)], {
        type: "image/svg+xml"
      }));
      var image = new Image();
      var ctx = element.getContext("2d");
      image.src = url;
      return new Promise(function(resolve) {
        image.onload = function() {
          var pdfDocument;
          if (!isNullOrUndefined(pdfDoc)) {
            pdfDocument = pdfDoc;
          } else {
            pdfDocument = new PdfDocument();
          }
          ctx.drawImage(image, 0, 0);
          window.URL.revokeObjectURL(url);
          _this.exportPdf(element, pdfDocument, isMultipleExport, isBlob, width, height, pdfExportProperties);
          resolve(pdfDocument);
        };
      });
    };
    ChartExport2.prototype.getChartInfo = function(controls, isVertical) {
      var width = 0;
      var height = 0;
      var isCanvas = this.parent.chart.enableCanvas;
      var svgObject = new SvgRenderer("").createSvg({
        id: "Svg_Export_Element",
        width: 200,
        height: 200
      });
      var backgroundColor;
      controls.map(function(control) {
        var svg = control.svgObject.cloneNode(true);
        var groupEle = control.renderer.createGroup({
          style: isNullOrUndefined(isVertical) || isVertical ? "transform: translateY(" + height + "px)" : "transform: translateX(" + width + "px)"
        });
        backgroundColor = svg.childNodes[0] ? svg.childNodes[0].getAttribute("fill") : "transparent";
        if (backgroundColor === "transparent") {
          if (control.theme.indexOf("Dark") > -1 || control.theme === "HighContrast") {
            backgroundColor = "rgba(0, 0, 0, 1)";
          } else {
            backgroundColor = "rgba(255, 255, 255, 1)";
          }
        }
        if (!isCanvas) {
          groupEle.appendChild(svg);
        }
        width = control.availableSize.width;
        height = control.availableSize.height;
        if (!isCanvas) {
          svgObject.appendChild(groupEle);
        }
      });
      if (!isCanvas) {
        svgObject.setAttribute("width", width + "");
        svgObject.setAttribute("height", height + "");
        svgObject.setAttribute("style", "background-color: " + backgroundColor + ";");
      }
      return {
        "width": width,
        "height": height,
        "svg": svgObject
      };
    };
    ChartExport2.prototype.exportPdf = function(element, pdfDocument, isMultipleExport, isBlob, width, height, pdfExportProperties) {
      var documentSection = pdfDocument.sections.add();
      var documentWidth = pdfDocument.pageSettings.width;
      var documentHeight = pdfDocument.pageSettings.height;
      var margin = pdfDocument.pageSettings.margins;
      var chartWidth = width + margin.left + margin.right;
      pdfDocument.pageSettings.size = new SizeF(chartWidth, documentHeight);
      var fileName = this.exportProperties.fileName ? this.exportProperties.fileName : !isNullOrUndefined(pdfExportProperties) && !isNullOrUndefined(pdfExportProperties.fileName) ? pdfExportProperties.fileName : "default";
      if (this.exportProperties.width || this.exportProperties.height) {
        pdfDocument.pageSettings.orientation = this.exportProperties.width > this.exportProperties.height || !this.exportProperties.height && this.exportProperties.width > documentHeight || !this.exportProperties.width && documentWidth > this.exportProperties.height ? PdfPageOrientation.Landscape : PdfPageOrientation.Portrait;
        pdfDocument.pageSettings.size = new SizeF(this.exportProperties.width ? this.exportProperties.width : documentWidth, this.exportProperties.height ? this.exportProperties.height : documentHeight);
      } else {
        pdfDocument.pageSettings.orientation = this.exportProperties.orientation === 0 || this.exportProperties.orientation ? this.exportProperties.orientation : !isNullOrUndefined(pdfExportProperties) && !isNullOrUndefined(pdfExportProperties.pageOrientation) ? pdfExportProperties.pageOrientation === "Landscape" ? PdfPageOrientation.Landscape : PdfPageOrientation.Portrait : PdfPageOrientation.Landscape;
        if (!isNullOrUndefined(pdfExportProperties) && !isNullOrUndefined(pdfExportProperties.pageSize)) {
          pdfDocument.pageSettings.size = PivotUtil.getPageSize(pdfExportProperties.pageSize);
        }
      }
      if (!isNullOrUndefined(this.exportProperties.pdfMargins)) {
        var margins = pdfDocument.pageSettings.margins;
        margins.top = !isNullOrUndefined(this.exportProperties.pdfMargins.top) ? this.exportProperties.pdfMargins.top : margins.top;
        margins.bottom = !isNullOrUndefined(this.exportProperties.pdfMargins.bottom) ? this.exportProperties.pdfMargins.bottom : margins.bottom;
        margins.left = !isNullOrUndefined(this.exportProperties.pdfMargins.left) ? this.exportProperties.pdfMargins.left : margins.left;
        margins.right = !isNullOrUndefined(this.exportProperties.pdfMargins.right) ? this.exportProperties.pdfMargins.right : margins.right;
      }
      documentSection.setPageSettings(pdfDocument.pageSettings);
      documentHeight = pdfDocument.pageSettings.height;
      var imageString = element.toDataURL("image/jpeg").replace("image/jpeg", "image/octet-stream");
      imageString = imageString.slice(imageString.indexOf(",") + 1);
      var image = new PdfBitmap(imageString);
      var pdfPage = documentSection.pages.add();
      if (!isNullOrUndefined(pdfExportProperties) && !isNullOrUndefined(pdfExportProperties.header)) {
        this.pdfExportHelper.drawHeader(pdfExportProperties, pdfDocument);
      }
      if (!isNullOrUndefined(pdfExportProperties) && !isNullOrUndefined(pdfExportProperties.footer)) {
        this.pdfExportHelper.drawFooter(pdfExportProperties, pdfDocument);
      }
      pdfPage.graphics.drawImage(image, 0, 0, documentHeight < height || this.exportProperties.width || pdfDocument.pageSettings.size ? pdfPage.getClientSize().width : chartWidth, documentHeight < height ? pdfPage.getClientSize().height : height);
      var blobPromise;
      if (isBlob || isMultipleExport) {
        if (isBlob) {
          blobPromise = pdfDocument.save();
        }
      } else {
        pdfDocument.save(fileName + ".pdf");
        pdfDocument.destroy();
      }
      var exportCompleteEventArgs = {
        type: "PDF",
        promise: isBlob ? blobPromise : null
      };
      this.parent.trigger(exportComplete, exportCompleteEventArgs);
      return new Promise(function() {
        pdfDocument;
      });
    };
    ChartExport2.prototype.destroy = function() {
      if (this.exportProperties) {
        this.exportProperties = null;
      }
      if (this.pdfExportHelper) {
        this.pdfExportHelper = null;
      }
    };
    return ChartExport2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/pivotview/base/pivotview.js
var __extends4 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate5 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var GroupingBarSettings = (
  /** @class */
  function(_super) {
    __extends4(GroupingBarSettings2, _super);
    function GroupingBarSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate5([Property(true)], GroupingBarSettings2.prototype, "showFilterIcon", void 0);
    __decorate5([Property(true)], GroupingBarSettings2.prototype, "showSortIcon", void 0);
    __decorate5([Property(true)], GroupingBarSettings2.prototype, "showRemoveIcon", void 0);
    __decorate5([Property(true)], GroupingBarSettings2.prototype, "showValueTypeIcon", void 0);
    __decorate5([Property("Both")], GroupingBarSettings2.prototype, "displayMode", void 0);
    __decorate5([Property(true)], GroupingBarSettings2.prototype, "allowDragAndDrop", void 0);
    __decorate5([Property(false)], GroupingBarSettings2.prototype, "showFieldsPanel", void 0);
    return GroupingBarSettings2;
  }(ChildProperty)
);
var CellEditSettings = (
  /** @class */
  function(_super) {
    __extends4(CellEditSettings2, _super);
    function CellEditSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate5([Property(false)], CellEditSettings2.prototype, "allowAdding", void 0);
    __decorate5([Property(false)], CellEditSettings2.prototype, "allowEditing", void 0);
    __decorate5([Property(false)], CellEditSettings2.prototype, "allowDeleting", void 0);
    __decorate5([Property(false)], CellEditSettings2.prototype, "allowCommandColumns", void 0);
    __decorate5([Property(false)], CellEditSettings2.prototype, "allowInlineEditing", void 0);
    __decorate5([Property("Normal")], CellEditSettings2.prototype, "mode", void 0);
    __decorate5([Property(true)], CellEditSettings2.prototype, "allowEditOnDblClick", void 0);
    __decorate5([Property(true)], CellEditSettings2.prototype, "showConfirmDialog", void 0);
    __decorate5([Property(false)], CellEditSettings2.prototype, "showDeleteConfirmDialog", void 0);
    return CellEditSettings2;
  }(ChildProperty)
);
var ConditionalSettings = (
  /** @class */
  function(_super) {
    __extends4(ConditionalSettings2, _super);
    function ConditionalSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate5([Property()], ConditionalSettings2.prototype, "measure", void 0);
    __decorate5([Property()], ConditionalSettings2.prototype, "label", void 0);
    __decorate5([Property("NotEquals")], ConditionalSettings2.prototype, "conditions", void 0);
    __decorate5([Property()], ConditionalSettings2.prototype, "value1", void 0);
    __decorate5([Property()], ConditionalSettings2.prototype, "value2", void 0);
    return ConditionalSettings2;
  }(ChildProperty)
);
var HyperlinkSettings = (
  /** @class */
  function(_super) {
    __extends4(HyperlinkSettings2, _super);
    function HyperlinkSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate5([Property(false)], HyperlinkSettings2.prototype, "showHyperlink", void 0);
    __decorate5([Property(false)], HyperlinkSettings2.prototype, "showRowHeaderHyperlink", void 0);
    __decorate5([Property(false)], HyperlinkSettings2.prototype, "showColumnHeaderHyperlink", void 0);
    __decorate5([Property(false)], HyperlinkSettings2.prototype, "showValueCellHyperlink", void 0);
    __decorate5([Property(false)], HyperlinkSettings2.prototype, "showSummaryCellHyperlink", void 0);
    __decorate5([Collection([], ConditionalSettings)], HyperlinkSettings2.prototype, "conditionalSettings", void 0);
    __decorate5([Property()], HyperlinkSettings2.prototype, "headerText", void 0);
    __decorate5([Property("")], HyperlinkSettings2.prototype, "cssClass", void 0);
    return HyperlinkSettings2;
  }(ChildProperty)
);
var PageSettings = (
  /** @class */
  function(_super) {
    __extends4(PageSettings2, _super);
    function PageSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate5([Property(5)], PageSettings2.prototype, "columnPageSize", void 0);
    __decorate5([Property(5)], PageSettings2.prototype, "rowPageSize", void 0);
    __decorate5([Property(1)], PageSettings2.prototype, "currentColumnPage", void 0);
    __decorate5([Property(1)], PageSettings2.prototype, "currentRowPage", void 0);
    return PageSettings2;
  }(ChildProperty)
);
var PagerSettings = (
  /** @class */
  function(_super) {
    __extends4(PagerSettings2, _super);
    function PagerSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate5([Property("Bottom")], PagerSettings2.prototype, "position", void 0);
    __decorate5([Property(false)], PagerSettings2.prototype, "isInversed", void 0);
    __decorate5([Property(true)], PagerSettings2.prototype, "showRowPager", void 0);
    __decorate5([Property(true)], PagerSettings2.prototype, "showColumnPager", void 0);
    __decorate5([Property(true)], PagerSettings2.prototype, "showRowPageSize", void 0);
    __decorate5([Property(true)], PagerSettings2.prototype, "showColumnPageSize", void 0);
    __decorate5([Property([10, 50, 100, 200])], PagerSettings2.prototype, "rowPageSizes", void 0);
    __decorate5([Property([5, 10, 20, 50, 100])], PagerSettings2.prototype, "columnPageSizes", void 0);
    __decorate5([Property(false)], PagerSettings2.prototype, "enableCompactView", void 0);
    __decorate5([Property()], PagerSettings2.prototype, "template", void 0);
    return PagerSettings2;
  }(ChildProperty)
);
var DisplayOption = (
  /** @class */
  function(_super) {
    __extends4(DisplayOption2, _super);
    function DisplayOption2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate5([Property("Table")], DisplayOption2.prototype, "view", void 0);
    __decorate5([Property("Table")], DisplayOption2.prototype, "primary", void 0);
    return DisplayOption2;
  }(ChildProperty)
);
var VirtualScrollSettings = (
  /** @class */
  function(_super) {
    __extends4(VirtualScrollSettings2, _super);
    function VirtualScrollSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate5([Property(false)], VirtualScrollSettings2.prototype, "allowSinglePage", void 0);
    return VirtualScrollSettings2;
  }(ChildProperty)
);
var PivotView = (
  /** @class */
  function(_super) {
    __extends4(PivotView2, _super);
    function PivotView2(options, element) {
      var _this_1 = _super.call(this, options, element) || this;
      _this_1.verticalScrollScale = 1;
      _this_1.horizontalScrollScale = 1;
      _this_1.scrollerBrowserLimit = 8e6;
      _this_1.lastSortInfo = {};
      _this_1.lastFilterInfo = {};
      _this_1.lastAggregationInfo = {};
      _this_1.lastCalcFieldInfo = {};
      _this_1.isScrolling = false;
      _this_1.allowEngineExport = false;
      _this_1.isInitial = true;
      _this_1.shiftLockedPos = [];
      _this_1.savedSelectedCellsPos = [];
      _this_1.cellSelectionPos = [];
      _this_1.isPopupClicked = false;
      _this_1.isMouseDown = false;
      _this_1.isMouseUp = false;
      _this_1.fieldsType = {};
      _this_1.remoteData = [];
      _this_1.defaultItems = {};
      _this_1.isCellBoxMultiSelection = false;
      _this_1.gridCellCollection = {};
      _this_1.rowRangeSelection = {
        enable: false,
        startIndex: 0,
        endIndex: 0
      };
      _this_1.isStaticRefresh = false;
      _this_1.isStaticFieldList = false;
      _this_1.resizeInfo = {};
      _this_1.scrollPosObject = {
        vertical: 0,
        horizontal: 0,
        verticalSection: 0,
        horizontalSection: 0,
        top: 0,
        left: 0,
        scrollDirection: {
          direction: "",
          position: 0
        }
      };
      _this_1.pivotColumns = [];
      _this_1.totColWidth = 0;
      _this_1.posCount = 0;
      _this_1.isModified = false;
      _this_1.isInitialRendering = false;
      _this_1.needsID = true;
      _this_1.pivotRefresh = Component2.prototype.refresh;
      _this_1.request = typeof window !== "undefined" ? new XMLHttpRequest() : null;
      _this_1.isServerWaitingPopup = false;
      _this_1.actionObj = {};
      _this_1.defaultFieldListOrder = "None";
      _this_1.destroyEngine = false;
      _this_1.pivotView = _this_1;
      setValue("mergePersistData", _this_1.mergePersistPivotData, _this_1);
      return _this_1;
    }
    PivotView2.prototype.requiredModules = function() {
      var modules = [];
      if (this.showGroupingBar) {
        modules.push({
          args: [this],
          member: "groupingBar"
        });
      }
      if (this.allowConditionalFormatting) {
        modules.push({
          args: [this],
          member: "conditionalFormatting"
        });
      }
      if (this.allowNumberFormatting) {
        modules.push({
          args: [this],
          member: "numberFormatting"
        });
      }
      if (this.allowCalculatedField) {
        modules.push({
          args: [this],
          member: "calculatedField"
        });
      }
      if (this.showToolbar && (this.toolbar.length > 0 || this.toolbarTemplate)) {
        modules.push({
          args: [this],
          member: "toolbar"
        });
      }
      if (this.showFieldList) {
        modules.push({
          args: [this],
          member: "fieldList"
        });
      }
      if (this.allowExcelExport) {
        modules.push({
          args: [this],
          member: "excelExport"
        });
      }
      if (this.allowPdfExport) {
        modules.push({
          args: [this],
          member: "pdfExport"
        });
      }
      if (this.enableVirtualization) {
        modules.push({
          args: [this],
          member: "virtualscroll"
        });
      }
      if (this.allowGrouping) {
        modules.push({
          args: [this],
          member: "grouping"
        });
      }
      if (this.allowDrillThrough || this.editSettings && this.editSettings.allowEditing) {
        modules.push({
          args: [this],
          member: "drillThrough"
        });
      }
      if (this.enablePaging) {
        modules.push({
          args: [this],
          member: "pager"
        });
      }
      return modules;
    };
    PivotView2.prototype.preRender = function() {
      if (this.dataSourceSettings && this.dataSourceSettings.providerType === "SSAS") {
        this.dataType = "olap";
        this.olapEngineModule = new OlapEngine();
      } else {
        this.dataType = "pivot";
        this.engineModule = new PivotEngine();
      }
      this.isAdaptive = Browser.isDevice;
      if (Browser.isIE || Browser.info.name === "edge") {
        this.scrollerBrowserLimit = 15e5;
      } else if (Browser.info.name === "chrome") {
        this.scrollerBrowserLimit = 15e6;
      }
      this.isTouchMode = closest(this.element, "e-bigger") ? true : false;
      this.initProperties();
      this.renderToolTip();
      this.keyboardModule = new KeyboardInteraction(this);
      this.contextMenuModule = new PivotContextMenu(this);
      this.globalize = new Internationalization(this.locale);
      if (this.showFieldList || this.showGroupingBar || this.allowNumberFormatting || this.allowCalculatedField || this.toolbar && this.showToolbar || this.allowGrouping || this.gridSettings.contextMenuItems || this.allowDrillThrough) {
        this.commonModule = new Common(this);
      }
      if (this.chartSettings.enableExport && (this.displayOption.view === "Both" || this.displayOption.view === "Chart")) {
        this.chartExportModule = new ChartExport(this);
      }
      this.defaultLocale = {
        applyToGrandTotal: "Apply to Grand Total",
        grandTotal: "Grand Total",
        total: "Total",
        value: "Value",
        noValue: "No value",
        row: "Row",
        column: "Column",
        collapse: "Collapse",
        expand: "Expand",
        rowAxisPrompt: "Drop row here",
        columnAxisPrompt: "Drop column here",
        valueAxisPrompt: "Drop value here",
        filterAxisPrompt: "Drop filter here",
        filter: "Filter",
        filtered: "Filtered",
        sort: "Sort",
        filters: "Filters",
        rows: "Rows",
        columns: "Columns",
        values: "Values",
        close: "Close",
        cancel: "Cancel",
        delete: "Delete",
        CalculatedField: "Calculated Field",
        createCalculatedField: "Create Calculated Field",
        fieldName: "Enter the field name",
        error: "Error",
        invalidFormula: "Invalid formula.",
        dropText: 'Example: ("Sum(Order_Count)" + "Sum(In_Stock)") * 250',
        dropTextMobile: "Add fields and edit formula here.",
        dropAction: "Calculated field cannot be place in any other region except value axis.",
        alert: "Alert",
        warning: "Warning",
        ok: "OK",
        search: "Search",
        drag: "Drag",
        remove: "Remove",
        allFields: "All Fields",
        formula: "Formula",
        addToRow: "Add to Row",
        addToColumn: "Add to Column",
        addToValue: "Add to Value",
        addToFilter: "Add to Filter",
        emptyData: "No records to display",
        fieldExist: "A field already exists in this name. Please enter a different name.",
        confirmText: "A calculation field already exists in this name. Do you want to replace it?",
        noMatches: "No matches",
        format: "Summaries values by",
        edit: "Edit",
        clear: "Clear",
        sortAscending: "Sort ascending order",
        sortDescending: "Sort descending order",
        sortNone: "Sort data order",
        clearCalculatedField: "Clear edited field info",
        editCalculatedField: "Edit calculated field",
        formulaField: "Drag and drop fields to formula",
        dragField: "Drag field to formula",
        clearFilter: "Clear",
        by: "by",
        all: "All",
        multipleItems: "Multiple items",
        member: "Member",
        label: "Label",
        date: "Date",
        enterValue: "Enter value",
        chooseDate: "Enter date",
        Before: "Before",
        BeforeOrEqualTo: "Before Or Equal To",
        After: "After",
        AfterOrEqualTo: "After Or Equal To",
        labelTextContent: "Show the items for which the label",
        dateTextContent: "Show the items for which the date",
        valueTextContent: "Show the items for which",
        Equals: "Equals",
        DoesNotEquals: "Does Not Equal",
        BeginWith: "Begins With",
        DoesNotBeginWith: "Does Not Begin With",
        EndsWith: "Ends With",
        DoesNotEndsWith: "Does Not End With",
        Contains: "Contains",
        DoesNotContains: "Does Not Contain",
        GreaterThan: "Greater Than",
        GreaterThanOrEqualTo: "Greater Than Or Equal To",
        LessThan: "Less Than",
        LessThanOrEqualTo: "Less Than Or Equal To",
        Between: "Between",
        NotBetween: "Not Between",
        And: "and",
        Sum: "Sum",
        Count: "Count",
        DistinctCount: "Distinct Count",
        Product: "Product",
        Avg: "Avg",
        Median: "Median",
        Min: "Min",
        SampleVar: "Sample Var",
        PopulationVar: "Population Var",
        RunningTotals: "Running Totals",
        Max: "Max",
        Index: "Index",
        SampleStDev: "Sample StDev",
        PopulationStDev: "Population StDev",
        PercentageOfRowTotal: "% of Row Total",
        PercentageOfParentTotal: "% of Parent Total",
        PercentageOfParentColumnTotal: "% of Parent Column Total",
        PercentageOfParentRowTotal: "% of Parent Row Total",
        DifferenceFrom: "Difference From",
        PercentageOfDifferenceFrom: "% of Difference From",
        PercentageOfGrandTotal: "% of Grand Total",
        PercentageOfColumnTotal: "% of Column Total",
        MoreOption: "More...",
        NotEquals: "Not Equals",
        AllValues: "All Values",
        conditionalFormatting: "Conditional Formatting",
        apply: "Apply",
        condition: "Add Condition",
        formatLabel: "Format",
        valueFieldSettings: "Value field settings",
        baseField: "Base field",
        baseItem: "Base item",
        summarizeValuesBy: "Summarize values by",
        sourceName: "Field name :",
        sourceCaption: "Field caption",
        example: "e.g:",
        editorDataLimitMsg: " more items. Search to refine further.",
        details: "Details",
        manageRecords: "Manage Records",
        Years: "Years",
        Quarters: "Quarters",
        Months: "Months",
        Days: "Days",
        Hours: "Hours",
        Minutes: "Minutes",
        Seconds: "Seconds",
        save: "Save a report",
        new: "Create a new report",
        load: "Load",
        saveAs: "Save as current report",
        rename: "Rename a current report",
        deleteReport: "Delete a current report",
        export: "Export",
        subTotals: "Sub totals",
        grandTotals: "Grand totals",
        reportName: "Report Name :",
        pdf: "PDF",
        excel: "Excel",
        csv: "CSV",
        png: "PNG",
        jpeg: "JPEG",
        svg: "SVG",
        mdxQuery: "MDX Query",
        showSubTotals: "Show subtotals",
        doNotShowSubTotals: "Do not show subtotals",
        showSubTotalsRowsOnly: "Show subtotals rows only",
        showSubTotalsColumnsOnly: "Show subtotals columns only",
        showGrandTotals: "Show grand totals",
        doNotShowGrandTotals: "Do not show grand totals",
        showGrandTotalsRowsOnly: "Show grand totals rows only",
        showGrandTotalsColumnsOnly: "Show grand totals columns only",
        fieldList: "Show fieldlist",
        grid: "Show table",
        toolbarFormatting: "Conditional formatting",
        chart: "Chart",
        reportMsg: "Please enter valid report name!!!",
        reportList: "Report list",
        removeConfirm: "Are you sure you want to delete this report?",
        emptyReport: "No reports found!!",
        bar: "Bar",
        pie: "Pie",
        funnel: "Funnel",
        doughnut: "Doughnut",
        pyramid: "Pyramid",
        stackingcolumn: "Stacked Column",
        stackingarea: "Stacked Area",
        stackingbar: "Stacked Bar",
        stackingline: "Stacked Line",
        stepline: "Step Line",
        steparea: "Step Area",
        splinearea: "Spline Area",
        spline: "Spline",
        stackingcolumn100: "100% Stacked Column",
        stackingbar100: "100% Stacked Bar",
        stackingarea100: "100% Stacked Area",
        stackingline100: "100% Stacked Line",
        bubble: "Bubble",
        pareto: "Pareto",
        radar: "Radar",
        line: "Line",
        area: "Area",
        scatter: "Scatter",
        polar: "Polar",
        of: "of",
        emptyFormat: "No format found!!!",
        emptyInput: "Enter a value",
        newReportConfirm: "Do you want to save the changes to this report?",
        emptyReportName: "Enter a report name",
        qtr: "Qtr",
        null: "null",
        undefined: "undefined",
        groupOutOfRange: "Out of Range",
        fieldDropErrorAction: "The field you are moving cannot be placed in that area of the report",
        aggregate: "Aggregate",
        drillThrough: "Drill Through",
        ascending: "Ascending",
        descending: "Descending",
        number: "Number",
        currency: "Currency",
        percentage: "Percentage",
        formatType: "Format Type",
        customText: "Currency Symbol",
        symbolPosition: "Symbol Position",
        left: "Left",
        right: "Right",
        grouping: "Grouping",
        true: "True",
        false: "False",
        decimalPlaces: "Decimal Places",
        numberFormat: "Number Formatting",
        memberType: "Field Type",
        formatString: "Format",
        expressionField: "Expression",
        customFormat: "Enter custom format string",
        numberFormatString: "Example: C, P, 0000 %, ###0.##0#, etc.",
        selectedHierarchy: "Parent Hierarchy",
        olapDropText: "Example: [Measures].[Order Quantity] + ([Measures].[Order Quantity] * 0.10)",
        Percent: "Percent",
        Currency: "Currency",
        Custom: "Custom",
        Measure: "Measure",
        Dimension: "Dimension",
        Standard: "Standard",
        blank: "(Blank)",
        fieldTooltip: 'Drag and drop fields to create an expression. And, if you want to edit the existing calculated fields! You can achieve it by simply selecting the field under "Calculated Members".',
        fieldTitle: "Field Name",
        QuarterYear: "Quarter Year",
        drillError: "Cannot show the raw items of calculated fields.",
        caption: "Field Caption",
        copy: "Copy",
        defaultReport: "Sample Report",
        customFormatString: "Custom Format",
        invalidFormat: "Invalid Format.",
        group: "Group",
        unGroup: "Ungroup",
        invalidSelection: "Cannot group that selection.",
        groupName: "Enter the caption to display in header",
        captionName: "Enter the caption for group field",
        selectedItems: "Selected items",
        groupFieldCaption: "Field caption",
        groupTitle: "Group name",
        startAt: "Starting at",
        endAt: "Ending at",
        groupBy: "Interval by",
        selectGroup: "Select groups",
        multipleAxes: "Multiple Axis",
        showLegend: "Show Legend",
        exit: "Exit",
        chartTypeSettings: "Chart Type Settings",
        ChartType: "Chart Type",
        yes: "Yes",
        no: "No",
        numberFormatMenu: "Number Formatting...",
        conditionalFormattingMenu: "Conditional Formatting...",
        removeCalculatedField: "Are you sure you want to delete this calculated field?",
        replaceConfirmBefore: "A report named ",
        replaceConfirmAfter: " already exists. Do you want to replace it?",
        invalidJSON: "Invalid JSON data",
        invalidCSV: "Invalid CSV data",
        stacked: "Stacked",
        single: "Single",
        combined: "Combined",
        multipleAxisMode: "Multiple Axis Mode",
        grandTotalPosition: "Grand totals position",
        top: "Top",
        bottom: "Bottom",
        None: "None",
        rowPage: "Row pager",
        rowPerPage: "Rows per page",
        columnPage: "Column pager",
        columnPerPage: "Columns per page",
        goToFirstPage: "Go to first page",
        goToPreviousPage: "Go to previous page",
        goToNextPage: "Go to next page",
        goToLastPage: "Go to last page",
        subTotalPosition: "Subtotals position",
        auto: "Auto",
        loading: "Loading...",
        add: "Add"
      };
      this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale);
      this.renderContextMenu();
      this.isDragging = false;
      this.pivotDeferLayoutUpdate = isNullOrUndefined(this.pivotDeferLayoutUpdate) ? this.allowDeferLayoutUpdate : this.pivotDeferLayoutUpdate;
      this.addInternalEvents();
    };
    PivotView2.prototype.onBeforeTooltipOpen = function(args) {
      args.element.classList.add("e-pivottooltipwrap");
    };
    PivotView2.prototype.renderToolTip = function() {
      if (this.showTooltip) {
        if (this.tooltipTemplate) {
          this.tooltip = new Tooltip({
            target: "td.e-valuescontent",
            cssClass: "e-pivottooltiptemplate" + (this.cssClass ? " " + this.cssClass : ""),
            showTipPointer: false,
            position: "BottomRight",
            mouseTrail: true,
            enableRtl: this.enableRtl,
            locale: this.locale,
            enableHtmlSanitizer: this.enableHtmlSanitizer,
            beforeRender: this.setToolTip.bind(this),
            beforeOpen: this.onBeforeTooltipOpen
          });
        } else {
          this.tooltip = new Tooltip({
            target: "td.e-valuescontent",
            cssClass: this.cssClass,
            showTipPointer: false,
            position: "BottomRight",
            mouseTrail: true,
            enableRtl: this.enableRtl,
            locale: this.locale,
            enableHtmlSanitizer: this.enableHtmlSanitizer,
            beforeRender: this.setToolTip.bind(this),
            beforeOpen: this.onBeforeTooltipOpen
          });
        }
        this.tooltip.isStringTemplate = true;
        this.tooltip.appendTo(this.element);
      } else if (this.tooltip) {
        this.tooltip.destroy();
      }
    };
    PivotView2.prototype.renderContextMenu = function() {
      if (this.gridSettings.contextMenuItems || this.allowGrouping && this.dataType === "pivot") {
        var conmenuItems = [];
        var groupItems = [];
        var customItems = [];
        var exportItems = [];
        var aggItems = [];
        var expItems = [];
        var aggregateItems = [];
        if (this.gridSettings.contextMenuItems) {
          for (var _i = 0, _a = this.gridSettings.contextMenuItems; _i < _a.length; _i++) {
            var item = _a[_i];
            if (typeof item === "string" && this.getDefaultItems().indexOf(item) !== -1) {
              if (item.toString().toLowerCase().indexOf("aggregate") !== -1 && this.dataType === "pivot") {
                aggregateItems = [{
                  text: this.localeObj.getConstant("Sum")
                }];
                var aggregateGroup = this.buildDefaultItems("Aggregate");
                aggregateGroup.items = aggregateItems;
                aggItems.push(aggregateGroup);
              } else if (item.toString().toLowerCase().indexOf("export") !== -1) {
                exportItems.push(this.buildDefaultItems(item));
              } else {
                conmenuItems.push(this.buildDefaultItems(item));
              }
            } else if (typeof item !== "string") {
              customItems.push(item);
            }
          }
        }
        if (this.allowGrouping && this.dataType === "pivot") {
          if (!this.getFieldByID(this.element.id + "_custom_group", this.gridSettings.contextMenuItems)) {
            groupItems.push(this.buildDefaultItems("Group"));
          }
          if (!this.getFieldByID(this.element.id + "_custom_ungroup", this.gridSettings.contextMenuItems)) {
            groupItems.push(this.buildDefaultItems("Ungroup"));
          }
        }
        if (exportItems.length > 0) {
          var exportGroupItems = this.buildDefaultItems("export");
          exportGroupItems.items = exportItems;
          expItems.push(exportGroupItems);
        }
        var contextMenuItems = [];
        Array.prototype.push.apply(contextMenuItems, aggItems);
        Array.prototype.push.apply(contextMenuItems, conmenuItems);
        Array.prototype.push.apply(contextMenuItems, groupItems);
        Array.prototype.push.apply(contextMenuItems, expItems);
        Array.prototype.push.apply(contextMenuItems, customItems);
        this.setProperties({
          gridSettings: {
            contextMenuItems
          }
        }, true);
      }
    };
    PivotView2.prototype.getFieldByID = function(id, fields) {
      return new DataManager({
        json: fields
      }).executeLocal(new Query().where("id", "equal", id))[0];
    };
    PivotView2.prototype.getAllSummaryType = function() {
      return ["Sum", "Count", "DistinctCount", "Product", "Min", "Max", "Avg", "Median", "Index", "PopulationVar", "SampleVar", "PopulationStDev", "SampleStDev", "RunningTotals", "PercentageOfGrandTotal", "PercentageOfColumnTotal", "PercentageOfRowTotal", "PercentageOfParentColumnTotal", "PercentageOfParentRowTotal", "DifferenceFrom", "PercentageOfDifferenceFrom", "PercentageOfParentTotal"];
    };
    PivotView2.prototype.getDefaultItems = function() {
      return ["Drillthrough", "Expand", "Collapse", "Pdf Export", "Excel Export", "Csv Export", "Sort Ascending", "Sort Descending", "Aggregate", "CalculatedField"];
    };
    PivotView2.prototype.buildDefaultItems = function(item) {
      var menuItem;
      switch (item) {
        case "Aggregate":
          menuItem = {
            text: this.localeObj.getConstant("aggregate"),
            target: "th.e-valuesheader,td.e-valuescontent,.e-stot.e-rowsheader",
            id: this.element.id + "_aggregate"
          };
          break;
        case "CalculatedField":
          menuItem = {
            text: this.localeObj.getConstant("CalculatedField"),
            target: "td.e-valuescontent",
            id: this.element.id + "_CalculatedField"
          };
          break;
        case "Drillthrough":
          menuItem = {
            text: this.localeObj.getConstant("drillThrough"),
            target: "td.e-valuescontent",
            id: this.element.id + "_drillthrough_menu",
            iconCss: PIVOTVIEW_GRID + " " + ICON
          };
          break;
        case "export":
          menuItem = {
            text: this.localeObj.getConstant("export"),
            target: "td.e-valuescontent",
            id: this.element.id + "_exporting",
            iconCss: PIVOTVIEW_EXPORT + " " + ICON
          };
          break;
        case "Pdf Export":
          menuItem = {
            text: this.localeObj.getConstant("pdf"),
            id: this.element.id + "_pdf",
            iconCss: GRID_PDF_EXPORT + " " + ICON
          };
          break;
        case "Excel Export":
          menuItem = {
            text: this.localeObj.getConstant("excel"),
            id: this.element.id + "_excel",
            iconCss: GRID_EXCEL_EXPORT + " " + ICON
          };
          break;
        case "Csv Export":
          menuItem = {
            text: this.localeObj.getConstant("csv"),
            id: this.element.id + "_csv",
            iconCss: GRID_CSV_EXPORT + " " + ICON
          };
          break;
        case "Expand":
          menuItem = {
            text: this.localeObj.getConstant("expand"),
            target: "td.e-rowsheader,.e-columnsheader",
            id: this.element.id + "_expand",
            iconCss: PIVOTVIEW_EXPAND + " " + ICON
          };
          break;
        case "Collapse":
          menuItem = {
            text: this.localeObj.getConstant("collapse"),
            target: "td.e-rowsheader,.e-columnsheader",
            id: this.element.id + "_collapse",
            iconCss: PIVOTVIEW_COLLAPSE + " " + ICON
          };
          break;
        case "Sort Ascending":
          menuItem = {
            text: this.localeObj.getConstant("ascending"),
            target: "th.e-valuesheader,.e-stot",
            id: this.element.id + "_sortasc",
            iconCss: ICON_ASC + " " + ICON
          };
          break;
        case "Sort Descending":
          menuItem = {
            text: this.localeObj.getConstant("descending"),
            target: "th.e-valuesheader,.e-stot",
            id: this.element.id + "_sortdesc",
            iconCss: ICON_DESC + " " + ICON
          };
          break;
        case "Group":
          menuItem = {
            text: this.localeObj.getConstant("group"),
            target: "td.e-rowsheader,.e-columnsheader",
            id: this.element.id + "_custom_group",
            iconCss: PIVOTVIEW_GROUP + " " + ICON
          };
          break;
        case "Ungroup":
          menuItem = {
            text: this.localeObj.getConstant("unGroup"),
            target: "td.e-rowsheader,.e-columnsheader",
            id: this.element.id + "_custom_ungroup",
            iconCss: PIVOTVIEW_UN_GROUP + " " + ICON
          };
          break;
      }
      this.defaultItems[item] = {
        text: menuItem.text,
        id: menuItem.id,
        target: menuItem.target,
        iconCss: menuItem.iconCss
      };
      return this.defaultItems[item];
    };
    PivotView2.prototype.initProperties = function() {
      this.isTabular = this.gridSettings.layout === "Tabular" ? true : false;
      this.pivotRefresh = Component2.prototype.refresh;
      this.minHeight = isNullOrUndefined(this.minHeight) ? 300 : this.minHeight < 10 ? 10 : this.minHeight;
      this.isScrolling = false;
      this.allowServerDataBinding = false;
      this.isStaticRefresh = false;
      this.setProperties({
        pivotValues: []
      }, true);
      this.allowServerDataBinding = true;
      this.scrollPosObject = {
        vertical: 0,
        horizontal: 0,
        verticalSection: 0,
        horizontalSection: 0,
        top: 0,
        left: 0,
        scrollDirection: {
          direction: "",
          position: 0
        }
      };
      this.queryCellInfo = this.gridSettings.queryCellInfo ? this.gridSettings.queryCellInfo : void 0;
      this.headerCellInfo = this.gridSettings.headerCellInfo ? this.gridSettings.headerCellInfo : void 0;
      this.resizing = this.gridSettings.resizing ? this.gridSettings.resizing : void 0;
      this.resizeStop = this.gridSettings.resizeStop ? this.gridSettings.resizeStop : void 0;
      this.pdfHeaderQueryCellInfo = this.gridSettings.pdfHeaderQueryCellInfo ? this.gridSettings.pdfHeaderQueryCellInfo : void 0;
      this.pdfQueryCellInfo = this.gridSettings.pdfQueryCellInfo ? this.gridSettings.pdfQueryCellInfo : void 0;
      this.excelHeaderQueryCellInfo = this.gridSettings.excelHeaderQueryCellInfo ? this.gridSettings.excelHeaderQueryCellInfo : void 0;
      this.excelQueryCellInfo = this.gridSettings.excelQueryCellInfo ? this.gridSettings.excelQueryCellInfo : void 0;
      this.columnDragStart = this.gridSettings.columnDragStart ? this.gridSettings.columnDragStart : void 0;
      this.columnDrag = this.gridSettings.columnDrag ? this.gridSettings.columnDrag : void 0;
      this.columnDrop = this.gridSettings.columnDrop ? this.gridSettings.columnDrop : void 0;
      this.beforeColumnsRender = this.gridSettings.columnRender ? this.gridSettings.columnRender : void 0;
      this.selected = this.gridSettings.cellSelected ? this.gridSettings.cellSelected : void 0;
      this.selecting = this.gridSettings.cellSelecting ? this.gridSettings.cellSelecting : void 0;
      this.cellDeselected = this.gridSettings.cellDeselected ? this.gridSettings.cellDeselected : void 0;
      this.rowSelected = this.gridSettings.rowSelected ? this.gridSettings.rowSelected : void 0;
      this.rowDeselected = this.gridSettings.rowDeselected ? this.gridSettings.rowDeselected : void 0;
      this.chartTooltipRender = this.chartSettings.tooltipRender ? this.chartSettings.tooltipRender : void 0;
      this.chartLegendClick = this.chartSettings.legendClick ? this.chartSettings.legendClick : void 0;
      this.chartLoaded = this.chartSettings.loaded ? this.chartSettings.loaded : void 0;
      this.chartLoad = this.chartSettings.load ? this.chartSettings.load : void 0;
      this.chartResized = this.chartSettings.resized ? this.chartSettings.resized : void 0;
      this.chartAxisLabelRender = this.chartSettings.axisLabelRender ? this.chartSettings.axisLabelRender : void 0;
      this.multiLevelLabelClick = this.chartSettings.multiLevelLabelClick ? this.chartSettings.multiLevelLabelClick : void 0;
      this.chartPointClick = this.chartSettings.pointClick ? this.chartSettings.pointClick : void 0;
      this.contextMenuClick = this.gridSettings.contextMenuClick ? this.gridSettings.contextMenuClick : void 0;
      this.contextMenuOpen = this.gridSettings.contextMenuOpen ? this.gridSettings.contextMenuOpen : void 0;
      this.beforePdfExport = this.gridSettings.beforePdfExport ? this.gridSettings.beforePdfExport : void 0;
      this.beforeExcelExport = this.gridSettings.beforeExcelExport ? this.gridSettings.beforeExcelExport : void 0;
      this.beforePrint = this.chartSettings.beforePrint ? this.chartSettings.beforePrint : void 0;
      this.animationComplete = this.chartSettings.animationComplete ? this.chartSettings.animationComplete : void 0;
      this.legendRender = this.chartSettings.legendRender ? this.chartSettings.legendRender : void 0;
      this.textRender = this.chartSettings.textRender ? this.chartSettings.textRender : void 0;
      this.pointRender = this.chartSettings.pointRender ? this.chartSettings.pointRender : void 0;
      this.seriesRender = this.chartSettings.seriesRender ? this.chartSettings.seriesRender : void 0;
      this.chartMouseMove = this.chartSettings.chartMouseMove ? this.chartSettings.chartMouseMove : void 0;
      this.chartMouseClick = this.chartSettings.chartMouseClick ? this.chartSettings.chartMouseClick : void 0;
      this.pointMove = this.chartSettings.pointMove ? this.chartSettings.pointMove : void 0;
      this.chartMouseLeave = this.chartSettings.chartMouseLeave ? this.chartSettings.chartMouseLeave : void 0;
      this.chartMouseDown = this.chartSettings.chartMouseDown ? this.chartSettings.chartMouseDown : void 0;
      this.chartMouseUp = this.chartSettings.chartMouseUp ? this.chartSettings.chartMouseUp : void 0;
      this.dragComplete = this.chartSettings.dragComplete ? this.chartSettings.dragComplete : void 0;
      this.zoomComplete = this.chartSettings.zoomComplete ? this.chartSettings.zoomComplete : void 0;
      this.scrollStart = this.chartSettings.scrollStart ? this.chartSettings.scrollStart : void 0;
      this.scrollEnd = this.chartSettings.scrollEnd ? this.chartSettings.scrollEnd : void 0;
      this.scrollChanged = this.chartSettings.scrollChanged ? this.chartSettings.scrollChanged : void 0;
      this.multiLevelLabelRender = this.chartSettings.multiLevelLabelRender ? this.chartSettings.multiLevelLabelRender : void 0;
      if (this.gridSettings.rowHeight === null) {
        if (this.isTouchMode) {
          this.setProperties({
            gridSettings: {
              rowHeight: 36
            }
          }, true);
        } else {
          this.setProperties({
            gridSettings: {
              rowHeight: this.isAdaptive ? 36 : 30
            }
          }, true);
        }
      }
      if (this.chartSettings && this.chartSettings.showMemberSeries && !this.chartSettings.showPointColorByMembers) {
        this.setProperties({
          chartSettings: {
            showPointColorByMembers: true
          }
        }, true);
      }
      this.element.style.height = "100%";
      if (this.enableVirtualization) {
        this.updatePageSettings(true);
      }
      this.isCellBoxMultiSelection = this.gridSettings.allowSelection && this.gridSettings.selectionSettings.cellSelectionMode === "Box" && this.gridSettings.selectionSettings.mode === "Cell" && this.gridSettings.selectionSettings.type === "Multiple";
      if (this.allowGrouping && !this.isCellBoxMultiSelection) {
        this.isCellBoxMultiSelection = true;
        this.setProperties({
          gridSettings: {
            allowSelection: true,
            selectionSettings: {
              cellSelectionMode: "Box",
              mode: "Cell",
              type: "Multiple"
            }
          }
        }, true);
      }
      if (this.displayOption.view !== "Table") {
        this.pivotChartModule = new PivotChart(this);
      }
      this.currentView = this.currentView ? this.currentView : this.displayOption.view === "Both" ? this.displayOption.primary : this.displayOption.view;
    };
    PivotView2.prototype.updatePageSettings = function(isInit) {
      if (this.enableVirtualization) {
        var colValues = 1;
        var rowValues = 1;
        if (this.dataSourceSettings.values.length > 1 && this.dataType === "pivot") {
          if (this.dataSourceSettings.valueAxis === "row") {
            rowValues = this.dataSourceSettings.values.length;
          } else {
            colValues = this.dataSourceSettings.values.length;
          }
        }
        var heightAsNumber = this.getHeightAsNumber();
        if (isNaN(heightAsNumber)) {
          heightAsNumber = this.element.offsetHeight;
        }
        this.pageSettings = {
          currentColumnPage: isInit ? 1 : this.pageSettings.currentColumnPage,
          currentRowPage: isInit ? 1 : this.pageSettings.currentRowPage,
          columnPageSize: Math.ceil((Math.floor(this.getWidthAsNumber() / this.gridSettings.columnWidth) - 1) / colValues),
          rowPageSize: Math.ceil(Math.floor(heightAsNumber / this.gridSettings.rowHeight) / rowValues)
        };
      }
    };
    PivotView2.prototype.render = function() {
      this.loadData();
    };
    PivotView2.prototype.loadData = function() {
      if (this.dataSourceSettings.formatSettings.length > 0) {
        var formatfield = this.dataSourceSettings.formatSettings;
        for (var i = 0; i < formatfield.length; i++) {
          if ((!isNullOrUndefined(formatfield[i].maximumFractionDigits) || !isNullOrUndefined(formatfield[i].minimumFractionDigits)) && formatfield[i].format.match(/^(P|N|C|P[0-9]|C[0-9]|N[0-9])$/g) === null) {
            formatfield[i].maximumFractionDigits = void 0;
            formatfield[i].minimumIntegerDigits = void 0;
          }
        }
      }
      if (this.dataType === "pivot" && this.dataSourceSettings.url && this.dataSourceSettings.url !== "") {
        if (this.dataSourceSettings.mode === "Server") {
          this.guid = PivotUtil.generateUUID();
          this.initialLoad();
          if (this.displayOption.view !== "Chart") {
            this.renderEmptyGrid();
          } else {
            this.refreshData();
          }
          this.showWaitingPopup();
        } else {
          var request = new Fetch(this.dataSourceSettings.url, "GET");
          request.send().then(function(response) {
            return typeof response === "string" ? response : response.text();
          }).then(this.onReadyStateChange.bind(this));
        }
      } else {
        this.initialLoad();
      }
    };
    PivotView2.prototype.onSuccess = function(excelExportProperties) {
      if (this.request.readyState === XMLHttpRequest.DONE) {
        if (this.currentAction === "onExcelExport" || this.currentAction === "onCsvExport") {
          if (this.request.status === 200) {
            var buffer = this.request.response;
            var fileName = isNullOrUndefined(excelExportProperties.fileName) ? this.currentAction === "onExcelExport" ? "default.xlsx" : "default.csv" : excelExportProperties.fileName;
            Save.save(fileName, buffer);
          }
        } else {
          this.isServerWaitingPopup = true;
          try {
            var params = {
              action: this.currentAction,
              response: this.request.responseText
            };
            this.trigger(afterServiceInvoke, params);
            var engine = JSON.parse(this.request.responseText);
            if (this.currentAction === "fetchFieldMembers") {
              var currentMembers = JSON.parse(engine.members);
              var dateMembers = [];
              var members = {};
              var isDateField = PivotUtil.isDateField(engine.memberName, this.engineModule);
              var isNumberType = this.engineModule.fieldList[engine.memberName].type === "number";
              var keys = Object.keys(currentMembers);
              for (var i = 0, j = keys.length; i < j; i++) {
                var values = currentMembers[keys[i]];
                var formattedValue = isDateField ? this.engineModule.getFormattedValue(values.Name, engine.memberName) : {
                  formattedText: values.Caption
                };
                members[keys[i]] = {
                  index: values.Index,
                  ordinal: values.Ordinal,
                  isDrilled: values.IsDrilled,
                  caption: formattedValue.formattedText
                };
                dateMembers.push({
                  formattedText: formattedValue.formattedText,
                  actualText: isDateField ? formattedValue.actualText : isNumberType ? !isNaN(Number(values.Name)) ? Number(values.Name) : values.Name : values.Name
                });
              }
              this.engineModule.fieldList[engine.memberName].members = members;
              this.engineModule.fieldList[engine.memberName].dateMember = dateMembers;
              if (this.showGroupingBar) {
                this.pivotButtonModule.updateFilterEvents();
              } else {
                this.pivotFieldListModule.pivotButtonModule.updateFilterEvents();
              }
            } else if (this.currentAction === "fetchRawData") {
              var valueCaption = this.engineModule.fieldList[this.drillThroughValue.actualText.toString()] ? this.engineModule.fieldList[this.drillThroughValue.actualText.toString()].caption : this.drillThroughValue.actualText.toString();
              var aggType = this.engineModule.fieldList[this.drillThroughValue.actualText] ? this.engineModule.fieldList[this.drillThroughValue.actualText].aggregateType : "";
              var rawData = JSON.parse(engine.rawData);
              var parsedObj = JSON.parse(engine.indexObject);
              var indexObject = {};
              for (var len = 0; len < parsedObj.length; len++) {
                indexObject[parsedObj[len].Key] = parsedObj[len].Value;
              }
              this.drillThroughValue.indexObject = indexObject;
              this.drillThroughModule.triggerDialog(valueCaption, aggType, rawData, this.drillThroughValue, this.drillThroughElement);
              this.hideWaitingPopup();
            } else {
              var fList = JSON.parse(engine.fieldList);
              if (this.engineModule.fieldList) {
                var keys = Object.keys(this.engineModule.fieldList);
                for (var i = 0; i < keys.length; i++) {
                  if (this.engineModule.fieldList[keys[i]] && fList[keys[i]]) {
                    fList[keys[i]].dateMember = this.engineModule.fieldList[keys[i]].dateMember;
                    fList[keys[i]].formattedMembers = this.engineModule.fieldList[keys[i]].formattedMembers;
                    fList[keys[i]].members = this.engineModule.fieldList[keys[i]].members;
                  }
                }
              }
              this.engineModule.fieldList = fList;
              this.engineModule.fields = JSON.parse(engine.fields);
              this.engineModule.rowCount = JSON.parse(engine.pivotCount).RowCount;
              this.engineModule.columnCount = JSON.parse(engine.pivotCount).ColumnCount;
              this.engineModule.rowStartPos = JSON.parse(engine.pivotCount).RowStartPosition;
              this.engineModule.colStartPos = JSON.parse(engine.pivotCount).ColumnStartPosition;
              this.engineModule.rowFirstLvl = JSON.parse(engine.pivotCount).RowFirstLevel;
              this.engineModule.colFirstLvl = JSON.parse(engine.pivotCount).ColumnFirstLevel;
              this.engineModule.columnPageCount = JSON.parse(engine.pivotCount).ColumnPageCount;
              this.engineModule.rowPageCount = JSON.parse(engine.pivotCount).RowPageCount;
              var rowPos = void 0;
              var pivotValues = JSON.parse(engine.pivotValue);
              for (var rCnt = 0; rCnt < pivotValues.length; rCnt++) {
                if (pivotValues[rCnt] && pivotValues[rCnt][0] && pivotValues[rCnt][0].axis === "row") {
                  rowPos = rCnt;
                  break;
                }
              }
              this.engineModule.headerContent = PivotUtil.frameContent(pivotValues, "header", rowPos, this);
              this.engineModule.pageSettings = this.pageSettings;
              var parsedData = JSON.parse(engine.dataSourceSettings);
              if (this.dataSourceSettings.groupSettings.length > 0) {
                this.setProperties({
                  dataSourceSettings: {
                    rows: parsedData.rows
                  }
                }, true);
                this.setProperties({
                  dataSourceSettings: {
                    columns: parsedData.columns
                  }
                }, true);
                this.setProperties({
                  dataSourceSettings: {
                    formatSettings: parsedData.formatSettings
                  }
                }, true);
              }
              var valueSort = parsedData.valueSortSettings;
              this.engineModule.valueSortSettings = {
                headerText: valueSort.headerText,
                headerDelimiter: valueSort.headerDelimiter,
                sortOrder: valueSort.sortOrder,
                columnIndex: valueSort.columnIndex
              };
              this.engineModule.pivotValues = pivotValues;
              this.engineModule.isEmptyData = engine.isEmptyData;
              this.engineModule.isEngineUpdated = engine.isEngineUpdated;
              for (var _i = 0, _a = this.dataSourceSettings.values; _i < _a.length; _i++) {
                var value = _a[_i];
                this.engineModule.valueAxisFields[value.name] = value;
              }
              this.engineModule.globalize = !isNullOrUndefined(this.globalize) ? this.globalize : new Internationalization();
              this.engineModule.formatFields = this.engineModule.setFormattedFields(this.dataSourceSettings.formatSettings);
            }
          } catch (error) {
            this.engineModule.pivotValues = [];
          }
          if (this.currentAction === "onScroll") {
            if (this.scrollDirection === "vertical") {
              var rowValues = this.dataSourceSettings.valueAxis === "row" ? this.dataSourceSettings.values.length : 1;
              var exactSize = this.pageSettings.rowPageSize * rowValues * this.gridSettings.rowHeight;
              var exactPage = Math.ceil(this.engineModule.rowStartPos / (this.pageSettings.rowPageSize * rowValues));
              var pos = exactSize * exactPage - this.engineModule.rowFirstLvl * rowValues * this.gridSettings.rowHeight;
              this.scrollPosObject.verticalSection = pos;
            } else if (this.scrollDirection === "horizondal") {
              var colValues = this.dataSourceSettings.valueAxis === "column" ? this.dataSourceSettings.values.length : 1;
              var exactSize = this.pageSettings.columnPageSize * colValues * this.gridSettings.columnWidth;
              var exactPage = Math.ceil(this.engineModule.colStartPos / (this.pageSettings.columnPageSize * colValues));
              var pos = exactSize * exactPage - this.engineModule.colFirstLvl * colValues * this.gridSettings.columnWidth;
              this.scrollPosObject.horizontalSection = pos;
            }
          }
          if (this.currentAction !== "fetchFieldMembers" && this.currentAction !== "fetchRawData") {
            this.initEngine();
            if (this.calculatedFieldModule && this.calculatedFieldModule.isRequireUpdate) {
              this.calculatedFieldModule.endDialog();
              this.calculatedFieldModule.isRequireUpdate = false;
            }
            if (this.pivotFieldListModule && this.pivotFieldListModule.calculatedFieldModule && this.pivotFieldListModule.calculatedFieldModule.isRequireUpdate) {
              this.pivotFieldListModule.calculatedFieldModule.endDialog();
              this.pivotFieldListModule.calculatedFieldModule.isRequireUpdate = false;
            }
          }
        }
      }
    };
    PivotView2.prototype.getEngine = function(action, drillItem, sortItem, aggField, cField, filterItem, memberName, rawDataArgs, editArgs, excelExportProperties) {
      var _this_1 = this;
      this.engineModule.isEmptyData = false;
      if (this.element.querySelector(".e-spin-hide") && !(action === "onExcelExport" || action === "onCsvExport")) {
        this.showWaitingPopup();
      }
      this.currentAction = action;
      this.isServerWaitingPopup = false;
      var customProperties = {
        pageSettings: JSON.parse(this.getPageSettings()).pageSettings,
        enableValueSorting: this.enableValueSorting,
        enablePaging: this.enablePaging,
        enableVirtualization: this.enableVirtualization,
        allowDataCompression: this.allowDataCompression,
        enableDrillThrough: this.allowDrillThrough || this.editSettings.allowEditing,
        locale: JSON.stringify(PivotUtil.getLocalizedObject(this)),
        savedFieldList: action === "onDrop" && this.engineModule.fieldList !== null ? PivotUtil.getClonedFieldList(this.engineModule.fieldList, true) : void 0,
        enableOptimizedRendering: this.enableVirtualization && this.virtualScrollSettings && this.virtualScrollSettings.allowSinglePage,
        requestType: "string",
        headers: {
          "Content-type": "application/json"
        }
      };
      if (this.request.readyState === XMLHttpRequest.UNSENT || this.request.readyState === XMLHttpRequest.OPENED) {
        this.request.withCredentials = false;
      }
      var params = {
        request: this.request,
        dataSourceSettings: JSON.parse(this.getPersistData()).dataSourceSettings,
        action,
        customProperties: {},
        internalProperties: customProperties,
        drillItem,
        sortItem,
        aggregatedItem: aggField,
        calculatedItem: cField,
        filterItem,
        memberName,
        fetchRawDataArgs: rawDataArgs,
        editArgs,
        hash: this.guid,
        excelExportProperties,
        exportAllPages: this.exportAllPages,
        isGroupingUpdated: this.currentAction === "onRefresh" && this.dataSourceSettings.groupSettings.length > 0 ? true : this.groupingModule ? this.groupingModule.isUpdate : false
      };
      this.trigger(beforeServiceInvoke, params, function(observedArgs) {
        _this_1.request = observedArgs.request;
        params.internalProperties = observedArgs.internalProperties;
        params.customProperties = observedArgs.customProperties;
        params.dataSourceSettings = observedArgs.dataSourceSettings;
        params.calculatedItem = observedArgs.calculatedItem;
        params.drillItem = observedArgs.drillItem;
        params.editArgs = observedArgs.editArgs;
        params.fetchRawDataArgs = observedArgs.fetchRawDataArgs;
        params.filterItem = observedArgs.filterItem;
        params.hash = observedArgs.hash;
        params.memberName = observedArgs.memberName;
        params.sortItem = observedArgs.sortItem;
        params.excelExportProperties = observedArgs.excelExportProperties;
        params.exportAllPages = observedArgs.exportAllPages;
      });
      this.request.open("POST", this.dataSourceSettings.url, true);
      this.request.onreadystatechange = this.onSuccess.bind(this, params.excelExportProperties);
      if (params.action === "onExcelExport" || params.action === "onCsvExport") {
        this.request.responseType = "blob";
      } else {
        this.request.responseType = "";
      }
      var keys = Object.keys(params.internalProperties.headers);
      for (var i = 0; i < keys.length; i++) {
        var headerKey = keys[i];
        var headerValue = String(params.internalProperties.headers[headerKey]);
        this.request.setRequestHeader(headerKey, headerValue);
      }
      if (params.internalProperties.requestType === "string") {
        this.request.send(JSON.stringify(params));
      } else if (params.internalProperties.requestType === "base64") {
        this.request.send(btoa(JSON.stringify(params)));
      }
    };
    PivotView2.prototype.getChartSettings = function() {
      var keyEntity = ["chartSettings"];
      var chartLoadEvent = this.chartSettings["load"];
      var chartLoadedEvent = this.chartSettings["loaded"];
      var chartTextRenderEvent = this.chartSettings["textRender"];
      var chartPointRenderEvent = this.chartSettings["pointRender"];
      var chartSeriesRenderEvent = this.chartSettings["seriesRender"];
      var chartLegendRenderEvent = this.chartSettings["legendRender"];
      var chartPointClickEvent = this.chartSettings["pointClick"];
      var chartTooltipRenderEvent = this.chartSettings["tooltipRender"];
      var chartLegendClickEvent = this.chartSettings["legendClick"];
      var chartMultiLevelLabelRenderEvent = this.chartSettings["multiLevelLabelRender"];
      var chartBeforePrintEvent = this.chartSettings["beforePrint"];
      var chartAnimationCompleteEvent = this.chartSettings["animationComplete"];
      var chartMouseMoveEvent = this.chartSettings["chartMouseMove"];
      var chartMouseClickEvent = this.chartSettings["chartMouseClick"];
      var chartPointMoveEvent = this.chartSettings["pointMove"];
      var chartMouseLeaveEvent = this.chartSettings["chartMouseLeave"];
      var chartMouseDownEvent = this.chartSettings["chartMouseDown"];
      var chartMouseUpEvent = this.chartSettings["chartMouseUp"];
      var chartDragCompleteEvent = this.chartSettings["dragComplete"];
      var chartZoomCompleteEvent = this.chartSettings["zoomComplete"];
      var chartScrollStartEvent = this.chartSettings["scrollStart"];
      var chartScrollEndEvent = this.chartSettings["scrollEnd"];
      var chartScrollChangedEvent = this.chartSettings["scrollChanged"];
      this.chartSettings["load"] = void 0;
      this.chartSettings["loaded"] = void 0;
      this.chartSettings["textRender"] = void 0;
      this.chartSettings["pointRender"] = void 0;
      this.chartSettings["seriesRender"] = void 0;
      this.chartSettings["legendRender"] = void 0;
      this.chartSettings["pointClick"] = void 0;
      this.chartSettings["tooltipRender"] = void 0;
      this.chartSettings["legendClick"] = void 0;
      this.chartSettings["multiLevelLabelRender"] = void 0;
      this.chartSettings["beforePrint"] = void 0;
      this.chartSettings["animationComplete"] = void 0;
      this.chartSettings["chartMouseMove"] = void 0;
      this.chartSettings["chartMouseClick"] = void 0;
      this.chartSettings["pointMove"] = void 0;
      this.chartSettings["chartMouseLeave"] = void 0;
      this.chartSettings["chartMouseDown"] = void 0;
      this.chartSettings["chartMouseUp"] = void 0;
      this.chartSettings["dragComplete"] = void 0;
      this.chartSettings["zoomComplete"] = void 0;
      this.chartSettings["scrollStart"] = void 0;
      this.chartSettings["scrollEnd"] = void 0;
      this.chartSettings["scrollChanged"] = void 0;
      var persistData = this.addOnPersist(keyEntity);
      this.chartSettings["load"] = chartLoadEvent;
      this.chartSettings["loaded"] = chartLoadedEvent;
      this.chartSettings["textRender"] = chartTextRenderEvent;
      this.chartSettings["pointRender"] = chartPointRenderEvent;
      this.chartSettings["seriesRender"] = chartSeriesRenderEvent;
      this.chartSettings["legendRender"] = chartLegendRenderEvent;
      this.chartSettings["pointClick"] = chartPointClickEvent;
      this.chartSettings["tooltipRender"] = chartTooltipRenderEvent;
      this.chartSettings["legendClick"] = chartLegendClickEvent;
      this.chartSettings["multiLevelLabelRender"] = chartMultiLevelLabelRenderEvent;
      this.chartSettings["beforePrint"] = chartBeforePrintEvent;
      this.chartSettings["animationComplete"] = chartAnimationCompleteEvent;
      this.chartSettings["chartMouseMove"] = chartMouseMoveEvent;
      this.chartSettings["chartMouseClick"] = chartMouseClickEvent;
      this.chartSettings["pointMove"] = chartPointMoveEvent;
      this.chartSettings["chartMouseLeave"] = chartMouseLeaveEvent;
      this.chartSettings["chartMouseDown"] = chartMouseDownEvent;
      this.chartSettings["chartMouseUp"] = chartMouseUpEvent;
      this.chartSettings["dragComplete"] = chartDragCompleteEvent;
      this.chartSettings["zoomComplete"] = chartZoomCompleteEvent;
      this.chartSettings["scrollStart"] = chartScrollStartEvent;
      this.chartSettings["scrollEnd"] = chartScrollEndEvent;
      this.chartSettings["scrollChanged"] = chartScrollChangedEvent;
      return persistData;
    };
    PivotView2.prototype.getPageSettings = function() {
      var keyEntity = ["pageSettings"];
      var persistData = this.addOnPersist(keyEntity);
      return persistData;
    };
    PivotView2.prototype.onReadyStateChange = function(result) {
      var dataSource = [];
      if (this.dataSourceSettings.type === "CSV") {
        var jsonObject = result.split(/\r?\n|\r/);
        for (var i = 0; i < jsonObject.length; i++) {
          if (!isNullOrUndefined(jsonObject[i]) && jsonObject[i] !== "") {
            dataSource.push(jsonObject[i].split(","));
          }
        }
      } else {
        try {
          dataSource = JSON.parse(result);
        } catch (error) {
          dataSource = [];
        }
      }
      if (dataSource && dataSource.length > 0) {
        this.setProperties({
          dataSourceSettings: {
            dataSource
          }
        }, true);
      }
      this.initialLoad();
    };
    PivotView2.prototype.initialLoad = function() {
      var _this_1 = this;
      try {
        this.cellTemplateFn = this.templateParser(this.cellTemplate);
        this.tooltipTemplateFn = this.templateParser(this.tooltipTemplate);
        if (this.spinnerTemplate) {
          createSpinner({
            target: this.element,
            template: this.spinnerTemplate,
            cssClass: this.cssClass ? this.cssClass : void 0
          }, this.createElement);
        } else {
          createSpinner({
            target: this.element,
            cssClass: this.cssClass ? this.cssClass : void 0
          }, this.createElement);
        }
        var loadArgs_1 = {
          dataSourceSettings: this.dataSourceSettings,
          pivotview: this,
          fieldsType: {},
          defaultFieldListOrder: this.defaultFieldListOrder
        };
        this.trigger(load, loadArgs_1, function(observedArgs) {
          _this_1.dataSourceSettings = observedArgs.dataSourceSettings;
          _this_1.fieldsType = observedArgs.fieldsType;
          _this_1.defaultFieldListOrder = loadArgs_1.defaultFieldListOrder;
          _this_1.updateClass();
          _this_1.notify(initSubComponent, {});
          _this_1.notify(initialLoad, {});
          if (_this_1.isAdaptive) {
            _this_1.contextMenuModule.render();
          }
          _this_1.notify(initToolbar, {});
          _this_1.notify(initPivotPager, {});
        });
      } catch (execption) {
        this.actionFailureMethod(execption);
      }
    };
    PivotView2.prototype.addInternalEvents = function() {
      this.on(initialLoad, this.generateData, this);
      this.on(dataReady, this.renderPivotGrid, this);
      this.on(contentReady, this.onContentReady, this);
    };
    PivotView2.prototype.removeInternalEvents = function() {
      this.off(initialLoad, this.generateData);
      this.off(dataReady, this.renderPivotGrid);
      this.off(contentReady, this.onContentReady);
    };
    PivotView2.prototype.getPersistData = function(isRemoveDatasource) {
      var keyEntity = ["dataSourceSettings", "pivotValues", "gridSettings", "chartSettings", "displayOption", "pageSettings"];
      var columnRender = this.gridSettings["columnRender"];
      var excelQueryCellInfo2 = this.gridSettings["excelQueryCellInfo"];
      var excelHeaderQueryCellInfo2 = this.gridSettings["excelHeaderQueryCellInfo"];
      var pdfQueryCellInfo2 = this.gridSettings["pdfQueryCellInfo"];
      var pdfHeaderQueryCellInfo2 = this.gridSettings["pdfHeaderQueryCellInfo"];
      var chartLoadEvent = this.chartSettings["load"];
      var chartLoadedEvent = this.chartSettings["loaded"];
      var chartTextRenderEvent = this.chartSettings["textRender"];
      var chartPointRenderEvent = this.chartSettings["pointRender"];
      var chartSeriesRenderEvent = this.chartSettings["seriesRender"];
      var chartLegendRenderEvent = this.chartSettings["legendRender"];
      var chartPointClickEvent = this.chartSettings["pointClick"];
      var chartTooltipRenderEvent = this.chartSettings["tooltipRender"];
      var chartLegendClickEvent = this.chartSettings["legendClick"];
      var chartMultiLevelLabelRenderEvent = this.chartSettings["multiLevelLabelRender"];
      var chartBeforePrintEvent = this.chartSettings["beforePrint"];
      var chartAnimationCompleteEvent = this.chartSettings["animationComplete"];
      var chartMouseMoveEvent = this.chartSettings["chartMouseMove"];
      var chartMouseClickEvent = this.chartSettings["chartMouseClick"];
      var chartPointMoveEvent = this.chartSettings["pointMove"];
      var chartMouseLeaveEvent = this.chartSettings["chartMouseLeave"];
      var chartMouseDownEvent = this.chartSettings["chartMouseDown"];
      var chartMouseUpEvent = this.chartSettings["chartMouseUp"];
      var chartDragCompleteEvent = this.chartSettings["dragComplete"];
      var chartZoomCompleteEvent = this.chartSettings["zoomComplete"];
      var chartScrollStartEvent = this.chartSettings["scrollStart"];
      var chartScrollEndEvent = this.chartSettings["scrollEnd"];
      var chartScrollChangedEvent = this.chartSettings["scrollChanged"];
      this.gridSettings["columnRender"] = void 0;
      this.gridSettings["excelQueryCellInfo"] = void 0;
      this.gridSettings["excelHeaderQueryCellInfo"] = void 0;
      this.gridSettings["pdfQueryCellInfo"] = void 0;
      this.gridSettings["pdfHeaderQueryCellInfo"] = void 0;
      this.chartSettings["tooltipRender"] = void 0;
      this.chartSettings["legendClick"] = void 0;
      this.chartSettings["multiLevelLabelRender"] = void 0;
      this.chartSettings["load"] = void 0;
      this.chartSettings["loaded"] = void 0;
      this.chartSettings["textRender"] = void 0;
      this.chartSettings["pointRender"] = void 0;
      this.chartSettings["seriesRender"] = void 0;
      this.chartSettings["legendRender"] = void 0;
      this.chartSettings["pointClick"] = void 0;
      this.chartSettings["beforePrint"] = void 0;
      this.chartSettings["animationComplete"] = void 0;
      this.chartSettings["chartMouseMove"] = void 0;
      this.chartSettings["chartMouseClick"] = void 0;
      this.chartSettings["pointMove"] = void 0;
      this.chartSettings["chartMouseLeave"] = void 0;
      this.chartSettings["chartMouseDown"] = void 0;
      this.chartSettings["chartMouseUp"] = void 0;
      this.chartSettings["dragComplete"] = void 0;
      this.chartSettings["zoomComplete"] = void 0;
      this.chartSettings["scrollStart"] = void 0;
      this.chartSettings["scrollEnd"] = void 0;
      this.chartSettings["scrollChanged"] = void 0;
      var dataSource = [];
      if (isRemoveDatasource) {
        dataSource = this.dataSourceSettings.dataSource && !(this.dataSourceSettings.dataSource instanceof DataManager) ? this.dataSourceSettings.dataSource.slice() : this.dataSourceSettings.dataSource;
        this.setProperties({
          dataSourceSettings: {
            dataSource: []
          }
        }, true);
      }
      var persistData = this.addOnPersist(keyEntity);
      this.gridSettings["columnRender"] = columnRender;
      this.gridSettings["excelQueryCellInfo"] = excelQueryCellInfo2;
      this.gridSettings["excelHeaderQueryCellInfo"] = excelHeaderQueryCellInfo2;
      this.gridSettings["pdfQueryCellInfo"] = pdfQueryCellInfo2;
      this.gridSettings["pdfHeaderQueryCellInfo"] = pdfHeaderQueryCellInfo2;
      this.chartSettings["load"] = chartLoadEvent;
      this.chartSettings["loaded"] = chartLoadedEvent;
      this.chartSettings["textRender"] = chartTextRenderEvent;
      this.chartSettings["pointRender"] = chartPointRenderEvent;
      this.chartSettings["seriesRender"] = chartSeriesRenderEvent;
      this.chartSettings["legendRender"] = chartLegendRenderEvent;
      this.chartSettings["pointClick"] = chartPointClickEvent;
      this.chartSettings["tooltipRender"] = chartTooltipRenderEvent;
      this.chartSettings["legendClick"] = chartLegendClickEvent;
      this.chartSettings["multiLevelLabelRender"] = chartMultiLevelLabelRenderEvent;
      this.chartSettings["beforePrint"] = chartBeforePrintEvent;
      this.chartSettings["animationComplete"] = chartAnimationCompleteEvent;
      this.chartSettings["chartMouseMove"] = chartMouseMoveEvent;
      this.chartSettings["chartMouseClick"] = chartMouseClickEvent;
      this.chartSettings["pointMove"] = chartPointMoveEvent;
      this.chartSettings["chartMouseLeave"] = chartMouseLeaveEvent;
      this.chartSettings["chartMouseDown"] = chartMouseDownEvent;
      this.chartSettings["chartMouseUp"] = chartMouseUpEvent;
      this.chartSettings["dragComplete"] = chartDragCompleteEvent;
      this.chartSettings["zoomComplete"] = chartZoomCompleteEvent;
      this.chartSettings["scrollStart"] = chartScrollStartEvent;
      this.chartSettings["scrollEnd"] = chartScrollEndEvent;
      this.chartSettings["scrollChanged"] = chartScrollChangedEvent;
      if (isRemoveDatasource) {
        this.setProperties({
          dataSourceSettings: {
            dataSource
          }
        }, true);
      }
      return persistData;
    };
    PivotView2.prototype.loadPersistData = function(persistData) {
      var pivotData = JSON.parse(persistData);
      this.allowServerDataBinding = false;
      this.setProperties({
        gridSettings: pivotData.gridSettings,
        pivotValues: pivotData.pivotValues,
        chartSettings: pivotData.chartSettings,
        displayOption: pivotData.displayOption
      }, true);
      if (pivotData.displayOption.primary === "Chart") {
        this.currentView = "Chart";
      } else {
        this.currentView = "Table";
      }
      this.allowServerDataBinding = true;
      if (this.dataSourceSettings && this.dataSourceSettings.dataSource && this.dataSourceSettings.dataSource instanceof DataManager && pivotData.dataSourceSettings && pivotData.dataSourceSettings.dataSource && pivotData.dataSourceSettings.dataSource.dataSource && this.dataSourceSettings.dataSource.dataSource && pivotData.dataSourceSettings.dataSource.dataSource.url === this.dataSourceSettings.dataSource.dataSource.url) {
        pivotData.dataSourceSettings.dataSource = this.dataSourceSettings.dataSource;
      }
      this.dataSourceSettings = pivotData.dataSourceSettings;
    };
    PivotView2.prototype.mergePersistPivotData = function() {
      var data = window.localStorage.getItem(this.getModuleName() + this.element.id);
      if (!(isNullOrUndefined(data) || data === "")) {
        var dataObj = JSON.parse(data);
        if (this.dataSourceSettings && this.dataSourceSettings.dataSource && this.dataSourceSettings.dataSource instanceof DataManager && dataObj.dataSourceSettings && dataObj.dataSourceSettings.dataSource && dataObj.dataSourceSettings.dataSource.dataSource && this.dataSourceSettings.dataSource.dataSource && dataObj.dataSourceSettings.dataSource.dataSource.url === this.dataSourceSettings.dataSource.dataSource.url) {
          dataObj.dataSourceSettings.dataSource = this.dataSourceSettings.dataSource;
        }
        this.setProperties(dataObj, true);
      }
    };
    PivotView2.prototype.showConditionalFormattingDialog = function() {
      if (this.conditionalFormattingModule) {
        this.conditionalFormattingModule.showConditionalFormattingDialog();
      }
    };
    PivotView2.prototype.createCalculatedFieldDialog = function() {
      if (this.calculatedFieldModule) {
        this.calculatedFieldModule.createCalculatedFieldDialog();
      }
    };
    PivotView2.prototype.getModuleName = function() {
      return "pivotview";
    };
    PivotView2.prototype.copy = function(withHeader) {
      this.grid.copy(withHeader);
    };
    PivotView2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var isRequireRefresh = false;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "dataSourceSettings":
          case "hyperlinkSettings":
          case "allowDrillThrough":
          case "editSettings":
          case "allowDataCompression": {
            if (newProp.dataSourceSettings && (!isNullOrUndefined(newProp.dataSourceSettings.dataSource) && !isNullOrUndefined(this.clonedDataSet) && this.clonedDataSet !== newProp.dataSourceSettings.dataSource && !isNullOrUndefined(newProp.dataSourceSettings.groupSettings) && newProp.dataSourceSettings.groupSettings.length > 0 || Object.keys(newProp.dataSourceSettings).length === 1 && Object.keys(newProp.dataSourceSettings)[0] === "dataSource" && this.dataSourceSettings.groupSettings.length > 0)) {
              this.clonedDataSet = newProp.dataSourceSettings.dataSource;
              this.engineModule.groupingFields = {};
            }
            if (newProp.dataSourceSettings && Object.keys(newProp.dataSourceSettings).length === 1 && newProp.dataSourceSettings.groupSettings && this.dataType === "pivot") {
              this.updateGroupingReport(newProp.dataSourceSettings.groupSettings, "Date");
            }
            var changedProps = !isNullOrUndefined(newProp.dataSourceSettings) ? Object.keys(newProp.dataSourceSettings) : [];
            if (changedProps.indexOf("dataSource") > -1 && newProp.dataSourceSettings.type !== "CSV") {
              if (!isNullOrUndefined(this.savedDataSourceSettings) && this.dataSourceSettings.dataSource.length > 0) {
                PivotUtil.updateDataSourceSettings(this, this.savedDataSourceSettings);
                this.savedDataSourceSettings = void 0;
              }
              if (newProp.dataSourceSettings.dataSource && newProp.dataSourceSettings.dataSource.length === 0) {
                this.savedDataSourceSettings = PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings);
                this.setProperties({
                  dataSourceSettings: {
                    rows: []
                  }
                }, true);
                this.setProperties({
                  dataSourceSettings: {
                    columns: []
                  }
                }, true);
                this.setProperties({
                  dataSourceSettings: {
                    values: []
                  }
                }, true);
                this.setProperties({
                  dataSourceSettings: {
                    filters: []
                  }
                }, true);
              }
              if (!this.isStaticRefresh) {
                this.pivotValues = [];
                if (this.dataType === "pivot") {
                  this.engineModule.fieldList = null;
                  this.engineModule.isEmptyData = true;
                  this.engineModule.data = [];
                  this.engineModule.groupingFieldsInfo = {};
                } else if (this.dataType === "olap") {
                  this.olapEngineModule.fieldList = {};
                  this.olapEngineModule.fieldListData = void 0;
                  this.olapEngineModule.isEmptyData = true;
                }
              }
              this.showWaitingPopup();
              this.notify(initialLoad, {});
            } else {
              if (PivotUtil.isButtonIconRefesh(prop, oldProp, newProp)) {
                if (this.showGroupingBar && this.groupingBarModule) {
                  this.axisFieldModule.render();
                }
                if (this.showFieldList && this.pivotFieldListModule) {
                  var rows = PivotUtil.cloneFieldSettings(this.dataSourceSettings.rows);
                  var columns = PivotUtil.cloneFieldSettings(this.dataSourceSettings.columns);
                  var values = PivotUtil.cloneFieldSettings(this.dataSourceSettings.values);
                  var filters = PivotUtil.cloneFieldSettings(this.dataSourceSettings.filters);
                  this.pivotFieldListModule.setProperties({
                    dataSourceSettings: {
                      rows,
                      columns,
                      values,
                      filters
                    }
                  }, true);
                  this.pivotFieldListModule.axisFieldModule.render();
                  if (this.pivotFieldListModule.treeViewModule.fieldTable && !this.isAdaptive) {
                    this.pivotFieldListModule.notify(treeViewUpdate, {});
                  }
                }
              } else {
                this.remoteData = [];
                if (this.dataType === "pivot" && this.dataSourceSettings.url && this.dataSourceSettings.url !== "" && !isNullOrUndefined(newProp.dataSourceSettings) && ("type" in newProp.dataSourceSettings || "url" in newProp.dataSourceSettings)) {
                  this.engineModule.fieldList = null;
                  this.loadData();
                } else {
                  if (newProp.dataSourceSettings && (this.dataType === "pivot" && "dataSource" in newProp.dataSourceSettings || this.dataType === "olap" && "url" in newProp.dataSourceSettings)) {
                    if (!this.isStaticRefresh) {
                      if (this.dataType === "pivot") {
                        this.engineModule.fieldList = null;
                        this.engineModule.isEmptyData = true;
                        this.engineModule.data = [];
                        this.engineModule.groupingFieldsInfo = {};
                      } else if (this.dataType === "olap") {
                        this.olapEngineModule.fieldList = {};
                        this.olapEngineModule.fieldListData = void 0;
                        this.olapEngineModule.isEmptyData = true;
                      }
                      this.pivotValues = [];
                    }
                  }
                  this.notify(initialLoad, {});
                }
              }
            }
            break;
          }
          case "height":
          case "width":
            this.layoutRefresh();
            break;
          case "pivotValues":
          case "displayOption": {
            if (newProp.displayOption && Object.keys(newProp.displayOption).length === 1 && newProp.displayOption.view) {
              this.currentView = newProp.displayOption.view === "Both" ? this.displayOption.primary : newProp.displayOption.view;
              if (this.showGroupingBar || this.showFieldList) {
                if (this.showFieldList && this.pivotFieldListModule) {
                  this.pivotFieldListModule.destroyEngine = true;
                  this.pivotFieldListModule.destroy();
                  if (select("#" + this.element.id + "_PivotFieldList", this.element) !== null) {
                    remove(select("#" + this.element.id + "_PivotFieldList", this.element));
                  }
                  this.pivotFieldListModule.destroyEngine = false;
                }
                this.notify(initSubComponent, this);
              }
              switch (newProp.displayOption.view) {
                case "Both":
                  if (!this.pivotChartModule) {
                    this.pivotChartModule = new PivotChart(this);
                  }
                  if (!this.grid) {
                    this.renderEmptyGrid();
                  }
                  break;
                case "Chart":
                  if (this.grid) {
                    this.grid.destroy();
                    this.grid = void 0;
                  }
                  if (!this.pivotChartModule) {
                    this.pivotChartModule = new PivotChart(this);
                  }
                  break;
                case "Table":
                  if (!this.grid) {
                    this.renderEmptyGrid();
                  }
                  if (this.pivotChartModule) {
                    this.destroyEngine = true;
                    this.pivotChartModule.destroy();
                    this.destroyEngine = false;
                    this.chart = void 0;
                    this.pivotChartModule = void 0;
                  }
                  break;
              }
            } else if (this.showToolbar && !isNullOrUndefined(newProp.displayOption) && newProp.displayOption.view) {
              this.currentView = newProp.displayOption.view === "Both" ? this.displayOption.primary : newProp.displayOption.view;
            }
            if (this.showToolbar && !isNullOrUndefined(newProp.displayOption) && newProp.displayOption.view) {
              if (newProp.displayOption.view === "Chart") {
                this.toolbarModule.createChartMenu();
                this.toggleButtonState(TOOLBAR_GRID, "add");
                this.toggleButtonState(TOOLBAR_CHART, "remove");
              } else if (newProp.displayOption.view === "Table") {
                var gridElement = select("#" + this.element.id + "_grid", this.element);
                gridElement.style.display = "block";
                this.toggleButtonState(TOOLBAR_CHART, "add");
                this.toggleButtonState(TOOLBAR_GRID, "remove");
              } else {
                this.toolbarModule.createChartMenu();
                this.toggleButtonState(TOOLBAR_GRID, "remove");
                this.toggleButtonState(TOOLBAR_CHART, "remove");
              }
            }
            var engine = this.dataType === "pivot" ? this.engineModule : this.olapEngineModule;
            if (!isNullOrUndefined(engine.fieldList) || !isNullOrUndefined(engine.pivotValues)) {
              this.notify(dataReady, {});
            }
            break;
          }
          case "gridSettings":
            this.isTabular = this.gridSettings.layout === "Tabular" ? true : false;
            this.lastGridSettings = newProp.gridSettings;
            this.isCellBoxMultiSelection = this.gridSettings.allowSelection && this.gridSettings.selectionSettings.cellSelectionMode === "Box" && this.gridSettings.selectionSettings.mode === "Cell" && this.gridSettings.selectionSettings.type === "Multiple";
            if (this.allowGrouping && this.groupingModule && !this.isCellBoxMultiSelection) {
              this.setProperties({
                gridSettings: {
                  allowSelection: true,
                  selectionSettings: {
                    cellSelectionMode: "Box",
                    mode: "Cell",
                    type: "Multiple"
                  }
                }
              }, true);
              this.isCellBoxMultiSelection = true;
            }
            if (this.renderModule && this.grid) {
              this.renderModule.updateGridSettings();
            }
            if (newProp.gridSettings.layout) {
              this.initialLoad();
            }
            break;
          case "chartSettings": {
            if (this.showGroupingBar && this.groupingBarModule && (Object.keys(newProp.chartSettings).indexOf("enableMultipleAxis") !== -1 || newProp.chartSettings.chartSeries && Object.keys(newProp.chartSettings.chartSeries).indexOf("type") !== -1)) {
              this.groupingBarModule.renderLayout();
              if (this.pivotChartModule) {
                this.groupingBarModule.appendToElement();
              }
            }
            if (isNullOrUndefined(this.pivotChartModule) && this.displayOption.view !== "Table") {
              this.pivotChartModule = new PivotChart(this);
            }
            var engineModule = this.dataType === "pivot" ? this.engineModule : this.olapEngineModule;
            if (!isNullOrUndefined(this.pivotChartModule) && !isNullOrUndefined(engineModule.pivotValues)) {
              this.pivotChartModule.loadChart(this, this.chartSettings);
            }
            if (!isNullOrUndefined(engineModule.pivotValues) && !isNullOrUndefined(engineModule.fieldList)) {
              this.notify(uiUpdate, this);
            }
            break;
          }
          case "locale":
          case "currencyCode":
          case "enableRtl":
            if (this.tooltip) {
              this.tooltip.destroy();
            }
            if (this.dataSourceSettings.groupSettings && this.dataSourceSettings.groupSettings.length > 0 && this.clonedDataSet) {
              var dataSet = this.dataSourceSettings.type === "CSV" ? PivotUtil.getClonedCSVData(this.clonedDataSet) : PivotUtil.getClonedData(this.clonedDataSet);
              this.setProperties({
                dataSourceSettings: {
                  dataSource: dataSet
                }
              }, true);
            }
            _super.prototype.refresh.call(this);
            this.updateClass();
            break;
          case "enableValueSorting":
            this.enableValueSorting = newProp.enableValueSorting;
            this.updateDataSource();
            break;
          case "showGroupingBar":
            if (this.element.querySelector(".e-grouping-bar")) {
              this.element.querySelector(".e-grouping-bar").remove();
            } else if (this.groupingBarModule) {
              this.groupingBarModule.renderLayout();
              if (!this.commonModule) {
                this.commonModule = new Common(this);
              }
              this.notify(initialLoad, {});
            }
            if (isNullOrUndefined(newProp.showFieldList)) {
              this.renderPivotGrid();
            }
            break;
          case "showFieldList":
            this.initialLoad();
            break;
          case "groupingBarSettings":
            if (this.showGroupingBar && this.groupingBarModule) {
              if (newProp.groupingBarSettings && Object.keys(newProp.groupingBarSettings).indexOf("showFieldsPanel") > -1) {
                this.groupingBarModule.RefreshFieldsPanel();
                this.layoutRefresh();
              } else {
                this.axisFieldModule.render();
              }
            }
            break;
          case "showValuesButton":
            if (this.showGroupingBar && this.groupingBarModule && this.axisFieldModule) {
              this.axisFieldModule.render();
            }
            if (this.showFieldList && this.pivotFieldListModule && this.pivotFieldListModule.axisFieldModule) {
              this.pivotFieldListModule.setProperties({
                showValuesButton: newProp.showValuesButton
              }, true);
              this.pivotFieldListModule.axisFieldModule.render();
            }
            break;
          case "showTooltip":
            this.renderToolTip();
            break;
          case "showToolbar":
          case "toolbar":
            if (this.toolbarModule && this.showToolbar) {
              this.toolbarModule.refreshToolbar();
            }
            break;
          case "chartTypes":
            if (this.toolbarModule) {
              this.toolbarModule.createChartMenu();
            }
            break;
          case "aggregateTypes":
            if (this.showGroupingBar && this.groupingBarModule) {
              if (this.axisFieldModule) {
                this.axisFieldModule.render();
              }
            }
            if (this.showFieldList && this.pivotFieldListModule && this.pivotFieldListModule.axisFieldModule) {
              this.pivotFieldListModule.setProperties({
                aggregateTypes: newProp.aggregateTypes
              }, true);
              this.pivotFieldListModule.axisFieldModule.render();
            }
            break;
          case "enableFieldSearching":
            if (this.pivotFieldListModule) {
              this.pivotFieldListModule.enableFieldSearching = this.enableFieldSearching;
            }
            break;
          case "pageSettings":
            if (!this.enableVirtualization) {
              this.engineModule.pageSettings = this.pageSettings;
              if (this.engineModule.fieldList) {
                this.refreshPageData();
              } else {
                this.initialLoad();
              }
            }
            break;
          case "pagerSettings":
          case "enablePaging":
            if (this.isStaticFieldList && this.isStaticRefresh) {
              this.isStaticRefresh = false;
            }
            this.initialLoad();
            break;
          case "cellTemplate":
            this.cellTemplateFn = this.templateParser(this.cellTemplate);
            isRequireRefresh = true;
            break;
          case "tooltipTemplate":
            this.tooltipTemplateFn = this.templateParser(this.tooltipTemplate);
            isRequireRefresh = true;
            break;
          case "allowCalculatedField":
            if (this.pivotFieldListModule) {
              this.pivotFieldListModule.allowCalculatedField = this.allowCalculatedField;
            }
            break;
          case "allowDeferLayoutUpdate":
            this.pivotDeferLayoutUpdate = this.allowDeferLayoutUpdate;
            if (this.pivotFieldListModule) {
              this.pivotFieldListModule.allowDeferLayoutUpdate = this.allowDeferLayoutUpdate;
            }
            break;
          case "allowGrouping":
            this.refresh();
            break;
        }
      }
      if (isRequireRefresh && this.grid) {
        this.grid.refreshColumns();
      }
    };
    PivotView2.prototype.toggleButtonState = function(buttonClass, action) {
      var button = this.element.querySelector("." + buttonClass);
      if (button) {
        var closestDisabledElement = button.closest(".e-toolbar-item");
        if (closestDisabledElement) {
          if (action === "add") {
            closestDisabledElement.classList.add(MENU_DISABLE);
          } else if (action === "remove") {
            closestDisabledElement.classList.remove(MENU_DISABLE);
          }
        }
      }
    };
    PivotView2.prototype.templateParser = function(template) {
      if (template) {
        try {
          if (typeof template !== "function" && document.querySelectorAll(template).length) {
            return compile(document.querySelector(template).innerHTML.trim());
          } else {
            return compile(template);
          }
        } catch (error) {
          return compile(template);
        }
      }
      return void 0;
    };
    PivotView2.prototype.getCellTemplate = function() {
      return this.cellTemplateFn;
    };
    PivotView2.prototype.appendHtml = function(node, innerHtml) {
      var tempElement = document.createElement("div");
      tempElement.innerHTML = innerHtml;
      if (!isNullOrUndefined(tempElement.firstChild)) {
        node.appendChild(tempElement.firstChild);
      }
      return node;
    };
    PivotView2.prototype.renderPivotGrid = function() {
      this.isEmptyGrid = false;
      this.notEmpty = true;
      this.clearTemplate();
      if (this.showGroupingBar) {
        if (this.pivotChartModule) {
          this.appendChartElement();
        }
        this.groupingBarModule.appendToElement();
      }
      if (this.pivotChartModule) {
        this.pivotChartModule.engineModule = this.engineModule;
        this.pivotChartModule.loadChart(this, this.chartSettings);
        if (this.enableRtl && this.chart && document.body.getAttribute("dir") !== "rtl") {
          addClass([this.chart.element], PIVOTCHART_LTR);
        }
      }
      if (this.enableVirtualization) {
        this.virtualscrollModule = new VirtualScroll2(this);
      }
      if (this.allowDrillThrough || this.editSettings.allowEditing) {
        this.drillThroughModule = new DrillThrough(this);
      }
      if (this.enablePaging) {
        this.notify(initPivotPager, this);
      }
      if (this.displayOption.view !== "Chart") {
        if (this.hyperlinkSettings) {
          this.isRowCellHyperlink = this.hyperlinkSettings.showRowHeaderHyperlink ? true : this.hyperlinkSettings.showHyperlink ? true : false;
          this.isColumnCellHyperlink = this.hyperlinkSettings.showColumnHeaderHyperlink ? true : this.hyperlinkSettings.showHyperlink ? true : false;
          this.isValueCellHyperlink = this.hyperlinkSettings.showValueCellHyperlink ? true : this.hyperlinkSettings.showHyperlink ? true : false;
          this.isSummaryCellHyperlink = this.hyperlinkSettings.showSummaryCellHyperlink ? true : this.hyperlinkSettings.showHyperlink ? true : false;
          this.applyHyperlinkSettings();
        }
        this.renderModule = this.renderModule ? this.renderModule : new Render(this);
        this.renderModule.render(true);
      } else if (this.grid) {
        remove(this.grid.element);
      }
      var isNumberFormattingApplied = this.actionObj.actionName === openNumberFormatting || this.actionObj.actionName === numberFormattingMenu;
      var isConditionalFormattingApplied = this.actionObj.actionName === conditionalFormattingMenu || this.actionObj.actionName === openConditionalFormatting;
      if ((this.showFieldList || this.allowNumberFormatting || this.allowCalculatedField || this.toolbar || this.allowGrouping || this.gridSettings.contextMenuItems) && !(isNumberFormattingApplied || isConditionalFormattingApplied)) {
        this.notify(uiUpdate, this);
        if (this.pivotFieldListModule && this.allowDeferLayoutUpdate) {
          this.pivotFieldListModule.clonedDataSource = PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings);
        }
      }
      if (this.allowConditionalFormatting) {
        this.applyFormatting(this.pivotValues);
      }
      if (this.showToolbar) {
        if (this.displayOption.view === "Both" && this.chart && this.grid) {
          if (this.showGroupingBar && this.groupingBarModule && this.element.querySelector("." + GROUPING_BAR_CLASS)) {
            this.groupingBarModule.refreshUI();
          }
          if (this.toolbarModule && this.toolbarModule.toolbar) {
            this.toolbarModule.toolbar.width = this.getGridWidthAsNumber();
          }
          if (this.chartSettings.enableScrollOnMultiAxis && this.chartSettings.enableMultipleAxis) {
            this.element.querySelector("." + PIVOTCHART).style.width = formatUnit(this.getGridWidthAsNumber());
          }
          this.chart.width = formatUnit(this.getGridWidthAsNumber());
          if (this.currentView === "Table") {
            this.grid.element.style.display = "";
            this.chart.element.style.display = "none";
            if (this.chartSettings.enableMultipleAxis && this.chartSettings.enableScrollOnMultiAxis) {
              this.element.querySelector(".e-pivotchart").style.display = "none";
            }
          } else {
            this.grid.element.style.display = "none";
            this.chart.element.style.display = "";
            if (this.chartSettings.enableMultipleAxis && this.chartSettings.enableScrollOnMultiAxis) {
              this.element.querySelector(".e-pivotchart").style.display = "";
            }
          }
        }
      }
      if (this.toolbarModule) {
        PivotUtil.toggleFieldListIconVisibility(this);
        if (this.toolbarModule && this.toolbarModule.action !== "New" && this.toolbarModule.action !== "Load" && this.toolbarModule.action !== "Remove") {
          this.isModified = true;
        }
        if (!this.isInitialRendering) {
          this.isModified = false;
          this.isInitialRendering = !this.isInitialRendering;
        }
        this.toolbarModule.action = "";
      }
    };
    PivotView2.prototype.appendChartElement = function() {
      if (!select("#" + this.element.id + "_chart", this.element)) {
        if (this.displayOption.view === "Both") {
          if (this.displayOption.primary === "Chart") {
            this.element.insertBefore(createElement("div", {
              className: PIVOTCHART,
              id: this.element.id + "_chart"
            }), this.element.querySelector("." + GRID_CLASS));
          } else {
            this.element.appendChild(createElement("div", {
              className: PIVOTCHART,
              id: this.element.id + "_chart"
            }));
          }
        } else {
          this.element.appendChild(createElement("div", {
            className: PIVOTCHART,
            id: this.element.id + "_chart"
          }));
        }
        var width = this.width.toString();
        if (this.showToolbar && this.grid) {
          width = this.getGridWidthAsNumber().toString();
        }
        var height = this.pivotChartModule.getChartHeight();
        var tmpChart = void 0;
        if (this.chartSettings && this.chartSettings.chartSeries && this.pivotChartModule["accumulationType"].indexOf(this.chartSettings.chartSeries.type) > -1) {
          tmpChart = new AccumulationChart({
            width,
            height
          });
        } else {
          tmpChart = new Chart({
            width,
            height
          });
        }
        tmpChart.appendTo(select("#" + this.element.id + "_chart", this.element));
        if (this.showToolbar) {
          if (this.displayOption.view === "Both" && this.currentView === "Chart") {
            this.grid.element.style.display = "none";
          }
          if (this.currentView !== "Chart") {
            select("#" + this.element.id + "_chart", this.element).style.display = "none";
          }
        }
      }
    };
    PivotView2.prototype.showWaitingPopup = function() {
      if (this.grid && this.grid.element && !this.spinnerTemplate && this.currentView === "Table") {
        showSpinner(this.grid.element);
      } else {
        showSpinner(this.element);
      }
    };
    PivotView2.prototype.hideWaitingPopup = function() {
      if (this.grid && this.grid.element && !this.spinnerTemplate && this.currentView === "Table") {
        hideSpinner(this.grid.element);
      } else {
        hideSpinner(this.element);
      }
    };
    PivotView2.prototype.updateDataSource = function() {
      var _this_1 = this;
      this.showWaitingPopup();
      var pivot = this;
      var isSorted = !isNullOrUndefined(pivot.lastSortInfo) && Object.keys(pivot.lastSortInfo).length > 0 ? true : false;
      var isFiltered = !isNullOrUndefined(pivot.lastFilterInfo) && Object.keys(pivot.lastFilterInfo).length > 0 ? true : false;
      var isAggChange = !isNullOrUndefined(pivot.lastAggregationInfo) && Object.keys(pivot.lastAggregationInfo).length > 0 ? true : false;
      var isCalcChange = !isNullOrUndefined(pivot.lastCalcFieldInfo) && Object.keys(pivot.lastCalcFieldInfo).length > 0 ? true : false;
      var args = {
        dataSourceSettings: PivotUtil.getClonedDataSourceSettings(pivot.dataSourceSettings)
      };
      pivot.trigger(enginePopulating, args, function(observedArgs) {
        if (!((pivot.enableVirtualization || pivot.enablePaging) && (isSorted || isFiltered || isAggChange || isCalcChange))) {
          PivotUtil.updateDataSourceSettings(pivot, observedArgs.dataSourceSettings);
        }
        pivot.updatePageSettings(false);
        if (isSorted && pivot.dataSourceSettings.valueSortSettings.headerText !== "") {
          pivot.setProperties({
            dataSourceSettings: {
              valueSortSettings: {
                headerText: ""
              }
            }
          }, true);
        }
        if (pivot.dataType === "pivot" && (pivot.enableVirtualization || pivot.enablePaging) && (isSorted || isFiltered || isAggChange || isCalcChange)) {
          if (isSorted) {
            if (_this_1.dataSourceSettings.mode === "Server") {
              pivot.getEngine("onSort", null, pivot.lastSortInfo, null, null, null, null);
            } else {
              pivot.engineModule.onSort(pivot.lastSortInfo, pivot.dataSourceSettings);
            }
            pivot.lastSortInfo = {};
          }
          if (isAggChange) {
            if (_this_1.dataSourceSettings.mode === "Server") {
              pivot.getEngine("onAggregation", null, null, pivot.lastAggregationInfo, null, null, null);
            } else {
              pivot.engineModule.onAggregation(pivot.lastAggregationInfo, pivot.dataSourceSettings);
            }
            pivot.lastAggregationInfo = {};
          }
          if (isCalcChange) {
            if (_this_1.dataSourceSettings.mode === "Server") {
              pivot.getEngine("onCalcOperation", null, null, null, pivot.lastCalcFieldInfo, null, null);
            } else {
              pivot.engineModule.onCalcOperation(pivot.lastCalcFieldInfo, pivot.dataSourceSettings);
            }
            pivot.lastCalcFieldInfo = {};
          }
          if (isFiltered) {
            if (_this_1.dataSourceSettings.mode === "Server") {
              pivot.getEngine("onFilter", null, null, null, null, pivot.lastFilterInfo, null);
            } else {
              pivot.engineModule.onFilter(pivot.lastFilterInfo, pivot.dataSourceSettings);
            }
            pivot.lastFilterInfo = {};
          }
          pivot.allowServerDataBinding = false;
          pivot.setProperties({
            pivotValues: pivot.engineModule.pivotValues
          }, true);
          pivot.allowServerDataBinding = true;
          if (pivot.dataSourceSettings.mode !== "Server") {
            pivot.enginePopulatedEventMethod("updateDataSource");
          }
        } else {
          if (pivot.dataType === "olap") {
            var customProperties = {
              mode: "",
              savedFieldList: pivot.olapEngineModule.fieldList,
              savedFieldListData: pivot.olapEngineModule.fieldListData,
              pageSettings: pivot.pageSettings,
              enableValueSorting: pivot.enableValueSorting,
              isDrillThrough: pivot.allowDrillThrough || pivot.editSettings.allowEditing,
              localeObj: pivot.localeObj,
              enableVirtualization: _this_1.enableVirtualization
            };
            if (isCalcChange || isSorted) {
              pivot.olapEngineModule.savedFieldList = pivot.olapEngineModule.fieldList;
              pivot.olapEngineModule.savedFieldListData = pivot.olapEngineModule.fieldListData;
              if (isCalcChange) {
                pivot.olapEngineModule.updateCalcFields(pivot.dataSourceSettings, pivot.lastCalcFieldInfo);
                pivot.lastCalcFieldInfo = {};
              } else {
                pivot.olapEngineModule.onSort(pivot.dataSourceSettings);
                pivot.lastSortInfo = {};
              }
            } else {
              PivotUtil.renderOlapEngine(pivot, customProperties);
            }
            pivot.allowServerDataBinding = false;
            pivot.setProperties({
              pivotValues: pivot.olapEngineModule.pivotValues
            }, true);
            pivot.allowServerDataBinding = true;
            pivot.enginePopulatedEventMethod("updateDataSource");
          } else {
            var customProperties = {
              mode: "",
              savedFieldList: pivot.engineModule.fieldList,
              pageSettings: pivot.pageSettings,
              enableValueSorting: pivot.enableValueSorting,
              isDrillThrough: pivot.allowDrillThrough || pivot.editSettings.allowEditing,
              localeObj: pivot.localeObj,
              fieldsType: pivot.fieldsType,
              clonedReport: pivot.clonedReport,
              globalize: pivot.globalize,
              currenyCode: pivot.currencyCode,
              enablePaging: _this_1.enablePaging,
              enableVirtualization: _this_1.enableVirtualization,
              allowDataCompression: _this_1.allowDataCompression,
              enableHtmlSanitizer: _this_1.enableHtmlSanitizer,
              enableOptimizedRendering: _this_1.enableVirtualization && _this_1.virtualscrollModule && _this_1.virtualScrollSettings.allowSinglePage,
              isTabularLayout: _this_1.isTabular
            };
            if (pivot.dataSourceSettings.mode === "Server") {
              if (isSorted) {
                pivot.getEngine("onSort", null, pivot.lastSortInfo, null, null, null, null);
              } else if (isAggChange) {
                pivot.getEngine("onAggregation", null, null, pivot.lastAggregationInfo, null, null, null);
              } else if (isCalcChange) {
                pivot.getEngine("onCalcOperation", null, null, null, pivot.lastCalcFieldInfo, null, null);
              } else if (isFiltered) {
                pivot.getEngine("onFilter", null, null, null, null, pivot.lastFilterInfo, null);
              } else {
                pivot.getEngine("onDrop", null, null, null, null, null, null);
              }
            } else {
              pivot.engineModule.renderEngine(pivot.dataSourceSettings, customProperties, pivot.aggregateCellInfo ? pivot.getValueCellInfo.bind(pivot) : void 0, pivot.onHeadersSort ? pivot.getHeaderSortInfo.bind(pivot) : void 0);
              pivot.allowServerDataBinding = false;
              pivot.setProperties({
                pivotValues: pivot.engineModule.pivotValues
              }, true);
              pivot.allowServerDataBinding = true;
              pivot.enginePopulatedEventMethod("updateDataSource");
            }
            pivot.lastSortInfo = {};
            pivot.lastAggregationInfo = {};
            pivot.lastCalcFieldInfo = {};
            pivot.lastFilterInfo = {};
          }
        }
      });
    };
    PivotView2.prototype.refreshPageData = function() {
      var args = {
        dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings)
      };
      this.actionBeginMethod();
      this.showWaitingPopup();
      this.trigger(enginePopulating, args);
      if (this.dataType === "pivot") {
        if (this.dataSourceSettings.mode === "Server") {
          this.getEngine("onPageChange", null, null, null, null, null, null);
        } else {
          this.engineModule.generateGridData(this.dataSourceSettings, true, false, this.engineModule.headerCollection, true);
        }
        this.setProperties({
          pivotValues: this.engineModule.pivotValues
        }, true);
        this.enginePopulatedEventMethod("updateDataSource");
      }
      this.actionObj.actionName = this.getActionCompleteName();
      if (this.actionObj.actionName) {
        this.actionCompleteMethod();
      }
    };
    PivotView2.prototype.excelExport = function(excelExportProperties, isMultipleExport, workbook, isBlob) {
      if (this.dataSourceSettings.mode === "Server") {
        this.getEngine("onExcelExport", null, null, null, null, null, null, null, null, excelExportProperties);
      } else {
        if (this.enableVirtualization || this.enablePaging || this.allowEngineExport || this.allowConditionalFormatting && this.dataSourceSettings.conditionalFormatSettings.length > 0) {
          this.excelExportModule.exportToExcel("Excel", excelExportProperties, isBlob);
        } else {
          this.exportType = "Excel";
          this.grid.excelExport(excelExportProperties, isMultipleExport, workbook, isBlob);
        }
        this.actionObj.actionName = this.getActionCompleteName();
        var actionInfo = {
          exportInfo: {
            type: this.exportType,
            info: excelExportProperties
          }
        };
        this.actionObj.actionInfo = actionInfo;
        if (this.actionObj.actionName) {
          this.actionCompleteMethod();
        }
      }
    };
    PivotView2.prototype.csvExport = function(excelExportProperties, isMultipleExport, workbook, isBlob) {
      if (this.dataSourceSettings.mode === "Server") {
        this.getEngine("onCsvExport", null, null, null, null, null, null, null, null, excelExportProperties);
      } else {
        if (this.enableVirtualization || this.enablePaging || this.allowEngineExport || this.allowConditionalFormatting && this.dataSourceSettings.conditionalFormatSettings.length > 0) {
          this.excelExportModule.exportToExcel("CSV", excelExportProperties, isBlob);
        } else {
          this.exportType = "CSV";
          this.grid.csvExport(excelExportProperties, isMultipleExport, workbook, isBlob);
        }
        this.actionObj.actionName = this.getActionCompleteName();
        var actionInfo = {
          exportInfo: {
            type: this.exportType,
            info: excelExportProperties
          }
        };
        this.actionObj.actionInfo = actionInfo;
        if (this.actionObj.actionName) {
          this.actionCompleteMethod();
        }
      }
    };
    PivotView2.prototype.gridPdfExport = function(pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {
      var args = {
        pdfExportProperties,
        isMultipleExport,
        isBlob,
        pdfDoc,
        currentExportView: "Table",
        pdfMargins: {}
      };
      var pdfDocument = null;
      this.trigger(beforeExport, args);
      if (this.pdfExportModule) {
        this.pdfExportModule.exportProperties = args;
      }
      if (this.dataSourceSettings.mode !== "Server" && (this.enableVirtualization || this.enablePaging || this.allowEngineExport || Object.keys(args.pdfMargins).length > 0 || args.height || args.width || this.allowConditionalFormatting && this.dataSourceSettings.conditionalFormatSettings.length > 0)) {
        pdfDocument = this.pdfExportModule.exportToPDF(args.pdfExportProperties, args.isMultipleExport, args.pdfDoc, args.isBlob);
      } else {
        pdfDocument = this.grid.pdfExport(args.pdfExportProperties, args.isMultipleExport, args.pdfDoc, args.isBlob);
      }
      this.actionObj.actionName = this.getActionCompleteName();
      var actionInfo = {
        exportInfo: {
          type: "PDF",
          info: pdfExportProperties
        }
      };
      this.actionObj.actionInfo = actionInfo;
      if (this.actionObj.actionName) {
        this.actionCompleteMethod();
      }
      return pdfDocument;
    };
    PivotView2.prototype.chartExport = function(type, pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {
      var args = {
        pdfExportProperties,
        isMultipleExport,
        isBlob,
        pdfDoc,
        type,
        currentExportView: "Chart",
        pdfMargins: {}
      };
      this.trigger(beforeExport, args);
      if (this.chartExportModule) {
        this.chartExportModule.exportProperties = args;
      }
      var pdfDocument;
      var fileName = args.fileName ? args.fileName : !isNullOrUndefined(pdfExportProperties) && !isNullOrUndefined(pdfExportProperties.fileName) ? pdfExportProperties.fileName : "default";
      if (type === "PDF") {
        pdfDocument = this.chartExportModule.pdfChartExport(args.pdfExportProperties, args.pdfDoc, args.isMultipleExport, args.isBlob);
      } else {
        var orientation_1 = args.orientation === 0 || args.orientation ? args.orientation : !isNullOrUndefined(pdfExportProperties) && !isNullOrUndefined(pdfExportProperties.pageOrientation) ? pdfExportProperties.pageOrientation === "Landscape" ? PdfPageOrientation.Landscape : PdfPageOrientation.Portrait : PdfPageOrientation.Landscape;
        pdfDocument = this.chart.exportModule.export(args.type, fileName, orientation_1, null);
      }
      this.actionObj.actionName = this.getActionCompleteName();
      var actionInfo = {
        exportInfo: {
          type,
          info: fileName
        }
      };
      this.actionObj.actionInfo = actionInfo;
      if (this.actionObj.actionName) {
        this.actionCompleteMethod();
      }
      return pdfDocument;
    };
    PivotView2.prototype.pdfExport = function(pdfExportProperties, isMultipleExport, pdfDoc, isBlob, exportBothTableAndChart) {
      var _this_1 = this;
      var pdfDocument = null;
      return new Promise(function(resolve) {
        if (exportBothTableAndChart && _this_1.displayOption.view === "Both") {
          if (_this_1.displayOption.primary === "Chart") {
            var chartAndTableExportDocument = _this_1.chartExport("PDF", pdfExportProperties, true, pdfDoc, false);
            chartAndTableExportDocument.then(function(pdfData) {
              pdfDocument = _this_1.gridPdfExport(pdfExportProperties, isMultipleExport, pdfData, isBlob);
              resolve(pdfDocument);
            });
          } else {
            var tableAndChartExportDocument = _this_1.gridPdfExport(pdfExportProperties, true, pdfDoc, false);
            tableAndChartExportDocument.then(function(pdfData) {
              pdfDocument = _this_1.chartExport("PDF", pdfExportProperties, isMultipleExport, pdfData, isBlob);
              resolve(pdfDocument);
            });
          }
        } else {
          var tableExportDocumnt = _this_1.gridPdfExport(pdfExportProperties, isMultipleExport, pdfDoc, isBlob);
          resolve(tableExportDocumnt);
        }
      });
    };
    PivotView2.prototype.printChart = function() {
      if (this.chart) {
        this.chart.print();
      }
    };
    PivotView2.prototype.onDrill = function(target, chartDrillInfo) {
      var _this_1 = this;
      var delimiter = this.dataSourceSettings.drilledMembers[0] && this.dataSourceSettings.drilledMembers[0].delimiter ? this.dataSourceSettings.drilledMembers[0].delimiter : "**";
      var fieldName = "";
      var axis = "";
      var action = "";
      if (chartDrillInfo) {
        fieldName = chartDrillInfo.fieldName;
        axis = chartDrillInfo.cell.axis;
        action = chartDrillInfo.isDrilled ? "up" : "down";
      } else {
        var rowHeaderCell = target.closest("td.e-rowsheader");
        axis = rowHeaderCell ? "row" : "column";
        fieldName = axis === "row" ? closest(target, "td").getAttribute("fieldname") : closest(target, "th").getAttribute("fieldname");
        action = target.classList.contains(COLLAPSE) ? "up" : "down";
      }
      if (this.dataType === "pivot") {
        var clonedDrillMembers_1 = PivotUtil.cloneDrillMemberSettings(this.dataSourceSettings.drilledMembers);
        var colIndex = axis === "row" ? parseInt(closest(target, "td").getAttribute("aria-colindex"), 10) - 1 : parseInt(closest(target, "th").getAttribute("aria-colindex"), 10) - 1;
        var rowIndex = axis === "row" ? Number(closest(target, "td").getAttribute("index")) : Number(closest(target, "th").getAttribute("index"));
        var currentCell = chartDrillInfo ? chartDrillInfo.cell : this.engineModule.pivotValues[rowIndex][colIndex];
        var memberName = currentCell.valueSort.levelName.split(this.engineModule.valueSortSettings.headerDelimiter).join(delimiter);
        var fieldAvail = false;
        if (this.dataSourceSettings.drilledMembers.length === 0) {
          this.setProperties({
            dataSourceSettings: {
              drilledMembers: [{
                name: fieldName,
                items: [memberName],
                delimiter
              }]
            }
          }, true);
        } else {
          var drillMembers = PivotUtil.cloneDrillMemberSettings(this.dataSourceSettings.drilledMembers);
          for (var fCnt = 0; fCnt < drillMembers.length; fCnt++) {
            var field = drillMembers[fCnt];
            memberName = memberName.split(delimiter).join(field.delimiter ? field.delimiter : delimiter);
            delimiter = field.delimiter = field.delimiter ? field.delimiter : delimiter;
            if (field.name === fieldName) {
              fieldAvail = true;
              var memIndex = field.items.indexOf(memberName);
              if (memIndex > -1) {
                field.items.splice(memIndex, 1);
              } else {
                field.items.push(memberName);
              }
            } else {
              continue;
            }
          }
          this.setProperties({
            dataSourceSettings: {
              drilledMembers: drillMembers
            }
          }, true);
          if (!fieldAvail) {
            this.dataSourceSettings.drilledMembers.push({
              name: fieldName,
              items: [memberName],
              delimiter
            });
          }
        }
        this.showWaitingPopup();
        var pivot_1 = this;
        var drilledItem_1 = {
          fieldName,
          memberName,
          delimiter,
          axis,
          action,
          currentCell
        };
        var drillArgs = {
          drillInfo: drilledItem_1,
          pivotview: pivot_1,
          cancel: false
        };
        pivot_1.trigger(drill, drillArgs, function(observedArgs) {
          if (!observedArgs.cancel) {
            var args = {
              dataSourceSettings: PivotUtil.getClonedDataSourceSettings(_this_1.dataSourceSettings)
            };
            pivot_1.trigger(enginePopulating, args);
            pivot_1.setProperties({
              dataSourceSettings: args.dataSourceSettings
            }, true);
            if (pivot_1.enableVirtualization || pivot_1.enablePaging) {
              if (_this_1.dataSourceSettings.mode === "Server") {
                _this_1.getEngine("onDrill", drilledItem_1, null, null, null, null, null);
              } else {
                pivot_1.engineModule.drilledMembers = pivot_1.dataSourceSettings.drilledMembers;
                pivot_1.engineModule.onDrill(drilledItem_1);
              }
            } else if (_this_1.dataSourceSettings.mode === "Server") {
              _this_1.getEngine("onDrill", drilledItem_1, null, null, null, null, null);
            } else {
              pivot_1.engineModule.generateGridData(pivot_1.dataSourceSettings, true);
            }
            pivot_1.allowServerDataBinding = false;
            pivot_1.setProperties({
              pivotValues: pivot_1.engineModule.pivotValues
            }, true);
            pivot_1.allowServerDataBinding = true;
            var eventArgs = {
              dataSourceSettings: PivotUtil.getClonedDataSourceSettings(args.dataSourceSettings),
              pivotValues: _this_1.pivotValues
            };
            _this_1.trigger(enginePopulated, eventArgs);
            pivot_1.engineModule.pivotValues = eventArgs.pivotValues;
            var actionInfo = {
              drillInfo: drilledItem_1
            };
            _this_1.actionObj.actionInfo = actionInfo;
            pivot_1.renderPivotGrid();
          } else {
            _this_1.hideWaitingPopup();
            _this_1.setProperties({
              dataSourceSettings: {
                drilledMembers: clonedDrillMembers_1
              }
            }, true);
          }
        });
      } else {
        this.onOlapDrill(fieldName, axis, action, delimiter, target, chartDrillInfo);
      }
    };
    PivotView2.prototype.onOlapDrill = function(fieldName, axis, action, delimiter, target, chartDrillInfo) {
      var _this_1 = this;
      var pivot = this;
      var clonedDrillMembers = PivotUtil.cloneDrillMemberSettings(this.dataSourceSettings.drilledMembers);
      var currentCell;
      if (chartDrillInfo) {
        currentCell = chartDrillInfo.cell;
      } else {
        var colIndex = axis === "row" ? parseInt(closest(target, "td").getAttribute("aria-colindex"), 10) - 1 : parseInt(closest(target, "th").getAttribute("aria-colindex"), 10) - 1;
        var rowIndex = axis === "row" ? Number(closest(target, "td").getAttribute("index")) : Number(closest(target, "th").getAttribute("index"));
        currentCell = this.olapEngineModule.pivotValues[rowIndex][colIndex];
      }
      var tupInfo = axis === "row" ? this.olapEngineModule.tupRowInfo[currentCell.ordinal] : this.olapEngineModule.tupColumnInfo[currentCell.ordinal];
      var drillInfo = {
        axis,
        action,
        fieldName,
        delimiter: "~~",
        memberName: tupInfo.uNameCollection,
        currentCell
      };
      this.showWaitingPopup();
      var drillArgs = {
        drillInfo,
        pivotview: pivot,
        cancel: false
      };
      var isAttributeHierarchy = this.olapEngineModule.fieldList[drillInfo.fieldName] && this.olapEngineModule.fieldList[drillInfo.fieldName].isHierarchy;
      var fieldPos = tupInfo.drillInfo.map(function(item) {
        return item.hierarchy;
      }).indexOf(currentCell.hierarchy.toString());
      var clonedMembers = PivotUtil.cloneDrillMemberSettings(this.dataSourceSettings.drilledMembers);
      if (drillInfo && drillInfo.action === "down") {
        var fields = tupInfo.drillInfo.map(function(item) {
          return item.uName;
        });
        var member = "";
        for (var pos = 0; pos <= fieldPos; pos++) {
          var field = fields[pos];
          var members = field.split("~~");
          member = member + (member !== "" ? "~~" : "") + members[members.length - 1];
        }
        var drillSets = this.olapEngineModule.getDrilledSets(drillInfo.memberName, currentCell, this.olapEngineModule.fieldList[currentCell.hierarchy] && !this.olapEngineModule.fieldList[currentCell.hierarchy].hasAllMember ? currentCell.valueSort.levelName.split(this.dataSourceSettings.valueSortSettings.headerDelimiter).length - 1 : fieldPos, axis);
        var keys = Object.keys(drillSets);
        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
          var key = keys_1[_i];
          var drillSet = drillSets[key];
          for (var i = 0, cnt = clonedMembers.length; i < cnt; i++) {
            var drillMembers = clonedMembers[i];
            var memberItem = drillSet;
            if (drillMembers.delimiter) {
              memberItem = memberItem.replace(/~~/g, drillMembers.delimiter);
            }
            var items = [];
            for (var itemPos = 0; itemPos < drillMembers.items.length; itemPos++) {
              if (drillMembers.items[itemPos].indexOf(memberItem) !== 0) {
                items[items.length] = drillMembers.items[itemPos];
              }
            }
            drillMembers.items = items;
          }
        }
        this.olapEngineModule.drilledSets[currentCell.actualText] = tupInfo.members[fieldPos];
        drillInfo.memberName = member;
        var drillItem = [];
        for (var _a = 0, clonedMembers_1 = clonedMembers; _a < clonedMembers_1.length; _a++) {
          var field = clonedMembers_1[_a];
          if (field.name === drillInfo.fieldName) {
            drillItem.push(field);
          }
        }
        if (drillItem.length > 0) {
          if (drillItem[0].delimiter) {
            member = member.replace(/~~/g, drillItem[0].delimiter);
          }
          var index = PivotUtil.inArray(member, drillItem[0].items);
          if (index === -1) {
            drillItem[0].items.push(member);
          }
          if (isAttributeHierarchy) {
            var i = 0;
            while (i < drillItem[0].items.length) {
              if (drillItem[0].items[i] === member) {
                drillItem[0].items.splice(i, 1);
              } else {
                ++i;
              }
            }
          }
        } else if (!isAttributeHierarchy) {
          var drilledMember = {
            name: drillInfo.fieldName,
            items: [member],
            delimiter: "~~"
          };
          if (!clonedMembers) {
            clonedMembers = [drilledMember];
          } else {
            clonedMembers.push(drilledMember);
          }
        }
        drillArgs.drillInfo.memberName = member;
        this.setProperties({
          dataSourceSettings: {
            drilledMembers: clonedMembers
          }
        }, true);
        pivot.trigger(drill, drillArgs, function(observedArgs) {
          if (!observedArgs.cancel) {
            var args = {
              dataSourceSettings: PivotUtil.getClonedDataSourceSettings(_this_1.dataSourceSettings)
            };
            _this_1.trigger(enginePopulating, args);
            _this_1.setProperties({
              dataSourceSettings: args.dataSourceSettings
            }, true);
            _this_1.olapEngineModule.updateDrilledInfo(_this_1.dataSourceSettings);
            _this_1.allowServerDataBinding = false;
            _this_1.setProperties({
              pivotValues: _this_1.olapEngineModule.pivotValues
            }, true);
            _this_1.allowServerDataBinding = true;
            var eventArgs = {
              dataSourceSettings: PivotUtil.getClonedDataSourceSettings(args.dataSourceSettings),
              pivotValues: pivot.olapEngineModule.pivotValues
            };
            _this_1.trigger(enginePopulated, eventArgs);
            _this_1.olapEngineModule.pivotValues = eventArgs.pivotValues;
            _this_1.renderPivotGrid();
          } else {
            _this_1.hideWaitingPopup();
            _this_1.setProperties({
              dataSourceSettings: {
                drilledMembers: clonedDrillMembers
              }
            }, true);
          }
        });
      } else {
        delete this.olapEngineModule.drilledSets[currentCell.actualText];
        var drillSets = this.olapEngineModule.getDrilledSets(drillInfo.memberName, currentCell, fieldPos, axis);
        var keys = Object.keys(drillSets);
        var fields = tupInfo.drillInfo.map(function(item) {
          return item.uName;
        });
        var member = "";
        for (var pos = 0; pos <= fieldPos; pos++) {
          var field = fields[pos];
          var members = field.split("~~");
          member = member + (member !== "" ? "~~" : "") + members[members.length - 1];
        }
        for (var _b = 0, keys_2 = keys; _b < keys_2.length; _b++) {
          var key = keys_2[_b];
          var drillSet = drillSets[key];
          var drillItemCollection = [];
          for (var i = 0, cnt = clonedMembers.length; i < cnt; i++) {
            var drillItem = clonedMembers[i];
            var member_1 = drillSet;
            if (drillItem.name === drillInfo.fieldName) {
              drillItemCollection.push(drillItem);
            }
            if (drillItem.delimiter) {
              member_1 = drillSet.replace(/~~/g, drillItem.delimiter);
            }
            if (!isAttributeHierarchy) {
              var items = [];
              for (var itemPos = 0; itemPos < drillItem.items.length; itemPos++) {
                if (drillItem.items[itemPos].indexOf(member_1) !== 0) {
                  items[items.length] = drillItem.items[itemPos];
                }
              }
              drillItem.items = items;
            }
          }
          if (isAttributeHierarchy) {
            if (drillItemCollection.length > 0) {
              if (drillItemCollection[0].delimiter) {
                member = member.replace(/~~/g, drillItemCollection[0].delimiter);
              }
              var index = PivotUtil.inArray(member, drillItemCollection[0].items);
              if (index === -1) {
                drillItemCollection[0].items.push(member);
              }
            } else {
              var drilledMember = {
                name: drillInfo.fieldName,
                items: [member],
                delimiter: "~~"
              };
              if (!clonedMembers) {
                clonedMembers = [drilledMember];
              } else {
                clonedMembers.push(drilledMember);
              }
            }
          }
        }
        var drilledMembers_1 = [];
        for (var _c = 0, clonedMembers_2 = clonedMembers; _c < clonedMembers_2.length; _c++) {
          var fields_1 = clonedMembers_2[_c];
          if (fields_1.items.length > 0) {
            drilledMembers_1.push(fields_1);
          }
        }
        this.setProperties({
          dataSourceSettings: {
            drilledMembers: clonedMembers
          }
        }, true);
        pivot.trigger(drill, drillArgs, function(observedArgs) {
          if (!observedArgs.cancel) {
            var args = {
              dataSourceSettings: PivotUtil.getClonedDataSourceSettings(_this_1.dataSourceSettings)
            };
            _this_1.trigger(enginePopulating, args);
            _this_1.setProperties({
              dataSourceSettings: args.dataSourceSettings
            }, true);
            _this_1.setProperties({
              dataSourceSettings: {
                drilledMembers: drilledMembers_1
              }
            }, true);
            _this_1.olapEngineModule.updateDrilledInfo(_this_1.dataSourceSettings);
            _this_1.allowServerDataBinding = false;
            _this_1.setProperties({
              pivotValues: _this_1.olapEngineModule.pivotValues
            }, true);
            _this_1.allowServerDataBinding = true;
            var eventArgs = {
              dataSourceSettings: PivotUtil.getClonedDataSourceSettings(args.dataSourceSettings),
              pivotValues: pivot.olapEngineModule.pivotValues
            };
            _this_1.trigger(enginePopulated, eventArgs);
            _this_1.olapEngineModule.pivotValues = eventArgs.pivotValues;
            _this_1.renderPivotGrid();
          } else {
            _this_1.hideWaitingPopup();
            _this_1.setProperties({
              dataSourceSettings: {
                drilledMembers: clonedDrillMembers
              }
            }, true);
          }
        });
      }
    };
    PivotView2.prototype.onContentReady = function() {
      var horiScrollHeight = getScrollBarWidth();
      this.isPopupClicked = false;
      var verOffset;
      var vWidth;
      if (this.showFieldList && this.pivotFieldListModule && this.dataSourceSettings.mode !== "Server") {
        this.pivotFieldListModule.element.style.display = "block";
        hideSpinner(this.pivotFieldListModule.fieldListSpinnerElement);
      } else if (this.fieldListSpinnerElement) {
        hideSpinner(this.fieldListSpinnerElement);
      }
      if (!this.isEmptyGrid) {
        if (this.dataSourceSettings.mode === "Server" && this.isServerWaitingPopup || this.dataSourceSettings.mode === "Local") {
          this.hideWaitingPopup();
        }
      } else if (this.pivotValues.length > 0) {
        this.isEmptyGrid = false;
        this.notEmpty = true;
      }
      var mCnt = this.element.querySelector("." + CONTENT_VIRTUALTABLE_DIV) ? this.element.querySelector("." + CONTENT_VIRTUALTABLE_DIV) : this.element.querySelector("." + CONTENT_CLASS);
      var mHdr = this.element.querySelector("." + MOVABLEHEADER_DIV);
      var enableOptimizedRendering = this.virtualScrollSettings && this.virtualScrollSettings.allowSinglePage && this.dataType === "pivot";
      if (this.grid) {
        var gridContentDiv = this.element.querySelector("." + GRID_CONTENT);
        var isHorizontalOverFlow = mCnt.parentElement.offsetWidth < mCnt.querySelector("." + TABLE).offsetWidth;
        var engine = this.dataType === "pivot" ? this.engineModule : this.olapEngineModule;
        if (this.enableVirtualization && engine && this.virtualscrollModule) {
          if (enableOptimizedRendering && this.element.querySelector("." + PIVOT_CONTENT_LOADER)) {
            removeClass([mHdr, mCnt], ["e-virtual-pivot-content"]);
            addClass([this.element.querySelector("." + PIVOT_CONTENT_LOADER)], [PIVOT_HIDE_LOADER]);
            if (this.grid && this.grid.element.querySelector(".e-spinner-inner")) {
              removeClass([this.grid.element.querySelector(".e-spinner-inner")], [PIVOT_HIDE_LOADER]);
            }
          }
          if (enableOptimizedRendering) {
            var loaderElement = this.element.querySelector("." + PIVOT_CONTENT_LOADER);
            if (!loaderElement) {
              loaderElement = createElement("div", {
                className: PIVOT_CONTENT_LOADER + " " + PIVOT_HIDE_LOADER,
                innerHTML: this.localeObj.getConstant("loading")
              });
              if (this.grid.element && !this.element.querySelector("." + PIVOT_CONTENT_LOADER)) {
                this.grid.element.insertBefore(loaderElement, this.grid.element.firstElementChild);
              }
            }
            if (this.element.querySelector("." + HEADERCONTENT) && this.element.querySelector("." + GRID_CONTENT)) {
              var height = this.element.querySelector("." + GRID_CONTENT).offsetHeight + this.element.querySelector("." + HEADERCONTENT).offsetHeight;
              setStyleAttribute(loaderElement, {
                "height": height + "px",
                "width": this.element.querySelector("." + HEADERCONTENT).offsetWidth + "px",
                "padding": Math.floor(height / 2) + "px"
              });
            }
          }
          if (this.element.querySelector("." + CONTENT_CLASS) && !this.element.querySelector("." + CONTENT_CLASS).querySelector("." + VIRTUALTRACK_DIV)) {
            this.virtualDiv = createElement("div", {
              className: VIRTUALTRACK_DIV
            });
            this.element.querySelector("." + CONTENT_CLASS).appendChild(this.virtualDiv);
          }
          if (this.element.querySelector("." + MOVABLEHEADER_DIV) && !this.element.querySelector("." + MOVABLEHEADER_DIV).querySelector("." + VIRTUALTRACK_DIV)) {
            this.virtualHeaderDiv = createElement("div", {
              className: VIRTUALTRACK_DIV
            });
            this.element.querySelector("." + MOVABLEHEADER_DIV).appendChild(this.virtualHeaderDiv);
          } else {
            this.virtualHeaderDiv = this.element.querySelector("." + MOVABLEHEADER_DIV).querySelector("." + VIRTUALTRACK_DIV);
          }
          var virtualScrollTableDiv = gridContentDiv.querySelector("." + VIRTUALTABLE_DIV);
          if (gridContentDiv && !virtualScrollTableDiv) {
            this.virtualTableDiv = createElement("div", {
              className: VIRTUALTABLE_DIV
            });
            gridContentDiv.appendChild(this.virtualTableDiv);
            virtualScrollTableDiv = gridContentDiv.querySelector("." + VIRTUALTABLE_DIV);
            this.virtualScrollDiv = createElement("div", {
              className: VIRTUALSCROLL_DIV
            });
            virtualScrollTableDiv.appendChild(this.virtualScrollDiv);
            setStyleAttribute(virtualScrollTableDiv, {
              minHeight: horiScrollHeight !== 0 ? horiScrollHeight : "15px",
              maxHeight: horiScrollHeight !== 0 ? horiScrollHeight : "15px",
              overflowX: "scroll"
            });
            setStyleAttribute(this.virtualScrollDiv, {
              height: "0.1px"
            });
            var newContentVirtualDiv = createElement("div", {
              className: CONTENT_VIRTUALTABLE_DIV
            });
            newContentVirtualDiv.append.apply(newContentVirtualDiv, Array.prototype.slice.call(mCnt.childNodes));
            mCnt.appendChild(newContentVirtualDiv);
            newContentVirtualDiv.scrollLeft = 0;
          }
          var movableTable = this.element.querySelector("." + CONTENT_CLASS).querySelector("." + TABLE);
          var vHeight = this.gridSettings.rowHeight * engine.rowCount + 0.1 - movableTable.clientHeight;
          if (vHeight > this.scrollerBrowserLimit) {
            this.verticalScrollScale = vHeight / this.scrollerBrowserLimit;
            vHeight = this.scrollerBrowserLimit;
          }
          vWidth = this.gridSettings.columnWidth * engine.columnCount;
          if (vWidth > this.scrollerBrowserLimit) {
            this.horizontalScrollScale = vWidth / this.scrollerBrowserLimit;
            vWidth = this.scrollerBrowserLimit;
          }
          setStyleAttribute(this.virtualDiv, {
            height: (vHeight > 0.1 ? vHeight : 0.1) + "px",
            width: (vWidth > 0.1 ? vWidth : 0.1) + "px"
          });
          setStyleAttribute(this.virtualHeaderDiv, {
            height: 0,
            width: (vWidth > 0.1 ? vWidth : 0.1) + "px"
          });
          if (this.isAdaptive) {
            mCnt.style.minHeight = "1px";
            mCnt.style.minHeight = "1px";
          }
          var ele = this.isAdaptive ? mCnt : gridContentDiv.querySelector("." + VIRTUALTABLE_DIV) ? gridContentDiv.querySelector("." + VIRTUALTABLE_DIV) : mCnt;
          verOffset = mCnt.parentElement.scrollTop > this.scrollerBrowserLimit ? mCnt.querySelector("." + TABLE).style.transform.split(",")[1].trim() : (enableOptimizedRendering ? mCnt.parentElement.scrollTop : -(mCnt.parentElement.scrollTop * this.verticalScrollScale - this.scrollPosObject.verticalSection - mCnt.parentElement.scrollTop)) + "px)";
          if (Number(verOffset.split("px")[0]) > this.virtualDiv.clientHeight) {
            verOffset = this.virtualDiv.clientHeight + "px)";
          }
          var eleScrollLeft = Math.abs(ele.scrollLeft);
          var horiOffset = eleScrollLeft > this.scrollerBrowserLimit ? mCnt.querySelector("." + TABLE).style.transform.split(",")[0].trim() + "," : "translate(" + (this.enableRtl ? 1 : -1) * (eleScrollLeft * this.horizontalScrollScale - this.scrollPosObject.horizontalSection - eleScrollLeft) + "px,";
          setStyleAttribute(mCnt.querySelector("." + TABLE), {
            transform: horiOffset + verOffset
          });
          setStyleAttribute(mHdr.querySelector("." + TABLE), {
            transform: horiOffset + 0 + "px)"
          });
          if (!isHorizontalOverFlow && gridContentDiv && virtualScrollTableDiv || this.isAdaptive) {
            virtualScrollTableDiv.style.display = "none";
          } else {
            virtualScrollTableDiv.style.display = "block";
          }
          var translateValue = Number(-mCnt.querySelector("." + TABLE).style.transform.split("(")[1].split(",")[0].split("px")[0]);
          this.virtualscrollModule.alignFreezedCells(translateValue, true);
          if (isHorizontalOverFlow) {
            var newScrollWidth = 0;
            if (this.pivotColumns.length < 25) {
              newScrollWidth = vWidth + mCnt.querySelector("." + TABLE).querySelector("." + FREEZED_CELL).offsetWidth + (gridContentDiv.offsetWidth - gridContentDiv.clientWidth);
            } else {
              newScrollWidth = vWidth + (gridContentDiv.offsetWidth - gridContentDiv.clientWidth);
            }
            if (this.grid.height !== "auto") {
              this.grid.element.querySelector("." + VIRTUALSCROLL_DIV).style.width = newScrollWidth + horiScrollHeight + "px";
            } else {
              this.grid.element.querySelector("." + VIRTUALSCROLL_DIV).style.width = newScrollWidth + "px";
            }
          }
          if (this.grid.element.querySelector("." + CONTENT_VIRTUALTABLE_DIV)) {
            if (mCnt.parentElement.scrollHeight === mCnt.scrollHeight) {
              mCnt.style.overflowY = "";
            }
          }
          var colValues = this.dataType === "pivot" ? this.dataSourceSettings.valueAxis === "column" ? this.dataSourceSettings.values.length : 1 : 1;
          var exactSize = this.pageSettings.columnPageSize * colValues * this.gridSettings.columnWidth;
          var hScrollPos = ele.scrollWidth - (Math.abs(eleScrollLeft) + ele.offsetWidth);
          if (this.virtualscrollModule && exactSize > 0 && hScrollPos <= exactSize && eleScrollLeft > 0) {
            var mCntScrollPos = mCnt.scrollWidth - (Math.abs(mCnt.scrollLeft) + mCnt.parentElement.offsetWidth);
            var vertiTop = void 0;
            if (mCntScrollPos < 1 && this.scrollDirection === "horizondal") {
              if (mCnt.parentElement.scrollTop > 0) {
                vertiTop = mCnt.parentElement.scrollTop;
              }
              this.virtualDiv.style.display = "none";
              mCntScrollPos = mCnt.scrollWidth - (Math.abs(mCnt.scrollLeft) + mCnt.parentElement.offsetWidth);
            }
            this.virtualDiv.style.display = "";
            if (vertiTop) {
              mCnt.parentElement.scrollTop = vertiTop;
            }
            var mCntVScrollPos = mCnt.scrollWidth - (Math.abs(mCnt.scrollLeft) + mCnt.parentElement.offsetWidth);
            if (mCntScrollPos > 1) {
              this.scrollPosObject.horizontalSection -= hScrollPos <= 0 ? mCntScrollPos > hScrollPos ? mCntScrollPos : -mCntVScrollPos : mCntVScrollPos === mCntScrollPos ? mCntScrollPos - hScrollPos : mCntScrollPos < mCntVScrollPos && (hScrollPos === mCntVScrollPos || hScrollPos > mCntScrollPos) ? -(mCntVScrollPos - mCntScrollPos) : 0;
              if (this.grid.height !== "auto") {
                this.scrollPosObject.horizontalSection -= horiScrollHeight;
              }
              this.scrollPosObject.horizontalSection = this.scrollPosObject.horizontalSection >= -this.element.querySelector("." + GRID_CLASS).querySelector("." + HEADERCELL + "." + FREEZED_CELL).offsetWidth ? this.scrollPosObject.horizontalSection : -this.element.querySelector("." + GRID_CLASS).querySelector("." + HEADERCELL + "." + FREEZED_CELL).offsetWidth;
            }
            horiOffset = eleScrollLeft > this.scrollerBrowserLimit ? mCnt.querySelector("." + TABLE).style.transform.split(",")[0].trim() + "," : "translate(" + (this.enableRtl ? 1 : -1) * (eleScrollLeft * this.horizontalScrollScale - this.scrollPosObject.horizontalSection - eleScrollLeft) + "px,";
            setStyleAttribute(mCnt.querySelector("." + TABLE), {
              transform: horiOffset + verOffset
            });
            setStyleAttribute(mHdr.querySelector("." + TABLE), {
              transform: horiOffset + 0 + "px)"
            });
            translateValue = Number(-mCnt.querySelector("." + TABLE).style.transform.split("(")[1].split(",")[0].split("px")[0]);
            this.virtualscrollModule.alignFreezedCells(translateValue, true);
          }
        }
        if (this.currentView !== "Chart") {
          this.grid.hideScroll();
        }
        if (this.showGroupingBar) {
          if (this.groupingBarModule && this.element.querySelector("." + GROUPING_BAR_CLASS)) {
            this.groupingBarModule.setGridRowWidth();
          }
          if (this.actionObj.fieldInfo && this.actionObj.fieldInfo.fieldName) {
            var pivotButton = this.pivotButtonModule.parentElement.querySelector('[data-uid="' + this.actionObj.fieldInfo.fieldName + '"]');
            if (!isNullOrUndefined(pivotButton)) {
              pivotButton.focus();
            }
          }
          this.element.style.minWidth = this.isAdaptive ? this.minWidth ? this.minWidth + "px" : "310px" : this.minWidth ? this.minWidth + "px" : "400px";
          this.grid.element.style.minWidth = this.isAdaptive ? this.minWidth ? this.minWidth + "px" : "310px" : this.minWidth ? this.minWidth + "px" : "400px";
        } else {
          this.element.style.minWidth = this.minWidth ? this.minWidth + "px" : "310px";
          this.grid.element.style.minWidth = this.minWidth ? this.minWidth + "px" : "310px";
        }
      }
      this.unwireEvents();
      this.wireEvents();
      this.isChartLoaded = false;
      if (!this.isEmptyGrid) {
        this.trigger(dataBound);
      }
      this.actionObj.actionName = this.getActionCompleteName();
      if (this.actionObj.actionName) {
        if (this.actionObj.actionName === fieldFiltered && this.pivotCommon && this.pivotCommon.filterDialog) {
          clearTimeout(this.timeOutObj);
          this.timeOutObj = setTimeout(this.pivotCommon.filterDialog.setFocus.bind(this.pivotCommon.filterDialog));
        }
        if (this.actionObj.actionName !== windowResize) {
          this.actionCompleteMethod();
        }
      }
      if (this.groupingModule) {
        this.groupingModule.isUpdate = false;
      }
      if (this.engineModule) {
        this.engineModule.clearProperties();
      }
      if (this.virtualscrollModule && this.grid) {
        this.virtualscrollModule.onHorizondalScroll(mHdr, mCnt);
      }
      if (!this.isAdaptive && this.enableVirtualization && mCnt && this.virtualscrollModule && !enableOptimizedRendering) {
        var movableVirtualScrollBar = mCnt.parentElement.parentElement.querySelector(".e-movablescrolldiv");
        if (vWidth < mCnt.parentElement.clientWidth * 3) {
          mCnt.style.overflowX = "visible";
          movableVirtualScrollBar.style.display = "none";
          mHdr.scrollLeft = mCnt.parentElement.scrollLeft;
          setStyleAttribute(mCnt.querySelector("." + TABLE), {
            transform: "translate(0px," + verOffset
          });
          setStyleAttribute(mHdr.querySelector("." + TABLE), {
            transform: "translate(0px, 0px)"
          });
          this.virtualscrollModule.alignFreezedCells(0, true);
        } else {
          EventHandler.remove(this.element.querySelector("." + GRID_CONTENT).querySelector("." + CONTENT_CLASS), "scroll", this.headerScrollUpdate);
          var contentLeft = this.element.querySelector("." + GRID_CONTENT).querySelector("." + CONTENT_CLASS).scrollLeft;
          mCnt.style.overflowX = "auto";
          movableVirtualScrollBar.style.display = "block";
          if (contentLeft !== 0) {
            movableVirtualScrollBar.scrollLeft = contentLeft;
          }
          if (movableVirtualScrollBar.scrollLeft !== mCnt.scrollLeft && mCnt.scrollLeft !== 0) {
            movableVirtualScrollBar.scrollLeft = mCnt.scrollLeft;
          }
        }
      }
      this.isStaticRefresh = false;
    };
    PivotView2.prototype.setToolTip = function(args) {
      var _this_1 = this;
      var colIndex = parseInt(args.target.getAttribute("aria-colindex"), 10) - 1;
      var rowIndex = Number(args.target.getAttribute("index"));
      var cell = this.dataSourceSettings.values.length > 0 && this.pivotValues && this.pivotValues[rowIndex] && this.pivotValues[rowIndex][colIndex] ? this.pivotValues[rowIndex][colIndex] : void 0;
      this.tooltip.content = "";
      var aggregateType;
      var caption;
      var hasField = false;
      if (cell && this.dataType === "olap") {
        var measureName = cell.actualText;
        if (!isNullOrUndefined(measureName) && this.olapEngineModule.fieldList && !this.olapEngineModule.fieldList[measureName]) {
          var tupleInfo = this.olapEngineModule.tupRowInfo;
          measureName = cell.rowOrdinal > -1 && tupleInfo.length > 0 && tupleInfo[cell.rowOrdinal] && !isNullOrUndefined(tupleInfo[cell.rowOrdinal].measureName) ? tupleInfo[cell.rowOrdinal].measureName : measureName;
        }
        if (this.olapEngineModule.fieldList && this.olapEngineModule.fieldList[measureName]) {
          var field = this.olapEngineModule.fieldList[measureName];
          aggregateType = field.isCalculatedField ? field.type : field.aggregateType;
          caption = this.olapEngineModule.dataFields[measureName] && this.olapEngineModule.dataFields[measureName].caption ? this.olapEngineModule.dataFields[measureName].caption : field.caption;
          hasField = true;
        }
      } else {
        if (cell && this.engineModule.fieldList && this.engineModule.fieldList[cell.actualText]) {
          var field = this.engineModule.fieldList[cell.actualText];
          aggregateType = field.aggregateType;
          if (aggregateType !== "DistinctCount" && (field.type !== "number" || field.type === "include" || field.type === "exclude")) {
            aggregateType = "Count";
          } else {
            aggregateType = aggregateType === void 0 ? "Sum" : field.aggregateType;
          }
          caption = field.caption;
          hasField = true;
        }
      }
      if (cell && hasField) {
        var columnIndex = this.isTabular && this.engineModule.rowMaxLevel > 0 ? this.engineModule.rowMaxLevel : 0;
        var rowHeaders = this.getRowText(rowIndex, columnIndex);
        var columnHeaders = this.getColText(0, colIndex, rowIndex);
        var value = cell.formattedText === "" ? this.localeObj.getConstant("noValue") : cell.formattedText;
        if (this.tooltipTemplate && this.getTooltipTemplate() !== void 0) {
          var rowFields = this.getHeaderField(rowIndex, colIndex, "row");
          var columnFields = this.getHeaderField(rowIndex, colIndex, "column");
          var templateObject = {
            rowHeaders,
            columnHeaders,
            aggregateType,
            valueField: caption,
            value,
            rowFields,
            columnFields
          };
          if (typeof this.tooltipTemplate === "function" && this.isReact) {
            var tooltipContent_1 = document.createElement("div");
            this.getTooltipTemplate()(templateObject, this, "tooltipTemplate", this.element.id + "tooltipTemplate", null, null, tooltipContent_1);
            this.renderReactTemplates(function() {
              if (_this_1.enableHtmlSanitizer) {
                _this_1.tooltip.content = SanitizeHtmlHelper.sanitize(tooltipContent_1.outerHTML);
              } else {
                _this_1.tooltip.content = tooltipContent_1.outerHTML;
              }
            });
          } else {
            var element = this.getTooltipTemplate()(templateObject, this, "tooltipTemplate", this.element.id + "tooltipTemplate")[0].outerHTML;
            if (this.enableHtmlSanitizer) {
              this.tooltip.content = SanitizeHtmlHelper.sanitize(element);
            } else {
              this.tooltip.content = element;
            }
          }
        } else {
          var contentTemp_1 = "<div class=" + PIVOTTOOLTIP + "><p class=" + TOOLTIP_HEADER + ">" + this.localeObj.getConstant("row") + ":</p><p class=" + TOOLTIP_CONTENT + ">" + rowHeaders + "</p></br><p class=" + TOOLTIP_HEADER + ">" + this.localeObj.getConstant("column") + ":</p><p class=" + TOOLTIP_CONTENT + ">" + columnHeaders + "</p></br>" + (cell.actualText !== "" ? "<p class=" + TOOLTIP_HEADER + ">" + (this.dataType === "olap" ? "" : this.localeObj.getConstant(aggregateType) + " " + this.localeObj.getConstant("of") + " ") + caption + ":</p><p class=" + TOOLTIP_CONTENT + ">" + value + "</p></div>" : "");
          var contentFunc = function() {
            return contentTemp_1;
          };
          this.tooltip.content = initializeCSPTemplate(contentFunc);
        }
      } else {
        args.cancel = true;
      }
    };
    PivotView2.prototype.getTooltipTemplate = function() {
      return this.tooltipTemplateFn;
    };
    PivotView2.prototype.getHeaderField = function(rowIndex, colIndex, axis) {
      var fields = "";
      var len;
      var engineModule = this.dataType === "olap" ? this.olapEngineModule : this.engineModule;
      var delimiter = engineModule.valueSortSettings.headerDelimiter;
      if (axis === "row") {
        len = this.pivotValues[rowIndex][0].valueSort.levelName.toString().split(delimiter).length;
        for (var i = 0; i < len && this.dataSourceSettings.rows.length > 0 && this.dataSourceSettings.rows[i]; i++) {
          fields += (i ? " - " : "") + (this.dataSourceSettings.rows[i].caption ? this.dataSourceSettings.rows[i].caption : this.dataSourceSettings.rows[i].name);
        }
      } else {
        if (this.dataSourceSettings.columns.length > 0) {
          var pos = this.dataSourceSettings.values.length === 0 ? 0 : Number(Object.keys(engineModule.headerContent)[Object.keys(engineModule.headerContent).length - 1]);
          len = this.pivotValues[pos][colIndex].valueSort.levelName.toString().split(delimiter).length;
          len = this.dataSourceSettings.values.length > 1 ? len - 1 : len;
        }
        for (var j = 0; j < len && this.dataSourceSettings.columns.length > 0 && this.dataSourceSettings.columns[j]; j++) {
          fields += (j ? " - " : "") + (this.dataSourceSettings.columns[j].caption ? this.dataSourceSettings.columns[j].caption : this.dataSourceSettings.columns[j].name);
        }
      }
      return fields;
    };
    PivotView2.prototype.getLevel = function(cell) {
      var levelName = cell.valueSort ? cell.valueSort.levelName.toString() : "";
      var memberPos = cell.actualText ? cell.actualText.toString().split(this.dataSourceSettings.valueSortSettings.headerDelimiter).length : 0;
      var levelPosition = levelName.split(this.dataSourceSettings.valueSortSettings.headerDelimiter).length - (memberPos ? memberPos - 1 : memberPos);
      return levelPosition ? levelPosition - 1 : 0;
    };
    PivotView2.prototype.getRowText = function(rowIndex, colIndex) {
      var cell = this.pivotValues[rowIndex][colIndex];
      var rowText = "";
      if (cell) {
        var level = this.getLevel(cell);
        rowText = cell.type === "grand sum" ? this.localeObj.getConstant("grandTotal") : cell.formattedText;
        if (this.dataSourceSettings.valueAxis === "row") {
          rowText = this.dataSourceSettings.rows.length === 0 && this.dataSourceSettings.values.length > 1 ? this.pivotValues[rowIndex][0].valueSort.levelName.toString().slice((this.localeObj.getConstant("grandTotal") + this.dataSourceSettings.valueSortSettings.headerDelimiter).length).toString() : this.dataSourceSettings.values.length === 1 ? !isNullOrUndefined(this.dataSourceSettings.values[0].caption) ? this.dataSourceSettings.values[0].caption : this.dataSourceSettings.values[0].name : this.pivotValues[rowIndex][0].valueSort.levelName.toString();
          rowText = rowText.split(this.dataSourceSettings.valueSortSettings.headerDelimiter).join(" - ");
        } else {
          if (this.isTabular) {
            while (level > 0) {
              colIndex--;
              cell = this.pivotValues[rowIndex][colIndex];
              rowText = rowText + this.dataSourceSettings.valueSortSettings.headerDelimiter + cell.formattedText;
              level = level - 1;
            }
          } else {
            while (level > 0 || cell && cell.index === void 0) {
              rowIndex--;
              cell = this.pivotValues[rowIndex][colIndex];
              if (cell) {
                if (level > cell.level) {
                  rowText = rowText + this.dataSourceSettings.valueSortSettings.headerDelimiter + cell.formattedText;
                  level = level - 1;
                }
              }
            }
          }
        }
        rowText = rowText.split(this.dataSourceSettings.valueSortSettings.headerDelimiter).reverse().join(" - ");
      }
      return rowText;
    };
    PivotView2.prototype.getColText = function(rowIndex, colIndex, limit) {
      var cell = this.pivotValues[0][colIndex];
      var axis = cell.axis;
      var colText = cell.type === "grand sum" ? this.localeObj.getConstant("grandTotal") : cell.formattedText;
      while (axis !== "value" && limit > rowIndex) {
        rowIndex++;
        if (this.pivotValues[rowIndex]) {
          cell = this.pivotValues[rowIndex][colIndex];
          axis = cell.axis;
          if (cell.type !== "sum" && cell.type !== "grand sum" && axis !== "value") {
            colText = colText + " - " + cell.formattedText;
          }
        }
      }
      return colText;
    };
    PivotView2.prototype.updateClass = function() {
      if (this.enableRtl) {
        addClass([this.element], RTL);
      } else {
        removeClass([this.element], RTL);
      }
      if (this.isAdaptive) {
        addClass([this.element], DEVICE);
      } else {
        removeClass([this.element], DEVICE);
      }
      if (this.cssClass) {
        addClass([this.element], this.cssClass.split(" "));
      }
    };
    PivotView2.prototype.mouseRclickHandler = function(e) {
      if (e.which === 3) {
        this.lastCellClicked = e.target;
      } else if (e.which === 0) {
        this.lastCellClicked = e.target;
      }
      this.lastCellClicked = e.target;
    };
    PivotView2.prototype.mouseDownHandler = function(e) {
      if (e.which === 3) {
        this.lastCellClicked = e.target;
      }
      if (this.isCellBoxMultiSelection) {
        this.isMouseDown = e.target.closest("." + PIVOT_BUTTON_CLASS) ? false : true;
        this.isMouseUp = false;
        this.lastSelectedElement = void 0;
      }
    };
    PivotView2.prototype.mouseMoveHandler = function(e) {
      var _this_1 = this;
      if (this.isCellBoxMultiSelection) {
        e.preventDefault();
        var ele_1 = e.target ? e.target : void 0;
        if (this.isMouseDown && ele_1 && !ele_1.classList.contains("e-expand") && !ele_1.classList.contains("e-collapse")) {
          var axis = ele_1.parentElement.classList.contains(ROWSHEADER) || ele_1.classList.contains(ROWSHEADER) ? "row" : "column";
          ele_1 = axis === "column" ? closest(ele_1, "th") : closest(ele_1, "td");
          if (ele_1) {
            var colIndex = parseInt(ele_1.getAttribute("aria-colindex"), 10) - 1;
            var rowIndex = Number(ele_1.getAttribute("index"));
            var selectArgs = {
              cancel: false,
              isCellClick: true,
              currentCell: ele_1,
              data: this.pivotValues[rowIndex][colIndex]
            };
            this.trigger(cellSelecting, selectArgs, function(observedArgs) {
              if (!observedArgs.cancel) {
                _this_1.grid.clearSelection();
                var parentElement = _this_1.parentAt(ele_1, "TH");
                if (_this_1.lastSelectedElement && _this_1.lastSelectedElement !== parentElement && parentElement.classList.contains(SELECTED_BGCOLOR)) {
                  _this_1.lastSelectedElement.classList.remove(CELL_ACTIVE_BGCOLOR);
                  _this_1.lastSelectedElement.classList.remove(SELECTED_BGCOLOR);
                  _this_1.lastSelectedElement = parentElement;
                } else {
                  _this_1.lastSelectedElement = parentElement;
                  if (!(parentElement.classList.contains(HEADERCELL) && parentElement.classList.contains(FREEZED_CELL))) {
                    parentElement.classList.add(CELL_ACTIVE_BGCOLOR);
                    parentElement.classList.add(SELECTED_BGCOLOR);
                  }
                }
                _this_1.renderModule.selected();
              }
            });
          }
        }
      }
    };
    PivotView2.prototype.mouseUpHandler = function() {
      if (this.isCellBoxMultiSelection) {
        this.isMouseDown = false;
        this.isMouseUp = true;
      }
    };
    PivotView2.prototype.parentAt = function(target, tagName) {
      while (target.tagName !== tagName) {
        if (target.parentElement) {
          target = target.parentElement;
        } else {
          break;
        }
      }
      return target;
    };
    PivotView2.prototype.mouseClickHandler = function(e) {
      if (e.which === 3) {
        this.lastCellClicked = e.target;
      } else if (e.which === 0) {
        this.lastCellClicked = e.target;
      }
      var target = e.target;
      if (closest(target, "." + PIVOT_BUTTON_CLASS)) {
        return;
      }
      var ele = null;
      var rowHeaderCell = target.closest("td.e-rowsheader");
      var valueCell = target.closest("td.e-valuescontent");
      var axis = rowHeaderCell || valueCell ? "row" : "column";
      ele = axis === "column" ? closest(target, "th") : closest(target, "td");
      if (axis === "column" && !ele && this.gridSettings.selectionSettings.mode !== "Row") {
        ele = closest(target, "td");
      }
      if (!target.classList.contains(COLLAPSE) && !target.classList.contains(EXPAND) && this.enableValueSorting && !target.classList.contains(RESIZED) && !(target.classList.contains(RHANDLER) && target.classList.contains(RCURSOR)) && !(this.dataType === "olap" && this.enableVirtualization)) {
        var engine = this.dataType === "pivot" ? this.engineModule : this.olapEngineModule;
        this.cellClicked(target, ele, e);
        try {
          if (ele && (ele.parentElement.parentElement.parentElement.parentElement.classList.contains(HEADERCONTENT) && this.dataSourceSettings.valueAxis === "column" && !ele.classList.contains(FREEZED_CELL) || ele.parentElement.classList.contains("e-row") && this.dataSourceSettings.valueAxis === "row" && (ele.classList.contains("e-rowsheader") || ele.classList.contains("e-stot")))) {
            var FieldName = ele.getAttribute("fieldname");
            var fieldInfo = PivotUtil.getFieldInfo(FieldName, this);
            this.actionObj.actionName = sortValue;
            this.actionObj.fieldInfo = fieldInfo.fieldItem;
            if (this.actionBeginMethod()) {
              return;
            }
            var colIndex = this.isTabular ? this.engineModule.rowMaxLevel : parseInt(ele.getAttribute("aria-colindex"), 10) - 1;
            var rowIndex = Number(ele.getAttribute("index"));
            if (this.dataSourceSettings.valueAxis === "row" && (this.dataSourceSettings.values.length > 1 || this.dataSourceSettings.alwaysShowValueHeader)) {
              var header = this.pivotValues[rowIndex][colIndex];
              if (this.dataSourceSettings.valueIndex === -1 && !this.isTabular) {
                rowIndex = header.type === "value" || header.memberType === 3 ? rowIndex : rowIndex + 1;
              } else {
                var level = this.getLevel(header);
                rowIndex = level <= engine.measureIndex && header.members && header.members.length > 0 ? header.members[0].rowIndex : rowIndex;
              }
            } else if (this.dataSourceSettings.valueAxis === "column" && (this.dataSourceSettings.values.length > 1 || this.dataSourceSettings.alwaysShowValueHeader)) {
              colIndex = parseInt(ele.getAttribute("aria-colindex"), 10) - 1 + Number(ele.getAttribute("aria-colspan")) - 1;
              rowIndex = engine.headerContent.length - 1;
            }
            this.setProperties({
              dataSourceSettings: {
                valueSortSettings: {
                  columnIndex: parseInt(ele.getAttribute("aria-colindex"), 10) - 1 + Number(ele.getAttribute("aria-colspan")) - 1,
                  sortOrder: this.dataSourceSettings.valueSortSettings.sortOrder === "Descending" ? "Ascending" : "Descending",
                  headerText: this.pivotValues[rowIndex][colIndex].valueSort.levelName,
                  headerDelimiter: this.dataSourceSettings.valueSortSettings.headerDelimiter ? this.dataSourceSettings.valueSortSettings.headerDelimiter : "."
                }
              }
            }, true);
            this.showWaitingPopup();
            var pivot = this;
            engine.enableValueSorting = true;
            if (pivot.enableVirtualization || pivot.enablePaging) {
              if (pivot.dataSourceSettings.enableSorting) {
                for (var _i = 0, _a = Object.keys(pivot.engineModule.fieldList); _i < _a.length; _i++) {
                  var key = _a[_i];
                  pivot.engineModule.fieldList[key].sort = "Ascending";
                }
                pivot.setProperties({
                  dataSourceSettings: {
                    sortSettings: []
                  }
                }, true);
              }
              if (pivot.dataSourceSettings.mode === "Server") {
                pivot.getEngine("onValueSort", null, null, null, null, null, null);
              } else {
                pivot.engineModule.rMembers = pivot.engineModule.headerCollection.rowHeaders;
                pivot.engineModule.cMembers = pivot.engineModule.headerCollection.columnHeaders;
                pivot.engineModule.applyValueSorting();
                pivot.engineModule.updateEngine();
              }
            } else if (pivot.dataSourceSettings.mode === "Server") {
              pivot.getEngine("onValueSort", null, null, null, null, null, null);
            } else if (this.dataType === "olap") {
              pivot.olapEngineModule.onSort(pivot.dataSourceSettings, true);
            } else {
              pivot.engineModule.generateGridData(pivot.dataSourceSettings, true);
            }
            pivot.allowServerDataBinding = false;
            pivot.setProperties({
              pivotValues: engine.pivotValues
            }, true);
            pivot.allowServerDataBinding = true;
            var actionInfo = {
              valueSortInfo: engine.valueSortSettings
            };
            this.actionObj.actionInfo = actionInfo;
            pivot.renderPivotGrid();
          }
        } catch (execption) {
          this.actionFailureMethod(execption);
        }
      } else if (target.classList.contains(COLLAPSE) || target.classList.contains(EXPAND)) {
        var drillFieldName = target.parentElement.getAttribute("fieldname");
        var fieldInfo = PivotUtil.getFieldInfo(drillFieldName, this);
        var actionName = target.classList.contains(COLLAPSE) ? this.actionObj.actionName = drillUp : target.classList.contains(EXPAND) ? this.actionObj.actionName = drillDown : "";
        this.actionObj.actionName = actionName;
        this.actionObj.fieldInfo = fieldInfo.fieldItem;
        if (this.actionBeginMethod()) {
          return;
        }
        try {
          this.onDrill(target);
        } catch (execption) {
          this.actionFailureMethod(execption);
        }
      } else {
        this.cellClicked(target, ele, e);
        return;
      }
    };
    PivotView2.prototype.updateTotColWidth = function() {
      this.totColWidth = 0;
      for (var _i = 0, _a = this.pivotColumns; _i < _a.length; _i++) {
        var column = _a[_i];
        this.totColWidth = this.totColWidth + column.width;
      }
    };
    PivotView2.prototype.framePivotColumns = function(gridcolumns) {
      for (var _i = 0, gridcolumns_1 = gridcolumns; _i < gridcolumns_1.length; _i++) {
        var column = gridcolumns_1[_i];
        if (column.columns && column.columns.length > 0) {
          this.framePivotColumns(column.columns);
        } else {
          var levelName = column.field === "0.formattedText" ? "" : column.customAttributes && column.customAttributes.cell && column.customAttributes.cell.valueSort ? column.customAttributes.cell.valueSort.levelName : "";
          var width = this.renderModule.setSavedWidth(column.field === "0.formattedText" ? column.field : levelName, Number(column.width === "auto" ? column.minWidth : column.width));
          this.pivotColumns.push({
            allowReordering: column.allowReordering,
            allowResizing: column.allowResizing,
            headerText: levelName,
            width,
            autoFit: column.autoFit
          });
          this.totColWidth = this.totColWidth + Number(width);
        }
      }
    };
    PivotView2.prototype.setGridColumns = function(gridcolumns) {
      if (!isNullOrUndefined(this.totColWidth) && this.totColWidth > 0 || this.renderModule.isAutoFitEnabled) {
        for (var _i = 0, gridcolumns_2 = gridcolumns; _i < gridcolumns_2.length; _i++) {
          var column = gridcolumns_2[_i];
          if (column.columns && column.columns.length > 0) {
            this.setGridColumns(column.columns);
          } else if (this.renderModule.isAutoFitEnabled) {
            column.autoFit = this.pivotColumns[this.posCount].autoFit;
            this.posCount++;
          } else {
            var levelName = column.field === "0.formattedText" ? "" : column.customAttributes ? column.customAttributes.cell.valueSort.levelName : "";
            column.allowReordering = this.pivotColumns[this.posCount].allowReordering;
            column.allowResizing = this.pivotColumns[this.posCount].allowResizing;
            column.autoFit = this.pivotColumns[this.posCount].autoFit;
            var calcWidth = this.renderModule.setSavedWidth(column.field === "0.formattedText" ? column.field : levelName, Number(this.pivotColumns[this.posCount].width));
            if (!column.autoFit) {
              if (column.width !== "auto") {
                column.width = calcWidth;
              } else {
                column.minWidth = calcWidth;
              }
            } else {
              this.renderModule.isAutoFitEnabled = true;
            }
            this.posCount++;
            if (column.allowReordering) {
              this.gridSettings.allowReordering = true;
            }
            if (column.allowResizing) {
              this.gridSettings.allowResizing = true;
            }
          }
        }
        if (this.gridSettings.allowReordering) {
          Grid.Inject(Reorder);
        }
        if (this.gridSettings.allowResizing) {
          Grid.Inject(Resize);
        }
      }
    };
    PivotView2.prototype.fillGridColumns = function(gridcolumns) {
      for (var _i = 0, gridcolumns_3 = gridcolumns; _i < gridcolumns_3.length; _i++) {
        var column = gridcolumns_3[_i];
        column.allowReordering = this.gridSettings.allowReordering;
        column.allowResizing = this.gridSettings.allowResizing;
        column.clipMode = this.gridSettings.clipMode;
        this.posCount++;
        if (column.columns && column.columns.length > 0) {
          this.fillGridColumns(column.columns);
        }
      }
    };
    PivotView2.prototype.triggerColumnRenderEvent = function(gridcolumns) {
      this.pivotColumns = [];
      this.totColWidth = 0;
      this.framePivotColumns(gridcolumns);
      var firstColWidth = this.pivotColumns[0].width;
      var eventArgs = {
        columns: this.pivotColumns,
        dataSourceSettings: this.dataSourceSettings,
        stackedColumns: this.getStackedColumns(gridcolumns, [])
      };
      this.trigger(beforeColumnsRender, eventArgs);
      this.updateTotColWidth();
      if (firstColWidth !== this.pivotColumns[0].width) {
        this.firstColWidth = this.pivotColumns[0].width;
        this.renderModule.resColWidth = parseInt(this.firstColWidth.toString(), 10);
      }
      this.posCount = 0;
      this.setGridColumns(gridcolumns);
    };
    PivotView2.prototype.setCommonColumnsWidth = function(columns, width) {
      for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
        var column = columns_1[_i];
        if (this.isTabular) {
          if (column.index > this.engineModule.rowMaxLevel) {
            if (column.columns) {
              this.setCommonColumnsWidth(column.columns, width);
            } else {
              this.setColumnWidth(column, width);
            }
          } else {
            column.width = !this.firstColWidth ? column.width : this.firstColWidth;
          }
        } else {
          if (column.field !== "0.formattedText") {
            if (column.columns) {
              this.setCommonColumnsWidth(column.columns, width);
            } else {
              this.setColumnWidth(column, width);
            }
          } else {
            column.width = !this.firstColWidth ? column.width : this.firstColWidth;
          }
        }
      }
    };
    PivotView2.prototype.getHeightAsNumber = function() {
      var height;
      var displayMode;
      if (isNaN(this.height)) {
        if (this.height.toString().indexOf("%") > -1) {
          if (this.isAngular && this.element && this.element.style) {
            displayMode = window.getComputedStyle(this.element).display;
            this.element.style.display = "block";
          }
          height = parseFloat(this.height.toString()) / 100 * this.element.offsetHeight;
          if (this.isAngular && this.element && this.element.style) {
            this.element.style.display = displayMode;
          }
        } else if (this.height.toString().indexOf("px") > -1) {
          height = Number(this.height.toString().split("px")[0]);
        }
      } else {
        height = Number(this.height);
      }
      if (height < this.minHeight || this.height === "auto") {
        height = this.minHeight;
      }
      return height;
    };
    PivotView2.prototype.getWidthAsNumber = function() {
      var width;
      if (isNaN(this.width)) {
        if (this.width.toString().indexOf("%") > -1) {
          width = parseFloat(this.width.toString()) / 100 * this.element.offsetWidth;
        } else if (this.width.toString().indexOf("px") > -1) {
          width = Number(this.width.toString().split("px")[0]);
        }
        if (isNaN(width)) {
          width = this.element.offsetWidth;
        }
      } else {
        width = Number(this.width);
      }
      if (width < 400 && !this.isAdaptive) {
        width = this.minWidth ? this.minWidth : 400;
      } else if (this.isAdaptive && width < 310) {
        width = this.minWidth ? this.minWidth : 310;
      }
      return width;
    };
    PivotView2.prototype.getGridWidthAsNumber = function() {
      var width;
      var offsetWidth = this.element.offsetWidth ? this.element.offsetWidth : this.element.getBoundingClientRect().width;
      if (isNaN(this.grid.width)) {
        if (this.grid.width.toString().indexOf("%") > -1) {
          width = parseFloat(this.grid.width.toString()) / 100 * offsetWidth;
        } else if (this.grid.width.toString().indexOf("px") > -1) {
          width = Number(this.grid.width.toString().split("px")[0]);
        }
        if (isNaN(width)) {
          width = offsetWidth;
        }
      } else {
        width = Number(this.grid.width);
      }
      return width;
    };
    PivotView2.prototype.onWindowResize = function() {
      this.actionObj.actionName = windowResize;
      if (this.actionBeginMethod()) {
        return;
      }
      clearTimeout(this.timeOutObj);
      this.timeOutObj = setTimeout(this.layoutRefresh.bind(this), 500);
      this.actionObj.actionName = this.getActionCompleteName();
      if (this.actionObj.actionName) {
        this.actionCompleteMethod();
      }
    };
    PivotView2.prototype.refresh = function() {
      this.pivotRefresh();
    };
    PivotView2.prototype.layoutRefresh = function() {
      if (this.element && this.element.classList.contains("e-pivotview") && (this.dataType === "olap" ? this.olapEngineModule && this.olapEngineModule.pivotValues : this.engineModule && this.engineModule.pivotValues)) {
        if (this.grid) {
          var colLength = this.dataType === "olap" && this.olapEngineModule.pivotValues.length > 0 ? this.olapEngineModule.pivotValues[0].length : this.dataSourceSettings.values.length > 0 && this.engineModule && this.engineModule.pivotValues.length > 0 ? this.engineModule.pivotValues[0].length : 2;
          var colWidth = this.renderModule.calculateColWidth(colLength);
          this.grid.width = this.renderModule.calculateGridWidth();
          this.renderModule.calculateGridHeight(true);
          if (this.gridSettings.allowAutoResizing) {
            this.setCommonColumnsWidth(this.grid.columns, colWidth);
          }
          this.triggerColumnRenderEvent(this.grid.columns);
          this.grid.refreshColumns();
          if (this.renderModule.isAutoFitEnabled) {
            this.renderModule.addPivotAutoFitClass();
          } else {
            this.renderModule.removePivotAutoFitClass();
          }
          if (this.showGroupingBar && this.groupingBarModule && this.element.querySelector("." + GROUPING_BAR_CLASS)) {
            this.groupingBarModule.setGridRowWidth();
          }
          if (this.chart && this.pivotChartModule) {
            this.chart.height = this.pivotChartModule.getResizedChartHeight();
          }
        }
        if (this.showToolbar && this.toolbarModule && this.toolbarModule.toolbar) {
          this.toolbarModule.toolbar.width = this.grid ? this.getGridWidthAsNumber() : this.getWidthAsNumber();
        }
        if (this.enablePaging) {
          this.notify(initPivotPager, this);
        }
        if (this.chart && (this.showToolbar && this.currentView === "Chart" || !this.showToolbar)) {
          this.chart.width = this.showToolbar && this.grid ? this.getGridWidthAsNumber().toString() : this.displayOption.view === "Both" && this.grid ? this.getGridWidthAsNumber().toString() : this.getWidthAsNumber().toString();
          this.chart.height = this.pivotChartModule.getResizedChartHeight();
          if (this.displayOption.view === "Chart" && this.showGroupingBar && this.groupingBarModule && this.element.querySelector("." + CHART_GROUPING_BAR_CLASS)) {
            this.groupingBarModule.refreshUI();
          }
        }
      }
    };
    PivotView2.prototype.cellClicked = function(target, ele, e) {
      var _this_1 = this;
      if (target.classList.contains(ROW_SELECT)) {
        if (target.classList.contains(SPAN_CLICKED)) {
          this.isPopupClicked = false;
        } else {
          this.isPopupClicked = true;
        }
      }
      if (ele && !isNullOrUndefined(this.pivotValues) && this.pivotValues.length > 0) {
        var colIndex_1 = parseInt(ele.getAttribute("aria-colindex"), 10) - 1;
        var rowIndex_1 = Number(ele.getAttribute("index"));
        var colSpan_1 = Number(ele.getAttribute("aria-colspan"));
        var selectArgs = {
          cancel: false,
          isCellClick: true,
          currentCell: ele,
          data: this.pivotValues[rowIndex_1][colIndex_1]
        };
        this.trigger(cellSelecting, selectArgs, function(observedArgs) {
          if (_this_1.gridSettings.allowSelection) {
            if (_this_1.gridSettings.selectionSettings.mode === "Both" ? !ele.classList.contains(ROW_CELL_CLASS) : _this_1.gridSettings.selectionSettings.mode !== "Row") {
              if (!observedArgs.cancel) {
                _this_1.clearSelection(ele, e);
                _this_1.applyColumnSelection(e, ele, colIndex_1, colIndex_1 + (colSpan_1 > 0 ? colSpan_1 - 1 : 0), rowIndex_1);
              }
            } else {
              _this_1.clearSelection(ele, e);
            }
            if (_this_1.gridSettings.selectionSettings.mode !== "Column" && !ele.classList.contains(COLUMNSHEADER)) {
              _this_1.rowDeselect(ele, e, rowIndex_1, _this_1.gridSettings.selectionSettings.mode, observedArgs);
            }
            if (_this_1.gridSettings.selectionSettings.mode !== "Column" && !observedArgs.cancel) {
              if (_this_1.gridSettings.selectionSettings.type === "Multiple" ? !e.ctrlKey && !e.shiftKey : _this_1.selectedRowIndex !== rowIndex_1) {
                _this_1.selectedRowIndex = rowIndex_1;
                _this_1.grid.selectionModule.selectRow(rowIndex_1 - _this_1.renderModule.rowStartPos);
                ele.classList.add(FOCUSED_CLASS);
              } else {
                _this_1.selectedRowIndex = void 0;
              }
            }
          }
          if (_this_1.cellClick && observedArgs.isCellClick) {
            _this_1.trigger(cellClick, {
              currentCell: ele,
              data: _this_1.pivotValues[rowIndex_1][colIndex_1],
              nativeEvent: e
            });
          }
          _this_1.getSelectedCellsPos();
        });
      } else {
        this.clearSelection(null, e);
      }
    };
    PivotView2.prototype.rowDeselect = function(ele, e, rowIndex, mode, observedArgs) {
      if (!e.shiftKey && !e.ctrlKey && this.gridSettings.selectionSettings.mode !== "Both" || this.gridSettings.selectionSettings.type === "Single") {
        if (!ele.classList.contains(CELL_SELECTED_BGCOLOR) && !ele.classList.contains(SELECTED_BGCOLOR) && !ele.classList.contains(CELL_ACTIVE_BGCOLOR)) {
          if (!observedArgs.cancel) {
            removeClass(this.element.querySelectorAll("." + CELL_SELECTED_BGCOLOR), CELL_SELECTED_BGCOLOR);
            removeClass(this.element.querySelectorAll("." + SELECTED_BGCOLOR), SELECTED_BGCOLOR);
            removeClass(this.element.querySelectorAll("." + CELL_ACTIVE_BGCOLOR), CELL_ACTIVE_BGCOLOR);
          } else {
            this.setSavedSelectedCells();
          }
        } else {
          removeClass(this.element.querySelectorAll("." + CELL_SELECTED_BGCOLOR), CELL_SELECTED_BGCOLOR);
          removeClass(this.element.querySelectorAll("." + SELECTED_BGCOLOR), SELECTED_BGCOLOR);
          removeClass(this.element.querySelectorAll("." + CELL_ACTIVE_BGCOLOR), CELL_ACTIVE_BGCOLOR);
          if (!observedArgs.cancel) {
            if (mode === "Cell") {
              addClass([ele], [CELL_SELECTED_BGCOLOR]);
            } else if (mode === "Row" || this.gridSettings.selectionSettings.type === "Single") {
              var query = '[index="' + rowIndex + '"]';
              addClass(this.element.querySelectorAll(query), [SELECTED_BGCOLOR, CELL_ACTIVE_BGCOLOR]);
              if (mode !== "Row") {
                ele.classList.add(CELL_SELECTED_BGCOLOR);
              }
            }
          } else {
            this.setSavedSelectedCells();
          }
        }
      } else if ((e.shiftKey || e.ctrlKey || this.gridSettings.selectionSettings.mode === "Both") && observedArgs.cancel) {
        removeClass(this.element.querySelectorAll("." + CELL_SELECTED_BGCOLOR), CELL_SELECTED_BGCOLOR);
        removeClass(this.element.querySelectorAll("." + SELECTED_BGCOLOR), SELECTED_BGCOLOR);
        removeClass(this.element.querySelectorAll("." + CELL_ACTIVE_BGCOLOR), CELL_ACTIVE_BGCOLOR);
        this.setSavedSelectedCells();
      }
    };
    PivotView2.prototype.clearSelection = function(ele, e) {
      if (!e.shiftKey && !e.ctrlKey || this.gridSettings.selectionSettings.type === "Single") {
        if (this.gridSettings.selectionSettings.mode === "Cell") {
          if (ele && ele.classList.contains(COLUMNSHEADER)) {
            removeClass(this.element.querySelectorAll("." + ROW_CELL_CLASS + "." + CELL_SELECTED_BGCOLOR), CELL_SELECTED_BGCOLOR);
          } else {
            removeClass(this.element.querySelectorAll("." + COLUMNSHEADER + "." + CELL_ACTIVE_BGCOLOR), [CELL_ACTIVE_BGCOLOR, SELECTED_BGCOLOR]);
          }
        } else if (this.gridSettings.selectionSettings.mode === "Both") {
          if (ele && ele.classList.contains(ROW_CELL_CLASS)) {
            for (var _i = 0, _a = [].slice.call(this.element.querySelectorAll("." + SELECTED_BGCOLOR + ", ." + CELL_SELECTED_BGCOLOR)); _i < _a.length; _i++) {
              var ele_2 = _a[_i];
              removeClass([ele_2], [CELL_ACTIVE_BGCOLOR, SELECTED_BGCOLOR, CELL_SELECTED_BGCOLOR]);
            }
          } else {
            removeClass(this.element.querySelectorAll("." + CELL_SELECTED_BGCOLOR), CELL_SELECTED_BGCOLOR);
          }
        }
      }
    };
    PivotView2.prototype.applyRowSelection = function(colIndex, rowIndex, e) {
      var pivotValue = this.engineModule.pivotValues[rowIndex][colIndex];
      if (!e.ctrlKey && !e.shiftKey && pivotValue && this.selectedRowIndex !== rowIndex) {
        this.selectedRowIndex = rowIndex;
        var parentLevel = pivotValue.level;
        var rCount = rowIndex;
        do {
          rCount++;
          pivotValue = this.engineModule.pivotValues[rCount][colIndex];
        } while (pivotValue && parentLevel < pivotValue.level);
        var _this = this;
        if (this.isAdaptive) {
          this.rowRangeSelection = {
            enable: true,
            startIndex: rowIndex - _this.renderModule.rowStartPos,
            endIndex: rCount - (1 + _this.renderModule.rowStartPos)
          };
        } else {
          _this.grid.selectionModule.selectRowsByRange(rowIndex - _this.renderModule.rowStartPos, rCount - (1 + _this.renderModule.rowStartPos));
        }
      } else {
        this.selectedRowIndex = void 0;
      }
    };
    PivotView2.prototype.applyColumnSelection = function(e, target, colStart, colEnd, rowStart) {
      if (!target.classList.contains(ROWSHEADER) && (this.gridSettings.selectionSettings.mode === "Cell" ? target.classList.contains(COLUMNSHEADER) : true)) {
        var isCtrl = e.ctrlKey;
        if (this.isAdaptive && this.gridSettings.selectionSettings.type === "Multiple") {
          this.grid.selectionModule["showPopup"](e);
          if (this.isPopupClicked) {
            this.element.querySelector("." + ROW_SELECT).classList.add(SPAN_CLICKED);
            isCtrl = true;
          } else {
            this.element.querySelector("." + ROW_SELECT).classList.remove(SPAN_CLICKED);
            isCtrl = false;
          }
        }
        var queryStringArray = [];
        var type = this.gridSettings.selectionSettings.type;
        var isToggle = target.classList.contains(CELL_ACTIVE_BGCOLOR);
        var activeColumns = [];
        var actColPos = {};
        for (var cCnt = colStart; cCnt <= colEnd; cCnt++) {
          activeColumns.push(cCnt.toString());
        }
        if (!isCtrl || type === "Single") {
          for (var _i = 0, _a = [].slice.call(this.element.querySelectorAll("." + CELL_ACTIVE_BGCOLOR)); _i < _a.length; _i++) {
            var ele = _a[_i];
            removeClass([ele], [CELL_ACTIVE_BGCOLOR, SELECTED_BGCOLOR]);
            if (activeColumns.indexOf((parseInt(ele.getAttribute("aria-colindex"), 10) - 1).toString()) === -1) {
              isToggle = false;
            }
            var colIndex = parseInt(ele.getAttribute("aria-colindex"), 10) - 1;
            actColPos[colIndex] = colIndex;
          }
          activeColumns = Object.keys(actColPos).length > 0 ? Object.keys(actColPos).sort(function(a, b) {
            return parseInt(a, 10) - parseInt(b, 10);
          }) : activeColumns;
        } else {
          isToggle = false;
        }
        if (type === "Multiple" && e.shiftKey) {
          this.shiftLockedPos = this.shiftLockedPos.length === 0 ? activeColumns : this.shiftLockedPos;
          if (Number(this.shiftLockedPos[0]) <= colStart) {
            colStart = Number(this.shiftLockedPos[0]);
          } else {
            colEnd = colEnd < Number(this.shiftLockedPos[this.shiftLockedPos.length - 1]) ? Number(this.shiftLockedPos[this.shiftLockedPos.length - 1]) : colEnd;
          }
        } else {
          this.shiftLockedPos = [];
        }
        var rowSelectedList = [];
        if (e.ctrlKey && this.gridSettings.selectionSettings.mode === "Both" && type === "Multiple" && !target.classList.contains(ROWSHEADER)) {
          for (var _b = 0, _c = [].slice.call(this.element.querySelectorAll("." + ROWSHEADER + "." + CELL_SELECTED_BGCOLOR)); _b < _c.length; _b++) {
            var ele = _c[_b];
            rowSelectedList.push(ele.getAttribute("index"));
          }
        }
        var count = colStart;
        while (count <= colEnd) {
          queryStringArray.push('[aria-colindex="' + (count + 1) + '"]' + (this.gridSettings.selectionSettings.mode === "Cell" ? '[index="' + rowStart + '"]' : ""));
          count++;
        }
        if (!isToggle) {
          rowStart = target.classList.contains(HEADERCELL) ? rowStart : this.renderModule.rowStartPos - 1;
          var isTargetSelected = target.classList.contains(CELL_ACTIVE_BGCOLOR);
          for (var _d = 0, _e = [].slice.call(this.element.querySelectorAll(queryStringArray.toString())); _d < _e.length; _d++) {
            var ele = _e[_d];
            if (Number(ele.getAttribute("index")) >= rowStart) {
              if (isTargetSelected && isCtrl && rowSelectedList.indexOf(ele.getAttribute("index")) === -1) {
                removeClass([ele], [CELL_ACTIVE_BGCOLOR, SELECTED_BGCOLOR]);
              } else {
                addClass([ele], [CELL_ACTIVE_BGCOLOR, SELECTED_BGCOLOR]);
              }
            }
          }
        }
        this.renderModule.selected();
      }
    };
    PivotView2.prototype.getSelectedCellsPos = function() {
      var control = this;
      control.savedSelectedCellsPos = [];
      control.cellSelectionPos = [];
      for (var _i = 0, _a = [].slice.call(this.element.querySelectorAll("." + SELECTED_BGCOLOR)); _i < _a.length; _i++) {
        var ele = _a[_i];
        control.savedSelectedCellsPos.push({
          rowIndex: ele.getAttribute("index"),
          colIndex: (parseInt(ele.getAttribute("aria-colindex"), 10) - 1).toString()
        });
      }
      for (var _b = 0, _c = [].slice.call(this.element.querySelectorAll("." + CELL_SELECTED_BGCOLOR)); _b < _c.length; _b++) {
        var ele = _c[_b];
        control.cellSelectionPos.push({
          rowIndex: ele.getAttribute("index"),
          colIndex: (parseInt(ele.getAttribute("aria-colindex"), 10) - 1).toString()
        });
      }
    };
    PivotView2.prototype.setSavedSelectedCells = function() {
      var control = this;
      for (var _i = 0, _a = [].slice.call(this.savedSelectedCellsPos); _i < _a.length; _i++) {
        var item = _a[_i];
        var query = '[aria-colindex="' + (parseInt(item.colIndex, 10) + 1) + '"][index="' + item.rowIndex + '"]';
        addClass([control.element.querySelector(query)], [CELL_ACTIVE_BGCOLOR, SELECTED_BGCOLOR]);
      }
      for (var _b = 0, _c = [].slice.call(this.cellSelectionPos); _b < _c.length; _b++) {
        var item = _c[_b];
        var query = '[aria-colindex="' + (parseInt(item.colIndex, 10) + 1) + '"][index="' + item.rowIndex + '"]';
        addClass([control.element.querySelector(query)], [CELL_SELECTED_BGCOLOR]);
      }
    };
    PivotView2.prototype.renderEmptyGrid = function() {
      var _this_1 = this;
      this.isEmptyGrid = true;
      this.notEmpty = false;
      this.isInitial = true;
      this.renderModule = this.renderModule ? this.renderModule : new Render(this);
      if (this.grid && this.grid.element && this.element.querySelector("." + GRID_CLASS)) {
        this.notEmpty = true;
        this.grid.setProperties({
          columns: this.renderModule.frameEmptyColumns(),
          dataSource: this.renderModule.frameEmptyData()
        }, true);
        this.grid.notify("datasource-modified", {});
        this.grid.refreshColumns();
      } else {
        if (this.element.querySelector("." + GRID_CLASS)) {
          remove(this.element.querySelector("." + GRID_CLASS));
        }
        this.renderModule.bindGrid(this, true);
        this.grid.showSpinner = function() {
        };
        this.grid.hideSpinner = function() {
        };
        var element = createElement("div", {
          id: this.element.id + "_grid"
        });
        this.element.appendChild(element);
        this.grid.isStringTemplate = true;
        this.grid.appendTo(element);
        this.grid.off("data-ready", this.grid.dataReady);
        this.grid.on("data-ready", function() {
          _this_1.grid.scrollModule.setWidth();
          _this_1.grid.scrollModule.setHeight();
        });
      }
    };
    PivotView2.prototype.initEngine = function() {
      var _this_1 = this;
      if (this.element.querySelector(".e-spin-hide")) {
        this.showWaitingPopup();
      }
      if (this.dataType === "pivot") {
        var data = !isNullOrUndefined(this.dataSourceSettings.dataSource) && this.dataSourceSettings.dataSource.length > 0 ? this.dataSourceSettings.dataSource[0] : !isNullOrUndefined(this.engineModule.data) ? this.engineModule.data[0] : void 0;
        if (data && this.pivotCommon) {
          var isArray = Object.prototype.toString.call(data) === "[object Array]";
          if (isArray && this.dataSourceSettings.type === "JSON") {
            this.pivotCommon.errorDialog.createErrorDialog(this.localeObj.getConstant("error"), this.localeObj.getConstant("invalidJSON"));
            return;
          } else if (!isArray && this.dataSourceSettings.type === "CSV") {
            this.pivotCommon.errorDialog.createErrorDialog(this.localeObj.getConstant("error"), this.localeObj.getConstant("invalidCSV"));
            return;
          }
        }
      }
      var args = {
        dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings)
      };
      this.trigger(enginePopulating, args, function(observedArgs) {
        PivotUtil.updateDataSourceSettings(_this_1, observedArgs.dataSourceSettings);
        _this_1.updatePageSettings(false);
        var customProperties = {
          mode: "",
          savedFieldList: void 0,
          pageSettings: _this_1.pageSettings,
          enableValueSorting: _this_1.enableValueSorting,
          isDrillThrough: _this_1.allowDrillThrough || _this_1.editSettings.allowEditing,
          localeObj: _this_1.localeObj,
          fieldsType: _this_1.fieldsType,
          clonedReport: _this_1.clonedReport,
          globalize: _this_1.globalize,
          currenyCode: _this_1.currencyCode,
          enablePaging: _this_1.enablePaging,
          enableVirtualization: _this_1.enableVirtualization,
          allowDataCompression: _this_1.allowDataCompression,
          enableHtmlSanitizer: _this_1.enableHtmlSanitizer,
          enableOptimizedRendering: _this_1.enableVirtualization && _this_1.virtualScrollSettings && _this_1.virtualScrollSettings.allowSinglePage,
          isTabularLayout: _this_1.isTabular
        };
        if (_this_1.dataType === "pivot") {
          if (_this_1.dataSourceSettings.groupSettings && _this_1.dataSourceSettings.groupSettings.length > 0) {
            var dataSet = _this_1.engineModule.data;
            _this_1.clonedDataSet = _this_1.clonedDataSet ? _this_1.clonedDataSet : _this_1.dataSourceSettings.type === "CSV" ? PivotUtil.getClonedCSVData(dataSet) : PivotUtil.getClonedData(dataSet);
            var dataSourceSettings = JSON.parse(_this_1.getPersistData()).dataSourceSettings;
            dataSourceSettings.dataSource = [];
            _this_1.clonedReport = _this_1.clonedReport ? _this_1.clonedReport : dataSourceSettings;
          }
          if (_this_1.dataSourceSettings.mode !== "Server") {
            _this_1.engineModule.renderEngine(_this_1.dataSourceSettings, customProperties, _this_1.aggregateCellInfo ? _this_1.getValueCellInfo.bind(_this_1) : void 0, _this_1.onHeadersSort ? _this_1.getHeaderSortInfo.bind(_this_1) : void 0);
          }
          _this_1.allowServerDataBinding = false;
          _this_1.setProperties({
            pivotValues: _this_1.engineModule.pivotValues
          }, true);
          _this_1.allowServerDataBinding = true;
          _this_1.enginePopulatedEventMethod("initEngine");
        } else if (_this_1.dataSourceSettings.providerType === "SSAS" && _this_1.dataType === "olap") {
          customProperties.savedFieldList = _this_1.olapEngineModule.fieldList;
          customProperties.savedFieldListData = _this_1.olapEngineModule.fieldListData;
          PivotUtil.renderOlapEngine(_this_1, customProperties);
          _this_1.allowServerDataBinding = false;
          _this_1.setProperties({
            pivotValues: _this_1.olapEngineModule.pivotValues
          }, true);
          _this_1.allowServerDataBinding = true;
          _this_1.enginePopulatedEventMethod("initEngine");
        }
      });
    };
    PivotView2.prototype.enginePopulatedEventMethod = function(action, control) {
      if (action === "initEngine") {
        var this$_1 = control ? control : this;
        this.trigger(enginePopulated, {
          pivotValues: this.pivotValues
        }, function(observedArgs) {
          if (this$_1.dataType === "olap") {
            this$_1.olapEngineModule.pivotValues = observedArgs.pivotValues;
            this$_1.setProperties({
              pivotValues: this$_1.olapEngineModule.pivotValues
            }, true);
          } else {
            this$_1.engineModule.pivotValues = observedArgs.pivotValues;
            this$_1.setProperties({
              pivotValues: this$_1.engineModule.pivotValues
            }, true);
          }
          this$_1.notify(dataReady, {});
          this$_1.notEmpty = true;
        });
      } else {
        var pivot_2 = control ? control : this;
        var eventArgs = {
          dataSourceSettings: pivot_2.dataSourceSettings,
          pivotValues: pivot_2.pivotValues
        };
        pivot_2.trigger(enginePopulated, eventArgs, function(observedArgs) {
          pivot_2.dataSourceSettings = observedArgs.dataSourceSettings;
          if (pivot_2.dataType === "olap") {
            pivot_2.olapEngineModule.pivotValues = observedArgs.pivotValues;
            pivot_2.allowServerDataBinding = false;
            pivot_2.setProperties({
              pivotValues: pivot_2.olapEngineModule.pivotValues
            }, true);
            pivot_2.allowServerDataBinding = true;
          } else {
            pivot_2.engineModule.pivotValues = observedArgs.pivotValues;
            pivot_2.allowServerDataBinding = false;
            pivot_2.setProperties({
              pivotValues: pivot_2.engineModule.pivotValues
            }, true);
            pivot_2.allowServerDataBinding = true;
          }
          if (pivot_2.pivotCommon) {
            pivot_2.pivotCommon.engineModule = pivot_2.dataType === "olap" ? pivot_2.olapEngineModule : pivot_2.engineModule;
            pivot_2.pivotCommon.dataSourceSettings = pivot_2.dataSourceSettings;
          }
          pivot_2.renderPivotGrid();
        });
      }
    };
    PivotView2.prototype.generateData = function() {
      if (!this.isStaticRefresh) {
        if (this.displayOption.view === "Chart" || !isNullOrUndefined(this.grid)) {
          this.showWaitingPopup();
          clearTimeout(this.timeOutObj);
          this.timeOutObj = setTimeout(this.refreshData.bind(this), 100);
        } else {
          this.renderEmptyGrid();
          this.showWaitingPopup();
        }
      }
    };
    PivotView2.prototype.refreshData = function() {
      var pivot = this;
      if (!pivot.isStaticRefresh) {
        if (pivot.dataSourceSettings && (pivot.dataSourceSettings.dataSource || pivot.dataSourceSettings.url)) {
          if (pivot.dataSourceSettings.dataSource instanceof DataManager) {
            if (pivot.dataType === "pivot" && pivot.remoteData.length > 0) {
              if (!this.element.querySelector(".e-spinner-pane")) {
                this.showWaitingPopup();
              }
              this.engineModule.data = pivot.remoteData;
              this.initEngine();
            } else if (!isNullOrUndefined(pivot.engineModule.data) && pivot.engineModule.data.length === 0) {
              clearTimeout(this.timeOutObj);
              this.timeOutObj = setTimeout(pivot.getData.bind(pivot), 100);
            } else {
              pivot.initEngine();
            }
          } else if (this.dataSourceSettings.url !== "" && this.dataType === "olap" || pivot.dataSourceSettings.dataSource && pivot.dataSourceSettings.dataSource.length > 0 || this.engineModule.data && this.engineModule.data.length > 0) {
            if (pivot.dataType === "pivot") {
              this.hideWaitingPopup();
              pivot.engineModule.data = pivot.dataSourceSettings.dataSource;
            }
            pivot.initEngine();
          } else {
            if (this.dataSourceSettings.mode === "Server") {
              this.getEngine("onRefresh");
            } else {
              this.notify(dataReady, {});
              this.hideWaitingPopup();
            }
          }
        } else {
          this.notify(dataReady, {});
          this.hideWaitingPopup();
        }
      } else {
        pivot.isStaticRefresh = false;
        pivot.hideWaitingPopup();
      }
    };
    PivotView2.prototype.getValueCellInfo = function(aggregateObj) {
      var args = aggregateObj;
      this.trigger(aggregateCellInfo, args);
      return args;
    };
    PivotView2.prototype.getHeaderSortInfo = function(sortingObj) {
      var args = sortingObj;
      this.trigger(onHeadersSort, args);
      return args;
    };
    PivotView2.prototype.bindTriggerEvents = function(args) {
      this.trigger(getObject("name", args), args);
    };
    PivotView2.prototype.getData = function() {
      if (this.dataSourceSettings.dataSource.defaultQuery) {
        this.dataSourceSettings.dataSource.executeQuery(this.dataSourceSettings.dataSource.defaultQuery).then(this.executeQuery.bind(this));
      } else {
        this.dataSourceSettings.dataSource.executeQuery(new Query()).then(this.executeQuery.bind(this));
      }
    };
    PivotView2.prototype.executeQuery = function(e) {
      if (!this.element.querySelector(".e-spinner-pane")) {
        this.showWaitingPopup();
      }
      var pivot = this;
      pivot.engineModule.data = e.result;
      if (this.isEmptyGrid && !isNullOrUndefined(pivot.engineModule.data) && pivot.engineModule.data.length === 0) {
        this.hideWaitingPopup();
      } else if (!isNullOrUndefined(pivot.engineModule.data) && pivot.engineModule.data.length > 0) {
        this.isEmptyGrid = false;
        pivot.initEngine();
      } else {
        this.isEmptyGrid = true;
        this.hideWaitingPopup();
        this.renderEmptyGrid();
        this.engineModule.fieldList = null;
        this.engineModule.isEmptyData = true;
        this.pivotValues = [];
        this.engineModule.data = [];
        this.notify(dataReady, {});
      }
    };
    PivotView2.prototype.applyFormatting = function(pivotValues) {
      if (pivotValues) {
        var colIndex = [];
        for (var len = pivotValues.length, i = 0; i < len; i++) {
          if (!isNullOrUndefined(pivotValues[i]) && pivotValues[i][0] === void 0) {
            colIndex.push(i);
          }
        }
        for (var i = 0; i < pivotValues.length; i++) {
          for (var j = this.isTabular ? this.engineModule.rowMaxLevel + 1 : 1; pivotValues[i] && j < pivotValues[i].length; j++) {
            if (pivotValues[i][j].axis === "value" && pivotValues[i][j].formattedText !== "") {
              pivotValues[i][j].style = void 0;
              pivotValues[i][j].cssClass = void 0;
              var format_1 = this.dataSourceSettings.conditionalFormatSettings;
              for (var k = 0; k < format_1.length; k++) {
                if (format_1[k].applyGrandTotals === true || isNullOrUndefined(format_1[k].applyGrandTotals) ? true : !pivotValues[i][j].isGrandSum) {
                  if (this.checkCondition(pivotValues[i][j].value, format_1[k].conditions, format_1[k].value1, format_1[k].value2)) {
                    if ((!format_1[k].measure || pivotValues[i][j].actualText === format_1[k].measure) && (format_1[k].measure === void 0 || format_1[k].measure !== "") && (format_1[k].label === void 0 || format_1[k].label !== "") && (!format_1[k].label || pivotValues[i][0].valueSort.levelName.indexOf(format_1[k].label) > -1 || pivotValues[i][j].rowHeaders.indexOf(format_1[k].label) > -1 || pivotValues[i][j].columnHeaders.indexOf(format_1[k].label) > -1)) {
                      if (format_1[k].style && format_1[k].style.backgroundColor) {
                        format_1[k].style.backgroundColor = format_1[k].style.backgroundColor.charAt(0) === "#" && this.conditionalFormattingModule.isHex(format_1[k].style.backgroundColor.substr(1)) ? format_1[k].style.backgroundColor : this.conditionalFormattingModule.colourNameToHex(format_1[k].style.backgroundColor);
                      }
                      if (format_1[k].style && format_1[k].style.color) {
                        format_1[k].style.color = format_1[k].style.color.charAt(0) === "#" && this.conditionalFormattingModule.isHex(format_1[k].style.color.substr(1)) ? format_1[k].style.color : this.conditionalFormattingModule.colourNameToHex(format_1[k].style.color);
                      }
                      pivotValues[i][j].style = format_1[k].style;
                      pivotValues[i][j].cssClass = "format" + this.element.id + k;
                    }
                  }
                }
              }
            }
          }
        }
        var format = this.dataSourceSettings.conditionalFormatSettings;
        for (var k = 0; k < format.length; k++) {
          var sheet = this.createStyleSheet.bind(this)();
          var str = "color: " + format[k].style.color + "!important;background-color: " + format[k].style.backgroundColor + "!important;font-size: " + format[k].style.fontSize + "!important;font-family: " + format[k].style.fontFamily + " !important;";
          var formatClass = ".format" + this.element.id + k;
          sheet.insertRule(formatClass + ", " + formatClass + " .e-cellvalue{" + str + "}", 0);
        }
      }
    };
    PivotView2.prototype.createStyleSheet = function() {
      var style = document.createElement("style");
      style.appendChild(document.createTextNode(""));
      document.head.appendChild(style);
      return style.sheet;
    };
    PivotView2.prototype.applyHyperlinkSettings = function() {
      if (this.pivotValues) {
        var pivotValues = this.pivotValues;
        var colIndex = [];
        for (var len = pivotValues.length, i = 0; i < len; i++) {
          if (!isNullOrUndefined(pivotValues[i]) && pivotValues[i][0] === void 0) {
            colIndex.push(i);
          }
        }
        if (this.hyperlinkSettings.conditionalSettings.length > 0) {
          for (var i = 0; i < pivotValues.length; i++) {
            for (var j = this.isTabular ? this.engineModule.rowMaxLevel + 1 : 1; pivotValues[i] && j < pivotValues[i].length; j++) {
              if (pivotValues[i][j].axis === "value") {
                pivotValues[i][j].enableHyperlink = false;
                var collection = this.hyperlinkSettings.conditionalSettings;
                for (var k = 0; k < collection.length; k++) {
                  if (this.checkCondition(pivotValues[i][j].value, collection[k].conditions, collection[k].value1, collection[k].value2)) {
                    var ilen = this.dataSourceSettings.valueAxis === "row" ? i : this.dataType === "pivot" ? this.engineModule.headerContent.length - 1 : this.olapEngineModule.headerContent.length - 1;
                    var jlen = this.dataSourceSettings.valueAxis === "row" ? 0 : j;
                    if ((!collection[k].measure || this.dataSourceSettings.values.length === 1 || pivotValues[ilen][jlen].valueSort && pivotValues[ilen][jlen].actualText === collection[k].measure) && (!collection[k].label || pivotValues[colIndex[collection[k].label.split(".").length - 1]] && pivotValues[colIndex[collection[k].label.split(".").length - 1]][j] && pivotValues[colIndex[collection[k].label.split(".").length - 1]][j].valueSort && pivotValues[colIndex[collection[k].label.split(".").length - 1]][j].valueSort[collection[k].label] || pivotValues[i][0].valueSort.levelName.indexOf(collection[k].label) > -1)) {
                      pivotValues[i][j].enableHyperlink = true;
                    }
                  }
                }
              }
            }
          }
        }
        if (!isNullOrUndefined(this.hyperlinkSettings.headerText)) {
          var headerDelimiter = this.dataSourceSettings.valueSortSettings.headerDelimiter ? this.dataSourceSettings.valueSortSettings.headerDelimiter : ".";
          for (var i = 0; i < pivotValues.length; i++) {
            for (var j = this.isTabular ? this.engineModule.rowMaxLevel + 1 : 1; pivotValues[i] && j < pivotValues[i].length; j++) {
              if (pivotValues[i][j].axis === "value") {
                var label = this.hyperlinkSettings.headerText;
                if (pivotValues[i][0].valueSort.levelName.indexOf(label) > -1) {
                  pivotValues[i][0].enableHyperlink = true;
                  pivotValues[i][j].enableHyperlink = true;
                } else {
                  var isApplyHyperLink = false;
                  for (var k = 0; k < colIndex.length; k++) {
                    label = headerDelimiter + this.hyperlinkSettings.headerText;
                    if ((headerDelimiter + pivotValues[colIndex[k]][j].valueSort.levelName).indexOf(label) > -1) {
                      pivotValues[colIndex[k]][j].enableHyperlink = true;
                      isApplyHyperLink = true;
                    }
                  }
                  pivotValues[i][j].enableHyperlink = isApplyHyperLink;
                }
              }
            }
          }
        } else {
          return;
        }
      }
    };
    PivotView2.prototype.checkCondition = function(cellValue, conditions, conditionalValue1, conditionalValue2) {
      switch (conditions) {
        case "LessThan":
          return cellValue < conditionalValue1;
        case "LessThanOrEqualTo":
          return cellValue <= conditionalValue1;
        case "GreaterThan":
          return cellValue > conditionalValue1;
        case "GreaterThanOrEqualTo":
          return cellValue >= conditionalValue1;
        case "Equals":
          return cellValue === conditionalValue1;
        case "NotEquals":
          return cellValue !== conditionalValue1;
        case "Between":
          return conditionalValue1 < conditionalValue2 && cellValue >= conditionalValue1 && cellValue <= conditionalValue2 || conditionalValue1 > conditionalValue2 && cellValue <= conditionalValue1 && cellValue >= conditionalValue2;
        case "NotBetween":
          return !(conditionalValue1 < conditionalValue2 && cellValue >= conditionalValue1 && cellValue <= conditionalValue2 || conditionalValue1 > conditionalValue2 && cellValue <= conditionalValue1 && cellValue >= conditionalValue2);
        default:
          return false;
      }
    };
    PivotView2.prototype.updateGroupingReport = function(newGroupSettings, updateGroupType) {
      if (!this.clonedDataSet && !this.clonedReport) {
        var dataSet = this.engineModule.data;
        this.clonedDataSet = this.dataSourceSettings.type === "CSV" ? PivotUtil.getClonedCSVData(dataSet) : PivotUtil.getClonedData(dataSet);
        var dataSourceSettings = JSON.parse(this.getPersistData()).dataSourceSettings;
        dataSourceSettings.dataSource = [];
        this.clonedReport = this.clonedReport ? this.clonedReport : dataSourceSettings;
      }
      var dateGroup = /_date_group_years|_date_group_quarters|_date_group_quarterYear|_date_group_months|_date_group_days|_date_group_hours|_date_group_minutes|_date_group_seconds/g;
      var data = this.dataSourceSettings.type === "CSV" ? PivotUtil.getClonedCSVData(this.clonedDataSet) : PivotUtil.getClonedData(this.clonedDataSet);
      var dataSource = this.dataSourceSettings;
      var clonedReport = this.clonedReport.properties ? this.clonedReport.properties : this.clonedReport;
      var axisFields = [dataSource.rows, dataSource.columns, dataSource.values, dataSource.filters];
      var fieldSettings = [dataSource.filterSettings, dataSource.sortSettings, dataSource.formatSettings, dataSource.drilledMembers];
      var clonedAxisFields = clonedReport.rows;
      clonedAxisFields = clonedAxisFields.concat(clonedReport.columns, clonedReport.values, clonedReport.filters);
      if (newGroupSettings.length === 0 || newGroupSettings.length > 0) {
        this.engineModule.groupingFields = {};
        this.setProperties({
          dataSourceSettings: {
            dataSource: data,
            groupSettings: newGroupSettings.length > 0 ? dataSource.groupSettings : []
          }
        }, true);
        var isDateGroupUpdated = updateGroupType === "Date";
        var fields = [];
        var newFieldName_1;
        for (var i = 0, cnt = axisFields.length; i < cnt; i++) {
          var _loop_1 = function(j2, len2) {
            var fieldName2 = axisFields[i][j2].name;
            if (fields.indexOf(fieldName2) === -1) {
              fields.push(fieldName2);
            }
            var index = fields.indexOf(fieldName2);
            if (!isNullOrUndefined(fieldName2.match(dateGroup)) && isDateGroupUpdated || fieldName2.indexOf("_custom_group") !== -1 && !PivotUtil.getFieldByName(fieldName2.replace("_custom_group", ""), dataSource.groupSettings)) {
              axisFields[i].splice(j2, 1);
              fields.splice(index, 1);
              j2--;
              len2--;
              fieldName2 = fieldName2.split("_")[0];
              var isSameField = false;
              for (var i_1 = 0; i_1 < axisFields.length; i_1++) {
                isSameField = axisFields[i_1].filter(function(x) {
                  return x.name === fieldName2;
                }).length > 0 ? true : false;
                if (isSameField) {
                  break;
                }
              }
              if (!isSameField) {
                newFieldName_1 = fieldName2.split("_")[0];
                var fieldObj = PivotUtil.getFieldByName(newFieldName_1, clonedAxisFields);
                clonedAxisFields = clonedAxisFields.filter(function(x) {
                  return x.name !== newFieldName_1;
                });
                fields.push(newFieldName_1);
                if (fieldObj) {
                  if (!isSameField) {
                    axisFields[i].splice(++j2, 0, fieldObj);
                  } else {
                    axisFields[i].splice(j2, 1, fieldObj);
                  }
                }
              }
            } else {
              var fieldObj = PivotUtil.getFieldByName(fieldName2, clonedAxisFields);
              if (fieldObj) {
                axisFields[i].splice(j2, 1, fieldObj);
              } else if (newFieldName_1 === fieldName2) {
                axisFields[i].splice(j2, 1);
              }
            }
            out_j_1 = j2;
            out_len_1 = len2;
          };
          var out_j_1, out_len_1;
          for (var j = 0, len = axisFields[i].length; j < len; j++) {
            _loop_1(j, len);
            j = out_j_1;
            len = out_len_1;
          }
        }
        for (var _i = 0, fields_2 = fields; _i < fields_2.length; _i++) {
          var fieldName = fields_2[_i];
          var filterObj = PivotUtil.getFilterItemByName(fieldName, clonedReport.filterSettings);
          var sortObj = PivotUtil.getFieldByName(fieldName, clonedReport.sortSettings);
          var formatObj = PivotUtil.getFieldByName(fieldName, clonedReport.formatSettings);
          var drillObj = PivotUtil.getFieldByName(fieldName, clonedReport.drilledMembers);
          var settingsObj = [filterObj, sortObj, formatObj, drillObj];
          for (var i = 0, cnt = fieldSettings.length; i < cnt; i++) {
            var isExists = false;
            for (var j = 0, len = fieldSettings[i].length; j < len; j++) {
              var name_1 = fieldSettings[i][j].name;
              if (!isNullOrUndefined(name_1.match(dateGroup)) && isDateGroupUpdated || name_1.indexOf("_custom_group") !== -1 && !PivotUtil.getFieldByName(name_1.replace("_custom_group", ""), dataSource.groupSettings)) {
                fieldSettings[i].splice(j, 1);
                j--;
                len--;
              } else if (fieldName === fieldSettings[i][j].name) {
                isExists = true;
                if (settingsObj[i]) {
                  fieldSettings[i].splice(j, 1, settingsObj[i]);
                } else {
                  fieldSettings[i].splice(j, 1);
                  j--;
                  len--;
                }
                break;
              }
            }
            if (!isExists && i === 0 && filterObj) {
              fieldSettings[i].push(filterObj);
            }
            if (!isExists && i === 1 && sortObj) {
              fieldSettings[i].push(sortObj);
            }
            if (!isExists && i === 2 && formatObj) {
              fieldSettings[i].push(formatObj);
            }
            if (!isExists && i === 3 && drillObj) {
              fieldSettings[i].push(drillObj);
            }
          }
        }
      }
    };
    PivotView2.prototype.removeButtonFocus = function() {
      if (document.querySelectorAll(".e-btn-focused")) {
        removeClass(document.querySelectorAll(".e-btn-focused"), "e-btn-focused");
      }
    };
    PivotView2.prototype.wireEvents = function() {
      var enableOptimizedRendering = this.virtualScrollSettings && this.virtualScrollSettings.allowSinglePage && this.dataType === "pivot";
      if (this.displayOption.view !== "Chart") {
        EventHandler.add(this.element, this.isAdaptive ? "touchend" : "click", this.mouseClickHandler, this);
        EventHandler.add(this.element, "mousedown", this.mouseDownHandler, this);
        EventHandler.add(this.element.querySelector("." + GRID_HEADER), "mousemove", this.mouseMoveHandler, this);
        EventHandler.add(this.element, "mouseup", this.mouseUpHandler, this);
        EventHandler.add(this.element, this.isAdaptive ? "touchend" : "contextmenu", this.mouseRclickHandler, this);
        if (this.virtualscrollModule && this.enableVirtualization && !enableOptimizedRendering) {
          EventHandler.add(this.element.querySelector("." + GRID_CONTENT).querySelector("." + CONTENT_CLASS), "scroll", this.headerScrollUpdate, this);
        }
      }
      EventHandler.add(document, this.isAdaptive ? "touchend" : "click", this.removeButtonFocus, this);
      window.addEventListener("resize", this.onWindowResize.bind(this), true);
    };
    PivotView2.prototype.headerScrollUpdate = function() {
      if (this.element.querySelector("." + MOVABLEHEADER_DIV).scrollLeft !== this.element.querySelector("." + GRID_CONTENT).querySelector("." + CONTENT_CLASS).scrollLeft) {
        this.virtualscrollModule.direction = "horizondal";
      }
      this.element.querySelector("." + MOVABLEHEADER_DIV).scrollLeft = this.element.querySelector("." + GRID_CONTENT).querySelector("." + CONTENT_CLASS).scrollLeft;
    };
    PivotView2.prototype.unwireEvents = function() {
      if (this.displayOption.view !== "Chart") {
        EventHandler.remove(this.element, this.isAdaptive ? "touchend" : "click", this.mouseClickHandler);
        EventHandler.remove(this.element, "mousedown", this.mouseDownHandler);
        if (this.element.querySelector("." + GRID_HEADER)) {
          EventHandler.remove(this.element.querySelector("." + GRID_HEADER), "mousemove", this.mouseMoveHandler);
        }
        EventHandler.remove(this.element, "mouseup", this.mouseUpHandler);
        EventHandler.remove(this.element, this.isAdaptive ? "touchend" : "contextmenu", this.mouseRclickHandler);
        if (this.virtualscrollModule && this.enableVirtualization && this.element.querySelector("." + GRID_CONTENT)) {
          EventHandler.remove(this.element.querySelector("." + GRID_CONTENT).querySelector("." + CONTENT_CLASS), "scroll", this.headerScrollUpdate);
        }
      }
      EventHandler.remove(document, this.isAdaptive ? "touchend" : "click", this.removeButtonFocus);
      window.removeEventListener("resize", this.onWindowResize.bind(this), true);
    };
    PivotView2.prototype.actionBeginMethod = function() {
      var eventArgs = {
        dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings),
        actionName: this.actionObj.actionName,
        fieldInfo: this.actionObj.fieldInfo,
        cancel: false
      };
      this.trigger(actionBegin, eventArgs);
      return eventArgs.cancel;
    };
    PivotView2.prototype.actionCompleteMethod = function() {
      var eventArgs = {
        dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings),
        actionName: this.actionObj.actionName,
        fieldInfo: this.actionObj.fieldInfo,
        actionInfo: this.actionObj.actionInfo
      };
      this.trigger(actionComplete, eventArgs);
      this.actionObj.actionName = "";
      this.actionObj.actionInfo = void 0;
      this.actionObj.fieldInfo = void 0;
    };
    PivotView2.prototype.actionFailureMethod = function(error) {
      var eventArgs = {
        actionName: this.actionObj.actionName,
        errorInfo: error
      };
      this.trigger(actionFailure, eventArgs);
    };
    PivotView2.prototype.getActionCompleteName = function() {
      var actionName;
      switch (this.actionObj.actionName) {
        case openConditionalFormatting:
          actionName = conditionallyFormatted;
          break;
        case conditionalFormattingMenu:
          actionName = conditionallyFormatted;
          break;
        case openNumberFormatting:
          actionName = numberFormatted;
          break;
        case numberFormattingMenu:
          actionName = numberFormatted;
          break;
        case tableView:
          actionName = tableViewed;
          break;
        case chartView:
          actionName = chartViewed;
          break;
        case hideSubTotals:
          actionName = subTotalsHidden;
          break;
        case subTotalsRow:
          actionName = subTotalsRowShown;
          break;
        case subTotalsColumn:
          actionName = subTotalsColumnShown;
          break;
        case showSubTotals:
          actionName = subTotalsShown;
          break;
        case hideGrandTotals:
          actionName = grandTotalsHidden;
          break;
        case grandTotalsRow:
          actionName = grandTotalsRowShown;
          break;
        case grandTotalsColumn:
          actionName = grandTotalsColumnShown;
          break;
        case showGrandTotals:
          actionName = grandTotalsShown;
          break;
        case sortValue:
          actionName = valueSorted;
          break;
        case openCalculatedField:
          actionName = calculatedFieldApplied;
          break;
        case editCalculatedField:
          actionName = calculatedFieldEdited;
          break;
        case sortField:
          actionName = fieldSorted;
          break;
        case filterField:
          actionName = fieldFiltered;
          break;
        case removeField:
          actionName = fieldRemoved;
          break;
        case aggregateField:
          actionName = fieldAggregated;
          break;
        case editRecord:
          actionName = recordEdited;
          break;
        case reportChange:
          actionName = reportChanged;
          break;
        case saveEditedRecords:
          actionName = editedRecordsSaved;
          break;
        case addNewRecord:
          actionName = newRecordAdded;
          break;
        case removeRecord:
          actionName = recordRemoved;
          break;
        case pngExport:
          actionName = pngExported;
          break;
        case jpegExport:
          actionName = jpegExported;
          break;
        case svgExport:
          actionName = svgExported;
          break;
        case pdfExport:
          actionName = pdfExported;
          break;
        case csvExport:
          actionName = csvExported;
          break;
        case excelExport:
          actionName = excelExported;
          break;
        case windowResize:
          actionName = windowResized;
          break;
        case saveCurrentReport:
          actionName = reportSaved;
          break;
        case addNewReport:
          actionName = newReportAdded;
          break;
        case saveAsCurrentReport:
          actionName = reportReSaved;
          break;
        case renameCurrentReport:
          actionName = reportRenamed;
          break;
        case horizontalScroll:
          actionName = horizontalScrolled;
          break;
        case verticalScroll:
          actionName = verticalScrolled;
          break;
        case rowPageNavigation:
          actionName = rowPageNavigated;
          break;
        case columnPageNavigation:
          actionName = columnPageNavigated;
          break;
        default:
          actionName = this.actionObj.actionName;
      }
      return actionName;
    };
    PivotView2.prototype.getStackedColumns = function(gridcolumns, stackedColumns) {
      for (var _i = 0, gridcolumns_4 = gridcolumns; _i < gridcolumns_4.length; _i++) {
        var column = gridcolumns_4[_i];
        stackedColumns.push(column);
        if (column.columns && column.columns.length > 0) {
          this.getStackedColumns(column.columns, stackedColumns);
        }
      }
      return stackedColumns;
    };
    PivotView2.prototype.destroy = function() {
      this.removeInternalEvents();
      if (this.engineModule) {
        this.engineModule.fieldList = {};
        this.engineModule.rMembers = null;
        this.engineModule.cMembers = null;
        this.engineModule.valueMatrix = [];
        this.engineModule = {};
      }
      if (this.olapEngineModule) {
        this.olapEngineModule.fieldList = {};
        this.olapEngineModule = {};
      }
      if (this.showGroupingBar && this.groupingBarModule) {
        this.groupingBarModule.destroy();
      }
      if (this.allowGrouping && this.groupingModule) {
        this.groupingModule.destroy();
      }
      if (this.showToolbar && this.toolbarModule) {
        this.toolbarModule.destroy();
      }
      if (this.enablePaging && this.pagerModule) {
        this.pagerModule.destroy();
      }
      if (this.enableVirtualization && this.virtualscrollModule) {
        this.virtualscrollModule.destroy();
      }
      if (this.allowConditionalFormatting && this.conditionalFormattingModule) {
        this.conditionalFormattingModule.destroy();
      }
      if (this.allowNumberFormatting && this.numberFormattingModule) {
        this.numberFormattingModule.destroy();
      }
      if (this.contextMenuModule) {
        this.contextMenuModule.destroy();
      }
      if (this.keyboardModule) {
        this.keyboardModule.destroy();
      }
      if (this.tooltip && !this.tooltip.isDestroyed) {
        this.tooltip.destroy();
      }
      if (this.calculatedFieldModule) {
        this.calculatedFieldModule.destroy();
      }
      if (this.chart && !this.chart.isDestroyed) {
        this.chart.destroy();
        if (this.chart.isDestroyed && select("#" + this.element.id + "_chart", this.element)) {
          remove(select("#" + this.element.id + "_chart", this.element));
        }
      }
      if (this.grid && !this.grid.isDestroyed) {
        this.grid.destroy();
        if (this.grid.isDestroyed && select("#" + this.element.id + "_grid", this.element)) {
          remove(select("#" + this.element.id + "_grid", this.element));
        }
      }
      if (this.commonModule) {
        this.commonModule.destroy();
      }
      if (this.pivotChartModule) {
        this.pivotChartModule.destroy();
      }
      if (this.pivotButtonModule && !this.pivotButtonModule.isDestroyed) {
        this.pivotButtonModule.destroy();
      }
      if (this.pivotFieldListModule && !this.pivotFieldListModule.isDestroyed) {
        this.pivotFieldListModule.destroy();
        if (this.pivotFieldListModule.isDestroyed && select("#" + this.element.id + "_PivotFieldList", this.element) !== null) {
          remove(select("#" + this.element.id + "_PivotFieldList", this.element));
        }
      }
      if ((this.allowDrillThrough || this.editSettings && this.editSettings.allowEditing) && this.drillThroughModule) {
        this.drillThroughModule.destroy();
      }
      if (this.chartExportModule) {
        this.chartExportModule.destroy();
      }
      this.unwireEvents();
      _super.prototype.destroy.call(this);
      if (this.groupingBarModule) {
        this.groupingBarModule = null;
      }
      if (this.groupingModule) {
        this.groupingModule = null;
      }
      if (this.pivotFieldListModule) {
        this.pivotFieldListModule = null;
      }
      if (this.calculatedFieldModule) {
        this.calculatedFieldModule = null;
      }
      if (this.conditionalFormattingModule) {
        this.conditionalFormattingModule = null;
      }
      if (this.numberFormattingModule) {
        this.numberFormattingModule = null;
      }
      if (this.toolbarModule) {
        this.toolbarModule = null;
      }
      if (this.pagerModule) {
        this.pagerModule = null;
      }
      if (this.virtualscrollModule) {
        this.virtualscrollModule = null;
      }
      if (this.contextMenuModule) {
        this.contextMenuModule = null;
      }
      if (this.keyboardModule) {
        this.keyboardModule = null;
      }
      if (this.tooltip) {
        this.tooltip = null;
      }
      if (this.chart) {
        this.chart = null;
      }
      if (this.grid) {
        this.grid = null;
      }
      if (this.commonModule) {
        this.commonModule = null;
      }
      if (this.pivotChartModule) {
        this.pivotChartModule = null;
      }
      if (this.pivotButtonModule) {
        this.pivotButtonModule = null;
      }
      if (this.renderModule) {
        this.renderModule = null;
      }
      if (this.axisFieldModule) {
        this.axisFieldModule = null;
      }
      if (this.pdfExportModule) {
        this.pdfExportModule = null;
      }
      if (this.excelExportModule) {
        this.excelExportModule = null;
      }
      if (this.drillThroughModule) {
        this.drillThroughModule = null;
      }
      if (this.clonedDataSet) {
        this.clonedDataSet = null;
      }
      if (this.clonedReport) {
        this.clonedReport = null;
      }
      if (this.pagerModule) {
        this.pagerModule = null;
      }
      if (this.chartExportModule) {
        this.chartExportModule = null;
      }
      if (this.exportSpecifiedPages) {
        this.exportSpecifiedPages = void 0;
      }
      this.element.innerHTML = "";
      removeClass([this.element], ROOT);
      removeClass([this.element], RTL);
      removeClass([this.element], DEVICE);
      this.globalize = null;
      this.localeObj = null;
      this.currentView = null;
      this.fieldListSpinnerElement = null;
      this.lastSortInfo = null;
      this.lastFilterInfo = null;
      this.lastAggregationInfo = null;
      this.lastCalcFieldInfo = null;
      this.lastCellClicked = null;
      this.lastColumn = null;
      this.pivotCommon = null;
    };
    PivotView2.prototype.showNumberFormattingDialog = function() {
      if (this.allowNumberFormatting) {
        this.numberFormattingModule.showNumberFormattingDialog();
      }
    };
    PivotView2.prototype.getValuesHeader = function(pivotCell, type) {
      var values = this.dataSourceSettings.values;
      if (type === "value" && !isNullOrUndefined(pivotCell.valueSort) && this.localeObj.getConstant("grandTotal") + this.dataSourceSettings.valueSortSettings.headerDelimiter + pivotCell.formattedText === pivotCell.valueSort.levelName && (pivotCell.axis === "column" && this.dataSourceSettings.columns.length === 0 && this.dataSourceSettings.valueAxis === "column" || pivotCell.axis === "row" && this.dataSourceSettings.rows.length === 0 && this.dataSourceSettings.valueAxis === "row")) {
        return this.localeObj.getConstant("total") + " " + this.localeObj.getConstant(this.engineModule.fieldList[pivotCell.actualText].aggregateType) + " " + this.localeObj.getConstant("of") + " " + pivotCell.formattedText;
      } else if (type === "grandTotal" && values.length === 1 && this.dataSourceSettings.valueAxis === "row" && pivotCell.formattedText === this.localeObj.getConstant("grandTotal")) {
        return this.localeObj.getConstant("total") + " " + this.localeObj.getConstant(values[values.length - 1].type) + " " + this.localeObj.getConstant("of") + " " + (!isNullOrUndefined(values[values.length - 1].caption) ? values[values.length - 1].caption : values[values.length - 1].name);
      }
      return pivotCell.formattedText;
    };
    PivotView2.prototype.setColumnWidth = function(column, width) {
      if (!column.autoFit) {
        if (column.width !== "auto") {
          column.width = this.renderModule.lastColumn && column.field === this.renderModule.lastColumn.field ? width - 3 : width;
        } else {
          column.minWidth = width;
        }
      }
    };
    __decorate5([Property("USD")], PivotView2.prototype, "currencyCode", void 0);
    __decorate5([Property(false)], PivotView2.prototype, "showFieldList", void 0);
    __decorate5([Complex({}, GridSettings)], PivotView2.prototype, "gridSettings", void 0);
    __decorate5([Complex({}, ChartSettings)], PivotView2.prototype, "chartSettings", void 0);
    __decorate5([Complex({}, GroupingBarSettings)], PivotView2.prototype, "groupingBarSettings", void 0);
    __decorate5([Complex({}, HyperlinkSettings)], PivotView2.prototype, "hyperlinkSettings", void 0);
    __decorate5([Complex({}, PageSettings)], PivotView2.prototype, "pageSettings", void 0);
    __decorate5([Complex({}, PagerSettings)], PivotView2.prototype, "pagerSettings", void 0);
    __decorate5([Complex({}, DataSourceSettings)], PivotView2.prototype, "dataSourceSettings", void 0);
    __decorate5([Complex({}, CellEditSettings)], PivotView2.prototype, "editSettings", void 0);
    __decorate5([Complex({}, DisplayOption)], PivotView2.prototype, "displayOption", void 0);
    __decorate5([Complex({}, VirtualScrollSettings)], PivotView2.prototype, "virtualScrollSettings", void 0);
    __decorate5([Property()], PivotView2.prototype, "pivotValues", void 0);
    __decorate5([Property(false)], PivotView2.prototype, "showGroupingBar", void 0);
    __decorate5([Property(true)], PivotView2.prototype, "showTooltip", void 0);
    __decorate5([Property(false)], PivotView2.prototype, "showToolbar", void 0);
    __decorate5([Property([])], PivotView2.prototype, "toolbar", void 0);
    __decorate5([Property(false)], PivotView2.prototype, "showValuesButton", void 0);
    __decorate5([Property(false)], PivotView2.prototype, "allowCalculatedField", void 0);
    __decorate5([Property(false)], PivotView2.prototype, "enableFieldSearching", void 0);
    __decorate5([Property(false)], PivotView2.prototype, "enableValueSorting", void 0);
    __decorate5([Property(false)], PivotView2.prototype, "allowConditionalFormatting", void 0);
    __decorate5([Property(false)], PivotView2.prototype, "allowNumberFormatting", void 0);
    __decorate5([Property("auto")], PivotView2.prototype, "height", void 0);
    __decorate5([Property("auto")], PivotView2.prototype, "width", void 0);
    __decorate5([Property(false)], PivotView2.prototype, "allowExcelExport", void 0);
    __decorate5([Property(false)], PivotView2.prototype, "enableVirtualization", void 0);
    __decorate5([Property(false)], PivotView2.prototype, "enablePaging", void 0);
    __decorate5([Property(false)], PivotView2.prototype, "allowDrillThrough", void 0);
    __decorate5([Property(false)], PivotView2.prototype, "allowPdfExport", void 0);
    __decorate5([Property(false)], PivotView2.prototype, "allowDeferLayoutUpdate", void 0);
    __decorate5([Property(false)], PivotView2.prototype, "allowDataCompression", void 0);
    __decorate5([Property(1e3)], PivotView2.prototype, "maxNodeLimitInMemberEditor", void 0);
    __decorate5([Property(1e4)], PivotView2.prototype, "maxRowsInDrillThrough", void 0);
    __decorate5([Property(true)], PivotView2.prototype, "loadOnDemandInMemberEditor", void 0);
    __decorate5([Property(false)], PivotView2.prototype, "enableHtmlSanitizer", void 0);
    __decorate5([Property()], PivotView2.prototype, "cellTemplate", void 0);
    __decorate5([Property()], PivotView2.prototype, "toolbarTemplate", void 0);
    __decorate5([Property()], PivotView2.prototype, "tooltipTemplate", void 0);
    __decorate5([Property()], PivotView2.prototype, "spinnerTemplate", void 0);
    __decorate5([Property(false)], PivotView2.prototype, "allowGrouping", void 0);
    __decorate5([Property(true)], PivotView2.prototype, "exportAllPages", void 0);
    __decorate5([Property(["Sum", "Count", "DistinctCount", "Product", "Min", "Max", "Avg", "Median", "Index", "PopulationVar", "SampleVar", "PopulationStDev", "SampleStDev", "RunningTotals", "PercentageOfGrandTotal", "PercentageOfColumnTotal", "PercentageOfRowTotal", "PercentageOfParentColumnTotal", "PercentageOfParentRowTotal", "DifferenceFrom", "PercentageOfDifferenceFrom", "PercentageOfParentTotal"])], PivotView2.prototype, "aggregateTypes", void 0);
    __decorate5([Property(["Column", "Bar", "Line", "Area", "Scatter", "Polar", "StackingColumn", "StackingArea", "StackingBar", "StackingLine", "StepLine", "StepArea", "SplineArea", "Spline", "StackingColumn100", "StackingBar100", "StackingArea100", "StackingLine100", "Bubble", "Pareto", "Radar", "Pie", "Doughnut", "Funnel", "Pyramid"])], PivotView2.prototype, "chartTypes", void 0);
    __decorate5([Property("")], PivotView2.prototype, "cssClass", void 0);
    __decorate5([Event()], PivotView2.prototype, "queryCellInfo", void 0);
    __decorate5([Event()], PivotView2.prototype, "headerCellInfo", void 0);
    __decorate5([Event()], PivotView2.prototype, "resizing", void 0);
    __decorate5([Event()], PivotView2.prototype, "resizeStop", void 0);
    __decorate5([Event()], PivotView2.prototype, "pdfHeaderQueryCellInfo", void 0);
    __decorate5([Event()], PivotView2.prototype, "pdfQueryCellInfo", void 0);
    __decorate5([Event()], PivotView2.prototype, "excelHeaderQueryCellInfo", void 0);
    __decorate5([Event()], PivotView2.prototype, "excelQueryCellInfo", void 0);
    __decorate5([Event()], PivotView2.prototype, "columnDragStart", void 0);
    __decorate5([Event()], PivotView2.prototype, "columnDrag", void 0);
    __decorate5([Event()], PivotView2.prototype, "columnDrop", void 0);
    __decorate5([Event()], PivotView2.prototype, "beforePdfExport", void 0);
    __decorate5([Event()], PivotView2.prototype, "beforeExcelExport", void 0);
    __decorate5([Event()], PivotView2.prototype, "beforeColumnsRender", void 0);
    __decorate5([Event()], PivotView2.prototype, "selected", void 0);
    __decorate5([Event()], PivotView2.prototype, "selecting", void 0);
    __decorate5([Event()], PivotView2.prototype, "cellDeselected", void 0);
    __decorate5([Event()], PivotView2.prototype, "rowSelected", void 0);
    __decorate5([Event()], PivotView2.prototype, "rowDeselected", void 0);
    __decorate5([Event()], PivotView2.prototype, "chartTooltipRender", void 0);
    __decorate5([Event()], PivotView2.prototype, "chartLegendClick", void 0);
    __decorate5([Event()], PivotView2.prototype, "beforePrint", void 0);
    __decorate5([Event()], PivotView2.prototype, "animationComplete", void 0);
    __decorate5([Event()], PivotView2.prototype, "legendRender", void 0);
    __decorate5([Event()], PivotView2.prototype, "textRender", void 0);
    __decorate5([Event()], PivotView2.prototype, "pointRender", void 0);
    __decorate5([Event()], PivotView2.prototype, "seriesRender", void 0);
    __decorate5([Event()], PivotView2.prototype, "chartMouseMove", void 0);
    __decorate5([Event()], PivotView2.prototype, "chartMouseClick", void 0);
    __decorate5([Event()], PivotView2.prototype, "pointMove", void 0);
    __decorate5([Event()], PivotView2.prototype, "chartMouseLeave", void 0);
    __decorate5([Event()], PivotView2.prototype, "chartMouseDown", void 0);
    __decorate5([Event()], PivotView2.prototype, "chartMouseUp", void 0);
    __decorate5([Event()], PivotView2.prototype, "dragComplete", void 0);
    __decorate5([Event()], PivotView2.prototype, "zoomComplete", void 0);
    __decorate5([Event()], PivotView2.prototype, "scrollStart", void 0);
    __decorate5([Event()], PivotView2.prototype, "scrollEnd", void 0);
    __decorate5([Event()], PivotView2.prototype, "scrollChanged", void 0);
    __decorate5([Event()], PivotView2.prototype, "multiLevelLabelRender", void 0);
    __decorate5([Event()], PivotView2.prototype, "chartLoaded", void 0);
    __decorate5([Event()], PivotView2.prototype, "chartLoad", void 0);
    __decorate5([Event()], PivotView2.prototype, "chartResized", void 0);
    __decorate5([Event()], PivotView2.prototype, "chartAxisLabelRender", void 0);
    __decorate5([Event()], PivotView2.prototype, "multiLevelLabelClick", void 0);
    __decorate5([Event()], PivotView2.prototype, "chartPointClick", void 0);
    __decorate5([Event()], PivotView2.prototype, "contextMenuClick", void 0);
    __decorate5([Event()], PivotView2.prototype, "contextMenuOpen", void 0);
    __decorate5([Event()], PivotView2.prototype, "onPdfCellRender", void 0);
    __decorate5([Event()], PivotView2.prototype, "saveReport", void 0);
    __decorate5([Event()], PivotView2.prototype, "fetchReport", void 0);
    __decorate5([Event()], PivotView2.prototype, "loadReport", void 0);
    __decorate5([Event()], PivotView2.prototype, "renameReport", void 0);
    __decorate5([Event()], PivotView2.prototype, "removeReport", void 0);
    __decorate5([Event()], PivotView2.prototype, "newReport", void 0);
    __decorate5([Event()], PivotView2.prototype, "toolbarRender", void 0);
    __decorate5([Event()], PivotView2.prototype, "toolbarClick", void 0);
    __decorate5([Event()], PivotView2.prototype, "load", void 0);
    __decorate5([Event()], PivotView2.prototype, "enginePopulating", void 0);
    __decorate5([Event()], PivotView2.prototype, "enginePopulated", void 0);
    __decorate5([Event()], PivotView2.prototype, "onFieldDropped", void 0);
    __decorate5([Event()], PivotView2.prototype, "fieldDrop", void 0);
    __decorate5([Event()], PivotView2.prototype, "fieldDragStart", void 0);
    __decorate5([Event()], PivotView2.prototype, "dataBound", void 0);
    __decorate5([Event()], PivotView2.prototype, "created", void 0);
    __decorate5([Event()], PivotView2.prototype, "destroyed", void 0);
    __decorate5([Event()], PivotView2.prototype, "beforeExport", void 0);
    __decorate5([Event()], PivotView2.prototype, "exportComplete", void 0);
    __decorate5([Event()], PivotView2.prototype, "conditionalFormatting", void 0);
    __decorate5([Event()], PivotView2.prototype, "memberFiltering", void 0);
    __decorate5([Event()], PivotView2.prototype, "cellClick", void 0);
    __decorate5([Event()], PivotView2.prototype, "drillThrough", void 0);
    __decorate5([Event()], PivotView2.prototype, "editCompleted", void 0);
    __decorate5([Event()], PivotView2.prototype, "beginDrillThrough", void 0);
    __decorate5([Event()], PivotView2.prototype, "hyperlinkCellClick", void 0);
    __decorate5([Event()], PivotView2.prototype, "cellSelecting", void 0);
    __decorate5([Event()], PivotView2.prototype, "drill", void 0);
    __decorate5([Event()], PivotView2.prototype, "cellSelected", void 0);
    __decorate5([Event()], PivotView2.prototype, "chartSeriesCreated", void 0);
    __decorate5([Event()], PivotView2.prototype, "aggregateCellInfo", void 0);
    __decorate5([Event()], PivotView2.prototype, "fieldListRefreshed", void 0);
    __decorate5([Event()], PivotView2.prototype, "memberEditorOpen", void 0);
    __decorate5([Event()], PivotView2.prototype, "calculatedFieldCreate", void 0);
    __decorate5([Event()], PivotView2.prototype, "numberFormatting", void 0);
    __decorate5([Event()], PivotView2.prototype, "aggregateMenuOpen", void 0);
    __decorate5([Event()], PivotView2.prototype, "fieldRemove", void 0);
    __decorate5([Event()], PivotView2.prototype, "beforeServiceInvoke", void 0);
    __decorate5([Event()], PivotView2.prototype, "afterServiceInvoke", void 0);
    __decorate5([Event()], PivotView2.prototype, "actionBegin", void 0);
    __decorate5([Event()], PivotView2.prototype, "actionComplete", void 0);
    __decorate5([Event()], PivotView2.prototype, "actionFailure", void 0);
    __decorate5([Event()], PivotView2.prototype, "onHeadersSort", void 0);
    PivotView2 = __decorate5([NotifyPropertyChanges], PivotView2);
    return PivotView2;
  }(Component2)
);

// node_modules/@syncfusion/ej2-pivotview/src/base/export-util.js
var PivotExportUtil = (
  /** @class */
  function() {
    function PivotExportUtil2() {
    }
    PivotExportUtil2.getClonedPivotValues = function(pivotValues) {
      var clonedSets = [];
      for (var i = 0; i < pivotValues.length; i++) {
        if (pivotValues[i]) {
          clonedSets[i] = [];
          for (var j = 0; j < pivotValues[i].length; j++) {
            if (pivotValues[i][j]) {
              clonedSets[i][j] = this.getClonedPivotValueObj(pivotValues[i][j]);
            }
          }
        }
      }
      return clonedSets;
    };
    PivotExportUtil2.getClonedPivotValueObj = function(data) {
      var keyPos = 0;
      var framedSet = {};
      if (!(data === null || data === void 0)) {
        var fields = Object.keys(data);
        while (keyPos < fields.length) {
          framedSet[fields[keyPos]] = data[fields[keyPos]];
          keyPos++;
        }
      } else {
        framedSet = data;
      }
      return framedSet;
    };
    PivotExportUtil2.isContainCommonElements = function(collection1, collection2) {
      for (var i = 0, cnt = collection1.length; i < cnt; i++) {
        for (var j = 0, lnt = collection2.length; j < lnt; j++) {
          if (collection2[j] === collection1[i]) {
            return true;
          }
        }
      }
      return false;
    };
    return PivotExportUtil2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/pivotview/actions/excel-export.js
var ExcelExport2 = (
  /** @class */
  function() {
    function ExcelExport3(parent) {
      this.actualrCnt = 0;
      this.parent = parent;
    }
    ExcelExport3.prototype.getModuleName = function() {
      return "excelExport";
    };
    ExcelExport3.prototype.addHeaderAndFooter = function(excelExportProperties, stringValue, type, rowCount) {
      var cells = [];
      if (!isNullOrUndefined(excelExportProperties.rows)) {
        this.actualrCnt = type === "footer" ? this.actualrCnt + rowCount - excelExportProperties.rows[0].cells.length : this.actualrCnt;
        var row = excelExportProperties.rows;
        for (var i = 0; i < row.length; i++) {
          var spanCount = 0;
          cells = [];
          var currentRow = row[i];
          for (var j = 0; j < currentRow.cells.length; j++) {
            cells.push({
              index: spanCount + 1,
              value: currentRow.cells[j].value,
              colSpan: currentRow.cells[j].colSpan,
              rowSpan: currentRow.cells[j].rowSpan,
              style: currentRow.cells[j].style
            });
            spanCount = spanCount + cells[j].colSpan;
          }
          this.actualrCnt++;
          this.rows.push({
            index: this.actualrCnt,
            cells
          });
        }
        this.actualrCnt = type === "header" ? rowCount : this.actualrCnt;
      } else {
        if (stringValue !== "") {
          if (type === "footer") {
            this.actualrCnt++;
          }
          cells.push({
            index: 1,
            value: stringValue
          });
          this.rows.push({
            index: this.actualrCnt + 1,
            cells
          });
          this.actualrCnt = type === "header" ? this.actualrCnt + 2 : this.actualrCnt;
        }
      }
    };
    ExcelExport3.prototype.exportToExcel = function(type, exportProperties, isBlob) {
      this.rows = [];
      this.actualrCnt = 0;
      var isHeaderSet = !isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.header);
      var isFooterSet = !isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.footer);
      var isFileNameSet = !isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.fileName);
      this.engine = this.parent.dataType === "olap" ? this.parent.olapEngineModule : this.parent.engineModule;
      var clonedValues;
      var currentPivotValues = PivotExportUtil.getClonedPivotValues(this.engine.pivotValues);
      var customFileName = isFileNameSet ? exportProperties.fileName : type === "CSV" ? "default.csv" : "default.xlsx";
      if (this.parent.exportAllPages && (this.parent.enableVirtualization || this.parent.enablePaging)) {
        var pageSettings = this.engine.pageSettings;
        var mdxQuery = void 0;
        this.engine.isPagingOrVirtualizationEnabled = false;
        if (this.parent.dataType === "olap") {
          this.updateOlapPageSettings(true);
          mdxQuery = this.parent.olapEngineModule.mdxQuery.slice(0);
        } else {
          this.engine.pageSettings = null;
        }
        this.engine.generateGridData(this.parent.dataSourceSettings, true, true);
        this.parent.applyFormatting(this.engine.pivotValues);
        clonedValues = PivotExportUtil.getClonedPivotValues(this.engine.pivotValues);
        this.engine.pivotValues = currentPivotValues;
        this.engine.pageSettings = pageSettings;
        this.engine.isPagingOrVirtualizationEnabled = true;
        if (this.parent.dataType === "olap") {
          this.updateOlapPageSettings(false);
          this.parent.olapEngineModule.mdxQuery = mdxQuery;
        }
      } else {
        clonedValues = currentPivotValues;
      }
      var args = {
        fileName: customFileName,
        header: "",
        footer: "",
        dataCollections: [clonedValues],
        excelExportProperties: exportProperties
      };
      var fileName;
      var header;
      var footer;
      var dataCollections;
      this.parent.trigger(beforeExport, args, function(observedArgs) {
        fileName = observedArgs.fileName;
        header = observedArgs.header;
        footer = observedArgs.footer;
        dataCollections = observedArgs.dataCollections;
      });
      if (!isHeaderSet && isNullOrUndefined(args.excelExportProperties) && header !== "") {
        this.addHeaderAndFooter({}, header, "header", void 0);
      } else if (!isNullOrUndefined(args.excelExportProperties) && !isNullOrUndefined(args.excelExportProperties.header)) {
        this.addHeaderAndFooter(args.excelExportProperties.header, "", "header", args.excelExportProperties.header.headerRows);
      }
      var workSheets = [];
      for (var dataColl = 0; dataColl < dataCollections.length; dataColl++) {
        var pivotValues = dataCollections[dataColl];
        var colLen = 0;
        var rowLen = pivotValues.length;
        var formatList = this.parent.renderModule.getFormatList();
        var maxLevel = 0;
        for (var rCnt = 0; rCnt < rowLen; rCnt++) {
          if (pivotValues[rCnt]) {
            this.actualrCnt++;
            colLen = pivotValues[rCnt].length;
            var cells = [];
            for (var cCnt = 0; cCnt < colLen; cCnt++) {
              if (pivotValues[rCnt][cCnt]) {
                var pivotCell = pivotValues[rCnt][cCnt];
                var field = this.parent.dataSourceSettings.valueAxis === "row" && this.parent.dataType === "olap" && pivotCell.rowOrdinal && this.engine.tupRowInfo[pivotCell.rowOrdinal] ? this.engine.tupRowInfo[pivotCell.rowOrdinal].measureName : pivotCell.actualText;
                var styles = pivotCell.axis === "row" ? {
                  hAlign: "Left",
                  bold: true,
                  wrapText: true
                } : {
                  numberFormat: formatList[field],
                  bold: false,
                  wrapText: true
                };
                var headerStyle = {
                  bold: true,
                  vAlign: "Center",
                  wrapText: true,
                  indent: cCnt === 0 ? pivotCell.level * 10 : 0
                };
                if (!(pivotCell.level === -1 && !pivotCell.rowSpan)) {
                  var aggMatrix = this.engine.aggregatedValueMatrix;
                  var cellValue = pivotCell.axis === "value" ? aggMatrix[rCnt] && aggMatrix[rCnt][cCnt] ? aggMatrix[rCnt][cCnt] : pivotCell.formattedText === "#DIV/0!" ? pivotCell.formattedText : pivotCell.value : pivotCell.formattedText;
                  var isgetValuesHeader = this.parent.dataSourceSettings.rows.length === 0 && this.parent.dataSourceSettings.valueAxis === "row" || this.parent.dataSourceSettings.columns.length === 0 && this.parent.dataSourceSettings.valueAxis === "column";
                  if (pivotCell.type === "grand sum" && !(this.parent.dataSourceSettings.values.length === 1 && this.parent.dataSourceSettings.valueAxis === "row" && pivotCell.axis === "column")) {
                    cellValue = isgetValuesHeader ? this.parent.getValuesHeader(pivotCell, "grandTotal") : this.parent.localeObj.getConstant("grandTotal");
                  } else if (pivotCell.type === "sum") {
                    cellValue = cellValue.toString().replace("Total", this.parent.localeObj.getConstant("total"));
                  } else {
                    cellValue = !isNullOrUndefined(pivotCell.valueSort) && this.parent.localeObj.getConstant("grandTotal") + this.parent.dataSourceSettings.valueSortSettings.headerDelimiter + pivotCell.formattedText === pivotCell.valueSort.levelName && isgetValuesHeader ? this.parent.getValuesHeader(pivotCell, "value") : cellValue;
                  }
                  if (!(pivotCell.level === -1 && !pivotCell.rowSpan) && pivotCell.rowSpan !== 0) {
                    cells.push({
                      index: cCnt + 1,
                      value: cellValue,
                      colSpan: pivotCell.colSpan,
                      rowSpan: pivotCell.rowSpan === -1 ? 1 : pivotCell.rowSpan
                    });
                    var lastCell = cells[cells.length - 1];
                    if (pivotCell.axis === "value") {
                      if (isNaN(pivotCell.value) || pivotCell.formattedText === "" || pivotCell.formattedText === void 0 || isNullOrUndefined(pivotCell.value)) {
                        lastCell.value = type === "Excel" ? null : "";
                      }
                      styles.numberFormat = typeof cellValue === "string" ? void 0 : styles.numberFormat;
                      lastCell.style = styles;
                    } else {
                      lastCell.style = headerStyle;
                      if (pivotCell.axis === "row" && cCnt === 0) {
                        lastCell.style = styles;
                        if (this.parent.dataType === "olap") {
                          var indent = this.parent.renderModule.indentCollection[rCnt];
                          lastCell.style.indent = indent * 2;
                          maxLevel = maxLevel > indent ? maxLevel : indent;
                        } else {
                          var levelName = pivotCell.valueSort ? pivotCell.valueSort.levelName.toString() : "";
                          var memberPos = pivotCell.actualText ? pivotCell.actualText.toString().split(this.parent.dataSourceSettings.valueSortSettings.headerDelimiter).length : 0;
                          var levelPosition = levelName.split(this.parent.dataSourceSettings.valueSortSettings.headerDelimiter).length - (memberPos ? memberPos - 1 : memberPos);
                          var level = levelPosition ? levelPosition - 1 : 0;
                          lastCell.style.indent = level * 2;
                          maxLevel = level > maxLevel ? level : maxLevel;
                        }
                      }
                    }
                    if (pivotCell.style || lastCell.style.backColor || lastCell.style.fontColor || lastCell.style.fontName || lastCell.style.fontSize) {
                      lastCell.style.backColor = lastCell.style.backColor ? lastCell.style.backColor : pivotCell.style.backgroundColor;
                      lastCell.style.fontColor = lastCell.style.fontColor ? lastCell.style.fontColor : pivotCell.style.color;
                      lastCell.style.fontName = lastCell.style.fontName ? lastCell.style.fontName : pivotCell.style.fontFamily;
                      if (!isNullOrUndefined(lastCell.style.fontSize) || !isNullOrUndefined(pivotCell.style.fontSize)) {
                        lastCell.style.fontSize = !isNullOrUndefined(lastCell.style.fontSize) ? Number(lastCell.style.fontSize) : Number(pivotCell.style.fontSize.split("px")[0]);
                      }
                    }
                    lastCell.style.borders = {
                      color: "#000000",
                      lineStyle: "thin"
                    };
                    var excelHeaderQueryCellInfoArgs = void 0;
                    var excelQueryCellInfoArgs = void 0;
                    if (pivotCell.axis === "column") {
                      excelHeaderQueryCellInfoArgs = {
                        style: headerStyle,
                        cell: pivotCell
                      };
                      this.parent.trigger(excelHeaderQueryCellInfo, excelHeaderQueryCellInfoArgs);
                    } else {
                      excelQueryCellInfoArgs = {
                        style: styles,
                        cell: pivotCell,
                        column: void 0,
                        data: pivotValues,
                        value: cellValue
                      };
                      this.parent.trigger(excelQueryCellInfo, excelQueryCellInfoArgs);
                    }
                    lastCell.value = pivotCell.axis === "column" ? excelHeaderQueryCellInfoArgs.cell.formattedText : excelQueryCellInfoArgs.value;
                    lastCell.style = pivotCell.axis === "column" ? excelHeaderQueryCellInfoArgs.style : excelQueryCellInfoArgs.style;
                  }
                }
                cCnt = cCnt + (pivotCell.colSpan ? pivotCell.colSpan - 1 : 0);
              } else {
                var pivotCell = {
                  formattedText: ""
                };
                var excelHeaderQueryCellInfoArgs = void 0;
                if (pivotCell) {
                  excelHeaderQueryCellInfoArgs = {
                    style: void 0,
                    cell: pivotCell
                  };
                  this.parent.trigger(excelHeaderQueryCellInfo, excelHeaderQueryCellInfoArgs);
                }
                cells.push({
                  index: cCnt + 1,
                  colSpan: 1,
                  rowSpan: 1,
                  value: pivotCell.formattedText,
                  style: excelHeaderQueryCellInfoArgs.style
                });
              }
            }
            this.rows.push({
              index: this.actualrCnt,
              cells
            });
          }
        }
        if (isFooterSet) {
          this.addHeaderAndFooter(exportProperties.footer, "", "footer", exportProperties.footer.footerRows);
        } else if (!isFooterSet && footer !== "" && isNullOrUndefined(args.excelExportProperties)) {
          this.addHeaderAndFooter({}, footer, "footer", void 0);
        } else if (!isNullOrUndefined(args.excelExportProperties) && !isNullOrUndefined(args.excelExportProperties.footer)) {
          this.addHeaderAndFooter(args.excelExportProperties.footer, "", "footer", args.excelExportProperties.footer.footerRows);
        }
        var columns = [];
        for (var cCnt = 0; cCnt < colLen; cCnt++) {
          columns.push({
            index: cCnt + 1,
            width: 100
          });
        }
        if (maxLevel > 0) {
          columns[0].width = 100 + maxLevel * 20;
        }
        workSheets.push({
          columns,
          rows: this.rows
        });
      }
      var book = new Workbook({
        worksheets: workSheets
      }, type === "Excel" ? "xlsx" : "csv", void 0, this.parent.currencyCode);
      var fileExtension = fileName.split(".").pop();
      var blobData;
      if (!isBlob) {
        book.save(fileExtension === "xlsx" || fileExtension === "csv" ? fileName : fileName + (type === "Excel" ? ".xlsx" : ".csv"));
      } else {
        blobData = book.saveAsBlob(fileExtension === "xlsx" || type === "Excel" ? "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" : "text/csv");
      }
      var exportCompleteEventArgs = {
        type,
        promise: isBlob ? blobData : null
      };
      this.parent.trigger(exportComplete, exportCompleteEventArgs);
    };
    ExcelExport3.prototype.updateOlapPageSettings = function(isUpdate) {
      this.parent.olapEngineModule.isExporting = isUpdate ? true : false;
      if (!this.parent.exportSpecifiedPages) {
        this.parent.olapEngineModule.pageSettings = isUpdate ? null : this.parent.olapEngineModule.pageSettings;
        this.parent.olapEngineModule.isPaging = isUpdate ? false : true;
      } else {
        this.parent.olapEngineModule.exportSpeciedPages = this.parent.exportSpecifiedPages = isUpdate ? this.parent.exportSpecifiedPages : void 0;
      }
    };
    ExcelExport3.prototype.destroy = function() {
      if (this.engine) {
        this.engine = null;
      }
    };
    return ExcelExport3;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/pivotview/actions/pdf-export.js
var PDFExport = (
  /** @class */
  function() {
    function PDFExport2(parent) {
      this.parent = parent;
      this.pdfExportHelper = new PDFExportHelper();
    }
    PDFExport2.prototype.getModuleName = function() {
      return "pdfExport";
    };
    PDFExport2.prototype.addPage = function(eventParams, pdfExportProperties) {
      pdfExportProperties = pdfExportProperties ? pdfExportProperties : this.exportProperties.pdfExportProperties;
      var documentSection = eventParams.document.sections.add();
      var documentHeight = eventParams.document.pageSettings.height;
      var documentWidth = eventParams.document.pageSettings.width;
      if (this.exportProperties.width || this.exportProperties.height) {
        eventParams.document.pageSettings.orientation = this.exportProperties.width > this.exportProperties.height || !this.exportProperties.height && this.exportProperties.width > documentHeight || !this.exportProperties.width && documentWidth > this.exportProperties.height ? PdfPageOrientation.Landscape : PdfPageOrientation.Portrait;
        eventParams.document.pageSettings.size = new SizeF(this.exportProperties.width ? this.exportProperties.width : documentWidth, this.exportProperties.height ? this.exportProperties.height : documentHeight);
      } else {
        eventParams.document.pageSettings.orientation = this.exportProperties.orientation === 0 || this.exportProperties.orientation ? this.exportProperties.orientation : !isNullOrUndefined(pdfExportProperties) && !isNullOrUndefined(pdfExportProperties.pageOrientation) ? pdfExportProperties.pageOrientation === "Landscape" ? PdfPageOrientation.Landscape : PdfPageOrientation.Portrait : PdfPageOrientation.Landscape;
        if (!isNullOrUndefined(pdfExportProperties) && !isNullOrUndefined(pdfExportProperties.pageSize)) {
          eventParams.document.pageSettings.size = PivotUtil.getPageSize(pdfExportProperties.pageSize);
        }
      }
      if (!isNullOrUndefined(this.exportProperties.pdfMargins)) {
        var margins = eventParams.document.pageSettings.margins;
        margins.top = !isNullOrUndefined(this.exportProperties.pdfMargins.top) ? this.exportProperties.pdfMargins.top : margins.top;
        margins.bottom = !isNullOrUndefined(this.exportProperties.pdfMargins.bottom) ? this.exportProperties.pdfMargins.bottom : margins.bottom;
        margins.left = !isNullOrUndefined(this.exportProperties.pdfMargins.left) ? this.exportProperties.pdfMargins.left : margins.left;
        margins.right = !isNullOrUndefined(this.exportProperties.pdfMargins.right) ? this.exportProperties.pdfMargins.right : margins.right;
      }
      documentSection.setPageSettings(eventParams.document.pageSettings);
      var page = documentSection.pages.add();
      if (!isNullOrUndefined(pdfExportProperties) && !isNullOrUndefined(pdfExportProperties.header)) {
        this.pdfExportHelper.drawHeader(pdfExportProperties, eventParams.document);
      }
      if (!isNullOrUndefined(pdfExportProperties) && !isNullOrUndefined(pdfExportProperties.footer)) {
        this.pdfExportHelper.drawFooter(pdfExportProperties, eventParams.document);
      }
      return page;
    };
    PDFExport2.prototype.getFontStyle = function(theme) {
      var fontType = PdfFontStyle.Regular;
      if (!isNullOrUndefined(theme) && theme.bold) {
        fontType |= PdfFontStyle.Bold;
      }
      if (!isNullOrUndefined(theme) && theme.italic) {
        fontType |= PdfFontStyle.Italic;
      }
      if (!isNullOrUndefined(theme) && theme.underline) {
        fontType |= PdfFontStyle.Underline;
      }
      if (!isNullOrUndefined(theme) && theme.strikeout) {
        fontType |= PdfFontStyle.Strikeout;
      }
      return fontType;
    };
    PDFExport2.prototype.getBorderStyle = function(borderStyle) {
      var borders = new PdfBorders();
      if (!isNullOrUndefined(borderStyle)) {
        var borderWidth = borderStyle.width;
        var width = !isNullOrUndefined(borderWidth) && typeof borderWidth === "number" ? borderWidth * 0.75 : void 0;
        var color = new PdfColor(196, 196, 196);
        if (!isNullOrUndefined(borderStyle.color)) {
          var borderColor = this.pdfExportHelper.hexDecToRgb(borderStyle.color);
          color = new PdfColor(borderColor.r, borderColor.g, borderColor.b);
        }
        var pen = new PdfPen(color, width);
        if (!isNullOrUndefined(borderStyle.dashStyle)) {
          pen.dashStyle = this.pdfExportHelper.getDashStyle(borderStyle.dashStyle);
        }
        borders.all = pen;
      } else {
        var pdfColor = new PdfColor(234, 234, 234);
        borders.all = new PdfPen(pdfColor);
      }
      return borders;
    };
    PDFExport2.prototype.getStyle = function() {
      var border = new PdfBorders();
      if (!isNullOrUndefined(this.gridStyle)) {
        var fontFamily = !isNullOrUndefined(this.gridStyle.header.fontName) ? this.getFontFamily(this.gridStyle.header.fontName) : PdfFontFamily.Helvetica;
        var fontStyle = this.getFontStyle(this.gridStyle.header);
        var fontSize = !isNullOrUndefined(this.gridStyle.header.fontSize) ? this.gridStyle.header.fontSize : 10.5;
        var pdfColor = new PdfColor();
        if (!isNullOrUndefined(this.gridStyle.header.fontColor)) {
          var penBrushColor = this.pdfExportHelper.hexDecToRgb(this.gridStyle.header.fontColor);
          pdfColor = new PdfColor(penBrushColor.r, penBrushColor.g, penBrushColor.b);
        }
        var font = new PdfStandardFont(fontFamily, fontSize, fontStyle);
        if (!isNullOrUndefined(this.gridStyle.header.font)) {
          font = this.gridStyle.header.font;
        }
        return {
          border: this.getBorderStyle(this.gridStyle.header.border),
          font,
          brush: new PdfSolidBrush(pdfColor)
        };
      } else {
        return {
          brush: new PdfSolidBrush(new PdfColor()),
          border,
          font: void 0
        };
      }
    };
    PDFExport2.prototype.setRecordThemeStyle = function(row, border) {
      if (!isNullOrUndefined(this.gridStyle) && !isNullOrUndefined(this.gridStyle.record)) {
        var fontFamily = !isNullOrUndefined(this.gridStyle.record.fontName) ? this.getFontFamily(this.gridStyle.record.fontName) : PdfFontFamily.Helvetica;
        var fontSize = !isNullOrUndefined(this.gridStyle.record.fontSize) ? this.gridStyle.record.fontSize : 9.75;
        var fontStyle = this.getFontStyle(this.gridStyle.record);
        var font = new PdfStandardFont(fontFamily, fontSize, fontStyle);
        if (!isNullOrUndefined(this.gridStyle.record.font)) {
          font = this.gridStyle.record.font;
        }
        row.style.setFont(font);
        var pdfColor = new PdfColor();
        if (!isNullOrUndefined(this.gridStyle.record.fontColor)) {
          var penBrushColor = this.pdfExportHelper.hexDecToRgb(this.gridStyle.record.fontColor);
          pdfColor = new PdfColor(penBrushColor.r, penBrushColor.g, penBrushColor.b);
        }
        row.style.setTextBrush(new PdfSolidBrush(pdfColor));
      }
      var borderRecord = this.gridStyle && this.gridStyle.record && this.gridStyle.record.border ? this.getBorderStyle(this.gridStyle.record.border) : border;
      row.style.setBorder(borderRecord);
      return row;
    };
    PDFExport2.prototype.exportToPDF = function(pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {
      var _this = this;
      var _a;
      this.engine = this.parent.dataType === "olap" ? this.parent.olapEngineModule : this.parent.engineModule;
      this.gridStyle = !isNullOrUndefined(this.exportProperties.pdfExportProperties) ? this.exportProperties.pdfExportProperties.theme : void 0;
      var eventParams = this.applyEvent();
      if (!isNullOrUndefined(pdfDoc)) {
        eventParams.document = pdfDoc;
      }
      var headerStyle = this.getStyle();
      var fileName = !isNullOrUndefined(this.exportProperties) && !isNullOrUndefined(this.exportProperties.fileName) ? this.exportProperties.fileName : !isNullOrUndefined(pdfExportProperties) && !isNullOrUndefined(pdfExportProperties.fileName) ? pdfExportProperties.fileName : "default";
      var indent = this.parent.renderModule.maxIndent ? this.parent.renderModule.maxIndent : 5;
      var firstColumnWidth = 100 + indent * 20;
      var size = Math.floor((540 - firstColumnWidth) / 90) + 1;
      var dataCollIndex = 0;
      var pivotValues = eventParams.args.pivotValues[dataCollIndex];
      if (this.exportProperties.columnSize || this.exportProperties.width || this.exportProperties.height) {
        size = this.exportProperties.columnSize > 0 ? this.exportProperties.columnSize : pivotValues[0].length;
      }
      this.exportProperties.allowRepeatHeader = this.exportProperties.allowRepeatHeader === true || isNullOrUndefined(this.exportProperties.allowRepeatHeader);
      var allowRepeatHeader = this.exportProperties.allowRepeatHeader ? this.exportProperties.allowRepeatHeader : false;
      var isHeaderRepeatEligible = allowRepeatHeader && size > 1;
      var rowMaxLevel;
      if (this.parent.isTabular) {
        rowMaxLevel = this.parent.engineModule.rowMaxLevel;
        size = rowMaxLevel + 1 < size ? size : rowMaxLevel + 2;
      }
      for (var vLen = 0; isHeaderRepeatEligible && vLen < pivotValues.length; vLen++) {
        for (var vCnt = size; pivotValues[vLen] && vCnt < pivotValues[vLen].length; vCnt += size) {
          var rowHeaderLevel = this.parent.isTabular ? pivotValues[vLen].slice(0, rowMaxLevel + 1) : [pivotValues[vLen][0]];
          (_a = pivotValues[vLen]).splice.apply(_a, [vCnt, 0].concat(rowHeaderLevel));
        }
      }
      var colLength = pivotValues && pivotValues.length > 0 ? pivotValues[0].length : 0;
      var integratedCnt = 0;
      do {
        if (!isNullOrUndefined(pdfExportProperties)) {
          this.exportProperties.header = !isNullOrUndefined(pdfExportProperties.header) && !isNullOrUndefined(pdfExportProperties.header.contents) && !isNullOrUndefined(pdfExportProperties.header.contents[0].value) ? pdfExportProperties.header.contents[0].value : this.exportProperties.header;
          this.exportProperties.footer = !isNullOrUndefined(pdfExportProperties.footer) && !isNullOrUndefined(pdfExportProperties.footer.contents) && !isNullOrUndefined(pdfExportProperties.footer.contents[0].value) ? pdfExportProperties.footer.contents[0].value : this.exportProperties.footer;
        }
        var page = this.addPage(eventParams, pdfExportProperties);
        var pdfGrid = new PdfGrid();
        var pageSize = size > 0 ? size : 5;
        if (pivotValues && pivotValues.length > 0) {
          pdfGrid.columns.add(pivotValues[0].length - integratedCnt >= pageSize ? pageSize : pivotValues[0].length - integratedCnt);
          var rowLen = pivotValues.length;
          var actualrCnt = 0;
          var maxLevel = 0;
          var columnWidth = 0;
          for (var rCnt = 0; rCnt < rowLen; rCnt++) {
            if (pivotValues[rCnt]) {
              var isColHeader = !(pivotValues[rCnt][0] && pivotValues[rCnt][0].axis === "row");
              var colLen = pivotValues[rCnt].length > integratedCnt + pageSize ? integratedCnt + pageSize : pivotValues[rCnt].length;
              var rowCount = 0;
              if (isColHeader) {
                pdfGrid.headers.add(1);
              }
              var pdfGridRow = !isColHeader ? pdfGrid.rows.addRow() : pdfGrid.headers.getHeader(actualrCnt);
              if (isColHeader) {
                pdfGridRow.style.setBorder(headerStyle.border);
                if (headerStyle.font) {
                  pdfGridRow.style.setFont(headerStyle.font);
                }
                pdfGridRow.style.setTextBrush(headerStyle.brush);
              } else {
                this.setRecordThemeStyle(pdfGridRow, headerStyle.border);
              }
              var localCnt = 0;
              var isEmptyRow = true;
              for (var cCnt = integratedCnt; cCnt < colLen; cCnt++) {
                var isValueCell = false;
                if (pivotValues[rCnt][cCnt] && pivotValues[rCnt][cCnt].rowSpan !== 0) {
                  var pivotCell = pivotValues[rCnt][cCnt];
                  var cellValue = pivotCell.formattedText;
                  cellValue = this.parent.dataSourceSettings.rows.length === 0 || this.parent.dataSourceSettings.columns.length === 0 ? this.parent.getValuesHeader(pivotCell, "value") : cellValue;
                  cellValue = pivotCell.type === "grand sum" ? this.parent.dataSourceSettings.rows.length === 0 || this.parent.dataSourceSettings.columns.length === 0 ? this.parent.getValuesHeader(pivotCell, "grandTotal") : this.parent.localeObj.getConstant("grandTotal") : pivotCell.type === "sum" ? cellValue.toString().replace("Total", this.parent.localeObj.getConstant("total")) : cellValue;
                  if (!(pivotCell.level === -1 && !pivotCell.rowSpan)) {
                    if (!(pivotCell.level === -1 && !pivotCell.rowSpan)) {
                      pdfGridRow.cells.getCell(localCnt).columnSpan = pivotCell.colSpan ? pageSize - localCnt < pivotCell.colSpan ? pageSize - localCnt : pivotCell.colSpan : 1;
                      if (isColHeader && pivotCell.rowSpan && pivotCell.rowSpan > 1 || !isColHeader && pivotCell.rowSpan && pivotCell.rowSpan > 1 && this.parent.isTabular) {
                        pdfGridRow.cells.getCell(localCnt).rowSpan = pivotCell.rowSpan ? pivotCell.rowSpan : 1;
                      }
                      pdfGridRow.cells.getCell(localCnt).value = cellValue ? cellValue.toString() : "";
                    }
                    if (cellValue !== "") {
                      isEmptyRow = false;
                    }
                  }
                  maxLevel = pivotCell.level > maxLevel ? pivotCell.level : maxLevel;
                  isValueCell = pivotCell.axis === "value";
                  cCnt = cCnt + (pdfGridRow.cells.getCell(localCnt).columnSpan ? pdfGridRow.cells.getCell(localCnt).columnSpan - 1 : 0);
                  localCnt = localCnt + (pdfGridRow.cells.getCell(localCnt).columnSpan ? pdfGridRow.cells.getCell(localCnt).columnSpan - 1 : 0);
                  if (pivotCell.style) {
                    pdfGridRow = this.applyStyle(pdfGridRow, pivotCell, localCnt);
                  }
                  var args = {
                    style: void 0,
                    pivotCell,
                    cell: pdfGridRow.cells.getCell(localCnt),
                    column: pdfGrid.columns.getColumn(localCnt)
                  };
                  this.parent.trigger(onPdfCellRender, args);
                  if (pivotCell.axis === "column") {
                    args = {
                      style: args.style,
                      cell: args.cell,
                      gridCell: args.pivotCell
                    };
                    this.parent.trigger(pdfHeaderQueryCellInfo, args);
                    pdfGridRow.cells.getCell(localCnt).value = args.gridCell.formattedText ? args.gridCell.formattedText : cellValue;
                  } else {
                    args = {
                      style: args.style,
                      cell: args.cell,
                      column: void 0,
                      data: args.pivotCell,
                      value: cellValue
                    };
                    this.parent.trigger(pdfQueryCellInfo, args);
                    pdfGridRow.cells.getCell(localCnt).value = args.value ? args.value : cellValue;
                  }
                  if (args.style) {
                    this.processCellStyle(pdfGridRow.cells.getCell(localCnt), args);
                  }
                } else {
                  var args = {
                    style: void 0,
                    pivotCell: void 0,
                    cell: pdfGridRow.cells.getCell(localCnt),
                    column: pdfGrid.columns.getColumn(localCnt)
                  };
                  this.parent.trigger(onPdfCellRender, args);
                  columnWidth = args.column.width;
                  var pivotCell = {
                    formattedText: ""
                  };
                  if (pivotCell.axis === "column") {
                    args = {
                      style: args.style,
                      cell: args.cell,
                      gridCell: args.pivotCell
                    };
                    this.parent.trigger(pdfHeaderQueryCellInfo, args);
                  }
                  if (args.style) {
                    this.processCellStyle(pdfGridRow.cells.getCell(localCnt), args);
                  }
                  pdfGridRow.cells.getCell(localCnt).value = "";
                  if (this.parent.isTabular && rowCount === 0) {
                    if (cCnt === 0 && isColHeader && this.parent.dataSourceSettings.columns && this.parent.dataSourceSettings.columns.length > 0) {
                      pdfGrid.headers.getHeader(0).cells.getCell(0).rowSpan = Object.keys(this.engine.headerContent).length + 1;
                      pdfGrid.headers.getHeader(0).cells.getCell(0).columnSpan = this.parent.engineModule.rowMaxLevel + 1;
                    } else if (cCnt !== 0 && isColHeader && this.parent.dataSourceSettings.columns && this.parent.dataSourceSettings.columns.length > 0 && pdfGrid.headers.getHeader(0).cells.getCell(0).rowSpan < Object.keys(this.engine.headerContent).length) {
                      pdfGrid.headers.getHeader(0).cells.getCell(0).rowSpan = Object.keys(this.engine.headerContent).length;
                      pdfGrid.headers.getHeader(0).cells.getCell(0).columnSpan = this.parent.engineModule.rowMaxLevel + 1;
                    }
                    rowCount++;
                  } else {
                    if (cCnt === 0 && isColHeader && this.parent.dataSourceSettings.columns && this.parent.dataSourceSettings.columns.length > 0) {
                      pdfGrid.headers.getHeader(0).cells.getCell(0).rowSpan++;
                    } else if (cCnt !== 0 && isColHeader && this.parent.dataSourceSettings.columns && this.parent.dataSourceSettings.columns.length > 0 && pdfGrid.headers.getHeader(0).cells.getCell(0).rowSpan < Object.keys(this.engine.headerContent).length) {
                      pdfGrid.headers.getHeader(0).cells.getCell(0).rowSpan++;
                    }
                  }
                }
                var stringFormat = new PdfStringFormat();
                if (this.parent.dataType === "olap") {
                  var indent_1 = !isColHeader && localCnt === 0 && pivotValues[rCnt][cCnt] ? this.parent.renderModule.indentCollection[pivotValues[rCnt][cCnt].rowIndex] : 0;
                  stringFormat.paragraphIndent = indent_1 * 15;
                  maxLevel = maxLevel > indent_1 ? maxLevel : indent_1;
                } else {
                  stringFormat.paragraphIndent = 0;
                  if (!isColHeader && localCnt === 0 && pivotValues[rCnt][cCnt] && pivotValues[rCnt][cCnt].level !== -1) {
                    var cell = pivotValues[rCnt][cCnt];
                    var levelName = cell.valueSort ? cell.valueSort.levelName.toString() : "";
                    var memberPos = cell.actualText ? cell.actualText.toString().split(this.parent.dataSourceSettings.valueSortSettings.headerDelimiter).length : 0;
                    var levelPosition = levelName.split(this.parent.dataSourceSettings.valueSortSettings.headerDelimiter).length - (memberPos ? memberPos - 1 : memberPos);
                    var level = levelPosition ? levelPosition - 1 : 0;
                    stringFormat.paragraphIndent = level * 10;
                  }
                }
                stringFormat.alignment = isValueCell ? PdfTextAlignment.Right : PdfTextAlignment.Left;
                stringFormat.lineAlignment = PdfVerticalAlignment.Middle;
                pdfGridRow.cells.getCell(localCnt).style.stringFormat = stringFormat;
                localCnt++;
              }
              if (isEmptyRow) {
                pdfGridRow.height = 16;
              }
              actualrCnt++;
            }
          }
          pdfGrid.columns.getColumn(0).width = columnWidth > 0 ? columnWidth : 100 + maxLevel * 20;
        }
        if (integratedCnt === 0 && this.parent.dataSourceSettings.columns && this.parent.dataSourceSettings.columns.length > 0) {
          pdfGrid.headers.getHeader(0).cells.getCell(0).rowSpan--;
        }
        pdfGrid.draw(page, new PointF(10, 20));
        integratedCnt = integratedCnt + pageSize;
        if (integratedCnt >= colLength && eventParams.args.pivotValues.length > dataCollIndex + 1) {
          dataCollIndex++;
          pivotValues = eventParams.args.pivotValues[dataCollIndex];
          colLength = pivotValues && pivotValues.length > 0 ? pivotValues[0].length : 0;
          integratedCnt = 0;
        }
      } while (integratedCnt < colLength);
      return new Promise(function(resolve) {
        var blobData;
        if (isBlob || isMultipleExport) {
          if (isBlob) {
            blobData = eventParams.document.save();
          }
        } else {
          eventParams.document.save(fileName + ".pdf");
          eventParams.document.destroy();
        }
        var exportCompleteEventArgs = {
          type: "PDF",
          promise: isBlob ? blobData : null
        };
        _this.parent.trigger(exportComplete, exportCompleteEventArgs);
        resolve(eventParams.document);
      });
    };
    PDFExport2.prototype.applyStyle = function(pdfGridRow, pivotCell, localCnt) {
      var color = this.parent.conditionalFormattingModule.hexToRgb(pivotCell.style.backgroundColor);
      var brush = new PdfSolidBrush(new PdfColor(color.r, color.g, color.b));
      pdfGridRow.cells.getCell(localCnt).style.backgroundBrush = brush;
      var size = Number(pivotCell.style.fontSize.split("px")[0]);
      var font = new PdfStandardFont(PdfFontFamily.TimesRoman, size, PdfFontStyle.Regular);
      pdfGridRow.cells.getCell(localCnt).style.font = font;
      color = this.parent.conditionalFormattingModule.hexToRgb(pivotCell.style.color);
      brush = new PdfSolidBrush(new PdfColor(color.r, color.g, color.b));
      pdfGridRow.cells.getCell(localCnt).style.textBrush = brush;
      return pdfGridRow;
    };
    PDFExport2.prototype.getFontFamily = function(family) {
      switch (family) {
        case "TimesRoman":
          return 2;
        case "Courier":
          return 1;
        case "Symbol":
          return 3;
        case "ZapfDingbats":
          return 4;
        default:
          return 0;
      }
    };
    PDFExport2.prototype.getFont = function(theme) {
      if (theme.style.font) {
        return theme.style.font;
      }
      var fontSize = theme.cell["cellStyle"].font && theme.cell["cellStyle"].font.fontSize ? theme.cell["cellStyle"].font.fontSize : !isNullOrUndefined(theme.style.fontSize) ? theme.style.fontSize * 0.75 : 9.75;
      var fontFamily = !isNullOrUndefined(theme.style.fontFamily) ? this.getFontFamily(theme.style.fontFamily) : PdfFontFamily.TimesRoman;
      var fontStyle = PdfFontStyle.Regular;
      if (!isNullOrUndefined(theme.style.bold) && theme.style.bold) {
        fontStyle |= PdfFontStyle.Bold;
      }
      if (!isNullOrUndefined(theme.style.italic) && theme.style.italic) {
        fontStyle |= PdfFontStyle.Italic;
      }
      if (!isNullOrUndefined(theme.style.underline) && theme.style.underline) {
        fontStyle |= PdfFontStyle.Underline;
      }
      if (!isNullOrUndefined(theme.style.strikeout) && theme.style.strikeout) {
        fontStyle |= PdfFontStyle.Strikeout;
      }
      return new PdfStandardFont(fontFamily, fontSize, fontStyle);
    };
    PDFExport2.prototype.processCellStyle = function(gridCell, arg) {
      if (!isNullOrUndefined(arg.style.backgroundColor)) {
        var backColor = this.pdfExportHelper.hexDecToRgb(arg.style.backgroundColor);
        gridCell.style.backgroundBrush = new PdfSolidBrush(new PdfColor(backColor.r, backColor.g, backColor.b));
      }
      if (!isNullOrUndefined(arg.style.textBrushColor)) {
        var textBrushColor = this.pdfExportHelper.hexDecToRgb(arg.style.textBrushColor);
        gridCell.style.textBrush = new PdfSolidBrush(new PdfColor(textBrushColor.r, textBrushColor.g, textBrushColor.b));
      }
      if (!isNullOrUndefined(arg.style.textPenColor)) {
        var textColor = this.pdfExportHelper.hexDecToRgb(arg.style.textPenColor);
        gridCell.style.textPen = new PdfPen(new PdfColor(textColor.r, textColor.g, textColor.b));
      }
      if (!isNullOrUndefined(arg.style.fontFamily) || !isNullOrUndefined(arg.style.fontSize) || !isNullOrUndefined(arg.style.bold) || !isNullOrUndefined(arg.style.italic) || !isNullOrUndefined(arg.style.underline) || !isNullOrUndefined(arg.style.strikeout)) {
        gridCell.style.font = this.getFont(arg);
      }
      if (!isNullOrUndefined(arg.style.border)) {
        var border = new PdfBorders();
        var borderWidth = arg.style.border.width;
        var width = !isNullOrUndefined(borderWidth) && typeof borderWidth === "number" ? borderWidth * 0.75 : void 0;
        var color = new PdfColor(196, 196, 196);
        if (!isNullOrUndefined(arg.style.border.color)) {
          var borderColor = this.pdfExportHelper.hexDecToRgb(arg.style.border.color);
          color = new PdfColor(borderColor.r, borderColor.g, borderColor.b);
        }
        var pen = new PdfPen(color, width);
        if (!isNullOrUndefined(arg.style.border.dashStyle)) {
          pen.dashStyle = this.pdfExportHelper.getDashStyle(arg.style.border.dashStyle);
        }
        border.all = pen;
        gridCell.style.borders = border;
      }
    };
    PDFExport2.prototype.applyEvent = function() {
      var clonedValues;
      var mdxQuery;
      var currentPivotValues = PivotExportUtil.getClonedPivotValues(this.engine.pivotValues);
      if (this.parent.exportAllPages && (this.parent.enableVirtualization || this.parent.enablePaging) && this.parent.dataSourceSettings.mode !== "Server") {
        var pageSettings = this.engine.pageSettings;
        this.engine.isPagingOrVirtualizationEnabled = false;
        if (this.parent.dataType === "olap") {
          this.updateOlapPageSettings(true);
          mdxQuery = this.parent.olapEngineModule.mdxQuery.slice(0);
        } else {
          this.engine.pageSettings = null;
        }
        this.engine.generateGridData(this.parent.dataSourceSettings, true, true);
        this.parent.applyFormatting(this.engine.pivotValues);
        clonedValues = PivotExportUtil.getClonedPivotValues(this.engine.pivotValues);
        this.engine.pivotValues = currentPivotValues;
        this.engine.pageSettings = pageSettings;
        this.engine.isPagingOrVirtualizationEnabled = true;
        if (this.parent.dataType === "olap") {
          this.updateOlapPageSettings(false);
          this.parent.olapEngineModule.mdxQuery = mdxQuery;
        }
      } else {
        clonedValues = currentPivotValues;
      }
      var args = {
        pivotValues: [clonedValues]
      };
      this.parent.trigger(enginePopulated, args);
      this.document = new PdfDocument();
      return {
        document: this.document,
        args
      };
    };
    PDFExport2.prototype.updateOlapPageSettings = function(isUpdate) {
      this.parent.olapEngineModule.isExporting = isUpdate ? true : false;
      if (!this.parent.exportSpecifiedPages) {
        this.parent.olapEngineModule.pageSettings = isUpdate ? null : this.parent.olapEngineModule.pageSettings;
        this.parent.olapEngineModule.isPaging = isUpdate ? false : true;
      } else {
        this.parent.olapEngineModule.exportSpeciedPages = this.parent.exportSpecifiedPages = isUpdate ? this.parent.exportSpecifiedPages : void 0;
      }
    };
    PDFExport2.prototype.destroy = function() {
      if (this.engine) {
        this.engine = null;
      }
      if (this.exportProperties) {
        this.exportProperties = null;
      }
      if (this.document) {
        this.document = null;
      }
      if (this.pdfExportHelper) {
        this.pdfExportHelper = null;
      }
    };
    return PDFExport2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/pivotview/actions/pager.js
var Pager2 = (
  /** @class */
  function() {
    function Pager3(parent) {
      this.parent = parent;
      this.parent.pagerModule = this;
      this.addEventListener();
    }
    Pager3.prototype.getModuleName = function() {
      return "pager";
    };
    Pager3.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(initPivotPager, this.createPager, this);
    };
    Pager3.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      if (isNullOrUndefined(this.parent.pagerSettings.template)) {
        this.unWireEvent();
      }
      this.parent.off(initPivotPager, this.createPager);
    };
    Pager3.prototype.createPager = function() {
      if (select("#" + this.parent.element.id + "pivot-pager", this.parent.element) !== null) {
        remove(select("#" + this.parent.element.id + "pivot-pager", this.parent.element));
        this.destroy();
        this.addEventListener();
      }
      var tableWidth = this.parent.grid ? this.parent.getGridWidthAsNumber() : this.parent.getWidthAsNumber();
      var pagerOptions = this.parent.pagerSettings;
      if (this.parent.enablePaging) {
        var pagerElement = createElement("div", {
          id: this.parent.element.id + "pivot-pager",
          className: GRID_PAGER + " " + ((this.parent.isAdaptive || tableWidth < 650 ? DEVICE : "") + " " + (this.parent.enableRtl ? RTL : "") + " " + (this.parent.pagerSettings.position === "Top" ? " " + GRID_PAGER_TOP : " " + GRID_PAGER_BOTTOM) + " " + (pagerOptions.enableCompactView || tableWidth < 400 ? COMPACT_VIEW : "")),
          styles: "width:" + (this.parent.grid ? this.parent.getGridWidthAsNumber() : this.parent.getWidthAsNumber()) + "px"
        });
        if (this.parent.showFieldList && select("#" + this.parent.element.id + "_PivotFieldList", this.parent.element) && pagerOptions.position === "Top") {
          this.parent.element.insertBefore(pagerElement, select("#" + this.parent.element.id + "_PivotFieldList", this.parent.element));
        } else if (this.parent.showGroupingBar && select("#" + this.parent.element.id + " ." + GRID_GROUPING_BAR_CLASS, this.parent.element) && pagerOptions.position === "Top") {
          this.parent.element.insertBefore(pagerElement, select("#" + this.parent.element.id + " ." + GRID_GROUPING_BAR_CLASS, this.parent.element));
        } else {
          if (this.parent.pagerSettings.position === "Top") {
            this.parent.element.insertBefore(pagerElement, select("#" + this.parent.element.id + "_grid", this.parent.element));
          } else {
            this.parent.element.append(pagerElement);
          }
        }
        var _this_1 = this;
        var tempFunc = function() {
          return _this_1.createPagerContainer();
        };
        this.pager = new Pager({
          enableRtl: this.parent.enableRtl,
          locale: this.parent.locale,
          template: pagerOptions.template === "" || pagerOptions.template ? pagerOptions.template : initializeCSPTemplate(tempFunc),
          cssClass: this.parent.cssClass
        });
        this.pager.isVue = this.parent.isVue;
        this.pager.appendTo(pagerElement);
        if (isNullOrUndefined(pagerOptions.template)) {
          if (pagerOptions.showRowPager) {
            if (!pagerOptions.enableCompactView && tableWidth > 400) {
              var rowPagerTextBox = new NumericTextBox({
                min: 1,
                max: this.parent.engineModule.rowPageCount,
                showSpinButton: false,
                format: "#",
                validateDecimalOnType: true,
                decimals: 0,
                strictMode: true,
                value: this.parent.pageSettings.currentRowPage,
                enableRtl: this.parent.enableRtl,
                locale: this.parent.locale,
                width: tableWidth < 669 ? "50px" : "64px",
                change: this.rowPageChange.bind(this),
                cssClass: this.parent.cssClass
              });
              rowPagerTextBox.appendTo(select("#" + this.parent.element.id + "_row_textbox", this.parent.element));
            }
            if (pagerOptions.showRowPageSize) {
              var rowPages = this.parent.pagerSettings.rowPageSizes.slice(0);
              if (this.parent.pagerSettings.rowPageSizes.indexOf(this.parent.pageSettings.rowPageSize) === -1) {
                rowPages.push(this.parent.pageSettings.rowPageSize);
                rowPages.sort(function(a, b) {
                  return a - b;
                });
              }
              var rowPageSizeDropDown = new DropDownList({
                dataSource: rowPages,
                value: this.parent.pageSettings.rowPageSize,
                enableRtl: this.parent.enableRtl,
                locale: this.parent.locale,
                change: this.rowPageSizeChange.bind(this),
                popupHeight: "300px",
                popupWidth: "100%",
                width: "64px",
                cssClass: this.parent.cssClass
              });
              rowPageSizeDropDown.appendTo(select("#" + this.parent.element.id + "_row_size_list", this.parent.element));
            }
          }
          if (pagerOptions.showColumnPager) {
            if (!pagerOptions.enableCompactView && tableWidth > 400) {
              var columnPagerTextBox = new NumericTextBox({
                min: 1,
                max: this.parent.engineModule.columnPageCount,
                showSpinButton: false,
                format: "#",
                validateDecimalOnType: true,
                decimals: 0,
                strictMode: true,
                value: this.parent.pageSettings.currentColumnPage,
                enableRtl: this.parent.enableRtl,
                locale: this.parent.locale,
                width: tableWidth < 669 ? "50px" : "64px",
                change: this.columnPageChange.bind(this),
                cssClass: this.parent.cssClass
              });
              columnPagerTextBox.appendTo(select("#" + this.parent.element.id + "_column_textbox", this.parent.element));
            }
            if (pagerOptions.showColumnPageSize) {
              var columnPages = this.parent.pagerSettings.columnPageSizes.slice(0);
              if (this.parent.pagerSettings.columnPageSizes.indexOf(this.parent.pageSettings.columnPageSize) === -1) {
                columnPages.push(this.parent.pageSettings.columnPageSize);
                columnPages.sort(function(a, b) {
                  return a - b;
                });
              }
              var columnPageSizeDropDown = new DropDownList({
                dataSource: columnPages,
                value: this.parent.pageSettings.columnPageSize,
                enableRtl: this.parent.enableRtl,
                locale: this.parent.locale,
                change: this.columnPageSizeChange.bind(this),
                popupHeight: "300px",
                popupWidth: "100%",
                width: "64px",
                cssClass: this.parent.cssClass
              });
              columnPageSizeDropDown.appendTo(select("#" + this.parent.element.id + "_column_size_list", this.parent.element));
            }
          }
          this.unWireEvent();
          this.wireEvent();
        }
      }
    };
    Pager3.prototype.wireEvent = function() {
      var elements = [].slice.call(this.parent.element.querySelectorAll("." + FIRST_PAGER_ICON + ", ." + PREV_PAGER_ICON + ", ." + NEXT_PAGER_ICON + ", ." + LAST_PAGER_ICON));
      for (var i = 0; i < elements.length; i++) {
        EventHandler.add(elements[i], "click", this.updatePageSettings, this);
      }
    };
    Pager3.prototype.unWireEvent = function() {
      var elements = [].slice.call(this.parent.element.querySelectorAll("." + FIRST_PAGER_ICON + ", ." + PREV_PAGER_ICON + ", ." + NEXT_PAGER_ICON + ", ." + LAST_PAGER_ICON));
      for (var i = 0; i < elements.length; i++) {
        EventHandler.remove(elements[i], "click", this.updatePageSettings);
      }
    };
    Pager3.prototype.columnPageChange = function(args) {
      this.parent.pageSettings.currentColumnPage = args.value;
    };
    Pager3.prototype.rowPageChange = function(args) {
      this.parent.pageSettings.currentRowPage = args.value;
    };
    Pager3.prototype.columnPageSizeChange = function(args) {
      this.parent.pageSettings.columnPageSize = Number(args.value);
    };
    Pager3.prototype.rowPageSizeChange = function(args) {
      this.parent.pageSettings.rowPageSize = Number(args.value);
    };
    Pager3.prototype.updatePageSettings = function(args) {
      var targetId = args.target.id;
      switch (targetId) {
        case this.parent.element.id + "_row_firstIcon":
          this.parent.pageSettings.currentRowPage = 1;
          break;
        case this.parent.element.id + "_row_prevIcon":
          this.parent.pageSettings.currentRowPage = this.parent.pageSettings.currentRowPage > 1 ? this.parent.pageSettings.currentRowPage - 1 : this.parent.pageSettings.currentRowPage;
          break;
        case this.parent.element.id + "_row_nextIcon":
          this.parent.pageSettings.currentRowPage = this.parent.pageSettings.currentRowPage < this.parent.engineModule.rowPageCount ? this.parent.pageSettings.currentRowPage + 1 : this.parent.pageSettings.currentRowPage;
          break;
        case this.parent.element.id + "_row_lastIcon":
          this.parent.pageSettings.currentRowPage = this.parent.engineModule.rowPageCount;
          break;
        case this.parent.element.id + "_column_firstIcon":
          this.parent.pageSettings.currentColumnPage = 1;
          break;
        case this.parent.element.id + "_column_prevIcon":
          this.parent.pageSettings.currentColumnPage = this.parent.pageSettings.currentColumnPage > 1 ? this.parent.pageSettings.currentColumnPage - 1 : this.parent.pageSettings.currentColumnPage;
          break;
        case this.parent.element.id + "_column_nextIcon":
          this.parent.pageSettings.currentColumnPage = this.parent.pageSettings.currentColumnPage < this.parent.engineModule.columnPageCount ? this.parent.pageSettings.currentColumnPage + 1 : this.parent.pageSettings.currentColumnPage;
          break;
        case this.parent.element.id + "_column_lastIcon":
          this.parent.pageSettings.currentColumnPage = this.parent.engineModule.columnPageCount;
          break;
      }
      if (targetId.indexOf("_row") !== -1) {
        this.parent.actionObj.actionName = rowPageNavigation;
      } else if (targetId.indexOf("_column") !== -1) {
        this.parent.actionObj.actionName = columnPageNavigation;
      }
    };
    Pager3.prototype.createPagerContainer = function() {
      var tableWidth = this.parent.grid ? this.parent.getGridWidthAsNumber() : this.parent.getWidthAsNumber();
      var pagerOptions = this.parent.pagerSettings;
      var rowMainDiv;
      var columnMainDiv;
      if (pagerOptions.showRowPager) {
        rowMainDiv = this.createPagerItems("row", pagerOptions, tableWidth);
      }
      if (pagerOptions.showColumnPager) {
        columnMainDiv = this.createPagerItems("column", pagerOptions, tableWidth);
      }
      var mainDivPagerSettings = createElement("div", {
        id: this.parent.element.id + "_mainDiv",
        className: GRID_PAGER_DIV + " " + (!pagerOptions.showRowPager || !pagerOptions.showColumnPager ? GRID_PAGER_SINGLE_DIV : "") + " " + (pagerOptions.isInversed ? INVERSE : "")
      });
      var vertiSeparator = createElement("div", {
        id: this.parent.element.id + "_vertical_separator",
        className: this.parent.isAdaptive || tableWidth < 650 ? PIVOT_H_SEPARATOR : PIVOT_V_SEPARATOR
      });
      if (pagerOptions.isInversed && pagerOptions.showColumnPager && pagerOptions.showRowPager) {
        mainDivPagerSettings.append(columnMainDiv, vertiSeparator, rowMainDiv);
      } else if (pagerOptions.showColumnPager && pagerOptions.showRowPager) {
        mainDivPagerSettings.append(rowMainDiv, vertiSeparator, columnMainDiv);
      } else if (pagerOptions.showRowPager && !pagerOptions.showColumnPager) {
        mainDivPagerSettings.append(rowMainDiv);
      } else if (!pagerOptions.showRowPager && pagerOptions.showColumnPager) {
        mainDivPagerSettings.append(columnMainDiv);
      }
      return mainDivPagerSettings.outerHTML;
    };
    Pager3.prototype.createPagerItems = function(axis, pagerOptions, tableWidth) {
      var isSinglePagerEnabled = !pagerOptions.showRowPager || !pagerOptions.showColumnPager;
      var pagerAxisMainDiv = createElement("div", {
        id: this.parent.element.id + "_" + axis + "_mainDiv",
        className: axis === "row" ? PIVOT_ROW_PAGER_DIV + " " + (!pagerOptions.showRowPageSize ? PAGE_SIZE_DISABLE : "") : PIVOT_COLUMN_PAGER_DIV + " " + (!pagerOptions.showColumnPageSize ? PAGE_SIZE_DISABLE : "")
      });
      var pagerIconContainer = createElement("div", {
        id: this.parent.element.id + "_" + axis + "_pagerSettings",
        className: axis === "row" ? PIVOT_ROW_PAGER_SETTINGS : PIVOT_COLUMN_PAGER_SETTINGS
      });
      if (this.parent.pagerSettings.showColumnPager && this.parent.pagerSettings.showRowPager) {
        pagerIconContainer.classList.add(PIVOT_BOTH_PAGER_SETTINGS);
      }
      var isFirstDisable = axis === "column" && this.parent.pageSettings.currentColumnPage === 1 || axis === "row" && this.parent.pageSettings.currentRowPage === 1;
      var isLastDisable = axis === "column" && this.parent.pageSettings.currentColumnPage === this.parent.engineModule.columnPageCount || axis === "row" && this.parent.pageSettings.currentRowPage === this.parent.engineModule.rowPageCount;
      var navIconContainer = createElement("div", {
        id: this.parent.element.id + "_" + axis + "_NavContainer",
        attrs: {
          class: PIVOT_PAGER_NAV_CONTAINER + " " + PIVOT_PAGER_CONTAINER
        }
      });
      var pageInfoContainer = createElement("div", {
        id: this.parent.element.id + "_" + axis + "_PageInfoContainer",
        attrs: {
          class: PIVOT_PAGER_INFO_CONTAINER + " " + PIVOT_PAGER_CONTAINER
        }
      });
      var firstIcon = createElement("div", {
        id: this.parent.element.id + "_" + axis + "_firstIcon",
        attrs: {
          class: PIVOT_FIRST_ICON_DEFAULT + (isFirstDisable ? " " + DISABLE_FIRST_PAGE + " " + ICON_DISABLE : " " + PIVOT_FIRST_ICON_ENABLE),
          title: this.parent.localeObj.getConstant("goToFirstPage"),
          "aria-label": this.parent.localeObj.getConstant("goToFirstPage"),
          tabindex: "0",
          role: "button"
        }
      });
      var prevIcon = createElement("div", {
        id: this.parent.element.id + "_" + axis + "_prevIcon",
        attrs: {
          class: PIVOT_PREV_ICON_DEFAULT + (isFirstDisable ? " " + DISABLE_PREV_PAGE + " " + ICON_DISABLE : " " + PIVOT_PREV_ICON_ENABLE),
          title: this.parent.localeObj.getConstant("goToPreviousPage"),
          "aria-label": this.parent.localeObj.getConstant("goToPreviousPage"),
          tabindex: "0",
          role: "button"
        }
      });
      var pagerString = createElement("span", {
        id: this.parent.element.id + "_" + axis + "_pagerString",
        className: axis === "row" ? PIVOT_ROW_PAGER_STRING : PIVOT_COLUMN_PAGER_STRING
      });
      pagerString.innerText = axis === "row" ? this.parent.localeObj.getConstant("rowPage") : this.parent.localeObj.getConstant("columnPage");
      var pagerTextBoxDiv = createElement("input", {
        id: this.parent.element.id + "_" + axis + "_textbox",
        className: axis === "row" ? PIVOT_ROW_DROPDOWN : PIVOT_COLUMN_DROPDOWN,
        attrs: {
          "placeholder": "1"
        }
      });
      var mainOfStringDiv = createElement("div", {
        id: this.parent.element.id + "_" + axis + "_of_string_mainDiv",
        className: axis === "row" ? PIVOT_ROW_OF_STRING_MAINDIV : PIVOT_COLUMN_OF_STRING_MAINDIV
      });
      var ofString = createElement("span", {
        id: this.parent.element.id + "_" + axis + "_ofString",
        className: axis === "row" ? PIVOT_ROW_OF_STRING : PIVOT_COLUMN_OF_STRING
      });
      ofString.innerText = this.parent.localeObj.getConstant("of") + " ";
      var pagerNumber = createElement("span", {
        id: this.parent.element.id + "_" + axis + "_pagerNumber",
        className: axis === "row" ? PIVOT_ROW_PAGER_NUMBER : PIVOT_COLUMN_PAGER_NUMBER
      });
      pagerNumber.innerText = (axis === "row" ? this.parent.engineModule.rowPageCount : this.parent.engineModule.columnPageCount).toString();
      var nextIcon = createElement("div", {
        id: this.parent.element.id + "_" + axis + "_nextIcon",
        attrs: {
          class: PIVOT_NEXT_ICON_DEFAULT + (isLastDisable ? " " + DISABLE_NEXT_PAGE + " " + ICON_DISABLE : " " + PIVOT_NEXT_ICON_ENABLE),
          title: this.parent.localeObj.getConstant("goToNextPage"),
          "aria-label": this.parent.localeObj.getConstant("goToNextPage"),
          tabindex: "0",
          role: "button"
        }
      });
      var lastIcon = createElement("div", {
        id: this.parent.element.id + "_" + axis + "_lastIcon",
        attrs: {
          class: PIVOT_LAST_ICON_DEFAULT + (isLastDisable ? " " + DISABLE_LAST_PAGE + " " + ICON_DISABLE : " " + PIVOT_LAST_ICON_ENABLE),
          title: this.parent.localeObj.getConstant("goToLastPage"),
          "aria-label": this.parent.localeObj.getConstant("goToLastPage"),
          tabindex: "0",
          role: "button"
        }
      });
      var pageSize = createElement("span", {
        id: this.parent.element.id + "_" + axis + "_size",
        className: axis === "row" ? PIVOT_ROW_SIZE : PIVOT_COLUMN_SIZE
      });
      pageSize.innerText = axis === "row" ? this.parent.localeObj.getConstant("rowPerPage") : this.parent.localeObj.getConstant("columnPerPage");
      var pageSizeDropDownMainDiv = createElement("div", {
        id: this.parent.element.id + "_" + axis + "_size_list_maindiv",
        className: PIVOT_PAGE_SIZE_LIST_MAINDIV + " " + PIVOT_PAGER_CONTAINER
      });
      var pageSizeDropDown = createElement("div", {
        id: this.parent.element.id + "_" + axis + "_size_list",
        className: axis === "row" ? PIVOT_ROW_SIZE_LIST : PIVOT_COLUMN_SIZE_LIST
      });
      var pagerStringContainer = createElement("div", {
        id: this.parent.element.id + "_" + axis + "_text_div",
        className: PIVOT_TEXT_DIV
      });
      var pagerElementContainer = createElement("div", {
        id: this.parent.element.id + "_" + axis + "_text_div_1",
        className: PIVOT_TEXT_DIV_1
      });
      pageSizeDropDownMainDiv.append(pageSizeDropDown);
      if (pagerOptions.enableCompactView || tableWidth < 400) {
        navIconContainer.append(prevIcon, nextIcon);
        pagerIconContainer.append(navIconContainer);
      } else {
        mainOfStringDiv.append(ofString, pagerNumber);
        navIconContainer.append(firstIcon, prevIcon, nextIcon, lastIcon);
        pageInfoContainer.append(pagerTextBoxDiv, mainOfStringDiv);
        pagerIconContainer.append(navIconContainer, pageInfoContainer);
      }
      if (axis === "row" && pagerOptions.showRowPager || axis === "column" && pagerOptions.showColumnPager) {
        if ((axis === "column" && !pagerOptions.showRowPager || axis === "row" && !pagerOptions.showColumnPager) && isSinglePagerEnabled) {
          pagerElementContainer.append(pageSize, pageSizeDropDownMainDiv);
        }
        if ((!pagerOptions.showColumnPager || !pagerOptions.showRowPager) && isSinglePagerEnabled) {
          if (axis === "row") {
            if (pagerOptions.showRowPageSize) {
              pagerAxisMainDiv.append(pagerIconContainer, pagerString, pagerElementContainer);
            } else {
              pagerAxisMainDiv.append(pagerIconContainer, pagerString);
            }
          }
          if (axis === "column") {
            if (pagerOptions.showColumnPageSize) {
              pagerAxisMainDiv.append(pagerIconContainer, pagerString, pagerElementContainer);
            } else {
              pagerAxisMainDiv.append(pagerIconContainer, pagerString);
            }
          }
        } else {
          if (axis === "row" && pagerOptions.showRowPageSize || axis === "column" && pagerOptions.showColumnPageSize) {
            if (!pagerOptions.enableCompactView && tableWidth > 400) {
              pagerStringContainer.append(pagerString, pageSize);
              pagerElementContainer.append(pagerIconContainer, pageSizeDropDownMainDiv);
            } else {
              pagerStringContainer.append(pagerString, pagerIconContainer);
              pagerElementContainer.append(pageSize, pageSizeDropDownMainDiv);
            }
          } else if (axis === "row" && !pagerOptions.showRowPageSize || axis === "column" && !pagerOptions.showColumnPageSize) {
            pagerStringContainer.append(pagerString);
            pagerElementContainer.append(pagerIconContainer);
          }
          pagerAxisMainDiv.append(pagerStringContainer, pagerElementContainer);
        }
      }
      return pagerAxisMainDiv;
    };
    Pager3.prototype.destroy = function() {
      this.removeEventListener();
      if (this.parent.pagerModule) {
        var element = select("#" + this.parent.element.id + "_column_textbox", this.parent.element);
        var columnPagerTextBox = element ? getInstance(element, NumericTextBox) : null;
        if (columnPagerTextBox) {
          columnPagerTextBox.destroy();
          columnPagerTextBox = null;
        }
        element = select("#" + this.parent.element.id + "_row_textbox", this.parent.element);
        var rowPagerTextBox = element ? getInstance(element, NumericTextBox) : null;
        if (rowPagerTextBox) {
          rowPagerTextBox.destroy();
          rowPagerTextBox = null;
        }
        element = select("#" + this.parent.element.id + "_column_size_list", this.parent.element);
        var columnPageSizeDropDown = element ? getInstance(element, DropDownList) : null;
        if (columnPageSizeDropDown) {
          columnPageSizeDropDown.destroy();
          columnPageSizeDropDown = null;
        }
        element = select("#" + this.parent.element.id + "_row_size_list", this.parent.element);
        var rowPageSizeDropDown = element ? getInstance(element, DropDownList) : null;
        if (rowPageSizeDropDown) {
          rowPageSizeDropDown.destroy();
          rowPageSizeDropDown = null;
        }
        if (this.pager) {
          this.pager.destroy();
        }
        this.pager = null;
      } else {
        return;
      }
    };
    return Pager3;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/pivotfieldlist/renderer/dialog-renderer.js
var DialogRenderer = (
  /** @class */
  function() {
    function DialogRenderer2(parent) {
      this.parent = parent;
    }
    DialogRenderer2.prototype.render = function() {
      var fieldListWrappper = createElement("div", {
        id: this.parent.element.id + "_Container",
        className: WRAPPER_CLASS + " " + (this.parent.dataType === "olap" ? OLAP_WRAPPER_CLASS : ""),
        styles: "width:" + this.parent.element.style.width
      });
      if (this.parent.isAdaptive) {
        addClass([fieldListWrappper], DEVICE);
      } else {
        removeClass([fieldListWrappper], DEVICE);
      }
      if (this.parent.enableRtl) {
        addClass([fieldListWrappper], RTL);
      } else {
        removeClass([fieldListWrappper], RTL);
      }
      if (this.parent.cssClass) {
        addClass([fieldListWrappper], this.parent.cssClass.split(" "));
      }
      if (this.parent.enableFieldSearching) {
        addClass([fieldListWrappper], FIELD_LIST_SEARCH_MODE_CLASS);
      } else {
        removeClass([fieldListWrappper], FIELD_LIST_SEARCH_MODE_CLASS);
      }
      this.parentElement = createElement("div", {
        className: CONTAINER_CLASS
      });
      this.parent.element.appendChild(fieldListWrappper);
      if (this.parent.isAdaptive) {
        fieldListWrappper.removeAttribute("style");
        this.parentElement = createElement("div", {
          className: ADAPTIVE_CONTAINER_CLASS
        });
        this.renderAdaptiveLayout(fieldListWrappper);
      }
      if (this.parent.renderMode === "Popup") {
        this.renderFieldListDialog(fieldListWrappper);
        this.unWireDialogEvent(this.parent.element.querySelector("." + TOGGLE_FIELD_LIST_CLASS));
        this.wireDialogEvent(this.parent.element.querySelector("." + TOGGLE_FIELD_LIST_CLASS));
      } else {
        this.renderStaticLayout(fieldListWrappper);
      }
    };
    DialogRenderer2.prototype.renderStaticLayout = function(fieldListWrappper) {
      if (!this.parent.isAdaptive) {
        var layoutHeader = createElement("div", {
          className: FIELD_LIST_TITLE_CLASS
        });
        var headerContent = createElement("div", {
          className: FIELD_LIST_TITLE_CONTENT_CLASS
        });
        headerContent.innerText = this.parent.localeObj.getConstant("staticFieldList");
        layoutHeader.appendChild(headerContent);
        layoutHeader.appendChild(this.createCalculatedButton());
        addClass([fieldListWrappper], STATIC_FIELD_LIST_CLASS);
        fieldListWrappper.appendChild(layoutHeader);
        fieldListWrappper.appendChild(this.parentElement);
        addClass([fieldListWrappper], STATIC_FIELD_LIST_CLASS);
        if (this.parent.allowDeferLayoutUpdate) {
          fieldListWrappper.appendChild(this.createDeferUpdateButtons());
          this.renderDeferUpdateButtons(fieldListWrappper);
        }
      }
    };
    DialogRenderer2.prototype.renderDeferUpdateButtons = function(fieldListWrappper) {
      if (this.parent.allowDeferLayoutUpdate) {
        this.deferUpdateCheckBox = new CheckBox({
          label: this.parent.localeObj.getConstant("deferLayoutUpdate"),
          checked: this.parent.isPopupView && this.parent.pivotGridModule ? isNullOrUndefined(this.parent.pivotGridModule.pivotDeferLayoutUpdate) ? true : this.parent.pivotGridModule.pivotDeferLayoutUpdate : isNullOrUndefined(this.parent.isDeferLayoutUpdate) ? true : this.parent.isDeferLayoutUpdate,
          enableRtl: this.parent.enableRtl,
          enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
          locale: this.parent.locale,
          change: this.onCheckChange.bind(this),
          cssClass: this.parent.cssClass
        });
        this.deferUpdateCheckBox.isStringTemplate = true;
        this.deferUpdateCheckBox.appendTo(select("#" + this.parent.element.id + "DeferUpdateCheckBox", fieldListWrappper));
        this.deferUpdateApplyButton = new Button({
          cssClass: DEFER_APPLY_BUTTON + " " + DEFER_UPDATE_BUTTON + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
          content: this.parent.localeObj.getConstant("apply"),
          enableRtl: this.parent.enableRtl,
          locale: this.parent.locale,
          enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
          isPrimary: true,
          disabled: this.parent.isPopupView && this.parent.pivotGridModule ? !isNullOrUndefined(this.parent.pivotGridModule.pivotDeferLayoutUpdate) ? !this.parent.pivotGridModule.pivotDeferLayoutUpdate : false : !isNullOrUndefined(this.parent.isDeferLayoutUpdate) ? !this.parent.isDeferLayoutUpdate : false
        });
        this.deferUpdateApplyButton.isStringTemplate = true;
        this.deferUpdateApplyButton.appendTo(select("#" + this.parent.element.id + "_DeferUpdateButton1", fieldListWrappper));
        this.deferUpdateApplyButton.element.onclick = this.parent.renderMode === "Fixed" ? this.applyButtonClick.bind(this) : this.onDeferUpdateClick.bind(this);
      }
      this.deferUpdateCancelButton = new Button({
        cssClass: DEFER_CANCEL_BUTTON + " " + CANCEL_BUTTON_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
        content: this.parent.allowDeferLayoutUpdate ? this.parent.localeObj.getConstant("cancel") : this.parent.localeObj.getConstant("close"),
        enableRtl: this.parent.enableRtl,
        isPrimary: !this.parent.allowDeferLayoutUpdate,
        locale: this.parent.locale,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        disabled: this.parent.isPopupView && this.parent.pivotGridModule && this.parent.pivotGridModule["refreshing"] ? this.parent.allowDeferLayoutUpdate && !isNullOrUndefined(this.parent.pivotGridModule.pivotDeferLayoutUpdate) ? !this.parent.pivotGridModule.pivotDeferLayoutUpdate : false : this.parent["refreshing"] && !isNullOrUndefined(this.parent.isDeferLayoutUpdate) && this.parent.allowDeferLayoutUpdate ? !this.parent.isDeferLayoutUpdate : false
      });
      this.deferUpdateCancelButton.isStringTemplate = true;
      this.deferUpdateCancelButton.appendTo(select("#" + this.parent.element.id + "_DeferUpdateButton2", fieldListWrappper));
      if (this.parent.allowDeferLayoutUpdate && (!this.parent.isDeferLayoutUpdate && this.parent.renderMode === "Popup" && this.parent["refreshing"] || this.parent.isPopupView && this.parent.pivotGridModule && !this.parent.pivotGridModule.pivotDeferLayoutUpdate && this.parent.pivotGridModule["refreshing"])) {
        this.deferUpdateApplyButton.element.style.display = "none";
        this.deferUpdateCancelButton.setProperties({
          content: this.parent.localeObj.getConstant("close")
        });
        this.deferUpdateCancelButton.isPrimary = true;
        this.deferUpdateApplyButton.disabled = this.parent.isPopupView ? this.parent.pivotGridModule.pivotDeferLayoutUpdate : this.parent.isDeferLayoutUpdate;
        this.deferUpdateCancelButton.disabled = this.parent.isPopupView ? this.parent.pivotGridModule.pivotDeferLayoutUpdate : this.parent.isDeferLayoutUpdate;
      }
      this.deferUpdateCancelButton.element.onclick = this.onCloseFieldList.bind(this);
    };
    DialogRenderer2.prototype.createDeferUpdateButtons = function() {
      var layoutFooter = createElement("div", {
        className: LAYOUT_FOOTER
      });
      if (this.parent.allowDeferLayoutUpdate) {
        var checkBoxLayout = createElement("div", {
          className: CHECKBOX_LAYOUT,
          attrs: {
            "title": this.parent.localeObj.getConstant("deferLayoutUpdate")
          }
        });
        var deferUpdateCheckBox = createElement("input", {
          id: this.parent.element.id + "DeferUpdateCheckBox"
        });
        checkBoxLayout.appendChild(deferUpdateCheckBox);
        layoutFooter.appendChild(checkBoxLayout);
      }
      var buttonLayout = createElement("div", {
        className: BUTTON_LAYOUT
      });
      if (this.parent.allowDeferLayoutUpdate) {
        var deferUpdateButton1 = createElement("button", {
          id: this.parent.element.id + "_DeferUpdateButton1",
          attrs: {
            "type": "button",
            "title": this.parent.localeObj.getConstant("apply")
          }
        });
        buttonLayout.appendChild(deferUpdateButton1);
      }
      var deferUpdateButton2 = createElement("button", {
        id: this.parent.element.id + "_DeferUpdateButton2",
        attrs: {
          "type": "button",
          "title": this.parent.localeObj.getConstant("cancel")
        }
      });
      buttonLayout.appendChild(deferUpdateButton2);
      layoutFooter.appendChild(buttonLayout);
      return layoutFooter;
    };
    DialogRenderer2.prototype.onCheckChange = function(args) {
      if (args.checked) {
        this.parent.clonedDataSource = PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings);
        if (this.parent.dataType === "olap") {
          this.parent.clonedFieldListData = PivotUtil.cloneOlapFieldSettings(this.parent.olapEngineModule.fieldListData);
        }
        this.parent.clonedFieldList = PivotUtil.getClonedFieldList(this.parent.pivotFieldList);
      }
      this.parent.isDeferLayoutUpdate = args.checked;
      if (this.parent.isPopupView && this.parent.pivotGridModule) {
        this.parent.pivotGridModule.pivotDeferLayoutUpdate = args.checked;
      }
      if (this.parent.renderMode === "Fixed") {
        this.deferUpdateApplyButton.setProperties({
          disabled: !args.checked
        });
        this.deferUpdateCancelButton.setProperties({
          disabled: !args.checked
        });
      } else {
        if (this.parent.allowDeferLayoutUpdate && args.checked) {
          this.deferUpdateApplyButton.element.style.display = "";
          this.deferUpdateCancelButton.setProperties({
            content: this.parent.localeObj.getConstant("cancel")
          });
          this.deferUpdateCancelButton.isPrimary = false;
        } else {
          this.deferUpdateApplyButton.element.style.display = "none";
          this.deferUpdateCancelButton.setProperties({
            content: this.parent.localeObj.getConstant("close")
          });
          this.deferUpdateCancelButton.isPrimary = true;
        }
      }
      if (Object.keys(this.parent.clonedFieldList).length !== Object.keys(this.parent.pivotFieldList).length && this.parent.calculatedFieldModule && this.parent.calculatedFieldModule.field && this.parent.dataType === "pivot") {
        this.parent.engineModule.fields = Object.keys(this.parent.clonedFieldList);
      }
      this.onCloseFieldList(null, true);
    };
    DialogRenderer2.prototype.applyButtonClick = function() {
      if (this.parent.getModuleName() === "pivotfieldlist" && this.parent.allowDeferLayoutUpdate) {
        this.parent.pivotChange = false;
      }
      this.parent.isDeferUpdateApplied = true;
      if (!this.parent.isPopupView && this.parent.dataSourceSettings.mode === "Server") {
        this.parent.isRequiredUpdate = true;
      }
      this.parent.updateDataSource(false);
      var parent = this.parent;
      parent.axisFieldModule.render();
      parent.clonedDataSource = PivotUtil.getClonedDataSourceSettings(parent.dataSourceSettings);
      if (this.parent.dataType === "olap") {
        this.parent.clonedFieldListData = PivotUtil.cloneOlapFieldSettings(this.parent.olapEngineModule.fieldListData);
      }
      parent.clonedFieldList = PivotUtil.getClonedFieldList(parent.pivotFieldList);
    };
    DialogRenderer2.prototype.onCloseFieldList = function(args, isDeferLayoutEnabled) {
      if ((this.parent.allowDeferLayoutUpdate || isDeferLayoutEnabled) && (!this.parent.isPopupView || this.parent.pivotGridModule && this.parent.pivotGridModule.actionObj.actionName !== "" || this.parent.actionObj.actionName !== "")) {
        this.parent.setProperties({
          dataSourceSettings: this.parent.clonedDataSource
        }, true);
        if (this.parent.dataType === "olap") {
          this.parent.olapEngineModule.fieldList = PivotUtil.getClonedFieldList(this.parent.clonedFieldList);
          this.parent.olapEngineModule.fieldListData = PivotUtil.cloneOlapFieldSettings(this.parent.clonedFieldListData);
          if (!this.parent.isPopupView) {
            for (var _i = 0, _a = Object.keys(this.parent.clonedFieldList); _i < _a.length; _i++) {
              var name_1 = _a[_i];
              var item = this.parent.clonedFieldList[name_1];
              this.parent.olapEngineModule.updateFieldlistData(item.id, item.isSelected);
            }
          } else if (this.parent.isPopupView && this.parent.clonedFieldListData && Object.keys(this.parent.clonedFieldListData).length > 0) {
            this.parent.olapEngineModule.fieldListData = this.parent.clonedFieldListData;
          }
        } else {
          this.parent.engineModule.fieldList = PivotUtil.getClonedFieldList(this.parent.clonedFieldList);
        }
        this.parent.updateDataSource(false, true);
      }
      if ((!this.parent.isDeferLayoutUpdate || this.parent.pivotGridModule && !this.parent.pivotGridModule.pivotDeferLayoutUpdate) && isDeferLayoutEnabled) {
        this.parent.pivotChange = false;
      }
      if (this.parent.allowDeferLayoutUpdate && this.parent.isPopupView && this.parent.pivotGridModule && !this.parent.isAdaptive) {
        this.parent.pivotGridModule.actionObj.actionName = "";
        this.parent.pivotGridModule.engineModule = this.parent.engineModule;
        this.parent.pivotGridModule.olapEngineModule = this.parent.olapEngineModule;
        this.parent.pivotGridModule.setProperties({
          dataSourceSettings: this.parent.clonedDataSource
        }, true);
      }
      if (this.parent.allowDeferLayoutUpdate && this.parent.allowCalculatedField && this.parent.dataType === "pivot" && !this.parent.isAdaptive) {
        this.parent.engineModule.fieldList = this.parent.pivotFieldList = PivotUtil.getClonedFieldList(this.parent.clonedFieldList);
        var clonedField_1 = Object.keys(this.parent.engineModule.fieldList);
        if (this.parent.allowCalculatedField && clonedField_1.length !== this.parent.engineModule.fields.length) {
          var fields_1 = [];
          this.parent.engineModule.fields.forEach(function(field) {
            if (clonedField_1.indexOf(field) !== -1) {
              fields_1[fields_1.length] = field;
            }
          });
          this.parent.engineModule.fields = fields_1;
        }
      }
      if (this.parent.renderMode === "Popup" && !isDeferLayoutEnabled) {
        this.parent.dialogRenderer.fieldListDialog.hide();
        this.parent.actionObj.actionName = closeFieldlist;
      } else {
        this.parent.actionObj.actionName = actionDropped;
      }
      if (this.parent.actionObj.actionName) {
        this.parent.actionCompleteMethod();
      }
    };
    DialogRenderer2.prototype.renderFieldListDialog = function(fieldListWrappper) {
      var toggleFieldList = createElement("div", {
        className: TOGGLE_FIELD_LIST_CLASS + " " + ICON + " " + TOGGLE_SELECT_CLASS,
        attrs: {
          "tabindex": "0",
          title: this.parent.localeObj.getConstant("fieldList"),
          "aria-disabled": "false",
          "aria-label": this.parent.localeObj.getConstant("fieldList"),
          "role": "button"
        }
      });
      this.parent.element.appendChild(toggleFieldList);
      if (this.parent.isAdaptive) {
        var headerTemplate = "<div class=" + TITLE_MOBILE_HEADER + '><span class="' + ICON + " " + BACK_ICON + '"></span><div class=' + TITLE_MOBILE_CONTENT + ">" + this.parent.localeObj.getConstant("fieldList") + "</div></div>";
        var buttons = [{
          click: this.showFieldListDialog.bind(this),
          isFlat: false,
          buttonModel: {
            cssClass: ADAPTIVE_FIELD_LIST_BUTTON_CLASS + " " + BUTTON_SMALL_CLASS + " " + BUTTON_ROUND_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
            iconCss: ICON + " " + ADD_ICON_CLASS,
            isPrimary: true
          }
        }, {
          click: this.showCalculatedField.bind(this),
          isFlat: false,
          buttonModel: {
            cssClass: ADAPTIVE_CALCULATED_FIELD_BUTTON_CLASS + " " + BUTTON_SMALL_CLASS + " " + BUTTON_ROUND_CLASS + " " + ICON_DISABLE + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
            iconCss: ICON + " " + ADD_ICON_CLASS,
            enableRtl: this.parent.enableRtl,
            isPrimary: true
          }
        }];
        this.fieldListDialog = new Dialog({
          animationSettings: {
            effect: this.parent.enableRtl ? "SlideRight" : "SlideLeft"
          },
          header: headerTemplate,
          content: this.parentElement,
          isModal: true,
          showCloseIcon: false,
          visible: false,
          allowDragging: false,
          closeOnEscape: false,
          enableRtl: this.parent.enableRtl,
          locale: this.parent.locale,
          enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
          width: "100%",
          height: "100%",
          position: {
            X: "center",
            Y: "center"
          },
          buttons,
          target: document.body,
          cssClass: this.parent.cssClass,
          close: this.removeFieldListIcon.bind(this),
          open: this.dialogOpen.bind(this)
        });
        this.fieldListDialog.isStringTemplate = true;
        this.fieldListDialog.appendTo(fieldListWrappper);
        setStyleAttribute(select("#" + fieldListWrappper.id + "_dialog-content", fieldListWrappper), {
          "padding": "0"
        });
        var footer = fieldListWrappper.querySelector("." + FOOTER_CONTENT_CLASS);
        addClass([footer], FIELD_LIST_FOOTER_CLASS);
        removeClass([footer.querySelector("." + ADAPTIVE_CALCULATED_FIELD_BUTTON_CLASS)], BUTTON_FLAT_CLASS);
        removeClass([footer.querySelector("." + ADAPTIVE_FIELD_LIST_BUTTON_CLASS)], BUTTON_FLAT_CLASS);
        this.fieldListDialog.element.querySelector("." + BACK_ICON).onclick = this.parent.allowDeferLayoutUpdate ? this.onDeferUpdateClick.bind(this) : this.onCloseFieldList.bind(this);
      } else {
        var template = this.createDeferUpdateButtons().outerHTML;
        var headerTemplate = "<div class=" + TITLE_HEADER_CLASS + "><div class=" + TITLE_CONTENT_CLASS + ">" + this.parent.localeObj.getConstant("fieldList") + "</div></div>";
        this.fieldListDialog = new Dialog({
          animationSettings: {
            effect: "Zoom"
          },
          header: headerTemplate,
          content: this.parentElement,
          isModal: false,
          showCloseIcon: false,
          visible: false,
          allowDragging: true,
          enableRtl: this.parent.enableRtl,
          locale: this.parent.locale,
          enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
          width: this.parent.element.style.width,
          position: {
            X: "center",
            Y: this.parent.element.offsetTop
          },
          footerTemplate: template,
          closeOnEscape: false,
          cssClass: this.parent.cssClass,
          target: !isNullOrUndefined(this.parent.target) ? typeof this.parent.target === "string" ? document.querySelector(this.parent.target) : this.parent.target : document.body,
          close: this.removeFieldListIcon.bind(this)
        });
        this.fieldListDialog.isStringTemplate = true;
        this.fieldListDialog.appendTo(fieldListWrappper);
        this.renderDeferUpdateButtons(fieldListWrappper);
        setStyleAttribute(select("#" + fieldListWrappper.id + "_title", fieldListWrappper), {
          "width": "100%"
        });
        fieldListWrappper.querySelector("." + TITLE_HEADER_CLASS).appendChild(this.createCalculatedButton());
      }
    };
    DialogRenderer2.prototype.dialogOpen = function() {
      if (this.lastTabIndex === 4) {
        this.adaptiveElement.items[this.lastTabIndex].content = "";
        this.adaptiveElement.dataBind();
        this.parent.notify(initCalculatedField, {});
      } else {
        this.adaptiveElement.refresh();
      }
    };
    DialogRenderer2.prototype.updateDataSource = function(selectedNodes) {
      var axis = ["filters", "columns", "rows", "values"];
      for (var _i = 0, selectedNodes_1 = selectedNodes; _i < selectedNodes_1.length; _i++) {
        var field = selectedNodes_1[_i];
        var fieldName = field;
        var droppedClass = axis[this.adaptiveElement.selectedItem];
        this.parent.pivotCommon.dataSourceUpdate.control = this.parent.getModuleName() === "pivotview" ? this.parent : this.parent.pivotGridModule ? this.parent.pivotGridModule : this.parent;
        this.parent.pivotCommon.dataSourceUpdate.updateDataSource(fieldName, droppedClass, -1);
      }
      this.parent.axisFieldModule.render();
      if (!this.parent.allowDeferLayoutUpdate) {
        this.parent.updateDataSource(true);
      } else {
        this.parent.triggerPopulateEvent();
      }
    };
    DialogRenderer2.prototype.onDeferUpdateClick = function() {
      if (this.parent.isPopupView && this.parent.dataSourceSettings.mode === "Server") {
        this.parent.isRequiredUpdate = true;
      }
      this.parent.updateDataSource();
      this.parent.dialogRenderer.fieldListDialog.hide();
    };
    DialogRenderer2.prototype.renderAdaptiveLayout = function(fieldListWrappper) {
      var layoutFooter = createElement("div", {
        className: FIELD_LIST_FOOTER_CLASS
      });
      fieldListWrappper.appendChild(this.parentElement);
      var items = [{
        header: {
          "text": this.parent.localeObj.getConstant("filters")
        },
        content: this.createAxisTable("filters")
      }, {
        header: {
          "text": this.parent.localeObj.getConstant("columns")
        },
        content: this.createAxisTable("columns")
      }, {
        header: {
          "text": this.parent.localeObj.getConstant("rows")
        },
        content: this.createAxisTable("rows")
      }, {
        header: {
          "text": this.parent.localeObj.getConstant("values")
        },
        content: this.createAxisTable("values")
      }, {
        header: {
          "text": this.parent.localeObj.getConstant("createCalculatedField")
        },
        content: "Calculated Field Related UI"
      }];
      if (!this.parent.allowCalculatedField) {
        items.pop();
      }
      this.adaptiveElement = new Tab({
        heightAdjustMode: "Auto",
        items,
        height: "100%",
        enableRtl: this.parent.enableRtl,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        locale: this.parent.locale,
        selected: this.tabSelect.bind(this),
        cssClass: this.parent.cssClass
      });
      if (this.parent.renderMode === "Fixed") {
        layoutFooter.appendChild(this.createAddButton());
        addClass([fieldListWrappper], STATIC_FIELD_LIST_CLASS);
        this.adaptiveElement.isStringTemplate = true;
        this.adaptiveElement.appendTo(this.parentElement);
        this.parentElement.appendChild(layoutFooter);
      } else {
        this.adaptiveElement.isStringTemplate = true;
        this.adaptiveElement.appendTo(this.parentElement);
      }
    };
    DialogRenderer2.prototype.tabSelect = function(e) {
      var fieldWrapper = closest(this.parentElement, "." + WRAPPER_CLASS);
      this.lastTabIndex = e.selectedIndex;
      if (fieldWrapper && fieldWrapper.querySelector("." + ADAPTIVE_FIELD_LIST_BUTTON_CLASS)) {
        if (e.selectedIndex !== 4) {
          addClass([fieldWrapper.querySelector("." + ADAPTIVE_CALCULATED_FIELD_BUTTON_CLASS)], ICON_DISABLE);
          removeClass([fieldWrapper.querySelector("." + ADAPTIVE_FIELD_LIST_BUTTON_CLASS)], ICON_DISABLE);
        } else {
          removeClass([fieldWrapper.querySelector("." + ADAPTIVE_CALCULATED_FIELD_BUTTON_CLASS)], ICON_DISABLE);
          addClass([fieldWrapper.querySelector("." + ADAPTIVE_FIELD_LIST_BUTTON_CLASS)], ICON_DISABLE);
        }
      }
      if (e.selectedIndex === 4) {
        this.adaptiveElement.items[4].content = "";
        this.adaptiveElement.dataBind();
        this.parent.notify(initCalculatedField, {});
      } else {
        this.parent.axisFieldModule.render();
      }
    };
    DialogRenderer2.prototype.createCalculatedButton = function() {
      var calculatedButton = createElement("button", {
        id: this.parent.element.id + "_CalculatedField",
        attrs: {
          "type": "button",
          "tabindex": "0",
          "aria-disabled": "false",
          "aria-label": this.parent.localeObj.getConstant("CalculatedField")
        }
      });
      var calculateField = new Button({
        cssClass: CALCULATED_FIELD_CLASS + " " + ICON_DISABLE + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
        content: this.parent.localeObj.getConstant("CalculatedField"),
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer
      });
      calculateField.isStringTemplate = true;
      calculateField.appendTo(calculatedButton);
      if (this.parent.calculatedFieldModule) {
        removeClass([calculatedButton], ICON_DISABLE);
      }
      calculateField.element.onclick = this.showCalculatedField.bind(this);
      return calculatedButton;
    };
    DialogRenderer2.prototype.createAddButton = function() {
      var footerContainer = createElement("div", {
        className: FIELD_LIST_FOOTER_CLASS + "-content"
      });
      var fieldListButton = createElement("div", {});
      var calculatedButton = createElement("div", {});
      var calculateField = new Button({
        cssClass: ADAPTIVE_CALCULATED_FIELD_BUTTON_CLASS + " " + BUTTON_SMALL_CLASS + " " + BUTTON_ROUND_CLASS + " " + ICON_DISABLE + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
        iconCss: ICON + " " + ADD_ICON_CLASS,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer
      });
      var fieldList = new Button({
        cssClass: ADAPTIVE_FIELD_LIST_BUTTON_CLASS + " " + BUTTON_SMALL_CLASS + " " + BUTTON_ROUND_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
        iconCss: ICON + " " + ADD_ICON_CLASS,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer
      });
      fieldList.isStringTemplate = true;
      fieldList.appendTo(fieldListButton);
      calculateField.isStringTemplate = true;
      calculateField.appendTo(calculatedButton);
      footerContainer.appendChild(fieldListButton);
      footerContainer.appendChild(calculatedButton);
      calculateField.element.onclick = this.showCalculatedField.bind(this);
      fieldList.element.onclick = this.showFieldListDialog.bind(this);
      return footerContainer;
    };
    DialogRenderer2.prototype.createAxisTable = function(axis) {
      var axisWrapper = createElement("div", {
        className: FIELD_LIST_CLASS + "-" + axis
      });
      var axisContent = createElement("div", {
        className: AXIS_CONTENT_CLASS + " e-" + axis
      });
      var axisPrompt = createElement("span", {
        className: AXIS_PROMPT_CLASS
      });
      axisPrompt.innerText = this.parent.localeObj.getConstant("addPrompt");
      axisWrapper.appendChild(axisContent);
      axisWrapper.appendChild(axisPrompt);
      return axisWrapper;
    };
    DialogRenderer2.prototype.showCalculatedField = function() {
      try {
        if (!this.parent.isAdaptive) {
          this.parent.actionObj.actionName = openCalculatedField;
          if (this.parent.actionBeginMethod()) {
            return;
          }
          if (this.parent.dialogRenderer.fieldListDialog) {
            this.parent.dialogRenderer.fieldListDialog.hide();
            addClass([this.parent.element.querySelector("." + TOGGLE_FIELD_LIST_CLASS)], ICON_HIDDEN);
          }
        }
        this.parent.notify(initCalculatedField, {});
      } catch (execption) {
        this.parent.actionFailureMethod(execption);
      }
    };
    DialogRenderer2.prototype.showFieldListDialog = function() {
      var activeindex = this.adaptiveElement.selectedItem;
      this.parent.treeViewModule.render(activeindex);
    };
    DialogRenderer2.prototype.onShowFieldList = function() {
      this.parent.actionObj.actionName = showFieldList;
      if (this.parent.actionBeginMethod()) {
        return;
      }
      this.parent.actionObj.actionName = "";
      try {
        if (this.parent.allowDeferLayoutUpdate) {
          if (this.parent.isAdaptive) {
            this.parent.axisFieldModule.render();
          }
          this.parent.clonedDataSource = PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings);
          if (this.parent.dataType === "olap") {
            this.parent.clonedFieldListData = PivotUtil.cloneOlapFieldSettings(this.parent.olapEngineModule.fieldListData);
          }
          this.parent.clonedFieldList = PivotUtil.getClonedFieldList(this.parent.pivotFieldList);
        }
        addClass([this.parent.element.querySelector("." + TOGGLE_FIELD_LIST_CLASS)], ICON_HIDDEN);
        this.parent.dialogRenderer.fieldListDialog.show();
        this.parent.dialogRenderer.fieldListDialog.element.style.top = parseInt(this.parent.dialogRenderer.fieldListDialog.element.style.top, 10) < 0 ? "0px" : this.parent.dialogRenderer.fieldListDialog.element.style.top;
      } catch (execption) {
        this.parent.actionFailureMethod(execption);
      }
    };
    DialogRenderer2.prototype.removeFieldListIcon = function() {
      if (this.parent.isAdaptive && this.parent.allowCalculatedField && this.parent.calculatedFieldModule) {
        if (this.adaptiveElement && this.adaptiveElement.selectedItem === 4) {
          if (select("#" + this.parent.element.id + "droppable", this.adaptiveElement.element)) {
            this.parent.calculatedFieldModule.updateAdaptiveCalculatedField(false);
          } else {
            this.parent.notify(initCalculatedField, {
              edit: false
            });
          }
        }
      }
      if (!document.getElementById(this.parent.element.id + "calculateddialog")) {
        removeClass([this.parent.element.querySelector("." + TOGGLE_FIELD_LIST_CLASS)], ICON_HIDDEN);
      }
    };
    DialogRenderer2.prototype.keyPress = function(e) {
      if (e.keyCode === 13 && e.target) {
        e.target.click();
        e.preventDefault();
        return;
      }
    };
    DialogRenderer2.prototype.wireDialogEvent = function(element) {
      EventHandler.add(element, "keydown", this.keyPress, this);
      EventHandler.add(element, "click", this.onShowFieldList, this);
    };
    DialogRenderer2.prototype.unWireDialogEvent = function(element) {
      EventHandler.remove(element, "keydown", this.keyPress);
      EventHandler.remove(element, "click", this.onShowFieldList);
    };
    DialogRenderer2.prototype.destroy = function() {
      if (this.parent.renderMode === "Popup") {
        this.unWireDialogEvent(this.parent.element.querySelector("." + TOGGLE_FIELD_LIST_CLASS));
      }
      if (this.deferUpdateCheckBox && !this.deferUpdateCheckBox.isDestroyed) {
        this.deferUpdateCheckBox.destroy();
        this.deferUpdateCheckBox = null;
      }
      if (this.deferUpdateApplyButton && !this.deferUpdateApplyButton.isDestroyed) {
        this.deferUpdateApplyButton.destroy();
        this.deferUpdateApplyButton = null;
      }
      if (this.deferUpdateCancelButton && !this.deferUpdateCancelButton.isDestroyed) {
        this.deferUpdateCancelButton.destroy();
        this.deferUpdateCancelButton = null;
      }
      if (this.adaptiveElement && !this.adaptiveElement.isDestroyed) {
        this.adaptiveElement.destroy();
        this.adaptiveElement = null;
      }
      if (this.parent.renderMode === "Popup") {
        if (this.fieldListDialog && !this.fieldListDialog.isDestroyed) {
          this.fieldListDialog.destroy();
          this.fieldListDialog = null;
        }
        if (document.getElementById(this.parent.element.id + "_Container")) {
          remove(document.getElementById(this.parent.element.id + "_Container"));
        }
      }
    };
    return DialogRenderer2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/pivotfieldlist/renderer/tree-renderer.js
var TreeViewRenderer = (
  /** @class */
  function() {
    function TreeViewRenderer2(parent) {
      this.selectedNodes = [];
      this.isSearching = false;
      this.parentIDs = [];
      this.isSpaceKey = false;
      this.parent = parent;
      this.addEventListener();
    }
    TreeViewRenderer2.prototype.render = function(axis) {
      this.parentElement = this.parent.dialogRenderer.parentElement;
      this.fieldListSort = this.parent.pivotGridModule ? this.parent.pivotGridModule.defaultFieldListOrder : this.parent.defaultFieldListOrder;
      this.fieldListSort = this.fieldListSort === "Ascending" ? "Ascend" : this.fieldListSort === "Descending" ? "Descend" : "None";
      if (!this.parent.isAdaptive) {
        var fieldTable = createElement("div", {
          className: FIELD_TABLE_CLASS + " " + (this.parent.dataType === "olap" ? OLAP_FIELD_TABLE_CLASS : "")
        });
        var treeHeader = createElement("div", {
          className: FIELD_HEADER_CLASS,
          attrs: {
            title: this.parent.localeObj.getConstant("allFields")
          }
        });
        treeHeader.innerText = this.parent.localeObj.getConstant("allFields");
        var treeOuterDiv = createElement("div", {
          className: FIELD_LIST_TREE_OUTER_DIV_CLASS + " " + TREE_CONTAINER
        });
        this.treeViewElement = createElement("div", {
          id: this.parent.element.id + "_TreeView",
          className: FIELD_LIST_CLASS + " " + (this.parent.dataType === "olap" ? OLAP_FIELD_LIST_CLASS : "")
        });
        var fieldHeaderWrappper = createElement("div", {
          className: FIELD_HEADER_CONTAINER_CLASS
        });
        fieldHeaderWrappper.appendChild(treeHeader);
        fieldTable.appendChild(fieldHeaderWrappper);
        this.updateSortElements(fieldHeaderWrappper);
        if (this.parent.enableFieldSearching) {
          var searchWrapper = createElement("div", {
            id: this.parent.element.id + "_SearchDiv",
            attrs: {
              "tabindex": "-1"
            },
            className: FIELD_LIST_SEARCH_CLASS
          });
          var searchInput = createElement("input", {
            attrs: {
              "type": "text"
            }
          });
          searchWrapper.appendChild(searchInput);
          this.fieldSearch = new TextBox({
            placeholder: this.parent.localeObj.getConstant("search"),
            enableRtl: this.parent.enableRtl,
            locale: this.parent.locale,
            cssClass: FIELD_LIST_SEARCH_INPUT_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
            input: this.textChange.bind(this),
            showClearButton: true
          });
          this.fieldSearch.isStringTemplate = true;
          this.fieldSearch.appendTo(searchInput);
          this.fieldSearch.addIcon("append", FIELD_LIST_SEARCH_ICON_CLASS + " " + ICON);
          var promptDiv = createElement("div", {
            className: EMPTY_MEMBER_CLASS + " " + ICON_DISABLE
          });
          promptDiv.innerText = this.parent.localeObj.getConstant("noMatches");
          fieldTable.appendChild(searchWrapper);
          fieldTable.appendChild(promptDiv);
        }
        treeOuterDiv.appendChild(this.treeViewElement);
        fieldTable.appendChild(treeOuterDiv);
        this.parentElement.appendChild(fieldTable);
        if (this.parent.renderMode === "Fixed") {
          var centerDiv = createElement("div", {
            className: STATIC_CENTER_DIV_CLASS
          });
          var axisHeader = createElement("div", {
            className: STATIC_CENTER_HEADER_CLASS
          });
          axisHeader.innerText = this.parent.localeObj.getConstant("centerHeader");
          this.parentElement.appendChild(centerDiv);
          this.parentElement.appendChild(axisHeader);
        }
        this.renderTreeView();
      } else {
        this.renderTreeDialog(axis);
      }
    };
    TreeViewRenderer2.prototype.updateSortElements = function(headerWrapper) {
      var options = {
        "None": "sortNone",
        "Ascend": "sortAscending",
        "Descend": "sortDescending"
      };
      var keys = Object.keys(options);
      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var option = keys_1[_i];
        var spanElement = createElement("span", {
          attrs: {
            "tabindex": "0",
            "aria-disabled": "false",
            "aria-label": "Sort " + option,
            "data-sort": option,
            "title": this.parent.localeObj.getConstant(options[option]),
            "role": "button"
          },
          className: ICON + " e-sort-" + option.toLowerCase() + " " + (this.fieldListSort === option ? "e-selected" : "")
        });
        headerWrapper.appendChild(spanElement);
        this.unWireFieldListEvent(spanElement);
        this.wireFieldListEvent(spanElement);
      }
    };
    TreeViewRenderer2.prototype.renderTreeView = function() {
      this.fieldTable = new TreeView({
        fields: {
          dataSource: this.getTreeData(),
          id: "id",
          text: "caption",
          isChecked: "isSelected",
          parentID: "pid",
          iconCss: "spriteCssClass"
        },
        nodeChecked: this.nodeChecked.bind(this),
        nodeClicked: this.nodeStateChange.bind(this),
        keyPress: this.nodeStateChange.bind(this),
        cssClass: FIELD_LIST_TREE_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
        showCheckBox: true,
        allowDragAndDrop: true,
        sortOrder: "None",
        loadOnDemand: this.parent.dataType === "olap" ? false : this.parent.enableFieldSearching ? false : true,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        nodeDragStart: this.dragStart.bind(this),
        nodeDragStop: this.dragStop.bind(this),
        drawNode: this.updateTreeNode.bind(this),
        nodeExpanding: this.updateNodeIcon.bind(this),
        nodeCollapsed: this.updateNodeIcon.bind(this),
        nodeSelected: function(args) {
          removeClass([args.node], "e-active");
          args.cancel = true;
        }
      });
      this.treeViewElement.innerHTML = "";
      this.fieldTable.isStringTemplate = true;
      this.fieldTable.appendTo(this.treeViewElement);
      var dragEle = this.parent.renderMode === "Fixed" ? this.parent.element : this.parentElement;
      if (!isNullOrUndefined(dragEle.querySelector("." + FIELD_LIST_CLASS))) {
        getInstance(dragEle.querySelector("." + FIELD_LIST_CLASS), TreeView)["dragObj"].enableAutoScroll = false;
      }
    };
    TreeViewRenderer2.prototype.updateNodeIcon = function(args) {
      if (this.parent.dataType === "olap") {
        if (args.node && args.node.querySelector(".e-list-icon") && args.node.querySelector(".e-list-icon").className.indexOf("e-folderCDB-icon") > -1) {
          var node = args.node.querySelector(".e-list-icon");
          removeClass([node], "e-folderCDB-icon");
          addClass([node], "e-folderCDB-open-icon");
        } else if (args.node && args.node.querySelector(".e-list-icon") && args.node.querySelector(".e-list-icon").className.indexOf("e-folderCDB-open-icon") > -1) {
          var node = args.node.querySelector(".e-list-icon");
          removeClass([node], "e-folderCDB-open-icon");
          addClass([node], "e-folderCDB-icon");
        }
      }
    };
    TreeViewRenderer2.prototype.updateTreeNode = function(args) {
      var allowDrag = false;
      if (this.parent.dataType === "olap") {
        allowDrag = this.updateOlapTreeNode(args);
      } else {
        if (args.nodeData.hasChildren) {
          allowDrag = false;
          args.node.querySelector("." + CHECKBOX_CONTAINER).style.display = "none";
          addClass([args.node], FIELD_TREE_PARENT);
        } else {
          allowDrag = true;
        }
      }
      if (!isNullOrUndefined(args.nodeData.pid)) {
        addClass([args.node], FIELD_TREE_CHILD);
      }
      var liTextElement = args.node.querySelector("." + TEXT_CONTENT_CLASS);
      if (args.node.querySelector(".e-list-icon") && liTextElement) {
        var liIconElement = args.node.querySelector(".e-list-icon");
        liTextElement.insertBefore(liIconElement, args.node.querySelector(".e-list-text"));
      }
      if (allowDrag && !this.parent.isAdaptive) {
        var field = PivotUtil.getFieldInfo(args.nodeData.id, this.parent);
        allowDrag = false;
        var dragElement = createElement("span", {
          attrs: {
            "tabindex": "-1",
            title: field.fieldItem ? field.fieldItem.allowDragAndDrop ? this.parent.localeObj.getConstant("drag") : "" : this.parent.localeObj.getConstant("drag"),
            "aria-disabled": "false"
          },
          className: ICON + " " + DRAG_CLASS + " " + (field.fieldItem ? field.fieldItem.allowDragAndDrop ? "" : DRAG_DISABLE_CLASS : "")
        });
        if (args.node.querySelector("." + CHECKBOX_CONTAINER) && !args.node.querySelector(".cls.DRAG_CLASS") && liTextElement) {
          liTextElement.insertBefore(dragElement, args.node.querySelector("." + CHECKBOX_CONTAINER));
        }
      }
      if (args.node.querySelector("." + NODE_CHECK_CLASS)) {
        addClass([args.node.querySelector("." + LIST_TEXT_CLASS)], LIST_SELECT_CLASS);
      }
      if (this.parent.enableFieldSearching && this.isSearching) {
        var liElement = args.node;
        if (this.parent.dataType === "olap") {
          var id = liElement.getAttribute("data-uid");
          var searchItem = this.parent.pivotCommon.eventBase.searchListItem;
          for (var i = 0; i < this.parentIDs.length; i++) {
            if (id === this.parentIDs[i]) {
              addClass([liElement], ICON_DISABLE);
            }
            for (var _i = 0, searchItem_1 = searchItem; _i < searchItem_1.length; _i++) {
              var li2 = searchItem_1[_i];
              var parentID = this.parent.pivotCommon.eventBase.getParentIDs(this.fieldTable, li2.getAttribute("data-uid"), []);
              if (PivotUtil.inArray(id, parentID) > -1) {
                removeClass([liElement], ICON_DISABLE);
                break;
              }
            }
          }
        } else {
          for (var i = 0; i < this.nonSearchList.length; i++) {
            if (liElement.textContent === this.nonSearchList[i].textContent) {
              addClass([liElement], ICON_DISABLE);
              break;
            } else {
              if (liElement.innerText === this.nonSearchList[i].textContent) {
                addClass([liElement], ICON_DISABLE);
                break;
              }
            }
          }
        }
      }
    };
    TreeViewRenderer2.prototype.updateOlapTreeNode = function(args) {
      var allowDrag = false;
      if (this.parent.dataType === "olap") {
        if (args.node && args.node.querySelector(".e-calcMemberGroupCDB,.e-measureGroupCDB-icon,.e-folderCDB-icon,.e-folderCDB-open-icon,.e-dimensionCDB-icon,.e-kpiCDB-icon")) {
          args.node.querySelector("." + CHECKBOX_CONTAINER).style.display = "none";
        }
        if (args.node && args.node.querySelector(".e-list-icon") && args.node.querySelector(".e-list-icon").className.indexOf("e-level-members") > -1) {
          if (this.parent.isAdaptive) {
            args.node.querySelector("." + CHECKBOX_CONTAINER).style.display = "none";
          } else {
            args.node.querySelector("." + CHECKBOX_CONTAINER).style.visibility = "hidden";
          }
        }
        if (args.node && (args.node.querySelector(".e-hierarchyCDB-icon,.e-attributeCDB-icon,.e-namedSetCDB-icon") || args.node.querySelector(".e-measure-icon,.e-kpiGoal-icon,.e-kpiStatus-icon,.e-kpiTrend-icon,.e-kpiValue-icon") || args.node.querySelector(".e-calc-measure-icon,.e-calc-dimension-icon"))) {
          if (args.node.querySelector(".e-measure-icon")) {
            args.node.querySelector(".e-list-icon").style.display = "none";
            allowDrag = true;
          } else {
            allowDrag = true;
          }
        }
      } else {
        allowDrag = true;
      }
      return allowDrag;
    };
    TreeViewRenderer2.prototype.renderTreeDialog = function(axis) {
      var fieldListDialog = createElement("div", {
        id: this.parent.element.id + "_FieldListTreeView",
        className: ADAPTIVE_FIELD_LIST_DIALOG_CLASS + " " + (this.parent.dataType === "olap" ? "e-olap-editor-dialog" : "")
      });
      this.parentElement.appendChild(fieldListDialog);
      this.fieldDialog = new Dialog({
        animationSettings: {
          effect: "Fade"
        },
        allowDragging: false,
        header: this.parent.localeObj.getConstant("adaptiveFieldHeader"),
        content: this.createTreeView(this.getTreeData(axis)),
        isModal: true,
        visible: true,
        showCloseIcon: false,
        enableRtl: this.parent.enableRtl,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        locale: this.parent.locale,
        width: "320px",
        height: "350px",
        position: {
          X: "center",
          Y: "center"
        },
        buttons: [{
          click: this.closeTreeDialog.bind(this),
          isFlat: false,
          buttonModel: {
            cssClass: CANCEL_BUTTON_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
            content: this.parent.localeObj.getConstant("cancel")
          }
        }, {
          click: this.onFieldAdd.bind(this),
          isFlat: false,
          buttonModel: {
            cssClass: OK_BUTTON_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
            content: this.parent.localeObj.getConstant("add"),
            isPrimary: true
          }
        }],
        closeOnEscape: false,
        cssClass: this.parent.cssClass,
        close: this.closeTreeDialog.bind(this),
        target: closest(this.parentElement, "." + WRAPPER_CLASS)
      });
      this.fieldDialog.isStringTemplate = true;
      this.fieldDialog.appendTo(fieldListDialog);
    };
    TreeViewRenderer2.prototype.createTreeView = function(treeData) {
      var editorTreeWrapper = createElement("div", {
        id: this.parent.element.id + "EditorDiv",
        className: EDITOR_TREE_WRAPPER_CLASS
      });
      var searchWrapper = createElement("div", {
        id: this.parent.element.id + "_SearchDiv",
        attrs: {
          "tabindex": "-1"
        },
        className: EDITOR_SEARCH_WRAPPER_CLASS
      });
      var editorSearch = createElement("input", {
        attrs: {
          "type": "text"
        }
      });
      searchWrapper.appendChild(editorSearch);
      var treeOuterDiv = createElement("div", {
        className: FIELD_LIST_TREE_OUTER_DIV_CLASS
      });
      var treeViewContainer = createElement("div", {
        className: EDITOR_TREE_CONTAINER_CLASS + " " + (this.parent.dataType === "olap" ? "e-olap-field-list-tree" : "")
      });
      editorTreeWrapper.appendChild(searchWrapper);
      this.editorSearch = new MaskedTextBox({
        showClearButton: true,
        placeholder: this.parent.localeObj.getConstant("search"),
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        cssClass: EDITOR_SEARCH_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
        change: this.textChange.bind(this)
      });
      this.editorSearch.isStringTemplate = true;
      this.editorSearch.appendTo(editorSearch);
      var promptDiv = createElement("div", {
        className: EMPTY_MEMBER_CLASS + " " + ICON_DISABLE
      });
      promptDiv.innerText = this.parent.localeObj.getConstant("noMatches");
      editorTreeWrapper.appendChild(promptDiv);
      treeOuterDiv.appendChild(treeViewContainer);
      editorTreeWrapper.appendChild(treeOuterDiv);
      this.fieldTable = new TreeView({
        fields: {
          dataSource: treeData,
          id: "id",
          text: "caption",
          isChecked: "isSelected",
          parentID: "pid",
          iconCss: "spriteCssClass"
        },
        showCheckBox: true,
        loadOnDemand: this.parent.dataType === "olap" ? false : true,
        sortOrder: this.parent.dataType === "olap" ? "None" : "Ascending",
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        cssClass: this.parent.cssClass,
        nodeChecked: this.nodeChecked.bind(this),
        nodeClicked: this.addNode.bind(this),
        keyPress: this.addNode.bind(this),
        drawNode: this.updateTreeNode.bind(this),
        nodeExpanding: this.updateNodeIcon.bind(this),
        nodeCollapsed: this.updateNodeIcon.bind(this),
        nodeSelected: function(args) {
          removeClass([args.node], "e-active");
          args.cancel = true;
        }
      });
      this.fieldTable.isStringTemplate = true;
      this.fieldTable.appendTo(treeViewContainer);
      return editorTreeWrapper;
    };
    TreeViewRenderer2.prototype.textChange = function(e) {
      this.parent.pivotCommon.eventBase.searchTreeNodes(e, this.fieldTable, true);
      var promptDiv;
      var treeOuterDiv;
      if (this.parent.isAdaptive) {
        promptDiv = this.fieldDialog.element.querySelector("." + EMPTY_MEMBER_CLASS);
      } else {
        promptDiv = this.parentElement.querySelector("." + EMPTY_MEMBER_CLASS);
        treeOuterDiv = this.parentElement.querySelector("." + TREE_CONTAINER);
      }
      var liList = [].slice.call(this.fieldTable.element.querySelectorAll("li"));
      var disabledList = [].slice.call(this.fieldTable.element.querySelectorAll("li." + ICON_DISABLE));
      if (liList.length === disabledList.length) {
        removeClass([promptDiv], ICON_DISABLE);
        if (!this.parent.isAdaptive) {
          addClass([treeOuterDiv], ICON_DISABLE);
          removeClass([treeOuterDiv], FIELD_LIST_TREE_OUTER_DIV_SEARCH_CLASS);
        }
      } else {
        addClass([promptDiv], ICON_DISABLE);
        if (!this.parent.isAdaptive) {
          removeClass([treeOuterDiv], ICON_DISABLE);
          addClass([treeOuterDiv], FIELD_LIST_TREE_OUTER_DIV_SEARCH_CLASS);
        }
      }
      this.isSearching = disabledList.length > 0 ? true : false;
      this.nonSearchList = disabledList;
      if (this.parent.dataType === "olap") {
        this.parentIDs = [];
        for (var i = 0; i < liList.length; i++) {
          if (liList[i].classList.contains("e-level-1")) {
            var id = liList[i].getAttribute("data-uid");
            this.parentIDs.push(id);
          }
        }
      }
    };
    TreeViewRenderer2.prototype.dragStart = function(args) {
      var _this = this;
      if (args.event.target.classList.contains(DRAG_CLASS) && !args.event.target.classList.contains(DRAG_DISABLE_CLASS)) {
        var fieldInfo = PivotUtil.getFieldInfo(args.draggedNode.getAttribute("data-uid"), this.parent);
        var dragEventArgs = {
          fieldName: fieldInfo.fieldName,
          fieldItem: fieldInfo.fieldItem,
          axis: fieldInfo.axis,
          dataSourceSettings: this.parent.dataSourceSettings,
          cancel: false
        };
        var control = this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;
        control.trigger(fieldDragStart, dragEventArgs, function(observedArgs) {
          if (!observedArgs.cancel) {
            _this.parent.isDragging = true;
            addClass([args.draggedNode.querySelector("." + LIST_TEXT_CLASS)], SELECTED_NODE_CLASS);
            var data = void 0;
            if (_this.parent.dataType === "olap") {
              data = _this.parent.olapEngineModule.fieldList[args.draggedNode.getAttribute("data-uid")];
            } else {
              data = _this.parent.engineModule.fieldList[args.draggedNode.getAttribute("data-uid")];
            }
            var axis = [ROW_AXIS_CLASS, COLUMN_AXIS_CLASS, FILTER_AXIS_CLASS];
            if (data && data.aggregateType === "CalculatedField") {
              for (var _i = 0, axis_1 = axis; _i < axis_1.length; _i++) {
                var axisContent = axis_1[_i];
                addClass([_this.parentElement.querySelector("." + axisContent)], NO_DRAG_CLASS);
              }
            }
            var dragItem = args.clonedNode;
            if (dragItem && (_this.parent.getModuleName() === "pivotfieldlist" && _this.parent.renderMode) === "Popup") {
              dragItem.style.zIndex = (_this.parent.dialogRenderer.fieldListDialog.zIndex + 1).toString();
            }
          } else {
            _this.parent.isDragging = false;
            args.cancel = true;
          }
        });
      } else {
        this.parent.isDragging = false;
        args.cancel = true;
      }
    };
    TreeViewRenderer2.prototype.dragStop = function(args) {
      args.cancel = true;
      this.parent.isDragging = false;
      var axis = [ROW_AXIS_CLASS, COLUMN_AXIS_CLASS, FILTER_AXIS_CLASS];
      for (var _i = 0, axis_2 = axis; _i < axis_2.length; _i++) {
        var axisElement = axis_2[_i];
        removeClass([this.parentElement.querySelector("." + axisElement)], NO_DRAG_CLASS);
      }
      removeClass([args.draggedNode.querySelector("." + LIST_TEXT_CLASS)], SELECTED_NODE_CLASS);
      if (this.parent.pivotCommon.filterDialog.dialogPopUp) {
        this.parent.pivotCommon.filterDialog.dialogPopUp.close();
      }
      var fieldName = args.draggedNodeData.id.toString();
      if (!this.isNodeDropped(args, fieldName)) {
        return;
      }
      var list = this.parent.pivotFieldList;
      var selectedNode = list[fieldName];
      this.parent.pivotCommon.dataSourceUpdate.control = this.parent.getModuleName() === "pivotview" ? this.parent : this.parent.isPopupView && this.parent.pivotGridModule ? this.parent.pivotGridModule : this.parent;
      if (this.parent.pivotCommon.nodeStateModified.onStateModified(args, fieldName)) {
        if (this.parent.isDeferLayoutUpdate || this.parent.pivotGridModule && this.parent.pivotGridModule.pivotDeferLayoutUpdate) {
          selectedNode.isSelected = true;
          this.updateDataSource();
        } else {
          this.parent.updateDataSource();
        }
        var parent_1 = this.parent;
        parent_1.axisFieldModule.render();
      }
    };
    TreeViewRenderer2.prototype.isNodeDropped = function(args, targetID) {
      var isDropped = true;
      if (args.draggedNodeData.isChecked === "true") {
        var target = this.getButton(targetID);
        var axisPanel = closest(target, "." + DROPPABLE_CLASS);
        var droppableElement = closest(args.target, "." + DROPPABLE_CLASS);
        if (target && axisPanel === droppableElement) {
          var pivotButtons = [].slice.call(axisPanel.querySelectorAll("." + PIVOT_BUTTON_CLASS));
          var dropTarget = closest(args.target, "." + PIVOT_BUTTON_WRAPPER_CLASS);
          var sourcePosition = void 0;
          var dropPosition = -1;
          for (var i = 0, n = pivotButtons.length; i < n; i++) {
            if (pivotButtons[i].id === target.id) {
              sourcePosition = i;
            }
            if (dropTarget) {
              var droppableButton = dropTarget.querySelector("." + PIVOT_BUTTON_CLASS);
              if (pivotButtons[i].id === droppableButton.id) {
                dropPosition = i;
              }
            }
          }
          if (sourcePosition === dropPosition || sourcePosition === pivotButtons.length - 1 && dropPosition === -1) {
            var parentElement = document.getElementById(this.parent.element.id + "_Container");
            removeClass([].slice.call(parentElement.querySelectorAll("." + DROP_INDICATOR_CLASS)), INDICATOR_HOVER_CLASS);
            isDropped = false;
          }
        }
      }
      return isDropped;
    };
    TreeViewRenderer2.prototype.getButton = function(fieldName) {
      var wrapperElement = document.getElementById(this.parent.element.id + "_Container");
      var pivotButtons = [].slice.call(wrapperElement.querySelectorAll("." + PIVOT_BUTTON_CLASS));
      var buttonElement;
      for (var i = 0, n = pivotButtons.length; i < n; i++) {
        if (pivotButtons[i].getAttribute("data-uid") === fieldName) {
          buttonElement = pivotButtons[i];
          break;
        }
      }
      return buttonElement;
    };
    TreeViewRenderer2.prototype.nodeChecked = function(args) {
      if (this.isSpaceKey) {
        var node = closest(args.node, "." + TEXT_CONTENT_CLASS);
        if (!isNullOrUndefined(node)) {
          var li = closest(node, "li");
          var id = li.getAttribute("data-uid");
          if (this.parent.isAdaptive) {
            this.addNode(void 0, id, args.action === "check", node);
          } else {
            this.nodeStateChange(void 0, id, args.action === "check", node);
          }
        }
      }
      this.isSpaceKey = false;
    };
    TreeViewRenderer2.prototype.nodeStateChange = function(args, id, isChecked, node) {
      var _this = this;
      node = isNullOrUndefined(node) ? args.node : node;
      id = isNullOrUndefined(id) ? node.getAttribute("data-uid") : id;
      if (this.parent.pivotCommon.filterDialog.dialogPopUp) {
        this.parent.pivotCommon.filterDialog.dialogPopUp.close();
      }
      var list = this.parent.pivotFieldList;
      var selectedNode = list[id];
      if (!isNullOrUndefined(args)) {
        this.isSpaceKey = args.event.action && args.event.action === "space";
        if (isNullOrUndefined(selectedNode) || node.classList.contains(ICON_DISABLE) || args.event.target && (args.event.target.classList.contains(COLLAPSIBLE) || args.event.target.classList.contains(EXPANDABLE)) || args.event.action && args.event.action !== "enter") {
          return;
        }
        isChecked = false;
        var getNodeDetails = this.fieldTable.getNode(node);
        if (args.event && args.event.target && !args.event.target.closest("." + CHECKBOX_CONTAINER)) {
          if (getNodeDetails.isChecked === "true") {
            this.fieldTable.uncheckAll([node]);
            isChecked = false;
          } else {
            this.fieldTable.checkAll([node]);
            isChecked = true;
          }
        } else {
          isChecked = getNodeDetails.isChecked === "true";
        }
      }
      var control = this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;
      var fieldInfo = PivotUtil.getFieldInfo(id, this.parent);
      var parentNode = node.closest("." + FIELD_TREE_PARENT);
      if (isChecked) {
        var eventdrop = {
          fieldName: id,
          dropField: fieldInfo.fieldItem,
          dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings),
          dropAxis: selectedNode.type === "number" || selectedNode.type === "CalculatedField" && selectedNode.formula && selectedNode.formula.indexOf("Measure") > -1 && this.parent.dataType === "olap" ? "values" : "rows",
          dropPosition: fieldInfo.position,
          draggedAxis: "fieldlist",
          cancel: false
        };
        control.trigger(fieldDrop, eventdrop, function(observedArgs) {
          if (!observedArgs.cancel) {
            addClass([node.querySelector("." + LIST_TEXT_CLASS)], LIST_SELECT_CLASS);
            if (parentNode) {
              addClass([parentNode.querySelector("." + LIST_TEXT_CLASS)], LIST_SELECT_CLASS);
            }
            _this.updateSelectedNodes(node, "check");
            var addNode = _this.parent.pivotCommon.dataSourceUpdate.getNewField(id, fieldInfo.fieldItem);
            _this.updateReportSettings(addNode, observedArgs);
            _this.updateNodeStateChange(id, selectedNode, isChecked);
          } else {
            _this.updateCheckState(selectedNode, "check");
          }
        });
      } else {
        var removeFieldArgs = {
          cancel: false,
          fieldName: id,
          dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings),
          fieldItem: fieldInfo.fieldItem,
          axis: fieldInfo.axis
        };
        control.trigger(fieldRemove, removeFieldArgs, function(observedArgs) {
          if (!observedArgs.cancel) {
            removeClass([node.querySelector("." + LIST_TEXT_CLASS)], LIST_SELECT_CLASS);
            if (parentNode && isNullOrUndefined(parentNode.querySelector("." + FIELD_TREE_CHILD + " ." + NODE_CHECK_CLASS))) {
              removeClass([parentNode.querySelector("." + LIST_TEXT_CLASS)], LIST_SELECT_CLASS);
            }
            _this.updateSelectedNodes(node, "uncheck");
            _this.parent.pivotCommon.dataSourceUpdate.removeFieldFromReport(id);
            if (_this.parent.dataType === "pivot" && _this.parent.showValuesButton && _this.parent.dataSourceSettings.values.length > 1 && fieldInfo && fieldInfo.position < _this.parent.dataSourceSettings.valueIndex && (_this.parent.dataSourceSettings.valueAxis === "row" && fieldInfo.axis === "rows" || _this.parent.dataSourceSettings.valueAxis === "column" && fieldInfo.axis === "columns")) {
              control.setProperties({
                dataSourceSettings: {
                  valueIndex: _this.parent.dataSourceSettings.valueIndex - 1
                }
              }, true);
            }
            if (_this.parent.dataType === "olap" && _this.parent.dataSourceSettings.values.length === 0) {
              _this.parent.pivotCommon.dataSourceUpdate.removeFieldFromReport("[Measures]");
            }
            _this.updateNodeStateChange(id, selectedNode, isChecked);
          } else {
            _this.updateCheckState(selectedNode, "uncheck");
          }
        });
      }
    };
    TreeViewRenderer2.prototype.updateReportSettings = function(newField, dropArgs) {
      var dropPosition = dropArgs.dropPosition;
      var dropClass = dropArgs.dropAxis;
      if (this.parent.dataType === "pivot" && this.parent.showValuesButton && this.parent.dataSourceSettings.values.length > 1) {
        var dropAxisFields = this.parent.dataSourceSettings.valueAxis === "row" && dropClass === "rows" ? this.parent.dataSourceSettings.rows : this.parent.dataSourceSettings.valueAxis === "column" && dropClass === "columns" ? this.parent.dataSourceSettings.columns : void 0;
        if (!isNullOrUndefined(dropAxisFields)) {
          if (dropPosition === -1 && this.parent.dataSourceSettings.valueIndex === -1) {
            this.parent.setProperties({
              dataSourceSettings: {
                valueIndex: dropAxisFields.length
              }
            }, true);
          } else if (dropPosition > -1 && dropPosition <= this.parent.dataSourceSettings.valueIndex) {
            this.parent.setProperties({
              dataSourceSettings: {
                valueIndex: this.parent.dataSourceSettings.valueIndex + 1
              }
            }, true);
          } else if (this.parent.dataSourceSettings.valueIndex > -1 && dropPosition > this.parent.dataSourceSettings.valueIndex) {
            dropPosition = dropPosition - 1;
          }
        }
      }
      switch (dropClass) {
        case "filters":
          if (dropPosition !== -1) {
            this.parent.dataSourceSettings.filters.splice(dropPosition, 0, newField);
          } else {
            this.parent.dataSourceSettings.filters.push(newField);
          }
          break;
        case "rows":
          if (dropPosition !== -1) {
            this.parent.dataSourceSettings.rows.splice(dropPosition, 0, newField);
          } else {
            this.parent.dataSourceSettings.rows.push(newField);
          }
          break;
        case "columns":
          if (dropPosition !== -1) {
            this.parent.dataSourceSettings.columns.splice(dropPosition, 0, newField);
          } else {
            this.parent.dataSourceSettings.columns.push(newField);
          }
          break;
        case "values":
          if (dropPosition !== -1) {
            this.parent.dataSourceSettings.values.splice(dropPosition, 0, newField);
          } else {
            this.parent.dataSourceSettings.values.push(newField);
          }
          if (this.parent.dataType === "olap" && this.parent.olapEngineModule && !this.parent.olapEngineModule.isMeasureAvail && !(this.parent.dataSourceSettings.values.length > 1)) {
            var measureField = {
              name: "[Measures]",
              caption: "Measures",
              baseField: void 0,
              baseItem: void 0
            };
            var fieldAxis = this.parent.dataSourceSettings.valueAxis === "row" ? this.parent.dataSourceSettings.rows : this.parent.dataSourceSettings.columns;
            fieldAxis.push(measureField);
          }
          break;
      }
    };
    TreeViewRenderer2.prototype.updateCheckState = function(selectedNode, action) {
      var chkState = this.fieldTable.element.querySelectorAll("." + CHECKBOX_CONTAINER);
      var innerText = this.fieldTable.element.querySelectorAll(".e-list-text");
      for (var i = 0; i < chkState.length; i++) {
        if (selectedNode.caption === innerText[i].textContent) {
          if (action === "check") {
            this.fieldTable.uncheckAll([selectedNode["id"]]);
          } else {
            this.fieldTable.checkAll([selectedNode["id"]]);
          }
        }
      }
    };
    TreeViewRenderer2.prototype.updateNodeStateChange = function(id, selectedNode, isChecked) {
      if (this.parent.isDeferLayoutUpdate === false || this.parent.pivotGridModule && this.parent.pivotGridModule.pivotDeferLayoutUpdate === false) {
        this.parent.updateDataSource(true);
      } else {
        selectedNode.isSelected = isChecked;
        if (this.parent.dataType === "olap") {
          this.parent.olapEngineModule.updateFieldlistData(id, isChecked);
        }
        this.updateDataSource();
      }
      var selectedLi = this.treeViewElement.querySelector('[data-uid="' + id + '"]');
      selectedLi.focus();
      removeClass([selectedLi], "e-hover");
      var parent = this.parent;
      setTimeout(function() {
        parent.axisFieldModule.render();
      });
    };
    TreeViewRenderer2.prototype.updateSelectedNodes = function(li, state) {
      if (li && li.querySelector("ul")) {
        for (var _i = 0, _a = [].slice.call(li.querySelectorAll("li")); _i < _a.length; _i++) {
          var element = _a[_i];
          if (state === "check") {
            addClass([element.querySelector("." + LIST_TEXT_CLASS)], LIST_SELECT_CLASS);
          } else {
            removeClass([element.querySelector("." + LIST_TEXT_CLASS)], LIST_SELECT_CLASS);
          }
        }
      }
    };
    TreeViewRenderer2.prototype.updateDataSource = function() {
      if (this.parent.isPopupView) {
        if (this.parent.dataType === "olap") {
          this.parent.pivotGridModule.olapEngineModule = this.parent.olapEngineModule;
        } else {
          this.parent.pivotGridModule.engineModule = this.parent.engineModule;
        }
        this.parent.pivotGridModule.setProperties({
          dataSourceSettings: this.parent.dataSourceSettings.properties
        }, true);
        this.parent.pivotGridModule.notify(uiUpdate, this);
      } else {
        this.parent.triggerPopulateEvent();
      }
    };
    TreeViewRenderer2.prototype.addNode = function(args, id, isChecked, node) {
      var _this = this;
      node = isNullOrUndefined(node) ? args.node : node;
      id = isNullOrUndefined(id) ? node.getAttribute("data-uid") : id;
      var list = this.parent.pivotFieldList;
      var selectedNode = list[id];
      if (!isNullOrUndefined(args)) {
        this.isSpaceKey = args.event.key && args.event.key === " ";
        if (isNullOrUndefined(selectedNode) || args.node.classList.contains(ICON_DISABLE) || args.event.target && (args.event.target.classList.contains(COLLAPSIBLE) || args.event.target.classList.contains(EXPANDABLE)) || args.event.key && args.event.key !== "Enter") {
          return;
        }
        isChecked = false;
        var getNodeDetails = this.fieldTable.getNode(args.node);
        if (args.event && args.event.target && !args.event.target.classList.contains(CHECK_BOX_FRAME_CLASS)) {
          if (getNodeDetails.isChecked === "true") {
            this.fieldTable.uncheckAll([args.node]);
            isChecked = false;
          } else {
            this.fieldTable.checkAll([args.node]);
            isChecked = true;
          }
        } else {
          isChecked = getNodeDetails.isChecked === "true";
        }
      }
      var fieldInfo = PivotUtil.getFieldInfo(selectedNode.id.toString(), this.parent);
      var control = this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;
      if (isChecked) {
        var axis = ["filters", "columns", "rows", "values"];
        var eventdrop = {
          fieldName: fieldInfo.fieldName,
          dropField: fieldInfo.fieldItem,
          dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings),
          dropAxis: axis[this.parent.dialogRenderer.adaptiveElement.selectedItem],
          draggedAxis: "fieldlist",
          cancel: false
        };
        control.trigger(fieldDrop, eventdrop, function(observedArgs) {
          if (!observedArgs.cancel) {
            _this.selectedNodes.push(selectedNode.id.toString());
          } else {
            _this.updateCheckState(selectedNode, "check");
          }
        });
      } else {
        var removeFieldArgs = {
          cancel: false,
          fieldName: fieldInfo.fieldName,
          dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings),
          fieldItem: fieldInfo.fieldItem,
          axis: fieldInfo.axis
        };
        control.trigger(fieldRemove, removeFieldArgs, function(observedArgs) {
          if (!observedArgs.cancel) {
            var count = _this.selectedNodes.length;
            while (count--) {
              if (_this.selectedNodes[count] === selectedNode.id.toString()) {
                _this.selectedNodes.splice(count, 1);
                break;
              }
            }
          } else {
            _this.updateCheckState(selectedNode, "uncheck");
          }
        });
      }
    };
    TreeViewRenderer2.prototype.refreshTreeView = function() {
      if (this.fieldTable) {
        var treeData = this.getUpdatedData();
        this.fieldTable.fields = {
          dataSource: treeData,
          id: "id",
          text: "caption",
          isChecked: "isSelected",
          parentID: "pid",
          iconCss: "spriteCssClass"
        };
        this.fieldTable.dataBind();
      }
    };
    TreeViewRenderer2.prototype.getUpdatedData = function() {
      var treeData = this.getTreeData();
      var expandedNodes = this.fieldTable.expandedNodes;
      this.updateExpandedNodes(treeData, expandedNodes);
      return this.applySorting(treeData, this.fieldListSort);
    };
    TreeViewRenderer2.prototype.getTreeData = function(axis) {
      var data = [];
      if (this.parent.dataType === "olap") {
        data = this.getOlapTreeData(axis);
      } else {
        var keys = this.parent.pivotFieldList ? Object.keys(this.parent.pivotFieldList) : [];
        var treeDataInfo = {};
        for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
          var key = keys_2[_i];
          var member = this.parent.pivotFieldList[key];
          treeDataInfo[key] = {
            id: member.id,
            pid: member.pid,
            caption: member.caption,
            isSelected: member.isSelected
          };
          if (!isNullOrUndefined(member.pid) && !treeDataInfo[key].hasChildren) {
            var parentId = member.pid + "_group_name";
            treeDataInfo[key].pid = parentId;
            treeDataInfo[parentId] = {
              id: parentId,
              caption: member.pid,
              isSelected: treeDataInfo[parentId] && treeDataInfo[parentId].isSelected ? treeDataInfo[parentId].isSelected : member.isSelected,
              hasChildren: true
            };
          }
        }
        if (this.parent.isAdaptive) {
          var fields = [this.parent.dataSourceSettings.filters, this.parent.dataSourceSettings.columns, this.parent.dataSourceSettings.rows, this.parent.dataSourceSettings.values];
          var currentFieldSet = fields[axis];
          var len = keys.length;
          while (len--) {
            treeDataInfo[keys[len]].isSelected = false;
          }
          for (var _a = 0, currentFieldSet_1 = currentFieldSet; _a < currentFieldSet_1.length; _a++) {
            var item = currentFieldSet_1[_a];
            treeDataInfo[item.name].isSelected = true;
          }
        }
        var members = Object.keys(treeDataInfo);
        for (var _b = 0, members_1 = members; _b < members_1.length; _b++) {
          var member = members_1[_b];
          var obj = treeDataInfo[member];
          data.push(obj);
        }
      }
      return data;
    };
    TreeViewRenderer2.prototype.getOlapTreeData = function(axis) {
      var data = [];
      var fieldListData = this.parent.olapEngineModule.fieldListData ? this.parent.olapEngineModule.fieldListData : [];
      if (this.parent.isAdaptive) {
        var fields = [this.parent.dataSourceSettings.filters, this.parent.dataSourceSettings.columns, this.parent.dataSourceSettings.rows, this.parent.dataSourceSettings.values];
        var currentFieldSet = fields[axis];
        var i = 0;
        while (i < fieldListData.length) {
          var item = fieldListData[i];
          var framedSet = void 0;
          if (axis === 3) {
            if (item.id.toLowerCase() !== "[measures]" && (item.id.toLowerCase().indexOf("[measures]") === 0 || item.spriteCssClass && item.spriteCssClass.indexOf("e-measureCDB") !== -1) || item.id.toLowerCase() === "[calculated members].[_0]" || item.spriteCssClass && item.spriteCssClass.indexOf("e-calc-measure-icon") !== -1) {
              framedSet = {
                id: item.id,
                caption: item.caption,
                hasChildren: item.hasChildren,
                type: item.type,
                aggregateType: item.aggregateType,
                isSelected: item.isSelected,
                pid: item.pid,
                spriteCssClass: item.spriteCssClass
              };
              framedSet.isSelected = false;
              if (framedSet.spriteCssClass && framedSet.spriteCssClass.indexOf("e-measureCDB") !== -1) {
                framedSet.spriteCssClass = framedSet.spriteCssClass.replace("e-folderCDB-icon", "e-measureGroupCDB-icon");
                framedSet.pid = void 0;
              }
              for (var _i = 0, currentFieldSet_2 = currentFieldSet; _i < currentFieldSet_2.length; _i++) {
                var field = currentFieldSet_2[_i];
                if (framedSet.id === field.name) {
                  framedSet.isSelected = true;
                  break;
                }
              }
              data.push(framedSet);
            }
          } else {
            if (!(item.id.toLowerCase().indexOf("[measures]") === 0) && !(item.spriteCssClass && item.spriteCssClass.indexOf("e-measureCDB") !== -1) && !(item.spriteCssClass && item.spriteCssClass.indexOf("e-calc-measure-icon") !== -1)) {
              framedSet = {
                id: item.id,
                caption: item.caption,
                hasChildren: item.hasChildren,
                type: item.type,
                aggregateType: item.aggregateType,
                isSelected: item.isSelected,
                pid: item.pid,
                spriteCssClass: item.spriteCssClass
              };
              framedSet.isSelected = false;
              for (var _a = 0, currentFieldSet_3 = currentFieldSet; _a < currentFieldSet_3.length; _a++) {
                var item_1 = currentFieldSet_3[_a];
                if (framedSet.id === item_1.name) {
                  framedSet.isSelected = true;
                  break;
                }
              }
              data.push(framedSet);
            }
          }
          i++;
        }
      } else {
        data = isNullOrUndefined(this.parent.olapEngineModule.fieldListData) ? [] : PivotUtil.getClonedData(this.parent.olapEngineModule.fieldListData);
      }
      return data;
    };
    TreeViewRenderer2.prototype.updateExpandedNodes = function(data, expandedNodes) {
      if (expandedNodes.length > 0) {
        var i = 0;
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
          var field = data_1[_i];
          if (expandedNodes.indexOf(field.id) > -1) {
            i++;
            field.expanded = true;
            field.spriteCssClass = field.spriteCssClass && field.spriteCssClass.toString().indexOf("e-folderCDB-icon") > -1 ? field.spriteCssClass.toString().replace("e-folderCDB-icon", "e-folderCDB-open-icon") : field.spriteCssClass;
            if (i === expandedNodes.length) {
              break;
            }
          }
        }
      }
    };
    TreeViewRenderer2.prototype.updateSorting = function(args) {
      var target = args.target;
      var option = target.getAttribute("data-sort");
      this.parent.actionObj.actionName = sortFieldTree;
      if (this.parent.actionBeginMethod()) {
        return;
      }
      try {
        if (target.className.indexOf("e-selected") === -1) {
          switch (option) {
            case "None":
              this.fieldListSort = "None";
              addClass([target], "e-selected");
              removeClass([this.parentElement.querySelector(".e-sort-ascend")], "e-selected");
              removeClass([this.parentElement.querySelector(".e-sort-descend")], "e-selected");
              break;
            case "Ascend":
              this.fieldListSort = "Ascend";
              addClass([target], "e-selected");
              removeClass([this.parentElement.querySelector(".e-sort-none")], "e-selected");
              removeClass([this.parentElement.querySelector(".e-sort-descend")], "e-selected");
              break;
            case "Descend":
              this.fieldListSort = "Descend";
              addClass([target], "e-selected");
              removeClass([this.parentElement.querySelector(".e-sort-ascend")], "e-selected");
              removeClass([this.parentElement.querySelector(".e-sort-none")], "e-selected");
              break;
          }
          this.refreshTreeView();
        }
      } catch (execption) {
        this.parent.actionFailureMethod(execption);
      }
      this.parent.actionObj.actionName = this.parent.getActionCompleteName();
      if (this.parent.actionObj.actionName) {
        this.parent.actionCompleteMethod();
      }
    };
    TreeViewRenderer2.prototype.applySorting = function(treeData, sortOrder) {
      if (treeData.length > 0) {
        if (this.parent.dataType === "olap") {
          var measure = void 0;
          var calcMember = void 0;
          if (this.parent.dataSourceSettings.calculatedFieldSettings.length > 0 && treeData[0].id.toLowerCase() === "[calculated members].[_0]") {
            calcMember = treeData[0];
            measure = treeData[1];
            treeData.splice(0, 2);
          } else {
            measure = treeData[0];
            treeData.splice(0, 1);
          }
          treeData = sortOrder === "Ascend" ? treeData.sort(function(a, b) {
            return a.caption > b.caption ? 1 : b.caption > a.caption ? -1 : 0;
          }) : sortOrder === "Descend" ? treeData.sort(function(a, b) {
            return a.caption < b.caption ? 1 : b.caption < a.caption ? -1 : 0;
          }) : treeData;
          if (calcMember) {
            treeData.splice(0, 0, calcMember, measure);
          } else {
            treeData.splice(0, 0, measure);
          }
        } else {
          this.fieldTable.sortOrder = sortOrder === "Ascend" ? "Ascending" : sortOrder === "Descend" ? "Descending" : "None";
        }
      }
      return treeData;
    };
    TreeViewRenderer2.prototype.onFieldAdd = function() {
      this.parent.dialogRenderer.updateDataSource(this.selectedNodes);
      this.closeTreeDialog();
    };
    TreeViewRenderer2.prototype.closeTreeDialog = function() {
      this.selectedNodes = [];
      this.fieldDialog.hide();
      this.fieldDialog.destroy();
      if (document.getElementById(this.parent.element.id + "_FieldListTreeView")) {
        remove(document.getElementById(this.parent.element.id + "_FieldListTreeView"));
      }
      this.fieldDialog = null;
    };
    TreeViewRenderer2.prototype.keyPress = function(e) {
      if (e.keyCode === 13 && e.target) {
        e.target.click();
        e.preventDefault();
        return;
      }
    };
    TreeViewRenderer2.prototype.wireFieldListEvent = function(element) {
      EventHandler.add(element, "keydown", this.keyPress, this);
      EventHandler.add(element, "click", this.updateSorting, this);
    };
    TreeViewRenderer2.prototype.unWireFieldListEvent = function(element) {
      EventHandler.remove(element, "keydown", this.keyPress);
      EventHandler.remove(element, "click", this.updateSorting);
    };
    TreeViewRenderer2.prototype.addEventListener = function() {
      this.parent.on(treeViewUpdate, this.refreshTreeView, this);
    };
    TreeViewRenderer2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(treeViewUpdate, this.refreshTreeView);
    };
    TreeViewRenderer2.prototype.destroy = function() {
      this.removeEventListener();
      if (this.editorSearch && !this.editorSearch.isDestroyed) {
        this.editorSearch.destroy();
        this.editorSearch = null;
      }
      if (this.fieldSearch && !this.fieldSearch.isDestroyed) {
        this.fieldSearch.destroy();
        this.fieldSearch = null;
      }
      if (this.fieldTable && !this.fieldTable.isDestroyed) {
        this.fieldTable.destroy();
        this.fieldTable = null;
      }
      if (this.fieldDialog && !this.fieldDialog.isDestroyed) {
        this.fieldDialog.destroy();
        this.fieldDialog = null;
      }
    };
    return TreeViewRenderer2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/pivotfieldlist/renderer/axis-table-renderer.js
var AxisTableRenderer = (
  /** @class */
  function() {
    function AxisTableRenderer2(parent) {
      this.parent = parent;
    }
    AxisTableRenderer2.prototype.render = function() {
      if (!this.parent.isAdaptive) {
        var axisTable = createElement("div", {
          className: AXIS_TABLE_CLASS + " " + (this.parent.dataType === "olap" ? OLAP_AXIS_TABLE_CLASS : "")
        });
        this.leftAxisPanel = createElement("div", {
          className: LEFT_AXIS_PANEL_CLASS
        });
        this.rightAxisPanel = createElement("div", {
          className: RIGHT_AXIS_PANEL_CLASS
        });
        this.parent.dialogRenderer.parentElement.appendChild(axisTable);
        axisTable.appendChild(this.leftAxisPanel);
        axisTable.appendChild(this.rightAxisPanel);
        this.axisTable = axisTable;
        this.renderAxisTable();
      }
      this.parent.axisFieldModule.render();
    };
    AxisTableRenderer2.prototype.renderAxisTable = function() {
      var fieldLabels = ["filters", "rows", "columns", "values"];
      for (var len = 0, lnt = fieldLabels.length; len < lnt; len++) {
        var axis = createElement("div", {
          className: FIELD_LIST_CLASS + "-" + fieldLabels[len]
        });
        var axisTitleWrapper = createElement("div", {
          className: AXIS_ICON_CLASS + "-container"
        });
        var axisTitle = createElement("div", {
          className: AXIS_HEADER_CLASS,
          attrs: {
            title: this.parent.localeObj.getConstant(fieldLabels[len])
          }
        });
        axisTitle.innerText = this.parent.localeObj.getConstant(fieldLabels[len]);
        axisTitleWrapper.appendChild(this.getIconupdate(fieldLabels[len]));
        axisTitleWrapper.appendChild(axisTitle);
        var axisContent = createElement("div", {
          className: AXIS_CONTENT_CLASS + " e-" + fieldLabels[len]
        });
        var localePrompt = void 0;
        if (fieldLabels[len] === "rows") {
          localePrompt = this.parent.localeObj.getConstant("dropRowPrompt");
        } else if (fieldLabels[len] === "columns") {
          localePrompt = this.parent.localeObj.getConstant("dropColPrompt");
        } else if (fieldLabels[len] === "values") {
          localePrompt = this.parent.localeObj.getConstant("dropValPrompt");
        } else {
          localePrompt = this.parent.localeObj.getConstant("dropFilterPrompt");
        }
        var axisPrompt = createElement("span", {
          className: AXIS_PROMPT_CLASS
        });
        axisPrompt.innerText = localePrompt;
        new Droppable(axisContent, {});
        axis.appendChild(axisTitleWrapper);
        axis.appendChild(axisContent);
        axis.appendChild(axisPrompt);
        if (len <= 1) {
          this.leftAxisPanel.appendChild(axis);
        } else {
          this.rightAxisPanel.appendChild(axis);
        }
        this.unWireEvent(axisContent);
        this.wireEvent(axisContent);
      }
    };
    AxisTableRenderer2.prototype.getIconupdate = function(axis) {
      var axisWrapper = createElement("span", {
        attrs: {
          "tabindex": "-1",
          "aria-disabled": "false"
        },
        className: AXIS_ICON_CLASS + "-icon-container"
      });
      var axisElement = createElement("span", {
        attrs: {
          "tabindex": "-1",
          "aria-disabled": "false"
        },
        className: ICON + " " + AXIS_ICON_CLASS + "-" + axis
      });
      axisWrapper.appendChild(axisElement);
      return axisWrapper;
    };
    AxisTableRenderer2.prototype.wireEvent = function(element) {
      EventHandler.add(element, "mouseover", this.updateDropIndicator, this);
      EventHandler.add(element, "mouseleave", this.updateDropIndicator, this);
    };
    AxisTableRenderer2.prototype.unWireEvent = function(element) {
      EventHandler.remove(element, "mouseover", this.updateDropIndicator);
      EventHandler.remove(element, "mouseleave", this.updateDropIndicator);
    };
    AxisTableRenderer2.prototype.updateDropIndicator = function(e) {
      var parentElement = this.parent.dialogRenderer.parentElement;
      if (this.parent.isDragging && e.target.classList.contains(AXIS_CONTENT_CLASS) && e.type === "mouseover") {
        removeClass([].slice.call(parentElement.querySelectorAll("." + DROP_INDICATOR_CLASS)), INDICATOR_HOVER_CLASS);
        removeClass([].slice.call(parentElement.querySelectorAll("." + DROP_INDICATOR_CLASS + "-last")), INDICATOR_HOVER_CLASS);
        var element = [].slice.call(e.target.querySelectorAll("." + PIVOT_BUTTON_WRAPPER_CLASS));
        if (element.length > 0) {
          addClass([element[element.length - 1].querySelector("." + DROP_INDICATOR_CLASS + "-last")], INDICATOR_HOVER_CLASS);
        }
      } else if (!this.parent.isDragging || !e.target.classList.contains(DROPPABLE_CLASS) && e.type === "mouseleave") {
        removeClass([].slice.call(parentElement.querySelectorAll("." + DROP_INDICATOR_CLASS)), INDICATOR_HOVER_CLASS);
        removeClass([].slice.call(parentElement.querySelectorAll("." + DROP_INDICATOR_CLASS + "-last")), INDICATOR_HOVER_CLASS);
      }
    };
    return AxisTableRenderer2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/common/actions/pivot-button.js
var PivotButton = (
  /** @class */
  function() {
    function PivotButton2(parent) {
      this.parent = parent;
      this.menuOption = new AggregateMenu(this.parent);
      this.parent.pivotButtonModule = this;
      this.addEventListener();
      if (this.parent instanceof PivotFieldList) {
        this.axisField = new AxisFieldRenderer(this.parent);
      }
      this.isDestroyed = false;
    }
    PivotButton2.prototype.renderPivotButton = function(args) {
      var _this = this;
      var _a;
      this.parentElement = this.parent.getModuleName() === "pivotview" ? this.parent.element : document.getElementById(this.parent.element.id + "_Container");
      var currentAxisElements = Array.prototype.slice.call(this.parentElement.querySelectorAll(".e-group-" + args.axis));
      var axisElement;
      if (args.axis === "rows" && this.parent.showGroupingBar && this.parent.groupingBarModule && isNullOrUndefined(this.parentElement.querySelector("." + GROUP_PIVOT_ROW))) {
        currentAxisElements.push(this.parent.groupingBarModule.rowPanel);
        axisElement = this.parent.groupingBarModule.rowPanel;
      }
      var field = extend([], args.field, null, true);
      var axis = args.axis;
      var valuePos = -1;
      var showValuesButton = this.parent.dataType === "pivot" ? this.parent.getModuleName() === "pivotfieldlist" && this.parent.pivotGridModule ? this.parent.pivotGridModule.showValuesButton : this.parent.showValuesButton : false;
      if ((this.parent.dataSourceSettings.valueAxis === "row" && args.axis === "rows" || this.parent.dataSourceSettings.valueAxis === "column" && args.axis === "columns") && showValuesButton && this.parent.dataSourceSettings.values.length > 1) {
        if (isNullOrUndefined(PivotUtil.getFieldByName("[Measures]", field))) {
          var measureField = PivotUtil.getFieldByName("[Measures]", this.parent.dataSourceSettings.fieldMapping);
          var valueField = {
            name: "[Measures]",
            caption: this.parent.localeObj.getConstant("values"),
            axis: args.axis,
            showRemoveIcon: measureField && "showRemoveIcon" in measureField ? measureField.showRemoveIcon : true,
            allowDragAndDrop: measureField && "allowDragAndDrop" in measureField ? measureField.allowDragAndDrop : true
          };
          if (this.parent.dataSourceSettings.valueIndex === -1 || this.parent.dataSourceSettings.valueIndex > field.length) {
            valuePos = field.length;
            field.push(valueField);
            this.parent.setProperties({
              dataSourceSettings: {
                valueIndex: -1
              }
            }, true);
          } else {
            valuePos = this.parent.dataSourceSettings.valueIndex;
            field.splice(valuePos, 0, valueField);
          }
        }
      }
      if (this.parent.getModuleName() === "pivotfieldlist") {
        this.parentElement = document.getElementById(this.parent.element.id + "_Container");
        if (this.parentElement.querySelector("." + FIELD_LIST_CLASS + "-" + axis)) {
          var axisPrompt = this.parentElement.querySelector("." + FIELD_LIST_CLASS + "-" + axis).querySelector("." + AXIS_PROMPT_CLASS);
          if (field.length === 0) {
            removeClass([axisPrompt], ICON_DISABLE);
          } else {
            addClass([axisPrompt], ICON_DISABLE);
          }
          axisElement = this.parentElement.querySelector("." + FIELD_LIST_CLASS + "-" + axis).querySelector("." + AXIS_CONTENT_CLASS);
        } else {
          return;
        }
      } else {
        this.parentElement = this.parent.element;
        if (!isNullOrUndefined(this.parentElement.querySelector(".e-group-" + axis))) {
          axisElement = this.parentElement.querySelector(".e-group-" + axis);
        }
      }
      if (axisElement) {
        if (this.parent.getModuleName() === "pivotview" && field.length === 0) {
          for (var i = 0; i < currentAxisElements.length; i++) {
            var element = currentAxisElements[i];
            if (!element.classList.contains(GROUP_CHART_VALUE) && !element.classList.contains(GROUP_CHART_COLUMN)) {
              var axisPrompt = createElement("span", {
                className: AXIS_PROMPT_CLASS
              });
              axisPrompt.innerText = this.parent.groupingBarSettings.allowDragAndDrop ? axis === "rows" ? this.parent.localeObj.getConstant("rowAxisPrompt") : axis === "columns" ? this.parent.localeObj.getConstant("columnAxisPrompt") : axis === "values" ? this.parent.localeObj.getConstant("valueAxisPrompt") : axis === "filters" ? this.parent.localeObj.getConstant("filterAxisPrompt") : this.parent.localeObj.getConstant("allFields") : "";
              element.appendChild(axisPrompt);
            }
          }
        } else {
          for (var i = 0, cnt = field.length; i < cnt; i++) {
            var elements = this.parent.getModuleName() === "pivotfieldlist" ? [axisElement] : currentAxisElements;
            for (var j = 0; j < elements.length; j++) {
              var element = elements[j];
              if (this.parent.olapEngineModule && (this.parent.olapEngineModule.fieldList[field[i].name] || field[i].name === "[Measures]") || this.parent.engineModule) {
                var isMeasureAvail = this.parent.dataType === "olap" && (field[i].name.toLowerCase() === "[measures]" || axis === "values");
                var isMeasureFieldsAvail = this.parent.dataType === "olap" && axis === "values";
                if (!element.classList.contains(GROUP_CHART_VALUE) && !element.classList.contains(GROUP_CHART_COLUMN)) {
                  var buttonWrapper = createElement("div", {
                    className: PIVOT_BUTTON_WRAPPER_CLASS + (i === 0 && axis !== "all-fields" ? " e-first-btn" : "") + (this.parent.isTabular ? " " + TABULAR_PIVOT_BUTTON : ""),
                    attrs: {
                      "data-tag": axis + ":" + field[i].name
                    }
                  });
                  if (this.parent.isTabular) {
                    buttonWrapper.style.width = "auto";
                  }
                  var buttonCaption = field[i].caption ? field[i].caption : field[i].name;
                  buttonCaption = this.parent.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(buttonCaption) : buttonCaption;
                  var buttonElement = createElement("div", {
                    id: this.parent.element.id + "_" + field[i].name,
                    className: PIVOT_BUTTON_CLASS + " " + field[i].name.replace(/[^A-Z0-9]/ig, "") + (this.parent.isTabular ? " " + TABULAR_ROW_BUTTON : ""),
                    attrs: {
                      "data-uid": field[i].name,
                      "tabindex": this.parent.getModuleName() === "pivotview" && this.parent.grid && axis === "rows" && !element.classList.contains(GROUP_CHART_ROW) ? "-1" : "0",
                      "isvalue": i === valuePos || isMeasureAvail && !isMeasureFieldsAvail ? "true" : "false",
                      "aria-disabled": "false",
                      "aria-label": buttonCaption,
                      "data-type": this.parent.dataType === "olap" ? isMeasureFieldsAvail ? "isMeasureFieldsAvail" : isMeasureAvail ? "isMeasureAvail" : field[i].type : field[i].type,
                      "data-caption": buttonCaption,
                      "data-basefield": this.parent.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(field[i].baseField) : field[i].baseField,
                      "data-baseitem": this.parent.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(field[i].baseItem) : field[i].baseItem,
                      "role": "button"
                    }
                  });
                  var dropIndicatorElement = createElement("span", {
                    attrs: {
                      "tabindex": "-1",
                      "aria-disabled": "false"
                    },
                    className: DROP_INDICATOR_CLASS
                  });
                  var dropLastIndicatorElement = createElement("span", {
                    attrs: {
                      "tabindex": "-1",
                      "aria-disabled": "false"
                    },
                    className: DROP_INDICATOR_CLASS + "-last"
                  });
                  var dragWrapper = this.createButtonDragIcon(field[i], buttonElement);
                  var contentElement = this.createButtonText(field, i, axis, valuePos);
                  buttonElement.appendChild(contentElement);
                  if (axis !== "all-fields") {
                    if (!isMeasureAvail && !field[i].isNamedSet && !field[i].isCalculatedField) {
                      if (["filters", "values"].indexOf(axis) === -1 && valuePos !== i && !(this.parent.dataType === "olap" && (this.parent.getModuleName() === "pivotview" && this.parent.enableVirtualization || this.parent.getModuleName() === "pivotfieldlist" && this.parent.pivotGridModule !== void 0 && this.parent.pivotGridModule.enableVirtualization))) {
                        this.createSortOption(buttonElement, field[i].name, field[i]);
                      }
                      if (axis !== "values" && valuePos !== i) {
                        this.createFilterOption(buttonElement, field[i].name, axis, field[i]);
                      }
                      if (axis === "values") {
                        this.getTypeStatus(field, i, buttonElement);
                      }
                    }
                    if (field[i].isCalculatedField || field[i].type === "CalculatedField") {
                      var calcElement = createElement("span", {
                        attrs: {
                          "tabindex": "-1",
                          "aria-disabled": "false",
                          "title": this.parent.localeObj.getConstant("editCalculatedField")
                        },
                        className: ICON + " " + CALC_EDIT
                      });
                      if (this.parent.allowCalculatedField && this.parent.calculatedFieldModule && (field[i].showEditIcon || field[i].showEditIcon === void 0)) {
                        removeClass([calcElement], ICON_DISABLE);
                      } else {
                        addClass([calcElement], ICON_DISABLE);
                      }
                      buttonElement.appendChild(calcElement);
                    }
                    var removeElement = createElement("span", {
                      attrs: {
                        "tabindex": "-1",
                        "aria-disabled": "false",
                        "title": this.parent.localeObj.getConstant("remove")
                      },
                      className: ICON + " " + REMOVE_CLASS
                    });
                    if (this.parent.getModuleName() === "pivotview") {
                      if (this.parent.groupingBarSettings.showRemoveIcon && (field[i].showRemoveIcon || field[i].showRemoveIcon === void 0)) {
                        removeClass([removeElement], ICON_DISABLE);
                      } else {
                        addClass([removeElement], ICON_DISABLE);
                      }
                    } else {
                      if (field[i].showRemoveIcon || field[i].showRemoveIcon === void 0) {
                        removeClass([removeElement], ICON_DISABLE);
                      } else {
                        addClass([removeElement], ICON_DISABLE);
                      }
                    }
                    buttonElement.appendChild(removeElement);
                    buttonWrapper.appendChild(dropIndicatorElement);
                    buttonWrapper.appendChild(buttonElement);
                    buttonWrapper.appendChild(dropLastIndicatorElement);
                  } else {
                    buttonWrapper.appendChild(dropIndicatorElement);
                    buttonWrapper.appendChild(buttonElement);
                  }
                  element.appendChild(buttonWrapper);
                  var pivotButton = new Button({
                    enableRtl: this.parent.enableRtl,
                    locale: this.parent.locale,
                    enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
                    cssClass: this.parent.cssClass
                  });
                  pivotButton.isStringTemplate = true;
                  pivotButton.appendTo(buttonElement);
                  this.unWireEvent(buttonWrapper, i === valuePos && axis !== "all-fields" ? "values" : axis, isMeasureAvail);
                  this.wireEvent(buttonWrapper, i === valuePos && axis !== "all-fields" ? "values" : axis, isMeasureAvail);
                  if (this.parent.getModuleName() === "pivotview" && !this.parent.isAdaptive || this.parent.getModuleName() === "pivotfieldlist") {
                    this.createDraggable(field[i], this.parent.getModuleName() === "pivotview" ? contentElement : dragWrapper);
                    getInstance(buttonElement.querySelector("." + BUTTON_DRAGGABLE), Draggable).enableAutoScroll = false;
                  }
                }
              }
            }
          }
          if (axis === "values") {
            var valueFiedDropDownList = select("." + GROUP_CHART_VALUE_DROPDOWN_DIV, this.parentElement) ? getInstance(select("." + GROUP_CHART_VALUE_DROPDOWN_DIV, this.parentElement), DropDownList) : null;
            var _loop_1 = function(i2) {
              var element2 = currentAxisElements[i2];
              if (element2.classList.contains(GROUP_CHART_VALUE) && this_1.parent.pivotChartModule) {
                var valueData = field.map(function(item) {
                  return {
                    text: item.caption ? item.caption : item.name,
                    value: item.name
                  };
                });
                var parent_1 = this_1.parent;
                if (valueFiedDropDownList && element2.querySelector("." + GROUP_CHART_VALUE_DROPDOWN_DIV)) {
                  valueFiedDropDownList.dataSource = valueData;
                  valueFiedDropDownList.value = !parent_1.chartSettings.enableMultipleAxis ? parent_1.pivotChartModule.currentMeasure : valueData[0].value;
                } else {
                  var ddlDiv2 = createElement("div", {
                    className: GROUP_CHART_VALUE_DROPDOWN_DIV
                  });
                  element2.appendChild(ddlDiv2);
                  valueFiedDropDownList = new DropDownList({
                    dataSource: valueData,
                    enableRtl: this_1.parent.enableRtl,
                    locale: this_1.parent.locale,
                    value: !parent_1.chartSettings.enableMultipleAxis ? parent_1.pivotChartModule.currentMeasure : valueData[0].value,
                    width: this_1.parent.isAdaptive ? 150 : 200,
                    fields: {
                      value: "value",
                      text: "text"
                    },
                    cssClass: GROUP_CHART_VALUE_DROPDOWN + (this_1.parent.cssClass ? " " + this_1.parent.cssClass : ""),
                    change: function(args2) {
                      if (args2.e && args2.e !== null) {
                        parent_1.chartSettings.value = args2.value;
                      }
                    }
                  });
                  valueFiedDropDownList.isStringTemplate = true;
                  valueFiedDropDownList.appendTo(ddlDiv2);
                }
              }
            };
            var this_1 = this;
            for (var i = 0; i < currentAxisElements.length; i++) {
              _loop_1(i);
            }
          } else if (axis === "columns") {
            var availColindex = void 0;
            var columnFieldDropDownList = select("." + GROUP_CHART_COLUMN_DROPDOWN_DIV, this.parentElement) ? getInstance(select("." + GROUP_CHART_COLUMN_DROPDOWN_DIV, this.parentElement), DropDownList) : null;
            for (var i = 0; i < currentAxisElements.length; i++) {
              var element = currentAxisElements[i];
              if (element.classList.contains(GROUP_CHART_COLUMN) && this.parent.pivotChartModule) {
                var currentMeasure = this.parent.pivotChartModule.currentMeasure;
                var delimiter = this.parent.chartSettings.columnDelimiter ? this.parent.chartSettings.columnDelimiter : "-";
                var columnHeader = this.parent.chartSettings.columnHeader && this.parent.chartSettings.columnHeader !== "" ? this.parent.chartSettings.columnHeader.split(delimiter).join(" - ") : "";
                var engineModule = this.parent.dataType === "olap" ? this.parent.olapEngineModule : this.parent.engineModule;
                var pivotValues = engineModule.pivotValues;
                var totColIndex = this.parent.pivotChartModule.getColumnTotalIndex(pivotValues);
                var rKeys = Object.keys(pivotValues);
                var columnData = [];
                var firstValueRow = false;
                for (var _i = 0, rKeys_1 = rKeys; _i < rKeys_1.length; _i++) {
                  var rKey = rKeys_1[_i];
                  if (firstValueRow) {
                    break;
                  }
                  var rowIndex = Number(rKey);
                  if (pivotValues[rowIndex][0] && pivotValues[rowIndex][0].axis === "row" && (this.parent.dataSourceSettings.rows.length === 0 ? true : pivotValues[rowIndex][0].type !== "grand sum")) {
                    var firstRowCell = pivotValues[rowIndex][0];
                    var tupInfo = this.parent.dataType === "olap" ? engineModule.tupRowInfo[firstRowCell.ordinal] : void 0;
                    var rows = pivotValues[rowIndex];
                    var cKeys = Object.keys(rows);
                    for (var _b = 0, cKeys_1 = cKeys; _b < cKeys_1.length; _b++) {
                      var cKey = cKeys_1[_b];
                      var cellIndex = Number(cKey);
                      var cell = pivotValues[rowIndex][cellIndex];
                      var actualText = this.parent.dataType === "olap" && tupInfo && tupInfo.measureName ? tupInfo.measureName : cell.actualText;
                      if (!totColIndex[cell.colIndex] && cell.axis === "value" && firstRowCell.type !== "header" && actualText !== "" && actualText === currentMeasure) {
                        firstValueRow = true;
                        var columnSeries = this.parent.dataType === "olap" ? cell.columnHeaders.toString().split(/~~|::/).join(" - ") : cell.columnHeaders.toString().split(this.parent.dataSourceSettings.valueSortSettings.headerDelimiter).join(" - ");
                        columnData.push({
                          value: columnSeries,
                          text: columnSeries,
                          title: (_a = {}, _a["title"] = columnSeries, _a)
                        });
                        if (columnSeries === columnHeader) {
                          availColindex = columnData.length;
                        }
                      }
                    }
                  }
                }
                if (columnFieldDropDownList && element.querySelector("." + GROUP_CHART_COLUMN_DROPDOWN_DIV)) {
                  columnFieldDropDownList.dataSource = columnData;
                  if (availColindex !== void 0) {
                    columnFieldDropDownList.value = columnData[availColindex - 1].value;
                  } else {
                    columnFieldDropDownList.value = columnData[0].value;
                  }
                } else {
                  var ddlDiv = createElement("div", {
                    className: GROUP_CHART_COLUMN_DROPDOWN_DIV
                  });
                  element.appendChild(ddlDiv);
                  columnFieldDropDownList = new DropDownList({
                    dataSource: columnData,
                    enableRtl: this.parent.enableRtl,
                    locale: this.parent.locale,
                    value: availColindex ? columnData[availColindex - 1].value : columnData[0] ? columnData[0].value : "",
                    width: "200",
                    fields: {
                      value: "value",
                      text: "text",
                      htmlAttributes: "title"
                    },
                    cssClass: GROUP_CHART_COLUMN_DROPDOWN + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
                    change: function(args2) {
                      if (args2.e && args2.e !== null) {
                        var delimiter_1 = _this.parent.chartSettings.columnDelimiter ? _this.parent.chartSettings.columnDelimiter : "-";
                        _this.parent.chartSettings.columnHeader = args2.value.split(" - ").join(delimiter_1);
                      }
                    }
                  });
                  columnFieldDropDownList.isStringTemplate = true;
                  columnFieldDropDownList.appendTo(ddlDiv);
                }
              }
            }
          }
        }
      } else {
        return;
      }
    };
    PivotButton2.prototype.createButtonText = function(field, i, axis, valuePos) {
      var aggregation;
      var filterMem;
      if (axis === "filters") {
        filterMem = this.updateButtontext(field[i].name);
      }
      var engineModule;
      if (this.parent.dataType === "olap") {
        engineModule = this.parent.olapEngineModule;
      } else {
        engineModule = this.parent.engineModule;
      }
      if (engineModule.fieldList && engineModule.fieldList[field[i].name] !== void 0) {
        aggregation = engineModule.fieldList[field[i].name].aggregateType;
        if (aggregation !== "DistinctCount" && (engineModule.fieldList[field[i].name].type !== "number" || engineModule.fieldList[field[i].name].type === "include" || engineModule.fieldList[field[i].name].type === "exclude")) {
          aggregation = "Count";
        } else {
          aggregation = aggregation === void 0 ? "Sum" : engineModule.fieldList[field[i].name].aggregateType;
        }
      }
      var text = field[i].caption ? field[i].caption : field[i].name;
      text = this.parent.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(text) : text;
      var buttonText = createElement("span", {
        attrs: {
          title: axis === "filters" ? this.parent.dataType === "olap" && engineModule.fieldList[field[i].name].type === "CalculatedField" ? text : text + " (" + filterMem + ")" : this.parent.dataType === "olap" ? text : !this.parent.dataSourceSettings.showAggregationOnValueField || axis !== "values" || aggregation === "CalculatedField" ? text : this.parent.localeObj.getConstant(aggregation) + " " + this.parent.localeObj.getConstant("of") + " " + text,
          "tabindex": "-1",
          "aria-disabled": "false",
          "oncontextmenu": "return false;",
          "data-type": valuePos === i ? "" : aggregation
        },
        className: PIVOT_BUTTON_CONTENT_CLASS + " " + (this.parent.getModuleName() === "pivotview" ? this.parent.groupingBarSettings.allowDragAndDrop && (field[i].allowDragAndDrop || field[i].allowDragAndDrop === void 0) ? "" : DRAG_DISABLE_CLASS : "")
      });
      buttonText.innerText = axis === "filters" ? this.parent.dataType === "olap" && engineModule.fieldList[field[i].name].type === "CalculatedField" ? text : text + " (" + filterMem + ")" : this.parent.dataType === "olap" ? text : !this.parent.dataSourceSettings.showAggregationOnValueField || axis !== "values" || aggregation === "CalculatedField" ? text : this.parent.localeObj.getConstant(aggregation) + " " + this.parent.localeObj.getConstant("of") + " " + text;
      return buttonText;
    };
    PivotButton2.prototype.getTypeStatus = function(field, i, buttonElement) {
      var engineModule;
      if (this.parent.dataType === "olap") {
        engineModule = this.parent.olapEngineModule;
      } else {
        engineModule = this.parent.engineModule;
      }
      if (engineModule.fieldList) {
        var fieldListItem = engineModule.fieldList[field[i].name];
        if (fieldListItem && fieldListItem.aggregateType !== "CalculatedField" && this.validateDropdown(fieldListItem.type)) {
          this.createSummaryType(buttonElement, field[i].name, field[i]);
        }
      }
    };
    PivotButton2.prototype.validateDropdown = function(type) {
      var aggregateType = this.parent.aggregateTypes;
      if (type !== "number") {
        return aggregateType.indexOf("Count") > -1 || aggregateType.indexOf("DistinctCount") > -1;
      } else {
        for (var i = 0; i < aggregateType.length; i++) {
          if (this.parent.getAllSummaryType().indexOf(aggregateType[i]) > -1) {
            return true;
          }
        }
        return false;
      }
    };
    PivotButton2.prototype.createSummaryType = function(pivotButton, fieldName, field) {
      var spanElement = createElement("span", {
        attrs: {
          "tabindex": "-1",
          "aria-disabled": "false",
          "title": this.parent.localeObj.getConstant("format")
        },
        className: ICON + " " + AXISFIELD_ICON_CLASS
      });
      if (this.parent.getModuleName() === "pivotview") {
        if (this.parent.groupingBarSettings.showValueTypeIcon && field.showValueTypeIcon) {
          removeClass([spanElement], ICON_DISABLE);
        } else {
          addClass([spanElement], ICON_DISABLE);
        }
      } else {
        if (field.showValueTypeIcon) {
          removeClass([spanElement], ICON_DISABLE);
        } else {
          addClass([spanElement], ICON_DISABLE);
        }
      }
      pivotButton.appendChild(spanElement);
      return spanElement;
    };
    PivotButton2.prototype.createMenuOption = function(args) {
      this.menuOption.render(args, this.parentElement);
      this.parent.pivotButtonModule = this;
    };
    PivotButton2.prototype.openCalculatedFieldDialog = function(args) {
      var fieldName = args.target.parentElement.getAttribute("data-uid");
      var fieldInfo = PivotUtil.getFieldInfo(fieldName, this.parent);
      this.parent.actionObj.actionName = editCalculatedField;
      this.parent.actionObj.fieldInfo = fieldInfo;
      if (this.parent.actionBeginMethod()) {
        return;
      }
      try {
        if (this.parent.getModuleName() === "pivotview") {
          if (this.parent.isAdaptive && this.parent.showFieldList && this.parent.pivotFieldListModule && !this.parent.pivotFieldListModule.isDestroyed) {
            this.parent.pivotFieldListModule.element.querySelector("." + TOGGLE_FIELD_LIST_CLASS).click();
            this.parent.pivotFieldListModule.dialogRenderer.adaptiveElement.select(4);
            this.parent.pivotFieldListModule.calculatedFieldModule.updateAdaptiveCalculatedField(true, fieldName);
          } else {
            if (!this.parent.isAdaptive) {
              this.parent.calculatedFieldModule.buttonCall = true;
            }
            this.parent.notify(initCalculatedField, {
              edit: true,
              fieldName
            });
          }
        } else if (this.parent.getModuleName() === "pivotfieldlist") {
          if (this.parent.isAdaptive) {
            this.parent.dialogRenderer.adaptiveElement.select(4);
            this.parent.calculatedFieldModule.updateAdaptiveCalculatedField(true, fieldName);
            this.parent.calculatedFieldModule.buttonCall = true;
          } else {
            if (this.parent.dialogRenderer.fieldListDialog) {
              this.parent.dialogRenderer.fieldListDialog.hide();
              addClass([this.parent.element.querySelector("." + TOGGLE_FIELD_LIST_CLASS)], ICON_HIDDEN);
            }
            this.parent.notify(initCalculatedField, {
              edit: true,
              fieldName
            });
            if (this.parent.calculatedFieldModule) {
              this.parent.calculatedFieldModule.buttonCall = true;
            }
          }
        }
      } catch (execption) {
        this.parent.actionFailureMethod(execption);
      }
    };
    PivotButton2.prototype.createDraggable = function(field, target) {
      this.draggable = new Draggable(target, {
        clone: true,
        enableTailMode: true,
        enableAutoScroll: true,
        helper: this.createDragClone.bind(this),
        dragStart: this.onDragStart.bind(this),
        drag: this.onDragging.bind(this),
        dragStop: this.onDragStop.bind(this),
        abort: this.parent.getModuleName() === "pivotview" ? !(this.parent.groupingBarSettings.allowDragAndDrop && field.allowDragAndDrop) ? "." + PIVOT_BUTTON_CLASS : "" : !field.allowDragAndDrop ? "." + PIVOT_BUTTON_CLASS : ""
      });
    };
    PivotButton2.prototype.createButtonDragIcon = function(field, pivotButton) {
      var dragWrapper = createElement("span", {
        attrs: {
          "tabindex": "-1",
          "aria-disabled": "false"
        }
      });
      var dragElement = createElement("span", {
        attrs: {
          "tabindex": "-1",
          "aria-disabled": "false",
          "title": this.parent.localeObj.getConstant("drag")
        },
        className: ICON + " " + DRAG_CLASS + " " + (field.allowDragAndDrop || field.allowDragAndDrop === void 0 ? "" : DRAG_DISABLE_CLASS)
      });
      dragWrapper.appendChild(dragElement);
      if (this.parent.getModuleName() === "pivotfieldlist") {
        pivotButton.appendChild(dragWrapper);
      }
      return dragWrapper;
    };
    PivotButton2.prototype.createSortOption = function(pivotButton, fieldName, field) {
      var sortCLass;
      var spanElement;
      var engineModule;
      if (this.parent.dataType === "olap") {
        engineModule = this.parent.olapEngineModule;
      } else {
        engineModule = this.parent.engineModule;
      }
      if (this.parent.isDeferLayoutUpdate === false || this.parent.pivotGridModule && this.parent.pivotGridModule.pivotDeferLayoutUpdate === false) {
        sortCLass = engineModule.fieldList[fieldName].sort === "Descending" ? SORT_DESCEND_CLASS : "";
      } else {
        sortCLass = "";
        for (var i = 0; i < this.parent.dataSourceSettings.sortSettings.length; i++) {
          if (this.parent.dataSourceSettings.sortSettings[i].name === fieldName) {
            sortCLass = this.parent.dataSourceSettings.sortSettings[i].order === "Descending" ? SORT_DESCEND_CLASS : "";
          }
        }
      }
      if (engineModule.fieldList && engineModule.fieldList[fieldName].sort === "None") {
        spanElement = createElement("span", {
          attrs: {
            "tabindex": "-1",
            "aria-disabled": "false",
            "title": this.parent.localeObj.getConstant("sort")
          },
          className: ICON
        });
      } else {
        spanElement = createElement("span", {
          attrs: {
            "tabindex": "-1",
            "aria-disabled": "false",
            "title": this.parent.localeObj.getConstant("sort")
          },
          className: ICON + " " + SORT_CLASS + " " + sortCLass
        });
      }
      if (this.parent.dataSourceSettings.enableSorting) {
        if (this.parent.getModuleName() === "pivotview") {
          if (field.showSortIcon && this.parent.groupingBarSettings.showSortIcon) {
            removeClass([spanElement], ICON_DISABLE);
          } else {
            addClass([spanElement], ICON_DISABLE);
          }
        } else {
          if (field.showSortIcon) {
            removeClass([spanElement], ICON_DISABLE);
          } else {
            addClass([spanElement], ICON_DISABLE);
          }
        }
      } else {
        addClass([spanElement], ICON_DISABLE);
      }
      pivotButton.appendChild(spanElement);
      return spanElement;
    };
    PivotButton2.prototype.createFilterOption = function(pivotButton, fieldName, axis, field) {
      var filterCLass;
      var engineModule;
      if (this.parent.dataType === "olap") {
        engineModule = this.parent.olapEngineModule;
      } else {
        engineModule = this.parent.engineModule;
      }
      var filterField2 = PivotUtil.getFieldByName(fieldName, this.parent.dataSourceSettings.filterSettings);
      if (this.parent.isDeferLayoutUpdate === false || this.parent.pivotGridModule && this.parent.pivotGridModule.pivotDeferLayoutUpdate === false) {
        engineModule.fieldList[fieldName].filter = engineModule.fieldList[fieldName].filter === null ? [] : engineModule.fieldList[fieldName].filter;
        filterCLass = this.parent.dataSourceSettings.mode === "Server" && !filterField2 || this.parent.dataSourceSettings.mode === "Local" && engineModule.fieldList[fieldName].filter.length === 0 ? !engineModule.fieldList[fieldName].isExcelFilter ? FILTER_CLASS : FILTERED_CLASS : FILTERED_CLASS;
      } else {
        filterCLass = FILTER_CLASS;
        for (var i = 0; i < this.parent.dataSourceSettings.filterSettings.length; i++) {
          if (this.parent.dataSourceSettings.filterSettings[i].name === fieldName) {
            filterCLass = FILTERED_CLASS;
          }
        }
      }
      var spanElement = createElement("span", {
        attrs: {
          "tabindex": "-1",
          "aria-disabled": "false",
          "title": this.parent.localeObj.getConstant("filter")
        },
        className: FILTER_COMMON_CLASS + " " + ICON + " " + filterCLass
      });
      if ((this.parent.dataSourceSettings.allowLabelFilter || this.parent.dataSourceSettings.allowValueFilter) && axis !== "filters" || this.parent.dataSourceSettings.allowMemberFilter) {
        removeClass([spanElement], ICON_DISABLE);
      } else {
        addClass([spanElement], ICON_DISABLE);
      }
      if (this.parent.getModuleName() === "pivotview") {
        if (((this.parent.dataSourceSettings.allowLabelFilter || this.parent.dataSourceSettings.allowValueFilter) && axis !== "filters" || this.parent.dataSourceSettings.allowMemberFilter) && this.parent.groupingBarSettings.showFilterIcon && field.showFilterIcon) {
          removeClass([spanElement], ICON_DISABLE);
        } else {
          addClass([spanElement], ICON_DISABLE);
        }
      } else {
        if (field.showFilterIcon && ((this.parent.dataSourceSettings.allowLabelFilter || this.parent.dataSourceSettings.allowValueFilter) && axis !== "filters" || this.parent.dataSourceSettings.allowMemberFilter)) {
          removeClass([spanElement], ICON_DISABLE);
        } else {
          addClass([spanElement], ICON_DISABLE);
        }
      }
      pivotButton.appendChild(spanElement);
      return spanElement;
    };
    PivotButton2.prototype.updateButtontext = function(fieldName) {
      var engineModule;
      if (this.parent.dataType === "olap") {
        engineModule = this.parent.olapEngineModule;
      } else {
        engineModule = this.parent.engineModule;
      }
      var filterCount = engineModule.fieldList[fieldName].filter.length;
      var filterType = engineModule.fieldList[fieldName].filterType;
      var memLen = engineModule.fieldList[fieldName].dateMember.length;
      var filterMem;
      var firstNode = engineModule.fieldList[fieldName].filter[0];
      if (this.parent.dataType === "olap") {
        filterMem = this.updateOlapButtonText(engineModule, fieldName, firstNode, filterCount);
      } else if (filterType === "include") {
        if (filterCount === 1) {
          filterMem = firstNode;
        } else if (filterCount > 1) {
          if (filterCount === memLen) {
            filterMem = this.parent.localeObj.getConstant("all");
          } else {
            filterMem = this.parent.localeObj.getConstant("multipleItems");
          }
        }
      } else if (filterType === "exclude") {
        if (filterCount === 1) {
          if (memLen === 2) {
            if (firstNode !== engineModule.fieldList[fieldName].dateMember[0].actualText) {
              filterMem = firstNode;
            } else {
              filterMem = engineModule.fieldList[fieldName].dateMember[0].actualText;
            }
          } else {
            filterMem = this.parent.localeObj.getConstant("multipleItems");
          }
        } else if (filterCount > 1) {
          var j = void 0;
          var allNodes = Object.keys(engineModule.fieldList[fieldName].members);
          var filteredItems = engineModule.fieldList[fieldName].filter;
          if (filterCount === allNodes.length - 1) {
            for (j = 0; j < allNodes.length; j++) {
              var test = allNodes[j];
              var x = filteredItems.indexOf(test);
              if (x === -1) {
                filterMem = allNodes[j];
                break;
              }
            }
          } else {
            filterMem = this.parent.localeObj.getConstant("multipleItems");
          }
        }
      } else {
        filterMem = this.parent.localeObj.getConstant("all");
      }
      return filterMem;
    };
    PivotButton2.prototype.updateOlapButtonText = function(engineModule, fieldName, firstNode, filterCount) {
      var filterMem;
      var filterItems = engineModule.fieldList[fieldName].actualFilter;
      if (filterItems.length > 0) {
        var cMembers = engineModule.fieldList[fieldName].members;
        var actualFilterItems = [];
        if (engineModule.fieldList[fieldName].filterMembers.length > 0) {
          var dummyfilterItems = {};
          for (var _i = 0, filterItems_1 = filterItems; _i < filterItems_1.length; _i++) {
            var item = filterItems_1[_i];
            dummyfilterItems[item] = item;
            if (cMembers[item]) {
              dummyfilterItems = this.parent.pivotCommon.eventBase.getParentNode(fieldName, item, dummyfilterItems);
            }
          }
          var updatedFilterItems = dummyfilterItems ? Object.keys(dummyfilterItems) : [];
          for (var _a = 0, updatedFilterItems_1 = updatedFilterItems; _a < updatedFilterItems_1.length; _a++) {
            var item = updatedFilterItems_1[_a];
            if (cMembers[item].isSelected) {
              if (!(cMembers[item].parent && cMembers[cMembers[item].parent].isSelected)) {
                actualFilterItems.push(item);
              }
            }
          }
          firstNode = actualFilterItems.length === 1 ? cMembers[actualFilterItems[0]].caption : firstNode;
        }
        filterCount = actualFilterItems.length === 0 ? filterCount : actualFilterItems.length;
      }
      if (filterCount === 0) {
        filterMem = engineModule.fieldList[fieldName].allMember ? engineModule.fieldList[fieldName].allMember : this.parent.localeObj.getConstant("all");
      } else if (filterCount === 1) {
        filterMem = firstNode;
      } else if (filterCount > 1) {
        filterMem = this.parent.localeObj.getConstant("multipleItems");
      }
      return filterMem;
    };
    PivotButton2.prototype.createDragClone = function(args) {
      var element = closest(args.element, "." + PIVOT_BUTTON_CLASS);
      var cloneElement = createElement("div", {
        id: this.parent.element.id + "_DragClone",
        className: DRAG_CLONE_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : "")
      });
      var contentElement = createElement("span", {
        className: TEXT_CONTENT_CLASS
      });
      contentElement.innerText = this.parent.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(element.textContent) : element.textContent;
      cloneElement.appendChild(contentElement);
      document.body.appendChild(cloneElement);
      return cloneElement;
    };
    PivotButton2.prototype.onDragStart = function(e) {
      var _this = this;
      var element = closest(e.element, "." + PIVOT_BUTTON_CLASS);
      var dragItem = document.getElementById(this.parent.element.id + "_DragClone");
      var fieldInfo = PivotUtil.getFieldInfo(element.getAttribute("data-uid"), this.parent);
      var dragEventArgs = {
        fieldName: fieldInfo.fieldName,
        fieldItem: fieldInfo.fieldItem,
        axis: fieldInfo.axis,
        dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings),
        cancel: false
      };
      var control = this.parent.getModuleName() === "pivotfieldlist" && this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;
      control.trigger(fieldDragStart, dragEventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          _this.parent.isDragging = true;
          var engineModule = void 0;
          if (_this.parent.dataType === "olap") {
            engineModule = _this.parent.olapEngineModule;
          } else {
            engineModule = _this.parent.engineModule;
          }
          var data = engineModule.fieldList[element.getAttribute("data-uid")];
          var axis = [ROW_AXIS_CLASS, COLUMN_AXIS_CLASS, FILTER_AXIS_CLASS];
          addClass([element], SELECTED_NODE_CLASS);
          if (dragItem && (_this.parent.getModuleName() === "pivotfieldlist" && _this.parent.renderMode) === "Popup") {
            var fieldListPopup = _this.parent;
            dragItem.style.zIndex = (fieldListPopup.dialogRenderer.fieldListDialog.zIndex + 1).toString();
          }
          if (data && data.aggregateType === "CalculatedField") {
            for (var _i = 0, axis_1 = axis; _i < axis_1.length; _i++) {
              var axisContent = axis_1[_i];
              addClass([_this.parentElement.querySelector("." + axisContent)], NO_DRAG_CLASS);
              var pivotButtons = _this.parentElement.querySelector("." + axisContent).querySelectorAll(".e-pivot-button");
              pivotButtons.forEach(function(button) {
                button.style.cursor = "no-drop";
              });
            }
          }
        } else {
          _this.parent.isDragging = false;
          _this.draggable.intDestroy(e.event);
          detach(dragItem);
        }
      });
    };
    PivotButton2.prototype.onDragging = function(e) {
      this.draggable.setProperties({
        cursorAt: {
          top: !isNullOrUndefined(e.event.targetTouches) || Browser.isDevice ? 60 : -20
        }
      });
    };
    PivotButton2.prototype.onDragStop = function(args) {
      this.parent.isDragging = false;
      if (args.target && args.element && closest(args.element, "." + GROUP_ALL_FIELDS_CLASS) && !closest(args.target, "." + DROPPABLE_CLASS)) {
        args.cancel = true;
      }
      var element = closest(args.element, "." + PIVOT_BUTTON_CLASS);
      removeClass([].slice.call(this.parentElement.querySelectorAll("." + PIVOT_BUTTON_CLASS)), SELECTED_NODE_CLASS);
      removeClass([].slice.call(this.parentElement.querySelectorAll("." + DROP_INDICATOR_CLASS)), INDICATOR_HOVER_CLASS);
      var axis = [ROW_AXIS_CLASS, COLUMN_AXIS_CLASS, FILTER_AXIS_CLASS];
      for (var _i = 0, axis_2 = axis; _i < axis_2.length; _i++) {
        var axisContent = axis_2[_i];
        removeClass([this.parentElement.querySelector("." + axisContent)], NO_DRAG_CLASS);
        var pivotButtons = this.parentElement.querySelector("." + axisContent).querySelectorAll(".e-pivot-button");
        pivotButtons.forEach(function(button) {
          button.style.cursor = "default";
        });
      }
      if (this.parent.pivotCommon.filterDialog.dialogPopUp) {
        this.parent.pivotCommon.filterDialog.dialogPopUp.close();
      }
      if (document.getElementById(this.parent.element.id + "_DragClone")) {
        remove(document.getElementById(this.parent.element.id + "_DragClone"));
      }
      document.body.style.cursor = "auto";
      if (!this.isButtonDropped(args.target, element) || args.cancel) {
        return;
      }
      this.parent.pivotCommon.dataSourceUpdate.control = this.parent.getModuleName() === "pivotview" ? this.parent : this.parent.pivotGridModule ? this.parent.pivotGridModule : this.parent;
      if (this.parent.pivotCommon.nodeStateModified.onStateModified(args, element.getAttribute("data-uid"))) {
        this.updateDataSource();
        var thisObj = this;
        thisObj.parent.axisFieldModule.render();
      }
    };
    PivotButton2.prototype.isButtonDropped = function(dropTarget, target) {
      var axisPanel = closest(target, "." + DROPPABLE_CLASS);
      var droppableElement = closest(dropTarget, "." + DROPPABLE_CLASS);
      var isDropped = true;
      if (axisPanel && axisPanel === droppableElement) {
        var pivotButtons = [].slice.call(axisPanel.querySelectorAll("." + PIVOT_BUTTON_CLASS));
        var droppableTarget = closest(dropTarget, "." + PIVOT_BUTTON_WRAPPER_CLASS);
        var sourcePosition = void 0;
        var droppedPosition = -1;
        for (var i = 0, n = pivotButtons.length; i < n; i++) {
          if (pivotButtons[i].id === target.id) {
            sourcePosition = i;
          }
          if (droppableTarget) {
            var droppableButton = droppableTarget.querySelector("." + PIVOT_BUTTON_CLASS);
            if (pivotButtons[i].id === droppableButton.id) {
              droppedPosition = i;
            }
          }
        }
        if (sourcePosition === droppedPosition || sourcePosition === pivotButtons.length - 1 && droppedPosition === -1) {
          removeClass([].slice.call(this.parentElement.querySelectorAll("." + DROP_INDICATOR_CLASS)), INDICATOR_HOVER_CLASS);
          isDropped = false;
        }
      }
      return isDropped;
    };
    PivotButton2.prototype.updateSorting = function(args) {
      var buttonElement = closest(args.target, "." + PIVOT_BUTTON_CLASS);
      var fieldInfo = PivotUtil.getFieldInfo(buttonElement ? buttonElement.getAttribute("data-uid") : "", this.parent);
      if (!args.target.classList.contains(FILTER_COMMON_CLASS) && !args.target.classList.contains(REMOVE_CLASS) && !args.target.classList.contains(DRAG_CLASS) && buttonElement && fieldInfo.fieldItem && (fieldInfo.fieldItem.showSortIcon || isNullOrUndefined(fieldInfo.fieldItem.showSortIcon)) && !fieldInfo.fieldItem.isCalculatedField) {
        this.parent.actionObj.actionName = sortField;
        this.parent.actionObj.fieldInfo = fieldInfo;
        if (this.parent.actionBeginMethod()) {
          return;
        }
        try {
          if ((this.parent instanceof PivotFieldList || this.parent.groupingBarSettings.showSortIcon) && this.parent.dataSourceSettings.enableSorting && !(this.parent.dataType === "olap" && (this.parent.getModuleName() === "pivotfieldlist" && this.parent.pivotGridModule !== void 0 && this.parent.pivotGridModule.enableVirtualization || this.parent.getModuleName() === "pivotview" && this.parent.enableVirtualization))) {
            this.parent.pivotCommon.eventBase.updateSorting(args);
            if (this.parent.staticPivotGridModule) {
              this.parent.staticPivotGridModule.actionObj = this.parent.actionObj;
            }
            if (this.parent.isDeferLayoutUpdate === false || this.parent.pivotGridModule && this.parent.pivotGridModule.pivotDeferLayoutUpdate === false || this.parent.getModuleName() !== "pivotfieldlist") {
              var actionInfo = {
                sortInfo: this.parent.lastSortInfo
              };
              this.parent.actionObj.actionInfo = actionInfo;
              this.updateDataSource(true);
            }
            var thisObj = this;
            if (thisObj.parent instanceof PivotFieldList) {
              thisObj.axisField.render();
              if (this.parent.isPopupView && this.parent.pivotGridModule) {
                this.parent.pivotGridModule.notify(uiUpdate, this);
              } else if (this.parent.staticPivotGridModule) {
                this.parent.staticPivotGridModule.notify(uiUpdate, this);
              }
            }
          }
        } catch (execption) {
          this.parent.actionFailureMethod(execption);
        }
      }
    };
    PivotButton2.prototype.updateDataSource = function(isRefreshGrid) {
      if (this.parent.isDeferLayoutUpdate === false || this.parent.pivotGridModule && this.parent.pivotGridModule.pivotDeferLayoutUpdate === false || this.parent.getModuleName() === "pivotview") {
        this.parent.updateDataSource(isRefreshGrid);
      } else {
        if (this.parent.getModuleName() === "pivotfieldlist" && this.parent.isPopupView && this.parent.pivotGridModule) {
          if (this.parent.dataType === "olap") {
            this.parent.pivotGridModule.olapEngineModule = this.parent.olapEngineModule;
          } else {
            this.parent.pivotGridModule.engineModule = this.parent.engineModule;
          }
          this.parent.pivotGridModule.notify(uiUpdate, this);
          this.parent.pivotGridModule.setProperties({
            dataSourceSettings: this.parent.dataSourceSettings.properties
          }, true);
        } else {
          this.parent.triggerPopulateEvent();
        }
      }
    };
    PivotButton2.prototype.updateFiltering = function(args) {
      var pivotObj = this.parent.pivotGridModule ? this.parent.pivotGridModule : this.parent;
      var fieldName = args.target.parentElement.getAttribute("data-uid");
      var fieldInfo = PivotUtil.getFieldInfo(fieldName, this.parent);
      this.parent.actionObj.actionName = filterField;
      this.parent.actionObj.fieldInfo = fieldInfo;
      if (this.parent.actionBeginMethod()) {
        return;
      }
      try {
        if (pivotObj.getModuleName() === "pivotfieldlist") {
          showSpinner(pivotObj.fieldListSpinnerElement);
        } else {
          pivotObj.showWaitingPopup();
        }
        pivotObj.mouseEventArgs = args;
        pivotObj.filterTargetID = this.parent.pivotCommon.moduleName !== "pivotfieldlist" ? this.parent.element : document.getElementById(this.parent.pivotCommon.parentID + "_Container");
        if (pivotObj.dataSourceSettings.mode === "Server") {
          if (this.parent.engineModule.fieldList[fieldName].members && Object.keys(this.parent.engineModule.fieldList[fieldName].members).length > 0) {
            this.updateFilterEvents();
          } else {
            this.parent.getEngine("fetchFieldMembers", null, null, null, null, null, fieldName);
          }
        } else {
          if (pivotObj.dataType === "pivot" && !this.parent.engineModule.fieldList[fieldName].isMembersFilled) {
            this.parent.engineModule.fetchFieldMembers(fieldName);
          }
          this.updateFilterEvents();
        }
      } catch (execption) {
        this.parent.actionFailureMethod(execption);
      }
    };
    PivotButton2.prototype.updateFilterEvents = function() {
      var pivotObj = this.parent.pivotGridModule ? this.parent.pivotGridModule : this.parent;
      this.parent.pivotCommon.eventBase.updateFiltering(pivotObj.mouseEventArgs);
      var target = pivotObj.mouseEventArgs.target;
      this.fieldName = target.parentElement.getAttribute("data-uid");
      if (this.parent.pivotCommon.filterDialog.dialogPopUp) {
        this.bindDialogEvents();
      }
      if (pivotObj.getModuleName() === "pivotfieldlist") {
        hideSpinner(pivotObj.fieldListSpinnerElement);
      } else {
        pivotObj.hideWaitingPopup();
      }
    };
    PivotButton2.prototype.bindDialogEvents = function() {
      if (this.parent.pivotCommon.filterDialog.allowExcelLikeFilter && this.parent.pivotCommon.filterDialog.tabObj) {
        this.index = this.parent.pivotCommon.filterDialog.tabObj.selectedItem;
        this.updateDialogButtonEvents();
        this.parent.pivotCommon.filterDialog.dialogPopUp.buttons = this.buttonModel();
        this.parent.pivotCommon.filterDialog.dialogPopUp.dataBind();
        this.parent.pivotCommon.filterDialog.tabObj.selected = this.tabSelect.bind(this);
      } else if (this.parent.dataSourceSettings.allowMemberFilter) {
        this.index = 0;
        this.updateDialogButtonEvents();
      }
    };
    PivotButton2.prototype.buttonModel = function() {
      return [{
        isFlat: false,
        buttonModel: {
          cssClass: "e-clear-filter-button" + (this.parent.pivotCommon.filterDialog.allowExcelLikeFilter ? "" : " " + ICON_DISABLE) + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
          iconCss: "e-icons e-clear-filter-icon",
          enableRtl: this.parent.enableRtl,
          content: this.parent.localeObj.getConstant("clearFilter"),
          disabled: this.parent.pivotCommon.filterDialog.filterObject ? false : true
        },
        click: this.ClearFilter.bind(this)
      }, {
        isFlat: false,
        buttonModel: {
          cssClass: OK_BUTTON_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
          content: this.parent.localeObj.getConstant("ok"),
          isPrimary: true
        },
        click: this.index === 0 ? this.updateFilterState.bind(this, this.fieldName) : this.updateCustomFilter.bind(this)
      }, {
        isFlat: false,
        click: this.parent.pivotCommon.filterDialog.closeFilterDialog.bind(this.parent.pivotCommon.filterDialog),
        buttonModel: {
          cssClass: CANCEL_BUTTON_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
          content: this.parent.localeObj.getConstant("cancel")
        }
      }];
    };
    PivotButton2.prototype.tabSelect = function(e) {
      this.index = e.selectedIndex;
      this.updateDialogButtonEvents();
      removeClass([].slice.call(this.parent.pivotCommon.filterDialog.dialogPopUp.element.querySelectorAll(".e-selected-tab")), "e-selected-tab");
      if (e.selectedIndex > 0) {
        addClass([this.parent.pivotCommon.filterDialog.dialogPopUp.element.querySelector(".e-filter-div-content." + (e.selectedIndex === 1 && this.parent.dataSourceSettings.allowLabelFilter ? "e-label-filter" : "e-value-filter"))], "e-selected-tab");
      }
      if (e.selectedIndex === 0) {
        this.parent.pivotCommon.filterDialog.updateCheckedState();
      } else {
        this.parent.pivotCommon.filterDialog.dialogPopUp.buttons[0].buttonModel.disabled = false;
        this.parent.pivotCommon.filterDialog.dialogPopUp.element.querySelector("." + OK_BUTTON_CLASS).removeAttribute("disabled");
      }
    };
    PivotButton2.prototype.updateDialogButtonEvents = function() {
      this.parent.pivotCommon.filterDialog.dialogPopUp.buttons = this.buttonModel();
      this.parent.pivotCommon.filterDialog.dialogPopUp.dataBind();
    };
    PivotButton2.prototype.updateCustomFilter = function() {
      var _this = this;
      var dialogElement = this.parent.pivotCommon.filterDialog.dialogPopUp.element.querySelector(".e-selected-tab");
      var fieldName = dialogElement.getAttribute("data-fieldname");
      var levelName = dialogElement.getAttribute("data-selectedField");
      var filterType = dialogElement.getAttribute("data-type");
      var measure = dialogElement.getAttribute("data-measure");
      var operator = dialogElement.getAttribute("data-operator");
      var operand1 = dialogElement.getAttribute("data-value1");
      var operand2 = dialogElement.getAttribute("data-value2");
      var type = filterType === "value" ? "Value" : filterType === "date" ? "Date" : filterType === "number" ? "Number" : "Label";
      var filterItem = {
        name: fieldName,
        type,
        measure,
        condition: operator,
        value1: filterType === "date" ? new Date(operand1) : operand1,
        value2: filterType === "date" ? new Date(operand2) : operand2
      };
      var filterObject;
      if (this.parent.dataType === "olap") {
        filterItem.selectedField = levelName;
        this.removeDataSourceSettings(fieldName, levelName, type);
        var filterItems = this.parent.dataSourceSettings.filterSettings;
        for (var _i = 0, filterItems_2 = filterItems; _i < filterItems_2.length; _i++) {
          var item = filterItems_2[_i];
          if (item.name === fieldName && item.selectedField === levelName) {
            filterObject = item;
          }
        }
      } else {
        filterObject = PivotUtil.getFilterItemByName(fieldName, this.parent.dataSourceSettings.filterSettings);
      }
      if (isNullOrUndefined(operand1) || operand1 === "" || ["Between", "NotBetween"].indexOf(operator) > -1 && (isNullOrUndefined(operand2) || operand2 === "")) {
        var inputElementString = type.toLowerCase() + (isNullOrUndefined(operand1) || operand1 === "" ? "_input_option_1" : "_input_option_2");
        var focusElement = select("#" + this.parent.element.id + "_" + inputElementString, dialogElement);
        addClass([focusElement], EMPTY_FIELD);
        focusElement.focus();
        return;
      }
      var filterEventArgs = {
        cancel: false,
        filterSettings: filterItem,
        dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings)
      };
      var control = this.parent.getModuleName() === "pivotfieldlist" && this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;
      control.trigger(memberFiltering, filterEventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          filterItem = observedArgs.filterSettings;
          if (filterObject) {
            filterObject = filterObject.properties ? filterObject.properties : filterObject;
            filterObject.type = filterItem.type;
            filterObject.measure = filterItem.measure;
            filterObject.condition = filterItem.condition;
            filterObject.value1 = filterItem.value1;
            filterObject.value2 = filterItem.value2;
            if (_this.parent.dataType === "olap") {
              filterObject.selectedField = filterItem.selectedField;
            }
          } else {
            _this.parent.dataSourceSettings.filterSettings.push(filterItem);
          }
        }
        if (type !== "Value") {
          _this.parent.lastFilterInfo = PivotUtil.getFilterItemByName(fieldName, _this.parent.dataSourceSettings.filterSettings);
          _this.parent.lastFilterInfo = _this.parent.lastFilterInfo.properties ? _this.parent.lastFilterInfo.properties : _this.parent.lastFilterInfo;
        }
        _this.parent.pivotCommon.filterDialog.dialogPopUp.close();
        if (!observedArgs.cancel) {
          _this.refreshPivotButtonState(fieldName, true);
          _this.updateDataSource(true);
        }
      });
    };
    PivotButton2.prototype.ClearFilter = function() {
      var dialogElement = this.parent.pivotCommon.filterDialog.dialogPopUp.element;
      var fieldName = dialogElement.getAttribute("data-fieldname");
      var tabElement = dialogElement.querySelector(".e-selected-tab");
      this.parent.pivotCommon.filterDialog.dialogPopUp.close();
      if (this.parent.dataType === "olap" && tabElement) {
        var levelName = tabElement.getAttribute("data-selectedField");
        this.removeDataSourceSettings(fieldName, levelName);
      } else {
        this.removeDataSourceSettings(fieldName);
      }
      var filterObject = PivotUtil.getFilterItemByName(fieldName, this.parent.dataSourceSettings.filterSettings);
      this.refreshPivotButtonState(fieldName, filterObject ? true : false);
      this.updateDataSource(true);
    };
    PivotButton2.prototype.removeButton = function(args) {
      var _this = this;
      var target = args.target;
      var fieldName = target.parentElement.getAttribute("data-uid");
      var fieldInfo = PivotUtil.getFieldInfo(fieldName, this.parent);
      this.parent.actionObj.actionName = removeField;
      this.parent.actionObj.fieldInfo = fieldInfo;
      if (this.parent.actionBeginMethod()) {
        return;
      }
      var removeFieldArgs = {
        cancel: false,
        fieldName,
        dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings),
        fieldItem: fieldInfo.fieldItem,
        axis: fieldInfo.axis
      };
      try {
        var control = this.parent.getModuleName() === "pivotfieldlist" && this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;
        control.trigger(fieldRemove, removeFieldArgs, function(observedArgs) {
          if (!observedArgs.cancel) {
            if (target.parentElement.getAttribute("isvalue") === "true") {
              _this.parent.setProperties({
                dataSourceSettings: {
                  values: []
                }
              }, true);
              if (_this.parent.dataType === "olap") {
                _this.parent.pivotCommon.dataSourceUpdate.removeFieldFromReport("[Measures]");
              }
            } else {
              _this.parent.pivotCommon.dataSourceUpdate.removeFieldFromReport(fieldName);
              if (_this.parent.dataType === "pivot" && _this.parent.showValuesButton && _this.parent.dataSourceSettings.values.length > 1 && fieldInfo.position < _this.parent.dataSourceSettings.valueIndex && (_this.parent.dataSourceSettings.valueAxis === "row" && observedArgs.axis === "rows" || _this.parent.dataSourceSettings.valueAxis === "column" && observedArgs.axis === "columns")) {
                _this.parent.setProperties({
                  dataSourceSettings: {
                    valueIndex: _this.parent.dataSourceSettings.valueIndex - 1
                  }
                }, true);
              }
              if (_this.parent.dataType === "olap" && _this.parent.dataSourceSettings.values.length === 0) {
                _this.parent.pivotCommon.dataSourceUpdate.removeFieldFromReport("[Measures]");
              }
            }
            if (_this.parent.getModuleName() === "pivotfieldlist") {
              _this.parent.axisFieldModule.render();
            }
            _this.updateDataSource();
          }
        });
      } catch (execption) {
        this.parent.actionFailureMethod(execption);
      }
    };
    PivotButton2.prototype.nodeStateModified = function(args) {
      var target = closest(args.node, "li");
      var fieldName = target.getAttribute("data-fieldname");
      if (target.getAttribute("data-memberId") === "all") {
        this.parent.pivotCommon.filterDialog.memberTreeView.nodeChecked = null;
        if (args.action === "check") {
          this.parent.pivotCommon.filterDialog.memberTreeView.checkAll();
        } else {
          this.parent.pivotCommon.filterDialog.memberTreeView.uncheckAll();
        }
        if (this.parent.dataType === "olap" && this.parent.olapEngineModule && !this.parent.olapEngineModule.fieldList[fieldName].isHierarchy) {
          this.updateNodeStates(this.parent.pivotCommon.filterDialog.memberTreeView.getAllCheckedNodes(), fieldName);
        }
        this.checkedStateAll(args.action);
        this.parent.pivotCommon.filterDialog.memberTreeView.nodeChecked = this.nodeStateModified.bind(this);
      } else {
        if (this.parent.dataType === "olap" && this.parent.olapEngineModule && !this.parent.olapEngineModule.fieldList[fieldName].isHierarchy) {
          var checkedNodes = this.parent.pivotCommon.filterDialog.memberTreeView.getAllCheckedNodes();
          this.updateNodeStates(checkedNodes, fieldName);
        }
        var pos = this.parent.pivotCommon.currentTreeItemsPos[target.getAttribute("data-memberId")].index;
        if (this.parent.pivotCommon.currentTreeItems[pos]) {
          this.parent.pivotCommon.currentTreeItems[pos].isSelected = args.action === "check";
          this.parent.pivotCommon.currentTreeItemsPos[target.getAttribute("data-memberId")].isSelected = args.action === "check";
        }
      }
      this.parent.pivotCommon.filterDialog.updateCheckedState();
    };
    PivotButton2.prototype.checkedStateAll = function(state) {
      var searchItemObj = {};
      for (var _i = 0, _a = this.parent.pivotCommon.searchTreeItems; _i < _a.length; _i++) {
        var item = _a[_i];
        item.isSelected = state === "check";
        searchItemObj[item.htmlAttributes["data-memberId"]] = item.htmlAttributes["data-memberId"];
      }
      for (var _b = 0, _c = this.parent.pivotCommon.currentTreeItems; _b < _c.length; _b++) {
        var item = _c[_b];
        if (searchItemObj[item.htmlAttributes["data-memberId"]] !== void 0) {
          item.isSelected = state === "check";
          this.parent.pivotCommon.currentTreeItemsPos[item.htmlAttributes["data-memberId"]].isSelected = state === "check";
        }
      }
    };
    PivotButton2.prototype.updateNodeStates = function(checkedNodes, fieldName) {
      var fieldList = this.parent.pivotCommon.engineModule.fieldList[fieldName];
      var currentMembers = fieldList.members;
      var searchMembers = fieldList.currrentMembers;
      if (fieldList.searchMembers.length > 0) {
        var members = Object.keys(searchMembers);
        for (var _i = 0, members_1 = members; _i < members_1.length; _i++) {
          var member = members_1[_i];
          if (searchMembers[member]) {
            searchMembers[member].isSelected = false;
          }
          if (currentMembers[member]) {
            currentMembers[member].isSelected = false;
            if (this.parent.pivotCommon.filterDialog.memberTreeView.element.querySelector('li[data-memberId="' + member + '"]')) {
              var element = this.parent.pivotCommon.filterDialog.memberTreeView.element.querySelector('li[data-memberId="' + member + '"]');
              if (element && !element.querySelector("ul")) {
                this.parent.pivotCommon.eventBase.updateChildNodeStates(fieldList.filterMembers, fieldName, member, false);
              }
            }
          }
        }
        for (var _a = 0, checkedNodes_1 = checkedNodes; _a < checkedNodes_1.length; _a++) {
          var node = checkedNodes_1[_a];
          if (currentMembers[node]) {
            if (this.parent.pivotCommon.filterDialog.memberTreeView.element.querySelector('li[data-memberId="' + node + '"]')) {
              var element = this.parent.pivotCommon.filterDialog.memberTreeView.element.querySelector('li[data-memberId="' + node + '"]');
              if (element && !element.querySelector("ul")) {
                currentMembers[node].isSelected = true;
                this.parent.pivotCommon.eventBase.updateChildNodeStates(fieldList.filterMembers, fieldName, node, true);
              }
            }
          }
          if (searchMembers[node]) {
            searchMembers[node].isSelected = true;
          }
        }
      } else {
        var members = Object.keys(currentMembers);
        for (var _b = 0, members_2 = members; _b < members_2.length; _b++) {
          var member = members_2[_b];
          if (currentMembers[member].isSelected) {
            currentMembers[member].isSelected = false;
          }
        }
        for (var _c = 0, checkedNodes_2 = checkedNodes; _c < checkedNodes_2.length; _c++) {
          var node = checkedNodes_2[_c];
          if (currentMembers[node]) {
            currentMembers[node].isSelected = true;
            this.parent.pivotCommon.eventBase.updateChildNodeStates(fieldList.filterMembers, fieldName, node, true);
          }
        }
      }
    };
    PivotButton2.prototype.updateFilterState = function(fieldName) {
      var _this = this;
      var isNodeUnChecked = false;
      var filterItem = {
        items: [],
        name: fieldName,
        type: "Include"
      };
      var engineModule = this.parent.dataType === "olap" ? this.parent.olapEngineModule : this.parent.engineModule;
      if (this.parent.dataType === "olap" && engineModule && !engineModule.fieldList[fieldName].isHierarchy) {
        var cMembers = engineModule.fieldList[fieldName].members;
        var sMembers = engineModule.fieldList[fieldName].currrentMembers;
        filterItem.items = this.parent.pivotCommon.filterDialog.memberTreeView.getAllCheckedNodes();
        filterItem.levelCount = engineModule.fieldList[fieldName].levelCount;
        isNodeUnChecked = filterItem.items.length === this.parent.pivotCommon.filterDialog.memberTreeView.fields.dataSource.length ? false : true;
        if (engineModule.fieldList[fieldName].searchMembers.length > 0 && !isNodeUnChecked) {
          var cNodeLength = Object.keys(cMembers).length;
          var sNodeLength = Object.keys(sMembers).length;
          isNodeUnChecked = cNodeLength === sNodeLength && cNodeLength === filterItem.items.length ? false : true;
        }
        var filterItems = filterItem.items;
        for (var _i = 0, filterItems_3 = filterItems; _i < filterItems_3.length; _i++) {
          var node = filterItems_3[_i];
          if (engineModule.fieldList[fieldName].searchMembers.length > 0 && sMembers[node]) {
            sMembers[node].isSelected = true;
          } else if (cMembers[node]) {
            cMembers[node].isSelected = true;
          }
        }
      } else {
        for (var _a = 0, _b = this.parent.pivotCommon.searchTreeItems; _a < _b.length; _a++) {
          var item = _b[_a];
          if (item.isSelected) {
            if (this.parent.pivotCommon.isDateField) {
              filterItem.items.push(this.parent.dataSourceSettings.mode === "Server" ? item.actualText : item.name);
            } else {
              filterItem.items.push(item.htmlAttributes["data-memberId"]);
            }
          }
        }
        isNodeUnChecked = filterItem.items.length === this.parent.pivotCommon.currentTreeItems.length ? false : true;
      }
      if (this.parent.dataType === "olap") {
        this.removeDataSourceSettings(fieldName);
      }
      if (this.parent.allowDeferLayoutUpdate) {
        engineModule.fieldList[filterItem.name].filterType = filterItem.type.toLowerCase();
        engineModule.fieldList[filterItem.name].filter = [];
        for (var i = 0; i < filterItem.items.length; i++) {
          engineModule.fieldList[filterItem.name].filter.push(filterItem.items[i]);
        }
      }
      var filterEventArgs = {
        filterSettings: filterItem,
        dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings),
        cancel: false
      };
      var control = this.parent.getModuleName() === "pivotfieldlist" && this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;
      control.trigger(memberFiltering, filterEventArgs, function(observedArgs) {
        filterItem = observedArgs.filterSettings;
        if (!observedArgs.cancel) {
          var filterObject = PivotUtil.getFilterItemByName(fieldName, _this.parent.dataSourceSettings.filterSettings);
          if (filterObject) {
            for (var i2 = 0; i2 < _this.parent.dataSourceSettings.filterSettings.length; i2++) {
              if (_this.parent.dataSourceSettings.filterSettings[i2].name === fieldName) {
                _this.parent.dataSourceSettings.filterSettings.splice(i2, 1);
                break;
              }
            }
          }
          _this.parent.dataSourceSettings.filterSettings.push(filterItem);
        }
        _this.parent.pivotCommon.filterDialog.dialogPopUp.close();
        if (!observedArgs.cancel) {
          _this.refreshPivotButtonState(fieldName, isNodeUnChecked);
          if (!isNodeUnChecked) {
            _this.removeDataSourceSettings(fieldName);
            filterItem = {};
          }
          _this.parent.lastFilterInfo = filterItem;
          var actionInfo = {
            filterInfo: _this.parent.lastFilterInfo
          };
          _this.parent.actionObj.actionInfo = actionInfo;
          _this.updateDataSource(true);
          var thisObj = _this;
          if (thisObj.parent instanceof PivotFieldList) {
            thisObj.axisField.render();
          }
        }
        var pivotButtons = [].slice.call(_this.parentElement.querySelectorAll(".e-pivot-button"));
        for (var _i2 = 0, pivotButtons_1 = pivotButtons; _i2 < pivotButtons_1.length; _i2++) {
          var item2 = pivotButtons_1[_i2];
          if (item2.getAttribute("data-uid") === fieldName) {
            item2.focus();
            break;
          }
        }
      });
    };
    PivotButton2.prototype.refreshPivotButtonState = function(fieldName, isFiltered) {
      var pivotButtons = [].slice.call(this.parentElement.querySelectorAll(".e-pivot-button"));
      var selectedButton;
      for (var _i = 0, pivotButtons_2 = pivotButtons; _i < pivotButtons_2.length; _i++) {
        var item = pivotButtons_2[_i];
        if (item.getAttribute("data-uid") === fieldName) {
          selectedButton = item.querySelector("." + FILTER_COMMON_CLASS);
          break;
        }
      }
      if (selectedButton) {
        if (isFiltered) {
          removeClass([selectedButton], FILTER_CLASS);
          addClass([selectedButton], FILTERED_CLASS);
        } else {
          removeClass([selectedButton], FILTERED_CLASS);
          addClass([selectedButton], FILTER_CLASS);
        }
      }
    };
    PivotButton2.prototype.removeDataSourceSettings = function(fieldName, selectedField, type) {
      var filterSettings = this.parent.dataSourceSettings.filterSettings;
      for (var len = 0, lnt = filterSettings.length; len < lnt; len++) {
        if (this.parent.dataType === "olap" && selectedField) {
          if (!type && filterSettings[len].name === fieldName && filterSettings[len].selectedField === selectedField) {
            filterSettings.splice(len, 1);
            break;
          } else if (type) {
            if (filterSettings[len].type !== type && filterSettings[len].name === fieldName) {
              filterSettings.splice(len, 1);
              lnt--;
              len--;
            }
          }
        } else {
          if (filterSettings[len].name === fieldName) {
            filterSettings.splice(len, 1);
            if (this.parent.dataType !== "olap") {
              break;
            }
            lnt--;
            len--;
          }
        }
      }
    };
    PivotButton2.prototype.updateDropIndicator = function(e) {
      if (this.parent.isDragging) {
        removeClass([].slice.call(this.parentElement.querySelectorAll("." + DROP_INDICATOR_CLASS + "-last")), INDICATOR_HOVER_CLASS);
        removeClass([].slice.call(this.parentElement.querySelectorAll("." + DROP_INDICATOR_CLASS)), INDICATOR_HOVER_CLASS);
        if (closest(e.target, "." + DROPPABLE_CLASS)) {
          var element = closest(e.target, "." + PIVOT_BUTTON_WRAPPER_CLASS);
          addClass([element.querySelector("." + DROP_INDICATOR_CLASS)], INDICATOR_HOVER_CLASS);
        }
      }
    };
    PivotButton2.prototype.wireEvent = function(element, axis, isMeasureAvail) {
      EventHandler.add(element, "mouseover", this.updateDropIndicator, this);
      if (!isMeasureAvail) {
        if (["filters", "values"].indexOf(axis) === -1 && element.querySelector("." + PIVOT_BUTTON_CLASS) !== null) {
          EventHandler.add(element.querySelector("." + PIVOT_BUTTON_CLASS), "click", this.updateSorting, this);
        }
        if (axis !== "values" && element.querySelector("." + FILTER_COMMON_CLASS) !== null) {
          EventHandler.add(element.querySelector("." + FILTER_COMMON_CLASS), "click", this.updateFiltering, this);
        }
        if (axis === "values" && element.querySelector("." + AXISFIELD_ICON_CLASS) !== null) {
          EventHandler.add(element.querySelector("." + AXISFIELD_ICON_CLASS), "click", this.createMenuOption, this);
        }
      }
      if (element.querySelector("." + CALC_EDIT) !== null) {
        EventHandler.add(element.querySelector("." + CALC_EDIT), "click", this.openCalculatedFieldDialog, this);
      }
      if (element.querySelector("." + REMOVE_CLASS) !== null) {
        EventHandler.add(element.querySelector("." + REMOVE_CLASS), "click", this.removeButton, this);
      }
    };
    PivotButton2.prototype.unWireEvent = function(element, axis, isMeasureAvail) {
      EventHandler.remove(element, "mouseover", this.updateDropIndicator);
      if (!isMeasureAvail) {
        if (["filters", "values"].indexOf(axis) === -1 && element.querySelector("." + PIVOT_BUTTON_CLASS) !== null) {
          EventHandler.remove(element.querySelector("." + PIVOT_BUTTON_CLASS), "click", this.updateSorting);
        }
        if (axis !== "values" && element.querySelector("." + FILTER_COMMON_CLASS) !== null) {
          EventHandler.remove(element.querySelector("." + FILTER_COMMON_CLASS), "click", this.updateFiltering);
        }
        if (axis === "values" && element.querySelector("." + AXISFIELD_ICON_CLASS) !== null) {
          EventHandler.remove(element.querySelector("." + AXISFIELD_ICON_CLASS), "click", this.createMenuOption);
        }
      }
      if (element.querySelector("." + CALC_EDIT) !== null) {
        EventHandler.remove(element.querySelector("." + CALC_EDIT), "click", this.openCalculatedFieldDialog);
      }
      if (element.querySelector("." + REMOVE_CLASS) !== null) {
        EventHandler.remove(element.querySelector("." + REMOVE_CLASS), "click", this.removeButton);
      }
    };
    PivotButton2.prototype.addEventListener = function() {
      this.handlers = {
        load: this.renderPivotButton
      };
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(pivotButtonUpdate, this.handlers.load, this);
    };
    PivotButton2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(pivotButtonUpdate, this.handlers.load);
    };
    PivotButton2.prototype.destroy = function() {
      if (this.menuOption) {
        this.menuOption.destroy();
        this.menuOption = null;
      }
      var element = select("." + GROUP_CHART_VALUE_DROPDOWN_DIV, this.parentElement);
      var valueFiedDropDownList = element ? getInstance(element, DropDownList) : null;
      if (valueFiedDropDownList && !valueFiedDropDownList.isDestroyed) {
        valueFiedDropDownList.destroy();
      }
      element = select("." + GROUP_CHART_COLUMN_DROPDOWN_DIV, this.parentElement);
      var columnFieldDropDownList = element ? getInstance(element, DropDownList) : null;
      if (columnFieldDropDownList && !columnFieldDropDownList.isDestroyed) {
        columnFieldDropDownList.destroy();
        columnFieldDropDownList = null;
      }
      if (this.draggable && !this.draggable.isDestroyed) {
        this.draggable.destroy();
        this.draggable = null;
      }
      if (this.axisField) {
        this.axisField = null;
      }
      this.removeEventListener();
      this.isDestroyed = true;
    };
    return PivotButton2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/pivotfieldlist/renderer/axis-field-renderer.js
var AxisFieldRenderer = (
  /** @class */
  function() {
    function AxisFieldRenderer2(parent) {
      this.parent = parent;
    }
    AxisFieldRenderer2.prototype.render = function() {
      if (!this.parent.pivotButtonModule || this.parent.pivotButtonModule && this.parent.pivotButtonModule.isDestroyed) {
        new PivotButton(this.parent);
      }
      this.createPivotButtons();
    };
    AxisFieldRenderer2.prototype.createPivotButtons = function() {
      var rows = this.parent.dataSourceSettings.rows;
      var columns = this.parent.dataSourceSettings.columns;
      var values = this.parent.dataSourceSettings.values;
      var filters = this.parent.dataSourceSettings.filters;
      var fields = [rows, columns, values, filters];
      var parentElement = this.parent.dialogRenderer.parentElement;
      if (parentElement.querySelector("." + FIELD_LIST_CLASS + "-filters")) {
        parentElement.querySelector("." + FIELD_LIST_CLASS + "-filters").querySelector("." + AXIS_CONTENT_CLASS).innerHTML = "";
      }
      if (parentElement.querySelector("." + FIELD_LIST_CLASS + "-rows")) {
        parentElement.querySelector("." + FIELD_LIST_CLASS + "-rows").querySelector("." + AXIS_CONTENT_CLASS).innerHTML = "";
      }
      if (parentElement.querySelector("." + FIELD_LIST_CLASS + "-columns")) {
        parentElement.querySelector("." + FIELD_LIST_CLASS + "-columns").querySelector("." + AXIS_CONTENT_CLASS).innerHTML = "";
      }
      if (parentElement.querySelector("." + FIELD_LIST_CLASS + "-values")) {
        parentElement.querySelector("." + FIELD_LIST_CLASS + "-values").querySelector("." + AXIS_CONTENT_CLASS).innerHTML = "";
      }
      if (this.parent.dataType === "pivot" && this.parent.dataSourceSettings.dataSource && (!(this.parent.dataSourceSettings.dataSource instanceof DataManager) && this.parent.dataSourceSettings.dataSource.length > 0 || this.parent.dataSourceSettings.dataSource instanceof DataManager && this.parent.engineModule.data && this.parent.engineModule.data.length > 0) || this.parent.dataType === "olap" && this.parent.dataSourceSettings.url && this.parent.dataSourceSettings.url !== "" || this.parent.dataSourceSettings.mode === "Server" && this.parent.dataSourceSettings.url !== "") {
        var axis = ["rows", "columns", "values", "filters"];
        for (var len = 0, lnt = fields.length; len < lnt; len++) {
          if (fields[len]) {
            var args = {
              field: fields[len],
              axis: axis[len].toString()
            };
            this.parent.notify(pivotButtonUpdate, args);
          }
        }
      }
    };
    return AxisFieldRenderer2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/pivotfieldlist/renderer/renderer.js
var Render2 = (
  /** @class */
  function() {
    function Render3(parent) {
      this.parent = parent;
      this.parent.dialogRenderer = new DialogRenderer(this.parent);
      this.parent.treeViewModule = new TreeViewRenderer(this.parent);
      this.parent.axisTableModule = new AxisTableRenderer(this.parent);
      this.parent.axisFieldModule = new AxisFieldRenderer(this.parent);
    }
    Render3.prototype.render = function() {
      this.parent.dialogRenderer.render();
      if (!this.parent.isAdaptive) {
        this.parent.treeViewModule.render();
      }
      this.parent.axisTableModule.render();
    };
    return Render3;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/pivotfieldlist/base/field-list.js
var __extends5 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate6 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PivotFieldList = (
  /** @class */
  function(_super) {
    __extends5(PivotFieldList2, _super);
    function PivotFieldList2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.pivotChange = false;
      _this.isRequiredUpdate = true;
      _this.lastSortInfo = {};
      _this.lastFilterInfo = {};
      _this.lastAggregationInfo = {};
      _this.lastCalcFieldInfo = {};
      _this.isPopupView = false;
      _this.enableValueSorting = false;
      _this.request = typeof window !== "undefined" ? new XMLHttpRequest() : null;
      _this.remoteData = [];
      _this.actionObj = {};
      _this.destroyEngine = false;
      _this.defaultFieldListOrder = "None";
      _this.isDeferUpdateApplied = false;
      _this.isInitial = true;
      return _this;
    }
    PivotFieldList2.prototype.requiredModules = function() {
      var modules = [];
      if (this.allowCalculatedField) {
        modules.push({
          args: [this],
          member: "calculatedField"
        });
      }
      return modules;
    };
    PivotFieldList2.prototype.getAllSummaryType = function() {
      return ["Sum", "Count", "DistinctCount", "Product", "Min", "Max", "Avg", "Median", "Index", "PopulationVar", "SampleVar", "PopulationStDev", "SampleStDev", "RunningTotals", "PercentageOfGrandTotal", "PercentageOfColumnTotal", "PercentageOfRowTotal", "PercentageOfParentColumnTotal", "PercentageOfParentRowTotal", "DifferenceFrom", "PercentageOfDifferenceFrom", "PercentageOfParentTotal"];
    };
    PivotFieldList2.prototype.preRender = function() {
      if (this.dataSourceSettings && this.dataSourceSettings.providerType === "SSAS") {
        this.olapEngineModule = new OlapEngine();
        this.dataType = "olap";
      } else {
        this.engineModule = new PivotEngine();
        this.dataType = "pivot";
      }
      this.isAdaptive = Browser.isDevice;
      this.globalize = new Internationalization(this.locale);
      this.renderModule = new Render2(this);
      this.defaultLocale = {
        staticFieldList: "Pivot Field List",
        fieldList: "Field List",
        dropFilterPrompt: "Drop filter here",
        dropColPrompt: "Drop column here",
        dropRowPrompt: "Drop row here",
        dropValPrompt: "Drop value here",
        addPrompt: "Add field here",
        adaptiveFieldHeader: "Choose field",
        centerHeader: "Drag fields between axes below:",
        add: "Add",
        drag: "Drag",
        filter: "Filter",
        filtered: "Filtered",
        sort: "Sort",
        remove: "Remove",
        filters: "Filters",
        rows: "Rows",
        columns: "Columns",
        values: "Values",
        CalculatedField: "Calculated Field",
        createCalculatedField: "Create Calculated Field",
        fieldName: "Enter the field name",
        error: "Error",
        invalidFormula: "Invalid formula.",
        dropText: 'Example: ("Sum(Order_Count)" + "Sum(In_Stock)") * 250',
        dropTextMobile: "Add fields and edit formula here.",
        dropAction: "Calculated field cannot be place in any other region except value axis.",
        search: "Search",
        close: "Close",
        cancel: "Cancel",
        delete: "Delete",
        alert: "Alert",
        warning: "Warning",
        ok: "OK",
        allFields: "All Fields",
        formula: "Formula",
        fieldExist: "A field already exists in this name. Please enter a different name.",
        confirmText: "A calculation field already exists in this name. Do you want to replace it?",
        noMatches: "No matches",
        format: "Summaries values by",
        edit: "Edit",
        clear: "Clear",
        clearCalculatedField: "Clear edited field info",
        editCalculatedField: "Edit calculated field",
        sortAscending: "Sort ascending order",
        sortDescending: "Sort descending order",
        sortNone: "Sort data order",
        formulaField: "Drag and drop fields to formula",
        dragField: "Drag field to formula",
        clearFilter: "Clear",
        by: "by",
        enterValue: "Enter value",
        chooseDate: "Enter date",
        all: "All",
        multipleItems: "Multiple items",
        Equals: "Equals",
        DoesNotEquals: "Does Not Equal",
        BeginWith: "Begins With",
        DoesNotBeginWith: "Does Not Begin With",
        EndsWith: "Ends With",
        DoesNotEndsWith: "Does Not End With",
        Contains: "Contains",
        DoesNotContains: "Does Not Contain",
        GreaterThan: "Greater Than",
        GreaterThanOrEqualTo: "Greater Than Or Equal To",
        LessThan: "Less Than",
        LessThanOrEqualTo: "Less Than Or Equal To",
        Between: "Between",
        NotBetween: "Not Between",
        Before: "Before",
        BeforeOrEqualTo: "Before Or Equal To",
        After: "After",
        AfterOrEqualTo: "After Or Equal To",
        member: "Member",
        label: "Label",
        date: "Date",
        value: "Value",
        labelTextContent: "Show the items for which the label",
        dateTextContent: "Show the items for which the date",
        valueTextContent: "Show the items for which",
        And: "and",
        Sum: "Sum",
        Count: "Count",
        DistinctCount: "Distinct Count",
        Product: "Product",
        Avg: "Avg",
        Median: "Median",
        Min: "Min",
        Max: "Max",
        Index: "Index",
        SampleStDev: "Sample StDev",
        PopulationStDev: "Population StDev",
        SampleVar: "Sample Var",
        PopulationVar: "Population Var",
        RunningTotals: "Running Totals",
        DifferenceFrom: "Difference From",
        PercentageOfDifferenceFrom: "% of Difference From",
        PercentageOfGrandTotal: "% of Grand Total",
        PercentageOfColumnTotal: "% of Column Total",
        PercentageOfRowTotal: "% of Row Total",
        PercentageOfParentTotal: "% of Parent Total",
        PercentageOfParentColumnTotal: "% of Parent Column Total",
        PercentageOfParentRowTotal: "% of Parent Row Total",
        MoreOption: "More...",
        Years: "Years",
        Quarters: "Quarters",
        Months: "Months",
        Days: "Days",
        Hours: "Hours",
        Minutes: "Minutes",
        Seconds: "Seconds",
        apply: "Apply",
        valueFieldSettings: "Value field settings",
        sourceName: "Field name :",
        sourceCaption: "Field caption",
        summarizeValuesBy: "Summarize values by",
        baseField: "Base field",
        baseItem: "Base item",
        example: "e.g:",
        editorDataLimitMsg: " more items. Search to refine further.",
        deferLayoutUpdate: "Defer Layout Update",
        null: "null",
        undefined: "undefined",
        groupOutOfRange: "Out of Range",
        fieldDropErrorAction: "The field you are moving cannot be placed in that area of the report",
        memberType: "Field Type",
        selectedHierarchy: "Parent Hierarchy",
        formatString: "Format",
        expressionField: "Expression",
        olapDropText: "Example: [Measures].[Order Quantity] + ([Measures].[Order Quantity] * 0.10)",
        customFormat: "Enter custom format string",
        numberFormatString: "Example: C, P, 0000 %, ###0.##0#, etc.",
        Measure: "Measure",
        Dimension: "Dimension",
        Standard: "Standard",
        Currency: "Currency",
        Percent: "Percent",
        Custom: "Custom",
        blank: "(Blank)",
        fieldTooltip: 'Drag and drop fields to create an expression. And, if you want to edit the existing calculated fields! You can achieve it by simply selecting the field under "Calculated Members".',
        fieldTitle: "Field Name",
        QuarterYear: "Quarter Year",
        caption: "Field Caption",
        copy: "Copy",
        of: "of",
        group: "Group",
        removeCalculatedField: "Are you sure you want to delete this calculated field?",
        yes: "Yes",
        no: "No",
        None: "None",
        qtr: "Qtr",
        grandTotal: "Grand Total"
      };
      this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale);
      this.isDragging = false;
      this.isDeferLayoutUpdate = isNullOrUndefined(this.isDeferLayoutUpdate) && !this.isPopupView ? this.allowDeferLayoutUpdate : this.isDeferLayoutUpdate;
      this.wireEvent();
    };
    PivotFieldList2.prototype.frameCustomProperties = function(fieldListData, fieldList) {
      if (this.pivotGridModule) {
        this.pivotGridModule.updatePageSettings(false);
      }
      var isTabular = this.pivotGridModule ? this.pivotGridModule.isTabular : false;
      var pageSettings = this.pivotGridModule ? this.pivotGridModule.pageSettings : this.pageSettings;
      var isPaging = this.pivotGridModule ? this.pivotGridModule.enablePaging : false;
      var isVirtualization = this.pivotGridModule ? this.pivotGridModule.enableVirtualization : false;
      var enableHtmlSanitizer = this.pivotGridModule ? this.pivotGridModule.enableHtmlSanitizer : this.enableHtmlSanitizer;
      var localeObj = this.pivotGridModule ? this.pivotGridModule.localeObj : this.staticPivotGridModule ? this.staticPivotGridModule.localeObj : this.localeObj;
      var isDrillThrough = this.pivotGridModule ? this.pivotGridModule.allowDrillThrough || this.pivotGridModule.editSettings.allowEditing : true;
      var enableValueSorting = this.pivotGridModule ? this.pivotGridModule.enableValueSorting : void 0;
      var allowDataCompression = this.pivotGridModule && this.pivotGridModule.allowDataCompression ? this.pivotGridModule.allowDataCompression : false;
      var enableOptimizedRendering = this.pivotGridModule && this.pivotGridModule.enableVirtualization && this.pivotGridModule.virtualScrollSettings && this.pivotGridModule.virtualScrollSettings.allowSinglePage;
      var customProperties;
      if (this.dataType === "olap") {
        customProperties = {
          mode: "",
          savedFieldList: fieldList ? fieldList : void 0,
          savedFieldListData: fieldListData ? fieldListData : void 0,
          pageSettings,
          enableValueSorting,
          isDrillThrough,
          localeObj,
          enableVirtualization: isVirtualization,
          allowDataCompression
        };
      } else {
        customProperties = {
          mode: "",
          savedFieldList: void 0,
          pageSettings,
          enableValueSorting,
          isDrillThrough,
          localeObj,
          clonedReport: this.clonedReport,
          globalize: this.globalize,
          currenyCode: this.currencyCode,
          enablePaging: isPaging,
          enableVirtualization: isVirtualization,
          enableHtmlSanitizer,
          allowDataCompression,
          enableOptimizedRendering,
          isTabularLayout: isTabular
        };
      }
      return customProperties;
    };
    PivotFieldList2.prototype.render = function() {
      if (this.dataType === "pivot" && this.dataSourceSettings.url && this.dataSourceSettings.url !== "") {
        if (this.dataSourceSettings.mode === "Server") {
          this.guid = PivotUtil.generateUUID();
          this.initialLoad();
        } else {
          var request = new Fetch(this.dataSourceSettings.url, "GET");
          request.send().then(function(response) {
            return typeof response === "string" ? response : response.text();
          }).then(this.onReadyStateChange.bind(this));
        }
      } else {
        this.initialLoad();
      }
    };
    PivotFieldList2.prototype.getEngine = function(action, drillItem, sortItem, aggField, cField, filterItem, memberName, rawDataArgs, editArgs) {
      var _this = this;
      this.currentAction = action;
      if (this.pivotGridModule) {
        this.pivotGridModule.updatePageSettings(false);
      }
      var customProperties = {
        pageSettings: this.pivotGridModule ? JSON.parse(this.pivotGridModule.getPageSettings()).pageSettings : void 0,
        enableValueSorting: this.pivotGridModule ? this.pivotGridModule.enableValueSorting : void 0,
        enableDrillThrough: this.pivotGridModule ? this.pivotGridModule.allowDrillThrough || this.pivotGridModule.editSettings.allowEditing : true,
        locale: JSON.stringify(PivotUtil.getLocalizedObject(this)),
        savedFieldList: action === "onDrop" && this.engineModule.fieldList !== null ? PivotUtil.getClonedFieldList(this.engineModule.fieldList, true) : void 0,
        enableOptimizedRendering: this.pivotGridModule && this.pivotGridModule.enableVirtualization && this.pivotGridModule.virtualScrollSettings && this.pivotGridModule.virtualScrollSettings.allowSinglePage,
        requestType: "string",
        headers: {
          "Content-type": "application/json"
        },
        enablePaging: this.pivotGridModule && this.pivotGridModule.enablePaging,
        enableVirtualization: this.pivotGridModule && this.pivotGridModule.enableVirtualization,
        allowDataCompression: this.pivotGridModule && this.pivotGridModule.allowDataCompression
      };
      if (this.request.readyState === XMLHttpRequest.UNSENT || this.request.readyState === XMLHttpRequest.OPENED) {
        this.request.withCredentials = false;
      }
      var params = {
        request: this.request,
        dataSourceSettings: JSON.parse(this.getPersistData()).dataSourceSettings,
        action,
        customProperties: {},
        internalProperties: customProperties,
        drillItem,
        sortItem,
        aggregatedItem: aggField,
        calculatedItem: cField,
        filterItem,
        memberName,
        fetchRawDataArgs: rawDataArgs,
        editArgs,
        hash: this.pivotGridModule ? this.pivotGridModule.guid : this.staticPivotGridModule ? this.staticPivotGridModule.guid : this.guid,
        isGroupingUpdated: this.currentAction === "onRefresh" && this.dataSourceSettings.groupSettings.length > 0 ? true : this.pivotGridModule && this.pivotGridModule.groupingModule ? this.pivotGridModule.groupingModule.isUpdate : false
      };
      this.trigger(beforeServiceInvoke, params, function(observedArgs) {
        _this.request = observedArgs.request;
        params.internalProperties = observedArgs.internalProperties;
        params.customProperties = observedArgs.customProperties;
        params.dataSourceSettings = observedArgs.dataSourceSettings;
        params.calculatedItem = observedArgs.calculatedItem;
        params.drillItem = observedArgs.drillItem;
        params.editArgs = observedArgs.editArgs;
        params.fetchRawDataArgs = observedArgs.fetchRawDataArgs;
        params.filterItem = observedArgs.filterItem;
        params.hash = observedArgs.hash;
        params.memberName = observedArgs.memberName;
        params.sortItem = observedArgs.sortItem;
      });
      this.request.open("POST", this.dataSourceSettings.url, true);
      this.request.onreadystatechange = this.onSuccess.bind(this);
      var keys = Object.keys(params.internalProperties.headers);
      for (var i = 0; i < keys.length; i++) {
        var headerKey = keys[i];
        var headerValue = String(params.internalProperties.headers[headerKey]);
        this.request.setRequestHeader(headerKey, headerValue);
      }
      if (params.internalProperties.requestType === "string") {
        this.request.send(JSON.stringify(params));
      } else if (params.internalProperties.requestType === "base64") {
        this.request.send(btoa(JSON.stringify(params)));
      }
    };
    PivotFieldList2.prototype.onSuccess = function() {
      if (this.request.readyState === XMLHttpRequest.DONE) {
        try {
          var params = {
            action: this.currentAction,
            response: this.request.responseText
          };
          this.trigger(afterServiceInvoke, params);
          var engine = JSON.parse(this.request.responseText);
          if (this.currentAction === "fetchFieldMembers") {
            var currentMembers = JSON.parse(engine.members);
            var dateMembers = [];
            var members = {};
            this.engineModule.globalize = !isNullOrUndefined(this.globalize) ? this.globalize : new Internationalization();
            this.engineModule.formatFields = this.engineModule.setFormattedFields(this.dataSourceSettings.formatSettings);
            var isDateField = PivotUtil.isDateField(engine.memberName, this.engineModule);
            var isNumberType = this.engineModule.fieldList[engine.memberName].type === "number";
            var keys = Object.keys(currentMembers);
            for (var i = 0, j = keys.length; i < j; i++) {
              var values = currentMembers[keys[i]];
              var formattedValue = isDateField ? this.engineModule.getFormattedValue(values.Name, engine.memberName) : {
                formattedText: values.Caption
              };
              members[keys[i]] = {
                index: values.Index,
                ordinal: values.Ordinal,
                isDrilled: values.IsDrilled,
                caption: formattedValue.formattedText
              };
              dateMembers.push({
                formattedText: formattedValue.formattedText,
                actualText: isDateField ? formattedValue.actualText : isNumberType ? !isNaN(Number(values.Name)) ? Number(values.Name) : values.Name : values.Name
              });
            }
            this.engineModule.fieldList[engine.memberName].members = members;
            this.engineModule.fieldList[engine.memberName].dateMember = dateMembers;
            this.pivotButtonModule.updateFilterEvents();
          } else {
            var fList = JSON.parse(engine.fieldList);
            if (this.engineModule.fieldList) {
              var keys = Object.keys(this.engineModule.fieldList);
              for (var i = 0; i < keys.length; i++) {
                if (this.engineModule.fieldList[keys[i]] && fList[keys[i]]) {
                  fList[keys[i]].dateMember = this.engineModule.fieldList[keys[i]].dateMember;
                  fList[keys[i]].formattedMembers = this.engineModule.fieldList[keys[i]].formattedMembers;
                  fList[keys[i]].members = this.engineModule.fieldList[keys[i]].members;
                }
              }
            }
            this.engineModule.fieldList = fList;
            this.engineModule.fields = JSON.parse(engine.fields);
            this.engineModule.rowCount = JSON.parse(engine.pivotCount).RowCount;
            this.engineModule.columnCount = JSON.parse(engine.pivotCount).ColumnCount;
            this.engineModule.rowStartPos = JSON.parse(engine.pivotCount).RowStartPosition;
            this.engineModule.colStartPos = JSON.parse(engine.pivotCount).ColumnStartPosition;
            this.engineModule.rowFirstLvl = JSON.parse(engine.pivotCount).RowFirstLevel;
            this.engineModule.colFirstLvl = JSON.parse(engine.pivotCount).ColumnFirstLevel;
            if (this.pivotGridModule && this.pivotGridModule.enablePaging) {
              this.engineModule.rowPageCount = JSON.parse(engine.pivotCount).RowPageCount;
              this.engineModule.columnPageCount = JSON.parse(engine.pivotCount).ColumnPageCount;
            }
            var rowPos = void 0;
            var pivotValues = JSON.parse(engine.pivotValue);
            for (var rCnt = 0; rCnt < pivotValues.length; rCnt++) {
              if (pivotValues[rCnt] && pivotValues[rCnt][0] && pivotValues[rCnt][0].axis === "row") {
                rowPos = rCnt;
                break;
              }
            }
            this.engineModule.headerContent = PivotUtil.frameContent(pivotValues, "header", rowPos, this);
            this.engineModule.pageSettings = this.pivotGridModule ? this.pivotGridModule.pageSettings : void 0;
            var valueSort = JSON.parse(engine.dataSourceSettings).valueSortSettings;
            this.engineModule.valueSortSettings = {
              headerText: valueSort.headerText,
              headerDelimiter: valueSort.headerDelimiter,
              sortOrder: valueSort.sortOrder,
              columnIndex: valueSort.columnIndex
            };
            this.engineModule.pivotValues = pivotValues;
            this.engineModule.isEmptyData = this.dataSourceSettings.values.length === 0 ? true : false;
          }
        } catch (error) {
          this.engineModule.pivotValues = [];
        }
        if (this.currentAction !== "fetchFieldMembers") {
          if (this.isInitial && !this.isPopupView) {
            this.initEngine();
            this.isInitial = false;
          } else {
            this.enginePopulatedEventMethod(this, true, false);
          }
          if (this.calculatedFieldModule && this.currentAction === "onCalcOperation") {
            this.calculatedFieldModule.endDialog();
            if (this.calculatedFieldModule.isRequireUpdate) {
              this.calculatedFieldModule.isRequireUpdate = false;
            }
          }
          if (this.pivotGridModule && this.pivotGridModule.calculatedFieldModule && this.pivotGridModule.calculatedFieldModule.isRequireUpdate) {
            this.pivotGridModule.calculatedFieldModule.endDialog();
            this.pivotGridModule.calculatedFieldModule.isRequireUpdate = false;
          }
        }
      }
    };
    PivotFieldList2.prototype.onReadyStateChange = function(result) {
      var dataSource = [];
      if (this.dataSourceSettings.type === "CSV") {
        var jsonObject = result.split(/\r?\n|\r/);
        for (var i = 0; i < jsonObject.length; i++) {
          if (!isNullOrUndefined(jsonObject[i]) && jsonObject[i] !== "") {
            dataSource.push(jsonObject[i].split(","));
          }
        }
      } else {
        try {
          dataSource = JSON.parse(result);
        } catch (error) {
          dataSource = [];
        }
      }
      if (dataSource && dataSource.length > 0) {
        this.setProperties({
          dataSourceSettings: {
            dataSource
          }
        }, true);
      }
      this.initialLoad();
    };
    PivotFieldList2.prototype.initialLoad = function() {
      var _this = this;
      var loadArgs = {
        dataSourceSettings: this.dataSourceSettings,
        defaultFieldListOrder: this.defaultFieldListOrder
      };
      this.trigger(load, loadArgs, function(observedArgs) {
        _this.dataSourceSettings = observedArgs.dataSourceSettings;
        _this.defaultFieldListOrder = loadArgs.defaultFieldListOrder;
        addClass([_this.element], ROOT);
        if (_this.enableRtl) {
          addClass([_this.element], RTL);
        } else {
          removeClass([_this.element], RTL);
        }
        if (_this.isAdaptive) {
          addClass([_this.element], DEVICE);
        } else {
          removeClass([_this.element], DEVICE);
        }
        if (_this.cssClass) {
          addClass([_this.element], _this.cssClass.split(" "));
        }
        _this.notify(initialLoad, {});
      });
    };
    PivotFieldList2.prototype.wireEvent = function() {
      this.on(initialLoad, this.generateData, this);
      this.on(dataReady, this.fieldListRender, this);
    };
    PivotFieldList2.prototype.unWireEvent = function() {
      if (this.pivotGridModule && this.pivotGridModule.isDestroyed) {
        return;
      }
      this.off(initialLoad, this.generateData);
      this.off(dataReady, this.fieldListRender);
    };
    PivotFieldList2.prototype.getPersistData = function() {
      var keyEntity = ["dataSourceSettings"];
      return this.addOnPersist(keyEntity);
    };
    PivotFieldList2.prototype.getModuleName = function() {
      return "pivotfieldlist";
    };
    PivotFieldList2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var requireRefresh = false;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "locale":
            _super.prototype.refresh.call(this);
            break;
          case "dataSourceSettings":
            if (newProp.dataSourceSettings && (!isNullOrUndefined(newProp.dataSourceSettings.dataSource) && this.clonedDataSet !== newProp.dataSourceSettings.dataSource && newProp.dataSourceSettings.groupSettings || Object.keys(newProp.dataSourceSettings).length === 1 && Object.keys(newProp.dataSourceSettings)[0] === "dataSource" && this.dataSourceSettings.groupSettings.length > 0)) {
              this.clonedDataSet = newProp.dataSourceSettings.dataSource;
              this.engineModule.groupingFields = {};
            }
            if (newProp.dataSourceSettings && Object.keys(newProp.dataSourceSettings).length === 1 && newProp.dataSourceSettings.groupSettings && this.dataType === "pivot") {
              var control = !this.isPopupView ? this.staticPivotGridModule : this.pivotGridModule;
              if (control) {
                control.updateGroupingReport(newProp.dataSourceSettings.groupSettings, "Date");
              }
            }
            if (!isNullOrUndefined(newProp.dataSourceSettings.dataSource) || this.dataType === "olap" && !isNullOrUndefined(newProp.dataSourceSettings.url)) {
              if (this.dataType !== "olap") {
                if (!isNullOrUndefined(this.savedDataSourceSettings)) {
                  PivotUtil.updateDataSourceSettings(this.staticPivotGridModule, this.savedDataSourceSettings);
                  this.savedDataSourceSettings = void 0;
                }
                if (newProp.dataSourceSettings.dataSource && newProp.dataSourceSettings.dataSource.length === 0 && !isNullOrUndefined(this.staticPivotGridModule)) {
                  this.savedDataSourceSettings = PivotUtil.getClonedDataSourceSettings(this.staticPivotGridModule.dataSourceSettings);
                  this.staticPivotGridModule.setProperties({
                    dataSourceSettings: {
                      rows: [],
                      columns: [],
                      values: [],
                      filters: []
                    }
                  }, true);
                }
              }
              if (this.dataType === "pivot") {
                this.engineModule.fieldList = null;
                this.engineModule.isEmptyData = true;
                this.engineModule.data = [];
                this.engineModule.pivotValues = [];
                this.engineModule.groupingFieldsInfo = {};
              } else if (this.dataType === "olap") {
                this.olapEngineModule.fieldList = {};
                this.olapEngineModule.fieldListData = void 0;
                this.olapEngineModule.isEmptyData = true;
              }
              if (!isNullOrUndefined(this.staticPivotGridModule)) {
                this.staticPivotGridModule.pivotValues = [];
              }
              this.initialLoad();
            }
            if (PivotUtil.isButtonIconRefesh(prop, oldProp, newProp)) {
              if (this.isPopupView && this.pivotGridModule && this.pivotGridModule.showGroupingBar && this.pivotGridModule.groupingBarModule) {
                var filters = PivotUtil.cloneFieldSettings(this.dataSourceSettings.filters);
                var values = PivotUtil.cloneFieldSettings(this.dataSourceSettings.values);
                var rows = PivotUtil.cloneFieldSettings(this.dataSourceSettings.rows);
                var columns = PivotUtil.cloneFieldSettings(this.dataSourceSettings.columns);
                this.pivotGridModule.setProperties({
                  dataSourceSettings: {
                    rows,
                    columns,
                    values,
                    filters
                  }
                }, true);
                this.pivotGridModule.axisFieldModule.render();
              } else if (!this.isPopupView && this.staticPivotGridModule && !this.staticPivotGridModule.isDestroyed) {
                var pivot = this.staticPivotGridModule;
                if (pivot.showGroupingBar && pivot.groupingBarModule) {
                  pivot.axisFieldModule.render();
                }
                if (pivot.showFieldList && pivot.pivotFieldListModule) {
                  var rows = PivotUtil.cloneFieldSettings(pivot.dataSourceSettings.rows);
                  var columns = PivotUtil.cloneFieldSettings(pivot.dataSourceSettings.columns);
                  var values = PivotUtil.cloneFieldSettings(pivot.dataSourceSettings.values);
                  var filters = PivotUtil.cloneFieldSettings(pivot.dataSourceSettings.filters);
                  pivot.pivotFieldListModule.setProperties({
                    dataSourceSettings: {
                      rows,
                      columns,
                      values,
                      filters
                    }
                  }, true);
                  pivot.pivotFieldListModule.axisFieldModule.render();
                  if (pivot.pivotFieldListModule.treeViewModule.fieldTable && !pivot.isAdaptive) {
                    pivot.pivotFieldListModule.notify(treeViewUpdate, {});
                  }
                }
              }
              this.axisFieldModule.render();
              if (this.treeViewModule.fieldTable && !this.isAdaptive) {
                this.notify(treeViewUpdate, {});
              }
            } else {
              this.remoteData = [];
              if (this.dataType === "pivot" && this.dataSourceSettings.url && this.dataSourceSettings.url !== "" && ("type" in newProp.dataSourceSettings || "url" in newProp.dataSourceSettings)) {
                this.engineModule.fieldList = null;
                this.render();
              }
            }
            break;
          case "aggregateTypes":
            if (this.axisFieldModule) {
              this.axisFieldModule.render();
            }
            if (this.pivotGridModule && this.pivotGridModule.axisFieldModule) {
              this.pivotGridModule.setProperties({
                aggregateTypes: newProp.aggregateTypes
              }, true);
              this.pivotGridModule.axisFieldModule.render();
            }
            break;
          case "showValuesButton":
            if (this.axisFieldModule) {
              this.axisFieldModule.render();
            }
            if (this.pivotGridModule && this.pivotGridModule.showGroupingBar && this.pivotGridModule.groupingBarModule && this.pivotGridModule.axisFieldModule) {
              this.pivotGridModule.setProperties({
                showValuesButton: newProp.showValuesButton
              }, true);
              this.pivotGridModule.axisFieldModule.render();
            }
            break;
          case "enableRtl":
            if (this.enableRtl) {
              addClass([this.element], RTL);
            } else {
              removeClass([this.element], RTL);
            }
            requireRefresh = true;
            break;
          case "enableFieldSearching":
          case "allowCalculatedField":
            this.refresh();
            break;
          case "allowDeferLayoutUpdate":
            this.isDeferLayoutUpdate = this.allowDeferLayoutUpdate;
            this.fieldListRender();
            break;
        }
        if (requireRefresh) {
          this.fieldListRender();
        }
      }
    };
    PivotFieldList2.prototype.initEngine = function() {
      var _this = this;
      if (this.dataType === "pivot") {
        var data = !isNullOrUndefined(this.dataSourceSettings.dataSource) ? this.dataSourceSettings.dataSource[0] : !isNullOrUndefined(this.engineModule.data) ? this.engineModule.data[0] : void 0;
        if (data && this.pivotCommon) {
          var isArray = Object.prototype.toString.call(data) === "[object Array]";
          if (isArray && this.dataSourceSettings.type === "JSON") {
            this.pivotCommon.errorDialog.createErrorDialog(this.localeObj.getConstant("error"), this.localeObj.getConstant("invalidJSON"));
            return;
          } else if (!isArray && this.dataSourceSettings.type === "CSV") {
            this.pivotCommon.errorDialog.createErrorDialog(this.localeObj.getConstant("error"), this.localeObj.getConstant("invalidCSV"));
            return;
          }
        }
      }
      var args = {
        dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings)
      };
      var control = this.isPopupView ? this.pivotGridModule : this;
      control.trigger(enginePopulating, args, function(observedArgs) {
        PivotUtil.updateDataSourceSettings(_this, observedArgs.dataSourceSettings);
        if (_this.dataType === "pivot") {
          if (_this.dataSourceSettings.groupSettings && _this.dataSourceSettings.groupSettings.length > 0) {
            var pivotDataSet = _this.engineModule.data;
            _this.clonedDataSet = _this.clonedDataSet ? _this.clonedDataSet : _this.dataSourceSettings.type === "CSV" ? PivotUtil.getClonedCSVData(pivotDataSet) : PivotUtil.getClonedData(pivotDataSet);
            var dataSourceSettings = JSON.parse(_this.getPersistData()).dataSourceSettings;
            dataSourceSettings.dataSource = [];
            _this.clonedReport = _this.clonedReport ? _this.clonedReport : dataSourceSettings;
          }
          var customProperties = _this.frameCustomProperties();
          customProperties.enableValueSorting = _this.staticPivotGridModule ? _this.staticPivotGridModule.enableValueSorting : _this.enableValueSorting;
          if (_this.dataSourceSettings.mode !== "Server") {
            _this.engineModule.renderEngine(_this.dataSourceSettings, customProperties, _this.aggregateCellInfo ? _this.getValueCellInfo.bind(_this) : void 0, _this.onHeadersSort ? _this.getHeaderSortInfo.bind(_this) : void 0);
          }
          _this.pivotFieldList = _this.engineModule.fieldList;
          var eventArgs = {
            pivotFieldList: _this.pivotFieldList,
            pivotValues: _this.engineModule.pivotValues
          };
          var this$_1 = _this;
          control.trigger(enginePopulated, eventArgs, function(observedArgs2) {
            this$_1.pivotFieldList = observedArgs2.pivotFieldList;
            this$_1.engineModule.pivotValues = observedArgs2.pivotValues;
            this$_1.notify(dataReady, {});
            this$_1.trigger(dataBound);
          });
        } else if (_this.dataType === "olap") {
          PivotUtil.renderOlapEngine(_this);
          _this.pivotFieldList = _this.olapEngineModule.fieldList;
          var eventArgs = {
            pivotFieldList: _this.pivotFieldList,
            pivotValues: _this.olapEngineModule.pivotValues
          };
          var this$_2 = _this;
          control.trigger(enginePopulated, eventArgs, function(observedArgs2) {
            this$_2.pivotFieldList = observedArgs2.pivotFieldList;
            this$_2.olapEngineModule.pivotValues = observedArgs2.pivotValues;
            this$_2.notify(dataReady, {});
            this$_2.trigger(dataBound);
          });
        }
      });
      if (this.defaultFieldListOrder !== "None") {
        if (this.treeViewModule.fieldTable && !this.isAdaptive) {
          this.notify(treeViewUpdate, {});
        }
      }
    };
    PivotFieldList2.prototype.generateData = function() {
      this.pivotFieldList = {};
      if (this.dataSourceSettings && (this.dataSourceSettings.dataSource || this.dataSourceSettings.url)) {
        if (this.dataSourceSettings.url !== "" && this.dataType === "olap" || !isNullOrUndefined(this.dataSourceSettings.dataSource) && this.dataSourceSettings.dataSource.length > 0) {
          if (this.dataType === "pivot") {
            this.engineModule.data = this.dataSourceSettings.dataSource;
          }
          this.initEngine();
        } else if (this.dataSourceSettings.dataSource instanceof DataManager) {
          if (this.dataType === "pivot" && this.remoteData.length > 0) {
            this.engineModule.data = this.remoteData;
            this.initEngine();
          } else {
            setTimeout(this.getData.bind(this), 100);
          }
        } else {
          if (this.dataSourceSettings.mode === "Server") {
            this.getEngine("onRefresh");
          } else {
            this.notify(dataReady, {});
          }
        }
      } else {
        this.notify(dataReady, {});
        this.trigger(dataBound);
      }
    };
    PivotFieldList2.prototype.getValueCellInfo = function(aggregateObj) {
      var args = aggregateObj;
      this.trigger(aggregateCellInfo, args);
      return args;
    };
    PivotFieldList2.prototype.getHeaderSortInfo = function(sortingObj) {
      var args = sortingObj;
      this.trigger(onHeadersSort, args);
      return args;
    };
    PivotFieldList2.prototype.getData = function() {
      if (this.dataSourceSettings.dataSource.defaultQuery) {
        this.dataSourceSettings.dataSource.executeQuery(this.dataSourceSettings.dataSource.defaultQuery).then(this.executeQuery.bind(this));
      } else {
        this.dataSourceSettings.dataSource.executeQuery(new Query()).then(this.executeQuery.bind(this));
      }
    };
    PivotFieldList2.prototype.executeQuery = function(e) {
      this.engineModule.data = e.result;
      this.initEngine();
    };
    PivotFieldList2.prototype.fieldListRender = function() {
      this.element.innerHTML = "";
      var showDialog;
      if (this.renderMode === "Popup" && this.dialogRenderer.fieldListDialog && !this.dialogRenderer.fieldListDialog.isDestroyed) {
        showDialog = this.dialogRenderer.fieldListDialog.visible;
        this.dialogRenderer.fieldListDialog.destroy();
        remove(document.getElementById(this.element.id + "_Container"));
      }
      this.renderModule.render();
      if (this.renderMode === "Popup") {
        this.fieldListSpinnerElement = this.dialogRenderer.fieldListDialog.element;
        if (showDialog) {
          this.dialogRenderer.fieldListDialog.show();
        }
      } else {
        this.fieldListSpinnerElement = this.element.querySelector(".e-pivotfieldlist-container");
      }
      if (this.spinnerTemplate) {
        createSpinner({
          target: this.fieldListSpinnerElement,
          template: this.spinnerTemplate,
          cssClass: this.cssClass ? this.cssClass : void 0
        }, this.createElement);
      } else {
        createSpinner({
          target: this.fieldListSpinnerElement,
          cssClass: this.cssClass ? this.cssClass : void 0
        }, this.createElement);
      }
      var args = {
        pivotEngine: this.dataType === "olap" ? this.olapEngineModule : this.engineModule,
        dataSourceSettings: this.dataSourceSettings,
        id: this.element.id,
        element: this.renderMode === "Popup" ? this.dialogRenderer.fieldListDialog.element : select("#" + this.element.id + "_Container", this.element),
        moduleName: this.getModuleName(),
        enableRtl: this.enableRtl,
        enableHtmlSanitizer: this.enableHtmlSanitizer,
        isAdaptive: this.isAdaptive,
        renderMode: this.renderMode,
        localeObj: this.localeObj,
        dataType: this.dataType,
        cssClass: this.cssClass
      };
      this.pivotCommon = new PivotCommon(args);
      this.pivotCommon.control = this;
      if (this.allowDeferLayoutUpdate) {
        this.clonedDataSource = PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings);
        if (this.dataType === "olap") {
          this.clonedFieldListData = PivotUtil.cloneOlapFieldSettings(this.olapEngineModule.fieldListData);
        }
        this.clonedFieldList = PivotUtil.getClonedFieldList(this.pivotFieldList);
      }
      var control = !this.isPopupView ? this.staticPivotGridModule : this.pivotGridModule;
      if (control && control.toolbarModule) {
        PivotUtil.toggleFieldListIconVisibility(control);
      }
    };
    PivotFieldList2.prototype.getFieldCaption = function(dataSourceSettings) {
      var captionData = this.getFields(dataSourceSettings);
      var engineModule = this.dataType === "olap" ? this.olapEngineModule : this.engineModule;
      if (captionData.length > 0 && engineModule && engineModule.fieldList) {
        var lnt = captionData.length;
        while (lnt--) {
          if (captionData[lnt]) {
            for (var _i = 0, _a = captionData[lnt]; _i < _a.length; _i++) {
              var obj = _a[_i];
              if (obj) {
                if (engineModule.fieldList[obj.name]) {
                  if (obj.caption) {
                    engineModule.fieldList[obj.name].caption = obj.caption;
                  } else {
                    engineModule.fieldList[obj.name].caption = obj.name;
                  }
                }
              }
            }
          }
        }
      } else {
        return;
      }
    };
    PivotFieldList2.prototype.getFields = function(dataSourceSettings) {
      return [dataSourceSettings.rows, dataSourceSettings.columns, dataSourceSettings.values, dataSourceSettings.filters];
    };
    PivotFieldList2.prototype.updateDataSource = function(isTreeViewRefresh, isEngineRefresh) {
      var _this = this;
      if (this.pivotGridModule) {
        this.pivotGridModule.showWaitingPopup();
      }
      showSpinner(this.fieldListSpinnerElement);
      var pivot = this;
      var control = pivot.isPopupView ? pivot.pivotGridModule : pivot;
      var isOlapDataRefreshed = false;
      var pageSettings = pivot.pivotGridModule && (pivot.pivotGridModule.enableVirtualization || pivot.pivotGridModule.enablePaging) ? pivot.pivotGridModule.pageSettings : void 0;
      var isCalcChange = Object.keys(pivot.lastCalcFieldInfo).length > 0 ? true : false;
      var isSorted = Object.keys(pivot.lastSortInfo).length > 0 ? true : false;
      var isAggChange = Object.keys(pivot.lastAggregationInfo).length > 0 ? true : false;
      var isFiltered = Object.keys(pivot.lastFilterInfo).length > 0 ? true : false;
      var args = {
        dataSourceSettings: PivotUtil.getClonedDataSourceSettings(pivot.dataSourceSettings)
      };
      control.trigger(enginePopulating, args, function(observedArgs) {
        if (!(pageSettings && (isSorted || isFiltered || isAggChange || isCalcChange))) {
          PivotUtil.updateDataSourceSettings(pivot, observedArgs.dataSourceSettings);
          PivotUtil.updateDataSourceSettings(pivot.pivotGridModule, observedArgs.dataSourceSettings);
        }
        if (isNullOrUndefined(isEngineRefresh)) {
          var enableValueSorting = isSorted ? false : pivot.staticPivotGridModule ? pivot.staticPivotGridModule.enableValueSorting : pivot.enableValueSorting;
          if (isSorted && pivot.dataSourceSettings.valueSortSettings.headerText !== "") {
            if (pivot.pivotGridModule) {
              pivot.pivotGridModule.setProperties({
                dataSourceSettings: {
                  valueSortSettings: {
                    headerText: ""
                  }
                }
              }, true);
            }
            pivot.setProperties({
              dataSourceSettings: {
                valueSortSettings: {
                  headerText: ""
                }
              }
            }, true);
          }
          if (pivot.dataType === "pivot") {
            var customProperties = pivot.frameCustomProperties();
            customProperties.enableValueSorting = enableValueSorting;
            customProperties.savedFieldList = pivot.pivotFieldList;
            if (pageSettings && (isSorted || isFiltered || isAggChange || isCalcChange) && !pivot.allowDeferLayoutUpdate) {
              if (isSorted) {
                if (control.dataSourceSettings.mode === "Server") {
                  control.getEngine("onSort", null, pivot.lastSortInfo, null, null, null, null);
                } else {
                  pivot.engineModule.onSort(pivot.lastSortInfo);
                }
                pivot.lastSortInfo = {};
              }
              if (isFiltered) {
                if (control.dataSourceSettings.mode === "Server") {
                  control.getEngine("onFilter", null, null, null, null, pivot.lastFilterInfo, null);
                } else {
                  pivot.engineModule.onFilter(pivot.lastFilterInfo, pivot.dataSourceSettings);
                }
                pivot.lastFilterInfo = {};
              }
              if (isAggChange) {
                if (control.dataSourceSettings.mode === "Server") {
                  control.getEngine("onAggregation", null, null, pivot.lastAggregationInfo, null, null, null);
                } else {
                  pivot.engineModule.onAggregation(pivot.lastAggregationInfo);
                }
                pivot.lastAggregationInfo = {};
              }
              if (isCalcChange) {
                if (control.dataSourceSettings.mode === "Server") {
                  control.getEngine("onCalcOperation", null, null, null, pivot.lastCalcFieldInfo, null, null);
                } else {
                  pivot.engineModule.onCalcOperation(pivot.lastCalcFieldInfo, pivot.dataSourceSettings);
                }
                pivot.lastCalcFieldInfo = {};
              }
            } else {
              if (pivot.dataSourceSettings.mode === "Server") {
                if (isSorted) {
                  pivot.getEngine("onSort", null, pivot.lastSortInfo, null, null, null, null);
                } else if (isAggChange) {
                  pivot.getEngine("onAggregation", null, null, pivot.lastAggregationInfo, null, null, null);
                } else if (isCalcChange) {
                  pivot.getEngine("onCalcOperation", null, null, null, pivot.lastCalcFieldInfo, null, null);
                } else if (isFiltered) {
                  pivot.getEngine("onFilter", null, null, null, null, pivot.lastFilterInfo, null);
                } else {
                  pivot.getEngine("onDrop", null, null, null, null, null, null);
                }
              } else {
                pivot.engineModule.renderEngine(pivot.dataSourceSettings, customProperties, pivot.aggregateCellInfo ? pivot.getValueCellInfo.bind(pivot) : void 0, pivot.onHeadersSort ? pivot.getHeaderSortInfo.bind(pivot) : void 0);
              }
              pivot.lastSortInfo = {};
              pivot.lastAggregationInfo = {};
              pivot.lastCalcFieldInfo = {};
              pivot.lastFilterInfo = {};
            }
          } else {
            isOlapDataRefreshed = pivot.updateOlapDataSource(pivot, isSorted, isCalcChange, isOlapDataRefreshed, enableValueSorting, isFiltered);
          }
          pivot.getFieldCaption(pivot.dataSourceSettings);
        } else {
          pivot.axisFieldModule.render();
          if (pivot.pivotGridModule) {
            pivot.pivotGridModule.notify(uiUpdate, pivot);
          }
          pivot.isRequiredUpdate = false;
        }
        if (pivot.dataSourceSettings.mode !== "Server") {
          pivot.enginePopulatedEventMethod(pivot, isTreeViewRefresh, isOlapDataRefreshed);
        } else if (pivot.allowDeferLayoutUpdate && !pivot.isRequiredUpdate || pivot.isRequiredUpdate) {
          hideSpinner(_this.fieldListSpinnerElement);
          if (_this.pivotGridModule) {
            _this.pivotGridModule.hideWaitingPopup();
          }
        }
      });
    };
    PivotFieldList2.prototype.enginePopulatedEventMethod = function(pivot, isTreeViewRefresh, isOlapDataRefreshed) {
      var _this = this;
      var control = pivot.isPopupView ? pivot.pivotGridModule : pivot;
      var eventArgs = {
        dataSourceSettings: pivot.dataSourceSettings,
        pivotFieldList: pivot.dataType === "pivot" ? pivot.engineModule.fieldList : pivot.olapEngineModule.fieldList,
        pivotValues: pivot.dataType === "pivot" ? pivot.engineModule.pivotValues : pivot.olapEngineModule.pivotValues
      };
      control.trigger(enginePopulated, eventArgs, function(observedArgs) {
        pivot.dataSourceSettings = observedArgs.dataSourceSettings;
        pivot.pivotCommon.dataSourceSettings = pivot.dataSourceSettings;
        pivot.pivotFieldList = observedArgs.pivotFieldList;
        if (pivot.dataType === "olap") {
          pivot.olapEngineModule.pivotValues = observedArgs.pivotValues;
          pivot.pivotCommon.engineModule = pivot.olapEngineModule;
        } else {
          pivot.engineModule.pivotValues = observedArgs.pivotValues;
          pivot.pivotCommon.engineModule = pivot.engineModule;
        }
        if (!isTreeViewRefresh && pivot.treeViewModule.fieldTable && !pivot.isAdaptive) {
          pivot.notify(treeViewUpdate, {});
        }
        if (pivot.isRequiredUpdate) {
          if (pivot.allowDeferLayoutUpdate) {
            pivot.clonedDataSource = PivotUtil.getClonedDataSourceSettings(pivot.dataSourceSettings);
            if (_this.dataType === "olap") {
              _this.clonedFieldListData = PivotUtil.cloneOlapFieldSettings(_this.olapEngineModule.fieldListData);
            }
            pivot.clonedFieldList = PivotUtil.getClonedFieldList(pivot.pivotFieldList);
          }
          pivot.updateView(pivot.pivotGridModule);
        } else if (_this.isPopupView && (_this.isDeferLayoutUpdate || pivot.pivotGridModule && pivot.pivotGridModule.pivotDeferLayoutUpdate)) {
          pivot.pivotGridModule.engineModule = pivot.engineModule;
          pivot.pivotGridModule.setProperties({
            dataSourceSettings: pivot.dataSourceSettings.properties
          }, true);
          pivot.pivotGridModule.notify(uiUpdate, pivot);
          hideSpinner(pivot.fieldListSpinnerElement);
        }
        if (_this.isPopupView && pivot.pivotGridModule && pivot.pivotGridModule.allowDeferLayoutUpdate && !pivot.isRequiredUpdate || !isNullOrUndefined(pivot.pivotGridModule)) {
          hideSpinner(pivot.fieldListSpinnerElement);
          pivot.pivotGridModule.hideWaitingPopup();
        }
        pivot.isRequiredUpdate = true;
        if (!pivot.pivotGridModule || isOlapDataRefreshed) {
          hideSpinner(pivot.fieldListSpinnerElement);
        } else {
          pivot.pivotGridModule.fieldListSpinnerElement = pivot.fieldListSpinnerElement;
        }
      });
      var actionName = this.getActionCompleteName();
      this.actionObj.actionName = actionName;
      if (this.actionObj.actionName) {
        this.actionCompleteMethod();
      }
    };
    PivotFieldList2.prototype.updateOlapDataSource = function(pivot, isSorted, isCalcChange, isOlapDataRefreshed, enableValueSorting, isFiltered) {
      var customProperties = pivot.frameCustomProperties(pivot.olapEngineModule.fieldListData, pivot.olapEngineModule.fieldList);
      customProperties.enableValueSorting = enableValueSorting;
      customProperties.savedFieldList = pivot.pivotFieldList;
      if ((isCalcChange || isSorted) && !isFiltered) {
        pivot.olapEngineModule.savedFieldList = pivot.pivotFieldList;
        pivot.olapEngineModule.savedFieldListData = pivot.olapEngineModule.fieldListData;
        if (isCalcChange) {
          pivot.olapEngineModule.updateCalcFields(pivot.dataSourceSettings, pivot.lastCalcFieldInfo);
          pivot.lastCalcFieldInfo = {};
          isOlapDataRefreshed = pivot.olapEngineModule.dataFields[pivot.lastCalcFieldInfo.name] ? false : true;
          if (pivot.pivotGridModule) {
            pivot.pivotGridModule.hideWaitingPopup();
          }
        } else {
          pivot.olapEngineModule.onSort(pivot.dataSourceSettings);
        }
      } else {
        PivotUtil.renderOlapEngine(pivot, customProperties);
      }
      pivot.lastSortInfo = {};
      pivot.lastAggregationInfo = {};
      pivot.lastCalcFieldInfo = {};
      pivot.lastFilterInfo = {};
      return isOlapDataRefreshed;
    };
    PivotFieldList2.prototype.update = function(control) {
      if (control) {
        this.clonedDataSet = control.clonedDataSet;
        this.clonedReport = control.clonedReport;
        this.setProperties({
          dataSourceSettings: control.dataSourceSettings,
          showValuesButton: control.showValuesButton
        }, true);
        this.engineModule = control.engineModule;
        this.olapEngineModule = control.olapEngineModule;
        this.dataType = control.dataType;
        this.pivotFieldList = this.dataType === "olap" ? control.olapEngineModule.fieldList : control.engineModule.fieldList;
        if (this.isPopupView) {
          this.pivotGridModule = control;
        } else {
          this.staticPivotGridModule = control;
        }
        this.getFieldCaption(control.dataSourceSettings);
        this.pivotCommon.engineModule = this.dataType === "olap" ? this.olapEngineModule : this.engineModule;
        this.pivotCommon.dataSourceSettings = this.dataSourceSettings;
        this.pivotCommon.control = this;
        if (this.treeViewModule.fieldTable && !this.isAdaptive) {
          this.notify(treeViewUpdate, {});
        }
        this.axisFieldModule.render();
        if (!this.isPopupView && this.allowDeferLayoutUpdate) {
          this.clonedDataSource = PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings);
          if (this.dataType === "olap") {
            this.clonedFieldListData = PivotUtil.cloneOlapFieldSettings(this.olapEngineModule.fieldListData);
          }
          this.clonedFieldList = PivotUtil.getClonedFieldList(this.pivotFieldList);
        }
      }
    };
    PivotFieldList2.prototype.updateView = function(control) {
      if (control) {
        var isOlapCalcFieldAdded = this.actionObj.actionName === "Calculated field applied" && control.dataType === "olap";
        if (control.element.querySelector(".e-spin-hide") && !isOlapCalcFieldAdded && (!(this.allowDeferLayoutUpdate && !this.isDeferUpdateApplied) || control.isInitial && control.currentView !== "Chart")) {
          control.showWaitingPopup();
        }
        control.clonedDataSet = this.clonedDataSet;
        control.clonedReport = this.clonedReport;
        control.setProperties({
          dataSourceSettings: this.dataSourceSettings,
          showValuesButton: this.showValuesButton
        }, true);
        control.engineModule = this.engineModule;
        control.olapEngineModule = this.olapEngineModule;
        control.dataType = this.dataType;
        if (!this.pivotChange) {
          control.pivotValues = this.dataType === "olap" ? this.olapEngineModule.pivotValues : this.engineModule.pivotValues;
        }
        var eventArgs = {
          dataSourceSettings: PivotUtil.getClonedDataSourceSettings(control.dataSourceSettings),
          pivotValues: control.pivotValues
        };
        control.trigger(fieldListRefreshed, eventArgs);
        if (!this.isPopupView && ((this.dataType === "olap" ? this.olapEngineModule.isEngineUpdated : this.engineModule.isEngineUpdated) || this.isInitial)) {
          this.staticPivotGridModule = control;
          control.isStaticRefresh = true;
          control.isStaticFieldList = true;
        }
        this.isDeferUpdateApplied = false;
        if (this.staticPivotGridModule) {
          this.staticPivotGridModule.isServerWaitingPopup = true;
        }
        control.dataBind();
      }
    };
    PivotFieldList2.prototype.triggerPopulateEvent = function() {
      var _this = this;
      var control = this.isPopupView ? this.pivotGridModule : this;
      var eventArgs = {
        dataSourceSettings: this.dataSourceSettings,
        pivotFieldList: this.dataType === "olap" ? this.olapEngineModule.fieldList : this.engineModule.fieldList,
        pivotValues: this.dataType === "olap" ? this.olapEngineModule.pivotValues : this.engineModule.pivotValues
      };
      control.trigger(enginePopulated, eventArgs, function(observedArgs) {
        _this.dataSourceSettings = observedArgs.dataSourceSettings;
        _this.pivotFieldList = observedArgs.pivotFieldList;
        if (_this.dataType === "olap") {
          _this.olapEngineModule.pivotValues = observedArgs.pivotValues;
        } else {
          _this.engineModule.pivotValues = observedArgs.pivotValues;
        }
      });
    };
    PivotFieldList2.prototype.actionBeginMethod = function() {
      var eventArgs = {
        dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings),
        actionName: this.actionObj.actionName,
        fieldInfo: this.actionObj.fieldInfo,
        cancel: false
      };
      var control = this.isPopupView ? this.pivotGridModule : this;
      control.trigger(actionBegin, eventArgs);
      return eventArgs.cancel;
    };
    PivotFieldList2.prototype.actionCompleteMethod = function() {
      var eventArgs = {
        dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings),
        actionName: this.actionObj.actionName,
        fieldInfo: this.actionObj.fieldInfo,
        actionInfo: this.actionObj.actionInfo
      };
      var control = this.isPopupView ? this.pivotGridModule : this;
      control.trigger(actionComplete, eventArgs);
      this.actionObj.actionName = "";
      this.actionObj.actionInfo = void 0;
      this.actionObj.fieldInfo = void 0;
    };
    PivotFieldList2.prototype.actionFailureMethod = function(error) {
      var eventArgs = {
        actionName: this.actionObj.actionName,
        errorInfo: error
      };
      var control = this.isPopupView ? this.pivotGridModule : this;
      control.trigger(actionFailure, eventArgs);
    };
    PivotFieldList2.prototype.getActionCompleteName = function() {
      var actionName = this.actionObj.actionName === openCalculatedField ? calculatedFieldApplied : this.actionObj.actionName === editCalculatedField ? calculatedFieldEdited : this.actionObj.actionName === sortField ? fieldSorted : this.actionObj.actionName === filterField ? fieldFiltered : this.actionObj.actionName === removeField ? fieldRemoved : this.actionObj.actionName === aggregateField ? fieldAggregated : this.actionObj.actionName === sortFieldTree ? fieldTreeSorted : this.actionObj.actionName;
      return actionName;
    };
    PivotFieldList2.prototype.destroy = function() {
      this.unWireEvent();
      if (this.engineModule && !this.destroyEngine) {
        this.engineModule.fieldList = {};
        this.engineModule.rMembers = null;
        this.engineModule.cMembers = null;
        this.engineModule.valueMatrix = [];
        this.engineModule = {};
      }
      if (this.olapEngineModule && !this.destroyEngine) {
        this.olapEngineModule.fieldList = {};
        this.olapEngineModule = {};
      }
      if (this.pivotFieldList) {
        this.pivotFieldList = {};
      }
      if (this.contextMenuModule) {
        this.contextMenuModule.destroy();
      }
      if (this.treeViewModule) {
        this.treeViewModule.destroy();
      }
      if (this.pivotButtonModule) {
        this.pivotButtonModule.destroy();
      }
      if (this.pivotCommon) {
        this.pivotCommon.destroy();
      }
      if (this.dialogRenderer) {
        this.dialogRenderer.destroy();
      }
      if (this.calculatedFieldModule) {
        this.calculatedFieldModule.destroy();
      }
      _super.prototype.destroy.call(this);
      if (this.contextMenuModule) {
        this.contextMenuModule = null;
      }
      if (this.treeViewModule) {
        this.treeViewModule = null;
      }
      if (this.pivotButtonModule) {
        this.pivotButtonModule = null;
      }
      if (this.pivotCommon) {
        this.pivotCommon = null;
      }
      if (this.dialogRenderer) {
        this.dialogRenderer = null;
      }
      if (this.calculatedFieldModule) {
        this.calculatedFieldModule = null;
      }
      if (this.axisFieldModule) {
        this.axisFieldModule = null;
      }
      if (this.axisTableModule) {
        this.axisTableModule = null;
      }
      if (this.renderModule) {
        this.renderModule = null;
      }
      if (this.clonedDataSet) {
        this.clonedDataSet = null;
      }
      if (this.clonedReport) {
        this.clonedReport = null;
      }
      if (this.clonedFieldList) {
        this.clonedFieldList = null;
      }
      if (this.clonedFieldListData) {
        this.clonedFieldListData = null;
      }
      if (this.localeObj) {
        this.localeObj = null;
      }
      if (this.defaultLocale) {
        this.defaultLocale = null;
      }
      this.element.innerHTML = "";
      removeClass([this.element], ROOT);
      removeClass([this.element], RTL);
      removeClass([this.element], DEVICE);
    };
    __decorate6([Complex({}, DataSourceSettings)], PivotFieldList2.prototype, "dataSourceSettings", void 0);
    __decorate6([Property("Popup")], PivotFieldList2.prototype, "renderMode", void 0);
    __decorate6([Property()], PivotFieldList2.prototype, "target", void 0);
    __decorate6([Property("")], PivotFieldList2.prototype, "cssClass", void 0);
    __decorate6([Property(false)], PivotFieldList2.prototype, "enableHtmlSanitizer", void 0);
    __decorate6([Property(false)], PivotFieldList2.prototype, "allowCalculatedField", void 0);
    __decorate6([Property(false)], PivotFieldList2.prototype, "enableFieldSearching", void 0);
    __decorate6([Property(false)], PivotFieldList2.prototype, "showValuesButton", void 0);
    __decorate6([Property(false)], PivotFieldList2.prototype, "allowDeferLayoutUpdate", void 0);
    __decorate6([Property(1e3)], PivotFieldList2.prototype, "maxNodeLimitInMemberEditor", void 0);
    __decorate6([Property(true)], PivotFieldList2.prototype, "loadOnDemandInMemberEditor", void 0);
    __decorate6([Property()], PivotFieldList2.prototype, "spinnerTemplate", void 0);
    __decorate6([Property(["Sum", "Count", "DistinctCount", "Product", "Min", "Max", "Avg", "Median", "Index", "PopulationVar", "SampleVar", "PopulationStDev", "SampleStDev", "RunningTotals", "PercentageOfGrandTotal", "PercentageOfColumnTotal", "PercentageOfRowTotal", "PercentageOfParentColumnTotal", "PercentageOfParentRowTotal", "DifferenceFrom", "PercentageOfDifferenceFrom", "PercentageOfParentTotal"])], PivotFieldList2.prototype, "aggregateTypes", void 0);
    __decorate6([Property("USD")], PivotFieldList2.prototype, "currencyCode", void 0);
    __decorate6([Event()], PivotFieldList2.prototype, "load", void 0);
    __decorate6([Event()], PivotFieldList2.prototype, "enginePopulating", void 0);
    __decorate6([Event()], PivotFieldList2.prototype, "memberFiltering", void 0);
    __decorate6([Event()], PivotFieldList2.prototype, "enginePopulated", void 0);
    __decorate6([Event()], PivotFieldList2.prototype, "onFieldDropped", void 0);
    __decorate6([Event()], PivotFieldList2.prototype, "fieldDrop", void 0);
    __decorate6([Event()], PivotFieldList2.prototype, "fieldDragStart", void 0);
    __decorate6([Event()], PivotFieldList2.prototype, "aggregateCellInfo", void 0);
    __decorate6([Event()], PivotFieldList2.prototype, "memberEditorOpen", void 0);
    __decorate6([Event()], PivotFieldList2.prototype, "calculatedFieldCreate", void 0);
    __decorate6([Event()], PivotFieldList2.prototype, "aggregateMenuOpen", void 0);
    __decorate6([Event()], PivotFieldList2.prototype, "fieldRemove", void 0);
    __decorate6([Event()], PivotFieldList2.prototype, "dataBound", void 0);
    __decorate6([Event()], PivotFieldList2.prototype, "created", void 0);
    __decorate6([Event()], PivotFieldList2.prototype, "destroyed", void 0);
    __decorate6([Event()], PivotFieldList2.prototype, "beforeServiceInvoke", void 0);
    __decorate6([Event()], PivotFieldList2.prototype, "afterServiceInvoke", void 0);
    __decorate6([Event()], PivotFieldList2.prototype, "actionBegin", void 0);
    __decorate6([Event()], PivotFieldList2.prototype, "actionComplete", void 0);
    __decorate6([Event()], PivotFieldList2.prototype, "actionFailure", void 0);
    __decorate6([Event()], PivotFieldList2.prototype, "onHeadersSort", void 0);
    PivotFieldList2 = __decorate6([NotifyPropertyChanges], PivotFieldList2);
    return PivotFieldList2;
  }(Component2)
);

// node_modules/@syncfusion/ej2-pivotview/src/common/calculatedfield/calculated-field.js
var COUNT = "Count";
var AVG = "Avg";
var MEDIAN = "Median";
var MIN = "Min";
var MAX = "Max";
var SUM = "Sum";
var DISTINCTCOUNT = "DistinctCount";
var PRODUCT = "Product";
var STDEV = "SampleStDev";
var STDEVP = "PopulationStDev";
var VAR = "SampleVar";
var VARP = "PopulationVar";
var CALC = "CalculatedField";
var AGRTYPE = "AggregateType";
var CalculatedField = (
  /** @class */
  function() {
    function CalculatedField2(parent) {
      this.isFormula = false;
      this.isRequireUpdate = false;
      this.formatTypes = ["Standard", "Currency", "Percent", "Custom", "None"];
      this.parent = parent;
      this.existingReport = null;
      this.parent.calculatedFieldModule = this;
      this.removeEventListener();
      this.addEventListener();
      this.parentID = this.parent.element.id;
      this.treeObj = null;
      this.droppable = null;
      this.newFields = null;
      this.isFieldExist = true;
      this.formulaText = null;
      this.fieldText = null;
      this.formatText = null;
      this.formatType = null;
      this.fieldType = null;
      this.parentHierarchy = null;
      this.isEdit = false;
      this.currentFieldName = null;
    }
    CalculatedField2.prototype.getModuleName = function() {
      return "calculatedField";
    };
    CalculatedField2.prototype.keyActionHandler = function(e) {
      var node = e.currentTarget.querySelector(".e-node-focus");
      if (node) {
        switch (e.action) {
          case "moveRight":
          case "shiftE":
            if (this.parent.dataType === "pivot") {
              this.displayMenu(node);
            }
            break;
          case "delete":
            if (node.tagName === "LI" && !node.querySelector(".e-list-icon.e-format") && !node.querySelector(".e-list-icon").classList.contains(".e-icons") && node.querySelector("." + GRID_REMOVE) && node.querySelector("." + GRID_REMOVE).classList.contains("e-list-icon")) {
              this.createConfirmDialog(this.parent.localeObj.getConstant("alert"), this.parent.localeObj.getConstant("removeCalculatedField"), {}, true, node);
            }
            break;
          case "enter":
            {
              var field = node.getAttribute("data-field");
              var dialog = getInstance(select("#" + this.parentID + "calculateddialog", document), Dialog);
              var type = node.getAttribute("data-type");
              var dropField = select("#" + this.parentID + "droppable", dialog.element);
              if (this.parent.dataType === "pivot") {
                if (dropField.value === "") {
                  if (type === CALC) {
                    dropField.value = node.getAttribute("data-uid");
                  } else {
                    dropField.value = '"' + type + "(" + field + ')"';
                  }
                } else if (dropField.value !== "") {
                  if (type === CALC) {
                    dropField.value = dropField.value + node.getAttribute("data-uid");
                  } else {
                    dropField.value = dropField.value + '"' + type + "(" + field + ')"';
                  }
                }
              } else {
                if (this.parent.olapEngineModule && this.parent.olapEngineModule.fieldList[field] && this.parent.olapEngineModule.fieldList[field].isCalculatedField) {
                  field = this.parent.olapEngineModule.fieldList[field].tag;
                }
                if (dropField.value === "") {
                  dropField.value = field;
                } else if (dropField.value !== "") {
                  dropField.value = dropField.value + field;
                }
              }
            }
            break;
        }
      }
    };
    CalculatedField2.prototype.fieldClickHandler = function(e) {
      var node = closest(e.event.target, "li");
      if (e.event.target.classList.contains(FORMAT) || e.event.target.classList.contains(CALC_EDIT) || e.event.target.classList.contains(CALC_EDITED) || e.event.target.classList.contains(GRID_REMOVE)) {
        if (!this.parent.isAdaptive) {
          this.displayMenu(node, e.node, e.event.target);
        } else if (this.parent.dataType === "olap" && this.parent.isAdaptive) {
          if (node.tagName === "LI" && node.querySelector(".e-list-edit-icon").classList.contains(CALC_EDIT) && e.event.target.classList.contains(CALC_EDIT)) {
            this.isEdit = true;
            this.currentFieldName = node.getAttribute("data-field");
            this.fieldText = node.getAttribute("data-caption");
            this.formulaText = node.getAttribute("data-formula");
            this.formatType = node.getAttribute("data-formatString");
            this.formatText = this.formatType === "Custom" ? node.getAttribute("data-customformatstring") : null;
            this.fieldType = node.getAttribute("data-membertype");
            this.parentHierarchy = this.fieldType === "Dimension" ? node.getAttribute("data-hierarchy") : null;
            addClass([node.querySelector(".e-list-edit-icon")], CALC_EDITED);
            removeClass([node.querySelector(".e-list-edit-icon")], CALC_EDIT);
            this.renderMobileLayout(this.parent.dialogRenderer.adaptiveElement);
          } else if (node.tagName === "LI" && node.querySelector(".e-list-edit-icon").classList.contains(CALC_EDITED) && e.event.target.classList.contains(CALC_EDITED)) {
            this.isEdit = false;
            this.fieldText = this.formatText = this.formulaText = this.currentFieldName = null;
            this.parentHierarchy = this.fieldType = this.formatType = null;
            addClass([node.querySelector(".e-list-edit-icon")], CALC_EDIT);
            removeClass([node.querySelector(".e-list-edit-icon")], CALC_EDITED);
          } else if (node.tagName === "LI" && node.querySelector("." + GRID_REMOVE).classList.contains("e-icons") && e.event.target.classList.contains(GRID_REMOVE)) {
            this.createConfirmDialog(this.parent.localeObj.getConstant("alert"), this.parent.localeObj.getConstant("removeCalculatedField"), {}, true, e.node);
          }
        }
      }
    };
    CalculatedField2.prototype.accordionClickHandler = function(e) {
      if (e.item && e.item.iconCss.indexOf("e-list-icon") !== -1 && closest(e.originalEvent.target, ".e-acrdn-header-icon")) {
        var node = closest(e.originalEvent.target, ".e-acrdn-header").querySelector("." + CALCCHECK);
        var fieldName = node.getAttribute("data-field");
        var captionName = node.getAttribute("data-caption");
        var formatObj = PivotUtil.getFieldByName(fieldName, this.parent.dataSourceSettings.formatSettings);
        var optionElement = closest(e.originalEvent.target, ".e-acrdn-header-icon");
        if (formatObj) {
          var pivotFormat = this.getFormat(formatObj.format);
          var formatString = pivotFormat ? this.formatTypes.indexOf(pivotFormat) > -1 ? formatObj.format : "Custom" : "None";
          this.formatType = formatString;
        }
        if (optionElement.querySelector("." + CALC_EDIT) && e.originalEvent.target.classList.contains(CALC_EDIT)) {
          this.isEdit = true;
          this.currentFieldName = fieldName;
          this.fieldText = captionName ? captionName : fieldName;
          this.formulaText = this.parent.engineModule.fieldList[fieldName].formula;
          this.formatText = formatObj ? formatObj.format : "";
          addClass([optionElement.querySelector(".e-list-icon")], CALC_EDITED);
          removeClass([optionElement.querySelector(".e-list-icon")], CALC_EDIT);
          this.renderMobileLayout(this.parent.dialogRenderer.adaptiveElement);
        } else if (optionElement.querySelector("." + CALC_EDITED) && e.originalEvent.target.classList.contains(CALC_EDITED)) {
          this.isEdit = false;
          this.fieldText = this.formatText = this.formulaText = this.currentFieldName = null;
          addClass([optionElement.querySelector(".e-list-icon")], CALC_EDIT);
          removeClass([optionElement.querySelector(".e-list-icon")], CALC_EDITED);
        } else if (optionElement.querySelector("." + GRID_REMOVE) && e.originalEvent.target.classList.contains(GRID_REMOVE)) {
          this.createConfirmDialog(this.parent.localeObj.getConstant("alert"), this.parent.localeObj.getConstant("removeCalculatedField"), {}, true, node);
        }
      }
    };
    CalculatedField2.prototype.accordionCreated = function() {
      var accordion = getInstance(select("#" + this.parentID + "accordDiv", document), Accordion);
      var allElement = accordion.element.querySelectorAll(".e-acrdn-item");
      for (var i = 0; i < allElement.length; i++) {
        if (allElement[i].querySelector("." + CALC_EDIT) || allElement[i].querySelector("." + CALC_EDITED)) {
          var element = createElement("span", {
            className: "e-list-icon " + GRID_REMOVE + " e-icons"
          });
          append([element], allElement[i].querySelector(".e-acrdn-header-icon"));
          addClass([allElement[i]], SELECT_CLASS);
        }
      }
    };
    CalculatedField2.prototype.clearFormula = function() {
      if (this.treeObj && this.treeObj.element.querySelector("li")) {
        removeClass(this.treeObj.element.querySelectorAll("li"), "e-active");
        this.displayMenu(this.treeObj.element.querySelector("li"));
      }
    };
    CalculatedField2.prototype.displayMenu = function(node, treeNode, target) {
      var edit = target ? target.classList.contains(CALC_EDIT) : true;
      var edited = target ? target.classList.contains(CALC_EDITED) : true;
      var dialog = getInstance(select("#" + this.parentID + "calculateddialog", document), Dialog);
      var inputObj = getInstance(select("#" + this.parentID + "ddlelement", document), MaskedTextBox);
      try {
        if (this.parent.dataType === "pivot" && node.querySelector(".e-list-icon.e-format") && node.querySelector(".e-list-icon.e-format").classList.contains(ICON) && !node.querySelector(".e-list-icon").classList.contains(CALC_EDITED) && !node.querySelector(".e-list-icon").classList.contains(GRID_REMOVE) && !node.querySelector(".e-list-icon").classList.contains(CALC_EDIT) && node.tagName === "LI") {
          var menuObj = select("#" + this.parentID + "CalcContextmenu", document) ? getInstance(select("#" + this.parentID + "CalcContextmenu", document), ContextMenu) : null;
          if (menuObj && !menuObj.isDestroyed) {
            menuObj.destroy();
          }
          this.curMenu = node.querySelector("." + LIST_TEXT_CLASS);
          this.openContextMenu(node);
        } else if (node.tagName === "LI" && (node.querySelector("." + CALC_EDIT) && node.querySelector("." + CALC_EDIT).classList.contains("e-list-icon") && edit || this.parent.dataType === "olap" && node.getAttribute("data-type") === CALC && node.classList.contains("e-active") && (target && !target.classList.contains(GRID_REMOVE) || !target))) {
          this.isEdit = true;
          var fieldName = node.getAttribute("data-field");
          var caption = node.getAttribute("data-caption");
          this.currentFieldName = fieldName;
          inputObj.value = caption;
          inputObj.dataBind();
          var formatString = node.getAttribute("data-formatString");
          var dialogElement = dialog.element;
          var ddlFormatTypes = getInstance(select("#" + this.parentID + "Format_Div", dialogElement), DropDownList);
          var customFormat = getInstance(select("#" + this.parentID + "Custom_Format_Element", dialogElement), MaskedTextBox);
          var customFormatString = node.getAttribute("data-customformatstring");
          if (this.parent.dataType === "olap") {
            var memberType = node.getAttribute("data-membertype");
            var parentHierarchy = node.getAttribute("data-hierarchy");
            var expression = node.getAttribute("data-formula");
            var fieldTitle = select("#" + this.parentID + "_FieldNameTitle", dialogElement);
            var memberTypeDrop = getInstance(select("#" + this.parentID + "Member_Type_Div", dialogElement), DropDownList);
            var hierarchyDrop = getInstance(select("#" + this.parentID + "Hierarchy_List_Div", dialogElement), DropDownList);
            fieldTitle.innerText = this.parent.localeObj.getConstant("caption");
            select("#" + this.parentID + "droppable", document).value = expression;
            memberTypeDrop.readonly = true;
            memberTypeDrop.value = memberType;
            memberTypeDrop.dataBind();
            if (memberType === "Dimension") {
              hierarchyDrop.value = parentHierarchy;
            }
          } else {
            addClass(this.treeObj.element.querySelectorAll("." + CALC_EDITED), CALC_EDIT);
            removeClass(this.treeObj.element.querySelectorAll("." + CALC_EDITED), CALC_EDITED);
            addClass([node.querySelector(".e-list-icon")], CALC_EDITED);
            removeClass([node.querySelector(".e-list-icon")], CALC_EDIT);
            node.querySelector("." + CALC_EDITED).setAttribute("title", this.parent.localeObj.getConstant("clearCalculatedField"));
            select("#" + this.parentID + "droppable", document).value = node.getAttribute("data-uid");
          }
          if (formatString !== "") {
            ddlFormatTypes.value = formatString;
            ddlFormatTypes.dataBind();
          }
          customFormat.value = customFormatString;
          customFormat.dataBind();
        } else if (node.tagName === "LI" && (node.querySelector("." + CALC_EDITED) && node.querySelector("." + CALC_EDITED).classList.contains("e-list-icon") && edited || this.parent.dataType === "olap" && !node.classList.contains("e-active"))) {
          this.isEdit = false;
          inputObj.value = "";
          inputObj.dataBind();
          var dialogElement = dialog.element;
          var customFormat = getInstance(select("#" + this.parentID + "Custom_Format_Element", dialogElement), MaskedTextBox);
          customFormat.value = "";
          customFormat.dataBind();
          if (this.parent.dataType === "olap") {
            var hierarchyDrop = getInstance(select("#" + this.parentID + "Hierarchy_List_Div", dialogElement), DropDownList);
            var ddlFormatTypes = getInstance(select("#" + this.parentID + "Format_Div", dialogElement), DropDownList);
            var memberTypeDrop = getInstance(select("#" + this.parentID + "Member_Type_Div", dialogElement), DropDownList);
            var fieldTitle = select("#" + this.parentID + "_FieldNameTitle", dialogElement);
            fieldTitle.innerText = this.parent.localeObj.getConstant("fieldTitle");
            hierarchyDrop.index = 0;
            hierarchyDrop.dataBind();
            ddlFormatTypes.index = 0;
            ddlFormatTypes.dataBind();
            memberTypeDrop.index = 0;
            memberTypeDrop.readonly = false;
            memberTypeDrop.dataBind();
          } else {
            addClass(this.treeObj.element.querySelectorAll("." + CALC_EDITED), CALC_EDIT);
            removeClass(this.treeObj.element.querySelectorAll("." + CALC_EDITED), CALC_EDITED);
            node.querySelector("." + CALC_EDIT).setAttribute("title", this.parent.localeObj.getConstant("edit"));
          }
          select("#" + this.parentID + "droppable", document).value = "";
        } else if (node.tagName === "LI" && node.querySelector("." + GRID_REMOVE) && node.querySelector("." + GRID_REMOVE).classList.contains("e-list-icon") && !edit && !edited) {
          this.parent.actionObj.actionName = removeField;
          if (this.parent.actionBeginMethod()) {
            return;
          }
          var dropField = select("#" + this.parentID + "droppable", document);
          var field = {
            name: this.isEdit ? this.currentFieldName : inputObj.value,
            caption: inputObj.value,
            formula: dropField.value
          };
          this.createConfirmDialog(this.parent.localeObj.getConstant("alert"), this.parent.localeObj.getConstant("removeCalculatedField"), field, true, treeNode);
        }
      } catch (execption) {
        this.parent.actionFailureMethod(execption);
      }
    };
    CalculatedField2.prototype.removeCalcField = function(node) {
      var dataSourceSettings = this.parent.dataSourceSettings;
      var fieldName = node.getAttribute("data-field");
      var calcfields = dataSourceSettings.calculatedFieldSettings;
      var engineModule;
      if (this.parent.dataType === "pivot") {
        if (!this.parent.isAdaptive) {
          this.treeObj.removeNodes([node]);
        } else {
          var index = parseInt(node.getAttribute("id").split(this.parentID + "_")[1], 10);
          if (typeof index === "number") {
            var accordion = getInstance(select("#" + this.parentID + "accordDiv", document), Accordion);
            accordion.hideItem(index);
          }
        }
      }
      for (var i = 0; i < calcfields.length; i++) {
        if (calcfields[i] && calcfields[i].name === fieldName) {
          calcfields.splice(i, 1);
          break;
        }
      }
      if (this.parent.dataType === "olap") {
        engineModule = this.parent.olapEngineModule;
        var fields_1 = engineModule.fieldListData ? engineModule.fieldListData : [];
        for (var _i = 0, _a = Object.keys(fields_1); _i < _a.length; _i++) {
          var item = _a[_i];
          if (fields_1[parseInt(item, 10)].name === fieldName) {
            var index = parseInt(item, 10);
            if (typeof index === "number") {
              fields_1.splice(index, 1);
              break;
            }
          }
        }
        var parentID = this.treeObj.getNode(node).parentID;
        this.treeObj.removeNodes([node]);
        if (calcfields.length <= 0) {
          this.treeObj.removeNodes([parentID]);
        }
      } else {
        engineModule = this.parent.engineModule;
      }
      if (engineModule.fields) {
        for (var i = 0; i < engineModule.fields.length; i++) {
          if (engineModule.fields[i] === fieldName) {
            engineModule.fields.splice(i, 1);
            break;
          }
        }
      }
      if (engineModule.savedFieldList && engineModule.savedFieldList[fieldName]) {
        delete engineModule.savedFieldList[fieldName];
      }
      if (engineModule.fieldList && engineModule.fieldList[fieldName]) {
        delete engineModule.fieldList[fieldName];
      }
      var formatFields = dataSourceSettings.formatSettings;
      for (var i = 0; i < formatFields.length; i++) {
        if (formatFields[i] && formatFields[i].name === fieldName) {
          formatFields.splice(i, 1);
          break;
        }
      }
      var fields = [dataSourceSettings.values, dataSourceSettings.rows, dataSourceSettings.columns, dataSourceSettings.filters];
      for (var i = 0, n = fields.length; i < n; i++) {
        for (var j = 0, length_1 = fields[i].length; j < length_1; j++) {
          if (fields[i][j].name === fieldName) {
            fields[i].splice(j, 1);
            break;
          }
        }
      }
      if (this.isEdit && this.currentFieldName === fieldName) {
        var inputObj = getInstance(select("#" + this.parentID + "ddlelement", document), MaskedTextBox);
        this.isEdit = false;
        inputObj.value = "";
        this.currentFieldName = this.formatText = this.fieldText = this.formatType = null;
        this.formulaText = this.fieldType = this.parentHierarchy = null;
      }
      if (!isNullOrUndefined(this.parent.isDeferLayoutUpdate) && !this.parent.isDeferLayoutUpdate || this.parent.pivotGridModule && !this.parent.pivotGridModule.pivotDeferLayoutUpdate || this.parent.getModuleName() !== "pivotfieldlist") {
        this.parent.updateDataSource();
      }
      this.closeErrorDialog();
    };
    CalculatedField2.prototype.openContextMenu = function(node) {
      var _this = this;
      var fieldName = node.getAttribute("data-field");
      var type = this.parent.engineModule.fieldList[fieldName].type !== "number" ? "string" : "number";
      var validSummaryTypes = type === "string" ? this.getValidSummaryType().slice(0, 2) : this.getValidSummaryType();
      var eventArgs = {
        cancel: false,
        fieldName,
        aggregateTypes: this.getMenuItems(type).slice()
      };
      var control = this.parent.getModuleName() === "pivotfieldlist" && this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;
      control.trigger(aggregateMenuOpen, eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          var duplicateTypes = [];
          var items = [];
          for (var _i = 0, _a = observedArgs.aggregateTypes; _i < _a.length; _i++) {
            var option = _a[_i];
            if (validSummaryTypes.indexOf(option) > -1 && duplicateTypes.indexOf(option) === -1) {
              duplicateTypes.push(option);
              items.push({
                id: _this.parent.element.id + "Calc_" + option,
                text: _this.parent.localeObj.getConstant(option)
              });
            }
          }
          _this.createMenu(items, node);
          var pos = node.getBoundingClientRect();
          var offset = window.scrollY || document.documentElement.scrollTop;
          var menuObj = getInstance(select("#" + _this.parentID + "CalcContextmenu", document), ContextMenu);
          if (_this.parent.enableRtl) {
            menuObj.open(pos.top + offset, pos.left - 100);
          } else {
            menuObj.open(pos.top + offset, pos.left + 150);
          }
        }
      });
    };
    CalculatedField2.prototype.selectContextMenu = function(menu) {
      if (menu.element.textContent !== null) {
        var field = closest(this.curMenu, ".e-list-item").getAttribute("data-caption");
        closest(this.curMenu, ".e-list-item").setAttribute("data-type", menu.element.id.split("_").pop());
        this.curMenu.textContent = field + " (" + menu.element.textContent + ")";
        addClass([this.curMenu.parentElement.parentElement], ["e-node-focus", "e-hover"]);
        this.curMenu.parentElement.parentElement.setAttribute("tabindex", "0");
        this.curMenu.parentElement.parentElement.focus();
      }
    };
    CalculatedField2.prototype.createMenu = function(menuItems, node) {
      var _this = this;
      var menuOptions = {
        cssClass: this.parentID + "calculatedmenu" + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
        items: menuItems,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        // beforeOpen: this.beforeMenuOpen.bind(this),
        select: this.selectContextMenu.bind(this),
        onClose: function() {
          _this.treeObj.element.focus();
          addClass([node], ["e-hover", "e-node-focus"]);
        }
      };
      var contextMenu;
      if (select("#" + this.parentID + "CalcContextmenu", document)) {
        contextMenu = select("#" + this.parentID + "CalcContextmenu", document);
      } else {
        contextMenu = createElement("ul", {
          id: this.parentID + "CalcContextmenu"
        });
      }
      var dialog = getInstance(select("#" + this.parentID + "calculateddialog", document), Dialog);
      dialog.element.appendChild(contextMenu);
      var menuObj = new ContextMenu(menuOptions);
      menuObj.isStringTemplate = true;
      menuObj.appendTo(contextMenu);
    };
    CalculatedField2.prototype.applyFormula = function() {
      var _this = this;
      var currentObj = this;
      var isExist = false;
      removeClass([document.getElementById(this.parentID + "ddlelement")], EMPTY_FIELD);
      var inputObj = getInstance(select("#" + this.parentID + "ddlelement", document), MaskedTextBox);
      this.newFields = extend([], this.parent.dataSourceSettings.calculatedFieldSettings, null, true);
      var eventArgs = {
        fieldName: this.isEdit ? this.currentFieldName : inputObj.value,
        calculatedField: this.getCalculatedFieldInfo(),
        calculatedFieldSettings: PivotUtil.cloneCalculatedFieldSettings(this.parent.dataSourceSettings.calculatedFieldSettings),
        cancel: false
      };
      var control = this.parent.getModuleName() === "pivotfieldlist" && this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;
      control.trigger(calculatedFieldCreate, eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          var calcInfo = observedArgs.calculatedField;
          if (!_this.isEdit) {
            if (currentObj.parent.dataType === "olap") {
              var field = calcInfo.name;
              if (currentObj.parent.olapEngineModule.fieldList[field] && currentObj.parent.olapEngineModule.fieldList[field].type !== "CalculatedField") {
                isExist = true;
              }
            } else {
              for (var _i = 0, _a = Object.keys(currentObj.parent.engineModule.fieldList); _i < _a.length; _i++) {
                var key = _a[_i];
                if (calcInfo.name && calcInfo.name === key && currentObj.parent.engineModule.fieldList[key].aggregateType !== "CalculatedField") {
                  isExist = true;
                }
              }
            }
          }
          if (isExist) {
            currentObj.parent.pivotCommon.errorDialog.createErrorDialog(currentObj.parent.localeObj.getConstant("error"), currentObj.parent.localeObj.getConstant("fieldExist"));
            return;
          }
          _this.existingReport = extend({}, _this.parent.dataSourceSettings, null, true);
          var report = _this.parent.dataSourceSettings;
          if (!isNullOrUndefined(calcInfo.name) && calcInfo.name !== "" && !isNullOrUndefined(calcInfo.caption) && calcInfo.caption !== "" && calcInfo.formula && calcInfo.formula !== "") {
            var field = void 0;
            if (_this.parent.dataType === "olap") {
              field = {
                name: calcInfo.name,
                formula: calcInfo.formula,
                formatString: calcInfo.formatString
              };
              if (!isNullOrUndefined(calcInfo.hierarchyUniqueName)) {
                field.hierarchyUniqueName = calcInfo.hierarchyUniqueName;
              }
              _this.isFieldExist = false;
              if (!_this.isEdit) {
                for (var i = 0; i < report.calculatedFieldSettings.length; i++) {
                  if (report.calculatedFieldSettings[i].name === field.name) {
                    _this.createConfirmDialog(currentObj.parent.localeObj.getConstant("alert"), currentObj.parent.localeObj.getConstant("confirmText"), calcInfo);
                    return;
                  }
                }
              } else {
                for (var i = 0; i < report.calculatedFieldSettings.length; i++) {
                  if (report.calculatedFieldSettings[i].name === field.name && _this.isEdit) {
                    report.calculatedFieldSettings[i].hierarchyUniqueName = calcInfo.hierarchyUniqueName;
                    _this.parent.olapEngineModule.fieldList[field.name].caption = calcInfo.caption;
                    report.calculatedFieldSettings[i].formatString = field.formatString;
                    report.calculatedFieldSettings[i].formula = field.formula;
                    field = report.calculatedFieldSettings[i];
                    _this.updateFormatSettings(report, field.name, calcInfo.formatString);
                    _this.parent.olapEngineModule.getFormattedFields(report.formatSettings);
                    if (_this.parent.olapEngineModule.formatFields[field.name]) {
                      if (_this.parent.olapEngineModule.formatFields[field.name].format) {
                        _this.parent.olapEngineModule.formatFields[field.name].format = _this.getFormat(field.formatString);
                      } else {
                        delete _this.parent.olapEngineModule.formatFields[field.name];
                      }
                    }
                    _this.isFieldExist = true;
                    break;
                  }
                }
                var axisFields = [report.rows, report.columns, report.values, report.filters];
                var isFieldExist = false;
                for (var _b = 0, axisFields_1 = axisFields; _b < axisFields_1.length; _b++) {
                  var fields = axisFields_1[_b];
                  for (var _c = 0, fields_2 = fields; _c < fields_2.length; _c++) {
                    var item = fields_2[_c];
                    if (item.isCalculatedField && field.name !== null && item.name === field.name && _this.isEdit) {
                      item.caption = calcInfo.caption;
                      _this.isFieldExist = true;
                      isFieldExist = true;
                      break;
                    }
                  }
                  if (isFieldExist) {
                    break;
                  }
                }
              }
              if (!_this.isFieldExist) {
                report.calculatedFieldSettings.push(field);
                _this.updateFormatSettings(report, field.name, calcInfo.formatString);
                _this.parent.olapEngineModule.getFormattedFields(report.formatSettings);
                if (_this.parent.olapEngineModule.formatFields[field.name]) {
                  if (_this.parent.olapEngineModule.formatFields[field.name].format) {
                    _this.parent.olapEngineModule.formatFields[field.name].format = _this.getFormat(field.formatString);
                  } else {
                    delete _this.parent.olapEngineModule.formatFields[field.name];
                  }
                }
              }
              _this.parent.lastCalcFieldInfo = field;
            } else {
              field = {
                name: calcInfo.name,
                caption: calcInfo.caption,
                type: "CalculatedField"
              };
              var cField = {
                name: calcInfo.name,
                formula: calcInfo.formula
              };
              if (!isNullOrUndefined(calcInfo.formatString)) {
                cField.formatString = calcInfo.formatString;
              }
              _this.isFieldExist = true;
              if (!_this.isEdit) {
                for (var i = 0; i < report.values.length; i++) {
                  if (report.values[i].type === CALC && report.values[i].name === field.name) {
                    for (var j = 0; j < report.calculatedFieldSettings.length; j++) {
                      if (report.calculatedFieldSettings[j].name === field.name) {
                        _this.createConfirmDialog(currentObj.parent.localeObj.getConstant("alert"), currentObj.parent.localeObj.getConstant("confirmText"), calcInfo);
                        return;
                      }
                    }
                    _this.isFieldExist = false;
                  }
                }
              } else {
                for (var i = 0; i < report.values.length; i++) {
                  if (report.values[i].type === CALC && field.name !== null && report.values[i].name === field.name && _this.isEdit) {
                    for (var j = 0; j < report.calculatedFieldSettings.length; j++) {
                      if (report.calculatedFieldSettings[j].name === field.name) {
                        report.values.splice(i, 1);
                        report.values.splice(i, 0, field);
                        _this.currentFormula = report.calculatedFieldSettings[j].formula;
                        report.calculatedFieldSettings.splice(j, 1);
                        report.calculatedFieldSettings.splice(j, 0, cField);
                        _this.updateFormatSettings(report, field.name, calcInfo.formatString);
                        _this.isFieldExist = false;
                      }
                    }
                  }
                }
              }
              if (_this.isFieldExist) {
                report.values.push(field);
                report.calculatedFieldSettings.push(cField);
                _this.updateFormatSettings(report, field.name, calcInfo.formatString);
              }
              _this.parent.lastCalcFieldInfo = cField;
            }
            _this.addFormula(report, field.name);
          } else {
            if (isNullOrUndefined(calcInfo.name) || calcInfo.name === "" || isNullOrUndefined(calcInfo.caption) || calcInfo.caption === "") {
              var inputObj_1 = getInstance(select("#" + _this.parentID + "ddlelement", document), MaskedTextBox);
              inputObj_1.value = "";
              addClass([document.getElementById(_this.parentID + "ddlelement")], EMPTY_FIELD);
              document.getElementById(_this.parentID + "ddlelement").focus();
            } else {
              _this.triggerActionCompleteEvent();
            }
          }
        } else {
          _this.endDialog();
          _this.parent.lastCalcFieldInfo = {};
          _this.isFormula = false;
        }
      });
    };
    CalculatedField2.prototype.getCalculatedFieldInfo = function() {
      var element = select("#" + this.parentID + "calculateddialog", document);
      var dialog = element ? getInstance(element, Dialog) : void 0;
      var inputObj = getInstance(select("#" + this.parentID + "ddlelement", document), MaskedTextBox);
      var dropField = select("#" + this.parentID + "droppable", document);
      var dialogElement = this.parent.isAdaptive ? this.parent.dialogRenderer.adaptiveElement.element : dialog.element;
      var customFormat = getInstance(select("#" + this.parentID + "Custom_Format_Element", dialogElement), MaskedTextBox);
      var field = {
        name: this.isEdit ? this.currentFieldName : inputObj.value,
        caption: inputObj.value,
        formula: dropField.value
      };
      var ddlFormatTypes = getInstance(select("#" + this.parentID + "Format_Div", dialogElement), DropDownList);
      field.formatString = ddlFormatTypes.value === "Custom" ? customFormat.value : ddlFormatTypes.value === "None" ? null : ddlFormatTypes.value;
      if (this.parent.dataType === "olap") {
        var memberTypeDrop = getInstance(select("#" + this.parentID + "Member_Type_Div", dialogElement), DropDownList);
        var hierarchyDrop = getInstance(select("#" + this.parentID + "Hierarchy_List_Div", dialogElement), DropDownList);
        if (memberTypeDrop.value === "Dimension") {
          field.hierarchyUniqueName = hierarchyDrop.value;
        }
      }
      return field;
    };
    CalculatedField2.prototype.updateFormatSettings = function(report, fieldName, formatString) {
      var newFormat = {
        name: fieldName,
        format: formatString,
        useGrouping: true
      };
      var isFormatExist = false;
      for (var i = 0; i < report.formatSettings.length; i++) {
        if (report.formatSettings[i].name === fieldName) {
          if (formatString === "undefined" || formatString === void 0 || formatString === "") {
            report.formatSettings.splice(i, 1);
            isFormatExist = true;
            break;
          } else {
            var formatObj = report.formatSettings[i].properties ? report.formatSettings[i].properties : report.formatSettings[i];
            formatObj.format = formatString;
            report.formatSettings.splice(i, 1, formatObj);
            isFormatExist = true;
            break;
          }
        }
      }
      if (!isFormatExist && formatString !== "" && !isNullOrUndefined(formatString)) {
        report.formatSettings.push(newFormat);
      }
    };
    CalculatedField2.prototype.addFormula = function(report, field) {
      this.isFormula = true;
      this.field = field;
      this.parent.setProperties({
        dataSourceSettings: report
      }, true);
      if (this.parent.getModuleName() === "pivotfieldlist" && (this.parent.isDeferLayoutUpdate || this.parent.pivotGridModule && this.parent.pivotGridModule.pivotDeferLayoutUpdate)) {
        this.parent.isRequiredUpdate = false;
      }
      try {
        var actionInfo = {
          calculatedFieldInfo: this.parent.lastCalcFieldInfo
        };
        this.parent.actionObj.actionInfo = actionInfo;
        var actionName = this.parent.actionObj.actionName === editCalculatedField ? calculatedFieldEdited : calculatedFieldApplied;
        this.parent.actionObj.actionName = actionName;
        this.parent.updateDataSource(false);
        var pivot = this.parent.getModuleName() === "pivotfieldlist" && this.parent.pivotGridModule ? this.parent.pivotGridModule : this.parent;
        if (pivot && pivot.dataSourceSettings.mode !== "Server") {
          this.endDialog();
        } else {
          this.isRequireUpdate = true;
        }
        if (this.parent.getModuleName() === "pivotfieldlist" && this.parent.renderMode === "Fixed" && this.parent.isDeferLayoutUpdate) {
          this.parent.pivotChange = true;
        }
      } catch (exception) {
        this.showError();
      }
    };
    CalculatedField2.prototype.endDialog = function() {
      this.isEdit = false;
      var element = select("#" + this.parentID + "calculateddialog", document);
      var dialog = element ? getInstance(element, Dialog) : void 0;
      if (dialog) {
        dialog.close();
      } else {
        var inputObj = getInstance(select("#" + this.parentID + "ddlelement", document), MaskedTextBox);
        inputObj.value = "";
        this.currentFieldName = this.formatText = this.fieldText = this.formatType = null;
        this.formulaText = this.fieldType = this.parentHierarchy = null;
        var dialogElement = this.parent.isAdaptive ? this.parent.dialogRenderer.parentElement : dialog.element;
        this.parent.dialogRenderer.parentElement.querySelector("." + CALCINPUT).value = "";
        select("#" + this.parentID + "droppable", this.parent.dialogRenderer.parentElement).value = "";
        select("#" + this.parentID + "Custom_Format_Element", this.parent.dialogRenderer.parentElement).value = "";
        if (this.parent.dataType === "olap") {
          var memberTypeDrop = getInstance(select("#" + this.parentID + "Member_Type_Div", dialogElement), DropDownList);
          var hierarchyDrop = getInstance(select("#" + this.parentID + "Hierarchy_List_Div", dialogElement), DropDownList);
          memberTypeDrop.index = 0;
          memberTypeDrop.readonly = false;
          memberTypeDrop.dataBind();
          hierarchyDrop.index = 0;
          hierarchyDrop.enabled = false;
          hierarchyDrop.dataBind();
        }
        var customFormat = getInstance(select("#" + this.parentID + "Custom_Format_Element", dialogElement), MaskedTextBox);
        var ddlFormatTypes = getInstance(select("#" + this.parentID + "Format_Div", dialogElement), DropDownList);
        ddlFormatTypes.index = this.parent.dataType === "olap" ? 0 : 4;
        ddlFormatTypes.dataBind();
        customFormat.enabled = false;
        customFormat.dataBind();
      }
    };
    CalculatedField2.prototype.showError = function() {
      if (this.parent.engineModule.fieldList[this.field]) {
        delete this.parent.engineModule.fieldList[this.field];
      }
      this.parent.setProperties({
        dataSourceSettings: this.existingReport
      }, true);
      if (this.isEdit) {
        var calcFields = this.parent.dataSourceSettings.calculatedFieldSettings;
        for (var i = 0; calcFields && i < calcFields.length; i++) {
          if (calcFields[i].name === this.field) {
            calcFields[i].formula = this.currentFormula;
            break;
          }
        }
      } else if (this.parent.engineModule.fields) {
        for (var i = 0; i < this.parent.engineModule.fields.length; i++) {
          if (this.parent.engineModule.fields[i] === this.field) {
            this.parent.engineModule.fields.splice(i, 1);
            break;
          }
        }
      }
      this.parent.lastCalcFieldInfo = {};
      this.triggerActionCompleteEvent();
      this.parent.updateDataSource(false);
      this.isFormula = false;
    };
    CalculatedField2.prototype.getFieldListData = function(parent) {
      var fields = [];
      if (this.parent.dataType === "olap") {
        fields = PivotUtil.getClonedData(parent.olapEngineModule.fieldListData ? parent.olapEngineModule.fieldListData : []);
        for (var _i = 0, _a = fields; _i < _a.length; _i++) {
          var item = _a[_i];
          if (item.spriteCssClass && (item.spriteCssClass.indexOf("e-attributeCDB-icon") > -1 || item.spriteCssClass.indexOf("e-level-members") > -1)) {
            item.hasChildren = true;
          } else if (item.spriteCssClass && item.spriteCssClass.indexOf("e-namedSetCDB-icon") > -1) {
            item.hasChildren = false;
          } else if (item.spriteCssClass && item.spriteCssClass.indexOf("e-calcMemberGroupCDB") > -1) {
            item.expanded = this.isEdit;
          }
        }
      } else {
        for (var _b = 0, _c = parent.engineModule.fieldList ? Object.keys(parent.engineModule.fieldList) : []; _b < _c.length; _b++) {
          var key = _c[_b];
          var type = null;
          var typeVal = null;
          var field = parent.engineModule.fieldList[key];
          if ((field.type !== "number" || parent.engineModule.fieldList[key].type === "include" || parent.engineModule.fieldList[key].type === "exclude") && field.aggregateType !== "DistinctCount") {
            typeVal = COUNT;
          } else {
            typeVal = field.aggregateType !== void 0 ? field.aggregateType : SUM;
          }
          type = this.parent.localeObj.getConstant(typeVal);
          fields.push({
            index: field.index,
            name: (this.parent.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(field.caption) : field.caption) + " (" + type + ")",
            type: typeVal,
            icon: FORMAT + " " + ICON,
            formula: this.parent.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(field.formula) : field.formula,
            field: this.parent.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(key) : key,
            caption: this.parent.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(field.caption ? field.caption : key) : field.caption ? field.caption : key
          });
        }
      }
      return fields;
    };
    CalculatedField2.prototype.fieldDropped = function(args) {
      args.cancel = true;
      var dialog = getInstance(select("#" + this.parentID + "calculateddialog", document), Dialog);
      var dropField = select("#" + this.parentID + "droppable", dialog.element);
      removeClass([dropField], "e-copy-drop");
      removeClass([args.draggedNode.querySelector("." + LIST_TEXT_CLASS)], SELECTED_NODE_CLASS);
      var field = args.draggedNode.getAttribute("data-field");
      if (this.parent.dataType === "olap") {
        if (this.parent.olapEngineModule.fieldList[field] && this.parent.olapEngineModule.fieldList[field].isCalculatedField) {
          field = this.parent.olapEngineModule.fieldList[field].tag;
        }
        if (args.target.id === this.parentID + "droppable" && dropField.value === "") {
          dropField.value = field;
          dropField.focus();
        } else if (args.target.id === this.parentID + "droppable" && dropField.value !== "") {
          var currentValue = dropField.value;
          var cursorPos = dropField.selectionStart;
          var textAfterText = currentValue.substring(cursorPos, currentValue.length);
          var textBeforeText = currentValue.substring(0, cursorPos);
          var textCovered = textBeforeText + field;
          dropField.value = textBeforeText + field + textAfterText;
          dropField.focus();
          dropField.setSelectionRange(textCovered.length, textCovered.length);
        } else {
          args.cancel = true;
        }
      } else {
        var type = args.draggedNode.getAttribute("data-type");
        if (args.target.id === this.parentID + "droppable" && dropField.value === "") {
          if (type === CALC) {
            dropField.value = args.draggedNodeData.id.toString();
          } else {
            dropField.value = '"' + type + "(" + field + ')"';
          }
          dropField.focus();
        } else if (args.target.id === this.parentID + "droppable" && dropField.value !== "") {
          var textCovered = void 0;
          var cursorPos = dropField.selectionStart;
          var currentValue = dropField.value;
          var textBeforeText = currentValue.substring(0, cursorPos);
          var textAfterText = currentValue.substring(cursorPos, currentValue.length);
          if (type === CALC) {
            textCovered = textBeforeText + args.draggedNodeData.id.toString();
            dropField.value = textBeforeText + args.draggedNodeData.id.toString() + textAfterText;
          } else {
            textCovered = textBeforeText + '"' + type + "(" + field + ')"';
            dropField.value = textBeforeText + '"' + type + "(" + field + ')"' + textAfterText;
          }
          dropField.focus();
          dropField.setSelectionRange(textCovered.length, textCovered.length);
        } else {
          args.cancel = true;
        }
      }
    };
    CalculatedField2.prototype.createDialog = function() {
      var _this = this;
      if (select("#" + this.parentID + "calculateddialog", document) !== null) {
        remove(select("#" + this.parentID + "calculateddialog", document));
        while (!isNullOrUndefined(document.querySelector("." + this.parentID + "calculatedmenu"))) {
          remove(document.querySelector("." + this.parentID + "calculatedmenu"));
        }
      }
      var calculatedFieldElement = createElement("div", {
        id: this.parentID + "calculateddialog",
        className: CALCDIALOG + " " + (this.parent.dataType === "olap" ? OLAP_CALCDIALOG : "")
      });
      this.parent.element.appendChild(calculatedFieldElement);
      var calcButtons = [{
        click: this.applyFormula.bind(this),
        isFlat: false,
        buttonModel: {
          content: this.parent.localeObj.getConstant("ok"),
          isPrimary: true,
          cssClass: this.parent.cssClass
        }
      }, {
        click: this.cancelClick.bind(this),
        isFlat: false,
        buttonModel: {
          content: this.parent.localeObj.getConstant("cancel"),
          cssClass: this.parent.cssClass
        }
      }];
      if (this.parent.dataType === "olap") {
        var clearButton = {
          click: this.clearFormula.bind(this),
          isFlat: false,
          buttonModel: {
            cssClass: "e-calc-clear-btn" + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
            content: this.parent.localeObj.getConstant("clear")
          }
        };
        calcButtons.splice(0, 0, clearButton);
      }
      var dialog = new Dialog({
        allowDragging: true,
        position: {
          X: "center",
          Y: "center"
        },
        buttons: calcButtons,
        close: this.closeDialog.bind(this),
        beforeOpen: this.beforeOpen.bind(this),
        open: function() {
          if (select("#" + _this.parentID + "ddlelement", dialog.element)) {
            select("#" + _this.parentID + "ddlelement", dialog.element).focus();
          }
        },
        animationSettings: {
          effect: "Zoom"
        },
        width: "25%",
        isModal: true,
        closeOnEscape: true,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        showCloseIcon: true,
        header: this.parent.localeObj.getConstant("createCalculatedField"),
        target: document.body,
        cssClass: this.parent.cssClass
      });
      dialog.isStringTemplate = true;
      dialog.appendTo(calculatedFieldElement);
    };
    CalculatedField2.prototype.cancelClick = function() {
      var dialog = getInstance(select("#" + this.parentID + "calculateddialog", document), Dialog);
      dialog.close();
      this.isEdit = false;
    };
    CalculatedField2.prototype.beforeOpen = function() {
      var dialog = getInstance(select("#" + this.parentID + "calculateddialog", document), Dialog);
      dialog.element.querySelector(".e-dlg-header").setAttribute("title", this.parent.localeObj.getConstant("createCalculatedField"));
    };
    CalculatedField2.prototype.closeDialog = function() {
      if (this.parent.getModuleName() === "pivotfieldlist") {
        if (this.parent.actionObj.actionName !== "Abort") {
          this.parent.axisFieldModule.render();
        }
        if (this.parent.renderMode !== "Fixed") {
          addClass([this.parent.element.querySelector("." + TOGGLE_FIELD_LIST_CLASS)], ICON_HIDDEN);
          this.parent.dialogRenderer.fieldListDialog.show();
        }
      }
      this.destroy();
      if (!isNullOrUndefined(document.getElementById(this.parentID + "calculateddialog"))) {
        remove(document.getElementById(this.parentID + "calculateddialog"));
      }
      if (!isNullOrUndefined(document.querySelector("." + this.parentID + "calculatedmenu"))) {
        remove(document.querySelector("." + this.parentID + "calculatedmenu"));
      }
      var timeOut = this.parent.getModuleName() === "pivotview" || this.parent.getModuleName() === "pivotfieldlist" && this.parent.renderMode === "Fixed" ? 0 : 500;
      if (this.buttonCall) {
        this.buttonCall = false;
        setTimeout(this.setFocus.bind(this), timeOut);
      }
    };
    CalculatedField2.prototype.setFocus = function() {
      var parentElement;
      if (this.parent.getModuleName() === "pivotview" && this.parent.element) {
        parentElement = this.parent.element;
      } else if (document.getElementById(this.parent.element.id + "_Container")) {
        parentElement = document.getElementById(this.parent.element.id + "_Container");
      }
      if (parentElement) {
        var pivotButtons = [].slice.call(parentElement.querySelectorAll(".e-pivot-button"));
        for (var _i = 0, pivotButtons_1 = pivotButtons; _i < pivotButtons_1.length; _i++) {
          var item = pivotButtons_1[_i];
          if (item.getAttribute("data-uid") === this.currentFieldName) {
            item.focus();
            break;
          }
        }
      }
    };
    CalculatedField2.prototype.renderDialogElements = function() {
      var outerDiv = createElement("div", {
        id: this.parentID + "outerDiv",
        className: (this.parent.dataType === "olap" ? OLAP_CALCOUTERDIV + " " : "") + CALCOUTERDIV
      });
      var olapFieldTreeDiv = createElement("div", {
        id: this.parentID + "Olap_Tree_Div",
        className: "e-olap-field-tree-div"
      });
      var pivotCalcDiv = createElement("div", {
        id: this.parentID + "Pivot_Calc_Div",
        className: "e-pivot-calculated-div"
      });
      if (this.parent.getModuleName() === "pivotfieldlist" && this.parent.dialogRenderer.parentElement.querySelector("." + FORMULA) !== null && this.parent.isAdaptive) {
        var accordDiv = createElement("div", {
          id: this.parentID + "accordDiv",
          className: CALCACCORD
        });
        outerDiv.appendChild(accordDiv);
        var buttonDiv = createElement("div", {
          id: this.parentID + "buttonDiv",
          className: CALCBUTTONDIV
        });
        var addBtn = createElement("button", {
          id: this.parentID + "addBtn",
          className: CALCADDBTN,
          attrs: {
            "type": "button"
          }
        });
        addBtn.innerText = this.parent.localeObj.getConstant("add");
        var cancelBtn = createElement("button", {
          id: this.parentID + "cancelBtn",
          className: CALCCANCELBTN,
          attrs: {
            "type": "button"
          }
        });
        cancelBtn.innerText = this.parent.localeObj.getConstant("cancel");
        buttonDiv.appendChild(cancelBtn);
        buttonDiv.appendChild(addBtn);
        outerDiv.appendChild(buttonDiv);
      } else {
        if (!this.parent.isAdaptive && this.parent.dataType === "olap") {
          var formulaTitle = createElement("div", {
            className: PIVOT_FIELD_TITLE_CLASS,
            id: this.parentID + "_FieldNameTitle"
          });
          formulaTitle.innerText = this.parent.localeObj.getConstant("fieldTitle");
          pivotCalcDiv.appendChild(formulaTitle);
        }
        var inputDiv = createElement("div", {
          id: this.parentID + "innerDiv",
          className: CALCINPUTDIV
        });
        var inputObj = createElement("input", {
          id: this.parentID + "ddlelement",
          attrs: {
            "type": "text"
          },
          className: CALCINPUT
        });
        inputDiv.appendChild(inputObj);
        if (this.parent.dataType === "olap" && !this.parent.isAdaptive) {
          pivotCalcDiv.appendChild(inputDiv);
        } else {
          outerDiv.appendChild(inputDiv);
        }
        var wrapDiv = createElement("div", {
          id: this.parentID + "control_container",
          className: TREEVIEWOUTER
        });
        if (!this.parent.isAdaptive) {
          var fieldTitle = createElement("div", {
            className: PIVOT_ALL_FIELD_TITLE_CLASS
          });
          fieldTitle.innerText = this.parent.dataType === "olap" ? this.parent.localeObj.getConstant("allFields") : this.parent.localeObj.getConstant("formulaField");
          if (this.parent.dataType === "olap") {
            var headerWrapperDiv = createElement("div", {
              className: PIVOT_ALL_FIELD_TITLE_CLASS + "-container"
            });
            headerWrapperDiv.appendChild(fieldTitle);
            var spanElement = createElement("span", {
              attrs: {
                "tabindex": "0",
                "aria-disabled": "false",
                "aria-label": this.parent.localeObj.getConstant("fieldTooltip"),
                "role": "button"
              },
              className: ICON + " " + CALC_INFO
            });
            headerWrapperDiv.appendChild(spanElement);
            var tooltip = new Tooltip({
              content: this.parent.localeObj.getConstant("fieldTooltip"),
              position: this.parent.enableRtl ? "RightCenter" : "LeftCenter",
              target: "." + CALC_INFO,
              offsetY: this.parent.enableRtl ? -10 : -10,
              locale: this.parent.locale,
              enableRtl: this.parent.enableRtl,
              enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
              width: 220,
              cssClass: this.parent.cssClass
            });
            tooltip.appendTo(headerWrapperDiv);
            wrapDiv.appendChild(headerWrapperDiv);
          } else {
            outerDiv.appendChild(fieldTitle);
          }
        }
        var treeOuterDiv = createElement("div", {
          className: TREEVIEW + "-outer-div"
        });
        wrapDiv.appendChild(treeOuterDiv);
        var treeElement = createElement("div", {
          id: this.parentID + "tree",
          className: TREEVIEW
        });
        treeOuterDiv.appendChild(treeElement);
        if (this.parent.dataType === "olap" && !this.parent.isAdaptive) {
          olapFieldTreeDiv.appendChild(wrapDiv);
        } else {
          outerDiv.appendChild(wrapDiv);
        }
        if (!this.parent.isAdaptive) {
          var formulaTitle = createElement("div", {
            className: PIVOT_FORMULA_TITLE_CLASS
          });
          formulaTitle.innerText = this.parent.dataType === "olap" ? this.parent.localeObj.getConstant("expressionField") : this.parent.localeObj.getConstant("formula");
          if (this.parent.dataType === "olap") {
            pivotCalcDiv.appendChild(formulaTitle);
          } else {
            outerDiv.appendChild(formulaTitle);
          }
        }
        var dropDiv = createElement("textarea", {
          id: this.parentID + "droppable",
          className: FORMULA + " e-control e-textbox e-input",
          attrs: {
            "placeholder": this.parent.isAdaptive ? this.parent.localeObj.getConstant("dropTextMobile") : this.parent.dataType === "olap" ? this.parent.localeObj.getConstant("olapDropText") : this.parent.localeObj.getConstant("dropText")
          }
        });
        if (this.parent.dataType === "olap" && !this.parent.isAdaptive) {
          pivotCalcDiv.appendChild(dropDiv);
        } else {
          outerDiv.appendChild(dropDiv);
        }
        if (this.parent.isAdaptive) {
          var buttonDiv = createElement("div", {
            id: this.parentID + "buttonDiv",
            className: CALCBUTTONDIV
          });
          var okBtn = createElement("button", {
            id: this.parentID + "okBtn",
            className: CALCOKBTN,
            attrs: {
              "type": "button"
            }
          });
          okBtn.innerText = this.parent.localeObj.getConstant("apply");
          buttonDiv.appendChild(okBtn);
          outerDiv.appendChild(buttonDiv);
        }
        if (this.parent.dataType === "olap") {
          if (!this.parent.isAdaptive) {
            var memberTypeTitle = createElement("div", {
              className: OLAP_MEMBER_TITLE_CLASS
            });
            memberTypeTitle.innerText = this.parent.localeObj.getConstant("memberType");
            pivotCalcDiv.appendChild(memberTypeTitle);
          }
          var memberTypeDrop = createElement("div", {
            id: this.parentID + "Member_Type_Div",
            className: CALC_MEMBER_TYPE_DIV
          });
          if (this.parent.isAdaptive) {
            outerDiv.appendChild(memberTypeDrop);
          } else {
            pivotCalcDiv.appendChild(memberTypeDrop);
            var hierarchyTitle = createElement("div", {
              className: OLAP_HIERARCHY_TITLE_CLASS
            });
            hierarchyTitle.innerText = this.parent.localeObj.getConstant("selectedHierarchy");
            pivotCalcDiv.appendChild(hierarchyTitle);
          }
          var hierarchyDrop = createElement("div", {
            id: this.parentID + "Hierarchy_List_Div",
            className: CALC_HIERARCHY_LIST_DIV
          });
          if (this.parent.isAdaptive) {
            outerDiv.appendChild(hierarchyDrop);
          } else {
            pivotCalcDiv.appendChild(hierarchyDrop);
          }
        }
        if (!this.parent.isAdaptive) {
          var formatTitle = createElement("div", {
            className: PIVOT_FORMAT_TITLE_CLASS
          });
          formatTitle.innerText = this.parent.localeObj.getConstant("formatString");
          pivotCalcDiv.appendChild(formatTitle);
        }
        var ddlFormatTypes = createElement("div", {
          id: this.parentID + "Format_Div",
          className: CALC_FORMAT_TYPE_DIV
        });
        if (this.parent.isAdaptive) {
          outerDiv.appendChild(ddlFormatTypes);
        } else {
          pivotCalcDiv.appendChild(ddlFormatTypes);
        }
        var customFormatDiv = createElement("div", {
          id: this.parentID + "custom_Format_Div",
          className: PIVOT_CALC_CUSTOM_FORMAT_INPUTDIV
        });
        var customFormatObj = createElement("input", {
          id: this.parentID + "Custom_Format_Element",
          attrs: {
            "type": "text"
          },
          className: CALC_FORMAT_INPUT
        });
        customFormatDiv.appendChild(customFormatObj);
        pivotCalcDiv.appendChild(customFormatDiv);
        if (this.parent.isAdaptive) {
          outerDiv.appendChild(customFormatDiv);
        } else {
          pivotCalcDiv.appendChild(customFormatDiv);
        }
        if (this.parent.getModuleName() === "pivotfieldlist" && this.parent.dialogRenderer.parentElement.querySelector("." + FORMULA) === null && this.parent.isAdaptive) {
          var okBtn = outerDiv.querySelector("." + CALCOKBTN);
          outerDiv.appendChild(okBtn);
        } else {
          if (this.parent.dataType === "olap") {
            outerDiv.appendChild(olapFieldTreeDiv);
          }
          outerDiv.appendChild(pivotCalcDiv);
        }
      }
      return outerDiv;
    };
    CalculatedField2.prototype.renderAdaptiveLayout = function(isEdit) {
      var dialogElement = this.parent.dialogRenderer.adaptiveElement;
      if (isEdit) {
        if (select("#" + this.parentID + "droppable", dialogElement.element)) {
          var inputObj = getInstance(select("#" + this.parentID + "ddlelement", document), MaskedTextBox);
          this.formulaText = select("#" + this.parentID + "droppable", document).value;
          this.fieldText = inputObj.value;
        }
        if (dialogElement.element.querySelector("." + CALC_MEMBER_TYPE_DIV)) {
          var memberTypeDrop = getInstance(select("#" + this.parentID + "Member_Type_Div", dialogElement.element), DropDownList);
          this.fieldType = memberTypeDrop.value;
        }
        if (dialogElement.element.querySelector("." + CALC_HIERARCHY_LIST_DIV)) {
          var hierarchyDrop = getInstance(select("#" + this.parentID + "Hierarchy_List_Div", dialogElement.element), DropDownList);
          this.parentHierarchy = this.fieldType === "Dimension" ? hierarchyDrop.value : null;
        }
        if (dialogElement.element.querySelector("." + CALC_FORMAT_TYPE_DIV)) {
          var ddlFormatTypes = getInstance(select("#" + this.parentID + "Format_Div", dialogElement.element), DropDownList);
          this.formatType = ddlFormatTypes.value;
        }
        if (dialogElement.element.querySelector("." + CALC_FORMAT_INPUT)) {
          var customFormat = getInstance(select("#" + this.parentID + "Custom_Format_Element", dialogElement.element), MaskedTextBox);
          this.formatText = (this.parent.dataType === "olap" ? this.formatType : this.getFormat(this.formatType)) === "Custom" ? customFormat.value : null;
        }
      } else {
        this.currentFieldName = this.formulaText = this.fieldText = this.formatText = null;
        this.fieldType = this.formatType = this.parentHierarchy = null;
      }
      this.renderMobileLayout(dialogElement);
    };
    CalculatedField2.prototype.updateAdaptiveCalculatedField = function(isEdit, fieldName) {
      var dialogElement = this.parent.dialogRenderer.adaptiveElement.element;
      this.isEdit = isEdit;
      var calcInfo = isEdit ? this.parent.dataType === "pivot" ? this.parent.engineModule.fieldList[fieldName] : this.parent.olapEngineModule.fieldList[fieldName] : {
        id: null,
        caption: null,
        formula: null,
        fieldType: "Measure",
        formatString: this.parent.dataType === "pivot" ? null : "Standard",
        parentHierarchy: null
      };
      this.currentFieldName = calcInfo.id;
      var inputObj = getInstance(select("#" + this.parentID + "ddlelement", document), MaskedTextBox);
      if (select("#" + this.parentID + "droppable", document)) {
        this.formulaText = select("#" + this.parentID + "droppable", document).value = calcInfo.formula;
        this.fieldText = inputObj.value = calcInfo.caption;
        inputObj.dataBind();
      }
      if (dialogElement.querySelector("." + CALC_MEMBER_TYPE_DIV)) {
        var memberTypeDrop = getInstance(select("#" + this.parentID + "Member_Type_Div", dialogElement), DropDownList);
        this.fieldType = memberTypeDrop.value = calcInfo.fieldType;
        memberTypeDrop.readonly = isEdit ? true : false;
        memberTypeDrop.dataBind();
      }
      if (dialogElement.querySelector("." + CALC_HIERARCHY_LIST_DIV)) {
        var hierarchyDrop = getInstance(select("#" + this.parentID + "Hierarchy_List_Div", dialogElement), DropDownList);
        if (this.fieldType === "Dimension") {
          this.parentHierarchy = hierarchyDrop.value = calcInfo.parentHierarchy;
        } else {
          this.parentHierarchy = null;
          hierarchyDrop.index = 0;
        }
        hierarchyDrop.dataBind();
      }
      if (dialogElement.querySelector("." + CALC_FORMAT_TYPE_DIV)) {
        var ddlFormatTypes = getInstance(select("#" + this.parentID + "Format_Div", dialogElement), DropDownList);
        this.formatType = ddlFormatTypes.value = this.formatTypes.indexOf(calcInfo.formatString) > -1 ? calcInfo.formatString : "Custom";
      }
      if (dialogElement.querySelector("." + CALC_FORMAT_INPUT)) {
        var customFormat = getInstance(select("#" + this.parentID + "Custom_Format_Element", dialogElement), MaskedTextBox);
        var formatObj = PivotUtil.getFieldByName(fieldName, this.parent.dataSourceSettings.formatSettings);
        if (this.parent.dataType === "pivot") {
          this.formatText = customFormat.value = formatObj ? formatObj.format : null;
        } else {
          this.formatText = customFormat.value = this.formatType === "Custom" ? calcInfo.formatString : null;
        }
        customFormat.dataBind();
      }
    };
    CalculatedField2.prototype.createDropElements = function() {
      var _this = this;
      var dialog = select("#" + this.parentID + "calculateddialog", document) ? getInstance(select("#" + this.parentID + "calculateddialog", document), Dialog) : null;
      var dialogElement = this.parent.isAdaptive ? this.parent.dialogRenderer.parentElement : dialog.element;
      var fData = [];
      var fieldData = [];
      for (var _i = 0, _a = this.formatTypes; _i < _a.length; _i++) {
        var format = _a[_i];
        fData.push({
          value: this.parent.dataType === "pivot" ? this.getFormat(format) : format,
          text: this.parent.localeObj.getConstant(format)
        });
      }
      if (this.parent.dataType === "olap") {
        var mData = [];
        var memberTypeData = ["Measure", "Dimension"];
        for (var _b = 0, memberTypeData_1 = memberTypeData; _b < memberTypeData_1.length; _b++) {
          var type = memberTypeData_1[_b];
          mData.push({
            value: type,
            text: this.parent.localeObj.getConstant(type)
          });
        }
        var fields = PivotUtil.getClonedData(this.parent.olapEngineModule.fieldListData);
        for (var _c = 0, _d = fields; _c < _d.length; _c++) {
          var item = _d[_c];
          if (item.spriteCssClass && (item.spriteCssClass.indexOf("e-attributeCDB-icon") > -1 || item.spriteCssClass.indexOf("e-hierarchyCDB-icon") > -1)) {
            fieldData.push({
              value: item.id,
              text: item.caption
            });
          }
        }
        var memberTypeObj = new DropDownList({
          dataSource: mData,
          enableRtl: this.parent.enableRtl,
          locale: this.parent.locale,
          fields: {
            value: "value",
            text: "text"
          },
          value: this.fieldType !== null ? this.fieldType : mData[0].value,
          readonly: this.isEdit,
          cssClass: MEMBER_OPTIONS_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
          width: "100%",
          change: function(args) {
            hierarchyListObj_1.enabled = args.value === "Dimension" ? true : false;
            _this.fieldType = args.value;
            _this.formulaText = select("#" + _this.parentID + "droppable", document).value;
            hierarchyListObj_1.dataBind();
          }
        });
        memberTypeObj.isStringTemplate = true;
        memberTypeObj.appendTo(select("#" + this.parentID + "Member_Type_Div", dialogElement));
        var hierarchyListObj_1 = new DropDownList({
          dataSource: fieldData,
          enableRtl: this.parent.enableRtl,
          locale: this.parent.locale,
          allowFiltering: true,
          enabled: memberTypeObj.value === "Dimension" ? true : false,
          filterBarPlaceholder: this.parent.localeObj.getConstant("example") + " " + fieldData[0].text.toString(),
          fields: {
            value: "value",
            text: "text"
          },
          value: this.parentHierarchy !== null && memberTypeObj.value === "Dimension" ? this.parentHierarchy : fieldData[0].value,
          cssClass: MEMBER_OPTIONS_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
          width: "100%",
          change: function(args) {
            _this.parentHierarchy = args.value;
            _this.formulaText = select("#" + _this.parentID + "droppable", document).value;
          }
        });
        hierarchyListObj_1.isStringTemplate = true;
        hierarchyListObj_1.appendTo(select("#" + this.parentID + "Hierarchy_List_Div", dialogElement));
      }
      var formatStringObj = new DropDownList({
        dataSource: fData,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        fields: {
          value: "value",
          text: "text"
        },
        value: this.parent.isAdaptive && this.formatType !== null ? this.formatType : this.parent.dataType === "olap" ? fData[0].value : fData[4].value,
        cssClass: MEMBER_OPTIONS_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
        width: "100%",
        change: function(args) {
          customerFormatObj.enabled = args.value === "Custom" ? true : false;
          _this.formatType = args.value;
          _this.formulaText = select("#" + _this.parentID + "droppable", document).value;
          customerFormatObj.dataBind();
        }
      });
      formatStringObj.isStringTemplate = true;
      formatStringObj.appendTo(select("#" + this.parentID + "Format_Div", dialogElement));
      var customerFormatObj = new MaskedTextBox({
        placeholder: this.parent.localeObj.getConstant("customFormat"),
        locale: this.parent.locale,
        enableRtl: this.parent.enableRtl,
        value: this.formatText !== null && formatStringObj.value === "Custom" ? this.formatText : null,
        enabled: formatStringObj.value === "Custom" ? true : false,
        change: function(args) {
          _this.formatText = args.value;
          _this.formulaText = select("#" + _this.parentID + "droppable", document).value;
        },
        cssClass: this.parent.cssClass
      });
      customerFormatObj.isStringTemplate = true;
      customerFormatObj.appendTo(select("#" + this.parentID + "Custom_Format_Element", dialogElement));
    };
    CalculatedField2.prototype.getFormat = function(pivotFormat) {
      var format = pivotFormat;
      if (this.parent.dataType !== "olap") {
        switch (format) {
          case "Standard":
            format = "N";
            break;
          case "Currency":
            format = "C";
            break;
          case "Percent":
            format = "P";
            break;
          case "N":
            format = "Standard";
            break;
          case "C":
            format = "Currency";
            break;
          case "P":
            format = "Percent";
            break;
        }
      } else {
        switch (format) {
          case "Standard":
            format = "N";
            break;
          case "Currency":
            format = "C";
            break;
          case "Percent":
            format = "P";
            break;
        }
      }
      return format;
    };
    CalculatedField2.prototype.createTreeView = function() {
      var _this = this;
      var dialog = select("#" + this.parentID + "calculateddialog", document) ? getInstance(select("#" + this.parentID + "calculateddialog", document), Dialog) : null;
      var dialogElement = this.parent.isAdaptive ? this.parent.dialogRenderer.parentElement : dialog.element;
      if (this.parent.dataType === "olap") {
        this.treeObj = new TreeView({
          fields: {
            dataSource: this.getFieldListData(this.parent),
            id: "id",
            text: "caption",
            parentID: "pid",
            iconCss: "spriteCssClass"
          },
          allowDragAndDrop: true,
          enableRtl: this.parent.enableRtl,
          enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
          locale: this.parent.locale,
          nodeDragStart: this.dragStart.bind(this),
          nodeDragging: function(e) {
            if (e.event.target && e.event.target.classList.contains(FORMULA)) {
              removeClass([e.clonedNode], NO_DRAG_CLASS);
              addClass([e.event.target], "e-copy-drop");
            } else {
              addClass([e.clonedNode], NO_DRAG_CLASS);
              removeClass([e.event.target], "e-copy-drop");
              e.dropIndicator = "e-no-drop";
              addClass([e.clonedNode.querySelector("." + ICON)], "e-icon-expandable");
              removeClass([e.clonedNode.querySelector("." + ICON)], "e-list-icon");
            }
          },
          nodeClicked: this.fieldClickHandler.bind(this),
          nodeSelected: function(args) {
            if (args.node.getAttribute("data-type") === CALC) {
              _this.displayMenu(args.node);
            } else {
              removeClass([args.node], "e-active");
              args.cancel = true;
            }
          },
          nodeDragStop: this.fieldDropped.bind(this),
          drawNode: this.drawTreeNode.bind(this),
          nodeExpanding: this.updateNodeIcon.bind(this),
          nodeCollapsed: this.updateNodeIcon.bind(this),
          sortOrder: "None",
          cssClass: this.parent.cssClass
        });
      } else {
        this.treeObj = new TreeView({
          fields: {
            dataSource: this.getFieldListData(this.parent),
            id: "formula",
            text: "name",
            iconCss: "icon"
          },
          allowDragAndDrop: true,
          enableRtl: this.parent.enableRtl,
          enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
          locale: this.parent.locale,
          cssClass: this.parent.cssClass,
          nodeCollapsing: this.nodeCollapsing.bind(this),
          nodeDragStart: this.dragStart.bind(this),
          nodeClicked: this.fieldClickHandler.bind(this),
          nodeDragStop: this.fieldDropped.bind(this),
          drawNode: this.drawTreeNode.bind(this),
          keyPress: function(args) {
            if (args.event.keyCode === 39) {
              args.cancel = true;
            }
          },
          sortOrder: "Ascending"
        });
      }
      this.treeObj.isStringTemplate = true;
      this.treeObj.appendTo(select("#" + this.parentID + "tree", dialogElement));
    };
    CalculatedField2.prototype.updateNodeIcon = function(args) {
      if (args.node && args.node.querySelector(".e-list-icon") && args.node.querySelector(".e-icon-expandable.e-process") && args.node.querySelector(".e-list-icon").className.indexOf("e-folderCDB-icon") > -1) {
        var node = args.node.querySelector(".e-list-icon");
        removeClass([node], "e-folderCDB-icon");
        addClass([node], "e-folderCDB-open-icon");
      } else if (args.node && args.node.querySelector(".e-list-icon") && args.node.querySelector(".e-icon-expandable") && args.node.querySelector(".e-list-icon").className.indexOf("e-folderCDB-open-icon") > -1) {
        var node = args.node.querySelector(".e-list-icon");
        removeClass([node], "e-folderCDB-open-icon");
        addClass([node], "e-folderCDB-icon");
      } else {
        var curTreeData = this.treeObj.fields.dataSource;
        var fieldListData = curTreeData;
        var childNodes = [];
        for (var _i = 0, fieldListData_1 = fieldListData; _i < fieldListData_1.length; _i++) {
          var item = fieldListData_1[_i];
          if (item.pid === args.nodeData.id.toString()) {
            childNodes.push(item);
          }
        }
        if (childNodes.length === 0) {
          this.parent.olapEngineModule.calcChildMembers = [];
          this.parent.olapEngineModule.getCalcChildMembers(this.parent.dataSourceSettings, args.nodeData.id.toString());
          childNodes = this.parent.olapEngineModule.calcChildMembers;
          this.parent.olapEngineModule.calcChildMembers = [];
          for (var _a = 0, childNodes_1 = childNodes; _a < childNodes_1.length; _a++) {
            var node = childNodes_1[_a];
            node.pid = args.nodeData.id.toString();
            node.hasChildren = false;
            node.spriteCssClass = "e-level-members";
            node.caption = node.caption === "" ? this.parent.localeObj.getConstant("blank") : node.caption;
            curTreeData.push(node);
          }
          this.treeObj.addNodes(childNodes, args.node);
        } else {
          return;
        }
      }
    };
    CalculatedField2.prototype.nodeCollapsing = function(args) {
      args.cancel = true;
    };
    CalculatedField2.prototype.dragStart = function(args) {
      var isDrag = false;
      var dragItem = args.clonedNode;
      if (dragItem && (this.parent.dataType === "olap" && (dragItem.querySelector(".e-calc-dimension-icon,.e-calc-measure-icon,.e-measure-icon") || dragItem.querySelector(".e-attributeCDB-icon,.e-hierarchyCDB-icon") || dragItem.querySelector(".e-level-members,.e-namedSetCDB-icon")) || this.parent.dataType === "pivot" && args.event.target.classList.contains(DRAG_CLASS))) {
        isDrag = true;
      }
      if (isDrag) {
        addClass([args.draggedNode.querySelector("." + LIST_TEXT_CLASS)], SELECTED_NODE_CLASS);
        addClass([dragItem], PIVOTCALC);
        var dialog = getInstance(select("#" + this.parentID + "calculateddialog", document), Dialog);
        dragItem.style.zIndex = (dialog.zIndex + 1).toString();
        dragItem.style.display = "inline";
      } else {
        args.cancel = true;
      }
    };
    CalculatedField2.prototype.drawTreeNode = function(args) {
      if (this.parent.dataType === "olap") {
        if (args.node.querySelector(".e-measure-icon")) {
          args.node.querySelector(".e-list-icon").style.display = "none";
        }
        var field = args.nodeData;
        args.node.setAttribute("data-field", field.id);
        args.node.setAttribute("data-caption", field.caption);
        var liTextElement = args.node.querySelector("." + TEXT_CONTENT_CLASS);
        if (args.nodeData && args.nodeData.type === CALC && liTextElement && args.node.querySelector(".e-list-icon.e-calc-member")) {
          args.node.setAttribute("data-type", field.type);
          args.node.setAttribute("data-membertype", field.fieldType);
          args.node.setAttribute("data-hierarchy", field.parentHierarchy ? field.parentHierarchy : "");
          args.node.setAttribute("data-formula", field.formula);
          var formatString = field.formatString ? this.formatTypes.indexOf(field.formatString) > -1 ? field.formatString : "Custom" : "None";
          args.node.setAttribute("data-formatString", formatString);
          args.node.setAttribute("data-customformatstring", formatString === "Custom" ? field.formatString : "");
          var removeElement = createElement("span", {
            className: GRID_REMOVE + " e-icons e-list-icon"
          });
          liTextElement.classList.add("e-calcfieldmember");
          if (this.parent.isAdaptive) {
            var editElement = createElement("span", {
              className: "e-list-edit-icon" + (this.isEdit && this.currentFieldName === field.id ? " e-edited " : " e-edit ") + ICON
            });
            var editWrapper = createElement("div", {
              className: "e-list-header-icon"
            });
            editWrapper.appendChild(editElement);
            editWrapper.appendChild(removeElement);
            liTextElement.appendChild(editWrapper);
          } else {
            liTextElement.appendChild(removeElement);
          }
        }
        if (this.parent.isAdaptive) {
          var liTextElement_1 = args.node.querySelector("." + TEXT_CONTENT_CLASS);
          if (args.node && args.node.querySelector(".e-list-icon") && liTextElement_1) {
            var liIconElement = args.node.querySelector(".e-list-icon");
            liTextElement_1.insertBefore(liIconElement, args.node.querySelector(".e-list-text"));
          }
          if (args.node && args.node.querySelector(".e-calcMemberGroupCDB,.e-measureGroupCDB-icon,.e-folderCDB-icon")) {
            args.node.querySelector("." + CHECKBOX_CONTAINER).style.display = "none";
          }
          if (args.node && args.node.querySelector(".e-level-members")) {
            args.node.querySelector(".e-list-icon").style.display = "none";
          }
        }
        if (args.node.querySelector(".e-calc-dimension-icon,.e-calc-measure-icon,.e-measure-icon") || args.node.querySelector(".e-attributeCDB-icon,.e-hierarchyCDB-icon") || args.node.querySelector(".e-level-members,.e-namedSetCDB-icon")) {
          addClass([args.node], BUTTON_DRAGGABLE);
        }
      } else {
        var field = args.nodeData.field;
        args.node.setAttribute("data-field", field);
        args.node.setAttribute("data-caption", args.nodeData.caption);
        args.node.setAttribute("data-type", args.nodeData.type);
        var formatObj = PivotUtil.getFieldByName(field, this.parent.dataSourceSettings.formatSettings);
        args.node.setAttribute("data-formatString", formatObj ? formatObj.format : "");
        if (formatObj) {
          var pivotFormat = this.getFormat(formatObj.format);
          var formatString = pivotFormat ? this.formatTypes.indexOf(pivotFormat) > -1 ? formatObj.format : "Custom" : "None";
          args.node.setAttribute("data-customformatstring", formatString === "Custom" ? pivotFormat : "");
          args.node.setAttribute("data-formatString", formatObj ? formatString : "");
        }
        var dragElement = createElement("span", {
          attrs: {
            "tabindex": "-1",
            "aria-disabled": "false",
            "title": this.parent.localeObj.getConstant("dragField")
          },
          className: ICON + " e-drag"
        });
        var spaceElement = createElement("div", {
          className: " e-iconspace"
        });
        prepend([dragElement], args.node.querySelector("." + TEXT_CONTENT_CLASS));
        append([spaceElement, args.node.querySelector("." + FORMAT)], args.node.querySelector("." + TEXT_CONTENT_CLASS));
        if (this.getMenuItems(this.parent.engineModule.fieldList[field].type).length <= 0) {
          removeClass([args.node.querySelector("." + FORMAT)], ICON);
        } else {
          args.node.querySelector("." + FORMAT).setAttribute("title", this.parent.localeObj.getConstant("format"));
        }
        if (this.parent.engineModule.fieldList[field].aggregateType === CALC) {
          args.node.querySelector("." + FORMAT).setAttribute("title", this.parent.localeObj.getConstant("remove"));
          addClass([args.node.querySelector("." + FORMAT)], GRID_REMOVE);
          addClass([args.node.querySelector(".e-iconspace")], [CALC_EDIT, ICON, "e-list-icon"]);
          args.node.querySelector("." + CALC_EDIT).setAttribute("title", this.parent.localeObj.getConstant("edit"));
          args.node.querySelector("." + CALC_EDIT).setAttribute("aria-disabled", "false");
          args.node.querySelector("." + CALC_EDIT).setAttribute("tabindex", "-1");
          removeClass([args.node.querySelector("." + FORMAT)], FORMAT);
          removeClass([args.node.querySelector(".e-iconspace")], "e-iconspace");
        }
      }
    };
    CalculatedField2.prototype.createTypeContainer = function(key) {
      var wrapDiv = createElement("div", {
        id: this.parentID + "control_container",
        className: TREEVIEWOUTER
      });
      var type = this.getMenuItems(this.parent.engineModule.fieldList[key].type);
      for (var i = 0; i < type.length; i++) {
        var input = createElement("input", {
          id: this.parentID + "radio" + key + type[i],
          attrs: {
            "type": "radio",
            "data-ftxt": key,
            "data-value": type[i]
          },
          className: CALCRADIO
        });
        wrapDiv.appendChild(input);
      }
      return wrapDiv;
    };
    CalculatedField2.prototype.getMenuItems = function(fieldType, summaryType) {
      var menuItems = !isNullOrUndefined(summaryType) ? summaryType : this.parent.aggregateTypes;
      var type = [];
      var menuTypes = this.getValidSummaryType();
      for (var i = 0; i < menuItems.length; i++) {
        if (menuTypes.indexOf(menuItems[i]) > -1 && type.indexOf(menuItems[i]) < 0) {
          if ((menuItems[i] === COUNT || menuItems[i] === DISTINCTCOUNT) && fieldType !== "number" || fieldType === "number") {
            type.push(menuItems[i]);
          }
        }
      }
      return type;
    };
    CalculatedField2.prototype.getValidSummaryType = function() {
      return [COUNT, DISTINCTCOUNT, SUM, AVG, MEDIAN, MIN, MAX, PRODUCT, STDEV, STDEVP, VAR, VARP];
    };
    CalculatedField2.prototype.getAccordionData = function(parent) {
      var data = [];
      var keys = Object.keys(parent.engineModule.fieldList);
      for (var index = 0, i = keys.length; index < i; index++) {
        var key = keys[index];
        data.push({
          header: "<input id=" + this.parentID + "_" + index + " class=" + CALCCHECK + ' type="checkbox" data-field=' + key + ' data-caption="' + this.parent.engineModule.fieldList[key].caption + '" data-type=' + this.parent.engineModule.fieldList[key].type + "/>",
          content: this.parent.engineModule.fieldList[key].aggregateType === CALC || this.getMenuItems(this.parent.engineModule.fieldList[key].type).length < 1 ? "" : this.createTypeContainer(key).outerHTML,
          iconCss: this.parent.engineModule.fieldList[key].aggregateType === CALC ? "e-list-icon " + (this.isEdit && this.currentFieldName === key ? "e-edited" : "e-edit") : ""
        });
      }
      return data;
    };
    CalculatedField2.prototype.renderMobileLayout = function(tabObj) {
      var _this = this;
      tabObj.items[4].content = this.renderDialogElements().outerHTML;
      tabObj.dataBind();
      var dialog = select("#" + this.parentID + "calculateddialog", document) ? getInstance(select("#" + this.parentID + "calculateddialog", document), Dialog) : null;
      var dialogElement = this.parent.isAdaptive ? this.parent.dialogRenderer.parentElement : dialog.element;
      if (this.parent.isAdaptive && this.parent.dialogRenderer.parentElement.querySelector("." + FORMULA) !== null) {
        this.createDropElements();
      }
      var cancelBtn = new Button({
        cssClass: this.parent.cssClass,
        locale: this.parent.locale,
        enableRtl: this.parent.enableRtl,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer
      });
      cancelBtn.isStringTemplate = true;
      cancelBtn.appendTo(select("#" + this.parentID + "cancelBtn", dialogElement));
      if (cancelBtn.element) {
        cancelBtn.element.onclick = this.cancelBtnClick.bind(this);
      }
      if (this.parent.dialogRenderer.parentElement.querySelector("." + FORMULA) !== null && this.parent.isAdaptive) {
        var okBtn = new Button({
          cssClass: this.parent.cssClass,
          isPrimary: true,
          locale: this.parent.locale,
          enableRtl: this.parent.enableRtl,
          enableHtmlSanitizer: this.parent.enableHtmlSanitizer
        });
        okBtn.isStringTemplate = true;
        okBtn.appendTo(select("#" + this.parentID + "okBtn", dialogElement));
        var inputObj = new MaskedTextBox({
          placeholder: this.parent.localeObj.getConstant("fieldName"),
          locale: this.parent.locale,
          enableRtl: this.parent.enableRtl,
          change: function(args) {
            _this.fieldText = args.value;
            _this.formulaText = select("#" + _this.parentID + "droppable", document).value;
          },
          cssClass: this.parent.cssClass
        });
        inputObj.isStringTemplate = true;
        inputObj.appendTo(select("#" + this.parentID + "ddlelement", dialogElement));
        if (this.formulaText !== null && select("#" + this.parentID + "droppable", this.parent.dialogRenderer.parentElement) !== null) {
          var drop = select("#" + this.parentID + "droppable", this.parent.dialogRenderer.parentElement);
          drop.value = this.formulaText;
        }
        if (this.fieldText !== null && this.parent.dialogRenderer.parentElement.querySelector("." + CALCINPUT) !== null) {
          this.parent.dialogRenderer.parentElement.querySelector("." + CALCINPUT).value = this.fieldText;
          inputObj.value = this.fieldText;
        }
        if (okBtn.element) {
          okBtn.element.onclick = this.applyFormula.bind(this);
        }
      } else if (this.parent.isAdaptive) {
        var addBtn = new Button({
          cssClass: this.parent.cssClass,
          isPrimary: true,
          locale: this.parent.locale,
          enableRtl: this.parent.enableRtl,
          enableHtmlSanitizer: this.parent.enableHtmlSanitizer
        });
        addBtn.isStringTemplate = true;
        addBtn.appendTo(select("#" + this.parentID + "addBtn", dialogElement));
        if (this.parent.dataType === "olap") {
          this.treeObj = new TreeView({
            fields: {
              dataSource: this.getFieldListData(this.parent),
              id: "id",
              text: "caption",
              parentID: "pid",
              iconCss: "spriteCssClass"
            },
            showCheckBox: true,
            autoCheck: false,
            sortOrder: "None",
            enableRtl: this.parent.enableRtl,
            locale: this.parent.locale,
            enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
            nodeClicked: this.fieldClickHandler.bind(this),
            drawNode: this.drawTreeNode.bind(this),
            nodeExpanding: this.updateNodeIcon.bind(this),
            nodeCollapsed: this.updateNodeIcon.bind(this),
            nodeSelected: function(args) {
              removeClass([args.node], "e-active");
              args.cancel = true;
            },
            cssClass: this.parent.cssClass
          });
          this.treeObj.isStringTemplate = true;
          this.treeObj.appendTo(select("#" + this.parentID + "accordDiv", dialogElement));
        } else {
          var accordion = new Accordion({
            items: this.getAccordionData(this.parent),
            enableRtl: this.parent.enableRtl,
            locale: this.parent.locale,
            enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
            expanding: this.accordionExpand.bind(this),
            clicked: this.accordionClickHandler.bind(this),
            created: this.accordionCreated.bind(this)
          });
          accordion.isStringTemplate = true;
          accordion.appendTo(select("#" + this.parentID + "accordDiv", dialogElement));
          this.updateType();
        }
        if (addBtn.element) {
          addBtn.element.onclick = this.addBtnClick.bind(this);
        }
      }
    };
    CalculatedField2.prototype.accordionExpand = function(args) {
      if (args.element.querySelectorAll(".e-radio-wrapper").length === 0) {
        var keys = Object.keys(this.parent.engineModule.fieldList);
        for (var index = 0, i = keys.length; index < i; index++) {
          var key = keys[index];
          var type = this.parent.engineModule.fieldList[key].type !== "number" ? [COUNT, DISTINCTCOUNT] : [SUM, COUNT, AVG, MEDIAN, MIN, MAX, DISTINCTCOUNT, PRODUCT, STDEV, STDEVP, VAR, VARP];
          var radiobutton = void 0;
          if (key === args.element.querySelector("[data-field").getAttribute("data-field")) {
            for (var i_1 = 0; i_1 < type.length; i_1++) {
              radiobutton = new RadioButton({
                label: this.parent.localeObj.getConstant(type[i_1]),
                name: AGRTYPE + key,
                checked: args.element.querySelector("[data-type").getAttribute("data-type") === type[i_1],
                change: this.onChange.bind(this),
                locale: this.parent.locale,
                enableRtl: this.parent.enableRtl,
                enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
                cssClass: this.parent.cssClass
              });
              radiobutton.isStringTemplate = true;
              radiobutton.appendTo(select("#" + this.parentID + "radio" + key + type[i_1], args.element));
            }
          }
        }
      }
    };
    CalculatedField2.prototype.onChange = function(args) {
      var type = args.event.target.parentElement.querySelector(".e-label").innerText;
      var field = args.event.target.closest(".e-acrdn-item").querySelector("[data-field").getAttribute("data-caption");
      args.event.target.closest(".e-acrdn-item").querySelector(".e-label").innerText = field + " (" + type + ")";
      args.event.target.closest(".e-acrdn-item").querySelector("[data-type").setAttribute("data-type", args.event.target.getAttribute("data-value"));
    };
    CalculatedField2.prototype.updateType = function() {
      var keys = Object.keys(this.parent.engineModule.fieldList);
      var dialog = select("#" + this.parentID + "calculateddialog", document) ? getInstance(select("#" + this.parentID + "calculateddialog", document), Dialog) : null;
      var dialogElement = this.parent.isAdaptive ? this.parent.dialogRenderer.parentElement : dialog.element;
      for (var index = 0, i = keys.length; index < i; index++) {
        var key = keys[index];
        var type = null;
        if ((this.parent.engineModule.fieldList[key].type !== "number" || this.parent.engineModule.fieldList[key].type === "include" || this.parent.engineModule.fieldList[key].type === "exclude") && this.parent.engineModule.fieldList[key].aggregateType !== "DistinctCount") {
          type = COUNT;
        } else {
          type = this.parent.engineModule.fieldList[key].aggregateType !== void 0 ? this.parent.engineModule.fieldList[key].aggregateType : SUM;
        }
        var checkbox = new CheckBox({
          label: this.parent.engineModule.fieldList[key].caption + " (" + this.parent.localeObj.getConstant(type) + ")",
          locale: this.parent.locale,
          enableRtl: this.parent.enableRtl,
          enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
          cssClass: this.parent.cssClass
        });
        checkbox.isStringTemplate = true;
        checkbox.appendTo(select("#" + this.parentID + "_" + index, dialogElement));
        select("#" + this.parentID + "_" + index, dialogElement).setAttribute("data-field", key);
        select("#" + this.parentID + "_" + index, dialogElement).setAttribute("data-type", type);
      }
    };
    CalculatedField2.prototype.cancelBtnClick = function() {
      this.renderMobileLayout(this.parent.dialogRenderer.adaptiveElement);
    };
    CalculatedField2.prototype.addBtnClick = function() {
      var fieldText = "";
      var field = null;
      var type = null;
      if (this.parent.dataType === "pivot") {
        var node = document.querySelectorAll(".e-accordion .e-check");
        for (var i = 0; i < node.length; i++) {
          field = node[i].parentElement.querySelector("[data-field]").getAttribute("data-field");
          type = node[i].parentElement.querySelector("[data-field]").getAttribute("data-type");
          if (type.indexOf(CALC) === -1) {
            fieldText = fieldText + ('"' + type + "(" + field + ')"');
          } else {
            for (var j = 0; j < this.parent.dataSourceSettings.calculatedFieldSettings.length; j++) {
              if (this.parent.dataSourceSettings.calculatedFieldSettings[j].name === field) {
                fieldText = fieldText + this.parent.dataSourceSettings.calculatedFieldSettings[j].formula;
                break;
              }
            }
          }
        }
      } else {
        var nodes = this.treeObj.getAllCheckedNodes();
        var olapEngine = this.parent.olapEngineModule;
        for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
          var item = nodes_1[_i];
          fieldText = fieldText + (olapEngine.fieldList[item] && olapEngine.fieldList[item].type === CALC ? olapEngine.fieldList[item].tag : item);
        }
      }
      this.formulaText = this.formulaText !== null ? this.formulaText + fieldText : fieldText;
      this.renderMobileLayout(this.parent.dialogRenderer.adaptiveElement);
    };
    CalculatedField2.prototype.createCalculatedFieldDialog = function(args) {
      if (this.parent.isAdaptive && this.parent.getModuleName() === "pivotfieldlist") {
        this.renderAdaptiveLayout(args && args.edit !== void 0 ? args.edit : true);
        this.isEdit = args && args.edit !== void 0 ? args.edit : this.isEdit;
      } else if (!this.parent.isAdaptive) {
        this.isEdit = args && args.edit !== void 0 ? args.edit : false;
        this.renderDialogLayout();
        if (args && args.edit) {
          var target = this.treeObj.element.querySelector('li[data-field="' + args.fieldName + '"]');
          if (target) {
            addClass([target], ["e-active", "e-node-focus"]);
            target.setAttribute("aria-selected", "true");
            target.id = this.treeObj.element.id + "_active";
            if (this.parent.dataType === "pivot") {
              var e = {
                event: {
                  target: target.querySelector(".e-list-icon.e-edit.e-icons")
                }
              };
              this.fieldClickHandler(e);
            } else {
              this.displayMenu(target);
            }
          }
        }
        var dialog = getInstance(select("#" + this.parentID + "calculateddialog", document), Dialog);
        dialog.element.style.top = parseInt(dialog.element.style.top, 10) < 0 ? "0px" : dialog.element.style.top;
      }
    };
    CalculatedField2.prototype.renderDialogLayout = function() {
      this.newFields = extend([], this.parent.dataSourceSettings.calculatedFieldSettings, null, true);
      this.createDialog();
      var dialog = getInstance(select("#" + this.parentID + "calculateddialog", document), Dialog);
      dialog.content = this.renderDialogElements();
      dialog.refresh();
      var inputObj = new MaskedTextBox({
        placeholder: this.parent.localeObj.getConstant("fieldName"),
        locale: this.parent.locale,
        enableRtl: this.parent.enableRtl,
        cssClass: this.parent.cssClass
      });
      inputObj.isStringTemplate = true;
      inputObj.appendTo(select("#" + this.parentID + "ddlelement", dialog.element));
      this.createDropElements();
      this.createTreeView();
      this.droppable = new Droppable(select("#" + this.parentID + "droppable", dialog.element));
      this.keyboardEvents = new KeyboardEvents(dialog.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: {
          moveRight: "rightarrow",
          enter: "enter",
          shiftE: "shift+E",
          delete: "delete"
        },
        eventName: "keydown"
      });
    };
    CalculatedField2.prototype.createConfirmDialog = function(title, description, calcInfo, isRemove, node) {
      var errorDialog = createElement("div", {
        id: this.parentID + "_CalculatedFieldErrorDialog",
        className: ERROR_DIALOG_CLASS
      });
      this.parent.element.appendChild(errorDialog);
      var confirmPopUp = new Dialog({
        animationSettings: {
          effect: "Fade"
        },
        allowDragging: false,
        showCloseIcon: true,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        width: "auto",
        height: "auto",
        position: {
          X: "center",
          Y: "center"
        },
        buttons: [{
          click: isRemove ? this.removeCalcField.bind(this, node) : this.replaceFormula.bind(this, calcInfo),
          isFlat: false,
          buttonModel: {
            cssClass: OK_BUTTON_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
            content: isRemove ? this.parent.localeObj.getConstant("yes") : this.parent.localeObj.getConstant("ok"),
            isPrimary: true
          }
        }, {
          click: this.closeErrorDialog.bind(this),
          isFlat: false,
          buttonModel: {
            cssClass: CANCEL_BUTTON_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
            content: isRemove ? this.parent.localeObj.getConstant("no") : this.parent.localeObj.getConstant("cancel")
          }
        }],
        header: title,
        content: description,
        isModal: true,
        visible: true,
        closeOnEscape: true,
        target: document.body,
        cssClass: this.parent.cssClass,
        close: this.removeErrorDialog.bind(this)
      });
      confirmPopUp.isStringTemplate = true;
      confirmPopUp.appendTo(errorDialog);
    };
    CalculatedField2.prototype.replaceFormula = function(calcInfo) {
      var report = this.parent.dataSourceSettings;
      if (this.parent.dataType === "olap") {
        for (var j = 0; j < report.calculatedFieldSettings.length; j++) {
          if (report.calculatedFieldSettings[j].name === calcInfo.name) {
            if (!isNullOrUndefined(calcInfo.hierarchyUniqueName)) {
              report.calculatedFieldSettings[j].hierarchyUniqueName = calcInfo.hierarchyUniqueName;
            }
            report.calculatedFieldSettings[j].formatString = calcInfo.formatString;
            report.calculatedFieldSettings[j].formula = calcInfo.formula;
            this.parent.lastCalcFieldInfo = report.calculatedFieldSettings[j];
            break;
          }
        }
      } else {
        for (var i = 0; i < report.values.length; i++) {
          if (report.values[i].type === CALC && report.values[i].name === calcInfo.name) {
            for (var j = 0; j < report.calculatedFieldSettings.length; j++) {
              if (report.calculatedFieldSettings[j].name === calcInfo.name) {
                report.calculatedFieldSettings[j].formula = calcInfo.formula;
                this.parent.lastCalcFieldInfo = report.calculatedFieldSettings[j].properties ? report.calculatedFieldSettings[j].properties : report.calculatedFieldSettings[j];
                this.updateFormatSettings(report, calcInfo.name, calcInfo.formatString);
              }
            }
          }
        }
      }
      this.addFormula(report, calcInfo.name);
      this.removeErrorDialog();
    };
    CalculatedField2.prototype.removeErrorDialog = function() {
      var element = select("#" + this.parentID + "_CalculatedFieldErrorDialog", document);
      var confirmPopUp = element ? getInstance(element, Dialog) : null;
      if (confirmPopUp && !confirmPopUp.isDestroyed) {
        confirmPopUp.destroy();
      }
      if (select("#" + this.parentID + "_CalculatedFieldErrorDialog", document) !== null) {
        remove(select("#" + this.parentID + "_CalculatedFieldErrorDialog", document));
      }
    };
    CalculatedField2.prototype.closeErrorDialog = function() {
      var confirmPopUp = getInstance(select("#" + this.parentID + "_CalculatedFieldErrorDialog", document), Dialog);
      confirmPopUp.close();
    };
    CalculatedField2.prototype.triggerActionCompleteEvent = function() {
      var eventArgs = {
        dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings),
        actionName: invalidFormula,
        fieldInfo: this.parent.actionObj.fieldInfo,
        actionInfo: this.parent.actionObj.actionInfo
      };
      var control = this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;
      control.trigger(actionComplete, eventArgs);
      if (eventArgs.actionName !== "Abort" && this.parent.pivotCommon && this.parent.pivotCommon.errorDialog) {
        this.parent.pivotCommon.errorDialog.createErrorDialog(this.parent.localeObj.getConstant("error"), this.parent.localeObj.getConstant("invalidFormula"));
      } else {
        if (this.parent && this.parent.actionObj) {
          this.parent.actionObj.actionName = eventArgs.actionName;
        }
        this.closeDialog();
      }
      if (this.parent && this.parent.actionObj) {
        this.parent.actionObj.actionName = "";
      }
      if (control && control.actionObj) {
        control.actionObj.actionName = "";
      }
    };
    CalculatedField2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(initCalculatedField, this.createCalculatedFieldDialog, this);
    };
    CalculatedField2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(initCalculatedField, this.createCalculatedFieldDialog);
    };
    CalculatedField2.prototype.destroy = function() {
      if (this.treeObj && !this.treeObj.isDestroyed) {
        this.treeObj.destroy();
      }
      if (this.treeObj) {
        this.treeObj = null;
      }
      if (this.newFields) {
        this.newFields = null;
      }
      if (this.curMenu) {
        this.curMenu = null;
      }
      if (this.droppable) {
        this.droppable = null;
      }
      if (this.keyboardEvents) {
        this.keyboardEvents = null;
      }
      var element = select("#" + this.parentID + "ddlelement", document);
      if (element) {
        getInstance(element, MaskedTextBox).destroy();
      }
      element = select("#" + this.parentID + "calculateddialog", document);
      if (element) {
        getInstance(element, Dialog).destroy();
      }
      element = select("#" + this.parentID + "CalcContextmenu", document);
      if (element) {
        getInstance(element, ContextMenu).destroy();
      }
      element = select("#" + this.parentID + "accordDiv", document);
      if (element) {
        getInstance(element, Accordion).destroy();
      }
      element = select("#" + this.parentID + "_CalculatedFieldErrorDialog", document);
      if (element) {
        getInstance(element, Dialog).destroy();
      }
    };
    return CalculatedField2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/common/actions/field-list.js
PivotFieldList.Inject(CalculatedField);
var FieldList = (
  /** @class */
  function() {
    function FieldList2(parent) {
      this.parent = parent;
      this.addEventListener();
    }
    FieldList2.prototype.getModuleName = function() {
      return "fieldList";
    };
    FieldList2.prototype.initiateModule = function() {
      if (!select("#" + this.parent.element.id + "_PivotFieldList", this.parent.element)) {
        this.element = createElement("div", {
          id: this.parent.element.id + "_PivotFieldList",
          styles: "position:" + (this.parent.enableRtl ? "static" : "absolute") + ";height:0;width:" + this.parent.element.style.width + ";display:none"
        });
        if (select("#" + this.parent.element.id + "containerwrapper", document) === null) {
          var containerWrapper = createElement("div", {
            id: this.parent.element.id + "containerwrapper",
            styles: "height:" + (isNaN(this.parent.height) ? this.parent.height : this.parent.height + "px")
          });
          this.parent.element.parentElement.appendChild(containerWrapper);
          containerWrapper.appendChild(this.element);
          containerWrapper.appendChild(this.parent.element);
        } else {
          select("#" + this.parent.element.id + "containerwrapper", document).appendChild(this.element);
        }
        this.parent.pivotFieldListModule = new PivotFieldList({
          dataSourceSettings: {
            providerType: this.parent.dataSourceSettings.providerType,
            rows: [],
            columns: [],
            values: [],
            filters: []
          },
          spinnerTemplate: this.parent.spinnerTemplate,
          allowDeferLayoutUpdate: this.parent.allowDeferLayoutUpdate,
          renderMode: "Popup",
          allowCalculatedField: this.parent.allowCalculatedField,
          showValuesButton: this.parent.showValuesButton,
          enableRtl: this.parent.enableRtl,
          locale: this.parent.locale,
          target: this.parent.element.parentElement,
          aggregateTypes: this.parent.aggregateTypes,
          maxNodeLimitInMemberEditor: this.parent.maxNodeLimitInMemberEditor,
          aggregateCellInfo: this.parent.bindTriggerEvents.bind(this.parent),
          onHeadersSort: this.parent.bindTriggerEvents.bind(this.parent),
          cssClass: this.parent.cssClass,
          enableFieldSearching: this.parent.enableFieldSearching,
          enableHtmlSanitizer: this.parent.enableHtmlSanitizer
        });
        this.parent.pivotFieldListModule.isPopupView = true;
        this.parent.pivotFieldListModule.pivotGridModule = this.parent;
        this.parent.pivotFieldListModule.appendTo(this.element);
      }
    };
    FieldList2.prototype.updateControl = function() {
      if (this.parent.allowDeferLayoutUpdate) {
        this.parent.actionObj.actionName = "Field list refreshed";
      }
      if (this.element) {
        var hasFieldList = void 0;
        for (var i = 0; i < this.parent.toolbar.length; i++) {
          if (this.parent.toolbar[i] === "FieldList") {
            hasFieldList = true;
          }
        }
        if (hasFieldList && this.parent.showToolbar && this.parent.dataSourceSettings.mode === "Server") {
          this.element.style.display = "none";
        } else {
          this.element.style.display = "block";
        }
        prepend([this.element], this.parent.element);
        if (this.parent.showGroupingBar && this.parent.groupingBarModule) {
          clearTimeout(this.timeOutObj);
          this.timeOutObj = setTimeout(this.update.bind(this));
        } else if (!isNullOrUndefined(this.element.querySelector("." + TOGGLE_FIELD_LIST_CLASS))) {
          setStyleAttribute(this.element.querySelector("." + TOGGLE_FIELD_LIST_CLASS), {
            left: "auto"
          });
          if (this.parent.enableRtl) {
            removeClass([this.element.querySelector("." + TOGGLE_FIELD_LIST_CLASS)], "e-fieldlist-left");
          } else {
            addClass([this.element.querySelector("." + TOGGLE_FIELD_LIST_CLASS)], "e-fieldlist-left");
          }
        }
        setStyleAttribute(this.element, {
          width: formatUnit(this.parent.element.offsetWidth)
        });
      }
      this.parent.pivotFieldListModule.update(this.parent);
    };
    FieldList2.prototype.update = function() {
      var currentWidth;
      if (this.parent.currentView !== "Table") {
        currentWidth = this.parent.chart ? this.parent.pivotChartModule.getCalulatedWidth() : currentWidth;
      } else {
        currentWidth = this.parent.grid ? this.parent.grid.element.offsetWidth : currentWidth;
      }
      if (currentWidth && !isNullOrUndefined(this.element.querySelector("." + TOGGLE_FIELD_LIST_CLASS))) {
        var actualWidth = currentWidth < 400 ? this.parent.minWidth || 400 : currentWidth;
        setStyleAttribute(this.element.querySelector("." + TOGGLE_FIELD_LIST_CLASS), {
          left: formatUnit(this.parent.enableRtl ? -Math.abs(actualWidth - this.element.querySelector("." + TOGGLE_FIELD_LIST_CLASS).offsetWidth) : actualWidth - this.element.querySelector("." + TOGGLE_FIELD_LIST_CLASS).offsetWidth)
        });
        if (this.parent.enableRtl) {
          addClass([this.element.querySelector("." + TOGGLE_FIELD_LIST_CLASS)], "e-fieldlist-left");
        } else {
          removeClass([this.element.querySelector("." + TOGGLE_FIELD_LIST_CLASS)], "e-fieldlist-left");
        }
      }
    };
    FieldList2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(initSubComponent, this.initiateModule, this);
      this.parent.on(uiUpdate, this.updateControl, this);
    };
    FieldList2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(initSubComponent, this.initiateModule);
      this.parent.off(uiUpdate, this.updateControl);
    };
    FieldList2.prototype.destroy = function() {
      this.removeEventListener();
      if (this.parent.pivotFieldListModule && !this.parent.pivotFieldListModule.isDestroyed) {
        this.parent.pivotFieldListModule.destroy();
        this.parent.pivotFieldListModule = null;
        if (!isNullOrUndefined(select("#" + this.parent.element.id + "_PivotFieldList", document))) {
          remove(select("#" + this.parent.element.id + "_PivotFieldList", document));
        }
      } else {
        return;
      }
    };
    return FieldList2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/common/grouping-bar/axis-field-renderer.js
var AxisFields = (
  /** @class */
  function() {
    function AxisFields2(parent) {
      this.parent = parent;
    }
    AxisFields2.prototype.render = function() {
      if (!this.parent.pivotButtonModule || this.parent.pivotButtonModule && this.parent.pivotButtonModule.isDestroyed) {
        new PivotButton(this.parent);
      }
      this.createPivotButtons();
      var pivotButtons = [];
      pivotButtons = pivotButtons.concat([].slice.call(this.parent.groupingBarModule.rowPanel.querySelectorAll("." + PIVOT_BUTTON_WRAPPER_CLASS)));
      var vlen = pivotButtons.length;
      for (var j = 0; j < vlen; j++) {
        var indentWidth = 24;
        if (!this.parent.isTabular) {
          var indentDiv = createElement("span", {
            className: "e-indent-div",
            styles: this.parent.isTabular ? "auto" : "width:" + j * indentWidth + "px"
          });
          prepend([indentDiv], pivotButtons[j]);
        }
      }
    };
    AxisFields2.prototype.createPivotButtons = function() {
      var fields = [this.parent.dataSourceSettings.rows, this.parent.dataSourceSettings.columns, this.parent.dataSourceSettings.values, this.parent.dataSourceSettings.filters];
      var elements = Array.prototype.slice.call(this.parent.element.querySelectorAll("." + GROUP_ALL_FIELDS_CLASS + ",." + GROUP_ROW_CLASS + ",." + GROUP_COLUMN_CLASS + ",." + GROUP_VALUE_CLASS + ",." + GROUP_FILTER_CLASS));
      if (isNullOrUndefined(this.parent.element.querySelector("." + GROUP_PIVOT_ROW))) {
        elements.push(this.parent.groupingBarModule.rowPanel);
      }
      for (var i = 0; i < elements.length; i++) {
        var element = elements[i];
        if ((this.parent.dataSourceSettings.values.length > 0 ? !element.classList.contains(GROUP_CHART_VALUE) : true) || (this.parent.dataSourceSettings.columns.length > 0 ? !element.classList.contains(GROUP_CHART_COLUMN) : true)) {
          element.innerHTML = "";
        }
      }
      if (this.parent.dataType === "pivot" && this.parent.dataSourceSettings.dataSource && (!(this.parent.dataSourceSettings.dataSource instanceof DataManager) && this.parent.dataSourceSettings.dataSource.length > 0 || this.parent.dataSourceSettings.dataSource instanceof DataManager && this.parent.engineModule.data && this.parent.engineModule.data.length > 0) || this.parent.dataType === "olap" && this.parent.dataSourceSettings.url && this.parent.dataSourceSettings.url !== "" || this.parent.dataSourceSettings.mode === "Server" && this.parent.dataSourceSettings.url && this.parent.dataSourceSettings.url !== "") {
        var axis = ["rows", "columns", "values", "filters"];
        if (this.parent.dataType === "pivot" && this.parent.groupingBarSettings.showFieldsPanel) {
          axis.push("all-fields");
          fields.push([]);
          for (var _i = 0, _a = this.parent.engineModule && this.parent.engineModule.fieldList ? Object.keys(this.parent.engineModule.fieldList) : []; _i < _a.length; _i++) {
            var key = _a[_i];
            if (this.parent.engineModule.fieldList[key] && !this.parent.engineModule.fieldList[key].isSelected) {
              fields[fields.length - 1].push(PivotUtil.getFieldInfo(key, this.parent, true).fieldItem);
            }
          }
        }
        for (var i = 0, lnt = fields.length; i < lnt; i++) {
          if (fields[i]) {
            var args = {
              field: fields[i],
              axis: axis[i].toString()
            };
            this.parent.notify(pivotButtonUpdate, args);
          }
        }
      }
    };
    return AxisFields2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/common/grouping-bar/grouping-bar.js
var GroupingBar = (
  /** @class */
  function() {
    function GroupingBar2(parent) {
      this.rowAxisWidth = 0;
      this.parent = parent;
      this.parent.groupingBarModule = this;
      this.resColWidth = this.parent.isAdaptive ? 180 : 249;
      this.addEventListener();
      this.parent.axisFieldModule = new AxisFields(this.parent);
      this.touchObj = new Touch(this.parent.element, {
        tapHold: this.tapHoldHandler.bind(this)
      });
    }
    GroupingBar2.prototype.getModuleName = function() {
      return "groupingBar";
    };
    GroupingBar2.prototype.renderLayout = function() {
      this.groupingTable = createElement("div", {
        className: GROUPING_BAR_CLASS
      });
      var leftAxisPanel = createElement("div", {
        className: LEFT_AXIS_PANEL_CLASS
      });
      this.rightAxisPanel = createElement("div", {
        className: RIGHT_AXIS_PANEL_CLASS
      });
      var rowAxisPanel = createElement("div", {
        className: AXIS_ROW_CLASS + " " + AXIS_ICON_CLASS + "container"
      });
      var columnAxisPanel = createElement("div", {
        className: AXIS_COLUMN_CLASS + " " + AXIS_ICON_CLASS + "container"
      });
      var valueAxisPanel = createElement("div", {
        className: AXIS_VALUE_CLASS + " " + AXIS_ICON_CLASS + "container"
      });
      var filterAxisPanel = createElement("div", {
        className: AXIS_FILTER_CLASS + " " + AXIS_ICON_CLASS + "container"
      });
      this.rowPanel = createElement("div", {
        className: GROUP_ROW_CLASS + " " + ROW_AXIS_CLASS + (this.parent.isTabular ? " " + TABULAR_GROUP_ROWS : "")
      });
      var columnPanel = createElement("div", {
        className: GROUP_COLUMN_CLASS + " " + COLUMN_AXIS_CLASS
      });
      var valuePanel = createElement("div", {
        className: GROUP_VALUE_CLASS + " " + VALUE_AXIS_CLASS
      });
      var filterPanel = createElement("div", {
        className: GROUP_FILTER_CLASS + " " + FILTER_AXIS_CLASS
      });
      rowAxisPanel.appendChild(this.rowPanel);
      columnAxisPanel.appendChild(columnPanel);
      valueAxisPanel.appendChild(valuePanel);
      filterAxisPanel.appendChild(filterPanel);
      this.rowAxisPanel = rowAxisPanel;
      leftAxisPanel.appendChild(valueAxisPanel);
      leftAxisPanel.appendChild(rowAxisPanel);
      this.rightAxisPanel.appendChild(filterAxisPanel);
      this.rightAxisPanel.appendChild(columnAxisPanel);
      this.groupingTable.appendChild(createElement("div", {
        styles: "display:flex;"
      }));
      this.groupingTable.firstElementChild.appendChild(leftAxisPanel);
      this.groupingTable.firstElementChild.appendChild(this.rightAxisPanel);
      if (this.parent.dataType === "pivot" && this.parent.groupingBarSettings != null && this.parent.groupingBarSettings.showFieldsPanel) {
        this.gridPanel = this.createToolbarUI(this.groupingTable);
      }
      this.groupingTable.classList.add(GRID_GROUPING_BAR_CLASS);
      this.groupingTable.querySelector("." + GROUP_ROW_CLASS).classList.add(GROUP_PIVOT_ROW);
      var axisPanels = [this.rowPanel, columnPanel, valuePanel, filterPanel];
      for (var _i = 0, axisPanels_1 = axisPanels; _i < axisPanels_1.length; _i++) {
        var element = axisPanels_1[_i];
        if (this.parent.groupingBarSettings.allowDragAndDrop) {
          new Droppable(element, {});
        }
        this.unWireEvent(element);
        this.wireEvent(element);
      }
      if (this.parent.displayOption.view !== "Table" && this.parent.groupingBarSettings.displayMode !== "Table") {
        this.groupingChartTable = this.groupingTable.cloneNode(true);
        if (select("#" + this.parent.element.id + "_AllFields", this.groupingChartTable)) {
          select("#" + this.parent.element.id + "_AllFields", this.groupingChartTable).remove();
          this.chartPanel = this.createToolbarUI(this.groupingChartTable);
        }
        this.groupingChartTable.classList.add(CHART_GROUPING_BAR_CLASS);
        this.groupingChartTable.classList.remove(GRID_GROUPING_BAR_CLASS);
        this.groupingChartTable.querySelector("." + GROUP_ROW_CLASS).classList.add(GROUP_CHART_ROW);
        this.groupingChartTable.querySelector("." + GROUP_ROW_CLASS).classList.remove(GROUP_PIVOT_ROW);
        if (this.parent.chartSettings.enableMultipleAxis && this.parent.chartSettings.chartSeries && ["Pie", "Pyramid", "Doughnut", "Funnel"].indexOf(this.parent.chartSettings.chartSeries.type) < 0) {
          this.groupingChartTable.querySelector("." + GROUP_VALUE_CLASS).classList.add(GROUP_CHART_MULTI_VALUE);
        } else {
          this.groupingChartTable.querySelector("." + GROUP_VALUE_CLASS).classList.add(GROUP_CHART_VALUE);
        }
        if (this.parent.chartSettings.chartSeries && ["Pie", "Pyramid", "Doughnut", "Funnel"].indexOf(this.parent.chartSettings.chartSeries.type) > -1) {
          this.groupingChartTable.querySelector("." + GROUP_COLUMN_CLASS).classList.add(GROUP_CHART_COLUMN);
        } else {
          this.groupingChartTable.querySelector("." + GROUP_COLUMN_CLASS).classList.add(GROUP_CHART_ACCUMULATION_COLUMN);
        }
        this.groupingChartTable.querySelector("." + GROUP_FILTER_CLASS).classList.add(GROUP_CHART_FILTER);
      } else {
        this.groupingChartTable = void 0;
      }
      if (this.parent.displayOption.view === "Chart" || this.parent.groupingBarSettings.displayMode === "Chart") {
        this.groupingTable = void 0;
      }
    };
    GroupingBar2.prototype.appendToElement = function() {
      var element = this.groupingTable ? this.groupingTable : this.groupingChartTable;
      if (isNullOrUndefined(element)) {
        return;
      }
      var leftAxisPanel = element.getElementsByClassName(LEFT_AXIS_PANEL_CLASS)[0];
      var filterPanel = element.getElementsByClassName(GROUP_FILTER_CLASS + " " + FILTER_AXIS_CLASS)[0];
      var columnPanel = element.getElementsByClassName(GROUP_COLUMN_CLASS + " " + COLUMN_AXIS_CLASS)[0];
      var valuePanel = element.getElementsByClassName(GROUP_VALUE_CLASS + " " + VALUE_AXIS_CLASS)[0];
      if (this.parent.element.querySelector("." + GRID_CLASS) || this.parent.element.querySelector("." + PIVOTCHART)) {
        if (this.parent.showGroupingBar) {
          if (this.parent.element.querySelector("." + GROUPING_BAR_CLASS)) {
            var elements = this.parent.element.querySelectorAll("." + GROUPING_BAR_CLASS);
            for (var i = 0; i < elements.length; i++) {
              var element_1 = elements[i];
              remove(element_1);
            }
          }
          if (this.groupingChartTable) {
            if (select("#" + this.parent.element.id + "_chart", this.parent.element)) {
              setStyleAttribute(this.groupingChartTable, {
                width: formatUnit(this.parent.grid ? this.parent.getGridWidthAsNumber() : this.parent.getWidthAsNumber())
              });
              var chartLeftAxisPanel = this.groupingChartTable.getElementsByClassName(LEFT_AXIS_PANEL_CLASS)[0];
              var chartValuePanel = this.groupingChartTable.getElementsByClassName(GROUP_VALUE_CLASS + " " + VALUE_AXIS_CLASS)[0];
              if (this.parent.isAdaptive) {
                if (this.parent.isTabular) {
                  chartLeftAxisPanel.style.minWidth = this.parent.dataSourceSettings.rows.length * this.parent.gridSettings.columnWidth + "px";
                  chartValuePanel.style.minWidth = this.parent.dataSourceSettings.rows.length * this.parent.gridSettings.columnWidth + "px";
                } else {
                  chartLeftAxisPanel.style.minWidth = "180px";
                  chartValuePanel.style.minWidth = "180px";
                }
              }
              this.parent.element.insertBefore(this.groupingChartTable, select("#" + this.parent.element.id + "_chart", this.parent.element));
              if (this.groupingChartTable.querySelector("." + ALL_FIELDS_PANEL_CLASS) && this.chartPanel != null && !this.chartPanel.isDestroyed) {
                var chartPanelWidth = this.parent.grid ? this.parent.getGridWidthAsNumber() - 2 : this.parent.getWidthAsNumber() - 2;
                this.chartPanel.width = this.parent.isAdaptive ? chartPanelWidth : chartPanelWidth < 400 ? this.parent.minWidth || "398px" : chartPanelWidth;
                this.chartPanel.refreshOverflow();
                if (this.parent.showFieldList && this.parent.pivotFieldListModule && this.parent.pivotFieldListModule.element) {
                  clearTimeout(this.timeOutObj);
                  this.timeOutObj = setTimeout(this.alignIcon.bind(this));
                }
              }
            } else {
              this.groupingChartTable = void 0;
            }
          }
          if (this.parent.displayOption.view !== "Chart" && this.groupingTable) {
            if (this.parent.isAdaptive) {
              if (this.parent.isTabular) {
                leftAxisPanel.style.minWidth = this.parent.dataSourceSettings.rows.length * this.parent.gridSettings.columnWidth + "px";
                valuePanel.style.minWidth = this.parent.dataSourceSettings.rows.length * this.parent.gridSettings.columnWidth + "px";
              } else {
                leftAxisPanel.style.minWidth = "180px";
                valuePanel.style.minWidth = "180px";
              }
            }
            if (this.parent.firstColWidth) {
              leftAxisPanel.style.minWidth = "auto";
              valuePanel.style.minWidth = "auto";
            }
            filterPanel.removeAttribute("style");
            columnPanel.removeAttribute("style");
            this.rowPanel.removeAttribute("style");
            var emptyRowCount = void 0;
            if (this.parent.dataType === "olap") {
              emptyRowCount = this.parent.olapEngineModule.headerContent ? Object.keys(this.parent.olapEngineModule.headerContent).length : 0;
            } else {
              emptyRowCount = this.parent.engineModule.headerContent ? Object.keys(this.parent.engineModule.headerContent).length : 0;
            }
            if (!isNullOrUndefined(emptyRowCount)) {
              var emptyHeader = this.parent.element.querySelector("." + HEADERCONTENT).querySelector(".e-columnheader");
              emptyHeader.removeAttribute("style");
              addClass([emptyHeader.querySelector("." + HEADERCELL)], "e-group-row");
              emptyHeader.querySelector(".e-group-row").querySelector(".e-headercelldiv").style.display = "none";
              emptyHeader.querySelector(".e-group-row").querySelector(".e-sortfilterdiv").style.display = "none";
            }
            this.parent.element.insertBefore(this.groupingTable, this.parent.element.querySelector("." + GRID_CLASS));
            setStyleAttribute(this.groupingTable, {
              width: formatUnit(this.parent.grid ? this.parent.getGridWidthAsNumber() : this.parent.getWidthAsNumber())
            });
            if (this.groupingTable && this.groupingTable.querySelector("." + ALL_FIELDS_PANEL_CLASS) && this.gridPanel != null && !this.gridPanel.isDestroyed) {
              var gridPanelWidth = this.parent.grid ? this.parent.getGridWidthAsNumber() - 2 : this.parent.getWidthAsNumber() - 2;
              this.gridPanel.width = this.parent.isAdaptive ? gridPanelWidth : gridPanelWidth < 400 ? this.parent.minWidth || "398px" : gridPanelWidth;
              this.gridPanel.refreshOverflow();
            }
            this.groupingTable.style.minWidth = this.parent.minWidth ? this.parent.minWidth + "px" : "400px";
            this.parent.axisFieldModule.render();
            this.setGridRowWidth();
            var colGroupElement = this.parent.element.querySelector("." + HEADERCONTENT).querySelector("colgroup").children[0];
            var valuePanelWidth = this.parent.isTabular ? this.rowAxisWidth : parseInt(colGroupElement.style.width, 10);
            var rightAxisPanelWidth = formatUnit(this.groupingTable.offsetWidth - valuePanelWidth);
            setStyleAttribute(valuePanel, {
              width: valuePanelWidth + "px"
            });
            setStyleAttribute(this.rightAxisPanel, {
              width: rightAxisPanelWidth
            });
            this.groupingTable.style.display = "";
            var rightPanelHeight = valuePanel.offsetHeight / 2;
            if (this.parent.displayOption.primary === "Chart") {
              this.groupingTable.style.display = "none";
            }
            if (rightPanelHeight > columnPanel.offsetHeight) {
              setStyleAttribute(filterPanel, {
                height: formatUnit(rightPanelHeight)
              });
              setStyleAttribute(columnPanel, {
                height: formatUnit(rightPanelHeight + 2)
              });
            }
            var topLeftHeight = this.parent.element.querySelector("." + HEADERCONTENT).offsetHeight;
            setStyleAttribute(this.rowPanel, {
              height: topLeftHeight + "px"
            });
            if (this.parent.element.querySelector("." + HEADERCONTENT).querySelector(".e-rhandler")) {
              this.parent.element.querySelector("." + HEADERCONTENT).querySelector(".e-rhandler").style.height = topLeftHeight + "px";
            }
            var colRows = [].slice.call(this.parent.element.querySelector("." + HEADERCONTENT).querySelector("thead").querySelectorAll("tr"));
            var columnRows = colRows.filter(function(trCell) {
              return trCell.childNodes.length > 0;
            });
            var colHeight = topLeftHeight / columnRows.length;
            for (var _i = 0, columnRows_1 = columnRows; _i < columnRows_1.length; _i++) {
              var element_2 = columnRows_1[_i];
              setStyleAttribute(element_2, {
                "height": colHeight + "px"
              });
              var rowHeader = [].slice.call(element_2.querySelectorAll(".e-rhandler"));
              for (var _a = 0, rowHeader_1 = rowHeader; _a < rowHeader_1.length; _a++) {
                var rhElement = rowHeader_1[_a];
                setStyleAttribute(rhElement, {
                  "height": colHeight + "px"
                });
              }
            }
          } else {
            this.parent.axisFieldModule.render();
            this.updateChartAxisHeight();
          }
          if (this.parent.showToolbar && this.parent.displayOption.view === "Both") {
            var groupingBarSelector = this.parent.currentView === "Table" ? ".e-chart-grouping-bar" : ".e-pivot-grouping-bar";
            var groupingBar = this.parent.element.querySelector(groupingBarSelector);
            if (groupingBar) {
              groupingBar.style.display = "none";
            }
          }
        }
      }
    };
    GroupingBar2.prototype.updateChartAxisHeight = function() {
      if (this.groupingChartTable && select("#" + this.parent.element.id + "_chart", this.parent.element)) {
        var rightAxisPanel = this.groupingChartTable.querySelector("." + RIGHT_AXIS_PANEL_CLASS);
        var leftAxisPanel = this.groupingChartTable.querySelector("." + LEFT_AXIS_PANEL_CLASS);
        var rowPanel = this.groupingChartTable.querySelector("." + GROUP_ROW_CLASS);
        var valuePanel = this.groupingChartTable.querySelector("." + GROUP_VALUE_CLASS);
        var filterPanel = this.groupingChartTable.querySelector("." + GROUP_FILTER_CLASS);
        var columnPanel = this.groupingChartTable.querySelector("." + GROUP_COLUMN_CLASS);
        if (rowPanel && columnPanel) {
          rowPanel.style.height = "auto";
          columnPanel.style.height = "auto";
          if (rowPanel.offsetHeight > 0 && columnPanel.offsetHeight > 0) {
            var maxHeight = rowPanel.offsetHeight > columnPanel.offsetHeight ? rowPanel.offsetHeight : columnPanel.offsetHeight;
            setStyleAttribute(rowPanel, {
              height: formatUnit(maxHeight)
            });
            setStyleAttribute(columnPanel, {
              height: formatUnit(maxHeight)
            });
          }
        }
        if (valuePanel && filterPanel) {
          valuePanel.style.height = "auto";
          filterPanel.style.height = "auto";
          if (valuePanel.offsetHeight > 0 && filterPanel.offsetHeight > 0) {
            var maxHeight = valuePanel.offsetHeight > filterPanel.offsetHeight ? valuePanel.offsetHeight : filterPanel.offsetHeight;
            setStyleAttribute(valuePanel, {
              height: formatUnit(maxHeight)
            });
            setStyleAttribute(filterPanel, {
              height: formatUnit(maxHeight)
            });
          }
        }
        var rightAxisPanelWidth = formatUnit(this.groupingChartTable.offsetWidth - Math.ceil(leftAxisPanel.getBoundingClientRect().width));
        setStyleAttribute(valuePanel, {
          width: Math.ceil(valuePanel.getBoundingClientRect().width) + "px"
        });
        setStyleAttribute(rightAxisPanel, {
          width: rightAxisPanelWidth
        });
      }
    };
    GroupingBar2.prototype.refreshUI = function() {
      if (this.groupingChartTable) {
        setStyleAttribute(this.groupingChartTable, {
          width: formatUnit(this.parent.grid ? this.parent.getGridWidthAsNumber() : this.parent.getWidthAsNumber())
        });
        if (this.groupingChartTable.querySelector("." + ALL_FIELDS_PANEL_CLASS) && this.chartPanel != null && !this.chartPanel.isDestroyed) {
          var chartPanelWidth = this.parent.grid ? this.parent.getGridWidthAsNumber() - 2 : this.parent.getWidthAsNumber() - 2;
          this.chartPanel.width = this.parent.isAdaptive ? chartPanelWidth : chartPanelWidth < 400 ? this.parent.minWidth || "398px" : chartPanelWidth;
          this.chartPanel.refreshOverflow();
        }
        this.updateChartAxisHeight();
        if (this.parent.showFieldList && this.parent.pivotFieldListModule && this.parent.pivotFieldListModule.element) {
          clearTimeout(this.timeOutObj);
          this.timeOutObj = setTimeout(this.alignIcon.bind(this));
        }
      }
      if (this.groupingTable) {
        var valuePanel = this.groupingTable.getElementsByClassName(GROUP_VALUE_CLASS + " " + VALUE_AXIS_CLASS)[0];
        setStyleAttribute(this.groupingTable, {
          width: formatUnit(this.parent.grid ? this.parent.getGridWidthAsNumber() : this.parent.getWidthAsNumber())
        });
        if (this.groupingTable && this.groupingTable.querySelector("." + ALL_FIELDS_PANEL_CLASS) && this.gridPanel != null && !this.gridPanel.isDestroyed) {
          var gridPanelWidth = this.parent.grid ? this.parent.getGridWidthAsNumber() - 2 : this.parent.getWidthAsNumber() - 2;
          this.gridPanel.width = this.parent.isAdaptive ? gridPanelWidth : gridPanelWidth < 400 ? this.parent.minWidth || "398px" : gridPanelWidth;
          this.gridPanel.refreshOverflow();
        }
        this.groupingTable.style.minWidth = this.parent.minWidth ? this.parent.minWidth + "px" : "400px";
        var colGroupElement = this.parent.element.querySelector("." + HEADERCONTENT).querySelector("colgroup").children[0];
        var valuePanelWidth = this.parent.isTabular ? this.rowAxisWidth : parseInt(colGroupElement.style.width, 10);
        var rightAxisWidth = formatUnit(this.groupingTable.offsetWidth - valuePanelWidth);
        setStyleAttribute(valuePanel, {
          width: valuePanelWidth + "px"
        });
        setStyleAttribute(this.rightAxisPanel, {
          width: rightAxisWidth
        });
        if (this.parent.showFieldList && this.parent.pivotFieldListModule && this.parent.pivotFieldListModule.element) {
          clearTimeout(this.timeOutObj);
          this.timeOutObj = setTimeout(this.alignIcon.bind(this));
        }
        if (!this.parent.grid.element.querySelector(".e-group-row")) {
          var emptyRowHeader = this.parent.element.querySelector("." + HEADERCONTENT).querySelector(".e-columnheader");
          addClass([emptyRowHeader.querySelector("." + HEADERCELL)], "e-group-row");
          setStyleAttribute(this.rowPanel, {
            height: this.parent.element.querySelector("." + HEADERCONTENT).offsetHeight + "px"
          });
          emptyRowHeader.querySelector(".e-group-row").appendChild(this.rowAxisPanel);
          setStyleAttribute(emptyRowHeader.querySelector(".e-group-row").querySelector(".e-headercelldiv"), {
            display: "none"
          });
          setStyleAttribute(emptyRowHeader.querySelector(".e-group-row").querySelector(".e-sortfilterdiv"), {
            display: "none"
          });
          var groupHeight = this.parent.element.querySelector("." + HEADERCONTENT).offsetHeight;
          setStyleAttribute(this.rowPanel, {
            height: groupHeight + "px"
          });
          if (this.parent.element.querySelector("." + HEADERCONTENT).querySelector(".e-rhandler")) {
            this.parent.element.querySelector("." + HEADERCONTENT).querySelector(".e-rhandler").style.height = groupHeight + "px";
          }
          var colRowElements = [].slice.call(this.parent.element.querySelector("." + HEADERCONTENT).querySelector("thead").querySelectorAll("tr"));
          var columnRows = colRowElements.filter(function(trCell) {
            return trCell.childNodes.length > 0;
          });
          var colHeight = groupHeight / columnRows.length;
          for (var _i = 0, columnRows_2 = columnRows; _i < columnRows_2.length; _i++) {
            var element = columnRows_2[_i];
            setStyleAttribute(element, {
              "height": colHeight + "px"
            });
            var rowHeader = [].slice.call(element.querySelectorAll(".e-rhandler"));
            for (var _a = 0, rowHeader_2 = rowHeader; _a < rowHeader_2.length; _a++) {
              var handlerElement = rowHeader_2[_a];
              if (!handlerElement.parentElement.parentElement.querySelector("." + FREEZED_CELL)) {
                setStyleAttribute(handlerElement, {
                  "height": colHeight + "px"
                });
              }
            }
          }
        }
      }
    };
    GroupingBar2.prototype.alignIcon = function() {
      if (this.parent.pivotFieldListModule) {
        var element = this.parent.pivotFieldListModule.element;
        var currentWidth = void 0;
        if (this.parent.currentView === "Table") {
          currentWidth = this.parent.grid ? this.parent.grid.element.offsetWidth : currentWidth;
        } else {
          currentWidth = this.parent.chart ? this.parent.pivotChartModule.getCalulatedWidth() : currentWidth;
        }
        if (currentWidth) {
          var minWidth = this.parent.minWidth ? this.parent.minWidth : !this.parent.isAdaptive ? 400 : 300;
          var actWidth = currentWidth < minWidth ? minWidth : currentWidth;
          setStyleAttribute(element.querySelector("." + TOGGLE_FIELD_LIST_CLASS), {
            left: formatUnit(this.parent.enableRtl ? -Math.abs(actWidth - element.querySelector("." + TOGGLE_FIELD_LIST_CLASS).offsetWidth) : actWidth - element.querySelector("." + TOGGLE_FIELD_LIST_CLASS).offsetWidth)
          });
        }
      }
    };
    GroupingBar2.prototype.setGridRowWidth = function() {
      var emptyRowHeader = this.parent.element.querySelector("." + HEADERCONTENT).querySelector(".e-columnheader");
      addClass([emptyRowHeader.querySelector("." + HEADERCELL)], "e-group-row");
      emptyRowHeader.querySelector(".e-group-row").appendChild(this.rowAxisPanel);
      var colGroupElement = this.parent.element.querySelector("." + HEADERCONTENT).querySelector("colgroup").children[0];
      if (this.rowPanel.querySelector("." + PIVOT_BUTTON_CLASS)) {
        if (!this.parent.isAdaptive) {
          var pivotButtons = [].slice.call(this.rowPanel.querySelectorAll("." + PIVOT_BUTTON_WRAPPER_CLASS));
          var lastButton = pivotButtons[pivotButtons.length - 1];
          var indentWidth = this.parent.isTabular ? 0 : lastButton.querySelector(".e-indent-div").offsetWidth + 20;
          var lastButtonWidth = lastButton.querySelector("." + PIVOT_BUTTON_CLASS).offsetWidth + indentWidth;
          var buttonWidth = formatUnit(lastButtonWidth < this.resColWidth ? this.resColWidth : lastButtonWidth);
          var rowHeaderTable = this.parent.element.querySelector("." + HEADERCONTENT).querySelector("." + HEADERCELL);
          var rowContent = this.parent.element.querySelector("." + CONTENT_CLASS).querySelector("colgroup").children[0];
          var colwidth = parseInt(buttonWidth, 10);
          var hasPivotColumns = this.parent.pivotColumns.length > 0;
          var gridColumn = this.parent.grid.columns;
          if (gridColumn && gridColumn.length > 0) {
            gridColumn[0].width = gridColumn[0].autoFit ? gridColumn[0].width : colwidth > this.resColWidth ? colwidth : this.resColWidth;
          }
          var valueColWidth = void 0;
          if (this.parent.dataType === "olap") {
            valueColWidth = this.parent.renderModule.calculateColWidth(this.parent.olapEngineModule.pivotValues.length > 0 ? this.parent.olapEngineModule.pivotValues[0].length : 2);
          } else {
            valueColWidth = this.parent.renderModule.calculateColWidth(this.parent.dataSourceSettings.values.length > 0 && this.parent.engineModule.pivotValues.length > 0 ? this.parent.engineModule.pivotValues[0].length : 2);
          }
          for (var cCnt = 0; cCnt < gridColumn.length; cCnt++) {
            if (cCnt !== 0) {
              if (gridColumn[cCnt].columns) {
                this.parent.setCommonColumnsWidth(this.parent.renderModule.pivotColumns[cCnt].columns, valueColWidth);
              } else {
                if (gridColumn[cCnt].width !== "auto") {
                  var levelName = gridColumn[cCnt].customAttributes ? gridColumn[cCnt].customAttributes.cell.valueSort.levelName : "";
                  var columnWidth = this.parent.renderModule.setSavedWidth(levelName, valueColWidth);
                  gridColumn[cCnt].width = gridColumn[cCnt].autoFit || hasPivotColumns && this.parent.pivotColumns[cCnt].autoFit ? gridColumn[cCnt].width : this.parent.renderModule.lastColumn && this.parent.renderModule.lastColumn.field === gridColumn[cCnt].field ? columnWidth - 3 : columnWidth;
                } else {
                  gridColumn[cCnt].minWidth = valueColWidth;
                }
              }
            }
          }
          if (this.parent.isTabular) {
            if (this.parent.dataSourceSettings.valueAxis === "row") {
              this.rowAxisWidth = this.rowAxisPanel.querySelector(".e-tabular-group-rows").getBoundingClientRect().width;
            } else {
              var pivotButtons_1 = this.rowAxisPanel.querySelectorAll("." + PIVOT_BUTTON_WRAPPER_CLASS);
              this.rowAxisWidth = this.getPivotButtonsTotalWidth(pivotButtons_1);
              if (this.parent.engineModule.rowMaxLevel === 0 && pivotButtons_1.length === 1) {
                this.rowAxisWidth = 250;
              }
              if (this.parent.element.getBoundingClientRect().width * 0.8 <= this.rowAxisWidth) {
                this.rowAxisWidth = pivotButtons_1.length * this.parent.gridSettings.columnWidth;
              }
            }
          }
          this.parent.posCount = 0;
          this.parent.setGridColumns(this.parent.grid.columns);
          if (!this.parent.firstColWidth) {
            buttonWidth = gridColumn[0].autoFit ? gridColumn[0].width.toString() : buttonWidth;
            colGroupElement.style.width = buttonWidth;
            rowContent.style.width = buttonWidth;
            rowHeaderTable.style.width = buttonWidth;
            setStyleAttribute(rowHeaderTable, {
              "width": buttonWidth
            });
          }
        } else {
          if (!this.parent.firstColWidth) {
            var gridColumn = this.parent.grid.columns;
            if (gridColumn && gridColumn.length > 0) {
              if (this.parent.isTabular) {
                this.rowAxisWidth = this.parent.dataSourceSettings.rows.length * this.parent.gridSettings.columnWidth;
                for (var i = 0; i < this.parent.engineModule.rowMaxLevel; i++) {
                  gridColumn[i].width = this.parent.gridSettings.columnWidth;
                }
              } else {
                gridColumn[0].width = this.resColWidth;
              }
            }
            this.parent.posCount = 0;
            this.parent.grid.headerModule.refreshUI();
          }
        }
      } else {
        if (this.parent.grid.columns && this.parent.grid.columns.length > 0) {
          this.parent.grid.columns[0].width = this.parent.grid.columns[0].width > this.resColWidth ? this.parent.grid.columns[0].width : this.resColWidth;
        }
        this.parent.grid.headerModule.refreshUI();
      }
      if (this.groupingTable || this.groupingChartTable) {
        this.refreshUI();
      }
    };
    GroupingBar2.prototype.wireEvent = function(element) {
      EventHandler.add(element, "mouseover", this.dropIndicatorUpdate, this);
      EventHandler.add(element, "mouseleave", this.dropIndicatorUpdate, this);
    };
    GroupingBar2.prototype.unWireEvent = function(element) {
      EventHandler.remove(element, "mouseover", this.dropIndicatorUpdate);
      EventHandler.remove(element, "mouseleave", this.dropIndicatorUpdate);
    };
    GroupingBar2.prototype.dropIndicatorUpdate = function(e) {
      if (this.parent.isDragging && e.target.classList.contains(DROPPABLE_CLASS) && e.type === "mouseover" || !this.parent.isDragging || !e.target.classList.contains(DROPPABLE_CLASS) && e.type === "mouseleave") {
        removeClass([].slice.call(this.parent.element.querySelectorAll("." + DROP_INDICATOR_CLASS)), INDICATOR_HOVER_CLASS);
        removeClass([].slice.call(this.parent.element.querySelectorAll("." + DROP_INDICATOR_CLASS + "-last")), INDICATOR_HOVER_CLASS);
      }
    };
    GroupingBar2.prototype.tapHoldHandler = function(e) {
      var target = closest(e.originalEvent.target, "." + PIVOT_BUTTON_CLASS);
      if (!isNullOrUndefined(target) && this.parent.isAdaptive) {
        var pos = target.getBoundingClientRect();
        this.parent.contextMenuModule.fieldElement = target;
        this.parent.contextMenuModule.menuObj.open(pos.top, pos.left);
        return;
      }
    };
    GroupingBar2.prototype.RefreshFieldsPanel = function() {
      if (this.parent.dataType === "pivot" && this.parent.groupingBarSettings != null) {
        if (selectAll("#" + this.parent.element.id + "_AllFields", this.parent.element).length > 0) {
          for (var _i = 0, _a = selectAll("#" + this.parent.element.id + "_AllFields", this.parent.element); _i < _a.length; _i++) {
            var element = _a[_i];
            element.remove();
          }
        }
        if (this.parent.groupingBarSettings.showFieldsPanel) {
          if (this.groupingChartTable && this.parent.displayOption.view !== "Table" && this.parent.groupingBarSettings.displayMode !== "Table") {
            this.chartPanel = this.createToolbarUI(this.groupingChartTable);
          }
          if (this.groupingTable) {
            this.gridPanel = this.createToolbarUI(this.groupingTable);
          }
          this.parent.axisFieldModule.render();
          this.refreshUI();
        }
      }
    };
    GroupingBar2.prototype.createToolbarUI = function(element) {
      if (select("#" + this.parent.element.id + "_AllFields", element)) {
        select("#" + this.parent.element.id + "_AllFields", element).remove();
      }
      element.prepend(createElement("div", {
        id: this.parent.element.id + "_AllFields"
      }));
      var toolbarObj = new Toolbar({
        cssClass: ALL_FIELDS_PANEL_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
        enableRtl: this.parent.enableRtl,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        items: [{
          template: "<div class=" + GROUP_ALL_FIELDS_CLASS + "></div>"
        }],
        allowKeyboard: false,
        width: !this.parent.gridSettings.allowAutoResizing ? this.parent.grid ? this.parent.getGridWidthAsNumber() - 2 : this.parent.getWidthAsNumber() - 2 : "auto"
      });
      toolbarObj.appendTo(select("#" + this.parent.element.id + "_AllFields", element));
      return toolbarObj;
    };
    GroupingBar2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(initSubComponent, this.renderLayout, this);
      this.parent.on(uiUpdate, this.appendToElement, this);
    };
    GroupingBar2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(uiUpdate, this.appendToElement);
      this.parent.off(initSubComponent, this.renderLayout);
    };
    GroupingBar2.prototype.destroy = function() {
      this.removeEventListener();
      if (this.parent.pivotButtonModule) {
        this.parent.pivotButtonModule.destroy();
        this.parent.pivotButtonModule = null;
      }
      if (this.groupingTable && this.groupingTable.querySelector("." + ALL_FIELDS_PANEL_CLASS) && this.gridPanel != null && !this.gridPanel.isDestroyed) {
        this.gridPanel.destroy();
        this.gridPanel = null;
      }
      if (this.groupingChartTable && this.groupingChartTable.querySelector("." + ALL_FIELDS_PANEL_CLASS) && this.chartPanel != null && !this.chartPanel.isDestroyed) {
        this.chartPanel.destroy();
        this.chartPanel = null;
      }
      if (this.touchObj && !this.touchObj.isDestroyed) {
        this.touchObj.destroy();
      }
      if (this.parent.element.querySelector("." + GROUPING_BAR_CLASS)) {
        remove(this.parent.element.querySelector("." + GROUPING_BAR_CLASS));
      }
    };
    GroupingBar2.prototype.getPivotButtonsTotalWidth = function(pivotButtons) {
      var totalWidth = 0;
      for (var i = 0; i < pivotButtons.length; i++) {
        var buttonWidth = pivotButtons[i].getBoundingClientRect().width < this.parent.gridSettings.columnWidth ? this.parent.gridSettings.columnWidth : pivotButtons[i].getBoundingClientRect().width;
        totalWidth += buttonWidth + 6;
      }
      return totalWidth;
    };
    return GroupingBar2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/common/conditionalformatting/conditional-formatting.js
var ConditionalFormatting = (
  /** @class */
  function() {
    function ConditionalFormatting2(parent) {
      this.parent = parent;
      this.parent.conditionalFormattingModule = this;
      this.parentID = this.parent.element.id;
      this.fontColor = [];
      this.backgroundColor = [];
      this.newFormat = [];
    }
    ConditionalFormatting2.prototype.getModuleName = function() {
      return "conditionalFormatting";
    };
    ConditionalFormatting2.prototype.createDialog = function() {
      if (select("#" + this.parentID + "conditionalformatting", document) !== null) {
        remove(select("#" + this.parentID + "conditionalformatting", document));
      }
      var conditionalFormattingElement = createElement("div", {
        id: this.parentID + "conditionalformatting",
        className: FORMAT_DIALOG
      });
      this.parent.element.appendChild(conditionalFormattingElement);
      var buttonModel = [{
        click: this.addButtonClick.bind(this),
        isFlat: false,
        buttonModel: {
          cssClass: (this.parent.isAdaptive ? FORMAT_ROUND_BUTTON + " " + FORMAT_CONDITION_BUTTON : FORMAT_CONDITION_BUTTON) + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
          iconCss: ICON + " " + ADD_ICON_CLASS,
          content: this.parent.isAdaptive ? "" : this.parent.localeObj.getConstant("condition")
        }
      }, {
        click: this.applyButtonClick.bind(this),
        isFlat: false,
        buttonModel: {
          isPrimary: true,
          cssClass: FORMAT_APPLY_BUTTON + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
          content: this.parent.localeObj.getConstant("apply")
        }
      }, {
        click: this.cancelButtonClick.bind(this),
        isFlat: false,
        buttonModel: {
          cssClass: FORMAT_CANCEL_BUTTON + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
          content: this.parent.localeObj.getConstant("cancel")
        }
      }];
      var dialog;
      if (this.parent.isAdaptive) {
        dialog = new Dialog({
          animationSettings: {
            effect: "Zoom"
          },
          isModal: true,
          width: "100%",
          height: "100%",
          showCloseIcon: false,
          closeOnEscape: false,
          enableRtl: this.parent.enableRtl,
          locale: this.parent.locale,
          enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
          position: {
            X: "center",
            Y: "center"
          },
          allowDragging: true,
          buttons: buttonModel,
          beforeOpen: this.beforeOpen.bind(this),
          close: this.removeDialog.bind(this),
          cssClass: this.parent.cssClass,
          header: this.parent.localeObj.getConstant("conditionalFormatting"),
          target: document.body
        });
      } else {
        dialog = new Dialog({
          allowDragging: true,
          position: {
            X: "center",
            Y: this.parent.element.offsetTop
          },
          buttons: buttonModel,
          beforeOpen: this.beforeOpen.bind(this),
          close: this.removeDialog.bind(this),
          cssClass: this.parent.cssClass,
          isModal: true,
          closeOnEscape: true,
          enableRtl: this.parent.enableRtl,
          locale: this.parent.locale,
          enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
          showCloseIcon: true,
          header: this.parent.localeObj.getConstant("conditionalFormatting"),
          target: this.parent.element
        });
      }
      dialog.isStringTemplate = true;
      dialog.appendTo(conditionalFormattingElement);
    };
    ConditionalFormatting2.prototype.beforeOpen = function() {
      select("#" + this.parentID + "conditionalformatting", document).querySelector("." + DIALOG_HEADER).setAttribute("title", this.parent.localeObj.getConstant("conditionalFormatting"));
    };
    ConditionalFormatting2.prototype.addButtonClick = function() {
      var _this = this;
      var format = {
        conditions: "LessThan",
        value1: 0,
        applyGrandTotals: true,
        style: {
          backgroundColor: "white",
          color: "black",
          fontFamily: "Arial",
          fontSize: "12px"
        }
      };
      var conditionalFormating = this;
      this.parent.trigger(conditionalFormatting, format, function(observedArgs) {
        conditionalFormating.refreshConditionValues();
        _this.destroyColorPickers();
        conditionalFormating.newFormat.push(observedArgs);
        conditionalFormating.addFormat();
      });
    };
    ConditionalFormatting2.prototype.applyButtonClick = function() {
      if (this.refreshConditionValues()) {
        this.parent.setProperties({
          dataSourceSettings: {
            conditionalFormatSettings: this.newFormat
          }
        }, true);
        var actionInfo = {
          conditionalFormattingInfo: this.parent.dataSourceSettings.conditionalFormatSettings
        };
        this.parent.actionObj.actionInfo = actionInfo;
        if (this.parent.dataSourceSettings.values.length > 0) {
          this.parent.renderPivotGrid();
        }
        var dialog = getInstance(select("#" + this.parentID + "conditionalformatting", document), Dialog);
        dialog.close();
      }
    };
    ConditionalFormatting2.prototype.cancelButtonClick = function() {
      var dialog = getInstance(select("#" + this.parentID + "conditionalformatting", document), Dialog);
      dialog.close();
      this.newFormat = [];
    };
    ConditionalFormatting2.prototype.refreshConditionValues = function() {
      for (var i = 0; i < this.newFormat.length; i++) {
        if (select("#" + this.parentID + "conditionvalue1" + i, document).value === "" || select("#" + this.parentID + "conditionvalue2" + i, document).value === "") {
          if (select("#" + this.parentID + "conditionvalue1" + i, document).value === "") {
            select("#" + this.parentID + "conditionvalue1" + i, document).focus();
          } else {
            select("#" + this.parentID + "conditionvalue2" + i, document).focus();
          }
          return false;
        }
        this.newFormat[i].value1 = Number(select("#" + this.parentID + "conditionvalue1" + i, document).value);
        this.newFormat[i].value2 = Number(select("#" + this.parentID + "conditionvalue2" + i, document).value);
      }
      return true;
    };
    ConditionalFormatting2.prototype.addFormat = function() {
      var format = createElement("div", {
        id: this.parentID + "formatDiv",
        className: FORMAT_NEW
      });
      for (var i = 0; i < this.newFormat.length; i++) {
        format.appendChild(this.createDialogElements(i));
      }
      if (this.newFormat.length === 0) {
        var outerDiv = this.createDialogElements();
        var element = createElement("p", {
          id: this.parentID + "emptyFormat",
          className: EMPTY_FORMAT
        });
        element.innerText = this.parent.localeObj.getConstant("emptyFormat");
        outerDiv.appendChild(element);
        format.appendChild(outerDiv);
      }
      var dialog = getInstance(select("#" + this.parentID + "conditionalformatting", document), Dialog);
      dialog.setProperties({
        "content": format
      }, false);
      for (var i = 0; i < this.newFormat.length; i++) {
        this.renderDropDowns(i);
        this.renderColorPicker(i);
      }
    };
    ConditionalFormatting2.prototype.createDialogElements = function(i) {
      var outerDiv = createElement("div", {
        id: this.parentID + "outerDiv" + i,
        className: FORMAT_OUTER
      });
      if (i !== void 0) {
        var format = this.newFormat[i];
        var button = createElement("button", {
          id: this.parentID + "removeButton" + i,
          className: FORMAT_DELETE_BUTTON,
          attrs: {
            type: "button",
            "title": this.parent.localeObj.getConstant("delete")
          }
        });
        outerDiv.appendChild(button);
        var innerDiv = createElement("div", {
          id: this.parentID + "innerDiv" + i,
          className: FORMAT_INNER
        });
        var valueTable = createElement("table", {
          id: this.parentID + "_valueTable" + i,
          className: FORMAT_TABLE,
          attrs: {
            "role": "table"
          }
        });
        var valueTableRow = createElement("tr");
        var valueTableElements = createElement("td");
        var valuelabel = createElement("span", {
          id: this.parentID + "valuelabel" + i,
          className: FORMAT_VALUE_LABEL
        });
        valuelabel.innerText = this.parent.localeObj.getConstant("value");
        valueTableElements.appendChild(valuelabel);
        valueTableRow.appendChild(valueTableElements);
        valueTable.appendChild(valueTableRow);
        valueTableRow = createElement("tr");
        valueTableElements = createElement("td");
        var measureDropdown = createElement("div", {
          id: this.parentID + "measure" + i
        });
        var measureInput = createElement("input", {
          id: this.parentID + "measureinput" + i,
          attrs: {
            "type": "text",
            "tabindex": "0"
          }
        });
        measureDropdown.appendChild(measureInput);
        valueTableElements.appendChild(measureDropdown);
        valueTableRow.appendChild(valueTableElements);
        valueTableElements = createElement("td");
        var conditionDropdown = createElement("div", {
          id: this.parentID + "condition" + i
        });
        var conditionInput = createElement("input", {
          id: this.parentID + "conditioninput" + i,
          attrs: {
            "type": "text",
            "tabindex": "0"
          }
        });
        conditionDropdown.appendChild(conditionInput);
        valueTableElements.appendChild(conditionDropdown);
        valueTableRow.appendChild(valueTableElements);
        valueTableElements = createElement("td", {
          attrs: {
            style: "display:table"
          },
          className: FORMAT_INPUT_VALUE
        });
        var formatValueClassName = !(format.conditions === "Between" || format.conditions === "NotBetween") ? HIDDEN : "";
        var conditionValueParentDiv = createElement("div", {
          attrs: {
            style: "display: table-row;"
          }
        });
        var conditionValue1WrapperDiv = createElement("div", {
          id: this.parentID + "ConditionValue1" + i,
          attrs: {
            style: "display: table-cell;"
          }
        });
        var value1 = createElement("input", {
          id: this.parentID + "conditionvalue1" + i,
          attrs: {
            "type": "text",
            "tabindex": "0",
            "value": !isNullOrUndefined(format.value1) ? format.value1.toString() : "0",
            "placeholder": this.parent.localeObj.getConstant("emptyInput")
          }
        });
        conditionValue1WrapperDiv.appendChild(value1);
        conditionValueParentDiv.appendChild(conditionValue1WrapperDiv);
        var valuespan = createElement("span", {
          id: this.parentID + "valuespan" + i,
          className: FORMAT_VALUE_SPAN + " " + formatValueClassName,
          innerHTML: "&"
        });
        conditionValueParentDiv.appendChild(valuespan);
        var conditionValue2WrapperDiv = createElement("div", {
          id: this.parentID + "ConditionValue2" + i,
          attrs: {
            style: "display: table-cell;"
          }
        });
        var value2 = createElement("input", {
          id: this.parentID + "conditionvalue2" + i,
          attrs: {
            "type": "text",
            "tabindex": "0",
            "value": !isNullOrUndefined(format.value2) ? format.value2.toString() : "0",
            "placeholder": this.parent.localeObj.getConstant("emptyInput")
          }
        });
        conditionValue2WrapperDiv.appendChild(value2);
        conditionValueParentDiv.appendChild(conditionValue2WrapperDiv);
        valueTableElements.appendChild(conditionValueParentDiv);
        valueTableRow.appendChild(valueTableElements);
        valueTable.appendChild(valueTableRow);
        innerDiv.appendChild(valueTable);
        var grandTotalTable = createElement("table", {
          id: this.parentID + "_grandTotalTable" + i,
          className: FORMAT_TABLE + " " + GRANDTOTAL_CHECKBOX_TABLE,
          attrs: {
            "role": "table"
          }
        });
        var grandTotalTableRow = createElement("tr");
        var grandTotalTableElements = createElement("td");
        grandTotalTable.appendChild(grandTotalTableRow);
        var checkBoxInput = createElement("input", {
          id: this.parentID + "grandtotalcheckbox" + i,
          attrs: {
            "type": "checkbox",
            "tabindex": "0"
          }
        });
        grandTotalTableElements.appendChild(checkBoxInput);
        grandTotalTableRow.appendChild(grandTotalTableElements);
        grandTotalTable.appendChild(grandTotalTableRow);
        innerDiv.appendChild(grandTotalTable);
        var formatTable = createElement("table", {
          id: this.parentID + "_formatTable" + i,
          className: FORMAT_TABLE,
          attrs: {
            "role": "table"
          }
        });
        var formatTableRow = createElement("tr");
        var formatTableElements = createElement("td");
        var formatlabel = createElement("span", {
          id: this.parentID + "formatlabel" + i,
          className: FORMAT_LABEL
        });
        formatlabel.innerText = this.parent.localeObj.getConstant("formatLabel");
        formatTableElements.appendChild(formatlabel);
        formatTableRow.appendChild(formatTableElements);
        formatTable.appendChild(formatTableRow);
        formatTableRow = createElement("tr");
        formatTableElements = createElement("td");
        var fontNameDropdown = createElement("div", {
          id: this.parentID + "fontname" + i
        });
        var fontNameInput = createElement("input", {
          id: this.parentID + "fontnameinput" + i,
          attrs: {
            "type": "text",
            "tabindex": "0"
          }
        });
        fontNameDropdown.appendChild(fontNameInput);
        formatTableElements.appendChild(fontNameDropdown);
        formatTableRow.appendChild(formatTableElements);
        formatTableElements = createElement("td");
        var fontSizeDropdown = createElement("div", {
          id: this.parentID + "fontsize" + i
        });
        var fontSizeInput = createElement("input", {
          id: this.parentID + "fontsizeinput" + i,
          attrs: {
            "type": "text",
            "tabindex": "0"
          }
        });
        fontSizeDropdown.appendChild(fontSizeInput);
        formatTableElements.appendChild(fontSizeDropdown);
        formatTableRow.appendChild(formatTableElements);
        if (this.parent.isAdaptive) {
          formatTable.appendChild(formatTableRow);
          formatTableRow = createElement("tr");
          formatTable.appendChild(formatTableRow);
          formatTableRow = createElement("tr");
        }
        formatTableElements = createElement("td");
        var colorPicker1 = createElement("input", {
          id: this.parentID + "fontcolor" + i,
          attrs: {
            "type": "color",
            "tabindex": "0"
          },
          className: FORMAT_FONT_COLOR
        });
        formatTableElements.appendChild(colorPicker1);
        var colorPicker2 = createElement("input", {
          id: this.parentID + "backgroundcolor" + i,
          attrs: {
            "type": "color",
            "tabindex": "0"
          },
          className: FORMAT_BACK_COLOR
        });
        formatTableElements.appendChild(colorPicker2);
        formatTableRow.appendChild(formatTableElements);
        formatTableElements = createElement("td");
        var valuePreview = createElement("input", {
          id: this.parentID + "valuepreview" + i,
          className: INPUT + " " + FORMAT_VALUE_PREVIEW,
          attrs: {
            "tabindex": "-1",
            "readonly": "true",
            "value": "123.45"
          }
        });
        formatTableElements.appendChild(valuePreview);
        formatTableRow.appendChild(formatTableElements);
        formatTable.appendChild(formatTableRow);
        innerDiv.appendChild(formatTable);
        outerDiv.appendChild(innerDiv);
      }
      return outerDiv;
    };
    ConditionalFormatting2.prototype.renderDropDowns = function(i) {
      var dialog = getInstance(select("#" + this.parentID + "conditionalformatting", document), Dialog);
      var dialogElement = dialog.element;
      var format = this.newFormat[i];
      var fields = [];
      fields.push({
        index: 0,
        name: this.parent.localeObj.getConstant("AllValues"),
        field: this.parent.localeObj.getConstant("AllValues")
      });
      for (var i_1 = 0; i_1 < this.parent.dataSourceSettings.values.length; i_1++) {
        var caption = this.parent.dataSourceSettings.values[i_1].caption || this.parent.dataSourceSettings.values[i_1].name;
        caption = this.parent.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(caption) : caption;
        fields.push({
          index: i_1 + 1,
          name: caption,
          field: this.parent.dataSourceSettings.values[i_1].name
        });
      }
      var value = isNullOrUndefined(format.measure) ? this.parent.localeObj.getConstant("AllValues") : format.measure;
      var fieldsDropDown = [];
      fieldsDropDown[i] = new DropDownList({
        dataSource: fields,
        fields: {
          text: "name",
          value: "field"
        },
        value,
        width: "100%",
        cssClass: this.parent.cssClass,
        popupHeight: "200px",
        popupWidth: "auto",
        locale: this.parent.locale,
        enableRtl: this.parent.enableRtl,
        change: this.measureChange.bind(this, i)
      });
      fieldsDropDown[i].isStringTemplate = true;
      fieldsDropDown[i].appendTo(select("#" + this.parentID + "measureinput" + i, dialogElement));
      var conditions = [{
        value: "LessThan",
        name: this.parent.localeObj.getConstant("LessThan")
      }, {
        value: "LessThanOrEqualTo",
        name: this.parent.localeObj.getConstant("LessThanOrEqualTo")
      }, {
        value: "GreaterThan",
        name: this.parent.localeObj.getConstant("GreaterThan")
      }, {
        value: "GreaterThanOrEqualTo",
        name: this.parent.localeObj.getConstant("GreaterThanOrEqualTo")
      }, {
        value: "Equals",
        name: this.parent.localeObj.getConstant("Equals")
      }, {
        value: "NotEquals",
        name: this.parent.localeObj.getConstant("NotEquals")
      }, {
        value: "Between",
        name: this.parent.localeObj.getConstant("Between")
      }, {
        value: "NotBetween",
        name: this.parent.localeObj.getConstant("NotBetween")
      }];
      value = isNullOrUndefined(format.conditions) ? "LessThan" : format.conditions;
      var conditionsDropDown = [];
      conditionsDropDown[i] = new DropDownList({
        dataSource: conditions,
        fields: {
          value: "value",
          text: "name"
        },
        value,
        width: "100%",
        cssClass: this.parent.cssClass,
        popupHeight: "200px",
        popupWidth: "auto",
        locale: this.parent.locale,
        enableRtl: this.parent.enableRtl,
        change: this.conditionChange.bind(this, i)
      });
      conditionsDropDown[i].isStringTemplate = true;
      conditionsDropDown[i].appendTo(select("#" + this.parentID + "conditioninput" + i, dialogElement));
      var formatValueClassName = !(this.newFormat[i].conditions === "Between" || this.newFormat[i].conditions === "NotBetween") ? HIDDEN : "";
      var conditionValue1 = new TextBox({
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        cssClass: FORMAT_VALUE1 + " " + this.parent.cssClass,
        width: "auto"
      });
      conditionValue1.isStringTemplate = true;
      conditionValue1.appendTo(select("#" + this.parentID + "conditionvalue1" + i, dialogElement));
      var conditionValue2 = new TextBox({
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        cssClass: FORMAT_VALUE2 + " " + formatValueClassName + " " + this.parent.cssClass,
        width: "auto"
      });
      conditionValue2.isStringTemplate = true;
      conditionValue2.appendTo(select("#" + this.parentID + "conditionvalue2" + i, dialogElement));
      var grandTotalCheckBox = new CheckBox({
        label: this.parent.localeObj.getConstant("applyToGrandTotal"),
        checked: this.newFormat[i].applyGrandTotals,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        change: this.onCheckChange.bind(this, i),
        cssClass: this.parent.cssClass
      });
      grandTotalCheckBox.isStringTemplate = true;
      grandTotalCheckBox.appendTo(select("#" + this.parentID + "grandtotalcheckbox" + i, dialogElement));
      var fontNames = [{
        index: 0,
        name: "Arial"
      }, {
        index: 1,
        name: "San Serif"
      }, {
        index: 2,
        name: "Impact"
      }, {
        index: 3,
        name: "Trebuchet MS"
      }, {
        index: 4,
        name: "Serif"
      }, {
        index: 5,
        name: "Verdana"
      }, {
        index: 6,
        name: "Courier New"
      }, {
        index: 7,
        name: "Times New Roman"
      }, {
        index: 8,
        name: "Tahoma"
      }, {
        index: 9,
        name: "Gerogia"
      }];
      value = isNullOrUndefined(format.style.fontFamily) ? "Arial" : format.style.fontFamily;
      var fontNameDropDown = [];
      fontNameDropDown[i] = new DropDownList({
        dataSource: fontNames,
        fields: {
          text: "name"
        },
        value,
        width: "100%",
        cssClass: this.parent.cssClass,
        popupHeight: "200px",
        popupWidth: "auto",
        locale: this.parent.locale,
        enableRtl: this.parent.enableRtl,
        change: this.fontNameChange.bind(this, i)
      });
      fontNameDropDown[i].isStringTemplate = true;
      fontNameDropDown[i].appendTo(select("#" + this.parentID + "fontnameinput" + i, dialogElement));
      var fontSize = [{
        index: 0,
        name: "9px"
      }, {
        index: 1,
        name: "10px"
      }, {
        index: 2,
        name: "11px"
      }, {
        index: 3,
        name: "12px"
      }, {
        index: 4,
        name: "13px"
      }, {
        index: 5,
        name: "14px"
      }, {
        index: 6,
        name: "15px"
      }, {
        index: 6,
        name: "16px"
      }];
      value = isNullOrUndefined(format.style.fontSize) ? "12px" : format.style.fontSize;
      var fontSizeDropDown = [];
      fontSizeDropDown[i] = new DropDownList({
        dataSource: fontSize,
        fields: {
          text: "name"
        },
        popupHeight: "200px",
        popupWidth: "auto",
        value,
        width: "100%",
        change: this.fontSizeChange.bind(this, i),
        locale: this.parent.locale,
        enableRtl: this.parent.enableRtl,
        cssClass: this.parent.cssClass
      });
      fontSizeDropDown[i].isStringTemplate = true;
      fontSizeDropDown[i].appendTo(select("#" + this.parentID + "fontsizeinput" + i, dialogElement));
    };
    ConditionalFormatting2.prototype.conditionChange = function(i, args) {
      this.newFormat[i].conditions = args.value;
      var valuespan = select("#" + this.parentID + "valuespan" + i, document);
      var conditionvalue2 = select("#" + this.parentID + "conditionvalue2" + i, document);
      if (args.value === "Between" || args.value === "NotBetween") {
        valuespan.classList.remove(HIDDEN);
        conditionvalue2.parentElement.classList.remove(HIDDEN);
      } else {
        valuespan.classList.add(HIDDEN);
        conditionvalue2.parentElement.classList.add(HIDDEN);
      }
    };
    ConditionalFormatting2.prototype.onCheckChange = function(i, args) {
      this.newFormat[i].applyGrandTotals = args.checked;
    };
    ConditionalFormatting2.prototype.fontNameChange = function(i, args) {
      this.newFormat[i].style.fontFamily = args.value.toString();
      select("#" + this.parentID + "valuepreview" + i, document).style.fontFamily = args.value;
    };
    ConditionalFormatting2.prototype.fontSizeChange = function(i, args) {
      this.newFormat[i].style.fontSize = args.value.toString();
      select("#" + this.parentID + "valuepreview" + i, document).style.fontSize = args.value;
    };
    ConditionalFormatting2.prototype.measureChange = function(i, args) {
      this.newFormat[i].measure = args.value.toString() === this.parent.localeObj.getConstant("AllValues") ? void 0 : args.value.toString();
    };
    ConditionalFormatting2.prototype.renderColorPicker = function(i) {
      var dialog = getInstance(select("#" + this.parentID + "conditionalformatting", document), Dialog);
      var dialogElement = dialog.element;
      var format = this.newFormat[i];
      var value = isNullOrUndefined(format.style.color) ? "black" : format.style.color;
      var color = value.charAt(0) === "#" && this.isHex(value.substr(1)) ? value : this.colourNameToHex(value);
      select("#" + this.parentID + "valuepreview" + i, document).style.color = color;
      this.fontColor[i] = new ColorPicker({
        cssClass: FORMAT_COLOR_PICKER + " " + FORMAT_FONT_COLOR_PICKER + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
        value: color,
        mode: "Palette",
        change: this.fontColorChange.bind(this, i),
        locale: this.parent.locale,
        enableRtl: this.parent.enableRtl
      });
      this.fontColor[i].isStringTemplate = true;
      this.fontColor[i].appendTo(select("#" + this.parentID + "fontcolor" + i, dialogElement));
      addClass([this.fontColor[i].element.nextElementSibling.querySelector("." + SELECTED_COLOR)], ICON);
      value = isNullOrUndefined(format.style.backgroundColor) ? "white" : format.style.backgroundColor;
      color = value.charAt(0) === "#" && this.isHex(value.substr(1)) ? value : this.colourNameToHex(value);
      select("#" + this.parentID + "valuepreview" + i, document).style.backgroundColor = color;
      select("#" + this.parentID + "valuepreview" + i, document).style.fontFamily = format.style.fontFamily;
      select("#" + this.parentID + "valuepreview" + i, document).style.fontSize = format.style.fontSize;
      this.backgroundColor[i] = new ColorPicker({
        cssClass: FORMAT_COLOR_PICKER + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
        value: color,
        mode: "Palette",
        change: this.backColorChange.bind(this, i),
        locale: this.parent.locale,
        enableRtl: this.parent.enableRtl
      });
      this.backgroundColor[i].isStringTemplate = true;
      this.backgroundColor[i].appendTo(select("#" + this.parentID + "backgroundcolor" + i, dialogElement));
      addClass([this.backgroundColor[i].element.nextElementSibling.querySelector(".e-selected-color")], ICON);
      var toggleBtn = new Button({
        iconCss: ICON + " " + FORMAT_DELETE_ICON,
        cssClass: FLAT + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
        locale: this.parent.locale,
        enableRtl: this.parent.enableRtl,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer
      });
      toggleBtn.isStringTemplate = true;
      toggleBtn.appendTo(select("#" + this.parentID + "removeButton" + i, dialogElement));
      toggleBtn.element.onclick = this.toggleButtonClick.bind(this, i);
    };
    ConditionalFormatting2.prototype.backColorChange = function(i, args) {
      this.newFormat[i].style.backgroundColor = args.currentValue.hex;
      select("#" + this.parentID + "valuepreview" + i, document).style.backgroundColor = args.currentValue.hex;
    };
    ConditionalFormatting2.prototype.fontColorChange = function(i, args) {
      this.newFormat[i].style.color = args.currentValue.hex;
      select("#" + this.parentID + "valuepreview" + i, document).style.color = args.currentValue.hex;
    };
    ConditionalFormatting2.prototype.toggleButtonClick = function(i) {
      this.destroyColorPickers();
      this.newFormat.splice(i, 1);
      this.addFormat();
    };
    ConditionalFormatting2.prototype.isHex = function(h) {
      var a = parseInt(h, 16);
      while (h.charAt(0) === "0") {
        h = h.substr(1);
      }
      return a.toString(16) === h.toLowerCase() || a === 0 && h === "";
    };
    ConditionalFormatting2.prototype.hexToRgb = function(hex) {
      var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
      } : null;
    };
    ConditionalFormatting2.prototype.colourNameToHex = function(colour) {
      var colours = {
        "aliceblue": "#f0f8ff",
        "antiquewhite": "#faebd7",
        "aqua": "#00ffff",
        "aquamarine": "#7fffd4",
        "azure": "#f0ffff",
        "beige": "#f5f5dc",
        "bisque": "#ffe4c4",
        "black": "#000000",
        "blanchedalmond": "#ffebcd",
        "blue": "#0000ff",
        "blueviolet": "#8a2be2",
        "brown": "#a52a2a",
        "burlywood": "#deb887",
        "cadetblue": "#5f9ea0",
        "chartreuse": "#7fff00",
        "chocolate": "#d2691e",
        "coral": "#ff7f50",
        "cornflowerblue": "#6495ed",
        "cornsilk": "#fff8dc",
        "crimson": "#dc143c",
        "cyan": "#00ffff",
        "darkblue": "#00008b",
        "darkcyan": "#008b8b",
        "darkgoldenrod": "#b8860b",
        "darkgray": "#a9a9a9",
        "darkgreen": "#006400",
        "darkkhaki": "#bdb76b",
        "darkmagenta": "#8b008b",
        "darkolivegreen": "#556b2f",
        "darkorange": "#ff8c00",
        "darkorchid": "#9932cc",
        "darkred": "#8b0000",
        "darksalmon": "#e9967a",
        "darkseagreen": "#8fbc8f",
        "darkslateblue": "#483d8b",
        "darkslategray": "#2f4f4f",
        "darkturquoise": "#00ced1",
        "darkviolet": "#9400d3",
        "deeppink": "#ff1493",
        "deepskyblue": "#00bfff",
        "dimgray": "#696969",
        "dodgerblue": "#1e90ff",
        "firebrick": "#b22222",
        "floralwhite": "#fffaf0",
        "forestgreen": "#228b22",
        "fuchsia": "#ff00ff",
        "gainsboro": "#dcdcdc",
        "ghostwhite": "#f8f8ff",
        "gold": "#ffd700",
        "goldenrod": "#daa520",
        "gray": "#808080",
        "green": "#008000",
        "greenyellow": "#adff2f",
        "honeydew": "#f0fff0",
        "hotpink": "#ff69b4",
        "indianred ": "#cd5c5c",
        "indigo": "#4b0082",
        "ivory": "#fffff0",
        "khaki": "#f0e68c",
        "lavender": "#e6e6fa",
        "lavenderblush": "#fff0f5",
        "lawngreen": "#7cfc00",
        "lemonchiffon": "#fffacd",
        "lightblue": "#add8e6",
        "lightcoral": "#f08080",
        "lightcyan": "#e0ffff",
        "lightgoldenrodyellow": "#fafad2",
        "lightgrey": "#d3d3d3",
        "lightgreen": "#90ee90",
        "lightpink": "#ffb6c1",
        "lightsalmon": "#ffa07a",
        "lightseagreen": "#20b2aa",
        "lightskyblue": "#87cefa",
        "lightslategray": "#778899",
        "lightsteelblue": "#b0c4de",
        "lightyellow": "#ffffe0",
        "lime": "#00ff00",
        "limegreen": "#32cd32",
        "linen": "#faf0e6",
        "magenta": "#ff00ff",
        "maroon": "#800000",
        "mediumaquamarine": "#66cdaa",
        "mediumblue": "#0000cd",
        "mediumorchid": "#ba55d3",
        "mediumpurple": "#9370d8",
        "mediumseagreen": "#3cb371",
        "mediumslateblue": "#7b68ee",
        "mediumspringgreen": "#00fa9a",
        "mediumturquoise": "#48d1cc",
        "mediumvioletred": "#c71585",
        "midnightblue": "#191970",
        "mintcream": "#f5fffa",
        "mistyrose": "#ffe4e1",
        "moccasin": "#ffe4b5",
        "navajowhite": "#ffdead",
        "navy": "#000080",
        "oldlace": "#fdf5e6",
        "olive": "#808000",
        "olivedrab": "#6b8e23",
        "orange": "#ffa500",
        "orangered": "#ff4500",
        "orchid": "#da70d6",
        "palegoldenrod": "#eee8aa",
        "palegreen": "#98fb98",
        "paleturquoise": "#afeeee",
        "palevioletred": "#d87093",
        "papayawhip": "#ffefd5",
        "peachpuff": "#ffdab9",
        "peru": "#cd853f",
        "pink": "#ffc0cb",
        "plum": "#dda0dd",
        "powderblue": "#b0e0e6",
        "purple": "#800080",
        "rebeccapurple": "#663399",
        "red": "#ff0000",
        "rosybrown": "#bc8f8f",
        "royalblue": "#4169e1",
        "saddlebrown": "#8b4513",
        "salmon": "#fa8072",
        "sandybrown": "#f4a460",
        "seagreen": "#2e8b57",
        "seashell": "#fff5ee",
        "sienna": "#a0522d",
        "silver": "#c0c0c0",
        "skyblue": "#87ceeb",
        "slateblue": "#6a5acd",
        "slategray": "#708090",
        "snow": "#fffafa",
        "springgreen": "#00ff7f",
        "steelblue": "#4682b4",
        "tan": "#d2b48c",
        "teal": "#008080",
        "thistle": "#d8bfd8",
        "tomato": "#ff6347",
        "turquoise": "#40e0d0",
        "violet": "#ee82ee",
        "wheat": "#f5deb3",
        "white": "#ffffff",
        "whitesmoke": "#f5f5f5",
        "yellow": "#ffff00",
        "yellowgreen": "#9acd32"
      };
      if (typeof colours[colour.toLowerCase()] !== "undefined") {
        return colours[colour.toLowerCase()];
      } else if (colour.search("rgba") === 0) {
        var value = colour.substr(5).split(")")[0].split(",");
        var rgb = "";
        var a = "";
        for (var i = 0; i < value.length - 1; i++) {
          value[i] = (+value[i]).toString(16);
          if (value[i].length === 1) {
            value[i] = "0" + value[i];
          }
          rgb = rgb + value[i];
        }
        a = Math.round(+value[3] * 255).toString(16);
        return "#" + rgb + a;
      } else if (colour.search("rgb") === 0) {
        var value = colour.substr(4).split(")")[0].split(",");
        var rgb = "";
        for (var i = 0; i < value.length; i++) {
          value[i] = (+value[i]).toString(16);
          if (value[i].length === 1) {
            value[i] = "0" + value[i];
          }
          rgb = rgb + value[i];
        }
        return "#" + rgb;
      }
      return "#d5d5d5";
    };
    ConditionalFormatting2.prototype.removeDialog = function() {
      var element = select("#" + this.parentID + "conditionalformatting", document);
      var dialog = element ? getInstance(element, Dialog) : null;
      if (dialog && !dialog.isDestroyed) {
        this.destroyColorPickers();
        dialog.destroy();
      }
      if (element) {
        remove(element);
      }
      this.fontColor = [];
      this.backgroundColor = [];
      this.newFormat = [];
    };
    ConditionalFormatting2.prototype.destroyColorPickers = function() {
      for (var i = 0; i < (this.newFormat ? this.newFormat.length : 0); i++) {
        if (this.fontColor && this.fontColor[i] && !this.fontColor[i].isDestroyed) {
          this.fontColor[i].destroy();
        }
        if (this.backgroundColor && this.backgroundColor[i] && !this.backgroundColor[i].isDestroyed) {
          this.backgroundColor[i].destroy();
        }
      }
    };
    ConditionalFormatting2.prototype.showConditionalFormattingDialog = function() {
      this.newFormat = [];
      for (var i = 0; i < this.parent.dataSourceSettings.conditionalFormatSettings.length; i++) {
        this.newFormat.push(extend({}, this.parent.dataSourceSettings.conditionalFormatSettings[i].properties, null, true));
      }
      this.createDialog();
      getInstance(select("#" + this.parentID + "conditionalformatting", document), Dialog).refresh();
      this.addFormat();
    };
    ConditionalFormatting2.prototype.destroy = function() {
      var element = select("#" + this.parentID + "conditionalformatting", document);
      var dialog = element ? getInstance(element, Dialog) : null;
      if (dialog && !dialog.isDestroyed) {
        dialog.close();
      } else {
        return;
      }
    };
    return ConditionalFormatting2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/common/popups/toolbar.js
var Toolbar3 = (
  /** @class */
  function() {
    function Toolbar4(parent) {
      this.isMultiAxisChange = false;
      this.isReportChange = false;
      this.currentReport = "";
      this.parent = parent;
      this.parent.toolbarModule = this;
      this.addEventListener();
    }
    Toolbar4.prototype.getModuleName = function() {
      return "toolbar";
    };
    Toolbar4.prototype.createToolbar = function() {
      this.parent.isModified = false;
      this.renderDialog();
      if (select("#" + this.parent.element.id + "pivot-toolbar", this.parent.element) !== null) {
        remove(select("#" + this.parent.element.id + "pivot-toolbar", this.parent.element));
      }
      var element = createElement("div", {
        id: this.parent.element.id + "pivot-toolbar",
        className: GRID_TOOLBAR
      });
      if (this.parent.showFieldList && select("#" + this.parent.element.id + "_PivotFieldList", this.parent.element)) {
        this.parent.element.insertBefore(element, select("#" + this.parent.element.id + "_PivotFieldList", this.parent.element));
      } else if (this.parent.showGroupingBar && select("#" + this.parent.element.id + " .e-pivot-grouping-bar", this.parent.element)) {
        this.parent.element.insertBefore(element, select("#" + this.parent.element.id + " .e-pivot-grouping-bar", this.parent.element));
      } else {
        this.parent.element.insertBefore(element, select("#" + this.parent.element.id + "_grid", this.parent.element));
      }
      this.toolbar = new Toolbar({
        created: this.create.bind(this),
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        items: this.getItems(),
        allowKeyboard: false,
        cssClass: this.parent.cssClass,
        width: this.parent.grid ? this.parent.getGridWidthAsNumber() : this.parent.getWidthAsNumber()
      });
      this.toolbar.isStringTemplate = true;
      var viewStr = "viewContainerRef";
      var registerTemp = "registeredTemplate";
      var registeredTemplate = {};
      if (this.parent[viewStr]) {
        setValue(registerTemp, registeredTemplate, this.toolbar);
        this.toolbar[viewStr] = this.parent[viewStr];
      }
      if (this.parent.toolbarTemplate && typeof this.parent.toolbarTemplate === "string") {
        this.toolbar.appendTo(this.parent.toolbarTemplate);
        this.parent.element.replaceChild(this.toolbar.element, this.parent.element.querySelector("." + GRID_TOOLBAR));
        this.toolbar.element.classList.add(GRID_TOOLBAR);
      } else {
        this.toolbar.appendTo(element);
      }
      this.toolbar.width = this.parent.grid ? this.parent.getGridWidthAsNumber() : this.parent.getWidthAsNumber();
      if (this.parent.chart) {
        this.parent.chart.setProperties({
          width: this.parent.grid ? this.parent.getGridWidthAsNumber().toString() : this.parent.getWidthAsNumber().toString()
        }, true);
      }
      if (this.parent.showGroupingBar && this.parent.groupingBarModule && this.parent.element.querySelector("." + GROUPING_BAR_CLASS)) {
        this.parent.groupingBarModule.refreshUI();
      }
    };
    Toolbar4.prototype.fetchReports = function() {
      var reports = {
        reportName: []
      };
      this.parent.trigger(fetchReport, reports);
      return reports;
    };
    Toolbar4.prototype.fetchReportsArgs = function() {
      var callbackPromise = new Deferred();
      var reports = {
        reportName: []
      };
      this.parent.trigger(fetchReport, reports, function(observedArgs) {
        callbackPromise.resolve(observedArgs);
      });
      return callbackPromise;
    };
    Toolbar4.prototype.getItems = function() {
      var toolbar = this.parent.toolbar.filter(function(v, i, a) {
        return a.indexOf(v) === i;
      });
      var items = [];
      for (var _i = 0, toolbar_1 = toolbar; _i < toolbar_1.length; _i++) {
        var item = toolbar_1[_i];
        switch (item) {
          case "New":
            items.push({
              prefixIcon: GRID_NEW + " " + ICON,
              tooltipText: this.parent.localeObj.getConstant("new"),
              click: this.actionClick.bind(this),
              id: this.parent.element.id + "new"
            });
            break;
          case "Save":
            items.push({
              prefixIcon: GRID_SAVE + " " + ICON,
              tooltipText: this.parent.localeObj.getConstant("save"),
              click: this.actionClick.bind(this),
              id: this.parent.element.id + "save"
            });
            break;
          case "SaveAs":
            items.push({
              prefixIcon: GRID_SAVEAS + " " + ICON,
              tooltipText: this.parent.localeObj.getConstant("saveAs"),
              click: this.actionClick.bind(this),
              id: this.parent.element.id + "saveas"
            });
            break;
          case "Rename":
            items.push({
              prefixIcon: GRID_RENAME + " " + ICON,
              tooltipText: this.parent.localeObj.getConstant("rename"),
              click: this.actionClick.bind(this),
              id: this.parent.element.id + "rename"
            });
            break;
          case "Remove":
            items.push({
              prefixIcon: GRID_REMOVE + " " + ICON,
              tooltipText: this.parent.localeObj.getConstant("deleteReport"),
              click: this.actionClick.bind(this),
              id: this.parent.element.id + "remove"
            });
            break;
          case "Load":
            items.push({
              template: "<div><input class=" + GRID_LOAD + " id=" + this.parent.element.id + "_reportlist></input></div>",
              click: this.actionClick.bind(this),
              id: this.parent.element.id + "load"
            });
            break;
          case "Grid":
            {
              var toDisable = this.parent.displayOption.view === "Chart";
              items.push({
                prefixIcon: TOOLBAR_GRID + " " + ICON,
                tooltipText: this.parent.localeObj.getConstant("grid"),
                id: this.parent.element.id + "grid",
                cssClass: (toDisable ? MENU_DISABLE : "") + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
                click: this.menuItemClick.bind(this)
              });
            }
            break;
          case "Chart":
            {
              var validTypes = this.parent.displayOption.view === "Table";
              items.push({
                template: '<ul id="' + this.parent.element.id + 'chart_menu"></ul>',
                id: this.parent.element.id + "chartmenu",
                cssClass: (validTypes ? MENU_DISABLE : "") + (this.parent.cssClass ? " " + this.parent.cssClass : "")
              });
            }
            break;
          case "MDX":
            if (this.parent.dataType === "olap") {
              items.push({
                prefixIcon: GRID_MDX + " " + ICON,
                id: this.parent.element.id + "mdxQuery",
                click: this.actionClick.bind(this),
                tooltipText: this.parent.localeObj.getConstant("mdxQuery")
              });
            }
            break;
          case "Export":
            items.push({
              template: '<ul id="' + this.parent.element.id + 'export_menu"></ul>',
              id: this.parent.element.id + "exportmenu"
            });
            break;
          case "SubTotal":
            items.push({
              template: '<ul id="' + this.parent.element.id + 'subtotal_menu"></ul>',
              id: this.parent.element.id + "subtotalmenu"
            });
            break;
          case "GrandTotal":
            items.push({
              template: '<ul id="' + this.parent.element.id + 'grandtotal_menu"></ul>',
              id: this.parent.element.id + "grandtotalmenu"
            });
            break;
          case "ConditionalFormatting":
            items.push({
              prefixIcon: GRID_FORMATTING + " " + ICON,
              id: this.parent.element.id + "formatting",
              click: this.actionClick.bind(this),
              tooltipText: this.parent.localeObj.getConstant("toolbarFormatting")
            });
            break;
          case "NumberFormatting":
            items.push({
              prefixIcon: FORMATTING_TOOLBAR + " " + ICON,
              id: this.parent.element.id + "numberFormatting",
              click: this.actionClick.bind(this),
              tooltipText: this.parent.localeObj.getConstant("numberFormat")
            });
            break;
          case "Formatting":
            items.push({
              template: '<ul id="' + this.parent.element.id + 'formatting_menu"></ul>',
              id: this.parent.element.id + "formattingmenu"
            });
            break;
          case "FieldList":
            items.push({
              prefixIcon: TOOLBAR_FIELDLIST + " " + ICON,
              tooltipText: this.parent.localeObj.getConstant("fieldList"),
              click: this.actionClick.bind(this),
              align: "Right",
              id: this.parent.element.id + "fieldlist"
            });
            if (this.parent.element.querySelector(".e-toggle-field-list")) {
              this.parent.element.querySelector(".e-toggle-field-list").style.display = "none";
            }
            break;
          default:
            if (typeof item === "object") {
              items.push(item);
            }
        }
      }
      if (this.parent.showFieldList && toolbar.indexOf("FieldList") === -1 && select("#" + this.parent.element.id + "_PivotFieldList", this.parent.element) && select("#" + this.parent.element.id + "_PivotFieldList", this.parent.element).style.display === "none") {
        select("#" + this.parent.element.id + "_PivotFieldList", this.parent.element).style.display = "block";
      }
      var toolbarArgs = {
        customToolbar: items
      };
      this.parent.trigger(toolbarRender, toolbarArgs);
      return items;
    };
    Toolbar4.prototype.reportChange = function(args) {
      this.parent.actionObj.actionName = reportChange;
      this.isReportChange = true;
      if (this.parent.actionBeginMethod()) {
        args.cancel = true;
        return;
      }
      try {
        this.dropArgs = args;
        if (this.parent.isModified && this.currentReport !== "") {
          this.createConfirmDialog(this.parent.localeObj.getConstant("alert"), this.parent.localeObj.getConstant("newReportConfirm"));
        } else {
          this.reportLoad(args);
        }
      } catch (execption) {
        this.parent.actionFailureMethod(execption);
      }
    };
    Toolbar4.prototype.reportLoad = function(args) {
      var _this_1 = this;
      if (this.action !== "Save" && this.action !== "Rename" && this.action !== "New") {
        var loadArgs = {
          reportName: args.itemData.value
        };
        var actionInfo = {
          reportName: args.itemData.value
        };
        this.parent.actionObj.actionInfo = actionInfo;
        this.parent.trigger(loadReport, loadArgs, function(observedArgs) {
          _this_1.currentReport = observedArgs.reportName;
          _this_1.parent.isModified = false;
        });
      }
    };
    Toolbar4.prototype.saveReport = function(args) {
      if (this.currentReport && this.currentReport !== "" && args.item.id === this.parent.element.id + "save") {
        var saveArgs = {
          report: this.getCurrentReport(),
          reportName: this.currentReport
        };
        this.parent.actionObj.actionName = this.parent.getActionCompleteName();
        var actionInfo = {
          reportName: this.currentReport
        };
        this.parent.actionObj.actionInfo = actionInfo;
        this.parent.trigger(saveReport, saveArgs);
        if (this.parent.actionObj.actionName) {
          this.parent.actionCompleteMethod();
        }
        this.parent.isModified = false;
      } else if (this.currentReport === "" && (args.item.id === this.parent.element.id + "save" || args.item.id === this.parent.element.id + "saveas")) {
        this.parent.pivotCommon.errorDialog.createErrorDialog(this.parent.localeObj.getConstant("error"), this.parent.localeObj.getConstant("emptyReport"));
        return;
      } else {
        this.dialogShow(args, "saveAs");
      }
    };
    Toolbar4.prototype.mdxQueryDialog = function() {
      if (!select("#" + this.parent.element.id + "mdx-dialog", document)) {
        this.renderMDXDialog();
      }
      var mdxDialog = getInstance(select("#" + this.parent.element.id + "mdx-dialog", document), Dialog);
      var outerDiv = createElement("div", {
        className: MDX_QUERY
      });
      var textarea = createElement("textarea", {
        className: MDX_QUERY_CONTENT,
        attrs: {
          "readonly": "readonly",
          "aria-label": this.parent.localeObj.getConstant("mdxQuery")
        }
      });
      textarea.innerText = this.parent.olapEngineModule.getMDXQuery(this.parent.dataSourceSettings).trim();
      outerDiv.appendChild(textarea);
      mdxDialog.content = outerDiv;
      mdxDialog.show();
    };
    Toolbar4.prototype.dialogShow = function(args, action) {
      if (args) {
        var dialog = getInstance(select("#" + this.parent.element.id + "report-dialog", document), Dialog);
        dialog.header = args.item.tooltipText;
        var outerDiv = createElement("div", {
          className: GRID_REPORT_OUTER
        });
        var label = createElement("div", {
          className: GRID_REPORT_LABEL
        });
        label.innerText = this.parent.localeObj.getConstant("reportName");
        var input = createElement("input", {
          className: GRID_REPORT_INPUT + " " + INPUT,
          attrs: {
            "placeholder": this.parent.localeObj.getConstant("emptyReportName"),
            "value": action && action === "rename" ? this.currentReport : ""
          }
        });
        input.innerText = action && action === "rename" ? this.currentReport : "";
        input.setSelectionRange(input.textContent.length, input.textContent.length);
        outerDiv.appendChild(label);
        outerDiv.appendChild(input);
        dialog.content = outerDiv;
        dialog.refresh();
        dialog.show();
      }
    };
    Toolbar4.prototype.renameReport = function(args) {
      this.parent.trigger(toolbarClick, args);
      if (this.currentReport && this.currentReport !== "") {
        this.dialogShow(args, "rename");
      } else {
        this.parent.pivotCommon.errorDialog.createErrorDialog(this.parent.localeObj.getConstant("error"), this.parent.localeObj.getConstant("emptyReport"));
        return;
      }
    };
    Toolbar4.prototype.actionClick = function(args) {
      var actionName = args.item.id === this.parent.element.id + "new" ? addNewReport : args.item.id === this.parent.element.id + "save" ? saveCurrentReport : args.item.id === this.parent.element.id + "saveas" ? saveAsCurrentReport : args.item.id === this.parent.element.id + "rename" ? renameCurrentReport : args.item.id === this.parent.element.id + "remove" ? removeCurrentReport : args.item.id === this.parent.element.id + "load" ? loadReports : args.item.id === this.parent.element.id + "formatting" ? openConditionalFormatting : args.item.id === this.parent.element.id + "numberFormatting" ? openNumberFormatting : args.item.id === this.parent.element.id + "mdxQuery" ? MdxQuery : args.item.id === this.parent.element.id + "fieldlist" ? showFieldList : "";
      this.parent.actionObj.actionName = actionName;
      if (this.parent.actionBeginMethod()) {
        return;
      }
      try {
        switch (args.item.id) {
          case this.parent.element.id + "save":
          case this.parent.element.id + "saveas":
            this.saveReport(args);
            break;
          case this.parent.element.id + "remove":
            this.action = "Remove";
            if (this.currentReport && this.currentReport !== "") {
              this.createConfirmDialog(this.parent.localeObj.getConstant("alert"), this.parent.localeObj.getConstant("removeConfirm"));
            } else {
              this.parent.pivotCommon.errorDialog.createErrorDialog(this.parent.localeObj.getConstant("error"), this.parent.localeObj.getConstant("emptyReport"));
            }
            return;
          case this.parent.element.id + "rename":
            this.renameReport(args);
            break;
          case this.parent.element.id + "new":
            this.action = "New";
            this.newArgs = args;
            if (this.parent.isModified && this.currentReport && this.currentReport !== "") {
              this.createConfirmDialog(this.parent.localeObj.getConstant("alert"), this.parent.localeObj.getConstant("newReportConfirm"));
            } else {
              this.createNewReport(args);
            }
            break;
          case this.parent.element.id + "load":
            this.action = "Load";
            break;
          case this.parent.element.id + "fieldlist":
            if (this.parent.pivotFieldListModule && this.parent.pivotFieldListModule.dialogRenderer) {
              this.parent.pivotFieldListModule.dialogRenderer.onShowFieldList();
            }
            break;
          case this.parent.element.id + "formatting":
            if (this.parent.conditionalFormattingModule) {
              this.parent.conditionalFormattingModule.showConditionalFormattingDialog();
            }
            break;
          case this.parent.element.id + "mdxQuery":
            this.mdxQueryDialog();
            break;
          case this.parent.element.id + "numberFormatting":
            if (this.parent.numberFormattingModule) {
              this.parent.numberFormattingModule.showNumberFormattingDialog();
            }
            break;
        }
      } catch (execption) {
        this.parent.actionFailureMethod(execption);
      }
    };
    Toolbar4.prototype.renderDialog = function() {
      if (select("#" + this.parent.element.id + "report-dialog", this.parent.element) !== null) {
        remove(select("#" + this.parent.element.id + "report-dialog", this.parent.element));
      }
      var reportDialogElement = createElement("div", {
        id: this.parent.element.id + "report-dialog",
        className: GRID_REPORT_DIALOG
      });
      this.parent.element.appendChild(reportDialogElement);
      var dialog = new Dialog({
        animationSettings: {
          effect: "Fade"
        },
        allowDragging: true,
        position: {
          X: "center",
          Y: "center"
        },
        buttons: [{
          click: this.okBtnClick.bind(this),
          isFlat: false,
          buttonModel: {
            content: this.parent.localeObj.getConstant("ok"),
            isPrimary: true
          }
        }, {
          click: this.cancelBtnClick.bind(this),
          isFlat: false,
          buttonModel: {
            content: this.parent.localeObj.getConstant("cancel")
          }
        }],
        isModal: true,
        visible: false,
        showCloseIcon: true,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        width: "auto",
        height: "auto",
        zIndex: 1000001,
        closeOnEscape: true,
        target: document.body,
        cssClass: this.parent.cssClass
      });
      dialog.isStringTemplate = true;
      dialog.appendTo(reportDialogElement);
    };
    Toolbar4.prototype.renderMDXDialog = function() {
      if (select("#" + this.parent.element.id + "mdx-dialog", this.parent.element) !== null) {
        remove(select("#" + this.parent.element.id + "mdx-dialog", this.parent.element));
      }
      var mdxDialogElement = createElement("div", {
        id: this.parent.element.id + "mdx-dialog",
        className: GRID_MDX_DIALOG
      });
      this.parent.element.appendChild(mdxDialogElement);
      var mdxDialog = new Dialog({
        animationSettings: {
          effect: "Fade"
        },
        allowDragging: true,
        position: {
          X: "center",
          Y: "center"
        },
        buttons: [{
          click: this.copyMDXQuery.bind(this),
          isFlat: false,
          buttonModel: {
            content: this.parent.localeObj.getConstant("copy"),
            isPrimary: true
          }
        }],
        header: this.parent.localeObj.getConstant("mdxQuery"),
        isModal: true,
        visible: false,
        showCloseIcon: true,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        width: "auto",
        height: "auto",
        zIndex: 1000001,
        closeOnEscape: true,
        target: document.body,
        cssClass: this.parent.cssClass
      });
      mdxDialog.isStringTemplate = true;
      mdxDialog.appendTo(mdxDialogElement);
    };
    Toolbar4.prototype.copyMDXQuery = function() {
      var mdxDialog = getInstance(select("#" + this.parent.element.id + "mdx-dialog", document), Dialog);
      var textArea = mdxDialog.element.querySelector("." + MDX_QUERY_CONTENT);
      try {
        textArea.select();
        document.execCommand("copy");
      } catch (err) {
        window.alert("Oops, unable to copy");
      }
      return;
    };
    Toolbar4.prototype.okBtnClick = function() {
      var _this_1 = this;
      var dialog = getInstance(select("#" + this.parent.element.id + "report-dialog", document), Dialog);
      var reportInput = dialog.element.querySelector("." + GRID_REPORT_INPUT);
      if (reportInput && reportInput.value === "") {
        reportInput.focus();
        return;
      }
      if (!this.parent.localeObj) {
        this.parent = getInstance(select("#" + this.parent.element.id, document), PivotView);
      }
      if ((dialog.header === this.parent.localeObj.getConstant("save") || dialog.header === this.parent.localeObj.getConstant("saveAs")) && reportInput.value && reportInput.value !== "") {
        this.action = "Save";
        this.currentReport = reportInput.value;
        var isExist_1 = false;
        var _this_2 = this;
        var reports = {
          reportName: []
        };
        this.parent.trigger(fetchReport, reports, function(observedArgs) {
          for (var i2 = 0; i2 < observedArgs.reportName.length; i2++) {
            if (reportInput.value === observedArgs.reportName[i2]) {
              isExist_1 = true;
              break;
            }
          }
          if (isExist_1) {
            _this_2.createConfirmDialog(_this_2.parent.localeObj.getConstant("alert"), _this_2.parent.localeObj.getConstant("replaceConfirmBefore") + '"' + reportInput.value + '"' + _this_2.parent.localeObj.getConstant("replaceConfirmAfter"));
            return;
          }
          var saveArgs = {
            report: _this_2.getCurrentReport(),
            reportName: reportInput.value
          };
          var actionInfo2 = {
            reportName: reportInput.value
          };
          _this_1.parent.actionObj.actionInfo = actionInfo2;
          _this_2.parent.trigger(saveReport, saveArgs);
          _this_2.parent.isModified = false;
          _this_2.updateReportList();
          getInstance(select("#" + _this_1.parent.element.id + "report-dialog", document), Dialog).hide();
        });
      } else if (dialog.header === this.parent.localeObj.getConstant("new") && reportInput.value && reportInput.value !== "") {
        this.action = "New";
        this.currentReport = reportInput.value;
        var isExist_2 = false;
        var _this_3 = this;
        var reports_1 = {
          reportName: []
        };
        this.parent.trigger(fetchReport, reports_1, function(observedArgs) {
          for (var i2 = 0; i2 < observedArgs.reportName.length; i2++) {
            if (reportInput.value === reports_1.reportName[i2]) {
              isExist_2 = true;
              break;
            }
          }
          if (isExist_2) {
            _this_3.createConfirmDialog(_this_3.parent.localeObj.getConstant("alert"), _this_3.parent.localeObj.getConstant("replaceConfirmBefore") + '"' + reportInput.value + '"' + _this_3.parent.localeObj.getConstant("replaceConfirmAfter"));
            return;
          }
          _this_3.parent.trigger(newReport);
          var saveArgs = {
            report: _this_3.getCurrentReport(),
            reportName: reportInput.value
          };
          var actionInfo2 = {
            reportName: reportInput.value
          };
          _this_1.parent.actionObj.actionInfo = actionInfo2;
          _this_3.parent.trigger(saveReport, saveArgs);
          _this_3.parent.isModified = false;
          _this_3.updateReportList();
          getInstance(select("#" + _this_1.parent.element.id + "report-dialog", document), Dialog).hide();
        });
      } else if (dialog.header === this.parent.localeObj.getConstant("rename") && reportInput.value && reportInput.value !== "") {
        if (this.currentReport === reportInput.value) {
          dialog.hide();
          return;
        }
        this.action = "Rename";
        var isExist = false;
        this.renameText = reportInput.value;
        var reports = this.fetchReports();
        for (var i = 0; i < reports.reportName.length; i++) {
          if (reportInput.value === reports.reportName[i]) {
            isExist = true;
            break;
          }
        }
        if (isExist) {
          this.createConfirmDialog(this.parent.localeObj.getConstant("alert"), this.parent.localeObj.getConstant("replaceConfirmBefore") + '"' + reportInput.value + '"' + this.parent.localeObj.getConstant("replaceConfirmAfter"));
          return;
        }
        var renameArgs = {
          reportName: this.currentReport,
          rename: reportInput.value
        };
        var actionInfo = {
          reportName: {
            oldName: this.currentReport,
            newName: reportInput.value
          }
        };
        this.parent.actionObj.actionInfo = actionInfo;
        this.parent.trigger(renameReport, renameArgs);
        this.currentReport = reportInput.value;
        this.updateReportList();
        dialog.hide();
      }
      this.parent.actionObj.actionName = this.parent.getActionCompleteName();
      if (this.parent.actionObj.actionName) {
        this.parent.actionCompleteMethod();
      }
    };
    Toolbar4.prototype.createNewReport = function(args) {
      this.dialogShow(args);
    };
    Toolbar4.prototype.cancelBtnClick = function() {
      var dialog = getInstance(select("#" + this.parent.element.id + "report-dialog", document), Dialog);
      dialog.hide();
    };
    Toolbar4.prototype.createConfirmDialog = function(title, description) {
      if (document.getElementById(this.parent.element.id + "_ConfirmDialog")) {
        remove(document.getElementById(this.parent.element.id + "_ConfirmDialog").parentElement);
      }
      var errorDialog = createElement("div", {
        id: this.parent.element.id + "_ConfirmDialog",
        className: ERROR_DIALOG_CLASS
      });
      this.parent.element.appendChild(errorDialog);
      var confirmPopUp = new Dialog({
        animationSettings: {
          effect: "Fade"
        },
        allowDragging: true,
        showCloseIcon: true,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        header: title,
        content: description,
        isModal: true,
        visible: true,
        closeOnEscape: true,
        target: document.body,
        cssClass: this.parent.cssClass,
        width: "auto",
        height: "auto",
        position: {
          X: "center",
          Y: "center"
        },
        buttons: [{
          isFlat: false,
          buttonModel: {
            content: this.parent.localeObj.getConstant("yes"),
            isPrimary: true,
            cssClass: OK_BUTTON_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : "")
          },
          click: this.okButtonClick.bind(this)
        }, {
          isFlat: false,
          buttonModel: {
            content: this.parent.localeObj.getConstant("no"),
            cssClass: CANCEL_BUTTON_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : "")
          },
          click: this.cancelButtonClick.bind(this)
        }]
      });
      confirmPopUp.isStringTemplate = true;
      confirmPopUp.appendTo(errorDialog);
      confirmPopUp.element.querySelector(".e-dlg-header").innerText = this.parent.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(title) : title;
    };
    Toolbar4.prototype.okButtonClick = function() {
      var _this_1 = this;
      var dialog = getInstance(select("#" + this.parent.element.id + "report-dialog", document), Dialog);
      if (this.action === "Remove") {
        var removeArgs = {
          reportName: this.currentReport
        };
        var actionInfo = {
          reportName: this.currentReport
        };
        this.parent.actionObj.actionInfo = actionInfo;
        this.parent.trigger(removeReport, removeArgs);
        var reports = this.fetchReports();
        if (reports.reportName && reports.reportName.length > 0) {
          var loadArgs = {
            reportName: reports.reportName[reports.reportName.length - 1]
          };
          this.parent.trigger(loadReport, loadArgs, function(observedArgs) {
            _this_1.currentReport = observedArgs.reportName;
            _this_1.parent.isModified = false;
          });
          this.currentReport = reports.reportName[reports.reportName.length - 1];
        } else {
          this.currentReport = "";
          this.parent.isModified = false;
          this.action = "";
        }
        this.updateReportList();
        this.parent.actionObj.actionName = reportRemoved;
        if (this.parent.actionObj.actionName) {
          this.parent.actionCompleteMethod();
        }
      } else if (this.action === "New" || this.action !== "Save" && this.action !== "Rename" && this.action !== "New") {
        if (this.currentReport && this.currentReport !== "" && this.parent.isModified) {
          var saveArgs = {
            report: this.getCurrentReport(),
            reportName: this.currentReport
          };
          var actionInfo = {
            reportName: this.currentReport
          };
          this.parent.actionObj.actionInfo = actionInfo;
          this.parent.actionObj.actionName = reportSaved;
          if (this.parent.actionObj.actionName) {
            this.parent.actionCompleteMethod();
          }
          this.parent.trigger(saveReport, saveArgs);
          this.parent.isModified = false;
          if (this.action === "New") {
            this.parent.actionObj.actionName = addNewReport;
            this.createNewReport(this.newArgs);
          } else {
            this.parent.actionObj.actionName = reportChange;
            this.reportLoad(this.dropArgs);
          }
        } else if (this.action === "New") {
          this.parent.trigger(newReport);
          var saveArgs = {
            report: this.getCurrentReport(),
            reportName: this.currentReport
          };
          this.parent.trigger(saveReport, saveArgs);
          this.parent.isModified = false;
          this.updateReportList();
          dialog.hide();
        }
      } else if (this.action === "Save") {
        var saveArgs = {
          report: this.getCurrentReport(),
          reportName: this.currentReport
        };
        this.parent.trigger(saveReport, saveArgs);
        this.parent.isModified = false;
        this.updateReportList();
        dialog.hide();
      } else if (this.action === "Rename") {
        var renameArgs = {
          reportName: this.currentReport,
          rename: this.renameText,
          isReportExists: true
        };
        this.parent.trigger(renameReport, renameArgs);
        this.currentReport = this.renameText;
        this.parent.isModified = false;
        this.updateReportList();
        dialog.hide();
      }
      var confirmPopUp = getInstance(select("#" + this.parent.element.id + "_ConfirmDialog", document), Dialog);
      confirmPopUp.hide();
    };
    Toolbar4.prototype.cancelButtonClick = function() {
      var dialog = getInstance(select("#" + this.parent.element.id + "report-dialog", document), Dialog);
      if (this.action === "New") {
        if (this.parent.isModified) {
          this.createNewReport(this.newArgs);
        } else {
          dialog.hide();
        }
      } else if (this.action === "Save") {
        if (select("#" + this.parent.element.id + "_reportlist", this.parent.element)) {
          var reportList = getInstance(select("#" + this.parent.element.id + "_reportlist", this.parent.element), DropDownList);
          this.currentReport = reportList.value;
        }
        dialog.hide();
      } else if (this.action === "Rename") {
        dialog.hide();
      } else if (this.dropArgs && this.action !== "Remove") {
        this.reportLoad(this.dropArgs);
      }
      var confirmPopUp = getInstance(select("#" + this.parent.element.id + "_ConfirmDialog", document), Dialog);
      confirmPopUp.hide();
    };
    Toolbar4.prototype.createChartMenu = function() {
      var _this_1 = this;
      if (select("#" + this.parent.element.id + "chart_menu", this.parent.element)) {
        var chartMenuElement = select("#" + this.parent.element.id + "chart_menu", this.parent.element);
        var menuItems = [];
        var types = this.getValidChartType();
        for (var i = 0; i < types.length && i < 7; i++) {
          var type = types[i];
          menuItems.push({
            text: this.parent.localeObj.getConstant(type.toLowerCase()),
            id: this.parent.element.id + "_" + type
          });
        }
        if (menuItems.length === 7) {
          menuItems.splice(6);
          menuItems.push({
            text: this.parent.localeObj.getConstant("MoreOption"),
            id: this.parent.element.id + "_ChartMoreOption"
          });
        }
        var toDisable = menuItems.length <= 0 || this.parent.displayOption.view === "Table";
        menuItems.push({
          separator: true
        });
        menuItems.push({
          text: this.parent.localeObj.getConstant("multipleAxes"),
          id: this.parent.element.id + "_multipleAxes"
        });
        menuItems.push({
          text: this.parent.localeObj.getConstant("showLegend"),
          id: this.parent.element.id + "_showLegend"
        });
        var menu = [{
          iconCss: TOOLBAR_CHART + " " + ICON,
          items: toDisable ? [] : menuItems
        }];
        var chartMenu = chartMenuElement ? getInstance(chartMenuElement, Menu) : null;
        if (chartMenu && !chartMenu.isDestroyed) {
          chartMenu.destroy();
          chartMenu = null;
        }
        chartMenu = new Menu({
          items: menu,
          enableRtl: this.parent.enableRtl,
          locale: this.parent.locale,
          enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
          cssClass: TOOLBAR_MENU + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
          select: this.menuItemClick.bind(this),
          beforeOpen: this.whitespaceRemove.bind(this),
          onClose: function() {
            _this_1.focusToolBar();
          },
          beforeItemRender: this.multipleAxesCheckbox.bind(this)
        });
        chartMenu.isStringTemplate = true;
        chartMenu.appendTo(chartMenuElement);
      }
    };
    Toolbar4.prototype.create = function() {
      var _this_1 = this;
      if (select("#" + this.parent.element.id + "chart_menu", this.parent.element)) {
        this.createChartMenu();
      }
      if (select("#" + this.parent.element.id + "export_menu", this.parent.element)) {
        var exportMenuElement = select("#" + this.parent.element.id + "export_menu", this.parent.element);
        var menu = [{
          iconCss: GRID_EXPORT + " " + ICON,
          items: [{
            text: this.parent.localeObj.getConstant("pdf"),
            iconCss: GRID_PDF_EXPORT + " " + ICON,
            id: this.parent.element.id + "pdf"
          }, {
            text: this.parent.localeObj.getConstant("excel"),
            iconCss: GRID_EXCEL_EXPORT + " " + ICON,
            id: this.parent.element.id + "excel"
          }, {
            text: this.parent.localeObj.getConstant("csv"),
            iconCss: GRID_CSV_EXPORT + " " + ICON,
            id: this.parent.element.id + "csv"
          }, {
            text: this.parent.localeObj.getConstant("png"),
            iconCss: GRID_PNG_EXPORT + " " + ICON,
            id: this.parent.element.id + "png"
          }, {
            text: this.parent.localeObj.getConstant("jpeg"),
            iconCss: GRID_JPEG_EXPORT + " " + ICON,
            id: this.parent.element.id + "jpeg"
          }, {
            text: this.parent.localeObj.getConstant("svg"),
            iconCss: GRID_SVG_EXPORT + " " + ICON,
            id: this.parent.element.id + "svg"
          }]
        }];
        var exportMenu = new Menu({
          items: menu,
          enableRtl: this.parent.enableRtl,
          locale: this.parent.locale,
          enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
          cssClass: TOOLBAR_MENU + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
          select: this.menuItemClick.bind(this),
          beforeOpen: this.updateExportMenu.bind(this),
          onClose: function() {
            _this_1.focusToolBar();
          }
        });
        exportMenu.isStringTemplate = true;
        exportMenu.appendTo(exportMenuElement);
      }
      if (select("#" + this.parent.element.id + "subtotal_menu", this.parent.element)) {
        var subTotalMenuElement = select("#" + this.parent.element.id + "subtotal_menu", this.parent.element);
        var menu = [{
          iconCss: GRID_SUB_TOTAL + " " + ICON,
          items: [{
            text: this.parent.localeObj.getConstant("showSubTotals"),
            id: this.parent.element.id + "subtotal",
            iconCss: PIVOT_SELECT_ICON + " " + ICON
          }, {
            text: this.parent.localeObj.getConstant("doNotShowSubTotals"),
            id: this.parent.element.id + "notsubtotal",
            iconCss: PIVOT_SELECT_ICON + " " + ICON
          }, {
            text: this.parent.localeObj.getConstant("showSubTotalsRowsOnly"),
            id: this.parent.element.id + "subtotalrow",
            iconCss: PIVOT_SELECT_ICON + " " + ICON
          }, {
            text: this.parent.localeObj.getConstant("showSubTotalsColumnsOnly"),
            id: this.parent.element.id + "subtotalcolumn",
            iconCss: PIVOT_SELECT_ICON + " " + ICON
          }, {
            separator: true
          }, {
            text: this.parent.localeObj.getConstant("subTotalPosition"),
            id: this.parent.element.id + "subtotalpositions",
            iconCss: PIVOT_DISABLE_ICON + " " + ICON,
            items: [{
              text: this.parent.localeObj.getConstant("auto"),
              id: this.parent.element.id + "sub-none-position",
              iconCss: PIVOT_SELECT_ICON + " " + ICON
            }, {
              text: this.parent.localeObj.getConstant("top"),
              id: this.parent.element.id + "sub-top-position",
              iconCss: PIVOT_SELECT_ICON + " " + ICON
            }, {
              text: this.parent.localeObj.getConstant("bottom"),
              id: this.parent.element.id + "sub-bottom-position",
              iconCss: PIVOT_SELECT_ICON + " " + ICON
            }]
          }]
        }];
        var subTotalMenu = new Menu({
          items: menu,
          enableRtl: this.parent.enableRtl,
          locale: this.parent.locale,
          enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
          cssClass: TOOLBAR_MENU + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
          select: this.menuItemClick.bind(this),
          beforeOpen: this.updateSubtotalSelection.bind(this),
          onClose: function() {
            _this_1.focusToolBar();
          }
        });
        subTotalMenu.isStringTemplate = true;
        subTotalMenu.appendTo(subTotalMenuElement);
      }
      if (select("#" + this.parent.element.id + "grandtotal_menu", this.parent.element)) {
        var grandTotalMenuElement = select("#" + this.parent.element.id + "grandtotal_menu", this.parent.element);
        var menu = [{
          iconCss: GRID_GRAND_TOTAL + " " + ICON,
          items: [{
            text: this.parent.localeObj.getConstant("showGrandTotals"),
            id: this.parent.element.id + "grandtotal",
            iconCss: PIVOT_SELECT_ICON + " " + ICON
          }, {
            text: this.parent.localeObj.getConstant("doNotShowGrandTotals"),
            id: this.parent.element.id + "notgrandtotal",
            iconCss: PIVOT_SELECT_ICON + " " + ICON
          }, {
            text: this.parent.localeObj.getConstant("showGrandTotalsRowsOnly"),
            id: this.parent.element.id + "grandtotalrow",
            iconCss: PIVOT_SELECT_ICON + " " + ICON
          }, {
            text: this.parent.localeObj.getConstant("showGrandTotalsColumnsOnly"),
            id: this.parent.element.id + "grandtotalcolumn",
            iconCss: PIVOT_SELECT_ICON + " " + ICON
          }, {
            separator: true
          }, {
            text: this.parent.localeObj.getConstant("grandTotalPosition"),
            id: this.parent.element.id + "grandtotalpositions",
            iconCss: PIVOT_DISABLE_ICON + " " + ICON,
            items: [{
              text: this.parent.localeObj.getConstant("top"),
              id: this.parent.element.id + "top-position",
              iconCss: PIVOT_SELECT_ICON + " " + ICON
            }, {
              text: this.parent.localeObj.getConstant("bottom"),
              id: this.parent.element.id + "bottom-position",
              iconCss: PIVOT_SELECT_ICON + " " + ICON
            }]
          }]
        }];
        var grandTotalMenu = new Menu({
          items: menu,
          enableRtl: this.parent.enableRtl,
          locale: this.parent.locale,
          enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
          cssClass: TOOLBAR_MENU + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
          select: this.menuItemClick.bind(this),
          beforeOpen: this.updateGrandtotalSelection.bind(this),
          onClose: function() {
            _this_1.focusToolBar();
          }
        });
        grandTotalMenu.isStringTemplate = true;
        grandTotalMenu.appendTo(grandTotalMenuElement);
      }
      if (select("#" + this.parent.element.id + "formatting_menu", this.parent.element)) {
        var formattingMenuElement = select("#" + this.parent.element.id + "formatting_menu", this.parent.element);
        var menu = [{
          iconCss: FORMATTING_MENU + " " + ICON,
          items: [{
            text: this.parent.localeObj.getConstant("numberFormatMenu"),
            iconCss: NUMBER_FORMATTING_MENU + " " + ICON,
            id: this.parent.element.id + "numberFormattingMenu"
          }, {
            text: this.parent.localeObj.getConstant("conditionalFormattingMenu"),
            iconCss: CONDITIONAL_FORMATTING_MENU + " " + ICON,
            id: this.parent.element.id + "conditionalFormattingMenu"
          }]
        }];
        var formattingMenu = new Menu({
          items: menu,
          enableRtl: this.parent.enableRtl,
          locale: this.parent.locale,
          enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
          cssClass: TOOLBAR_MENU + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
          select: this.menuItemClick.bind(this)
        });
        formattingMenu.isStringTemplate = true;
        formattingMenu.appendTo(formattingMenuElement);
      }
      var saveArgs = {
        report: this.parent.getPersistData(),
        reportName: this.parent.localeObj.getConstant("defaultReport")
      };
      this.currentReport = this.parent.localeObj.getConstant("defaultReport");
      this.parent.trigger(saveReport, saveArgs);
      if (select("#" + this.parent.element.id + "_reportlist", this.parent.element)) {
        var reportListElement = select("#" + this.parent.element.id + "_reportlist", this.parent.element);
        var reports = this.fetchReports();
        var reportList = new DropDownList({
          dataSource: reports.reportName,
          width: "150px",
          popupHeight: "200px",
          placeholder: this.currentReport === "" ? this.parent.localeObj.getConstant("reportList") : "",
          enableRtl: this.parent.enableRtl,
          locale: this.parent.locale,
          cssClass: REPORT_LIST_DROP + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
          select: this.reportChange.bind(this),
          value: this.currentReport
        });
        reportList.isStringTemplate = true;
        reportList.appendTo(reportListElement);
      }
      this.updateItemElements();
    };
    Toolbar4.prototype.getCurrentReport = function() {
      var reportStr = this.parent.getPersistData();
      if (this.parent.dataSourceSettings.type === "CSV" && this.parent.dataSourceSettings.mode !== "Server") {
        var reportSettings = JSON.parse(reportStr);
        reportSettings.dataSourceSettings.dataSource.splice(0, 0, this.parent.engineModule.fields);
        reportStr = JSON.stringify(reportSettings);
      }
      return reportStr;
    };
    Toolbar4.prototype.updateItemElements = function() {
      var itemElements = [].slice.call(this.toolbar.element.querySelectorAll(".e-toolbar-item"));
      for (var _i = 0, itemElements_1 = itemElements; _i < itemElements_1.length; _i++) {
        var element = itemElements_1[_i];
        if (element.querySelector("button")) {
          element.querySelector("button").setAttribute("tabindex", "0");
        } else if (element.querySelector(".e-menu.e-menu-parent")) {
          element.querySelector(".e-menu.e-menu-parent").setAttribute("tabindex", "-1");
          if (element.querySelector(".e-menu-item.e-menu-caret-icon")) {
            element.querySelector(".e-menu-item.e-menu-caret-icon").setAttribute("tabindex", "0");
          }
        }
      }
    };
    Toolbar4.prototype.whitespaceRemove = function(args) {
      var separator = args.element.querySelector(".e-separator");
      if (separator) {
        separator.style.margin = "0px";
      }
    };
    Toolbar4.prototype.multipleAxesCheckbox = function(args) {
      var _this_1 = this;
      if (this.parent.element.id + "_multipleAxes" === args.element.id) {
        var inputCheckbox = createElement("input", {
          id: this.parent.element.id + "_checkBox"
        });
        inputCheckbox.style.display = "none";
        this.parent.element.appendChild(inputCheckbox);
        var checkbox = new CheckBox({
          label: this.parent.localeObj.getConstant("multipleAxes"),
          cssClass: "e-multipleAxes" + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
          checked: this.parent.chartSettings.enableMultipleAxis,
          change: function() {
            document.getElementById(_this_1.parent.element.id + "_multipleAxes").click();
          },
          enableRtl: this.parent.enableRtl,
          locale: this.parent.locale,
          enableHtmlSanitizer: this.parent.enableHtmlSanitizer
        });
        args.element.innerText = "";
        checkbox.appendTo(inputCheckbox);
        if (["Pie", "Funnel", "Pyramid", "Doughnut", "Pareto"].indexOf(this.parent.chartSettings.chartSeries.type) > -1 && !args.element.classList.contains(MENU_DISABLE)) {
          args.element.classList.add(MENU_DISABLE);
          checkbox.disabled = true;
        } else if (["Pie", "Funnel", "Pyramid", "Doughnut", "Pareto"].indexOf(this.parent.chartSettings.chartSeries.type) < 0 && args.element.classList.contains(MENU_DISABLE)) {
          args.element.classList.remove(MENU_DISABLE);
          checkbox.disabled = false;
        }
        var checkboxObj = this.parent.element.querySelector("." + CHECKBOX_CONTAINER + ".e-multipleAxes");
        args.element.appendChild(checkboxObj);
      } else if (this.parent.element.id + "_showLegend" === args.element.id) {
        var inputCheckbox = createElement("input", {
          id: this.parent.element.id + "_showLegendCheckBox"
        });
        inputCheckbox.style.display = "none";
        this.parent.element.appendChild(inputCheckbox);
        var checkbox = new CheckBox({
          label: this.parent.localeObj.getConstant("showLegend"),
          checked: this.getLableState(),
          cssClass: "e-showLegend" + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
          change: function() {
            document.getElementById(_this_1.parent.element.id + "_showLegend").click();
          },
          enableRtl: this.parent.enableRtl,
          locale: this.parent.locale,
          enableHtmlSanitizer: this.parent.enableHtmlSanitizer
        });
        args.element.innerText = "";
        checkbox.appendTo(inputCheckbox);
        var checkboxObj = this.parent.element.querySelector("." + CHECKBOX_CONTAINER + ".e-showLegend");
        args.element.appendChild(checkboxObj);
      }
    };
    Toolbar4.prototype.getLableState = function() {
      var chartSettings = JSON.parse(this.parent.getChartSettings()).chartSettings;
      if (chartSettings && chartSettings.legendSettings && chartSettings.legendSettings.visible !== void 0) {
        this.showLableState = chartSettings.legendSettings.visible;
      } else {
        this.showLableState = true;
      }
      return this.showLableState;
    };
    Toolbar4.prototype.getAllChartItems = function() {
      return ["Line", "Column", "Area", "Bar", "StackingColumn", "StackingArea", "StackingBar", "StackingLine", "StepLine", "StepArea", "SplineArea", "Scatter", "Spline", "StackingColumn100", "StackingBar100", "StackingArea100", "StackingLine100", "Bubble", "Pareto", "Polar", "Radar", "Pie", "Pyramid", "Funnel", "Doughnut"];
    };
    Toolbar4.prototype.updateExportMenu = function(args) {
      var items = [].slice.call(args.element.querySelectorAll("li"));
      if (this.parent.currentView === "Table") {
        addClass(items.slice(3), MENU_HIDE);
        removeClass(items.slice(1, 3), MENU_HIDE);
      } else {
        addClass(items.slice(1, 3), MENU_HIDE);
        removeClass(items.slice(3), MENU_HIDE);
      }
    };
    Toolbar4.prototype.updateSubtotalSelection = function(args) {
      if (!(args.parentItem.id === this.parent.element.id + "subtotalpositions")) {
        if (!select("#" + this.parent.element.id + "subtotal ." + PIVOT_SELECT_ICON, args.element).classList.contains(PIVOT_DISABLE_ICON)) {
          select("#" + this.parent.element.id + "subtotal ." + PIVOT_SELECT_ICON, args.element).classList.add(PIVOT_DISABLE_ICON);
        }
        if (!select("#" + this.parent.element.id + "notsubtotal ." + PIVOT_SELECT_ICON, args.element).classList.contains(PIVOT_DISABLE_ICON)) {
          select("#" + this.parent.element.id + "notsubtotal ." + PIVOT_SELECT_ICON, args.element).classList.add(PIVOT_DISABLE_ICON);
        }
        if (!select("#" + this.parent.element.id + "subtotalrow ." + PIVOT_SELECT_ICON, args.element).classList.contains(PIVOT_DISABLE_ICON)) {
          select("#" + this.parent.element.id + "subtotalrow ." + PIVOT_SELECT_ICON, args.element).classList.add(PIVOT_DISABLE_ICON);
        }
        if (!select("#" + this.parent.element.id + "subtotalcolumn ." + PIVOT_SELECT_ICON, args.element).classList.contains(PIVOT_DISABLE_ICON)) {
          select("#" + this.parent.element.id + "subtotalcolumn ." + PIVOT_SELECT_ICON, args.element).classList.add(PIVOT_DISABLE_ICON);
        }
        if (this.parent.dataSourceSettings.showSubTotals && this.parent.dataSourceSettings.showRowSubTotals && !this.parent.dataSourceSettings.showColumnSubTotals) {
          select("#" + this.parent.element.id + "subtotalrow ." + PIVOT_SELECT_ICON, args.element).classList.remove(PIVOT_DISABLE_ICON);
        } else if (this.parent.dataSourceSettings.showSubTotals && !this.parent.dataSourceSettings.showRowSubTotals && this.parent.dataSourceSettings.showColumnSubTotals) {
          select("#" + this.parent.element.id + "subtotalcolumn ." + PIVOT_SELECT_ICON, args.element).classList.remove(PIVOT_DISABLE_ICON);
        } else if (this.parent.dataSourceSettings.showSubTotals && this.parent.dataSourceSettings.showRowSubTotals && this.parent.dataSourceSettings.showColumnSubTotals) {
          select("#" + this.parent.element.id + "subtotal ." + PIVOT_SELECT_ICON, args.element).classList.remove(PIVOT_DISABLE_ICON);
        } else if (!this.parent.dataSourceSettings.showSubTotals || !this.parent.dataSourceSettings.showRowSubTotals && !this.parent.dataSourceSettings.showColumnSubTotals) {
          select("#" + this.parent.element.id + "notsubtotal ." + PIVOT_SELECT_ICON, args.element).classList.remove(PIVOT_DISABLE_ICON);
        }
      } else {
        select("#" + this.parent.element.id + "sub-none-position ." + PIVOT_SELECT_ICON, args.element).classList.add(PIVOT_DISABLE_ICON);
        if (this.parent.dataSourceSettings.subTotalsPosition === "Auto") {
          select("#" + this.parent.element.id + "sub-none-position ." + PIVOT_SELECT_ICON, args.element).classList.remove(PIVOT_DISABLE_ICON);
        }
        select("#" + this.parent.element.id + "sub-top-position ." + PIVOT_SELECT_ICON, args.element).classList.add(PIVOT_DISABLE_ICON);
        if (this.parent.dataSourceSettings.subTotalsPosition === "Top") {
          select("#" + this.parent.element.id + "sub-top-position ." + PIVOT_SELECT_ICON, args.element).classList.remove(PIVOT_DISABLE_ICON);
        }
        select("#" + this.parent.element.id + "sub-bottom-position ." + PIVOT_SELECT_ICON, args.element).classList.add(PIVOT_DISABLE_ICON);
        if (this.parent.dataSourceSettings.subTotalsPosition === "Bottom") {
          select("#" + this.parent.element.id + "sub-bottom-position ." + PIVOT_SELECT_ICON, args.element).classList.remove(PIVOT_DISABLE_ICON);
        }
      }
    };
    Toolbar4.prototype.updateGrandtotalSelection = function(args) {
      if (!(args.parentItem.id === this.parent.element.id + "grandtotalpositions")) {
        if (!select("#" + this.parent.element.id + "grandtotal ." + PIVOT_SELECT_ICON, args.element).classList.contains(PIVOT_DISABLE_ICON)) {
          select("#" + this.parent.element.id + "grandtotal ." + PIVOT_SELECT_ICON, args.element).classList.add(PIVOT_DISABLE_ICON);
        }
        if (!select("#" + this.parent.element.id + "notgrandtotal ." + PIVOT_SELECT_ICON, args.element).classList.contains(PIVOT_DISABLE_ICON)) {
          select("#" + this.parent.element.id + "notgrandtotal ." + PIVOT_SELECT_ICON, args.element).classList.add(PIVOT_DISABLE_ICON);
        }
        if (!select("#" + this.parent.element.id + "grandtotalrow ." + PIVOT_SELECT_ICON, args.element).classList.contains(PIVOT_DISABLE_ICON)) {
          select("#" + this.parent.element.id + "grandtotalrow ." + PIVOT_SELECT_ICON, args.element).classList.add(PIVOT_DISABLE_ICON);
        }
        if (!select("#" + this.parent.element.id + "grandtotalcolumn ." + PIVOT_SELECT_ICON, args.element).classList.contains(PIVOT_DISABLE_ICON)) {
          select("#" + this.parent.element.id + "grandtotalcolumn ." + PIVOT_SELECT_ICON, args.element).classList.add(PIVOT_DISABLE_ICON);
        }
        if (this.parent.dataSourceSettings.showGrandTotals && this.parent.dataSourceSettings.showRowGrandTotals && !this.parent.dataSourceSettings.showColumnGrandTotals) {
          select("#" + this.parent.element.id + "grandtotalrow ." + PIVOT_SELECT_ICON, args.element).classList.remove(PIVOT_DISABLE_ICON);
        } else if (this.parent.dataSourceSettings.showGrandTotals && !this.parent.dataSourceSettings.showRowGrandTotals && this.parent.dataSourceSettings.showColumnGrandTotals) {
          select("#" + this.parent.element.id + "grandtotalcolumn ." + PIVOT_SELECT_ICON, args.element).classList.remove(PIVOT_DISABLE_ICON);
        } else if (this.parent.dataSourceSettings.showGrandTotals && this.parent.dataSourceSettings.showRowGrandTotals && this.parent.dataSourceSettings.showColumnGrandTotals) {
          select("#" + this.parent.element.id + "grandtotal ." + PIVOT_SELECT_ICON, args.element).classList.remove(PIVOT_DISABLE_ICON);
        } else if (!this.parent.dataSourceSettings.showGrandTotals || !this.parent.dataSourceSettings.showRowGrandTotals && !this.parent.dataSourceSettings.showColumnGrandTotals) {
          select("#" + this.parent.element.id + "notgrandtotal ." + PIVOT_SELECT_ICON, args.element).classList.remove(PIVOT_DISABLE_ICON);
        }
      } else {
        select("#" + this.parent.element.id + "top-position ." + PIVOT_SELECT_ICON, args.element).classList.add(PIVOT_DISABLE_ICON);
        if (this.parent.dataSourceSettings.grandTotalsPosition === "Top") {
          select("#" + this.parent.element.id + "top-position ." + PIVOT_SELECT_ICON, args.element).classList.remove(PIVOT_DISABLE_ICON);
        }
        select("#" + this.parent.element.id + "bottom-position ." + PIVOT_SELECT_ICON, args.element).classList.add(PIVOT_DISABLE_ICON);
        if (this.parent.dataSourceSettings.grandTotalsPosition === "Bottom") {
          select("#" + this.parent.element.id + "bottom-position ." + PIVOT_SELECT_ICON, args.element).classList.remove(PIVOT_DISABLE_ICON);
        }
      }
    };
    Toolbar4.prototype.updateReportList = function() {
      if (select("#" + this.parent.element.id + "_reportlist", this.parent.element)) {
        var reports = this.fetchReports();
        var reportList = getInstance(select("#" + this.parent.element.id + "_reportlist", this.parent.element), DropDownList);
        reportList.dataSource = reports.reportName;
        if (this.currentReport === "" && reportList.dataSource.length > 0) {
          reportList.value = reportList.dataSource[reportList.dataSource.length - 1];
          reportList.text = reportList.dataSource[reportList.dataSource.length - 1];
          this.currentReport = reportList.dataSource[reportList.dataSource.length - 1];
        } else {
          reportList.value = this.currentReport;
          reportList.text = this.currentReport;
        }
        reportList.refresh();
      }
    };
    Toolbar4.prototype.menuItemClick = function(args) {
      var _this_1 = this;
      var exportArgs = {};
      var type;
      var actionName = args.item.id === this.parent.element.id + "grid" ? tableView : args.item.id === this.parent.element.id + "_Column" ? chartView : args.item.id === this.parent.element.id + "_Bar" ? chartView : args.item.id === this.parent.element.id + "_Line" ? chartView : args.item.id === this.parent.element.id + "_Area" ? chartView : args.item.id === this.parent.element.id + "_Scatter" ? chartView : args.item.id === this.parent.element.id + "_Polar" ? chartView : args.item.id === this.parent.element.id + "_ChartMoreOption" ? chartView : args.item.id === this.parent.element.id + "_multipleAxes" ? multipleAxis : args.item.id === this.parent.element.id + "_showLegend" ? showLegend : args.item.id === this.parent.element.id + "pdf" ? pdfExport : args.item.id === this.parent.element.id + "png" ? pngExport : args.item.id === this.parent.element.id + "excel" ? excelExport : args.item.id === this.parent.element.id + "csv" ? csvExport : args.item.id === this.parent.element.id + "jpeg" ? jpegExport : args.item.id === this.parent.element.id + "svg" ? svgExport : args.item.id === this.parent.element.id + "notsubtotal" ? hideSubTotals : args.item.id === this.parent.element.id + "subtotalrow" ? subTotalsRow : args.item.id === this.parent.element.id + "subtotalcolumn" ? subTotalsColumn : args.item.id === this.parent.element.id + "subtotal" ? showSubTotals : args.item.id === this.parent.element.id + "notgrandtotal" ? hideGrandTotals : args.item.id === this.parent.element.id + "grandtotalrow" ? grandTotalsRow : args.item.id === this.parent.element.id + "grandtotalcolumn" ? grandTotalsColumn : args.item.id === this.parent.element.id + "grandtotal" ? showGrandTotals : args.item.id === this.parent.element.id + "numberFormattingMenu" ? numberFormattingMenu : args.item.id === this.parent.element.id + "conditionalFormattingMenu" ? conditionalFormattingMenu : "";
      this.parent.actionObj.actionName = actionName;
      if (this.parent.actionBeginMethod()) {
        return;
      }
      if (this.getAllChartItems().indexOf(args.item.id.split(this.parent.element.id + "_")[1]) > -1 || args.item.id.split(this.parent.element.id + "_")[1] === "ChartMoreOption" || args.item.id.split(this.parent.element.id + "_")[1] === "multipleAxes" || args.item.id.split(this.parent.element.id + "_")[1] === "showLegend") {
        type = args.item.id.split(this.parent.element.id + "_")[1];
      }
      try {
        switch (args.item.id) {
          case this.parent.element.id + "grid":
            if (this.parent.grid && this.parent.chart) {
              this.parent.grid.element.style.display = "";
              this.parent.chart.element.style.display = "none";
              if (this.parent.chartSettings.enableMultipleAxis && this.parent.chartSettings.enableScrollOnMultiAxis) {
                this.parent.element.querySelector(".e-pivotchart").style.display = "none";
              }
              this.parent.currentView = "Table";
              this.parent.setProperties({
                displayOption: {
                  primary: "Table"
                }
              }, true);
              if (this.parent.showGroupingBar && this.parent.groupingBarModule) {
                if (this.parent.element.querySelector(".e-pivot-grouping-bar")) {
                  this.parent.element.querySelector(".e-pivot-grouping-bar").style.display = "";
                }
                if (this.parent.element.querySelector(".e-chart-grouping-bar")) {
                  this.parent.element.querySelector(".e-chart-grouping-bar").style.display = "none";
                }
              }
              var actionInfo = {
                toolbarInfo: {
                  displayOption: this.parent.displayOption,
                  gridSettings: this.parent.gridSettings
                }
              };
              this.parent.actionObj.actionInfo = actionInfo;
              this.parent.layoutRefresh();
            }
            break;
          case this.parent.element.id + "pdf":
            if (this.parent.currentView === "Table") {
              this.parent.pdfExport({
                fileName: "Export.pdf"
              }, false, void 0, false);
            } else {
              this.parent.chartExport("PDF", {
                fileName: "result"
              }, void 0, null, void 0);
            }
            break;
          case this.parent.element.id + "excel":
            exportArgs = {
              excelExportProperties: {
                fileName: "Export.xlsx"
              },
              isBlob: void 0,
              isMultipleExport: void 0,
              workbook: void 0
            };
            this.parent.trigger(beforeExport, exportArgs, function(observedArgs) {
              _this_1.parent.excelExport(observedArgs.excelExportProperties, observedArgs.isMultipleExport, observedArgs.workbook, observedArgs.isBlob);
            });
            break;
          case this.parent.element.id + "csv":
            exportArgs = {
              excelExportProperties: {
                fileName: "Export.csv"
              },
              isBlob: false,
              isMultipleExport: false,
              workbook: void 0
            };
            this.parent.trigger(beforeExport, exportArgs, function(observedArgs) {
              if (_this_1.parent.dataSourceSettings.mode === "Server") {
                _this_1.parent.getEngine("onCsvExport", null, null, null, null, null, null, null, null, observedArgs.excelExportProperties);
              } else {
                _this_1.parent.csvExport(observedArgs.excelExportProperties, observedArgs.isMultipleExport, observedArgs.workbook, observedArgs.isBlob);
              }
            });
            break;
          case this.parent.element.id + "png":
            this.parent.chartExport("PNG", {
              fileName: "result"
            }, void 0, null, void 0);
            break;
          case this.parent.element.id + "jpeg":
            this.parent.chartExport("JPEG", {
              fileName: "result"
            }, void 0, null, void 0);
            break;
          case this.parent.element.id + "svg":
            this.parent.chartExport("SVG", {
              fileName: "result"
            }, void 0, null, void 0);
            break;
          case this.parent.element.id + "notsubtotal":
            this.parent.setProperties({
              dataSourceSettings: {
                showSubTotals: false,
                showColumnSubTotals: false,
                showRowSubTotals: false
              }
            }, true);
            this.parent.refreshData();
            break;
          case this.parent.element.id + "subtotalrow":
            this.parent.setProperties({
              dataSourceSettings: {
                showSubTotals: true,
                showColumnSubTotals: false,
                showRowSubTotals: true
              }
            }, true);
            this.parent.refreshData();
            break;
          case this.parent.element.id + "subtotalcolumn":
            this.parent.setProperties({
              dataSourceSettings: {
                showSubTotals: true,
                showColumnSubTotals: true,
                showRowSubTotals: false
              }
            }, true);
            this.parent.refreshData();
            break;
          case this.parent.element.id + "subtotal":
            this.parent.setProperties({
              dataSourceSettings: {
                showSubTotals: true,
                showColumnSubTotals: true,
                showRowSubTotals: true
              }
            }, true);
            this.parent.refreshData();
            break;
          case this.parent.element.id + "notgrandtotal":
            this.parent.setProperties({
              dataSourceSettings: {
                showGrandTotals: false,
                showColumnGrandTotals: false,
                showRowGrandTotals: false
              }
            }, true);
            this.parent.refreshData();
            break;
          case this.parent.element.id + "grandtotalrow":
            this.parent.setProperties({
              dataSourceSettings: {
                showGrandTotals: true,
                showColumnGrandTotals: false,
                showRowGrandTotals: true
              }
            }, true);
            this.parent.refreshData();
            break;
          case this.parent.element.id + "grandtotalcolumn":
            this.parent.setProperties({
              dataSourceSettings: {
                showGrandTotals: true,
                showColumnGrandTotals: true,
                showRowGrandTotals: false
              }
            }, true);
            this.parent.refreshData();
            break;
          case this.parent.element.id + "grandtotal":
            this.parent.setProperties({
              dataSourceSettings: {
                showGrandTotals: true,
                showColumnGrandTotals: true,
                showRowGrandTotals: true
              }
            }, true);
            this.parent.refreshData();
            break;
          case this.parent.element.id + "top-position":
            this.parent.setProperties({
              dataSourceSettings: {
                grandTotalsPosition: "Top"
              }
            }, true);
            this.parent.refreshData();
            break;
          case this.parent.element.id + "bottom-position":
            this.parent.setProperties({
              dataSourceSettings: {
                grandTotalsPosition: "Bottom"
              }
            }, true);
            this.parent.refreshData();
            break;
          case this.parent.element.id + "sub-top-position":
            this.parent.setProperties({
              dataSourceSettings: {
                subTotalsPosition: "Top"
              }
            }, true);
            this.parent.refreshData();
            break;
          case this.parent.element.id + "sub-bottom-position":
            this.parent.setProperties({
              dataSourceSettings: {
                subTotalsPosition: "Bottom"
              }
            }, true);
            this.parent.refreshData();
            break;
          case this.parent.element.id + "sub-none-position":
            this.parent.setProperties({
              dataSourceSettings: {
                subTotalsPosition: "Auto"
              }
            }, true);
            this.parent.refreshData();
            break;
          case this.parent.element.id + "numberFormattingMenu":
            if (this.parent.numberFormattingModule) {
              this.parent.numberFormattingModule.showNumberFormattingDialog();
            }
            break;
          case this.parent.element.id + "conditionalFormattingMenu":
            if (this.parent.conditionalFormattingModule) {
              this.parent.conditionalFormattingModule.showConditionalFormattingDialog();
            }
            break;
          case this.parent.element.id + "_" + type:
            if (args.item && args.item.text) {
              if (type === "ChartMoreOption") {
                this.createChartTypeDialog();
              } else if (type === "multipleAxes") {
                if (this.parent.chartSettings.enableScrollOnMultiAxis) {
                  this.isMultiAxisChange = true;
                }
                this.parent.chartSettings.enableMultipleAxis = !this.parent.chartSettings.enableMultipleAxis;
                this.updateChartType(this.parent.chartSettings.chartSeries.type, true);
              } else if (this.getAllChartItems().indexOf(type) > -1) {
                this.updateChartType(type, false);
              } else if (type === "showLegend") {
                this.parent.chart.legendSettings.visible = !this.showLableState;
                if (this.parent.chartSettings.legendSettings) {
                  this.parent.chartSettings.legendSettings.visible = !this.showLableState;
                } else {
                  this.parent.setProperties({
                    chartSettings: {
                      legendSettings: {
                        visible: !this.showLableState
                      }
                    }
                  }, true);
                }
                this.updateChartType(this.parent.chartSettings.chartSeries.type, true);
              }
            }
            break;
        }
      } catch (execption) {
        this.parent.actionFailureMethod(execption);
      }
    };
    Toolbar4.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(initToolbar, this.createToolbar, this);
    };
    Toolbar4.prototype.getValidChartType = function() {
      var menuItems = [];
      for (var i = 0; i <= this.parent.chartTypes.length; i++) {
        var type = this.parent.chartTypes[i];
        if (this.getAllChartItems().indexOf(type) > -1 && menuItems.indexOf(type) < 0) {
          menuItems.push(type);
        }
      }
      return menuItems;
    };
    Toolbar4.prototype.createChartTypeDialog = function() {
      var _this_1 = this;
      var chartDialog = this.parent.element.appendChild(createElement("div", {
        id: this.parent.element.id + "_ChartTypeDialog",
        className: PIVOTCHART_TYPE_DIALOG
      }));
      var chartTypesDialog = new Dialog({
        animationSettings: {
          effect: "Fade"
        },
        allowDragging: true,
        header: this.parent.localeObj.getConstant("chartTypeSettings"),
        content: this.getDialogContent(),
        isModal: true,
        beforeOpen: this.beforeOpen.bind(this),
        visible: true,
        showCloseIcon: true,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        width: "auto",
        height: "auto",
        position: {
          X: "center",
          Y: "center"
        },
        buttons: [{
          click: function() {
            _this_1.chartTypeDialogUpdate();
          },
          isFlat: false,
          buttonModel: {
            cssClass: OK_BUTTON_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
            content: this.parent.localeObj.getConstant("ok"),
            isPrimary: true
          }
        }, {
          click: function() {
            _this_1.removeDialog();
          },
          isFlat: false,
          buttonModel: {
            cssClass: CANCEL_BUTTON_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
            content: this.parent.localeObj.getConstant("cancel")
          }
        }],
        closeOnEscape: true,
        target: this.parent.element,
        cssClass: this.parent.cssClass,
        close: this.removeDialog.bind(this)
      });
      chartTypesDialog.isStringTemplate = true;
      chartTypesDialog.appendTo(chartDialog);
    };
    Toolbar4.prototype.removeDialog = function() {
      var chartTypesDialog = select("#" + this.parent.element.id + "_ChartTypeDialog", this.parent.element) ? getInstance(select("#" + this.parent.element.id + "_ChartTypeDialog", this.parent.element), Dialog) : null;
      if (chartTypesDialog && !chartTypesDialog.isDestroyed) {
        chartTypesDialog.destroy();
      }
      if (document.getElementById(this.parent.element.id + "_ChartTypeDialog")) {
        remove(document.getElementById(this.parent.element.id + "_ChartTypeDialog"));
      }
    };
    Toolbar4.prototype.chartTypeDialogUpdate = function() {
      var chartType = getInstance(select("#" + this.parent.element.id + "_ChartTypeOption"), DropDownList).value;
      var checked = getInstance(select("#" + this.parent.element.id + "_DialogMultipleAxis"), CheckBox).checked;
      var checkedShow = getInstance(select("#" + this.parent.element.id + "_DialogShowLabel"), CheckBox).checked;
      this.parent.chart.legendSettings.visible = checkedShow;
      if (this.chartLableState) {
        this.parent.chart.legendSettings.visible = checkedShow;
        if (this.parent.chartSettings.legendSettings) {
          this.parent.chartSettings.legendSettings.visible = checkedShow;
        } else {
          this.parent.setProperties({
            chartSettings: {
              legendSettings: {
                visible: checkedShow
              }
            }
          }, true);
        }
      }
      this.updateChartType(chartType, false);
      this.parent.chartSettings.enableMultipleAxis = checked;
      this.parent.chartSettings.multipleAxisMode = getInstance(select("#" + this.parent.element.id + "_AxisModeOption"), DropDownList).value;
      var chartTypesDialog = select("#" + this.parent.element.id + "_ChartTypeDialog", document) ? getInstance(select("#" + this.parent.element.id + "_ChartTypeDialog", document), Dialog) : null;
      chartTypesDialog.close();
    };
    Toolbar4.prototype.updateChartType = function(type, isMultiAxis) {
      if (this.getAllChartItems().indexOf(type) > -1) {
        if (this.parent.chart) {
          this.parent.currentView = "Chart";
          this.parent.setProperties({
            displayOption: {
              primary: "Chart"
            }
          }, true);
          if (this.parent.chartSettings.enableScrollOnMultiAxis && this.parent.chartSettings.enableMultipleAxis) {
            this.parent.element.querySelector("." + PIVOTCHART).style.width = formatUnit(this.parent.grid ? this.parent.getGridWidthAsNumber() : this.parent.getWidthAsNumber());
            this.parent.element.querySelector("." + PIVOTCHART).style.height = formatUnit(this.parent.pivotChartModule.getChartHeight());
          }
          this.parent.chart.setProperties({
            width: formatUnit(this.parent.grid ? this.parent.getGridWidthAsNumber() : this.parent.getWidthAsNumber()),
            height: formatUnit(this.parent.pivotChartModule.getChartHeight())
          }, true);
          this.parent.chartSettings.chartSeries.type = type;
          var actionInfo = {
            toolbarInfo: {
              displayOption: this.parent.displayOption,
              chartSettings: this.parent.chartSettings
            }
          };
          this.parent.actionObj.actionInfo = actionInfo;
          if (this.parent.chartSettings.chartSeries.type === type && !isMultiAxis) {
            this.parent.chart.refresh();
          }
        }
      }
    };
    Toolbar4.prototype.getDialogContent = function() {
      var mainWrapper = createElement("div", {
        className: "e-chart-type-div-content"
      });
      var optionWrapperDiv = createElement("div", {
        className: "e-chart-type-option-container"
      });
      var axisModeWrapperDiv = createElement("div", {
        className: "e-multiple-axes-mode-container"
      });
      var optionTextDiv = createElement("div", {
        className: "e-chart-type-option-text"
      });
      optionTextDiv.innerText = this.parent.localeObj.getConstant("ChartType");
      var axisModeTextDiv = createElement("div", {
        className: "e-multiple-axes-mode-text"
      });
      axisModeTextDiv.innerText = this.parent.localeObj.getConstant("multipleAxisMode");
      var dropOptionDiv = createElement("div", {
        id: this.parent.element.id + "_ChartTypeOption"
      });
      var dropModeOptionDiv = createElement("div", {
        id: this.parent.element.id + "_AxisModeOption"
      });
      optionWrapperDiv.appendChild(optionTextDiv);
      optionWrapperDiv.appendChild(dropOptionDiv);
      var chartTypeDatasource = [];
      var multipleAxisModeDatasource = [{
        value: "Stacked",
        text: this.parent.localeObj.getConstant("stacked")
      }, {
        value: "Single",
        text: this.parent.localeObj.getConstant("single")
      }, {
        value: "Combined",
        text: this.parent.localeObj.getConstant("combined")
      }];
      var chartType = this.getValidChartType();
      for (var i = 0; i < chartType.length; i++) {
        chartTypeDatasource.push({
          value: chartType[i],
          text: this.parent.localeObj.getConstant(chartType[i].toLowerCase())
        });
      }
      var optionWrapper = new DropDownList({
        dataSource: chartTypeDatasource,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        fields: {
          value: "value",
          text: "text"
        },
        value: this.parent.chartSettings.chartSeries.type ? this.parent.chartSettings.chartSeries.type : this.getValidChartType()[0],
        width: "100%",
        change: this.changeDropDown.bind(this),
        cssClass: this.parent.cssClass
      });
      optionWrapper.isStringTemplate = true;
      optionWrapper.appendTo(dropOptionDiv);
      mainWrapper.appendChild(optionWrapperDiv);
      var checkboxWrap = createElement("input", {
        id: this.parent.element.id + "_DialogMultipleAxis",
        attrs: {
          "type": "checkbox"
        }
      });
      mainWrapper.appendChild(checkboxWrap);
      var labelCheckboxWrap = createElement("input", {
        id: this.parent.element.id + "_DialogShowLabel",
        attrs: {
          "type": "checkbox"
        }
      });
      mainWrapper.appendChild(labelCheckboxWrap);
      axisModeWrapperDiv.appendChild(axisModeTextDiv);
      axisModeWrapperDiv.appendChild(dropModeOptionDiv);
      mainWrapper.appendChild(axisModeWrapperDiv);
      var axisModeWrapper = new DropDownList({
        dataSource: multipleAxisModeDatasource,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        fields: {
          value: "value",
          text: "text"
        },
        value: this.parent.chartSettings.multipleAxisMode ? this.parent.chartSettings.multipleAxisMode : "Stacked",
        width: "100%",
        enabled: this.parent.chartSettings.enableMultipleAxis,
        cssClass: this.parent.cssClass
      });
      axisModeWrapper.isStringTemplate = true;
      axisModeWrapper.appendTo(dropModeOptionDiv);
      return mainWrapper;
    };
    Toolbar4.prototype.changeDropDown = function(args) {
      var chartSettings = JSON.parse(this.parent.getChartSettings()).chartSettings;
      if (!(chartSettings && chartSettings.legendSettings && chartSettings.legendSettings.visible !== void 0)) {
        getInstance(select("#" + this.parent.element.id + "_DialogShowLabel"), CheckBox).checked = true;
      }
      if (["Pie", "Funnel", "Pyramid", "Doughnut", "Pareto"].indexOf(args.value.toString()) > -1) {
        getInstance(select("#" + this.parent.element.id + "_DialogMultipleAxis"), CheckBox).disabled = true;
        getInstance(select("#" + this.parent.element.id + "_AxisModeOption"), DropDownList).enabled = false;
      } else {
        var multipleAxisCheckBox = getInstance(select("#" + this.parent.element.id + "_DialogMultipleAxis"), CheckBox);
        multipleAxisCheckBox.disabled = false;
        getInstance(select("#" + this.parent.element.id + "_AxisModeOption"), DropDownList).enabled = multipleAxisCheckBox.checked;
      }
    };
    Toolbar4.prototype.beforeOpen = function() {
      var _this_1 = this;
      var checkbox = new CheckBox({
        label: this.parent.localeObj.getConstant("multipleAxes"),
        cssClass: "e-dialog-multiple-axis" + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
        checked: this.parent.chartSettings.enableMultipleAxis ? this.parent.chartSettings.enableMultipleAxis : false,
        change: function(args) {
          getInstance(select("#" + _this_1.parent.element.id + "_AxisModeOption"), DropDownList).enabled = args.checked;
        },
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer
      });
      var checkbox1 = new CheckBox({
        label: this.parent.localeObj.getConstant("showLegend"),
        checked: this.getLableState(),
        change: function() {
          _this_1.chartLableState = true;
        },
        cssClass: "e-dialog-show-legend" + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer
      });
      var chartTypesDialog = select("#" + this.parent.element.id + "_ChartTypeDialog", document) ? getInstance(select("#" + this.parent.element.id + "_ChartTypeDialog", document), Dialog) : null;
      checkbox1.appendTo(select("#" + this.parent.element.id + "_DialogShowLabel", chartTypesDialog.element));
      checkbox.appendTo(select("#" + this.parent.element.id + "_DialogMultipleAxis", chartTypesDialog.element));
      if (["Pie", "Funnel", "Pyramid", "Doughnut", "Pareto"].indexOf(this.parent.chartSettings.chartSeries.type) > -1) {
        checkbox.disabled = true;
        getInstance(select("#" + this.parent.element.id + "_AxisModeOption"), DropDownList).enabled = false;
      }
      var chartSettings = JSON.parse(this.parent.getChartSettings()).chartSettings;
      if (chartSettings && chartSettings.legendSettings && chartSettings.legendSettings.visible !== void 0) {
        this.chartLableState = true;
      } else {
        this.chartLableState = false;
      }
    };
    Toolbar4.prototype.refreshToolbar = function() {
      this.destroy();
      this.createToolbar();
    };
    Toolbar4.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(initToolbar, this.createToolbar);
    };
    Toolbar4.prototype.destroy = function() {
      this.removeEventListener();
      var element = select("#" + this.parent.element.id + "_ConfirmDialog", document);
      var confirmPopUp = element ? getInstance(element, Dialog) : null;
      if (confirmPopUp && !confirmPopUp.isDestroyed) {
        confirmPopUp.destroy();
        confirmPopUp = null;
      }
      element = select("#" + this.parent.element.id + "report-dialog", document);
      var dialog = element ? getInstance(element, Dialog) : null;
      if (dialog && !dialog.isDestroyed) {
        dialog.destroy();
        dialog = null;
      }
      element = select("#" + this.parent.element.id + "mdx-dialog", document);
      var mdxDialog = element ? getInstance(element, Dialog) : null;
      if (mdxDialog && !mdxDialog.isDestroyed) {
        mdxDialog.destroy();
        mdxDialog = null;
      }
      element = select("#" + this.parent.element.id + "chart_menu", document);
      var chartMenu = element ? getInstance(element, Menu) : null;
      if (chartMenu && !chartMenu.isDestroyed) {
        chartMenu.destroy();
        chartMenu = null;
      }
      element = select("#" + this.parent.element.id + "_ChartTypeDialog", document);
      var chartTypesDialog = element ? getInstance(element, Dialog) : null;
      if (chartTypesDialog && !chartTypesDialog.isDestroyed) {
        chartTypesDialog.destroy();
        chartTypesDialog = null;
      }
      element = select("#" + this.parent.element.id + "export_menu", document);
      var exportMenu = element ? getInstance(element, Menu) : null;
      if (exportMenu && !exportMenu.isDestroyed) {
        exportMenu.destroy();
        exportMenu = null;
      }
      element = select("#" + this.parent.element.id + "subtotal_menu", document);
      var subTotalMenu = element ? getInstance(element, Menu) : null;
      if (subTotalMenu && !subTotalMenu.isDestroyed) {
        subTotalMenu.destroy();
        subTotalMenu = null;
      }
      element = select("#" + this.parent.element.id + "grandtotal_menu", document);
      var grandTotalMenu = element ? getInstance(element, Menu) : null;
      if (grandTotalMenu && !grandTotalMenu.isDestroyed) {
        grandTotalMenu.destroy();
        grandTotalMenu = null;
      }
      element = select("#" + this.parent.element.id + "formatting_menu", document);
      var formattingMenu = element ? getInstance(element, Menu) : null;
      if (formattingMenu && !formattingMenu.isDestroyed) {
        formattingMenu.destroy();
        formattingMenu = null;
      }
      element = select("#" + this.parent.element.id + "_reportlist", document);
      var reportList = element ? getInstance(element, DropDownList) : null;
      if (reportList && !reportList.isDestroyed) {
        reportList.destroy();
        reportList = null;
      }
      if (this.toolbar && !this.toolbar.isDestroyed) {
        this.toolbar.destroy();
        this.toolbar = null;
      }
      element = select("#" + this.parent.element.id + "pivot-toolbar", document);
      if (element) {
        remove(element);
      }
    };
    Toolbar4.prototype.focusToolBar = function() {
      removeClass(document.querySelector("." + GRID_TOOLBAR).querySelectorAll(".e-menu-item.e-focused"), "e-focused");
      removeClass(document.querySelector("." + GRID_TOOLBAR).querySelectorAll(".e-menu-item.e-selected"), "e-selected");
      if (document.querySelector(".e-toolbar-items")) {
        addClass([document.querySelector(".e-toolbar-items")], "e-focused");
      }
    };
    return Toolbar4;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/common/popups/formatting-dialog.js
var NumberFormatting = (
  /** @class */
  function() {
    function NumberFormatting2(parent) {
      this.parent = parent;
      this.parent.numberFormattingModule = this;
      this.removeEventListener();
      this.addEventListener();
      this.newFormat = [];
      this.lastFormattedValue = [];
    }
    NumberFormatting2.prototype.getModuleName = function() {
      return "numberFormatting";
    };
    NumberFormatting2.prototype.showNumberFormattingDialog = function() {
      var _this = this;
      var valueDialog = createElement("div", {
        id: this.parent.element.id + "_FormatDialog",
        className: FORMATTING_DIALOG
      });
      this.parent.element.appendChild(valueDialog);
      this.dialog = new Dialog({
        animationSettings: {
          effect: "Fade"
        },
        allowDragging: true,
        header: this.parent.localeObj.getConstant("numberFormat"),
        content: this.getDialogContent(),
        isModal: true,
        visible: true,
        showCloseIcon: true,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        width: "320px",
        height: "auto",
        position: {
          X: "center",
          Y: "center"
        },
        buttons: [{
          click: this.updateFormatting.bind(this),
          isFlat: false,
          buttonModel: {
            cssClass: OK_BUTTON_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
            content: this.parent.localeObj.getConstant("apply"),
            isPrimary: true
          }
        }, {
          click: function() {
            _this.dialog.hide();
          },
          isFlat: false,
          buttonModel: {
            cssClass: CANCEL_BUTTON_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
            content: this.parent.localeObj.getConstant("cancel")
          }
        }],
        closeOnEscape: true,
        cssClass: this.parent.cssClass,
        target: this.parent.element,
        close: this.removeDialog.bind(this)
      });
      this.dialog.isStringTemplate = true;
      this.dialog.appendTo(valueDialog);
      this.dialog.element.querySelector("." + DIALOG_HEADER).innerText = this.parent.localeObj.getConstant("numberFormat");
      var formatObject;
      this.newFormat = [{
        name: this.parent.localeObj.getConstant("AllValues"),
        format: "N0",
        useGrouping: true,
        type: void 0
      }];
      var format = [];
      for (var i = 0; i < this.parent.dataSourceSettings.formatSettings.length; i++) {
        formatObject = {
          name: this.parent.dataSourceSettings.formatSettings[i].name,
          format: this.parent.dataSourceSettings.formatSettings[i].format,
          useGrouping: this.parent.dataSourceSettings.formatSettings[i].useGrouping,
          type: this.parent.dataSourceSettings.formatSettings[i].type
        };
        this.newFormat.push(formatObject);
      }
      for (var i = 0; i < this.newFormat.length; i++) {
        format.push(this.newFormat[i].name);
      }
      for (var j = 0; j < this.parent.dataSourceSettings.values.length; j++) {
        if (format.indexOf(this.parent.dataSourceSettings.values[j].name) === -1) {
          formatObject = {
            name: this.parent.dataSourceSettings.values[j].name,
            format: "N0",
            useGrouping: true
          };
          this.newFormat.push(formatObject);
        }
      }
      this.renderControls();
    };
    NumberFormatting2.prototype.getDialogContent = function() {
      var outerElement = createElement("div", {
        id: this.parent.element.id + "_FormatDialogOuter",
        className: FORMATTING_DIALOG_OUTER
      });
      var table = createElement("table", {
        id: this.parent.element.id + "_FormatTable",
        className: FORMATTING_TABLE,
        attrs: {
          "role": "tableItems"
        }
      });
      var tRow = createElement("tr");
      var tValue = createElement("td");
      var valueLable = createElement("div", {
        id: this.parent.element.id + "_FormatValueLable",
        className: FORMATTING_VALUE_LABLE
      });
      valueLable.innerText = this.parent.localeObj.getConstant("values");
      var valueDrop = createElement("div", {
        id: this.parent.element.id + "_FormatValueDrop"
      });
      tValue.appendChild(valueLable);
      tValue.appendChild(valueDrop);
      tRow.appendChild(tValue);
      table.appendChild(tRow);
      tRow = createElement("tr");
      tValue = createElement("td");
      var formatLable = createElement("div", {
        id: this.parent.element.id + "_FormatLable",
        className: FORMATTING_FORMAT_LABLE
      });
      formatLable.innerText = this.parent.localeObj.getConstant("formatType");
      var formatDrop = createElement("div", {
        id: this.parent.element.id + "_FormatDrop"
      });
      tValue.appendChild(formatLable);
      tValue.appendChild(formatDrop);
      tRow.appendChild(tValue);
      table.appendChild(tRow);
      tRow = createElement("tr");
      tValue = createElement("td");
      var groupingLable = createElement("div", {
        id: this.parent.element.id + "_GroupingLable",
        className: FORMATTING_GROUPING_LABLE
      });
      groupingLable.innerText = this.parent.localeObj.getConstant("grouping");
      var groupingDrop = createElement("div", {
        id: this.parent.element.id + "_GroupingDrop"
      });
      tValue.appendChild(groupingLable);
      tValue.appendChild(groupingDrop);
      tRow.appendChild(tValue);
      table.appendChild(tRow);
      tRow = createElement("tr");
      tValue = createElement("td");
      var decimalLable = createElement("div", {
        id: this.parent.element.id + "_DecimalLable",
        className: FORMATTING_DECIMAL_LABLE
      });
      decimalLable.innerText = this.parent.localeObj.getConstant("decimalPlaces");
      var decimalDrop = createElement("div", {
        id: this.parent.element.id + "_DecimalDrop"
      });
      tValue.appendChild(decimalLable);
      tValue.appendChild(decimalDrop);
      tRow.appendChild(tValue);
      table.appendChild(tRow);
      tRow = createElement("tr");
      tValue = createElement("td");
      this.customLable = createElement("div", {
        id: this.parent.element.id + "_CustomLable",
        className: FORMATTING_CUSTOM_LABLE
      });
      this.customLable.innerText = this.parent.localeObj.getConstant("customFormatString");
      this.customText = createElement("input", {
        id: this.parent.element.id + "_CustomText",
        attrs: {
          "type": "text",
          "tabindex": "0"
        },
        className: INPUT + " " + FORMATTING_CUSTOM_TEXT
      });
      tValue.appendChild(this.customLable);
      tValue.appendChild(this.customText);
      tRow.appendChild(tValue);
      table.appendChild(tRow);
      tRow = createElement("tr");
      table.appendChild(tRow);
      outerElement.appendChild(table);
      return outerElement;
    };
    NumberFormatting2.prototype.renderControls = function() {
      var valuesDropDown;
      var formatDropDown;
      var groupingDropDown;
      if (select("#" + this.parent.element.id + "_FormatValueDrop", this.dialog.element)) {
        var valueFields = [];
        valueFields.push({
          index: 0,
          name: this.parent.localeObj.getConstant("AllValues"),
          field: this.parent.localeObj.getConstant("AllValues")
        });
        for (var i = 0; i < this.parent.dataSourceSettings.values.length; i++) {
          var caption = this.parent.dataSourceSettings.values[i].caption || this.parent.dataSourceSettings.values[i].name;
          caption = this.parent.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(caption) : caption;
          valueFields.push({
            index: i + 1,
            name: caption,
            field: this.parent.dataSourceSettings.values[i].name
          });
        }
        valuesDropDown = new DropDownList({
          dataSource: valueFields,
          fields: {
            text: "name",
            value: "field"
          },
          enableRtl: this.parent.enableRtl,
          locale: this.parent.locale,
          index: 0,
          cssClass: FORMATTING_VALUE_DROP + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
          change: this.valueChange.bind(this),
          width: "100%",
          open: this.customUpdate.bind(this)
        });
        valuesDropDown.isStringTemplate = true;
        valuesDropDown.appendTo(select("#" + this.parent.element.id + "_FormatValueDrop", this.dialog.element));
      }
      if (select("#" + this.parent.element.id + "_FormatDrop", this.dialog.element)) {
        var fields = [{
          index: 0,
          name: this.parent.localeObj.getConstant("number")
        }, {
          index: 1,
          name: this.parent.localeObj.getConstant("currency")
        }, {
          index: 2,
          name: this.parent.localeObj.getConstant("percentage")
        }, {
          index: 3,
          name: this.parent.localeObj.getConstant("Custom")
        }];
        formatDropDown = new DropDownList({
          dataSource: fields,
          fields: {
            text: "name",
            value: "name"
          },
          index: 0,
          change: this.dropDownChange.bind(this),
          enableRtl: this.parent.enableRtl,
          locale: this.parent.locale,
          cssClass: FORMATTING_FORMAT_DROP + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
          width: "100%"
        });
        formatDropDown.isStringTemplate = true;
        formatDropDown.appendTo(select("#" + this.parent.element.id + "_FormatDrop", this.dialog.element));
      }
      if (select("#" + this.parent.element.id + "_GroupingDrop", this.dialog.element)) {
        var fields = [{
          index: 0,
          name: this.parent.localeObj.getConstant("true")
        }, {
          index: 1,
          name: this.parent.localeObj.getConstant("false")
        }];
        groupingDropDown = new DropDownList({
          dataSource: fields,
          fields: {
            text: "name",
            value: "name"
          },
          enableRtl: this.parent.enableRtl,
          locale: this.parent.locale,
          index: 0,
          cssClass: FORMATTING_GROUPING_DROP + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
          width: "100%",
          change: this.groupingChange.bind(this)
        });
        groupingDropDown.isStringTemplate = true;
        groupingDropDown.appendTo(select("#" + this.parent.element.id + "_GroupingDrop", this.dialog.element));
      }
      if (select("#" + this.parent.element.id + "_DecimalDrop", this.dialog.element)) {
        var fields = [{
          index: 0,
          name: 0
        }, {
          index: 1,
          name: 1
        }, {
          index: 2,
          name: 2
        }, {
          index: 3,
          name: 3
        }, {
          index: 4,
          name: 4
        }, {
          index: 5,
          name: 5
        }, {
          index: 6,
          name: 6
        }, {
          index: 7,
          name: 7
        }, {
          index: 8,
          name: 8
        }, {
          index: 9,
          name: 9
        }, {
          index: 10,
          name: 10
        }];
        var decimalDropDown = new DropDownList({
          dataSource: fields,
          fields: {
            text: "name",
            value: "name"
          },
          enableRtl: this.parent.enableRtl,
          locale: this.parent.locale,
          index: 0,
          cssClass: FORMATTING_DECIMAL_DROP + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
          popupHeight: 150,
          width: "100%",
          change: this.decimalChange.bind(this)
        });
        decimalDropDown.isStringTemplate = true;
        decimalDropDown.appendTo(select("#" + this.parent.element.id + "_DecimalDrop", this.dialog.element));
      }
      if (formatDropDown.value !== this.parent.localeObj.getConstant("Custom")) {
        this.customText.disabled = true;
      }
      if (this.lastFormattedValue.length !== 0) {
        valuesDropDown.value = this.lastFormattedValue[0].name;
        var fString = this.lastFormattedValue[0].format;
        var first = fString === "" ? "" : fString.split("")[0].toLowerCase();
        var group = this.lastFormattedValue[0].useGrouping ? this.parent.localeObj.getConstant("true") : this.parent.localeObj.getConstant("false");
        this.updateFormattingDialog(fString, first, group);
      }
    };
    NumberFormatting2.prototype.valueChange = function(args) {
      var format = this.newFormat;
      var isExist = false;
      for (var i = 0; i < format.length; i++) {
        if (format[i].name === args.value) {
          var fString = format[i].format;
          var first = fString === "" ? "" : fString.split("")[0].toLowerCase();
          var group = format[i].useGrouping ? this.parent.localeObj.getConstant("true") : this.parent.localeObj.getConstant("false");
          this.updateFormattingDialog(fString, first, group);
          isExist = true;
          break;
        }
      }
      if (!isExist) {
        var formatDropDown = getInstance(select("#" + this.parent.element.id + "_FormatDrop", this.parent.element), DropDownList);
        formatDropDown.value = this.parent.localeObj.getConstant("number");
        var decimalDropDown = getInstance(select("#" + this.parent.element.id + "_DecimalDrop", this.parent.element), DropDownList);
        decimalDropDown.value = 0;
        var groupingDropDown = getInstance(select("#" + this.parent.element.id + "_GroupingDrop", this.parent.element), DropDownList);
        groupingDropDown.value = this.parent.localeObj.getConstant("true");
      }
    };
    NumberFormatting2.prototype.updateFormattingDialog = function(fString, first, group) {
      var formatDropDown = getInstance(select("#" + this.parent.element.id + "_FormatDrop", this.parent.element), DropDownList);
      if (fString.length === 2 && ["n", "p", "c"].indexOf(first) > -1) {
        formatDropDown.value = first === "n" ? this.parent.localeObj.getConstant("number") : first === "p" ? this.parent.localeObj.getConstant("percentage") : first === "c" ? this.parent.localeObj.getConstant("currency") : this.parent.localeObj.getConstant("number");
        var decimalDropDown = getInstance(select("#" + this.parent.element.id + "_DecimalDrop", this.parent.element), DropDownList);
        decimalDropDown.value = Number(fString.split("")[1]);
        var groupingDropDown = getInstance(select("#" + this.parent.element.id + "_GroupingDrop", this.parent.element), DropDownList);
        groupingDropDown.value = group;
      } else {
        formatDropDown.value = this.parent.localeObj.getConstant("Custom");
        this.customText.value = fString;
      }
    };
    NumberFormatting2.prototype.customUpdate = function() {
      var formatDropDown = getInstance(select("#" + this.parent.element.id + "_FormatDrop", this.parent.element), DropDownList);
      if (formatDropDown.value === this.parent.localeObj.getConstant("Custom")) {
        var index = this.getIndexValue();
        this.newFormat[index].format = this.customText.value;
      }
    };
    NumberFormatting2.prototype.dropDownChange = function(args) {
      var index = this.getIndexValue();
      var groupingDropDown = getInstance(select("#" + this.parent.element.id + "_GroupingDrop", this.parent.element), DropDownList);
      var decimalDropDown = getInstance(select("#" + this.parent.element.id + "_DecimalDrop", this.parent.element), DropDownList);
      if (args.value === this.parent.localeObj.getConstant("Custom")) {
        this.customText.disabled = false;
        groupingDropDown.enabled = false;
        decimalDropDown.enabled = false;
        this.newFormat[index].format = this.customText.value;
      } else {
        var text = this.formattedText();
        this.newFormat[index].format = text;
        this.customText.disabled = true;
        groupingDropDown.enabled = true;
        decimalDropDown.enabled = true;
        this.customText.value = "";
      }
    };
    NumberFormatting2.prototype.groupingChange = function() {
      var index = this.getIndexValue();
      var groupingDropDown = getInstance(select("#" + this.parent.element.id + "_GroupingDrop", this.parent.element), DropDownList);
      this.newFormat[index].useGrouping = groupingDropDown.value === this.parent.localeObj.getConstant("true") ? true : false;
    };
    NumberFormatting2.prototype.getIndexValue = function() {
      var format = [];
      for (var i = 0; i < this.newFormat.length; i++) {
        format.push(this.newFormat[i].name);
      }
      var valuesDropDown = getInstance(select("#" + this.parent.element.id + "_FormatValueDrop", this.parent.element), DropDownList);
      var index = format.indexOf(valuesDropDown.value.toString());
      return index;
    };
    NumberFormatting2.prototype.decimalChange = function() {
      var index = this.getIndexValue();
      var text = this.formattedText();
      this.newFormat[index].format = text;
    };
    NumberFormatting2.prototype.formattedText = function() {
      var text;
      var formatDropDown = getInstance(select("#" + this.parent.element.id + "_FormatDrop", this.parent.element), DropDownList);
      var decimalDropDown = getInstance(select("#" + this.parent.element.id + "_DecimalDrop", this.parent.element), DropDownList);
      if (formatDropDown.value === this.parent.localeObj.getConstant("number") || formatDropDown.value === this.parent.localeObj.getConstant("percentage") || formatDropDown.value === this.parent.localeObj.getConstant("currency")) {
        text = formatDropDown.value === this.parent.localeObj.getConstant("number") ? "N" : formatDropDown.value === this.parent.localeObj.getConstant("currency") ? "C" : "P";
        return text += decimalDropDown.value;
      } else {
        return text = this.customText.value;
      }
    };
    NumberFormatting2.prototype.removeDialog = function() {
      if (this.dialog && !this.dialog.isDestroyed) {
        this.dialog.destroy();
      }
      if (document.getElementById(this.parent.element.id + "_FormatDialog")) {
        remove(document.getElementById(this.parent.element.id + "_FormatDialog"));
      }
    };
    NumberFormatting2.prototype.updateFormatting = function() {
      var _this = this;
      var text = this.formattedText();
      var index = this.getIndexValue();
      this.newFormat = this.newFormat.splice(index, 1);
      var format = extend([], this.newFormat, true);
      var formatSettings = this.parent.dataSourceSettings.formatSettings;
      for (var i = 0; i < formatSettings.length; i++) {
        this.insertFormat(formatSettings[i].name, formatSettings[i].format, formatSettings[i].type, formatSettings[i].currency, formatSettings[i].useGrouping);
      }
      var valuesDropDown = getInstance(select("#" + this.parent.element.id + "_FormatValueDrop", this.parent.element), DropDownList);
      if (valuesDropDown.value === this.parent.localeObj.getConstant("AllValues")) {
        for (var i = 0; i < this.parent.dataSourceSettings.values.length; i++) {
          this.insertFormat(this.parent.dataSourceSettings.values[i].name, text);
        }
      } else {
        this.insertFormat(valuesDropDown.value.toString(), text);
      }
      var eventArgs = {
        formatSettings: PivotUtil.cloneFormatSettings(this.newFormat),
        formatName: valuesDropDown.value.toString(),
        cancel: false
      };
      this.parent.trigger(numberFormatting, eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          if (_this.parent.dataType === "olap") {
            var _loop_1 = function(i3) {
              var fieldInfo = PivotUtil.getFieldInfo(observedArgs.formatSettings[i3].name, _this.parent);
              _this.parent.dataSourceSettings.calculatedFieldSettings.forEach(function(calculatedField) {
                if (calculatedField.name === fieldInfo.fieldName) {
                  calculatedField.formatString = observedArgs.formatSettings[i3].format;
                }
              });
            };
            for (var i2 = 0; i2 < observedArgs.formatSettings.length; i2++) {
              _loop_1(i2);
            }
          }
          _this.parent.setProperties({
            dataSourceSettings: {
              formatSettings: observedArgs.formatSettings
            }
          }, true);
          var actionInfo = {
            numberFormattingInfo: _this.parent.dataSourceSettings.formatSettings
          };
          _this.parent.actionObj.actionInfo = actionInfo;
          try {
            _this.parent.updateDataSource();
            _this.dialog.close();
          } catch (exception) {
            _this.parent.setProperties({
              dataSourceSettings: {
                formatSettings: format
              }
            }, true);
            _this.parent.pivotCommon.errorDialog.createErrorDialog(_this.parent.localeObj.getConstant("error"), _this.parent.localeObj.getConstant("invalidFormat"));
            _this.parent.hideWaitingPopup();
          }
        } else {
          _this.dialog.close();
          _this.parent.setProperties({
            dataSourceSettings: {
              formatSettings: format
            }
          }, true);
        }
      });
    };
    NumberFormatting2.prototype.insertFormat = function(fieldName, text, formatType, currency, useGrouping) {
      var isExist = false;
      var groupingDropDown = getInstance(select("#" + this.parent.element.id + "_GroupingDrop", this.parent.element), DropDownList);
      var newFormat = {
        name: fieldName,
        format: text,
        useGrouping: !isNullOrUndefined(useGrouping) ? useGrouping : groupingDropDown.value === this.parent.localeObj.getConstant("true") ? true : false,
        type: formatType,
        currency
      };
      var format = this.newFormat;
      for (var i = 0; i < format.length; i++) {
        if (format[i].name === fieldName) {
          format[i] = newFormat;
          isExist = true;
        }
      }
      if (!isExist) {
        format.push(newFormat);
      }
      this.lastFormattedValue = [];
      this.lastFormattedValue.push(newFormat);
    };
    NumberFormatting2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(initFormatting, this.showNumberFormattingDialog, this);
    };
    NumberFormatting2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(initFormatting, this.showNumberFormattingDialog);
    };
    NumberFormatting2.prototype.destroy = function() {
      if (this.dialog && !this.dialog.isDestroyed) {
        this.dialog.destroy();
        this.dialog = null;
      }
      this.removeEventListener();
    };
    return NumberFormatting2;
  }()
);

// node_modules/@syncfusion/ej2-pivotview/src/common/popups/grouping.js
var Grouping = (
  /** @class */
  function() {
    function Grouping2(parent) {
      this.dateGroup = /_date_group_years|_date_group_quarters|_date_group_quarterYear|_date_group_months|_date_group_days|_date_group_hours|_date_group_minutes|_date_group_seconds/g;
      this.parent = parent;
      this.parent.groupingModule = this;
      this.addEventListener();
    }
    Grouping2.prototype.getModuleName = function() {
      return "grouping";
    };
    Grouping2.prototype.render = function(args) {
      var target = args.target;
      var option = args.option;
      var parentElement = args.parentElement;
      var selectedCellsInfo = [];
      this.parentElement = parentElement;
      this.isUpdate = false;
      var colIndex = parseInt(target.getAttribute("aria-colindex"), 10) - 1;
      var rowIndex = Number(target.getAttribute("index"));
      var cell = this.parent.engineModule.pivotValues[rowIndex][colIndex];
      var fieldName = cell.valueSort.axis.toString();
      selectedCellsInfo = this.getSelectedCells(cell.axis, fieldName, cell.actualText.toString());
      selectedCellsInfo.push({
        axis: cell.axis,
        fieldName,
        name: cell.actualText.toString(),
        cellInfo: cell
      });
      if (option.replace(parentElement.id, "").indexOf("_custom_group") !== -1) {
        this.createGroupSettings(fieldName, selectedCellsInfo);
      } else {
        this.updateUnGroupSettings(fieldName, selectedCellsInfo);
      }
    };
    Grouping2.prototype.getSelectedOptions = function(selectedCellsInfo) {
      var selectedOptions = [];
      for (var _i = 0, selectedCellsInfo_1 = selectedCellsInfo; _i < selectedCellsInfo_1.length; _i++) {
        var option = selectedCellsInfo_1[_i];
        if (PivotUtil.inArray(option.name, selectedOptions) === -1) {
          selectedOptions.push(option.name);
        }
      }
      return selectedOptions;
    };
    Grouping2.prototype.createGroupSettings = function(fieldName, selectedCellsInfo) {
      var fieldList = this.parent.engineModule.fieldList[fieldName];
      var group = this.getGroupSettings(fieldName);
      if (selectedCellsInfo.length > 0) {
        var type = void 0;
        var isInvalid = false;
        if (fieldList.isCustomField) {
          if (!group) {
            var dateGroup = this.getGroupSettings(fieldName.replace(this.dateGroup, ""));
            var customGroup = this.getGroupSettings(fieldName.replace(/_custom_group/g, ""));
            if (dateGroup) {
              isInvalid = false;
              type = "date";
              fieldName = fieldName.replace(this.dateGroup, "");
            } else if (customGroup) {
              isInvalid = selectedCellsInfo.length === 1;
              type = "custom";
            }
          } else if (group && group.type === "Custom") {
            if (selectedCellsInfo.length === 1) {
              isInvalid = true;
            } else {
              isInvalid = false;
              type = "custom";
            }
          } else if (group && group.type === "Number") {
            isInvalid = false;
            type = "number";
          }
        } else {
          if (group) {
            if (group.type === "Number" || group.type === "Date") {
              isInvalid = false;
              type = group.type === "Date" ? "date" : "number";
            } else if (group.type === "Custom") {
              isInvalid = selectedCellsInfo.length === 1;
              type = "custom";
            }
          } else {
            if (fieldList.type === "number" || ["datetime", "date"].indexOf(fieldList.type) !== -1 || this.isDateType(fieldName)) {
              isInvalid = false;
              type = selectedCellsInfo.length === 1 ? ["datetime", "date"].indexOf(fieldList.type) !== -1 || this.isDateType(fieldName) ? "date" : "number" : "custom";
            } else if (fieldList.type === "string") {
              isInvalid = selectedCellsInfo.length === 1;
              type = "custom";
            }
          }
        }
        if (isInvalid) {
          this.parent.pivotCommon.errorDialog.createErrorDialog(this.parent.localeObj.getConstant("warning"), this.parent.localeObj.getConstant("invalidSelection"));
          this.parent.grid.clearSelection();
        } else if (type && type !== "") {
          this.createGroupDialog(fieldName, type, selectedCellsInfo);
        }
      }
    };
    Grouping2.prototype.updateUnGroupSettings = function(fieldName, selectedCellsInfo) {
      var fieldList = this.parent.engineModule.fieldList[fieldName];
      var groupFields = PivotUtil.cloneGroupSettings(this.parent.dataSourceSettings.groupSettings);
      var group = this.getGroupSettings(fieldName);
      if (selectedCellsInfo.length > 0) {
        var type = void 0;
        if (fieldList.isCustomField) {
          if (!group) {
            var dateGroup = this.getGroupSettings(fieldName.replace(this.dateGroup, ""));
            var customGroup = this.getGroupSettings(fieldName.replace(/_custom_group/g, ""));
            if (dateGroup) {
              type = "date";
              fieldName = fieldName.replace(this.dateGroup, "");
            } else if (customGroup) {
              type = "custom";
            }
          } else if (group.type === "Custom") {
            type = "custom";
          }
        } else {
          if (group) {
            if (group.type === "Number" || group.type === "Date") {
              type = group.type === "Date" ? "date" : "number";
            }
          }
        }
        if (type === "date" || type === "number") {
          groupFields = this.validateSettings(fieldName, groupFields, type, []);
        } else if (type === "custom") {
          var selectedOptions = this.getSelectedOptions(selectedCellsInfo);
          groupFields = this.validateSettings(fieldName, groupFields, type, selectedOptions);
        }
        this.updateDateSource(groupFields, type);
      }
    };
    Grouping2.prototype.updateDateSource = function(groupFields, type) {
      if (this.isUpdate) {
        this.parent.setProperties({
          dataSourceSettings: {
            groupSettings: groupFields
          }
        }, true);
        this.parent.updateGroupingReport(groupFields, type === "date" ? "Date" : type === "custom" ? "Custom" : "Number");
        if (this.parent.dataSourceSettings.mode === "Server") {
          this.parent.getEngine("onRefresh");
        } else {
          this.parent.initEngine();
        }
      }
    };
    Grouping2.prototype.removeGroupSettings = function(fieldName, selectedOptions, groupFields, groupNames) {
      var index = groupNames.indexOf(fieldName);
      if (index !== -1) {
        var field = groupFields[index];
        for (var j = 0, len = field.customGroups.length; j < len; j++) {
          if (field.customGroups[j]) {
            var group = field.customGroups[j];
            if (PivotUtil.inArray(group.groupName, selectedOptions) !== -1) {
              groupFields = this.modifyParentGroupItems(fieldName, groupFields, [group.groupName], group.items, groupNames);
              field.customGroups.splice(j, 1);
              this.isUpdate = true;
              j--;
              len--;
            }
          }
        }
      }
      delete this.parent.engineModule.groupingFieldsInfo[fieldName];
      return groupFields;
    };
    Grouping2.prototype.getGroupSettings = function(fieldName) {
      for (var _i = 0, _a = this.parent.dataSourceSettings.groupSettings; _i < _a.length; _i++) {
        var group = _a[_i];
        if (group.name === fieldName) {
          return group;
        }
      }
      return void 0;
    };
    Grouping2.prototype.isDateType = function(fieldName) {
      for (var _i = 0, _a = this.parent.dataSourceSettings.formatSettings; _i < _a.length; _i++) {
        var format = _a[_i];
        if (format.name === fieldName && format.type) {
          return true;
        }
      }
      return false;
    };
    Grouping2.prototype.getSelectedCells = function(axis, fieldName, name) {
      var selectedCellsInfo = [];
      var selectedElements = this.parent.element.querySelectorAll("." + CELL_SELECTED_BGCOLOR + ",." + SELECTED_BGCOLOR);
      for (var i = 0; i < selectedElements.length; i++) {
        var element = selectedElements[i];
        var colIndex = parseInt(element.getAttribute("aria-colindex"), 10) - 1;
        var rowIndex = Number(element.getAttribute("index"));
        var cell = this.parent.engineModule.pivotValues[rowIndex][colIndex];
        if (cell && cell.axis === axis && !(cell.type === "grand sum" || cell.type === "sum") && cell.valueSort.axis === fieldName && name !== cell.actualText.toString()) {
          selectedCellsInfo.push({
            axis: cell.axis,
            fieldName: cell.valueSort.axis.toString(),
            name: cell.actualText.toString(),
            cellInfo: cell
          });
        }
      }
      return selectedCellsInfo;
    };
    Grouping2.prototype.createGroupDialog = function(fieldName, type, selectedCellsInfo) {
      var groupDialogElement = createElement("div", {
        id: this.parentElement.id + "_GroupDialog",
        className: "e-group-field-settings",
        attrs: {
          "data-field": fieldName,
          "data-type": type
        }
      });
      this.parentElement.appendChild(groupDialogElement);
      var groupDialog = new Dialog({
        animationSettings: {
          effect: "Fade"
        },
        allowDragging: true,
        header: this.parent.localeObj.getConstant("grouping"),
        content: this.createGroupOptions(fieldName, type),
        isModal: true,
        visible: true,
        showCloseIcon: true,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        width: 300,
        height: "auto",
        position: {
          X: "center",
          Y: "center"
        },
        buttons: [{
          click: this.updateGroupSettings.bind(this, selectedCellsInfo),
          isFlat: false,
          buttonModel: {
            cssClass: OK_BUTTON_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
            content: this.parent.localeObj.getConstant("ok"),
            isPrimary: true
          }
        }, {
          click: function() {
            groupDialog.hide();
          },
          isFlat: false,
          buttonModel: {
            cssClass: CANCEL_BUTTON_CLASS + (this.parent.cssClass ? " " + this.parent.cssClass : ""),
            content: this.parent.localeObj.getConstant("cancel")
          }
        }],
        closeOnEscape: true,
        close: this.removeDialog.bind(this),
        target: this.parentElement,
        cssClass: this.parent.cssClass
      });
      groupDialog.isStringTemplate = true;
      groupDialog.appendTo(groupDialogElement);
    };
    Grouping2.prototype.createGroupOptions = function(fieldName, type) {
      var _this = this;
      var groupInstance = this;
      var mainDiv = createElement("div", {
        className: "e-group-field-div-content",
        id: this.parentElement.id + "_group_field_div_content",
        attrs: {
          "data-fieldName": fieldName,
          "data-type": type
        }
      });
      var groupWrapperDiv1 = createElement("div", {
        className: "e-group-option-container"
      });
      mainDiv.appendChild(groupWrapperDiv1);
      var dataSource = this.parent.dataSourceSettings;
      var groupField = PivotUtil.getFieldByName(fieldName, dataSource.groupSettings);
      switch (type) {
        case "custom":
          {
            var caption = void 0;
            var dataFields = dataSource.rows;
            dataFields = dataFields.concat(dataSource.columns, dataSource.values, dataSource.filters);
            var actualField = PivotUtil.getFieldByName(fieldName.replace(/_custom_group/g, ""), dataFields);
            if (isNullOrUndefined(actualField) && !isNullOrUndefined(this.parent.clonedReport)) {
              var clonedReport = this.parent.clonedReport;
              var clonedDataFields = clonedReport.rows;
              clonedDataFields = clonedDataFields.concat(clonedReport.columns, clonedReport.values, clonedReport.filters);
              actualField = PivotUtil.getFieldByName(fieldName.replace(/_custom_group/g, ""), clonedDataFields);
            }
            var currentField = PivotUtil.getFieldByName(fieldName, dataFields);
            var nextField = PivotUtil.getFieldByName(fieldName + "_custom_group", dataFields);
            if (currentField) {
              var newFieldName = fieldName + "_custom_group";
              caption = nextField ? nextField.caption : this.parent.engineModule.fieldList[actualField.name].caption + (newFieldName.match(/_custom_group/g).length + 1);
            }
            var captionInputTextDiv1 = createElement("div", {
              className: "e-caption-option-text"
            });
            captionInputTextDiv1.innerText = this.parent.localeObj.getConstant("groupFieldCaption");
            var captionInputDiv1 = createElement("div", {
              className: "e-group-caption-container"
            });
            var captionInputField1 = createElement("input", {
              id: this.parentElement.id + "group_caption_option",
              className: "e-group-caption-text",
              attrs: {
                "type": "text"
              }
            });
            captionInputDiv1.appendChild(captionInputTextDiv1);
            captionInputDiv1.appendChild(captionInputField1);
            groupWrapperDiv1.appendChild(captionInputDiv1);
            var inputTextDiv1 = createElement("div", {
              className: "e-input-option-text"
            });
            inputTextDiv1.innerText = this.parent.localeObj.getConstant("groupTitle");
            var inputDiv1 = createElement("div", {
              className: "e-group-input-container"
            });
            var inputField1 = createElement("input", {
              id: this.parentElement.id + "group_input_option",
              className: "e-group-input-text",
              attrs: {
                "type": "text"
              }
            });
            inputDiv1.appendChild(inputTextDiv1);
            inputDiv1.appendChild(inputField1);
            groupWrapperDiv1.appendChild(inputDiv1);
            var captionInputObj1 = new MaskedTextBox({
              placeholder: this.parent.localeObj.getConstant("captionName"),
              enableRtl: this.parent.enableRtl,
              locale: this.parent.locale,
              value: caption,
              width: "100%",
              cssClass: this.parent.cssClass
            });
            captionInputObj1.isStringTemplate = true;
            captionInputObj1.appendTo(captionInputField1);
            var inputObj1 = new MaskedTextBox({
              placeholder: this.parent.localeObj.getConstant("groupName"),
              enableRtl: this.parent.enableRtl,
              locale: this.parent.locale,
              width: "100%",
              cssClass: this.parent.cssClass
            });
            inputObj1.isStringTemplate = true;
            inputObj1.appendTo(inputField1);
          }
          break;
        case "date":
        case "number":
          {
            var startAtWrapper = createElement("div", {
              className: "e-group-start-option-container"
            });
            var startAtOptionDiv1 = createElement("input", {
              id: this.parentElement.id + "group_start_option",
              className: "e-group_start_option",
              attrs: {
                "type": "checkbox"
              }
            });
            var startAtInputField1 = createElement("input", {
              id: this.parentElement.id + "group_start_input",
              className: "e-group_start_input",
              attrs: {
                "type": "text"
              }
            });
            startAtWrapper.appendChild(startAtOptionDiv1);
            startAtWrapper.appendChild(startAtInputField1);
            groupWrapperDiv1.appendChild(startAtWrapper);
            var endAtWrapper = createElement("div", {
              className: "e-group-end-option-container"
            });
            var endAtOptionDiv1 = createElement("input", {
              id: this.parentElement.id + "group_end_option",
              className: "e-group_end_option",
              attrs: {
                "type": "checkbox"
              }
            });
            var endAtInputField1 = createElement("input", {
              id: this.parentElement.id + "group_end_input",
              className: "e-group_end_input",
              attrs: {
                "type": "text"
              }
            });
            endAtWrapper.appendChild(endAtOptionDiv1);
            endAtWrapper.appendChild(endAtInputField1);
            groupWrapperDiv1.appendChild(endAtWrapper);
            var intervalWrapper = createElement("div", {
              className: "e-group-interval-option-container"
            });
            var intervalTextDiv1 = createElement("div", {
              className: "e-group-inerval-option-text"
            });
            intervalTextDiv1.innerText = this.parent.localeObj.getConstant("groupBy");
            var intervalInputField1 = createElement("input", {
              id: this.parentElement.id + "group_interval_input",
              className: "e-group_interval_input",
              attrs: {
                "type": "text"
              }
            });
            intervalWrapper.appendChild(intervalTextDiv1);
            intervalWrapper.appendChild(intervalInputField1);
            groupWrapperDiv1.appendChild(intervalWrapper);
            var startAt = void 0;
            var endAt = void 0;
            if (type === "date") {
              var selectedGroups = [];
              var groupData = [{
                value: "Seconds",
                text: this.parent.localeObj.getConstant("Seconds")
              }, {
                value: "Minutes",
                text: this.parent.localeObj.getConstant("Minutes")
              }, {
                value: "Hours",
                text: this.parent.localeObj.getConstant("Hours")
              }, {
                value: "Days",
                text: this.parent.localeObj.getConstant("Days")
              }, {
                value: "Months",
                text: this.parent.localeObj.getConstant("Months")
              }, {
                value: "QuarterYear",
                text: this.parent.localeObj.getConstant("QuarterYear")
              }, {
                value: "Quarters",
                text: this.parent.localeObj.getConstant("Quarters")
              }, {
                value: "Years",
                text: this.parent.localeObj.getConstant("Years")
              }];
              if (groupField && groupField.type === "Date") {
                selectedGroups = groupField.groupInterval;
                startAt = groupField.startingAt ? groupField.startingAt.toString() : void 0;
                endAt = groupField.endingAt ? groupField.endingAt.toString() : void 0;
              } else {
                selectedGroups = ["Months"];
              }
              var startAtInputObj = new DateTimePicker({
                placeholder: this.parent.localeObj.getConstant("chooseDate"),
                enableRtl: this.parent.enableRtl,
                locale: this.parent.locale,
                format: "dd/MM/yyyy hh:mm:ss a",
                enabled: !(startAt === void 0),
                width: "100%",
                cssClass: this.parent.cssClass
              });
              startAtInputObj.isStringTemplate = true;
              startAtInputObj.appendTo(startAtInputField1);
              var endAtInputObj = new DateTimePicker({
                placeholder: this.parent.localeObj.getConstant("chooseDate"),
                enableRtl: this.parent.enableRtl,
                locale: this.parent.locale,
                format: "dd/MM/yyyy hh:mm:ss a",
                enabled: !(endAt === void 0),
                width: "100%",
                cssClass: this.parent.cssClass
              });
              endAtInputObj.isStringTemplate = true;
              endAtInputObj.appendTo(endAtInputField1);
              MultiSelect.Inject(CheckBoxSelection);
              var intervalObj_1 = new MultiSelect({
                dataSource: groupData,
                value: selectedGroups,
                fields: {
                  text: "text",
                  value: "value"
                },
                mode: "CheckBox",
                showDropDownIcon: true,
                enableSelectionOrder: false,
                placeholder: this.parent.localeObj.getConstant("selectGroup"),
                filterBarPlaceholder: this.parent.localeObj.getConstant("example") + " " + this.parent.localeObj.getConstant("Months"),
                enableRtl: this.parent.enableRtl,
                locale: this.parent.locale,
                enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
                cssClass: this.parent.cssClass,
                select: function() {
                  getInstance(select("#" + groupInstance.parentElement.id + "_GroupDialog", document), Dialog).element.querySelector("." + OK_BUTTON_CLASS).removeAttribute("disabled");
                },
                removed: function() {
                  var nodeList = intervalObj_1["liCollections"];
                  var activeListCount = 0;
                  nodeList.forEach(function(item) {
                    if (item.classList.contains("e-active")) {
                      activeListCount++;
                    }
                  });
                  if (activeListCount === 0) {
                    getInstance(select("#" + groupInstance.parentElement.id + "_GroupDialog", document), Dialog).element.querySelector("." + OK_BUTTON_CLASS).setAttribute("disabled", "disabled");
                  }
                }
              });
              intervalObj_1.isStringTemplate = true;
              intervalObj_1.appendTo(intervalInputField1);
              startAtInputObj.value = startAt === void 0 ? null : new Date(startAt);
              startAtInputObj.dataBind();
              endAtInputObj.value = endAt === void 0 ? null : new Date(endAt);
              endAtInputObj.dataBind();
            } else {
              var selectedInterval = void 0;
              if (groupField && groupField.type === "Number") {
                selectedInterval = groupField.rangeInterval;
                startAt = groupField.startingAt ? groupField.startingAt.toString() : void 0;
                endAt = groupField.endingAt ? groupField.endingAt.toString() : void 0;
              } else {
                selectedInterval = 2;
              }
              var startAtInputObj = new NumericTextBox({
                placeholder: this.parent.localeObj.getConstant("enterValue"),
                enableRtl: this.parent.enableRtl,
                locale: this.parent.locale,
                showClearButton: true,
                format: "###.##########",
                value: startAt === void 0 ? void 0 : parseFloat(startAt),
                enabled: !(startAt === void 0),
                width: "100%",
                cssClass: this.parent.cssClass
              });
              startAtInputObj.isStringTemplate = true;
              startAtInputObj.appendTo(startAtInputField1);
              var endAtInputObj = new NumericTextBox({
                placeholder: this.parent.localeObj.getConstant("enterValue"),
                enableRtl: this.parent.enableRtl,
                locale: this.parent.locale,
                showClearButton: true,
                format: "###.##########",
                value: endAt === void 0 ? void 0 : parseFloat(endAt),
                enabled: !(endAt === void 0),
                width: "100%",
                cssClass: this.parent.cssClass
              });
              endAtInputObj.isStringTemplate = true;
              endAtInputObj.appendTo(endAtInputField1);
              var intervalObj = new NumericTextBox({
                placeholder: this.parent.localeObj.getConstant("enterValue"),
                enableRtl: this.parent.enableRtl,
                locale: this.parent.locale,
                showClearButton: true,
                format: "###.##########",
                min: 0,
                value: selectedInterval,
                width: "100%",
                cssClass: this.parent.cssClass
              });
              intervalObj.isStringTemplate = true;
              intervalObj.appendTo(intervalInputField1);
            }
            var startAtObj = new CheckBox({
              label: this.parent.localeObj.getConstant("startAt"),
              checked: !(startAt === void 0),
              enableRtl: this.parent.enableRtl,
              locale: this.parent.locale,
              enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
              cssClass: this.parent.cssClass,
              change: function(args) {
                var startAtObj2 = type === "date" ? getInstance(select("#" + _this.parentElement.id + "group_start_input"), DateTimePicker) : getInstance(select("#" + _this.parentElement.id + "group_start_input"), NumericTextBox);
                startAtObj2.enabled = args.checked;
                startAtObj2.dataBind();
              }
            });
            startAtObj.isStringTemplate = true;
            startAtObj.appendTo(startAtOptionDiv1);
            var endAtObj = new CheckBox({
              label: this.parent.localeObj.getConstant("endAt"),
              checked: !(endAt === void 0),
              enableRtl: this.parent.enableRtl,
              locale: this.parent.locale,
              enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
              cssClass: this.parent.cssClass,
              change: function(args) {
                var endAtObj2 = type === "date" ? getInstance(select("#" + _this.parentElement.id + "group_end_input"), DateTimePicker) : getInstance(select("#" + _this.parentElement.id + "group_end_input"), NumericTextBox);
                endAtObj2.enabled = args.checked;
                endAtObj2.dataBind();
              }
            });
            endAtObj.isStringTemplate = true;
            endAtObj.appendTo(endAtOptionDiv1);
          }
          break;
      }
      return mainDiv;
    };
    Grouping2.prototype.updateGroupSettings = function(selectedCellsInfo) {
      var groupDialog = getInstance(select("#" + this.parentElement.id + "_GroupDialog", document), Dialog);
      var dialogElement = groupDialog.element;
      var groupType = dialogElement.getAttribute("data-type");
      var fieldName = dialogElement.getAttribute("data-field");
      var groupFields = PivotUtil.cloneGroupSettings(this.parent.dataSourceSettings.groupSettings);
      if (groupFields.length === 0 && !this.parent.clonedDataSet && !this.parent.clonedReport) {
        var dataSet = this.parent.engineModule.data;
        this.parent.clonedDataSet = this.parent.dataSourceSettings.type === "CSV" ? PivotUtil.getClonedCSVData(dataSet) : PivotUtil.getClonedData(dataSet);
        this.parent.setProperties({
          dataSourceSettings: {
            dataSource: []
          }
        }, true);
        this.parent.clonedReport = extend({}, this.parent.dataSourceSettings, null, true);
        this.parent.setProperties({
          dataSourceSettings: {
            dataSource: dataSet
          }
        }, true);
      }
      if (groupType === "custom") {
        var inputInstance = getInstance(select("#" + this.parentElement.id + "group_input_option"), MaskedTextBox);
        var captionInputInstance = getInstance(select("#" + this.parentElement.id + "group_caption_option"), MaskedTextBox);
        removeClass([inputInstance.element], EMPTY_FIELD);
        if (inputInstance.value === null || inputInstance.value === "") {
          addClass([inputInstance.element], EMPTY_FIELD);
          inputInstance.element.focus();
          return;
        }
        var selectedOptions = this.getSelectedOptions(selectedCellsInfo);
        var customGroup = {
          groupName: inputInstance.value,
          items: selectedOptions
        };
        var splicedItems = [];
        var newItems = [];
        var field = {
          name: fieldName,
          caption: captionInputInstance.value,
          type: "Custom",
          customGroups: []
        };
        var isUpdated = false;
        for (var i = 0, len = groupFields.length; i < len; i++) {
          if (groupFields[i].name === fieldName) {
            field = groupFields[i];
            field.caption = captionInputInstance.value;
            for (var j = 0, len_1 = field.customGroups.length; j < len_1; j++) {
              if (field.customGroups[j]) {
                var group = field.customGroups[j];
                if (group.items && PivotExportUtil.isContainCommonElements(group.items, selectedOptions)) {
                  splicedItems = this.mergeArray(splicedItems, [group.groupName]);
                  newItems = this.mergeArray(newItems, group.items);
                  field.customGroups.splice(j, 1);
                  j--;
                  len_1--;
                }
              }
            }
            for (var _i = 0, selectedOptions_1 = selectedOptions; _i < selectedOptions_1.length; _i++) {
              var item = selectedOptions_1[_i];
              var index = newItems.indexOf(item);
              if (index !== -1) {
                newItems.splice(index, 1);
              }
            }
            newItems = this.mergeArray(newItems, [customGroup.groupName]);
            field.customGroups.push(customGroup);
            this.isUpdate = true;
            isUpdated = true;
            break;
          }
        }
        if (!isUpdated) {
          field.customGroups.push(customGroup);
          this.isUpdate = true;
          groupFields.push(field);
        }
        groupFields = this.validateSettings(fieldName, groupFields, groupType, splicedItems.length === 0 ? customGroup.items : splicedItems, newItems);
      } else if (groupType === "date" || groupType === "number") {
        var startCheckBoxInstance = getInstance(select("#" + this.parentElement.id + "group_start_option"), CheckBox);
        var endCheckBoxInstance = getInstance(select("#" + this.parentElement.id + "group_end_option"), CheckBox);
        var startInputInstance = groupType === "date" ? getInstance(select("#" + this.parentElement.id + "group_start_input"), DateTimePicker) : getInstance(select("#" + this.parentElement.id + "group_start_input"), NumericTextBox);
        var endInputInstance = groupType === "date" ? getInstance(select("#" + this.parentElement.id + "group_end_input"), DateTimePicker) : getInstance(select("#" + this.parentElement.id + "group_end_input"), NumericTextBox);
        var intervalInstance = groupType === "date" ? getInstance(select("#" + this.parentElement.id + "group_interval_input"), MultiSelect) : getInstance(select("#" + this.parentElement.id + "group_interval_input"), NumericTextBox);
        var startAt = startCheckBoxInstance.checked ? startInputInstance.value.toString() : void 0;
        var endAt = endCheckBoxInstance.checked ? endInputInstance.value.toString() : void 0;
        var field = {
          name: fieldName,
          startingAt: startAt,
          endingAt: endAt
        };
        if (groupType === "date") {
          var selectedItems = [];
          for (var _a = 0, _b = intervalInstance.value; _a < _b.length; _a++) {
            var list = _b[_a];
            selectedItems.push(list);
          }
          field.type = "Date";
          field.groupInterval = selectedItems;
        } else {
          field.type = "Number";
          field.rangeInterval = intervalInstance.value;
        }
        var isUpdated = false;
        for (var i = 0, len = groupFields.length; i < len; i++) {
          if (groupFields[i].name === fieldName) {
            groupFields.splice(i, 1, field);
            this.isUpdate = true;
            isUpdated = true;
            break;
          }
        }
        if (!isUpdated) {
          this.isUpdate = true;
          groupFields.push(field);
        }
        groupFields = this.validateSettings(fieldName, groupFields, groupType, [], []);
      }
      groupDialog.close();
      this.updateDateSource(groupFields, groupType);
    };
    Grouping2.prototype.getGroupBasedSettings = function(groupFields) {
      var groups = {};
      for (var _i = 0, groupFields_1 = groupFields; _i < groupFields_1.length; _i++) {
        var group = groupFields_1[_i];
        if (groups[group.type]) {
          groups[group.type].push(group);
        } else {
          groups[group.type] = [group];
        }
      }
      return groups;
    };
    Grouping2.prototype.getGroupByName = function(groupFields) {
      var customFields = {};
      for (var _i = 0, groupFields_2 = groupFields; _i < groupFields_2.length; _i++) {
        var field = groupFields_2[_i];
        var name_1 = field.name.replace(/_custom_group/g, "");
        if (customFields[name_1]) {
          customFields[name_1].push(field);
        } else {
          customFields[name_1] = [field];
        }
      }
      return customFields;
    };
    Grouping2.prototype.validateSettings = function(fieldName, groupFields, groupType, splicedItems, newItems) {
      var validatedSettings = [];
      var groups = this.getGroupBasedSettings(groupFields);
      var groupOrders = ["Date", "Number", "Custom"];
      if (groups[groupOrders[2]] && groupType === "custom") {
        var customFields = this.getGroupByName(groups[groupOrders[2]]);
        if (customFields[fieldName.replace(/_custom_group/g, "")]) {
          var customGroups = customFields[fieldName.replace(/_custom_group/g, "")];
          var fields = customGroups.map(function(item) {
            return item.name;
          });
          if (newItems) {
            customGroups = this.modifyParentGroupItems(fieldName, customGroups, splicedItems, newItems, fields);
          } else {
            customGroups = this.removeGroupSettings(fieldName.replace("_custom_group", ""), splicedItems, customGroups, fields);
          }
        }
        var orderedGroups = [];
        for (var _i = 0, _a = Object.keys(customFields); _i < _a.length; _i++) {
          var field = _a[_i];
          var fields = customFields[field].map(function(item) {
            return item.name;
          });
          orderedGroups = this.reOrderSettings(customFields[field], fields, orderedGroups, field, fieldName);
        }
        groups[groupOrders[2]] = orderedGroups;
      } else if ((groupType === "date" || groupType === "number") && !newItems) {
        var groupFields_3 = groupType === "date" ? groups[groupOrders[0]] : groups[groupOrders[1]];
        if (groupType === "date") {
          groups[groupOrders[0]] = groupFields_3.filter(function(field2) {
            return field2.name !== fieldName;
          });
          var groupingTypes_1 = ["_date_group_years", "_date_group_quarters", "_date_group_quarterYear", "_date_group_months", "_date_group_days", "_date_group_hours", "_date_group_minutes", "_date_group_seconds"];
          if (groups[groupOrders[0]].length === 0) {
            delete this.parent.engineModule.groupingFieldsInfo[fieldName];
            var _loop_1 = function(key2) {
              if (groupingTypes_1.some(function(dateTypes) {
                return key2 === "" + fieldName + dateTypes;
              })) {
                delete this_1.parent.engineModule.groupingFieldsInfo[key2];
              }
            };
            var this_1 = this;
            for (var key in this.parent.engineModule.groupingFieldsInfo) {
              _loop_1(key);
            }
            var _loop_2 = function(key2) {
              if (groupingTypes_1.some(function(dateTypes) {
                return key2 === "" + fieldName + dateTypes;
              })) {
                delete this_2.parent.engineModule.fieldList[key2];
              }
            };
            var this_2 = this;
            for (var key in this.parent.engineModule.fieldList) {
              _loop_2(key);
            }
            var updatedFields = this.parent.engineModule.fields.filter(function(item) {
              return !groupingTypes_1.some(function(dateTypes) {
                return item === "" + fieldName + dateTypes;
              });
            });
            this.parent.engineModule.fields = updatedFields;
          }
        } else {
          groups[groupOrders[1]] = groupFields_3.filter(function(field2) {
            return field2.name !== fieldName;
          });
        }
        this.isUpdate = true;
      }
      for (var _b = 0, groupOrders_1 = groupOrders; _b < groupOrders_1.length; _b++) {
        var order = groupOrders_1[_b];
        if (groups[order]) {
          validatedSettings = validatedSettings.concat(groups[order]);
        }
      }
      return validatedSettings;
    };
    Grouping2.prototype.reOrderSettings = function(customGroups, fields, orderedSettings, fieldName, groupedFieldName) {
      var index = fields.indexOf(fieldName);
      if (index > -1 && customGroups[index].customGroups && customGroups[index].customGroups.length > 0) {
        orderedSettings.push(customGroups[index]);
        this.reOrderSettings(customGroups, fields, orderedSettings, fieldName + "_custom_group");
      } else if (index > -1 && customGroups[index].customGroups && customGroups[index].customGroups.length === 0 && !isNullOrUndefined(groupedFieldName)) {
        delete this.parent.engineModule.fieldList[groupedFieldName];
        delete this.parent.engineModule.groupingFieldsInfo[groupedFieldName];
        var updatedFields = this.parent.engineModule.fields.filter(function(value) {
          return value !== groupedFieldName;
        });
        this.parent.engineModule.fields = updatedFields;
      }
      return orderedSettings;
    };
    Grouping2.prototype.modifyParentGroupItems = function(fieldName, groupFields, splicedItems, newItems, fields) {
      var index = fields.indexOf(fieldName + "_custom_group");
      if (index !== -1) {
        var field = groupFields[index];
        if (field.customGroups && field.customGroups.length > 0) {
          for (var i = 0, len = field.customGroups.length; i < len; i++) {
            if (field.customGroups[i]) {
              var isItemsUpdated = false;
              var group = field.customGroups[i];
              if (group.items) {
                for (var _i = 0, splicedItems_1 = splicedItems; _i < splicedItems_1.length; _i++) {
                  var item = splicedItems_1[_i];
                  var pos = group.items.indexOf(item);
                  if (pos !== -1) {
                    group.items.splice(pos, 1);
                    this.isUpdate = true;
                    isItemsUpdated = true;
                  }
                }
                if (isItemsUpdated) {
                  group.items = this.mergeArray(group.items, newItems);
                }
              }
            }
          }
        }
      }
      return groupFields;
    };
    Grouping2.prototype.mergeArray = function(collection1, collection2) {
      var resultArray = [];
      var array = collection1.concat(collection2);
      var len = array.length;
      var assoc = {};
      while (len--) {
        var item = String(array[len]);
        if (!assoc[item]) {
          resultArray.unshift(item);
          assoc[item] = true;
        }
      }
      return resultArray;
    };
    Grouping2.prototype.removeDialog = function() {
      if (this.parent.grid && this.parent.grid.isDestroyed || isNullOrUndefined(this.parent.grid)) {
        return;
      }
      this.parent.grid.clearSelection();
      var element = select("#" + this.parent.element.id + "_GroupDialog", document);
      var groupDialog = element ? getInstance(element, Dialog) : null;
      if (groupDialog && !groupDialog.isDestroyed) {
        groupDialog.destroy();
      }
      if (this.parent.element && document.getElementById(this.parent.element.id + "_GroupDialog")) {
        remove(document.getElementById(this.parent.element.id + "_GroupDialog"));
      }
    };
    Grouping2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(initGrouping, this.render, this);
    };
    Grouping2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.removeDialog();
      this.parent.off(initGrouping, this.render);
    };
    Grouping2.prototype.destroy = function() {
      this.removeEventListener();
    };
    return Grouping2;
  }()
);

// node_modules/@syncfusion/ej2-angular-pivotview/fesm2020/syncfusion-ej2-angular-pivotview.mjs
var _c0 = ["cellTemplate"];
var _c1 = ["tooltipTemplate"];
var inputs$1 = ["aggregateTypes", "allowCalculatedField", "allowConditionalFormatting", "allowDataCompression", "allowDeferLayoutUpdate", "allowDrillThrough", "allowExcelExport", "allowGrouping", "allowNumberFormatting", "allowPdfExport", "cellTemplate", "chartSettings", "chartTypes", "cssClass", "dataSourceSettings", "displayOption", "editSettings", "enableFieldSearching", "enableHtmlSanitizer", "enablePaging", "enablePersistence", "enableRtl", "enableValueSorting", "enableVirtualization", "exportAllPages", "gridSettings", "groupingBarSettings", "height", "hyperlinkSettings", "loadOnDemandInMemberEditor", "locale", "maxNodeLimitInMemberEditor", "maxRowsInDrillThrough", "pageSettings", "pagerSettings", "pivotValues", "showFieldList", "showGroupingBar", "showToolbar", "showTooltip", "showValuesButton", "spinnerTemplate", "toolbar", "toolbarTemplate", "tooltipTemplate", "virtualScrollSettings", "width"];
var outputs$1 = ["actionBegin", "actionComplete", "actionFailure", "afterServiceInvoke", "aggregateCellInfo", "aggregateMenuOpen", "beforeExport", "beforeServiceInvoke", "beginDrillThrough", "calculatedFieldCreate", "cellClick", "cellSelected", "cellSelecting", "chartSeriesCreated", "conditionalFormatting", "created", "dataBound", "destroyed", "drill", "drillThrough", "editCompleted", "enginePopulated", "enginePopulating", "exportComplete", "fetchReport", "fieldDragStart", "fieldDrop", "fieldListRefreshed", "fieldRemove", "hyperlinkCellClick", "load", "loadReport", "memberEditorOpen", "memberFiltering", "newReport", "numberFormatting", "onFieldDropped", "onHeadersSort", "onPdfCellRender", "removeReport", "renameReport", "saveReport", "toolbarClick", "toolbarRender"];
var twoWays$1 = [];
var PivotViewComponent = class PivotViewComponent2 extends PivotView {
  constructor(ngEle, srenderer, viewContainerRef, injector) {
    super();
    this.ngEle = ngEle;
    this.srenderer = srenderer;
    this.viewContainerRef = viewContainerRef;
    this.injector = injector;
    this.element = this.ngEle.nativeElement;
    this.injectedModules = this.injectedModules || [];
    try {
      let mod = this.injector.get("PivotViewGroupingBar");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("PivotViewFieldList");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("PivotViewCalculatedField");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("PivotViewConditionalFormatting");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("PivotViewVirtualScroll");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("PivotViewDrillThrough");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("PivotViewToolbar");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("PivotViewPivotChart");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("PivotViewPDFExport");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("PivotViewExcelExport");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("PivotViewNumberFormatting");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("PivotViewGrouping");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("PivotViewPager");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    this.registerEvents(outputs$1);
    this.addTwoWay.call(this, twoWays$1);
    setValue2("currentInstance", this, this.viewContainerRef);
    this.context = new ComponentBase();
  }
  ngOnInit() {
    this.context.ngOnInit(this);
  }
  ngAfterViewInit() {
    this.context.ngAfterViewInit(this);
  }
  ngOnDestroy() {
    this.context.ngOnDestroy(this);
  }
  ngAfterContentChecked() {
    this.context.ngAfterContentChecked(this);
  }
};
PivotViewComponent.ɵfac = function PivotViewComponent_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || PivotViewComponent)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(Injector));
};
PivotViewComponent.ɵcmp = ɵɵdefineComponent({
  type: PivotViewComponent,
  selectors: [["ejs-pivotview"]],
  contentQueries: function PivotViewComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, _c0, 5);
      ɵɵcontentQuery(dirIndex, _c1, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.cellTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);
    }
  },
  inputs: {
    aggregateTypes: "aggregateTypes",
    allowCalculatedField: "allowCalculatedField",
    allowConditionalFormatting: "allowConditionalFormatting",
    allowDataCompression: "allowDataCompression",
    allowDeferLayoutUpdate: "allowDeferLayoutUpdate",
    allowDrillThrough: "allowDrillThrough",
    allowExcelExport: "allowExcelExport",
    allowGrouping: "allowGrouping",
    allowNumberFormatting: "allowNumberFormatting",
    allowPdfExport: "allowPdfExport",
    cellTemplate: "cellTemplate",
    chartSettings: "chartSettings",
    chartTypes: "chartTypes",
    cssClass: "cssClass",
    dataSourceSettings: "dataSourceSettings",
    displayOption: "displayOption",
    editSettings: "editSettings",
    enableFieldSearching: "enableFieldSearching",
    enableHtmlSanitizer: "enableHtmlSanitizer",
    enablePaging: "enablePaging",
    enablePersistence: "enablePersistence",
    enableRtl: "enableRtl",
    enableValueSorting: "enableValueSorting",
    enableVirtualization: "enableVirtualization",
    exportAllPages: "exportAllPages",
    gridSettings: "gridSettings",
    groupingBarSettings: "groupingBarSettings",
    height: "height",
    hyperlinkSettings: "hyperlinkSettings",
    loadOnDemandInMemberEditor: "loadOnDemandInMemberEditor",
    locale: "locale",
    maxNodeLimitInMemberEditor: "maxNodeLimitInMemberEditor",
    maxRowsInDrillThrough: "maxRowsInDrillThrough",
    pageSettings: "pageSettings",
    pagerSettings: "pagerSettings",
    pivotValues: "pivotValues",
    showFieldList: "showFieldList",
    showGroupingBar: "showGroupingBar",
    showToolbar: "showToolbar",
    showTooltip: "showTooltip",
    showValuesButton: "showValuesButton",
    spinnerTemplate: "spinnerTemplate",
    toolbar: "toolbar",
    toolbarTemplate: "toolbarTemplate",
    tooltipTemplate: "tooltipTemplate",
    virtualScrollSettings: "virtualScrollSettings",
    width: "width"
  },
  outputs: {
    actionBegin: "actionBegin",
    actionComplete: "actionComplete",
    actionFailure: "actionFailure",
    afterServiceInvoke: "afterServiceInvoke",
    aggregateCellInfo: "aggregateCellInfo",
    aggregateMenuOpen: "aggregateMenuOpen",
    beforeExport: "beforeExport",
    beforeServiceInvoke: "beforeServiceInvoke",
    beginDrillThrough: "beginDrillThrough",
    calculatedFieldCreate: "calculatedFieldCreate",
    cellClick: "cellClick",
    cellSelected: "cellSelected",
    cellSelecting: "cellSelecting",
    chartSeriesCreated: "chartSeriesCreated",
    conditionalFormatting: "conditionalFormatting",
    created: "created",
    dataBound: "dataBound",
    destroyed: "destroyed",
    drill: "drill",
    drillThrough: "drillThrough",
    editCompleted: "editCompleted",
    enginePopulated: "enginePopulated",
    enginePopulating: "enginePopulating",
    exportComplete: "exportComplete",
    fetchReport: "fetchReport",
    fieldDragStart: "fieldDragStart",
    fieldDrop: "fieldDrop",
    fieldListRefreshed: "fieldListRefreshed",
    fieldRemove: "fieldRemove",
    hyperlinkCellClick: "hyperlinkCellClick",
    load: "load",
    loadReport: "loadReport",
    memberEditorOpen: "memberEditorOpen",
    memberFiltering: "memberFiltering",
    newReport: "newReport",
    numberFormatting: "numberFormatting",
    onFieldDropped: "onFieldDropped",
    onHeadersSort: "onHeadersSort",
    onPdfCellRender: "onPdfCellRender",
    removeReport: "removeReport",
    renameReport: "renameReport",
    saveReport: "saveReport",
    toolbarClick: "toolbarClick",
    toolbarRender: "toolbarRender"
  },
  standalone: false,
  features: [ɵɵInheritDefinitionFeature],
  decls: 0,
  vars: 0,
  template: function PivotViewComponent_Template(rf, ctx) {
  },
  encapsulation: 2,
  changeDetection: 0
});
__decorate([Template()], PivotViewComponent.prototype, "cellTemplate", void 0);
__decorate([Template()], PivotViewComponent.prototype, "tooltipTemplate", void 0);
PivotViewComponent = __decorate([ComponentMixins([ComponentBase])], PivotViewComponent);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PivotViewComponent, [{
    type: Component,
    args: [{
      selector: "ejs-pivotview",
      inputs: inputs$1,
      outputs: outputs$1,
      template: "",
      changeDetection: ChangeDetectionStrategy.OnPush,
      queries: {}
    }]
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: Renderer2
    }, {
      type: ViewContainerRef
    }, {
      type: Injector
    }];
  }, {
    cellTemplate: [{
      type: ContentChild,
      args: ["cellTemplate"]
    }],
    tooltipTemplate: [{
      type: ContentChild,
      args: ["tooltipTemplate"]
    }]
  });
})();
var PivotViewModule = class {
};
PivotViewModule.ɵfac = function PivotViewModule_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || PivotViewModule)();
};
PivotViewModule.ɵmod = ɵɵdefineNgModule({
  type: PivotViewModule,
  declarations: [PivotViewComponent],
  imports: [CommonModule],
  exports: [PivotViewComponent]
});
PivotViewModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule]]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PivotViewModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule],
      declarations: [PivotViewComponent],
      exports: [PivotViewComponent]
    }]
  }], null, null);
})();
var GroupingBarService = {
  provide: "PivotViewGroupingBar",
  useValue: GroupingBar
};
var FieldListService = {
  provide: "PivotViewFieldList",
  useValue: FieldList
};
var CalculatedFieldService = {
  provide: "PivotViewCalculatedField",
  useValue: CalculatedField
};
var ConditionalFormattingService = {
  provide: "PivotViewConditionalFormatting",
  useValue: ConditionalFormatting
};
var VirtualScrollService = {
  provide: "PivotViewVirtualScroll",
  useValue: VirtualScroll2
};
var DrillThroughService = {
  provide: "PivotViewDrillThrough",
  useValue: DrillThrough
};
var ToolbarService = {
  provide: "PivotViewToolbar",
  useValue: Toolbar3
};
var PivotChartService = {
  provide: "PivotViewPivotChart",
  useValue: PivotChart
};
var PDFExportService = {
  provide: "PivotViewPDFExport",
  useValue: PDFExport
};
var ExcelExportService = {
  provide: "PivotViewExcelExport",
  useValue: ExcelExport2
};
var NumberFormattingService = {
  provide: "PivotViewNumberFormatting",
  useValue: NumberFormatting
};
var GroupingService = {
  provide: "PivotViewGrouping",
  useValue: Grouping
};
var PagerService = {
  provide: "PivotViewPager",
  useValue: Pager2
};
var PivotViewAllModule = class {
};
PivotViewAllModule.ɵfac = function PivotViewAllModule_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || PivotViewAllModule)();
};
PivotViewAllModule.ɵmod = ɵɵdefineNgModule({
  type: PivotViewAllModule,
  imports: [CommonModule, PivotViewModule],
  exports: [PivotViewModule]
});
PivotViewAllModule.ɵinj = ɵɵdefineInjector({
  providers: [GroupingBarService, FieldListService, CalculatedFieldService, ConditionalFormattingService, VirtualScrollService, DrillThroughService, ToolbarService, PivotChartService, PDFExportService, ExcelExportService, NumberFormattingService, GroupingService, PagerService],
  imports: [[CommonModule, PivotViewModule], PivotViewModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PivotViewAllModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, PivotViewModule],
      exports: [PivotViewModule],
      providers: [GroupingBarService, FieldListService, CalculatedFieldService, ConditionalFormattingService, VirtualScrollService, DrillThroughService, ToolbarService, PivotChartService, PDFExportService, ExcelExportService, NumberFormattingService, GroupingService, PagerService]
    }]
  }], null, null);
})();
var inputs = ["aggregateTypes", "allowCalculatedField", "allowDeferLayoutUpdate", "cssClass", "currencyCode", "dataSourceSettings", "enableFieldSearching", "enableHtmlSanitizer", "enablePersistence", "enableRtl", "loadOnDemandInMemberEditor", "locale", "maxNodeLimitInMemberEditor", "renderMode", "showValuesButton", "spinnerTemplate", "target"];
var outputs = ["actionBegin", "actionComplete", "actionFailure", "afterServiceInvoke", "aggregateCellInfo", "aggregateMenuOpen", "beforeServiceInvoke", "calculatedFieldCreate", "created", "dataBound", "destroyed", "enginePopulated", "enginePopulating", "fieldDragStart", "fieldDrop", "fieldRemove", "load", "memberEditorOpen", "memberFiltering", "onFieldDropped", "onHeadersSort"];
var twoWays = [];
var PivotFieldListComponent = class PivotFieldListComponent2 extends PivotFieldList {
  constructor(ngEle, srenderer, viewContainerRef, injector) {
    super();
    this.ngEle = ngEle;
    this.srenderer = srenderer;
    this.viewContainerRef = viewContainerRef;
    this.injector = injector;
    this.element = this.ngEle.nativeElement;
    this.injectedModules = this.injectedModules || [];
    try {
      let mod = this.injector.get("PivotViewCalculatedField");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    this.registerEvents(outputs);
    this.addTwoWay.call(this, twoWays);
    setValue2("currentInstance", this, this.viewContainerRef);
    this.context = new ComponentBase();
  }
  ngOnInit() {
    this.context.ngOnInit(this);
  }
  ngAfterViewInit() {
    this.context.ngAfterViewInit(this);
  }
  ngOnDestroy() {
    this.context.ngOnDestroy(this);
  }
  ngAfterContentChecked() {
    this.context.ngAfterContentChecked(this);
  }
};
PivotFieldListComponent.ɵfac = function PivotFieldListComponent_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || PivotFieldListComponent)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(Injector));
};
PivotFieldListComponent.ɵcmp = ɵɵdefineComponent({
  type: PivotFieldListComponent,
  selectors: [["ejs-pivotfieldlist"]],
  inputs: {
    aggregateTypes: "aggregateTypes",
    allowCalculatedField: "allowCalculatedField",
    allowDeferLayoutUpdate: "allowDeferLayoutUpdate",
    cssClass: "cssClass",
    currencyCode: "currencyCode",
    dataSourceSettings: "dataSourceSettings",
    enableFieldSearching: "enableFieldSearching",
    enableHtmlSanitizer: "enableHtmlSanitizer",
    enablePersistence: "enablePersistence",
    enableRtl: "enableRtl",
    loadOnDemandInMemberEditor: "loadOnDemandInMemberEditor",
    locale: "locale",
    maxNodeLimitInMemberEditor: "maxNodeLimitInMemberEditor",
    renderMode: "renderMode",
    showValuesButton: "showValuesButton",
    spinnerTemplate: "spinnerTemplate",
    target: "target"
  },
  outputs: {
    actionBegin: "actionBegin",
    actionComplete: "actionComplete",
    actionFailure: "actionFailure",
    afterServiceInvoke: "afterServiceInvoke",
    aggregateCellInfo: "aggregateCellInfo",
    aggregateMenuOpen: "aggregateMenuOpen",
    beforeServiceInvoke: "beforeServiceInvoke",
    calculatedFieldCreate: "calculatedFieldCreate",
    created: "created",
    dataBound: "dataBound",
    destroyed: "destroyed",
    enginePopulated: "enginePopulated",
    enginePopulating: "enginePopulating",
    fieldDragStart: "fieldDragStart",
    fieldDrop: "fieldDrop",
    fieldRemove: "fieldRemove",
    load: "load",
    memberEditorOpen: "memberEditorOpen",
    memberFiltering: "memberFiltering",
    onFieldDropped: "onFieldDropped",
    onHeadersSort: "onHeadersSort"
  },
  standalone: false,
  features: [ɵɵInheritDefinitionFeature],
  decls: 0,
  vars: 0,
  template: function PivotFieldListComponent_Template(rf, ctx) {
  },
  encapsulation: 2,
  changeDetection: 0
});
PivotFieldListComponent = __decorate([ComponentMixins([ComponentBase])], PivotFieldListComponent);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PivotFieldListComponent, [{
    type: Component,
    args: [{
      selector: "ejs-pivotfieldlist",
      inputs,
      outputs,
      template: "",
      changeDetection: ChangeDetectionStrategy.OnPush,
      queries: {}
    }]
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: Renderer2
    }, {
      type: ViewContainerRef
    }, {
      type: Injector
    }];
  }, null);
})();
var PivotFieldListModule = class {
};
PivotFieldListModule.ɵfac = function PivotFieldListModule_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || PivotFieldListModule)();
};
PivotFieldListModule.ɵmod = ɵɵdefineNgModule({
  type: PivotFieldListModule,
  declarations: [PivotFieldListComponent],
  imports: [CommonModule],
  exports: [PivotFieldListComponent]
});
PivotFieldListModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule]]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PivotFieldListModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule],
      declarations: [PivotFieldListComponent],
      exports: [PivotFieldListComponent]
    }]
  }], null, null);
})();
var PivotFieldListAllModule = class {
};
PivotFieldListAllModule.ɵfac = function PivotFieldListAllModule_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || PivotFieldListAllModule)();
};
PivotFieldListAllModule.ɵmod = ɵɵdefineNgModule({
  type: PivotFieldListAllModule,
  imports: [CommonModule, PivotFieldListModule],
  exports: [PivotFieldListModule]
});
PivotFieldListAllModule.ɵinj = ɵɵdefineInjector({
  providers: [],
  imports: [[CommonModule, PivotFieldListModule], PivotFieldListModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PivotFieldListAllModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, PivotFieldListModule],
      exports: [PivotFieldListModule],
      providers: []
    }]
  }], null, null);
})();
export {
  AggregateMenu,
  Authentication,
  AxisFieldRenderer,
  AxisTableRenderer,
  CalculatedField,
  CalculatedFieldService,
  CalculatedFieldSettings,
  CellEditSettings,
  Common,
  CommonKeyboardInteraction,
  ConditionalFormatSettings,
  ConditionalFormatting,
  ConditionalFormattingService,
  ConditionalSettings,
  CustomGroups,
  DataSourceSettings,
  DataSourceUpdate,
  DialogRenderer,
  DisplayOption,
  DrillOptions,
  DrillThrough,
  DrillThroughService,
  ErrorDialog,
  EventBase,
  ExcelExport2 as ExcelExport,
  ExcelExportService,
  FieldList,
  FieldListFieldOptions,
  FieldListService,
  FieldOptions,
  Filter,
  FilterDialog,
  FormatSettings,
  GroupSettings,
  Grouping,
  GroupingBar,
  GroupingBarService,
  GroupingBarSettings,
  GroupingService,
  HyperlinkSettings,
  KeyboardInteraction,
  MDXQuery,
  MdxQuery,
  NodeStateModified,
  NumberFormatting,
  NumberFormattingService,
  OlapEngine,
  PDFExport,
  PDFExportService,
  PageSettings,
  Pager2 as Pager,
  PagerService,
  PagerSettings,
  PivotChart,
  PivotChartService,
  PivotCommon,
  PivotContextMenu,
  PivotEngine,
  PivotFieldList,
  PivotFieldListAllModule,
  PivotFieldListComponent,
  PivotFieldListModule,
  PivotUtil,
  PivotView,
  PivotViewAllModule,
  PivotViewComponent,
  PivotViewModule,
  Render,
  Sort,
  Style,
  Toolbar3 as Toolbar,
  ToolbarService,
  TreeViewRenderer,
  ValueSortSettings,
  VirtualScroll2 as VirtualScroll,
  VirtualScrollService,
  VirtualScrollSettings,
  actionBegin,
  actionComplete,
  actionDropped,
  actionFailure,
  addNewRecord,
  addNewReport,
  afterPivotTableRender,
  afterServiceInvoke,
  aggregateCellInfo,
  aggregateField,
  aggregateMenuOpen,
  animationComplete,
  axisLabelFont,
  axisTitleFont,
  beforeColumnsRender,
  beforeExcelExport,
  beforeExport,
  beforePdfExport,
  beforePivotTableRender,
  beforePrint,
  beforeServiceInvoke,
  beginDrillThrough,
  calculatedFieldApplied,
  calculatedFieldCreate,
  calculatedFieldEdited,
  cellClick,
  cellDeselected,
  cellSelected,
  cellSelecting,
  chartAxisLabelRender,
  chartLegendClick,
  chartLoad,
  chartLoaded,
  chartMouseClick,
  chartMouseDown,
  chartMouseLeave,
  chartMouseMove,
  chartMouseUp,
  chartPointClick,
  chartResized,
  chartSeriesCreated,
  chartSubTitleFont,
  chartTitleFont,
  chartTooltipRender,
  chartView,
  chartViewed,
  click,
  closeFieldlist,
  columnPageNavigated,
  columnPageNavigation,
  conditionalFormatting,
  conditionalFormattingMenu,
  conditionallyFormatted,
  contentReady,
  contextMenuCalculatedField,
  contextMenuClick,
  contextMenuOpen,
  crosshairLabelFont,
  csvExport,
  csvExported,
  dataBound,
  dataReady,
  dragComplete,
  drill,
  drillDown,
  drillThrough,
  drillThroughClosed,
  drillUp,
  editCalculatedField,
  editCompleted,
  editRecord,
  editedRecordsSaved,
  enginePopulated,
  enginePopulating,
  excelExport,
  excelExported,
  excelHeaderQueryCellInfo,
  excelQueryCellInfo,
  exportComplete,
  fetchReport,
  fieldAggregated,
  fieldDragStart,
  fieldDrop,
  fieldFiltered,
  fieldListRefreshed,
  fieldRemove,
  fieldRemoved,
  fieldSorted,
  fieldTreeSorted,
  filterField,
  grandTotalsColumn,
  grandTotalsColumnShown,
  grandTotalsHidden,
  grandTotalsRow,
  grandTotalsRowShown,
  grandTotalsShown,
  headerCellInfo,
  hideGrandTotals,
  hideSubTotals,
  horizontalScroll,
  horizontalScrolled,
  hyperlinkCellClick,
  initCalculatedField,
  initFormatting,
  initGrouping,
  initPivotPager,
  initSubComponent,
  initToolbar,
  initialLoad,
  invalidFormula,
  jpegExport,
  jpegExported,
  legendLabelFont,
  legendRender,
  load,
  loadReport,
  loadReports,
  memberEditorOpen,
  memberFiltering,
  multiLevelLabelClick,
  multiLevelLabelRender,
  multipleAxis,
  newRecordAdded,
  newReport,
  newReportAdded,
  numberFormatted,
  numberFormatting,
  numberFormattingMenu,
  onFieldDropped,
  onHeadersSort,
  onPdfCellRender,
  openCalculatedField,
  openConditionalFormatting,
  openNumberFormatting,
  pdfExport,
  pdfExported,
  pdfHeaderQueryCellInfo,
  pdfQueryCellInfo,
  pivotButtonUpdate,
  pngExport,
  pngExported,
  pointMove,
  pointRender,
  queryCellInfo,
  recordEdited,
  recordRemoved,
  recordUpdated,
  removeCurrentReport,
  removeField,
  removeRecord,
  removeReport,
  renameCurrentReport,
  renameReport,
  reportChange,
  reportChanged,
  reportReSaved,
  reportRemoved,
  reportRenamed,
  reportSaved,
  resizeStop,
  resizing,
  rowDeselected,
  rowPageNavigated,
  rowPageNavigation,
  rowSelected,
  saveAsCurrentReport,
  saveCurrentReport,
  saveEditedRecords,
  saveReport,
  scroll,
  scrollChanged,
  scrollEnd,
  scrollStart,
  selected,
  selecting,
  seriesRender,
  showFieldList,
  showGrandTotals,
  showLegend,
  showSubTotals,
  sortField,
  sortFieldTree,
  sortValue,
  stockEventFont,
  stripLineLabelFont,
  subTotalsColumn,
  subTotalsColumnShown,
  subTotalsHidden,
  subTotalsRow,
  subTotalsRowShown,
  subTotalsShown,
  svgExport,
  svgExported,
  tableView,
  tableViewed,
  textRender,
  toolbarClick,
  toolbarRender,
  tooltipLabelFont,
  treeViewUpdate,
  uiUpdate,
  valueSorted,
  verticalScroll,
  verticalScrolled,
  windowResize,
  windowResized,
  zoomComplete
};
//# sourceMappingURL=@syncfusion_ej2-angular-pivotview.js.map
